
ESE516 BOOTLOADER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007d38  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000ac  20000000  00007d38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000d84  200000ac  00007de4  000200ac  2**2
                  ALLOC
  3 .stack        00002000  20000e30  00008b68  000200ac  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
  6 .debug_info   0004ae4f  00000000  00000000  0002012d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000720e  00000000  00000000  0006af7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00010dc3  00000000  00000000  0007218a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000bd0  00000000  00000000  00082f4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001128  00000000  00000000  00083b1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00021903  00000000  00000000  00084c45  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00018382  00000000  00000000  000a6548  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00093c2d  00000000  00000000  000be8ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002650  00000000  00000000  001524f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	30 2e 00 20 01 37 00 00 fd 36 00 00 fd 36 00 00     0.. .7...6...6..
	...
      2c:	fd 36 00 00 00 00 00 00 00 00 00 00 fd 36 00 00     .6...........6..
      3c:	8d 01 00 00 fd 36 00 00 fd 36 00 00 fd 36 00 00     .....6...6...6..
      4c:	fd 36 00 00 fd 36 00 00 fd 36 00 00 fd 36 00 00     .6...6...6...6..
      5c:	fd 36 00 00 fd 36 00 00 55 21 00 00 65 21 00 00     .6...6..U!..e!..
      6c:	75 21 00 00 85 21 00 00 95 21 00 00 a5 21 00 00     u!...!...!...!..
      7c:	fd 36 00 00 fd 36 00 00 fd 36 00 00 fd 36 00 00     .6...6...6...6..
      8c:	fd 36 00 00 fd 36 00 00 00 00 00 00 00 00 00 00     .6...6..........
      9c:	fd 36 00 00 fd 36 00 00 fd 36 00 00 fd 36 00 00     .6...6...6...6..
      ac:	fd 36 00 00 00 00 00 00                             .6......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200000ac 	.word	0x200000ac
      d4:	00000000 	.word	0x00000000
      d8:	00007d38 	.word	0x00007d38

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200000b0 	.word	0x200000b0
     108:	00007d38 	.word	0x00007d38
     10c:	00007d38 	.word	0x00007d38
     110:	00000000 	.word	0x00000000

00000114 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     114:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     116:	2000      	movs	r0, #0
     118:	4b08      	ldr	r3, [pc, #32]	; (13c <delay_init+0x28>)
     11a:	4798      	blx	r3
     11c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     11e:	4c08      	ldr	r4, [pc, #32]	; (140 <delay_init+0x2c>)
     120:	21fa      	movs	r1, #250	; 0xfa
     122:	0089      	lsls	r1, r1, #2
     124:	47a0      	blx	r4
     126:	4b07      	ldr	r3, [pc, #28]	; (144 <delay_init+0x30>)
     128:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     12a:	4907      	ldr	r1, [pc, #28]	; (148 <delay_init+0x34>)
     12c:	0028      	movs	r0, r5
     12e:	47a0      	blx	r4
     130:	4b06      	ldr	r3, [pc, #24]	; (14c <delay_init+0x38>)
     132:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     134:	2205      	movs	r2, #5
     136:	4b06      	ldr	r3, [pc, #24]	; (150 <delay_init+0x3c>)
     138:	601a      	str	r2, [r3, #0]
}
     13a:	bd70      	pop	{r4, r5, r6, pc}
     13c:	0000348d 	.word	0x0000348d
     140:	00005f31 	.word	0x00005f31
     144:	20000000 	.word	0x20000000
     148:	000f4240 	.word	0x000f4240
     14c:	20000004 	.word	0x20000004
     150:	e000e010 	.word	0xe000e010

00000154 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     154:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     156:	4b08      	ldr	r3, [pc, #32]	; (178 <delay_cycles_ms+0x24>)
     158:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     15a:	4a08      	ldr	r2, [pc, #32]	; (17c <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     15c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     15e:	2180      	movs	r1, #128	; 0x80
     160:	0249      	lsls	r1, r1, #9
	while (n--) {
     162:	3801      	subs	r0, #1
     164:	d307      	bcc.n	176 <delay_cycles_ms+0x22>
	if (n > 0) {
     166:	2c00      	cmp	r4, #0
     168:	d0fb      	beq.n	162 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     16a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     16c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     16e:	6813      	ldr	r3, [r2, #0]
     170:	420b      	tst	r3, r1
     172:	d0fc      	beq.n	16e <delay_cycles_ms+0x1a>
     174:	e7f5      	b.n	162 <delay_cycles_ms+0xe>
	}
}
     176:	bd30      	pop	{r4, r5, pc}
     178:	20000000 	.word	0x20000000
     17c:	e000e010 	.word	0xe000e010

00000180 <GetSystick>:
* @return	Unused (ANSI-C compatibility).
* @note		Bootloader code initiates here.
*****************************************************************************/
uint32_t GetSystick(void)
{
	return ul_tickcount;
     180:	4b01      	ldr	r3, [pc, #4]	; (188 <GetSystick+0x8>)
     182:	6818      	ldr	r0, [r3, #0]
}
     184:	4770      	bx	lr
     186:	46c0      	nop			; (mov r8, r8)
     188:	200000c8 	.word	0x200000c8

0000018c <SysTick_Handler>:
 *
 ******************************************************************************/
void SysTick_Handler(void)
{
	
	ul_tickcount++;
     18c:	4a02      	ldr	r2, [pc, #8]	; (198 <SysTick_Handler+0xc>)
     18e:	6813      	ldr	r3, [r2, #0]
     190:	3301      	adds	r3, #1
     192:	6013      	str	r3, [r2, #0]
}
     194:	4770      	bx	lr
     196:	46c0      	nop			; (mov r8, r8)
     198:	200000c8 	.word	0x200000c8

0000019c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     19c:	b5f0      	push	{r4, r5, r6, r7, lr}
     19e:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     1a0:	ac01      	add	r4, sp, #4
     1a2:	2501      	movs	r5, #1
     1a4:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     1a6:	2700      	movs	r7, #0
     1a8:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     1aa:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     1ac:	0021      	movs	r1, r4
     1ae:	2017      	movs	r0, #23
     1b0:	4e06      	ldr	r6, [pc, #24]	; (1cc <system_board_init+0x30>)
     1b2:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     1b4:	2280      	movs	r2, #128	; 0x80
     1b6:	0412      	lsls	r2, r2, #16
     1b8:	4b05      	ldr	r3, [pc, #20]	; (1d0 <system_board_init+0x34>)
     1ba:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     1bc:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     1be:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     1c0:	0021      	movs	r1, r4
     1c2:	2037      	movs	r0, #55	; 0x37
     1c4:	47b0      	blx	r6
}
     1c6:	b003      	add	sp, #12
     1c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     1ca:	46c0      	nop			; (mov r8, r8)
     1cc:	00001b75 	.word	0x00001b75
     1d0:	41004400 	.word	0x41004400

000001d4 <dsu_crc32_cal>:
 * \retval STATUS_ERR_BAD_ADDRESS  The address was not aligned with 4 bytes.
 
 * \retval STATUS_ERR_IO  A bus error is detected
 */
enum status_code dsu_crc32_cal(const uint32_t addr, const uint32_t len, uint32_t *pcrc32)
{
     1d4:	b570      	push	{r4, r5, r6, lr}
     1d6:	0004      	movs	r4, r0
     1d8:	000e      	movs	r6, r1
     1da:	0015      	movs	r5, r2
	if (addr & 0x00000003) {
		return STATUS_ERR_BAD_ADDRESS;
     1dc:	2018      	movs	r0, #24
	if (addr & 0x00000003) {
     1de:	07a3      	lsls	r3, r4, #30
     1e0:	d000      	beq.n	1e4 <dsu_crc32_cal+0x10>
	DSU->STATUSA.reg = DSU_STATUSA_DONE;

	system_peripheral_lock(SYSTEM_PERIPHERAL_ID(DSU), ~SYSTEM_PERIPHERAL_ID(DSU));
	system_interrupt_enable_global();
	return STATUS_OK;
     1e2:	bd70      	pop	{r4, r5, r6, pc}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     1e4:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     1e6:	f3bf 8f5f 	dmb	sy
 * Disabled global interrupts in the device, preventing any enabled interrupt
 * handlers from executing.
 */
static inline void system_interrupt_disable_global(void)
{
	cpu_irq_disable();
     1ea:	2200      	movs	r2, #0
     1ec:	4b1b      	ldr	r3, [pc, #108]	; (25c <dsu_crc32_cal+0x88>)
     1ee:	701a      	strb	r2, [r3, #0]
	system_peripheral_unlock(SYSTEM_PERIPHERAL_ID(DSU), ~SYSTEM_PERIPHERAL_ID(DSU));
     1f0:	2122      	movs	r1, #34	; 0x22
     1f2:	4249      	negs	r1, r1
     1f4:	3009      	adds	r0, #9
     1f6:	4b1a      	ldr	r3, [pc, #104]	; (260 <dsu_crc32_cal+0x8c>)
     1f8:	4798      	blx	r3
	DSU->DATA.reg = *pcrc32;
     1fa:	4b1a      	ldr	r3, [pc, #104]	; (264 <dsu_crc32_cal+0x90>)
     1fc:	682a      	ldr	r2, [r5, #0]
     1fe:	60da      	str	r2, [r3, #12]
	DSU->ADDR.reg = addr;
     200:	605c      	str	r4, [r3, #4]
	DSU->LENGTH.reg = len;
     202:	609e      	str	r6, [r3, #8]
	DSU->CTRL.bit.CRC = 1;
     204:	781a      	ldrb	r2, [r3, #0]
     206:	2104      	movs	r1, #4
     208:	430a      	orrs	r2, r1
     20a:	701a      	strb	r2, [r3, #0]
	while ((DSU->STATUSA.reg & DSU_STATUSA_DONE) != 1) {	
     20c:	0019      	movs	r1, r3
     20e:	2201      	movs	r2, #1
     210:	784b      	ldrb	r3, [r1, #1]
     212:	4213      	tst	r3, r2
     214:	d0fc      	beq.n	210 <dsu_crc32_cal+0x3c>
	if (DSU->STATUSA.reg & DSU_STATUSA_BERR) {
     216:	4b13      	ldr	r3, [pc, #76]	; (264 <dsu_crc32_cal+0x90>)
     218:	785b      	ldrb	r3, [r3, #1]
     21a:	075b      	lsls	r3, r3, #29
     21c:	d50c      	bpl.n	238 <dsu_crc32_cal+0x64>
		system_peripheral_lock(SYSTEM_PERIPHERAL_ID(DSU), ~SYSTEM_PERIPHERAL_ID(DSU));
     21e:	2122      	movs	r1, #34	; 0x22
     220:	4249      	negs	r1, r1
     222:	2021      	movs	r0, #33	; 0x21
     224:	4b10      	ldr	r3, [pc, #64]	; (268 <dsu_crc32_cal+0x94>)
     226:	4798      	blx	r3
	cpu_irq_enable();
     228:	2201      	movs	r2, #1
     22a:	4b0c      	ldr	r3, [pc, #48]	; (25c <dsu_crc32_cal+0x88>)
     22c:	701a      	strb	r2, [r3, #0]
     22e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     232:	b662      	cpsie	i
		return STATUS_ERR_IO;
     234:	2010      	movs	r0, #16
     236:	e7d4      	b.n	1e2 <dsu_crc32_cal+0xe>
	*pcrc32 = DSU->DATA.reg;
     238:	4b0a      	ldr	r3, [pc, #40]	; (264 <dsu_crc32_cal+0x90>)
     23a:	68da      	ldr	r2, [r3, #12]
     23c:	602a      	str	r2, [r5, #0]
	DSU->STATUSA.reg = DSU_STATUSA_DONE;
     23e:	2401      	movs	r4, #1
     240:	705c      	strb	r4, [r3, #1]
	system_peripheral_lock(SYSTEM_PERIPHERAL_ID(DSU), ~SYSTEM_PERIPHERAL_ID(DSU));
     242:	2122      	movs	r1, #34	; 0x22
     244:	4249      	negs	r1, r1
     246:	2021      	movs	r0, #33	; 0x21
     248:	4b07      	ldr	r3, [pc, #28]	; (268 <dsu_crc32_cal+0x94>)
     24a:	4798      	blx	r3
     24c:	4b03      	ldr	r3, [pc, #12]	; (25c <dsu_crc32_cal+0x88>)
     24e:	701c      	strb	r4, [r3, #0]
     250:	f3bf 8f5f 	dmb	sy
     254:	b662      	cpsie	i
	return STATUS_OK;
     256:	2000      	movs	r0, #0
     258:	e7c3      	b.n	1e2 <dsu_crc32_cal+0xe>
     25a:	46c0      	nop			; (mov r8, r8)
     25c:	20000009 	.word	0x20000009
     260:	00000551 	.word	0x00000551
     264:	41002000 	.word	0x41002000
     268:	000004f1 	.word	0x000004f1

0000026c <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
     26c:	b510      	push	{r4, lr}
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     26e:	4a1e      	ldr	r2, [pc, #120]	; (2e8 <nvm_set_config+0x7c>)
     270:	69d3      	ldr	r3, [r2, #28]
     272:	2104      	movs	r1, #4
     274:	430b      	orrs	r3, r1
     276:	61d3      	str	r3, [r2, #28]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     278:	4b1c      	ldr	r3, [pc, #112]	; (2ec <nvm_set_config+0x80>)
     27a:	2220      	movs	r2, #32
     27c:	32ff      	adds	r2, #255	; 0xff
     27e:	831a      	strh	r2, [r3, #24]
static inline bool nvm_is_ready(void)
{
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     280:	7d1a      	ldrb	r2, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
		return STATUS_BUSY;
     282:	2305      	movs	r3, #5
	if (!nvm_is_ready()) {
     284:	07d2      	lsls	r2, r2, #31
     286:	d401      	bmi.n	28c <nvm_set_config+0x20>
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
		return STATUS_ERR_IO;
	}

	return STATUS_OK;
}
     288:	0018      	movs	r0, r3
     28a:	bd10      	pop	{r4, pc}
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
     28c:	7803      	ldrb	r3, [r0, #0]
     28e:	021b      	lsls	r3, r3, #8
     290:	22c0      	movs	r2, #192	; 0xc0
     292:	0092      	lsls	r2, r2, #2
     294:	4013      	ands	r3, r2
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
     296:	7841      	ldrb	r1, [r0, #1]
     298:	01c9      	lsls	r1, r1, #7
     29a:	22ff      	movs	r2, #255	; 0xff
     29c:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
     29e:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_RWS(config->wait_states) |
     2a0:	7881      	ldrb	r1, [r0, #2]
     2a2:	0049      	lsls	r1, r1, #1
     2a4:	221e      	movs	r2, #30
     2a6:	400a      	ands	r2, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
     2a8:	4313      	orrs	r3, r2
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
     2aa:	78c2      	ldrb	r2, [r0, #3]
     2ac:	0492      	lsls	r2, r2, #18
     2ae:	2180      	movs	r1, #128	; 0x80
     2b0:	02c9      	lsls	r1, r1, #11
     2b2:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
     2b4:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
     2b6:	7902      	ldrb	r2, [r0, #4]
     2b8:	0412      	lsls	r2, r2, #16
     2ba:	21c0      	movs	r1, #192	; 0xc0
     2bc:	0289      	lsls	r1, r1, #10
     2be:	400a      	ands	r2, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
     2c0:	4313      	orrs	r3, r2
	nvm_module->CTRLB.reg =
     2c2:	4a0a      	ldr	r2, [pc, #40]	; (2ec <nvm_set_config+0x80>)
     2c4:	6053      	str	r3, [r2, #4]
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
     2c6:	6893      	ldr	r3, [r2, #8]
     2c8:	035b      	lsls	r3, r3, #13
     2ca:	0f5b      	lsrs	r3, r3, #29
     2cc:	4908      	ldr	r1, [pc, #32]	; (2f0 <nvm_set_config+0x84>)
     2ce:	2408      	movs	r4, #8
     2d0:	409c      	lsls	r4, r3
     2d2:	800c      	strh	r4, [r1, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
     2d4:	6893      	ldr	r3, [r2, #8]
     2d6:	804b      	strh	r3, [r1, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
     2d8:	7843      	ldrb	r3, [r0, #1]
     2da:	710b      	strb	r3, [r1, #4]
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
     2dc:	8b13      	ldrh	r3, [r2, #24]
     2de:	05db      	lsls	r3, r3, #23
	return STATUS_OK;
     2e0:	0fdb      	lsrs	r3, r3, #31
     2e2:	011b      	lsls	r3, r3, #4
     2e4:	e7d0      	b.n	288 <nvm_set_config+0x1c>
     2e6:	46c0      	nop			; (mov r8, r8)
     2e8:	40000400 	.word	0x40000400
     2ec:	41004000 	.word	0x41004000
     2f0:	200000cc 	.word	0x200000cc

000002f4 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
     2f4:	b530      	push	{r4, r5, lr}
     2f6:	0004      	movs	r4, r0
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
     2f8:	4a22      	ldr	r2, [pc, #136]	; (384 <nvm_execute_command+0x90>)
     2fa:	8810      	ldrh	r0, [r2, #0]
     2fc:	8853      	ldrh	r3, [r2, #2]
     2fe:	4343      	muls	r3, r0
     300:	428b      	cmp	r3, r1
     302:	d206      	bcs.n	312 <nvm_execute_command+0x1e>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
     304:	2280      	movs	r2, #128	; 0x80
     306:	0192      	lsls	r2, r2, #6
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
     308:	2018      	movs	r0, #24
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
     30a:	4b1f      	ldr	r3, [pc, #124]	; (388 <nvm_execute_command+0x94>)
     30c:	18cb      	adds	r3, r1, r3
     30e:	4293      	cmp	r3, r2
     310:	d80e      	bhi.n	330 <nvm_execute_command+0x3c>

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
     312:	4b1e      	ldr	r3, [pc, #120]	; (38c <nvm_execute_command+0x98>)
     314:	685d      	ldr	r5, [r3, #4]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2))))
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
     316:	2280      	movs	r2, #128	; 0x80
     318:	02d2      	lsls	r2, r2, #11
     31a:	432a      	orrs	r2, r5
     31c:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     31e:	2220      	movs	r2, #32
     320:	32ff      	adds	r2, #255	; 0xff
     322:	831a      	strh	r2, [r3, #24]
     324:	7d1b      	ldrb	r3, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
     326:	07db      	lsls	r3, r3, #31
     328:	d403      	bmi.n	332 <nvm_execute_command+0x3e>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
     32a:	4b18      	ldr	r3, [pc, #96]	; (38c <nvm_execute_command+0x98>)
     32c:	605d      	str	r5, [r3, #4]
		return STATUS_BUSY;
     32e:	2005      	movs	r0, #5

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;

	return STATUS_OK;
}
     330:	bd30      	pop	{r4, r5, pc}
	switch (command) {
     332:	2c45      	cmp	r4, #69	; 0x45
     334:	d822      	bhi.n	37c <nvm_execute_command+0x88>
     336:	00a3      	lsls	r3, r4, #2
     338:	4a15      	ldr	r2, [pc, #84]	; (390 <nvm_execute_command+0x9c>)
     33a:	58d3      	ldr	r3, [r2, r3]
     33c:	469f      	mov	pc, r3
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
     33e:	4b13      	ldr	r3, [pc, #76]	; (38c <nvm_execute_command+0x98>)
     340:	8b1b      	ldrh	r3, [r3, #24]
     342:	05db      	lsls	r3, r3, #23
     344:	d503      	bpl.n	34e <nvm_execute_command+0x5a>
				nvm_module->CTRLB.reg = ctrlb_bak;
     346:	4b11      	ldr	r3, [pc, #68]	; (38c <nvm_execute_command+0x98>)
     348:	605d      	str	r5, [r3, #4]
				return STATUS_ERR_IO;
     34a:	2010      	movs	r0, #16
     34c:	e7f0      	b.n	330 <nvm_execute_command+0x3c>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
     34e:	0889      	lsrs	r1, r1, #2
     350:	0049      	lsls	r1, r1, #1
     352:	4b0e      	ldr	r3, [pc, #56]	; (38c <nvm_execute_command+0x98>)
     354:	61d9      	str	r1, [r3, #28]
			break;
     356:	e003      	b.n	360 <nvm_execute_command+0x6c>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
     358:	0889      	lsrs	r1, r1, #2
     35a:	0049      	lsls	r1, r1, #1
     35c:	4b0b      	ldr	r3, [pc, #44]	; (38c <nvm_execute_command+0x98>)
     35e:	61d9      	str	r1, [r3, #28]
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
     360:	20a5      	movs	r0, #165	; 0xa5
     362:	0200      	lsls	r0, r0, #8
     364:	4304      	orrs	r4, r0
     366:	4b09      	ldr	r3, [pc, #36]	; (38c <nvm_execute_command+0x98>)
     368:	801c      	strh	r4, [r3, #0]
     36a:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
     36c:	2201      	movs	r2, #1
     36e:	7d0b      	ldrb	r3, [r1, #20]
     370:	4213      	tst	r3, r2
     372:	d0fc      	beq.n	36e <nvm_execute_command+0x7a>
	nvm_module->CTRLB.reg = ctrlb_bak;
     374:	4b05      	ldr	r3, [pc, #20]	; (38c <nvm_execute_command+0x98>)
     376:	605d      	str	r5, [r3, #4]
	return STATUS_OK;
     378:	2000      	movs	r0, #0
     37a:	e7d9      	b.n	330 <nvm_execute_command+0x3c>
			nvm_module->CTRLB.reg = ctrlb_bak;
     37c:	4b03      	ldr	r3, [pc, #12]	; (38c <nvm_execute_command+0x98>)
     37e:	605d      	str	r5, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
     380:	2017      	movs	r0, #23
     382:	e7d5      	b.n	330 <nvm_execute_command+0x3c>
     384:	200000cc 	.word	0x200000cc
     388:	ff7fc000 	.word	0xff7fc000
     38c:	41004000 	.word	0x41004000
     390:	0000717c 	.word	0x0000717c

00000394 <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
     394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
     396:	4b25      	ldr	r3, [pc, #148]	; (42c <nvm_write_buffer+0x98>)
     398:	881d      	ldrh	r5, [r3, #0]
     39a:	885b      	ldrh	r3, [r3, #2]
     39c:	436b      	muls	r3, r5
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
     39e:	2418      	movs	r4, #24
	if (destination_address >
     3a0:	4283      	cmp	r3, r0
     3a2:	d201      	bcs.n	3a8 <nvm_write_buffer+0x14>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
}
     3a4:	0020      	movs	r0, r4
     3a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (destination_address & (_nvm_dev.page_size - 1)) {
     3a8:	1e6b      	subs	r3, r5, #1
     3aa:	4218      	tst	r0, r3
     3ac:	d1fa      	bne.n	3a4 <nvm_write_buffer+0x10>
		return STATUS_ERR_INVALID_ARG;
     3ae:	3c01      	subs	r4, #1
	if (length > _nvm_dev.page_size) {
     3b0:	4295      	cmp	r5, r2
     3b2:	d3f7      	bcc.n	3a4 <nvm_write_buffer+0x10>
     3b4:	4b1e      	ldr	r3, [pc, #120]	; (430 <nvm_write_buffer+0x9c>)
     3b6:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
     3b8:	3c12      	subs	r4, #18
	if (!nvm_is_ready()) {
     3ba:	07db      	lsls	r3, r3, #31
     3bc:	d5f2      	bpl.n	3a4 <nvm_write_buffer+0x10>
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
     3be:	4c1d      	ldr	r4, [pc, #116]	; (434 <nvm_write_buffer+0xa0>)
     3c0:	4b1b      	ldr	r3, [pc, #108]	; (430 <nvm_write_buffer+0x9c>)
     3c2:	801c      	strh	r4, [r3, #0]
     3c4:	001d      	movs	r5, r3
	while (!nvm_is_ready()) {
     3c6:	2401      	movs	r4, #1
     3c8:	7d2b      	ldrb	r3, [r5, #20]
     3ca:	4223      	tst	r3, r4
     3cc:	d0fc      	beq.n	3c8 <nvm_write_buffer+0x34>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     3ce:	2420      	movs	r4, #32
     3d0:	34ff      	adds	r4, #255	; 0xff
     3d2:	4b17      	ldr	r3, [pc, #92]	; (430 <nvm_write_buffer+0x9c>)
     3d4:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
     3d6:	2a00      	cmp	r2, #0
     3d8:	d022      	beq.n	420 <nvm_write_buffer+0x8c>
     3da:	2301      	movs	r3, #1
     3dc:	0005      	movs	r5, r0
     3de:	439d      	bics	r5, r3
     3e0:	2300      	movs	r3, #0
		if (i < (length - 1)) {
     3e2:	1e57      	subs	r7, r2, #1
     3e4:	e009      	b.n	3fa <nvm_write_buffer+0x66>
			data |= (buffer[i + 1] << 8);
     3e6:	18ce      	adds	r6, r1, r3
     3e8:	7876      	ldrb	r6, [r6, #1]
     3ea:	0236      	lsls	r6, r6, #8
     3ec:	4334      	orrs	r4, r6
		NVM_MEMORY[nvm_address++] = data;
     3ee:	802c      	strh	r4, [r5, #0]
	for (uint16_t i = 0; i < length; i += 2) {
     3f0:	3302      	adds	r3, #2
     3f2:	b29b      	uxth	r3, r3
     3f4:	3502      	adds	r5, #2
     3f6:	429a      	cmp	r2, r3
     3f8:	d904      	bls.n	404 <nvm_write_buffer+0x70>
		data = buffer[i];
     3fa:	5ccc      	ldrb	r4, [r1, r3]
		if (i < (length - 1)) {
     3fc:	42bb      	cmp	r3, r7
     3fe:	dbf2      	blt.n	3e6 <nvm_write_buffer+0x52>
		data = buffer[i];
     400:	b2a4      	uxth	r4, r4
     402:	e7f4      	b.n	3ee <nvm_write_buffer+0x5a>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     404:	4b09      	ldr	r3, [pc, #36]	; (42c <nvm_write_buffer+0x98>)
     406:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
     408:	2400      	movs	r4, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     40a:	2b00      	cmp	r3, #0
     40c:	d1ca      	bne.n	3a4 <nvm_write_buffer+0x10>
     40e:	2a3f      	cmp	r2, #63	; 0x3f
     410:	d8c8      	bhi.n	3a4 <nvm_write_buffer+0x10>
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
     412:	2200      	movs	r2, #0
     414:	0001      	movs	r1, r0
     416:	2004      	movs	r0, #4
     418:	4b07      	ldr	r3, [pc, #28]	; (438 <nvm_write_buffer+0xa4>)
     41a:	4798      	blx	r3
     41c:	0004      	movs	r4, r0
     41e:	e7c1      	b.n	3a4 <nvm_write_buffer+0x10>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     420:	4b02      	ldr	r3, [pc, #8]	; (42c <nvm_write_buffer+0x98>)
     422:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
     424:	2400      	movs	r4, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     426:	2b00      	cmp	r3, #0
     428:	d0f3      	beq.n	412 <nvm_write_buffer+0x7e>
     42a:	e7bb      	b.n	3a4 <nvm_write_buffer+0x10>
     42c:	200000cc 	.word	0x200000cc
     430:	41004000 	.word	0x41004000
     434:	ffffa544 	.word	0xffffa544
     438:	000002f5 	.word	0x000002f5

0000043c <nvm_erase_row>:
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
     43c:	4b13      	ldr	r3, [pc, #76]	; (48c <nvm_erase_row+0x50>)
     43e:	881a      	ldrh	r2, [r3, #0]
     440:	885b      	ldrh	r3, [r3, #2]
     442:	4353      	muls	r3, r2
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
     444:	2118      	movs	r1, #24
	if (row_address >
     446:	4283      	cmp	r3, r0
     448:	d201      	bcs.n	44e <nvm_erase_row+0x12>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
		return STATUS_ABORTED;
	}

	return STATUS_OK;
}
     44a:	0008      	movs	r0, r1
     44c:	4770      	bx	lr
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
     44e:	0092      	lsls	r2, r2, #2
     450:	3a01      	subs	r2, #1
     452:	4210      	tst	r0, r2
     454:	d1f9      	bne.n	44a <nvm_erase_row+0xe>
     456:	4b0e      	ldr	r3, [pc, #56]	; (490 <nvm_erase_row+0x54>)
     458:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
     45a:	3913      	subs	r1, #19
	if (!nvm_is_ready()) {
     45c:	07db      	lsls	r3, r3, #31
     45e:	d5f4      	bpl.n	44a <nvm_erase_row+0xe>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     460:	4b0b      	ldr	r3, [pc, #44]	; (490 <nvm_erase_row+0x54>)
     462:	2220      	movs	r2, #32
     464:	32ff      	adds	r2, #255	; 0xff
     466:	831a      	strh	r2, [r3, #24]
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
     468:	0880      	lsrs	r0, r0, #2
     46a:	0040      	lsls	r0, r0, #1
     46c:	61d8      	str	r0, [r3, #28]
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
     46e:	4a09      	ldr	r2, [pc, #36]	; (494 <nvm_erase_row+0x58>)
     470:	801a      	strh	r2, [r3, #0]
     472:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
     474:	2201      	movs	r2, #1
     476:	7d0b      	ldrb	r3, [r1, #20]
     478:	4213      	tst	r3, r2
     47a:	d0fc      	beq.n	476 <nvm_erase_row+0x3a>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
     47c:	4b04      	ldr	r3, [pc, #16]	; (490 <nvm_erase_row+0x54>)
     47e:	8b19      	ldrh	r1, [r3, #24]
     480:	201c      	movs	r0, #28
     482:	4001      	ands	r1, r0
	return STATUS_OK;
     484:	1e48      	subs	r0, r1, #1
     486:	4181      	sbcs	r1, r0
     488:	0089      	lsls	r1, r1, #2
     48a:	e7de      	b.n	44a <nvm_erase_row+0xe>
     48c:	200000cc 	.word	0x200000cc
     490:	41004000 	.word	0x41004000
     494:	ffffa502 	.word	0xffffa502

00000498 <nvm_get_parameters>:

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     498:	4b13      	ldr	r3, [pc, #76]	; (4e8 <nvm_get_parameters+0x50>)
     49a:	2220      	movs	r2, #32
     49c:	32ff      	adds	r2, #255	; 0xff
     49e:	831a      	strh	r2, [r3, #24]

	/* Read out from the PARAM register */
	uint32_t param_reg = nvm_module->PARAM.reg;
     4a0:	6899      	ldr	r1, [r3, #8]

	/* Mask out page size exponent and convert to a number of bytes */
	parameters->page_size =
			8 << ((param_reg & NVMCTRL_PARAM_PSZ_Msk) >> NVMCTRL_PARAM_PSZ_Pos);
     4a2:	034a      	lsls	r2, r1, #13
     4a4:	0f52      	lsrs	r2, r2, #29
     4a6:	2308      	movs	r3, #8
     4a8:	4093      	lsls	r3, r2
	parameters->page_size =
     4aa:	7003      	strb	r3, [r0, #0]

	/* Mask out number of pages count */
	parameters->nvm_number_of_pages =
     4ac:	8041      	strh	r1, [r0, #2]
			(param_reg & NVMCTRL_PARAM_RWWEEP_Msk) >> NVMCTRL_PARAM_RWWEEP_Pos;
#endif

	/* Read the current EEPROM fuse value from the USER row */
	uint16_t eeprom_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_EEPROM_SIZE_Pos / 16] &
     4ae:	4b0f      	ldr	r3, [pc, #60]	; (4ec <nvm_get_parameters+0x54>)
     4b0:	881b      	ldrh	r3, [r3, #0]
	uint16_t eeprom_fuse_value =
     4b2:	065b      	lsls	r3, r3, #25
     4b4:	0f5b      	lsrs	r3, r3, #29
			NVMCTRL_FUSES_EEPROM_SIZE_Msk) >> NVMCTRL_FUSES_EEPROM_SIZE_Pos;

	/* Translate the EEPROM fuse byte value to a number of NVM pages */
	if (eeprom_fuse_value == 7) {
     4b6:	2b07      	cmp	r3, #7
     4b8:	d010      	beq.n	4dc <nvm_get_parameters+0x44>
		parameters->eeprom_number_of_pages = 0;
	}
	else {
		parameters->eeprom_number_of_pages =
				NVMCTRL_ROW_PAGES << (6 - eeprom_fuse_value);
     4ba:	2206      	movs	r2, #6
     4bc:	1ad2      	subs	r2, r2, r3
     4be:	2304      	movs	r3, #4
     4c0:	4093      	lsls	r3, r2
		parameters->eeprom_number_of_pages =
     4c2:	6043      	str	r3, [r0, #4]
	}

	/* Read the current BOOTSZ fuse value from the USER row */
	uint16_t boot_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_BOOTPROT_Pos / 16] &
     4c4:	4b09      	ldr	r3, [pc, #36]	; (4ec <nvm_get_parameters+0x54>)
     4c6:	881b      	ldrh	r3, [r3, #0]
	uint16_t boot_fuse_value =
     4c8:	2207      	movs	r2, #7
     4ca:	4013      	ands	r3, r2
			NVMCTRL_FUSES_BOOTPROT_Msk) >> NVMCTRL_FUSES_BOOTPROT_Pos;

	/* Translate the BOOTSZ fuse byte value to a number of NVM pages */
	if (boot_fuse_value == 7) {
     4cc:	2b07      	cmp	r3, #7
     4ce:	d008      	beq.n	4e2 <nvm_get_parameters+0x4a>
		parameters->bootloader_number_of_pages = 0;
	}
	else {
		parameters->bootloader_number_of_pages =
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
     4d0:	2207      	movs	r2, #7
     4d2:	1ad2      	subs	r2, r2, r3
     4d4:	2304      	movs	r3, #4
     4d6:	4093      	lsls	r3, r2
		parameters->bootloader_number_of_pages =
     4d8:	6083      	str	r3, [r0, #8]
	}
}
     4da:	4770      	bx	lr
		parameters->eeprom_number_of_pages = 0;
     4dc:	2300      	movs	r3, #0
     4de:	6043      	str	r3, [r0, #4]
     4e0:	e7f0      	b.n	4c4 <nvm_get_parameters+0x2c>
		parameters->bootloader_number_of_pages = 0;
     4e2:	2300      	movs	r3, #0
     4e4:	6083      	str	r3, [r0, #8]
     4e6:	e7f8      	b.n	4da <nvm_get_parameters+0x42>
     4e8:	41004000 	.word	0x41004000
     4ec:	00804000 	.word	0x00804000

000004f0 <system_peripheral_lock>:

	/* Value of which PAC register to use is given by bit 31:6 */
	uint8_t register_pos = peripheral_id / 32;

	/* Check if key is correct. */
	if (~peripheral_id != key) {
     4f0:	43c2      	mvns	r2, r0
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     4f2:	2317      	movs	r3, #23
	if (~peripheral_id != key) {
     4f4:	428a      	cmp	r2, r1
     4f6:	d001      	beq.n	4fc <system_peripheral_lock+0xc>
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
     4f8:	0018      	movs	r0, r3
     4fa:	4770      	bx	lr
	uint8_t register_bit_pos = peripheral_id % 32;
     4fc:	3308      	adds	r3, #8
     4fe:	4003      	ands	r3, r0
	switch (register_pos) {
     500:	04c0      	lsls	r0, r0, #19
     502:	0e00      	lsrs	r0, r0, #24
     504:	2801      	cmp	r0, #1
     506:	d00d      	beq.n	524 <system_peripheral_lock+0x34>
     508:	2800      	cmp	r0, #0
     50a:	d003      	beq.n	514 <system_peripheral_lock+0x24>
     50c:	2802      	cmp	r0, #2
     50e:	d011      	beq.n	534 <system_peripheral_lock+0x44>
			return STATUS_ERR_INVALID_ARG;
     510:	2317      	movs	r3, #23
     512:	e7f1      	b.n	4f8 <system_peripheral_lock+0x8>
			PAC0->WPSET.reg = (1 << register_bit_pos);
     514:	2201      	movs	r2, #1
     516:	409a      	lsls	r2, r3
     518:	0013      	movs	r3, r2
     51a:	2280      	movs	r2, #128	; 0x80
     51c:	05d2      	lsls	r2, r2, #23
     51e:	6053      	str	r3, [r2, #4]
	return STATUS_OK;
     520:	2300      	movs	r3, #0
			break;
     522:	e7e9      	b.n	4f8 <system_peripheral_lock+0x8>
			PAC1->WPSET.reg = (1 << register_bit_pos);
     524:	2201      	movs	r2, #1
     526:	409a      	lsls	r2, r3
     528:	0013      	movs	r3, r2
     52a:	2282      	movs	r2, #130	; 0x82
     52c:	05d2      	lsls	r2, r2, #23
     52e:	6053      	str	r3, [r2, #4]
	return STATUS_OK;
     530:	2300      	movs	r3, #0
			break;
     532:	e7e1      	b.n	4f8 <system_peripheral_lock+0x8>
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     534:	4805      	ldr	r0, [pc, #20]	; (54c <system_peripheral_lock+0x5c>)
     536:	6a01      	ldr	r1, [r0, #32]
     538:	2201      	movs	r2, #1
     53a:	4311      	orrs	r1, r2
     53c:	6201      	str	r1, [r0, #32]
			PAC2->WPSET.reg = (1 << register_bit_pos);
     53e:	409a      	lsls	r2, r3
     540:	2384      	movs	r3, #132	; 0x84
     542:	05db      	lsls	r3, r3, #23
     544:	605a      	str	r2, [r3, #4]
	return STATUS_OK;
     546:	2300      	movs	r3, #0
			break;
     548:	e7d6      	b.n	4f8 <system_peripheral_lock+0x8>
     54a:	46c0      	nop			; (mov r8, r8)
     54c:	40000400 	.word	0x40000400

00000550 <system_peripheral_unlock>:

	/* Value of which PAC register to use is given by bit 31:6 */
	uint8_t register_pos = peripheral_id / 32;

	/* Check if key is correct. */
	if (~peripheral_id != key) {
     550:	43c2      	mvns	r2, r0
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     552:	2317      	movs	r3, #23
	if (~peripheral_id != key) {
     554:	428a      	cmp	r2, r1
     556:	d001      	beq.n	55c <system_peripheral_unlock+0xc>
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
     558:	0018      	movs	r0, r3
     55a:	4770      	bx	lr
	uint8_t register_bit_pos = peripheral_id % 32;
     55c:	3308      	adds	r3, #8
     55e:	4003      	ands	r3, r0
	switch (register_pos) {
     560:	04c0      	lsls	r0, r0, #19
     562:	0e00      	lsrs	r0, r0, #24
     564:	2801      	cmp	r0, #1
     566:	d00d      	beq.n	584 <system_peripheral_unlock+0x34>
     568:	2800      	cmp	r0, #0
     56a:	d003      	beq.n	574 <system_peripheral_unlock+0x24>
     56c:	2802      	cmp	r0, #2
     56e:	d011      	beq.n	594 <system_peripheral_unlock+0x44>
			return STATUS_ERR_INVALID_ARG;
     570:	2317      	movs	r3, #23
     572:	e7f1      	b.n	558 <system_peripheral_unlock+0x8>
			PAC0->WPCLR.reg = (1 << register_bit_pos);
     574:	2201      	movs	r2, #1
     576:	409a      	lsls	r2, r3
     578:	0013      	movs	r3, r2
     57a:	2280      	movs	r2, #128	; 0x80
     57c:	05d2      	lsls	r2, r2, #23
     57e:	6013      	str	r3, [r2, #0]
	return STATUS_OK;
     580:	2300      	movs	r3, #0
			break;
     582:	e7e9      	b.n	558 <system_peripheral_unlock+0x8>
			PAC1->WPCLR.reg = (1 << register_bit_pos);
     584:	2201      	movs	r2, #1
     586:	409a      	lsls	r2, r3
     588:	0013      	movs	r3, r2
     58a:	2282      	movs	r2, #130	; 0x82
     58c:	05d2      	lsls	r2, r2, #23
     58e:	6013      	str	r3, [r2, #0]
	return STATUS_OK;
     590:	2300      	movs	r3, #0
			break;
     592:	e7e1      	b.n	558 <system_peripheral_unlock+0x8>
     594:	4805      	ldr	r0, [pc, #20]	; (5ac <system_peripheral_unlock+0x5c>)
     596:	6a01      	ldr	r1, [r0, #32]
     598:	2201      	movs	r2, #1
     59a:	4311      	orrs	r1, r2
     59c:	6201      	str	r1, [r0, #32]
			PAC2->WPCLR.reg = (1 << register_bit_pos);
     59e:	409a      	lsls	r2, r3
     5a0:	2384      	movs	r3, #132	; 0x84
     5a2:	05db      	lsls	r3, r3, #23
     5a4:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
     5a6:	2300      	movs	r3, #0
			break;
     5a8:	e7d6      	b.n	558 <system_peripheral_unlock+0x8>
     5aa:	46c0      	nop			; (mov r8, r8)
     5ac:	40000400 	.word	0x40000400

000005b0 <SdCard_Initiate>:
* @return		Returns CTRL_GOOD if the SDS card was mounted incorrectly - other status otherwise
* @note         
*****************************************************************************/

Ctrl_status SdCard_Initiate(void)
{
     5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	Ctrl_status status;
	uint32_t timeStart = GetSystick();
     5b2:	4b11      	ldr	r3, [pc, #68]	; (5f8 <SdCard_Initiate+0x48>)
     5b4:	4798      	blx	r3
     5b6:	0006      	movs	r6, r0

/* Wait card present and ready */
do {
	status = sd_mmc_test_unit_ready(0);
     5b8:	4f10      	ldr	r7, [pc, #64]	; (5fc <SdCard_Initiate+0x4c>)
	if (CTRL_FAIL == status) {
		while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
     5ba:	4d11      	ldr	r5, [pc, #68]	; (600 <SdCard_Initiate+0x50>)
     5bc:	e00a      	b.n	5d4 <SdCard_Initiate+0x24>
     5be:	2000      	movs	r0, #0
     5c0:	47a8      	blx	r5
     5c2:	2802      	cmp	r0, #2
     5c4:	d1fb      	bne.n	5be <SdCard_Initiate+0xe>
		}
	}

	if (GetSystick() - timeStart > SD_CARD_TIMEOUT)
     5c6:	4b0c      	ldr	r3, [pc, #48]	; (5f8 <SdCard_Initiate+0x48>)
     5c8:	4798      	blx	r3
     5ca:	1b80      	subs	r0, r0, r6
     5cc:	23fa      	movs	r3, #250	; 0xfa
     5ce:	005b      	lsls	r3, r3, #1
     5d0:	4298      	cmp	r0, r3
     5d2:	d80d      	bhi.n	5f0 <SdCard_Initiate+0x40>
	status = sd_mmc_test_unit_ready(0);
     5d4:	2000      	movs	r0, #0
     5d6:	47b8      	blx	r7
     5d8:	0004      	movs	r4, r0
	if (CTRL_FAIL == status) {
     5da:	2801      	cmp	r0, #1
     5dc:	d0ef      	beq.n	5be <SdCard_Initiate+0xe>
	if (GetSystick() - timeStart > SD_CARD_TIMEOUT)
     5de:	4b06      	ldr	r3, [pc, #24]	; (5f8 <SdCard_Initiate+0x48>)
     5e0:	4798      	blx	r3
     5e2:	1b80      	subs	r0, r0, r6
     5e4:	23fa      	movs	r3, #250	; 0xfa
     5e6:	005b      	lsls	r3, r3, #1
     5e8:	4298      	cmp	r0, r3
     5ea:	d803      	bhi.n	5f4 <SdCard_Initiate+0x44>
	{
		status = CTRL_FAIL;
		break;
	}
} while (CTRL_GOOD != status );
     5ec:	2c00      	cmp	r4, #0
     5ee:	d1f1      	bne.n	5d4 <SdCard_Initiate+0x24>

return status;
}
     5f0:	0020      	movs	r0, r4
     5f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		status = CTRL_FAIL;
     5f4:	2401      	movs	r4, #1
     5f6:	e7fb      	b.n	5f0 <SdCard_Initiate+0x40>
     5f8:	00000181 	.word	0x00000181
     5fc:	000011f9 	.word	0x000011f9
     600:	00000ae5 	.word	0x00000ae5

00000604 <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
     604:	b510      	push	{r4, lr}
     606:	0004      	movs	r4, r0
	 //assert(cbuf);

	 if(cbuf->full)
     608:	7c03      	ldrb	r3, [r0, #16]
     60a:	2b00      	cmp	r3, #0
     60c:	d005      	beq.n	61a <advance_pointer+0x16>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     60e:	6883      	ldr	r3, [r0, #8]
     610:	1c58      	adds	r0, r3, #1
     612:	68e1      	ldr	r1, [r4, #12]
     614:	4b07      	ldr	r3, [pc, #28]	; (634 <advance_pointer+0x30>)
     616:	4798      	blx	r3
     618:	60a1      	str	r1, [r4, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
     61a:	6863      	ldr	r3, [r4, #4]
     61c:	1c58      	adds	r0, r3, #1
     61e:	68e1      	ldr	r1, [r4, #12]
     620:	4b04      	ldr	r3, [pc, #16]	; (634 <advance_pointer+0x30>)
     622:	4798      	blx	r3
     624:	6061      	str	r1, [r4, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
     626:	68a3      	ldr	r3, [r4, #8]
     628:	1a59      	subs	r1, r3, r1
     62a:	424a      	negs	r2, r1
     62c:	414a      	adcs	r2, r1
     62e:	7422      	strb	r2, [r4, #16]
 }
     630:	bd10      	pop	{r4, pc}
     632:	46c0      	nop			; (mov r8, r8)
     634:	0000603d 	.word	0x0000603d

00000638 <circular_buf_init>:
 }

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
     638:	b570      	push	{r4, r5, r6, lr}
     63a:	0005      	movs	r5, r0
     63c:	000c      	movs	r4, r1
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
     63e:	2014      	movs	r0, #20
     640:	4b04      	ldr	r3, [pc, #16]	; (654 <circular_buf_init+0x1c>)
     642:	4798      	blx	r3
	 //assert(cbuf);

	 cbuf->buffer = buffer;
     644:	6005      	str	r5, [r0, #0]
	 cbuf->max = size;
     646:	60c4      	str	r4, [r0, #12]

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
	// assert(cbuf);

	 cbuf->head = 0;
     648:	2300      	movs	r3, #0
     64a:	6043      	str	r3, [r0, #4]
	 cbuf->tail = 0;
     64c:	6083      	str	r3, [r0, #8]
	 cbuf->full = false;
     64e:	7403      	strb	r3, [r0, #16]
 }
     650:	bd70      	pop	{r4, r5, r6, pc}
     652:	46c0      	nop			; (mov r8, r8)
     654:	000062b9 	.word	0x000062b9

00000658 <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
     658:	b510      	push	{r4, lr}
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
     65a:	6803      	ldr	r3, [r0, #0]
     65c:	6842      	ldr	r2, [r0, #4]
     65e:	5499      	strb	r1, [r3, r2]

	 advance_pointer(cbuf);
     660:	4b01      	ldr	r3, [pc, #4]	; (668 <circular_buf_put+0x10>)
     662:	4798      	blx	r3
 }
     664:	bd10      	pop	{r4, pc}
     666:	46c0      	nop			; (mov r8, r8)
     668:	00000605 	.word	0x00000605

0000066c <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
     66c:	7c02      	ldrb	r2, [r0, #16]
     66e:	2300      	movs	r3, #0
     670:	2a00      	cmp	r2, #0
     672:	d105      	bne.n	680 <circular_buf_empty+0x14>
     674:	6843      	ldr	r3, [r0, #4]
     676:	6880      	ldr	r0, [r0, #8]
     678:	1a1b      	subs	r3, r3, r0
     67a:	4258      	negs	r0, r3
     67c:	4143      	adcs	r3, r0
     67e:	b2db      	uxtb	r3, r3
     680:	0018      	movs	r0, r3
 }
     682:	4770      	bx	lr

00000684 <circular_buf_get>:
 {
     684:	b570      	push	{r4, r5, r6, lr}
     686:	0004      	movs	r4, r0
     688:	000d      	movs	r5, r1
	 if(!circular_buf_empty(cbuf))
     68a:	4b0a      	ldr	r3, [pc, #40]	; (6b4 <circular_buf_get+0x30>)
     68c:	4798      	blx	r3
     68e:	2800      	cmp	r0, #0
     690:	d10d      	bne.n	6ae <circular_buf_get+0x2a>
		 *data = cbuf->buffer[cbuf->tail];
     692:	6823      	ldr	r3, [r4, #0]
     694:	68a2      	ldr	r2, [r4, #8]
     696:	5c9b      	ldrb	r3, [r3, r2]
     698:	702b      	strb	r3, [r5, #0]
	 cbuf->full = false;
     69a:	2300      	movs	r3, #0
     69c:	7423      	strb	r3, [r4, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     69e:	68a3      	ldr	r3, [r4, #8]
     6a0:	1c58      	adds	r0, r3, #1
     6a2:	68e1      	ldr	r1, [r4, #12]
     6a4:	4b04      	ldr	r3, [pc, #16]	; (6b8 <circular_buf_get+0x34>)
     6a6:	4798      	blx	r3
     6a8:	60a1      	str	r1, [r4, #8]
		 r = 0;
     6aa:	2000      	movs	r0, #0
 }
     6ac:	bd70      	pop	{r4, r5, r6, pc}
	 int r = -1;
     6ae:	2001      	movs	r0, #1
     6b0:	4240      	negs	r0, r0
	 return r;
     6b2:	e7fb      	b.n	6ac <circular_buf_get+0x28>
     6b4:	0000066d 	.word	0x0000066d
     6b8:	0000603d 	.word	0x0000603d

000006bc <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
     6bc:	b570      	push	{r4, r5, r6, lr}
     6be:	b082      	sub	sp, #8
     6c0:	0005      	movs	r5, r0
     6c2:	000e      	movs	r6, r1
	uint16_t temp = 0;
     6c4:	2200      	movs	r2, #0
     6c6:	466b      	mov	r3, sp
     6c8:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
     6ca:	4c06      	ldr	r4, [pc, #24]	; (6e4 <usart_serial_getchar+0x28>)
     6cc:	466b      	mov	r3, sp
     6ce:	1d99      	adds	r1, r3, #6
     6d0:	0028      	movs	r0, r5
     6d2:	47a0      	blx	r4
     6d4:	2800      	cmp	r0, #0
     6d6:	d1f9      	bne.n	6cc <usart_serial_getchar+0x10>

	*c = temp;
     6d8:	466b      	mov	r3, sp
     6da:	3306      	adds	r3, #6
     6dc:	881b      	ldrh	r3, [r3, #0]
     6de:	7033      	strb	r3, [r6, #0]
}
     6e0:	b002      	add	sp, #8
     6e2:	bd70      	pop	{r4, r5, r6, pc}
     6e4:	00002c65 	.word	0x00002c65

000006e8 <usart_serial_putchar>:
{
     6e8:	b570      	push	{r4, r5, r6, lr}
     6ea:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
     6ec:	b28c      	uxth	r4, r1
     6ee:	4e03      	ldr	r6, [pc, #12]	; (6fc <usart_serial_putchar+0x14>)
     6f0:	0021      	movs	r1, r4
     6f2:	0028      	movs	r0, r5
     6f4:	47b0      	blx	r6
     6f6:	2800      	cmp	r0, #0
     6f8:	d1fa      	bne.n	6f0 <usart_serial_putchar+0x8>
}
     6fa:	bd70      	pop	{r4, r5, r6, pc}
     6fc:	00002c39 	.word	0x00002c39

00000700 <usart_write_callback>:
* @fn			void usart_write_callback(struct usart_module *const usart_module)
* @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
* @note
*****************************************************************************/
void usart_write_callback(struct usart_module *const usart_module)
{
     700:	b510      	push	{r4, lr}
	if(circular_buf_get(cbufTx, (uint8_t*) &latestTx) != -1) //Only continue if there are more characters to send
     702:	4b06      	ldr	r3, [pc, #24]	; (71c <usart_write_callback+0x1c>)
     704:	6818      	ldr	r0, [r3, #0]
     706:	4906      	ldr	r1, [pc, #24]	; (720 <usart_write_callback+0x20>)
     708:	4b06      	ldr	r3, [pc, #24]	; (724 <usart_write_callback+0x24>)
     70a:	4798      	blx	r3
     70c:	1c43      	adds	r3, r0, #1
     70e:	d004      	beq.n	71a <usart_write_callback+0x1a>
	{
		usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
     710:	2201      	movs	r2, #1
     712:	4903      	ldr	r1, [pc, #12]	; (720 <usart_write_callback+0x20>)
     714:	4804      	ldr	r0, [pc, #16]	; (728 <usart_write_callback+0x28>)
     716:	4b05      	ldr	r3, [pc, #20]	; (72c <usart_write_callback+0x2c>)
     718:	4798      	blx	r3
	}
	
}
     71a:	bd10      	pop	{r4, pc}
     71c:	20000a08 	.word	0x20000a08
     720:	20000a04 	.word	0x20000a04
     724:	00000685 	.word	0x00000685
     728:	200001c8 	.word	0x200001c8
     72c:	00002d79 	.word	0x00002d79

00000730 <InitializeSerialConsole>:
{
     730:	b570      	push	{r4, r5, r6, lr}
     732:	b090      	sub	sp, #64	; 0x40
	cbufRx = circular_buf_init((uint8_t*)rxCharacterBuffer, RX_BUFFER_SIZE);
     734:	2580      	movs	r5, #128	; 0x80
     736:	00ed      	lsls	r5, r5, #3
     738:	0029      	movs	r1, r5
     73a:	483f      	ldr	r0, [pc, #252]	; (838 <InitializeSerialConsole+0x108>)
     73c:	4c3f      	ldr	r4, [pc, #252]	; (83c <InitializeSerialConsole+0x10c>)
     73e:	47a0      	blx	r4
     740:	4b3f      	ldr	r3, [pc, #252]	; (840 <InitializeSerialConsole+0x110>)
     742:	6018      	str	r0, [r3, #0]
	cbufTx = circular_buf_init((uint8_t*)txCharacterBuffer, RX_BUFFER_SIZE);
     744:	0029      	movs	r1, r5
     746:	483f      	ldr	r0, [pc, #252]	; (844 <InitializeSerialConsole+0x114>)
     748:	47a0      	blx	r4
     74a:	4b3f      	ldr	r3, [pc, #252]	; (848 <InitializeSerialConsole+0x118>)
     74c:	6018      	str	r0, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     74e:	2380      	movs	r3, #128	; 0x80
     750:	05db      	lsls	r3, r3, #23
     752:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     754:	2300      	movs	r3, #0
     756:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
     758:	22ff      	movs	r2, #255	; 0xff
     75a:	4669      	mov	r1, sp
     75c:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
     75e:	2200      	movs	r2, #0
     760:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     762:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
     764:	2101      	movs	r1, #1
     766:	2024      	movs	r0, #36	; 0x24
     768:	466c      	mov	r4, sp
     76a:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
     76c:	3001      	adds	r0, #1
     76e:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
     770:	3125      	adds	r1, #37	; 0x25
     772:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
     774:	3101      	adds	r1, #1
     776:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
     778:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     77a:	3105      	adds	r1, #5
     77c:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
     77e:	3101      	adds	r1, #1
     780:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     782:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     784:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     786:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     788:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     78a:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     78c:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
     78e:	2313      	movs	r3, #19
     790:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     792:	7762      	strb	r2, [r4, #29]
	config_usart.baudrate    = 115200;
     794:	23e1      	movs	r3, #225	; 0xe1
     796:	025b      	lsls	r3, r3, #9
     798:	9308      	str	r3, [sp, #32]
	config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
     79a:	23c4      	movs	r3, #196	; 0xc4
     79c:	039b      	lsls	r3, r3, #14
     79e:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
     7a0:	2301      	movs	r3, #1
     7a2:	425b      	negs	r3, r3
     7a4:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
     7a6:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
     7a8:	4b28      	ldr	r3, [pc, #160]	; (84c <InitializeSerialConsole+0x11c>)
     7aa:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
     7ac:	4b28      	ldr	r3, [pc, #160]	; (850 <InitializeSerialConsole+0x120>)
     7ae:	930f      	str	r3, [sp, #60]	; 0x3c
	while (usart_init(&usart_instance,
     7b0:	4d28      	ldr	r5, [pc, #160]	; (854 <InitializeSerialConsole+0x124>)
     7b2:	4c29      	ldr	r4, [pc, #164]	; (858 <InitializeSerialConsole+0x128>)
     7b4:	466a      	mov	r2, sp
     7b6:	4929      	ldr	r1, [pc, #164]	; (85c <InitializeSerialConsole+0x12c>)
     7b8:	0028      	movs	r0, r5
     7ba:	47a0      	blx	r4
     7bc:	2800      	cmp	r0, #0
     7be:	d1f9      	bne.n	7b4 <InitializeSerialConsole+0x84>
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
     7c0:	4d24      	ldr	r5, [pc, #144]	; (854 <InitializeSerialConsole+0x124>)
     7c2:	4b27      	ldr	r3, [pc, #156]	; (860 <InitializeSerialConsole+0x130>)
     7c4:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     7c6:	4a27      	ldr	r2, [pc, #156]	; (864 <InitializeSerialConsole+0x134>)
     7c8:	4b27      	ldr	r3, [pc, #156]	; (868 <InitializeSerialConsole+0x138>)
     7ca:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     7cc:	4a27      	ldr	r2, [pc, #156]	; (86c <InitializeSerialConsole+0x13c>)
     7ce:	4b28      	ldr	r3, [pc, #160]	; (870 <InitializeSerialConsole+0x140>)
     7d0:	601a      	str	r2, [r3, #0]

	//usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
     7d2:	4e28      	ldr	r6, [pc, #160]	; (874 <InitializeSerialConsole+0x144>)
     7d4:	6833      	ldr	r3, [r6, #0]
     7d6:	6898      	ldr	r0, [r3, #8]
     7d8:	2100      	movs	r1, #0
     7da:	4c27      	ldr	r4, [pc, #156]	; (878 <InitializeSerialConsole+0x148>)
     7dc:	47a0      	blx	r4
	setbuf(stdin, NULL);
     7de:	6833      	ldr	r3, [r6, #0]
     7e0:	6858      	ldr	r0, [r3, #4]
     7e2:	2100      	movs	r1, #0
     7e4:	47a0      	blx	r4
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     7e6:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     7e8:	0020      	movs	r0, r4
     7ea:	4b24      	ldr	r3, [pc, #144]	; (87c <InitializeSerialConsole+0x14c>)
     7ec:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     7ee:	231f      	movs	r3, #31
     7f0:	4018      	ands	r0, r3
     7f2:	3b1e      	subs	r3, #30
     7f4:	4083      	lsls	r3, r0
     7f6:	4a22      	ldr	r2, [pc, #136]	; (880 <InitializeSerialConsole+0x150>)
     7f8:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
     7fa:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     7fc:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     7fe:	2b00      	cmp	r3, #0
     800:	d1fc      	bne.n	7fc <InitializeSerialConsole+0xcc>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     802:	6823      	ldr	r3, [r4, #0]
     804:	2202      	movs	r2, #2
     806:	4313      	orrs	r3, r2
     808:	6023      	str	r3, [r4, #0]
	usart_register_callback(&usart_instance,
     80a:	4c12      	ldr	r4, [pc, #72]	; (854 <InitializeSerialConsole+0x124>)
     80c:	2200      	movs	r2, #0
     80e:	491d      	ldr	r1, [pc, #116]	; (884 <InitializeSerialConsole+0x154>)
     810:	0020      	movs	r0, r4
     812:	4d1d      	ldr	r5, [pc, #116]	; (888 <InitializeSerialConsole+0x158>)
     814:	47a8      	blx	r5
	usart_register_callback(&usart_instance,
     816:	2201      	movs	r2, #1
     818:	491c      	ldr	r1, [pc, #112]	; (88c <InitializeSerialConsole+0x15c>)
     81a:	0020      	movs	r0, r4
     81c:	47a8      	blx	r5
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
     81e:	2231      	movs	r2, #49	; 0x31
     820:	5ca3      	ldrb	r3, [r4, r2]
     822:	2103      	movs	r1, #3
     824:	430b      	orrs	r3, r1
     826:	54a3      	strb	r3, [r4, r2]
	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Kicks off constant reading of characters
     828:	3a30      	subs	r2, #48	; 0x30
     82a:	4919      	ldr	r1, [pc, #100]	; (890 <InitializeSerialConsole+0x160>)
     82c:	0020      	movs	r0, r4
     82e:	4b19      	ldr	r3, [pc, #100]	; (894 <InitializeSerialConsole+0x164>)
     830:	4798      	blx	r3
}
     832:	b010      	add	sp, #64	; 0x40
     834:	bd70      	pop	{r4, r5, r6, pc}
     836:	46c0      	nop			; (mov r8, r8)
     838:	20000604 	.word	0x20000604
     83c:	00000639 	.word	0x00000639
     840:	200001fc 	.word	0x200001fc
     844:	20000204 	.word	0x20000204
     848:	20000a08 	.word	0x20000a08
     84c:	002a0003 	.word	0x002a0003
     850:	002b0003 	.word	0x002b0003
     854:	200001c8 	.word	0x200001c8
     858:	000028f5 	.word	0x000028f5
     85c:	42001800 	.word	0x42001800
     860:	20000a34 	.word	0x20000a34
     864:	000006e9 	.word	0x000006e9
     868:	20000a30 	.word	0x20000a30
     86c:	000006bd 	.word	0x000006bd
     870:	20000a2c 	.word	0x20000a2c
     874:	20000048 	.word	0x20000048
     878:	00006451 	.word	0x00006451
     87c:	00002125 	.word	0x00002125
     880:	e000e100 	.word	0xe000e100
     884:	00000701 	.word	0x00000701
     888:	00002d61 	.word	0x00002d61
     88c:	00000945 	.word	0x00000945
     890:	20000200 	.word	0x20000200
     894:	00002d99 	.word	0x00002d99

00000898 <DeinitializeSerialConsole>:
{
     898:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     89a:	4d0a      	ldr	r5, [pc, #40]	; (8c4 <DeinitializeSerialConsole+0x2c>)
     89c:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Disable Global interrupt for module */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
     89e:	0020      	movs	r0, r4
     8a0:	4b09      	ldr	r3, [pc, #36]	; (8c8 <DeinitializeSerialConsole+0x30>)
     8a2:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     8a4:	231f      	movs	r3, #31
     8a6:	4018      	ands	r0, r3
     8a8:	3b1e      	subs	r3, #30
     8aa:	4083      	lsls	r3, r0
     8ac:	2280      	movs	r2, #128	; 0x80
     8ae:	4907      	ldr	r1, [pc, #28]	; (8cc <DeinitializeSerialConsole+0x34>)
     8b0:	508b      	str	r3, [r1, r2]
	SercomUsart *const usart_hw = &(module->hw->USART);
     8b2:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     8b4:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     8b6:	2b00      	cmp	r3, #0
     8b8:	d1fc      	bne.n	8b4 <DeinitializeSerialConsole+0x1c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
     8ba:	6823      	ldr	r3, [r4, #0]
     8bc:	2202      	movs	r2, #2
     8be:	4393      	bics	r3, r2
     8c0:	6023      	str	r3, [r4, #0]
}
     8c2:	bd70      	pop	{r4, r5, r6, pc}
     8c4:	200001c8 	.word	0x200001c8
     8c8:	00002125 	.word	0x00002125
     8cc:	e000e100 	.word	0xe000e100

000008d0 <SerialConsoleWriteString>:
{
     8d0:	b5f0      	push	{r4, r5, r6, r7, lr}
     8d2:	46c6      	mov	lr, r8
     8d4:	b500      	push	{lr}
     8d6:	0005      	movs	r5, r0
     8d8:	2400      	movs	r4, #0
	if(string != NULL)
     8da:	2800      	cmp	r0, #0
     8dc:	d012      	beq.n	904 <SerialConsoleWriteString+0x34>
		for (size_t iter = 0; iter < strlen(string); iter++)
     8de:	4e11      	ldr	r6, [pc, #68]	; (924 <SerialConsoleWriteString+0x54>)
			circular_buf_put(cbufTx, string[iter]);
     8e0:	4f11      	ldr	r7, [pc, #68]	; (928 <SerialConsoleWriteString+0x58>)
     8e2:	4b12      	ldr	r3, [pc, #72]	; (92c <SerialConsoleWriteString+0x5c>)
     8e4:	4698      	mov	r8, r3
     8e6:	e003      	b.n	8f0 <SerialConsoleWriteString+0x20>
     8e8:	5d29      	ldrb	r1, [r5, r4]
     8ea:	6838      	ldr	r0, [r7, #0]
     8ec:	47c0      	blx	r8
		for (size_t iter = 0; iter < strlen(string); iter++)
     8ee:	3401      	adds	r4, #1
     8f0:	0028      	movs	r0, r5
     8f2:	47b0      	blx	r6
     8f4:	4284      	cmp	r4, r0
     8f6:	d3f7      	bcc.n	8e8 <SerialConsoleWriteString+0x18>
		if(usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK)
     8f8:	2101      	movs	r1, #1
     8fa:	480d      	ldr	r0, [pc, #52]	; (930 <SerialConsoleWriteString+0x60>)
     8fc:	4b0d      	ldr	r3, [pc, #52]	; (934 <SerialConsoleWriteString+0x64>)
     8fe:	4798      	blx	r3
     900:	2800      	cmp	r0, #0
     902:	d002      	beq.n	90a <SerialConsoleWriteString+0x3a>
}
     904:	bc04      	pop	{r2}
     906:	4690      	mov	r8, r2
     908:	bdf0      	pop	{r4, r5, r6, r7, pc}
			circular_buf_get(cbufTx, (uint8_t*) &latestTx); //Perform only if the SERCOM TX is free (not busy)
     90a:	4c0b      	ldr	r4, [pc, #44]	; (938 <SerialConsoleWriteString+0x68>)
     90c:	4b06      	ldr	r3, [pc, #24]	; (928 <SerialConsoleWriteString+0x58>)
     90e:	6818      	ldr	r0, [r3, #0]
     910:	0021      	movs	r1, r4
     912:	4b0a      	ldr	r3, [pc, #40]	; (93c <SerialConsoleWriteString+0x6c>)
     914:	4798      	blx	r3
			usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
     916:	2201      	movs	r2, #1
     918:	0021      	movs	r1, r4
     91a:	4805      	ldr	r0, [pc, #20]	; (930 <SerialConsoleWriteString+0x60>)
     91c:	4b08      	ldr	r3, [pc, #32]	; (940 <SerialConsoleWriteString+0x70>)
     91e:	4798      	blx	r3
}
     920:	e7f0      	b.n	904 <SerialConsoleWriteString+0x34>
     922:	46c0      	nop			; (mov r8, r8)
     924:	00006621 	.word	0x00006621
     928:	20000a08 	.word	0x20000a08
     92c:	00000659 	.word	0x00000659
     930:	200001c8 	.word	0x200001c8
     934:	00002db9 	.word	0x00002db9
     938:	20000a04 	.word	0x20000a04
     93c:	00000685 	.word	0x00000685
     940:	00002d79 	.word	0x00002d79

00000944 <usart_read_callback>:
{
     944:	b510      	push	{r4, lr}
     946:	b082      	sub	sp, #8
	SerialConsoleWriteString(&latestRx);
     948:	4c0d      	ldr	r4, [pc, #52]	; (980 <usart_read_callback+0x3c>)
     94a:	0020      	movs	r0, r4
     94c:	4b0d      	ldr	r3, [pc, #52]	; (984 <usart_read_callback+0x40>)
     94e:	4798      	blx	r3
	if(latestRx == 0x08)
     950:	7823      	ldrb	r3, [r4, #0]
     952:	2b08      	cmp	r3, #8
     954:	d00c      	beq.n	970 <usart_read_callback+0x2c>
	circular_buf_put(cbufRx, (uint8_t) latestRx); //Add the latest read character into the RX circular Buffer
     956:	4c0a      	ldr	r4, [pc, #40]	; (980 <usart_read_callback+0x3c>)
     958:	7821      	ldrb	r1, [r4, #0]
     95a:	4b0b      	ldr	r3, [pc, #44]	; (988 <usart_read_callback+0x44>)
     95c:	6818      	ldr	r0, [r3, #0]
     95e:	4b0b      	ldr	r3, [pc, #44]	; (98c <usart_read_callback+0x48>)
     960:	4798      	blx	r3
	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Order the MCU to keep reading
     962:	2201      	movs	r2, #1
     964:	0021      	movs	r1, r4
     966:	480a      	ldr	r0, [pc, #40]	; (990 <usart_read_callback+0x4c>)
     968:	4b0a      	ldr	r3, [pc, #40]	; (994 <usart_read_callback+0x50>)
     96a:	4798      	blx	r3
}
     96c:	b002      	add	sp, #8
     96e:	bd10      	pop	{r4, pc}
	a[0] = 0x20;
     970:	a801      	add	r0, sp, #4
     972:	3318      	adds	r3, #24
     974:	7003      	strb	r3, [r0, #0]
	a[1]= 0x08;
     976:	3b18      	subs	r3, #24
     978:	7043      	strb	r3, [r0, #1]
	SerialConsoleWriteString(&a);
     97a:	4b02      	ldr	r3, [pc, #8]	; (984 <usart_read_callback+0x40>)
     97c:	4798      	blx	r3
     97e:	e7ea      	b.n	956 <usart_read_callback+0x12>
     980:	20000200 	.word	0x20000200
     984:	000008d1 	.word	0x000008d1
     988:	200001fc 	.word	0x200001fc
     98c:	00000659 	.word	0x00000659
     990:	200001c8 	.word	0x200001c8
     994:	00002d99 	.word	0x00002d99

00000998 <LogMessage>:
{
     998:	b40e      	push	{r1, r2, r3}
};
     99a:	b003      	add	sp, #12
     99c:	4770      	bx	lr
	...

000009a0 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
     9a0:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
     9a2:	4b06      	ldr	r3, [pc, #24]	; (9bc <sd_mmc_configure_slot+0x1c>)
     9a4:	6819      	ldr	r1, [r3, #0]
     9a6:	7f8b      	ldrb	r3, [r1, #30]
     9a8:	1e5a      	subs	r2, r3, #1
     9aa:	4193      	sbcs	r3, r2
     9ac:	b2db      	uxtb	r3, r3
     9ae:	7b4a      	ldrb	r2, [r1, #13]
     9b0:	6809      	ldr	r1, [r1, #0]
     9b2:	4803      	ldr	r0, [pc, #12]	; (9c0 <sd_mmc_configure_slot+0x20>)
     9b4:	7800      	ldrb	r0, [r0, #0]
     9b6:	4c03      	ldr	r4, [pc, #12]	; (9c4 <sd_mmc_configure_slot+0x24>)
     9b8:	47a0      	blx	r4
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
}
     9ba:	bd10      	pop	{r4, pc}
     9bc:	200000d4 	.word	0x200000d4
     9c0:	200000fc 	.word	0x200000fc
     9c4:	0000165d 	.word	0x0000165d

000009c8 <sd_mmc_select_slot>:
{
     9c8:	b510      	push	{r4, lr}
		return SD_MMC_ERR_SLOT;
     9ca:	2304      	movs	r3, #4
	if (slot >= SD_MMC_MEM_CNT) {
     9cc:	2800      	cmp	r0, #0
     9ce:	d001      	beq.n	9d4 <sd_mmc_select_slot+0xc>
}
     9d0:	0018      	movs	r0, r3
     9d2:	bd10      	pop	{r4, pc}
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
     9d4:	4b0e      	ldr	r3, [pc, #56]	; (a10 <sd_mmc_select_slot+0x48>)
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
     9d6:	7a9b      	ldrb	r3, [r3, #10]
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
     9d8:	3b03      	subs	r3, #3
     9da:	2b01      	cmp	r3, #1
     9dc:	d90d      	bls.n	9fa <sd_mmc_select_slot+0x32>
	sd_mmc_slot_sel = slot;
     9de:	2200      	movs	r2, #0
     9e0:	4b0c      	ldr	r3, [pc, #48]	; (a14 <sd_mmc_select_slot+0x4c>)
     9e2:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
     9e4:	4c0a      	ldr	r4, [pc, #40]	; (a10 <sd_mmc_select_slot+0x48>)
     9e6:	4b0c      	ldr	r3, [pc, #48]	; (a18 <sd_mmc_select_slot+0x50>)
     9e8:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
     9ea:	4b0c      	ldr	r3, [pc, #48]	; (a1c <sd_mmc_select_slot+0x54>)
     9ec:	4798      	blx	r3
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
     9ee:	7aa3      	ldrb	r3, [r4, #10]
     9f0:	3b02      	subs	r3, #2
     9f2:	4258      	negs	r0, r3
     9f4:	4143      	adcs	r3, r0
     9f6:	b2db      	uxtb	r3, r3
     9f8:	e7ea      	b.n	9d0 <sd_mmc_select_slot+0x8>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
     9fa:	4b05      	ldr	r3, [pc, #20]	; (a10 <sd_mmc_select_slot+0x48>)
     9fc:	2202      	movs	r2, #2
     9fe:	729a      	strb	r2, [r3, #10]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
     a00:	4a07      	ldr	r2, [pc, #28]	; (a20 <sd_mmc_select_slot+0x58>)
     a02:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
     a04:	2201      	movs	r2, #1
     a06:	735a      	strb	r2, [r3, #13]
		sd_mmc_cards[slot].high_speed = 0;
     a08:	2200      	movs	r2, #0
     a0a:	779a      	strb	r2, [r3, #30]
     a0c:	e7e7      	b.n	9de <sd_mmc_select_slot+0x16>
     a0e:	46c0      	nop			; (mov r8, r8)
     a10:	200000d8 	.word	0x200000d8
     a14:	200000fc 	.word	0x200000fc
     a18:	200000d4 	.word	0x200000d4
     a1c:	000009a1 	.word	0x000009a1
     a20:	00061a80 	.word	0x00061a80

00000a24 <sd_mmc_cmd13>:
{
     a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     a26:	4d09      	ldr	r5, [pc, #36]	; (a4c <sd_mmc_cmd13+0x28>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
     a28:	4f09      	ldr	r7, [pc, #36]	; (a50 <sd_mmc_cmd13+0x2c>)
			if (!(driver_get_response() & 0xFF)) {
     a2a:	4e0a      	ldr	r6, [pc, #40]	; (a54 <sd_mmc_cmd13+0x30>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
     a2c:	2100      	movs	r1, #0
     a2e:	480a      	ldr	r0, [pc, #40]	; (a58 <sd_mmc_cmd13+0x34>)
     a30:	47b8      	blx	r7
     a32:	1e04      	subs	r4, r0, #0
     a34:	d007      	beq.n	a46 <sd_mmc_cmd13+0x22>
			if (!(driver_get_response() & 0xFF)) {
     a36:	47b0      	blx	r6
     a38:	23ff      	movs	r3, #255	; 0xff
     a3a:	4203      	tst	r3, r0
     a3c:	d003      	beq.n	a46 <sd_mmc_cmd13+0x22>
     a3e:	3d01      	subs	r5, #1
		if (nec_timeout-- == 0) {
     a40:	2d00      	cmp	r5, #0
     a42:	d1f3      	bne.n	a2c <sd_mmc_cmd13+0x8>
			return false;
     a44:	2400      	movs	r4, #0
}
     a46:	0020      	movs	r0, r4
     a48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     a4a:	46c0      	nop			; (mov r8, r8)
     a4c:	00030d41 	.word	0x00030d41
     a50:	000018a1 	.word	0x000018a1
     a54:	000018b9 	.word	0x000018b9
     a58:	00001b0d 	.word	0x00001b0d

00000a5c <sd_mmc_cmd9_spi>:
{
     a5c:	b510      	push	{r4, lr}
     a5e:	b082      	sub	sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
     a60:	4b0c      	ldr	r3, [pc, #48]	; (a94 <sd_mmc_cmd9_spi+0x38>)
     a62:	681b      	ldr	r3, [r3, #0]
     a64:	8919      	ldrh	r1, [r3, #8]
     a66:	0409      	lsls	r1, r1, #16
     a68:	2301      	movs	r3, #1
     a6a:	9300      	str	r3, [sp, #0]
     a6c:	2210      	movs	r2, #16
     a6e:	480a      	ldr	r0, [pc, #40]	; (a98 <sd_mmc_cmd9_spi+0x3c>)
     a70:	4c0a      	ldr	r4, [pc, #40]	; (a9c <sd_mmc_cmd9_spi+0x40>)
     a72:	47a0      	blx	r4
     a74:	2800      	cmp	r0, #0
     a76:	d101      	bne.n	a7c <sd_mmc_cmd9_spi+0x20>
}
     a78:	b002      	add	sp, #8
     a7a:	bd10      	pop	{r4, pc}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
     a7c:	4b05      	ldr	r3, [pc, #20]	; (a94 <sd_mmc_cmd9_spi+0x38>)
     a7e:	6818      	ldr	r0, [r3, #0]
     a80:	300e      	adds	r0, #14
     a82:	2101      	movs	r1, #1
     a84:	4b06      	ldr	r3, [pc, #24]	; (aa0 <sd_mmc_cmd9_spi+0x44>)
     a86:	4798      	blx	r3
     a88:	2800      	cmp	r0, #0
     a8a:	d0f5      	beq.n	a78 <sd_mmc_cmd9_spi+0x1c>
	return driver_wait_end_of_read_blocks();
     a8c:	4b05      	ldr	r3, [pc, #20]	; (aa4 <sd_mmc_cmd9_spi+0x48>)
     a8e:	4798      	blx	r3
     a90:	e7f2      	b.n	a78 <sd_mmc_cmd9_spi+0x1c>
     a92:	46c0      	nop			; (mov r8, r8)
     a94:	200000d4 	.word	0x200000d4
     a98:	00081109 	.word	0x00081109
     a9c:	00001711 	.word	0x00001711
     aa0:	0000193d 	.word	0x0000193d
     aa4:	000019c9 	.word	0x000019c9

00000aa8 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
     aa8:	b510      	push	{r4, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
     aaa:	4b04      	ldr	r3, [pc, #16]	; (abc <sd_mmc_deselect_slot+0x14>)
     aac:	781b      	ldrb	r3, [r3, #0]
     aae:	2b00      	cmp	r3, #0
     ab0:	d000      	beq.n	ab4 <sd_mmc_deselect_slot+0xc>
		driver_deselect_device(sd_mmc_slot_sel);
	}
}
     ab2:	bd10      	pop	{r4, pc}
		driver_deselect_device(sd_mmc_slot_sel);
     ab4:	2000      	movs	r0, #0
     ab6:	4b02      	ldr	r3, [pc, #8]	; (ac0 <sd_mmc_deselect_slot+0x18>)
     ab8:	4798      	blx	r3
}
     aba:	e7fa      	b.n	ab2 <sd_mmc_deselect_slot+0xa>
     abc:	200000fc 	.word	0x200000fc
     ac0:	000016b1 	.word	0x000016b1

00000ac4 <sd_mmc_init>:
//--------------------- PUBLIC FUNCTIONS ----------------------------



void sd_mmc_init(void)
{
     ac4:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
     ac6:	2204      	movs	r2, #4
     ac8:	4b03      	ldr	r3, [pc, #12]	; (ad8 <sd_mmc_init+0x14>)
     aca:	729a      	strb	r2, [r3, #10]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
     acc:	32fb      	adds	r2, #251	; 0xfb
     ace:	4b03      	ldr	r3, [pc, #12]	; (adc <sd_mmc_init+0x18>)
     ad0:	701a      	strb	r2, [r3, #0]
	driver_init();
     ad2:	4b03      	ldr	r3, [pc, #12]	; (ae0 <sd_mmc_init+0x1c>)
     ad4:	4798      	blx	r3
}
     ad6:	bd10      	pop	{r4, pc}
     ad8:	200000d8 	.word	0x200000d8
     adc:	200000fc 	.word	0x200000fc
     ae0:	0000155d 	.word	0x0000155d

00000ae4 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
     ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
     ae6:	46c6      	mov	lr, r8
     ae8:	b500      	push	{lr}
     aea:	b088      	sub	sp, #32
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
     aec:	4bcb      	ldr	r3, [pc, #812]	; (e1c <sd_mmc_check+0x338>)
     aee:	4798      	blx	r3
     af0:	0004      	movs	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
     af2:	2801      	cmp	r0, #1
     af4:	d006      	beq.n	b04 <sd_mmc_check+0x20>
		sd_mmc_deselect_slot();
     af6:	4bca      	ldr	r3, [pc, #808]	; (e20 <sd_mmc_check+0x33c>)
     af8:	4798      	blx	r3
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
     afa:	0020      	movs	r0, r4
     afc:	b008      	add	sp, #32
     afe:	bc04      	pop	{r2}
     b00:	4690      	mov	r8, r2
     b02:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_card->type = CARD_TYPE_SD;
     b04:	4bc7      	ldr	r3, [pc, #796]	; (e24 <sd_mmc_check+0x340>)
     b06:	681b      	ldr	r3, [r3, #0]
     b08:	2201      	movs	r2, #1
     b0a:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
     b0c:	2200      	movs	r2, #0
     b0e:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
     b10:	811a      	strh	r2, [r3, #8]
	driver_send_clock();
     b12:	4bc5      	ldr	r3, [pc, #788]	; (e28 <sd_mmc_check+0x344>)
     b14:	4798      	blx	r3
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
     b16:	2100      	movs	r1, #0
     b18:	2088      	movs	r0, #136	; 0x88
     b1a:	0140      	lsls	r0, r0, #5
     b1c:	4bc3      	ldr	r3, [pc, #780]	; (e2c <sd_mmc_check+0x348>)
     b1e:	4798      	blx	r3
     b20:	2800      	cmp	r0, #0
     b22:	d107      	bne.n	b34 <sd_mmc_check+0x50>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
     b24:	4bbf      	ldr	r3, [pc, #764]	; (e24 <sd_mmc_check+0x340>)
     b26:	681b      	ldr	r3, [r3, #0]
     b28:	2203      	movs	r2, #3
     b2a:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
     b2c:	4bbc      	ldr	r3, [pc, #752]	; (e20 <sd_mmc_check+0x33c>)
     b2e:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
     b30:	2403      	movs	r4, #3
     b32:	e7e2      	b.n	afa <sd_mmc_check+0x16>
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
     b34:	21d5      	movs	r1, #213	; 0xd5
     b36:	0049      	lsls	r1, r1, #1
     b38:	48bd      	ldr	r0, [pc, #756]	; (e30 <sd_mmc_check+0x34c>)
     b3a:	4bbc      	ldr	r3, [pc, #752]	; (e2c <sd_mmc_check+0x348>)
     b3c:	4798      	blx	r3
	*v2 = 0;
     b3e:	2600      	movs	r6, #0
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
     b40:	2800      	cmp	r0, #0
     b42:	d125      	bne.n	b90 <sd_mmc_check+0xac>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     b44:	4bb7      	ldr	r3, [pc, #732]	; (e24 <sd_mmc_check+0x340>)
     b46:	681b      	ldr	r3, [r3, #0]
     b48:	7adb      	ldrb	r3, [r3, #11]
     b4a:	07db      	lsls	r3, r3, #31
     b4c:	d500      	bpl.n	b50 <sd_mmc_check+0x6c>
     b4e:	e1eb      	b.n	f28 <sd_mmc_check+0x444>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     b50:	4bb4      	ldr	r3, [pc, #720]	; (e24 <sd_mmc_check+0x340>)
     b52:	681b      	ldr	r3, [r3, #0]
     b54:	7ada      	ldrb	r2, [r3, #11]
     b56:	2309      	movs	r3, #9
     b58:	4013      	ands	r3, r2
     b5a:	2b01      	cmp	r3, #1
     b5c:	d10f      	bne.n	b7e <sd_mmc_check+0x9a>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
     b5e:	2180      	movs	r1, #128	; 0x80
     b60:	0089      	lsls	r1, r1, #2
     b62:	48b4      	ldr	r0, [pc, #720]	; (e34 <sd_mmc_check+0x350>)
     b64:	4bb1      	ldr	r3, [pc, #708]	; (e2c <sd_mmc_check+0x348>)
     b66:	4798      	blx	r3
     b68:	2800      	cmp	r0, #0
     b6a:	d0db      	beq.n	b24 <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     b6c:	4bad      	ldr	r3, [pc, #692]	; (e24 <sd_mmc_check+0x340>)
     b6e:	681b      	ldr	r3, [r3, #0]
     b70:	7adb      	ldrb	r3, [r3, #11]
     b72:	07db      	lsls	r3, r3, #31
     b74:	d503      	bpl.n	b7e <sd_mmc_check+0x9a>
		if (!sd_mmc_cmd13()) {
     b76:	4bb0      	ldr	r3, [pc, #704]	; (e38 <sd_mmc_check+0x354>)
     b78:	4798      	blx	r3
     b7a:	2800      	cmp	r0, #0
     b7c:	d0d2      	beq.n	b24 <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
     b7e:	4baf      	ldr	r3, [pc, #700]	; (e3c <sd_mmc_check+0x358>)
     b80:	4798      	blx	r3
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
     b82:	4ba8      	ldr	r3, [pc, #672]	; (e24 <sd_mmc_check+0x340>)
     b84:	681b      	ldr	r3, [r3, #0]
     b86:	2200      	movs	r2, #0
     b88:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
     b8a:	4ba5      	ldr	r3, [pc, #660]	; (e20 <sd_mmc_check+0x33c>)
     b8c:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
     b8e:	e7b4      	b.n	afa <sd_mmc_check+0x16>
	resp = driver_get_response();
     b90:	4bab      	ldr	r3, [pc, #684]	; (e40 <sd_mmc_check+0x35c>)
     b92:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
     b94:	1c43      	adds	r3, r0, #1
     b96:	d100      	bne.n	b9a <sd_mmc_check+0xb6>
     b98:	e1c4      	b.n	f24 <sd_mmc_check+0x440>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
     b9a:	0500      	lsls	r0, r0, #20
     b9c:	0d00      	lsrs	r0, r0, #20
     b9e:	23d5      	movs	r3, #213	; 0xd5
     ba0:	005b      	lsls	r3, r3, #1
	*v2 = 1;
     ba2:	3601      	adds	r6, #1
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
     ba4:	4298      	cmp	r0, r3
     ba6:	d1bd      	bne.n	b24 <sd_mmc_check+0x40>
     ba8:	e7cc      	b.n	b44 <sd_mmc_check+0x60>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     baa:	2100      	movs	r1, #0
     bac:	48a5      	ldr	r0, [pc, #660]	; (e44 <sd_mmc_check+0x360>)
     bae:	4b9f      	ldr	r3, [pc, #636]	; (e2c <sd_mmc_check+0x348>)
     bb0:	4798      	blx	r3
     bb2:	2800      	cmp	r0, #0
     bb4:	d119      	bne.n	bea <sd_mmc_check+0x106>
			sd_mmc_card->type = CARD_TYPE_MMC;
     bb6:	4b9b      	ldr	r3, [pc, #620]	; (e24 <sd_mmc_check+0x340>)
     bb8:	681b      	ldr	r3, [r3, #0]
     bba:	2202      	movs	r2, #2
     bbc:	72da      	strb	r2, [r3, #11]
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
     bbe:	2100      	movs	r1, #0
     bc0:	2088      	movs	r0, #136	; 0x88
     bc2:	0140      	lsls	r0, r0, #5
     bc4:	4b99      	ldr	r3, [pc, #612]	; (e2c <sd_mmc_check+0x348>)
     bc6:	4798      	blx	r3
     bc8:	2800      	cmp	r0, #0
     bca:	d0ab      	beq.n	b24 <sd_mmc_check+0x40>
     bcc:	4d9e      	ldr	r5, [pc, #632]	; (e48 <sd_mmc_check+0x364>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
     bce:	4f97      	ldr	r7, [pc, #604]	; (e2c <sd_mmc_check+0x348>)
		resp = driver_get_response();
     bd0:	4e9b      	ldr	r6, [pc, #620]	; (e40 <sd_mmc_check+0x35c>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
     bd2:	2100      	movs	r1, #0
     bd4:	489d      	ldr	r0, [pc, #628]	; (e4c <sd_mmc_check+0x368>)
     bd6:	47b8      	blx	r7
     bd8:	2800      	cmp	r0, #0
     bda:	d0a3      	beq.n	b24 <sd_mmc_check+0x40>
		resp = driver_get_response();
     bdc:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
     bde:	07c3      	lsls	r3, r0, #31
     be0:	d57d      	bpl.n	cde <sd_mmc_check+0x1fa>
     be2:	3d01      	subs	r5, #1
		if (retry-- == 0) {
     be4:	2d00      	cmp	r5, #0
     be6:	d1f4      	bne.n	bd2 <sd_mmc_check+0xee>
     be8:	e79c      	b.n	b24 <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_CCS) != 0) {
     bea:	4b95      	ldr	r3, [pc, #596]	; (e40 <sd_mmc_check+0x35c>)
     bec:	4798      	blx	r3
     bee:	0043      	lsls	r3, r0, #1
     bf0:	d505      	bpl.n	bfe <sd_mmc_check+0x11a>
		sd_mmc_card->type |= CARD_TYPE_HC;
     bf2:	4b8c      	ldr	r3, [pc, #560]	; (e24 <sd_mmc_check+0x340>)
     bf4:	681a      	ldr	r2, [r3, #0]
     bf6:	7ad3      	ldrb	r3, [r2, #11]
     bf8:	2108      	movs	r1, #8
     bfa:	430b      	orrs	r3, r1
     bfc:	72d3      	strb	r3, [r2, #11]
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
     bfe:	2100      	movs	r1, #0
     c00:	4893      	ldr	r0, [pc, #588]	; (e50 <sd_mmc_check+0x36c>)
     c02:	4b8a      	ldr	r3, [pc, #552]	; (e2c <sd_mmc_check+0x348>)
     c04:	4798      	blx	r3
     c06:	2800      	cmp	r0, #0
     c08:	d08c      	beq.n	b24 <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     c0a:	4b86      	ldr	r3, [pc, #536]	; (e24 <sd_mmc_check+0x340>)
     c0c:	681b      	ldr	r3, [r3, #0]
     c0e:	7adb      	ldrb	r3, [r3, #11]
     c10:	07da      	lsls	r2, r3, #31
     c12:	d400      	bmi.n	c16 <sd_mmc_check+0x132>
     c14:	e1a4      	b.n	f60 <sd_mmc_check+0x47c>
		if (!sd_mmc_cmd9_spi()) {
     c16:	4b8f      	ldr	r3, [pc, #572]	; (e54 <sd_mmc_check+0x370>)
     c18:	4798      	blx	r3
     c1a:	2800      	cmp	r0, #0
     c1c:	d082      	beq.n	b24 <sd_mmc_check+0x40>
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
     c1e:	4b81      	ldr	r3, [pc, #516]	; (e24 <sd_mmc_check+0x340>)
     c20:	681a      	ldr	r2, [r3, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     c22:	7c53      	ldrb	r3, [r2, #17]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     c24:	2107      	movs	r1, #7
     c26:	4019      	ands	r1, r3
     c28:	0089      	lsls	r1, r1, #2
	sd_mmc_card->clock = unit * mul * 1000;
     c2a:	488b      	ldr	r0, [pc, #556]	; (e58 <sd_mmc_check+0x374>)
     c2c:	5808      	ldr	r0, [r1, r0]
     c2e:	21fa      	movs	r1, #250	; 0xfa
     c30:	0089      	lsls	r1, r1, #2
     c32:	4341      	muls	r1, r0
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
     c34:	065b      	lsls	r3, r3, #25
     c36:	0f1b      	lsrs	r3, r3, #28
     c38:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
     c3a:	4888      	ldr	r0, [pc, #544]	; (e5c <sd_mmc_check+0x378>)
     c3c:	581b      	ldr	r3, [r3, r0]
     c3e:	434b      	muls	r3, r1
     c40:	6013      	str	r3, [r2, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
     c42:	7b93      	ldrb	r3, [r2, #14]
     c44:	099b      	lsrs	r3, r3, #6
     c46:	d000      	beq.n	c4a <sd_mmc_check+0x166>
     c48:	e13c      	b.n	ec4 <sd_mmc_check+0x3e0>
     c4a:	7d91      	ldrb	r1, [r2, #22]
     c4c:	1189      	asrs	r1, r1, #6
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     c4e:	7d53      	ldrb	r3, [r2, #21]
     c50:	009b      	lsls	r3, r3, #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     c52:	7d10      	ldrb	r0, [r2, #20]
     c54:	0280      	lsls	r0, r0, #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     c56:	4303      	orrs	r3, r0
     c58:	430b      	orrs	r3, r1
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     c5a:	7e10      	ldrb	r0, [r2, #24]
     c5c:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     c5e:	7dd1      	ldrb	r1, [r2, #23]
     c60:	0049      	lsls	r1, r1, #1
     c62:	4308      	orrs	r0, r1
	}
	value &=  ((uint32_t)1 << size) - 1;
     c64:	051b      	lsls	r3, r3, #20
     c66:	0d1b      	lsrs	r3, r3, #20
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     c68:	3301      	adds	r3, #1
     c6a:	2107      	movs	r1, #7
     c6c:	4001      	ands	r1, r0
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     c6e:	3102      	adds	r1, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     c70:	408b      	lsls	r3, r1
     c72:	7cd0      	ldrb	r0, [r2, #19]
     c74:	210f      	movs	r1, #15
     c76:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
     c78:	408b      	lsls	r3, r1
				/ 1024;
     c7a:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
     c7c:	6053      	str	r3, [r2, #4]
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
     c7e:	8911      	ldrh	r1, [r2, #8]
     c80:	0409      	lsls	r1, r1, #16
     c82:	4877      	ldr	r0, [pc, #476]	; (e60 <sd_mmc_check+0x37c>)
     c84:	4b69      	ldr	r3, [pc, #420]	; (e2c <sd_mmc_check+0x348>)
     c86:	4798      	blx	r3
     c88:	2800      	cmp	r0, #0
     c8a:	d100      	bne.n	c8e <sd_mmc_check+0x1aa>
     c8c:	e74a      	b.n	b24 <sd_mmc_check+0x40>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
     c8e:	2301      	movs	r3, #1
     c90:	9300      	str	r3, [sp, #0]
     c92:	2208      	movs	r2, #8
     c94:	2100      	movs	r1, #0
     c96:	4873      	ldr	r0, [pc, #460]	; (e64 <sd_mmc_check+0x380>)
     c98:	4d73      	ldr	r5, [pc, #460]	; (e68 <sd_mmc_check+0x384>)
     c9a:	47a8      	blx	r5
     c9c:	2800      	cmp	r0, #0
     c9e:	d100      	bne.n	ca2 <sd_mmc_check+0x1be>
     ca0:	e740      	b.n	b24 <sd_mmc_check+0x40>
	if (!driver_start_read_blocks(scr, 1)) {
     ca2:	2101      	movs	r1, #1
     ca4:	a806      	add	r0, sp, #24
     ca6:	4b71      	ldr	r3, [pc, #452]	; (e6c <sd_mmc_check+0x388>)
     ca8:	4798      	blx	r3
     caa:	2800      	cmp	r0, #0
     cac:	d100      	bne.n	cb0 <sd_mmc_check+0x1cc>
     cae:	e739      	b.n	b24 <sd_mmc_check+0x40>
	if (!driver_wait_end_of_read_blocks()) {
     cb0:	4b6f      	ldr	r3, [pc, #444]	; (e70 <sd_mmc_check+0x38c>)
     cb2:	4798      	blx	r3
     cb4:	2800      	cmp	r0, #0
     cb6:	d100      	bne.n	cba <sd_mmc_check+0x1d6>
     cb8:	e734      	b.n	b24 <sd_mmc_check+0x40>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     cba:	ab06      	add	r3, sp, #24
	switch (SD_SCR_SD_SPEC(scr)) {
     cbc:	781b      	ldrb	r3, [r3, #0]
     cbe:	220f      	movs	r2, #15
     cc0:	4013      	ands	r3, r2
     cc2:	2b01      	cmp	r3, #1
     cc4:	d100      	bne.n	cc8 <sd_mmc_check+0x1e4>
     cc6:	e119      	b.n	efc <sd_mmc_check+0x418>
     cc8:	2b00      	cmp	r3, #0
     cca:	d100      	bne.n	cce <sd_mmc_check+0x1ea>
     ccc:	e109      	b.n	ee2 <sd_mmc_check+0x3fe>
     cce:	2b02      	cmp	r3, #2
     cd0:	d100      	bne.n	cd4 <sd_mmc_check+0x1f0>
     cd2:	e118      	b.n	f06 <sd_mmc_check+0x422>
		sd_mmc_card->version = CARD_VER_SD_1_0;
     cd4:	4b53      	ldr	r3, [pc, #332]	; (e24 <sd_mmc_check+0x340>)
     cd6:	681b      	ldr	r3, [r3, #0]
     cd8:	2210      	movs	r2, #16
     cda:	731a      	strb	r2, [r3, #12]
     cdc:	e105      	b.n	eea <sd_mmc_check+0x406>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     cde:	2100      	movs	r1, #0
     ce0:	4858      	ldr	r0, [pc, #352]	; (e44 <sd_mmc_check+0x360>)
     ce2:	4b52      	ldr	r3, [pc, #328]	; (e2c <sd_mmc_check+0x348>)
     ce4:	4798      	blx	r3
     ce6:	2800      	cmp	r0, #0
     ce8:	d100      	bne.n	cec <sd_mmc_check+0x208>
     cea:	e71b      	b.n	b24 <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
     cec:	4b54      	ldr	r3, [pc, #336]	; (e40 <sd_mmc_check+0x35c>)
     cee:	4798      	blx	r3
     cf0:	23c0      	movs	r3, #192	; 0xc0
     cf2:	05db      	lsls	r3, r3, #23
     cf4:	4018      	ands	r0, r3
     cf6:	2380      	movs	r3, #128	; 0x80
     cf8:	05db      	lsls	r3, r3, #23
     cfa:	4298      	cmp	r0, r3
     cfc:	d105      	bne.n	d0a <sd_mmc_check+0x226>
		sd_mmc_card->type |= CARD_TYPE_HC;
     cfe:	4b49      	ldr	r3, [pc, #292]	; (e24 <sd_mmc_check+0x340>)
     d00:	681a      	ldr	r2, [r3, #0]
     d02:	7ad1      	ldrb	r1, [r2, #11]
     d04:	2308      	movs	r3, #8
     d06:	430b      	orrs	r3, r1
     d08:	72d3      	strb	r3, [r2, #11]
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
     d0a:	2100      	movs	r1, #0
     d0c:	4850      	ldr	r0, [pc, #320]	; (e50 <sd_mmc_check+0x36c>)
     d0e:	4b47      	ldr	r3, [pc, #284]	; (e2c <sd_mmc_check+0x348>)
     d10:	4798      	blx	r3
     d12:	2800      	cmp	r0, #0
     d14:	d100      	bne.n	d18 <sd_mmc_check+0x234>
     d16:	e705      	b.n	b24 <sd_mmc_check+0x40>
	if (!sd_mmc_cmd9_spi()) {
     d18:	4b4e      	ldr	r3, [pc, #312]	; (e54 <sd_mmc_check+0x370>)
     d1a:	4798      	blx	r3
     d1c:	2800      	cmp	r0, #0
     d1e:	d100      	bne.n	d22 <sd_mmc_check+0x23e>
     d20:	e700      	b.n	b24 <sd_mmc_check+0x40>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
     d22:	4b40      	ldr	r3, [pc, #256]	; (e24 <sd_mmc_check+0x340>)
     d24:	681a      	ldr	r2, [r3, #0]
     d26:	7b93      	ldrb	r3, [r2, #14]
	value &=  ((uint32_t)1 << size) - 1;
     d28:	069b      	lsls	r3, r3, #26
     d2a:	0f1b      	lsrs	r3, r3, #28
     d2c:	2b02      	cmp	r3, #2
     d2e:	d100      	bne.n	d32 <sd_mmc_check+0x24e>
     d30:	e0a8      	b.n	e84 <sd_mmc_check+0x3a0>
     d32:	d907      	bls.n	d44 <sd_mmc_check+0x260>
     d34:	2b03      	cmp	r3, #3
     d36:	d100      	bne.n	d3a <sd_mmc_check+0x256>
     d38:	e0a7      	b.n	e8a <sd_mmc_check+0x3a6>
     d3a:	2b04      	cmp	r3, #4
     d3c:	d104      	bne.n	d48 <sd_mmc_check+0x264>
		sd_mmc_card->version = CARD_VER_MMC_4;
     d3e:	2340      	movs	r3, #64	; 0x40
     d40:	7313      	strb	r3, [r2, #12]
     d42:	e003      	b.n	d4c <sd_mmc_check+0x268>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
     d44:	2b01      	cmp	r3, #1
     d46:	d066      	beq.n	e16 <sd_mmc_check+0x332>
		sd_mmc_card->version = CARD_VER_MMC_1_2;
     d48:	2312      	movs	r3, #18
     d4a:	7313      	strb	r3, [r2, #12]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     d4c:	7c53      	ldrb	r3, [r2, #17]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
     d4e:	0659      	lsls	r1, r3, #25
     d50:	0f09      	lsrs	r1, r1, #28
     d52:	0089      	lsls	r1, r1, #2
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     d54:	2007      	movs	r0, #7
     d56:	4003      	ands	r3, r0
     d58:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
     d5a:	483f      	ldr	r0, [pc, #252]	; (e58 <sd_mmc_check+0x374>)
     d5c:	5818      	ldr	r0, [r3, r0]
     d5e:	23fa      	movs	r3, #250	; 0xfa
     d60:	009b      	lsls	r3, r3, #2
     d62:	4343      	muls	r3, r0
     d64:	4843      	ldr	r0, [pc, #268]	; (e74 <sd_mmc_check+0x390>)
     d66:	5809      	ldr	r1, [r1, r0]
     d68:	434b      	muls	r3, r1
     d6a:	6013      	str	r3, [r2, #0]
     d6c:	7d91      	ldrb	r1, [r2, #22]
     d6e:	1189      	asrs	r1, r1, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     d70:	7d53      	ldrb	r3, [r2, #21]
     d72:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     d74:	7d10      	ldrb	r0, [r2, #20]
     d76:	0280      	lsls	r0, r0, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     d78:	4303      	orrs	r3, r0
     d7a:	430b      	orrs	r3, r1
	value &=  ((uint32_t)1 << size) - 1;
     d7c:	051b      	lsls	r3, r3, #20
     d7e:	0d1b      	lsrs	r3, r3, #20
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
     d80:	493d      	ldr	r1, [pc, #244]	; (e78 <sd_mmc_check+0x394>)
     d82:	428b      	cmp	r3, r1
     d84:	d00f      	beq.n	da6 <sd_mmc_check+0x2c2>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     d86:	7e10      	ldrb	r0, [r2, #24]
     d88:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     d8a:	7dd1      	ldrb	r1, [r2, #23]
     d8c:	0049      	lsls	r1, r1, #1
     d8e:	4301      	orrs	r1, r0
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
     d90:	3301      	adds	r3, #1
	value &=  ((uint32_t)1 << size) - 1;
     d92:	2007      	movs	r0, #7
     d94:	4001      	ands	r1, r0
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     d96:	3102      	adds	r1, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
     d98:	408b      	lsls	r3, r1
     d9a:	7cd1      	ldrb	r1, [r2, #19]
     d9c:	3008      	adds	r0, #8
     d9e:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
     da0:	408b      	lsls	r3, r1
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
     da2:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
     da4:	6053      	str	r3, [r2, #4]
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
     da6:	7b13      	ldrb	r3, [r2, #12]
     da8:	2b3f      	cmp	r3, #63	; 0x3f
     daa:	d97b      	bls.n	ea4 <sd_mmc_check+0x3c0>
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
     dac:	2100      	movs	r1, #0
     dae:	9100      	str	r1, [sp, #0]
     db0:	2301      	movs	r3, #1
     db2:	2280      	movs	r2, #128	; 0x80
     db4:	0092      	lsls	r2, r2, #2
     db6:	4831      	ldr	r0, [pc, #196]	; (e7c <sd_mmc_check+0x398>)
     db8:	4d2b      	ldr	r5, [pc, #172]	; (e68 <sd_mmc_check+0x384>)
     dba:	47a8      	blx	r5
     dbc:	2800      	cmp	r0, #0
     dbe:	d100      	bne.n	dc2 <sd_mmc_check+0x2de>
     dc0:	e6b0      	b.n	b24 <sd_mmc_check+0x40>
     dc2:	2500      	movs	r5, #0
		if (!driver_read_word(&ext_csd)) {
     dc4:	4e2e      	ldr	r6, [pc, #184]	; (e80 <sd_mmc_check+0x39c>)
     dc6:	a805      	add	r0, sp, #20
     dc8:	47b0      	blx	r6
     dca:	2800      	cmp	r0, #0
     dcc:	d100      	bne.n	dd0 <sd_mmc_check+0x2ec>
     dce:	e6a9      	b.n	b24 <sd_mmc_check+0x40>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
     dd0:	3501      	adds	r5, #1
     dd2:	b2ad      	uxth	r5, r5
     dd4:	2d32      	cmp	r5, #50	; 0x32
     dd6:	d1f6      	bne.n	dc6 <sd_mmc_check+0x2e2>
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
     dd8:	4b12      	ldr	r3, [pc, #72]	; (e24 <sd_mmc_check+0x340>)
     dda:	6819      	ldr	r1, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     ddc:	7d8a      	ldrb	r2, [r1, #22]
     dde:	1192      	asrs	r2, r2, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     de0:	7d4b      	ldrb	r3, [r1, #21]
     de2:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     de4:	7d09      	ldrb	r1, [r1, #20]
     de6:	0289      	lsls	r1, r1, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     de8:	430b      	orrs	r3, r1
     dea:	4313      	orrs	r3, r2
	value &=  ((uint32_t)1 << size) - 1;
     dec:	051b      	lsls	r3, r3, #20
     dee:	0d1b      	lsrs	r3, r3, #20
     df0:	4a21      	ldr	r2, [pc, #132]	; (e78 <sd_mmc_check+0x394>)
     df2:	4293      	cmp	r3, r2
     df4:	d154      	bne.n	ea0 <sd_mmc_check+0x3bc>
			if (!driver_read_word(&sec_count)) {
     df6:	4e22      	ldr	r6, [pc, #136]	; (e80 <sd_mmc_check+0x39c>)
     df8:	a806      	add	r0, sp, #24
     dfa:	47b0      	blx	r6
     dfc:	2800      	cmp	r0, #0
     dfe:	d100      	bne.n	e02 <sd_mmc_check+0x31e>
     e00:	e690      	b.n	b24 <sd_mmc_check+0x40>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
     e02:	3501      	adds	r5, #1
     e04:	b2ad      	uxth	r5, r5
     e06:	2d35      	cmp	r5, #53	; 0x35
     e08:	d9f6      	bls.n	df8 <sd_mmc_check+0x314>
		sd_mmc_card->capacity = sec_count / 2;
     e0a:	4b06      	ldr	r3, [pc, #24]	; (e24 <sd_mmc_check+0x340>)
     e0c:	681a      	ldr	r2, [r3, #0]
     e0e:	9b06      	ldr	r3, [sp, #24]
     e10:	085b      	lsrs	r3, r3, #1
     e12:	6053      	str	r3, [r2, #4]
     e14:	e044      	b.n	ea0 <sd_mmc_check+0x3bc>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
     e16:	2314      	movs	r3, #20
     e18:	7313      	strb	r3, [r2, #12]
     e1a:	e797      	b.n	d4c <sd_mmc_check+0x268>
     e1c:	000009c9 	.word	0x000009c9
     e20:	00000aa9 	.word	0x00000aa9
     e24:	200000d4 	.word	0x200000d4
     e28:	000016d9 	.word	0x000016d9
     e2c:	000018a1 	.word	0x000018a1
     e30:	00005508 	.word	0x00005508
     e34:	00001110 	.word	0x00001110
     e38:	00000a25 	.word	0x00000a25
     e3c:	000009a1 	.word	0x000009a1
     e40:	000018b9 	.word	0x000018b9
     e44:	0000053a 	.word	0x0000053a
     e48:	00001bef 	.word	0x00001bef
     e4c:	00001101 	.word	0x00001101
     e50:	0000113b 	.word	0x0000113b
     e54:	00000a5d 	.word	0x00000a5d
     e58:	000072d4 	.word	0x000072d4
     e5c:	000072f0 	.word	0x000072f0
     e60:	00001137 	.word	0x00001137
     e64:	00081133 	.word	0x00081133
     e68:	00001711 	.word	0x00001711
     e6c:	0000193d 	.word	0x0000193d
     e70:	000019c9 	.word	0x000019c9
     e74:	00007294 	.word	0x00007294
     e78:	00000fff 	.word	0x00000fff
     e7c:	00081108 	.word	0x00081108
     e80:	000018c5 	.word	0x000018c5
		sd_mmc_card->version = CARD_VER_MMC_2_2;
     e84:	2322      	movs	r3, #34	; 0x22
     e86:	7313      	strb	r3, [r2, #12]
     e88:	e760      	b.n	d4c <sd_mmc_check+0x268>
		sd_mmc_card->version = CARD_VER_MMC_3;
     e8a:	2330      	movs	r3, #48	; 0x30
     e8c:	7313      	strb	r3, [r2, #12]
     e8e:	e75d      	b.n	d4c <sd_mmc_check+0x268>
		if (!driver_read_word(&sec_count)) {
     e90:	a806      	add	r0, sp, #24
     e92:	4b36      	ldr	r3, [pc, #216]	; (f6c <sd_mmc_check+0x488>)
     e94:	4798      	blx	r3
     e96:	2800      	cmp	r0, #0
     e98:	d100      	bne.n	e9c <sd_mmc_check+0x3b8>
     e9a:	e643      	b.n	b24 <sd_mmc_check+0x40>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
     e9c:	3501      	adds	r5, #1
     e9e:	b2ad      	uxth	r5, r5
     ea0:	2d7f      	cmp	r5, #127	; 0x7f
     ea2:	d9f5      	bls.n	e90 <sd_mmc_check+0x3ac>
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
     ea4:	2180      	movs	r1, #128	; 0x80
     ea6:	0089      	lsls	r1, r1, #2
     ea8:	4831      	ldr	r0, [pc, #196]	; (f70 <sd_mmc_check+0x48c>)
     eaa:	4b32      	ldr	r3, [pc, #200]	; (f74 <sd_mmc_check+0x490>)
     eac:	4798      	blx	r3
     eae:	2800      	cmp	r0, #0
     eb0:	d100      	bne.n	eb4 <sd_mmc_check+0x3d0>
     eb2:	e637      	b.n	b24 <sd_mmc_check+0x40>
	if (!sd_mmc_cmd13()) {
     eb4:	4b30      	ldr	r3, [pc, #192]	; (f78 <sd_mmc_check+0x494>)
     eb6:	4798      	blx	r3
     eb8:	2800      	cmp	r0, #0
     eba:	d100      	bne.n	ebe <sd_mmc_check+0x3da>
     ebc:	e632      	b.n	b24 <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
     ebe:	4b2f      	ldr	r3, [pc, #188]	; (f7c <sd_mmc_check+0x498>)
     ec0:	4798      	blx	r3
     ec2:	e65e      	b.n	b82 <sd_mmc_check+0x9e>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     ec4:	7dd0      	ldrb	r0, [r2, #23]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     ec6:	7d93      	ldrb	r3, [r2, #22]
     ec8:	021b      	lsls	r3, r3, #8
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     eca:	7d51      	ldrb	r1, [r2, #21]
     ecc:	0409      	lsls	r1, r1, #16
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     ece:	430b      	orrs	r3, r1
     ed0:	4303      	orrs	r3, r0
	value &=  ((uint32_t)1 << size) - 1;
     ed2:	029b      	lsls	r3, r3, #10
				* 512;
     ed4:	085b      	lsrs	r3, r3, #1
     ed6:	2180      	movs	r1, #128	; 0x80
     ed8:	0089      	lsls	r1, r1, #2
     eda:	468c      	mov	ip, r1
     edc:	4463      	add	r3, ip
		sd_mmc_card->capacity =
     ede:	6053      	str	r3, [r2, #4]
     ee0:	e6cd      	b.n	c7e <sd_mmc_check+0x19a>
		sd_mmc_card->version = CARD_VER_SD_1_0;
     ee2:	4b27      	ldr	r3, [pc, #156]	; (f80 <sd_mmc_check+0x49c>)
     ee4:	681b      	ldr	r3, [r3, #0]
     ee6:	2210      	movs	r2, #16
     ee8:	731a      	strb	r2, [r3, #12]
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     eea:	4b25      	ldr	r3, [pc, #148]	; (f80 <sd_mmc_check+0x49c>)
     eec:	681b      	ldr	r3, [r3, #0]
     eee:	7adb      	ldrb	r3, [r3, #11]
     ef0:	2209      	movs	r2, #9
     ef2:	4013      	ands	r3, r2
     ef4:	2b01      	cmp	r3, #1
     ef6:	d000      	beq.n	efa <sd_mmc_check+0x416>
     ef8:	e638      	b.n	b6c <sd_mmc_check+0x88>
     efa:	e630      	b.n	b5e <sd_mmc_check+0x7a>
		sd_mmc_card->version = CARD_VER_SD_1_10;
     efc:	4b20      	ldr	r3, [pc, #128]	; (f80 <sd_mmc_check+0x49c>)
     efe:	681b      	ldr	r3, [r3, #0]
     f00:	221a      	movs	r2, #26
     f02:	731a      	strb	r2, [r3, #12]
     f04:	e7f1      	b.n	eea <sd_mmc_check+0x406>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     f06:	ab06      	add	r3, sp, #24
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
     f08:	789b      	ldrb	r3, [r3, #2]
     f0a:	09db      	lsrs	r3, r3, #7
     f0c:	2b01      	cmp	r3, #1
     f0e:	d104      	bne.n	f1a <sd_mmc_check+0x436>
			sd_mmc_card->version = CARD_VER_SD_3_0;
     f10:	4b1b      	ldr	r3, [pc, #108]	; (f80 <sd_mmc_check+0x49c>)
     f12:	681b      	ldr	r3, [r3, #0]
     f14:	2230      	movs	r2, #48	; 0x30
     f16:	731a      	strb	r2, [r3, #12]
     f18:	e7e7      	b.n	eea <sd_mmc_check+0x406>
			sd_mmc_card->version = CARD_VER_SD_2_0;
     f1a:	4b19      	ldr	r3, [pc, #100]	; (f80 <sd_mmc_check+0x49c>)
     f1c:	681b      	ldr	r3, [r3, #0]
     f1e:	2220      	movs	r2, #32
     f20:	731a      	strb	r2, [r3, #12]
     f22:	e7e2      	b.n	eea <sd_mmc_check+0x406>
	*v2 = 0;
     f24:	2600      	movs	r6, #0
     f26:	e60d      	b.n	b44 <sd_mmc_check+0x60>
     f28:	1e73      	subs	r3, r6, #1
     f2a:	419e      	sbcs	r6, r3
     f2c:	07b3      	lsls	r3, r6, #30
     f2e:	9303      	str	r3, [sp, #12]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     f30:	4d14      	ldr	r5, [pc, #80]	; (f84 <sd_mmc_check+0x4a0>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
     f32:	4f10      	ldr	r7, [pc, #64]	; (f74 <sd_mmc_check+0x490>)
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
     f34:	46b8      	mov	r8, r7
		resp = driver_get_response();
     f36:	4e14      	ldr	r6, [pc, #80]	; (f88 <sd_mmc_check+0x4a4>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
     f38:	2100      	movs	r1, #0
     f3a:	4814      	ldr	r0, [pc, #80]	; (f8c <sd_mmc_check+0x4a8>)
     f3c:	47b8      	blx	r7
     f3e:	2800      	cmp	r0, #0
     f40:	d100      	bne.n	f44 <sd_mmc_check+0x460>
     f42:	e638      	b.n	bb6 <sd_mmc_check+0xd2>
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
     f44:	9903      	ldr	r1, [sp, #12]
     f46:	4812      	ldr	r0, [pc, #72]	; (f90 <sd_mmc_check+0x4ac>)
     f48:	47c0      	blx	r8
     f4a:	2800      	cmp	r0, #0
     f4c:	d100      	bne.n	f50 <sd_mmc_check+0x46c>
     f4e:	e632      	b.n	bb6 <sd_mmc_check+0xd2>
		resp = driver_get_response();
     f50:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
     f52:	07c3      	lsls	r3, r0, #31
     f54:	d400      	bmi.n	f58 <sd_mmc_check+0x474>
     f56:	e628      	b.n	baa <sd_mmc_check+0xc6>
     f58:	3d01      	subs	r5, #1
		if (retry-- == 0) {
     f5a:	2d00      	cmp	r5, #0
     f5c:	d1ec      	bne.n	f38 <sd_mmc_check+0x454>
     f5e:	e62a      	b.n	bb6 <sd_mmc_check+0xd2>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     f60:	2209      	movs	r2, #9
     f62:	4013      	ands	r3, r2
     f64:	2b01      	cmp	r3, #1
     f66:	d000      	beq.n	f6a <sd_mmc_check+0x486>
     f68:	e609      	b.n	b7e <sd_mmc_check+0x9a>
     f6a:	e5f8      	b.n	b5e <sd_mmc_check+0x7a>
     f6c:	000018c5 	.word	0x000018c5
     f70:	00001110 	.word	0x00001110
     f74:	000018a1 	.word	0x000018a1
     f78:	00000a25 	.word	0x00000a25
     f7c:	000009a1 	.word	0x000009a1
     f80:	200000d4 	.word	0x200000d4
     f84:	00001bef 	.word	0x00001bef
     f88:	000018b9 	.word	0x000018b9
     f8c:	00001137 	.word	0x00001137
     f90:	00001129 	.word	0x00001129

00000f94 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
     f94:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     f96:	4b06      	ldr	r3, [pc, #24]	; (fb0 <sd_mmc_get_type+0x1c>)
     f98:	4798      	blx	r3
		return CARD_TYPE_UNKNOWN;
     f9a:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     f9c:	2800      	cmp	r0, #0
     f9e:	d001      	beq.n	fa4 <sd_mmc_get_type+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
     fa0:	0018      	movs	r0, r3
     fa2:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
     fa4:	4b03      	ldr	r3, [pc, #12]	; (fb4 <sd_mmc_get_type+0x20>)
     fa6:	4798      	blx	r3
	return sd_mmc_card->type;
     fa8:	4b03      	ldr	r3, [pc, #12]	; (fb8 <sd_mmc_get_type+0x24>)
     faa:	681b      	ldr	r3, [r3, #0]
     fac:	7adb      	ldrb	r3, [r3, #11]
     fae:	e7f7      	b.n	fa0 <sd_mmc_get_type+0xc>
     fb0:	000009c9 	.word	0x000009c9
     fb4:	00000aa9 	.word	0x00000aa9
     fb8:	200000d4 	.word	0x200000d4

00000fbc <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
     fbc:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     fbe:	4b06      	ldr	r3, [pc, #24]	; (fd8 <sd_mmc_get_capacity+0x1c>)
     fc0:	4798      	blx	r3
		return 0;
     fc2:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     fc4:	2800      	cmp	r0, #0
     fc6:	d001      	beq.n	fcc <sd_mmc_get_capacity+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
     fc8:	0018      	movs	r0, r3
     fca:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
     fcc:	4b03      	ldr	r3, [pc, #12]	; (fdc <sd_mmc_get_capacity+0x20>)
     fce:	4798      	blx	r3
	return sd_mmc_card->capacity;
     fd0:	4b03      	ldr	r3, [pc, #12]	; (fe0 <sd_mmc_get_capacity+0x24>)
     fd2:	681b      	ldr	r3, [r3, #0]
     fd4:	685b      	ldr	r3, [r3, #4]
     fd6:	e7f7      	b.n	fc8 <sd_mmc_get_capacity+0xc>
     fd8:	000009c9 	.word	0x000009c9
     fdc:	00000aa9 	.word	0x00000aa9
     fe0:	200000d4 	.word	0x200000d4

00000fe4 <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
     fe4:	2000      	movs	r0, #0
     fe6:	4770      	bx	lr

00000fe8 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
     fe8:	b570      	push	{r4, r5, r6, lr}
     fea:	b082      	sub	sp, #8
     fec:	000e      	movs	r6, r1
     fee:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
     ff0:	4b16      	ldr	r3, [pc, #88]	; (104c <sd_mmc_init_read_blocks+0x64>)
     ff2:	4798      	blx	r3
     ff4:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
     ff6:	d002      	beq.n	ffe <sd_mmc_init_read_blocks+0x16>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
     ff8:	0020      	movs	r0, r4
     ffa:	b002      	add	sp, #8
     ffc:	bd70      	pop	{r4, r5, r6, pc}
	if (!sd_mmc_cmd13()) {
     ffe:	4b14      	ldr	r3, [pc, #80]	; (1050 <sd_mmc_init_read_blocks+0x68>)
    1000:	4798      	blx	r3
    1002:	2800      	cmp	r0, #0
    1004:	d017      	beq.n	1036 <sd_mmc_init_read_blocks+0x4e>
	if (nb_block > 1) {
    1006:	2d01      	cmp	r5, #1
    1008:	d919      	bls.n	103e <sd_mmc_init_read_blocks+0x56>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
    100a:	4812      	ldr	r0, [pc, #72]	; (1054 <sd_mmc_init_read_blocks+0x6c>)
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    100c:	4b12      	ldr	r3, [pc, #72]	; (1058 <sd_mmc_init_read_blocks+0x70>)
    100e:	681b      	ldr	r3, [r3, #0]
    1010:	7adb      	ldrb	r3, [r3, #11]
    1012:	071b      	lsls	r3, r3, #28
    1014:	d400      	bmi.n	1018 <sd_mmc_init_read_blocks+0x30>
		arg = (start * SD_MMC_BLOCK_SIZE);
    1016:	0276      	lsls	r6, r6, #9
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    1018:	2301      	movs	r3, #1
    101a:	9300      	str	r3, [sp, #0]
    101c:	002b      	movs	r3, r5
    101e:	2280      	movs	r2, #128	; 0x80
    1020:	0092      	lsls	r2, r2, #2
    1022:	0031      	movs	r1, r6
    1024:	4e0d      	ldr	r6, [pc, #52]	; (105c <sd_mmc_init_read_blocks+0x74>)
    1026:	47b0      	blx	r6
    1028:	2800      	cmp	r0, #0
    102a:	d00a      	beq.n	1042 <sd_mmc_init_read_blocks+0x5a>
	sd_mmc_nb_block_remaining = nb_block;
    102c:	4b0c      	ldr	r3, [pc, #48]	; (1060 <sd_mmc_init_read_blocks+0x78>)
    102e:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    1030:	4b0c      	ldr	r3, [pc, #48]	; (1064 <sd_mmc_init_read_blocks+0x7c>)
    1032:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
    1034:	e7e0      	b.n	ff8 <sd_mmc_init_read_blocks+0x10>
		sd_mmc_deselect_slot();
    1036:	4b0c      	ldr	r3, [pc, #48]	; (1068 <sd_mmc_init_read_blocks+0x80>)
    1038:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    103a:	3405      	adds	r4, #5
    103c:	e7dc      	b.n	ff8 <sd_mmc_init_read_blocks+0x10>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
    103e:	480b      	ldr	r0, [pc, #44]	; (106c <sd_mmc_init_read_blocks+0x84>)
    1040:	e7e4      	b.n	100c <sd_mmc_init_read_blocks+0x24>
		sd_mmc_deselect_slot();
    1042:	4b09      	ldr	r3, [pc, #36]	; (1068 <sd_mmc_init_read_blocks+0x80>)
    1044:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    1046:	2405      	movs	r4, #5
    1048:	e7d6      	b.n	ff8 <sd_mmc_init_read_blocks+0x10>
    104a:	46c0      	nop			; (mov r8, r8)
    104c:	000009c9 	.word	0x000009c9
    1050:	00000a25 	.word	0x00000a25
    1054:	00101112 	.word	0x00101112
    1058:	200000d4 	.word	0x200000d4
    105c:	00001711 	.word	0x00001711
    1060:	200000f8 	.word	0x200000f8
    1064:	200000fa 	.word	0x200000fa
    1068:	00000aa9 	.word	0x00000aa9
    106c:	00081111 	.word	0x00081111

00001070 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
    1070:	b510      	push	{r4, lr}
    1072:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
    1074:	4b07      	ldr	r3, [pc, #28]	; (1094 <sd_mmc_start_read_blocks+0x24>)
    1076:	4798      	blx	r3
    1078:	2800      	cmp	r0, #0
    107a:	d104      	bne.n	1086 <sd_mmc_start_read_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
    107c:	2200      	movs	r2, #0
    107e:	4b06      	ldr	r3, [pc, #24]	; (1098 <sd_mmc_start_read_blocks+0x28>)
    1080:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    1082:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
    1084:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
    1086:	4a04      	ldr	r2, [pc, #16]	; (1098 <sd_mmc_start_read_blocks+0x28>)
    1088:	8813      	ldrh	r3, [r2, #0]
    108a:	1b1c      	subs	r4, r3, r4
    108c:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
    108e:	2000      	movs	r0, #0
    1090:	e7f8      	b.n	1084 <sd_mmc_start_read_blocks+0x14>
    1092:	46c0      	nop			; (mov r8, r8)
    1094:	0000193d 	.word	0x0000193d
    1098:	200000f8 	.word	0x200000f8

0000109c <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
    109c:	b510      	push	{r4, lr}
    109e:	0004      	movs	r4, r0
	if (!driver_wait_end_of_read_blocks()) {
    10a0:	4b14      	ldr	r3, [pc, #80]	; (10f4 <sd_mmc_wait_end_of_read_blocks+0x58>)
    10a2:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    10a4:	2305      	movs	r3, #5
	if (!driver_wait_end_of_read_blocks()) {
    10a6:	2800      	cmp	r0, #0
    10a8:	d101      	bne.n	10ae <sd_mmc_wait_end_of_read_blocks+0x12>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
    10aa:	0018      	movs	r0, r3
    10ac:	bd10      	pop	{r4, pc}
	if (abort) {
    10ae:	2c00      	cmp	r4, #0
    10b0:	d010      	beq.n	10d4 <sd_mmc_wait_end_of_read_blocks+0x38>
		sd_mmc_nb_block_remaining = 0;
    10b2:	2200      	movs	r2, #0
    10b4:	4b10      	ldr	r3, [pc, #64]	; (10f8 <sd_mmc_wait_end_of_read_blocks+0x5c>)
    10b6:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
    10b8:	4b10      	ldr	r3, [pc, #64]	; (10fc <sd_mmc_wait_end_of_read_blocks+0x60>)
    10ba:	881b      	ldrh	r3, [r3, #0]
    10bc:	2b01      	cmp	r3, #1
    10be:	d00f      	beq.n	10e0 <sd_mmc_wait_end_of_read_blocks+0x44>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
    10c0:	2100      	movs	r1, #0
    10c2:	480f      	ldr	r0, [pc, #60]	; (1100 <sd_mmc_wait_end_of_read_blocks+0x64>)
    10c4:	4b0f      	ldr	r3, [pc, #60]	; (1104 <sd_mmc_wait_end_of_read_blocks+0x68>)
    10c6:	4798      	blx	r3
    10c8:	2800      	cmp	r0, #0
    10ca:	d00d      	beq.n	10e8 <sd_mmc_wait_end_of_read_blocks+0x4c>
	sd_mmc_deselect_slot();
    10cc:	4b0e      	ldr	r3, [pc, #56]	; (1108 <sd_mmc_wait_end_of_read_blocks+0x6c>)
    10ce:	4798      	blx	r3
	return SD_MMC_OK;
    10d0:	2300      	movs	r3, #0
    10d2:	e7ea      	b.n	10aa <sd_mmc_wait_end_of_read_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
    10d4:	4b08      	ldr	r3, [pc, #32]	; (10f8 <sd_mmc_wait_end_of_read_blocks+0x5c>)
    10d6:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
    10d8:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
    10da:	2a00      	cmp	r2, #0
    10dc:	d0ec      	beq.n	10b8 <sd_mmc_wait_end_of_read_blocks+0x1c>
    10de:	e7e4      	b.n	10aa <sd_mmc_wait_end_of_read_blocks+0xe>
		sd_mmc_deselect_slot();
    10e0:	4b09      	ldr	r3, [pc, #36]	; (1108 <sd_mmc_wait_end_of_read_blocks+0x6c>)
    10e2:	4798      	blx	r3
		return SD_MMC_OK;
    10e4:	2300      	movs	r3, #0
    10e6:	e7e0      	b.n	10aa <sd_mmc_wait_end_of_read_blocks+0xe>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
    10e8:	2100      	movs	r1, #0
    10ea:	4805      	ldr	r0, [pc, #20]	; (1100 <sd_mmc_wait_end_of_read_blocks+0x64>)
    10ec:	4b05      	ldr	r3, [pc, #20]	; (1104 <sd_mmc_wait_end_of_read_blocks+0x68>)
    10ee:	4798      	blx	r3
    10f0:	e7ec      	b.n	10cc <sd_mmc_wait_end_of_read_blocks+0x30>
    10f2:	46c0      	nop			; (mov r8, r8)
    10f4:	000019c9 	.word	0x000019c9
    10f8:	200000f8 	.word	0x200000f8
    10fc:	200000fa 	.word	0x200000fa
    1100:	0000310c 	.word	0x0000310c
    1104:	000018a1 	.word	0x000018a1
    1108:	00000aa9 	.word	0x00000aa9

0000110c <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    110c:	b570      	push	{r4, r5, r6, lr}
    110e:	b082      	sub	sp, #8
    1110:	000e      	movs	r6, r1
    1112:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    1114:	4b11      	ldr	r3, [pc, #68]	; (115c <sd_mmc_init_write_blocks+0x50>)
    1116:	4798      	blx	r3
    1118:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
    111a:	d116      	bne.n	114a <sd_mmc_init_write_blocks+0x3e>
	if (sd_mmc_is_write_protected(slot)) {
		sd_mmc_deselect_slot();
		return SD_MMC_ERR_WP;
	}

	if (nb_block > 1) {
    111c:	2d01      	cmp	r5, #1
    111e:	d917      	bls.n	1150 <sd_mmc_init_write_blocks+0x44>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
    1120:	480f      	ldr	r0, [pc, #60]	; (1160 <sd_mmc_init_write_blocks+0x54>)
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    1122:	4b10      	ldr	r3, [pc, #64]	; (1164 <sd_mmc_init_write_blocks+0x58>)
    1124:	681b      	ldr	r3, [r3, #0]
    1126:	7adb      	ldrb	r3, [r3, #11]
    1128:	071b      	lsls	r3, r3, #28
    112a:	d400      	bmi.n	112e <sd_mmc_init_write_blocks+0x22>
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
    112c:	0276      	lsls	r6, r6, #9
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    112e:	2301      	movs	r3, #1
    1130:	9300      	str	r3, [sp, #0]
    1132:	002b      	movs	r3, r5
    1134:	2280      	movs	r2, #128	; 0x80
    1136:	0092      	lsls	r2, r2, #2
    1138:	0031      	movs	r1, r6
    113a:	4e0b      	ldr	r6, [pc, #44]	; (1168 <sd_mmc_init_write_blocks+0x5c>)
    113c:	47b0      	blx	r6
    113e:	2800      	cmp	r0, #0
    1140:	d008      	beq.n	1154 <sd_mmc_init_write_blocks+0x48>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
    1142:	4b0a      	ldr	r3, [pc, #40]	; (116c <sd_mmc_init_write_blocks+0x60>)
    1144:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    1146:	4b0a      	ldr	r3, [pc, #40]	; (1170 <sd_mmc_init_write_blocks+0x64>)
    1148:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
}
    114a:	0020      	movs	r0, r4
    114c:	b002      	add	sp, #8
    114e:	bd70      	pop	{r4, r5, r6, pc}
		cmd = SDMMC_CMD24_WRITE_BLOCK;
    1150:	4808      	ldr	r0, [pc, #32]	; (1174 <sd_mmc_init_write_blocks+0x68>)
    1152:	e7e6      	b.n	1122 <sd_mmc_init_write_blocks+0x16>
		sd_mmc_deselect_slot();
    1154:	4b08      	ldr	r3, [pc, #32]	; (1178 <sd_mmc_init_write_blocks+0x6c>)
    1156:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    1158:	2405      	movs	r4, #5
    115a:	e7f6      	b.n	114a <sd_mmc_init_write_blocks+0x3e>
    115c:	000009c9 	.word	0x000009c9
    1160:	00109119 	.word	0x00109119
    1164:	200000d4 	.word	0x200000d4
    1168:	00001711 	.word	0x00001711
    116c:	200000f8 	.word	0x200000f8
    1170:	200000fa 	.word	0x200000fa
    1174:	00089118 	.word	0x00089118
    1178:	00000aa9 	.word	0x00000aa9

0000117c <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
    117c:	b510      	push	{r4, lr}
    117e:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
    1180:	4b07      	ldr	r3, [pc, #28]	; (11a0 <sd_mmc_start_write_blocks+0x24>)
    1182:	4798      	blx	r3
    1184:	2800      	cmp	r0, #0
    1186:	d104      	bne.n	1192 <sd_mmc_start_write_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
    1188:	2200      	movs	r2, #0
    118a:	4b06      	ldr	r3, [pc, #24]	; (11a4 <sd_mmc_start_write_blocks+0x28>)
    118c:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    118e:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
    1190:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
    1192:	4a04      	ldr	r2, [pc, #16]	; (11a4 <sd_mmc_start_write_blocks+0x28>)
    1194:	8813      	ldrh	r3, [r2, #0]
    1196:	1b1c      	subs	r4, r3, r4
    1198:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
    119a:	2000      	movs	r0, #0
    119c:	e7f8      	b.n	1190 <sd_mmc_start_write_blocks+0x14>
    119e:	46c0      	nop			; (mov r8, r8)
    11a0:	000019cd 	.word	0x000019cd
    11a4:	200000f8 	.word	0x200000f8

000011a8 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
    11a8:	b510      	push	{r4, lr}
    11aa:	0004      	movs	r4, r0
	if (!driver_wait_end_of_write_blocks()) {
    11ac:	4b0e      	ldr	r3, [pc, #56]	; (11e8 <sd_mmc_wait_end_of_write_blocks+0x40>)
    11ae:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    11b0:	2305      	movs	r3, #5
	if (!driver_wait_end_of_write_blocks()) {
    11b2:	2800      	cmp	r0, #0
    11b4:	d101      	bne.n	11ba <sd_mmc_wait_end_of_write_blocks+0x12>
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
    11b6:	0018      	movs	r0, r3
    11b8:	bd10      	pop	{r4, pc}
	if (abort) {
    11ba:	2c00      	cmp	r4, #0
    11bc:	d00a      	beq.n	11d4 <sd_mmc_wait_end_of_write_blocks+0x2c>
		sd_mmc_nb_block_remaining = 0;
    11be:	2200      	movs	r2, #0
    11c0:	4b0a      	ldr	r3, [pc, #40]	; (11ec <sd_mmc_wait_end_of_write_blocks+0x44>)
    11c2:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
    11c4:	4b0a      	ldr	r3, [pc, #40]	; (11f0 <sd_mmc_wait_end_of_write_blocks+0x48>)
    11c6:	881b      	ldrh	r3, [r3, #0]
    11c8:	2b01      	cmp	r3, #1
    11ca:	d009      	beq.n	11e0 <sd_mmc_wait_end_of_write_blocks+0x38>
	sd_mmc_deselect_slot();
    11cc:	4b09      	ldr	r3, [pc, #36]	; (11f4 <sd_mmc_wait_end_of_write_blocks+0x4c>)
    11ce:	4798      	blx	r3
	return SD_MMC_OK;
    11d0:	2300      	movs	r3, #0
    11d2:	e7f0      	b.n	11b6 <sd_mmc_wait_end_of_write_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
    11d4:	4b05      	ldr	r3, [pc, #20]	; (11ec <sd_mmc_wait_end_of_write_blocks+0x44>)
    11d6:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
    11d8:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
    11da:	2a00      	cmp	r2, #0
    11dc:	d0f2      	beq.n	11c4 <sd_mmc_wait_end_of_write_blocks+0x1c>
    11de:	e7ea      	b.n	11b6 <sd_mmc_wait_end_of_write_blocks+0xe>
		sd_mmc_deselect_slot();
    11e0:	4b04      	ldr	r3, [pc, #16]	; (11f4 <sd_mmc_wait_end_of_write_blocks+0x4c>)
    11e2:	4798      	blx	r3
		return SD_MMC_OK;
    11e4:	2300      	movs	r3, #0
    11e6:	e7e6      	b.n	11b6 <sd_mmc_wait_end_of_write_blocks+0xe>
    11e8:	00001a4d 	.word	0x00001a4d
    11ec:	200000f8 	.word	0x200000f8
    11f0:	200000fa 	.word	0x200000fa
    11f4:	00000aa9 	.word	0x00000aa9

000011f8 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
    11f8:	b510      	push	{r4, lr}
    11fa:	0004      	movs	r4, r0
	switch (sd_mmc_check(slot))
    11fc:	4b0f      	ldr	r3, [pc, #60]	; (123c <sd_mmc_test_unit_ready+0x44>)
    11fe:	4798      	blx	r3
    1200:	2801      	cmp	r0, #1
    1202:	d019      	beq.n	1238 <sd_mmc_test_unit_ready+0x40>
    1204:	2800      	cmp	r0, #0
    1206:	d003      	beq.n	1210 <sd_mmc_test_unit_ready+0x18>
    1208:	2802      	cmp	r0, #2
    120a:	d010      	beq.n	122e <sd_mmc_test_unit_ready+0x36>
	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
    120c:	2001      	movs	r0, #1
	}
}
    120e:	bd10      	pop	{r4, pc}
		if (sd_mmc_ejected[slot]) {
    1210:	4b0b      	ldr	r3, [pc, #44]	; (1240 <sd_mmc_test_unit_ready+0x48>)
    1212:	5d1b      	ldrb	r3, [r3, r4]
			return CTRL_NO_PRESENT;
    1214:	2002      	movs	r0, #2
		if (sd_mmc_ejected[slot]) {
    1216:	2b00      	cmp	r3, #0
    1218:	d1f9      	bne.n	120e <sd_mmc_test_unit_ready+0x16>
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
    121a:	0020      	movs	r0, r4
    121c:	4b09      	ldr	r3, [pc, #36]	; (1244 <sd_mmc_test_unit_ready+0x4c>)
    121e:	4798      	blx	r3
    1220:	0003      	movs	r3, r0
    1222:	2003      	movs	r0, #3
    1224:	4018      	ands	r0, r3
		return CTRL_NO_PRESENT;
    1226:	4243      	negs	r3, r0
    1228:	4158      	adcs	r0, r3
    122a:	0040      	lsls	r0, r0, #1
    122c:	e7ef      	b.n	120e <sd_mmc_test_unit_ready+0x16>
		sd_mmc_ejected[slot] = false;
    122e:	2200      	movs	r2, #0
    1230:	4b03      	ldr	r3, [pc, #12]	; (1240 <sd_mmc_test_unit_ready+0x48>)
    1232:	551a      	strb	r2, [r3, r4]
		return CTRL_NO_PRESENT;
    1234:	2002      	movs	r0, #2
    1236:	e7ea      	b.n	120e <sd_mmc_test_unit_ready+0x16>
		return CTRL_BUSY;
    1238:	2003      	movs	r0, #3
    123a:	e7e8      	b.n	120e <sd_mmc_test_unit_ready+0x16>
    123c:	00000ae5 	.word	0x00000ae5
    1240:	20000100 	.word	0x20000100
    1244:	00000f95 	.word	0x00000f95

00001248 <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
    1248:	b510      	push	{r4, lr}
	return sd_mmc_test_unit_ready(0);
    124a:	2000      	movs	r0, #0
    124c:	4b01      	ldr	r3, [pc, #4]	; (1254 <sd_mmc_test_unit_ready_0+0xc>)
    124e:	4798      	blx	r3
}
    1250:	bd10      	pop	{r4, pc}
    1252:	46c0      	nop			; (mov r8, r8)
    1254:	000011f9 	.word	0x000011f9

00001258 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
    1258:	b570      	push	{r4, r5, r6, lr}
    125a:	0004      	movs	r4, r0
    125c:	000d      	movs	r5, r1
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
    125e:	4b04      	ldr	r3, [pc, #16]	; (1270 <sd_mmc_read_capacity+0x18>)
    1260:	4798      	blx	r3
    1262:	0040      	lsls	r0, r0, #1
    1264:	3801      	subs	r0, #1
    1266:	6028      	str	r0, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
    1268:	0020      	movs	r0, r4
    126a:	4b02      	ldr	r3, [pc, #8]	; (1274 <sd_mmc_read_capacity+0x1c>)
    126c:	4798      	blx	r3
}
    126e:	bd70      	pop	{r4, r5, r6, pc}
    1270:	00000fbd 	.word	0x00000fbd
    1274:	000011f9 	.word	0x000011f9

00001278 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
    1278:	b510      	push	{r4, lr}
    127a:	0001      	movs	r1, r0
	return sd_mmc_read_capacity(0, nb_sector);
    127c:	2000      	movs	r0, #0
    127e:	4b01      	ldr	r3, [pc, #4]	; (1284 <sd_mmc_read_capacity_0+0xc>)
    1280:	4798      	blx	r3
}
    1282:	bd10      	pop	{r4, pc}
    1284:	00001259 	.word	0x00001259

00001288 <sd_mmc_wr_protect_0>:
{
	return sd_mmc_is_write_protected(slot);
}

bool sd_mmc_wr_protect_0(void)
{
    1288:	b510      	push	{r4, lr}
	return sd_mmc_is_write_protected(slot);
    128a:	2000      	movs	r0, #0
    128c:	4b01      	ldr	r3, [pc, #4]	; (1294 <sd_mmc_wr_protect_0+0xc>)
    128e:	4798      	blx	r3
	return sd_mmc_wr_protect(0);
}
    1290:	bd10      	pop	{r4, pc}
    1292:	46c0      	nop			; (mov r8, r8)
    1294:	00000fe5 	.word	0x00000fe5

00001298 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
    1298:	b510      	push	{r4, lr}
    129a:	0014      	movs	r4, r2
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
    129c:	2201      	movs	r2, #1
    129e:	4b0c      	ldr	r3, [pc, #48]	; (12d0 <sd_mmc_mem_2_ram+0x38>)
    12a0:	4798      	blx	r3
    12a2:	2800      	cmp	r0, #0
    12a4:	d004      	beq.n	12b0 <sd_mmc_mem_2_ram+0x18>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
    12a6:	3802      	subs	r0, #2
    12a8:	4243      	negs	r3, r0
    12aa:	4158      	adcs	r0, r3
    12ac:	3001      	adds	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
    12ae:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
    12b0:	2101      	movs	r1, #1
    12b2:	0020      	movs	r0, r4
    12b4:	4b07      	ldr	r3, [pc, #28]	; (12d4 <sd_mmc_mem_2_ram+0x3c>)
    12b6:	4798      	blx	r3
    12b8:	0003      	movs	r3, r0
		return CTRL_FAIL;
    12ba:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
    12bc:	2b00      	cmp	r3, #0
    12be:	d1f6      	bne.n	12ae <sd_mmc_mem_2_ram+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
    12c0:	2000      	movs	r0, #0
    12c2:	4b05      	ldr	r3, [pc, #20]	; (12d8 <sd_mmc_mem_2_ram+0x40>)
    12c4:	4798      	blx	r3
    12c6:	1e43      	subs	r3, r0, #1
    12c8:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
    12ca:	b2c0      	uxtb	r0, r0
    12cc:	e7ef      	b.n	12ae <sd_mmc_mem_2_ram+0x16>
    12ce:	46c0      	nop			; (mov r8, r8)
    12d0:	00000fe9 	.word	0x00000fe9
    12d4:	00001071 	.word	0x00001071
    12d8:	0000109d 	.word	0x0000109d

000012dc <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
    12dc:	b510      	push	{r4, lr}
    12de:	000a      	movs	r2, r1
	return sd_mmc_mem_2_ram(0, addr, ram);
    12e0:	0001      	movs	r1, r0
    12e2:	2000      	movs	r0, #0
    12e4:	4b01      	ldr	r3, [pc, #4]	; (12ec <sd_mmc_mem_2_ram_0+0x10>)
    12e6:	4798      	blx	r3
}
    12e8:	bd10      	pop	{r4, pc}
    12ea:	46c0      	nop			; (mov r8, r8)
    12ec:	00001299 	.word	0x00001299

000012f0 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
    12f0:	b510      	push	{r4, lr}
    12f2:	0014      	movs	r4, r2
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
    12f4:	2201      	movs	r2, #1
    12f6:	4b0c      	ldr	r3, [pc, #48]	; (1328 <sd_mmc_ram_2_mem+0x38>)
    12f8:	4798      	blx	r3
    12fa:	2800      	cmp	r0, #0
    12fc:	d004      	beq.n	1308 <sd_mmc_ram_2_mem+0x18>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
    12fe:	3802      	subs	r0, #2
    1300:	4243      	negs	r3, r0
    1302:	4158      	adcs	r0, r3
    1304:	3001      	adds	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
    1306:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
    1308:	2101      	movs	r1, #1
    130a:	0020      	movs	r0, r4
    130c:	4b07      	ldr	r3, [pc, #28]	; (132c <sd_mmc_ram_2_mem+0x3c>)
    130e:	4798      	blx	r3
    1310:	0003      	movs	r3, r0
		return CTRL_FAIL;
    1312:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
    1314:	2b00      	cmp	r3, #0
    1316:	d1f6      	bne.n	1306 <sd_mmc_ram_2_mem+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
    1318:	2000      	movs	r0, #0
    131a:	4b05      	ldr	r3, [pc, #20]	; (1330 <sd_mmc_ram_2_mem+0x40>)
    131c:	4798      	blx	r3
    131e:	1e43      	subs	r3, r0, #1
    1320:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
    1322:	b2c0      	uxtb	r0, r0
    1324:	e7ef      	b.n	1306 <sd_mmc_ram_2_mem+0x16>
    1326:	46c0      	nop			; (mov r8, r8)
    1328:	0000110d 	.word	0x0000110d
    132c:	0000117d 	.word	0x0000117d
    1330:	000011a9 	.word	0x000011a9

00001334 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
    1334:	b510      	push	{r4, lr}
    1336:	000a      	movs	r2, r1
	return sd_mmc_ram_2_mem(0, addr, ram);
    1338:	0001      	movs	r1, r0
    133a:	2000      	movs	r0, #0
    133c:	4b01      	ldr	r3, [pc, #4]	; (1344 <sd_mmc_ram_2_mem_0+0x10>)
    133e:	4798      	blx	r3
}
    1340:	bd10      	pop	{r4, pc}
    1342:	46c0      	nop			; (mov r8, r8)
    1344:	000012f1 	.word	0x000012f1

00001348 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
    1348:	b500      	push	{lr}
    134a:	b083      	sub	sp, #12
	uint8_t dummy = 0xFF;
    134c:	466b      	mov	r3, sp
    134e:	1dd9      	adds	r1, r3, #7
    1350:	23ff      	movs	r3, #255	; 0xff
    1352:	700b      	strb	r3, [r1, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
    1354:	2201      	movs	r2, #1
    1356:	480b      	ldr	r0, [pc, #44]	; (1384 <sd_mmc_spi_start_write_block+0x3c>)
    1358:	4b0b      	ldr	r3, [pc, #44]	; (1388 <sd_mmc_spi_start_write_block+0x40>)
    135a:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
    135c:	4b0b      	ldr	r3, [pc, #44]	; (138c <sd_mmc_spi_start_write_block+0x44>)
    135e:	881b      	ldrh	r3, [r3, #0]
    1360:	2b01      	cmp	r3, #1
    1362:	d00a      	beq.n	137a <sd_mmc_spi_start_write_block+0x32>
		token = SPI_TOKEN_SINGLE_WRITE;
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
    1364:	22fc      	movs	r2, #252	; 0xfc
    1366:	466b      	mov	r3, sp
    1368:	719a      	strb	r2, [r3, #6]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
    136a:	2201      	movs	r2, #1
    136c:	466b      	mov	r3, sp
    136e:	1d99      	adds	r1, r3, #6
    1370:	4804      	ldr	r0, [pc, #16]	; (1384 <sd_mmc_spi_start_write_block+0x3c>)
    1372:	4b05      	ldr	r3, [pc, #20]	; (1388 <sd_mmc_spi_start_write_block+0x40>)
    1374:	4798      	blx	r3
}
    1376:	b003      	add	sp, #12
    1378:	bd00      	pop	{pc}
		token = SPI_TOKEN_SINGLE_WRITE;
    137a:	22fe      	movs	r2, #254	; 0xfe
    137c:	466b      	mov	r3, sp
    137e:	719a      	strb	r2, [r3, #6]
    1380:	e7f3      	b.n	136a <sd_mmc_spi_start_write_block+0x22>
    1382:	46c0      	nop			; (mov r8, r8)
    1384:	20000104 	.word	0x20000104
    1388:	00002659 	.word	0x00002659
    138c:	20000148 	.word	0x20000148

00001390 <sd_mmc_spi_wait_busy>:
{
    1390:	b5f0      	push	{r4, r5, r6, r7, lr}
    1392:	b083      	sub	sp, #12
	uint8_t line = 0xFF;
    1394:	466b      	mov	r3, sp
    1396:	1ddc      	adds	r4, r3, #7
    1398:	23ff      	movs	r3, #255	; 0xff
    139a:	7023      	strb	r3, [r4, #0]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    139c:	4e12      	ldr	r6, [pc, #72]	; (13e8 <sd_mmc_spi_wait_busy+0x58>)
    139e:	2201      	movs	r2, #1
    13a0:	0021      	movs	r1, r4
    13a2:	0030      	movs	r0, r6
    13a4:	4d11      	ldr	r5, [pc, #68]	; (13ec <sd_mmc_spi_wait_busy+0x5c>)
    13a6:	47a8      	blx	r5
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    13a8:	23ff      	movs	r3, #255	; 0xff
    13aa:	2201      	movs	r2, #1
    13ac:	0021      	movs	r1, r4
    13ae:	0030      	movs	r0, r6
    13b0:	47a8      	blx	r5
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    13b2:	23ff      	movs	r3, #255	; 0xff
    13b4:	2201      	movs	r2, #1
    13b6:	0021      	movs	r1, r4
    13b8:	0030      	movs	r0, r6
    13ba:	47a8      	blx	r5
    13bc:	4c0c      	ldr	r4, [pc, #48]	; (13f0 <sd_mmc_spi_wait_busy+0x60>)
	} while (line != 0xFF);
    13be:	466b      	mov	r3, sp
    13c0:	1ddd      	adds	r5, r3, #7
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    13c2:	4e09      	ldr	r6, [pc, #36]	; (13e8 <sd_mmc_spi_wait_busy+0x58>)
    13c4:	4f09      	ldr	r7, [pc, #36]	; (13ec <sd_mmc_spi_wait_busy+0x5c>)
	} while (line != 0xFF);
    13c6:	782b      	ldrb	r3, [r5, #0]
    13c8:	2bff      	cmp	r3, #255	; 0xff
    13ca:	d009      	beq.n	13e0 <sd_mmc_spi_wait_busy+0x50>
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    13cc:	23ff      	movs	r3, #255	; 0xff
    13ce:	2201      	movs	r2, #1
    13d0:	0029      	movs	r1, r5
    13d2:	0030      	movs	r0, r6
    13d4:	47b8      	blx	r7
    13d6:	3c01      	subs	r4, #1
		if (!(nec_timeout--)) {
    13d8:	2c00      	cmp	r4, #0
    13da:	d1f4      	bne.n	13c6 <sd_mmc_spi_wait_busy+0x36>
			return false;
    13dc:	2000      	movs	r0, #0
    13de:	e000      	b.n	13e2 <sd_mmc_spi_wait_busy+0x52>
	return true;
    13e0:	2001      	movs	r0, #1
}
    13e2:	b003      	add	sp, #12
    13e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    13e6:	46c0      	nop			; (mov r8, r8)
    13e8:	20000104 	.word	0x20000104
    13ec:	00002491 	.word	0x00002491
    13f0:	00030d40 	.word	0x00030d40

000013f4 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
    13f4:	b570      	push	{r4, r5, r6, lr}
    13f6:	b082      	sub	sp, #8
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
    13f8:	4b14      	ldr	r3, [pc, #80]	; (144c <sd_mmc_spi_stop_multiwrite_block+0x58>)
    13fa:	881c      	ldrh	r4, [r3, #0]
    13fc:	2c01      	cmp	r4, #1
    13fe:	d023      	beq.n	1448 <sd_mmc_spi_stop_multiwrite_block+0x54>
		return true; // Single block write
	}
	if (sd_mmc_spi_nb_block >
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
    1400:	4b13      	ldr	r3, [pc, #76]	; (1450 <sd_mmc_spi_stop_multiwrite_block+0x5c>)
    1402:	8819      	ldrh	r1, [r3, #0]
    1404:	4b13      	ldr	r3, [pc, #76]	; (1454 <sd_mmc_spi_stop_multiwrite_block+0x60>)
    1406:	6818      	ldr	r0, [r3, #0]
    1408:	4b13      	ldr	r3, [pc, #76]	; (1458 <sd_mmc_spi_stop_multiwrite_block+0x64>)
    140a:	4798      	blx	r3
		return true; // It is not the End of multi write
    140c:	2301      	movs	r3, #1
	if (sd_mmc_spi_nb_block >
    140e:	4284      	cmp	r4, r0
    1410:	d902      	bls.n	1418 <sd_mmc_spi_stop_multiwrite_block+0x24>
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
	}
	return true;
}
    1412:	0018      	movs	r0, r3
    1414:	b002      	add	sp, #8
    1416:	bd70      	pop	{r4, r5, r6, pc}
	value = 0xFF;
    1418:	466b      	mov	r3, sp
    141a:	1ddc      	adds	r4, r3, #7
    141c:	23ff      	movs	r3, #255	; 0xff
    141e:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    1420:	4e0e      	ldr	r6, [pc, #56]	; (145c <sd_mmc_spi_stop_multiwrite_block+0x68>)
    1422:	2201      	movs	r2, #1
    1424:	0021      	movs	r1, r4
    1426:	0030      	movs	r0, r6
    1428:	4d0d      	ldr	r5, [pc, #52]	; (1460 <sd_mmc_spi_stop_multiwrite_block+0x6c>)
    142a:	47a8      	blx	r5
	value = SPI_TOKEN_STOP_TRAN;
    142c:	23fd      	movs	r3, #253	; 0xfd
    142e:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    1430:	2201      	movs	r2, #1
    1432:	0021      	movs	r1, r4
    1434:	0030      	movs	r0, r6
    1436:	47a8      	blx	r5
	if (!sd_mmc_spi_wait_busy()) {
    1438:	4b0a      	ldr	r3, [pc, #40]	; (1464 <sd_mmc_spi_stop_multiwrite_block+0x70>)
    143a:	4798      	blx	r3
    143c:	1e03      	subs	r3, r0, #0
    143e:	d1e8      	bne.n	1412 <sd_mmc_spi_stop_multiwrite_block+0x1e>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    1440:	2105      	movs	r1, #5
    1442:	4a09      	ldr	r2, [pc, #36]	; (1468 <sd_mmc_spi_stop_multiwrite_block+0x74>)
    1444:	7011      	strb	r1, [r2, #0]
		return false;
    1446:	e7e4      	b.n	1412 <sd_mmc_spi_stop_multiwrite_block+0x1e>
		return true; // Single block write
    1448:	2301      	movs	r3, #1
    144a:	e7e2      	b.n	1412 <sd_mmc_spi_stop_multiwrite_block+0x1e>
    144c:	20000148 	.word	0x20000148
    1450:	20000140 	.word	0x20000140
    1454:	20000150 	.word	0x20000150
    1458:	00005f31 	.word	0x00005f31
    145c:	20000104 	.word	0x20000104
    1460:	00002659 	.word	0x00002659
    1464:	00001391 	.word	0x00001391
    1468:	20000147 	.word	0x20000147

0000146c <sd_mmc_spi_start_read_block>:
{
    146c:	b5f0      	push	{r4, r5, r6, r7, lr}
    146e:	b083      	sub	sp, #12
	token = 0;
    1470:	2200      	movs	r2, #0
    1472:	466b      	mov	r3, sp
    1474:	71da      	strb	r2, [r3, #7]
    1476:	4c14      	ldr	r4, [pc, #80]	; (14c8 <sd_mmc_spi_start_read_block+0x5c>)
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
    1478:	466b      	mov	r3, sp
    147a:	1ddd      	adds	r5, r3, #7
    147c:	4e13      	ldr	r6, [pc, #76]	; (14cc <sd_mmc_spi_start_read_block+0x60>)
    147e:	4f14      	ldr	r7, [pc, #80]	; (14d0 <sd_mmc_spi_start_read_block+0x64>)
    1480:	23ff      	movs	r3, #255	; 0xff
    1482:	2201      	movs	r2, #1
    1484:	0029      	movs	r1, r5
    1486:	0030      	movs	r0, r6
    1488:	47b8      	blx	r7
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
    148a:	782b      	ldrb	r3, [r5, #0]
    148c:	220f      	movs	r2, #15
    148e:	0019      	movs	r1, r3
    1490:	4391      	bics	r1, r2
    1492:	1e0a      	subs	r2, r1, #0
    1494:	d009      	beq.n	14aa <sd_mmc_spi_start_read_block+0x3e>
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
    1496:	2bfe      	cmp	r3, #254	; 0xfe
    1498:	d013      	beq.n	14c2 <sd_mmc_spi_start_read_block+0x56>
    149a:	3c01      	subs	r4, #1
		if (i-- == 0) {
    149c:	2c00      	cmp	r4, #0
    149e:	d1ef      	bne.n	1480 <sd_mmc_spi_start_read_block+0x14>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
    14a0:	2204      	movs	r2, #4
    14a2:	4b0c      	ldr	r3, [pc, #48]	; (14d4 <sd_mmc_spi_start_read_block+0x68>)
    14a4:	701a      	strb	r2, [r3, #0]
			return false;
    14a6:	2000      	movs	r0, #0
    14a8:	e00c      	b.n	14c4 <sd_mmc_spi_start_read_block+0x58>
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
    14aa:	075b      	lsls	r3, r3, #29
    14ac:	d004      	beq.n	14b8 <sd_mmc_spi_start_read_block+0x4c>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
    14ae:	3207      	adds	r2, #7
    14b0:	4b08      	ldr	r3, [pc, #32]	; (14d4 <sd_mmc_spi_start_read_block+0x68>)
    14b2:	701a      	strb	r2, [r3, #0]
			return false;
    14b4:	2000      	movs	r0, #0
    14b6:	e005      	b.n	14c4 <sd_mmc_spi_start_read_block+0x58>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
    14b8:	220b      	movs	r2, #11
    14ba:	4b06      	ldr	r3, [pc, #24]	; (14d4 <sd_mmc_spi_start_read_block+0x68>)
    14bc:	701a      	strb	r2, [r3, #0]
			return false;
    14be:	2000      	movs	r0, #0
    14c0:	e000      	b.n	14c4 <sd_mmc_spi_start_read_block+0x58>
	return true;
    14c2:	2001      	movs	r0, #1
}
    14c4:	b003      	add	sp, #12
    14c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    14c8:	0007a120 	.word	0x0007a120
    14cc:	20000104 	.word	0x20000104
    14d0:	00002491 	.word	0x00002491
    14d4:	20000147 	.word	0x20000147

000014d8 <sd_mmc_spi_stop_write_block>:
{
    14d8:	b530      	push	{r4, r5, lr}
    14da:	b083      	sub	sp, #12
	crc = 0xFFFF; /// CRC is disabled in SPI mode
    14dc:	a901      	add	r1, sp, #4
    14de:	2301      	movs	r3, #1
    14e0:	425b      	negs	r3, r3
    14e2:	800b      	strh	r3, [r1, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
    14e4:	4d14      	ldr	r5, [pc, #80]	; (1538 <sd_mmc_spi_stop_write_block+0x60>)
    14e6:	2202      	movs	r2, #2
    14e8:	0028      	movs	r0, r5
    14ea:	4b14      	ldr	r3, [pc, #80]	; (153c <sd_mmc_spi_stop_write_block+0x64>)
    14ec:	4798      	blx	r3
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
    14ee:	466b      	mov	r3, sp
    14f0:	1ddc      	adds	r4, r3, #7
    14f2:	23ff      	movs	r3, #255	; 0xff
    14f4:	2201      	movs	r2, #1
    14f6:	0021      	movs	r1, r4
    14f8:	0028      	movs	r0, r5
    14fa:	4d11      	ldr	r5, [pc, #68]	; (1540 <sd_mmc_spi_stop_write_block+0x68>)
    14fc:	47a8      	blx	r5
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
    14fe:	7822      	ldrb	r2, [r4, #0]
    1500:	2311      	movs	r3, #17
    1502:	4013      	ands	r3, r2
    1504:	2b01      	cmp	r3, #1
    1506:	d005      	beq.n	1514 <sd_mmc_spi_stop_write_block+0x3c>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    1508:	2201      	movs	r2, #1
    150a:	4b0e      	ldr	r3, [pc, #56]	; (1544 <sd_mmc_spi_stop_write_block+0x6c>)
    150c:	701a      	strb	r2, [r3, #0]
		return false;
    150e:	2000      	movs	r0, #0
}
    1510:	b003      	add	sp, #12
    1512:	bd30      	pop	{r4, r5, pc}
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
    1514:	231e      	movs	r3, #30
    1516:	401a      	ands	r2, r3
    1518:	2a04      	cmp	r2, #4
    151a:	d00b      	beq.n	1534 <sd_mmc_spi_stop_write_block+0x5c>
    151c:	2a0a      	cmp	r2, #10
    151e:	d104      	bne.n	152a <sd_mmc_spi_stop_write_block+0x52>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
    1520:	3a02      	subs	r2, #2
    1522:	4b08      	ldr	r3, [pc, #32]	; (1544 <sd_mmc_spi_stop_write_block+0x6c>)
    1524:	701a      	strb	r2, [r3, #0]
		return false;
    1526:	2000      	movs	r0, #0
    1528:	e7f2      	b.n	1510 <sd_mmc_spi_stop_write_block+0x38>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
    152a:	220a      	movs	r2, #10
    152c:	4b05      	ldr	r3, [pc, #20]	; (1544 <sd_mmc_spi_stop_write_block+0x6c>)
    152e:	701a      	strb	r2, [r3, #0]
		return false;
    1530:	2000      	movs	r0, #0
    1532:	e7ed      	b.n	1510 <sd_mmc_spi_stop_write_block+0x38>
	return true;
    1534:	2001      	movs	r0, #1
    1536:	e7eb      	b.n	1510 <sd_mmc_spi_stop_write_block+0x38>
    1538:	20000104 	.word	0x20000104
    153c:	00002659 	.word	0x00002659
    1540:	00002491 	.word	0x00002491
    1544:	20000147 	.word	0x20000147

00001548 <sd_mmc_deinit>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_deinit(void)
{
    1548:	b510      	push	{r4, lr}
	spi_reset(&sd_mmc_master);
    154a:	4802      	ldr	r0, [pc, #8]	; (1554 <sd_mmc_deinit+0xc>)
    154c:	4b02      	ldr	r3, [pc, #8]	; (1558 <sd_mmc_deinit+0x10>)
    154e:	4798      	blx	r3
}
    1550:	bd10      	pop	{r4, pc}
    1552:	46c0      	nop			; (mov r8, r8)
    1554:	20000104 	.word	0x20000104
    1558:	000021b5 	.word	0x000021b5

0000155c <sd_mmc_spi_init>:


void sd_mmc_spi_init(void)
{
    155c:	b570      	push	{r4, r5, r6, lr}
    155e:	b090      	sub	sp, #64	; 0x40
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    1560:	2300      	movs	r3, #0
    1562:	4a2d      	ldr	r2, [pc, #180]	; (1618 <sd_mmc_spi_init+0xbc>)
    1564:	7013      	strb	r3, [r2, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    1566:	ac02      	add	r4, sp, #8
    1568:	2501      	movs	r5, #1
    156a:	7025      	strb	r5, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    156c:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    156e:	9304      	str	r3, [sp, #16]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    1570:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    1572:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    1574:	74a5      	strb	r5, [r4, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    1576:	74e5      	strb	r5, [r4, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    1578:	7523      	strb	r3, [r4, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    157a:	2224      	movs	r2, #36	; 0x24
    157c:	54a3      	strb	r3, [r4, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    157e:	3a18      	subs	r2, #24
    1580:	2100      	movs	r1, #0
    1582:	a808      	add	r0, sp, #32
    1584:	4b25      	ldr	r3, [pc, #148]	; (161c <sd_mmc_spi_init+0xc0>)
    1586:	4798      	blx	r3

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
    1588:	2380      	movs	r3, #128	; 0x80
    158a:	025b      	lsls	r3, r3, #9
    158c:	60e3      	str	r3, [r4, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
    158e:	4b24      	ldr	r3, [pc, #144]	; (1620 <sd_mmc_spi_init+0xc4>)
    1590:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
    1592:	4b24      	ldr	r3, [pc, #144]	; (1624 <sd_mmc_spi_init+0xc8>)
    1594:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
    1596:	4b24      	ldr	r3, [pc, #144]	; (1628 <sd_mmc_spi_init+0xcc>)
    1598:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
    159a:	4b24      	ldr	r3, [pc, #144]	; (162c <sd_mmc_spi_init+0xd0>)
    159c:	6363      	str	r3, [r4, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
    159e:	4b24      	ldr	r3, [pc, #144]	; (1630 <sd_mmc_spi_init+0xd4>)
    15a0:	61a3      	str	r3, [r4, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
    15a2:	4e24      	ldr	r6, [pc, #144]	; (1634 <sd_mmc_spi_init+0xd8>)
    15a4:	0022      	movs	r2, r4
    15a6:	4924      	ldr	r1, [pc, #144]	; (1638 <sd_mmc_spi_init+0xdc>)
    15a8:	0030      	movs	r0, r6
    15aa:	4b24      	ldr	r3, [pc, #144]	; (163c <sd_mmc_spi_init+0xe0>)
    15ac:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    15ae:	6834      	ldr	r4, [r6, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    15b0:	0020      	movs	r0, r4
    15b2:	4b23      	ldr	r3, [pc, #140]	; (1640 <sd_mmc_spi_init+0xe4>)
    15b4:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    15b6:	231f      	movs	r3, #31
    15b8:	4018      	ands	r0, r3
    15ba:	4085      	lsls	r5, r0
    15bc:	4b21      	ldr	r3, [pc, #132]	; (1644 <sd_mmc_spi_init+0xe8>)
    15be:	601d      	str	r5, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    15c0:	6832      	ldr	r2, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
    15c2:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
    15c4:	2b00      	cmp	r3, #0
    15c6:	d1fc      	bne.n	15c2 <sd_mmc_spi_init+0x66>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    15c8:	6823      	ldr	r3, [r4, #0]
    15ca:	2202      	movs	r2, #2
    15cc:	4313      	orrs	r3, r2
    15ce:	6023      	str	r3, [r4, #0]
	config->address_enabled = false;
    15d0:	4a1d      	ldr	r2, [pc, #116]	; (1648 <sd_mmc_spi_init+0xec>)
    15d2:	2300      	movs	r3, #0
    15d4:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    15d6:	7093      	strb	r3, [r2, #2]
	spi_enable(&sd_mmc_master);

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
	slave_configs[0].ss_pin = ss_pins[0];
    15d8:	491c      	ldr	r1, [pc, #112]	; (164c <sd_mmc_spi_init+0xf0>)
    15da:	7808      	ldrb	r0, [r1, #0]
    15dc:	7010      	strb	r0, [r2, #0]
	slave->ss_pin          = config->ss_pin;
    15de:	4c1c      	ldr	r4, [pc, #112]	; (1650 <sd_mmc_spi_init+0xf4>)
    15e0:	7020      	strb	r0, [r4, #0]
	slave->address_enabled = config->address_enabled;
    15e2:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    15e4:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    15e6:	a901      	add	r1, sp, #4
    15e8:	2201      	movs	r2, #1
    15ea:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    15ec:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    15ee:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    15f0:	4b18      	ldr	r3, [pc, #96]	; (1654 <sd_mmc_spi_init+0xf8>)
    15f2:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    15f4:	7822      	ldrb	r2, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    15f6:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    15f8:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    15fa:	2900      	cmp	r1, #0
    15fc:	d104      	bne.n	1608 <sd_mmc_spi_init+0xac>
		return &(ports[port_index]->Group[group_index]);
    15fe:	0953      	lsrs	r3, r2, #5
    1600:	01db      	lsls	r3, r3, #7
    1602:	4915      	ldr	r1, [pc, #84]	; (1658 <sd_mmc_spi_init+0xfc>)
    1604:	468c      	mov	ip, r1
    1606:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1608:	211f      	movs	r1, #31
    160a:	4011      	ands	r1, r2
    160c:	2201      	movs	r2, #1
    160e:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    1610:	619a      	str	r2, [r3, #24]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
}
    1612:	b010      	add	sp, #64	; 0x40
    1614:	bd70      	pop	{r4, r5, r6, pc}
    1616:	46c0      	nop			; (mov r8, r8)
    1618:	20000147 	.word	0x20000147
    161c:	000062cd 	.word	0x000062cd
    1620:	00100002 	.word	0x00100002
    1624:	00110002 	.word	0x00110002
    1628:	00120002 	.word	0x00120002
    162c:	00130002 	.word	0x00130002
    1630:	00061a80 	.word	0x00061a80
    1634:	20000104 	.word	0x20000104
    1638:	42000c00 	.word	0x42000c00
    163c:	000022b9 	.word	0x000022b9
    1640:	00002125 	.word	0x00002125
    1644:	e000e100 	.word	0xe000e100
    1648:	20000154 	.word	0x20000154
    164c:	20000008 	.word	0x20000008
    1650:	20000144 	.word	0x20000144
    1654:	00001b75 	.word	0x00001b75
    1658:	41004400 	.word	0x41004400

0000165c <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
    165c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    165e:	0007      	movs	r7, r0
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    1660:	2200      	movs	r2, #0
    1662:	4b0d      	ldr	r3, [pc, #52]	; (1698 <sd_mmc_spi_select_device+0x3c>)
    1664:	701a      	strb	r2, [r3, #0]
    1666:	000c      	movs	r4, r1
    1668:	4b0c      	ldr	r3, [pc, #48]	; (169c <sd_mmc_spi_select_device+0x40>)
    166a:	4299      	cmp	r1, r3
    166c:	d900      	bls.n	1670 <sd_mmc_spi_select_device+0x14>
    166e:	001c      	movs	r4, r3
#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
		clock = SD_MMC_SPI_MAX_CLOCK;
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    1670:	4d0b      	ldr	r5, [pc, #44]	; (16a0 <sd_mmc_spi_select_device+0x44>)
    1672:	4e0c      	ldr	r6, [pc, #48]	; (16a4 <sd_mmc_spi_select_device+0x48>)
    1674:	e001      	b.n	167a <sd_mmc_spi_select_device+0x1e>
		clock -= clock / 8;
    1676:	08e3      	lsrs	r3, r4, #3
    1678:	1ae4      	subs	r4, r4, r3
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    167a:	0021      	movs	r1, r4
    167c:	0028      	movs	r0, r5
    167e:	47b0      	blx	r6
    1680:	2817      	cmp	r0, #23
    1682:	d0f8      	beq.n	1676 <sd_mmc_spi_select_device+0x1a>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
    1684:	0079      	lsls	r1, r7, #1
    1686:	19cf      	adds	r7, r1, r7
    1688:	4907      	ldr	r1, [pc, #28]	; (16a8 <sd_mmc_spi_select_device+0x4c>)
    168a:	19c9      	adds	r1, r1, r7
    168c:	2201      	movs	r2, #1
    168e:	4804      	ldr	r0, [pc, #16]	; (16a0 <sd_mmc_spi_select_device+0x44>)
    1690:	4b06      	ldr	r3, [pc, #24]	; (16ac <sd_mmc_spi_select_device+0x50>)
    1692:	4798      	blx	r3
}
    1694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1696:	46c0      	nop			; (mov r8, r8)
    1698:	20000147 	.word	0x20000147
    169c:	00989680 	.word	0x00989680
    16a0:	20000104 	.word	0x20000104
    16a4:	00002201 	.word	0x00002201
    16a8:	20000144 	.word	0x20000144
    16ac:	00002565 	.word	0x00002565

000016b0 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
    16b0:	b510      	push	{r4, lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    16b2:	2200      	movs	r2, #0
    16b4:	4b04      	ldr	r3, [pc, #16]	; (16c8 <sd_mmc_spi_deselect_device+0x18>)
    16b6:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
    16b8:	0041      	lsls	r1, r0, #1
    16ba:	1808      	adds	r0, r1, r0
    16bc:	4903      	ldr	r1, [pc, #12]	; (16cc <sd_mmc_spi_deselect_device+0x1c>)
    16be:	1809      	adds	r1, r1, r0
    16c0:	4803      	ldr	r0, [pc, #12]	; (16d0 <sd_mmc_spi_deselect_device+0x20>)
    16c2:	4b04      	ldr	r3, [pc, #16]	; (16d4 <sd_mmc_spi_deselect_device+0x24>)
    16c4:	4798      	blx	r3
}
    16c6:	bd10      	pop	{r4, pc}
    16c8:	20000147 	.word	0x20000147
    16cc:	20000144 	.word	0x20000144
    16d0:	20000104 	.word	0x20000104
    16d4:	00002565 	.word	0x00002565

000016d8 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
    16d8:	b570      	push	{r4, r5, r6, lr}
    16da:	b082      	sub	sp, #8
	uint8_t i;
	uint8_t dummy = 0xFF;
    16dc:	22ff      	movs	r2, #255	; 0xff
    16de:	466b      	mov	r3, sp
    16e0:	71da      	strb	r2, [r3, #7]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    16e2:	2200      	movs	r2, #0
    16e4:	4b07      	ldr	r3, [pc, #28]	; (1704 <sd_mmc_spi_send_clock+0x2c>)
    16e6:	701a      	strb	r2, [r3, #0]
    16e8:	240a      	movs	r4, #10
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
    16ea:	4e07      	ldr	r6, [pc, #28]	; (1708 <sd_mmc_spi_send_clock+0x30>)
    16ec:	4d07      	ldr	r5, [pc, #28]	; (170c <sd_mmc_spi_send_clock+0x34>)
    16ee:	2201      	movs	r2, #1
    16f0:	466b      	mov	r3, sp
    16f2:	1dd9      	adds	r1, r3, #7
    16f4:	0030      	movs	r0, r6
    16f6:	47a8      	blx	r5
    16f8:	3c01      	subs	r4, #1
    16fa:	b2e4      	uxtb	r4, r4
	for (i = 0; i < 10; i++) {
    16fc:	2c00      	cmp	r4, #0
    16fe:	d1f6      	bne.n	16ee <sd_mmc_spi_send_clock+0x16>
	}
}
    1700:	b002      	add	sp, #8
    1702:	bd70      	pop	{r4, r5, r6, pc}
    1704:	20000147 	.word	0x20000147
    1708:	20000104 	.word	0x20000104
    170c:	00002659 	.word	0x00002659

00001710 <sd_mmc_spi_adtc_start>:
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
}

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
    1710:	b5f0      	push	{r4, r5, r6, r7, lr}
    1712:	46c6      	mov	lr, r8
    1714:	b500      	push	{lr}
    1716:	b086      	sub	sp, #24
    1718:	4680      	mov	r8, r0
    171a:	9200      	str	r2, [sp, #0]
    171c:	9301      	str	r3, [sp, #4]
	uint8_t dummy = 0xFF;
    171e:	22ff      	movs	r2, #255	; 0xff
    1720:	230f      	movs	r3, #15
    1722:	a802      	add	r0, sp, #8
    1724:	4684      	mov	ip, r0
    1726:	4463      	add	r3, ip
    1728:	701a      	strb	r2, [r3, #0]
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    172a:	2200      	movs	r2, #0
    172c:	4b53      	ldr	r3, [pc, #332]	; (187c <sd_mmc_spi_adtc_start+0x16c>)
    172e:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
    1730:	ab04      	add	r3, sp, #16
    1732:	323f      	adds	r2, #63	; 0x3f
    1734:	4640      	mov	r0, r8
    1736:	4002      	ands	r2, r0
    1738:	2040      	movs	r0, #64	; 0x40
    173a:	4302      	orrs	r2, r0
    173c:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
    173e:	0e0a      	lsrs	r2, r1, #24
    1740:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
    1742:	0c0a      	lsrs	r2, r1, #16
    1744:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
    1746:	0a0a      	lsrs	r2, r1, #8
    1748:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
    174a:	7119      	strb	r1, [r3, #4]
    174c:	2700      	movs	r7, #0
	crc = 0;
    174e:	2300      	movs	r3, #0
		value = *buf++;
    1750:	a904      	add	r1, sp, #16
    1752:	2208      	movs	r2, #8
				crc ^= 0x09;
    1754:	2409      	movs	r4, #9
    1756:	e011      	b.n	177c <sd_mmc_spi_adtc_start+0x6c>
			value <<= 1;
    1758:	0076      	lsls	r6, r6, #1
    175a:	b2f6      	uxtb	r6, r6
    175c:	3801      	subs	r0, #1
    175e:	b2c0      	uxtb	r0, r0
		for (i = 0; i < 8; i++) {
    1760:	2800      	cmp	r0, #0
    1762:	d008      	beq.n	1776 <sd_mmc_spi_adtc_start+0x66>
			crc <<= 1;
    1764:	005b      	lsls	r3, r3, #1
    1766:	b2db      	uxtb	r3, r3
			if ((value & 0x80) ^ (crc & 0x80)) {
    1768:	001d      	movs	r5, r3
    176a:	4075      	eors	r5, r6
    176c:	062d      	lsls	r5, r5, #24
    176e:	d5f3      	bpl.n	1758 <sd_mmc_spi_adtc_start+0x48>
				crc ^= 0x09;
    1770:	4063      	eors	r3, r4
    1772:	b2db      	uxtb	r3, r3
    1774:	e7f0      	b.n	1758 <sd_mmc_spi_adtc_start+0x48>
    1776:	3701      	adds	r7, #1
	while (size--) {
    1778:	2f05      	cmp	r7, #5
    177a:	d002      	beq.n	1782 <sd_mmc_spi_adtc_start+0x72>
		value = *buf++;
    177c:	5c7e      	ldrb	r6, [r7, r1]
    177e:	0010      	movs	r0, r2
    1780:	e7f0      	b.n	1764 <sd_mmc_spi_adtc_start+0x54>
	crc = (crc << 1) | 1;
    1782:	005b      	lsls	r3, r3, #1
    1784:	2201      	movs	r2, #1
    1786:	4313      	orrs	r3, r2
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
    1788:	ac04      	add	r4, sp, #16
    178a:	7163      	strb	r3, [r4, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
    178c:	4e3c      	ldr	r6, [pc, #240]	; (1880 <sd_mmc_spi_adtc_start+0x170>)
    178e:	2201      	movs	r2, #1
    1790:	210f      	movs	r1, #15
    1792:	ab02      	add	r3, sp, #8
    1794:	469c      	mov	ip, r3
    1796:	4461      	add	r1, ip
    1798:	0030      	movs	r0, r6
    179a:	4f3a      	ldr	r7, [pc, #232]	; (1884 <sd_mmc_spi_adtc_start+0x174>)
    179c:	47b8      	blx	r7
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
    179e:	2206      	movs	r2, #6
    17a0:	0021      	movs	r1, r4
    17a2:	0030      	movs	r0, r6
    17a4:	47b8      	blx	r7

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
    17a6:	ab02      	add	r3, sp, #8
    17a8:	1dd9      	adds	r1, r3, #7
    17aa:	23ff      	movs	r3, #255	; 0xff
    17ac:	700b      	strb	r3, [r1, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    17ae:	2201      	movs	r2, #1
    17b0:	0030      	movs	r0, r6
    17b2:	4e35      	ldr	r6, [pc, #212]	; (1888 <sd_mmc_spi_adtc_start+0x178>)
    17b4:	47b0      	blx	r6
    17b6:	2407      	movs	r4, #7
			dummy2);
	ncr_timeout = 7;
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    17b8:	ab02      	add	r3, sp, #8
    17ba:	1dde      	adds	r6, r3, #7
    17bc:	4f30      	ldr	r7, [pc, #192]	; (1880 <sd_mmc_spi_adtc_start+0x170>)
    17be:	4d32      	ldr	r5, [pc, #200]	; (1888 <sd_mmc_spi_adtc_start+0x178>)
    17c0:	23ff      	movs	r3, #255	; 0xff
    17c2:	2201      	movs	r2, #1
    17c4:	0031      	movs	r1, r6
    17c6:	0038      	movs	r0, r7
    17c8:	47a8      	blx	r5
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
    17ca:	7833      	ldrb	r3, [r6, #0]
    17cc:	b25a      	sxtb	r2, r3
    17ce:	2a00      	cmp	r2, #0
    17d0:	da0b      	bge.n	17ea <sd_mmc_spi_adtc_start+0xda>
    17d2:	3c01      	subs	r4, #1
    17d4:	b2e4      	uxtb	r4, r4
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
    17d6:	2c00      	cmp	r4, #0
    17d8:	d1f2      	bne.n	17c0 <sd_mmc_spi_adtc_start+0xb0>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
    17da:	2202      	movs	r2, #2
    17dc:	4b27      	ldr	r3, [pc, #156]	; (187c <sd_mmc_spi_adtc_start+0x16c>)
    17de:	701a      	strb	r2, [r3, #0]
			return false;
    17e0:	2000      	movs	r0, #0

	sd_mmc_spi_block_size = block_size;
	sd_mmc_spi_nb_block = nb_block;
	sd_mmc_spi_transfert_pos = 0;
	return true; // Command complete
}
    17e2:	b006      	add	sp, #24
    17e4:	bc04      	pop	{r2}
    17e6:	4690      	mov	r8, r2
    17e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_spi_response_32 = r1;
    17ea:	4a28      	ldr	r2, [pc, #160]	; (188c <sd_mmc_spi_adtc_start+0x17c>)
    17ec:	6013      	str	r3, [r2, #0]
	if (r1 & R1_SPI_COM_CRC) {
    17ee:	071a      	lsls	r2, r3, #28
    17f0:	d41a      	bmi.n	1828 <sd_mmc_spi_adtc_start+0x118>
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
    17f2:	075a      	lsls	r2, r3, #29
    17f4:	d41d      	bmi.n	1832 <sd_mmc_spi_adtc_start+0x122>
	if (r1 & ~R1_SPI_IDLE) {
    17f6:	2201      	movs	r2, #1
    17f8:	4393      	bics	r3, r2
    17fa:	d11f      	bne.n	183c <sd_mmc_spi_adtc_start+0x12c>
	if (cmd & SDMMC_RESP_BUSY) {
    17fc:	4643      	mov	r3, r8
    17fe:	049b      	lsls	r3, r3, #18
    1800:	d420      	bmi.n	1844 <sd_mmc_spi_adtc_start+0x134>
	if (cmd & SDMMC_RESP_8) {
    1802:	4643      	mov	r3, r8
    1804:	059b      	lsls	r3, r3, #22
    1806:	d425      	bmi.n	1854 <sd_mmc_spi_adtc_start+0x144>
	if (cmd & SDMMC_RESP_32) {
    1808:	4643      	mov	r3, r8
    180a:	055b      	lsls	r3, r3, #21
    180c:	d42b      	bmi.n	1866 <sd_mmc_spi_adtc_start+0x156>
	sd_mmc_spi_block_size = block_size;
    180e:	4b20      	ldr	r3, [pc, #128]	; (1890 <sd_mmc_spi_adtc_start+0x180>)
    1810:	466a      	mov	r2, sp
    1812:	8812      	ldrh	r2, [r2, #0]
    1814:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
    1816:	4b1f      	ldr	r3, [pc, #124]	; (1894 <sd_mmc_spi_adtc_start+0x184>)
    1818:	466a      	mov	r2, sp
    181a:	8892      	ldrh	r2, [r2, #4]
    181c:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
    181e:	2200      	movs	r2, #0
    1820:	4b1d      	ldr	r3, [pc, #116]	; (1898 <sd_mmc_spi_adtc_start+0x188>)
    1822:	601a      	str	r2, [r3, #0]
	return true; // Command complete
    1824:	2001      	movs	r0, #1
    1826:	e7dc      	b.n	17e2 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
    1828:	2206      	movs	r2, #6
    182a:	4b14      	ldr	r3, [pc, #80]	; (187c <sd_mmc_spi_adtc_start+0x16c>)
    182c:	701a      	strb	r2, [r3, #0]
		return false;
    182e:	2000      	movs	r0, #0
    1830:	e7d7      	b.n	17e2 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
    1832:	2209      	movs	r2, #9
    1834:	4b11      	ldr	r3, [pc, #68]	; (187c <sd_mmc_spi_adtc_start+0x16c>)
    1836:	701a      	strb	r2, [r3, #0]
		return false;
    1838:	2000      	movs	r0, #0
    183a:	e7d2      	b.n	17e2 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    183c:	4b0f      	ldr	r3, [pc, #60]	; (187c <sd_mmc_spi_adtc_start+0x16c>)
    183e:	701a      	strb	r2, [r3, #0]
		return false;
    1840:	2000      	movs	r0, #0
    1842:	e7ce      	b.n	17e2 <sd_mmc_spi_adtc_start+0xd2>
		if (!sd_mmc_spi_wait_busy()) {
    1844:	4b15      	ldr	r3, [pc, #84]	; (189c <sd_mmc_spi_adtc_start+0x18c>)
    1846:	4798      	blx	r3
    1848:	2800      	cmp	r0, #0
    184a:	d1da      	bne.n	1802 <sd_mmc_spi_adtc_start+0xf2>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
    184c:	2203      	movs	r2, #3
    184e:	4b0b      	ldr	r3, [pc, #44]	; (187c <sd_mmc_spi_adtc_start+0x16c>)
    1850:	701a      	strb	r2, [r3, #0]
			return false;
    1852:	e7c6      	b.n	17e2 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_response_32 = 0;
    1854:	490d      	ldr	r1, [pc, #52]	; (188c <sd_mmc_spi_adtc_start+0x17c>)
    1856:	2300      	movs	r3, #0
    1858:	600b      	str	r3, [r1, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
    185a:	33ff      	adds	r3, #255	; 0xff
    185c:	2201      	movs	r2, #1
    185e:	4808      	ldr	r0, [pc, #32]	; (1880 <sd_mmc_spi_adtc_start+0x170>)
    1860:	4e09      	ldr	r6, [pc, #36]	; (1888 <sd_mmc_spi_adtc_start+0x178>)
    1862:	47b0      	blx	r6
    1864:	e7d0      	b.n	1808 <sd_mmc_spi_adtc_start+0xf8>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
    1866:	4e09      	ldr	r6, [pc, #36]	; (188c <sd_mmc_spi_adtc_start+0x17c>)
    1868:	23ff      	movs	r3, #255	; 0xff
    186a:	2204      	movs	r2, #4
    186c:	0031      	movs	r1, r6
    186e:	4804      	ldr	r0, [pc, #16]	; (1880 <sd_mmc_spi_adtc_start+0x170>)
    1870:	4f05      	ldr	r7, [pc, #20]	; (1888 <sd_mmc_spi_adtc_start+0x178>)
    1872:	47b8      	blx	r7
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
    1874:	6833      	ldr	r3, [r6, #0]
    1876:	ba1b      	rev	r3, r3
    1878:	6033      	str	r3, [r6, #0]
    187a:	e7c8      	b.n	180e <sd_mmc_spi_adtc_start+0xfe>
    187c:	20000147 	.word	0x20000147
    1880:	20000104 	.word	0x20000104
    1884:	00002659 	.word	0x00002659
    1888:	00002491 	.word	0x00002491
    188c:	2000014c 	.word	0x2000014c
    1890:	20000140 	.word	0x20000140
    1894:	20000148 	.word	0x20000148
    1898:	20000150 	.word	0x20000150
    189c:	00001391 	.word	0x00001391

000018a0 <sd_mmc_spi_send_cmd>:
{
    18a0:	b510      	push	{r4, lr}
    18a2:	b082      	sub	sp, #8
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
    18a4:	2300      	movs	r3, #0
    18a6:	9300      	str	r3, [sp, #0]
    18a8:	2200      	movs	r2, #0
    18aa:	4c02      	ldr	r4, [pc, #8]	; (18b4 <sd_mmc_spi_send_cmd+0x14>)
    18ac:	47a0      	blx	r4
}
    18ae:	b002      	add	sp, #8
    18b0:	bd10      	pop	{r4, pc}
    18b2:	46c0      	nop			; (mov r8, r8)
    18b4:	00001711 	.word	0x00001711

000018b8 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
	return sd_mmc_spi_response_32;
    18b8:	4b01      	ldr	r3, [pc, #4]	; (18c0 <sd_mmc_spi_get_response+0x8>)
    18ba:	6818      	ldr	r0, [r3, #0]
}
    18bc:	4770      	bx	lr
    18be:	46c0      	nop			; (mov r8, r8)
    18c0:	2000014c 	.word	0x2000014c

000018c4 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
    18c4:	b510      	push	{r4, lr}
    18c6:	b084      	sub	sp, #16
    18c8:	9001      	str	r0, [sp, #4]
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    18ca:	2200      	movs	r2, #0
    18cc:	4b14      	ldr	r3, [pc, #80]	; (1920 <sd_mmc_spi_read_word+0x5c>)
    18ce:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    18d0:	4b14      	ldr	r3, [pc, #80]	; (1924 <sd_mmc_spi_read_word+0x60>)
    18d2:	8819      	ldrh	r1, [r3, #0]
    18d4:	4b14      	ldr	r3, [pc, #80]	; (1928 <sd_mmc_spi_read_word+0x64>)
    18d6:	6818      	ldr	r0, [r3, #0]
    18d8:	4b14      	ldr	r3, [pc, #80]	; (192c <sd_mmc_spi_read_word+0x68>)
    18da:	4798      	blx	r3
    18dc:	2900      	cmp	r1, #0
    18de:	d103      	bne.n	18e8 <sd_mmc_spi_read_word+0x24>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
    18e0:	4b13      	ldr	r3, [pc, #76]	; (1930 <sd_mmc_spi_read_word+0x6c>)
    18e2:	4798      	blx	r3
    18e4:	2800      	cmp	r0, #0
    18e6:	d010      	beq.n	190a <sd_mmc_spi_read_word+0x46>
			return false;
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
    18e8:	23ff      	movs	r3, #255	; 0xff
    18ea:	2204      	movs	r2, #4
    18ec:	a901      	add	r1, sp, #4
    18ee:	4811      	ldr	r0, [pc, #68]	; (1934 <sd_mmc_spi_read_word+0x70>)
    18f0:	4c11      	ldr	r4, [pc, #68]	; (1938 <sd_mmc_spi_read_word+0x74>)
    18f2:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
	sd_mmc_spi_transfert_pos += 4;
    18f4:	4b0c      	ldr	r3, [pc, #48]	; (1928 <sd_mmc_spi_read_word+0x64>)
    18f6:	681a      	ldr	r2, [r3, #0]
    18f8:	1d10      	adds	r0, r2, #4
    18fa:	6018      	str	r0, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    18fc:	4b09      	ldr	r3, [pc, #36]	; (1924 <sd_mmc_spi_read_word+0x60>)
    18fe:	8819      	ldrh	r1, [r3, #0]
    1900:	4b0a      	ldr	r3, [pc, #40]	; (192c <sd_mmc_spi_read_word+0x68>)
    1902:	4798      	blx	r3
		// End of block
		sd_mmc_spi_stop_read_block();
	}
	return true;
    1904:	2001      	movs	r0, #1
	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    1906:	2900      	cmp	r1, #0
    1908:	d001      	beq.n	190e <sd_mmc_spi_read_word+0x4a>
}
    190a:	b004      	add	sp, #16
    190c:	bd10      	pop	{r4, pc}
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    190e:	23ff      	movs	r3, #255	; 0xff
    1910:	2202      	movs	r2, #2
    1912:	a903      	add	r1, sp, #12
    1914:	4807      	ldr	r0, [pc, #28]	; (1934 <sd_mmc_spi_read_word+0x70>)
    1916:	4c08      	ldr	r4, [pc, #32]	; (1938 <sd_mmc_spi_read_word+0x74>)
    1918:	47a0      	blx	r4
	return true;
    191a:	2001      	movs	r0, #1
    191c:	e7f5      	b.n	190a <sd_mmc_spi_read_word+0x46>
    191e:	46c0      	nop			; (mov r8, r8)
    1920:	20000147 	.word	0x20000147
    1924:	20000140 	.word	0x20000140
    1928:	20000150 	.word	0x20000150
    192c:	0000603d 	.word	0x0000603d
    1930:	0000146d 	.word	0x0000146d
    1934:	20000104 	.word	0x20000104
    1938:	00002491 	.word	0x00002491

0000193c <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
    193c:	b5f0      	push	{r4, r5, r6, r7, lr}
    193e:	46de      	mov	lr, fp
    1940:	4657      	mov	r7, sl
    1942:	4646      	mov	r6, r8
    1944:	b5c0      	push	{r6, r7, lr}
    1946:	b082      	sub	sp, #8
    1948:	4683      	mov	fp, r0
	uint32_t pos;
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    194a:	2200      	movs	r2, #0
    194c:	4b17      	ldr	r3, [pc, #92]	; (19ac <sd_mmc_spi_start_read_blocks+0x70>)
    194e:	701a      	strb	r2, [r3, #0]
	pos = 0;
	while (nb_block--) {
    1950:	1e4c      	subs	r4, r1, #1
    1952:	b2a4      	uxth	r4, r4
    1954:	2900      	cmp	r1, #0
    1956:	d026      	beq.n	19a6 <sd_mmc_spi_start_read_blocks+0x6a>
    1958:	2600      	movs	r6, #0
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
    195a:	4b15      	ldr	r3, [pc, #84]	; (19b0 <sd_mmc_spi_start_read_blocks+0x74>)
    195c:	469a      	mov	sl, r3
			return false;
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    195e:	4f15      	ldr	r7, [pc, #84]	; (19b4 <sd_mmc_spi_start_read_blocks+0x78>)
		if (!sd_mmc_spi_start_read_block()) {
    1960:	47d0      	blx	sl
    1962:	4680      	mov	r8, r0
    1964:	2800      	cmp	r0, #0
    1966:	d017      	beq.n	1998 <sd_mmc_spi_start_read_blocks+0x5c>
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    1968:	883a      	ldrh	r2, [r7, #0]
    196a:	465b      	mov	r3, fp
    196c:	1999      	adds	r1, r3, r6
    196e:	23ff      	movs	r3, #255	; 0xff
    1970:	4811      	ldr	r0, [pc, #68]	; (19b8 <sd_mmc_spi_start_read_blocks+0x7c>)
    1972:	4d12      	ldr	r5, [pc, #72]	; (19bc <sd_mmc_spi_start_read_blocks+0x80>)
    1974:	47a8      	blx	r5
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
    1976:	883b      	ldrh	r3, [r7, #0]
    1978:	18f6      	adds	r6, r6, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    197a:	4a11      	ldr	r2, [pc, #68]	; (19c0 <sd_mmc_spi_start_read_blocks+0x84>)
    197c:	6811      	ldr	r1, [r2, #0]
    197e:	468c      	mov	ip, r1
    1980:	4463      	add	r3, ip
    1982:	6013      	str	r3, [r2, #0]
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    1984:	23ff      	movs	r3, #255	; 0xff
    1986:	2202      	movs	r2, #2
    1988:	a901      	add	r1, sp, #4
    198a:	480b      	ldr	r0, [pc, #44]	; (19b8 <sd_mmc_spi_start_read_blocks+0x7c>)
    198c:	47a8      	blx	r5
	while (nb_block--) {
    198e:	3c01      	subs	r4, #1
    1990:	b2a4      	uxth	r4, r4
    1992:	4b0c      	ldr	r3, [pc, #48]	; (19c4 <sd_mmc_spi_start_read_blocks+0x88>)
    1994:	429c      	cmp	r4, r3
    1996:	d1e3      	bne.n	1960 <sd_mmc_spi_start_read_blocks+0x24>

		sd_mmc_spi_stop_read_block();
	}
	return true;
}
    1998:	4640      	mov	r0, r8
    199a:	b002      	add	sp, #8
    199c:	bc1c      	pop	{r2, r3, r4}
    199e:	4690      	mov	r8, r2
    19a0:	469a      	mov	sl, r3
    19a2:	46a3      	mov	fp, r4
    19a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return true;
    19a6:	2301      	movs	r3, #1
    19a8:	4698      	mov	r8, r3
    19aa:	e7f5      	b.n	1998 <sd_mmc_spi_start_read_blocks+0x5c>
    19ac:	20000147 	.word	0x20000147
    19b0:	0000146d 	.word	0x0000146d
    19b4:	20000140 	.word	0x20000140
    19b8:	20000104 	.word	0x20000104
    19bc:	00002491 	.word	0x00002491
    19c0:	20000150 	.word	0x20000150
    19c4:	0000ffff 	.word	0x0000ffff

000019c8 <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
	return true;
}
    19c8:	2001      	movs	r0, #1
    19ca:	4770      	bx	lr

000019cc <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
    19cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    19ce:	46c6      	mov	lr, r8
    19d0:	b500      	push	{lr}
    19d2:	4680      	mov	r8, r0
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    19d4:	2200      	movs	r2, #0
    19d6:	4b15      	ldr	r3, [pc, #84]	; (1a2c <sd_mmc_spi_start_write_blocks+0x60>)
    19d8:	701a      	strb	r2, [r3, #0]
	pos = 0;
    19da:	2500      	movs	r5, #0
	while (nb_block--) {
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
    19dc:	4f14      	ldr	r7, [pc, #80]	; (1a30 <sd_mmc_spi_start_write_blocks+0x64>)

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    19de:	4e15      	ldr	r6, [pc, #84]	; (1a34 <sd_mmc_spi_start_write_blocks+0x68>)
	while (nb_block--) {
    19e0:	e000      	b.n	19e4 <sd_mmc_spi_start_write_blocks+0x18>
{
    19e2:	0021      	movs	r1, r4
	while (nb_block--) {
    19e4:	1e4c      	subs	r4, r1, #1
    19e6:	b2a4      	uxth	r4, r4
    19e8:	2900      	cmp	r1, #0
    19ea:	d01b      	beq.n	1a24 <sd_mmc_spi_start_write_blocks+0x58>
		sd_mmc_spi_start_write_block();
    19ec:	47b8      	blx	r7
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    19ee:	8832      	ldrh	r2, [r6, #0]
    19f0:	4643      	mov	r3, r8
    19f2:	1959      	adds	r1, r3, r5
    19f4:	4810      	ldr	r0, [pc, #64]	; (1a38 <sd_mmc_spi_start_write_blocks+0x6c>)
    19f6:	4b11      	ldr	r3, [pc, #68]	; (1a3c <sd_mmc_spi_start_write_blocks+0x70>)
    19f8:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
    19fa:	8833      	ldrh	r3, [r6, #0]
    19fc:	18ed      	adds	r5, r5, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    19fe:	4a10      	ldr	r2, [pc, #64]	; (1a40 <sd_mmc_spi_start_write_blocks+0x74>)
    1a00:	6811      	ldr	r1, [r2, #0]
    1a02:	468c      	mov	ip, r1
    1a04:	4463      	add	r3, ip
    1a06:	6013      	str	r3, [r2, #0]

		if (!sd_mmc_spi_stop_write_block()) {
    1a08:	4b0e      	ldr	r3, [pc, #56]	; (1a44 <sd_mmc_spi_start_write_blocks+0x78>)
    1a0a:	4798      	blx	r3
    1a0c:	2800      	cmp	r0, #0
    1a0e:	d00a      	beq.n	1a26 <sd_mmc_spi_start_write_blocks+0x5a>
			return false;
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
    1a10:	2c00      	cmp	r4, #0
    1a12:	d0e6      	beq.n	19e2 <sd_mmc_spi_start_write_blocks+0x16>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
    1a14:	4b0c      	ldr	r3, [pc, #48]	; (1a48 <sd_mmc_spi_start_write_blocks+0x7c>)
    1a16:	4798      	blx	r3
    1a18:	2800      	cmp	r0, #0
    1a1a:	d1e2      	bne.n	19e2 <sd_mmc_spi_start_write_blocks+0x16>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    1a1c:	2205      	movs	r2, #5
    1a1e:	4b03      	ldr	r3, [pc, #12]	; (1a2c <sd_mmc_spi_start_write_blocks+0x60>)
    1a20:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
    1a22:	e000      	b.n	1a26 <sd_mmc_spi_start_write_blocks+0x5a>
			}
		}
	}
	return true;
    1a24:	2001      	movs	r0, #1
}
    1a26:	bc04      	pop	{r2}
    1a28:	4690      	mov	r8, r2
    1a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1a2c:	20000147 	.word	0x20000147
    1a30:	00001349 	.word	0x00001349
    1a34:	20000140 	.word	0x20000140
    1a38:	20000104 	.word	0x20000104
    1a3c:	00002659 	.word	0x00002659
    1a40:	20000150 	.word	0x20000150
    1a44:	000014d9 	.word	0x000014d9
    1a48:	00001391 	.word	0x00001391

00001a4c <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
    1a4c:	b510      	push	{r4, lr}
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
    1a4e:	4b05      	ldr	r3, [pc, #20]	; (1a64 <sd_mmc_spi_wait_end_of_write_blocks+0x18>)
    1a50:	4798      	blx	r3
    1a52:	2800      	cmp	r0, #0
    1a54:	d103      	bne.n	1a5e <sd_mmc_spi_wait_end_of_write_blocks+0x12>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    1a56:	2205      	movs	r2, #5
    1a58:	4b03      	ldr	r3, [pc, #12]	; (1a68 <sd_mmc_spi_wait_end_of_write_blocks+0x1c>)
    1a5a:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
	}
	return sd_mmc_spi_stop_multiwrite_block();
}
    1a5c:	bd10      	pop	{r4, pc}
	return sd_mmc_spi_stop_multiwrite_block();
    1a5e:	4b03      	ldr	r3, [pc, #12]	; (1a6c <sd_mmc_spi_wait_end_of_write_blocks+0x20>)
    1a60:	4798      	blx	r3
    1a62:	e7fb      	b.n	1a5c <sd_mmc_spi_wait_end_of_write_blocks+0x10>
    1a64:	00001391 	.word	0x00001391
    1a68:	20000147 	.word	0x20000147
    1a6c:	000013f5 	.word	0x000013f5

00001a70 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
    1a70:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    1a72:	2301      	movs	r3, #1
    1a74:	2800      	cmp	r0, #0
    1a76:	d001      	beq.n	1a7c <mem_test_unit_ready+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    1a78:	0018      	movs	r0, r3
    1a7a:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    1a7c:	4b01      	ldr	r3, [pc, #4]	; (1a84 <mem_test_unit_ready+0x14>)
    1a7e:	4798      	blx	r3
    1a80:	0003      	movs	r3, r0
    1a82:	e7f9      	b.n	1a78 <mem_test_unit_ready+0x8>
    1a84:	00001249 	.word	0x00001249

00001a88 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
    1a88:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    1a8a:	2301      	movs	r3, #1
    1a8c:	2800      	cmp	r0, #0
    1a8e:	d001      	beq.n	1a94 <mem_read_capacity+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    1a90:	0018      	movs	r0, r3
    1a92:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    1a94:	0008      	movs	r0, r1
    1a96:	4b02      	ldr	r3, [pc, #8]	; (1aa0 <mem_read_capacity+0x18>)
    1a98:	4798      	blx	r3
    1a9a:	0003      	movs	r3, r0
    1a9c:	e7f8      	b.n	1a90 <mem_read_capacity+0x8>
    1a9e:	46c0      	nop			; (mov r8, r8)
    1aa0:	00001279 	.word	0x00001279

00001aa4 <mem_sector_size>:

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
    1aa4:	4243      	negs	r3, r0
    1aa6:	4158      	adcs	r0, r3
    1aa8:	b2c0      	uxtb	r0, r0
#endif

  Ctrl_access_unlock();

  return sector_size;
}
    1aaa:	4770      	bx	lr

00001aac <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
    1aac:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    1aae:	2301      	movs	r3, #1
    1ab0:	2800      	cmp	r0, #0
    1ab2:	d001      	beq.n	1ab8 <mem_wr_protect+0xc>
#endif

  Ctrl_access_unlock();

  return wr_protect;
}
    1ab4:	0018      	movs	r0, r3
    1ab6:	bd10      	pop	{r4, pc}
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    1ab8:	4b01      	ldr	r3, [pc, #4]	; (1ac0 <mem_wr_protect+0x14>)
    1aba:	4798      	blx	r3
    1abc:	0003      	movs	r3, r0
    1abe:	e7f9      	b.n	1ab4 <mem_wr_protect+0x8>
    1ac0:	00001289 	.word	0x00001289

00001ac4 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
    1ac4:	b510      	push	{r4, lr}
    1ac6:	000c      	movs	r4, r1
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    1ac8:	2301      	movs	r3, #1
    1aca:	2800      	cmp	r0, #0
    1acc:	d001      	beq.n	1ad2 <memory_2_ram+0xe>
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
}
    1ace:	0018      	movs	r0, r3
    1ad0:	bd10      	pop	{r4, pc}
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    1ad2:	0011      	movs	r1, r2
    1ad4:	0020      	movs	r0, r4
    1ad6:	4b02      	ldr	r3, [pc, #8]	; (1ae0 <memory_2_ram+0x1c>)
    1ad8:	4798      	blx	r3
    1ada:	0003      	movs	r3, r0
    1adc:	e7f7      	b.n	1ace <memory_2_ram+0xa>
    1ade:	46c0      	nop			; (mov r8, r8)
    1ae0:	000012dd 	.word	0x000012dd

00001ae4 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
    1ae4:	b510      	push	{r4, lr}
    1ae6:	000c      	movs	r4, r1
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    1ae8:	2301      	movs	r3, #1
    1aea:	2800      	cmp	r0, #0
    1aec:	d001      	beq.n	1af2 <ram_2_memory+0xe>
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
}
    1aee:	0018      	movs	r0, r3
    1af0:	bd10      	pop	{r4, pc}
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    1af2:	0011      	movs	r1, r2
    1af4:	0020      	movs	r0, r4
    1af6:	4b02      	ldr	r3, [pc, #8]	; (1b00 <ram_2_memory+0x1c>)
    1af8:	4798      	blx	r3
    1afa:	0003      	movs	r3, r0
    1afc:	e7f7      	b.n	1aee <ram_2_memory+0xa>
    1afe:	46c0      	nop			; (mov r8, r8)
    1b00:	00001335 	.word	0x00001335

00001b04 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    1b04:	4b0c      	ldr	r3, [pc, #48]	; (1b38 <cpu_irq_enter_critical+0x34>)
    1b06:	681b      	ldr	r3, [r3, #0]
    1b08:	2b00      	cmp	r3, #0
    1b0a:	d106      	bne.n	1b1a <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1b0c:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    1b10:	2b00      	cmp	r3, #0
    1b12:	d007      	beq.n	1b24 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1b14:	2200      	movs	r2, #0
    1b16:	4b09      	ldr	r3, [pc, #36]	; (1b3c <cpu_irq_enter_critical+0x38>)
    1b18:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    1b1a:	4a07      	ldr	r2, [pc, #28]	; (1b38 <cpu_irq_enter_critical+0x34>)
    1b1c:	6813      	ldr	r3, [r2, #0]
    1b1e:	3301      	adds	r3, #1
    1b20:	6013      	str	r3, [r2, #0]
}
    1b22:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    1b24:	b672      	cpsid	i
    1b26:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    1b2a:	2200      	movs	r2, #0
    1b2c:	4b04      	ldr	r3, [pc, #16]	; (1b40 <cpu_irq_enter_critical+0x3c>)
    1b2e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    1b30:	3201      	adds	r2, #1
    1b32:	4b02      	ldr	r3, [pc, #8]	; (1b3c <cpu_irq_enter_critical+0x38>)
    1b34:	701a      	strb	r2, [r3, #0]
    1b36:	e7f0      	b.n	1b1a <cpu_irq_enter_critical+0x16>
    1b38:	20000158 	.word	0x20000158
    1b3c:	2000015c 	.word	0x2000015c
    1b40:	20000009 	.word	0x20000009

00001b44 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1b44:	4b08      	ldr	r3, [pc, #32]	; (1b68 <cpu_irq_leave_critical+0x24>)
    1b46:	681a      	ldr	r2, [r3, #0]
    1b48:	3a01      	subs	r2, #1
    1b4a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1b4c:	681b      	ldr	r3, [r3, #0]
    1b4e:	2b00      	cmp	r3, #0
    1b50:	d109      	bne.n	1b66 <cpu_irq_leave_critical+0x22>
    1b52:	4b06      	ldr	r3, [pc, #24]	; (1b6c <cpu_irq_leave_critical+0x28>)
    1b54:	781b      	ldrb	r3, [r3, #0]
    1b56:	2b00      	cmp	r3, #0
    1b58:	d005      	beq.n	1b66 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    1b5a:	2201      	movs	r2, #1
    1b5c:	4b04      	ldr	r3, [pc, #16]	; (1b70 <cpu_irq_leave_critical+0x2c>)
    1b5e:	701a      	strb	r2, [r3, #0]
    1b60:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1b64:	b662      	cpsie	i
	}
}
    1b66:	4770      	bx	lr
    1b68:	20000158 	.word	0x20000158
    1b6c:	2000015c 	.word	0x2000015c
    1b70:	20000009 	.word	0x20000009

00001b74 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    1b74:	b500      	push	{lr}
    1b76:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1b78:	ab01      	add	r3, sp, #4
    1b7a:	2280      	movs	r2, #128	; 0x80
    1b7c:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    1b7e:	780a      	ldrb	r2, [r1, #0]
    1b80:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    1b82:	784a      	ldrb	r2, [r1, #1]
    1b84:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    1b86:	788a      	ldrb	r2, [r1, #2]
    1b88:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    1b8a:	0019      	movs	r1, r3
    1b8c:	4b01      	ldr	r3, [pc, #4]	; (1b94 <port_pin_set_config+0x20>)
    1b8e:	4798      	blx	r3
}
    1b90:	b003      	add	sp, #12
    1b92:	bd00      	pop	{pc}
    1b94:	0000369d 	.word	0x0000369d

00001b98 <rtc_calendar_enable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1b98:	6802      	ldr	r2, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    1b9a:	7a93      	ldrb	r3, [r2, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    1b9c:	b25b      	sxtb	r3, r3
    1b9e:	2b00      	cmp	r3, #0
    1ba0:	dbfb      	blt.n	1b9a <rtc_calendar_enable+0x2>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
    1ba2:	8813      	ldrh	r3, [r2, #0]
    1ba4:	2102      	movs	r1, #2
    1ba6:	430b      	orrs	r3, r1
    1ba8:	8013      	strh	r3, [r2, #0]
}
    1baa:	4770      	bx	lr

00001bac <rtc_calendar_disable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1bac:	6802      	ldr	r2, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    1bae:	7a93      	ldrb	r3, [r2, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    1bb0:	b25b      	sxtb	r3, r3
    1bb2:	2b00      	cmp	r3, #0
    1bb4:	dbfb      	blt.n	1bae <rtc_calendar_disable+0x2>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
    1bb6:	23c1      	movs	r3, #193	; 0xc1
    1bb8:	7193      	strb	r3, [r2, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
    1bba:	7213      	strb	r3, [r2, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
    1bbc:	8813      	ldrh	r3, [r2, #0]
    1bbe:	2102      	movs	r1, #2
    1bc0:	438b      	bics	r3, r1
    1bc2:	8013      	strh	r3, [r2, #0]
}
    1bc4:	4770      	bx	lr
	...

00001bc8 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
    1bc8:	b570      	push	{r4, r5, r6, lr}
    1bca:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1bcc:	6805      	ldr	r5, [r0, #0]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
    1bce:	4b06      	ldr	r3, [pc, #24]	; (1be8 <rtc_calendar_reset+0x20>)
    1bd0:	4798      	blx	r3
	Rtc *const rtc_module = module->hw;
    1bd2:	6822      	ldr	r2, [r4, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    1bd4:	7a93      	ldrb	r3, [r2, #10]
#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
	module->enabled_callback    = 0;
#endif

	while (rtc_calendar_is_syncing(module)) {
    1bd6:	b25b      	sxtb	r3, r3
    1bd8:	2b00      	cmp	r3, #0
    1bda:	dbfb      	blt.n	1bd4 <rtc_calendar_reset+0xc>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
    1bdc:	882b      	ldrh	r3, [r5, #0]
    1bde:	2201      	movs	r2, #1
    1be0:	4313      	orrs	r3, r2
    1be2:	802b      	strh	r3, [r5, #0]
}
    1be4:	bd70      	pop	{r4, r5, r6, pc}
    1be6:	46c0      	nop			; (mov r8, r8)
    1be8:	00001bad 	.word	0x00001bad

00001bec <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
    1bec:	b510      	push	{r4, lr}
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
    1bee:	88cb      	ldrh	r3, [r1, #6]
    1bf0:	88c2      	ldrh	r2, [r0, #6]
    1bf2:	1a9a      	subs	r2, r3, r2
    1bf4:	0692      	lsls	r2, r2, #26
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
    1bf6:	794b      	ldrb	r3, [r1, #5]
    1bf8:	059b      	lsls	r3, r3, #22

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
    1bfa:	790c      	ldrb	r4, [r1, #4]
    1bfc:	0464      	lsls	r4, r4, #17

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
    1bfe:	4323      	orrs	r3, r4
    1c00:	788c      	ldrb	r4, [r1, #2]
    1c02:	0324      	lsls	r4, r4, #12
    1c04:	4323      	orrs	r3, r4
    1c06:	4313      	orrs	r3, r2

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
    1c08:	7902      	ldrb	r2, [r0, #4]
    1c0a:	2a00      	cmp	r2, #0
    1c0c:	d105      	bne.n	1c1a <rtc_calendar_time_to_register_value+0x2e>
    1c0e:	78ca      	ldrb	r2, [r1, #3]
    1c10:	2a00      	cmp	r2, #0
    1c12:	d002      	beq.n	1c1a <rtc_calendar_time_to_register_value+0x2e>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
    1c14:	2280      	movs	r2, #128	; 0x80
    1c16:	0252      	lsls	r2, r2, #9
    1c18:	4313      	orrs	r3, r2
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
    1c1a:	7848      	ldrb	r0, [r1, #1]
    1c1c:	0180      	lsls	r0, r0, #6

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
    1c1e:	780a      	ldrb	r2, [r1, #0]
    1c20:	4310      	orrs	r0, r2
    1c22:	4318      	orrs	r0, r3

	return register_value;
}
    1c24:	bd10      	pop	{r4, pc}

00001c26 <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
    1c26:	b510      	push	{r4, lr}
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    1c28:	0e8b      	lsrs	r3, r1, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
    1c2a:	88c4      	ldrh	r4, [r0, #6]
    1c2c:	191b      	adds	r3, r3, r4
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    1c2e:	80d3      	strh	r3, [r2, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
    1c30:	018b      	lsls	r3, r1, #6
    1c32:	0f1b      	lsrs	r3, r3, #28
    1c34:	7153      	strb	r3, [r2, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
    1c36:	028b      	lsls	r3, r1, #10
    1c38:	0edb      	lsrs	r3, r3, #27
    1c3a:	7113      	strb	r3, [r2, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
    1c3c:	7903      	ldrb	r3, [r0, #4]
    1c3e:	2b00      	cmp	r3, #0
    1c40:	d10c      	bne.n	1c5c <rtc_calendar_register_value_to_time+0x36>
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
    1c42:	040b      	lsls	r3, r1, #16
    1c44:	0f1b      	lsrs	r3, r3, #28
		time->hour = ((register_value &
    1c46:	7093      	strb	r3, [r2, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
    1c48:	03cb      	lsls	r3, r1, #15
    1c4a:	0fdb      	lsrs	r3, r3, #31
    1c4c:	70d3      	strb	r3, [r2, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
    1c4e:	0988      	lsrs	r0, r1, #6
    1c50:	233f      	movs	r3, #63	; 0x3f
    1c52:	4018      	ands	r0, r3
    1c54:	7050      	strb	r0, [r2, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
    1c56:	4019      	ands	r1, r3
    1c58:	7011      	strb	r1, [r2, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
    1c5a:	bd10      	pop	{r4, pc}
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
    1c5c:	03cb      	lsls	r3, r1, #15
    1c5e:	0edb      	lsrs	r3, r3, #27
    1c60:	7093      	strb	r3, [r2, #2]
    1c62:	e7f4      	b.n	1c4e <rtc_calendar_register_value_to_time+0x28>

00001c64 <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
    1c64:	b510      	push	{r4, lr}
    1c66:	000a      	movs	r2, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1c68:	6803      	ldr	r3, [r0, #0]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
    1c6a:	7941      	ldrb	r1, [r0, #5]
    1c6c:	2900      	cmp	r1, #0
    1c6e:	d006      	beq.n	1c7e <rtc_calendar_get_time+0x1a>
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;

		while (rtc_calendar_is_syncing(module)) {
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
    1c70:	8859      	ldrh	r1, [r3, #2]
    1c72:	0449      	lsls	r1, r1, #17
    1c74:	d50b      	bpl.n	1c8e <rtc_calendar_get_time+0x2a>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
    1c76:	6919      	ldr	r1, [r3, #16]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
    1c78:	4b0a      	ldr	r3, [pc, #40]	; (1ca4 <rtc_calendar_get_time+0x40>)
    1c7a:	4798      	blx	r3
}
    1c7c:	bd10      	pop	{r4, pc}
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
    1c7e:	490a      	ldr	r1, [pc, #40]	; (1ca8 <rtc_calendar_get_time+0x44>)
    1c80:	8059      	strh	r1, [r3, #2]
	Rtc *const rtc_module = module->hw;
    1c82:	6804      	ldr	r4, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    1c84:	7aa1      	ldrb	r1, [r4, #10]
		while (rtc_calendar_is_syncing(module)) {
    1c86:	b249      	sxtb	r1, r1
    1c88:	2900      	cmp	r1, #0
    1c8a:	dbfb      	blt.n	1c84 <rtc_calendar_get_time+0x20>
    1c8c:	e7f3      	b.n	1c76 <rtc_calendar_get_time+0x12>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
    1c8e:	8859      	ldrh	r1, [r3, #2]
    1c90:	24c0      	movs	r4, #192	; 0xc0
    1c92:	0224      	lsls	r4, r4, #8
    1c94:	4321      	orrs	r1, r4
    1c96:	8059      	strh	r1, [r3, #2]
	Rtc *const rtc_module = module->hw;
    1c98:	6804      	ldr	r4, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    1c9a:	7aa1      	ldrb	r1, [r4, #10]
		while (rtc_calendar_is_syncing(module)) {
    1c9c:	b249      	sxtb	r1, r1
    1c9e:	2900      	cmp	r1, #0
    1ca0:	dbfb      	blt.n	1c9a <rtc_calendar_get_time+0x36>
    1ca2:	e7e8      	b.n	1c76 <rtc_calendar_get_time+0x12>
    1ca4:	00001c27 	.word	0x00001c27
    1ca8:	ffff8000 	.word	0xffff8000

00001cac <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
    1cac:	b570      	push	{r4, r5, r6, lr}
    1cae:	000d      	movs	r5, r1
    1cb0:	0014      	movs	r4, r2

	Rtc *const rtc_module = module->hw;

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
		return STATUS_ERR_INVALID_ARG;
    1cb2:	2317      	movs	r3, #23
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
    1cb4:	2a01      	cmp	r2, #1
    1cb6:	d901      	bls.n	1cbc <rtc_calendar_set_alarm+0x10>

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;

	return STATUS_OK;
}
    1cb8:	0018      	movs	r0, r3
    1cba:	bd70      	pop	{r4, r5, r6, pc}
	Rtc *const rtc_module = module->hw;
    1cbc:	6806      	ldr	r6, [r0, #0]
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
    1cbe:	4b06      	ldr	r3, [pc, #24]	; (1cd8 <rtc_calendar_set_alarm+0x2c>)
    1cc0:	4798      	blx	r3
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    1cc2:	7ab3      	ldrb	r3, [r6, #10]
	while (rtc_calendar_is_syncing(module)) {
    1cc4:	b25b      	sxtb	r3, r3
    1cc6:	2b00      	cmp	r3, #0
    1cc8:	dbfb      	blt.n	1cc2 <rtc_calendar_set_alarm+0x16>
    1cca:	00e4      	lsls	r4, r4, #3
    1ccc:	1934      	adds	r4, r6, r4
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
    1cce:	61a0      	str	r0, [r4, #24]
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
    1cd0:	7a2b      	ldrb	r3, [r5, #8]
    1cd2:	7723      	strb	r3, [r4, #28]
	return STATUS_OK;
    1cd4:	2300      	movs	r3, #0
    1cd6:	e7ef      	b.n	1cb8 <rtc_calendar_set_alarm+0xc>
    1cd8:	00001bed 	.word	0x00001bed

00001cdc <rtc_calendar_init>:
{
    1cdc:	b530      	push	{r4, r5, lr}
    1cde:	b083      	sub	sp, #12
    1ce0:	0005      	movs	r5, r0
    1ce2:	0014      	movs	r4, r2
	module->hw = hw;
    1ce4:	6001      	str	r1, [r0, #0]
			PM->APBAMASK.reg |= mask;
    1ce6:	4a1c      	ldr	r2, [pc, #112]	; (1d58 <rtc_calendar_init+0x7c>)
    1ce8:	6993      	ldr	r3, [r2, #24]
    1cea:	2120      	movs	r1, #32
    1cec:	430b      	orrs	r3, r1
    1cee:	6193      	str	r3, [r2, #24]
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
    1cf0:	a901      	add	r1, sp, #4
    1cf2:	2302      	movs	r3, #2
    1cf4:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
    1cf6:	2004      	movs	r0, #4
    1cf8:	4b18      	ldr	r3, [pc, #96]	; (1d5c <rtc_calendar_init+0x80>)
    1cfa:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
    1cfc:	2004      	movs	r0, #4
    1cfe:	4b18      	ldr	r3, [pc, #96]	; (1d60 <rtc_calendar_init+0x84>)
    1d00:	4798      	blx	r3
	rtc_calendar_reset(module);
    1d02:	0028      	movs	r0, r5
    1d04:	4b17      	ldr	r3, [pc, #92]	; (1d64 <rtc_calendar_init+0x88>)
    1d06:	4798      	blx	r3
	module->clock_24h           = config->clock_24h;
    1d08:	7923      	ldrb	r3, [r4, #4]
    1d0a:	712b      	strb	r3, [r5, #4]
	module->continuously_update = config->continuously_update;
    1d0c:	78e3      	ldrb	r3, [r4, #3]
    1d0e:	716b      	strb	r3, [r5, #5]
	module->year_init_value     = config->year_init_value;
    1d10:	88e3      	ldrh	r3, [r4, #6]
    1d12:	80eb      	strh	r3, [r5, #6]
	_rtc_instance[0] = module;
    1d14:	4b14      	ldr	r3, [pc, #80]	; (1d68 <rtc_calendar_init+0x8c>)
    1d16:	601d      	str	r5, [r3, #0]
	Rtc *const rtc_module = module->hw;
    1d18:	682a      	ldr	r2, [r5, #0]
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    1d1a:	8823      	ldrh	r3, [r4, #0]
	if (!(config->clock_24h)) {
    1d1c:	7921      	ldrb	r1, [r4, #4]
    1d1e:	2900      	cmp	r1, #0
    1d20:	d017      	beq.n	1d52 <rtc_calendar_init+0x76>
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    1d22:	2108      	movs	r1, #8
    1d24:	430b      	orrs	r3, r1
	if (config->clear_on_match) {
    1d26:	78a1      	ldrb	r1, [r4, #2]
    1d28:	2900      	cmp	r1, #0
    1d2a:	d001      	beq.n	1d30 <rtc_calendar_init+0x54>
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
    1d2c:	2180      	movs	r1, #128	; 0x80
    1d2e:	430b      	orrs	r3, r1
	rtc_module->MODE2.CTRL.reg = tmp_reg;
    1d30:	8013      	strh	r3, [r2, #0]
	if (config->continuously_update) {
    1d32:	78e3      	ldrb	r3, [r4, #3]
    1d34:	2b00      	cmp	r3, #0
    1d36:	d004      	beq.n	1d42 <rtc_calendar_init+0x66>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
    1d38:	8853      	ldrh	r3, [r2, #2]
    1d3a:	2180      	movs	r1, #128	; 0x80
    1d3c:	01c9      	lsls	r1, r1, #7
    1d3e:	430b      	orrs	r3, r1
    1d40:	8053      	strh	r3, [r2, #2]
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
    1d42:	0021      	movs	r1, r4
    1d44:	3108      	adds	r1, #8
    1d46:	2200      	movs	r2, #0
    1d48:	0028      	movs	r0, r5
    1d4a:	4b08      	ldr	r3, [pc, #32]	; (1d6c <rtc_calendar_init+0x90>)
    1d4c:	4798      	blx	r3
}
    1d4e:	b003      	add	sp, #12
    1d50:	bd30      	pop	{r4, r5, pc}
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
    1d52:	2148      	movs	r1, #72	; 0x48
    1d54:	430b      	orrs	r3, r1
    1d56:	e7e6      	b.n	1d26 <rtc_calendar_init+0x4a>
    1d58:	40000400 	.word	0x40000400
    1d5c:	000035a5 	.word	0x000035a5
    1d60:	00003519 	.word	0x00003519
    1d64:	00001bc9 	.word	0x00001bc9
    1d68:	20000a0c 	.word	0x20000a0c
    1d6c:	00001cad 	.word	0x00001cad

00001d70 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    1d70:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d72:	46de      	mov	lr, fp
    1d74:	4657      	mov	r7, sl
    1d76:	464e      	mov	r6, r9
    1d78:	4645      	mov	r5, r8
    1d7a:	b5e0      	push	{r5, r6, r7, lr}
    1d7c:	b087      	sub	sp, #28
    1d7e:	4680      	mov	r8, r0
    1d80:	9104      	str	r1, [sp, #16]
    1d82:	0016      	movs	r6, r2
    1d84:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    1d86:	2200      	movs	r2, #0
    1d88:	2300      	movs	r3, #0
    1d8a:	2100      	movs	r1, #0
    1d8c:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    1d8e:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    1d90:	2001      	movs	r0, #1
    1d92:	0021      	movs	r1, r4
    1d94:	9600      	str	r6, [sp, #0]
    1d96:	9701      	str	r7, [sp, #4]
    1d98:	465c      	mov	r4, fp
    1d9a:	9403      	str	r4, [sp, #12]
    1d9c:	4644      	mov	r4, r8
    1d9e:	9405      	str	r4, [sp, #20]
    1da0:	e013      	b.n	1dca <long_division+0x5a>
    1da2:	2420      	movs	r4, #32
    1da4:	1a64      	subs	r4, r4, r1
    1da6:	0005      	movs	r5, r0
    1da8:	40e5      	lsrs	r5, r4
    1daa:	46a8      	mov	r8, r5
    1dac:	e014      	b.n	1dd8 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    1dae:	9c00      	ldr	r4, [sp, #0]
    1db0:	9d01      	ldr	r5, [sp, #4]
    1db2:	1b12      	subs	r2, r2, r4
    1db4:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    1db6:	465c      	mov	r4, fp
    1db8:	464d      	mov	r5, r9
    1dba:	432c      	orrs	r4, r5
    1dbc:	46a3      	mov	fp, r4
    1dbe:	9c03      	ldr	r4, [sp, #12]
    1dc0:	4645      	mov	r5, r8
    1dc2:	432c      	orrs	r4, r5
    1dc4:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    1dc6:	3901      	subs	r1, #1
    1dc8:	d325      	bcc.n	1e16 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    1dca:	2420      	movs	r4, #32
    1dcc:	4264      	negs	r4, r4
    1dce:	190c      	adds	r4, r1, r4
    1dd0:	d4e7      	bmi.n	1da2 <long_division+0x32>
    1dd2:	0005      	movs	r5, r0
    1dd4:	40a5      	lsls	r5, r4
    1dd6:	46a8      	mov	r8, r5
    1dd8:	0004      	movs	r4, r0
    1dda:	408c      	lsls	r4, r1
    1ddc:	46a1      	mov	r9, r4
		r = r << 1;
    1dde:	1892      	adds	r2, r2, r2
    1de0:	415b      	adcs	r3, r3
    1de2:	0014      	movs	r4, r2
    1de4:	001d      	movs	r5, r3
		if (n & bit_shift) {
    1de6:	9e05      	ldr	r6, [sp, #20]
    1de8:	464f      	mov	r7, r9
    1dea:	403e      	ands	r6, r7
    1dec:	46b4      	mov	ip, r6
    1dee:	9e04      	ldr	r6, [sp, #16]
    1df0:	4647      	mov	r7, r8
    1df2:	403e      	ands	r6, r7
    1df4:	46b2      	mov	sl, r6
    1df6:	4666      	mov	r6, ip
    1df8:	4657      	mov	r7, sl
    1dfa:	433e      	orrs	r6, r7
    1dfc:	d003      	beq.n	1e06 <long_division+0x96>
			r |= 0x01;
    1dfe:	0006      	movs	r6, r0
    1e00:	4326      	orrs	r6, r4
    1e02:	0032      	movs	r2, r6
    1e04:	002b      	movs	r3, r5
		if (r >= d) {
    1e06:	9c00      	ldr	r4, [sp, #0]
    1e08:	9d01      	ldr	r5, [sp, #4]
    1e0a:	429d      	cmp	r5, r3
    1e0c:	d8db      	bhi.n	1dc6 <long_division+0x56>
    1e0e:	d1ce      	bne.n	1dae <long_division+0x3e>
    1e10:	4294      	cmp	r4, r2
    1e12:	d8d8      	bhi.n	1dc6 <long_division+0x56>
    1e14:	e7cb      	b.n	1dae <long_division+0x3e>
    1e16:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    1e18:	4658      	mov	r0, fp
    1e1a:	0019      	movs	r1, r3
    1e1c:	b007      	add	sp, #28
    1e1e:	bc3c      	pop	{r2, r3, r4, r5}
    1e20:	4690      	mov	r8, r2
    1e22:	4699      	mov	r9, r3
    1e24:	46a2      	mov	sl, r4
    1e26:	46ab      	mov	fp, r5
    1e28:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001e2a <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    1e2a:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    1e2c:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1e2e:	2340      	movs	r3, #64	; 0x40
    1e30:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    1e32:	4281      	cmp	r1, r0
    1e34:	d202      	bcs.n	1e3c <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    1e36:	0018      	movs	r0, r3
    1e38:	bd10      	pop	{r4, pc}
		baud_calculated++;
    1e3a:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    1e3c:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    1e3e:	1c63      	adds	r3, r4, #1
    1e40:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    1e42:	4288      	cmp	r0, r1
    1e44:	d9f9      	bls.n	1e3a <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1e46:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    1e48:	2cff      	cmp	r4, #255	; 0xff
    1e4a:	d8f4      	bhi.n	1e36 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    1e4c:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    1e4e:	2300      	movs	r3, #0
    1e50:	e7f1      	b.n	1e36 <_sercom_get_sync_baud_val+0xc>
	...

00001e54 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    1e54:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e56:	b083      	sub	sp, #12
    1e58:	000f      	movs	r7, r1
    1e5a:	0016      	movs	r6, r2
    1e5c:	aa08      	add	r2, sp, #32
    1e5e:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    1e60:	0004      	movs	r4, r0
    1e62:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1e64:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    1e66:	42bc      	cmp	r4, r7
    1e68:	d902      	bls.n	1e70 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    1e6a:	0010      	movs	r0, r2
    1e6c:	b003      	add	sp, #12
    1e6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    1e70:	2b00      	cmp	r3, #0
    1e72:	d114      	bne.n	1e9e <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    1e74:	0002      	movs	r2, r0
    1e76:	0008      	movs	r0, r1
    1e78:	2100      	movs	r1, #0
    1e7a:	4c19      	ldr	r4, [pc, #100]	; (1ee0 <_sercom_get_async_baud_val+0x8c>)
    1e7c:	47a0      	blx	r4
    1e7e:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    1e80:	003a      	movs	r2, r7
    1e82:	2300      	movs	r3, #0
    1e84:	2000      	movs	r0, #0
    1e86:	4c17      	ldr	r4, [pc, #92]	; (1ee4 <_sercom_get_async_baud_val+0x90>)
    1e88:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    1e8a:	2200      	movs	r2, #0
    1e8c:	2301      	movs	r3, #1
    1e8e:	1a12      	subs	r2, r2, r0
    1e90:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    1e92:	0c12      	lsrs	r2, r2, #16
    1e94:	041b      	lsls	r3, r3, #16
    1e96:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    1e98:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    1e9a:	2200      	movs	r2, #0
    1e9c:	e7e5      	b.n	1e6a <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    1e9e:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    1ea0:	2b01      	cmp	r3, #1
    1ea2:	d1f9      	bne.n	1e98 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    1ea4:	000a      	movs	r2, r1
    1ea6:	2300      	movs	r3, #0
    1ea8:	2100      	movs	r1, #0
    1eaa:	4c0d      	ldr	r4, [pc, #52]	; (1ee0 <_sercom_get_async_baud_val+0x8c>)
    1eac:	47a0      	blx	r4
    1eae:	0002      	movs	r2, r0
    1eb0:	000b      	movs	r3, r1
    1eb2:	9200      	str	r2, [sp, #0]
    1eb4:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    1eb6:	0038      	movs	r0, r7
    1eb8:	2100      	movs	r1, #0
    1eba:	4c0a      	ldr	r4, [pc, #40]	; (1ee4 <_sercom_get_async_baud_val+0x90>)
    1ebc:	47a0      	blx	r4
    1ebe:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    1ec0:	2380      	movs	r3, #128	; 0x80
    1ec2:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1ec4:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    1ec6:	4298      	cmp	r0, r3
    1ec8:	d8cf      	bhi.n	1e6a <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    1eca:	0f79      	lsrs	r1, r7, #29
    1ecc:	00f8      	lsls	r0, r7, #3
    1ece:	9a00      	ldr	r2, [sp, #0]
    1ed0:	9b01      	ldr	r3, [sp, #4]
    1ed2:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    1ed4:	00ea      	lsls	r2, r5, #3
    1ed6:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    1ed8:	b2d2      	uxtb	r2, r2
    1eda:	0352      	lsls	r2, r2, #13
    1edc:	432a      	orrs	r2, r5
    1ede:	e7db      	b.n	1e98 <_sercom_get_async_baud_val+0x44>
    1ee0:	0000621d 	.word	0x0000621d
    1ee4:	00001d71 	.word	0x00001d71

00001ee8 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    1ee8:	b510      	push	{r4, lr}
    1eea:	b082      	sub	sp, #8
    1eec:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    1eee:	4b0e      	ldr	r3, [pc, #56]	; (1f28 <sercom_set_gclk_generator+0x40>)
    1ef0:	781b      	ldrb	r3, [r3, #0]
    1ef2:	2b00      	cmp	r3, #0
    1ef4:	d007      	beq.n	1f06 <sercom_set_gclk_generator+0x1e>
    1ef6:	2900      	cmp	r1, #0
    1ef8:	d105      	bne.n	1f06 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    1efa:	4b0b      	ldr	r3, [pc, #44]	; (1f28 <sercom_set_gclk_generator+0x40>)
    1efc:	785b      	ldrb	r3, [r3, #1]
    1efe:	4283      	cmp	r3, r0
    1f00:	d010      	beq.n	1f24 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    1f02:	201d      	movs	r0, #29
    1f04:	e00c      	b.n	1f20 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    1f06:	a901      	add	r1, sp, #4
    1f08:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    1f0a:	2013      	movs	r0, #19
    1f0c:	4b07      	ldr	r3, [pc, #28]	; (1f2c <sercom_set_gclk_generator+0x44>)
    1f0e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    1f10:	2013      	movs	r0, #19
    1f12:	4b07      	ldr	r3, [pc, #28]	; (1f30 <sercom_set_gclk_generator+0x48>)
    1f14:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    1f16:	4b04      	ldr	r3, [pc, #16]	; (1f28 <sercom_set_gclk_generator+0x40>)
    1f18:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    1f1a:	2201      	movs	r2, #1
    1f1c:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    1f1e:	2000      	movs	r0, #0
}
    1f20:	b002      	add	sp, #8
    1f22:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    1f24:	2000      	movs	r0, #0
    1f26:	e7fb      	b.n	1f20 <sercom_set_gclk_generator+0x38>
    1f28:	20000160 	.word	0x20000160
    1f2c:	000035a5 	.word	0x000035a5
    1f30:	00003519 	.word	0x00003519

00001f34 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    1f34:	4b40      	ldr	r3, [pc, #256]	; (2038 <STACK_SIZE+0x38>)
    1f36:	4298      	cmp	r0, r3
    1f38:	d031      	beq.n	1f9e <_sercom_get_default_pad+0x6a>
    1f3a:	d90a      	bls.n	1f52 <_sercom_get_default_pad+0x1e>
    1f3c:	4b3f      	ldr	r3, [pc, #252]	; (203c <STACK_SIZE+0x3c>)
    1f3e:	4298      	cmp	r0, r3
    1f40:	d04d      	beq.n	1fde <_sercom_get_default_pad+0xaa>
    1f42:	4b3f      	ldr	r3, [pc, #252]	; (2040 <STACK_SIZE+0x40>)
    1f44:	4298      	cmp	r0, r3
    1f46:	d05a      	beq.n	1ffe <_sercom_get_default_pad+0xca>
    1f48:	4b3e      	ldr	r3, [pc, #248]	; (2044 <STACK_SIZE+0x44>)
    1f4a:	4298      	cmp	r0, r3
    1f4c:	d037      	beq.n	1fbe <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    1f4e:	2000      	movs	r0, #0
}
    1f50:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    1f52:	4b3d      	ldr	r3, [pc, #244]	; (2048 <STACK_SIZE+0x48>)
    1f54:	4298      	cmp	r0, r3
    1f56:	d00c      	beq.n	1f72 <_sercom_get_default_pad+0x3e>
    1f58:	4b3c      	ldr	r3, [pc, #240]	; (204c <STACK_SIZE+0x4c>)
    1f5a:	4298      	cmp	r0, r3
    1f5c:	d1f7      	bne.n	1f4e <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1f5e:	2901      	cmp	r1, #1
    1f60:	d017      	beq.n	1f92 <_sercom_get_default_pad+0x5e>
    1f62:	2900      	cmp	r1, #0
    1f64:	d05d      	beq.n	2022 <STACK_SIZE+0x22>
    1f66:	2902      	cmp	r1, #2
    1f68:	d015      	beq.n	1f96 <_sercom_get_default_pad+0x62>
    1f6a:	2903      	cmp	r1, #3
    1f6c:	d015      	beq.n	1f9a <_sercom_get_default_pad+0x66>
	return 0;
    1f6e:	2000      	movs	r0, #0
    1f70:	e7ee      	b.n	1f50 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1f72:	2901      	cmp	r1, #1
    1f74:	d007      	beq.n	1f86 <_sercom_get_default_pad+0x52>
    1f76:	2900      	cmp	r1, #0
    1f78:	d051      	beq.n	201e <STACK_SIZE+0x1e>
    1f7a:	2902      	cmp	r1, #2
    1f7c:	d005      	beq.n	1f8a <_sercom_get_default_pad+0x56>
    1f7e:	2903      	cmp	r1, #3
    1f80:	d005      	beq.n	1f8e <_sercom_get_default_pad+0x5a>
	return 0;
    1f82:	2000      	movs	r0, #0
    1f84:	e7e4      	b.n	1f50 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1f86:	4832      	ldr	r0, [pc, #200]	; (2050 <STACK_SIZE+0x50>)
    1f88:	e7e2      	b.n	1f50 <_sercom_get_default_pad+0x1c>
    1f8a:	4832      	ldr	r0, [pc, #200]	; (2054 <STACK_SIZE+0x54>)
    1f8c:	e7e0      	b.n	1f50 <_sercom_get_default_pad+0x1c>
    1f8e:	4832      	ldr	r0, [pc, #200]	; (2058 <STACK_SIZE+0x58>)
    1f90:	e7de      	b.n	1f50 <_sercom_get_default_pad+0x1c>
    1f92:	4832      	ldr	r0, [pc, #200]	; (205c <STACK_SIZE+0x5c>)
    1f94:	e7dc      	b.n	1f50 <_sercom_get_default_pad+0x1c>
    1f96:	4832      	ldr	r0, [pc, #200]	; (2060 <STACK_SIZE+0x60>)
    1f98:	e7da      	b.n	1f50 <_sercom_get_default_pad+0x1c>
    1f9a:	4832      	ldr	r0, [pc, #200]	; (2064 <STACK_SIZE+0x64>)
    1f9c:	e7d8      	b.n	1f50 <_sercom_get_default_pad+0x1c>
    1f9e:	2901      	cmp	r1, #1
    1fa0:	d007      	beq.n	1fb2 <_sercom_get_default_pad+0x7e>
    1fa2:	2900      	cmp	r1, #0
    1fa4:	d03f      	beq.n	2026 <STACK_SIZE+0x26>
    1fa6:	2902      	cmp	r1, #2
    1fa8:	d005      	beq.n	1fb6 <_sercom_get_default_pad+0x82>
    1faa:	2903      	cmp	r1, #3
    1fac:	d005      	beq.n	1fba <_sercom_get_default_pad+0x86>
	return 0;
    1fae:	2000      	movs	r0, #0
    1fb0:	e7ce      	b.n	1f50 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1fb2:	482d      	ldr	r0, [pc, #180]	; (2068 <STACK_SIZE+0x68>)
    1fb4:	e7cc      	b.n	1f50 <_sercom_get_default_pad+0x1c>
    1fb6:	482d      	ldr	r0, [pc, #180]	; (206c <STACK_SIZE+0x6c>)
    1fb8:	e7ca      	b.n	1f50 <_sercom_get_default_pad+0x1c>
    1fba:	482d      	ldr	r0, [pc, #180]	; (2070 <STACK_SIZE+0x70>)
    1fbc:	e7c8      	b.n	1f50 <_sercom_get_default_pad+0x1c>
    1fbe:	2901      	cmp	r1, #1
    1fc0:	d007      	beq.n	1fd2 <_sercom_get_default_pad+0x9e>
    1fc2:	2900      	cmp	r1, #0
    1fc4:	d031      	beq.n	202a <STACK_SIZE+0x2a>
    1fc6:	2902      	cmp	r1, #2
    1fc8:	d005      	beq.n	1fd6 <_sercom_get_default_pad+0xa2>
    1fca:	2903      	cmp	r1, #3
    1fcc:	d005      	beq.n	1fda <_sercom_get_default_pad+0xa6>
	return 0;
    1fce:	2000      	movs	r0, #0
    1fd0:	e7be      	b.n	1f50 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1fd2:	4828      	ldr	r0, [pc, #160]	; (2074 <STACK_SIZE+0x74>)
    1fd4:	e7bc      	b.n	1f50 <_sercom_get_default_pad+0x1c>
    1fd6:	4828      	ldr	r0, [pc, #160]	; (2078 <STACK_SIZE+0x78>)
    1fd8:	e7ba      	b.n	1f50 <_sercom_get_default_pad+0x1c>
    1fda:	4828      	ldr	r0, [pc, #160]	; (207c <STACK_SIZE+0x7c>)
    1fdc:	e7b8      	b.n	1f50 <_sercom_get_default_pad+0x1c>
    1fde:	2901      	cmp	r1, #1
    1fe0:	d007      	beq.n	1ff2 <_sercom_get_default_pad+0xbe>
    1fe2:	2900      	cmp	r1, #0
    1fe4:	d023      	beq.n	202e <STACK_SIZE+0x2e>
    1fe6:	2902      	cmp	r1, #2
    1fe8:	d005      	beq.n	1ff6 <_sercom_get_default_pad+0xc2>
    1fea:	2903      	cmp	r1, #3
    1fec:	d005      	beq.n	1ffa <_sercom_get_default_pad+0xc6>
	return 0;
    1fee:	2000      	movs	r0, #0
    1ff0:	e7ae      	b.n	1f50 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1ff2:	4823      	ldr	r0, [pc, #140]	; (2080 <STACK_SIZE+0x80>)
    1ff4:	e7ac      	b.n	1f50 <_sercom_get_default_pad+0x1c>
    1ff6:	4823      	ldr	r0, [pc, #140]	; (2084 <STACK_SIZE+0x84>)
    1ff8:	e7aa      	b.n	1f50 <_sercom_get_default_pad+0x1c>
    1ffa:	4823      	ldr	r0, [pc, #140]	; (2088 <STACK_SIZE+0x88>)
    1ffc:	e7a8      	b.n	1f50 <_sercom_get_default_pad+0x1c>
    1ffe:	2901      	cmp	r1, #1
    2000:	d007      	beq.n	2012 <STACK_SIZE+0x12>
    2002:	2900      	cmp	r1, #0
    2004:	d015      	beq.n	2032 <STACK_SIZE+0x32>
    2006:	2902      	cmp	r1, #2
    2008:	d005      	beq.n	2016 <STACK_SIZE+0x16>
    200a:	2903      	cmp	r1, #3
    200c:	d005      	beq.n	201a <STACK_SIZE+0x1a>
	return 0;
    200e:	2000      	movs	r0, #0
    2010:	e79e      	b.n	1f50 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2012:	481e      	ldr	r0, [pc, #120]	; (208c <STACK_SIZE+0x8c>)
    2014:	e79c      	b.n	1f50 <_sercom_get_default_pad+0x1c>
    2016:	481e      	ldr	r0, [pc, #120]	; (2090 <STACK_SIZE+0x90>)
    2018:	e79a      	b.n	1f50 <_sercom_get_default_pad+0x1c>
    201a:	481e      	ldr	r0, [pc, #120]	; (2094 <STACK_SIZE+0x94>)
    201c:	e798      	b.n	1f50 <_sercom_get_default_pad+0x1c>
    201e:	481e      	ldr	r0, [pc, #120]	; (2098 <STACK_SIZE+0x98>)
    2020:	e796      	b.n	1f50 <_sercom_get_default_pad+0x1c>
    2022:	2003      	movs	r0, #3
    2024:	e794      	b.n	1f50 <_sercom_get_default_pad+0x1c>
    2026:	481d      	ldr	r0, [pc, #116]	; (209c <STACK_SIZE+0x9c>)
    2028:	e792      	b.n	1f50 <_sercom_get_default_pad+0x1c>
    202a:	481d      	ldr	r0, [pc, #116]	; (20a0 <STACK_SIZE+0xa0>)
    202c:	e790      	b.n	1f50 <_sercom_get_default_pad+0x1c>
    202e:	481d      	ldr	r0, [pc, #116]	; (20a4 <STACK_SIZE+0xa4>)
    2030:	e78e      	b.n	1f50 <_sercom_get_default_pad+0x1c>
    2032:	481d      	ldr	r0, [pc, #116]	; (20a8 <STACK_SIZE+0xa8>)
    2034:	e78c      	b.n	1f50 <_sercom_get_default_pad+0x1c>
    2036:	46c0      	nop			; (mov r8, r8)
    2038:	42001000 	.word	0x42001000
    203c:	42001800 	.word	0x42001800
    2040:	42001c00 	.word	0x42001c00
    2044:	42001400 	.word	0x42001400
    2048:	42000800 	.word	0x42000800
    204c:	42000c00 	.word	0x42000c00
    2050:	00050003 	.word	0x00050003
    2054:	00060003 	.word	0x00060003
    2058:	00070003 	.word	0x00070003
    205c:	00010003 	.word	0x00010003
    2060:	001e0003 	.word	0x001e0003
    2064:	001f0003 	.word	0x001f0003
    2068:	00090003 	.word	0x00090003
    206c:	000a0003 	.word	0x000a0003
    2070:	000b0003 	.word	0x000b0003
    2074:	00110003 	.word	0x00110003
    2078:	00120003 	.word	0x00120003
    207c:	00130003 	.word	0x00130003
    2080:	000d0003 	.word	0x000d0003
    2084:	000e0003 	.word	0x000e0003
    2088:	000f0003 	.word	0x000f0003
    208c:	00170003 	.word	0x00170003
    2090:	00180003 	.word	0x00180003
    2094:	00190003 	.word	0x00190003
    2098:	00040003 	.word	0x00040003
    209c:	00080003 	.word	0x00080003
    20a0:	00100003 	.word	0x00100003
    20a4:	000c0003 	.word	0x000c0003
    20a8:	00160003 	.word	0x00160003

000020ac <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    20ac:	b530      	push	{r4, r5, lr}
    20ae:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    20b0:	4b0b      	ldr	r3, [pc, #44]	; (20e0 <_sercom_get_sercom_inst_index+0x34>)
    20b2:	466a      	mov	r2, sp
    20b4:	cb32      	ldmia	r3!, {r1, r4, r5}
    20b6:	c232      	stmia	r2!, {r1, r4, r5}
    20b8:	cb32      	ldmia	r3!, {r1, r4, r5}
    20ba:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    20bc:	9b00      	ldr	r3, [sp, #0]
    20be:	4283      	cmp	r3, r0
    20c0:	d00b      	beq.n	20da <_sercom_get_sercom_inst_index+0x2e>
    20c2:	2301      	movs	r3, #1
    20c4:	009a      	lsls	r2, r3, #2
    20c6:	4669      	mov	r1, sp
    20c8:	5852      	ldr	r2, [r2, r1]
    20ca:	4282      	cmp	r2, r0
    20cc:	d006      	beq.n	20dc <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    20ce:	3301      	adds	r3, #1
    20d0:	2b06      	cmp	r3, #6
    20d2:	d1f7      	bne.n	20c4 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    20d4:	2000      	movs	r0, #0
}
    20d6:	b007      	add	sp, #28
    20d8:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    20da:	2300      	movs	r3, #0
			return i;
    20dc:	b2d8      	uxtb	r0, r3
    20de:	e7fa      	b.n	20d6 <_sercom_get_sercom_inst_index+0x2a>
    20e0:	00007330 	.word	0x00007330

000020e4 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    20e4:	4770      	bx	lr
	...

000020e8 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    20e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    20ea:	4b0a      	ldr	r3, [pc, #40]	; (2114 <_sercom_set_handler+0x2c>)
    20ec:	781b      	ldrb	r3, [r3, #0]
    20ee:	2b00      	cmp	r3, #0
    20f0:	d10c      	bne.n	210c <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    20f2:	4f09      	ldr	r7, [pc, #36]	; (2118 <_sercom_set_handler+0x30>)
    20f4:	4e09      	ldr	r6, [pc, #36]	; (211c <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    20f6:	4d0a      	ldr	r5, [pc, #40]	; (2120 <_sercom_set_handler+0x38>)
    20f8:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    20fa:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    20fc:	195a      	adds	r2, r3, r5
    20fe:	6014      	str	r4, [r2, #0]
    2100:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2102:	2b18      	cmp	r3, #24
    2104:	d1f9      	bne.n	20fa <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    2106:	2201      	movs	r2, #1
    2108:	4b02      	ldr	r3, [pc, #8]	; (2114 <_sercom_set_handler+0x2c>)
    210a:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    210c:	0080      	lsls	r0, r0, #2
    210e:	4b02      	ldr	r3, [pc, #8]	; (2118 <_sercom_set_handler+0x30>)
    2110:	50c1      	str	r1, [r0, r3]
}
    2112:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2114:	20000162 	.word	0x20000162
    2118:	20000164 	.word	0x20000164
    211c:	000020e5 	.word	0x000020e5
    2120:	20000a10 	.word	0x20000a10

00002124 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    2124:	b500      	push	{lr}
    2126:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    2128:	2309      	movs	r3, #9
    212a:	466a      	mov	r2, sp
    212c:	7013      	strb	r3, [r2, #0]
    212e:	3301      	adds	r3, #1
    2130:	7053      	strb	r3, [r2, #1]
    2132:	3301      	adds	r3, #1
    2134:	7093      	strb	r3, [r2, #2]
    2136:	3301      	adds	r3, #1
    2138:	70d3      	strb	r3, [r2, #3]
    213a:	3301      	adds	r3, #1
    213c:	7113      	strb	r3, [r2, #4]
    213e:	3301      	adds	r3, #1
    2140:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    2142:	4b03      	ldr	r3, [pc, #12]	; (2150 <_sercom_get_interrupt_vector+0x2c>)
    2144:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    2146:	466b      	mov	r3, sp
    2148:	5618      	ldrsb	r0, [r3, r0]
}
    214a:	b003      	add	sp, #12
    214c:	bd00      	pop	{pc}
    214e:	46c0      	nop			; (mov r8, r8)
    2150:	000020ad 	.word	0x000020ad

00002154 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    2154:	b510      	push	{r4, lr}
    2156:	4b02      	ldr	r3, [pc, #8]	; (2160 <SERCOM0_Handler+0xc>)
    2158:	681b      	ldr	r3, [r3, #0]
    215a:	2000      	movs	r0, #0
    215c:	4798      	blx	r3
    215e:	bd10      	pop	{r4, pc}
    2160:	20000164 	.word	0x20000164

00002164 <SERCOM1_Handler>:
    2164:	b510      	push	{r4, lr}
    2166:	4b02      	ldr	r3, [pc, #8]	; (2170 <SERCOM1_Handler+0xc>)
    2168:	685b      	ldr	r3, [r3, #4]
    216a:	2001      	movs	r0, #1
    216c:	4798      	blx	r3
    216e:	bd10      	pop	{r4, pc}
    2170:	20000164 	.word	0x20000164

00002174 <SERCOM2_Handler>:
    2174:	b510      	push	{r4, lr}
    2176:	4b02      	ldr	r3, [pc, #8]	; (2180 <SERCOM2_Handler+0xc>)
    2178:	689b      	ldr	r3, [r3, #8]
    217a:	2002      	movs	r0, #2
    217c:	4798      	blx	r3
    217e:	bd10      	pop	{r4, pc}
    2180:	20000164 	.word	0x20000164

00002184 <SERCOM3_Handler>:
    2184:	b510      	push	{r4, lr}
    2186:	4b02      	ldr	r3, [pc, #8]	; (2190 <SERCOM3_Handler+0xc>)
    2188:	68db      	ldr	r3, [r3, #12]
    218a:	2003      	movs	r0, #3
    218c:	4798      	blx	r3
    218e:	bd10      	pop	{r4, pc}
    2190:	20000164 	.word	0x20000164

00002194 <SERCOM4_Handler>:
    2194:	b510      	push	{r4, lr}
    2196:	4b02      	ldr	r3, [pc, #8]	; (21a0 <SERCOM4_Handler+0xc>)
    2198:	691b      	ldr	r3, [r3, #16]
    219a:	2004      	movs	r0, #4
    219c:	4798      	blx	r3
    219e:	bd10      	pop	{r4, pc}
    21a0:	20000164 	.word	0x20000164

000021a4 <SERCOM5_Handler>:
    21a4:	b510      	push	{r4, lr}
    21a6:	4b02      	ldr	r3, [pc, #8]	; (21b0 <SERCOM5_Handler+0xc>)
    21a8:	695b      	ldr	r3, [r3, #20]
    21aa:	2005      	movs	r0, #5
    21ac:	4798      	blx	r3
    21ae:	bd10      	pop	{r4, pc}
    21b0:	20000164 	.word	0x20000164

000021b4 <spi_reset>:
 *
 * \param[in,out] module Pointer to the software instance struct
 */
void spi_reset(
		struct spi_module *const module)
{
    21b4:	b570      	push	{r4, r5, r6, lr}
    21b6:	0005      	movs	r5, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    21b8:	6804      	ldr	r4, [r0, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    21ba:	0020      	movs	r0, r4
    21bc:	4b0e      	ldr	r3, [pc, #56]	; (21f8 <spi_reset+0x44>)
    21be:	4798      	blx	r3
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    21c0:	231f      	movs	r3, #31
    21c2:	4018      	ands	r0, r3
    21c4:	3b1e      	subs	r3, #30
    21c6:	4083      	lsls	r3, r0
    21c8:	2280      	movs	r2, #128	; 0x80
    21ca:	490c      	ldr	r1, [pc, #48]	; (21fc <spi_reset+0x48>)
    21cc:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
    21ce:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    21d0:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
    21d2:	2b00      	cmp	r3, #0
    21d4:	d1fc      	bne.n	21d0 <spi_reset+0x1c>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    21d6:	338f      	adds	r3, #143	; 0x8f
    21d8:	7523      	strb	r3, [r4, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    21da:	7623      	strb	r3, [r4, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    21dc:	6823      	ldr	r3, [r4, #0]
    21de:	2202      	movs	r2, #2
    21e0:	4393      	bics	r3, r2
    21e2:	6023      	str	r3, [r4, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    21e4:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    21e6:	69d3      	ldr	r3, [r2, #28]

	/* Disable the module */
	spi_disable(module);

	while (spi_is_syncing(module)) {
    21e8:	2b00      	cmp	r3, #0
    21ea:	d1fc      	bne.n	21e6 <spi_reset+0x32>
		/* Wait until the synchronization is complete */
	}

	/* Software reset the module */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_SWRST;
    21ec:	6823      	ldr	r3, [r4, #0]
    21ee:	2201      	movs	r2, #1
    21f0:	4313      	orrs	r3, r2
    21f2:	6023      	str	r3, [r4, #0]
}
    21f4:	bd70      	pop	{r4, r5, r6, pc}
    21f6:	46c0      	nop			; (mov r8, r8)
    21f8:	00002125 	.word	0x00002125
    21fc:	e000e100 	.word	0xe000e100

00002200 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
    2200:	b570      	push	{r4, r5, r6, lr}
    2202:	b082      	sub	sp, #8
    2204:	0005      	movs	r5, r0
    2206:	000c      	movs	r4, r1
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
    2208:	2200      	movs	r2, #0
    220a:	466b      	mov	r3, sp
    220c:	80da      	strh	r2, [r3, #6]

	SercomSpi *const spi_module = &(module->hw->SPI);
    220e:	6806      	ldr	r6, [r0, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    2210:	0030      	movs	r0, r6
    2212:	4b24      	ldr	r3, [pc, #144]	; (22a4 <spi_set_baudrate+0xa4>)
    2214:	4798      	blx	r3
    2216:	231f      	movs	r3, #31
    2218:	4018      	ands	r0, r3
    221a:	3b1e      	subs	r3, #30
    221c:	4083      	lsls	r3, r0
    221e:	2280      	movs	r2, #128	; 0x80
    2220:	4921      	ldr	r1, [pc, #132]	; (22a8 <spi_set_baudrate+0xa8>)
    2222:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
    2224:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    2226:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    2228:	2b00      	cmp	r3, #0
    222a:	d1fc      	bne.n	2226 <spi_set_baudrate+0x26>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    222c:	338f      	adds	r3, #143	; 0x8f
    222e:	7533      	strb	r3, [r6, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    2230:	7633      	strb	r3, [r6, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    2232:	6833      	ldr	r3, [r6, #0]
    2234:	2202      	movs	r2, #2
    2236:	4393      	bics	r3, r2
    2238:	6033      	str	r3, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    223a:	6828      	ldr	r0, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    223c:	69c3      	ldr	r3, [r0, #28]

	/* Disable the module */
	spi_disable(module);

	while (spi_is_syncing(module)) {
    223e:	2b00      	cmp	r3, #0
    2240:	d1fc      	bne.n	223c <spi_set_baudrate+0x3c>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2242:	4b1a      	ldr	r3, [pc, #104]	; (22ac <spi_set_baudrate+0xac>)
    2244:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2246:	3014      	adds	r0, #20
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    2248:	b2c0      	uxtb	r0, r0
    224a:	4b19      	ldr	r3, [pc, #100]	; (22b0 <spi_set_baudrate+0xb0>)
    224c:	4798      	blx	r3
    224e:	0001      	movs	r1, r0

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
    2250:	466b      	mov	r3, sp
    2252:	1d9a      	adds	r2, r3, #6
    2254:	0020      	movs	r0, r4
    2256:	4b17      	ldr	r3, [pc, #92]	; (22b4 <spi_set_baudrate+0xb4>)
    2258:	4798      	blx	r3
    225a:	1e04      	subs	r4, r0, #0
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
    225c:	d003      	beq.n	2266 <spi_set_baudrate+0x66>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
    225e:	2417      	movs	r4, #23
	while (spi_is_syncing(module)) {
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
}
    2260:	0020      	movs	r0, r4
    2262:	b002      	add	sp, #8
    2264:	bd70      	pop	{r4, r5, r6, pc}
	spi_module->BAUD.reg = (uint8_t)baud;
    2266:	466b      	mov	r3, sp
    2268:	3306      	adds	r3, #6
    226a:	781b      	ldrb	r3, [r3, #0]
    226c:	7333      	strb	r3, [r6, #12]
	SercomSpi *const spi_module = &(module->hw->SPI);
    226e:	682e      	ldr	r6, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    2270:	69f3      	ldr	r3, [r6, #28]
	while (spi_is_syncing(module)) {
    2272:	2b00      	cmp	r3, #0
    2274:	d1fc      	bne.n	2270 <spi_set_baudrate+0x70>
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    2276:	0030      	movs	r0, r6
    2278:	4b0a      	ldr	r3, [pc, #40]	; (22a4 <spi_set_baudrate+0xa4>)
    227a:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    227c:	231f      	movs	r3, #31
    227e:	4018      	ands	r0, r3
    2280:	3b1e      	subs	r3, #30
    2282:	4083      	lsls	r3, r0
    2284:	4a08      	ldr	r2, [pc, #32]	; (22a8 <spi_set_baudrate+0xa8>)
    2286:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    2288:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    228a:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    228c:	2b00      	cmp	r3, #0
    228e:	d1fc      	bne.n	228a <spi_set_baudrate+0x8a>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    2290:	6833      	ldr	r3, [r6, #0]
    2292:	2202      	movs	r2, #2
    2294:	4313      	orrs	r3, r2
    2296:	6033      	str	r3, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    2298:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    229a:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    229c:	2b00      	cmp	r3, #0
    229e:	d1fc      	bne.n	229a <spi_set_baudrate+0x9a>
    22a0:	e7de      	b.n	2260 <spi_set_baudrate+0x60>
    22a2:	46c0      	nop			; (mov r8, r8)
    22a4:	00002125 	.word	0x00002125
    22a8:	e000e100 	.word	0xe000e100
    22ac:	000020ad 	.word	0x000020ad
    22b0:	000035c1 	.word	0x000035c1
    22b4:	00001e2b 	.word	0x00001e2b

000022b8 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    22b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    22ba:	b08b      	sub	sp, #44	; 0x2c
    22bc:	0005      	movs	r5, r0
    22be:	000c      	movs	r4, r1
    22c0:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    22c2:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    22c4:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    22c6:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    22c8:	079b      	lsls	r3, r3, #30
    22ca:	d501      	bpl.n	22d0 <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    22cc:	b00b      	add	sp, #44	; 0x2c
    22ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    22d0:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    22d2:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    22d4:	07db      	lsls	r3, r3, #31
    22d6:	d4f9      	bmi.n	22cc <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    22d8:	0008      	movs	r0, r1
    22da:	4b60      	ldr	r3, [pc, #384]	; (245c <spi_init+0x1a4>)
    22dc:	4798      	blx	r3
			PM->APBCMASK.reg |= mask;
    22de:	4a60      	ldr	r2, [pc, #384]	; (2460 <spi_init+0x1a8>)
    22e0:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    22e2:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    22e4:	2301      	movs	r3, #1
    22e6:	40bb      	lsls	r3, r7
    22e8:	430b      	orrs	r3, r1
    22ea:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    22ec:	a909      	add	r1, sp, #36	; 0x24
    22ee:	2724      	movs	r7, #36	; 0x24
    22f0:	5df3      	ldrb	r3, [r6, r7]
    22f2:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    22f4:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    22f6:	b2c3      	uxtb	r3, r0
    22f8:	9301      	str	r3, [sp, #4]
    22fa:	0018      	movs	r0, r3
    22fc:	4b59      	ldr	r3, [pc, #356]	; (2464 <spi_init+0x1ac>)
    22fe:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    2300:	9801      	ldr	r0, [sp, #4]
    2302:	4b59      	ldr	r3, [pc, #356]	; (2468 <spi_init+0x1b0>)
    2304:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    2306:	5df0      	ldrb	r0, [r6, r7]
    2308:	2100      	movs	r1, #0
    230a:	4b58      	ldr	r3, [pc, #352]	; (246c <spi_init+0x1b4>)
    230c:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    230e:	7833      	ldrb	r3, [r6, #0]
    2310:	2b01      	cmp	r3, #1
    2312:	d038      	beq.n	2386 <spi_init+0xce>
    2314:	002b      	movs	r3, r5
    2316:	330c      	adds	r3, #12
    2318:	0029      	movs	r1, r5
    231a:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
    231c:	2200      	movs	r2, #0
    231e:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    2320:	428b      	cmp	r3, r1
    2322:	d1fc      	bne.n	231e <spi_init+0x66>
	module->tx_buffer_ptr              = NULL;
    2324:	2300      	movs	r3, #0
    2326:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    2328:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    232a:	2400      	movs	r4, #0
    232c:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    232e:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    2330:	3336      	adds	r3, #54	; 0x36
    2332:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
    2334:	3301      	adds	r3, #1
    2336:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
    2338:	3301      	adds	r3, #1
    233a:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    233c:	3b35      	subs	r3, #53	; 0x35
    233e:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
    2340:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    2342:	6828      	ldr	r0, [r5, #0]
    2344:	4b45      	ldr	r3, [pc, #276]	; (245c <spi_init+0x1a4>)
    2346:	4798      	blx	r3
    2348:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    234a:	4949      	ldr	r1, [pc, #292]	; (2470 <spi_init+0x1b8>)
    234c:	4b49      	ldr	r3, [pc, #292]	; (2474 <spi_init+0x1bc>)
    234e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    2350:	00bf      	lsls	r7, r7, #2
    2352:	4b49      	ldr	r3, [pc, #292]	; (2478 <spi_init+0x1c0>)
    2354:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
    2356:	682f      	ldr	r7, [r5, #0]
    2358:	ab04      	add	r3, sp, #16
    235a:	2280      	movs	r2, #128	; 0x80
    235c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    235e:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2360:	3a7f      	subs	r2, #127	; 0x7f
    2362:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    2364:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    2366:	7833      	ldrb	r3, [r6, #0]
    2368:	2b00      	cmp	r3, #0
    236a:	d102      	bne.n	2372 <spi_init+0xba>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    236c:	2200      	movs	r2, #0
    236e:	ab04      	add	r3, sp, #16
    2370:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    2372:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    2374:	9305      	str	r3, [sp, #20]
    2376:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    2378:	9306      	str	r3, [sp, #24]
    237a:	6b33      	ldr	r3, [r6, #48]	; 0x30
    237c:	9307      	str	r3, [sp, #28]
    237e:	6b73      	ldr	r3, [r6, #52]	; 0x34
    2380:	9308      	str	r3, [sp, #32]
    2382:	2400      	movs	r4, #0
    2384:	e00b      	b.n	239e <spi_init+0xe6>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    2386:	6823      	ldr	r3, [r4, #0]
    2388:	220c      	movs	r2, #12
    238a:	4313      	orrs	r3, r2
    238c:	6023      	str	r3, [r4, #0]
    238e:	e7c1      	b.n	2314 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    2390:	0038      	movs	r0, r7
    2392:	4b3a      	ldr	r3, [pc, #232]	; (247c <spi_init+0x1c4>)
    2394:	4798      	blx	r3
    2396:	e00a      	b.n	23ae <spi_init+0xf6>
    2398:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    239a:	2c04      	cmp	r4, #4
    239c:	d010      	beq.n	23c0 <spi_init+0x108>
    239e:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
    23a0:	00a3      	lsls	r3, r4, #2
    23a2:	aa02      	add	r2, sp, #8
    23a4:	200c      	movs	r0, #12
    23a6:	1812      	adds	r2, r2, r0
    23a8:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    23aa:	2800      	cmp	r0, #0
    23ac:	d0f0      	beq.n	2390 <spi_init+0xd8>
		if (current_pinmux != PINMUX_UNUSED) {
    23ae:	1c43      	adds	r3, r0, #1
    23b0:	d0f2      	beq.n	2398 <spi_init+0xe0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    23b2:	a904      	add	r1, sp, #16
    23b4:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    23b6:	0c00      	lsrs	r0, r0, #16
    23b8:	b2c0      	uxtb	r0, r0
    23ba:	4b31      	ldr	r3, [pc, #196]	; (2480 <spi_init+0x1c8>)
    23bc:	4798      	blx	r3
    23be:	e7eb      	b.n	2398 <spi_init+0xe0>
	module->mode             = config->mode;
    23c0:	7833      	ldrb	r3, [r6, #0]
    23c2:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    23c4:	7c33      	ldrb	r3, [r6, #16]
    23c6:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    23c8:	7cb3      	ldrb	r3, [r6, #18]
    23ca:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    23cc:	7d33      	ldrb	r3, [r6, #20]
    23ce:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
    23d0:	2200      	movs	r2, #0
    23d2:	ab02      	add	r3, sp, #8
    23d4:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    23d6:	7833      	ldrb	r3, [r6, #0]
    23d8:	2b01      	cmp	r3, #1
    23da:	d028      	beq.n	242e <spi_init+0x176>
	ctrla |= config->transfer_mode;
    23dc:	6873      	ldr	r3, [r6, #4]
    23de:	68b2      	ldr	r2, [r6, #8]
    23e0:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
    23e2:	68f2      	ldr	r2, [r6, #12]
    23e4:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
    23e6:	7c31      	ldrb	r1, [r6, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
    23e8:	7c72      	ldrb	r2, [r6, #17]
    23ea:	2a00      	cmp	r2, #0
    23ec:	d103      	bne.n	23f6 <spi_init+0x13e>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    23ee:	4a25      	ldr	r2, [pc, #148]	; (2484 <spi_init+0x1cc>)
    23f0:	7892      	ldrb	r2, [r2, #2]
    23f2:	0792      	lsls	r2, r2, #30
    23f4:	d501      	bpl.n	23fa <spi_init+0x142>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    23f6:	2280      	movs	r2, #128	; 0x80
    23f8:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
    23fa:	7cb2      	ldrb	r2, [r6, #18]
    23fc:	2a00      	cmp	r2, #0
    23fe:	d002      	beq.n	2406 <spi_init+0x14e>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    2400:	2280      	movs	r2, #128	; 0x80
    2402:	0292      	lsls	r2, r2, #10
    2404:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
    2406:	7cf2      	ldrb	r2, [r6, #19]
    2408:	2a00      	cmp	r2, #0
    240a:	d002      	beq.n	2412 <spi_init+0x15a>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    240c:	2280      	movs	r2, #128	; 0x80
    240e:	0092      	lsls	r2, r2, #2
    2410:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
    2412:	7d32      	ldrb	r2, [r6, #20]
    2414:	2a00      	cmp	r2, #0
    2416:	d002      	beq.n	241e <spi_init+0x166>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    2418:	2280      	movs	r2, #128	; 0x80
    241a:	0192      	lsls	r2, r2, #6
    241c:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
    241e:	683a      	ldr	r2, [r7, #0]
    2420:	4313      	orrs	r3, r2
    2422:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
    2424:	687b      	ldr	r3, [r7, #4]
    2426:	430b      	orrs	r3, r1
    2428:	607b      	str	r3, [r7, #4]
	return STATUS_OK;
    242a:	2000      	movs	r0, #0
    242c:	e74e      	b.n	22cc <spi_init+0x14>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    242e:	6828      	ldr	r0, [r5, #0]
    2430:	4b0a      	ldr	r3, [pc, #40]	; (245c <spi_init+0x1a4>)
    2432:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2434:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    2436:	b2c0      	uxtb	r0, r0
    2438:	4b13      	ldr	r3, [pc, #76]	; (2488 <spi_init+0x1d0>)
    243a:	4798      	blx	r3
    243c:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    243e:	ab02      	add	r3, sp, #8
    2440:	1d9a      	adds	r2, r3, #6
    2442:	69b0      	ldr	r0, [r6, #24]
    2444:	4b11      	ldr	r3, [pc, #68]	; (248c <spi_init+0x1d4>)
    2446:	4798      	blx	r3
    2448:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    244a:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    244c:	2b00      	cmp	r3, #0
    244e:	d000      	beq.n	2452 <spi_init+0x19a>
    2450:	e73c      	b.n	22cc <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
    2452:	ab02      	add	r3, sp, #8
    2454:	3306      	adds	r3, #6
    2456:	781b      	ldrb	r3, [r3, #0]
    2458:	733b      	strb	r3, [r7, #12]
    245a:	e7bf      	b.n	23dc <spi_init+0x124>
    245c:	000020ad 	.word	0x000020ad
    2460:	40000400 	.word	0x40000400
    2464:	000035a5 	.word	0x000035a5
    2468:	00003519 	.word	0x00003519
    246c:	00001ee9 	.word	0x00001ee9
    2470:	00002725 	.word	0x00002725
    2474:	000020e9 	.word	0x000020e9
    2478:	20000a10 	.word	0x20000a10
    247c:	00001f35 	.word	0x00001f35
    2480:	0000369d 	.word	0x0000369d
    2484:	41002000 	.word	0x41002000
    2488:	000035c1 	.word	0x000035c1
    248c:	00001e2b 	.word	0x00001e2b

00002490 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    2490:	b5f0      	push	{r4, r5, r6, r7, lr}
    2492:	46d6      	mov	lr, sl
    2494:	4647      	mov	r7, r8
    2496:	b580      	push	{r7, lr}
    2498:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    249a:	2438      	movs	r4, #56	; 0x38
    249c:	5d05      	ldrb	r5, [r0, r4]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    249e:	3c33      	subs	r4, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    24a0:	2d05      	cmp	r5, #5
    24a2:	d002      	beq.n	24aa <spi_read_buffer_wait+0x1a>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    24a4:	3412      	adds	r4, #18
	if (length == 0) {
    24a6:	2a00      	cmp	r2, #0
    24a8:	d105      	bne.n	24b6 <spi_read_buffer_wait+0x26>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    24aa:	0020      	movs	r0, r4
    24ac:	b003      	add	sp, #12
    24ae:	bc0c      	pop	{r2, r3}
    24b0:	4690      	mov	r8, r2
    24b2:	469a      	mov	sl, r3
    24b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
    24b6:	79c4      	ldrb	r4, [r0, #7]
    24b8:	2c00      	cmp	r4, #0
    24ba:	d144      	bne.n	2546 <spi_read_buffer_wait+0xb6>
		return STATUS_ERR_DENIED;
    24bc:	341c      	adds	r4, #28
    24be:	e7f4      	b.n	24aa <spi_read_buffer_wait+0x1a>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    24c0:	6805      	ldr	r5, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    24c2:	7e2c      	ldrb	r4, [r5, #24]
			while (!spi_is_ready_to_write(module)) {
    24c4:	423c      	tst	r4, r7
    24c6:	d0fc      	beq.n	24c2 <spi_read_buffer_wait+0x32>
    24c8:	7e2c      	ldrb	r4, [r5, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    24ca:	423c      	tst	r4, r7
    24cc:	d01a      	beq.n	2504 <spi_read_buffer_wait+0x74>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    24ce:	4644      	mov	r4, r8
    24d0:	62ac      	str	r4, [r5, #40]	; 0x28
    24d2:	e017      	b.n	2504 <spi_read_buffer_wait+0x74>
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    24d4:	7984      	ldrb	r4, [r0, #6]
    24d6:	2c01      	cmp	r4, #1
    24d8:	d026      	beq.n	2528 <spi_read_buffer_wait+0x98>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    24da:	6aad      	ldr	r5, [r5, #40]	; 0x28
    24dc:	b2ec      	uxtb	r4, r5
    24de:	46a4      	mov	ip, r4
		if (retval != STATUS_OK) {
    24e0:	9c01      	ldr	r4, [sp, #4]
    24e2:	2c00      	cmp	r4, #0
    24e4:	d13a      	bne.n	255c <spi_read_buffer_wait+0xcc>
		rx_data[rx_pos++] = received_data;
    24e6:	1c75      	adds	r5, r6, #1
    24e8:	b2ad      	uxth	r5, r5
    24ea:	4664      	mov	r4, ip
    24ec:	558c      	strb	r4, [r1, r6]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    24ee:	7984      	ldrb	r4, [r0, #6]
    24f0:	2c01      	cmp	r4, #1
    24f2:	d01e      	beq.n	2532 <spi_read_buffer_wait+0xa2>
		rx_data[rx_pos++] = received_data;
    24f4:	002e      	movs	r6, r5
	while (length--) {
    24f6:	3a01      	subs	r2, #1
    24f8:	b292      	uxth	r2, r2
    24fa:	4552      	cmp	r2, sl
    24fc:	d01f      	beq.n	253e <spi_read_buffer_wait+0xae>
		if (module->mode == SPI_MODE_MASTER) {
    24fe:	7944      	ldrb	r4, [r0, #5]
    2500:	2c01      	cmp	r4, #1
    2502:	d0dd      	beq.n	24c0 <spi_read_buffer_wait+0x30>
	SercomSpi *const spi_module = &(module->hw->SPI);
    2504:	6805      	ldr	r5, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2506:	7e2c      	ldrb	r4, [r5, #24]
		while (!spi_is_ready_to_read(module)) {
    2508:	421c      	tst	r4, r3
    250a:	d0fc      	beq.n	2506 <spi_read_buffer_wait+0x76>
    250c:	7e2c      	ldrb	r4, [r5, #24]
	if (!spi_is_ready_to_read(module)) {
    250e:	421c      	tst	r4, r3
    2510:	d017      	beq.n	2542 <spi_read_buffer_wait+0xb2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    2512:	8b6c      	ldrh	r4, [r5, #26]
    2514:	46a4      	mov	ip, r4
	enum status_code retval = STATUS_OK;
    2516:	2400      	movs	r4, #0
    2518:	9401      	str	r4, [sp, #4]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    251a:	4664      	mov	r4, ip
    251c:	421c      	tst	r4, r3
    251e:	d0d9      	beq.n	24d4 <spi_read_buffer_wait+0x44>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    2520:	836b      	strh	r3, [r5, #26]
		retval = STATUS_ERR_OVERFLOW;
    2522:	241e      	movs	r4, #30
    2524:	9401      	str	r4, [sp, #4]
    2526:	e7d5      	b.n	24d4 <spi_read_buffer_wait+0x44>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    2528:	6aac      	ldr	r4, [r5, #40]	; 0x28
    252a:	05e4      	lsls	r4, r4, #23
    252c:	0de4      	lsrs	r4, r4, #23
    252e:	46a4      	mov	ip, r4
    2530:	e7d6      	b.n	24e0 <spi_read_buffer_wait+0x50>
			rx_data[rx_pos++] = (received_data >> 8);
    2532:	3602      	adds	r6, #2
    2534:	b2b6      	uxth	r6, r6
    2536:	4664      	mov	r4, ip
    2538:	0a24      	lsrs	r4, r4, #8
    253a:	554c      	strb	r4, [r1, r5]
    253c:	e7db      	b.n	24f6 <spi_read_buffer_wait+0x66>
    253e:	9c01      	ldr	r4, [sp, #4]
    2540:	e7b3      	b.n	24aa <spi_read_buffer_wait+0x1a>
		return STATUS_ERR_IO;
    2542:	2410      	movs	r4, #16
    2544:	e7b1      	b.n	24aa <spi_read_buffer_wait+0x1a>
	while (length--) {
    2546:	3a01      	subs	r2, #1
    2548:	b292      	uxth	r2, r2
    254a:	2600      	movs	r6, #0
			while (!spi_is_ready_to_write(module)) {
    254c:	2701      	movs	r7, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    254e:	05db      	lsls	r3, r3, #23
    2550:	0ddb      	lsrs	r3, r3, #23
    2552:	4698      	mov	r8, r3
		while (!spi_is_ready_to_read(module)) {
    2554:	2304      	movs	r3, #4
	while (length--) {
    2556:	4c02      	ldr	r4, [pc, #8]	; (2560 <spi_read_buffer_wait+0xd0>)
    2558:	46a2      	mov	sl, r4
    255a:	e7d0      	b.n	24fe <spi_read_buffer_wait+0x6e>
    255c:	9c01      	ldr	r4, [sp, #4]
    255e:	e7a4      	b.n	24aa <spi_read_buffer_wait+0x1a>
    2560:	0000ffff 	.word	0x0000ffff

00002564 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    2564:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    2566:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    2568:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    256a:	2c01      	cmp	r4, #1
    256c:	d001      	beq.n	2572 <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    256e:	0018      	movs	r0, r3
    2570:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    2572:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    2574:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    2576:	2c00      	cmp	r4, #0
    2578:	d1f9      	bne.n	256e <spi_select_slave+0xa>
		if (select) {
    257a:	2a00      	cmp	r2, #0
    257c:	d058      	beq.n	2630 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    257e:	784b      	ldrb	r3, [r1, #1]
    2580:	2b00      	cmp	r3, #0
    2582:	d044      	beq.n	260e <spi_select_slave+0xaa>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2584:	6803      	ldr	r3, [r0, #0]
    2586:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    2588:	07db      	lsls	r3, r3, #31
    258a:	d410      	bmi.n	25ae <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    258c:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    258e:	09d1      	lsrs	r1, r2, #7
		return NULL;
    2590:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2592:	2900      	cmp	r1, #0
    2594:	d104      	bne.n	25a0 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    2596:	0953      	lsrs	r3, r2, #5
    2598:	01db      	lsls	r3, r3, #7
    259a:	492e      	ldr	r1, [pc, #184]	; (2654 <spi_select_slave+0xf0>)
    259c:	468c      	mov	ip, r1
    259e:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    25a0:	211f      	movs	r1, #31
    25a2:	4011      	ands	r1, r2
    25a4:	2201      	movs	r2, #1
    25a6:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    25a8:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    25aa:	2305      	movs	r3, #5
    25ac:	e7df      	b.n	256e <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    25ae:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    25b0:	09d4      	lsrs	r4, r2, #7
		return NULL;
    25b2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    25b4:	2c00      	cmp	r4, #0
    25b6:	d104      	bne.n	25c2 <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    25b8:	0953      	lsrs	r3, r2, #5
    25ba:	01db      	lsls	r3, r3, #7
    25bc:	4c25      	ldr	r4, [pc, #148]	; (2654 <spi_select_slave+0xf0>)
    25be:	46a4      	mov	ip, r4
    25c0:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    25c2:	241f      	movs	r4, #31
    25c4:	4014      	ands	r4, r2
    25c6:	2201      	movs	r2, #1
    25c8:	40a2      	lsls	r2, r4
	} else {
		port_base->OUTCLR.reg = pin_mask;
    25ca:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    25cc:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    25ce:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    25d0:	07d2      	lsls	r2, r2, #31
    25d2:	d501      	bpl.n	25d8 <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    25d4:	788a      	ldrb	r2, [r1, #2]
    25d6:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    25d8:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    25da:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    25dc:	2a00      	cmp	r2, #0
    25de:	d1c6      	bne.n	256e <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    25e0:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    25e2:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    25e4:	7e13      	ldrb	r3, [r2, #24]
    25e6:	420b      	tst	r3, r1
    25e8:	d0fc      	beq.n	25e4 <spi_select_slave+0x80>
    25ea:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    25ec:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
    25ee:	0749      	lsls	r1, r1, #29
    25f0:	d5bd      	bpl.n	256e <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    25f2:	8b53      	ldrh	r3, [r2, #26]
    25f4:	075b      	lsls	r3, r3, #29
    25f6:	d501      	bpl.n	25fc <spi_select_slave+0x98>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    25f8:	2304      	movs	r3, #4
    25fa:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    25fc:	7983      	ldrb	r3, [r0, #6]
    25fe:	2b01      	cmp	r3, #1
    2600:	d002      	beq.n	2608 <spi_select_slave+0xa4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    2602:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2604:	2300      	movs	r3, #0
    2606:	e7b2      	b.n	256e <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    2608:	6a93      	ldr	r3, [r2, #40]	; 0x28
    260a:	2300      	movs	r3, #0
    260c:	e7af      	b.n	256e <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    260e:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    2610:	09d1      	lsrs	r1, r2, #7
		return NULL;
    2612:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2614:	2900      	cmp	r1, #0
    2616:	d104      	bne.n	2622 <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    2618:	0953      	lsrs	r3, r2, #5
    261a:	01db      	lsls	r3, r3, #7
    261c:	490d      	ldr	r1, [pc, #52]	; (2654 <spi_select_slave+0xf0>)
    261e:	468c      	mov	ip, r1
    2620:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2622:	211f      	movs	r1, #31
    2624:	4011      	ands	r1, r2
    2626:	2201      	movs	r2, #1
    2628:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    262a:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    262c:	2300      	movs	r3, #0
    262e:	e79e      	b.n	256e <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    2630:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    2632:	09d1      	lsrs	r1, r2, #7
		return NULL;
    2634:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2636:	2900      	cmp	r1, #0
    2638:	d104      	bne.n	2644 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    263a:	0953      	lsrs	r3, r2, #5
    263c:	01db      	lsls	r3, r3, #7
    263e:	4905      	ldr	r1, [pc, #20]	; (2654 <spi_select_slave+0xf0>)
    2640:	468c      	mov	ip, r1
    2642:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2644:	211f      	movs	r1, #31
    2646:	4011      	ands	r1, r2
    2648:	2201      	movs	r2, #1
    264a:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    264c:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    264e:	2300      	movs	r3, #0
    2650:	e78d      	b.n	256e <spi_select_slave+0xa>
    2652:	46c0      	nop			; (mov r8, r8)
    2654:	41004400 	.word	0x41004400

00002658 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    2658:	b5f0      	push	{r4, r5, r6, r7, lr}
    265a:	46de      	mov	lr, fp
    265c:	4657      	mov	r7, sl
    265e:	464e      	mov	r6, r9
    2660:	4645      	mov	r5, r8
    2662:	b5e0      	push	{r5, r6, r7, lr}
    2664:	b083      	sub	sp, #12
    2666:	468a      	mov	sl, r1
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    2668:	2338      	movs	r3, #56	; 0x38
    266a:	5cc4      	ldrb	r4, [r0, r3]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    266c:	3b33      	subs	r3, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    266e:	2c05      	cmp	r4, #5
    2670:	d002      	beq.n	2678 <spi_write_buffer_wait+0x20>
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    2672:	3312      	adds	r3, #18
	if (length == 0) {
    2674:	2a00      	cmp	r2, #0
    2676:	d14b      	bne.n	2710 <spi_write_buffer_wait+0xb8>
			}
		}
	}
#  endif
	return STATUS_OK;
}
    2678:	0018      	movs	r0, r3
    267a:	b003      	add	sp, #12
    267c:	bc3c      	pop	{r2, r3, r4, r5}
    267e:	4690      	mov	r8, r2
    2680:	4699      	mov	r9, r3
    2682:	46a2      	mov	sl, r4
    2684:	46ab      	mov	fp, r5
    2686:	bdf0      	pop	{r4, r5, r6, r7, pc}
			data_to_send |= (tx_data[tx_pos++] << 8);
    2688:	3702      	adds	r7, #2
    268a:	b2bf      	uxth	r7, r7
    268c:	4641      	mov	r1, r8
    268e:	4653      	mov	r3, sl
    2690:	5c59      	ldrb	r1, [r3, r1]
    2692:	0209      	lsls	r1, r1, #8
    2694:	465b      	mov	r3, fp
    2696:	430b      	orrs	r3, r1
    2698:	e018      	b.n	26cc <spi_write_buffer_wait+0x74>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    269a:	7983      	ldrb	r3, [r0, #6]
    269c:	2b01      	cmp	r3, #1
    269e:	d02a      	beq.n	26f6 <spi_write_buffer_wait+0x9e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    26a0:	6a93      	ldr	r3, [r2, #40]	; 0x28
	while (length--) {
    26a2:	3e01      	subs	r6, #1
    26a4:	b2b6      	uxth	r6, r6
    26a6:	4566      	cmp	r6, ip
    26a8:	d027      	beq.n	26fa <spi_write_buffer_wait+0xa2>
	SercomSpi *const spi_module = &(module->hw->SPI);
    26aa:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    26ac:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(module)) {
    26ae:	4223      	tst	r3, r4
    26b0:	d0fc      	beq.n	26ac <spi_write_buffer_wait+0x54>
		uint16_t data_to_send = tx_data[tx_pos++];
    26b2:	1c7b      	adds	r3, r7, #1
    26b4:	b29b      	uxth	r3, r3
    26b6:	4698      	mov	r8, r3
    26b8:	4653      	mov	r3, sl
    26ba:	5ddb      	ldrb	r3, [r3, r7]
    26bc:	469b      	mov	fp, r3
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    26be:	7981      	ldrb	r1, [r0, #6]
    26c0:	2901      	cmp	r1, #1
    26c2:	d0e1      	beq.n	2688 <spi_write_buffer_wait+0x30>
		uint16_t data_to_send = tx_data[tx_pos++];
    26c4:	4669      	mov	r1, sp
    26c6:	80cb      	strh	r3, [r1, #6]
    26c8:	88cb      	ldrh	r3, [r1, #6]
    26ca:	4647      	mov	r7, r8
    26cc:	7e11      	ldrb	r1, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
    26ce:	4221      	tst	r1, r4
    26d0:	d002      	beq.n	26d8 <spi_write_buffer_wait+0x80>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    26d2:	05db      	lsls	r3, r3, #23
    26d4:	0ddb      	lsrs	r3, r3, #23
    26d6:	6293      	str	r3, [r2, #40]	; 0x28
		if (module->receiver_enabled) {
    26d8:	79c3      	ldrb	r3, [r0, #7]
    26da:	2b00      	cmp	r3, #0
    26dc:	d0e1      	beq.n	26a2 <spi_write_buffer_wait+0x4a>
	SercomSpi *const spi_module = &(module->hw->SPI);
    26de:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    26e0:	7e13      	ldrb	r3, [r2, #24]
			while (!spi_is_ready_to_read(module)) {
    26e2:	422b      	tst	r3, r5
    26e4:	d0fc      	beq.n	26e0 <spi_write_buffer_wait+0x88>
    26e6:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
    26e8:	422b      	tst	r3, r5
    26ea:	d0da      	beq.n	26a2 <spi_write_buffer_wait+0x4a>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    26ec:	8b53      	ldrh	r3, [r2, #26]
    26ee:	422b      	tst	r3, r5
    26f0:	d0d3      	beq.n	269a <spi_write_buffer_wait+0x42>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    26f2:	8355      	strh	r5, [r2, #26]
    26f4:	e7d1      	b.n	269a <spi_write_buffer_wait+0x42>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    26f6:	6a93      	ldr	r3, [r2, #40]	; 0x28
    26f8:	e7d3      	b.n	26a2 <spi_write_buffer_wait+0x4a>
	if (module->mode == SPI_MODE_MASTER) {
    26fa:	7942      	ldrb	r2, [r0, #5]
	return STATUS_OK;
    26fc:	2300      	movs	r3, #0
	if (module->mode == SPI_MODE_MASTER) {
    26fe:	2a01      	cmp	r2, #1
    2700:	d1ba      	bne.n	2678 <spi_write_buffer_wait+0x20>
	SercomSpi *const spi_module = &(module->hw->SPI);
    2702:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
    2704:	3201      	adds	r2, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    2706:	7e0b      	ldrb	r3, [r1, #24]
    2708:	4213      	tst	r3, r2
    270a:	d0fc      	beq.n	2706 <spi_write_buffer_wait+0xae>
	return STATUS_OK;
    270c:	2300      	movs	r3, #0
    270e:	e7b3      	b.n	2678 <spi_write_buffer_wait+0x20>
	while (length--) {
    2710:	3a01      	subs	r2, #1
    2712:	b296      	uxth	r6, r2
    2714:	2700      	movs	r7, #0
		while (!spi_is_ready_to_write(module)) {
    2716:	2401      	movs	r4, #1
			while (!spi_is_ready_to_read(module)) {
    2718:	2504      	movs	r5, #4
	while (length--) {
    271a:	4b01      	ldr	r3, [pc, #4]	; (2720 <spi_write_buffer_wait+0xc8>)
    271c:	469c      	mov	ip, r3
    271e:	e7c4      	b.n	26aa <spi_write_buffer_wait+0x52>
    2720:	0000ffff 	.word	0x0000ffff

00002724 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    2724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    2726:	0080      	lsls	r0, r0, #2
    2728:	4b70      	ldr	r3, [pc, #448]	; (28ec <_spi_interrupt_handler+0x1c8>)
    272a:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    272c:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    272e:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
    2730:	5ce7      	ldrb	r7, [r4, r3]
    2732:	2236      	movs	r2, #54	; 0x36
    2734:	5ca2      	ldrb	r2, [r4, r2]
    2736:	4017      	ands	r7, r2

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    2738:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    273a:	7db5      	ldrb	r5, [r6, #22]
    273c:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    273e:	07eb      	lsls	r3, r5, #31
    2740:	d502      	bpl.n	2748 <_spi_interrupt_handler+0x24>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    2742:	7963      	ldrb	r3, [r4, #5]
    2744:	2b01      	cmp	r3, #1
    2746:	d01e      	beq.n	2786 <_spi_interrupt_handler+0x62>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    2748:	076b      	lsls	r3, r5, #29
    274a:	d511      	bpl.n	2770 <_spi_interrupt_handler+0x4c>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    274c:	8b73      	ldrh	r3, [r6, #26]
    274e:	075b      	lsls	r3, r3, #29
    2750:	d55a      	bpl.n	2808 <_spi_interrupt_handler+0xe4>
			if (module->dir != SPI_DIRECTION_WRITE) {
    2752:	7a63      	ldrb	r3, [r4, #9]
    2754:	2b01      	cmp	r3, #1
    2756:	d008      	beq.n	276a <_spi_interrupt_handler+0x46>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    2758:	221e      	movs	r2, #30
    275a:	2338      	movs	r3, #56	; 0x38
    275c:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    275e:	3b35      	subs	r3, #53	; 0x35
    2760:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    2762:	3302      	adds	r3, #2
    2764:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    2766:	073b      	lsls	r3, r7, #28
    2768:	d44a      	bmi.n	2800 <_spi_interrupt_handler+0xdc>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    276a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    276c:	2304      	movs	r3, #4
    276e:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    2770:	07ab      	lsls	r3, r5, #30
    2772:	d503      	bpl.n	277c <_spi_interrupt_handler+0x58>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    2774:	7963      	ldrb	r3, [r4, #5]
    2776:	2b01      	cmp	r3, #1
    2778:	d100      	bne.n	277c <_spi_interrupt_handler+0x58>
    277a:	e097      	b.n	28ac <_spi_interrupt_handler+0x188>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    277c:	b26d      	sxtb	r5, r5
    277e:	2d00      	cmp	r5, #0
    2780:	da00      	bge.n	2784 <_spi_interrupt_handler+0x60>
    2782:	e0a9      	b.n	28d8 <_spi_interrupt_handler+0x1b4>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    2784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(module->dir == SPI_DIRECTION_READ)) {
    2786:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    2788:	2b00      	cmp	r3, #0
    278a:	d022      	beq.n	27d2 <_spi_interrupt_handler+0xae>
			(module->dir != SPI_DIRECTION_READ))
    278c:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    278e:	2b00      	cmp	r3, #0
    2790:	d0da      	beq.n	2748 <_spi_interrupt_handler+0x24>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    2792:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    2794:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    2796:	7813      	ldrb	r3, [r2, #0]
    2798:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
    279a:	1c50      	adds	r0, r2, #1
    279c:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    279e:	79a0      	ldrb	r0, [r4, #6]
    27a0:	2801      	cmp	r0, #1
    27a2:	d027      	beq.n	27f4 <_spi_interrupt_handler+0xd0>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    27a4:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    27a6:	05db      	lsls	r3, r3, #23
    27a8:	0ddb      	lsrs	r3, r3, #23
    27aa:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
    27ac:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    27ae:	3b01      	subs	r3, #1
    27b0:	b29b      	uxth	r3, r3
    27b2:	86a3      	strh	r3, [r4, #52]	; 0x34
			if (module->remaining_tx_buffer_length == 0) {
    27b4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    27b6:	b29b      	uxth	r3, r3
    27b8:	2b00      	cmp	r3, #0
    27ba:	d1c5      	bne.n	2748 <_spi_interrupt_handler+0x24>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    27bc:	3301      	adds	r3, #1
    27be:	7533      	strb	r3, [r6, #20]
				if (module->dir == SPI_DIRECTION_WRITE &&
    27c0:	7a63      	ldrb	r3, [r4, #9]
    27c2:	2b01      	cmp	r3, #1
    27c4:	d1c0      	bne.n	2748 <_spi_interrupt_handler+0x24>
    27c6:	79e3      	ldrb	r3, [r4, #7]
    27c8:	2b00      	cmp	r3, #0
    27ca:	d1bd      	bne.n	2748 <_spi_interrupt_handler+0x24>
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    27cc:	3302      	adds	r3, #2
    27ce:	75b3      	strb	r3, [r6, #22]
    27d0:	e7ba      	b.n	2748 <_spi_interrupt_handler+0x24>
	spi_hw->DATA.reg = dummy_write;
    27d2:	4b47      	ldr	r3, [pc, #284]	; (28f0 <_spi_interrupt_handler+0x1cc>)
    27d4:	881b      	ldrh	r3, [r3, #0]
    27d6:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    27d8:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    27da:	3b01      	subs	r3, #1
    27dc:	b29b      	uxth	r3, r3
    27de:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
    27e0:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    27e2:	b29b      	uxth	r3, r3
    27e4:	2b00      	cmp	r3, #0
    27e6:	d101      	bne.n	27ec <_spi_interrupt_handler+0xc8>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    27e8:	3301      	adds	r3, #1
    27ea:	7533      	strb	r3, [r6, #20]
		if (0
    27ec:	7963      	ldrb	r3, [r4, #5]
    27ee:	2b01      	cmp	r3, #1
    27f0:	d0cc      	beq.n	278c <_spi_interrupt_handler+0x68>
    27f2:	e7a9      	b.n	2748 <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    27f4:	7850      	ldrb	r0, [r2, #1]
    27f6:	0200      	lsls	r0, r0, #8
    27f8:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
    27fa:	3202      	adds	r2, #2
    27fc:	62e2      	str	r2, [r4, #44]	; 0x2c
    27fe:	e7d2      	b.n	27a6 <_spi_interrupt_handler+0x82>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    2800:	0020      	movs	r0, r4
    2802:	69a3      	ldr	r3, [r4, #24]
    2804:	4798      	blx	r3
    2806:	e7b0      	b.n	276a <_spi_interrupt_handler+0x46>
			if (module->dir == SPI_DIRECTION_WRITE) {
    2808:	7a63      	ldrb	r3, [r4, #9]
    280a:	2b01      	cmp	r3, #1
    280c:	d028      	beq.n	2860 <_spi_interrupt_handler+0x13c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    280e:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    2810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2812:	05db      	lsls	r3, r3, #23
    2814:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    2816:	b2da      	uxtb	r2, r3
    2818:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    281a:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    281c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    281e:	1c51      	adds	r1, r2, #1
    2820:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2822:	79a1      	ldrb	r1, [r4, #6]
    2824:	2901      	cmp	r1, #1
    2826:	d034      	beq.n	2892 <_spi_interrupt_handler+0x16e>
	module->remaining_rx_buffer_length--;
    2828:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    282a:	3b01      	subs	r3, #1
    282c:	b29b      	uxth	r3, r3
    282e:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    2830:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    2832:	b29b      	uxth	r3, r3
    2834:	2b00      	cmp	r3, #0
    2836:	d000      	beq.n	283a <_spi_interrupt_handler+0x116>
    2838:	e79a      	b.n	2770 <_spi_interrupt_handler+0x4c>
					module->status = STATUS_OK;
    283a:	2200      	movs	r2, #0
    283c:	3338      	adds	r3, #56	; 0x38
    283e:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    2840:	3b34      	subs	r3, #52	; 0x34
    2842:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    2844:	7a63      	ldrb	r3, [r4, #9]
    2846:	2b02      	cmp	r3, #2
    2848:	d029      	beq.n	289e <_spi_interrupt_handler+0x17a>
					} else if (module->dir == SPI_DIRECTION_READ) {
    284a:	7a63      	ldrb	r3, [r4, #9]
    284c:	2b00      	cmp	r3, #0
    284e:	d000      	beq.n	2852 <_spi_interrupt_handler+0x12e>
    2850:	e78e      	b.n	2770 <_spi_interrupt_handler+0x4c>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    2852:	07bb      	lsls	r3, r7, #30
    2854:	d400      	bmi.n	2858 <_spi_interrupt_handler+0x134>
    2856:	e78b      	b.n	2770 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    2858:	0020      	movs	r0, r4
    285a:	6923      	ldr	r3, [r4, #16]
    285c:	4798      	blx	r3
    285e:	e787      	b.n	2770 <_spi_interrupt_handler+0x4c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    2860:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
    2862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    2864:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    2866:	3b01      	subs	r3, #1
    2868:	b29b      	uxth	r3, r3
    286a:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
    286c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    286e:	b29b      	uxth	r3, r3
    2870:	2b00      	cmp	r3, #0
    2872:	d000      	beq.n	2876 <_spi_interrupt_handler+0x152>
    2874:	e77c      	b.n	2770 <_spi_interrupt_handler+0x4c>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    2876:	3304      	adds	r3, #4
    2878:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    287a:	2200      	movs	r2, #0
    287c:	3334      	adds	r3, #52	; 0x34
    287e:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    2880:	3b35      	subs	r3, #53	; 0x35
    2882:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    2884:	07fb      	lsls	r3, r7, #31
    2886:	d400      	bmi.n	288a <_spi_interrupt_handler+0x166>
    2888:	e772      	b.n	2770 <_spi_interrupt_handler+0x4c>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    288a:	0020      	movs	r0, r4
    288c:	68e3      	ldr	r3, [r4, #12]
    288e:	4798      	blx	r3
    2890:	e76e      	b.n	2770 <_spi_interrupt_handler+0x4c>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    2892:	0a1b      	lsrs	r3, r3, #8
    2894:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    2896:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2898:	3301      	adds	r3, #1
    289a:	62a3      	str	r3, [r4, #40]	; 0x28
    289c:	e7c4      	b.n	2828 <_spi_interrupt_handler+0x104>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    289e:	077b      	lsls	r3, r7, #29
    28a0:	d400      	bmi.n	28a4 <_spi_interrupt_handler+0x180>
    28a2:	e765      	b.n	2770 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    28a4:	0020      	movs	r0, r4
    28a6:	6963      	ldr	r3, [r4, #20]
    28a8:	4798      	blx	r3
    28aa:	e761      	b.n	2770 <_spi_interrupt_handler+0x4c>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    28ac:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    28ae:	2b01      	cmp	r3, #1
    28b0:	d000      	beq.n	28b4 <_spi_interrupt_handler+0x190>
    28b2:	e763      	b.n	277c <_spi_interrupt_handler+0x58>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    28b4:	79e3      	ldrb	r3, [r4, #7]
    28b6:	2b00      	cmp	r3, #0
    28b8:	d000      	beq.n	28bc <_spi_interrupt_handler+0x198>
    28ba:	e75f      	b.n	277c <_spi_interrupt_handler+0x58>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    28bc:	3302      	adds	r3, #2
    28be:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    28c0:	3301      	adds	r3, #1
    28c2:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    28c4:	2200      	movs	r2, #0
    28c6:	3335      	adds	r3, #53	; 0x35
    28c8:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    28ca:	07fb      	lsls	r3, r7, #31
    28cc:	d400      	bmi.n	28d0 <_spi_interrupt_handler+0x1ac>
    28ce:	e755      	b.n	277c <_spi_interrupt_handler+0x58>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    28d0:	0020      	movs	r0, r4
    28d2:	68e3      	ldr	r3, [r4, #12]
    28d4:	4798      	blx	r3
    28d6:	e751      	b.n	277c <_spi_interrupt_handler+0x58>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    28d8:	2380      	movs	r3, #128	; 0x80
    28da:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    28dc:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    28de:	067b      	lsls	r3, r7, #25
    28e0:	d400      	bmi.n	28e4 <_spi_interrupt_handler+0x1c0>
    28e2:	e74f      	b.n	2784 <_spi_interrupt_handler+0x60>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    28e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    28e6:	0020      	movs	r0, r4
    28e8:	4798      	blx	r3
}
    28ea:	e74b      	b.n	2784 <_spi_interrupt_handler+0x60>
    28ec:	20000a10 	.word	0x20000a10
    28f0:	20000a28 	.word	0x20000a28

000028f4 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    28f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    28f6:	46de      	mov	lr, fp
    28f8:	4657      	mov	r7, sl
    28fa:	464e      	mov	r6, r9
    28fc:	4645      	mov	r5, r8
    28fe:	b5e0      	push	{r5, r6, r7, lr}
    2900:	b091      	sub	sp, #68	; 0x44
    2902:	0005      	movs	r5, r0
    2904:	000c      	movs	r4, r1
    2906:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    2908:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    290a:	0008      	movs	r0, r1
    290c:	4bbc      	ldr	r3, [pc, #752]	; (2c00 <usart_init+0x30c>)
    290e:	4798      	blx	r3
    2910:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    2912:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    2914:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    2916:	07db      	lsls	r3, r3, #31
    2918:	d506      	bpl.n	2928 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    291a:	b011      	add	sp, #68	; 0x44
    291c:	bc3c      	pop	{r2, r3, r4, r5}
    291e:	4690      	mov	r8, r2
    2920:	4699      	mov	r9, r3
    2922:	46a2      	mov	sl, r4
    2924:	46ab      	mov	fp, r5
    2926:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    2928:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    292a:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    292c:	079b      	lsls	r3, r3, #30
    292e:	d4f4      	bmi.n	291a <usart_init+0x26>
    2930:	49b4      	ldr	r1, [pc, #720]	; (2c04 <usart_init+0x310>)
    2932:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    2934:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    2936:	2301      	movs	r3, #1
    2938:	40bb      	lsls	r3, r7
    293a:	4303      	orrs	r3, r0
    293c:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    293e:	a90f      	add	r1, sp, #60	; 0x3c
    2940:	272d      	movs	r7, #45	; 0x2d
    2942:	5df3      	ldrb	r3, [r6, r7]
    2944:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2946:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    2948:	b2d3      	uxtb	r3, r2
    294a:	9302      	str	r3, [sp, #8]
    294c:	0018      	movs	r0, r3
    294e:	4bae      	ldr	r3, [pc, #696]	; (2c08 <usart_init+0x314>)
    2950:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    2952:	9802      	ldr	r0, [sp, #8]
    2954:	4bad      	ldr	r3, [pc, #692]	; (2c0c <usart_init+0x318>)
    2956:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    2958:	5df0      	ldrb	r0, [r6, r7]
    295a:	2100      	movs	r1, #0
    295c:	4bac      	ldr	r3, [pc, #688]	; (2c10 <usart_init+0x31c>)
    295e:	4798      	blx	r3
	module->character_size = config->character_size;
    2960:	7af3      	ldrb	r3, [r6, #11]
    2962:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    2964:	2324      	movs	r3, #36	; 0x24
    2966:	5cf3      	ldrb	r3, [r6, r3]
    2968:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    296a:	2325      	movs	r3, #37	; 0x25
    296c:	5cf3      	ldrb	r3, [r6, r3]
    296e:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    2970:	7ef3      	ldrb	r3, [r6, #27]
    2972:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    2974:	7f33      	ldrb	r3, [r6, #28]
    2976:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2978:	682b      	ldr	r3, [r5, #0]
    297a:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    297c:	0018      	movs	r0, r3
    297e:	4ba0      	ldr	r3, [pc, #640]	; (2c00 <usart_init+0x30c>)
    2980:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2982:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    2984:	2200      	movs	r2, #0
    2986:	230e      	movs	r3, #14
    2988:	a906      	add	r1, sp, #24
    298a:	468c      	mov	ip, r1
    298c:	4463      	add	r3, ip
    298e:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    2990:	8a32      	ldrh	r2, [r6, #16]
    2992:	9202      	str	r2, [sp, #8]
    2994:	2380      	movs	r3, #128	; 0x80
    2996:	01db      	lsls	r3, r3, #7
    2998:	429a      	cmp	r2, r3
    299a:	d100      	bne.n	299e <usart_init+0xaa>
    299c:	e09e      	b.n	2adc <usart_init+0x1e8>
    299e:	d90f      	bls.n	29c0 <usart_init+0xcc>
    29a0:	23c0      	movs	r3, #192	; 0xc0
    29a2:	01db      	lsls	r3, r3, #7
    29a4:	9a02      	ldr	r2, [sp, #8]
    29a6:	429a      	cmp	r2, r3
    29a8:	d100      	bne.n	29ac <usart_init+0xb8>
    29aa:	e092      	b.n	2ad2 <usart_init+0x1de>
    29ac:	2380      	movs	r3, #128	; 0x80
    29ae:	021b      	lsls	r3, r3, #8
    29b0:	429a      	cmp	r2, r3
    29b2:	d000      	beq.n	29b6 <usart_init+0xc2>
    29b4:	e11f      	b.n	2bf6 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    29b6:	2303      	movs	r3, #3
    29b8:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    29ba:	2300      	movs	r3, #0
    29bc:	9307      	str	r3, [sp, #28]
    29be:	e008      	b.n	29d2 <usart_init+0xde>
	switch (config->sample_rate) {
    29c0:	2380      	movs	r3, #128	; 0x80
    29c2:	019b      	lsls	r3, r3, #6
    29c4:	429a      	cmp	r2, r3
    29c6:	d000      	beq.n	29ca <usart_init+0xd6>
    29c8:	e115      	b.n	2bf6 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    29ca:	2310      	movs	r3, #16
    29cc:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    29ce:	3b0f      	subs	r3, #15
    29d0:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    29d2:	6833      	ldr	r3, [r6, #0]
    29d4:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    29d6:	68f3      	ldr	r3, [r6, #12]
    29d8:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    29da:	6973      	ldr	r3, [r6, #20]
    29dc:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    29de:	7e33      	ldrb	r3, [r6, #24]
    29e0:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    29e2:	2326      	movs	r3, #38	; 0x26
    29e4:	5cf3      	ldrb	r3, [r6, r3]
    29e6:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    29e8:	6873      	ldr	r3, [r6, #4]
    29ea:	4699      	mov	r9, r3
	switch (transfer_mode)
    29ec:	2b00      	cmp	r3, #0
    29ee:	d100      	bne.n	29f2 <usart_init+0xfe>
    29f0:	e0a0      	b.n	2b34 <usart_init+0x240>
    29f2:	2380      	movs	r3, #128	; 0x80
    29f4:	055b      	lsls	r3, r3, #21
    29f6:	4599      	cmp	r9, r3
    29f8:	d100      	bne.n	29fc <usart_init+0x108>
    29fa:	e084      	b.n	2b06 <usart_init+0x212>
	if(config->encoding_format_enable) {
    29fc:	7e73      	ldrb	r3, [r6, #25]
    29fe:	2b00      	cmp	r3, #0
    2a00:	d002      	beq.n	2a08 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    2a02:	7eb3      	ldrb	r3, [r6, #26]
    2a04:	4642      	mov	r2, r8
    2a06:	7393      	strb	r3, [r2, #14]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2a08:	682a      	ldr	r2, [r5, #0]
    2a0a:	9f02      	ldr	r7, [sp, #8]
	return (usart_hw->SYNCBUSY.reg);
    2a0c:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2a0e:	2b00      	cmp	r3, #0
    2a10:	d1fc      	bne.n	2a0c <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    2a12:	330e      	adds	r3, #14
    2a14:	aa06      	add	r2, sp, #24
    2a16:	4694      	mov	ip, r2
    2a18:	4463      	add	r3, ip
    2a1a:	881b      	ldrh	r3, [r3, #0]
    2a1c:	4642      	mov	r2, r8
    2a1e:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    2a20:	9b05      	ldr	r3, [sp, #20]
    2a22:	9a03      	ldr	r2, [sp, #12]
    2a24:	4313      	orrs	r3, r2
    2a26:	9a04      	ldr	r2, [sp, #16]
    2a28:	4313      	orrs	r3, r2
    2a2a:	464a      	mov	r2, r9
    2a2c:	4313      	orrs	r3, r2
    2a2e:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2a30:	465b      	mov	r3, fp
    2a32:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    2a34:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2a36:	4653      	mov	r3, sl
    2a38:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    2a3a:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    2a3c:	2327      	movs	r3, #39	; 0x27
    2a3e:	5cf3      	ldrb	r3, [r6, r3]
    2a40:	2b00      	cmp	r3, #0
    2a42:	d101      	bne.n	2a48 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    2a44:	3304      	adds	r3, #4
    2a46:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    2a48:	7e73      	ldrb	r3, [r6, #25]
    2a4a:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    2a4c:	7f32      	ldrb	r2, [r6, #28]
    2a4e:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    2a50:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    2a52:	7f72      	ldrb	r2, [r6, #29]
    2a54:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    2a56:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    2a58:	2224      	movs	r2, #36	; 0x24
    2a5a:	5cb2      	ldrb	r2, [r6, r2]
    2a5c:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    2a5e:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    2a60:	2225      	movs	r2, #37	; 0x25
    2a62:	5cb2      	ldrb	r2, [r6, r2]
    2a64:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    2a66:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    2a68:	7ab1      	ldrb	r1, [r6, #10]
    2a6a:	7af2      	ldrb	r2, [r6, #11]
    2a6c:	4311      	orrs	r1, r2
    2a6e:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    2a70:	8933      	ldrh	r3, [r6, #8]
    2a72:	2bff      	cmp	r3, #255	; 0xff
    2a74:	d100      	bne.n	2a78 <usart_init+0x184>
    2a76:	e081      	b.n	2b7c <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    2a78:	2280      	movs	r2, #128	; 0x80
    2a7a:	0452      	lsls	r2, r2, #17
    2a7c:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    2a7e:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    2a80:	232c      	movs	r3, #44	; 0x2c
    2a82:	5cf3      	ldrb	r3, [r6, r3]
    2a84:	2b00      	cmp	r3, #0
    2a86:	d103      	bne.n	2a90 <usart_init+0x19c>
    2a88:	4b62      	ldr	r3, [pc, #392]	; (2c14 <usart_init+0x320>)
    2a8a:	789b      	ldrb	r3, [r3, #2]
    2a8c:	079b      	lsls	r3, r3, #30
    2a8e:	d501      	bpl.n	2a94 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    2a90:	2380      	movs	r3, #128	; 0x80
    2a92:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    2a94:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2a96:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2a98:	2b00      	cmp	r3, #0
    2a9a:	d1fc      	bne.n	2a96 <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    2a9c:	4643      	mov	r3, r8
    2a9e:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2aa0:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2aa2:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2aa4:	2b00      	cmp	r3, #0
    2aa6:	d1fc      	bne.n	2aa2 <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    2aa8:	4643      	mov	r3, r8
    2aaa:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2aac:	ab0e      	add	r3, sp, #56	; 0x38
    2aae:	2280      	movs	r2, #128	; 0x80
    2ab0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2ab2:	2200      	movs	r2, #0
    2ab4:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    2ab6:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    2ab8:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    2aba:	6b33      	ldr	r3, [r6, #48]	; 0x30
    2abc:	930a      	str	r3, [sp, #40]	; 0x28
    2abe:	6b73      	ldr	r3, [r6, #52]	; 0x34
    2ac0:	930b      	str	r3, [sp, #44]	; 0x2c
    2ac2:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    2ac4:	930c      	str	r3, [sp, #48]	; 0x30
    2ac6:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    2ac8:	9302      	str	r3, [sp, #8]
    2aca:	930d      	str	r3, [sp, #52]	; 0x34
    2acc:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2ace:	ae0a      	add	r6, sp, #40	; 0x28
    2ad0:	e063      	b.n	2b9a <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    2ad2:	2308      	movs	r3, #8
    2ad4:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    2ad6:	3b07      	subs	r3, #7
    2ad8:	9307      	str	r3, [sp, #28]
    2ada:	e77a      	b.n	29d2 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    2adc:	6833      	ldr	r3, [r6, #0]
    2ade:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    2ae0:	68f3      	ldr	r3, [r6, #12]
    2ae2:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    2ae4:	6973      	ldr	r3, [r6, #20]
    2ae6:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2ae8:	7e33      	ldrb	r3, [r6, #24]
    2aea:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2aec:	2326      	movs	r3, #38	; 0x26
    2aee:	5cf3      	ldrb	r3, [r6, r3]
    2af0:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    2af2:	6873      	ldr	r3, [r6, #4]
    2af4:	4699      	mov	r9, r3
	switch (transfer_mode)
    2af6:	2b00      	cmp	r3, #0
    2af8:	d018      	beq.n	2b2c <usart_init+0x238>
    2afa:	2380      	movs	r3, #128	; 0x80
    2afc:	055b      	lsls	r3, r3, #21
    2afe:	4599      	cmp	r9, r3
    2b00:	d001      	beq.n	2b06 <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    2b02:	2000      	movs	r0, #0
    2b04:	e025      	b.n	2b52 <usart_init+0x25e>
			if (!config->use_external_clock) {
    2b06:	2327      	movs	r3, #39	; 0x27
    2b08:	5cf3      	ldrb	r3, [r6, r3]
    2b0a:	2b00      	cmp	r3, #0
    2b0c:	d000      	beq.n	2b10 <usart_init+0x21c>
    2b0e:	e775      	b.n	29fc <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    2b10:	6a33      	ldr	r3, [r6, #32]
    2b12:	001f      	movs	r7, r3
    2b14:	b2c0      	uxtb	r0, r0
    2b16:	4b40      	ldr	r3, [pc, #256]	; (2c18 <usart_init+0x324>)
    2b18:	4798      	blx	r3
    2b1a:	0001      	movs	r1, r0
    2b1c:	220e      	movs	r2, #14
    2b1e:	ab06      	add	r3, sp, #24
    2b20:	469c      	mov	ip, r3
    2b22:	4462      	add	r2, ip
    2b24:	0038      	movs	r0, r7
    2b26:	4b3d      	ldr	r3, [pc, #244]	; (2c1c <usart_init+0x328>)
    2b28:	4798      	blx	r3
    2b2a:	e012      	b.n	2b52 <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    2b2c:	2308      	movs	r3, #8
    2b2e:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2b30:	2300      	movs	r3, #0
    2b32:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    2b34:	2327      	movs	r3, #39	; 0x27
    2b36:	5cf3      	ldrb	r3, [r6, r3]
    2b38:	2b00      	cmp	r3, #0
    2b3a:	d00e      	beq.n	2b5a <usart_init+0x266>
				status_code =
    2b3c:	9b06      	ldr	r3, [sp, #24]
    2b3e:	9300      	str	r3, [sp, #0]
    2b40:	9b07      	ldr	r3, [sp, #28]
    2b42:	220e      	movs	r2, #14
    2b44:	a906      	add	r1, sp, #24
    2b46:	468c      	mov	ip, r1
    2b48:	4462      	add	r2, ip
    2b4a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    2b4c:	6a30      	ldr	r0, [r6, #32]
    2b4e:	4f34      	ldr	r7, [pc, #208]	; (2c20 <usart_init+0x32c>)
    2b50:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    2b52:	2800      	cmp	r0, #0
    2b54:	d000      	beq.n	2b58 <usart_init+0x264>
    2b56:	e6e0      	b.n	291a <usart_init+0x26>
    2b58:	e750      	b.n	29fc <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    2b5a:	6a33      	ldr	r3, [r6, #32]
    2b5c:	001f      	movs	r7, r3
    2b5e:	b2c0      	uxtb	r0, r0
    2b60:	4b2d      	ldr	r3, [pc, #180]	; (2c18 <usart_init+0x324>)
    2b62:	4798      	blx	r3
    2b64:	0001      	movs	r1, r0
				status_code =
    2b66:	9b06      	ldr	r3, [sp, #24]
    2b68:	9300      	str	r3, [sp, #0]
    2b6a:	9b07      	ldr	r3, [sp, #28]
    2b6c:	220e      	movs	r2, #14
    2b6e:	a806      	add	r0, sp, #24
    2b70:	4684      	mov	ip, r0
    2b72:	4462      	add	r2, ip
    2b74:	0038      	movs	r0, r7
    2b76:	4f2a      	ldr	r7, [pc, #168]	; (2c20 <usart_init+0x32c>)
    2b78:	47b8      	blx	r7
    2b7a:	e7ea      	b.n	2b52 <usart_init+0x25e>
		if(config->lin_slave_enable) {
    2b7c:	7ef3      	ldrb	r3, [r6, #27]
    2b7e:	2b00      	cmp	r3, #0
    2b80:	d100      	bne.n	2b84 <usart_init+0x290>
    2b82:	e77d      	b.n	2a80 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    2b84:	2380      	movs	r3, #128	; 0x80
    2b86:	04db      	lsls	r3, r3, #19
    2b88:	431f      	orrs	r7, r3
    2b8a:	e779      	b.n	2a80 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    2b8c:	0020      	movs	r0, r4
    2b8e:	4b25      	ldr	r3, [pc, #148]	; (2c24 <usart_init+0x330>)
    2b90:	4798      	blx	r3
    2b92:	e007      	b.n	2ba4 <usart_init+0x2b0>
    2b94:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    2b96:	2f04      	cmp	r7, #4
    2b98:	d00d      	beq.n	2bb6 <usart_init+0x2c2>
    2b9a:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2b9c:	00bb      	lsls	r3, r7, #2
    2b9e:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    2ba0:	2800      	cmp	r0, #0
    2ba2:	d0f3      	beq.n	2b8c <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    2ba4:	1c43      	adds	r3, r0, #1
    2ba6:	d0f5      	beq.n	2b94 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    2ba8:	a90e      	add	r1, sp, #56	; 0x38
    2baa:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    2bac:	0c00      	lsrs	r0, r0, #16
    2bae:	b2c0      	uxtb	r0, r0
    2bb0:	4b1d      	ldr	r3, [pc, #116]	; (2c28 <usart_init+0x334>)
    2bb2:	4798      	blx	r3
    2bb4:	e7ee      	b.n	2b94 <usart_init+0x2a0>
		module->callback[i]            = NULL;
    2bb6:	2300      	movs	r3, #0
    2bb8:	60eb      	str	r3, [r5, #12]
    2bba:	612b      	str	r3, [r5, #16]
    2bbc:	616b      	str	r3, [r5, #20]
    2bbe:	61ab      	str	r3, [r5, #24]
    2bc0:	61eb      	str	r3, [r5, #28]
    2bc2:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    2bc4:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    2bc6:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    2bc8:	2200      	movs	r2, #0
    2bca:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    2bcc:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    2bce:	3330      	adds	r3, #48	; 0x30
    2bd0:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    2bd2:	3301      	adds	r3, #1
    2bd4:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    2bd6:	3301      	adds	r3, #1
    2bd8:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    2bda:	3301      	adds	r3, #1
    2bdc:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    2bde:	6828      	ldr	r0, [r5, #0]
    2be0:	4b07      	ldr	r3, [pc, #28]	; (2c00 <usart_init+0x30c>)
    2be2:	4798      	blx	r3
    2be4:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    2be6:	4911      	ldr	r1, [pc, #68]	; (2c2c <usart_init+0x338>)
    2be8:	4b11      	ldr	r3, [pc, #68]	; (2c30 <usart_init+0x33c>)
    2bea:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    2bec:	00a4      	lsls	r4, r4, #2
    2bee:	4b11      	ldr	r3, [pc, #68]	; (2c34 <usart_init+0x340>)
    2bf0:	50e5      	str	r5, [r4, r3]
	return status_code;
    2bf2:	2000      	movs	r0, #0
    2bf4:	e691      	b.n	291a <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    2bf6:	2310      	movs	r3, #16
    2bf8:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2bfa:	2300      	movs	r3, #0
    2bfc:	9307      	str	r3, [sp, #28]
    2bfe:	e6e8      	b.n	29d2 <usart_init+0xde>
    2c00:	000020ad 	.word	0x000020ad
    2c04:	40000400 	.word	0x40000400
    2c08:	000035a5 	.word	0x000035a5
    2c0c:	00003519 	.word	0x00003519
    2c10:	00001ee9 	.word	0x00001ee9
    2c14:	41002000 	.word	0x41002000
    2c18:	000035c1 	.word	0x000035c1
    2c1c:	00001e2b 	.word	0x00001e2b
    2c20:	00001e55 	.word	0x00001e55
    2c24:	00001f35 	.word	0x00001f35
    2c28:	0000369d 	.word	0x0000369d
    2c2c:	00002dd5 	.word	0x00002dd5
    2c30:	000020e9 	.word	0x000020e9
    2c34:	20000a10 	.word	0x20000a10

00002c38 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    2c38:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    2c3a:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    2c3c:	2a00      	cmp	r2, #0
    2c3e:	d101      	bne.n	2c44 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    2c40:	0018      	movs	r0, r3
    2c42:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    2c44:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    2c46:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    2c48:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    2c4a:	2a00      	cmp	r2, #0
    2c4c:	d1f8      	bne.n	2c40 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    2c4e:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    2c50:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    2c52:	2a00      	cmp	r2, #0
    2c54:	d1fc      	bne.n	2c50 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    2c56:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    2c58:	2102      	movs	r1, #2
    2c5a:	7e1a      	ldrb	r2, [r3, #24]
    2c5c:	420a      	tst	r2, r1
    2c5e:	d0fc      	beq.n	2c5a <usart_write_wait+0x22>
	return STATUS_OK;
    2c60:	2300      	movs	r3, #0
    2c62:	e7ed      	b.n	2c40 <usart_write_wait+0x8>

00002c64 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    2c64:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    2c66:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    2c68:	2a00      	cmp	r2, #0
    2c6a:	d101      	bne.n	2c70 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    2c6c:	0018      	movs	r0, r3
    2c6e:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    2c70:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    2c72:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    2c74:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    2c76:	2a00      	cmp	r2, #0
    2c78:	d1f8      	bne.n	2c6c <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    2c7a:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    2c7c:	7e10      	ldrb	r0, [r2, #24]
    2c7e:	0740      	lsls	r0, r0, #29
    2c80:	d5f4      	bpl.n	2c6c <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    2c82:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2c84:	2b00      	cmp	r3, #0
    2c86:	d1fc      	bne.n	2c82 <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2c88:	8b53      	ldrh	r3, [r2, #26]
    2c8a:	b2db      	uxtb	r3, r3
	if (error_code) {
    2c8c:	0698      	lsls	r0, r3, #26
    2c8e:	d01d      	beq.n	2ccc <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    2c90:	0798      	lsls	r0, r3, #30
    2c92:	d503      	bpl.n	2c9c <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    2c94:	2302      	movs	r3, #2
    2c96:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    2c98:	3318      	adds	r3, #24
    2c9a:	e7e7      	b.n	2c6c <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2c9c:	0758      	lsls	r0, r3, #29
    2c9e:	d503      	bpl.n	2ca8 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2ca0:	2304      	movs	r3, #4
    2ca2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    2ca4:	331a      	adds	r3, #26
    2ca6:	e7e1      	b.n	2c6c <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2ca8:	07d8      	lsls	r0, r3, #31
    2caa:	d503      	bpl.n	2cb4 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2cac:	2301      	movs	r3, #1
    2cae:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    2cb0:	3312      	adds	r3, #18
    2cb2:	e7db      	b.n	2c6c <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    2cb4:	06d8      	lsls	r0, r3, #27
    2cb6:	d503      	bpl.n	2cc0 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2cb8:	2310      	movs	r3, #16
    2cba:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    2cbc:	3332      	adds	r3, #50	; 0x32
    2cbe:	e7d5      	b.n	2c6c <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    2cc0:	069b      	lsls	r3, r3, #26
    2cc2:	d503      	bpl.n	2ccc <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2cc4:	2320      	movs	r3, #32
    2cc6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    2cc8:	3321      	adds	r3, #33	; 0x21
    2cca:	e7cf      	b.n	2c6c <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    2ccc:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    2cce:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    2cd0:	2300      	movs	r3, #0
    2cd2:	e7cb      	b.n	2c6c <usart_read_wait+0x8>

00002cd4 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    2cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2cd6:	0006      	movs	r6, r0
    2cd8:	000c      	movs	r4, r1
    2cda:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2cdc:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    2cde:	4b0a      	ldr	r3, [pc, #40]	; (2d08 <_usart_write_buffer+0x34>)
    2ce0:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    2ce2:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
    2ce4:	b29b      	uxth	r3, r3
    2ce6:	2b00      	cmp	r3, #0
    2ce8:	d003      	beq.n	2cf2 <_usart_write_buffer+0x1e>
	cpu_irq_leave_critical();
    2cea:	4b08      	ldr	r3, [pc, #32]	; (2d0c <_usart_write_buffer+0x38>)
    2cec:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    2cee:	2005      	movs	r0, #5

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;

	return STATUS_OK;
}
    2cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_tx_buffer_length = length;
    2cf2:	85f5      	strh	r5, [r6, #46]	; 0x2e
    2cf4:	4b05      	ldr	r3, [pc, #20]	; (2d0c <_usart_write_buffer+0x38>)
    2cf6:	4798      	blx	r3
	module->tx_buffer_ptr              = tx_data;
    2cf8:	62b4      	str	r4, [r6, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
    2cfa:	2205      	movs	r2, #5
    2cfc:	2333      	movs	r3, #51	; 0x33
    2cfe:	54f2      	strb	r2, [r6, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    2d00:	3b32      	subs	r3, #50	; 0x32
    2d02:	75bb      	strb	r3, [r7, #22]
	return STATUS_OK;
    2d04:	2000      	movs	r0, #0
    2d06:	e7f3      	b.n	2cf0 <_usart_write_buffer+0x1c>
    2d08:	00001b05 	.word	0x00001b05
    2d0c:	00001b45 	.word	0x00001b45

00002d10 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    2d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2d12:	0004      	movs	r4, r0
    2d14:	000d      	movs	r5, r1
    2d16:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2d18:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    2d1a:	4b0f      	ldr	r3, [pc, #60]	; (2d58 <_usart_read_buffer+0x48>)
    2d1c:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    2d1e:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    2d20:	b29b      	uxth	r3, r3
    2d22:	2b00      	cmp	r3, #0
    2d24:	d003      	beq.n	2d2e <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    2d26:	4b0d      	ldr	r3, [pc, #52]	; (2d5c <_usart_read_buffer+0x4c>)
    2d28:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    2d2a:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    2d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    2d2e:	85a6      	strh	r6, [r4, #44]	; 0x2c
    2d30:	4b0a      	ldr	r3, [pc, #40]	; (2d5c <_usart_read_buffer+0x4c>)
    2d32:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    2d34:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    2d36:	2205      	movs	r2, #5
    2d38:	2332      	movs	r3, #50	; 0x32
    2d3a:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    2d3c:	3b2e      	subs	r3, #46	; 0x2e
    2d3e:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    2d40:	7a23      	ldrb	r3, [r4, #8]
    2d42:	2b00      	cmp	r3, #0
    2d44:	d001      	beq.n	2d4a <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    2d46:	2320      	movs	r3, #32
    2d48:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    2d4a:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
    2d4c:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
    2d4e:	2b00      	cmp	r3, #0
    2d50:	d0ec      	beq.n	2d2c <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    2d52:	2308      	movs	r3, #8
    2d54:	75bb      	strb	r3, [r7, #22]
    2d56:	e7e9      	b.n	2d2c <_usart_read_buffer+0x1c>
    2d58:	00001b05 	.word	0x00001b05
    2d5c:	00001b45 	.word	0x00001b45

00002d60 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    2d60:	1c93      	adds	r3, r2, #2
    2d62:	009b      	lsls	r3, r3, #2
    2d64:	18c3      	adds	r3, r0, r3
    2d66:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    2d68:	2130      	movs	r1, #48	; 0x30
    2d6a:	2301      	movs	r3, #1
    2d6c:	4093      	lsls	r3, r2
    2d6e:	001a      	movs	r2, r3
    2d70:	5c43      	ldrb	r3, [r0, r1]
    2d72:	4313      	orrs	r3, r2
    2d74:	5443      	strb	r3, [r0, r1]
}
    2d76:	4770      	bx	lr

00002d78 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    2d78:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    2d7a:	2317      	movs	r3, #23
	if (length == 0) {
    2d7c:	2a00      	cmp	r2, #0
    2d7e:	d101      	bne.n	2d84 <usart_write_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
}
    2d80:	0018      	movs	r0, r3
    2d82:	bd10      	pop	{r4, pc}
	if (!(module->transmitter_enabled)) {
    2d84:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    2d86:	3305      	adds	r3, #5
	if (!(module->transmitter_enabled)) {
    2d88:	2c00      	cmp	r4, #0
    2d8a:	d0f9      	beq.n	2d80 <usart_write_buffer_job+0x8>
	return _usart_write_buffer(module, tx_data, length);
    2d8c:	4b01      	ldr	r3, [pc, #4]	; (2d94 <usart_write_buffer_job+0x1c>)
    2d8e:	4798      	blx	r3
    2d90:	0003      	movs	r3, r0
    2d92:	e7f5      	b.n	2d80 <usart_write_buffer_job+0x8>
    2d94:	00002cd5 	.word	0x00002cd5

00002d98 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    2d98:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    2d9a:	2317      	movs	r3, #23
	if (length == 0) {
    2d9c:	2a00      	cmp	r2, #0
    2d9e:	d101      	bne.n	2da4 <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
    2da0:	0018      	movs	r0, r3
    2da2:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
    2da4:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
    2da6:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
    2da8:	2c00      	cmp	r4, #0
    2daa:	d0f9      	beq.n	2da0 <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
    2dac:	4b01      	ldr	r3, [pc, #4]	; (2db4 <usart_read_buffer_job+0x1c>)
    2dae:	4798      	blx	r3
    2db0:	0003      	movs	r3, r0
    2db2:	e7f5      	b.n	2da0 <usart_read_buffer_job+0x8>
    2db4:	00002d11 	.word	0x00002d11

00002db8 <usart_get_job_status>:
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
    2db8:	2900      	cmp	r1, #0
    2dba:	d003      	beq.n	2dc4 <usart_get_job_status+0xc>
    2dbc:	2901      	cmp	r1, #1
    2dbe:	d005      	beq.n	2dcc <usart_get_job_status+0x14>
	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
			break;

	default:
			status_code = STATUS_ERR_INVALID_ARG;
    2dc0:	2017      	movs	r0, #23
    2dc2:	e002      	b.n	2dca <usart_get_job_status+0x12>
			status_code = module->rx_status;
    2dc4:	2332      	movs	r3, #50	; 0x32
    2dc6:	5cc0      	ldrb	r0, [r0, r3]
    2dc8:	b2c0      	uxtb	r0, r0
			break;
	}

	return status_code;
}
    2dca:	4770      	bx	lr
			status_code = module->tx_status;
    2dcc:	2333      	movs	r3, #51	; 0x33
    2dce:	5cc0      	ldrb	r0, [r0, r3]
    2dd0:	b2c0      	uxtb	r0, r0
			break;
    2dd2:	e7fa      	b.n	2dca <usart_get_job_status+0x12>

00002dd4 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    2dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    2dd6:	0080      	lsls	r0, r0, #2
    2dd8:	4b62      	ldr	r3, [pc, #392]	; (2f64 <_usart_interrupt_handler+0x190>)
    2dda:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    2ddc:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2dde:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    2de0:	2b00      	cmp	r3, #0
    2de2:	d1fc      	bne.n	2dde <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    2de4:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    2de6:	7da6      	ldrb	r6, [r4, #22]
    2de8:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    2dea:	2330      	movs	r3, #48	; 0x30
    2dec:	5ceb      	ldrb	r3, [r5, r3]
    2dee:	2231      	movs	r2, #49	; 0x31
    2df0:	5caf      	ldrb	r7, [r5, r2]
    2df2:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    2df4:	07f3      	lsls	r3, r6, #31
    2df6:	d522      	bpl.n	2e3e <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    2df8:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    2dfa:	b29b      	uxth	r3, r3
    2dfc:	2b00      	cmp	r3, #0
    2dfe:	d01c      	beq.n	2e3a <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2e00:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    2e02:	7813      	ldrb	r3, [r2, #0]
    2e04:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    2e06:	1c51      	adds	r1, r2, #1
    2e08:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2e0a:	7969      	ldrb	r1, [r5, #5]
    2e0c:	2901      	cmp	r1, #1
    2e0e:	d00e      	beq.n	2e2e <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2e10:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    2e12:	05db      	lsls	r3, r3, #23
    2e14:	0ddb      	lsrs	r3, r3, #23
    2e16:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    2e18:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    2e1a:	3b01      	subs	r3, #1
    2e1c:	b29b      	uxth	r3, r3
    2e1e:	85eb      	strh	r3, [r5, #46]	; 0x2e
    2e20:	2b00      	cmp	r3, #0
    2e22:	d10c      	bne.n	2e3e <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2e24:	3301      	adds	r3, #1
    2e26:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    2e28:	3301      	adds	r3, #1
    2e2a:	75a3      	strb	r3, [r4, #22]
    2e2c:	e007      	b.n	2e3e <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    2e2e:	7851      	ldrb	r1, [r2, #1]
    2e30:	0209      	lsls	r1, r1, #8
    2e32:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    2e34:	3202      	adds	r2, #2
    2e36:	62aa      	str	r2, [r5, #40]	; 0x28
    2e38:	e7eb      	b.n	2e12 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2e3a:	2301      	movs	r3, #1
    2e3c:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    2e3e:	07b3      	lsls	r3, r6, #30
    2e40:	d506      	bpl.n	2e50 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    2e42:	2302      	movs	r3, #2
    2e44:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    2e46:	2200      	movs	r2, #0
    2e48:	3331      	adds	r3, #49	; 0x31
    2e4a:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    2e4c:	07fb      	lsls	r3, r7, #31
    2e4e:	d41a      	bmi.n	2e86 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    2e50:	0773      	lsls	r3, r6, #29
    2e52:	d565      	bpl.n	2f20 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    2e54:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2e56:	b29b      	uxth	r3, r3
    2e58:	2b00      	cmp	r3, #0
    2e5a:	d05f      	beq.n	2f1c <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2e5c:	8b63      	ldrh	r3, [r4, #26]
    2e5e:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    2e60:	071a      	lsls	r2, r3, #28
    2e62:	d414      	bmi.n	2e8e <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2e64:	223f      	movs	r2, #63	; 0x3f
    2e66:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    2e68:	2b00      	cmp	r3, #0
    2e6a:	d034      	beq.n	2ed6 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    2e6c:	079a      	lsls	r2, r3, #30
    2e6e:	d511      	bpl.n	2e94 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    2e70:	221a      	movs	r2, #26
    2e72:	2332      	movs	r3, #50	; 0x32
    2e74:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    2e76:	3b30      	subs	r3, #48	; 0x30
    2e78:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    2e7a:	077b      	lsls	r3, r7, #29
    2e7c:	d550      	bpl.n	2f20 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    2e7e:	0028      	movs	r0, r5
    2e80:	696b      	ldr	r3, [r5, #20]
    2e82:	4798      	blx	r3
    2e84:	e04c      	b.n	2f20 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    2e86:	0028      	movs	r0, r5
    2e88:	68eb      	ldr	r3, [r5, #12]
    2e8a:	4798      	blx	r3
    2e8c:	e7e0      	b.n	2e50 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    2e8e:	2237      	movs	r2, #55	; 0x37
    2e90:	4013      	ands	r3, r2
    2e92:	e7e9      	b.n	2e68 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2e94:	075a      	lsls	r2, r3, #29
    2e96:	d505      	bpl.n	2ea4 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    2e98:	221e      	movs	r2, #30
    2e9a:	2332      	movs	r3, #50	; 0x32
    2e9c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2e9e:	3b2e      	subs	r3, #46	; 0x2e
    2ea0:	8363      	strh	r3, [r4, #26]
    2ea2:	e7ea      	b.n	2e7a <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2ea4:	07da      	lsls	r2, r3, #31
    2ea6:	d505      	bpl.n	2eb4 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    2ea8:	2213      	movs	r2, #19
    2eaa:	2332      	movs	r3, #50	; 0x32
    2eac:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2eae:	3b31      	subs	r3, #49	; 0x31
    2eb0:	8363      	strh	r3, [r4, #26]
    2eb2:	e7e2      	b.n	2e7a <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    2eb4:	06da      	lsls	r2, r3, #27
    2eb6:	d505      	bpl.n	2ec4 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    2eb8:	2242      	movs	r2, #66	; 0x42
    2eba:	2332      	movs	r3, #50	; 0x32
    2ebc:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2ebe:	3b22      	subs	r3, #34	; 0x22
    2ec0:	8363      	strh	r3, [r4, #26]
    2ec2:	e7da      	b.n	2e7a <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    2ec4:	2220      	movs	r2, #32
    2ec6:	421a      	tst	r2, r3
    2ec8:	d0d7      	beq.n	2e7a <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    2eca:	3221      	adds	r2, #33	; 0x21
    2ecc:	2332      	movs	r3, #50	; 0x32
    2ece:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2ed0:	3b12      	subs	r3, #18
    2ed2:	8363      	strh	r3, [r4, #26]
    2ed4:	e7d1      	b.n	2e7a <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    2ed6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    2ed8:	05db      	lsls	r3, r3, #23
    2eda:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    2edc:	b2da      	uxtb	r2, r3
    2ede:	6a69      	ldr	r1, [r5, #36]	; 0x24
    2ee0:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    2ee2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    2ee4:	1c51      	adds	r1, r2, #1
    2ee6:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2ee8:	7969      	ldrb	r1, [r5, #5]
    2eea:	2901      	cmp	r1, #1
    2eec:	d010      	beq.n	2f10 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    2eee:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2ef0:	3b01      	subs	r3, #1
    2ef2:	b29b      	uxth	r3, r3
    2ef4:	85ab      	strh	r3, [r5, #44]	; 0x2c
    2ef6:	2b00      	cmp	r3, #0
    2ef8:	d112      	bne.n	2f20 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2efa:	3304      	adds	r3, #4
    2efc:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    2efe:	2200      	movs	r2, #0
    2f00:	332e      	adds	r3, #46	; 0x2e
    2f02:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    2f04:	07bb      	lsls	r3, r7, #30
    2f06:	d50b      	bpl.n	2f20 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    2f08:	0028      	movs	r0, r5
    2f0a:	692b      	ldr	r3, [r5, #16]
    2f0c:	4798      	blx	r3
    2f0e:	e007      	b.n	2f20 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    2f10:	0a1b      	lsrs	r3, r3, #8
    2f12:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    2f14:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    2f16:	3301      	adds	r3, #1
    2f18:	626b      	str	r3, [r5, #36]	; 0x24
    2f1a:	e7e8      	b.n	2eee <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2f1c:	2304      	movs	r3, #4
    2f1e:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    2f20:	06f3      	lsls	r3, r6, #27
    2f22:	d504      	bpl.n	2f2e <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    2f24:	2310      	movs	r3, #16
    2f26:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    2f28:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    2f2a:	06fb      	lsls	r3, r7, #27
    2f2c:	d40e      	bmi.n	2f4c <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    2f2e:	06b3      	lsls	r3, r6, #26
    2f30:	d504      	bpl.n	2f3c <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    2f32:	2320      	movs	r3, #32
    2f34:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    2f36:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    2f38:	073b      	lsls	r3, r7, #28
    2f3a:	d40b      	bmi.n	2f54 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    2f3c:	0733      	lsls	r3, r6, #28
    2f3e:	d504      	bpl.n	2f4a <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    2f40:	2308      	movs	r3, #8
    2f42:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    2f44:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    2f46:	06bb      	lsls	r3, r7, #26
    2f48:	d408      	bmi.n	2f5c <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    2f4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    2f4c:	0028      	movs	r0, r5
    2f4e:	69eb      	ldr	r3, [r5, #28]
    2f50:	4798      	blx	r3
    2f52:	e7ec      	b.n	2f2e <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    2f54:	0028      	movs	r0, r5
    2f56:	69ab      	ldr	r3, [r5, #24]
    2f58:	4798      	blx	r3
    2f5a:	e7ef      	b.n	2f3c <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    2f5c:	6a2b      	ldr	r3, [r5, #32]
    2f5e:	0028      	movs	r0, r5
    2f60:	4798      	blx	r3
}
    2f62:	e7f2      	b.n	2f4a <_usart_interrupt_handler+0x176>
    2f64:	20000a10 	.word	0x20000a10

00002f68 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    2f68:	b510      	push	{r4, lr}
	switch (clock_source) {
    2f6a:	2808      	cmp	r0, #8
    2f6c:	d803      	bhi.n	2f76 <system_clock_source_get_hz+0xe>
    2f6e:	0080      	lsls	r0, r0, #2
    2f70:	4b1c      	ldr	r3, [pc, #112]	; (2fe4 <system_clock_source_get_hz+0x7c>)
    2f72:	581b      	ldr	r3, [r3, r0]
    2f74:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    2f76:	2000      	movs	r0, #0
    2f78:	e032      	b.n	2fe0 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    2f7a:	4b1b      	ldr	r3, [pc, #108]	; (2fe8 <system_clock_source_get_hz+0x80>)
    2f7c:	6918      	ldr	r0, [r3, #16]
    2f7e:	e02f      	b.n	2fe0 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    2f80:	4b1a      	ldr	r3, [pc, #104]	; (2fec <system_clock_source_get_hz+0x84>)
    2f82:	6a1b      	ldr	r3, [r3, #32]
    2f84:	059b      	lsls	r3, r3, #22
    2f86:	0f9b      	lsrs	r3, r3, #30
    2f88:	4819      	ldr	r0, [pc, #100]	; (2ff0 <system_clock_source_get_hz+0x88>)
    2f8a:	40d8      	lsrs	r0, r3
    2f8c:	e028      	b.n	2fe0 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    2f8e:	4b16      	ldr	r3, [pc, #88]	; (2fe8 <system_clock_source_get_hz+0x80>)
    2f90:	6958      	ldr	r0, [r3, #20]
    2f92:	e025      	b.n	2fe0 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2f94:	4b14      	ldr	r3, [pc, #80]	; (2fe8 <system_clock_source_get_hz+0x80>)
    2f96:	681b      	ldr	r3, [r3, #0]
			return 0;
    2f98:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2f9a:	079b      	lsls	r3, r3, #30
    2f9c:	d520      	bpl.n	2fe0 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2f9e:	4913      	ldr	r1, [pc, #76]	; (2fec <system_clock_source_get_hz+0x84>)
    2fa0:	2210      	movs	r2, #16
    2fa2:	68cb      	ldr	r3, [r1, #12]
    2fa4:	421a      	tst	r2, r3
    2fa6:	d0fc      	beq.n	2fa2 <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    2fa8:	4b0f      	ldr	r3, [pc, #60]	; (2fe8 <system_clock_source_get_hz+0x80>)
    2faa:	681a      	ldr	r2, [r3, #0]
    2fac:	2324      	movs	r3, #36	; 0x24
    2fae:	4013      	ands	r3, r2
    2fb0:	2b04      	cmp	r3, #4
    2fb2:	d001      	beq.n	2fb8 <system_clock_source_get_hz+0x50>
			return 48000000UL;
    2fb4:	480f      	ldr	r0, [pc, #60]	; (2ff4 <system_clock_source_get_hz+0x8c>)
    2fb6:	e013      	b.n	2fe0 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2fb8:	2000      	movs	r0, #0
    2fba:	4b0f      	ldr	r3, [pc, #60]	; (2ff8 <system_clock_source_get_hz+0x90>)
    2fbc:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    2fbe:	4b0a      	ldr	r3, [pc, #40]	; (2fe8 <system_clock_source_get_hz+0x80>)
    2fc0:	689b      	ldr	r3, [r3, #8]
    2fc2:	041b      	lsls	r3, r3, #16
    2fc4:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2fc6:	4358      	muls	r0, r3
    2fc8:	e00a      	b.n	2fe0 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2fca:	2350      	movs	r3, #80	; 0x50
    2fcc:	4a07      	ldr	r2, [pc, #28]	; (2fec <system_clock_source_get_hz+0x84>)
    2fce:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    2fd0:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2fd2:	075b      	lsls	r3, r3, #29
    2fd4:	d504      	bpl.n	2fe0 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    2fd6:	4b04      	ldr	r3, [pc, #16]	; (2fe8 <system_clock_source_get_hz+0x80>)
    2fd8:	68d8      	ldr	r0, [r3, #12]
    2fda:	e001      	b.n	2fe0 <system_clock_source_get_hz+0x78>
		return 32768UL;
    2fdc:	2080      	movs	r0, #128	; 0x80
    2fde:	0200      	lsls	r0, r0, #8
	}
}
    2fe0:	bd10      	pop	{r4, pc}
    2fe2:	46c0      	nop			; (mov r8, r8)
    2fe4:	00007348 	.word	0x00007348
    2fe8:	2000017c 	.word	0x2000017c
    2fec:	40000800 	.word	0x40000800
    2ff0:	007a1200 	.word	0x007a1200
    2ff4:	02dc6c00 	.word	0x02dc6c00
    2ff8:	000035c1 	.word	0x000035c1

00002ffc <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    2ffc:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    2ffe:	490c      	ldr	r1, [pc, #48]	; (3030 <system_clock_source_osc8m_set_config+0x34>)
    3000:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    3002:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    3004:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    3006:	7840      	ldrb	r0, [r0, #1]
    3008:	2201      	movs	r2, #1
    300a:	4010      	ands	r0, r2
    300c:	0180      	lsls	r0, r0, #6
    300e:	2640      	movs	r6, #64	; 0x40
    3010:	43b3      	bics	r3, r6
    3012:	4303      	orrs	r3, r0
    3014:	402a      	ands	r2, r5
    3016:	01d2      	lsls	r2, r2, #7
    3018:	2080      	movs	r0, #128	; 0x80
    301a:	4383      	bics	r3, r0
    301c:	4313      	orrs	r3, r2
    301e:	2203      	movs	r2, #3
    3020:	4022      	ands	r2, r4
    3022:	0212      	lsls	r2, r2, #8
    3024:	4803      	ldr	r0, [pc, #12]	; (3034 <system_clock_source_osc8m_set_config+0x38>)
    3026:	4003      	ands	r3, r0
    3028:	4313      	orrs	r3, r2
    302a:	620b      	str	r3, [r1, #32]
}
    302c:	bd70      	pop	{r4, r5, r6, pc}
    302e:	46c0      	nop			; (mov r8, r8)
    3030:	40000800 	.word	0x40000800
    3034:	fffffcff 	.word	0xfffffcff

00003038 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    3038:	b5f0      	push	{r4, r5, r6, r7, lr}
    303a:	46de      	mov	lr, fp
    303c:	4657      	mov	r7, sl
    303e:	464e      	mov	r6, r9
    3040:	4645      	mov	r5, r8
    3042:	b5e0      	push	{r5, r6, r7, lr}
    3044:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    3046:	4b26      	ldr	r3, [pc, #152]	; (30e0 <system_clock_source_xosc32k_set_config+0xa8>)
    3048:	469b      	mov	fp, r3
    304a:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    304c:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    304e:	7800      	ldrb	r0, [r0, #0]
    3050:	4242      	negs	r2, r0
    3052:	4142      	adcs	r2, r0
    3054:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    3056:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    3058:	78ca      	ldrb	r2, [r1, #3]
    305a:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    305c:	790a      	ldrb	r2, [r1, #4]
    305e:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    3060:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    3062:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    3064:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    3066:	688a      	ldr	r2, [r1, #8]
    3068:	491e      	ldr	r1, [pc, #120]	; (30e4 <system_clock_source_xosc32k_set_config+0xac>)
    306a:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    306c:	2101      	movs	r1, #1
    306e:	464a      	mov	r2, r9
    3070:	0092      	lsls	r2, r2, #2
    3072:	4691      	mov	r9, r2
    3074:	2204      	movs	r2, #4
    3076:	4393      	bics	r3, r2
    3078:	464a      	mov	r2, r9
    307a:	4313      	orrs	r3, r2
    307c:	4642      	mov	r2, r8
    307e:	400a      	ands	r2, r1
    3080:	00d2      	lsls	r2, r2, #3
    3082:	4690      	mov	r8, r2
    3084:	2208      	movs	r2, #8
    3086:	4393      	bics	r3, r2
    3088:	4642      	mov	r2, r8
    308a:	4313      	orrs	r3, r2
    308c:	4662      	mov	r2, ip
    308e:	400a      	ands	r2, r1
    3090:	0112      	lsls	r2, r2, #4
    3092:	4694      	mov	ip, r2
    3094:	2210      	movs	r2, #16
    3096:	4393      	bics	r3, r2
    3098:	4662      	mov	r2, ip
    309a:	4313      	orrs	r3, r2
    309c:	4008      	ands	r0, r1
    309e:	0140      	lsls	r0, r0, #5
    30a0:	2220      	movs	r2, #32
    30a2:	4393      	bics	r3, r2
    30a4:	4303      	orrs	r3, r0
    30a6:	400f      	ands	r7, r1
    30a8:	01bf      	lsls	r7, r7, #6
    30aa:	2040      	movs	r0, #64	; 0x40
    30ac:	4383      	bics	r3, r0
    30ae:	433b      	orrs	r3, r7
    30b0:	400e      	ands	r6, r1
    30b2:	01f6      	lsls	r6, r6, #7
    30b4:	3040      	adds	r0, #64	; 0x40
    30b6:	4383      	bics	r3, r0
    30b8:	4333      	orrs	r3, r6
    30ba:	3879      	subs	r0, #121	; 0x79
    30bc:	4005      	ands	r5, r0
    30be:	022d      	lsls	r5, r5, #8
    30c0:	4809      	ldr	r0, [pc, #36]	; (30e8 <system_clock_source_xosc32k_set_config+0xb0>)
    30c2:	4003      	ands	r3, r0
    30c4:	432b      	orrs	r3, r5
    30c6:	4021      	ands	r1, r4
    30c8:	0309      	lsls	r1, r1, #12
    30ca:	4808      	ldr	r0, [pc, #32]	; (30ec <system_clock_source_xosc32k_set_config+0xb4>)
    30cc:	4003      	ands	r3, r0
    30ce:	430b      	orrs	r3, r1
    30d0:	465a      	mov	r2, fp
    30d2:	8293      	strh	r3, [r2, #20]
}
    30d4:	bc3c      	pop	{r2, r3, r4, r5}
    30d6:	4690      	mov	r8, r2
    30d8:	4699      	mov	r9, r3
    30da:	46a2      	mov	sl, r4
    30dc:	46ab      	mov	fp, r5
    30de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    30e0:	40000800 	.word	0x40000800
    30e4:	2000017c 	.word	0x2000017c
    30e8:	fffff8ff 	.word	0xfffff8ff
    30ec:	ffffefff 	.word	0xffffefff

000030f0 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    30f0:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    30f2:	7a03      	ldrb	r3, [r0, #8]
    30f4:	069b      	lsls	r3, r3, #26
    30f6:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    30f8:	8942      	ldrh	r2, [r0, #10]
    30fa:	0592      	lsls	r2, r2, #22
    30fc:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    30fe:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    3100:	4918      	ldr	r1, [pc, #96]	; (3164 <system_clock_source_dfll_set_config+0x74>)
    3102:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    3104:	7983      	ldrb	r3, [r0, #6]
    3106:	79c2      	ldrb	r2, [r0, #7]
    3108:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    310a:	8842      	ldrh	r2, [r0, #2]
    310c:	8884      	ldrh	r4, [r0, #4]
    310e:	4322      	orrs	r2, r4
    3110:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    3112:	7842      	ldrb	r2, [r0, #1]
    3114:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    3116:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    3118:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    311a:	7803      	ldrb	r3, [r0, #0]
    311c:	2b04      	cmp	r3, #4
    311e:	d011      	beq.n	3144 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    3120:	2b20      	cmp	r3, #32
    3122:	d10e      	bne.n	3142 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    3124:	7b03      	ldrb	r3, [r0, #12]
    3126:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    3128:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    312a:	4313      	orrs	r3, r2
    312c:	89c2      	ldrh	r2, [r0, #14]
    312e:	0412      	lsls	r2, r2, #16
    3130:	490d      	ldr	r1, [pc, #52]	; (3168 <system_clock_source_dfll_set_config+0x78>)
    3132:	400a      	ands	r2, r1
    3134:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    3136:	4a0b      	ldr	r2, [pc, #44]	; (3164 <system_clock_source_dfll_set_config+0x74>)
    3138:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    313a:	6811      	ldr	r1, [r2, #0]
    313c:	4b0b      	ldr	r3, [pc, #44]	; (316c <system_clock_source_dfll_set_config+0x7c>)
    313e:	430b      	orrs	r3, r1
    3140:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    3142:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    3144:	7b03      	ldrb	r3, [r0, #12]
    3146:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    3148:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    314a:	4313      	orrs	r3, r2
    314c:	89c2      	ldrh	r2, [r0, #14]
    314e:	0412      	lsls	r2, r2, #16
    3150:	4905      	ldr	r1, [pc, #20]	; (3168 <system_clock_source_dfll_set_config+0x78>)
    3152:	400a      	ands	r2, r1
    3154:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    3156:	4a03      	ldr	r2, [pc, #12]	; (3164 <system_clock_source_dfll_set_config+0x74>)
    3158:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    315a:	6813      	ldr	r3, [r2, #0]
    315c:	2104      	movs	r1, #4
    315e:	430b      	orrs	r3, r1
    3160:	6013      	str	r3, [r2, #0]
    3162:	e7ee      	b.n	3142 <system_clock_source_dfll_set_config+0x52>
    3164:	2000017c 	.word	0x2000017c
    3168:	03ff0000 	.word	0x03ff0000
    316c:	00000424 	.word	0x00000424

00003170 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    3170:	2808      	cmp	r0, #8
    3172:	d803      	bhi.n	317c <system_clock_source_enable+0xc>
    3174:	0080      	lsls	r0, r0, #2
    3176:	4b25      	ldr	r3, [pc, #148]	; (320c <system_clock_source_enable+0x9c>)
    3178:	581b      	ldr	r3, [r3, r0]
    317a:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    317c:	2017      	movs	r0, #23
    317e:	e044      	b.n	320a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    3180:	4a23      	ldr	r2, [pc, #140]	; (3210 <system_clock_source_enable+0xa0>)
    3182:	6a13      	ldr	r3, [r2, #32]
    3184:	2102      	movs	r1, #2
    3186:	430b      	orrs	r3, r1
    3188:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    318a:	2000      	movs	r0, #0
    318c:	e03d      	b.n	320a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    318e:	4a20      	ldr	r2, [pc, #128]	; (3210 <system_clock_source_enable+0xa0>)
    3190:	6993      	ldr	r3, [r2, #24]
    3192:	2102      	movs	r1, #2
    3194:	430b      	orrs	r3, r1
    3196:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    3198:	2000      	movs	r0, #0
		break;
    319a:	e036      	b.n	320a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    319c:	4a1c      	ldr	r2, [pc, #112]	; (3210 <system_clock_source_enable+0xa0>)
    319e:	8a13      	ldrh	r3, [r2, #16]
    31a0:	2102      	movs	r1, #2
    31a2:	430b      	orrs	r3, r1
    31a4:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    31a6:	2000      	movs	r0, #0
		break;
    31a8:	e02f      	b.n	320a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    31aa:	4a19      	ldr	r2, [pc, #100]	; (3210 <system_clock_source_enable+0xa0>)
    31ac:	8a93      	ldrh	r3, [r2, #20]
    31ae:	2102      	movs	r1, #2
    31b0:	430b      	orrs	r3, r1
    31b2:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    31b4:	2000      	movs	r0, #0
		break;
    31b6:	e028      	b.n	320a <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    31b8:	4916      	ldr	r1, [pc, #88]	; (3214 <system_clock_source_enable+0xa4>)
    31ba:	680b      	ldr	r3, [r1, #0]
    31bc:	2202      	movs	r2, #2
    31be:	4313      	orrs	r3, r2
    31c0:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    31c2:	4b13      	ldr	r3, [pc, #76]	; (3210 <system_clock_source_enable+0xa0>)
    31c4:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    31c6:	0019      	movs	r1, r3
    31c8:	320e      	adds	r2, #14
    31ca:	68cb      	ldr	r3, [r1, #12]
    31cc:	421a      	tst	r2, r3
    31ce:	d0fc      	beq.n	31ca <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    31d0:	4a10      	ldr	r2, [pc, #64]	; (3214 <system_clock_source_enable+0xa4>)
    31d2:	6891      	ldr	r1, [r2, #8]
    31d4:	4b0e      	ldr	r3, [pc, #56]	; (3210 <system_clock_source_enable+0xa0>)
    31d6:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    31d8:	6852      	ldr	r2, [r2, #4]
    31da:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    31dc:	2200      	movs	r2, #0
    31de:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    31e0:	0019      	movs	r1, r3
    31e2:	3210      	adds	r2, #16
    31e4:	68cb      	ldr	r3, [r1, #12]
    31e6:	421a      	tst	r2, r3
    31e8:	d0fc      	beq.n	31e4 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    31ea:	4b0a      	ldr	r3, [pc, #40]	; (3214 <system_clock_source_enable+0xa4>)
    31ec:	681b      	ldr	r3, [r3, #0]
    31ee:	b29b      	uxth	r3, r3
    31f0:	4a07      	ldr	r2, [pc, #28]	; (3210 <system_clock_source_enable+0xa0>)
    31f2:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    31f4:	2000      	movs	r0, #0
    31f6:	e008      	b.n	320a <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    31f8:	4905      	ldr	r1, [pc, #20]	; (3210 <system_clock_source_enable+0xa0>)
    31fa:	2244      	movs	r2, #68	; 0x44
    31fc:	5c8b      	ldrb	r3, [r1, r2]
    31fe:	2002      	movs	r0, #2
    3200:	4303      	orrs	r3, r0
    3202:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    3204:	2000      	movs	r0, #0
		break;
    3206:	e000      	b.n	320a <system_clock_source_enable+0x9a>
		return STATUS_OK;
    3208:	2000      	movs	r0, #0
}
    320a:	4770      	bx	lr
    320c:	0000736c 	.word	0x0000736c
    3210:	40000800 	.word	0x40000800
    3214:	2000017c 	.word	0x2000017c

00003218 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    3218:	b5f0      	push	{r4, r5, r6, r7, lr}
    321a:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    321c:	22c2      	movs	r2, #194	; 0xc2
    321e:	00d2      	lsls	r2, r2, #3
    3220:	4b45      	ldr	r3, [pc, #276]	; (3338 <system_clock_init+0x120>)
    3222:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    3224:	4a45      	ldr	r2, [pc, #276]	; (333c <system_clock_init+0x124>)
    3226:	6853      	ldr	r3, [r2, #4]
    3228:	211e      	movs	r1, #30
    322a:	438b      	bics	r3, r1
    322c:	391a      	subs	r1, #26
    322e:	430b      	orrs	r3, r1
    3230:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    3232:	2202      	movs	r2, #2
    3234:	ab01      	add	r3, sp, #4
    3236:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    3238:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    323a:	4d41      	ldr	r5, [pc, #260]	; (3340 <system_clock_init+0x128>)
    323c:	b2e0      	uxtb	r0, r4
    323e:	a901      	add	r1, sp, #4
    3240:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    3242:	3401      	adds	r4, #1
    3244:	2c25      	cmp	r4, #37	; 0x25
    3246:	d1f9      	bne.n	323c <system_clock_init+0x24>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    3248:	a80a      	add	r0, sp, #40	; 0x28
    324a:	2300      	movs	r3, #0
    324c:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    324e:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    3250:	2280      	movs	r2, #128	; 0x80
    3252:	0212      	lsls	r2, r2, #8
    3254:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    3256:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    3258:	2201      	movs	r2, #1
    325a:	7102      	strb	r2, [r0, #4]
	config->write_once          = false;
    325c:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    325e:	2106      	movs	r1, #6
    3260:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    3262:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    3264:	7302      	strb	r2, [r0, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    3266:	4b37      	ldr	r3, [pc, #220]	; (3344 <system_clock_init+0x12c>)
    3268:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    326a:	2005      	movs	r0, #5
    326c:	4b36      	ldr	r3, [pc, #216]	; (3348 <system_clock_init+0x130>)
    326e:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    3270:	4931      	ldr	r1, [pc, #196]	; (3338 <system_clock_init+0x120>)
    3272:	2202      	movs	r2, #2
    3274:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    3276:	421a      	tst	r2, r3
    3278:	d0fc      	beq.n	3274 <system_clock_init+0x5c>
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    327a:	ab05      	add	r3, sp, #20
    327c:	2100      	movs	r1, #0
    327e:	2200      	movs	r2, #0
    3280:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    3282:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    3284:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    3286:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    3288:	313f      	adds	r1, #63	; 0x3f
    328a:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    328c:	393b      	subs	r1, #59	; 0x3b
    328e:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    3290:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    3292:	4b2e      	ldr	r3, [pc, #184]	; (334c <system_clock_init+0x134>)
    3294:	681b      	ldr	r3, [r3, #0]
    3296:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    3298:	2b3f      	cmp	r3, #63	; 0x3f
    329a:	d04b      	beq.n	3334 <system_clock_init+0x11c>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    329c:	a805      	add	r0, sp, #20
    329e:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    32a0:	23b7      	movs	r3, #183	; 0xb7
    32a2:	00db      	lsls	r3, r3, #3
    32a4:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    32a6:	2303      	movs	r3, #3
    32a8:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    32aa:	331c      	adds	r3, #28
    32ac:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    32ae:	4b28      	ldr	r3, [pc, #160]	; (3350 <system_clock_init+0x138>)
    32b0:	4798      	blx	r3
	config->on_demand       = true;
    32b2:	a804      	add	r0, sp, #16
    32b4:	2501      	movs	r5, #1
    32b6:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    32b8:	2600      	movs	r6, #0
    32ba:	7006      	strb	r6, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    32bc:	7045      	strb	r5, [r0, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    32be:	4b25      	ldr	r3, [pc, #148]	; (3354 <system_clock_init+0x13c>)
    32c0:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    32c2:	2006      	movs	r0, #6
    32c4:	4f20      	ldr	r7, [pc, #128]	; (3348 <system_clock_init+0x130>)
    32c6:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    32c8:	4b23      	ldr	r3, [pc, #140]	; (3358 <system_clock_init+0x140>)
    32ca:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    32cc:	ac01      	add	r4, sp, #4
    32ce:	9502      	str	r5, [sp, #8]
	config->high_when_disabled = false;
    32d0:	7066      	strb	r6, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    32d2:	7226      	strb	r6, [r4, #8]
	config->output_enable      = false;
    32d4:	7266      	strb	r6, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    32d6:	2305      	movs	r3, #5
    32d8:	7023      	strb	r3, [r4, #0]
    32da:	0021      	movs	r1, r4
    32dc:	2001      	movs	r0, #1
    32de:	4b1f      	ldr	r3, [pc, #124]	; (335c <system_clock_init+0x144>)
    32e0:	4798      	blx	r3
    32e2:	2001      	movs	r0, #1
    32e4:	4b1e      	ldr	r3, [pc, #120]	; (3360 <system_clock_init+0x148>)
    32e6:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    32e8:	7025      	strb	r5, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    32ea:	0021      	movs	r1, r4
    32ec:	2000      	movs	r0, #0
    32ee:	4b14      	ldr	r3, [pc, #80]	; (3340 <system_clock_init+0x128>)
    32f0:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    32f2:	2000      	movs	r0, #0
    32f4:	4b1b      	ldr	r3, [pc, #108]	; (3364 <system_clock_init+0x14c>)
    32f6:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    32f8:	2007      	movs	r0, #7
    32fa:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    32fc:	490e      	ldr	r1, [pc, #56]	; (3338 <system_clock_init+0x120>)
    32fe:	22d0      	movs	r2, #208	; 0xd0
    3300:	68cb      	ldr	r3, [r1, #12]
    3302:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    3304:	2bd0      	cmp	r3, #208	; 0xd0
    3306:	d1fb      	bne.n	3300 <system_clock_init+0xe8>
	PM->CPUSEL.reg = (uint32_t)divider;
    3308:	4a17      	ldr	r2, [pc, #92]	; (3368 <system_clock_init+0x150>)
    330a:	2300      	movs	r3, #0
    330c:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    330e:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    3310:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    3312:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    3314:	a901      	add	r1, sp, #4
    3316:	2201      	movs	r2, #1
    3318:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    331a:	704b      	strb	r3, [r1, #1]
	config->output_enable      = false;
    331c:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    331e:	3307      	adds	r3, #7
    3320:	700b      	strb	r3, [r1, #0]
    3322:	720a      	strb	r2, [r1, #8]
    3324:	2000      	movs	r0, #0
    3326:	4b0d      	ldr	r3, [pc, #52]	; (335c <system_clock_init+0x144>)
    3328:	4798      	blx	r3
    332a:	2000      	movs	r0, #0
    332c:	4b0c      	ldr	r3, [pc, #48]	; (3360 <system_clock_init+0x148>)
    332e:	4798      	blx	r3
#endif
}
    3330:	b00f      	add	sp, #60	; 0x3c
    3332:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    3334:	3b20      	subs	r3, #32
    3336:	e7b1      	b.n	329c <system_clock_init+0x84>
    3338:	40000800 	.word	0x40000800
    333c:	41004000 	.word	0x41004000
    3340:	000035a5 	.word	0x000035a5
    3344:	00003039 	.word	0x00003039
    3348:	00003171 	.word	0x00003171
    334c:	00806024 	.word	0x00806024
    3350:	000030f1 	.word	0x000030f1
    3354:	00002ffd 	.word	0x00002ffd
    3358:	0000336d 	.word	0x0000336d
    335c:	00003391 	.word	0x00003391
    3360:	00003449 	.word	0x00003449
    3364:	00003519 	.word	0x00003519
    3368:	40000400 	.word	0x40000400

0000336c <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    336c:	4a06      	ldr	r2, [pc, #24]	; (3388 <system_gclk_init+0x1c>)
    336e:	6993      	ldr	r3, [r2, #24]
    3370:	2108      	movs	r1, #8
    3372:	430b      	orrs	r3, r1
    3374:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    3376:	2201      	movs	r2, #1
    3378:	4b04      	ldr	r3, [pc, #16]	; (338c <system_gclk_init+0x20>)
    337a:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    337c:	0019      	movs	r1, r3
    337e:	780b      	ldrb	r3, [r1, #0]
    3380:	4213      	tst	r3, r2
    3382:	d1fc      	bne.n	337e <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    3384:	4770      	bx	lr
    3386:	46c0      	nop			; (mov r8, r8)
    3388:	40000400 	.word	0x40000400
    338c:	40000c00 	.word	0x40000c00

00003390 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    3390:	b570      	push	{r4, r5, r6, lr}
    3392:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    3394:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    3396:	780d      	ldrb	r5, [r1, #0]
    3398:	022d      	lsls	r5, r5, #8
    339a:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    339c:	784b      	ldrb	r3, [r1, #1]
    339e:	2b00      	cmp	r3, #0
    33a0:	d002      	beq.n	33a8 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    33a2:	2380      	movs	r3, #128	; 0x80
    33a4:	02db      	lsls	r3, r3, #11
    33a6:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    33a8:	7a4b      	ldrb	r3, [r1, #9]
    33aa:	2b00      	cmp	r3, #0
    33ac:	d002      	beq.n	33b4 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    33ae:	2380      	movs	r3, #128	; 0x80
    33b0:	031b      	lsls	r3, r3, #12
    33b2:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    33b4:	6848      	ldr	r0, [r1, #4]
    33b6:	2801      	cmp	r0, #1
    33b8:	d910      	bls.n	33dc <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    33ba:	1e43      	subs	r3, r0, #1
    33bc:	4218      	tst	r0, r3
    33be:	d134      	bne.n	342a <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    33c0:	2802      	cmp	r0, #2
    33c2:	d930      	bls.n	3426 <system_gclk_gen_set_config+0x96>
    33c4:	2302      	movs	r3, #2
    33c6:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    33c8:	3201      	adds	r2, #1
						mask <<= 1) {
    33ca:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    33cc:	4298      	cmp	r0, r3
    33ce:	d8fb      	bhi.n	33c8 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    33d0:	0212      	lsls	r2, r2, #8
    33d2:	4332      	orrs	r2, r6
    33d4:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    33d6:	2380      	movs	r3, #128	; 0x80
    33d8:	035b      	lsls	r3, r3, #13
    33da:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    33dc:	7a0b      	ldrb	r3, [r1, #8]
    33de:	2b00      	cmp	r3, #0
    33e0:	d002      	beq.n	33e8 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    33e2:	2380      	movs	r3, #128	; 0x80
    33e4:	039b      	lsls	r3, r3, #14
    33e6:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    33e8:	4a13      	ldr	r2, [pc, #76]	; (3438 <system_gclk_gen_set_config+0xa8>)
    33ea:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    33ec:	b25b      	sxtb	r3, r3
    33ee:	2b00      	cmp	r3, #0
    33f0:	dbfb      	blt.n	33ea <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    33f2:	4b12      	ldr	r3, [pc, #72]	; (343c <system_gclk_gen_set_config+0xac>)
    33f4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    33f6:	4b12      	ldr	r3, [pc, #72]	; (3440 <system_gclk_gen_set_config+0xb0>)
    33f8:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    33fa:	4a0f      	ldr	r2, [pc, #60]	; (3438 <system_gclk_gen_set_config+0xa8>)
    33fc:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    33fe:	b25b      	sxtb	r3, r3
    3400:	2b00      	cmp	r3, #0
    3402:	dbfb      	blt.n	33fc <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    3404:	4b0c      	ldr	r3, [pc, #48]	; (3438 <system_gclk_gen_set_config+0xa8>)
    3406:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3408:	001a      	movs	r2, r3
    340a:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    340c:	b25b      	sxtb	r3, r3
    340e:	2b00      	cmp	r3, #0
    3410:	dbfb      	blt.n	340a <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    3412:	4a09      	ldr	r2, [pc, #36]	; (3438 <system_gclk_gen_set_config+0xa8>)
    3414:	6853      	ldr	r3, [r2, #4]
    3416:	2180      	movs	r1, #128	; 0x80
    3418:	0249      	lsls	r1, r1, #9
    341a:	400b      	ands	r3, r1
    341c:	431d      	orrs	r5, r3
    341e:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    3420:	4b08      	ldr	r3, [pc, #32]	; (3444 <system_gclk_gen_set_config+0xb4>)
    3422:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    3424:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    3426:	2200      	movs	r2, #0
    3428:	e7d2      	b.n	33d0 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    342a:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    342c:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    342e:	2380      	movs	r3, #128	; 0x80
    3430:	029b      	lsls	r3, r3, #10
    3432:	431d      	orrs	r5, r3
    3434:	e7d2      	b.n	33dc <system_gclk_gen_set_config+0x4c>
    3436:	46c0      	nop			; (mov r8, r8)
    3438:	40000c00 	.word	0x40000c00
    343c:	00001b05 	.word	0x00001b05
    3440:	40000c08 	.word	0x40000c08
    3444:	00001b45 	.word	0x00001b45

00003448 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    3448:	b510      	push	{r4, lr}
    344a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    344c:	4a0b      	ldr	r2, [pc, #44]	; (347c <system_gclk_gen_enable+0x34>)
    344e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    3450:	b25b      	sxtb	r3, r3
    3452:	2b00      	cmp	r3, #0
    3454:	dbfb      	blt.n	344e <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    3456:	4b0a      	ldr	r3, [pc, #40]	; (3480 <system_gclk_gen_enable+0x38>)
    3458:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    345a:	4b0a      	ldr	r3, [pc, #40]	; (3484 <system_gclk_gen_enable+0x3c>)
    345c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    345e:	4a07      	ldr	r2, [pc, #28]	; (347c <system_gclk_gen_enable+0x34>)
    3460:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    3462:	b25b      	sxtb	r3, r3
    3464:	2b00      	cmp	r3, #0
    3466:	dbfb      	blt.n	3460 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    3468:	4a04      	ldr	r2, [pc, #16]	; (347c <system_gclk_gen_enable+0x34>)
    346a:	6851      	ldr	r1, [r2, #4]
    346c:	2380      	movs	r3, #128	; 0x80
    346e:	025b      	lsls	r3, r3, #9
    3470:	430b      	orrs	r3, r1
    3472:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    3474:	4b04      	ldr	r3, [pc, #16]	; (3488 <system_gclk_gen_enable+0x40>)
    3476:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    3478:	bd10      	pop	{r4, pc}
    347a:	46c0      	nop			; (mov r8, r8)
    347c:	40000c00 	.word	0x40000c00
    3480:	00001b05 	.word	0x00001b05
    3484:	40000c04 	.word	0x40000c04
    3488:	00001b45 	.word	0x00001b45

0000348c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    348c:	b570      	push	{r4, r5, r6, lr}
    348e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3490:	4a1a      	ldr	r2, [pc, #104]	; (34fc <system_gclk_gen_get_hz+0x70>)
    3492:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    3494:	b25b      	sxtb	r3, r3
    3496:	2b00      	cmp	r3, #0
    3498:	dbfb      	blt.n	3492 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    349a:	4b19      	ldr	r3, [pc, #100]	; (3500 <system_gclk_gen_get_hz+0x74>)
    349c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    349e:	4b19      	ldr	r3, [pc, #100]	; (3504 <system_gclk_gen_get_hz+0x78>)
    34a0:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    34a2:	4a16      	ldr	r2, [pc, #88]	; (34fc <system_gclk_gen_get_hz+0x70>)
    34a4:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    34a6:	b25b      	sxtb	r3, r3
    34a8:	2b00      	cmp	r3, #0
    34aa:	dbfb      	blt.n	34a4 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    34ac:	4e13      	ldr	r6, [pc, #76]	; (34fc <system_gclk_gen_get_hz+0x70>)
    34ae:	6870      	ldr	r0, [r6, #4]
    34b0:	04c0      	lsls	r0, r0, #19
    34b2:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    34b4:	4b14      	ldr	r3, [pc, #80]	; (3508 <system_gclk_gen_get_hz+0x7c>)
    34b6:	4798      	blx	r3
    34b8:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    34ba:	4b12      	ldr	r3, [pc, #72]	; (3504 <system_gclk_gen_get_hz+0x78>)
    34bc:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    34be:	6876      	ldr	r6, [r6, #4]
    34c0:	02f6      	lsls	r6, r6, #11
    34c2:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    34c4:	4b11      	ldr	r3, [pc, #68]	; (350c <system_gclk_gen_get_hz+0x80>)
    34c6:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    34c8:	4a0c      	ldr	r2, [pc, #48]	; (34fc <system_gclk_gen_get_hz+0x70>)
    34ca:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    34cc:	b25b      	sxtb	r3, r3
    34ce:	2b00      	cmp	r3, #0
    34d0:	dbfb      	blt.n	34ca <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    34d2:	4b0a      	ldr	r3, [pc, #40]	; (34fc <system_gclk_gen_get_hz+0x70>)
    34d4:	689c      	ldr	r4, [r3, #8]
    34d6:	0224      	lsls	r4, r4, #8
    34d8:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    34da:	4b0d      	ldr	r3, [pc, #52]	; (3510 <system_gclk_gen_get_hz+0x84>)
    34dc:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    34de:	2e00      	cmp	r6, #0
    34e0:	d107      	bne.n	34f2 <system_gclk_gen_get_hz+0x66>
    34e2:	2c01      	cmp	r4, #1
    34e4:	d907      	bls.n	34f6 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    34e6:	0021      	movs	r1, r4
    34e8:	0028      	movs	r0, r5
    34ea:	4b0a      	ldr	r3, [pc, #40]	; (3514 <system_gclk_gen_get_hz+0x88>)
    34ec:	4798      	blx	r3
    34ee:	0005      	movs	r5, r0
    34f0:	e001      	b.n	34f6 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    34f2:	3401      	adds	r4, #1
    34f4:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    34f6:	0028      	movs	r0, r5
    34f8:	bd70      	pop	{r4, r5, r6, pc}
    34fa:	46c0      	nop			; (mov r8, r8)
    34fc:	40000c00 	.word	0x40000c00
    3500:	00001b05 	.word	0x00001b05
    3504:	40000c04 	.word	0x40000c04
    3508:	00002f69 	.word	0x00002f69
    350c:	40000c08 	.word	0x40000c08
    3510:	00001b45 	.word	0x00001b45
    3514:	00005f31 	.word	0x00005f31

00003518 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    3518:	b510      	push	{r4, lr}
    351a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    351c:	4b06      	ldr	r3, [pc, #24]	; (3538 <system_gclk_chan_enable+0x20>)
    351e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    3520:	4b06      	ldr	r3, [pc, #24]	; (353c <system_gclk_chan_enable+0x24>)
    3522:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    3524:	4a06      	ldr	r2, [pc, #24]	; (3540 <system_gclk_chan_enable+0x28>)
    3526:	8853      	ldrh	r3, [r2, #2]
    3528:	2180      	movs	r1, #128	; 0x80
    352a:	01c9      	lsls	r1, r1, #7
    352c:	430b      	orrs	r3, r1
    352e:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    3530:	4b04      	ldr	r3, [pc, #16]	; (3544 <system_gclk_chan_enable+0x2c>)
    3532:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    3534:	bd10      	pop	{r4, pc}
    3536:	46c0      	nop			; (mov r8, r8)
    3538:	00001b05 	.word	0x00001b05
    353c:	40000c02 	.word	0x40000c02
    3540:	40000c00 	.word	0x40000c00
    3544:	00001b45 	.word	0x00001b45

00003548 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    3548:	b510      	push	{r4, lr}
    354a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    354c:	4b0f      	ldr	r3, [pc, #60]	; (358c <system_gclk_chan_disable+0x44>)
    354e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    3550:	4b0f      	ldr	r3, [pc, #60]	; (3590 <system_gclk_chan_disable+0x48>)
    3552:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    3554:	4a0f      	ldr	r2, [pc, #60]	; (3594 <system_gclk_chan_disable+0x4c>)
    3556:	8853      	ldrh	r3, [r2, #2]
    3558:	051b      	lsls	r3, r3, #20
    355a:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    355c:	8853      	ldrh	r3, [r2, #2]
    355e:	490e      	ldr	r1, [pc, #56]	; (3598 <system_gclk_chan_disable+0x50>)
    3560:	400b      	ands	r3, r1
    3562:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    3564:	8853      	ldrh	r3, [r2, #2]
    3566:	490d      	ldr	r1, [pc, #52]	; (359c <system_gclk_chan_disable+0x54>)
    3568:	400b      	ands	r3, r1
    356a:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    356c:	0011      	movs	r1, r2
    356e:	2280      	movs	r2, #128	; 0x80
    3570:	01d2      	lsls	r2, r2, #7
    3572:	884b      	ldrh	r3, [r1, #2]
    3574:	4213      	tst	r3, r2
    3576:	d1fc      	bne.n	3572 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    3578:	4906      	ldr	r1, [pc, #24]	; (3594 <system_gclk_chan_disable+0x4c>)
    357a:	884a      	ldrh	r2, [r1, #2]
    357c:	0203      	lsls	r3, r0, #8
    357e:	4806      	ldr	r0, [pc, #24]	; (3598 <system_gclk_chan_disable+0x50>)
    3580:	4002      	ands	r2, r0
    3582:	4313      	orrs	r3, r2
    3584:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    3586:	4b06      	ldr	r3, [pc, #24]	; (35a0 <system_gclk_chan_disable+0x58>)
    3588:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    358a:	bd10      	pop	{r4, pc}
    358c:	00001b05 	.word	0x00001b05
    3590:	40000c02 	.word	0x40000c02
    3594:	40000c00 	.word	0x40000c00
    3598:	fffff0ff 	.word	0xfffff0ff
    359c:	ffffbfff 	.word	0xffffbfff
    35a0:	00001b45 	.word	0x00001b45

000035a4 <system_gclk_chan_set_config>:
{
    35a4:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    35a6:	780c      	ldrb	r4, [r1, #0]
    35a8:	0224      	lsls	r4, r4, #8
    35aa:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    35ac:	4b02      	ldr	r3, [pc, #8]	; (35b8 <system_gclk_chan_set_config+0x14>)
    35ae:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    35b0:	b2a4      	uxth	r4, r4
    35b2:	4b02      	ldr	r3, [pc, #8]	; (35bc <system_gclk_chan_set_config+0x18>)
    35b4:	805c      	strh	r4, [r3, #2]
}
    35b6:	bd10      	pop	{r4, pc}
    35b8:	00003549 	.word	0x00003549
    35bc:	40000c00 	.word	0x40000c00

000035c0 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    35c0:	b510      	push	{r4, lr}
    35c2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    35c4:	4b06      	ldr	r3, [pc, #24]	; (35e0 <system_gclk_chan_get_hz+0x20>)
    35c6:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    35c8:	4b06      	ldr	r3, [pc, #24]	; (35e4 <system_gclk_chan_get_hz+0x24>)
    35ca:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    35cc:	4b06      	ldr	r3, [pc, #24]	; (35e8 <system_gclk_chan_get_hz+0x28>)
    35ce:	885c      	ldrh	r4, [r3, #2]
    35d0:	0524      	lsls	r4, r4, #20
    35d2:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    35d4:	4b05      	ldr	r3, [pc, #20]	; (35ec <system_gclk_chan_get_hz+0x2c>)
    35d6:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    35d8:	0020      	movs	r0, r4
    35da:	4b05      	ldr	r3, [pc, #20]	; (35f0 <system_gclk_chan_get_hz+0x30>)
    35dc:	4798      	blx	r3
}
    35de:	bd10      	pop	{r4, pc}
    35e0:	00001b05 	.word	0x00001b05
    35e4:	40000c02 	.word	0x40000c02
    35e8:	40000c00 	.word	0x40000c00
    35ec:	00001b45 	.word	0x00001b45
    35f0:	0000348d 	.word	0x0000348d

000035f4 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    35f4:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    35f6:	78d3      	ldrb	r3, [r2, #3]
    35f8:	2b00      	cmp	r3, #0
    35fa:	d135      	bne.n	3668 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    35fc:	7813      	ldrb	r3, [r2, #0]
    35fe:	2b80      	cmp	r3, #128	; 0x80
    3600:	d029      	beq.n	3656 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    3602:	061b      	lsls	r3, r3, #24
    3604:	2480      	movs	r4, #128	; 0x80
    3606:	0264      	lsls	r4, r4, #9
    3608:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    360a:	7854      	ldrb	r4, [r2, #1]
    360c:	2502      	movs	r5, #2
    360e:	43ac      	bics	r4, r5
    3610:	d106      	bne.n	3620 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    3612:	7894      	ldrb	r4, [r2, #2]
    3614:	2c00      	cmp	r4, #0
    3616:	d120      	bne.n	365a <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    3618:	2480      	movs	r4, #128	; 0x80
    361a:	02a4      	lsls	r4, r4, #10
    361c:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    361e:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3620:	7854      	ldrb	r4, [r2, #1]
    3622:	3c01      	subs	r4, #1
    3624:	2c01      	cmp	r4, #1
    3626:	d91c      	bls.n	3662 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    3628:	040d      	lsls	r5, r1, #16
    362a:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    362c:	24a0      	movs	r4, #160	; 0xa0
    362e:	05e4      	lsls	r4, r4, #23
    3630:	432c      	orrs	r4, r5
    3632:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3634:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    3636:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    3638:	24d0      	movs	r4, #208	; 0xd0
    363a:	0624      	lsls	r4, r4, #24
    363c:	432c      	orrs	r4, r5
    363e:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3640:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    3642:	78d4      	ldrb	r4, [r2, #3]
    3644:	2c00      	cmp	r4, #0
    3646:	d122      	bne.n	368e <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    3648:	035b      	lsls	r3, r3, #13
    364a:	d51c      	bpl.n	3686 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    364c:	7893      	ldrb	r3, [r2, #2]
    364e:	2b01      	cmp	r3, #1
    3650:	d01e      	beq.n	3690 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    3652:	6141      	str	r1, [r0, #20]
    3654:	e017      	b.n	3686 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    3656:	2300      	movs	r3, #0
    3658:	e7d7      	b.n	360a <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    365a:	24c0      	movs	r4, #192	; 0xc0
    365c:	02e4      	lsls	r4, r4, #11
    365e:	4323      	orrs	r3, r4
    3660:	e7dd      	b.n	361e <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    3662:	4c0d      	ldr	r4, [pc, #52]	; (3698 <_system_pinmux_config+0xa4>)
    3664:	4023      	ands	r3, r4
    3666:	e7df      	b.n	3628 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    3668:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    366a:	040c      	lsls	r4, r1, #16
    366c:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    366e:	23a0      	movs	r3, #160	; 0xa0
    3670:	05db      	lsls	r3, r3, #23
    3672:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3674:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    3676:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    3678:	23d0      	movs	r3, #208	; 0xd0
    367a:	061b      	lsls	r3, r3, #24
    367c:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    367e:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    3680:	78d3      	ldrb	r3, [r2, #3]
    3682:	2b00      	cmp	r3, #0
    3684:	d103      	bne.n	368e <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3686:	7853      	ldrb	r3, [r2, #1]
    3688:	3b01      	subs	r3, #1
    368a:	2b01      	cmp	r3, #1
    368c:	d902      	bls.n	3694 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    368e:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    3690:	6181      	str	r1, [r0, #24]
    3692:	e7f8      	b.n	3686 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    3694:	6081      	str	r1, [r0, #8]
}
    3696:	e7fa      	b.n	368e <_system_pinmux_config+0x9a>
    3698:	fffbffff 	.word	0xfffbffff

0000369c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    369c:	b510      	push	{r4, lr}
    369e:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    36a0:	09c1      	lsrs	r1, r0, #7
		return NULL;
    36a2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    36a4:	2900      	cmp	r1, #0
    36a6:	d104      	bne.n	36b2 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    36a8:	0943      	lsrs	r3, r0, #5
    36aa:	01db      	lsls	r3, r3, #7
    36ac:	4905      	ldr	r1, [pc, #20]	; (36c4 <system_pinmux_pin_set_config+0x28>)
    36ae:	468c      	mov	ip, r1
    36b0:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    36b2:	241f      	movs	r4, #31
    36b4:	4020      	ands	r0, r4
    36b6:	2101      	movs	r1, #1
    36b8:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    36ba:	0018      	movs	r0, r3
    36bc:	4b02      	ldr	r3, [pc, #8]	; (36c8 <system_pinmux_pin_set_config+0x2c>)
    36be:	4798      	blx	r3
}
    36c0:	bd10      	pop	{r4, pc}
    36c2:	46c0      	nop			; (mov r8, r8)
    36c4:	41004400 	.word	0x41004400
    36c8:	000035f5 	.word	0x000035f5

000036cc <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    36cc:	4770      	bx	lr
	...

000036d0 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    36d0:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    36d2:	4b05      	ldr	r3, [pc, #20]	; (36e8 <system_init+0x18>)
    36d4:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    36d6:	4b05      	ldr	r3, [pc, #20]	; (36ec <system_init+0x1c>)
    36d8:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    36da:	4b05      	ldr	r3, [pc, #20]	; (36f0 <system_init+0x20>)
    36dc:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    36de:	4b05      	ldr	r3, [pc, #20]	; (36f4 <system_init+0x24>)
    36e0:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    36e2:	4b05      	ldr	r3, [pc, #20]	; (36f8 <system_init+0x28>)
    36e4:	4798      	blx	r3
}
    36e6:	bd10      	pop	{r4, pc}
    36e8:	00003219 	.word	0x00003219
    36ec:	0000019d 	.word	0x0000019d
    36f0:	000036cd 	.word	0x000036cd
    36f4:	000036cd 	.word	0x000036cd
    36f8:	000036cd 	.word	0x000036cd

000036fc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    36fc:	e7fe      	b.n	36fc <Dummy_Handler>
	...

00003700 <Reset_Handler>:
{
    3700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    3702:	4a2a      	ldr	r2, [pc, #168]	; (37ac <Reset_Handler+0xac>)
    3704:	4b2a      	ldr	r3, [pc, #168]	; (37b0 <Reset_Handler+0xb0>)
    3706:	429a      	cmp	r2, r3
    3708:	d011      	beq.n	372e <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    370a:	001a      	movs	r2, r3
    370c:	4b29      	ldr	r3, [pc, #164]	; (37b4 <Reset_Handler+0xb4>)
    370e:	429a      	cmp	r2, r3
    3710:	d20d      	bcs.n	372e <Reset_Handler+0x2e>
    3712:	4a29      	ldr	r2, [pc, #164]	; (37b8 <Reset_Handler+0xb8>)
    3714:	3303      	adds	r3, #3
    3716:	1a9b      	subs	r3, r3, r2
    3718:	089b      	lsrs	r3, r3, #2
    371a:	3301      	adds	r3, #1
    371c:	009b      	lsls	r3, r3, #2
    371e:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    3720:	4823      	ldr	r0, [pc, #140]	; (37b0 <Reset_Handler+0xb0>)
    3722:	4922      	ldr	r1, [pc, #136]	; (37ac <Reset_Handler+0xac>)
    3724:	588c      	ldr	r4, [r1, r2]
    3726:	5084      	str	r4, [r0, r2]
    3728:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    372a:	429a      	cmp	r2, r3
    372c:	d1fa      	bne.n	3724 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    372e:	4a23      	ldr	r2, [pc, #140]	; (37bc <Reset_Handler+0xbc>)
    3730:	4b23      	ldr	r3, [pc, #140]	; (37c0 <Reset_Handler+0xc0>)
    3732:	429a      	cmp	r2, r3
    3734:	d20a      	bcs.n	374c <Reset_Handler+0x4c>
    3736:	43d3      	mvns	r3, r2
    3738:	4921      	ldr	r1, [pc, #132]	; (37c0 <Reset_Handler+0xc0>)
    373a:	185b      	adds	r3, r3, r1
    373c:	2103      	movs	r1, #3
    373e:	438b      	bics	r3, r1
    3740:	3304      	adds	r3, #4
    3742:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    3744:	2100      	movs	r1, #0
    3746:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    3748:	4293      	cmp	r3, r2
    374a:	d1fc      	bne.n	3746 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    374c:	4a1d      	ldr	r2, [pc, #116]	; (37c4 <Reset_Handler+0xc4>)
    374e:	21ff      	movs	r1, #255	; 0xff
    3750:	4b1d      	ldr	r3, [pc, #116]	; (37c8 <Reset_Handler+0xc8>)
    3752:	438b      	bics	r3, r1
    3754:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    3756:	39fd      	subs	r1, #253	; 0xfd
    3758:	2390      	movs	r3, #144	; 0x90
    375a:	005b      	lsls	r3, r3, #1
    375c:	4a1b      	ldr	r2, [pc, #108]	; (37cc <Reset_Handler+0xcc>)
    375e:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    3760:	4a1b      	ldr	r2, [pc, #108]	; (37d0 <Reset_Handler+0xd0>)
    3762:	78d3      	ldrb	r3, [r2, #3]
    3764:	2503      	movs	r5, #3
    3766:	43ab      	bics	r3, r5
    3768:	2402      	movs	r4, #2
    376a:	4323      	orrs	r3, r4
    376c:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    376e:	78d3      	ldrb	r3, [r2, #3]
    3770:	270c      	movs	r7, #12
    3772:	43bb      	bics	r3, r7
    3774:	2608      	movs	r6, #8
    3776:	4333      	orrs	r3, r6
    3778:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    377a:	4b16      	ldr	r3, [pc, #88]	; (37d4 <Reset_Handler+0xd4>)
    377c:	7b98      	ldrb	r0, [r3, #14]
    377e:	2230      	movs	r2, #48	; 0x30
    3780:	4390      	bics	r0, r2
    3782:	2220      	movs	r2, #32
    3784:	4310      	orrs	r0, r2
    3786:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    3788:	7b99      	ldrb	r1, [r3, #14]
    378a:	43b9      	bics	r1, r7
    378c:	4331      	orrs	r1, r6
    378e:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    3790:	7b9a      	ldrb	r2, [r3, #14]
    3792:	43aa      	bics	r2, r5
    3794:	4322      	orrs	r2, r4
    3796:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    3798:	4a0f      	ldr	r2, [pc, #60]	; (37d8 <Reset_Handler+0xd8>)
    379a:	6853      	ldr	r3, [r2, #4]
    379c:	2180      	movs	r1, #128	; 0x80
    379e:	430b      	orrs	r3, r1
    37a0:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    37a2:	4b0e      	ldr	r3, [pc, #56]	; (37dc <Reset_Handler+0xdc>)
    37a4:	4798      	blx	r3
        main();
    37a6:	4b0e      	ldr	r3, [pc, #56]	; (37e0 <Reset_Handler+0xe0>)
    37a8:	4798      	blx	r3
    37aa:	e7fe      	b.n	37aa <Reset_Handler+0xaa>
    37ac:	00007d38 	.word	0x00007d38
    37b0:	20000000 	.word	0x20000000
    37b4:	200000ac 	.word	0x200000ac
    37b8:	20000004 	.word	0x20000004
    37bc:	200000ac 	.word	0x200000ac
    37c0:	20000e30 	.word	0x20000e30
    37c4:	e000ed00 	.word	0xe000ed00
    37c8:	00000000 	.word	0x00000000
    37cc:	41007000 	.word	0x41007000
    37d0:	41005000 	.word	0x41005000
    37d4:	41004800 	.word	0x41004800
    37d8:	41004000 	.word	0x41004000
    37dc:	00006271 	.word	0x00006271
    37e0:	00005bd5 	.word	0x00005bd5

000037e4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    37e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    37e6:	46c6      	mov	lr, r8
    37e8:	b500      	push	{lr}
    37ea:	000c      	movs	r4, r1
    37ec:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    37ee:	2800      	cmp	r0, #0
    37f0:	d10f      	bne.n	3812 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    37f2:	2a00      	cmp	r2, #0
    37f4:	dd11      	ble.n	381a <_read+0x36>
    37f6:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    37f8:	4e09      	ldr	r6, [pc, #36]	; (3820 <_read+0x3c>)
    37fa:	4d0a      	ldr	r5, [pc, #40]	; (3824 <_read+0x40>)
    37fc:	6830      	ldr	r0, [r6, #0]
    37fe:	0021      	movs	r1, r4
    3800:	682b      	ldr	r3, [r5, #0]
    3802:	4798      	blx	r3
		ptr++;
    3804:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    3806:	42bc      	cmp	r4, r7
    3808:	d1f8      	bne.n	37fc <_read+0x18>
		nChars++;
	}
	return nChars;
}
    380a:	4640      	mov	r0, r8
    380c:	bc04      	pop	{r2}
    380e:	4690      	mov	r8, r2
    3810:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    3812:	2301      	movs	r3, #1
    3814:	425b      	negs	r3, r3
    3816:	4698      	mov	r8, r3
    3818:	e7f7      	b.n	380a <_read+0x26>
	for (; len > 0; --len) {
    381a:	4680      	mov	r8, r0
    381c:	e7f5      	b.n	380a <_read+0x26>
    381e:	46c0      	nop			; (mov r8, r8)
    3820:	20000a34 	.word	0x20000a34
    3824:	20000a2c 	.word	0x20000a2c

00003828 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    3828:	b5f0      	push	{r4, r5, r6, r7, lr}
    382a:	46c6      	mov	lr, r8
    382c:	b500      	push	{lr}
    382e:	000e      	movs	r6, r1
    3830:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    3832:	3801      	subs	r0, #1
    3834:	2802      	cmp	r0, #2
    3836:	d810      	bhi.n	385a <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    3838:	2a00      	cmp	r2, #0
    383a:	d011      	beq.n	3860 <_write+0x38>
    383c:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    383e:	4b0c      	ldr	r3, [pc, #48]	; (3870 <_write+0x48>)
    3840:	4698      	mov	r8, r3
    3842:	4f0c      	ldr	r7, [pc, #48]	; (3874 <_write+0x4c>)
    3844:	4643      	mov	r3, r8
    3846:	6818      	ldr	r0, [r3, #0]
    3848:	5d31      	ldrb	r1, [r6, r4]
    384a:	683b      	ldr	r3, [r7, #0]
    384c:	4798      	blx	r3
    384e:	2800      	cmp	r0, #0
    3850:	db08      	blt.n	3864 <_write+0x3c>
			return -1;
		}
		++nChars;
    3852:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    3854:	42a5      	cmp	r5, r4
    3856:	d1f5      	bne.n	3844 <_write+0x1c>
    3858:	e006      	b.n	3868 <_write+0x40>
		return -1;
    385a:	2401      	movs	r4, #1
    385c:	4264      	negs	r4, r4
    385e:	e003      	b.n	3868 <_write+0x40>
	for (; len != 0; --len) {
    3860:	0014      	movs	r4, r2
    3862:	e001      	b.n	3868 <_write+0x40>
			return -1;
    3864:	2401      	movs	r4, #1
    3866:	4264      	negs	r4, r4
	}
	return nChars;
}
    3868:	0020      	movs	r0, r4
    386a:	bc04      	pop	{r2}
    386c:	4690      	mov	r8, r2
    386e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3870:	20000a34 	.word	0x20000a34
    3874:	20000a30 	.word	0x20000a30

00003878 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    3878:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    387a:	4a06      	ldr	r2, [pc, #24]	; (3894 <_sbrk+0x1c>)
    387c:	6812      	ldr	r2, [r2, #0]
    387e:	2a00      	cmp	r2, #0
    3880:	d004      	beq.n	388c <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    3882:	4a04      	ldr	r2, [pc, #16]	; (3894 <_sbrk+0x1c>)
    3884:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    3886:	18c3      	adds	r3, r0, r3
    3888:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    388a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    388c:	4902      	ldr	r1, [pc, #8]	; (3898 <_sbrk+0x20>)
    388e:	4a01      	ldr	r2, [pc, #4]	; (3894 <_sbrk+0x1c>)
    3890:	6011      	str	r1, [r2, #0]
    3892:	e7f6      	b.n	3882 <_sbrk+0xa>
    3894:	20000194 	.word	0x20000194
    3898:	20002e30 	.word	0x20002e30

0000389c <_close>:
}

extern int _close(int file)
{
	return -1;
}
    389c:	2001      	movs	r0, #1
    389e:	4240      	negs	r0, r0
    38a0:	4770      	bx	lr

000038a2 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    38a2:	2380      	movs	r3, #128	; 0x80
    38a4:	019b      	lsls	r3, r3, #6
    38a6:	604b      	str	r3, [r1, #4]

	return 0;
}
    38a8:	2000      	movs	r0, #0
    38aa:	4770      	bx	lr

000038ac <_lseek>:
}

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    38ac:	2000      	movs	r0, #0
    38ae:	4770      	bx	lr

000038b0 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
    38b0:	b530      	push	{r4, r5, lr}
    38b2:	b087      	sub	sp, #28
    38b4:	0004      	movs	r4, r0
	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    38b6:	aa01      	add	r2, sp, #4
    38b8:	23a0      	movs	r3, #160	; 0xa0
    38ba:	011b      	lsls	r3, r3, #4
    38bc:	8013      	strh	r3, [r2, #0]
	config->clear_on_match      = false;
    38be:	2300      	movs	r3, #0
    38c0:	7093      	strb	r3, [r2, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
    38c2:	70d3      	strb	r3, [r2, #3]
#endif
	config->clock_24h           = false;
	config->year_init_value     = 2000;
    38c4:	21fa      	movs	r1, #250	; 0xfa
    38c6:	00c9      	lsls	r1, r1, #3
    38c8:	80d1      	strh	r1, [r2, #6]
	config_rtc_calendar.clock_24h     = true;
    38ca:	2101      	movs	r1, #1
    38cc:	7111      	strb	r1, [r2, #4]
	config_rtc_calendar.alarm[0].time = init_time;
    38ce:	2004      	movs	r0, #4
    38d0:	7210      	strb	r0, [r2, #8]
    38d2:	7253      	strb	r3, [r2, #9]
    38d4:	7293      	strb	r3, [r2, #10]
    38d6:	72d3      	strb	r3, [r2, #11]
    38d8:	7311      	strb	r1, [r2, #12]
    38da:	7351      	strb	r1, [r2, #13]
    38dc:	4b14      	ldr	r3, [pc, #80]	; (3930 <disk_initialize+0x80>)
    38de:	81d3      	strh	r3, [r2, #14]
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    38e0:	2306      	movs	r3, #6
    38e2:	7413      	strb	r3, [r2, #16]
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
    38e4:	4d13      	ldr	r5, [pc, #76]	; (3934 <disk_initialize+0x84>)
    38e6:	4914      	ldr	r1, [pc, #80]	; (3938 <disk_initialize+0x88>)
    38e8:	0028      	movs	r0, r5
    38ea:	4b14      	ldr	r3, [pc, #80]	; (393c <disk_initialize+0x8c>)
    38ec:	4798      	blx	r3
	rtc_calendar_enable(&rtc_instance);
    38ee:	0028      	movs	r0, r5
    38f0:	4b13      	ldr	r3, [pc, #76]	; (3940 <disk_initialize+0x90>)
    38f2:	4798      	blx	r3
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
    38f4:	2001      	movs	r0, #1
	if (drv > MAX_LUN) {
    38f6:	2c01      	cmp	r4, #1
    38f8:	d901      	bls.n	38fe <disk_initialize+0x4e>
		return STA_PROTECT;
	}

	/* The memory should already be initialized */
	return 0;
}
    38fa:	b007      	add	sp, #28
    38fc:	bd30      	pop	{r4, r5, pc}
		mem_status = mem_test_unit_ready(drv);
    38fe:	0020      	movs	r0, r4
    3900:	4b10      	ldr	r3, [pc, #64]	; (3944 <disk_initialize+0x94>)
    3902:	4798      	blx	r3
    3904:	0003      	movs	r3, r0
		if (CTRL_BUSY != mem_status) {
    3906:	2803      	cmp	r0, #3
    3908:	d106      	bne.n	3918 <disk_initialize+0x68>
		mem_status = mem_test_unit_ready(drv);
    390a:	0020      	movs	r0, r4
    390c:	4b0d      	ldr	r3, [pc, #52]	; (3944 <disk_initialize+0x94>)
    390e:	4798      	blx	r3
    3910:	0003      	movs	r3, r0
		return STA_NOINIT;
    3912:	2001      	movs	r0, #1
		if (CTRL_BUSY != mem_status) {
    3914:	2b03      	cmp	r3, #3
    3916:	d0f0      	beq.n	38fa <disk_initialize+0x4a>
	if (mem_status != CTRL_GOOD) {
    3918:	2b00      	cmp	r3, #0
    391a:	d106      	bne.n	392a <disk_initialize+0x7a>
	if (mem_wr_protect(drv)) {
    391c:	0020      	movs	r0, r4
    391e:	4b0a      	ldr	r3, [pc, #40]	; (3948 <disk_initialize+0x98>)
    3920:	4798      	blx	r3
	return 0;
    3922:	1e43      	subs	r3, r0, #1
    3924:	4198      	sbcs	r0, r3
    3926:	0080      	lsls	r0, r0, #2
    3928:	e7e7      	b.n	38fa <disk_initialize+0x4a>
		return STA_NOINIT;
    392a:	2001      	movs	r0, #1
    392c:	e7e5      	b.n	38fa <disk_initialize+0x4a>
    392e:	46c0      	nop			; (mov r8, r8)
    3930:	000007de 	.word	0x000007de
    3934:	20000a38 	.word	0x20000a38
    3938:	40001400 	.word	0x40001400
    393c:	00001cdd 	.word	0x00001cdd
    3940:	00001b99 	.word	0x00001b99
    3944:	00001a71 	.word	0x00001a71
    3948:	00001aad 	.word	0x00001aad

0000394c <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
    394c:	b510      	push	{r4, lr}
	switch (mem_test_unit_ready(drv)) {
    394e:	4b05      	ldr	r3, [pc, #20]	; (3964 <disk_status+0x18>)
    3950:	4798      	blx	r3
    3952:	1e03      	subs	r3, r0, #0
    3954:	d004      	beq.n	3960 <disk_status+0x14>
	case CTRL_GOOD:
		return 0;
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
    3956:	2003      	movs	r0, #3
	switch (mem_test_unit_ready(drv)) {
    3958:	2b02      	cmp	r3, #2
    395a:	d000      	beq.n	395e <disk_status+0x12>
	default:
		return STA_NOINIT;
    395c:	3802      	subs	r0, #2
	}
}
    395e:	bd10      	pop	{r4, pc}
		return 0;
    3960:	2000      	movs	r0, #0
    3962:	e7fc      	b.n	395e <disk_status+0x12>
    3964:	00001a71 	.word	0x00001a71

00003968 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
    3968:	b5f0      	push	{r4, r5, r6, r7, lr}
    396a:	46de      	mov	lr, fp
    396c:	464f      	mov	r7, r9
    396e:	4646      	mov	r6, r8
    3970:	b5c0      	push	{r6, r7, lr}
    3972:	b084      	sub	sp, #16
    3974:	9001      	str	r0, [sp, #4]
    3976:	000d      	movs	r5, r1
    3978:	0014      	movs	r4, r2
    397a:	001f      	movs	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    397c:	4b18      	ldr	r3, [pc, #96]	; (39e0 <disk_read+0x78>)
    397e:	4798      	blx	r3
    3980:	0006      	movs	r6, r0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
    3982:	2001      	movs	r0, #1
	if (uc_sector_size == 0) {
    3984:	2e00      	cmp	r6, #0
    3986:	d105      	bne.n	3994 <disk_read+0x2c>
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
    3988:	b004      	add	sp, #16
    398a:	bc1c      	pop	{r2, r3, r4}
    398c:	4690      	mov	r8, r2
    398e:	4699      	mov	r9, r3
    3990:	46a3      	mov	fp, r4
    3992:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
    3994:	a903      	add	r1, sp, #12
    3996:	9801      	ldr	r0, [sp, #4]
    3998:	4b12      	ldr	r3, [pc, #72]	; (39e4 <disk_read+0x7c>)
    399a:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
    399c:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
    399e:	0032      	movs	r2, r6
    39a0:	437a      	muls	r2, r7
    39a2:	1912      	adds	r2, r2, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
    39a4:	9b03      	ldr	r3, [sp, #12]
    39a6:	3301      	adds	r3, #1
    39a8:	4373      	muls	r3, r6
		return RES_PARERR;
    39aa:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
    39ac:	429a      	cmp	r2, r3
    39ae:	d8eb      	bhi.n	3988 <disk_read+0x20>
	for (i = 0; i < count; i++) {
    39b0:	2f00      	cmp	r7, #0
    39b2:	d011      	beq.n	39d8 <disk_read+0x70>
    39b4:	0273      	lsls	r3, r6, #9
    39b6:	4698      	mov	r8, r3
    39b8:	1c7b      	adds	r3, r7, #1
    39ba:	469b      	mov	fp, r3
    39bc:	2701      	movs	r7, #1
		if (memory_2_ram(drv, sector + uc_sector_size * i,
    39be:	4e0a      	ldr	r6, [pc, #40]	; (39e8 <disk_read+0x80>)
    39c0:	002a      	movs	r2, r5
    39c2:	0021      	movs	r1, r4
    39c4:	9801      	ldr	r0, [sp, #4]
    39c6:	47b0      	blx	r6
    39c8:	2800      	cmp	r0, #0
    39ca:	d107      	bne.n	39dc <disk_read+0x74>
    39cc:	3701      	adds	r7, #1
    39ce:	444c      	add	r4, r9
    39d0:	4445      	add	r5, r8
	for (i = 0; i < count; i++) {
    39d2:	455f      	cmp	r7, fp
    39d4:	d1f4      	bne.n	39c0 <disk_read+0x58>
    39d6:	e7d7      	b.n	3988 <disk_read+0x20>
	return RES_OK;
    39d8:	2000      	movs	r0, #0
    39da:	e7d5      	b.n	3988 <disk_read+0x20>
			return RES_ERROR;
    39dc:	2001      	movs	r0, #1
    39de:	e7d3      	b.n	3988 <disk_read+0x20>
    39e0:	00001aa5 	.word	0x00001aa5
    39e4:	00001a89 	.word	0x00001a89
    39e8:	00001ac5 	.word	0x00001ac5

000039ec <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
    39ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    39ee:	46de      	mov	lr, fp
    39f0:	464f      	mov	r7, r9
    39f2:	4646      	mov	r6, r8
    39f4:	b5c0      	push	{r6, r7, lr}
    39f6:	b084      	sub	sp, #16
    39f8:	9001      	str	r0, [sp, #4]
    39fa:	000d      	movs	r5, r1
    39fc:	0014      	movs	r4, r2
    39fe:	001f      	movs	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    3a00:	4b18      	ldr	r3, [pc, #96]	; (3a64 <disk_write+0x78>)
    3a02:	4798      	blx	r3
    3a04:	0006      	movs	r6, r0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
    3a06:	2001      	movs	r0, #1
	if (uc_sector_size == 0) {
    3a08:	2e00      	cmp	r6, #0
    3a0a:	d105      	bne.n	3a18 <disk_write+0x2c>
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
    3a0c:	b004      	add	sp, #16
    3a0e:	bc1c      	pop	{r2, r3, r4}
    3a10:	4690      	mov	r8, r2
    3a12:	4699      	mov	r9, r3
    3a14:	46a3      	mov	fp, r4
    3a16:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
    3a18:	a903      	add	r1, sp, #12
    3a1a:	9801      	ldr	r0, [sp, #4]
    3a1c:	4b12      	ldr	r3, [pc, #72]	; (3a68 <disk_write+0x7c>)
    3a1e:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
    3a20:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
    3a22:	0032      	movs	r2, r6
    3a24:	437a      	muls	r2, r7
    3a26:	1912      	adds	r2, r2, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
    3a28:	9b03      	ldr	r3, [sp, #12]
    3a2a:	3301      	adds	r3, #1
    3a2c:	4373      	muls	r3, r6
		return RES_PARERR;
    3a2e:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
    3a30:	429a      	cmp	r2, r3
    3a32:	d8eb      	bhi.n	3a0c <disk_write+0x20>
	for (i = 0; i < count; i++) {
    3a34:	2f00      	cmp	r7, #0
    3a36:	d011      	beq.n	3a5c <disk_write+0x70>
    3a38:	0273      	lsls	r3, r6, #9
    3a3a:	4698      	mov	r8, r3
    3a3c:	1c7b      	adds	r3, r7, #1
    3a3e:	469b      	mov	fp, r3
    3a40:	2701      	movs	r7, #1
		if (ram_2_memory(drv, sector + uc_sector_size * i,
    3a42:	4e0a      	ldr	r6, [pc, #40]	; (3a6c <disk_write+0x80>)
    3a44:	002a      	movs	r2, r5
    3a46:	0021      	movs	r1, r4
    3a48:	9801      	ldr	r0, [sp, #4]
    3a4a:	47b0      	blx	r6
    3a4c:	2800      	cmp	r0, #0
    3a4e:	d107      	bne.n	3a60 <disk_write+0x74>
    3a50:	3701      	adds	r7, #1
    3a52:	444c      	add	r4, r9
    3a54:	4445      	add	r5, r8
	for (i = 0; i < count; i++) {
    3a56:	455f      	cmp	r7, fp
    3a58:	d1f4      	bne.n	3a44 <disk_write+0x58>
    3a5a:	e7d7      	b.n	3a0c <disk_write+0x20>
	return RES_OK;
    3a5c:	2000      	movs	r0, #0
    3a5e:	e7d5      	b.n	3a0c <disk_write+0x20>
			return RES_ERROR;
    3a60:	2001      	movs	r0, #1
    3a62:	e7d3      	b.n	3a0c <disk_write+0x20>
    3a64:	00001aa5 	.word	0x00001aa5
    3a68:	00001a89 	.word	0x00001a89
    3a6c:	00001ae5 	.word	0x00001ae5

00003a70 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
    3a70:	b510      	push	{r4, lr}
    3a72:	b082      	sub	sp, #8
    3a74:	0014      	movs	r4, r2
	DRESULT res = RES_PARERR;

	switch (ctrl) {
    3a76:	2901      	cmp	r1, #1
    3a78:	d00b      	beq.n	3a92 <disk_ioctl+0x22>
    3a7a:	2900      	cmp	r1, #0
    3a7c:	d020      	beq.n	3ac0 <disk_ioctl+0x50>
    3a7e:	2902      	cmp	r1, #2
    3a80:	d00f      	beq.n	3aa2 <disk_ioctl+0x32>
			res = RES_NOTRDY;
		}
		break;

	default:
		res = RES_PARERR;
    3a82:	2004      	movs	r0, #4
	switch (ctrl) {
    3a84:	2903      	cmp	r1, #3
    3a86:	d102      	bne.n	3a8e <disk_ioctl+0x1e>
		*(DWORD *)buff = 1;
    3a88:	2301      	movs	r3, #1
    3a8a:	6013      	str	r3, [r2, #0]
		res = RES_OK;
    3a8c:	2000      	movs	r0, #0
	}

	return res;
}
    3a8e:	b002      	add	sp, #8
    3a90:	bd10      	pop	{r4, pc}
		mem_read_capacity(drv, &ul_last_sector_num);
    3a92:	a901      	add	r1, sp, #4
    3a94:	4b0e      	ldr	r3, [pc, #56]	; (3ad0 <disk_ioctl+0x60>)
    3a96:	4798      	blx	r3
		*(DWORD *)buff = ul_last_sector_num + 1;
    3a98:	9b01      	ldr	r3, [sp, #4]
    3a9a:	3301      	adds	r3, #1
    3a9c:	6023      	str	r3, [r4, #0]
		res = RES_OK;
    3a9e:	2000      	movs	r0, #0
	break;
    3aa0:	e7f5      	b.n	3a8e <disk_ioctl+0x1e>
		uint8_t uc_sector_size = mem_sector_size(drv);
    3aa2:	4b0c      	ldr	r3, [pc, #48]	; (3ad4 <disk_ioctl+0x64>)
    3aa4:	4798      	blx	r3
		if ((uc_sector_size != SECTOR_SIZE_512) &&
    3aa6:	1e43      	subs	r3, r0, #1
    3aa8:	b2db      	uxtb	r3, r3
    3aaa:	2b01      	cmp	r3, #1
    3aac:	d904      	bls.n	3ab8 <disk_ioctl+0x48>
				(uc_sector_size != SECTOR_SIZE_1024) &&
    3aae:	1f03      	subs	r3, r0, #4
    3ab0:	22fb      	movs	r2, #251	; 0xfb
			return RES_ERROR;
    3ab2:	2001      	movs	r0, #1
				(uc_sector_size != SECTOR_SIZE_1024) &&
    3ab4:	4213      	tst	r3, r2
    3ab6:	d1ea      	bne.n	3a8e <disk_ioctl+0x1e>
		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
    3ab8:	2300      	movs	r3, #0
    3aba:	7023      	strb	r3, [r4, #0]
		res = RES_OK;
    3abc:	2000      	movs	r0, #0
	break;
    3abe:	e7e6      	b.n	3a8e <disk_ioctl+0x1e>
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
    3ac0:	4b05      	ldr	r3, [pc, #20]	; (3ad8 <disk_ioctl+0x68>)
    3ac2:	4798      	blx	r3
    3ac4:	2800      	cmp	r0, #0
    3ac6:	d001      	beq.n	3acc <disk_ioctl+0x5c>
			res = RES_NOTRDY;
    3ac8:	2003      	movs	r0, #3
    3aca:	e7e0      	b.n	3a8e <disk_ioctl+0x1e>
			res = RES_OK;
    3acc:	2000      	movs	r0, #0
    3ace:	e7de      	b.n	3a8e <disk_ioctl+0x1e>
    3ad0:	00001a89 	.word	0x00001a89
    3ad4:	00001aa5 	.word	0x00001aa5
    3ad8:	00001a71 	.word	0x00001a71

00003adc <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
    3adc:	b500      	push	{lr}
    3ade:	b083      	sub	sp, #12
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
    3ae0:	4669      	mov	r1, sp
    3ae2:	480f      	ldr	r0, [pc, #60]	; (3b20 <get_fattime+0x44>)
    3ae4:	4b0f      	ldr	r3, [pc, #60]	; (3b24 <get_fattime+0x48>)
    3ae6:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
			| (current_time.month << 21)
    3ae8:	466b      	mov	r3, sp
    3aea:	7958      	ldrb	r0, [r3, #5]
    3aec:	0540      	lsls	r0, r0, #21
			| (current_time.day << 16)
    3aee:	791b      	ldrb	r3, [r3, #4]
    3af0:	041b      	lsls	r3, r3, #16
			| (current_time.hour << 11)
			| (current_time.minute << 5)
			| ((current_time.second >> 1) << 0);
    3af2:	4318      	orrs	r0, r3
			| (current_time.hour << 11)
    3af4:	466b      	mov	r3, sp
    3af6:	789b      	ldrb	r3, [r3, #2]
    3af8:	02db      	lsls	r3, r3, #11
			| ((current_time.second >> 1) << 0);
    3afa:	4318      	orrs	r0, r3
			| (current_time.minute << 5)
    3afc:	466b      	mov	r3, sp
    3afe:	785b      	ldrb	r3, [r3, #1]
    3b00:	015b      	lsls	r3, r3, #5
			| ((current_time.second >> 1) << 0);
    3b02:	4318      	orrs	r0, r3
    3b04:	466b      	mov	r3, sp
    3b06:	781b      	ldrb	r3, [r3, #0]
    3b08:	085b      	lsrs	r3, r3, #1
    3b0a:	4318      	orrs	r0, r3
	ul_time = ((current_time.year - 1980) << 25)
    3b0c:	466b      	mov	r3, sp
    3b0e:	88db      	ldrh	r3, [r3, #6]
    3b10:	4a05      	ldr	r2, [pc, #20]	; (3b28 <get_fattime+0x4c>)
    3b12:	4694      	mov	ip, r2
    3b14:	4463      	add	r3, ip
    3b16:	065b      	lsls	r3, r3, #25
			| ((current_time.second >> 1) << 0);
    3b18:	4318      	orrs	r0, r3

	return ul_time;
}
    3b1a:	b003      	add	sp, #12
    3b1c:	bd00      	pop	{pc}
    3b1e:	46c0      	nop			; (mov r8, r8)
    3b20:	20000a38 	.word	0x20000a38
    3b24:	00001c65 	.word	0x00001c65
    3b28:	fffff844 	.word	0xfffff844

00003b2c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
    3b2c:	b510      	push	{r4, lr}
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
    3b2e:	2a00      	cmp	r2, #0
    3b30:	d005      	beq.n	3b3e <mem_cpy+0x12>
    3b32:	2300      	movs	r3, #0
		*d++ = *s++;
    3b34:	5ccc      	ldrb	r4, [r1, r3]
    3b36:	54c4      	strb	r4, [r0, r3]
    3b38:	3301      	adds	r3, #1
	while (cnt--)
    3b3a:	4293      	cmp	r3, r2
    3b3c:	d1fa      	bne.n	3b34 <mem_cpy+0x8>
}
    3b3e:	bd10      	pop	{r4, pc}

00003b40 <mem_set>:
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    3b40:	2a00      	cmp	r2, #0
    3b42:	d005      	beq.n	3b50 <mem_set+0x10>
    3b44:	0003      	movs	r3, r0
    3b46:	1882      	adds	r2, r0, r2
		*d++ = (BYTE)val;
    3b48:	7019      	strb	r1, [r3, #0]
    3b4a:	3301      	adds	r3, #1
	while (cnt--)
    3b4c:	4293      	cmp	r3, r2
    3b4e:	d1fb      	bne.n	3b48 <mem_set+0x8>
}
    3b50:	4770      	bx	lr

00003b52 <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
    3b52:	0002      	movs	r2, r0
	clst -= 2;
    3b54:	3902      	subs	r1, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    3b56:	6983      	ldr	r3, [r0, #24]
    3b58:	3b02      	subs	r3, #2
    3b5a:	2000      	movs	r0, #0
    3b5c:	4299      	cmp	r1, r3
    3b5e:	d203      	bcs.n	3b68 <clust2sect+0x16>
	return clst * fs->csize + fs->database;
    3b60:	7890      	ldrb	r0, [r2, #2]
    3b62:	4341      	muls	r1, r0
    3b64:	6a90      	ldr	r0, [r2, #40]	; 0x28
    3b66:	1808      	adds	r0, r1, r0
}
    3b68:	4770      	bx	lr

00003b6a <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
    3b6a:	0002      	movs	r2, r0
    3b6c:	0001      	movs	r1, r0
    3b6e:	310b      	adds	r1, #11
	BYTE sum = 0;
    3b70:	2000      	movs	r0, #0
	UINT n = 11;

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
    3b72:	0843      	lsrs	r3, r0, #1
    3b74:	01c0      	lsls	r0, r0, #7
    3b76:	4303      	orrs	r3, r0
    3b78:	7810      	ldrb	r0, [r2, #0]
    3b7a:	1818      	adds	r0, r3, r0
    3b7c:	b2c0      	uxtb	r0, r0
    3b7e:	3201      	adds	r2, #1
    3b80:	428a      	cmp	r2, r1
    3b82:	d1f6      	bne.n	3b72 <sum_sfn+0x8>
	return sum;
}
    3b84:	4770      	bx	lr
	...

00003b88 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
    3b88:	b510      	push	{r4, lr}
	if (!fs || !fs->fs_type || fs->id != id)
    3b8a:	2800      	cmp	r0, #0
    3b8c:	d010      	beq.n	3bb0 <validate+0x28>
    3b8e:	7802      	ldrb	r2, [r0, #0]
		return FR_INVALID_OBJECT;
    3b90:	2309      	movs	r3, #9
	if (!fs || !fs->fs_type || fs->id != id)
    3b92:	2a00      	cmp	r2, #0
    3b94:	d101      	bne.n	3b9a <validate+0x12>

	if (disk_status(fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
}
    3b96:	0018      	movs	r0, r3
    3b98:	bd10      	pop	{r4, pc}
	if (!fs || !fs->fs_type || fs->id != id)
    3b9a:	88c2      	ldrh	r2, [r0, #6]
    3b9c:	428a      	cmp	r2, r1
    3b9e:	d1fa      	bne.n	3b96 <validate+0xe>
	if (disk_status(fs->drv) & STA_NOINIT)
    3ba0:	7840      	ldrb	r0, [r0, #1]
    3ba2:	4b04      	ldr	r3, [pc, #16]	; (3bb4 <validate+0x2c>)
    3ba4:	4798      	blx	r3
		return FR_NOT_READY;
    3ba6:	2303      	movs	r3, #3
	return FR_OK;
    3ba8:	07c0      	lsls	r0, r0, #31
    3baa:	17c0      	asrs	r0, r0, #31
    3bac:	4003      	ands	r3, r0
    3bae:	e7f2      	b.n	3b96 <validate+0xe>
		return FR_INVALID_OBJECT;
    3bb0:	2309      	movs	r3, #9
    3bb2:	e7f0      	b.n	3b96 <validate+0xe>
    3bb4:	0000394d 	.word	0x0000394d

00003bb8 <check_fs>:
{
    3bb8:	b570      	push	{r4, r5, r6, lr}
    3bba:	0004      	movs	r4, r0
    3bbc:	000a      	movs	r2, r1
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    3bbe:	0001      	movs	r1, r0
    3bc0:	3130      	adds	r1, #48	; 0x30
    3bc2:	7840      	ldrb	r0, [r0, #1]
    3bc4:	2301      	movs	r3, #1
    3bc6:	4d1f      	ldr	r5, [pc, #124]	; (3c44 <check_fs+0x8c>)
    3bc8:	47a8      	blx	r5
		return 3;
    3bca:	2303      	movs	r3, #3
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    3bcc:	2800      	cmp	r0, #0
    3bce:	d001      	beq.n	3bd4 <check_fs+0x1c>
}
    3bd0:	0018      	movs	r0, r3
    3bd2:	bd70      	pop	{r4, r5, r6, pc}
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    3bd4:	4b1c      	ldr	r3, [pc, #112]	; (3c48 <check_fs+0x90>)
    3bd6:	5ce3      	ldrb	r3, [r4, r3]
    3bd8:	021b      	lsls	r3, r3, #8
    3bda:	4a1c      	ldr	r2, [pc, #112]	; (3c4c <check_fs+0x94>)
    3bdc:	5ca2      	ldrb	r2, [r4, r2]
    3bde:	431a      	orrs	r2, r3
    3be0:	491b      	ldr	r1, [pc, #108]	; (3c50 <check_fs+0x98>)
    3be2:	b212      	sxth	r2, r2
		return 2;
    3be4:	2302      	movs	r3, #2
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    3be6:	428a      	cmp	r2, r1
    3be8:	d1f2      	bne.n	3bd0 <check_fs+0x18>
	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    3bea:	3367      	adds	r3, #103	; 0x67
    3bec:	5ce3      	ldrb	r3, [r4, r3]
    3bee:	061b      	lsls	r3, r3, #24
    3bf0:	2268      	movs	r2, #104	; 0x68
    3bf2:	5ca2      	ldrb	r2, [r4, r2]
    3bf4:	0412      	lsls	r2, r2, #16
    3bf6:	4313      	orrs	r3, r2
    3bf8:	2266      	movs	r2, #102	; 0x66
    3bfa:	5ca2      	ldrb	r2, [r4, r2]
    3bfc:	4313      	orrs	r3, r2
    3bfe:	2267      	movs	r2, #103	; 0x67
    3c00:	5ca2      	ldrb	r2, [r4, r2]
    3c02:	0212      	lsls	r2, r2, #8
    3c04:	4313      	orrs	r3, r2
    3c06:	021b      	lsls	r3, r3, #8
    3c08:	0a1b      	lsrs	r3, r3, #8
    3c0a:	4a12      	ldr	r2, [pc, #72]	; (3c54 <check_fs+0x9c>)
    3c0c:	4293      	cmp	r3, r2
    3c0e:	d016      	beq.n	3c3e <check_fs+0x86>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
    3c10:	2385      	movs	r3, #133	; 0x85
    3c12:	5ce3      	ldrb	r3, [r4, r3]
    3c14:	061b      	lsls	r3, r3, #24
    3c16:	2284      	movs	r2, #132	; 0x84
    3c18:	5ca2      	ldrb	r2, [r4, r2]
    3c1a:	0412      	lsls	r2, r2, #16
    3c1c:	4313      	orrs	r3, r2
    3c1e:	2282      	movs	r2, #130	; 0x82
    3c20:	5ca2      	ldrb	r2, [r4, r2]
    3c22:	4313      	orrs	r3, r2
    3c24:	2283      	movs	r2, #131	; 0x83
    3c26:	5ca2      	ldrb	r2, [r4, r2]
    3c28:	0212      	lsls	r2, r2, #8
    3c2a:	4313      	orrs	r3, r2
    3c2c:	021b      	lsls	r3, r3, #8
    3c2e:	0a1b      	lsrs	r3, r3, #8
    3c30:	4a09      	ldr	r2, [pc, #36]	; (3c58 <check_fs+0xa0>)
    3c32:	4694      	mov	ip, r2
    3c34:	4463      	add	r3, ip
    3c36:	1e58      	subs	r0, r3, #1
    3c38:	4183      	sbcs	r3, r0
		return 3;
    3c3a:	b2db      	uxtb	r3, r3
    3c3c:	e7c8      	b.n	3bd0 <check_fs+0x18>
		return 0;
    3c3e:	2300      	movs	r3, #0
    3c40:	e7c6      	b.n	3bd0 <check_fs+0x18>
    3c42:	46c0      	nop			; (mov r8, r8)
    3c44:	00003969 	.word	0x00003969
    3c48:	0000022f 	.word	0x0000022f
    3c4c:	0000022e 	.word	0x0000022e
    3c50:	ffffaa55 	.word	0xffffaa55
    3c54:	00544146 	.word	0x00544146
    3c58:	ffabbeba 	.word	0xffabbeba

00003c5c <chk_mounted>:
{
    3c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c5e:	46d6      	mov	lr, sl
    3c60:	464f      	mov	r7, r9
    3c62:	4646      	mov	r6, r8
    3c64:	b5c0      	push	{r6, r7, lr}
    3c66:	0015      	movs	r5, r2
	const TCHAR *p = *path;
    3c68:	6803      	ldr	r3, [r0, #0]
	vol = p[0] - '0';					/* Is there a drive number? */
    3c6a:	781c      	ldrb	r4, [r3, #0]
    3c6c:	3c30      	subs	r4, #48	; 0x30
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
    3c6e:	2c09      	cmp	r4, #9
    3c70:	d80e      	bhi.n	3c90 <chk_mounted+0x34>
    3c72:	785a      	ldrb	r2, [r3, #1]
    3c74:	2a3a      	cmp	r2, #58	; 0x3a
    3c76:	d001      	beq.n	3c7c <chk_mounted+0x20>
    3c78:	2400      	movs	r4, #0
    3c7a:	e00a      	b.n	3c92 <chk_mounted+0x36>
		p += 2; *path = p;				/* Return pointer to the path name */
    3c7c:	3302      	adds	r3, #2
    3c7e:	6003      	str	r3, [r0, #0]
		return FR_INVALID_DRIVE;
    3c80:	200b      	movs	r0, #11
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
    3c82:	2c07      	cmp	r4, #7
    3c84:	d905      	bls.n	3c92 <chk_mounted+0x36>
}
    3c86:	bc1c      	pop	{r2, r3, r4}
    3c88:	4690      	mov	r8, r2
    3c8a:	4699      	mov	r9, r3
    3c8c:	46a2      	mov	sl, r4
    3c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3c90:	2400      	movs	r4, #0
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
    3c92:	00a3      	lsls	r3, r4, #2
    3c94:	4ac5      	ldr	r2, [pc, #788]	; (3fac <chk_mounted+0x350>)
    3c96:	589e      	ldr	r6, [r3, r2]
    3c98:	600e      	str	r6, [r1, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    3c9a:	2e00      	cmp	r6, #0
    3c9c:	d100      	bne.n	3ca0 <chk_mounted+0x44>
    3c9e:	e0e8      	b.n	3e72 <chk_mounted+0x216>
	if (fs->fs_type) {					/* If the logical drive has been mounted */
    3ca0:	7833      	ldrb	r3, [r6, #0]
    3ca2:	2b00      	cmp	r3, #0
    3ca4:	d00d      	beq.n	3cc2 <chk_mounted+0x66>
		stat = disk_status(fs->drv);
    3ca6:	7870      	ldrb	r0, [r6, #1]
    3ca8:	4bc1      	ldr	r3, [pc, #772]	; (3fb0 <chk_mounted+0x354>)
    3caa:	4798      	blx	r3
    3cac:	0003      	movs	r3, r0
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
    3cae:	07c2      	lsls	r2, r0, #31
    3cb0:	d407      	bmi.n	3cc2 <chk_mounted+0x66>
			return FR_OK;				/* The file system object is valid */
    3cb2:	2000      	movs	r0, #0
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    3cb4:	2d00      	cmp	r5, #0
    3cb6:	d0e6      	beq.n	3c86 <chk_mounted+0x2a>
    3cb8:	075b      	lsls	r3, r3, #29
    3cba:	d400      	bmi.n	3cbe <chk_mounted+0x62>
    3cbc:	e0db      	b.n	3e76 <chk_mounted+0x21a>
				return FR_WRITE_PROTECTED;
    3cbe:	300a      	adds	r0, #10
    3cc0:	e7e1      	b.n	3c86 <chk_mounted+0x2a>
	fs->fs_type = 0;					/* Clear the file system object */
    3cc2:	2300      	movs	r3, #0
    3cc4:	7033      	strb	r3, [r6, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
    3cc6:	b2e0      	uxtb	r0, r4
    3cc8:	7070      	strb	r0, [r6, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
    3cca:	4bba      	ldr	r3, [pc, #744]	; (3fb4 <chk_mounted+0x358>)
    3ccc:	4798      	blx	r3
    3cce:	0003      	movs	r3, r0
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
    3cd0:	2003      	movs	r0, #3
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
    3cd2:	07da      	lsls	r2, r3, #31
    3cd4:	d4d7      	bmi.n	3c86 <chk_mounted+0x2a>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    3cd6:	2d00      	cmp	r5, #0
    3cd8:	d002      	beq.n	3ce0 <chk_mounted+0x84>
		return FR_WRITE_PROTECTED;
    3cda:	3007      	adds	r0, #7
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    3cdc:	075b      	lsls	r3, r3, #29
    3cde:	d4d2      	bmi.n	3c86 <chk_mounted+0x2a>
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
    3ce0:	2100      	movs	r1, #0
    3ce2:	0030      	movs	r0, r6
    3ce4:	4bb4      	ldr	r3, [pc, #720]	; (3fb8 <chk_mounted+0x35c>)
    3ce6:	4798      	blx	r3
    3ce8:	0003      	movs	r3, r0
    3cea:	2400      	movs	r4, #0
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
    3cec:	2801      	cmp	r0, #1
    3cee:	d100      	bne.n	3cf2 <chk_mounted+0x96>
    3cf0:	e09a      	b.n	3e28 <chk_mounted+0x1cc>
	if (fmt == 3) return FR_DISK_ERR;
    3cf2:	2b03      	cmp	r3, #3
    3cf4:	d100      	bne.n	3cf8 <chk_mounted+0x9c>
    3cf6:	e0c0      	b.n	3e7a <chk_mounted+0x21e>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    3cf8:	200d      	movs	r0, #13
    3cfa:	2b00      	cmp	r3, #0
    3cfc:	d1c3      	bne.n	3c86 <chk_mounted+0x2a>
	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
    3cfe:	333c      	adds	r3, #60	; 0x3c
    3d00:	5cf2      	ldrb	r2, [r6, r3]
    3d02:	0212      	lsls	r2, r2, #8
    3d04:	3b01      	subs	r3, #1
    3d06:	5cf3      	ldrb	r3, [r6, r3]
    3d08:	4313      	orrs	r3, r2
    3d0a:	2280      	movs	r2, #128	; 0x80
    3d0c:	0092      	lsls	r2, r2, #2
    3d0e:	b21b      	sxth	r3, r3
    3d10:	4293      	cmp	r3, r2
    3d12:	d1b8      	bne.n	3c86 <chk_mounted+0x2a>
	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    3d14:	2347      	movs	r3, #71	; 0x47
    3d16:	5cf3      	ldrb	r3, [r6, r3]
    3d18:	021b      	lsls	r3, r3, #8
    3d1a:	3abb      	subs	r2, #187	; 0xbb
    3d1c:	3aff      	subs	r2, #255	; 0xff
    3d1e:	5cb5      	ldrb	r5, [r6, r2]
    3d20:	431d      	orrs	r5, r3
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
    3d22:	d10d      	bne.n	3d40 <chk_mounted+0xe4>
    3d24:	2357      	movs	r3, #87	; 0x57
    3d26:	5cf5      	ldrb	r5, [r6, r3]
    3d28:	062d      	lsls	r5, r5, #24
    3d2a:	3b01      	subs	r3, #1
    3d2c:	5cf3      	ldrb	r3, [r6, r3]
    3d2e:	041b      	lsls	r3, r3, #16
    3d30:	431d      	orrs	r5, r3
    3d32:	2354      	movs	r3, #84	; 0x54
    3d34:	5cf3      	ldrb	r3, [r6, r3]
    3d36:	431d      	orrs	r5, r3
    3d38:	2355      	movs	r3, #85	; 0x55
    3d3a:	5cf3      	ldrb	r3, [r6, r3]
    3d3c:	021b      	lsls	r3, r3, #8
    3d3e:	431d      	orrs	r5, r3
	fs->fsize = fasize;
    3d40:	61f5      	str	r5, [r6, #28]
	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
    3d42:	2340      	movs	r3, #64	; 0x40
    3d44:	5cf2      	ldrb	r2, [r6, r3]
    3d46:	70f2      	strb	r2, [r6, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
    3d48:	1e53      	subs	r3, r2, #1
    3d4a:	200d      	movs	r0, #13
    3d4c:	2b01      	cmp	r3, #1
    3d4e:	d89a      	bhi.n	3c86 <chk_mounted+0x2a>
	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
    3d50:	233d      	movs	r3, #61	; 0x3d
    3d52:	5cf1      	ldrb	r1, [r6, r3]
    3d54:	70b1      	strb	r1, [r6, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    3d56:	2900      	cmp	r1, #0
    3d58:	d095      	beq.n	3c86 <chk_mounted+0x2a>
    3d5a:	1e4b      	subs	r3, r1, #1
    3d5c:	4219      	tst	r1, r3
    3d5e:	d192      	bne.n	3c86 <chk_mounted+0x2a>
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
    3d60:	2342      	movs	r3, #66	; 0x42
    3d62:	5cf3      	ldrb	r3, [r6, r3]
    3d64:	021b      	lsls	r3, r3, #8
    3d66:	3034      	adds	r0, #52	; 0x34
    3d68:	5c30      	ldrb	r0, [r6, r0]
    3d6a:	4318      	orrs	r0, r3
    3d6c:	4680      	mov	r8, r0
    3d6e:	8130      	strh	r0, [r6, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
    3d70:	200d      	movs	r0, #13
    3d72:	4643      	mov	r3, r8
    3d74:	071b      	lsls	r3, r3, #28
    3d76:	d000      	beq.n	3d7a <chk_mounted+0x11e>
    3d78:	e785      	b.n	3c86 <chk_mounted+0x2a>
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    3d7a:	2344      	movs	r3, #68	; 0x44
    3d7c:	5cf3      	ldrb	r3, [r6, r3]
    3d7e:	021b      	lsls	r3, r3, #8
    3d80:	3036      	adds	r0, #54	; 0x36
    3d82:	5c30      	ldrb	r0, [r6, r0]
    3d84:	4303      	orrs	r3, r0
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    3d86:	d10d      	bne.n	3da4 <chk_mounted+0x148>
    3d88:	3353      	adds	r3, #83	; 0x53
    3d8a:	5cf3      	ldrb	r3, [r6, r3]
    3d8c:	061b      	lsls	r3, r3, #24
    3d8e:	2052      	movs	r0, #82	; 0x52
    3d90:	5c30      	ldrb	r0, [r6, r0]
    3d92:	0400      	lsls	r0, r0, #16
    3d94:	4303      	orrs	r3, r0
    3d96:	2050      	movs	r0, #80	; 0x50
    3d98:	5c30      	ldrb	r0, [r6, r0]
    3d9a:	4303      	orrs	r3, r0
    3d9c:	2051      	movs	r0, #81	; 0x51
    3d9e:	5c30      	ldrb	r0, [r6, r0]
    3da0:	0200      	lsls	r0, r0, #8
    3da2:	4303      	orrs	r3, r0
	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
    3da4:	203f      	movs	r0, #63	; 0x3f
    3da6:	5c30      	ldrb	r0, [r6, r0]
    3da8:	0200      	lsls	r0, r0, #8
    3daa:	273e      	movs	r7, #62	; 0x3e
    3dac:	5df7      	ldrb	r7, [r6, r7]
    3dae:	4307      	orrs	r7, r0
    3db0:	46ba      	mov	sl, r7
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
    3db2:	200d      	movs	r0, #13
    3db4:	2f00      	cmp	r7, #0
    3db6:	d100      	bne.n	3dba <chk_mounted+0x15e>
    3db8:	e765      	b.n	3c86 <chk_mounted+0x2a>
	fasize *= b;										/* Number of sectors for FAT area */
    3dba:	436a      	muls	r2, r5
    3dbc:	4691      	mov	r9, r2
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
    3dbe:	4642      	mov	r2, r8
    3dc0:	0917      	lsrs	r7, r2, #4
    3dc2:	4457      	add	r7, sl
    3dc4:	444f      	add	r7, r9
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    3dc6:	42bb      	cmp	r3, r7
    3dc8:	d200      	bcs.n	3dcc <chk_mounted+0x170>
    3dca:	e75c      	b.n	3c86 <chk_mounted+0x2a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    3dcc:	1bd8      	subs	r0, r3, r7
    3dce:	4b7b      	ldr	r3, [pc, #492]	; (3fbc <chk_mounted+0x360>)
    3dd0:	4798      	blx	r3
    3dd2:	0003      	movs	r3, r0
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    3dd4:	200d      	movs	r0, #13
    3dd6:	2b00      	cmp	r3, #0
    3dd8:	d100      	bne.n	3ddc <chk_mounted+0x180>
    3dda:	e754      	b.n	3c86 <chk_mounted+0x2a>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    3ddc:	4a78      	ldr	r2, [pc, #480]	; (3fc0 <chk_mounted+0x364>)
	fmt = FS_FAT12;
    3dde:	429a      	cmp	r2, r3
    3de0:	4192      	sbcs	r2, r2
    3de2:	4252      	negs	r2, r2
    3de4:	3201      	adds	r2, #1
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    3de6:	4977      	ldr	r1, [pc, #476]	; (3fc4 <chk_mounted+0x368>)
    3de8:	428b      	cmp	r3, r1
    3dea:	d848      	bhi.n	3e7e <chk_mounted+0x222>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    3dec:	3302      	adds	r3, #2
    3dee:	61b3      	str	r3, [r6, #24]
	fs->database = bsect + sysect;						/* Data start sector */
    3df0:	19e7      	adds	r7, r4, r7
    3df2:	62b7      	str	r7, [r6, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    3df4:	4454      	add	r4, sl
    3df6:	6234      	str	r4, [r6, #32]
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    3df8:	200d      	movs	r0, #13
    3dfa:	4641      	mov	r1, r8
    3dfc:	2900      	cmp	r1, #0
    3dfe:	d100      	bne.n	3e02 <chk_mounted+0x1a6>
    3e00:	e741      	b.n	3c86 <chk_mounted+0x2a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    3e02:	444c      	add	r4, r9
    3e04:	6274      	str	r4, [r6, #36]	; 0x24
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    3e06:	2a02      	cmp	r2, #2
    3e08:	d12c      	bne.n	3e64 <chk_mounted+0x208>
    3e0a:	005b      	lsls	r3, r3, #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    3e0c:	496e      	ldr	r1, [pc, #440]	; (3fc8 <chk_mounted+0x36c>)
    3e0e:	468c      	mov	ip, r1
    3e10:	4463      	add	r3, ip
    3e12:	0a5b      	lsrs	r3, r3, #9
		return FR_NO_FILESYSTEM;
    3e14:	200d      	movs	r0, #13
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    3e16:	429d      	cmp	r5, r3
    3e18:	d200      	bcs.n	3e1c <chk_mounted+0x1c0>
    3e1a:	e734      	b.n	3c86 <chk_mounted+0x2a>
	fs->free_clust = 0xFFFFFFFF;
    3e1c:	2301      	movs	r3, #1
    3e1e:	425b      	negs	r3, r3
    3e20:	6133      	str	r3, [r6, #16]
	fs->last_clust = 0;
    3e22:	2300      	movs	r3, #0
    3e24:	60f3      	str	r3, [r6, #12]
    3e26:	e0b6      	b.n	3f96 <chk_mounted+0x33a>
		if (tbl[4]) {						/* Is the partition existing? */
    3e28:	33f2      	adds	r3, #242	; 0xf2
    3e2a:	33ff      	adds	r3, #255	; 0xff
    3e2c:	5cf3      	ldrb	r3, [r6, r3]
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    3e2e:	200d      	movs	r0, #13
		if (tbl[4]) {						/* Is the partition existing? */
    3e30:	2b00      	cmp	r3, #0
    3e32:	d100      	bne.n	3e36 <chk_mounted+0x1da>
    3e34:	e727      	b.n	3c86 <chk_mounted+0x2a>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
    3e36:	23fa      	movs	r3, #250	; 0xfa
    3e38:	33ff      	adds	r3, #255	; 0xff
    3e3a:	5cf4      	ldrb	r4, [r6, r3]
    3e3c:	0624      	lsls	r4, r4, #24
    3e3e:	3b01      	subs	r3, #1
    3e40:	5cf3      	ldrb	r3, [r6, r3]
    3e42:	041b      	lsls	r3, r3, #16
    3e44:	431c      	orrs	r4, r3
    3e46:	23fb      	movs	r3, #251	; 0xfb
    3e48:	005b      	lsls	r3, r3, #1
    3e4a:	5cf3      	ldrb	r3, [r6, r3]
    3e4c:	431c      	orrs	r4, r3
    3e4e:	23f8      	movs	r3, #248	; 0xf8
    3e50:	33ff      	adds	r3, #255	; 0xff
    3e52:	5cf2      	ldrb	r2, [r6, r3]
    3e54:	0212      	lsls	r2, r2, #8
    3e56:	4314      	orrs	r4, r2
			fmt = check_fs(fs, bsect);		/* Check the partition */
    3e58:	0021      	movs	r1, r4
    3e5a:	0030      	movs	r0, r6
    3e5c:	4b56      	ldr	r3, [pc, #344]	; (3fb8 <chk_mounted+0x35c>)
    3e5e:	4798      	blx	r3
    3e60:	0003      	movs	r3, r0
    3e62:	e746      	b.n	3cf2 <chk_mounted+0x96>
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    3e64:	2103      	movs	r1, #3
    3e66:	4359      	muls	r1, r3
    3e68:	0849      	lsrs	r1, r1, #1
    3e6a:	2001      	movs	r0, #1
    3e6c:	4003      	ands	r3, r0
    3e6e:	18cb      	adds	r3, r1, r3
    3e70:	e7cc      	b.n	3e0c <chk_mounted+0x1b0>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    3e72:	200c      	movs	r0, #12
    3e74:	e707      	b.n	3c86 <chk_mounted+0x2a>
			return FR_OK;				/* The file system object is valid */
    3e76:	2000      	movs	r0, #0
    3e78:	e705      	b.n	3c86 <chk_mounted+0x2a>
	if (fmt == 3) return FR_DISK_ERR;
    3e7a:	2001      	movs	r0, #1
    3e7c:	e703      	b.n	3c86 <chk_mounted+0x2a>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    3e7e:	3302      	adds	r3, #2
    3e80:	61b3      	str	r3, [r6, #24]
	fs->database = bsect + sysect;						/* Data start sector */
    3e82:	19e7      	adds	r7, r4, r7
    3e84:	62b7      	str	r7, [r6, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    3e86:	4652      	mov	r2, sl
    3e88:	18a2      	adds	r2, r4, r2
    3e8a:	6232      	str	r2, [r6, #32]
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    3e8c:	200d      	movs	r0, #13
    3e8e:	4642      	mov	r2, r8
    3e90:	2a00      	cmp	r2, #0
    3e92:	d000      	beq.n	3e96 <chk_mounted+0x23a>
    3e94:	e6f7      	b.n	3c86 <chk_mounted+0x2a>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    3e96:	225f      	movs	r2, #95	; 0x5f
    3e98:	5cb2      	ldrb	r2, [r6, r2]
    3e9a:	0612      	lsls	r2, r2, #24
    3e9c:	215e      	movs	r1, #94	; 0x5e
    3e9e:	5c71      	ldrb	r1, [r6, r1]
    3ea0:	0409      	lsls	r1, r1, #16
    3ea2:	430a      	orrs	r2, r1
    3ea4:	215c      	movs	r1, #92	; 0x5c
    3ea6:	5c71      	ldrb	r1, [r6, r1]
    3ea8:	430a      	orrs	r2, r1
    3eaa:	215d      	movs	r1, #93	; 0x5d
    3eac:	5c71      	ldrb	r1, [r6, r1]
    3eae:	0209      	lsls	r1, r1, #8
    3eb0:	430a      	orrs	r2, r1
    3eb2:	6272      	str	r2, [r6, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
    3eb4:	009b      	lsls	r3, r3, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    3eb6:	4a44      	ldr	r2, [pc, #272]	; (3fc8 <chk_mounted+0x36c>)
    3eb8:	4694      	mov	ip, r2
    3eba:	4463      	add	r3, ip
    3ebc:	0a5b      	lsrs	r3, r3, #9
		return FR_NO_FILESYSTEM;
    3ebe:	200d      	movs	r0, #13
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    3ec0:	429d      	cmp	r5, r3
    3ec2:	d200      	bcs.n	3ec6 <chk_mounted+0x26a>
    3ec4:	e6df      	b.n	3c86 <chk_mounted+0x2a>
	fs->free_clust = 0xFFFFFFFF;
    3ec6:	2301      	movs	r3, #1
    3ec8:	425b      	negs	r3, r3
    3eca:	6133      	str	r3, [r6, #16]
	fs->last_clust = 0;
    3ecc:	2300      	movs	r3, #0
    3ece:	60f3      	str	r3, [r6, #12]
	 	fs->fsi_flag = 0;
    3ed0:	7173      	strb	r3, [r6, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    3ed2:	3361      	adds	r3, #97	; 0x61
    3ed4:	5cf3      	ldrb	r3, [r6, r3]
    3ed6:	021b      	lsls	r3, r3, #8
    3ed8:	2260      	movs	r2, #96	; 0x60
    3eda:	5cb2      	ldrb	r2, [r6, r2]
    3edc:	431a      	orrs	r2, r3
    3ede:	1912      	adds	r2, r2, r4
    3ee0:	6172      	str	r2, [r6, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    3ee2:	0031      	movs	r1, r6
    3ee4:	3130      	adds	r1, #48	; 0x30
    3ee6:	7870      	ldrb	r0, [r6, #1]
    3ee8:	2301      	movs	r3, #1
    3eea:	4c38      	ldr	r4, [pc, #224]	; (3fcc <chk_mounted+0x370>)
    3eec:	47a0      	blx	r4
    3eee:	2203      	movs	r2, #3
    3ef0:	2800      	cmp	r0, #0
    3ef2:	d150      	bne.n	3f96 <chk_mounted+0x33a>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    3ef4:	4b36      	ldr	r3, [pc, #216]	; (3fd0 <chk_mounted+0x374>)
    3ef6:	5cf2      	ldrb	r2, [r6, r3]
    3ef8:	0212      	lsls	r2, r2, #8
    3efa:	4b36      	ldr	r3, [pc, #216]	; (3fd4 <chk_mounted+0x378>)
    3efc:	5cf3      	ldrb	r3, [r6, r3]
    3efe:	4313      	orrs	r3, r2
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    3f00:	4935      	ldr	r1, [pc, #212]	; (3fd8 <chk_mounted+0x37c>)
    3f02:	b21b      	sxth	r3, r3
    3f04:	2203      	movs	r2, #3
    3f06:	428b      	cmp	r3, r1
    3f08:	d145      	bne.n	3f96 <chk_mounted+0x33a>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    3f0a:	2333      	movs	r3, #51	; 0x33
    3f0c:	5cf3      	ldrb	r3, [r6, r3]
    3f0e:	061b      	lsls	r3, r3, #24
    3f10:	322f      	adds	r2, #47	; 0x2f
    3f12:	5cb2      	ldrb	r2, [r6, r2]
    3f14:	0412      	lsls	r2, r2, #16
    3f16:	4313      	orrs	r3, r2
    3f18:	2230      	movs	r2, #48	; 0x30
    3f1a:	5cb2      	ldrb	r2, [r6, r2]
    3f1c:	4313      	orrs	r3, r2
    3f1e:	2231      	movs	r2, #49	; 0x31
    3f20:	5cb2      	ldrb	r2, [r6, r2]
    3f22:	0212      	lsls	r2, r2, #8
    3f24:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    3f26:	492d      	ldr	r1, [pc, #180]	; (3fdc <chk_mounted+0x380>)
    3f28:	2203      	movs	r2, #3
    3f2a:	428b      	cmp	r3, r1
    3f2c:	d133      	bne.n	3f96 <chk_mounted+0x33a>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
    3f2e:	4b2c      	ldr	r3, [pc, #176]	; (3fe0 <chk_mounted+0x384>)
    3f30:	5cf3      	ldrb	r3, [r6, r3]
    3f32:	061b      	lsls	r3, r3, #24
    3f34:	4a2b      	ldr	r2, [pc, #172]	; (3fe4 <chk_mounted+0x388>)
    3f36:	5cb2      	ldrb	r2, [r6, r2]
    3f38:	0412      	lsls	r2, r2, #16
    3f3a:	4313      	orrs	r3, r2
    3f3c:	2285      	movs	r2, #133	; 0x85
    3f3e:	0092      	lsls	r2, r2, #2
    3f40:	5cb2      	ldrb	r2, [r6, r2]
    3f42:	4313      	orrs	r3, r2
    3f44:	4a28      	ldr	r2, [pc, #160]	; (3fe8 <chk_mounted+0x38c>)
    3f46:	5cb2      	ldrb	r2, [r6, r2]
    3f48:	0212      	lsls	r2, r2, #8
    3f4a:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    3f4c:	4927      	ldr	r1, [pc, #156]	; (3fec <chk_mounted+0x390>)
    3f4e:	2203      	movs	r2, #3
    3f50:	428b      	cmp	r3, r1
    3f52:	d120      	bne.n	3f96 <chk_mounted+0x33a>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    3f54:	4b26      	ldr	r3, [pc, #152]	; (3ff0 <chk_mounted+0x394>)
    3f56:	5cf3      	ldrb	r3, [r6, r3]
    3f58:	061b      	lsls	r3, r3, #24
    3f5a:	4a26      	ldr	r2, [pc, #152]	; (3ff4 <chk_mounted+0x398>)
    3f5c:	5cb2      	ldrb	r2, [r6, r2]
    3f5e:	0412      	lsls	r2, r2, #16
    3f60:	4313      	orrs	r3, r2
    3f62:	2287      	movs	r2, #135	; 0x87
    3f64:	0092      	lsls	r2, r2, #2
    3f66:	5cb2      	ldrb	r2, [r6, r2]
    3f68:	4313      	orrs	r3, r2
    3f6a:	4a23      	ldr	r2, [pc, #140]	; (3ff8 <chk_mounted+0x39c>)
    3f6c:	5cb2      	ldrb	r2, [r6, r2]
    3f6e:	0212      	lsls	r2, r2, #8
    3f70:	4313      	orrs	r3, r2
    3f72:	60f3      	str	r3, [r6, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    3f74:	4b21      	ldr	r3, [pc, #132]	; (3ffc <chk_mounted+0x3a0>)
    3f76:	5cf3      	ldrb	r3, [r6, r3]
    3f78:	061b      	lsls	r3, r3, #24
    3f7a:	4a21      	ldr	r2, [pc, #132]	; (4000 <chk_mounted+0x3a4>)
    3f7c:	5cb2      	ldrb	r2, [r6, r2]
    3f7e:	0412      	lsls	r2, r2, #16
    3f80:	4313      	orrs	r3, r2
    3f82:	2286      	movs	r2, #134	; 0x86
    3f84:	0092      	lsls	r2, r2, #2
    3f86:	5cb2      	ldrb	r2, [r6, r2]
    3f88:	4313      	orrs	r3, r2
    3f8a:	4a1e      	ldr	r2, [pc, #120]	; (4004 <chk_mounted+0x3a8>)
    3f8c:	5cb2      	ldrb	r2, [r6, r2]
    3f8e:	0212      	lsls	r2, r2, #8
    3f90:	4313      	orrs	r3, r2
    3f92:	6133      	str	r3, [r6, #16]
    3f94:	2203      	movs	r2, #3
	fs->fs_type = fmt;		/* FAT sub-type */
    3f96:	7032      	strb	r2, [r6, #0]
	fs->id = ++Fsid;		/* File system mount ID */
    3f98:	4a1b      	ldr	r2, [pc, #108]	; (4008 <chk_mounted+0x3ac>)
    3f9a:	8813      	ldrh	r3, [r2, #0]
    3f9c:	3301      	adds	r3, #1
    3f9e:	b29b      	uxth	r3, r3
    3fa0:	8013      	strh	r3, [r2, #0]
    3fa2:	80f3      	strh	r3, [r6, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
    3fa4:	2000      	movs	r0, #0
    3fa6:	62f0      	str	r0, [r6, #44]	; 0x2c
	fs->wflag = 0;
    3fa8:	7130      	strb	r0, [r6, #4]
	return FR_OK;
    3faa:	e66c      	b.n	3c86 <chk_mounted+0x2a>
    3fac:	20000198 	.word	0x20000198
    3fb0:	0000394d 	.word	0x0000394d
    3fb4:	000038b1 	.word	0x000038b1
    3fb8:	00003bb9 	.word	0x00003bb9
    3fbc:	00005f31 	.word	0x00005f31
    3fc0:	00000ff5 	.word	0x00000ff5
    3fc4:	0000fff5 	.word	0x0000fff5
    3fc8:	000001ff 	.word	0x000001ff
    3fcc:	00003969 	.word	0x00003969
    3fd0:	0000022f 	.word	0x0000022f
    3fd4:	0000022e 	.word	0x0000022e
    3fd8:	ffffaa55 	.word	0xffffaa55
    3fdc:	41615252 	.word	0x41615252
    3fe0:	00000217 	.word	0x00000217
    3fe4:	00000216 	.word	0x00000216
    3fe8:	00000215 	.word	0x00000215
    3fec:	61417272 	.word	0x61417272
    3ff0:	0000021f 	.word	0x0000021f
    3ff4:	0000021e 	.word	0x0000021e
    3ff8:	0000021d 	.word	0x0000021d
    3ffc:	0000021b 	.word	0x0000021b
    4000:	0000021a 	.word	0x0000021a
    4004:	00000219 	.word	0x00000219
    4008:	200001b8 	.word	0x200001b8

0000400c <get_fileinfo>:
{
    400c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    400e:	46de      	mov	lr, fp
    4010:	4657      	mov	r7, sl
    4012:	464e      	mov	r6, r9
    4014:	4645      	mov	r5, r8
    4016:	b5e0      	push	{r5, r6, r7, lr}
    4018:	4683      	mov	fp, r0
    401a:	000d      	movs	r5, r1
	p = fno->fname;
    401c:	000e      	movs	r6, r1
    401e:	3609      	adds	r6, #9
	if (dj->sect) {
    4020:	6903      	ldr	r3, [r0, #16]
    4022:	2b00      	cmp	r3, #0
    4024:	d062      	beq.n	40ec <get_fileinfo+0xe0>
		dir = dj->dir;
    4026:	6944      	ldr	r4, [r0, #20]
		nt = dir[DIR_NTres];		/* NT flag */
    4028:	7b23      	ldrb	r3, [r4, #12]
    402a:	4698      	mov	r8, r3
			c = dir[i];
    402c:	7823      	ldrb	r3, [r4, #0]
			if (c == ' ') break;
    402e:	2b20      	cmp	r3, #32
    4030:	d01f      	beq.n	4072 <get_fileinfo+0x66>
    4032:	2211      	movs	r2, #17
    4034:	4691      	mov	r9, r2
    4036:	4489      	add	r9, r1
    4038:	0031      	movs	r1, r6
    403a:	2200      	movs	r2, #0
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
    403c:	2708      	movs	r7, #8
    403e:	4640      	mov	r0, r8
    4040:	4038      	ands	r0, r7
    4042:	e008      	b.n	4056 <get_fileinfo+0x4a>
			if (c == NDDE) c = (TCHAR)DDE;
    4044:	23e5      	movs	r3, #229	; 0xe5
			*p++ = c;
    4046:	3101      	adds	r1, #1
    4048:	54b3      	strb	r3, [r6, r2]
		for (i = 0; i < 8; i++) {	/* Copy name body */
    404a:	3201      	adds	r2, #1
    404c:	4549      	cmp	r1, r9
    404e:	d011      	beq.n	4074 <get_fileinfo+0x68>
			c = dir[i];
    4050:	5ca3      	ldrb	r3, [r4, r2]
			if (c == ' ') break;
    4052:	2b20      	cmp	r3, #32
    4054:	d00e      	beq.n	4074 <get_fileinfo+0x68>
			if (c == NDDE) c = (TCHAR)DDE;
    4056:	2b05      	cmp	r3, #5
    4058:	d0f4      	beq.n	4044 <get_fileinfo+0x38>
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
    405a:	2800      	cmp	r0, #0
    405c:	d0f3      	beq.n	4046 <get_fileinfo+0x3a>
    405e:	2741      	movs	r7, #65	; 0x41
    4060:	427f      	negs	r7, r7
    4062:	46ba      	mov	sl, r7
    4064:	449a      	add	sl, r3
    4066:	4657      	mov	r7, sl
    4068:	2f19      	cmp	r7, #25
    406a:	d8ec      	bhi.n	4046 <get_fileinfo+0x3a>
    406c:	3320      	adds	r3, #32
    406e:	b2db      	uxtb	r3, r3
    4070:	e7e9      	b.n	4046 <get_fileinfo+0x3a>
	p = fno->fname;
    4072:	0031      	movs	r1, r6
		if (dir[8] != ' ') {		/* Copy name extension */
    4074:	7a23      	ldrb	r3, [r4, #8]
    4076:	2b20      	cmp	r3, #32
    4078:	d020      	beq.n	40bc <get_fileinfo+0xb0>
			*p++ = '.';
    407a:	1c4a      	adds	r2, r1, #1
    407c:	232e      	movs	r3, #46	; 0x2e
    407e:	700b      	strb	r3, [r1, #0]
				c = dir[i];
    4080:	7a23      	ldrb	r3, [r4, #8]
				if (c == ' ') break;
    4082:	2b20      	cmp	r3, #32
    4084:	d05e      	beq.n	4144 <get_fileinfo+0x138>
    4086:	0027      	movs	r7, r4
    4088:	3709      	adds	r7, #9
    408a:	3104      	adds	r1, #4
    408c:	468c      	mov	ip, r1
				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
    408e:	2110      	movs	r1, #16
    4090:	4640      	mov	r0, r8
    4092:	4001      	ands	r1, r0
    4094:	e009      	b.n	40aa <get_fileinfo+0x9e>
				*p++ = c;
    4096:	1c56      	adds	r6, r2, #1
    4098:	7013      	strb	r3, [r2, #0]
			for (i = 8; i < 11; i++) {
    409a:	4566      	cmp	r6, ip
    409c:	d00f      	beq.n	40be <get_fileinfo+0xb2>
    409e:	3701      	adds	r7, #1
				c = dir[i];
    40a0:	1e7b      	subs	r3, r7, #1
    40a2:	781b      	ldrb	r3, [r3, #0]
				if (c == ' ') break;
    40a4:	2b20      	cmp	r3, #32
    40a6:	d00a      	beq.n	40be <get_fileinfo+0xb2>
				*p++ = c;
    40a8:	0032      	movs	r2, r6
				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
    40aa:	2900      	cmp	r1, #0
    40ac:	d0f3      	beq.n	4096 <get_fileinfo+0x8a>
    40ae:	001e      	movs	r6, r3
    40b0:	3e41      	subs	r6, #65	; 0x41
    40b2:	2e19      	cmp	r6, #25
    40b4:	d8ef      	bhi.n	4096 <get_fileinfo+0x8a>
    40b6:	3320      	adds	r3, #32
    40b8:	b2db      	uxtb	r3, r3
    40ba:	e7ec      	b.n	4096 <get_fileinfo+0x8a>
    40bc:	000e      	movs	r6, r1
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
    40be:	7ae3      	ldrb	r3, [r4, #11]
    40c0:	722b      	strb	r3, [r5, #8]
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
    40c2:	7fe3      	ldrb	r3, [r4, #31]
    40c4:	061b      	lsls	r3, r3, #24
    40c6:	7fa2      	ldrb	r2, [r4, #30]
    40c8:	0412      	lsls	r2, r2, #16
    40ca:	4313      	orrs	r3, r2
    40cc:	7f22      	ldrb	r2, [r4, #28]
    40ce:	4313      	orrs	r3, r2
    40d0:	7f62      	ldrb	r2, [r4, #29]
    40d2:	0212      	lsls	r2, r2, #8
    40d4:	4313      	orrs	r3, r2
    40d6:	602b      	str	r3, [r5, #0]
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
    40d8:	7e62      	ldrb	r2, [r4, #25]
    40da:	0212      	lsls	r2, r2, #8
    40dc:	7e23      	ldrb	r3, [r4, #24]
    40de:	4313      	orrs	r3, r2
    40e0:	80ab      	strh	r3, [r5, #4]
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
    40e2:	7de2      	ldrb	r2, [r4, #23]
    40e4:	0212      	lsls	r2, r2, #8
    40e6:	7da3      	ldrb	r3, [r4, #22]
    40e8:	4313      	orrs	r3, r2
    40ea:	80eb      	strh	r3, [r5, #6]
	*p = 0;		/* Terminate SFN str by a \0 */
    40ec:	2300      	movs	r3, #0
    40ee:	7033      	strb	r3, [r6, #0]
	if (fno->lfname && fno->lfsize) {
    40f0:	69af      	ldr	r7, [r5, #24]
    40f2:	2f00      	cmp	r7, #0
    40f4:	d02b      	beq.n	414e <get_fileinfo+0x142>
    40f6:	69eb      	ldr	r3, [r5, #28]
    40f8:	2b00      	cmp	r3, #0
    40fa:	d028      	beq.n	414e <get_fileinfo+0x142>
		i = 0;
    40fc:	2400      	movs	r4, #0
		if (dj->sect && dj->lfn_idx != 0xFFFF) {/* Get LFN if available */
    40fe:	465b      	mov	r3, fp
    4100:	691b      	ldr	r3, [r3, #16]
    4102:	2b00      	cmp	r3, #0
    4104:	d021      	beq.n	414a <get_fileinfo+0x13e>
    4106:	465b      	mov	r3, fp
    4108:	8c1a      	ldrh	r2, [r3, #32]
    410a:	4b17      	ldr	r3, [pc, #92]	; (4168 <get_fileinfo+0x15c>)
    410c:	429a      	cmp	r2, r3
    410e:	d01b      	beq.n	4148 <get_fileinfo+0x13c>
			lfn = dj->lfn;
    4110:	465b      	mov	r3, fp
    4112:	69db      	ldr	r3, [r3, #28]
    4114:	4698      	mov	r8, r3
			while ((w = *lfn++) != 0) {			/* Get an LFN char */
    4116:	8818      	ldrh	r0, [r3, #0]
    4118:	2800      	cmp	r0, #0
    411a:	d01e      	beq.n	415a <get_fileinfo+0x14e>
    411c:	003e      	movs	r6, r7
				w = ff_convert(w, 0);			/* Unicode -> OEM conversion */
    411e:	4b13      	ldr	r3, [pc, #76]	; (416c <get_fileinfo+0x160>)
    4120:	4699      	mov	r9, r3
    4122:	2100      	movs	r1, #0
    4124:	47c8      	blx	r9
				if (!w) { i = 0; break; }		/* Could not convert, no LFN */
    4126:	2800      	cmp	r0, #0
    4128:	d019      	beq.n	415e <get_fileinfo+0x152>
				if (i >= fno->lfsize - 1) { i = 0; break; }	/* Buffer overflow, no LFN */
    412a:	69eb      	ldr	r3, [r5, #28]
    412c:	3b01      	subs	r3, #1
    412e:	42a3      	cmp	r3, r4
    4130:	d917      	bls.n	4162 <get_fileinfo+0x156>
				tp[i++] = (TCHAR)w;
    4132:	3401      	adds	r4, #1
    4134:	7030      	strb	r0, [r6, #0]
			while ((w = *lfn++) != 0) {			/* Get an LFN char */
    4136:	0063      	lsls	r3, r4, #1
    4138:	4642      	mov	r2, r8
    413a:	5ad0      	ldrh	r0, [r2, r3]
    413c:	3601      	adds	r6, #1
    413e:	2800      	cmp	r0, #0
    4140:	d1ef      	bne.n	4122 <get_fileinfo+0x116>
    4142:	e002      	b.n	414a <get_fileinfo+0x13e>
			*p++ = '.';
    4144:	0016      	movs	r6, r2
    4146:	e7ba      	b.n	40be <get_fileinfo+0xb2>
		i = 0;
    4148:	2400      	movs	r4, #0
		tp[i] = 0;	/* Terminate the LFN str by a \0 */
    414a:	2300      	movs	r3, #0
    414c:	553b      	strb	r3, [r7, r4]
}
    414e:	bc3c      	pop	{r2, r3, r4, r5}
    4150:	4690      	mov	r8, r2
    4152:	4699      	mov	r9, r3
    4154:	46a2      	mov	sl, r4
    4156:	46ab      	mov	fp, r5
    4158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		i = 0;
    415a:	2400      	movs	r4, #0
    415c:	e7f5      	b.n	414a <get_fileinfo+0x13e>
				if (!w) { i = 0; break; }		/* Could not convert, no LFN */
    415e:	2400      	movs	r4, #0
    4160:	e7f3      	b.n	414a <get_fileinfo+0x13e>
				if (i >= fno->lfsize - 1) { i = 0; break; }	/* Buffer overflow, no LFN */
    4162:	2400      	movs	r4, #0
    4164:	e7f1      	b.n	414a <get_fileinfo+0x13e>
    4166:	46c0      	nop			; (mov r8, r8)
    4168:	0000ffff 	.word	0x0000ffff
    416c:	0000597d 	.word	0x0000597d

00004170 <move_window>:
{
    4170:	b5f0      	push	{r4, r5, r6, r7, lr}
    4172:	46ce      	mov	lr, r9
    4174:	b500      	push	{lr}
    4176:	b082      	sub	sp, #8
    4178:	0004      	movs	r4, r0
    417a:	000f      	movs	r7, r1
	wsect = fs->winsect;
    417c:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
    417e:	428d      	cmp	r5, r1
    4180:	d03f      	beq.n	4202 <move_window+0x92>
		if (fs->wflag) {	/* Write back dirty window if needed */
    4182:	7903      	ldrb	r3, [r0, #4]
    4184:	2b00      	cmp	r3, #0
    4186:	d107      	bne.n	4198 <move_window+0x28>
	return FR_OK;
    4188:	2300      	movs	r3, #0
		if (sector) {
    418a:	2f00      	cmp	r7, #0
    418c:	d12c      	bne.n	41e8 <move_window+0x78>
}
    418e:	0018      	movs	r0, r3
    4190:	b002      	add	sp, #8
    4192:	bc04      	pop	{r2}
    4194:	4691      	mov	r9, r2
    4196:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    4198:	2330      	movs	r3, #48	; 0x30
    419a:	469c      	mov	ip, r3
    419c:	4484      	add	ip, r0
    419e:	4663      	mov	r3, ip
    41a0:	4661      	mov	r1, ip
    41a2:	9301      	str	r3, [sp, #4]
    41a4:	7840      	ldrb	r0, [r0, #1]
    41a6:	2301      	movs	r3, #1
    41a8:	002a      	movs	r2, r5
    41aa:	4e17      	ldr	r6, [pc, #92]	; (4208 <move_window+0x98>)
    41ac:	47b0      	blx	r6
				return FR_DISK_ERR;
    41ae:	2301      	movs	r3, #1
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    41b0:	2800      	cmp	r0, #0
    41b2:	d1ec      	bne.n	418e <move_window+0x1e>
			fs->wflag = 0;
    41b4:	2300      	movs	r3, #0
    41b6:	7123      	strb	r3, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    41b8:	6a23      	ldr	r3, [r4, #32]
    41ba:	69e2      	ldr	r2, [r4, #28]
    41bc:	4694      	mov	ip, r2
    41be:	4463      	add	r3, ip
    41c0:	429d      	cmp	r5, r3
    41c2:	d2e1      	bcs.n	4188 <move_window+0x18>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    41c4:	78e6      	ldrb	r6, [r4, #3]
    41c6:	2e01      	cmp	r6, #1
    41c8:	d9de      	bls.n	4188 <move_window+0x18>
					disk_write(fs->drv, fs->win, wsect, 1);
    41ca:	4b0f      	ldr	r3, [pc, #60]	; (4208 <move_window+0x98>)
    41cc:	4699      	mov	r9, r3
					wsect += fs->fsize;
    41ce:	69e3      	ldr	r3, [r4, #28]
    41d0:	469c      	mov	ip, r3
    41d2:	4465      	add	r5, ip
					disk_write(fs->drv, fs->win, wsect, 1);
    41d4:	7860      	ldrb	r0, [r4, #1]
    41d6:	2301      	movs	r3, #1
    41d8:	002a      	movs	r2, r5
    41da:	9901      	ldr	r1, [sp, #4]
    41dc:	47c8      	blx	r9
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    41de:	3e01      	subs	r6, #1
    41e0:	b2f6      	uxtb	r6, r6
    41e2:	2e01      	cmp	r6, #1
    41e4:	d1f3      	bne.n	41ce <move_window+0x5e>
    41e6:	e7cf      	b.n	4188 <move_window+0x18>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    41e8:	0021      	movs	r1, r4
    41ea:	3130      	adds	r1, #48	; 0x30
    41ec:	7860      	ldrb	r0, [r4, #1]
    41ee:	3301      	adds	r3, #1
    41f0:	003a      	movs	r2, r7
    41f2:	4d06      	ldr	r5, [pc, #24]	; (420c <move_window+0x9c>)
    41f4:	47a8      	blx	r5
				return FR_DISK_ERR;
    41f6:	2301      	movs	r3, #1
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    41f8:	2800      	cmp	r0, #0
    41fa:	d1c8      	bne.n	418e <move_window+0x1e>
			fs->winsect = sector;
    41fc:	62e7      	str	r7, [r4, #44]	; 0x2c
	return FR_OK;
    41fe:	2300      	movs	r3, #0
    4200:	e7c5      	b.n	418e <move_window+0x1e>
    4202:	2300      	movs	r3, #0
    4204:	e7c3      	b.n	418e <move_window+0x1e>
    4206:	46c0      	nop			; (mov r8, r8)
    4208:	000039ed 	.word	0x000039ed
    420c:	00003969 	.word	0x00003969

00004210 <get_fat>:
{
    4210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4212:	0005      	movs	r5, r0
    4214:	000c      	movs	r4, r1
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    4216:	2901      	cmp	r1, #1
    4218:	d974      	bls.n	4304 <get_fat+0xf4>
		return 1;
    421a:	2001      	movs	r0, #1
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    421c:	69ab      	ldr	r3, [r5, #24]
    421e:	4299      	cmp	r1, r3
    4220:	d271      	bcs.n	4306 <get_fat+0xf6>
	switch (fs->fs_type) {
    4222:	782b      	ldrb	r3, [r5, #0]
    4224:	2b02      	cmp	r3, #2
    4226:	d034      	beq.n	4292 <get_fat+0x82>
    4228:	2b03      	cmp	r3, #3
    422a:	d049      	beq.n	42c0 <get_fat+0xb0>
    422c:	2b01      	cmp	r3, #1
    422e:	d002      	beq.n	4236 <get_fat+0x26>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    4230:	2001      	movs	r0, #1
    4232:	4240      	negs	r0, r0
    4234:	e067      	b.n	4306 <get_fat+0xf6>
		bc = (UINT)clst; bc += bc / 2;
    4236:	084e      	lsrs	r6, r1, #1
    4238:	1876      	adds	r6, r6, r1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    423a:	0a71      	lsrs	r1, r6, #9
    423c:	6a2b      	ldr	r3, [r5, #32]
    423e:	469c      	mov	ip, r3
    4240:	4461      	add	r1, ip
    4242:	0028      	movs	r0, r5
    4244:	4b30      	ldr	r3, [pc, #192]	; (4308 <get_fat+0xf8>)
    4246:	4798      	blx	r3
    4248:	2800      	cmp	r0, #0
    424a:	d002      	beq.n	4252 <get_fat+0x42>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    424c:	2001      	movs	r0, #1
    424e:	4240      	negs	r0, r0
    4250:	e059      	b.n	4306 <get_fat+0xf6>
		wc = fs->win[bc % SS(fs)]; bc++;
    4252:	05f3      	lsls	r3, r6, #23
    4254:	0ddb      	lsrs	r3, r3, #23
    4256:	18eb      	adds	r3, r5, r3
    4258:	3330      	adds	r3, #48	; 0x30
    425a:	781f      	ldrb	r7, [r3, #0]
    425c:	3601      	adds	r6, #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    425e:	0a71      	lsrs	r1, r6, #9
    4260:	6a2b      	ldr	r3, [r5, #32]
    4262:	469c      	mov	ip, r3
    4264:	4461      	add	r1, ip
    4266:	0028      	movs	r0, r5
    4268:	4b27      	ldr	r3, [pc, #156]	; (4308 <get_fat+0xf8>)
    426a:	4798      	blx	r3
    426c:	2800      	cmp	r0, #0
    426e:	d002      	beq.n	4276 <get_fat+0x66>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    4270:	2001      	movs	r0, #1
    4272:	4240      	negs	r0, r0
    4274:	e047      	b.n	4306 <get_fat+0xf6>
		wc |= fs->win[bc % SS(fs)] << 8;
    4276:	05f6      	lsls	r6, r6, #23
    4278:	0df6      	lsrs	r6, r6, #23
    427a:	19ad      	adds	r5, r5, r6
    427c:	3530      	adds	r5, #48	; 0x30
    427e:	7828      	ldrb	r0, [r5, #0]
    4280:	0200      	lsls	r0, r0, #8
    4282:	4338      	orrs	r0, r7
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    4284:	07e3      	lsls	r3, r4, #31
    4286:	d501      	bpl.n	428c <get_fat+0x7c>
    4288:	0900      	lsrs	r0, r0, #4
    428a:	e03c      	b.n	4306 <get_fat+0xf6>
    428c:	0500      	lsls	r0, r0, #20
    428e:	0d00      	lsrs	r0, r0, #20
    4290:	e039      	b.n	4306 <get_fat+0xf6>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    4292:	0a09      	lsrs	r1, r1, #8
    4294:	6a2b      	ldr	r3, [r5, #32]
    4296:	469c      	mov	ip, r3
    4298:	4461      	add	r1, ip
    429a:	0028      	movs	r0, r5
    429c:	4b1a      	ldr	r3, [pc, #104]	; (4308 <get_fat+0xf8>)
    429e:	4798      	blx	r3
    42a0:	2800      	cmp	r0, #0
    42a2:	d002      	beq.n	42aa <get_fat+0x9a>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    42a4:	2001      	movs	r0, #1
    42a6:	4240      	negs	r0, r0
    42a8:	e02d      	b.n	4306 <get_fat+0xf6>
		p = &fs->win[clst * 2 % SS(fs)];
    42aa:	0064      	lsls	r4, r4, #1
    42ac:	23ff      	movs	r3, #255	; 0xff
    42ae:	005b      	lsls	r3, r3, #1
    42b0:	401c      	ands	r4, r3
		return LD_WORD(p);
    42b2:	192d      	adds	r5, r5, r4
    42b4:	3530      	adds	r5, #48	; 0x30
    42b6:	786b      	ldrb	r3, [r5, #1]
    42b8:	021b      	lsls	r3, r3, #8
    42ba:	7828      	ldrb	r0, [r5, #0]
    42bc:	4318      	orrs	r0, r3
    42be:	e022      	b.n	4306 <get_fat+0xf6>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    42c0:	09c9      	lsrs	r1, r1, #7
    42c2:	6a2b      	ldr	r3, [r5, #32]
    42c4:	469c      	mov	ip, r3
    42c6:	4461      	add	r1, ip
    42c8:	0028      	movs	r0, r5
    42ca:	4b0f      	ldr	r3, [pc, #60]	; (4308 <get_fat+0xf8>)
    42cc:	4798      	blx	r3
    42ce:	2800      	cmp	r0, #0
    42d0:	d002      	beq.n	42d8 <get_fat+0xc8>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    42d2:	2001      	movs	r0, #1
    42d4:	4240      	negs	r0, r0
    42d6:	e016      	b.n	4306 <get_fat+0xf6>
		p = &fs->win[clst * 4 % SS(fs)];
    42d8:	00a4      	lsls	r4, r4, #2
    42da:	23fe      	movs	r3, #254	; 0xfe
    42dc:	005b      	lsls	r3, r3, #1
    42de:	401c      	ands	r4, r3
    42e0:	0023      	movs	r3, r4
    42e2:	3330      	adds	r3, #48	; 0x30
    42e4:	18eb      	adds	r3, r5, r3
		return LD_DWORD(p) & 0x0FFFFFFF;
    42e6:	78d8      	ldrb	r0, [r3, #3]
    42e8:	0600      	lsls	r0, r0, #24
    42ea:	789a      	ldrb	r2, [r3, #2]
    42ec:	0412      	lsls	r2, r2, #16
    42ee:	4310      	orrs	r0, r2
    42f0:	192c      	adds	r4, r5, r4
    42f2:	3430      	adds	r4, #48	; 0x30
    42f4:	7822      	ldrb	r2, [r4, #0]
    42f6:	4310      	orrs	r0, r2
    42f8:	785b      	ldrb	r3, [r3, #1]
    42fa:	021b      	lsls	r3, r3, #8
    42fc:	4318      	orrs	r0, r3
    42fe:	0100      	lsls	r0, r0, #4
    4300:	0900      	lsrs	r0, r0, #4
    4302:	e000      	b.n	4306 <get_fat+0xf6>
		return 1;
    4304:	2001      	movs	r0, #1
}
    4306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4308:	00004171 	.word	0x00004171

0000430c <dir_sdi>:
{
    430c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    430e:	0004      	movs	r4, r0
    4310:	000d      	movs	r5, r1
	dj->index = idx;
    4312:	80e1      	strh	r1, [r4, #6]
	clst = dj->sclust;
    4314:	6881      	ldr	r1, [r0, #8]
		return FR_INT_ERR;
    4316:	2002      	movs	r0, #2
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
    4318:	2901      	cmp	r1, #1
    431a:	d003      	beq.n	4324 <dir_sdi+0x18>
    431c:	6823      	ldr	r3, [r4, #0]
    431e:	699a      	ldr	r2, [r3, #24]
    4320:	4291      	cmp	r1, r2
    4322:	d300      	bcc.n	4326 <dir_sdi+0x1a>
}
    4324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    4326:	2900      	cmp	r1, #0
    4328:	d119      	bne.n	435e <dir_sdi+0x52>
    432a:	781a      	ldrb	r2, [r3, #0]
    432c:	2a03      	cmp	r2, #3
    432e:	d013      	beq.n	4358 <dir_sdi+0x4c>
		dj->clust = clst;
    4330:	2200      	movs	r2, #0
    4332:	60e2      	str	r2, [r4, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    4334:	891a      	ldrh	r2, [r3, #8]
			return FR_INT_ERR;
    4336:	2002      	movs	r0, #2
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    4338:	42aa      	cmp	r2, r5
    433a:	d9f3      	bls.n	4324 <dir_sdi+0x18>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    433c:	092a      	lsrs	r2, r5, #4
    433e:	b292      	uxth	r2, r2
    4340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4342:	189b      	adds	r3, r3, r2
    4344:	6123      	str	r3, [r4, #16]
	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
    4346:	6823      	ldr	r3, [r4, #0]
    4348:	3330      	adds	r3, #48	; 0x30
    434a:	220f      	movs	r2, #15
    434c:	4015      	ands	r5, r2
    434e:	016d      	lsls	r5, r5, #5
    4350:	195d      	adds	r5, r3, r5
    4352:	6165      	str	r5, [r4, #20]
	return FR_OK;	/* Seek succeeded */
    4354:	2000      	movs	r0, #0
    4356:	e7e5      	b.n	4324 <dir_sdi+0x18>
		clst = dj->fs->dirbase;
    4358:	6a59      	ldr	r1, [r3, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
    435a:	2900      	cmp	r1, #0
    435c:	d0e8      	beq.n	4330 <dir_sdi+0x24>
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
    435e:	789e      	ldrb	r6, [r3, #2]
    4360:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
    4362:	42b5      	cmp	r5, r6
    4364:	d313      	bcc.n	438e <dir_sdi+0x82>
    4366:	1bad      	subs	r5, r5, r6
    4368:	b2ad      	uxth	r5, r5
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    436a:	4f10      	ldr	r7, [pc, #64]	; (43ac <dir_sdi+0xa0>)
    436c:	e000      	b.n	4370 <dir_sdi+0x64>
    436e:	001d      	movs	r5, r3
    4370:	6820      	ldr	r0, [r4, #0]
    4372:	47b8      	blx	r7
    4374:	0001      	movs	r1, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    4376:	1c43      	adds	r3, r0, #1
    4378:	d012      	beq.n	43a0 <dir_sdi+0x94>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
    437a:	2801      	cmp	r0, #1
    437c:	d912      	bls.n	43a4 <dir_sdi+0x98>
    437e:	6823      	ldr	r3, [r4, #0]
    4380:	699b      	ldr	r3, [r3, #24]
    4382:	4298      	cmp	r0, r3
    4384:	d210      	bcs.n	43a8 <dir_sdi+0x9c>
    4386:	1bab      	subs	r3, r5, r6
    4388:	b29b      	uxth	r3, r3
		while (idx >= ic) {	/* Follow cluster chain */
    438a:	42b5      	cmp	r5, r6
    438c:	d2ef      	bcs.n	436e <dir_sdi+0x62>
		dj->clust = clst;
    438e:	60e1      	str	r1, [r4, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    4390:	6820      	ldr	r0, [r4, #0]
    4392:	4b07      	ldr	r3, [pc, #28]	; (43b0 <dir_sdi+0xa4>)
    4394:	4798      	blx	r3
    4396:	092b      	lsrs	r3, r5, #4
    4398:	b29b      	uxth	r3, r3
    439a:	1818      	adds	r0, r3, r0
    439c:	6120      	str	r0, [r4, #16]
    439e:	e7d2      	b.n	4346 <dir_sdi+0x3a>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    43a0:	2001      	movs	r0, #1
    43a2:	e7bf      	b.n	4324 <dir_sdi+0x18>
				return FR_INT_ERR;
    43a4:	2002      	movs	r0, #2
    43a6:	e7bd      	b.n	4324 <dir_sdi+0x18>
    43a8:	2002      	movs	r0, #2
    43aa:	e7bb      	b.n	4324 <dir_sdi+0x18>
    43ac:	00004211 	.word	0x00004211
    43b0:	00003b53 	.word	0x00003b53

000043b4 <put_fat>:
{
    43b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    43b6:	46c6      	mov	lr, r8
    43b8:	b500      	push	{lr}
    43ba:	0007      	movs	r7, r0
    43bc:	000c      	movs	r4, r1
    43be:	0016      	movs	r6, r2
		res = FR_INT_ERR;
    43c0:	2502      	movs	r5, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    43c2:	2901      	cmp	r1, #1
    43c4:	d902      	bls.n	43cc <put_fat+0x18>
    43c6:	6983      	ldr	r3, [r0, #24]
    43c8:	4299      	cmp	r1, r3
    43ca:	d303      	bcc.n	43d4 <put_fat+0x20>
}
    43cc:	0028      	movs	r0, r5
    43ce:	bc04      	pop	{r2}
    43d0:	4690      	mov	r8, r2
    43d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (fs->fs_type) {
    43d4:	7803      	ldrb	r3, [r0, #0]
    43d6:	2b02      	cmp	r3, #2
    43d8:	d053      	beq.n	4482 <put_fat+0xce>
    43da:	2b03      	cmp	r3, #3
    43dc:	d063      	beq.n	44a6 <put_fat+0xf2>
			res = FR_INT_ERR;
    43de:	2502      	movs	r5, #2
		switch (fs->fs_type) {
    43e0:	2b01      	cmp	r3, #1
    43e2:	d002      	beq.n	43ea <put_fat+0x36>
		fs->wflag = 1;
    43e4:	2301      	movs	r3, #1
    43e6:	713b      	strb	r3, [r7, #4]
    43e8:	e7f0      	b.n	43cc <put_fat+0x18>
			bc = clst; bc += bc / 2;
    43ea:	084b      	lsrs	r3, r1, #1
    43ec:	4698      	mov	r8, r3
    43ee:	4488      	add	r8, r1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    43f0:	4643      	mov	r3, r8
    43f2:	0a59      	lsrs	r1, r3, #9
    43f4:	6a03      	ldr	r3, [r0, #32]
    43f6:	469c      	mov	ip, r3
    43f8:	4461      	add	r1, ip
    43fa:	4b3b      	ldr	r3, [pc, #236]	; (44e8 <put_fat+0x134>)
    43fc:	4798      	blx	r3
    43fe:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    4400:	d1f0      	bne.n	43e4 <put_fat+0x30>
			p = &fs->win[bc % SS(fs)];
    4402:	4643      	mov	r3, r8
    4404:	05db      	lsls	r3, r3, #23
    4406:	0ddb      	lsrs	r3, r3, #23
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    4408:	07e2      	lsls	r2, r4, #31
    440a:	d51f      	bpl.n	444c <put_fat+0x98>
    440c:	18fb      	adds	r3, r7, r3
    440e:	3330      	adds	r3, #48	; 0x30
    4410:	7819      	ldrb	r1, [r3, #0]
    4412:	220f      	movs	r2, #15
    4414:	400a      	ands	r2, r1
    4416:	0131      	lsls	r1, r6, #4
    4418:	20ff      	movs	r0, #255	; 0xff
    441a:	0100      	lsls	r0, r0, #4
    441c:	4001      	ands	r1, r0
    441e:	430a      	orrs	r2, r1
    4420:	701a      	strb	r2, [r3, #0]
			bc++;
    4422:	4644      	mov	r4, r8
    4424:	3401      	adds	r4, #1
			fs->wflag = 1;
    4426:	2301      	movs	r3, #1
    4428:	713b      	strb	r3, [r7, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    442a:	0a61      	lsrs	r1, r4, #9
    442c:	6a3b      	ldr	r3, [r7, #32]
    442e:	469c      	mov	ip, r3
    4430:	4461      	add	r1, ip
    4432:	0038      	movs	r0, r7
    4434:	4b2c      	ldr	r3, [pc, #176]	; (44e8 <put_fat+0x134>)
    4436:	4798      	blx	r3
			if (res != FR_OK) break;
    4438:	2800      	cmp	r0, #0
    443a:	d151      	bne.n	44e0 <put_fat+0x12c>
			p = &fs->win[bc % SS(fs)];
    443c:	05e4      	lsls	r4, r4, #23
    443e:	0de4      	lsrs	r4, r4, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    4440:	0936      	lsrs	r6, r6, #4
    4442:	b2f6      	uxtb	r6, r6
    4444:	193c      	adds	r4, r7, r4
    4446:	3430      	adds	r4, #48	; 0x30
    4448:	7026      	strb	r6, [r4, #0]
			break;
    444a:	e7cb      	b.n	43e4 <put_fat+0x30>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    444c:	18fb      	adds	r3, r7, r3
    444e:	3330      	adds	r3, #48	; 0x30
    4450:	701e      	strb	r6, [r3, #0]
			bc++;
    4452:	4644      	mov	r4, r8
    4454:	3401      	adds	r4, #1
			fs->wflag = 1;
    4456:	2301      	movs	r3, #1
    4458:	713b      	strb	r3, [r7, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    445a:	0a61      	lsrs	r1, r4, #9
    445c:	6a3b      	ldr	r3, [r7, #32]
    445e:	469c      	mov	ip, r3
    4460:	4461      	add	r1, ip
    4462:	0038      	movs	r0, r7
    4464:	4b20      	ldr	r3, [pc, #128]	; (44e8 <put_fat+0x134>)
    4466:	4798      	blx	r3
			if (res != FR_OK) break;
    4468:	2800      	cmp	r0, #0
    446a:	d13b      	bne.n	44e4 <put_fat+0x130>
			p = &fs->win[bc % SS(fs)];
    446c:	05e4      	lsls	r4, r4, #23
    446e:	0de4      	lsrs	r4, r4, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    4470:	193b      	adds	r3, r7, r4
    4472:	3330      	adds	r3, #48	; 0x30
    4474:	781b      	ldrb	r3, [r3, #0]
    4476:	220f      	movs	r2, #15
    4478:	4393      	bics	r3, r2
    447a:	0536      	lsls	r6, r6, #20
    447c:	0f36      	lsrs	r6, r6, #28
    447e:	431e      	orrs	r6, r3
    4480:	e7e0      	b.n	4444 <put_fat+0x90>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    4482:	0a09      	lsrs	r1, r1, #8
    4484:	6a03      	ldr	r3, [r0, #32]
    4486:	469c      	mov	ip, r3
    4488:	4461      	add	r1, ip
    448a:	4b17      	ldr	r3, [pc, #92]	; (44e8 <put_fat+0x134>)
    448c:	4798      	blx	r3
    448e:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    4490:	d1a8      	bne.n	43e4 <put_fat+0x30>
			p = &fs->win[clst * 2 % SS(fs)];
    4492:	0063      	lsls	r3, r4, #1
    4494:	24ff      	movs	r4, #255	; 0xff
    4496:	0064      	lsls	r4, r4, #1
    4498:	4023      	ands	r3, r4
			ST_WORD(p, (WORD)val);
    449a:	18fb      	adds	r3, r7, r3
    449c:	3330      	adds	r3, #48	; 0x30
    449e:	701e      	strb	r6, [r3, #0]
    44a0:	0a36      	lsrs	r6, r6, #8
    44a2:	705e      	strb	r6, [r3, #1]
			break;
    44a4:	e79e      	b.n	43e4 <put_fat+0x30>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    44a6:	09c9      	lsrs	r1, r1, #7
    44a8:	6a03      	ldr	r3, [r0, #32]
    44aa:	469c      	mov	ip, r3
    44ac:	4461      	add	r1, ip
    44ae:	4b0e      	ldr	r3, [pc, #56]	; (44e8 <put_fat+0x134>)
    44b0:	4798      	blx	r3
    44b2:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    44b4:	d196      	bne.n	43e4 <put_fat+0x30>
			p = &fs->win[clst * 4 % SS(fs)];
    44b6:	00a4      	lsls	r4, r4, #2
    44b8:	23fe      	movs	r3, #254	; 0xfe
    44ba:	005b      	lsls	r3, r3, #1
    44bc:	401c      	ands	r4, r3
    44be:	0022      	movs	r2, r4
    44c0:	3230      	adds	r2, #48	; 0x30
    44c2:	18ba      	adds	r2, r7, r2
			val |= LD_DWORD(p) & 0xF0000000;
    44c4:	78d3      	ldrb	r3, [r2, #3]
    44c6:	193c      	adds	r4, r7, r4
    44c8:	3430      	adds	r4, #48	; 0x30
    44ca:	091b      	lsrs	r3, r3, #4
    44cc:	071b      	lsls	r3, r3, #28
    44ce:	431e      	orrs	r6, r3
			ST_DWORD(p, val);
    44d0:	7026      	strb	r6, [r4, #0]
    44d2:	0a33      	lsrs	r3, r6, #8
    44d4:	7053      	strb	r3, [r2, #1]
    44d6:	0c33      	lsrs	r3, r6, #16
    44d8:	7093      	strb	r3, [r2, #2]
    44da:	0e36      	lsrs	r6, r6, #24
    44dc:	70d6      	strb	r6, [r2, #3]
			break;
    44de:	e781      	b.n	43e4 <put_fat+0x30>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    44e0:	0005      	movs	r5, r0
    44e2:	e77f      	b.n	43e4 <put_fat+0x30>
    44e4:	0005      	movs	r5, r0
    44e6:	e77d      	b.n	43e4 <put_fat+0x30>
    44e8:	00004171 	.word	0x00004171

000044ec <create_chain>:
{
    44ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    44ee:	46c6      	mov	lr, r8
    44f0:	b500      	push	{lr}
    44f2:	0005      	movs	r5, r0
    44f4:	4688      	mov	r8, r1
	if (clst == 0) {		/* Create a new chain */
    44f6:	2900      	cmp	r1, #0
    44f8:	d107      	bne.n	450a <create_chain+0x1e>
		scl = fs->last_clust;			/* Get suggested start point */
    44fa:	68c6      	ldr	r6, [r0, #12]
		if (!scl || scl >= fs->n_fatent) scl = 1;
    44fc:	2e00      	cmp	r6, #0
    44fe:	d00d      	beq.n	451c <create_chain+0x30>
    4500:	6983      	ldr	r3, [r0, #24]
    4502:	429e      	cmp	r6, r3
    4504:	d30b      	bcc.n	451e <create_chain+0x32>
    4506:	2601      	movs	r6, #1
    4508:	e009      	b.n	451e <create_chain+0x32>
		cs = get_fat(fs, clst);			/* Check the cluster status */
    450a:	4b26      	ldr	r3, [pc, #152]	; (45a4 <create_chain+0xb8>)
    450c:	4798      	blx	r3
		if (cs < 2) return 1;			/* It is an invalid cluster */
    450e:	2801      	cmp	r0, #1
    4510:	d93d      	bls.n	458e <create_chain+0xa2>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    4512:	69ab      	ldr	r3, [r5, #24]
		scl = clst;
    4514:	4646      	mov	r6, r8
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    4516:	4298      	cmp	r0, r3
    4518:	d201      	bcs.n	451e <create_chain+0x32>
    451a:	e03d      	b.n	4598 <create_chain+0xac>
		if (!scl || scl >= fs->n_fatent) scl = 1;
    451c:	2601      	movs	r6, #1
	ncl = scl;				/* Start cluster */
    451e:	0034      	movs	r4, r6
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    4520:	4f20      	ldr	r7, [pc, #128]	; (45a4 <create_chain+0xb8>)
    4522:	e00a      	b.n	453a <create_chain+0x4e>
    4524:	0021      	movs	r1, r4
    4526:	0028      	movs	r0, r5
    4528:	47b8      	blx	r7
		if (cs == 0) break;				/* Found a free cluster */
    452a:	2800      	cmp	r0, #0
    452c:	d00d      	beq.n	454a <create_chain+0x5e>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    452e:	1c43      	adds	r3, r0, #1
    4530:	d032      	beq.n	4598 <create_chain+0xac>
    4532:	2801      	cmp	r0, #1
    4534:	d030      	beq.n	4598 <create_chain+0xac>
		if (ncl == scl) return 0;		/* No free cluster */
    4536:	42b4      	cmp	r4, r6
    4538:	d02d      	beq.n	4596 <create_chain+0xaa>
		ncl++;							/* Next cluster */
    453a:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
    453c:	69ab      	ldr	r3, [r5, #24]
    453e:	429c      	cmp	r4, r3
    4540:	d3f0      	bcc.n	4524 <create_chain+0x38>
			if (ncl > scl) return 0;	/* No free cluster */
    4542:	2e01      	cmp	r6, #1
    4544:	d925      	bls.n	4592 <create_chain+0xa6>
			ncl = 2;
    4546:	2402      	movs	r4, #2
    4548:	e7ec      	b.n	4524 <create_chain+0x38>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
    454a:	4a17      	ldr	r2, [pc, #92]	; (45a8 <create_chain+0xbc>)
    454c:	0021      	movs	r1, r4
    454e:	0028      	movs	r0, r5
    4550:	4b16      	ldr	r3, [pc, #88]	; (45ac <create_chain+0xc0>)
    4552:	4798      	blx	r3
	if (res == FR_OK && clst != 0) {
    4554:	2800      	cmp	r0, #0
    4556:	d113      	bne.n	4580 <create_chain+0x94>
    4558:	4643      	mov	r3, r8
    455a:	2b00      	cmp	r3, #0
    455c:	d109      	bne.n	4572 <create_chain+0x86>
		fs->last_clust = ncl;			/* Update FSINFO */
    455e:	60ec      	str	r4, [r5, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
    4560:	692b      	ldr	r3, [r5, #16]
    4562:	1c5a      	adds	r2, r3, #1
    4564:	d01b      	beq.n	459e <create_chain+0xb2>
			fs->free_clust--;
    4566:	3b01      	subs	r3, #1
    4568:	612b      	str	r3, [r5, #16]
			fs->fsi_flag = 1;
    456a:	2301      	movs	r3, #1
    456c:	716b      	strb	r3, [r5, #5]
    456e:	0020      	movs	r0, r4
    4570:	e012      	b.n	4598 <create_chain+0xac>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
    4572:	0022      	movs	r2, r4
    4574:	4641      	mov	r1, r8
    4576:	0028      	movs	r0, r5
    4578:	4b0c      	ldr	r3, [pc, #48]	; (45ac <create_chain+0xc0>)
    457a:	4798      	blx	r3
	if (res == FR_OK) {
    457c:	2800      	cmp	r0, #0
    457e:	d0ee      	beq.n	455e <create_chain+0x72>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    4580:	3801      	subs	r0, #1
    4582:	4242      	negs	r2, r0
    4584:	4142      	adcs	r2, r0
    4586:	4250      	negs	r0, r2
    4588:	2301      	movs	r3, #1
    458a:	4318      	orrs	r0, r3
    458c:	e004      	b.n	4598 <create_chain+0xac>
		if (cs < 2) return 1;			/* It is an invalid cluster */
    458e:	2001      	movs	r0, #1
    4590:	e002      	b.n	4598 <create_chain+0xac>
			if (ncl > scl) return 0;	/* No free cluster */
    4592:	2000      	movs	r0, #0
    4594:	e000      	b.n	4598 <create_chain+0xac>
		if (ncl == scl) return 0;		/* No free cluster */
    4596:	2000      	movs	r0, #0
}
    4598:	bc04      	pop	{r2}
    459a:	4690      	mov	r8, r2
    459c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    459e:	0020      	movs	r0, r4
    45a0:	e7fa      	b.n	4598 <create_chain+0xac>
    45a2:	46c0      	nop			; (mov r8, r8)
    45a4:	00004211 	.word	0x00004211
    45a8:	0fffffff 	.word	0x0fffffff
    45ac:	000043b5 	.word	0x000043b5

000045b0 <remove_chain>:
{
    45b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    45b2:	46ce      	mov	lr, r9
    45b4:	4647      	mov	r7, r8
    45b6:	b580      	push	{r7, lr}
    45b8:	0004      	movs	r4, r0
    45ba:	000d      	movs	r5, r1
		res = FR_INT_ERR;
    45bc:	2002      	movs	r0, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    45be:	2901      	cmp	r1, #1
    45c0:	d902      	bls.n	45c8 <remove_chain+0x18>
    45c2:	69a3      	ldr	r3, [r4, #24]
    45c4:	4299      	cmp	r1, r3
    45c6:	d303      	bcc.n	45d0 <remove_chain+0x20>
}
    45c8:	bc0c      	pop	{r2, r3}
    45ca:	4690      	mov	r8, r2
    45cc:	4699      	mov	r9, r3
    45ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			nxt = get_fat(fs, clst);			/* Get cluster status */
    45d0:	4f13      	ldr	r7, [pc, #76]	; (4620 <remove_chain+0x70>)
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    45d2:	4b14      	ldr	r3, [pc, #80]	; (4624 <remove_chain+0x74>)
    45d4:	4698      	mov	r8, r3
				fs->fsi_flag = 1;
    45d6:	2301      	movs	r3, #1
    45d8:	4699      	mov	r9, r3
    45da:	e003      	b.n	45e4 <remove_chain+0x34>
    45dc:	0035      	movs	r5, r6
		while (clst < fs->n_fatent) {			/* Not a last link? */
    45de:	69a3      	ldr	r3, [r4, #24]
    45e0:	42b3      	cmp	r3, r6
    45e2:	d9f1      	bls.n	45c8 <remove_chain+0x18>
			nxt = get_fat(fs, clst);			/* Get cluster status */
    45e4:	0029      	movs	r1, r5
    45e6:	0020      	movs	r0, r4
    45e8:	47b8      	blx	r7
    45ea:	1e06      	subs	r6, r0, #0
			if (nxt == 0) break;				/* Empty cluster? */
    45ec:	d011      	beq.n	4612 <remove_chain+0x62>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    45ee:	2801      	cmp	r0, #1
    45f0:	d011      	beq.n	4616 <remove_chain+0x66>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    45f2:	1c43      	adds	r3, r0, #1
    45f4:	d011      	beq.n	461a <remove_chain+0x6a>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    45f6:	2200      	movs	r2, #0
    45f8:	0029      	movs	r1, r5
    45fa:	0020      	movs	r0, r4
    45fc:	47c0      	blx	r8
			if (res != FR_OK) break;
    45fe:	2800      	cmp	r0, #0
    4600:	d1e2      	bne.n	45c8 <remove_chain+0x18>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    4602:	6923      	ldr	r3, [r4, #16]
    4604:	1c5a      	adds	r2, r3, #1
    4606:	d0e9      	beq.n	45dc <remove_chain+0x2c>
				fs->free_clust++;
    4608:	3301      	adds	r3, #1
    460a:	6123      	str	r3, [r4, #16]
				fs->fsi_flag = 1;
    460c:	464b      	mov	r3, r9
    460e:	7163      	strb	r3, [r4, #5]
    4610:	e7e4      	b.n	45dc <remove_chain+0x2c>
    4612:	2000      	movs	r0, #0
    4614:	e7d8      	b.n	45c8 <remove_chain+0x18>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    4616:	2002      	movs	r0, #2
    4618:	e7d6      	b.n	45c8 <remove_chain+0x18>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    461a:	2001      	movs	r0, #1
    461c:	e7d4      	b.n	45c8 <remove_chain+0x18>
    461e:	46c0      	nop			; (mov r8, r8)
    4620:	00004211 	.word	0x00004211
    4624:	000043b5 	.word	0x000043b5

00004628 <dir_next>:
{
    4628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    462a:	46d6      	mov	lr, sl
    462c:	4647      	mov	r7, r8
    462e:	b580      	push	{r7, lr}
    4630:	0006      	movs	r6, r0
    4632:	000d      	movs	r5, r1
	i = dj->index + 1;
    4634:	88c4      	ldrh	r4, [r0, #6]
    4636:	3401      	adds	r4, #1
    4638:	b2a4      	uxth	r4, r4
		return FR_NO_FILE;
    463a:	2004      	movs	r0, #4
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    463c:	2c00      	cmp	r4, #0
    463e:	d103      	bne.n	4648 <dir_next+0x20>
}
    4640:	bc0c      	pop	{r2, r3}
    4642:	4690      	mov	r8, r2
    4644:	469a      	mov	sl, r3
    4646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    4648:	6933      	ldr	r3, [r6, #16]
    464a:	2b00      	cmp	r3, #0
    464c:	d0f8      	beq.n	4640 <dir_next+0x18>
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
    464e:	270f      	movs	r7, #15
    4650:	4027      	ands	r7, r4
    4652:	d10f      	bne.n	4674 <dir_next+0x4c>
		dj->sect++;					/* Next sector */
    4654:	3301      	adds	r3, #1
    4656:	6133      	str	r3, [r6, #16]
		if (dj->clust == 0) {	/* Static table */
    4658:	68f1      	ldr	r1, [r6, #12]
    465a:	2900      	cmp	r1, #0
    465c:	d104      	bne.n	4668 <dir_next+0x40>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    465e:	6833      	ldr	r3, [r6, #0]
    4660:	891b      	ldrh	r3, [r3, #8]
    4662:	42a3      	cmp	r3, r4
    4664:	d9ec      	bls.n	4640 <dir_next+0x18>
    4666:	e005      	b.n	4674 <dir_next+0x4c>
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    4668:	6830      	ldr	r0, [r6, #0]
    466a:	7883      	ldrb	r3, [r0, #2]
    466c:	3b01      	subs	r3, #1
    466e:	0922      	lsrs	r2, r4, #4
    4670:	421a      	tst	r2, r3
    4672:	d007      	beq.n	4684 <dir_next+0x5c>
	dj->index = i;
    4674:	80f4      	strh	r4, [r6, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    4676:	6833      	ldr	r3, [r6, #0]
    4678:	3330      	adds	r3, #48	; 0x30
    467a:	017f      	lsls	r7, r7, #5
    467c:	19df      	adds	r7, r3, r7
    467e:	6177      	str	r7, [r6, #20]
	return FR_OK;
    4680:	2000      	movs	r0, #0
    4682:	e7dd      	b.n	4640 <dir_next+0x18>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    4684:	4b2c      	ldr	r3, [pc, #176]	; (4738 <dir_next+0x110>)
    4686:	4798      	blx	r3
    4688:	4680      	mov	r8, r0
				if (clst <= 1) return FR_INT_ERR;
    468a:	2002      	movs	r0, #2
    468c:	4643      	mov	r3, r8
    468e:	2b01      	cmp	r3, #1
    4690:	d9d6      	bls.n	4640 <dir_next+0x18>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    4692:	3301      	adds	r3, #1
    4694:	d04b      	beq.n	472e <dir_next+0x106>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
    4696:	6833      	ldr	r3, [r6, #0]
    4698:	699a      	ldr	r2, [r3, #24]
    469a:	4590      	cmp	r8, r2
    469c:	d33f      	bcc.n	471e <dir_next+0xf6>
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
    469e:	3002      	adds	r0, #2
    46a0:	2d00      	cmp	r5, #0
    46a2:	d0cd      	beq.n	4640 <dir_next+0x18>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
    46a4:	68f1      	ldr	r1, [r6, #12]
    46a6:	0018      	movs	r0, r3
    46a8:	4b24      	ldr	r3, [pc, #144]	; (473c <dir_next+0x114>)
    46aa:	4798      	blx	r3
    46ac:	4680      	mov	r8, r0
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    46ae:	2007      	movs	r0, #7
    46b0:	4643      	mov	r3, r8
    46b2:	2b00      	cmp	r3, #0
    46b4:	d0c4      	beq.n	4640 <dir_next+0x18>
					if (clst == 1) return FR_INT_ERR;
    46b6:	3805      	subs	r0, #5
    46b8:	2b01      	cmp	r3, #1
    46ba:	d0c1      	beq.n	4640 <dir_next+0x18>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    46bc:	3801      	subs	r0, #1
    46be:	3301      	adds	r3, #1
    46c0:	d0be      	beq.n	4640 <dir_next+0x18>
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    46c2:	2100      	movs	r1, #0
    46c4:	6830      	ldr	r0, [r6, #0]
    46c6:	4b1e      	ldr	r3, [pc, #120]	; (4740 <dir_next+0x118>)
    46c8:	4798      	blx	r3
    46ca:	0003      	movs	r3, r0
    46cc:	2001      	movs	r0, #1
    46ce:	2b00      	cmp	r3, #0
    46d0:	d1b6      	bne.n	4640 <dir_next+0x18>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
    46d2:	6830      	ldr	r0, [r6, #0]
    46d4:	3030      	adds	r0, #48	; 0x30
    46d6:	2280      	movs	r2, #128	; 0x80
    46d8:	0092      	lsls	r2, r2, #2
    46da:	2100      	movs	r1, #0
    46dc:	4b19      	ldr	r3, [pc, #100]	; (4744 <dir_next+0x11c>)
    46de:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    46e0:	6835      	ldr	r5, [r6, #0]
    46e2:	4641      	mov	r1, r8
    46e4:	0028      	movs	r0, r5
    46e6:	4b18      	ldr	r3, [pc, #96]	; (4748 <dir_next+0x120>)
    46e8:	4798      	blx	r3
    46ea:	62e8      	str	r0, [r5, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    46ec:	2500      	movs	r5, #0
						dj->fs->wflag = 1;
    46ee:	2301      	movs	r3, #1
    46f0:	469a      	mov	sl, r3
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    46f2:	6833      	ldr	r3, [r6, #0]
    46f4:	789a      	ldrb	r2, [r3, #2]
    46f6:	42aa      	cmp	r2, r5
    46f8:	d90e      	bls.n	4718 <dir_next+0xf0>
						dj->fs->wflag = 1;
    46fa:	4652      	mov	r2, sl
    46fc:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    46fe:	2100      	movs	r1, #0
    4700:	6830      	ldr	r0, [r6, #0]
    4702:	4b0f      	ldr	r3, [pc, #60]	; (4740 <dir_next+0x118>)
    4704:	4798      	blx	r3
    4706:	2800      	cmp	r0, #0
    4708:	d113      	bne.n	4732 <dir_next+0x10a>
						dj->fs->winsect++;
    470a:	6832      	ldr	r2, [r6, #0]
    470c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    470e:	3301      	adds	r3, #1
    4710:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    4712:	3501      	adds	r5, #1
    4714:	b2ed      	uxtb	r5, r5
    4716:	e7ec      	b.n	46f2 <dir_next+0xca>
					dj->fs->winsect -= c;						/* Rewind window address */
    4718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    471a:	1b52      	subs	r2, r2, r5
    471c:	62da      	str	r2, [r3, #44]	; 0x2c
				dj->clust = clst;				/* Initialize data for new cluster */
    471e:	4643      	mov	r3, r8
    4720:	60f3      	str	r3, [r6, #12]
				dj->sect = clust2sect(dj->fs, clst);
    4722:	4641      	mov	r1, r8
    4724:	6830      	ldr	r0, [r6, #0]
    4726:	4b08      	ldr	r3, [pc, #32]	; (4748 <dir_next+0x120>)
    4728:	4798      	blx	r3
    472a:	6130      	str	r0, [r6, #16]
    472c:	e7a2      	b.n	4674 <dir_next+0x4c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    472e:	2001      	movs	r0, #1
    4730:	e786      	b.n	4640 <dir_next+0x18>
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    4732:	2001      	movs	r0, #1
    4734:	e784      	b.n	4640 <dir_next+0x18>
    4736:	46c0      	nop			; (mov r8, r8)
    4738:	00004211 	.word	0x00004211
    473c:	000044ed 	.word	0x000044ed
    4740:	00004171 	.word	0x00004171
    4744:	00003b41 	.word	0x00003b41
    4748:	00003b53 	.word	0x00003b53

0000474c <dir_find>:
{
    474c:	b5f0      	push	{r4, r5, r6, r7, lr}
    474e:	46de      	mov	lr, fp
    4750:	4657      	mov	r7, sl
    4752:	464e      	mov	r6, r9
    4754:	4645      	mov	r5, r8
    4756:	b5e0      	push	{r5, r6, r7, lr}
    4758:	b083      	sub	sp, #12
    475a:	0005      	movs	r5, r0
	res = dir_sdi(dj, 0);			/* Rewind directory object */
    475c:	2100      	movs	r1, #0
    475e:	4b5a      	ldr	r3, [pc, #360]	; (48c8 <dir_find+0x17c>)
    4760:	4798      	blx	r3
    4762:	1e07      	subs	r7, r0, #0
	if (res != FR_OK) return res;
    4764:	d000      	beq.n	4768 <dir_find+0x1c>
    4766:	e09e      	b.n	48a6 <dir_find+0x15a>
    4768:	23ff      	movs	r3, #255	; 0xff
    476a:	4699      	mov	r9, r3
    476c:	469a      	mov	sl, r3
		res = move_window(dj->fs, dj->sect);
    476e:	4b57      	ldr	r3, [pc, #348]	; (48cc <dir_find+0x180>)
    4770:	469b      	mov	fp, r3
    4772:	e01b      	b.n	47ac <dir_find+0x60>
			if (a == AM_LFN) {			/* An LFN entry is found */
    4774:	2b0f      	cmp	r3, #15
    4776:	d030      	beq.n	47da <dir_find+0x8e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
    4778:	4653      	mov	r3, sl
    477a:	2b00      	cmp	r3, #0
    477c:	d105      	bne.n	478a <dir_find+0x3e>
    477e:	0020      	movs	r0, r4
    4780:	4b53      	ldr	r3, [pc, #332]	; (48d0 <dir_find+0x184>)
    4782:	4798      	blx	r3
    4784:	4581      	cmp	r9, r0
    4786:	d100      	bne.n	478a <dir_find+0x3e>
    4788:	e08d      	b.n	48a6 <dir_find+0x15a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    478a:	2301      	movs	r3, #1
    478c:	425b      	negs	r3, r3
    478e:	842b      	strh	r3, [r5, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
    4790:	69a8      	ldr	r0, [r5, #24]
    4792:	7ac3      	ldrb	r3, [r0, #11]
    4794:	07db      	lsls	r3, r3, #31
    4796:	d400      	bmi.n	479a <dir_find+0x4e>
    4798:	e07d      	b.n	4896 <dir_find+0x14a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    479a:	23ff      	movs	r3, #255	; 0xff
    479c:	469a      	mov	sl, r3
		res = dir_next(dj, 0);		/* Next entry */
    479e:	2100      	movs	r1, #0
    47a0:	0028      	movs	r0, r5
    47a2:	4b4c      	ldr	r3, [pc, #304]	; (48d4 <dir_find+0x188>)
    47a4:	4798      	blx	r3
    47a6:	1e07      	subs	r7, r0, #0
	} while (res == FR_OK);
    47a8:	d000      	beq.n	47ac <dir_find+0x60>
    47aa:	e07c      	b.n	48a6 <dir_find+0x15a>
		res = move_window(dj->fs, dj->sect);
    47ac:	6929      	ldr	r1, [r5, #16]
    47ae:	6828      	ldr	r0, [r5, #0]
    47b0:	47d8      	blx	fp
    47b2:	1e07      	subs	r7, r0, #0
		if (res != FR_OK) break;
    47b4:	d177      	bne.n	48a6 <dir_find+0x15a>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    47b6:	696c      	ldr	r4, [r5, #20]
		c = dir[DIR_Name];
    47b8:	7826      	ldrb	r6, [r4, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    47ba:	2e00      	cmp	r6, #0
    47bc:	d100      	bne.n	47c0 <dir_find+0x74>
    47be:	e080      	b.n	48c2 <dir_find+0x176>
		a = dir[DIR_Attr] & AM_MASK;
    47c0:	7ae2      	ldrb	r2, [r4, #11]
    47c2:	233f      	movs	r3, #63	; 0x3f
    47c4:	4013      	ands	r3, r2
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
    47c6:	2ee5      	cmp	r6, #229	; 0xe5
    47c8:	d100      	bne.n	47cc <dir_find+0x80>
    47ca:	e077      	b.n	48bc <dir_find+0x170>
    47cc:	0712      	lsls	r2, r2, #28
    47ce:	d5d1      	bpl.n	4774 <dir_find+0x28>
    47d0:	2b0f      	cmp	r3, #15
    47d2:	d002      	beq.n	47da <dir_find+0x8e>
			ord = 0xFF;
    47d4:	23ff      	movs	r3, #255	; 0xff
    47d6:	469a      	mov	sl, r3
    47d8:	e7e1      	b.n	479e <dir_find+0x52>
				if (dj->lfn) {
    47da:	69ef      	ldr	r7, [r5, #28]
    47dc:	2f00      	cmp	r7, #0
    47de:	d0de      	beq.n	479e <dir_find+0x52>
					if (c & LLE) {		/* Is it start of LFN sequence? */
    47e0:	0673      	lsls	r3, r6, #25
    47e2:	d518      	bpl.n	4816 <dir_find+0xca>
						sum = dir[LDIR_Chksum];
    47e4:	7b63      	ldrb	r3, [r4, #13]
    47e6:	4699      	mov	r9, r3
						c &= ~LLE; ord = c;	/* LFN start order */
    47e8:	2340      	movs	r3, #64	; 0x40
    47ea:	439e      	bics	r6, r3
						dj->lfn_idx = dj->index;
    47ec:	88eb      	ldrh	r3, [r5, #6]
    47ee:	842b      	strh	r3, [r5, #32]
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    47f0:	7b63      	ldrb	r3, [r4, #13]
    47f2:	9300      	str	r3, [sp, #0]
    47f4:	22ff      	movs	r2, #255	; 0xff
    47f6:	4692      	mov	sl, r2
    47f8:	454b      	cmp	r3, r9
    47fa:	d1d0      	bne.n	479e <dir_find+0x52>
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
    47fc:	7823      	ldrb	r3, [r4, #0]
    47fe:	3abf      	subs	r2, #191	; 0xbf
    4800:	4393      	bics	r3, r2
    4802:	3b01      	subs	r3, #1
    4804:	005a      	lsls	r2, r3, #1
    4806:	18d2      	adds	r2, r2, r3
    4808:	0092      	lsls	r2, r2, #2
    480a:	4692      	mov	sl, r2
    480c:	449a      	add	sl, r3
	s = 0; wc = 1;
    480e:	2201      	movs	r2, #1
    4810:	2300      	movs	r3, #0
    4812:	4699      	mov	r9, r3
    4814:	e01d      	b.n	4852 <dir_find+0x106>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    4816:	45b2      	cmp	sl, r6
    4818:	d0ea      	beq.n	47f0 <dir_find+0xa4>
    481a:	23ff      	movs	r3, #255	; 0xff
    481c:	469a      	mov	sl, r3
    481e:	e7be      	b.n	479e <dir_find+0x52>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
    4820:	4b2d      	ldr	r3, [pc, #180]	; (48d8 <dir_find+0x18c>)
    4822:	4798      	blx	r3
    4824:	9001      	str	r0, [sp, #4]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
    4826:	4653      	mov	r3, sl
    4828:	2bfe      	cmp	r3, #254	; 0xfe
    482a:	d81f      	bhi.n	486c <dir_find+0x120>
    482c:	2301      	movs	r3, #1
    482e:	4453      	add	r3, sl
    4830:	4698      	mov	r8, r3
    4832:	4653      	mov	r3, sl
    4834:	005b      	lsls	r3, r3, #1
    4836:	5bd8      	ldrh	r0, [r3, r7]
    4838:	4b27      	ldr	r3, [pc, #156]	; (48d8 <dir_find+0x18c>)
    483a:	4798      	blx	r3
    483c:	0002      	movs	r2, r0
    483e:	9b01      	ldr	r3, [sp, #4]
    4840:	4283      	cmp	r3, r0
    4842:	d113      	bne.n	486c <dir_find+0x120>
    4844:	46c2      	mov	sl, r8
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
    4846:	2301      	movs	r3, #1
    4848:	469c      	mov	ip, r3
    484a:	44e1      	add	r9, ip
    484c:	464b      	mov	r3, r9
    484e:	2b0d      	cmp	r3, #13
    4850:	d011      	beq.n	4876 <dir_find+0x12a>
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
    4852:	4b22      	ldr	r3, [pc, #136]	; (48dc <dir_find+0x190>)
    4854:	4649      	mov	r1, r9
    4856:	5cc9      	ldrb	r1, [r1, r3]
    4858:	1863      	adds	r3, r4, r1
    485a:	785b      	ldrb	r3, [r3, #1]
    485c:	021b      	lsls	r3, r3, #8
    485e:	5c60      	ldrb	r0, [r4, r1]
    4860:	4318      	orrs	r0, r3
		if (wc) {	/* Last char has not been processed */
    4862:	2a00      	cmp	r2, #0
    4864:	d1dc      	bne.n	4820 <dir_find+0xd4>
			if (uc != 0xFFFF) return 0;	/* Check filler */
    4866:	4b1e      	ldr	r3, [pc, #120]	; (48e0 <dir_find+0x194>)
    4868:	4298      	cmp	r0, r3
    486a:	d0ec      	beq.n	4846 <dir_find+0xfa>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    486c:	9b00      	ldr	r3, [sp, #0]
    486e:	4699      	mov	r9, r3
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    4870:	23ff      	movs	r3, #255	; 0xff
    4872:	469a      	mov	sl, r3
    4874:	e793      	b.n	479e <dir_find+0x52>
	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
    4876:	7823      	ldrb	r3, [r4, #0]
    4878:	065b      	lsls	r3, r3, #25
    487a:	d506      	bpl.n	488a <dir_find+0x13e>
    487c:	2a00      	cmp	r2, #0
    487e:	d004      	beq.n	488a <dir_find+0x13e>
    4880:	4653      	mov	r3, sl
    4882:	005b      	lsls	r3, r3, #1
    4884:	5bdb      	ldrh	r3, [r3, r7]
    4886:	2b00      	cmp	r3, #0
    4888:	d1f0      	bne.n	486c <dir_find+0x120>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    488a:	3e01      	subs	r6, #1
    488c:	b2f3      	uxtb	r3, r6
    488e:	469a      	mov	sl, r3
    4890:	9b00      	ldr	r3, [sp, #0]
    4892:	4699      	mov	r9, r3
    4894:	e783      	b.n	479e <dir_find+0x52>
    4896:	2300      	movs	r3, #0
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    4898:	5ce1      	ldrb	r1, [r4, r3]
    489a:	5cc2      	ldrb	r2, [r0, r3]
    489c:	4291      	cmp	r1, r2
    489e:	d10a      	bne.n	48b6 <dir_find+0x16a>
    48a0:	3301      	adds	r3, #1
    48a2:	2b0b      	cmp	r3, #11
    48a4:	d1f8      	bne.n	4898 <dir_find+0x14c>
}
    48a6:	0038      	movs	r0, r7
    48a8:	b003      	add	sp, #12
    48aa:	bc3c      	pop	{r2, r3, r4, r5}
    48ac:	4690      	mov	r8, r2
    48ae:	4699      	mov	r9, r3
    48b0:	46a2      	mov	sl, r4
    48b2:	46ab      	mov	fp, r5
    48b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    48b6:	23ff      	movs	r3, #255	; 0xff
    48b8:	469a      	mov	sl, r3
    48ba:	e770      	b.n	479e <dir_find+0x52>
			ord = 0xFF;
    48bc:	23ff      	movs	r3, #255	; 0xff
    48be:	469a      	mov	sl, r3
    48c0:	e76d      	b.n	479e <dir_find+0x52>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    48c2:	2704      	movs	r7, #4
    48c4:	e7ef      	b.n	48a6 <dir_find+0x15a>
    48c6:	46c0      	nop			; (mov r8, r8)
    48c8:	0000430d 	.word	0x0000430d
    48cc:	00004171 	.word	0x00004171
    48d0:	00003b6b 	.word	0x00003b6b
    48d4:	00004629 	.word	0x00004629
    48d8:	000059c5 	.word	0x000059c5
    48dc:	00007390 	.word	0x00007390
    48e0:	0000ffff 	.word	0x0000ffff

000048e4 <dir_register>:
{
    48e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    48e6:	46de      	mov	lr, fp
    48e8:	4657      	mov	r7, sl
    48ea:	464e      	mov	r6, r9
    48ec:	4645      	mov	r5, r8
    48ee:	b5e0      	push	{r5, r6, r7, lr}
    48f0:	b089      	sub	sp, #36	; 0x24
    48f2:	0004      	movs	r4, r0
	fn = dj->fn; lfn = dj->lfn;
    48f4:	6987      	ldr	r7, [r0, #24]
    48f6:	69c3      	ldr	r3, [r0, #28]
    48f8:	469a      	mov	sl, r3
	mem_cpy(sn, fn, 12);
    48fa:	ad05      	add	r5, sp, #20
    48fc:	220c      	movs	r2, #12
    48fe:	0039      	movs	r1, r7
    4900:	0028      	movs	r0, r5
    4902:	4ba7      	ldr	r3, [pc, #668]	; (4ba0 <dir_register+0x2bc>)
    4904:	4798      	blx	r3
	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
    4906:	7aeb      	ldrb	r3, [r5, #11]
    4908:	07db      	lsls	r3, r3, #31
    490a:	d400      	bmi.n	490e <dir_register+0x2a>
    490c:	e070      	b.n	49f0 <dir_register+0x10c>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
    490e:	2300      	movs	r3, #0
    4910:	72fb      	strb	r3, [r7, #11]
    4912:	61e3      	str	r3, [r4, #28]
	mem_cpy(dst, src, 11);
    4914:	220b      	movs	r2, #11
    4916:	a905      	add	r1, sp, #20
    4918:	0038      	movs	r0, r7
    491a:	4ba1      	ldr	r3, [pc, #644]	; (4ba0 <dir_register+0x2bc>)
    491c:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
    491e:	2301      	movs	r3, #1
		ns[i--] = c;
    4920:	ad03      	add	r5, sp, #12
    4922:	001e      	movs	r6, r3
    4924:	46a0      	mov	r8, r4
    4926:	e049      	b.n	49bc <dir_register+0xd8>
    4928:	3801      	subs	r0, #1
    492a:	1829      	adds	r1, r5, r0
    492c:	704a      	strb	r2, [r1, #1]
		seq /= 16;
    492e:	091b      	lsrs	r3, r3, #4
    4930:	b29b      	uxth	r3, r3
	} while (seq);
    4932:	2b00      	cmp	r3, #0
    4934:	d007      	beq.n	4946 <dir_register+0x62>
		c = (seq % 16) + '0';
    4936:	0021      	movs	r1, r4
    4938:	4019      	ands	r1, r3
    493a:	000a      	movs	r2, r1
    493c:	3230      	adds	r2, #48	; 0x30
		if (c > '9') c += 7;
    493e:	2a39      	cmp	r2, #57	; 0x39
    4940:	d9f2      	bls.n	4928 <dir_register+0x44>
    4942:	3207      	adds	r2, #7
    4944:	e7f0      	b.n	4928 <dir_register+0x44>
	ns[i] = '~';
    4946:	337e      	adds	r3, #126	; 0x7e
    4948:	542b      	strb	r3, [r5, r0]
	for (j = 0; j < i && dst[j] != ' '; j++) {
    494a:	2800      	cmp	r0, #0
    494c:	d00a      	beq.n	4964 <dir_register+0x80>
    494e:	783b      	ldrb	r3, [r7, #0]
    4950:	2b20      	cmp	r3, #32
    4952:	d009      	beq.n	4968 <dir_register+0x84>
    4954:	2300      	movs	r3, #0
    4956:	3301      	adds	r3, #1
    4958:	4298      	cmp	r0, r3
    495a:	d007      	beq.n	496c <dir_register+0x88>
    495c:	5cfa      	ldrb	r2, [r7, r3]
    495e:	2a20      	cmp	r2, #32
    4960:	d1f9      	bne.n	4956 <dir_register+0x72>
    4962:	e009      	b.n	4978 <dir_register+0x94>
    4964:	0003      	movs	r3, r0
    4966:	e007      	b.n	4978 <dir_register+0x94>
    4968:	2300      	movs	r3, #0
    496a:	e005      	b.n	4978 <dir_register+0x94>
    496c:	0003      	movs	r3, r0
    496e:	e003      	b.n	4978 <dir_register+0x94>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    4970:	54fa      	strb	r2, [r7, r3]
    4972:	3301      	adds	r3, #1
	} while (j < 8);
    4974:	2b07      	cmp	r3, #7
    4976:	d805      	bhi.n	4984 <dir_register+0xa0>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    4978:	2220      	movs	r2, #32
    497a:	2807      	cmp	r0, #7
    497c:	d8f8      	bhi.n	4970 <dir_register+0x8c>
    497e:	5c2a      	ldrb	r2, [r5, r0]
    4980:	3001      	adds	r0, #1
    4982:	e7f5      	b.n	4970 <dir_register+0x8c>
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
    4984:	4640      	mov	r0, r8
    4986:	4b87      	ldr	r3, [pc, #540]	; (4ba4 <dir_register+0x2c0>)
    4988:	4798      	blx	r3
			if (res != FR_OK) break;
    498a:	2800      	cmp	r0, #0
    498c:	d11c      	bne.n	49c8 <dir_register+0xe4>
		for (n = 1; n < 100; n++) {
    498e:	3601      	adds	r6, #1
    4990:	b2b6      	uxth	r6, r6
    4992:	2e64      	cmp	r6, #100	; 0x64
    4994:	d015      	beq.n	49c2 <dir_register+0xde>
	mem_cpy(dst, src, 11);
    4996:	220b      	movs	r2, #11
    4998:	a905      	add	r1, sp, #20
    499a:	0038      	movs	r0, r7
    499c:	4b80      	ldr	r3, [pc, #512]	; (4ba0 <dir_register+0x2bc>)
    499e:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
    49a0:	0033      	movs	r3, r6
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
    49a2:	2e05      	cmp	r6, #5
    49a4:	d90a      	bls.n	49bc <dir_register+0xd8>
    49a6:	4651      	mov	r1, sl
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
    49a8:	085a      	lsrs	r2, r3, #1
    49aa:	03db      	lsls	r3, r3, #15
    49ac:	4313      	orrs	r3, r2
    49ae:	880a      	ldrh	r2, [r1, #0]
    49b0:	189b      	adds	r3, r3, r2
    49b2:	b29b      	uxth	r3, r3
    49b4:	3102      	adds	r1, #2
    49b6:	880a      	ldrh	r2, [r1, #0]
    49b8:	2a00      	cmp	r2, #0
    49ba:	d1f5      	bne.n	49a8 <dir_register+0xc4>
		for (n = 1; n < 100; n++) {
    49bc:	2007      	movs	r0, #7
		c = (seq % 16) + '0';
    49be:	240f      	movs	r4, #15
    49c0:	e7b9      	b.n	4936 <dir_register+0x52>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
    49c2:	2307      	movs	r3, #7
    49c4:	4698      	mov	r8, r3
    49c6:	e006      	b.n	49d6 <dir_register+0xf2>
    49c8:	4644      	mov	r4, r8
    49ca:	4680      	mov	r8, r0
    49cc:	2e64      	cmp	r6, #100	; 0x64
    49ce:	d100      	bne.n	49d2 <dir_register+0xee>
    49d0:	e0a5      	b.n	4b1e <dir_register+0x23a>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
    49d2:	2804      	cmp	r0, #4
    49d4:	d007      	beq.n	49e6 <dir_register+0x102>
}
    49d6:	4640      	mov	r0, r8
    49d8:	b009      	add	sp, #36	; 0x24
    49da:	bc3c      	pop	{r2, r3, r4, r5}
    49dc:	4690      	mov	r8, r2
    49de:	4699      	mov	r9, r3
    49e0:	46a2      	mov	sl, r4
    49e2:	46ab      	mov	fp, r5
    49e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		fn[NS] = sn[NS]; dj->lfn = lfn;
    49e6:	ab05      	add	r3, sp, #20
    49e8:	7adb      	ldrb	r3, [r3, #11]
    49ea:	72fb      	strb	r3, [r7, #11]
    49ec:	4653      	mov	r3, sl
    49ee:	61e3      	str	r3, [r4, #28]
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
    49f0:	ab05      	add	r3, sp, #20
    49f2:	7adb      	ldrb	r3, [r3, #11]
		ne = 1;
    49f4:	2201      	movs	r2, #1
    49f6:	4693      	mov	fp, r2
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
    49f8:	079b      	lsls	r3, r3, #30
    49fa:	d511      	bpl.n	4a20 <dir_register+0x13c>
		for (ne = 0; lfn[ne]; ne++) ;
    49fc:	4653      	mov	r3, sl
    49fe:	881b      	ldrh	r3, [r3, #0]
    4a00:	2b00      	cmp	r3, #0
    4a02:	d01b      	beq.n	4a3c <dir_register+0x158>
    4a04:	2000      	movs	r0, #0
    4a06:	4652      	mov	r2, sl
    4a08:	3001      	adds	r0, #1
    4a0a:	b280      	uxth	r0, r0
    4a0c:	0043      	lsls	r3, r0, #1
    4a0e:	5a9b      	ldrh	r3, [r3, r2]
    4a10:	2b00      	cmp	r3, #0
    4a12:	d1f9      	bne.n	4a08 <dir_register+0x124>
		ne = (ne + 25) / 13;
    4a14:	3019      	adds	r0, #25
    4a16:	210d      	movs	r1, #13
    4a18:	4b63      	ldr	r3, [pc, #396]	; (4ba8 <dir_register+0x2c4>)
    4a1a:	4798      	blx	r3
    4a1c:	b283      	uxth	r3, r0
    4a1e:	469b      	mov	fp, r3
	res = dir_sdi(dj, 0);
    4a20:	2100      	movs	r1, #0
    4a22:	0020      	movs	r0, r4
    4a24:	4b61      	ldr	r3, [pc, #388]	; (4bac <dir_register+0x2c8>)
    4a26:	4798      	blx	r3
    4a28:	4680      	mov	r8, r0
	if (res != FR_OK) return res;
    4a2a:	2800      	cmp	r0, #0
    4a2c:	d1d3      	bne.n	49d6 <dir_register+0xf2>
    4a2e:	4682      	mov	sl, r0
    4a30:	2500      	movs	r5, #0
		res = move_window(dj->fs, dj->sect);
    4a32:	4f5f      	ldr	r7, [pc, #380]	; (4bb0 <dir_register+0x2cc>)
			n = 0;					/* Not a blank entry. Restart to search */
    4a34:	2600      	movs	r6, #0
		res = dir_next(dj, 1);		/* Next entry with table stretch */
    4a36:	4b5f      	ldr	r3, [pc, #380]	; (4bb4 <dir_register+0x2d0>)
    4a38:	4699      	mov	r9, r3
    4a3a:	e00b      	b.n	4a54 <dir_register+0x170>
		for (ne = 0; lfn[ne]; ne++) ;
    4a3c:	2000      	movs	r0, #0
    4a3e:	e7e9      	b.n	4a14 <dir_register+0x130>
			if (++n == ne) break;	/* A contiguous entry that required count is found */
    4a40:	1c6b      	adds	r3, r5, #1
    4a42:	b29b      	uxth	r3, r3
    4a44:	459b      	cmp	fp, r3
    4a46:	d06d      	beq.n	4b24 <dir_register+0x240>
    4a48:	001d      	movs	r5, r3
		res = dir_next(dj, 1);		/* Next entry with table stretch */
    4a4a:	2101      	movs	r1, #1
    4a4c:	0020      	movs	r0, r4
    4a4e:	47c8      	blx	r9
	} while (res == FR_OK);
    4a50:	2800      	cmp	r0, #0
    4a52:	d112      	bne.n	4a7a <dir_register+0x196>
		res = move_window(dj->fs, dj->sect);
    4a54:	6921      	ldr	r1, [r4, #16]
    4a56:	6820      	ldr	r0, [r4, #0]
    4a58:	47b8      	blx	r7
		if (res != FR_OK) break;
    4a5a:	2800      	cmp	r0, #0
    4a5c:	d000      	beq.n	4a60 <dir_register+0x17c>
    4a5e:	e098      	b.n	4b92 <dir_register+0x2ae>
		c = *dj->dir;				/* Check the entry status */
    4a60:	6963      	ldr	r3, [r4, #20]
    4a62:	781b      	ldrb	r3, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
    4a64:	2be5      	cmp	r3, #229	; 0xe5
    4a66:	d001      	beq.n	4a6c <dir_register+0x188>
    4a68:	2b00      	cmp	r3, #0
    4a6a:	d104      	bne.n	4a76 <dir_register+0x192>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
    4a6c:	2d00      	cmp	r5, #0
    4a6e:	d1e7      	bne.n	4a40 <dir_register+0x15c>
    4a70:	88e3      	ldrh	r3, [r4, #6]
    4a72:	469a      	mov	sl, r3
    4a74:	e7e4      	b.n	4a40 <dir_register+0x15c>
			n = 0;					/* Not a blank entry. Restart to search */
    4a76:	0035      	movs	r5, r6
    4a78:	e7e7      	b.n	4a4a <dir_register+0x166>
    4a7a:	4680      	mov	r8, r0
    4a7c:	e7ab      	b.n	49d6 <dir_register+0xf2>
		res = dir_sdi(dj, is);
    4a7e:	4651      	mov	r1, sl
    4a80:	0020      	movs	r0, r4
    4a82:	4b4a      	ldr	r3, [pc, #296]	; (4bac <dir_register+0x2c8>)
    4a84:	4798      	blx	r3
    4a86:	4680      	mov	r8, r0
		if (res == FR_OK) {
    4a88:	2800      	cmp	r0, #0
    4a8a:	d1a4      	bne.n	49d6 <dir_register+0xf2>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
    4a8c:	69a0      	ldr	r0, [r4, #24]
    4a8e:	4b4a      	ldr	r3, [pc, #296]	; (4bb8 <dir_register+0x2d4>)
    4a90:	4798      	blx	r3
    4a92:	9001      	str	r0, [sp, #4]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    4a94:	46a8      	mov	r8, r5
    4a96:	e01f      	b.n	4ad8 <dir_register+0x1f4>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    4a98:	0022      	movs	r2, r4
    4a9a:	e067      	b.n	4b6c <dir_register+0x288>
    4a9c:	465e      	mov	r6, fp
    4a9e:	4664      	mov	r4, ip
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
    4aa0:	4946      	ldr	r1, [pc, #280]	; (4bbc <dir_register+0x2d8>)
    4aa2:	428b      	cmp	r3, r1
    4aa4:	d003      	beq.n	4aae <dir_register+0x1ca>
    4aa6:	0052      	lsls	r2, r2, #1
    4aa8:	5b93      	ldrh	r3, [r2, r6]
    4aaa:	2b00      	cmp	r3, #0
    4aac:	d103      	bne.n	4ab6 <dir_register+0x1d2>
    4aae:	2340      	movs	r3, #64	; 0x40
    4ab0:	464a      	mov	r2, r9
    4ab2:	431a      	orrs	r2, r3
    4ab4:	4691      	mov	r9, r2
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
    4ab6:	464b      	mov	r3, r9
    4ab8:	7003      	strb	r3, [r0, #0]
				dj->fs->wflag = 1;
    4aba:	2301      	movs	r3, #1
    4abc:	6822      	ldr	r2, [r4, #0]
    4abe:	7113      	strb	r3, [r2, #4]
				res = dir_next(dj, 0);	/* Next entry */
    4ac0:	2100      	movs	r1, #0
    4ac2:	0020      	movs	r0, r4
    4ac4:	4b3b      	ldr	r3, [pc, #236]	; (4bb4 <dir_register+0x2d0>)
    4ac6:	4798      	blx	r3
			} while (res == FR_OK && --ne);
    4ac8:	2800      	cmp	r0, #0
    4aca:	d166      	bne.n	4b9a <dir_register+0x2b6>
    4acc:	4645      	mov	r5, r8
    4ace:	3d01      	subs	r5, #1
    4ad0:	b2ab      	uxth	r3, r5
    4ad2:	4698      	mov	r8, r3
    4ad4:	2b00      	cmp	r3, #0
    4ad6:	d027      	beq.n	4b28 <dir_register+0x244>
				res = move_window(dj->fs, dj->sect);
    4ad8:	6921      	ldr	r1, [r4, #16]
    4ada:	6820      	ldr	r0, [r4, #0]
    4adc:	4b34      	ldr	r3, [pc, #208]	; (4bb0 <dir_register+0x2cc>)
    4ade:	4798      	blx	r3
				if (res != FR_OK) break;
    4ae0:	2800      	cmp	r0, #0
    4ae2:	d158      	bne.n	4b96 <dir_register+0x2b2>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
    4ae4:	69e6      	ldr	r6, [r4, #28]
    4ae6:	6960      	ldr	r0, [r4, #20]
    4ae8:	4643      	mov	r3, r8
    4aea:	466a      	mov	r2, sp
    4aec:	70d3      	strb	r3, [r2, #3]
    4aee:	78d3      	ldrb	r3, [r2, #3]
    4af0:	4699      	mov	r9, r3
	dir[LDIR_Chksum] = sum;			/* Set check sum */
    4af2:	7913      	ldrb	r3, [r2, #4]
    4af4:	7343      	strb	r3, [r0, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
    4af6:	230f      	movs	r3, #15
    4af8:	72c3      	strb	r3, [r0, #11]
	dir[LDIR_Type] = 0;
    4afa:	2300      	movs	r3, #0
    4afc:	7303      	strb	r3, [r0, #12]
	ST_WORD(dir+LDIR_FstClusLO, 0);
    4afe:	7683      	strb	r3, [r0, #26]
    4b00:	76c3      	strb	r3, [r0, #27]
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
    4b02:	464b      	mov	r3, r9
    4b04:	3b01      	subs	r3, #1
    4b06:	005a      	lsls	r2, r3, #1
    4b08:	18d2      	adds	r2, r2, r3
    4b0a:	0092      	lsls	r2, r2, #2
    4b0c:	18d2      	adds	r2, r2, r3
    4b0e:	492c      	ldr	r1, [pc, #176]	; (4bc0 <dir_register+0x2dc>)
    4b10:	000d      	movs	r5, r1
    4b12:	350d      	adds	r5, #13
	s = wc = 0;
    4b14:	2300      	movs	r3, #0
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    4b16:	4f29      	ldr	r7, [pc, #164]	; (4bbc <dir_register+0x2d8>)
    4b18:	46b3      	mov	fp, r6
    4b1a:	46a4      	mov	ip, r4
    4b1c:	e029      	b.n	4b72 <dir_register+0x28e>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
    4b1e:	2307      	movs	r3, #7
    4b20:	4698      	mov	r8, r3
    4b22:	e758      	b.n	49d6 <dir_register+0xf2>
	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
    4b24:	2b01      	cmp	r3, #1
    4b26:	d8aa      	bhi.n	4a7e <dir_register+0x19a>
		res = move_window(dj->fs, dj->sect);
    4b28:	6921      	ldr	r1, [r4, #16]
    4b2a:	6820      	ldr	r0, [r4, #0]
    4b2c:	4b20      	ldr	r3, [pc, #128]	; (4bb0 <dir_register+0x2cc>)
    4b2e:	4798      	blx	r3
    4b30:	4680      	mov	r8, r0
		if (res == FR_OK) {
    4b32:	2800      	cmp	r0, #0
    4b34:	d000      	beq.n	4b38 <dir_register+0x254>
    4b36:	e74e      	b.n	49d6 <dir_register+0xf2>
			dir = dj->dir;
    4b38:	6965      	ldr	r5, [r4, #20]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
    4b3a:	2220      	movs	r2, #32
    4b3c:	2100      	movs	r1, #0
    4b3e:	0028      	movs	r0, r5
    4b40:	4b20      	ldr	r3, [pc, #128]	; (4bc4 <dir_register+0x2e0>)
    4b42:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
    4b44:	220b      	movs	r2, #11
    4b46:	69a1      	ldr	r1, [r4, #24]
    4b48:	0028      	movs	r0, r5
    4b4a:	4b15      	ldr	r3, [pc, #84]	; (4ba0 <dir_register+0x2bc>)
    4b4c:	4798      	blx	r3
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
    4b4e:	69a3      	ldr	r3, [r4, #24]
    4b50:	7ada      	ldrb	r2, [r3, #11]
    4b52:	2318      	movs	r3, #24
    4b54:	4013      	ands	r3, r2
    4b56:	732b      	strb	r3, [r5, #12]
			dj->fs->wflag = 1;
    4b58:	6823      	ldr	r3, [r4, #0]
    4b5a:	2201      	movs	r2, #1
    4b5c:	711a      	strb	r2, [r3, #4]
    4b5e:	e73a      	b.n	49d6 <dir_register+0xf2>
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    4b60:	780c      	ldrb	r4, [r1, #0]
    4b62:	26ff      	movs	r6, #255	; 0xff
    4b64:	5506      	strb	r6, [r0, r4]
    4b66:	1904      	adds	r4, r0, r4
    4b68:	26ff      	movs	r6, #255	; 0xff
    4b6a:	7066      	strb	r6, [r4, #1]
    4b6c:	3101      	adds	r1, #1
	} while (++s < 13);
    4b6e:	42a9      	cmp	r1, r5
    4b70:	d094      	beq.n	4a9c <dir_register+0x1b8>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    4b72:	42bb      	cmp	r3, r7
    4b74:	d0f4      	beq.n	4b60 <dir_register+0x27c>
    4b76:	1c54      	adds	r4, r2, #1
    4b78:	0052      	lsls	r2, r2, #1
    4b7a:	465b      	mov	r3, fp
    4b7c:	5ad3      	ldrh	r3, [r2, r3]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    4b7e:	780a      	ldrb	r2, [r1, #0]
    4b80:	5483      	strb	r3, [r0, r2]
    4b82:	1882      	adds	r2, r0, r2
    4b84:	0a1e      	lsrs	r6, r3, #8
    4b86:	7056      	strb	r6, [r2, #1]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    4b88:	2b00      	cmp	r3, #0
    4b8a:	d185      	bne.n	4a98 <dir_register+0x1b4>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    4b8c:	0022      	movs	r2, r4
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    4b8e:	003b      	movs	r3, r7
    4b90:	e7ec      	b.n	4b6c <dir_register+0x288>
    4b92:	4680      	mov	r8, r0
    4b94:	e71f      	b.n	49d6 <dir_register+0xf2>
    4b96:	4680      	mov	r8, r0
    4b98:	e71d      	b.n	49d6 <dir_register+0xf2>
    4b9a:	4680      	mov	r8, r0
    4b9c:	e71b      	b.n	49d6 <dir_register+0xf2>
    4b9e:	46c0      	nop			; (mov r8, r8)
    4ba0:	00003b2d 	.word	0x00003b2d
    4ba4:	0000474d 	.word	0x0000474d
    4ba8:	00006045 	.word	0x00006045
    4bac:	0000430d 	.word	0x0000430d
    4bb0:	00004171 	.word	0x00004171
    4bb4:	00004629 	.word	0x00004629
    4bb8:	00003b6b 	.word	0x00003b6b
    4bbc:	0000ffff 	.word	0x0000ffff
    4bc0:	00007390 	.word	0x00007390
    4bc4:	00003b41 	.word	0x00003b41

00004bc8 <dir_read>:
{
    4bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    4bca:	46de      	mov	lr, fp
    4bcc:	4657      	mov	r7, sl
    4bce:	464e      	mov	r6, r9
    4bd0:	4645      	mov	r5, r8
    4bd2:	b5e0      	push	{r5, r6, r7, lr}
    4bd4:	b083      	sub	sp, #12
    4bd6:	0005      	movs	r5, r0
	BYTE a, ord = 0xFF, sum = 0xFF;
    4bd8:	23ff      	movs	r3, #255	; 0xff
    4bda:	4699      	mov	r9, r3
    4bdc:	26ff      	movs	r6, #255	; 0xff
	res = FR_NO_FILE;
    4bde:	2404      	movs	r4, #4
		res = move_window(dj->fs, dj->sect);
    4be0:	4f44      	ldr	r7, [pc, #272]	; (4cf4 <dir_read+0x12c>)
		res = dir_next(dj, 0);				/* Next entry */
    4be2:	4b45      	ldr	r3, [pc, #276]	; (4cf8 <dir_read+0x130>)
    4be4:	4698      	mov	r8, r3
	while (dj->sect) {
    4be6:	e05b      	b.n	4ca0 <dir_read+0xd8>
			if (a == AM_LFN) {			/* An LFN entry is found */
    4be8:	2a0f      	cmp	r2, #15
    4bea:	d147      	bne.n	4c7c <dir_read+0xb4>
				if (c & LLE) {			/* Is it start of LFN sequence? */
    4bec:	065a      	lsls	r2, r3, #25
    4bee:	d51a      	bpl.n	4c26 <dir_read+0x5e>
					sum = dir[LDIR_Chksum];
    4bf0:	7b42      	ldrb	r2, [r0, #13]
    4bf2:	4691      	mov	r9, r2
					c &= ~LLE; ord = c;
    4bf4:	2240      	movs	r2, #64	; 0x40
    4bf6:	4393      	bics	r3, r2
					dj->lfn_idx = dj->index;
    4bf8:	88ea      	ldrh	r2, [r5, #6]
    4bfa:	842a      	strh	r2, [r5, #32]
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    4bfc:	7b42      	ldrb	r2, [r0, #13]
    4bfe:	4694      	mov	ip, r2
    4c00:	26ff      	movs	r6, #255	; 0xff
    4c02:	454a      	cmp	r2, r9
    4c04:	d147      	bne.n	4c96 <dir_read+0xce>
    4c06:	69ea      	ldr	r2, [r5, #28]
    4c08:	4691      	mov	r9, r2
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
    4c0a:	7802      	ldrb	r2, [r0, #0]
    4c0c:	243f      	movs	r4, #63	; 0x3f
    4c0e:	4022      	ands	r2, r4
    4c10:	3a01      	subs	r2, #1
    4c12:	0054      	lsls	r4, r2, #1
    4c14:	18a4      	adds	r4, r4, r2
    4c16:	00a4      	lsls	r4, r4, #2
    4c18:	18a2      	adds	r2, r4, r2
    4c1a:	9201      	str	r2, [sp, #4]
	s = 0; wc = 1;
    4c1c:	3efe      	subs	r6, #254	; 0xfe
    4c1e:	2100      	movs	r1, #0
			if (uc != 0xFFFF) return 0;		/* Check filler */
    4c20:	4a36      	ldr	r2, [pc, #216]	; (4cfc <dir_read+0x134>)
    4c22:	4692      	mov	sl, r2
    4c24:	e008      	b.n	4c38 <dir_read+0x70>
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    4c26:	429e      	cmp	r6, r3
    4c28:	d0e8      	beq.n	4bfc <dir_read+0x34>
    4c2a:	26ff      	movs	r6, #255	; 0xff
    4c2c:	e033      	b.n	4c96 <dir_read+0xce>
			if (uc != 0xFFFF) return 0;		/* Check filler */
    4c2e:	4552      	cmp	r2, sl
    4c30:	d151      	bne.n	4cd6 <dir_read+0x10e>
	} while (++s < 13);						/* Read all character in the entry */
    4c32:	3101      	adds	r1, #1
    4c34:	290d      	cmp	r1, #13
    4c36:	d013      	beq.n	4c60 <dir_read+0x98>
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
    4c38:	4a31      	ldr	r2, [pc, #196]	; (4d00 <dir_read+0x138>)
    4c3a:	5c8a      	ldrb	r2, [r1, r2]
    4c3c:	1884      	adds	r4, r0, r2
    4c3e:	7864      	ldrb	r4, [r4, #1]
    4c40:	0224      	lsls	r4, r4, #8
    4c42:	5c82      	ldrb	r2, [r0, r2]
    4c44:	4322      	orrs	r2, r4
		if (wc) {	/* Last char has not been processed */
    4c46:	2e00      	cmp	r6, #0
    4c48:	d0f1      	beq.n	4c2e <dir_read+0x66>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
    4c4a:	9c01      	ldr	r4, [sp, #4]
    4c4c:	2cfe      	cmp	r4, #254	; 0xfe
    4c4e:	d842      	bhi.n	4cd6 <dir_read+0x10e>
			lfnbuf[i++] = wc = uc;			/* Store it */
    4c50:	0066      	lsls	r6, r4, #1
    4c52:	464c      	mov	r4, r9
    4c54:	5332      	strh	r2, [r6, r4]
    4c56:	0016      	movs	r6, r2
    4c58:	9c01      	ldr	r4, [sp, #4]
    4c5a:	3401      	adds	r4, #1
    4c5c:	9401      	str	r4, [sp, #4]
    4c5e:	e7e8      	b.n	4c32 <dir_read+0x6a>
	if (dir[LDIR_Ord] & LLE) {				/* Put terminator if it is the last LFN part */
    4c60:	7802      	ldrb	r2, [r0, #0]
    4c62:	0652      	lsls	r2, r2, #25
    4c64:	d506      	bpl.n	4c74 <dir_read+0xac>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
    4c66:	9a01      	ldr	r2, [sp, #4]
    4c68:	2afe      	cmp	r2, #254	; 0xfe
    4c6a:	d834      	bhi.n	4cd6 <dir_read+0x10e>
		lfnbuf[i] = 0;
    4c6c:	0054      	lsls	r4, r2, #1
    4c6e:	2200      	movs	r2, #0
    4c70:	4649      	mov	r1, r9
    4c72:	5262      	strh	r2, [r4, r1]
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    4c74:	3b01      	subs	r3, #1
    4c76:	b2de      	uxtb	r6, r3
    4c78:	46e1      	mov	r9, ip
    4c7a:	e00c      	b.n	4c96 <dir_read+0xce>
				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
    4c7c:	2e00      	cmp	r6, #0
    4c7e:	d103      	bne.n	4c88 <dir_read+0xc0>
    4c80:	4b20      	ldr	r3, [pc, #128]	; (4d04 <dir_read+0x13c>)
    4c82:	4798      	blx	r3
    4c84:	4581      	cmp	r9, r0
    4c86:	d02c      	beq.n	4ce2 <dir_read+0x11a>
					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
    4c88:	2301      	movs	r3, #1
    4c8a:	425b      	negs	r3, r3
    4c8c:	842b      	strh	r3, [r5, #32]
    4c8e:	e028      	b.n	4ce2 <dir_read+0x11a>
			ord = 0xFF;
    4c90:	26ff      	movs	r6, #255	; 0xff
    4c92:	e000      	b.n	4c96 <dir_read+0xce>
    4c94:	26ff      	movs	r6, #255	; 0xff
		res = dir_next(dj, 0);				/* Next entry */
    4c96:	2100      	movs	r1, #0
    4c98:	0028      	movs	r0, r5
    4c9a:	47c0      	blx	r8
    4c9c:	1e04      	subs	r4, r0, #0
		if (res != FR_OK) break;
    4c9e:	d11e      	bne.n	4cde <dir_read+0x116>
	while (dj->sect) {
    4ca0:	6929      	ldr	r1, [r5, #16]
    4ca2:	2900      	cmp	r1, #0
    4ca4:	d014      	beq.n	4cd0 <dir_read+0x108>
		res = move_window(dj->fs, dj->sect);
    4ca6:	6828      	ldr	r0, [r5, #0]
    4ca8:	47b8      	blx	r7
    4caa:	1e04      	subs	r4, r0, #0
		if (res != FR_OK) break;
    4cac:	d117      	bne.n	4cde <dir_read+0x116>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    4cae:	6968      	ldr	r0, [r5, #20]
		c = dir[DIR_Name];
    4cb0:	7803      	ldrb	r3, [r0, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    4cb2:	2b00      	cmp	r3, #0
    4cb4:	d012      	beq.n	4cdc <dir_read+0x114>
		if (c == DDE || (!_FS_RPATH && c == '.') || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
    4cb6:	2be5      	cmp	r3, #229	; 0xe5
    4cb8:	d0ea      	beq.n	4c90 <dir_read+0xc8>
    4cba:	2b2e      	cmp	r3, #46	; 0x2e
    4cbc:	d0ea      	beq.n	4c94 <dir_read+0xcc>
		a = dir[DIR_Attr] & AM_MASK;
    4cbe:	7ac1      	ldrb	r1, [r0, #11]
    4cc0:	223f      	movs	r2, #63	; 0x3f
    4cc2:	400a      	ands	r2, r1
		if (c == DDE || (!_FS_RPATH && c == '.') || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
    4cc4:	0709      	lsls	r1, r1, #28
    4cc6:	d58f      	bpl.n	4be8 <dir_read+0x20>
    4cc8:	2a0f      	cmp	r2, #15
    4cca:	d08f      	beq.n	4bec <dir_read+0x24>
			ord = 0xFF;
    4ccc:	26ff      	movs	r6, #255	; 0xff
    4cce:	e7e2      	b.n	4c96 <dir_read+0xce>
	if (res != FR_OK) dj->sect = 0;
    4cd0:	2c00      	cmp	r4, #0
    4cd2:	d006      	beq.n	4ce2 <dir_read+0x11a>
    4cd4:	e003      	b.n	4cde <dir_read+0x116>
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    4cd6:	46e1      	mov	r9, ip
    4cd8:	26ff      	movs	r6, #255	; 0xff
    4cda:	e7dc      	b.n	4c96 <dir_read+0xce>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    4cdc:	2404      	movs	r4, #4
	if (res != FR_OK) dj->sect = 0;
    4cde:	2300      	movs	r3, #0
    4ce0:	612b      	str	r3, [r5, #16]
}
    4ce2:	0020      	movs	r0, r4
    4ce4:	b003      	add	sp, #12
    4ce6:	bc3c      	pop	{r2, r3, r4, r5}
    4ce8:	4690      	mov	r8, r2
    4cea:	4699      	mov	r9, r3
    4cec:	46a2      	mov	sl, r4
    4cee:	46ab      	mov	fp, r5
    4cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4cf2:	46c0      	nop			; (mov r8, r8)
    4cf4:	00004171 	.word	0x00004171
    4cf8:	00004629 	.word	0x00004629
    4cfc:	0000ffff 	.word	0x0000ffff
    4d00:	00007390 	.word	0x00007390
    4d04:	00003b6b 	.word	0x00003b6b

00004d08 <dir_remove>:
{
    4d08:	b5f0      	push	{r4, r5, r6, r7, lr}
    4d0a:	46c6      	mov	lr, r8
    4d0c:	b500      	push	{lr}
    4d0e:	0004      	movs	r4, r0
	i = dj->index;	/* SFN index */
    4d10:	88c5      	ldrh	r5, [r0, #6]
	res = dir_sdi(dj, (WORD)((dj->lfn_idx == 0xFFFF) ? i : dj->lfn_idx));	/* Goto the SFN or top of the LFN entries */
    4d12:	8c01      	ldrh	r1, [r0, #32]
    4d14:	4b12      	ldr	r3, [pc, #72]	; (4d60 <dir_remove+0x58>)
    4d16:	4299      	cmp	r1, r3
    4d18:	d020      	beq.n	4d5c <dir_remove+0x54>
    4d1a:	0020      	movs	r0, r4
    4d1c:	4b11      	ldr	r3, [pc, #68]	; (4d64 <dir_remove+0x5c>)
    4d1e:	4798      	blx	r3
	if (res == FR_OK) {
    4d20:	2800      	cmp	r0, #0
    4d22:	d118      	bne.n	4d56 <dir_remove+0x4e>
			res = move_window(dj->fs, dj->sect);
    4d24:	4e10      	ldr	r6, [pc, #64]	; (4d68 <dir_remove+0x60>)
			*dj->dir = DDE;			/* Mark the entry "deleted" */
    4d26:	27e5      	movs	r7, #229	; 0xe5
			res = dir_next(dj, 0);		/* Next entry */
    4d28:	4b10      	ldr	r3, [pc, #64]	; (4d6c <dir_remove+0x64>)
    4d2a:	4698      	mov	r8, r3
			res = move_window(dj->fs, dj->sect);
    4d2c:	6921      	ldr	r1, [r4, #16]
    4d2e:	6820      	ldr	r0, [r4, #0]
    4d30:	47b0      	blx	r6
			if (res != FR_OK) break;
    4d32:	2800      	cmp	r0, #0
    4d34:	d10c      	bne.n	4d50 <dir_remove+0x48>
			*dj->dir = DDE;			/* Mark the entry "deleted" */
    4d36:	6963      	ldr	r3, [r4, #20]
    4d38:	701f      	strb	r7, [r3, #0]
			dj->fs->wflag = 1;
    4d3a:	2301      	movs	r3, #1
    4d3c:	6822      	ldr	r2, [r4, #0]
    4d3e:	7113      	strb	r3, [r2, #4]
			if (dj->index >= i) break;	/* When reached SFN, all entries of the object has been deleted. */
    4d40:	88e3      	ldrh	r3, [r4, #6]
    4d42:	42ab      	cmp	r3, r5
    4d44:	d207      	bcs.n	4d56 <dir_remove+0x4e>
			res = dir_next(dj, 0);		/* Next entry */
    4d46:	2100      	movs	r1, #0
    4d48:	0020      	movs	r0, r4
    4d4a:	47c0      	blx	r8
		} while (res == FR_OK);
    4d4c:	2800      	cmp	r0, #0
    4d4e:	d0ed      	beq.n	4d2c <dir_remove+0x24>
		if (res == FR_NO_FILE) res = FR_INT_ERR;
    4d50:	2804      	cmp	r0, #4
    4d52:	d100      	bne.n	4d56 <dir_remove+0x4e>
    4d54:	3802      	subs	r0, #2
}
    4d56:	bc04      	pop	{r2}
    4d58:	4690      	mov	r8, r2
    4d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	res = dir_sdi(dj, (WORD)((dj->lfn_idx == 0xFFFF) ? i : dj->lfn_idx));	/* Goto the SFN or top of the LFN entries */
    4d5c:	0029      	movs	r1, r5
    4d5e:	e7dc      	b.n	4d1a <dir_remove+0x12>
    4d60:	0000ffff 	.word	0x0000ffff
    4d64:	0000430d 	.word	0x0000430d
    4d68:	00004171 	.word	0x00004171
    4d6c:	00004629 	.word	0x00004629

00004d70 <sync>:
{
    4d70:	b570      	push	{r4, r5, r6, lr}
    4d72:	0004      	movs	r4, r0
	res = move_window(fs, 0);
    4d74:	2100      	movs	r1, #0
    4d76:	4b2c      	ldr	r3, [pc, #176]	; (4e28 <sync+0xb8>)
    4d78:	4798      	blx	r3
	if (res == FR_OK) {
    4d7a:	2800      	cmp	r0, #0
    4d7c:	d10a      	bne.n	4d94 <sync+0x24>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    4d7e:	7823      	ldrb	r3, [r4, #0]
    4d80:	2b03      	cmp	r3, #3
    4d82:	d008      	beq.n	4d96 <sync+0x26>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
    4d84:	7860      	ldrb	r0, [r4, #1]
    4d86:	2200      	movs	r2, #0
    4d88:	2100      	movs	r1, #0
    4d8a:	4b28      	ldr	r3, [pc, #160]	; (4e2c <sync+0xbc>)
    4d8c:	4798      	blx	r3
    4d8e:	1e43      	subs	r3, r0, #1
    4d90:	4198      	sbcs	r0, r3
	res = move_window(fs, 0);
    4d92:	b2c0      	uxtb	r0, r0
}
    4d94:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    4d96:	7963      	ldrb	r3, [r4, #5]
    4d98:	2b00      	cmp	r3, #0
    4d9a:	d0f3      	beq.n	4d84 <sync+0x14>
			fs->winsect = 0;
    4d9c:	2600      	movs	r6, #0
    4d9e:	62e6      	str	r6, [r4, #44]	; 0x2c
			mem_set(fs->win, 0, 512);
    4da0:	0025      	movs	r5, r4
    4da2:	3530      	adds	r5, #48	; 0x30
    4da4:	2280      	movs	r2, #128	; 0x80
    4da6:	0092      	lsls	r2, r2, #2
    4da8:	2100      	movs	r1, #0
    4daa:	0028      	movs	r0, r5
    4dac:	4b20      	ldr	r3, [pc, #128]	; (4e30 <sync+0xc0>)
    4dae:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    4db0:	2255      	movs	r2, #85	; 0x55
    4db2:	4b20      	ldr	r3, [pc, #128]	; (4e34 <sync+0xc4>)
    4db4:	54e2      	strb	r2, [r4, r3]
    4db6:	3255      	adds	r2, #85	; 0x55
    4db8:	4b1f      	ldr	r3, [pc, #124]	; (4e38 <sync+0xc8>)
    4dba:	54e2      	strb	r2, [r4, r3]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    4dbc:	3bde      	subs	r3, #222	; 0xde
    4dbe:	3bff      	subs	r3, #255	; 0xff
    4dc0:	3a7a      	subs	r2, #122	; 0x7a
    4dc2:	54a3      	strb	r3, [r4, r2]
    4dc4:	3201      	adds	r2, #1
    4dc6:	54a3      	strb	r3, [r4, r2]
    4dc8:	330f      	adds	r3, #15
    4dca:	3201      	adds	r2, #1
    4dcc:	54a3      	strb	r3, [r4, r2]
    4dce:	320f      	adds	r2, #15
    4dd0:	2133      	movs	r1, #51	; 0x33
    4dd2:	5462      	strb	r2, [r4, r1]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    4dd4:	313f      	adds	r1, #63	; 0x3f
    4dd6:	2085      	movs	r0, #133	; 0x85
    4dd8:	0080      	lsls	r0, r0, #2
    4dda:	5421      	strb	r1, [r4, r0]
    4ddc:	4817      	ldr	r0, [pc, #92]	; (4e3c <sync+0xcc>)
    4dde:	5421      	strb	r1, [r4, r0]
    4de0:	4917      	ldr	r1, [pc, #92]	; (4e40 <sync+0xd0>)
    4de2:	5462      	strb	r2, [r4, r1]
    4de4:	4a17      	ldr	r2, [pc, #92]	; (4e44 <sync+0xd4>)
    4de6:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    4de8:	6923      	ldr	r3, [r4, #16]
    4dea:	3201      	adds	r2, #1
    4dec:	54a3      	strb	r3, [r4, r2]
    4dee:	0a19      	lsrs	r1, r3, #8
    4df0:	4a15      	ldr	r2, [pc, #84]	; (4e48 <sync+0xd8>)
    4df2:	54a1      	strb	r1, [r4, r2]
    4df4:	0c19      	lsrs	r1, r3, #16
    4df6:	4a15      	ldr	r2, [pc, #84]	; (4e4c <sync+0xdc>)
    4df8:	54a1      	strb	r1, [r4, r2]
    4dfa:	0e1b      	lsrs	r3, r3, #24
    4dfc:	4a14      	ldr	r2, [pc, #80]	; (4e50 <sync+0xe0>)
    4dfe:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    4e00:	68e3      	ldr	r3, [r4, #12]
    4e02:	3201      	adds	r2, #1
    4e04:	54a3      	strb	r3, [r4, r2]
    4e06:	0a19      	lsrs	r1, r3, #8
    4e08:	4a12      	ldr	r2, [pc, #72]	; (4e54 <sync+0xe4>)
    4e0a:	54a1      	strb	r1, [r4, r2]
    4e0c:	0c19      	lsrs	r1, r3, #16
    4e0e:	4a12      	ldr	r2, [pc, #72]	; (4e58 <sync+0xe8>)
    4e10:	54a1      	strb	r1, [r4, r2]
    4e12:	0e1b      	lsrs	r3, r3, #24
    4e14:	4a11      	ldr	r2, [pc, #68]	; (4e5c <sync+0xec>)
    4e16:	54a3      	strb	r3, [r4, r2]
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
    4e18:	7860      	ldrb	r0, [r4, #1]
    4e1a:	2301      	movs	r3, #1
    4e1c:	6962      	ldr	r2, [r4, #20]
    4e1e:	0029      	movs	r1, r5
    4e20:	4d0f      	ldr	r5, [pc, #60]	; (4e60 <sync+0xf0>)
    4e22:	47a8      	blx	r5
			fs->fsi_flag = 0;
    4e24:	7166      	strb	r6, [r4, #5]
    4e26:	e7ad      	b.n	4d84 <sync+0x14>
    4e28:	00004171 	.word	0x00004171
    4e2c:	00003a71 	.word	0x00003a71
    4e30:	00003b41 	.word	0x00003b41
    4e34:	0000022e 	.word	0x0000022e
    4e38:	0000022f 	.word	0x0000022f
    4e3c:	00000215 	.word	0x00000215
    4e40:	00000216 	.word	0x00000216
    4e44:	00000217 	.word	0x00000217
    4e48:	00000219 	.word	0x00000219
    4e4c:	0000021a 	.word	0x0000021a
    4e50:	0000021b 	.word	0x0000021b
    4e54:	0000021d 	.word	0x0000021d
    4e58:	0000021e 	.word	0x0000021e
    4e5c:	0000021f 	.word	0x0000021f
    4e60:	000039ed 	.word	0x000039ed

00004e64 <follow_path>:
{
    4e64:	b5f0      	push	{r4, r5, r6, r7, lr}
    4e66:	46de      	mov	lr, fp
    4e68:	4657      	mov	r7, sl
    4e6a:	464e      	mov	r6, r9
    4e6c:	4645      	mov	r5, r8
    4e6e:	b5e0      	push	{r5, r6, r7, lr}
    4e70:	b083      	sub	sp, #12
    4e72:	4682      	mov	sl, r0
    4e74:	000d      	movs	r5, r1
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
    4e76:	780b      	ldrb	r3, [r1, #0]
    4e78:	2b2f      	cmp	r3, #47	; 0x2f
    4e7a:	d00f      	beq.n	4e9c <follow_path+0x38>
    4e7c:	2b5c      	cmp	r3, #92	; 0x5c
    4e7e:	d00d      	beq.n	4e9c <follow_path+0x38>
	dj->sclust = 0;						/* Start from the root dir */
    4e80:	2300      	movs	r3, #0
    4e82:	4652      	mov	r2, sl
    4e84:	6093      	str	r3, [r2, #8]
	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
    4e86:	782b      	ldrb	r3, [r5, #0]
    4e88:	4657      	mov	r7, sl
    4e8a:	2b1f      	cmp	r3, #31
    4e8c:	d809      	bhi.n	4ea2 <follow_path+0x3e>
		res = dir_sdi(dj, 0);
    4e8e:	2100      	movs	r1, #0
    4e90:	4650      	mov	r0, sl
    4e92:	4bb2      	ldr	r3, [pc, #712]	; (515c <follow_path+0x2f8>)
    4e94:	4798      	blx	r3
		dj->dir = 0;
    4e96:	2300      	movs	r3, #0
    4e98:	617b      	str	r3, [r7, #20]
    4e9a:	e13a      	b.n	5112 <follow_path+0x2ae>
		path++;
    4e9c:	3501      	adds	r5, #1
    4e9e:	e7ef      	b.n	4e80 <follow_path+0x1c>
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
    4ea0:	3501      	adds	r5, #1
    4ea2:	7828      	ldrb	r0, [r5, #0]
    4ea4:	282f      	cmp	r0, #47	; 0x2f
    4ea6:	d0fb      	beq.n	4ea0 <follow_path+0x3c>
    4ea8:	285c      	cmp	r0, #92	; 0x5c
    4eaa:	d0f9      	beq.n	4ea0 <follow_path+0x3c>
	lfn = dj->lfn;
    4eac:	69fb      	ldr	r3, [r7, #28]
    4eae:	469a      	mov	sl, r3
		w = p[si++];					/* Get a character */
    4eb0:	b280      	uxth	r0, r0
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
    4eb2:	281f      	cmp	r0, #31
    4eb4:	d800      	bhi.n	4eb8 <follow_path+0x54>
    4eb6:	e13b      	b.n	5130 <follow_path+0x2cc>
    4eb8:	282f      	cmp	r0, #47	; 0x2f
    4eba:	d100      	bne.n	4ebe <follow_path+0x5a>
    4ebc:	e13b      	b.n	5136 <follow_path+0x2d2>
    4ebe:	285c      	cmp	r0, #92	; 0x5c
    4ec0:	d100      	bne.n	4ec4 <follow_path+0x60>
    4ec2:	e13b      	b.n	513c <follow_path+0x2d8>
    4ec4:	1c6e      	adds	r6, r5, #1
    4ec6:	2401      	movs	r4, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
    4ec8:	2380      	movs	r3, #128	; 0x80
    4eca:	005b      	lsls	r3, r3, #1
    4ecc:	4698      	mov	r8, r3
    4ece:	46bb      	mov	fp, r7
    4ed0:	002b      	movs	r3, r5
    4ed2:	0025      	movs	r5, r4
    4ed4:	0034      	movs	r4, r6
    4ed6:	4656      	mov	r6, sl
    4ed8:	4699      	mov	r9, r3
    4eda:	e011      	b.n	4f00 <follow_path+0x9c>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
    4edc:	2b00      	cmp	r3, #0
    4ede:	d135      	bne.n	4f4c <follow_path+0xe8>
		lfn[di++] = w;					/* Store the Unicode char */
    4ee0:	8030      	strh	r0, [r6, #0]
		w = p[si++];					/* Get a character */
    4ee2:	1c6b      	adds	r3, r5, #1
    4ee4:	7820      	ldrb	r0, [r4, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
    4ee6:	281f      	cmp	r0, #31
    4ee8:	d91e      	bls.n	4f28 <follow_path+0xc4>
    4eea:	282f      	cmp	r0, #47	; 0x2f
    4eec:	d100      	bne.n	4ef0 <follow_path+0x8c>
    4eee:	e128      	b.n	5142 <follow_path+0x2de>
    4ef0:	285c      	cmp	r0, #92	; 0x5c
    4ef2:	d100      	bne.n	4ef6 <follow_path+0x92>
    4ef4:	e142      	b.n	517c <follow_path+0x318>
    4ef6:	3602      	adds	r6, #2
    4ef8:	3401      	adds	r4, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
    4efa:	4543      	cmp	r3, r8
    4efc:	d026      	beq.n	4f4c <follow_path+0xe8>
		w = p[si++];					/* Get a character */
    4efe:	001d      	movs	r5, r3
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
    4f00:	2101      	movs	r1, #1
    4f02:	4b97      	ldr	r3, [pc, #604]	; (5160 <follow_path+0x2fc>)
    4f04:	4798      	blx	r3
    4f06:	1e01      	subs	r1, r0, #0
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
    4f08:	d020      	beq.n	4f4c <follow_path+0xe8>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
    4f0a:	287f      	cmp	r0, #127	; 0x7f
    4f0c:	d8e8      	bhi.n	4ee0 <follow_path+0x7c>
	while (*str && *str != chr) str++;
    4f0e:	2822      	cmp	r0, #34	; 0x22
    4f10:	d100      	bne.n	4f14 <follow_path+0xb0>
    4f12:	e0fd      	b.n	5110 <follow_path+0x2ac>
    4f14:	232a      	movs	r3, #42	; 0x2a
    4f16:	4a93      	ldr	r2, [pc, #588]	; (5164 <follow_path+0x300>)
    4f18:	b29f      	uxth	r7, r3
    4f1a:	428f      	cmp	r7, r1
    4f1c:	d0de      	beq.n	4edc <follow_path+0x78>
    4f1e:	3201      	adds	r2, #1
    4f20:	7813      	ldrb	r3, [r2, #0]
    4f22:	2b00      	cmp	r3, #0
    4f24:	d1f8      	bne.n	4f18 <follow_path+0xb4>
    4f26:	e7db      	b.n	4ee0 <follow_path+0x7c>
    4f28:	002c      	movs	r4, r5
    4f2a:	465f      	mov	r7, fp
    4f2c:	464d      	mov	r5, r9
	*path = &p[si];						/* Return pointer to the next segment */
    4f2e:	18ed      	adds	r5, r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    4f30:	2604      	movs	r6, #4
    4f32:	e10b      	b.n	514c <follow_path+0x2e8>
		di--;
    4f34:	3c01      	subs	r4, #1
    4f36:	3b02      	subs	r3, #2
	while (di) {						/* Strip trailing spaces and dots */
    4f38:	2c00      	cmp	r4, #0
    4f3a:	d100      	bne.n	4f3e <follow_path+0xda>
    4f3c:	e0e8      	b.n	5110 <follow_path+0x2ac>
		w = lfn[di-1];
    4f3e:	881a      	ldrh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
    4f40:	2a20      	cmp	r2, #32
    4f42:	d0f7      	beq.n	4f34 <follow_path+0xd0>
    4f44:	2a2e      	cmp	r2, #46	; 0x2e
    4f46:	d0f5      	beq.n	4f34 <follow_path+0xd0>
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
    4f48:	2c00      	cmp	r4, #0
    4f4a:	d101      	bne.n	4f50 <follow_path+0xec>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    4f4c:	2006      	movs	r0, #6
	return res;
    4f4e:	e0e0      	b.n	5112 <follow_path+0x2ae>
	lfn[di] = 0;						/* LFN is created */
    4f50:	0063      	lsls	r3, r4, #1
    4f52:	4698      	mov	r8, r3
    4f54:	2300      	movs	r3, #0
    4f56:	4652      	mov	r2, sl
    4f58:	4641      	mov	r1, r8
    4f5a:	5253      	strh	r3, [r2, r1]
	mem_set(dj->fn, ' ', 11);
    4f5c:	220b      	movs	r2, #11
    4f5e:	2120      	movs	r1, #32
    4f60:	69b8      	ldr	r0, [r7, #24]
    4f62:	4b81      	ldr	r3, [pc, #516]	; (5168 <follow_path+0x304>)
    4f64:	4798      	blx	r3
    4f66:	4652      	mov	r2, sl
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
    4f68:	2300      	movs	r3, #0
    4f6a:	e001      	b.n	4f70 <follow_path+0x10c>
    4f6c:	3301      	adds	r3, #1
    4f6e:	3202      	adds	r2, #2
    4f70:	8811      	ldrh	r1, [r2, #0]
    4f72:	2920      	cmp	r1, #32
    4f74:	d0fa      	beq.n	4f6c <follow_path+0x108>
    4f76:	292e      	cmp	r1, #46	; 0x2e
    4f78:	d0f8      	beq.n	4f6c <follow_path+0x108>
	if (si) cf |= NS_LOSS | NS_LFN;
    4f7a:	2b00      	cmp	r3, #0
    4f7c:	d001      	beq.n	4f82 <follow_path+0x11e>
    4f7e:	2203      	movs	r2, #3
    4f80:	4316      	orrs	r6, r2
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
    4f82:	4652      	mov	r2, sl
    4f84:	4442      	add	r2, r8
    4f86:	3a02      	subs	r2, #2
    4f88:	8812      	ldrh	r2, [r2, #0]
    4f8a:	2a2e      	cmp	r2, #46	; 0x2e
    4f8c:	d009      	beq.n	4fa2 <follow_path+0x13e>
    4f8e:	4642      	mov	r2, r8
    4f90:	3a04      	subs	r2, #4
    4f92:	4452      	add	r2, sl
    4f94:	3c01      	subs	r4, #1
    4f96:	2c00      	cmp	r4, #0
    4f98:	d003      	beq.n	4fa2 <follow_path+0x13e>
    4f9a:	3a02      	subs	r2, #2
    4f9c:	8851      	ldrh	r1, [r2, #2]
    4f9e:	292e      	cmp	r1, #46	; 0x2e
    4fa0:	d1f8      	bne.n	4f94 <follow_path+0x130>
		dj->fn[i++] = (BYTE)w;
    4fa2:	2208      	movs	r2, #8
    4fa4:	9201      	str	r2, [sp, #4]
    4fa6:	2200      	movs	r2, #0
    4fa8:	4693      	mov	fp, r2
    4faa:	4691      	mov	r9, r2
    4fac:	46a0      	mov	r8, r4
    4fae:	e006      	b.n	4fbe <follow_path+0x15a>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
    4fb0:	4544      	cmp	r4, r8
    4fb2:	d100      	bne.n	4fb6 <follow_path+0x152>
    4fb4:	e0e6      	b.n	5184 <follow_path+0x320>
			cf |= NS_LOSS | NS_LFN; continue;
    4fb6:	2303      	movs	r3, #3
    4fb8:	431e      	orrs	r6, r3
    4fba:	b2f6      	uxtb	r6, r6
		w = lfn[si++];					/* Get an LFN char */
    4fbc:	0023      	movs	r3, r4
    4fbe:	1c5c      	adds	r4, r3, #1
    4fc0:	005b      	lsls	r3, r3, #1
    4fc2:	4652      	mov	r2, sl
    4fc4:	5a98      	ldrh	r0, [r3, r2]
		if (!w) break;					/* Break on end of the LFN */
    4fc6:	2800      	cmp	r0, #0
    4fc8:	d02c      	beq.n	5024 <follow_path+0x1c0>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
    4fca:	2820      	cmp	r0, #32
    4fcc:	d0f3      	beq.n	4fb6 <follow_path+0x152>
    4fce:	282e      	cmp	r0, #46	; 0x2e
    4fd0:	d0ee      	beq.n	4fb0 <follow_path+0x14c>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
    4fd2:	9b01      	ldr	r3, [sp, #4]
    4fd4:	459b      	cmp	fp, r3
    4fd6:	d219      	bcs.n	500c <follow_path+0x1a8>
    4fd8:	4544      	cmp	r4, r8
    4fda:	d100      	bne.n	4fde <follow_path+0x17a>
    4fdc:	e0d2      	b.n	5184 <follow_path+0x320>
		if (w >= 0x80) {				/* Non ASCII char */
    4fde:	287f      	cmp	r0, #127	; 0x7f
    4fe0:	d85e      	bhi.n	50a0 <follow_path+0x23c>
	while (*str && *str != chr) str++;
    4fe2:	282b      	cmp	r0, #43	; 0x2b
    4fe4:	d06e      	beq.n	50c4 <follow_path+0x260>
    4fe6:	232c      	movs	r3, #44	; 0x2c
    4fe8:	4a60      	ldr	r2, [pc, #384]	; (516c <follow_path+0x308>)
    4fea:	b299      	uxth	r1, r3
    4fec:	4281      	cmp	r1, r0
    4fee:	d067      	beq.n	50c0 <follow_path+0x25c>
    4ff0:	3201      	adds	r2, #1
    4ff2:	7813      	ldrb	r3, [r2, #0]
    4ff4:	2b00      	cmp	r3, #0
    4ff6:	d1f8      	bne.n	4fea <follow_path+0x186>
				if (IsUpper(w)) {		/* ASCII large capital */
    4ff8:	0003      	movs	r3, r0
    4ffa:	3b41      	subs	r3, #65	; 0x41
    4ffc:	b29b      	uxth	r3, r3
    4ffe:	2b19      	cmp	r3, #25
    5000:	d86c      	bhi.n	50dc <follow_path+0x278>
					b |= 2;
    5002:	2302      	movs	r3, #2
    5004:	464a      	mov	r2, r9
    5006:	431a      	orrs	r2, r3
    5008:	4691      	mov	r9, r2
    500a:	e05f      	b.n	50cc <follow_path+0x268>
			if (ni == 11) {				/* Long extension */
    500c:	9b01      	ldr	r3, [sp, #4]
    500e:	2b0b      	cmp	r3, #11
    5010:	d03b      	beq.n	508a <follow_path+0x226>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
    5012:	4544      	cmp	r4, r8
    5014:	d100      	bne.n	5018 <follow_path+0x1b4>
    5016:	e0b9      	b.n	518c <follow_path+0x328>
    5018:	2303      	movs	r3, #3
    501a:	431e      	orrs	r6, r3
    501c:	b2f6      	uxtb	r6, r6
			if (si > di) break;			/* No extension */
    501e:	4544      	cmp	r4, r8
    5020:	d800      	bhi.n	5024 <follow_path+0x1c0>
    5022:	e0b3      	b.n	518c <follow_path+0x328>
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
    5024:	69bb      	ldr	r3, [r7, #24]
    5026:	781a      	ldrb	r2, [r3, #0]
    5028:	2ae5      	cmp	r2, #229	; 0xe5
    502a:	d036      	beq.n	509a <follow_path+0x236>
	if (ni == 8) b <<= 2;
    502c:	9b01      	ldr	r3, [sp, #4]
    502e:	2b08      	cmp	r3, #8
    5030:	d060      	beq.n	50f4 <follow_path+0x290>
    5032:	230c      	movs	r3, #12
    5034:	464a      	mov	r2, r9
    5036:	4013      	ands	r3, r2
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
    5038:	2b0c      	cmp	r3, #12
    503a:	d060      	beq.n	50fe <follow_path+0x29a>
    503c:	43d2      	mvns	r2, r2
    503e:	0792      	lsls	r2, r2, #30
    5040:	d05d      	beq.n	50fe <follow_path+0x29a>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
    5042:	07b2      	lsls	r2, r6, #30
    5044:	d406      	bmi.n	5054 <follow_path+0x1f0>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
    5046:	2203      	movs	r2, #3
    5048:	4649      	mov	r1, r9
    504a:	400a      	ands	r2, r1
    504c:	2a01      	cmp	r2, #1
    504e:	d059      	beq.n	5104 <follow_path+0x2a0>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
    5050:	2b04      	cmp	r3, #4
    5052:	d05a      	beq.n	510a <follow_path+0x2a6>
	dj->fn[NS] = cf;	/* SFN is created */
    5054:	69bb      	ldr	r3, [r7, #24]
    5056:	72de      	strb	r6, [r3, #11]
			res = dir_find(dj);				/* Find it */
    5058:	0038      	movs	r0, r7
    505a:	4b45      	ldr	r3, [pc, #276]	; (5170 <follow_path+0x30c>)
    505c:	4798      	blx	r3
			ns = *(dj->fn+NS);
    505e:	69bb      	ldr	r3, [r7, #24]
    5060:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
    5062:	2800      	cmp	r0, #0
    5064:	d15c      	bne.n	5120 <follow_path+0x2bc>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    5066:	075b      	lsls	r3, r3, #29
    5068:	d453      	bmi.n	5112 <follow_path+0x2ae>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
    506a:	697a      	ldr	r2, [r7, #20]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
    506c:	7ad3      	ldrb	r3, [r2, #11]
    506e:	06db      	lsls	r3, r3, #27
    5070:	d55c      	bpl.n	512c <follow_path+0x2c8>
			dj->sclust = LD_CLUST(dir);
    5072:	7d51      	ldrb	r1, [r2, #21]
    5074:	0209      	lsls	r1, r1, #8
    5076:	7d13      	ldrb	r3, [r2, #20]
    5078:	430b      	orrs	r3, r1
    507a:	041b      	lsls	r3, r3, #16
    507c:	7ed1      	ldrb	r1, [r2, #27]
    507e:	0209      	lsls	r1, r1, #8
    5080:	7e92      	ldrb	r2, [r2, #26]
    5082:	430a      	orrs	r2, r1
    5084:	4313      	orrs	r3, r2
    5086:	60bb      	str	r3, [r7, #8]
			res = create_name(dj, &path);	/* Get a segment */
    5088:	e70b      	b.n	4ea2 <follow_path+0x3e>
				cf |= NS_LOSS | NS_LFN; break;
    508a:	2303      	movs	r3, #3
    508c:	431e      	orrs	r6, r3
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
    508e:	69bb      	ldr	r3, [r7, #24]
    5090:	781a      	ldrb	r2, [r3, #0]
    5092:	2ae5      	cmp	r2, #229	; 0xe5
    5094:	d1cd      	bne.n	5032 <follow_path+0x1ce>
    5096:	220b      	movs	r2, #11
    5098:	9201      	str	r2, [sp, #4]
    509a:	2205      	movs	r2, #5
    509c:	701a      	strb	r2, [r3, #0]
    509e:	e7c5      	b.n	502c <follow_path+0x1c8>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
    50a0:	2100      	movs	r1, #0
    50a2:	4b2f      	ldr	r3, [pc, #188]	; (5160 <follow_path+0x2fc>)
    50a4:	4798      	blx	r3
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
    50a6:	2800      	cmp	r0, #0
    50a8:	d100      	bne.n	50ac <follow_path+0x248>
    50aa:	e079      	b.n	51a0 <follow_path+0x33c>
    50ac:	4b31      	ldr	r3, [pc, #196]	; (5174 <follow_path+0x310>)
    50ae:	469c      	mov	ip, r3
    50b0:	4460      	add	r0, ip
    50b2:	3880      	subs	r0, #128	; 0x80
    50b4:	7800      	ldrb	r0, [r0, #0]
			cf |= NS_LFN;				/* Force create LFN entry */
    50b6:	2302      	movs	r3, #2
    50b8:	431e      	orrs	r6, r3
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
    50ba:	2800      	cmp	r0, #0
    50bc:	d002      	beq.n	50c4 <follow_path+0x260>
    50be:	e790      	b.n	4fe2 <follow_path+0x17e>
    50c0:	2b00      	cmp	r3, #0
    50c2:	d099      	beq.n	4ff8 <follow_path+0x194>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
    50c4:	2303      	movs	r3, #3
    50c6:	431e      	orrs	r6, r3
    50c8:	b2f6      	uxtb	r6, r6
    50ca:	205f      	movs	r0, #95	; 0x5f
		dj->fn[i++] = (BYTE)w;
    50cc:	69bb      	ldr	r3, [r7, #24]
    50ce:	465a      	mov	r2, fp
    50d0:	5498      	strb	r0, [r3, r2]
		w = lfn[si++];					/* Get an LFN char */
    50d2:	0023      	movs	r3, r4
		dj->fn[i++] = (BYTE)w;
    50d4:	2201      	movs	r2, #1
    50d6:	4694      	mov	ip, r2
    50d8:	44e3      	add	fp, ip
    50da:	e770      	b.n	4fbe <follow_path+0x15a>
					if (IsLower(w)) {	/* ASCII small capital */
    50dc:	0003      	movs	r3, r0
    50de:	3b61      	subs	r3, #97	; 0x61
    50e0:	b29b      	uxth	r3, r3
    50e2:	2b19      	cmp	r3, #25
    50e4:	d8f2      	bhi.n	50cc <follow_path+0x268>
						b |= 1; w -= 0x20;
    50e6:	2301      	movs	r3, #1
    50e8:	464a      	mov	r2, r9
    50ea:	431a      	orrs	r2, r3
    50ec:	4691      	mov	r9, r2
    50ee:	3820      	subs	r0, #32
    50f0:	b280      	uxth	r0, r0
    50f2:	e7eb      	b.n	50cc <follow_path+0x268>
	if (ni == 8) b <<= 2;
    50f4:	464b      	mov	r3, r9
    50f6:	009b      	lsls	r3, r3, #2
    50f8:	b2db      	uxtb	r3, r3
    50fa:	4699      	mov	r9, r3
    50fc:	e799      	b.n	5032 <follow_path+0x1ce>
		cf |= NS_LFN;
    50fe:	2202      	movs	r2, #2
    5100:	4316      	orrs	r6, r2
    5102:	e79e      	b.n	5042 <follow_path+0x1de>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
    5104:	320f      	adds	r2, #15
    5106:	4316      	orrs	r6, r2
    5108:	e7a2      	b.n	5050 <follow_path+0x1ec>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
    510a:	3304      	adds	r3, #4
    510c:	431e      	orrs	r6, r3
    510e:	e7a1      	b.n	5054 <follow_path+0x1f0>
    5110:	2006      	movs	r0, #6
}
    5112:	b003      	add	sp, #12
    5114:	bc3c      	pop	{r2, r3, r4, r5}
    5116:	4690      	mov	r8, r2
    5118:	4699      	mov	r9, r3
    511a:	46a2      	mov	sl, r4
    511c:	46ab      	mov	fp, r5
    511e:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
    5120:	2804      	cmp	r0, #4
    5122:	d1f6      	bne.n	5112 <follow_path+0x2ae>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    5124:	075b      	lsls	r3, r3, #29
    5126:	d4f4      	bmi.n	5112 <follow_path+0x2ae>
    5128:	3001      	adds	r0, #1
    512a:	e7f2      	b.n	5112 <follow_path+0x2ae>
				res = FR_NO_PATH; break;
    512c:	2005      	movs	r0, #5
    512e:	e7f0      	b.n	5112 <follow_path+0x2ae>
		w = p[si++];					/* Get a character */
    5130:	2301      	movs	r3, #1
	si = di = 0;
    5132:	2400      	movs	r4, #0
    5134:	e6fb      	b.n	4f2e <follow_path+0xca>
		w = p[si++];					/* Get a character */
    5136:	2301      	movs	r3, #1
	si = di = 0;
    5138:	2400      	movs	r4, #0
    513a:	e005      	b.n	5148 <follow_path+0x2e4>
		w = p[si++];					/* Get a character */
    513c:	2301      	movs	r3, #1
	si = di = 0;
    513e:	2400      	movs	r4, #0
    5140:	e002      	b.n	5148 <follow_path+0x2e4>
    5142:	002c      	movs	r4, r5
    5144:	465f      	mov	r7, fp
    5146:	464d      	mov	r5, r9
	*path = &p[si];						/* Return pointer to the next segment */
    5148:	18ed      	adds	r5, r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    514a:	2600      	movs	r6, #0
	while (di) {						/* Strip trailing spaces and dots */
    514c:	2c00      	cmp	r4, #0
    514e:	d0df      	beq.n	5110 <follow_path+0x2ac>
    5150:	4b09      	ldr	r3, [pc, #36]	; (5178 <follow_path+0x314>)
    5152:	18e3      	adds	r3, r4, r3
    5154:	005b      	lsls	r3, r3, #1
    5156:	4453      	add	r3, sl
    5158:	e6f1      	b.n	4f3e <follow_path+0xda>
    515a:	46c0      	nop			; (mov r8, r8)
    515c:	0000430d 	.word	0x0000430d
    5160:	0000597d 	.word	0x0000597d
    5164:	00007421 	.word	0x00007421
    5168:	00003b41 	.word	0x00003b41
    516c:	0000742d 	.word	0x0000742d
    5170:	0000474d 	.word	0x0000474d
    5174:	000073a0 	.word	0x000073a0
    5178:	7fffffff 	.word	0x7fffffff
    517c:	002c      	movs	r4, r5
    517e:	465f      	mov	r7, fp
    5180:	464d      	mov	r5, r9
    5182:	e7e1      	b.n	5148 <follow_path+0x2e4>
			if (ni == 11) {				/* Long extension */
    5184:	9b01      	ldr	r3, [sp, #4]
    5186:	2b0b      	cmp	r3, #11
    5188:	d100      	bne.n	518c <follow_path+0x328>
    518a:	e77e      	b.n	508a <follow_path+0x226>
			b <<= 2; continue;
    518c:	464b      	mov	r3, r9
    518e:	009b      	lsls	r3, r3, #2
    5190:	b2db      	uxtb	r3, r3
    5192:	4699      	mov	r9, r3
    5194:	4643      	mov	r3, r8
			si = di; i = 8; ni = 11;	/* Enter extension section */
    5196:	220b      	movs	r2, #11
    5198:	9201      	str	r2, [sp, #4]
    519a:	3a03      	subs	r2, #3
    519c:	4693      	mov	fp, r2
    519e:	e70e      	b.n	4fbe <follow_path+0x15a>
			cf |= NS_LFN;				/* Force create LFN entry */
    51a0:	2302      	movs	r3, #2
    51a2:	431e      	orrs	r6, r3
    51a4:	e78e      	b.n	50c4 <follow_path+0x260>
    51a6:	46c0      	nop			; (mov r8, r8)

000051a8 <f_mount>:
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
		return FR_INVALID_DRIVE;
    51a8:	230b      	movs	r3, #11
	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
    51aa:	2807      	cmp	r0, #7
    51ac:	d901      	bls.n	51b2 <f_mount+0xa>
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */

	return FR_OK;
}
    51ae:	0018      	movs	r0, r3
    51b0:	4770      	bx	lr
	rfs = FatFs[vol];			/* Get current fs object */
    51b2:	0083      	lsls	r3, r0, #2
    51b4:	4a07      	ldr	r2, [pc, #28]	; (51d4 <f_mount+0x2c>)
    51b6:	589b      	ldr	r3, [r3, r2]
	if (rfs) {
    51b8:	2b00      	cmp	r3, #0
    51ba:	d001      	beq.n	51c0 <f_mount+0x18>
		rfs->fs_type = 0;		/* Clear old fs object */
    51bc:	2200      	movs	r2, #0
    51be:	701a      	strb	r2, [r3, #0]
	if (fs) {
    51c0:	2900      	cmp	r1, #0
    51c2:	d001      	beq.n	51c8 <f_mount+0x20>
		fs->fs_type = 0;		/* Clear new fs object */
    51c4:	2300      	movs	r3, #0
    51c6:	700b      	strb	r3, [r1, #0]
	FatFs[vol] = fs;			/* Register new fs object */
    51c8:	0080      	lsls	r0, r0, #2
    51ca:	4b02      	ldr	r3, [pc, #8]	; (51d4 <f_mount+0x2c>)
    51cc:	50c1      	str	r1, [r0, r3]
	return FR_OK;
    51ce:	2300      	movs	r3, #0
    51d0:	e7ed      	b.n	51ae <f_mount+0x6>
    51d2:	46c0      	nop			; (mov r8, r8)
    51d4:	20000198 	.word	0x20000198

000051d8 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    51d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    51da:	46c6      	mov	lr, r8
    51dc:	b500      	push	{lr}
    51de:	4c59      	ldr	r4, [pc, #356]	; (5344 <f_open+0x16c>)
    51e0:	44a5      	add	sp, r4
    51e2:	0005      	movs	r5, r0
    51e4:	9101      	str	r1, [sp, #4]
    51e6:	0017      	movs	r7, r2
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
    51e8:	2300      	movs	r3, #0
    51ea:	6003      	str	r3, [r0, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    51ec:	261f      	movs	r6, #31
    51ee:	4016      	ands	r6, r2
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
    51f0:	221e      	movs	r2, #30
    51f2:	403a      	ands	r2, r7
    51f4:	a985      	add	r1, sp, #532	; 0x214
    51f6:	a801      	add	r0, sp, #4
    51f8:	4b53      	ldr	r3, [pc, #332]	; (5348 <f_open+0x170>)
    51fa:	4798      	blx	r3
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
    51fc:	ab82      	add	r3, sp, #520	; 0x208
    51fe:	938b      	str	r3, [sp, #556]	; 0x22c
    5200:	ab02      	add	r3, sp, #8
    5202:	938c      	str	r3, [sp, #560]	; 0x230
	if (res == FR_OK)
    5204:	2800      	cmp	r0, #0
    5206:	d006      	beq.n	5216 <f_open+0x3e>
		res = follow_path(&dj, path);	/* Follow the file path */
	dir = dj.dir;
    5208:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    520a:	231c      	movs	r3, #28
    520c:	423b      	tst	r3, r7
    520e:	d145      	bne.n	529c <f_open+0xc4>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
    5210:	2800      	cmp	r0, #0
    5212:	d13d      	bne.n	5290 <f_open+0xb8>
    5214:	e00c      	b.n	5230 <f_open+0x58>
		res = follow_path(&dj, path);	/* Follow the file path */
    5216:	9901      	ldr	r1, [sp, #4]
    5218:	a885      	add	r0, sp, #532	; 0x214
    521a:	4b4c      	ldr	r3, [pc, #304]	; (534c <f_open+0x174>)
    521c:	4798      	blx	r3
	dir = dj.dir;
    521e:	9c8a      	ldr	r4, [sp, #552]	; 0x228
	if (res == FR_OK) {
    5220:	2800      	cmp	r0, #0
    5222:	d1f2      	bne.n	520a <f_open+0x32>
		if (!dir)	/* Current dir itself */
    5224:	2c00      	cmp	r4, #0
    5226:	d100      	bne.n	522a <f_open+0x52>
    5228:	e086      	b.n	5338 <f_open+0x160>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    522a:	231c      	movs	r3, #28
    522c:	423b      	tst	r3, r7
    522e:	d146      	bne.n	52be <f_open+0xe6>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    5230:	7ae3      	ldrb	r3, [r4, #11]
				res = FR_NO_FILE;
    5232:	2004      	movs	r0, #4
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    5234:	06da      	lsls	r2, r3, #27
    5236:	d42b      	bmi.n	5290 <f_open+0xb8>
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    5238:	07ba      	lsls	r2, r7, #30
    523a:	d502      	bpl.n	5242 <f_open+0x6a>
					res = FR_DENIED;
    523c:	3003      	adds	r0, #3
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    523e:	07db      	lsls	r3, r3, #31
    5240:	d426      	bmi.n	5290 <f_open+0xb8>
			}
		}
	}
	if (res == FR_OK) {
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
    5242:	073b      	lsls	r3, r7, #28
    5244:	d501      	bpl.n	524a <f_open+0x72>
			mode |= FA__WRITTEN;
    5246:	2320      	movs	r3, #32
    5248:	431e      	orrs	r6, r3
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
    524a:	9b85      	ldr	r3, [sp, #532]	; 0x214
    524c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    524e:	61eb      	str	r3, [r5, #28]
		fp->dir_ptr = dir;
    5250:	622c      	str	r4, [r5, #32]
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
		fp->flag = mode;					/* File access mode */
    5252:	71ae      	strb	r6, [r5, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
    5254:	7d62      	ldrb	r2, [r4, #21]
    5256:	0212      	lsls	r2, r2, #8
    5258:	7d23      	ldrb	r3, [r4, #20]
    525a:	4313      	orrs	r3, r2
    525c:	041b      	lsls	r3, r3, #16
    525e:	7ee1      	ldrb	r1, [r4, #27]
    5260:	0209      	lsls	r1, r1, #8
    5262:	7ea2      	ldrb	r2, [r4, #26]
    5264:	430a      	orrs	r2, r1
    5266:	4313      	orrs	r3, r2
    5268:	612b      	str	r3, [r5, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    526a:	7fe3      	ldrb	r3, [r4, #31]
    526c:	061b      	lsls	r3, r3, #24
    526e:	7fa2      	ldrb	r2, [r4, #30]
    5270:	0412      	lsls	r2, r2, #16
    5272:	4313      	orrs	r3, r2
    5274:	7f22      	ldrb	r2, [r4, #28]
    5276:	4313      	orrs	r3, r2
    5278:	7f62      	ldrb	r2, [r4, #29]
    527a:	0212      	lsls	r2, r2, #8
    527c:	4313      	orrs	r3, r2
    527e:	60eb      	str	r3, [r5, #12]
		fp->fptr = 0;						/* File pointer */
    5280:	2300      	movs	r3, #0
    5282:	60ab      	str	r3, [r5, #8]
		fp->dsect = 0;
    5284:	61ab      	str	r3, [r5, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    5286:	9b85      	ldr	r3, [sp, #532]	; 0x214
    5288:	602b      	str	r3, [r5, #0]
    528a:	88db      	ldrh	r3, [r3, #6]
    528c:	80ab      	strh	r3, [r5, #4]
    528e:	2000      	movs	r0, #0
	}

	LEAVE_FF(dj.fs, res);
}
    5290:	238e      	movs	r3, #142	; 0x8e
    5292:	009b      	lsls	r3, r3, #2
    5294:	449d      	add	sp, r3
    5296:	bc04      	pop	{r2}
    5298:	4690      	mov	r8, r2
    529a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
    529c:	2804      	cmp	r0, #4
    529e:	d005      	beq.n	52ac <f_open+0xd4>
			mode |= FA_CREATE_ALWAYS;		/* File is created */
    52a0:	2308      	movs	r3, #8
    52a2:	431e      	orrs	r6, r3
			dir = dj.dir;					/* New entry */
    52a4:	9c8a      	ldr	r4, [sp, #552]	; 0x228
	if (res == FR_OK) {
    52a6:	2800      	cmp	r0, #0
    52a8:	d0d3      	beq.n	5252 <f_open+0x7a>
    52aa:	e7f1      	b.n	5290 <f_open+0xb8>
				res = dir_register(&dj);
    52ac:	a885      	add	r0, sp, #532	; 0x214
    52ae:	4b28      	ldr	r3, [pc, #160]	; (5350 <f_open+0x178>)
    52b0:	4798      	blx	r3
			mode |= FA_CREATE_ALWAYS;		/* File is created */
    52b2:	2308      	movs	r3, #8
    52b4:	431e      	orrs	r6, r3
			dir = dj.dir;					/* New entry */
    52b6:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    52b8:	2800      	cmp	r0, #0
    52ba:	d008      	beq.n	52ce <f_open+0xf6>
    52bc:	e7e8      	b.n	5290 <f_open+0xb8>
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    52be:	7ae3      	ldrb	r3, [r4, #11]
    52c0:	2211      	movs	r2, #17
				res = FR_DENIED;
    52c2:	2007      	movs	r0, #7
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    52c4:	421a      	tst	r2, r3
    52c6:	d1e3      	bne.n	5290 <f_open+0xb8>
					res = FR_EXIST;
    52c8:	3001      	adds	r0, #1
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
    52ca:	077b      	lsls	r3, r7, #29
    52cc:	d4e0      	bmi.n	5290 <f_open+0xb8>
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    52ce:	0733      	lsls	r3, r6, #28
    52d0:	d5bb      	bpl.n	524a <f_open+0x72>
			dw = get_fattime();					/* Created time */
    52d2:	4b20      	ldr	r3, [pc, #128]	; (5354 <f_open+0x17c>)
    52d4:	4798      	blx	r3
			ST_DWORD(dir+DIR_CrtTime, dw);
    52d6:	73a0      	strb	r0, [r4, #14]
    52d8:	0a03      	lsrs	r3, r0, #8
    52da:	73e3      	strb	r3, [r4, #15]
    52dc:	0c03      	lsrs	r3, r0, #16
    52de:	7423      	strb	r3, [r4, #16]
    52e0:	0e00      	lsrs	r0, r0, #24
    52e2:	7460      	strb	r0, [r4, #17]
			dir[DIR_Attr] = 0;					/* Reset attribute */
    52e4:	2300      	movs	r3, #0
    52e6:	72e3      	strb	r3, [r4, #11]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
    52e8:	7723      	strb	r3, [r4, #28]
    52ea:	7763      	strb	r3, [r4, #29]
    52ec:	77a3      	strb	r3, [r4, #30]
    52ee:	77e3      	strb	r3, [r4, #31]
			cl = LD_CLUST(dir);					/* Get start cluster */
    52f0:	7d62      	ldrb	r2, [r4, #21]
    52f2:	0212      	lsls	r2, r2, #8
    52f4:	7d27      	ldrb	r7, [r4, #20]
    52f6:	4317      	orrs	r7, r2
    52f8:	043f      	lsls	r7, r7, #16
    52fa:	7ee1      	ldrb	r1, [r4, #27]
    52fc:	0209      	lsls	r1, r1, #8
    52fe:	7ea2      	ldrb	r2, [r4, #26]
    5300:	430a      	orrs	r2, r1
    5302:	4317      	orrs	r7, r2
			ST_CLUST(dir, 0);					/* cluster = 0 */
    5304:	76a3      	strb	r3, [r4, #26]
    5306:	76e3      	strb	r3, [r4, #27]
    5308:	7523      	strb	r3, [r4, #20]
    530a:	7563      	strb	r3, [r4, #21]
			dj.fs->wflag = 1;
    530c:	9885      	ldr	r0, [sp, #532]	; 0x214
    530e:	3301      	adds	r3, #1
    5310:	7103      	strb	r3, [r0, #4]
			if (cl) {							/* Remove the cluster chain if exist */
    5312:	2f00      	cmp	r7, #0
    5314:	d097      	beq.n	5246 <f_open+0x6e>
				dw = dj.fs->winsect;
    5316:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    5318:	4698      	mov	r8, r3
				res = remove_chain(dj.fs, cl);
    531a:	0039      	movs	r1, r7
    531c:	4b0e      	ldr	r3, [pc, #56]	; (5358 <f_open+0x180>)
    531e:	4798      	blx	r3
				if (res == FR_OK) {
    5320:	2800      	cmp	r0, #0
    5322:	d1b5      	bne.n	5290 <f_open+0xb8>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    5324:	9885      	ldr	r0, [sp, #532]	; 0x214
    5326:	3f01      	subs	r7, #1
    5328:	60c7      	str	r7, [r0, #12]
					res = move_window(dj.fs, dw);
    532a:	4641      	mov	r1, r8
    532c:	4b0b      	ldr	r3, [pc, #44]	; (535c <f_open+0x184>)
    532e:	4798      	blx	r3
	if (res == FR_OK) {
    5330:	2800      	cmp	r0, #0
    5332:	d100      	bne.n	5336 <f_open+0x15e>
    5334:	e787      	b.n	5246 <f_open+0x6e>
    5336:	e7ab      	b.n	5290 <f_open+0xb8>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    5338:	231c      	movs	r3, #28
			res = FR_INVALID_NAME;
    533a:	2006      	movs	r0, #6
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    533c:	423b      	tst	r3, r7
    533e:	d0b2      	beq.n	52a6 <f_open+0xce>
			res = FR_INVALID_NAME;
    5340:	2006      	movs	r0, #6
    5342:	e7ad      	b.n	52a0 <f_open+0xc8>
    5344:	fffffdc8 	.word	0xfffffdc8
    5348:	00003c5d 	.word	0x00003c5d
    534c:	00004e65 	.word	0x00004e65
    5350:	000048e5 	.word	0x000048e5
    5354:	00003add 	.word	0x00003add
    5358:	000045b1 	.word	0x000045b1
    535c:	00004171 	.word	0x00004171

00005360 <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
    5360:	b5f0      	push	{r4, r5, r6, r7, lr}
    5362:	46de      	mov	lr, fp
    5364:	4657      	mov	r7, sl
    5366:	464e      	mov	r6, r9
    5368:	4645      	mov	r5, r8
    536a:	b5e0      	push	{r5, r6, r7, lr}
    536c:	b083      	sub	sp, #12
    536e:	0004      	movs	r4, r0
    5370:	000f      	movs	r7, r1
    5372:	0015      	movs	r5, r2
    5374:	4699      	mov	r9, r3
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = buff;


	*br = 0;	/* Initialize byte counter */
    5376:	2300      	movs	r3, #0
    5378:	464a      	mov	r2, r9
    537a:	6013      	str	r3, [r2, #0]

	res = validate(fp->fs, fp->id);				/* Check validity */
    537c:	8881      	ldrh	r1, [r0, #4]
    537e:	6800      	ldr	r0, [r0, #0]
    5380:	4b5e      	ldr	r3, [pc, #376]	; (54fc <f_read+0x19c>)
    5382:	4798      	blx	r3
    5384:	9000      	str	r0, [sp, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    5386:	2800      	cmp	r0, #0
    5388:	d000      	beq.n	538c <f_read+0x2c>
    538a:	e0af      	b.n	54ec <f_read+0x18c>
	if (fp->flag & FA__ERROR)					/* Aborted file? */
    538c:	79a3      	ldrb	r3, [r4, #6]
    538e:	b25a      	sxtb	r2, r3
    5390:	2a00      	cmp	r2, #0
    5392:	da00      	bge.n	5396 <f_read+0x36>
    5394:	e0a8      	b.n	54e8 <f_read+0x188>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
    5396:	07db      	lsls	r3, r3, #31
    5398:	d402      	bmi.n	53a0 <f_read+0x40>
		LEAVE_FF(fp->fs, FR_DENIED);
    539a:	2307      	movs	r3, #7
    539c:	9300      	str	r3, [sp, #0]
    539e:	e0a5      	b.n	54ec <f_read+0x18c>
	remain = fp->fsize - fp->fptr;
    53a0:	68e3      	ldr	r3, [r4, #12]
    53a2:	68a2      	ldr	r2, [r4, #8]
    53a4:	1a9e      	subs	r6, r3, r2
    53a6:	42ae      	cmp	r6, r5
    53a8:	d900      	bls.n	53ac <f_read+0x4c>
    53aa:	002e      	movs	r6, r5
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
    53ac:	2e00      	cmp	r6, #0
    53ae:	d153      	bne.n	5458 <f_read+0xf8>
    53b0:	e09c      	b.n	54ec <f_read+0x18c>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
    53b2:	6961      	ldr	r1, [r4, #20]
    53b4:	4b52      	ldr	r3, [pc, #328]	; (5500 <f_read+0x1a0>)
    53b6:	4798      	blx	r3
    53b8:	e05c      	b.n	5474 <f_read+0x114>
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
    53ba:	79a2      	ldrb	r2, [r4, #6]
    53bc:	2380      	movs	r3, #128	; 0x80
    53be:	425b      	negs	r3, r3
    53c0:	4313      	orrs	r3, r2
    53c2:	71a3      	strb	r3, [r4, #6]
    53c4:	2302      	movs	r3, #2
    53c6:	9300      	str	r3, [sp, #0]
    53c8:	e090      	b.n	54ec <f_read+0x18c>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    53ca:	79a2      	ldrb	r2, [r4, #6]
    53cc:	2380      	movs	r3, #128	; 0x80
    53ce:	425b      	negs	r3, r3
    53d0:	4313      	orrs	r3, r2
    53d2:	71a3      	strb	r3, [r4, #6]
    53d4:	2301      	movs	r3, #1
    53d6:	9300      	str	r3, [sp, #0]
    53d8:	e088      	b.n	54ec <f_read+0x18c>
				fp->clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    53da:	79a2      	ldrb	r2, [r4, #6]
    53dc:	2380      	movs	r3, #128	; 0x80
    53de:	425b      	negs	r3, r3
    53e0:	4313      	orrs	r3, r2
    53e2:	71a3      	strb	r3, [r4, #6]
    53e4:	2302      	movs	r3, #2
    53e6:	9300      	str	r3, [sp, #0]
    53e8:	e080      	b.n	54ec <f_read+0x18c>
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
			if (cc) {							/* Read maximum contiguous sectors directly */
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
					cc = fp->fs->csize - csect;
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
    53ea:	79a2      	ldrb	r2, [r4, #6]
    53ec:	2380      	movs	r3, #128	; 0x80
    53ee:	425b      	negs	r3, r3
    53f0:	4313      	orrs	r3, r2
    53f2:	71a3      	strb	r3, [r4, #6]
    53f4:	2301      	movs	r3, #1
    53f6:	9300      	str	r3, [sp, #0]
    53f8:	e078      	b.n	54ec <f_read+0x18c>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
    53fa:	3130      	adds	r1, #48	; 0x30
    53fc:	0240      	lsls	r0, r0, #9
    53fe:	1838      	adds	r0, r7, r0
    5400:	2280      	movs	r2, #128	; 0x80
    5402:	0092      	lsls	r2, r2, #2
    5404:	4b3f      	ldr	r3, [pc, #252]	; (5504 <f_read+0x1a4>)
    5406:	4798      	blx	r3
    5408:	e063      	b.n	54d2 <f_read+0x172>
#endif
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    540a:	4643      	mov	r3, r8
    540c:	61a3      	str	r3, [r4, #24]
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    540e:	68a3      	ldr	r3, [r4, #8]
    5410:	05dd      	lsls	r5, r3, #23
    5412:	0ded      	lsrs	r5, r5, #23
    5414:	2380      	movs	r3, #128	; 0x80
    5416:	009b      	lsls	r3, r3, #2
    5418:	1b5d      	subs	r5, r3, r5
    541a:	42b5      	cmp	r5, r6
    541c:	d900      	bls.n	5420 <f_read+0xc0>
    541e:	0035      	movs	r5, r6
		if (rcnt > btr) rcnt = btr;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
    5420:	69a1      	ldr	r1, [r4, #24]
    5422:	6820      	ldr	r0, [r4, #0]
    5424:	4b38      	ldr	r3, [pc, #224]	; (5508 <f_read+0x1a8>)
    5426:	4798      	blx	r3
    5428:	2800      	cmp	r0, #0
    542a:	d155      	bne.n	54d8 <f_read+0x178>
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
    542c:	68a3      	ldr	r3, [r4, #8]
    542e:	05d9      	lsls	r1, r3, #23
    5430:	0dc9      	lsrs	r1, r1, #23
    5432:	3130      	adds	r1, #48	; 0x30
    5434:	6823      	ldr	r3, [r4, #0]
    5436:	469c      	mov	ip, r3
    5438:	4461      	add	r1, ip
    543a:	002a      	movs	r2, r5
    543c:	0038      	movs	r0, r7
    543e:	4b31      	ldr	r3, [pc, #196]	; (5504 <f_read+0x1a4>)
    5440:	4798      	blx	r3
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
    5442:	197f      	adds	r7, r7, r5
    5444:	68a3      	ldr	r3, [r4, #8]
    5446:	195b      	adds	r3, r3, r5
    5448:	60a3      	str	r3, [r4, #8]
    544a:	464b      	mov	r3, r9
    544c:	681b      	ldr	r3, [r3, #0]
    544e:	195b      	adds	r3, r3, r5
    5450:	464a      	mov	r2, r9
    5452:	6013      	str	r3, [r2, #0]
    5454:	1b76      	subs	r6, r6, r5
	for ( ;  btr;								/* Repeat until all data read */
    5456:	d049      	beq.n	54ec <f_read+0x18c>
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
    5458:	68a3      	ldr	r3, [r4, #8]
    545a:	05da      	lsls	r2, r3, #23
    545c:	d1d7      	bne.n	540e <f_read+0xae>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    545e:	6820      	ldr	r0, [r4, #0]
    5460:	7882      	ldrb	r2, [r0, #2]
    5462:	3a01      	subs	r2, #1
    5464:	0a5d      	lsrs	r5, r3, #9
    5466:	4015      	ands	r5, r2
    5468:	b2ed      	uxtb	r5, r5
			if (!csect) {						/* On the cluster boundary? */
    546a:	2d00      	cmp	r5, #0
    546c:	d107      	bne.n	547e <f_read+0x11e>
				if (fp->fptr == 0) {			/* On the top of the file? */
    546e:	2b00      	cmp	r3, #0
    5470:	d19f      	bne.n	53b2 <f_read+0x52>
					clst = fp->sclust;			/* Follow from the origin */
    5472:	6920      	ldr	r0, [r4, #16]
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
    5474:	2801      	cmp	r0, #1
    5476:	d9a0      	bls.n	53ba <f_read+0x5a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    5478:	1c43      	adds	r3, r0, #1
    547a:	d0a6      	beq.n	53ca <f_read+0x6a>
				fp->clust = clst;				/* Update current cluster */
    547c:	6160      	str	r0, [r4, #20]
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    547e:	6823      	ldr	r3, [r4, #0]
    5480:	469a      	mov	sl, r3
    5482:	6961      	ldr	r1, [r4, #20]
    5484:	0018      	movs	r0, r3
    5486:	4b21      	ldr	r3, [pc, #132]	; (550c <f_read+0x1ac>)
    5488:	4798      	blx	r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    548a:	2800      	cmp	r0, #0
    548c:	d0a5      	beq.n	53da <f_read+0x7a>
			sect += csect;
    548e:	4680      	mov	r8, r0
    5490:	44a8      	add	r8, r5
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
    5492:	0a73      	lsrs	r3, r6, #9
    5494:	469b      	mov	fp, r3
			if (cc) {							/* Read maximum contiguous sectors directly */
    5496:	d0b8      	beq.n	540a <f_read+0xaa>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    5498:	4653      	mov	r3, sl
    549a:	789b      	ldrb	r3, [r3, #2]
    549c:	465a      	mov	r2, fp
    549e:	18aa      	adds	r2, r5, r2
    54a0:	429a      	cmp	r2, r3
    54a2:	d901      	bls.n	54a8 <f_read+0x148>
					cc = fp->fs->csize - csect;
    54a4:	1b5b      	subs	r3, r3, r5
    54a6:	469b      	mov	fp, r3
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
    54a8:	465b      	mov	r3, fp
    54aa:	466a      	mov	r2, sp
    54ac:	71d3      	strb	r3, [r2, #7]
    54ae:	79d3      	ldrb	r3, [r2, #7]
    54b0:	4652      	mov	r2, sl
    54b2:	7850      	ldrb	r0, [r2, #1]
    54b4:	4642      	mov	r2, r8
    54b6:	0039      	movs	r1, r7
    54b8:	4d15      	ldr	r5, [pc, #84]	; (5510 <f_read+0x1b0>)
    54ba:	47a8      	blx	r5
    54bc:	2800      	cmp	r0, #0
    54be:	d194      	bne.n	53ea <f_read+0x8a>
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
    54c0:	6821      	ldr	r1, [r4, #0]
    54c2:	790b      	ldrb	r3, [r1, #4]
    54c4:	2b00      	cmp	r3, #0
    54c6:	d004      	beq.n	54d2 <f_read+0x172>
    54c8:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    54ca:	4642      	mov	r2, r8
    54cc:	1a98      	subs	r0, r3, r2
    54ce:	4583      	cmp	fp, r0
    54d0:	d893      	bhi.n	53fa <f_read+0x9a>
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
    54d2:	465b      	mov	r3, fp
    54d4:	025d      	lsls	r5, r3, #9
				continue;
    54d6:	e7b4      	b.n	5442 <f_read+0xe2>
			ABORT(fp->fs, FR_DISK_ERR);
    54d8:	79a2      	ldrb	r2, [r4, #6]
    54da:	2380      	movs	r3, #128	; 0x80
    54dc:	425b      	negs	r3, r3
    54de:	4313      	orrs	r3, r2
    54e0:	71a3      	strb	r3, [r4, #6]
    54e2:	2301      	movs	r3, #1
    54e4:	9300      	str	r3, [sp, #0]
    54e6:	e001      	b.n	54ec <f_read+0x18c>
		LEAVE_FF(fp->fs, FR_INT_ERR);
    54e8:	2302      	movs	r3, #2
    54ea:	9300      	str	r3, [sp, #0]
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
    54ec:	9800      	ldr	r0, [sp, #0]
    54ee:	b003      	add	sp, #12
    54f0:	bc3c      	pop	{r2, r3, r4, r5}
    54f2:	4690      	mov	r8, r2
    54f4:	4699      	mov	r9, r3
    54f6:	46a2      	mov	sl, r4
    54f8:	46ab      	mov	fp, r5
    54fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    54fc:	00003b89 	.word	0x00003b89
    5500:	00004211 	.word	0x00004211
    5504:	00003b2d 	.word	0x00003b2d
    5508:	00004171 	.word	0x00004171
    550c:	00003b53 	.word	0x00003b53
    5510:	00003969 	.word	0x00003969

00005514 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    5514:	b5f0      	push	{r4, r5, r6, r7, lr}
    5516:	46de      	mov	lr, fp
    5518:	4657      	mov	r7, sl
    551a:	464e      	mov	r6, r9
    551c:	4645      	mov	r5, r8
    551e:	b5e0      	push	{r5, r6, r7, lr}
    5520:	b083      	sub	sp, #12
    5522:	0004      	movs	r4, r0
    5524:	000d      	movs	r5, r1
    5526:	0016      	movs	r6, r2
    5528:	4699      	mov	r9, r3
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
    552a:	2300      	movs	r3, #0
    552c:	464a      	mov	r2, r9
    552e:	6013      	str	r3, [r2, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
    5530:	8881      	ldrh	r1, [r0, #4]
    5532:	6800      	ldr	r0, [r0, #0]
    5534:	4b7f      	ldr	r3, [pc, #508]	; (5734 <f_write+0x220>)
    5536:	4798      	blx	r3
    5538:	9000      	str	r0, [sp, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    553a:	2800      	cmp	r0, #0
    553c:	d000      	beq.n	5540 <f_write+0x2c>
    553e:	e0f1      	b.n	5724 <f_write+0x210>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
    5540:	79a3      	ldrb	r3, [r4, #6]
    5542:	b25a      	sxtb	r2, r3
    5544:	2a00      	cmp	r2, #0
    5546:	da00      	bge.n	554a <f_write+0x36>
    5548:	e0ea      	b.n	5720 <f_write+0x20c>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
    554a:	079b      	lsls	r3, r3, #30
    554c:	d402      	bmi.n	5554 <f_write+0x40>
		LEAVE_FF(fp->fs, FR_DENIED);
    554e:	2307      	movs	r3, #7
    5550:	9300      	str	r3, [sp, #0]
    5552:	e0e7      	b.n	5724 <f_write+0x210>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
    5554:	68e3      	ldr	r3, [r4, #12]
    5556:	199a      	adds	r2, r3, r6
    5558:	4293      	cmp	r3, r2
    555a:	d810      	bhi.n	557e <f_write+0x6a>

	for ( ;  btw;							/* Repeat until all data written */
    555c:	2e00      	cmp	r6, #0
    555e:	d00e      	beq.n	557e <f_write+0x6a>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    5560:	002f      	movs	r7, r5
    5562:	e07b      	b.n	565c <f_write+0x148>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    5564:	2100      	movs	r1, #0
    5566:	4b74      	ldr	r3, [pc, #464]	; (5738 <f_write+0x224>)
    5568:	4798      	blx	r3
    556a:	0003      	movs	r3, r0
    556c:	6120      	str	r0, [r4, #16]
    556e:	e003      	b.n	5578 <f_write+0x64>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    5570:	6961      	ldr	r1, [r4, #20]
    5572:	4b71      	ldr	r3, [pc, #452]	; (5738 <f_write+0x224>)
    5574:	4798      	blx	r3
    5576:	0003      	movs	r3, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    5578:	2b00      	cmp	r3, #0
    557a:	d000      	beq.n	557e <f_write+0x6a>
    557c:	e080      	b.n	5680 <f_write+0x16c>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    557e:	68a3      	ldr	r3, [r4, #8]
    5580:	68e2      	ldr	r2, [r4, #12]
    5582:	4293      	cmp	r3, r2
    5584:	d900      	bls.n	5588 <f_write+0x74>
    5586:	60e3      	str	r3, [r4, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
    5588:	79a3      	ldrb	r3, [r4, #6]
    558a:	2220      	movs	r2, #32
    558c:	4313      	orrs	r3, r2
    558e:	71a3      	strb	r3, [r4, #6]

	LEAVE_FF(fp->fs, FR_OK);
    5590:	e0c8      	b.n	5724 <f_write+0x210>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    5592:	79a2      	ldrb	r2, [r4, #6]
    5594:	3b81      	subs	r3, #129	; 0x81
    5596:	4313      	orrs	r3, r2
    5598:	71a3      	strb	r3, [r4, #6]
    559a:	2302      	movs	r3, #2
    559c:	9300      	str	r3, [sp, #0]
    559e:	e0c1      	b.n	5724 <f_write+0x210>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    55a0:	79a2      	ldrb	r2, [r4, #6]
    55a2:	3b7f      	subs	r3, #127	; 0x7f
    55a4:	4313      	orrs	r3, r2
    55a6:	71a3      	strb	r3, [r4, #6]
    55a8:	2301      	movs	r3, #1
    55aa:	9300      	str	r3, [sp, #0]
    55ac:	e0ba      	b.n	5724 <f_write+0x210>
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
    55ae:	2100      	movs	r1, #0
    55b0:	4b62      	ldr	r3, [pc, #392]	; (573c <f_write+0x228>)
    55b2:	4798      	blx	r3
    55b4:	2800      	cmp	r0, #0
    55b6:	d06d      	beq.n	5694 <f_write+0x180>
				ABORT(fp->fs, FR_DISK_ERR);
    55b8:	79a2      	ldrb	r2, [r4, #6]
    55ba:	2380      	movs	r3, #128	; 0x80
    55bc:	425b      	negs	r3, r3
    55be:	4313      	orrs	r3, r2
    55c0:	71a3      	strb	r3, [r4, #6]
    55c2:	2301      	movs	r3, #1
    55c4:	9300      	str	r3, [sp, #0]
    55c6:	e0ad      	b.n	5724 <f_write+0x210>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    55c8:	79a2      	ldrb	r2, [r4, #6]
    55ca:	2380      	movs	r3, #128	; 0x80
    55cc:	425b      	negs	r3, r3
    55ce:	4313      	orrs	r3, r2
    55d0:	71a3      	strb	r3, [r4, #6]
    55d2:	2302      	movs	r3, #2
    55d4:	9300      	str	r3, [sp, #0]
    55d6:	e0a5      	b.n	5724 <f_write+0x210>
					ABORT(fp->fs, FR_DISK_ERR);
    55d8:	79a2      	ldrb	r2, [r4, #6]
    55da:	2380      	movs	r3, #128	; 0x80
    55dc:	425b      	negs	r3, r3
    55de:	4313      	orrs	r3, r2
    55e0:	71a3      	strb	r3, [r4, #6]
    55e2:	2301      	movs	r3, #1
    55e4:	9300      	str	r3, [sp, #0]
    55e6:	e09d      	b.n	5724 <f_write+0x210>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
    55e8:	0240      	lsls	r0, r0, #9
    55ea:	1839      	adds	r1, r7, r0
    55ec:	3330      	adds	r3, #48	; 0x30
    55ee:	0018      	movs	r0, r3
    55f0:	2280      	movs	r2, #128	; 0x80
    55f2:	0092      	lsls	r2, r2, #2
    55f4:	4b52      	ldr	r3, [pc, #328]	; (5740 <f_write+0x22c>)
    55f6:	4798      	blx	r3
					fp->fs->wflag = 0;
    55f8:	2300      	movs	r3, #0
    55fa:	6822      	ldr	r2, [r4, #0]
    55fc:	7113      	strb	r3, [r2, #4]
    55fe:	e072      	b.n	56e6 <f_write+0x1d2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
    5600:	68a3      	ldr	r3, [r4, #8]
    5602:	68e2      	ldr	r2, [r4, #12]
    5604:	4293      	cmp	r3, r2
    5606:	d271      	bcs.n	56ec <f_write+0x1d8>
			fp->dsect = sect;
    5608:	4643      	mov	r3, r8
    560a:	61a3      	str	r3, [r4, #24]
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    560c:	68a3      	ldr	r3, [r4, #8]
    560e:	05dd      	lsls	r5, r3, #23
    5610:	0ded      	lsrs	r5, r5, #23
    5612:	2380      	movs	r3, #128	; 0x80
    5614:	009b      	lsls	r3, r3, #2
    5616:	1b5d      	subs	r5, r3, r5
    5618:	42b5      	cmp	r5, r6
    561a:	d900      	bls.n	561e <f_write+0x10a>
    561c:	0035      	movs	r5, r6
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
    561e:	69a1      	ldr	r1, [r4, #24]
    5620:	6820      	ldr	r0, [r4, #0]
    5622:	4b46      	ldr	r3, [pc, #280]	; (573c <f_write+0x228>)
    5624:	4798      	blx	r3
    5626:	2800      	cmp	r0, #0
    5628:	d172      	bne.n	5710 <f_write+0x1fc>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    562a:	68a3      	ldr	r3, [r4, #8]
    562c:	05d8      	lsls	r0, r3, #23
    562e:	0dc0      	lsrs	r0, r0, #23
    5630:	3030      	adds	r0, #48	; 0x30
    5632:	6823      	ldr	r3, [r4, #0]
    5634:	469c      	mov	ip, r3
    5636:	4460      	add	r0, ip
    5638:	002a      	movs	r2, r5
    563a:	0039      	movs	r1, r7
    563c:	4b40      	ldr	r3, [pc, #256]	; (5740 <f_write+0x22c>)
    563e:	4798      	blx	r3
		fp->fs->wflag = 1;
    5640:	2301      	movs	r3, #1
    5642:	6822      	ldr	r2, [r4, #0]
    5644:	7113      	strb	r3, [r2, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    5646:	197f      	adds	r7, r7, r5
    5648:	68a3      	ldr	r3, [r4, #8]
    564a:	195b      	adds	r3, r3, r5
    564c:	60a3      	str	r3, [r4, #8]
    564e:	464b      	mov	r3, r9
    5650:	681b      	ldr	r3, [r3, #0]
    5652:	195b      	adds	r3, r3, r5
    5654:	464a      	mov	r2, r9
    5656:	6013      	str	r3, [r2, #0]
    5658:	1b76      	subs	r6, r6, r5
	for ( ;  btw;							/* Repeat until all data written */
    565a:	d090      	beq.n	557e <f_write+0x6a>
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
    565c:	68a3      	ldr	r3, [r4, #8]
    565e:	05da      	lsls	r2, r3, #23
    5660:	d1d4      	bne.n	560c <f_write+0xf8>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    5662:	6820      	ldr	r0, [r4, #0]
    5664:	7882      	ldrb	r2, [r0, #2]
    5666:	3a01      	subs	r2, #1
    5668:	0a5d      	lsrs	r5, r3, #9
    566a:	4015      	ands	r5, r2
    566c:	b2ed      	uxtb	r5, r5
			if (!csect) {					/* On the cluster boundary? */
    566e:	2d00      	cmp	r5, #0
    5670:	d10b      	bne.n	568a <f_write+0x176>
				if (fp->fptr == 0) {		/* On the top of the file? */
    5672:	2b00      	cmp	r3, #0
    5674:	d000      	beq.n	5678 <f_write+0x164>
    5676:	e77b      	b.n	5570 <f_write+0x5c>
					clst = fp->sclust;		/* Follow from the origin */
    5678:	6923      	ldr	r3, [r4, #16]
					if (clst == 0)			/* When no cluster is allocated, */
    567a:	2b00      	cmp	r3, #0
    567c:	d100      	bne.n	5680 <f_write+0x16c>
    567e:	e771      	b.n	5564 <f_write+0x50>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    5680:	2b01      	cmp	r3, #1
    5682:	d086      	beq.n	5592 <f_write+0x7e>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    5684:	1c5a      	adds	r2, r3, #1
    5686:	d08b      	beq.n	55a0 <f_write+0x8c>
				fp->clust = clst;			/* Update current cluster */
    5688:	6163      	str	r3, [r4, #20]
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
    568a:	6820      	ldr	r0, [r4, #0]
    568c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    568e:	69a2      	ldr	r2, [r4, #24]
    5690:	4293      	cmp	r3, r2
    5692:	d08c      	beq.n	55ae <f_write+0x9a>
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    5694:	6823      	ldr	r3, [r4, #0]
    5696:	469a      	mov	sl, r3
    5698:	6961      	ldr	r1, [r4, #20]
    569a:	0018      	movs	r0, r3
    569c:	4b29      	ldr	r3, [pc, #164]	; (5744 <f_write+0x230>)
    569e:	4798      	blx	r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    56a0:	2800      	cmp	r0, #0
    56a2:	d091      	beq.n	55c8 <f_write+0xb4>
			sect += csect;
    56a4:	4680      	mov	r8, r0
    56a6:	44a8      	add	r8, r5
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
    56a8:	0a73      	lsrs	r3, r6, #9
    56aa:	469b      	mov	fp, r3
			if (cc) {						/* Write maximum contiguous sectors directly */
    56ac:	d0a8      	beq.n	5600 <f_write+0xec>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    56ae:	4653      	mov	r3, sl
    56b0:	789b      	ldrb	r3, [r3, #2]
    56b2:	465a      	mov	r2, fp
    56b4:	18aa      	adds	r2, r5, r2
    56b6:	429a      	cmp	r2, r3
    56b8:	d901      	bls.n	56be <f_write+0x1aa>
					cc = fp->fs->csize - csect;
    56ba:	1b5b      	subs	r3, r3, r5
    56bc:	469b      	mov	fp, r3
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
    56be:	465b      	mov	r3, fp
    56c0:	466a      	mov	r2, sp
    56c2:	71d3      	strb	r3, [r2, #7]
    56c4:	79d3      	ldrb	r3, [r2, #7]
    56c6:	4652      	mov	r2, sl
    56c8:	7850      	ldrb	r0, [r2, #1]
    56ca:	4642      	mov	r2, r8
    56cc:	0039      	movs	r1, r7
    56ce:	4d1e      	ldr	r5, [pc, #120]	; (5748 <f_write+0x234>)
    56d0:	47a8      	blx	r5
    56d2:	2800      	cmp	r0, #0
    56d4:	d000      	beq.n	56d8 <f_write+0x1c4>
    56d6:	e77f      	b.n	55d8 <f_write+0xc4>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
    56d8:	6823      	ldr	r3, [r4, #0]
    56da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    56dc:	4641      	mov	r1, r8
    56de:	1a50      	subs	r0, r2, r1
    56e0:	4583      	cmp	fp, r0
    56e2:	d900      	bls.n	56e6 <f_write+0x1d2>
    56e4:	e780      	b.n	55e8 <f_write+0xd4>
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
    56e6:	465b      	mov	r3, fp
    56e8:	025d      	lsls	r5, r3, #9
				continue;
    56ea:	e7ac      	b.n	5646 <f_write+0x132>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
    56ec:	2100      	movs	r1, #0
    56ee:	4650      	mov	r0, sl
    56f0:	4b12      	ldr	r3, [pc, #72]	; (573c <f_write+0x228>)
    56f2:	4798      	blx	r3
    56f4:	2800      	cmp	r0, #0
    56f6:	d103      	bne.n	5700 <f_write+0x1ec>
				fp->fs->winsect = sect;
    56f8:	6823      	ldr	r3, [r4, #0]
    56fa:	4642      	mov	r2, r8
    56fc:	62da      	str	r2, [r3, #44]	; 0x2c
    56fe:	e783      	b.n	5608 <f_write+0xf4>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
    5700:	79a2      	ldrb	r2, [r4, #6]
    5702:	2380      	movs	r3, #128	; 0x80
    5704:	425b      	negs	r3, r3
    5706:	4313      	orrs	r3, r2
    5708:	71a3      	strb	r3, [r4, #6]
    570a:	2301      	movs	r3, #1
    570c:	9300      	str	r3, [sp, #0]
    570e:	e009      	b.n	5724 <f_write+0x210>
			ABORT(fp->fs, FR_DISK_ERR);
    5710:	79a2      	ldrb	r2, [r4, #6]
    5712:	2380      	movs	r3, #128	; 0x80
    5714:	425b      	negs	r3, r3
    5716:	4313      	orrs	r3, r2
    5718:	71a3      	strb	r3, [r4, #6]
    571a:	2301      	movs	r3, #1
    571c:	9300      	str	r3, [sp, #0]
    571e:	e001      	b.n	5724 <f_write+0x210>
		LEAVE_FF(fp->fs, FR_INT_ERR);
    5720:	2302      	movs	r3, #2
    5722:	9300      	str	r3, [sp, #0]
}
    5724:	9800      	ldr	r0, [sp, #0]
    5726:	b003      	add	sp, #12
    5728:	bc3c      	pop	{r2, r3, r4, r5}
    572a:	4690      	mov	r8, r2
    572c:	4699      	mov	r9, r3
    572e:	46a2      	mov	sl, r4
    5730:	46ab      	mov	fp, r5
    5732:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5734:	00003b89 	.word	0x00003b89
    5738:	000044ed 	.word	0x000044ed
    573c:	00004171 	.word	0x00004171
    5740:	00003b2d 	.word	0x00003b2d
    5744:	00003b53 	.word	0x00003b53
    5748:	000039ed 	.word	0x000039ed

0000574c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    574c:	b570      	push	{r4, r5, r6, lr}
    574e:	0004      	movs	r4, r0
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    5750:	8881      	ldrh	r1, [r0, #4]
    5752:	6800      	ldr	r0, [r0, #0]
    5754:	4b1c      	ldr	r3, [pc, #112]	; (57c8 <f_sync+0x7c>)
    5756:	4798      	blx	r3
	if (res == FR_OK) {
    5758:	2800      	cmp	r0, #0
    575a:	d102      	bne.n	5762 <f_sync+0x16>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    575c:	79a3      	ldrb	r3, [r4, #6]
    575e:	069b      	lsls	r3, r3, #26
    5760:	d400      	bmi.n	5764 <f_sync+0x18>
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    5762:	bd70      	pop	{r4, r5, r6, pc}
			res = move_window(fp->fs, fp->dir_sect);
    5764:	69e1      	ldr	r1, [r4, #28]
    5766:	6820      	ldr	r0, [r4, #0]
    5768:	4b18      	ldr	r3, [pc, #96]	; (57cc <f_sync+0x80>)
    576a:	4798      	blx	r3
			if (res == FR_OK) {
    576c:	2800      	cmp	r0, #0
    576e:	d1f8      	bne.n	5762 <f_sync+0x16>
				dir = fp->dir_ptr;
    5770:	6a25      	ldr	r5, [r4, #32]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    5772:	7aeb      	ldrb	r3, [r5, #11]
    5774:	2220      	movs	r2, #32
    5776:	4313      	orrs	r3, r2
    5778:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    577a:	7b23      	ldrb	r3, [r4, #12]
    577c:	772b      	strb	r3, [r5, #28]
    577e:	89a3      	ldrh	r3, [r4, #12]
    5780:	0a1b      	lsrs	r3, r3, #8
    5782:	776b      	strb	r3, [r5, #29]
    5784:	89e3      	ldrh	r3, [r4, #14]
    5786:	77ab      	strb	r3, [r5, #30]
    5788:	7be3      	ldrb	r3, [r4, #15]
    578a:	77eb      	strb	r3, [r5, #31]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
    578c:	7c23      	ldrb	r3, [r4, #16]
    578e:	76ab      	strb	r3, [r5, #26]
    5790:	8a23      	ldrh	r3, [r4, #16]
    5792:	0a1b      	lsrs	r3, r3, #8
    5794:	76eb      	strb	r3, [r5, #27]
    5796:	8a63      	ldrh	r3, [r4, #18]
    5798:	752b      	strb	r3, [r5, #20]
    579a:	8a63      	ldrh	r3, [r4, #18]
    579c:	0a1b      	lsrs	r3, r3, #8
    579e:	756b      	strb	r3, [r5, #21]
				tim = get_fattime();						/* Update updated time */
    57a0:	4b0b      	ldr	r3, [pc, #44]	; (57d0 <f_sync+0x84>)
    57a2:	4798      	blx	r3
				ST_DWORD(dir+DIR_WrtTime, tim);
    57a4:	75a8      	strb	r0, [r5, #22]
    57a6:	0a03      	lsrs	r3, r0, #8
    57a8:	75eb      	strb	r3, [r5, #23]
    57aa:	0c03      	lsrs	r3, r0, #16
    57ac:	762b      	strb	r3, [r5, #24]
    57ae:	0e00      	lsrs	r0, r0, #24
    57b0:	7668      	strb	r0, [r5, #25]
				fp->flag &= ~FA__WRITTEN;
    57b2:	79a3      	ldrb	r3, [r4, #6]
    57b4:	2220      	movs	r2, #32
    57b6:	4393      	bics	r3, r2
    57b8:	71a3      	strb	r3, [r4, #6]
				fp->fs->wflag = 1;
    57ba:	2301      	movs	r3, #1
    57bc:	6822      	ldr	r2, [r4, #0]
    57be:	7113      	strb	r3, [r2, #4]
				res = sync(fp->fs);
    57c0:	6820      	ldr	r0, [r4, #0]
    57c2:	4b04      	ldr	r3, [pc, #16]	; (57d4 <f_sync+0x88>)
    57c4:	4798      	blx	r3
    57c6:	e7cc      	b.n	5762 <f_sync+0x16>
    57c8:	00003b89 	.word	0x00003b89
    57cc:	00004171 	.word	0x00004171
    57d0:	00003add 	.word	0x00003add
    57d4:	00004d71 	.word	0x00004d71

000057d8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    57d8:	b510      	push	{r4, lr}
    57da:	0004      	movs	r4, r0
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
    57dc:	4b03      	ldr	r3, [pc, #12]	; (57ec <f_close+0x14>)
    57de:	4798      	blx	r3
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
    57e0:	2800      	cmp	r0, #0
    57e2:	d101      	bne.n	57e8 <f_close+0x10>
    57e4:	2300      	movs	r3, #0
    57e6:	6023      	str	r3, [r4, #0]
	return res;
#endif
}
    57e8:	bd10      	pop	{r4, pc}
    57ea:	46c0      	nop			; (mov r8, r8)
    57ec:	0000574d 	.word	0x0000574d

000057f0 <f_stat>:

FRESULT f_stat (
	const TCHAR *path,	/* Pointer to the file path */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    57f0:	b530      	push	{r4, r5, lr}
    57f2:	4c12      	ldr	r4, [pc, #72]	; (583c <f_stat+0x4c>)
    57f4:	44a5      	add	sp, r4
    57f6:	9001      	str	r0, [sp, #4]
    57f8:	000d      	movs	r5, r1
	FRESULT res;
	DIR dj;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 0);
    57fa:	2200      	movs	r2, #0
    57fc:	a985      	add	r1, sp, #532	; 0x214
    57fe:	a801      	add	r0, sp, #4
    5800:	4b0f      	ldr	r3, [pc, #60]	; (5840 <f_stat+0x50>)
    5802:	4798      	blx	r3
    5804:	1e04      	subs	r4, r0, #0
	if (res == FR_OK) {
    5806:	d004      	beq.n	5812 <f_stat+0x22>
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
}
    5808:	0020      	movs	r0, r4
    580a:	238f      	movs	r3, #143	; 0x8f
    580c:	009b      	lsls	r3, r3, #2
    580e:	449d      	add	sp, r3
    5810:	bd30      	pop	{r4, r5, pc}
		INIT_BUF(dj);
    5812:	ab82      	add	r3, sp, #520	; 0x208
    5814:	938b      	str	r3, [sp, #556]	; 0x22c
    5816:	ab02      	add	r3, sp, #8
    5818:	938c      	str	r3, [sp, #560]	; 0x230
		res = follow_path(&dj, path);	/* Follow the file path */
    581a:	9901      	ldr	r1, [sp, #4]
    581c:	a885      	add	r0, sp, #532	; 0x214
    581e:	4b09      	ldr	r3, [pc, #36]	; (5844 <f_stat+0x54>)
    5820:	4798      	blx	r3
    5822:	1e04      	subs	r4, r0, #0
		if (res == FR_OK) {				/* Follow completed */
    5824:	d1f0      	bne.n	5808 <f_stat+0x18>
			if (dj.dir)		/* Found an object */
    5826:	9b8a      	ldr	r3, [sp, #552]	; 0x228
    5828:	2b00      	cmp	r3, #0
    582a:	d004      	beq.n	5836 <f_stat+0x46>
				get_fileinfo(&dj, fno);
    582c:	0029      	movs	r1, r5
    582e:	a885      	add	r0, sp, #532	; 0x214
    5830:	4b05      	ldr	r3, [pc, #20]	; (5848 <f_stat+0x58>)
    5832:	4798      	blx	r3
    5834:	e7e8      	b.n	5808 <f_stat+0x18>
				res = FR_INVALID_NAME;
    5836:	2406      	movs	r4, #6
    5838:	e7e6      	b.n	5808 <f_stat+0x18>
    583a:	46c0      	nop			; (mov r8, r8)
    583c:	fffffdc4 	.word	0xfffffdc4
    5840:	00003c5d 	.word	0x00003c5d
    5844:	00004e65 	.word	0x00004e65
    5848:	0000400d 	.word	0x0000400d

0000584c <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR *path		/* Pointer to the file or directory path */
)
{
    584c:	b510      	push	{r4, lr}
    584e:	4c2c      	ldr	r4, [pc, #176]	; (5900 <f_unlink+0xb4>)
    5850:	44a5      	add	sp, r4
    5852:	9001      	str	r0, [sp, #4]
	BYTE *dir;
	DWORD dclst;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
    5854:	2201      	movs	r2, #1
    5856:	a98f      	add	r1, sp, #572	; 0x23c
    5858:	a801      	add	r0, sp, #4
    585a:	4b2a      	ldr	r3, [pc, #168]	; (5904 <f_unlink+0xb8>)
    585c:	4798      	blx	r3
	if (res == FR_OK) {
    585e:	2800      	cmp	r0, #0
    5860:	d003      	beq.n	586a <f_unlink+0x1e>
			}
		}
		FREE_BUF();
	}
	LEAVE_FF(dj.fs, res);
}
    5862:	2398      	movs	r3, #152	; 0x98
    5864:	009b      	lsls	r3, r3, #2
    5866:	449d      	add	sp, r3
    5868:	bd10      	pop	{r4, pc}
		INIT_BUF(dj);
    586a:	ab83      	add	r3, sp, #524	; 0x20c
    586c:	9395      	str	r3, [sp, #596]	; 0x254
    586e:	ab03      	add	r3, sp, #12
    5870:	9396      	str	r3, [sp, #600]	; 0x258
		res = follow_path(&dj, path);		/* Follow the file path */
    5872:	9901      	ldr	r1, [sp, #4]
    5874:	a88f      	add	r0, sp, #572	; 0x23c
    5876:	4b24      	ldr	r3, [pc, #144]	; (5908 <f_unlink+0xbc>)
    5878:	4798      	blx	r3
		if (res == FR_OK) {					/* The object is accessible */
    587a:	2800      	cmp	r0, #0
    587c:	d1f1      	bne.n	5862 <f_unlink+0x16>
			dir = dj.dir;
    587e:	9b94      	ldr	r3, [sp, #592]	; 0x250
			if (!dir) {
    5880:	2b00      	cmp	r3, #0
    5882:	d039      	beq.n	58f8 <f_unlink+0xac>
				if (dir[DIR_Attr] & AM_RDO)
    5884:	7ada      	ldrb	r2, [r3, #11]
					res = FR_DENIED;		/* Cannot remove R/O object */
    5886:	3007      	adds	r0, #7
				if (dir[DIR_Attr] & AM_RDO)
    5888:	07d2      	lsls	r2, r2, #31
    588a:	d4ea      	bmi.n	5862 <f_unlink+0x16>
			dclst = LD_CLUST(dir);
    588c:	7d5a      	ldrb	r2, [r3, #21]
    588e:	0212      	lsls	r2, r2, #8
    5890:	7d1c      	ldrb	r4, [r3, #20]
    5892:	4314      	orrs	r4, r2
    5894:	0424      	lsls	r4, r4, #16
    5896:	7ed9      	ldrb	r1, [r3, #27]
    5898:	0209      	lsls	r1, r1, #8
    589a:	7e9a      	ldrb	r2, [r3, #26]
    589c:	430a      	orrs	r2, r1
    589e:	4314      	orrs	r4, r2
			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
    58a0:	7adb      	ldrb	r3, [r3, #11]
    58a2:	06db      	lsls	r3, r3, #27
    58a4:	d40a      	bmi.n	58bc <f_unlink+0x70>
				res = dir_remove(&dj);		/* Remove the directory entry */
    58a6:	a88f      	add	r0, sp, #572	; 0x23c
    58a8:	4b18      	ldr	r3, [pc, #96]	; (590c <f_unlink+0xc0>)
    58aa:	4798      	blx	r3
				if (res == FR_OK) {
    58ac:	2800      	cmp	r0, #0
    58ae:	d1d8      	bne.n	5862 <f_unlink+0x16>
					if (dclst)				/* Remove the cluster chain if exist */
    58b0:	2c00      	cmp	r4, #0
    58b2:	d11a      	bne.n	58ea <f_unlink+0x9e>
					if (res == FR_OK) res = sync(dj.fs);
    58b4:	988f      	ldr	r0, [sp, #572]	; 0x23c
    58b6:	4b16      	ldr	r3, [pc, #88]	; (5910 <f_unlink+0xc4>)
    58b8:	4798      	blx	r3
    58ba:	e7d2      	b.n	5862 <f_unlink+0x16>
					res = FR_INT_ERR;
    58bc:	2002      	movs	r0, #2
				if (dclst < 2) {
    58be:	2c01      	cmp	r4, #1
    58c0:	d9cf      	bls.n	5862 <f_unlink+0x16>
					mem_cpy(&sdj, &dj, sizeof(DIR));	/* Check if the sub-dir is empty or not */
    58c2:	2224      	movs	r2, #36	; 0x24
    58c4:	a98f      	add	r1, sp, #572	; 0x23c
    58c6:	a886      	add	r0, sp, #536	; 0x218
    58c8:	4b12      	ldr	r3, [pc, #72]	; (5914 <f_unlink+0xc8>)
    58ca:	4798      	blx	r3
					sdj.sclust = dclst;
    58cc:	9488      	str	r4, [sp, #544]	; 0x220
					res = dir_sdi(&sdj, 2);		/* Exclude dot entries */
    58ce:	2102      	movs	r1, #2
    58d0:	a886      	add	r0, sp, #536	; 0x218
    58d2:	4b11      	ldr	r3, [pc, #68]	; (5918 <f_unlink+0xcc>)
    58d4:	4798      	blx	r3
					if (res == FR_OK) {
    58d6:	2800      	cmp	r0, #0
    58d8:	d1c3      	bne.n	5862 <f_unlink+0x16>
						res = dir_read(&sdj);
    58da:	a886      	add	r0, sp, #536	; 0x218
    58dc:	4b0f      	ldr	r3, [pc, #60]	; (591c <f_unlink+0xd0>)
    58de:	4798      	blx	r3
						if (res == FR_OK			/* Not empty dir */
    58e0:	2800      	cmp	r0, #0
    58e2:	d00b      	beq.n	58fc <f_unlink+0xb0>
						if (res == FR_NO_FILE) res = FR_OK;	/* Empty */
    58e4:	2804      	cmp	r0, #4
    58e6:	d0de      	beq.n	58a6 <f_unlink+0x5a>
    58e8:	e7bb      	b.n	5862 <f_unlink+0x16>
						res = remove_chain(dj.fs, dclst);
    58ea:	0021      	movs	r1, r4
    58ec:	988f      	ldr	r0, [sp, #572]	; 0x23c
    58ee:	4b0c      	ldr	r3, [pc, #48]	; (5920 <f_unlink+0xd4>)
    58f0:	4798      	blx	r3
					if (res == FR_OK) res = sync(dj.fs);
    58f2:	2800      	cmp	r0, #0
    58f4:	d1b5      	bne.n	5862 <f_unlink+0x16>
    58f6:	e7dd      	b.n	58b4 <f_unlink+0x68>
				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
    58f8:	2006      	movs	r0, #6
    58fa:	e7b2      	b.n	5862 <f_unlink+0x16>
						) res = FR_DENIED;
    58fc:	2007      	movs	r0, #7
	LEAVE_FF(dj.fs, res);
    58fe:	e7b0      	b.n	5862 <f_unlink+0x16>
    5900:	fffffda0 	.word	0xfffffda0
    5904:	00003c5d 	.word	0x00003c5d
    5908:	00004e65 	.word	0x00004e65
    590c:	00004d09 	.word	0x00004d09
    5910:	00004d71 	.word	0x00004d71
    5914:	00003b2d 	.word	0x00003b2d
    5918:	0000430d 	.word	0x0000430d
    591c:	00004bc9 	.word	0x00004bc9
    5920:	000045b1 	.word	0x000045b1

00005924 <f_putc>:
/*-----------------------------------------------------------------------*/
int f_putc (
	TCHAR c,	/* A character to be output */
	FIL* fil	/* Pointer to the file object */
)
{
    5924:	b510      	push	{r4, lr}
    5926:	b082      	sub	sp, #8
    5928:	000c      	movs	r4, r1
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
    592a:	466b      	mov	r3, sp
    592c:	7018      	strb	r0, [r3, #0]
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
    592e:	ab01      	add	r3, sp, #4
    5930:	2201      	movs	r2, #1
    5932:	4669      	mov	r1, sp
    5934:	0020      	movs	r0, r4
    5936:	4c05      	ldr	r4, [pc, #20]	; (594c <f_putc+0x28>)
    5938:	47a0      	blx	r4
	return (bw == btw) ? 1 : EOF;	/* Return the result */
    593a:	9b01      	ldr	r3, [sp, #4]
    593c:	1e58      	subs	r0, r3, #1
    593e:	1e43      	subs	r3, r0, #1
    5940:	4198      	sbcs	r0, r3
    5942:	4240      	negs	r0, r0
    5944:	2301      	movs	r3, #1
    5946:	4318      	orrs	r0, r3
}
    5948:	b002      	add	sp, #8
    594a:	bd10      	pop	{r4, pc}
    594c:	00005515 	.word	0x00005515

00005950 <f_puts>:
/*-----------------------------------------------------------------------*/
int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fil			/* Pointer to the file object */
)
{
    5950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5952:	0006      	movs	r6, r0
    5954:	000d      	movs	r5, r1
	int n;


	for (n = 0; *str; str++, n++) {
    5956:	7800      	ldrb	r0, [r0, #0]
    5958:	2800      	cmp	r0, #0
    595a:	d00b      	beq.n	5974 <f_puts+0x24>
    595c:	2400      	movs	r4, #0
		if (f_putc(*str, fil) == EOF) return EOF;
    595e:	4f06      	ldr	r7, [pc, #24]	; (5978 <f_puts+0x28>)
    5960:	0029      	movs	r1, r5
    5962:	47b8      	blx	r7
    5964:	1c43      	adds	r3, r0, #1
    5966:	d004      	beq.n	5972 <f_puts+0x22>
	for (n = 0; *str; str++, n++) {
    5968:	3401      	adds	r4, #1
    596a:	5d30      	ldrb	r0, [r6, r4]
    596c:	2800      	cmp	r0, #0
    596e:	d1f7      	bne.n	5960 <f_puts+0x10>
    5970:	0020      	movs	r0, r4
	}
	return n;
}
    5972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (n = 0; *str; str++, n++) {
    5974:	2000      	movs	r0, #0
    5976:	e7fc      	b.n	5972 <f_puts+0x22>
    5978:	00005925 	.word	0x00005925

0000597c <ff_convert>:
{
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
		c = src;
    597c:	0003      	movs	r3, r0
	if (src < 0x80) {	/* ASCII */
    597e:	287f      	cmp	r0, #127	; 0x7f
    5980:	d911      	bls.n	59a6 <ff_convert+0x2a>

	} else {
		if (dir) {		/* OEMCP to Unicode */
    5982:	2900      	cmp	r1, #0
    5984:	d111      	bne.n	59aa <ff_convert+0x2e>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
				if (src == Tbl[c]) break;
    5986:	28c7      	cmp	r0, #199	; 0xc7
    5988:	d017      	beq.n	59ba <ff_convert+0x3e>
    598a:	4a0d      	ldr	r2, [pc, #52]	; (59c0 <ff_convert+0x44>)
    598c:	3202      	adds	r2, #2
			for (c = 0; c < 0x80; c++) {
    598e:	2301      	movs	r3, #1
				if (src == Tbl[c]) break;
    5990:	8811      	ldrh	r1, [r2, #0]
    5992:	4281      	cmp	r1, r0
    5994:	d004      	beq.n	59a0 <ff_convert+0x24>
			for (c = 0; c < 0x80; c++) {
    5996:	3301      	adds	r3, #1
    5998:	b29b      	uxth	r3, r3
    599a:	3202      	adds	r2, #2
    599c:	2b80      	cmp	r3, #128	; 0x80
    599e:	d1f7      	bne.n	5990 <ff_convert+0x14>
			}
			c = (c + 0x80) & 0xFF;
    59a0:	3380      	adds	r3, #128	; 0x80
    59a2:	20ff      	movs	r0, #255	; 0xff
    59a4:	4003      	ands	r3, r0
		}
	}

	return c;
}
    59a6:	0018      	movs	r0, r3
    59a8:	4770      	bx	lr
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
    59aa:	2300      	movs	r3, #0
    59ac:	28ff      	cmp	r0, #255	; 0xff
    59ae:	d8fa      	bhi.n	59a6 <ff_convert+0x2a>
    59b0:	3880      	subs	r0, #128	; 0x80
    59b2:	0040      	lsls	r0, r0, #1
    59b4:	4b02      	ldr	r3, [pc, #8]	; (59c0 <ff_convert+0x44>)
    59b6:	5ac3      	ldrh	r3, [r0, r3]
    59b8:	e7f5      	b.n	59a6 <ff_convert+0x2a>
				if (src == Tbl[c]) break;
    59ba:	2300      	movs	r3, #0
    59bc:	e7f0      	b.n	59a0 <ff_convert+0x24>
    59be:	46c0      	nop			; (mov r8, r8)
    59c0:	00007434 	.word	0x00007434

000059c4 <ff_wtoupper>:
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
    59c4:	2861      	cmp	r0, #97	; 0x61
    59c6:	d014      	beq.n	59f2 <ff_wtoupper+0x2e>
    59c8:	4b0b      	ldr	r3, [pc, #44]	; (59f8 <ff_wtoupper+0x34>)
    59ca:	3304      	adds	r3, #4
    59cc:	2101      	movs	r1, #1
    59ce:	2262      	movs	r2, #98	; 0x62
    59d0:	4290      	cmp	r0, r2
    59d2:	d007      	beq.n	59e4 <ff_wtoupper+0x20>
    59d4:	3101      	adds	r1, #1
    59d6:	3302      	adds	r3, #2
    59d8:	1e9a      	subs	r2, r3, #2
    59da:	8812      	ldrh	r2, [r2, #0]
    59dc:	2a00      	cmp	r2, #0
    59de:	d1f7      	bne.n	59d0 <ff_wtoupper+0xc>

	return tbl_lower[i] ? tbl_upper[i] : chr;
    59e0:	0003      	movs	r3, r0
    59e2:	e004      	b.n	59ee <ff_wtoupper+0x2a>
    59e4:	1e03      	subs	r3, r0, #0
    59e6:	d002      	beq.n	59ee <ff_wtoupper+0x2a>
    59e8:	0049      	lsls	r1, r1, #1
    59ea:	4b04      	ldr	r3, [pc, #16]	; (59fc <ff_wtoupper+0x38>)
    59ec:	5acb      	ldrh	r3, [r1, r3]
}
    59ee:	0018      	movs	r0, r3
    59f0:	4770      	bx	lr
	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
    59f2:	2100      	movs	r1, #0
    59f4:	e7f8      	b.n	59e8 <ff_wtoupper+0x24>
    59f6:	46c0      	nop			; (mov r8, r8)
    59f8:	00007534 	.word	0x00007534
    59fc:	00007714 	.word	0x00007714

00005a00 <write_bin_file>:
	SerialConsoleWriteString(helpStr);
}



void write_bin_file(char test_bin_file[]){
    5a00:	b5f0      	push	{r4, r5, r6, r7, lr}
    5a02:	b0c3      	sub	sp, #268	; 0x10c
    5a04:	0004      	movs	r4, r0
	uint32_t row = 0;
	uint8_t readBuffer[256];
	uint32_t Cur_App_Address=0;
	fr = f_stat(test_bin_file, &fno);
    5a06:	4954      	ldr	r1, [pc, #336]	; (5b58 <write_bin_file+0x158>)
    5a08:	4b54      	ldr	r3, [pc, #336]	; (5b5c <write_bin_file+0x15c>)
    5a0a:	4798      	blx	r3
    5a0c:	4a54      	ldr	r2, [pc, #336]	; (5b60 <write_bin_file+0x160>)
    5a0e:	7010      	strb	r0, [r2, #0]
	switch (fr) {
    5a10:	2800      	cmp	r0, #0
    5a12:	d006      	beq.n	5a22 <write_bin_file+0x22>
    5a14:	2804      	cmp	r0, #4
    5a16:	d100      	bne.n	5a1a <write_bin_file+0x1a>
    5a18:	e099      	b.n	5b4e <write_bin_file+0x14e>
		case FR_NO_FILE:
		SerialConsoleWriteString("It is not exist. \r\n");
		break;

		default:
		SerialConsoleWriteString("An error occured. \r\n");
    5a1a:	4852      	ldr	r0, [pc, #328]	; (5b64 <write_bin_file+0x164>)
    5a1c:	4b52      	ldr	r3, [pc, #328]	; (5b68 <write_bin_file+0x168>)
    5a1e:	4798      	blx	r3
		break;
	}
	
}
    5a20:	e098      	b.n	5b54 <write_bin_file+0x154>
		row = fno.fsize/256;
    5a22:	4b4d      	ldr	r3, [pc, #308]	; (5b58 <write_bin_file+0x158>)
    5a24:	681d      	ldr	r5, [r3, #0]
		snprintf(helpStr, 63,"Size: %lu \r\n", fno.fsize);
    5a26:	4e51      	ldr	r6, [pc, #324]	; (5b6c <write_bin_file+0x16c>)
    5a28:	002b      	movs	r3, r5
    5a2a:	4a51      	ldr	r2, [pc, #324]	; (5b70 <write_bin_file+0x170>)
    5a2c:	213f      	movs	r1, #63	; 0x3f
    5a2e:	0030      	movs	r0, r6
    5a30:	4f50      	ldr	r7, [pc, #320]	; (5b74 <write_bin_file+0x174>)
    5a32:	47b8      	blx	r7
		SerialConsoleWriteString(helpStr);
    5a34:	0030      	movs	r0, r6
    5a36:	4b4c      	ldr	r3, [pc, #304]	; (5b68 <write_bin_file+0x168>)
    5a38:	4798      	blx	r3
		for (uint32_t current_row=0; current_row<row; current_row++)
    5a3a:	2dff      	cmp	r5, #255	; 0xff
    5a3c:	d800      	bhi.n	5a40 <write_bin_file+0x40>
    5a3e:	e089      	b.n	5b54 <write_bin_file+0x154>
			enum status_code nvmError = nvm_erase_row(Cur_App_Address);
    5a40:	2090      	movs	r0, #144	; 0x90
    5a42:	0240      	lsls	r0, r0, #9
    5a44:	4b4c      	ldr	r3, [pc, #304]	; (5b78 <write_bin_file+0x178>)
    5a46:	4798      	blx	r3
			if(nvmError != STATUS_OK)
    5a48:	2800      	cmp	r0, #0
    5a4a:	d10d      	bne.n	5a68 <write_bin_file+0x68>
				if(*a != 0xFF)
    5a4c:	2390      	movs	r3, #144	; 0x90
    5a4e:	025b      	lsls	r3, r3, #9
    5a50:	781b      	ldrb	r3, [r3, #0]
    5a52:	2bff      	cmp	r3, #255	; 0xff
    5a54:	d10c      	bne.n	5a70 <write_bin_file+0x70>
    5a56:	4b49      	ldr	r3, [pc, #292]	; (5b7c <write_bin_file+0x17c>)
			for(int iter = 0; iter < 256; iter++)
    5a58:	4949      	ldr	r1, [pc, #292]	; (5b80 <write_bin_file+0x180>)
				if(*a != 0xFF)
    5a5a:	781a      	ldrb	r2, [r3, #0]
    5a5c:	2aff      	cmp	r2, #255	; 0xff
    5a5e:	d107      	bne.n	5a70 <write_bin_file+0x70>
    5a60:	3301      	adds	r3, #1
			for(int iter = 0; iter < 256; iter++)
    5a62:	428b      	cmp	r3, r1
    5a64:	d1f9      	bne.n	5a5a <write_bin_file+0x5a>
    5a66:	e006      	b.n	5a76 <write_bin_file+0x76>
				SerialConsoleWriteString("Erase error");
    5a68:	4846      	ldr	r0, [pc, #280]	; (5b84 <write_bin_file+0x184>)
    5a6a:	4b3f      	ldr	r3, [pc, #252]	; (5b68 <write_bin_file+0x168>)
    5a6c:	4798      	blx	r3
    5a6e:	e7ed      	b.n	5a4c <write_bin_file+0x4c>
					SerialConsoleWriteString("Error - test page is not erased!");
    5a70:	4845      	ldr	r0, [pc, #276]	; (5b88 <write_bin_file+0x188>)
    5a72:	4b3d      	ldr	r3, [pc, #244]	; (5b68 <write_bin_file+0x168>)
    5a74:	4798      	blx	r3
			numBytesRead = 0;
    5a76:	2200      	movs	r2, #0
    5a78:	4b44      	ldr	r3, [pc, #272]	; (5b8c <write_bin_file+0x18c>)
    5a7a:	601a      	str	r2, [r3, #0]
			res = f_open(&file_object, test_bin_file, FA_READ);
    5a7c:	3201      	adds	r2, #1
    5a7e:	0021      	movs	r1, r4
    5a80:	4843      	ldr	r0, [pc, #268]	; (5b90 <write_bin_file+0x190>)
    5a82:	4b44      	ldr	r3, [pc, #272]	; (5b94 <write_bin_file+0x194>)
    5a84:	4798      	blx	r3
    5a86:	4b44      	ldr	r3, [pc, #272]	; (5b98 <write_bin_file+0x198>)
    5a88:	7018      	strb	r0, [r3, #0]
			if (res != FR_OK)
    5a8a:	2800      	cmp	r0, #0
    5a8c:	d153      	bne.n	5b36 <write_bin_file+0x136>
				if(*a != 0xFF)
    5a8e:	2500      	movs	r5, #0
    5a90:	2480      	movs	r4, #128	; 0x80
    5a92:	0064      	lsls	r4, r4, #1
				res = f_read(&file_object, &readBuffer[numberBytesTotal], numBytesLeft, &numBytesRead); //Question to students: What is numBytesRead? What are we doing here?
    5a94:	4f3d      	ldr	r7, [pc, #244]	; (5b8c <write_bin_file+0x18c>)
    5a96:	4e41      	ldr	r6, [pc, #260]	; (5b9c <write_bin_file+0x19c>)
    5a98:	ab02      	add	r3, sp, #8
    5a9a:	1959      	adds	r1, r3, r5
    5a9c:	003b      	movs	r3, r7
    5a9e:	0022      	movs	r2, r4
    5aa0:	483b      	ldr	r0, [pc, #236]	; (5b90 <write_bin_file+0x190>)
    5aa2:	47b0      	blx	r6
    5aa4:	4b3c      	ldr	r3, [pc, #240]	; (5b98 <write_bin_file+0x198>)
    5aa6:	7018      	strb	r0, [r3, #0]
				numBytesLeft -= numBytesRead;
    5aa8:	683b      	ldr	r3, [r7, #0]
    5aaa:	1ae4      	subs	r4, r4, r3
				numberBytesTotal += numBytesRead;
    5aac:	195d      	adds	r5, r3, r5
			while(numBytesLeft  != 0)
    5aae:	2c00      	cmp	r4, #0
    5ab0:	d1f2      	bne.n	5a98 <write_bin_file+0x98>
			res = nvm_write_buffer (Cur_App_Address, &readBuffer[0], 64);
    5ab2:	2240      	movs	r2, #64	; 0x40
    5ab4:	a902      	add	r1, sp, #8
    5ab6:	2090      	movs	r0, #144	; 0x90
    5ab8:	0240      	lsls	r0, r0, #9
    5aba:	4d39      	ldr	r5, [pc, #228]	; (5ba0 <write_bin_file+0x1a0>)
    5abc:	47a8      	blx	r5
    5abe:	4c36      	ldr	r4, [pc, #216]	; (5b98 <write_bin_file+0x198>)
    5ac0:	7020      	strb	r0, [r4, #0]
			res = nvm_write_buffer (Cur_App_Address+ 64, &readBuffer[64], 64);
    5ac2:	2240      	movs	r2, #64	; 0x40
    5ac4:	a912      	add	r1, sp, #72	; 0x48
    5ac6:	4837      	ldr	r0, [pc, #220]	; (5ba4 <write_bin_file+0x1a4>)
    5ac8:	47a8      	blx	r5
    5aca:	7020      	strb	r0, [r4, #0]
			res = nvm_write_buffer (Cur_App_Address+ 128, &readBuffer[128], 64);
    5acc:	2240      	movs	r2, #64	; 0x40
    5ace:	a922      	add	r1, sp, #136	; 0x88
    5ad0:	4835      	ldr	r0, [pc, #212]	; (5ba8 <write_bin_file+0x1a8>)
    5ad2:	47a8      	blx	r5
    5ad4:	7020      	strb	r0, [r4, #0]
			res = nvm_write_buffer (Cur_App_Address+ 192, &readBuffer[192], 64);
    5ad6:	2240      	movs	r2, #64	; 0x40
    5ad8:	a932      	add	r1, sp, #200	; 0xc8
    5ada:	4834      	ldr	r0, [pc, #208]	; (5bac <write_bin_file+0x1ac>)
    5adc:	47a8      	blx	r5
    5ade:	7020      	strb	r0, [r4, #0]
			if (res != FR_OK)
    5ae0:	2800      	cmp	r0, #0
    5ae2:	d12c      	bne.n	5b3e <write_bin_file+0x13e>
			uint32_t resultCrcSd = 0;
    5ae4:	2700      	movs	r7, #0
    5ae6:	9700      	str	r7, [sp, #0]
			*((volatile unsigned int*) 0x41007058) &= ~0x30000UL;
    5ae8:	4d31      	ldr	r5, [pc, #196]	; (5bb0 <write_bin_file+0x1b0>)
    5aea:	682b      	ldr	r3, [r5, #0]
    5aec:	4a31      	ldr	r2, [pc, #196]	; (5bb4 <write_bin_file+0x1b4>)
    5aee:	4013      	ands	r3, r2
    5af0:	602b      	str	r3, [r5, #0]
			enum status_code crcres = dsu_crc32_cal	(readBuffer	,256, &resultCrcSd); //Instructor note: Was it the third parameter used for? Please check how you can use the third parameter to do the CRC of a long data stream in chunks - you will need it!
    5af2:	466a      	mov	r2, sp
    5af4:	2180      	movs	r1, #128	; 0x80
    5af6:	0049      	lsls	r1, r1, #1
    5af8:	a802      	add	r0, sp, #8
    5afa:	4e2f      	ldr	r6, [pc, #188]	; (5bb8 <write_bin_file+0x1b8>)
    5afc:	47b0      	blx	r6
    5afe:	0004      	movs	r4, r0
			*((volatile unsigned int*) 0x41007058) |= 0x20000UL;
    5b00:	682a      	ldr	r2, [r5, #0]
    5b02:	2380      	movs	r3, #128	; 0x80
    5b04:	029b      	lsls	r3, r3, #10
    5b06:	4313      	orrs	r3, r2
    5b08:	602b      	str	r3, [r5, #0]
			uint32_t resultCrcNvm = 0;
    5b0a:	9701      	str	r7, [sp, #4]
			crcres |= dsu_crc32_cal	((uint32_t)Cur_App_Address,256, &resultCrcNvm);
    5b0c:	aa01      	add	r2, sp, #4
    5b0e:	2180      	movs	r1, #128	; 0x80
    5b10:	0049      	lsls	r1, r1, #1
    5b12:	2090      	movs	r0, #144	; 0x90
    5b14:	0240      	lsls	r0, r0, #9
    5b16:	47b0      	blx	r6
    5b18:	4304      	orrs	r4, r0
			if (crcres != STATUS_OK)
    5b1a:	b2e4      	uxtb	r4, r4
    5b1c:	2c00      	cmp	r4, #0
    5b1e:	d112      	bne.n	5b46 <write_bin_file+0x146>
			else if(resultCrcNvm!=resultCrcSd){
    5b20:	9b01      	ldr	r3, [sp, #4]
    5b22:	9a00      	ldr	r2, [sp, #0]
    5b24:	4293      	cmp	r3, r2
    5b26:	d002      	beq.n	5b2e <write_bin_file+0x12e>
				SerialConsoleWriteString("CRC ERROR!!\r\n");
    5b28:	4824      	ldr	r0, [pc, #144]	; (5bbc <write_bin_file+0x1bc>)
    5b2a:	4b0f      	ldr	r3, [pc, #60]	; (5b68 <write_bin_file+0x168>)
    5b2c:	4798      	blx	r3
			f_close(&file_object);
    5b2e:	4818      	ldr	r0, [pc, #96]	; (5b90 <write_bin_file+0x190>)
    5b30:	4b23      	ldr	r3, [pc, #140]	; (5bc0 <write_bin_file+0x1c0>)
    5b32:	4798      	blx	r3
    5b34:	e00e      	b.n	5b54 <write_bin_file+0x154>
				SerialConsoleWriteString("Could not open test file!\r\n");
    5b36:	4823      	ldr	r0, [pc, #140]	; (5bc4 <write_bin_file+0x1c4>)
    5b38:	4b0b      	ldr	r3, [pc, #44]	; (5b68 <write_bin_file+0x168>)
    5b3a:	4798      	blx	r3
    5b3c:	e7a7      	b.n	5a8e <write_bin_file+0x8e>
				SerialConsoleWriteString("Test write to NVM failed!\r\n");
    5b3e:	4822      	ldr	r0, [pc, #136]	; (5bc8 <write_bin_file+0x1c8>)
    5b40:	4b09      	ldr	r3, [pc, #36]	; (5b68 <write_bin_file+0x168>)
    5b42:	4798      	blx	r3
    5b44:	e7ce      	b.n	5ae4 <write_bin_file+0xe4>
				SerialConsoleWriteString("Could not calculate CRC!!\r\n");
    5b46:	4821      	ldr	r0, [pc, #132]	; (5bcc <write_bin_file+0x1cc>)
    5b48:	4b07      	ldr	r3, [pc, #28]	; (5b68 <write_bin_file+0x168>)
    5b4a:	4798      	blx	r3
    5b4c:	e7ef      	b.n	5b2e <write_bin_file+0x12e>
		SerialConsoleWriteString("It is not exist. \r\n");
    5b4e:	4820      	ldr	r0, [pc, #128]	; (5bd0 <write_bin_file+0x1d0>)
    5b50:	4b05      	ldr	r3, [pc, #20]	; (5b68 <write_bin_file+0x168>)
    5b52:	4798      	blx	r3
}
    5b54:	b043      	add	sp, #268	; 0x10c
    5b56:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5b58:	20000a40 	.word	0x20000a40
    5b5c:	000057f1 	.word	0x000057f1
    5b60:	20000de8 	.word	0x20000de8
    5b64:	00007c68 	.word	0x00007c68
    5b68:	000008d1 	.word	0x000008d1
    5b6c:	20000dec 	.word	0x20000dec
    5b70:	00007bb0 	.word	0x00007bb0
    5b74:	000065bd 	.word	0x000065bd
    5b78:	0000043d 	.word	0x0000043d
    5b7c:	00012001 	.word	0x00012001
    5b80:	00012100 	.word	0x00012100
    5b84:	00007bc0 	.word	0x00007bc0
    5b88:	00007bcc 	.word	0x00007bcc
    5b8c:	200001bc 	.word	0x200001bc
    5b90:	20000c90 	.word	0x20000c90
    5b94:	000051d9 	.word	0x000051d9
    5b98:	20000de9 	.word	0x20000de9
    5b9c:	00005361 	.word	0x00005361
    5ba0:	00000395 	.word	0x00000395
    5ba4:	00012040 	.word	0x00012040
    5ba8:	00012080 	.word	0x00012080
    5bac:	000120c0 	.word	0x000120c0
    5bb0:	41007058 	.word	0x41007058
    5bb4:	fffcffff 	.word	0xfffcffff
    5bb8:	000001d5 	.word	0x000001d5
    5bbc:	00007c44 	.word	0x00007c44
    5bc0:	000057d9 	.word	0x000057d9
    5bc4:	00007bf0 	.word	0x00007bf0
    5bc8:	00007c0c 	.word	0x00007c0c
    5bcc:	00007c28 	.word	0x00007c28
    5bd0:	00007c54 	.word	0x00007c54

00005bd4 <main>:
{
    5bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    5bd6:	b0c7      	sub	sp, #284	; 0x11c
    5bd8:	af02      	add	r7, sp, #8
	system_init();
    5bda:	4b9a      	ldr	r3, [pc, #616]	; (5e44 <main+0x270>)
    5bdc:	4798      	blx	r3
	delay_init();
    5bde:	4b9a      	ldr	r3, [pc, #616]	; (5e48 <main+0x274>)
    5be0:	4798      	blx	r3
	InitializeSerialConsole();
    5be2:	4b9a      	ldr	r3, [pc, #616]	; (5e4c <main+0x278>)
    5be4:	4798      	blx	r3
	cpu_irq_enable();
    5be6:	4c9a      	ldr	r4, [pc, #616]	; (5e50 <main+0x27c>)
    5be8:	2501      	movs	r5, #1
    5bea:	7025      	strb	r5, [r4, #0]
    5bec:	f3bf 8f5f 	dmb	sy
    5bf0:	b662      	cpsie	i
	sd_mmc_init();
    5bf2:	4b98      	ldr	r3, [pc, #608]	; (5e54 <main+0x280>)
    5bf4:	4798      	blx	r3
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    5bf6:	2310      	movs	r3, #16
    5bf8:	18fb      	adds	r3, r7, r3
    5bfa:	2100      	movs	r1, #0
    5bfc:	7019      	strb	r1, [r3, #0]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    5bfe:	4a96      	ldr	r2, [pc, #600]	; (5e58 <main+0x284>)
    5c00:	6852      	ldr	r2, [r2, #4]
    5c02:	06d2      	lsls	r2, r2, #27
    5c04:	0f12      	lsrs	r2, r2, #28
    5c06:	709a      	strb	r2, [r3, #2]
	config->disable_cache     = false;
    5c08:	70d9      	strb	r1, [r3, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    5c0a:	7119      	strb	r1, [r3, #4]
******************************************************************************/
static void configure_nvm(void)
{
    struct nvm_config config_nvm;
    nvm_get_config_defaults(&config_nvm);
    config_nvm.manual_page_write = false;
    5c0c:	7059      	strb	r1, [r3, #1]
    nvm_set_config(&config_nvm);
    5c0e:	2310      	movs	r3, #16
    5c10:	18f8      	adds	r0, r7, r3
    5c12:	4b92      	ldr	r3, [pc, #584]	; (5e5c <main+0x288>)
    5c14:	4798      	blx	r3
	cpu_irq_enable();
    5c16:	7025      	strb	r5, [r4, #0]
    5c18:	f3bf 8f5f 	dmb	sy
    5c1c:	b662      	cpsie	i
			PM->APBBMASK.reg |= mask;
    5c1e:	4a90      	ldr	r2, [pc, #576]	; (5e60 <main+0x28c>)
    5c20:	69d3      	ldr	r3, [r2, #28]
    5c22:	2102      	movs	r1, #2
    5c24:	430b      	orrs	r3, r1
    5c26:	61d3      	str	r3, [r2, #28]
	SerialConsoleWriteString("ESE516 - ENTER BOOTLOADER");	//Order to add string to TX Buffer
    5c28:	488e      	ldr	r0, [pc, #568]	; (5e64 <main+0x290>)
    5c2a:	4c8f      	ldr	r4, [pc, #572]	; (5e68 <main+0x294>)
    5c2c:	47a0      	blx	r4
	SerialConsoleWriteString("\x0C\n\r-- SD/MMC Card Example on FatFs --\n\r");
    5c2e:	488f      	ldr	r0, [pc, #572]	; (5e6c <main+0x298>)
    5c30:	47a0      	blx	r4
	for(int i = 0; i < 256; i++)
    5c32:	2300      	movs	r3, #0
		binbuff[i] = i;
    5c34:	2210      	movs	r2, #16
    5c36:	18b9      	adds	r1, r7, r2
	for(int i = 0; i < 256; i++)
    5c38:	32f0      	adds	r2, #240	; 0xf0
		binbuff[i] = i;
    5c3a:	545b      	strb	r3, [r3, r1]
	for(int i = 0; i < 256; i++)
    5c3c:	3301      	adds	r3, #1
    5c3e:	4293      	cmp	r3, r2
    5c40:	d1fb      	bne.n	5c3a <main+0x66>
	Ctrl_status sdStatus= SdCard_Initiate();
    5c42:	4b8b      	ldr	r3, [pc, #556]	; (5e70 <main+0x29c>)
    5c44:	4798      	blx	r3
	if(sdStatus == CTRL_GOOD) //If the SD card is good we continue mounting the system!
    5c46:	2800      	cmp	r0, #0
    5c48:	d000      	beq.n	5c4c <main+0x78>
    5c4a:	e0bb      	b.n	5dc4 <main+0x1f0>
		SerialConsoleWriteString("SD Card initiated correctly!\n\r");
    5c4c:	4889      	ldr	r0, [pc, #548]	; (5e74 <main+0x2a0>)
    5c4e:	4c86      	ldr	r4, [pc, #536]	; (5e68 <main+0x294>)
    5c50:	47a0      	blx	r4
		SerialConsoleWriteString("Mount disk (f_mount)...\r\n");
    5c52:	4889      	ldr	r0, [pc, #548]	; (5e78 <main+0x2a4>)
    5c54:	47a0      	blx	r4
		memset(&fs, 0, sizeof(FATFS));
    5c56:	4c89      	ldr	r4, [pc, #548]	; (5e7c <main+0x2a8>)
    5c58:	228c      	movs	r2, #140	; 0x8c
    5c5a:	0092      	lsls	r2, r2, #2
    5c5c:	2100      	movs	r1, #0
    5c5e:	0020      	movs	r0, r4
    5c60:	4b87      	ldr	r3, [pc, #540]	; (5e80 <main+0x2ac>)
    5c62:	4798      	blx	r3
		res = f_mount(LUN_ID_SD_MMC_0_MEM, &fs); //Order FATFS Mount
    5c64:	0021      	movs	r1, r4
    5c66:	2000      	movs	r0, #0
    5c68:	4b86      	ldr	r3, [pc, #536]	; (5e84 <main+0x2b0>)
    5c6a:	4798      	blx	r3
    5c6c:	4b86      	ldr	r3, [pc, #536]	; (5e88 <main+0x2b4>)
    5c6e:	7018      	strb	r0, [r3, #0]
		if (FR_INVALID_DRIVE == res)
    5c70:	280b      	cmp	r0, #11
    5c72:	d018      	beq.n	5ca6 <main+0xd2>
		SerialConsoleWriteString("[OK]\r\n");
    5c74:	4885      	ldr	r0, [pc, #532]	; (5e8c <main+0x2b8>)
    5c76:	4c7c      	ldr	r4, [pc, #496]	; (5e68 <main+0x294>)
    5c78:	47a0      	blx	r4
		SerialConsoleWriteString("Create a file (f_open)...\r\n");
    5c7a:	4885      	ldr	r0, [pc, #532]	; (5e90 <main+0x2bc>)
    5c7c:	47a0      	blx	r4
		test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
    5c7e:	4985      	ldr	r1, [pc, #532]	; (5e94 <main+0x2c0>)
    5c80:	2330      	movs	r3, #48	; 0x30
    5c82:	700b      	strb	r3, [r1, #0]
		res = f_open(&file_object,
    5c84:	220a      	movs	r2, #10
    5c86:	4884      	ldr	r0, [pc, #528]	; (5e98 <main+0x2c4>)
    5c88:	4b84      	ldr	r3, [pc, #528]	; (5e9c <main+0x2c8>)
    5c8a:	4798      	blx	r3
    5c8c:	4b7e      	ldr	r3, [pc, #504]	; (5e88 <main+0x2b4>)
    5c8e:	7018      	strb	r0, [r3, #0]
		if (res != FR_OK)
    5c90:	2800      	cmp	r0, #0
    5c92:	d00e      	beq.n	5cb2 <main+0xde>
			LogMessage(LOG_INFO_LVL ,"[FAIL] res %d\r\n", res);
    5c94:	0002      	movs	r2, r0
    5c96:	4982      	ldr	r1, [pc, #520]	; (5ea0 <main+0x2cc>)
    5c98:	2000      	movs	r0, #0
    5c9a:	4b82      	ldr	r3, [pc, #520]	; (5ea4 <main+0x2d0>)
    5c9c:	4798      	blx	r3
		SerialConsoleWriteString("End of Test.\n\r");
    5c9e:	4882      	ldr	r0, [pc, #520]	; (5ea8 <main+0x2d4>)
    5ca0:	4b71      	ldr	r3, [pc, #452]	; (5e68 <main+0x294>)
    5ca2:	4798      	blx	r3
    5ca4:	e091      	b.n	5dca <main+0x1f6>
			LogMessage(LOG_INFO_LVL ,"[FAIL] res %d\r\n", res);
    5ca6:	220b      	movs	r2, #11
    5ca8:	497d      	ldr	r1, [pc, #500]	; (5ea0 <main+0x2cc>)
    5caa:	2000      	movs	r0, #0
    5cac:	4b7d      	ldr	r3, [pc, #500]	; (5ea4 <main+0x2d0>)
    5cae:	4798      	blx	r3
    5cb0:	e7f5      	b.n	5c9e <main+0xca>
		SerialConsoleWriteString("[OK]\r\n");
    5cb2:	4876      	ldr	r0, [pc, #472]	; (5e8c <main+0x2b8>)
    5cb4:	4c6c      	ldr	r4, [pc, #432]	; (5e68 <main+0x294>)
    5cb6:	47a0      	blx	r4
		SerialConsoleWriteString("Write to test file (f_puts)...\r\n");
    5cb8:	487c      	ldr	r0, [pc, #496]	; (5eac <main+0x2d8>)
    5cba:	47a0      	blx	r4
		if (0 == f_puts("Test SD/MMC stack\n", &file_object))
    5cbc:	4976      	ldr	r1, [pc, #472]	; (5e98 <main+0x2c4>)
    5cbe:	487c      	ldr	r0, [pc, #496]	; (5eb0 <main+0x2dc>)
    5cc0:	4b7c      	ldr	r3, [pc, #496]	; (5eb4 <main+0x2e0>)
    5cc2:	4798      	blx	r3
    5cc4:	2800      	cmp	r0, #0
    5cc6:	d107      	bne.n	5cd8 <main+0x104>
			f_close(&file_object);
    5cc8:	4873      	ldr	r0, [pc, #460]	; (5e98 <main+0x2c4>)
    5cca:	4b7b      	ldr	r3, [pc, #492]	; (5eb8 <main+0x2e4>)
    5ccc:	4798      	blx	r3
			LogMessage(LOG_INFO_LVL ,"[FAIL]\r\n");
    5cce:	497b      	ldr	r1, [pc, #492]	; (5ebc <main+0x2e8>)
    5cd0:	2000      	movs	r0, #0
    5cd2:	4b74      	ldr	r3, [pc, #464]	; (5ea4 <main+0x2d0>)
    5cd4:	4798      	blx	r3
    5cd6:	e7e2      	b.n	5c9e <main+0xca>
		SerialConsoleWriteString("[OK]\r\n");
    5cd8:	486c      	ldr	r0, [pc, #432]	; (5e8c <main+0x2b8>)
    5cda:	4d63      	ldr	r5, [pc, #396]	; (5e68 <main+0x294>)
    5cdc:	47a8      	blx	r5
		f_close(&file_object); //Close file
    5cde:	4c6e      	ldr	r4, [pc, #440]	; (5e98 <main+0x2c4>)
    5ce0:	0020      	movs	r0, r4
    5ce2:	4b75      	ldr	r3, [pc, #468]	; (5eb8 <main+0x2e4>)
    5ce4:	4798      	blx	r3
		SerialConsoleWriteString("Test is successful.\n\r");
    5ce6:	4876      	ldr	r0, [pc, #472]	; (5ec0 <main+0x2ec>)
    5ce8:	47a8      	blx	r5
		test_bin_file[0] = LUN_ID_SD_MMC_0_MEM + '0';
    5cea:	4976      	ldr	r1, [pc, #472]	; (5ec4 <main+0x2f0>)
    5cec:	2330      	movs	r3, #48	; 0x30
    5cee:	700b      	strb	r3, [r1, #0]
		res = f_open(&file_object, (char const *)test_bin_file, FA_WRITE | FA_CREATE_ALWAYS);
    5cf0:	220a      	movs	r2, #10
    5cf2:	0020      	movs	r0, r4
    5cf4:	4b69      	ldr	r3, [pc, #420]	; (5e9c <main+0x2c8>)
    5cf6:	4798      	blx	r3
    5cf8:	4b63      	ldr	r3, [pc, #396]	; (5e88 <main+0x2b4>)
    5cfa:	7018      	strb	r0, [r3, #0]
		if (res != FR_OK)
    5cfc:	2800      	cmp	r0, #0
    5cfe:	d009      	beq.n	5d14 <main+0x140>
			SerialConsoleWriteString("Could not open binary file!\r\n");
    5d00:	4871      	ldr	r0, [pc, #452]	; (5ec8 <main+0x2f4>)
    5d02:	4b59      	ldr	r3, [pc, #356]	; (5e68 <main+0x294>)
    5d04:	4798      	blx	r3
			LogMessage(LOG_INFO_LVL ,"[FAIL] res %d\r\n", res);
    5d06:	4b60      	ldr	r3, [pc, #384]	; (5e88 <main+0x2b4>)
    5d08:	781a      	ldrb	r2, [r3, #0]
    5d0a:	4965      	ldr	r1, [pc, #404]	; (5ea0 <main+0x2cc>)
    5d0c:	2000      	movs	r0, #0
    5d0e:	4b65      	ldr	r3, [pc, #404]	; (5ea4 <main+0x2d0>)
    5d10:	4798      	blx	r3
    5d12:	e7c4      	b.n	5c9e <main+0xca>
		SerialConsoleWriteString("Write to test file (f_write)...\r\n");
    5d14:	486d      	ldr	r0, [pc, #436]	; (5ecc <main+0x2f8>)
    5d16:	4b54      	ldr	r3, [pc, #336]	; (5e68 <main+0x294>)
    5d18:	4798      	blx	r3
		uint32_t varWrite = 0;
    5d1a:	2300      	movs	r3, #0
    5d1c:	607b      	str	r3, [r7, #4]
		if (0 != f_write(&file_object, binbuff,256, &varWrite))
    5d1e:	1d3b      	adds	r3, r7, #4
    5d20:	2280      	movs	r2, #128	; 0x80
    5d22:	0052      	lsls	r2, r2, #1
    5d24:	2110      	movs	r1, #16
    5d26:	1879      	adds	r1, r7, r1
    5d28:	485b      	ldr	r0, [pc, #364]	; (5e98 <main+0x2c4>)
    5d2a:	4c69      	ldr	r4, [pc, #420]	; (5ed0 <main+0x2fc>)
    5d2c:	47a0      	blx	r4
    5d2e:	2800      	cmp	r0, #0
    5d30:	d007      	beq.n	5d42 <main+0x16e>
			f_close(&file_object);
    5d32:	4859      	ldr	r0, [pc, #356]	; (5e98 <main+0x2c4>)
    5d34:	4b60      	ldr	r3, [pc, #384]	; (5eb8 <main+0x2e4>)
    5d36:	4798      	blx	r3
			LogMessage(LOG_INFO_LVL ,"[FAIL]\r\n");
    5d38:	4960      	ldr	r1, [pc, #384]	; (5ebc <main+0x2e8>)
    5d3a:	2000      	movs	r0, #0
    5d3c:	4b59      	ldr	r3, [pc, #356]	; (5ea4 <main+0x2d0>)
    5d3e:	4798      	blx	r3
    5d40:	e7ad      	b.n	5c9e <main+0xca>
		SerialConsoleWriteString("[OK]\r\n");
    5d42:	4852      	ldr	r0, [pc, #328]	; (5e8c <main+0x2b8>)
    5d44:	4c48      	ldr	r4, [pc, #288]	; (5e68 <main+0x294>)
    5d46:	47a0      	blx	r4
		f_close(&file_object); //Close file
    5d48:	4d53      	ldr	r5, [pc, #332]	; (5e98 <main+0x2c4>)
    5d4a:	0028      	movs	r0, r5
    5d4c:	4b5a      	ldr	r3, [pc, #360]	; (5eb8 <main+0x2e4>)
    5d4e:	4798      	blx	r3
		SerialConsoleWriteString("Test is successful.\n\r");
    5d50:	485b      	ldr	r0, [pc, #364]	; (5ec0 <main+0x2ec>)
    5d52:	47a0      	blx	r4
		SerialConsoleWriteString("End of Test.\n\r");
    5d54:	4854      	ldr	r0, [pc, #336]	; (5ea8 <main+0x2d4>)
    5d56:	47a0      	blx	r4
		SerialConsoleWriteString("SD CARD mount success! Filesystem also mounted. \r\n");
    5d58:	485e      	ldr	r0, [pc, #376]	; (5ed4 <main+0x300>)
    5d5a:	47a0      	blx	r4
	nvm_get_parameters (&parameters); //Get NVM parameters
    5d5c:	1d38      	adds	r0, r7, #4
    5d5e:	4b5e      	ldr	r3, [pc, #376]	; (5ed8 <main+0x304>)
    5d60:	4798      	blx	r3
	snprintf(helpStr, 63,"NVM Info: Number of Pages %d. Size of a page: %d bytes. \r\n", parameters.nvm_number_of_pages, parameters.page_size);
    5d62:	88fb      	ldrh	r3, [r7, #6]
    5d64:	793a      	ldrb	r2, [r7, #4]
    5d66:	9200      	str	r2, [sp, #0]
    5d68:	4a5c      	ldr	r2, [pc, #368]	; (5edc <main+0x308>)
    5d6a:	213f      	movs	r1, #63	; 0x3f
    5d6c:	2010      	movs	r0, #16
    5d6e:	1838      	adds	r0, r7, r0
    5d70:	4e5b      	ldr	r6, [pc, #364]	; (5ee0 <main+0x30c>)
    5d72:	47b0      	blx	r6
	SerialConsoleWriteString(helpStr);
    5d74:	2310      	movs	r3, #16
    5d76:	18f8      	adds	r0, r7, r3
    5d78:	47a0      	blx	r4
	if (FR_OK == f_open(&file_object, testA_Flag_File_Name, FA_READ)) {
    5d7a:	2201      	movs	r2, #1
    5d7c:	4959      	ldr	r1, [pc, #356]	; (5ee4 <main+0x310>)
    5d7e:	0028      	movs	r0, r5
    5d80:	4b46      	ldr	r3, [pc, #280]	; (5e9c <main+0x2c8>)
    5d82:	4798      	blx	r3
    5d84:	2800      	cmp	r0, #0
    5d86:	d02e      	beq.n	5de6 <main+0x212>
	else if (FR_OK == f_open(&file_object, testB_Flag_File_Name, FA_READ)) {
    5d88:	2201      	movs	r2, #1
    5d8a:	4957      	ldr	r1, [pc, #348]	; (5ee8 <main+0x314>)
    5d8c:	4842      	ldr	r0, [pc, #264]	; (5e98 <main+0x2c4>)
    5d8e:	4b43      	ldr	r3, [pc, #268]	; (5e9c <main+0x2c8>)
    5d90:	4798      	blx	r3
    5d92:	2800      	cmp	r0, #0
    5d94:	d04a      	beq.n	5e2c <main+0x258>
		SerialConsoleWriteString("Did not find a flag\r\n");
    5d96:	4855      	ldr	r0, [pc, #340]	; (5eec <main+0x318>)
    5d98:	4b33      	ldr	r3, [pc, #204]	; (5e68 <main+0x294>)
    5d9a:	4798      	blx	r3
		FRESULT res = f_open(&file_object,
    5d9c:	4c3e      	ldr	r4, [pc, #248]	; (5e98 <main+0x2c4>)
    5d9e:	220a      	movs	r2, #10
    5da0:	4950      	ldr	r1, [pc, #320]	; (5ee4 <main+0x310>)
    5da2:	0020      	movs	r0, r4
    5da4:	4b3d      	ldr	r3, [pc, #244]	; (5e9c <main+0x2c8>)
    5da6:	4798      	blx	r3
		uint32_t varWrite = 0;
    5da8:	2300      	movs	r3, #0
    5daa:	607b      	str	r3, [r7, #4]
		f_write(&file_object, binbuff,256, &varWrite);
    5dac:	1d3b      	adds	r3, r7, #4
    5dae:	2280      	movs	r2, #128	; 0x80
    5db0:	0052      	lsls	r2, r2, #1
    5db2:	2110      	movs	r1, #16
    5db4:	1879      	adds	r1, r7, r1
    5db6:	0020      	movs	r0, r4
    5db8:	4d45      	ldr	r5, [pc, #276]	; (5ed0 <main+0x2fc>)
    5dba:	47a8      	blx	r5
		f_close(&file_object);
    5dbc:	0020      	movs	r0, r4
    5dbe:	4b3e      	ldr	r3, [pc, #248]	; (5eb8 <main+0x2e4>)
    5dc0:	4798      	blx	r3
    5dc2:	e01b      	b.n	5dfc <main+0x228>
		SerialConsoleWriteString("SD Card failed initiation! Check connections!\n\r");
    5dc4:	484a      	ldr	r0, [pc, #296]	; (5ef0 <main+0x31c>)
    5dc6:	4b28      	ldr	r3, [pc, #160]	; (5e68 <main+0x294>)
    5dc8:	4798      	blx	r3
		SerialConsoleWriteString("SD CARD failed! Check your connections. System will restart in 5 seconds...");
    5dca:	484a      	ldr	r0, [pc, #296]	; (5ef4 <main+0x320>)
    5dcc:	4b26      	ldr	r3, [pc, #152]	; (5e68 <main+0x294>)
    5dce:	4798      	blx	r3
		delay_cycles_ms(5000);
    5dd0:	4849      	ldr	r0, [pc, #292]	; (5ef8 <main+0x324>)
    5dd2:	4b4a      	ldr	r3, [pc, #296]	; (5efc <main+0x328>)
    5dd4:	4798      	blx	r3
  __ASM volatile ("dsb");
    5dd6:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
    5dda:	4a49      	ldr	r2, [pc, #292]	; (5f00 <main+0x32c>)
    5ddc:	4b49      	ldr	r3, [pc, #292]	; (5f04 <main+0x330>)
    5dde:	60da      	str	r2, [r3, #12]
    5de0:	f3bf 8f4f 	dsb	sy
    5de4:	e7fe      	b.n	5de4 <main+0x210>
		SerialConsoleWriteString("Found Flag A\r\n");
    5de6:	4848      	ldr	r0, [pc, #288]	; (5f08 <main+0x334>)
    5de8:	4b1f      	ldr	r3, [pc, #124]	; (5e68 <main+0x294>)
    5dea:	4798      	blx	r3
		write_bin_file(testA_bin_file);
    5dec:	4847      	ldr	r0, [pc, #284]	; (5f0c <main+0x338>)
    5dee:	4b48      	ldr	r3, [pc, #288]	; (5f10 <main+0x33c>)
    5df0:	4798      	blx	r3
		res=f_unlink(testA_Flag_File_Name);
    5df2:	483c      	ldr	r0, [pc, #240]	; (5ee4 <main+0x310>)
    5df4:	4b47      	ldr	r3, [pc, #284]	; (5f14 <main+0x340>)
    5df6:	4798      	blx	r3
    5df8:	4b23      	ldr	r3, [pc, #140]	; (5e88 <main+0x2b4>)
    5dfa:	7018      	strb	r0, [r3, #0]
	SerialConsoleWriteString("ESE516 - EXIT BOOTLOADER");	//Order to add string to TX Buffer
    5dfc:	4846      	ldr	r0, [pc, #280]	; (5f18 <main+0x344>)
    5dfe:	4b1a      	ldr	r3, [pc, #104]	; (5e68 <main+0x294>)
    5e00:	4798      	blx	r3
	delay_cycles_ms(100); //Delay to allow print
    5e02:	2064      	movs	r0, #100	; 0x64
    5e04:	4b3d      	ldr	r3, [pc, #244]	; (5efc <main+0x328>)
    5e06:	4798      	blx	r3
		DeinitializeSerialConsole(); //Deinitializes UART
    5e08:	4b44      	ldr	r3, [pc, #272]	; (5f1c <main+0x348>)
    5e0a:	4798      	blx	r3
		sd_mmc_deinit(); //Deinitialize SD CARD
    5e0c:	4b44      	ldr	r3, [pc, #272]	; (5f20 <main+0x34c>)
    5e0e:	4798      	blx	r3
__set_MSP(*(uint32_t *) APP_START_ADDRESS);
    5e10:	2390      	movs	r3, #144	; 0x90
    5e12:	025b      	lsls	r3, r3, #9
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
    5e14:	681a      	ldr	r2, [r3, #0]
    5e16:	f382 8808 	msr	MSP, r2
SCB->VTOR = ((uint32_t) APP_START_ADDRESS & SCB_VTOR_TBLOFF_Msk);
    5e1a:	4a3a      	ldr	r2, [pc, #232]	; (5f04 <main+0x330>)
    5e1c:	6093      	str	r3, [r2, #8]
(void (*)(void))(unsigned *)(*(unsigned *)(APP_START_RESET_VEC_ADDRESS));
    5e1e:	4b41      	ldr	r3, [pc, #260]	; (5f24 <main+0x350>)
applicationCodeEntry();
    5e20:	681b      	ldr	r3, [r3, #0]
    5e22:	4798      	blx	r3
}
    5e24:	2000      	movs	r0, #0
    5e26:	46bd      	mov	sp, r7
    5e28:	b045      	add	sp, #276	; 0x114
    5e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		SerialConsoleWriteString("Found Flag B\r\n");
    5e2c:	483e      	ldr	r0, [pc, #248]	; (5f28 <main+0x354>)
    5e2e:	4b0e      	ldr	r3, [pc, #56]	; (5e68 <main+0x294>)
    5e30:	4798      	blx	r3
		write_bin_file(testB_bin_file);
    5e32:	483e      	ldr	r0, [pc, #248]	; (5f2c <main+0x358>)
    5e34:	4b36      	ldr	r3, [pc, #216]	; (5f10 <main+0x33c>)
    5e36:	4798      	blx	r3
		res=f_unlink(testB_Flag_File_Name);
    5e38:	482b      	ldr	r0, [pc, #172]	; (5ee8 <main+0x314>)
    5e3a:	4b36      	ldr	r3, [pc, #216]	; (5f14 <main+0x340>)
    5e3c:	4798      	blx	r3
    5e3e:	4b12      	ldr	r3, [pc, #72]	; (5e88 <main+0x2b4>)
    5e40:	7018      	strb	r0, [r3, #0]
    5e42:	e7db      	b.n	5dfc <main+0x228>
    5e44:	000036d1 	.word	0x000036d1
    5e48:	00000115 	.word	0x00000115
    5e4c:	00000731 	.word	0x00000731
    5e50:	20000009 	.word	0x20000009
    5e54:	00000ac5 	.word	0x00000ac5
    5e58:	41004000 	.word	0x41004000
    5e5c:	0000026d 	.word	0x0000026d
    5e60:	40000400 	.word	0x40000400
    5e64:	000078f4 	.word	0x000078f4
    5e68:	000008d1 	.word	0x000008d1
    5e6c:	00007910 	.word	0x00007910
    5e70:	000005b1 	.word	0x000005b1
    5e74:	00007938 	.word	0x00007938
    5e78:	00007958 	.word	0x00007958
    5e7c:	20000a60 	.word	0x20000a60
    5e80:	000062cd 	.word	0x000062cd
    5e84:	000051a9 	.word	0x000051a9
    5e88:	20000de9 	.word	0x20000de9
    5e8c:	00007984 	.word	0x00007984
    5e90:	0000798c 	.word	0x0000798c
    5e94:	20000034 	.word	0x20000034
    5e98:	20000c90 	.word	0x20000c90
    5e9c:	000051d9 	.word	0x000051d9
    5ea0:	00007974 	.word	0x00007974
    5ea4:	00000999 	.word	0x00000999
    5ea8:	00007a48 	.word	0x00007a48
    5eac:	000079a8 	.word	0x000079a8
    5eb0:	000079cc 	.word	0x000079cc
    5eb4:	00005951 	.word	0x00005951
    5eb8:	000057d9 	.word	0x000057d9
    5ebc:	000079e0 	.word	0x000079e0
    5ec0:	000079ec 	.word	0x000079ec
    5ec4:	20000024 	.word	0x20000024
    5ec8:	00007a04 	.word	0x00007a04
    5ecc:	00007a24 	.word	0x00007a24
    5ed0:	00005515 	.word	0x00005515
    5ed4:	00007a58 	.word	0x00007a58
    5ed8:	00000499 	.word	0x00000499
    5edc:	00007a8c 	.word	0x00007a8c
    5ee0:	000065bd 	.word	0x000065bd
    5ee4:	2000000c 	.word	0x2000000c
    5ee8:	20000018 	.word	0x20000018
    5eec:	00007b64 	.word	0x00007b64
    5ef0:	00007ac8 	.word	0x00007ac8
    5ef4:	00007af8 	.word	0x00007af8
    5ef8:	00001388 	.word	0x00001388
    5efc:	00000155 	.word	0x00000155
    5f00:	05fa0004 	.word	0x05fa0004
    5f04:	e000ed00 	.word	0xe000ed00
    5f08:	00007b44 	.word	0x00007b44
    5f0c:	00007b98 	.word	0x00007b98
    5f10:	00005a01 	.word	0x00005a01
    5f14:	0000584d 	.word	0x0000584d
    5f18:	00007b7c 	.word	0x00007b7c
    5f1c:	00000899 	.word	0x00000899
    5f20:	00001549 	.word	0x00001549
    5f24:	00012004 	.word	0x00012004
    5f28:	00007b54 	.word	0x00007b54
    5f2c:	00007ba4 	.word	0x00007ba4

00005f30 <__udivsi3>:
    5f30:	2200      	movs	r2, #0
    5f32:	0843      	lsrs	r3, r0, #1
    5f34:	428b      	cmp	r3, r1
    5f36:	d374      	bcc.n	6022 <__udivsi3+0xf2>
    5f38:	0903      	lsrs	r3, r0, #4
    5f3a:	428b      	cmp	r3, r1
    5f3c:	d35f      	bcc.n	5ffe <__udivsi3+0xce>
    5f3e:	0a03      	lsrs	r3, r0, #8
    5f40:	428b      	cmp	r3, r1
    5f42:	d344      	bcc.n	5fce <__udivsi3+0x9e>
    5f44:	0b03      	lsrs	r3, r0, #12
    5f46:	428b      	cmp	r3, r1
    5f48:	d328      	bcc.n	5f9c <__udivsi3+0x6c>
    5f4a:	0c03      	lsrs	r3, r0, #16
    5f4c:	428b      	cmp	r3, r1
    5f4e:	d30d      	bcc.n	5f6c <__udivsi3+0x3c>
    5f50:	22ff      	movs	r2, #255	; 0xff
    5f52:	0209      	lsls	r1, r1, #8
    5f54:	ba12      	rev	r2, r2
    5f56:	0c03      	lsrs	r3, r0, #16
    5f58:	428b      	cmp	r3, r1
    5f5a:	d302      	bcc.n	5f62 <__udivsi3+0x32>
    5f5c:	1212      	asrs	r2, r2, #8
    5f5e:	0209      	lsls	r1, r1, #8
    5f60:	d065      	beq.n	602e <__udivsi3+0xfe>
    5f62:	0b03      	lsrs	r3, r0, #12
    5f64:	428b      	cmp	r3, r1
    5f66:	d319      	bcc.n	5f9c <__udivsi3+0x6c>
    5f68:	e000      	b.n	5f6c <__udivsi3+0x3c>
    5f6a:	0a09      	lsrs	r1, r1, #8
    5f6c:	0bc3      	lsrs	r3, r0, #15
    5f6e:	428b      	cmp	r3, r1
    5f70:	d301      	bcc.n	5f76 <__udivsi3+0x46>
    5f72:	03cb      	lsls	r3, r1, #15
    5f74:	1ac0      	subs	r0, r0, r3
    5f76:	4152      	adcs	r2, r2
    5f78:	0b83      	lsrs	r3, r0, #14
    5f7a:	428b      	cmp	r3, r1
    5f7c:	d301      	bcc.n	5f82 <__udivsi3+0x52>
    5f7e:	038b      	lsls	r3, r1, #14
    5f80:	1ac0      	subs	r0, r0, r3
    5f82:	4152      	adcs	r2, r2
    5f84:	0b43      	lsrs	r3, r0, #13
    5f86:	428b      	cmp	r3, r1
    5f88:	d301      	bcc.n	5f8e <__udivsi3+0x5e>
    5f8a:	034b      	lsls	r3, r1, #13
    5f8c:	1ac0      	subs	r0, r0, r3
    5f8e:	4152      	adcs	r2, r2
    5f90:	0b03      	lsrs	r3, r0, #12
    5f92:	428b      	cmp	r3, r1
    5f94:	d301      	bcc.n	5f9a <__udivsi3+0x6a>
    5f96:	030b      	lsls	r3, r1, #12
    5f98:	1ac0      	subs	r0, r0, r3
    5f9a:	4152      	adcs	r2, r2
    5f9c:	0ac3      	lsrs	r3, r0, #11
    5f9e:	428b      	cmp	r3, r1
    5fa0:	d301      	bcc.n	5fa6 <__udivsi3+0x76>
    5fa2:	02cb      	lsls	r3, r1, #11
    5fa4:	1ac0      	subs	r0, r0, r3
    5fa6:	4152      	adcs	r2, r2
    5fa8:	0a83      	lsrs	r3, r0, #10
    5faa:	428b      	cmp	r3, r1
    5fac:	d301      	bcc.n	5fb2 <__udivsi3+0x82>
    5fae:	028b      	lsls	r3, r1, #10
    5fb0:	1ac0      	subs	r0, r0, r3
    5fb2:	4152      	adcs	r2, r2
    5fb4:	0a43      	lsrs	r3, r0, #9
    5fb6:	428b      	cmp	r3, r1
    5fb8:	d301      	bcc.n	5fbe <__udivsi3+0x8e>
    5fba:	024b      	lsls	r3, r1, #9
    5fbc:	1ac0      	subs	r0, r0, r3
    5fbe:	4152      	adcs	r2, r2
    5fc0:	0a03      	lsrs	r3, r0, #8
    5fc2:	428b      	cmp	r3, r1
    5fc4:	d301      	bcc.n	5fca <__udivsi3+0x9a>
    5fc6:	020b      	lsls	r3, r1, #8
    5fc8:	1ac0      	subs	r0, r0, r3
    5fca:	4152      	adcs	r2, r2
    5fcc:	d2cd      	bcs.n	5f6a <__udivsi3+0x3a>
    5fce:	09c3      	lsrs	r3, r0, #7
    5fd0:	428b      	cmp	r3, r1
    5fd2:	d301      	bcc.n	5fd8 <__udivsi3+0xa8>
    5fd4:	01cb      	lsls	r3, r1, #7
    5fd6:	1ac0      	subs	r0, r0, r3
    5fd8:	4152      	adcs	r2, r2
    5fda:	0983      	lsrs	r3, r0, #6
    5fdc:	428b      	cmp	r3, r1
    5fde:	d301      	bcc.n	5fe4 <__udivsi3+0xb4>
    5fe0:	018b      	lsls	r3, r1, #6
    5fe2:	1ac0      	subs	r0, r0, r3
    5fe4:	4152      	adcs	r2, r2
    5fe6:	0943      	lsrs	r3, r0, #5
    5fe8:	428b      	cmp	r3, r1
    5fea:	d301      	bcc.n	5ff0 <__udivsi3+0xc0>
    5fec:	014b      	lsls	r3, r1, #5
    5fee:	1ac0      	subs	r0, r0, r3
    5ff0:	4152      	adcs	r2, r2
    5ff2:	0903      	lsrs	r3, r0, #4
    5ff4:	428b      	cmp	r3, r1
    5ff6:	d301      	bcc.n	5ffc <__udivsi3+0xcc>
    5ff8:	010b      	lsls	r3, r1, #4
    5ffa:	1ac0      	subs	r0, r0, r3
    5ffc:	4152      	adcs	r2, r2
    5ffe:	08c3      	lsrs	r3, r0, #3
    6000:	428b      	cmp	r3, r1
    6002:	d301      	bcc.n	6008 <__udivsi3+0xd8>
    6004:	00cb      	lsls	r3, r1, #3
    6006:	1ac0      	subs	r0, r0, r3
    6008:	4152      	adcs	r2, r2
    600a:	0883      	lsrs	r3, r0, #2
    600c:	428b      	cmp	r3, r1
    600e:	d301      	bcc.n	6014 <__udivsi3+0xe4>
    6010:	008b      	lsls	r3, r1, #2
    6012:	1ac0      	subs	r0, r0, r3
    6014:	4152      	adcs	r2, r2
    6016:	0843      	lsrs	r3, r0, #1
    6018:	428b      	cmp	r3, r1
    601a:	d301      	bcc.n	6020 <__udivsi3+0xf0>
    601c:	004b      	lsls	r3, r1, #1
    601e:	1ac0      	subs	r0, r0, r3
    6020:	4152      	adcs	r2, r2
    6022:	1a41      	subs	r1, r0, r1
    6024:	d200      	bcs.n	6028 <__udivsi3+0xf8>
    6026:	4601      	mov	r1, r0
    6028:	4152      	adcs	r2, r2
    602a:	4610      	mov	r0, r2
    602c:	4770      	bx	lr
    602e:	e7ff      	b.n	6030 <__udivsi3+0x100>
    6030:	b501      	push	{r0, lr}
    6032:	2000      	movs	r0, #0
    6034:	f000 f8f0 	bl	6218 <__aeabi_idiv0>
    6038:	bd02      	pop	{r1, pc}
    603a:	46c0      	nop			; (mov r8, r8)

0000603c <__aeabi_uidivmod>:
    603c:	2900      	cmp	r1, #0
    603e:	d0f7      	beq.n	6030 <__udivsi3+0x100>
    6040:	e776      	b.n	5f30 <__udivsi3>
    6042:	4770      	bx	lr

00006044 <__divsi3>:
    6044:	4603      	mov	r3, r0
    6046:	430b      	orrs	r3, r1
    6048:	d47f      	bmi.n	614a <__divsi3+0x106>
    604a:	2200      	movs	r2, #0
    604c:	0843      	lsrs	r3, r0, #1
    604e:	428b      	cmp	r3, r1
    6050:	d374      	bcc.n	613c <__divsi3+0xf8>
    6052:	0903      	lsrs	r3, r0, #4
    6054:	428b      	cmp	r3, r1
    6056:	d35f      	bcc.n	6118 <__divsi3+0xd4>
    6058:	0a03      	lsrs	r3, r0, #8
    605a:	428b      	cmp	r3, r1
    605c:	d344      	bcc.n	60e8 <__divsi3+0xa4>
    605e:	0b03      	lsrs	r3, r0, #12
    6060:	428b      	cmp	r3, r1
    6062:	d328      	bcc.n	60b6 <__divsi3+0x72>
    6064:	0c03      	lsrs	r3, r0, #16
    6066:	428b      	cmp	r3, r1
    6068:	d30d      	bcc.n	6086 <__divsi3+0x42>
    606a:	22ff      	movs	r2, #255	; 0xff
    606c:	0209      	lsls	r1, r1, #8
    606e:	ba12      	rev	r2, r2
    6070:	0c03      	lsrs	r3, r0, #16
    6072:	428b      	cmp	r3, r1
    6074:	d302      	bcc.n	607c <__divsi3+0x38>
    6076:	1212      	asrs	r2, r2, #8
    6078:	0209      	lsls	r1, r1, #8
    607a:	d065      	beq.n	6148 <__divsi3+0x104>
    607c:	0b03      	lsrs	r3, r0, #12
    607e:	428b      	cmp	r3, r1
    6080:	d319      	bcc.n	60b6 <__divsi3+0x72>
    6082:	e000      	b.n	6086 <__divsi3+0x42>
    6084:	0a09      	lsrs	r1, r1, #8
    6086:	0bc3      	lsrs	r3, r0, #15
    6088:	428b      	cmp	r3, r1
    608a:	d301      	bcc.n	6090 <__divsi3+0x4c>
    608c:	03cb      	lsls	r3, r1, #15
    608e:	1ac0      	subs	r0, r0, r3
    6090:	4152      	adcs	r2, r2
    6092:	0b83      	lsrs	r3, r0, #14
    6094:	428b      	cmp	r3, r1
    6096:	d301      	bcc.n	609c <__divsi3+0x58>
    6098:	038b      	lsls	r3, r1, #14
    609a:	1ac0      	subs	r0, r0, r3
    609c:	4152      	adcs	r2, r2
    609e:	0b43      	lsrs	r3, r0, #13
    60a0:	428b      	cmp	r3, r1
    60a2:	d301      	bcc.n	60a8 <__divsi3+0x64>
    60a4:	034b      	lsls	r3, r1, #13
    60a6:	1ac0      	subs	r0, r0, r3
    60a8:	4152      	adcs	r2, r2
    60aa:	0b03      	lsrs	r3, r0, #12
    60ac:	428b      	cmp	r3, r1
    60ae:	d301      	bcc.n	60b4 <__divsi3+0x70>
    60b0:	030b      	lsls	r3, r1, #12
    60b2:	1ac0      	subs	r0, r0, r3
    60b4:	4152      	adcs	r2, r2
    60b6:	0ac3      	lsrs	r3, r0, #11
    60b8:	428b      	cmp	r3, r1
    60ba:	d301      	bcc.n	60c0 <__divsi3+0x7c>
    60bc:	02cb      	lsls	r3, r1, #11
    60be:	1ac0      	subs	r0, r0, r3
    60c0:	4152      	adcs	r2, r2
    60c2:	0a83      	lsrs	r3, r0, #10
    60c4:	428b      	cmp	r3, r1
    60c6:	d301      	bcc.n	60cc <__divsi3+0x88>
    60c8:	028b      	lsls	r3, r1, #10
    60ca:	1ac0      	subs	r0, r0, r3
    60cc:	4152      	adcs	r2, r2
    60ce:	0a43      	lsrs	r3, r0, #9
    60d0:	428b      	cmp	r3, r1
    60d2:	d301      	bcc.n	60d8 <__divsi3+0x94>
    60d4:	024b      	lsls	r3, r1, #9
    60d6:	1ac0      	subs	r0, r0, r3
    60d8:	4152      	adcs	r2, r2
    60da:	0a03      	lsrs	r3, r0, #8
    60dc:	428b      	cmp	r3, r1
    60de:	d301      	bcc.n	60e4 <__divsi3+0xa0>
    60e0:	020b      	lsls	r3, r1, #8
    60e2:	1ac0      	subs	r0, r0, r3
    60e4:	4152      	adcs	r2, r2
    60e6:	d2cd      	bcs.n	6084 <__divsi3+0x40>
    60e8:	09c3      	lsrs	r3, r0, #7
    60ea:	428b      	cmp	r3, r1
    60ec:	d301      	bcc.n	60f2 <__divsi3+0xae>
    60ee:	01cb      	lsls	r3, r1, #7
    60f0:	1ac0      	subs	r0, r0, r3
    60f2:	4152      	adcs	r2, r2
    60f4:	0983      	lsrs	r3, r0, #6
    60f6:	428b      	cmp	r3, r1
    60f8:	d301      	bcc.n	60fe <__divsi3+0xba>
    60fa:	018b      	lsls	r3, r1, #6
    60fc:	1ac0      	subs	r0, r0, r3
    60fe:	4152      	adcs	r2, r2
    6100:	0943      	lsrs	r3, r0, #5
    6102:	428b      	cmp	r3, r1
    6104:	d301      	bcc.n	610a <__divsi3+0xc6>
    6106:	014b      	lsls	r3, r1, #5
    6108:	1ac0      	subs	r0, r0, r3
    610a:	4152      	adcs	r2, r2
    610c:	0903      	lsrs	r3, r0, #4
    610e:	428b      	cmp	r3, r1
    6110:	d301      	bcc.n	6116 <__divsi3+0xd2>
    6112:	010b      	lsls	r3, r1, #4
    6114:	1ac0      	subs	r0, r0, r3
    6116:	4152      	adcs	r2, r2
    6118:	08c3      	lsrs	r3, r0, #3
    611a:	428b      	cmp	r3, r1
    611c:	d301      	bcc.n	6122 <__divsi3+0xde>
    611e:	00cb      	lsls	r3, r1, #3
    6120:	1ac0      	subs	r0, r0, r3
    6122:	4152      	adcs	r2, r2
    6124:	0883      	lsrs	r3, r0, #2
    6126:	428b      	cmp	r3, r1
    6128:	d301      	bcc.n	612e <__divsi3+0xea>
    612a:	008b      	lsls	r3, r1, #2
    612c:	1ac0      	subs	r0, r0, r3
    612e:	4152      	adcs	r2, r2
    6130:	0843      	lsrs	r3, r0, #1
    6132:	428b      	cmp	r3, r1
    6134:	d301      	bcc.n	613a <__divsi3+0xf6>
    6136:	004b      	lsls	r3, r1, #1
    6138:	1ac0      	subs	r0, r0, r3
    613a:	4152      	adcs	r2, r2
    613c:	1a41      	subs	r1, r0, r1
    613e:	d200      	bcs.n	6142 <__divsi3+0xfe>
    6140:	4601      	mov	r1, r0
    6142:	4152      	adcs	r2, r2
    6144:	4610      	mov	r0, r2
    6146:	4770      	bx	lr
    6148:	e05d      	b.n	6206 <__divsi3+0x1c2>
    614a:	0fca      	lsrs	r2, r1, #31
    614c:	d000      	beq.n	6150 <__divsi3+0x10c>
    614e:	4249      	negs	r1, r1
    6150:	1003      	asrs	r3, r0, #32
    6152:	d300      	bcc.n	6156 <__divsi3+0x112>
    6154:	4240      	negs	r0, r0
    6156:	4053      	eors	r3, r2
    6158:	2200      	movs	r2, #0
    615a:	469c      	mov	ip, r3
    615c:	0903      	lsrs	r3, r0, #4
    615e:	428b      	cmp	r3, r1
    6160:	d32d      	bcc.n	61be <__divsi3+0x17a>
    6162:	0a03      	lsrs	r3, r0, #8
    6164:	428b      	cmp	r3, r1
    6166:	d312      	bcc.n	618e <__divsi3+0x14a>
    6168:	22fc      	movs	r2, #252	; 0xfc
    616a:	0189      	lsls	r1, r1, #6
    616c:	ba12      	rev	r2, r2
    616e:	0a03      	lsrs	r3, r0, #8
    6170:	428b      	cmp	r3, r1
    6172:	d30c      	bcc.n	618e <__divsi3+0x14a>
    6174:	0189      	lsls	r1, r1, #6
    6176:	1192      	asrs	r2, r2, #6
    6178:	428b      	cmp	r3, r1
    617a:	d308      	bcc.n	618e <__divsi3+0x14a>
    617c:	0189      	lsls	r1, r1, #6
    617e:	1192      	asrs	r2, r2, #6
    6180:	428b      	cmp	r3, r1
    6182:	d304      	bcc.n	618e <__divsi3+0x14a>
    6184:	0189      	lsls	r1, r1, #6
    6186:	d03a      	beq.n	61fe <__divsi3+0x1ba>
    6188:	1192      	asrs	r2, r2, #6
    618a:	e000      	b.n	618e <__divsi3+0x14a>
    618c:	0989      	lsrs	r1, r1, #6
    618e:	09c3      	lsrs	r3, r0, #7
    6190:	428b      	cmp	r3, r1
    6192:	d301      	bcc.n	6198 <__divsi3+0x154>
    6194:	01cb      	lsls	r3, r1, #7
    6196:	1ac0      	subs	r0, r0, r3
    6198:	4152      	adcs	r2, r2
    619a:	0983      	lsrs	r3, r0, #6
    619c:	428b      	cmp	r3, r1
    619e:	d301      	bcc.n	61a4 <__divsi3+0x160>
    61a0:	018b      	lsls	r3, r1, #6
    61a2:	1ac0      	subs	r0, r0, r3
    61a4:	4152      	adcs	r2, r2
    61a6:	0943      	lsrs	r3, r0, #5
    61a8:	428b      	cmp	r3, r1
    61aa:	d301      	bcc.n	61b0 <__divsi3+0x16c>
    61ac:	014b      	lsls	r3, r1, #5
    61ae:	1ac0      	subs	r0, r0, r3
    61b0:	4152      	adcs	r2, r2
    61b2:	0903      	lsrs	r3, r0, #4
    61b4:	428b      	cmp	r3, r1
    61b6:	d301      	bcc.n	61bc <__divsi3+0x178>
    61b8:	010b      	lsls	r3, r1, #4
    61ba:	1ac0      	subs	r0, r0, r3
    61bc:	4152      	adcs	r2, r2
    61be:	08c3      	lsrs	r3, r0, #3
    61c0:	428b      	cmp	r3, r1
    61c2:	d301      	bcc.n	61c8 <__divsi3+0x184>
    61c4:	00cb      	lsls	r3, r1, #3
    61c6:	1ac0      	subs	r0, r0, r3
    61c8:	4152      	adcs	r2, r2
    61ca:	0883      	lsrs	r3, r0, #2
    61cc:	428b      	cmp	r3, r1
    61ce:	d301      	bcc.n	61d4 <__divsi3+0x190>
    61d0:	008b      	lsls	r3, r1, #2
    61d2:	1ac0      	subs	r0, r0, r3
    61d4:	4152      	adcs	r2, r2
    61d6:	d2d9      	bcs.n	618c <__divsi3+0x148>
    61d8:	0843      	lsrs	r3, r0, #1
    61da:	428b      	cmp	r3, r1
    61dc:	d301      	bcc.n	61e2 <__divsi3+0x19e>
    61de:	004b      	lsls	r3, r1, #1
    61e0:	1ac0      	subs	r0, r0, r3
    61e2:	4152      	adcs	r2, r2
    61e4:	1a41      	subs	r1, r0, r1
    61e6:	d200      	bcs.n	61ea <__divsi3+0x1a6>
    61e8:	4601      	mov	r1, r0
    61ea:	4663      	mov	r3, ip
    61ec:	4152      	adcs	r2, r2
    61ee:	105b      	asrs	r3, r3, #1
    61f0:	4610      	mov	r0, r2
    61f2:	d301      	bcc.n	61f8 <__divsi3+0x1b4>
    61f4:	4240      	negs	r0, r0
    61f6:	2b00      	cmp	r3, #0
    61f8:	d500      	bpl.n	61fc <__divsi3+0x1b8>
    61fa:	4249      	negs	r1, r1
    61fc:	4770      	bx	lr
    61fe:	4663      	mov	r3, ip
    6200:	105b      	asrs	r3, r3, #1
    6202:	d300      	bcc.n	6206 <__divsi3+0x1c2>
    6204:	4240      	negs	r0, r0
    6206:	b501      	push	{r0, lr}
    6208:	2000      	movs	r0, #0
    620a:	f000 f805 	bl	6218 <__aeabi_idiv0>
    620e:	bd02      	pop	{r1, pc}

00006210 <__aeabi_idivmod>:
    6210:	2900      	cmp	r1, #0
    6212:	d0f8      	beq.n	6206 <__divsi3+0x1c2>
    6214:	e716      	b.n	6044 <__divsi3>
    6216:	4770      	bx	lr

00006218 <__aeabi_idiv0>:
    6218:	4770      	bx	lr
    621a:	46c0      	nop			; (mov r8, r8)

0000621c <__aeabi_lmul>:
    621c:	b5f0      	push	{r4, r5, r6, r7, lr}
    621e:	46ce      	mov	lr, r9
    6220:	4647      	mov	r7, r8
    6222:	0415      	lsls	r5, r2, #16
    6224:	0c2d      	lsrs	r5, r5, #16
    6226:	002e      	movs	r6, r5
    6228:	b580      	push	{r7, lr}
    622a:	0407      	lsls	r7, r0, #16
    622c:	0c14      	lsrs	r4, r2, #16
    622e:	0c3f      	lsrs	r7, r7, #16
    6230:	4699      	mov	r9, r3
    6232:	0c03      	lsrs	r3, r0, #16
    6234:	437e      	muls	r6, r7
    6236:	435d      	muls	r5, r3
    6238:	4367      	muls	r7, r4
    623a:	4363      	muls	r3, r4
    623c:	197f      	adds	r7, r7, r5
    623e:	0c34      	lsrs	r4, r6, #16
    6240:	19e4      	adds	r4, r4, r7
    6242:	469c      	mov	ip, r3
    6244:	42a5      	cmp	r5, r4
    6246:	d903      	bls.n	6250 <__aeabi_lmul+0x34>
    6248:	2380      	movs	r3, #128	; 0x80
    624a:	025b      	lsls	r3, r3, #9
    624c:	4698      	mov	r8, r3
    624e:	44c4      	add	ip, r8
    6250:	464b      	mov	r3, r9
    6252:	4351      	muls	r1, r2
    6254:	4343      	muls	r3, r0
    6256:	0436      	lsls	r6, r6, #16
    6258:	0c36      	lsrs	r6, r6, #16
    625a:	0c25      	lsrs	r5, r4, #16
    625c:	0424      	lsls	r4, r4, #16
    625e:	4465      	add	r5, ip
    6260:	19a4      	adds	r4, r4, r6
    6262:	1859      	adds	r1, r3, r1
    6264:	1949      	adds	r1, r1, r5
    6266:	0020      	movs	r0, r4
    6268:	bc0c      	pop	{r2, r3}
    626a:	4690      	mov	r8, r2
    626c:	4699      	mov	r9, r3
    626e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006270 <__libc_init_array>:
    6270:	b570      	push	{r4, r5, r6, lr}
    6272:	2600      	movs	r6, #0
    6274:	4d0c      	ldr	r5, [pc, #48]	; (62a8 <__libc_init_array+0x38>)
    6276:	4c0d      	ldr	r4, [pc, #52]	; (62ac <__libc_init_array+0x3c>)
    6278:	1b64      	subs	r4, r4, r5
    627a:	10a4      	asrs	r4, r4, #2
    627c:	42a6      	cmp	r6, r4
    627e:	d109      	bne.n	6294 <__libc_init_array+0x24>
    6280:	2600      	movs	r6, #0
    6282:	f001 fd49 	bl	7d18 <_init>
    6286:	4d0a      	ldr	r5, [pc, #40]	; (62b0 <__libc_init_array+0x40>)
    6288:	4c0a      	ldr	r4, [pc, #40]	; (62b4 <__libc_init_array+0x44>)
    628a:	1b64      	subs	r4, r4, r5
    628c:	10a4      	asrs	r4, r4, #2
    628e:	42a6      	cmp	r6, r4
    6290:	d105      	bne.n	629e <__libc_init_array+0x2e>
    6292:	bd70      	pop	{r4, r5, r6, pc}
    6294:	00b3      	lsls	r3, r6, #2
    6296:	58eb      	ldr	r3, [r5, r3]
    6298:	4798      	blx	r3
    629a:	3601      	adds	r6, #1
    629c:	e7ee      	b.n	627c <__libc_init_array+0xc>
    629e:	00b3      	lsls	r3, r6, #2
    62a0:	58eb      	ldr	r3, [r5, r3]
    62a2:	4798      	blx	r3
    62a4:	3601      	adds	r6, #1
    62a6:	e7f2      	b.n	628e <__libc_init_array+0x1e>
    62a8:	00007d24 	.word	0x00007d24
    62ac:	00007d24 	.word	0x00007d24
    62b0:	00007d24 	.word	0x00007d24
    62b4:	00007d28 	.word	0x00007d28

000062b8 <malloc>:
    62b8:	b510      	push	{r4, lr}
    62ba:	4b03      	ldr	r3, [pc, #12]	; (62c8 <malloc+0x10>)
    62bc:	0001      	movs	r1, r0
    62be:	6818      	ldr	r0, [r3, #0]
    62c0:	f000 f856 	bl	6370 <_malloc_r>
    62c4:	bd10      	pop	{r4, pc}
    62c6:	46c0      	nop			; (mov r8, r8)
    62c8:	20000048 	.word	0x20000048

000062cc <memset>:
    62cc:	0003      	movs	r3, r0
    62ce:	1882      	adds	r2, r0, r2
    62d0:	4293      	cmp	r3, r2
    62d2:	d100      	bne.n	62d6 <memset+0xa>
    62d4:	4770      	bx	lr
    62d6:	7019      	strb	r1, [r3, #0]
    62d8:	3301      	adds	r3, #1
    62da:	e7f9      	b.n	62d0 <memset+0x4>

000062dc <_free_r>:
    62dc:	b570      	push	{r4, r5, r6, lr}
    62de:	0005      	movs	r5, r0
    62e0:	2900      	cmp	r1, #0
    62e2:	d010      	beq.n	6306 <_free_r+0x2a>
    62e4:	1f0c      	subs	r4, r1, #4
    62e6:	6823      	ldr	r3, [r4, #0]
    62e8:	2b00      	cmp	r3, #0
    62ea:	da00      	bge.n	62ee <_free_r+0x12>
    62ec:	18e4      	adds	r4, r4, r3
    62ee:	0028      	movs	r0, r5
    62f0:	f000 fb54 	bl	699c <__malloc_lock>
    62f4:	4a1d      	ldr	r2, [pc, #116]	; (636c <_free_r+0x90>)
    62f6:	6813      	ldr	r3, [r2, #0]
    62f8:	2b00      	cmp	r3, #0
    62fa:	d105      	bne.n	6308 <_free_r+0x2c>
    62fc:	6063      	str	r3, [r4, #4]
    62fe:	6014      	str	r4, [r2, #0]
    6300:	0028      	movs	r0, r5
    6302:	f000 fb4c 	bl	699e <__malloc_unlock>
    6306:	bd70      	pop	{r4, r5, r6, pc}
    6308:	42a3      	cmp	r3, r4
    630a:	d909      	bls.n	6320 <_free_r+0x44>
    630c:	6821      	ldr	r1, [r4, #0]
    630e:	1860      	adds	r0, r4, r1
    6310:	4283      	cmp	r3, r0
    6312:	d1f3      	bne.n	62fc <_free_r+0x20>
    6314:	6818      	ldr	r0, [r3, #0]
    6316:	685b      	ldr	r3, [r3, #4]
    6318:	1841      	adds	r1, r0, r1
    631a:	6021      	str	r1, [r4, #0]
    631c:	e7ee      	b.n	62fc <_free_r+0x20>
    631e:	0013      	movs	r3, r2
    6320:	685a      	ldr	r2, [r3, #4]
    6322:	2a00      	cmp	r2, #0
    6324:	d001      	beq.n	632a <_free_r+0x4e>
    6326:	42a2      	cmp	r2, r4
    6328:	d9f9      	bls.n	631e <_free_r+0x42>
    632a:	6819      	ldr	r1, [r3, #0]
    632c:	1858      	adds	r0, r3, r1
    632e:	42a0      	cmp	r0, r4
    6330:	d10b      	bne.n	634a <_free_r+0x6e>
    6332:	6820      	ldr	r0, [r4, #0]
    6334:	1809      	adds	r1, r1, r0
    6336:	1858      	adds	r0, r3, r1
    6338:	6019      	str	r1, [r3, #0]
    633a:	4282      	cmp	r2, r0
    633c:	d1e0      	bne.n	6300 <_free_r+0x24>
    633e:	6810      	ldr	r0, [r2, #0]
    6340:	6852      	ldr	r2, [r2, #4]
    6342:	1841      	adds	r1, r0, r1
    6344:	6019      	str	r1, [r3, #0]
    6346:	605a      	str	r2, [r3, #4]
    6348:	e7da      	b.n	6300 <_free_r+0x24>
    634a:	42a0      	cmp	r0, r4
    634c:	d902      	bls.n	6354 <_free_r+0x78>
    634e:	230c      	movs	r3, #12
    6350:	602b      	str	r3, [r5, #0]
    6352:	e7d5      	b.n	6300 <_free_r+0x24>
    6354:	6821      	ldr	r1, [r4, #0]
    6356:	1860      	adds	r0, r4, r1
    6358:	4282      	cmp	r2, r0
    635a:	d103      	bne.n	6364 <_free_r+0x88>
    635c:	6810      	ldr	r0, [r2, #0]
    635e:	6852      	ldr	r2, [r2, #4]
    6360:	1841      	adds	r1, r0, r1
    6362:	6021      	str	r1, [r4, #0]
    6364:	6062      	str	r2, [r4, #4]
    6366:	605c      	str	r4, [r3, #4]
    6368:	e7ca      	b.n	6300 <_free_r+0x24>
    636a:	46c0      	nop			; (mov r8, r8)
    636c:	200001c0 	.word	0x200001c0

00006370 <_malloc_r>:
    6370:	2303      	movs	r3, #3
    6372:	b570      	push	{r4, r5, r6, lr}
    6374:	1ccd      	adds	r5, r1, #3
    6376:	439d      	bics	r5, r3
    6378:	3508      	adds	r5, #8
    637a:	0006      	movs	r6, r0
    637c:	2d0c      	cmp	r5, #12
    637e:	d21e      	bcs.n	63be <_malloc_r+0x4e>
    6380:	250c      	movs	r5, #12
    6382:	42a9      	cmp	r1, r5
    6384:	d81d      	bhi.n	63c2 <_malloc_r+0x52>
    6386:	0030      	movs	r0, r6
    6388:	f000 fb08 	bl	699c <__malloc_lock>
    638c:	4a25      	ldr	r2, [pc, #148]	; (6424 <_malloc_r+0xb4>)
    638e:	6814      	ldr	r4, [r2, #0]
    6390:	0021      	movs	r1, r4
    6392:	2900      	cmp	r1, #0
    6394:	d119      	bne.n	63ca <_malloc_r+0x5a>
    6396:	4c24      	ldr	r4, [pc, #144]	; (6428 <_malloc_r+0xb8>)
    6398:	6823      	ldr	r3, [r4, #0]
    639a:	2b00      	cmp	r3, #0
    639c:	d103      	bne.n	63a6 <_malloc_r+0x36>
    639e:	0030      	movs	r0, r6
    63a0:	f000 f844 	bl	642c <_sbrk_r>
    63a4:	6020      	str	r0, [r4, #0]
    63a6:	0029      	movs	r1, r5
    63a8:	0030      	movs	r0, r6
    63aa:	f000 f83f 	bl	642c <_sbrk_r>
    63ae:	1c43      	adds	r3, r0, #1
    63b0:	d12c      	bne.n	640c <_malloc_r+0x9c>
    63b2:	230c      	movs	r3, #12
    63b4:	0030      	movs	r0, r6
    63b6:	6033      	str	r3, [r6, #0]
    63b8:	f000 faf1 	bl	699e <__malloc_unlock>
    63bc:	e003      	b.n	63c6 <_malloc_r+0x56>
    63be:	2d00      	cmp	r5, #0
    63c0:	dadf      	bge.n	6382 <_malloc_r+0x12>
    63c2:	230c      	movs	r3, #12
    63c4:	6033      	str	r3, [r6, #0]
    63c6:	2000      	movs	r0, #0
    63c8:	bd70      	pop	{r4, r5, r6, pc}
    63ca:	680b      	ldr	r3, [r1, #0]
    63cc:	1b5b      	subs	r3, r3, r5
    63ce:	d41a      	bmi.n	6406 <_malloc_r+0x96>
    63d0:	2b0b      	cmp	r3, #11
    63d2:	d903      	bls.n	63dc <_malloc_r+0x6c>
    63d4:	600b      	str	r3, [r1, #0]
    63d6:	18cc      	adds	r4, r1, r3
    63d8:	6025      	str	r5, [r4, #0]
    63da:	e003      	b.n	63e4 <_malloc_r+0x74>
    63dc:	428c      	cmp	r4, r1
    63de:	d10e      	bne.n	63fe <_malloc_r+0x8e>
    63e0:	6863      	ldr	r3, [r4, #4]
    63e2:	6013      	str	r3, [r2, #0]
    63e4:	0030      	movs	r0, r6
    63e6:	f000 fada 	bl	699e <__malloc_unlock>
    63ea:	0020      	movs	r0, r4
    63ec:	2207      	movs	r2, #7
    63ee:	300b      	adds	r0, #11
    63f0:	1d23      	adds	r3, r4, #4
    63f2:	4390      	bics	r0, r2
    63f4:	1ac3      	subs	r3, r0, r3
    63f6:	d0e7      	beq.n	63c8 <_malloc_r+0x58>
    63f8:	425a      	negs	r2, r3
    63fa:	50e2      	str	r2, [r4, r3]
    63fc:	e7e4      	b.n	63c8 <_malloc_r+0x58>
    63fe:	684b      	ldr	r3, [r1, #4]
    6400:	6063      	str	r3, [r4, #4]
    6402:	000c      	movs	r4, r1
    6404:	e7ee      	b.n	63e4 <_malloc_r+0x74>
    6406:	000c      	movs	r4, r1
    6408:	6849      	ldr	r1, [r1, #4]
    640a:	e7c2      	b.n	6392 <_malloc_r+0x22>
    640c:	2303      	movs	r3, #3
    640e:	1cc4      	adds	r4, r0, #3
    6410:	439c      	bics	r4, r3
    6412:	42a0      	cmp	r0, r4
    6414:	d0e0      	beq.n	63d8 <_malloc_r+0x68>
    6416:	1a21      	subs	r1, r4, r0
    6418:	0030      	movs	r0, r6
    641a:	f000 f807 	bl	642c <_sbrk_r>
    641e:	1c43      	adds	r3, r0, #1
    6420:	d1da      	bne.n	63d8 <_malloc_r+0x68>
    6422:	e7c6      	b.n	63b2 <_malloc_r+0x42>
    6424:	200001c0 	.word	0x200001c0
    6428:	200001c4 	.word	0x200001c4

0000642c <_sbrk_r>:
    642c:	2300      	movs	r3, #0
    642e:	b570      	push	{r4, r5, r6, lr}
    6430:	4c06      	ldr	r4, [pc, #24]	; (644c <_sbrk_r+0x20>)
    6432:	0005      	movs	r5, r0
    6434:	0008      	movs	r0, r1
    6436:	6023      	str	r3, [r4, #0]
    6438:	f7fd fa1e 	bl	3878 <_sbrk>
    643c:	1c43      	adds	r3, r0, #1
    643e:	d103      	bne.n	6448 <_sbrk_r+0x1c>
    6440:	6823      	ldr	r3, [r4, #0]
    6442:	2b00      	cmp	r3, #0
    6444:	d000      	beq.n	6448 <_sbrk_r+0x1c>
    6446:	602b      	str	r3, [r5, #0]
    6448:	bd70      	pop	{r4, r5, r6, pc}
    644a:	46c0      	nop			; (mov r8, r8)
    644c:	20000e2c 	.word	0x20000e2c

00006450 <setbuf>:
    6450:	424a      	negs	r2, r1
    6452:	414a      	adcs	r2, r1
    6454:	2380      	movs	r3, #128	; 0x80
    6456:	b510      	push	{r4, lr}
    6458:	0052      	lsls	r2, r2, #1
    645a:	00db      	lsls	r3, r3, #3
    645c:	f000 f802 	bl	6464 <setvbuf>
    6460:	bd10      	pop	{r4, pc}
	...

00006464 <setvbuf>:
    6464:	b5f0      	push	{r4, r5, r6, r7, lr}
    6466:	001d      	movs	r5, r3
    6468:	4b4f      	ldr	r3, [pc, #316]	; (65a8 <setvbuf+0x144>)
    646a:	b085      	sub	sp, #20
    646c:	681e      	ldr	r6, [r3, #0]
    646e:	0004      	movs	r4, r0
    6470:	000f      	movs	r7, r1
    6472:	9200      	str	r2, [sp, #0]
    6474:	2e00      	cmp	r6, #0
    6476:	d005      	beq.n	6484 <setvbuf+0x20>
    6478:	69b3      	ldr	r3, [r6, #24]
    647a:	2b00      	cmp	r3, #0
    647c:	d102      	bne.n	6484 <setvbuf+0x20>
    647e:	0030      	movs	r0, r6
    6480:	f000 f9ce 	bl	6820 <__sinit>
    6484:	4b49      	ldr	r3, [pc, #292]	; (65ac <setvbuf+0x148>)
    6486:	429c      	cmp	r4, r3
    6488:	d150      	bne.n	652c <setvbuf+0xc8>
    648a:	6874      	ldr	r4, [r6, #4]
    648c:	9b00      	ldr	r3, [sp, #0]
    648e:	2b02      	cmp	r3, #2
    6490:	d005      	beq.n	649e <setvbuf+0x3a>
    6492:	2b01      	cmp	r3, #1
    6494:	d900      	bls.n	6498 <setvbuf+0x34>
    6496:	e084      	b.n	65a2 <setvbuf+0x13e>
    6498:	2d00      	cmp	r5, #0
    649a:	da00      	bge.n	649e <setvbuf+0x3a>
    649c:	e081      	b.n	65a2 <setvbuf+0x13e>
    649e:	0021      	movs	r1, r4
    64a0:	0030      	movs	r0, r6
    64a2:	f000 f94f 	bl	6744 <_fflush_r>
    64a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
    64a8:	2900      	cmp	r1, #0
    64aa:	d008      	beq.n	64be <setvbuf+0x5a>
    64ac:	0023      	movs	r3, r4
    64ae:	3344      	adds	r3, #68	; 0x44
    64b0:	4299      	cmp	r1, r3
    64b2:	d002      	beq.n	64ba <setvbuf+0x56>
    64b4:	0030      	movs	r0, r6
    64b6:	f7ff ff11 	bl	62dc <_free_r>
    64ba:	2300      	movs	r3, #0
    64bc:	6363      	str	r3, [r4, #52]	; 0x34
    64be:	2300      	movs	r3, #0
    64c0:	61a3      	str	r3, [r4, #24]
    64c2:	6063      	str	r3, [r4, #4]
    64c4:	89a3      	ldrh	r3, [r4, #12]
    64c6:	061b      	lsls	r3, r3, #24
    64c8:	d503      	bpl.n	64d2 <setvbuf+0x6e>
    64ca:	6921      	ldr	r1, [r4, #16]
    64cc:	0030      	movs	r0, r6
    64ce:	f7ff ff05 	bl	62dc <_free_r>
    64d2:	89a3      	ldrh	r3, [r4, #12]
    64d4:	4a36      	ldr	r2, [pc, #216]	; (65b0 <setvbuf+0x14c>)
    64d6:	4013      	ands	r3, r2
    64d8:	81a3      	strh	r3, [r4, #12]
    64da:	9b00      	ldr	r3, [sp, #0]
    64dc:	2b02      	cmp	r3, #2
    64de:	d05a      	beq.n	6596 <setvbuf+0x132>
    64e0:	ab03      	add	r3, sp, #12
    64e2:	aa02      	add	r2, sp, #8
    64e4:	0021      	movs	r1, r4
    64e6:	0030      	movs	r0, r6
    64e8:	f000 fa30 	bl	694c <__swhatbuf_r>
    64ec:	89a3      	ldrh	r3, [r4, #12]
    64ee:	4318      	orrs	r0, r3
    64f0:	81a0      	strh	r0, [r4, #12]
    64f2:	2d00      	cmp	r5, #0
    64f4:	d124      	bne.n	6540 <setvbuf+0xdc>
    64f6:	9d02      	ldr	r5, [sp, #8]
    64f8:	0028      	movs	r0, r5
    64fa:	f7ff fedd 	bl	62b8 <malloc>
    64fe:	9501      	str	r5, [sp, #4]
    6500:	1e07      	subs	r7, r0, #0
    6502:	d142      	bne.n	658a <setvbuf+0x126>
    6504:	9b02      	ldr	r3, [sp, #8]
    6506:	9301      	str	r3, [sp, #4]
    6508:	42ab      	cmp	r3, r5
    650a:	d139      	bne.n	6580 <setvbuf+0x11c>
    650c:	2001      	movs	r0, #1
    650e:	4240      	negs	r0, r0
    6510:	2302      	movs	r3, #2
    6512:	89a2      	ldrh	r2, [r4, #12]
    6514:	4313      	orrs	r3, r2
    6516:	81a3      	strh	r3, [r4, #12]
    6518:	2300      	movs	r3, #0
    651a:	60a3      	str	r3, [r4, #8]
    651c:	0023      	movs	r3, r4
    651e:	3347      	adds	r3, #71	; 0x47
    6520:	6023      	str	r3, [r4, #0]
    6522:	6123      	str	r3, [r4, #16]
    6524:	2301      	movs	r3, #1
    6526:	6163      	str	r3, [r4, #20]
    6528:	b005      	add	sp, #20
    652a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    652c:	4b21      	ldr	r3, [pc, #132]	; (65b4 <setvbuf+0x150>)
    652e:	429c      	cmp	r4, r3
    6530:	d101      	bne.n	6536 <setvbuf+0xd2>
    6532:	68b4      	ldr	r4, [r6, #8]
    6534:	e7aa      	b.n	648c <setvbuf+0x28>
    6536:	4b20      	ldr	r3, [pc, #128]	; (65b8 <setvbuf+0x154>)
    6538:	429c      	cmp	r4, r3
    653a:	d1a7      	bne.n	648c <setvbuf+0x28>
    653c:	68f4      	ldr	r4, [r6, #12]
    653e:	e7a5      	b.n	648c <setvbuf+0x28>
    6540:	2f00      	cmp	r7, #0
    6542:	d0d9      	beq.n	64f8 <setvbuf+0x94>
    6544:	69b3      	ldr	r3, [r6, #24]
    6546:	2b00      	cmp	r3, #0
    6548:	d102      	bne.n	6550 <setvbuf+0xec>
    654a:	0030      	movs	r0, r6
    654c:	f000 f968 	bl	6820 <__sinit>
    6550:	9b00      	ldr	r3, [sp, #0]
    6552:	2b01      	cmp	r3, #1
    6554:	d103      	bne.n	655e <setvbuf+0xfa>
    6556:	89a3      	ldrh	r3, [r4, #12]
    6558:	9a00      	ldr	r2, [sp, #0]
    655a:	431a      	orrs	r2, r3
    655c:	81a2      	strh	r2, [r4, #12]
    655e:	2008      	movs	r0, #8
    6560:	89a3      	ldrh	r3, [r4, #12]
    6562:	6027      	str	r7, [r4, #0]
    6564:	6127      	str	r7, [r4, #16]
    6566:	6165      	str	r5, [r4, #20]
    6568:	4018      	ands	r0, r3
    656a:	d018      	beq.n	659e <setvbuf+0x13a>
    656c:	2001      	movs	r0, #1
    656e:	4018      	ands	r0, r3
    6570:	2300      	movs	r3, #0
    6572:	4298      	cmp	r0, r3
    6574:	d011      	beq.n	659a <setvbuf+0x136>
    6576:	426d      	negs	r5, r5
    6578:	60a3      	str	r3, [r4, #8]
    657a:	61a5      	str	r5, [r4, #24]
    657c:	0018      	movs	r0, r3
    657e:	e7d3      	b.n	6528 <setvbuf+0xc4>
    6580:	9801      	ldr	r0, [sp, #4]
    6582:	f7ff fe99 	bl	62b8 <malloc>
    6586:	1e07      	subs	r7, r0, #0
    6588:	d0c0      	beq.n	650c <setvbuf+0xa8>
    658a:	2380      	movs	r3, #128	; 0x80
    658c:	89a2      	ldrh	r2, [r4, #12]
    658e:	9d01      	ldr	r5, [sp, #4]
    6590:	4313      	orrs	r3, r2
    6592:	81a3      	strh	r3, [r4, #12]
    6594:	e7d6      	b.n	6544 <setvbuf+0xe0>
    6596:	2000      	movs	r0, #0
    6598:	e7ba      	b.n	6510 <setvbuf+0xac>
    659a:	60a5      	str	r5, [r4, #8]
    659c:	e7c4      	b.n	6528 <setvbuf+0xc4>
    659e:	60a0      	str	r0, [r4, #8]
    65a0:	e7c2      	b.n	6528 <setvbuf+0xc4>
    65a2:	2001      	movs	r0, #1
    65a4:	4240      	negs	r0, r0
    65a6:	e7bf      	b.n	6528 <setvbuf+0xc4>
    65a8:	20000048 	.word	0x20000048
    65ac:	00007ca4 	.word	0x00007ca4
    65b0:	fffff35c 	.word	0xfffff35c
    65b4:	00007cc4 	.word	0x00007cc4
    65b8:	00007c84 	.word	0x00007c84

000065bc <sniprintf>:
    65bc:	b40c      	push	{r2, r3}
    65be:	b530      	push	{r4, r5, lr}
    65c0:	4b16      	ldr	r3, [pc, #88]	; (661c <sniprintf+0x60>)
    65c2:	b09d      	sub	sp, #116	; 0x74
    65c4:	1e0c      	subs	r4, r1, #0
    65c6:	681d      	ldr	r5, [r3, #0]
    65c8:	da08      	bge.n	65dc <sniprintf+0x20>
    65ca:	238b      	movs	r3, #139	; 0x8b
    65cc:	2001      	movs	r0, #1
    65ce:	602b      	str	r3, [r5, #0]
    65d0:	4240      	negs	r0, r0
    65d2:	b01d      	add	sp, #116	; 0x74
    65d4:	bc30      	pop	{r4, r5}
    65d6:	bc08      	pop	{r3}
    65d8:	b002      	add	sp, #8
    65da:	4718      	bx	r3
    65dc:	2382      	movs	r3, #130	; 0x82
    65de:	a902      	add	r1, sp, #8
    65e0:	009b      	lsls	r3, r3, #2
    65e2:	818b      	strh	r3, [r1, #12]
    65e4:	2300      	movs	r3, #0
    65e6:	9002      	str	r0, [sp, #8]
    65e8:	6108      	str	r0, [r1, #16]
    65ea:	429c      	cmp	r4, r3
    65ec:	d000      	beq.n	65f0 <sniprintf+0x34>
    65ee:	1e63      	subs	r3, r4, #1
    65f0:	608b      	str	r3, [r1, #8]
    65f2:	614b      	str	r3, [r1, #20]
    65f4:	2301      	movs	r3, #1
    65f6:	425b      	negs	r3, r3
    65f8:	81cb      	strh	r3, [r1, #14]
    65fa:	9a20      	ldr	r2, [sp, #128]	; 0x80
    65fc:	ab21      	add	r3, sp, #132	; 0x84
    65fe:	0028      	movs	r0, r5
    6600:	9301      	str	r3, [sp, #4]
    6602:	f000 fa2f 	bl	6a64 <_svfiprintf_r>
    6606:	1c43      	adds	r3, r0, #1
    6608:	da01      	bge.n	660e <sniprintf+0x52>
    660a:	238b      	movs	r3, #139	; 0x8b
    660c:	602b      	str	r3, [r5, #0]
    660e:	2c00      	cmp	r4, #0
    6610:	d0df      	beq.n	65d2 <sniprintf+0x16>
    6612:	2300      	movs	r3, #0
    6614:	9a02      	ldr	r2, [sp, #8]
    6616:	7013      	strb	r3, [r2, #0]
    6618:	e7db      	b.n	65d2 <sniprintf+0x16>
    661a:	46c0      	nop			; (mov r8, r8)
    661c:	20000048 	.word	0x20000048

00006620 <strlen>:
    6620:	2300      	movs	r3, #0
    6622:	5cc2      	ldrb	r2, [r0, r3]
    6624:	3301      	adds	r3, #1
    6626:	2a00      	cmp	r2, #0
    6628:	d1fb      	bne.n	6622 <strlen+0x2>
    662a:	1e58      	subs	r0, r3, #1
    662c:	4770      	bx	lr
	...

00006630 <__sflush_r>:
    6630:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6632:	898a      	ldrh	r2, [r1, #12]
    6634:	0005      	movs	r5, r0
    6636:	000c      	movs	r4, r1
    6638:	0713      	lsls	r3, r2, #28
    663a:	d460      	bmi.n	66fe <__sflush_r+0xce>
    663c:	684b      	ldr	r3, [r1, #4]
    663e:	2b00      	cmp	r3, #0
    6640:	dc04      	bgt.n	664c <__sflush_r+0x1c>
    6642:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    6644:	2b00      	cmp	r3, #0
    6646:	dc01      	bgt.n	664c <__sflush_r+0x1c>
    6648:	2000      	movs	r0, #0
    664a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    664c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    664e:	2f00      	cmp	r7, #0
    6650:	d0fa      	beq.n	6648 <__sflush_r+0x18>
    6652:	2300      	movs	r3, #0
    6654:	682e      	ldr	r6, [r5, #0]
    6656:	602b      	str	r3, [r5, #0]
    6658:	2380      	movs	r3, #128	; 0x80
    665a:	015b      	lsls	r3, r3, #5
    665c:	401a      	ands	r2, r3
    665e:	d034      	beq.n	66ca <__sflush_r+0x9a>
    6660:	6d60      	ldr	r0, [r4, #84]	; 0x54
    6662:	89a3      	ldrh	r3, [r4, #12]
    6664:	075b      	lsls	r3, r3, #29
    6666:	d506      	bpl.n	6676 <__sflush_r+0x46>
    6668:	6863      	ldr	r3, [r4, #4]
    666a:	1ac0      	subs	r0, r0, r3
    666c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    666e:	2b00      	cmp	r3, #0
    6670:	d001      	beq.n	6676 <__sflush_r+0x46>
    6672:	6c23      	ldr	r3, [r4, #64]	; 0x40
    6674:	1ac0      	subs	r0, r0, r3
    6676:	0002      	movs	r2, r0
    6678:	6a21      	ldr	r1, [r4, #32]
    667a:	2300      	movs	r3, #0
    667c:	0028      	movs	r0, r5
    667e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    6680:	47b8      	blx	r7
    6682:	89a1      	ldrh	r1, [r4, #12]
    6684:	1c43      	adds	r3, r0, #1
    6686:	d106      	bne.n	6696 <__sflush_r+0x66>
    6688:	682b      	ldr	r3, [r5, #0]
    668a:	2b1d      	cmp	r3, #29
    668c:	d831      	bhi.n	66f2 <__sflush_r+0xc2>
    668e:	4a2c      	ldr	r2, [pc, #176]	; (6740 <__sflush_r+0x110>)
    6690:	40da      	lsrs	r2, r3
    6692:	07d3      	lsls	r3, r2, #31
    6694:	d52d      	bpl.n	66f2 <__sflush_r+0xc2>
    6696:	2300      	movs	r3, #0
    6698:	6063      	str	r3, [r4, #4]
    669a:	6923      	ldr	r3, [r4, #16]
    669c:	6023      	str	r3, [r4, #0]
    669e:	04cb      	lsls	r3, r1, #19
    66a0:	d505      	bpl.n	66ae <__sflush_r+0x7e>
    66a2:	1c43      	adds	r3, r0, #1
    66a4:	d102      	bne.n	66ac <__sflush_r+0x7c>
    66a6:	682b      	ldr	r3, [r5, #0]
    66a8:	2b00      	cmp	r3, #0
    66aa:	d100      	bne.n	66ae <__sflush_r+0x7e>
    66ac:	6560      	str	r0, [r4, #84]	; 0x54
    66ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
    66b0:	602e      	str	r6, [r5, #0]
    66b2:	2900      	cmp	r1, #0
    66b4:	d0c8      	beq.n	6648 <__sflush_r+0x18>
    66b6:	0023      	movs	r3, r4
    66b8:	3344      	adds	r3, #68	; 0x44
    66ba:	4299      	cmp	r1, r3
    66bc:	d002      	beq.n	66c4 <__sflush_r+0x94>
    66be:	0028      	movs	r0, r5
    66c0:	f7ff fe0c 	bl	62dc <_free_r>
    66c4:	2000      	movs	r0, #0
    66c6:	6360      	str	r0, [r4, #52]	; 0x34
    66c8:	e7bf      	b.n	664a <__sflush_r+0x1a>
    66ca:	2301      	movs	r3, #1
    66cc:	6a21      	ldr	r1, [r4, #32]
    66ce:	0028      	movs	r0, r5
    66d0:	47b8      	blx	r7
    66d2:	1c43      	adds	r3, r0, #1
    66d4:	d1c5      	bne.n	6662 <__sflush_r+0x32>
    66d6:	682b      	ldr	r3, [r5, #0]
    66d8:	2b00      	cmp	r3, #0
    66da:	d0c2      	beq.n	6662 <__sflush_r+0x32>
    66dc:	2b1d      	cmp	r3, #29
    66de:	d001      	beq.n	66e4 <__sflush_r+0xb4>
    66e0:	2b16      	cmp	r3, #22
    66e2:	d101      	bne.n	66e8 <__sflush_r+0xb8>
    66e4:	602e      	str	r6, [r5, #0]
    66e6:	e7af      	b.n	6648 <__sflush_r+0x18>
    66e8:	2340      	movs	r3, #64	; 0x40
    66ea:	89a2      	ldrh	r2, [r4, #12]
    66ec:	4313      	orrs	r3, r2
    66ee:	81a3      	strh	r3, [r4, #12]
    66f0:	e7ab      	b.n	664a <__sflush_r+0x1a>
    66f2:	2340      	movs	r3, #64	; 0x40
    66f4:	430b      	orrs	r3, r1
    66f6:	2001      	movs	r0, #1
    66f8:	81a3      	strh	r3, [r4, #12]
    66fa:	4240      	negs	r0, r0
    66fc:	e7a5      	b.n	664a <__sflush_r+0x1a>
    66fe:	690f      	ldr	r7, [r1, #16]
    6700:	2f00      	cmp	r7, #0
    6702:	d0a1      	beq.n	6648 <__sflush_r+0x18>
    6704:	680b      	ldr	r3, [r1, #0]
    6706:	600f      	str	r7, [r1, #0]
    6708:	1bdb      	subs	r3, r3, r7
    670a:	9301      	str	r3, [sp, #4]
    670c:	2300      	movs	r3, #0
    670e:	0792      	lsls	r2, r2, #30
    6710:	d100      	bne.n	6714 <__sflush_r+0xe4>
    6712:	694b      	ldr	r3, [r1, #20]
    6714:	60a3      	str	r3, [r4, #8]
    6716:	9b01      	ldr	r3, [sp, #4]
    6718:	2b00      	cmp	r3, #0
    671a:	dc00      	bgt.n	671e <__sflush_r+0xee>
    671c:	e794      	b.n	6648 <__sflush_r+0x18>
    671e:	9b01      	ldr	r3, [sp, #4]
    6720:	003a      	movs	r2, r7
    6722:	6a21      	ldr	r1, [r4, #32]
    6724:	0028      	movs	r0, r5
    6726:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    6728:	47b0      	blx	r6
    672a:	2800      	cmp	r0, #0
    672c:	dc03      	bgt.n	6736 <__sflush_r+0x106>
    672e:	2340      	movs	r3, #64	; 0x40
    6730:	89a2      	ldrh	r2, [r4, #12]
    6732:	4313      	orrs	r3, r2
    6734:	e7df      	b.n	66f6 <__sflush_r+0xc6>
    6736:	9b01      	ldr	r3, [sp, #4]
    6738:	183f      	adds	r7, r7, r0
    673a:	1a1b      	subs	r3, r3, r0
    673c:	9301      	str	r3, [sp, #4]
    673e:	e7ea      	b.n	6716 <__sflush_r+0xe6>
    6740:	20400001 	.word	0x20400001

00006744 <_fflush_r>:
    6744:	690b      	ldr	r3, [r1, #16]
    6746:	b570      	push	{r4, r5, r6, lr}
    6748:	0005      	movs	r5, r0
    674a:	000c      	movs	r4, r1
    674c:	2b00      	cmp	r3, #0
    674e:	d101      	bne.n	6754 <_fflush_r+0x10>
    6750:	2000      	movs	r0, #0
    6752:	bd70      	pop	{r4, r5, r6, pc}
    6754:	2800      	cmp	r0, #0
    6756:	d004      	beq.n	6762 <_fflush_r+0x1e>
    6758:	6983      	ldr	r3, [r0, #24]
    675a:	2b00      	cmp	r3, #0
    675c:	d101      	bne.n	6762 <_fflush_r+0x1e>
    675e:	f000 f85f 	bl	6820 <__sinit>
    6762:	4b0b      	ldr	r3, [pc, #44]	; (6790 <_fflush_r+0x4c>)
    6764:	429c      	cmp	r4, r3
    6766:	d109      	bne.n	677c <_fflush_r+0x38>
    6768:	686c      	ldr	r4, [r5, #4]
    676a:	220c      	movs	r2, #12
    676c:	5ea3      	ldrsh	r3, [r4, r2]
    676e:	2b00      	cmp	r3, #0
    6770:	d0ee      	beq.n	6750 <_fflush_r+0xc>
    6772:	0021      	movs	r1, r4
    6774:	0028      	movs	r0, r5
    6776:	f7ff ff5b 	bl	6630 <__sflush_r>
    677a:	e7ea      	b.n	6752 <_fflush_r+0xe>
    677c:	4b05      	ldr	r3, [pc, #20]	; (6794 <_fflush_r+0x50>)
    677e:	429c      	cmp	r4, r3
    6780:	d101      	bne.n	6786 <_fflush_r+0x42>
    6782:	68ac      	ldr	r4, [r5, #8]
    6784:	e7f1      	b.n	676a <_fflush_r+0x26>
    6786:	4b04      	ldr	r3, [pc, #16]	; (6798 <_fflush_r+0x54>)
    6788:	429c      	cmp	r4, r3
    678a:	d1ee      	bne.n	676a <_fflush_r+0x26>
    678c:	68ec      	ldr	r4, [r5, #12]
    678e:	e7ec      	b.n	676a <_fflush_r+0x26>
    6790:	00007ca4 	.word	0x00007ca4
    6794:	00007cc4 	.word	0x00007cc4
    6798:	00007c84 	.word	0x00007c84

0000679c <_cleanup_r>:
    679c:	b510      	push	{r4, lr}
    679e:	4902      	ldr	r1, [pc, #8]	; (67a8 <_cleanup_r+0xc>)
    67a0:	f000 f8b2 	bl	6908 <_fwalk_reent>
    67a4:	bd10      	pop	{r4, pc}
    67a6:	46c0      	nop			; (mov r8, r8)
    67a8:	00006745 	.word	0x00006745

000067ac <std.isra.0>:
    67ac:	2300      	movs	r3, #0
    67ae:	b510      	push	{r4, lr}
    67b0:	0004      	movs	r4, r0
    67b2:	6003      	str	r3, [r0, #0]
    67b4:	6043      	str	r3, [r0, #4]
    67b6:	6083      	str	r3, [r0, #8]
    67b8:	8181      	strh	r1, [r0, #12]
    67ba:	6643      	str	r3, [r0, #100]	; 0x64
    67bc:	81c2      	strh	r2, [r0, #14]
    67be:	6103      	str	r3, [r0, #16]
    67c0:	6143      	str	r3, [r0, #20]
    67c2:	6183      	str	r3, [r0, #24]
    67c4:	0019      	movs	r1, r3
    67c6:	2208      	movs	r2, #8
    67c8:	305c      	adds	r0, #92	; 0x5c
    67ca:	f7ff fd7f 	bl	62cc <memset>
    67ce:	4b05      	ldr	r3, [pc, #20]	; (67e4 <std.isra.0+0x38>)
    67d0:	6224      	str	r4, [r4, #32]
    67d2:	6263      	str	r3, [r4, #36]	; 0x24
    67d4:	4b04      	ldr	r3, [pc, #16]	; (67e8 <std.isra.0+0x3c>)
    67d6:	62a3      	str	r3, [r4, #40]	; 0x28
    67d8:	4b04      	ldr	r3, [pc, #16]	; (67ec <std.isra.0+0x40>)
    67da:	62e3      	str	r3, [r4, #44]	; 0x2c
    67dc:	4b04      	ldr	r3, [pc, #16]	; (67f0 <std.isra.0+0x44>)
    67de:	6323      	str	r3, [r4, #48]	; 0x30
    67e0:	bd10      	pop	{r4, pc}
    67e2:	46c0      	nop			; (mov r8, r8)
    67e4:	00006f7d 	.word	0x00006f7d
    67e8:	00006fa5 	.word	0x00006fa5
    67ec:	00006fdd 	.word	0x00006fdd
    67f0:	00007009 	.word	0x00007009

000067f4 <__sfmoreglue>:
    67f4:	b570      	push	{r4, r5, r6, lr}
    67f6:	2568      	movs	r5, #104	; 0x68
    67f8:	1e4a      	subs	r2, r1, #1
    67fa:	4355      	muls	r5, r2
    67fc:	000e      	movs	r6, r1
    67fe:	0029      	movs	r1, r5
    6800:	3174      	adds	r1, #116	; 0x74
    6802:	f7ff fdb5 	bl	6370 <_malloc_r>
    6806:	1e04      	subs	r4, r0, #0
    6808:	d008      	beq.n	681c <__sfmoreglue+0x28>
    680a:	2100      	movs	r1, #0
    680c:	002a      	movs	r2, r5
    680e:	6001      	str	r1, [r0, #0]
    6810:	6046      	str	r6, [r0, #4]
    6812:	300c      	adds	r0, #12
    6814:	60a0      	str	r0, [r4, #8]
    6816:	3268      	adds	r2, #104	; 0x68
    6818:	f7ff fd58 	bl	62cc <memset>
    681c:	0020      	movs	r0, r4
    681e:	bd70      	pop	{r4, r5, r6, pc}

00006820 <__sinit>:
    6820:	6983      	ldr	r3, [r0, #24]
    6822:	b513      	push	{r0, r1, r4, lr}
    6824:	0004      	movs	r4, r0
    6826:	2b00      	cmp	r3, #0
    6828:	d128      	bne.n	687c <__sinit+0x5c>
    682a:	6483      	str	r3, [r0, #72]	; 0x48
    682c:	64c3      	str	r3, [r0, #76]	; 0x4c
    682e:	6503      	str	r3, [r0, #80]	; 0x50
    6830:	4b13      	ldr	r3, [pc, #76]	; (6880 <__sinit+0x60>)
    6832:	4a14      	ldr	r2, [pc, #80]	; (6884 <__sinit+0x64>)
    6834:	681b      	ldr	r3, [r3, #0]
    6836:	6282      	str	r2, [r0, #40]	; 0x28
    6838:	9301      	str	r3, [sp, #4]
    683a:	4298      	cmp	r0, r3
    683c:	d101      	bne.n	6842 <__sinit+0x22>
    683e:	2301      	movs	r3, #1
    6840:	6183      	str	r3, [r0, #24]
    6842:	0020      	movs	r0, r4
    6844:	f000 f820 	bl	6888 <__sfp>
    6848:	6060      	str	r0, [r4, #4]
    684a:	0020      	movs	r0, r4
    684c:	f000 f81c 	bl	6888 <__sfp>
    6850:	60a0      	str	r0, [r4, #8]
    6852:	0020      	movs	r0, r4
    6854:	f000 f818 	bl	6888 <__sfp>
    6858:	2200      	movs	r2, #0
    685a:	60e0      	str	r0, [r4, #12]
    685c:	2104      	movs	r1, #4
    685e:	6860      	ldr	r0, [r4, #4]
    6860:	f7ff ffa4 	bl	67ac <std.isra.0>
    6864:	2201      	movs	r2, #1
    6866:	2109      	movs	r1, #9
    6868:	68a0      	ldr	r0, [r4, #8]
    686a:	f7ff ff9f 	bl	67ac <std.isra.0>
    686e:	2202      	movs	r2, #2
    6870:	2112      	movs	r1, #18
    6872:	68e0      	ldr	r0, [r4, #12]
    6874:	f7ff ff9a 	bl	67ac <std.isra.0>
    6878:	2301      	movs	r3, #1
    687a:	61a3      	str	r3, [r4, #24]
    687c:	bd13      	pop	{r0, r1, r4, pc}
    687e:	46c0      	nop			; (mov r8, r8)
    6880:	00007c80 	.word	0x00007c80
    6884:	0000679d 	.word	0x0000679d

00006888 <__sfp>:
    6888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    688a:	4b1e      	ldr	r3, [pc, #120]	; (6904 <__sfp+0x7c>)
    688c:	0007      	movs	r7, r0
    688e:	681e      	ldr	r6, [r3, #0]
    6890:	69b3      	ldr	r3, [r6, #24]
    6892:	2b00      	cmp	r3, #0
    6894:	d102      	bne.n	689c <__sfp+0x14>
    6896:	0030      	movs	r0, r6
    6898:	f7ff ffc2 	bl	6820 <__sinit>
    689c:	3648      	adds	r6, #72	; 0x48
    689e:	68b4      	ldr	r4, [r6, #8]
    68a0:	6873      	ldr	r3, [r6, #4]
    68a2:	3b01      	subs	r3, #1
    68a4:	d504      	bpl.n	68b0 <__sfp+0x28>
    68a6:	6833      	ldr	r3, [r6, #0]
    68a8:	2b00      	cmp	r3, #0
    68aa:	d007      	beq.n	68bc <__sfp+0x34>
    68ac:	6836      	ldr	r6, [r6, #0]
    68ae:	e7f6      	b.n	689e <__sfp+0x16>
    68b0:	220c      	movs	r2, #12
    68b2:	5ea5      	ldrsh	r5, [r4, r2]
    68b4:	2d00      	cmp	r5, #0
    68b6:	d00d      	beq.n	68d4 <__sfp+0x4c>
    68b8:	3468      	adds	r4, #104	; 0x68
    68ba:	e7f2      	b.n	68a2 <__sfp+0x1a>
    68bc:	2104      	movs	r1, #4
    68be:	0038      	movs	r0, r7
    68c0:	f7ff ff98 	bl	67f4 <__sfmoreglue>
    68c4:	6030      	str	r0, [r6, #0]
    68c6:	2800      	cmp	r0, #0
    68c8:	d1f0      	bne.n	68ac <__sfp+0x24>
    68ca:	230c      	movs	r3, #12
    68cc:	0004      	movs	r4, r0
    68ce:	603b      	str	r3, [r7, #0]
    68d0:	0020      	movs	r0, r4
    68d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    68d4:	2301      	movs	r3, #1
    68d6:	0020      	movs	r0, r4
    68d8:	425b      	negs	r3, r3
    68da:	81e3      	strh	r3, [r4, #14]
    68dc:	3302      	adds	r3, #2
    68de:	81a3      	strh	r3, [r4, #12]
    68e0:	6665      	str	r5, [r4, #100]	; 0x64
    68e2:	6025      	str	r5, [r4, #0]
    68e4:	60a5      	str	r5, [r4, #8]
    68e6:	6065      	str	r5, [r4, #4]
    68e8:	6125      	str	r5, [r4, #16]
    68ea:	6165      	str	r5, [r4, #20]
    68ec:	61a5      	str	r5, [r4, #24]
    68ee:	2208      	movs	r2, #8
    68f0:	0029      	movs	r1, r5
    68f2:	305c      	adds	r0, #92	; 0x5c
    68f4:	f7ff fcea 	bl	62cc <memset>
    68f8:	6365      	str	r5, [r4, #52]	; 0x34
    68fa:	63a5      	str	r5, [r4, #56]	; 0x38
    68fc:	64a5      	str	r5, [r4, #72]	; 0x48
    68fe:	64e5      	str	r5, [r4, #76]	; 0x4c
    6900:	e7e6      	b.n	68d0 <__sfp+0x48>
    6902:	46c0      	nop			; (mov r8, r8)
    6904:	00007c80 	.word	0x00007c80

00006908 <_fwalk_reent>:
    6908:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    690a:	0004      	movs	r4, r0
    690c:	0007      	movs	r7, r0
    690e:	2600      	movs	r6, #0
    6910:	9101      	str	r1, [sp, #4]
    6912:	3448      	adds	r4, #72	; 0x48
    6914:	2c00      	cmp	r4, #0
    6916:	d101      	bne.n	691c <_fwalk_reent+0x14>
    6918:	0030      	movs	r0, r6
    691a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    691c:	6863      	ldr	r3, [r4, #4]
    691e:	68a5      	ldr	r5, [r4, #8]
    6920:	9300      	str	r3, [sp, #0]
    6922:	9b00      	ldr	r3, [sp, #0]
    6924:	3b01      	subs	r3, #1
    6926:	9300      	str	r3, [sp, #0]
    6928:	d501      	bpl.n	692e <_fwalk_reent+0x26>
    692a:	6824      	ldr	r4, [r4, #0]
    692c:	e7f2      	b.n	6914 <_fwalk_reent+0xc>
    692e:	89ab      	ldrh	r3, [r5, #12]
    6930:	2b01      	cmp	r3, #1
    6932:	d908      	bls.n	6946 <_fwalk_reent+0x3e>
    6934:	220e      	movs	r2, #14
    6936:	5eab      	ldrsh	r3, [r5, r2]
    6938:	3301      	adds	r3, #1
    693a:	d004      	beq.n	6946 <_fwalk_reent+0x3e>
    693c:	0029      	movs	r1, r5
    693e:	0038      	movs	r0, r7
    6940:	9b01      	ldr	r3, [sp, #4]
    6942:	4798      	blx	r3
    6944:	4306      	orrs	r6, r0
    6946:	3568      	adds	r5, #104	; 0x68
    6948:	e7eb      	b.n	6922 <_fwalk_reent+0x1a>
	...

0000694c <__swhatbuf_r>:
    694c:	b570      	push	{r4, r5, r6, lr}
    694e:	000e      	movs	r6, r1
    6950:	001d      	movs	r5, r3
    6952:	230e      	movs	r3, #14
    6954:	5ec9      	ldrsh	r1, [r1, r3]
    6956:	b090      	sub	sp, #64	; 0x40
    6958:	0014      	movs	r4, r2
    695a:	2900      	cmp	r1, #0
    695c:	da07      	bge.n	696e <__swhatbuf_r+0x22>
    695e:	2300      	movs	r3, #0
    6960:	602b      	str	r3, [r5, #0]
    6962:	89b3      	ldrh	r3, [r6, #12]
    6964:	061b      	lsls	r3, r3, #24
    6966:	d411      	bmi.n	698c <__swhatbuf_r+0x40>
    6968:	2380      	movs	r3, #128	; 0x80
    696a:	00db      	lsls	r3, r3, #3
    696c:	e00f      	b.n	698e <__swhatbuf_r+0x42>
    696e:	aa01      	add	r2, sp, #4
    6970:	f000 fb76 	bl	7060 <_fstat_r>
    6974:	2800      	cmp	r0, #0
    6976:	dbf2      	blt.n	695e <__swhatbuf_r+0x12>
    6978:	22f0      	movs	r2, #240	; 0xf0
    697a:	9b02      	ldr	r3, [sp, #8]
    697c:	0212      	lsls	r2, r2, #8
    697e:	4013      	ands	r3, r2
    6980:	4a05      	ldr	r2, [pc, #20]	; (6998 <__swhatbuf_r+0x4c>)
    6982:	189b      	adds	r3, r3, r2
    6984:	425a      	negs	r2, r3
    6986:	4153      	adcs	r3, r2
    6988:	602b      	str	r3, [r5, #0]
    698a:	e7ed      	b.n	6968 <__swhatbuf_r+0x1c>
    698c:	2340      	movs	r3, #64	; 0x40
    698e:	2000      	movs	r0, #0
    6990:	6023      	str	r3, [r4, #0]
    6992:	b010      	add	sp, #64	; 0x40
    6994:	bd70      	pop	{r4, r5, r6, pc}
    6996:	46c0      	nop			; (mov r8, r8)
    6998:	ffffe000 	.word	0xffffe000

0000699c <__malloc_lock>:
    699c:	4770      	bx	lr

0000699e <__malloc_unlock>:
    699e:	4770      	bx	lr

000069a0 <__ssputs_r>:
    69a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    69a2:	688e      	ldr	r6, [r1, #8]
    69a4:	b085      	sub	sp, #20
    69a6:	0007      	movs	r7, r0
    69a8:	000c      	movs	r4, r1
    69aa:	9203      	str	r2, [sp, #12]
    69ac:	9301      	str	r3, [sp, #4]
    69ae:	429e      	cmp	r6, r3
    69b0:	d839      	bhi.n	6a26 <__ssputs_r+0x86>
    69b2:	2390      	movs	r3, #144	; 0x90
    69b4:	898a      	ldrh	r2, [r1, #12]
    69b6:	00db      	lsls	r3, r3, #3
    69b8:	421a      	tst	r2, r3
    69ba:	d034      	beq.n	6a26 <__ssputs_r+0x86>
    69bc:	2503      	movs	r5, #3
    69be:	6909      	ldr	r1, [r1, #16]
    69c0:	6823      	ldr	r3, [r4, #0]
    69c2:	1a5b      	subs	r3, r3, r1
    69c4:	9302      	str	r3, [sp, #8]
    69c6:	6963      	ldr	r3, [r4, #20]
    69c8:	9802      	ldr	r0, [sp, #8]
    69ca:	435d      	muls	r5, r3
    69cc:	0feb      	lsrs	r3, r5, #31
    69ce:	195d      	adds	r5, r3, r5
    69d0:	9b01      	ldr	r3, [sp, #4]
    69d2:	106d      	asrs	r5, r5, #1
    69d4:	3301      	adds	r3, #1
    69d6:	181b      	adds	r3, r3, r0
    69d8:	42ab      	cmp	r3, r5
    69da:	d900      	bls.n	69de <__ssputs_r+0x3e>
    69dc:	001d      	movs	r5, r3
    69de:	0553      	lsls	r3, r2, #21
    69e0:	d532      	bpl.n	6a48 <__ssputs_r+0xa8>
    69e2:	0029      	movs	r1, r5
    69e4:	0038      	movs	r0, r7
    69e6:	f7ff fcc3 	bl	6370 <_malloc_r>
    69ea:	1e06      	subs	r6, r0, #0
    69ec:	d109      	bne.n	6a02 <__ssputs_r+0x62>
    69ee:	230c      	movs	r3, #12
    69f0:	603b      	str	r3, [r7, #0]
    69f2:	2340      	movs	r3, #64	; 0x40
    69f4:	2001      	movs	r0, #1
    69f6:	89a2      	ldrh	r2, [r4, #12]
    69f8:	4240      	negs	r0, r0
    69fa:	4313      	orrs	r3, r2
    69fc:	81a3      	strh	r3, [r4, #12]
    69fe:	b005      	add	sp, #20
    6a00:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6a02:	9a02      	ldr	r2, [sp, #8]
    6a04:	6921      	ldr	r1, [r4, #16]
    6a06:	f000 fb5c 	bl	70c2 <memcpy>
    6a0a:	89a3      	ldrh	r3, [r4, #12]
    6a0c:	4a14      	ldr	r2, [pc, #80]	; (6a60 <__ssputs_r+0xc0>)
    6a0e:	401a      	ands	r2, r3
    6a10:	2380      	movs	r3, #128	; 0x80
    6a12:	4313      	orrs	r3, r2
    6a14:	81a3      	strh	r3, [r4, #12]
    6a16:	9b02      	ldr	r3, [sp, #8]
    6a18:	6126      	str	r6, [r4, #16]
    6a1a:	18f6      	adds	r6, r6, r3
    6a1c:	6026      	str	r6, [r4, #0]
    6a1e:	6165      	str	r5, [r4, #20]
    6a20:	9e01      	ldr	r6, [sp, #4]
    6a22:	1aed      	subs	r5, r5, r3
    6a24:	60a5      	str	r5, [r4, #8]
    6a26:	9b01      	ldr	r3, [sp, #4]
    6a28:	42b3      	cmp	r3, r6
    6a2a:	d200      	bcs.n	6a2e <__ssputs_r+0x8e>
    6a2c:	001e      	movs	r6, r3
    6a2e:	0032      	movs	r2, r6
    6a30:	9903      	ldr	r1, [sp, #12]
    6a32:	6820      	ldr	r0, [r4, #0]
    6a34:	f000 fb4e 	bl	70d4 <memmove>
    6a38:	68a3      	ldr	r3, [r4, #8]
    6a3a:	2000      	movs	r0, #0
    6a3c:	1b9b      	subs	r3, r3, r6
    6a3e:	60a3      	str	r3, [r4, #8]
    6a40:	6823      	ldr	r3, [r4, #0]
    6a42:	199e      	adds	r6, r3, r6
    6a44:	6026      	str	r6, [r4, #0]
    6a46:	e7da      	b.n	69fe <__ssputs_r+0x5e>
    6a48:	002a      	movs	r2, r5
    6a4a:	0038      	movs	r0, r7
    6a4c:	f000 fb54 	bl	70f8 <_realloc_r>
    6a50:	1e06      	subs	r6, r0, #0
    6a52:	d1e0      	bne.n	6a16 <__ssputs_r+0x76>
    6a54:	6921      	ldr	r1, [r4, #16]
    6a56:	0038      	movs	r0, r7
    6a58:	f7ff fc40 	bl	62dc <_free_r>
    6a5c:	e7c7      	b.n	69ee <__ssputs_r+0x4e>
    6a5e:	46c0      	nop			; (mov r8, r8)
    6a60:	fffffb7f 	.word	0xfffffb7f

00006a64 <_svfiprintf_r>:
    6a64:	b5f0      	push	{r4, r5, r6, r7, lr}
    6a66:	b09f      	sub	sp, #124	; 0x7c
    6a68:	9002      	str	r0, [sp, #8]
    6a6a:	9305      	str	r3, [sp, #20]
    6a6c:	898b      	ldrh	r3, [r1, #12]
    6a6e:	000f      	movs	r7, r1
    6a70:	0016      	movs	r6, r2
    6a72:	061b      	lsls	r3, r3, #24
    6a74:	d511      	bpl.n	6a9a <_svfiprintf_r+0x36>
    6a76:	690b      	ldr	r3, [r1, #16]
    6a78:	2b00      	cmp	r3, #0
    6a7a:	d10e      	bne.n	6a9a <_svfiprintf_r+0x36>
    6a7c:	2140      	movs	r1, #64	; 0x40
    6a7e:	f7ff fc77 	bl	6370 <_malloc_r>
    6a82:	6038      	str	r0, [r7, #0]
    6a84:	6138      	str	r0, [r7, #16]
    6a86:	2800      	cmp	r0, #0
    6a88:	d105      	bne.n	6a96 <_svfiprintf_r+0x32>
    6a8a:	230c      	movs	r3, #12
    6a8c:	9a02      	ldr	r2, [sp, #8]
    6a8e:	3801      	subs	r0, #1
    6a90:	6013      	str	r3, [r2, #0]
    6a92:	b01f      	add	sp, #124	; 0x7c
    6a94:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6a96:	2340      	movs	r3, #64	; 0x40
    6a98:	617b      	str	r3, [r7, #20]
    6a9a:	2300      	movs	r3, #0
    6a9c:	ad06      	add	r5, sp, #24
    6a9e:	616b      	str	r3, [r5, #20]
    6aa0:	3320      	adds	r3, #32
    6aa2:	766b      	strb	r3, [r5, #25]
    6aa4:	3310      	adds	r3, #16
    6aa6:	76ab      	strb	r3, [r5, #26]
    6aa8:	0034      	movs	r4, r6
    6aaa:	7823      	ldrb	r3, [r4, #0]
    6aac:	2b00      	cmp	r3, #0
    6aae:	d147      	bne.n	6b40 <_svfiprintf_r+0xdc>
    6ab0:	1ba3      	subs	r3, r4, r6
    6ab2:	9304      	str	r3, [sp, #16]
    6ab4:	d00d      	beq.n	6ad2 <_svfiprintf_r+0x6e>
    6ab6:	1ba3      	subs	r3, r4, r6
    6ab8:	0032      	movs	r2, r6
    6aba:	0039      	movs	r1, r7
    6abc:	9802      	ldr	r0, [sp, #8]
    6abe:	f7ff ff6f 	bl	69a0 <__ssputs_r>
    6ac2:	1c43      	adds	r3, r0, #1
    6ac4:	d100      	bne.n	6ac8 <_svfiprintf_r+0x64>
    6ac6:	e0b5      	b.n	6c34 <_svfiprintf_r+0x1d0>
    6ac8:	696a      	ldr	r2, [r5, #20]
    6aca:	9b04      	ldr	r3, [sp, #16]
    6acc:	4694      	mov	ip, r2
    6ace:	4463      	add	r3, ip
    6ad0:	616b      	str	r3, [r5, #20]
    6ad2:	7823      	ldrb	r3, [r4, #0]
    6ad4:	2b00      	cmp	r3, #0
    6ad6:	d100      	bne.n	6ada <_svfiprintf_r+0x76>
    6ad8:	e0ac      	b.n	6c34 <_svfiprintf_r+0x1d0>
    6ada:	2201      	movs	r2, #1
    6adc:	2300      	movs	r3, #0
    6ade:	4252      	negs	r2, r2
    6ae0:	606a      	str	r2, [r5, #4]
    6ae2:	a902      	add	r1, sp, #8
    6ae4:	3254      	adds	r2, #84	; 0x54
    6ae6:	1852      	adds	r2, r2, r1
    6ae8:	3401      	adds	r4, #1
    6aea:	602b      	str	r3, [r5, #0]
    6aec:	60eb      	str	r3, [r5, #12]
    6aee:	60ab      	str	r3, [r5, #8]
    6af0:	7013      	strb	r3, [r2, #0]
    6af2:	65ab      	str	r3, [r5, #88]	; 0x58
    6af4:	4e58      	ldr	r6, [pc, #352]	; (6c58 <_svfiprintf_r+0x1f4>)
    6af6:	2205      	movs	r2, #5
    6af8:	7821      	ldrb	r1, [r4, #0]
    6afa:	0030      	movs	r0, r6
    6afc:	f000 fad6 	bl	70ac <memchr>
    6b00:	1c62      	adds	r2, r4, #1
    6b02:	2800      	cmp	r0, #0
    6b04:	d120      	bne.n	6b48 <_svfiprintf_r+0xe4>
    6b06:	6829      	ldr	r1, [r5, #0]
    6b08:	06cb      	lsls	r3, r1, #27
    6b0a:	d504      	bpl.n	6b16 <_svfiprintf_r+0xb2>
    6b0c:	2353      	movs	r3, #83	; 0x53
    6b0e:	ae02      	add	r6, sp, #8
    6b10:	3020      	adds	r0, #32
    6b12:	199b      	adds	r3, r3, r6
    6b14:	7018      	strb	r0, [r3, #0]
    6b16:	070b      	lsls	r3, r1, #28
    6b18:	d504      	bpl.n	6b24 <_svfiprintf_r+0xc0>
    6b1a:	2353      	movs	r3, #83	; 0x53
    6b1c:	202b      	movs	r0, #43	; 0x2b
    6b1e:	ae02      	add	r6, sp, #8
    6b20:	199b      	adds	r3, r3, r6
    6b22:	7018      	strb	r0, [r3, #0]
    6b24:	7823      	ldrb	r3, [r4, #0]
    6b26:	2b2a      	cmp	r3, #42	; 0x2a
    6b28:	d016      	beq.n	6b58 <_svfiprintf_r+0xf4>
    6b2a:	2000      	movs	r0, #0
    6b2c:	210a      	movs	r1, #10
    6b2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6b30:	7822      	ldrb	r2, [r4, #0]
    6b32:	3a30      	subs	r2, #48	; 0x30
    6b34:	2a09      	cmp	r2, #9
    6b36:	d955      	bls.n	6be4 <_svfiprintf_r+0x180>
    6b38:	2800      	cmp	r0, #0
    6b3a:	d015      	beq.n	6b68 <_svfiprintf_r+0x104>
    6b3c:	9309      	str	r3, [sp, #36]	; 0x24
    6b3e:	e013      	b.n	6b68 <_svfiprintf_r+0x104>
    6b40:	2b25      	cmp	r3, #37	; 0x25
    6b42:	d0b5      	beq.n	6ab0 <_svfiprintf_r+0x4c>
    6b44:	3401      	adds	r4, #1
    6b46:	e7b0      	b.n	6aaa <_svfiprintf_r+0x46>
    6b48:	2301      	movs	r3, #1
    6b4a:	1b80      	subs	r0, r0, r6
    6b4c:	4083      	lsls	r3, r0
    6b4e:	6829      	ldr	r1, [r5, #0]
    6b50:	0014      	movs	r4, r2
    6b52:	430b      	orrs	r3, r1
    6b54:	602b      	str	r3, [r5, #0]
    6b56:	e7cd      	b.n	6af4 <_svfiprintf_r+0x90>
    6b58:	9b05      	ldr	r3, [sp, #20]
    6b5a:	1d18      	adds	r0, r3, #4
    6b5c:	681b      	ldr	r3, [r3, #0]
    6b5e:	9005      	str	r0, [sp, #20]
    6b60:	2b00      	cmp	r3, #0
    6b62:	db39      	blt.n	6bd8 <_svfiprintf_r+0x174>
    6b64:	9309      	str	r3, [sp, #36]	; 0x24
    6b66:	0014      	movs	r4, r2
    6b68:	7823      	ldrb	r3, [r4, #0]
    6b6a:	2b2e      	cmp	r3, #46	; 0x2e
    6b6c:	d10b      	bne.n	6b86 <_svfiprintf_r+0x122>
    6b6e:	7863      	ldrb	r3, [r4, #1]
    6b70:	1c62      	adds	r2, r4, #1
    6b72:	2b2a      	cmp	r3, #42	; 0x2a
    6b74:	d13e      	bne.n	6bf4 <_svfiprintf_r+0x190>
    6b76:	9b05      	ldr	r3, [sp, #20]
    6b78:	3402      	adds	r4, #2
    6b7a:	1d1a      	adds	r2, r3, #4
    6b7c:	681b      	ldr	r3, [r3, #0]
    6b7e:	9205      	str	r2, [sp, #20]
    6b80:	2b00      	cmp	r3, #0
    6b82:	db34      	blt.n	6bee <_svfiprintf_r+0x18a>
    6b84:	9307      	str	r3, [sp, #28]
    6b86:	4e35      	ldr	r6, [pc, #212]	; (6c5c <_svfiprintf_r+0x1f8>)
    6b88:	7821      	ldrb	r1, [r4, #0]
    6b8a:	2203      	movs	r2, #3
    6b8c:	0030      	movs	r0, r6
    6b8e:	f000 fa8d 	bl	70ac <memchr>
    6b92:	2800      	cmp	r0, #0
    6b94:	d006      	beq.n	6ba4 <_svfiprintf_r+0x140>
    6b96:	2340      	movs	r3, #64	; 0x40
    6b98:	1b80      	subs	r0, r0, r6
    6b9a:	4083      	lsls	r3, r0
    6b9c:	682a      	ldr	r2, [r5, #0]
    6b9e:	3401      	adds	r4, #1
    6ba0:	4313      	orrs	r3, r2
    6ba2:	602b      	str	r3, [r5, #0]
    6ba4:	7821      	ldrb	r1, [r4, #0]
    6ba6:	2206      	movs	r2, #6
    6ba8:	482d      	ldr	r0, [pc, #180]	; (6c60 <_svfiprintf_r+0x1fc>)
    6baa:	1c66      	adds	r6, r4, #1
    6bac:	7629      	strb	r1, [r5, #24]
    6bae:	f000 fa7d 	bl	70ac <memchr>
    6bb2:	2800      	cmp	r0, #0
    6bb4:	d046      	beq.n	6c44 <_svfiprintf_r+0x1e0>
    6bb6:	4b2b      	ldr	r3, [pc, #172]	; (6c64 <_svfiprintf_r+0x200>)
    6bb8:	2b00      	cmp	r3, #0
    6bba:	d12f      	bne.n	6c1c <_svfiprintf_r+0x1b8>
    6bbc:	6829      	ldr	r1, [r5, #0]
    6bbe:	9b05      	ldr	r3, [sp, #20]
    6bc0:	2207      	movs	r2, #7
    6bc2:	05c9      	lsls	r1, r1, #23
    6bc4:	d528      	bpl.n	6c18 <_svfiprintf_r+0x1b4>
    6bc6:	189b      	adds	r3, r3, r2
    6bc8:	4393      	bics	r3, r2
    6bca:	3308      	adds	r3, #8
    6bcc:	9305      	str	r3, [sp, #20]
    6bce:	696b      	ldr	r3, [r5, #20]
    6bd0:	9a03      	ldr	r2, [sp, #12]
    6bd2:	189b      	adds	r3, r3, r2
    6bd4:	616b      	str	r3, [r5, #20]
    6bd6:	e767      	b.n	6aa8 <_svfiprintf_r+0x44>
    6bd8:	425b      	negs	r3, r3
    6bda:	60eb      	str	r3, [r5, #12]
    6bdc:	2302      	movs	r3, #2
    6bde:	430b      	orrs	r3, r1
    6be0:	602b      	str	r3, [r5, #0]
    6be2:	e7c0      	b.n	6b66 <_svfiprintf_r+0x102>
    6be4:	434b      	muls	r3, r1
    6be6:	3401      	adds	r4, #1
    6be8:	189b      	adds	r3, r3, r2
    6bea:	2001      	movs	r0, #1
    6bec:	e7a0      	b.n	6b30 <_svfiprintf_r+0xcc>
    6bee:	2301      	movs	r3, #1
    6bf0:	425b      	negs	r3, r3
    6bf2:	e7c7      	b.n	6b84 <_svfiprintf_r+0x120>
    6bf4:	2300      	movs	r3, #0
    6bf6:	0014      	movs	r4, r2
    6bf8:	200a      	movs	r0, #10
    6bfa:	001a      	movs	r2, r3
    6bfc:	606b      	str	r3, [r5, #4]
    6bfe:	7821      	ldrb	r1, [r4, #0]
    6c00:	3930      	subs	r1, #48	; 0x30
    6c02:	2909      	cmp	r1, #9
    6c04:	d903      	bls.n	6c0e <_svfiprintf_r+0x1aa>
    6c06:	2b00      	cmp	r3, #0
    6c08:	d0bd      	beq.n	6b86 <_svfiprintf_r+0x122>
    6c0a:	9207      	str	r2, [sp, #28]
    6c0c:	e7bb      	b.n	6b86 <_svfiprintf_r+0x122>
    6c0e:	4342      	muls	r2, r0
    6c10:	3401      	adds	r4, #1
    6c12:	1852      	adds	r2, r2, r1
    6c14:	2301      	movs	r3, #1
    6c16:	e7f2      	b.n	6bfe <_svfiprintf_r+0x19a>
    6c18:	3307      	adds	r3, #7
    6c1a:	e7d5      	b.n	6bc8 <_svfiprintf_r+0x164>
    6c1c:	ab05      	add	r3, sp, #20
    6c1e:	9300      	str	r3, [sp, #0]
    6c20:	003a      	movs	r2, r7
    6c22:	4b11      	ldr	r3, [pc, #68]	; (6c68 <_svfiprintf_r+0x204>)
    6c24:	0029      	movs	r1, r5
    6c26:	9802      	ldr	r0, [sp, #8]
    6c28:	e000      	b.n	6c2c <_svfiprintf_r+0x1c8>
    6c2a:	bf00      	nop
    6c2c:	9003      	str	r0, [sp, #12]
    6c2e:	9b03      	ldr	r3, [sp, #12]
    6c30:	3301      	adds	r3, #1
    6c32:	d1cc      	bne.n	6bce <_svfiprintf_r+0x16a>
    6c34:	89bb      	ldrh	r3, [r7, #12]
    6c36:	980b      	ldr	r0, [sp, #44]	; 0x2c
    6c38:	065b      	lsls	r3, r3, #25
    6c3a:	d400      	bmi.n	6c3e <_svfiprintf_r+0x1da>
    6c3c:	e729      	b.n	6a92 <_svfiprintf_r+0x2e>
    6c3e:	2001      	movs	r0, #1
    6c40:	4240      	negs	r0, r0
    6c42:	e726      	b.n	6a92 <_svfiprintf_r+0x2e>
    6c44:	ab05      	add	r3, sp, #20
    6c46:	9300      	str	r3, [sp, #0]
    6c48:	003a      	movs	r2, r7
    6c4a:	4b07      	ldr	r3, [pc, #28]	; (6c68 <_svfiprintf_r+0x204>)
    6c4c:	0029      	movs	r1, r5
    6c4e:	9802      	ldr	r0, [sp, #8]
    6c50:	f000 f87a 	bl	6d48 <_printf_i>
    6c54:	e7ea      	b.n	6c2c <_svfiprintf_r+0x1c8>
    6c56:	46c0      	nop			; (mov r8, r8)
    6c58:	00007ce4 	.word	0x00007ce4
    6c5c:	00007cea 	.word	0x00007cea
    6c60:	00007cee 	.word	0x00007cee
    6c64:	00000000 	.word	0x00000000
    6c68:	000069a1 	.word	0x000069a1

00006c6c <_printf_common>:
    6c6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6c6e:	0015      	movs	r5, r2
    6c70:	9301      	str	r3, [sp, #4]
    6c72:	688a      	ldr	r2, [r1, #8]
    6c74:	690b      	ldr	r3, [r1, #16]
    6c76:	9000      	str	r0, [sp, #0]
    6c78:	000c      	movs	r4, r1
    6c7a:	4293      	cmp	r3, r2
    6c7c:	da00      	bge.n	6c80 <_printf_common+0x14>
    6c7e:	0013      	movs	r3, r2
    6c80:	0022      	movs	r2, r4
    6c82:	602b      	str	r3, [r5, #0]
    6c84:	3243      	adds	r2, #67	; 0x43
    6c86:	7812      	ldrb	r2, [r2, #0]
    6c88:	2a00      	cmp	r2, #0
    6c8a:	d001      	beq.n	6c90 <_printf_common+0x24>
    6c8c:	3301      	adds	r3, #1
    6c8e:	602b      	str	r3, [r5, #0]
    6c90:	6823      	ldr	r3, [r4, #0]
    6c92:	069b      	lsls	r3, r3, #26
    6c94:	d502      	bpl.n	6c9c <_printf_common+0x30>
    6c96:	682b      	ldr	r3, [r5, #0]
    6c98:	3302      	adds	r3, #2
    6c9a:	602b      	str	r3, [r5, #0]
    6c9c:	2706      	movs	r7, #6
    6c9e:	6823      	ldr	r3, [r4, #0]
    6ca0:	401f      	ands	r7, r3
    6ca2:	d027      	beq.n	6cf4 <_printf_common+0x88>
    6ca4:	0023      	movs	r3, r4
    6ca6:	3343      	adds	r3, #67	; 0x43
    6ca8:	781b      	ldrb	r3, [r3, #0]
    6caa:	1e5a      	subs	r2, r3, #1
    6cac:	4193      	sbcs	r3, r2
    6cae:	6822      	ldr	r2, [r4, #0]
    6cb0:	0692      	lsls	r2, r2, #26
    6cb2:	d430      	bmi.n	6d16 <_printf_common+0xaa>
    6cb4:	0022      	movs	r2, r4
    6cb6:	9901      	ldr	r1, [sp, #4]
    6cb8:	3243      	adds	r2, #67	; 0x43
    6cba:	9800      	ldr	r0, [sp, #0]
    6cbc:	9e08      	ldr	r6, [sp, #32]
    6cbe:	47b0      	blx	r6
    6cc0:	1c43      	adds	r3, r0, #1
    6cc2:	d025      	beq.n	6d10 <_printf_common+0xa4>
    6cc4:	2306      	movs	r3, #6
    6cc6:	6820      	ldr	r0, [r4, #0]
    6cc8:	682a      	ldr	r2, [r5, #0]
    6cca:	68e1      	ldr	r1, [r4, #12]
    6ccc:	4003      	ands	r3, r0
    6cce:	2500      	movs	r5, #0
    6cd0:	2b04      	cmp	r3, #4
    6cd2:	d103      	bne.n	6cdc <_printf_common+0x70>
    6cd4:	1a8d      	subs	r5, r1, r2
    6cd6:	43eb      	mvns	r3, r5
    6cd8:	17db      	asrs	r3, r3, #31
    6cda:	401d      	ands	r5, r3
    6cdc:	68a3      	ldr	r3, [r4, #8]
    6cde:	6922      	ldr	r2, [r4, #16]
    6ce0:	4293      	cmp	r3, r2
    6ce2:	dd01      	ble.n	6ce8 <_printf_common+0x7c>
    6ce4:	1a9b      	subs	r3, r3, r2
    6ce6:	18ed      	adds	r5, r5, r3
    6ce8:	2700      	movs	r7, #0
    6cea:	42bd      	cmp	r5, r7
    6cec:	d120      	bne.n	6d30 <_printf_common+0xc4>
    6cee:	2000      	movs	r0, #0
    6cf0:	e010      	b.n	6d14 <_printf_common+0xa8>
    6cf2:	3701      	adds	r7, #1
    6cf4:	68e3      	ldr	r3, [r4, #12]
    6cf6:	682a      	ldr	r2, [r5, #0]
    6cf8:	1a9b      	subs	r3, r3, r2
    6cfa:	429f      	cmp	r7, r3
    6cfc:	dad2      	bge.n	6ca4 <_printf_common+0x38>
    6cfe:	0022      	movs	r2, r4
    6d00:	2301      	movs	r3, #1
    6d02:	3219      	adds	r2, #25
    6d04:	9901      	ldr	r1, [sp, #4]
    6d06:	9800      	ldr	r0, [sp, #0]
    6d08:	9e08      	ldr	r6, [sp, #32]
    6d0a:	47b0      	blx	r6
    6d0c:	1c43      	adds	r3, r0, #1
    6d0e:	d1f0      	bne.n	6cf2 <_printf_common+0x86>
    6d10:	2001      	movs	r0, #1
    6d12:	4240      	negs	r0, r0
    6d14:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6d16:	2030      	movs	r0, #48	; 0x30
    6d18:	18e1      	adds	r1, r4, r3
    6d1a:	3143      	adds	r1, #67	; 0x43
    6d1c:	7008      	strb	r0, [r1, #0]
    6d1e:	0021      	movs	r1, r4
    6d20:	1c5a      	adds	r2, r3, #1
    6d22:	3145      	adds	r1, #69	; 0x45
    6d24:	7809      	ldrb	r1, [r1, #0]
    6d26:	18a2      	adds	r2, r4, r2
    6d28:	3243      	adds	r2, #67	; 0x43
    6d2a:	3302      	adds	r3, #2
    6d2c:	7011      	strb	r1, [r2, #0]
    6d2e:	e7c1      	b.n	6cb4 <_printf_common+0x48>
    6d30:	0022      	movs	r2, r4
    6d32:	2301      	movs	r3, #1
    6d34:	321a      	adds	r2, #26
    6d36:	9901      	ldr	r1, [sp, #4]
    6d38:	9800      	ldr	r0, [sp, #0]
    6d3a:	9e08      	ldr	r6, [sp, #32]
    6d3c:	47b0      	blx	r6
    6d3e:	1c43      	adds	r3, r0, #1
    6d40:	d0e6      	beq.n	6d10 <_printf_common+0xa4>
    6d42:	3701      	adds	r7, #1
    6d44:	e7d1      	b.n	6cea <_printf_common+0x7e>
	...

00006d48 <_printf_i>:
    6d48:	b5f0      	push	{r4, r5, r6, r7, lr}
    6d4a:	b08b      	sub	sp, #44	; 0x2c
    6d4c:	9206      	str	r2, [sp, #24]
    6d4e:	000a      	movs	r2, r1
    6d50:	3243      	adds	r2, #67	; 0x43
    6d52:	9307      	str	r3, [sp, #28]
    6d54:	9005      	str	r0, [sp, #20]
    6d56:	9204      	str	r2, [sp, #16]
    6d58:	7e0a      	ldrb	r2, [r1, #24]
    6d5a:	000c      	movs	r4, r1
    6d5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6d5e:	2a6e      	cmp	r2, #110	; 0x6e
    6d60:	d100      	bne.n	6d64 <_printf_i+0x1c>
    6d62:	e08f      	b.n	6e84 <_printf_i+0x13c>
    6d64:	d817      	bhi.n	6d96 <_printf_i+0x4e>
    6d66:	2a63      	cmp	r2, #99	; 0x63
    6d68:	d02c      	beq.n	6dc4 <_printf_i+0x7c>
    6d6a:	d808      	bhi.n	6d7e <_printf_i+0x36>
    6d6c:	2a00      	cmp	r2, #0
    6d6e:	d100      	bne.n	6d72 <_printf_i+0x2a>
    6d70:	e099      	b.n	6ea6 <_printf_i+0x15e>
    6d72:	2a58      	cmp	r2, #88	; 0x58
    6d74:	d054      	beq.n	6e20 <_printf_i+0xd8>
    6d76:	0026      	movs	r6, r4
    6d78:	3642      	adds	r6, #66	; 0x42
    6d7a:	7032      	strb	r2, [r6, #0]
    6d7c:	e029      	b.n	6dd2 <_printf_i+0x8a>
    6d7e:	2a64      	cmp	r2, #100	; 0x64
    6d80:	d001      	beq.n	6d86 <_printf_i+0x3e>
    6d82:	2a69      	cmp	r2, #105	; 0x69
    6d84:	d1f7      	bne.n	6d76 <_printf_i+0x2e>
    6d86:	6821      	ldr	r1, [r4, #0]
    6d88:	681a      	ldr	r2, [r3, #0]
    6d8a:	0608      	lsls	r0, r1, #24
    6d8c:	d523      	bpl.n	6dd6 <_printf_i+0x8e>
    6d8e:	1d11      	adds	r1, r2, #4
    6d90:	6019      	str	r1, [r3, #0]
    6d92:	6815      	ldr	r5, [r2, #0]
    6d94:	e025      	b.n	6de2 <_printf_i+0x9a>
    6d96:	2a73      	cmp	r2, #115	; 0x73
    6d98:	d100      	bne.n	6d9c <_printf_i+0x54>
    6d9a:	e088      	b.n	6eae <_printf_i+0x166>
    6d9c:	d808      	bhi.n	6db0 <_printf_i+0x68>
    6d9e:	2a6f      	cmp	r2, #111	; 0x6f
    6da0:	d029      	beq.n	6df6 <_printf_i+0xae>
    6da2:	2a70      	cmp	r2, #112	; 0x70
    6da4:	d1e7      	bne.n	6d76 <_printf_i+0x2e>
    6da6:	2220      	movs	r2, #32
    6da8:	6809      	ldr	r1, [r1, #0]
    6daa:	430a      	orrs	r2, r1
    6dac:	6022      	str	r2, [r4, #0]
    6dae:	e003      	b.n	6db8 <_printf_i+0x70>
    6db0:	2a75      	cmp	r2, #117	; 0x75
    6db2:	d020      	beq.n	6df6 <_printf_i+0xae>
    6db4:	2a78      	cmp	r2, #120	; 0x78
    6db6:	d1de      	bne.n	6d76 <_printf_i+0x2e>
    6db8:	0022      	movs	r2, r4
    6dba:	2178      	movs	r1, #120	; 0x78
    6dbc:	3245      	adds	r2, #69	; 0x45
    6dbe:	7011      	strb	r1, [r2, #0]
    6dc0:	4a6c      	ldr	r2, [pc, #432]	; (6f74 <_printf_i+0x22c>)
    6dc2:	e030      	b.n	6e26 <_printf_i+0xde>
    6dc4:	000e      	movs	r6, r1
    6dc6:	681a      	ldr	r2, [r3, #0]
    6dc8:	3642      	adds	r6, #66	; 0x42
    6dca:	1d11      	adds	r1, r2, #4
    6dcc:	6019      	str	r1, [r3, #0]
    6dce:	6813      	ldr	r3, [r2, #0]
    6dd0:	7033      	strb	r3, [r6, #0]
    6dd2:	2301      	movs	r3, #1
    6dd4:	e079      	b.n	6eca <_printf_i+0x182>
    6dd6:	0649      	lsls	r1, r1, #25
    6dd8:	d5d9      	bpl.n	6d8e <_printf_i+0x46>
    6dda:	1d11      	adds	r1, r2, #4
    6ddc:	6019      	str	r1, [r3, #0]
    6dde:	2300      	movs	r3, #0
    6de0:	5ed5      	ldrsh	r5, [r2, r3]
    6de2:	2d00      	cmp	r5, #0
    6de4:	da03      	bge.n	6dee <_printf_i+0xa6>
    6de6:	232d      	movs	r3, #45	; 0x2d
    6de8:	9a04      	ldr	r2, [sp, #16]
    6dea:	426d      	negs	r5, r5
    6dec:	7013      	strb	r3, [r2, #0]
    6dee:	4b62      	ldr	r3, [pc, #392]	; (6f78 <_printf_i+0x230>)
    6df0:	270a      	movs	r7, #10
    6df2:	9303      	str	r3, [sp, #12]
    6df4:	e02f      	b.n	6e56 <_printf_i+0x10e>
    6df6:	6820      	ldr	r0, [r4, #0]
    6df8:	6819      	ldr	r1, [r3, #0]
    6dfa:	0605      	lsls	r5, r0, #24
    6dfc:	d503      	bpl.n	6e06 <_printf_i+0xbe>
    6dfe:	1d08      	adds	r0, r1, #4
    6e00:	6018      	str	r0, [r3, #0]
    6e02:	680d      	ldr	r5, [r1, #0]
    6e04:	e005      	b.n	6e12 <_printf_i+0xca>
    6e06:	0640      	lsls	r0, r0, #25
    6e08:	d5f9      	bpl.n	6dfe <_printf_i+0xb6>
    6e0a:	680d      	ldr	r5, [r1, #0]
    6e0c:	1d08      	adds	r0, r1, #4
    6e0e:	6018      	str	r0, [r3, #0]
    6e10:	b2ad      	uxth	r5, r5
    6e12:	4b59      	ldr	r3, [pc, #356]	; (6f78 <_printf_i+0x230>)
    6e14:	2708      	movs	r7, #8
    6e16:	9303      	str	r3, [sp, #12]
    6e18:	2a6f      	cmp	r2, #111	; 0x6f
    6e1a:	d018      	beq.n	6e4e <_printf_i+0x106>
    6e1c:	270a      	movs	r7, #10
    6e1e:	e016      	b.n	6e4e <_printf_i+0x106>
    6e20:	3145      	adds	r1, #69	; 0x45
    6e22:	700a      	strb	r2, [r1, #0]
    6e24:	4a54      	ldr	r2, [pc, #336]	; (6f78 <_printf_i+0x230>)
    6e26:	9203      	str	r2, [sp, #12]
    6e28:	681a      	ldr	r2, [r3, #0]
    6e2a:	6821      	ldr	r1, [r4, #0]
    6e2c:	1d10      	adds	r0, r2, #4
    6e2e:	6018      	str	r0, [r3, #0]
    6e30:	6815      	ldr	r5, [r2, #0]
    6e32:	0608      	lsls	r0, r1, #24
    6e34:	d522      	bpl.n	6e7c <_printf_i+0x134>
    6e36:	07cb      	lsls	r3, r1, #31
    6e38:	d502      	bpl.n	6e40 <_printf_i+0xf8>
    6e3a:	2320      	movs	r3, #32
    6e3c:	4319      	orrs	r1, r3
    6e3e:	6021      	str	r1, [r4, #0]
    6e40:	2710      	movs	r7, #16
    6e42:	2d00      	cmp	r5, #0
    6e44:	d103      	bne.n	6e4e <_printf_i+0x106>
    6e46:	2320      	movs	r3, #32
    6e48:	6822      	ldr	r2, [r4, #0]
    6e4a:	439a      	bics	r2, r3
    6e4c:	6022      	str	r2, [r4, #0]
    6e4e:	0023      	movs	r3, r4
    6e50:	2200      	movs	r2, #0
    6e52:	3343      	adds	r3, #67	; 0x43
    6e54:	701a      	strb	r2, [r3, #0]
    6e56:	6863      	ldr	r3, [r4, #4]
    6e58:	60a3      	str	r3, [r4, #8]
    6e5a:	2b00      	cmp	r3, #0
    6e5c:	db5c      	blt.n	6f18 <_printf_i+0x1d0>
    6e5e:	2204      	movs	r2, #4
    6e60:	6821      	ldr	r1, [r4, #0]
    6e62:	4391      	bics	r1, r2
    6e64:	6021      	str	r1, [r4, #0]
    6e66:	2d00      	cmp	r5, #0
    6e68:	d158      	bne.n	6f1c <_printf_i+0x1d4>
    6e6a:	9e04      	ldr	r6, [sp, #16]
    6e6c:	2b00      	cmp	r3, #0
    6e6e:	d064      	beq.n	6f3a <_printf_i+0x1f2>
    6e70:	0026      	movs	r6, r4
    6e72:	9b03      	ldr	r3, [sp, #12]
    6e74:	3642      	adds	r6, #66	; 0x42
    6e76:	781b      	ldrb	r3, [r3, #0]
    6e78:	7033      	strb	r3, [r6, #0]
    6e7a:	e05e      	b.n	6f3a <_printf_i+0x1f2>
    6e7c:	0648      	lsls	r0, r1, #25
    6e7e:	d5da      	bpl.n	6e36 <_printf_i+0xee>
    6e80:	b2ad      	uxth	r5, r5
    6e82:	e7d8      	b.n	6e36 <_printf_i+0xee>
    6e84:	6809      	ldr	r1, [r1, #0]
    6e86:	681a      	ldr	r2, [r3, #0]
    6e88:	0608      	lsls	r0, r1, #24
    6e8a:	d505      	bpl.n	6e98 <_printf_i+0x150>
    6e8c:	1d11      	adds	r1, r2, #4
    6e8e:	6019      	str	r1, [r3, #0]
    6e90:	6813      	ldr	r3, [r2, #0]
    6e92:	6962      	ldr	r2, [r4, #20]
    6e94:	601a      	str	r2, [r3, #0]
    6e96:	e006      	b.n	6ea6 <_printf_i+0x15e>
    6e98:	0649      	lsls	r1, r1, #25
    6e9a:	d5f7      	bpl.n	6e8c <_printf_i+0x144>
    6e9c:	1d11      	adds	r1, r2, #4
    6e9e:	6019      	str	r1, [r3, #0]
    6ea0:	6813      	ldr	r3, [r2, #0]
    6ea2:	8aa2      	ldrh	r2, [r4, #20]
    6ea4:	801a      	strh	r2, [r3, #0]
    6ea6:	2300      	movs	r3, #0
    6ea8:	9e04      	ldr	r6, [sp, #16]
    6eaa:	6123      	str	r3, [r4, #16]
    6eac:	e054      	b.n	6f58 <_printf_i+0x210>
    6eae:	681a      	ldr	r2, [r3, #0]
    6eb0:	1d11      	adds	r1, r2, #4
    6eb2:	6019      	str	r1, [r3, #0]
    6eb4:	6816      	ldr	r6, [r2, #0]
    6eb6:	2100      	movs	r1, #0
    6eb8:	6862      	ldr	r2, [r4, #4]
    6eba:	0030      	movs	r0, r6
    6ebc:	f000 f8f6 	bl	70ac <memchr>
    6ec0:	2800      	cmp	r0, #0
    6ec2:	d001      	beq.n	6ec8 <_printf_i+0x180>
    6ec4:	1b80      	subs	r0, r0, r6
    6ec6:	6060      	str	r0, [r4, #4]
    6ec8:	6863      	ldr	r3, [r4, #4]
    6eca:	6123      	str	r3, [r4, #16]
    6ecc:	2300      	movs	r3, #0
    6ece:	9a04      	ldr	r2, [sp, #16]
    6ed0:	7013      	strb	r3, [r2, #0]
    6ed2:	e041      	b.n	6f58 <_printf_i+0x210>
    6ed4:	6923      	ldr	r3, [r4, #16]
    6ed6:	0032      	movs	r2, r6
    6ed8:	9906      	ldr	r1, [sp, #24]
    6eda:	9805      	ldr	r0, [sp, #20]
    6edc:	9d07      	ldr	r5, [sp, #28]
    6ede:	47a8      	blx	r5
    6ee0:	1c43      	adds	r3, r0, #1
    6ee2:	d043      	beq.n	6f6c <_printf_i+0x224>
    6ee4:	6823      	ldr	r3, [r4, #0]
    6ee6:	2500      	movs	r5, #0
    6ee8:	079b      	lsls	r3, r3, #30
    6eea:	d40f      	bmi.n	6f0c <_printf_i+0x1c4>
    6eec:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6eee:	68e0      	ldr	r0, [r4, #12]
    6ef0:	4298      	cmp	r0, r3
    6ef2:	da3d      	bge.n	6f70 <_printf_i+0x228>
    6ef4:	0018      	movs	r0, r3
    6ef6:	e03b      	b.n	6f70 <_printf_i+0x228>
    6ef8:	0022      	movs	r2, r4
    6efa:	2301      	movs	r3, #1
    6efc:	3219      	adds	r2, #25
    6efe:	9906      	ldr	r1, [sp, #24]
    6f00:	9805      	ldr	r0, [sp, #20]
    6f02:	9e07      	ldr	r6, [sp, #28]
    6f04:	47b0      	blx	r6
    6f06:	1c43      	adds	r3, r0, #1
    6f08:	d030      	beq.n	6f6c <_printf_i+0x224>
    6f0a:	3501      	adds	r5, #1
    6f0c:	68e3      	ldr	r3, [r4, #12]
    6f0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    6f10:	1a9b      	subs	r3, r3, r2
    6f12:	429d      	cmp	r5, r3
    6f14:	dbf0      	blt.n	6ef8 <_printf_i+0x1b0>
    6f16:	e7e9      	b.n	6eec <_printf_i+0x1a4>
    6f18:	2d00      	cmp	r5, #0
    6f1a:	d0a9      	beq.n	6e70 <_printf_i+0x128>
    6f1c:	9e04      	ldr	r6, [sp, #16]
    6f1e:	0028      	movs	r0, r5
    6f20:	0039      	movs	r1, r7
    6f22:	f7ff f88b 	bl	603c <__aeabi_uidivmod>
    6f26:	9b03      	ldr	r3, [sp, #12]
    6f28:	3e01      	subs	r6, #1
    6f2a:	5c5b      	ldrb	r3, [r3, r1]
    6f2c:	0028      	movs	r0, r5
    6f2e:	7033      	strb	r3, [r6, #0]
    6f30:	0039      	movs	r1, r7
    6f32:	f7fe fffd 	bl	5f30 <__udivsi3>
    6f36:	1e05      	subs	r5, r0, #0
    6f38:	d1f1      	bne.n	6f1e <_printf_i+0x1d6>
    6f3a:	2f08      	cmp	r7, #8
    6f3c:	d109      	bne.n	6f52 <_printf_i+0x20a>
    6f3e:	6823      	ldr	r3, [r4, #0]
    6f40:	07db      	lsls	r3, r3, #31
    6f42:	d506      	bpl.n	6f52 <_printf_i+0x20a>
    6f44:	6863      	ldr	r3, [r4, #4]
    6f46:	6922      	ldr	r2, [r4, #16]
    6f48:	4293      	cmp	r3, r2
    6f4a:	dc02      	bgt.n	6f52 <_printf_i+0x20a>
    6f4c:	2330      	movs	r3, #48	; 0x30
    6f4e:	3e01      	subs	r6, #1
    6f50:	7033      	strb	r3, [r6, #0]
    6f52:	9b04      	ldr	r3, [sp, #16]
    6f54:	1b9b      	subs	r3, r3, r6
    6f56:	6123      	str	r3, [r4, #16]
    6f58:	9b07      	ldr	r3, [sp, #28]
    6f5a:	aa09      	add	r2, sp, #36	; 0x24
    6f5c:	9300      	str	r3, [sp, #0]
    6f5e:	0021      	movs	r1, r4
    6f60:	9b06      	ldr	r3, [sp, #24]
    6f62:	9805      	ldr	r0, [sp, #20]
    6f64:	f7ff fe82 	bl	6c6c <_printf_common>
    6f68:	1c43      	adds	r3, r0, #1
    6f6a:	d1b3      	bne.n	6ed4 <_printf_i+0x18c>
    6f6c:	2001      	movs	r0, #1
    6f6e:	4240      	negs	r0, r0
    6f70:	b00b      	add	sp, #44	; 0x2c
    6f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6f74:	00007d06 	.word	0x00007d06
    6f78:	00007cf5 	.word	0x00007cf5

00006f7c <__sread>:
    6f7c:	b570      	push	{r4, r5, r6, lr}
    6f7e:	000c      	movs	r4, r1
    6f80:	250e      	movs	r5, #14
    6f82:	5f49      	ldrsh	r1, [r1, r5]
    6f84:	f000 f8de 	bl	7144 <_read_r>
    6f88:	2800      	cmp	r0, #0
    6f8a:	db03      	blt.n	6f94 <__sread+0x18>
    6f8c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    6f8e:	181b      	adds	r3, r3, r0
    6f90:	6563      	str	r3, [r4, #84]	; 0x54
    6f92:	bd70      	pop	{r4, r5, r6, pc}
    6f94:	89a3      	ldrh	r3, [r4, #12]
    6f96:	4a02      	ldr	r2, [pc, #8]	; (6fa0 <__sread+0x24>)
    6f98:	4013      	ands	r3, r2
    6f9a:	81a3      	strh	r3, [r4, #12]
    6f9c:	e7f9      	b.n	6f92 <__sread+0x16>
    6f9e:	46c0      	nop			; (mov r8, r8)
    6fa0:	ffffefff 	.word	0xffffefff

00006fa4 <__swrite>:
    6fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6fa6:	001f      	movs	r7, r3
    6fa8:	898b      	ldrh	r3, [r1, #12]
    6faa:	0005      	movs	r5, r0
    6fac:	000c      	movs	r4, r1
    6fae:	0016      	movs	r6, r2
    6fb0:	05db      	lsls	r3, r3, #23
    6fb2:	d505      	bpl.n	6fc0 <__swrite+0x1c>
    6fb4:	230e      	movs	r3, #14
    6fb6:	5ec9      	ldrsh	r1, [r1, r3]
    6fb8:	2200      	movs	r2, #0
    6fba:	2302      	movs	r3, #2
    6fbc:	f000 f862 	bl	7084 <_lseek_r>
    6fc0:	89a3      	ldrh	r3, [r4, #12]
    6fc2:	4a05      	ldr	r2, [pc, #20]	; (6fd8 <__swrite+0x34>)
    6fc4:	0028      	movs	r0, r5
    6fc6:	4013      	ands	r3, r2
    6fc8:	81a3      	strh	r3, [r4, #12]
    6fca:	0032      	movs	r2, r6
    6fcc:	230e      	movs	r3, #14
    6fce:	5ee1      	ldrsh	r1, [r4, r3]
    6fd0:	003b      	movs	r3, r7
    6fd2:	f000 f81f 	bl	7014 <_write_r>
    6fd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6fd8:	ffffefff 	.word	0xffffefff

00006fdc <__sseek>:
    6fdc:	b570      	push	{r4, r5, r6, lr}
    6fde:	000c      	movs	r4, r1
    6fe0:	250e      	movs	r5, #14
    6fe2:	5f49      	ldrsh	r1, [r1, r5]
    6fe4:	f000 f84e 	bl	7084 <_lseek_r>
    6fe8:	89a3      	ldrh	r3, [r4, #12]
    6fea:	1c42      	adds	r2, r0, #1
    6fec:	d103      	bne.n	6ff6 <__sseek+0x1a>
    6fee:	4a05      	ldr	r2, [pc, #20]	; (7004 <__sseek+0x28>)
    6ff0:	4013      	ands	r3, r2
    6ff2:	81a3      	strh	r3, [r4, #12]
    6ff4:	bd70      	pop	{r4, r5, r6, pc}
    6ff6:	2280      	movs	r2, #128	; 0x80
    6ff8:	0152      	lsls	r2, r2, #5
    6ffa:	4313      	orrs	r3, r2
    6ffc:	81a3      	strh	r3, [r4, #12]
    6ffe:	6560      	str	r0, [r4, #84]	; 0x54
    7000:	e7f8      	b.n	6ff4 <__sseek+0x18>
    7002:	46c0      	nop			; (mov r8, r8)
    7004:	ffffefff 	.word	0xffffefff

00007008 <__sclose>:
    7008:	b510      	push	{r4, lr}
    700a:	230e      	movs	r3, #14
    700c:	5ec9      	ldrsh	r1, [r1, r3]
    700e:	f000 f815 	bl	703c <_close_r>
    7012:	bd10      	pop	{r4, pc}

00007014 <_write_r>:
    7014:	b570      	push	{r4, r5, r6, lr}
    7016:	0005      	movs	r5, r0
    7018:	0008      	movs	r0, r1
    701a:	0011      	movs	r1, r2
    701c:	2200      	movs	r2, #0
    701e:	4c06      	ldr	r4, [pc, #24]	; (7038 <_write_r+0x24>)
    7020:	6022      	str	r2, [r4, #0]
    7022:	001a      	movs	r2, r3
    7024:	f7fc fc00 	bl	3828 <_write>
    7028:	1c43      	adds	r3, r0, #1
    702a:	d103      	bne.n	7034 <_write_r+0x20>
    702c:	6823      	ldr	r3, [r4, #0]
    702e:	2b00      	cmp	r3, #0
    7030:	d000      	beq.n	7034 <_write_r+0x20>
    7032:	602b      	str	r3, [r5, #0]
    7034:	bd70      	pop	{r4, r5, r6, pc}
    7036:	46c0      	nop			; (mov r8, r8)
    7038:	20000e2c 	.word	0x20000e2c

0000703c <_close_r>:
    703c:	2300      	movs	r3, #0
    703e:	b570      	push	{r4, r5, r6, lr}
    7040:	4c06      	ldr	r4, [pc, #24]	; (705c <_close_r+0x20>)
    7042:	0005      	movs	r5, r0
    7044:	0008      	movs	r0, r1
    7046:	6023      	str	r3, [r4, #0]
    7048:	f7fc fc28 	bl	389c <_close>
    704c:	1c43      	adds	r3, r0, #1
    704e:	d103      	bne.n	7058 <_close_r+0x1c>
    7050:	6823      	ldr	r3, [r4, #0]
    7052:	2b00      	cmp	r3, #0
    7054:	d000      	beq.n	7058 <_close_r+0x1c>
    7056:	602b      	str	r3, [r5, #0]
    7058:	bd70      	pop	{r4, r5, r6, pc}
    705a:	46c0      	nop			; (mov r8, r8)
    705c:	20000e2c 	.word	0x20000e2c

00007060 <_fstat_r>:
    7060:	2300      	movs	r3, #0
    7062:	b570      	push	{r4, r5, r6, lr}
    7064:	4c06      	ldr	r4, [pc, #24]	; (7080 <_fstat_r+0x20>)
    7066:	0005      	movs	r5, r0
    7068:	0008      	movs	r0, r1
    706a:	0011      	movs	r1, r2
    706c:	6023      	str	r3, [r4, #0]
    706e:	f7fc fc18 	bl	38a2 <_fstat>
    7072:	1c43      	adds	r3, r0, #1
    7074:	d103      	bne.n	707e <_fstat_r+0x1e>
    7076:	6823      	ldr	r3, [r4, #0]
    7078:	2b00      	cmp	r3, #0
    707a:	d000      	beq.n	707e <_fstat_r+0x1e>
    707c:	602b      	str	r3, [r5, #0]
    707e:	bd70      	pop	{r4, r5, r6, pc}
    7080:	20000e2c 	.word	0x20000e2c

00007084 <_lseek_r>:
    7084:	b570      	push	{r4, r5, r6, lr}
    7086:	0005      	movs	r5, r0
    7088:	0008      	movs	r0, r1
    708a:	0011      	movs	r1, r2
    708c:	2200      	movs	r2, #0
    708e:	4c06      	ldr	r4, [pc, #24]	; (70a8 <_lseek_r+0x24>)
    7090:	6022      	str	r2, [r4, #0]
    7092:	001a      	movs	r2, r3
    7094:	f7fc fc0a 	bl	38ac <_lseek>
    7098:	1c43      	adds	r3, r0, #1
    709a:	d103      	bne.n	70a4 <_lseek_r+0x20>
    709c:	6823      	ldr	r3, [r4, #0]
    709e:	2b00      	cmp	r3, #0
    70a0:	d000      	beq.n	70a4 <_lseek_r+0x20>
    70a2:	602b      	str	r3, [r5, #0]
    70a4:	bd70      	pop	{r4, r5, r6, pc}
    70a6:	46c0      	nop			; (mov r8, r8)
    70a8:	20000e2c 	.word	0x20000e2c

000070ac <memchr>:
    70ac:	b2c9      	uxtb	r1, r1
    70ae:	1882      	adds	r2, r0, r2
    70b0:	4290      	cmp	r0, r2
    70b2:	d101      	bne.n	70b8 <memchr+0xc>
    70b4:	2000      	movs	r0, #0
    70b6:	4770      	bx	lr
    70b8:	7803      	ldrb	r3, [r0, #0]
    70ba:	428b      	cmp	r3, r1
    70bc:	d0fb      	beq.n	70b6 <memchr+0xa>
    70be:	3001      	adds	r0, #1
    70c0:	e7f6      	b.n	70b0 <memchr+0x4>

000070c2 <memcpy>:
    70c2:	2300      	movs	r3, #0
    70c4:	b510      	push	{r4, lr}
    70c6:	429a      	cmp	r2, r3
    70c8:	d100      	bne.n	70cc <memcpy+0xa>
    70ca:	bd10      	pop	{r4, pc}
    70cc:	5ccc      	ldrb	r4, [r1, r3]
    70ce:	54c4      	strb	r4, [r0, r3]
    70d0:	3301      	adds	r3, #1
    70d2:	e7f8      	b.n	70c6 <memcpy+0x4>

000070d4 <memmove>:
    70d4:	b510      	push	{r4, lr}
    70d6:	4288      	cmp	r0, r1
    70d8:	d902      	bls.n	70e0 <memmove+0xc>
    70da:	188b      	adds	r3, r1, r2
    70dc:	4298      	cmp	r0, r3
    70de:	d308      	bcc.n	70f2 <memmove+0x1e>
    70e0:	2300      	movs	r3, #0
    70e2:	429a      	cmp	r2, r3
    70e4:	d007      	beq.n	70f6 <memmove+0x22>
    70e6:	5ccc      	ldrb	r4, [r1, r3]
    70e8:	54c4      	strb	r4, [r0, r3]
    70ea:	3301      	adds	r3, #1
    70ec:	e7f9      	b.n	70e2 <memmove+0xe>
    70ee:	5c8b      	ldrb	r3, [r1, r2]
    70f0:	5483      	strb	r3, [r0, r2]
    70f2:	3a01      	subs	r2, #1
    70f4:	d2fb      	bcs.n	70ee <memmove+0x1a>
    70f6:	bd10      	pop	{r4, pc}

000070f8 <_realloc_r>:
    70f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    70fa:	0007      	movs	r7, r0
    70fc:	000d      	movs	r5, r1
    70fe:	0016      	movs	r6, r2
    7100:	2900      	cmp	r1, #0
    7102:	d105      	bne.n	7110 <_realloc_r+0x18>
    7104:	0011      	movs	r1, r2
    7106:	f7ff f933 	bl	6370 <_malloc_r>
    710a:	0004      	movs	r4, r0
    710c:	0020      	movs	r0, r4
    710e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7110:	2a00      	cmp	r2, #0
    7112:	d103      	bne.n	711c <_realloc_r+0x24>
    7114:	f7ff f8e2 	bl	62dc <_free_r>
    7118:	0034      	movs	r4, r6
    711a:	e7f7      	b.n	710c <_realloc_r+0x14>
    711c:	f000 f826 	bl	716c <_malloc_usable_size_r>
    7120:	002c      	movs	r4, r5
    7122:	4286      	cmp	r6, r0
    7124:	d9f2      	bls.n	710c <_realloc_r+0x14>
    7126:	0031      	movs	r1, r6
    7128:	0038      	movs	r0, r7
    712a:	f7ff f921 	bl	6370 <_malloc_r>
    712e:	1e04      	subs	r4, r0, #0
    7130:	d0ec      	beq.n	710c <_realloc_r+0x14>
    7132:	0029      	movs	r1, r5
    7134:	0032      	movs	r2, r6
    7136:	f7ff ffc4 	bl	70c2 <memcpy>
    713a:	0029      	movs	r1, r5
    713c:	0038      	movs	r0, r7
    713e:	f7ff f8cd 	bl	62dc <_free_r>
    7142:	e7e3      	b.n	710c <_realloc_r+0x14>

00007144 <_read_r>:
    7144:	b570      	push	{r4, r5, r6, lr}
    7146:	0005      	movs	r5, r0
    7148:	0008      	movs	r0, r1
    714a:	0011      	movs	r1, r2
    714c:	2200      	movs	r2, #0
    714e:	4c06      	ldr	r4, [pc, #24]	; (7168 <_read_r+0x24>)
    7150:	6022      	str	r2, [r4, #0]
    7152:	001a      	movs	r2, r3
    7154:	f7fc fb46 	bl	37e4 <_read>
    7158:	1c43      	adds	r3, r0, #1
    715a:	d103      	bne.n	7164 <_read_r+0x20>
    715c:	6823      	ldr	r3, [r4, #0]
    715e:	2b00      	cmp	r3, #0
    7160:	d000      	beq.n	7164 <_read_r+0x20>
    7162:	602b      	str	r3, [r5, #0]
    7164:	bd70      	pop	{r4, r5, r6, pc}
    7166:	46c0      	nop			; (mov r8, r8)
    7168:	20000e2c 	.word	0x20000e2c

0000716c <_malloc_usable_size_r>:
    716c:	1f0b      	subs	r3, r1, #4
    716e:	681b      	ldr	r3, [r3, #0]
    7170:	1f18      	subs	r0, r3, #4
    7172:	2b00      	cmp	r3, #0
    7174:	da01      	bge.n	717a <_malloc_usable_size_r+0xe>
    7176:	580b      	ldr	r3, [r1, r0]
    7178:	18c0      	adds	r0, r0, r3
    717a:	4770      	bx	lr
    717c:	0000037c 	.word	0x0000037c
    7180:	0000037c 	.word	0x0000037c
    7184:	00000358 	.word	0x00000358
    7188:	0000037c 	.word	0x0000037c
    718c:	00000358 	.word	0x00000358
    7190:	0000033e 	.word	0x0000033e
    7194:	0000033e 	.word	0x0000033e
    7198:	0000037c 	.word	0x0000037c
    719c:	0000037c 	.word	0x0000037c
    71a0:	0000037c 	.word	0x0000037c
    71a4:	0000037c 	.word	0x0000037c
    71a8:	0000037c 	.word	0x0000037c
    71ac:	0000037c 	.word	0x0000037c
    71b0:	0000037c 	.word	0x0000037c
    71b4:	0000037c 	.word	0x0000037c
    71b8:	0000037c 	.word	0x0000037c
    71bc:	0000037c 	.word	0x0000037c
    71c0:	0000037c 	.word	0x0000037c
    71c4:	0000037c 	.word	0x0000037c
    71c8:	0000037c 	.word	0x0000037c
    71cc:	0000037c 	.word	0x0000037c
    71d0:	0000037c 	.word	0x0000037c
    71d4:	0000037c 	.word	0x0000037c
    71d8:	0000037c 	.word	0x0000037c
    71dc:	0000037c 	.word	0x0000037c
    71e0:	0000037c 	.word	0x0000037c
    71e4:	0000037c 	.word	0x0000037c
    71e8:	0000037c 	.word	0x0000037c
    71ec:	0000037c 	.word	0x0000037c
    71f0:	0000037c 	.word	0x0000037c
    71f4:	0000037c 	.word	0x0000037c
    71f8:	0000037c 	.word	0x0000037c
    71fc:	0000037c 	.word	0x0000037c
    7200:	0000037c 	.word	0x0000037c
    7204:	0000037c 	.word	0x0000037c
    7208:	0000037c 	.word	0x0000037c
    720c:	0000037c 	.word	0x0000037c
    7210:	0000037c 	.word	0x0000037c
    7214:	0000037c 	.word	0x0000037c
    7218:	0000037c 	.word	0x0000037c
    721c:	0000037c 	.word	0x0000037c
    7220:	0000037c 	.word	0x0000037c
    7224:	0000037c 	.word	0x0000037c
    7228:	0000037c 	.word	0x0000037c
    722c:	0000037c 	.word	0x0000037c
    7230:	0000037c 	.word	0x0000037c
    7234:	0000037c 	.word	0x0000037c
    7238:	0000037c 	.word	0x0000037c
    723c:	0000037c 	.word	0x0000037c
    7240:	0000037c 	.word	0x0000037c
    7244:	0000037c 	.word	0x0000037c
    7248:	0000037c 	.word	0x0000037c
    724c:	0000037c 	.word	0x0000037c
    7250:	0000037c 	.word	0x0000037c
    7254:	0000037c 	.word	0x0000037c
    7258:	0000037c 	.word	0x0000037c
    725c:	0000037c 	.word	0x0000037c
    7260:	0000037c 	.word	0x0000037c
    7264:	0000037c 	.word	0x0000037c
    7268:	0000037c 	.word	0x0000037c
    726c:	0000037c 	.word	0x0000037c
    7270:	0000037c 	.word	0x0000037c
    7274:	0000037c 	.word	0x0000037c
    7278:	0000037c 	.word	0x0000037c
    727c:	00000358 	.word	0x00000358
    7280:	00000358 	.word	0x00000358
    7284:	00000360 	.word	0x00000360
    7288:	00000360 	.word	0x00000360
    728c:	00000360 	.word	0x00000360
    7290:	00000360 	.word	0x00000360

00007294 <mmc_trans_multipliers>:
    7294:	00000000 0000000a 0000000c 0000000d     ................
    72a4:	0000000f 00000014 0000001a 0000001e     ................
    72b4:	00000023 00000028 0000002d 00000034     #...(...-...4...
    72c4:	00000037 0000003c 00000046 00000050     7...<...F...P...

000072d4 <sd_mmc_trans_units>:
    72d4:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

000072f0 <sd_trans_multipliers>:
    72f0:	00000000 0000000a 0000000c 0000000d     ................
    7300:	0000000f 00000014 00000019 0000001e     ................
    7310:	00000023 00000028 0000002d 00000032     #...(...-...2...
    7320:	00000037 0000003c 00000046 00000050     7...<...F...P...
    7330:	42000800 42000c00 42001000 42001400     ...B...B...B...B
    7340:	42001800 42001c00 00002f7a 00002f76     ...B...Bz/..v/..
    7350:	00002f76 00002fdc 00002fdc 00002f8e     v/.../.../.../..
    7360:	00002f80 00002f94 00002fca 0000319c     ./.../.../...1..
    7370:	0000317c 0000317c 00003208 0000318e     |1..|1...2...1..
    7380:	000031aa 00003180 000031b8 000031f8     .1...1...1...1..

00007390 <LfnOfs>:
    7390:	07050301 12100e09 1c181614 0000001e     ................

000073a0 <excvt.4558>:
    73a0:	b6909a80 808fb78e d8d4d3d2 8f8eded7     ................
    73b0:	e2929290 ebeae399 9d9a9959 9f9e9d9c     ........Y.......
    73c0:	e9e0d6b5 a7a6a5a5 abaaa9a8 afae21ac     .............!..
    73d0:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
    73e0:	c3c2c1c0 c7c7c5c4 cbcac9c8 cfcecdcc     ................
    73f0:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
    7400:	e3e2e1e0 e7e6e5e5 ebeae9e7 efeeeded     ................
    7410:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................
    7420:	3c3a2a22 7f7c3f3e 00000000 3d3b2c2b     "*:<>?|.....+,;=
    7430:	00005d5b                                []..

00007434 <Tbl>:
    7434:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
    7444:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
    7454:	00e600c9 00f400c6 00f200f6 00f900fb     ................
    7464:	00d600ff 00f800dc 00d800a3 019200d7     ................
    7474:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
    7484:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
    7494:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
    74a4:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
    74b4:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
    74c4:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
    74d4:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
    74e4:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
    74f4:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
    7504:	00da00de 00d900db 00dd00fd 00b400af     ................
    7514:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
    7524:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

00007534 <tbl_lower.4308>:
    7534:	00620061 00640063 00660065 00680067     a.b.c.d.e.f.g.h.
    7544:	006a0069 006c006b 006e006d 0070006f     i.j.k.l.m.n.o.p.
    7554:	00720071 00740073 00760075 00780077     q.r.s.t.u.v.w.x.
    7564:	007a0079 00a200a1 00a500a3 00af00ac     y.z.............
    7574:	00e100e0 00e300e2 00e500e4 00e700e6     ................
    7584:	00e900e8 00eb00ea 00ed00ec 00ef00ee     ................
    7594:	00f100f0 00f300f2 00f500f4 00f800f6     ................
    75a4:	00fa00f9 00fc00fb 00fe00fd 010100ff     ................
    75b4:	01050103 01090107 010d010b 0111010f     ................
    75c4:	01150113 01190117 011d011b 0121011f     ..............!.
    75d4:	01250123 01290127 012d012b 0131012f     #.%.'.).+.-./.1.
    75e4:	01350133 013a0137 013e013c 01420140     3.5.7.:.<.>.@.B.
    75f4:	01460144 014b0148 014f014d 01530151     D.F.H.K.M.O.Q.S.
    7604:	01570155 015b0159 015f015d 01630161     U.W.Y.[.]._.a.c.
    7614:	01670165 016b0169 016f016d 01730171     e.g.i.k.m.o.q.s.
    7624:	01770175 017c017a 0192017e 03b203b1     u.w.z.|.~.......
    7634:	03b403b3 03b603b5 03b803b7 03ba03b9     ................
    7644:	03bc03bb 03be03bd 03c003bf 03c303c1     ................
    7654:	03c503c4 03c703c6 03c903c8 043003ca     ..............0.
    7664:	04320431 04340433 04360435 04380437     1.2.3.4.5.6.7.8.
    7674:	043a0439 043c043b 043e043d 0440043f     9.:.;.<.=.>.?.@.
    7684:	04420441 04440443 04460445 04480447     A.B.C.D.E.F.G.H.
    7694:	044a0449 044c044b 044e044d 0451044f     I.J.K.L.M.N.O.Q.
    76a4:	04530452 04550454 04570456 04590458     R.S.T.U.V.W.X.Y.
    76b4:	045b045a 045e045c 2170045f 21722171     Z.[.\.^._.p!q!r!
    76c4:	21742173 21762175 21782177 217a2179     s!t!u!v!w!x!y!z!
    76d4:	217c217b 217e217d ff41217f ff43ff42     {!|!}!~!.!A.B.C.
    76e4:	ff45ff44 ff47ff46 ff49ff48 ff4bff4a     D.E.F.G.H.I.J.K.
    76f4:	ff4dff4c ff4fff4e ff51ff50 ff53ff52     L.M.N.O.P.Q.R.S.
    7704:	ff55ff54 ff57ff56 ff59ff58 0000ff5a     T.U.V.W.X.Y.Z...

00007714 <tbl_upper.4309>:
    7714:	00420041 00440043 00460045 00480047     A.B.C.D.E.F.G.H.
    7724:	004a0049 004c004b 004e004d 0050004f     I.J.K.L.M.N.O.P.
    7734:	00520051 00540053 00560055 00580057     Q.R.S.T.U.V.W.X.
    7744:	005a0059 ffe00021 ffe5ffe1 ffe3ffe2     Y.Z.!...........
    7754:	00c100c0 00c300c2 00c500c4 00c700c6     ................
    7764:	00c900c8 00cb00ca 00cd00cc 00cf00ce     ................
    7774:	00d100d0 00d300d2 00d500d4 00d800d6     ................
    7784:	00da00d9 00dc00db 00de00dd 01000178     ............x...
    7794:	01040102 01080106 010c010a 0110010e     ................
    77a4:	01140112 01180116 011c011a 0120011e     .............. .
    77b4:	01240122 01280126 012c012a 0130012e     ".$.&.(.*.,...0.
    77c4:	01340132 01390136 013d013b 0141013f     2.4.6.9.;.=.?.A.
    77d4:	01450143 014a0147 014e014c 01520150     C.E.G.J.L.N.P.R.
    77e4:	01560154 015a0158 015e015c 01620160     T.V.X.Z.\.^.`.b.
    77f4:	01660164 016a0168 016e016c 01720170     d.f.h.j.l.n.p.r.
    7804:	01760174 017b0179 0191017d 03920391     t.v.y.{.}.......
    7814:	03940393 03960395 03980397 039a0399     ................
    7824:	039c039b 039e039d 03a0039f 03a303a1     ................
    7834:	03a503a4 03a703a6 03a903a8 041003aa     ................
    7844:	04120411 04140413 04160415 04180417     ................
    7854:	041a0419 041c041b 041e041d 0420041f     .............. .
    7864:	04220421 04240423 04260425 04280427     !.".#.$.%.&.'.(.
    7874:	042a0429 042c042b 042e042d 0401042f     ).*.+.,.-.../...
    7884:	04030402 04050404 04070406 04090408     ................
    7894:	040b040a 040e040c 2160040f 21622161     ..........`!a!b!
    78a4:	21642163 21662165 21682167 216a2169     c!d!e!f!g!h!i!j!
    78b4:	216c216b 216e216d ff21216f ff23ff22     k!l!m!n!o!!.".#.
    78c4:	ff25ff24 ff27ff26 ff29ff28 ff2bff2a     $.%.&.'.(.).*.+.
    78d4:	ff2dff2c ff2fff2e ff31ff30 ff33ff32     ,.-.../.0.1.2.3.
    78e4:	ff35ff34 ff37ff36 ff39ff38 0000ff3a     4.5.6.7.8.9.:...
    78f4:	35455345 2d203631 544e4520 42205245     ESE516 - ENTER B
    7904:	4c544f4f 4544414f 00000052 2d0d0a0c     OOTLOADER......-
    7914:	4453202d 434d4d2f 72614320 78452064     - SD/MMC Card Ex
    7924:	6c706d61 6e6f2065 74614620 2d207346     ample on FatFs -
    7934:	000d0a2d 43204453 20647261 74696e69     -...SD Card init
    7944:	65746169 6f632064 63657272 21796c74     iated correctly!
    7954:	00000d0a 6e756f4d 69642074 28206b73     ....Mount disk (
    7964:	6f6d5f66 29746e75 0d2e2e2e 0000000a     f_mount)........
    7974:	4941465b 72205d4c 25207365 000a0d64     [FAIL] res %d...
    7984:	5d4b4f5b 00000a0d 61657243 61206574     [OK]....Create a
    7994:	6c696620 66282065 65706f5f 2e2e296e      file (f_open)..
    79a4:	000a0d2e 74697257 6f742065 73657420     ....Write to tes
    79b4:	69662074 2820656c 75705f66 2e297374     t file (f_puts).
    79c4:	0a0d2e2e 00000000 74736554 2f445320     ........Test SD/
    79d4:	20434d4d 63617473 00000a6b 4941465b     MMC stack...[FAI
    79e4:	0a0d5d4c 00000000 74736554 20736920     L]......Test is 
    79f4:	63637573 66737365 0a2e6c75 0000000d     successful......
    7a04:	6c756f43 6f6e2064 706f2074 62206e65     Could not open b
    7a14:	72616e69 69662079 0d21656c 0000000a     inary file!.....
    7a24:	74697257 6f742065 73657420 69662074     Write to test fi
    7a34:	2820656c 72775f66 29657469 0d2e2e2e     le (f_write)....
    7a44:	0000000a 20646e45 5420666f 2e747365     ....End of Test.
    7a54:	00000d0a 43204453 20445241 6e756f6d     ....SD CARD moun
    7a64:	75732074 73656363 46202173 73656c69     t success! Files
    7a74:	65747379 6c61206d 6d206f73 746e756f     ystem also mount
    7a84:	202e6465 00000a0d 204d564e 6f666e49     ed. ....NVM Info
    7a94:	754e203a 7265626d 20666f20 65676150     : Number of Page
    7aa4:	64252073 6953202e 6f20657a 20612066     s %d. Size of a 
    7ab4:	65676170 6425203a 74796220 202e7365     page: %d bytes. 
    7ac4:	00000a0d 43204453 20647261 6c696166     ....SD Card fail
    7ad4:	69206465 6974696e 6f697461 4320216e     ed initiation! C
    7ae4:	6b636568 6e6f6320 7463656e 736e6f69     heck connections
    7af4:	000d0a21 43204453 20445241 6c696166     !...SD CARD fail
    7b04:	20216465 63656843 6f79206b 63207275     ed! Check your c
    7b14:	656e6e6f 6f697463 202e736e 74737953     onnections. Syst
    7b24:	77206d65 206c6c69 74736572 20747261     em will restart 
    7b34:	35206e69 63657320 73646e6f 002e2e2e     in 5 seconds....
    7b44:	6e756f46 6c462064 41206761 00000a0d     Found Flag A....
    7b54:	6e756f46 6c462064 42206761 00000a0d     Found Flag B....
    7b64:	20646944 20746f6e 646e6966 66206120     Did not find a f
    7b74:	0d67616c 0000000a 35455345 2d203631     lag.....ESE516 -
    7b84:	49584520 4f422054 4f4c544f 52454441      EXIT BOOTLOADER
    7b94:	00000000                                ....

00007b98 <testA_bin_file>:
    7b98:	74736554 69622e41 0000006e              TestA.bin...

00007ba4 <testB_bin_file>:
    7ba4:	74736554 69622e42 0000006e 657a6953     TestB.bin...Size
    7bb4:	6c25203a 0a0d2075 00000000 73617245     : %lu ......Eras
    7bc4:	72652065 00726f72 6f727245 202d2072     e error.Error - 
    7bd4:	74736574 67617020 73692065 746f6e20     test page is not
    7be4:	61726520 21646573 00000000 6c756f43      erased!....Coul
    7bf4:	6f6e2064 706f2074 74206e65 20747365     d not open test 
    7c04:	656c6966 000a0d21 74736554 69727720     file!...Test wri
    7c14:	74206574 564e206f 6166204d 64656c69     te to NVM failed
    7c24:	000a0d21 6c756f43 6f6e2064 61632074     !...Could not ca
    7c34:	6c75636c 20657461 21435243 000a0d21     lculate CRC!!...
    7c44:	20435243 4f525245 0d212152 0000000a     CRC ERROR!!.....
    7c54:	69207449 6f6e2073 78652074 2e747369     It is not exist.
    7c64:	000a0d20 65206e41 726f7272 63636f20      ...An error occ
    7c74:	64657275 0a0d202e 00000000              ured. ......

00007c80 <_global_impure_ptr>:
    7c80:	2000004c                                L.. 

00007c84 <__sf_fake_stderr>:
	...

00007ca4 <__sf_fake_stdin>:
	...

00007cc4 <__sf_fake_stdout>:
	...
    7ce4:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    7cf4:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    7d04:	31300046 35343332 39383736 64636261     F.0123456789abcd
    7d14:	00006665                                ef..

00007d18 <_init>:
    7d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7d1a:	46c0      	nop			; (mov r8, r8)
    7d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    7d1e:	bc08      	pop	{r3}
    7d20:	469e      	mov	lr, r3
    7d22:	4770      	bx	lr

00007d24 <__init_array_start>:
    7d24:	000000dd 	.word	0x000000dd

00007d28 <_fini>:
    7d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7d2a:	46c0      	nop			; (mov r8, r8)
    7d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    7d2e:	bc08      	pop	{r3}
    7d30:	469e      	mov	lr, r3
    7d32:	4770      	bx	lr

00007d34 <__fini_array_start>:
    7d34:	000000b5 	.word	0x000000b5
