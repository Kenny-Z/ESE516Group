
ESE516 MAIN FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00028d4c  00012000  00012000  00002000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000002b8  20000000  0003ad4c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000052f4  200002c0  0003b010  000302c0  2**4
                  ALLOC
  3 .stack        00002004  200055b4  00040304  000302c0  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000302b8  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000302e0  2**0
                  CONTENTS, READONLY
  6 .debug_info   00127169  00000000  00000000  00030339  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000113d9  00000000  00000000  001574a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0001294d  00000000  00000000  0016887b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000033c0  00000000  00000000  0017b1c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00003008  00000000  00000000  0017e588  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000418b0  00000000  00000000  00181590  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0005d425  00000000  00000000  001c2e40  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000bc9f6  00000000  00000000  00220265  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000c010  00000000  00000000  002dcc5c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00012000 <exception_table>:
   12000:	b8 75 00 20 0d a9 02 00 05 aa 02 00 05 aa 02 00     .u. ............
	...
   1202c:	05 9e 01 00 00 00 00 00 00 00 00 00 21 9f 01 00     ............!...
   1203c:	69 9f 01 00 05 aa 02 00 05 aa 02 00 05 aa 02 00     i...............
   1204c:	5d 6a 02 00 89 5f 02 00 05 aa 02 00 c5 30 01 00     ]j..._.......0..
   1205c:	05 aa 02 00 09 32 01 00 01 71 02 00 19 71 02 00     .....2...q...q..
   1206c:	31 71 02 00 49 71 02 00 61 71 02 00 79 71 02 00     1q..Iq..aq..yq..
   1207c:	55 a8 02 00 69 a8 02 00 7d a8 02 00 f1 7a 01 00     U...i...}....z..
   1208c:	05 7b 01 00 19 7b 01 00 00 00 00 00 00 00 00 00     .{...{..........
   1209c:	4d 2f 01 00 05 aa 02 00 89 30 01 00 05 aa 02 00     M/.......0......
   120ac:	05 aa 02 00 00 00 00 00                             ........

000120b4 <__do_global_dtors_aux>:
   120b4:	b510      	push	{r4, lr}
   120b6:	4c06      	ldr	r4, [pc, #24]	; (120d0 <__do_global_dtors_aux+0x1c>)
   120b8:	7823      	ldrb	r3, [r4, #0]
   120ba:	2b00      	cmp	r3, #0
   120bc:	d107      	bne.n	120ce <__do_global_dtors_aux+0x1a>
   120be:	4b05      	ldr	r3, [pc, #20]	; (120d4 <__do_global_dtors_aux+0x20>)
   120c0:	2b00      	cmp	r3, #0
   120c2:	d002      	beq.n	120ca <__do_global_dtors_aux+0x16>
   120c4:	4804      	ldr	r0, [pc, #16]	; (120d8 <__do_global_dtors_aux+0x24>)
   120c6:	e000      	b.n	120ca <__do_global_dtors_aux+0x16>
   120c8:	bf00      	nop
   120ca:	2301      	movs	r3, #1
   120cc:	7023      	strb	r3, [r4, #0]
   120ce:	bd10      	pop	{r4, pc}
   120d0:	200002c0 	.word	0x200002c0
   120d4:	00000000 	.word	0x00000000
   120d8:	0003ad4c 	.word	0x0003ad4c

000120dc <frame_dummy>:
   120dc:	4b08      	ldr	r3, [pc, #32]	; (12100 <frame_dummy+0x24>)
   120de:	b510      	push	{r4, lr}
   120e0:	2b00      	cmp	r3, #0
   120e2:	d003      	beq.n	120ec <frame_dummy+0x10>
   120e4:	4907      	ldr	r1, [pc, #28]	; (12104 <frame_dummy+0x28>)
   120e6:	4808      	ldr	r0, [pc, #32]	; (12108 <frame_dummy+0x2c>)
   120e8:	e000      	b.n	120ec <frame_dummy+0x10>
   120ea:	bf00      	nop
   120ec:	4807      	ldr	r0, [pc, #28]	; (1210c <frame_dummy+0x30>)
   120ee:	6803      	ldr	r3, [r0, #0]
   120f0:	2b00      	cmp	r3, #0
   120f2:	d100      	bne.n	120f6 <frame_dummy+0x1a>
   120f4:	bd10      	pop	{r4, pc}
   120f6:	4b06      	ldr	r3, [pc, #24]	; (12110 <frame_dummy+0x34>)
   120f8:	2b00      	cmp	r3, #0
   120fa:	d0fb      	beq.n	120f4 <frame_dummy+0x18>
   120fc:	4798      	blx	r3
   120fe:	e7f9      	b.n	120f4 <frame_dummy+0x18>
   12100:	00000000 	.word	0x00000000
   12104:	200002c4 	.word	0x200002c4
   12108:	0003ad4c 	.word	0x0003ad4c
   1210c:	0003ad4c 	.word	0x0003ad4c
   12110:	00000000 	.word	0x00000000

00012114 <ssd1306_hard_reset>:
 * \brief Perform a hard reset of the OLED controller
 *
 * This functions will reset the OLED controller by setting the reset pin low.
 */
static inline void ssd1306_hard_reset(void)
{
   12114:	b580      	push	{r7, lr}
   12116:	af00      	add	r7, sp, #0
	/*uint32_t delay_10us = 10 * (system_gclk_gen_get_hz(0)/1000000);
	port_pin_set_output_level(SSD1306_RES_PIN, false);
	delay_cycles(delay_10us); // At lest 10us
	port_pin_set_output_level(SSD1306_RES_PIN, true);
	delay_cycles(delay_10us); // At lest 10us*/
}
   12118:	46c0      	nop			; (mov r8, r8)
   1211a:	46bd      	mov	sp, r7
   1211c:	bd80      	pop	{r7, pc}

0001211e <ssd1306_interface_init>:
 *
 * Depending on what interface used for interfacing the OLED controller this
 * function will initialize the necessary hardware.
 */
static void ssd1306_interface_init(void)
{
   1211e:	b580      	push	{r7, lr}
   12120:	af00      	add	r7, sp, #0

}
   12122:	46c0      	nop			; (mov r8, r8)
   12124:	46bd      	mov	sp, r7
   12126:	bd80      	pop	{r7, pc}

00012128 <ssd1306_init>:
 * Call this function to initialize the hardware interface and the OLED
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void ssd1306_init(void)
{
   12128:	b580      	push	{r7, lr}
   1212a:	af00      	add	r7, sp, #0


	// Initialize the interface
	ssd1306_interface_init();
   1212c:	4b28      	ldr	r3, [pc, #160]	; (121d0 <ssd1306_init+0xa8>)
   1212e:	4798      	blx	r3

	// Do a hard reset of the OLED display controller
	ssd1306_hard_reset();
   12130:	4b28      	ldr	r3, [pc, #160]	; (121d4 <ssd1306_init+0xac>)
   12132:	4798      	blx	r3

	// Set the reset pin to the default state
	//port_pin_set_output_level(SSD1306_RES_PIN, true);
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFF); //0xAE
   12134:	20ae      	movs	r0, #174	; 0xae
   12136:	4b28      	ldr	r3, [pc, #160]	; (121d8 <ssd1306_init+0xb0>)
   12138:	4798      	blx	r3
	
	// Set Display Clock Divide Ratio / Oscillator Frequency (Default => 0x80)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO); //0XD4
   1213a:	20d5      	movs	r0, #213	; 0xd5
   1213c:	4b26      	ldr	r3, [pc, #152]	; (121d8 <ssd1306_init+0xb0>)
   1213e:	4798      	blx	r3
	ssd1306_write_command(0x80);
   12140:	2080      	movs	r0, #128	; 0x80
   12142:	4b25      	ldr	r3, [pc, #148]	; (121d8 <ssd1306_init+0xb0>)
   12144:	4798      	blx	r3
	
	
	// 1/32 Duty (0x0F~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO); //0XA8
   12146:	20a8      	movs	r0, #168	; 0xa8
   12148:	4b23      	ldr	r3, [pc, #140]	; (121d8 <ssd1306_init+0xb0>)
   1214a:	4798      	blx	r3
	ssd1306_write_command(0x3F); //2F
   1214c:	203f      	movs	r0, #63	; 0x3f
   1214e:	4b22      	ldr	r3, [pc, #136]	; (121d8 <ssd1306_init+0xb0>)
   12150:	4798      	blx	r3
	
	// Shift Mapping RAM Counter (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET); //D3
   12152:	20d3      	movs	r0, #211	; 0xd3
   12154:	4b20      	ldr	r3, [pc, #128]	; (121d8 <ssd1306_init+0xb0>)
   12156:	4798      	blx	r3
	ssd1306_write_command(0x00);
   12158:	2000      	movs	r0, #0
   1215a:	4b1f      	ldr	r3, [pc, #124]	; (121d8 <ssd1306_init+0xb0>)
   1215c:	4798      	blx	r3
	
	// Set Mapping RAM Display Start Line (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));	
   1215e:	2040      	movs	r0, #64	; 0x40
   12160:	4b1d      	ldr	r3, [pc, #116]	; (121d8 <ssd1306_init+0xb0>)
   12162:	4798      	blx	r3
	
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0); //A1
   12164:	20a1      	movs	r0, #161	; 0xa1
   12166:	4b1c      	ldr	r3, [pc, #112]	; (121d8 <ssd1306_init+0xb0>)
   12168:	4798      	blx	r3
	ssd1306_write_command(0XC8);
   1216a:	20c8      	movs	r0, #200	; 0xc8
   1216c:	4b1a      	ldr	r3, [pc, #104]	; (121d8 <ssd1306_init+0xb0>)
   1216e:	4798      	blx	r3

	// Enable charge pump regulator
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING); //8D
   12170:	208d      	movs	r0, #141	; 0x8d
   12172:	4b19      	ldr	r3, [pc, #100]	; (121d8 <ssd1306_init+0xb0>)
   12174:	4798      	blx	r3
	ssd1306_write_command(0x14);
   12176:	2014      	movs	r0, #20
   12178:	4b17      	ldr	r3, [pc, #92]	; (121d8 <ssd1306_init+0xb0>)
   1217a:	4798      	blx	r3
	
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY); //A6
   1217c:	20a6      	movs	r0, #166	; 0xa6
   1217e:	4b16      	ldr	r3, [pc, #88]	; (121d8 <ssd1306_init+0xb0>)
   12180:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON); //0xA4
   12182:	20a4      	movs	r0, #164	; 0xa4
   12184:	4b14      	ldr	r3, [pc, #80]	; (121d8 <ssd1306_init+0xb0>)
   12186:	4798      	blx	r3
	
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL0_SEG0| 0x1);
   12188:	20a1      	movs	r0, #161	; 0xa1
   1218a:	4b13      	ldr	r3, [pc, #76]	; (121d8 <ssd1306_init+0xb0>)
   1218c:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
   1218e:	20c8      	movs	r0, #200	; 0xc8
   12190:	4b11      	ldr	r3, [pc, #68]	; (121d8 <ssd1306_init+0xb0>)
   12192:	4798      	blx	r3
	
	// Set COM Pins hardware configuration
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
   12194:	20da      	movs	r0, #218	; 0xda
   12196:	4b10      	ldr	r3, [pc, #64]	; (121d8 <ssd1306_init+0xb0>)
   12198:	4798      	blx	r3
	ssd1306_write_command(0x12);
   1219a:	2012      	movs	r0, #18
   1219c:	4b0e      	ldr	r3, [pc, #56]	; (121d8 <ssd1306_init+0xb0>)
   1219e:	4798      	blx	r3
	
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
   121a0:	2081      	movs	r0, #129	; 0x81
   121a2:	4b0d      	ldr	r3, [pc, #52]	; (121d8 <ssd1306_init+0xb0>)
   121a4:	4798      	blx	r3
	ssd1306_write_command(0x8F);
   121a6:	208f      	movs	r0, #143	; 0x8f
   121a8:	4b0b      	ldr	r3, [pc, #44]	; (121d8 <ssd1306_init+0xb0>)
   121aa:	4798      	blx	r3
	
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
   121ac:	20d9      	movs	r0, #217	; 0xd9
   121ae:	4b0a      	ldr	r3, [pc, #40]	; (121d8 <ssd1306_init+0xb0>)
   121b0:	4798      	blx	r3
	ssd1306_write_command(0xF1);
   121b2:	20f1      	movs	r0, #241	; 0xf1
   121b4:	4b08      	ldr	r3, [pc, #32]	; (121d8 <ssd1306_init+0xb0>)
   121b6:	4798      	blx	r3
	
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
   121b8:	20db      	movs	r0, #219	; 0xdb
   121ba:	4b07      	ldr	r3, [pc, #28]	; (121d8 <ssd1306_init+0xb0>)
   121bc:	4798      	blx	r3
	ssd1306_write_command(0x40);
   121be:	2040      	movs	r0, #64	; 0x40
   121c0:	4b05      	ldr	r3, [pc, #20]	; (121d8 <ssd1306_init+0xb0>)
   121c2:	4798      	blx	r3
	
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
   121c4:	20af      	movs	r0, #175	; 0xaf
   121c6:	4b04      	ldr	r3, [pc, #16]	; (121d8 <ssd1306_init+0xb0>)
   121c8:	4798      	blx	r3

}
   121ca:	46c0      	nop			; (mov r8, r8)
   121cc:	46bd      	mov	sp, r7
   121ce:	bd80      	pop	{r7, pc}
   121d0:	0001211f 	.word	0x0001211f
   121d4:	00012115 	.word	0x00012115
   121d8:	000121dd 	.word	0x000121dd

000121dc <ssd1306_write_command>:
 * \param command the command to write
 */


void ssd1306_write_command(uint8_t command)
{
   121dc:	b580      	push	{r7, lr}
   121de:	b084      	sub	sp, #16
   121e0:	af00      	add	r7, sp, #0
   121e2:	0002      	movs	r2, r0
   121e4:	1dfb      	adds	r3, r7, #7
   121e6:	701a      	strb	r2, [r3, #0]
	//Send 0 command byte
	uint8_t data[2];
	data[0] = 0x00;
   121e8:	230c      	movs	r3, #12
   121ea:	18fb      	adds	r3, r7, r3
   121ec:	2200      	movs	r2, #0
   121ee:	701a      	strb	r2, [r3, #0]
	data[1] = command;
   121f0:	230c      	movs	r3, #12
   121f2:	18fb      	adds	r3, r7, r3
   121f4:	1dfa      	adds	r2, r7, #7
   121f6:	7812      	ldrb	r2, [r2, #0]
   121f8:	705a      	strb	r2, [r3, #1]
	i2cOled.address = SSD1306_I2C_ADDRESS;
   121fa:	4b0c      	ldr	r3, [pc, #48]	; (1222c <ssd1306_write_command+0x50>)
   121fc:	223c      	movs	r2, #60	; 0x3c
   121fe:	701a      	strb	r2, [r3, #0]
	i2cOled.msgOut = &data;
   12200:	4b0a      	ldr	r3, [pc, #40]	; (1222c <ssd1306_write_command+0x50>)
   12202:	220c      	movs	r2, #12
   12204:	18ba      	adds	r2, r7, r2
   12206:	605a      	str	r2, [r3, #4]
	i2cOled.lenOut = sizeof(data);
   12208:	4b08      	ldr	r3, [pc, #32]	; (1222c <ssd1306_write_command+0x50>)
   1220a:	2202      	movs	r2, #2
   1220c:	81da      	strh	r2, [r3, #14]
	i2cOled.msgIn = 0;
   1220e:	4b07      	ldr	r3, [pc, #28]	; (1222c <ssd1306_write_command+0x50>)
   12210:	2200      	movs	r2, #0
   12212:	609a      	str	r2, [r3, #8]
	i2cOled.lenIn = 0;
   12214:	4b05      	ldr	r3, [pc, #20]	; (1222c <ssd1306_write_command+0x50>)
   12216:	2200      	movs	r2, #0
   12218:	819a      	strh	r2, [r3, #12]
	
	I2cWriteDataWait(&i2cOled, 100);
   1221a:	4b04      	ldr	r3, [pc, #16]	; (1222c <ssd1306_write_command+0x50>)
   1221c:	2164      	movs	r1, #100	; 0x64
   1221e:	0018      	movs	r0, r3
   12220:	4b03      	ldr	r3, [pc, #12]	; (12230 <ssd1306_write_command+0x54>)
   12222:	4798      	blx	r3
}
   12224:	46c0      	nop			; (mov r8, r8)
   12226:	46bd      	mov	sp, r7
   12228:	b004      	add	sp, #16
   1222a:	bd80      	pop	{r7, pc}
   1222c:	2000418c 	.word	0x2000418c
   12230:	00016269 	.word	0x00016269

00012234 <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
   12234:	b580      	push	{r7, lr}
   12236:	b084      	sub	sp, #16
   12238:	af00      	add	r7, sp, #0
   1223a:	0002      	movs	r2, r0
   1223c:	1dfb      	adds	r3, r7, #7
   1223e:	701a      	strb	r2, [r3, #0]
	uint8_t datum[2];
	datum[0] = 0x40;
   12240:	230c      	movs	r3, #12
   12242:	18fb      	adds	r3, r7, r3
   12244:	2240      	movs	r2, #64	; 0x40
   12246:	701a      	strb	r2, [r3, #0]
	datum[1] = data;
   12248:	230c      	movs	r3, #12
   1224a:	18fb      	adds	r3, r7, r3
   1224c:	1dfa      	adds	r2, r7, #7
   1224e:	7812      	ldrb	r2, [r2, #0]
   12250:	705a      	strb	r2, [r3, #1]
	i2cOled.address = SSD1306_I2C_ADDRESS;
   12252:	4b0c      	ldr	r3, [pc, #48]	; (12284 <ssd1306_write_data+0x50>)
   12254:	223c      	movs	r2, #60	; 0x3c
   12256:	701a      	strb	r2, [r3, #0]
	i2cOled.msgOut = &datum;
   12258:	4b0a      	ldr	r3, [pc, #40]	; (12284 <ssd1306_write_data+0x50>)
   1225a:	220c      	movs	r2, #12
   1225c:	18ba      	adds	r2, r7, r2
   1225e:	605a      	str	r2, [r3, #4]
	i2cOled.lenOut = sizeof(datum);
   12260:	4b08      	ldr	r3, [pc, #32]	; (12284 <ssd1306_write_data+0x50>)
   12262:	2202      	movs	r2, #2
   12264:	81da      	strh	r2, [r3, #14]
	i2cOled.msgIn = 0;
   12266:	4b07      	ldr	r3, [pc, #28]	; (12284 <ssd1306_write_data+0x50>)
   12268:	2200      	movs	r2, #0
   1226a:	609a      	str	r2, [r3, #8]
	i2cOled.lenIn = 0;
   1226c:	4b05      	ldr	r3, [pc, #20]	; (12284 <ssd1306_write_data+0x50>)
   1226e:	2200      	movs	r2, #0
   12270:	819a      	strh	r2, [r3, #12]
	
	I2cWriteDataWait(&i2cOled, 100);
   12272:	4b04      	ldr	r3, [pc, #16]	; (12284 <ssd1306_write_data+0x50>)
   12274:	2164      	movs	r1, #100	; 0x64
   12276:	0018      	movs	r0, r3
   12278:	4b03      	ldr	r3, [pc, #12]	; (12288 <ssd1306_write_data+0x54>)
   1227a:	4798      	blx	r3
}
   1227c:	46c0      	nop			; (mov r8, r8)
   1227e:	46bd      	mov	sp, r7
   12280:	b004      	add	sp, #16
   12282:	bd80      	pop	{r7, pc}
   12284:	2000418c 	.word	0x2000418c
   12288:	00016269 	.word	0x00016269

0001228c <gfx_mono_set_framebuffer>:
	uint8_t framebuffer[FRAMEBUFFER_SIZE];
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
   1228c:	b580      	push	{r7, lr}
   1228e:	b082      	sub	sp, #8
   12290:	af00      	add	r7, sp, #0
   12292:	6078      	str	r0, [r7, #4]
	fbpointer = framebuffer;
   12294:	4b03      	ldr	r3, [pc, #12]	; (122a4 <gfx_mono_set_framebuffer+0x18>)
   12296:	687a      	ldr	r2, [r7, #4]
   12298:	601a      	str	r2, [r3, #0]
}
   1229a:	46c0      	nop			; (mov r8, r8)
   1229c:	46bd      	mov	sp, r7
   1229e:	b002      	add	sp, #8
   122a0:	bd80      	pop	{r7, pc}
   122a2:	46c0      	nop			; (mov r8, r8)
   122a4:	200002dc 	.word	0x200002dc

000122a8 <gfx_mono_framebuffer_put_byte>:
	gfx_mono_framebuffer_put_byte(0, 0, 0xFF);
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
   122a8:	b590      	push	{r4, r7, lr}
   122aa:	b083      	sub	sp, #12
   122ac:	af00      	add	r7, sp, #0
   122ae:	0004      	movs	r4, r0
   122b0:	0008      	movs	r0, r1
   122b2:	0011      	movs	r1, r2
   122b4:	1dfb      	adds	r3, r7, #7
   122b6:	1c22      	adds	r2, r4, #0
   122b8:	701a      	strb	r2, [r3, #0]
   122ba:	1dbb      	adds	r3, r7, #6
   122bc:	1c02      	adds	r2, r0, #0
   122be:	701a      	strb	r2, [r3, #0]
   122c0:	1d7b      	adds	r3, r7, #5
   122c2:	1c0a      	adds	r2, r1, #0
   122c4:	701a      	strb	r2, [r3, #0]
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
   122c6:	4b0a      	ldr	r3, [pc, #40]	; (122f0 <gfx_mono_framebuffer_put_byte+0x48>)
   122c8:	6819      	ldr	r1, [r3, #0]
   122ca:	1dfb      	adds	r3, r7, #7
   122cc:	781a      	ldrb	r2, [r3, #0]
   122ce:	0013      	movs	r3, r2
   122d0:	011b      	lsls	r3, r3, #4
   122d2:	189b      	adds	r3, r3, r2
   122d4:	009b      	lsls	r3, r3, #2
   122d6:	001a      	movs	r2, r3
   122d8:	1dbb      	adds	r3, r7, #6
   122da:	781b      	ldrb	r3, [r3, #0]
   122dc:	18d3      	adds	r3, r2, r3
   122de:	18cb      	adds	r3, r1, r3
   122e0:	1d7a      	adds	r2, r7, #5
   122e2:	7812      	ldrb	r2, [r2, #0]
   122e4:	701a      	strb	r2, [r3, #0]
}
   122e6:	46c0      	nop			; (mov r8, r8)
   122e8:	46bd      	mov	sp, r7
   122ea:	b003      	add	sp, #12
   122ec:	bd90      	pop	{r4, r7, pc}
   122ee:	46c0      	nop			; (mov r8, r8)
   122f0:	200002dc 	.word	0x200002dc

000122f4 <gfx_mono_framebuffer_get_byte>:
 * \code
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
   122f4:	b580      	push	{r7, lr}
   122f6:	b082      	sub	sp, #8
   122f8:	af00      	add	r7, sp, #0
   122fa:	0002      	movs	r2, r0
   122fc:	1dfb      	adds	r3, r7, #7
   122fe:	701a      	strb	r2, [r3, #0]
   12300:	1dbb      	adds	r3, r7, #6
   12302:	1c0a      	adds	r2, r1, #0
   12304:	701a      	strb	r2, [r3, #0]
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
   12306:	4b09      	ldr	r3, [pc, #36]	; (1232c <gfx_mono_framebuffer_get_byte+0x38>)
   12308:	6819      	ldr	r1, [r3, #0]
   1230a:	1dfb      	adds	r3, r7, #7
   1230c:	781a      	ldrb	r2, [r3, #0]
   1230e:	0013      	movs	r3, r2
   12310:	011b      	lsls	r3, r3, #4
   12312:	189b      	adds	r3, r3, r2
   12314:	009b      	lsls	r3, r3, #2
   12316:	001a      	movs	r2, r3
   12318:	1dbb      	adds	r3, r7, #6
   1231a:	781b      	ldrb	r3, [r3, #0]
   1231c:	18d3      	adds	r3, r2, r3
   1231e:	18cb      	adds	r3, r1, r3
   12320:	781b      	ldrb	r3, [r3, #0]
}
   12322:	0018      	movs	r0, r3
   12324:	46bd      	mov	sp, r7
   12326:	b002      	add	sp, #8
   12328:	bd80      	pop	{r7, pc}
   1232a:	46c0      	nop			; (mov r8, r8)
   1232c:	200002dc 	.word	0x200002dc

00012330 <gfx_mono_generic_draw_vertical_line>:
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_vertical_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
   12330:	b5b0      	push	{r4, r5, r7, lr}
   12332:	b084      	sub	sp, #16
   12334:	af00      	add	r7, sp, #0
   12336:	0005      	movs	r5, r0
   12338:	000c      	movs	r4, r1
   1233a:	0010      	movs	r0, r2
   1233c:	0019      	movs	r1, r3
   1233e:	1dfb      	adds	r3, r7, #7
   12340:	1c2a      	adds	r2, r5, #0
   12342:	701a      	strb	r2, [r3, #0]
   12344:	1dbb      	adds	r3, r7, #6
   12346:	1c22      	adds	r2, r4, #0
   12348:	701a      	strb	r2, [r3, #0]
   1234a:	1d7b      	adds	r3, r7, #5
   1234c:	1c02      	adds	r2, r0, #0
   1234e:	701a      	strb	r2, [r3, #0]
   12350:	1d3b      	adds	r3, r7, #4
   12352:	1c0a      	adds	r2, r1, #0
   12354:	701a      	strb	r2, [r3, #0]
	if (length == 0) {
   12356:	1d7b      	adds	r3, r7, #5
   12358:	781b      	ldrb	r3, [r3, #0]
   1235a:	2b00      	cmp	r3, #0
   1235c:	d100      	bne.n	12360 <gfx_mono_generic_draw_vertical_line+0x30>
   1235e:	e0a7      	b.n	124b0 <gfx_mono_generic_draw_vertical_line+0x180>
		return;
	}

	gfx_coord_t y2 = y + length - 1;
   12360:	1dba      	adds	r2, r7, #6
   12362:	1d7b      	adds	r3, r7, #5
   12364:	7812      	ldrb	r2, [r2, #0]
   12366:	781b      	ldrb	r3, [r3, #0]
   12368:	18d3      	adds	r3, r2, r3
   1236a:	b2da      	uxtb	r2, r3
   1236c:	230f      	movs	r3, #15
   1236e:	18fb      	adds	r3, r7, r3
   12370:	3a01      	subs	r2, #1
   12372:	701a      	strb	r2, [r3, #0]

	if (y == y2) {
   12374:	1dba      	adds	r2, r7, #6
   12376:	230f      	movs	r3, #15
   12378:	18fb      	adds	r3, r7, r3
   1237a:	7812      	ldrb	r2, [r2, #0]
   1237c:	781b      	ldrb	r3, [r3, #0]
   1237e:	429a      	cmp	r2, r3
   12380:	d109      	bne.n	12396 <gfx_mono_generic_draw_vertical_line+0x66>
		gfx_mono_draw_pixel(x, y, color);
   12382:	1d3b      	adds	r3, r7, #4
   12384:	781a      	ldrb	r2, [r3, #0]
   12386:	1dbb      	adds	r3, r7, #6
   12388:	7819      	ldrb	r1, [r3, #0]
   1238a:	1dfb      	adds	r3, r7, #7
   1238c:	781b      	ldrb	r3, [r3, #0]
   1238e:	0018      	movs	r0, r3
   12390:	4b49      	ldr	r3, [pc, #292]	; (124b8 <gfx_mono_generic_draw_vertical_line+0x188>)
   12392:	4798      	blx	r3
		return;
   12394:	e08d      	b.n	124b2 <gfx_mono_generic_draw_vertical_line+0x182>
	}

	if (y2 >= GFX_MONO_LCD_HEIGHT - 1) {
   12396:	230f      	movs	r3, #15
   12398:	18fb      	adds	r3, r7, r3
   1239a:	781b      	ldrb	r3, [r3, #0]
   1239c:	2b1e      	cmp	r3, #30
   1239e:	d903      	bls.n	123a8 <gfx_mono_generic_draw_vertical_line+0x78>
		y2 = GFX_MONO_LCD_HEIGHT - 1;
   123a0:	230f      	movs	r3, #15
   123a2:	18fb      	adds	r3, r7, r3
   123a4:	221f      	movs	r2, #31
   123a6:	701a      	strb	r2, [r3, #0]
	}

	gfx_coord_t y1page = y / 8;
   123a8:	230e      	movs	r3, #14
   123aa:	18fb      	adds	r3, r7, r3
   123ac:	1dba      	adds	r2, r7, #6
   123ae:	7812      	ldrb	r2, [r2, #0]
   123b0:	08d2      	lsrs	r2, r2, #3
   123b2:	701a      	strb	r2, [r3, #0]
	gfx_coord_t y2page = y2 / 8;
   123b4:	230d      	movs	r3, #13
   123b6:	18fb      	adds	r3, r7, r3
   123b8:	220f      	movs	r2, #15
   123ba:	18ba      	adds	r2, r7, r2
   123bc:	7812      	ldrb	r2, [r2, #0]
   123be:	08d2      	lsrs	r2, r2, #3
   123c0:	701a      	strb	r2, [r3, #0]

	uint8_t y1bitpos = y & 0x07;
   123c2:	230c      	movs	r3, #12
   123c4:	18fb      	adds	r3, r7, r3
   123c6:	1dba      	adds	r2, r7, #6
   123c8:	7812      	ldrb	r2, [r2, #0]
   123ca:	2107      	movs	r1, #7
   123cc:	400a      	ands	r2, r1
   123ce:	701a      	strb	r2, [r3, #0]
	uint8_t y2bitpos = y2 & 0x07;
   123d0:	230b      	movs	r3, #11
   123d2:	18fb      	adds	r3, r7, r3
   123d4:	220f      	movs	r2, #15
   123d6:	18ba      	adds	r2, r7, r2
   123d8:	7812      	ldrb	r2, [r2, #0]
   123da:	2107      	movs	r1, #7
   123dc:	400a      	ands	r2, r1
   123de:	701a      	strb	r2, [r3, #0]

	uint8_t y1pixelmask = 0xFF << y1bitpos;
   123e0:	230c      	movs	r3, #12
   123e2:	18fb      	adds	r3, r7, r3
   123e4:	781b      	ldrb	r3, [r3, #0]
   123e6:	22ff      	movs	r2, #255	; 0xff
   123e8:	409a      	lsls	r2, r3
   123ea:	230a      	movs	r3, #10
   123ec:	18fb      	adds	r3, r7, r3
   123ee:	701a      	strb	r2, [r3, #0]
	uint8_t y2pixelmask = 0xFF >> (7 - y2bitpos);
   123f0:	230b      	movs	r3, #11
   123f2:	18fb      	adds	r3, r7, r3
   123f4:	781b      	ldrb	r3, [r3, #0]
   123f6:	2207      	movs	r2, #7
   123f8:	1ad3      	subs	r3, r2, r3
   123fa:	22ff      	movs	r2, #255	; 0xff
   123fc:	411a      	asrs	r2, r3
   123fe:	2309      	movs	r3, #9
   12400:	18fb      	adds	r3, r7, r3
   12402:	701a      	strb	r2, [r3, #0]

	/* The pixels are on the same page; combine masks */
	if (y1page == y2page) {
   12404:	230e      	movs	r3, #14
   12406:	18fa      	adds	r2, r7, r3
   12408:	230d      	movs	r3, #13
   1240a:	18fb      	adds	r3, r7, r3
   1240c:	7812      	ldrb	r2, [r2, #0]
   1240e:	781b      	ldrb	r3, [r3, #0]
   12410:	429a      	cmp	r2, r3
   12412:	d117      	bne.n	12444 <gfx_mono_generic_draw_vertical_line+0x114>
		uint8_t pixelmask = y1pixelmask & y2pixelmask;
   12414:	2308      	movs	r3, #8
   12416:	18fb      	adds	r3, r7, r3
   12418:	220a      	movs	r2, #10
   1241a:	18ba      	adds	r2, r7, r2
   1241c:	2109      	movs	r1, #9
   1241e:	1879      	adds	r1, r7, r1
   12420:	7812      	ldrb	r2, [r2, #0]
   12422:	7809      	ldrb	r1, [r1, #0]
   12424:	400a      	ands	r2, r1
   12426:	701a      	strb	r2, [r3, #0]
		gfx_mono_mask_byte(y1page, x, pixelmask, color);
   12428:	1d3b      	adds	r3, r7, #4
   1242a:	781c      	ldrb	r4, [r3, #0]
   1242c:	2308      	movs	r3, #8
   1242e:	18fb      	adds	r3, r7, r3
   12430:	781a      	ldrb	r2, [r3, #0]
   12432:	1dfb      	adds	r3, r7, #7
   12434:	7819      	ldrb	r1, [r3, #0]
   12436:	230e      	movs	r3, #14
   12438:	18fb      	adds	r3, r7, r3
   1243a:	7818      	ldrb	r0, [r3, #0]
   1243c:	0023      	movs	r3, r4
   1243e:	4c1f      	ldr	r4, [pc, #124]	; (124bc <gfx_mono_generic_draw_vertical_line+0x18c>)
   12440:	47a0      	blx	r4
   12442:	e036      	b.n	124b2 <gfx_mono_generic_draw_vertical_line+0x182>
	} else {
		gfx_mono_mask_byte(y1page, x, y1pixelmask, color);
   12444:	1d3b      	adds	r3, r7, #4
   12446:	781c      	ldrb	r4, [r3, #0]
   12448:	230a      	movs	r3, #10
   1244a:	18fb      	adds	r3, r7, r3
   1244c:	781a      	ldrb	r2, [r3, #0]
   1244e:	1dfb      	adds	r3, r7, #7
   12450:	7819      	ldrb	r1, [r3, #0]
   12452:	230e      	movs	r3, #14
   12454:	18fb      	adds	r3, r7, r3
   12456:	7818      	ldrb	r0, [r3, #0]
   12458:	0023      	movs	r3, r4
   1245a:	4c18      	ldr	r4, [pc, #96]	; (124bc <gfx_mono_generic_draw_vertical_line+0x18c>)
   1245c:	47a0      	blx	r4

		while (++y1page < y2page) {
   1245e:	e00a      	b.n	12476 <gfx_mono_generic_draw_vertical_line+0x146>
			gfx_mono_mask_byte(y1page, x, 0xFF, color);
   12460:	1d3b      	adds	r3, r7, #4
   12462:	781a      	ldrb	r2, [r3, #0]
   12464:	1dfb      	adds	r3, r7, #7
   12466:	7819      	ldrb	r1, [r3, #0]
   12468:	230e      	movs	r3, #14
   1246a:	18fb      	adds	r3, r7, r3
   1246c:	7818      	ldrb	r0, [r3, #0]
   1246e:	0013      	movs	r3, r2
   12470:	22ff      	movs	r2, #255	; 0xff
   12472:	4c12      	ldr	r4, [pc, #72]	; (124bc <gfx_mono_generic_draw_vertical_line+0x18c>)
   12474:	47a0      	blx	r4
		while (++y1page < y2page) {
   12476:	230e      	movs	r3, #14
   12478:	18fb      	adds	r3, r7, r3
   1247a:	220e      	movs	r2, #14
   1247c:	18ba      	adds	r2, r7, r2
   1247e:	7812      	ldrb	r2, [r2, #0]
   12480:	3201      	adds	r2, #1
   12482:	701a      	strb	r2, [r3, #0]
   12484:	230e      	movs	r3, #14
   12486:	18fa      	adds	r2, r7, r3
   12488:	230d      	movs	r3, #13
   1248a:	18fb      	adds	r3, r7, r3
   1248c:	7812      	ldrb	r2, [r2, #0]
   1248e:	781b      	ldrb	r3, [r3, #0]
   12490:	429a      	cmp	r2, r3
   12492:	d3e5      	bcc.n	12460 <gfx_mono_generic_draw_vertical_line+0x130>
		}

		gfx_mono_mask_byte(y2page, x, y2pixelmask, color);
   12494:	1d3b      	adds	r3, r7, #4
   12496:	781c      	ldrb	r4, [r3, #0]
   12498:	2309      	movs	r3, #9
   1249a:	18fb      	adds	r3, r7, r3
   1249c:	781a      	ldrb	r2, [r3, #0]
   1249e:	1dfb      	adds	r3, r7, #7
   124a0:	7819      	ldrb	r1, [r3, #0]
   124a2:	230d      	movs	r3, #13
   124a4:	18fb      	adds	r3, r7, r3
   124a6:	7818      	ldrb	r0, [r3, #0]
   124a8:	0023      	movs	r3, r4
   124aa:	4c04      	ldr	r4, [pc, #16]	; (124bc <gfx_mono_generic_draw_vertical_line+0x18c>)
   124ac:	47a0      	blx	r4
   124ae:	e000      	b.n	124b2 <gfx_mono_generic_draw_vertical_line+0x182>
		return;
   124b0:	46c0      	nop			; (mov r8, r8)
	}
}
   124b2:	46bd      	mov	sp, r7
   124b4:	b004      	add	sp, #16
   124b6:	bdb0      	pop	{r4, r5, r7, pc}
   124b8:	00012af9 	.word	0x00012af9
   124bc:	00012cbd 	.word	0x00012cbd

000124c0 <gfx_mono_generic_draw_line>:
 * \param[in]  color       Pixel operation of the line.
 */
void gfx_mono_generic_draw_line(gfx_coord_t x1, gfx_coord_t y1,
		gfx_coord_t x2, gfx_coord_t y2,
		enum gfx_mono_color color)
{
   124c0:	b5b0      	push	{r4, r5, r7, lr}
   124c2:	b084      	sub	sp, #16
   124c4:	af00      	add	r7, sp, #0
   124c6:	0005      	movs	r5, r0
   124c8:	000c      	movs	r4, r1
   124ca:	0010      	movs	r0, r2
   124cc:	0019      	movs	r1, r3
   124ce:	1dfb      	adds	r3, r7, #7
   124d0:	1c2a      	adds	r2, r5, #0
   124d2:	701a      	strb	r2, [r3, #0]
   124d4:	1dbb      	adds	r3, r7, #6
   124d6:	1c22      	adds	r2, r4, #0
   124d8:	701a      	strb	r2, [r3, #0]
   124da:	1d7b      	adds	r3, r7, #5
   124dc:	1c02      	adds	r2, r0, #0
   124de:	701a      	strb	r2, [r3, #0]
   124e0:	1d3b      	adds	r3, r7, #4
   124e2:	1c0a      	adds	r2, r1, #0
   124e4:	701a      	strb	r2, [r3, #0]
	int8_t dx;
	int8_t dy;
	int8_t e;

	/* swap x1,y1  with x2,y2 */
	if (x1 > x2) {
   124e6:	1dfa      	adds	r2, r7, #7
   124e8:	1d7b      	adds	r3, r7, #5
   124ea:	7812      	ldrb	r2, [r2, #0]
   124ec:	781b      	ldrb	r3, [r3, #0]
   124ee:	429a      	cmp	r2, r3
   124f0:	d91b      	bls.n	1252a <gfx_mono_generic_draw_line+0x6a>
		dx = x1;
   124f2:	230a      	movs	r3, #10
   124f4:	18fb      	adds	r3, r7, r3
   124f6:	1dfa      	adds	r2, r7, #7
   124f8:	7812      	ldrb	r2, [r2, #0]
   124fa:	701a      	strb	r2, [r3, #0]
		x1 = x2;
   124fc:	1dfb      	adds	r3, r7, #7
   124fe:	1d7a      	adds	r2, r7, #5
   12500:	7812      	ldrb	r2, [r2, #0]
   12502:	701a      	strb	r2, [r3, #0]
		x2 = dx;
   12504:	1d7b      	adds	r3, r7, #5
   12506:	220a      	movs	r2, #10
   12508:	18ba      	adds	r2, r7, r2
   1250a:	7812      	ldrb	r2, [r2, #0]
   1250c:	701a      	strb	r2, [r3, #0]
		dy = y1;
   1250e:	2309      	movs	r3, #9
   12510:	18fb      	adds	r3, r7, r3
   12512:	1dba      	adds	r2, r7, #6
   12514:	7812      	ldrb	r2, [r2, #0]
   12516:	701a      	strb	r2, [r3, #0]
		y1 = y2;
   12518:	1dbb      	adds	r3, r7, #6
   1251a:	1d3a      	adds	r2, r7, #4
   1251c:	7812      	ldrb	r2, [r2, #0]
   1251e:	701a      	strb	r2, [r3, #0]
		y2 = dy;
   12520:	1d3b      	adds	r3, r7, #4
   12522:	2209      	movs	r2, #9
   12524:	18ba      	adds	r2, r7, r2
   12526:	7812      	ldrb	r2, [r2, #0]
   12528:	701a      	strb	r2, [r3, #0]
	}

	dx = x2 - x1;
   1252a:	1d7a      	adds	r2, r7, #5
   1252c:	1dfb      	adds	r3, r7, #7
   1252e:	7812      	ldrb	r2, [r2, #0]
   12530:	781b      	ldrb	r3, [r3, #0]
   12532:	1ad3      	subs	r3, r2, r3
   12534:	b2da      	uxtb	r2, r3
   12536:	230a      	movs	r3, #10
   12538:	18fb      	adds	r3, r7, r3
   1253a:	701a      	strb	r2, [r3, #0]
	dy = y2 - y1;
   1253c:	1d3a      	adds	r2, r7, #4
   1253e:	1dbb      	adds	r3, r7, #6
   12540:	7812      	ldrb	r2, [r2, #0]
   12542:	781b      	ldrb	r3, [r3, #0]
   12544:	1ad3      	subs	r3, r2, r3
   12546:	b2da      	uxtb	r2, r3
   12548:	2309      	movs	r3, #9
   1254a:	18fb      	adds	r3, r7, r3
   1254c:	701a      	strb	r2, [r3, #0]

	x = x1;
   1254e:	230e      	movs	r3, #14
   12550:	18fb      	adds	r3, r7, r3
   12552:	1dfa      	adds	r2, r7, #7
   12554:	7812      	ldrb	r2, [r2, #0]
   12556:	701a      	strb	r2, [r3, #0]
	y = y1;
   12558:	230d      	movs	r3, #13
   1255a:	18fb      	adds	r3, r7, r3
   1255c:	1dba      	adds	r2, r7, #6
   1255e:	7812      	ldrb	r2, [r2, #0]
   12560:	701a      	strb	r2, [r3, #0]

	if (dx < 0) {
   12562:	230a      	movs	r3, #10
   12564:	18fb      	adds	r3, r7, r3
   12566:	781b      	ldrb	r3, [r3, #0]
   12568:	2b7f      	cmp	r3, #127	; 0x7f
   1256a:	d90c      	bls.n	12586 <gfx_mono_generic_draw_line+0xc6>
		xinc = -1;
   1256c:	230c      	movs	r3, #12
   1256e:	18fb      	adds	r3, r7, r3
   12570:	22ff      	movs	r2, #255	; 0xff
   12572:	701a      	strb	r2, [r3, #0]
		dx = -dx;
   12574:	230a      	movs	r3, #10
   12576:	18fb      	adds	r3, r7, r3
   12578:	781b      	ldrb	r3, [r3, #0]
   1257a:	425b      	negs	r3, r3
   1257c:	b2da      	uxtb	r2, r3
   1257e:	230a      	movs	r3, #10
   12580:	18fb      	adds	r3, r7, r3
   12582:	701a      	strb	r2, [r3, #0]
   12584:	e003      	b.n	1258e <gfx_mono_generic_draw_line+0xce>
	} else {
		xinc = 1;
   12586:	230c      	movs	r3, #12
   12588:	18fb      	adds	r3, r7, r3
   1258a:	2201      	movs	r2, #1
   1258c:	701a      	strb	r2, [r3, #0]
	}

	if (dy < 0) {
   1258e:	2309      	movs	r3, #9
   12590:	18fb      	adds	r3, r7, r3
   12592:	781b      	ldrb	r3, [r3, #0]
   12594:	2b7f      	cmp	r3, #127	; 0x7f
   12596:	d90c      	bls.n	125b2 <gfx_mono_generic_draw_line+0xf2>
		yinc = -1;
   12598:	230b      	movs	r3, #11
   1259a:	18fb      	adds	r3, r7, r3
   1259c:	22ff      	movs	r2, #255	; 0xff
   1259e:	701a      	strb	r2, [r3, #0]
		dy = -dy;
   125a0:	2309      	movs	r3, #9
   125a2:	18fb      	adds	r3, r7, r3
   125a4:	781b      	ldrb	r3, [r3, #0]
   125a6:	425b      	negs	r3, r3
   125a8:	b2da      	uxtb	r2, r3
   125aa:	2309      	movs	r3, #9
   125ac:	18fb      	adds	r3, r7, r3
   125ae:	701a      	strb	r2, [r3, #0]
   125b0:	e003      	b.n	125ba <gfx_mono_generic_draw_line+0xfa>
	} else {
		yinc = 1;
   125b2:	230b      	movs	r3, #11
   125b4:	18fb      	adds	r3, r7, r3
   125b6:	2201      	movs	r2, #1
   125b8:	701a      	strb	r2, [r3, #0]
	}

	if (dx > dy) {
   125ba:	230a      	movs	r3, #10
   125bc:	18fa      	adds	r2, r7, r3
   125be:	2309      	movs	r3, #9
   125c0:	18fb      	adds	r3, r7, r3
   125c2:	7812      	ldrb	r2, [r2, #0]
   125c4:	b252      	sxtb	r2, r2
   125c6:	781b      	ldrb	r3, [r3, #0]
   125c8:	b25b      	sxtb	r3, r3
   125ca:	429a      	cmp	r2, r3
   125cc:	dd5b      	ble.n	12686 <gfx_mono_generic_draw_line+0x1c6>
		e = dy - dx;
   125ce:	2309      	movs	r3, #9
   125d0:	18fb      	adds	r3, r7, r3
   125d2:	781a      	ldrb	r2, [r3, #0]
   125d4:	230a      	movs	r3, #10
   125d6:	18fb      	adds	r3, r7, r3
   125d8:	781b      	ldrb	r3, [r3, #0]
   125da:	1ad3      	subs	r3, r2, r3
   125dc:	b2da      	uxtb	r2, r3
   125de:	2308      	movs	r3, #8
   125e0:	18fb      	adds	r3, r7, r3
   125e2:	701a      	strb	r2, [r3, #0]
		for (i = 0; i <= dx; i++) {
   125e4:	230f      	movs	r3, #15
   125e6:	18fb      	adds	r3, r7, r3
   125e8:	2200      	movs	r2, #0
   125ea:	701a      	strb	r2, [r3, #0]
   125ec:	e041      	b.n	12672 <gfx_mono_generic_draw_line+0x1b2>
			gfx_mono_draw_pixel(x, y, color);
   125ee:	2320      	movs	r3, #32
   125f0:	18fb      	adds	r3, r7, r3
   125f2:	781a      	ldrb	r2, [r3, #0]
   125f4:	230d      	movs	r3, #13
   125f6:	18fb      	adds	r3, r7, r3
   125f8:	7819      	ldrb	r1, [r3, #0]
   125fa:	230e      	movs	r3, #14
   125fc:	18fb      	adds	r3, r7, r3
   125fe:	781b      	ldrb	r3, [r3, #0]
   12600:	0018      	movs	r0, r3
   12602:	4b50      	ldr	r3, [pc, #320]	; (12744 <gfx_mono_generic_draw_line+0x284>)
   12604:	4798      	blx	r3
			if (e >= 0) {
   12606:	2308      	movs	r3, #8
   12608:	18fb      	adds	r3, r7, r3
   1260a:	781b      	ldrb	r3, [r3, #0]
   1260c:	2b7f      	cmp	r3, #127	; 0x7f
   1260e:	d814      	bhi.n	1263a <gfx_mono_generic_draw_line+0x17a>
				e -= dx;
   12610:	2308      	movs	r3, #8
   12612:	18fb      	adds	r3, r7, r3
   12614:	781a      	ldrb	r2, [r3, #0]
   12616:	230a      	movs	r3, #10
   12618:	18fb      	adds	r3, r7, r3
   1261a:	781b      	ldrb	r3, [r3, #0]
   1261c:	1ad3      	subs	r3, r2, r3
   1261e:	b2da      	uxtb	r2, r3
   12620:	2308      	movs	r3, #8
   12622:	18fb      	adds	r3, r7, r3
   12624:	701a      	strb	r2, [r3, #0]
				y += yinc;
   12626:	230b      	movs	r3, #11
   12628:	18fb      	adds	r3, r7, r3
   1262a:	7819      	ldrb	r1, [r3, #0]
   1262c:	230d      	movs	r3, #13
   1262e:	18fb      	adds	r3, r7, r3
   12630:	220d      	movs	r2, #13
   12632:	18ba      	adds	r2, r7, r2
   12634:	7812      	ldrb	r2, [r2, #0]
   12636:	188a      	adds	r2, r1, r2
   12638:	701a      	strb	r2, [r3, #0]
			}

			e += dy;
   1263a:	2308      	movs	r3, #8
   1263c:	18fb      	adds	r3, r7, r3
   1263e:	781a      	ldrb	r2, [r3, #0]
   12640:	2309      	movs	r3, #9
   12642:	18fb      	adds	r3, r7, r3
   12644:	781b      	ldrb	r3, [r3, #0]
   12646:	18d3      	adds	r3, r2, r3
   12648:	b2da      	uxtb	r2, r3
   1264a:	2308      	movs	r3, #8
   1264c:	18fb      	adds	r3, r7, r3
   1264e:	701a      	strb	r2, [r3, #0]
			x += xinc;
   12650:	230c      	movs	r3, #12
   12652:	18fb      	adds	r3, r7, r3
   12654:	7819      	ldrb	r1, [r3, #0]
   12656:	230e      	movs	r3, #14
   12658:	18fb      	adds	r3, r7, r3
   1265a:	220e      	movs	r2, #14
   1265c:	18ba      	adds	r2, r7, r2
   1265e:	7812      	ldrb	r2, [r2, #0]
   12660:	188a      	adds	r2, r1, r2
   12662:	701a      	strb	r2, [r3, #0]
		for (i = 0; i <= dx; i++) {
   12664:	230f      	movs	r3, #15
   12666:	18fb      	adds	r3, r7, r3
   12668:	781a      	ldrb	r2, [r3, #0]
   1266a:	230f      	movs	r3, #15
   1266c:	18fb      	adds	r3, r7, r3
   1266e:	3201      	adds	r2, #1
   12670:	701a      	strb	r2, [r3, #0]
   12672:	230f      	movs	r3, #15
   12674:	18fb      	adds	r3, r7, r3
   12676:	781a      	ldrb	r2, [r3, #0]
   12678:	230a      	movs	r3, #10
   1267a:	18fb      	adds	r3, r7, r3
   1267c:	781b      	ldrb	r3, [r3, #0]
   1267e:	b25b      	sxtb	r3, r3
   12680:	429a      	cmp	r2, r3
   12682:	ddb4      	ble.n	125ee <gfx_mono_generic_draw_line+0x12e>

			e += dx;
			y += yinc;
		}
	}
}
   12684:	e05a      	b.n	1273c <gfx_mono_generic_draw_line+0x27c>
		e = dx - dy;
   12686:	230a      	movs	r3, #10
   12688:	18fb      	adds	r3, r7, r3
   1268a:	781a      	ldrb	r2, [r3, #0]
   1268c:	2309      	movs	r3, #9
   1268e:	18fb      	adds	r3, r7, r3
   12690:	781b      	ldrb	r3, [r3, #0]
   12692:	1ad3      	subs	r3, r2, r3
   12694:	b2da      	uxtb	r2, r3
   12696:	2308      	movs	r3, #8
   12698:	18fb      	adds	r3, r7, r3
   1269a:	701a      	strb	r2, [r3, #0]
		for (i = 0; i <= dy; i++) {
   1269c:	230f      	movs	r3, #15
   1269e:	18fb      	adds	r3, r7, r3
   126a0:	2200      	movs	r2, #0
   126a2:	701a      	strb	r2, [r3, #0]
   126a4:	e041      	b.n	1272a <gfx_mono_generic_draw_line+0x26a>
			gfx_mono_draw_pixel(x, y, color);
   126a6:	2320      	movs	r3, #32
   126a8:	18fb      	adds	r3, r7, r3
   126aa:	781a      	ldrb	r2, [r3, #0]
   126ac:	230d      	movs	r3, #13
   126ae:	18fb      	adds	r3, r7, r3
   126b0:	7819      	ldrb	r1, [r3, #0]
   126b2:	230e      	movs	r3, #14
   126b4:	18fb      	adds	r3, r7, r3
   126b6:	781b      	ldrb	r3, [r3, #0]
   126b8:	0018      	movs	r0, r3
   126ba:	4b22      	ldr	r3, [pc, #136]	; (12744 <gfx_mono_generic_draw_line+0x284>)
   126bc:	4798      	blx	r3
			if (e >= 0) {
   126be:	2308      	movs	r3, #8
   126c0:	18fb      	adds	r3, r7, r3
   126c2:	781b      	ldrb	r3, [r3, #0]
   126c4:	2b7f      	cmp	r3, #127	; 0x7f
   126c6:	d814      	bhi.n	126f2 <gfx_mono_generic_draw_line+0x232>
				e -= dy;
   126c8:	2308      	movs	r3, #8
   126ca:	18fb      	adds	r3, r7, r3
   126cc:	781a      	ldrb	r2, [r3, #0]
   126ce:	2309      	movs	r3, #9
   126d0:	18fb      	adds	r3, r7, r3
   126d2:	781b      	ldrb	r3, [r3, #0]
   126d4:	1ad3      	subs	r3, r2, r3
   126d6:	b2da      	uxtb	r2, r3
   126d8:	2308      	movs	r3, #8
   126da:	18fb      	adds	r3, r7, r3
   126dc:	701a      	strb	r2, [r3, #0]
				x += xinc;
   126de:	230c      	movs	r3, #12
   126e0:	18fb      	adds	r3, r7, r3
   126e2:	7819      	ldrb	r1, [r3, #0]
   126e4:	230e      	movs	r3, #14
   126e6:	18fb      	adds	r3, r7, r3
   126e8:	220e      	movs	r2, #14
   126ea:	18ba      	adds	r2, r7, r2
   126ec:	7812      	ldrb	r2, [r2, #0]
   126ee:	188a      	adds	r2, r1, r2
   126f0:	701a      	strb	r2, [r3, #0]
			e += dx;
   126f2:	2308      	movs	r3, #8
   126f4:	18fb      	adds	r3, r7, r3
   126f6:	781a      	ldrb	r2, [r3, #0]
   126f8:	230a      	movs	r3, #10
   126fa:	18fb      	adds	r3, r7, r3
   126fc:	781b      	ldrb	r3, [r3, #0]
   126fe:	18d3      	adds	r3, r2, r3
   12700:	b2da      	uxtb	r2, r3
   12702:	2308      	movs	r3, #8
   12704:	18fb      	adds	r3, r7, r3
   12706:	701a      	strb	r2, [r3, #0]
			y += yinc;
   12708:	230b      	movs	r3, #11
   1270a:	18fb      	adds	r3, r7, r3
   1270c:	7819      	ldrb	r1, [r3, #0]
   1270e:	230d      	movs	r3, #13
   12710:	18fb      	adds	r3, r7, r3
   12712:	220d      	movs	r2, #13
   12714:	18ba      	adds	r2, r7, r2
   12716:	7812      	ldrb	r2, [r2, #0]
   12718:	188a      	adds	r2, r1, r2
   1271a:	701a      	strb	r2, [r3, #0]
		for (i = 0; i <= dy; i++) {
   1271c:	230f      	movs	r3, #15
   1271e:	18fb      	adds	r3, r7, r3
   12720:	781a      	ldrb	r2, [r3, #0]
   12722:	230f      	movs	r3, #15
   12724:	18fb      	adds	r3, r7, r3
   12726:	3201      	adds	r2, #1
   12728:	701a      	strb	r2, [r3, #0]
   1272a:	230f      	movs	r3, #15
   1272c:	18fb      	adds	r3, r7, r3
   1272e:	781a      	ldrb	r2, [r3, #0]
   12730:	2309      	movs	r3, #9
   12732:	18fb      	adds	r3, r7, r3
   12734:	781b      	ldrb	r3, [r3, #0]
   12736:	b25b      	sxtb	r3, r3
   12738:	429a      	cmp	r2, r3
   1273a:	ddb4      	ble.n	126a6 <gfx_mono_generic_draw_line+0x1e6>
}
   1273c:	46c0      	nop			; (mov r8, r8)
   1273e:	46bd      	mov	sp, r7
   12740:	b004      	add	sp, #16
   12742:	bdb0      	pop	{r4, r5, r7, pc}
   12744:	00012af9 	.word	0x00012af9

00012748 <gfx_mono_generic_draw_filled_circle>:
 * \param[in]  quadrant_mask Bitmask indicating which quadrants to draw.
 */
void gfx_mono_generic_draw_filled_circle(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t radius, enum gfx_mono_color color,
		uint8_t quadrant_mask)
{
   12748:	b5b0      	push	{r4, r5, r7, lr}
   1274a:	b084      	sub	sp, #16
   1274c:	af00      	add	r7, sp, #0
   1274e:	0005      	movs	r5, r0
   12750:	000c      	movs	r4, r1
   12752:	0010      	movs	r0, r2
   12754:	0019      	movs	r1, r3
   12756:	1dfb      	adds	r3, r7, #7
   12758:	1c2a      	adds	r2, r5, #0
   1275a:	701a      	strb	r2, [r3, #0]
   1275c:	1dbb      	adds	r3, r7, #6
   1275e:	1c22      	adds	r2, r4, #0
   12760:	701a      	strb	r2, [r3, #0]
   12762:	1d7b      	adds	r3, r7, #5
   12764:	1c02      	adds	r2, r0, #0
   12766:	701a      	strb	r2, [r3, #0]
   12768:	1d3b      	adds	r3, r7, #4
   1276a:	1c0a      	adds	r2, r1, #0
   1276c:	701a      	strb	r2, [r3, #0]
	gfx_coord_t offset_x;
	gfx_coord_t offset_y;
	int16_t error;

	/* Draw only a pixel if radius is zero. */
	if (radius == 0) {
   1276e:	1d7b      	adds	r3, r7, #5
   12770:	781b      	ldrb	r3, [r3, #0]
   12772:	2b00      	cmp	r3, #0
   12774:	d109      	bne.n	1278a <gfx_mono_generic_draw_filled_circle+0x42>
		gfx_mono_draw_pixel(x, y, color);
   12776:	1d3b      	adds	r3, r7, #4
   12778:	781a      	ldrb	r2, [r3, #0]
   1277a:	1dbb      	adds	r3, r7, #6
   1277c:	7819      	ldrb	r1, [r3, #0]
   1277e:	1dfb      	adds	r3, r7, #7
   12780:	781b      	ldrb	r3, [r3, #0]
   12782:	0018      	movs	r0, r3
   12784:	4b8f      	ldr	r3, [pc, #572]	; (129c4 <gfx_mono_generic_draw_filled_circle+0x27c>)
   12786:	4798      	blx	r3
		return;
   12788:	e118      	b.n	129bc <gfx_mono_generic_draw_filled_circle+0x274>
	}

	/* Set up start iterators. */
	offset_x = 0;
   1278a:	230f      	movs	r3, #15
   1278c:	18fb      	adds	r3, r7, r3
   1278e:	2200      	movs	r2, #0
   12790:	701a      	strb	r2, [r3, #0]
	offset_y = radius;
   12792:	230e      	movs	r3, #14
   12794:	18fb      	adds	r3, r7, r3
   12796:	1d7a      	adds	r2, r7, #5
   12798:	7812      	ldrb	r2, [r2, #0]
   1279a:	701a      	strb	r2, [r3, #0]
	error = 3 - 2 * radius;
   1279c:	1d7b      	adds	r3, r7, #5
   1279e:	781b      	ldrb	r3, [r3, #0]
   127a0:	b29b      	uxth	r3, r3
   127a2:	18db      	adds	r3, r3, r3
   127a4:	b29b      	uxth	r3, r3
   127a6:	2203      	movs	r2, #3
   127a8:	1ad3      	subs	r3, r2, r3
   127aa:	b29a      	uxth	r2, r3
   127ac:	230c      	movs	r3, #12
   127ae:	18fb      	adds	r3, r7, r3
   127b0:	801a      	strh	r2, [r3, #0]

	/* Iterate offset_x from 0 to radius. */
	while (offset_x <= offset_y) {
   127b2:	e0fa      	b.n	129aa <gfx_mono_generic_draw_filled_circle+0x262>
		/* Draw vertical lines tracking each quadrant. */
		if (quadrant_mask & GFX_QUADRANT0) {
   127b4:	2320      	movs	r3, #32
   127b6:	18fb      	adds	r3, r7, r3
   127b8:	781b      	ldrb	r3, [r3, #0]
   127ba:	2203      	movs	r2, #3
   127bc:	4013      	ands	r3, r2
   127be:	d02d      	beq.n	1281c <gfx_mono_generic_draw_filled_circle+0xd4>
			gfx_mono_draw_vertical_line(x + offset_y,
   127c0:	1dfa      	adds	r2, r7, #7
   127c2:	230e      	movs	r3, #14
   127c4:	18fb      	adds	r3, r7, r3
   127c6:	7812      	ldrb	r2, [r2, #0]
   127c8:	781b      	ldrb	r3, [r3, #0]
   127ca:	18d3      	adds	r3, r2, r3
   127cc:	b2d8      	uxtb	r0, r3
   127ce:	1dba      	adds	r2, r7, #6
   127d0:	230f      	movs	r3, #15
   127d2:	18fb      	adds	r3, r7, r3
   127d4:	7812      	ldrb	r2, [r2, #0]
   127d6:	781b      	ldrb	r3, [r3, #0]
   127d8:	1ad3      	subs	r3, r2, r3
   127da:	b2d9      	uxtb	r1, r3
   127dc:	230f      	movs	r3, #15
   127de:	18fb      	adds	r3, r7, r3
   127e0:	781b      	ldrb	r3, [r3, #0]
   127e2:	3301      	adds	r3, #1
   127e4:	b2da      	uxtb	r2, r3
   127e6:	1d3b      	adds	r3, r7, #4
   127e8:	781b      	ldrb	r3, [r3, #0]
   127ea:	4c77      	ldr	r4, [pc, #476]	; (129c8 <gfx_mono_generic_draw_filled_circle+0x280>)
   127ec:	47a0      	blx	r4
					y - offset_x, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x + offset_x,
   127ee:	1dfa      	adds	r2, r7, #7
   127f0:	230f      	movs	r3, #15
   127f2:	18fb      	adds	r3, r7, r3
   127f4:	7812      	ldrb	r2, [r2, #0]
   127f6:	781b      	ldrb	r3, [r3, #0]
   127f8:	18d3      	adds	r3, r2, r3
   127fa:	b2d8      	uxtb	r0, r3
   127fc:	1dba      	adds	r2, r7, #6
   127fe:	230e      	movs	r3, #14
   12800:	18fb      	adds	r3, r7, r3
   12802:	7812      	ldrb	r2, [r2, #0]
   12804:	781b      	ldrb	r3, [r3, #0]
   12806:	1ad3      	subs	r3, r2, r3
   12808:	b2d9      	uxtb	r1, r3
   1280a:	230e      	movs	r3, #14
   1280c:	18fb      	adds	r3, r7, r3
   1280e:	781b      	ldrb	r3, [r3, #0]
   12810:	3301      	adds	r3, #1
   12812:	b2da      	uxtb	r2, r3
   12814:	1d3b      	adds	r3, r7, #4
   12816:	781b      	ldrb	r3, [r3, #0]
   12818:	4c6b      	ldr	r4, [pc, #428]	; (129c8 <gfx_mono_generic_draw_filled_circle+0x280>)
   1281a:	47a0      	blx	r4
					y - offset_y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT1) {
   1281c:	2320      	movs	r3, #32
   1281e:	18fb      	adds	r3, r7, r3
   12820:	781b      	ldrb	r3, [r3, #0]
   12822:	220c      	movs	r2, #12
   12824:	4013      	ands	r3, r2
   12826:	d02d      	beq.n	12884 <gfx_mono_generic_draw_filled_circle+0x13c>
			gfx_mono_draw_vertical_line(x - offset_y,
   12828:	1dfa      	adds	r2, r7, #7
   1282a:	230e      	movs	r3, #14
   1282c:	18fb      	adds	r3, r7, r3
   1282e:	7812      	ldrb	r2, [r2, #0]
   12830:	781b      	ldrb	r3, [r3, #0]
   12832:	1ad3      	subs	r3, r2, r3
   12834:	b2d8      	uxtb	r0, r3
   12836:	1dba      	adds	r2, r7, #6
   12838:	230f      	movs	r3, #15
   1283a:	18fb      	adds	r3, r7, r3
   1283c:	7812      	ldrb	r2, [r2, #0]
   1283e:	781b      	ldrb	r3, [r3, #0]
   12840:	1ad3      	subs	r3, r2, r3
   12842:	b2d9      	uxtb	r1, r3
   12844:	230f      	movs	r3, #15
   12846:	18fb      	adds	r3, r7, r3
   12848:	781b      	ldrb	r3, [r3, #0]
   1284a:	3301      	adds	r3, #1
   1284c:	b2da      	uxtb	r2, r3
   1284e:	1d3b      	adds	r3, r7, #4
   12850:	781b      	ldrb	r3, [r3, #0]
   12852:	4c5d      	ldr	r4, [pc, #372]	; (129c8 <gfx_mono_generic_draw_filled_circle+0x280>)
   12854:	47a0      	blx	r4
					y - offset_x, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x - offset_x,
   12856:	1dfa      	adds	r2, r7, #7
   12858:	230f      	movs	r3, #15
   1285a:	18fb      	adds	r3, r7, r3
   1285c:	7812      	ldrb	r2, [r2, #0]
   1285e:	781b      	ldrb	r3, [r3, #0]
   12860:	1ad3      	subs	r3, r2, r3
   12862:	b2d8      	uxtb	r0, r3
   12864:	1dba      	adds	r2, r7, #6
   12866:	230e      	movs	r3, #14
   12868:	18fb      	adds	r3, r7, r3
   1286a:	7812      	ldrb	r2, [r2, #0]
   1286c:	781b      	ldrb	r3, [r3, #0]
   1286e:	1ad3      	subs	r3, r2, r3
   12870:	b2d9      	uxtb	r1, r3
   12872:	230e      	movs	r3, #14
   12874:	18fb      	adds	r3, r7, r3
   12876:	781b      	ldrb	r3, [r3, #0]
   12878:	3301      	adds	r3, #1
   1287a:	b2da      	uxtb	r2, r3
   1287c:	1d3b      	adds	r3, r7, #4
   1287e:	781b      	ldrb	r3, [r3, #0]
   12880:	4c51      	ldr	r4, [pc, #324]	; (129c8 <gfx_mono_generic_draw_filled_circle+0x280>)
   12882:	47a0      	blx	r4
					y - offset_y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT2) {
   12884:	2320      	movs	r3, #32
   12886:	18fb      	adds	r3, r7, r3
   12888:	781b      	ldrb	r3, [r3, #0]
   1288a:	2230      	movs	r2, #48	; 0x30
   1288c:	4013      	ands	r3, r2
   1288e:	d025      	beq.n	128dc <gfx_mono_generic_draw_filled_circle+0x194>
			gfx_mono_draw_vertical_line(x - offset_y,
   12890:	1dfa      	adds	r2, r7, #7
   12892:	230e      	movs	r3, #14
   12894:	18fb      	adds	r3, r7, r3
   12896:	7812      	ldrb	r2, [r2, #0]
   12898:	781b      	ldrb	r3, [r3, #0]
   1289a:	1ad3      	subs	r3, r2, r3
   1289c:	b2d8      	uxtb	r0, r3
   1289e:	230f      	movs	r3, #15
   128a0:	18fb      	adds	r3, r7, r3
   128a2:	781b      	ldrb	r3, [r3, #0]
   128a4:	3301      	adds	r3, #1
   128a6:	b2da      	uxtb	r2, r3
   128a8:	1d3b      	adds	r3, r7, #4
   128aa:	781c      	ldrb	r4, [r3, #0]
   128ac:	1dbb      	adds	r3, r7, #6
   128ae:	7819      	ldrb	r1, [r3, #0]
   128b0:	0023      	movs	r3, r4
   128b2:	4c45      	ldr	r4, [pc, #276]	; (129c8 <gfx_mono_generic_draw_filled_circle+0x280>)
   128b4:	47a0      	blx	r4
					y, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x - offset_x,
   128b6:	1dfa      	adds	r2, r7, #7
   128b8:	230f      	movs	r3, #15
   128ba:	18fb      	adds	r3, r7, r3
   128bc:	7812      	ldrb	r2, [r2, #0]
   128be:	781b      	ldrb	r3, [r3, #0]
   128c0:	1ad3      	subs	r3, r2, r3
   128c2:	b2d8      	uxtb	r0, r3
   128c4:	230e      	movs	r3, #14
   128c6:	18fb      	adds	r3, r7, r3
   128c8:	781b      	ldrb	r3, [r3, #0]
   128ca:	3301      	adds	r3, #1
   128cc:	b2da      	uxtb	r2, r3
   128ce:	1d3b      	adds	r3, r7, #4
   128d0:	781c      	ldrb	r4, [r3, #0]
   128d2:	1dbb      	adds	r3, r7, #6
   128d4:	7819      	ldrb	r1, [r3, #0]
   128d6:	0023      	movs	r3, r4
   128d8:	4c3b      	ldr	r4, [pc, #236]	; (129c8 <gfx_mono_generic_draw_filled_circle+0x280>)
   128da:	47a0      	blx	r4
					y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT3) {
   128dc:	2320      	movs	r3, #32
   128de:	18fb      	adds	r3, r7, r3
   128e0:	781b      	ldrb	r3, [r3, #0]
   128e2:	22c0      	movs	r2, #192	; 0xc0
   128e4:	4013      	ands	r3, r2
   128e6:	d025      	beq.n	12934 <gfx_mono_generic_draw_filled_circle+0x1ec>
			gfx_mono_draw_vertical_line(x + offset_y,
   128e8:	1dfa      	adds	r2, r7, #7
   128ea:	230e      	movs	r3, #14
   128ec:	18fb      	adds	r3, r7, r3
   128ee:	7812      	ldrb	r2, [r2, #0]
   128f0:	781b      	ldrb	r3, [r3, #0]
   128f2:	18d3      	adds	r3, r2, r3
   128f4:	b2d8      	uxtb	r0, r3
   128f6:	230f      	movs	r3, #15
   128f8:	18fb      	adds	r3, r7, r3
   128fa:	781b      	ldrb	r3, [r3, #0]
   128fc:	3301      	adds	r3, #1
   128fe:	b2da      	uxtb	r2, r3
   12900:	1d3b      	adds	r3, r7, #4
   12902:	781c      	ldrb	r4, [r3, #0]
   12904:	1dbb      	adds	r3, r7, #6
   12906:	7819      	ldrb	r1, [r3, #0]
   12908:	0023      	movs	r3, r4
   1290a:	4c2f      	ldr	r4, [pc, #188]	; (129c8 <gfx_mono_generic_draw_filled_circle+0x280>)
   1290c:	47a0      	blx	r4
					y, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x + offset_x,
   1290e:	1dfa      	adds	r2, r7, #7
   12910:	230f      	movs	r3, #15
   12912:	18fb      	adds	r3, r7, r3
   12914:	7812      	ldrb	r2, [r2, #0]
   12916:	781b      	ldrb	r3, [r3, #0]
   12918:	18d3      	adds	r3, r2, r3
   1291a:	b2d8      	uxtb	r0, r3
   1291c:	230e      	movs	r3, #14
   1291e:	18fb      	adds	r3, r7, r3
   12920:	781b      	ldrb	r3, [r3, #0]
   12922:	3301      	adds	r3, #1
   12924:	b2da      	uxtb	r2, r3
   12926:	1d3b      	adds	r3, r7, #4
   12928:	781c      	ldrb	r4, [r3, #0]
   1292a:	1dbb      	adds	r3, r7, #6
   1292c:	7819      	ldrb	r1, [r3, #0]
   1292e:	0023      	movs	r3, r4
   12930:	4c25      	ldr	r4, [pc, #148]	; (129c8 <gfx_mono_generic_draw_filled_circle+0x280>)
   12932:	47a0      	blx	r4
					y, offset_y + 1, color);
		}

		/* Update error value and step offset_y when required. */
		if (error < 0) {
   12934:	230c      	movs	r3, #12
   12936:	18fb      	adds	r3, r7, r3
   12938:	2200      	movs	r2, #0
   1293a:	5e9b      	ldrsh	r3, [r3, r2]
   1293c:	2b00      	cmp	r3, #0
   1293e:	da10      	bge.n	12962 <gfx_mono_generic_draw_filled_circle+0x21a>
			error += ((offset_x << 2) + 6);
   12940:	230f      	movs	r3, #15
   12942:	18fb      	adds	r3, r7, r3
   12944:	781b      	ldrb	r3, [r3, #0]
   12946:	b29b      	uxth	r3, r3
   12948:	009b      	lsls	r3, r3, #2
   1294a:	b29a      	uxth	r2, r3
   1294c:	230c      	movs	r3, #12
   1294e:	18fb      	adds	r3, r7, r3
   12950:	881b      	ldrh	r3, [r3, #0]
   12952:	18d3      	adds	r3, r2, r3
   12954:	b29b      	uxth	r3, r3
   12956:	3306      	adds	r3, #6
   12958:	b29a      	uxth	r2, r3
   1295a:	230c      	movs	r3, #12
   1295c:	18fb      	adds	r3, r7, r3
   1295e:	801a      	strh	r2, [r3, #0]
   12960:	e01c      	b.n	1299c <gfx_mono_generic_draw_filled_circle+0x254>
		} else {
			error += (((offset_x - offset_y) << 2) + 10);
   12962:	230f      	movs	r3, #15
   12964:	18fb      	adds	r3, r7, r3
   12966:	781b      	ldrb	r3, [r3, #0]
   12968:	b29a      	uxth	r2, r3
   1296a:	230e      	movs	r3, #14
   1296c:	18fb      	adds	r3, r7, r3
   1296e:	781b      	ldrb	r3, [r3, #0]
   12970:	b29b      	uxth	r3, r3
   12972:	1ad3      	subs	r3, r2, r3
   12974:	b29b      	uxth	r3, r3
   12976:	009b      	lsls	r3, r3, #2
   12978:	b29a      	uxth	r2, r3
   1297a:	230c      	movs	r3, #12
   1297c:	18fb      	adds	r3, r7, r3
   1297e:	881b      	ldrh	r3, [r3, #0]
   12980:	18d3      	adds	r3, r2, r3
   12982:	b29b      	uxth	r3, r3
   12984:	330a      	adds	r3, #10
   12986:	b29a      	uxth	r2, r3
   12988:	230c      	movs	r3, #12
   1298a:	18fb      	adds	r3, r7, r3
   1298c:	801a      	strh	r2, [r3, #0]
			--offset_y;
   1298e:	230e      	movs	r3, #14
   12990:	18fb      	adds	r3, r7, r3
   12992:	220e      	movs	r2, #14
   12994:	18ba      	adds	r2, r7, r2
   12996:	7812      	ldrb	r2, [r2, #0]
   12998:	3a01      	subs	r2, #1
   1299a:	701a      	strb	r2, [r3, #0]
		}

		/* Next X. */
		++offset_x;
   1299c:	230f      	movs	r3, #15
   1299e:	18fb      	adds	r3, r7, r3
   129a0:	220f      	movs	r2, #15
   129a2:	18ba      	adds	r2, r7, r2
   129a4:	7812      	ldrb	r2, [r2, #0]
   129a6:	3201      	adds	r2, #1
   129a8:	701a      	strb	r2, [r3, #0]
	while (offset_x <= offset_y) {
   129aa:	230f      	movs	r3, #15
   129ac:	18fa      	adds	r2, r7, r3
   129ae:	230e      	movs	r3, #14
   129b0:	18fb      	adds	r3, r7, r3
   129b2:	7812      	ldrb	r2, [r2, #0]
   129b4:	781b      	ldrb	r3, [r3, #0]
   129b6:	429a      	cmp	r2, r3
   129b8:	d800      	bhi.n	129bc <gfx_mono_generic_draw_filled_circle+0x274>
   129ba:	e6fb      	b.n	127b4 <gfx_mono_generic_draw_filled_circle+0x6c>
	}
}
   129bc:	46bd      	mov	sp, r7
   129be:	b004      	add	sp, #16
   129c0:	bdb0      	pop	{r4, r5, r7, pc}
   129c2:	46c0      	nop			; (mov r8, r8)
   129c4:	00012af9 	.word	0x00012af9
   129c8:	00012331 	.word	0x00012331

000129cc <ssd1306_set_page_address>:
 * RAM.
 *
 * \param address the page address
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
   129cc:	b580      	push	{r7, lr}
   129ce:	b082      	sub	sp, #8
   129d0:	af00      	add	r7, sp, #0
   129d2:	0002      	movs	r2, r0
   129d4:	1dfb      	adds	r3, r7, #7
   129d6:	701a      	strb	r2, [r3, #0]
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
   129d8:	1dfb      	adds	r3, r7, #7
   129da:	1dfa      	adds	r2, r7, #7
   129dc:	7812      	ldrb	r2, [r2, #0]
   129de:	210f      	movs	r1, #15
   129e0:	400a      	ands	r2, r1
   129e2:	701a      	strb	r2, [r3, #0]
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
   129e4:	1dfb      	adds	r3, r7, #7
   129e6:	781b      	ldrb	r3, [r3, #0]
   129e8:	2250      	movs	r2, #80	; 0x50
   129ea:	4252      	negs	r2, r2
   129ec:	4313      	orrs	r3, r2
   129ee:	b2db      	uxtb	r3, r3
   129f0:	0018      	movs	r0, r3
   129f2:	4b03      	ldr	r3, [pc, #12]	; (12a00 <ssd1306_set_page_address+0x34>)
   129f4:	4798      	blx	r3
}
   129f6:	46c0      	nop			; (mov r8, r8)
   129f8:	46bd      	mov	sp, r7
   129fa:	b002      	add	sp, #8
   129fc:	bd80      	pop	{r7, pc}
   129fe:	46c0      	nop			; (mov r8, r8)
   12a00:	000121dd 	.word	0x000121dd

00012a04 <ssd1306_set_column_address>:
 * \brief Set current column in display RAM
 *
 * \param address the column address
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
   12a04:	b580      	push	{r7, lr}
   12a06:	b082      	sub	sp, #8
   12a08:	af00      	add	r7, sp, #0
   12a0a:	0002      	movs	r2, r0
   12a0c:	1dfb      	adds	r3, r7, #7
   12a0e:	701a      	strb	r2, [r3, #0]
	// Make sure the address is 7 bits
	address &= 0x7F;
   12a10:	1dfb      	adds	r3, r7, #7
   12a12:	1dfa      	adds	r2, r7, #7
   12a14:	7812      	ldrb	r2, [r2, #0]
   12a16:	217f      	movs	r1, #127	; 0x7f
   12a18:	400a      	ands	r2, r1
   12a1a:	701a      	strb	r2, [r3, #0]
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4));
   12a1c:	1dfb      	adds	r3, r7, #7
   12a1e:	781b      	ldrb	r3, [r3, #0]
   12a20:	091b      	lsrs	r3, r3, #4
   12a22:	b2db      	uxtb	r3, r3
   12a24:	2210      	movs	r2, #16
   12a26:	4313      	orrs	r3, r2
   12a28:	b2db      	uxtb	r3, r3
   12a2a:	0018      	movs	r0, r3
   12a2c:	4b06      	ldr	r3, [pc, #24]	; (12a48 <ssd1306_set_column_address+0x44>)
   12a2e:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
   12a30:	1dfb      	adds	r3, r7, #7
   12a32:	781b      	ldrb	r3, [r3, #0]
   12a34:	220f      	movs	r2, #15
   12a36:	4013      	ands	r3, r2
   12a38:	b2db      	uxtb	r3, r3
   12a3a:	0018      	movs	r0, r3
   12a3c:	4b02      	ldr	r3, [pc, #8]	; (12a48 <ssd1306_set_column_address+0x44>)
   12a3e:	4798      	blx	r3
}
   12a40:	46c0      	nop			; (mov r8, r8)
   12a42:	46bd      	mov	sp, r7
   12a44:	b002      	add	sp, #8
   12a46:	bd80      	pop	{r7, pc}
   12a48:	000121dd 	.word	0x000121dd

00012a4c <ssd1306_set_display_start_line_address>:
 * \brief Set the display start draw line address
 *
 * This function will set which line should be the start draw line for the OLED.
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
   12a4c:	b580      	push	{r7, lr}
   12a4e:	b082      	sub	sp, #8
   12a50:	af00      	add	r7, sp, #0
   12a52:	0002      	movs	r2, r0
   12a54:	1dfb      	adds	r3, r7, #7
   12a56:	701a      	strb	r2, [r3, #0]
	// Make sure address is 6 bits
	address &= 0x3F;
   12a58:	1dfb      	adds	r3, r7, #7
   12a5a:	1dfa      	adds	r2, r7, #7
   12a5c:	7812      	ldrb	r2, [r2, #0]
   12a5e:	213f      	movs	r1, #63	; 0x3f
   12a60:	400a      	ands	r2, r1
   12a62:	701a      	strb	r2, [r3, #0]
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
   12a64:	1dfb      	adds	r3, r7, #7
   12a66:	781b      	ldrb	r3, [r3, #0]
   12a68:	2240      	movs	r2, #64	; 0x40
   12a6a:	4313      	orrs	r3, r2
   12a6c:	b2db      	uxtb	r3, r3
   12a6e:	0018      	movs	r0, r3
   12a70:	4b02      	ldr	r3, [pc, #8]	; (12a7c <ssd1306_set_display_start_line_address+0x30>)
   12a72:	4798      	blx	r3
}
   12a74:	46c0      	nop			; (mov r8, r8)
   12a76:	46bd      	mov	sp, r7
   12a78:	b002      	add	sp, #8
   12a7a:	bd80      	pop	{r7, pc}
   12a7c:	000121dd 	.word	0x000121dd

00012a80 <gfx_mono_ssd1306_init>:
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_ssd1306_init(void)
{
   12a80:	b590      	push	{r4, r7, lr}
   12a82:	b083      	sub	sp, #12
   12a84:	af00      	add	r7, sp, #0
	uint8_t page;
	uint8_t column;

#ifdef CONFIG_SSD1306_FRAMEBUFFER
	gfx_mono_set_framebuffer(framebuffer);
   12a86:	4b17      	ldr	r3, [pc, #92]	; (12ae4 <gfx_mono_ssd1306_init+0x64>)
   12a88:	0018      	movs	r0, r3
   12a8a:	4b17      	ldr	r3, [pc, #92]	; (12ae8 <gfx_mono_ssd1306_init+0x68>)
   12a8c:	4798      	blx	r3
#endif

	/* Initialize the low-level display controller. */
	ssd1306_init();
   12a8e:	4b17      	ldr	r3, [pc, #92]	; (12aec <gfx_mono_ssd1306_init+0x6c>)
   12a90:	4798      	blx	r3

	/* Set display to output data from line 0 */
	ssd1306_set_display_start_line_address(0);
   12a92:	2000      	movs	r0, #0
   12a94:	4b16      	ldr	r3, [pc, #88]	; (12af0 <gfx_mono_ssd1306_init+0x70>)
   12a96:	4798      	blx	r3

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
   12a98:	1dfb      	adds	r3, r7, #7
   12a9a:	2200      	movs	r2, #0
   12a9c:	701a      	strb	r2, [r3, #0]
   12a9e:	e019      	b.n	12ad4 <gfx_mono_ssd1306_init+0x54>
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
   12aa0:	1dbb      	adds	r3, r7, #6
   12aa2:	2200      	movs	r2, #0
   12aa4:	701a      	strb	r2, [r3, #0]
   12aa6:	e00c      	b.n	12ac2 <gfx_mono_ssd1306_init+0x42>
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
   12aa8:	1dbb      	adds	r3, r7, #6
   12aaa:	7819      	ldrb	r1, [r3, #0]
   12aac:	1dfb      	adds	r3, r7, #7
   12aae:	7818      	ldrb	r0, [r3, #0]
   12ab0:	2301      	movs	r3, #1
   12ab2:	2200      	movs	r2, #0
   12ab4:	4c0f      	ldr	r4, [pc, #60]	; (12af4 <gfx_mono_ssd1306_init+0x74>)
   12ab6:	47a0      	blx	r4
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
   12ab8:	1dbb      	adds	r3, r7, #6
   12aba:	781a      	ldrb	r2, [r3, #0]
   12abc:	1dbb      	adds	r3, r7, #6
   12abe:	3201      	adds	r2, #1
   12ac0:	701a      	strb	r2, [r3, #0]
   12ac2:	1dbb      	adds	r3, r7, #6
   12ac4:	781b      	ldrb	r3, [r3, #0]
   12ac6:	2b43      	cmp	r3, #67	; 0x43
   12ac8:	d9ee      	bls.n	12aa8 <gfx_mono_ssd1306_init+0x28>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
   12aca:	1dfb      	adds	r3, r7, #7
   12acc:	781a      	ldrb	r2, [r3, #0]
   12ace:	1dfb      	adds	r3, r7, #7
   12ad0:	3201      	adds	r2, #1
   12ad2:	701a      	strb	r2, [r3, #0]
   12ad4:	1dfb      	adds	r3, r7, #7
   12ad6:	781b      	ldrb	r3, [r3, #0]
   12ad8:	2b03      	cmp	r3, #3
   12ada:	d9e1      	bls.n	12aa0 <gfx_mono_ssd1306_init+0x20>
		}
	}
}
   12adc:	46c0      	nop			; (mov r8, r8)
   12ade:	46bd      	mov	sp, r7
   12ae0:	b003      	add	sp, #12
   12ae2:	bd90      	pop	{r4, r7, pc}
   12ae4:	200002e0 	.word	0x200002e0
   12ae8:	0001228d 	.word	0x0001228d
   12aec:	00012129 	.word	0x00012129
   12af0:	00012a4d 	.word	0x00012a4d
   12af4:	00012bed 	.word	0x00012bed

00012af8 <gfx_mono_ssd1306_draw_pixel>:
	gfx_mono_ssd1306_draw_pixel(10, 10, GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_ssd1306_draw_pixel(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t color)
{
   12af8:	b590      	push	{r4, r7, lr}
   12afa:	b085      	sub	sp, #20
   12afc:	af00      	add	r7, sp, #0
   12afe:	0004      	movs	r4, r0
   12b00:	0008      	movs	r0, r1
   12b02:	0011      	movs	r1, r2
   12b04:	1dfb      	adds	r3, r7, #7
   12b06:	1c22      	adds	r2, r4, #0
   12b08:	701a      	strb	r2, [r3, #0]
   12b0a:	1dbb      	adds	r3, r7, #6
   12b0c:	1c02      	adds	r2, r0, #0
   12b0e:	701a      	strb	r2, [r3, #0]
   12b10:	1d7b      	adds	r3, r7, #5
   12b12:	1c0a      	adds	r2, r1, #0
   12b14:	701a      	strb	r2, [r3, #0]
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	/* Discard pixels drawn outside the screen */
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
   12b16:	1dfb      	adds	r3, r7, #7
   12b18:	781b      	ldrb	r3, [r3, #0]
   12b1a:	2b43      	cmp	r3, #67	; 0x43
   12b1c:	d85d      	bhi.n	12bda <gfx_mono_ssd1306_draw_pixel+0xe2>
   12b1e:	1dbb      	adds	r3, r7, #6
   12b20:	781b      	ldrb	r3, [r3, #0]
   12b22:	2b1f      	cmp	r3, #31
   12b24:	d859      	bhi.n	12bda <gfx_mono_ssd1306_draw_pixel+0xe2>
		return;
	}

	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
   12b26:	230e      	movs	r3, #14
   12b28:	18fb      	adds	r3, r7, r3
   12b2a:	1dba      	adds	r2, r7, #6
   12b2c:	7812      	ldrb	r2, [r2, #0]
   12b2e:	08d2      	lsrs	r2, r2, #3
   12b30:	701a      	strb	r2, [r3, #0]
	pixel_mask = (1 << (y - (page * 8)));
   12b32:	1dbb      	adds	r3, r7, #6
   12b34:	781a      	ldrb	r2, [r3, #0]
   12b36:	230e      	movs	r3, #14
   12b38:	18fb      	adds	r3, r7, r3
   12b3a:	781b      	ldrb	r3, [r3, #0]
   12b3c:	00db      	lsls	r3, r3, #3
   12b3e:	1ad3      	subs	r3, r2, r3
   12b40:	2201      	movs	r2, #1
   12b42:	409a      	lsls	r2, r3
   12b44:	230d      	movs	r3, #13
   12b46:	18fb      	adds	r3, r7, r3
   12b48:	701a      	strb	r2, [r3, #0]
	/*
	 * Read the page containing the pixel in interest, then perform the
	 * requested action on this pixel before writing the page back to the
	 * display.
	 */
	pixel_value = gfx_mono_get_byte(page, x);
   12b4a:	230f      	movs	r3, #15
   12b4c:	18fc      	adds	r4, r7, r3
   12b4e:	1dfb      	adds	r3, r7, #7
   12b50:	781a      	ldrb	r2, [r3, #0]
   12b52:	230e      	movs	r3, #14
   12b54:	18fb      	adds	r3, r7, r3
   12b56:	781b      	ldrb	r3, [r3, #0]
   12b58:	0011      	movs	r1, r2
   12b5a:	0018      	movs	r0, r3
   12b5c:	4b21      	ldr	r3, [pc, #132]	; (12be4 <gfx_mono_ssd1306_draw_pixel+0xec>)
   12b5e:	4798      	blx	r3
   12b60:	0003      	movs	r3, r0
   12b62:	7023      	strb	r3, [r4, #0]

	switch (color) {
   12b64:	1d7b      	adds	r3, r7, #5
   12b66:	781b      	ldrb	r3, [r3, #0]
   12b68:	2b01      	cmp	r3, #1
   12b6a:	d004      	beq.n	12b76 <gfx_mono_ssd1306_draw_pixel+0x7e>
   12b6c:	2b02      	cmp	r3, #2
   12b6e:	d01d      	beq.n	12bac <gfx_mono_ssd1306_draw_pixel+0xb4>
   12b70:	2b00      	cmp	r3, #0
   12b72:	d00b      	beq.n	12b8c <gfx_mono_ssd1306_draw_pixel+0x94>
	case GFX_PIXEL_XOR:
		pixel_value ^= pixel_mask;
		break;

	default:
		break;
   12b74:	e025      	b.n	12bc2 <gfx_mono_ssd1306_draw_pixel+0xca>
		pixel_value |= pixel_mask;
   12b76:	230f      	movs	r3, #15
   12b78:	18fb      	adds	r3, r7, r3
   12b7a:	220f      	movs	r2, #15
   12b7c:	18b9      	adds	r1, r7, r2
   12b7e:	220d      	movs	r2, #13
   12b80:	18ba      	adds	r2, r7, r2
   12b82:	7809      	ldrb	r1, [r1, #0]
   12b84:	7812      	ldrb	r2, [r2, #0]
   12b86:	430a      	orrs	r2, r1
   12b88:	701a      	strb	r2, [r3, #0]
		break;
   12b8a:	e01a      	b.n	12bc2 <gfx_mono_ssd1306_draw_pixel+0xca>
		pixel_value &= ~pixel_mask;
   12b8c:	230d      	movs	r3, #13
   12b8e:	18fb      	adds	r3, r7, r3
   12b90:	781b      	ldrb	r3, [r3, #0]
   12b92:	b25b      	sxtb	r3, r3
   12b94:	43db      	mvns	r3, r3
   12b96:	b25b      	sxtb	r3, r3
   12b98:	220f      	movs	r2, #15
   12b9a:	18ba      	adds	r2, r7, r2
   12b9c:	7812      	ldrb	r2, [r2, #0]
   12b9e:	b252      	sxtb	r2, r2
   12ba0:	4013      	ands	r3, r2
   12ba2:	b25a      	sxtb	r2, r3
   12ba4:	230f      	movs	r3, #15
   12ba6:	18fb      	adds	r3, r7, r3
   12ba8:	701a      	strb	r2, [r3, #0]
		break;
   12baa:	e00a      	b.n	12bc2 <gfx_mono_ssd1306_draw_pixel+0xca>
		pixel_value ^= pixel_mask;
   12bac:	230f      	movs	r3, #15
   12bae:	18fb      	adds	r3, r7, r3
   12bb0:	220f      	movs	r2, #15
   12bb2:	18b9      	adds	r1, r7, r2
   12bb4:	220d      	movs	r2, #13
   12bb6:	18ba      	adds	r2, r7, r2
   12bb8:	7809      	ldrb	r1, [r1, #0]
   12bba:	7812      	ldrb	r2, [r2, #0]
   12bbc:	404a      	eors	r2, r1
   12bbe:	701a      	strb	r2, [r3, #0]
		break;
   12bc0:	46c0      	nop			; (mov r8, r8)
	}

	gfx_mono_put_byte(page, x, pixel_value);
   12bc2:	230f      	movs	r3, #15
   12bc4:	18fb      	adds	r3, r7, r3
   12bc6:	781a      	ldrb	r2, [r3, #0]
   12bc8:	1dfb      	adds	r3, r7, #7
   12bca:	7819      	ldrb	r1, [r3, #0]
   12bcc:	230e      	movs	r3, #14
   12bce:	18fb      	adds	r3, r7, r3
   12bd0:	7818      	ldrb	r0, [r3, #0]
   12bd2:	2300      	movs	r3, #0
   12bd4:	4c04      	ldr	r4, [pc, #16]	; (12be8 <gfx_mono_ssd1306_draw_pixel+0xf0>)
   12bd6:	47a0      	blx	r4
   12bd8:	e000      	b.n	12bdc <gfx_mono_ssd1306_draw_pixel+0xe4>
		return;
   12bda:	46c0      	nop			; (mov r8, r8)
}
   12bdc:	46bd      	mov	sp, r7
   12bde:	b005      	add	sp, #20
   12be0:	bd90      	pop	{r4, r7, pc}
   12be2:	46c0      	nop			; (mov r8, r8)
   12be4:	00012c8d 	.word	0x00012c8d
   12be8:	00012bed 	.word	0x00012bed

00012bec <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
   12bec:	b5b0      	push	{r4, r5, r7, lr}
   12bee:	b082      	sub	sp, #8
   12bf0:	af00      	add	r7, sp, #0
   12bf2:	0005      	movs	r5, r0
   12bf4:	000c      	movs	r4, r1
   12bf6:	0010      	movs	r0, r2
   12bf8:	0019      	movs	r1, r3
   12bfa:	1dfb      	adds	r3, r7, #7
   12bfc:	1c2a      	adds	r2, r5, #0
   12bfe:	701a      	strb	r2, [r3, #0]
   12c00:	1dbb      	adds	r3, r7, #6
   12c02:	1c22      	adds	r2, r4, #0
   12c04:	701a      	strb	r2, [r3, #0]
   12c06:	1d7b      	adds	r3, r7, #5
   12c08:	1c02      	adds	r2, r0, #0
   12c0a:	701a      	strb	r2, [r3, #0]
   12c0c:	1d3b      	adds	r3, r7, #4
   12c0e:	1c0a      	adds	r2, r1, #0
   12c10:	701a      	strb	r2, [r3, #0]
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
   12c12:	1d3b      	adds	r3, r7, #4
   12c14:	781b      	ldrb	r3, [r3, #0]
   12c16:	2201      	movs	r2, #1
   12c18:	4053      	eors	r3, r2
   12c1a:	b2db      	uxtb	r3, r3
   12c1c:	2b00      	cmp	r3, #0
   12c1e:	d00d      	beq.n	12c3c <gfx_mono_ssd1306_put_byte+0x50>
   12c20:	1dbb      	adds	r3, r7, #6
   12c22:	781a      	ldrb	r2, [r3, #0]
   12c24:	1dfb      	adds	r3, r7, #7
   12c26:	781b      	ldrb	r3, [r3, #0]
   12c28:	0011      	movs	r1, r2
   12c2a:	0018      	movs	r0, r3
   12c2c:	4b12      	ldr	r3, [pc, #72]	; (12c78 <gfx_mono_ssd1306_put_byte+0x8c>)
   12c2e:	4798      	blx	r3
   12c30:	0003      	movs	r3, r0
   12c32:	001a      	movs	r2, r3
   12c34:	1d7b      	adds	r3, r7, #5
   12c36:	781b      	ldrb	r3, [r3, #0]
   12c38:	4293      	cmp	r3, r2
   12c3a:	d018      	beq.n	12c6e <gfx_mono_ssd1306_put_byte+0x82>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
   12c3c:	1d7b      	adds	r3, r7, #5
   12c3e:	781a      	ldrb	r2, [r3, #0]
   12c40:	1dbb      	adds	r3, r7, #6
   12c42:	7819      	ldrb	r1, [r3, #0]
   12c44:	1dfb      	adds	r3, r7, #7
   12c46:	781b      	ldrb	r3, [r3, #0]
   12c48:	0018      	movs	r0, r3
   12c4a:	4b0c      	ldr	r3, [pc, #48]	; (12c7c <gfx_mono_ssd1306_put_byte+0x90>)
   12c4c:	4798      	blx	r3
#endif

	ssd1306_set_page_address(page);
   12c4e:	1dfb      	adds	r3, r7, #7
   12c50:	781b      	ldrb	r3, [r3, #0]
   12c52:	0018      	movs	r0, r3
   12c54:	4b0a      	ldr	r3, [pc, #40]	; (12c80 <gfx_mono_ssd1306_put_byte+0x94>)
   12c56:	4798      	blx	r3
	ssd1306_set_column_address(column);
   12c58:	1dbb      	adds	r3, r7, #6
   12c5a:	781b      	ldrb	r3, [r3, #0]
   12c5c:	0018      	movs	r0, r3
   12c5e:	4b09      	ldr	r3, [pc, #36]	; (12c84 <gfx_mono_ssd1306_put_byte+0x98>)
   12c60:	4798      	blx	r3

	ssd1306_write_data(data);
   12c62:	1d7b      	adds	r3, r7, #5
   12c64:	781b      	ldrb	r3, [r3, #0]
   12c66:	0018      	movs	r0, r3
   12c68:	4b07      	ldr	r3, [pc, #28]	; (12c88 <gfx_mono_ssd1306_put_byte+0x9c>)
   12c6a:	4798      	blx	r3
   12c6c:	e000      	b.n	12c70 <gfx_mono_ssd1306_put_byte+0x84>
		return;
   12c6e:	46c0      	nop			; (mov r8, r8)
}
   12c70:	46bd      	mov	sp, r7
   12c72:	b002      	add	sp, #8
   12c74:	bdb0      	pop	{r4, r5, r7, pc}
   12c76:	46c0      	nop			; (mov r8, r8)
   12c78:	000122f5 	.word	0x000122f5
   12c7c:	000122a9 	.word	0x000122a9
   12c80:	000129cd 	.word	0x000129cd
   12c84:	00012a05 	.word	0x00012a05
   12c88:	00012235 	.word	0x00012235

00012c8c <gfx_mono_ssd1306_get_byte>:
 * \code
	data = gfx_mono_ssd1306_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
   12c8c:	b580      	push	{r7, lr}
   12c8e:	b082      	sub	sp, #8
   12c90:	af00      	add	r7, sp, #0
   12c92:	0002      	movs	r2, r0
   12c94:	1dfb      	adds	r3, r7, #7
   12c96:	701a      	strb	r2, [r3, #0]
   12c98:	1dbb      	adds	r3, r7, #6
   12c9a:	1c0a      	adds	r2, r1, #0
   12c9c:	701a      	strb	r2, [r3, #0]
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
   12c9e:	1dbb      	adds	r3, r7, #6
   12ca0:	781a      	ldrb	r2, [r3, #0]
   12ca2:	1dfb      	adds	r3, r7, #7
   12ca4:	781b      	ldrb	r3, [r3, #0]
   12ca6:	0011      	movs	r1, r2
   12ca8:	0018      	movs	r0, r3
   12caa:	4b03      	ldr	r3, [pc, #12]	; (12cb8 <gfx_mono_ssd1306_get_byte+0x2c>)
   12cac:	4798      	blx	r3
   12cae:	0003      	movs	r3, r0
	ssd1306_set_column_address(column);

	return ssd1306_read_data();

#endif
}
   12cb0:	0018      	movs	r0, r3
   12cb2:	46bd      	mov	sp, r7
   12cb4:	b002      	add	sp, #8
   12cb6:	bd80      	pop	{r7, pc}
   12cb8:	000122f5 	.word	0x000122f5

00012cbc <gfx_mono_ssd1306_mask_byte>:
	gfx_mono_ssd1306_mask_byte(0,0,0xAA,GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_ssd1306_mask_byte(gfx_coord_t page, gfx_coord_t column,
		gfx_mono_color_t pixel_mask, gfx_mono_color_t color)
{
   12cbc:	b5b0      	push	{r4, r5, r7, lr}
   12cbe:	b084      	sub	sp, #16
   12cc0:	af00      	add	r7, sp, #0
   12cc2:	0005      	movs	r5, r0
   12cc4:	000c      	movs	r4, r1
   12cc6:	0010      	movs	r0, r2
   12cc8:	0019      	movs	r1, r3
   12cca:	1dfb      	adds	r3, r7, #7
   12ccc:	1c2a      	adds	r2, r5, #0
   12cce:	701a      	strb	r2, [r3, #0]
   12cd0:	1dbb      	adds	r3, r7, #6
   12cd2:	1c22      	adds	r2, r4, #0
   12cd4:	701a      	strb	r2, [r3, #0]
   12cd6:	1d7b      	adds	r3, r7, #5
   12cd8:	1c02      	adds	r2, r0, #0
   12cda:	701a      	strb	r2, [r3, #0]
   12cdc:	1d3b      	adds	r3, r7, #4
   12cde:	1c0a      	adds	r2, r1, #0
   12ce0:	701a      	strb	r2, [r3, #0]
	gfx_mono_color_t temp = gfx_mono_get_byte(page, column);
   12ce2:	230f      	movs	r3, #15
   12ce4:	18fc      	adds	r4, r7, r3
   12ce6:	1dbb      	adds	r3, r7, #6
   12ce8:	781a      	ldrb	r2, [r3, #0]
   12cea:	1dfb      	adds	r3, r7, #7
   12cec:	781b      	ldrb	r3, [r3, #0]
   12cee:	0011      	movs	r1, r2
   12cf0:	0018      	movs	r0, r3
   12cf2:	4b1f      	ldr	r3, [pc, #124]	; (12d70 <gfx_mono_ssd1306_mask_byte+0xb4>)
   12cf4:	4798      	blx	r3
   12cf6:	0003      	movs	r3, r0
   12cf8:	7023      	strb	r3, [r4, #0]

	switch (color) {
   12cfa:	1d3b      	adds	r3, r7, #4
   12cfc:	781b      	ldrb	r3, [r3, #0]
   12cfe:	2b01      	cmp	r3, #1
   12d00:	d004      	beq.n	12d0c <gfx_mono_ssd1306_mask_byte+0x50>
   12d02:	2b02      	cmp	r3, #2
   12d04:	d01b      	beq.n	12d3e <gfx_mono_ssd1306_mask_byte+0x82>
   12d06:	2b00      	cmp	r3, #0
   12d08:	d00a      	beq.n	12d20 <gfx_mono_ssd1306_mask_byte+0x64>
	case GFX_PIXEL_XOR:
		temp ^= pixel_mask;
		break;

	default:
		break;
   12d0a:	e022      	b.n	12d52 <gfx_mono_ssd1306_mask_byte+0x96>
		temp |= pixel_mask;
   12d0c:	230f      	movs	r3, #15
   12d0e:	18fb      	adds	r3, r7, r3
   12d10:	220f      	movs	r2, #15
   12d12:	18b9      	adds	r1, r7, r2
   12d14:	1d7a      	adds	r2, r7, #5
   12d16:	7809      	ldrb	r1, [r1, #0]
   12d18:	7812      	ldrb	r2, [r2, #0]
   12d1a:	430a      	orrs	r2, r1
   12d1c:	701a      	strb	r2, [r3, #0]
		break;
   12d1e:	e018      	b.n	12d52 <gfx_mono_ssd1306_mask_byte+0x96>
		temp &= ~pixel_mask;
   12d20:	1d7b      	adds	r3, r7, #5
   12d22:	781b      	ldrb	r3, [r3, #0]
   12d24:	b25b      	sxtb	r3, r3
   12d26:	43db      	mvns	r3, r3
   12d28:	b25b      	sxtb	r3, r3
   12d2a:	220f      	movs	r2, #15
   12d2c:	18ba      	adds	r2, r7, r2
   12d2e:	7812      	ldrb	r2, [r2, #0]
   12d30:	b252      	sxtb	r2, r2
   12d32:	4013      	ands	r3, r2
   12d34:	b25a      	sxtb	r2, r3
   12d36:	230f      	movs	r3, #15
   12d38:	18fb      	adds	r3, r7, r3
   12d3a:	701a      	strb	r2, [r3, #0]
		break;
   12d3c:	e009      	b.n	12d52 <gfx_mono_ssd1306_mask_byte+0x96>
		temp ^= pixel_mask;
   12d3e:	230f      	movs	r3, #15
   12d40:	18fb      	adds	r3, r7, r3
   12d42:	220f      	movs	r2, #15
   12d44:	18b9      	adds	r1, r7, r2
   12d46:	1d7a      	adds	r2, r7, #5
   12d48:	7809      	ldrb	r1, [r1, #0]
   12d4a:	7812      	ldrb	r2, [r2, #0]
   12d4c:	404a      	eors	r2, r1
   12d4e:	701a      	strb	r2, [r3, #0]
		break;
   12d50:	46c0      	nop			; (mov r8, r8)
	}

	gfx_mono_put_byte(page, column, temp);
   12d52:	230f      	movs	r3, #15
   12d54:	18fb      	adds	r3, r7, r3
   12d56:	781a      	ldrb	r2, [r3, #0]
   12d58:	1dbb      	adds	r3, r7, #6
   12d5a:	7819      	ldrb	r1, [r3, #0]
   12d5c:	1dfb      	adds	r3, r7, #7
   12d5e:	7818      	ldrb	r0, [r3, #0]
   12d60:	2300      	movs	r3, #0
   12d62:	4c04      	ldr	r4, [pc, #16]	; (12d74 <gfx_mono_ssd1306_mask_byte+0xb8>)
   12d64:	47a0      	blx	r4
}
   12d66:	46c0      	nop			; (mov r8, r8)
   12d68:	46bd      	mov	sp, r7
   12d6a:	b004      	add	sp, #16
   12d6c:	bdb0      	pop	{r4, r5, r7, pc}
   12d6e:	46c0      	nop			; (mov r8, r8)
   12d70:	00012c8d 	.word	0x00012c8d
   12d74:	00012bed 	.word	0x00012bed

00012d78 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
   12d78:	b580      	push	{r7, lr}
   12d7a:	b084      	sub	sp, #16
   12d7c:	af00      	add	r7, sp, #0
   12d7e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
   12d80:	687b      	ldr	r3, [r7, #4]
   12d82:	681b      	ldr	r3, [r3, #0]
   12d84:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   12d86:	68fb      	ldr	r3, [r7, #12]
   12d88:	7e5b      	ldrb	r3, [r3, #25]
   12d8a:	b2db      	uxtb	r3, r3
   12d8c:	b25b      	sxtb	r3, r3
   12d8e:	2b00      	cmp	r3, #0
   12d90:	da01      	bge.n	12d96 <adc_is_syncing+0x1e>
		return true;
   12d92:	2301      	movs	r3, #1
   12d94:	e000      	b.n	12d98 <adc_is_syncing+0x20>
	}

	return false;
   12d96:	2300      	movs	r3, #0
}
   12d98:	0018      	movs	r0, r3
   12d9a:	46bd      	mov	sp, r7
   12d9c:	b004      	add	sp, #16
   12d9e:	bd80      	pop	{r7, pc}

00012da0 <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
   12da0:	b580      	push	{r7, lr}
   12da2:	b084      	sub	sp, #16
   12da4:	af00      	add	r7, sp, #0
   12da6:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   12da8:	687b      	ldr	r3, [r7, #4]
   12daa:	681b      	ldr	r3, [r3, #0]
   12dac:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
   12dae:	46c0      	nop			; (mov r8, r8)
   12db0:	687b      	ldr	r3, [r7, #4]
   12db2:	0018      	movs	r0, r3
   12db4:	4b0b      	ldr	r3, [pc, #44]	; (12de4 <adc_start_conversion+0x44>)
   12db6:	4798      	blx	r3
   12db8:	1e03      	subs	r3, r0, #0
   12dba:	d1f9      	bne.n	12db0 <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
   12dbc:	68fb      	ldr	r3, [r7, #12]
   12dbe:	7b1b      	ldrb	r3, [r3, #12]
   12dc0:	b2db      	uxtb	r3, r3
   12dc2:	2202      	movs	r2, #2
   12dc4:	4313      	orrs	r3, r2
   12dc6:	b2da      	uxtb	r2, r3
   12dc8:	68fb      	ldr	r3, [r7, #12]
   12dca:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
   12dcc:	46c0      	nop			; (mov r8, r8)
   12dce:	687b      	ldr	r3, [r7, #4]
   12dd0:	0018      	movs	r0, r3
   12dd2:	4b04      	ldr	r3, [pc, #16]	; (12de4 <adc_start_conversion+0x44>)
   12dd4:	4798      	blx	r3
   12dd6:	1e03      	subs	r3, r0, #0
   12dd8:	d1f9      	bne.n	12dce <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
   12dda:	46c0      	nop			; (mov r8, r8)
   12ddc:	46bd      	mov	sp, r7
   12dde:	b004      	add	sp, #16
   12de0:	bd80      	pop	{r7, pc}
   12de2:	46c0      	nop			; (mov r8, r8)
   12de4:	00012d79 	.word	0x00012d79

00012de8 <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
   12de8:	b580      	push	{r7, lr}
   12dea:	b084      	sub	sp, #16
   12dec:	af00      	add	r7, sp, #0
   12dee:	6078      	str	r0, [r7, #4]
   12df0:	000a      	movs	r2, r1
   12df2:	1cfb      	adds	r3, r7, #3
   12df4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   12df6:	687b      	ldr	r3, [r7, #4]
   12df8:	681b      	ldr	r3, [r3, #0]
   12dfa:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
   12dfc:	68fb      	ldr	r3, [r7, #12]
   12dfe:	1cfa      	adds	r2, r7, #3
   12e00:	7812      	ldrb	r2, [r2, #0]
   12e02:	759a      	strb	r2, [r3, #22]
}
   12e04:	46c0      	nop			; (mov r8, r8)
   12e06:	46bd      	mov	sp, r7
   12e08:	b004      	add	sp, #16
   12e0a:	bd80      	pop	{r7, pc}

00012e0c <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
   12e0c:	b580      	push	{r7, lr}
   12e0e:	b084      	sub	sp, #16
   12e10:	af00      	add	r7, sp, #0
   12e12:	0002      	movs	r2, r0
   12e14:	1dfb      	adds	r3, r7, #7
   12e16:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
   12e18:	1dfb      	adds	r3, r7, #7
   12e1a:	781a      	ldrb	r2, [r3, #0]
   12e1c:	4b47      	ldr	r3, [pc, #284]	; (12f3c <_adc_interrupt_handler+0x130>)
   12e1e:	0092      	lsls	r2, r2, #2
   12e20:	58d3      	ldr	r3, [r2, r3]
   12e22:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
   12e24:	68fb      	ldr	r3, [r7, #12]
   12e26:	681b      	ldr	r3, [r3, #0]
   12e28:	7e1b      	ldrb	r3, [r3, #24]
   12e2a:	b2da      	uxtb	r2, r3
   12e2c:	68fb      	ldr	r3, [r7, #12]
   12e2e:	681b      	ldr	r3, [r3, #0]
   12e30:	7ddb      	ldrb	r3, [r3, #23]
   12e32:	b2db      	uxtb	r3, r3
   12e34:	4013      	ands	r3, r2
   12e36:	b2db      	uxtb	r3, r3
   12e38:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
   12e3a:	68bb      	ldr	r3, [r7, #8]
   12e3c:	2201      	movs	r2, #1
   12e3e:	4013      	ands	r3, r2
   12e40:	d045      	beq.n	12ece <_adc_interrupt_handler+0xc2>
		/* clear interrupt flag */
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
   12e42:	68fb      	ldr	r3, [r7, #12]
   12e44:	681b      	ldr	r3, [r3, #0]
   12e46:	2201      	movs	r2, #1
   12e48:	761a      	strb	r2, [r3, #24]

		while (adc_is_syncing(module)) {
   12e4a:	46c0      	nop			; (mov r8, r8)
   12e4c:	68fb      	ldr	r3, [r7, #12]
   12e4e:	0018      	movs	r0, r3
   12e50:	4b3b      	ldr	r3, [pc, #236]	; (12f40 <_adc_interrupt_handler+0x134>)
   12e52:	4798      	blx	r3
   12e54:	1e03      	subs	r3, r0, #0
   12e56:	d1f9      	bne.n	12e4c <_adc_interrupt_handler+0x40>
			/* Wait for synchronization */
		}

		/* store ADC result in job buffer */
		*(module->job_buffer++) = module->hw->RESULT.reg;
   12e58:	68fb      	ldr	r3, [r7, #12]
   12e5a:	695b      	ldr	r3, [r3, #20]
   12e5c:	1c99      	adds	r1, r3, #2
   12e5e:	68fa      	ldr	r2, [r7, #12]
   12e60:	6151      	str	r1, [r2, #20]
   12e62:	68fa      	ldr	r2, [r7, #12]
   12e64:	6812      	ldr	r2, [r2, #0]
   12e66:	8b52      	ldrh	r2, [r2, #26]
   12e68:	b292      	uxth	r2, r2
   12e6a:	801a      	strh	r2, [r3, #0]

		if (--module->remaining_conversions > 0) {
   12e6c:	68fb      	ldr	r3, [r7, #12]
   12e6e:	8b1b      	ldrh	r3, [r3, #24]
   12e70:	b29b      	uxth	r3, r3
   12e72:	3b01      	subs	r3, #1
   12e74:	b29b      	uxth	r3, r3
   12e76:	68fa      	ldr	r2, [r7, #12]
   12e78:	1c19      	adds	r1, r3, #0
   12e7a:	8311      	strh	r1, [r2, #24]
   12e7c:	2b00      	cmp	r3, #0
   12e7e:	d008      	beq.n	12e92 <_adc_interrupt_handler+0x86>
			if (module->software_trigger == true) {
   12e80:	68fb      	ldr	r3, [r7, #12]
   12e82:	7f5b      	ldrb	r3, [r3, #29]
   12e84:	2b00      	cmp	r3, #0
   12e86:	d022      	beq.n	12ece <_adc_interrupt_handler+0xc2>
				adc_start_conversion(module);
   12e88:	68fb      	ldr	r3, [r7, #12]
   12e8a:	0018      	movs	r0, r3
   12e8c:	4b2d      	ldr	r3, [pc, #180]	; (12f44 <_adc_interrupt_handler+0x138>)
   12e8e:	4798      	blx	r3
   12e90:	e01d      	b.n	12ece <_adc_interrupt_handler+0xc2>
			}
		} else {
			adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
   12e92:	68fb      	ldr	r3, [r7, #12]
   12e94:	2101      	movs	r1, #1
   12e96:	0018      	movs	r0, r3
   12e98:	4b2b      	ldr	r3, [pc, #172]	; (12f48 <_adc_interrupt_handler+0x13c>)
   12e9a:	4798      	blx	r3
			if (module->job_status == STATUS_BUSY) {
   12e9c:	68fb      	ldr	r3, [r7, #12]
   12e9e:	7f1b      	ldrb	r3, [r3, #28]
   12ea0:	b2db      	uxtb	r3, r3
   12ea2:	2b05      	cmp	r3, #5
   12ea4:	d113      	bne.n	12ece <_adc_interrupt_handler+0xc2>
				/* job is complete. update status,disable interrupt
					*and call callback */
				module->job_status = STATUS_OK;
   12ea6:	68fb      	ldr	r3, [r7, #12]
   12ea8:	2200      	movs	r2, #0
   12eaa:	771a      	strb	r2, [r3, #28]

				if ((module->enabled_callback_mask &
   12eac:	68fb      	ldr	r3, [r7, #12]
   12eae:	7edb      	ldrb	r3, [r3, #27]
   12eb0:	001a      	movs	r2, r3
   12eb2:	2301      	movs	r3, #1
   12eb4:	4013      	ands	r3, r2
   12eb6:	d00a      	beq.n	12ece <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
					(module->registered_callback_mask &
   12eb8:	68fb      	ldr	r3, [r7, #12]
   12eba:	7e9b      	ldrb	r3, [r3, #26]
   12ebc:	001a      	movs	r2, r3
   12ebe:	2301      	movs	r3, #1
   12ec0:	4013      	ands	r3, r2
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
   12ec2:	d004      	beq.n	12ece <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER))) {
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
   12ec4:	68fb      	ldr	r3, [r7, #12]
   12ec6:	689b      	ldr	r3, [r3, #8]
   12ec8:	68fa      	ldr	r2, [r7, #12]
   12eca:	0010      	movs	r0, r2
   12ecc:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
   12ece:	68bb      	ldr	r3, [r7, #8]
   12ed0:	2204      	movs	r2, #4
   12ed2:	4013      	ands	r3, r2
   12ed4:	d014      	beq.n	12f00 <_adc_interrupt_handler+0xf4>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
   12ed6:	68fb      	ldr	r3, [r7, #12]
   12ed8:	681b      	ldr	r3, [r3, #0]
   12eda:	2204      	movs	r2, #4
   12edc:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   12ede:	68fb      	ldr	r3, [r7, #12]
   12ee0:	7edb      	ldrb	r3, [r3, #27]
   12ee2:	001a      	movs	r2, r3
   12ee4:	2302      	movs	r3, #2
   12ee6:	4013      	ands	r3, r2
   12ee8:	d00a      	beq.n	12f00 <_adc_interrupt_handler+0xf4>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
   12eea:	68fb      	ldr	r3, [r7, #12]
   12eec:	7e9b      	ldrb	r3, [r3, #26]
   12eee:	001a      	movs	r2, r3
   12ef0:	2302      	movs	r3, #2
   12ef2:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   12ef4:	d004      	beq.n	12f00 <_adc_interrupt_handler+0xf4>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
   12ef6:	68fb      	ldr	r3, [r7, #12]
   12ef8:	68db      	ldr	r3, [r3, #12]
   12efa:	68fa      	ldr	r2, [r7, #12]
   12efc:	0010      	movs	r0, r2
   12efe:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
   12f00:	68bb      	ldr	r3, [r7, #8]
   12f02:	2202      	movs	r2, #2
   12f04:	4013      	ands	r3, r2
   12f06:	d014      	beq.n	12f32 <_adc_interrupt_handler+0x126>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
   12f08:	68fb      	ldr	r3, [r7, #12]
   12f0a:	681b      	ldr	r3, [r3, #0]
   12f0c:	2202      	movs	r2, #2
   12f0e:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   12f10:	68fb      	ldr	r3, [r7, #12]
   12f12:	7edb      	ldrb	r3, [r3, #27]
   12f14:	001a      	movs	r2, r3
   12f16:	2304      	movs	r3, #4
   12f18:	4013      	ands	r3, r2
   12f1a:	d00a      	beq.n	12f32 <_adc_interrupt_handler+0x126>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
   12f1c:	68fb      	ldr	r3, [r7, #12]
   12f1e:	7e9b      	ldrb	r3, [r3, #26]
   12f20:	001a      	movs	r2, r3
   12f22:	2304      	movs	r3, #4
   12f24:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   12f26:	d004      	beq.n	12f32 <_adc_interrupt_handler+0x126>
			(module->callback[ADC_CALLBACK_ERROR])(module);
   12f28:	68fb      	ldr	r3, [r7, #12]
   12f2a:	691b      	ldr	r3, [r3, #16]
   12f2c:	68fa      	ldr	r2, [r7, #12]
   12f2e:	0010      	movs	r0, r2
   12f30:	4798      	blx	r3
		}
	}
}
   12f32:	46c0      	nop			; (mov r8, r8)
   12f34:	46bd      	mov	sp, r7
   12f36:	b004      	add	sp, #16
   12f38:	bd80      	pop	{r7, pc}
   12f3a:	46c0      	nop			; (mov r8, r8)
   12f3c:	200041a0 	.word	0x200041a0
   12f40:	00012d79 	.word	0x00012d79
   12f44:	00012da1 	.word	0x00012da1
   12f48:	00012de9 	.word	0x00012de9

00012f4c <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
   12f4c:	b580      	push	{r7, lr}
   12f4e:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
   12f50:	2000      	movs	r0, #0
   12f52:	4b02      	ldr	r3, [pc, #8]	; (12f5c <ADC_Handler+0x10>)
   12f54:	4798      	blx	r3
}
   12f56:	46c0      	nop			; (mov r8, r8)
   12f58:	46bd      	mov	sp, r7
   12f5a:	bd80      	pop	{r7, pc}
   12f5c:	00012e0d 	.word	0x00012e0d

00012f60 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
   12f60:	b580      	push	{r7, lr}
   12f62:	b082      	sub	sp, #8
   12f64:	af00      	add	r7, sp, #0
   12f66:	0002      	movs	r2, r0
   12f68:	1dfb      	adds	r3, r7, #7
   12f6a:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   12f6c:	4a07      	ldr	r2, [pc, #28]	; (12f8c <system_interrupt_disable+0x2c>)
   12f6e:	1dfb      	adds	r3, r7, #7
   12f70:	781b      	ldrb	r3, [r3, #0]
   12f72:	0019      	movs	r1, r3
   12f74:	231f      	movs	r3, #31
   12f76:	400b      	ands	r3, r1
   12f78:	2101      	movs	r1, #1
   12f7a:	4099      	lsls	r1, r3
   12f7c:	000b      	movs	r3, r1
   12f7e:	0019      	movs	r1, r3
   12f80:	2380      	movs	r3, #128	; 0x80
   12f82:	50d1      	str	r1, [r2, r3]
}
   12f84:	46c0      	nop			; (mov r8, r8)
   12f86:	46bd      	mov	sp, r7
   12f88:	b002      	add	sp, #8
   12f8a:	bd80      	pop	{r7, pc}
   12f8c:	e000e100 	.word	0xe000e100

00012f90 <_dac_interrupt_handler>:
 *  Internal handler for DAC module interrupts.
 *
 * \param[in] instance  DAC instance number
 */
static void _dac_interrupt_handler(const uint8_t instance)
{
   12f90:	b580      	push	{r7, lr}
   12f92:	b084      	sub	sp, #16
   12f94:	af00      	add	r7, sp, #0
   12f96:	0002      	movs	r2, r0
   12f98:	1dfb      	adds	r3, r7, #7
   12f9a:	701a      	strb	r2, [r3, #0]
	struct dac_module *module = _dac_instances[instance];
   12f9c:	1dfb      	adds	r3, r7, #7
   12f9e:	781a      	ldrb	r2, [r3, #0]
   12fa0:	4b37      	ldr	r3, [pc, #220]	; (13080 <_dac_interrupt_handler+0xf0>)
   12fa2:	0092      	lsls	r2, r2, #2
   12fa4:	58d3      	ldr	r3, [r2, r3]
   12fa6:	60fb      	str	r3, [r7, #12]
	Dac *const dac_hw = module->hw;
   12fa8:	68fb      	ldr	r3, [r7, #12]
   12faa:	681b      	ldr	r3, [r3, #0]
   12fac:	60bb      	str	r3, [r7, #8]

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_UNDERRUN) {
   12fae:	68bb      	ldr	r3, [r7, #8]
   12fb0:	799b      	ldrb	r3, [r3, #6]
   12fb2:	b2db      	uxtb	r3, r3
   12fb4:	001a      	movs	r2, r3
   12fb6:	2301      	movs	r3, #1
   12fb8:	4013      	ands	r3, r2
   12fba:	d00e      	beq.n	12fda <_dac_interrupt_handler+0x4a>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_UNDERRUN;
   12fbc:	68bb      	ldr	r3, [r7, #8]
   12fbe:	2201      	movs	r2, #1
   12fc0:	719a      	strb	r2, [r3, #6]

		if ((module->callback) &&
   12fc2:	68fb      	ldr	r3, [r7, #12]
   12fc4:	3314      	adds	r3, #20
   12fc6:	2b00      	cmp	r3, #0
   12fc8:	d007      	beq.n	12fda <_dac_interrupt_handler+0x4a>
			 (module->callback_enable[DAC_CALLBACK_DATA_UNDERRUN])){
   12fca:	68fb      	ldr	r3, [r7, #12]
   12fcc:	7c5b      	ldrb	r3, [r3, #17]
		if ((module->callback) &&
   12fce:	2b00      	cmp	r3, #0
   12fd0:	d003      	beq.n	12fda <_dac_interrupt_handler+0x4a>
			module->callback[DAC_CALLBACK_DATA_UNDERRUN](0);
   12fd2:	68fb      	ldr	r3, [r7, #12]
   12fd4:	699b      	ldr	r3, [r3, #24]
   12fd6:	2000      	movs	r0, #0
   12fd8:	4798      	blx	r3
		}
	}

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_EMPTY) {
   12fda:	68bb      	ldr	r3, [r7, #8]
   12fdc:	799b      	ldrb	r3, [r3, #6]
   12fde:	b2db      	uxtb	r3, r3
   12fe0:	001a      	movs	r2, r3
   12fe2:	2302      	movs	r3, #2
   12fe4:	4013      	ands	r3, r2
   12fe6:	d047      	beq.n	13078 <_dac_interrupt_handler+0xe8>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   12fe8:	68bb      	ldr	r3, [r7, #8]
   12fea:	2202      	movs	r2, #2
   12fec:	719a      	strb	r2, [r3, #6]

		/* If in a write buffer job */
		if (module->remaining_conversions) {
   12fee:	68fb      	ldr	r3, [r7, #12]
   12ff0:	899b      	ldrh	r3, [r3, #12]
   12ff2:	b29b      	uxth	r3, r3
   12ff4:	2b00      	cmp	r3, #0
   12ff6:	d033      	beq.n	13060 <_dac_interrupt_handler+0xd0>

			/* Fill the data buffer with next data in write buffer */
			dac_hw->DATABUF.reg =
				module->job_buffer[module->transferred_conversions++];
   12ff8:	68fb      	ldr	r3, [r7, #12]
   12ffa:	689a      	ldr	r2, [r3, #8]
   12ffc:	68fb      	ldr	r3, [r7, #12]
   12ffe:	89db      	ldrh	r3, [r3, #14]
   13000:	b29b      	uxth	r3, r3
   13002:	1c59      	adds	r1, r3, #1
   13004:	b288      	uxth	r0, r1
   13006:	68f9      	ldr	r1, [r7, #12]
   13008:	81c8      	strh	r0, [r1, #14]
   1300a:	005b      	lsls	r3, r3, #1
   1300c:	18d3      	adds	r3, r2, r3
   1300e:	881b      	ldrh	r3, [r3, #0]
   13010:	b29a      	uxth	r2, r3
			dac_hw->DATABUF.reg =
   13012:	68bb      	ldr	r3, [r7, #8]
   13014:	819a      	strh	r2, [r3, #12]

			/* Write buffer size decrement */
			module->remaining_conversions --;
   13016:	68fb      	ldr	r3, [r7, #12]
   13018:	899b      	ldrh	r3, [r3, #12]
   1301a:	b29b      	uxth	r3, r3
   1301c:	3b01      	subs	r3, #1
   1301e:	b29a      	uxth	r2, r3
   13020:	68fb      	ldr	r3, [r7, #12]
   13022:	819a      	strh	r2, [r3, #12]

			/* If in a write buffer job and all the data are converted */
			if (module->remaining_conversions == 0) {
   13024:	68fb      	ldr	r3, [r7, #12]
   13026:	899b      	ldrh	r3, [r3, #12]
   13028:	b29b      	uxth	r3, r3
   1302a:	2b00      	cmp	r3, #0
   1302c:	d118      	bne.n	13060 <_dac_interrupt_handler+0xd0>
				module->job_status = STATUS_OK;
   1302e:	68fb      	ldr	r3, [r7, #12]
   13030:	2220      	movs	r2, #32
   13032:	2100      	movs	r1, #0
   13034:	5499      	strb	r1, [r3, r2]

				/* Disable interrupt */
				dac_hw->INTENCLR.reg = DAC_INTENCLR_EMPTY;
   13036:	68bb      	ldr	r3, [r7, #8]
   13038:	2202      	movs	r2, #2
   1303a:	711a      	strb	r2, [r3, #4]
				dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   1303c:	68bb      	ldr	r3, [r7, #8]
   1303e:	2202      	movs	r2, #2
   13040:	719a      	strb	r2, [r3, #6]
				system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_DAC);
   13042:	2019      	movs	r0, #25
   13044:	4b0f      	ldr	r3, [pc, #60]	; (13084 <_dac_interrupt_handler+0xf4>)
   13046:	4798      	blx	r3

				if ((module->callback) &&
   13048:	68fb      	ldr	r3, [r7, #12]
   1304a:	3314      	adds	r3, #20
   1304c:	2b00      	cmp	r3, #0
   1304e:	d007      	beq.n	13060 <_dac_interrupt_handler+0xd0>
					 (module->callback_enable[DAC_CALLBACK_TRANSFER_COMPLETE])) {
   13050:	68fb      	ldr	r3, [r7, #12]
   13052:	7c9b      	ldrb	r3, [r3, #18]
				if ((module->callback) &&
   13054:	2b00      	cmp	r3, #0
   13056:	d003      	beq.n	13060 <_dac_interrupt_handler+0xd0>
					module->callback[DAC_CALLBACK_TRANSFER_COMPLETE](0);
   13058:	68fb      	ldr	r3, [r7, #12]
   1305a:	69db      	ldr	r3, [r3, #28]
   1305c:	2000      	movs	r0, #0
   1305e:	4798      	blx	r3
				}
			}
		}

		if ((module->callback) &&
   13060:	68fb      	ldr	r3, [r7, #12]
   13062:	3314      	adds	r3, #20
   13064:	2b00      	cmp	r3, #0
   13066:	d007      	beq.n	13078 <_dac_interrupt_handler+0xe8>
			 (module->callback_enable[DAC_CALLBACK_DATA_EMPTY])) {
   13068:	68fb      	ldr	r3, [r7, #12]
   1306a:	7c1b      	ldrb	r3, [r3, #16]
		if ((module->callback) &&
   1306c:	2b00      	cmp	r3, #0
   1306e:	d003      	beq.n	13078 <_dac_interrupt_handler+0xe8>
			module->callback[DAC_CALLBACK_DATA_EMPTY](0);
   13070:	68fb      	ldr	r3, [r7, #12]
   13072:	695b      	ldr	r3, [r3, #20]
   13074:	2000      	movs	r0, #0
   13076:	4798      	blx	r3
		}
	}
}
   13078:	46c0      	nop			; (mov r8, r8)
   1307a:	46bd      	mov	sp, r7
   1307c:	b004      	add	sp, #16
   1307e:	bd80      	pop	{r7, pc}
   13080:	200041a4 	.word	0x200041a4
   13084:	00012f61 	.word	0x00012f61

00013088 <DAC_Handler>:

/** Handler for the DAC hardware module interrupt. */
void DAC_Handler(void)
{
   13088:	b580      	push	{r7, lr}
   1308a:	af00      	add	r7, sp, #0
	_dac_interrupt_handler(0);
   1308c:	2000      	movs	r0, #0
   1308e:	4b02      	ldr	r3, [pc, #8]	; (13098 <DAC_Handler+0x10>)
   13090:	4798      	blx	r3
}
   13092:	46c0      	nop			; (mov r8, r8)
   13094:	46bd      	mov	sp, r7
   13096:	bd80      	pop	{r7, pc}
   13098:	00012f91 	.word	0x00012f91

0001309c <system_interrupt_enter_critical_section>:
{
   1309c:	b580      	push	{r7, lr}
   1309e:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   130a0:	4b02      	ldr	r3, [pc, #8]	; (130ac <system_interrupt_enter_critical_section+0x10>)
   130a2:	4798      	blx	r3
}
   130a4:	46c0      	nop			; (mov r8, r8)
   130a6:	46bd      	mov	sp, r7
   130a8:	bd80      	pop	{r7, pc}
   130aa:	46c0      	nop			; (mov r8, r8)
   130ac:	00025be9 	.word	0x00025be9

000130b0 <system_interrupt_leave_critical_section>:
{
   130b0:	b580      	push	{r7, lr}
   130b2:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   130b4:	4b02      	ldr	r3, [pc, #8]	; (130c0 <system_interrupt_leave_critical_section+0x10>)
   130b6:	4798      	blx	r3
}
   130b8:	46c0      	nop			; (mov r8, r8)
   130ba:	46bd      	mov	sp, r7
   130bc:	bd80      	pop	{r7, pc}
   130be:	46c0      	nop			; (mov r8, r8)
   130c0:	00025c3d 	.word	0x00025c3d

000130c4 <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
   130c4:	b580      	push	{r7, lr}
   130c6:	b086      	sub	sp, #24
   130c8:	af00      	add	r7, sp, #0
	struct dma_resource *resource;
	uint8_t isr;
	uint32_t write_size;
	uint32_t total_size;

	system_interrupt_enter_critical_section();
   130ca:	4b49      	ldr	r3, [pc, #292]	; (131f0 <DMAC_Handler+0x12c>)
   130cc:	4798      	blx	r3

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
   130ce:	4b49      	ldr	r3, [pc, #292]	; (131f4 <DMAC_Handler+0x130>)
   130d0:	8c1b      	ldrh	r3, [r3, #32]
   130d2:	b29b      	uxth	r3, r3
   130d4:	b2da      	uxtb	r2, r3
   130d6:	2317      	movs	r3, #23
   130d8:	18fb      	adds	r3, r7, r3
   130da:	210f      	movs	r1, #15
   130dc:	400a      	ands	r2, r1
   130de:	701a      	strb	r2, [r3, #0]

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
   130e0:	2317      	movs	r3, #23
   130e2:	18fb      	adds	r3, r7, r3
   130e4:	781a      	ldrb	r2, [r3, #0]
   130e6:	4b44      	ldr	r3, [pc, #272]	; (131f8 <DMAC_Handler+0x134>)
   130e8:	0092      	lsls	r2, r2, #2
   130ea:	58d3      	ldr	r3, [r2, r3]
   130ec:	613b      	str	r3, [r7, #16]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
   130ee:	4a41      	ldr	r2, [pc, #260]	; (131f4 <DMAC_Handler+0x130>)
   130f0:	693b      	ldr	r3, [r7, #16]
   130f2:	781b      	ldrb	r3, [r3, #0]
   130f4:	210f      	movs	r1, #15
   130f6:	400b      	ands	r3, r1
   130f8:	b2d9      	uxtb	r1, r3
   130fa:	233f      	movs	r3, #63	; 0x3f
   130fc:	54d1      	strb	r1, [r2, r3]
	isr = DMAC->CHINTFLAG.reg;
   130fe:	493d      	ldr	r1, [pc, #244]	; (131f4 <DMAC_Handler+0x130>)
   13100:	230f      	movs	r3, #15
   13102:	18fb      	adds	r3, r7, r3
   13104:	224e      	movs	r2, #78	; 0x4e
   13106:	5c8a      	ldrb	r2, [r1, r2]
   13108:	701a      	strb	r2, [r3, #0]

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
   1310a:	693b      	ldr	r3, [r7, #16]
   1310c:	781b      	ldrb	r3, [r3, #0]
   1310e:	4a3b      	ldr	r2, [pc, #236]	; (131fc <DMAC_Handler+0x138>)
   13110:	011b      	lsls	r3, r3, #4
   13112:	18d3      	adds	r3, r2, r3
   13114:	3302      	adds	r3, #2
   13116:	881b      	ldrh	r3, [r3, #0]
   13118:	b29b      	uxth	r3, r3
   1311a:	60bb      	str	r3, [r7, #8]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
   1311c:	693b      	ldr	r3, [r7, #16]
   1311e:	781b      	ldrb	r3, [r3, #0]
   13120:	4a37      	ldr	r2, [pc, #220]	; (13200 <DMAC_Handler+0x13c>)
   13122:	011b      	lsls	r3, r3, #4
   13124:	18d3      	adds	r3, r2, r3
   13126:	3302      	adds	r3, #2
   13128:	881b      	ldrh	r3, [r3, #0]
   1312a:	b29b      	uxth	r3, r3
   1312c:	607b      	str	r3, [r7, #4]
	resource->transfered_size = total_size - write_size;
   1312e:	68ba      	ldr	r2, [r7, #8]
   13130:	687b      	ldr	r3, [r7, #4]
   13132:	1ad2      	subs	r2, r2, r3
   13134:	693b      	ldr	r3, [r7, #16]
   13136:	615a      	str	r2, [r3, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
   13138:	230f      	movs	r3, #15
   1313a:	18fb      	adds	r3, r7, r3
   1313c:	781b      	ldrb	r3, [r3, #0]
   1313e:	2201      	movs	r2, #1
   13140:	4013      	ands	r3, r2
   13142:	d016      	beq.n	13172 <DMAC_Handler+0xae>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
   13144:	4a2b      	ldr	r2, [pc, #172]	; (131f4 <DMAC_Handler+0x130>)
   13146:	234e      	movs	r3, #78	; 0x4e
   13148:	2101      	movs	r1, #1
   1314a:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
   1314c:	693b      	ldr	r3, [r7, #16]
   1314e:	2210      	movs	r2, #16
   13150:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   13152:	693b      	ldr	r3, [r7, #16]
   13154:	7c1b      	ldrb	r3, [r3, #16]
   13156:	001a      	movs	r2, r3
   13158:	2301      	movs	r3, #1
   1315a:	4013      	ands	r3, r2
   1315c:	d042      	beq.n	131e4 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
   1315e:	693b      	ldr	r3, [r7, #16]
   13160:	685b      	ldr	r3, [r3, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   13162:	2b00      	cmp	r3, #0
   13164:	d03e      	beq.n	131e4 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
   13166:	693b      	ldr	r3, [r7, #16]
   13168:	685b      	ldr	r3, [r3, #4]
   1316a:	693a      	ldr	r2, [r7, #16]
   1316c:	0010      	movs	r0, r2
   1316e:	4798      	blx	r3
   13170:	e038      	b.n	131e4 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
   13172:	230f      	movs	r3, #15
   13174:	18fb      	adds	r3, r7, r3
   13176:	781b      	ldrb	r3, [r3, #0]
   13178:	2202      	movs	r2, #2
   1317a:	4013      	ands	r3, r2
   1317c:	d016      	beq.n	131ac <DMAC_Handler+0xe8>
		/* Clear the transfer complete flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
   1317e:	4a1d      	ldr	r2, [pc, #116]	; (131f4 <DMAC_Handler+0x130>)
   13180:	234e      	movs	r3, #78	; 0x4e
   13182:	2102      	movs	r1, #2
   13184:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_OK;
   13186:	693b      	ldr	r3, [r7, #16]
   13188:	2200      	movs	r2, #0
   1318a:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   1318c:	693b      	ldr	r3, [r7, #16]
   1318e:	7c1b      	ldrb	r3, [r3, #16]
   13190:	001a      	movs	r2, r3
   13192:	2302      	movs	r3, #2
   13194:	4013      	ands	r3, r2
   13196:	d025      	beq.n	131e4 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
   13198:	693b      	ldr	r3, [r7, #16]
   1319a:	689b      	ldr	r3, [r3, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   1319c:	2b00      	cmp	r3, #0
   1319e:	d021      	beq.n	131e4 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
   131a0:	693b      	ldr	r3, [r7, #16]
   131a2:	689b      	ldr	r3, [r3, #8]
   131a4:	693a      	ldr	r2, [r7, #16]
   131a6:	0010      	movs	r0, r2
   131a8:	4798      	blx	r3
   131aa:	e01b      	b.n	131e4 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
   131ac:	230f      	movs	r3, #15
   131ae:	18fb      	adds	r3, r7, r3
   131b0:	781b      	ldrb	r3, [r3, #0]
   131b2:	2204      	movs	r2, #4
   131b4:	4013      	ands	r3, r2
   131b6:	d015      	beq.n	131e4 <DMAC_Handler+0x120>
		/* Clear channel suspend flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
   131b8:	4a0e      	ldr	r2, [pc, #56]	; (131f4 <DMAC_Handler+0x130>)
   131ba:	234e      	movs	r3, #78	; 0x4e
   131bc:	2104      	movs	r1, #4
   131be:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_SUSPEND;
   131c0:	693b      	ldr	r3, [r7, #16]
   131c2:	2206      	movs	r2, #6
   131c4:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   131c6:	693b      	ldr	r3, [r7, #16]
   131c8:	7c1b      	ldrb	r3, [r3, #16]
   131ca:	001a      	movs	r2, r3
   131cc:	2304      	movs	r3, #4
   131ce:	4013      	ands	r3, r2
   131d0:	d008      	beq.n	131e4 <DMAC_Handler+0x120>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
   131d2:	693b      	ldr	r3, [r7, #16]
   131d4:	68db      	ldr	r3, [r3, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   131d6:	2b00      	cmp	r3, #0
   131d8:	d004      	beq.n	131e4 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
   131da:	693b      	ldr	r3, [r7, #16]
   131dc:	68db      	ldr	r3, [r3, #12]
   131de:	693a      	ldr	r2, [r7, #16]
   131e0:	0010      	movs	r0, r2
   131e2:	4798      	blx	r3
		}
	}

	system_interrupt_leave_critical_section();
   131e4:	4b07      	ldr	r3, [pc, #28]	; (13204 <DMAC_Handler+0x140>)
   131e6:	4798      	blx	r3
}
   131e8:	46c0      	nop			; (mov r8, r8)
   131ea:	46bd      	mov	sp, r7
   131ec:	b006      	add	sp, #24
   131ee:	bd80      	pop	{r7, pc}
   131f0:	0001309d 	.word	0x0001309d
   131f4:	41004800 	.word	0x41004800
   131f8:	20000440 	.word	0x20000440
   131fc:	200041b0 	.word	0x200041b0
   13200:	200003f0 	.word	0x200003f0
   13204:	000130b1 	.word	0x000130b1

00013208 <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
   13208:	b580      	push	{r7, lr}
   1320a:	b082      	sub	sp, #8
   1320c:	af00      	add	r7, sp, #0
	struct events_hook *current_hook = _events_inst.hook_list;
   1320e:	4b15      	ldr	r3, [pc, #84]	; (13264 <EVSYS_Handler+0x5c>)
   13210:	691b      	ldr	r3, [r3, #16]
   13212:	607b      	str	r3, [r7, #4]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
   13214:	4b14      	ldr	r3, [pc, #80]	; (13268 <EVSYS_Handler+0x60>)
   13216:	699b      	ldr	r3, [r3, #24]
   13218:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer |= flag;
   1321a:	4b12      	ldr	r3, [pc, #72]	; (13264 <EVSYS_Handler+0x5c>)
   1321c:	689a      	ldr	r2, [r3, #8]
   1321e:	683b      	ldr	r3, [r7, #0]
   13220:	431a      	orrs	r2, r3
   13222:	4b10      	ldr	r3, [pc, #64]	; (13264 <EVSYS_Handler+0x5c>)
   13224:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
   13226:	4b10      	ldr	r3, [pc, #64]	; (13268 <EVSYS_Handler+0x60>)
   13228:	4a10      	ldr	r2, [pc, #64]	; (1326c <EVSYS_Handler+0x64>)
   1322a:	619a      	str	r2, [r3, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
   1322c:	e008      	b.n	13240 <EVSYS_Handler+0x38>
		current_hook->hook_func(current_hook->resource);
   1322e:	687b      	ldr	r3, [r7, #4]
   13230:	685a      	ldr	r2, [r3, #4]
   13232:	687b      	ldr	r3, [r7, #4]
   13234:	681b      	ldr	r3, [r3, #0]
   13236:	0018      	movs	r0, r3
   13238:	4790      	blx	r2
		current_hook = current_hook->next;
   1323a:	687b      	ldr	r3, [r7, #4]
   1323c:	689b      	ldr	r3, [r3, #8]
   1323e:	607b      	str	r3, [r7, #4]
	while (current_hook != NULL) {
   13240:	687b      	ldr	r3, [r7, #4]
   13242:	2b00      	cmp	r3, #0
   13244:	d1f3      	bne.n	1322e <EVSYS_Handler+0x26>
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
   13246:	4b07      	ldr	r3, [pc, #28]	; (13264 <EVSYS_Handler+0x5c>)
   13248:	68db      	ldr	r3, [r3, #12]
   1324a:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer &= ~flag;
   1324c:	4b05      	ldr	r3, [pc, #20]	; (13264 <EVSYS_Handler+0x5c>)
   1324e:	689b      	ldr	r3, [r3, #8]
   13250:	683a      	ldr	r2, [r7, #0]
   13252:	43d2      	mvns	r2, r2
   13254:	401a      	ands	r2, r3
   13256:	4b03      	ldr	r3, [pc, #12]	; (13264 <EVSYS_Handler+0x5c>)
   13258:	609a      	str	r2, [r3, #8]
}
   1325a:	46c0      	nop			; (mov r8, r8)
   1325c:	46bd      	mov	sp, r7
   1325e:	b002      	add	sp, #8
   13260:	bd80      	pop	{r7, pc}
   13262:	46c0      	nop			; (mov r8, r8)
   13264:	20000000 	.word	0x20000000
   13268:	42000400 	.word	0x42000400
   1326c:	0f0fffff 	.word	0x0f0fffff

00013270 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
   13270:	b580      	push	{r7, lr}
   13272:	b082      	sub	sp, #8
   13274:	af00      	add	r7, sp, #0
   13276:	0002      	movs	r2, r0
   13278:	6039      	str	r1, [r7, #0]
   1327a:	1dfb      	adds	r3, r7, #7
   1327c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1327e:	1dfb      	adds	r3, r7, #7
   13280:	781b      	ldrb	r3, [r3, #0]
   13282:	2b01      	cmp	r3, #1
   13284:	d00a      	beq.n	1329c <system_apb_clock_set_mask+0x2c>
   13286:	2b02      	cmp	r3, #2
   13288:	d00f      	beq.n	132aa <system_apb_clock_set_mask+0x3a>
   1328a:	2b00      	cmp	r3, #0
   1328c:	d114      	bne.n	132b8 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
   1328e:	4b0e      	ldr	r3, [pc, #56]	; (132c8 <system_apb_clock_set_mask+0x58>)
   13290:	4a0d      	ldr	r2, [pc, #52]	; (132c8 <system_apb_clock_set_mask+0x58>)
   13292:	6991      	ldr	r1, [r2, #24]
   13294:	683a      	ldr	r2, [r7, #0]
   13296:	430a      	orrs	r2, r1
   13298:	619a      	str	r2, [r3, #24]
			break;
   1329a:	e00f      	b.n	132bc <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
   1329c:	4b0a      	ldr	r3, [pc, #40]	; (132c8 <system_apb_clock_set_mask+0x58>)
   1329e:	4a0a      	ldr	r2, [pc, #40]	; (132c8 <system_apb_clock_set_mask+0x58>)
   132a0:	69d1      	ldr	r1, [r2, #28]
   132a2:	683a      	ldr	r2, [r7, #0]
   132a4:	430a      	orrs	r2, r1
   132a6:	61da      	str	r2, [r3, #28]
			break;
   132a8:	e008      	b.n	132bc <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
   132aa:	4b07      	ldr	r3, [pc, #28]	; (132c8 <system_apb_clock_set_mask+0x58>)
   132ac:	4a06      	ldr	r2, [pc, #24]	; (132c8 <system_apb_clock_set_mask+0x58>)
   132ae:	6a11      	ldr	r1, [r2, #32]
   132b0:	683a      	ldr	r2, [r7, #0]
   132b2:	430a      	orrs	r2, r1
   132b4:	621a      	str	r2, [r3, #32]
			break;
   132b6:	e001      	b.n	132bc <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
   132b8:	2317      	movs	r3, #23
   132ba:	e000      	b.n	132be <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
   132bc:	2300      	movs	r3, #0
}
   132be:	0018      	movs	r0, r3
   132c0:	46bd      	mov	sp, r7
   132c2:	b002      	add	sp, #8
   132c4:	bd80      	pop	{r7, pc}
   132c6:	46c0      	nop			; (mov r8, r8)
   132c8:	40000400 	.word	0x40000400

000132cc <_system_events_init>:
#if defined(__GNUC__)
#  pragma GCC diagnostic push
#  pragma GCC diagnostic ignored "-Wmissing-prototypes"
#endif
void _system_events_init(void)
{
   132cc:	b580      	push	{r7, lr}
   132ce:	af00      	add	r7, sp, #0
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_EVSYS);
   132d0:	2102      	movs	r1, #2
   132d2:	2002      	movs	r0, #2
   132d4:	4b07      	ldr	r3, [pc, #28]	; (132f4 <_system_events_init+0x28>)
   132d6:	4798      	blx	r3

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRL.reg = EVSYS_CTRL_SWRST;
   132d8:	4b07      	ldr	r3, [pc, #28]	; (132f8 <_system_events_init+0x2c>)
   132da:	2201      	movs	r2, #1
   132dc:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRL.reg & EVSYS_CTRL_SWRST) {
   132de:	46c0      	nop			; (mov r8, r8)
   132e0:	4b05      	ldr	r3, [pc, #20]	; (132f8 <_system_events_init+0x2c>)
   132e2:	781b      	ldrb	r3, [r3, #0]
   132e4:	b2db      	uxtb	r3, r3
   132e6:	001a      	movs	r2, r3
   132e8:	2301      	movs	r3, #1
   132ea:	4013      	ands	r3, r2
   132ec:	d1f8      	bne.n	132e0 <_system_events_init+0x14>
	}
}
   132ee:	46c0      	nop			; (mov r8, r8)
   132f0:	46bd      	mov	sp, r7
   132f2:	bd80      	pop	{r7, pc}
   132f4:	00013271 	.word	0x00013271
   132f8:	42000400 	.word	0x42000400

000132fc <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
   132fc:	b580      	push	{r7, lr}
   132fe:	b084      	sub	sp, #16
   13300:	af00      	add	r7, sp, #0
   13302:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   13304:	687b      	ldr	r3, [r7, #4]
   13306:	681b      	ldr	r3, [r3, #0]
   13308:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   1330a:	68fb      	ldr	r3, [r7, #12]
   1330c:	69db      	ldr	r3, [r3, #28]
   1330e:	2207      	movs	r2, #7
   13310:	4013      	ands	r3, r2
   13312:	1e5a      	subs	r2, r3, #1
   13314:	4193      	sbcs	r3, r2
   13316:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
   13318:	0018      	movs	r0, r3
   1331a:	46bd      	mov	sp, r7
   1331c:	b004      	add	sp, #16
   1331e:	bd80      	pop	{r7, pc}

00013320 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
   13320:	b580      	push	{r7, lr}
   13322:	b082      	sub	sp, #8
   13324:	af00      	add	r7, sp, #0
   13326:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
   13328:	46c0      	nop			; (mov r8, r8)
   1332a:	687b      	ldr	r3, [r7, #4]
   1332c:	0018      	movs	r0, r3
   1332e:	4b04      	ldr	r3, [pc, #16]	; (13340 <_i2c_master_wait_for_sync+0x20>)
   13330:	4798      	blx	r3
   13332:	1e03      	subs	r3, r0, #0
   13334:	d1f9      	bne.n	1332a <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
   13336:	46c0      	nop			; (mov r8, r8)
   13338:	46bd      	mov	sp, r7
   1333a:	b002      	add	sp, #8
   1333c:	bd80      	pop	{r7, pc}
   1333e:	46c0      	nop			; (mov r8, r8)
   13340:	000132fd 	.word	0x000132fd

00013344 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
   13344:	b580      	push	{r7, lr}
   13346:	b084      	sub	sp, #16
   13348:	af00      	add	r7, sp, #0
   1334a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1334c:	687b      	ldr	r3, [r7, #4]
   1334e:	681b      	ldr	r3, [r3, #0]
   13350:	60fb      	str	r3, [r7, #12]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   13352:	68fb      	ldr	r3, [r7, #12]
   13354:	681b      	ldr	r3, [r3, #0]
   13356:	011b      	lsls	r3, r3, #4
   13358:	0fdb      	lsrs	r3, r3, #31
   1335a:	b2db      	uxtb	r3, r3
   1335c:	001a      	movs	r2, r3
   1335e:	230b      	movs	r3, #11
   13360:	18fb      	adds	r3, r7, r3
   13362:	1e51      	subs	r1, r2, #1
   13364:	418a      	sbcs	r2, r1
   13366:	701a      	strb	r2, [r3, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
   13368:	2308      	movs	r3, #8
   1336a:	18fb      	adds	r3, r7, r3
   1336c:	687a      	ldr	r2, [r7, #4]
   1336e:	8b52      	ldrh	r2, [r2, #26]
   13370:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
   13372:	687b      	ldr	r3, [r7, #4]
   13374:	8b9b      	ldrh	r3, [r3, #28]
   13376:	b29a      	uxth	r2, r3
   13378:	2308      	movs	r3, #8
   1337a:	18fb      	adds	r3, r7, r3
   1337c:	2108      	movs	r1, #8
   1337e:	1879      	adds	r1, r7, r1
   13380:	8809      	ldrh	r1, [r1, #0]
   13382:	1a8a      	subs	r2, r1, r2
   13384:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
   13386:	687b      	ldr	r3, [r7, #4]
   13388:	8b9b      	ldrh	r3, [r3, #28]
   1338a:	b29b      	uxth	r3, r3
   1338c:	3b01      	subs	r3, #1
   1338e:	b29a      	uxth	r2, r3
   13390:	687b      	ldr	r3, [r7, #4]
   13392:	839a      	strh	r2, [r3, #28]

	if (sclsm_flag) {
   13394:	230b      	movs	r3, #11
   13396:	18fb      	adds	r3, r7, r3
   13398:	781b      	ldrb	r3, [r3, #0]
   1339a:	2b00      	cmp	r3, #0
   1339c:	d010      	beq.n	133c0 <_i2c_master_read+0x7c>
		if (module->send_nack && module->buffer_remaining == 1) {
   1339e:	687b      	ldr	r3, [r7, #4]
   133a0:	7adb      	ldrb	r3, [r3, #11]
   133a2:	2b00      	cmp	r3, #0
   133a4:	d01c      	beq.n	133e0 <_i2c_master_read+0x9c>
   133a6:	687b      	ldr	r3, [r7, #4]
   133a8:	8b9b      	ldrh	r3, [r3, #28]
   133aa:	b29b      	uxth	r3, r3
   133ac:	2b01      	cmp	r3, #1
   133ae:	d117      	bne.n	133e0 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   133b0:	68fb      	ldr	r3, [r7, #12]
   133b2:	685b      	ldr	r3, [r3, #4]
   133b4:	2280      	movs	r2, #128	; 0x80
   133b6:	02d2      	lsls	r2, r2, #11
   133b8:	431a      	orrs	r2, r3
   133ba:	68fb      	ldr	r3, [r7, #12]
   133bc:	605a      	str	r2, [r3, #4]
   133be:	e00f      	b.n	133e0 <_i2c_master_read+0x9c>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
   133c0:	687b      	ldr	r3, [r7, #4]
   133c2:	7adb      	ldrb	r3, [r3, #11]
   133c4:	2b00      	cmp	r3, #0
   133c6:	d00b      	beq.n	133e0 <_i2c_master_read+0x9c>
   133c8:	687b      	ldr	r3, [r7, #4]
   133ca:	8b9b      	ldrh	r3, [r3, #28]
   133cc:	b29b      	uxth	r3, r3
   133ce:	2b00      	cmp	r3, #0
   133d0:	d106      	bne.n	133e0 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   133d2:	68fb      	ldr	r3, [r7, #12]
   133d4:	685b      	ldr	r3, [r3, #4]
   133d6:	2280      	movs	r2, #128	; 0x80
   133d8:	02d2      	lsls	r2, r2, #11
   133da:	431a      	orrs	r2, r3
   133dc:	68fb      	ldr	r3, [r7, #12]
   133de:	605a      	str	r2, [r3, #4]
		}
	}

	if (module->buffer_remaining == 0) {
   133e0:	687b      	ldr	r3, [r7, #4]
   133e2:	8b9b      	ldrh	r3, [r3, #28]
   133e4:	b29b      	uxth	r3, r3
   133e6:	2b00      	cmp	r3, #0
   133e8:	d10e      	bne.n	13408 <_i2c_master_read+0xc4>
		if (module->send_stop) {
   133ea:	687b      	ldr	r3, [r7, #4]
   133ec:	7a9b      	ldrb	r3, [r3, #10]
   133ee:	2b00      	cmp	r3, #0
   133f0:	d00a      	beq.n	13408 <_i2c_master_read+0xc4>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
   133f2:	687b      	ldr	r3, [r7, #4]
   133f4:	0018      	movs	r0, r3
   133f6:	4b0e      	ldr	r3, [pc, #56]	; (13430 <_i2c_master_read+0xec>)
   133f8:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   133fa:	68fb      	ldr	r3, [r7, #12]
   133fc:	685b      	ldr	r3, [r3, #4]
   133fe:	22c0      	movs	r2, #192	; 0xc0
   13400:	0292      	lsls	r2, r2, #10
   13402:	431a      	orrs	r2, r3
   13404:	68fb      	ldr	r3, [r7, #12]
   13406:	605a      	str	r2, [r3, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
   13408:	687b      	ldr	r3, [r7, #4]
   1340a:	0018      	movs	r0, r3
   1340c:	4b08      	ldr	r3, [pc, #32]	; (13430 <_i2c_master_read+0xec>)
   1340e:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
   13410:	687b      	ldr	r3, [r7, #4]
   13412:	6a1a      	ldr	r2, [r3, #32]
   13414:	2308      	movs	r3, #8
   13416:	18fb      	adds	r3, r7, r3
   13418:	881b      	ldrh	r3, [r3, #0]
   1341a:	18d3      	adds	r3, r2, r3
   1341c:	68fa      	ldr	r2, [r7, #12]
   1341e:	2128      	movs	r1, #40	; 0x28
   13420:	5c52      	ldrb	r2, [r2, r1]
   13422:	b2d2      	uxtb	r2, r2
   13424:	701a      	strb	r2, [r3, #0]
}
   13426:	46c0      	nop			; (mov r8, r8)
   13428:	46bd      	mov	sp, r7
   1342a:	b004      	add	sp, #16
   1342c:	bd80      	pop	{r7, pc}
   1342e:	46c0      	nop			; (mov r8, r8)
   13430:	00013321 	.word	0x00013321

00013434 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
   13434:	b580      	push	{r7, lr}
   13436:	b084      	sub	sp, #16
   13438:	af00      	add	r7, sp, #0
   1343a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1343c:	687b      	ldr	r3, [r7, #4]
   1343e:	681b      	ldr	r3, [r3, #0]
   13440:	60fb      	str	r3, [r7, #12]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
   13442:	68fb      	ldr	r3, [r7, #12]
   13444:	8b5b      	ldrh	r3, [r3, #26]
   13446:	b29b      	uxth	r3, r3
   13448:	001a      	movs	r2, r3
   1344a:	2304      	movs	r3, #4
   1344c:	4013      	ands	r3, r2
   1344e:	d004      	beq.n	1345a <_i2c_master_write+0x26>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
   13450:	687b      	ldr	r3, [r7, #4]
   13452:	2225      	movs	r2, #37	; 0x25
   13454:	211e      	movs	r1, #30
   13456:	5499      	strb	r1, [r3, r2]
		/* Do not write more data */
		return;
   13458:	e024      	b.n	134a4 <_i2c_master_write+0x70>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
   1345a:	230a      	movs	r3, #10
   1345c:	18fb      	adds	r3, r7, r3
   1345e:	687a      	ldr	r2, [r7, #4]
   13460:	8b52      	ldrh	r2, [r2, #26]
   13462:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
   13464:	687b      	ldr	r3, [r7, #4]
   13466:	8b9b      	ldrh	r3, [r3, #28]
   13468:	b29a      	uxth	r2, r3
   1346a:	230a      	movs	r3, #10
   1346c:	18fb      	adds	r3, r7, r3
   1346e:	210a      	movs	r1, #10
   13470:	1879      	adds	r1, r7, r1
   13472:	8809      	ldrh	r1, [r1, #0]
   13474:	1a8a      	subs	r2, r1, r2
   13476:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
   13478:	687b      	ldr	r3, [r7, #4]
   1347a:	8b9b      	ldrh	r3, [r3, #28]
   1347c:	b29b      	uxth	r3, r3
   1347e:	3b01      	subs	r3, #1
   13480:	b29a      	uxth	r2, r3
   13482:	687b      	ldr	r3, [r7, #4]
   13484:	839a      	strh	r2, [r3, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
   13486:	687b      	ldr	r3, [r7, #4]
   13488:	0018      	movs	r0, r3
   1348a:	4b08      	ldr	r3, [pc, #32]	; (134ac <_i2c_master_write+0x78>)
   1348c:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
   1348e:	687b      	ldr	r3, [r7, #4]
   13490:	6a1a      	ldr	r2, [r3, #32]
   13492:	230a      	movs	r3, #10
   13494:	18fb      	adds	r3, r7, r3
   13496:	881b      	ldrh	r3, [r3, #0]
   13498:	18d3      	adds	r3, r2, r3
   1349a:	781b      	ldrb	r3, [r3, #0]
   1349c:	b2d9      	uxtb	r1, r3
   1349e:	68fb      	ldr	r3, [r7, #12]
   134a0:	2228      	movs	r2, #40	; 0x28
   134a2:	5499      	strb	r1, [r3, r2]
}
   134a4:	46bd      	mov	sp, r7
   134a6:	b004      	add	sp, #16
   134a8:	bd80      	pop	{r7, pc}
   134aa:	46c0      	nop			; (mov r8, r8)
   134ac:	00013321 	.word	0x00013321

000134b0 <_i2c_master_async_address_response>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_async_address_response(
		struct i2c_master_module *const module)
{
   134b0:	b580      	push	{r7, lr}
   134b2:	b084      	sub	sp, #16
   134b4:	af00      	add	r7, sp, #0
   134b6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   134b8:	687b      	ldr	r3, [r7, #4]
   134ba:	681b      	ldr	r3, [r3, #0]
   134bc:	60fb      	str	r3, [r7, #12]

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
   134be:	68fb      	ldr	r3, [r7, #12]
   134c0:	7e1b      	ldrb	r3, [r3, #24]
   134c2:	b2db      	uxtb	r3, r3
   134c4:	001a      	movs	r2, r3
   134c6:	2301      	movs	r3, #1
   134c8:	4013      	ands	r3, r2
   134ca:	d02b      	beq.n	13524 <_i2c_master_async_address_response+0x74>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   134cc:	68fb      	ldr	r3, [r7, #12]
   134ce:	2201      	movs	r2, #1
   134d0:	761a      	strb	r2, [r3, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   134d2:	68fb      	ldr	r3, [r7, #12]
   134d4:	8b5b      	ldrh	r3, [r3, #26]
   134d6:	b29b      	uxth	r3, r3
   134d8:	001a      	movs	r2, r3
   134da:	2302      	movs	r3, #2
   134dc:	4013      	ands	r3, r2
   134de:	d004      	beq.n	134ea <_i2c_master_async_address_response+0x3a>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
   134e0:	687b      	ldr	r3, [r7, #4]
   134e2:	2225      	movs	r2, #37	; 0x25
   134e4:	2141      	movs	r1, #65	; 0x41
   134e6:	5499      	strb	r1, [r3, r2]
   134e8:	e01c      	b.n	13524 <_i2c_master_async_address_response+0x74>
		}
		/* No slave responds */
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   134ea:	68fb      	ldr	r3, [r7, #12]
   134ec:	8b5b      	ldrh	r3, [r3, #26]
   134ee:	b29b      	uxth	r3, r3
   134f0:	001a      	movs	r2, r3
   134f2:	2304      	movs	r3, #4
   134f4:	4013      	ands	r3, r2
   134f6:	d015      	beq.n	13524 <_i2c_master_async_address_response+0x74>
			module->status           = STATUS_ERR_BAD_ADDRESS;
   134f8:	687b      	ldr	r3, [r7, #4]
   134fa:	2225      	movs	r2, #37	; 0x25
   134fc:	2118      	movs	r1, #24
   134fe:	5499      	strb	r1, [r3, r2]
			module->buffer_remaining = 0;
   13500:	687b      	ldr	r3, [r7, #4]
   13502:	2200      	movs	r2, #0
   13504:	839a      	strh	r2, [r3, #28]

			if (module->send_stop) {
   13506:	687b      	ldr	r3, [r7, #4]
   13508:	7a9b      	ldrb	r3, [r3, #10]
   1350a:	2b00      	cmp	r3, #0
   1350c:	d00a      	beq.n	13524 <_i2c_master_async_address_response+0x74>
				/* Send stop condition */
				_i2c_master_wait_for_sync(module);
   1350e:	687b      	ldr	r3, [r7, #4]
   13510:	0018      	movs	r0, r3
   13512:	4b13      	ldr	r3, [pc, #76]	; (13560 <_i2c_master_async_address_response+0xb0>)
   13514:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   13516:	68fb      	ldr	r3, [r7, #12]
   13518:	685b      	ldr	r3, [r3, #4]
   1351a:	22c0      	movs	r2, #192	; 0xc0
   1351c:	0292      	lsls	r2, r2, #10
   1351e:	431a      	orrs	r2, r3
   13520:	68fb      	ldr	r3, [r7, #12]
   13522:	605a      	str	r2, [r3, #4]
			}
		}
	}

	module->buffer_length = module->buffer_remaining;
   13524:	687b      	ldr	r3, [r7, #4]
   13526:	8b9b      	ldrh	r3, [r3, #28]
   13528:	b29a      	uxth	r2, r3
   1352a:	687b      	ldr	r3, [r7, #4]
   1352c:	835a      	strh	r2, [r3, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
   1352e:	687b      	ldr	r3, [r7, #4]
   13530:	2225      	movs	r2, #37	; 0x25
   13532:	5c9b      	ldrb	r3, [r3, r2]
   13534:	b2db      	uxtb	r3, r3
   13536:	2b05      	cmp	r3, #5
   13538:	d10e      	bne.n	13558 <_i2c_master_async_address_response+0xa8>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   1353a:	687b      	ldr	r3, [r7, #4]
   1353c:	2224      	movs	r2, #36	; 0x24
   1353e:	5c9b      	ldrb	r3, [r3, r2]
   13540:	b2db      	uxtb	r3, r3
   13542:	2b00      	cmp	r3, #0
   13544:	d104      	bne.n	13550 <_i2c_master_async_address_response+0xa0>
			_i2c_master_write(module);
   13546:	687b      	ldr	r3, [r7, #4]
   13548:	0018      	movs	r0, r3
   1354a:	4b06      	ldr	r3, [pc, #24]	; (13564 <_i2c_master_async_address_response+0xb4>)
   1354c:	4798      	blx	r3
		} else {
			_i2c_master_read(module);
		}
	}
}
   1354e:	e003      	b.n	13558 <_i2c_master_async_address_response+0xa8>
			_i2c_master_read(module);
   13550:	687b      	ldr	r3, [r7, #4]
   13552:	0018      	movs	r0, r3
   13554:	4b04      	ldr	r3, [pc, #16]	; (13568 <_i2c_master_async_address_response+0xb8>)
   13556:	4798      	blx	r3
}
   13558:	46c0      	nop			; (mov r8, r8)
   1355a:	46bd      	mov	sp, r7
   1355c:	b004      	add	sp, #16
   1355e:	bd80      	pop	{r7, pc}
   13560:	00013321 	.word	0x00013321
   13564:	00013435 	.word	0x00013435
   13568:	00013345 	.word	0x00013345

0001356c <i2c_master_register_callback>:
 */
void i2c_master_register_callback(
		struct i2c_master_module *const module,
		const i2c_master_callback_t callback,
		enum i2c_master_callback callback_type)
{
   1356c:	b580      	push	{r7, lr}
   1356e:	b084      	sub	sp, #16
   13570:	af00      	add	r7, sp, #0
   13572:	60f8      	str	r0, [r7, #12]
   13574:	60b9      	str	r1, [r7, #8]
   13576:	1dfb      	adds	r3, r7, #7
   13578:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(callback);

	/* Register callback */
	module->callbacks[callback_type] = callback;
   1357a:	1dfb      	adds	r3, r7, #7
   1357c:	781b      	ldrb	r3, [r3, #0]
   1357e:	68fa      	ldr	r2, [r7, #12]
   13580:	3302      	adds	r3, #2
   13582:	009b      	lsls	r3, r3, #2
   13584:	18d3      	adds	r3, r2, r3
   13586:	3304      	adds	r3, #4
   13588:	68ba      	ldr	r2, [r7, #8]
   1358a:	601a      	str	r2, [r3, #0]

	/* Set corresponding bit to set callback as registered */
	module->registered_callback |= (1 << callback_type);
   1358c:	68fb      	ldr	r3, [r7, #12]
   1358e:	7e1b      	ldrb	r3, [r3, #24]
   13590:	b2db      	uxtb	r3, r3
   13592:	b25a      	sxtb	r2, r3
   13594:	1dfb      	adds	r3, r7, #7
   13596:	781b      	ldrb	r3, [r3, #0]
   13598:	2101      	movs	r1, #1
   1359a:	4099      	lsls	r1, r3
   1359c:	000b      	movs	r3, r1
   1359e:	b25b      	sxtb	r3, r3
   135a0:	4313      	orrs	r3, r2
   135a2:	b25b      	sxtb	r3, r3
   135a4:	b2da      	uxtb	r2, r3
   135a6:	68fb      	ldr	r3, [r7, #12]
   135a8:	761a      	strb	r2, [r3, #24]
}
   135aa:	46c0      	nop			; (mov r8, r8)
   135ac:	46bd      	mov	sp, r7
   135ae:	b004      	add	sp, #16
   135b0:	bd80      	pop	{r7, pc}
	...

000135b4 <_i2c_master_read_packet>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   135b4:	b590      	push	{r4, r7, lr}
   135b6:	b087      	sub	sp, #28
   135b8:	af00      	add	r7, sp, #0
   135ba:	6078      	str	r0, [r7, #4]
   135bc:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   135be:	687b      	ldr	r3, [r7, #4]
   135c0:	681b      	ldr	r3, [r3, #0]
   135c2:	613b      	str	r3, [r7, #16]
	enum status_code tmp_status;

	/* Save packet to software module */
	module->buffer             = packet->data;
   135c4:	683b      	ldr	r3, [r7, #0]
   135c6:	685a      	ldr	r2, [r3, #4]
   135c8:	687b      	ldr	r3, [r7, #4]
   135ca:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
   135cc:	683b      	ldr	r3, [r7, #0]
   135ce:	885a      	ldrh	r2, [r3, #2]
   135d0:	687b      	ldr	r3, [r7, #4]
   135d2:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
   135d4:	687b      	ldr	r3, [r7, #4]
   135d6:	2224      	movs	r2, #36	; 0x24
   135d8:	2101      	movs	r1, #1
   135da:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
   135dc:	687b      	ldr	r3, [r7, #4]
   135de:	2225      	movs	r2, #37	; 0x25
   135e0:	2105      	movs	r1, #5
   135e2:	5499      	strb	r1, [r3, r2]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   135e4:	693b      	ldr	r3, [r7, #16]
   135e6:	681b      	ldr	r3, [r3, #0]
   135e8:	011b      	lsls	r3, r3, #4
   135ea:	0fdb      	lsrs	r3, r3, #31
   135ec:	b2db      	uxtb	r3, r3
   135ee:	001a      	movs	r2, r3
   135f0:	230f      	movs	r3, #15
   135f2:	18fb      	adds	r3, r7, r3
   135f4:	1e51      	subs	r1, r2, #1
   135f6:	418a      	sbcs	r2, r1
   135f8:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
   135fa:	683b      	ldr	r3, [r7, #0]
   135fc:	7a5b      	ldrb	r3, [r3, #9]
   135fe:	2b00      	cmp	r3, #0
   13600:	d006      	beq.n	13610 <_i2c_master_read_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   13602:	683b      	ldr	r3, [r7, #0]
   13604:	7a9a      	ldrb	r2, [r3, #10]
   13606:	687b      	ldr	r3, [r7, #4]
   13608:	0011      	movs	r1, r2
   1360a:	0018      	movs	r0, r3
   1360c:	4b3b      	ldr	r3, [pc, #236]	; (136fc <_i2c_master_read_packet+0x148>)
   1360e:	4798      	blx	r3
	}

	/* Set action to ACK or NACK. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
   13610:	230f      	movs	r3, #15
   13612:	18fb      	adds	r3, r7, r3
   13614:	781b      	ldrb	r3, [r3, #0]
   13616:	2b00      	cmp	r3, #0
   13618:	d00b      	beq.n	13632 <_i2c_master_read_packet+0x7e>
   1361a:	683b      	ldr	r3, [r7, #0]
   1361c:	885b      	ldrh	r3, [r3, #2]
   1361e:	2b01      	cmp	r3, #1
   13620:	d107      	bne.n	13632 <_i2c_master_read_packet+0x7e>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   13622:	693b      	ldr	r3, [r7, #16]
   13624:	685b      	ldr	r3, [r3, #4]
   13626:	2280      	movs	r2, #128	; 0x80
   13628:	02d2      	lsls	r2, r2, #11
   1362a:	431a      	orrs	r2, r3
   1362c:	693b      	ldr	r3, [r7, #16]
   1362e:	605a      	str	r2, [r3, #4]
   13630:	e005      	b.n	1363e <_i2c_master_read_packet+0x8a>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   13632:	693b      	ldr	r3, [r7, #16]
   13634:	685b      	ldr	r3, [r3, #4]
   13636:	4a32      	ldr	r2, [pc, #200]	; (13700 <_i2c_master_read_packet+0x14c>)
   13638:	401a      	ands	r2, r3
   1363a:	693b      	ldr	r3, [r7, #16]
   1363c:	605a      	str	r2, [r3, #4]
	}

	if (packet->ten_bit_address) {
   1363e:	683b      	ldr	r3, [r7, #0]
   13640:	7a1b      	ldrb	r3, [r3, #8]
   13642:	2b00      	cmp	r3, #0
   13644:	d045      	beq.n	136d2 <_i2c_master_read_packet+0x11e>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
   13646:	683b      	ldr	r3, [r7, #0]
   13648:	881b      	ldrh	r3, [r3, #0]
   1364a:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   1364c:	683b      	ldr	r3, [r7, #0]
   1364e:	7a5b      	ldrb	r3, [r3, #9]
   13650:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
   13652:	4313      	orrs	r3, r2
   13654:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   13656:	2380      	movs	r3, #128	; 0x80
   13658:	021b      	lsls	r3, r3, #8
   1365a:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
   1365c:	693b      	ldr	r3, [r7, #16]
   1365e:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
   13660:	2317      	movs	r3, #23
   13662:	18fc      	adds	r4, r7, r3
   13664:	687b      	ldr	r3, [r7, #4]
   13666:	0018      	movs	r0, r3
   13668:	4b26      	ldr	r3, [pc, #152]	; (13704 <_i2c_master_read_packet+0x150>)
   1366a:	4798      	blx	r3
   1366c:	0003      	movs	r3, r0
   1366e:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   13670:	693b      	ldr	r3, [r7, #16]
   13672:	685b      	ldr	r3, [r3, #4]
   13674:	4a22      	ldr	r2, [pc, #136]	; (13700 <_i2c_master_read_packet+0x14c>)
   13676:	401a      	ands	r2, r3
   13678:	693b      	ldr	r3, [r7, #16]
   1367a:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
   1367c:	2317      	movs	r3, #23
   1367e:	18fb      	adds	r3, r7, r3
   13680:	781b      	ldrb	r3, [r3, #0]
   13682:	2b00      	cmp	r3, #0
   13684:	d107      	bne.n	13696 <_i2c_master_read_packet+0xe2>
			tmp_status = _i2c_master_address_response(module);
   13686:	2317      	movs	r3, #23
   13688:	18fc      	adds	r4, r7, r3
   1368a:	687b      	ldr	r3, [r7, #4]
   1368c:	0018      	movs	r0, r3
   1368e:	4b1e      	ldr	r3, [pc, #120]	; (13708 <_i2c_master_read_packet+0x154>)
   13690:	4798      	blx	r3
   13692:	0003      	movs	r3, r0
   13694:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
   13696:	2317      	movs	r3, #23
   13698:	18fb      	adds	r3, r7, r3
   1369a:	781b      	ldrb	r3, [r3, #0]
   1369c:	2b00      	cmp	r3, #0
   1369e:	d114      	bne.n	136ca <_i2c_master_read_packet+0x116>
			/* Enable interrupts */
			i2c_module->INTENSET.reg =
   136a0:	693b      	ldr	r3, [r7, #16]
   136a2:	2203      	movs	r2, #3
   136a4:	759a      	strb	r2, [r3, #22]

			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   136a6:	683b      	ldr	r3, [r7, #0]
   136a8:	881b      	ldrh	r3, [r3, #0]
   136aa:	0a1b      	lsrs	r3, r3, #8
   136ac:	b29b      	uxth	r3, r3
   136ae:	2278      	movs	r2, #120	; 0x78
   136b0:	4313      	orrs	r3, r2
   136b2:	b29b      	uxth	r3, r3
   136b4:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   136b6:	683b      	ldr	r3, [r7, #0]
   136b8:	7a5b      	ldrb	r3, [r3, #9]
   136ba:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   136bc:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   136be:	2201      	movs	r2, #1
   136c0:	4313      	orrs	r3, r2
   136c2:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   136c4:	693b      	ldr	r3, [r7, #16]
   136c6:	625a      	str	r2, [r3, #36]	; 0x24
   136c8:	e012      	b.n	136f0 <_i2c_master_read_packet+0x13c>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
   136ca:	2317      	movs	r3, #23
   136cc:	18fb      	adds	r3, r7, r3
   136ce:	781b      	ldrb	r3, [r3, #0]
   136d0:	e00f      	b.n	136f2 <_i2c_master_read_packet+0x13e>
		}
	} else {
		/* Enable interrupts */
		i2c_module->INTENSET.reg =
   136d2:	693b      	ldr	r3, [r7, #16]
   136d4:	2203      	movs	r2, #3
   136d6:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

		/* Set address and direction bit. Will send start command on bus */
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   136d8:	683b      	ldr	r3, [r7, #0]
   136da:	881b      	ldrh	r3, [r3, #0]
   136dc:	005b      	lsls	r3, r3, #1
   136de:	2201      	movs	r2, #1
   136e0:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   136e2:	683b      	ldr	r3, [r7, #0]
   136e4:	7a5b      	ldrb	r3, [r3, #9]
   136e6:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   136e8:	4313      	orrs	r3, r2
   136ea:	001a      	movs	r2, r3
   136ec:	693b      	ldr	r3, [r7, #16]
   136ee:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
   136f0:	2300      	movs	r3, #0
}
   136f2:	0018      	movs	r0, r3
   136f4:	46bd      	mov	sp, r7
   136f6:	b007      	add	sp, #28
   136f8:	bd90      	pop	{r4, r7, pc}
   136fa:	46c0      	nop			; (mov r8, r8)
   136fc:	00017a9d 	.word	0x00017a9d
   13700:	fffbffff 	.word	0xfffbffff
   13704:	00017a3f 	.word	0x00017a3f
   13708:	000179e1 	.word	0x000179e1

0001370c <i2c_master_read_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_read_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   1370c:	b580      	push	{r7, lr}
   1370e:	b082      	sub	sp, #8
   13710:	af00      	add	r7, sp, #0
   13712:	6078      	str	r0, [r7, #4]
   13714:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
   13716:	687b      	ldr	r3, [r7, #4]
   13718:	8b9b      	ldrh	r3, [r3, #28]
   1371a:	b29b      	uxth	r3, r3
   1371c:	2b00      	cmp	r3, #0
   1371e:	d001      	beq.n	13724 <i2c_master_read_packet_job+0x18>
		return STATUS_BUSY;
   13720:	2305      	movs	r3, #5
   13722:	e00c      	b.n	1373e <i2c_master_read_packet_job+0x32>
	}

	/* Make sure we send STOP */
	module->send_stop = true;
   13724:	687b      	ldr	r3, [r7, #4]
   13726:	2201      	movs	r2, #1
   13728:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   1372a:	687b      	ldr	r3, [r7, #4]
   1372c:	2201      	movs	r2, #1
   1372e:	72da      	strb	r2, [r3, #11]
	/* Start reading */
	return _i2c_master_read_packet(module, packet);
   13730:	683a      	ldr	r2, [r7, #0]
   13732:	687b      	ldr	r3, [r7, #4]
   13734:	0011      	movs	r1, r2
   13736:	0018      	movs	r0, r3
   13738:	4b03      	ldr	r3, [pc, #12]	; (13748 <i2c_master_read_packet_job+0x3c>)
   1373a:	4798      	blx	r3
   1373c:	0003      	movs	r3, r0
}
   1373e:	0018      	movs	r0, r3
   13740:	46bd      	mov	sp, r7
   13742:	b002      	add	sp, #8
   13744:	bd80      	pop	{r7, pc}
   13746:	46c0      	nop			; (mov r8, r8)
   13748:	000135b5 	.word	0x000135b5

0001374c <_i2c_master_write_packet>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   1374c:	b580      	push	{r7, lr}
   1374e:	b084      	sub	sp, #16
   13750:	af00      	add	r7, sp, #0
   13752:	6078      	str	r0, [r7, #4]
   13754:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13756:	687b      	ldr	r3, [r7, #4]
   13758:	681b      	ldr	r3, [r3, #0]
   1375a:	60fb      	str	r3, [r7, #12]

	/* Switch to high speed mode */
	if (packet->high_speed) {
   1375c:	683b      	ldr	r3, [r7, #0]
   1375e:	7a5b      	ldrb	r3, [r3, #9]
   13760:	2b00      	cmp	r3, #0
   13762:	d006      	beq.n	13772 <_i2c_master_write_packet+0x26>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   13764:	683b      	ldr	r3, [r7, #0]
   13766:	7a9a      	ldrb	r2, [r3, #10]
   13768:	687b      	ldr	r3, [r7, #4]
   1376a:	0011      	movs	r1, r2
   1376c:	0018      	movs	r0, r3
   1376e:	4b1e      	ldr	r3, [pc, #120]	; (137e8 <_i2c_master_write_packet+0x9c>)
   13770:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   13772:	68fb      	ldr	r3, [r7, #12]
   13774:	685b      	ldr	r3, [r3, #4]
   13776:	4a1d      	ldr	r2, [pc, #116]	; (137ec <_i2c_master_write_packet+0xa0>)
   13778:	401a      	ands	r2, r3
   1377a:	68fb      	ldr	r3, [r7, #12]
   1377c:	605a      	str	r2, [r3, #4]

	/* Save packet to software module */
	module->buffer             = packet->data;
   1377e:	683b      	ldr	r3, [r7, #0]
   13780:	685a      	ldr	r2, [r3, #4]
   13782:	687b      	ldr	r3, [r7, #4]
   13784:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
   13786:	683b      	ldr	r3, [r7, #0]
   13788:	885a      	ldrh	r2, [r3, #2]
   1378a:	687b      	ldr	r3, [r7, #4]
   1378c:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_WRITE;
   1378e:	687b      	ldr	r3, [r7, #4]
   13790:	2224      	movs	r2, #36	; 0x24
   13792:	2100      	movs	r1, #0
   13794:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
   13796:	687b      	ldr	r3, [r7, #4]
   13798:	2225      	movs	r2, #37	; 0x25
   1379a:	2105      	movs	r1, #5
   1379c:	5499      	strb	r1, [r3, r2]

	/* Enable interrupts */
	i2c_module->INTENSET.reg =
   1379e:	68fb      	ldr	r3, [r7, #12]
   137a0:	2203      	movs	r2, #3
   137a2:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

	/* Set address and direction bit, will send start command on bus */
	if (packet->ten_bit_address) {
   137a4:	683b      	ldr	r3, [r7, #0]
   137a6:	7a1b      	ldrb	r3, [r3, #8]
   137a8:	2b00      	cmp	r3, #0
   137aa:	d00d      	beq.n	137c8 <_i2c_master_write_packet+0x7c>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   137ac:	683b      	ldr	r3, [r7, #0]
   137ae:	881b      	ldrh	r3, [r3, #0]
   137b0:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   137b2:	683b      	ldr	r3, [r7, #0]
   137b4:	7a5b      	ldrb	r3, [r3, #9]
   137b6:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   137b8:	4313      	orrs	r3, r2
   137ba:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   137bc:	2380      	movs	r3, #128	; 0x80
   137be:	021b      	lsls	r3, r3, #8
   137c0:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   137c2:	68fb      	ldr	r3, [r7, #12]
   137c4:	625a      	str	r2, [r3, #36]	; 0x24
   137c6:	e009      	b.n	137dc <_i2c_master_write_packet+0x90>
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   137c8:	683b      	ldr	r3, [r7, #0]
   137ca:	881b      	ldrh	r3, [r3, #0]
   137cc:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   137ce:	683b      	ldr	r3, [r7, #0]
   137d0:	7a5b      	ldrb	r3, [r3, #9]
   137d2:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   137d4:	4313      	orrs	r3, r2
   137d6:	001a      	movs	r2, r3
   137d8:	68fb      	ldr	r3, [r7, #12]
   137da:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
   137dc:	2300      	movs	r3, #0
}
   137de:	0018      	movs	r0, r3
   137e0:	46bd      	mov	sp, r7
   137e2:	b004      	add	sp, #16
   137e4:	bd80      	pop	{r7, pc}
   137e6:	46c0      	nop			; (mov r8, r8)
   137e8:	00017a9d 	.word	0x00017a9d
   137ec:	fffbffff 	.word	0xfffbffff

000137f0 <i2c_master_write_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_write_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   137f0:	b580      	push	{r7, lr}
   137f2:	b082      	sub	sp, #8
   137f4:	af00      	add	r7, sp, #0
   137f6:	6078      	str	r0, [r7, #4]
   137f8:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
   137fa:	687b      	ldr	r3, [r7, #4]
   137fc:	8b9b      	ldrh	r3, [r3, #28]
   137fe:	b29b      	uxth	r3, r3
   13800:	2b00      	cmp	r3, #0
   13802:	d001      	beq.n	13808 <i2c_master_write_packet_job+0x18>
		return STATUS_BUSY;
   13804:	2305      	movs	r3, #5
   13806:	e00c      	b.n	13822 <i2c_master_write_packet_job+0x32>
	}

	/* Make sure we send STOP at end*/
	module->send_stop = true;
   13808:	687b      	ldr	r3, [r7, #4]
   1380a:	2201      	movs	r2, #1
   1380c:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   1380e:	687b      	ldr	r3, [r7, #4]
   13810:	2201      	movs	r2, #1
   13812:	72da      	strb	r2, [r3, #11]
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
   13814:	683a      	ldr	r2, [r7, #0]
   13816:	687b      	ldr	r3, [r7, #4]
   13818:	0011      	movs	r1, r2
   1381a:	0018      	movs	r0, r3
   1381c:	4b03      	ldr	r3, [pc, #12]	; (1382c <i2c_master_write_packet_job+0x3c>)
   1381e:	4798      	blx	r3
   13820:	0003      	movs	r3, r0
}
   13822:	0018      	movs	r0, r3
   13824:	46bd      	mov	sp, r7
   13826:	b002      	add	sp, #8
   13828:	bd80      	pop	{r7, pc}
   1382a:	46c0      	nop			; (mov r8, r8)
   1382c:	0001374d 	.word	0x0001374d

00013830 <i2c_master_write_packet_job_no_stop>:
 * \retval STATUS_BUSY  If module is currently busy with another
 */
enum status_code i2c_master_write_packet_job_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   13830:	b580      	push	{r7, lr}
   13832:	b082      	sub	sp, #8
   13834:	af00      	add	r7, sp, #0
   13836:	6078      	str	r0, [r7, #4]
   13838:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
   1383a:	687b      	ldr	r3, [r7, #4]
   1383c:	8b9b      	ldrh	r3, [r3, #28]
   1383e:	b29b      	uxth	r3, r3
   13840:	2b00      	cmp	r3, #0
   13842:	d001      	beq.n	13848 <i2c_master_write_packet_job_no_stop+0x18>
		return STATUS_BUSY;
   13844:	2305      	movs	r3, #5
   13846:	e00c      	b.n	13862 <i2c_master_write_packet_job_no_stop+0x32>
	}

	/* Do not send stop condition when done */
	module->send_stop = false;
   13848:	687b      	ldr	r3, [r7, #4]
   1384a:	2200      	movs	r2, #0
   1384c:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   1384e:	687b      	ldr	r3, [r7, #4]
   13850:	2201      	movs	r2, #1
   13852:	72da      	strb	r2, [r3, #11]
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
   13854:	683a      	ldr	r2, [r7, #0]
   13856:	687b      	ldr	r3, [r7, #4]
   13858:	0011      	movs	r1, r2
   1385a:	0018      	movs	r0, r3
   1385c:	4b03      	ldr	r3, [pc, #12]	; (1386c <i2c_master_write_packet_job_no_stop+0x3c>)
   1385e:	4798      	blx	r3
   13860:	0003      	movs	r3, r0
}
   13862:	0018      	movs	r0, r3
   13864:	46bd      	mov	sp, r7
   13866:	b002      	add	sp, #8
   13868:	bd80      	pop	{r7, pc}
   1386a:	46c0      	nop			; (mov r8, r8)
   1386c:	0001374d 	.word	0x0001374d

00013870 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
   13870:	b580      	push	{r7, lr}
   13872:	b086      	sub	sp, #24
   13874:	af00      	add	r7, sp, #0
   13876:	0002      	movs	r2, r0
   13878:	1dfb      	adds	r3, r7, #7
   1387a:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling */
	struct i2c_master_module *module =
			(struct i2c_master_module*)_sercom_instances[instance];
   1387c:	1dfb      	adds	r3, r7, #7
   1387e:	781a      	ldrb	r2, [r3, #0]
	struct i2c_master_module *module =
   13880:	4b93      	ldr	r3, [pc, #588]	; (13ad0 <_i2c_master_interrupt_handler+0x260>)
   13882:	0092      	lsls	r2, r2, #2
   13884:	58d3      	ldr	r3, [r2, r3]
   13886:	617b      	str	r3, [r7, #20]

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13888:	697b      	ldr	r3, [r7, #20]
   1388a:	681b      	ldr	r3, [r3, #0]
   1388c:	613b      	str	r3, [r7, #16]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   1388e:	693b      	ldr	r3, [r7, #16]
   13890:	681b      	ldr	r3, [r3, #0]
   13892:	011b      	lsls	r3, r3, #4
   13894:	0fdb      	lsrs	r3, r3, #31
   13896:	b2db      	uxtb	r3, r3
   13898:	001a      	movs	r2, r3
   1389a:	230f      	movs	r3, #15
   1389c:	18fb      	adds	r3, r7, r3
   1389e:	1e51      	subs	r1, r2, #1
   138a0:	418a      	sbcs	r2, r1
   138a2:	701a      	strb	r2, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
   138a4:	230e      	movs	r3, #14
   138a6:	18fb      	adds	r3, r7, r3
   138a8:	697a      	ldr	r2, [r7, #20]
   138aa:	7e52      	ldrb	r2, [r2, #25]
   138ac:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   138ae:	697b      	ldr	r3, [r7, #20]
   138b0:	7e1b      	ldrb	r3, [r3, #24]
   138b2:	b2da      	uxtb	r2, r3
   138b4:	230e      	movs	r3, #14
   138b6:	18fb      	adds	r3, r7, r3
   138b8:	210e      	movs	r1, #14
   138ba:	1879      	adds	r1, r7, r1
   138bc:	7809      	ldrb	r1, [r1, #0]
   138be:	400a      	ands	r2, r1
   138c0:	701a      	strb	r2, [r3, #0]

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
   138c2:	697b      	ldr	r3, [r7, #20]
   138c4:	8b5b      	ldrh	r3, [r3, #26]
   138c6:	b29b      	uxth	r3, r3
   138c8:	2b00      	cmp	r3, #0
   138ca:	d109      	bne.n	138e0 <_i2c_master_interrupt_handler+0x70>
   138cc:	697b      	ldr	r3, [r7, #20]
   138ce:	8b9b      	ldrh	r3, [r3, #28]
   138d0:	b29b      	uxth	r3, r3
   138d2:	2b00      	cmp	r3, #0
   138d4:	d004      	beq.n	138e0 <_i2c_master_interrupt_handler+0x70>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
   138d6:	697b      	ldr	r3, [r7, #20]
   138d8:	0018      	movs	r0, r3
   138da:	4b7e      	ldr	r3, [pc, #504]	; (13ad4 <_i2c_master_interrupt_handler+0x264>)
   138dc:	4798      	blx	r3
   138de:	e070      	b.n	139c2 <_i2c_master_interrupt_handler+0x152>

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   138e0:	697b      	ldr	r3, [r7, #20]
   138e2:	8b5b      	ldrh	r3, [r3, #26]
   138e4:	b29b      	uxth	r3, r3
   138e6:	2b00      	cmp	r3, #0
   138e8:	d039      	beq.n	1395e <_i2c_master_interrupt_handler+0xee>
   138ea:	697b      	ldr	r3, [r7, #20]
   138ec:	8b9b      	ldrh	r3, [r3, #28]
   138ee:	b29b      	uxth	r3, r3
   138f0:	2b00      	cmp	r3, #0
   138f2:	d134      	bne.n	1395e <_i2c_master_interrupt_handler+0xee>
			(module->status == STATUS_BUSY) &&
   138f4:	697b      	ldr	r3, [r7, #20]
   138f6:	2225      	movs	r2, #37	; 0x25
   138f8:	5c9b      	ldrb	r3, [r3, r2]
   138fa:	b2db      	uxtb	r3, r3
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   138fc:	2b05      	cmp	r3, #5
   138fe:	d12e      	bne.n	1395e <_i2c_master_interrupt_handler+0xee>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
   13900:	697b      	ldr	r3, [r7, #20]
   13902:	2224      	movs	r2, #36	; 0x24
   13904:	5c9b      	ldrb	r3, [r3, r2]
   13906:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
   13908:	2b00      	cmp	r3, #0
   1390a:	d128      	bne.n	1395e <_i2c_master_interrupt_handler+0xee>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
   1390c:	693b      	ldr	r3, [r7, #16]
   1390e:	2203      	movs	r2, #3
   13910:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
   13912:	697b      	ldr	r3, [r7, #20]
   13914:	2200      	movs	r2, #0
   13916:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
   13918:	697b      	ldr	r3, [r7, #20]
   1391a:	2225      	movs	r2, #37	; 0x25
   1391c:	2100      	movs	r1, #0
   1391e:	5499      	strb	r1, [r3, r2]

		if (module->send_stop) {
   13920:	697b      	ldr	r3, [r7, #20]
   13922:	7a9b      	ldrb	r3, [r3, #10]
   13924:	2b00      	cmp	r3, #0
   13926:	d00b      	beq.n	13940 <_i2c_master_interrupt_handler+0xd0>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
   13928:	697b      	ldr	r3, [r7, #20]
   1392a:	0018      	movs	r0, r3
   1392c:	4b6a      	ldr	r3, [pc, #424]	; (13ad8 <_i2c_master_interrupt_handler+0x268>)
   1392e:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   13930:	693b      	ldr	r3, [r7, #16]
   13932:	685b      	ldr	r3, [r3, #4]
   13934:	22c0      	movs	r2, #192	; 0xc0
   13936:	0292      	lsls	r2, r2, #10
   13938:	431a      	orrs	r2, r3
   1393a:	693b      	ldr	r3, [r7, #16]
   1393c:	605a      	str	r2, [r3, #4]
   1393e:	e002      	b.n	13946 <_i2c_master_interrupt_handler+0xd6>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
   13940:	693b      	ldr	r3, [r7, #16]
   13942:	2201      	movs	r2, #1
   13944:	761a      	strb	r2, [r3, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
   13946:	230e      	movs	r3, #14
   13948:	18fb      	adds	r3, r7, r3
   1394a:	781b      	ldrb	r3, [r3, #0]
   1394c:	2201      	movs	r2, #1
   1394e:	4013      	ands	r3, r2
   13950:	d037      	beq.n	139c2 <_i2c_master_interrupt_handler+0x152>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   13952:	697b      	ldr	r3, [r7, #20]
   13954:	68db      	ldr	r3, [r3, #12]
   13956:	697a      	ldr	r2, [r7, #20]
   13958:	0010      	movs	r0, r2
   1395a:	4798      	blx	r3
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
   1395c:	e031      	b.n	139c2 <_i2c_master_interrupt_handler+0x152>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
   1395e:	697b      	ldr	r3, [r7, #20]
   13960:	8b5b      	ldrh	r3, [r3, #26]
   13962:	b29b      	uxth	r3, r3
   13964:	2b00      	cmp	r3, #0
   13966:	d02c      	beq.n	139c2 <_i2c_master_interrupt_handler+0x152>
   13968:	697b      	ldr	r3, [r7, #20]
   1396a:	8b9b      	ldrh	r3, [r3, #28]
   1396c:	b29b      	uxth	r3, r3
   1396e:	2b00      	cmp	r3, #0
   13970:	d027      	beq.n	139c2 <_i2c_master_interrupt_handler+0x152>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
   13972:	693b      	ldr	r3, [r7, #16]
   13974:	8b5b      	ldrh	r3, [r3, #26]
   13976:	b29b      	uxth	r3, r3
   13978:	001a      	movs	r2, r3
   1397a:	2320      	movs	r3, #32
   1397c:	4013      	ands	r3, r2
   1397e:	d111      	bne.n	139a4 <_i2c_master_interrupt_handler+0x134>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
   13980:	230f      	movs	r3, #15
   13982:	18fb      	adds	r3, r7, r3
   13984:	781b      	ldrb	r3, [r3, #0]
   13986:	2201      	movs	r2, #1
   13988:	4053      	eors	r3, r2
   1398a:	b2db      	uxtb	r3, r3
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
   1398c:	2b00      	cmp	r3, #0
   1398e:	d104      	bne.n	1399a <_i2c_master_interrupt_handler+0x12a>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
   13990:	697b      	ldr	r3, [r7, #20]
   13992:	8b9b      	ldrh	r3, [r3, #28]
   13994:	b29b      	uxth	r3, r3
   13996:	2b01      	cmp	r3, #1
   13998:	d004      	beq.n	139a4 <_i2c_master_interrupt_handler+0x134>
			module->status = STATUS_ERR_PACKET_COLLISION;
   1399a:	697b      	ldr	r3, [r7, #20]
   1399c:	2225      	movs	r2, #37	; 0x25
   1399e:	2141      	movs	r1, #65	; 0x41
   139a0:	5499      	strb	r1, [r3, r2]
   139a2:	e00e      	b.n	139c2 <_i2c_master_interrupt_handler+0x152>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   139a4:	697b      	ldr	r3, [r7, #20]
   139a6:	2224      	movs	r2, #36	; 0x24
   139a8:	5c9b      	ldrb	r3, [r3, r2]
   139aa:	b2db      	uxtb	r3, r3
   139ac:	2b00      	cmp	r3, #0
   139ae:	d104      	bne.n	139ba <_i2c_master_interrupt_handler+0x14a>
			_i2c_master_write(module);
   139b0:	697b      	ldr	r3, [r7, #20]
   139b2:	0018      	movs	r0, r3
   139b4:	4b49      	ldr	r3, [pc, #292]	; (13adc <_i2c_master_interrupt_handler+0x26c>)
   139b6:	4798      	blx	r3
   139b8:	e003      	b.n	139c2 <_i2c_master_interrupt_handler+0x152>
		} else {
			_i2c_master_read(module);
   139ba:	697b      	ldr	r3, [r7, #20]
   139bc:	0018      	movs	r0, r3
   139be:	4b48      	ldr	r3, [pc, #288]	; (13ae0 <_i2c_master_interrupt_handler+0x270>)
   139c0:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   139c2:	697b      	ldr	r3, [r7, #20]
   139c4:	8b5b      	ldrh	r3, [r3, #26]
   139c6:	b29b      	uxth	r3, r3
   139c8:	2b00      	cmp	r3, #0
   139ca:	d047      	beq.n	13a5c <_i2c_master_interrupt_handler+0x1ec>
   139cc:	697b      	ldr	r3, [r7, #20]
   139ce:	8b9b      	ldrh	r3, [r3, #28]
   139d0:	b29b      	uxth	r3, r3
   139d2:	2b00      	cmp	r3, #0
   139d4:	d142      	bne.n	13a5c <_i2c_master_interrupt_handler+0x1ec>
			(module->status == STATUS_BUSY) &&
   139d6:	697b      	ldr	r3, [r7, #20]
   139d8:	2225      	movs	r2, #37	; 0x25
   139da:	5c9b      	ldrb	r3, [r3, r2]
   139dc:	b2db      	uxtb	r3, r3
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   139de:	2b05      	cmp	r3, #5
   139e0:	d13c      	bne.n	13a5c <_i2c_master_interrupt_handler+0x1ec>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
   139e2:	697b      	ldr	r3, [r7, #20]
   139e4:	2224      	movs	r2, #36	; 0x24
   139e6:	5c9b      	ldrb	r3, [r3, r2]
   139e8:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
   139ea:	2b01      	cmp	r3, #1
   139ec:	d136      	bne.n	13a5c <_i2c_master_interrupt_handler+0x1ec>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   139ee:	693b      	ldr	r3, [r7, #16]
   139f0:	7e1b      	ldrb	r3, [r3, #24]
   139f2:	b2db      	uxtb	r3, r3
   139f4:	001a      	movs	r2, r3
   139f6:	2302      	movs	r3, #2
   139f8:	4013      	ands	r3, r2
   139fa:	d002      	beq.n	13a02 <_i2c_master_interrupt_handler+0x192>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   139fc:	693b      	ldr	r3, [r7, #16]
   139fe:	2202      	movs	r2, #2
   13a00:	761a      	strb	r2, [r3, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
   13a02:	693b      	ldr	r3, [r7, #16]
   13a04:	2203      	movs	r2, #3
   13a06:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
   13a08:	697b      	ldr	r3, [r7, #20]
   13a0a:	2200      	movs	r2, #0
   13a0c:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
   13a0e:	697b      	ldr	r3, [r7, #20]
   13a10:	2225      	movs	r2, #37	; 0x25
   13a12:	2100      	movs	r1, #0
   13a14:	5499      	strb	r1, [r3, r2]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
   13a16:	230e      	movs	r3, #14
   13a18:	18fb      	adds	r3, r7, r3
   13a1a:	781b      	ldrb	r3, [r3, #0]
   13a1c:	2202      	movs	r2, #2
   13a1e:	4013      	ands	r3, r2
   13a20:	d00b      	beq.n	13a3a <_i2c_master_interrupt_handler+0x1ca>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
   13a22:	697b      	ldr	r3, [r7, #20]
   13a24:	2224      	movs	r2, #36	; 0x24
   13a26:	5c9b      	ldrb	r3, [r3, r2]
   13a28:	b2db      	uxtb	r3, r3
   13a2a:	2b01      	cmp	r3, #1
   13a2c:	d105      	bne.n	13a3a <_i2c_master_interrupt_handler+0x1ca>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
   13a2e:	697b      	ldr	r3, [r7, #20]
   13a30:	691b      	ldr	r3, [r3, #16]
   13a32:	697a      	ldr	r2, [r7, #20]
   13a34:	0010      	movs	r0, r2
   13a36:	4798      	blx	r3
   13a38:	e010      	b.n	13a5c <_i2c_master_interrupt_handler+0x1ec>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
   13a3a:	230e      	movs	r3, #14
   13a3c:	18fb      	adds	r3, r7, r3
   13a3e:	781b      	ldrb	r3, [r3, #0]
   13a40:	2201      	movs	r2, #1
   13a42:	4013      	ands	r3, r2
   13a44:	d00a      	beq.n	13a5c <_i2c_master_interrupt_handler+0x1ec>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
   13a46:	697b      	ldr	r3, [r7, #20]
   13a48:	2224      	movs	r2, #36	; 0x24
   13a4a:	5c9b      	ldrb	r3, [r3, r2]
   13a4c:	b2db      	uxtb	r3, r3
   13a4e:	2b00      	cmp	r3, #0
   13a50:	d104      	bne.n	13a5c <_i2c_master_interrupt_handler+0x1ec>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   13a52:	697b      	ldr	r3, [r7, #20]
   13a54:	68db      	ldr	r3, [r3, #12]
   13a56:	697a      	ldr	r2, [r7, #20]
   13a58:	0010      	movs	r0, r2
   13a5a:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
   13a5c:	697b      	ldr	r3, [r7, #20]
   13a5e:	2225      	movs	r2, #37	; 0x25
   13a60:	5c9b      	ldrb	r3, [r3, r2]
   13a62:	b2db      	uxtb	r3, r3
   13a64:	2b05      	cmp	r3, #5
   13a66:	d02e      	beq.n	13ac6 <_i2c_master_interrupt_handler+0x256>
   13a68:	697b      	ldr	r3, [r7, #20]
   13a6a:	2225      	movs	r2, #37	; 0x25
   13a6c:	5c9b      	ldrb	r3, [r3, r2]
   13a6e:	b2db      	uxtb	r3, r3
   13a70:	2b00      	cmp	r3, #0
   13a72:	d028      	beq.n	13ac6 <_i2c_master_interrupt_handler+0x256>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
   13a74:	693b      	ldr	r3, [r7, #16]
   13a76:	2203      	movs	r2, #3
   13a78:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
   13a7a:	697b      	ldr	r3, [r7, #20]
   13a7c:	2200      	movs	r2, #0
   13a7e:	835a      	strh	r2, [r3, #26]
		module->buffer_remaining = 0;
   13a80:	697b      	ldr	r3, [r7, #20]
   13a82:	2200      	movs	r2, #0
   13a84:	839a      	strh	r2, [r3, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
   13a86:	697b      	ldr	r3, [r7, #20]
   13a88:	2225      	movs	r2, #37	; 0x25
   13a8a:	5c9b      	ldrb	r3, [r3, r2]
   13a8c:	b2db      	uxtb	r3, r3
   13a8e:	2b41      	cmp	r3, #65	; 0x41
   13a90:	d00e      	beq.n	13ab0 <_i2c_master_interrupt_handler+0x240>
				module->send_stop) {
   13a92:	697b      	ldr	r3, [r7, #20]
   13a94:	7a9b      	ldrb	r3, [r3, #10]
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
   13a96:	2b00      	cmp	r3, #0
   13a98:	d00a      	beq.n	13ab0 <_i2c_master_interrupt_handler+0x240>
			_i2c_master_wait_for_sync(module);
   13a9a:	697b      	ldr	r3, [r7, #20]
   13a9c:	0018      	movs	r0, r3
   13a9e:	4b0e      	ldr	r3, [pc, #56]	; (13ad8 <_i2c_master_interrupt_handler+0x268>)
   13aa0:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
   13aa2:	693b      	ldr	r3, [r7, #16]
   13aa4:	685b      	ldr	r3, [r3, #4]
   13aa6:	22e0      	movs	r2, #224	; 0xe0
   13aa8:	02d2      	lsls	r2, r2, #11
   13aaa:	431a      	orrs	r2, r3
   13aac:	693b      	ldr	r3, [r7, #16]
   13aae:	605a      	str	r2, [r3, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
   13ab0:	230e      	movs	r3, #14
   13ab2:	18fb      	adds	r3, r7, r3
   13ab4:	781b      	ldrb	r3, [r3, #0]
   13ab6:	2204      	movs	r2, #4
   13ab8:	4013      	ands	r3, r2
   13aba:	d004      	beq.n	13ac6 <_i2c_master_interrupt_handler+0x256>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
   13abc:	697b      	ldr	r3, [r7, #20]
   13abe:	695b      	ldr	r3, [r3, #20]
   13ac0:	697a      	ldr	r2, [r7, #20]
   13ac2:	0010      	movs	r0, r2
   13ac4:	4798      	blx	r3
		}
	}
}
   13ac6:	46c0      	nop			; (mov r8, r8)
   13ac8:	46bd      	mov	sp, r7
   13aca:	b006      	add	sp, #24
   13acc:	bd80      	pop	{r7, pc}
   13ace:	46c0      	nop			; (mov r8, r8)
   13ad0:	20005528 	.word	0x20005528
   13ad4:	000134b1 	.word	0x000134b1
   13ad8:	00013321 	.word	0x00013321
   13adc:	00013435 	.word	0x00013435
   13ae0:	00013345 	.word	0x00013345

00013ae4 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
   13ae4:	b580      	push	{r7, lr}
   13ae6:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
   13ae8:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   13aec:	4b02      	ldr	r3, [pc, #8]	; (13af8 <NVIC_SystemReset+0x14>)
   13aee:	4a03      	ldr	r2, [pc, #12]	; (13afc <NVIC_SystemReset+0x18>)
   13af0:	60da      	str	r2, [r3, #12]
   13af2:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
   13af6:	e7fe      	b.n	13af6 <NVIC_SystemReset+0x12>
   13af8:	e000ed00 	.word	0xe000ed00
   13afc:	05fa0004 	.word	0x05fa0004

00013b00 <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32KHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
   13b00:	b580      	push	{r7, lr}
   13b02:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
   13b04:	4b02      	ldr	r3, [pc, #8]	; (13b10 <system_reset+0x10>)
   13b06:	4798      	blx	r3
}
   13b08:	46c0      	nop			; (mov r8, r8)
   13b0a:	46bd      	mov	sp, r7
   13b0c:	bd80      	pop	{r7, pc}
   13b0e:	46c0      	nop			; (mov r8, r8)
   13b10:	00013ae5 	.word	0x00013ae5

00013b14 <vCommandConsoleTask>:
/******************************************************************************
* CLI Thread
******************************************************************************/

void vCommandConsoleTask( void *pvParameters )
{
   13b14:	b580      	push	{r7, lr}
   13b16:	b088      	sub	sp, #32
   13b18:	af00      	add	r7, sp, #0
   13b1a:	6078      	str	r0, [r7, #4]
//REGISTER COMMANDS HERE
FreeRTOS_CLIRegisterCommand( &xOTAUCommand);
   13b1c:	4b8d      	ldr	r3, [pc, #564]	; (13d54 <vCommandConsoleTask+0x240>)
   13b1e:	0018      	movs	r0, r3
   13b20:	4b8d      	ldr	r3, [pc, #564]	; (13d58 <vCommandConsoleTask+0x244>)
   13b22:	4798      	blx	r3
FreeRTOS_CLIRegisterCommand( &xClearScreen );
   13b24:	4b8d      	ldr	r3, [pc, #564]	; (13d5c <vCommandConsoleTask+0x248>)
   13b26:	0018      	movs	r0, r3
   13b28:	4b8b      	ldr	r3, [pc, #556]	; (13d58 <vCommandConsoleTask+0x244>)
   13b2a:	4798      	blx	r3
FreeRTOS_CLIRegisterCommand( &xResetCommand );
   13b2c:	4b8c      	ldr	r3, [pc, #560]	; (13d60 <vCommandConsoleTask+0x24c>)
   13b2e:	0018      	movs	r0, r3
   13b30:	4b89      	ldr	r3, [pc, #548]	; (13d58 <vCommandConsoleTask+0x244>)
   13b32:	4798      	blx	r3
FreeRTOS_CLIRegisterCommand( &xNeotrellisTurnLEDCommand );
   13b34:	4b8b      	ldr	r3, [pc, #556]	; (13d64 <vCommandConsoleTask+0x250>)
   13b36:	0018      	movs	r0, r3
   13b38:	4b87      	ldr	r3, [pc, #540]	; (13d58 <vCommandConsoleTask+0x244>)
   13b3a:	4798      	blx	r3
FreeRTOS_CLIRegisterCommand( &xNeotrellisProcessButtonCommand );
   13b3c:	4b8a      	ldr	r3, [pc, #552]	; (13d68 <vCommandConsoleTask+0x254>)
   13b3e:	0018      	movs	r0, r3
   13b40:	4b85      	ldr	r3, [pc, #532]	; (13d58 <vCommandConsoleTask+0x244>)
   13b42:	4798      	blx	r3

uint8_t cRxedChar[2], cInputIndex = 0;
   13b44:	231f      	movs	r3, #31
   13b46:	18fb      	adds	r3, r7, r3
   13b48:	2200      	movs	r2, #0
   13b4a:	701a      	strb	r2, [r3, #0]
    /* This code assumes the peripheral being used as the console has already
    been opened and configured, and is passed into the task as the task
    parameter.  Cast the task parameter to the correct type. */

    /* Send a welcome message to the user knows they are connected. */
    SerialConsoleWriteString( pcWelcomeMessage);
   13b4c:	4b87      	ldr	r3, [pc, #540]	; (13d6c <vCommandConsoleTask+0x258>)
   13b4e:	0018      	movs	r0, r3
   13b50:	4b87      	ldr	r3, [pc, #540]	; (13d70 <vCommandConsoleTask+0x25c>)
   13b52:	4798      	blx	r3

    for( ;; )
    {
        /* This implementation reads a single character at a time.  Wait in the
        Blocked state until a character is received. */
        int recv = SerialConsoleReadCharacter(&cRxedChar);
   13b54:	2310      	movs	r3, #16
   13b56:	18fb      	adds	r3, r7, r3
   13b58:	0018      	movs	r0, r3
   13b5a:	4b86      	ldr	r3, [pc, #536]	; (13d74 <vCommandConsoleTask+0x260>)
   13b5c:	4798      	blx	r3
   13b5e:	0003      	movs	r3, r0
   13b60:	61bb      	str	r3, [r7, #24]
		if(recv == -1) //If no characters in the buffer, thread goes to sleep for a while
   13b62:	69bb      	ldr	r3, [r7, #24]
   13b64:	3301      	adds	r3, #1
   13b66:	d103      	bne.n	13b70 <vCommandConsoleTask+0x5c>
		{
			vTaskDelay( CLI_TASK_DELAY);
   13b68:	2096      	movs	r0, #150	; 0x96
   13b6a:	4b83      	ldr	r3, [pc, #524]	; (13d78 <vCommandConsoleTask+0x264>)
   13b6c:	4798      	blx	r3
   13b6e:	e7f1      	b.n	13b54 <vCommandConsoleTask+0x40>
		}else if( cRxedChar[0] == '\n' || cRxedChar[0] == '\r'  )
   13b70:	2310      	movs	r3, #16
   13b72:	18fb      	adds	r3, r7, r3
   13b74:	781b      	ldrb	r3, [r3, #0]
   13b76:	2b0a      	cmp	r3, #10
   13b78:	d004      	beq.n	13b84 <vCommandConsoleTask+0x70>
   13b7a:	2310      	movs	r3, #16
   13b7c:	18fb      	adds	r3, r7, r3
   13b7e:	781b      	ldrb	r3, [r3, #0]
   13b80:	2b0d      	cmp	r3, #13
   13b82:	d130      	bne.n	13be6 <vCommandConsoleTask+0xd2>
        {
            /* A newline character was received, so the input command string is
            complete and can be processed.  Transmit a line separator, just to
            make the output easier to read. */
            SerialConsoleWriteString("\r\n");
   13b84:	4b7d      	ldr	r3, [pc, #500]	; (13d7c <vCommandConsoleTask+0x268>)
   13b86:	0018      	movs	r0, r3
   13b88:	4b79      	ldr	r3, [pc, #484]	; (13d70 <vCommandConsoleTask+0x25c>)
   13b8a:	4798      	blx	r3
			//Copy for last command
			isEscapeCode = false; pcEscapeCodePos = 0;
   13b8c:	4b7c      	ldr	r3, [pc, #496]	; (13d80 <vCommandConsoleTask+0x26c>)
   13b8e:	2200      	movs	r2, #0
   13b90:	701a      	strb	r2, [r3, #0]
   13b92:	4b7c      	ldr	r3, [pc, #496]	; (13d84 <vCommandConsoleTask+0x270>)
   13b94:	2200      	movs	r2, #0
   13b96:	701a      	strb	r2, [r3, #0]
			strncpy(pcLastCommand, pcInputString, MAX_INPUT_LENGTH_CLI-1);
   13b98:	497b      	ldr	r1, [pc, #492]	; (13d88 <vCommandConsoleTask+0x274>)
   13b9a:	4b7c      	ldr	r3, [pc, #496]	; (13d8c <vCommandConsoleTask+0x278>)
   13b9c:	220e      	movs	r2, #14
   13b9e:	0018      	movs	r0, r3
   13ba0:	4b7b      	ldr	r3, [pc, #492]	; (13d90 <vCommandConsoleTask+0x27c>)
   13ba2:	4798      	blx	r3
			pcLastCommand[MAX_INPUT_LENGTH_CLI-1] = 0;	//Ensure null termination
   13ba4:	4b79      	ldr	r3, [pc, #484]	; (13d8c <vCommandConsoleTask+0x278>)
   13ba6:	2200      	movs	r2, #0
   13ba8:	739a      	strb	r2, [r3, #14]
            do
            {
                /* Send the command string to the command interpreter.  Any
                output generated by the command interpreter will be placed in the
                pcOutputString buffer. */
                xMoreDataToFollow = FreeRTOS_CLIProcessCommand
   13baa:	497a      	ldr	r1, [pc, #488]	; (13d94 <vCommandConsoleTask+0x280>)
   13bac:	4b76      	ldr	r3, [pc, #472]	; (13d88 <vCommandConsoleTask+0x274>)
   13bae:	2232      	movs	r2, #50	; 0x32
   13bb0:	0018      	movs	r0, r3
   13bb2:	4b79      	ldr	r3, [pc, #484]	; (13d98 <vCommandConsoleTask+0x284>)
   13bb4:	4798      	blx	r3
   13bb6:	0003      	movs	r3, r0
   13bb8:	617b      	str	r3, [r7, #20]
                              );

                /* Write the output generated by the command interpreter to the
                console. */
				//Ensure it is null terminated
				pcOutputString[MAX_OUTPUT_LENGTH_CLI - 1] = 0;
   13bba:	4b76      	ldr	r3, [pc, #472]	; (13d94 <vCommandConsoleTask+0x280>)
   13bbc:	2231      	movs	r2, #49	; 0x31
   13bbe:	2100      	movs	r1, #0
   13bc0:	5499      	strb	r1, [r3, r2]
                SerialConsoleWriteString(pcOutputString);
   13bc2:	4b74      	ldr	r3, [pc, #464]	; (13d94 <vCommandConsoleTask+0x280>)
   13bc4:	0018      	movs	r0, r3
   13bc6:	4b6a      	ldr	r3, [pc, #424]	; (13d70 <vCommandConsoleTask+0x25c>)
   13bc8:	4798      	blx	r3

            } while( xMoreDataToFollow != pdFALSE );
   13bca:	697b      	ldr	r3, [r7, #20]
   13bcc:	2b00      	cmp	r3, #0
   13bce:	d1ec      	bne.n	13baa <vCommandConsoleTask+0x96>

            /* All the strings generated by the input command have been sent.
            Processing of the command is complete.  Clear the input string ready
            to receive the next command. */
            cInputIndex = 0;
   13bd0:	231f      	movs	r3, #31
   13bd2:	18fb      	adds	r3, r7, r3
   13bd4:	2200      	movs	r2, #0
   13bd6:	701a      	strb	r2, [r3, #0]
            memset( pcInputString, 0x00, MAX_INPUT_LENGTH_CLI );
   13bd8:	4b6b      	ldr	r3, [pc, #428]	; (13d88 <vCommandConsoleTask+0x274>)
   13bda:	220f      	movs	r2, #15
   13bdc:	2100      	movs	r1, #0
   13bde:	0018      	movs	r0, r3
   13be0:	4b6e      	ldr	r3, [pc, #440]	; (13d9c <vCommandConsoleTask+0x288>)
   13be2:	4798      	blx	r3
   13be4:	e0b5      	b.n	13d52 <vCommandConsoleTask+0x23e>
        {
		            /* The if() clause performs the processing after a newline character
            is received.  This else clause performs the processing if any other
            character is received. */
		
			if (true == isEscapeCode) {
   13be6:	4b66      	ldr	r3, [pc, #408]	; (13d80 <vCommandConsoleTask+0x26c>)
   13be8:	781b      	ldrb	r3, [r3, #0]
   13bea:	2b00      	cmp	r3, #0
   13bec:	d059      	beq.n	13ca2 <vCommandConsoleTask+0x18e>

				if(pcEscapeCodePos < CLI_PC_ESCAPE_CODE_SIZE) {
   13bee:	4b65      	ldr	r3, [pc, #404]	; (13d84 <vCommandConsoleTask+0x270>)
   13bf0:	781b      	ldrb	r3, [r3, #0]
   13bf2:	2b03      	cmp	r3, #3
   13bf4:	d80c      	bhi.n	13c10 <vCommandConsoleTask+0xfc>
					pcEscapeCodes[pcEscapeCodePos++] = cRxedChar[0];
   13bf6:	4b63      	ldr	r3, [pc, #396]	; (13d84 <vCommandConsoleTask+0x270>)
   13bf8:	781b      	ldrb	r3, [r3, #0]
   13bfa:	1c5a      	adds	r2, r3, #1
   13bfc:	b2d1      	uxtb	r1, r2
   13bfe:	4a61      	ldr	r2, [pc, #388]	; (13d84 <vCommandConsoleTask+0x270>)
   13c00:	7011      	strb	r1, [r2, #0]
   13c02:	001a      	movs	r2, r3
   13c04:	2310      	movs	r3, #16
   13c06:	18fb      	adds	r3, r7, r3
   13c08:	7819      	ldrb	r1, [r3, #0]
   13c0a:	4b65      	ldr	r3, [pc, #404]	; (13da0 <vCommandConsoleTask+0x28c>)
   13c0c:	5499      	strb	r1, [r3, r2]
   13c0e:	e005      	b.n	13c1c <vCommandConsoleTask+0x108>
				}
				else {
					isEscapeCode = false; pcEscapeCodePos = 0;
   13c10:	4b5b      	ldr	r3, [pc, #364]	; (13d80 <vCommandConsoleTask+0x26c>)
   13c12:	2200      	movs	r2, #0
   13c14:	701a      	strb	r2, [r3, #0]
   13c16:	4b5b      	ldr	r3, [pc, #364]	; (13d84 <vCommandConsoleTask+0x270>)
   13c18:	2200      	movs	r2, #0
   13c1a:	701a      	strb	r2, [r3, #0]
				}
			
				if (pcEscapeCodePos >= CLI_PC_MIN_ESCAPE_CODE_SIZE) {
   13c1c:	4b59      	ldr	r3, [pc, #356]	; (13d84 <vCommandConsoleTask+0x270>)
   13c1e:	781b      	ldrb	r3, [r3, #0]
   13c20:	2b01      	cmp	r3, #1
   13c22:	d997      	bls.n	13b54 <vCommandConsoleTask+0x40>
				
					// UP ARROW SHOW LAST COMMAND
					if(strcasecmp(pcEscapeCodes, "oa"))	{
   13c24:	4a5f      	ldr	r2, [pc, #380]	; (13da4 <vCommandConsoleTask+0x290>)
   13c26:	4b5e      	ldr	r3, [pc, #376]	; (13da0 <vCommandConsoleTask+0x28c>)
   13c28:	0011      	movs	r1, r2
   13c2a:	0018      	movs	r0, r3
   13c2c:	4b5e      	ldr	r3, [pc, #376]	; (13da8 <vCommandConsoleTask+0x294>)
   13c2e:	4798      	blx	r3
   13c30:	1e03      	subs	r3, r0, #0
   13c32:	d02f      	beq.n	13c94 <vCommandConsoleTask+0x180>
                            /// Delete current line and add prompt (">")
                            sprintf(pcInputString, "%c[2K\r>", 27);
   13c34:	495d      	ldr	r1, [pc, #372]	; (13dac <vCommandConsoleTask+0x298>)
   13c36:	4b54      	ldr	r3, [pc, #336]	; (13d88 <vCommandConsoleTask+0x274>)
   13c38:	221b      	movs	r2, #27
   13c3a:	0018      	movs	r0, r3
   13c3c:	4b5c      	ldr	r3, [pc, #368]	; (13db0 <vCommandConsoleTask+0x29c>)
   13c3e:	4798      	blx	r3
				            SerialConsoleWriteString(pcInputString);
   13c40:	4b51      	ldr	r3, [pc, #324]	; (13d88 <vCommandConsoleTask+0x274>)
   13c42:	0018      	movs	r0, r3
   13c44:	4b4a      	ldr	r3, [pc, #296]	; (13d70 <vCommandConsoleTask+0x25c>)
   13c46:	4798      	blx	r3
                            /// Clear input buffer
                            cInputIndex = 0;
   13c48:	231f      	movs	r3, #31
   13c4a:	18fb      	adds	r3, r7, r3
   13c4c:	2200      	movs	r2, #0
   13c4e:	701a      	strb	r2, [r3, #0]
                            memset( pcInputString, 0x00, MAX_INPUT_LENGTH_CLI );
   13c50:	4b4d      	ldr	r3, [pc, #308]	; (13d88 <vCommandConsoleTask+0x274>)
   13c52:	220f      	movs	r2, #15
   13c54:	2100      	movs	r1, #0
   13c56:	0018      	movs	r0, r3
   13c58:	4b50      	ldr	r3, [pc, #320]	; (13d9c <vCommandConsoleTask+0x288>)
   13c5a:	4798      	blx	r3
                        /// Send last command
						strncpy(pcInputString, pcLastCommand, MAX_INPUT_LENGTH_CLI - 1); 	
   13c5c:	494b      	ldr	r1, [pc, #300]	; (13d8c <vCommandConsoleTask+0x278>)
   13c5e:	4b4a      	ldr	r3, [pc, #296]	; (13d88 <vCommandConsoleTask+0x274>)
   13c60:	220e      	movs	r2, #14
   13c62:	0018      	movs	r0, r3
   13c64:	4b4a      	ldr	r3, [pc, #296]	; (13d90 <vCommandConsoleTask+0x27c>)
   13c66:	4798      	blx	r3
                        cInputIndex = (strlen(pcInputString) < MAX_INPUT_LENGTH_CLI - 1) ? strlen(pcLastCommand) : MAX_INPUT_LENGTH_CLI - 1;
   13c68:	4b47      	ldr	r3, [pc, #284]	; (13d88 <vCommandConsoleTask+0x274>)
   13c6a:	0018      	movs	r0, r3
   13c6c:	4b51      	ldr	r3, [pc, #324]	; (13db4 <vCommandConsoleTask+0x2a0>)
   13c6e:	4798      	blx	r3
   13c70:	0003      	movs	r3, r0
   13c72:	2b0d      	cmp	r3, #13
   13c74:	d806      	bhi.n	13c84 <vCommandConsoleTask+0x170>
   13c76:	4b45      	ldr	r3, [pc, #276]	; (13d8c <vCommandConsoleTask+0x278>)
   13c78:	0018      	movs	r0, r3
   13c7a:	4b4e      	ldr	r3, [pc, #312]	; (13db4 <vCommandConsoleTask+0x2a0>)
   13c7c:	4798      	blx	r3
   13c7e:	0003      	movs	r3, r0
   13c80:	b2da      	uxtb	r2, r3
   13c82:	e000      	b.n	13c86 <vCommandConsoleTask+0x172>
   13c84:	220e      	movs	r2, #14
   13c86:	231f      	movs	r3, #31
   13c88:	18fb      	adds	r3, r7, r3
   13c8a:	701a      	strb	r2, [r3, #0]
						SerialConsoleWriteString(pcInputString);
   13c8c:	4b3e      	ldr	r3, [pc, #248]	; (13d88 <vCommandConsoleTask+0x274>)
   13c8e:	0018      	movs	r0, r3
   13c90:	4b37      	ldr	r3, [pc, #220]	; (13d70 <vCommandConsoleTask+0x25c>)
   13c92:	4798      	blx	r3
					}
				
					isEscapeCode = false; pcEscapeCodePos = 0;
   13c94:	4b3a      	ldr	r3, [pc, #232]	; (13d80 <vCommandConsoleTask+0x26c>)
   13c96:	2200      	movs	r2, #0
   13c98:	701a      	strb	r2, [r3, #0]
   13c9a:	4b3a      	ldr	r3, [pc, #232]	; (13d84 <vCommandConsoleTask+0x270>)
   13c9c:	2200      	movs	r2, #0
   13c9e:	701a      	strb	r2, [r3, #0]
   13ca0:	e758      	b.n	13b54 <vCommandConsoleTask+0x40>
			}
            /* The if() clause performs the processing after a newline character
            is received.  This else clause performs the processing if any other
            character is received. */

            else if( cRxedChar[0] == '\r' )
   13ca2:	2310      	movs	r3, #16
   13ca4:	18fb      	adds	r3, r7, r3
   13ca6:	781b      	ldrb	r3, [r3, #0]
   13ca8:	2b0d      	cmp	r3, #13
   13caa:	d100      	bne.n	13cae <vCommandConsoleTask+0x19a>
   13cac:	e752      	b.n	13b54 <vCommandConsoleTask+0x40>
            {
                /* Ignore carriage returns. */
            }
            else if( cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE )
   13cae:	2310      	movs	r3, #16
   13cb0:	18fb      	adds	r3, r7, r3
   13cb2:	781b      	ldrb	r3, [r3, #0]
   13cb4:	2b08      	cmp	r3, #8
   13cb6:	d004      	beq.n	13cc2 <vCommandConsoleTask+0x1ae>
   13cb8:	2310      	movs	r3, #16
   13cba:	18fb      	adds	r3, r7, r3
   13cbc:	781b      	ldrb	r3, [r3, #0]
   13cbe:	2b7f      	cmp	r3, #127	; 0x7f
   13cc0:	d11c      	bne.n	13cfc <vCommandConsoleTask+0x1e8>
            {
				char erase[4] = {0x08, 0x20, 0x08, 0x00};
   13cc2:	230c      	movs	r3, #12
   13cc4:	18fb      	adds	r3, r7, r3
   13cc6:	4a3c      	ldr	r2, [pc, #240]	; (13db8 <vCommandConsoleTask+0x2a4>)
   13cc8:	6812      	ldr	r2, [r2, #0]
   13cca:	601a      	str	r2, [r3, #0]
				SerialConsoleWriteString(erase);
   13ccc:	230c      	movs	r3, #12
   13cce:	18fb      	adds	r3, r7, r3
   13cd0:	0018      	movs	r0, r3
   13cd2:	4b27      	ldr	r3, [pc, #156]	; (13d70 <vCommandConsoleTask+0x25c>)
   13cd4:	4798      	blx	r3
                /* Backspace was pressed.  Erase the last character in the input
                buffer - if there are any. */
                if( cInputIndex > 0 )
   13cd6:	231f      	movs	r3, #31
   13cd8:	18fb      	adds	r3, r7, r3
   13cda:	781b      	ldrb	r3, [r3, #0]
   13cdc:	2b00      	cmp	r3, #0
   13cde:	d037      	beq.n	13d50 <vCommandConsoleTask+0x23c>
                {
                    cInputIndex--;
   13ce0:	231f      	movs	r3, #31
   13ce2:	18fb      	adds	r3, r7, r3
   13ce4:	781a      	ldrb	r2, [r3, #0]
   13ce6:	231f      	movs	r3, #31
   13ce8:	18fb      	adds	r3, r7, r3
   13cea:	3a01      	subs	r2, #1
   13cec:	701a      	strb	r2, [r3, #0]
                    pcInputString[ cInputIndex ] = 0;
   13cee:	231f      	movs	r3, #31
   13cf0:	18fb      	adds	r3, r7, r3
   13cf2:	781b      	ldrb	r3, [r3, #0]
   13cf4:	4a24      	ldr	r2, [pc, #144]	; (13d88 <vCommandConsoleTask+0x274>)
   13cf6:	2100      	movs	r1, #0
   13cf8:	54d1      	strb	r1, [r2, r3]
            {
   13cfa:	e029      	b.n	13d50 <vCommandConsoleTask+0x23c>
                }
            }
			// ESC
			else if( cRxedChar[0] == ASCII_ESC) {
   13cfc:	2310      	movs	r3, #16
   13cfe:	18fb      	adds	r3, r7, r3
   13d00:	781b      	ldrb	r3, [r3, #0]
   13d02:	2b1b      	cmp	r3, #27
   13d04:	d106      	bne.n	13d14 <vCommandConsoleTask+0x200>
				isEscapeCode = true; //Next characters will be code arguments
   13d06:	4b1e      	ldr	r3, [pc, #120]	; (13d80 <vCommandConsoleTask+0x26c>)
   13d08:	2201      	movs	r2, #1
   13d0a:	701a      	strb	r2, [r3, #0]
				pcEscapeCodePos = 0;
   13d0c:	4b1d      	ldr	r3, [pc, #116]	; (13d84 <vCommandConsoleTask+0x270>)
   13d0e:	2200      	movs	r2, #0
   13d10:	701a      	strb	r2, [r3, #0]
   13d12:	e71f      	b.n	13b54 <vCommandConsoleTask+0x40>
            {
                /* A character was entered.  It was not a new line, backspace
                or carriage return, so it is accepted as part of the input and
                placed into the input buffer.  When a n is entered the complete
                string will be passed to the command interpreter. */
                if( cInputIndex < MAX_INPUT_LENGTH_CLI )
   13d14:	231f      	movs	r3, #31
   13d16:	18fb      	adds	r3, r7, r3
   13d18:	781b      	ldrb	r3, [r3, #0]
   13d1a:	2b0e      	cmp	r3, #14
   13d1c:	d80e      	bhi.n	13d3c <vCommandConsoleTask+0x228>
                {
                    pcInputString[ cInputIndex ] = cRxedChar[0];
   13d1e:	231f      	movs	r3, #31
   13d20:	18fb      	adds	r3, r7, r3
   13d22:	781b      	ldrb	r3, [r3, #0]
   13d24:	2210      	movs	r2, #16
   13d26:	18ba      	adds	r2, r7, r2
   13d28:	7811      	ldrb	r1, [r2, #0]
   13d2a:	4a17      	ldr	r2, [pc, #92]	; (13d88 <vCommandConsoleTask+0x274>)
   13d2c:	54d1      	strb	r1, [r2, r3]
                    cInputIndex++;
   13d2e:	231f      	movs	r3, #31
   13d30:	18fb      	adds	r3, r7, r3
   13d32:	781a      	ldrb	r2, [r3, #0]
   13d34:	231f      	movs	r3, #31
   13d36:	18fb      	adds	r3, r7, r3
   13d38:	3201      	adds	r2, #1
   13d3a:	701a      	strb	r2, [r3, #0]
                }

					//Order Echo
					cRxedChar[1] = 0;
   13d3c:	2310      	movs	r3, #16
   13d3e:	18fb      	adds	r3, r7, r3
   13d40:	2200      	movs	r2, #0
   13d42:	705a      	strb	r2, [r3, #1]
					SerialConsoleWriteString(&cRxedChar[0]);
   13d44:	2310      	movs	r3, #16
   13d46:	18fb      	adds	r3, r7, r3
   13d48:	0018      	movs	r0, r3
   13d4a:	4b09      	ldr	r3, [pc, #36]	; (13d70 <vCommandConsoleTask+0x25c>)
   13d4c:	4798      	blx	r3
   13d4e:	e701      	b.n	13b54 <vCommandConsoleTask+0x40>
            {
   13d50:	46c0      	nop			; (mov r8, r8)
    {
   13d52:	e6ff      	b.n	13b54 <vCommandConsoleTask+0x40>
   13d54:	00035630 	.word	0x00035630
   13d58:	00017be5 	.word	0x00017be5
   13d5c:	00035670 	.word	0x00035670
   13d60:	00035640 	.word	0x00035640
   13d64:	00035650 	.word	0x00035650
   13d68:	00035660 	.word	0x00035660
   13d6c:	00035460 	.word	0x00035460
   13d70:	0001db09 	.word	0x0001db09
   13d74:	0001dba5 	.word	0x0001dba5
   13d78:	0001beb5 	.word	0x0001beb5
   13d7c:	000355c8 	.word	0x000355c8
   13d80:	20000464 	.word	0x20000464
   13d84:	20000465 	.word	0x20000465
   13d88:	20000478 	.word	0x20000478
   13d8c:	20000468 	.word	0x20000468
   13d90:	0003446b 	.word	0x0003446b
   13d94:	20000488 	.word	0x20000488
   13d98:	00017c55 	.word	0x00017c55
   13d9c:	00034083 	.word	0x00034083
   13da0:	200004bc 	.word	0x200004bc
   13da4:	000355cc 	.word	0x000355cc
   13da8:	00034385 	.word	0x00034385
   13dac:	000355d0 	.word	0x000355d0
   13db0:	00034341 	.word	0x00034341
   13db4:	0003443b 	.word	0x0003443b
   13db8:	000355d8 	.word	0x000355d8

00013dbc <xCliClearTerminalScreen>:
//THIS COMMAND USES vt100 TERMINAL COMMANDS TO CLEAR THE SCREEN ON A TERMINAL PROGRAM LIKE TERA TERM
//SEE http://www.csie.ntu.edu.tw/~r92094/c++/VT100.html for more info
//CLI SPECIFIC COMMANDS
static char bufCli[CLI_MSG_LEN];
BaseType_t xCliClearTerminalScreen( char *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString )
{
   13dbc:	b590      	push	{r4, r7, lr}
   13dbe:	b087      	sub	sp, #28
   13dc0:	af00      	add	r7, sp, #0
   13dc2:	60f8      	str	r0, [r7, #12]
   13dc4:	60b9      	str	r1, [r7, #8]
   13dc6:	607a      	str	r2, [r7, #4]
	char clearScreen = ASCII_ESC;
   13dc8:	2317      	movs	r3, #23
   13dca:	18fb      	adds	r3, r7, r3
   13dcc:	221b      	movs	r2, #27
   13dce:	701a      	strb	r2, [r3, #0]
	snprintf(bufCli, CLI_MSG_LEN - 1, "%c[2J", clearScreen);
   13dd0:	2317      	movs	r3, #23
   13dd2:	18fb      	adds	r3, r7, r3
   13dd4:	781b      	ldrb	r3, [r3, #0]
   13dd6:	4a08      	ldr	r2, [pc, #32]	; (13df8 <xCliClearTerminalScreen+0x3c>)
   13dd8:	4808      	ldr	r0, [pc, #32]	; (13dfc <xCliClearTerminalScreen+0x40>)
   13dda:	210f      	movs	r1, #15
   13ddc:	4c08      	ldr	r4, [pc, #32]	; (13e00 <xCliClearTerminalScreen+0x44>)
   13dde:	47a0      	blx	r4
	snprintf(pcWriteBuffer, xWriteBufferLen, bufCli);
   13de0:	4a06      	ldr	r2, [pc, #24]	; (13dfc <xCliClearTerminalScreen+0x40>)
   13de2:	68b9      	ldr	r1, [r7, #8]
   13de4:	68fb      	ldr	r3, [r7, #12]
   13de6:	0018      	movs	r0, r3
   13de8:	4b05      	ldr	r3, [pc, #20]	; (13e00 <xCliClearTerminalScreen+0x44>)
   13dea:	4798      	blx	r3
	return pdFALSE;
   13dec:	2300      	movs	r3, #0
}
   13dee:	0018      	movs	r0, r3
   13df0:	46bd      	mov	sp, r7
   13df2:	b007      	add	sp, #28
   13df4:	bd90      	pop	{r4, r7, pc}
   13df6:	46c0      	nop			; (mov r8, r8)
   13df8:	000355dc 	.word	0x000355dc
   13dfc:	20000454 	.word	0x20000454
   13e00:	000342dd 	.word	0x000342dd

00013e04 <CLI_OTAU>:



//Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_OTAU( int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString )
{
   13e04:	b580      	push	{r7, lr}
   13e06:	b084      	sub	sp, #16
   13e08:	af00      	add	r7, sp, #0
   13e0a:	60f8      	str	r0, [r7, #12]
   13e0c:	60b9      	str	r1, [r7, #8]
   13e0e:	607a      	str	r2, [r7, #4]
	WifiHandlerSetState(WIFI_DOWNLOAD_INIT);
   13e10:	2002      	movs	r0, #2
   13e12:	4b03      	ldr	r3, [pc, #12]	; (13e20 <CLI_OTAU+0x1c>)
   13e14:	4798      	blx	r3
//	WifiHandlerSetState(WIFI_DOWNLOAD_HANDLE);
return pdFALSE;
   13e16:	2300      	movs	r3, #0
}
   13e18:	0018      	movs	r0, r3
   13e1a:	46bd      	mov	sp, r7
   13e1c:	b004      	add	sp, #16
   13e1e:	bd80      	pop	{r7, pc}
   13e20:	00015b79 	.word	0x00015b79

00013e24 <CLI_ResetDevice>:

//Example CLI Command. Resets system.
BaseType_t CLI_ResetDevice( int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString )
{
   13e24:	b580      	push	{r7, lr}
   13e26:	b084      	sub	sp, #16
   13e28:	af00      	add	r7, sp, #0
   13e2a:	60f8      	str	r0, [r7, #12]
   13e2c:	60b9      	str	r1, [r7, #8]
   13e2e:	607a      	str	r2, [r7, #4]
	system_reset();
   13e30:	4b03      	ldr	r3, [pc, #12]	; (13e40 <CLI_ResetDevice+0x1c>)
   13e32:	4798      	blx	r3
	return pdFALSE;
   13e34:	2300      	movs	r3, #0
}
   13e36:	0018      	movs	r0, r3
   13e38:	46bd      	mov	sp, r7
   13e3a:	b004      	add	sp, #16
   13e3c:	bd80      	pop	{r7, pc}
   13e3e:	46c0      	nop			; (mov r8, r8)
   13e40:	00013b01 	.word	0x00013b01

00013e44 <CLI_NeotrellisSetLed>:
* @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
				for more information on how to use the FreeRTOS CLI.

*****************************************************************************/
BaseType_t CLI_NeotrellisSetLed( int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString )
{
   13e44:	b580      	push	{r7, lr}
   13e46:	b084      	sub	sp, #16
   13e48:	af00      	add	r7, sp, #0
   13e4a:	60f8      	str	r0, [r7, #12]
   13e4c:	60b9      	str	r1, [r7, #8]
   13e4e:	607a      	str	r2, [r7, #4]
	snprintf(pcWriteBuffer,xWriteBufferLen, "Students to fill out!");
   13e50:	4a05      	ldr	r2, [pc, #20]	; (13e68 <CLI_NeotrellisSetLed+0x24>)
   13e52:	68b9      	ldr	r1, [r7, #8]
   13e54:	68fb      	ldr	r3, [r7, #12]
   13e56:	0018      	movs	r0, r3
   13e58:	4b04      	ldr	r3, [pc, #16]	; (13e6c <CLI_NeotrellisSetLed+0x28>)
   13e5a:	4798      	blx	r3
	//Check code SeesawSetLed and SeesawSetLed
	//How do you get parameters? Checl link in comments!
	//Check that the input is sanitized: Key between 0-15, RGB between 0-255. Print if there is an error!
	//return pdFalse to tell the FreeRTOS CLI your call is done and does not need to call again.
	//This function expects 4 arguments inside pcCommandString: key, R, G, B.
	return pdFALSE;
   13e5c:	2300      	movs	r3, #0
}
   13e5e:	0018      	movs	r0, r3
   13e60:	46bd      	mov	sp, r7
   13e62:	b004      	add	sp, #16
   13e64:	bd80      	pop	{r7, pc}
   13e66:	46c0      	nop			; (mov r8, r8)
   13e68:	000355e4 	.word	0x000355e4
   13e6c:	000342dd 	.word	0x000342dd

00013e70 <CLI_NeotrellProcessButtonBuffer>:
* @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
				for more information on how to use the FreeRTOS CLI.

*****************************************************************************/
BaseType_t CLI_NeotrellProcessButtonBuffer( int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString )
{
   13e70:	b590      	push	{r4, r7, lr}
   13e72:	b099      	sub	sp, #100	; 0x64
   13e74:	af00      	add	r7, sp, #0
   13e76:	60f8      	str	r0, [r7, #12]
   13e78:	60b9      	str	r1, [r7, #8]
   13e7a:	607a      	str	r2, [r7, #4]
	//snprintf(pcWriteBuffer,xWriteBufferLen, "count: %d\num_req_eve:%d\t\n",count,num_req_eve);
	//Print to pcWriteBuffer in order.
	//If the string is too long to print, print what you can.
	//The function you write will be useful in the future.
	uint8_t buffer[64];
	uint8_t count = SeesawGetKeypadCount();
   13e7c:	235f      	movs	r3, #95	; 0x5f
   13e7e:	18fc      	adds	r4, r7, r3
   13e80:	4b36      	ldr	r3, [pc, #216]	; (13f5c <CLI_NeotrellProcessButtonBuffer+0xec>)
   13e82:	4798      	blx	r3
   13e84:	0003      	movs	r3, r0
   13e86:	7023      	strb	r3, [r4, #0]
	if(count >= 1)
   13e88:	235f      	movs	r3, #95	; 0x5f
   13e8a:	18fb      	adds	r3, r7, r3
   13e8c:	781b      	ldrb	r3, [r3, #0]
   13e8e:	2b00      	cmp	r3, #0
   13e90:	d05d      	beq.n	13f4e <CLI_NeotrellProcessButtonBuffer+0xde>
	{
	int32_t res = SeesawReadKeypad(buffer,1);
   13e92:	2310      	movs	r3, #16
   13e94:	18fb      	adds	r3, r7, r3
   13e96:	2101      	movs	r1, #1
   13e98:	0018      	movs	r0, r3
   13e9a:	4b31      	ldr	r3, [pc, #196]	; (13f60 <CLI_NeotrellProcessButtonBuffer+0xf0>)
   13e9c:	4798      	blx	r3
   13e9e:	0003      	movs	r3, r0
   13ea0:	65bb      	str	r3, [r7, #88]	; 0x58
	if(res==0)
   13ea2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   13ea4:	2b00      	cmp	r3, #0
   13ea6:	d150      	bne.n	13f4a <CLI_NeotrellProcessButtonBuffer+0xda>
		{
			uint8_t pos,press;
			press = buffer[0] & 0x3;
   13ea8:	2310      	movs	r3, #16
   13eaa:	18fb      	adds	r3, r7, r3
   13eac:	781a      	ldrb	r2, [r3, #0]
   13eae:	2357      	movs	r3, #87	; 0x57
   13eb0:	18fb      	adds	r3, r7, r3
   13eb2:	2103      	movs	r1, #3
   13eb4:	400a      	ands	r2, r1
   13eb6:	701a      	strb	r2, [r3, #0]
			pos =  buffer[0]>>2;
   13eb8:	2310      	movs	r3, #16
   13eba:	18fb      	adds	r3, r7, r3
   13ebc:	781a      	ldrb	r2, [r3, #0]
   13ebe:	2356      	movs	r3, #86	; 0x56
   13ec0:	18fb      	adds	r3, r7, r3
   13ec2:	0892      	lsrs	r2, r2, #2
   13ec4:	701a      	strb	r2, [r3, #0]
			int num = NEO_TRELLIS_SEESAW_KEY(pos);
   13ec6:	2356      	movs	r3, #86	; 0x56
   13ec8:	18fb      	adds	r3, r7, r3
   13eca:	781b      	ldrb	r3, [r3, #0]
   13ecc:	08db      	lsrs	r3, r3, #3
   13ece:	b2db      	uxtb	r3, r3
   13ed0:	009a      	lsls	r2, r3, #2
   13ed2:	2356      	movs	r3, #86	; 0x56
   13ed4:	18fb      	adds	r3, r7, r3
   13ed6:	781b      	ldrb	r3, [r3, #0]
   13ed8:	2107      	movs	r1, #7
   13eda:	400b      	ands	r3, r1
   13edc:	18d3      	adds	r3, r2, r3
   13ede:	653b      	str	r3, [r7, #80]	; 0x50
			if(press == 0x2){
   13ee0:	2357      	movs	r3, #87	; 0x57
   13ee2:	18fb      	adds	r3, r7, r3
   13ee4:	781b      	ldrb	r3, [r3, #0]
   13ee6:	2b02      	cmp	r3, #2
   13ee8:	d115      	bne.n	13f16 <CLI_NeotrellProcessButtonBuffer+0xa6>
				snprintf( pcWriteBuffer, xWriteBufferLen, "Button #%d is released\r\n",NEO_TRELLIS_SEESAW_KEY(num));
   13eea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   13eec:	2b00      	cmp	r3, #0
   13eee:	da00      	bge.n	13ef2 <CLI_NeotrellProcessButtonBuffer+0x82>
   13ef0:	3307      	adds	r3, #7
   13ef2:	10db      	asrs	r3, r3, #3
   13ef4:	009a      	lsls	r2, r3, #2
   13ef6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   13ef8:	491a      	ldr	r1, [pc, #104]	; (13f64 <CLI_NeotrellProcessButtonBuffer+0xf4>)
   13efa:	400b      	ands	r3, r1
   13efc:	d504      	bpl.n	13f08 <CLI_NeotrellProcessButtonBuffer+0x98>
   13efe:	3b01      	subs	r3, #1
   13f00:	2108      	movs	r1, #8
   13f02:	4249      	negs	r1, r1
   13f04:	430b      	orrs	r3, r1
   13f06:	3301      	adds	r3, #1
   13f08:	18d3      	adds	r3, r2, r3
   13f0a:	4a17      	ldr	r2, [pc, #92]	; (13f68 <CLI_NeotrellProcessButtonBuffer+0xf8>)
   13f0c:	68b9      	ldr	r1, [r7, #8]
   13f0e:	68f8      	ldr	r0, [r7, #12]
   13f10:	4c16      	ldr	r4, [pc, #88]	; (13f6c <CLI_NeotrellProcessButtonBuffer+0xfc>)
   13f12:	47a0      	blx	r4
   13f14:	e019      	b.n	13f4a <CLI_NeotrellProcessButtonBuffer+0xda>
			}
			else if(press == 0x3){
   13f16:	2357      	movs	r3, #87	; 0x57
   13f18:	18fb      	adds	r3, r7, r3
   13f1a:	781b      	ldrb	r3, [r3, #0]
   13f1c:	2b03      	cmp	r3, #3
   13f1e:	d114      	bne.n	13f4a <CLI_NeotrellProcessButtonBuffer+0xda>
				snprintf( pcWriteBuffer, xWriteBufferLen, "Button #%d is pressed\r\n",NEO_TRELLIS_SEESAW_KEY(num));
   13f20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   13f22:	2b00      	cmp	r3, #0
   13f24:	da00      	bge.n	13f28 <CLI_NeotrellProcessButtonBuffer+0xb8>
   13f26:	3307      	adds	r3, #7
   13f28:	10db      	asrs	r3, r3, #3
   13f2a:	009a      	lsls	r2, r3, #2
   13f2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   13f2e:	490d      	ldr	r1, [pc, #52]	; (13f64 <CLI_NeotrellProcessButtonBuffer+0xf4>)
   13f30:	400b      	ands	r3, r1
   13f32:	d504      	bpl.n	13f3e <CLI_NeotrellProcessButtonBuffer+0xce>
   13f34:	3b01      	subs	r3, #1
   13f36:	2108      	movs	r1, #8
   13f38:	4249      	negs	r1, r1
   13f3a:	430b      	orrs	r3, r1
   13f3c:	3301      	adds	r3, #1
   13f3e:	18d3      	adds	r3, r2, r3
   13f40:	4a0b      	ldr	r2, [pc, #44]	; (13f70 <CLI_NeotrellProcessButtonBuffer+0x100>)
   13f42:	68b9      	ldr	r1, [r7, #8]
   13f44:	68f8      	ldr	r0, [r7, #12]
   13f46:	4c09      	ldr	r4, [pc, #36]	; (13f6c <CLI_NeotrellProcessButtonBuffer+0xfc>)
   13f48:	47a0      	blx	r4
			}
		}
		return pdTRUE;
   13f4a:	2301      	movs	r3, #1
   13f4c:	e002      	b.n	13f54 <CLI_NeotrellProcessButtonBuffer+0xe4>
	}
	else
	{
	pcWriteBuffer = 0;
   13f4e:	2300      	movs	r3, #0
   13f50:	60fb      	str	r3, [r7, #12]
		return pdFALSE;
   13f52:	2300      	movs	r3, #0
	}
}
   13f54:	0018      	movs	r0, r3
   13f56:	46bd      	mov	sp, r7
   13f58:	b019      	add	sp, #100	; 0x64
   13f5a:	bd90      	pop	{r4, r7, pc}
   13f5c:	00016e89 	.word	0x00016e89
   13f60:	00016ef1 	.word	0x00016ef1
   13f64:	80000007 	.word	0x80000007
   13f68:	000355fc 	.word	0x000355fc
   13f6c:	000342dd 	.word	0x000342dd
   13f70:	00035618 	.word	0x00035618

00013f74 <vControlHandlerTask>:
* @param[in]	Parameters passed when task is initialized. In this case we can ignore them!
* @return		Should not return! This is a task defining function.
* @note         
*****************************************************************************/
void vControlHandlerTask( void *pvParameters )
{
   13f74:	b580      	push	{r7, lr}
   13f76:	b088      	sub	sp, #32
   13f78:	af00      	add	r7, sp, #0
   13f7a:	6078      	str	r0, [r7, #4]
	SerialConsoleWriteString("ESE516 - Control Init Code\r\n");
   13f7c:	4b71      	ldr	r3, [pc, #452]	; (14144 <vControlHandlerTask+0x1d0>)
   13f7e:	0018      	movs	r0, r3
   13f80:	4b71      	ldr	r3, [pc, #452]	; (14148 <vControlHandlerTask+0x1d4>)
   13f82:	4798      	blx	r3

	//Initialize Queues
	xQueueGameBufferIn = xQueueCreate( 2, sizeof( struct GameDataPacket ) );
   13f84:	2200      	movs	r2, #0
   13f86:	2114      	movs	r1, #20
   13f88:	2002      	movs	r0, #2
   13f8a:	4b70      	ldr	r3, [pc, #448]	; (1414c <vControlHandlerTask+0x1d8>)
   13f8c:	4798      	blx	r3
   13f8e:	0002      	movs	r2, r0
   13f90:	4b6f      	ldr	r3, [pc, #444]	; (14150 <vControlHandlerTask+0x1dc>)
   13f92:	601a      	str	r2, [r3, #0]
	xQueueRgbColorBuffer = xQueueCreate( 2, sizeof( struct RgbColorPacket ) );
   13f94:	2200      	movs	r2, #0
   13f96:	2103      	movs	r1, #3
   13f98:	2002      	movs	r0, #2
   13f9a:	4b6c      	ldr	r3, [pc, #432]	; (1414c <vControlHandlerTask+0x1d8>)
   13f9c:	4798      	blx	r3
   13f9e:	0002      	movs	r2, r0
   13fa0:	4b6c      	ldr	r3, [pc, #432]	; (14154 <vControlHandlerTask+0x1e0>)
   13fa2:	601a      	str	r2, [r3, #0]
	xQueueStatusBuffer  = xQueueCreate( 5, sizeof( uint8_t ) );
   13fa4:	2200      	movs	r2, #0
   13fa6:	2101      	movs	r1, #1
   13fa8:	2005      	movs	r0, #5
   13faa:	4b68      	ldr	r3, [pc, #416]	; (1414c <vControlHandlerTask+0x1d8>)
   13fac:	4798      	blx	r3
   13fae:	0002      	movs	r2, r0
   13fb0:	4b69      	ldr	r3, [pc, #420]	; (14158 <vControlHandlerTask+0x1e4>)
   13fb2:	601a      	str	r2, [r3, #0]

	if(xQueueGameBufferIn == NULL || xQueueRgbColorBuffer == NULL || xQueueStatusBuffer==NULL){
   13fb4:	4b66      	ldr	r3, [pc, #408]	; (14150 <vControlHandlerTask+0x1dc>)
   13fb6:	681b      	ldr	r3, [r3, #0]
   13fb8:	2b00      	cmp	r3, #0
   13fba:	d007      	beq.n	13fcc <vControlHandlerTask+0x58>
   13fbc:	4b65      	ldr	r3, [pc, #404]	; (14154 <vControlHandlerTask+0x1e0>)
   13fbe:	681b      	ldr	r3, [r3, #0]
   13fc0:	2b00      	cmp	r3, #0
   13fc2:	d003      	beq.n	13fcc <vControlHandlerTask+0x58>
   13fc4:	4b64      	ldr	r3, [pc, #400]	; (14158 <vControlHandlerTask+0x1e4>)
   13fc6:	681b      	ldr	r3, [r3, #0]
   13fc8:	2b00      	cmp	r3, #0
   13fca:	d103      	bne.n	13fd4 <vControlHandlerTask+0x60>
		SerialConsoleWriteString("ERROR Initializing Control Data queues!\r\n");
   13fcc:	4b63      	ldr	r3, [pc, #396]	; (1415c <vControlHandlerTask+0x1e8>)
   13fce:	0018      	movs	r0, r3
   13fd0:	4b5d      	ldr	r3, [pc, #372]	; (14148 <vControlHandlerTask+0x1d4>)
   13fd2:	4798      	blx	r3
	}
	controlState = CONTROL_WAIT_FOR_STATUS; //Initial state
   13fd4:	4b62      	ldr	r3, [pc, #392]	; (14160 <vControlHandlerTask+0x1ec>)
   13fd6:	2200      	movs	r2, #0
   13fd8:	701a      	strb	r2, [r3, #0]
	
	uint8_t gamestatus;
	while(1)
	{
		switch(controlState)
   13fda:	4b61      	ldr	r3, [pc, #388]	; (14160 <vControlHandlerTask+0x1ec>)
   13fdc:	781b      	ldrb	r3, [r3, #0]
   13fde:	2b01      	cmp	r3, #1
   13fe0:	d045      	beq.n	1406e <vControlHandlerTask+0xfa>
   13fe2:	dc02      	bgt.n	13fea <vControlHandlerTask+0x76>
   13fe4:	2b00      	cmp	r3, #0
   13fe6:	d007      	beq.n	13ff8 <vControlHandlerTask+0x84>
   13fe8:	e09f      	b.n	1412a <vControlHandlerTask+0x1b6>
   13fea:	2b02      	cmp	r3, #2
   13fec:	d100      	bne.n	13ff0 <vControlHandlerTask+0x7c>
   13fee:	e070      	b.n	140d2 <vControlHandlerTask+0x15e>
   13ff0:	2b03      	cmp	r3, #3
   13ff2:	d100      	bne.n	13ff6 <vControlHandlerTask+0x82>
   13ff4:	e09d      	b.n	14132 <vControlHandlerTask+0x1be>
   13ff6:	e098      	b.n	1412a <vControlHandlerTask+0x1b6>
		{
			case (CONTROL_WAIT_FOR_STATUS):
			{	//Should set the UI to ignore button presses and should wait until there is a message from the server with a new play.
					
				xQueueReceive( xQueueStatusBuffer , &gamestatus, 10 );
   13ff8:	4b57      	ldr	r3, [pc, #348]	; (14158 <vControlHandlerTask+0x1e4>)
   13ffa:	681b      	ldr	r3, [r3, #0]
   13ffc:	221f      	movs	r2, #31
   13ffe:	18b9      	adds	r1, r7, r2
   14000:	220a      	movs	r2, #10
   14002:	0018      	movs	r0, r3
   14004:	4b57      	ldr	r3, [pc, #348]	; (14164 <vControlHandlerTask+0x1f0>)
   14006:	4798      	blx	r3
				switch (gamestatus){
   14008:	231f      	movs	r3, #31
   1400a:	18fb      	adds	r3, r7, r3
   1400c:	781b      	ldrb	r3, [r3, #0]
   1400e:	2b02      	cmp	r3, #2
   14010:	d00e      	beq.n	14030 <vControlHandlerTask+0xbc>
   14012:	dc02      	bgt.n	1401a <vControlHandlerTask+0xa6>
   14014:	2b01      	cmp	r3, #1
   14016:	d005      	beq.n	14024 <vControlHandlerTask+0xb0>
   14018:	e01c      	b.n	14054 <vControlHandlerTask+0xe0>
   1401a:	2b03      	cmp	r3, #3
   1401c:	d00e      	beq.n	1403c <vControlHandlerTask+0xc8>
   1401e:	2b04      	cmp	r3, #4
   14020:	d012      	beq.n	14048 <vControlHandlerTask+0xd4>
   14022:	e017      	b.n	14054 <vControlHandlerTask+0xe0>
// 							break;
// 						}
					case P2_turn:
					{
						#ifdef PLAYER1
							MicroOLEDdrawWait();
   14024:	4b50      	ldr	r3, [pc, #320]	; (14168 <vControlHandlerTask+0x1f4>)
   14026:	4798      	blx	r3
							controlState = CONTROL_WAIT_FOR_STATUS;
   14028:	4b4d      	ldr	r3, [pc, #308]	; (14160 <vControlHandlerTask+0x1ec>)
   1402a:	2200      	movs	r2, #0
   1402c:	701a      	strb	r2, [r3, #0]
						#else
							MicroOLEDdrawWait();
							controlState = CONTROL_WAIT_FOR_GAME;
						#endif
						break;							
   1402e:	e015      	b.n	1405c <vControlHandlerTask+0xe8>
					}
					case P1_turn:{	// OLED PRINT YOUR TURN
						#ifdef PLAYER1
							//start to receive MQTT msg from P2
							MicroOLEDdrawWait();
   14030:	4b4d      	ldr	r3, [pc, #308]	; (14168 <vControlHandlerTask+0x1f4>)
   14032:	4798      	blx	r3
							controlState = CONTROL_WAIT_FOR_GAME;
   14034:	4b4a      	ldr	r3, [pc, #296]	; (14160 <vControlHandlerTask+0x1ec>)
   14036:	2201      	movs	r2, #1
   14038:	701a      	strb	r2, [r3, #0]
						#else
							MicroOLEDdrawWait();
							controlState = CONTROL_WAIT_FOR_STATUS;
						#endif
						break;
   1403a:	e00f      	b.n	1405c <vControlHandlerTask+0xe8>
					}
						
					case P1_Lose:{
					#ifdef PLAYER1
					//OLED Display Lose
					MicroOLEDdrawLoser();
   1403c:	4b4b      	ldr	r3, [pc, #300]	; (1416c <vControlHandlerTask+0x1f8>)
   1403e:	4798      	blx	r3
					#else
					//OLED Display Win
					MicroOLEDdrawWinner();
					#endif
						
					controlState = CONTROL_END_GAME;
   14040:	4b47      	ldr	r3, [pc, #284]	; (14160 <vControlHandlerTask+0x1ec>)
   14042:	2203      	movs	r2, #3
   14044:	701a      	strb	r2, [r3, #0]
					break;
   14046:	e009      	b.n	1405c <vControlHandlerTask+0xe8>
					}
					case P2_Lose:{
					#ifdef PLAYER1
					//OLED Display Win
					MicroOLEDdrawWinner();
   14048:	4b49      	ldr	r3, [pc, #292]	; (14170 <vControlHandlerTask+0x1fc>)
   1404a:	4798      	blx	r3
					#else
					//OLED Display Lose
					MicroOLEDdrawLoser();
					#endif
					controlState = CONTROL_END_GAME;
   1404c:	4b44      	ldr	r3, [pc, #272]	; (14160 <vControlHandlerTask+0x1ec>)
   1404e:	2203      	movs	r2, #3
   14050:	701a      	strb	r2, [r3, #0]
					break;
   14052:	e003      	b.n	1405c <vControlHandlerTask+0xe8>
					}
					default:{
					controlState = CONTROL_WAIT_FOR_STATUS;		
   14054:	4b42      	ldr	r3, [pc, #264]	; (14160 <vControlHandlerTask+0x1ec>)
   14056:	2200      	movs	r2, #0
   14058:	701a      	strb	r2, [r3, #0]
					break;
   1405a:	46c0      	nop			; (mov r8, r8)
					}
				}
			}
			//check if the game has already ended
			if (controlState == CONTROL_END_GAME){
   1405c:	4b40      	ldr	r3, [pc, #256]	; (14160 <vControlHandlerTask+0x1ec>)
   1405e:	781b      	ldrb	r3, [r3, #0]
   14060:	2b03      	cmp	r3, #3
   14062:	d104      	bne.n	1406e <vControlHandlerTask+0xfa>
				SerialConsoleWriteString("GAME END! Please reset\r\n");
   14064:	4b43      	ldr	r3, [pc, #268]	; (14174 <vControlHandlerTask+0x200>)
   14066:	0018      	movs	r0, r3
   14068:	4b37      	ldr	r3, [pc, #220]	; (14148 <vControlHandlerTask+0x1d4>)
   1406a:	4798      	blx	r3
				break;
   1406c:	e066      	b.n	1413c <vControlHandlerTask+0x1c8>
			
			
			case (CONTROL_WAIT_FOR_GAME):
			{	//Should set the UI to ignore button presses and should wait until there is a message from the server with a new play.
				//checking if the status updated
				xQueueReceive( xQueueStatusBuffer , &gamestatus, 10 );
   1406e:	4b3a      	ldr	r3, [pc, #232]	; (14158 <vControlHandlerTask+0x1e4>)
   14070:	681b      	ldr	r3, [r3, #0]
   14072:	221f      	movs	r2, #31
   14074:	18b9      	adds	r1, r7, r2
   14076:	220a      	movs	r2, #10
   14078:	0018      	movs	r0, r3
   1407a:	4b3a      	ldr	r3, [pc, #232]	; (14164 <vControlHandlerTask+0x1f0>)
   1407c:	4798      	blx	r3
				if (gamestatus!=P2_turn && gamestatus!=P1_turn){
   1407e:	231f      	movs	r3, #31
   14080:	18fb      	adds	r3, r7, r3
   14082:	781b      	ldrb	r3, [r3, #0]
   14084:	2b01      	cmp	r3, #1
   14086:	d008      	beq.n	1409a <vControlHandlerTask+0x126>
   14088:	231f      	movs	r3, #31
   1408a:	18fb      	adds	r3, r7, r3
   1408c:	781b      	ldrb	r3, [r3, #0]
   1408e:	2b02      	cmp	r3, #2
   14090:	d003      	beq.n	1409a <vControlHandlerTask+0x126>
					controlState = CONTROL_WAIT_FOR_STATUS;
   14092:	4b33      	ldr	r3, [pc, #204]	; (14160 <vControlHandlerTask+0x1ec>)
   14094:	2200      	movs	r2, #0
   14096:	701a      	strb	r2, [r3, #0]
					break;
   14098:	e050      	b.n	1413c <vControlHandlerTask+0x1c8>
				}
				//do the task
				struct GameDataPacket gamePacketIn;
				if(pdPASS == xQueueReceive( xQueueGameBufferIn , &gamePacketIn, 10 ))
   1409a:	4b2d      	ldr	r3, [pc, #180]	; (14150 <vControlHandlerTask+0x1dc>)
   1409c:	681b      	ldr	r3, [r3, #0]
   1409e:	2208      	movs	r2, #8
   140a0:	18b9      	adds	r1, r7, r2
   140a2:	220a      	movs	r2, #10
   140a4:	0018      	movs	r0, r3
   140a6:	4b2f      	ldr	r3, [pc, #188]	; (14164 <vControlHandlerTask+0x1f0>)
   140a8:	4798      	blx	r3
   140aa:	0003      	movs	r3, r0
   140ac:	2b01      	cmp	r3, #1
   140ae:	d142      	bne.n	14136 <vControlHandlerTask+0x1c2>
				{
					LogMessage(LOG_DEBUG_LVL, "Control Thread: Consumed game packet!\r\n");
   140b0:	4b31      	ldr	r3, [pc, #196]	; (14178 <vControlHandlerTask+0x204>)
   140b2:	0019      	movs	r1, r3
   140b4:	2001      	movs	r0, #1
   140b6:	4b31      	ldr	r3, [pc, #196]	; (1417c <vControlHandlerTask+0x208>)
   140b8:	4798      	blx	r3
					MicroOLEDdrawTurns();
   140ba:	4b31      	ldr	r3, [pc, #196]	; (14180 <vControlHandlerTask+0x20c>)
   140bc:	4798      	blx	r3
					UiOrderShowMoves(&gamePacketIn);
   140be:	2308      	movs	r3, #8
   140c0:	18fb      	adds	r3, r7, r3
   140c2:	0018      	movs	r0, r3
   140c4:	4b2f      	ldr	r3, [pc, #188]	; (14184 <vControlHandlerTask+0x210>)
   140c6:	4798      	blx	r3
					controlState = CONTROL_PLAYING_MOVE;
   140c8:	4b25      	ldr	r3, [pc, #148]	; (14160 <vControlHandlerTask+0x1ec>)
   140ca:	2202      	movs	r2, #2
   140cc:	701a      	strb	r2, [r3, #0]
				}
				break;
   140ce:	46c0      	nop			; (mov r8, r8)
   140d0:	e031      	b.n	14136 <vControlHandlerTask+0x1c2>
			
			case (CONTROL_PLAYING_MOVE):
			{	//Should wait until the UI thread has showed the move AND comes back with the play from the user. Should go back to CONTROL_WAIT_FOR_GAME
				//after posting the game to MQTT
				//checking if the status updated
				xQueueReceive( xQueueStatusBuffer , &gamestatus, 10 );
   140d2:	4b21      	ldr	r3, [pc, #132]	; (14158 <vControlHandlerTask+0x1e4>)
   140d4:	681b      	ldr	r3, [r3, #0]
   140d6:	221f      	movs	r2, #31
   140d8:	18b9      	adds	r1, r7, r2
   140da:	220a      	movs	r2, #10
   140dc:	0018      	movs	r0, r3
   140de:	4b21      	ldr	r3, [pc, #132]	; (14164 <vControlHandlerTask+0x1f0>)
   140e0:	4798      	blx	r3
				if (gamestatus!=P2_turn && gamestatus!=P1_turn){
   140e2:	231f      	movs	r3, #31
   140e4:	18fb      	adds	r3, r7, r3
   140e6:	781b      	ldrb	r3, [r3, #0]
   140e8:	2b01      	cmp	r3, #1
   140ea:	d008      	beq.n	140fe <vControlHandlerTask+0x18a>
   140ec:	231f      	movs	r3, #31
   140ee:	18fb      	adds	r3, r7, r3
   140f0:	781b      	ldrb	r3, [r3, #0]
   140f2:	2b02      	cmp	r3, #2
   140f4:	d003      	beq.n	140fe <vControlHandlerTask+0x18a>
					controlState = CONTROL_WAIT_FOR_STATUS;
   140f6:	4b1a      	ldr	r3, [pc, #104]	; (14160 <vControlHandlerTask+0x1ec>)
   140f8:	2200      	movs	r2, #0
   140fa:	701a      	strb	r2, [r3, #0]
					break;
   140fc:	e01e      	b.n	1413c <vControlHandlerTask+0x1c8>
				}
				//do the task
				if(UiPlayIsDone() == true)
   140fe:	4b22      	ldr	r3, [pc, #136]	; (14188 <vControlHandlerTask+0x214>)
   14100:	4798      	blx	r3
   14102:	1e03      	subs	r3, r0, #0
   14104:	d019      	beq.n	1413a <vControlHandlerTask+0x1c6>
				{
					//Send back local game packet
					if( pdTRUE != WifiAddGameDataToQueue(UiGetGamePacketOut()))
   14106:	4b21      	ldr	r3, [pc, #132]	; (1418c <vControlHandlerTask+0x218>)
   14108:	4798      	blx	r3
   1410a:	0003      	movs	r3, r0
   1410c:	0018      	movs	r0, r3
   1410e:	4b20      	ldr	r3, [pc, #128]	; (14190 <vControlHandlerTask+0x21c>)
   14110:	4798      	blx	r3
   14112:	0003      	movs	r3, r0
   14114:	2b01      	cmp	r3, #1
   14116:	d004      	beq.n	14122 <vControlHandlerTask+0x1ae>
					{
						LogMessage(LOG_DEBUG_LVL, "Control Thread: Could not send game packet!\r\n");
   14118:	4b1e      	ldr	r3, [pc, #120]	; (14194 <vControlHandlerTask+0x220>)
   1411a:	0019      	movs	r1, r3
   1411c:	2001      	movs	r0, #1
   1411e:	4b17      	ldr	r3, [pc, #92]	; (1417c <vControlHandlerTask+0x208>)
   14120:	4798      	blx	r3
					}
					controlState = CONTROL_WAIT_FOR_STATUS;
   14122:	4b0f      	ldr	r3, [pc, #60]	; (14160 <vControlHandlerTask+0x1ec>)
   14124:	2200      	movs	r2, #0
   14126:	701a      	strb	r2, [r3, #0]
				}
				break;
   14128:	e007      	b.n	1413a <vControlHandlerTask+0x1c6>

				break;
			}
			
			default:
				controlState = CONTROL_WAIT_FOR_STATUS;
   1412a:	4b0d      	ldr	r3, [pc, #52]	; (14160 <vControlHandlerTask+0x1ec>)
   1412c:	2200      	movs	r2, #0
   1412e:	701a      	strb	r2, [r3, #0]
   14130:	e004      	b.n	1413c <vControlHandlerTask+0x1c8>
				break;
   14132:	46c0      	nop			; (mov r8, r8)
   14134:	e002      	b.n	1413c <vControlHandlerTask+0x1c8>
				break;
   14136:	46c0      	nop			; (mov r8, r8)
   14138:	e000      	b.n	1413c <vControlHandlerTask+0x1c8>
				break;
   1413a:	46c0      	nop			; (mov r8, r8)
		}
	vTaskDelay(5);
   1413c:	2005      	movs	r0, #5
   1413e:	4b16      	ldr	r3, [pc, #88]	; (14198 <vControlHandlerTask+0x224>)
   14140:	4798      	blx	r3
		switch(controlState)
   14142:	e74a      	b.n	13fda <vControlHandlerTask+0x66>
   14144:	00035680 	.word	0x00035680
   14148:	0001db09 	.word	0x0001db09
   1414c:	0001a1a9 	.word	0x0001a1a9
   14150:	200004c0 	.word	0x200004c0
   14154:	200004c4 	.word	0x200004c4
   14158:	200004c8 	.word	0x200004c8
   1415c:	000356a0 	.word	0x000356a0
   14160:	20004210 	.word	0x20004210
   14164:	0001ad09 	.word	0x0001ad09
   14168:	00016d45 	.word	0x00016d45
   1416c:	00016d0d 	.word	0x00016d0d
   14170:	00016cf1 	.word	0x00016cf1
   14174:	000356cc 	.word	0x000356cc
   14178:	000356e8 	.word	0x000356e8
   1417c:	0001dbf5 	.word	0x0001dbf5
   14180:	00016d29 	.word	0x00016d29
   14184:	00014561 	.word	0x00014561
   14188:	0001459d 	.word	0x0001459d
   1418c:	000145b1 	.word	0x000145b1
   14190:	00015bad 	.word	0x00015bad
   14194:	00035710 	.word	0x00035710
   14198:	0001beb5 	.word	0x0001beb5

0001419c <ControlAddGameData>:
* @return		Returns pdTrue if data can be added to queue, 0 if queue is full
* @note         

*****************************************************************************/
int ControlAddGameData(struct GameDataPacket *gameIn)
{
   1419c:	b590      	push	{r4, r7, lr}
   1419e:	b085      	sub	sp, #20
   141a0:	af00      	add	r7, sp, #0
   141a2:	6078      	str	r0, [r7, #4]
	int error = xQueueSend(xQueueGameBufferIn , gameIn, ( TickType_t ) 10);
   141a4:	4b06      	ldr	r3, [pc, #24]	; (141c0 <ControlAddGameData+0x24>)
   141a6:	6818      	ldr	r0, [r3, #0]
   141a8:	6879      	ldr	r1, [r7, #4]
   141aa:	2300      	movs	r3, #0
   141ac:	220a      	movs	r2, #10
   141ae:	4c05      	ldr	r4, [pc, #20]	; (141c4 <ControlAddGameData+0x28>)
   141b0:	47a0      	blx	r4
   141b2:	0003      	movs	r3, r0
   141b4:	60fb      	str	r3, [r7, #12]
	return error;
   141b6:	68fb      	ldr	r3, [r7, #12]
}
   141b8:	0018      	movs	r0, r3
   141ba:	46bd      	mov	sp, r7
   141bc:	b005      	add	sp, #20
   141be:	bd90      	pop	{r4, r7, pc}
   141c0:	200004c0 	.word	0x200004c0
   141c4:	0001a451 	.word	0x0001a451

000141c8 <ControlAddStatusDataToQueue>:
* @return		Returns pdTrue if data can be added to queue, pdFalse if queue is full
* @note

*****************************************************************************/
int ControlAddStatusDataToQueue(uint8_t *statusdada)
{
   141c8:	b590      	push	{r4, r7, lr}
   141ca:	b085      	sub	sp, #20
   141cc:	af00      	add	r7, sp, #0
   141ce:	6078      	str	r0, [r7, #4]
	int error = xQueueSend(xQueueStatusBuffer , statusdada, ( TickType_t ) 10);
   141d0:	4b06      	ldr	r3, [pc, #24]	; (141ec <ControlAddStatusDataToQueue+0x24>)
   141d2:	6818      	ldr	r0, [r3, #0]
   141d4:	6879      	ldr	r1, [r7, #4]
   141d6:	2300      	movs	r3, #0
   141d8:	220a      	movs	r2, #10
   141da:	4c05      	ldr	r4, [pc, #20]	; (141f0 <ControlAddStatusDataToQueue+0x28>)
   141dc:	47a0      	blx	r4
   141de:	0003      	movs	r3, r0
   141e0:	60fb      	str	r3, [r7, #12]
	return error;
   141e2:	68fb      	ldr	r3, [r7, #12]
   141e4:	0018      	movs	r0, r3
   141e6:	46bd      	mov	sp, r7
   141e8:	b005      	add	sp, #20
   141ea:	bd90      	pop	{r4, r7, pc}
   141ec:	200004c8 	.word	0x200004c8
   141f0:	0001a451 	.word	0x0001a451

000141f4 <vLightReadTask>:




void vLightReadTask( void *pvParameters )
{
   141f4:	b580      	push	{r7, lr}
   141f6:	b084      	sub	sp, #16
   141f8:	af00      	add	r7, sp, #0
   141fa:	6078      	str	r0, [r7, #4]

/* The input and output buffers are declared static to keep them off the stack. */
	uint32_t lightdata = 0;
   141fc:	2300      	movs	r3, #0
   141fe:	60bb      	str	r3, [r7, #8]
	VEML_Reset();
   14200:	4b21      	ldr	r3, [pc, #132]	; (14288 <vLightReadTask+0x94>)
   14202:	4798      	blx	r3
	delay_ms(100);
   14204:	2064      	movs	r0, #100	; 0x64
   14206:	4b21      	ldr	r3, [pc, #132]	; (1428c <vLightReadTask+0x98>)
   14208:	4798      	blx	r3
    /* Send a welcome message to the user knows they are connected. */
	VEML_Power_On();
   1420a:	4b21      	ldr	r3, [pc, #132]	; (14290 <vLightReadTask+0x9c>)
   1420c:	4798      	blx	r3
    for( ;; )
    {
		VEML_Power_On();
   1420e:	4b20      	ldr	r3, [pc, #128]	; (14290 <vLightReadTask+0x9c>)
   14210:	4798      	blx	r3
		// After starting sensor, wait 200ms to collect data
 		vTaskDelay(200);
   14212:	20c8      	movs	r0, #200	; 0xc8
   14214:	4b1f      	ldr	r3, [pc, #124]	; (14294 <vLightReadTask+0xa0>)
   14216:	4798      	blx	r3
		VEML_ReadALSData(&lightdata);
   14218:	2308      	movs	r3, #8
   1421a:	18fb      	adds	r3, r7, r3
   1421c:	0018      	movs	r0, r3
   1421e:	4b1e      	ldr	r3, [pc, #120]	; (14298 <vLightReadTask+0xa4>)
   14220:	4798      	blx	r3
		
		uint8_t R = lightdata/10;
   14222:	68ba      	ldr	r2, [r7, #8]
   14224:	4b1d      	ldr	r3, [pc, #116]	; (1429c <vLightReadTask+0xa8>)
   14226:	210a      	movs	r1, #10
   14228:	0010      	movs	r0, r2
   1422a:	4798      	blx	r3
   1422c:	0003      	movs	r3, r0
   1422e:	001a      	movs	r2, r3
   14230:	230f      	movs	r3, #15
   14232:	18fb      	adds	r3, r7, r3
   14234:	701a      	strb	r2, [r3, #0]
		uint8_t G = lightdata/20;
   14236:	68ba      	ldr	r2, [r7, #8]
   14238:	4b18      	ldr	r3, [pc, #96]	; (1429c <vLightReadTask+0xa8>)
   1423a:	2114      	movs	r1, #20
   1423c:	0010      	movs	r0, r2
   1423e:	4798      	blx	r3
   14240:	0003      	movs	r3, r0
   14242:	001a      	movs	r2, r3
   14244:	230e      	movs	r3, #14
   14246:	18fb      	adds	r3, r7, r3
   14248:	701a      	strb	r2, [r3, #0]
		uint8_t B = 255 - lightdata/10;
   1424a:	68ba      	ldr	r2, [r7, #8]
   1424c:	4b13      	ldr	r3, [pc, #76]	; (1429c <vLightReadTask+0xa8>)
   1424e:	210a      	movs	r1, #10
   14250:	0010      	movs	r0, r2
   14252:	4798      	blx	r3
   14254:	0003      	movs	r3, r0
   14256:	b2da      	uxtb	r2, r3
   14258:	230d      	movs	r3, #13
   1425a:	18fb      	adds	r3, r7, r3
   1425c:	43d2      	mvns	r2, r2
   1425e:	701a      	strb	r2, [r3, #0]
		UIChangeColors(R,G,B);
   14260:	230d      	movs	r3, #13
   14262:	18fb      	adds	r3, r7, r3
   14264:	781a      	ldrb	r2, [r3, #0]
   14266:	230e      	movs	r3, #14
   14268:	18fb      	adds	r3, r7, r3
   1426a:	7819      	ldrb	r1, [r3, #0]
   1426c:	230f      	movs	r3, #15
   1426e:	18fb      	adds	r3, r7, r3
   14270:	781b      	ldrb	r3, [r3, #0]
   14272:	0018      	movs	r0, r3
   14274:	4b0a      	ldr	r3, [pc, #40]	; (142a0 <vLightReadTask+0xac>)
   14276:	4798      	blx	r3
// 		VEML_Power_Saving();
// 		vTaskDelay(500);
// 		VEML_Read_Power_Saving(&powersaving);
// 		snprintf(sensormsg, 15, "Power saving:%d\r\n", powersaving);
//		SerialConsoleWriteString(sensormsg);
		VEML_Power_Off();
   14278:	4b0a      	ldr	r3, [pc, #40]	; (142a4 <vLightReadTask+0xb0>)
   1427a:	4798      	blx	r3

		vTaskDelay(4000);
   1427c:	23fa      	movs	r3, #250	; 0xfa
   1427e:	011b      	lsls	r3, r3, #4
   14280:	0018      	movs	r0, r3
   14282:	4b04      	ldr	r3, [pc, #16]	; (14294 <vLightReadTask+0xa0>)
   14284:	4798      	blx	r3
    {
   14286:	e7c2      	b.n	1420e <vLightReadTask+0x1a>
   14288:	00016579 	.word	0x00016579
   1428c:	0001fafd 	.word	0x0001fafd
   14290:	00016611 	.word	0x00016611
   14294:	0001beb5 	.word	0x0001beb5
   14298:	00016681 	.word	0x00016681
   1429c:	000323c9 	.word	0x000323c9
   142a0:	000145c1 	.word	0x000145c1
   142a4:	00016649 	.word	0x00016649

000142a8 <vUiHandlerTask>:
* @param[in]	Parameters passed when task is initialized. In this case we can ignore them!
* @return		Should not return! This is a task defining function.
* @note         
*****************************************************************************/
void vUiHandlerTask( void *pvParameters )
{
   142a8:	b590      	push	{r4, r7, lr}
   142aa:	b08b      	sub	sp, #44	; 0x2c
   142ac:	af02      	add	r7, sp, #8
   142ae:	6078      	str	r0, [r7, #4]
//Do initialization code here
SerialConsoleWriteString("UI Task Started!");
   142b0:	4b96      	ldr	r3, [pc, #600]	; (1450c <vUiHandlerTask+0x264>)
   142b2:	0018      	movs	r0, r3
   142b4:	4b96      	ldr	r3, [pc, #600]	; (14510 <vUiHandlerTask+0x268>)
   142b6:	4798      	blx	r3
uiState = UI_STATE_IGNORE_PRESSES; //Initial state
   142b8:	4b96      	ldr	r3, [pc, #600]	; (14514 <vUiHandlerTask+0x26c>)
   142ba:	2201      	movs	r2, #1
   142bc:	701a      	strb	r2, [r3, #0]

//Graphics Test - Remove if not using
gfx_mono_init();
   142be:	4b96      	ldr	r3, [pc, #600]	; (14518 <vUiHandlerTask+0x270>)
   142c0:	4798      	blx	r3
gfx_mono_draw_line(1, 1, 62, 46, GFX_PIXEL_SET);
   142c2:	2301      	movs	r3, #1
   142c4:	9300      	str	r3, [sp, #0]
   142c6:	232e      	movs	r3, #46	; 0x2e
   142c8:	223e      	movs	r2, #62	; 0x3e
   142ca:	2101      	movs	r1, #1
   142cc:	2001      	movs	r0, #1
   142ce:	4c93      	ldr	r4, [pc, #588]	; (1451c <vUiHandlerTask+0x274>)
   142d0:	47a0      	blx	r4
// Draw a filled circle with all quadrant drawn
gfx_mono_draw_filled_circle(36, 20, 20, GFX_PIXEL_SET, GFX_WHOLE);
   142d2:	23ff      	movs	r3, #255	; 0xff
   142d4:	9300      	str	r3, [sp, #0]
   142d6:	2301      	movs	r3, #1
   142d8:	2214      	movs	r2, #20
   142da:	2114      	movs	r1, #20
   142dc:	2024      	movs	r0, #36	; 0x24
   142de:	4c90      	ldr	r4, [pc, #576]	; (14520 <vUiHandlerTask+0x278>)
   142e0:	47a0      	blx	r4


//Here we start the loop for the UI State Machine
while(1)
{
	switch(uiState)
   142e2:	4b8c      	ldr	r3, [pc, #560]	; (14514 <vUiHandlerTask+0x26c>)
   142e4:	781b      	ldrb	r3, [r3, #0]
   142e6:	2b01      	cmp	r3, #1
   142e8:	d100      	bne.n	142ec <vUiHandlerTask+0x44>
   142ea:	e108      	b.n	144fe <vUiHandlerTask+0x256>
   142ec:	2b02      	cmp	r3, #2
   142ee:	d002      	beq.n	142f6 <vUiHandlerTask+0x4e>
   142f0:	2b00      	cmp	r3, #0
   142f2:	d06f      	beq.n	143d4 <vUiHandlerTask+0x12c>
   142f4:	e0ff      	b.n	144f6 <vUiHandlerTask+0x24e>
		}

		case(UI_STATE_SHOW_MOVES):
		{
			//Set initial state variable that will be used on the UI_STATE_Handle_Buttons and need to be initialized once
			pressedKeys = 0; //Set number of keys pressed by player to 0.
   142f6:	4b8b      	ldr	r3, [pc, #556]	; (14524 <vUiHandlerTask+0x27c>)
   142f8:	2200      	movs	r2, #0
   142fa:	701a      	strb	r2, [r3, #0]
			//keysToPress = 1; //Set as an example to 1. STUDENTS should change this to the number of key presses needed.
			memset(gamePacketOut.game,0xff, sizeof(gamePacketOut.game)); //Erase gamePacketOut to an initial state
   142fc:	4b8a      	ldr	r3, [pc, #552]	; (14528 <vUiHandlerTask+0x280>)
   142fe:	2214      	movs	r2, #20
   14300:	21ff      	movs	r1, #255	; 0xff
   14302:	0018      	movs	r0, r3
   14304:	4b89      	ldr	r3, [pc, #548]	; (1452c <vUiHandlerTask+0x284>)
   14306:	4798      	blx	r3
			playIsDone = false; //Set play to false
   14308:	4b89      	ldr	r3, [pc, #548]	; (14530 <vUiHandlerTask+0x288>)
   1430a:	2200      	movs	r2, #0
   1430c:	701a      	strb	r2, [r3, #0]
			uint8_t presses = SeesawGetKeypadCount();
   1430e:	231f      	movs	r3, #31
   14310:	18fc      	adds	r4, r7, r3
   14312:	4b88      	ldr	r3, [pc, #544]	; (14534 <vUiHandlerTask+0x28c>)
   14314:	4798      	blx	r3
   14316:	0003      	movs	r3, r0
   14318:	7023      	strb	r3, [r4, #0]
			if(presses >= BUTTON_PRESSES_MAX) presses = BUTTON_PRESSES_MAX;
   1431a:	231f      	movs	r3, #31
   1431c:	18fb      	adds	r3, r7, r3
   1431e:	781b      	ldrb	r3, [r3, #0]
   14320:	2b0f      	cmp	r3, #15
   14322:	d903      	bls.n	1432c <vUiHandlerTask+0x84>
   14324:	231f      	movs	r3, #31
   14326:	18fb      	adds	r3, r7, r3
   14328:	2210      	movs	r2, #16
   1432a:	701a      	strb	r2, [r3, #0]
			if(presses != 0) SeesawReadKeypad(buttons,presses); //Empty Seesaw buffer just in case it has latent presses on it!
   1432c:	231f      	movs	r3, #31
   1432e:	18fb      	adds	r3, r7, r3
   14330:	781b      	ldrb	r3, [r3, #0]
   14332:	2b00      	cmp	r3, #0
   14334:	d007      	beq.n	14346 <vUiHandlerTask+0x9e>
   14336:	231f      	movs	r3, #31
   14338:	18fb      	adds	r3, r7, r3
   1433a:	781a      	ldrb	r2, [r3, #0]
   1433c:	4b7e      	ldr	r3, [pc, #504]	; (14538 <vUiHandlerTask+0x290>)
   1433e:	0011      	movs	r1, r2
   14340:	0018      	movs	r0, r3
   14342:	4b7e      	ldr	r3, [pc, #504]	; (1453c <vUiHandlerTask+0x294>)
   14344:	4798      	blx	r3
			memset(buttons, 0, BUTTON_PRESSES_MAX);
   14346:	4b7c      	ldr	r3, [pc, #496]	; (14538 <vUiHandlerTask+0x290>)
   14348:	2210      	movs	r2, #16
   1434a:	2100      	movs	r1, #0
   1434c:	0018      	movs	r0, r3
   1434e:	4b77      	ldr	r3, [pc, #476]	; (1452c <vUiHandlerTask+0x284>)
   14350:	4798      	blx	r3
			//STUDENTS: Make this function show the moves of the gamePacketIn.
			//You can use a static delay to show each move but a quicker delay as the message gets longer might be more fun!
			//After you finish showing the move should go to state UI_STATE_HANDLE_BUTTONS
			
			for (int i =0; i < GAME_SIZE;i++)
   14352:	2300      	movs	r3, #0
   14354:	61bb      	str	r3, [r7, #24]
   14356:	e036      	b.n	143c6 <vUiHandlerTask+0x11e>
			{
				//quit if it reaches the end of the move
				if (gamePacketIn.game[i]==0xff)
   14358:	4a79      	ldr	r2, [pc, #484]	; (14540 <vUiHandlerTask+0x298>)
   1435a:	69bb      	ldr	r3, [r7, #24]
   1435c:	18d3      	adds	r3, r2, r3
   1435e:	781b      	ldrb	r3, [r3, #0]
   14360:	2bff      	cmp	r3, #255	; 0xff
   14362:	d106      	bne.n	14372 <vUiHandlerTask+0xca>
				{
					keysToPress = i+1;
   14364:	69bb      	ldr	r3, [r7, #24]
   14366:	b2db      	uxtb	r3, r3
   14368:	3301      	adds	r3, #1
   1436a:	b2da      	uxtb	r2, r3
   1436c:	4b75      	ldr	r3, [pc, #468]	; (14544 <vUiHandlerTask+0x29c>)
   1436e:	701a      	strb	r2, [r3, #0]
					break;
   14370:	e02c      	b.n	143cc <vUiHandlerTask+0x124>
				}
				uint8_t keyToShow = gamePacketIn.game[i];
   14372:	230f      	movs	r3, #15
   14374:	18fb      	adds	r3, r7, r3
   14376:	4972      	ldr	r1, [pc, #456]	; (14540 <vUiHandlerTask+0x298>)
   14378:	69ba      	ldr	r2, [r7, #24]
   1437a:	188a      	adds	r2, r1, r2
   1437c:	7812      	ldrb	r2, [r2, #0]
   1437e:	701a      	strb	r2, [r3, #0]
				SeesawSetLed(keyToShow, red, green, blue); //Turn button 1 on
   14380:	4b71      	ldr	r3, [pc, #452]	; (14548 <vUiHandlerTask+0x2a0>)
   14382:	781b      	ldrb	r3, [r3, #0]
   14384:	b2d9      	uxtb	r1, r3
   14386:	4b71      	ldr	r3, [pc, #452]	; (1454c <vUiHandlerTask+0x2a4>)
   14388:	781b      	ldrb	r3, [r3, #0]
   1438a:	b2da      	uxtb	r2, r3
   1438c:	4b70      	ldr	r3, [pc, #448]	; (14550 <vUiHandlerTask+0x2a8>)
   1438e:	781b      	ldrb	r3, [r3, #0]
   14390:	b2dc      	uxtb	r4, r3
   14392:	230f      	movs	r3, #15
   14394:	18fb      	adds	r3, r7, r3
   14396:	7818      	ldrb	r0, [r3, #0]
   14398:	0023      	movs	r3, r4
   1439a:	4c6e      	ldr	r4, [pc, #440]	; (14554 <vUiHandlerTask+0x2ac>)
   1439c:	47a0      	blx	r4
				SeesawOrderLedUpdate();
   1439e:	4b6e      	ldr	r3, [pc, #440]	; (14558 <vUiHandlerTask+0x2b0>)
   143a0:	4798      	blx	r3
				vTaskDelay(1000);			
   143a2:	23fa      	movs	r3, #250	; 0xfa
   143a4:	009b      	lsls	r3, r3, #2
   143a6:	0018      	movs	r0, r3
   143a8:	4b6c      	ldr	r3, [pc, #432]	; (1455c <vUiHandlerTask+0x2b4>)
   143aa:	4798      	blx	r3
				SeesawSetLed(keyToShow, 0, 0, 0); //Turn button 1 on
   143ac:	230f      	movs	r3, #15
   143ae:	18fb      	adds	r3, r7, r3
   143b0:	7818      	ldrb	r0, [r3, #0]
   143b2:	2300      	movs	r3, #0
   143b4:	2200      	movs	r2, #0
   143b6:	2100      	movs	r1, #0
   143b8:	4c66      	ldr	r4, [pc, #408]	; (14554 <vUiHandlerTask+0x2ac>)
   143ba:	47a0      	blx	r4
				SeesawOrderLedUpdate();
   143bc:	4b66      	ldr	r3, [pc, #408]	; (14558 <vUiHandlerTask+0x2b0>)
   143be:	4798      	blx	r3
			for (int i =0; i < GAME_SIZE;i++)
   143c0:	69bb      	ldr	r3, [r7, #24]
   143c2:	3301      	adds	r3, #1
   143c4:	61bb      	str	r3, [r7, #24]
   143c6:	69bb      	ldr	r3, [r7, #24]
   143c8:	2b13      	cmp	r3, #19
   143ca:	ddc5      	ble.n	14358 <vUiHandlerTask+0xb0>
// 			SeesawOrderLedUpdate();
// 			vTaskDelay(1000);
// 			SeesawSetLed(15,0,0,0); //Turn button 15 off
// 			SeesawOrderLedUpdate();
// 			vTaskDelay(1000);
			uiState = UI_STATE_HANDLE_BUTTONS;
   143cc:	4b51      	ldr	r3, [pc, #324]	; (14514 <vUiHandlerTask+0x26c>)
   143ce:	2200      	movs	r2, #0
   143d0:	701a      	strb	r2, [r3, #0]

			break;
   143d2:	e097      	b.n	14504 <vUiHandlerTask+0x25c>
		//This state should accept (gamePacketIn length + 1) moves from the player (capped to maximum 19 + new move)
		//The moves by the player should be stored on "gamePacketOut". The keypresses that should count are when the player RELEASES the button.
		
		//In this example, we return after only one button press!
		
		uint8_t numPresses = SeesawGetKeypadCount();
   143d4:	2317      	movs	r3, #23
   143d6:	18fc      	adds	r4, r7, r3
   143d8:	4b56      	ldr	r3, [pc, #344]	; (14534 <vUiHandlerTask+0x28c>)
   143da:	4798      	blx	r3
   143dc:	0003      	movs	r3, r0
   143de:	7023      	strb	r3, [r4, #0]
		memset(buttons, 0, BUTTON_PRESSES_MAX);
   143e0:	4b55      	ldr	r3, [pc, #340]	; (14538 <vUiHandlerTask+0x290>)
   143e2:	2210      	movs	r2, #16
   143e4:	2100      	movs	r1, #0
   143e6:	0018      	movs	r0, r3
   143e8:	4b50      	ldr	r3, [pc, #320]	; (1452c <vUiHandlerTask+0x284>)
   143ea:	4798      	blx	r3

		if(numPresses >= BUTTON_PRESSES_MAX )
   143ec:	2317      	movs	r3, #23
   143ee:	18fb      	adds	r3, r7, r3
   143f0:	781b      	ldrb	r3, [r3, #0]
   143f2:	2b0f      	cmp	r3, #15
   143f4:	d903      	bls.n	143fe <vUiHandlerTask+0x156>
		{
			numPresses = BUTTON_PRESSES_MAX;
   143f6:	2317      	movs	r3, #23
   143f8:	18fb      	adds	r3, r7, r3
   143fa:	2210      	movs	r2, #16
   143fc:	701a      	strb	r2, [r3, #0]
		}
		if(numPresses != 0 && ERROR_NONE == SeesawReadKeypad(buttons, numPresses))
   143fe:	2317      	movs	r3, #23
   14400:	18fb      	adds	r3, r7, r3
   14402:	781b      	ldrb	r3, [r3, #0]
   14404:	2b00      	cmp	r3, #0
   14406:	d065      	beq.n	144d4 <vUiHandlerTask+0x22c>
   14408:	2317      	movs	r3, #23
   1440a:	18fb      	adds	r3, r7, r3
   1440c:	781a      	ldrb	r2, [r3, #0]
   1440e:	4b4a      	ldr	r3, [pc, #296]	; (14538 <vUiHandlerTask+0x290>)
   14410:	0011      	movs	r1, r2
   14412:	0018      	movs	r0, r3
   14414:	4b49      	ldr	r3, [pc, #292]	; (1453c <vUiHandlerTask+0x294>)
   14416:	4798      	blx	r3
   14418:	1e03      	subs	r3, r0, #0
   1441a:	d15b      	bne.n	144d4 <vUiHandlerTask+0x22c>
		{
			//Process Buttons
			for (int iter = 0; iter < numPresses; iter++)
   1441c:	2300      	movs	r3, #0
   1441e:	613b      	str	r3, [r7, #16]
   14420:	e050      	b.n	144c4 <vUiHandlerTask+0x21c>
			{
				uint8_t keynum = NEO_TRELLIS_SEESAW_KEY((buttons[iter] & 0xFD) >> 2);
   14422:	4a45      	ldr	r2, [pc, #276]	; (14538 <vUiHandlerTask+0x290>)
   14424:	693b      	ldr	r3, [r7, #16]
   14426:	18d3      	adds	r3, r2, r3
   14428:	781b      	ldrb	r3, [r3, #0]
   1442a:	089b      	lsrs	r3, r3, #2
   1442c:	b2db      	uxtb	r3, r3
   1442e:	2b00      	cmp	r3, #0
   14430:	da00      	bge.n	14434 <vUiHandlerTask+0x18c>
   14432:	3307      	adds	r3, #7
   14434:	10db      	asrs	r3, r3, #3
   14436:	b2db      	uxtb	r3, r3
   14438:	009b      	lsls	r3, r3, #2
   1443a:	b2d9      	uxtb	r1, r3
   1443c:	4a3e      	ldr	r2, [pc, #248]	; (14538 <vUiHandlerTask+0x290>)
   1443e:	693b      	ldr	r3, [r7, #16]
   14440:	18d3      	adds	r3, r2, r3
   14442:	781b      	ldrb	r3, [r3, #0]
   14444:	089b      	lsrs	r3, r3, #2
   14446:	b2db      	uxtb	r3, r3
   14448:	2207      	movs	r2, #7
   1444a:	4013      	ands	r3, r2
   1444c:	b2da      	uxtb	r2, r3
   1444e:	230e      	movs	r3, #14
   14450:	18fb      	adds	r3, r7, r3
   14452:	188a      	adds	r2, r1, r2
   14454:	701a      	strb	r2, [r3, #0]
				uint8_t actionButton = buttons[iter] & 0x03;
   14456:	4a38      	ldr	r2, [pc, #224]	; (14538 <vUiHandlerTask+0x290>)
   14458:	693b      	ldr	r3, [r7, #16]
   1445a:	18d3      	adds	r3, r2, r3
   1445c:	781a      	ldrb	r2, [r3, #0]
   1445e:	230d      	movs	r3, #13
   14460:	18fb      	adds	r3, r7, r3
   14462:	2103      	movs	r1, #3
   14464:	400a      	ands	r2, r1
   14466:	701a      	strb	r2, [r3, #0]
				if(actionButton == 0x03) 
   14468:	230d      	movs	r3, #13
   1446a:	18fb      	adds	r3, r7, r3
   1446c:	781b      	ldrb	r3, [r3, #0]
   1446e:	2b03      	cmp	r3, #3
   14470:	d10f      	bne.n	14492 <vUiHandlerTask+0x1ea>
				{
					SeesawSetLed(keynum, red, green, blue);
   14472:	4b35      	ldr	r3, [pc, #212]	; (14548 <vUiHandlerTask+0x2a0>)
   14474:	781b      	ldrb	r3, [r3, #0]
   14476:	b2d9      	uxtb	r1, r3
   14478:	4b34      	ldr	r3, [pc, #208]	; (1454c <vUiHandlerTask+0x2a4>)
   1447a:	781b      	ldrb	r3, [r3, #0]
   1447c:	b2da      	uxtb	r2, r3
   1447e:	4b34      	ldr	r3, [pc, #208]	; (14550 <vUiHandlerTask+0x2a8>)
   14480:	781b      	ldrb	r3, [r3, #0]
   14482:	b2dc      	uxtb	r4, r3
   14484:	230e      	movs	r3, #14
   14486:	18fb      	adds	r3, r7, r3
   14488:	7818      	ldrb	r0, [r3, #0]
   1448a:	0023      	movs	r3, r4
   1448c:	4c31      	ldr	r4, [pc, #196]	; (14554 <vUiHandlerTask+0x2ac>)
   1448e:	47a0      	blx	r4
   14490:	e015      	b.n	144be <vUiHandlerTask+0x216>
				}
				else
				{
					SeesawSetLed(keynum, 0, 0, 0);
   14492:	230e      	movs	r3, #14
   14494:	18fb      	adds	r3, r7, r3
   14496:	7818      	ldrb	r0, [r3, #0]
   14498:	2300      	movs	r3, #0
   1449a:	2200      	movs	r2, #0
   1449c:	2100      	movs	r1, #0
   1449e:	4c2d      	ldr	r4, [pc, #180]	; (14554 <vUiHandlerTask+0x2ac>)
   144a0:	47a0      	blx	r4
					//Button released! Count this into the buttons pressed by user.
					gamePacketOut.game[pressedKeys] = keynum;
   144a2:	4b20      	ldr	r3, [pc, #128]	; (14524 <vUiHandlerTask+0x27c>)
   144a4:	781b      	ldrb	r3, [r3, #0]
   144a6:	0019      	movs	r1, r3
   144a8:	4b1f      	ldr	r3, [pc, #124]	; (14528 <vUiHandlerTask+0x280>)
   144aa:	220e      	movs	r2, #14
   144ac:	18ba      	adds	r2, r7, r2
   144ae:	7812      	ldrb	r2, [r2, #0]
   144b0:	545a      	strb	r2, [r3, r1]
					pressedKeys++;
   144b2:	4b1c      	ldr	r3, [pc, #112]	; (14524 <vUiHandlerTask+0x27c>)
   144b4:	781b      	ldrb	r3, [r3, #0]
   144b6:	3301      	adds	r3, #1
   144b8:	b2da      	uxtb	r2, r3
   144ba:	4b1a      	ldr	r3, [pc, #104]	; (14524 <vUiHandlerTask+0x27c>)
   144bc:	701a      	strb	r2, [r3, #0]
			for (int iter = 0; iter < numPresses; iter++)
   144be:	693b      	ldr	r3, [r7, #16]
   144c0:	3301      	adds	r3, #1
   144c2:	613b      	str	r3, [r7, #16]
   144c4:	2317      	movs	r3, #23
   144c6:	18fb      	adds	r3, r7, r3
   144c8:	781a      	ldrb	r2, [r3, #0]
   144ca:	693b      	ldr	r3, [r7, #16]
   144cc:	429a      	cmp	r2, r3
   144ce:	dca8      	bgt.n	14422 <vUiHandlerTask+0x17a>
				}
			}
			SeesawOrderLedUpdate();
   144d0:	4b21      	ldr	r3, [pc, #132]	; (14558 <vUiHandlerTask+0x2b0>)
   144d2:	4798      	blx	r3
		}

		//Check if we are done!
		if(pressedKeys >= keysToPress || pressedKeys >= GAME_SIZE)
   144d4:	4b13      	ldr	r3, [pc, #76]	; (14524 <vUiHandlerTask+0x27c>)
   144d6:	781a      	ldrb	r2, [r3, #0]
   144d8:	4b1a      	ldr	r3, [pc, #104]	; (14544 <vUiHandlerTask+0x29c>)
   144da:	781b      	ldrb	r3, [r3, #0]
   144dc:	429a      	cmp	r2, r3
   144de:	d203      	bcs.n	144e8 <vUiHandlerTask+0x240>
   144e0:	4b10      	ldr	r3, [pc, #64]	; (14524 <vUiHandlerTask+0x27c>)
   144e2:	781b      	ldrb	r3, [r3, #0]
   144e4:	2b13      	cmp	r3, #19
   144e6:	d90c      	bls.n	14502 <vUiHandlerTask+0x25a>
		{
			//Tell control gamePacketOut is ready to be send out AND go back to UI_STATE_IGNORE_PRESSES
			playIsDone = true;
   144e8:	4b11      	ldr	r3, [pc, #68]	; (14530 <vUiHandlerTask+0x288>)
   144ea:	2201      	movs	r2, #1
   144ec:	701a      	strb	r2, [r3, #0]
			uiState = UI_STATE_IGNORE_PRESSES;
   144ee:	4b09      	ldr	r3, [pc, #36]	; (14514 <vUiHandlerTask+0x26c>)
   144f0:	2201      	movs	r2, #1
   144f2:	701a      	strb	r2, [r3, #0]
		}


		break;
   144f4:	e005      	b.n	14502 <vUiHandlerTask+0x25a>
		}



		default: //In case of unforseen error, it is always good to sent state machine to an initial state.
			uiState = UI_STATE_HANDLE_BUTTONS;
   144f6:	4b07      	ldr	r3, [pc, #28]	; (14514 <vUiHandlerTask+0x26c>)
   144f8:	2200      	movs	r2, #0
   144fa:	701a      	strb	r2, [r3, #0]
		break;
   144fc:	e002      	b.n	14504 <vUiHandlerTask+0x25c>
			break;
   144fe:	46c0      	nop			; (mov r8, r8)
   14500:	e000      	b.n	14504 <vUiHandlerTask+0x25c>
		break;
   14502:	46c0      	nop			; (mov r8, r8)
	}

	//After execution, you can put a thread to sleep for some time.
	vTaskDelay(50);
   14504:	2032      	movs	r0, #50	; 0x32
   14506:	4b15      	ldr	r3, [pc, #84]	; (1455c <vUiHandlerTask+0x2b4>)
   14508:	4798      	blx	r3
	switch(uiState)
   1450a:	e6ea      	b.n	142e2 <vUiHandlerTask+0x3a>
   1450c:	00035740 	.word	0x00035740
   14510:	0001db09 	.word	0x0001db09
   14514:	2000424c 	.word	0x2000424c
   14518:	00012a81 	.word	0x00012a81
   1451c:	000124c1 	.word	0x000124c1
   14520:	00012749 	.word	0x00012749
   14524:	200004cd 	.word	0x200004cd
   14528:	20004214 	.word	0x20004214
   1452c:	00034083 	.word	0x00034083
   14530:	200004cf 	.word	0x200004cf
   14534:	00016e89 	.word	0x00016e89
   14538:	2000423c 	.word	0x2000423c
   1453c:	00016ef1 	.word	0x00016ef1
   14540:	20004228 	.word	0x20004228
   14544:	200004ce 	.word	0x200004ce
   14548:	200004cc 	.word	0x200004cc
   1454c:	20000014 	.word	0x20000014
   14550:	20000015 	.word	0x20000015
   14554:	0001703d 	.word	0x0001703d
   14558:	00017111 	.word	0x00017111
   1455c:	0001beb5 	.word	0x0001beb5

00014560 <UiOrderShowMoves>:


/******************************************************************************
* Functions
******************************************************************************/
void UiOrderShowMoves(struct GameDataPacket *packetIn){
   14560:	b580      	push	{r7, lr}
   14562:	b082      	sub	sp, #8
   14564:	af00      	add	r7, sp, #0
   14566:	6078      	str	r0, [r7, #4]
	memcpy(&gamePacketIn, packetIn, sizeof(gamePacketIn));
   14568:	4a08      	ldr	r2, [pc, #32]	; (1458c <UiOrderShowMoves+0x2c>)
   1456a:	687b      	ldr	r3, [r7, #4]
   1456c:	0010      	movs	r0, r2
   1456e:	0019      	movs	r1, r3
   14570:	2314      	movs	r3, #20
   14572:	001a      	movs	r2, r3
   14574:	4b06      	ldr	r3, [pc, #24]	; (14590 <UiOrderShowMoves+0x30>)
   14576:	4798      	blx	r3
	uiState = UI_STATE_SHOW_MOVES;
   14578:	4b06      	ldr	r3, [pc, #24]	; (14594 <UiOrderShowMoves+0x34>)
   1457a:	2202      	movs	r2, #2
   1457c:	701a      	strb	r2, [r3, #0]
	playIsDone = false; //Set play to false
   1457e:	4b06      	ldr	r3, [pc, #24]	; (14598 <UiOrderShowMoves+0x38>)
   14580:	2200      	movs	r2, #0
   14582:	701a      	strb	r2, [r3, #0]
}
   14584:	46c0      	nop			; (mov r8, r8)
   14586:	46bd      	mov	sp, r7
   14588:	b002      	add	sp, #8
   1458a:	bd80      	pop	{r7, pc}
   1458c:	20004228 	.word	0x20004228
   14590:	0003404d 	.word	0x0003404d
   14594:	2000424c 	.word	0x2000424c
   14598:	200004cf 	.word	0x200004cf

0001459c <UiPlayIsDone>:


bool UiPlayIsDone(void)
{
   1459c:	b580      	push	{r7, lr}
   1459e:	af00      	add	r7, sp, #0
	return playIsDone;
   145a0:	4b02      	ldr	r3, [pc, #8]	; (145ac <UiPlayIsDone+0x10>)
   145a2:	781b      	ldrb	r3, [r3, #0]
}
   145a4:	0018      	movs	r0, r3
   145a6:	46bd      	mov	sp, r7
   145a8:	bd80      	pop	{r7, pc}
   145aa:	46c0      	nop			; (mov r8, r8)
   145ac:	200004cf 	.word	0x200004cf

000145b0 <UiGetGamePacketOut>:

struct GameDataPacket *UiGetGamePacketOut(void)
{
   145b0:	b580      	push	{r7, lr}
   145b2:	af00      	add	r7, sp, #0
	return &gamePacketOut;
   145b4:	4b01      	ldr	r3, [pc, #4]	; (145bc <UiGetGamePacketOut+0xc>)
}
   145b6:	0018      	movs	r0, r3
   145b8:	46bd      	mov	sp, r7
   145ba:	bd80      	pop	{r7, pc}
   145bc:	20004214 	.word	0x20004214

000145c0 <UIChangeColors>:
* @return		
* @note         

*****************************************************************************/
void UIChangeColors(uint8_t r, uint8_t g, uint8_t b)
{
   145c0:	b590      	push	{r4, r7, lr}
   145c2:	b083      	sub	sp, #12
   145c4:	af00      	add	r7, sp, #0
   145c6:	0004      	movs	r4, r0
   145c8:	0008      	movs	r0, r1
   145ca:	0011      	movs	r1, r2
   145cc:	1dfb      	adds	r3, r7, #7
   145ce:	1c22      	adds	r2, r4, #0
   145d0:	701a      	strb	r2, [r3, #0]
   145d2:	1dbb      	adds	r3, r7, #6
   145d4:	1c02      	adds	r2, r0, #0
   145d6:	701a      	strb	r2, [r3, #0]
   145d8:	1d7b      	adds	r3, r7, #5
   145da:	1c0a      	adds	r2, r1, #0
   145dc:	701a      	strb	r2, [r3, #0]
	red = r;
   145de:	4b08      	ldr	r3, [pc, #32]	; (14600 <UIChangeColors+0x40>)
   145e0:	1dfa      	adds	r2, r7, #7
   145e2:	7812      	ldrb	r2, [r2, #0]
   145e4:	701a      	strb	r2, [r3, #0]
	green = g;
   145e6:	4b07      	ldr	r3, [pc, #28]	; (14604 <UIChangeColors+0x44>)
   145e8:	1dba      	adds	r2, r7, #6
   145ea:	7812      	ldrb	r2, [r2, #0]
   145ec:	701a      	strb	r2, [r3, #0]
	blue = b;
   145ee:	4b06      	ldr	r3, [pc, #24]	; (14608 <UIChangeColors+0x48>)
   145f0:	1d7a      	adds	r2, r7, #5
   145f2:	7812      	ldrb	r2, [r2, #0]
   145f4:	701a      	strb	r2, [r3, #0]
   145f6:	46c0      	nop			; (mov r8, r8)
   145f8:	46bd      	mov	sp, r7
   145fa:	b003      	add	sp, #12
   145fc:	bd90      	pop	{r4, r7, pc}
   145fe:	46c0      	nop			; (mov r8, r8)
   14600:	200004cc 	.word	0x200004cc
   14604:	20000014 	.word	0x20000014
   14608:	20000015 	.word	0x20000015

0001460c <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   1460c:	b580      	push	{r7, lr}
   1460e:	b084      	sub	sp, #16
   14610:	af00      	add	r7, sp, #0
   14612:	0002      	movs	r2, r0
   14614:	1dfb      	adds	r3, r7, #7
   14616:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   14618:	230f      	movs	r3, #15
   1461a:	18fb      	adds	r3, r7, r3
   1461c:	1dfa      	adds	r2, r7, #7
   1461e:	7812      	ldrb	r2, [r2, #0]
   14620:	09d2      	lsrs	r2, r2, #7
   14622:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   14624:	230e      	movs	r3, #14
   14626:	18fb      	adds	r3, r7, r3
   14628:	1dfa      	adds	r2, r7, #7
   1462a:	7812      	ldrb	r2, [r2, #0]
   1462c:	0952      	lsrs	r2, r2, #5
   1462e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   14630:	4b0d      	ldr	r3, [pc, #52]	; (14668 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   14632:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
   14634:	230f      	movs	r3, #15
   14636:	18fb      	adds	r3, r7, r3
   14638:	781b      	ldrb	r3, [r3, #0]
   1463a:	2b00      	cmp	r3, #0
   1463c:	d10f      	bne.n	1465e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1463e:	230f      	movs	r3, #15
   14640:	18fb      	adds	r3, r7, r3
   14642:	781b      	ldrb	r3, [r3, #0]
   14644:	009b      	lsls	r3, r3, #2
   14646:	2210      	movs	r2, #16
   14648:	4694      	mov	ip, r2
   1464a:	44bc      	add	ip, r7
   1464c:	4463      	add	r3, ip
   1464e:	3b08      	subs	r3, #8
   14650:	681a      	ldr	r2, [r3, #0]
   14652:	230e      	movs	r3, #14
   14654:	18fb      	adds	r3, r7, r3
   14656:	781b      	ldrb	r3, [r3, #0]
   14658:	01db      	lsls	r3, r3, #7
   1465a:	18d3      	adds	r3, r2, r3
   1465c:	e000      	b.n	14660 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
   1465e:	2300      	movs	r3, #0
	}
}
   14660:	0018      	movs	r0, r3
   14662:	46bd      	mov	sp, r7
   14664:	b004      	add	sp, #16
   14666:	bd80      	pop	{r7, pc}
   14668:	41004400 	.word	0x41004400

0001466c <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   1466c:	b580      	push	{r7, lr}
   1466e:	b082      	sub	sp, #8
   14670:	af00      	add	r7, sp, #0
   14672:	0002      	movs	r2, r0
   14674:	1dfb      	adds	r3, r7, #7
   14676:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   14678:	1dfb      	adds	r3, r7, #7
   1467a:	781b      	ldrb	r3, [r3, #0]
   1467c:	0018      	movs	r0, r3
   1467e:	4b03      	ldr	r3, [pc, #12]	; (1468c <port_get_group_from_gpio_pin+0x20>)
   14680:	4798      	blx	r3
   14682:	0003      	movs	r3, r0
}
   14684:	0018      	movs	r0, r3
   14686:	46bd      	mov	sp, r7
   14688:	b002      	add	sp, #8
   1468a:	bd80      	pop	{r7, pc}
   1468c:	0001460d 	.word	0x0001460d

00014690 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
   14690:	b580      	push	{r7, lr}
   14692:	b084      	sub	sp, #16
   14694:	af00      	add	r7, sp, #0
   14696:	0002      	movs	r2, r0
   14698:	1dfb      	adds	r3, r7, #7
   1469a:	701a      	strb	r2, [r3, #0]
   1469c:	1dbb      	adds	r3, r7, #6
   1469e:	1c0a      	adds	r2, r1, #0
   146a0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   146a2:	1dfb      	adds	r3, r7, #7
   146a4:	781b      	ldrb	r3, [r3, #0]
   146a6:	0018      	movs	r0, r3
   146a8:	4b0d      	ldr	r3, [pc, #52]	; (146e0 <port_pin_set_output_level+0x50>)
   146aa:	4798      	blx	r3
   146ac:	0003      	movs	r3, r0
   146ae:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   146b0:	1dfb      	adds	r3, r7, #7
   146b2:	781b      	ldrb	r3, [r3, #0]
   146b4:	221f      	movs	r2, #31
   146b6:	4013      	ands	r3, r2
   146b8:	2201      	movs	r2, #1
   146ba:	409a      	lsls	r2, r3
   146bc:	0013      	movs	r3, r2
   146be:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
   146c0:	1dbb      	adds	r3, r7, #6
   146c2:	781b      	ldrb	r3, [r3, #0]
   146c4:	2b00      	cmp	r3, #0
   146c6:	d003      	beq.n	146d0 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   146c8:	68fb      	ldr	r3, [r7, #12]
   146ca:	68ba      	ldr	r2, [r7, #8]
   146cc:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
   146ce:	e002      	b.n	146d6 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   146d0:	68fb      	ldr	r3, [r7, #12]
   146d2:	68ba      	ldr	r2, [r7, #8]
   146d4:	615a      	str	r2, [r3, #20]
}
   146d6:	46c0      	nop			; (mov r8, r8)
   146d8:	46bd      	mov	sp, r7
   146da:	b004      	add	sp, #16
   146dc:	bd80      	pop	{r7, pc}
   146de:	46c0      	nop			; (mov r8, r8)
   146e0:	0001466d 	.word	0x0001466d

000146e4 <init_state>:

/**
 * \brief Initialize download state to not ready.
 */
static void init_state(void)
{
   146e4:	b580      	push	{r7, lr}
   146e6:	af00      	add	r7, sp, #0
	down_state = NOT_READY;
   146e8:	4b02      	ldr	r3, [pc, #8]	; (146f4 <init_state+0x10>)
   146ea:	2200      	movs	r2, #0
   146ec:	701a      	strb	r2, [r3, #0]
}
   146ee:	46c0      	nop			; (mov r8, r8)
   146f0:	46bd      	mov	sp, r7
   146f2:	bd80      	pop	{r7, pc}
   146f4:	200004dd 	.word	0x200004dd

000146f8 <clear_state>:
/**
 * \brief Clear state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void clear_state(download_state mask)
{
   146f8:	b580      	push	{r7, lr}
   146fa:	b082      	sub	sp, #8
   146fc:	af00      	add	r7, sp, #0
   146fe:	0002      	movs	r2, r0
   14700:	1dfb      	adds	r3, r7, #7
   14702:	701a      	strb	r2, [r3, #0]
	down_state &= ~mask;
   14704:	1dfb      	adds	r3, r7, #7
   14706:	781b      	ldrb	r3, [r3, #0]
   14708:	b25b      	sxtb	r3, r3
   1470a:	43db      	mvns	r3, r3
   1470c:	b25b      	sxtb	r3, r3
   1470e:	4a06      	ldr	r2, [pc, #24]	; (14728 <clear_state+0x30>)
   14710:	7812      	ldrb	r2, [r2, #0]
   14712:	b252      	sxtb	r2, r2
   14714:	4013      	ands	r3, r2
   14716:	b25b      	sxtb	r3, r3
   14718:	b2da      	uxtb	r2, r3
   1471a:	4b03      	ldr	r3, [pc, #12]	; (14728 <clear_state+0x30>)
   1471c:	701a      	strb	r2, [r3, #0]
}
   1471e:	46c0      	nop			; (mov r8, r8)
   14720:	46bd      	mov	sp, r7
   14722:	b002      	add	sp, #8
   14724:	bd80      	pop	{r7, pc}
   14726:	46c0      	nop			; (mov r8, r8)
   14728:	200004dd 	.word	0x200004dd

0001472c <add_state>:
/**
 * \brief Add state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void add_state(download_state mask)
{
   1472c:	b580      	push	{r7, lr}
   1472e:	b082      	sub	sp, #8
   14730:	af00      	add	r7, sp, #0
   14732:	0002      	movs	r2, r0
   14734:	1dfb      	adds	r3, r7, #7
   14736:	701a      	strb	r2, [r3, #0]
	down_state |= mask;
   14738:	4b05      	ldr	r3, [pc, #20]	; (14750 <add_state+0x24>)
   1473a:	781a      	ldrb	r2, [r3, #0]
   1473c:	1dfb      	adds	r3, r7, #7
   1473e:	781b      	ldrb	r3, [r3, #0]
   14740:	4313      	orrs	r3, r2
   14742:	b2da      	uxtb	r2, r3
   14744:	4b02      	ldr	r3, [pc, #8]	; (14750 <add_state+0x24>)
   14746:	701a      	strb	r2, [r3, #0]
}
   14748:	46c0      	nop			; (mov r8, r8)
   1474a:	46bd      	mov	sp, r7
   1474c:	b002      	add	sp, #8
   1474e:	bd80      	pop	{r7, pc}
   14750:	200004dd 	.word	0x200004dd

00014754 <is_state_set>:
 * \param[in] mask Check download_state.
 * \return true if this state is set, false otherwise.
 */

static inline bool is_state_set(download_state mask)
{
   14754:	b580      	push	{r7, lr}
   14756:	b082      	sub	sp, #8
   14758:	af00      	add	r7, sp, #0
   1475a:	0002      	movs	r2, r0
   1475c:	1dfb      	adds	r3, r7, #7
   1475e:	701a      	strb	r2, [r3, #0]
	return ((down_state & mask) != 0);
   14760:	4b06      	ldr	r3, [pc, #24]	; (1477c <is_state_set+0x28>)
   14762:	781b      	ldrb	r3, [r3, #0]
   14764:	1dfa      	adds	r2, r7, #7
   14766:	7812      	ldrb	r2, [r2, #0]
   14768:	4013      	ands	r3, r2
   1476a:	b2db      	uxtb	r3, r3
   1476c:	1e5a      	subs	r2, r3, #1
   1476e:	4193      	sbcs	r3, r2
   14770:	b2db      	uxtb	r3, r3
}
   14772:	0018      	movs	r0, r3
   14774:	46bd      	mov	sp, r7
   14776:	b002      	add	sp, #8
   14778:	bd80      	pop	{r7, pc}
   1477a:	46c0      	nop			; (mov r8, r8)
   1477c:	200004dd 	.word	0x200004dd

00014780 <is_exist_file>:
 * \param[in] fp The file pointer to check.
 * \param[in] file_path_name The file name to check.
 * \return true if this file name is exist, false otherwise.
 */
static bool is_exist_file(FIL *fp, const char *file_path_name)
{
   14780:	b590      	push	{r4, r7, lr}
   14782:	b085      	sub	sp, #20
   14784:	af00      	add	r7, sp, #0
   14786:	6078      	str	r0, [r7, #4]
   14788:	6039      	str	r1, [r7, #0]
	if (fp == NULL || file_path_name == NULL) {
   1478a:	687b      	ldr	r3, [r7, #4]
   1478c:	2b00      	cmp	r3, #0
   1478e:	d002      	beq.n	14796 <is_exist_file+0x16>
   14790:	683b      	ldr	r3, [r7, #0]
   14792:	2b00      	cmp	r3, #0
   14794:	d101      	bne.n	1479a <is_exist_file+0x1a>
		return false;
   14796:	2300      	movs	r3, #0
   14798:	e013      	b.n	147c2 <is_exist_file+0x42>
	}

	FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
   1479a:	230f      	movs	r3, #15
   1479c:	18fc      	adds	r4, r7, r3
   1479e:	6839      	ldr	r1, [r7, #0]
   147a0:	4b0a      	ldr	r3, [pc, #40]	; (147cc <is_exist_file+0x4c>)
   147a2:	2200      	movs	r2, #0
   147a4:	0018      	movs	r0, r3
   147a6:	4b0a      	ldr	r3, [pc, #40]	; (147d0 <is_exist_file+0x50>)
   147a8:	4798      	blx	r3
   147aa:	0003      	movs	r3, r0
   147ac:	7023      	strb	r3, [r4, #0]
	f_close(&file_object);
   147ae:	4b07      	ldr	r3, [pc, #28]	; (147cc <is_exist_file+0x4c>)
   147b0:	0018      	movs	r0, r3
   147b2:	4b08      	ldr	r3, [pc, #32]	; (147d4 <is_exist_file+0x54>)
   147b4:	4798      	blx	r3
	return (ret == FR_OK);
   147b6:	230f      	movs	r3, #15
   147b8:	18fb      	adds	r3, r7, r3
   147ba:	781b      	ldrb	r3, [r3, #0]
   147bc:	425a      	negs	r2, r3
   147be:	4153      	adcs	r3, r2
   147c0:	b2db      	uxtb	r3, r3
}
   147c2:	0018      	movs	r0, r3
   147c4:	46bd      	mov	sp, r7
   147c6:	b005      	add	sp, #20
   147c8:	bd90      	pop	{r4, r7, pc}
   147ca:	46c0      	nop			; (mov r8, r8)
   147cc:	200004e0 	.word	0x200004e0
   147d0:	0002d2e9 	.word	0x0002d2e9
   147d4:	0002dce9 	.word	0x0002dce9

000147d8 <rename_to_unique>:
 * \param[out] file_path_name The file name change to uniquely and changed name is returned to this buffer.
 * \param[in] max_len Maximum file name length.
 * \return true if this file name is unique, false otherwise.
 */
static bool rename_to_unique(FIL *fp, char *file_path_name, uint8_t max_len)
{
   147d8:	b580      	push	{r7, lr}
   147da:	b09e      	sub	sp, #120	; 0x78
   147dc:	af00      	add	r7, sp, #0
   147de:	60f8      	str	r0, [r7, #12]
   147e0:	60b9      	str	r1, [r7, #8]
   147e2:	1dfb      	adds	r3, r7, #7
   147e4:	701a      	strb	r2, [r3, #0]
	#define NUMBRING_MAX (3)
	#define ADDITION_SIZE (NUMBRING_MAX + 1) /* '-' character is added before the number. */
	uint16_t i = 1, name_len = 0, ext_len = 0, count = 0;
   147e6:	2376      	movs	r3, #118	; 0x76
   147e8:	18fb      	adds	r3, r7, r3
   147ea:	2201      	movs	r2, #1
   147ec:	801a      	strh	r2, [r3, #0]
   147ee:	2374      	movs	r3, #116	; 0x74
   147f0:	18fb      	adds	r3, r7, r3
   147f2:	2200      	movs	r2, #0
   147f4:	801a      	strh	r2, [r3, #0]
   147f6:	236e      	movs	r3, #110	; 0x6e
   147f8:	18fb      	adds	r3, r7, r3
   147fa:	2200      	movs	r2, #0
   147fc:	801a      	strh	r2, [r3, #0]
   147fe:	2372      	movs	r3, #114	; 0x72
   14800:	18fb      	adds	r3, r7, r3
   14802:	2200      	movs	r2, #0
   14804:	801a      	strh	r2, [r3, #0]
	char name[MAIN_MAX_FILE_NAME_LENGTH + 1] = {0};
   14806:	2324      	movs	r3, #36	; 0x24
   14808:	18fb      	adds	r3, r7, r3
   1480a:	0018      	movs	r0, r3
   1480c:	2341      	movs	r3, #65	; 0x41
   1480e:	001a      	movs	r2, r3
   14810:	2100      	movs	r1, #0
   14812:	4b92      	ldr	r3, [pc, #584]	; (14a5c <rename_to_unique+0x284>)
   14814:	4798      	blx	r3
	char ext[MAIN_MAX_FILE_EXT_LENGTH + 1] = {0};
   14816:	2318      	movs	r3, #24
   14818:	18fb      	adds	r3, r7, r3
   1481a:	0018      	movs	r0, r3
   1481c:	2309      	movs	r3, #9
   1481e:	001a      	movs	r2, r3
   14820:	2100      	movs	r1, #0
   14822:	4b8e      	ldr	r3, [pc, #568]	; (14a5c <rename_to_unique+0x284>)
   14824:	4798      	blx	r3
	char numbering[NUMBRING_MAX + 1] = {0};
   14826:	2314      	movs	r3, #20
   14828:	18fb      	adds	r3, r7, r3
   1482a:	2200      	movs	r2, #0
   1482c:	601a      	str	r2, [r3, #0]
	char *p = NULL;
   1482e:	2300      	movs	r3, #0
   14830:	66bb      	str	r3, [r7, #104]	; 0x68
	bool valid_ext = false;
   14832:	2371      	movs	r3, #113	; 0x71
   14834:	18fb      	adds	r3, r7, r3
   14836:	2200      	movs	r2, #0
   14838:	701a      	strb	r2, [r3, #0]

	if (file_path_name == NULL) {
   1483a:	68bb      	ldr	r3, [r7, #8]
   1483c:	2b00      	cmp	r3, #0
   1483e:	d101      	bne.n	14844 <rename_to_unique+0x6c>
		return false;
   14840:	2300      	movs	r3, #0
   14842:	e106      	b.n	14a52 <rename_to_unique+0x27a>
	}

	if (!is_exist_file(fp, file_path_name)) {
   14844:	68ba      	ldr	r2, [r7, #8]
   14846:	68fb      	ldr	r3, [r7, #12]
   14848:	0011      	movs	r1, r2
   1484a:	0018      	movs	r0, r3
   1484c:	4b84      	ldr	r3, [pc, #528]	; (14a60 <rename_to_unique+0x288>)
   1484e:	4798      	blx	r3
   14850:	0003      	movs	r3, r0
   14852:	001a      	movs	r2, r3
   14854:	2301      	movs	r3, #1
   14856:	4053      	eors	r3, r2
   14858:	b2db      	uxtb	r3, r3
   1485a:	2b00      	cmp	r3, #0
   1485c:	d001      	beq.n	14862 <rename_to_unique+0x8a>
		return true;
   1485e:	2301      	movs	r3, #1
   14860:	e0f7      	b.n	14a52 <rename_to_unique+0x27a>
	} 
	else if (strlen(file_path_name) > MAIN_MAX_FILE_NAME_LENGTH) {
   14862:	68bb      	ldr	r3, [r7, #8]
   14864:	0018      	movs	r0, r3
   14866:	4b7f      	ldr	r3, [pc, #508]	; (14a64 <rename_to_unique+0x28c>)
   14868:	4798      	blx	r3
   1486a:	0003      	movs	r3, r0
   1486c:	2b40      	cmp	r3, #64	; 0x40
   1486e:	d901      	bls.n	14874 <rename_to_unique+0x9c>
		return false;
   14870:	2300      	movs	r3, #0
   14872:	e0ee      	b.n	14a52 <rename_to_unique+0x27a>
	}

	p = strrchr(file_path_name, '.');
   14874:	68bb      	ldr	r3, [r7, #8]
   14876:	212e      	movs	r1, #46	; 0x2e
   14878:	0018      	movs	r0, r3
   1487a:	4b7b      	ldr	r3, [pc, #492]	; (14a68 <rename_to_unique+0x290>)
   1487c:	4798      	blx	r3
   1487e:	0003      	movs	r3, r0
   14880:	66bb      	str	r3, [r7, #104]	; 0x68
	if (p != NULL) {
   14882:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   14884:	2b00      	cmp	r3, #0
   14886:	d052      	beq.n	1492e <rename_to_unique+0x156>
		ext_len = strlen(p);
   14888:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1488a:	0018      	movs	r0, r3
   1488c:	4b75      	ldr	r3, [pc, #468]	; (14a64 <rename_to_unique+0x28c>)
   1488e:	4798      	blx	r3
   14890:	0002      	movs	r2, r0
   14892:	236e      	movs	r3, #110	; 0x6e
   14894:	18fb      	adds	r3, r7, r3
   14896:	801a      	strh	r2, [r3, #0]
		if (ext_len < MAIN_MAX_FILE_EXT_LENGTH) {
   14898:	236e      	movs	r3, #110	; 0x6e
   1489a:	18fb      	adds	r3, r7, r3
   1489c:	881b      	ldrh	r3, [r3, #0]
   1489e:	2b07      	cmp	r3, #7
   148a0:	d837      	bhi.n	14912 <rename_to_unique+0x13a>
			valid_ext = true;
   148a2:	2371      	movs	r3, #113	; 0x71
   148a4:	18fb      	adds	r3, r7, r3
   148a6:	2201      	movs	r2, #1
   148a8:	701a      	strb	r2, [r3, #0]
			strcpy(ext, p);
   148aa:	6eba      	ldr	r2, [r7, #104]	; 0x68
   148ac:	2318      	movs	r3, #24
   148ae:	18fb      	adds	r3, r7, r3
   148b0:	0011      	movs	r1, r2
   148b2:	0018      	movs	r0, r3
   148b4:	4b6d      	ldr	r3, [pc, #436]	; (14a6c <rename_to_unique+0x294>)
   148b6:	4798      	blx	r3
			if (strlen(file_path_name) - ext_len > MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE) {
   148b8:	68bb      	ldr	r3, [r7, #8]
   148ba:	0018      	movs	r0, r3
   148bc:	4b69      	ldr	r3, [pc, #420]	; (14a64 <rename_to_unique+0x28c>)
   148be:	4798      	blx	r3
   148c0:	0002      	movs	r2, r0
   148c2:	236e      	movs	r3, #110	; 0x6e
   148c4:	18fb      	adds	r3, r7, r3
   148c6:	881b      	ldrh	r3, [r3, #0]
   148c8:	1ad3      	subs	r3, r2, r3
   148ca:	2b3c      	cmp	r3, #60	; 0x3c
   148cc:	d911      	bls.n	148f2 <rename_to_unique+0x11a>
				name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE - ext_len;
   148ce:	2374      	movs	r3, #116	; 0x74
   148d0:	18fb      	adds	r3, r7, r3
   148d2:	226e      	movs	r2, #110	; 0x6e
   148d4:	18ba      	adds	r2, r7, r2
   148d6:	8812      	ldrh	r2, [r2, #0]
   148d8:	213c      	movs	r1, #60	; 0x3c
   148da:	1a8a      	subs	r2, r1, r2
   148dc:	801a      	strh	r2, [r3, #0]
				strncpy(name, file_path_name, name_len);
   148de:	2374      	movs	r3, #116	; 0x74
   148e0:	18fb      	adds	r3, r7, r3
   148e2:	881a      	ldrh	r2, [r3, #0]
   148e4:	68b9      	ldr	r1, [r7, #8]
   148e6:	2324      	movs	r3, #36	; 0x24
   148e8:	18fb      	adds	r3, r7, r3
   148ea:	0018      	movs	r0, r3
   148ec:	4b60      	ldr	r3, [pc, #384]	; (14a70 <rename_to_unique+0x298>)
   148ee:	4798      	blx	r3
   148f0:	e02a      	b.n	14948 <rename_to_unique+0x170>
			} 
			else {
				name_len = (p - file_path_name);
   148f2:	6eba      	ldr	r2, [r7, #104]	; 0x68
   148f4:	68bb      	ldr	r3, [r7, #8]
   148f6:	1ad2      	subs	r2, r2, r3
   148f8:	2374      	movs	r3, #116	; 0x74
   148fa:	18fb      	adds	r3, r7, r3
   148fc:	801a      	strh	r2, [r3, #0]
				strncpy(name, file_path_name, name_len);
   148fe:	2374      	movs	r3, #116	; 0x74
   14900:	18fb      	adds	r3, r7, r3
   14902:	881a      	ldrh	r2, [r3, #0]
   14904:	68b9      	ldr	r1, [r7, #8]
   14906:	2324      	movs	r3, #36	; 0x24
   14908:	18fb      	adds	r3, r7, r3
   1490a:	0018      	movs	r0, r3
   1490c:	4b58      	ldr	r3, [pc, #352]	; (14a70 <rename_to_unique+0x298>)
   1490e:	4798      	blx	r3
   14910:	e01a      	b.n	14948 <rename_to_unique+0x170>
			}
		} 
		else {
			name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   14912:	2374      	movs	r3, #116	; 0x74
   14914:	18fb      	adds	r3, r7, r3
   14916:	223c      	movs	r2, #60	; 0x3c
   14918:	801a      	strh	r2, [r3, #0]
			strncpy(name, file_path_name, name_len);
   1491a:	2374      	movs	r3, #116	; 0x74
   1491c:	18fb      	adds	r3, r7, r3
   1491e:	881a      	ldrh	r2, [r3, #0]
   14920:	68b9      	ldr	r1, [r7, #8]
   14922:	2324      	movs	r3, #36	; 0x24
   14924:	18fb      	adds	r3, r7, r3
   14926:	0018      	movs	r0, r3
   14928:	4b51      	ldr	r3, [pc, #324]	; (14a70 <rename_to_unique+0x298>)
   1492a:	4798      	blx	r3
   1492c:	e00c      	b.n	14948 <rename_to_unique+0x170>
		}
	} 
	else {
		name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   1492e:	2374      	movs	r3, #116	; 0x74
   14930:	18fb      	adds	r3, r7, r3
   14932:	223c      	movs	r2, #60	; 0x3c
   14934:	801a      	strh	r2, [r3, #0]
		strncpy(name, file_path_name, name_len);
   14936:	2374      	movs	r3, #116	; 0x74
   14938:	18fb      	adds	r3, r7, r3
   1493a:	881a      	ldrh	r2, [r3, #0]
   1493c:	68b9      	ldr	r1, [r7, #8]
   1493e:	2324      	movs	r3, #36	; 0x24
   14940:	18fb      	adds	r3, r7, r3
   14942:	0018      	movs	r0, r3
   14944:	4b4a      	ldr	r3, [pc, #296]	; (14a70 <rename_to_unique+0x298>)
   14946:	4798      	blx	r3
	}

	name[name_len++] = '-';
   14948:	2374      	movs	r3, #116	; 0x74
   1494a:	18fb      	adds	r3, r7, r3
   1494c:	881b      	ldrh	r3, [r3, #0]
   1494e:	2274      	movs	r2, #116	; 0x74
   14950:	18ba      	adds	r2, r7, r2
   14952:	1c59      	adds	r1, r3, #1
   14954:	8011      	strh	r1, [r2, #0]
   14956:	001a      	movs	r2, r3
   14958:	2324      	movs	r3, #36	; 0x24
   1495a:	18fb      	adds	r3, r7, r3
   1495c:	212d      	movs	r1, #45	; 0x2d
   1495e:	5499      	strb	r1, [r3, r2]

	for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
   14960:	2376      	movs	r3, #118	; 0x76
   14962:	18fb      	adds	r3, r7, r3
   14964:	2200      	movs	r2, #0
   14966:	801a      	strh	r2, [r3, #0]
   14968:	2372      	movs	r3, #114	; 0x72
   1496a:	18fb      	adds	r3, r7, r3
   1496c:	2201      	movs	r2, #1
   1496e:	801a      	strh	r2, [r3, #0]
   14970:	e010      	b.n	14994 <rename_to_unique+0x1bc>
		count *= 10;
   14972:	2372      	movs	r3, #114	; 0x72
   14974:	18fa      	adds	r2, r7, r3
   14976:	2372      	movs	r3, #114	; 0x72
   14978:	18fb      	adds	r3, r7, r3
   1497a:	881b      	ldrh	r3, [r3, #0]
   1497c:	1c19      	adds	r1, r3, #0
   1497e:	0089      	lsls	r1, r1, #2
   14980:	18cb      	adds	r3, r1, r3
   14982:	18db      	adds	r3, r3, r3
   14984:	8013      	strh	r3, [r2, #0]
	for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
   14986:	2376      	movs	r3, #118	; 0x76
   14988:	18fb      	adds	r3, r7, r3
   1498a:	881a      	ldrh	r2, [r3, #0]
   1498c:	2376      	movs	r3, #118	; 0x76
   1498e:	18fb      	adds	r3, r7, r3
   14990:	3201      	adds	r2, #1
   14992:	801a      	strh	r2, [r3, #0]
   14994:	2376      	movs	r3, #118	; 0x76
   14996:	18fb      	adds	r3, r7, r3
   14998:	881b      	ldrh	r3, [r3, #0]
   1499a:	2b02      	cmp	r3, #2
   1499c:	d9e9      	bls.n	14972 <rename_to_unique+0x19a>
	}
	for (i = 1; i < count; i++) {
   1499e:	2376      	movs	r3, #118	; 0x76
   149a0:	18fb      	adds	r3, r7, r3
   149a2:	2201      	movs	r2, #1
   149a4:	801a      	strh	r2, [r3, #0]
   149a6:	e04b      	b.n	14a40 <rename_to_unique+0x268>
		sprintf(numbering, MAIN_ZERO_FMT(NUMBRING_MAX), i);
   149a8:	2376      	movs	r3, #118	; 0x76
   149aa:	18fb      	adds	r3, r7, r3
   149ac:	881a      	ldrh	r2, [r3, #0]
   149ae:	4931      	ldr	r1, [pc, #196]	; (14a74 <rename_to_unique+0x29c>)
   149b0:	2314      	movs	r3, #20
   149b2:	18fb      	adds	r3, r7, r3
   149b4:	0018      	movs	r0, r3
   149b6:	4b30      	ldr	r3, [pc, #192]	; (14a78 <rename_to_unique+0x2a0>)
   149b8:	4798      	blx	r3
		strncpy(&name[name_len], numbering, NUMBRING_MAX);
   149ba:	2374      	movs	r3, #116	; 0x74
   149bc:	18fb      	adds	r3, r7, r3
   149be:	881b      	ldrh	r3, [r3, #0]
   149c0:	2224      	movs	r2, #36	; 0x24
   149c2:	18ba      	adds	r2, r7, r2
   149c4:	18d3      	adds	r3, r2, r3
   149c6:	2214      	movs	r2, #20
   149c8:	18b9      	adds	r1, r7, r2
   149ca:	2203      	movs	r2, #3
   149cc:	0018      	movs	r0, r3
   149ce:	4b28      	ldr	r3, [pc, #160]	; (14a70 <rename_to_unique+0x298>)
   149d0:	4798      	blx	r3
		if (valid_ext) {
   149d2:	2371      	movs	r3, #113	; 0x71
   149d4:	18fb      	adds	r3, r7, r3
   149d6:	781b      	ldrb	r3, [r3, #0]
   149d8:	2b00      	cmp	r3, #0
   149da:	d00c      	beq.n	149f6 <rename_to_unique+0x21e>
			strcpy(&name[name_len + NUMBRING_MAX], ext);
   149dc:	2374      	movs	r3, #116	; 0x74
   149de:	18fb      	adds	r3, r7, r3
   149e0:	881b      	ldrh	r3, [r3, #0]
   149e2:	3303      	adds	r3, #3
   149e4:	2224      	movs	r2, #36	; 0x24
   149e6:	18ba      	adds	r2, r7, r2
   149e8:	18d3      	adds	r3, r2, r3
   149ea:	2218      	movs	r2, #24
   149ec:	18ba      	adds	r2, r7, r2
   149ee:	0011      	movs	r1, r2
   149f0:	0018      	movs	r0, r3
   149f2:	4b1e      	ldr	r3, [pc, #120]	; (14a6c <rename_to_unique+0x294>)
   149f4:	4798      	blx	r3
		}

		if (!is_exist_file(fp, name)) {
   149f6:	2324      	movs	r3, #36	; 0x24
   149f8:	18fa      	adds	r2, r7, r3
   149fa:	68fb      	ldr	r3, [r7, #12]
   149fc:	0011      	movs	r1, r2
   149fe:	0018      	movs	r0, r3
   14a00:	4b17      	ldr	r3, [pc, #92]	; (14a60 <rename_to_unique+0x288>)
   14a02:	4798      	blx	r3
   14a04:	0003      	movs	r3, r0
   14a06:	001a      	movs	r2, r3
   14a08:	2301      	movs	r3, #1
   14a0a:	4053      	eors	r3, r2
   14a0c:	b2db      	uxtb	r3, r3
   14a0e:	2b00      	cmp	r3, #0
   14a10:	d00f      	beq.n	14a32 <rename_to_unique+0x25a>
			memset(file_path_name, 0, max_len);
   14a12:	1dfb      	adds	r3, r7, #7
   14a14:	781a      	ldrb	r2, [r3, #0]
   14a16:	68bb      	ldr	r3, [r7, #8]
   14a18:	2100      	movs	r1, #0
   14a1a:	0018      	movs	r0, r3
   14a1c:	4b0f      	ldr	r3, [pc, #60]	; (14a5c <rename_to_unique+0x284>)
   14a1e:	4798      	blx	r3
			strcpy(file_path_name, name);
   14a20:	2324      	movs	r3, #36	; 0x24
   14a22:	18fa      	adds	r2, r7, r3
   14a24:	68bb      	ldr	r3, [r7, #8]
   14a26:	0011      	movs	r1, r2
   14a28:	0018      	movs	r0, r3
   14a2a:	4b10      	ldr	r3, [pc, #64]	; (14a6c <rename_to_unique+0x294>)
   14a2c:	4798      	blx	r3
			return true;
   14a2e:	2301      	movs	r3, #1
   14a30:	e00f      	b.n	14a52 <rename_to_unique+0x27a>
	for (i = 1; i < count; i++) {
   14a32:	2376      	movs	r3, #118	; 0x76
   14a34:	18fb      	adds	r3, r7, r3
   14a36:	881a      	ldrh	r2, [r3, #0]
   14a38:	2376      	movs	r3, #118	; 0x76
   14a3a:	18fb      	adds	r3, r7, r3
   14a3c:	3201      	adds	r2, #1
   14a3e:	801a      	strh	r2, [r3, #0]
   14a40:	2376      	movs	r3, #118	; 0x76
   14a42:	18fa      	adds	r2, r7, r3
   14a44:	2372      	movs	r3, #114	; 0x72
   14a46:	18fb      	adds	r3, r7, r3
   14a48:	8812      	ldrh	r2, [r2, #0]
   14a4a:	881b      	ldrh	r3, [r3, #0]
   14a4c:	429a      	cmp	r2, r3
   14a4e:	d3ab      	bcc.n	149a8 <rename_to_unique+0x1d0>
		}
	}
	return false;
   14a50:	2300      	movs	r3, #0
}
   14a52:	0018      	movs	r0, r3
   14a54:	46bd      	mov	sp, r7
   14a56:	b01e      	add	sp, #120	; 0x78
   14a58:	bd80      	pop	{r7, pc}
   14a5a:	46c0      	nop			; (mov r8, r8)
   14a5c:	00034083 	.word	0x00034083
   14a60:	00014781 	.word	0x00014781
   14a64:	0003443b 	.word	0x0003443b
   14a68:	00034495 	.word	0x00034495
   14a6c:	000343ef 	.word	0x000343ef
   14a70:	0003446b 	.word	0x0003446b
   14a74:	00035768 	.word	0x00035768
   14a78:	00034341 	.word	0x00034341

00014a7c <start_download>:

/**
 * \brief Start file download via HTTP connection.
 */
static void start_download(void)
{
   14a7c:	b590      	push	{r4, r7, lr}
   14a7e:	b083      	sub	sp, #12
   14a80:	af02      	add	r7, sp, #8
	if (!is_state_set(STORAGE_READY)) {
   14a82:	2001      	movs	r0, #1
   14a84:	4b22      	ldr	r3, [pc, #136]	; (14b10 <start_download+0x94>)
   14a86:	4798      	blx	r3
   14a88:	0003      	movs	r3, r0
   14a8a:	001a      	movs	r2, r3
   14a8c:	2301      	movs	r3, #1
   14a8e:	4053      	eors	r3, r2
   14a90:	b2db      	uxtb	r3, r3
   14a92:	2b00      	cmp	r3, #0
   14a94:	d005      	beq.n	14aa2 <start_download+0x26>
		LogMessage(LOG_DEBUG_LVL,"start_download: MMC storage not ready.\r\n");
   14a96:	4b1f      	ldr	r3, [pc, #124]	; (14b14 <start_download+0x98>)
   14a98:	0019      	movs	r1, r3
   14a9a:	2001      	movs	r0, #1
   14a9c:	4b1e      	ldr	r3, [pc, #120]	; (14b18 <start_download+0x9c>)
   14a9e:	4798      	blx	r3
		return;
   14aa0:	e032      	b.n	14b08 <start_download+0x8c>
	}

	if (!is_state_set(WIFI_CONNECTED)) {
   14aa2:	2002      	movs	r0, #2
   14aa4:	4b1a      	ldr	r3, [pc, #104]	; (14b10 <start_download+0x94>)
   14aa6:	4798      	blx	r3
   14aa8:	0003      	movs	r3, r0
   14aaa:	001a      	movs	r2, r3
   14aac:	2301      	movs	r3, #1
   14aae:	4053      	eors	r3, r2
   14ab0:	b2db      	uxtb	r3, r3
   14ab2:	2b00      	cmp	r3, #0
   14ab4:	d005      	beq.n	14ac2 <start_download+0x46>
		LogMessage(LOG_DEBUG_LVL,"start_download: Wi-Fi is not connected.\r\n");
   14ab6:	4b19      	ldr	r3, [pc, #100]	; (14b1c <start_download+0xa0>)
   14ab8:	0019      	movs	r1, r3
   14aba:	2001      	movs	r0, #1
   14abc:	4b16      	ldr	r3, [pc, #88]	; (14b18 <start_download+0x9c>)
   14abe:	4798      	blx	r3
		return;
   14ac0:	e022      	b.n	14b08 <start_download+0x8c>
	}

	if (is_state_set(GET_REQUESTED)) {
   14ac2:	2004      	movs	r0, #4
   14ac4:	4b12      	ldr	r3, [pc, #72]	; (14b10 <start_download+0x94>)
   14ac6:	4798      	blx	r3
   14ac8:	1e03      	subs	r3, r0, #0
   14aca:	d005      	beq.n	14ad8 <start_download+0x5c>
		LogMessage(LOG_DEBUG_LVL,"start_download: request is sent already.\r\n");
   14acc:	4b14      	ldr	r3, [pc, #80]	; (14b20 <start_download+0xa4>)
   14ace:	0019      	movs	r1, r3
   14ad0:	2001      	movs	r0, #1
   14ad2:	4b11      	ldr	r3, [pc, #68]	; (14b18 <start_download+0x9c>)
   14ad4:	4798      	blx	r3
		return;
   14ad6:	e017      	b.n	14b08 <start_download+0x8c>
	}

	if (is_state_set(DOWNLOADING)) {
   14ad8:	2008      	movs	r0, #8
   14ada:	4b0d      	ldr	r3, [pc, #52]	; (14b10 <start_download+0x94>)
   14adc:	4798      	blx	r3
   14ade:	1e03      	subs	r3, r0, #0
   14ae0:	d005      	beq.n	14aee <start_download+0x72>
		LogMessage(LOG_DEBUG_LVL,"start_download: running download already.\r\n");
   14ae2:	4b10      	ldr	r3, [pc, #64]	; (14b24 <start_download+0xa8>)
   14ae4:	0019      	movs	r1, r3
   14ae6:	2001      	movs	r0, #1
   14ae8:	4b0b      	ldr	r3, [pc, #44]	; (14b18 <start_download+0x9c>)
   14aea:	4798      	blx	r3
		return;
   14aec:	e00c      	b.n	14b08 <start_download+0x8c>
	}

	/* Send the HTTP request. */
	LogMessage(LOG_DEBUG_LVL,"start_download: sending HTTP request...\r\n");
   14aee:	4b0e      	ldr	r3, [pc, #56]	; (14b28 <start_download+0xac>)
   14af0:	0019      	movs	r1, r3
   14af2:	2001      	movs	r0, #1
   14af4:	4b08      	ldr	r3, [pc, #32]	; (14b18 <start_download+0x9c>)
   14af6:	4798      	blx	r3
	http_client_send_request(&http_client_module_inst, MAIN_HTTP_FILE_URL, HTTP_METHOD_GET, NULL, NULL);
   14af8:	490c      	ldr	r1, [pc, #48]	; (14b2c <start_download+0xb0>)
   14afa:	480d      	ldr	r0, [pc, #52]	; (14b30 <start_download+0xb4>)
   14afc:	2300      	movs	r3, #0
   14afe:	9300      	str	r3, [sp, #0]
   14b00:	2300      	movs	r3, #0
   14b02:	2201      	movs	r2, #1
   14b04:	4c0b      	ldr	r4, [pc, #44]	; (14b34 <start_download+0xb8>)
   14b06:	47a0      	blx	r4
}
   14b08:	46bd      	mov	sp, r7
   14b0a:	b001      	add	sp, #4
   14b0c:	bd90      	pop	{r4, r7, pc}
   14b0e:	46c0      	nop			; (mov r8, r8)
   14b10:	00014755 	.word	0x00014755
   14b14:	00035770 	.word	0x00035770
   14b18:	0001dbf5 	.word	0x0001dbf5
   14b1c:	0003579c 	.word	0x0003579c
   14b20:	000357c8 	.word	0x000357c8
   14b24:	000357f4 	.word	0x000357f4
   14b28:	00035820 	.word	0x00035820
   14b2c:	0003584c 	.word	0x0003584c
   14b30:	200042a8 	.word	0x200042a8
   14b34:	0003093d 	.word	0x0003093d

00014b38 <store_file_packet>:
 * \brief Store received packet to file.
 * \param[in] data Packet data.
 * \param[in] length Packet data length.
 */
static void store_file_packet(char *data, uint32_t length)
{
   14b38:	b5b0      	push	{r4, r5, r7, lr}
   14b3a:	b086      	sub	sp, #24
   14b3c:	af00      	add	r7, sp, #0
   14b3e:	6078      	str	r0, [r7, #4]
   14b40:	6039      	str	r1, [r7, #0]
	FRESULT ret;
	if ((data == NULL) || (length < 1)) {
   14b42:	687b      	ldr	r3, [r7, #4]
   14b44:	2b00      	cmp	r3, #0
   14b46:	d002      	beq.n	14b4e <store_file_packet+0x16>
   14b48:	683b      	ldr	r3, [r7, #0]
   14b4a:	2b00      	cmp	r3, #0
   14b4c:	d105      	bne.n	14b5a <store_file_packet+0x22>
		LogMessage(LOG_DEBUG_LVL,"store_file_packet: empty data.\r\n");
   14b4e:	4b58      	ldr	r3, [pc, #352]	; (14cb0 <store_file_packet+0x178>)
   14b50:	0019      	movs	r1, r3
   14b52:	2001      	movs	r0, #1
   14b54:	4b57      	ldr	r3, [pc, #348]	; (14cb4 <store_file_packet+0x17c>)
   14b56:	4798      	blx	r3
		return;
   14b58:	e0a6      	b.n	14ca8 <store_file_packet+0x170>
	}

	if (!is_state_set(DOWNLOADING)) {
   14b5a:	2008      	movs	r0, #8
   14b5c:	4b56      	ldr	r3, [pc, #344]	; (14cb8 <store_file_packet+0x180>)
   14b5e:	4798      	blx	r3
   14b60:	0003      	movs	r3, r0
   14b62:	001a      	movs	r2, r3
   14b64:	2301      	movs	r3, #1
   14b66:	4053      	eors	r3, r2
   14b68:	b2db      	uxtb	r3, r3
   14b6a:	2b00      	cmp	r3, #0
   14b6c:	d055      	beq.n	14c1a <store_file_packet+0xe2>
		char *cp = NULL;
   14b6e:	2300      	movs	r3, #0
   14b70:	617b      	str	r3, [r7, #20]
		save_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   14b72:	4b52      	ldr	r3, [pc, #328]	; (14cbc <store_file_packet+0x184>)
   14b74:	2230      	movs	r2, #48	; 0x30
   14b76:	701a      	strb	r2, [r3, #0]
		save_file_name[1] = ':';
   14b78:	4b50      	ldr	r3, [pc, #320]	; (14cbc <store_file_packet+0x184>)
   14b7a:	223a      	movs	r2, #58	; 0x3a
   14b7c:	705a      	strb	r2, [r3, #1]
		cp = (char *)(MAIN_HTTP_FILE_URL + strlen(MAIN_HTTP_FILE_URL));
   14b7e:	4b50      	ldr	r3, [pc, #320]	; (14cc0 <store_file_packet+0x188>)
   14b80:	617b      	str	r3, [r7, #20]
		while (*cp != '/') {
   14b82:	e002      	b.n	14b8a <store_file_packet+0x52>
			cp--;
   14b84:	697b      	ldr	r3, [r7, #20]
   14b86:	3b01      	subs	r3, #1
   14b88:	617b      	str	r3, [r7, #20]
		while (*cp != '/') {
   14b8a:	697b      	ldr	r3, [r7, #20]
   14b8c:	781b      	ldrb	r3, [r3, #0]
   14b8e:	2b2f      	cmp	r3, #47	; 0x2f
   14b90:	d1f8      	bne.n	14b84 <store_file_packet+0x4c>
		}
		if (strlen(cp) > 1) {
   14b92:	697b      	ldr	r3, [r7, #20]
   14b94:	0018      	movs	r0, r3
   14b96:	4b4b      	ldr	r3, [pc, #300]	; (14cc4 <store_file_packet+0x18c>)
   14b98:	4798      	blx	r3
   14b9a:	0003      	movs	r3, r0
   14b9c:	2b01      	cmp	r3, #1
   14b9e:	d924      	bls.n	14bea <store_file_packet+0xb2>
			cp++;
   14ba0:	697b      	ldr	r3, [r7, #20]
   14ba2:	3301      	adds	r3, #1
   14ba4:	617b      	str	r3, [r7, #20]
			strcpy(&save_file_name[2], cp);
   14ba6:	697a      	ldr	r2, [r7, #20]
   14ba8:	4b47      	ldr	r3, [pc, #284]	; (14cc8 <store_file_packet+0x190>)
   14baa:	0011      	movs	r1, r2
   14bac:	0018      	movs	r0, r3
   14bae:	4b47      	ldr	r3, [pc, #284]	; (14ccc <store_file_packet+0x194>)
   14bb0:	4798      	blx	r3
			LogMessage(LOG_DEBUG_LVL,"store_file_packet: file name is invalid. Download canceled.\r\n");
			add_state(CANCELED);
			return;
		}

		rename_to_unique(&file_object, save_file_name, MAIN_MAX_FILE_NAME_LENGTH);
   14bb2:	4942      	ldr	r1, [pc, #264]	; (14cbc <store_file_packet+0x184>)
   14bb4:	4b46      	ldr	r3, [pc, #280]	; (14cd0 <store_file_packet+0x198>)
   14bb6:	2240      	movs	r2, #64	; 0x40
   14bb8:	0018      	movs	r0, r3
   14bba:	4b46      	ldr	r3, [pc, #280]	; (14cd4 <store_file_packet+0x19c>)
   14bbc:	4798      	blx	r3
		LogMessage(LOG_DEBUG_LVL,"store_file_packet: creating file [%s]\r\n", save_file_name);
   14bbe:	4a3f      	ldr	r2, [pc, #252]	; (14cbc <store_file_packet+0x184>)
   14bc0:	4b45      	ldr	r3, [pc, #276]	; (14cd8 <store_file_packet+0x1a0>)
   14bc2:	0019      	movs	r1, r3
   14bc4:	2001      	movs	r0, #1
   14bc6:	4b3b      	ldr	r3, [pc, #236]	; (14cb4 <store_file_packet+0x17c>)
   14bc8:	4798      	blx	r3
		ret = f_open(&file_object, (char const *)save_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   14bca:	2313      	movs	r3, #19
   14bcc:	18fc      	adds	r4, r7, r3
   14bce:	493b      	ldr	r1, [pc, #236]	; (14cbc <store_file_packet+0x184>)
   14bd0:	4b3f      	ldr	r3, [pc, #252]	; (14cd0 <store_file_packet+0x198>)
   14bd2:	220a      	movs	r2, #10
   14bd4:	0018      	movs	r0, r3
   14bd6:	4b41      	ldr	r3, [pc, #260]	; (14cdc <store_file_packet+0x1a4>)
   14bd8:	4798      	blx	r3
   14bda:	0003      	movs	r3, r0
   14bdc:	7023      	strb	r3, [r4, #0]
		if (ret != FR_OK) {
   14bde:	2313      	movs	r3, #19
   14be0:	18fb      	adds	r3, r7, r3
   14be2:	781b      	ldrb	r3, [r3, #0]
   14be4:	2b00      	cmp	r3, #0
   14be6:	d012      	beq.n	14c0e <store_file_packet+0xd6>
   14be8:	e008      	b.n	14bfc <store_file_packet+0xc4>
			LogMessage(LOG_DEBUG_LVL,"store_file_packet: file name is invalid. Download canceled.\r\n");
   14bea:	4b3d      	ldr	r3, [pc, #244]	; (14ce0 <store_file_packet+0x1a8>)
   14bec:	0019      	movs	r1, r3
   14bee:	2001      	movs	r0, #1
   14bf0:	4b30      	ldr	r3, [pc, #192]	; (14cb4 <store_file_packet+0x17c>)
   14bf2:	4798      	blx	r3
			add_state(CANCELED);
   14bf4:	2020      	movs	r0, #32
   14bf6:	4b3b      	ldr	r3, [pc, #236]	; (14ce4 <store_file_packet+0x1ac>)
   14bf8:	4798      	blx	r3
			return;
   14bfa:	e055      	b.n	14ca8 <store_file_packet+0x170>
			LogMessage(LOG_DEBUG_LVL,"store_file_packet: file creation error! ret:%d\r\n", ret);
   14bfc:	2313      	movs	r3, #19
   14bfe:	18fb      	adds	r3, r7, r3
   14c00:	781a      	ldrb	r2, [r3, #0]
   14c02:	4b39      	ldr	r3, [pc, #228]	; (14ce8 <store_file_packet+0x1b0>)
   14c04:	0019      	movs	r1, r3
   14c06:	2001      	movs	r0, #1
   14c08:	4b2a      	ldr	r3, [pc, #168]	; (14cb4 <store_file_packet+0x17c>)
   14c0a:	4798      	blx	r3
			return;
   14c0c:	e04c      	b.n	14ca8 <store_file_packet+0x170>
		}

		received_file_size = 0;
   14c0e:	4b37      	ldr	r3, [pc, #220]	; (14cec <store_file_packet+0x1b4>)
   14c10:	2200      	movs	r2, #0
   14c12:	601a      	str	r2, [r3, #0]
		add_state(DOWNLOADING);
   14c14:	2008      	movs	r0, #8
   14c16:	4b33      	ldr	r3, [pc, #204]	; (14ce4 <store_file_packet+0x1ac>)
   14c18:	4798      	blx	r3
	}

	if (data != NULL) {
   14c1a:	687b      	ldr	r3, [r7, #4]
   14c1c:	2b00      	cmp	r3, #0
   14c1e:	d043      	beq.n	14ca8 <store_file_packet+0x170>
		UINT wsize = 0;
   14c20:	2300      	movs	r3, #0
   14c22:	60fb      	str	r3, [r7, #12]
		ret = f_write(&file_object, (const void *)data, length, &wsize);
   14c24:	2313      	movs	r3, #19
   14c26:	18fc      	adds	r4, r7, r3
   14c28:	230c      	movs	r3, #12
   14c2a:	18fb      	adds	r3, r7, r3
   14c2c:	683a      	ldr	r2, [r7, #0]
   14c2e:	6879      	ldr	r1, [r7, #4]
   14c30:	4827      	ldr	r0, [pc, #156]	; (14cd0 <store_file_packet+0x198>)
   14c32:	4d2f      	ldr	r5, [pc, #188]	; (14cf0 <store_file_packet+0x1b8>)
   14c34:	47a8      	blx	r5
   14c36:	0003      	movs	r3, r0
   14c38:	7023      	strb	r3, [r4, #0]
		if (ret != FR_OK) {
   14c3a:	2313      	movs	r3, #19
   14c3c:	18fb      	adds	r3, r7, r3
   14c3e:	781b      	ldrb	r3, [r3, #0]
   14c40:	2b00      	cmp	r3, #0
   14c42:	d00c      	beq.n	14c5e <store_file_packet+0x126>
			f_close(&file_object);
   14c44:	4b22      	ldr	r3, [pc, #136]	; (14cd0 <store_file_packet+0x198>)
   14c46:	0018      	movs	r0, r3
   14c48:	4b2a      	ldr	r3, [pc, #168]	; (14cf4 <store_file_packet+0x1bc>)
   14c4a:	4798      	blx	r3
			add_state(CANCELED);
   14c4c:	2020      	movs	r0, #32
   14c4e:	4b25      	ldr	r3, [pc, #148]	; (14ce4 <store_file_packet+0x1ac>)
   14c50:	4798      	blx	r3
			LogMessage(LOG_DEBUG_LVL,"store_file_packet: file write error, download canceled.\r\n");
   14c52:	4b29      	ldr	r3, [pc, #164]	; (14cf8 <store_file_packet+0x1c0>)
   14c54:	0019      	movs	r1, r3
   14c56:	2001      	movs	r0, #1
   14c58:	4b16      	ldr	r3, [pc, #88]	; (14cb4 <store_file_packet+0x17c>)
   14c5a:	4798      	blx	r3
			return;
   14c5c:	e024      	b.n	14ca8 <store_file_packet+0x170>
		}

		received_file_size += wsize;
   14c5e:	4b23      	ldr	r3, [pc, #140]	; (14cec <store_file_packet+0x1b4>)
   14c60:	681a      	ldr	r2, [r3, #0]
   14c62:	68fb      	ldr	r3, [r7, #12]
   14c64:	18d2      	adds	r2, r2, r3
   14c66:	4b21      	ldr	r3, [pc, #132]	; (14cec <store_file_packet+0x1b4>)
   14c68:	601a      	str	r2, [r3, #0]
		LogMessage(LOG_DEBUG_LVL,"store_file_packet: received[%lu], file size[%lu]\r\n", (unsigned long)received_file_size, (unsigned long)http_file_size);
   14c6a:	4b20      	ldr	r3, [pc, #128]	; (14cec <store_file_packet+0x1b4>)
   14c6c:	681a      	ldr	r2, [r3, #0]
   14c6e:	4b23      	ldr	r3, [pc, #140]	; (14cfc <store_file_packet+0x1c4>)
   14c70:	681b      	ldr	r3, [r3, #0]
   14c72:	4923      	ldr	r1, [pc, #140]	; (14d00 <store_file_packet+0x1c8>)
   14c74:	2001      	movs	r0, #1
   14c76:	4c0f      	ldr	r4, [pc, #60]	; (14cb4 <store_file_packet+0x17c>)
   14c78:	47a0      	blx	r4
		if (received_file_size >= http_file_size) {
   14c7a:	4b1c      	ldr	r3, [pc, #112]	; (14cec <store_file_packet+0x1b4>)
   14c7c:	681a      	ldr	r2, [r3, #0]
   14c7e:	4b1f      	ldr	r3, [pc, #124]	; (14cfc <store_file_packet+0x1c4>)
   14c80:	681b      	ldr	r3, [r3, #0]
   14c82:	429a      	cmp	r2, r3
   14c84:	d310      	bcc.n	14ca8 <store_file_packet+0x170>
			f_close(&file_object);
   14c86:	4b12      	ldr	r3, [pc, #72]	; (14cd0 <store_file_packet+0x198>)
   14c88:	0018      	movs	r0, r3
   14c8a:	4b1a      	ldr	r3, [pc, #104]	; (14cf4 <store_file_packet+0x1bc>)
   14c8c:	4798      	blx	r3
			LogMessage(LOG_DEBUG_LVL,"store_file_packet: file downloaded successfully.\r\n");
   14c8e:	4b1d      	ldr	r3, [pc, #116]	; (14d04 <store_file_packet+0x1cc>)
   14c90:	0019      	movs	r1, r3
   14c92:	2001      	movs	r0, #1
   14c94:	4b07      	ldr	r3, [pc, #28]	; (14cb4 <store_file_packet+0x17c>)
   14c96:	4798      	blx	r3
			port_pin_set_output_level(LED_0_PIN, false);
   14c98:	2100      	movs	r1, #0
   14c9a:	2017      	movs	r0, #23
   14c9c:	4b1a      	ldr	r3, [pc, #104]	; (14d08 <store_file_packet+0x1d0>)
   14c9e:	4798      	blx	r3
			add_state(COMPLETED);
   14ca0:	2010      	movs	r0, #16
   14ca2:	4b10      	ldr	r3, [pc, #64]	; (14ce4 <store_file_packet+0x1ac>)
   14ca4:	4798      	blx	r3
			return;
   14ca6:	46c0      	nop			; (mov r8, r8)
		}
	}
}
   14ca8:	46bd      	mov	sp, r7
   14caa:	b006      	add	sp, #24
   14cac:	bdb0      	pop	{r4, r5, r7, pc}
   14cae:	46c0      	nop			; (mov r8, r8)
   14cb0:	00035878 	.word	0x00035878
   14cb4:	0001dbf5 	.word	0x0001dbf5
   14cb8:	00014755 	.word	0x00014755
   14cbc:	2000005c 	.word	0x2000005c
   14cc0:	00035876 	.word	0x00035876
   14cc4:	0003443b 	.word	0x0003443b
   14cc8:	2000005e 	.word	0x2000005e
   14ccc:	000343ef 	.word	0x000343ef
   14cd0:	200004e0 	.word	0x200004e0
   14cd4:	000147d9 	.word	0x000147d9
   14cd8:	000358dc 	.word	0x000358dc
   14cdc:	0002d2e9 	.word	0x0002d2e9
   14ce0:	0003589c 	.word	0x0003589c
   14ce4:	0001472d 	.word	0x0001472d
   14ce8:	00035904 	.word	0x00035904
   14cec:	20000508 	.word	0x20000508
   14cf0:	0002d819 	.word	0x0002d819
   14cf4:	0002dce9 	.word	0x0002dce9
   14cf8:	00035938 	.word	0x00035938
   14cfc:	20000504 	.word	0x20000504
   14d00:	00035974 	.word	0x00035974
   14d04:	000359a8 	.word	0x000359a8
   14d08:	00014691 	.word	0x00014691

00014d0c <http_client_callback>:
 * \param[in]  module_inst     Module instance of HTTP client module.
 * \param[in]  type            Type of event.
 * \param[in]  data            Data structure of the event. \refer http_client_data
 */
static void http_client_callback(struct http_client_module *module_inst, int type, union http_client_data *data)
{
   14d0c:	b590      	push	{r4, r7, lr}
   14d0e:	b085      	sub	sp, #20
   14d10:	af00      	add	r7, sp, #0
   14d12:	60f8      	str	r0, [r7, #12]
   14d14:	60b9      	str	r1, [r7, #8]
   14d16:	607a      	str	r2, [r7, #4]
	switch (type) {
   14d18:	68bb      	ldr	r3, [r7, #8]
   14d1a:	2b04      	cmp	r3, #4
   14d1c:	d900      	bls.n	14d20 <http_client_callback+0x14>
   14d1e:	e077      	b.n	14e10 <http_client_callback+0x104>
   14d20:	68bb      	ldr	r3, [r7, #8]
   14d22:	009a      	lsls	r2, r3, #2
   14d24:	4b3c      	ldr	r3, [pc, #240]	; (14e18 <http_client_callback+0x10c>)
   14d26:	18d3      	adds	r3, r2, r3
   14d28:	681b      	ldr	r3, [r3, #0]
   14d2a:	469f      	mov	pc, r3
	case HTTP_CLIENT_CALLBACK_SOCK_CONNECTED:
		LogMessage(LOG_DEBUG_LVL,"http_client_callback: HTTP client socket connected.\r\n");
   14d2c:	4b3b      	ldr	r3, [pc, #236]	; (14e1c <http_client_callback+0x110>)
   14d2e:	0019      	movs	r1, r3
   14d30:	2001      	movs	r0, #1
   14d32:	4b3b      	ldr	r3, [pc, #236]	; (14e20 <http_client_callback+0x114>)
   14d34:	4798      	blx	r3
		break;
   14d36:	e06b      	b.n	14e10 <http_client_callback+0x104>

	case HTTP_CLIENT_CALLBACK_REQUESTED:
		LogMessage(LOG_DEBUG_LVL,"http_client_callback: request completed.\r\n");
   14d38:	4b3a      	ldr	r3, [pc, #232]	; (14e24 <http_client_callback+0x118>)
   14d3a:	0019      	movs	r1, r3
   14d3c:	2001      	movs	r0, #1
   14d3e:	4b38      	ldr	r3, [pc, #224]	; (14e20 <http_client_callback+0x114>)
   14d40:	4798      	blx	r3
		add_state(GET_REQUESTED);
   14d42:	2004      	movs	r0, #4
   14d44:	4b38      	ldr	r3, [pc, #224]	; (14e28 <http_client_callback+0x11c>)
   14d46:	4798      	blx	r3
		break;
   14d48:	e062      	b.n	14e10 <http_client_callback+0x104>

	case HTTP_CLIENT_CALLBACK_RECV_RESPONSE:
		LogMessage(LOG_DEBUG_LVL,"http_client_callback: received response %u data size %u\r\n",
				(unsigned int)data->recv_response.response_code,
   14d4a:	687b      	ldr	r3, [r7, #4]
   14d4c:	881b      	ldrh	r3, [r3, #0]
		LogMessage(LOG_DEBUG_LVL,"http_client_callback: received response %u data size %u\r\n",
   14d4e:	001a      	movs	r2, r3
				(unsigned int)data->recv_response.content_length);
   14d50:	687b      	ldr	r3, [r7, #4]
   14d52:	685b      	ldr	r3, [r3, #4]
		LogMessage(LOG_DEBUG_LVL,"http_client_callback: received response %u data size %u\r\n",
   14d54:	4935      	ldr	r1, [pc, #212]	; (14e2c <http_client_callback+0x120>)
   14d56:	2001      	movs	r0, #1
   14d58:	4c31      	ldr	r4, [pc, #196]	; (14e20 <http_client_callback+0x114>)
   14d5a:	47a0      	blx	r4
		if ((unsigned int)data->recv_response.response_code == 200) {
   14d5c:	687b      	ldr	r3, [r7, #4]
   14d5e:	881b      	ldrh	r3, [r3, #0]
   14d60:	2bc8      	cmp	r3, #200	; 0xc8
   14d62:	d10d      	bne.n	14d80 <http_client_callback+0x74>
			http_file_size = data->recv_response.content_length;
   14d64:	687b      	ldr	r3, [r7, #4]
   14d66:	685a      	ldr	r2, [r3, #4]
   14d68:	4b31      	ldr	r3, [pc, #196]	; (14e30 <http_client_callback+0x124>)
   14d6a:	601a      	str	r2, [r3, #0]
			received_file_size = 0;
   14d6c:	4b31      	ldr	r3, [pc, #196]	; (14e34 <http_client_callback+0x128>)
   14d6e:	2200      	movs	r2, #0
   14d70:	601a      	str	r2, [r3, #0]
		} 
		else {
			add_state(CANCELED);
			return;
		}
		if (data->recv_response.content_length <= MAIN_BUFFER_MAX_SIZE) {
   14d72:	687b      	ldr	r3, [r7, #4]
   14d74:	685a      	ldr	r2, [r3, #4]
   14d76:	2380      	movs	r3, #128	; 0x80
   14d78:	009b      	lsls	r3, r3, #2
   14d7a:	429a      	cmp	r2, r3
   14d7c:	d843      	bhi.n	14e06 <http_client_callback+0xfa>
   14d7e:	e003      	b.n	14d88 <http_client_callback+0x7c>
			add_state(CANCELED);
   14d80:	2020      	movs	r0, #32
   14d82:	4b29      	ldr	r3, [pc, #164]	; (14e28 <http_client_callback+0x11c>)
   14d84:	4798      	blx	r3
			return;
   14d86:	e043      	b.n	14e10 <http_client_callback+0x104>
			store_file_packet(data->recv_response.content, data->recv_response.content_length);
   14d88:	687b      	ldr	r3, [r7, #4]
   14d8a:	689a      	ldr	r2, [r3, #8]
   14d8c:	687b      	ldr	r3, [r7, #4]
   14d8e:	685b      	ldr	r3, [r3, #4]
   14d90:	0019      	movs	r1, r3
   14d92:	0010      	movs	r0, r2
   14d94:	4b28      	ldr	r3, [pc, #160]	; (14e38 <http_client_callback+0x12c>)
   14d96:	4798      	blx	r3
			add_state(COMPLETED);
   14d98:	2010      	movs	r0, #16
   14d9a:	4b23      	ldr	r3, [pc, #140]	; (14e28 <http_client_callback+0x11c>)
   14d9c:	4798      	blx	r3
		}
		break;
   14d9e:	e032      	b.n	14e06 <http_client_callback+0xfa>

	case HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA:
		store_file_packet(data->recv_chunked_data.data, data->recv_chunked_data.length);
   14da0:	687b      	ldr	r3, [r7, #4]
   14da2:	685a      	ldr	r2, [r3, #4]
   14da4:	687b      	ldr	r3, [r7, #4]
   14da6:	681b      	ldr	r3, [r3, #0]
   14da8:	0019      	movs	r1, r3
   14daa:	0010      	movs	r0, r2
   14dac:	4b22      	ldr	r3, [pc, #136]	; (14e38 <http_client_callback+0x12c>)
   14dae:	4798      	blx	r3
		if (data->recv_chunked_data.is_complete) {
   14db0:	687b      	ldr	r3, [r7, #4]
   14db2:	7a1b      	ldrb	r3, [r3, #8]
   14db4:	2b00      	cmp	r3, #0
   14db6:	d028      	beq.n	14e0a <http_client_callback+0xfe>
			add_state(COMPLETED);
   14db8:	2010      	movs	r0, #16
   14dba:	4b1b      	ldr	r3, [pc, #108]	; (14e28 <http_client_callback+0x11c>)
   14dbc:	4798      	blx	r3
		}

		break;
   14dbe:	e024      	b.n	14e0a <http_client_callback+0xfe>

	case HTTP_CLIENT_CALLBACK_DISCONNECTED:
		LogMessage(LOG_DEBUG_LVL,"http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
   14dc0:	687b      	ldr	r3, [r7, #4]
   14dc2:	681a      	ldr	r2, [r3, #0]
   14dc4:	4b1d      	ldr	r3, [pc, #116]	; (14e3c <http_client_callback+0x130>)
   14dc6:	0019      	movs	r1, r3
   14dc8:	2001      	movs	r0, #1
   14dca:	4b15      	ldr	r3, [pc, #84]	; (14e20 <http_client_callback+0x114>)
   14dcc:	4798      	blx	r3

		/* If disconnect reason is equal to -ECONNRESET(-104),
		 * It means the server has closed the connection (timeout).
		 * This is normal operation.
		 */
		if (data->disconnected.reason == -EAGAIN) {
   14dce:	687b      	ldr	r3, [r7, #4]
   14dd0:	681b      	ldr	r3, [r3, #0]
   14dd2:	330b      	adds	r3, #11
   14dd4:	d11b      	bne.n	14e0e <http_client_callback+0x102>
			/* Server has not responded. Retry immediately. */
			if (is_state_set(DOWNLOADING)) {
   14dd6:	2008      	movs	r0, #8
   14dd8:	4b19      	ldr	r3, [pc, #100]	; (14e40 <http_client_callback+0x134>)
   14dda:	4798      	blx	r3
   14ddc:	1e03      	subs	r3, r0, #0
   14dde:	d006      	beq.n	14dee <http_client_callback+0xe2>
				f_close(&file_object);
   14de0:	4b18      	ldr	r3, [pc, #96]	; (14e44 <http_client_callback+0x138>)
   14de2:	0018      	movs	r0, r3
   14de4:	4b18      	ldr	r3, [pc, #96]	; (14e48 <http_client_callback+0x13c>)
   14de6:	4798      	blx	r3
				clear_state(DOWNLOADING);
   14de8:	2008      	movs	r0, #8
   14dea:	4b18      	ldr	r3, [pc, #96]	; (14e4c <http_client_callback+0x140>)
   14dec:	4798      	blx	r3
			}

			if (is_state_set(GET_REQUESTED)) {
   14dee:	2004      	movs	r0, #4
   14df0:	4b13      	ldr	r3, [pc, #76]	; (14e40 <http_client_callback+0x134>)
   14df2:	4798      	blx	r3
   14df4:	1e03      	subs	r3, r0, #0
   14df6:	d002      	beq.n	14dfe <http_client_callback+0xf2>
				clear_state(GET_REQUESTED);
   14df8:	2004      	movs	r0, #4
   14dfa:	4b14      	ldr	r3, [pc, #80]	; (14e4c <http_client_callback+0x140>)
   14dfc:	4798      	blx	r3
			}

			start_download();
   14dfe:	4b14      	ldr	r3, [pc, #80]	; (14e50 <http_client_callback+0x144>)
   14e00:	4798      	blx	r3
		}

		break;
   14e02:	46c0      	nop			; (mov r8, r8)
   14e04:	e003      	b.n	14e0e <http_client_callback+0x102>
		break;
   14e06:	46c0      	nop			; (mov r8, r8)
   14e08:	e002      	b.n	14e10 <http_client_callback+0x104>
		break;
   14e0a:	46c0      	nop			; (mov r8, r8)
   14e0c:	e000      	b.n	14e10 <http_client_callback+0x104>
		break;
   14e0e:	46c0      	nop			; (mov r8, r8)
	}
}
   14e10:	46bd      	mov	sp, r7
   14e12:	b005      	add	sp, #20
   14e14:	bd90      	pop	{r4, r7, pc}
   14e16:	46c0      	nop			; (mov r8, r8)
   14e18:	00036074 	.word	0x00036074
   14e1c:	000359dc 	.word	0x000359dc
   14e20:	0001dbf5 	.word	0x0001dbf5
   14e24:	00035a14 	.word	0x00035a14
   14e28:	0001472d 	.word	0x0001472d
   14e2c:	00035a40 	.word	0x00035a40
   14e30:	20000504 	.word	0x20000504
   14e34:	20000508 	.word	0x20000508
   14e38:	00014b39 	.word	0x00014b39
   14e3c:	00035a7c 	.word	0x00035a7c
   14e40:	00014755 	.word	0x00014755
   14e44:	200004e0 	.word	0x200004e0
   14e48:	0002dce9 	.word	0x0002dce9
   14e4c:	000146f9 	.word	0x000146f9
   14e50:	00014a7d 	.word	0x00014a7d

00014e54 <socket_cb>:
 *  - tstrSocketAcceptMsg
 *  - tstrSocketConnectMsg
 *  - tstrSocketRecvMsg
 */
static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   14e54:	b580      	push	{r7, lr}
   14e56:	b082      	sub	sp, #8
   14e58:	af00      	add	r7, sp, #0
   14e5a:	603a      	str	r2, [r7, #0]
   14e5c:	1dfb      	adds	r3, r7, #7
   14e5e:	1c02      	adds	r2, r0, #0
   14e60:	701a      	strb	r2, [r3, #0]
   14e62:	1dbb      	adds	r3, r7, #6
   14e64:	1c0a      	adds	r2, r1, #0
   14e66:	701a      	strb	r2, [r3, #0]
	http_client_socket_event_handler(sock, u8Msg, pvMsg);
   14e68:	683a      	ldr	r2, [r7, #0]
   14e6a:	1dbb      	adds	r3, r7, #6
   14e6c:	7819      	ldrb	r1, [r3, #0]
   14e6e:	1dfb      	adds	r3, r7, #7
   14e70:	781b      	ldrb	r3, [r3, #0]
   14e72:	b25b      	sxtb	r3, r3
   14e74:	0018      	movs	r0, r3
   14e76:	4b03      	ldr	r3, [pc, #12]	; (14e84 <socket_cb+0x30>)
   14e78:	4798      	blx	r3
}
   14e7a:	46c0      	nop			; (mov r8, r8)
   14e7c:	46bd      	mov	sp, r7
   14e7e:	b002      	add	sp, #8
   14e80:	bd80      	pop	{r7, pc}
   14e82:	46c0      	nop			; (mov r8, r8)
   14e84:	0003064d 	.word	0x0003064d

00014e88 <resolve_cb>:
 * \brief Callback for the gethostbyname function (DNS Resolution callback).
 * \param[in] pu8DomainName Domain name of the host.
 * \param[in] u32ServerIP Server IPv4 address encoded in NW byte order format. If it is Zero, then the DNS resolution failed.
 */
static void resolve_cb(uint8_t *pu8DomainName, uint32_t u32ServerIP)
{
   14e88:	b5b0      	push	{r4, r5, r7, lr}
   14e8a:	b086      	sub	sp, #24
   14e8c:	af04      	add	r7, sp, #16
   14e8e:	6078      	str	r0, [r7, #4]
   14e90:	6039      	str	r1, [r7, #0]
	LogMessage(LOG_DEBUG_LVL,"resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
			(int)IPV4_BYTE(u32ServerIP, 0), (int)IPV4_BYTE(u32ServerIP, 1),
   14e92:	683b      	ldr	r3, [r7, #0]
	LogMessage(LOG_DEBUG_LVL,"resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
   14e94:	22ff      	movs	r2, #255	; 0xff
   14e96:	4013      	ands	r3, r2
   14e98:	001c      	movs	r4, r3
			(int)IPV4_BYTE(u32ServerIP, 0), (int)IPV4_BYTE(u32ServerIP, 1),
   14e9a:	683b      	ldr	r3, [r7, #0]
   14e9c:	0a1b      	lsrs	r3, r3, #8
   14e9e:	001a      	movs	r2, r3
	LogMessage(LOG_DEBUG_LVL,"resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
   14ea0:	23ff      	movs	r3, #255	; 0xff
   14ea2:	4013      	ands	r3, r2
			(int)IPV4_BYTE(u32ServerIP, 2), (int)IPV4_BYTE(u32ServerIP, 3));
   14ea4:	683a      	ldr	r2, [r7, #0]
   14ea6:	0c12      	lsrs	r2, r2, #16
   14ea8:	0011      	movs	r1, r2
	LogMessage(LOG_DEBUG_LVL,"resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
   14eaa:	22ff      	movs	r2, #255	; 0xff
   14eac:	400a      	ands	r2, r1
			(int)IPV4_BYTE(u32ServerIP, 2), (int)IPV4_BYTE(u32ServerIP, 3));
   14eae:	6839      	ldr	r1, [r7, #0]
   14eb0:	0e09      	lsrs	r1, r1, #24
	LogMessage(LOG_DEBUG_LVL,"resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
   14eb2:	000d      	movs	r5, r1
   14eb4:	6878      	ldr	r0, [r7, #4]
   14eb6:	4909      	ldr	r1, [pc, #36]	; (14edc <resolve_cb+0x54>)
   14eb8:	9502      	str	r5, [sp, #8]
   14eba:	9201      	str	r2, [sp, #4]
   14ebc:	9300      	str	r3, [sp, #0]
   14ebe:	0023      	movs	r3, r4
   14ec0:	0002      	movs	r2, r0
   14ec2:	2001      	movs	r0, #1
   14ec4:	4c06      	ldr	r4, [pc, #24]	; (14ee0 <resolve_cb+0x58>)
   14ec6:	47a0      	blx	r4
	http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
   14ec8:	683a      	ldr	r2, [r7, #0]
   14eca:	687b      	ldr	r3, [r7, #4]
   14ecc:	0011      	movs	r1, r2
   14ece:	0018      	movs	r0, r3
   14ed0:	4b04      	ldr	r3, [pc, #16]	; (14ee4 <resolve_cb+0x5c>)
   14ed2:	4798      	blx	r3
}
   14ed4:	46c0      	nop			; (mov r8, r8)
   14ed6:	46bd      	mov	sp, r7
   14ed8:	b002      	add	sp, #8
   14eda:	bdb0      	pop	{r4, r5, r7, pc}
   14edc:	00035aac 	.word	0x00035aac
   14ee0:	0001dbf5 	.word	0x0001dbf5
   14ee4:	000307b1 	.word	0x000307b1

00014ee8 <wifi_cb>:
 *  - tstrM2MAPResp
 *  - tstrM2mScanDone
 *  - tstrM2mWifiscanResult
 */
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
   14ee8:	b590      	push	{r4, r7, lr}
   14eea:	b087      	sub	sp, #28
   14eec:	af02      	add	r7, sp, #8
   14eee:	0002      	movs	r2, r0
   14ef0:	6039      	str	r1, [r7, #0]
   14ef2:	1dfb      	adds	r3, r7, #7
   14ef4:	701a      	strb	r2, [r3, #0]
	switch (u8MsgType) {
   14ef6:	1dfb      	adds	r3, r7, #7
   14ef8:	781b      	ldrb	r3, [r3, #0]
   14efa:	2b2c      	cmp	r3, #44	; 0x2c
   14efc:	d002      	beq.n	14f04 <wifi_cb+0x1c>
   14efe:	2b32      	cmp	r3, #50	; 0x32
   14f00:	d03d      	beq.n	14f7e <wifi_cb+0x96>
	}
		break;
	

	default:
		break;
   14f02:	e06f      	b.n	14fe4 <wifi_cb+0xfc>
		tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
   14f04:	683b      	ldr	r3, [r7, #0]
   14f06:	60fb      	str	r3, [r7, #12]
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
   14f08:	68fb      	ldr	r3, [r7, #12]
   14f0a:	781b      	ldrb	r3, [r3, #0]
   14f0c:	2b01      	cmp	r3, #1
   14f0e:	d107      	bne.n	14f20 <wifi_cb+0x38>
			LogMessage(LOG_DEBUG_LVL,"wifi_cb: M2M_WIFI_CONNECTED\r\n");
   14f10:	4b36      	ldr	r3, [pc, #216]	; (14fec <wifi_cb+0x104>)
   14f12:	0019      	movs	r1, r3
   14f14:	2001      	movs	r0, #1
   14f16:	4b36      	ldr	r3, [pc, #216]	; (14ff0 <wifi_cb+0x108>)
   14f18:	4798      	blx	r3
			m2m_wifi_request_dhcp_client();
   14f1a:	4b36      	ldr	r3, [pc, #216]	; (14ff4 <wifi_cb+0x10c>)
   14f1c:	4798      	blx	r3
		break;
   14f1e:	e05e      	b.n	14fde <wifi_cb+0xf6>
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
   14f20:	68fb      	ldr	r3, [r7, #12]
   14f22:	781b      	ldrb	r3, [r3, #0]
   14f24:	2b00      	cmp	r3, #0
   14f26:	d15a      	bne.n	14fde <wifi_cb+0xf6>
			LogMessage(LOG_DEBUG_LVL,"wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
   14f28:	4b33      	ldr	r3, [pc, #204]	; (14ff8 <wifi_cb+0x110>)
   14f2a:	0019      	movs	r1, r3
   14f2c:	2001      	movs	r0, #1
   14f2e:	4b30      	ldr	r3, [pc, #192]	; (14ff0 <wifi_cb+0x108>)
   14f30:	4798      	blx	r3
			clear_state(WIFI_CONNECTED);
   14f32:	2002      	movs	r0, #2
   14f34:	4b31      	ldr	r3, [pc, #196]	; (14ffc <wifi_cb+0x114>)
   14f36:	4798      	blx	r3
			if (is_state_set(DOWNLOADING)) {
   14f38:	2008      	movs	r0, #8
   14f3a:	4b31      	ldr	r3, [pc, #196]	; (15000 <wifi_cb+0x118>)
   14f3c:	4798      	blx	r3
   14f3e:	1e03      	subs	r3, r0, #0
   14f40:	d006      	beq.n	14f50 <wifi_cb+0x68>
				f_close(&file_object);
   14f42:	4b30      	ldr	r3, [pc, #192]	; (15004 <wifi_cb+0x11c>)
   14f44:	0018      	movs	r0, r3
   14f46:	4b30      	ldr	r3, [pc, #192]	; (15008 <wifi_cb+0x120>)
   14f48:	4798      	blx	r3
				clear_state(DOWNLOADING);
   14f4a:	2008      	movs	r0, #8
   14f4c:	4b2b      	ldr	r3, [pc, #172]	; (14ffc <wifi_cb+0x114>)
   14f4e:	4798      	blx	r3
			if (is_state_set(GET_REQUESTED)) {
   14f50:	2004      	movs	r0, #4
   14f52:	4b2b      	ldr	r3, [pc, #172]	; (15000 <wifi_cb+0x118>)
   14f54:	4798      	blx	r3
   14f56:	1e03      	subs	r3, r0, #0
   14f58:	d002      	beq.n	14f60 <wifi_cb+0x78>
				clear_state(GET_REQUESTED);
   14f5a:	2004      	movs	r0, #4
   14f5c:	4b27      	ldr	r3, [pc, #156]	; (14ffc <wifi_cb+0x114>)
   14f5e:	4798      	blx	r3
			mqtt_disconnect(&mqtt_inst, 1);
   14f60:	4b2a      	ldr	r3, [pc, #168]	; (1500c <wifi_cb+0x124>)
   14f62:	2101      	movs	r1, #1
   14f64:	0018      	movs	r0, r3
   14f66:	4b2a      	ldr	r3, [pc, #168]	; (15010 <wifi_cb+0x128>)
   14f68:	4798      	blx	r3
			m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
   14f6a:	4a2a      	ldr	r2, [pc, #168]	; (15014 <wifi_cb+0x12c>)
   14f6c:	482a      	ldr	r0, [pc, #168]	; (15018 <wifi_cb+0x130>)
   14f6e:	23ff      	movs	r3, #255	; 0xff
   14f70:	9300      	str	r3, [sp, #0]
   14f72:	0013      	movs	r3, r2
   14f74:	2202      	movs	r2, #2
   14f76:	210d      	movs	r1, #13
   14f78:	4c28      	ldr	r4, [pc, #160]	; (1501c <wifi_cb+0x134>)
   14f7a:	47a0      	blx	r4
		break;
   14f7c:	e02f      	b.n	14fde <wifi_cb+0xf6>
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
   14f7e:	683b      	ldr	r3, [r7, #0]
   14f80:	60bb      	str	r3, [r7, #8]
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
   14f82:	68bb      	ldr	r3, [r7, #8]
   14f84:	781b      	ldrb	r3, [r3, #0]
		LogMessage(LOG_DEBUG_LVL,"wifi_cb: IP address is %u.%u.%u.%u\r\n",
   14f86:	0018      	movs	r0, r3
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
   14f88:	68bb      	ldr	r3, [r7, #8]
   14f8a:	3301      	adds	r3, #1
   14f8c:	781b      	ldrb	r3, [r3, #0]
		LogMessage(LOG_DEBUG_LVL,"wifi_cb: IP address is %u.%u.%u.%u\r\n",
   14f8e:	001c      	movs	r4, r3
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
   14f90:	68bb      	ldr	r3, [r7, #8]
   14f92:	3302      	adds	r3, #2
   14f94:	781b      	ldrb	r3, [r3, #0]
		LogMessage(LOG_DEBUG_LVL,"wifi_cb: IP address is %u.%u.%u.%u\r\n",
   14f96:	001a      	movs	r2, r3
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
   14f98:	68bb      	ldr	r3, [r7, #8]
   14f9a:	3303      	adds	r3, #3
   14f9c:	781b      	ldrb	r3, [r3, #0]
		LogMessage(LOG_DEBUG_LVL,"wifi_cb: IP address is %u.%u.%u.%u\r\n",
   14f9e:	4920      	ldr	r1, [pc, #128]	; (15020 <wifi_cb+0x138>)
   14fa0:	9301      	str	r3, [sp, #4]
   14fa2:	9200      	str	r2, [sp, #0]
   14fa4:	0023      	movs	r3, r4
   14fa6:	0002      	movs	r2, r0
   14fa8:	2001      	movs	r0, #1
   14faa:	4c11      	ldr	r4, [pc, #68]	; (14ff0 <wifi_cb+0x108>)
   14fac:	47a0      	blx	r4
		add_state(WIFI_CONNECTED);
   14fae:	2002      	movs	r0, #2
   14fb0:	4b1c      	ldr	r3, [pc, #112]	; (15024 <wifi_cb+0x13c>)
   14fb2:	4798      	blx	r3
		if(do_download_flag == 1)
   14fb4:	4b1c      	ldr	r3, [pc, #112]	; (15028 <wifi_cb+0x140>)
   14fb6:	781b      	ldrb	r3, [r3, #0]
   14fb8:	2b01      	cmp	r3, #1
   14fba:	d102      	bne.n	14fc2 <wifi_cb+0xda>
			start_download();
   14fbc:	4b1b      	ldr	r3, [pc, #108]	; (1502c <wifi_cb+0x144>)
   14fbe:	4798      	blx	r3
		break;
   14fc0:	e00f      	b.n	14fe2 <wifi_cb+0xfa>
		if (mqtt_connect(&mqtt_inst, main_mqtt_broker))
   14fc2:	4a1b      	ldr	r2, [pc, #108]	; (15030 <wifi_cb+0x148>)
   14fc4:	4b11      	ldr	r3, [pc, #68]	; (1500c <wifi_cb+0x124>)
   14fc6:	0011      	movs	r1, r2
   14fc8:	0018      	movs	r0, r3
   14fca:	4b1a      	ldr	r3, [pc, #104]	; (15034 <wifi_cb+0x14c>)
   14fcc:	4798      	blx	r3
   14fce:	1e03      	subs	r3, r0, #0
   14fd0:	d007      	beq.n	14fe2 <wifi_cb+0xfa>
			LogMessage(LOG_DEBUG_LVL,"Error connecting to MQTT Broker!\r\n");
   14fd2:	4b19      	ldr	r3, [pc, #100]	; (15038 <wifi_cb+0x150>)
   14fd4:	0019      	movs	r1, r3
   14fd6:	2001      	movs	r0, #1
   14fd8:	4b05      	ldr	r3, [pc, #20]	; (14ff0 <wifi_cb+0x108>)
   14fda:	4798      	blx	r3
		break;
   14fdc:	e001      	b.n	14fe2 <wifi_cb+0xfa>
		break;
   14fde:	46c0      	nop			; (mov r8, r8)
   14fe0:	e000      	b.n	14fe4 <wifi_cb+0xfc>
		break;
   14fe2:	46c0      	nop			; (mov r8, r8)
	}
}
   14fe4:	46c0      	nop			; (mov r8, r8)
   14fe6:	46bd      	mov	sp, r7
   14fe8:	b005      	add	sp, #20
   14fea:	bd90      	pop	{r4, r7, pc}
   14fec:	00035adc 	.word	0x00035adc
   14ff0:	0001dbf5 	.word	0x0001dbf5
   14ff4:	00021e75 	.word	0x00021e75
   14ff8:	00035afc 	.word	0x00035afc
   14ffc:	000146f9 	.word	0x000146f9
   15000:	00014755 	.word	0x00014755
   15004:	200004e0 	.word	0x200004e0
   15008:	0002dce9 	.word	0x0002dce9
   1500c:	2000050c 	.word	0x2000050c
   15010:	0002f2f9 	.word	0x0002f2f9
   15014:	00035b20 	.word	0x00035b20
   15018:	00035b34 	.word	0x00035b34
   1501c:	000219a1 	.word	0x000219a1
   15020:	00035b44 	.word	0x00035b44
   15024:	0001472d 	.word	0x0001472d
   15028:	200004dc 	.word	0x200004dc
   1502c:	00014a7d 	.word	0x00014a7d
   15030:	00035754 	.word	0x00035754
   15034:	0002f1c5 	.word	0x0002f1c5
   15038:	00035b6c 	.word	0x00035b6c

0001503c <configure_timer>:

/**
 * \brief Configure Timer module.
 */
static void configure_timer(void)
{
   1503c:	b580      	push	{r7, lr}
   1503e:	b082      	sub	sp, #8
   15040:	af00      	add	r7, sp, #0
	struct sw_timer_config swt_conf;
	sw_timer_get_config_defaults(&swt_conf);
   15042:	1d3b      	adds	r3, r7, #4
   15044:	0018      	movs	r0, r3
   15046:	4b08      	ldr	r3, [pc, #32]	; (15068 <configure_timer+0x2c>)
   15048:	4798      	blx	r3

	sw_timer_init(&swt_module_inst, &swt_conf);
   1504a:	1d3a      	adds	r2, r7, #4
   1504c:	4b07      	ldr	r3, [pc, #28]	; (1506c <configure_timer+0x30>)
   1504e:	0011      	movs	r1, r2
   15050:	0018      	movs	r0, r3
   15052:	4b07      	ldr	r3, [pc, #28]	; (15070 <configure_timer+0x34>)
   15054:	4798      	blx	r3
	sw_timer_enable(&swt_module_inst);
   15056:	4b05      	ldr	r3, [pc, #20]	; (1506c <configure_timer+0x30>)
   15058:	0018      	movs	r0, r3
   1505a:	4b06      	ldr	r3, [pc, #24]	; (15074 <configure_timer+0x38>)
   1505c:	4798      	blx	r3
}
   1505e:	46c0      	nop			; (mov r8, r8)
   15060:	46bd      	mov	sp, r7
   15062:	b002      	add	sp, #8
   15064:	bd80      	pop	{r7, pc}
   15066:	46c0      	nop			; (mov r8, r8)
   15068:	00031de1 	.word	0x00031de1
   1506c:	20004250 	.word	0x20004250
   15070:	00031e05 	.word	0x00031e05
   15074:	00031ef1 	.word	0x00031ef1

00015078 <configure_http_client>:

/**
 * \brief Configure HTTP client module.
 */
static void configure_http_client(void)
{
   15078:	b580      	push	{r7, lr}
   1507a:	b088      	sub	sp, #32
   1507c:	af00      	add	r7, sp, #0
	struct http_client_config httpc_conf;
	int ret;

	http_client_get_config_defaults(&httpc_conf);
   1507e:	003b      	movs	r3, r7
   15080:	0018      	movs	r0, r3
   15082:	4b16      	ldr	r3, [pc, #88]	; (150dc <configure_http_client+0x64>)
   15084:	4798      	blx	r3

	httpc_conf.recv_buffer_size = MAIN_BUFFER_MAX_SIZE;
   15086:	003b      	movs	r3, r7
   15088:	2280      	movs	r2, #128	; 0x80
   1508a:	0092      	lsls	r2, r2, #2
   1508c:	611a      	str	r2, [r3, #16]
	httpc_conf.timer_inst = &swt_module_inst;
   1508e:	003b      	movs	r3, r7
   15090:	4a13      	ldr	r2, [pc, #76]	; (150e0 <configure_http_client+0x68>)
   15092:	605a      	str	r2, [r3, #4]
	httpc_conf.port = 443;
   15094:	003b      	movs	r3, r7
   15096:	22bc      	movs	r2, #188	; 0xbc
   15098:	32ff      	adds	r2, #255	; 0xff
   1509a:	801a      	strh	r2, [r3, #0]
	httpc_conf.tls = 1;
   1509c:	003b      	movs	r3, r7
   1509e:	2201      	movs	r2, #1
   150a0:	709a      	strb	r2, [r3, #2]

	ret = http_client_init(&http_client_module_inst, &httpc_conf);
   150a2:	003a      	movs	r2, r7
   150a4:	4b0f      	ldr	r3, [pc, #60]	; (150e4 <configure_http_client+0x6c>)
   150a6:	0011      	movs	r1, r2
   150a8:	0018      	movs	r0, r3
   150aa:	4b0f      	ldr	r3, [pc, #60]	; (150e8 <configure_http_client+0x70>)
   150ac:	4798      	blx	r3
   150ae:	0003      	movs	r3, r0
   150b0:	61fb      	str	r3, [r7, #28]
	if (ret < 0) {
   150b2:	69fb      	ldr	r3, [r7, #28]
   150b4:	2b00      	cmp	r3, #0
   150b6:	da06      	bge.n	150c6 <configure_http_client+0x4e>
		LogMessage(LOG_DEBUG_LVL,"configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
   150b8:	69fa      	ldr	r2, [r7, #28]
   150ba:	4b0c      	ldr	r3, [pc, #48]	; (150ec <configure_http_client+0x74>)
   150bc:	0019      	movs	r1, r3
   150be:	2001      	movs	r0, #1
   150c0:	4b0b      	ldr	r3, [pc, #44]	; (150f0 <configure_http_client+0x78>)
   150c2:	4798      	blx	r3
		while (1) {
   150c4:	e7fe      	b.n	150c4 <configure_http_client+0x4c>
		} /* Loop forever. */
	}

	http_client_register_callback(&http_client_module_inst, http_client_callback);
   150c6:	4a0b      	ldr	r2, [pc, #44]	; (150f4 <configure_http_client+0x7c>)
   150c8:	4b06      	ldr	r3, [pc, #24]	; (150e4 <configure_http_client+0x6c>)
   150ca:	0011      	movs	r1, r2
   150cc:	0018      	movs	r0, r3
   150ce:	4b0a      	ldr	r3, [pc, #40]	; (150f8 <configure_http_client+0x80>)
   150d0:	4798      	blx	r3
}
   150d2:	46c0      	nop			; (mov r8, r8)
   150d4:	46bd      	mov	sp, r7
   150d6:	b008      	add	sp, #32
   150d8:	bd80      	pop	{r7, pc}
   150da:	46c0      	nop			; (mov r8, r8)
   150dc:	00030475 	.word	0x00030475
   150e0:	20004250 	.word	0x20004250
   150e4:	200042a8 	.word	0x200042a8
   150e8:	000304c1 	.word	0x000304c1
   150ec:	00035c9c 	.word	0x00035c9c
   150f0:	0001dbf5 	.word	0x0001dbf5
   150f4:	00014d0d 	.word	0x00014d0d
   150f8:	000305ad 	.word	0x000305ad

000150fc <socket_event_handler>:
 *  - [SOCKET_MSG_SENDTO](@ref SOCKET_MSG_SENDTO)
 *  - [SOCKET_MSG_RECVFROM](@ref SOCKET_MSG_RECVFROM)
 * \param[in] msg_data A structure contains notification informations.
 */
static void socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   150fc:	b580      	push	{r7, lr}
   150fe:	b082      	sub	sp, #8
   15100:	af00      	add	r7, sp, #0
   15102:	603a      	str	r2, [r7, #0]
   15104:	1dfb      	adds	r3, r7, #7
   15106:	1c02      	adds	r2, r0, #0
   15108:	701a      	strb	r2, [r3, #0]
   1510a:	1dbb      	adds	r3, r7, #6
   1510c:	1c0a      	adds	r2, r1, #0
   1510e:	701a      	strb	r2, [r3, #0]
	mqtt_socket_event_handler(sock, msg_type, msg_data);
   15110:	683a      	ldr	r2, [r7, #0]
   15112:	1dbb      	adds	r3, r7, #6
   15114:	7819      	ldrb	r1, [r3, #0]
   15116:	1dfb      	adds	r3, r7, #7
   15118:	781b      	ldrb	r3, [r3, #0]
   1511a:	b25b      	sxtb	r3, r3
   1511c:	0018      	movs	r0, r3
   1511e:	4b03      	ldr	r3, [pc, #12]	; (1512c <socket_event_handler+0x30>)
   15120:	4798      	blx	r3
}
   15122:	46c0      	nop			; (mov r8, r8)
   15124:	46bd      	mov	sp, r7
   15126:	b002      	add	sp, #8
   15128:	bd80      	pop	{r7, pc}
   1512a:	46c0      	nop			; (mov r8, r8)
   1512c:	0002f16d 	.word	0x0002f16d

00015130 <socket_resolve_handler>:
 *
 * \param[in] doamin_name Domain name.
 * \param[in] server_ip IP of server.
 */
static void socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
   15130:	b580      	push	{r7, lr}
   15132:	b082      	sub	sp, #8
   15134:	af00      	add	r7, sp, #0
   15136:	6078      	str	r0, [r7, #4]
   15138:	6039      	str	r1, [r7, #0]
	mqtt_socket_resolve_handler(doamin_name, server_ip);
   1513a:	683a      	ldr	r2, [r7, #0]
   1513c:	687b      	ldr	r3, [r7, #4]
   1513e:	0011      	movs	r1, r2
   15140:	0018      	movs	r0, r3
   15142:	4b03      	ldr	r3, [pc, #12]	; (15150 <socket_resolve_handler+0x20>)
   15144:	4798      	blx	r3
}
   15146:	46c0      	nop			; (mov r8, r8)
   15148:	46bd      	mov	sp, r7
   1514a:	b002      	add	sp, #8
   1514c:	bd80      	pop	{r7, pc}
   1514e:	46c0      	nop			; (mov r8, r8)
   15150:	0002f1a1 	.word	0x0002f1a1

00015154 <SubscribeHandlerStatusTopic>:
 *
 * \param[in] msgData Data to be received.
 */

void SubscribeHandlerStatusTopic(MessageData *msgData)
{
   15154:	b590      	push	{r4, r7, lr}
   15156:	b085      	sub	sp, #20
   15158:	af00      	add	r7, sp, #0
   1515a:	6078      	str	r0, [r7, #4]
	uint8_t status;
	LogMessage(LOG_DEBUG_LVL,"\r\n %.*s",msgData->topicName->lenstring.len,msgData->topicName->lenstring.data);
   1515c:	687b      	ldr	r3, [r7, #4]
   1515e:	685b      	ldr	r3, [r3, #4]
   15160:	685a      	ldr	r2, [r3, #4]
   15162:	687b      	ldr	r3, [r7, #4]
   15164:	685b      	ldr	r3, [r3, #4]
   15166:	689b      	ldr	r3, [r3, #8]
   15168:	4919      	ldr	r1, [pc, #100]	; (151d0 <SubscribeHandlerStatusTopic+0x7c>)
   1516a:	2001      	movs	r0, #1
   1516c:	4c19      	ldr	r4, [pc, #100]	; (151d4 <SubscribeHandlerStatusTopic+0x80>)
   1516e:	47a0      	blx	r4
	//Will receive something of the style "rgb(222, 224, 189)"
	if (strncmp(msgData->message->payload, "status:", 7)== 0)
   15170:	687b      	ldr	r3, [r7, #4]
   15172:	681b      	ldr	r3, [r3, #0]
   15174:	689b      	ldr	r3, [r3, #8]
   15176:	4918      	ldr	r1, [pc, #96]	; (151d8 <SubscribeHandlerStatusTopic+0x84>)
   15178:	2207      	movs	r2, #7
   1517a:	0018      	movs	r0, r3
   1517c:	4b17      	ldr	r3, [pc, #92]	; (151dc <SubscribeHandlerStatusTopic+0x88>)
   1517e:	4798      	blx	r3
   15180:	1e03      	subs	r3, r0, #0
   15182:	d121      	bne.n	151c8 <SubscribeHandlerStatusTopic+0x74>
	{
		char *p = (char *)&msgData->message->payload[7];
   15184:	687b      	ldr	r3, [r7, #4]
   15186:	681b      	ldr	r3, [r3, #0]
   15188:	689b      	ldr	r3, [r3, #8]
   1518a:	3307      	adds	r3, #7
   1518c:	60fb      	str	r3, [r7, #12]
		status = p[0]-'0';
   1518e:	68fb      	ldr	r3, [r7, #12]
   15190:	781b      	ldrb	r3, [r3, #0]
   15192:	3b30      	subs	r3, #48	; 0x30
   15194:	b2da      	uxtb	r2, r3
   15196:	230b      	movs	r3, #11
   15198:	18fb      	adds	r3, r7, r3
   1519a:	701a      	strb	r2, [r3, #0]
// 		rgb[nb++] = strtol(p, &p, 10);
// 		if (*p != ',')
// 		break;
// 		p++; /* skip, */
// 	}
	LogMessage(LOG_DEBUG_LVL,"\r\nSTATUS Receive%d\r\n", status);
   1519c:	230b      	movs	r3, #11
   1519e:	18fb      	adds	r3, r7, r3
   151a0:	781b      	ldrb	r3, [r3, #0]
   151a2:	001a      	movs	r2, r3
   151a4:	4b0e      	ldr	r3, [pc, #56]	; (151e0 <SubscribeHandlerStatusTopic+0x8c>)
   151a6:	0019      	movs	r1, r3
   151a8:	2001      	movs	r0, #1
   151aa:	4b0a      	ldr	r3, [pc, #40]	; (151d4 <SubscribeHandlerStatusTopic+0x80>)
   151ac:	4798      	blx	r3
	if(pdTRUE == ControlAddStatusDataToQueue(&status))
   151ae:	230b      	movs	r3, #11
   151b0:	18fb      	adds	r3, r7, r3
   151b2:	0018      	movs	r0, r3
   151b4:	4b0b      	ldr	r3, [pc, #44]	; (151e4 <SubscribeHandlerStatusTopic+0x90>)
   151b6:	4798      	blx	r3
   151b8:	0003      	movs	r3, r0
   151ba:	2b01      	cmp	r3, #1
   151bc:	d104      	bne.n	151c8 <SubscribeHandlerStatusTopic+0x74>
	{
		LogMessage(LOG_DEBUG_LVL,"\r\nSent status to control!\r\n");
   151be:	4b0a      	ldr	r3, [pc, #40]	; (151e8 <SubscribeHandlerStatusTopic+0x94>)
   151c0:	0019      	movs	r1, r3
   151c2:	2001      	movs	r0, #1
   151c4:	4b03      	ldr	r3, [pc, #12]	; (151d4 <SubscribeHandlerStatusTopic+0x80>)
   151c6:	4798      	blx	r3
	}
	//UIChangeColors(rgb[0],rgb[1], rgb[2]);
	}
}
   151c8:	46c0      	nop			; (mov r8, r8)
   151ca:	46bd      	mov	sp, r7
   151cc:	b005      	add	sp, #20
   151ce:	bd90      	pop	{r4, r7, pc}
   151d0:	00035ce4 	.word	0x00035ce4
   151d4:	0001dbf5 	.word	0x0001dbf5
   151d8:	00035cec 	.word	0x00035cec
   151dc:	00034449 	.word	0x00034449
   151e0:	00035cf4 	.word	0x00035cf4
   151e4:	000141c9 	.word	0x000141c9
   151e8:	00035d0c 	.word	0x00035d0c

000151ec <SubscribeHandlerGameTopic>:

void SubscribeHandlerGameTopic(MessageData *msgData)
{
   151ec:	b590      	push	{r4, r7, lr}
   151ee:	b08b      	sub	sp, #44	; 0x2c
   151f0:	af00      	add	r7, sp, #0
   151f2:	6078      	str	r0, [r7, #4]
	struct GameDataPacket game;
	memset(game.game, 0xff, sizeof(game.game));
   151f4:	230c      	movs	r3, #12
   151f6:	18fb      	adds	r3, r7, r3
   151f8:	2214      	movs	r2, #20
   151fa:	21ff      	movs	r1, #255	; 0xff
   151fc:	0018      	movs	r0, r3
   151fe:	4b48      	ldr	r3, [pc, #288]	; (15320 <SubscribeHandlerGameTopic+0x134>)
   15200:	4798      	blx	r3

	//Parse input. The start string must be '{"game":['
	if (strncmp(msgData->message->payload, "{\"game\":[", 9) == 0)
   15202:	687b      	ldr	r3, [r7, #4]
   15204:	681b      	ldr	r3, [r3, #0]
   15206:	689b      	ldr	r3, [r3, #8]
   15208:	4946      	ldr	r1, [pc, #280]	; (15324 <SubscribeHandlerGameTopic+0x138>)
   1520a:	2209      	movs	r2, #9
   1520c:	0018      	movs	r0, r3
   1520e:	4b46      	ldr	r3, [pc, #280]	; (15328 <SubscribeHandlerGameTopic+0x13c>)
   15210:	4798      	blx	r3
   15212:	1e03      	subs	r3, r0, #0
   15214:	d166      	bne.n	152e4 <SubscribeHandlerGameTopic+0xf8>
	{
		LogMessage(LOG_DEBUG_LVL,"\r\nGame message received!\r\n");
   15216:	4b45      	ldr	r3, [pc, #276]	; (1532c <SubscribeHandlerGameTopic+0x140>)
   15218:	0019      	movs	r1, r3
   1521a:	2001      	movs	r0, #1
   1521c:	4b44      	ldr	r3, [pc, #272]	; (15330 <SubscribeHandlerGameTopic+0x144>)
   1521e:	4798      	blx	r3
		LogMessage(LOG_DEBUG_LVL,"\r\n %.*s",msgData->topicName->lenstring.len,msgData->topicName->lenstring.data);
   15220:	687b      	ldr	r3, [r7, #4]
   15222:	685b      	ldr	r3, [r3, #4]
   15224:	685a      	ldr	r2, [r3, #4]
   15226:	687b      	ldr	r3, [r7, #4]
   15228:	685b      	ldr	r3, [r3, #4]
   1522a:	689b      	ldr	r3, [r3, #8]
   1522c:	4941      	ldr	r1, [pc, #260]	; (15334 <SubscribeHandlerGameTopic+0x148>)
   1522e:	2001      	movs	r0, #1
   15230:	4c3f      	ldr	r4, [pc, #252]	; (15330 <SubscribeHandlerGameTopic+0x144>)
   15232:	47a0      	blx	r4
		LogMessage(LOG_DEBUG_LVL,"%.*s",msgData->message->payloadlen,(char *)msgData->message->payload);
   15234:	687b      	ldr	r3, [r7, #4]
   15236:	681b      	ldr	r3, [r3, #0]
   15238:	68da      	ldr	r2, [r3, #12]
   1523a:	687b      	ldr	r3, [r7, #4]
   1523c:	681b      	ldr	r3, [r3, #0]
   1523e:	689b      	ldr	r3, [r3, #8]
   15240:	493d      	ldr	r1, [pc, #244]	; (15338 <SubscribeHandlerGameTopic+0x14c>)
   15242:	2001      	movs	r0, #1
   15244:	4c3a      	ldr	r4, [pc, #232]	; (15330 <SubscribeHandlerGameTopic+0x144>)
   15246:	47a0      	blx	r4

		int nb = 0;
   15248:	2300      	movs	r3, #0
   1524a:	627b      	str	r3, [r7, #36]	; 0x24
		char *p = &msgData->message->payload[9];
   1524c:	687b      	ldr	r3, [r7, #4]
   1524e:	681b      	ldr	r3, [r3, #0]
   15250:	689b      	ldr	r3, [r3, #8]
   15252:	3309      	adds	r3, #9
   15254:	60bb      	str	r3, [r7, #8]
		while (nb < GAME_SIZE && *p) {
   15256:	e015      	b.n	15284 <SubscribeHandlerGameTopic+0x98>
			game.game[nb++] = strtol(p, &p, 10);
   15258:	6a7c      	ldr	r4, [r7, #36]	; 0x24
   1525a:	1c63      	adds	r3, r4, #1
   1525c:	627b      	str	r3, [r7, #36]	; 0x24
   1525e:	68bb      	ldr	r3, [r7, #8]
   15260:	2208      	movs	r2, #8
   15262:	18b9      	adds	r1, r7, r2
   15264:	220a      	movs	r2, #10
   15266:	0018      	movs	r0, r3
   15268:	4b34      	ldr	r3, [pc, #208]	; (1533c <SubscribeHandlerGameTopic+0x150>)
   1526a:	4798      	blx	r3
   1526c:	0003      	movs	r3, r0
   1526e:	b2da      	uxtb	r2, r3
   15270:	230c      	movs	r3, #12
   15272:	18fb      	adds	r3, r7, r3
   15274:	551a      	strb	r2, [r3, r4]
			if (*p != ',')
   15276:	68bb      	ldr	r3, [r7, #8]
   15278:	781b      	ldrb	r3, [r3, #0]
   1527a:	2b2c      	cmp	r3, #44	; 0x2c
   1527c:	d10a      	bne.n	15294 <SubscribeHandlerGameTopic+0xa8>
			break;
			p++; /* skip, */
   1527e:	68bb      	ldr	r3, [r7, #8]
   15280:	3301      	adds	r3, #1
   15282:	60bb      	str	r3, [r7, #8]
		while (nb < GAME_SIZE && *p) {
   15284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15286:	2b13      	cmp	r3, #19
   15288:	dc05      	bgt.n	15296 <SubscribeHandlerGameTopic+0xaa>
   1528a:	68bb      	ldr	r3, [r7, #8]
   1528c:	781b      	ldrb	r3, [r3, #0]
   1528e:	2b00      	cmp	r3, #0
   15290:	d1e2      	bne.n	15258 <SubscribeHandlerGameTopic+0x6c>
   15292:	e000      	b.n	15296 <SubscribeHandlerGameTopic+0xaa>
			break;
   15294:	46c0      	nop			; (mov r8, r8)
		}
		LogMessage(LOG_DEBUG_LVL,"\r\nParsed Command: ");
   15296:	4b2a      	ldr	r3, [pc, #168]	; (15340 <SubscribeHandlerGameTopic+0x154>)
   15298:	0019      	movs	r1, r3
   1529a:	2001      	movs	r0, #1
   1529c:	4b24      	ldr	r3, [pc, #144]	; (15330 <SubscribeHandlerGameTopic+0x144>)
   1529e:	4798      	blx	r3
		for(int i = 0; i < GAME_SIZE; i++)
   152a0:	2300      	movs	r3, #0
   152a2:	623b      	str	r3, [r7, #32]
   152a4:	e00d      	b.n	152c2 <SubscribeHandlerGameTopic+0xd6>
		{
			LogMessage(LOG_DEBUG_LVL,"%d,", game.game[i]);
   152a6:	230c      	movs	r3, #12
   152a8:	18fa      	adds	r2, r7, r3
   152aa:	6a3b      	ldr	r3, [r7, #32]
   152ac:	18d3      	adds	r3, r2, r3
   152ae:	781b      	ldrb	r3, [r3, #0]
   152b0:	001a      	movs	r2, r3
   152b2:	4b24      	ldr	r3, [pc, #144]	; (15344 <SubscribeHandlerGameTopic+0x158>)
   152b4:	0019      	movs	r1, r3
   152b6:	2001      	movs	r0, #1
   152b8:	4b1d      	ldr	r3, [pc, #116]	; (15330 <SubscribeHandlerGameTopic+0x144>)
   152ba:	4798      	blx	r3
		for(int i = 0; i < GAME_SIZE; i++)
   152bc:	6a3b      	ldr	r3, [r7, #32]
   152be:	3301      	adds	r3, #1
   152c0:	623b      	str	r3, [r7, #32]
   152c2:	6a3b      	ldr	r3, [r7, #32]
   152c4:	2b13      	cmp	r3, #19
   152c6:	ddee      	ble.n	152a6 <SubscribeHandlerGameTopic+0xba>
		}

		if(pdTRUE == ControlAddGameData(&game))
   152c8:	230c      	movs	r3, #12
   152ca:	18fb      	adds	r3, r7, r3
   152cc:	0018      	movs	r0, r3
   152ce:	4b1e      	ldr	r3, [pc, #120]	; (15348 <SubscribeHandlerGameTopic+0x15c>)
   152d0:	4798      	blx	r3
   152d2:	0003      	movs	r3, r0
   152d4:	2b01      	cmp	r3, #1
   152d6:	d11e      	bne.n	15316 <SubscribeHandlerGameTopic+0x12a>
		{
			LogMessage(LOG_DEBUG_LVL,"\r\nSent play to control!\r\n");
   152d8:	4b1c      	ldr	r3, [pc, #112]	; (1534c <SubscribeHandlerGameTopic+0x160>)
   152da:	0019      	movs	r1, r3
   152dc:	2001      	movs	r0, #1
   152de:	4b14      	ldr	r3, [pc, #80]	; (15330 <SubscribeHandlerGameTopic+0x144>)
   152e0:	4798      	blx	r3
	}




}
   152e2:	e018      	b.n	15316 <SubscribeHandlerGameTopic+0x12a>
		LogMessage(LOG_DEBUG_LVL,"\r\nGame message received but not understood!\r\n");
   152e4:	4b1a      	ldr	r3, [pc, #104]	; (15350 <SubscribeHandlerGameTopic+0x164>)
   152e6:	0019      	movs	r1, r3
   152e8:	2001      	movs	r0, #1
   152ea:	4b11      	ldr	r3, [pc, #68]	; (15330 <SubscribeHandlerGameTopic+0x144>)
   152ec:	4798      	blx	r3
		LogMessage(LOG_DEBUG_LVL,"\r\n %.*s",msgData->topicName->lenstring.len,msgData->topicName->lenstring.data);
   152ee:	687b      	ldr	r3, [r7, #4]
   152f0:	685b      	ldr	r3, [r3, #4]
   152f2:	685a      	ldr	r2, [r3, #4]
   152f4:	687b      	ldr	r3, [r7, #4]
   152f6:	685b      	ldr	r3, [r3, #4]
   152f8:	689b      	ldr	r3, [r3, #8]
   152fa:	490e      	ldr	r1, [pc, #56]	; (15334 <SubscribeHandlerGameTopic+0x148>)
   152fc:	2001      	movs	r0, #1
   152fe:	4c0c      	ldr	r4, [pc, #48]	; (15330 <SubscribeHandlerGameTopic+0x144>)
   15300:	47a0      	blx	r4
		LogMessage(LOG_DEBUG_LVL,"%.*s",msgData->message->payloadlen,(char *)msgData->message->payload);
   15302:	687b      	ldr	r3, [r7, #4]
   15304:	681b      	ldr	r3, [r3, #0]
   15306:	68da      	ldr	r2, [r3, #12]
   15308:	687b      	ldr	r3, [r7, #4]
   1530a:	681b      	ldr	r3, [r3, #0]
   1530c:	689b      	ldr	r3, [r3, #8]
   1530e:	490a      	ldr	r1, [pc, #40]	; (15338 <SubscribeHandlerGameTopic+0x14c>)
   15310:	2001      	movs	r0, #1
   15312:	4c07      	ldr	r4, [pc, #28]	; (15330 <SubscribeHandlerGameTopic+0x144>)
   15314:	47a0      	blx	r4
}
   15316:	46c0      	nop			; (mov r8, r8)
   15318:	46bd      	mov	sp, r7
   1531a:	b00b      	add	sp, #44	; 0x2c
   1531c:	bd90      	pop	{r4, r7, pc}
   1531e:	46c0      	nop			; (mov r8, r8)
   15320:	00034083 	.word	0x00034083
   15324:	00035d28 	.word	0x00035d28
   15328:	00034449 	.word	0x00034449
   1532c:	00035d34 	.word	0x00035d34
   15330:	0001dbf5 	.word	0x0001dbf5
   15334:	00035ce4 	.word	0x00035ce4
   15338:	00035d50 	.word	0x00035d50
   1533c:	000345f5 	.word	0x000345f5
   15340:	00035d58 	.word	0x00035d58
   15344:	00035d6c 	.word	0x00035d6c
   15348:	0001419d 	.word	0x0001419d
   1534c:	00035d70 	.word	0x00035d70
   15350:	00035d8c 	.word	0x00035d8c

00015354 <mqtt_callback>:
 *  - [MQTT_CALLBACK_DISCONNECTED](@ref MQTT_CALLBACK_DISCONNECTED)
 *  - [MQTT_CALLBACK_RECV_PUBLISH](@ref MQTT_CALLBACK_RECV_PUBLISH)
 * \param[in] data A structure contains notification informations. @ref mqtt_data
 */
static void mqtt_callback(struct mqtt_module *module_inst, int type, union mqtt_data *data)
{
   15354:	b590      	push	{r4, r7, lr}
   15356:	b08b      	sub	sp, #44	; 0x2c
   15358:	af06      	add	r7, sp, #24
   1535a:	60f8      	str	r0, [r7, #12]
   1535c:	60b9      	str	r1, [r7, #8]
   1535e:	607a      	str	r2, [r7, #4]
	switch (type) {
   15360:	68bb      	ldr	r3, [r7, #8]
   15362:	2b01      	cmp	r3, #1
   15364:	d03b      	beq.n	153de <mqtt_callback+0x8a>
   15366:	2b05      	cmp	r3, #5
   15368:	d058      	beq.n	1541c <mqtt_callback+0xc8>
   1536a:	2b00      	cmp	r3, #0
   1536c:	d000      	beq.n	15370 <mqtt_callback+0x1c>
		/* Stop timer and USART callback. */
		LogMessage(LOG_DEBUG_LVL,"MQTT disconnected\r\n");
		//usart_disable_callback(&cdc_uart_module, USART_CALLBACK_BUFFER_RECEIVED);
		break;
	}
}
   1536e:	e05b      	b.n	15428 <mqtt_callback+0xd4>
		if (data->sock_connected.result >= 0) {
   15370:	687b      	ldr	r3, [r7, #4]
   15372:	681b      	ldr	r3, [r3, #0]
   15374:	2b00      	cmp	r3, #0
   15376:	db25      	blt.n	153c4 <mqtt_callback+0x70>
			LogMessage(LOG_DEBUG_LVL,"\r\nConnecting to Broker...");
   15378:	4b2d      	ldr	r3, [pc, #180]	; (15430 <mqtt_callback+0xdc>)
   1537a:	0019      	movs	r1, r3
   1537c:	2001      	movs	r0, #1
   1537e:	4b2d      	ldr	r3, [pc, #180]	; (15434 <mqtt_callback+0xe0>)
   15380:	4798      	blx	r3
			if(0 != mqtt_connect_broker(module_inst, 1, CLOUDMQTT_USER_ID, CLOUDMQTT_USER_PASSWORD, CLOUDMQTT_USER_ID, NULL, NULL, 0, 0, 0))
   15382:	492d      	ldr	r1, [pc, #180]	; (15438 <mqtt_callback+0xe4>)
   15384:	4a2d      	ldr	r2, [pc, #180]	; (1543c <mqtt_callback+0xe8>)
   15386:	68f8      	ldr	r0, [r7, #12]
   15388:	2300      	movs	r3, #0
   1538a:	9305      	str	r3, [sp, #20]
   1538c:	2300      	movs	r3, #0
   1538e:	9304      	str	r3, [sp, #16]
   15390:	2300      	movs	r3, #0
   15392:	9303      	str	r3, [sp, #12]
   15394:	2300      	movs	r3, #0
   15396:	9302      	str	r3, [sp, #8]
   15398:	2300      	movs	r3, #0
   1539a:	9301      	str	r3, [sp, #4]
   1539c:	4b27      	ldr	r3, [pc, #156]	; (1543c <mqtt_callback+0xe8>)
   1539e:	9300      	str	r3, [sp, #0]
   153a0:	000b      	movs	r3, r1
   153a2:	2101      	movs	r1, #1
   153a4:	4c26      	ldr	r4, [pc, #152]	; (15440 <mqtt_callback+0xec>)
   153a6:	47a0      	blx	r4
   153a8:	1e03      	subs	r3, r0, #0
   153aa:	d005      	beq.n	153b8 <mqtt_callback+0x64>
				LogMessage(LOG_DEBUG_LVL,"MQTT  Error - NOT Connected to broker\r\n");
   153ac:	4b25      	ldr	r3, [pc, #148]	; (15444 <mqtt_callback+0xf0>)
   153ae:	0019      	movs	r1, r3
   153b0:	2001      	movs	r0, #1
   153b2:	4b20      	ldr	r3, [pc, #128]	; (15434 <mqtt_callback+0xe0>)
   153b4:	4798      	blx	r3
	break;
   153b6:	e037      	b.n	15428 <mqtt_callback+0xd4>
				LogMessage(LOG_DEBUG_LVL,"MQTT Connected to broker\r\n");
   153b8:	4b23      	ldr	r3, [pc, #140]	; (15448 <mqtt_callback+0xf4>)
   153ba:	0019      	movs	r1, r3
   153bc:	2001      	movs	r0, #1
   153be:	4b1d      	ldr	r3, [pc, #116]	; (15434 <mqtt_callback+0xe0>)
   153c0:	4798      	blx	r3
	break;
   153c2:	e031      	b.n	15428 <mqtt_callback+0xd4>
			LogMessage(LOG_DEBUG_LVL,"Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
   153c4:	4a21      	ldr	r2, [pc, #132]	; (1544c <mqtt_callback+0xf8>)
   153c6:	4b22      	ldr	r3, [pc, #136]	; (15450 <mqtt_callback+0xfc>)
   153c8:	0019      	movs	r1, r3
   153ca:	2001      	movs	r0, #1
   153cc:	4b19      	ldr	r3, [pc, #100]	; (15434 <mqtt_callback+0xe0>)
   153ce:	4798      	blx	r3
			mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
   153d0:	4a1e      	ldr	r2, [pc, #120]	; (1544c <mqtt_callback+0xf8>)
   153d2:	68fb      	ldr	r3, [r7, #12]
   153d4:	0011      	movs	r1, r2
   153d6:	0018      	movs	r0, r3
   153d8:	4b1e      	ldr	r3, [pc, #120]	; (15454 <mqtt_callback+0x100>)
   153da:	4798      	blx	r3
	break;
   153dc:	e024      	b.n	15428 <mqtt_callback+0xd4>
		if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
   153de:	687b      	ldr	r3, [r7, #4]
   153e0:	781b      	ldrb	r3, [r3, #0]
   153e2:	2b00      	cmp	r3, #0
   153e4:	d111      	bne.n	1540a <mqtt_callback+0xb6>
			mqtt_subscribe(module_inst, GAME_TOPIC_IN, 0, SubscribeHandlerGameTopic);
   153e6:	4b1c      	ldr	r3, [pc, #112]	; (15458 <mqtt_callback+0x104>)
   153e8:	491c      	ldr	r1, [pc, #112]	; (1545c <mqtt_callback+0x108>)
   153ea:	68f8      	ldr	r0, [r7, #12]
   153ec:	2200      	movs	r2, #0
   153ee:	4c1c      	ldr	r4, [pc, #112]	; (15460 <mqtt_callback+0x10c>)
   153f0:	47a0      	blx	r4
			mqtt_subscribe(module_inst, STATUS_TOPIC, 0, SubscribeHandlerStatusTopic);
   153f2:	4b1c      	ldr	r3, [pc, #112]	; (15464 <mqtt_callback+0x110>)
   153f4:	491c      	ldr	r1, [pc, #112]	; (15468 <mqtt_callback+0x114>)
   153f6:	68f8      	ldr	r0, [r7, #12]
   153f8:	2200      	movs	r2, #0
   153fa:	4c19      	ldr	r4, [pc, #100]	; (15460 <mqtt_callback+0x10c>)
   153fc:	47a0      	blx	r4
			LogMessage(LOG_DEBUG_LVL,"MQTT Connected\r\n");
   153fe:	4b1b      	ldr	r3, [pc, #108]	; (1546c <mqtt_callback+0x118>)
   15400:	0019      	movs	r1, r3
   15402:	2001      	movs	r0, #1
   15404:	4b0b      	ldr	r3, [pc, #44]	; (15434 <mqtt_callback+0xe0>)
   15406:	4798      	blx	r3
		break;
   15408:	e00e      	b.n	15428 <mqtt_callback+0xd4>
			LogMessage(LOG_DEBUG_LVL,"MQTT broker decline your access! error code %d\r\n", data->connected.result);
   1540a:	687b      	ldr	r3, [r7, #4]
   1540c:	781b      	ldrb	r3, [r3, #0]
   1540e:	001a      	movs	r2, r3
   15410:	4b17      	ldr	r3, [pc, #92]	; (15470 <mqtt_callback+0x11c>)
   15412:	0019      	movs	r1, r3
   15414:	2001      	movs	r0, #1
   15416:	4b07      	ldr	r3, [pc, #28]	; (15434 <mqtt_callback+0xe0>)
   15418:	4798      	blx	r3
		break;
   1541a:	e005      	b.n	15428 <mqtt_callback+0xd4>
		LogMessage(LOG_DEBUG_LVL,"MQTT disconnected\r\n");
   1541c:	4b15      	ldr	r3, [pc, #84]	; (15474 <mqtt_callback+0x120>)
   1541e:	0019      	movs	r1, r3
   15420:	2001      	movs	r0, #1
   15422:	4b04      	ldr	r3, [pc, #16]	; (15434 <mqtt_callback+0xe0>)
   15424:	4798      	blx	r3
		break;
   15426:	46c0      	nop			; (mov r8, r8)
}
   15428:	46c0      	nop			; (mov r8, r8)
   1542a:	46bd      	mov	sp, r7
   1542c:	b005      	add	sp, #20
   1542e:	bd90      	pop	{r4, r7, pc}
   15430:	00035dbc 	.word	0x00035dbc
   15434:	0001dbf5 	.word	0x0001dbf5
   15438:	00035dd8 	.word	0x00035dd8
   1543c:	00035dec 	.word	0x00035dec
   15440:	0002f20d 	.word	0x0002f20d
   15444:	00035dfc 	.word	0x00035dfc
   15448:	00035e24 	.word	0x00035e24
   1544c:	00035754 	.word	0x00035754
   15450:	00035e40 	.word	0x00035e40
   15454:	0002f1c5 	.word	0x0002f1c5
   15458:	000151ed 	.word	0x000151ed
   1545c:	00035e78 	.word	0x00035e78
   15460:	0002f3ad 	.word	0x0002f3ad
   15464:	00015155 	.word	0x00015155
   15468:	00035e90 	.word	0x00035e90
   1546c:	00035ea8 	.word	0x00035ea8
   15470:	00035ebc 	.word	0x00035ebc
   15474:	00035ef0 	.word	0x00035ef0

00015478 <configure_mqtt>:

/**
 * \brief Configure MQTT service.
 */
static void configure_mqtt(void)
{
   15478:	b580      	push	{r7, lr}
   1547a:	b088      	sub	sp, #32
   1547c:	af00      	add	r7, sp, #0
	struct mqtt_config mqtt_conf;
	int result;

	mqtt_get_config_defaults(&mqtt_conf);
   1547e:	1d3b      	adds	r3, r7, #4
   15480:	0018      	movs	r0, r3
   15482:	4b1f      	ldr	r3, [pc, #124]	; (15500 <configure_mqtt+0x88>)
   15484:	4798      	blx	r3
	/* To use the MQTT service, it is necessary to always set the buffer and the timer. */
	mqtt_conf.read_buffer = mqtt_read_buffer;
   15486:	1d3b      	adds	r3, r7, #4
   15488:	4a1e      	ldr	r2, [pc, #120]	; (15504 <configure_mqtt+0x8c>)
   1548a:	609a      	str	r2, [r3, #8]
	mqtt_conf.read_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   1548c:	1d3b      	adds	r3, r7, #4
   1548e:	2280      	movs	r2, #128	; 0x80
   15490:	0092      	lsls	r2, r2, #2
   15492:	60da      	str	r2, [r3, #12]
	mqtt_conf.send_buffer = mqtt_send_buffer;
   15494:	1d3b      	adds	r3, r7, #4
   15496:	4a1c      	ldr	r2, [pc, #112]	; (15508 <configure_mqtt+0x90>)
   15498:	611a      	str	r2, [r3, #16]
	mqtt_conf.send_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   1549a:	1d3b      	adds	r3, r7, #4
   1549c:	2280      	movs	r2, #128	; 0x80
   1549e:	0092      	lsls	r2, r2, #2
   154a0:	615a      	str	r2, [r3, #20]
	mqtt_conf.port = CLOUDMQTT_PORT;
   154a2:	1d3b      	adds	r3, r7, #4
   154a4:	4a19      	ldr	r2, [pc, #100]	; (1550c <configure_mqtt+0x94>)
   154a6:	801a      	strh	r2, [r3, #0]
	mqtt_conf.keep_alive = 6000;
   154a8:	1d3b      	adds	r3, r7, #4
   154aa:	4a19      	ldr	r2, [pc, #100]	; (15510 <configure_mqtt+0x98>)
   154ac:	809a      	strh	r2, [r3, #4]
	
	result = mqtt_init(&mqtt_inst, &mqtt_conf);
   154ae:	1d3a      	adds	r2, r7, #4
   154b0:	4b18      	ldr	r3, [pc, #96]	; (15514 <configure_mqtt+0x9c>)
   154b2:	0011      	movs	r1, r2
   154b4:	0018      	movs	r0, r3
   154b6:	4b18      	ldr	r3, [pc, #96]	; (15518 <configure_mqtt+0xa0>)
   154b8:	4798      	blx	r3
   154ba:	0003      	movs	r3, r0
   154bc:	61fb      	str	r3, [r7, #28]
	if (result < 0) {
   154be:	69fb      	ldr	r3, [r7, #28]
   154c0:	2b00      	cmp	r3, #0
   154c2:	da06      	bge.n	154d2 <configure_mqtt+0x5a>
		LogMessage(LOG_DEBUG_LVL,"MQTT initialization failed. Error code is (%d)\r\n", result);
   154c4:	69fa      	ldr	r2, [r7, #28]
   154c6:	4b15      	ldr	r3, [pc, #84]	; (1551c <configure_mqtt+0xa4>)
   154c8:	0019      	movs	r1, r3
   154ca:	2001      	movs	r0, #1
   154cc:	4b14      	ldr	r3, [pc, #80]	; (15520 <configure_mqtt+0xa8>)
   154ce:	4798      	blx	r3
		while (1) {
   154d0:	e7fe      	b.n	154d0 <configure_mqtt+0x58>
		}
	}

	result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
   154d2:	4a14      	ldr	r2, [pc, #80]	; (15524 <configure_mqtt+0xac>)
   154d4:	4b0f      	ldr	r3, [pc, #60]	; (15514 <configure_mqtt+0x9c>)
   154d6:	0011      	movs	r1, r2
   154d8:	0018      	movs	r0, r3
   154da:	4b13      	ldr	r3, [pc, #76]	; (15528 <configure_mqtt+0xb0>)
   154dc:	4798      	blx	r3
   154de:	0003      	movs	r3, r0
   154e0:	61fb      	str	r3, [r7, #28]
	if (result < 0) {
   154e2:	69fb      	ldr	r3, [r7, #28]
   154e4:	2b00      	cmp	r3, #0
   154e6:	da06      	bge.n	154f6 <configure_mqtt+0x7e>
		LogMessage(LOG_DEBUG_LVL,"MQTT register callback failed. Error code is (%d)\r\n", result);
   154e8:	69fa      	ldr	r2, [r7, #28]
   154ea:	4b10      	ldr	r3, [pc, #64]	; (1552c <configure_mqtt+0xb4>)
   154ec:	0019      	movs	r1, r3
   154ee:	2001      	movs	r0, #1
   154f0:	4b0b      	ldr	r3, [pc, #44]	; (15520 <configure_mqtt+0xa8>)
   154f2:	4798      	blx	r3
		while (1) {
   154f4:	e7fe      	b.n	154f4 <configure_mqtt+0x7c>
		}
	}
}
   154f6:	46c0      	nop			; (mov r8, r8)
   154f8:	46bd      	mov	sp, r7
   154fa:	b008      	add	sp, #32
   154fc:	bd80      	pop	{r7, pc}
   154fe:	46c0      	nop			; (mov r8, r8)
   15500:	0002f105 	.word	0x0002f105
   15504:	20000544 	.word	0x20000544
   15508:	20000744 	.word	0x20000744
   1550c:	0000075b 	.word	0x0000075b
   15510:	00001770 	.word	0x00001770
   15514:	2000050c 	.word	0x2000050c
   15518:	0002f055 	.word	0x0002f055
   1551c:	00035f04 	.word	0x00035f04
   15520:	0001dbf5 	.word	0x0001dbf5
   15524:	00015355 	.word	0x00015355
   15528:	0002f145 	.word	0x0002f145
   1552c:	00035f38 	.word	0x00035f38

00015530 <configure_extint_channel>:

//SETUP FOR EXTERNAL BUTTON INTERRUPT -- Used to send an MQTT Message

void configure_extint_channel(void)
{
   15530:	b580      	push	{r7, lr}
   15532:	b084      	sub	sp, #16
   15534:	af00      	add	r7, sp, #0
    struct extint_chan_conf config_extint_chan;
    extint_chan_get_config_defaults(&config_extint_chan);
   15536:	1d3b      	adds	r3, r7, #4
   15538:	0018      	movs	r0, r3
   1553a:	4b0b      	ldr	r3, [pc, #44]	; (15568 <configure_extint_channel+0x38>)
   1553c:	4798      	blx	r3
    config_extint_chan.gpio_pin           = BUTTON_0_EIC_PIN;
   1553e:	1d3b      	adds	r3, r7, #4
   15540:	2237      	movs	r2, #55	; 0x37
   15542:	601a      	str	r2, [r3, #0]
    config_extint_chan.gpio_pin_mux       = BUTTON_0_EIC_MUX;
   15544:	1d3b      	adds	r3, r7, #4
   15546:	2200      	movs	r2, #0
   15548:	605a      	str	r2, [r3, #4]
    config_extint_chan.gpio_pin_pull      = EXTINT_PULL_UP;
   1554a:	1d3b      	adds	r3, r7, #4
   1554c:	2201      	movs	r2, #1
   1554e:	721a      	strb	r2, [r3, #8]
    config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   15550:	1d3b      	adds	r3, r7, #4
   15552:	2202      	movs	r2, #2
   15554:	72da      	strb	r2, [r3, #11]
    extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
   15556:	1d3b      	adds	r3, r7, #4
   15558:	0019      	movs	r1, r3
   1555a:	2007      	movs	r0, #7
   1555c:	4b03      	ldr	r3, [pc, #12]	; (1556c <configure_extint_channel+0x3c>)
   1555e:	4798      	blx	r3
}
   15560:	46c0      	nop			; (mov r8, r8)
   15562:	46bd      	mov	sp, r7
   15564:	b004      	add	sp, #16
   15566:	bd80      	pop	{r7, pc}
   15568:	00026295 	.word	0x00026295
   1556c:	000262c9 	.word	0x000262c9

00015570 <configure_extint_callbacks>:

void extint_detection_callback(void);
void configure_extint_callbacks(void)
{
   15570:	b580      	push	{r7, lr}
   15572:	af00      	add	r7, sp, #0
    extint_register_callback(extint_detection_callback,
   15574:	4b06      	ldr	r3, [pc, #24]	; (15590 <configure_extint_callbacks+0x20>)
   15576:	2200      	movs	r2, #0
   15578:	2107      	movs	r1, #7
   1557a:	0018      	movs	r0, r3
   1557c:	4b05      	ldr	r3, [pc, #20]	; (15594 <configure_extint_callbacks+0x24>)
   1557e:	4798      	blx	r3
            BUTTON_0_EIC_LINE,
            EXTINT_CALLBACK_TYPE_DETECT);
    extint_chan_enable_callback(BUTTON_0_EIC_LINE,
   15580:	2100      	movs	r1, #0
   15582:	2007      	movs	r0, #7
   15584:	4b04      	ldr	r3, [pc, #16]	; (15598 <configure_extint_callbacks+0x28>)
   15586:	4798      	blx	r3
            EXTINT_CALLBACK_TYPE_DETECT);
}
   15588:	46c0      	nop			; (mov r8, r8)
   1558a:	46bd      	mov	sp, r7
   1558c:	bd80      	pop	{r7, pc}
   1558e:	46c0      	nop			; (mov r8, r8)
   15590:	0001559d 	.word	0x0001559d
   15594:	00025e95 	.word	0x00025e95
   15598:	00025ef9 	.word	0x00025ef9

0001559c <extint_detection_callback>:


volatile bool isPressed = false;
void extint_detection_callback(void)
{
   1559c:	b580      	push	{r7, lr}
   1559e:	af00      	add	r7, sp, #0
	//Publish some data after a button press and release. Note: just an example! This is not the most elegant way of doing this!
	temperature++;
   155a0:	4b08      	ldr	r3, [pc, #32]	; (155c4 <extint_detection_callback+0x28>)
   155a2:	681b      	ldr	r3, [r3, #0]
   155a4:	1c5a      	adds	r2, r3, #1
   155a6:	4b07      	ldr	r3, [pc, #28]	; (155c4 <extint_detection_callback+0x28>)
   155a8:	601a      	str	r2, [r3, #0]
	if (temperature > 40) temperature = 1;
   155aa:	4b06      	ldr	r3, [pc, #24]	; (155c4 <extint_detection_callback+0x28>)
   155ac:	681b      	ldr	r3, [r3, #0]
   155ae:	2b28      	cmp	r3, #40	; 0x28
   155b0:	d902      	bls.n	155b8 <extint_detection_callback+0x1c>
   155b2:	4b04      	ldr	r3, [pc, #16]	; (155c4 <extint_detection_callback+0x28>)
   155b4:	2201      	movs	r2, #1
   155b6:	601a      	str	r2, [r3, #0]
	//snprintf(mqtt_msg, 63, "{\"d\":{\"temp\":%d}}", temperature);imuDataVar
	isPressed = true;
   155b8:	4b03      	ldr	r3, [pc, #12]	; (155c8 <extint_detection_callback+0x2c>)
   155ba:	2201      	movs	r2, #1
   155bc:	701a      	strb	r2, [r3, #0]
	
}
   155be:	46c0      	nop			; (mov r8, r8)
   155c0:	46bd      	mov	sp, r7
   155c2:	bd80      	pop	{r7, pc}
   155c4:	20000058 	.word	0x20000058
   155c8:	20000944 	.word	0x20000944

000155cc <HTTP_DownloadFileInit>:
* @brief	Routine to initialize HTTP download of the OTAU file
* @note

*****************************************************************************/
static void HTTP_DownloadFileInit(void)
{
   155cc:	b580      	push	{r7, lr}
   155ce:	af00      	add	r7, sp, #0
	
	if(mqtt_disconnect(&mqtt_inst, main_mqtt_broker))
   155d0:	4a15      	ldr	r2, [pc, #84]	; (15628 <HTTP_DownloadFileInit+0x5c>)
   155d2:	4b16      	ldr	r3, [pc, #88]	; (1562c <HTTP_DownloadFileInit+0x60>)
   155d4:	0011      	movs	r1, r2
   155d6:	0018      	movs	r0, r3
   155d8:	4b15      	ldr	r3, [pc, #84]	; (15630 <HTTP_DownloadFileInit+0x64>)
   155da:	4798      	blx	r3
   155dc:	1e03      	subs	r3, r0, #0
   155de:	d008      	beq.n	155f2 <HTTP_DownloadFileInit+0x26>
	{
		LogMessage(LOG_DEBUG_LVL,"Error connecting to MQTT Broker!\r\n");
   155e0:	4b14      	ldr	r3, [pc, #80]	; (15634 <HTTP_DownloadFileInit+0x68>)
   155e2:	0019      	movs	r1, r3
   155e4:	2001      	movs	r0, #1
   155e6:	4b14      	ldr	r3, [pc, #80]	; (15638 <HTTP_DownloadFileInit+0x6c>)
   155e8:	4798      	blx	r3
	}
	while((mqtt_inst.isConnected))
   155ea:	e002      	b.n	155f2 <HTTP_DownloadFileInit+0x26>
	{
		m2m_wifi_handle_events(NULL);
   155ec:	2000      	movs	r0, #0
   155ee:	4b13      	ldr	r3, [pc, #76]	; (1563c <HTTP_DownloadFileInit+0x70>)
   155f0:	4798      	blx	r3
	while((mqtt_inst.isConnected))
   155f2:	4b0e      	ldr	r3, [pc, #56]	; (1562c <HTTP_DownloadFileInit+0x60>)
   155f4:	2234      	movs	r2, #52	; 0x34
   155f6:	5c9b      	ldrb	r3, [r3, r2]
   155f8:	2b00      	cmp	r3, #0
   155fa:	d1f7      	bne.n	155ec <HTTP_DownloadFileInit+0x20>
	}
	socketDeinit();
   155fc:	4b10      	ldr	r3, [pc, #64]	; (15640 <HTTP_DownloadFileInit+0x74>)
   155fe:	4798      	blx	r3
	//DOWNLOAD A FILE
	do_download_flag = true;
   15600:	4b10      	ldr	r3, [pc, #64]	; (15644 <HTTP_DownloadFileInit+0x78>)
   15602:	2201      	movs	r2, #1
   15604:	701a      	strb	r2, [r3, #0]
	/* Register socket callback function. */
	registerSocketCallback(socket_cb, resolve_cb);
   15606:	4a10      	ldr	r2, [pc, #64]	; (15648 <HTTP_DownloadFileInit+0x7c>)
   15608:	4b10      	ldr	r3, [pc, #64]	; (1564c <HTTP_DownloadFileInit+0x80>)
   1560a:	0011      	movs	r1, r2
   1560c:	0018      	movs	r0, r3
   1560e:	4b10      	ldr	r3, [pc, #64]	; (15650 <HTTP_DownloadFileInit+0x84>)
   15610:	4798      	blx	r3
	/* Initialize socket module. */
	socketInit();
   15612:	4b10      	ldr	r3, [pc, #64]	; (15654 <HTTP_DownloadFileInit+0x88>)
   15614:	4798      	blx	r3
	


	start_download();
   15616:	4b10      	ldr	r3, [pc, #64]	; (15658 <HTTP_DownloadFileInit+0x8c>)
   15618:	4798      	blx	r3
	wifiStateMachine = WIFI_DOWNLOAD_HANDLE;
   1561a:	4b10      	ldr	r3, [pc, #64]	; (1565c <HTTP_DownloadFileInit+0x90>)
   1561c:	2203      	movs	r2, #3
   1561e:	701a      	strb	r2, [r3, #0]
}
   15620:	46c0      	nop			; (mov r8, r8)
   15622:	46bd      	mov	sp, r7
   15624:	bd80      	pop	{r7, pc}
   15626:	46c0      	nop			; (mov r8, r8)
   15628:	00035754 	.word	0x00035754
   1562c:	2000050c 	.word	0x2000050c
   15630:	0002f2f9 	.word	0x0002f2f9
   15634:	00035b6c 	.word	0x00035b6c
   15638:	0001dbf5 	.word	0x0001dbf5
   1563c:	00021985 	.word	0x00021985
   15640:	00024f41 	.word	0x00024f41
   15644:	200004dc 	.word	0x200004dc
   15648:	00014e89 	.word	0x00014e89
   1564c:	00014e55 	.word	0x00014e55
   15650:	00024f89 	.word	0x00024f89
   15654:	00024ef1 	.word	0x00024ef1
   15658:	00014a7d 	.word	0x00014a7d
   1565c:	200004d0 	.word	0x200004d0

00015660 <HTTP_DownloadFileTransaction>:
* @brief	Routine to handle the HTTP transaction of downloading a file
* @note

*****************************************************************************/
static void HTTP_DownloadFileTransaction(void)
{
   15660:	b590      	push	{r4, r7, lr}
   15662:	b085      	sub	sp, #20
   15664:	af00      	add	r7, sp, #0

	/* Connect to router. */
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   15666:	e006      	b.n	15676 <HTTP_DownloadFileTransaction+0x16>
		/* Handle pending events from network controller. */
		m2m_wifi_handle_events(NULL);
   15668:	2000      	movs	r0, #0
   1566a:	4b2a      	ldr	r3, [pc, #168]	; (15714 <HTTP_DownloadFileTransaction+0xb4>)
   1566c:	4798      	blx	r3
		/* Checks the timer timeout. */
		sw_timer_task(&swt_module_inst);
   1566e:	4b2a      	ldr	r3, [pc, #168]	; (15718 <HTTP_DownloadFileTransaction+0xb8>)
   15670:	0018      	movs	r0, r3
   15672:	4b2a      	ldr	r3, [pc, #168]	; (1571c <HTTP_DownloadFileTransaction+0xbc>)
   15674:	4798      	blx	r3
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   15676:	2010      	movs	r0, #16
   15678:	4b29      	ldr	r3, [pc, #164]	; (15720 <HTTP_DownloadFileTransaction+0xc0>)
   1567a:	4798      	blx	r3
   1567c:	0003      	movs	r3, r0
   1567e:	001a      	movs	r2, r3
   15680:	2301      	movs	r3, #1
   15682:	4053      	eors	r3, r2
   15684:	b2db      	uxtb	r3, r3
   15686:	2b00      	cmp	r3, #0
   15688:	d009      	beq.n	1569e <HTTP_DownloadFileTransaction+0x3e>
   1568a:	2020      	movs	r0, #32
   1568c:	4b24      	ldr	r3, [pc, #144]	; (15720 <HTTP_DownloadFileTransaction+0xc0>)
   1568e:	4798      	blx	r3
   15690:	0003      	movs	r3, r0
   15692:	001a      	movs	r2, r3
   15694:	2301      	movs	r3, #1
   15696:	4053      	eors	r3, r2
   15698:	b2db      	uxtb	r3, r3
   1569a:	2b00      	cmp	r3, #0
   1569c:	d1e4      	bne.n	15668 <HTTP_DownloadFileTransaction+0x8>
		//vTaskDelay(5);
	}

	//Disable socket for HTTP Transfer
	socketDeinit();
   1569e:	4b21      	ldr	r3, [pc, #132]	; (15724 <HTTP_DownloadFileTransaction+0xc4>)
   156a0:	4798      	blx	r3
	vTaskDelay(1000);
   156a2:	23fa      	movs	r3, #250	; 0xfa
   156a4:	009b      	lsls	r3, r3, #2
   156a6:	0018      	movs	r0, r3
   156a8:	4b1f      	ldr	r3, [pc, #124]	; (15728 <HTTP_DownloadFileTransaction+0xc8>)
   156aa:	4798      	blx	r3
	//CONNECT TO MQTT BROKER
	do_download_flag = false;
   156ac:	4b1f      	ldr	r3, [pc, #124]	; (1572c <HTTP_DownloadFileTransaction+0xcc>)
   156ae:	2200      	movs	r2, #0
   156b0:	701a      	strb	r2, [r3, #0]

	//Write Flag
	char test_file_name[] = "0:Update.txt";
   156b2:	003b      	movs	r3, r7
   156b4:	4a1e      	ldr	r2, [pc, #120]	; (15730 <HTTP_DownloadFileTransaction+0xd0>)
   156b6:	ca13      	ldmia	r2!, {r0, r1, r4}
   156b8:	c313      	stmia	r3!, {r0, r1, r4}
   156ba:	7812      	ldrb	r2, [r2, #0]
   156bc:	701a      	strb	r2, [r3, #0]
	test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   156be:	003b      	movs	r3, r7
   156c0:	2230      	movs	r2, #48	; 0x30
   156c2:	701a      	strb	r2, [r3, #0]
	FRESULT res = f_open(&file_object,
   156c4:	230f      	movs	r3, #15
   156c6:	18fc      	adds	r4, r7, r3
   156c8:	0039      	movs	r1, r7
   156ca:	4b1a      	ldr	r3, [pc, #104]	; (15734 <HTTP_DownloadFileTransaction+0xd4>)
   156cc:	220a      	movs	r2, #10
   156ce:	0018      	movs	r0, r3
   156d0:	4b19      	ldr	r3, [pc, #100]	; (15738 <HTTP_DownloadFileTransaction+0xd8>)
   156d2:	4798      	blx	r3
   156d4:	0003      	movs	r3, r0
   156d6:	7023      	strb	r3, [r4, #0]
	(char const *)test_file_name,
	FA_CREATE_ALWAYS | FA_WRITE);
	if (res != FR_OK)
   156d8:	230f      	movs	r3, #15
   156da:	18fb      	adds	r3, r7, r3
   156dc:	781b      	ldrb	r3, [r3, #0]
   156de:	2b00      	cmp	r3, #0
   156e0:	d008      	beq.n	156f4 <HTTP_DownloadFileTransaction+0x94>
	{
		LogMessage(LOG_INFO_LVL ,"[FAIL] res %d\r\n", res);
   156e2:	230f      	movs	r3, #15
   156e4:	18fb      	adds	r3, r7, r3
   156e6:	781a      	ldrb	r2, [r3, #0]
   156e8:	4b14      	ldr	r3, [pc, #80]	; (1573c <HTTP_DownloadFileTransaction+0xdc>)
   156ea:	0019      	movs	r1, r3
   156ec:	2000      	movs	r0, #0
   156ee:	4b14      	ldr	r3, [pc, #80]	; (15740 <HTTP_DownloadFileTransaction+0xe0>)
   156f0:	4798      	blx	r3
   156f2:	e003      	b.n	156fc <HTTP_DownloadFileTransaction+0x9c>
	}
	else
	{
		SerialConsoleWriteString("Update.txt added!\r\n");
   156f4:	4b13      	ldr	r3, [pc, #76]	; (15744 <HTTP_DownloadFileTransaction+0xe4>)
   156f6:	0018      	movs	r0, r3
   156f8:	4b13      	ldr	r3, [pc, #76]	; (15748 <HTTP_DownloadFileTransaction+0xe8>)
   156fa:	4798      	blx	r3
	}
	f_close(&file_object);
   156fc:	4b0d      	ldr	r3, [pc, #52]	; (15734 <HTTP_DownloadFileTransaction+0xd4>)
   156fe:	0018      	movs	r0, r3
   15700:	4b12      	ldr	r3, [pc, #72]	; (1574c <HTTP_DownloadFileTransaction+0xec>)
   15702:	4798      	blx	r3
	wifiStateMachine = WIFI_MQTT_INIT;	
   15704:	4b12      	ldr	r3, [pc, #72]	; (15750 <HTTP_DownloadFileTransaction+0xf0>)
   15706:	2200      	movs	r2, #0
   15708:	701a      	strb	r2, [r3, #0]
}
   1570a:	46c0      	nop			; (mov r8, r8)
   1570c:	46bd      	mov	sp, r7
   1570e:	b005      	add	sp, #20
   15710:	bd90      	pop	{r4, r7, pc}
   15712:	46c0      	nop			; (mov r8, r8)
   15714:	00021985 	.word	0x00021985
   15718:	20004250 	.word	0x20004250
   1571c:	00032021 	.word	0x00032021
   15720:	00014755 	.word	0x00014755
   15724:	00024f41 	.word	0x00024f41
   15728:	0001beb5 	.word	0x0001beb5
   1572c:	200004dc 	.word	0x200004dc
   15730:	00035f90 	.word	0x00035f90
   15734:	200004e0 	.word	0x200004e0
   15738:	0002d2e9 	.word	0x0002d2e9
   1573c:	00035f6c 	.word	0x00035f6c
   15740:	0001dbf5 	.word	0x0001dbf5
   15744:	00035f7c 	.word	0x00035f7c
   15748:	0001db09 	.word	0x0001db09
   1574c:	0002dce9 	.word	0x0002dce9
   15750:	200004d0 	.word	0x200004d0

00015754 <MQTT_InitRoutine>:
* @brief	Routine to initialize the MQTT socket to prepare for MQTT transactions
* @note         

*****************************************************************************/
static void MQTT_InitRoutine(void)
{
   15754:	b580      	push	{r7, lr}
   15756:	af00      	add	r7, sp, #0
	socketDeinit();
   15758:	4b18      	ldr	r3, [pc, #96]	; (157bc <MQTT_InitRoutine+0x68>)
   1575a:	4798      	blx	r3
	configure_mqtt();
   1575c:	4b18      	ldr	r3, [pc, #96]	; (157c0 <MQTT_InitRoutine+0x6c>)
   1575e:	4798      	blx	r3
	//Re-enable socket for MQTT Transfer
	registerSocketCallback(socket_event_handler, socket_resolve_handler);
   15760:	4a18      	ldr	r2, [pc, #96]	; (157c4 <MQTT_InitRoutine+0x70>)
   15762:	4b19      	ldr	r3, [pc, #100]	; (157c8 <MQTT_InitRoutine+0x74>)
   15764:	0011      	movs	r1, r2
   15766:	0018      	movs	r0, r3
   15768:	4b18      	ldr	r3, [pc, #96]	; (157cc <MQTT_InitRoutine+0x78>)
   1576a:	4798      	blx	r3
	socketInit();
   1576c:	4b18      	ldr	r3, [pc, #96]	; (157d0 <MQTT_InitRoutine+0x7c>)
   1576e:	4798      	blx	r3
	/* Connect to router. */
	if(!(mqtt_inst.isConnected))
   15770:	4b18      	ldr	r3, [pc, #96]	; (157d4 <MQTT_InitRoutine+0x80>)
   15772:	2234      	movs	r2, #52	; 0x34
   15774:	5c9b      	ldrb	r3, [r3, r2]
   15776:	2201      	movs	r2, #1
   15778:	4053      	eors	r3, r2
   1577a:	b2db      	uxtb	r3, r3
   1577c:	2b00      	cmp	r3, #0
   1577e:	d00c      	beq.n	1579a <MQTT_InitRoutine+0x46>
	{
		if (mqtt_connect(&mqtt_inst, main_mqtt_broker))
   15780:	4a15      	ldr	r2, [pc, #84]	; (157d8 <MQTT_InitRoutine+0x84>)
   15782:	4b14      	ldr	r3, [pc, #80]	; (157d4 <MQTT_InitRoutine+0x80>)
   15784:	0011      	movs	r1, r2
   15786:	0018      	movs	r0, r3
   15788:	4b14      	ldr	r3, [pc, #80]	; (157dc <MQTT_InitRoutine+0x88>)
   1578a:	4798      	blx	r3
   1578c:	1e03      	subs	r3, r0, #0
   1578e:	d004      	beq.n	1579a <MQTT_InitRoutine+0x46>
		{
			LogMessage(LOG_DEBUG_LVL,"Error connecting to MQTT Broker!\r\n");
   15790:	4b13      	ldr	r3, [pc, #76]	; (157e0 <MQTT_InitRoutine+0x8c>)
   15792:	0019      	movs	r1, r3
   15794:	2001      	movs	r0, #1
   15796:	4b13      	ldr	r3, [pc, #76]	; (157e4 <MQTT_InitRoutine+0x90>)
   15798:	4798      	blx	r3
		}
	}

	if(mqtt_inst.isConnected)
   1579a:	4b0e      	ldr	r3, [pc, #56]	; (157d4 <MQTT_InitRoutine+0x80>)
   1579c:	2234      	movs	r2, #52	; 0x34
   1579e:	5c9b      	ldrb	r3, [r3, r2]
   157a0:	2b00      	cmp	r3, #0
   157a2:	d004      	beq.n	157ae <MQTT_InitRoutine+0x5a>
	{
		LogMessage(LOG_DEBUG_LVL,"Connected to MQTT Broker!\r\n");
   157a4:	4b10      	ldr	r3, [pc, #64]	; (157e8 <MQTT_InitRoutine+0x94>)
   157a6:	0019      	movs	r1, r3
   157a8:	2001      	movs	r0, #1
   157aa:	4b0e      	ldr	r3, [pc, #56]	; (157e4 <MQTT_InitRoutine+0x90>)
   157ac:	4798      	blx	r3
	}
	wifiStateMachine = WIFI_MQTT_HANDLE;
   157ae:	4b0f      	ldr	r3, [pc, #60]	; (157ec <MQTT_InitRoutine+0x98>)
   157b0:	2201      	movs	r2, #1
   157b2:	701a      	strb	r2, [r3, #0]
}
   157b4:	46c0      	nop			; (mov r8, r8)
   157b6:	46bd      	mov	sp, r7
   157b8:	bd80      	pop	{r7, pc}
   157ba:	46c0      	nop			; (mov r8, r8)
   157bc:	00024f41 	.word	0x00024f41
   157c0:	00015479 	.word	0x00015479
   157c4:	00015131 	.word	0x00015131
   157c8:	000150fd 	.word	0x000150fd
   157cc:	00024f89 	.word	0x00024f89
   157d0:	00024ef1 	.word	0x00024ef1
   157d4:	2000050c 	.word	0x2000050c
   157d8:	00035754 	.word	0x00035754
   157dc:	0002f1c5 	.word	0x0002f1c5
   157e0:	00035b6c 	.word	0x00035b6c
   157e4:	0001dbf5 	.word	0x0001dbf5
   157e8:	00035fa0 	.word	0x00035fa0
   157ec:	200004d0 	.word	0x200004d0

000157f0 <MQTT_HandleTransactions>:
* @brief	Routine to handle MQTT transactions
* @note

*****************************************************************************/
static void MQTT_HandleTransactions(void)
{
   157f0:	b580      	push	{r7, lr}
   157f2:	af00      	add	r7, sp, #0
	
	/* Handle pending events from network controller. */
	m2m_wifi_handle_events(NULL);
   157f4:	2000      	movs	r0, #0
   157f6:	4b0a      	ldr	r3, [pc, #40]	; (15820 <MQTT_HandleTransactions+0x30>)
   157f8:	4798      	blx	r3
	sw_timer_task(&swt_module_inst);
   157fa:	4b0a      	ldr	r3, [pc, #40]	; (15824 <MQTT_HandleTransactions+0x34>)
   157fc:	0018      	movs	r0, r3
   157fe:	4b0a      	ldr	r3, [pc, #40]	; (15828 <MQTT_HandleTransactions+0x38>)
   15800:	4798      	blx	r3


	//Check if data has to be sent!
	MQTT_HandleGameMessages();
   15802:	4b0a      	ldr	r3, [pc, #40]	; (1582c <MQTT_HandleTransactions+0x3c>)
   15804:	4798      	blx	r3

	//Handle MQTT messages
	if(mqtt_inst.isConnected)
   15806:	4b0a      	ldr	r3, [pc, #40]	; (15830 <MQTT_HandleTransactions+0x40>)
   15808:	2234      	movs	r2, #52	; 0x34
   1580a:	5c9b      	ldrb	r3, [r3, r2]
   1580c:	2b00      	cmp	r3, #0
   1580e:	d004      	beq.n	1581a <MQTT_HandleTransactions+0x2a>
	mqtt_yield(&mqtt_inst, 100);	
   15810:	4b07      	ldr	r3, [pc, #28]	; (15830 <MQTT_HandleTransactions+0x40>)
   15812:	2164      	movs	r1, #100	; 0x64
   15814:	0018      	movs	r0, r3
   15816:	4b07      	ldr	r3, [pc, #28]	; (15834 <MQTT_HandleTransactions+0x44>)
   15818:	4798      	blx	r3
}
   1581a:	46c0      	nop			; (mov r8, r8)
   1581c:	46bd      	mov	sp, r7
   1581e:	bd80      	pop	{r7, pc}
   15820:	00021985 	.word	0x00021985
   15824:	20004250 	.word	0x20004250
   15828:	00032021 	.word	0x00032021
   1582c:	00015839 	.word	0x00015839
   15830:	2000050c 	.word	0x2000050c
   15834:	0002f3f5 	.word	0x0002f3f5

00015838 <MQTT_HandleGameMessages>:


static void MQTT_HandleGameMessages(void)
{
   15838:	b590      	push	{r4, r7, lr}
   1583a:	b08b      	sub	sp, #44	; 0x2c
   1583c:	af02      	add	r7, sp, #8
	struct GameDataPacket gamePacket;
	if  (pdPASS == xQueueReceive( xQueueGameBuffer , &gamePacket, 0 ))
   1583e:	4b39      	ldr	r3, [pc, #228]	; (15924 <MQTT_HandleGameMessages+0xec>)
   15840:	681b      	ldr	r3, [r3, #0]
   15842:	2208      	movs	r2, #8
   15844:	18b9      	adds	r1, r7, r2
   15846:	2200      	movs	r2, #0
   15848:	0018      	movs	r0, r3
   1584a:	4b37      	ldr	r3, [pc, #220]	; (15928 <MQTT_HandleGameMessages+0xf0>)
   1584c:	4798      	blx	r3
   1584e:	0003      	movs	r3, r0
   15850:	2b01      	cmp	r3, #1
   15852:	d163      	bne.n	1591c <MQTT_HandleGameMessages+0xe4>
	{
		snprintf(mqtt_msg, 63, "{\"game\":[");
   15854:	4b35      	ldr	r3, [pc, #212]	; (1592c <MQTT_HandleGameMessages+0xf4>)
   15856:	4a36      	ldr	r2, [pc, #216]	; (15930 <MQTT_HandleGameMessages+0xf8>)
   15858:	ca03      	ldmia	r2!, {r0, r1}
   1585a:	c303      	stmia	r3!, {r0, r1}
   1585c:	8812      	ldrh	r2, [r2, #0]
   1585e:	801a      	strh	r2, [r3, #0]
			for(int iter = 0; iter < GAME_SIZE; iter++)
   15860:	2300      	movs	r3, #0
   15862:	61fb      	str	r3, [r7, #28]
   15864:	e02d      	b.n	158c2 <MQTT_HandleGameMessages+0x8a>
			{
				char numGame[5];
				if(gamePacket.game[iter] != 0xFF)
   15866:	2308      	movs	r3, #8
   15868:	18fa      	adds	r2, r7, r3
   1586a:	69fb      	ldr	r3, [r7, #28]
   1586c:	18d3      	adds	r3, r2, r3
   1586e:	781b      	ldrb	r3, [r3, #0]
   15870:	2bff      	cmp	r3, #255	; 0xff
   15872:	d02a      	beq.n	158ca <MQTT_HandleGameMessages+0x92>
				{
					snprintf(numGame, 3, "%d", gamePacket.game[iter]);
   15874:	2308      	movs	r3, #8
   15876:	18fa      	adds	r2, r7, r3
   15878:	69fb      	ldr	r3, [r7, #28]
   1587a:	18d3      	adds	r3, r2, r3
   1587c:	781b      	ldrb	r3, [r3, #0]
   1587e:	4a2d      	ldr	r2, [pc, #180]	; (15934 <MQTT_HandleGameMessages+0xfc>)
   15880:	0038      	movs	r0, r7
   15882:	2103      	movs	r1, #3
   15884:	4c2c      	ldr	r4, [pc, #176]	; (15938 <MQTT_HandleGameMessages+0x100>)
   15886:	47a0      	blx	r4
					strcat(mqtt_msg, numGame);
   15888:	003a      	movs	r2, r7
   1588a:	4b28      	ldr	r3, [pc, #160]	; (1592c <MQTT_HandleGameMessages+0xf4>)
   1588c:	0011      	movs	r1, r2
   1588e:	0018      	movs	r0, r3
   15890:	4b2a      	ldr	r3, [pc, #168]	; (1593c <MQTT_HandleGameMessages+0x104>)
   15892:	4798      	blx	r3
					if(gamePacket.game[iter+1] != 0xFF && iter+1 <GAME_SIZE)
   15894:	69fb      	ldr	r3, [r7, #28]
   15896:	3301      	adds	r3, #1
   15898:	2208      	movs	r2, #8
   1589a:	18ba      	adds	r2, r7, r2
   1589c:	5cd3      	ldrb	r3, [r2, r3]
   1589e:	2bff      	cmp	r3, #255	; 0xff
   158a0:	d00c      	beq.n	158bc <MQTT_HandleGameMessages+0x84>
   158a2:	69fb      	ldr	r3, [r7, #28]
   158a4:	3301      	adds	r3, #1
   158a6:	2b13      	cmp	r3, #19
   158a8:	dc08      	bgt.n	158bc <MQTT_HandleGameMessages+0x84>
					{
						snprintf(numGame, 5, ",");
   158aa:	003b      	movs	r3, r7
   158ac:	222c      	movs	r2, #44	; 0x2c
   158ae:	801a      	strh	r2, [r3, #0]
						strcat(mqtt_msg, numGame);
   158b0:	003a      	movs	r2, r7
   158b2:	4b1e      	ldr	r3, [pc, #120]	; (1592c <MQTT_HandleGameMessages+0xf4>)
   158b4:	0011      	movs	r1, r2
   158b6:	0018      	movs	r0, r3
   158b8:	4b20      	ldr	r3, [pc, #128]	; (1593c <MQTT_HandleGameMessages+0x104>)
   158ba:	4798      	blx	r3
			for(int iter = 0; iter < GAME_SIZE; iter++)
   158bc:	69fb      	ldr	r3, [r7, #28]
   158be:	3301      	adds	r3, #1
   158c0:	61fb      	str	r3, [r7, #28]
   158c2:	69fb      	ldr	r3, [r7, #28]
   158c4:	2b13      	cmp	r3, #19
   158c6:	ddce      	ble.n	15866 <MQTT_HandleGameMessages+0x2e>
   158c8:	e000      	b.n	158cc <MQTT_HandleGameMessages+0x94>
					}
				}else
				{
					break;
   158ca:	46c0      	nop			; (mov r8, r8)
				}
			}
		strcat(mqtt_msg, "]}");
   158cc:	4b17      	ldr	r3, [pc, #92]	; (1592c <MQTT_HandleGameMessages+0xf4>)
   158ce:	0018      	movs	r0, r3
   158d0:	4b1b      	ldr	r3, [pc, #108]	; (15940 <MQTT_HandleGameMessages+0x108>)
   158d2:	4798      	blx	r3
   158d4:	0003      	movs	r3, r0
   158d6:	001a      	movs	r2, r3
   158d8:	4b14      	ldr	r3, [pc, #80]	; (1592c <MQTT_HandleGameMessages+0xf4>)
   158da:	18d2      	adds	r2, r2, r3
   158dc:	4b19      	ldr	r3, [pc, #100]	; (15944 <MQTT_HandleGameMessages+0x10c>)
   158de:	0010      	movs	r0, r2
   158e0:	0019      	movs	r1, r3
   158e2:	2303      	movs	r3, #3
   158e4:	001a      	movs	r2, r3
   158e6:	4b18      	ldr	r3, [pc, #96]	; (15948 <MQTT_HandleGameMessages+0x110>)
   158e8:	4798      	blx	r3
		LogMessage(LOG_DEBUG_LVL,mqtt_msg);LogMessage(LOG_DEBUG_LVL,"\r\n");
   158ea:	4b10      	ldr	r3, [pc, #64]	; (1592c <MQTT_HandleGameMessages+0xf4>)
   158ec:	0019      	movs	r1, r3
   158ee:	2001      	movs	r0, #1
   158f0:	4b16      	ldr	r3, [pc, #88]	; (1594c <MQTT_HandleGameMessages+0x114>)
   158f2:	4798      	blx	r3
   158f4:	4b16      	ldr	r3, [pc, #88]	; (15950 <MQTT_HandleGameMessages+0x118>)
   158f6:	0019      	movs	r1, r3
   158f8:	2001      	movs	r0, #1
   158fa:	4b14      	ldr	r3, [pc, #80]	; (1594c <MQTT_HandleGameMessages+0x114>)
   158fc:	4798      	blx	r3
		mqtt_publish(&mqtt_inst, GAME_TOPIC_OUT, mqtt_msg, strlen(mqtt_msg), 1, 0);
   158fe:	4b0b      	ldr	r3, [pc, #44]	; (1592c <MQTT_HandleGameMessages+0xf4>)
   15900:	0018      	movs	r0, r3
   15902:	4b0f      	ldr	r3, [pc, #60]	; (15940 <MQTT_HandleGameMessages+0x108>)
   15904:	4798      	blx	r3
   15906:	0004      	movs	r4, r0
   15908:	4a08      	ldr	r2, [pc, #32]	; (1592c <MQTT_HandleGameMessages+0xf4>)
   1590a:	4912      	ldr	r1, [pc, #72]	; (15954 <MQTT_HandleGameMessages+0x11c>)
   1590c:	4812      	ldr	r0, [pc, #72]	; (15958 <MQTT_HandleGameMessages+0x120>)
   1590e:	2300      	movs	r3, #0
   15910:	9301      	str	r3, [sp, #4]
   15912:	2301      	movs	r3, #1
   15914:	9300      	str	r3, [sp, #0]
   15916:	0023      	movs	r3, r4
   15918:	4c10      	ldr	r4, [pc, #64]	; (1595c <MQTT_HandleGameMessages+0x124>)
   1591a:	47a0      	blx	r4
	}
}
   1591c:	46c0      	nop			; (mov r8, r8)
   1591e:	46bd      	mov	sp, r7
   15920:	b009      	add	sp, #36	; 0x24
   15922:	bd90      	pop	{r4, r7, pc}
   15924:	200004d8 	.word	0x200004d8
   15928:	0001ad09 	.word	0x0001ad09
   1592c:	20000018 	.word	0x20000018
   15930:	00035d28 	.word	0x00035d28
   15934:	00035fbc 	.word	0x00035fbc
   15938:	000342dd 	.word	0x000342dd
   1593c:	000343c1 	.word	0x000343c1
   15940:	0003443b 	.word	0x0003443b
   15944:	00035fc0 	.word	0x00035fc0
   15948:	0003404d 	.word	0x0003404d
   1594c:	0001dbf5 	.word	0x0001dbf5
   15950:	00035fc4 	.word	0x00035fc4
   15954:	00035fc8 	.word	0x00035fc8
   15958:	2000050c 	.word	0x2000050c
   1595c:	0002f341 	.word	0x0002f341

00015960 <vWifiTask>:
 * Application entry point.
 *
 * \return program return value.
 */
void vWifiTask( void *pvParameters )
{
   15960:	b590      	push	{r4, r7, lr}
   15962:	b08d      	sub	sp, #52	; 0x34
   15964:	af02      	add	r7, sp, #8
   15966:	6078      	str	r0, [r7, #4]
	tstrWifiInitParam param;
	int8_t ret;
	vTaskDelay(100);
   15968:	2064      	movs	r0, #100	; 0x64
   1596a:	4b5e      	ldr	r3, [pc, #376]	; (15ae4 <vWifiTask+0x184>)
   1596c:	4798      	blx	r3
	init_state();
   1596e:	4b5e      	ldr	r3, [pc, #376]	; (15ae8 <vWifiTask+0x188>)
   15970:	4798      	blx	r3
	//Create buffers to send data
	xQueueWifiState = xQueueCreate( 5, sizeof( uint32_t ) );
   15972:	2200      	movs	r2, #0
   15974:	2104      	movs	r1, #4
   15976:	2005      	movs	r0, #5
   15978:	4b5c      	ldr	r3, [pc, #368]	; (15aec <vWifiTask+0x18c>)
   1597a:	4798      	blx	r3
   1597c:	0002      	movs	r2, r0
   1597e:	4b5c      	ldr	r3, [pc, #368]	; (15af0 <vWifiTask+0x190>)
   15980:	601a      	str	r2, [r3, #0]
	xQueueGameBuffer = xQueueCreate( 2, sizeof( struct GameDataPacket ) );
   15982:	2200      	movs	r2, #0
   15984:	2114      	movs	r1, #20
   15986:	2002      	movs	r0, #2
   15988:	4b58      	ldr	r3, [pc, #352]	; (15aec <vWifiTask+0x18c>)
   1598a:	4798      	blx	r3
   1598c:	0002      	movs	r2, r0
   1598e:	4b59      	ldr	r3, [pc, #356]	; (15af4 <vWifiTask+0x194>)
   15990:	601a      	str	r2, [r3, #0]

	if(xQueueWifiState == NULL || xQueueGameBuffer == NULL)
   15992:	4b57      	ldr	r3, [pc, #348]	; (15af0 <vWifiTask+0x190>)
   15994:	681b      	ldr	r3, [r3, #0]
   15996:	2b00      	cmp	r3, #0
   15998:	d003      	beq.n	159a2 <vWifiTask+0x42>
   1599a:	4b56      	ldr	r3, [pc, #344]	; (15af4 <vWifiTask+0x194>)
   1599c:	681b      	ldr	r3, [r3, #0]
   1599e:	2b00      	cmp	r3, #0
   159a0:	d103      	bne.n	159aa <vWifiTask+0x4a>
	{
		SerialConsoleWriteString("ERROR Initializing Wifi Data queues!\r\n");
   159a2:	4b55      	ldr	r3, [pc, #340]	; (15af8 <vWifiTask+0x198>)
   159a4:	0018      	movs	r0, r3
   159a6:	4b55      	ldr	r3, [pc, #340]	; (15afc <vWifiTask+0x19c>)
   159a8:	4798      	blx	r3
	}

	SerialConsoleWriteString("ESE516 - Wifi Init Code\r\n");
   159aa:	4b55      	ldr	r3, [pc, #340]	; (15b00 <vWifiTask+0x1a0>)
   159ac:	0018      	movs	r0, r3
   159ae:	4b53      	ldr	r3, [pc, #332]	; (15afc <vWifiTask+0x19c>)
   159b0:	4798      	blx	r3
	/* Initialize the Timer. */
	configure_timer();
   159b2:	4b54      	ldr	r3, [pc, #336]	; (15b04 <vWifiTask+0x1a4>)
   159b4:	4798      	blx	r3

	/* Initialize the HTTP client service. */
	configure_http_client();
   159b6:	4b54      	ldr	r3, [pc, #336]	; (15b08 <vWifiTask+0x1a8>)
   159b8:	4798      	blx	r3

	/* Initialize the MQTT service. */
	configure_mqtt();
   159ba:	4b54      	ldr	r3, [pc, #336]	; (15b0c <vWifiTask+0x1ac>)
   159bc:	4798      	blx	r3

	/* Initialize SD/MMC storage. */
	//init_storage();

	/*Initialize BUTTON 0 as an external interrupt*/
	configure_extint_channel();
   159be:	4b54      	ldr	r3, [pc, #336]	; (15b10 <vWifiTask+0x1b0>)
   159c0:	4798      	blx	r3
	configure_extint_callbacks();
   159c2:	4b54      	ldr	r3, [pc, #336]	; (15b14 <vWifiTask+0x1b4>)
   159c4:	4798      	blx	r3

	
	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
   159c6:	230c      	movs	r3, #12
   159c8:	18fb      	adds	r3, r7, r3
   159ca:	2218      	movs	r2, #24
   159cc:	2100      	movs	r1, #0
   159ce:	0018      	movs	r0, r3
   159d0:	4b51      	ldr	r3, [pc, #324]	; (15b18 <vWifiTask+0x1b8>)
   159d2:	4798      	blx	r3

	nm_bsp_init();
   159d4:	4b51      	ldr	r3, [pc, #324]	; (15b1c <vWifiTask+0x1bc>)
   159d6:	4798      	blx	r3

	/* Initialize Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = wifi_cb;
   159d8:	230c      	movs	r3, #12
   159da:	18fb      	adds	r3, r7, r3
   159dc:	4a50      	ldr	r2, [pc, #320]	; (15b20 <vWifiTask+0x1c0>)
   159de:	601a      	str	r2, [r3, #0]
	ret = m2m_wifi_init(&param);
   159e0:	2327      	movs	r3, #39	; 0x27
   159e2:	18fc      	adds	r4, r7, r3
   159e4:	230c      	movs	r3, #12
   159e6:	18fb      	adds	r3, r7, r3
   159e8:	0018      	movs	r0, r3
   159ea:	4b4e      	ldr	r3, [pc, #312]	; (15b24 <vWifiTask+0x1c4>)
   159ec:	4798      	blx	r3
   159ee:	0003      	movs	r3, r0
   159f0:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   159f2:	2327      	movs	r3, #39	; 0x27
   159f4:	18fb      	adds	r3, r7, r3
   159f6:	781b      	ldrb	r3, [r3, #0]
   159f8:	b25b      	sxtb	r3, r3
   159fa:	2b00      	cmp	r3, #0
   159fc:	d009      	beq.n	15a12 <vWifiTask+0xb2>
		LogMessage(LOG_DEBUG_LVL,"main: m2m_wifi_init call error! (res %d)\r\n", ret);
   159fe:	2327      	movs	r3, #39	; 0x27
   15a00:	18fb      	adds	r3, r7, r3
   15a02:	2200      	movs	r2, #0
   15a04:	569a      	ldrsb	r2, [r3, r2]
   15a06:	4b48      	ldr	r3, [pc, #288]	; (15b28 <vWifiTask+0x1c8>)
   15a08:	0019      	movs	r1, r3
   15a0a:	2001      	movs	r0, #1
   15a0c:	4b47      	ldr	r3, [pc, #284]	; (15b2c <vWifiTask+0x1cc>)
   15a0e:	4798      	blx	r3
		while (1) {
   15a10:	e7fe      	b.n	15a10 <vWifiTask+0xb0>
				}
		}

	LogMessage(LOG_DEBUG_LVL,"main: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
   15a12:	4a47      	ldr	r2, [pc, #284]	; (15b30 <vWifiTask+0x1d0>)
   15a14:	4b47      	ldr	r3, [pc, #284]	; (15b34 <vWifiTask+0x1d4>)
   15a16:	0019      	movs	r1, r3
   15a18:	2001      	movs	r0, #1
   15a1a:	4b44      	ldr	r3, [pc, #272]	; (15b2c <vWifiTask+0x1cc>)
   15a1c:	4798      	blx	r3
	
	//Re-enable socket for MQTT Transfer
	socketInit();
   15a1e:	4b46      	ldr	r3, [pc, #280]	; (15b38 <vWifiTask+0x1d8>)
   15a20:	4798      	blx	r3
	registerSocketCallback(socket_event_handler, socket_resolve_handler);
   15a22:	4a46      	ldr	r2, [pc, #280]	; (15b3c <vWifiTask+0x1dc>)
   15a24:	4b46      	ldr	r3, [pc, #280]	; (15b40 <vWifiTask+0x1e0>)
   15a26:	0011      	movs	r1, r2
   15a28:	0018      	movs	r0, r3
   15a2a:	4b46      	ldr	r3, [pc, #280]	; (15b44 <vWifiTask+0x1e4>)
   15a2c:	4798      	blx	r3

	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   15a2e:	4a46      	ldr	r2, [pc, #280]	; (15b48 <vWifiTask+0x1e8>)
   15a30:	483f      	ldr	r0, [pc, #252]	; (15b30 <vWifiTask+0x1d0>)
   15a32:	23ff      	movs	r3, #255	; 0xff
   15a34:	9300      	str	r3, [sp, #0]
   15a36:	0013      	movs	r3, r2
   15a38:	2202      	movs	r2, #2
   15a3a:	210d      	movs	r1, #13
   15a3c:	4c43      	ldr	r4, [pc, #268]	; (15b4c <vWifiTask+0x1ec>)
   15a3e:	47a0      	blx	r4

	while (!(is_state_set(WIFI_CONNECTED)))
   15a40:	e006      	b.n	15a50 <vWifiTask+0xf0>
	{
			/* Handle pending events from network controller. */
		m2m_wifi_handle_events(NULL);
   15a42:	2000      	movs	r0, #0
   15a44:	4b42      	ldr	r3, [pc, #264]	; (15b50 <vWifiTask+0x1f0>)
   15a46:	4798      	blx	r3
		/* Checks the timer timeout. */
		sw_timer_task(&swt_module_inst);
   15a48:	4b42      	ldr	r3, [pc, #264]	; (15b54 <vWifiTask+0x1f4>)
   15a4a:	0018      	movs	r0, r3
   15a4c:	4b42      	ldr	r3, [pc, #264]	; (15b58 <vWifiTask+0x1f8>)
   15a4e:	4798      	blx	r3
	while (!(is_state_set(WIFI_CONNECTED)))
   15a50:	2002      	movs	r0, #2
   15a52:	4b42      	ldr	r3, [pc, #264]	; (15b5c <vWifiTask+0x1fc>)
   15a54:	4798      	blx	r3
   15a56:	0003      	movs	r3, r0
   15a58:	001a      	movs	r2, r3
   15a5a:	2301      	movs	r3, #1
   15a5c:	4053      	eors	r3, r2
   15a5e:	b2db      	uxtb	r3, r3
   15a60:	2b00      	cmp	r3, #0
   15a62:	d1ee      	bne.n	15a42 <vWifiTask+0xe2>
	}

	vTaskDelay(1000);
   15a64:	23fa      	movs	r3, #250	; 0xfa
   15a66:	009b      	lsls	r3, r3, #2
   15a68:	0018      	movs	r0, r3
   15a6a:	4b1e      	ldr	r3, [pc, #120]	; (15ae4 <vWifiTask+0x184>)
   15a6c:	4798      	blx	r3
	
	wifiStateMachine = WIFI_MQTT_HANDLE;
   15a6e:	4b3c      	ldr	r3, [pc, #240]	; (15b60 <vWifiTask+0x200>)
   15a70:	2201      	movs	r2, #1
   15a72:	701a      	strb	r2, [r3, #0]
	while (1) {

	switch(wifiStateMachine)
   15a74:	4b3a      	ldr	r3, [pc, #232]	; (15b60 <vWifiTask+0x200>)
   15a76:	781b      	ldrb	r3, [r3, #0]
   15a78:	b25b      	sxtb	r3, r3
   15a7a:	2b01      	cmp	r3, #1
   15a7c:	d00b      	beq.n	15a96 <vWifiTask+0x136>
   15a7e:	dc02      	bgt.n	15a86 <vWifiTask+0x126>
   15a80:	2b00      	cmp	r3, #0
   15a82:	d005      	beq.n	15a90 <vWifiTask+0x130>
   15a84:	e010      	b.n	15aa8 <vWifiTask+0x148>
   15a86:	2b02      	cmp	r3, #2
   15a88:	d008      	beq.n	15a9c <vWifiTask+0x13c>
   15a8a:	2b03      	cmp	r3, #3
   15a8c:	d009      	beq.n	15aa2 <vWifiTask+0x142>
   15a8e:	e00b      	b.n	15aa8 <vWifiTask+0x148>
	{
		case(WIFI_MQTT_INIT):
		{
			MQTT_InitRoutine();
   15a90:	4b34      	ldr	r3, [pc, #208]	; (15b64 <vWifiTask+0x204>)
   15a92:	4798      	blx	r3
			break;
   15a94:	e00c      	b.n	15ab0 <vWifiTask+0x150>
		}
		case(WIFI_MQTT_HANDLE):
		{
			MQTT_HandleTransactions();
   15a96:	4b34      	ldr	r3, [pc, #208]	; (15b68 <vWifiTask+0x208>)
   15a98:	4798      	blx	r3
			break;
   15a9a:	e009      	b.n	15ab0 <vWifiTask+0x150>
		}
		case(WIFI_DOWNLOAD_INIT):
		{

			HTTP_DownloadFileInit();
   15a9c:	4b33      	ldr	r3, [pc, #204]	; (15b6c <vWifiTask+0x20c>)
   15a9e:	4798      	blx	r3
			break;
   15aa0:	e006      	b.n	15ab0 <vWifiTask+0x150>
		}
		case(WIFI_DOWNLOAD_HANDLE):
		{
			HTTP_DownloadFileTransaction();
   15aa2:	4b33      	ldr	r3, [pc, #204]	; (15b70 <vWifiTask+0x210>)
   15aa4:	4798      	blx	r3
		break;
   15aa6:	e003      	b.n	15ab0 <vWifiTask+0x150>
		}
		default:
		{
			wifiStateMachine = WIFI_MQTT_INIT;
   15aa8:	4b2d      	ldr	r3, [pc, #180]	; (15b60 <vWifiTask+0x200>)
   15aaa:	2200      	movs	r2, #0
   15aac:	701a      	strb	r2, [r3, #0]
			break;
   15aae:	46c0      	nop			; (mov r8, r8)
		}
	}
	//Check if a new state was called
	uint8_t DataToReceive = 0;
   15ab0:	230b      	movs	r3, #11
   15ab2:	18fb      	adds	r3, r7, r3
   15ab4:	2200      	movs	r2, #0
   15ab6:	701a      	strb	r2, [r3, #0]
	if (pdPASS == xQueueReceive( xQueueWifiState, &DataToReceive, 0 ))
   15ab8:	4b0d      	ldr	r3, [pc, #52]	; (15af0 <vWifiTask+0x190>)
   15aba:	681b      	ldr	r3, [r3, #0]
   15abc:	220b      	movs	r2, #11
   15abe:	18b9      	adds	r1, r7, r2
   15ac0:	2200      	movs	r2, #0
   15ac2:	0018      	movs	r0, r3
   15ac4:	4b2b      	ldr	r3, [pc, #172]	; (15b74 <vWifiTask+0x214>)
   15ac6:	4798      	blx	r3
   15ac8:	0003      	movs	r3, r0
   15aca:	2b01      	cmp	r3, #1
   15acc:	d105      	bne.n	15ada <vWifiTask+0x17a>
	{
		wifiStateMachine = DataToReceive; // Update new state
   15ace:	230b      	movs	r3, #11
   15ad0:	18fb      	adds	r3, r7, r3
   15ad2:	781b      	ldrb	r3, [r3, #0]
   15ad4:	b25a      	sxtb	r2, r3
   15ad6:	4b22      	ldr	r3, [pc, #136]	; (15b60 <vWifiTask+0x200>)
   15ad8:	701a      	strb	r2, [r3, #0]
	}
	
	vTaskDelay(100);	
   15ada:	2064      	movs	r0, #100	; 0x64
   15adc:	4b01      	ldr	r3, [pc, #4]	; (15ae4 <vWifiTask+0x184>)
   15ade:	4798      	blx	r3
	while (1) {
   15ae0:	e7c8      	b.n	15a74 <vWifiTask+0x114>
   15ae2:	46c0      	nop			; (mov r8, r8)
   15ae4:	0001beb5 	.word	0x0001beb5
   15ae8:	000146e5 	.word	0x000146e5
   15aec:	0001a1a9 	.word	0x0001a1a9
   15af0:	200004d4 	.word	0x200004d4
   15af4:	200004d8 	.word	0x200004d8
   15af8:	00035fe0 	.word	0x00035fe0
   15afc:	0001db09 	.word	0x0001db09
   15b00:	00036008 	.word	0x00036008
   15b04:	0001503d 	.word	0x0001503d
   15b08:	00015079 	.word	0x00015079
   15b0c:	00015479 	.word	0x00015479
   15b10:	00015531 	.word	0x00015531
   15b14:	00015571 	.word	0x00015571
   15b18:	00034083 	.word	0x00034083
   15b1c:	0001fcb9 	.word	0x0001fcb9
   15b20:	00014ee9 	.word	0x00014ee9
   15b24:	00021791 	.word	0x00021791
   15b28:	00036024 	.word	0x00036024
   15b2c:	0001dbf5 	.word	0x0001dbf5
   15b30:	00035b34 	.word	0x00035b34
   15b34:	00036050 	.word	0x00036050
   15b38:	00024ef1 	.word	0x00024ef1
   15b3c:	00015131 	.word	0x00015131
   15b40:	000150fd 	.word	0x000150fd
   15b44:	00024f89 	.word	0x00024f89
   15b48:	00035b20 	.word	0x00035b20
   15b4c:	000219a1 	.word	0x000219a1
   15b50:	00021985 	.word	0x00021985
   15b54:	20004250 	.word	0x20004250
   15b58:	00032021 	.word	0x00032021
   15b5c:	00014755 	.word	0x00014755
   15b60:	200004d0 	.word	0x200004d0
   15b64:	00015755 	.word	0x00015755
   15b68:	000157f1 	.word	0x000157f1
   15b6c:	000155cd 	.word	0x000155cd
   15b70:	00015661 	.word	0x00015661
   15b74:	0001ad09 	.word	0x0001ad09

00015b78 <WifiHandlerSetState>:
	return 0;
}


void WifiHandlerSetState(uint8_t state)
{
   15b78:	b590      	push	{r4, r7, lr}
   15b7a:	b083      	sub	sp, #12
   15b7c:	af00      	add	r7, sp, #0
   15b7e:	0002      	movs	r2, r0
   15b80:	1dfb      	adds	r3, r7, #7
   15b82:	701a      	strb	r2, [r3, #0]
	if( state <= WIFI_DOWNLOAD_HANDLE){
   15b84:	1dfb      	adds	r3, r7, #7
   15b86:	781b      	ldrb	r3, [r3, #0]
   15b88:	2b03      	cmp	r3, #3
   15b8a:	d806      	bhi.n	15b9a <WifiHandlerSetState+0x22>
		xQueueSend( xQueueWifiState, &state, ( TickType_t ) 10 );
   15b8c:	4b05      	ldr	r3, [pc, #20]	; (15ba4 <WifiHandlerSetState+0x2c>)
   15b8e:	6818      	ldr	r0, [r3, #0]
   15b90:	1df9      	adds	r1, r7, #7
   15b92:	2300      	movs	r3, #0
   15b94:	220a      	movs	r2, #10
   15b96:	4c04      	ldr	r4, [pc, #16]	; (15ba8 <WifiHandlerSetState+0x30>)
   15b98:	47a0      	blx	r4
	}
}
   15b9a:	46c0      	nop			; (mov r8, r8)
   15b9c:	46bd      	mov	sp, r7
   15b9e:	b003      	add	sp, #12
   15ba0:	bd90      	pop	{r4, r7, pc}
   15ba2:	46c0      	nop			; (mov r8, r8)
   15ba4:	200004d4 	.word	0x200004d4
   15ba8:	0001a451 	.word	0x0001a451

00015bac <WifiAddGameDataToQueue>:
* @return		Returns pdTrue if data can be added to queue, pdFalse if queue is full
* @note         

*****************************************************************************/
int WifiAddGameDataToQueue(struct GameDataPacket *game)
{
   15bac:	b590      	push	{r4, r7, lr}
   15bae:	b085      	sub	sp, #20
   15bb0:	af00      	add	r7, sp, #0
   15bb2:	6078      	str	r0, [r7, #4]
	int error = xQueueSend(xQueueGameBuffer , game, ( TickType_t ) 10);
   15bb4:	4b06      	ldr	r3, [pc, #24]	; (15bd0 <WifiAddGameDataToQueue+0x24>)
   15bb6:	6818      	ldr	r0, [r3, #0]
   15bb8:	6879      	ldr	r1, [r7, #4]
   15bba:	2300      	movs	r3, #0
   15bbc:	220a      	movs	r2, #10
   15bbe:	4c05      	ldr	r4, [pc, #20]	; (15bd4 <WifiAddGameDataToQueue+0x28>)
   15bc0:	47a0      	blx	r4
   15bc2:	0003      	movs	r3, r0
   15bc4:	60fb      	str	r3, [r7, #12]
	return error;
   15bc6:	68fb      	ldr	r3, [r7, #12]
   15bc8:	0018      	movs	r0, r3
   15bca:	46bd      	mov	sp, r7
   15bcc:	b005      	add	sp, #20
   15bce:	bd90      	pop	{r4, r7, pc}
   15bd0:	200004d8 	.word	0x200004d8
   15bd4:	0001a451 	.word	0x0001a451

00015bd8 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
   15bd8:	b580      	push	{r7, lr}
   15bda:	b082      	sub	sp, #8
   15bdc:	af00      	add	r7, sp, #0
   15bde:	0002      	movs	r2, r0
   15be0:	1dfb      	adds	r3, r7, #7
   15be2:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   15be4:	4b06      	ldr	r3, [pc, #24]	; (15c00 <system_interrupt_enable+0x28>)
   15be6:	1dfa      	adds	r2, r7, #7
   15be8:	7812      	ldrb	r2, [r2, #0]
   15bea:	0011      	movs	r1, r2
   15bec:	221f      	movs	r2, #31
   15bee:	400a      	ands	r2, r1
   15bf0:	2101      	movs	r1, #1
   15bf2:	4091      	lsls	r1, r2
   15bf4:	000a      	movs	r2, r1
   15bf6:	601a      	str	r2, [r3, #0]
}
   15bf8:	46c0      	nop			; (mov r8, r8)
   15bfa:	46bd      	mov	sp, r7
   15bfc:	b002      	add	sp, #8
   15bfe:	bd80      	pop	{r7, pc}
   15c00:	e000e100 	.word	0xe000e100

00015c04 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
   15c04:	b580      	push	{r7, lr}
   15c06:	b084      	sub	sp, #16
   15c08:	af00      	add	r7, sp, #0
   15c0a:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   15c0c:	687b      	ldr	r3, [r7, #4]
   15c0e:	681b      	ldr	r3, [r3, #0]
   15c10:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   15c12:	68fb      	ldr	r3, [r7, #12]
   15c14:	69db      	ldr	r3, [r3, #28]
   15c16:	2207      	movs	r2, #7
   15c18:	4013      	ands	r3, r2
   15c1a:	1e5a      	subs	r2, r3, #1
   15c1c:	4193      	sbcs	r3, r2
   15c1e:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
   15c20:	0018      	movs	r0, r3
   15c22:	46bd      	mov	sp, r7
   15c24:	b004      	add	sp, #16
   15c26:	bd80      	pop	{r7, pc}

00015c28 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
   15c28:	b580      	push	{r7, lr}
   15c2a:	b082      	sub	sp, #8
   15c2c:	af00      	add	r7, sp, #0
   15c2e:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
   15c30:	46c0      	nop			; (mov r8, r8)
   15c32:	687b      	ldr	r3, [r7, #4]
   15c34:	0018      	movs	r0, r3
   15c36:	4b04      	ldr	r3, [pc, #16]	; (15c48 <_i2c_master_wait_for_sync+0x20>)
   15c38:	4798      	blx	r3
   15c3a:	1e03      	subs	r3, r0, #0
   15c3c:	d1f9      	bne.n	15c32 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
   15c3e:	46c0      	nop			; (mov r8, r8)
   15c40:	46bd      	mov	sp, r7
   15c42:	b002      	add	sp, #8
   15c44:	bd80      	pop	{r7, pc}
   15c46:	46c0      	nop			; (mov r8, r8)
   15c48:	00015c05 	.word	0x00015c05

00015c4c <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
   15c4c:	b580      	push	{r7, lr}
   15c4e:	b082      	sub	sp, #8
   15c50:	af00      	add	r7, sp, #0
   15c52:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
   15c54:	687b      	ldr	r3, [r7, #4]
   15c56:	2264      	movs	r2, #100	; 0x64
   15c58:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
   15c5a:	687b      	ldr	r3, [r7, #4]
   15c5c:	4a1b      	ldr	r2, [pc, #108]	; (15ccc <i2c_master_get_config_defaults+0x80>)
   15c5e:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
   15c60:	687b      	ldr	r3, [r7, #4]
   15c62:	2200      	movs	r2, #0
   15c64:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
   15c66:	687b      	ldr	r3, [r7, #4]
   15c68:	2200      	movs	r2, #0
   15c6a:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
   15c6c:	687b      	ldr	r3, [r7, #4]
   15c6e:	2200      	movs	r2, #0
   15c70:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
   15c72:	687b      	ldr	r3, [r7, #4]
   15c74:	2280      	movs	r2, #128	; 0x80
   15c76:	0392      	lsls	r2, r2, #14
   15c78:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
   15c7a:	687b      	ldr	r3, [r7, #4]
   15c7c:	2201      	movs	r2, #1
   15c7e:	4252      	negs	r2, r2
   15c80:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
   15c82:	687b      	ldr	r3, [r7, #4]
   15c84:	2201      	movs	r2, #1
   15c86:	4252      	negs	r2, r2
   15c88:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   15c8a:	687b      	ldr	r3, [r7, #4]
   15c8c:	2200      	movs	r2, #0
   15c8e:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
   15c90:	687b      	ldr	r3, [r7, #4]
   15c92:	2200      	movs	r2, #0
   15c94:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
   15c96:	687b      	ldr	r3, [r7, #4]
   15c98:	2224      	movs	r2, #36	; 0x24
   15c9a:	2100      	movs	r1, #0
   15c9c:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
   15c9e:	687b      	ldr	r3, [r7, #4]
   15ca0:	2200      	movs	r2, #0
   15ca2:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
   15ca4:	687b      	ldr	r3, [r7, #4]
   15ca6:	222c      	movs	r2, #44	; 0x2c
   15ca8:	2100      	movs	r1, #0
   15caa:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
   15cac:	687b      	ldr	r3, [r7, #4]
   15cae:	222d      	movs	r2, #45	; 0x2d
   15cb0:	2100      	movs	r1, #0
   15cb2:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
   15cb4:	687b      	ldr	r3, [r7, #4]
   15cb6:	222e      	movs	r2, #46	; 0x2e
   15cb8:	2100      	movs	r1, #0
   15cba:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
   15cbc:	687b      	ldr	r3, [r7, #4]
   15cbe:	22d7      	movs	r2, #215	; 0xd7
   15cc0:	861a      	strh	r2, [r3, #48]	; 0x30
}
   15cc2:	46c0      	nop			; (mov r8, r8)
   15cc4:	46bd      	mov	sp, r7
   15cc6:	b002      	add	sp, #8
   15cc8:	bd80      	pop	{r7, pc}
   15cca:	46c0      	nop			; (mov r8, r8)
   15ccc:	00000d48 	.word	0x00000d48

00015cd0 <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
   15cd0:	b580      	push	{r7, lr}
   15cd2:	b084      	sub	sp, #16
   15cd4:	af00      	add	r7, sp, #0
   15cd6:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   15cd8:	687b      	ldr	r3, [r7, #4]
   15cda:	681b      	ldr	r3, [r3, #0]
   15cdc:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
   15cde:	2300      	movs	r3, #0
   15ce0:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   15ce2:	687b      	ldr	r3, [r7, #4]
   15ce4:	0018      	movs	r0, r3
   15ce6:	4b14      	ldr	r3, [pc, #80]	; (15d38 <i2c_master_enable+0x68>)
   15ce8:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
   15cea:	68bb      	ldr	r3, [r7, #8]
   15cec:	681b      	ldr	r3, [r3, #0]
   15cee:	2202      	movs	r2, #2
   15cf0:	431a      	orrs	r2, r3
   15cf2:	68bb      	ldr	r3, [r7, #8]
   15cf4:	601a      	str	r2, [r3, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   15cf6:	687b      	ldr	r3, [r7, #4]
   15cf8:	681b      	ldr	r3, [r3, #0]
   15cfa:	0018      	movs	r0, r3
   15cfc:	4b0f      	ldr	r3, [pc, #60]	; (15d3c <i2c_master_enable+0x6c>)
   15cfe:	4798      	blx	r3
   15d00:	0003      	movs	r3, r0
   15d02:	0018      	movs	r0, r3
   15d04:	4b0e      	ldr	r3, [pc, #56]	; (15d40 <i2c_master_enable+0x70>)
   15d06:	4798      	blx	r3
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   15d08:	e00c      	b.n	15d24 <i2c_master_enable+0x54>
		timeout_counter++;
   15d0a:	68fb      	ldr	r3, [r7, #12]
   15d0c:	3301      	adds	r3, #1
   15d0e:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
   15d10:	687b      	ldr	r3, [r7, #4]
   15d12:	88db      	ldrh	r3, [r3, #6]
   15d14:	001a      	movs	r2, r3
   15d16:	68fb      	ldr	r3, [r7, #12]
   15d18:	429a      	cmp	r2, r3
   15d1a:	d803      	bhi.n	15d24 <i2c_master_enable+0x54>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
   15d1c:	68bb      	ldr	r3, [r7, #8]
   15d1e:	2210      	movs	r2, #16
   15d20:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
   15d22:	e006      	b.n	15d32 <i2c_master_enable+0x62>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   15d24:	68bb      	ldr	r3, [r7, #8]
   15d26:	8b5b      	ldrh	r3, [r3, #26]
   15d28:	b29b      	uxth	r3, r3
   15d2a:	001a      	movs	r2, r3
   15d2c:	2310      	movs	r3, #16
   15d2e:	4013      	ands	r3, r2
   15d30:	d0eb      	beq.n	15d0a <i2c_master_enable+0x3a>
		}
	}
}
   15d32:	46bd      	mov	sp, r7
   15d34:	b004      	add	sp, #16
   15d36:	bd80      	pop	{r7, pc}
   15d38:	00015c29 	.word	0x00015c29
   15d3c:	000270bd 	.word	0x000270bd
   15d40:	00015bd9 	.word	0x00015bd9

00015d44 <i2c_master_enable_callback>:
 * \param[in]     callback_type  Callback type to enable
 */
static inline void i2c_master_enable_callback(
		struct i2c_master_module *const module,
		enum i2c_master_callback callback_type)
{
   15d44:	b580      	push	{r7, lr}
   15d46:	b082      	sub	sp, #8
   15d48:	af00      	add	r7, sp, #0
   15d4a:	6078      	str	r0, [r7, #4]
   15d4c:	000a      	movs	r2, r1
   15d4e:	1cfb      	adds	r3, r7, #3
   15d50:	701a      	strb	r2, [r3, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
   15d52:	687b      	ldr	r3, [r7, #4]
   15d54:	7e5b      	ldrb	r3, [r3, #25]
   15d56:	b2db      	uxtb	r3, r3
   15d58:	b25a      	sxtb	r2, r3
   15d5a:	1cfb      	adds	r3, r7, #3
   15d5c:	781b      	ldrb	r3, [r3, #0]
   15d5e:	2101      	movs	r1, #1
   15d60:	4099      	lsls	r1, r3
   15d62:	000b      	movs	r3, r1
   15d64:	b25b      	sxtb	r3, r3
   15d66:	4313      	orrs	r3, r2
   15d68:	b25b      	sxtb	r3, r3
   15d6a:	b2da      	uxtb	r2, r3
   15d6c:	687b      	ldr	r3, [r7, #4]
   15d6e:	765a      	strb	r2, [r3, #25]
}
   15d70:	46c0      	nop			; (mov r8, r8)
   15d72:	46bd      	mov	sp, r7
   15d74:	b002      	add	sp, #8
   15d76:	bd80      	pop	{r7, pc}

00015d78 <I2cDriverConfigureSensorBus>:
struct i2c_master_packet sensorPacketWrite;
/******************************************************************************
* Forward Declarations
******************************************************************************/
static int32_t I2cDriverConfigureSensorBus(void)
{
   15d78:	b590      	push	{r4, r7, lr}
   15d7a:	b091      	sub	sp, #68	; 0x44
   15d7c:	af00      	add	r7, sp, #0
	int32_t error = STATUS_OK;
   15d7e:	2300      	movs	r3, #0
   15d80:	63fb      	str	r3, [r7, #60]	; 0x3c
	status_code_genare_t errCodeAsf = STATUS_OK;
   15d82:	233a      	movs	r3, #58	; 0x3a
   15d84:	18fb      	adds	r3, r7, r3
   15d86:	2200      	movs	r2, #0
   15d88:	701a      	strb	r2, [r3, #0]
	/* Initialize config structure and software module */
	struct i2c_master_config config_i2c_master;
	i2c_master_get_config_defaults(&config_i2c_master);
   15d8a:	1d3b      	adds	r3, r7, #4
   15d8c:	0018      	movs	r0, r3
   15d8e:	4b21      	ldr	r3, [pc, #132]	; (15e14 <I2cDriverConfigureSensorBus+0x9c>)
   15d90:	4798      	blx	r3
	//config_i2c_master.baud_rate = I2C_MASTER_BAUD_RATE_400KHZ;
	config_i2c_master.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0;
   15d92:	1d3b      	adds	r3, r7, #4
   15d94:	4a20      	ldr	r2, [pc, #128]	; (15e18 <I2cDriverConfigureSensorBus+0xa0>)
   15d96:	61da      	str	r2, [r3, #28]
	config_i2c_master.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
   15d98:	1d3b      	adds	r3, r7, #4
   15d9a:	4a20      	ldr	r2, [pc, #128]	; (15e1c <I2cDriverConfigureSensorBus+0xa4>)
   15d9c:	621a      	str	r2, [r3, #32]
	/* Change buffer timeout to something longer */
	config_i2c_master.buffer_timeout = 1000;
   15d9e:	1d3b      	adds	r3, r7, #4
   15da0:	22fa      	movs	r2, #250	; 0xfa
   15da2:	0092      	lsls	r2, r2, #2
   15da4:	82da      	strh	r2, [r3, #22]
	/* Initialize and enable device with config. Try three times to initialize */
	
	for(uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--){
   15da6:	233b      	movs	r3, #59	; 0x3b
   15da8:	18fb      	adds	r3, r7, r3
   15daa:	2203      	movs	r2, #3
   15dac:	701a      	strb	r2, [r3, #0]
   15dae:	e01e      	b.n	15dee <I2cDriverConfigureSensorBus+0x76>
		errCodeAsf = i2c_master_init(&i2cSensorBusInstance, SERCOM0, &config_i2c_master);
   15db0:	233a      	movs	r3, #58	; 0x3a
   15db2:	18fc      	adds	r4, r7, r3
   15db4:	1d3a      	adds	r2, r7, #4
   15db6:	491a      	ldr	r1, [pc, #104]	; (15e20 <I2cDriverConfigureSensorBus+0xa8>)
   15db8:	4b1a      	ldr	r3, [pc, #104]	; (15e24 <I2cDriverConfigureSensorBus+0xac>)
   15dba:	0018      	movs	r0, r3
   15dbc:	4b1a      	ldr	r3, [pc, #104]	; (15e28 <I2cDriverConfigureSensorBus+0xb0>)
   15dbe:	4798      	blx	r3
   15dc0:	0003      	movs	r3, r0
   15dc2:	7023      	strb	r3, [r4, #0]
		if(STATUS_OK == errCodeAsf){
   15dc4:	233a      	movs	r3, #58	; 0x3a
   15dc6:	18fb      	adds	r3, r7, r3
   15dc8:	781b      	ldrb	r3, [r3, #0]
   15dca:	2b00      	cmp	r3, #0
   15dcc:	d104      	bne.n	15dd8 <I2cDriverConfigureSensorBus+0x60>
			error = errCodeAsf;
   15dce:	233a      	movs	r3, #58	; 0x3a
   15dd0:	18fb      	adds	r3, r7, r3
   15dd2:	781b      	ldrb	r3, [r3, #0]
   15dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
			break;
   15dd6:	e00f      	b.n	15df8 <I2cDriverConfigureSensorBus+0x80>
			}else{
			i2c_master_reset(&i2cSensorBusInstance);
   15dd8:	4b12      	ldr	r3, [pc, #72]	; (15e24 <I2cDriverConfigureSensorBus+0xac>)
   15dda:	0018      	movs	r0, r3
   15ddc:	4b13      	ldr	r3, [pc, #76]	; (15e2c <I2cDriverConfigureSensorBus+0xb4>)
   15dde:	4798      	blx	r3
	for(uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--){
   15de0:	233b      	movs	r3, #59	; 0x3b
   15de2:	18fb      	adds	r3, r7, r3
   15de4:	781a      	ldrb	r2, [r3, #0]
   15de6:	233b      	movs	r3, #59	; 0x3b
   15de8:	18fb      	adds	r3, r7, r3
   15dea:	3a01      	subs	r2, #1
   15dec:	701a      	strb	r2, [r3, #0]
   15dee:	233b      	movs	r3, #59	; 0x3b
   15df0:	18fb      	adds	r3, r7, r3
   15df2:	781b      	ldrb	r3, [r3, #0]
   15df4:	2b00      	cmp	r3, #0
   15df6:	d1db      	bne.n	15db0 <I2cDriverConfigureSensorBus+0x38>
		}
	}
	
	if(STATUS_OK != error) goto exit;
   15df8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   15dfa:	2b00      	cmp	r3, #0
   15dfc:	d104      	bne.n	15e08 <I2cDriverConfigureSensorBus+0x90>
	
	i2c_master_enable(&i2cSensorBusInstance);
   15dfe:	4b09      	ldr	r3, [pc, #36]	; (15e24 <I2cDriverConfigureSensorBus+0xac>)
   15e00:	0018      	movs	r0, r3
   15e02:	4b0b      	ldr	r3, [pc, #44]	; (15e30 <I2cDriverConfigureSensorBus+0xb8>)
   15e04:	4798      	blx	r3
   15e06:	e000      	b.n	15e0a <I2cDriverConfigureSensorBus+0x92>
	if(STATUS_OK != error) goto exit;
   15e08:	46c0      	nop			; (mov r8, r8)
	
	exit:
	return error;
   15e0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
   15e0c:	0018      	movs	r0, r3
   15e0e:	46bd      	mov	sp, r7
   15e10:	b011      	add	sp, #68	; 0x44
   15e12:	bd90      	pop	{r4, r7, pc}
   15e14:	00015c4d 	.word	0x00015c4d
   15e18:	00080002 	.word	0x00080002
   15e1c:	00090002 	.word	0x00090002
   15e20:	42000800 	.word	0x42000800
   15e24:	20004394 	.word	0x20004394
   15e28:	00017845 	.word	0x00017845
   15e2c:	00017979 	.word	0x00017979
   15e30:	00015cd1 	.word	0x00015cd1

00015e34 <I2cSensorsTxComplete>:
				and is currently waiting for a notification that it has finished.
 * @param[in]   i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
 * @return      This function is a callback, and it is registered as such when we send an I2C transmission on this I2C bus.
 * @note        
 *****************************************************************************/
void I2cSensorsTxComplete(struct i2c_master_module *const module){
   15e34:	b580      	push	{r7, lr}
   15e36:	b084      	sub	sp, #16
   15e38:	af00      	add	r7, sp, #0
   15e3a:	6078      	str	r0, [r7, #4]
	
	I2cSensorBusState.i2cState = I2C_BUS_READY;
   15e3c:	4b0e      	ldr	r3, [pc, #56]	; (15e78 <I2cSensorsTxComplete+0x44>)
   15e3e:	2200      	movs	r2, #0
   15e40:	701a      	strb	r2, [r3, #0]
	I2cSensorBusState.rxDoneFlag = true;			
   15e42:	4b0d      	ldr	r3, [pc, #52]	; (15e78 <I2cSensorsTxComplete+0x44>)
   15e44:	2201      	movs	r2, #1
   15e46:	609a      	str	r2, [r3, #8]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   15e48:	2300      	movs	r3, #0
   15e4a:	60fb      	str	r3, [r7, #12]
	
	xSemaphoreGiveFromISR( sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken );
   15e4c:	4b0b      	ldr	r3, [pc, #44]	; (15e7c <I2cSensorsTxComplete+0x48>)
   15e4e:	681b      	ldr	r3, [r3, #0]
   15e50:	220c      	movs	r2, #12
   15e52:	18ba      	adds	r2, r7, r2
   15e54:	0011      	movs	r1, r2
   15e56:	0018      	movs	r0, r3
   15e58:	4b09      	ldr	r3, [pc, #36]	; (15e80 <I2cSensorsTxComplete+0x4c>)
   15e5a:	4798      	blx	r3
	sensorTransmitError = false;
   15e5c:	4b09      	ldr	r3, [pc, #36]	; (15e84 <I2cSensorsTxComplete+0x50>)
   15e5e:	2200      	movs	r2, #0
   15e60:	701a      	strb	r2, [r3, #0]
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
   15e62:	68fb      	ldr	r3, [r7, #12]
   15e64:	2b00      	cmp	r3, #0
   15e66:	d003      	beq.n	15e70 <I2cSensorsTxComplete+0x3c>
   15e68:	4b07      	ldr	r3, [pc, #28]	; (15e88 <I2cSensorsTxComplete+0x54>)
   15e6a:	2280      	movs	r2, #128	; 0x80
   15e6c:	0552      	lsls	r2, r2, #21
   15e6e:	601a      	str	r2, [r3, #0]
}
   15e70:	46c0      	nop			; (mov r8, r8)
   15e72:	46bd      	mov	sp, r7
   15e74:	b004      	add	sp, #16
   15e76:	bd80      	pop	{r7, pc}
   15e78:	20000948 	.word	0x20000948
   15e7c:	200043bc 	.word	0x200043bc
   15e80:	0001aad9 	.word	0x0001aad9
   15e84:	20000945 	.word	0x20000945
   15e88:	e000ed04 	.word	0xe000ed04

00015e8c <I2cSensorsRxComplete>:
					and is currently waiting for a notification that it has finished.
 * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
 * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
 * @note        
 *****************************************************************************/
void I2cSensorsRxComplete(struct i2c_master_module *const module){
   15e8c:	b580      	push	{r7, lr}
   15e8e:	b084      	sub	sp, #16
   15e90:	af00      	add	r7, sp, #0
   15e92:	6078      	str	r0, [r7, #4]
	
	I2cSensorBusState.i2cState = I2C_BUS_READY;
   15e94:	4b0e      	ldr	r3, [pc, #56]	; (15ed0 <I2cSensorsRxComplete+0x44>)
   15e96:	2200      	movs	r2, #0
   15e98:	701a      	strb	r2, [r3, #0]
	I2cSensorBusState.rxDoneFlag = true;
   15e9a:	4b0d      	ldr	r3, [pc, #52]	; (15ed0 <I2cSensorsRxComplete+0x44>)
   15e9c:	2201      	movs	r2, #1
   15e9e:	609a      	str	r2, [r3, #8]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   15ea0:	2300      	movs	r3, #0
   15ea2:	60fb      	str	r3, [r7, #12]
	
	xSemaphoreGiveFromISR( sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken );
   15ea4:	4b0b      	ldr	r3, [pc, #44]	; (15ed4 <I2cSensorsRxComplete+0x48>)
   15ea6:	681b      	ldr	r3, [r3, #0]
   15ea8:	220c      	movs	r2, #12
   15eaa:	18ba      	adds	r2, r7, r2
   15eac:	0011      	movs	r1, r2
   15eae:	0018      	movs	r0, r3
   15eb0:	4b09      	ldr	r3, [pc, #36]	; (15ed8 <I2cSensorsRxComplete+0x4c>)
   15eb2:	4798      	blx	r3
	sensorTransmitError = false;
   15eb4:	4b09      	ldr	r3, [pc, #36]	; (15edc <I2cSensorsRxComplete+0x50>)
   15eb6:	2200      	movs	r2, #0
   15eb8:	701a      	strb	r2, [r3, #0]
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
   15eba:	68fb      	ldr	r3, [r7, #12]
   15ebc:	2b00      	cmp	r3, #0
   15ebe:	d003      	beq.n	15ec8 <I2cSensorsRxComplete+0x3c>
   15ec0:	4b07      	ldr	r3, [pc, #28]	; (15ee0 <I2cSensorsRxComplete+0x54>)
   15ec2:	2280      	movs	r2, #128	; 0x80
   15ec4:	0552      	lsls	r2, r2, #21
   15ec6:	601a      	str	r2, [r3, #0]
}
   15ec8:	46c0      	nop			; (mov r8, r8)
   15eca:	46bd      	mov	sp, r7
   15ecc:	b004      	add	sp, #16
   15ece:	bd80      	pop	{r7, pc}
   15ed0:	20000948 	.word	0x20000948
   15ed4:	200043bc 	.word	0x200043bc
   15ed8:	0001aad9 	.word	0x0001aad9
   15edc:	20000945 	.word	0x20000945
   15ee0:	e000ed04 	.word	0xe000ed04

00015ee4 <I2cSensorsError>:
					and is currently waiting for a notification that it has finished.
 * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
 * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
 * @note        
 *****************************************************************************/
void I2cSensorsError(struct i2c_master_module *const module){
   15ee4:	b580      	push	{r7, lr}
   15ee6:	b084      	sub	sp, #16
   15ee8:	af00      	add	r7, sp, #0
   15eea:	6078      	str	r0, [r7, #4]
	
	I2cSensorBusState.i2cState = I2C_BUS_READY;
   15eec:	4b0e      	ldr	r3, [pc, #56]	; (15f28 <I2cSensorsError+0x44>)
   15eee:	2200      	movs	r2, #0
   15ef0:	701a      	strb	r2, [r3, #0]
	I2cSensorBusState.txDoneFlag = true;
   15ef2:	4b0d      	ldr	r3, [pc, #52]	; (15f28 <I2cSensorsError+0x44>)
   15ef4:	2201      	movs	r2, #1
   15ef6:	605a      	str	r2, [r3, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   15ef8:	2300      	movs	r3, #0
   15efa:	60fb      	str	r3, [r7, #12]
	
	xSemaphoreGiveFromISR( sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken );
   15efc:	4b0b      	ldr	r3, [pc, #44]	; (15f2c <I2cSensorsError+0x48>)
   15efe:	681b      	ldr	r3, [r3, #0]
   15f00:	220c      	movs	r2, #12
   15f02:	18ba      	adds	r2, r7, r2
   15f04:	0011      	movs	r1, r2
   15f06:	0018      	movs	r0, r3
   15f08:	4b09      	ldr	r3, [pc, #36]	; (15f30 <I2cSensorsError+0x4c>)
   15f0a:	4798      	blx	r3
	sensorTransmitError = false;
   15f0c:	4b09      	ldr	r3, [pc, #36]	; (15f34 <I2cSensorsError+0x50>)
   15f0e:	2200      	movs	r2, #0
   15f10:	701a      	strb	r2, [r3, #0]
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
   15f12:	68fb      	ldr	r3, [r7, #12]
   15f14:	2b00      	cmp	r3, #0
   15f16:	d003      	beq.n	15f20 <I2cSensorsError+0x3c>
   15f18:	4b07      	ldr	r3, [pc, #28]	; (15f38 <I2cSensorsError+0x54>)
   15f1a:	2280      	movs	r2, #128	; 0x80
   15f1c:	0552      	lsls	r2, r2, #21
   15f1e:	601a      	str	r2, [r3, #0]
}
   15f20:	46c0      	nop			; (mov r8, r8)
   15f22:	46bd      	mov	sp, r7
   15f24:	b004      	add	sp, #16
   15f26:	bd80      	pop	{r7, pc}
   15f28:	20000948 	.word	0x20000948
   15f2c:	200043bc 	.word	0x200043bc
   15f30:	0001aad9 	.word	0x0001aad9
   15f34:	20000945 	.word	0x20000945
   15f38:	e000ed04 	.word	0xe000ed04

00015f3c <I2cDriverRegisterSensorBusCallbacks>:



void I2cDriverRegisterSensorBusCallbacks(void)
{
   15f3c:	b580      	push	{r7, lr}
   15f3e:	af00      	add	r7, sp, #0
	/* Register callback function. */
	i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsTxComplete,I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   15f40:	4911      	ldr	r1, [pc, #68]	; (15f88 <I2cDriverRegisterSensorBusCallbacks+0x4c>)
   15f42:	4b12      	ldr	r3, [pc, #72]	; (15f8c <I2cDriverRegisterSensorBusCallbacks+0x50>)
   15f44:	2200      	movs	r2, #0
   15f46:	0018      	movs	r0, r3
   15f48:	4b11      	ldr	r3, [pc, #68]	; (15f90 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   15f4a:	4798      	blx	r3
	i2c_master_enable_callback(&i2cSensorBusInstance,I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   15f4c:	4b0f      	ldr	r3, [pc, #60]	; (15f8c <I2cDriverRegisterSensorBusCallbacks+0x50>)
   15f4e:	2100      	movs	r1, #0
   15f50:	0018      	movs	r0, r3
   15f52:	4b10      	ldr	r3, [pc, #64]	; (15f94 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   15f54:	4798      	blx	r3
	
	i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsRxComplete, I2C_MASTER_CALLBACK_READ_COMPLETE);
   15f56:	4910      	ldr	r1, [pc, #64]	; (15f98 <I2cDriverRegisterSensorBusCallbacks+0x5c>)
   15f58:	4b0c      	ldr	r3, [pc, #48]	; (15f8c <I2cDriverRegisterSensorBusCallbacks+0x50>)
   15f5a:	2201      	movs	r2, #1
   15f5c:	0018      	movs	r0, r3
   15f5e:	4b0c      	ldr	r3, [pc, #48]	; (15f90 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   15f60:	4798      	blx	r3
	i2c_master_enable_callback(&i2cSensorBusInstance,I2C_MASTER_CALLBACK_READ_COMPLETE);
   15f62:	4b0a      	ldr	r3, [pc, #40]	; (15f8c <I2cDriverRegisterSensorBusCallbacks+0x50>)
   15f64:	2101      	movs	r1, #1
   15f66:	0018      	movs	r0, r3
   15f68:	4b0a      	ldr	r3, [pc, #40]	; (15f94 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   15f6a:	4798      	blx	r3
	
	i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsError,I2C_MASTER_CALLBACK_ERROR);
   15f6c:	490b      	ldr	r1, [pc, #44]	; (15f9c <I2cDriverRegisterSensorBusCallbacks+0x60>)
   15f6e:	4b07      	ldr	r3, [pc, #28]	; (15f8c <I2cDriverRegisterSensorBusCallbacks+0x50>)
   15f70:	2202      	movs	r2, #2
   15f72:	0018      	movs	r0, r3
   15f74:	4b06      	ldr	r3, [pc, #24]	; (15f90 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   15f76:	4798      	blx	r3
	i2c_master_enable_callback(&i2cSensorBusInstance,I2C_MASTER_CALLBACK_ERROR);
   15f78:	4b04      	ldr	r3, [pc, #16]	; (15f8c <I2cDriverRegisterSensorBusCallbacks+0x50>)
   15f7a:	2102      	movs	r1, #2
   15f7c:	0018      	movs	r0, r3
   15f7e:	4b05      	ldr	r3, [pc, #20]	; (15f94 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   15f80:	4798      	blx	r3
}
   15f82:	46c0      	nop			; (mov r8, r8)
   15f84:	46bd      	mov	sp, r7
   15f86:	bd80      	pop	{r7, pc}
   15f88:	00015e35 	.word	0x00015e35
   15f8c:	20004394 	.word	0x20004394
   15f90:	0001356d 	.word	0x0001356d
   15f94:	00015d45 	.word	0x00015d45
   15f98:	00015e8d 	.word	0x00015e8d
   15f9c:	00015ee5 	.word	0x00015ee5

00015fa0 <I2cInitializeDriver>:
 * @fn			int32_t I2cInitializeDriver(void)
 * @brief       Function call to initialize the I2C driver\
 * @details     This function must be called from an RTOS thread if using RTOS, and must be called before any I2C call
 * @note        
 *****************************************************************************/
 int32_t I2cInitializeDriver(void){
   15fa0:	b580      	push	{r7, lr}
   15fa2:	b082      	sub	sp, #8
   15fa4:	af00      	add	r7, sp, #0
	
	int32_t error = STATUS_OK;
   15fa6:	2300      	movs	r3, #0
   15fa8:	607b      	str	r3, [r7, #4]


	error = I2cDriverConfigureSensorBus();
   15faa:	4b14      	ldr	r3, [pc, #80]	; (15ffc <I2cInitializeDriver+0x5c>)
   15fac:	4798      	blx	r3
   15fae:	0003      	movs	r3, r0
   15fb0:	607b      	str	r3, [r7, #4]
	if(STATUS_OK != error) goto exit;
   15fb2:	687b      	ldr	r3, [r7, #4]
   15fb4:	2b00      	cmp	r3, #0
   15fb6:	d11a      	bne.n	15fee <I2cInitializeDriver+0x4e>
	
	I2cDriverRegisterSensorBusCallbacks();
   15fb8:	4b11      	ldr	r3, [pc, #68]	; (16000 <I2cInitializeDriver+0x60>)
   15fba:	4798      	blx	r3
	
		
	sensorI2cMutexHandle = xSemaphoreCreateMutex();
   15fbc:	2001      	movs	r0, #1
   15fbe:	4b11      	ldr	r3, [pc, #68]	; (16004 <I2cInitializeDriver+0x64>)
   15fc0:	4798      	blx	r3
   15fc2:	0002      	movs	r2, r0
   15fc4:	4b10      	ldr	r3, [pc, #64]	; (16008 <I2cInitializeDriver+0x68>)
   15fc6:	601a      	str	r2, [r3, #0]
	
	sensorI2cSemaphoreHandle = xSemaphoreCreateBinary();
   15fc8:	2203      	movs	r2, #3
   15fca:	2100      	movs	r1, #0
   15fcc:	2001      	movs	r0, #1
   15fce:	4b0f      	ldr	r3, [pc, #60]	; (1600c <I2cInitializeDriver+0x6c>)
   15fd0:	4798      	blx	r3
   15fd2:	0002      	movs	r2, r0
   15fd4:	4b0e      	ldr	r3, [pc, #56]	; (16010 <I2cInitializeDriver+0x70>)
   15fd6:	601a      	str	r2, [r3, #0]
	//xSemaphoreGive(sensorI2cSemaphoreHandle);

	
	if(NULL == sensorI2cMutexHandle || NULL == sensorI2cSemaphoreHandle){
   15fd8:	4b0b      	ldr	r3, [pc, #44]	; (16008 <I2cInitializeDriver+0x68>)
   15fda:	681b      	ldr	r3, [r3, #0]
   15fdc:	2b00      	cmp	r3, #0
   15fde:	d003      	beq.n	15fe8 <I2cInitializeDriver+0x48>
   15fe0:	4b0b      	ldr	r3, [pc, #44]	; (16010 <I2cInitializeDriver+0x70>)
   15fe2:	681b      	ldr	r3, [r3, #0]
   15fe4:	2b00      	cmp	r3, #0
   15fe6:	d103      	bne.n	15ff0 <I2cInitializeDriver+0x50>
		error = STATUS_SUSPEND;	//Could not initialize mutex!
   15fe8:	2306      	movs	r3, #6
   15fea:	607b      	str	r3, [r7, #4]
		goto exit;
   15fec:	e000      	b.n	15ff0 <I2cInitializeDriver+0x50>
	if(STATUS_OK != error) goto exit;
   15fee:	46c0      	nop			; (mov r8, r8)
	}

	exit:
	return error;		
   15ff0:	687b      	ldr	r3, [r7, #4]
}
   15ff2:	0018      	movs	r0, r3
   15ff4:	46bd      	mov	sp, r7
   15ff6:	b002      	add	sp, #8
   15ff8:	bd80      	pop	{r7, pc}
   15ffa:	46c0      	nop			; (mov r8, r8)
   15ffc:	00015d79 	.word	0x00015d79
   16000:	00015f3d 	.word	0x00015f3d
   16004:	0001a411 	.word	0x0001a411
   16008:	20004390 	.word	0x20004390
   1600c:	0001a1a9 	.word	0x0001a1a9
   16010:	200043bc 	.word	0x200043bc

00016014 <I2cWriteData>:
 * @param[in]   data Pointer to I2C data structure which has all the information needed to send an I2C message
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note        
 *****************************************************************************/

int32_t I2cWriteData(I2C_Data *data){
   16014:	b590      	push	{r4, r7, lr}
   16016:	b089      	sub	sp, #36	; 0x24
   16018:	af00      	add	r7, sp, #0
   1601a:	6078      	str	r0, [r7, #4]
	
	int32_t error = ERROR_NONE;
   1601c:	2300      	movs	r3, #0
   1601e:	61fb      	str	r3, [r7, #28]
	enum status_code hwError;
	struct i2c_master_module *I2CBusHw = NULL;
   16020:	2300      	movs	r3, #0
   16022:	61bb      	str	r3, [r7, #24]
	I2C_Bus_State * busI2cState;
	struct i2c_master_packet *writePacket = NULL;
   16024:	2300      	movs	r3, #0
   16026:	617b      	str	r3, [r7, #20]
	struct i2c_master_packet *readPacket = NULL;
   16028:	2300      	movs	r3, #0
   1602a:	613b      	str	r3, [r7, #16]
	
	//Check parameters
	if(data == NULL || data->msgOut == NULL){
   1602c:	687b      	ldr	r3, [r7, #4]
   1602e:	2b00      	cmp	r3, #0
   16030:	d003      	beq.n	1603a <I2cWriteData+0x26>
   16032:	687b      	ldr	r3, [r7, #4]
   16034:	685b      	ldr	r3, [r3, #4]
   16036:	2b00      	cmp	r3, #0
   16038:	d103      	bne.n	16042 <I2cWriteData+0x2e>
		error = ERR_INVALID_ARG;
   1603a:	2308      	movs	r3, #8
   1603c:	425b      	negs	r3, r3
   1603e:	61fb      	str	r3, [r7, #28]
		goto exit;
   16040:	e01f      	b.n	16082 <I2cWriteData+0x6e>
	}

	//Prepare to write
	sensorPacketWrite.address = data->address;
   16042:	687b      	ldr	r3, [r7, #4]
   16044:	781b      	ldrb	r3, [r3, #0]
   16046:	b29a      	uxth	r2, r3
   16048:	4b10      	ldr	r3, [pc, #64]	; (1608c <I2cWriteData+0x78>)
   1604a:	801a      	strh	r2, [r3, #0]
	sensorPacketWrite.data = (uint8_t*) data->msgOut;
   1604c:	687b      	ldr	r3, [r7, #4]
   1604e:	685a      	ldr	r2, [r3, #4]
   16050:	4b0e      	ldr	r3, [pc, #56]	; (1608c <I2cWriteData+0x78>)
   16052:	605a      	str	r2, [r3, #4]
	sensorPacketWrite.data_length = data->lenOut;
   16054:	687b      	ldr	r3, [r7, #4]
   16056:	89da      	ldrh	r2, [r3, #14]
   16058:	4b0c      	ldr	r3, [pc, #48]	; (1608c <I2cWriteData+0x78>)
   1605a:	805a      	strh	r2, [r3, #2]
	
	//Write

	hwError = i2c_master_write_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   1605c:	230f      	movs	r3, #15
   1605e:	18fc      	adds	r4, r7, r3
   16060:	4a0a      	ldr	r2, [pc, #40]	; (1608c <I2cWriteData+0x78>)
   16062:	4b0b      	ldr	r3, [pc, #44]	; (16090 <I2cWriteData+0x7c>)
   16064:	0011      	movs	r1, r2
   16066:	0018      	movs	r0, r3
   16068:	4b0a      	ldr	r3, [pc, #40]	; (16094 <I2cWriteData+0x80>)
   1606a:	4798      	blx	r3
   1606c:	0003      	movs	r3, r0
   1606e:	7023      	strb	r3, [r4, #0]
	
	if(STATUS_OK != hwError)
   16070:	230f      	movs	r3, #15
   16072:	18fb      	adds	r3, r7, r3
   16074:	781b      	ldrb	r3, [r3, #0]
   16076:	2b00      	cmp	r3, #0
   16078:	d003      	beq.n	16082 <I2cWriteData+0x6e>
	{
		error = ERROR_IO;
   1607a:	2306      	movs	r3, #6
   1607c:	425b      	negs	r3, r3
   1607e:	61fb      	str	r3, [r7, #28]
		goto exit;
   16080:	46c0      	nop			; (mov r8, r8)
	}
	
	exit:
	return error;
   16082:	69fb      	ldr	r3, [r7, #28]
}
   16084:	0018      	movs	r0, r3
   16086:	46bd      	mov	sp, r7
   16088:	b009      	add	sp, #36	; 0x24
   1608a:	bd90      	pop	{r4, r7, pc}
   1608c:	200043c0 	.word	0x200043c0
   16090:	20004394 	.word	0x20004394
   16094:	000137f1 	.word	0x000137f1

00016098 <I2cWriteData_No_Stop>:
 * @param[in]   data Pointer to I2C data structure which has all the information needed to send an I2C message
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note        
 *****************************************************************************/

int32_t I2cWriteData_No_Stop(I2C_Data *data){
   16098:	b590      	push	{r4, r7, lr}
   1609a:	b089      	sub	sp, #36	; 0x24
   1609c:	af00      	add	r7, sp, #0
   1609e:	6078      	str	r0, [r7, #4]
	
	int32_t error = ERROR_NONE;
   160a0:	2300      	movs	r3, #0
   160a2:	61fb      	str	r3, [r7, #28]
	enum status_code hwError;
	struct i2c_master_module *I2CBusHw = NULL;
   160a4:	2300      	movs	r3, #0
   160a6:	61bb      	str	r3, [r7, #24]
	I2C_Bus_State * busI2cState;
	struct i2c_master_packet *writePacket = NULL;
   160a8:	2300      	movs	r3, #0
   160aa:	617b      	str	r3, [r7, #20]
	struct i2c_master_packet *readPacket = NULL;
   160ac:	2300      	movs	r3, #0
   160ae:	613b      	str	r3, [r7, #16]
	
	//Check parameters
	if(data == NULL || data->msgOut == NULL){
   160b0:	687b      	ldr	r3, [r7, #4]
   160b2:	2b00      	cmp	r3, #0
   160b4:	d003      	beq.n	160be <I2cWriteData_No_Stop+0x26>
   160b6:	687b      	ldr	r3, [r7, #4]
   160b8:	685b      	ldr	r3, [r3, #4]
   160ba:	2b00      	cmp	r3, #0
   160bc:	d103      	bne.n	160c6 <I2cWriteData_No_Stop+0x2e>
		error = ERR_INVALID_ARG;
   160be:	2308      	movs	r3, #8
   160c0:	425b      	negs	r3, r3
   160c2:	61fb      	str	r3, [r7, #28]
		goto exit;
   160c4:	e01f      	b.n	16106 <I2cWriteData_No_Stop+0x6e>
	}

	//Prepare to write
	sensorPacketWrite.address = data->address;
   160c6:	687b      	ldr	r3, [r7, #4]
   160c8:	781b      	ldrb	r3, [r3, #0]
   160ca:	b29a      	uxth	r2, r3
   160cc:	4b10      	ldr	r3, [pc, #64]	; (16110 <I2cWriteData_No_Stop+0x78>)
   160ce:	801a      	strh	r2, [r3, #0]
	sensorPacketWrite.data = (uint8_t*) data->msgOut;
   160d0:	687b      	ldr	r3, [r7, #4]
   160d2:	685a      	ldr	r2, [r3, #4]
   160d4:	4b0e      	ldr	r3, [pc, #56]	; (16110 <I2cWriteData_No_Stop+0x78>)
   160d6:	605a      	str	r2, [r3, #4]
	sensorPacketWrite.data_length = data->lenOut;
   160d8:	687b      	ldr	r3, [r7, #4]
   160da:	89da      	ldrh	r2, [r3, #14]
   160dc:	4b0c      	ldr	r3, [pc, #48]	; (16110 <I2cWriteData_No_Stop+0x78>)
   160de:	805a      	strh	r2, [r3, #2]
	
	//Write

	hwError = i2c_master_write_packet_job_no_stop(&i2cSensorBusInstance, &sensorPacketWrite);
   160e0:	230f      	movs	r3, #15
   160e2:	18fc      	adds	r4, r7, r3
   160e4:	4a0a      	ldr	r2, [pc, #40]	; (16110 <I2cWriteData_No_Stop+0x78>)
   160e6:	4b0b      	ldr	r3, [pc, #44]	; (16114 <I2cWriteData_No_Stop+0x7c>)
   160e8:	0011      	movs	r1, r2
   160ea:	0018      	movs	r0, r3
   160ec:	4b0a      	ldr	r3, [pc, #40]	; (16118 <I2cWriteData_No_Stop+0x80>)
   160ee:	4798      	blx	r3
   160f0:	0003      	movs	r3, r0
   160f2:	7023      	strb	r3, [r4, #0]
	
	if(STATUS_OK != hwError)
   160f4:	230f      	movs	r3, #15
   160f6:	18fb      	adds	r3, r7, r3
   160f8:	781b      	ldrb	r3, [r3, #0]
   160fa:	2b00      	cmp	r3, #0
   160fc:	d003      	beq.n	16106 <I2cWriteData_No_Stop+0x6e>
	{
		error = ERROR_IO;
   160fe:	2306      	movs	r3, #6
   16100:	425b      	negs	r3, r3
   16102:	61fb      	str	r3, [r7, #28]
		goto exit;
   16104:	46c0      	nop			; (mov r8, r8)
	}
	
	exit:
	return error;
   16106:	69fb      	ldr	r3, [r7, #28]
}
   16108:	0018      	movs	r0, r3
   1610a:	46bd      	mov	sp, r7
   1610c:	b009      	add	sp, #36	; 0x24
   1610e:	bd90      	pop	{r4, r7, pc}
   16110:	200043c0 	.word	0x200043c0
   16114:	20004394 	.word	0x20004394
   16118:	00013831 	.word	0x00013831

0001611c <I2cReadData>:
 * @details     
 * @param[in]   data Pointer to I2C data structure which has all the information needed to send an I2C message
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note        
 *****************************************************************************/
int32_t I2cReadData(I2C_Data *data){
   1611c:	b590      	push	{r4, r7, lr}
   1611e:	b089      	sub	sp, #36	; 0x24
   16120:	af00      	add	r7, sp, #0
   16122:	6078      	str	r0, [r7, #4]
	
	int32_t error = ERROR_NONE;
   16124:	2300      	movs	r3, #0
   16126:	61fb      	str	r3, [r7, #28]
	enum status_code hwError;
	struct i2c_master_module *I2CBusHw = NULL;
   16128:	2300      	movs	r3, #0
   1612a:	61bb      	str	r3, [r7, #24]
	I2C_Bus_State * busI2cState;
	struct i2c_master_packet *writePacket = NULL;
   1612c:	2300      	movs	r3, #0
   1612e:	617b      	str	r3, [r7, #20]
	struct i2c_master_packet *readPacket = NULL;
   16130:	2300      	movs	r3, #0
   16132:	613b      	str	r3, [r7, #16]
	
	
	//Check parameters
	if(data == NULL || data->msgOut == NULL){
   16134:	687b      	ldr	r3, [r7, #4]
   16136:	2b00      	cmp	r3, #0
   16138:	d003      	beq.n	16142 <I2cReadData+0x26>
   1613a:	687b      	ldr	r3, [r7, #4]
   1613c:	685b      	ldr	r3, [r3, #4]
   1613e:	2b00      	cmp	r3, #0
   16140:	d103      	bne.n	1614a <I2cReadData+0x2e>
		error = ERR_INVALID_ARG;
   16142:	2308      	movs	r3, #8
   16144:	425b      	negs	r3, r3
   16146:	61fb      	str	r3, [r7, #28]
		goto exit;
   16148:	e01f      	b.n	1618a <I2cReadData+0x6e>
	}

	//Prepare to read
	sensorPacketWrite.address = data->address;
   1614a:	687b      	ldr	r3, [r7, #4]
   1614c:	781b      	ldrb	r3, [r3, #0]
   1614e:	b29a      	uxth	r2, r3
   16150:	4b10      	ldr	r3, [pc, #64]	; (16194 <I2cReadData+0x78>)
   16152:	801a      	strh	r2, [r3, #0]
	sensorPacketWrite.data = data->msgIn;
   16154:	687b      	ldr	r3, [r7, #4]
   16156:	689a      	ldr	r2, [r3, #8]
   16158:	4b0e      	ldr	r3, [pc, #56]	; (16194 <I2cReadData+0x78>)
   1615a:	605a      	str	r2, [r3, #4]
	sensorPacketWrite.data_length = data->lenIn;
   1615c:	687b      	ldr	r3, [r7, #4]
   1615e:	899a      	ldrh	r2, [r3, #12]
   16160:	4b0c      	ldr	r3, [pc, #48]	; (16194 <I2cReadData+0x78>)
   16162:	805a      	strh	r2, [r3, #2]
	
	//Read

	hwError = i2c_master_read_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   16164:	230f      	movs	r3, #15
   16166:	18fc      	adds	r4, r7, r3
   16168:	4a0a      	ldr	r2, [pc, #40]	; (16194 <I2cReadData+0x78>)
   1616a:	4b0b      	ldr	r3, [pc, #44]	; (16198 <I2cReadData+0x7c>)
   1616c:	0011      	movs	r1, r2
   1616e:	0018      	movs	r0, r3
   16170:	4b0a      	ldr	r3, [pc, #40]	; (1619c <I2cReadData+0x80>)
   16172:	4798      	blx	r3
   16174:	0003      	movs	r3, r0
   16176:	7023      	strb	r3, [r4, #0]
	
	if(STATUS_OK != hwError)
   16178:	230f      	movs	r3, #15
   1617a:	18fb      	adds	r3, r7, r3
   1617c:	781b      	ldrb	r3, [r3, #0]
   1617e:	2b00      	cmp	r3, #0
   16180:	d003      	beq.n	1618a <I2cReadData+0x6e>
	{
		error = ERROR_IO;
   16182:	2306      	movs	r3, #6
   16184:	425b      	negs	r3, r3
   16186:	61fb      	str	r3, [r7, #28]
		goto exit;
   16188:	46c0      	nop			; (mov r8, r8)
	}
	
	exit:
	return error;
   1618a:	69fb      	ldr	r3, [r7, #28]
}
   1618c:	0018      	movs	r0, r3
   1618e:	46bd      	mov	sp, r7
   16190:	b009      	add	sp, #36	; 0x24
   16192:	bd90      	pop	{r4, r7, pc}
   16194:	200043c0 	.word	0x200043c0
   16198:	20004394 	.word	0x20004394
   1619c:	0001370d 	.word	0x0001370d

000161a0 <I2cFreeMutex>:
 * @details     
 * @param[out]   bus Enum that represents the bus in which we are interested to free the mutex of.
 * @return      Returns (ERROR_NONE) if the bus is ready, (ERROR_NOT_INITIALIZED) if it is busy.
 * @note        STUDENTS TO FILL OUT!
 *****************************************************************************/
int32_t I2cFreeMutex(void){
   161a0:	b590      	push	{r4, r7, lr}
   161a2:	b083      	sub	sp, #12
   161a4:	af00      	add	r7, sp, #0
	
	int32_t error = ERROR_NONE;
   161a6:	2300      	movs	r3, #0
   161a8:	607b      	str	r3, [r7, #4]
	if(pdTRUE != xSemaphoreGive(sensorI2cMutexHandle))
   161aa:	4b09      	ldr	r3, [pc, #36]	; (161d0 <I2cFreeMutex+0x30>)
   161ac:	6818      	ldr	r0, [r3, #0]
   161ae:	2300      	movs	r3, #0
   161b0:	2200      	movs	r2, #0
   161b2:	2100      	movs	r1, #0
   161b4:	4c07      	ldr	r4, [pc, #28]	; (161d4 <I2cFreeMutex+0x34>)
   161b6:	47a0      	blx	r4
   161b8:	0003      	movs	r3, r0
   161ba:	2b01      	cmp	r3, #1
   161bc:	d002      	beq.n	161c4 <I2cFreeMutex+0x24>
	{
		error = ERROR_NOT_INITIALIZED;
   161be:	2314      	movs	r3, #20
   161c0:	425b      	negs	r3, r3
   161c2:	607b      	str	r3, [r7, #4]
	}
	return error;
   161c4:	687b      	ldr	r3, [r7, #4]
}
   161c6:	0018      	movs	r0, r3
   161c8:	46bd      	mov	sp, r7
   161ca:	b003      	add	sp, #12
   161cc:	bd90      	pop	{r4, r7, pc}
   161ce:	46c0      	nop			; (mov r8, r8)
   161d0:	20004390 	.word	0x20004390
   161d4:	0001a451 	.word	0x0001a451

000161d8 <I2cGetMutex>:
 * @details     
 * @param[in]   waitTime Time to wait for the mutex to be freed.
 * @return      Returns (ERROR_NONE) if we got the mutex, (ERROR_NOT_READY) if we time out before we got it
 * @note        
 *****************************************************************************/
int32_t I2cGetMutex(TickType_t waitTime){
   161d8:	b580      	push	{r7, lr}
   161da:	b084      	sub	sp, #16
   161dc:	af00      	add	r7, sp, #0
   161de:	6078      	str	r0, [r7, #4]
	
	int32_t error = ERROR_NONE;
   161e0:	2300      	movs	r3, #0
   161e2:	60fb      	str	r3, [r7, #12]
	if(pdTRUE != xSemaphoreTake(sensorI2cMutexHandle, waitTime))
   161e4:	4b08      	ldr	r3, [pc, #32]	; (16208 <I2cGetMutex+0x30>)
   161e6:	681b      	ldr	r3, [r3, #0]
   161e8:	687a      	ldr	r2, [r7, #4]
   161ea:	0011      	movs	r1, r2
   161ec:	0018      	movs	r0, r3
   161ee:	4b07      	ldr	r3, [pc, #28]	; (1620c <I2cGetMutex+0x34>)
   161f0:	4798      	blx	r3
   161f2:	0003      	movs	r3, r0
   161f4:	2b01      	cmp	r3, #1
   161f6:	d002      	beq.n	161fe <I2cGetMutex+0x26>
	{
		error = ERROR_NOT_READY;
   161f8:	231d      	movs	r3, #29
   161fa:	425b      	negs	r3, r3
   161fc:	60fb      	str	r3, [r7, #12]
	}
	return error;
   161fe:	68fb      	ldr	r3, [r7, #12]
}
   16200:	0018      	movs	r0, r3
   16202:	46bd      	mov	sp, r7
   16204:	b004      	add	sp, #16
   16206:	bd80      	pop	{r7, pc}
   16208:	20004390 	.word	0x20004390
   1620c:	0001b161 	.word	0x0001b161

00016210 <I2cGetSemaphoreHandle>:

static int32_t I2cGetSemaphoreHandle(SemaphoreHandle_t *handle){
   16210:	b580      	push	{r7, lr}
   16212:	b084      	sub	sp, #16
   16214:	af00      	add	r7, sp, #0
   16216:	6078      	str	r0, [r7, #4]
	int32_t error = ERROR_NONE;
   16218:	2300      	movs	r3, #0
   1621a:	60fb      	str	r3, [r7, #12]
	*handle = sensorI2cSemaphoreHandle;
   1621c:	4b04      	ldr	r3, [pc, #16]	; (16230 <I2cGetSemaphoreHandle+0x20>)
   1621e:	681a      	ldr	r2, [r3, #0]
   16220:	687b      	ldr	r3, [r7, #4]
   16222:	601a      	str	r2, [r3, #0]
	return error;
   16224:	68fb      	ldr	r3, [r7, #12]
}
   16226:	0018      	movs	r0, r3
   16228:	46bd      	mov	sp, r7
   1622a:	b004      	add	sp, #16
   1622c:	bd80      	pop	{r7, pc}
   1622e:	46c0      	nop			; (mov r8, r8)
   16230:	200043bc 	.word	0x200043bc

00016234 <I2cGetTaskErrorStatus>:
 * @brief       Sets the error state of the latest I2C bus transaction for a given I2C data, which holds which physical I2C bus we are using.
 * @details     This error flag is set to indicate when a I2C transaction has failed on a given I2C bus (encapsulated in the I2C data structure).
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note        
 *****************************************************************************/
 static uint8_t I2cGetTaskErrorStatus(void){
   16234:	b580      	push	{r7, lr}
   16236:	af00      	add	r7, sp, #0
	 return sensorTransmitError;
   16238:	4b02      	ldr	r3, [pc, #8]	; (16244 <I2cGetTaskErrorStatus+0x10>)
   1623a:	781b      	ldrb	r3, [r3, #0]
 }
   1623c:	0018      	movs	r0, r3
   1623e:	46bd      	mov	sp, r7
   16240:	bd80      	pop	{r7, pc}
   16242:	46c0      	nop			; (mov r8, r8)
   16244:	20000945 	.word	0x20000945

00016248 <I2cSetTaskErrorStatus>:
 * @details     This error flag is set to indicate when a I2C transaction has failed on a given I2C bus (encapsulated in the I2C data structure).
 * @param[in]   value Value to which to set the error flag to.
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note        
 *****************************************************************************/
 static void I2cSetTaskErrorStatus(uint8_t value){
   16248:	b580      	push	{r7, lr}
   1624a:	b082      	sub	sp, #8
   1624c:	af00      	add	r7, sp, #0
   1624e:	0002      	movs	r2, r0
   16250:	1dfb      	adds	r3, r7, #7
   16252:	701a      	strb	r2, [r3, #0]
	sensorTransmitError = value;
   16254:	4b03      	ldr	r3, [pc, #12]	; (16264 <I2cSetTaskErrorStatus+0x1c>)
   16256:	1dfa      	adds	r2, r7, #7
   16258:	7812      	ldrb	r2, [r2, #0]
   1625a:	701a      	strb	r2, [r3, #0]
 }
   1625c:	46c0      	nop			; (mov r8, r8)
   1625e:	46bd      	mov	sp, r7
   16260:	b002      	add	sp, #8
   16262:	bd80      	pop	{r7, pc}
   16264:	20000945 	.word	0x20000945

00016268 <I2cWriteDataWait>:
				the delay an I2C device needs to make a measurement.
 * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
 * @return      Returns an error message in case of error.
 * @note        
 *****************************************************************************/
int32_t I2cWriteDataWait(I2C_Data *data, const TickType_t xMaxBlockTime){
   16268:	b580      	push	{r7, lr}
   1626a:	b084      	sub	sp, #16
   1626c:	af00      	add	r7, sp, #0
   1626e:	6078      	str	r0, [r7, #4]
   16270:	6039      	str	r1, [r7, #0]

int32_t error = ERROR_NONE;
   16272:	2300      	movs	r3, #0
   16274:	60fb      	str	r3, [r7, #12]
SemaphoreHandle_t semHandle = NULL;
   16276:	2300      	movs	r3, #0
   16278:	60bb      	str	r3, [r7, #8]


//---0. Get Mutex
error = 0; //Students to fill out
   1627a:	2300      	movs	r3, #0
   1627c:	60fb      	str	r3, [r7, #12]
error = I2cGetMutex(xMaxBlockTime);
   1627e:	683b      	ldr	r3, [r7, #0]
   16280:	0018      	movs	r0, r3
   16282:	4b26      	ldr	r3, [pc, #152]	; (1631c <I2cWriteDataWait+0xb4>)
   16284:	4798      	blx	r3
   16286:	0003      	movs	r3, r0
   16288:	60fb      	str	r3, [r7, #12]
if(ERROR_NONE != error) goto exit;
   1628a:	68fb      	ldr	r3, [r7, #12]
   1628c:	2b00      	cmp	r3, #0
   1628e:	d136      	bne.n	162fe <I2cWriteDataWait+0x96>


//---1. Get Semaphore Handle
error = I2cGetSemaphoreHandle(&semHandle);
   16290:	2308      	movs	r3, #8
   16292:	18fb      	adds	r3, r7, r3
   16294:	0018      	movs	r0, r3
   16296:	4b22      	ldr	r3, [pc, #136]	; (16320 <I2cWriteDataWait+0xb8>)
   16298:	4798      	blx	r3
   1629a:	0003      	movs	r3, r0
   1629c:	60fb      	str	r3, [r7, #12]
if(ERROR_NONE != error) goto exit;
   1629e:	68fb      	ldr	r3, [r7, #12]
   162a0:	2b00      	cmp	r3, #0
   162a2:	d12e      	bne.n	16302 <I2cWriteDataWait+0x9a>

//---2. Initiate sending data

error = I2cWriteData(data);
   162a4:	687b      	ldr	r3, [r7, #4]
   162a6:	0018      	movs	r0, r3
   162a8:	4b1e      	ldr	r3, [pc, #120]	; (16324 <I2cWriteDataWait+0xbc>)
   162aa:	4798      	blx	r3
   162ac:	0003      	movs	r3, r0
   162ae:	60fb      	str	r3, [r7, #12]
if (ERROR_NONE != error){
   162b0:	68fb      	ldr	r3, [r7, #12]
   162b2:	2b00      	cmp	r3, #0
   162b4:	d128      	bne.n	16308 <I2cWriteDataWait+0xa0>
	goto exitError0;
}

//---2. Wait for binary semaphore to tell us that we are done!
if( xSemaphoreTake( semHandle, xMaxBlockTime ) == pdTRUE ){
   162b6:	68bb      	ldr	r3, [r7, #8]
   162b8:	683a      	ldr	r2, [r7, #0]
   162ba:	0011      	movs	r1, r2
   162bc:	0018      	movs	r0, r3
   162be:	4b1a      	ldr	r3, [pc, #104]	; (16328 <I2cWriteDataWait+0xc0>)
   162c0:	4798      	blx	r3
   162c2:	0003      	movs	r3, r0
   162c4:	2b01      	cmp	r3, #1
   162c6:	d111      	bne.n	162ec <I2cWriteDataWait+0x84>
	/* The transmission ended as expected. We now delay until the I2C sensor is finished */
	if(I2cGetTaskErrorStatus()){
   162c8:	4b18      	ldr	r3, [pc, #96]	; (1632c <I2cWriteDataWait+0xc4>)
   162ca:	4798      	blx	r3
   162cc:	1e03      	subs	r3, r0, #0
   162ce:	d011      	beq.n	162f4 <I2cWriteDataWait+0x8c>
		I2cSetTaskErrorStatus(false);
   162d0:	2000      	movs	r0, #0
   162d2:	4b17      	ldr	r3, [pc, #92]	; (16330 <I2cWriteDataWait+0xc8>)
   162d4:	4798      	blx	r3
		if(error != ERROR_NONE){
   162d6:	68fb      	ldr	r3, [r7, #12]
   162d8:	2b00      	cmp	r3, #0
   162da:	d003      	beq.n	162e4 <I2cWriteDataWait+0x7c>
    		error = ERROR_I2C_HANG_RESET;
   162dc:	2321      	movs	r3, #33	; 0x21
   162de:	425b      	negs	r3, r3
   162e0:	60fb      	str	r3, [r7, #12]
    	}else{
    		error = ERROR_ABORTED;
		}
		goto exitError0;
   162e2:	e012      	b.n	1630a <I2cWriteDataWait+0xa2>
    		error = ERROR_ABORTED;
   162e4:	2303      	movs	r3, #3
   162e6:	425b      	negs	r3, r3
   162e8:	60fb      	str	r3, [r7, #12]
		goto exitError0;
   162ea:	e00e      	b.n	1630a <I2cWriteDataWait+0xa2>
	}
}else{
	/* The call to ulTaskNotifyTake() timed out. */
	error = ERR_TIMEOUT;
   162ec:	2303      	movs	r3, #3
   162ee:	425b      	negs	r3, r3
   162f0:	60fb      	str	r3, [r7, #12]
	goto exitError0;
   162f2:	e00a      	b.n	1630a <I2cWriteDataWait+0xa2>
}

//---8. Release Mutex
error = I2cFreeMutex();
   162f4:	4b0f      	ldr	r3, [pc, #60]	; (16334 <I2cWriteDataWait+0xcc>)
   162f6:	4798      	blx	r3
   162f8:	0003      	movs	r3, r0
   162fa:	60fb      	str	r3, [r7, #12]
   162fc:	e002      	b.n	16304 <I2cWriteDataWait+0x9c>
if(ERROR_NONE != error) goto exit;
   162fe:	46c0      	nop			; (mov r8, r8)
   16300:	e000      	b.n	16304 <I2cWriteDataWait+0x9c>
if(ERROR_NONE != error) goto exit;
   16302:	46c0      	nop			; (mov r8, r8)

exit:
return error;
   16304:	68fb      	ldr	r3, [r7, #12]
   16306:	e005      	b.n	16314 <I2cWriteDataWait+0xac>
	goto exitError0;
   16308:	46c0      	nop			; (mov r8, r8)

exitError0:
error = I2cFreeMutex();
   1630a:	4b0a      	ldr	r3, [pc, #40]	; (16334 <I2cWriteDataWait+0xcc>)
   1630c:	4798      	blx	r3
   1630e:	0003      	movs	r3, r0
   16310:	60fb      	str	r3, [r7, #12]

return error;
   16312:	68fb      	ldr	r3, [r7, #12]

}
   16314:	0018      	movs	r0, r3
   16316:	46bd      	mov	sp, r7
   16318:	b004      	add	sp, #16
   1631a:	bd80      	pop	{r7, pc}
   1631c:	000161d9 	.word	0x000161d9
   16320:	00016211 	.word	0x00016211
   16324:	00016015 	.word	0x00016015
   16328:	0001b161 	.word	0x0001b161
   1632c:	00016235 	.word	0x00016235
   16330:	00016249 	.word	0x00016249
   16334:	000161a1 	.word	0x000161a1

00016338 <I2cReadDataWait>:
 * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note        THIS IS THE FREERTOS VERSION! DO NOT Declare #define USE_FREERTOS if you wish to use the baremetal version!      
				students to fill!
 *****************************************************************************/
int32_t I2cReadDataWait(I2C_Data *data, const TickType_t delay, const TickType_t xMaxBlockTime){
   16338:	b580      	push	{r7, lr}
   1633a:	b086      	sub	sp, #24
   1633c:	af00      	add	r7, sp, #0
   1633e:	60f8      	str	r0, [r7, #12]
   16340:	60b9      	str	r1, [r7, #8]
   16342:	607a      	str	r2, [r7, #4]
	int32_t error = ERROR_NONE;
   16344:	2300      	movs	r3, #0
   16346:	617b      	str	r3, [r7, #20]
	SemaphoreHandle_t semHandle = NULL;
   16348:	2300      	movs	r3, #0
   1634a:	613b      	str	r3, [r7, #16]
	

	//---0. Get Mutex
	//STUDENTS FILL
	error = 0;
   1634c:	2300      	movs	r3, #0
   1634e:	617b      	str	r3, [r7, #20]
	error = I2cGetMutex(xMaxBlockTime);
   16350:	687b      	ldr	r3, [r7, #4]
   16352:	0018      	movs	r0, r3
   16354:	4b38      	ldr	r3, [pc, #224]	; (16438 <I2cReadDataWait+0x100>)
   16356:	4798      	blx	r3
   16358:	0003      	movs	r3, r0
   1635a:	617b      	str	r3, [r7, #20]
	if(ERROR_NONE != error) goto exit;
   1635c:	697b      	ldr	r3, [r7, #20]
   1635e:	2b00      	cmp	r3, #0
   16360:	d15b      	bne.n	1641a <I2cReadDataWait+0xe2>
	//---1. Get Semaphore Handle
	error = I2cGetSemaphoreHandle(&semHandle);
   16362:	2310      	movs	r3, #16
   16364:	18fb      	adds	r3, r7, r3
   16366:	0018      	movs	r0, r3
   16368:	4b34      	ldr	r3, [pc, #208]	; (1643c <I2cReadDataWait+0x104>)
   1636a:	4798      	blx	r3
   1636c:	0003      	movs	r3, r0
   1636e:	617b      	str	r3, [r7, #20]
	if(ERROR_NONE != error) goto exit;
   16370:	697b      	ldr	r3, [r7, #20]
   16372:	2b00      	cmp	r3, #0
   16374:	d153      	bne.n	1641e <I2cReadDataWait+0xe6>
	//---2. Initiate sending data
	error = I2cWriteData(data);
   16376:	68fb      	ldr	r3, [r7, #12]
   16378:	0018      	movs	r0, r3
   1637a:	4b31      	ldr	r3, [pc, #196]	; (16440 <I2cReadDataWait+0x108>)
   1637c:	4798      	blx	r3
   1637e:	0003      	movs	r3, r0
   16380:	617b      	str	r3, [r7, #20]
	if (ERROR_NONE != error){
   16382:	697b      	ldr	r3, [r7, #20]
   16384:	2b00      	cmp	r3, #0
   16386:	d14d      	bne.n	16424 <I2cReadDataWait+0xec>
		goto exitError0;
	}
	//---3. Wait for binary semaphore to tell us that we are done!
	if( xSemaphoreTake( semHandle, xMaxBlockTime ) == pdTRUE ){
   16388:	693b      	ldr	r3, [r7, #16]
   1638a:	687a      	ldr	r2, [r7, #4]
   1638c:	0011      	movs	r1, r2
   1638e:	0018      	movs	r0, r3
   16390:	4b2c      	ldr	r3, [pc, #176]	; (16444 <I2cReadDataWait+0x10c>)
   16392:	4798      	blx	r3
   16394:	0003      	movs	r3, r0
   16396:	2b01      	cmp	r3, #1
   16398:	d111      	bne.n	163be <I2cReadDataWait+0x86>
		/* The transmission ended as expected. We now delay until the I2C sensor is finished */
		if(I2cGetTaskErrorStatus()){
   1639a:	4b2b      	ldr	r3, [pc, #172]	; (16448 <I2cReadDataWait+0x110>)
   1639c:	4798      	blx	r3
   1639e:	1e03      	subs	r3, r0, #0
   163a0:	d011      	beq.n	163c6 <I2cReadDataWait+0x8e>
			I2cSetTaskErrorStatus(false);
   163a2:	2000      	movs	r0, #0
   163a4:	4b29      	ldr	r3, [pc, #164]	; (1644c <I2cReadDataWait+0x114>)
   163a6:	4798      	blx	r3
			if(error != ERROR_NONE){
   163a8:	697b      	ldr	r3, [r7, #20]
   163aa:	2b00      	cmp	r3, #0
   163ac:	d003      	beq.n	163b6 <I2cReadDataWait+0x7e>
				error = ERROR_I2C_HANG_RESET;
   163ae:	2321      	movs	r3, #33	; 0x21
   163b0:	425b      	negs	r3, r3
   163b2:	617b      	str	r3, [r7, #20]
				}else{
				error = ERROR_ABORTED;
			}
			goto exitError0;
   163b4:	e037      	b.n	16426 <I2cReadDataWait+0xee>
				error = ERROR_ABORTED;
   163b6:	2303      	movs	r3, #3
   163b8:	425b      	negs	r3, r3
   163ba:	617b      	str	r3, [r7, #20]
			goto exitError0;
   163bc:	e033      	b.n	16426 <I2cReadDataWait+0xee>
		}
		}else{
		/* The call to ulTaskNotifyTake() timed out. */
		error = ERR_TIMEOUT;
   163be:	2303      	movs	r3, #3
   163c0:	425b      	negs	r3, r3
   163c2:	617b      	str	r3, [r7, #20]
		goto exitError0;
   163c4:	e02f      	b.n	16426 <I2cReadDataWait+0xee>
	}
	//---6. Initiate Read data //TIP: SEE "I2cReadData", which is analogous to "I2cWriteData"
	error = I2cReadData(data);
   163c6:	68fb      	ldr	r3, [r7, #12]
   163c8:	0018      	movs	r0, r3
   163ca:	4b21      	ldr	r3, [pc, #132]	; (16450 <I2cReadDataWait+0x118>)
   163cc:	4798      	blx	r3
   163ce:	0003      	movs	r3, r0
   163d0:	617b      	str	r3, [r7, #20]
	//---7. Wait for notification
	if( xSemaphoreTake( semHandle, xMaxBlockTime ) == pdTRUE ){
   163d2:	693b      	ldr	r3, [r7, #16]
   163d4:	687a      	ldr	r2, [r7, #4]
   163d6:	0011      	movs	r1, r2
   163d8:	0018      	movs	r0, r3
   163da:	4b1a      	ldr	r3, [pc, #104]	; (16444 <I2cReadDataWait+0x10c>)
   163dc:	4798      	blx	r3
   163de:	0003      	movs	r3, r0
   163e0:	2b01      	cmp	r3, #1
   163e2:	d111      	bne.n	16408 <I2cReadDataWait+0xd0>
		/* The transmission ended as expected. We now delay until the I2C sensor is finished */
		if(I2cGetTaskErrorStatus()){
   163e4:	4b18      	ldr	r3, [pc, #96]	; (16448 <I2cReadDataWait+0x110>)
   163e6:	4798      	blx	r3
   163e8:	1e03      	subs	r3, r0, #0
   163ea:	d011      	beq.n	16410 <I2cReadDataWait+0xd8>
			I2cSetTaskErrorStatus(false);
   163ec:	2000      	movs	r0, #0
   163ee:	4b17      	ldr	r3, [pc, #92]	; (1644c <I2cReadDataWait+0x114>)
   163f0:	4798      	blx	r3
			if(error != ERROR_NONE){
   163f2:	697b      	ldr	r3, [r7, #20]
   163f4:	2b00      	cmp	r3, #0
   163f6:	d003      	beq.n	16400 <I2cReadDataWait+0xc8>
				error = ERROR_I2C_HANG_RESET;
   163f8:	2321      	movs	r3, #33	; 0x21
   163fa:	425b      	negs	r3, r3
   163fc:	617b      	str	r3, [r7, #20]
				}else{
				error = ERROR_ABORTED;
			}
			goto exitError0;
   163fe:	e012      	b.n	16426 <I2cReadDataWait+0xee>
				error = ERROR_ABORTED;
   16400:	2303      	movs	r3, #3
   16402:	425b      	negs	r3, r3
   16404:	617b      	str	r3, [r7, #20]
			goto exitError0;
   16406:	e00e      	b.n	16426 <I2cReadDataWait+0xee>
		}
		}else{
		/* The call to ulTaskNotifyTake() timed out. */
		error = ERR_TIMEOUT;
   16408:	2303      	movs	r3, #3
   1640a:	425b      	negs	r3, r3
   1640c:	617b      	str	r3, [r7, #20]
		goto exitError0;
   1640e:	e00a      	b.n	16426 <I2cReadDataWait+0xee>
	}	

	
	//---8. Release Mutex
	error = I2cFreeMutex();
   16410:	4b10      	ldr	r3, [pc, #64]	; (16454 <I2cReadDataWait+0x11c>)
   16412:	4798      	blx	r3
   16414:	0003      	movs	r3, r0
   16416:	617b      	str	r3, [r7, #20]
   16418:	e002      	b.n	16420 <I2cReadDataWait+0xe8>
	if(ERROR_NONE != error) goto exit;
   1641a:	46c0      	nop			; (mov r8, r8)
   1641c:	e000      	b.n	16420 <I2cReadDataWait+0xe8>
	if(ERROR_NONE != error) goto exit;
   1641e:	46c0      	nop			; (mov r8, r8)
	
	exit:
	return error;
   16420:	697b      	ldr	r3, [r7, #20]
   16422:	e005      	b.n	16430 <I2cReadDataWait+0xf8>
		goto exitError0;
   16424:	46c0      	nop			; (mov r8, r8)

	exitError0:
	error = I2cFreeMutex();
   16426:	4b0b      	ldr	r3, [pc, #44]	; (16454 <I2cReadDataWait+0x11c>)
   16428:	4798      	blx	r3
   1642a:	0003      	movs	r3, r0
   1642c:	617b      	str	r3, [r7, #20]

	return error;
   1642e:	697b      	ldr	r3, [r7, #20]

	
}
   16430:	0018      	movs	r0, r3
   16432:	46bd      	mov	sp, r7
   16434:	b006      	add	sp, #24
   16436:	bd80      	pop	{r7, pc}
   16438:	000161d9 	.word	0x000161d9
   1643c:	00016211 	.word	0x00016211
   16440:	00016015 	.word	0x00016015
   16444:	0001b161 	.word	0x0001b161
   16448:	00016235 	.word	0x00016235
   1644c:	00016249 	.word	0x00016249
   16450:	0001611d 	.word	0x0001611d
   16454:	000161a1 	.word	0x000161a1

00016458 <I2cReadDataWait_NoStop>:
 * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note        THIS IS THE FREERTOS VERSION! DO NOT Declare #define USE_FREERTOS if you wish to use the baremetal version!      
				students to fill!
 *****************************************************************************/
int32_t I2cReadDataWait_NoStop(I2C_Data *data, const TickType_t delay, const TickType_t xMaxBlockTime){
   16458:	b580      	push	{r7, lr}
   1645a:	b086      	sub	sp, #24
   1645c:	af00      	add	r7, sp, #0
   1645e:	60f8      	str	r0, [r7, #12]
   16460:	60b9      	str	r1, [r7, #8]
   16462:	607a      	str	r2, [r7, #4]
	int32_t error = ERROR_NONE;
   16464:	2300      	movs	r3, #0
   16466:	617b      	str	r3, [r7, #20]
	SemaphoreHandle_t semHandle = NULL;
   16468:	2300      	movs	r3, #0
   1646a:	613b      	str	r3, [r7, #16]
	

	//---0. Get Mutex
	//STUDENTS FILL
	error = 0;
   1646c:	2300      	movs	r3, #0
   1646e:	617b      	str	r3, [r7, #20]
	error = I2cGetMutex(xMaxBlockTime);
   16470:	687b      	ldr	r3, [r7, #4]
   16472:	0018      	movs	r0, r3
   16474:	4b38      	ldr	r3, [pc, #224]	; (16558 <I2cReadDataWait_NoStop+0x100>)
   16476:	4798      	blx	r3
   16478:	0003      	movs	r3, r0
   1647a:	617b      	str	r3, [r7, #20]
	if(ERROR_NONE != error) goto exit;
   1647c:	697b      	ldr	r3, [r7, #20]
   1647e:	2b00      	cmp	r3, #0
   16480:	d15b      	bne.n	1653a <I2cReadDataWait_NoStop+0xe2>
	//---1. Get Semaphore Handle
	error = I2cGetSemaphoreHandle(&semHandle);
   16482:	2310      	movs	r3, #16
   16484:	18fb      	adds	r3, r7, r3
   16486:	0018      	movs	r0, r3
   16488:	4b34      	ldr	r3, [pc, #208]	; (1655c <I2cReadDataWait_NoStop+0x104>)
   1648a:	4798      	blx	r3
   1648c:	0003      	movs	r3, r0
   1648e:	617b      	str	r3, [r7, #20]
	if(ERROR_NONE != error) goto exit;
   16490:	697b      	ldr	r3, [r7, #20]
   16492:	2b00      	cmp	r3, #0
   16494:	d153      	bne.n	1653e <I2cReadDataWait_NoStop+0xe6>
	//---2. Initiate sending data
	error = I2cWriteData_No_Stop(data);
   16496:	68fb      	ldr	r3, [r7, #12]
   16498:	0018      	movs	r0, r3
   1649a:	4b31      	ldr	r3, [pc, #196]	; (16560 <I2cReadDataWait_NoStop+0x108>)
   1649c:	4798      	blx	r3
   1649e:	0003      	movs	r3, r0
   164a0:	617b      	str	r3, [r7, #20]
	if (ERROR_NONE != error){
   164a2:	697b      	ldr	r3, [r7, #20]
   164a4:	2b00      	cmp	r3, #0
   164a6:	d14d      	bne.n	16544 <I2cReadDataWait_NoStop+0xec>
		goto exitError0;
	}
	//---3. Wait for binary semaphore to tell us that we are done!
	if( xSemaphoreTake( semHandle, xMaxBlockTime ) == pdTRUE ){
   164a8:	693b      	ldr	r3, [r7, #16]
   164aa:	687a      	ldr	r2, [r7, #4]
   164ac:	0011      	movs	r1, r2
   164ae:	0018      	movs	r0, r3
   164b0:	4b2c      	ldr	r3, [pc, #176]	; (16564 <I2cReadDataWait_NoStop+0x10c>)
   164b2:	4798      	blx	r3
   164b4:	0003      	movs	r3, r0
   164b6:	2b01      	cmp	r3, #1
   164b8:	d111      	bne.n	164de <I2cReadDataWait_NoStop+0x86>
		/* The transmission ended as expected. We now delay until the I2C sensor is finished */
		if(I2cGetTaskErrorStatus()){
   164ba:	4b2b      	ldr	r3, [pc, #172]	; (16568 <I2cReadDataWait_NoStop+0x110>)
   164bc:	4798      	blx	r3
   164be:	1e03      	subs	r3, r0, #0
   164c0:	d011      	beq.n	164e6 <I2cReadDataWait_NoStop+0x8e>
			I2cSetTaskErrorStatus(false);
   164c2:	2000      	movs	r0, #0
   164c4:	4b29      	ldr	r3, [pc, #164]	; (1656c <I2cReadDataWait_NoStop+0x114>)
   164c6:	4798      	blx	r3
			if(error != ERROR_NONE){
   164c8:	697b      	ldr	r3, [r7, #20]
   164ca:	2b00      	cmp	r3, #0
   164cc:	d003      	beq.n	164d6 <I2cReadDataWait_NoStop+0x7e>
				error = ERROR_I2C_HANG_RESET;
   164ce:	2321      	movs	r3, #33	; 0x21
   164d0:	425b      	negs	r3, r3
   164d2:	617b      	str	r3, [r7, #20]
				}else{
				error = ERROR_ABORTED;
			}
			goto exitError0;
   164d4:	e037      	b.n	16546 <I2cReadDataWait_NoStop+0xee>
				error = ERROR_ABORTED;
   164d6:	2303      	movs	r3, #3
   164d8:	425b      	negs	r3, r3
   164da:	617b      	str	r3, [r7, #20]
			goto exitError0;
   164dc:	e033      	b.n	16546 <I2cReadDataWait_NoStop+0xee>
		}
		}else{
		/* The call to ulTaskNotifyTake() timed out. */
		error = ERR_TIMEOUT;
   164de:	2303      	movs	r3, #3
   164e0:	425b      	negs	r3, r3
   164e2:	617b      	str	r3, [r7, #20]
		goto exitError0;
   164e4:	e02f      	b.n	16546 <I2cReadDataWait_NoStop+0xee>
	}
	//---6. Initiate Read data //TIP: SEE "I2cReadData", which is analogous to "I2cWriteData"
	error = I2cReadData(data);
   164e6:	68fb      	ldr	r3, [r7, #12]
   164e8:	0018      	movs	r0, r3
   164ea:	4b21      	ldr	r3, [pc, #132]	; (16570 <I2cReadDataWait_NoStop+0x118>)
   164ec:	4798      	blx	r3
   164ee:	0003      	movs	r3, r0
   164f0:	617b      	str	r3, [r7, #20]
	//---7. Wait for notification
	if( xSemaphoreTake( semHandle, xMaxBlockTime ) == pdTRUE ){
   164f2:	693b      	ldr	r3, [r7, #16]
   164f4:	687a      	ldr	r2, [r7, #4]
   164f6:	0011      	movs	r1, r2
   164f8:	0018      	movs	r0, r3
   164fa:	4b1a      	ldr	r3, [pc, #104]	; (16564 <I2cReadDataWait_NoStop+0x10c>)
   164fc:	4798      	blx	r3
   164fe:	0003      	movs	r3, r0
   16500:	2b01      	cmp	r3, #1
   16502:	d111      	bne.n	16528 <I2cReadDataWait_NoStop+0xd0>
		/* The transmission ended as expected. We now delay until the I2C sensor is finished */
		if(I2cGetTaskErrorStatus()){
   16504:	4b18      	ldr	r3, [pc, #96]	; (16568 <I2cReadDataWait_NoStop+0x110>)
   16506:	4798      	blx	r3
   16508:	1e03      	subs	r3, r0, #0
   1650a:	d011      	beq.n	16530 <I2cReadDataWait_NoStop+0xd8>
			I2cSetTaskErrorStatus(false);
   1650c:	2000      	movs	r0, #0
   1650e:	4b17      	ldr	r3, [pc, #92]	; (1656c <I2cReadDataWait_NoStop+0x114>)
   16510:	4798      	blx	r3
			if(error != ERROR_NONE){
   16512:	697b      	ldr	r3, [r7, #20]
   16514:	2b00      	cmp	r3, #0
   16516:	d003      	beq.n	16520 <I2cReadDataWait_NoStop+0xc8>
				error = ERROR_I2C_HANG_RESET;
   16518:	2321      	movs	r3, #33	; 0x21
   1651a:	425b      	negs	r3, r3
   1651c:	617b      	str	r3, [r7, #20]
				}else{
				error = ERROR_ABORTED;
			}
			goto exitError0;
   1651e:	e012      	b.n	16546 <I2cReadDataWait_NoStop+0xee>
				error = ERROR_ABORTED;
   16520:	2303      	movs	r3, #3
   16522:	425b      	negs	r3, r3
   16524:	617b      	str	r3, [r7, #20]
			goto exitError0;
   16526:	e00e      	b.n	16546 <I2cReadDataWait_NoStop+0xee>
		}
		}else{
		/* The call to ulTaskNotifyTake() timed out. */
		error = ERR_TIMEOUT;
   16528:	2303      	movs	r3, #3
   1652a:	425b      	negs	r3, r3
   1652c:	617b      	str	r3, [r7, #20]
		goto exitError0;
   1652e:	e00a      	b.n	16546 <I2cReadDataWait_NoStop+0xee>
	}	

	
	//---8. Release Mutex
	error = I2cFreeMutex();
   16530:	4b10      	ldr	r3, [pc, #64]	; (16574 <I2cReadDataWait_NoStop+0x11c>)
   16532:	4798      	blx	r3
   16534:	0003      	movs	r3, r0
   16536:	617b      	str	r3, [r7, #20]
   16538:	e002      	b.n	16540 <I2cReadDataWait_NoStop+0xe8>
	if(ERROR_NONE != error) goto exit;
   1653a:	46c0      	nop			; (mov r8, r8)
   1653c:	e000      	b.n	16540 <I2cReadDataWait_NoStop+0xe8>
	if(ERROR_NONE != error) goto exit;
   1653e:	46c0      	nop			; (mov r8, r8)
	
	exit:
	return error;
   16540:	697b      	ldr	r3, [r7, #20]
   16542:	e005      	b.n	16550 <I2cReadDataWait_NoStop+0xf8>
		goto exitError0;
   16544:	46c0      	nop			; (mov r8, r8)

	exitError0:
	error = I2cFreeMutex();
   16546:	4b0b      	ldr	r3, [pc, #44]	; (16574 <I2cReadDataWait_NoStop+0x11c>)
   16548:	4798      	blx	r3
   1654a:	0003      	movs	r3, r0
   1654c:	617b      	str	r3, [r7, #20]

	return error;
   1654e:	697b      	ldr	r3, [r7, #20]

	
}
   16550:	0018      	movs	r0, r3
   16552:	46bd      	mov	sp, r7
   16554:	b006      	add	sp, #24
   16556:	bd80      	pop	{r7, pc}
   16558:	000161d9 	.word	0x000161d9
   1655c:	00016211 	.word	0x00016211
   16560:	00016099 	.word	0x00016099
   16564:	0001b161 	.word	0x0001b161
   16568:	00016235 	.word	0x00016235
   1656c:	00016249 	.word	0x00016249
   16570:	0001611d 	.word	0x0001611d
   16574:	000161a1 	.word	0x000161a1

00016578 <VEML_Reset>:
* @return		STATUS_OK if ok
* @note
*****************************************************************************/

int32_t VEML_Reset(void)
{
   16578:	b580      	push	{r7, lr}
   1657a:	b082      	sub	sp, #8
   1657c:	af00      	add	r7, sp, #0
	int32_t error = ERROR_NONE;
   1657e:	2300      	movs	r3, #0
   16580:	607b      	str	r3, [r7, #4]
	//ALS Gain:1
	//Integration time: 100ms
	//Interrupt disable
	//ALS power on
	msgOutlightbuffer[0] = 0x00;
   16582:	4b21      	ldr	r3, [pc, #132]	; (16608 <VEML_Reset+0x90>)
   16584:	2200      	movs	r2, #0
   16586:	701a      	strb	r2, [r3, #0]
	msgOutlightbuffer[1] = 0x00;
   16588:	4b1f      	ldr	r3, [pc, #124]	; (16608 <VEML_Reset+0x90>)
   1658a:	2200      	movs	r2, #0
   1658c:	705a      	strb	r2, [r3, #1]
	error = platform_write(ALS_CONF, msgOutlightbuffer,VemlWriteByteLen);
   1658e:	4b1e      	ldr	r3, [pc, #120]	; (16608 <VEML_Reset+0x90>)
   16590:	2202      	movs	r2, #2
   16592:	0019      	movs	r1, r3
   16594:	2000      	movs	r0, #0
   16596:	4b1d      	ldr	r3, [pc, #116]	; (1660c <VEML_Reset+0x94>)
   16598:	4798      	blx	r3
   1659a:	0003      	movs	r3, r0
   1659c:	607b      	str	r3, [r7, #4]
	error = platform_write(ALS_WH, msgOutlightbuffer,VemlWriteByteLen);
   1659e:	4b1a      	ldr	r3, [pc, #104]	; (16608 <VEML_Reset+0x90>)
   165a0:	2202      	movs	r2, #2
   165a2:	0019      	movs	r1, r3
   165a4:	2001      	movs	r0, #1
   165a6:	4b19      	ldr	r3, [pc, #100]	; (1660c <VEML_Reset+0x94>)
   165a8:	4798      	blx	r3
   165aa:	0003      	movs	r3, r0
   165ac:	607b      	str	r3, [r7, #4]
	error = platform_write(ALS_WL, msgOutlightbuffer,VemlWriteByteLen);
   165ae:	4b16      	ldr	r3, [pc, #88]	; (16608 <VEML_Reset+0x90>)
   165b0:	2202      	movs	r2, #2
   165b2:	0019      	movs	r1, r3
   165b4:	2002      	movs	r0, #2
   165b6:	4b15      	ldr	r3, [pc, #84]	; (1660c <VEML_Reset+0x94>)
   165b8:	4798      	blx	r3
   165ba:	0003      	movs	r3, r0
   165bc:	607b      	str	r3, [r7, #4]
	error = platform_write(POWER_SAVING, msgOutlightbuffer,VemlWriteByteLen);
   165be:	4b12      	ldr	r3, [pc, #72]	; (16608 <VEML_Reset+0x90>)
   165c0:	2202      	movs	r2, #2
   165c2:	0019      	movs	r1, r3
   165c4:	2003      	movs	r0, #3
   165c6:	4b11      	ldr	r3, [pc, #68]	; (1660c <VEML_Reset+0x94>)
   165c8:	4798      	blx	r3
   165ca:	0003      	movs	r3, r0
   165cc:	607b      	str	r3, [r7, #4]
	error = platform_write(ALS, msgOutlightbuffer,VemlWriteByteLen);
   165ce:	4b0e      	ldr	r3, [pc, #56]	; (16608 <VEML_Reset+0x90>)
   165d0:	2202      	movs	r2, #2
   165d2:	0019      	movs	r1, r3
   165d4:	2004      	movs	r0, #4
   165d6:	4b0d      	ldr	r3, [pc, #52]	; (1660c <VEML_Reset+0x94>)
   165d8:	4798      	blx	r3
   165da:	0003      	movs	r3, r0
   165dc:	607b      	str	r3, [r7, #4]
	error = platform_write(WHITE, msgOutlightbuffer,VemlWriteByteLen);
   165de:	4b0a      	ldr	r3, [pc, #40]	; (16608 <VEML_Reset+0x90>)
   165e0:	2202      	movs	r2, #2
   165e2:	0019      	movs	r1, r3
   165e4:	2005      	movs	r0, #5
   165e6:	4b09      	ldr	r3, [pc, #36]	; (1660c <VEML_Reset+0x94>)
   165e8:	4798      	blx	r3
   165ea:	0003      	movs	r3, r0
   165ec:	607b      	str	r3, [r7, #4]
	error = platform_write(ALS_INT, msgOutlightbuffer,VemlWriteByteLen);
   165ee:	4b06      	ldr	r3, [pc, #24]	; (16608 <VEML_Reset+0x90>)
   165f0:	2202      	movs	r2, #2
   165f2:	0019      	movs	r1, r3
   165f4:	2006      	movs	r0, #6
   165f6:	4b05      	ldr	r3, [pc, #20]	; (1660c <VEML_Reset+0x94>)
   165f8:	4798      	blx	r3
   165fa:	0003      	movs	r3, r0
   165fc:	607b      	str	r3, [r7, #4]
	return error;
   165fe:	687b      	ldr	r3, [r7, #4]
}
   16600:	0018      	movs	r0, r3
   16602:	46bd      	mov	sp, r7
   16604:	b002      	add	sp, #8
   16606:	bd80      	pop	{r7, pc}
   16608:	200043ec 	.word	0x200043ec
   1660c:	000166c1 	.word	0x000166c1

00016610 <VEML_Power_On>:
* @return		STATUS_OK if ok
* @note
*****************************************************************************/

int32_t VEML_Power_On(void)
{
   16610:	b580      	push	{r7, lr}
   16612:	b082      	sub	sp, #8
   16614:	af00      	add	r7, sp, #0
	int32_t error = ERROR_NONE;
   16616:	2300      	movs	r3, #0
   16618:	607b      	str	r3, [r7, #4]
	//ALS Gain:1
	//Integration time: 100ms
	//Interrupt disable
	//ALS power on
	msgOutlightbuffer[0] = 0x00;
   1661a:	4b09      	ldr	r3, [pc, #36]	; (16640 <VEML_Power_On+0x30>)
   1661c:	2200      	movs	r2, #0
   1661e:	701a      	strb	r2, [r3, #0]
	msgOutlightbuffer[1] = 0x08;
   16620:	4b07      	ldr	r3, [pc, #28]	; (16640 <VEML_Power_On+0x30>)
   16622:	2208      	movs	r2, #8
   16624:	705a      	strb	r2, [r3, #1]
	error = platform_write(ALS_CONF, msgOutlightbuffer,VemlWriteByteLen);
   16626:	4b06      	ldr	r3, [pc, #24]	; (16640 <VEML_Power_On+0x30>)
   16628:	2202      	movs	r2, #2
   1662a:	0019      	movs	r1, r3
   1662c:	2000      	movs	r0, #0
   1662e:	4b05      	ldr	r3, [pc, #20]	; (16644 <VEML_Power_On+0x34>)
   16630:	4798      	blx	r3
   16632:	0003      	movs	r3, r0
   16634:	607b      	str	r3, [r7, #4]
	return error;
   16636:	687b      	ldr	r3, [r7, #4]
}
   16638:	0018      	movs	r0, r3
   1663a:	46bd      	mov	sp, r7
   1663c:	b002      	add	sp, #8
   1663e:	bd80      	pop	{r7, pc}
   16640:	200043ec 	.word	0x200043ec
   16644:	000166c1 	.word	0x000166c1

00016648 <VEML_Power_Off>:
* @return		STATUS_OK if ok
* @note
*****************************************************************************/

int32_t VEML_Power_Off(void)
{
   16648:	b580      	push	{r7, lr}
   1664a:	b082      	sub	sp, #8
   1664c:	af00      	add	r7, sp, #0
	int32_t error = ERROR_NONE;
   1664e:	2300      	movs	r3, #0
   16650:	607b      	str	r3, [r7, #4]
	//ALS Gain:1
	//Integration time: 100ms
	//Interrupt disable
	//ALS power on
	msgOutlightbuffer[0] = 0x01;
   16652:	4b09      	ldr	r3, [pc, #36]	; (16678 <VEML_Power_Off+0x30>)
   16654:	2201      	movs	r2, #1
   16656:	701a      	strb	r2, [r3, #0]
	msgOutlightbuffer[1] = 0x00;
   16658:	4b07      	ldr	r3, [pc, #28]	; (16678 <VEML_Power_Off+0x30>)
   1665a:	2200      	movs	r2, #0
   1665c:	705a      	strb	r2, [r3, #1]
	error = platform_write(ALS_CONF, msgOutlightbuffer,VemlWriteByteLen);
   1665e:	4b06      	ldr	r3, [pc, #24]	; (16678 <VEML_Power_Off+0x30>)
   16660:	2202      	movs	r2, #2
   16662:	0019      	movs	r1, r3
   16664:	2000      	movs	r0, #0
   16666:	4b05      	ldr	r3, [pc, #20]	; (1667c <VEML_Power_Off+0x34>)
   16668:	4798      	blx	r3
   1666a:	0003      	movs	r3, r0
   1666c:	607b      	str	r3, [r7, #4]
	return error;
   1666e:	687b      	ldr	r3, [r7, #4]
}
   16670:	0018      	movs	r0, r3
   16672:	46bd      	mov	sp, r7
   16674:	b002      	add	sp, #8
   16676:	bd80      	pop	{r7, pc}
   16678:	200043ec 	.word	0x200043ec
   1667c:	000166c1 	.word	0x000166c1

00016680 <VEML_ReadALSData>:
* @return		STATUS_OK if ok
* @note
*****************************************************************************/

int32_t VEML_ReadALSData(uint32_t * readdata)
{
   16680:	b580      	push	{r7, lr}
   16682:	b084      	sub	sp, #16
   16684:	af00      	add	r7, sp, #0
   16686:	6078      	str	r0, [r7, #4]
	int32_t error = ERROR_NONE;
   16688:	2300      	movs	r3, #0
   1668a:	60fb      	str	r3, [r7, #12]
	// Disable power_saving;
	error = platform_read(ALS, msgInlightbuffer,VemlReadByteLen);
   1668c:	4b0a      	ldr	r3, [pc, #40]	; (166b8 <VEML_ReadALSData+0x38>)
   1668e:	2202      	movs	r2, #2
   16690:	0019      	movs	r1, r3
   16692:	2004      	movs	r0, #4
   16694:	4b09      	ldr	r3, [pc, #36]	; (166bc <VEML_ReadALSData+0x3c>)
   16696:	4798      	blx	r3
   16698:	0003      	movs	r3, r0
   1669a:	60fb      	str	r3, [r7, #12]
	*readdata = (uint32_t)msgInlightbuffer[0] | ((uint32_t)msgInlightbuffer[1] <<8);
   1669c:	4b06      	ldr	r3, [pc, #24]	; (166b8 <VEML_ReadALSData+0x38>)
   1669e:	781b      	ldrb	r3, [r3, #0]
   166a0:	001a      	movs	r2, r3
   166a2:	4b05      	ldr	r3, [pc, #20]	; (166b8 <VEML_ReadALSData+0x38>)
   166a4:	785b      	ldrb	r3, [r3, #1]
   166a6:	021b      	lsls	r3, r3, #8
   166a8:	431a      	orrs	r2, r3
   166aa:	687b      	ldr	r3, [r7, #4]
   166ac:	601a      	str	r2, [r3, #0]
	return error;
   166ae:	68fb      	ldr	r3, [r7, #12]
}
   166b0:	0018      	movs	r0, r3
   166b2:	46bd      	mov	sp, r7
   166b4:	b004      	add	sp, #16
   166b6:	bd80      	pop	{r7, pc}
   166b8:	200043dc 	.word	0x200043dc
   166bc:	00016735 	.word	0x00016735

000166c0 <platform_write>:
* @return		STATUS_OK if ok
* @note         
*****************************************************************************/

static int32_t platform_write(uint8_t reg, uint8_t *bufp,uint16_t len)
{
   166c0:	b580      	push	{r7, lr}
   166c2:	b084      	sub	sp, #16
   166c4:	af00      	add	r7, sp, #0
   166c6:	6039      	str	r1, [r7, #0]
   166c8:	0011      	movs	r1, r2
   166ca:	1dfb      	adds	r3, r7, #7
   166cc:	1c02      	adds	r2, r0, #0
   166ce:	701a      	strb	r2, [r3, #0]
   166d0:	1d3b      	adds	r3, r7, #4
   166d2:	1c0a      	adds	r2, r1, #0
   166d4:	801a      	strh	r2, [r3, #0]
	int32_t error = ERROR_NONE;
   166d6:	2300      	movs	r3, #0
   166d8:	60fb      	str	r3, [r7, #12]
	light_data.address = VEML6030_I2C_ADDR_L;
   166da:	4b11      	ldr	r3, [pc, #68]	; (16720 <platform_write+0x60>)
   166dc:	2210      	movs	r2, #16
   166de:	701a      	strb	r2, [r3, #0]
	msgOutlight[0] = reg;
   166e0:	4b10      	ldr	r3, [pc, #64]	; (16724 <platform_write+0x64>)
   166e2:	1dfa      	adds	r2, r7, #7
   166e4:	7812      	ldrb	r2, [r2, #0]
   166e6:	701a      	strb	r2, [r3, #0]
	memcpy (msgOutlight+1, bufp, len);
   166e8:	480f      	ldr	r0, [pc, #60]	; (16728 <platform_write+0x68>)
   166ea:	1d3b      	adds	r3, r7, #4
   166ec:	881a      	ldrh	r2, [r3, #0]
   166ee:	683b      	ldr	r3, [r7, #0]
   166f0:	0019      	movs	r1, r3
   166f2:	4b0e      	ldr	r3, [pc, #56]	; (1672c <platform_write+0x6c>)
   166f4:	4798      	blx	r3
	light_data.lenOut = len +1;
   166f6:	1d3b      	adds	r3, r7, #4
   166f8:	881b      	ldrh	r3, [r3, #0]
   166fa:	3301      	adds	r3, #1
   166fc:	b29a      	uxth	r2, r3
   166fe:	4b08      	ldr	r3, [pc, #32]	; (16720 <platform_write+0x60>)
   16700:	81da      	strh	r2, [r3, #14]
	light_data.msgOut = &msgOutlight;
   16702:	4b07      	ldr	r3, [pc, #28]	; (16720 <platform_write+0x60>)
   16704:	4a07      	ldr	r2, [pc, #28]	; (16724 <platform_write+0x64>)
   16706:	605a      	str	r2, [r3, #4]
	error = I2cWriteDataWait(&light_data,100);
   16708:	4b05      	ldr	r3, [pc, #20]	; (16720 <platform_write+0x60>)
   1670a:	2164      	movs	r1, #100	; 0x64
   1670c:	0018      	movs	r0, r3
   1670e:	4b08      	ldr	r3, [pc, #32]	; (16730 <platform_write+0x70>)
   16710:	4798      	blx	r3
   16712:	0003      	movs	r3, r0
   16714:	60fb      	str	r3, [r7, #12]
	return error;
   16716:	68fb      	ldr	r3, [r7, #12]
}
   16718:	0018      	movs	r0, r3
   1671a:	46bd      	mov	sp, r7
   1671c:	b004      	add	sp, #16
   1671e:	bd80      	pop	{r7, pc}
   16720:	200043cc 	.word	0x200043cc
   16724:	200043e0 	.word	0x200043e0
   16728:	200043e1 	.word	0x200043e1
   1672c:	0003404d 	.word	0x0003404d
   16730:	00016269 	.word	0x00016269

00016734 <platform_read>:
* @param[in]	uint16_t len: number of bytes to send (the register address is not counted)
* @return		STATUS_OK if ok
* @note
*****************************************************************************/
static  int32_t platform_read(uint8_t reg, uint8_t *bufp, uint16_t len)
{
   16734:	b580      	push	{r7, lr}
   16736:	b084      	sub	sp, #16
   16738:	af00      	add	r7, sp, #0
   1673a:	6039      	str	r1, [r7, #0]
   1673c:	0011      	movs	r1, r2
   1673e:	1dfb      	adds	r3, r7, #7
   16740:	1c02      	adds	r2, r0, #0
   16742:	701a      	strb	r2, [r3, #0]
   16744:	1d3b      	adds	r3, r7, #4
   16746:	1c0a      	adds	r2, r1, #0
   16748:	801a      	strh	r2, [r3, #0]
	int32_t error = ERROR_NONE;
   1674a:	2300      	movs	r3, #0
   1674c:	60fb      	str	r3, [r7, #12]
	light_data.address = VEML6030_I2C_ADDR_L;
   1674e:	4b12      	ldr	r3, [pc, #72]	; (16798 <platform_read+0x64>)
   16750:	2210      	movs	r2, #16
   16752:	701a      	strb	r2, [r3, #0]
	msgOutlight[0] = reg;
   16754:	4b11      	ldr	r3, [pc, #68]	; (1679c <platform_read+0x68>)
   16756:	1dfa      	adds	r2, r7, #7
   16758:	7812      	ldrb	r2, [r2, #0]
   1675a:	701a      	strb	r2, [r3, #0]
	msgOutlight[1] = 0;
   1675c:	4b0f      	ldr	r3, [pc, #60]	; (1679c <platform_read+0x68>)
   1675e:	2200      	movs	r2, #0
   16760:	705a      	strb	r2, [r3, #1]
	light_data.lenOut = 1;
   16762:	4b0d      	ldr	r3, [pc, #52]	; (16798 <platform_read+0x64>)
   16764:	2201      	movs	r2, #1
   16766:	81da      	strh	r2, [r3, #14]
	light_data.msgOut = &msgOutlight;
   16768:	4b0b      	ldr	r3, [pc, #44]	; (16798 <platform_read+0x64>)
   1676a:	4a0c      	ldr	r2, [pc, #48]	; (1679c <platform_read+0x68>)
   1676c:	605a      	str	r2, [r3, #4]
	light_data.lenIn = len;
   1676e:	4b0a      	ldr	r3, [pc, #40]	; (16798 <platform_read+0x64>)
   16770:	1d3a      	adds	r2, r7, #4
   16772:	8812      	ldrh	r2, [r2, #0]
   16774:	819a      	strh	r2, [r3, #12]
	light_data.msgIn = bufp;
   16776:	4b08      	ldr	r3, [pc, #32]	; (16798 <platform_read+0x64>)
   16778:	683a      	ldr	r2, [r7, #0]
   1677a:	609a      	str	r2, [r3, #8]
	error = I2cReadDataWait_NoStop(&light_data, 5, 100);
   1677c:	4b06      	ldr	r3, [pc, #24]	; (16798 <platform_read+0x64>)
   1677e:	2264      	movs	r2, #100	; 0x64
   16780:	2105      	movs	r1, #5
   16782:	0018      	movs	r0, r3
   16784:	4b06      	ldr	r3, [pc, #24]	; (167a0 <platform_read+0x6c>)
   16786:	4798      	blx	r3
   16788:	0003      	movs	r3, r0
   1678a:	60fb      	str	r3, [r7, #12]
	return error;
   1678c:	68fb      	ldr	r3, [r7, #12]
   1678e:	0018      	movs	r0, r3
   16790:	46bd      	mov	sp, r7
   16792:	b004      	add	sp, #16
   16794:	bd80      	pop	{r7, pc}
   16796:	46c0      	nop			; (mov r8, r8)
   16798:	200043cc 	.word	0x200043cc
   1679c:	200043e0 	.word	0x200043e0
   167a0:	00016459 	.word	0x00016459

000167a4 <InitializeOLEDdriver>:
                				
* @return		Returns 0 if no errors.
* @note         
*****************************************************************************/
int InitializeOLEDdriver(void)
{
   167a4:	b580      	push	{r7, lr}
   167a6:	b082      	sub	sp, #8
   167a8:	af00      	add	r7, sp, #0
	// default 5x7 font
	MicroOLEDsetFontType(0);
   167aa:	2000      	movs	r0, #0
   167ac:	4b3b      	ldr	r3, [pc, #236]	; (1689c <InitializeOLEDdriver+0xf8>)
   167ae:	4798      	blx	r3
	MicroOLEDsetColor(WHITE);
   167b0:	2001      	movs	r0, #1
   167b2:	4b3b      	ldr	r3, [pc, #236]	; (168a0 <InitializeOLEDdriver+0xfc>)
   167b4:	4798      	blx	r3
	MicroOLEDsetDrawMode(NORM);
   167b6:	2000      	movs	r0, #0
   167b8:	4b3a      	ldr	r3, [pc, #232]	; (168a4 <InitializeOLEDdriver+0x100>)
   167ba:	4798      	blx	r3
	MicroOLEDsetCursor(0, 0);
   167bc:	2100      	movs	r1, #0
   167be:	2000      	movs	r0, #0
   167c0:	4b39      	ldr	r3, [pc, #228]	; (168a8 <InitializeOLEDdriver+0x104>)
   167c2:	4798      	blx	r3

	// Display Init sequence for 64x48 OLED module
	int error = MicroOLEDcommand(DISPLAYOFF); // 0xAE
   167c4:	20ae      	movs	r0, #174	; 0xae
   167c6:	4b39      	ldr	r3, [pc, #228]	; (168ac <InitializeOLEDdriver+0x108>)
   167c8:	4798      	blx	r3
   167ca:	0003      	movs	r3, r0
   167cc:	607b      	str	r3, [r7, #4]
	if(ERROR_NONE != error)
   167ce:	687b      	ldr	r3, [r7, #4]
   167d0:	2b00      	cmp	r3, #0
   167d2:	d004      	beq.n	167de <InitializeOLEDdriver+0x3a>
	{
		SerialConsoleWriteString("Error initializing OLED!\r\n");
   167d4:	4b36      	ldr	r3, [pc, #216]	; (168b0 <InitializeOLEDdriver+0x10c>)
   167d6:	0018      	movs	r0, r3
   167d8:	4b36      	ldr	r3, [pc, #216]	; (168b4 <InitializeOLEDdriver+0x110>)
   167da:	4798      	blx	r3
   167dc:	e003      	b.n	167e6 <InitializeOLEDdriver+0x42>
	}
	else
	{
		SerialConsoleWriteString("OLED Turned off!\r\n");
   167de:	4b36      	ldr	r3, [pc, #216]	; (168b8 <InitializeOLEDdriver+0x114>)
   167e0:	0018      	movs	r0, r3
   167e2:	4b34      	ldr	r3, [pc, #208]	; (168b4 <InitializeOLEDdriver+0x110>)
   167e4:	4798      	blx	r3
	}

	error = MicroOLEDcommand(SETDISPLAYCLOCKDIV); // 0xD5
   167e6:	20d5      	movs	r0, #213	; 0xd5
   167e8:	4b30      	ldr	r3, [pc, #192]	; (168ac <InitializeOLEDdriver+0x108>)
   167ea:	4798      	blx	r3
   167ec:	0003      	movs	r3, r0
   167ee:	607b      	str	r3, [r7, #4]
	if(ERROR_NONE != error)
   167f0:	687b      	ldr	r3, [r7, #4]
   167f2:	2b00      	cmp	r3, #0
   167f4:	d004      	beq.n	16800 <InitializeOLEDdriver+0x5c>
	{
		SerialConsoleWriteString("Error initializing OLED clock!\r\n");
   167f6:	4b31      	ldr	r3, [pc, #196]	; (168bc <InitializeOLEDdriver+0x118>)
   167f8:	0018      	movs	r0, r3
   167fa:	4b2e      	ldr	r3, [pc, #184]	; (168b4 <InitializeOLEDdriver+0x110>)
   167fc:	4798      	blx	r3
   167fe:	e003      	b.n	16808 <InitializeOLEDdriver+0x64>
	}
	else
	{
		SerialConsoleWriteString("OLED clock set!\r\n");
   16800:	4b2f      	ldr	r3, [pc, #188]	; (168c0 <InitializeOLEDdriver+0x11c>)
   16802:	0018      	movs	r0, r3
   16804:	4b2b      	ldr	r3, [pc, #172]	; (168b4 <InitializeOLEDdriver+0x110>)
   16806:	4798      	blx	r3
	}
	MicroOLEDcommand(0x80);				 // the suggested ratio 0x80
   16808:	2080      	movs	r0, #128	; 0x80
   1680a:	4b28      	ldr	r3, [pc, #160]	; (168ac <InitializeOLEDdriver+0x108>)
   1680c:	4798      	blx	r3

	MicroOLEDcommand(SETMULTIPLEX); // 0xA8
   1680e:	20a8      	movs	r0, #168	; 0xa8
   16810:	4b26      	ldr	r3, [pc, #152]	; (168ac <InitializeOLEDdriver+0x108>)
   16812:	4798      	blx	r3
	MicroOLEDcommand(0x2F);
   16814:	202f      	movs	r0, #47	; 0x2f
   16816:	4b25      	ldr	r3, [pc, #148]	; (168ac <InitializeOLEDdriver+0x108>)
   16818:	4798      	blx	r3

	MicroOLEDcommand(SETDISPLAYOFFSET); // 0xD3
   1681a:	20d3      	movs	r0, #211	; 0xd3
   1681c:	4b23      	ldr	r3, [pc, #140]	; (168ac <InitializeOLEDdriver+0x108>)
   1681e:	4798      	blx	r3
	MicroOLEDcommand(0x0);			   // no offset
   16820:	2000      	movs	r0, #0
   16822:	4b22      	ldr	r3, [pc, #136]	; (168ac <InitializeOLEDdriver+0x108>)
   16824:	4798      	blx	r3

	MicroOLEDcommand(SETSTARTLINE | 0x0); // line #0
   16826:	2040      	movs	r0, #64	; 0x40
   16828:	4b20      	ldr	r3, [pc, #128]	; (168ac <InitializeOLEDdriver+0x108>)
   1682a:	4798      	blx	r3

	MicroOLEDcommand(CHARGEPUMP); // enable charge pump
   1682c:	208d      	movs	r0, #141	; 0x8d
   1682e:	4b1f      	ldr	r3, [pc, #124]	; (168ac <InitializeOLEDdriver+0x108>)
   16830:	4798      	blx	r3
	MicroOLEDcommand(0x14);
   16832:	2014      	movs	r0, #20
   16834:	4b1d      	ldr	r3, [pc, #116]	; (168ac <InitializeOLEDdriver+0x108>)
   16836:	4798      	blx	r3

	MicroOLEDcommand(NORMALDISPLAY);		 // 0xA6
   16838:	20a6      	movs	r0, #166	; 0xa6
   1683a:	4b1c      	ldr	r3, [pc, #112]	; (168ac <InitializeOLEDdriver+0x108>)
   1683c:	4798      	blx	r3
	MicroOLEDcommand(DISPLAYALLONRESUME); // 0xA4
   1683e:	20a4      	movs	r0, #164	; 0xa4
   16840:	4b1a      	ldr	r3, [pc, #104]	; (168ac <InitializeOLEDdriver+0x108>)
   16842:	4798      	blx	r3

	MicroOLEDcommand(SEGREMAP | 0x1);
   16844:	20a1      	movs	r0, #161	; 0xa1
   16846:	4b19      	ldr	r3, [pc, #100]	; (168ac <InitializeOLEDdriver+0x108>)
   16848:	4798      	blx	r3
	MicroOLEDcommand(COMSCANDEC);
   1684a:	20c8      	movs	r0, #200	; 0xc8
   1684c:	4b17      	ldr	r3, [pc, #92]	; (168ac <InitializeOLEDdriver+0x108>)
   1684e:	4798      	blx	r3

	MicroOLEDcommand(SETCOMPINS); // 0xDA
   16850:	20da      	movs	r0, #218	; 0xda
   16852:	4b16      	ldr	r3, [pc, #88]	; (168ac <InitializeOLEDdriver+0x108>)
   16854:	4798      	blx	r3
	MicroOLEDcommand(0x12);
   16856:	2012      	movs	r0, #18
   16858:	4b14      	ldr	r3, [pc, #80]	; (168ac <InitializeOLEDdriver+0x108>)
   1685a:	4798      	blx	r3

	MicroOLEDcommand(SETCONTRAST); // 0x81
   1685c:	2081      	movs	r0, #129	; 0x81
   1685e:	4b13      	ldr	r3, [pc, #76]	; (168ac <InitializeOLEDdriver+0x108>)
   16860:	4798      	blx	r3
	MicroOLEDcommand(0x8F);
   16862:	208f      	movs	r0, #143	; 0x8f
   16864:	4b11      	ldr	r3, [pc, #68]	; (168ac <InitializeOLEDdriver+0x108>)
   16866:	4798      	blx	r3

	MicroOLEDcommand(SETPRECHARGE); // 0xd9
   16868:	20d9      	movs	r0, #217	; 0xd9
   1686a:	4b10      	ldr	r3, [pc, #64]	; (168ac <InitializeOLEDdriver+0x108>)
   1686c:	4798      	blx	r3
	MicroOLEDcommand(0xF1);
   1686e:	20f1      	movs	r0, #241	; 0xf1
   16870:	4b0e      	ldr	r3, [pc, #56]	; (168ac <InitializeOLEDdriver+0x108>)
   16872:	4798      	blx	r3

	MicroOLEDcommand(SETVCOMDESELECT); // 0xDB
   16874:	20db      	movs	r0, #219	; 0xdb
   16876:	4b0d      	ldr	r3, [pc, #52]	; (168ac <InitializeOLEDdriver+0x108>)
   16878:	4798      	blx	r3
	MicroOLEDcommand(0x40);
   1687a:	2040      	movs	r0, #64	; 0x40
   1687c:	4b0b      	ldr	r3, [pc, #44]	; (168ac <InitializeOLEDdriver+0x108>)
   1687e:	4798      	blx	r3

	MicroOLEDcommand(DISPLAYON); //--turn on oled panel
   16880:	20af      	movs	r0, #175	; 0xaf
   16882:	4b0a      	ldr	r3, [pc, #40]	; (168ac <InitializeOLEDdriver+0x108>)
   16884:	4798      	blx	r3
	error = MicroOLEDclear(!ALL);			// Erase hardware memory inside the OLED controller to avoid random data in memory.
   16886:	2000      	movs	r0, #0
   16888:	4b0e      	ldr	r3, [pc, #56]	; (168c4 <InitializeOLEDdriver+0x120>)
   1688a:	4798      	blx	r3
   1688c:	0003      	movs	r3, r0
   1688e:	607b      	str	r3, [r7, #4]
	return error;
   16890:	687b      	ldr	r3, [r7, #4]
}
   16892:	0018      	movs	r0, r3
   16894:	46bd      	mov	sp, r7
   16896:	b002      	add	sp, #8
   16898:	bd80      	pop	{r7, pc}
   1689a:	46c0      	nop			; (mov r8, r8)
   1689c:	00016ba5 	.word	0x00016ba5
   168a0:	00016c81 	.word	0x00016c81
   168a4:	00016b51 	.word	0x00016b51
   168a8:	00016b71 	.word	0x00016b71
   168ac:	000168c9 	.word	0x000168c9
   168b0:	000375c0 	.word	0x000375c0
   168b4:	0001db09 	.word	0x0001db09
   168b8:	000375dc 	.word	0x000375dc
   168bc:	000375f0 	.word	0x000375f0
   168c0:	00037614 	.word	0x00037614
   168c4:	00016979 	.word	0x00016979

000168c8 <MicroOLEDcommand>:
	For I2C  we use the write functions
	defined in hardware.cpp to send the data.
*/

int MicroOLEDcommand(uint8_t c)
{
   168c8:	b580      	push	{r7, lr}
   168ca:	b084      	sub	sp, #16
   168cc:	af00      	add	r7, sp, #0
   168ce:	0002      	movs	r2, r0
   168d0:	1dfb      	adds	r3, r7, #7
   168d2:	701a      	strb	r2, [r3, #0]
	// Write to our address, make sure it knows we're sending a
	// command:
	uint8_t msg[2]={I2C_COMMAND,c};
   168d4:	2308      	movs	r3, #8
   168d6:	18fb      	adds	r3, r7, r3
   168d8:	2200      	movs	r2, #0
   168da:	701a      	strb	r2, [r3, #0]
   168dc:	2308      	movs	r3, #8
   168de:	18fb      	adds	r3, r7, r3
   168e0:	1dfa      	adds	r2, r7, #7
   168e2:	7812      	ldrb	r2, [r2, #0]
   168e4:	705a      	strb	r2, [r3, #1]
	OLEDData.address = OLED_I2C_ADDRESS_SA0_1;
   168e6:	4b0c      	ldr	r3, [pc, #48]	; (16918 <MicroOLEDcommand+0x50>)
   168e8:	223d      	movs	r2, #61	; 0x3d
   168ea:	701a      	strb	r2, [r3, #0]
	OLEDData.msgOut = &msg;
   168ec:	4b0a      	ldr	r3, [pc, #40]	; (16918 <MicroOLEDcommand+0x50>)
   168ee:	2208      	movs	r2, #8
   168f0:	18ba      	adds	r2, r7, r2
   168f2:	605a      	str	r2, [r3, #4]
	OLEDData.lenOut = sizeof(msg);
   168f4:	4b08      	ldr	r3, [pc, #32]	; (16918 <MicroOLEDcommand+0x50>)
   168f6:	2202      	movs	r2, #2
   168f8:	81da      	strh	r2, [r3, #14]
	OLEDData.lenIn = 0;
   168fa:	4b07      	ldr	r3, [pc, #28]	; (16918 <MicroOLEDcommand+0x50>)
   168fc:	2200      	movs	r2, #0
   168fe:	819a      	strh	r2, [r3, #12]
	int error = I2cWriteDataWait(&OLEDData, 100);
   16900:	4b05      	ldr	r3, [pc, #20]	; (16918 <MicroOLEDcommand+0x50>)
   16902:	2164      	movs	r1, #100	; 0x64
   16904:	0018      	movs	r0, r3
   16906:	4b05      	ldr	r3, [pc, #20]	; (1691c <MicroOLEDcommand+0x54>)
   16908:	4798      	blx	r3
   1690a:	0003      	movs	r3, r0
   1690c:	60fb      	str	r3, [r7, #12]
	return error;
   1690e:	68fb      	ldr	r3, [r7, #12]

}
   16910:	0018      	movs	r0, r3
   16912:	46bd      	mov	sp, r7
   16914:	b004      	add	sp, #16
   16916:	bd80      	pop	{r7, pc}
   16918:	200043f0 	.word	0x200043f0
   1691c:	00016269 	.word	0x00016269

00016920 <MicroOLEDdata>:
	For SPI we set the DC and CS pins here, and call spiTransfer(byte)
	to send the data. For I2C and Parallel we use the write functions
	defined in hardware.cpp to send the data.
*/
int MicroOLEDdata(uint8_t c)
{
   16920:	b580      	push	{r7, lr}
   16922:	b084      	sub	sp, #16
   16924:	af00      	add	r7, sp, #0
   16926:	0002      	movs	r2, r0
   16928:	1dfb      	adds	r3, r7, #7
   1692a:	701a      	strb	r2, [r3, #0]
	uint8_t msg[2]={I2C_DATA,c};
   1692c:	2308      	movs	r3, #8
   1692e:	18fb      	adds	r3, r7, r3
   16930:	2240      	movs	r2, #64	; 0x40
   16932:	701a      	strb	r2, [r3, #0]
   16934:	2308      	movs	r3, #8
   16936:	18fb      	adds	r3, r7, r3
   16938:	1dfa      	adds	r2, r7, #7
   1693a:	7812      	ldrb	r2, [r2, #0]
   1693c:	705a      	strb	r2, [r3, #1]
	OLEDData.address = OLED_I2C_ADDRESS_SA0_1;
   1693e:	4b0c      	ldr	r3, [pc, #48]	; (16970 <MicroOLEDdata+0x50>)
   16940:	223d      	movs	r2, #61	; 0x3d
   16942:	701a      	strb	r2, [r3, #0]
	OLEDData.msgOut = &msg;
   16944:	4b0a      	ldr	r3, [pc, #40]	; (16970 <MicroOLEDdata+0x50>)
   16946:	2208      	movs	r2, #8
   16948:	18ba      	adds	r2, r7, r2
   1694a:	605a      	str	r2, [r3, #4]
	OLEDData.lenOut = sizeof(msg);
   1694c:	4b08      	ldr	r3, [pc, #32]	; (16970 <MicroOLEDdata+0x50>)
   1694e:	2202      	movs	r2, #2
   16950:	81da      	strh	r2, [r3, #14]
	OLEDData.lenIn = 0;
   16952:	4b07      	ldr	r3, [pc, #28]	; (16970 <MicroOLEDdata+0x50>)
   16954:	2200      	movs	r2, #0
   16956:	819a      	strh	r2, [r3, #12]
	int error = I2cWriteDataWait(&OLEDData, 100);
   16958:	4b05      	ldr	r3, [pc, #20]	; (16970 <MicroOLEDdata+0x50>)
   1695a:	2164      	movs	r1, #100	; 0x64
   1695c:	0018      	movs	r0, r3
   1695e:	4b05      	ldr	r3, [pc, #20]	; (16974 <MicroOLEDdata+0x54>)
   16960:	4798      	blx	r3
   16962:	0003      	movs	r3, r0
   16964:	60fb      	str	r3, [r7, #12]
	return error;
   16966:	68fb      	ldr	r3, [r7, #12]
	
}
   16968:	0018      	movs	r0, r3
   1696a:	46bd      	mov	sp, r7
   1696c:	b004      	add	sp, #16
   1696e:	bd80      	pop	{r7, pc}
   16970:	200043f0 	.word	0x200043f0
   16974:	00016269 	.word	0x00016269

00016978 <MicroOLEDclear>:

/** \brief Clear screen buffer or SSD1306's memory.
    To clear GDRAM inside the LCD controller, pass in the variable mode = ALL and to clear screen page buffer pass in the variable mode = PAGE.
*/
int MicroOLEDclear(uint8_t mode)
{
   16978:	b580      	push	{r7, lr}
   1697a:	b0a6      	sub	sp, #152	; 0x98
   1697c:	af00      	add	r7, sp, #0
   1697e:	0002      	movs	r2, r0
   16980:	1dfb      	adds	r3, r7, #7
   16982:	701a      	strb	r2, [r3, #0]
	//	uint8_t page=6, col=0x40;
int error = NULL;
   16984:	2300      	movs	r3, #0
   16986:	2294      	movs	r2, #148	; 0x94
   16988:	18ba      	adds	r2, r7, r2
   1698a:	6013      	str	r3, [r2, #0]
	if (mode == ALL)
   1698c:	1dfb      	adds	r3, r7, #7
   1698e:	781b      	ldrb	r3, [r3, #0]
   16990:	2b01      	cmp	r3, #1
   16992:	d143      	bne.n	16a1c <MicroOLEDclear+0xa4>
	{
		for (int i = 0; i < 8; i++)
   16994:	2300      	movs	r3, #0
   16996:	2290      	movs	r2, #144	; 0x90
   16998:	18ba      	adds	r2, r7, r2
   1699a:	6013      	str	r3, [r2, #0]
   1699c:	e038      	b.n	16a10 <MicroOLEDclear+0x98>
		{
			MicroOLEDsetPageAddress(i);
   1699e:	2390      	movs	r3, #144	; 0x90
   169a0:	18fb      	adds	r3, r7, r3
   169a2:	681b      	ldr	r3, [r3, #0]
   169a4:	b2db      	uxtb	r3, r3
   169a6:	0018      	movs	r0, r3
   169a8:	4b24      	ldr	r3, [pc, #144]	; (16a3c <MicroOLEDclear+0xc4>)
   169aa:	4798      	blx	r3
			MicroOLEDsetColumnAddress(0);
   169ac:	2000      	movs	r0, #0
   169ae:	4b24      	ldr	r3, [pc, #144]	; (16a40 <MicroOLEDclear+0xc8>)
   169b0:	4798      	blx	r3
			uint8_t zeros[0x80];
			memset(zeros, 0, 0x80);
   169b2:	230c      	movs	r3, #12
   169b4:	18fb      	adds	r3, r7, r3
   169b6:	2280      	movs	r2, #128	; 0x80
   169b8:	2100      	movs	r1, #0
   169ba:	0018      	movs	r0, r3
   169bc:	4b21      	ldr	r3, [pc, #132]	; (16a44 <MicroOLEDclear+0xcc>)
   169be:	4798      	blx	r3
			for (int j = 0; j < 0x80; j++)
   169c0:	2300      	movs	r3, #0
   169c2:	228c      	movs	r2, #140	; 0x8c
   169c4:	18ba      	adds	r2, r7, r2
   169c6:	6013      	str	r3, [r2, #0]
   169c8:	e016      	b.n	169f8 <MicroOLEDclear+0x80>
			{
				error= MicroOLEDdata(0);
   169ca:	2000      	movs	r0, #0
   169cc:	4b1e      	ldr	r3, [pc, #120]	; (16a48 <MicroOLEDclear+0xd0>)
   169ce:	4798      	blx	r3
   169d0:	0003      	movs	r3, r0
   169d2:	2294      	movs	r2, #148	; 0x94
   169d4:	18ba      	adds	r2, r7, r2
   169d6:	6013      	str	r3, [r2, #0]
				if (ERROR_NONE != error){
   169d8:	2394      	movs	r3, #148	; 0x94
   169da:	18fb      	adds	r3, r7, r3
   169dc:	681b      	ldr	r3, [r3, #0]
   169de:	2b00      	cmp	r3, #0
   169e0:	d003      	beq.n	169ea <MicroOLEDclear+0x72>
					return error;
   169e2:	2394      	movs	r3, #148	; 0x94
   169e4:	18fb      	adds	r3, r7, r3
   169e6:	681b      	ldr	r3, [r3, #0]
   169e8:	e024      	b.n	16a34 <MicroOLEDclear+0xbc>
			for (int j = 0; j < 0x80; j++)
   169ea:	238c      	movs	r3, #140	; 0x8c
   169ec:	18fb      	adds	r3, r7, r3
   169ee:	681b      	ldr	r3, [r3, #0]
   169f0:	3301      	adds	r3, #1
   169f2:	228c      	movs	r2, #140	; 0x8c
   169f4:	18ba      	adds	r2, r7, r2
   169f6:	6013      	str	r3, [r2, #0]
   169f8:	238c      	movs	r3, #140	; 0x8c
   169fa:	18fb      	adds	r3, r7, r3
   169fc:	681b      	ldr	r3, [r3, #0]
   169fe:	2b7f      	cmp	r3, #127	; 0x7f
   16a00:	dde3      	ble.n	169ca <MicroOLEDclear+0x52>
		for (int i = 0; i < 8; i++)
   16a02:	2390      	movs	r3, #144	; 0x90
   16a04:	18fb      	adds	r3, r7, r3
   16a06:	681b      	ldr	r3, [r3, #0]
   16a08:	3301      	adds	r3, #1
   16a0a:	2290      	movs	r2, #144	; 0x90
   16a0c:	18ba      	adds	r2, r7, r2
   16a0e:	6013      	str	r3, [r2, #0]
   16a10:	2390      	movs	r3, #144	; 0x90
   16a12:	18fb      	adds	r3, r7, r3
   16a14:	681b      	ldr	r3, [r3, #0]
   16a16:	2b07      	cmp	r3, #7
   16a18:	ddc1      	ble.n	1699e <MicroOLEDclear+0x26>
   16a1a:	e008      	b.n	16a2e <MicroOLEDclear+0xb6>
			
		}
	}
	else
	{
		memset(screenmemory, 0, sizeof(screenmemory)); // (64 x 48) / 8 = 384
   16a1c:	23c0      	movs	r3, #192	; 0xc0
   16a1e:	005a      	lsls	r2, r3, #1
   16a20:	4b0a      	ldr	r3, [pc, #40]	; (16a4c <MicroOLEDclear+0xd4>)
   16a22:	2100      	movs	r1, #0
   16a24:	0018      	movs	r0, r3
   16a26:	4b07      	ldr	r3, [pc, #28]	; (16a44 <MicroOLEDclear+0xcc>)
   16a28:	4798      	blx	r3
		MicroOLEDdisplay();
   16a2a:	4b09      	ldr	r3, [pc, #36]	; (16a50 <MicroOLEDclear+0xd8>)
   16a2c:	4798      	blx	r3
	}
	return error;
   16a2e:	2394      	movs	r3, #148	; 0x94
   16a30:	18fb      	adds	r3, r7, r3
   16a32:	681b      	ldr	r3, [r3, #0]
}
   16a34:	0018      	movs	r0, r3
   16a36:	46bd      	mov	sp, r7
   16a38:	b026      	add	sp, #152	; 0x98
   16a3a:	bd80      	pop	{r7, pc}
   16a3c:	00016ae1 	.word	0x00016ae1
   16a40:	00016b11 	.word	0x00016b11
   16a44:	00034083 	.word	0x00034083
   16a48:	00016921 	.word	0x00016921
   16a4c:	2000095c 	.word	0x2000095c
   16a50:	00016a55 	.word	0x00016a55

00016a54 <MicroOLEDdisplay>:

/** \brief Transfer display memory.
    Bulk move the screen buffer to the SSD1306 controller's memory so that images/graphics drawn on the screen buffer will be displayed on the OLED.
*/
int MicroOLEDdisplay(void)
{
   16a54:	b580      	push	{r7, lr}
   16a56:	b082      	sub	sp, #8
   16a58:	af00      	add	r7, sp, #0
	uint8_t i, j;
int error = NULL;
   16a5a:	2300      	movs	r3, #0
   16a5c:	603b      	str	r3, [r7, #0]
	for (i = 0; i < 6; i++)
   16a5e:	1dfb      	adds	r3, r7, #7
   16a60:	2200      	movs	r2, #0
   16a62:	701a      	strb	r2, [r3, #0]
   16a64:	e02b      	b.n	16abe <MicroOLEDdisplay+0x6a>
	{
		MicroOLEDsetPageAddress(i);
   16a66:	1dfb      	adds	r3, r7, #7
   16a68:	781b      	ldrb	r3, [r3, #0]
   16a6a:	0018      	movs	r0, r3
   16a6c:	4b18      	ldr	r3, [pc, #96]	; (16ad0 <MicroOLEDdisplay+0x7c>)
   16a6e:	4798      	blx	r3
		MicroOLEDsetColumnAddress(0);
   16a70:	2000      	movs	r0, #0
   16a72:	4b18      	ldr	r3, [pc, #96]	; (16ad4 <MicroOLEDdisplay+0x80>)
   16a74:	4798      	blx	r3
		for (j = 0; j < 0x40; j++)
   16a76:	1dbb      	adds	r3, r7, #6
   16a78:	2200      	movs	r2, #0
   16a7a:	701a      	strb	r2, [r3, #0]
   16a7c:	e016      	b.n	16aac <MicroOLEDdisplay+0x58>
		{
			error= MicroOLEDdata(screenmemory[i * 0x40 + j]);
   16a7e:	1dfb      	adds	r3, r7, #7
   16a80:	781b      	ldrb	r3, [r3, #0]
   16a82:	019a      	lsls	r2, r3, #6
   16a84:	1dbb      	adds	r3, r7, #6
   16a86:	781b      	ldrb	r3, [r3, #0]
   16a88:	18d3      	adds	r3, r2, r3
   16a8a:	4a13      	ldr	r2, [pc, #76]	; (16ad8 <MicroOLEDdisplay+0x84>)
   16a8c:	5cd3      	ldrb	r3, [r2, r3]
   16a8e:	0018      	movs	r0, r3
   16a90:	4b12      	ldr	r3, [pc, #72]	; (16adc <MicroOLEDdisplay+0x88>)
   16a92:	4798      	blx	r3
   16a94:	0003      	movs	r3, r0
   16a96:	603b      	str	r3, [r7, #0]
			if (ERROR_NONE != error){
   16a98:	683b      	ldr	r3, [r7, #0]
   16a9a:	2b00      	cmp	r3, #0
   16a9c:	d001      	beq.n	16aa2 <MicroOLEDdisplay+0x4e>
				return error;
   16a9e:	683b      	ldr	r3, [r7, #0]
   16aa0:	e012      	b.n	16ac8 <MicroOLEDdisplay+0x74>
		for (j = 0; j < 0x40; j++)
   16aa2:	1dbb      	adds	r3, r7, #6
   16aa4:	781a      	ldrb	r2, [r3, #0]
   16aa6:	1dbb      	adds	r3, r7, #6
   16aa8:	3201      	adds	r2, #1
   16aaa:	701a      	strb	r2, [r3, #0]
   16aac:	1dbb      	adds	r3, r7, #6
   16aae:	781b      	ldrb	r3, [r3, #0]
   16ab0:	2b3f      	cmp	r3, #63	; 0x3f
   16ab2:	d9e4      	bls.n	16a7e <MicroOLEDdisplay+0x2a>
	for (i = 0; i < 6; i++)
   16ab4:	1dfb      	adds	r3, r7, #7
   16ab6:	781a      	ldrb	r2, [r3, #0]
   16ab8:	1dfb      	adds	r3, r7, #7
   16aba:	3201      	adds	r2, #1
   16abc:	701a      	strb	r2, [r3, #0]
   16abe:	1dfb      	adds	r3, r7, #7
   16ac0:	781b      	ldrb	r3, [r3, #0]
   16ac2:	2b05      	cmp	r3, #5
   16ac4:	d9cf      	bls.n	16a66 <MicroOLEDdisplay+0x12>
			}
		}
	}
	return error;
   16ac6:	683b      	ldr	r3, [r7, #0]
}
   16ac8:	0018      	movs	r0, r3
   16aca:	46bd      	mov	sp, r7
   16acc:	b002      	add	sp, #8
   16ace:	bd80      	pop	{r7, pc}
   16ad0:	00016ae1 	.word	0x00016ae1
   16ad4:	00016b11 	.word	0x00016b11
   16ad8:	2000095c 	.word	0x2000095c
   16adc:	00016921 	.word	0x00016921

00016ae0 <MicroOLEDsetPageAddress>:

/** \brief Set SSD1306 page address.
    Send page address command and address to the SSD1306 OLED controller.
*/
void MicroOLEDsetPageAddress(uint8_t add)
{
   16ae0:	b580      	push	{r7, lr}
   16ae2:	b082      	sub	sp, #8
   16ae4:	af00      	add	r7, sp, #0
   16ae6:	0002      	movs	r2, r0
   16ae8:	1dfb      	adds	r3, r7, #7
   16aea:	701a      	strb	r2, [r3, #0]
	add = 0xb0 | add;
   16aec:	1dfb      	adds	r3, r7, #7
   16aee:	1dfa      	adds	r2, r7, #7
   16af0:	7812      	ldrb	r2, [r2, #0]
   16af2:	2150      	movs	r1, #80	; 0x50
   16af4:	4249      	negs	r1, r1
   16af6:	430a      	orrs	r2, r1
   16af8:	701a      	strb	r2, [r3, #0]
	MicroOLEDcommand(add);
   16afa:	1dfb      	adds	r3, r7, #7
   16afc:	781b      	ldrb	r3, [r3, #0]
   16afe:	0018      	movs	r0, r3
   16b00:	4b02      	ldr	r3, [pc, #8]	; (16b0c <MicroOLEDsetPageAddress+0x2c>)
   16b02:	4798      	blx	r3
	return;
   16b04:	46c0      	nop			; (mov r8, r8)
}
   16b06:	46bd      	mov	sp, r7
   16b08:	b002      	add	sp, #8
   16b0a:	bd80      	pop	{r7, pc}
   16b0c:	000168c9 	.word	0x000168c9

00016b10 <MicroOLEDsetColumnAddress>:

/** \brief Set SSD1306 column address.
    Send column address command and address to the SSD1306 OLED controller.
*/
void MicroOLEDsetColumnAddress(uint8_t add)
{
   16b10:	b580      	push	{r7, lr}
   16b12:	b082      	sub	sp, #8
   16b14:	af00      	add	r7, sp, #0
   16b16:	0002      	movs	r2, r0
   16b18:	1dfb      	adds	r3, r7, #7
   16b1a:	701a      	strb	r2, [r3, #0]
	MicroOLEDcommand((0x10 | (add >> 4)) + 0x02);
   16b1c:	1dfb      	adds	r3, r7, #7
   16b1e:	781b      	ldrb	r3, [r3, #0]
   16b20:	091b      	lsrs	r3, r3, #4
   16b22:	b2db      	uxtb	r3, r3
   16b24:	2210      	movs	r2, #16
   16b26:	4313      	orrs	r3, r2
   16b28:	b2db      	uxtb	r3, r3
   16b2a:	3302      	adds	r3, #2
   16b2c:	b2db      	uxtb	r3, r3
   16b2e:	0018      	movs	r0, r3
   16b30:	4b06      	ldr	r3, [pc, #24]	; (16b4c <MicroOLEDsetColumnAddress+0x3c>)
   16b32:	4798      	blx	r3
	MicroOLEDcommand((0x0f & add));
   16b34:	1dfb      	adds	r3, r7, #7
   16b36:	781b      	ldrb	r3, [r3, #0]
   16b38:	220f      	movs	r2, #15
   16b3a:	4013      	ands	r3, r2
   16b3c:	b2db      	uxtb	r3, r3
   16b3e:	0018      	movs	r0, r3
   16b40:	4b02      	ldr	r3, [pc, #8]	; (16b4c <MicroOLEDsetColumnAddress+0x3c>)
   16b42:	4798      	blx	r3
	return;
   16b44:	46c0      	nop			; (mov r8, r8)
}
   16b46:	46bd      	mov	sp, r7
   16b48:	b002      	add	sp, #8
   16b4a:	bd80      	pop	{r7, pc}
   16b4c:	000168c9 	.word	0x000168c9

00016b50 <MicroOLEDsetDrawMode>:

/** \brief Set draw mode.
    Set current draw mode with NORM or XOR.
*/
void MicroOLEDsetDrawMode(uint8_t mode)
{
   16b50:	b580      	push	{r7, lr}
   16b52:	b082      	sub	sp, #8
   16b54:	af00      	add	r7, sp, #0
   16b56:	0002      	movs	r2, r0
   16b58:	1dfb      	adds	r3, r7, #7
   16b5a:	701a      	strb	r2, [r3, #0]
	drawMode = mode;
   16b5c:	4b03      	ldr	r3, [pc, #12]	; (16b6c <MicroOLEDsetDrawMode+0x1c>)
   16b5e:	1dfa      	adds	r2, r7, #7
   16b60:	7812      	ldrb	r2, [r2, #0]
   16b62:	701a      	strb	r2, [r3, #0]
}
   16b64:	46c0      	nop			; (mov r8, r8)
   16b66:	46bd      	mov	sp, r7
   16b68:	b002      	add	sp, #8
   16b6a:	bd80      	pop	{r7, pc}
   16b6c:	2000420d 	.word	0x2000420d

00016b70 <MicroOLEDsetCursor>:

/** \brief Set cursor position.
MicroOLED's cursor position to x,y.
*/
void MicroOLEDsetCursor(uint8_t x, uint8_t y)
{
   16b70:	b580      	push	{r7, lr}
   16b72:	b082      	sub	sp, #8
   16b74:	af00      	add	r7, sp, #0
   16b76:	0002      	movs	r2, r0
   16b78:	1dfb      	adds	r3, r7, #7
   16b7a:	701a      	strb	r2, [r3, #0]
   16b7c:	1dbb      	adds	r3, r7, #6
   16b7e:	1c0a      	adds	r2, r1, #0
   16b80:	701a      	strb	r2, [r3, #0]
	cursorX = x;
   16b82:	4b06      	ldr	r3, [pc, #24]	; (16b9c <MicroOLEDsetCursor+0x2c>)
   16b84:	1dfa      	adds	r2, r7, #7
   16b86:	7812      	ldrb	r2, [r2, #0]
   16b88:	701a      	strb	r2, [r3, #0]
	cursorY = y;
   16b8a:	4b05      	ldr	r3, [pc, #20]	; (16ba0 <MicroOLEDsetCursor+0x30>)
   16b8c:	1dba      	adds	r2, r7, #6
   16b8e:	7812      	ldrb	r2, [r2, #0]
   16b90:	701a      	strb	r2, [r3, #0]
}
   16b92:	46c0      	nop			; (mov r8, r8)
   16b94:	46bd      	mov	sp, r7
   16b96:	b002      	add	sp, #8
   16b98:	bd80      	pop	{r7, pc}
   16b9a:	46c0      	nop			; (mov r8, r8)
   16b9c:	20004204 	.word	0x20004204
   16ba0:	20004209 	.word	0x20004209

00016ba4 <MicroOLEDsetFontType>:

/** \brief Set font type.
    Set the current font type number, ie changing to different fonts base on the type provided.
*/
uint8_t MicroOLEDsetFontType(uint8_t type)
{
   16ba4:	b580      	push	{r7, lr}
   16ba6:	b082      	sub	sp, #8
   16ba8:	af00      	add	r7, sp, #0
   16baa:	0002      	movs	r2, r0
   16bac:	1dfb      	adds	r3, r7, #7
   16bae:	701a      	strb	r2, [r3, #0]
    if ((type >= MAXFONTS) || (fontsPointer[type] == NULL))
   16bb0:	1dfb      	adds	r3, r7, #7
   16bb2:	781b      	ldrb	r3, [r3, #0]
   16bb4:	2b04      	cmp	r3, #4
   16bb6:	d806      	bhi.n	16bc6 <MicroOLEDsetFontType+0x22>
   16bb8:	1dfb      	adds	r3, r7, #7
   16bba:	781a      	ldrb	r2, [r3, #0]
   16bbc:	4b29      	ldr	r3, [pc, #164]	; (16c64 <MicroOLEDsetFontType+0xc0>)
   16bbe:	0092      	lsls	r2, r2, #2
   16bc0:	58d3      	ldr	r3, [r2, r3]
   16bc2:	2b00      	cmp	r3, #0
   16bc4:	d101      	bne.n	16bca <MicroOLEDsetFontType+0x26>
        return false;
   16bc6:	2300      	movs	r3, #0
   16bc8:	e048      	b.n	16c5c <MicroOLEDsetFontType+0xb8>

	fontType = type;
   16bca:	4b27      	ldr	r3, [pc, #156]	; (16c68 <MicroOLEDsetFontType+0xc4>)
   16bcc:	1dfa      	adds	r2, r7, #7
   16bce:	7812      	ldrb	r2, [r2, #0]
   16bd0:	701a      	strb	r2, [r3, #0]
	fontWidth = *(fontsPointer[fontType] + 0);
   16bd2:	4b25      	ldr	r3, [pc, #148]	; (16c68 <MicroOLEDsetFontType+0xc4>)
   16bd4:	781b      	ldrb	r3, [r3, #0]
   16bd6:	001a      	movs	r2, r3
   16bd8:	4b22      	ldr	r3, [pc, #136]	; (16c64 <MicroOLEDsetFontType+0xc0>)
   16bda:	0092      	lsls	r2, r2, #2
   16bdc:	58d3      	ldr	r3, [r2, r3]
   16bde:	681b      	ldr	r3, [r3, #0]
   16be0:	b2da      	uxtb	r2, r3
   16be2:	4b22      	ldr	r3, [pc, #136]	; (16c6c <MicroOLEDsetFontType+0xc8>)
   16be4:	701a      	strb	r2, [r3, #0]
	fontHeight = *(fontsPointer[fontType] + 1);
   16be6:	4b20      	ldr	r3, [pc, #128]	; (16c68 <MicroOLEDsetFontType+0xc4>)
   16be8:	781b      	ldrb	r3, [r3, #0]
   16bea:	001a      	movs	r2, r3
   16bec:	4b1d      	ldr	r3, [pc, #116]	; (16c64 <MicroOLEDsetFontType+0xc0>)
   16bee:	0092      	lsls	r2, r2, #2
   16bf0:	58d3      	ldr	r3, [r2, r3]
   16bf2:	3304      	adds	r3, #4
   16bf4:	681b      	ldr	r3, [r3, #0]
   16bf6:	b2da      	uxtb	r2, r3
   16bf8:	4b1d      	ldr	r3, [pc, #116]	; (16c70 <MicroOLEDsetFontType+0xcc>)
   16bfa:	701a      	strb	r2, [r3, #0]
	fontStartChar = *(fontsPointer[fontType] + 2);
   16bfc:	4b1a      	ldr	r3, [pc, #104]	; (16c68 <MicroOLEDsetFontType+0xc4>)
   16bfe:	781b      	ldrb	r3, [r3, #0]
   16c00:	001a      	movs	r2, r3
   16c02:	4b18      	ldr	r3, [pc, #96]	; (16c64 <MicroOLEDsetFontType+0xc0>)
   16c04:	0092      	lsls	r2, r2, #2
   16c06:	58d3      	ldr	r3, [r2, r3]
   16c08:	3308      	adds	r3, #8
   16c0a:	681b      	ldr	r3, [r3, #0]
   16c0c:	b2da      	uxtb	r2, r3
   16c0e:	4b19      	ldr	r3, [pc, #100]	; (16c74 <MicroOLEDsetFontType+0xd0>)
   16c10:	701a      	strb	r2, [r3, #0]
	fontTotalChar = *(fontsPointer[fontType] + 3);
   16c12:	4b15      	ldr	r3, [pc, #84]	; (16c68 <MicroOLEDsetFontType+0xc4>)
   16c14:	781b      	ldrb	r3, [r3, #0]
   16c16:	001a      	movs	r2, r3
   16c18:	4b12      	ldr	r3, [pc, #72]	; (16c64 <MicroOLEDsetFontType+0xc0>)
   16c1a:	0092      	lsls	r2, r2, #2
   16c1c:	58d3      	ldr	r3, [r2, r3]
   16c1e:	330c      	adds	r3, #12
   16c20:	681b      	ldr	r3, [r3, #0]
   16c22:	b2da      	uxtb	r2, r3
   16c24:	4b14      	ldr	r3, [pc, #80]	; (16c78 <MicroOLEDsetFontType+0xd4>)
   16c26:	701a      	strb	r2, [r3, #0]
	fontMapWidth = (*(fontsPointer[fontType] + 4) * 100) + *(fontsPointer[fontType] + 5); // two bytes values into integer 16
   16c28:	4b0f      	ldr	r3, [pc, #60]	; (16c68 <MicroOLEDsetFontType+0xc4>)
   16c2a:	781b      	ldrb	r3, [r3, #0]
   16c2c:	001a      	movs	r2, r3
   16c2e:	4b0d      	ldr	r3, [pc, #52]	; (16c64 <MicroOLEDsetFontType+0xc0>)
   16c30:	0092      	lsls	r2, r2, #2
   16c32:	58d3      	ldr	r3, [r2, r3]
   16c34:	3310      	adds	r3, #16
   16c36:	681b      	ldr	r3, [r3, #0]
   16c38:	b29b      	uxth	r3, r3
   16c3a:	2264      	movs	r2, #100	; 0x64
   16c3c:	4353      	muls	r3, r2
   16c3e:	b29a      	uxth	r2, r3
   16c40:	4b09      	ldr	r3, [pc, #36]	; (16c68 <MicroOLEDsetFontType+0xc4>)
   16c42:	781b      	ldrb	r3, [r3, #0]
   16c44:	0019      	movs	r1, r3
   16c46:	4b07      	ldr	r3, [pc, #28]	; (16c64 <MicroOLEDsetFontType+0xc0>)
   16c48:	0089      	lsls	r1, r1, #2
   16c4a:	58cb      	ldr	r3, [r1, r3]
   16c4c:	3314      	adds	r3, #20
   16c4e:	681b      	ldr	r3, [r3, #0]
   16c50:	b29b      	uxth	r3, r3
   16c52:	18d3      	adds	r3, r2, r3
   16c54:	b29a      	uxth	r2, r3
   16c56:	4b09      	ldr	r3, [pc, #36]	; (16c7c <MicroOLEDsetFontType+0xd8>)
   16c58:	801a      	strh	r2, [r3, #0]
	return true;
   16c5a:	2301      	movs	r3, #1
}
   16c5c:	0018      	movs	r0, r3
   16c5e:	46bd      	mov	sp, r7
   16c60:	b002      	add	sp, #8
   16c62:	bd80      	pop	{r7, pc}
   16c64:	200000a0 	.word	0x200000a0
   16c68:	20004201 	.word	0x20004201
   16c6c:	20004203 	.word	0x20004203
   16c70:	20004202 	.word	0x20004202
   16c74:	20004200 	.word	0x20004200
   16c78:	2000420e 	.word	0x2000420e
   16c7c:	20004206 	.word	0x20004206

00016c80 <MicroOLEDsetColor>:

/** \brief Set color.
    Set the current draw's color. Only WHITE and BLACK available.
*/
void MicroOLEDsetColor(uint8_t color)
{
   16c80:	b580      	push	{r7, lr}
   16c82:	b082      	sub	sp, #8
   16c84:	af00      	add	r7, sp, #0
   16c86:	0002      	movs	r2, r0
   16c88:	1dfb      	adds	r3, r7, #7
   16c8a:	701a      	strb	r2, [r3, #0]
	foreColor = color;
   16c8c:	4b03      	ldr	r3, [pc, #12]	; (16c9c <MicroOLEDsetColor+0x1c>)
   16c8e:	1dfa      	adds	r2, r7, #7
   16c90:	7812      	ldrb	r2, [r2, #0]
   16c92:	701a      	strb	r2, [r3, #0]
}
   16c94:	46c0      	nop			; (mov r8, r8)
   16c96:	46bd      	mov	sp, r7
   16c98:	b002      	add	sp, #8
   16c9a:	bd80      	pop	{r7, pc}
   16c9c:	20004208 	.word	0x20004208

00016ca0 <MicroOLEDdrawBitmap>:

	return 1;
}

void MicroOLEDdrawBitmap(uint8_t *bitArray)
{
   16ca0:	b580      	push	{r7, lr}
   16ca2:	b084      	sub	sp, #16
   16ca4:	af00      	add	r7, sp, #0
   16ca6:	6078      	str	r0, [r7, #4]
	MicroOLEDclear(!ALL);
   16ca8:	2000      	movs	r0, #0
   16caa:	4b0e      	ldr	r3, [pc, #56]	; (16ce4 <MicroOLEDdrawBitmap+0x44>)
   16cac:	4798      	blx	r3
	for (int i = 0; i < (LCDWIDTH * LCDHEIGHT / 8); i++)
   16cae:	2300      	movs	r3, #0
   16cb0:	60fb      	str	r3, [r7, #12]
   16cb2:	e00b      	b.n	16ccc <MicroOLEDdrawBitmap+0x2c>
	screenmemory[i] = bitArray[i];
   16cb4:	68fb      	ldr	r3, [r7, #12]
   16cb6:	687a      	ldr	r2, [r7, #4]
   16cb8:	18d3      	adds	r3, r2, r3
   16cba:	7819      	ldrb	r1, [r3, #0]
   16cbc:	4a0a      	ldr	r2, [pc, #40]	; (16ce8 <MicroOLEDdrawBitmap+0x48>)
   16cbe:	68fb      	ldr	r3, [r7, #12]
   16cc0:	18d3      	adds	r3, r2, r3
   16cc2:	1c0a      	adds	r2, r1, #0
   16cc4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < (LCDWIDTH * LCDHEIGHT / 8); i++)
   16cc6:	68fb      	ldr	r3, [r7, #12]
   16cc8:	3301      	adds	r3, #1
   16cca:	60fb      	str	r3, [r7, #12]
   16ccc:	68fa      	ldr	r2, [r7, #12]
   16cce:	2380      	movs	r3, #128	; 0x80
   16cd0:	33ff      	adds	r3, #255	; 0xff
   16cd2:	429a      	cmp	r2, r3
   16cd4:	ddee      	ble.n	16cb4 <MicroOLEDdrawBitmap+0x14>
	MicroOLEDdisplay();
   16cd6:	4b05      	ldr	r3, [pc, #20]	; (16cec <MicroOLEDdrawBitmap+0x4c>)
   16cd8:	4798      	blx	r3
}
   16cda:	46c0      	nop			; (mov r8, r8)
   16cdc:	46bd      	mov	sp, r7
   16cde:	b004      	add	sp, #16
   16ce0:	bd80      	pop	{r7, pc}
   16ce2:	46c0      	nop			; (mov r8, r8)
   16ce4:	00016979 	.word	0x00016979
   16ce8:	2000095c 	.word	0x2000095c
   16cec:	00016a55 	.word	0x00016a55

00016cf0 <MicroOLEDdrawWinner>:

void MicroOLEDdrawWinner(){
   16cf0:	b580      	push	{r7, lr}
   16cf2:	af00      	add	r7, sp, #0
	MicroOLEDdrawBitmap(winner);
   16cf4:	4b03      	ldr	r3, [pc, #12]	; (16d04 <MicroOLEDdrawWinner+0x14>)
   16cf6:	0018      	movs	r0, r3
   16cf8:	4b03      	ldr	r3, [pc, #12]	; (16d08 <MicroOLEDdrawWinner+0x18>)
   16cfa:	4798      	blx	r3
	
}
   16cfc:	46c0      	nop			; (mov r8, r8)
   16cfe:	46bd      	mov	sp, r7
   16d00:	bd80      	pop	{r7, pc}
   16d02:	46c0      	nop			; (mov r8, r8)
   16d04:	00036fc0 	.word	0x00036fc0
   16d08:	00016ca1 	.word	0x00016ca1

00016d0c <MicroOLEDdrawLoser>:

void MicroOLEDdrawLoser(){
   16d0c:	b580      	push	{r7, lr}
   16d0e:	af00      	add	r7, sp, #0
	MicroOLEDdrawBitmap(loser);
   16d10:	4b03      	ldr	r3, [pc, #12]	; (16d20 <MicroOLEDdrawLoser+0x14>)
   16d12:	0018      	movs	r0, r3
   16d14:	4b03      	ldr	r3, [pc, #12]	; (16d24 <MicroOLEDdrawLoser+0x18>)
   16d16:	4798      	blx	r3
}
   16d18:	46c0      	nop			; (mov r8, r8)
   16d1a:	46bd      	mov	sp, r7
   16d1c:	bd80      	pop	{r7, pc}
   16d1e:	46c0      	nop			; (mov r8, r8)
   16d20:	00037140 	.word	0x00037140
   16d24:	00016ca1 	.word	0x00016ca1

00016d28 <MicroOLEDdrawTurns>:

void MicroOLEDdrawTurns(){
   16d28:	b580      	push	{r7, lr}
   16d2a:	af00      	add	r7, sp, #0
	MicroOLEDdrawBitmap(Turns);
   16d2c:	4b03      	ldr	r3, [pc, #12]	; (16d3c <MicroOLEDdrawTurns+0x14>)
   16d2e:	0018      	movs	r0, r3
   16d30:	4b03      	ldr	r3, [pc, #12]	; (16d40 <MicroOLEDdrawTurns+0x18>)
   16d32:	4798      	blx	r3
}
   16d34:	46c0      	nop			; (mov r8, r8)
   16d36:	46bd      	mov	sp, r7
   16d38:	bd80      	pop	{r7, pc}
   16d3a:	46c0      	nop			; (mov r8, r8)
   16d3c:	000372c0 	.word	0x000372c0
   16d40:	00016ca1 	.word	0x00016ca1

00016d44 <MicroOLEDdrawWait>:

void MicroOLEDdrawWait(){
   16d44:	b580      	push	{r7, lr}
   16d46:	af00      	add	r7, sp, #0
	MicroOLEDdrawBitmap(WAIT);
   16d48:	4b03      	ldr	r3, [pc, #12]	; (16d58 <MicroOLEDdrawWait+0x14>)
   16d4a:	0018      	movs	r0, r3
   16d4c:	4b03      	ldr	r3, [pc, #12]	; (16d5c <MicroOLEDdrawWait+0x18>)
   16d4e:	4798      	blx	r3
   16d50:	46c0      	nop			; (mov r8, r8)
   16d52:	46bd      	mov	sp, r7
   16d54:	bd80      	pop	{r7, pc}
   16d56:	46c0      	nop			; (mov r8, r8)
   16d58:	00037440 	.word	0x00037440
   16d5c:	00016ca1 	.word	0x00016ca1

00016d60 <InitializeSeesaw>:
                				
* @return		Returns 0 if no errors.
* @note         
*****************************************************************************/
int InitializeSeesaw(void)
{
   16d60:	b580      	push	{r7, lr}
   16d62:	b082      	sub	sp, #8
   16d64:	af00      	add	r7, sp, #0
	uint8_t readData[2];
	seesawData.address = NEO_TRELLIS_ADDR;
   16d66:	4b38      	ldr	r3, [pc, #224]	; (16e48 <InitializeSeesaw+0xe8>)
   16d68:	222e      	movs	r2, #46	; 0x2e
   16d6a:	701a      	strb	r2, [r3, #0]
	seesawData.msgOut = &msgBaseGetHWID;
   16d6c:	4b36      	ldr	r3, [pc, #216]	; (16e48 <InitializeSeesaw+0xe8>)
   16d6e:	4a37      	ldr	r2, [pc, #220]	; (16e4c <InitializeSeesaw+0xec>)
   16d70:	605a      	str	r2, [r3, #4]
	seesawData.lenOut = sizeof(msgBaseGetHWID);
   16d72:	4b35      	ldr	r3, [pc, #212]	; (16e48 <InitializeSeesaw+0xe8>)
   16d74:	2202      	movs	r2, #2
   16d76:	81da      	strh	r2, [r3, #14]
	seesawData.msgIn = &readData;
   16d78:	4b33      	ldr	r3, [pc, #204]	; (16e48 <InitializeSeesaw+0xe8>)
   16d7a:	003a      	movs	r2, r7
   16d7c:	609a      	str	r2, [r3, #8]
	seesawData.lenIn = 1;
   16d7e:	4b32      	ldr	r3, [pc, #200]	; (16e48 <InitializeSeesaw+0xe8>)
   16d80:	2201      	movs	r2, #1
   16d82:	819a      	strh	r2, [r3, #12]

	//Check if device is on the line - it should answer with its HW ID

	int error = I2cReadDataWait(&seesawData, 0, 100);
   16d84:	4b30      	ldr	r3, [pc, #192]	; (16e48 <InitializeSeesaw+0xe8>)
   16d86:	2264      	movs	r2, #100	; 0x64
   16d88:	2100      	movs	r1, #0
   16d8a:	0018      	movs	r0, r3
   16d8c:	4b30      	ldr	r3, [pc, #192]	; (16e50 <InitializeSeesaw+0xf0>)
   16d8e:	4798      	blx	r3
   16d90:	0003      	movs	r3, r0
   16d92:	607b      	str	r3, [r7, #4]

	if(ERROR_NONE != error)
   16d94:	687b      	ldr	r3, [r7, #4]
   16d96:	2b00      	cmp	r3, #0
   16d98:	d004      	beq.n	16da4 <InitializeSeesaw+0x44>
	{
		SerialConsoleWriteString("Error initializing Seesaw!/r/n");
   16d9a:	4b2e      	ldr	r3, [pc, #184]	; (16e54 <InitializeSeesaw+0xf4>)
   16d9c:	0018      	movs	r0, r3
   16d9e:	4b2e      	ldr	r3, [pc, #184]	; (16e58 <InitializeSeesaw+0xf8>)
   16da0:	4798      	blx	r3
   16da2:	e00c      	b.n	16dbe <InitializeSeesaw+0x5e>
	}
	else
	{
		if(readData[0] != SEESAW_HW_ID_CODE )
   16da4:	003b      	movs	r3, r7
   16da6:	781b      	ldrb	r3, [r3, #0]
   16da8:	2b55      	cmp	r3, #85	; 0x55
   16daa:	d004      	beq.n	16db6 <InitializeSeesaw+0x56>
		{
			SerialConsoleWriteString("Error/r/n");
   16dac:	4b2b      	ldr	r3, [pc, #172]	; (16e5c <InitializeSeesaw+0xfc>)
   16dae:	0018      	movs	r0, r3
   16db0:	4b29      	ldr	r3, [pc, #164]	; (16e58 <InitializeSeesaw+0xf8>)
   16db2:	4798      	blx	r3
   16db4:	e003      	b.n	16dbe <InitializeSeesaw+0x5e>
		}
		else
		{
		SerialConsoleWriteString("Found Seesaw!/r/n");
   16db6:	4b2a      	ldr	r3, [pc, #168]	; (16e60 <InitializeSeesaw+0x100>)
   16db8:	0018      	movs	r0, r3
   16dba:	4b27      	ldr	r3, [pc, #156]	; (16e58 <InitializeSeesaw+0xf8>)
   16dbc:	4798      	blx	r3
		}
	}

	//Tell the Seesaw which pins to use
	seesawData.msgOut = &msgNeopixelPin;
   16dbe:	4b22      	ldr	r3, [pc, #136]	; (16e48 <InitializeSeesaw+0xe8>)
   16dc0:	4a28      	ldr	r2, [pc, #160]	; (16e64 <InitializeSeesaw+0x104>)
   16dc2:	605a      	str	r2, [r3, #4]
	seesawData.lenOut = sizeof(msgNeopixelPin);
   16dc4:	4b20      	ldr	r3, [pc, #128]	; (16e48 <InitializeSeesaw+0xe8>)
   16dc6:	2203      	movs	r2, #3
   16dc8:	81da      	strh	r2, [r3, #14]

	error = I2cWriteDataWait(&seesawData, 100);
   16dca:	4b1f      	ldr	r3, [pc, #124]	; (16e48 <InitializeSeesaw+0xe8>)
   16dcc:	2164      	movs	r1, #100	; 0x64
   16dce:	0018      	movs	r0, r3
   16dd0:	4b25      	ldr	r3, [pc, #148]	; (16e68 <InitializeSeesaw+0x108>)
   16dd2:	4798      	blx	r3
   16dd4:	0003      	movs	r3, r0
   16dd6:	607b      	str	r3, [r7, #4]
	if(ERROR_NONE != error)
   16dd8:	687b      	ldr	r3, [r7, #4]
   16dda:	2b00      	cmp	r3, #0
   16ddc:	d003      	beq.n	16de6 <InitializeSeesaw+0x86>
	{
		SerialConsoleWriteString("Could not write Seesaw pin!/r/n");
   16dde:	4b23      	ldr	r3, [pc, #140]	; (16e6c <InitializeSeesaw+0x10c>)
   16de0:	0018      	movs	r0, r3
   16de2:	4b1d      	ldr	r3, [pc, #116]	; (16e58 <InitializeSeesaw+0xf8>)
   16de4:	4798      	blx	r3
	}

	//Set seesaw Neopixel speed
	seesawData.msgOut = &msgNeopixelSpeed;
   16de6:	4b18      	ldr	r3, [pc, #96]	; (16e48 <InitializeSeesaw+0xe8>)
   16de8:	4a21      	ldr	r2, [pc, #132]	; (16e70 <InitializeSeesaw+0x110>)
   16dea:	605a      	str	r2, [r3, #4]
	seesawData.lenOut = sizeof(msgNeopixelSpeed);
   16dec:	4b16      	ldr	r3, [pc, #88]	; (16e48 <InitializeSeesaw+0xe8>)
   16dee:	2203      	movs	r2, #3
   16df0:	81da      	strh	r2, [r3, #14]

	error = I2cWriteDataWait(&seesawData, 100);
   16df2:	4b15      	ldr	r3, [pc, #84]	; (16e48 <InitializeSeesaw+0xe8>)
   16df4:	2164      	movs	r1, #100	; 0x64
   16df6:	0018      	movs	r0, r3
   16df8:	4b1b      	ldr	r3, [pc, #108]	; (16e68 <InitializeSeesaw+0x108>)
   16dfa:	4798      	blx	r3
   16dfc:	0003      	movs	r3, r0
   16dfe:	607b      	str	r3, [r7, #4]
	if(ERROR_NONE != error)
   16e00:	687b      	ldr	r3, [r7, #4]
   16e02:	2b00      	cmp	r3, #0
   16e04:	d003      	beq.n	16e0e <InitializeSeesaw+0xae>
	{
		SerialConsoleWriteString("Could not set seesaw Neopixel speed!/r/n");
   16e06:	4b1b      	ldr	r3, [pc, #108]	; (16e74 <InitializeSeesaw+0x114>)
   16e08:	0018      	movs	r0, r3
   16e0a:	4b13      	ldr	r3, [pc, #76]	; (16e58 <InitializeSeesaw+0xf8>)
   16e0c:	4798      	blx	r3
	}

	//Set seesaw Neopixel number of devices
	seesawData.msgOut = &msgNeopixelBufLength;
   16e0e:	4b0e      	ldr	r3, [pc, #56]	; (16e48 <InitializeSeesaw+0xe8>)
   16e10:	4a19      	ldr	r2, [pc, #100]	; (16e78 <InitializeSeesaw+0x118>)
   16e12:	605a      	str	r2, [r3, #4]
	seesawData.lenOut = sizeof(msgNeopixelBufLength);
   16e14:	4b0c      	ldr	r3, [pc, #48]	; (16e48 <InitializeSeesaw+0xe8>)
   16e16:	2204      	movs	r2, #4
   16e18:	81da      	strh	r2, [r3, #14]

	error = I2cWriteDataWait(&seesawData, 100);
   16e1a:	4b0b      	ldr	r3, [pc, #44]	; (16e48 <InitializeSeesaw+0xe8>)
   16e1c:	2164      	movs	r1, #100	; 0x64
   16e1e:	0018      	movs	r0, r3
   16e20:	4b11      	ldr	r3, [pc, #68]	; (16e68 <InitializeSeesaw+0x108>)
   16e22:	4798      	blx	r3
   16e24:	0003      	movs	r3, r0
   16e26:	607b      	str	r3, [r7, #4]
	if(ERROR_NONE != error)
   16e28:	687b      	ldr	r3, [r7, #4]
   16e2a:	2b00      	cmp	r3, #0
   16e2c:	d003      	beq.n	16e36 <InitializeSeesaw+0xd6>
	{
		SerialConsoleWriteString("Could not set seesaw Neopixel number of devices/r/n");
   16e2e:	4b13      	ldr	r3, [pc, #76]	; (16e7c <InitializeSeesaw+0x11c>)
   16e30:	0018      	movs	r0, r3
   16e32:	4b09      	ldr	r3, [pc, #36]	; (16e58 <InitializeSeesaw+0xf8>)
   16e34:	4798      	blx	r3
	}

	SeesawTurnOnLedTest();
   16e36:	4b12      	ldr	r3, [pc, #72]	; (16e80 <InitializeSeesaw+0x120>)
   16e38:	4798      	blx	r3


	SeesawInitializeKeypad();
   16e3a:	4b12      	ldr	r3, [pc, #72]	; (16e84 <InitializeSeesaw+0x124>)
   16e3c:	4798      	blx	r3
	return error;
   16e3e:	687b      	ldr	r3, [r7, #4]

}
   16e40:	0018      	movs	r0, r3
   16e42:	46bd      	mov	sp, r7
   16e44:	b002      	add	sp, #8
   16e46:	bd80      	pop	{r7, pc}
   16e48:	20004400 	.word	0x20004400
   16e4c:	00037628 	.word	0x00037628
   16e50:	00016339 	.word	0x00016339
   16e54:	00037640 	.word	0x00037640
   16e58:	0001db09 	.word	0x0001db09
   16e5c:	00037660 	.word	0x00037660
   16e60:	0003766c 	.word	0x0003766c
   16e64:	0003762c 	.word	0x0003762c
   16e68:	00016269 	.word	0x00016269
   16e6c:	00037680 	.word	0x00037680
   16e70:	00037630 	.word	0x00037630
   16e74:	000376a0 	.word	0x000376a0
   16e78:	00037634 	.word	0x00037634
   16e7c:	000376cc 	.word	0x000376cc
   16e80:	00017241 	.word	0x00017241
   16e84:	00017151 	.word	0x00017151

00016e88 <SeesawGetKeypadCount>:
* @details 	Assumes Seesaw is already initialized
                				
* @return		Returns the number of events in the buffer. Use SeesawReadKeypad to read these events.
* @note         
*****************************************************************************/
uint8_t SeesawGetKeypadCount(void) {
   16e88:	b580      	push	{r7, lr}
   16e8a:	b082      	sub	sp, #8
   16e8c:	af00      	add	r7, sp, #0
	uint8_t count = 0;
   16e8e:	1cfb      	adds	r3, r7, #3
   16e90:	2200      	movs	r2, #0
   16e92:	701a      	strb	r2, [r3, #0]
	seesawData.address = NEO_TRELLIS_ADDR;
   16e94:	4b11      	ldr	r3, [pc, #68]	; (16edc <SeesawGetKeypadCount+0x54>)
   16e96:	222e      	movs	r2, #46	; 0x2e
   16e98:	701a      	strb	r2, [r3, #0]
	seesawData.msgOut = &msgKeypadGetCount;
   16e9a:	4b10      	ldr	r3, [pc, #64]	; (16edc <SeesawGetKeypadCount+0x54>)
   16e9c:	4a10      	ldr	r2, [pc, #64]	; (16ee0 <SeesawGetKeypadCount+0x58>)
   16e9e:	605a      	str	r2, [r3, #4]
	seesawData.lenOut = sizeof(msgKeypadGetCount);
   16ea0:	4b0e      	ldr	r3, [pc, #56]	; (16edc <SeesawGetKeypadCount+0x54>)
   16ea2:	2202      	movs	r2, #2
   16ea4:	81da      	strh	r2, [r3, #14]
	seesawData.msgIn = &count;
   16ea6:	4b0d      	ldr	r3, [pc, #52]	; (16edc <SeesawGetKeypadCount+0x54>)
   16ea8:	1cfa      	adds	r2, r7, #3
   16eaa:	609a      	str	r2, [r3, #8]
	seesawData.lenIn = 1;
   16eac:	4b0b      	ldr	r3, [pc, #44]	; (16edc <SeesawGetKeypadCount+0x54>)
   16eae:	2201      	movs	r2, #1
   16eb0:	819a      	strh	r2, [r3, #12]

	int error = I2cReadDataWait(&seesawData, 0, 100);
   16eb2:	4b0a      	ldr	r3, [pc, #40]	; (16edc <SeesawGetKeypadCount+0x54>)
   16eb4:	2264      	movs	r2, #100	; 0x64
   16eb6:	2100      	movs	r1, #0
   16eb8:	0018      	movs	r0, r3
   16eba:	4b0a      	ldr	r3, [pc, #40]	; (16ee4 <SeesawGetKeypadCount+0x5c>)
   16ebc:	4798      	blx	r3
   16ebe:	0003      	movs	r3, r0
   16ec0:	607b      	str	r3, [r7, #4]

	if(ERROR_NONE != error)
   16ec2:	687b      	ldr	r3, [r7, #4]
   16ec4:	2b00      	cmp	r3, #0
   16ec6:	d003      	beq.n	16ed0 <SeesawGetKeypadCount+0x48>
	{
		SerialConsoleWriteString("Error reading Seesaw counts!/r/n");
   16ec8:	4b07      	ldr	r3, [pc, #28]	; (16ee8 <SeesawGetKeypadCount+0x60>)
   16eca:	0018      	movs	r0, r3
   16ecc:	4b07      	ldr	r3, [pc, #28]	; (16eec <SeesawGetKeypadCount+0x64>)
   16ece:	4798      	blx	r3
	}
	return count;
   16ed0:	1cfb      	adds	r3, r7, #3
   16ed2:	781b      	ldrb	r3, [r3, #0]
}
   16ed4:	0018      	movs	r0, r3
   16ed6:	46bd      	mov	sp, r7
   16ed8:	b002      	add	sp, #8
   16eda:	bd80      	pop	{r7, pc}
   16edc:	20004400 	.word	0x20004400
   16ee0:	0003763c 	.word	0x0003763c
   16ee4:	00016339 	.word	0x00016339
   16ee8:	00037700 	.word	0x00037700
   16eec:	0001db09 	.word	0x0001db09

00016ef0 <SeesawReadKeypad>:
                				
* @return		Returns zero if no I2C errors occurred. Other number in case of error
* @note         Use SeesawGetKeypadCount to know how many events are in buffer.
*****************************************************************************/
int32_t SeesawReadKeypad(uint8_t *buffer, uint8_t count)
	{
   16ef0:	b580      	push	{r7, lr}
   16ef2:	b084      	sub	sp, #16
   16ef4:	af00      	add	r7, sp, #0
   16ef6:	6078      	str	r0, [r7, #4]
   16ef8:	000a      	movs	r2, r1
   16efa:	1cfb      	adds	r3, r7, #3
   16efc:	701a      	strb	r2, [r3, #0]
	if (count == 0) return ERROR_NONE;
   16efe:	1cfb      	adds	r3, r7, #3
   16f00:	781b      	ldrb	r3, [r3, #0]
   16f02:	2b00      	cmp	r3, #0
   16f04:	d101      	bne.n	16f0a <SeesawReadKeypad+0x1a>
   16f06:	2300      	movs	r3, #0
   16f08:	e026      	b.n	16f58 <SeesawReadKeypad+0x68>
	uint8_t cmd[] = {SEESAW_KEYPAD_BASE, SEESAW_KEYPAD_FIFO};
   16f0a:	2308      	movs	r3, #8
   16f0c:	18fb      	adds	r3, r7, r3
   16f0e:	4a14      	ldr	r2, [pc, #80]	; (16f60 <SeesawReadKeypad+0x70>)
   16f10:	8812      	ldrh	r2, [r2, #0]
   16f12:	801a      	strh	r2, [r3, #0]
	seesawData.address = NEO_TRELLIS_ADDR;
   16f14:	4b13      	ldr	r3, [pc, #76]	; (16f64 <SeesawReadKeypad+0x74>)
   16f16:	222e      	movs	r2, #46	; 0x2e
   16f18:	701a      	strb	r2, [r3, #0]
	seesawData.msgOut = &cmd;
   16f1a:	4b12      	ldr	r3, [pc, #72]	; (16f64 <SeesawReadKeypad+0x74>)
   16f1c:	2208      	movs	r2, #8
   16f1e:	18ba      	adds	r2, r7, r2
   16f20:	605a      	str	r2, [r3, #4]
	seesawData.lenOut = sizeof(cmd);
   16f22:	4b10      	ldr	r3, [pc, #64]	; (16f64 <SeesawReadKeypad+0x74>)
   16f24:	2202      	movs	r2, #2
   16f26:	81da      	strh	r2, [r3, #14]
	seesawData.msgIn = buffer;
   16f28:	4b0e      	ldr	r3, [pc, #56]	; (16f64 <SeesawReadKeypad+0x74>)
   16f2a:	687a      	ldr	r2, [r7, #4]
   16f2c:	609a      	str	r2, [r3, #8]
	seesawData.lenIn = count;
   16f2e:	1cfb      	adds	r3, r7, #3
   16f30:	781b      	ldrb	r3, [r3, #0]
   16f32:	b29a      	uxth	r2, r3
   16f34:	4b0b      	ldr	r3, [pc, #44]	; (16f64 <SeesawReadKeypad+0x74>)
   16f36:	819a      	strh	r2, [r3, #12]

	int error = I2cReadDataWait(&seesawData, 0, 100);
   16f38:	4b0a      	ldr	r3, [pc, #40]	; (16f64 <SeesawReadKeypad+0x74>)
   16f3a:	2264      	movs	r2, #100	; 0x64
   16f3c:	2100      	movs	r1, #0
   16f3e:	0018      	movs	r0, r3
   16f40:	4b09      	ldr	r3, [pc, #36]	; (16f68 <SeesawReadKeypad+0x78>)
   16f42:	4798      	blx	r3
   16f44:	0003      	movs	r3, r0
   16f46:	60fb      	str	r3, [r7, #12]

	if(ERROR_NONE != error)
   16f48:	68fb      	ldr	r3, [r7, #12]
   16f4a:	2b00      	cmp	r3, #0
   16f4c:	d003      	beq.n	16f56 <SeesawReadKeypad+0x66>
	{
		SerialConsoleWriteString("Error reading Seesaw counts!/r/n");
   16f4e:	4b07      	ldr	r3, [pc, #28]	; (16f6c <SeesawReadKeypad+0x7c>)
   16f50:	0018      	movs	r0, r3
   16f52:	4b07      	ldr	r3, [pc, #28]	; (16f70 <SeesawReadKeypad+0x80>)
   16f54:	4798      	blx	r3
	}
	return error;
   16f56:	68fb      	ldr	r3, [r7, #12]
}
   16f58:	0018      	movs	r0, r3
   16f5a:	46bd      	mov	sp, r7
   16f5c:	b004      	add	sp, #16
   16f5e:	bd80      	pop	{r7, pc}
   16f60:	00037724 	.word	0x00037724
   16f64:	20004400 	.word	0x20004400
   16f68:	00016339 	.word	0x00016339
   16f6c:	00037700 	.word	0x00037700
   16f70:	0001db09 	.word	0x0001db09

00016f74 <SeesawActivateKey>:
                				
* @return		Returns zero if no I2C errors occurred. Other number in case of error
* @note         
*****************************************************************************/
int32_t SeesawActivateKey(uint8_t key, uint8_t edge, bool enable)
	{
   16f74:	b590      	push	{r4, r7, lr}
   16f76:	b087      	sub	sp, #28
   16f78:	af00      	add	r7, sp, #0
   16f7a:	0004      	movs	r4, r0
   16f7c:	0008      	movs	r0, r1
   16f7e:	0011      	movs	r1, r2
   16f80:	1dfb      	adds	r3, r7, #7
   16f82:	1c22      	adds	r2, r4, #0
   16f84:	701a      	strb	r2, [r3, #0]
   16f86:	1dbb      	adds	r3, r7, #6
   16f88:	1c02      	adds	r2, r0, #0
   16f8a:	701a      	strb	r2, [r3, #0]
   16f8c:	1d7b      	adds	r3, r7, #5
   16f8e:	1c0a      	adds	r2, r1, #0
   16f90:	701a      	strb	r2, [r3, #0]
	union keyState ks;
	ks.bit.STATE = enable;
   16f92:	2310      	movs	r3, #16
   16f94:	18fb      	adds	r3, r7, r3
   16f96:	1d7a      	adds	r2, r7, #5
   16f98:	7812      	ldrb	r2, [r2, #0]
   16f9a:	2101      	movs	r1, #1
   16f9c:	0010      	movs	r0, r2
   16f9e:	4008      	ands	r0, r1
   16fa0:	781a      	ldrb	r2, [r3, #0]
   16fa2:	2101      	movs	r1, #1
   16fa4:	438a      	bics	r2, r1
   16fa6:	1c11      	adds	r1, r2, #0
   16fa8:	1c02      	adds	r2, r0, #0
   16faa:	430a      	orrs	r2, r1
   16fac:	701a      	strb	r2, [r3, #0]
	ks.bit.ACTIVE = (1 << edge);
   16fae:	1dbb      	adds	r3, r7, #6
   16fb0:	781b      	ldrb	r3, [r3, #0]
   16fb2:	2201      	movs	r2, #1
   16fb4:	409a      	lsls	r2, r3
   16fb6:	0013      	movs	r3, r2
   16fb8:	b2db      	uxtb	r3, r3
   16fba:	1c1a      	adds	r2, r3, #0
   16fbc:	230f      	movs	r3, #15
   16fbe:	4013      	ands	r3, r2
   16fc0:	b2da      	uxtb	r2, r3
   16fc2:	2310      	movs	r3, #16
   16fc4:	18fb      	adds	r3, r7, r3
   16fc6:	210f      	movs	r1, #15
   16fc8:	400a      	ands	r2, r1
   16fca:	1890      	adds	r0, r2, r2
   16fcc:	781a      	ldrb	r2, [r3, #0]
   16fce:	211e      	movs	r1, #30
   16fd0:	438a      	bics	r2, r1
   16fd2:	1c11      	adds	r1, r2, #0
   16fd4:	1c02      	adds	r2, r0, #0
   16fd6:	430a      	orrs	r2, r1
   16fd8:	701a      	strb	r2, [r3, #0]
	uint8_t cmd[] = {SEESAW_KEYPAD_BASE, SEESAW_KEYPAD_EVENT, key, ks.reg};
   16fda:	230c      	movs	r3, #12
   16fdc:	18fb      	adds	r3, r7, r3
   16fde:	2210      	movs	r2, #16
   16fe0:	701a      	strb	r2, [r3, #0]
   16fe2:	230c      	movs	r3, #12
   16fe4:	18fb      	adds	r3, r7, r3
   16fe6:	2201      	movs	r2, #1
   16fe8:	705a      	strb	r2, [r3, #1]
   16fea:	230c      	movs	r3, #12
   16fec:	18fb      	adds	r3, r7, r3
   16fee:	1dfa      	adds	r2, r7, #7
   16ff0:	7812      	ldrb	r2, [r2, #0]
   16ff2:	709a      	strb	r2, [r3, #2]
   16ff4:	2310      	movs	r3, #16
   16ff6:	18fb      	adds	r3, r7, r3
   16ff8:	781a      	ldrb	r2, [r3, #0]
   16ffa:	230c      	movs	r3, #12
   16ffc:	18fb      	adds	r3, r7, r3
   16ffe:	70da      	strb	r2, [r3, #3]

	seesawData.address = NEO_TRELLIS_ADDR;
   17000:	4b0c      	ldr	r3, [pc, #48]	; (17034 <SeesawActivateKey+0xc0>)
   17002:	222e      	movs	r2, #46	; 0x2e
   17004:	701a      	strb	r2, [r3, #0]
	seesawData.msgOut = &cmd;
   17006:	4b0b      	ldr	r3, [pc, #44]	; (17034 <SeesawActivateKey+0xc0>)
   17008:	220c      	movs	r2, #12
   1700a:	18ba      	adds	r2, r7, r2
   1700c:	605a      	str	r2, [r3, #4]
	seesawData.lenOut = sizeof(cmd);
   1700e:	4b09      	ldr	r3, [pc, #36]	; (17034 <SeesawActivateKey+0xc0>)
   17010:	2204      	movs	r2, #4
   17012:	81da      	strh	r2, [r3, #14]
	seesawData.lenIn = 0;
   17014:	4b07      	ldr	r3, [pc, #28]	; (17034 <SeesawActivateKey+0xc0>)
   17016:	2200      	movs	r2, #0
   17018:	819a      	strh	r2, [r3, #12]
	int32_t error = I2cWriteDataWait(&seesawData, 100);
   1701a:	4b06      	ldr	r3, [pc, #24]	; (17034 <SeesawActivateKey+0xc0>)
   1701c:	2164      	movs	r1, #100	; 0x64
   1701e:	0018      	movs	r0, r3
   17020:	4b05      	ldr	r3, [pc, #20]	; (17038 <SeesawActivateKey+0xc4>)
   17022:	4798      	blx	r3
   17024:	0003      	movs	r3, r0
   17026:	617b      	str	r3, [r7, #20]
	return error;
   17028:	697b      	ldr	r3, [r7, #20]
}
   1702a:	0018      	movs	r0, r3
   1702c:	46bd      	mov	sp, r7
   1702e:	b007      	add	sp, #28
   17030:	bd90      	pop	{r4, r7, pc}
   17032:	46c0      	nop			; (mov r8, r8)
   17034:	20004400 	.word	0x20004400
   17038:	00016269 	.word	0x00016269

0001703c <SeesawSetLed>:
* @return		Returns zero if no I2C errors occurred. Other number in case of error
* @note         Note that the LEDs wont turn on until you send a "SeesawOrderLedUpdate" command.
	FOR ESE516 Board, please do not turn ALL the LEDs to maximum brightness (255,255,255)!
*****************************************************************************/
int32_t SeesawSetLed(uint8_t key, uint8_t red, uint8_t green, uint8_t blue)
{
   1703c:	b5b0      	push	{r4, r5, r7, lr}
   1703e:	b088      	sub	sp, #32
   17040:	af00      	add	r7, sp, #0
   17042:	0005      	movs	r5, r0
   17044:	000c      	movs	r4, r1
   17046:	0010      	movs	r0, r2
   17048:	0019      	movs	r1, r3
   1704a:	1dfb      	adds	r3, r7, #7
   1704c:	1c2a      	adds	r2, r5, #0
   1704e:	701a      	strb	r2, [r3, #0]
   17050:	1dbb      	adds	r3, r7, #6
   17052:	1c22      	adds	r2, r4, #0
   17054:	701a      	strb	r2, [r3, #0]
   17056:	1d7b      	adds	r3, r7, #5
   17058:	1c02      	adds	r2, r0, #0
   1705a:	701a      	strb	r2, [r3, #0]
   1705c:	1d3b      	adds	r3, r7, #4
   1705e:	1c0a      	adds	r2, r1, #0
   17060:	701a      	strb	r2, [r3, #0]
	uint8_t write_buffer1[7] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_BUF, 0, 0, green,red, blue};
   17062:	2310      	movs	r3, #16
   17064:	18fb      	adds	r3, r7, r3
   17066:	220e      	movs	r2, #14
   17068:	701a      	strb	r2, [r3, #0]
   1706a:	2310      	movs	r3, #16
   1706c:	18fb      	adds	r3, r7, r3
   1706e:	2204      	movs	r2, #4
   17070:	705a      	strb	r2, [r3, #1]
   17072:	2310      	movs	r3, #16
   17074:	18fb      	adds	r3, r7, r3
   17076:	2200      	movs	r2, #0
   17078:	709a      	strb	r2, [r3, #2]
   1707a:	2310      	movs	r3, #16
   1707c:	18fb      	adds	r3, r7, r3
   1707e:	2200      	movs	r2, #0
   17080:	70da      	strb	r2, [r3, #3]
   17082:	2310      	movs	r3, #16
   17084:	18fb      	adds	r3, r7, r3
   17086:	1d7a      	adds	r2, r7, #5
   17088:	7812      	ldrb	r2, [r2, #0]
   1708a:	711a      	strb	r2, [r3, #4]
   1708c:	2310      	movs	r3, #16
   1708e:	18fb      	adds	r3, r7, r3
   17090:	1dba      	adds	r2, r7, #6
   17092:	7812      	ldrb	r2, [r2, #0]
   17094:	715a      	strb	r2, [r3, #5]
   17096:	2310      	movs	r3, #16
   17098:	18fb      	adds	r3, r7, r3
   1709a:	1d3a      	adds	r2, r7, #4
   1709c:	7812      	ldrb	r2, [r2, #0]
   1709e:	719a      	strb	r2, [r3, #6]
	uint8_t orderBuffer[2] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_SHOW};
   170a0:	230c      	movs	r3, #12
   170a2:	18fb      	adds	r3, r7, r3
   170a4:	4a17      	ldr	r2, [pc, #92]	; (17104 <SeesawSetLed+0xc8>)
   170a6:	8812      	ldrh	r2, [r2, #0]
   170a8:	801a      	strh	r2, [r3, #0]

	uint16_t offset = 3 * key; //RGB LED
   170aa:	1dfb      	adds	r3, r7, #7
   170ac:	781b      	ldrb	r3, [r3, #0]
   170ae:	b29b      	uxth	r3, r3
   170b0:	221e      	movs	r2, #30
   170b2:	18ba      	adds	r2, r7, r2
   170b4:	1c19      	adds	r1, r3, #0
   170b6:	1c0b      	adds	r3, r1, #0
   170b8:	18db      	adds	r3, r3, r3
   170ba:	185b      	adds	r3, r3, r1
   170bc:	8013      	strh	r3, [r2, #0]
	write_buffer1[2] = (offset >> 8);
   170be:	231e      	movs	r3, #30
   170c0:	18fb      	adds	r3, r7, r3
   170c2:	881b      	ldrh	r3, [r3, #0]
   170c4:	0a1b      	lsrs	r3, r3, #8
   170c6:	b29b      	uxth	r3, r3
   170c8:	b2da      	uxtb	r2, r3
   170ca:	2310      	movs	r3, #16
   170cc:	18fb      	adds	r3, r7, r3
   170ce:	709a      	strb	r2, [r3, #2]
	write_buffer1[3] = (offset);
   170d0:	231e      	movs	r3, #30
   170d2:	18fb      	adds	r3, r7, r3
   170d4:	881b      	ldrh	r3, [r3, #0]
   170d6:	b2da      	uxtb	r2, r3
   170d8:	2310      	movs	r3, #16
   170da:	18fb      	adds	r3, r7, r3
   170dc:	70da      	strb	r2, [r3, #3]

	seesawData.msgOut = &write_buffer1;
   170de:	4b0a      	ldr	r3, [pc, #40]	; (17108 <SeesawSetLed+0xcc>)
   170e0:	2210      	movs	r2, #16
   170e2:	18ba      	adds	r2, r7, r2
   170e4:	605a      	str	r2, [r3, #4]
	seesawData.lenOut = sizeof(write_buffer1);
   170e6:	4b08      	ldr	r3, [pc, #32]	; (17108 <SeesawSetLed+0xcc>)
   170e8:	2207      	movs	r2, #7
   170ea:	81da      	strh	r2, [r3, #14]
	int error = I2cWriteDataWait(&seesawData, 100);
   170ec:	4b06      	ldr	r3, [pc, #24]	; (17108 <SeesawSetLed+0xcc>)
   170ee:	2164      	movs	r1, #100	; 0x64
   170f0:	0018      	movs	r0, r3
   170f2:	4b06      	ldr	r3, [pc, #24]	; (1710c <SeesawSetLed+0xd0>)
   170f4:	4798      	blx	r3
   170f6:	0003      	movs	r3, r0
   170f8:	61bb      	str	r3, [r7, #24]
	return error;
   170fa:	69bb      	ldr	r3, [r7, #24]

}
   170fc:	0018      	movs	r0, r3
   170fe:	46bd      	mov	sp, r7
   17100:	b008      	add	sp, #32
   17102:	bdb0      	pop	{r4, r5, r7, pc}
   17104:	00037728 	.word	0x00037728
   17108:	20004400 	.word	0x20004400
   1710c:	00016269 	.word	0x00016269

00017110 <SeesawOrderLedUpdate>:
* @return		Returns zero if no I2C errors occurred. Other number in case of error
* @note         Use "SeesawSetLed" to send LED Data. The data will not be use to update the display until this function has been called!

*****************************************************************************/
int32_t SeesawOrderLedUpdate(void)
{
   17110:	b580      	push	{r7, lr}
   17112:	b082      	sub	sp, #8
   17114:	af00      	add	r7, sp, #0
	uint8_t orderBuffer[2] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_SHOW};
   17116:	003b      	movs	r3, r7
   17118:	4a0a      	ldr	r2, [pc, #40]	; (17144 <SeesawOrderLedUpdate+0x34>)
   1711a:	8812      	ldrh	r2, [r2, #0]
   1711c:	801a      	strh	r2, [r3, #0]

	seesawData.msgOut = &orderBuffer;
   1711e:	4b0a      	ldr	r3, [pc, #40]	; (17148 <SeesawOrderLedUpdate+0x38>)
   17120:	003a      	movs	r2, r7
   17122:	605a      	str	r2, [r3, #4]
	seesawData.lenOut = sizeof(orderBuffer);
   17124:	4b08      	ldr	r3, [pc, #32]	; (17148 <SeesawOrderLedUpdate+0x38>)
   17126:	2202      	movs	r2, #2
   17128:	81da      	strh	r2, [r3, #14]
	int error = I2cWriteDataWait(&seesawData, 100);
   1712a:	4b07      	ldr	r3, [pc, #28]	; (17148 <SeesawOrderLedUpdate+0x38>)
   1712c:	2164      	movs	r1, #100	; 0x64
   1712e:	0018      	movs	r0, r3
   17130:	4b06      	ldr	r3, [pc, #24]	; (1714c <SeesawOrderLedUpdate+0x3c>)
   17132:	4798      	blx	r3
   17134:	0003      	movs	r3, r0
   17136:	607b      	str	r3, [r7, #4]
	return error;
   17138:	687b      	ldr	r3, [r7, #4]
}
   1713a:	0018      	movs	r0, r3
   1713c:	46bd      	mov	sp, r7
   1713e:	b002      	add	sp, #8
   17140:	bd80      	pop	{r7, pc}
   17142:	46c0      	nop			; (mov r8, r8)
   17144:	00037728 	.word	0x00037728
   17148:	20004400 	.word	0x20004400
   1714c:	00016269 	.word	0x00016269

00017150 <SeesawInitializeKeypad>:
/*****************************************************************************************
*  @brief     Activates a given key on the keypad
*  @return     Returns any error code found when executing task.
****************************************************************************************/
static void SeesawInitializeKeypad(void)
{
   17150:	b580      	push	{r7, lr}
   17152:	b082      	sub	sp, #8
   17154:	af00      	add	r7, sp, #0
	seesawData.address = NEO_TRELLIS_ADDR;
   17156:	4b33      	ldr	r3, [pc, #204]	; (17224 <SeesawInitializeKeypad+0xd4>)
   17158:	222e      	movs	r2, #46	; 0x2e
   1715a:	701a      	strb	r2, [r3, #0]
	seesawData.msgOut = &msgKeypadEnableInt;
   1715c:	4b31      	ldr	r3, [pc, #196]	; (17224 <SeesawInitializeKeypad+0xd4>)
   1715e:	4a32      	ldr	r2, [pc, #200]	; (17228 <SeesawInitializeKeypad+0xd8>)
   17160:	605a      	str	r2, [r3, #4]
	seesawData.lenOut = sizeof(msgKeypadEnableInt);
   17162:	4b30      	ldr	r3, [pc, #192]	; (17224 <SeesawInitializeKeypad+0xd4>)
   17164:	2203      	movs	r2, #3
   17166:	81da      	strh	r2, [r3, #14]
	seesawData.lenIn = 0;
   17168:	4b2e      	ldr	r3, [pc, #184]	; (17224 <SeesawInitializeKeypad+0xd4>)
   1716a:	2200      	movs	r2, #0
   1716c:	819a      	strh	r2, [r3, #12]

	int32_t error = I2cWriteDataWait(&seesawData, 100);
   1716e:	4b2d      	ldr	r3, [pc, #180]	; (17224 <SeesawInitializeKeypad+0xd4>)
   17170:	2164      	movs	r1, #100	; 0x64
   17172:	0018      	movs	r0, r3
   17174:	4b2d      	ldr	r3, [pc, #180]	; (1722c <SeesawInitializeKeypad+0xdc>)
   17176:	4798      	blx	r3
   17178:	0003      	movs	r3, r0
   1717a:	603b      	str	r3, [r7, #0]
	if(ERROR_NONE != error)
   1717c:	683b      	ldr	r3, [r7, #0]
   1717e:	2b00      	cmp	r3, #0
   17180:	d003      	beq.n	1718a <SeesawInitializeKeypad+0x3a>
	{
		SerialConsoleWriteString("Could not initialize Keypad!/r/n");
   17182:	4b2b      	ldr	r3, [pc, #172]	; (17230 <SeesawInitializeKeypad+0xe0>)
   17184:	0018      	movs	r0, r3
   17186:	4b2b      	ldr	r3, [pc, #172]	; (17234 <SeesawInitializeKeypad+0xe4>)
   17188:	4798      	blx	r3
	}

	//Initialize all buttons to register an event for both press and release
	for(int i=0; i<16; i++){
   1718a:	2300      	movs	r3, #0
   1718c:	607b      	str	r3, [r7, #4]
   1718e:	e041      	b.n	17214 <SeesawInitializeKeypad+0xc4>
		error = SeesawActivateKey(NEO_TRELLIS_KEY(i), SEESAW_KEYPAD_EDGE_RISING, true);
   17190:	687b      	ldr	r3, [r7, #4]
   17192:	2b00      	cmp	r3, #0
   17194:	da00      	bge.n	17198 <SeesawInitializeKeypad+0x48>
   17196:	3303      	adds	r3, #3
   17198:	109b      	asrs	r3, r3, #2
   1719a:	b2db      	uxtb	r3, r3
   1719c:	00db      	lsls	r3, r3, #3
   1719e:	b2da      	uxtb	r2, r3
   171a0:	687b      	ldr	r3, [r7, #4]
   171a2:	4925      	ldr	r1, [pc, #148]	; (17238 <SeesawInitializeKeypad+0xe8>)
   171a4:	400b      	ands	r3, r1
   171a6:	d504      	bpl.n	171b2 <SeesawInitializeKeypad+0x62>
   171a8:	3b01      	subs	r3, #1
   171aa:	2104      	movs	r1, #4
   171ac:	4249      	negs	r1, r1
   171ae:	430b      	orrs	r3, r1
   171b0:	3301      	adds	r3, #1
   171b2:	b2db      	uxtb	r3, r3
   171b4:	18d3      	adds	r3, r2, r3
   171b6:	b2db      	uxtb	r3, r3
   171b8:	2201      	movs	r2, #1
   171ba:	2103      	movs	r1, #3
   171bc:	0018      	movs	r0, r3
   171be:	4b1f      	ldr	r3, [pc, #124]	; (1723c <SeesawInitializeKeypad+0xec>)
   171c0:	4798      	blx	r3
   171c2:	0003      	movs	r3, r0
   171c4:	603b      	str	r3, [r7, #0]
		error |= SeesawActivateKey(NEO_TRELLIS_KEY(i), SEESAW_KEYPAD_EDGE_FALLING, true);
   171c6:	687b      	ldr	r3, [r7, #4]
   171c8:	2b00      	cmp	r3, #0
   171ca:	da00      	bge.n	171ce <SeesawInitializeKeypad+0x7e>
   171cc:	3303      	adds	r3, #3
   171ce:	109b      	asrs	r3, r3, #2
   171d0:	b2db      	uxtb	r3, r3
   171d2:	00db      	lsls	r3, r3, #3
   171d4:	b2da      	uxtb	r2, r3
   171d6:	687b      	ldr	r3, [r7, #4]
   171d8:	4917      	ldr	r1, [pc, #92]	; (17238 <SeesawInitializeKeypad+0xe8>)
   171da:	400b      	ands	r3, r1
   171dc:	d504      	bpl.n	171e8 <SeesawInitializeKeypad+0x98>
   171de:	3b01      	subs	r3, #1
   171e0:	2104      	movs	r1, #4
   171e2:	4249      	negs	r1, r1
   171e4:	430b      	orrs	r3, r1
   171e6:	3301      	adds	r3, #1
   171e8:	b2db      	uxtb	r3, r3
   171ea:	18d3      	adds	r3, r2, r3
   171ec:	b2db      	uxtb	r3, r3
   171ee:	2201      	movs	r2, #1
   171f0:	2102      	movs	r1, #2
   171f2:	0018      	movs	r0, r3
   171f4:	4b11      	ldr	r3, [pc, #68]	; (1723c <SeesawInitializeKeypad+0xec>)
   171f6:	4798      	blx	r3
   171f8:	0002      	movs	r2, r0
   171fa:	683b      	ldr	r3, [r7, #0]
   171fc:	4313      	orrs	r3, r2
   171fe:	603b      	str	r3, [r7, #0]
		if(ERROR_NONE != error)
   17200:	683b      	ldr	r3, [r7, #0]
   17202:	2b00      	cmp	r3, #0
   17204:	d003      	beq.n	1720e <SeesawInitializeKeypad+0xbe>
		{
			SerialConsoleWriteString("Could not initialize Keypad!/r/n");
   17206:	4b0a      	ldr	r3, [pc, #40]	; (17230 <SeesawInitializeKeypad+0xe0>)
   17208:	0018      	movs	r0, r3
   1720a:	4b0a      	ldr	r3, [pc, #40]	; (17234 <SeesawInitializeKeypad+0xe4>)
   1720c:	4798      	blx	r3
	for(int i=0; i<16; i++){
   1720e:	687b      	ldr	r3, [r7, #4]
   17210:	3301      	adds	r3, #1
   17212:	607b      	str	r3, [r7, #4]
   17214:	687b      	ldr	r3, [r7, #4]
   17216:	2b0f      	cmp	r3, #15
   17218:	ddba      	ble.n	17190 <SeesawInitializeKeypad+0x40>
		}
	}
}
   1721a:	46c0      	nop			; (mov r8, r8)
   1721c:	46bd      	mov	sp, r7
   1721e:	b002      	add	sp, #8
   17220:	bd80      	pop	{r7, pc}
   17222:	46c0      	nop			; (mov r8, r8)
   17224:	20004400 	.word	0x20004400
   17228:	00037638 	.word	0x00037638
   1722c:	00016269 	.word	0x00016269
   17230:	0003772c 	.word	0x0003772c
   17234:	0001db09 	.word	0x0001db09
   17238:	80000003 	.word	0x80000003
   1723c:	00016f75 	.word	0x00016f75

00017240 <SeesawTurnOnLedTest>:


static void SeesawTurnOnLedTest(void)
{
   17240:	b5b0      	push	{r4, r5, r7, lr}
   17242:	af00      	add	r7, sp, #0
	SeesawSetLed(15, 255, 255, 255);
   17244:	23ff      	movs	r3, #255	; 0xff
   17246:	22ff      	movs	r2, #255	; 0xff
   17248:	21ff      	movs	r1, #255	; 0xff
   1724a:	200f      	movs	r0, #15
   1724c:	4c09      	ldr	r4, [pc, #36]	; (17274 <SeesawTurnOnLedTest+0x34>)
   1724e:	47a0      	blx	r4
	SeesawOrderLedUpdate();
   17250:	4b09      	ldr	r3, [pc, #36]	; (17278 <SeesawTurnOnLedTest+0x38>)
   17252:	4798      	blx	r3
	vTaskDelay(400);
   17254:	23c8      	movs	r3, #200	; 0xc8
   17256:	005b      	lsls	r3, r3, #1
   17258:	0018      	movs	r0, r3
   1725a:	4b08      	ldr	r3, [pc, #32]	; (1727c <SeesawTurnOnLedTest+0x3c>)
   1725c:	4798      	blx	r3

	SeesawSetLed(15, 0, 0, 0);
   1725e:	2300      	movs	r3, #0
   17260:	2200      	movs	r2, #0
   17262:	2100      	movs	r1, #0
   17264:	200f      	movs	r0, #15
   17266:	4c03      	ldr	r4, [pc, #12]	; (17274 <SeesawTurnOnLedTest+0x34>)
   17268:	47a0      	blx	r4
	SeesawOrderLedUpdate();
   1726a:	4b03      	ldr	r3, [pc, #12]	; (17278 <SeesawTurnOnLedTest+0x38>)
   1726c:	4798      	blx	r3
   1726e:	46c0      	nop			; (mov r8, r8)
   17270:	46bd      	mov	sp, r7
   17272:	bdb0      	pop	{r4, r5, r7, pc}
   17274:	0001703d 	.word	0x0001703d
   17278:	00017111 	.word	0x00017111
   1727c:	0001beb5 	.word	0x0001beb5

00017280 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
   17280:	b580      	push	{r7, lr}
   17282:	b082      	sub	sp, #8
   17284:	af00      	add	r7, sp, #0
   17286:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   17288:	687b      	ldr	r3, [r7, #4]
   1728a:	2200      	movs	r2, #0
   1728c:	701a      	strb	r2, [r3, #0]
}
   1728e:	46c0      	nop			; (mov r8, r8)
   17290:	46bd      	mov	sp, r7
   17292:	b002      	add	sp, #8
   17294:	bd80      	pop	{r7, pc}
	...

00017298 <system_apb_clock_set_mask>:
{
   17298:	b580      	push	{r7, lr}
   1729a:	b082      	sub	sp, #8
   1729c:	af00      	add	r7, sp, #0
   1729e:	0002      	movs	r2, r0
   172a0:	6039      	str	r1, [r7, #0]
   172a2:	1dfb      	adds	r3, r7, #7
   172a4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   172a6:	1dfb      	adds	r3, r7, #7
   172a8:	781b      	ldrb	r3, [r3, #0]
   172aa:	2b01      	cmp	r3, #1
   172ac:	d00a      	beq.n	172c4 <system_apb_clock_set_mask+0x2c>
   172ae:	2b02      	cmp	r3, #2
   172b0:	d00f      	beq.n	172d2 <system_apb_clock_set_mask+0x3a>
   172b2:	2b00      	cmp	r3, #0
   172b4:	d114      	bne.n	172e0 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   172b6:	4b0e      	ldr	r3, [pc, #56]	; (172f0 <system_apb_clock_set_mask+0x58>)
   172b8:	4a0d      	ldr	r2, [pc, #52]	; (172f0 <system_apb_clock_set_mask+0x58>)
   172ba:	6991      	ldr	r1, [r2, #24]
   172bc:	683a      	ldr	r2, [r7, #0]
   172be:	430a      	orrs	r2, r1
   172c0:	619a      	str	r2, [r3, #24]
			break;
   172c2:	e00f      	b.n	172e4 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   172c4:	4b0a      	ldr	r3, [pc, #40]	; (172f0 <system_apb_clock_set_mask+0x58>)
   172c6:	4a0a      	ldr	r2, [pc, #40]	; (172f0 <system_apb_clock_set_mask+0x58>)
   172c8:	69d1      	ldr	r1, [r2, #28]
   172ca:	683a      	ldr	r2, [r7, #0]
   172cc:	430a      	orrs	r2, r1
   172ce:	61da      	str	r2, [r3, #28]
			break;
   172d0:	e008      	b.n	172e4 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   172d2:	4b07      	ldr	r3, [pc, #28]	; (172f0 <system_apb_clock_set_mask+0x58>)
   172d4:	4a06      	ldr	r2, [pc, #24]	; (172f0 <system_apb_clock_set_mask+0x58>)
   172d6:	6a11      	ldr	r1, [r2, #32]
   172d8:	683a      	ldr	r2, [r7, #0]
   172da:	430a      	orrs	r2, r1
   172dc:	621a      	str	r2, [r3, #32]
			break;
   172de:	e001      	b.n	172e4 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   172e0:	2317      	movs	r3, #23
   172e2:	e000      	b.n	172e6 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   172e4:	2300      	movs	r3, #0
}
   172e6:	0018      	movs	r0, r3
   172e8:	46bd      	mov	sp, r7
   172ea:	b002      	add	sp, #8
   172ec:	bd80      	pop	{r7, pc}
   172ee:	46c0      	nop			; (mov r8, r8)
   172f0:	40000400 	.word	0x40000400

000172f4 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
   172f4:	b580      	push	{r7, lr}
   172f6:	b082      	sub	sp, #8
   172f8:	af00      	add	r7, sp, #0
   172fa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
   172fc:	687b      	ldr	r3, [r7, #4]
   172fe:	2280      	movs	r2, #128	; 0x80
   17300:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   17302:	687b      	ldr	r3, [r7, #4]
   17304:	2200      	movs	r2, #0
   17306:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   17308:	687b      	ldr	r3, [r7, #4]
   1730a:	2201      	movs	r2, #1
   1730c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   1730e:	687b      	ldr	r3, [r7, #4]
   17310:	2200      	movs	r2, #0
   17312:	70da      	strb	r2, [r3, #3]
}
   17314:	46c0      	nop			; (mov r8, r8)
   17316:	46bd      	mov	sp, r7
   17318:	b002      	add	sp, #8
   1731a:	bd80      	pop	{r7, pc}

0001731c <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
   1731c:	b580      	push	{r7, lr}
   1731e:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   17320:	4b05      	ldr	r3, [pc, #20]	; (17338 <system_is_debugger_present+0x1c>)
   17322:	789b      	ldrb	r3, [r3, #2]
   17324:	b2db      	uxtb	r3, r3
   17326:	001a      	movs	r2, r3
   17328:	2302      	movs	r3, #2
   1732a:	4013      	ands	r3, r2
   1732c:	1e5a      	subs	r2, r3, #1
   1732e:	4193      	sbcs	r3, r2
   17330:	b2db      	uxtb	r3, r3
}
   17332:	0018      	movs	r0, r3
   17334:	46bd      	mov	sp, r7
   17336:	bd80      	pop	{r7, pc}
   17338:	41002000 	.word	0x41002000

0001733c <system_interrupt_enter_critical_section>:
{
   1733c:	b580      	push	{r7, lr}
   1733e:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   17340:	4b02      	ldr	r3, [pc, #8]	; (1734c <system_interrupt_enter_critical_section+0x10>)
   17342:	4798      	blx	r3
}
   17344:	46c0      	nop			; (mov r8, r8)
   17346:	46bd      	mov	sp, r7
   17348:	bd80      	pop	{r7, pc}
   1734a:	46c0      	nop			; (mov r8, r8)
   1734c:	00025be9 	.word	0x00025be9

00017350 <system_interrupt_leave_critical_section>:
{
   17350:	b580      	push	{r7, lr}
   17352:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   17354:	4b02      	ldr	r3, [pc, #8]	; (17360 <system_interrupt_leave_critical_section+0x10>)
   17356:	4798      	blx	r3
}
   17358:	46c0      	nop			; (mov r8, r8)
   1735a:	46bd      	mov	sp, r7
   1735c:	bd80      	pop	{r7, pc}
   1735e:	46c0      	nop			; (mov r8, r8)
   17360:	00025c3d 	.word	0x00025c3d

00017364 <system_interrupt_disable>:
{
   17364:	b580      	push	{r7, lr}
   17366:	b082      	sub	sp, #8
   17368:	af00      	add	r7, sp, #0
   1736a:	0002      	movs	r2, r0
   1736c:	1dfb      	adds	r3, r7, #7
   1736e:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   17370:	4a07      	ldr	r2, [pc, #28]	; (17390 <system_interrupt_disable+0x2c>)
   17372:	1dfb      	adds	r3, r7, #7
   17374:	781b      	ldrb	r3, [r3, #0]
   17376:	0019      	movs	r1, r3
   17378:	231f      	movs	r3, #31
   1737a:	400b      	ands	r3, r1
   1737c:	2101      	movs	r1, #1
   1737e:	4099      	lsls	r1, r3
   17380:	000b      	movs	r3, r1
   17382:	0019      	movs	r1, r3
   17384:	2380      	movs	r3, #128	; 0x80
   17386:	50d1      	str	r1, [r2, r3]
}
   17388:	46c0      	nop			; (mov r8, r8)
   1738a:	46bd      	mov	sp, r7
   1738c:	b002      	add	sp, #8
   1738e:	bd80      	pop	{r7, pc}
   17390:	e000e100 	.word	0xe000e100

00017394 <i2c_master_is_syncing>:
{
   17394:	b580      	push	{r7, lr}
   17396:	b084      	sub	sp, #16
   17398:	af00      	add	r7, sp, #0
   1739a:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   1739c:	687b      	ldr	r3, [r7, #4]
   1739e:	681b      	ldr	r3, [r3, #0]
   173a0:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   173a2:	68fb      	ldr	r3, [r7, #12]
   173a4:	69db      	ldr	r3, [r3, #28]
   173a6:	2207      	movs	r2, #7
   173a8:	4013      	ands	r3, r2
   173aa:	1e5a      	subs	r2, r3, #1
   173ac:	4193      	sbcs	r3, r2
   173ae:	b2db      	uxtb	r3, r3
}
   173b0:	0018      	movs	r0, r3
   173b2:	46bd      	mov	sp, r7
   173b4:	b004      	add	sp, #16
   173b6:	bd80      	pop	{r7, pc}

000173b8 <_i2c_master_wait_for_sync>:
{
   173b8:	b580      	push	{r7, lr}
   173ba:	b082      	sub	sp, #8
   173bc:	af00      	add	r7, sp, #0
   173be:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
   173c0:	46c0      	nop			; (mov r8, r8)
   173c2:	687b      	ldr	r3, [r7, #4]
   173c4:	0018      	movs	r0, r3
   173c6:	4b04      	ldr	r3, [pc, #16]	; (173d8 <_i2c_master_wait_for_sync+0x20>)
   173c8:	4798      	blx	r3
   173ca:	1e03      	subs	r3, r0, #0
   173cc:	d1f9      	bne.n	173c2 <_i2c_master_wait_for_sync+0xa>
}
   173ce:	46c0      	nop			; (mov r8, r8)
   173d0:	46bd      	mov	sp, r7
   173d2:	b002      	add	sp, #8
   173d4:	bd80      	pop	{r7, pc}
   173d6:	46c0      	nop			; (mov r8, r8)
   173d8:	00017395 	.word	0x00017395

000173dc <i2c_master_disable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_disable(
		const struct i2c_master_module *const module)
{
   173dc:	b580      	push	{r7, lr}
   173de:	b084      	sub	sp, #16
   173e0:	af00      	add	r7, sp, #0
   173e2:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   173e4:	687b      	ldr	r3, [r7, #4]
   173e6:	681b      	ldr	r3, [r3, #0]
   173e8:	60fb      	str	r3, [r7, #12]

#if I2C_MASTER_CALLBACK_MODE == true
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   173ea:	687b      	ldr	r3, [r7, #4]
   173ec:	681b      	ldr	r3, [r3, #0]
   173ee:	0018      	movs	r0, r3
   173f0:	4b0d      	ldr	r3, [pc, #52]	; (17428 <i2c_master_disable+0x4c>)
   173f2:	4798      	blx	r3
   173f4:	0003      	movs	r3, r0
   173f6:	0018      	movs	r0, r3
   173f8:	4b0c      	ldr	r3, [pc, #48]	; (1742c <i2c_master_disable+0x50>)
   173fa:	4798      	blx	r3
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   173fc:	687b      	ldr	r3, [r7, #4]
   173fe:	0018      	movs	r0, r3
   17400:	4b0b      	ldr	r3, [pc, #44]	; (17430 <i2c_master_disable+0x54>)
   17402:	4798      	blx	r3

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
   17404:	68fb      	ldr	r3, [r7, #12]
   17406:	2283      	movs	r2, #131	; 0x83
   17408:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
   1740a:	68fb      	ldr	r3, [r7, #12]
   1740c:	2283      	movs	r2, #131	; 0x83
   1740e:	761a      	strb	r2, [r3, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
   17410:	68fb      	ldr	r3, [r7, #12]
   17412:	681b      	ldr	r3, [r3, #0]
   17414:	2202      	movs	r2, #2
   17416:	4393      	bics	r3, r2
   17418:	001a      	movs	r2, r3
   1741a:	68fb      	ldr	r3, [r7, #12]
   1741c:	601a      	str	r2, [r3, #0]

}
   1741e:	46c0      	nop			; (mov r8, r8)
   17420:	46bd      	mov	sp, r7
   17422:	b004      	add	sp, #16
   17424:	bd80      	pop	{r7, pc}
   17426:	46c0      	nop			; (mov r8, r8)
   17428:	000270bd 	.word	0x000270bd
   1742c:	00017365 	.word	0x00017365
   17430:	000173b9 	.word	0x000173b9

00017434 <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
   17434:	b5f0      	push	{r4, r5, r6, r7, lr}
   17436:	b097      	sub	sp, #92	; 0x5c
   17438:	af00      	add	r7, sp, #0
   1743a:	6178      	str	r0, [r7, #20]
   1743c:	6139      	str	r1, [r7, #16]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
   1743e:	2300      	movs	r3, #0
   17440:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t tmp_baud_hs = 0;
   17442:	2300      	movs	r3, #0
   17444:	653b      	str	r3, [r7, #80]	; 0x50
	int32_t tmp_baudlow_hs = 0;
   17446:	2300      	movs	r3, #0
   17448:	64fb      	str	r3, [r7, #76]	; 0x4c
	enum status_code tmp_status_code = STATUS_OK;
   1744a:	233b      	movs	r3, #59	; 0x3b
   1744c:	2210      	movs	r2, #16
   1744e:	4694      	mov	ip, r2
   17450:	44bc      	add	ip, r7
   17452:	4463      	add	r3, ip
   17454:	2200      	movs	r2, #0
   17456:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   17458:	697b      	ldr	r3, [r7, #20]
   1745a:	681b      	ldr	r3, [r3, #0]
   1745c:	63bb      	str	r3, [r7, #56]	; 0x38
	Sercom *const sercom_hw = module->hw;
   1745e:	697b      	ldr	r3, [r7, #20]
   17460:	681b      	ldr	r3, [r3, #0]
   17462:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
   17464:	2323      	movs	r3, #35	; 0x23
   17466:	2210      	movs	r2, #16
   17468:	18ba      	adds	r2, r7, r2
   1746a:	18d4      	adds	r4, r2, r3
   1746c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1746e:	0018      	movs	r0, r3
   17470:	4bc0      	ldr	r3, [pc, #768]	; (17774 <_i2c_master_set_config+0x340>)
   17472:	4798      	blx	r3
   17474:	0003      	movs	r3, r0
   17476:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   17478:	230c      	movs	r3, #12
   1747a:	2210      	movs	r2, #16
   1747c:	4694      	mov	ip, r2
   1747e:	44bc      	add	ip, r7
   17480:	4463      	add	r3, ip
   17482:	0018      	movs	r0, r3
   17484:	4bbc      	ldr	r3, [pc, #752]	; (17778 <_i2c_master_set_config+0x344>)
   17486:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
   17488:	693b      	ldr	r3, [r7, #16]
   1748a:	69db      	ldr	r3, [r3, #28]
   1748c:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t pad1 = config->pinmux_pad1;
   1748e:	693b      	ldr	r3, [r7, #16]
   17490:	6a1b      	ldr	r3, [r3, #32]
   17492:	643b      	str	r3, [r7, #64]	; 0x40

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
   17494:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   17496:	2b00      	cmp	r3, #0
   17498:	d106      	bne.n	174a8 <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
   1749a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1749c:	2100      	movs	r1, #0
   1749e:	0018      	movs	r0, r3
   174a0:	4bb6      	ldr	r3, [pc, #728]	; (1777c <_i2c_master_set_config+0x348>)
   174a2:	4798      	blx	r3
   174a4:	0003      	movs	r3, r0
   174a6:	647b      	str	r3, [r7, #68]	; 0x44
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
   174a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   174aa:	b2da      	uxtb	r2, r3
   174ac:	230c      	movs	r3, #12
   174ae:	2110      	movs	r1, #16
   174b0:	468c      	mov	ip, r1
   174b2:	44bc      	add	ip, r7
   174b4:	4463      	add	r3, ip
   174b6:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   174b8:	230c      	movs	r3, #12
   174ba:	2210      	movs	r2, #16
   174bc:	4694      	mov	ip, r2
   174be:	44bc      	add	ip, r7
   174c0:	4463      	add	r3, ip
   174c2:	2202      	movs	r2, #2
   174c4:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
   174c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   174c8:	0c1b      	lsrs	r3, r3, #16
   174ca:	b2db      	uxtb	r3, r3
   174cc:	220c      	movs	r2, #12
   174ce:	2110      	movs	r1, #16
   174d0:	468c      	mov	ip, r1
   174d2:	44bc      	add	ip, r7
   174d4:	4462      	add	r2, ip
   174d6:	0011      	movs	r1, r2
   174d8:	0018      	movs	r0, r3
   174da:	4ba9      	ldr	r3, [pc, #676]	; (17780 <_i2c_master_set_config+0x34c>)
   174dc:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
   174de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   174e0:	2b00      	cmp	r3, #0
   174e2:	d106      	bne.n	174f2 <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
   174e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   174e6:	2101      	movs	r1, #1
   174e8:	0018      	movs	r0, r3
   174ea:	4ba4      	ldr	r3, [pc, #656]	; (1777c <_i2c_master_set_config+0x348>)
   174ec:	4798      	blx	r3
   174ee:	0003      	movs	r3, r0
   174f0:	643b      	str	r3, [r7, #64]	; 0x40
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
   174f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   174f4:	b2da      	uxtb	r2, r3
   174f6:	230c      	movs	r3, #12
   174f8:	2110      	movs	r1, #16
   174fa:	468c      	mov	ip, r1
   174fc:	44bc      	add	ip, r7
   174fe:	4463      	add	r3, ip
   17500:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   17502:	230c      	movs	r3, #12
   17504:	2210      	movs	r2, #16
   17506:	4694      	mov	ip, r2
   17508:	44bc      	add	ip, r7
   1750a:	4463      	add	r3, ip
   1750c:	2202      	movs	r2, #2
   1750e:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
   17510:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   17512:	0c1b      	lsrs	r3, r3, #16
   17514:	b2db      	uxtb	r3, r3
   17516:	220c      	movs	r2, #12
   17518:	2110      	movs	r1, #16
   1751a:	468c      	mov	ip, r1
   1751c:	44bc      	add	ip, r7
   1751e:	4462      	add	r2, ip
   17520:	0011      	movs	r1, r2
   17522:	0018      	movs	r0, r3
   17524:	4b96      	ldr	r3, [pc, #600]	; (17780 <_i2c_master_set_config+0x34c>)
   17526:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
   17528:	693b      	ldr	r3, [r7, #16]
   1752a:	8a9a      	ldrh	r2, [r3, #20]
   1752c:	697b      	ldr	r3, [r7, #20]
   1752e:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
   17530:	693b      	ldr	r3, [r7, #16]
   17532:	8ada      	ldrh	r2, [r3, #22]
   17534:	697b      	ldr	r3, [r7, #20]
   17536:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   17538:	693b      	ldr	r3, [r7, #16]
   1753a:	7e1b      	ldrb	r3, [r3, #24]
   1753c:	2b00      	cmp	r3, #0
   1753e:	d103      	bne.n	17548 <_i2c_master_set_config+0x114>
   17540:	4b90      	ldr	r3, [pc, #576]	; (17784 <_i2c_master_set_config+0x350>)
   17542:	4798      	blx	r3
   17544:	1e03      	subs	r3, r0, #0
   17546:	d002      	beq.n	1754e <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
   17548:	2380      	movs	r3, #128	; 0x80
   1754a:	657b      	str	r3, [r7, #84]	; 0x54
   1754c:	e001      	b.n	17552 <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
   1754e:	2300      	movs	r3, #0
   17550:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
   17552:	693b      	ldr	r3, [r7, #16]
   17554:	691b      	ldr	r3, [r3, #16]
   17556:	2b00      	cmp	r3, #0
   17558:	d004      	beq.n	17564 <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
   1755a:	693b      	ldr	r3, [r7, #16]
   1755c:	691b      	ldr	r3, [r3, #16]
   1755e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   17560:	4313      	orrs	r3, r2
   17562:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
   17564:	693b      	ldr	r3, [r7, #16]
   17566:	689b      	ldr	r3, [r3, #8]
   17568:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   1756a:	4313      	orrs	r3, r2
   1756c:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
   1756e:	693b      	ldr	r3, [r7, #16]
   17570:	2224      	movs	r2, #36	; 0x24
   17572:	5c9b      	ldrb	r3, [r3, r2]
   17574:	2b00      	cmp	r3, #0
   17576:	d004      	beq.n	17582 <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
   17578:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1757a:	2280      	movs	r2, #128	; 0x80
   1757c:	05d2      	lsls	r2, r2, #23
   1757e:	4313      	orrs	r3, r2
   17580:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
   17582:	693b      	ldr	r3, [r7, #16]
   17584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   17586:	2b00      	cmp	r3, #0
   17588:	d004      	beq.n	17594 <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
   1758a:	693b      	ldr	r3, [r7, #16]
   1758c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1758e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   17590:	4313      	orrs	r3, r2
   17592:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
   17594:	693b      	ldr	r3, [r7, #16]
   17596:	222c      	movs	r2, #44	; 0x2c
   17598:	5c9b      	ldrb	r3, [r3, r2]
   1759a:	2b00      	cmp	r3, #0
   1759c:	d105      	bne.n	175aa <_i2c_master_set_config+0x176>
   1759e:	693b      	ldr	r3, [r7, #16]
   175a0:	689a      	ldr	r2, [r3, #8]
   175a2:	2380      	movs	r3, #128	; 0x80
   175a4:	049b      	lsls	r3, r3, #18
   175a6:	429a      	cmp	r2, r3
   175a8:	d104      	bne.n	175b4 <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
   175aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   175ac:	2280      	movs	r2, #128	; 0x80
   175ae:	0512      	lsls	r2, r2, #20
   175b0:	4313      	orrs	r3, r2
   175b2:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
   175b4:	693b      	ldr	r3, [r7, #16]
   175b6:	222d      	movs	r2, #45	; 0x2d
   175b8:	5c9b      	ldrb	r3, [r3, r2]
   175ba:	2b00      	cmp	r3, #0
   175bc:	d004      	beq.n	175c8 <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
   175be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   175c0:	2280      	movs	r2, #128	; 0x80
   175c2:	0412      	lsls	r2, r2, #16
   175c4:	4313      	orrs	r3, r2
   175c6:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
   175c8:	693b      	ldr	r3, [r7, #16]
   175ca:	222e      	movs	r2, #46	; 0x2e
   175cc:	5c9b      	ldrb	r3, [r3, r2]
   175ce:	2b00      	cmp	r3, #0
   175d0:	d004      	beq.n	175dc <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
   175d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   175d4:	2280      	movs	r2, #128	; 0x80
   175d6:	03d2      	lsls	r2, r2, #15
   175d8:	4313      	orrs	r3, r2
   175da:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
   175dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   175de:	681a      	ldr	r2, [r3, #0]
   175e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   175e2:	431a      	orrs	r2, r3
   175e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   175e6:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
   175e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   175ea:	2280      	movs	r2, #128	; 0x80
   175ec:	0052      	lsls	r2, r2, #1
   175ee:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
   175f0:	2323      	movs	r3, #35	; 0x23
   175f2:	2210      	movs	r2, #16
   175f4:	4694      	mov	ip, r2
   175f6:	44bc      	add	ip, r7
   175f8:	4463      	add	r3, ip
   175fa:	781b      	ldrb	r3, [r3, #0]
   175fc:	3314      	adds	r3, #20
   175fe:	b2db      	uxtb	r3, r3
   17600:	0018      	movs	r0, r3
   17602:	4b61      	ldr	r3, [pc, #388]	; (17788 <_i2c_master_set_config+0x354>)
   17604:	4798      	blx	r3
   17606:	0003      	movs	r3, r0
   17608:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fscl        = 1000 * config->baud_rate;
   1760a:	693b      	ldr	r3, [r7, #16]
   1760c:	681b      	ldr	r3, [r3, #0]
   1760e:	22fa      	movs	r2, #250	; 0xfa
   17610:	0092      	lsls	r2, r2, #2
   17612:	4353      	muls	r3, r2
   17614:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
   17616:	693b      	ldr	r3, [r7, #16]
   17618:	685b      	ldr	r3, [r3, #4]
   1761a:	22fa      	movs	r2, #250	; 0xfa
   1761c:	0092      	lsls	r2, r2, #2
   1761e:	4353      	muls	r3, r2
   17620:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t trise       = config->sda_scl_rise_time_ns;
   17622:	693b      	ldr	r3, [r7, #16]
   17624:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   17626:	623b      	str	r3, [r7, #32]
	
	tmp_baud = (int32_t)(div_ceil(
   17628:	4b58      	ldr	r3, [pc, #352]	; (1778c <_i2c_master_set_config+0x358>)
   1762a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1762c:	4798      	blx	r3
   1762e:	0005      	movs	r5, r0
   17630:	000e      	movs	r6, r1
   17632:	4b56      	ldr	r3, [pc, #344]	; (1778c <_i2c_master_set_config+0x358>)
   17634:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   17636:	4798      	blx	r3
   17638:	60b8      	str	r0, [r7, #8]
   1763a:	60f9      	str	r1, [r7, #12]
   1763c:	4b53      	ldr	r3, [pc, #332]	; (1778c <_i2c_master_set_config+0x358>)
   1763e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   17640:	4798      	blx	r3
   17642:	4c53      	ldr	r4, [pc, #332]	; (17790 <_i2c_master_set_config+0x35c>)
   17644:	4a53      	ldr	r2, [pc, #332]	; (17794 <_i2c_master_set_config+0x360>)
   17646:	4b54      	ldr	r3, [pc, #336]	; (17798 <_i2c_master_set_config+0x364>)
   17648:	47a0      	blx	r4
   1764a:	0003      	movs	r3, r0
   1764c:	000c      	movs	r4, r1
   1764e:	603b      	str	r3, [r7, #0]
   17650:	607c      	str	r4, [r7, #4]
   17652:	4b4e      	ldr	r3, [pc, #312]	; (1778c <_i2c_master_set_config+0x358>)
   17654:	6a38      	ldr	r0, [r7, #32]
   17656:	4798      	blx	r3
   17658:	0002      	movs	r2, r0
   1765a:	000b      	movs	r3, r1
   1765c:	4c4c      	ldr	r4, [pc, #304]	; (17790 <_i2c_master_set_config+0x35c>)
   1765e:	6838      	ldr	r0, [r7, #0]
   17660:	6879      	ldr	r1, [r7, #4]
   17662:	47a0      	blx	r4
   17664:	0003      	movs	r3, r0
   17666:	000c      	movs	r4, r1
   17668:	0018      	movs	r0, r3
   1766a:	0021      	movs	r1, r4
   1766c:	4c4b      	ldr	r4, [pc, #300]	; (1779c <_i2c_master_set_config+0x368>)
   1766e:	2200      	movs	r2, #0
   17670:	4b4b      	ldr	r3, [pc, #300]	; (177a0 <_i2c_master_set_config+0x36c>)
   17672:	47a0      	blx	r4
   17674:	0003      	movs	r3, r0
   17676:	000c      	movs	r4, r1
   17678:	001a      	movs	r2, r3
   1767a:	0023      	movs	r3, r4
   1767c:	4c44      	ldr	r4, [pc, #272]	; (17790 <_i2c_master_set_config+0x35c>)
   1767e:	68b8      	ldr	r0, [r7, #8]
   17680:	68f9      	ldr	r1, [r7, #12]
   17682:	47a0      	blx	r4
   17684:	0003      	movs	r3, r0
   17686:	000c      	movs	r4, r1
   17688:	001a      	movs	r2, r3
   1768a:	0023      	movs	r3, r4
   1768c:	4c45      	ldr	r4, [pc, #276]	; (177a4 <_i2c_master_set_config+0x370>)
   1768e:	0028      	movs	r0, r5
   17690:	0031      	movs	r1, r6
   17692:	47a0      	blx	r4
   17694:	0003      	movs	r3, r0
   17696:	000c      	movs	r4, r1
   17698:	001d      	movs	r5, r3
   1769a:	0026      	movs	r6, r4
   1769c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1769e:	005a      	lsls	r2, r3, #1
   176a0:	4b3a      	ldr	r3, [pc, #232]	; (1778c <_i2c_master_set_config+0x358>)
   176a2:	0010      	movs	r0, r2
   176a4:	4798      	blx	r3
   176a6:	0002      	movs	r2, r0
   176a8:	000b      	movs	r3, r1
   176aa:	4c3c      	ldr	r4, [pc, #240]	; (1779c <_i2c_master_set_config+0x368>)
   176ac:	0028      	movs	r0, r5
   176ae:	0031      	movs	r1, r6
   176b0:	47a0      	blx	r4
   176b2:	0003      	movs	r3, r0
   176b4:	000c      	movs	r4, r1
   176b6:	0018      	movs	r0, r3
   176b8:	0021      	movs	r1, r4
   176ba:	4c3a      	ldr	r4, [pc, #232]	; (177a4 <_i2c_master_set_config+0x370>)
   176bc:	2200      	movs	r2, #0
   176be:	4b3a      	ldr	r3, [pc, #232]	; (177a8 <_i2c_master_set_config+0x374>)
   176c0:	47a0      	blx	r4
   176c2:	0003      	movs	r3, r0
   176c4:	000c      	movs	r4, r1
   176c6:	001d      	movs	r5, r3
   176c8:	0026      	movs	r6, r4
   176ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
   176cc:	005a      	lsls	r2, r3, #1
   176ce:	4b2f      	ldr	r3, [pc, #188]	; (1778c <_i2c_master_set_config+0x358>)
   176d0:	0010      	movs	r0, r2
   176d2:	4798      	blx	r3
   176d4:	0002      	movs	r2, r0
   176d6:	000b      	movs	r3, r1
   176d8:	4c34      	ldr	r4, [pc, #208]	; (177ac <_i2c_master_set_config+0x378>)
   176da:	0028      	movs	r0, r5
   176dc:	0031      	movs	r1, r6
   176de:	47a0      	blx	r4
   176e0:	0003      	movs	r3, r0
   176e2:	000c      	movs	r4, r1
   176e4:	0019      	movs	r1, r3
   176e6:	0022      	movs	r2, r4
   176e8:	4b31      	ldr	r3, [pc, #196]	; (177b0 <_i2c_master_set_config+0x37c>)
   176ea:	0008      	movs	r0, r1
   176ec:	0011      	movs	r1, r2
   176ee:	4798      	blx	r3
   176f0:	0003      	movs	r3, r0
   176f2:	63fb      	str	r3, [r7, #60]	; 0x3c
			fgclk - fscl * (10 + (fgclk * 0.000000001)* trise), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
   176f4:	693b      	ldr	r3, [r7, #16]
   176f6:	689a      	ldr	r2, [r3, #8]
   176f8:	2380      	movs	r3, #128	; 0x80
   176fa:	049b      	lsls	r3, r3, #18
   176fc:	429a      	cmp	r2, r3
   176fe:	d16a      	bne.n	177d6 <_i2c_master_set_config+0x3a2>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
   17700:	4b22      	ldr	r3, [pc, #136]	; (1778c <_i2c_master_set_config+0x358>)
   17702:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   17704:	4798      	blx	r3
   17706:	4c25      	ldr	r4, [pc, #148]	; (1779c <_i2c_master_set_config+0x368>)
   17708:	0002      	movs	r2, r0
   1770a:	000b      	movs	r3, r1
   1770c:	47a0      	blx	r4
   1770e:	0003      	movs	r3, r0
   17710:	000c      	movs	r4, r1
   17712:	001d      	movs	r5, r3
   17714:	0026      	movs	r6, r4
   17716:	4b1d      	ldr	r3, [pc, #116]	; (1778c <_i2c_master_set_config+0x358>)
   17718:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1771a:	4798      	blx	r3
   1771c:	4c1c      	ldr	r4, [pc, #112]	; (17790 <_i2c_master_set_config+0x35c>)
   1771e:	2200      	movs	r2, #0
   17720:	4b24      	ldr	r3, [pc, #144]	; (177b4 <_i2c_master_set_config+0x380>)
   17722:	47a0      	blx	r4
   17724:	0003      	movs	r3, r0
   17726:	000c      	movs	r4, r1
   17728:	001a      	movs	r2, r3
   1772a:	0023      	movs	r3, r4
   1772c:	4c1f      	ldr	r4, [pc, #124]	; (177ac <_i2c_master_set_config+0x378>)
   1772e:	0028      	movs	r0, r5
   17730:	0031      	movs	r1, r6
   17732:	47a0      	blx	r4
   17734:	0003      	movs	r3, r0
   17736:	000c      	movs	r4, r1
   17738:	0018      	movs	r0, r3
   1773a:	0021      	movs	r1, r4
   1773c:	4c19      	ldr	r4, [pc, #100]	; (177a4 <_i2c_master_set_config+0x370>)
   1773e:	2200      	movs	r2, #0
   17740:	4b19      	ldr	r3, [pc, #100]	; (177a8 <_i2c_master_set_config+0x374>)
   17742:	47a0      	blx	r4
   17744:	0003      	movs	r3, r0
   17746:	000c      	movs	r4, r1
   17748:	0019      	movs	r1, r3
   1774a:	0022      	movs	r2, r4
   1774c:	4b18      	ldr	r3, [pc, #96]	; (177b0 <_i2c_master_set_config+0x37c>)
   1774e:	0008      	movs	r0, r1
   17750:	0011      	movs	r1, r2
   17752:	4798      	blx	r3
   17754:	0003      	movs	r3, r0
   17756:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (tmp_baudlow_hs) {
   17758:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1775a:	2b00      	cmp	r3, #0
   1775c:	d02e      	beq.n	177bc <_i2c_master_set_config+0x388>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
   1775e:	4b16      	ldr	r3, [pc, #88]	; (177b8 <_i2c_master_set_config+0x384>)
   17760:	6a79      	ldr	r1, [r7, #36]	; 0x24
   17762:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   17764:	4798      	blx	r3
   17766:	0003      	movs	r3, r0
   17768:	1e9a      	subs	r2, r3, #2
   1776a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1776c:	1ad3      	subs	r3, r2, r3
   1776e:	653b      	str	r3, [r7, #80]	; 0x50
   17770:	e031      	b.n	177d6 <_i2c_master_set_config+0x3a2>
   17772:	46c0      	nop			; (mov r8, r8)
   17774:	00026fed 	.word	0x00026fed
   17778:	000172f5 	.word	0x000172f5
   1777c:	00026e31 	.word	0x00026e31
   17780:	00029bdd 	.word	0x00029bdd
   17784:	0001731d 	.word	0x0001731d
   17788:	000299a1 	.word	0x000299a1
   1778c:	00033f25 	.word	0x00033f25
   17790:	00033391 	.word	0x00033391
   17794:	e826d695 	.word	0xe826d695
   17798:	3e112e0b 	.word	0x3e112e0b
   1779c:	00032709 	.word	0x00032709
   177a0:	40240000 	.word	0x40240000
   177a4:	00033891 	.word	0x00033891
   177a8:	3ff00000 	.word	0x3ff00000
   177ac:	00032d29 	.word	0x00032d29
   177b0:	00033ebd 	.word	0x00033ebd
   177b4:	40080000 	.word	0x40080000
   177b8:	000323c9 	.word	0x000323c9
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
   177bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   177be:	005a      	lsls	r2, r3, #1
   177c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   177c2:	18d3      	adds	r3, r2, r3
   177c4:	1e5a      	subs	r2, r3, #1
   177c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   177c8:	0059      	lsls	r1, r3, #1
   177ca:	4b1d      	ldr	r3, [pc, #116]	; (17840 <_i2c_master_set_config+0x40c>)
   177cc:	0010      	movs	r0, r2
   177ce:	4798      	blx	r3
   177d0:	0003      	movs	r3, r0
   177d2:	3b01      	subs	r3, #1
   177d4:	653b      	str	r3, [r7, #80]	; 0x50
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
   177d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   177d8:	2bff      	cmp	r3, #255	; 0xff
   177da:	dc08      	bgt.n	177ee <_i2c_master_set_config+0x3ba>
   177dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   177de:	2b00      	cmp	r3, #0
   177e0:	db05      	blt.n	177ee <_i2c_master_set_config+0x3ba>
   177e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   177e4:	2bff      	cmp	r3, #255	; 0xff
   177e6:	dc02      	bgt.n	177ee <_i2c_master_set_config+0x3ba>
   177e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   177ea:	2b00      	cmp	r3, #0
   177ec:	da06      	bge.n	177fc <_i2c_master_set_config+0x3c8>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
   177ee:	233b      	movs	r3, #59	; 0x3b
   177f0:	2210      	movs	r2, #16
   177f2:	4694      	mov	ip, r2
   177f4:	44bc      	add	ip, r7
   177f6:	4463      	add	r3, ip
   177f8:	2240      	movs	r2, #64	; 0x40
   177fa:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
   177fc:	233b      	movs	r3, #59	; 0x3b
   177fe:	2210      	movs	r2, #16
   17800:	4694      	mov	ip, r2
   17802:	44bc      	add	ip, r7
   17804:	4463      	add	r3, ip
   17806:	781b      	ldrb	r3, [r3, #0]
   17808:	2b40      	cmp	r3, #64	; 0x40
   1780a:	d00e      	beq.n	1782a <_i2c_master_set_config+0x3f6>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   1780c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1780e:	22ff      	movs	r2, #255	; 0xff
   17810:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   17812:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   17814:	041b      	lsls	r3, r3, #16
   17816:	0019      	movs	r1, r3
   17818:	23ff      	movs	r3, #255	; 0xff
   1781a:	041b      	lsls	r3, r3, #16
   1781c:	400b      	ands	r3, r1
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   1781e:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   17820:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   17822:	0612      	lsls	r2, r2, #24
   17824:	431a      	orrs	r2, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   17826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   17828:	60da      	str	r2, [r3, #12]
	}

	return tmp_status_code;
   1782a:	233b      	movs	r3, #59	; 0x3b
   1782c:	2210      	movs	r2, #16
   1782e:	4694      	mov	ip, r2
   17830:	44bc      	add	ip, r7
   17832:	4463      	add	r3, ip
   17834:	781b      	ldrb	r3, [r3, #0]
}
   17836:	0018      	movs	r0, r3
   17838:	46bd      	mov	sp, r7
   1783a:	b017      	add	sp, #92	; 0x5c
   1783c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1783e:	46c0      	nop			; (mov r8, r8)
   17840:	000323c9 	.word	0x000323c9

00017844 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
   17844:	b590      	push	{r4, r7, lr}
   17846:	b08b      	sub	sp, #44	; 0x2c
   17848:	af00      	add	r7, sp, #0
   1784a:	60f8      	str	r0, [r7, #12]
   1784c:	60b9      	str	r1, [r7, #8]
   1784e:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
   17850:	68fb      	ldr	r3, [r7, #12]
   17852:	68ba      	ldr	r2, [r7, #8]
   17854:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   17856:	68fb      	ldr	r3, [r7, #12]
   17858:	681b      	ldr	r3, [r3, #0]
   1785a:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   1785c:	68fb      	ldr	r3, [r7, #12]
   1785e:	681b      	ldr	r3, [r3, #0]
   17860:	0018      	movs	r0, r3
   17862:	4b3b      	ldr	r3, [pc, #236]	; (17950 <i2c_master_init+0x10c>)
   17864:	4798      	blx	r3
   17866:	0003      	movs	r3, r0
   17868:	623b      	str	r3, [r7, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   1786a:	6a3b      	ldr	r3, [r7, #32]
   1786c:	3302      	adds	r3, #2
   1786e:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   17870:	6a3b      	ldr	r3, [r7, #32]
   17872:	3314      	adds	r3, #20
   17874:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   17876:	2201      	movs	r2, #1
   17878:	69fb      	ldr	r3, [r7, #28]
   1787a:	409a      	lsls	r2, r3
   1787c:	0013      	movs	r3, r2
   1787e:	0019      	movs	r1, r3
   17880:	2002      	movs	r0, #2
   17882:	4b34      	ldr	r3, [pc, #208]	; (17954 <i2c_master_init+0x110>)
   17884:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   17886:	2314      	movs	r3, #20
   17888:	18fb      	adds	r3, r7, r3
   1788a:	0018      	movs	r0, r3
   1788c:	4b32      	ldr	r3, [pc, #200]	; (17958 <i2c_master_init+0x114>)
   1788e:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   17890:	687b      	ldr	r3, [r7, #4]
   17892:	7b1a      	ldrb	r2, [r3, #12]
   17894:	2314      	movs	r3, #20
   17896:	18fb      	adds	r3, r7, r3
   17898:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   1789a:	69bb      	ldr	r3, [r7, #24]
   1789c:	b2db      	uxtb	r3, r3
   1789e:	2214      	movs	r2, #20
   178a0:	18ba      	adds	r2, r7, r2
   178a2:	0011      	movs	r1, r2
   178a4:	0018      	movs	r0, r3
   178a6:	4b2d      	ldr	r3, [pc, #180]	; (1795c <i2c_master_init+0x118>)
   178a8:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   178aa:	69bb      	ldr	r3, [r7, #24]
   178ac:	b2db      	uxtb	r3, r3
   178ae:	0018      	movs	r0, r3
   178b0:	4b2b      	ldr	r3, [pc, #172]	; (17960 <i2c_master_init+0x11c>)
   178b2:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   178b4:	687b      	ldr	r3, [r7, #4]
   178b6:	7b1b      	ldrb	r3, [r3, #12]
   178b8:	2100      	movs	r1, #0
   178ba:	0018      	movs	r0, r3
   178bc:	4b29      	ldr	r3, [pc, #164]	; (17964 <i2c_master_init+0x120>)
   178be:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
   178c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   178c2:	681b      	ldr	r3, [r3, #0]
   178c4:	2202      	movs	r2, #2
   178c6:	4013      	ands	r3, r2
   178c8:	d001      	beq.n	178ce <i2c_master_init+0x8a>
		return STATUS_ERR_DENIED;
   178ca:	231c      	movs	r3, #28
   178cc:	e03b      	b.n	17946 <i2c_master_init+0x102>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
   178ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   178d0:	681b      	ldr	r3, [r3, #0]
   178d2:	2201      	movs	r2, #1
   178d4:	4013      	ands	r3, r2
   178d6:	d001      	beq.n	178dc <i2c_master_init+0x98>
		return STATUS_BUSY;
   178d8:	2305      	movs	r3, #5
   178da:	e034      	b.n	17946 <i2c_master_init+0x102>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   178dc:	68fb      	ldr	r3, [r7, #12]
   178de:	681b      	ldr	r3, [r3, #0]
   178e0:	2217      	movs	r2, #23
   178e2:	18bc      	adds	r4, r7, r2
   178e4:	0018      	movs	r0, r3
   178e6:	4b1a      	ldr	r3, [pc, #104]	; (17950 <i2c_master_init+0x10c>)
   178e8:	4798      	blx	r3
   178ea:	0003      	movs	r3, r0
   178ec:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
   178ee:	4a1e      	ldr	r2, [pc, #120]	; (17968 <i2c_master_init+0x124>)
   178f0:	2317      	movs	r3, #23
   178f2:	18fb      	adds	r3, r7, r3
   178f4:	781b      	ldrb	r3, [r3, #0]
   178f6:	0011      	movs	r1, r2
   178f8:	0018      	movs	r0, r3
   178fa:	4b1c      	ldr	r3, [pc, #112]	; (1796c <i2c_master_init+0x128>)
   178fc:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   178fe:	2317      	movs	r3, #23
   17900:	18fb      	adds	r3, r7, r3
   17902:	781a      	ldrb	r2, [r3, #0]
   17904:	4b1a      	ldr	r3, [pc, #104]	; (17970 <i2c_master_init+0x12c>)
   17906:	0092      	lsls	r2, r2, #2
   17908:	68f9      	ldr	r1, [r7, #12]
   1790a:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
   1790c:	68fb      	ldr	r3, [r7, #12]
   1790e:	2200      	movs	r2, #0
   17910:	761a      	strb	r2, [r3, #24]
	module->enabled_callback = 0;
   17912:	68fb      	ldr	r3, [r7, #12]
   17914:	2200      	movs	r2, #0
   17916:	765a      	strb	r2, [r3, #25]
	module->buffer_length = 0;
   17918:	68fb      	ldr	r3, [r7, #12]
   1791a:	2200      	movs	r2, #0
   1791c:	835a      	strh	r2, [r3, #26]
	module->buffer_remaining = 0;
   1791e:	68fb      	ldr	r3, [r7, #12]
   17920:	2200      	movs	r2, #0
   17922:	839a      	strh	r2, [r3, #28]

	module->status = STATUS_OK;
   17924:	68fb      	ldr	r3, [r7, #12]
   17926:	2225      	movs	r2, #37	; 0x25
   17928:	2100      	movs	r1, #0
   1792a:	5499      	strb	r1, [r3, r2]
	module->buffer = NULL;
   1792c:	68fb      	ldr	r3, [r7, #12]
   1792e:	2200      	movs	r2, #0
   17930:	621a      	str	r2, [r3, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
   17932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17934:	2214      	movs	r2, #20
   17936:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
   17938:	687a      	ldr	r2, [r7, #4]
   1793a:	68fb      	ldr	r3, [r7, #12]
   1793c:	0011      	movs	r1, r2
   1793e:	0018      	movs	r0, r3
   17940:	4b0c      	ldr	r3, [pc, #48]	; (17974 <i2c_master_init+0x130>)
   17942:	4798      	blx	r3
   17944:	0003      	movs	r3, r0
}
   17946:	0018      	movs	r0, r3
   17948:	46bd      	mov	sp, r7
   1794a:	b00b      	add	sp, #44	; 0x2c
   1794c:	bd90      	pop	{r4, r7, pc}
   1794e:	46c0      	nop			; (mov r8, r8)
   17950:	00026fed 	.word	0x00026fed
   17954:	00017299 	.word	0x00017299
   17958:	00017281 	.word	0x00017281
   1795c:	0002987d 	.word	0x0002987d
   17960:	000298c1 	.word	0x000298c1
   17964:	00026da5 	.word	0x00026da5
   17968:	00013871 	.word	0x00013871
   1796c:	00027051 	.word	0x00027051
   17970:	20005528 	.word	0x20005528
   17974:	00017435 	.word	0x00017435

00017978 <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
   17978:	b580      	push	{r7, lr}
   1797a:	b084      	sub	sp, #16
   1797c:	af00      	add	r7, sp, #0
   1797e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   17980:	687b      	ldr	r3, [r7, #4]
   17982:	681b      	ldr	r3, [r3, #0]
   17984:	60fb      	str	r3, [r7, #12]

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   17986:	687b      	ldr	r3, [r7, #4]
   17988:	0018      	movs	r0, r3
   1798a:	4b0f      	ldr	r3, [pc, #60]	; (179c8 <i2c_master_reset+0x50>)
   1798c:	4798      	blx	r3

	/* Disable module */
	i2c_master_disable(module);
   1798e:	687b      	ldr	r3, [r7, #4]
   17990:	0018      	movs	r0, r3
   17992:	4b0e      	ldr	r3, [pc, #56]	; (179cc <i2c_master_reset+0x54>)
   17994:	4798      	blx	r3

#if I2C_MASTER_CALLBACK_MODE == true
	/* Clear all pending interrupts */
	system_interrupt_enter_critical_section();
   17996:	4b0e      	ldr	r3, [pc, #56]	; (179d0 <i2c_master_reset+0x58>)
   17998:	4798      	blx	r3
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
   1799a:	687b      	ldr	r3, [r7, #4]
   1799c:	681b      	ldr	r3, [r3, #0]
   1799e:	0018      	movs	r0, r3
   179a0:	4b0c      	ldr	r3, [pc, #48]	; (179d4 <i2c_master_reset+0x5c>)
   179a2:	4798      	blx	r3
   179a4:	0003      	movs	r3, r0
   179a6:	0018      	movs	r0, r3
   179a8:	4b0b      	ldr	r3, [pc, #44]	; (179d8 <i2c_master_reset+0x60>)
   179aa:	4798      	blx	r3
	system_interrupt_leave_critical_section();
   179ac:	4b0b      	ldr	r3, [pc, #44]	; (179dc <i2c_master_reset+0x64>)
   179ae:	4798      	blx	r3
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   179b0:	687b      	ldr	r3, [r7, #4]
   179b2:	0018      	movs	r0, r3
   179b4:	4b04      	ldr	r3, [pc, #16]	; (179c8 <i2c_master_reset+0x50>)
   179b6:	4798      	blx	r3

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
   179b8:	68fb      	ldr	r3, [r7, #12]
   179ba:	2201      	movs	r2, #1
   179bc:	601a      	str	r2, [r3, #0]
}
   179be:	46c0      	nop			; (mov r8, r8)
   179c0:	46bd      	mov	sp, r7
   179c2:	b004      	add	sp, #16
   179c4:	bd80      	pop	{r7, pc}
   179c6:	46c0      	nop			; (mov r8, r8)
   179c8:	000173b9 	.word	0x000173b9
   179cc:	000173dd 	.word	0x000173dd
   179d0:	0001733d 	.word	0x0001733d
   179d4:	000270bd 	.word	0x000270bd
   179d8:	000299f9 	.word	0x000299f9
   179dc:	00017351 	.word	0x00017351

000179e0 <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
   179e0:	b580      	push	{r7, lr}
   179e2:	b084      	sub	sp, #16
   179e4:	af00      	add	r7, sp, #0
   179e6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   179e8:	687b      	ldr	r3, [r7, #4]
   179ea:	681b      	ldr	r3, [r3, #0]
   179ec:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   179ee:	68fb      	ldr	r3, [r7, #12]
   179f0:	7e1b      	ldrb	r3, [r3, #24]
   179f2:	b2db      	uxtb	r3, r3
   179f4:	001a      	movs	r2, r3
   179f6:	2302      	movs	r3, #2
   179f8:	4013      	ands	r3, r2
   179fa:	d00b      	beq.n	17a14 <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   179fc:	68fb      	ldr	r3, [r7, #12]
   179fe:	2202      	movs	r2, #2
   17a00:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   17a02:	68fb      	ldr	r3, [r7, #12]
   17a04:	8b5b      	ldrh	r3, [r3, #26]
   17a06:	b29b      	uxth	r3, r3
   17a08:	001a      	movs	r2, r3
   17a0a:	2302      	movs	r3, #2
   17a0c:	4013      	ands	r3, r2
   17a0e:	d011      	beq.n	17a34 <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
   17a10:	2341      	movs	r3, #65	; 0x41
   17a12:	e010      	b.n	17a36 <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   17a14:	68fb      	ldr	r3, [r7, #12]
   17a16:	8b5b      	ldrh	r3, [r3, #26]
   17a18:	b29b      	uxth	r3, r3
   17a1a:	001a      	movs	r2, r3
   17a1c:	2304      	movs	r3, #4
   17a1e:	4013      	ands	r3, r2
   17a20:	d008      	beq.n	17a34 <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   17a22:	68fb      	ldr	r3, [r7, #12]
   17a24:	685b      	ldr	r3, [r3, #4]
   17a26:	22c0      	movs	r2, #192	; 0xc0
   17a28:	0292      	lsls	r2, r2, #10
   17a2a:	431a      	orrs	r2, r3
   17a2c:	68fb      	ldr	r3, [r7, #12]
   17a2e:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
   17a30:	2318      	movs	r3, #24
   17a32:	e000      	b.n	17a36 <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
   17a34:	2300      	movs	r3, #0
}
   17a36:	0018      	movs	r0, r3
   17a38:	46bd      	mov	sp, r7
   17a3a:	b004      	add	sp, #16
   17a3c:	bd80      	pop	{r7, pc}

00017a3e <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
   17a3e:	b580      	push	{r7, lr}
   17a40:	b084      	sub	sp, #16
   17a42:	af00      	add	r7, sp, #0
   17a44:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   17a46:	687b      	ldr	r3, [r7, #4]
   17a48:	681b      	ldr	r3, [r3, #0]
   17a4a:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
   17a4c:	230e      	movs	r3, #14
   17a4e:	18fb      	adds	r3, r7, r3
   17a50:	2200      	movs	r2, #0
   17a52:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   17a54:	e00f      	b.n	17a76 <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
   17a56:	230e      	movs	r3, #14
   17a58:	18fb      	adds	r3, r7, r3
   17a5a:	220e      	movs	r2, #14
   17a5c:	18ba      	adds	r2, r7, r2
   17a5e:	8812      	ldrh	r2, [r2, #0]
   17a60:	3201      	adds	r2, #1
   17a62:	801a      	strh	r2, [r3, #0]
   17a64:	687b      	ldr	r3, [r7, #4]
   17a66:	891b      	ldrh	r3, [r3, #8]
   17a68:	220e      	movs	r2, #14
   17a6a:	18ba      	adds	r2, r7, r2
   17a6c:	8812      	ldrh	r2, [r2, #0]
   17a6e:	429a      	cmp	r2, r3
   17a70:	d301      	bcc.n	17a76 <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
   17a72:	2312      	movs	r3, #18
   17a74:	e00e      	b.n	17a94 <_i2c_master_wait_for_bus+0x56>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   17a76:	68bb      	ldr	r3, [r7, #8]
   17a78:	7e1b      	ldrb	r3, [r3, #24]
   17a7a:	b2db      	uxtb	r3, r3
   17a7c:	001a      	movs	r2, r3
   17a7e:	2301      	movs	r3, #1
   17a80:	4013      	ands	r3, r2
   17a82:	d106      	bne.n	17a92 <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
   17a84:	68bb      	ldr	r3, [r7, #8]
   17a86:	7e1b      	ldrb	r3, [r3, #24]
   17a88:	b2db      	uxtb	r3, r3
   17a8a:	001a      	movs	r2, r3
   17a8c:	2302      	movs	r3, #2
   17a8e:	4013      	ands	r3, r2
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   17a90:	d0e1      	beq.n	17a56 <_i2c_master_wait_for_bus+0x18>
		}
	}
	return STATUS_OK;
   17a92:	2300      	movs	r3, #0
}
   17a94:	0018      	movs	r0, r3
   17a96:	46bd      	mov	sp, r7
   17a98:	b004      	add	sp, #16
   17a9a:	bd80      	pop	{r7, pc}

00017a9c <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
   17a9c:	b590      	push	{r4, r7, lr}
   17a9e:	b085      	sub	sp, #20
   17aa0:	af00      	add	r7, sp, #0
   17aa2:	6078      	str	r0, [r7, #4]
   17aa4:	000a      	movs	r2, r1
   17aa6:	1cfb      	adds	r3, r7, #3
   17aa8:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   17aaa:	687b      	ldr	r3, [r7, #4]
   17aac:	681b      	ldr	r3, [r3, #0]
   17aae:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   17ab0:	68fb      	ldr	r3, [r7, #12]
   17ab2:	685b      	ldr	r3, [r3, #4]
   17ab4:	2280      	movs	r2, #128	; 0x80
   17ab6:	02d2      	lsls	r2, r2, #11
   17ab8:	431a      	orrs	r2, r3
   17aba:	68fb      	ldr	r3, [r7, #12]
   17abc:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
   17abe:	1cfb      	adds	r3, r7, #3
   17ac0:	781a      	ldrb	r2, [r3, #0]
   17ac2:	68fb      	ldr	r3, [r7, #12]
   17ac4:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
   17ac6:	230b      	movs	r3, #11
   17ac8:	18fc      	adds	r4, r7, r3
   17aca:	687b      	ldr	r3, [r7, #4]
   17acc:	0018      	movs	r0, r3
   17ace:	4b07      	ldr	r3, [pc, #28]	; (17aec <_i2c_master_send_hs_master_code+0x50>)
   17ad0:	4798      	blx	r3
   17ad2:	0003      	movs	r3, r0
   17ad4:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   17ad6:	68fb      	ldr	r3, [r7, #12]
   17ad8:	2201      	movs	r2, #1
   17ada:	761a      	strb	r2, [r3, #24]

	return tmp_status;
   17adc:	230b      	movs	r3, #11
   17ade:	18fb      	adds	r3, r7, r3
   17ae0:	781b      	ldrb	r3, [r3, #0]
}
   17ae2:	0018      	movs	r0, r3
   17ae4:	46bd      	mov	sp, r7
   17ae6:	b005      	add	sp, #20
   17ae8:	bd90      	pop	{r4, r7, pc}
   17aea:	46c0      	nop			; (mov r8, r8)
   17aec:	00017a3f 	.word	0x00017a3f

00017af0 <TC3_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
   17af0:	b580      	push	{r7, lr}
   17af2:	af00      	add	r7, sp, #0
   17af4:	2000      	movs	r0, #0
   17af6:	4b02      	ldr	r3, [pc, #8]	; (17b00 <TC3_Handler+0x10>)
   17af8:	4798      	blx	r3
   17afa:	46c0      	nop			; (mov r8, r8)
   17afc:	46bd      	mov	sp, r7
   17afe:	bd80      	pop	{r7, pc}
   17b00:	00017b2d 	.word	0x00017b2d

00017b04 <TC4_Handler>:
   17b04:	b580      	push	{r7, lr}
   17b06:	af00      	add	r7, sp, #0
   17b08:	2001      	movs	r0, #1
   17b0a:	4b02      	ldr	r3, [pc, #8]	; (17b14 <TC4_Handler+0x10>)
   17b0c:	4798      	blx	r3
   17b0e:	46c0      	nop			; (mov r8, r8)
   17b10:	46bd      	mov	sp, r7
   17b12:	bd80      	pop	{r7, pc}
   17b14:	00017b2d 	.word	0x00017b2d

00017b18 <TC5_Handler>:
   17b18:	b580      	push	{r7, lr}
   17b1a:	af00      	add	r7, sp, #0
   17b1c:	2002      	movs	r0, #2
   17b1e:	4b02      	ldr	r3, [pc, #8]	; (17b28 <TC5_Handler+0x10>)
   17b20:	4798      	blx	r3
   17b22:	46c0      	nop			; (mov r8, r8)
   17b24:	46bd      	mov	sp, r7
   17b26:	bd80      	pop	{r7, pc}
   17b28:	00017b2d 	.word	0x00017b2d

00017b2c <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
   17b2c:	b580      	push	{r7, lr}
   17b2e:	b084      	sub	sp, #16
   17b30:	af00      	add	r7, sp, #0
   17b32:	0002      	movs	r2, r0
   17b34:	1dfb      	adds	r3, r7, #7
   17b36:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
   17b38:	1dfb      	adds	r3, r7, #7
   17b3a:	781a      	ldrb	r2, [r3, #0]
	struct tc_module *module
   17b3c:	4b28      	ldr	r3, [pc, #160]	; (17be0 <_tc_interrupt_handler+0xb4>)
   17b3e:	0092      	lsls	r2, r2, #2
   17b40:	58d3      	ldr	r3, [r2, r3]
   17b42:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   17b44:	68fb      	ldr	r3, [r7, #12]
   17b46:	681b      	ldr	r3, [r3, #0]
   17b48:	7b9b      	ldrb	r3, [r3, #14]
   17b4a:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
   17b4c:	68fa      	ldr	r2, [r7, #12]
   17b4e:	7e12      	ldrb	r2, [r2, #24]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   17b50:	4013      	ands	r3, r2
   17b52:	b2da      	uxtb	r2, r3
			module->enable_callback_mask;
   17b54:	68fb      	ldr	r3, [r7, #12]
   17b56:	7e59      	ldrb	r1, [r3, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   17b58:	230b      	movs	r3, #11
   17b5a:	18fb      	adds	r3, r7, r3
   17b5c:	400a      	ands	r2, r1
   17b5e:	701a      	strb	r2, [r3, #0]

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
   17b60:	230b      	movs	r3, #11
   17b62:	18fb      	adds	r3, r7, r3
   17b64:	781b      	ldrb	r3, [r3, #0]
   17b66:	2201      	movs	r2, #1
   17b68:	4013      	ands	r3, r2
   17b6a:	d008      	beq.n	17b7e <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
   17b6c:	68fb      	ldr	r3, [r7, #12]
   17b6e:	689b      	ldr	r3, [r3, #8]
   17b70:	68fa      	ldr	r2, [r7, #12]
   17b72:	0010      	movs	r0, r2
   17b74:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
   17b76:	68fb      	ldr	r3, [r7, #12]
   17b78:	681b      	ldr	r3, [r3, #0]
   17b7a:	2201      	movs	r2, #1
   17b7c:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
   17b7e:	230b      	movs	r3, #11
   17b80:	18fb      	adds	r3, r7, r3
   17b82:	781b      	ldrb	r3, [r3, #0]
   17b84:	2202      	movs	r2, #2
   17b86:	4013      	ands	r3, r2
   17b88:	d008      	beq.n	17b9c <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
   17b8a:	68fb      	ldr	r3, [r7, #12]
   17b8c:	68db      	ldr	r3, [r3, #12]
   17b8e:	68fa      	ldr	r2, [r7, #12]
   17b90:	0010      	movs	r0, r2
   17b92:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
   17b94:	68fb      	ldr	r3, [r7, #12]
   17b96:	681b      	ldr	r3, [r3, #0]
   17b98:	2202      	movs	r2, #2
   17b9a:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
   17b9c:	230b      	movs	r3, #11
   17b9e:	18fb      	adds	r3, r7, r3
   17ba0:	781b      	ldrb	r3, [r3, #0]
   17ba2:	2210      	movs	r2, #16
   17ba4:	4013      	ands	r3, r2
   17ba6:	d008      	beq.n	17bba <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
   17ba8:	68fb      	ldr	r3, [r7, #12]
   17baa:	691b      	ldr	r3, [r3, #16]
   17bac:	68fa      	ldr	r2, [r7, #12]
   17bae:	0010      	movs	r0, r2
   17bb0:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
   17bb2:	68fb      	ldr	r3, [r7, #12]
   17bb4:	681b      	ldr	r3, [r3, #0]
   17bb6:	2210      	movs	r2, #16
   17bb8:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
   17bba:	230b      	movs	r3, #11
   17bbc:	18fb      	adds	r3, r7, r3
   17bbe:	781b      	ldrb	r3, [r3, #0]
   17bc0:	2220      	movs	r2, #32
   17bc2:	4013      	ands	r3, r2
   17bc4:	d008      	beq.n	17bd8 <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
   17bc6:	68fb      	ldr	r3, [r7, #12]
   17bc8:	695b      	ldr	r3, [r3, #20]
   17bca:	68fa      	ldr	r2, [r7, #12]
   17bcc:	0010      	movs	r0, r2
   17bce:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
   17bd0:	68fb      	ldr	r3, [r7, #12]
   17bd2:	681b      	ldr	r3, [r3, #0]
   17bd4:	2220      	movs	r2, #32
   17bd6:	739a      	strb	r2, [r3, #14]
	}
}
   17bd8:	46c0      	nop			; (mov r8, r8)
   17bda:	46bd      	mov	sp, r7
   17bdc:	b004      	add	sp, #16
   17bde:	bd80      	pop	{r7, pc}
   17be0:	20004410 	.word	0x20004410

00017be4 <FreeRTOS_CLIRegisterCommand>:


/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
   17be4:	b580      	push	{r7, lr}
   17be6:	b084      	sub	sp, #16
   17be8:	af00      	add	r7, sp, #0
   17bea:	6078      	str	r0, [r7, #4]
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
BaseType_t xReturn = pdFAIL;
   17bec:	2300      	movs	r3, #0
   17bee:	60fb      	str	r3, [r7, #12]

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
   17bf0:	687b      	ldr	r3, [r7, #4]
   17bf2:	2b00      	cmp	r3, #0
   17bf4:	d101      	bne.n	17bfa <FreeRTOS_CLIRegisterCommand+0x16>
   17bf6:	b672      	cpsid	i
   17bf8:	e7fe      	b.n	17bf8 <FreeRTOS_CLIRegisterCommand+0x14>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
   17bfa:	2008      	movs	r0, #8
   17bfc:	4b11      	ldr	r3, [pc, #68]	; (17c44 <FreeRTOS_CLIRegisterCommand+0x60>)
   17bfe:	4798      	blx	r3
   17c00:	0003      	movs	r3, r0
   17c02:	60bb      	str	r3, [r7, #8]
	configASSERT( pxNewListItem );
   17c04:	68bb      	ldr	r3, [r7, #8]
   17c06:	2b00      	cmp	r3, #0
   17c08:	d101      	bne.n	17c0e <FreeRTOS_CLIRegisterCommand+0x2a>
   17c0a:	b672      	cpsid	i
   17c0c:	e7fe      	b.n	17c0c <FreeRTOS_CLIRegisterCommand+0x28>

	if( pxNewListItem != NULL )
   17c0e:	68bb      	ldr	r3, [r7, #8]
   17c10:	2b00      	cmp	r3, #0
   17c12:	d012      	beq.n	17c3a <FreeRTOS_CLIRegisterCommand+0x56>
	{
		taskENTER_CRITICAL();
   17c14:	4b0c      	ldr	r3, [pc, #48]	; (17c48 <FreeRTOS_CLIRegisterCommand+0x64>)
   17c16:	4798      	blx	r3
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
   17c18:	68bb      	ldr	r3, [r7, #8]
   17c1a:	687a      	ldr	r2, [r7, #4]
   17c1c:	601a      	str	r2, [r3, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
   17c1e:	68bb      	ldr	r3, [r7, #8]
   17c20:	2200      	movs	r2, #0
   17c22:	605a      	str	r2, [r3, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
   17c24:	4b09      	ldr	r3, [pc, #36]	; (17c4c <FreeRTOS_CLIRegisterCommand+0x68>)
   17c26:	681b      	ldr	r3, [r3, #0]
   17c28:	68ba      	ldr	r2, [r7, #8]
   17c2a:	605a      	str	r2, [r3, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
   17c2c:	4b07      	ldr	r3, [pc, #28]	; (17c4c <FreeRTOS_CLIRegisterCommand+0x68>)
   17c2e:	68ba      	ldr	r2, [r7, #8]
   17c30:	601a      	str	r2, [r3, #0]
		}
		taskEXIT_CRITICAL();
   17c32:	4b07      	ldr	r3, [pc, #28]	; (17c50 <FreeRTOS_CLIRegisterCommand+0x6c>)
   17c34:	4798      	blx	r3

		xReturn = pdPASS;
   17c36:	2301      	movs	r3, #1
   17c38:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
   17c3a:	68fb      	ldr	r3, [r7, #12]
}
   17c3c:	0018      	movs	r0, r3
   17c3e:	46bd      	mov	sp, r7
   17c40:	b004      	add	sp, #16
   17c42:	bd80      	pop	{r7, pc}
   17c44:	00019ff1 	.word	0x00019ff1
   17c48:	00019eb9 	.word	0x00019eb9
   17c4c:	200000bc 	.word	0x200000bc
   17c50:	00019edd 	.word	0x00019edd

00017c54 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIProcessCommand( const char * const pcCommandInput, char * pcWriteBuffer, size_t xWriteBufferLen  )
{
   17c54:	b580      	push	{r7, lr}
   17c56:	b088      	sub	sp, #32
   17c58:	af00      	add	r7, sp, #0
   17c5a:	60f8      	str	r0, [r7, #12]
   17c5c:	60b9      	str	r1, [r7, #8]
   17c5e:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t *pxCommand = NULL;
BaseType_t xReturn = pdTRUE;
   17c60:	2301      	movs	r3, #1
   17c62:	61fb      	str	r3, [r7, #28]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	thank one task. */

	if( pxCommand == NULL )
   17c64:	4b3d      	ldr	r3, [pc, #244]	; (17d5c <FreeRTOS_CLIProcessCommand+0x108>)
   17c66:	681b      	ldr	r3, [r3, #0]
   17c68:	2b00      	cmp	r3, #0
   17c6a:	d144      	bne.n	17cf6 <FreeRTOS_CLIProcessCommand+0xa2>
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   17c6c:	4b3b      	ldr	r3, [pc, #236]	; (17d5c <FreeRTOS_CLIProcessCommand+0x108>)
   17c6e:	4a3c      	ldr	r2, [pc, #240]	; (17d60 <FreeRTOS_CLIProcessCommand+0x10c>)
   17c70:	601a      	str	r2, [r3, #0]
   17c72:	e03a      	b.n	17cea <FreeRTOS_CLIProcessCommand+0x96>
		{
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
   17c74:	4b39      	ldr	r3, [pc, #228]	; (17d5c <FreeRTOS_CLIProcessCommand+0x108>)
   17c76:	681b      	ldr	r3, [r3, #0]
   17c78:	681b      	ldr	r3, [r3, #0]
   17c7a:	681b      	ldr	r3, [r3, #0]
   17c7c:	61bb      	str	r3, [r7, #24]
			xCommandStringLength = strlen( pcRegisteredCommandString );
   17c7e:	69bb      	ldr	r3, [r7, #24]
   17c80:	0018      	movs	r0, r3
   17c82:	4b38      	ldr	r3, [pc, #224]	; (17d64 <FreeRTOS_CLIProcessCommand+0x110>)
   17c84:	4798      	blx	r3
   17c86:	0003      	movs	r3, r0
   17c88:	617b      	str	r3, [r7, #20]

			/* To ensure the string lengths match exactly, so as not to pick up
			a sub-string of a longer command, check the byte after the expected
			end of the string is either the end of the string or a space before
			a parameter. */
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
   17c8a:	68fa      	ldr	r2, [r7, #12]
   17c8c:	697b      	ldr	r3, [r7, #20]
   17c8e:	18d3      	adds	r3, r2, r3
   17c90:	781b      	ldrb	r3, [r3, #0]
   17c92:	2b20      	cmp	r3, #32
   17c94:	d005      	beq.n	17ca2 <FreeRTOS_CLIProcessCommand+0x4e>
   17c96:	68fa      	ldr	r2, [r7, #12]
   17c98:	697b      	ldr	r3, [r7, #20]
   17c9a:	18d3      	adds	r3, r2, r3
   17c9c:	781b      	ldrb	r3, [r3, #0]
   17c9e:	2b00      	cmp	r3, #0
   17ca0:	d11e      	bne.n	17ce0 <FreeRTOS_CLIProcessCommand+0x8c>
			{
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
   17ca2:	697a      	ldr	r2, [r7, #20]
   17ca4:	69b9      	ldr	r1, [r7, #24]
   17ca6:	68fb      	ldr	r3, [r7, #12]
   17ca8:	0018      	movs	r0, r3
   17caa:	4b2f      	ldr	r3, [pc, #188]	; (17d68 <FreeRTOS_CLIProcessCommand+0x114>)
   17cac:	4798      	blx	r3
   17cae:	1e03      	subs	r3, r0, #0
   17cb0:	d116      	bne.n	17ce0 <FreeRTOS_CLIProcessCommand+0x8c>
				{
					/* The command has been found.  Check it has the expected
					number of parameters.  If cExpectedNumberOfParameters is -1,
					then there could be a variable number of parameters and no
					check is made. */
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
   17cb2:	4b2a      	ldr	r3, [pc, #168]	; (17d5c <FreeRTOS_CLIProcessCommand+0x108>)
   17cb4:	681b      	ldr	r3, [r3, #0]
   17cb6:	681b      	ldr	r3, [r3, #0]
   17cb8:	7b1b      	ldrb	r3, [r3, #12]
   17cba:	b25b      	sxtb	r3, r3
   17cbc:	2b00      	cmp	r3, #0
   17cbe:	db19      	blt.n	17cf4 <FreeRTOS_CLIProcessCommand+0xa0>
					{
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
   17cc0:	68fb      	ldr	r3, [r7, #12]
   17cc2:	0018      	movs	r0, r3
   17cc4:	4b29      	ldr	r3, [pc, #164]	; (17d6c <FreeRTOS_CLIProcessCommand+0x118>)
   17cc6:	4798      	blx	r3
   17cc8:	0003      	movs	r3, r0
   17cca:	001a      	movs	r2, r3
   17ccc:	4b23      	ldr	r3, [pc, #140]	; (17d5c <FreeRTOS_CLIProcessCommand+0x108>)
   17cce:	681b      	ldr	r3, [r3, #0]
   17cd0:	681b      	ldr	r3, [r3, #0]
   17cd2:	7b1b      	ldrb	r3, [r3, #12]
   17cd4:	b25b      	sxtb	r3, r3
   17cd6:	429a      	cmp	r2, r3
   17cd8:	d00c      	beq.n	17cf4 <FreeRTOS_CLIProcessCommand+0xa0>
						{
							xReturn = pdFALSE;
   17cda:	2300      	movs	r3, #0
   17cdc:	61fb      	str	r3, [r7, #28]
						}
					}

					break;
   17cde:	e009      	b.n	17cf4 <FreeRTOS_CLIProcessCommand+0xa0>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   17ce0:	4b1e      	ldr	r3, [pc, #120]	; (17d5c <FreeRTOS_CLIProcessCommand+0x108>)
   17ce2:	681b      	ldr	r3, [r3, #0]
   17ce4:	685a      	ldr	r2, [r3, #4]
   17ce6:	4b1d      	ldr	r3, [pc, #116]	; (17d5c <FreeRTOS_CLIProcessCommand+0x108>)
   17ce8:	601a      	str	r2, [r3, #0]
   17cea:	4b1c      	ldr	r3, [pc, #112]	; (17d5c <FreeRTOS_CLIProcessCommand+0x108>)
   17cec:	681b      	ldr	r3, [r3, #0]
   17cee:	2b00      	cmp	r3, #0
   17cf0:	d1c0      	bne.n	17c74 <FreeRTOS_CLIProcessCommand+0x20>
   17cf2:	e000      	b.n	17cf6 <FreeRTOS_CLIProcessCommand+0xa2>
					break;
   17cf4:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
	}

	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
   17cf6:	4b19      	ldr	r3, [pc, #100]	; (17d5c <FreeRTOS_CLIProcessCommand+0x108>)
   17cf8:	681b      	ldr	r3, [r3, #0]
   17cfa:	2b00      	cmp	r3, #0
   17cfc:	d00c      	beq.n	17d18 <FreeRTOS_CLIProcessCommand+0xc4>
   17cfe:	69fb      	ldr	r3, [r7, #28]
   17d00:	2b00      	cmp	r3, #0
   17d02:	d109      	bne.n	17d18 <FreeRTOS_CLIProcessCommand+0xc4>
	{
		/* The command was found, but the number of parameters with the command
		was incorrect. */
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   17d04:	687a      	ldr	r2, [r7, #4]
   17d06:	491a      	ldr	r1, [pc, #104]	; (17d70 <FreeRTOS_CLIProcessCommand+0x11c>)
   17d08:	68bb      	ldr	r3, [r7, #8]
   17d0a:	0018      	movs	r0, r3
   17d0c:	4b19      	ldr	r3, [pc, #100]	; (17d74 <FreeRTOS_CLIProcessCommand+0x120>)
   17d0e:	4798      	blx	r3
		pxCommand = NULL;
   17d10:	4b12      	ldr	r3, [pc, #72]	; (17d5c <FreeRTOS_CLIProcessCommand+0x108>)
   17d12:	2200      	movs	r2, #0
   17d14:	601a      	str	r2, [r3, #0]
   17d16:	e01c      	b.n	17d52 <FreeRTOS_CLIProcessCommand+0xfe>
	}
	else if( pxCommand != NULL )
   17d18:	4b10      	ldr	r3, [pc, #64]	; (17d5c <FreeRTOS_CLIProcessCommand+0x108>)
   17d1a:	681b      	ldr	r3, [r3, #0]
   17d1c:	2b00      	cmp	r3, #0
   17d1e:	d010      	beq.n	17d42 <FreeRTOS_CLIProcessCommand+0xee>
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
   17d20:	4b0e      	ldr	r3, [pc, #56]	; (17d5c <FreeRTOS_CLIProcessCommand+0x108>)
   17d22:	681b      	ldr	r3, [r3, #0]
   17d24:	681b      	ldr	r3, [r3, #0]
   17d26:	689b      	ldr	r3, [r3, #8]
   17d28:	68fa      	ldr	r2, [r7, #12]
   17d2a:	6879      	ldr	r1, [r7, #4]
   17d2c:	68b8      	ldr	r0, [r7, #8]
   17d2e:	4798      	blx	r3
   17d30:	0003      	movs	r3, r0
   17d32:	61fb      	str	r3, [r7, #28]

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
   17d34:	69fb      	ldr	r3, [r7, #28]
   17d36:	2b00      	cmp	r3, #0
   17d38:	d10b      	bne.n	17d52 <FreeRTOS_CLIProcessCommand+0xfe>
		{
			pxCommand = NULL;
   17d3a:	4b08      	ldr	r3, [pc, #32]	; (17d5c <FreeRTOS_CLIProcessCommand+0x108>)
   17d3c:	2200      	movs	r2, #0
   17d3e:	601a      	str	r2, [r3, #0]
   17d40:	e007      	b.n	17d52 <FreeRTOS_CLIProcessCommand+0xfe>
		}
	}
	else
	{
		/* pxCommand was NULL, the command was not found. */
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   17d42:	687a      	ldr	r2, [r7, #4]
   17d44:	490c      	ldr	r1, [pc, #48]	; (17d78 <FreeRTOS_CLIProcessCommand+0x124>)
   17d46:	68bb      	ldr	r3, [r7, #8]
   17d48:	0018      	movs	r0, r3
   17d4a:	4b0a      	ldr	r3, [pc, #40]	; (17d74 <FreeRTOS_CLIProcessCommand+0x120>)
   17d4c:	4798      	blx	r3
		xReturn = pdFALSE;
   17d4e:	2300      	movs	r3, #0
   17d50:	61fb      	str	r3, [r7, #28]
	}

	return xReturn;
   17d52:	69fb      	ldr	r3, [r7, #28]
}
   17d54:	0018      	movs	r0, r3
   17d56:	46bd      	mov	sp, r7
   17d58:	b008      	add	sp, #32
   17d5a:	bd80      	pop	{r7, pc}
   17d5c:	20000adc 	.word	0x20000adc
   17d60:	200000b4 	.word	0x200000b4
   17d64:	0003443b 	.word	0x0003443b
   17d68:	00034449 	.word	0x00034449
   17d6c:	00017ddd 	.word	0x00017ddd
   17d70:	00037788 	.word	0x00037788
   17d74:	0003446b 	.word	0x0003446b
   17d78:	000377e0 	.word	0x000377e0

00017d7c <prvHelpCommand>:
	return pcReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
   17d7c:	b580      	push	{r7, lr}
   17d7e:	b086      	sub	sp, #24
   17d80:	af00      	add	r7, sp, #0
   17d82:	60f8      	str	r0, [r7, #12]
   17d84:	60b9      	str	r1, [r7, #8]
   17d86:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
   17d88:	4b11      	ldr	r3, [pc, #68]	; (17dd0 <prvHelpCommand+0x54>)
   17d8a:	681b      	ldr	r3, [r3, #0]
   17d8c:	2b00      	cmp	r3, #0
   17d8e:	d102      	bne.n	17d96 <prvHelpCommand+0x1a>
	{
		/* Reset the pxCommand pointer back to the start of the list. */
		pxCommand = &xRegisteredCommands;
   17d90:	4b0f      	ldr	r3, [pc, #60]	; (17dd0 <prvHelpCommand+0x54>)
   17d92:	4a10      	ldr	r2, [pc, #64]	; (17dd4 <prvHelpCommand+0x58>)
   17d94:	601a      	str	r2, [r3, #0]
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
   17d96:	4b0e      	ldr	r3, [pc, #56]	; (17dd0 <prvHelpCommand+0x54>)
   17d98:	681b      	ldr	r3, [r3, #0]
   17d9a:	681b      	ldr	r3, [r3, #0]
   17d9c:	6859      	ldr	r1, [r3, #4]
   17d9e:	68ba      	ldr	r2, [r7, #8]
   17da0:	68fb      	ldr	r3, [r7, #12]
   17da2:	0018      	movs	r0, r3
   17da4:	4b0c      	ldr	r3, [pc, #48]	; (17dd8 <prvHelpCommand+0x5c>)
   17da6:	4798      	blx	r3
	pxCommand = pxCommand->pxNext;
   17da8:	4b09      	ldr	r3, [pc, #36]	; (17dd0 <prvHelpCommand+0x54>)
   17daa:	681b      	ldr	r3, [r3, #0]
   17dac:	685a      	ldr	r2, [r3, #4]
   17dae:	4b08      	ldr	r3, [pc, #32]	; (17dd0 <prvHelpCommand+0x54>)
   17db0:	601a      	str	r2, [r3, #0]

	if( pxCommand == NULL )
   17db2:	4b07      	ldr	r3, [pc, #28]	; (17dd0 <prvHelpCommand+0x54>)
   17db4:	681b      	ldr	r3, [r3, #0]
   17db6:	2b00      	cmp	r3, #0
   17db8:	d102      	bne.n	17dc0 <prvHelpCommand+0x44>
	{
		/* There are no more commands in the list, so there will be no more
		strings to return after this one and pdFALSE should be returned. */
		xReturn = pdFALSE;
   17dba:	2300      	movs	r3, #0
   17dbc:	617b      	str	r3, [r7, #20]
   17dbe:	e001      	b.n	17dc4 <prvHelpCommand+0x48>
	}
	else
	{
		xReturn = pdTRUE;
   17dc0:	2301      	movs	r3, #1
   17dc2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
   17dc4:	697b      	ldr	r3, [r7, #20]
}
   17dc6:	0018      	movs	r0, r3
   17dc8:	46bd      	mov	sp, r7
   17dca:	b006      	add	sp, #24
   17dcc:	bd80      	pop	{r7, pc}
   17dce:	46c0      	nop			; (mov r8, r8)
   17dd0:	20000ae0 	.word	0x20000ae0
   17dd4:	200000b4 	.word	0x200000b4
   17dd8:	0003446b 	.word	0x0003446b

00017ddc <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char *pcCommandString )
{
   17ddc:	b580      	push	{r7, lr}
   17dde:	b084      	sub	sp, #16
   17de0:	af00      	add	r7, sp, #0
   17de2:	6078      	str	r0, [r7, #4]
int8_t cParameters = 0;
   17de4:	230f      	movs	r3, #15
   17de6:	18fb      	adds	r3, r7, r3
   17de8:	2200      	movs	r2, #0
   17dea:	701a      	strb	r2, [r3, #0]
BaseType_t xLastCharacterWasSpace = pdFALSE;
   17dec:	2300      	movs	r3, #0
   17dee:	60bb      	str	r3, [r7, #8]

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
   17df0:	e018      	b.n	17e24 <prvGetNumberOfParameters+0x48>
	{
		if( ( *pcCommandString ) == ' ' )
   17df2:	687b      	ldr	r3, [r7, #4]
   17df4:	781b      	ldrb	r3, [r3, #0]
   17df6:	2b20      	cmp	r3, #32
   17df8:	d10f      	bne.n	17e1a <prvGetNumberOfParameters+0x3e>
		{
			if( xLastCharacterWasSpace != pdTRUE )
   17dfa:	68bb      	ldr	r3, [r7, #8]
   17dfc:	2b01      	cmp	r3, #1
   17dfe:	d00e      	beq.n	17e1e <prvGetNumberOfParameters+0x42>
			{
				cParameters++;
   17e00:	230f      	movs	r3, #15
   17e02:	18fb      	adds	r3, r7, r3
   17e04:	781b      	ldrb	r3, [r3, #0]
   17e06:	b25b      	sxtb	r3, r3
   17e08:	b2db      	uxtb	r3, r3
   17e0a:	3301      	adds	r3, #1
   17e0c:	b2da      	uxtb	r2, r3
   17e0e:	230f      	movs	r3, #15
   17e10:	18fb      	adds	r3, r7, r3
   17e12:	701a      	strb	r2, [r3, #0]
				xLastCharacterWasSpace = pdTRUE;
   17e14:	2301      	movs	r3, #1
   17e16:	60bb      	str	r3, [r7, #8]
   17e18:	e001      	b.n	17e1e <prvGetNumberOfParameters+0x42>
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
   17e1a:	2300      	movs	r3, #0
   17e1c:	60bb      	str	r3, [r7, #8]
		}

		pcCommandString++;
   17e1e:	687b      	ldr	r3, [r7, #4]
   17e20:	3301      	adds	r3, #1
   17e22:	607b      	str	r3, [r7, #4]
	while( *pcCommandString != 0x00 )
   17e24:	687b      	ldr	r3, [r7, #4]
   17e26:	781b      	ldrb	r3, [r3, #0]
   17e28:	2b00      	cmp	r3, #0
   17e2a:	d1e2      	bne.n	17df2 <prvGetNumberOfParameters+0x16>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
   17e2c:	68bb      	ldr	r3, [r7, #8]
   17e2e:	2b01      	cmp	r3, #1
   17e30:	d109      	bne.n	17e46 <prvGetNumberOfParameters+0x6a>
	{
		cParameters--;
   17e32:	230f      	movs	r3, #15
   17e34:	18fb      	adds	r3, r7, r3
   17e36:	781b      	ldrb	r3, [r3, #0]
   17e38:	b25b      	sxtb	r3, r3
   17e3a:	b2db      	uxtb	r3, r3
   17e3c:	3b01      	subs	r3, #1
   17e3e:	b2da      	uxtb	r2, r3
   17e40:	230f      	movs	r3, #15
   17e42:	18fb      	adds	r3, r7, r3
   17e44:	701a      	strb	r2, [r3, #0]
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
   17e46:	230f      	movs	r3, #15
   17e48:	18fb      	adds	r3, r7, r3
   17e4a:	781b      	ldrb	r3, [r3, #0]
   17e4c:	b25b      	sxtb	r3, r3
}
   17e4e:	0018      	movs	r0, r3
   17e50:	46bd      	mov	sp, r7
   17e52:	b004      	add	sp, #16
   17e54:	bd80      	pop	{r7, pc}
	...

00017e58 <prvTraceGetQueueNumber>:
{
	return (uint32_t)ucQueueGetQueueNumber(handle);
}
#else 
uint32_t prvTraceGetQueueNumber(void* handle)
{
   17e58:	b580      	push	{r7, lr}
   17e5a:	b082      	sub	sp, #8
   17e5c:	af00      	add	r7, sp, #0
   17e5e:	6078      	str	r0, [r7, #4]
	return (uint32_t)uxQueueGetQueueNumber(handle);
   17e60:	687b      	ldr	r3, [r7, #4]
   17e62:	0018      	movs	r0, r3
   17e64:	4b03      	ldr	r3, [pc, #12]	; (17e74 <prvTraceGetQueueNumber+0x1c>)
   17e66:	4798      	blx	r3
   17e68:	0003      	movs	r3, r0
}
   17e6a:	0018      	movs	r0, r3
   17e6c:	46bd      	mov	sp, r7
   17e6e:	b002      	add	sp, #8
   17e70:	bd80      	pop	{r7, pc}
   17e72:	46c0      	nop			; (mov r8, r8)
   17e74:	0001b619 	.word	0x0001b619

00017e78 <prvTraceGetQueueType>:
#endif /* (TRC_CFG_FREERTOS_VERSION < TRC_FREERTOS_VERSION_8_X) */

uint8_t prvTraceGetQueueType(void* handle)
{
   17e78:	b580      	push	{r7, lr}
   17e7a:	b082      	sub	sp, #8
   17e7c:	af00      	add	r7, sp, #0
   17e7e:	6078      	str	r0, [r7, #4]
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType(handle);
   17e80:	687b      	ldr	r3, [r7, #4]
   17e82:	0018      	movs	r0, r3
   17e84:	4b03      	ldr	r3, [pc, #12]	; (17e94 <prvTraceGetQueueType+0x1c>)
   17e86:	4798      	blx	r3
   17e88:	0003      	movs	r3, r0
}
   17e8a:	0018      	movs	r0, r3
   17e8c:	46bd      	mov	sp, r7
   17e8e:	b002      	add	sp, #8
   17e90:	bd80      	pop	{r7, pc}
   17e92:	46c0      	nop			; (mov r8, r8)
   17e94:	0001b645 	.word	0x0001b645

00017e98 <prvTraceGetTaskNumberLow16>:

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* handle)
{
   17e98:	b580      	push	{r7, lr}
   17e9a:	b082      	sub	sp, #8
   17e9c:	af00      	add	r7, sp, #0
   17e9e:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
   17ea0:	687b      	ldr	r3, [r7, #4]
   17ea2:	0018      	movs	r0, r3
   17ea4:	4b03      	ldr	r3, [pc, #12]	; (17eb4 <prvTraceGetTaskNumberLow16+0x1c>)
   17ea6:	4798      	blx	r3
   17ea8:	0003      	movs	r3, r0
   17eaa:	b29b      	uxth	r3, r3
}
   17eac:	0018      	movs	r0, r3
   17eae:	46bd      	mov	sp, r7
   17eb0:	b002      	add	sp, #8
   17eb2:	bd80      	pop	{r7, pc}
   17eb4:	0001c975 	.word	0x0001c975

00017eb8 <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* handle)
{
   17eb8:	b580      	push	{r7, lr}
   17eba:	b082      	sub	sp, #8
   17ebc:	af00      	add	r7, sp, #0
   17ebe:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(handle));
   17ec0:	687b      	ldr	r3, [r7, #4]
   17ec2:	0018      	movs	r0, r3
   17ec4:	4b04      	ldr	r3, [pc, #16]	; (17ed8 <prvTraceGetTaskNumberHigh16+0x20>)
   17ec6:	4798      	blx	r3
   17ec8:	0003      	movs	r3, r0
   17eca:	0c1b      	lsrs	r3, r3, #16
   17ecc:	b29b      	uxth	r3, r3
}
   17ece:	0018      	movs	r0, r3
   17ed0:	46bd      	mov	sp, r7
   17ed2:	b002      	add	sp, #8
   17ed4:	bd80      	pop	{r7, pc}
   17ed6:	46c0      	nop			; (mov r8, r8)
   17ed8:	0001c975 	.word	0x0001c975

00017edc <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* handle, uint16_t value)
{
   17edc:	b580      	push	{r7, lr}
   17ede:	b082      	sub	sp, #8
   17ee0:	af00      	add	r7, sp, #0
   17ee2:	6078      	str	r0, [r7, #4]
   17ee4:	000a      	movs	r2, r1
   17ee6:	1cbb      	adds	r3, r7, #2
   17ee8:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_LOW16(uxTaskGetTaskNumber(handle), value));
   17eea:	687b      	ldr	r3, [r7, #4]
   17eec:	0018      	movs	r0, r3
   17eee:	4b08      	ldr	r3, [pc, #32]	; (17f10 <prvTraceSetTaskNumberLow16+0x34>)
   17ef0:	4798      	blx	r3
   17ef2:	0003      	movs	r3, r0
   17ef4:	0c1b      	lsrs	r3, r3, #16
   17ef6:	041a      	lsls	r2, r3, #16
   17ef8:	1cbb      	adds	r3, r7, #2
   17efa:	881b      	ldrh	r3, [r3, #0]
   17efc:	431a      	orrs	r2, r3
   17efe:	687b      	ldr	r3, [r7, #4]
   17f00:	0011      	movs	r1, r2
   17f02:	0018      	movs	r0, r3
   17f04:	4b03      	ldr	r3, [pc, #12]	; (17f14 <prvTraceSetTaskNumberLow16+0x38>)
   17f06:	4798      	blx	r3
}
   17f08:	46c0      	nop			; (mov r8, r8)
   17f0a:	46bd      	mov	sp, r7
   17f0c:	b002      	add	sp, #8
   17f0e:	bd80      	pop	{r7, pc}
   17f10:	0001c975 	.word	0x0001c975
   17f14:	0001c99d 	.word	0x0001c99d

00017f18 <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* handle, uint16_t value)
{
   17f18:	b580      	push	{r7, lr}
   17f1a:	b082      	sub	sp, #8
   17f1c:	af00      	add	r7, sp, #0
   17f1e:	6078      	str	r0, [r7, #4]
   17f20:	000a      	movs	r2, r1
   17f22:	1cbb      	adds	r3, r7, #2
   17f24:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
   17f26:	687b      	ldr	r3, [r7, #4]
   17f28:	0018      	movs	r0, r3
   17f2a:	4b09      	ldr	r3, [pc, #36]	; (17f50 <prvTraceSetTaskNumberHigh16+0x38>)
   17f2c:	4798      	blx	r3
   17f2e:	0003      	movs	r3, r0
   17f30:	041b      	lsls	r3, r3, #16
   17f32:	0c1a      	lsrs	r2, r3, #16
   17f34:	1cbb      	adds	r3, r7, #2
   17f36:	881b      	ldrh	r3, [r3, #0]
   17f38:	041b      	lsls	r3, r3, #16
   17f3a:	431a      	orrs	r2, r3
   17f3c:	687b      	ldr	r3, [r7, #4]
   17f3e:	0011      	movs	r1, r2
   17f40:	0018      	movs	r0, r3
   17f42:	4b04      	ldr	r3, [pc, #16]	; (17f54 <prvTraceSetTaskNumberHigh16+0x3c>)
   17f44:	4798      	blx	r3
}
   17f46:	46c0      	nop			; (mov r8, r8)
   17f48:	46bd      	mov	sp, r7
   17f4a:	b002      	add	sp, #8
   17f4c:	bd80      	pop	{r7, pc}
   17f4e:	46c0      	nop			; (mov r8, r8)
   17f50:	0001c975 	.word	0x0001c975
   17f54:	0001c99d 	.word	0x0001c99d

00017f58 <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* handle)
{
   17f58:	b580      	push	{r7, lr}
   17f5a:	b082      	sub	sp, #8
   17f5c:	af00      	add	r7, sp, #0
   17f5e:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(handle));
   17f60:	687b      	ldr	r3, [r7, #4]
   17f62:	0018      	movs	r0, r3
   17f64:	4b03      	ldr	r3, [pc, #12]	; (17f74 <prvTraceGetQueueNumberLow16+0x1c>)
   17f66:	4798      	blx	r3
   17f68:	0003      	movs	r3, r0
   17f6a:	b29b      	uxth	r3, r3
}
   17f6c:	0018      	movs	r0, r3
   17f6e:	46bd      	mov	sp, r7
   17f70:	b002      	add	sp, #8
   17f72:	bd80      	pop	{r7, pc}
   17f74:	00017e59 	.word	0x00017e59

00017f78 <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* handle)
{
   17f78:	b580      	push	{r7, lr}
   17f7a:	b082      	sub	sp, #8
   17f7c:	af00      	add	r7, sp, #0
   17f7e:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(handle));
   17f80:	687b      	ldr	r3, [r7, #4]
   17f82:	0018      	movs	r0, r3
   17f84:	4b04      	ldr	r3, [pc, #16]	; (17f98 <prvTraceGetQueueNumberHigh16+0x20>)
   17f86:	4798      	blx	r3
   17f88:	0003      	movs	r3, r0
   17f8a:	0c1b      	lsrs	r3, r3, #16
   17f8c:	b29b      	uxth	r3, r3
}
   17f8e:	0018      	movs	r0, r3
   17f90:	46bd      	mov	sp, r7
   17f92:	b002      	add	sp, #8
   17f94:	bd80      	pop	{r7, pc}
   17f96:	46c0      	nop			; (mov r8, r8)
   17f98:	00017e59 	.word	0x00017e59

00017f9c <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* handle, uint16_t value)
{
   17f9c:	b580      	push	{r7, lr}
   17f9e:	b082      	sub	sp, #8
   17fa0:	af00      	add	r7, sp, #0
   17fa2:	6078      	str	r0, [r7, #4]
   17fa4:	000a      	movs	r2, r1
   17fa6:	1cbb      	adds	r3, r7, #2
   17fa8:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_LOW16(prvTraceGetQueueNumber(handle), value));
   17faa:	687b      	ldr	r3, [r7, #4]
   17fac:	0018      	movs	r0, r3
   17fae:	4b08      	ldr	r3, [pc, #32]	; (17fd0 <prvTraceSetQueueNumberLow16+0x34>)
   17fb0:	4798      	blx	r3
   17fb2:	0003      	movs	r3, r0
   17fb4:	0c1b      	lsrs	r3, r3, #16
   17fb6:	041a      	lsls	r2, r3, #16
   17fb8:	1cbb      	adds	r3, r7, #2
   17fba:	881b      	ldrh	r3, [r3, #0]
   17fbc:	431a      	orrs	r2, r3
   17fbe:	687b      	ldr	r3, [r7, #4]
   17fc0:	0011      	movs	r1, r2
   17fc2:	0018      	movs	r0, r3
   17fc4:	4b03      	ldr	r3, [pc, #12]	; (17fd4 <prvTraceSetQueueNumberLow16+0x38>)
   17fc6:	4798      	blx	r3
}
   17fc8:	46c0      	nop			; (mov r8, r8)
   17fca:	46bd      	mov	sp, r7
   17fcc:	b002      	add	sp, #8
   17fce:	bd80      	pop	{r7, pc}
   17fd0:	00017e59 	.word	0x00017e59
   17fd4:	0001b62d 	.word	0x0001b62d

00017fd8 <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* handle, uint16_t value)
{
   17fd8:	b580      	push	{r7, lr}
   17fda:	b082      	sub	sp, #8
   17fdc:	af00      	add	r7, sp, #0
   17fde:	6078      	str	r0, [r7, #4]
   17fe0:	000a      	movs	r2, r1
   17fe2:	1cbb      	adds	r3, r7, #2
   17fe4:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_HIGH16(prvTraceGetQueueNumber(handle), value));
   17fe6:	687b      	ldr	r3, [r7, #4]
   17fe8:	0018      	movs	r0, r3
   17fea:	4b09      	ldr	r3, [pc, #36]	; (18010 <prvTraceSetQueueNumberHigh16+0x38>)
   17fec:	4798      	blx	r3
   17fee:	0003      	movs	r3, r0
   17ff0:	041b      	lsls	r3, r3, #16
   17ff2:	0c1a      	lsrs	r2, r3, #16
   17ff4:	1cbb      	adds	r3, r7, #2
   17ff6:	881b      	ldrh	r3, [r3, #0]
   17ff8:	041b      	lsls	r3, r3, #16
   17ffa:	431a      	orrs	r2, r3
   17ffc:	687b      	ldr	r3, [r7, #4]
   17ffe:	0011      	movs	r1, r2
   18000:	0018      	movs	r0, r3
   18002:	4b04      	ldr	r3, [pc, #16]	; (18014 <prvTraceSetQueueNumberHigh16+0x3c>)
   18004:	4798      	blx	r3
}
   18006:	46c0      	nop			; (mov r8, r8)
   18008:	46bd      	mov	sp, r7
   1800a:	b002      	add	sp, #8
   1800c:	bd80      	pop	{r7, pc}
   1800e:	46c0      	nop			; (mov r8, r8)
   18010:	00017e59 	.word	0x00017e59
   18014:	0001b62d 	.word	0x0001b62d

00018018 <prvAddTaskToStackMonitor>:
TaskStackMonitorEntry_t tasksInStackMonitor[TRC_CFG_STACK_MONITOR_MAX_TASKS] = { NULL };

int tasksNotIncluded = 0;

void prvAddTaskToStackMonitor(void* task)
{
   18018:	b580      	push	{r7, lr}
   1801a:	b084      	sub	sp, #16
   1801c:	af00      	add	r7, sp, #0
   1801e:	6078      	str	r0, [r7, #4]
	int foundEmptySlot = 0;
   18020:	2300      	movs	r3, #0
   18022:	60fb      	str	r3, [r7, #12]

	// find an empty slot
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
   18024:	2300      	movs	r3, #0
   18026:	60bb      	str	r3, [r7, #8]
   18028:	e018      	b.n	1805c <prvAddTaskToStackMonitor+0x44>
	{
		if (tasksInStackMonitor[i].tcb == NULL)
   1802a:	4b14      	ldr	r3, [pc, #80]	; (1807c <prvAddTaskToStackMonitor+0x64>)
   1802c:	68ba      	ldr	r2, [r7, #8]
   1802e:	00d2      	lsls	r2, r2, #3
   18030:	58d3      	ldr	r3, [r2, r3]
   18032:	2b00      	cmp	r3, #0
   18034:	d10f      	bne.n	18056 <prvAddTaskToStackMonitor+0x3e>
		{
			tasksInStackMonitor[i].tcb = task;
   18036:	4b11      	ldr	r3, [pc, #68]	; (1807c <prvAddTaskToStackMonitor+0x64>)
   18038:	68ba      	ldr	r2, [r7, #8]
   1803a:	00d2      	lsls	r2, r2, #3
   1803c:	6879      	ldr	r1, [r7, #4]
   1803e:	50d1      	str	r1, [r2, r3]
			tasksInStackMonitor[i].uiPreviousLowMark = 0xFFFFFFFF;
   18040:	4a0e      	ldr	r2, [pc, #56]	; (1807c <prvAddTaskToStackMonitor+0x64>)
   18042:	68bb      	ldr	r3, [r7, #8]
   18044:	00db      	lsls	r3, r3, #3
   18046:	18d3      	adds	r3, r2, r3
   18048:	3304      	adds	r3, #4
   1804a:	2201      	movs	r2, #1
   1804c:	4252      	negs	r2, r2
   1804e:	601a      	str	r2, [r3, #0]
			foundEmptySlot = 1;
   18050:	2301      	movs	r3, #1
   18052:	60fb      	str	r3, [r7, #12]
			break;
   18054:	e005      	b.n	18062 <prvAddTaskToStackMonitor+0x4a>
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
   18056:	68bb      	ldr	r3, [r7, #8]
   18058:	3301      	adds	r3, #1
   1805a:	60bb      	str	r3, [r7, #8]
   1805c:	68bb      	ldr	r3, [r7, #8]
   1805e:	2b09      	cmp	r3, #9
   18060:	dde3      	ble.n	1802a <prvAddTaskToStackMonitor+0x12>
		}
	}

	if (foundEmptySlot == 0)
   18062:	68fb      	ldr	r3, [r7, #12]
   18064:	2b00      	cmp	r3, #0
   18066:	d104      	bne.n	18072 <prvAddTaskToStackMonitor+0x5a>
	{
		tasksNotIncluded++;
   18068:	4b05      	ldr	r3, [pc, #20]	; (18080 <prvAddTaskToStackMonitor+0x68>)
   1806a:	681b      	ldr	r3, [r3, #0]
   1806c:	1c5a      	adds	r2, r3, #1
   1806e:	4b04      	ldr	r3, [pc, #16]	; (18080 <prvAddTaskToStackMonitor+0x68>)
   18070:	601a      	str	r2, [r3, #0]
	}
}
   18072:	46c0      	nop			; (mov r8, r8)
   18074:	46bd      	mov	sp, r7
   18076:	b004      	add	sp, #16
   18078:	bd80      	pop	{r7, pc}
   1807a:	46c0      	nop			; (mov r8, r8)
   1807c:	20000ae8 	.word	0x20000ae8
   18080:	20000b38 	.word	0x20000b38

00018084 <prvReportStackUsage>:
		}
	}
}

void prvReportStackUsage()
{
   18084:	b590      	push	{r4, r7, lr}
   18086:	b085      	sub	sp, #20
   18088:	af00      	add	r7, sp, #0
	static int i = 0;	/* Static index used to loop over the monitored tasks */
	int count = 0;		/* The number of generated reports */
   1808a:	2300      	movs	r3, #0
   1808c:	60fb      	str	r3, [r7, #12]
	int initial = i;	/* Used to make sure we break if we are back at the inital value */
   1808e:	4b2b      	ldr	r3, [pc, #172]	; (1813c <prvReportStackUsage+0xb8>)
   18090:	681b      	ldr	r3, [r3, #0]
   18092:	60bb      	str	r3, [r7, #8]
	
	do
	{
		/* Check the current spot */
		if (tasksInStackMonitor[i].tcb != NULL)
   18094:	4b29      	ldr	r3, [pc, #164]	; (1813c <prvReportStackUsage+0xb8>)
   18096:	681a      	ldr	r2, [r3, #0]
   18098:	4b29      	ldr	r3, [pc, #164]	; (18140 <prvReportStackUsage+0xbc>)
   1809a:	00d2      	lsls	r2, r2, #3
   1809c:	58d3      	ldr	r3, [r2, r3]
   1809e:	2b00      	cmp	r3, #0
   180a0:	d035      	beq.n	1810e <prvReportStackUsage+0x8a>
		{
			/* Get the amount of unused stack */
			uint32_t unusedStackSpace = uxTaskGetStackHighWaterMark((TaskType)tasksInStackMonitor[i].tcb);
   180a2:	4b26      	ldr	r3, [pc, #152]	; (1813c <prvReportStackUsage+0xb8>)
   180a4:	681a      	ldr	r2, [r3, #0]
   180a6:	4b26      	ldr	r3, [pc, #152]	; (18140 <prvReportStackUsage+0xbc>)
   180a8:	00d2      	lsls	r2, r2, #3
   180aa:	58d3      	ldr	r3, [r2, r3]
   180ac:	0018      	movs	r0, r3
   180ae:	4b25      	ldr	r3, [pc, #148]	; (18144 <prvReportStackUsage+0xc0>)
   180b0:	4798      	blx	r3
   180b2:	0003      	movs	r3, r0
   180b4:	607b      	str	r3, [r7, #4]

			/* Store for later use */
			if (tasksInStackMonitor[i].uiPreviousLowMark > unusedStackSpace)
   180b6:	4b21      	ldr	r3, [pc, #132]	; (1813c <prvReportStackUsage+0xb8>)
   180b8:	681b      	ldr	r3, [r3, #0]
   180ba:	4a21      	ldr	r2, [pc, #132]	; (18140 <prvReportStackUsage+0xbc>)
   180bc:	00db      	lsls	r3, r3, #3
   180be:	18d3      	adds	r3, r2, r3
   180c0:	3304      	adds	r3, #4
   180c2:	681a      	ldr	r2, [r3, #0]
   180c4:	687b      	ldr	r3, [r7, #4]
   180c6:	429a      	cmp	r2, r3
   180c8:	d907      	bls.n	180da <prvReportStackUsage+0x56>
				tasksInStackMonitor[i].uiPreviousLowMark = unusedStackSpace;
   180ca:	4b1c      	ldr	r3, [pc, #112]	; (1813c <prvReportStackUsage+0xb8>)
   180cc:	681b      	ldr	r3, [r3, #0]
   180ce:	4a1c      	ldr	r2, [pc, #112]	; (18140 <prvReportStackUsage+0xbc>)
   180d0:	00db      	lsls	r3, r3, #3
   180d2:	18d3      	adds	r3, r2, r3
   180d4:	3304      	adds	r3, #4
   180d6:	687a      	ldr	r2, [r7, #4]
   180d8:	601a      	str	r2, [r3, #0]

#if TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT
			prvTraceStoreKernelCallWithParam(TRACE_UNUSED_STACK, TRACE_CLASS_TASK, TRACE_GET_TASK_NUMBER(tasksInStackMonitor[i].tcb), tasksInStackMonitor[i].uiPreviousLowMark);
   180da:	4b18      	ldr	r3, [pc, #96]	; (1813c <prvReportStackUsage+0xb8>)
   180dc:	681a      	ldr	r2, [r3, #0]
   180de:	4b18      	ldr	r3, [pc, #96]	; (18140 <prvReportStackUsage+0xbc>)
   180e0:	00d2      	lsls	r2, r2, #3
   180e2:	58d3      	ldr	r3, [r2, r3]
   180e4:	0018      	movs	r0, r3
   180e6:	4b18      	ldr	r3, [pc, #96]	; (18148 <prvReportStackUsage+0xc4>)
   180e8:	4798      	blx	r3
   180ea:	0003      	movs	r3, r0
   180ec:	b2db      	uxtb	r3, r3
   180ee:	0019      	movs	r1, r3
   180f0:	4b12      	ldr	r3, [pc, #72]	; (1813c <prvReportStackUsage+0xb8>)
   180f2:	681b      	ldr	r3, [r3, #0]
   180f4:	4a12      	ldr	r2, [pc, #72]	; (18140 <prvReportStackUsage+0xbc>)
   180f6:	00db      	lsls	r3, r3, #3
   180f8:	18d3      	adds	r3, r2, r3
   180fa:	3304      	adds	r3, #4
   180fc:	681b      	ldr	r3, [r3, #0]
   180fe:	000a      	movs	r2, r1
   18100:	2103      	movs	r1, #3
   18102:	20ea      	movs	r0, #234	; 0xea
   18104:	4c11      	ldr	r4, [pc, #68]	; (1814c <prvReportStackUsage+0xc8>)
   18106:	47a0      	blx	r4
#else /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */
			prvTraceStoreEvent2(PSF_EVENT_UNUSED_STACK, (uint32_t)tasksInStackMonitor[i].tcb, tasksInStackMonitor[i].uiPreviousLowMark);
#endif /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */

			count++;
   18108:	68fb      	ldr	r3, [r7, #12]
   1810a:	3301      	adds	r3, #1
   1810c:	60fb      	str	r3, [r7, #12]
		}

		i = (i + 1) % TRC_CFG_STACK_MONITOR_MAX_TASKS; // Move i beyond this task
   1810e:	4b0b      	ldr	r3, [pc, #44]	; (1813c <prvReportStackUsage+0xb8>)
   18110:	681b      	ldr	r3, [r3, #0]
   18112:	1c5a      	adds	r2, r3, #1
   18114:	4b0e      	ldr	r3, [pc, #56]	; (18150 <prvReportStackUsage+0xcc>)
   18116:	210a      	movs	r1, #10
   18118:	0010      	movs	r0, r2
   1811a:	4798      	blx	r3
   1811c:	000b      	movs	r3, r1
   1811e:	001a      	movs	r2, r3
   18120:	4b06      	ldr	r3, [pc, #24]	; (1813c <prvReportStackUsage+0xb8>)
   18122:	601a      	str	r2, [r3, #0]
	} while (count < TRC_CFG_STACK_MONITOR_MAX_REPORTS && i != initial);
   18124:	68fb      	ldr	r3, [r7, #12]
   18126:	2b00      	cmp	r3, #0
   18128:	dc04      	bgt.n	18134 <prvReportStackUsage+0xb0>
   1812a:	4b04      	ldr	r3, [pc, #16]	; (1813c <prvReportStackUsage+0xb8>)
   1812c:	681a      	ldr	r2, [r3, #0]
   1812e:	68bb      	ldr	r3, [r7, #8]
   18130:	429a      	cmp	r2, r3
   18132:	d1af      	bne.n	18094 <prvReportStackUsage+0x10>
}
   18134:	46c0      	nop			; (mov r8, r8)
   18136:	46bd      	mov	sp, r7
   18138:	b005      	add	sp, #20
   1813a:	bd90      	pop	{r4, r7, pc}
   1813c:	20000b3c 	.word	0x20000b3c
   18140:	20000ae8 	.word	0x20000ae8
   18144:	0001cb15 	.word	0x0001cb15
   18148:	00017e99 	.word	0x00017e99
   1814c:	000189e1 	.word	0x000189e1
   18150:	000326a9 	.word	0x000326a9

00018154 <prvTraceGetCurrentTaskHandle>:
#endif /* (TRC_CFG_INCLUDE_STREAM_BUFFER_EVENTS == 1 && TRC_CFG_FREERTOS_VERSION >= TRC_FREERTOS_VERSION_10_0_0) */

#endif /* (TRC_CFG_SCHEDULING_ONLY == 0) */

void* prvTraceGetCurrentTaskHandle()
{
   18154:	b580      	push	{r7, lr}
   18156:	af00      	add	r7, sp, #0
	return xTaskGetCurrentTaskHandle();
   18158:	4b02      	ldr	r3, [pc, #8]	; (18164 <prvTraceGetCurrentTaskHandle+0x10>)
   1815a:	4798      	blx	r3
   1815c:	0003      	movs	r3, r0
}
   1815e:	0018      	movs	r0, r3
   18160:	46bd      	mov	sp, r7
   18162:	bd80      	pop	{r7, pc}
   18164:	0001cbc1 	.word	0x0001cbc1

00018168 <vTraceEnable>:
*
*
* Note: See other implementation of vTraceEnable in trcStreamingRecorder.c
******************************************************************************/
void vTraceEnable(int startOption)
{
   18168:	b590      	push	{r4, r7, lr}
   1816a:	b085      	sub	sp, #20
   1816c:	af02      	add	r7, sp, #8
   1816e:	6078      	str	r0, [r7, #4]
	prvTraceInitTraceData();
   18170:	4b14      	ldr	r3, [pc, #80]	; (181c4 <vTraceEnable+0x5c>)
   18172:	4798      	blx	r3

	if (startOption == TRC_START)
   18174:	687b      	ldr	r3, [r7, #4]
   18176:	2b01      	cmp	r3, #1
   18178:	d102      	bne.n	18180 <vTraceEnable+0x18>
	{
		vTraceStart();
   1817a:	4b13      	ldr	r3, [pc, #76]	; (181c8 <vTraceEnable+0x60>)
   1817c:	4798      	blx	r3
   1817e:	e00e      	b.n	1819e <vTraceEnable+0x36>
	}
	else if (startOption == TRC_START_AWAIT_HOST)
   18180:	687b      	ldr	r3, [r7, #4]
   18182:	2b02      	cmp	r3, #2
   18184:	d104      	bne.n	18190 <vTraceEnable+0x28>
	{
		prvTraceError("vTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
   18186:	4b11      	ldr	r3, [pc, #68]	; (181cc <vTraceEnable+0x64>)
   18188:	0018      	movs	r0, r3
   1818a:	4b11      	ldr	r3, [pc, #68]	; (181d0 <vTraceEnable+0x68>)
   1818c:	4798      	blx	r3
   1818e:	e006      	b.n	1819e <vTraceEnable+0x36>
	}
	else if (startOption != TRC_INIT)
   18190:	687b      	ldr	r3, [r7, #4]
   18192:	2b00      	cmp	r3, #0
   18194:	d003      	beq.n	1819e <vTraceEnable+0x36>
	{
		prvTraceError("Unexpected argument to vTraceEnable (snapshot mode)");
   18196:	4b0f      	ldr	r3, [pc, #60]	; (181d4 <vTraceEnable+0x6c>)
   18198:	0018      	movs	r0, r3
   1819a:	4b0d      	ldr	r3, [pc, #52]	; (181d0 <vTraceEnable+0x68>)
   1819c:	4798      	blx	r3
	}

#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
	/* Creates the TzCtrl task - reports unsed stack */
	if (HandleTzCtrl == NULL)
   1819e:	4b0e      	ldr	r3, [pc, #56]	; (181d8 <vTraceEnable+0x70>)
   181a0:	681b      	ldr	r3, [r3, #0]
   181a2:	2b00      	cmp	r3, #0
   181a4:	d109      	bne.n	181ba <vTraceEnable+0x52>
	{
#if defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1)
		HandleTzCtrl = xTaskCreateStatic(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, stackTzCtrl, &tcbTzCtrl);
#else /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
		xTaskCreate(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, &HandleTzCtrl);
   181a6:	490d      	ldr	r1, [pc, #52]	; (181dc <vTraceEnable+0x74>)
   181a8:	480d      	ldr	r0, [pc, #52]	; (181e0 <vTraceEnable+0x78>)
   181aa:	4b0b      	ldr	r3, [pc, #44]	; (181d8 <vTraceEnable+0x70>)
   181ac:	9301      	str	r3, [sp, #4]
   181ae:	2304      	movs	r3, #4
   181b0:	9300      	str	r3, [sp, #0]
   181b2:	2300      	movs	r3, #0
   181b4:	22c8      	movs	r2, #200	; 0xc8
   181b6:	4c0b      	ldr	r4, [pc, #44]	; (181e4 <vTraceEnable+0x7c>)
   181b8:	47a0      	blx	r4
#endif /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
	}

#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */
}
   181ba:	46c0      	nop			; (mov r8, r8)
   181bc:	46bd      	mov	sp, r7
   181be:	b003      	add	sp, #12
   181c0:	bd90      	pop	{r4, r7, pc}
   181c2:	46c0      	nop			; (mov r8, r8)
   181c4:	000190ad 	.word	0x000190ad
   181c8:	00018605 	.word	0x00018605
   181cc:	00037840 	.word	0x00037840
   181d0:	00019755 	.word	0x00019755
   181d4:	00037880 	.word	0x00037880
   181d8:	20000ae4 	.word	0x20000ae4
   181dc:	000378b4 	.word	0x000378b4
   181e0:	000181e9 	.word	0x000181e9
   181e4:	0001bb19 	.word	0x0001bb19

000181e8 <TzCtrl>:
* interface (assuming TRC_STREAM_PORT_USE_INTERNAL_BUFFER == 1) and for
* receiving commands from Tracealyzer. Also does some diagnostics.
******************************************************************************/
#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
static portTASK_FUNCTION(TzCtrl, pvParameters)
{
   181e8:	b580      	push	{r7, lr}
   181ea:	b082      	sub	sp, #8
   181ec:	af00      	add	r7, sp, #0
   181ee:	6078      	str	r0, [r7, #4]
	(void)pvParameters;

	while (1)
	{
		if (xTraceIsRecordingEnabled())
   181f0:	4b04      	ldr	r3, [pc, #16]	; (18204 <TzCtrl+0x1c>)
   181f2:	4798      	blx	r3
   181f4:	1e03      	subs	r3, r0, #0
   181f6:	d001      	beq.n	181fc <TzCtrl+0x14>
		{
			prvReportStackUsage();
   181f8:	4b03      	ldr	r3, [pc, #12]	; (18208 <TzCtrl+0x20>)
   181fa:	4798      	blx	r3
		}

		vTaskDelay(TRC_CFG_CTRL_TASK_DELAY);
   181fc:	2004      	movs	r0, #4
   181fe:	4b03      	ldr	r3, [pc, #12]	; (1820c <TzCtrl+0x24>)
   18200:	4798      	blx	r3
		if (xTraceIsRecordingEnabled())
   18202:	e7f5      	b.n	181f0 <TzCtrl+0x8>
   18204:	00018649 	.word	0x00018649
   18208:	00018085 	.word	0x00018085
   1820c:	0001beb5 	.word	0x0001beb5

00018210 <vTraceInitObjectPropertyTable>:
}
#endif

/* Initialization of the object property table */
void vTraceInitObjectPropertyTable()
{
   18210:	b580      	push	{r7, lr}
   18212:	af00      	add	r7, sp, #0
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
   18214:	4b60      	ldr	r3, [pc, #384]	; (18398 <vTraceInitObjectPropertyTable+0x188>)
   18216:	681b      	ldr	r3, [r3, #0]
   18218:	2209      	movs	r2, #9
   1821a:	65da      	str	r2, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
   1821c:	4b5e      	ldr	r3, [pc, #376]	; (18398 <vTraceInitObjectPropertyTable+0x188>)
   1821e:	681b      	ldr	r3, [r3, #0]
   18220:	2264      	movs	r2, #100	; 0x64
   18222:	210a      	movs	r1, #10
   18224:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = TRC_CFG_NSEMAPHORE;
   18226:	4b5c      	ldr	r3, [pc, #368]	; (18398 <vTraceInitObjectPropertyTable+0x188>)
   18228:	681b      	ldr	r3, [r3, #0]
   1822a:	2265      	movs	r2, #101	; 0x65
   1822c:	210a      	movs	r1, #10
   1822e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = TRC_CFG_NMUTEX;
   18230:	4b59      	ldr	r3, [pc, #356]	; (18398 <vTraceInitObjectPropertyTable+0x188>)
   18232:	681b      	ldr	r3, [r3, #0]
   18234:	2266      	movs	r2, #102	; 0x66
   18236:	210a      	movs	r1, #10
   18238:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
   1823a:	4b57      	ldr	r3, [pc, #348]	; (18398 <vTraceInitObjectPropertyTable+0x188>)
   1823c:	681b      	ldr	r3, [r3, #0]
   1823e:	2267      	movs	r2, #103	; 0x67
   18240:	210f      	movs	r1, #15
   18242:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
   18244:	4b54      	ldr	r3, [pc, #336]	; (18398 <vTraceInitObjectPropertyTable+0x188>)
   18246:	681b      	ldr	r3, [r3, #0]
   18248:	2268      	movs	r2, #104	; 0x68
   1824a:	2105      	movs	r1, #5
   1824c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
   1824e:	4b52      	ldr	r3, [pc, #328]	; (18398 <vTraceInitObjectPropertyTable+0x188>)
   18250:	681b      	ldr	r3, [r3, #0]
   18252:	2269      	movs	r2, #105	; 0x69
   18254:	2105      	movs	r1, #5
   18256:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
   18258:	4b4f      	ldr	r3, [pc, #316]	; (18398 <vTraceInitObjectPropertyTable+0x188>)
   1825a:	681b      	ldr	r3, [r3, #0]
   1825c:	226a      	movs	r2, #106	; 0x6a
   1825e:	2105      	movs	r1, #5
   18260:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
   18262:	4b4d      	ldr	r3, [pc, #308]	; (18398 <vTraceInitObjectPropertyTable+0x188>)
   18264:	681b      	ldr	r3, [r3, #0]
   18266:	226b      	movs	r2, #107	; 0x6b
   18268:	2105      	movs	r1, #5
   1826a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
   1826c:	4b4a      	ldr	r3, [pc, #296]	; (18398 <vTraceInitObjectPropertyTable+0x188>)
   1826e:	681b      	ldr	r3, [r3, #0]
   18270:	226c      	movs	r2, #108	; 0x6c
   18272:	2105      	movs	r1, #5
   18274:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
   18276:	4b48      	ldr	r3, [pc, #288]	; (18398 <vTraceInitObjectPropertyTable+0x188>)
   18278:	681b      	ldr	r3, [r3, #0]
   1827a:	2270      	movs	r2, #112	; 0x70
   1827c:	210f      	movs	r1, #15
   1827e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = TRC_CFG_NAME_LEN_SEMAPHORE;
   18280:	4b45      	ldr	r3, [pc, #276]	; (18398 <vTraceInitObjectPropertyTable+0x188>)
   18282:	681b      	ldr	r3, [r3, #0]
   18284:	2271      	movs	r2, #113	; 0x71
   18286:	210f      	movs	r1, #15
   18288:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = TRC_CFG_NAME_LEN_MUTEX;
   1828a:	4b43      	ldr	r3, [pc, #268]	; (18398 <vTraceInitObjectPropertyTable+0x188>)
   1828c:	681b      	ldr	r3, [r3, #0]
   1828e:	2272      	movs	r2, #114	; 0x72
   18290:	210f      	movs	r1, #15
   18292:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
   18294:	4b40      	ldr	r3, [pc, #256]	; (18398 <vTraceInitObjectPropertyTable+0x188>)
   18296:	681b      	ldr	r3, [r3, #0]
   18298:	2273      	movs	r2, #115	; 0x73
   1829a:	210f      	movs	r1, #15
   1829c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
   1829e:	4b3e      	ldr	r3, [pc, #248]	; (18398 <vTraceInitObjectPropertyTable+0x188>)
   182a0:	681b      	ldr	r3, [r3, #0]
   182a2:	2274      	movs	r2, #116	; 0x74
   182a4:	210f      	movs	r1, #15
   182a6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = TRC_CFG_NAME_LEN_TIMER;
   182a8:	4b3b      	ldr	r3, [pc, #236]	; (18398 <vTraceInitObjectPropertyTable+0x188>)
   182aa:	681b      	ldr	r3, [r3, #0]
   182ac:	2275      	movs	r2, #117	; 0x75
   182ae:	210f      	movs	r1, #15
   182b0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = TRC_CFG_NAME_LEN_EVENTGROUP;
   182b2:	4b39      	ldr	r3, [pc, #228]	; (18398 <vTraceInitObjectPropertyTable+0x188>)
   182b4:	681b      	ldr	r3, [r3, #0]
   182b6:	2276      	movs	r2, #118	; 0x76
   182b8:	210f      	movs	r1, #15
   182ba:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
   182bc:	4b36      	ldr	r3, [pc, #216]	; (18398 <vTraceInitObjectPropertyTable+0x188>)
   182be:	681b      	ldr	r3, [r3, #0]
   182c0:	2277      	movs	r2, #119	; 0x77
   182c2:	210f      	movs	r1, #15
   182c4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
   182c6:	4b34      	ldr	r3, [pc, #208]	; (18398 <vTraceInitObjectPropertyTable+0x188>)
   182c8:	681b      	ldr	r3, [r3, #0]
   182ca:	2278      	movs	r2, #120	; 0x78
   182cc:	210f      	movs	r1, #15
   182ce:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
   182d0:	4b31      	ldr	r3, [pc, #196]	; (18398 <vTraceInitObjectPropertyTable+0x188>)
   182d2:	681b      	ldr	r3, [r3, #0]
   182d4:	227c      	movs	r2, #124	; 0x7c
   182d6:	2110      	movs	r1, #16
   182d8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
   182da:	4b2f      	ldr	r3, [pc, #188]	; (18398 <vTraceInitObjectPropertyTable+0x188>)
   182dc:	681b      	ldr	r3, [r3, #0]
   182de:	227d      	movs	r2, #125	; 0x7d
   182e0:	2110      	movs	r1, #16
   182e2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
   182e4:	4b2c      	ldr	r3, [pc, #176]	; (18398 <vTraceInitObjectPropertyTable+0x188>)
   182e6:	681b      	ldr	r3, [r3, #0]
   182e8:	227e      	movs	r2, #126	; 0x7e
   182ea:	2110      	movs	r1, #16
   182ec:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
   182ee:	4b2a      	ldr	r3, [pc, #168]	; (18398 <vTraceInitObjectPropertyTable+0x188>)
   182f0:	681b      	ldr	r3, [r3, #0]
   182f2:	227f      	movs	r2, #127	; 0x7f
   182f4:	2113      	movs	r1, #19
   182f6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
   182f8:	4b27      	ldr	r3, [pc, #156]	; (18398 <vTraceInitObjectPropertyTable+0x188>)
   182fa:	681b      	ldr	r3, [r3, #0]
   182fc:	2280      	movs	r2, #128	; 0x80
   182fe:	2111      	movs	r1, #17
   18300:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
   18302:	4b25      	ldr	r3, [pc, #148]	; (18398 <vTraceInitObjectPropertyTable+0x188>)
   18304:	681b      	ldr	r3, [r3, #0]
   18306:	2281      	movs	r2, #129	; 0x81
   18308:	2110      	movs	r1, #16
   1830a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
   1830c:	4b22      	ldr	r3, [pc, #136]	; (18398 <vTraceInitObjectPropertyTable+0x188>)
   1830e:	681b      	ldr	r3, [r3, #0]
   18310:	2282      	movs	r2, #130	; 0x82
   18312:	2113      	movs	r1, #19
   18314:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
   18316:	4b20      	ldr	r3, [pc, #128]	; (18398 <vTraceInitObjectPropertyTable+0x188>)
   18318:	681b      	ldr	r3, [r3, #0]
   1831a:	2283      	movs	r2, #131	; 0x83
   1831c:	2113      	movs	r1, #19
   1831e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
   18320:	4b1d      	ldr	r3, [pc, #116]	; (18398 <vTraceInitObjectPropertyTable+0x188>)
   18322:	681b      	ldr	r3, [r3, #0]
   18324:	2284      	movs	r2, #132	; 0x84
   18326:	2113      	movs	r1, #19
   18328:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
   1832a:	4b1b      	ldr	r3, [pc, #108]	; (18398 <vTraceInitObjectPropertyTable+0x188>)
   1832c:	681b      	ldr	r3, [r3, #0]
   1832e:	2288      	movs	r2, #136	; 0x88
   18330:	2100      	movs	r1, #0
   18332:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
   18334:	4b18      	ldr	r3, [pc, #96]	; (18398 <vTraceInitObjectPropertyTable+0x188>)
   18336:	681b      	ldr	r3, [r3, #0]
   18338:	228a      	movs	r2, #138	; 0x8a
   1833a:	21a0      	movs	r1, #160	; 0xa0
   1833c:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
   1833e:	4b16      	ldr	r3, [pc, #88]	; (18398 <vTraceInitObjectPropertyTable+0x188>)
   18340:	681b      	ldr	r3, [r3, #0]
   18342:	228c      	movs	r2, #140	; 0x8c
   18344:	21a0      	movs	r1, #160	; 0xa0
   18346:	0049      	lsls	r1, r1, #1
   18348:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
   1834a:	4b13      	ldr	r3, [pc, #76]	; (18398 <vTraceInitObjectPropertyTable+0x188>)
   1834c:	681b      	ldr	r3, [r3, #0]
   1834e:	228e      	movs	r2, #142	; 0x8e
   18350:	21f0      	movs	r1, #240	; 0xf0
   18352:	0049      	lsls	r1, r1, #1
   18354:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
   18356:	4b10      	ldr	r3, [pc, #64]	; (18398 <vTraceInitObjectPropertyTable+0x188>)
   18358:	681b      	ldr	r3, [r3, #0]
   1835a:	2290      	movs	r2, #144	; 0x90
   1835c:	490f      	ldr	r1, [pc, #60]	; (1839c <vTraceInitObjectPropertyTable+0x18c>)
   1835e:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
   18360:	4b0d      	ldr	r3, [pc, #52]	; (18398 <vTraceInitObjectPropertyTable+0x188>)
   18362:	681b      	ldr	r3, [r3, #0]
   18364:	2292      	movs	r2, #146	; 0x92
   18366:	490e      	ldr	r1, [pc, #56]	; (183a0 <vTraceInitObjectPropertyTable+0x190>)
   18368:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
   1836a:	4b0b      	ldr	r3, [pc, #44]	; (18398 <vTraceInitObjectPropertyTable+0x188>)
   1836c:	681b      	ldr	r3, [r3, #0]
   1836e:	2294      	movs	r2, #148	; 0x94
   18370:	490c      	ldr	r1, [pc, #48]	; (183a4 <vTraceInitObjectPropertyTable+0x194>)
   18372:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
   18374:	4b08      	ldr	r3, [pc, #32]	; (18398 <vTraceInitObjectPropertyTable+0x188>)
   18376:	681b      	ldr	r3, [r3, #0]
   18378:	2296      	movs	r2, #150	; 0x96
   1837a:	490b      	ldr	r1, [pc, #44]	; (183a8 <vTraceInitObjectPropertyTable+0x198>)
   1837c:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
   1837e:	4b06      	ldr	r3, [pc, #24]	; (18398 <vTraceInitObjectPropertyTable+0x188>)
   18380:	681b      	ldr	r3, [r3, #0]
   18382:	2298      	movs	r2, #152	; 0x98
   18384:	218c      	movs	r1, #140	; 0x8c
   18386:	00c9      	lsls	r1, r1, #3
   18388:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
   1838a:	4b03      	ldr	r3, [pc, #12]	; (18398 <vTraceInitObjectPropertyTable+0x188>)
   1838c:	681b      	ldr	r3, [r3, #0]
   1838e:	4a07      	ldr	r2, [pc, #28]	; (183ac <vTraceInitObjectPropertyTable+0x19c>)
   18390:	661a      	str	r2, [r3, #96]	; 0x60
}
   18392:	46c0      	nop			; (mov r8, r8)
   18394:	46bd      	mov	sp, r7
   18396:	bd80      	pop	{r7, pc}
   18398:	20000bfc 	.word	0x20000bfc
   1839c:	000002fd 	.word	0x000002fd
   183a0:	00000352 	.word	0x00000352
   183a4:	000003a2 	.word	0x000003a2
   183a8:	00000401 	.word	0x00000401
   183ac:	000004bf 	.word	0x000004bf

000183b0 <vTraceInitObjectHandleStack>:

/* Initialization of the handle mechanism, see e.g, prvTraceGetObjectHandle */
void vTraceInitObjectHandleStack()
{
   183b0:	b580      	push	{r7, lr}
   183b2:	af00      	add	r7, sp, #0
	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
   183b4:	4b2e      	ldr	r3, [pc, #184]	; (18470 <vTraceInitObjectHandleStack+0xc0>)
   183b6:	2200      	movs	r2, #0
   183b8:	825a      	strh	r2, [r3, #18]
   183ba:	4b2d      	ldr	r3, [pc, #180]	; (18470 <vTraceInitObjectHandleStack+0xc0>)
   183bc:	8a5a      	ldrh	r2, [r3, #18]
   183be:	4b2c      	ldr	r3, [pc, #176]	; (18470 <vTraceInitObjectHandleStack+0xc0>)
   183c0:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
   183c2:	4b2b      	ldr	r3, [pc, #172]	; (18470 <vTraceInitObjectHandleStack+0xc0>)
   183c4:	220a      	movs	r2, #10
   183c6:	829a      	strh	r2, [r3, #20]
   183c8:	4b29      	ldr	r3, [pc, #164]	; (18470 <vTraceInitObjectHandleStack+0xc0>)
   183ca:	8a9a      	ldrh	r2, [r3, #20]
   183cc:	4b28      	ldr	r3, [pc, #160]	; (18470 <vTraceInitObjectHandleStack+0xc0>)
   183ce:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
   183d0:	4b27      	ldr	r3, [pc, #156]	; (18470 <vTraceInitObjectHandleStack+0xc0>)
   183d2:	2214      	movs	r2, #20
   183d4:	82da      	strh	r2, [r3, #22]
   183d6:	4b26      	ldr	r3, [pc, #152]	; (18470 <vTraceInitObjectHandleStack+0xc0>)
   183d8:	8ada      	ldrh	r2, [r3, #22]
   183da:	4b25      	ldr	r3, [pc, #148]	; (18470 <vTraceInitObjectHandleStack+0xc0>)
   183dc:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
   183de:	4b24      	ldr	r3, [pc, #144]	; (18470 <vTraceInitObjectHandleStack+0xc0>)
   183e0:	221e      	movs	r2, #30
   183e2:	831a      	strh	r2, [r3, #24]
   183e4:	4b22      	ldr	r3, [pc, #136]	; (18470 <vTraceInitObjectHandleStack+0xc0>)
   183e6:	8b1a      	ldrh	r2, [r3, #24]
   183e8:	4b21      	ldr	r3, [pc, #132]	; (18470 <vTraceInitObjectHandleStack+0xc0>)
   183ea:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
   183ec:	4b20      	ldr	r3, [pc, #128]	; (18470 <vTraceInitObjectHandleStack+0xc0>)
   183ee:	222d      	movs	r2, #45	; 0x2d
   183f0:	835a      	strh	r2, [r3, #26]
   183f2:	4b1f      	ldr	r3, [pc, #124]	; (18470 <vTraceInitObjectHandleStack+0xc0>)
   183f4:	8b5a      	ldrh	r2, [r3, #26]
   183f6:	4b1e      	ldr	r3, [pc, #120]	; (18470 <vTraceInitObjectHandleStack+0xc0>)
   183f8:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
   183fa:	4b1d      	ldr	r3, [pc, #116]	; (18470 <vTraceInitObjectHandleStack+0xc0>)
   183fc:	2232      	movs	r2, #50	; 0x32
   183fe:	839a      	strh	r2, [r3, #28]
   18400:	4b1b      	ldr	r3, [pc, #108]	; (18470 <vTraceInitObjectHandleStack+0xc0>)
   18402:	8b9a      	ldrh	r2, [r3, #28]
   18404:	4b1a      	ldr	r3, [pc, #104]	; (18470 <vTraceInitObjectHandleStack+0xc0>)
   18406:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
   18408:	4b19      	ldr	r3, [pc, #100]	; (18470 <vTraceInitObjectHandleStack+0xc0>)
   1840a:	2237      	movs	r2, #55	; 0x37
   1840c:	83da      	strh	r2, [r3, #30]
   1840e:	4b18      	ldr	r3, [pc, #96]	; (18470 <vTraceInitObjectHandleStack+0xc0>)
   18410:	8bda      	ldrh	r2, [r3, #30]
   18412:	4b17      	ldr	r3, [pc, #92]	; (18470 <vTraceInitObjectHandleStack+0xc0>)
   18414:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
   18416:	4b16      	ldr	r3, [pc, #88]	; (18470 <vTraceInitObjectHandleStack+0xc0>)
   18418:	223c      	movs	r2, #60	; 0x3c
   1841a:	841a      	strh	r2, [r3, #32]
   1841c:	4b14      	ldr	r3, [pc, #80]	; (18470 <vTraceInitObjectHandleStack+0xc0>)
   1841e:	8c1a      	ldrh	r2, [r3, #32]
   18420:	4b13      	ldr	r3, [pc, #76]	; (18470 <vTraceInitObjectHandleStack+0xc0>)
   18422:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
   18424:	4b12      	ldr	r3, [pc, #72]	; (18470 <vTraceInitObjectHandleStack+0xc0>)
   18426:	2241      	movs	r2, #65	; 0x41
   18428:	845a      	strh	r2, [r3, #34]	; 0x22
   1842a:	4b11      	ldr	r3, [pc, #68]	; (18470 <vTraceInitObjectHandleStack+0xc0>)
   1842c:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
   1842e:	4b10      	ldr	r3, [pc, #64]	; (18470 <vTraceInitObjectHandleStack+0xc0>)
   18430:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
   18432:	4b0f      	ldr	r3, [pc, #60]	; (18470 <vTraceInitObjectHandleStack+0xc0>)
   18434:	2209      	movs	r2, #9
   18436:	849a      	strh	r2, [r3, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
   18438:	4b0d      	ldr	r3, [pc, #52]	; (18470 <vTraceInitObjectHandleStack+0xc0>)
   1843a:	2213      	movs	r2, #19
   1843c:	84da      	strh	r2, [r3, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
   1843e:	4b0c      	ldr	r3, [pc, #48]	; (18470 <vTraceInitObjectHandleStack+0xc0>)
   18440:	221d      	movs	r2, #29
   18442:	851a      	strh	r2, [r3, #40]	; 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
   18444:	4b0a      	ldr	r3, [pc, #40]	; (18470 <vTraceInitObjectHandleStack+0xc0>)
   18446:	222c      	movs	r2, #44	; 0x2c
   18448:	855a      	strh	r2, [r3, #42]	; 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
   1844a:	4b09      	ldr	r3, [pc, #36]	; (18470 <vTraceInitObjectHandleStack+0xc0>)
   1844c:	2231      	movs	r2, #49	; 0x31
   1844e:	859a      	strh	r2, [r3, #44]	; 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
   18450:	4b07      	ldr	r3, [pc, #28]	; (18470 <vTraceInitObjectHandleStack+0xc0>)
   18452:	2236      	movs	r2, #54	; 0x36
   18454:	85da      	strh	r2, [r3, #46]	; 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
   18456:	4b06      	ldr	r3, [pc, #24]	; (18470 <vTraceInitObjectHandleStack+0xc0>)
   18458:	223b      	movs	r2, #59	; 0x3b
   1845a:	861a      	strh	r2, [r3, #48]	; 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
   1845c:	4b04      	ldr	r3, [pc, #16]	; (18470 <vTraceInitObjectHandleStack+0xc0>)
   1845e:	2240      	movs	r2, #64	; 0x40
   18460:	865a      	strh	r2, [r3, #50]	; 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
   18462:	4b03      	ldr	r3, [pc, #12]	; (18470 <vTraceInitObjectHandleStack+0xc0>)
   18464:	2245      	movs	r2, #69	; 0x45
   18466:	869a      	strh	r2, [r3, #52]	; 0x34
}
   18468:	46c0      	nop			; (mov r8, r8)
   1846a:	46bd      	mov	sp, r7
   1846c:	bd80      	pop	{r7, pc}
   1846e:	46c0      	nop			; (mov r8, r8)
   18470:	20000b6c 	.word	0x20000b6c

00018474 <pszTraceGetErrorNotEnoughHandles>:

/* Returns the "Not enough handles" error message for this object class */
const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
   18474:	b580      	push	{r7, lr}
   18476:	b082      	sub	sp, #8
   18478:	af00      	add	r7, sp, #0
   1847a:	0002      	movs	r2, r0
   1847c:	1dfb      	adds	r3, r7, #7
   1847e:	701a      	strb	r2, [r3, #0]
	switch(objectclass)
   18480:	1dfb      	adds	r3, r7, #7
   18482:	781b      	ldrb	r3, [r3, #0]
   18484:	2b08      	cmp	r3, #8
   18486:	d816      	bhi.n	184b6 <pszTraceGetErrorNotEnoughHandles+0x42>
   18488:	009a      	lsls	r2, r3, #2
   1848a:	4b0d      	ldr	r3, [pc, #52]	; (184c0 <pszTraceGetErrorNotEnoughHandles+0x4c>)
   1848c:	18d3      	adds	r3, r2, r3
   1848e:	681b      	ldr	r3, [r3, #0]
   18490:	469f      	mov	pc, r3
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
   18492:	4b0c      	ldr	r3, [pc, #48]	; (184c4 <pszTraceGetErrorNotEnoughHandles+0x50>)
   18494:	e010      	b.n	184b8 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase TRC_CFG_NISR in trcSnapshotConfig.h";
   18496:	4b0c      	ldr	r3, [pc, #48]	; (184c8 <pszTraceGetErrorNotEnoughHandles+0x54>)
   18498:	e00e      	b.n	184b8 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase TRC_CFG_NSEMAPHORE in trcSnapshotConfig.h";
   1849a:	4b0c      	ldr	r3, [pc, #48]	; (184cc <pszTraceGetErrorNotEnoughHandles+0x58>)
   1849c:	e00c      	b.n	184b8 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase TRC_CFG_NMUTEX in trcSnapshotConfig.h";
   1849e:	4b0c      	ldr	r3, [pc, #48]	; (184d0 <pszTraceGetErrorNotEnoughHandles+0x5c>)
   184a0:	e00a      	b.n	184b8 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase TRC_CFG_NQUEUE in trcSnapshotConfig.h";
   184a2:	4b0c      	ldr	r3, [pc, #48]	; (184d4 <pszTraceGetErrorNotEnoughHandles+0x60>)
   184a4:	e008      	b.n	184b8 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase TRC_CFG_NTIMER in trcSnapshotConfig.h";
   184a6:	4b0c      	ldr	r3, [pc, #48]	; (184d8 <pszTraceGetErrorNotEnoughHandles+0x64>)
   184a8:	e006      	b.n	184b8 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase TRC_CFG_NEVENTGROUP in trcSnapshotConfig.h";
   184aa:	4b0c      	ldr	r3, [pc, #48]	; (184dc <pszTraceGetErrorNotEnoughHandles+0x68>)
   184ac:	e004      	b.n	184b8 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_STREAMBUFFER:
		return "Not enough STREAMBUFFER handles - increase TRC_CFG_NSTREAMBUFFER in trcSnapshotConfig.h";
   184ae:	4b0c      	ldr	r3, [pc, #48]	; (184e0 <pszTraceGetErrorNotEnoughHandles+0x6c>)
   184b0:	e002      	b.n	184b8 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
   184b2:	4b0c      	ldr	r3, [pc, #48]	; (184e4 <pszTraceGetErrorNotEnoughHandles+0x70>)
   184b4:	e000      	b.n	184b8 <pszTraceGetErrorNotEnoughHandles+0x44>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
   184b6:	4b0c      	ldr	r3, [pc, #48]	; (184e8 <pszTraceGetErrorNotEnoughHandles+0x74>)
	}
}
   184b8:	0018      	movs	r0, r3
   184ba:	46bd      	mov	sp, r7
   184bc:	b002      	add	sp, #8
   184be:	bd80      	pop	{r7, pc}
   184c0:	00037bbc 	.word	0x00037bbc
   184c4:	000378bc 	.word	0x000378bc
   184c8:	00037904 	.word	0x00037904
   184cc:	0003794c 	.word	0x0003794c
   184d0:	000379a0 	.word	0x000379a0
   184d4:	000379ec 	.word	0x000379ec
   184d8:	00037a38 	.word	0x00037a38
   184dc:	00037a84 	.word	0x00037a84
   184e0:	00037ad8 	.word	0x00037ad8
   184e4:	00037b30 	.word	0x00037b30
   184e8:	00037b8c 	.word	0x00037b8c

000184ec <uiTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
uint32_t uiTraceStart(void)
{
   184ec:	b590      	push	{r4, r7, lr}
   184ee:	b087      	sub	sp, #28
   184f0:	af00      	add	r7, sp, #0
	traceHandle handle;
	TRACE_ALLOC_CRITICAL_SECTION();

	handle = 0;
   184f2:	2317      	movs	r3, #23
   184f4:	18fb      	adds	r3, r7, r3
   184f6:	2200      	movs	r2, #0
   184f8:	701a      	strb	r2, [r3, #0]

	if (RecorderDataPtr == NULL)
   184fa:	4b36      	ldr	r3, [pc, #216]	; (185d4 <uiTraceStart+0xe8>)
   184fc:	681b      	ldr	r3, [r3, #0]
   184fe:	2b00      	cmp	r3, #0
   18500:	d10b      	bne.n	1851a <uiTraceStart+0x2e>
	{
		TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized. Use vTraceEnable() instead!", 0);
   18502:	4b34      	ldr	r3, [pc, #208]	; (185d4 <uiTraceStart+0xe8>)
   18504:	681b      	ldr	r3, [r3, #0]
   18506:	2b00      	cmp	r3, #0
   18508:	d105      	bne.n	18516 <uiTraceStart+0x2a>
   1850a:	4b33      	ldr	r3, [pc, #204]	; (185d8 <uiTraceStart+0xec>)
   1850c:	0018      	movs	r0, r3
   1850e:	4b33      	ldr	r3, [pc, #204]	; (185dc <uiTraceStart+0xf0>)
   18510:	4798      	blx	r3
   18512:	2300      	movs	r3, #0
   18514:	e059      	b.n	185ca <uiTraceStart+0xde>
		return 0;
   18516:	2300      	movs	r3, #0
   18518:	e057      	b.n	185ca <uiTraceStart+0xde>
	}
	
	if (RecorderDataPtr->recorderActive == 1)
   1851a:	4b2e      	ldr	r3, [pc, #184]	; (185d4 <uiTraceStart+0xe8>)
   1851c:	681b      	ldr	r3, [r3, #0]
   1851e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   18520:	2b01      	cmp	r3, #1
   18522:	d101      	bne.n	18528 <uiTraceStart+0x3c>
		return 1; /* Already running */
   18524:	2301      	movs	r3, #1
   18526:	e050      	b.n	185ca <uiTraceStart+0xde>

	if (traceErrorMessage == NULL)
   18528:	4b2d      	ldr	r3, [pc, #180]	; (185e0 <uiTraceStart+0xf4>)
   1852a:	681b      	ldr	r3, [r3, #0]
   1852c:	2b00      	cmp	r3, #0
   1852e:	d149      	bne.n	185c4 <uiTraceStart+0xd8>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   18530:	f3ef 8310 	mrs	r3, PRIMASK
   18534:	60bb      	str	r3, [r7, #8]
  return(result);
   18536:	68bb      	ldr	r3, [r7, #8]
	{
		trcCRITICAL_SECTION_BEGIN();
   18538:	613b      	str	r3, [r7, #16]
   1853a:	2301      	movs	r3, #1
   1853c:	60fb      	str	r3, [r7, #12]

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1853e:	68fb      	ldr	r3, [r7, #12]
   18540:	f383 8810 	msr	PRIMASK, r3
   18544:	4b27      	ldr	r3, [pc, #156]	; (185e4 <uiTraceStart+0xf8>)
   18546:	681b      	ldr	r3, [r3, #0]
   18548:	1c5a      	adds	r2, r3, #1
   1854a:	4b26      	ldr	r3, [pc, #152]	; (185e4 <uiTraceStart+0xf8>)
   1854c:	601a      	str	r2, [r3, #0]
		RecorderDataPtr->recorderActive = 1;
   1854e:	4b21      	ldr	r3, [pc, #132]	; (185d4 <uiTraceStart+0xe8>)
   18550:	681b      	ldr	r3, [r3, #0]
   18552:	2201      	movs	r2, #1
   18554:	631a      	str	r2, [r3, #48]	; 0x30

		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
   18556:	4b24      	ldr	r3, [pc, #144]	; (185e8 <uiTraceStart+0xfc>)
   18558:	4798      	blx	r3
   1855a:	0003      	movs	r3, r0
   1855c:	0018      	movs	r0, r3
   1855e:	4b23      	ldr	r3, [pc, #140]	; (185ec <uiTraceStart+0x100>)
   18560:	4798      	blx	r3
   18562:	0003      	movs	r3, r0
   18564:	001a      	movs	r2, r3
   18566:	2317      	movs	r3, #23
   18568:	18fb      	adds	r3, r7, r3
   1856a:	701a      	strb	r2, [r3, #0]
		if (handle == 0)
   1856c:	2317      	movs	r3, #23
   1856e:	18fb      	adds	r3, r7, r3
   18570:	781b      	ldrb	r3, [r3, #0]
   18572:	2b00      	cmp	r3, #0
   18574:	d116      	bne.n	185a4 <uiTraceStart+0xb8>
		{
			/* This occurs if the scheduler is not yet started.
			This creates a dummy "(startup)" task entry internally in the
			recorder */
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
   18576:	2317      	movs	r3, #23
   18578:	18fc      	adds	r4, r7, r3
   1857a:	2003      	movs	r0, #3
   1857c:	4b1c      	ldr	r3, [pc, #112]	; (185f0 <uiTraceStart+0x104>)
   1857e:	4798      	blx	r3
   18580:	0003      	movs	r3, r0
   18582:	7023      	strb	r3, [r4, #0]
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
   18584:	4a1b      	ldr	r2, [pc, #108]	; (185f4 <uiTraceStart+0x108>)
   18586:	2317      	movs	r3, #23
   18588:	18fb      	adds	r3, r7, r3
   1858a:	781b      	ldrb	r3, [r3, #0]
   1858c:	0019      	movs	r1, r3
   1858e:	2003      	movs	r0, #3
   18590:	4b19      	ldr	r3, [pc, #100]	; (185f8 <uiTraceStart+0x10c>)
   18592:	4798      	blx	r3

			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
   18594:	2317      	movs	r3, #23
   18596:	18fb      	adds	r3, r7, r3
   18598:	781b      	ldrb	r3, [r3, #0]
   1859a:	2200      	movs	r2, #0
   1859c:	0019      	movs	r1, r3
   1859e:	2003      	movs	r0, #3
   185a0:	4b16      	ldr	r3, [pc, #88]	; (185fc <uiTraceStart+0x110>)
   185a2:	4798      	blx	r3
		}

		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
   185a4:	2317      	movs	r3, #23
   185a6:	18fb      	adds	r3, r7, r3
   185a8:	781b      	ldrb	r3, [r3, #0]
   185aa:	0018      	movs	r0, r3
   185ac:	4b14      	ldr	r3, [pc, #80]	; (18600 <uiTraceStart+0x114>)
   185ae:	4798      	blx	r3
		trcCRITICAL_SECTION_END();
   185b0:	4b0c      	ldr	r3, [pc, #48]	; (185e4 <uiTraceStart+0xf8>)
   185b2:	681b      	ldr	r3, [r3, #0]
   185b4:	1e5a      	subs	r2, r3, #1
   185b6:	4b0b      	ldr	r3, [pc, #44]	; (185e4 <uiTraceStart+0xf8>)
   185b8:	601a      	str	r2, [r3, #0]
   185ba:	693b      	ldr	r3, [r7, #16]
   185bc:	607b      	str	r3, [r7, #4]
   185be:	687b      	ldr	r3, [r7, #4]
   185c0:	f383 8810 	msr	PRIMASK, r3
	}

	return RecorderDataPtr->recorderActive;
   185c4:	4b03      	ldr	r3, [pc, #12]	; (185d4 <uiTraceStart+0xe8>)
   185c6:	681b      	ldr	r3, [r3, #0]
   185c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
   185ca:	0018      	movs	r0, r3
   185cc:	46bd      	mov	sp, r7
   185ce:	b007      	add	sp, #28
   185d0:	bd90      	pop	{r4, r7, pc}
   185d2:	46c0      	nop			; (mov r8, r8)
   185d4:	20000bfc 	.word	0x20000bfc
   185d8:	00037be0 	.word	0x00037be0
   185dc:	00019755 	.word	0x00019755
   185e0:	20000b5c 	.word	0x20000b5c
   185e4:	20000b54 	.word	0x20000b54
   185e8:	00018155 	.word	0x00018155
   185ec:	00017e99 	.word	0x00017e99
   185f0:	00019439 	.word	0x00019439
   185f4:	00037c24 	.word	0x00037c24
   185f8:	00019669 	.word	0x00019669
   185fc:	00018dcd 	.word	0x00018dcd
   18600:	00018cb5 	.word	0x00018cb5

00018604 <vTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
void vTraceStart(void)
{
   18604:	b580      	push	{r7, lr}
   18606:	af00      	add	r7, sp, #0
	(void)uiTraceStart();
   18608:	4b02      	ldr	r3, [pc, #8]	; (18614 <vTraceStart+0x10>)
   1860a:	4798      	blx	r3
}
   1860c:	46c0      	nop			; (mov r8, r8)
   1860e:	46bd      	mov	sp, r7
   18610:	bd80      	pop	{r7, pc}
   18612:	46c0      	nop			; (mov r8, r8)
   18614:	000184ed 	.word	0x000184ed

00018618 <vTraceStop>:
 *
 * Stops the recorder. The recording can be resumed by calling vTraceStart.
 * This does not reset the recorder. Use vTraceClear if that is desired.
 ******************************************************************************/
void vTraceStop(void)
{
   18618:	b580      	push	{r7, lr}
   1861a:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
   1861c:	4b08      	ldr	r3, [pc, #32]	; (18640 <vTraceStop+0x28>)
   1861e:	681b      	ldr	r3, [r3, #0]
   18620:	2b00      	cmp	r3, #0
   18622:	d003      	beq.n	1862c <vTraceStop+0x14>
	{
		RecorderDataPtr->recorderActive = 0;
   18624:	4b06      	ldr	r3, [pc, #24]	; (18640 <vTraceStop+0x28>)
   18626:	681b      	ldr	r3, [r3, #0]
   18628:	2200      	movs	r2, #0
   1862a:	631a      	str	r2, [r3, #48]	; 0x30
	}

	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
   1862c:	4b05      	ldr	r3, [pc, #20]	; (18644 <vTraceStop+0x2c>)
   1862e:	681b      	ldr	r3, [r3, #0]
   18630:	2b00      	cmp	r3, #0
   18632:	d002      	beq.n	1863a <vTraceStop+0x22>
	{
		(*vTraceStopHookPtr)();			/* An application call-back function. */
   18634:	4b03      	ldr	r3, [pc, #12]	; (18644 <vTraceStop+0x2c>)
   18636:	681b      	ldr	r3, [r3, #0]
   18638:	4798      	blx	r3
	}
}
   1863a:	46c0      	nop			; (mov r8, r8)
   1863c:	46bd      	mov	sp, r7
   1863e:	bd80      	pop	{r7, pc}
   18640:	20000bfc 	.word	0x20000bfc
   18644:	20000b64 	.word	0x20000b64

00018648 <xTraceIsRecordingEnabled>:
/*******************************************************************************
* xTraceIsRecordingEnabled
* Returns true (1) if the recorder is enabled (i.e. is recording), otherwise 0.
******************************************************************************/
int xTraceIsRecordingEnabled(void)
{
   18648:	b580      	push	{r7, lr}
   1864a:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
   1864c:	4b05      	ldr	r3, [pc, #20]	; (18664 <xTraceIsRecordingEnabled+0x1c>)
   1864e:	681b      	ldr	r3, [r3, #0]
   18650:	2b00      	cmp	r3, #0
   18652:	d003      	beq.n	1865c <xTraceIsRecordingEnabled+0x14>
	{
		return (int)RecorderDataPtr->recorderActive;
   18654:	4b03      	ldr	r3, [pc, #12]	; (18664 <xTraceIsRecordingEnabled+0x1c>)
   18656:	681b      	ldr	r3, [r3, #0]
   18658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1865a:	e000      	b.n	1865e <xTraceIsRecordingEnabled+0x16>
	}
	else
	{
		return 0;
   1865c:	2300      	movs	r3, #0
	}
}
   1865e:	0018      	movs	r0, r3
   18660:	46bd      	mov	sp, r7
   18662:	bd80      	pop	{r7, pc}
   18664:	20000bfc 	.word	0x20000bfc

00018668 <prvTraceStoreTaskReady>:
 * prvTraceStoreTaskReady
 *
 * This function stores a ready state for the task handle sent in as parameter.
 ******************************************************************************/
void prvTraceStoreTaskReady(traceHandle handle) 
{
   18668:	b590      	push	{r4, r7, lr}
   1866a:	b089      	sub	sp, #36	; 0x24
   1866c:	af00      	add	r7, sp, #0
   1866e:	0002      	movs	r2, r0
   18670:	1dfb      	adds	r3, r7, #7
   18672:	701a      	strb	r2, [r3, #0]
	TREvent* tr;
	uint8_t hnd8;

	TRACE_ALLOC_CRITICAL_SECTION();

	if (handle == 0)
   18674:	1dfb      	adds	r3, r7, #7
   18676:	781b      	ldrb	r3, [r3, #0]
   18678:	2b00      	cmp	r3, #0
   1867a:	d057      	beq.n	1872c <prvTraceStoreTaskReady+0xc4>
		/*  On FreeRTOS v7.3.0, this occurs when creating tasks due to a bad
		placement of the trace macro. In that case, the events are ignored. */
		return;
	}
	
	if (! readyEventsEnabled)
   1867c:	4b2e      	ldr	r3, [pc, #184]	; (18738 <prvTraceStoreTaskReady+0xd0>)
   1867e:	681b      	ldr	r3, [r3, #0]
   18680:	2b00      	cmp	r3, #0
   18682:	d055      	beq.n	18730 <prvTraceStoreTaskReady+0xc8>
		a "hidden" (not traced) task, we must therefore disable recording 
		of ready events to avoid an undesired ready event... */
		return;
	}

	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);
   18684:	1dfb      	adds	r3, r7, #7
   18686:	781b      	ldrb	r3, [r3, #0]
   18688:	2b0f      	cmp	r3, #15
   1868a:	d904      	bls.n	18696 <prvTraceStoreTaskReady+0x2e>
   1868c:	4b2b      	ldr	r3, [pc, #172]	; (1873c <prvTraceStoreTaskReady+0xd4>)
   1868e:	0018      	movs	r0, r3
   18690:	4b2b      	ldr	r3, [pc, #172]	; (18740 <prvTraceStoreTaskReady+0xd8>)
   18692:	4798      	blx	r3
   18694:	e04d      	b.n	18732 <prvTraceStoreTaskReady+0xca>

	if (recorder_busy)
   18696:	4b2b      	ldr	r3, [pc, #172]	; (18744 <prvTraceStoreTaskReady+0xdc>)
   18698:	681b      	ldr	r3, [r3, #0]
   1869a:	2b00      	cmp	r3, #0
   1869c:	d004      	beq.n	186a8 <prvTraceStoreTaskReady+0x40>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
   1869e:	4b2a      	ldr	r3, [pc, #168]	; (18748 <prvTraceStoreTaskReady+0xe0>)
   186a0:	0018      	movs	r0, r3
   186a2:	4b27      	ldr	r3, [pc, #156]	; (18740 <prvTraceStoreTaskReady+0xd8>)
   186a4:	4798      	blx	r3
		return;
   186a6:	e044      	b.n	18732 <prvTraceStoreTaskReady+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   186a8:	f3ef 8310 	mrs	r3, PRIMASK
   186ac:	60fb      	str	r3, [r7, #12]
  return(result);
   186ae:	68fb      	ldr	r3, [r7, #12]
	}

	trcCRITICAL_SECTION_BEGIN();
   186b0:	61fb      	str	r3, [r7, #28]
   186b2:	2301      	movs	r3, #1
   186b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   186b6:	693b      	ldr	r3, [r7, #16]
   186b8:	f383 8810 	msr	PRIMASK, r3
   186bc:	4b21      	ldr	r3, [pc, #132]	; (18744 <prvTraceStoreTaskReady+0xdc>)
   186be:	681b      	ldr	r3, [r3, #0]
   186c0:	1c5a      	adds	r2, r3, #1
   186c2:	4b20      	ldr	r3, [pc, #128]	; (18744 <prvTraceStoreTaskReady+0xdc>)
   186c4:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
   186c6:	4b21      	ldr	r3, [pc, #132]	; (1874c <prvTraceStoreTaskReady+0xe4>)
   186c8:	681b      	ldr	r3, [r3, #0]
   186ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   186cc:	2b00      	cmp	r3, #0
   186ce:	d022      	beq.n	18716 <prvTraceStoreTaskReady+0xae>
	{
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   186d0:	231a      	movs	r3, #26
   186d2:	18fc      	adds	r4, r7, r3
   186d4:	4b1e      	ldr	r3, [pc, #120]	; (18750 <prvTraceStoreTaskReady+0xe8>)
   186d6:	0018      	movs	r0, r3
   186d8:	4b1e      	ldr	r3, [pc, #120]	; (18754 <prvTraceStoreTaskReady+0xec>)
   186da:	4798      	blx	r3
   186dc:	0003      	movs	r3, r0
   186de:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle(handle);
   186e0:	2319      	movs	r3, #25
   186e2:	18fb      	adds	r3, r7, r3
   186e4:	1dfa      	adds	r2, r7, #7
   186e6:	7812      	ldrb	r2, [r2, #0]
   186e8:	701a      	strb	r2, [r3, #0]
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
   186ea:	4b1b      	ldr	r3, [pc, #108]	; (18758 <prvTraceStoreTaskReady+0xf0>)
   186ec:	4798      	blx	r3
   186ee:	0003      	movs	r3, r0
   186f0:	617b      	str	r3, [r7, #20]
		if (tr != NULL)
   186f2:	697b      	ldr	r3, [r7, #20]
   186f4:	2b00      	cmp	r3, #0
   186f6:	d00e      	beq.n	18716 <prvTraceStoreTaskReady+0xae>
		{
			tr->type = DIV_TASK_READY;
   186f8:	697b      	ldr	r3, [r7, #20]
   186fa:	2202      	movs	r2, #2
   186fc:	701a      	strb	r2, [r3, #0]
			tr->dts = dts3;
   186fe:	697b      	ldr	r3, [r7, #20]
   18700:	221a      	movs	r2, #26
   18702:	18ba      	adds	r2, r7, r2
   18704:	8812      	ldrh	r2, [r2, #0]
   18706:	805a      	strh	r2, [r3, #2]
			tr->objHandle = hnd8;
   18708:	697b      	ldr	r3, [r7, #20]
   1870a:	2219      	movs	r2, #25
   1870c:	18ba      	adds	r2, r7, r2
   1870e:	7812      	ldrb	r2, [r2, #0]
   18710:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
   18712:	4b12      	ldr	r3, [pc, #72]	; (1875c <prvTraceStoreTaskReady+0xf4>)
   18714:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   18716:	4b0b      	ldr	r3, [pc, #44]	; (18744 <prvTraceStoreTaskReady+0xdc>)
   18718:	681b      	ldr	r3, [r3, #0]
   1871a:	1e5a      	subs	r2, r3, #1
   1871c:	4b09      	ldr	r3, [pc, #36]	; (18744 <prvTraceStoreTaskReady+0xdc>)
   1871e:	601a      	str	r2, [r3, #0]
   18720:	69fb      	ldr	r3, [r7, #28]
   18722:	60bb      	str	r3, [r7, #8]
   18724:	68bb      	ldr	r3, [r7, #8]
   18726:	f383 8810 	msr	PRIMASK, r3
   1872a:	e002      	b.n	18732 <prvTraceStoreTaskReady+0xca>
		return;
   1872c:	46c0      	nop			; (mov r8, r8)
   1872e:	e000      	b.n	18732 <prvTraceStoreTaskReady+0xca>
		return;
   18730:	46c0      	nop			; (mov r8, r8)
}
   18732:	46bd      	mov	sp, r7
   18734:	b009      	add	sp, #36	; 0x24
   18736:	bd90      	pop	{r4, r7, pc}
   18738:	200000c8 	.word	0x200000c8
   1873c:	00037f8c 	.word	0x00037f8c
   18740:	00019755 	.word	0x00019755
   18744:	20000b54 	.word	0x20000b54
   18748:	00037fcc 	.word	0x00037fcc
   1874c:	20000bfc 	.word	0x20000bfc
   18750:	0000ffff 	.word	0x0000ffff
   18754:	00019969 	.word	0x00019969
   18758:	0001930d 	.word	0x0001930d
   1875c:	00019911 	.word	0x00019911

00018760 <vTraceStoreMemMangEvent>:
 * Note: On "free" calls, the signed_size parameter should be negative.
 ******************************************************************************/
#if (TRC_CFG_INCLUDE_MEMMANG_EVENTS == 1)
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void vTraceStoreMemMangEvent(uint32_t ecode, uint32_t address, int32_t signed_size)
{
   18760:	b580      	push	{r7, lr}
   18762:	b08e      	sub	sp, #56	; 0x38
   18764:	af00      	add	r7, sp, #0
   18766:	60f8      	str	r0, [r7, #12]
   18768:	60b9      	str	r1, [r7, #8]
   1876a:	607a      	str	r2, [r7, #4]
	uint16_t addr_low;
	uint8_t addr_high;
	uint32_t size;
	TRACE_ALLOC_CRITICAL_SECTION();

	if (RecorderDataPtr == NULL)
   1876c:	4b48      	ldr	r3, [pc, #288]	; (18890 <vTraceStoreMemMangEvent+0x130>)
   1876e:	681b      	ldr	r3, [r3, #0]
   18770:	2b00      	cmp	r3, #0
   18772:	d100      	bne.n	18776 <vTraceStoreMemMangEvent+0x16>
   18774:	e088      	b.n	18888 <vTraceStoreMemMangEvent+0x128>
	{
		/* Occurs in vTraceInitTraceData, if using dynamic allocation. */
		return;
	}
	
	if (signed_size < 0)
   18776:	687b      	ldr	r3, [r7, #4]
   18778:	2b00      	cmp	r3, #0
   1877a:	da03      	bge.n	18784 <vTraceStoreMemMangEvent+0x24>
		size = (uint32_t)(- signed_size);
   1877c:	687b      	ldr	r3, [r7, #4]
   1877e:	425b      	negs	r3, r3
   18780:	637b      	str	r3, [r7, #52]	; 0x34
   18782:	e001      	b.n	18788 <vTraceStoreMemMangEvent+0x28>
	else
		size = (uint32_t)(signed_size);
   18784:	687b      	ldr	r3, [r7, #4]
   18786:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   18788:	f3ef 8310 	mrs	r3, PRIMASK
   1878c:	61bb      	str	r3, [r7, #24]
  return(result);
   1878e:	69bb      	ldr	r3, [r7, #24]

	trcCRITICAL_SECTION_BEGIN();
   18790:	633b      	str	r3, [r7, #48]	; 0x30
   18792:	2301      	movs	r3, #1
   18794:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   18796:	69fb      	ldr	r3, [r7, #28]
   18798:	f383 8810 	msr	PRIMASK, r3
   1879c:	4b3d      	ldr	r3, [pc, #244]	; (18894 <vTraceStoreMemMangEvent+0x134>)
   1879e:	681b      	ldr	r3, [r3, #0]
   187a0:	1c5a      	adds	r2, r3, #1
   187a2:	4b3c      	ldr	r3, [pc, #240]	; (18894 <vTraceStoreMemMangEvent+0x134>)
   187a4:	601a      	str	r2, [r3, #0]
	
	/* Only update heapMemUsage if we have a valid address */
	if (address != 0)
   187a6:	68bb      	ldr	r3, [r7, #8]
   187a8:	2b00      	cmp	r3, #0
   187aa:	d005      	beq.n	187b8 <vTraceStoreMemMangEvent+0x58>
		heapMemUsage += (uint32_t)signed_size;
   187ac:	4b3a      	ldr	r3, [pc, #232]	; (18898 <vTraceStoreMemMangEvent+0x138>)
   187ae:	681a      	ldr	r2, [r3, #0]
   187b0:	687b      	ldr	r3, [r7, #4]
   187b2:	18d2      	adds	r2, r2, r3
   187b4:	4b38      	ldr	r3, [pc, #224]	; (18898 <vTraceStoreMemMangEvent+0x138>)
   187b6:	601a      	str	r2, [r3, #0]
	
	if (RecorderDataPtr->recorderActive)
   187b8:	4b35      	ldr	r3, [pc, #212]	; (18890 <vTraceStoreMemMangEvent+0x130>)
   187ba:	681b      	ldr	r3, [r3, #0]
   187bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   187be:	2b00      	cmp	r3, #0
   187c0:	d057      	beq.n	18872 <vTraceStoreMemMangEvent+0x112>
	{
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
   187c2:	20ff      	movs	r0, #255	; 0xff
   187c4:	4b35      	ldr	r3, [pc, #212]	; (1889c <vTraceStoreMemMangEvent+0x13c>)
   187c6:	4798      	blx	r3
   187c8:	0003      	movs	r3, r0
   187ca:	001a      	movs	r2, r3
   187cc:	232f      	movs	r3, #47	; 0x2f
   187ce:	18fb      	adds	r3, r7, r3
   187d0:	701a      	strb	r2, [r3, #0]
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
   187d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   187d4:	4a32      	ldr	r2, [pc, #200]	; (188a0 <vTraceStoreMemMangEvent+0x140>)
   187d6:	0019      	movs	r1, r3
   187d8:	0010      	movs	r0, r2
   187da:	4b32      	ldr	r3, [pc, #200]	; (188a4 <vTraceStoreMemMangEvent+0x144>)
   187dc:	4798      	blx	r3
   187de:	0002      	movs	r2, r0
   187e0:	232c      	movs	r3, #44	; 0x2c
   187e2:	18fb      	adds	r3, r7, r3
   187e4:	801a      	strh	r2, [r3, #0]
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
   187e6:	4b30      	ldr	r3, [pc, #192]	; (188a8 <vTraceStoreMemMangEvent+0x148>)
   187e8:	4798      	blx	r3
   187ea:	0003      	movs	r3, r0
   187ec:	62bb      	str	r3, [r7, #40]	; 0x28

		if (ms != NULL)
   187ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
   187f0:	2b00      	cmp	r3, #0
   187f2:	d03e      	beq.n	18872 <vTraceStoreMemMangEvent+0x112>
		{
			ms->dts = dts1;
   187f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   187f6:	222f      	movs	r2, #47	; 0x2f
   187f8:	18ba      	adds	r2, r7, r2
   187fa:	7812      	ldrb	r2, [r2, #0]
   187fc:	705a      	strb	r2, [r3, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
   187fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
   18800:	2200      	movs	r2, #0
   18802:	701a      	strb	r2, [r3, #0]
			ms->size = size_low;
   18804:	6abb      	ldr	r3, [r7, #40]	; 0x28
   18806:	222c      	movs	r2, #44	; 0x2c
   18808:	18ba      	adds	r2, r7, r2
   1880a:	8812      	ldrh	r2, [r2, #0]
   1880c:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   1880e:	4b27      	ldr	r3, [pc, #156]	; (188ac <vTraceStoreMemMangEvent+0x14c>)
   18810:	4798      	blx	r3
				addr_low = address & 0xFFFF;          
				addr_high = (address >> 16) & 0xFF;
			#else
				/* The whole 32 bit address is stored using a second event record
				for the upper 16 bit */
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
   18812:	68bb      	ldr	r3, [r7, #8]
   18814:	4a22      	ldr	r2, [pc, #136]	; (188a0 <vTraceStoreMemMangEvent+0x140>)
   18816:	0019      	movs	r1, r3
   18818:	0010      	movs	r0, r2
   1881a:	4b22      	ldr	r3, [pc, #136]	; (188a4 <vTraceStoreMemMangEvent+0x144>)
   1881c:	4798      	blx	r3
   1881e:	0002      	movs	r2, r0
   18820:	2326      	movs	r3, #38	; 0x26
   18822:	18fb      	adds	r3, r7, r3
   18824:	801a      	strh	r2, [r3, #0]
				addr_high = 0;
   18826:	2325      	movs	r3, #37	; 0x25
   18828:	18fb      	adds	r3, r7, r3
   1882a:	2200      	movs	r2, #0
   1882c:	701a      	strb	r2, [r3, #0]
			#endif

			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
   1882e:	4b1e      	ldr	r3, [pc, #120]	; (188a8 <vTraceStoreMemMangEvent+0x148>)
   18830:	4798      	blx	r3
   18832:	0003      	movs	r3, r0
   18834:	623b      	str	r3, [r7, #32]
			if (ma != NULL)
   18836:	6a3b      	ldr	r3, [r7, #32]
   18838:	2b00      	cmp	r3, #0
   1883a:	d01a      	beq.n	18872 <vTraceStoreMemMangEvent+0x112>
			{
				ma->addr_low = addr_low;
   1883c:	6a3b      	ldr	r3, [r7, #32]
   1883e:	2226      	movs	r2, #38	; 0x26
   18840:	18ba      	adds	r2, r7, r2
   18842:	8812      	ldrh	r2, [r2, #0]
   18844:	805a      	strh	r2, [r3, #2]
				ma->addr_high = addr_high;
   18846:	6a3b      	ldr	r3, [r7, #32]
   18848:	2225      	movs	r2, #37	; 0x25
   1884a:	18ba      	adds	r2, r7, r2
   1884c:	7812      	ldrb	r2, [r2, #0]
   1884e:	705a      	strb	r2, [r3, #1]
				ma->type = (uint8_t) (ecode  + 1); /* Note this! */
   18850:	68fb      	ldr	r3, [r7, #12]
   18852:	b2db      	uxtb	r3, r3
   18854:	3301      	adds	r3, #1
   18856:	b2da      	uxtb	r2, r3
   18858:	6a3b      	ldr	r3, [r7, #32]
   1885a:	701a      	strb	r2, [r3, #0]
				ms->type = (uint8_t) ecode;
   1885c:	68fb      	ldr	r3, [r7, #12]
   1885e:	b2da      	uxtb	r2, r3
   18860:	6abb      	ldr	r3, [r7, #40]	; 0x28
   18862:	701a      	strb	r2, [r3, #0]
				prvTraceUpdateCounters();					
   18864:	4b11      	ldr	r3, [pc, #68]	; (188ac <vTraceStoreMemMangEvent+0x14c>)
   18866:	4798      	blx	r3
				RecorderDataPtr->heapMemUsage = heapMemUsage;
   18868:	4b09      	ldr	r3, [pc, #36]	; (18890 <vTraceStoreMemMangEvent+0x130>)
   1886a:	681b      	ldr	r3, [r3, #0]
   1886c:	4a0a      	ldr	r2, [pc, #40]	; (18898 <vTraceStoreMemMangEvent+0x138>)
   1886e:	6812      	ldr	r2, [r2, #0]
   18870:	651a      	str	r2, [r3, #80]	; 0x50
			}
		}
	}
	trcCRITICAL_SECTION_END();
   18872:	4b08      	ldr	r3, [pc, #32]	; (18894 <vTraceStoreMemMangEvent+0x134>)
   18874:	681b      	ldr	r3, [r3, #0]
   18876:	1e5a      	subs	r2, r3, #1
   18878:	4b06      	ldr	r3, [pc, #24]	; (18894 <vTraceStoreMemMangEvent+0x134>)
   1887a:	601a      	str	r2, [r3, #0]
   1887c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1887e:	617b      	str	r3, [r7, #20]
   18880:	697b      	ldr	r3, [r7, #20]
   18882:	f383 8810 	msr	PRIMASK, r3
   18886:	e000      	b.n	1888a <vTraceStoreMemMangEvent+0x12a>
		return;
   18888:	46c0      	nop			; (mov r8, r8)
}
   1888a:	46bd      	mov	sp, r7
   1888c:	b00e      	add	sp, #56	; 0x38
   1888e:	bd80      	pop	{r7, pc}
   18890:	20000bfc 	.word	0x20000bfc
   18894:	20000b54 	.word	0x20000b54
   18898:	20000b68 	.word	0x20000b68
   1889c:	00019969 	.word	0x00019969
   188a0:	0000ffff 	.word	0x0000ffff
   188a4:	00018b2d 	.word	0x00018b2d
   188a8:	0001930d 	.word	0x0001930d
   188ac:	00019911 	.word	0x00019911

000188b0 <prvTraceStoreKernelCall>:
 * This is the main integration point for storing kernel calls, and
 * is called by the hooks in trcKernelHooks.h (see trcKernelPort.h for event codes).
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCall(uint32_t ecode, traceObjectClass objectClass, uint32_t objectNumber)
{
   188b0:	b590      	push	{r4, r7, lr}
   188b2:	b08b      	sub	sp, #44	; 0x2c
   188b4:	af00      	add	r7, sp, #0
   188b6:	60f8      	str	r0, [r7, #12]
   188b8:	607a      	str	r2, [r7, #4]
   188ba:	230b      	movs	r3, #11
   188bc:	18fb      	adds	r3, r7, r3
   188be:	1c0a      	adds	r2, r1, #0
   188c0:	701a      	strb	r2, [r3, #0]
	KernelCall * kse;
	uint16_t dts1;
	uint8_t hnd8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
   188c2:	68fb      	ldr	r3, [r7, #12]
   188c4:	2bfe      	cmp	r3, #254	; 0xfe
   188c6:	d904      	bls.n	188d2 <prvTraceStoreKernelCall+0x22>
   188c8:	4b39      	ldr	r3, [pc, #228]	; (189b0 <prvTraceStoreKernelCall+0x100>)
   188ca:	0018      	movs	r0, r3
   188cc:	4b39      	ldr	r3, [pc, #228]	; (189b4 <prvTraceStoreKernelCall+0x104>)
   188ce:	4798      	blx	r3
   188d0:	e06b      	b.n	189aa <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   188d2:	230b      	movs	r3, #11
   188d4:	18fb      	adds	r3, r7, r3
   188d6:	781b      	ldrb	r3, [r3, #0]
   188d8:	2b08      	cmp	r3, #8
   188da:	d904      	bls.n	188e6 <prvTraceStoreKernelCall+0x36>
   188dc:	4b36      	ldr	r3, [pc, #216]	; (189b8 <prvTraceStoreKernelCall+0x108>)
   188de:	0018      	movs	r0, r3
   188e0:	4b34      	ldr	r3, [pc, #208]	; (189b4 <prvTraceStoreKernelCall+0x104>)
   188e2:	4798      	blx	r3
   188e4:	e061      	b.n	189aa <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);
   188e6:	4b35      	ldr	r3, [pc, #212]	; (189bc <prvTraceStoreKernelCall+0x10c>)
   188e8:	681a      	ldr	r2, [r3, #0]
   188ea:	230b      	movs	r3, #11
   188ec:	18fb      	adds	r3, r7, r3
   188ee:	781b      	ldrb	r3, [r3, #0]
   188f0:	2164      	movs	r1, #100	; 0x64
   188f2:	18d3      	adds	r3, r2, r3
   188f4:	185b      	adds	r3, r3, r1
   188f6:	781b      	ldrb	r3, [r3, #0]
   188f8:	001a      	movs	r2, r3
   188fa:	687b      	ldr	r3, [r7, #4]
   188fc:	429a      	cmp	r2, r3
   188fe:	d204      	bcs.n	1890a <prvTraceStoreKernelCall+0x5a>
   18900:	4b2f      	ldr	r3, [pc, #188]	; (189c0 <prvTraceStoreKernelCall+0x110>)
   18902:	0018      	movs	r0, r3
   18904:	4b2b      	ldr	r3, [pc, #172]	; (189b4 <prvTraceStoreKernelCall+0x104>)
   18906:	4798      	blx	r3
   18908:	e04f      	b.n	189aa <prvTraceStoreKernelCall+0xfa>

	if (recorder_busy)
   1890a:	4b2e      	ldr	r3, [pc, #184]	; (189c4 <prvTraceStoreKernelCall+0x114>)
   1890c:	681b      	ldr	r3, [r3, #0]
   1890e:	2b00      	cmp	r3, #0
   18910:	d004      	beq.n	1891c <prvTraceStoreKernelCall+0x6c>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
   18912:	4b2d      	ldr	r3, [pc, #180]	; (189c8 <prvTraceStoreKernelCall+0x118>)
   18914:	0018      	movs	r0, r3
   18916:	4b27      	ldr	r3, [pc, #156]	; (189b4 <prvTraceStoreKernelCall+0x104>)
   18918:	4798      	blx	r3
		return;
   1891a:	e046      	b.n	189aa <prvTraceStoreKernelCall+0xfa>
	}

	if (handle_of_last_logged_task == 0)
   1891c:	4b2b      	ldr	r3, [pc, #172]	; (189cc <prvTraceStoreKernelCall+0x11c>)
   1891e:	781b      	ldrb	r3, [r3, #0]
   18920:	2b00      	cmp	r3, #0
   18922:	d041      	beq.n	189a8 <prvTraceStoreKernelCall+0xf8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   18924:	f3ef 8310 	mrs	r3, PRIMASK
   18928:	617b      	str	r3, [r7, #20]
  return(result);
   1892a:	697b      	ldr	r3, [r7, #20]
	{
		return;
	}

	trcCRITICAL_SECTION_BEGIN();
   1892c:	627b      	str	r3, [r7, #36]	; 0x24
   1892e:	2301      	movs	r3, #1
   18930:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   18932:	69bb      	ldr	r3, [r7, #24]
   18934:	f383 8810 	msr	PRIMASK, r3
   18938:	4b22      	ldr	r3, [pc, #136]	; (189c4 <prvTraceStoreKernelCall+0x114>)
   1893a:	681b      	ldr	r3, [r3, #0]
   1893c:	1c5a      	adds	r2, r3, #1
   1893e:	4b21      	ldr	r3, [pc, #132]	; (189c4 <prvTraceStoreKernelCall+0x114>)
   18940:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive)
   18942:	4b1e      	ldr	r3, [pc, #120]	; (189bc <prvTraceStoreKernelCall+0x10c>)
   18944:	681b      	ldr	r3, [r3, #0]
   18946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   18948:	2b00      	cmp	r3, #0
   1894a:	d022      	beq.n	18992 <prvTraceStoreKernelCall+0xe2>
	{
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
   1894c:	2322      	movs	r3, #34	; 0x22
   1894e:	18fc      	adds	r4, r7, r3
   18950:	4b1f      	ldr	r3, [pc, #124]	; (189d0 <prvTraceStoreKernelCall+0x120>)
   18952:	0018      	movs	r0, r3
   18954:	4b1f      	ldr	r3, [pc, #124]	; (189d4 <prvTraceStoreKernelCall+0x124>)
   18956:	4798      	blx	r3
   18958:	0003      	movs	r3, r0
   1895a:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
   1895c:	2321      	movs	r3, #33	; 0x21
   1895e:	18fb      	adds	r3, r7, r3
   18960:	687a      	ldr	r2, [r7, #4]
   18962:	701a      	strb	r2, [r3, #0]
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
   18964:	4b1c      	ldr	r3, [pc, #112]	; (189d8 <prvTraceStoreKernelCall+0x128>)
   18966:	4798      	blx	r3
   18968:	0003      	movs	r3, r0
   1896a:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
   1896c:	69fb      	ldr	r3, [r7, #28]
   1896e:	2b00      	cmp	r3, #0
   18970:	d00f      	beq.n	18992 <prvTraceStoreKernelCall+0xe2>
		{
			kse->dts = dts1;
   18972:	69fb      	ldr	r3, [r7, #28]
   18974:	2222      	movs	r2, #34	; 0x22
   18976:	18ba      	adds	r2, r7, r2
   18978:	8812      	ldrh	r2, [r2, #0]
   1897a:	805a      	strh	r2, [r3, #2]
			kse->type = (uint8_t)ecode;
   1897c:	68fb      	ldr	r3, [r7, #12]
   1897e:	b2da      	uxtb	r2, r3
   18980:	69fb      	ldr	r3, [r7, #28]
   18982:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
   18984:	69fb      	ldr	r3, [r7, #28]
   18986:	2221      	movs	r2, #33	; 0x21
   18988:	18ba      	adds	r2, r7, r2
   1898a:	7812      	ldrb	r2, [r2, #0]
   1898c:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
   1898e:	4b13      	ldr	r3, [pc, #76]	; (189dc <prvTraceStoreKernelCall+0x12c>)
   18990:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   18992:	4b0c      	ldr	r3, [pc, #48]	; (189c4 <prvTraceStoreKernelCall+0x114>)
   18994:	681b      	ldr	r3, [r3, #0]
   18996:	1e5a      	subs	r2, r3, #1
   18998:	4b0a      	ldr	r3, [pc, #40]	; (189c4 <prvTraceStoreKernelCall+0x114>)
   1899a:	601a      	str	r2, [r3, #0]
   1899c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1899e:	613b      	str	r3, [r7, #16]
   189a0:	693b      	ldr	r3, [r7, #16]
   189a2:	f383 8810 	msr	PRIMASK, r3
   189a6:	e000      	b.n	189aa <prvTraceStoreKernelCall+0xfa>
		return;
   189a8:	46c0      	nop			; (mov r8, r8)
}
   189aa:	46bd      	mov	sp, r7
   189ac:	b00b      	add	sp, #44	; 0x2c
   189ae:	bd90      	pop	{r4, r7, pc}
   189b0:	0003803c 	.word	0x0003803c
   189b4:	00019755 	.word	0x00019755
   189b8:	00038074 	.word	0x00038074
   189bc:	20000bfc 	.word	0x20000bfc
   189c0:	000380bc 	.word	0x000380bc
   189c4:	20000b54 	.word	0x20000b54
   189c8:	00038104 	.word	0x00038104
   189cc:	20000b60 	.word	0x20000b60
   189d0:	0000ffff 	.word	0x0000ffff
   189d4:	00019969 	.word	0x00019969
   189d8:	0001930d 	.word	0x0001930d
   189dc:	00019911 	.word	0x00019911

000189e0 <prvTraceStoreKernelCallWithParam>:
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithParam(uint32_t evtcode,
									traceObjectClass objectClass,
									uint32_t objectNumber,
									uint32_t param)
{
   189e0:	b580      	push	{r7, lr}
   189e2:	b08a      	sub	sp, #40	; 0x28
   189e4:	af00      	add	r7, sp, #0
   189e6:	60f8      	str	r0, [r7, #12]
   189e8:	607a      	str	r2, [r7, #4]
   189ea:	603b      	str	r3, [r7, #0]
   189ec:	230b      	movs	r3, #11
   189ee:	18fb      	adds	r3, r7, r3
   189f0:	1c0a      	adds	r2, r1, #0
   189f2:	701a      	strb	r2, [r3, #0]
	uint8_t dts2;
	uint8_t hnd8;
	uint8_t p8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
   189f4:	68fb      	ldr	r3, [r7, #12]
   189f6:	2bfe      	cmp	r3, #254	; 0xfe
   189f8:	d904      	bls.n	18a04 <prvTraceStoreKernelCallWithParam+0x24>
   189fa:	4b40      	ldr	r3, [pc, #256]	; (18afc <prvTraceStoreKernelCallWithParam+0x11c>)
   189fc:	0018      	movs	r0, r3
   189fe:	4b40      	ldr	r3, [pc, #256]	; (18b00 <prvTraceStoreKernelCallWithParam+0x120>)
   18a00:	4798      	blx	r3
   18a02:	e077      	b.n	18af4 <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   18a04:	230b      	movs	r3, #11
   18a06:	18fb      	adds	r3, r7, r3
   18a08:	781b      	ldrb	r3, [r3, #0]
   18a0a:	2b08      	cmp	r3, #8
   18a0c:	d904      	bls.n	18a18 <prvTraceStoreKernelCallWithParam+0x38>
   18a0e:	4b3d      	ldr	r3, [pc, #244]	; (18b04 <prvTraceStoreKernelCallWithParam+0x124>)
   18a10:	0018      	movs	r0, r3
   18a12:	4b3b      	ldr	r3, [pc, #236]	; (18b00 <prvTraceStoreKernelCallWithParam+0x120>)
   18a14:	4798      	blx	r3
   18a16:	e06d      	b.n	18af4 <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);
   18a18:	4b3b      	ldr	r3, [pc, #236]	; (18b08 <prvTraceStoreKernelCallWithParam+0x128>)
   18a1a:	681a      	ldr	r2, [r3, #0]
   18a1c:	230b      	movs	r3, #11
   18a1e:	18fb      	adds	r3, r7, r3
   18a20:	781b      	ldrb	r3, [r3, #0]
   18a22:	2164      	movs	r1, #100	; 0x64
   18a24:	18d3      	adds	r3, r2, r3
   18a26:	185b      	adds	r3, r3, r1
   18a28:	781b      	ldrb	r3, [r3, #0]
   18a2a:	001a      	movs	r2, r3
   18a2c:	687b      	ldr	r3, [r7, #4]
   18a2e:	429a      	cmp	r2, r3
   18a30:	d204      	bcs.n	18a3c <prvTraceStoreKernelCallWithParam+0x5c>
   18a32:	4b36      	ldr	r3, [pc, #216]	; (18b0c <prvTraceStoreKernelCallWithParam+0x12c>)
   18a34:	0018      	movs	r0, r3
   18a36:	4b32      	ldr	r3, [pc, #200]	; (18b00 <prvTraceStoreKernelCallWithParam+0x120>)
   18a38:	4798      	blx	r3
   18a3a:	e05b      	b.n	18af4 <prvTraceStoreKernelCallWithParam+0x114>

	if (recorder_busy)
   18a3c:	4b34      	ldr	r3, [pc, #208]	; (18b10 <prvTraceStoreKernelCallWithParam+0x130>)
   18a3e:	681b      	ldr	r3, [r3, #0]
   18a40:	2b00      	cmp	r3, #0
   18a42:	d004      	beq.n	18a4e <prvTraceStoreKernelCallWithParam+0x6e>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
   18a44:	4b33      	ldr	r3, [pc, #204]	; (18b14 <prvTraceStoreKernelCallWithParam+0x134>)
   18a46:	0018      	movs	r0, r3
   18a48:	4b2d      	ldr	r3, [pc, #180]	; (18b00 <prvTraceStoreKernelCallWithParam+0x120>)
   18a4a:	4798      	blx	r3
		return;
   18a4c:	e052      	b.n	18af4 <prvTraceStoreKernelCallWithParam+0x114>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   18a4e:	f3ef 8310 	mrs	r3, PRIMASK
   18a52:	617b      	str	r3, [r7, #20]
  return(result);
   18a54:	697b      	ldr	r3, [r7, #20]
	}

	trcCRITICAL_SECTION_BEGIN();
   18a56:	627b      	str	r3, [r7, #36]	; 0x24
   18a58:	2301      	movs	r3, #1
   18a5a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   18a5c:	69bb      	ldr	r3, [r7, #24]
   18a5e:	f383 8810 	msr	PRIMASK, r3
   18a62:	4b2b      	ldr	r3, [pc, #172]	; (18b10 <prvTraceStoreKernelCallWithParam+0x130>)
   18a64:	681b      	ldr	r3, [r3, #0]
   18a66:	1c5a      	adds	r2, r3, #1
   18a68:	4b29      	ldr	r3, [pc, #164]	; (18b10 <prvTraceStoreKernelCallWithParam+0x130>)
   18a6a:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
   18a6c:	4b26      	ldr	r3, [pc, #152]	; (18b08 <prvTraceStoreKernelCallWithParam+0x128>)
   18a6e:	681b      	ldr	r3, [r3, #0]
   18a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   18a72:	2b00      	cmp	r3, #0
   18a74:	d034      	beq.n	18ae0 <prvTraceStoreKernelCallWithParam+0x100>
   18a76:	4b28      	ldr	r3, [pc, #160]	; (18b18 <prvTraceStoreKernelCallWithParam+0x138>)
   18a78:	781b      	ldrb	r3, [r3, #0]
   18a7a:	2b00      	cmp	r3, #0
   18a7c:	d030      	beq.n	18ae0 <prvTraceStoreKernelCallWithParam+0x100>
	{
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
   18a7e:	20ff      	movs	r0, #255	; 0xff
   18a80:	4b26      	ldr	r3, [pc, #152]	; (18b1c <prvTraceStoreKernelCallWithParam+0x13c>)
   18a82:	4798      	blx	r3
   18a84:	0003      	movs	r3, r0
   18a86:	001a      	movs	r2, r3
   18a88:	2323      	movs	r3, #35	; 0x23
   18a8a:	18fb      	adds	r3, r7, r3
   18a8c:	701a      	strb	r2, [r3, #0]
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
   18a8e:	683b      	ldr	r3, [r7, #0]
   18a90:	0019      	movs	r1, r3
   18a92:	20ff      	movs	r0, #255	; 0xff
   18a94:	4b22      	ldr	r3, [pc, #136]	; (18b20 <prvTraceStoreKernelCallWithParam+0x140>)
   18a96:	4798      	blx	r3
   18a98:	0002      	movs	r2, r0
   18a9a:	2322      	movs	r3, #34	; 0x22
   18a9c:	18fb      	adds	r3, r7, r3
   18a9e:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
   18aa0:	2321      	movs	r3, #33	; 0x21
   18aa2:	18fb      	adds	r3, r7, r3
   18aa4:	687a      	ldr	r2, [r7, #4]
   18aa6:	701a      	strb	r2, [r3, #0]
		kse = (KernelCallWithParamAndHandle*) prvTraceNextFreeEventBufferSlot();
   18aa8:	4b1e      	ldr	r3, [pc, #120]	; (18b24 <prvTraceStoreKernelCallWithParam+0x144>)
   18aaa:	4798      	blx	r3
   18aac:	0003      	movs	r3, r0
   18aae:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
   18ab0:	69fb      	ldr	r3, [r7, #28]
   18ab2:	2b00      	cmp	r3, #0
   18ab4:	d014      	beq.n	18ae0 <prvTraceStoreKernelCallWithParam+0x100>
		{
			kse->dts = dts2;
   18ab6:	69fb      	ldr	r3, [r7, #28]
   18ab8:	2223      	movs	r2, #35	; 0x23
   18aba:	18ba      	adds	r2, r7, r2
   18abc:	7812      	ldrb	r2, [r2, #0]
   18abe:	70da      	strb	r2, [r3, #3]
			kse->type = (uint8_t)evtcode;
   18ac0:	68fb      	ldr	r3, [r7, #12]
   18ac2:	b2da      	uxtb	r2, r3
   18ac4:	69fb      	ldr	r3, [r7, #28]
   18ac6:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
   18ac8:	69fb      	ldr	r3, [r7, #28]
   18aca:	2221      	movs	r2, #33	; 0x21
   18acc:	18ba      	adds	r2, r7, r2
   18ace:	7812      	ldrb	r2, [r2, #0]
   18ad0:	705a      	strb	r2, [r3, #1]
			kse->param = p8;
   18ad2:	69fb      	ldr	r3, [r7, #28]
   18ad4:	2222      	movs	r2, #34	; 0x22
   18ad6:	18ba      	adds	r2, r7, r2
   18ad8:	7812      	ldrb	r2, [r2, #0]
   18ada:	709a      	strb	r2, [r3, #2]
			prvTraceUpdateCounters();
   18adc:	4b12      	ldr	r3, [pc, #72]	; (18b28 <prvTraceStoreKernelCallWithParam+0x148>)
   18ade:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   18ae0:	4b0b      	ldr	r3, [pc, #44]	; (18b10 <prvTraceStoreKernelCallWithParam+0x130>)
   18ae2:	681b      	ldr	r3, [r3, #0]
   18ae4:	1e5a      	subs	r2, r3, #1
   18ae6:	4b0a      	ldr	r3, [pc, #40]	; (18b10 <prvTraceStoreKernelCallWithParam+0x130>)
   18ae8:	601a      	str	r2, [r3, #0]
   18aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18aec:	613b      	str	r3, [r7, #16]
   18aee:	693b      	ldr	r3, [r7, #16]
   18af0:	f383 8810 	msr	PRIMASK, r3
}
   18af4:	46bd      	mov	sp, r7
   18af6:	b00a      	add	sp, #40	; 0x28
   18af8:	bd80      	pop	{r7, pc}
   18afa:	46c0      	nop			; (mov r8, r8)
   18afc:	0003813c 	.word	0x0003813c
   18b00:	00019755 	.word	0x00019755
   18b04:	0003817c 	.word	0x0003817c
   18b08:	20000bfc 	.word	0x20000bfc
   18b0c:	000381cc 	.word	0x000381cc
   18b10:	20000b54 	.word	0x20000b54
   18b14:	0003821c 	.word	0x0003821c
   18b18:	20000b60 	.word	0x20000b60
   18b1c:	00019969 	.word	0x00019969
   18b20:	00018b2d 	.word	0x00018b2d
   18b24:	0001930d 	.word	0x0001930d
   18b28:	00019911 	.word	0x00019911

00018b2c <prvTraceGetParam>:
 *
 * May only be called within a critical section!
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
static uint32_t prvTraceGetParam(uint32_t param_max, uint32_t param)
{
   18b2c:	b580      	push	{r7, lr}
   18b2e:	b084      	sub	sp, #16
   18b30:	af00      	add	r7, sp, #0
   18b32:	6078      	str	r0, [r7, #4]
   18b34:	6039      	str	r1, [r7, #0]
	XPSEvent* xps;

	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
   18b36:	687b      	ldr	r3, [r7, #4]
   18b38:	2bff      	cmp	r3, #255	; 0xff
   18b3a:	d009      	beq.n	18b50 <prvTraceGetParam+0x24>
   18b3c:	687b      	ldr	r3, [r7, #4]
   18b3e:	4a19      	ldr	r2, [pc, #100]	; (18ba4 <prvTraceGetParam+0x78>)
   18b40:	4293      	cmp	r3, r2
   18b42:	d005      	beq.n	18b50 <prvTraceGetParam+0x24>
   18b44:	4b18      	ldr	r3, [pc, #96]	; (18ba8 <prvTraceGetParam+0x7c>)
   18b46:	0018      	movs	r0, r3
   18b48:	4b18      	ldr	r3, [pc, #96]	; (18bac <prvTraceGetParam+0x80>)
   18b4a:	4798      	blx	r3
   18b4c:	683b      	ldr	r3, [r7, #0]
   18b4e:	e024      	b.n	18b9a <prvTraceGetParam+0x6e>
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
   18b50:	683a      	ldr	r2, [r7, #0]
   18b52:	687b      	ldr	r3, [r7, #4]
   18b54:	429a      	cmp	r2, r3
   18b56:	d801      	bhi.n	18b5c <prvTraceGetParam+0x30>
	{
		return param;
   18b58:	683b      	ldr	r3, [r7, #0]
   18b5a:	e01e      	b.n	18b9a <prvTraceGetParam+0x6e>
	}
	else
	{
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
   18b5c:	4b14      	ldr	r3, [pc, #80]	; (18bb0 <prvTraceGetParam+0x84>)
   18b5e:	4798      	blx	r3
   18b60:	0003      	movs	r3, r0
   18b62:	60fb      	str	r3, [r7, #12]
		if (xps != NULL)
   18b64:	68fb      	ldr	r3, [r7, #12]
   18b66:	2b00      	cmp	r3, #0
   18b68:	d014      	beq.n	18b94 <prvTraceGetParam+0x68>
		{
			xps->type = DIV_XPS;
   18b6a:	68fb      	ldr	r3, [r7, #12]
   18b6c:	2201      	movs	r2, #1
   18b6e:	701a      	strb	r2, [r3, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
   18b70:	687b      	ldr	r3, [r7, #4]
   18b72:	43db      	mvns	r3, r3
   18b74:	683a      	ldr	r2, [r7, #0]
   18b76:	4013      	ands	r3, r2
   18b78:	0a1b      	lsrs	r3, r3, #8
   18b7a:	b2da      	uxtb	r2, r3
   18b7c:	68fb      	ldr	r3, [r7, #12]
   18b7e:	705a      	strb	r2, [r3, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
   18b80:	687b      	ldr	r3, [r7, #4]
   18b82:	43db      	mvns	r3, r3
   18b84:	683a      	ldr	r2, [r7, #0]
   18b86:	4013      	ands	r3, r2
   18b88:	0c1b      	lsrs	r3, r3, #16
   18b8a:	b29a      	uxth	r2, r3
   18b8c:	68fb      	ldr	r3, [r7, #12]
   18b8e:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   18b90:	4b08      	ldr	r3, [pc, #32]	; (18bb4 <prvTraceGetParam+0x88>)
   18b92:	4798      	blx	r3
		}

		return param & param_max;
   18b94:	683b      	ldr	r3, [r7, #0]
   18b96:	687a      	ldr	r2, [r7, #4]
   18b98:	4013      	ands	r3, r2
	}
}
   18b9a:	0018      	movs	r0, r3
   18b9c:	46bd      	mov	sp, r7
   18b9e:	b004      	add	sp, #16
   18ba0:	bd80      	pop	{r7, pc}
   18ba2:	46c0      	nop			; (mov r8, r8)
   18ba4:	0000ffff 	.word	0x0000ffff
   18ba8:	00038254 	.word	0x00038254
   18bac:	00019755 	.word	0x00019755
   18bb0:	0001930d 	.word	0x0001930d
   18bb4:	00019911 	.word	0x00019911

00018bb8 <prvTraceStoreKernelCallWithNumericParamOnly>:
 * Used for storing kernel calls with numeric parameters only. This is
 * only used for traceTASK_DELAY and traceDELAY_UNTIL at the moment.
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithNumericParamOnly(uint32_t evtcode, uint32_t param)
{
   18bb8:	b580      	push	{r7, lr}
   18bba:	b08a      	sub	sp, #40	; 0x28
   18bbc:	af00      	add	r7, sp, #0
   18bbe:	6078      	str	r0, [r7, #4]
   18bc0:	6039      	str	r1, [r7, #0]
	KernelCallWithParam16 * kse;
	uint8_t dts6;
	uint16_t restParam;
	TRACE_ALLOC_CRITICAL_SECTION();

	restParam = 0;
   18bc2:	2326      	movs	r3, #38	; 0x26
   18bc4:	18fb      	adds	r3, r7, r3
   18bc6:	2200      	movs	r2, #0
   18bc8:	801a      	strh	r2, [r3, #0]

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
   18bca:	687b      	ldr	r3, [r7, #4]
   18bcc:	2bfe      	cmp	r3, #254	; 0xfe
   18bce:	d904      	bls.n	18bda <prvTraceStoreKernelCallWithNumericParamOnly+0x22>
   18bd0:	4b2d      	ldr	r3, [pc, #180]	; (18c88 <prvTraceStoreKernelCallWithNumericParamOnly+0xd0>)
   18bd2:	0018      	movs	r0, r3
   18bd4:	4b2d      	ldr	r3, [pc, #180]	; (18c8c <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
   18bd6:	4798      	blx	r3
   18bd8:	e053      	b.n	18c82 <prvTraceStoreKernelCallWithNumericParamOnly+0xca>

	if (recorder_busy)
   18bda:	4b2d      	ldr	r3, [pc, #180]	; (18c90 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   18bdc:	681b      	ldr	r3, [r3, #0]
   18bde:	2b00      	cmp	r3, #0
   18be0:	d004      	beq.n	18bec <prvTraceStoreKernelCallWithNumericParamOnly+0x34>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
   18be2:	4b2c      	ldr	r3, [pc, #176]	; (18c94 <prvTraceStoreKernelCallWithNumericParamOnly+0xdc>)
   18be4:	0018      	movs	r0, r3
   18be6:	4b29      	ldr	r3, [pc, #164]	; (18c8c <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
   18be8:	4798      	blx	r3
		return;
   18bea:	e04a      	b.n	18c82 <prvTraceStoreKernelCallWithNumericParamOnly+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   18bec:	f3ef 8310 	mrs	r3, PRIMASK
   18bf0:	613b      	str	r3, [r7, #16]
  return(result);
   18bf2:	693b      	ldr	r3, [r7, #16]
	}

	trcCRITICAL_SECTION_BEGIN();
   18bf4:	623b      	str	r3, [r7, #32]
   18bf6:	2301      	movs	r3, #1
   18bf8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   18bfa:	697b      	ldr	r3, [r7, #20]
   18bfc:	f383 8810 	msr	PRIMASK, r3
   18c00:	4b23      	ldr	r3, [pc, #140]	; (18c90 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   18c02:	681b      	ldr	r3, [r3, #0]
   18c04:	1c5a      	adds	r2, r3, #1
   18c06:	4b22      	ldr	r3, [pc, #136]	; (18c90 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   18c08:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
   18c0a:	4b23      	ldr	r3, [pc, #140]	; (18c98 <prvTraceStoreKernelCallWithNumericParamOnly+0xe0>)
   18c0c:	681b      	ldr	r3, [r3, #0]
   18c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   18c10:	2b00      	cmp	r3, #0
   18c12:	d02c      	beq.n	18c6e <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
   18c14:	4b21      	ldr	r3, [pc, #132]	; (18c9c <prvTraceStoreKernelCallWithNumericParamOnly+0xe4>)
   18c16:	781b      	ldrb	r3, [r3, #0]
   18c18:	2b00      	cmp	r3, #0
   18c1a:	d028      	beq.n	18c6e <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
	{
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
   18c1c:	20ff      	movs	r0, #255	; 0xff
   18c1e:	4b20      	ldr	r3, [pc, #128]	; (18ca0 <prvTraceStoreKernelCallWithNumericParamOnly+0xe8>)
   18c20:	4798      	blx	r3
   18c22:	0003      	movs	r3, r0
   18c24:	001a      	movs	r2, r3
   18c26:	231f      	movs	r3, #31
   18c28:	18fb      	adds	r3, r7, r3
   18c2a:	701a      	strb	r2, [r3, #0]
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
   18c2c:	683b      	ldr	r3, [r7, #0]
   18c2e:	4a1d      	ldr	r2, [pc, #116]	; (18ca4 <prvTraceStoreKernelCallWithNumericParamOnly+0xec>)
   18c30:	0019      	movs	r1, r3
   18c32:	0010      	movs	r0, r2
   18c34:	4b1c      	ldr	r3, [pc, #112]	; (18ca8 <prvTraceStoreKernelCallWithNumericParamOnly+0xf0>)
   18c36:	4798      	blx	r3
   18c38:	0002      	movs	r2, r0
   18c3a:	2326      	movs	r3, #38	; 0x26
   18c3c:	18fb      	adds	r3, r7, r3
   18c3e:	801a      	strh	r2, [r3, #0]
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
   18c40:	4b1a      	ldr	r3, [pc, #104]	; (18cac <prvTraceStoreKernelCallWithNumericParamOnly+0xf4>)
   18c42:	4798      	blx	r3
   18c44:	0003      	movs	r3, r0
   18c46:	61bb      	str	r3, [r7, #24]
		if (kse != NULL)
   18c48:	69bb      	ldr	r3, [r7, #24]
   18c4a:	2b00      	cmp	r3, #0
   18c4c:	d00f      	beq.n	18c6e <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
		{
			kse->dts = dts6;
   18c4e:	69bb      	ldr	r3, [r7, #24]
   18c50:	221f      	movs	r2, #31
   18c52:	18ba      	adds	r2, r7, r2
   18c54:	7812      	ldrb	r2, [r2, #0]
   18c56:	705a      	strb	r2, [r3, #1]
			kse->type = (uint8_t)evtcode;
   18c58:	687b      	ldr	r3, [r7, #4]
   18c5a:	b2da      	uxtb	r2, r3
   18c5c:	69bb      	ldr	r3, [r7, #24]
   18c5e:	701a      	strb	r2, [r3, #0]
			kse->param = restParam;
   18c60:	69bb      	ldr	r3, [r7, #24]
   18c62:	2226      	movs	r2, #38	; 0x26
   18c64:	18ba      	adds	r2, r7, r2
   18c66:	8812      	ldrh	r2, [r2, #0]
   18c68:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   18c6a:	4b11      	ldr	r3, [pc, #68]	; (18cb0 <prvTraceStoreKernelCallWithNumericParamOnly+0xf8>)
   18c6c:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   18c6e:	4b08      	ldr	r3, [pc, #32]	; (18c90 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   18c70:	681b      	ldr	r3, [r3, #0]
   18c72:	1e5a      	subs	r2, r3, #1
   18c74:	4b06      	ldr	r3, [pc, #24]	; (18c90 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   18c76:	601a      	str	r2, [r3, #0]
   18c78:	6a3b      	ldr	r3, [r7, #32]
   18c7a:	60fb      	str	r3, [r7, #12]
   18c7c:	68fb      	ldr	r3, [r7, #12]
   18c7e:	f383 8810 	msr	PRIMASK, r3
}
   18c82:	46bd      	mov	sp, r7
   18c84:	b00a      	add	sp, #40	; 0x28
   18c86:	bd80      	pop	{r7, pc}
   18c88:	00038290 	.word	0x00038290
   18c8c:	00019755 	.word	0x00019755
   18c90:	20000b54 	.word	0x20000b54
   18c94:	000382e8 	.word	0x000382e8
   18c98:	20000bfc 	.word	0x20000bfc
   18c9c:	20000b60 	.word	0x20000b60
   18ca0:	00019969 	.word	0x00019969
   18ca4:	0000ffff 	.word	0x0000ffff
   18ca8:	00018b2d 	.word	0x00018b2d
   18cac:	0001930d 	.word	0x0001930d
   18cb0:	00019911 	.word	0x00019911

00018cb4 <prvTraceStoreTaskswitch>:
 * prvTraceStoreTaskswitch
 * Called by the scheduler from the SWITCHED_OUT hook, and by uiTraceStart.
 * At this point interrupts are assumed to be disabled!
 ******************************************************************************/
void prvTraceStoreTaskswitch(traceHandle task_handle)
{
   18cb4:	b590      	push	{r4, r7, lr}
   18cb6:	b089      	sub	sp, #36	; 0x24
   18cb8:	af00      	add	r7, sp, #0
   18cba:	0002      	movs	r2, r0
   18cbc:	1dfb      	adds	r3, r7, #7
   18cbe:	701a      	strb	r2, [r3, #0]
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
	extern int32_t isPendingContextSwitch;
#endif
	trcSR_ALLOC_CRITICAL_SECTION_ON_CORTEX_M_ONLY();

	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
   18cc0:	1dfb      	adds	r3, r7, #7
   18cc2:	781b      	ldrb	r3, [r3, #0]
   18cc4:	2b0f      	cmp	r3, #15
   18cc6:	d904      	bls.n	18cd2 <prvTraceStoreTaskswitch+0x1e>
   18cc8:	4b34      	ldr	r3, [pc, #208]	; (18d9c <prvTraceStoreTaskswitch+0xe8>)
   18cca:	0018      	movs	r0, r3
   18ccc:	4b34      	ldr	r3, [pc, #208]	; (18da0 <prvTraceStoreTaskswitch+0xec>)
   18cce:	4798      	blx	r3
   18cd0:	e061      	b.n	18d96 <prvTraceStoreTaskswitch+0xe2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   18cd2:	f3ef 8310 	mrs	r3, PRIMASK
   18cd6:	60fb      	str	r3, [r7, #12]
  return(result);
   18cd8:	68fb      	ldr	r3, [r7, #12]
		"prvTraceStoreTaskswitch: Invalid value for task_handle", TRC_UNUSED);

	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
   18cda:	61fb      	str	r3, [r7, #28]
   18cdc:	2301      	movs	r3, #1
   18cde:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   18ce0:	693b      	ldr	r3, [r7, #16]
   18ce2:	f383 8810 	msr	PRIMASK, r3
   18ce6:	4b2f      	ldr	r3, [pc, #188]	; (18da4 <prvTraceStoreTaskswitch+0xf0>)
   18ce8:	681b      	ldr	r3, [r3, #0]
   18cea:	1c5a      	adds	r2, r3, #1
   18cec:	4b2d      	ldr	r3, [pc, #180]	; (18da4 <prvTraceStoreTaskswitch+0xf0>)
   18cee:	601a      	str	r2, [r3, #0]

	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
   18cf0:	4b2d      	ldr	r3, [pc, #180]	; (18da8 <prvTraceStoreTaskswitch+0xf4>)
   18cf2:	781b      	ldrb	r3, [r3, #0]
   18cf4:	1dfa      	adds	r2, r7, #7
   18cf6:	7812      	ldrb	r2, [r2, #0]
   18cf8:	429a      	cmp	r2, r3
   18cfa:	d042      	beq.n	18d82 <prvTraceStoreTaskswitch+0xce>
   18cfc:	4b2b      	ldr	r3, [pc, #172]	; (18dac <prvTraceStoreTaskswitch+0xf8>)
   18cfe:	681b      	ldr	r3, [r3, #0]
   18d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   18d02:	2b00      	cmp	r3, #0
   18d04:	d03d      	beq.n	18d82 <prvTraceStoreTaskswitch+0xce>
	{
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
		isPendingContextSwitch = 0;
   18d06:	4b2a      	ldr	r3, [pc, #168]	; (18db0 <prvTraceStoreTaskswitch+0xfc>)
   18d08:	2200      	movs	r2, #0
   18d0a:	601a      	str	r2, [r3, #0]
#endif

		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   18d0c:	231a      	movs	r3, #26
   18d0e:	18fc      	adds	r4, r7, r3
   18d10:	4b28      	ldr	r3, [pc, #160]	; (18db4 <prvTraceStoreTaskswitch+0x100>)
   18d12:	0018      	movs	r0, r3
   18d14:	4b28      	ldr	r3, [pc, #160]	; (18db8 <prvTraceStoreTaskswitch+0x104>)
   18d16:	4798      	blx	r3
   18d18:	0003      	movs	r3, r0
   18d1a:	8023      	strh	r3, [r4, #0]
		handle_of_last_logged_task = task_handle;
   18d1c:	4b22      	ldr	r3, [pc, #136]	; (18da8 <prvTraceStoreTaskswitch+0xf4>)
   18d1e:	1dfa      	adds	r2, r7, #7
   18d20:	7812      	ldrb	r2, [r2, #0]
   18d22:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle(handle_of_last_logged_task);
   18d24:	2319      	movs	r3, #25
   18d26:	18fb      	adds	r3, r7, r3
   18d28:	4a1f      	ldr	r2, [pc, #124]	; (18da8 <prvTraceStoreTaskswitch+0xf4>)
   18d2a:	7812      	ldrb	r2, [r2, #0]
   18d2c:	701a      	strb	r2, [r3, #0]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
   18d2e:	4b23      	ldr	r3, [pc, #140]	; (18dbc <prvTraceStoreTaskswitch+0x108>)
   18d30:	4798      	blx	r3
   18d32:	0003      	movs	r3, r0
   18d34:	617b      	str	r3, [r7, #20]

		if (ts != NULL)
   18d36:	697b      	ldr	r3, [r7, #20]
   18d38:	2b00      	cmp	r3, #0
   18d3a:	d022      	beq.n	18d82 <prvTraceStoreTaskswitch+0xce>
		{
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
   18d3c:	4b1a      	ldr	r3, [pc, #104]	; (18da8 <prvTraceStoreTaskswitch+0xf4>)
   18d3e:	781b      	ldrb	r3, [r3, #0]
   18d40:	0019      	movs	r1, r3
   18d42:	2003      	movs	r0, #3
   18d44:	4b1e      	ldr	r3, [pc, #120]	; (18dc0 <prvTraceStoreTaskswitch+0x10c>)
   18d46:	4798      	blx	r3
   18d48:	0003      	movs	r3, r0
   18d4a:	2b01      	cmp	r3, #1
   18d4c:	d103      	bne.n	18d56 <prvTraceStoreTaskswitch+0xa2>
				handle_of_last_logged_task) == TASK_STATE_INSTANCE_ACTIVE)
			{
				ts->type = TS_TASK_RESUME;
   18d4e:	697b      	ldr	r3, [r7, #20]
   18d50:	2207      	movs	r2, #7
   18d52:	701a      	strb	r2, [r3, #0]
   18d54:	e002      	b.n	18d5c <prvTraceStoreTaskswitch+0xa8>
			}
			else
			{
				ts->type = TS_TASK_BEGIN;
   18d56:	697b      	ldr	r3, [r7, #20]
   18d58:	2206      	movs	r2, #6
   18d5a:	701a      	strb	r2, [r3, #0]
			}

			ts->dts = dts3;
   18d5c:	697b      	ldr	r3, [r7, #20]
   18d5e:	221a      	movs	r2, #26
   18d60:	18ba      	adds	r2, r7, r2
   18d62:	8812      	ldrh	r2, [r2, #0]
   18d64:	805a      	strh	r2, [r3, #2]
			ts->objHandle = hnd8;
   18d66:	697b      	ldr	r3, [r7, #20]
   18d68:	2219      	movs	r2, #25
   18d6a:	18ba      	adds	r2, r7, r2
   18d6c:	7812      	ldrb	r2, [r2, #0]
   18d6e:	705a      	strb	r2, [r3, #1]

			prvTraceSetObjectState(TRACE_CLASS_TASK,
   18d70:	4b0d      	ldr	r3, [pc, #52]	; (18da8 <prvTraceStoreTaskswitch+0xf4>)
   18d72:	781b      	ldrb	r3, [r3, #0]
   18d74:	2201      	movs	r2, #1
   18d76:	0019      	movs	r1, r3
   18d78:	2003      	movs	r0, #3
   18d7a:	4b12      	ldr	r3, [pc, #72]	; (18dc4 <prvTraceStoreTaskswitch+0x110>)
   18d7c:	4798      	blx	r3
									handle_of_last_logged_task,
									TASK_STATE_INSTANCE_ACTIVE);

			prvTraceUpdateCounters();
   18d7e:	4b12      	ldr	r3, [pc, #72]	; (18dc8 <prvTraceStoreTaskswitch+0x114>)
   18d80:	4798      	blx	r3
		}
	}

	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
   18d82:	4b08      	ldr	r3, [pc, #32]	; (18da4 <prvTraceStoreTaskswitch+0xf0>)
   18d84:	681b      	ldr	r3, [r3, #0]
   18d86:	1e5a      	subs	r2, r3, #1
   18d88:	4b06      	ldr	r3, [pc, #24]	; (18da4 <prvTraceStoreTaskswitch+0xf0>)
   18d8a:	601a      	str	r2, [r3, #0]
   18d8c:	69fb      	ldr	r3, [r7, #28]
   18d8e:	60bb      	str	r3, [r7, #8]
   18d90:	68bb      	ldr	r3, [r7, #8]
   18d92:	f383 8810 	msr	PRIMASK, r3
}
   18d96:	46bd      	mov	sp, r7
   18d98:	b009      	add	sp, #36	; 0x24
   18d9a:	bd90      	pop	{r4, r7, pc}
   18d9c:	00038320 	.word	0x00038320
   18da0:	00019755 	.word	0x00019755
   18da4:	20000b54 	.word	0x20000b54
   18da8:	20000b60 	.word	0x20000b60
   18dac:	20000bfc 	.word	0x20000bfc
   18db0:	20000b40 	.word	0x20000b40
   18db4:	0000ffff 	.word	0x0000ffff
   18db8:	00019969 	.word	0x00019969
   18dbc:	0001930d 	.word	0x0001930d
   18dc0:	00018fb1 	.word	0x00018fb1
   18dc4:	00018f0d 	.word	0x00018f0d
   18dc8:	00019911 	.word	0x00019911

00018dcc <prvTraceSetPriorityProperty>:
		}
	}
}

void prvTraceSetPriorityProperty(uint8_t objectclass, traceHandle id, uint8_t value)
{
   18dcc:	b590      	push	{r4, r7, lr}
   18dce:	b083      	sub	sp, #12
   18dd0:	af00      	add	r7, sp, #0
   18dd2:	0004      	movs	r4, r0
   18dd4:	0008      	movs	r0, r1
   18dd6:	0011      	movs	r1, r2
   18dd8:	1dfb      	adds	r3, r7, #7
   18dda:	1c22      	adds	r2, r4, #0
   18ddc:	701a      	strb	r2, [r3, #0]
   18dde:	1dbb      	adds	r3, r7, #6
   18de0:	1c02      	adds	r2, r0, #0
   18de2:	701a      	strb	r2, [r3, #0]
   18de4:	1d7b      	adds	r3, r7, #5
   18de6:	1c0a      	adds	r2, r1, #0
   18de8:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   18dea:	1dfb      	adds	r3, r7, #7
   18dec:	781b      	ldrb	r3, [r3, #0]
   18dee:	2b08      	cmp	r3, #8
   18df0:	d904      	bls.n	18dfc <prvTraceSetPriorityProperty+0x30>
   18df2:	4b1a      	ldr	r3, [pc, #104]	; (18e5c <prvTraceSetPriorityProperty+0x90>)
   18df4:	0018      	movs	r0, r3
   18df6:	4b1a      	ldr	r3, [pc, #104]	; (18e60 <prvTraceSetPriorityProperty+0x94>)
   18df8:	4798      	blx	r3
   18dfa:	e02c      	b.n	18e56 <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   18dfc:	4b19      	ldr	r3, [pc, #100]	; (18e64 <prvTraceSetPriorityProperty+0x98>)
   18dfe:	681a      	ldr	r2, [r3, #0]
   18e00:	1dfb      	adds	r3, r7, #7
   18e02:	781b      	ldrb	r3, [r3, #0]
   18e04:	2164      	movs	r1, #100	; 0x64
   18e06:	18d3      	adds	r3, r2, r3
   18e08:	185b      	adds	r3, r3, r1
   18e0a:	781b      	ldrb	r3, [r3, #0]
   18e0c:	1dba      	adds	r2, r7, #6
   18e0e:	7812      	ldrb	r2, [r2, #0]
   18e10:	429a      	cmp	r2, r3
   18e12:	d904      	bls.n	18e1e <prvTraceSetPriorityProperty+0x52>
   18e14:	4b14      	ldr	r3, [pc, #80]	; (18e68 <prvTraceSetPriorityProperty+0x9c>)
   18e16:	0018      	movs	r0, r3
   18e18:	4b11      	ldr	r3, [pc, #68]	; (18e60 <prvTraceSetPriorityProperty+0x94>)
   18e1a:	4798      	blx	r3
   18e1c:	e01b      	b.n	18e56 <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
   18e1e:	4b11      	ldr	r3, [pc, #68]	; (18e64 <prvTraceSetPriorityProperty+0x98>)
   18e20:	681c      	ldr	r4, [r3, #0]
   18e22:	1dfb      	adds	r3, r7, #7
   18e24:	781a      	ldrb	r2, [r3, #0]
   18e26:	1dbb      	adds	r3, r7, #6
   18e28:	781b      	ldrb	r3, [r3, #0]
   18e2a:	0011      	movs	r1, r2
   18e2c:	0018      	movs	r0, r3
   18e2e:	4b0f      	ldr	r3, [pc, #60]	; (18e6c <prvTraceSetPriorityProperty+0xa0>)
   18e30:	4798      	blx	r3
   18e32:	0003      	movs	r3, r0
   18e34:	0018      	movs	r0, r3
   18e36:	4b0b      	ldr	r3, [pc, #44]	; (18e64 <prvTraceSetPriorityProperty+0x98>)
   18e38:	681a      	ldr	r2, [r3, #0]
   18e3a:	1dfb      	adds	r3, r7, #7
   18e3c:	781b      	ldrb	r3, [r3, #0]
   18e3e:	2170      	movs	r1, #112	; 0x70
   18e40:	18d3      	adds	r3, r2, r3
   18e42:	185b      	adds	r3, r3, r1
   18e44:	781b      	ldrb	r3, [r3, #0]
   18e46:	18c3      	adds	r3, r0, r3
   18e48:	3301      	adds	r3, #1
   18e4a:	229c      	movs	r2, #156	; 0x9c
   18e4c:	18e3      	adds	r3, r4, r3
   18e4e:	189b      	adds	r3, r3, r2
   18e50:	1d7a      	adds	r2, r7, #5
   18e52:	7812      	ldrb	r2, [r2, #0]
   18e54:	701a      	strb	r2, [r3, #0]
}
   18e56:	46bd      	mov	sp, r7
   18e58:	b003      	add	sp, #12
   18e5a:	bd90      	pop	{r4, r7, pc}
   18e5c:	000384b4 	.word	0x000384b4
   18e60:	00019755 	.word	0x00019755
   18e64:	20000bfc 	.word	0x20000bfc
   18e68:	00038500 	.word	0x00038500
   18e6c:	00019361 	.word	0x00019361

00018e70 <prvTraceGetPriorityProperty>:

uint8_t prvTraceGetPriorityProperty(uint8_t objectclass, traceHandle id)
{
   18e70:	b590      	push	{r4, r7, lr}
   18e72:	b083      	sub	sp, #12
   18e74:	af00      	add	r7, sp, #0
   18e76:	0002      	movs	r2, r0
   18e78:	1dfb      	adds	r3, r7, #7
   18e7a:	701a      	strb	r2, [r3, #0]
   18e7c:	1dbb      	adds	r3, r7, #6
   18e7e:	1c0a      	adds	r2, r1, #0
   18e80:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   18e82:	1dfb      	adds	r3, r7, #7
   18e84:	781b      	ldrb	r3, [r3, #0]
   18e86:	2b08      	cmp	r3, #8
   18e88:	d905      	bls.n	18e96 <prvTraceGetPriorityProperty+0x26>
   18e8a:	4b1b      	ldr	r3, [pc, #108]	; (18ef8 <prvTraceGetPriorityProperty+0x88>)
   18e8c:	0018      	movs	r0, r3
   18e8e:	4b1b      	ldr	r3, [pc, #108]	; (18efc <prvTraceGetPriorityProperty+0x8c>)
   18e90:	4798      	blx	r3
   18e92:	2300      	movs	r3, #0
   18e94:	e02b      	b.n	18eee <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   18e96:	4b1a      	ldr	r3, [pc, #104]	; (18f00 <prvTraceGetPriorityProperty+0x90>)
   18e98:	681a      	ldr	r2, [r3, #0]
   18e9a:	1dfb      	adds	r3, r7, #7
   18e9c:	781b      	ldrb	r3, [r3, #0]
   18e9e:	2164      	movs	r1, #100	; 0x64
   18ea0:	18d3      	adds	r3, r2, r3
   18ea2:	185b      	adds	r3, r3, r1
   18ea4:	781b      	ldrb	r3, [r3, #0]
   18ea6:	1dba      	adds	r2, r7, #6
   18ea8:	7812      	ldrb	r2, [r2, #0]
   18eaa:	429a      	cmp	r2, r3
   18eac:	d905      	bls.n	18eba <prvTraceGetPriorityProperty+0x4a>
   18eae:	4b15      	ldr	r3, [pc, #84]	; (18f04 <prvTraceGetPriorityProperty+0x94>)
   18eb0:	0018      	movs	r0, r3
   18eb2:	4b12      	ldr	r3, [pc, #72]	; (18efc <prvTraceGetPriorityProperty+0x8c>)
   18eb4:	4798      	blx	r3
   18eb6:	2300      	movs	r3, #0
   18eb8:	e019      	b.n	18eee <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: Invalid value for id", 0);

	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
   18eba:	4b11      	ldr	r3, [pc, #68]	; (18f00 <prvTraceGetPriorityProperty+0x90>)
   18ebc:	681c      	ldr	r4, [r3, #0]
   18ebe:	1dfb      	adds	r3, r7, #7
   18ec0:	781a      	ldrb	r2, [r3, #0]
   18ec2:	1dbb      	adds	r3, r7, #6
   18ec4:	781b      	ldrb	r3, [r3, #0]
   18ec6:	0011      	movs	r1, r2
   18ec8:	0018      	movs	r0, r3
   18eca:	4b0f      	ldr	r3, [pc, #60]	; (18f08 <prvTraceGetPriorityProperty+0x98>)
   18ecc:	4798      	blx	r3
   18ece:	0003      	movs	r3, r0
   18ed0:	0018      	movs	r0, r3
   18ed2:	4b0b      	ldr	r3, [pc, #44]	; (18f00 <prvTraceGetPriorityProperty+0x90>)
   18ed4:	681a      	ldr	r2, [r3, #0]
   18ed6:	1dfb      	adds	r3, r7, #7
   18ed8:	781b      	ldrb	r3, [r3, #0]
   18eda:	2170      	movs	r1, #112	; 0x70
   18edc:	18d3      	adds	r3, r2, r3
   18ede:	185b      	adds	r3, r3, r1
   18ee0:	781b      	ldrb	r3, [r3, #0]
   18ee2:	18c3      	adds	r3, r0, r3
   18ee4:	3301      	adds	r3, #1
   18ee6:	229c      	movs	r2, #156	; 0x9c
   18ee8:	18e3      	adds	r3, r4, r3
   18eea:	189b      	adds	r3, r3, r2
   18eec:	781b      	ldrb	r3, [r3, #0]
}
   18eee:	0018      	movs	r0, r3
   18ef0:	46bd      	mov	sp, r7
   18ef2:	b003      	add	sp, #12
   18ef4:	bd90      	pop	{r4, r7, pc}
   18ef6:	46c0      	nop			; (mov r8, r8)
   18ef8:	00038540 	.word	0x00038540
   18efc:	00019755 	.word	0x00019755
   18f00:	20000bfc 	.word	0x20000bfc
   18f04:	0003858c 	.word	0x0003858c
   18f08:	00019361 	.word	0x00019361

00018f0c <prvTraceSetObjectState>:

void prvTraceSetObjectState(uint8_t objectclass, traceHandle id, uint8_t value)
{
   18f0c:	b590      	push	{r4, r7, lr}
   18f0e:	b083      	sub	sp, #12
   18f10:	af00      	add	r7, sp, #0
   18f12:	0004      	movs	r4, r0
   18f14:	0008      	movs	r0, r1
   18f16:	0011      	movs	r1, r2
   18f18:	1dfb      	adds	r3, r7, #7
   18f1a:	1c22      	adds	r2, r4, #0
   18f1c:	701a      	strb	r2, [r3, #0]
   18f1e:	1dbb      	adds	r3, r7, #6
   18f20:	1c02      	adds	r2, r0, #0
   18f22:	701a      	strb	r2, [r3, #0]
   18f24:	1d7b      	adds	r3, r7, #5
   18f26:	1c0a      	adds	r2, r1, #0
   18f28:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   18f2a:	1dfb      	adds	r3, r7, #7
   18f2c:	781b      	ldrb	r3, [r3, #0]
   18f2e:	2b08      	cmp	r3, #8
   18f30:	d904      	bls.n	18f3c <prvTraceSetObjectState+0x30>
   18f32:	4b1a      	ldr	r3, [pc, #104]	; (18f9c <prvTraceSetObjectState+0x90>)
   18f34:	0018      	movs	r0, r3
   18f36:	4b1a      	ldr	r3, [pc, #104]	; (18fa0 <prvTraceSetObjectState+0x94>)
   18f38:	4798      	blx	r3
   18f3a:	e02b      	b.n	18f94 <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   18f3c:	4b19      	ldr	r3, [pc, #100]	; (18fa4 <prvTraceSetObjectState+0x98>)
   18f3e:	681a      	ldr	r2, [r3, #0]
   18f40:	1dfb      	adds	r3, r7, #7
   18f42:	781b      	ldrb	r3, [r3, #0]
   18f44:	2164      	movs	r1, #100	; 0x64
   18f46:	18d3      	adds	r3, r2, r3
   18f48:	185b      	adds	r3, r3, r1
   18f4a:	781b      	ldrb	r3, [r3, #0]
   18f4c:	1dba      	adds	r2, r7, #6
   18f4e:	7812      	ldrb	r2, [r2, #0]
   18f50:	429a      	cmp	r2, r3
   18f52:	d904      	bls.n	18f5e <prvTraceSetObjectState+0x52>
   18f54:	4b14      	ldr	r3, [pc, #80]	; (18fa8 <prvTraceSetObjectState+0x9c>)
   18f56:	0018      	movs	r0, r3
   18f58:	4b11      	ldr	r3, [pc, #68]	; (18fa0 <prvTraceSetObjectState+0x94>)
   18f5a:	4798      	blx	r3
   18f5c:	e01a      	b.n	18f94 <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
   18f5e:	4b11      	ldr	r3, [pc, #68]	; (18fa4 <prvTraceSetObjectState+0x98>)
   18f60:	681c      	ldr	r4, [r3, #0]
   18f62:	1dfb      	adds	r3, r7, #7
   18f64:	781a      	ldrb	r2, [r3, #0]
   18f66:	1dbb      	adds	r3, r7, #6
   18f68:	781b      	ldrb	r3, [r3, #0]
   18f6a:	0011      	movs	r1, r2
   18f6c:	0018      	movs	r0, r3
   18f6e:	4b0f      	ldr	r3, [pc, #60]	; (18fac <prvTraceSetObjectState+0xa0>)
   18f70:	4798      	blx	r3
   18f72:	0003      	movs	r3, r0
   18f74:	0018      	movs	r0, r3
   18f76:	4b0b      	ldr	r3, [pc, #44]	; (18fa4 <prvTraceSetObjectState+0x98>)
   18f78:	681a      	ldr	r2, [r3, #0]
   18f7a:	1dfb      	adds	r3, r7, #7
   18f7c:	781b      	ldrb	r3, [r3, #0]
   18f7e:	2170      	movs	r1, #112	; 0x70
   18f80:	18d3      	adds	r3, r2, r3
   18f82:	185b      	adds	r3, r3, r1
   18f84:	781b      	ldrb	r3, [r3, #0]
   18f86:	18c3      	adds	r3, r0, r3
   18f88:	229c      	movs	r2, #156	; 0x9c
   18f8a:	18e3      	adds	r3, r4, r3
   18f8c:	189b      	adds	r3, r3, r2
   18f8e:	1d7a      	adds	r2, r7, #5
   18f90:	7812      	ldrb	r2, [r2, #0]
   18f92:	701a      	strb	r2, [r3, #0]
}
   18f94:	46bd      	mov	sp, r7
   18f96:	b003      	add	sp, #12
   18f98:	bd90      	pop	{r4, r7, pc}
   18f9a:	46c0      	nop			; (mov r8, r8)
   18f9c:	000385cc 	.word	0x000385cc
   18fa0:	00019755 	.word	0x00019755
   18fa4:	20000bfc 	.word	0x20000bfc
   18fa8:	00038610 	.word	0x00038610
   18fac:	00019361 	.word	0x00019361

00018fb0 <prvTraceGetObjectState>:

uint8_t prvTraceGetObjectState(uint8_t objectclass, traceHandle id)
{
   18fb0:	b590      	push	{r4, r7, lr}
   18fb2:	b083      	sub	sp, #12
   18fb4:	af00      	add	r7, sp, #0
   18fb6:	0002      	movs	r2, r0
   18fb8:	1dfb      	adds	r3, r7, #7
   18fba:	701a      	strb	r2, [r3, #0]
   18fbc:	1dbb      	adds	r3, r7, #6
   18fbe:	1c0a      	adds	r2, r1, #0
   18fc0:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   18fc2:	1dfb      	adds	r3, r7, #7
   18fc4:	781b      	ldrb	r3, [r3, #0]
   18fc6:	2b08      	cmp	r3, #8
   18fc8:	d905      	bls.n	18fd6 <prvTraceGetObjectState+0x26>
   18fca:	4b1a      	ldr	r3, [pc, #104]	; (19034 <prvTraceGetObjectState+0x84>)
   18fcc:	0018      	movs	r0, r3
   18fce:	4b1a      	ldr	r3, [pc, #104]	; (19038 <prvTraceGetObjectState+0x88>)
   18fd0:	4798      	blx	r3
   18fd2:	2300      	movs	r3, #0
   18fd4:	e02a      	b.n	1902c <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   18fd6:	4b19      	ldr	r3, [pc, #100]	; (1903c <prvTraceGetObjectState+0x8c>)
   18fd8:	681a      	ldr	r2, [r3, #0]
   18fda:	1dfb      	adds	r3, r7, #7
   18fdc:	781b      	ldrb	r3, [r3, #0]
   18fde:	2164      	movs	r1, #100	; 0x64
   18fe0:	18d3      	adds	r3, r2, r3
   18fe2:	185b      	adds	r3, r3, r1
   18fe4:	781b      	ldrb	r3, [r3, #0]
   18fe6:	1dba      	adds	r2, r7, #6
   18fe8:	7812      	ldrb	r2, [r2, #0]
   18fea:	429a      	cmp	r2, r3
   18fec:	d905      	bls.n	18ffa <prvTraceGetObjectState+0x4a>
   18fee:	4b14      	ldr	r3, [pc, #80]	; (19040 <prvTraceGetObjectState+0x90>)
   18ff0:	0018      	movs	r0, r3
   18ff2:	4b11      	ldr	r3, [pc, #68]	; (19038 <prvTraceGetObjectState+0x88>)
   18ff4:	4798      	blx	r3
   18ff6:	2300      	movs	r3, #0
   18ff8:	e018      	b.n	1902c <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: Invalid value for id", 0);

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
   18ffa:	4b10      	ldr	r3, [pc, #64]	; (1903c <prvTraceGetObjectState+0x8c>)
   18ffc:	681c      	ldr	r4, [r3, #0]
   18ffe:	1dfb      	adds	r3, r7, #7
   19000:	781a      	ldrb	r2, [r3, #0]
   19002:	1dbb      	adds	r3, r7, #6
   19004:	781b      	ldrb	r3, [r3, #0]
   19006:	0011      	movs	r1, r2
   19008:	0018      	movs	r0, r3
   1900a:	4b0e      	ldr	r3, [pc, #56]	; (19044 <prvTraceGetObjectState+0x94>)
   1900c:	4798      	blx	r3
   1900e:	0003      	movs	r3, r0
   19010:	0018      	movs	r0, r3
   19012:	4b0a      	ldr	r3, [pc, #40]	; (1903c <prvTraceGetObjectState+0x8c>)
   19014:	681a      	ldr	r2, [r3, #0]
   19016:	1dfb      	adds	r3, r7, #7
   19018:	781b      	ldrb	r3, [r3, #0]
   1901a:	2170      	movs	r1, #112	; 0x70
   1901c:	18d3      	adds	r3, r2, r3
   1901e:	185b      	adds	r3, r3, r1
   19020:	781b      	ldrb	r3, [r3, #0]
   19022:	18c3      	adds	r3, r0, r3
   19024:	229c      	movs	r2, #156	; 0x9c
   19026:	18e3      	adds	r3, r4, r3
   19028:	189b      	adds	r3, r3, r2
   1902a:	781b      	ldrb	r3, [r3, #0]
}
   1902c:	0018      	movs	r0, r3
   1902e:	46bd      	mov	sp, r7
   19030:	b003      	add	sp, #12
   19032:	bd90      	pop	{r4, r7, pc}
   19034:	0003864c 	.word	0x0003864c
   19038:	00019755 	.word	0x00019755
   1903c:	20000bfc 	.word	0x20000bfc
   19040:	00038690 	.word	0x00038690
   19044:	00019361 	.word	0x00019361

00019048 <prvTraceSetTaskInstanceFinished>:

void prvTraceSetTaskInstanceFinished(traceHandle handle)
{
   19048:	b590      	push	{r4, r7, lr}
   1904a:	b083      	sub	sp, #12
   1904c:	af00      	add	r7, sp, #0
   1904e:	0002      	movs	r2, r0
   19050:	1dfb      	adds	r3, r7, #7
   19052:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
   19054:	4b11      	ldr	r3, [pc, #68]	; (1909c <prvTraceSetTaskInstanceFinished+0x54>)
   19056:	681b      	ldr	r3, [r3, #0]
   19058:	2267      	movs	r2, #103	; 0x67
   1905a:	5c9b      	ldrb	r3, [r3, r2]
   1905c:	1dfa      	adds	r2, r7, #7
   1905e:	7812      	ldrb	r2, [r2, #0]
   19060:	429a      	cmp	r2, r3
   19062:	d904      	bls.n	1906e <prvTraceSetTaskInstanceFinished+0x26>
   19064:	4b0e      	ldr	r3, [pc, #56]	; (190a0 <prvTraceSetTaskInstanceFinished+0x58>)
   19066:	0018      	movs	r0, r3
   19068:	4b0e      	ldr	r3, [pc, #56]	; (190a4 <prvTraceSetTaskInstanceFinished+0x5c>)
   1906a:	4798      	blx	r3
   1906c:	e013      	b.n	19096 <prvTraceSetTaskInstanceFinished+0x4e>
		"prvTraceSetTaskInstanceFinished: Invalid value for handle", TRC_UNUSED);

#if (TRC_CFG_USE_IMPLICIT_IFE_RULES == 1)
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
   1906e:	4b0b      	ldr	r3, [pc, #44]	; (1909c <prvTraceSetTaskInstanceFinished+0x54>)
   19070:	681c      	ldr	r4, [r3, #0]
   19072:	1dfb      	adds	r3, r7, #7
   19074:	781b      	ldrb	r3, [r3, #0]
   19076:	2103      	movs	r1, #3
   19078:	0018      	movs	r0, r3
   1907a:	4b0b      	ldr	r3, [pc, #44]	; (190a8 <prvTraceSetTaskInstanceFinished+0x60>)
   1907c:	4798      	blx	r3
   1907e:	0003      	movs	r3, r0
   19080:	0019      	movs	r1, r3
   19082:	4b06      	ldr	r3, [pc, #24]	; (1909c <prvTraceSetTaskInstanceFinished+0x54>)
   19084:	681b      	ldr	r3, [r3, #0]
   19086:	2273      	movs	r2, #115	; 0x73
   19088:	5c9b      	ldrb	r3, [r3, r2]
   1908a:	18cb      	adds	r3, r1, r3
   1908c:	229c      	movs	r2, #156	; 0x9c
   1908e:	18e3      	adds	r3, r4, r3
   19090:	189b      	adds	r3, r3, r2
   19092:	2200      	movs	r2, #0
   19094:	701a      	strb	r2, [r3, #0]
#endif
}
   19096:	46bd      	mov	sp, r7
   19098:	b003      	add	sp, #12
   1909a:	bd90      	pop	{r4, r7, pc}
   1909c:	20000bfc 	.word	0x20000bfc
   190a0:	000386cc 	.word	0x000386cc
   190a4:	00019755 	.word	0x00019755
   190a8:	00019361 	.word	0x00019361

000190ac <prvTraceInitTraceData>:
 ******************************************************************************/
RecorderDataType* RecorderDataPtr = NULL;

/* This version of the function dynamically allocates the trace data */
void prvTraceInitTraceData()
{	
   190ac:	b580      	push	{r7, lr}
   190ae:	af00      	add	r7, sp, #0
	
	if (RecorderDataPtr == NULL)
   190b0:	4b75      	ldr	r3, [pc, #468]	; (19288 <prvTraceInitTraceData+0x1dc>)
   190b2:	681b      	ldr	r3, [r3, #0]
   190b4:	2b00      	cmp	r3, #0
   190b6:	d103      	bne.n	190c0 <prvTraceInitTraceData+0x14>
	{
#if (TRC_CFG_RECORDER_BUFFER_ALLOCATION == TRC_RECORDER_BUFFER_ALLOCATION_STATIC)
	RecorderDataPtr = &RecorderData;
   190b8:	4b73      	ldr	r3, [pc, #460]	; (19288 <prvTraceInitTraceData+0x1dc>)
   190ba:	4a74      	ldr	r2, [pc, #464]	; (1928c <prvTraceInitTraceData+0x1e0>)
   190bc:	601a      	str	r2, [r3, #0]
   190be:	e006      	b.n	190ce <prvTraceInitTraceData+0x22>
		}
#endif
	}
	else
	{
		if (RecorderDataPtr->startmarker0 == 1)
   190c0:	4b71      	ldr	r3, [pc, #452]	; (19288 <prvTraceInitTraceData+0x1dc>)
   190c2:	681b      	ldr	r3, [r3, #0]
   190c4:	781b      	ldrb	r3, [r3, #0]
   190c6:	b2db      	uxtb	r3, r3
   190c8:	2b01      	cmp	r3, #1
   190ca:	d100      	bne.n	190ce <prvTraceInitTraceData+0x22>
   190cc:	e0d8      	b.n	19280 <prvTraceInitTraceData+0x1d4>
			/* Already initialized */
			return;
		}
	}
	
	init_hwtc_count = TRC_HWTC_COUNT;
   190ce:	4b70      	ldr	r3, [pc, #448]	; (19290 <prvTraceInitTraceData+0x1e4>)
   190d0:	681a      	ldr	r2, [r3, #0]
   190d2:	4b70      	ldr	r3, [pc, #448]	; (19294 <prvTraceInitTraceData+0x1e8>)
   190d4:	601a      	str	r2, [r3, #0]
		
	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
   190d6:	4b6c      	ldr	r3, [pc, #432]	; (19288 <prvTraceInitTraceData+0x1dc>)
   190d8:	6818      	ldr	r0, [r3, #0]
   190da:	23bd      	movs	r3, #189	; 0xbd
   190dc:	011b      	lsls	r3, r3, #4
   190de:	001a      	movs	r2, r3
   190e0:	2100      	movs	r1, #0
   190e2:	4b6d      	ldr	r3, [pc, #436]	; (19298 <prvTraceInitTraceData+0x1ec>)
   190e4:	4798      	blx	r3
	
	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
   190e6:	4b68      	ldr	r3, [pc, #416]	; (19288 <prvTraceInitTraceData+0x1dc>)
   190e8:	681b      	ldr	r3, [r3, #0]
   190ea:	4a6c      	ldr	r2, [pc, #432]	; (1929c <prvTraceInitTraceData+0x1f0>)
   190ec:	819a      	strh	r2, [r3, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
   190ee:	4b66      	ldr	r3, [pc, #408]	; (19288 <prvTraceInitTraceData+0x1dc>)
   190f0:	681b      	ldr	r3, [r3, #0]
   190f2:	2205      	movs	r2, #5
   190f4:	739a      	strb	r2, [r3, #14]
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
   190f6:	4b64      	ldr	r3, [pc, #400]	; (19288 <prvTraceInitTraceData+0x1dc>)
   190f8:	681b      	ldr	r3, [r3, #0]
   190fa:	2200      	movs	r2, #0
   190fc:	73da      	strb	r2, [r3, #15]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
   190fe:	4b62      	ldr	r3, [pc, #392]	; (19288 <prvTraceInitTraceData+0x1dc>)
   19100:	681b      	ldr	r3, [r3, #0]
   19102:	22bd      	movs	r2, #189	; 0xbd
   19104:	0112      	lsls	r2, r2, #4
   19106:	611a      	str	r2, [r3, #16]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
   19108:	4b5f      	ldr	r3, [pc, #380]	; (19288 <prvTraceInitTraceData+0x1dc>)
   1910a:	681b      	ldr	r3, [r3, #0]
   1910c:	2296      	movs	r2, #150	; 0x96
   1910e:	0052      	lsls	r2, r2, #1
   19110:	619a      	str	r2, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t) 0xF0F0F0F0;
   19112:	4b5d      	ldr	r3, [pc, #372]	; (19288 <prvTraceInitTraceData+0x1dc>)
   19114:	681b      	ldr	r3, [r3, #0]
   19116:	4a62      	ldr	r2, [pc, #392]	; (192a0 <prvTraceInitTraceData+0x1f4>)
   19118:	655a      	str	r2, [r3, #84]	; 0x54
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
   1911a:	4b5b      	ldr	r3, [pc, #364]	; (19288 <prvTraceInitTraceData+0x1dc>)
   1911c:	681b      	ldr	r3, [r3, #0]
   1911e:	2200      	movs	r2, #0
   19120:	659a      	str	r2, [r3, #88]	; 0x58
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
   19122:	4b59      	ldr	r3, [pc, #356]	; (19288 <prvTraceInitTraceData+0x1dc>)
   19124:	681b      	ldr	r3, [r3, #0]
   19126:	2200      	movs	r2, #0
   19128:	635a      	str	r2, [r3, #52]	; 0x34

	/* This function is kernel specific */
	vTraceInitObjectPropertyTable();
   1912a:	4b5e      	ldr	r3, [pc, #376]	; (192a4 <prvTraceInitTraceData+0x1f8>)
   1912c:	4798      	blx	r3

	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
   1912e:	4b56      	ldr	r3, [pc, #344]	; (19288 <prvTraceInitTraceData+0x1dc>)
   19130:	681b      	ldr	r3, [r3, #0]
   19132:	4a5d      	ldr	r2, [pc, #372]	; (192a8 <prvTraceInitTraceData+0x1fc>)
   19134:	495d      	ldr	r1, [pc, #372]	; (192ac <prvTraceInitTraceData+0x200>)
   19136:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
   19138:	4b53      	ldr	r3, [pc, #332]	; (19288 <prvTraceInitTraceData+0x1dc>)
   1913a:	681a      	ldr	r2, [r3, #0]
   1913c:	23ac      	movs	r3, #172	; 0xac
   1913e:	00db      	lsls	r3, r3, #3
   19140:	21c8      	movs	r1, #200	; 0xc8
   19142:	50d1      	str	r1, [r2, r3]
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
   19144:	4b50      	ldr	r3, [pc, #320]	; (19288 <prvTraceInitTraceData+0x1dc>)
   19146:	681b      	ldr	r3, [r3, #0]
   19148:	4a59      	ldr	r2, [pc, #356]	; (192b0 <prvTraceInitTraceData+0x204>)
   1914a:	2101      	movs	r1, #1
   1914c:	5099      	str	r1, [r3, r2]
#if (TRC_CFG_INCLUDE_FLOAT_SUPPORT == 1)
	RecorderDataPtr->exampleFloatEncoding = 1.0f; /* otherwise already zero */
#endif
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
   1914e:	4b4e      	ldr	r3, [pc, #312]	; (19288 <prvTraceInitTraceData+0x1dc>)
   19150:	681a      	ldr	r2, [r3, #0]
   19152:	23d7      	movs	r3, #215	; 0xd7
   19154:	00db      	lsls	r3, r3, #3
   19156:	4957      	ldr	r1, [pc, #348]	; (192b4 <prvTraceInitTraceData+0x208>)
   19158:	50d1      	str	r1, [r2, r3]
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
   1915a:	4b4b      	ldr	r3, [pc, #300]	; (19288 <prvTraceInitTraceData+0x1dc>)
   1915c:	681b      	ldr	r3, [r3, #0]
   1915e:	4a56      	ldr	r2, [pc, #344]	; (192b8 <prvTraceInitTraceData+0x20c>)
   19160:	4694      	mov	ip, r2
   19162:	4463      	add	r3, ip
   19164:	4955      	ldr	r1, [pc, #340]	; (192bc <prvTraceInitTraceData+0x210>)
   19166:	2250      	movs	r2, #80	; 0x50
   19168:	0018      	movs	r0, r3
   1916a:	4b55      	ldr	r3, [pc, #340]	; (192c0 <prvTraceInitTraceData+0x214>)
   1916c:	4798      	blx	r3
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
   1916e:	4b46      	ldr	r3, [pc, #280]	; (19288 <prvTraceInitTraceData+0x1dc>)
   19170:	681b      	ldr	r3, [r3, #0]
   19172:	4a54      	ldr	r2, [pc, #336]	; (192c4 <prvTraceInitTraceData+0x218>)
   19174:	4954      	ldr	r1, [pc, #336]	; (192c8 <prvTraceInitTraceData+0x21c>)
   19176:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->endmarker0 = 0x0A;
   19178:	4b43      	ldr	r3, [pc, #268]	; (19288 <prvTraceInitTraceData+0x1dc>)
   1917a:	681b      	ldr	r3, [r3, #0]
   1917c:	4a53      	ldr	r2, [pc, #332]	; (192cc <prvTraceInitTraceData+0x220>)
   1917e:	210a      	movs	r1, #10
   19180:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker1 = 0x0B;
   19182:	4b41      	ldr	r3, [pc, #260]	; (19288 <prvTraceInitTraceData+0x1dc>)
   19184:	681b      	ldr	r3, [r3, #0]
   19186:	4a52      	ldr	r2, [pc, #328]	; (192d0 <prvTraceInitTraceData+0x224>)
   19188:	210b      	movs	r1, #11
   1918a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker2 = 0x0C;
   1918c:	4b3e      	ldr	r3, [pc, #248]	; (19288 <prvTraceInitTraceData+0x1dc>)
   1918e:	681b      	ldr	r3, [r3, #0]
   19190:	4a50      	ldr	r2, [pc, #320]	; (192d4 <prvTraceInitTraceData+0x228>)
   19192:	210c      	movs	r1, #12
   19194:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker3 = 0x0D;
   19196:	4b3c      	ldr	r3, [pc, #240]	; (19288 <prvTraceInitTraceData+0x1dc>)
   19198:	681b      	ldr	r3, [r3, #0]
   1919a:	4a4f      	ldr	r2, [pc, #316]	; (192d8 <prvTraceInitTraceData+0x22c>)
   1919c:	210d      	movs	r1, #13
   1919e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker4 = 0x71;
   191a0:	4b39      	ldr	r3, [pc, #228]	; (19288 <prvTraceInitTraceData+0x1dc>)
   191a2:	681b      	ldr	r3, [r3, #0]
   191a4:	4a4d      	ldr	r2, [pc, #308]	; (192dc <prvTraceInitTraceData+0x230>)
   191a6:	2171      	movs	r1, #113	; 0x71
   191a8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker5 = 0x72;
   191aa:	4b37      	ldr	r3, [pc, #220]	; (19288 <prvTraceInitTraceData+0x1dc>)
   191ac:	681b      	ldr	r3, [r3, #0]
   191ae:	4a4c      	ldr	r2, [pc, #304]	; (192e0 <prvTraceInitTraceData+0x234>)
   191b0:	2172      	movs	r1, #114	; 0x72
   191b2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker6 = 0x73;
   191b4:	4b34      	ldr	r3, [pc, #208]	; (19288 <prvTraceInitTraceData+0x1dc>)
   191b6:	681b      	ldr	r3, [r3, #0]
   191b8:	4a4a      	ldr	r2, [pc, #296]	; (192e4 <prvTraceInitTraceData+0x238>)
   191ba:	2173      	movs	r1, #115	; 0x73
   191bc:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker7 = 0x74;
   191be:	4b32      	ldr	r3, [pc, #200]	; (19288 <prvTraceInitTraceData+0x1dc>)
   191c0:	681b      	ldr	r3, [r3, #0]
   191c2:	4a49      	ldr	r2, [pc, #292]	; (192e8 <prvTraceInitTraceData+0x23c>)
   191c4:	2174      	movs	r1, #116	; 0x74
   191c6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker8 = 0xF1;
   191c8:	4b2f      	ldr	r3, [pc, #188]	; (19288 <prvTraceInitTraceData+0x1dc>)
   191ca:	681b      	ldr	r3, [r3, #0]
   191cc:	4a47      	ldr	r2, [pc, #284]	; (192ec <prvTraceInitTraceData+0x240>)
   191ce:	21f1      	movs	r1, #241	; 0xf1
   191d0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker9 = 0xF2;
   191d2:	4b2d      	ldr	r3, [pc, #180]	; (19288 <prvTraceInitTraceData+0x1dc>)
   191d4:	681b      	ldr	r3, [r3, #0]
   191d6:	4a46      	ldr	r2, [pc, #280]	; (192f0 <prvTraceInitTraceData+0x244>)
   191d8:	21f2      	movs	r1, #242	; 0xf2
   191da:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker10 = 0xF3;
   191dc:	4b2a      	ldr	r3, [pc, #168]	; (19288 <prvTraceInitTraceData+0x1dc>)
   191de:	681b      	ldr	r3, [r3, #0]
   191e0:	4a44      	ldr	r2, [pc, #272]	; (192f4 <prvTraceInitTraceData+0x248>)
   191e2:	21f3      	movs	r1, #243	; 0xf3
   191e4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker11 = 0xF4;
   191e6:	4b28      	ldr	r3, [pc, #160]	; (19288 <prvTraceInitTraceData+0x1dc>)
   191e8:	681b      	ldr	r3, [r3, #0]
   191ea:	4a43      	ldr	r2, [pc, #268]	; (192f8 <prvTraceInitTraceData+0x24c>)
   191ec:	21f4      	movs	r1, #244	; 0xf4
   191ee:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->userEventBuffer.numberOfSlots = (TRC_CFG_SEPARATE_USER_EVENT_BUFFER_SIZE);
	RecorderDataPtr->userEventBuffer.numberOfChannels = (TRC_CFG_UB_CHANNELS) + 1;
#endif

	/* Kernel specific initialization of the objectHandleStacks variable */
	vTraceInitObjectHandleStack();
   191f0:	4b42      	ldr	r3, [pc, #264]	; (192fc <prvTraceInitTraceData+0x250>)
   191f2:	4798      	blx	r3
	and the fields are volatile to ensure this assignment order. This to avoid any 
	chance of accidental duplicates of this elsewhere in memory.
	
	Moreover, the fields are set byte-by-byte to avoid endian issues.*/
	
	RecorderDataPtr->startmarker11 = 0xF4;
   191f4:	4b24      	ldr	r3, [pc, #144]	; (19288 <prvTraceInitTraceData+0x1dc>)
   191f6:	681b      	ldr	r3, [r3, #0]
   191f8:	22f4      	movs	r2, #244	; 0xf4
   191fa:	72da      	strb	r2, [r3, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
   191fc:	4b22      	ldr	r3, [pc, #136]	; (19288 <prvTraceInitTraceData+0x1dc>)
   191fe:	681b      	ldr	r3, [r3, #0]
   19200:	22f3      	movs	r2, #243	; 0xf3
   19202:	729a      	strb	r2, [r3, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
   19204:	4b20      	ldr	r3, [pc, #128]	; (19288 <prvTraceInitTraceData+0x1dc>)
   19206:	681b      	ldr	r3, [r3, #0]
   19208:	22f2      	movs	r2, #242	; 0xf2
   1920a:	725a      	strb	r2, [r3, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
   1920c:	4b1e      	ldr	r3, [pc, #120]	; (19288 <prvTraceInitTraceData+0x1dc>)
   1920e:	681b      	ldr	r3, [r3, #0]
   19210:	22f1      	movs	r2, #241	; 0xf1
   19212:	721a      	strb	r2, [r3, #8]
	RecorderDataPtr->startmarker7 = 0x74;
   19214:	4b1c      	ldr	r3, [pc, #112]	; (19288 <prvTraceInitTraceData+0x1dc>)
   19216:	681b      	ldr	r3, [r3, #0]
   19218:	2274      	movs	r2, #116	; 0x74
   1921a:	71da      	strb	r2, [r3, #7]
	RecorderDataPtr->startmarker6 = 0x73;
   1921c:	4b1a      	ldr	r3, [pc, #104]	; (19288 <prvTraceInitTraceData+0x1dc>)
   1921e:	681b      	ldr	r3, [r3, #0]
   19220:	2273      	movs	r2, #115	; 0x73
   19222:	719a      	strb	r2, [r3, #6]
	RecorderDataPtr->startmarker5 = 0x72;
   19224:	4b18      	ldr	r3, [pc, #96]	; (19288 <prvTraceInitTraceData+0x1dc>)
   19226:	681b      	ldr	r3, [r3, #0]
   19228:	2272      	movs	r2, #114	; 0x72
   1922a:	715a      	strb	r2, [r3, #5]
	RecorderDataPtr->startmarker4 = 0x71;
   1922c:	4b16      	ldr	r3, [pc, #88]	; (19288 <prvTraceInitTraceData+0x1dc>)
   1922e:	681b      	ldr	r3, [r3, #0]
   19230:	2271      	movs	r2, #113	; 0x71
   19232:	711a      	strb	r2, [r3, #4]
	RecorderDataPtr->startmarker3 = 0x04;
   19234:	4b14      	ldr	r3, [pc, #80]	; (19288 <prvTraceInitTraceData+0x1dc>)
   19236:	681b      	ldr	r3, [r3, #0]
   19238:	2204      	movs	r2, #4
   1923a:	70da      	strb	r2, [r3, #3]
	RecorderDataPtr->startmarker2 = 0x03;
   1923c:	4b12      	ldr	r3, [pc, #72]	; (19288 <prvTraceInitTraceData+0x1dc>)
   1923e:	681b      	ldr	r3, [r3, #0]
   19240:	2203      	movs	r2, #3
   19242:	709a      	strb	r2, [r3, #2]
	RecorderDataPtr->startmarker1 = 0x02;	
   19244:	4b10      	ldr	r3, [pc, #64]	; (19288 <prvTraceInitTraceData+0x1dc>)
   19246:	681b      	ldr	r3, [r3, #0]
   19248:	2202      	movs	r2, #2
   1924a:	705a      	strb	r2, [r3, #1]
	RecorderDataPtr->startmarker0 = 0x01; 
   1924c:	4b0e      	ldr	r3, [pc, #56]	; (19288 <prvTraceInitTraceData+0x1dc>)
   1924e:	681b      	ldr	r3, [r3, #0]
   19250:	2201      	movs	r2, #1
   19252:	701a      	strb	r2, [r3, #0]

	if (traceErrorMessage != NULL)
   19254:	4b2a      	ldr	r3, [pc, #168]	; (19300 <prvTraceInitTraceData+0x254>)
   19256:	681b      	ldr	r3, [r3, #0]
   19258:	2b00      	cmp	r3, #0
   1925a:	d012      	beq.n	19282 <prvTraceInitTraceData+0x1d6>
	{
		// An error was detected before vTraceEnable was called, make sure this is stored in the trace data.
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   1925c:	4b0a      	ldr	r3, [pc, #40]	; (19288 <prvTraceInitTraceData+0x1dc>)
   1925e:	681b      	ldr	r3, [r3, #0]
   19260:	4a15      	ldr	r2, [pc, #84]	; (192b8 <prvTraceInitTraceData+0x20c>)
   19262:	1898      	adds	r0, r3, r2
   19264:	4b26      	ldr	r3, [pc, #152]	; (19300 <prvTraceInitTraceData+0x254>)
   19266:	681b      	ldr	r3, [r3, #0]
   19268:	2250      	movs	r2, #80	; 0x50
   1926a:	0019      	movs	r1, r3
   1926c:	4b14      	ldr	r3, [pc, #80]	; (192c0 <prvTraceInitTraceData+0x214>)
   1926e:	4798      	blx	r3
		RecorderDataPtr->internalErrorOccured = 1;
   19270:	4b05      	ldr	r3, [pc, #20]	; (19288 <prvTraceInitTraceData+0x1dc>)
   19272:	681b      	ldr	r3, [r3, #0]
   19274:	4a23      	ldr	r2, [pc, #140]	; (19304 <prvTraceInitTraceData+0x258>)
   19276:	2101      	movs	r1, #1
   19278:	5099      	str	r1, [r3, r2]
		vTraceStop();
   1927a:	4b23      	ldr	r3, [pc, #140]	; (19308 <prvTraceInitTraceData+0x25c>)
   1927c:	4798      	blx	r3
   1927e:	e000      	b.n	19282 <prvTraceInitTraceData+0x1d6>
			return;
   19280:	46c0      	nop			; (mov r8, r8)

	
#ifdef TRC_PORT_SPECIFIC_INIT
	TRC_PORT_SPECIFIC_INIT();
#endif
}
   19282:	46bd      	mov	sp, r7
   19284:	bd80      	pop	{r7, pc}
   19286:	46c0      	nop			; (mov r8, r8)
   19288:	20000bfc 	.word	0x20000bfc
   1928c:	2000441c 	.word	0x2000441c
   19290:	e000e018 	.word	0xe000e018
   19294:	20004fec 	.word	0x20004fec
   19298:	00034083 	.word	0x00034083
   1929c:	00001aa1 	.word	0x00001aa1
   192a0:	f0f0f0f0 	.word	0xf0f0f0f0
   192a4:	00018211 	.word	0x00018211
   192a8:	0000055c 	.word	0x0000055c
   192ac:	f1f1f1f1 	.word	0xf1f1f1f1
   192b0:	00000564 	.word	0x00000564
   192b4:	f2f2f2f2 	.word	0xf2f2f2f2
   192b8:	000006bc 	.word	0x000006bc
   192bc:	00038714 	.word	0x00038714
   192c0:	00019621 	.word	0x00019621
   192c4:	0000070c 	.word	0x0000070c
   192c8:	f3f3f3f3 	.word	0xf3f3f3f3
   192cc:	00000bc4 	.word	0x00000bc4
   192d0:	00000bc5 	.word	0x00000bc5
   192d4:	00000bc6 	.word	0x00000bc6
   192d8:	00000bc7 	.word	0x00000bc7
   192dc:	00000bc8 	.word	0x00000bc8
   192e0:	00000bc9 	.word	0x00000bc9
   192e4:	00000bca 	.word	0x00000bca
   192e8:	00000bcb 	.word	0x00000bcb
   192ec:	00000bcc 	.word	0x00000bcc
   192f0:	00000bcd 	.word	0x00000bcd
   192f4:	00000bce 	.word	0x00000bce
   192f8:	00000bcf 	.word	0x00000bcf
   192fc:	000183b1 	.word	0x000183b1
   19300:	20000b5c 	.word	0x20000b5c
   19304:	000006b4 	.word	0x000006b4
   19308:	00018619 	.word	0x00018619

0001930c <prvTraceNextFreeEventBufferSlot>:


void* prvTraceNextFreeEventBufferSlot(void)
{
   1930c:	b580      	push	{r7, lr}
   1930e:	af00      	add	r7, sp, #0
	if (! RecorderDataPtr->recorderActive)
   19310:	4b10      	ldr	r3, [pc, #64]	; (19354 <prvTraceNextFreeEventBufferSlot+0x48>)
   19312:	681b      	ldr	r3, [r3, #0]
   19314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   19316:	2b00      	cmp	r3, #0
   19318:	d101      	bne.n	1931e <prvTraceNextFreeEventBufferSlot+0x12>
	{
		/* If an XTS or XPS event prior to the main event has filled the buffer
		before saving the main event, and store mode is "stop when full". */
		return NULL;
   1931a:	2300      	movs	r3, #0
   1931c:	e017      	b.n	1934e <prvTraceNextFreeEventBufferSlot+0x42>
	}

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   1931e:	4b0d      	ldr	r3, [pc, #52]	; (19354 <prvTraceNextFreeEventBufferSlot+0x48>)
   19320:	681b      	ldr	r3, [r3, #0]
   19322:	69da      	ldr	r2, [r3, #28]
   19324:	232c      	movs	r3, #44	; 0x2c
   19326:	33ff      	adds	r3, #255	; 0xff
   19328:	429a      	cmp	r2, r3
   1932a:	d905      	bls.n	19338 <prvTraceNextFreeEventBufferSlot+0x2c>
	{
		prvTraceError("Attempt to index outside event buffer!");
   1932c:	4b0a      	ldr	r3, [pc, #40]	; (19358 <prvTraceNextFreeEventBufferSlot+0x4c>)
   1932e:	0018      	movs	r0, r3
   19330:	4b0a      	ldr	r3, [pc, #40]	; (1935c <prvTraceNextFreeEventBufferSlot+0x50>)
   19332:	4798      	blx	r3
		return NULL;
   19334:	2300      	movs	r3, #0
   19336:	e00a      	b.n	1934e <prvTraceNextFreeEventBufferSlot+0x42>
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
   19338:	4b06      	ldr	r3, [pc, #24]	; (19354 <prvTraceNextFreeEventBufferSlot+0x48>)
   1933a:	681a      	ldr	r2, [r3, #0]
   1933c:	4b05      	ldr	r3, [pc, #20]	; (19354 <prvTraceNextFreeEventBufferSlot+0x48>)
   1933e:	681b      	ldr	r3, [r3, #0]
   19340:	69db      	ldr	r3, [r3, #28]
   19342:	009b      	lsls	r3, r3, #2
   19344:	21e2      	movs	r1, #226	; 0xe2
   19346:	00c9      	lsls	r1, r1, #3
   19348:	468c      	mov	ip, r1
   1934a:	4463      	add	r3, ip
   1934c:	18d3      	adds	r3, r2, r3
}
   1934e:	0018      	movs	r0, r3
   19350:	46bd      	mov	sp, r7
   19352:	bd80      	pop	{r7, pc}
   19354:	20000bfc 	.word	0x20000bfc
   19358:	00038728 	.word	0x00038728
   1935c:	00019755 	.word	0x00019755

00019360 <uiIndexOfObject>:

uint16_t uiIndexOfObject(traceHandle objecthandle, uint8_t objectclass)
{
   19360:	b580      	push	{r7, lr}
   19362:	b082      	sub	sp, #8
   19364:	af00      	add	r7, sp, #0
   19366:	0002      	movs	r2, r0
   19368:	1dfb      	adds	r3, r7, #7
   1936a:	701a      	strb	r2, [r3, #0]
   1936c:	1dbb      	adds	r3, r7, #6
   1936e:	1c0a      	adds	r2, r1, #0
   19370:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   19372:	1dbb      	adds	r3, r7, #6
   19374:	781b      	ldrb	r3, [r3, #0]
   19376:	2b08      	cmp	r3, #8
   19378:	d905      	bls.n	19386 <uiIndexOfObject+0x26>
   1937a:	4b2a      	ldr	r3, [pc, #168]	; (19424 <uiIndexOfObject+0xc4>)
   1937c:	0018      	movs	r0, r3
   1937e:	4b2a      	ldr	r3, [pc, #168]	; (19428 <uiIndexOfObject+0xc8>)
   19380:	4798      	blx	r3
   19382:	2300      	movs	r3, #0
   19384:	e049      	b.n	1941a <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objectclass", 0);
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
   19386:	1dfb      	adds	r3, r7, #7
   19388:	781b      	ldrb	r3, [r3, #0]
   1938a:	2b00      	cmp	r3, #0
   1938c:	d00b      	beq.n	193a6 <uiIndexOfObject+0x46>
   1938e:	4b27      	ldr	r3, [pc, #156]	; (1942c <uiIndexOfObject+0xcc>)
   19390:	681a      	ldr	r2, [r3, #0]
   19392:	1dbb      	adds	r3, r7, #6
   19394:	781b      	ldrb	r3, [r3, #0]
   19396:	2164      	movs	r1, #100	; 0x64
   19398:	18d3      	adds	r3, r2, r3
   1939a:	185b      	adds	r3, r3, r1
   1939c:	781b      	ldrb	r3, [r3, #0]
   1939e:	1dfa      	adds	r2, r7, #7
   193a0:	7812      	ldrb	r2, [r2, #0]
   193a2:	429a      	cmp	r2, r3
   193a4:	d905      	bls.n	193b2 <uiIndexOfObject+0x52>
   193a6:	4b22      	ldr	r3, [pc, #136]	; (19430 <uiIndexOfObject+0xd0>)
   193a8:	0018      	movs	r0, r3
   193aa:	4b1f      	ldr	r3, [pc, #124]	; (19428 <uiIndexOfObject+0xc8>)
   193ac:	4798      	blx	r3
   193ae:	2300      	movs	r3, #0
   193b0:	e033      	b.n	1941a <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objecthandle", 0);

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
   193b2:	1dbb      	adds	r3, r7, #6
   193b4:	781b      	ldrb	r3, [r3, #0]
   193b6:	2b08      	cmp	r3, #8
   193b8:	d82a      	bhi.n	19410 <uiIndexOfObject+0xb0>
   193ba:	1dfb      	adds	r3, r7, #7
   193bc:	781b      	ldrb	r3, [r3, #0]
   193be:	2b00      	cmp	r3, #0
   193c0:	d026      	beq.n	19410 <uiIndexOfObject+0xb0>
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
   193c2:	4b1a      	ldr	r3, [pc, #104]	; (1942c <uiIndexOfObject+0xcc>)
   193c4:	681a      	ldr	r2, [r3, #0]
   193c6:	1dbb      	adds	r3, r7, #6
   193c8:	781b      	ldrb	r3, [r3, #0]
   193ca:	2164      	movs	r1, #100	; 0x64
   193cc:	18d3      	adds	r3, r2, r3
   193ce:	185b      	adds	r3, r3, r1
   193d0:	781b      	ldrb	r3, [r3, #0]
	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
   193d2:	1dfa      	adds	r2, r7, #7
   193d4:	7812      	ldrb	r2, [r2, #0]
   193d6:	429a      	cmp	r2, r3
   193d8:	d81a      	bhi.n	19410 <uiIndexOfObject+0xb0>
	{
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   193da:	4b14      	ldr	r3, [pc, #80]	; (1942c <uiIndexOfObject+0xcc>)
   193dc:	681a      	ldr	r2, [r3, #0]
   193de:	1dbb      	adds	r3, r7, #6
   193e0:	781b      	ldrb	r3, [r3, #0]
   193e2:	3340      	adds	r3, #64	; 0x40
   193e4:	005b      	lsls	r3, r3, #1
   193e6:	18d3      	adds	r3, r2, r3
   193e8:	3308      	adds	r3, #8
   193ea:	881a      	ldrh	r2, [r3, #0]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   193ec:	4b0f      	ldr	r3, [pc, #60]	; (1942c <uiIndexOfObject+0xcc>)
   193ee:	6819      	ldr	r1, [r3, #0]
   193f0:	1dbb      	adds	r3, r7, #6
   193f2:	781b      	ldrb	r3, [r3, #0]
   193f4:	207c      	movs	r0, #124	; 0x7c
   193f6:	18cb      	adds	r3, r1, r3
   193f8:	181b      	adds	r3, r3, r0
   193fa:	781b      	ldrb	r3, [r3, #0]
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   193fc:	b29b      	uxth	r3, r3
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   193fe:	1df9      	adds	r1, r7, #7
   19400:	7809      	ldrb	r1, [r1, #0]
   19402:	3901      	subs	r1, #1
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   19404:	b289      	uxth	r1, r1
   19406:	434b      	muls	r3, r1
   19408:	b29b      	uxth	r3, r3
   1940a:	18d3      	adds	r3, r2, r3
   1940c:	b29b      	uxth	r3, r3
   1940e:	e004      	b.n	1941a <uiIndexOfObject+0xba>
	}

	prvTraceError("Object table lookup with invalid object handle or object class!");
   19410:	4b08      	ldr	r3, [pc, #32]	; (19434 <uiIndexOfObject+0xd4>)
   19412:	0018      	movs	r0, r3
   19414:	4b04      	ldr	r3, [pc, #16]	; (19428 <uiIndexOfObject+0xc8>)
   19416:	4798      	blx	r3
	return 0;
   19418:	2300      	movs	r3, #0
}
   1941a:	0018      	movs	r0, r3
   1941c:	46bd      	mov	sp, r7
   1941e:	b002      	add	sp, #8
   19420:	bd80      	pop	{r7, pc}
   19422:	46c0      	nop			; (mov r8, r8)
   19424:	00038750 	.word	0x00038750
   19428:	00019755 	.word	0x00019755
   1942c:	20000bfc 	.word	0x20000bfc
   19430:	00038790 	.word	0x00038790
   19434:	000387d0 	.word	0x000387d0

00019438 <prvTraceGetObjectHandle>:

traceHandle prvTraceGetObjectHandle(traceObjectClass objectclass)
{
   19438:	b580      	push	{r7, lr}
   1943a:	b088      	sub	sp, #32
   1943c:	af00      	add	r7, sp, #0
   1943e:	0002      	movs	r2, r0
   19440:	1dfb      	adds	r3, r7, #7
   19442:	701a      	strb	r2, [r3, #0]
	traceHandle handle;
	static int indexOfHandle;

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
   19444:	4b5a      	ldr	r3, [pc, #360]	; (195b0 <prvTraceGetObjectHandle+0x178>)
   19446:	681b      	ldr	r3, [r3, #0]
   19448:	2b00      	cmp	r3, #0
   1944a:	d105      	bne.n	19458 <prvTraceGetObjectHandle+0x20>
   1944c:	4b59      	ldr	r3, [pc, #356]	; (195b4 <prvTraceGetObjectHandle+0x17c>)
   1944e:	0018      	movs	r0, r3
   19450:	4b59      	ldr	r3, [pc, #356]	; (195b8 <prvTraceGetObjectHandle+0x180>)
   19452:	4798      	blx	r3
   19454:	2300      	movs	r3, #0
   19456:	e0a7      	b.n	195a8 <prvTraceGetObjectHandle+0x170>
	
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   19458:	1dfb      	adds	r3, r7, #7
   1945a:	781b      	ldrb	r3, [r3, #0]
   1945c:	2b08      	cmp	r3, #8
   1945e:	d905      	bls.n	1946c <prvTraceGetObjectHandle+0x34>
   19460:	4b56      	ldr	r3, [pc, #344]	; (195bc <prvTraceGetObjectHandle+0x184>)
   19462:	0018      	movs	r0, r3
   19464:	4b54      	ldr	r3, [pc, #336]	; (195b8 <prvTraceGetObjectHandle+0x180>)
   19466:	4798      	blx	r3
   19468:	2300      	movs	r3, #0
   1946a:	e09d      	b.n	195a8 <prvTraceGetObjectHandle+0x170>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1946c:	f3ef 8310 	mrs	r3, PRIMASK
   19470:	60fb      	str	r3, [r7, #12]
  return(result);
   19472:	68fb      	ldr	r3, [r7, #12]
		"prvTraceGetObjectHandle: Invalid value for objectclass", (traceHandle)0);

	trcCRITICAL_SECTION_BEGIN();
   19474:	61bb      	str	r3, [r7, #24]
   19476:	2301      	movs	r3, #1
   19478:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1947a:	693b      	ldr	r3, [r7, #16]
   1947c:	f383 8810 	msr	PRIMASK, r3
   19480:	4b4f      	ldr	r3, [pc, #316]	; (195c0 <prvTraceGetObjectHandle+0x188>)
   19482:	681b      	ldr	r3, [r3, #0]
   19484:	1c5a      	adds	r2, r3, #1
   19486:	4b4e      	ldr	r3, [pc, #312]	; (195c0 <prvTraceGetObjectHandle+0x188>)
   19488:	601a      	str	r2, [r3, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
   1948a:	1dfb      	adds	r3, r7, #7
   1948c:	781a      	ldrb	r2, [r3, #0]
   1948e:	4b4d      	ldr	r3, [pc, #308]	; (195c4 <prvTraceGetObjectHandle+0x18c>)
   19490:	0052      	lsls	r2, r2, #1
   19492:	5ad3      	ldrh	r3, [r2, r3]
   19494:	001a      	movs	r2, r3
   19496:	4b4c      	ldr	r3, [pc, #304]	; (195c8 <prvTraceGetObjectHandle+0x190>)
   19498:	601a      	str	r2, [r3, #0]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
   1949a:	4b4b      	ldr	r3, [pc, #300]	; (195c8 <prvTraceGetObjectHandle+0x190>)
   1949c:	681b      	ldr	r3, [r3, #0]
   1949e:	4a49      	ldr	r2, [pc, #292]	; (195c4 <prvTraceGetObjectHandle+0x18c>)
   194a0:	2148      	movs	r1, #72	; 0x48
   194a2:	18d3      	adds	r3, r2, r3
   194a4:	185b      	adds	r3, r3, r1
   194a6:	781b      	ldrb	r3, [r3, #0]
   194a8:	2b00      	cmp	r3, #0
   194aa:	d117      	bne.n	194dc <prvTraceGetObjectHandle+0xa4>
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
   194ac:	4b46      	ldr	r3, [pc, #280]	; (195c8 <prvTraceGetObjectHandle+0x190>)
   194ae:	681a      	ldr	r2, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
   194b0:	4b45      	ldr	r3, [pc, #276]	; (195c8 <prvTraceGetObjectHandle+0x190>)
   194b2:	681b      	ldr	r3, [r3, #0]
   194b4:	b2d9      	uxtb	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass]);
   194b6:	1dfb      	adds	r3, r7, #7
   194b8:	781b      	ldrb	r3, [r3, #0]
   194ba:	4842      	ldr	r0, [pc, #264]	; (195c4 <prvTraceGetObjectHandle+0x18c>)
   194bc:	3308      	adds	r3, #8
   194be:	005b      	lsls	r3, r3, #1
   194c0:	18c3      	adds	r3, r0, r3
   194c2:	3302      	adds	r3, #2
   194c4:	881b      	ldrh	r3, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
   194c6:	b2db      	uxtb	r3, r3
   194c8:	1acb      	subs	r3, r1, r3
   194ca:	b2db      	uxtb	r3, r3
   194cc:	3301      	adds	r3, #1
   194ce:	b2d8      	uxtb	r0, r3
		objectHandleStacks.objectHandles[indexOfHandle] =
   194d0:	4b3c      	ldr	r3, [pc, #240]	; (195c4 <prvTraceGetObjectHandle+0x18c>)
   194d2:	2148      	movs	r1, #72	; 0x48
   194d4:	189b      	adds	r3, r3, r2
   194d6:	185b      	adds	r3, r3, r1
   194d8:	1c02      	adds	r2, r0, #0
   194da:	701a      	strb	r2, [r3, #0]
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
   194dc:	4b3a      	ldr	r3, [pc, #232]	; (195c8 <prvTraceGetObjectHandle+0x190>)
   194de:	681a      	ldr	r2, [r3, #0]
   194e0:	231f      	movs	r3, #31
   194e2:	18fb      	adds	r3, r7, r3
   194e4:	4937      	ldr	r1, [pc, #220]	; (195c4 <prvTraceGetObjectHandle+0x18c>)
   194e6:	2048      	movs	r0, #72	; 0x48
   194e8:	188a      	adds	r2, r1, r2
   194ea:	1812      	adds	r2, r2, r0
   194ec:	7812      	ldrb	r2, [r2, #0]
   194ee:	701a      	strb	r2, [r3, #0]

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
   194f0:	1dfb      	adds	r3, r7, #7
   194f2:	781a      	ldrb	r2, [r3, #0]
   194f4:	4b33      	ldr	r3, [pc, #204]	; (195c4 <prvTraceGetObjectHandle+0x18c>)
   194f6:	0052      	lsls	r2, r2, #1
   194f8:	5ad2      	ldrh	r2, [r2, r3]
		> objectHandleStacks.highestIndexOfClass[objectclass])
   194fa:	1dfb      	adds	r3, r7, #7
   194fc:	781b      	ldrb	r3, [r3, #0]
   194fe:	4931      	ldr	r1, [pc, #196]	; (195c4 <prvTraceGetObjectHandle+0x18c>)
   19500:	3310      	adds	r3, #16
   19502:	005b      	lsls	r3, r3, #1
   19504:	18cb      	adds	r3, r1, r3
   19506:	3304      	adds	r3, #4
   19508:	881b      	ldrh	r3, [r3, #0]
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
   1950a:	429a      	cmp	r2, r3
   1950c:	d90d      	bls.n	1952a <prvTraceGetObjectHandle+0xf2>
	{
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   1950e:	1dfb      	adds	r3, r7, #7
   19510:	781b      	ldrb	r3, [r3, #0]
   19512:	0018      	movs	r0, r3
   19514:	4b2d      	ldr	r3, [pc, #180]	; (195cc <prvTraceGetObjectHandle+0x194>)
   19516:	4798      	blx	r3
   19518:	0003      	movs	r3, r0
   1951a:	0018      	movs	r0, r3
   1951c:	4b26      	ldr	r3, [pc, #152]	; (195b8 <prvTraceGetObjectHandle+0x180>)
   1951e:	4798      	blx	r3
		handle = 0;
   19520:	231f      	movs	r3, #31
   19522:	18fb      	adds	r3, r7, r3
   19524:	2200      	movs	r2, #0
   19526:	701a      	strb	r2, [r3, #0]
   19528:	e031      	b.n	1958e <prvTraceGetObjectHandle+0x156>
	}
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
   1952a:	1dfb      	adds	r3, r7, #7
   1952c:	781b      	ldrb	r3, [r3, #0]
   1952e:	4a25      	ldr	r2, [pc, #148]	; (195c4 <prvTraceGetObjectHandle+0x18c>)
   19530:	0059      	lsls	r1, r3, #1
   19532:	5a8a      	ldrh	r2, [r1, r2]
   19534:	3201      	adds	r2, #1
   19536:	b291      	uxth	r1, r2
   19538:	4a22      	ldr	r2, [pc, #136]	; (195c4 <prvTraceGetObjectHandle+0x18c>)
   1953a:	005b      	lsls	r3, r3, #1
   1953c:	5299      	strh	r1, [r3, r2]

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
   1953e:	1dfb      	adds	r3, r7, #7
   19540:	781a      	ldrb	r2, [r3, #0]
   19542:	4b20      	ldr	r3, [pc, #128]	; (195c4 <prvTraceGetObjectHandle+0x18c>)
   19544:	0052      	lsls	r2, r2, #1
   19546:	5ad3      	ldrh	r3, [r2, r3]
   19548:	0019      	movs	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass];
   1954a:	1dfb      	adds	r3, r7, #7
   1954c:	781b      	ldrb	r3, [r3, #0]
   1954e:	4a1d      	ldr	r2, [pc, #116]	; (195c4 <prvTraceGetObjectHandle+0x18c>)
   19550:	3308      	adds	r3, #8
   19552:	005b      	lsls	r3, r3, #1
   19554:	18d3      	adds	r3, r2, r3
   19556:	3302      	adds	r3, #2
   19558:	881b      	ldrh	r3, [r3, #0]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
   1955a:	1acb      	subs	r3, r1, r3
   1955c:	617b      	str	r3, [r7, #20]

		if (hndCount >
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
   1955e:	1dfb      	adds	r3, r7, #7
   19560:	781b      	ldrb	r3, [r3, #0]
   19562:	4a18      	ldr	r2, [pc, #96]	; (195c4 <prvTraceGetObjectHandle+0x18c>)
   19564:	3318      	adds	r3, #24
   19566:	005b      	lsls	r3, r3, #1
   19568:	18d3      	adds	r3, r2, r3
   1956a:	3306      	adds	r3, #6
   1956c:	881b      	ldrh	r3, [r3, #0]
   1956e:	001a      	movs	r2, r3
		if (hndCount >
   19570:	697b      	ldr	r3, [r7, #20]
   19572:	429a      	cmp	r2, r3
   19574:	da0b      	bge.n	1958e <prvTraceGetObjectHandle+0x156>
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   19576:	1dfb      	adds	r3, r7, #7
   19578:	781b      	ldrb	r3, [r3, #0]
				(traceHandle)hndCount;
   1957a:	697a      	ldr	r2, [r7, #20]
   1957c:	b2d2      	uxtb	r2, r2
   1957e:	b291      	uxth	r1, r2
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   19580:	4a10      	ldr	r2, [pc, #64]	; (195c4 <prvTraceGetObjectHandle+0x18c>)
   19582:	3318      	adds	r3, #24
   19584:	005b      	lsls	r3, r3, #1
   19586:	18d3      	adds	r3, r2, r3
   19588:	3306      	adds	r3, #6
   1958a:	1c0a      	adds	r2, r1, #0
   1958c:	801a      	strh	r2, [r3, #0]
		}
	}
	trcCRITICAL_SECTION_END();
   1958e:	4b0c      	ldr	r3, [pc, #48]	; (195c0 <prvTraceGetObjectHandle+0x188>)
   19590:	681b      	ldr	r3, [r3, #0]
   19592:	1e5a      	subs	r2, r3, #1
   19594:	4b0a      	ldr	r3, [pc, #40]	; (195c0 <prvTraceGetObjectHandle+0x188>)
   19596:	601a      	str	r2, [r3, #0]
   19598:	69bb      	ldr	r3, [r7, #24]
   1959a:	60bb      	str	r3, [r7, #8]
   1959c:	68bb      	ldr	r3, [r7, #8]
   1959e:	f383 8810 	msr	PRIMASK, r3

	return handle;
   195a2:	231f      	movs	r3, #31
   195a4:	18fb      	adds	r3, r7, r3
   195a6:	781b      	ldrb	r3, [r3, #0]
}
   195a8:	0018      	movs	r0, r3
   195aa:	46bd      	mov	sp, r7
   195ac:	b008      	add	sp, #32
   195ae:	bd80      	pop	{r7, pc}
   195b0:	20000bfc 	.word	0x20000bfc
   195b4:	00037c30 	.word	0x00037c30
   195b8:	00019755 	.word	0x00019755
   195bc:	00038810 	.word	0x00038810
   195c0:	20000b54 	.word	0x20000b54
   195c4:	20000b6c 	.word	0x20000b6c
   195c8:	20000c00 	.word	0x20000c00
   195cc:	00018475 	.word	0x00018475

000195d0 <prvMarkObjectAsUsed>:
 * Sets an "is used flag" on object creation, using the first byte of the name
 * field. This allows for counting the number of used Object Table slots, even
 * if no names have been set.
 ******************************************************************************/
void prvMarkObjectAsUsed(traceObjectClass objectclass, traceHandle handle)
{
   195d0:	b590      	push	{r4, r7, lr}
   195d2:	b085      	sub	sp, #20
   195d4:	af00      	add	r7, sp, #0
   195d6:	0002      	movs	r2, r0
   195d8:	1dfb      	adds	r3, r7, #7
   195da:	701a      	strb	r2, [r3, #0]
   195dc:	1dbb      	adds	r3, r7, #6
   195de:	1c0a      	adds	r2, r1, #0
   195e0:	701a      	strb	r2, [r3, #0]
	uint16_t idx = uiIndexOfObject(handle, objectclass);
   195e2:	230e      	movs	r3, #14
   195e4:	18fc      	adds	r4, r7, r3
   195e6:	1dfb      	adds	r3, r7, #7
   195e8:	781a      	ldrb	r2, [r3, #0]
   195ea:	1dbb      	adds	r3, r7, #6
   195ec:	781b      	ldrb	r3, [r3, #0]
   195ee:	0011      	movs	r1, r2
   195f0:	0018      	movs	r0, r3
   195f2:	4b09      	ldr	r3, [pc, #36]	; (19618 <prvMarkObjectAsUsed+0x48>)
   195f4:	4798      	blx	r3
   195f6:	0003      	movs	r3, r0
   195f8:	8023      	strh	r3, [r4, #0]
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
   195fa:	4b08      	ldr	r3, [pc, #32]	; (1961c <prvMarkObjectAsUsed+0x4c>)
   195fc:	681a      	ldr	r2, [r3, #0]
   195fe:	230e      	movs	r3, #14
   19600:	18fb      	adds	r3, r7, r3
   19602:	881b      	ldrh	r3, [r3, #0]
   19604:	219c      	movs	r1, #156	; 0x9c
   19606:	18d3      	adds	r3, r2, r3
   19608:	185b      	adds	r3, r3, r1
   1960a:	2201      	movs	r2, #1
   1960c:	701a      	strb	r2, [r3, #0]
}
   1960e:	46c0      	nop			; (mov r8, r8)
   19610:	46bd      	mov	sp, r7
   19612:	b005      	add	sp, #20
   19614:	bd90      	pop	{r4, r7, pc}
   19616:	46c0      	nop			; (mov r8, r8)
   19618:	00019361 	.word	0x00019361
   1961c:	20000bfc 	.word	0x20000bfc

00019620 <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
   19620:	b580      	push	{r7, lr}
   19622:	b086      	sub	sp, #24
   19624:	af00      	add	r7, sp, #0
   19626:	60f8      	str	r0, [r7, #12]
   19628:	60b9      	str	r1, [r7, #8]
   1962a:	607a      	str	r2, [r7, #4]
	uint32_t i;
	for (i = 0; i < maxLength; i++)
   1962c:	2300      	movs	r3, #0
   1962e:	617b      	str	r3, [r7, #20]
   19630:	e010      	b.n	19654 <prvStrncpy+0x34>
	{
		dst[i] = src[i];
   19632:	68fa      	ldr	r2, [r7, #12]
   19634:	697b      	ldr	r3, [r7, #20]
   19636:	18d3      	adds	r3, r2, r3
   19638:	68b9      	ldr	r1, [r7, #8]
   1963a:	697a      	ldr	r2, [r7, #20]
   1963c:	188a      	adds	r2, r1, r2
   1963e:	7812      	ldrb	r2, [r2, #0]
   19640:	701a      	strb	r2, [r3, #0]
		if (src[i] == 0)
   19642:	68ba      	ldr	r2, [r7, #8]
   19644:	697b      	ldr	r3, [r7, #20]
   19646:	18d3      	adds	r3, r2, r3
   19648:	781b      	ldrb	r3, [r3, #0]
   1964a:	2b00      	cmp	r3, #0
   1964c:	d007      	beq.n	1965e <prvStrncpy+0x3e>
	for (i = 0; i < maxLength; i++)
   1964e:	697b      	ldr	r3, [r7, #20]
   19650:	3301      	adds	r3, #1
   19652:	617b      	str	r3, [r7, #20]
   19654:	697a      	ldr	r2, [r7, #20]
   19656:	687b      	ldr	r3, [r7, #4]
   19658:	429a      	cmp	r2, r3
   1965a:	d3ea      	bcc.n	19632 <prvStrncpy+0x12>
			break;
	}
}
   1965c:	e000      	b.n	19660 <prvStrncpy+0x40>
			break;
   1965e:	46c0      	nop			; (mov r8, r8)
}
   19660:	46c0      	nop			; (mov r8, r8)
   19662:	46bd      	mov	sp, r7
   19664:	b006      	add	sp, #24
   19666:	bd80      	pop	{r7, pc}

00019668 <prvTraceSetObjectName>:
 * recorder's Object Property Table, at the given handle and object class.
 ******************************************************************************/
void prvTraceSetObjectName(traceObjectClass objectclass,
						 traceHandle handle,
						 const char* name)
{
   19668:	b580      	push	{r7, lr}
   1966a:	b082      	sub	sp, #8
   1966c:	af00      	add	r7, sp, #0
   1966e:	603a      	str	r2, [r7, #0]
   19670:	1dfb      	adds	r3, r7, #7
   19672:	1c02      	adds	r2, r0, #0
   19674:	701a      	strb	r2, [r3, #0]
   19676:	1dbb      	adds	r3, r7, #6
   19678:	1c0a      	adds	r2, r1, #0
   1967a:	701a      	strb	r2, [r3, #0]
	static uint16_t idx;

	TRACE_ASSERT(name != NULL, "prvTraceSetObjectName: name == NULL", TRC_UNUSED);
   1967c:	683b      	ldr	r3, [r7, #0]
   1967e:	2b00      	cmp	r3, #0
   19680:	d104      	bne.n	1968c <prvTraceSetObjectName+0x24>
   19682:	4b2a      	ldr	r3, [pc, #168]	; (1972c <prvTraceSetObjectName+0xc4>)
   19684:	0018      	movs	r0, r3
   19686:	4b2a      	ldr	r3, [pc, #168]	; (19730 <prvTraceSetObjectName+0xc8>)
   19688:	4798      	blx	r3
   1968a:	e04b      	b.n	19724 <prvTraceSetObjectName+0xbc>

	if (objectclass >= TRACE_NCLASSES)
   1968c:	1dfb      	adds	r3, r7, #7
   1968e:	781b      	ldrb	r3, [r3, #0]
   19690:	2b08      	cmp	r3, #8
   19692:	d904      	bls.n	1969e <prvTraceSetObjectName+0x36>
	{
		prvTraceError("Illegal object class in prvTraceSetObjectName");
   19694:	4b27      	ldr	r3, [pc, #156]	; (19734 <prvTraceSetObjectName+0xcc>)
   19696:	0018      	movs	r0, r3
   19698:	4b25      	ldr	r3, [pc, #148]	; (19730 <prvTraceSetObjectName+0xc8>)
   1969a:	4798      	blx	r3
		return;
   1969c:	e042      	b.n	19724 <prvTraceSetObjectName+0xbc>
	}

	if (handle == 0)
   1969e:	1dbb      	adds	r3, r7, #6
   196a0:	781b      	ldrb	r3, [r3, #0]
   196a2:	2b00      	cmp	r3, #0
   196a4:	d104      	bne.n	196b0 <prvTraceSetObjectName+0x48>
	{
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
   196a6:	4b24      	ldr	r3, [pc, #144]	; (19738 <prvTraceSetObjectName+0xd0>)
   196a8:	0018      	movs	r0, r3
   196aa:	4b21      	ldr	r3, [pc, #132]	; (19730 <prvTraceSetObjectName+0xc8>)
   196ac:	4798      	blx	r3
		return;
   196ae:	e039      	b.n	19724 <prvTraceSetObjectName+0xbc>
	}

	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
   196b0:	4b22      	ldr	r3, [pc, #136]	; (1973c <prvTraceSetObjectName+0xd4>)
   196b2:	681a      	ldr	r2, [r3, #0]
   196b4:	1dfb      	adds	r3, r7, #7
   196b6:	781b      	ldrb	r3, [r3, #0]
   196b8:	2164      	movs	r1, #100	; 0x64
   196ba:	18d3      	adds	r3, r2, r3
   196bc:	185b      	adds	r3, r3, r1
   196be:	781b      	ldrb	r3, [r3, #0]
   196c0:	1dba      	adds	r2, r7, #6
   196c2:	7812      	ldrb	r2, [r2, #0]
   196c4:	429a      	cmp	r2, r3
   196c6:	d909      	bls.n	196dc <prvTraceSetObjectName+0x74>
	{
		/* ERROR */
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   196c8:	1dfb      	adds	r3, r7, #7
   196ca:	781b      	ldrb	r3, [r3, #0]
   196cc:	0018      	movs	r0, r3
   196ce:	4b1c      	ldr	r3, [pc, #112]	; (19740 <prvTraceSetObjectName+0xd8>)
   196d0:	4798      	blx	r3
   196d2:	0003      	movs	r3, r0
   196d4:	0018      	movs	r0, r3
   196d6:	4b16      	ldr	r3, [pc, #88]	; (19730 <prvTraceSetObjectName+0xc8>)
   196d8:	4798      	blx	r3
   196da:	e023      	b.n	19724 <prvTraceSetObjectName+0xbc>
	}
	else
	{
		idx = uiIndexOfObject(handle, objectclass);
   196dc:	1dfb      	adds	r3, r7, #7
   196de:	781a      	ldrb	r2, [r3, #0]
   196e0:	1dbb      	adds	r3, r7, #6
   196e2:	781b      	ldrb	r3, [r3, #0]
   196e4:	0011      	movs	r1, r2
   196e6:	0018      	movs	r0, r3
   196e8:	4b16      	ldr	r3, [pc, #88]	; (19744 <prvTraceSetObjectName+0xdc>)
   196ea:	4798      	blx	r3
   196ec:	0003      	movs	r3, r0
   196ee:	001a      	movs	r2, r3
   196f0:	4b15      	ldr	r3, [pc, #84]	; (19748 <prvTraceSetObjectName+0xe0>)
   196f2:	801a      	strh	r2, [r3, #0]

		if (traceErrorMessage == NULL)
   196f4:	4b15      	ldr	r3, [pc, #84]	; (1974c <prvTraceSetObjectName+0xe4>)
   196f6:	681b      	ldr	r3, [r3, #0]
   196f8:	2b00      	cmp	r3, #0
   196fa:	d113      	bne.n	19724 <prvTraceSetObjectName+0xbc>
		{
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   196fc:	4b0f      	ldr	r3, [pc, #60]	; (1973c <prvTraceSetObjectName+0xd4>)
   196fe:	681a      	ldr	r2, [r3, #0]
   19700:	4b11      	ldr	r3, [pc, #68]	; (19748 <prvTraceSetObjectName+0xe0>)
   19702:	881b      	ldrh	r3, [r3, #0]
   19704:	3398      	adds	r3, #152	; 0x98
   19706:	18d3      	adds	r3, r2, r3
   19708:	1d18      	adds	r0, r3, #4
				name,
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
   1970a:	4b0c      	ldr	r3, [pc, #48]	; (1973c <prvTraceSetObjectName+0xd4>)
   1970c:	681a      	ldr	r2, [r3, #0]
   1970e:	1dfb      	adds	r3, r7, #7
   19710:	781b      	ldrb	r3, [r3, #0]
   19712:	2170      	movs	r1, #112	; 0x70
   19714:	18d3      	adds	r3, r2, r3
   19716:	185b      	adds	r3, r3, r1
   19718:	781b      	ldrb	r3, [r3, #0]
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   1971a:	001a      	movs	r2, r3
   1971c:	683b      	ldr	r3, [r7, #0]
   1971e:	0019      	movs	r1, r3
   19720:	4b0b      	ldr	r3, [pc, #44]	; (19750 <prvTraceSetObjectName+0xe8>)
   19722:	4798      	blx	r3
		}
	}
}
   19724:	46bd      	mov	sp, r7
   19726:	b002      	add	sp, #8
   19728:	bd80      	pop	{r7, pc}
   1972a:	46c0      	nop			; (mov r8, r8)
   1972c:	00038914 	.word	0x00038914
   19730:	00019755 	.word	0x00019755
   19734:	00038948 	.word	0x00038948
   19738:	00038978 	.word	0x00038978
   1973c:	20000bfc 	.word	0x20000bfc
   19740:	00018475 	.word	0x00018475
   19744:	00019361 	.word	0x00019361
   19748:	20000c04 	.word	0x20000c04
   1974c:	20000b5c 	.word	0x20000b5c
   19750:	00019621 	.word	0x00019621

00019754 <prvTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
   19754:	b580      	push	{r7, lr}
   19756:	b082      	sub	sp, #8
   19758:	af00      	add	r7, sp, #0
   1975a:	6078      	str	r0, [r7, #4]
	/* Stop the recorder */
	if (RecorderDataPtr != NULL)
   1975c:	4b11      	ldr	r3, [pc, #68]	; (197a4 <prvTraceError+0x50>)
   1975e:	681b      	ldr	r3, [r3, #0]
   19760:	2b00      	cmp	r3, #0
   19762:	d001      	beq.n	19768 <prvTraceError+0x14>
	{
		vTraceStop();
   19764:	4b10      	ldr	r3, [pc, #64]	; (197a8 <prvTraceError+0x54>)
   19766:	4798      	blx	r3
	}

	/* If first error only... */
	if (traceErrorMessage == NULL)
   19768:	4b10      	ldr	r3, [pc, #64]	; (197ac <prvTraceError+0x58>)
   1976a:	681b      	ldr	r3, [r3, #0]
   1976c:	2b00      	cmp	r3, #0
   1976e:	d115      	bne.n	1979c <prvTraceError+0x48>
	{
		traceErrorMessage = (char*)(intptr_t) msg;
   19770:	4b0e      	ldr	r3, [pc, #56]	; (197ac <prvTraceError+0x58>)
   19772:	687a      	ldr	r2, [r7, #4]
   19774:	601a      	str	r2, [r3, #0]
		if (RecorderDataPtr != NULL)
   19776:	4b0b      	ldr	r3, [pc, #44]	; (197a4 <prvTraceError+0x50>)
   19778:	681b      	ldr	r3, [r3, #0]
   1977a:	2b00      	cmp	r3, #0
   1977c:	d00e      	beq.n	1979c <prvTraceError+0x48>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   1977e:	4b09      	ldr	r3, [pc, #36]	; (197a4 <prvTraceError+0x50>)
   19780:	681b      	ldr	r3, [r3, #0]
   19782:	4a0b      	ldr	r2, [pc, #44]	; (197b0 <prvTraceError+0x5c>)
   19784:	1898      	adds	r0, r3, r2
   19786:	4b09      	ldr	r3, [pc, #36]	; (197ac <prvTraceError+0x58>)
   19788:	681b      	ldr	r3, [r3, #0]
   1978a:	2250      	movs	r2, #80	; 0x50
   1978c:	0019      	movs	r1, r3
   1978e:	4b09      	ldr	r3, [pc, #36]	; (197b4 <prvTraceError+0x60>)
   19790:	4798      	blx	r3
			RecorderDataPtr->internalErrorOccured = 1;
   19792:	4b04      	ldr	r3, [pc, #16]	; (197a4 <prvTraceError+0x50>)
   19794:	681b      	ldr	r3, [r3, #0]
   19796:	4a08      	ldr	r2, [pc, #32]	; (197b8 <prvTraceError+0x64>)
   19798:	2101      	movs	r1, #1
   1979a:	5099      	str	r1, [r3, r2]
		}
	}
}
   1979c:	46c0      	nop			; (mov r8, r8)
   1979e:	46bd      	mov	sp, r7
   197a0:	b002      	add	sp, #8
   197a2:	bd80      	pop	{r7, pc}
   197a4:	20000bfc 	.word	0x20000bfc
   197a8:	00018619 	.word	0x00018619
   197ac:	20000b5c 	.word	0x20000b5c
   197b0:	000006bc 	.word	0x000006bc
   197b4:	00019621 	.word	0x00019621
   197b8:	000006b4 	.word	0x000006b4

000197bc <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
   197bc:	b580      	push	{r7, lr}
   197be:	b086      	sub	sp, #24
   197c0:	af00      	add	r7, sp, #0
   197c2:	0002      	movs	r2, r0
   197c4:	1dfb      	adds	r3, r7, #7
   197c6:	701a      	strb	r2, [r3, #0]
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
   197c8:	2300      	movs	r3, #0
   197ca:	617b      	str	r3, [r7, #20]
	unsigned int e = 0;
   197cc:	2300      	movs	r3, #0
   197ce:	613b      	str	r3, [r7, #16]

	TRACE_ASSERT(nofEntriesToCheck != 0, 
   197d0:	1dfb      	adds	r3, r7, #7
   197d2:	781b      	ldrb	r3, [r3, #0]
   197d4:	2b00      	cmp	r3, #0
   197d6:	d000      	beq.n	197da <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x1e>
   197d8:	e089      	b.n	198ee <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x132>
   197da:	4b49      	ldr	r3, [pc, #292]	; (19900 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x144>)
   197dc:	0018      	movs	r0, r3
   197de:	4b49      	ldr	r3, [pc, #292]	; (19904 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x148>)
   197e0:	4798      	blx	r3
   197e2:	e08a      	b.n	198fa <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
	{
		e = RecorderDataPtr->nextFreeIndex + i;
   197e4:	4b48      	ldr	r3, [pc, #288]	; (19908 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   197e6:	681b      	ldr	r3, [r3, #0]
   197e8:	69da      	ldr	r2, [r3, #28]
   197ea:	697b      	ldr	r3, [r7, #20]
   197ec:	18d3      	adds	r3, r2, r3
   197ee:	613b      	str	r3, [r7, #16]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
   197f0:	4b45      	ldr	r3, [pc, #276]	; (19908 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   197f2:	6819      	ldr	r1, [r3, #0]
   197f4:	693b      	ldr	r3, [r7, #16]
   197f6:	009a      	lsls	r2, r3, #2
   197f8:	23e2      	movs	r3, #226	; 0xe2
   197fa:	00db      	lsls	r3, r3, #3
   197fc:	188a      	adds	r2, r1, r2
   197fe:	18d3      	adds	r3, r2, r3
   19800:	781b      	ldrb	r3, [r3, #0]
   19802:	2b98      	cmp	r3, #152	; 0x98
   19804:	d934      	bls.n	19870 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
			(RecorderDataPtr->eventData[e*4] < USER_EVENT + 16))
   19806:	4b40      	ldr	r3, [pc, #256]	; (19908 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   19808:	6819      	ldr	r1, [r3, #0]
   1980a:	693b      	ldr	r3, [r7, #16]
   1980c:	009a      	lsls	r2, r3, #2
   1980e:	23e2      	movs	r3, #226	; 0xe2
   19810:	00db      	lsls	r3, r3, #3
   19812:	188a      	adds	r2, r1, r2
   19814:	18d3      	adds	r3, r2, r3
   19816:	781b      	ldrb	r3, [r3, #0]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
   19818:	2ba7      	cmp	r3, #167	; 0xa7
   1981a:	d829      	bhi.n	19870 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
		{
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
   1981c:	4b3a      	ldr	r3, [pc, #232]	; (19908 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1981e:	6819      	ldr	r1, [r3, #0]
   19820:	693b      	ldr	r3, [r7, #16]
   19822:	009a      	lsls	r2, r3, #2
   19824:	23e2      	movs	r3, #226	; 0xe2
   19826:	00db      	lsls	r3, r3, #3
   19828:	188a      	adds	r2, r1, r2
   1982a:	18d3      	adds	r3, r2, r3
   1982c:	781a      	ldrb	r2, [r3, #0]
   1982e:	230f      	movs	r3, #15
   19830:	18fb      	adds	r3, r7, r3
   19832:	3268      	adds	r2, #104	; 0x68
   19834:	701a      	strb	r2, [r3, #0]
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
   19836:	230f      	movs	r3, #15
   19838:	18fb      	adds	r3, r7, r3
   1983a:	781a      	ldrb	r2, [r3, #0]
   1983c:	693b      	ldr	r3, [r7, #16]
   1983e:	18d2      	adds	r2, r2, r3
   19840:	4b31      	ldr	r3, [pc, #196]	; (19908 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   19842:	681b      	ldr	r3, [r3, #0]
   19844:	699b      	ldr	r3, [r3, #24]
   19846:	429a      	cmp	r2, r3
   19848:	d24d      	bcs.n	198e6 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			{
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
   1984a:	4b2f      	ldr	r3, [pc, #188]	; (19908 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1984c:	681a      	ldr	r2, [r3, #0]
   1984e:	693b      	ldr	r3, [r7, #16]
   19850:	009b      	lsls	r3, r3, #2
   19852:	21e2      	movs	r1, #226	; 0xe2
   19854:	00c9      	lsls	r1, r1, #3
   19856:	468c      	mov	ip, r1
   19858:	4463      	add	r3, ip
   1985a:	18d0      	adds	r0, r2, r3
   1985c:	230f      	movs	r3, #15
   1985e:	18fb      	adds	r3, r7, r3
   19860:	781b      	ldrb	r3, [r3, #0]
   19862:	3301      	adds	r3, #1
   19864:	009b      	lsls	r3, r3, #2
   19866:	001a      	movs	r2, r3
   19868:	2100      	movs	r1, #0
   1986a:	4b28      	ldr	r3, [pc, #160]	; (1990c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1986c:	4798      	blx	r3
		{
   1986e:	e03a      	b.n	198e6 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			}
		}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
   19870:	4b25      	ldr	r3, [pc, #148]	; (19908 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   19872:	6819      	ldr	r1, [r3, #0]
   19874:	693b      	ldr	r3, [r7, #16]
   19876:	009a      	lsls	r2, r3, #2
   19878:	23e2      	movs	r3, #226	; 0xe2
   1987a:	00db      	lsls	r3, r3, #3
   1987c:	188a      	adds	r2, r1, r2
   1987e:	18d3      	adds	r3, r2, r3
   19880:	781b      	ldrb	r3, [r3, #0]
   19882:	2b01      	cmp	r3, #1
   19884:	d130      	bne.n	198e8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
			if ((e + 1) < RecorderDataPtr->maxEvents)
   19886:	693b      	ldr	r3, [r7, #16]
   19888:	1c5a      	adds	r2, r3, #1
   1988a:	4b1f      	ldr	r3, [pc, #124]	; (19908 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1988c:	681b      	ldr	r3, [r3, #0]
   1988e:	699b      	ldr	r3, [r3, #24]
   19890:	429a      	cmp	r2, r3
   19892:	d20e      	bcs.n	198b2 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf6>
			{
				/* Clear 8 bytes */
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
   19894:	4b1c      	ldr	r3, [pc, #112]	; (19908 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   19896:	681a      	ldr	r2, [r3, #0]
   19898:	693b      	ldr	r3, [r7, #16]
   1989a:	009b      	lsls	r3, r3, #2
   1989c:	21e2      	movs	r1, #226	; 0xe2
   1989e:	00c9      	lsls	r1, r1, #3
   198a0:	468c      	mov	ip, r1
   198a2:	4463      	add	r3, ip
   198a4:	18d3      	adds	r3, r2, r3
   198a6:	2208      	movs	r2, #8
   198a8:	2100      	movs	r1, #0
   198aa:	0018      	movs	r0, r3
   198ac:	4b17      	ldr	r3, [pc, #92]	; (1990c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   198ae:	4798      	blx	r3
   198b0:	e01a      	b.n	198e8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
			}
			else
			{
				/* Clear 8 bytes, 4 first and 4 last */
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
   198b2:	4b15      	ldr	r3, [pc, #84]	; (19908 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   198b4:	681b      	ldr	r3, [r3, #0]
   198b6:	22e2      	movs	r2, #226	; 0xe2
   198b8:	00d2      	lsls	r2, r2, #3
   198ba:	4694      	mov	ip, r2
   198bc:	4463      	add	r3, ip
   198be:	2204      	movs	r2, #4
   198c0:	2100      	movs	r1, #0
   198c2:	0018      	movs	r0, r3
   198c4:	4b11      	ldr	r3, [pc, #68]	; (1990c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   198c6:	4798      	blx	r3
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
   198c8:	4b0f      	ldr	r3, [pc, #60]	; (19908 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   198ca:	681a      	ldr	r2, [r3, #0]
   198cc:	693b      	ldr	r3, [r7, #16]
   198ce:	009b      	lsls	r3, r3, #2
   198d0:	21e2      	movs	r1, #226	; 0xe2
   198d2:	00c9      	lsls	r1, r1, #3
   198d4:	468c      	mov	ip, r1
   198d6:	4463      	add	r3, ip
   198d8:	18d3      	adds	r3, r2, r3
   198da:	2204      	movs	r2, #4
   198dc:	2100      	movs	r1, #0
   198de:	0018      	movs	r0, r3
   198e0:	4b0a      	ldr	r3, [pc, #40]	; (1990c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   198e2:	4798      	blx	r3
   198e4:	e000      	b.n	198e8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
   198e6:	46c0      	nop			; (mov r8, r8)
			}
		}
		i++;
   198e8:	697b      	ldr	r3, [r7, #20]
   198ea:	3301      	adds	r3, #1
   198ec:	617b      	str	r3, [r7, #20]
	while (i < nofEntriesToCheck)
   198ee:	1dfb      	adds	r3, r7, #7
   198f0:	781a      	ldrb	r2, [r3, #0]
   198f2:	697b      	ldr	r3, [r7, #20]
   198f4:	429a      	cmp	r2, r3
   198f6:	d900      	bls.n	198fa <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
   198f8:	e774      	b.n	197e4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
	}
}
   198fa:	46bd      	mov	sp, r7
   198fc:	b006      	add	sp, #24
   198fe:	bd80      	pop	{r7, pc}
   19900:	000389d8 	.word	0x000389d8
   19904:	00019755 	.word	0x00019755
   19908:	20000bfc 	.word	0x20000bfc
   1990c:	00034083 	.word	0x00034083

00019910 <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
   19910:	b580      	push	{r7, lr}
   19912:	af00      	add	r7, sp, #0
	if (RecorderDataPtr->recorderActive == 0)
   19914:	4b12      	ldr	r3, [pc, #72]	; (19960 <prvTraceUpdateCounters+0x50>)
   19916:	681b      	ldr	r3, [r3, #0]
   19918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1991a:	2b00      	cmp	r3, #0
   1991c:	d01c      	beq.n	19958 <prvTraceUpdateCounters+0x48>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
   1991e:	4b10      	ldr	r3, [pc, #64]	; (19960 <prvTraceUpdateCounters+0x50>)
   19920:	681b      	ldr	r3, [r3, #0]
   19922:	695a      	ldr	r2, [r3, #20]
   19924:	3201      	adds	r2, #1
   19926:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
   19928:	4b0d      	ldr	r3, [pc, #52]	; (19960 <prvTraceUpdateCounters+0x50>)
   1992a:	681b      	ldr	r3, [r3, #0]
   1992c:	69da      	ldr	r2, [r3, #28]
   1992e:	3201      	adds	r2, #1
   19930:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   19932:	4b0b      	ldr	r3, [pc, #44]	; (19960 <prvTraceUpdateCounters+0x50>)
   19934:	681b      	ldr	r3, [r3, #0]
   19936:	69da      	ldr	r2, [r3, #28]
   19938:	232c      	movs	r3, #44	; 0x2c
   1993a:	33ff      	adds	r3, #255	; 0xff
   1993c:	429a      	cmp	r2, r3
   1993e:	d907      	bls.n	19950 <prvTraceUpdateCounters+0x40>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
   19940:	4b07      	ldr	r3, [pc, #28]	; (19960 <prvTraceUpdateCounters+0x50>)
   19942:	681b      	ldr	r3, [r3, #0]
   19944:	2201      	movs	r2, #1
   19946:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
   19948:	4b05      	ldr	r3, [pc, #20]	; (19960 <prvTraceUpdateCounters+0x50>)
   1994a:	681b      	ldr	r3, [r3, #0]
   1994c:	2200      	movs	r2, #0
   1994e:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
   19950:	2001      	movs	r0, #1
   19952:	4b04      	ldr	r3, [pc, #16]	; (19964 <prvTraceUpdateCounters+0x54>)
   19954:	4798      	blx	r3
   19956:	e000      	b.n	1995a <prvTraceUpdateCounters+0x4a>
		return;
   19958:	46c0      	nop			; (mov r8, r8)
#endif
}
   1995a:	46bd      	mov	sp, r7
   1995c:	bd80      	pop	{r7, pc}
   1995e:	46c0      	nop			; (mov r8, r8)
   19960:	20000bfc 	.word	0x20000bfc
   19964:	000197bd 	.word	0x000197bd

00019968 <prvTraceGetDTS>:
 *
 * The parameter param_maxDTS should be 0xFF for 8-bit dts or 0xFFFF for
 * events with 16-bit dts fields.
 *****************************************************************************/
uint16_t prvTraceGetDTS(uint16_t param_maxDTS)
{
   19968:	b5b0      	push	{r4, r5, r7, lr}
   1996a:	b086      	sub	sp, #24
   1996c:	af00      	add	r7, sp, #0
   1996e:	0002      	movs	r2, r0
   19970:	1dbb      	adds	r3, r7, #6
   19972:	801a      	strh	r2, [r3, #0]
	static uint32_t old_timestamp = 0;
	XTSEvent* xts = 0;
   19974:	2300      	movs	r3, #0
   19976:	617b      	str	r3, [r7, #20]
	uint32_t dts = 0;
   19978:	2300      	movs	r3, #0
   1997a:	613b      	str	r3, [r7, #16]
	uint32_t timestamp = 0;
   1997c:	2300      	movs	r3, #0
   1997e:	60fb      	str	r3, [r7, #12]

	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
   19980:	1dbb      	adds	r3, r7, #6
   19982:	881b      	ldrh	r3, [r3, #0]
   19984:	2bff      	cmp	r3, #255	; 0xff
   19986:	d00a      	beq.n	1999e <prvTraceGetDTS+0x36>
   19988:	1dbb      	adds	r3, r7, #6
   1998a:	881b      	ldrh	r3, [r3, #0]
   1998c:	4a60      	ldr	r2, [pc, #384]	; (19b10 <prvTraceGetDTS+0x1a8>)
   1998e:	4293      	cmp	r3, r2
   19990:	d005      	beq.n	1999e <prvTraceGetDTS+0x36>
   19992:	4b60      	ldr	r3, [pc, #384]	; (19b14 <prvTraceGetDTS+0x1ac>)
   19994:	0018      	movs	r0, r3
   19996:	4b60      	ldr	r3, [pc, #384]	; (19b18 <prvTraceGetDTS+0x1b0>)
   19998:	4798      	blx	r3
   1999a:	2300      	movs	r3, #0
   1999c:	e0b3      	b.n	19b06 <prvTraceGetDTS+0x19e>

	
	if (RecorderDataPtr->frequency == 0)
   1999e:	4b5f      	ldr	r3, [pc, #380]	; (19b1c <prvTraceGetDTS+0x1b4>)
   199a0:	681b      	ldr	r3, [r3, #0]
   199a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   199a4:	2b00      	cmp	r3, #0
   199a6:	d118      	bne.n	199da <prvTraceGetDTS+0x72>
	{	
		if (timestampFrequency != 0)
   199a8:	4b5d      	ldr	r3, [pc, #372]	; (19b20 <prvTraceGetDTS+0x1b8>)
   199aa:	681b      	ldr	r3, [r3, #0]
   199ac:	2b00      	cmp	r3, #0
   199ae:	d006      	beq.n	199be <prvTraceGetDTS+0x56>
		{
			/* If to override default TRC_HWTC_FREQ_HZ value with value set by vTraceSetFrequency */
			RecorderDataPtr->frequency = timestampFrequency / (TRC_HWTC_DIVISOR);
   199b0:	4b5a      	ldr	r3, [pc, #360]	; (19b1c <prvTraceGetDTS+0x1b4>)
   199b2:	681b      	ldr	r3, [r3, #0]
   199b4:	4a5a      	ldr	r2, [pc, #360]	; (19b20 <prvTraceGetDTS+0x1b8>)
   199b6:	6812      	ldr	r2, [r2, #0]
   199b8:	0892      	lsrs	r2, r2, #2
   199ba:	625a      	str	r2, [r3, #36]	; 0x24
   199bc:	e00d      	b.n	199da <prvTraceGetDTS+0x72>
		} 
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
   199be:	4b59      	ldr	r3, [pc, #356]	; (19b24 <prvTraceGetDTS+0x1bc>)
   199c0:	681a      	ldr	r2, [r3, #0]
   199c2:	4b59      	ldr	r3, [pc, #356]	; (19b28 <prvTraceGetDTS+0x1c0>)
   199c4:	681b      	ldr	r3, [r3, #0]
   199c6:	429a      	cmp	r2, r3
   199c8:	d007      	beq.n	199da <prvTraceGetDTS+0x72>
			/* If using default value and timer has been started. 
			Note: If the default frequency value set here would be incorrect, e.g.,
			if the timer has actually not been configured yet, override this 
			with vTraceSetFrequency.
			*/
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
   199ca:	4b54      	ldr	r3, [pc, #336]	; (19b1c <prvTraceGetDTS+0x1b4>)
   199cc:	681c      	ldr	r4, [r3, #0]
   199ce:	2000      	movs	r0, #0
   199d0:	4b56      	ldr	r3, [pc, #344]	; (19b2c <prvTraceGetDTS+0x1c4>)
   199d2:	4798      	blx	r3
   199d4:	0003      	movs	r3, r0
   199d6:	089b      	lsrs	r3, r3, #2
   199d8:	6263      	str	r3, [r4, #36]	; 0x24
	* The below statements read the timestamp from the timer port module.
	* If necessary, whole seconds are extracted using division while the rest
	* comes from the modulo operation.
	**************************************************************************/
	
	prvTracePortGetTimeStamp(&timestamp);	
   199da:	230c      	movs	r3, #12
   199dc:	18fb      	adds	r3, r7, r3
   199de:	0018      	movs	r0, r3
   199e0:	4b53      	ldr	r3, [pc, #332]	; (19b30 <prvTraceGetDTS+0x1c8>)
   199e2:	4798      	blx	r3
	
	/***************************************************************************
	* Since dts is unsigned the result will be correct even if timestamp has
	* wrapped around.
	***************************************************************************/
	dts = timestamp - old_timestamp;
   199e4:	68fa      	ldr	r2, [r7, #12]
   199e6:	4b53      	ldr	r3, [pc, #332]	; (19b34 <prvTraceGetDTS+0x1cc>)
   199e8:	681b      	ldr	r3, [r3, #0]
   199ea:	1ad3      	subs	r3, r2, r3
   199ec:	613b      	str	r3, [r7, #16]
	old_timestamp = timestamp;
   199ee:	68fa      	ldr	r2, [r7, #12]
   199f0:	4b50      	ldr	r3, [pc, #320]	; (19b34 <prvTraceGetDTS+0x1cc>)
   199f2:	601a      	str	r2, [r3, #0]

	if (RecorderDataPtr->frequency > 0)
   199f4:	4b49      	ldr	r3, [pc, #292]	; (19b1c <prvTraceGetDTS+0x1b4>)
   199f6:	681b      	ldr	r3, [r3, #0]
   199f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   199fa:	2b00      	cmp	r3, #0
   199fc:	d044      	beq.n	19a88 <prvTraceGetDTS+0x120>
	{
		/* Check if dts > 1 second */
		if (dts > RecorderDataPtr->frequency)
   199fe:	4b47      	ldr	r3, [pc, #284]	; (19b1c <prvTraceGetDTS+0x1b4>)
   19a00:	681b      	ldr	r3, [r3, #0]
   19a02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   19a04:	693b      	ldr	r3, [r7, #16]
   19a06:	429a      	cmp	r2, r3
   19a08:	d21e      	bcs.n	19a48 <prvTraceGetDTS+0xe0>
		{
			/* More than 1 second has passed */
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
   19a0a:	4b44      	ldr	r3, [pc, #272]	; (19b1c <prvTraceGetDTS+0x1b4>)
   19a0c:	681c      	ldr	r4, [r3, #0]
   19a0e:	4b43      	ldr	r3, [pc, #268]	; (19b1c <prvTraceGetDTS+0x1b4>)
   19a10:	681b      	ldr	r3, [r3, #0]
   19a12:	6add      	ldr	r5, [r3, #44]	; 0x2c
   19a14:	4b41      	ldr	r3, [pc, #260]	; (19b1c <prvTraceGetDTS+0x1b4>)
   19a16:	681b      	ldr	r3, [r3, #0]
   19a18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   19a1a:	4b47      	ldr	r3, [pc, #284]	; (19b38 <prvTraceGetDTS+0x1d0>)
   19a1c:	0011      	movs	r1, r2
   19a1e:	6938      	ldr	r0, [r7, #16]
   19a20:	4798      	blx	r3
   19a22:	0003      	movs	r3, r0
   19a24:	18eb      	adds	r3, r5, r3
   19a26:	62e3      	str	r3, [r4, #44]	; 0x2c
			/* The part that is not an entire second is added to absTimeLastEvent */
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
   19a28:	4b3c      	ldr	r3, [pc, #240]	; (19b1c <prvTraceGetDTS+0x1b4>)
   19a2a:	681c      	ldr	r4, [r3, #0]
   19a2c:	4b3b      	ldr	r3, [pc, #236]	; (19b1c <prvTraceGetDTS+0x1b4>)
   19a2e:	681b      	ldr	r3, [r3, #0]
   19a30:	6a9d      	ldr	r5, [r3, #40]	; 0x28
   19a32:	4b3a      	ldr	r3, [pc, #232]	; (19b1c <prvTraceGetDTS+0x1b4>)
   19a34:	681b      	ldr	r3, [r3, #0]
   19a36:	6a59      	ldr	r1, [r3, #36]	; 0x24
   19a38:	693a      	ldr	r2, [r7, #16]
   19a3a:	4b40      	ldr	r3, [pc, #256]	; (19b3c <prvTraceGetDTS+0x1d4>)
   19a3c:	0010      	movs	r0, r2
   19a3e:	4798      	blx	r3
   19a40:	000b      	movs	r3, r1
   19a42:	18eb      	adds	r3, r5, r3
   19a44:	62a3      	str	r3, [r4, #40]	; 0x28
   19a46:	e007      	b.n	19a58 <prvTraceGetDTS+0xf0>
		}
		else
		{
			RecorderDataPtr->absTimeLastEvent += dts;
   19a48:	4b34      	ldr	r3, [pc, #208]	; (19b1c <prvTraceGetDTS+0x1b4>)
   19a4a:	681b      	ldr	r3, [r3, #0]
   19a4c:	4a33      	ldr	r2, [pc, #204]	; (19b1c <prvTraceGetDTS+0x1b4>)
   19a4e:	6812      	ldr	r2, [r2, #0]
   19a50:	6a91      	ldr	r1, [r2, #40]	; 0x28
   19a52:	693a      	ldr	r2, [r7, #16]
   19a54:	188a      	adds	r2, r1, r2
   19a56:	629a      	str	r2, [r3, #40]	; 0x28
		}

		/* Check if absTimeLastEvent >= 1 second */
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
   19a58:	4b30      	ldr	r3, [pc, #192]	; (19b1c <prvTraceGetDTS+0x1b4>)
   19a5a:	681b      	ldr	r3, [r3, #0]
   19a5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   19a5e:	4b2f      	ldr	r3, [pc, #188]	; (19b1c <prvTraceGetDTS+0x1b4>)
   19a60:	681b      	ldr	r3, [r3, #0]
   19a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   19a64:	429a      	cmp	r2, r3
   19a66:	d313      	bcc.n	19a90 <prvTraceGetDTS+0x128>
		{
			/* RecorderDataPtr->absTimeLastEvent is more than or equal to 1 second, but always less than 2 seconds */
			RecorderDataPtr->absTimeLastEventSecond++;
   19a68:	4b2c      	ldr	r3, [pc, #176]	; (19b1c <prvTraceGetDTS+0x1b4>)
   19a6a:	681b      	ldr	r3, [r3, #0]
   19a6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   19a6e:	3201      	adds	r2, #1
   19a70:	62da      	str	r2, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
   19a72:	4b2a      	ldr	r3, [pc, #168]	; (19b1c <prvTraceGetDTS+0x1b4>)
   19a74:	681b      	ldr	r3, [r3, #0]
   19a76:	4a29      	ldr	r2, [pc, #164]	; (19b1c <prvTraceGetDTS+0x1b4>)
   19a78:	6812      	ldr	r2, [r2, #0]
   19a7a:	6a91      	ldr	r1, [r2, #40]	; 0x28
   19a7c:	4a27      	ldr	r2, [pc, #156]	; (19b1c <prvTraceGetDTS+0x1b4>)
   19a7e:	6812      	ldr	r2, [r2, #0]
   19a80:	6a52      	ldr	r2, [r2, #36]	; 0x24
   19a82:	1a8a      	subs	r2, r1, r2
   19a84:	629a      	str	r2, [r3, #40]	; 0x28
   19a86:	e003      	b.n	19a90 <prvTraceGetDTS+0x128>
		}
	}
	else
	{
		/* Special case if the recorder has not yet started (frequency may be uninitialized, i.e., zero) */
		RecorderDataPtr->absTimeLastEvent = timestamp;
   19a88:	4b24      	ldr	r3, [pc, #144]	; (19b1c <prvTraceGetDTS+0x1b4>)
   19a8a:	681b      	ldr	r3, [r3, #0]
   19a8c:	68fa      	ldr	r2, [r7, #12]
   19a8e:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* If the dts (time since last event) does not fit in event->dts (only 8 or 16 bits) */
	if (dts > param_maxDTS)
   19a90:	1dbb      	adds	r3, r7, #6
   19a92:	881a      	ldrh	r2, [r3, #0]
   19a94:	693b      	ldr	r3, [r7, #16]
   19a96:	429a      	cmp	r2, r3
   19a98:	d22f      	bcs.n	19afa <prvTraceGetDTS+0x192>
	{
		/* Create an XTS event (eXtended TimeStamp) containing the higher dts bits*/
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
   19a9a:	4b29      	ldr	r3, [pc, #164]	; (19b40 <prvTraceGetDTS+0x1d8>)
   19a9c:	4798      	blx	r3
   19a9e:	0003      	movs	r3, r0
   19aa0:	617b      	str	r3, [r7, #20]

		if (xts != NULL)
   19aa2:	697b      	ldr	r3, [r7, #20]
   19aa4:	2b00      	cmp	r3, #0
   19aa6:	d028      	beq.n	19afa <prvTraceGetDTS+0x192>
		{
			if (param_maxDTS == 0xFFFF)
   19aa8:	1dbb      	adds	r3, r7, #6
   19aaa:	881b      	ldrh	r3, [r3, #0]
   19aac:	4a18      	ldr	r2, [pc, #96]	; (19b10 <prvTraceGetDTS+0x1a8>)
   19aae:	4293      	cmp	r3, r2
   19ab0:	d10b      	bne.n	19aca <prvTraceGetDTS+0x162>
			{
				xts->type = XTS16;
   19ab2:	697b      	ldr	r3, [r7, #20]
   19ab4:	22a9      	movs	r2, #169	; 0xa9
   19ab6:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
   19ab8:	693b      	ldr	r3, [r7, #16]
   19aba:	0c1b      	lsrs	r3, r3, #16
   19abc:	b29a      	uxth	r2, r3
   19abe:	697b      	ldr	r3, [r7, #20]
   19ac0:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = 0;
   19ac2:	697b      	ldr	r3, [r7, #20]
   19ac4:	2200      	movs	r2, #0
   19ac6:	705a      	strb	r2, [r3, #1]
   19ac8:	e015      	b.n	19af6 <prvTraceGetDTS+0x18e>
			}
			else if (param_maxDTS == 0xFF)
   19aca:	1dbb      	adds	r3, r7, #6
   19acc:	881b      	ldrh	r3, [r3, #0]
   19ace:	2bff      	cmp	r3, #255	; 0xff
   19ad0:	d10d      	bne.n	19aee <prvTraceGetDTS+0x186>
			{
				xts->type = XTS8;
   19ad2:	697b      	ldr	r3, [r7, #20]
   19ad4:	22a8      	movs	r2, #168	; 0xa8
   19ad6:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
   19ad8:	693b      	ldr	r3, [r7, #16]
   19ada:	0a1b      	lsrs	r3, r3, #8
   19adc:	b29a      	uxth	r2, r3
   19ade:	697b      	ldr	r3, [r7, #20]
   19ae0:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
   19ae2:	693b      	ldr	r3, [r7, #16]
   19ae4:	0e1b      	lsrs	r3, r3, #24
   19ae6:	b2da      	uxtb	r2, r3
   19ae8:	697b      	ldr	r3, [r7, #20]
   19aea:	705a      	strb	r2, [r3, #1]
   19aec:	e003      	b.n	19af6 <prvTraceGetDTS+0x18e>
			}
			else
			{
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
   19aee:	4b15      	ldr	r3, [pc, #84]	; (19b44 <prvTraceGetDTS+0x1dc>)
   19af0:	0018      	movs	r0, r3
   19af2:	4b09      	ldr	r3, [pc, #36]	; (19b18 <prvTraceGetDTS+0x1b0>)
   19af4:	4798      	blx	r3
			}
			prvTraceUpdateCounters();
   19af6:	4b14      	ldr	r3, [pc, #80]	; (19b48 <prvTraceGetDTS+0x1e0>)
   19af8:	4798      	blx	r3
		}
	}

	return (uint16_t)dts & param_maxDTS;
   19afa:	693b      	ldr	r3, [r7, #16]
   19afc:	b29b      	uxth	r3, r3
   19afe:	1dba      	adds	r2, r7, #6
   19b00:	8812      	ldrh	r2, [r2, #0]
   19b02:	4013      	ands	r3, r2
   19b04:	b29b      	uxth	r3, r3
}
   19b06:	0018      	movs	r0, r3
   19b08:	46bd      	mov	sp, r7
   19b0a:	b006      	add	sp, #24
   19b0c:	bdb0      	pop	{r4, r5, r7, pc}
   19b0e:	46c0      	nop			; (mov r8, r8)
   19b10:	0000ffff 	.word	0x0000ffff
   19b14:	00038a30 	.word	0x00038a30
   19b18:	00019755 	.word	0x00019755
   19b1c:	20000bfc 	.word	0x20000bfc
   19b20:	20000b58 	.word	0x20000b58
   19b24:	e000e018 	.word	0xe000e018
   19b28:	20004fec 	.word	0x20004fec
   19b2c:	000297a5 	.word	0x000297a5
   19b30:	00019b4d 	.word	0x00019b4d
   19b34:	20000c08 	.word	0x20000c08
   19b38:	000323c9 	.word	0x000323c9
   19b3c:	000324d5 	.word	0x000324d5
   19b40:	0001930d 	.word	0x0001930d
   19b44:	00038a70 	.word	0x00038a70
   19b48:	00019911 	.word	0x00019911

00019b4c <prvTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
   19b4c:	b580      	push	{r7, lr}
   19b4e:	b084      	sub	sp, #16
   19b50:	af00      	add	r7, sp, #0
   19b52:	6078      	str	r0, [r7, #4]
	static uint32_t last_hwtc_count = 0;
	uint32_t hwtc_count = 0;
   19b54:	2300      	movs	r3, #0
   19b56:	60bb      	str	r3, [r7, #8]

#if TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR
	/* systick based timer */
	static uint32_t last_traceTickCount = 0;
	uint32_t traceTickCount = 0;
   19b58:	2300      	movs	r3, #0
   19b5a:	60fb      	str	r3, [r7, #12]
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
	uint32_t diff_scaled = 0;
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
   19b5c:	4b2d      	ldr	r3, [pc, #180]	; (19c14 <prvTracePortGetTimeStamp+0xc8>)
   19b5e:	681b      	ldr	r3, [r3, #0]
   19b60:	2b01      	cmp	r3, #1
   19b62:	d107      	bne.n	19b74 <prvTracePortGetTimeStamp+0x28>
	{
		if (pTimestamp)
   19b64:	687b      	ldr	r3, [r7, #4]
   19b66:	2b00      	cmp	r3, #0
   19b68:	d04f      	beq.n	19c0a <prvTracePortGetTimeStamp+0xbe>
			*pTimestamp = last_timestamp;
   19b6a:	4b2b      	ldr	r3, [pc, #172]	; (19c18 <prvTracePortGetTimeStamp+0xcc>)
   19b6c:	681a      	ldr	r2, [r3, #0]
   19b6e:	687b      	ldr	r3, [r7, #4]
   19b70:	601a      	str	r2, [r3, #0]
		return;
   19b72:	e04a      	b.n	19c0a <prvTracePortGetTimeStamp+0xbe>
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
#elif (TRC_HWTC_TYPE == TRC_OS_TIMER_DECR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR)
	/* Convert decreasing tick count into increasing tick count */
	hwtc_count = (TRC_HWTC_PERIOD) - (TRC_HWTC_COUNT);
   19b74:	4b29      	ldr	r3, [pc, #164]	; (19c1c <prvTracePortGetTimeStamp+0xd0>)
   19b76:	681a      	ldr	r2, [r3, #0]
   19b78:	4b29      	ldr	r3, [pc, #164]	; (19c20 <prvTracePortGetTimeStamp+0xd4>)
   19b7a:	681b      	ldr	r3, [r3, #0]
   19b7c:	1ad3      	subs	r3, r2, r3
   19b7e:	3301      	adds	r3, #1
   19b80:	60bb      	str	r3, [r7, #8]
	}
#endif

#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)
	/* Timestamping is based on a timer that wraps at TRC_HWTC_PERIOD */
	if (last_traceTickCount - uiTraceTickCount - 1 < 0x80000000)
   19b82:	4b28      	ldr	r3, [pc, #160]	; (19c24 <prvTracePortGetTimeStamp+0xd8>)
   19b84:	681a      	ldr	r2, [r3, #0]
   19b86:	4b28      	ldr	r3, [pc, #160]	; (19c28 <prvTracePortGetTimeStamp+0xdc>)
   19b88:	681b      	ldr	r3, [r3, #0]
   19b8a:	1ad3      	subs	r3, r2, r3
   19b8c:	3b01      	subs	r3, #1
   19b8e:	2b00      	cmp	r3, #0
   19b90:	db03      	blt.n	19b9a <prvTracePortGetTimeStamp+0x4e>
	{
		/* This means last_traceTickCount is higher than uiTraceTickCount,
		so we have previously compensated for a missed tick.
		Therefore we use the last stored value because that is more accurate. */
		traceTickCount = last_traceTickCount;
   19b92:	4b24      	ldr	r3, [pc, #144]	; (19c24 <prvTracePortGetTimeStamp+0xd8>)
   19b94:	681b      	ldr	r3, [r3, #0]
   19b96:	60fb      	str	r3, [r7, #12]
   19b98:	e002      	b.n	19ba0 <prvTracePortGetTimeStamp+0x54>
	}
	else
	{
		/* Business as usual */
		traceTickCount = uiTraceTickCount;
   19b9a:	4b23      	ldr	r3, [pc, #140]	; (19c28 <prvTracePortGetTimeStamp+0xdc>)
   19b9c:	681b      	ldr	r3, [r3, #0]
   19b9e:	60fb      	str	r3, [r7, #12]
	}

	/* Check for overflow. May occur if the update of uiTraceTickCount has been
	delayed due to disabled interrupts. */
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
   19ba0:	4b20      	ldr	r3, [pc, #128]	; (19c24 <prvTracePortGetTimeStamp+0xd8>)
   19ba2:	681b      	ldr	r3, [r3, #0]
   19ba4:	68fa      	ldr	r2, [r7, #12]
   19ba6:	429a      	cmp	r2, r3
   19ba8:	d107      	bne.n	19bba <prvTracePortGetTimeStamp+0x6e>
   19baa:	4b20      	ldr	r3, [pc, #128]	; (19c2c <prvTracePortGetTimeStamp+0xe0>)
   19bac:	681b      	ldr	r3, [r3, #0]
   19bae:	68ba      	ldr	r2, [r7, #8]
   19bb0:	429a      	cmp	r2, r3
   19bb2:	d202      	bcs.n	19bba <prvTracePortGetTimeStamp+0x6e>
	{
		/* A trace tick has occurred but not been executed by the kernel, so we compensate manually. */
		traceTickCount++;
   19bb4:	68fb      	ldr	r3, [r7, #12]
   19bb6:	3301      	adds	r3, #1
   19bb8:	60fb      	str	r3, [r7, #12]
	}

	/* Check if the return address is OK, then we perform the calculation. */
	if (pTimestamp)
   19bba:	687b      	ldr	r3, [r7, #4]
   19bbc:	2b00      	cmp	r3, #0
   19bbe:	d016      	beq.n	19bee <prvTracePortGetTimeStamp+0xa2>
	{
		/* Get timestamp from trace ticks. Scale down the period to avoid unwanted overflows. */
		last_timestamp = traceTickCount * ((TRC_HWTC_PERIOD) / (TRC_HWTC_DIVISOR));
   19bc0:	4b16      	ldr	r3, [pc, #88]	; (19c1c <prvTracePortGetTimeStamp+0xd0>)
   19bc2:	681b      	ldr	r3, [r3, #0]
   19bc4:	3301      	adds	r3, #1
   19bc6:	089b      	lsrs	r3, r3, #2
   19bc8:	68fa      	ldr	r2, [r7, #12]
   19bca:	435a      	muls	r2, r3
   19bcc:	4b12      	ldr	r3, [pc, #72]	; (19c18 <prvTracePortGetTimeStamp+0xcc>)
   19bce:	601a      	str	r2, [r3, #0]
		/* Increase timestamp by (hwtc_count + "lost hardware ticks from scaling down period") / TRC_HWTC_DIVISOR. */
		last_timestamp += (hwtc_count + traceTickCount * ((TRC_HWTC_PERIOD) % (TRC_HWTC_DIVISOR))) / (TRC_HWTC_DIVISOR);
   19bd0:	4b12      	ldr	r3, [pc, #72]	; (19c1c <prvTracePortGetTimeStamp+0xd0>)
   19bd2:	681b      	ldr	r3, [r3, #0]
   19bd4:	3301      	adds	r3, #1
   19bd6:	2203      	movs	r2, #3
   19bd8:	4013      	ands	r3, r2
   19bda:	68fa      	ldr	r2, [r7, #12]
   19bdc:	435a      	muls	r2, r3
   19bde:	68bb      	ldr	r3, [r7, #8]
   19be0:	18d3      	adds	r3, r2, r3
   19be2:	089a      	lsrs	r2, r3, #2
   19be4:	4b0c      	ldr	r3, [pc, #48]	; (19c18 <prvTracePortGetTimeStamp+0xcc>)
   19be6:	681b      	ldr	r3, [r3, #0]
   19be8:	18d2      	adds	r2, r2, r3
   19bea:	4b0b      	ldr	r3, [pc, #44]	; (19c18 <prvTracePortGetTimeStamp+0xcc>)
   19bec:	601a      	str	r2, [r3, #0]
	}
	/* Store the previous value */
	last_traceTickCount = traceTickCount;
   19bee:	4b0d      	ldr	r3, [pc, #52]	; (19c24 <prvTracePortGetTimeStamp+0xd8>)
   19bf0:	68fa      	ldr	r2, [r7, #12]
   19bf2:	601a      	str	r2, [r3, #0]
	/* We increase the scaled timestamp by the scaled amount */
	last_timestamp += diff_scaled;
#endif /*(TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
   19bf4:	687b      	ldr	r3, [r7, #4]
   19bf6:	2b00      	cmp	r3, #0
   19bf8:	d003      	beq.n	19c02 <prvTracePortGetTimeStamp+0xb6>
		*pTimestamp = last_timestamp;
   19bfa:	4b07      	ldr	r3, [pc, #28]	; (19c18 <prvTracePortGetTimeStamp+0xcc>)
   19bfc:	681a      	ldr	r2, [r3, #0]
   19bfe:	687b      	ldr	r3, [r7, #4]
   19c00:	601a      	str	r2, [r3, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
   19c02:	4b0a      	ldr	r3, [pc, #40]	; (19c2c <prvTracePortGetTimeStamp+0xe0>)
   19c04:	68ba      	ldr	r2, [r7, #8]
   19c06:	601a      	str	r2, [r3, #0]
   19c08:	e000      	b.n	19c0c <prvTracePortGetTimeStamp+0xc0>
		return;
   19c0a:	46c0      	nop			; (mov r8, r8)
}
   19c0c:	46bd      	mov	sp, r7
   19c0e:	b004      	add	sp, #16
   19c10:	bd80      	pop	{r7, pc}
   19c12:	46c0      	nop			; (mov r8, r8)
   19c14:	20000b48 	.word	0x20000b48
   19c18:	20000b4c 	.word	0x20000b4c
   19c1c:	e000e014 	.word	0xe000e014
   19c20:	e000e018 	.word	0xe000e018
   19c24:	20000c0c 	.word	0x20000c0c
   19c28:	20000b44 	.word	0x20000b44
   19c2c:	20000c10 	.word	0x20000c10

00019c30 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
   19c30:	b580      	push	{r7, lr}
   19c32:	b082      	sub	sp, #8
   19c34:	af00      	add	r7, sp, #0
   19c36:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   19c38:	687b      	ldr	r3, [r7, #4]
   19c3a:	3308      	adds	r3, #8
   19c3c:	001a      	movs	r2, r3
   19c3e:	687b      	ldr	r3, [r7, #4]
   19c40:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   19c42:	687b      	ldr	r3, [r7, #4]
   19c44:	2201      	movs	r2, #1
   19c46:	4252      	negs	r2, r2
   19c48:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   19c4a:	687b      	ldr	r3, [r7, #4]
   19c4c:	3308      	adds	r3, #8
   19c4e:	001a      	movs	r2, r3
   19c50:	687b      	ldr	r3, [r7, #4]
   19c52:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   19c54:	687b      	ldr	r3, [r7, #4]
   19c56:	3308      	adds	r3, #8
   19c58:	001a      	movs	r2, r3
   19c5a:	687b      	ldr	r3, [r7, #4]
   19c5c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   19c5e:	687b      	ldr	r3, [r7, #4]
   19c60:	2200      	movs	r2, #0
   19c62:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
   19c64:	46c0      	nop			; (mov r8, r8)
   19c66:	46bd      	mov	sp, r7
   19c68:	b002      	add	sp, #8
   19c6a:	bd80      	pop	{r7, pc}

00019c6c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
   19c6c:	b580      	push	{r7, lr}
   19c6e:	b082      	sub	sp, #8
   19c70:	af00      	add	r7, sp, #0
   19c72:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   19c74:	687b      	ldr	r3, [r7, #4]
   19c76:	2200      	movs	r2, #0
   19c78:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
   19c7a:	46c0      	nop			; (mov r8, r8)
   19c7c:	46bd      	mov	sp, r7
   19c7e:	b002      	add	sp, #8
   19c80:	bd80      	pop	{r7, pc}

00019c82 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   19c82:	b580      	push	{r7, lr}
   19c84:	b084      	sub	sp, #16
   19c86:	af00      	add	r7, sp, #0
   19c88:	6078      	str	r0, [r7, #4]
   19c8a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
   19c8c:	687b      	ldr	r3, [r7, #4]
   19c8e:	685b      	ldr	r3, [r3, #4]
   19c90:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   19c92:	683b      	ldr	r3, [r7, #0]
   19c94:	68fa      	ldr	r2, [r7, #12]
   19c96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   19c98:	68fb      	ldr	r3, [r7, #12]
   19c9a:	689a      	ldr	r2, [r3, #8]
   19c9c:	683b      	ldr	r3, [r7, #0]
   19c9e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
   19ca0:	68fb      	ldr	r3, [r7, #12]
   19ca2:	689b      	ldr	r3, [r3, #8]
   19ca4:	683a      	ldr	r2, [r7, #0]
   19ca6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
   19ca8:	68fb      	ldr	r3, [r7, #12]
   19caa:	683a      	ldr	r2, [r7, #0]
   19cac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   19cae:	683b      	ldr	r3, [r7, #0]
   19cb0:	687a      	ldr	r2, [r7, #4]
   19cb2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   19cb4:	687b      	ldr	r3, [r7, #4]
   19cb6:	681b      	ldr	r3, [r3, #0]
   19cb8:	1c5a      	adds	r2, r3, #1
   19cba:	687b      	ldr	r3, [r7, #4]
   19cbc:	601a      	str	r2, [r3, #0]
}
   19cbe:	46c0      	nop			; (mov r8, r8)
   19cc0:	46bd      	mov	sp, r7
   19cc2:	b004      	add	sp, #16
   19cc4:	bd80      	pop	{r7, pc}

00019cc6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   19cc6:	b580      	push	{r7, lr}
   19cc8:	b084      	sub	sp, #16
   19cca:	af00      	add	r7, sp, #0
   19ccc:	6078      	str	r0, [r7, #4]
   19cce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   19cd0:	683b      	ldr	r3, [r7, #0]
   19cd2:	681b      	ldr	r3, [r3, #0]
   19cd4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   19cd6:	68bb      	ldr	r3, [r7, #8]
   19cd8:	3301      	adds	r3, #1
   19cda:	d103      	bne.n	19ce4 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   19cdc:	687b      	ldr	r3, [r7, #4]
   19cde:	691b      	ldr	r3, [r3, #16]
   19ce0:	60fb      	str	r3, [r7, #12]
   19ce2:	e00c      	b.n	19cfe <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   19ce4:	687b      	ldr	r3, [r7, #4]
   19ce6:	3308      	adds	r3, #8
   19ce8:	60fb      	str	r3, [r7, #12]
   19cea:	e002      	b.n	19cf2 <vListInsert+0x2c>
   19cec:	68fb      	ldr	r3, [r7, #12]
   19cee:	685b      	ldr	r3, [r3, #4]
   19cf0:	60fb      	str	r3, [r7, #12]
   19cf2:	68fb      	ldr	r3, [r7, #12]
   19cf4:	685b      	ldr	r3, [r3, #4]
   19cf6:	681a      	ldr	r2, [r3, #0]
   19cf8:	68bb      	ldr	r3, [r7, #8]
   19cfa:	429a      	cmp	r2, r3
   19cfc:	d9f6      	bls.n	19cec <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   19cfe:	68fb      	ldr	r3, [r7, #12]
   19d00:	685a      	ldr	r2, [r3, #4]
   19d02:	683b      	ldr	r3, [r7, #0]
   19d04:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   19d06:	683b      	ldr	r3, [r7, #0]
   19d08:	685b      	ldr	r3, [r3, #4]
   19d0a:	683a      	ldr	r2, [r7, #0]
   19d0c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   19d0e:	683b      	ldr	r3, [r7, #0]
   19d10:	68fa      	ldr	r2, [r7, #12]
   19d12:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
   19d14:	68fb      	ldr	r3, [r7, #12]
   19d16:	683a      	ldr	r2, [r7, #0]
   19d18:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   19d1a:	683b      	ldr	r3, [r7, #0]
   19d1c:	687a      	ldr	r2, [r7, #4]
   19d1e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   19d20:	687b      	ldr	r3, [r7, #4]
   19d22:	681b      	ldr	r3, [r3, #0]
   19d24:	1c5a      	adds	r2, r3, #1
   19d26:	687b      	ldr	r3, [r7, #4]
   19d28:	601a      	str	r2, [r3, #0]
}
   19d2a:	46c0      	nop			; (mov r8, r8)
   19d2c:	46bd      	mov	sp, r7
   19d2e:	b004      	add	sp, #16
   19d30:	bd80      	pop	{r7, pc}

00019d32 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
   19d32:	b580      	push	{r7, lr}
   19d34:	b084      	sub	sp, #16
   19d36:	af00      	add	r7, sp, #0
   19d38:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
   19d3a:	687b      	ldr	r3, [r7, #4]
   19d3c:	691b      	ldr	r3, [r3, #16]
   19d3e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   19d40:	687b      	ldr	r3, [r7, #4]
   19d42:	685b      	ldr	r3, [r3, #4]
   19d44:	687a      	ldr	r2, [r7, #4]
   19d46:	6892      	ldr	r2, [r2, #8]
   19d48:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   19d4a:	687b      	ldr	r3, [r7, #4]
   19d4c:	689b      	ldr	r3, [r3, #8]
   19d4e:	687a      	ldr	r2, [r7, #4]
   19d50:	6852      	ldr	r2, [r2, #4]
   19d52:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   19d54:	68fb      	ldr	r3, [r7, #12]
   19d56:	685a      	ldr	r2, [r3, #4]
   19d58:	687b      	ldr	r3, [r7, #4]
   19d5a:	429a      	cmp	r2, r3
   19d5c:	d103      	bne.n	19d66 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   19d5e:	687b      	ldr	r3, [r7, #4]
   19d60:	689a      	ldr	r2, [r3, #8]
   19d62:	68fb      	ldr	r3, [r7, #12]
   19d64:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
   19d66:	687b      	ldr	r3, [r7, #4]
   19d68:	2200      	movs	r2, #0
   19d6a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   19d6c:	68fb      	ldr	r3, [r7, #12]
   19d6e:	681b      	ldr	r3, [r3, #0]
   19d70:	1e5a      	subs	r2, r3, #1
   19d72:	68fb      	ldr	r3, [r7, #12]
   19d74:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   19d76:	68fb      	ldr	r3, [r7, #12]
   19d78:	681b      	ldr	r3, [r3, #0]
}
   19d7a:	0018      	movs	r0, r3
   19d7c:	46bd      	mov	sp, r7
   19d7e:	b004      	add	sp, #16
   19d80:	bd80      	pop	{r7, pc}
	...

00019d84 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
   19d84:	b580      	push	{r7, lr}
   19d86:	b084      	sub	sp, #16
   19d88:	af00      	add	r7, sp, #0
   19d8a:	60f8      	str	r0, [r7, #12]
   19d8c:	60b9      	str	r1, [r7, #8]
   19d8e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
   19d90:	68fb      	ldr	r3, [r7, #12]
   19d92:	3b04      	subs	r3, #4
   19d94:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   19d96:	68fb      	ldr	r3, [r7, #12]
   19d98:	2280      	movs	r2, #128	; 0x80
   19d9a:	0452      	lsls	r2, r2, #17
   19d9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   19d9e:	68fb      	ldr	r3, [r7, #12]
   19da0:	3b04      	subs	r3, #4
   19da2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
   19da4:	68ba      	ldr	r2, [r7, #8]
   19da6:	68fb      	ldr	r3, [r7, #12]
   19da8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   19daa:	68fb      	ldr	r3, [r7, #12]
   19dac:	3b04      	subs	r3, #4
   19dae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   19db0:	4a08      	ldr	r2, [pc, #32]	; (19dd4 <pxPortInitialiseStack+0x50>)
   19db2:	68fb      	ldr	r3, [r7, #12]
   19db4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
   19db6:	68fb      	ldr	r3, [r7, #12]
   19db8:	3b14      	subs	r3, #20
   19dba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   19dbc:	687a      	ldr	r2, [r7, #4]
   19dbe:	68fb      	ldr	r3, [r7, #12]
   19dc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
   19dc2:	68fb      	ldr	r3, [r7, #12]
   19dc4:	3b20      	subs	r3, #32
   19dc6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
   19dc8:	68fb      	ldr	r3, [r7, #12]
}
   19dca:	0018      	movs	r0, r3
   19dcc:	46bd      	mov	sp, r7
   19dce:	b004      	add	sp, #16
   19dd0:	bd80      	pop	{r7, pc}
   19dd2:	46c0      	nop			; (mov r8, r8)
   19dd4:	00019dd9 	.word	0x00019dd9

00019dd8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   19dd8:	b580      	push	{r7, lr}
   19dda:	b082      	sub	sp, #8
   19ddc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
   19dde:	2300      	movs	r3, #0
   19de0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   19de2:	4b07      	ldr	r3, [pc, #28]	; (19e00 <prvTaskExitError+0x28>)
   19de4:	681b      	ldr	r3, [r3, #0]
   19de6:	3301      	adds	r3, #1
   19de8:	d001      	beq.n	19dee <prvTaskExitError+0x16>
   19dea:	b672      	cpsid	i
   19dec:	e7fe      	b.n	19dec <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
   19dee:	b672      	cpsid	i
	while( ulDummy == 0 )
   19df0:	46c0      	nop			; (mov r8, r8)
   19df2:	687b      	ldr	r3, [r7, #4]
   19df4:	2b00      	cmp	r3, #0
   19df6:	d0fc      	beq.n	19df2 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
   19df8:	46c0      	nop			; (mov r8, r8)
   19dfa:	46bd      	mov	sp, r7
   19dfc:	b002      	add	sp, #8
   19dfe:	bd80      	pop	{r7, pc}
   19e00:	200000d0 	.word	0x200000d0

00019e04 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
   19e04:	b580      	push	{r7, lr}
   19e06:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
   19e08:	46c0      	nop			; (mov r8, r8)
   19e0a:	46bd      	mov	sp, r7
   19e0c:	bd80      	pop	{r7, pc}
	...

00019e10 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
   19e10:	4a0b      	ldr	r2, [pc, #44]	; (19e40 <pxCurrentTCBConst2>)
   19e12:	6813      	ldr	r3, [r2, #0]
   19e14:	6818      	ldr	r0, [r3, #0]
   19e16:	3020      	adds	r0, #32
   19e18:	f380 8809 	msr	PSP, r0
   19e1c:	2002      	movs	r0, #2
   19e1e:	f380 8814 	msr	CONTROL, r0
   19e22:	f3bf 8f6f 	isb	sy
   19e26:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
   19e28:	46ae      	mov	lr, r5
   19e2a:	bc08      	pop	{r3}
   19e2c:	bc04      	pop	{r2}
   19e2e:	b662      	cpsie	i
   19e30:	4718      	bx	r3
   19e32:	46c0      	nop			; (mov r8, r8)
   19e34:	46c0      	nop			; (mov r8, r8)
   19e36:	46c0      	nop			; (mov r8, r8)
   19e38:	46c0      	nop			; (mov r8, r8)
   19e3a:	46c0      	nop			; (mov r8, r8)
   19e3c:	46c0      	nop			; (mov r8, r8)
   19e3e:	46c0      	nop			; (mov r8, r8)

00019e40 <pxCurrentTCBConst2>:
   19e40:	20003afc 	.word	0x20003afc
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
   19e44:	46c0      	nop			; (mov r8, r8)
   19e46:	46c0      	nop			; (mov r8, r8)

00019e48 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
   19e48:	b580      	push	{r7, lr}
   19e4a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
   19e4c:	4b0e      	ldr	r3, [pc, #56]	; (19e88 <xPortStartScheduler+0x40>)
   19e4e:	4a0e      	ldr	r2, [pc, #56]	; (19e88 <xPortStartScheduler+0x40>)
   19e50:	6812      	ldr	r2, [r2, #0]
   19e52:	21ff      	movs	r1, #255	; 0xff
   19e54:	0409      	lsls	r1, r1, #16
   19e56:	430a      	orrs	r2, r1
   19e58:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
   19e5a:	4b0b      	ldr	r3, [pc, #44]	; (19e88 <xPortStartScheduler+0x40>)
   19e5c:	4a0a      	ldr	r2, [pc, #40]	; (19e88 <xPortStartScheduler+0x40>)
   19e5e:	6812      	ldr	r2, [r2, #0]
   19e60:	21ff      	movs	r1, #255	; 0xff
   19e62:	0609      	lsls	r1, r1, #24
   19e64:	430a      	orrs	r2, r1
   19e66:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
   19e68:	4b08      	ldr	r3, [pc, #32]	; (19e8c <xPortStartScheduler+0x44>)
   19e6a:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   19e6c:	4b08      	ldr	r3, [pc, #32]	; (19e90 <xPortStartScheduler+0x48>)
   19e6e:	2200      	movs	r2, #0
   19e70:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
   19e72:	4b08      	ldr	r3, [pc, #32]	; (19e94 <xPortStartScheduler+0x4c>)
   19e74:	4798      	blx	r3
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
   19e76:	4b08      	ldr	r3, [pc, #32]	; (19e98 <xPortStartScheduler+0x50>)
   19e78:	4798      	blx	r3
	prvTaskExitError();
   19e7a:	4b08      	ldr	r3, [pc, #32]	; (19e9c <xPortStartScheduler+0x54>)
   19e7c:	4798      	blx	r3

	/* Should not get here! */
	return 0;
   19e7e:	2300      	movs	r3, #0
}
   19e80:	0018      	movs	r0, r3
   19e82:	46bd      	mov	sp, r7
   19e84:	bd80      	pop	{r7, pc}
   19e86:	46c0      	nop			; (mov r8, r8)
   19e88:	e000ed20 	.word	0xe000ed20
   19e8c:	00019fa9 	.word	0x00019fa9
   19e90:	200000d0 	.word	0x200000d0
   19e94:	00019e11 	.word	0x00019e11
   19e98:	0001c509 	.word	0x0001c509
   19e9c:	00019dd9 	.word	0x00019dd9

00019ea0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
   19ea0:	b580      	push	{r7, lr}
   19ea2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
   19ea4:	4b03      	ldr	r3, [pc, #12]	; (19eb4 <vPortYield+0x14>)
   19ea6:	2280      	movs	r2, #128	; 0x80
   19ea8:	0552      	lsls	r2, r2, #21
   19eaa:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	//__asm volatile( "dsb" ::: "memory" );
	//__asm volatile( "isb" );
}
   19eac:	46c0      	nop			; (mov r8, r8)
   19eae:	46bd      	mov	sp, r7
   19eb0:	bd80      	pop	{r7, pc}
   19eb2:	46c0      	nop			; (mov r8, r8)
   19eb4:	e000ed04 	.word	0xe000ed04

00019eb8 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   19eb8:	b580      	push	{r7, lr}
   19eba:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
   19ebc:	b672      	cpsid	i
    uxCriticalNesting++;
   19ebe:	4b06      	ldr	r3, [pc, #24]	; (19ed8 <vPortEnterCritical+0x20>)
   19ec0:	681b      	ldr	r3, [r3, #0]
   19ec2:	1c5a      	adds	r2, r3, #1
   19ec4:	4b04      	ldr	r3, [pc, #16]	; (19ed8 <vPortEnterCritical+0x20>)
   19ec6:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
   19ec8:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   19ecc:	f3bf 8f6f 	isb	sy
}
   19ed0:	46c0      	nop			; (mov r8, r8)
   19ed2:	46bd      	mov	sp, r7
   19ed4:	bd80      	pop	{r7, pc}
   19ed6:	46c0      	nop			; (mov r8, r8)
   19ed8:	200000d0 	.word	0x200000d0

00019edc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   19edc:	b580      	push	{r7, lr}
   19ede:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
   19ee0:	4b09      	ldr	r3, [pc, #36]	; (19f08 <vPortExitCritical+0x2c>)
   19ee2:	681b      	ldr	r3, [r3, #0]
   19ee4:	2b00      	cmp	r3, #0
   19ee6:	d101      	bne.n	19eec <vPortExitCritical+0x10>
   19ee8:	b672      	cpsid	i
   19eea:	e7fe      	b.n	19eea <vPortExitCritical+0xe>
    uxCriticalNesting--;
   19eec:	4b06      	ldr	r3, [pc, #24]	; (19f08 <vPortExitCritical+0x2c>)
   19eee:	681b      	ldr	r3, [r3, #0]
   19ef0:	1e5a      	subs	r2, r3, #1
   19ef2:	4b05      	ldr	r3, [pc, #20]	; (19f08 <vPortExitCritical+0x2c>)
   19ef4:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
   19ef6:	4b04      	ldr	r3, [pc, #16]	; (19f08 <vPortExitCritical+0x2c>)
   19ef8:	681b      	ldr	r3, [r3, #0]
   19efa:	2b00      	cmp	r3, #0
   19efc:	d100      	bne.n	19f00 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
   19efe:	b662      	cpsie	i
    }
}
   19f00:	46c0      	nop			; (mov r8, r8)
   19f02:	46bd      	mov	sp, r7
   19f04:	bd80      	pop	{r7, pc}
   19f06:	46c0      	nop			; (mov r8, r8)
   19f08:	200000d0 	.word	0x200000d0

00019f0c <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
   19f0c:	f3ef 8010 	mrs	r0, PRIMASK
   19f10:	b672      	cpsid	i
   19f12:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
   19f14:	46c0      	nop			; (mov r8, r8)
   19f16:	0018      	movs	r0, r3

00019f18 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
   19f18:	f380 8810 	msr	PRIMASK, r0
   19f1c:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
   19f1e:	46c0      	nop			; (mov r8, r8)

00019f20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   19f20:	f3ef 8009 	mrs	r0, PSP
   19f24:	4b0e      	ldr	r3, [pc, #56]	; (19f60 <pxCurrentTCBConst>)
   19f26:	681a      	ldr	r2, [r3, #0]
   19f28:	3820      	subs	r0, #32
   19f2a:	6010      	str	r0, [r2, #0]
   19f2c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   19f2e:	4644      	mov	r4, r8
   19f30:	464d      	mov	r5, r9
   19f32:	4656      	mov	r6, sl
   19f34:	465f      	mov	r7, fp
   19f36:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   19f38:	b508      	push	{r3, lr}
   19f3a:	b672      	cpsid	i
   19f3c:	f002 fae4 	bl	1c508 <vTaskSwitchContext>
   19f40:	b662      	cpsie	i
   19f42:	bc0c      	pop	{r2, r3}
   19f44:	6811      	ldr	r1, [r2, #0]
   19f46:	6808      	ldr	r0, [r1, #0]
   19f48:	3010      	adds	r0, #16
   19f4a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   19f4c:	46a0      	mov	r8, r4
   19f4e:	46a9      	mov	r9, r5
   19f50:	46b2      	mov	sl, r6
   19f52:	46bb      	mov	fp, r7
   19f54:	f380 8809 	msr	PSP, r0
   19f58:	3820      	subs	r0, #32
   19f5a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   19f5c:	4718      	bx	r3
   19f5e:	46c0      	nop			; (mov r8, r8)

00019f60 <pxCurrentTCBConst>:
   19f60:	20003afc 	.word	0x20003afc
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
   19f64:	46c0      	nop			; (mov r8, r8)
   19f66:	46c0      	nop			; (mov r8, r8)

00019f68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
   19f68:	b580      	push	{r7, lr}
   19f6a:	b082      	sub	sp, #8
   19f6c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
   19f6e:	4b0a      	ldr	r3, [pc, #40]	; (19f98 <SysTick_Handler+0x30>)
   19f70:	4798      	blx	r3
   19f72:	0003      	movs	r3, r0
   19f74:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
   19f76:	4b09      	ldr	r3, [pc, #36]	; (19f9c <SysTick_Handler+0x34>)
   19f78:	4798      	blx	r3
   19f7a:	1e03      	subs	r3, r0, #0
   19f7c:	d003      	beq.n	19f86 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
   19f7e:	4b08      	ldr	r3, [pc, #32]	; (19fa0 <SysTick_Handler+0x38>)
   19f80:	2280      	movs	r2, #128	; 0x80
   19f82:	0552      	lsls	r2, r2, #21
   19f84:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
   19f86:	687b      	ldr	r3, [r7, #4]
   19f88:	0018      	movs	r0, r3
   19f8a:	4b06      	ldr	r3, [pc, #24]	; (19fa4 <SysTick_Handler+0x3c>)
   19f8c:	4798      	blx	r3
}
   19f8e:	46c0      	nop			; (mov r8, r8)
   19f90:	46bd      	mov	sp, r7
   19f92:	b002      	add	sp, #8
   19f94:	bd80      	pop	{r7, pc}
   19f96:	46c0      	nop			; (mov r8, r8)
   19f98:	00019f0d 	.word	0x00019f0d
   19f9c:	0001c319 	.word	0x0001c319
   19fa0:	e000ed04 	.word	0xe000ed04
   19fa4:	00019f19 	.word	0x00019f19

00019fa8 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
   19fa8:	b5b0      	push	{r4, r5, r7, lr}
   19faa:	af00      	add	r7, sp, #0
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
   19fac:	4b0b      	ldr	r3, [pc, #44]	; (19fdc <prvSetupTimerInterrupt+0x34>)
   19fae:	2200      	movs	r2, #0
   19fb0:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
   19fb2:	4b0b      	ldr	r3, [pc, #44]	; (19fe0 <prvSetupTimerInterrupt+0x38>)
   19fb4:	2200      	movs	r2, #0
   19fb6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
   19fb8:	4c0a      	ldr	r4, [pc, #40]	; (19fe4 <prvSetupTimerInterrupt+0x3c>)
   19fba:	2000      	movs	r0, #0
   19fbc:	4b0a      	ldr	r3, [pc, #40]	; (19fe8 <prvSetupTimerInterrupt+0x40>)
   19fbe:	4798      	blx	r3
   19fc0:	4b0a      	ldr	r3, [pc, #40]	; (19fec <prvSetupTimerInterrupt+0x44>)
   19fc2:	22fa      	movs	r2, #250	; 0xfa
   19fc4:	0091      	lsls	r1, r2, #2
   19fc6:	4798      	blx	r3
   19fc8:	0003      	movs	r3, r0
   19fca:	3b01      	subs	r3, #1
   19fcc:	6023      	str	r3, [r4, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
   19fce:	4b03      	ldr	r3, [pc, #12]	; (19fdc <prvSetupTimerInterrupt+0x34>)
   19fd0:	2207      	movs	r2, #7
   19fd2:	601a      	str	r2, [r3, #0]
}
   19fd4:	46c0      	nop			; (mov r8, r8)
   19fd6:	46bd      	mov	sp, r7
   19fd8:	bdb0      	pop	{r4, r5, r7, pc}
   19fda:	46c0      	nop			; (mov r8, r8)
   19fdc:	e000e010 	.word	0xe000e010
   19fe0:	e000e018 	.word	0xe000e018
   19fe4:	e000e014 	.word	0xe000e014
   19fe8:	000297a5 	.word	0x000297a5
   19fec:	000323c9 	.word	0x000323c9

00019ff0 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   19ff0:	b580      	push	{r7, lr}
   19ff2:	b084      	sub	sp, #16
   19ff4:	af00      	add	r7, sp, #0
   19ff6:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
   19ff8:	2300      	movs	r3, #0
   19ffa:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   19ffc:	687b      	ldr	r3, [r7, #4]
   19ffe:	2207      	movs	r2, #7
   1a000:	4013      	ands	r3, r2
   1a002:	d004      	beq.n	1a00e <pvPortMalloc+0x1e>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   1a004:	687b      	ldr	r3, [r7, #4]
   1a006:	2207      	movs	r2, #7
   1a008:	4393      	bics	r3, r2
   1a00a:	3308      	adds	r3, #8
   1a00c:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
   1a00e:	4b21      	ldr	r3, [pc, #132]	; (1a094 <pvPortMalloc+0xa4>)
   1a010:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
   1a012:	4b21      	ldr	r3, [pc, #132]	; (1a098 <pvPortMalloc+0xa8>)
   1a014:	681b      	ldr	r3, [r3, #0]
   1a016:	2b00      	cmp	r3, #0
   1a018:	d105      	bne.n	1a026 <pvPortMalloc+0x36>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
   1a01a:	4b20      	ldr	r3, [pc, #128]	; (1a09c <pvPortMalloc+0xac>)
   1a01c:	2207      	movs	r2, #7
   1a01e:	4393      	bics	r3, r2
   1a020:	001a      	movs	r2, r3
   1a022:	4b1d      	ldr	r3, [pc, #116]	; (1a098 <pvPortMalloc+0xa8>)
   1a024:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   1a026:	4b1e      	ldr	r3, [pc, #120]	; (1a0a0 <pvPortMalloc+0xb0>)
   1a028:	681a      	ldr	r2, [r3, #0]
   1a02a:	687b      	ldr	r3, [r7, #4]
   1a02c:	18d3      	adds	r3, r2, r3
   1a02e:	4a1d      	ldr	r2, [pc, #116]	; (1a0a4 <pvPortMalloc+0xb4>)
   1a030:	4293      	cmp	r3, r2
   1a032:	d813      	bhi.n	1a05c <pvPortMalloc+0x6c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
   1a034:	4b1a      	ldr	r3, [pc, #104]	; (1a0a0 <pvPortMalloc+0xb0>)
   1a036:	681a      	ldr	r2, [r3, #0]
   1a038:	687b      	ldr	r3, [r7, #4]
   1a03a:	18d2      	adds	r2, r2, r3
   1a03c:	4b18      	ldr	r3, [pc, #96]	; (1a0a0 <pvPortMalloc+0xb0>)
   1a03e:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   1a040:	429a      	cmp	r2, r3
   1a042:	d90b      	bls.n	1a05c <pvPortMalloc+0x6c>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
   1a044:	4b14      	ldr	r3, [pc, #80]	; (1a098 <pvPortMalloc+0xa8>)
   1a046:	681a      	ldr	r2, [r3, #0]
   1a048:	4b15      	ldr	r3, [pc, #84]	; (1a0a0 <pvPortMalloc+0xb0>)
   1a04a:	681b      	ldr	r3, [r3, #0]
   1a04c:	18d3      	adds	r3, r2, r3
   1a04e:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
   1a050:	4b13      	ldr	r3, [pc, #76]	; (1a0a0 <pvPortMalloc+0xb0>)
   1a052:	681a      	ldr	r2, [r3, #0]
   1a054:	687b      	ldr	r3, [r7, #4]
   1a056:	18d2      	adds	r2, r2, r3
   1a058:	4b11      	ldr	r3, [pc, #68]	; (1a0a0 <pvPortMalloc+0xb0>)
   1a05a:	601a      	str	r2, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
   1a05c:	68fb      	ldr	r3, [r7, #12]
   1a05e:	2b00      	cmp	r3, #0
   1a060:	d006      	beq.n	1a070 <pvPortMalloc+0x80>
   1a062:	68fb      	ldr	r3, [r7, #12]
   1a064:	687a      	ldr	r2, [r7, #4]
   1a066:	0019      	movs	r1, r3
   1a068:	2094      	movs	r0, #148	; 0x94
   1a06a:	4b0f      	ldr	r3, [pc, #60]	; (1a0a8 <pvPortMalloc+0xb8>)
   1a06c:	4798      	blx	r3
   1a06e:	e005      	b.n	1a07c <pvPortMalloc+0x8c>
   1a070:	68fb      	ldr	r3, [r7, #12]
   1a072:	687a      	ldr	r2, [r7, #4]
   1a074:	0019      	movs	r1, r3
   1a076:	20e8      	movs	r0, #232	; 0xe8
   1a078:	4b0b      	ldr	r3, [pc, #44]	; (1a0a8 <pvPortMalloc+0xb8>)
   1a07a:	4798      	blx	r3
	}
	( void ) xTaskResumeAll();
   1a07c:	4b0b      	ldr	r3, [pc, #44]	; (1a0ac <pvPortMalloc+0xbc>)
   1a07e:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
   1a080:	68fb      	ldr	r3, [r7, #12]
   1a082:	2b00      	cmp	r3, #0
   1a084:	d101      	bne.n	1a08a <pvPortMalloc+0x9a>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
   1a086:	4b0a      	ldr	r3, [pc, #40]	; (1a0b0 <pvPortMalloc+0xc0>)
   1a088:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
   1a08a:	68fb      	ldr	r3, [r7, #12]
}
   1a08c:	0018      	movs	r0, r3
   1a08e:	46bd      	mov	sp, r7
   1a090:	b004      	add	sp, #16
   1a092:	bd80      	pop	{r7, pc}
   1a094:	0001c175 	.word	0x0001c175
   1a098:	20003af8 	.word	0x20003af8
   1a09c:	20000c1c 	.word	0x20000c1c
   1a0a0:	20003af4 	.word	0x20003af4
   1a0a4:	00002ed7 	.word	0x00002ed7
   1a0a8:	00018761 	.word	0x00018761
   1a0ac:	0001c18d 	.word	0x0001c18d
   1a0b0:	00032399 	.word	0x00032399

0001a0b4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   1a0b4:	b580      	push	{r7, lr}
   1a0b6:	b082      	sub	sp, #8
   1a0b8:	af00      	add	r7, sp, #0
   1a0ba:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
   1a0bc:	687b      	ldr	r3, [r7, #4]
   1a0be:	2b00      	cmp	r3, #0
   1a0c0:	d001      	beq.n	1a0c6 <vPortFree+0x12>
   1a0c2:	b672      	cpsid	i
   1a0c4:	e7fe      	b.n	1a0c4 <vPortFree+0x10>
}
   1a0c6:	46c0      	nop			; (mov r8, r8)
   1a0c8:	46bd      	mov	sp, r7
   1a0ca:	b002      	add	sp, #8
   1a0cc:	bd80      	pop	{r7, pc}
	...

0001a0d0 <xPortGetFreeHeapSize>:
	xNextFreeByte = ( size_t ) 0;
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
   1a0d0:	b580      	push	{r7, lr}
   1a0d2:	af00      	add	r7, sp, #0
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
   1a0d4:	4b03      	ldr	r3, [pc, #12]	; (1a0e4 <xPortGetFreeHeapSize+0x14>)
   1a0d6:	681b      	ldr	r3, [r3, #0]
   1a0d8:	4a03      	ldr	r2, [pc, #12]	; (1a0e8 <xPortGetFreeHeapSize+0x18>)
   1a0da:	1ad3      	subs	r3, r2, r3
}
   1a0dc:	0018      	movs	r0, r3
   1a0de:	46bd      	mov	sp, r7
   1a0e0:	bd80      	pop	{r7, pc}
   1a0e2:	46c0      	nop			; (mov r8, r8)
   1a0e4:	20003af4 	.word	0x20003af4
   1a0e8:	00002ed8 	.word	0x00002ed8

0001a0ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
   1a0ec:	b580      	push	{r7, lr}
   1a0ee:	b084      	sub	sp, #16
   1a0f0:	af00      	add	r7, sp, #0
   1a0f2:	6078      	str	r0, [r7, #4]
   1a0f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1a0f6:	687b      	ldr	r3, [r7, #4]
   1a0f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
   1a0fa:	68fb      	ldr	r3, [r7, #12]
   1a0fc:	2b00      	cmp	r3, #0
   1a0fe:	d101      	bne.n	1a104 <xQueueGenericReset+0x18>
   1a100:	b672      	cpsid	i
   1a102:	e7fe      	b.n	1a102 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
   1a104:	4b23      	ldr	r3, [pc, #140]	; (1a194 <xQueueGenericReset+0xa8>)
   1a106:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   1a108:	68fb      	ldr	r3, [r7, #12]
   1a10a:	681a      	ldr	r2, [r3, #0]
   1a10c:	68fb      	ldr	r3, [r7, #12]
   1a10e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   1a110:	68fb      	ldr	r3, [r7, #12]
   1a112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1a114:	434b      	muls	r3, r1
   1a116:	18d2      	adds	r2, r2, r3
   1a118:	68fb      	ldr	r3, [r7, #12]
   1a11a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   1a11c:	68fb      	ldr	r3, [r7, #12]
   1a11e:	2200      	movs	r2, #0
   1a120:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   1a122:	68fb      	ldr	r3, [r7, #12]
   1a124:	681a      	ldr	r2, [r3, #0]
   1a126:	68fb      	ldr	r3, [r7, #12]
   1a128:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
   1a12a:	68fb      	ldr	r3, [r7, #12]
   1a12c:	681a      	ldr	r2, [r3, #0]
   1a12e:	68fb      	ldr	r3, [r7, #12]
   1a130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1a132:	1e59      	subs	r1, r3, #1
   1a134:	68fb      	ldr	r3, [r7, #12]
   1a136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1a138:	434b      	muls	r3, r1
   1a13a:	18d2      	adds	r2, r2, r3
   1a13c:	68fb      	ldr	r3, [r7, #12]
   1a13e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
   1a140:	68fb      	ldr	r3, [r7, #12]
   1a142:	2244      	movs	r2, #68	; 0x44
   1a144:	21ff      	movs	r1, #255	; 0xff
   1a146:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
   1a148:	68fb      	ldr	r3, [r7, #12]
   1a14a:	2245      	movs	r2, #69	; 0x45
   1a14c:	21ff      	movs	r1, #255	; 0xff
   1a14e:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
   1a150:	683b      	ldr	r3, [r7, #0]
   1a152:	2b00      	cmp	r3, #0
   1a154:	d10d      	bne.n	1a172 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1a156:	68fb      	ldr	r3, [r7, #12]
   1a158:	691b      	ldr	r3, [r3, #16]
   1a15a:	2b00      	cmp	r3, #0
   1a15c:	d013      	beq.n	1a186 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1a15e:	68fb      	ldr	r3, [r7, #12]
   1a160:	3310      	adds	r3, #16
   1a162:	0018      	movs	r0, r3
   1a164:	4b0c      	ldr	r3, [pc, #48]	; (1a198 <xQueueGenericReset+0xac>)
   1a166:	4798      	blx	r3
   1a168:	1e03      	subs	r3, r0, #0
   1a16a:	d00c      	beq.n	1a186 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
   1a16c:	4b0b      	ldr	r3, [pc, #44]	; (1a19c <xQueueGenericReset+0xb0>)
   1a16e:	4798      	blx	r3
   1a170:	e009      	b.n	1a186 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   1a172:	68fb      	ldr	r3, [r7, #12]
   1a174:	3310      	adds	r3, #16
   1a176:	0018      	movs	r0, r3
   1a178:	4b09      	ldr	r3, [pc, #36]	; (1a1a0 <xQueueGenericReset+0xb4>)
   1a17a:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   1a17c:	68fb      	ldr	r3, [r7, #12]
   1a17e:	3324      	adds	r3, #36	; 0x24
   1a180:	0018      	movs	r0, r3
   1a182:	4b07      	ldr	r3, [pc, #28]	; (1a1a0 <xQueueGenericReset+0xb4>)
   1a184:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
   1a186:	4b07      	ldr	r3, [pc, #28]	; (1a1a4 <xQueueGenericReset+0xb8>)
   1a188:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   1a18a:	2301      	movs	r3, #1
}
   1a18c:	0018      	movs	r0, r3
   1a18e:	46bd      	mov	sp, r7
   1a190:	b004      	add	sp, #16
   1a192:	bd80      	pop	{r7, pc}
   1a194:	00019eb9 	.word	0x00019eb9
   1a198:	0001c74d 	.word	0x0001c74d
   1a19c:	00019ea1 	.word	0x00019ea1
   1a1a0:	00019c31 	.word	0x00019c31
   1a1a4:	00019edd 	.word	0x00019edd

0001a1a8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
   1a1a8:	b590      	push	{r4, r7, lr}
   1a1aa:	b08b      	sub	sp, #44	; 0x2c
   1a1ac:	af02      	add	r7, sp, #8
   1a1ae:	60f8      	str	r0, [r7, #12]
   1a1b0:	60b9      	str	r1, [r7, #8]
   1a1b2:	1dfb      	adds	r3, r7, #7
   1a1b4:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
   1a1b6:	68fb      	ldr	r3, [r7, #12]
   1a1b8:	2b00      	cmp	r3, #0
   1a1ba:	d101      	bne.n	1a1c0 <xQueueGenericCreate+0x18>
   1a1bc:	b672      	cpsid	i
   1a1be:	e7fe      	b.n	1a1be <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
   1a1c0:	68bb      	ldr	r3, [r7, #8]
   1a1c2:	2b00      	cmp	r3, #0
   1a1c4:	d102      	bne.n	1a1cc <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
   1a1c6:	2300      	movs	r3, #0
   1a1c8:	61fb      	str	r3, [r7, #28]
   1a1ca:	e003      	b.n	1a1d4 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1a1cc:	68fb      	ldr	r3, [r7, #12]
   1a1ce:	68ba      	ldr	r2, [r7, #8]
   1a1d0:	4353      	muls	r3, r2
   1a1d2:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
   1a1d4:	69fb      	ldr	r3, [r7, #28]
   1a1d6:	3354      	adds	r3, #84	; 0x54
   1a1d8:	0018      	movs	r0, r3
   1a1da:	4b19      	ldr	r3, [pc, #100]	; (1a240 <xQueueGenericCreate+0x98>)
   1a1dc:	4798      	blx	r3
   1a1de:	0003      	movs	r3, r0
   1a1e0:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
   1a1e2:	69bb      	ldr	r3, [r7, #24]
   1a1e4:	2b00      	cmp	r3, #0
   1a1e6:	d00d      	beq.n	1a204 <xQueueGenericCreate+0x5c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
   1a1e8:	69bb      	ldr	r3, [r7, #24]
   1a1ea:	3354      	adds	r3, #84	; 0x54
   1a1ec:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
   1a1ee:	1dfb      	adds	r3, r7, #7
   1a1f0:	781c      	ldrb	r4, [r3, #0]
   1a1f2:	697a      	ldr	r2, [r7, #20]
   1a1f4:	68b9      	ldr	r1, [r7, #8]
   1a1f6:	68f8      	ldr	r0, [r7, #12]
   1a1f8:	69bb      	ldr	r3, [r7, #24]
   1a1fa:	9300      	str	r3, [sp, #0]
   1a1fc:	0023      	movs	r3, r4
   1a1fe:	4c11      	ldr	r4, [pc, #68]	; (1a244 <xQueueGenericCreate+0x9c>)
   1a200:	47a0      	blx	r4
   1a202:	e017      	b.n	1a234 <xQueueGenericCreate+0x8c>
		}
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
   1a204:	4b10      	ldr	r3, [pc, #64]	; (1a248 <xQueueGenericCreate+0xa0>)
   1a206:	4798      	blx	r3
   1a208:	0003      	movs	r3, r0
   1a20a:	0018      	movs	r0, r3
   1a20c:	4b0f      	ldr	r3, [pc, #60]	; (1a24c <xQueueGenericCreate+0xa4>)
   1a20e:	4798      	blx	r3
   1a210:	0003      	movs	r3, r0
   1a212:	001a      	movs	r2, r3
   1a214:	4b0e      	ldr	r3, [pc, #56]	; (1a250 <xQueueGenericCreate+0xa8>)
   1a216:	881b      	ldrh	r3, [r3, #0]
   1a218:	4013      	ands	r3, r2
   1a21a:	b29b      	uxth	r3, r3
   1a21c:	2b00      	cmp	r3, #0
   1a21e:	d009      	beq.n	1a234 <xQueueGenericCreate+0x8c>
   1a220:	1dfb      	adds	r3, r7, #7
   1a222:	781b      	ldrb	r3, [r3, #0]
   1a224:	4a0b      	ldr	r2, [pc, #44]	; (1a254 <xQueueGenericCreate+0xac>)
   1a226:	5cd3      	ldrb	r3, [r2, r3]
   1a228:	3340      	adds	r3, #64	; 0x40
   1a22a:	b2db      	uxtb	r3, r3
   1a22c:	2100      	movs	r1, #0
   1a22e:	0018      	movs	r0, r3
   1a230:	4b09      	ldr	r3, [pc, #36]	; (1a258 <xQueueGenericCreate+0xb0>)
   1a232:	4798      	blx	r3
		}

		return pxNewQueue;
   1a234:	69bb      	ldr	r3, [r7, #24]
	}
   1a236:	0018      	movs	r0, r3
   1a238:	46bd      	mov	sp, r7
   1a23a:	b009      	add	sp, #36	; 0x24
   1a23c:	bd90      	pop	{r4, r7, pc}
   1a23e:	46c0      	nop			; (mov r8, r8)
   1a240:	00019ff1 	.word	0x00019ff1
   1a244:	0001a25d 	.word	0x0001a25d
   1a248:	00018155 	.word	0x00018155
   1a24c:	00017eb9 	.word	0x00017eb9
   1a250:	200000cc 	.word	0x200000cc
   1a254:	200000c0 	.word	0x200000c0
   1a258:	00018bb9 	.word	0x00018bb9

0001a25c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
   1a25c:	b5b0      	push	{r4, r5, r7, lr}
   1a25e:	b084      	sub	sp, #16
   1a260:	af00      	add	r7, sp, #0
   1a262:	60f8      	str	r0, [r7, #12]
   1a264:	60b9      	str	r1, [r7, #8]
   1a266:	607a      	str	r2, [r7, #4]
   1a268:	001a      	movs	r2, r3
   1a26a:	1cfb      	adds	r3, r7, #3
   1a26c:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
   1a26e:	68bb      	ldr	r3, [r7, #8]
   1a270:	2b00      	cmp	r3, #0
   1a272:	d103      	bne.n	1a27c <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
   1a274:	6a3b      	ldr	r3, [r7, #32]
   1a276:	6a3a      	ldr	r2, [r7, #32]
   1a278:	601a      	str	r2, [r3, #0]
   1a27a:	e002      	b.n	1a282 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
   1a27c:	6a3b      	ldr	r3, [r7, #32]
   1a27e:	687a      	ldr	r2, [r7, #4]
   1a280:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
   1a282:	6a3b      	ldr	r3, [r7, #32]
   1a284:	68fa      	ldr	r2, [r7, #12]
   1a286:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
   1a288:	6a3b      	ldr	r3, [r7, #32]
   1a28a:	68ba      	ldr	r2, [r7, #8]
   1a28c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   1a28e:	6a3b      	ldr	r3, [r7, #32]
   1a290:	2101      	movs	r1, #1
   1a292:	0018      	movs	r0, r3
   1a294:	4b41      	ldr	r3, [pc, #260]	; (1a39c <prvInitialiseNewQueue+0x140>)
   1a296:	4798      	blx	r3

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
   1a298:	6a3b      	ldr	r3, [r7, #32]
   1a29a:	1cfa      	adds	r2, r7, #3
   1a29c:	2150      	movs	r1, #80	; 0x50
   1a29e:	7812      	ldrb	r2, [r2, #0]
   1a2a0:	545a      	strb	r2, [r3, r1]
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
   1a2a2:	6a3b      	ldr	r3, [r7, #32]
   1a2a4:	2200      	movs	r2, #0
   1a2a6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
   1a2a8:	6a3b      	ldr	r3, [r7, #32]
   1a2aa:	0018      	movs	r0, r3
   1a2ac:	4b3c      	ldr	r3, [pc, #240]	; (1a3a0 <prvInitialiseNewQueue+0x144>)
   1a2ae:	4798      	blx	r3
   1a2b0:	0003      	movs	r3, r0
   1a2b2:	001a      	movs	r2, r3
   1a2b4:	4b3b      	ldr	r3, [pc, #236]	; (1a3a4 <prvInitialiseNewQueue+0x148>)
   1a2b6:	5c9b      	ldrb	r3, [r3, r2]
   1a2b8:	0018      	movs	r0, r3
   1a2ba:	4b3b      	ldr	r3, [pc, #236]	; (1a3a8 <prvInitialiseNewQueue+0x14c>)
   1a2bc:	4798      	blx	r3
   1a2be:	0003      	movs	r3, r0
   1a2c0:	b29a      	uxth	r2, r3
   1a2c2:	6a3b      	ldr	r3, [r7, #32]
   1a2c4:	0011      	movs	r1, r2
   1a2c6:	0018      	movs	r0, r3
   1a2c8:	4b38      	ldr	r3, [pc, #224]	; (1a3ac <prvInitialiseNewQueue+0x150>)
   1a2ca:	4798      	blx	r3
   1a2cc:	4b38      	ldr	r3, [pc, #224]	; (1a3b0 <prvInitialiseNewQueue+0x154>)
   1a2ce:	881a      	ldrh	r2, [r3, #0]
   1a2d0:	6a3b      	ldr	r3, [r7, #32]
   1a2d2:	0011      	movs	r1, r2
   1a2d4:	0018      	movs	r0, r3
   1a2d6:	4b37      	ldr	r3, [pc, #220]	; (1a3b4 <prvInitialiseNewQueue+0x158>)
   1a2d8:	4798      	blx	r3
   1a2da:	6a3b      	ldr	r3, [r7, #32]
   1a2dc:	0018      	movs	r0, r3
   1a2de:	4b30      	ldr	r3, [pc, #192]	; (1a3a0 <prvInitialiseNewQueue+0x144>)
   1a2e0:	4798      	blx	r3
   1a2e2:	0003      	movs	r3, r0
   1a2e4:	001a      	movs	r2, r3
   1a2e6:	4b2f      	ldr	r3, [pc, #188]	; (1a3a4 <prvInitialiseNewQueue+0x148>)
   1a2e8:	5c9c      	ldrb	r4, [r3, r2]
   1a2ea:	6a3b      	ldr	r3, [r7, #32]
   1a2ec:	0018      	movs	r0, r3
   1a2ee:	4b32      	ldr	r3, [pc, #200]	; (1a3b8 <prvInitialiseNewQueue+0x15c>)
   1a2f0:	4798      	blx	r3
   1a2f2:	0003      	movs	r3, r0
   1a2f4:	b2db      	uxtb	r3, r3
   1a2f6:	0019      	movs	r1, r3
   1a2f8:	0020      	movs	r0, r4
   1a2fa:	4b30      	ldr	r3, [pc, #192]	; (1a3bc <prvInitialiseNewQueue+0x160>)
   1a2fc:	4798      	blx	r3
   1a2fe:	4b30      	ldr	r3, [pc, #192]	; (1a3c0 <prvInitialiseNewQueue+0x164>)
   1a300:	4798      	blx	r3
   1a302:	0003      	movs	r3, r0
   1a304:	0018      	movs	r0, r3
   1a306:	4b2f      	ldr	r3, [pc, #188]	; (1a3c4 <prvInitialiseNewQueue+0x168>)
   1a308:	4798      	blx	r3
   1a30a:	0003      	movs	r3, r0
   1a30c:	001a      	movs	r2, r3
   1a30e:	4b2e      	ldr	r3, [pc, #184]	; (1a3c8 <prvInitialiseNewQueue+0x16c>)
   1a310:	881b      	ldrh	r3, [r3, #0]
   1a312:	4013      	ands	r3, r2
   1a314:	b29b      	uxth	r3, r3
   1a316:	2b00      	cmp	r3, #0
   1a318:	d029      	beq.n	1a36e <prvInitialiseNewQueue+0x112>
   1a31a:	6a3b      	ldr	r3, [r7, #32]
   1a31c:	0018      	movs	r0, r3
   1a31e:	4b2b      	ldr	r3, [pc, #172]	; (1a3cc <prvInitialiseNewQueue+0x170>)
   1a320:	4798      	blx	r3
   1a322:	0003      	movs	r3, r0
   1a324:	001a      	movs	r2, r3
   1a326:	4b28      	ldr	r3, [pc, #160]	; (1a3c8 <prvInitialiseNewQueue+0x16c>)
   1a328:	881b      	ldrh	r3, [r3, #0]
   1a32a:	4013      	ands	r3, r2
   1a32c:	b29b      	uxth	r3, r3
   1a32e:	2b00      	cmp	r3, #0
   1a330:	d01d      	beq.n	1a36e <prvInitialiseNewQueue+0x112>
   1a332:	6a3b      	ldr	r3, [r7, #32]
   1a334:	0018      	movs	r0, r3
   1a336:	4b1a      	ldr	r3, [pc, #104]	; (1a3a0 <prvInitialiseNewQueue+0x144>)
   1a338:	4798      	blx	r3
   1a33a:	0003      	movs	r3, r0
   1a33c:	001a      	movs	r2, r3
   1a33e:	4b19      	ldr	r3, [pc, #100]	; (1a3a4 <prvInitialiseNewQueue+0x148>)
   1a340:	5c9b      	ldrb	r3, [r3, r2]
   1a342:	3318      	adds	r3, #24
   1a344:	b2db      	uxtb	r3, r3
   1a346:	001d      	movs	r5, r3
   1a348:	6a3b      	ldr	r3, [r7, #32]
   1a34a:	0018      	movs	r0, r3
   1a34c:	4b14      	ldr	r3, [pc, #80]	; (1a3a0 <prvInitialiseNewQueue+0x144>)
   1a34e:	4798      	blx	r3
   1a350:	0003      	movs	r3, r0
   1a352:	001a      	movs	r2, r3
   1a354:	4b13      	ldr	r3, [pc, #76]	; (1a3a4 <prvInitialiseNewQueue+0x148>)
   1a356:	5c9c      	ldrb	r4, [r3, r2]
   1a358:	6a3b      	ldr	r3, [r7, #32]
   1a35a:	0018      	movs	r0, r3
   1a35c:	4b16      	ldr	r3, [pc, #88]	; (1a3b8 <prvInitialiseNewQueue+0x15c>)
   1a35e:	4798      	blx	r3
   1a360:	0003      	movs	r3, r0
   1a362:	b2db      	uxtb	r3, r3
   1a364:	001a      	movs	r2, r3
   1a366:	0021      	movs	r1, r4
   1a368:	0028      	movs	r0, r5
   1a36a:	4b19      	ldr	r3, [pc, #100]	; (1a3d0 <prvInitialiseNewQueue+0x174>)
   1a36c:	4798      	blx	r3
   1a36e:	6a3b      	ldr	r3, [r7, #32]
   1a370:	0018      	movs	r0, r3
   1a372:	4b0b      	ldr	r3, [pc, #44]	; (1a3a0 <prvInitialiseNewQueue+0x144>)
   1a374:	4798      	blx	r3
   1a376:	0003      	movs	r3, r0
   1a378:	001a      	movs	r2, r3
   1a37a:	4b0a      	ldr	r3, [pc, #40]	; (1a3a4 <prvInitialiseNewQueue+0x148>)
   1a37c:	5c9c      	ldrb	r4, [r3, r2]
   1a37e:	6a3b      	ldr	r3, [r7, #32]
   1a380:	0018      	movs	r0, r3
   1a382:	4b0d      	ldr	r3, [pc, #52]	; (1a3b8 <prvInitialiseNewQueue+0x15c>)
   1a384:	4798      	blx	r3
   1a386:	0003      	movs	r3, r0
   1a388:	b2db      	uxtb	r3, r3
   1a38a:	2200      	movs	r2, #0
   1a38c:	0019      	movs	r1, r3
   1a38e:	0020      	movs	r0, r4
   1a390:	4b10      	ldr	r3, [pc, #64]	; (1a3d4 <prvInitialiseNewQueue+0x178>)
   1a392:	4798      	blx	r3
}
   1a394:	46c0      	nop			; (mov r8, r8)
   1a396:	46bd      	mov	sp, r7
   1a398:	b004      	add	sp, #16
   1a39a:	bdb0      	pop	{r4, r5, r7, pc}
   1a39c:	0001a0ed 	.word	0x0001a0ed
   1a3a0:	00017e79 	.word	0x00017e79
   1a3a4:	200000c0 	.word	0x200000c0
   1a3a8:	00019439 	.word	0x00019439
   1a3ac:	00017f9d 	.word	0x00017f9d
   1a3b0:	200000ce 	.word	0x200000ce
   1a3b4:	00017fd9 	.word	0x00017fd9
   1a3b8:	00017f59 	.word	0x00017f59
   1a3bc:	000195d1 	.word	0x000195d1
   1a3c0:	00018155 	.word	0x00018155
   1a3c4:	00017eb9 	.word	0x00017eb9
   1a3c8:	200000cc 	.word	0x200000cc
   1a3cc:	00017f79 	.word	0x00017f79
   1a3d0:	000188b1 	.word	0x000188b1
   1a3d4:	00018f0d 	.word	0x00018f0d

0001a3d8 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
   1a3d8:	b590      	push	{r4, r7, lr}
   1a3da:	b083      	sub	sp, #12
   1a3dc:	af00      	add	r7, sp, #0
   1a3de:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
   1a3e0:	687b      	ldr	r3, [r7, #4]
   1a3e2:	2b00      	cmp	r3, #0
   1a3e4:	d00e      	beq.n	1a404 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
   1a3e6:	687b      	ldr	r3, [r7, #4]
   1a3e8:	2200      	movs	r2, #0
   1a3ea:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
   1a3ec:	687b      	ldr	r3, [r7, #4]
   1a3ee:	2200      	movs	r2, #0
   1a3f0:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
   1a3f2:	687b      	ldr	r3, [r7, #4]
   1a3f4:	2200      	movs	r2, #0
   1a3f6:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
   1a3f8:	6878      	ldr	r0, [r7, #4]
   1a3fa:	2300      	movs	r3, #0
   1a3fc:	2200      	movs	r2, #0
   1a3fe:	2100      	movs	r1, #0
   1a400:	4c02      	ldr	r4, [pc, #8]	; (1a40c <prvInitialiseMutex+0x34>)
   1a402:	47a0      	blx	r4
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
   1a404:	46c0      	nop			; (mov r8, r8)
   1a406:	46bd      	mov	sp, r7
   1a408:	b003      	add	sp, #12
   1a40a:	bd90      	pop	{r4, r7, pc}
   1a40c:	0001a451 	.word	0x0001a451

0001a410 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
   1a410:	b580      	push	{r7, lr}
   1a412:	b086      	sub	sp, #24
   1a414:	af00      	add	r7, sp, #0
   1a416:	0002      	movs	r2, r0
   1a418:	1dfb      	adds	r3, r7, #7
   1a41a:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
   1a41c:	2301      	movs	r3, #1
   1a41e:	617b      	str	r3, [r7, #20]
   1a420:	2300      	movs	r3, #0
   1a422:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
   1a424:	1dfb      	adds	r3, r7, #7
   1a426:	781a      	ldrb	r2, [r3, #0]
   1a428:	6939      	ldr	r1, [r7, #16]
   1a42a:	697b      	ldr	r3, [r7, #20]
   1a42c:	0018      	movs	r0, r3
   1a42e:	4b06      	ldr	r3, [pc, #24]	; (1a448 <xQueueCreateMutex+0x38>)
   1a430:	4798      	blx	r3
   1a432:	0003      	movs	r3, r0
   1a434:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
   1a436:	68fb      	ldr	r3, [r7, #12]
   1a438:	0018      	movs	r0, r3
   1a43a:	4b04      	ldr	r3, [pc, #16]	; (1a44c <xQueueCreateMutex+0x3c>)
   1a43c:	4798      	blx	r3

		return pxNewQueue;
   1a43e:	68fb      	ldr	r3, [r7, #12]
	}
   1a440:	0018      	movs	r0, r3
   1a442:	46bd      	mov	sp, r7
   1a444:	b006      	add	sp, #24
   1a446:	bd80      	pop	{r7, pc}
   1a448:	0001a1a9 	.word	0x0001a1a9
   1a44c:	0001a3d9 	.word	0x0001a3d9

0001a450 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
   1a450:	b5b0      	push	{r4, r5, r7, lr}
   1a452:	b08a      	sub	sp, #40	; 0x28
   1a454:	af00      	add	r7, sp, #0
   1a456:	60f8      	str	r0, [r7, #12]
   1a458:	60b9      	str	r1, [r7, #8]
   1a45a:	607a      	str	r2, [r7, #4]
   1a45c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
   1a45e:	2300      	movs	r3, #0
   1a460:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1a462:	68fb      	ldr	r3, [r7, #12]
   1a464:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   1a466:	6a3b      	ldr	r3, [r7, #32]
   1a468:	2b00      	cmp	r3, #0
   1a46a:	d101      	bne.n	1a470 <xQueueGenericSend+0x20>
   1a46c:	b672      	cpsid	i
   1a46e:	e7fe      	b.n	1a46e <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1a470:	68bb      	ldr	r3, [r7, #8]
   1a472:	2b00      	cmp	r3, #0
   1a474:	d103      	bne.n	1a47e <xQueueGenericSend+0x2e>
   1a476:	6a3b      	ldr	r3, [r7, #32]
   1a478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1a47a:	2b00      	cmp	r3, #0
   1a47c:	d101      	bne.n	1a482 <xQueueGenericSend+0x32>
   1a47e:	2301      	movs	r3, #1
   1a480:	e000      	b.n	1a484 <xQueueGenericSend+0x34>
   1a482:	2300      	movs	r3, #0
   1a484:	2b00      	cmp	r3, #0
   1a486:	d101      	bne.n	1a48c <xQueueGenericSend+0x3c>
   1a488:	b672      	cpsid	i
   1a48a:	e7fe      	b.n	1a48a <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1a48c:	683b      	ldr	r3, [r7, #0]
   1a48e:	2b02      	cmp	r3, #2
   1a490:	d103      	bne.n	1a49a <xQueueGenericSend+0x4a>
   1a492:	6a3b      	ldr	r3, [r7, #32]
   1a494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1a496:	2b01      	cmp	r3, #1
   1a498:	d101      	bne.n	1a49e <xQueueGenericSend+0x4e>
   1a49a:	2301      	movs	r3, #1
   1a49c:	e000      	b.n	1a4a0 <xQueueGenericSend+0x50>
   1a49e:	2300      	movs	r3, #0
   1a4a0:	2b00      	cmp	r3, #0
   1a4a2:	d101      	bne.n	1a4a8 <xQueueGenericSend+0x58>
   1a4a4:	b672      	cpsid	i
   1a4a6:	e7fe      	b.n	1a4a6 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1a4a8:	4bbc      	ldr	r3, [pc, #752]	; (1a79c <xQueueGenericSend+0x34c>)
   1a4aa:	4798      	blx	r3
   1a4ac:	1e03      	subs	r3, r0, #0
   1a4ae:	d102      	bne.n	1a4b6 <xQueueGenericSend+0x66>
   1a4b0:	687b      	ldr	r3, [r7, #4]
   1a4b2:	2b00      	cmp	r3, #0
   1a4b4:	d101      	bne.n	1a4ba <xQueueGenericSend+0x6a>
   1a4b6:	2301      	movs	r3, #1
   1a4b8:	e000      	b.n	1a4bc <xQueueGenericSend+0x6c>
   1a4ba:	2300      	movs	r3, #0
   1a4bc:	2b00      	cmp	r3, #0
   1a4be:	d101      	bne.n	1a4c4 <xQueueGenericSend+0x74>
   1a4c0:	b672      	cpsid	i
   1a4c2:	e7fe      	b.n	1a4c2 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   1a4c4:	4bb6      	ldr	r3, [pc, #728]	; (1a7a0 <xQueueGenericSend+0x350>)
   1a4c6:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1a4c8:	6a3b      	ldr	r3, [r7, #32]
   1a4ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1a4cc:	6a3b      	ldr	r3, [r7, #32]
   1a4ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1a4d0:	429a      	cmp	r2, r3
   1a4d2:	d303      	bcc.n	1a4dc <xQueueGenericSend+0x8c>
   1a4d4:	683b      	ldr	r3, [r7, #0]
   1a4d6:	2b02      	cmp	r3, #2
   1a4d8:	d000      	beq.n	1a4dc <xQueueGenericSend+0x8c>
   1a4da:	e08e      	b.n	1a5fa <xQueueGenericSend+0x1aa>
			{
				traceQUEUE_SEND( pxQueue );
   1a4dc:	4bb1      	ldr	r3, [pc, #708]	; (1a7a4 <xQueueGenericSend+0x354>)
   1a4de:	4798      	blx	r3
   1a4e0:	0003      	movs	r3, r0
   1a4e2:	0018      	movs	r0, r3
   1a4e4:	4bb0      	ldr	r3, [pc, #704]	; (1a7a8 <xQueueGenericSend+0x358>)
   1a4e6:	4798      	blx	r3
   1a4e8:	0003      	movs	r3, r0
   1a4ea:	001a      	movs	r2, r3
   1a4ec:	4baf      	ldr	r3, [pc, #700]	; (1a7ac <xQueueGenericSend+0x35c>)
   1a4ee:	881b      	ldrh	r3, [r3, #0]
   1a4f0:	4013      	ands	r3, r2
   1a4f2:	b29b      	uxth	r3, r3
   1a4f4:	2b00      	cmp	r3, #0
   1a4f6:	d02e      	beq.n	1a556 <xQueueGenericSend+0x106>
   1a4f8:	6a3b      	ldr	r3, [r7, #32]
   1a4fa:	0018      	movs	r0, r3
   1a4fc:	4bac      	ldr	r3, [pc, #688]	; (1a7b0 <xQueueGenericSend+0x360>)
   1a4fe:	4798      	blx	r3
   1a500:	0003      	movs	r3, r0
   1a502:	001a      	movs	r2, r3
   1a504:	4ba9      	ldr	r3, [pc, #676]	; (1a7ac <xQueueGenericSend+0x35c>)
   1a506:	881b      	ldrh	r3, [r3, #0]
   1a508:	4013      	ands	r3, r2
   1a50a:	b29b      	uxth	r3, r3
   1a50c:	2b00      	cmp	r3, #0
   1a50e:	d022      	beq.n	1a556 <xQueueGenericSend+0x106>
   1a510:	683b      	ldr	r3, [r7, #0]
   1a512:	2b00      	cmp	r3, #0
   1a514:	d10b      	bne.n	1a52e <xQueueGenericSend+0xde>
   1a516:	6a3b      	ldr	r3, [r7, #32]
   1a518:	0018      	movs	r0, r3
   1a51a:	4ba6      	ldr	r3, [pc, #664]	; (1a7b4 <xQueueGenericSend+0x364>)
   1a51c:	4798      	blx	r3
   1a51e:	0003      	movs	r3, r0
   1a520:	001a      	movs	r2, r3
   1a522:	4ba5      	ldr	r3, [pc, #660]	; (1a7b8 <xQueueGenericSend+0x368>)
   1a524:	5c9b      	ldrb	r3, [r3, r2]
   1a526:	3320      	adds	r3, #32
   1a528:	b2db      	uxtb	r3, r3
   1a52a:	001d      	movs	r5, r3
   1a52c:	e000      	b.n	1a530 <xQueueGenericSend+0xe0>
   1a52e:	2525      	movs	r5, #37	; 0x25
   1a530:	6a3b      	ldr	r3, [r7, #32]
   1a532:	0018      	movs	r0, r3
   1a534:	4b9f      	ldr	r3, [pc, #636]	; (1a7b4 <xQueueGenericSend+0x364>)
   1a536:	4798      	blx	r3
   1a538:	0003      	movs	r3, r0
   1a53a:	001a      	movs	r2, r3
   1a53c:	4b9e      	ldr	r3, [pc, #632]	; (1a7b8 <xQueueGenericSend+0x368>)
   1a53e:	5c9c      	ldrb	r4, [r3, r2]
   1a540:	6a3b      	ldr	r3, [r7, #32]
   1a542:	0018      	movs	r0, r3
   1a544:	4b9d      	ldr	r3, [pc, #628]	; (1a7bc <xQueueGenericSend+0x36c>)
   1a546:	4798      	blx	r3
   1a548:	0003      	movs	r3, r0
   1a54a:	b2db      	uxtb	r3, r3
   1a54c:	001a      	movs	r2, r3
   1a54e:	0021      	movs	r1, r4
   1a550:	0028      	movs	r0, r5
   1a552:	4b9b      	ldr	r3, [pc, #620]	; (1a7c0 <xQueueGenericSend+0x370>)
   1a554:	4798      	blx	r3
   1a556:	6a3b      	ldr	r3, [r7, #32]
   1a558:	0018      	movs	r0, r3
   1a55a:	4b96      	ldr	r3, [pc, #600]	; (1a7b4 <xQueueGenericSend+0x364>)
   1a55c:	4798      	blx	r3
   1a55e:	0003      	movs	r3, r0
   1a560:	001a      	movs	r2, r3
   1a562:	4b95      	ldr	r3, [pc, #596]	; (1a7b8 <xQueueGenericSend+0x368>)
   1a564:	5c9c      	ldrb	r4, [r3, r2]
   1a566:	6a3b      	ldr	r3, [r7, #32]
   1a568:	0018      	movs	r0, r3
   1a56a:	4b94      	ldr	r3, [pc, #592]	; (1a7bc <xQueueGenericSend+0x36c>)
   1a56c:	4798      	blx	r3
   1a56e:	0003      	movs	r3, r0
   1a570:	b2dd      	uxtb	r5, r3
   1a572:	6a3b      	ldr	r3, [r7, #32]
   1a574:	0018      	movs	r0, r3
   1a576:	4b8f      	ldr	r3, [pc, #572]	; (1a7b4 <xQueueGenericSend+0x364>)
   1a578:	4798      	blx	r3
   1a57a:	0003      	movs	r3, r0
   1a57c:	001a      	movs	r2, r3
   1a57e:	4b8e      	ldr	r3, [pc, #568]	; (1a7b8 <xQueueGenericSend+0x368>)
   1a580:	5c9b      	ldrb	r3, [r3, r2]
   1a582:	2b02      	cmp	r3, #2
   1a584:	d005      	beq.n	1a592 <xQueueGenericSend+0x142>
   1a586:	6a3b      	ldr	r3, [r7, #32]
   1a588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1a58a:	b2db      	uxtb	r3, r3
   1a58c:	3301      	adds	r3, #1
   1a58e:	b2db      	uxtb	r3, r3
   1a590:	e000      	b.n	1a594 <xQueueGenericSend+0x144>
   1a592:	2300      	movs	r3, #0
   1a594:	001a      	movs	r2, r3
   1a596:	0029      	movs	r1, r5
   1a598:	0020      	movs	r0, r4
   1a59a:	4b8a      	ldr	r3, [pc, #552]	; (1a7c4 <xQueueGenericSend+0x374>)
   1a59c:	4798      	blx	r3
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1a59e:	683a      	ldr	r2, [r7, #0]
   1a5a0:	68b9      	ldr	r1, [r7, #8]
   1a5a2:	6a3b      	ldr	r3, [r7, #32]
   1a5a4:	0018      	movs	r0, r3
   1a5a6:	4b88      	ldr	r3, [pc, #544]	; (1a7c8 <xQueueGenericSend+0x378>)
   1a5a8:	4798      	blx	r3
   1a5aa:	0003      	movs	r3, r0
   1a5ac:	61fb      	str	r3, [r7, #28]

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1a5ae:	6a3b      	ldr	r3, [r7, #32]
   1a5b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1a5b2:	2b00      	cmp	r3, #0
   1a5b4:	d00a      	beq.n	1a5cc <xQueueGenericSend+0x17c>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   1a5b6:	683a      	ldr	r2, [r7, #0]
   1a5b8:	6a3b      	ldr	r3, [r7, #32]
   1a5ba:	0011      	movs	r1, r2
   1a5bc:	0018      	movs	r0, r3
   1a5be:	4b83      	ldr	r3, [pc, #524]	; (1a7cc <xQueueGenericSend+0x37c>)
   1a5c0:	4798      	blx	r3
   1a5c2:	1e03      	subs	r3, r0, #0
   1a5c4:	d015      	beq.n	1a5f2 <xQueueGenericSend+0x1a2>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
   1a5c6:	4b82      	ldr	r3, [pc, #520]	; (1a7d0 <xQueueGenericSend+0x380>)
   1a5c8:	4798      	blx	r3
   1a5ca:	e012      	b.n	1a5f2 <xQueueGenericSend+0x1a2>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1a5cc:	6a3b      	ldr	r3, [r7, #32]
   1a5ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1a5d0:	2b00      	cmp	r3, #0
   1a5d2:	d009      	beq.n	1a5e8 <xQueueGenericSend+0x198>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1a5d4:	6a3b      	ldr	r3, [r7, #32]
   1a5d6:	3324      	adds	r3, #36	; 0x24
   1a5d8:	0018      	movs	r0, r3
   1a5da:	4b7e      	ldr	r3, [pc, #504]	; (1a7d4 <xQueueGenericSend+0x384>)
   1a5dc:	4798      	blx	r3
   1a5de:	1e03      	subs	r3, r0, #0
   1a5e0:	d007      	beq.n	1a5f2 <xQueueGenericSend+0x1a2>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
   1a5e2:	4b7b      	ldr	r3, [pc, #492]	; (1a7d0 <xQueueGenericSend+0x380>)
   1a5e4:	4798      	blx	r3
   1a5e6:	e004      	b.n	1a5f2 <xQueueGenericSend+0x1a2>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
   1a5e8:	69fb      	ldr	r3, [r7, #28]
   1a5ea:	2b00      	cmp	r3, #0
   1a5ec:	d001      	beq.n	1a5f2 <xQueueGenericSend+0x1a2>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
   1a5ee:	4b78      	ldr	r3, [pc, #480]	; (1a7d0 <xQueueGenericSend+0x380>)
   1a5f0:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
   1a5f2:	4b79      	ldr	r3, [pc, #484]	; (1a7d8 <xQueueGenericSend+0x388>)
   1a5f4:	4798      	blx	r3
				return pdPASS;
   1a5f6:	2301      	movs	r3, #1
   1a5f8:	e142      	b.n	1a880 <xQueueGenericSend+0x430>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1a5fa:	687b      	ldr	r3, [r7, #4]
   1a5fc:	2b00      	cmp	r3, #0
   1a5fe:	d140      	bne.n	1a682 <xQueueGenericSend+0x232>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1a600:	4b75      	ldr	r3, [pc, #468]	; (1a7d8 <xQueueGenericSend+0x388>)
   1a602:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
   1a604:	4b67      	ldr	r3, [pc, #412]	; (1a7a4 <xQueueGenericSend+0x354>)
   1a606:	4798      	blx	r3
   1a608:	0003      	movs	r3, r0
   1a60a:	0018      	movs	r0, r3
   1a60c:	4b66      	ldr	r3, [pc, #408]	; (1a7a8 <xQueueGenericSend+0x358>)
   1a60e:	4798      	blx	r3
   1a610:	0003      	movs	r3, r0
   1a612:	001a      	movs	r2, r3
   1a614:	4b65      	ldr	r3, [pc, #404]	; (1a7ac <xQueueGenericSend+0x35c>)
   1a616:	881b      	ldrh	r3, [r3, #0]
   1a618:	4013      	ands	r3, r2
   1a61a:	b29b      	uxth	r3, r3
   1a61c:	2b00      	cmp	r3, #0
   1a61e:	d02e      	beq.n	1a67e <xQueueGenericSend+0x22e>
   1a620:	6a3b      	ldr	r3, [r7, #32]
   1a622:	0018      	movs	r0, r3
   1a624:	4b62      	ldr	r3, [pc, #392]	; (1a7b0 <xQueueGenericSend+0x360>)
   1a626:	4798      	blx	r3
   1a628:	0003      	movs	r3, r0
   1a62a:	001a      	movs	r2, r3
   1a62c:	4b5f      	ldr	r3, [pc, #380]	; (1a7ac <xQueueGenericSend+0x35c>)
   1a62e:	881b      	ldrh	r3, [r3, #0]
   1a630:	4013      	ands	r3, r2
   1a632:	b29b      	uxth	r3, r3
   1a634:	2b00      	cmp	r3, #0
   1a636:	d022      	beq.n	1a67e <xQueueGenericSend+0x22e>
   1a638:	683b      	ldr	r3, [r7, #0]
   1a63a:	2b00      	cmp	r3, #0
   1a63c:	d10b      	bne.n	1a656 <xQueueGenericSend+0x206>
   1a63e:	6a3b      	ldr	r3, [r7, #32]
   1a640:	0018      	movs	r0, r3
   1a642:	4b5c      	ldr	r3, [pc, #368]	; (1a7b4 <xQueueGenericSend+0x364>)
   1a644:	4798      	blx	r3
   1a646:	0003      	movs	r3, r0
   1a648:	001a      	movs	r2, r3
   1a64a:	4b5b      	ldr	r3, [pc, #364]	; (1a7b8 <xQueueGenericSend+0x368>)
   1a64c:	5c9b      	ldrb	r3, [r3, r2]
   1a64e:	3348      	adds	r3, #72	; 0x48
   1a650:	b2db      	uxtb	r3, r3
   1a652:	001d      	movs	r5, r3
   1a654:	e000      	b.n	1a658 <xQueueGenericSend+0x208>
   1a656:	254d      	movs	r5, #77	; 0x4d
   1a658:	6a3b      	ldr	r3, [r7, #32]
   1a65a:	0018      	movs	r0, r3
   1a65c:	4b55      	ldr	r3, [pc, #340]	; (1a7b4 <xQueueGenericSend+0x364>)
   1a65e:	4798      	blx	r3
   1a660:	0003      	movs	r3, r0
   1a662:	001a      	movs	r2, r3
   1a664:	4b54      	ldr	r3, [pc, #336]	; (1a7b8 <xQueueGenericSend+0x368>)
   1a666:	5c9c      	ldrb	r4, [r3, r2]
   1a668:	6a3b      	ldr	r3, [r7, #32]
   1a66a:	0018      	movs	r0, r3
   1a66c:	4b53      	ldr	r3, [pc, #332]	; (1a7bc <xQueueGenericSend+0x36c>)
   1a66e:	4798      	blx	r3
   1a670:	0003      	movs	r3, r0
   1a672:	b2db      	uxtb	r3, r3
   1a674:	001a      	movs	r2, r3
   1a676:	0021      	movs	r1, r4
   1a678:	0028      	movs	r0, r5
   1a67a:	4b51      	ldr	r3, [pc, #324]	; (1a7c0 <xQueueGenericSend+0x370>)
   1a67c:	4798      	blx	r3
					return errQUEUE_FULL;
   1a67e:	2300      	movs	r3, #0
   1a680:	e0fe      	b.n	1a880 <xQueueGenericSend+0x430>
				}
				else if( xEntryTimeSet == pdFALSE )
   1a682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a684:	2b00      	cmp	r3, #0
   1a686:	d106      	bne.n	1a696 <xQueueGenericSend+0x246>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1a688:	2314      	movs	r3, #20
   1a68a:	18fb      	adds	r3, r7, r3
   1a68c:	0018      	movs	r0, r3
   1a68e:	4b53      	ldr	r3, [pc, #332]	; (1a7dc <xQueueGenericSend+0x38c>)
   1a690:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1a692:	2301      	movs	r3, #1
   1a694:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1a696:	4b50      	ldr	r3, [pc, #320]	; (1a7d8 <xQueueGenericSend+0x388>)
   1a698:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1a69a:	4b51      	ldr	r3, [pc, #324]	; (1a7e0 <xQueueGenericSend+0x390>)
   1a69c:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1a69e:	4b40      	ldr	r3, [pc, #256]	; (1a7a0 <xQueueGenericSend+0x350>)
   1a6a0:	4798      	blx	r3
   1a6a2:	6a3b      	ldr	r3, [r7, #32]
   1a6a4:	2244      	movs	r2, #68	; 0x44
   1a6a6:	5c9b      	ldrb	r3, [r3, r2]
   1a6a8:	b25b      	sxtb	r3, r3
   1a6aa:	3301      	adds	r3, #1
   1a6ac:	d103      	bne.n	1a6b6 <xQueueGenericSend+0x266>
   1a6ae:	6a3b      	ldr	r3, [r7, #32]
   1a6b0:	2244      	movs	r2, #68	; 0x44
   1a6b2:	2100      	movs	r1, #0
   1a6b4:	5499      	strb	r1, [r3, r2]
   1a6b6:	6a3b      	ldr	r3, [r7, #32]
   1a6b8:	2245      	movs	r2, #69	; 0x45
   1a6ba:	5c9b      	ldrb	r3, [r3, r2]
   1a6bc:	b25b      	sxtb	r3, r3
   1a6be:	3301      	adds	r3, #1
   1a6c0:	d103      	bne.n	1a6ca <xQueueGenericSend+0x27a>
   1a6c2:	6a3b      	ldr	r3, [r7, #32]
   1a6c4:	2245      	movs	r2, #69	; 0x45
   1a6c6:	2100      	movs	r1, #0
   1a6c8:	5499      	strb	r1, [r3, r2]
   1a6ca:	4b43      	ldr	r3, [pc, #268]	; (1a7d8 <xQueueGenericSend+0x388>)
   1a6cc:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1a6ce:	1d3a      	adds	r2, r7, #4
   1a6d0:	2314      	movs	r3, #20
   1a6d2:	18fb      	adds	r3, r7, r3
   1a6d4:	0011      	movs	r1, r2
   1a6d6:	0018      	movs	r0, r3
   1a6d8:	4b42      	ldr	r3, [pc, #264]	; (1a7e4 <xQueueGenericSend+0x394>)
   1a6da:	4798      	blx	r3
   1a6dc:	1e03      	subs	r3, r0, #0
   1a6de:	d000      	beq.n	1a6e2 <xQueueGenericSend+0x292>
   1a6e0:	e08a      	b.n	1a7f8 <xQueueGenericSend+0x3a8>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   1a6e2:	6a3b      	ldr	r3, [r7, #32]
   1a6e4:	0018      	movs	r0, r3
   1a6e6:	4b40      	ldr	r3, [pc, #256]	; (1a7e8 <xQueueGenericSend+0x398>)
   1a6e8:	4798      	blx	r3
   1a6ea:	1e03      	subs	r3, r0, #0
   1a6ec:	d04f      	beq.n	1a78e <xQueueGenericSend+0x33e>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
   1a6ee:	4b2d      	ldr	r3, [pc, #180]	; (1a7a4 <xQueueGenericSend+0x354>)
   1a6f0:	4798      	blx	r3
   1a6f2:	0003      	movs	r3, r0
   1a6f4:	0018      	movs	r0, r3
   1a6f6:	4b2c      	ldr	r3, [pc, #176]	; (1a7a8 <xQueueGenericSend+0x358>)
   1a6f8:	4798      	blx	r3
   1a6fa:	0003      	movs	r3, r0
   1a6fc:	001a      	movs	r2, r3
   1a6fe:	4b2b      	ldr	r3, [pc, #172]	; (1a7ac <xQueueGenericSend+0x35c>)
   1a700:	881b      	ldrh	r3, [r3, #0]
   1a702:	4013      	ands	r3, r2
   1a704:	b29b      	uxth	r3, r3
   1a706:	2b00      	cmp	r3, #0
   1a708:	d02e      	beq.n	1a768 <xQueueGenericSend+0x318>
   1a70a:	6a3b      	ldr	r3, [r7, #32]
   1a70c:	0018      	movs	r0, r3
   1a70e:	4b28      	ldr	r3, [pc, #160]	; (1a7b0 <xQueueGenericSend+0x360>)
   1a710:	4798      	blx	r3
   1a712:	0003      	movs	r3, r0
   1a714:	001a      	movs	r2, r3
   1a716:	4b25      	ldr	r3, [pc, #148]	; (1a7ac <xQueueGenericSend+0x35c>)
   1a718:	881b      	ldrh	r3, [r3, #0]
   1a71a:	4013      	ands	r3, r2
   1a71c:	b29b      	uxth	r3, r3
   1a71e:	2b00      	cmp	r3, #0
   1a720:	d022      	beq.n	1a768 <xQueueGenericSend+0x318>
   1a722:	683b      	ldr	r3, [r7, #0]
   1a724:	2b00      	cmp	r3, #0
   1a726:	d10b      	bne.n	1a740 <xQueueGenericSend+0x2f0>
   1a728:	6a3b      	ldr	r3, [r7, #32]
   1a72a:	0018      	movs	r0, r3
   1a72c:	4b21      	ldr	r3, [pc, #132]	; (1a7b4 <xQueueGenericSend+0x364>)
   1a72e:	4798      	blx	r3
   1a730:	0003      	movs	r3, r0
   1a732:	001a      	movs	r2, r3
   1a734:	4b20      	ldr	r3, [pc, #128]	; (1a7b8 <xQueueGenericSend+0x368>)
   1a736:	5c9b      	ldrb	r3, [r3, r2]
   1a738:	3370      	adds	r3, #112	; 0x70
   1a73a:	b2db      	uxtb	r3, r3
   1a73c:	001d      	movs	r5, r3
   1a73e:	e000      	b.n	1a742 <xQueueGenericSend+0x2f2>
   1a740:	2575      	movs	r5, #117	; 0x75
   1a742:	6a3b      	ldr	r3, [r7, #32]
   1a744:	0018      	movs	r0, r3
   1a746:	4b1b      	ldr	r3, [pc, #108]	; (1a7b4 <xQueueGenericSend+0x364>)
   1a748:	4798      	blx	r3
   1a74a:	0003      	movs	r3, r0
   1a74c:	001a      	movs	r2, r3
   1a74e:	4b1a      	ldr	r3, [pc, #104]	; (1a7b8 <xQueueGenericSend+0x368>)
   1a750:	5c9c      	ldrb	r4, [r3, r2]
   1a752:	6a3b      	ldr	r3, [r7, #32]
   1a754:	0018      	movs	r0, r3
   1a756:	4b19      	ldr	r3, [pc, #100]	; (1a7bc <xQueueGenericSend+0x36c>)
   1a758:	4798      	blx	r3
   1a75a:	0003      	movs	r3, r0
   1a75c:	b2db      	uxtb	r3, r3
   1a75e:	001a      	movs	r2, r3
   1a760:	0021      	movs	r1, r4
   1a762:	0028      	movs	r0, r5
   1a764:	4b16      	ldr	r3, [pc, #88]	; (1a7c0 <xQueueGenericSend+0x370>)
   1a766:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   1a768:	6a3b      	ldr	r3, [r7, #32]
   1a76a:	3310      	adds	r3, #16
   1a76c:	687a      	ldr	r2, [r7, #4]
   1a76e:	0011      	movs	r1, r2
   1a770:	0018      	movs	r0, r3
   1a772:	4b1e      	ldr	r3, [pc, #120]	; (1a7ec <xQueueGenericSend+0x39c>)
   1a774:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   1a776:	6a3b      	ldr	r3, [r7, #32]
   1a778:	0018      	movs	r0, r3
   1a77a:	4b1d      	ldr	r3, [pc, #116]	; (1a7f0 <xQueueGenericSend+0x3a0>)
   1a77c:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   1a77e:	4b1d      	ldr	r3, [pc, #116]	; (1a7f4 <xQueueGenericSend+0x3a4>)
   1a780:	4798      	blx	r3
   1a782:	1e03      	subs	r3, r0, #0
   1a784:	d000      	beq.n	1a788 <xQueueGenericSend+0x338>
   1a786:	e69d      	b.n	1a4c4 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
   1a788:	4b11      	ldr	r3, [pc, #68]	; (1a7d0 <xQueueGenericSend+0x380>)
   1a78a:	4798      	blx	r3
   1a78c:	e69a      	b.n	1a4c4 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   1a78e:	6a3b      	ldr	r3, [r7, #32]
   1a790:	0018      	movs	r0, r3
   1a792:	4b17      	ldr	r3, [pc, #92]	; (1a7f0 <xQueueGenericSend+0x3a0>)
   1a794:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1a796:	4b17      	ldr	r3, [pc, #92]	; (1a7f4 <xQueueGenericSend+0x3a4>)
   1a798:	4798      	blx	r3
   1a79a:	e693      	b.n	1a4c4 <xQueueGenericSend+0x74>
   1a79c:	0001cbdd 	.word	0x0001cbdd
   1a7a0:	00019eb9 	.word	0x00019eb9
   1a7a4:	00018155 	.word	0x00018155
   1a7a8:	00017eb9 	.word	0x00017eb9
   1a7ac:	200000cc 	.word	0x200000cc
   1a7b0:	00017f79 	.word	0x00017f79
   1a7b4:	00017e79 	.word	0x00017e79
   1a7b8:	200000c0 	.word	0x200000c0
   1a7bc:	00017f59 	.word	0x00017f59
   1a7c0:	000188b1 	.word	0x000188b1
   1a7c4:	00018f0d 	.word	0x00018f0d
   1a7c8:	0001b689 	.word	0x0001b689
   1a7cc:	0001b98d 	.word	0x0001b98d
   1a7d0:	00019ea1 	.word	0x00019ea1
   1a7d4:	0001c74d 	.word	0x0001c74d
   1a7d8:	00019edd 	.word	0x00019edd
   1a7dc:	0001c88d 	.word	0x0001c88d
   1a7e0:	0001c175 	.word	0x0001c175
   1a7e4:	0001c8b5 	.word	0x0001c8b5
   1a7e8:	0001b8dd 	.word	0x0001b8dd
   1a7ec:	0001c629 	.word	0x0001c629
   1a7f0:	0001b7b9 	.word	0x0001b7b9
   1a7f4:	0001c18d 	.word	0x0001c18d
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   1a7f8:	6a3b      	ldr	r3, [r7, #32]
   1a7fa:	0018      	movs	r0, r3
   1a7fc:	4b22      	ldr	r3, [pc, #136]	; (1a888 <xQueueGenericSend+0x438>)
   1a7fe:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1a800:	4b22      	ldr	r3, [pc, #136]	; (1a88c <xQueueGenericSend+0x43c>)
   1a802:	4798      	blx	r3

			traceQUEUE_SEND_FAILED( pxQueue );
   1a804:	4b22      	ldr	r3, [pc, #136]	; (1a890 <xQueueGenericSend+0x440>)
   1a806:	4798      	blx	r3
   1a808:	0003      	movs	r3, r0
   1a80a:	0018      	movs	r0, r3
   1a80c:	4b21      	ldr	r3, [pc, #132]	; (1a894 <xQueueGenericSend+0x444>)
   1a80e:	4798      	blx	r3
   1a810:	0003      	movs	r3, r0
   1a812:	001a      	movs	r2, r3
   1a814:	4b20      	ldr	r3, [pc, #128]	; (1a898 <xQueueGenericSend+0x448>)
   1a816:	881b      	ldrh	r3, [r3, #0]
   1a818:	4013      	ands	r3, r2
   1a81a:	b29b      	uxth	r3, r3
   1a81c:	2b00      	cmp	r3, #0
   1a81e:	d02e      	beq.n	1a87e <xQueueGenericSend+0x42e>
   1a820:	6a3b      	ldr	r3, [r7, #32]
   1a822:	0018      	movs	r0, r3
   1a824:	4b1d      	ldr	r3, [pc, #116]	; (1a89c <xQueueGenericSend+0x44c>)
   1a826:	4798      	blx	r3
   1a828:	0003      	movs	r3, r0
   1a82a:	001a      	movs	r2, r3
   1a82c:	4b1a      	ldr	r3, [pc, #104]	; (1a898 <xQueueGenericSend+0x448>)
   1a82e:	881b      	ldrh	r3, [r3, #0]
   1a830:	4013      	ands	r3, r2
   1a832:	b29b      	uxth	r3, r3
   1a834:	2b00      	cmp	r3, #0
   1a836:	d022      	beq.n	1a87e <xQueueGenericSend+0x42e>
   1a838:	683b      	ldr	r3, [r7, #0]
   1a83a:	2b00      	cmp	r3, #0
   1a83c:	d10b      	bne.n	1a856 <xQueueGenericSend+0x406>
   1a83e:	6a3b      	ldr	r3, [r7, #32]
   1a840:	0018      	movs	r0, r3
   1a842:	4b17      	ldr	r3, [pc, #92]	; (1a8a0 <xQueueGenericSend+0x450>)
   1a844:	4798      	blx	r3
   1a846:	0003      	movs	r3, r0
   1a848:	001a      	movs	r2, r3
   1a84a:	4b16      	ldr	r3, [pc, #88]	; (1a8a4 <xQueueGenericSend+0x454>)
   1a84c:	5c9b      	ldrb	r3, [r3, r2]
   1a84e:	3348      	adds	r3, #72	; 0x48
   1a850:	b2db      	uxtb	r3, r3
   1a852:	001d      	movs	r5, r3
   1a854:	e000      	b.n	1a858 <xQueueGenericSend+0x408>
   1a856:	254d      	movs	r5, #77	; 0x4d
   1a858:	6a3b      	ldr	r3, [r7, #32]
   1a85a:	0018      	movs	r0, r3
   1a85c:	4b10      	ldr	r3, [pc, #64]	; (1a8a0 <xQueueGenericSend+0x450>)
   1a85e:	4798      	blx	r3
   1a860:	0003      	movs	r3, r0
   1a862:	001a      	movs	r2, r3
   1a864:	4b0f      	ldr	r3, [pc, #60]	; (1a8a4 <xQueueGenericSend+0x454>)
   1a866:	5c9c      	ldrb	r4, [r3, r2]
   1a868:	6a3b      	ldr	r3, [r7, #32]
   1a86a:	0018      	movs	r0, r3
   1a86c:	4b0e      	ldr	r3, [pc, #56]	; (1a8a8 <xQueueGenericSend+0x458>)
   1a86e:	4798      	blx	r3
   1a870:	0003      	movs	r3, r0
   1a872:	b2db      	uxtb	r3, r3
   1a874:	001a      	movs	r2, r3
   1a876:	0021      	movs	r1, r4
   1a878:	0028      	movs	r0, r5
   1a87a:	4b0c      	ldr	r3, [pc, #48]	; (1a8ac <xQueueGenericSend+0x45c>)
   1a87c:	4798      	blx	r3
			return errQUEUE_FULL;
   1a87e:	2300      	movs	r3, #0
		}
	}
}
   1a880:	0018      	movs	r0, r3
   1a882:	46bd      	mov	sp, r7
   1a884:	b00a      	add	sp, #40	; 0x28
   1a886:	bdb0      	pop	{r4, r5, r7, pc}
   1a888:	0001b7b9 	.word	0x0001b7b9
   1a88c:	0001c18d 	.word	0x0001c18d
   1a890:	00018155 	.word	0x00018155
   1a894:	00017eb9 	.word	0x00017eb9
   1a898:	200000cc 	.word	0x200000cc
   1a89c:	00017f79 	.word	0x00017f79
   1a8a0:	00017e79 	.word	0x00017e79
   1a8a4:	200000c0 	.word	0x200000c0
   1a8a8:	00017f59 	.word	0x00017f59
   1a8ac:	000188b1 	.word	0x000188b1

0001a8b0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
   1a8b0:	b5b0      	push	{r4, r5, r7, lr}
   1a8b2:	b088      	sub	sp, #32
   1a8b4:	af00      	add	r7, sp, #0
   1a8b6:	60f8      	str	r0, [r7, #12]
   1a8b8:	60b9      	str	r1, [r7, #8]
   1a8ba:	607a      	str	r2, [r7, #4]
   1a8bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1a8be:	68fb      	ldr	r3, [r7, #12]
   1a8c0:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
   1a8c2:	69bb      	ldr	r3, [r7, #24]
   1a8c4:	2b00      	cmp	r3, #0
   1a8c6:	d101      	bne.n	1a8cc <xQueueGenericSendFromISR+0x1c>
   1a8c8:	b672      	cpsid	i
   1a8ca:	e7fe      	b.n	1a8ca <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1a8cc:	68bb      	ldr	r3, [r7, #8]
   1a8ce:	2b00      	cmp	r3, #0
   1a8d0:	d103      	bne.n	1a8da <xQueueGenericSendFromISR+0x2a>
   1a8d2:	69bb      	ldr	r3, [r7, #24]
   1a8d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1a8d6:	2b00      	cmp	r3, #0
   1a8d8:	d101      	bne.n	1a8de <xQueueGenericSendFromISR+0x2e>
   1a8da:	2301      	movs	r3, #1
   1a8dc:	e000      	b.n	1a8e0 <xQueueGenericSendFromISR+0x30>
   1a8de:	2300      	movs	r3, #0
   1a8e0:	2b00      	cmp	r3, #0
   1a8e2:	d101      	bne.n	1a8e8 <xQueueGenericSendFromISR+0x38>
   1a8e4:	b672      	cpsid	i
   1a8e6:	e7fe      	b.n	1a8e6 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1a8e8:	683b      	ldr	r3, [r7, #0]
   1a8ea:	2b02      	cmp	r3, #2
   1a8ec:	d103      	bne.n	1a8f6 <xQueueGenericSendFromISR+0x46>
   1a8ee:	69bb      	ldr	r3, [r7, #24]
   1a8f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1a8f2:	2b01      	cmp	r3, #1
   1a8f4:	d101      	bne.n	1a8fa <xQueueGenericSendFromISR+0x4a>
   1a8f6:	2301      	movs	r3, #1
   1a8f8:	e000      	b.n	1a8fc <xQueueGenericSendFromISR+0x4c>
   1a8fa:	2300      	movs	r3, #0
   1a8fc:	2b00      	cmp	r3, #0
   1a8fe:	d101      	bne.n	1a904 <xQueueGenericSendFromISR+0x54>
   1a900:	b672      	cpsid	i
   1a902:	e7fe      	b.n	1a902 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   1a904:	4b68      	ldr	r3, [pc, #416]	; (1aaa8 <xQueueGenericSendFromISR+0x1f8>)
   1a906:	4798      	blx	r3
   1a908:	0003      	movs	r3, r0
   1a90a:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1a90c:	69bb      	ldr	r3, [r7, #24]
   1a90e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1a910:	69bb      	ldr	r3, [r7, #24]
   1a912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1a914:	429a      	cmp	r2, r3
   1a916:	d303      	bcc.n	1a920 <xQueueGenericSendFromISR+0x70>
   1a918:	683b      	ldr	r3, [r7, #0]
   1a91a:	2b02      	cmp	r3, #2
   1a91c:	d000      	beq.n	1a920 <xQueueGenericSendFromISR+0x70>
   1a91e:	e088      	b.n	1aa32 <xQueueGenericSendFromISR+0x182>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   1a920:	2313      	movs	r3, #19
   1a922:	18fb      	adds	r3, r7, r3
   1a924:	69ba      	ldr	r2, [r7, #24]
   1a926:	2145      	movs	r1, #69	; 0x45
   1a928:	5c52      	ldrb	r2, [r2, r1]
   1a92a:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
   1a92c:	69bb      	ldr	r3, [r7, #24]
   1a92e:	0018      	movs	r0, r3
   1a930:	4b5e      	ldr	r3, [pc, #376]	; (1aaac <xQueueGenericSendFromISR+0x1fc>)
   1a932:	4798      	blx	r3
   1a934:	0003      	movs	r3, r0
   1a936:	001a      	movs	r2, r3
   1a938:	4b5d      	ldr	r3, [pc, #372]	; (1aab0 <xQueueGenericSendFromISR+0x200>)
   1a93a:	881b      	ldrh	r3, [r3, #0]
   1a93c:	4013      	ands	r3, r2
   1a93e:	b29b      	uxth	r3, r3
   1a940:	2b00      	cmp	r3, #0
   1a942:	d022      	beq.n	1a98a <xQueueGenericSendFromISR+0xda>
   1a944:	683b      	ldr	r3, [r7, #0]
   1a946:	2b00      	cmp	r3, #0
   1a948:	d10b      	bne.n	1a962 <xQueueGenericSendFromISR+0xb2>
   1a94a:	69bb      	ldr	r3, [r7, #24]
   1a94c:	0018      	movs	r0, r3
   1a94e:	4b59      	ldr	r3, [pc, #356]	; (1aab4 <xQueueGenericSendFromISR+0x204>)
   1a950:	4798      	blx	r3
   1a952:	0003      	movs	r3, r0
   1a954:	001a      	movs	r2, r3
   1a956:	4b58      	ldr	r3, [pc, #352]	; (1aab8 <xQueueGenericSendFromISR+0x208>)
   1a958:	5c9b      	ldrb	r3, [r3, r2]
   1a95a:	3330      	adds	r3, #48	; 0x30
   1a95c:	b2db      	uxtb	r3, r3
   1a95e:	001d      	movs	r5, r3
   1a960:	e000      	b.n	1a964 <xQueueGenericSendFromISR+0xb4>
   1a962:	2535      	movs	r5, #53	; 0x35
   1a964:	69bb      	ldr	r3, [r7, #24]
   1a966:	0018      	movs	r0, r3
   1a968:	4b52      	ldr	r3, [pc, #328]	; (1aab4 <xQueueGenericSendFromISR+0x204>)
   1a96a:	4798      	blx	r3
   1a96c:	0003      	movs	r3, r0
   1a96e:	001a      	movs	r2, r3
   1a970:	4b51      	ldr	r3, [pc, #324]	; (1aab8 <xQueueGenericSendFromISR+0x208>)
   1a972:	5c9c      	ldrb	r4, [r3, r2]
   1a974:	69bb      	ldr	r3, [r7, #24]
   1a976:	0018      	movs	r0, r3
   1a978:	4b50      	ldr	r3, [pc, #320]	; (1aabc <xQueueGenericSendFromISR+0x20c>)
   1a97a:	4798      	blx	r3
   1a97c:	0003      	movs	r3, r0
   1a97e:	b2db      	uxtb	r3, r3
   1a980:	001a      	movs	r2, r3
   1a982:	0021      	movs	r1, r4
   1a984:	0028      	movs	r0, r5
   1a986:	4b4e      	ldr	r3, [pc, #312]	; (1aac0 <xQueueGenericSendFromISR+0x210>)
   1a988:	4798      	blx	r3
   1a98a:	69bb      	ldr	r3, [r7, #24]
   1a98c:	0018      	movs	r0, r3
   1a98e:	4b49      	ldr	r3, [pc, #292]	; (1aab4 <xQueueGenericSendFromISR+0x204>)
   1a990:	4798      	blx	r3
   1a992:	0003      	movs	r3, r0
   1a994:	001a      	movs	r2, r3
   1a996:	4b48      	ldr	r3, [pc, #288]	; (1aab8 <xQueueGenericSendFromISR+0x208>)
   1a998:	5c9c      	ldrb	r4, [r3, r2]
   1a99a:	69bb      	ldr	r3, [r7, #24]
   1a99c:	0018      	movs	r0, r3
   1a99e:	4b47      	ldr	r3, [pc, #284]	; (1aabc <xQueueGenericSendFromISR+0x20c>)
   1a9a0:	4798      	blx	r3
   1a9a2:	0003      	movs	r3, r0
   1a9a4:	b2d9      	uxtb	r1, r3
   1a9a6:	69bb      	ldr	r3, [r7, #24]
   1a9a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1a9aa:	b2db      	uxtb	r3, r3
   1a9ac:	3301      	adds	r3, #1
   1a9ae:	b2db      	uxtb	r3, r3
   1a9b0:	001a      	movs	r2, r3
   1a9b2:	0020      	movs	r0, r4
   1a9b4:	4b43      	ldr	r3, [pc, #268]	; (1aac4 <xQueueGenericSendFromISR+0x214>)
   1a9b6:	4798      	blx	r3
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1a9b8:	683a      	ldr	r2, [r7, #0]
   1a9ba:	68b9      	ldr	r1, [r7, #8]
   1a9bc:	69bb      	ldr	r3, [r7, #24]
   1a9be:	0018      	movs	r0, r3
   1a9c0:	4b41      	ldr	r3, [pc, #260]	; (1aac8 <xQueueGenericSendFromISR+0x218>)
   1a9c2:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   1a9c4:	2313      	movs	r3, #19
   1a9c6:	18fb      	adds	r3, r7, r3
   1a9c8:	781b      	ldrb	r3, [r3, #0]
   1a9ca:	b25b      	sxtb	r3, r3
   1a9cc:	3301      	adds	r3, #1
   1a9ce:	d124      	bne.n	1aa1a <xQueueGenericSendFromISR+0x16a>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1a9d0:	69bb      	ldr	r3, [r7, #24]
   1a9d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1a9d4:	2b00      	cmp	r3, #0
   1a9d6:	d00e      	beq.n	1a9f6 <xQueueGenericSendFromISR+0x146>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   1a9d8:	683a      	ldr	r2, [r7, #0]
   1a9da:	69bb      	ldr	r3, [r7, #24]
   1a9dc:	0011      	movs	r1, r2
   1a9de:	0018      	movs	r0, r3
   1a9e0:	4b3a      	ldr	r3, [pc, #232]	; (1aacc <xQueueGenericSendFromISR+0x21c>)
   1a9e2:	4798      	blx	r3
   1a9e4:	1e03      	subs	r3, r0, #0
   1a9e6:	d021      	beq.n	1aa2c <xQueueGenericSendFromISR+0x17c>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   1a9e8:	687b      	ldr	r3, [r7, #4]
   1a9ea:	2b00      	cmp	r3, #0
   1a9ec:	d01e      	beq.n	1aa2c <xQueueGenericSendFromISR+0x17c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   1a9ee:	687b      	ldr	r3, [r7, #4]
   1a9f0:	2201      	movs	r2, #1
   1a9f2:	601a      	str	r2, [r3, #0]
   1a9f4:	e01a      	b.n	1aa2c <xQueueGenericSendFromISR+0x17c>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1a9f6:	69bb      	ldr	r3, [r7, #24]
   1a9f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1a9fa:	2b00      	cmp	r3, #0
   1a9fc:	d016      	beq.n	1aa2c <xQueueGenericSendFromISR+0x17c>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1a9fe:	69bb      	ldr	r3, [r7, #24]
   1aa00:	3324      	adds	r3, #36	; 0x24
   1aa02:	0018      	movs	r0, r3
   1aa04:	4b32      	ldr	r3, [pc, #200]	; (1aad0 <xQueueGenericSendFromISR+0x220>)
   1aa06:	4798      	blx	r3
   1aa08:	1e03      	subs	r3, r0, #0
   1aa0a:	d00f      	beq.n	1aa2c <xQueueGenericSendFromISR+0x17c>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   1aa0c:	687b      	ldr	r3, [r7, #4]
   1aa0e:	2b00      	cmp	r3, #0
   1aa10:	d00c      	beq.n	1aa2c <xQueueGenericSendFromISR+0x17c>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   1aa12:	687b      	ldr	r3, [r7, #4]
   1aa14:	2201      	movs	r2, #1
   1aa16:	601a      	str	r2, [r3, #0]
   1aa18:	e008      	b.n	1aa2c <xQueueGenericSendFromISR+0x17c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1aa1a:	2313      	movs	r3, #19
   1aa1c:	18fb      	adds	r3, r7, r3
   1aa1e:	781b      	ldrb	r3, [r3, #0]
   1aa20:	3301      	adds	r3, #1
   1aa22:	b2db      	uxtb	r3, r3
   1aa24:	b259      	sxtb	r1, r3
   1aa26:	69bb      	ldr	r3, [r7, #24]
   1aa28:	2245      	movs	r2, #69	; 0x45
   1aa2a:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   1aa2c:	2301      	movs	r3, #1
   1aa2e:	61fb      	str	r3, [r7, #28]
		{
   1aa30:	e030      	b.n	1aa94 <xQueueGenericSendFromISR+0x1e4>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   1aa32:	69bb      	ldr	r3, [r7, #24]
   1aa34:	0018      	movs	r0, r3
   1aa36:	4b1d      	ldr	r3, [pc, #116]	; (1aaac <xQueueGenericSendFromISR+0x1fc>)
   1aa38:	4798      	blx	r3
   1aa3a:	0003      	movs	r3, r0
   1aa3c:	001a      	movs	r2, r3
   1aa3e:	4b1c      	ldr	r3, [pc, #112]	; (1aab0 <xQueueGenericSendFromISR+0x200>)
   1aa40:	881b      	ldrh	r3, [r3, #0]
   1aa42:	4013      	ands	r3, r2
   1aa44:	b29b      	uxth	r3, r3
   1aa46:	2b00      	cmp	r3, #0
   1aa48:	d022      	beq.n	1aa90 <xQueueGenericSendFromISR+0x1e0>
   1aa4a:	683b      	ldr	r3, [r7, #0]
   1aa4c:	2b00      	cmp	r3, #0
   1aa4e:	d10b      	bne.n	1aa68 <xQueueGenericSendFromISR+0x1b8>
   1aa50:	69bb      	ldr	r3, [r7, #24]
   1aa52:	0018      	movs	r0, r3
   1aa54:	4b17      	ldr	r3, [pc, #92]	; (1aab4 <xQueueGenericSendFromISR+0x204>)
   1aa56:	4798      	blx	r3
   1aa58:	0003      	movs	r3, r0
   1aa5a:	001a      	movs	r2, r3
   1aa5c:	4b16      	ldr	r3, [pc, #88]	; (1aab8 <xQueueGenericSendFromISR+0x208>)
   1aa5e:	5c9b      	ldrb	r3, [r3, r2]
   1aa60:	3358      	adds	r3, #88	; 0x58
   1aa62:	b2db      	uxtb	r3, r3
   1aa64:	001d      	movs	r5, r3
   1aa66:	e000      	b.n	1aa6a <xQueueGenericSendFromISR+0x1ba>
   1aa68:	255d      	movs	r5, #93	; 0x5d
   1aa6a:	69bb      	ldr	r3, [r7, #24]
   1aa6c:	0018      	movs	r0, r3
   1aa6e:	4b11      	ldr	r3, [pc, #68]	; (1aab4 <xQueueGenericSendFromISR+0x204>)
   1aa70:	4798      	blx	r3
   1aa72:	0003      	movs	r3, r0
   1aa74:	001a      	movs	r2, r3
   1aa76:	4b10      	ldr	r3, [pc, #64]	; (1aab8 <xQueueGenericSendFromISR+0x208>)
   1aa78:	5c9c      	ldrb	r4, [r3, r2]
   1aa7a:	69bb      	ldr	r3, [r7, #24]
   1aa7c:	0018      	movs	r0, r3
   1aa7e:	4b0f      	ldr	r3, [pc, #60]	; (1aabc <xQueueGenericSendFromISR+0x20c>)
   1aa80:	4798      	blx	r3
   1aa82:	0003      	movs	r3, r0
   1aa84:	b2db      	uxtb	r3, r3
   1aa86:	001a      	movs	r2, r3
   1aa88:	0021      	movs	r1, r4
   1aa8a:	0028      	movs	r0, r5
   1aa8c:	4b0c      	ldr	r3, [pc, #48]	; (1aac0 <xQueueGenericSendFromISR+0x210>)
   1aa8e:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   1aa90:	2300      	movs	r3, #0
   1aa92:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   1aa94:	697b      	ldr	r3, [r7, #20]
   1aa96:	0018      	movs	r0, r3
   1aa98:	4b0e      	ldr	r3, [pc, #56]	; (1aad4 <xQueueGenericSendFromISR+0x224>)
   1aa9a:	4798      	blx	r3

	return xReturn;
   1aa9c:	69fb      	ldr	r3, [r7, #28]
}
   1aa9e:	0018      	movs	r0, r3
   1aaa0:	46bd      	mov	sp, r7
   1aaa2:	b008      	add	sp, #32
   1aaa4:	bdb0      	pop	{r4, r5, r7, pc}
   1aaa6:	46c0      	nop			; (mov r8, r8)
   1aaa8:	00019f0d 	.word	0x00019f0d
   1aaac:	00017f79 	.word	0x00017f79
   1aab0:	200000cc 	.word	0x200000cc
   1aab4:	00017e79 	.word	0x00017e79
   1aab8:	200000c0 	.word	0x200000c0
   1aabc:	00017f59 	.word	0x00017f59
   1aac0:	000188b1 	.word	0x000188b1
   1aac4:	00018f0d 	.word	0x00018f0d
   1aac8:	0001b689 	.word	0x0001b689
   1aacc:	0001b98d 	.word	0x0001b98d
   1aad0:	0001c74d 	.word	0x0001c74d
   1aad4:	00019f19 	.word	0x00019f19

0001aad8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
   1aad8:	b580      	push	{r7, lr}
   1aada:	b082      	sub	sp, #8
   1aadc:	af00      	add	r7, sp, #0
   1aade:	6078      	str	r0, [r7, #4]
   1aae0:	6039      	str	r1, [r7, #0]
   1aae2:	6839      	ldr	r1, [r7, #0]
   1aae4:	687b      	ldr	r3, [r7, #4]
   1aae6:	2200      	movs	r2, #0
   1aae8:	0018      	movs	r0, r3
   1aaea:	4b03      	ldr	r3, [pc, #12]	; (1aaf8 <xQueueGiveFromISR+0x20>)
   1aaec:	4798      	blx	r3
   1aaee:	0003      	movs	r3, r0
   1aaf0:	0018      	movs	r0, r3
   1aaf2:	46bd      	mov	sp, r7
   1aaf4:	b002      	add	sp, #8
   1aaf6:	bd80      	pop	{r7, pc}
   1aaf8:	0001aafd 	.word	0x0001aafd

0001aafc <MyWrapper>:
{
   1aafc:	b5b0      	push	{r4, r5, r7, lr}
   1aafe:	b08a      	sub	sp, #40	; 0x28
   1ab00:	af00      	add	r7, sp, #0
   1ab02:	60f8      	str	r0, [r7, #12]
   1ab04:	60b9      	str	r1, [r7, #8]
   1ab06:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1ab08:	68fb      	ldr	r3, [r7, #12]
   1ab0a:	623b      	str	r3, [r7, #32]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
   1ab0c:	6a3b      	ldr	r3, [r7, #32]
   1ab0e:	2b00      	cmp	r3, #0
   1ab10:	d101      	bne.n	1ab16 <MyWrapper+0x1a>
   1ab12:	b672      	cpsid	i
   1ab14:	e7fe      	b.n	1ab14 <MyWrapper+0x18>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   1ab16:	6a3b      	ldr	r3, [r7, #32]
   1ab18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1ab1a:	2b00      	cmp	r3, #0
   1ab1c:	d001      	beq.n	1ab22 <MyWrapper+0x26>
   1ab1e:	b672      	cpsid	i
   1ab20:	e7fe      	b.n	1ab20 <MyWrapper+0x24>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
   1ab22:	6a3b      	ldr	r3, [r7, #32]
   1ab24:	681b      	ldr	r3, [r3, #0]
   1ab26:	2b00      	cmp	r3, #0
   1ab28:	d103      	bne.n	1ab32 <MyWrapper+0x36>
   1ab2a:	6a3b      	ldr	r3, [r7, #32]
   1ab2c:	685b      	ldr	r3, [r3, #4]
   1ab2e:	2b00      	cmp	r3, #0
   1ab30:	d101      	bne.n	1ab36 <MyWrapper+0x3a>
   1ab32:	2301      	movs	r3, #1
   1ab34:	e000      	b.n	1ab38 <MyWrapper+0x3c>
   1ab36:	2300      	movs	r3, #0
   1ab38:	2b00      	cmp	r3, #0
   1ab3a:	d101      	bne.n	1ab40 <MyWrapper+0x44>
   1ab3c:	b672      	cpsid	i
   1ab3e:	e7fe      	b.n	1ab3e <MyWrapper+0x42>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   1ab40:	4b66      	ldr	r3, [pc, #408]	; (1acdc <MyWrapper+0x1e0>)
   1ab42:	4798      	blx	r3
   1ab44:	0003      	movs	r3, r0
   1ab46:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1ab48:	6a3b      	ldr	r3, [r7, #32]
   1ab4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1ab4c:	61bb      	str	r3, [r7, #24]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
   1ab4e:	6a3b      	ldr	r3, [r7, #32]
   1ab50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   1ab52:	69bb      	ldr	r3, [r7, #24]
   1ab54:	429a      	cmp	r2, r3
   1ab56:	d800      	bhi.n	1ab5a <MyWrapper+0x5e>
   1ab58:	e085      	b.n	1ac66 <MyWrapper+0x16a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   1ab5a:	2317      	movs	r3, #23
   1ab5c:	18fb      	adds	r3, r7, r3
   1ab5e:	6a3a      	ldr	r2, [r7, #32]
   1ab60:	2145      	movs	r1, #69	; 0x45
   1ab62:	5c52      	ldrb	r2, [r2, r1]
   1ab64:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
   1ab66:	6a3b      	ldr	r3, [r7, #32]
   1ab68:	0018      	movs	r0, r3
   1ab6a:	4b5d      	ldr	r3, [pc, #372]	; (1ace0 <MyWrapper+0x1e4>)
   1ab6c:	4798      	blx	r3
   1ab6e:	0003      	movs	r3, r0
   1ab70:	001a      	movs	r2, r3
   1ab72:	4b5c      	ldr	r3, [pc, #368]	; (1ace4 <MyWrapper+0x1e8>)
   1ab74:	881b      	ldrh	r3, [r3, #0]
   1ab76:	4013      	ands	r3, r2
   1ab78:	b29b      	uxth	r3, r3
   1ab7a:	2b00      	cmp	r3, #0
   1ab7c:	d022      	beq.n	1abc4 <MyWrapper+0xc8>
   1ab7e:	687b      	ldr	r3, [r7, #4]
   1ab80:	2b00      	cmp	r3, #0
   1ab82:	d10b      	bne.n	1ab9c <MyWrapper+0xa0>
   1ab84:	6a3b      	ldr	r3, [r7, #32]
   1ab86:	0018      	movs	r0, r3
   1ab88:	4b57      	ldr	r3, [pc, #348]	; (1ace8 <MyWrapper+0x1ec>)
   1ab8a:	4798      	blx	r3
   1ab8c:	0003      	movs	r3, r0
   1ab8e:	001a      	movs	r2, r3
   1ab90:	4b56      	ldr	r3, [pc, #344]	; (1acec <MyWrapper+0x1f0>)
   1ab92:	5c9b      	ldrb	r3, [r3, r2]
   1ab94:	3330      	adds	r3, #48	; 0x30
   1ab96:	b2db      	uxtb	r3, r3
   1ab98:	001d      	movs	r5, r3
   1ab9a:	e000      	b.n	1ab9e <MyWrapper+0xa2>
   1ab9c:	2535      	movs	r5, #53	; 0x35
   1ab9e:	6a3b      	ldr	r3, [r7, #32]
   1aba0:	0018      	movs	r0, r3
   1aba2:	4b51      	ldr	r3, [pc, #324]	; (1ace8 <MyWrapper+0x1ec>)
   1aba4:	4798      	blx	r3
   1aba6:	0003      	movs	r3, r0
   1aba8:	001a      	movs	r2, r3
   1abaa:	4b50      	ldr	r3, [pc, #320]	; (1acec <MyWrapper+0x1f0>)
   1abac:	5c9c      	ldrb	r4, [r3, r2]
   1abae:	6a3b      	ldr	r3, [r7, #32]
   1abb0:	0018      	movs	r0, r3
   1abb2:	4b4f      	ldr	r3, [pc, #316]	; (1acf0 <MyWrapper+0x1f4>)
   1abb4:	4798      	blx	r3
   1abb6:	0003      	movs	r3, r0
   1abb8:	b2db      	uxtb	r3, r3
   1abba:	001a      	movs	r2, r3
   1abbc:	0021      	movs	r1, r4
   1abbe:	0028      	movs	r0, r5
   1abc0:	4b4c      	ldr	r3, [pc, #304]	; (1acf4 <MyWrapper+0x1f8>)
   1abc2:	4798      	blx	r3
   1abc4:	6a3b      	ldr	r3, [r7, #32]
   1abc6:	0018      	movs	r0, r3
   1abc8:	4b47      	ldr	r3, [pc, #284]	; (1ace8 <MyWrapper+0x1ec>)
   1abca:	4798      	blx	r3
   1abcc:	0003      	movs	r3, r0
   1abce:	001a      	movs	r2, r3
   1abd0:	4b46      	ldr	r3, [pc, #280]	; (1acec <MyWrapper+0x1f0>)
   1abd2:	5c9c      	ldrb	r4, [r3, r2]
   1abd4:	6a3b      	ldr	r3, [r7, #32]
   1abd6:	0018      	movs	r0, r3
   1abd8:	4b45      	ldr	r3, [pc, #276]	; (1acf0 <MyWrapper+0x1f4>)
   1abda:	4798      	blx	r3
   1abdc:	0003      	movs	r3, r0
   1abde:	b2d9      	uxtb	r1, r3
   1abe0:	6a3b      	ldr	r3, [r7, #32]
   1abe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1abe4:	b2db      	uxtb	r3, r3
   1abe6:	3301      	adds	r3, #1
   1abe8:	b2db      	uxtb	r3, r3
   1abea:	001a      	movs	r2, r3
   1abec:	0020      	movs	r0, r4
   1abee:	4b42      	ldr	r3, [pc, #264]	; (1acf8 <MyWrapper+0x1fc>)
   1abf0:	4798      	blx	r3
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1abf2:	69bb      	ldr	r3, [r7, #24]
   1abf4:	1c5a      	adds	r2, r3, #1
   1abf6:	6a3b      	ldr	r3, [r7, #32]
   1abf8:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   1abfa:	2317      	movs	r3, #23
   1abfc:	18fb      	adds	r3, r7, r3
   1abfe:	781b      	ldrb	r3, [r3, #0]
   1ac00:	b25b      	sxtb	r3, r3
   1ac02:	3301      	adds	r3, #1
   1ac04:	d123      	bne.n	1ac4e <MyWrapper+0x152>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1ac06:	6a3b      	ldr	r3, [r7, #32]
   1ac08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1ac0a:	2b00      	cmp	r3, #0
   1ac0c:	d00d      	beq.n	1ac2a <MyWrapper+0x12e>
					{
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   1ac0e:	6a3b      	ldr	r3, [r7, #32]
   1ac10:	2100      	movs	r1, #0
   1ac12:	0018      	movs	r0, r3
   1ac14:	4b39      	ldr	r3, [pc, #228]	; (1acfc <MyWrapper+0x200>)
   1ac16:	4798      	blx	r3
   1ac18:	1e03      	subs	r3, r0, #0
   1ac1a:	d021      	beq.n	1ac60 <MyWrapper+0x164>
						{
							/* The semaphore is a member of a queue set, and
							posting	to the queue set caused a higher priority
							task to	unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   1ac1c:	68bb      	ldr	r3, [r7, #8]
   1ac1e:	2b00      	cmp	r3, #0
   1ac20:	d01e      	beq.n	1ac60 <MyWrapper+0x164>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   1ac22:	68bb      	ldr	r3, [r7, #8]
   1ac24:	2201      	movs	r2, #1
   1ac26:	601a      	str	r2, [r3, #0]
   1ac28:	e01a      	b.n	1ac60 <MyWrapper+0x164>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1ac2a:	6a3b      	ldr	r3, [r7, #32]
   1ac2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1ac2e:	2b00      	cmp	r3, #0
   1ac30:	d016      	beq.n	1ac60 <MyWrapper+0x164>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1ac32:	6a3b      	ldr	r3, [r7, #32]
   1ac34:	3324      	adds	r3, #36	; 0x24
   1ac36:	0018      	movs	r0, r3
   1ac38:	4b31      	ldr	r3, [pc, #196]	; (1ad00 <MyWrapper+0x204>)
   1ac3a:	4798      	blx	r3
   1ac3c:	1e03      	subs	r3, r0, #0
   1ac3e:	d00f      	beq.n	1ac60 <MyWrapper+0x164>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   1ac40:	68bb      	ldr	r3, [r7, #8]
   1ac42:	2b00      	cmp	r3, #0
   1ac44:	d00c      	beq.n	1ac60 <MyWrapper+0x164>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   1ac46:	68bb      	ldr	r3, [r7, #8]
   1ac48:	2201      	movs	r2, #1
   1ac4a:	601a      	str	r2, [r3, #0]
   1ac4c:	e008      	b.n	1ac60 <MyWrapper+0x164>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1ac4e:	2317      	movs	r3, #23
   1ac50:	18fb      	adds	r3, r7, r3
   1ac52:	781b      	ldrb	r3, [r3, #0]
   1ac54:	3301      	adds	r3, #1
   1ac56:	b2db      	uxtb	r3, r3
   1ac58:	b259      	sxtb	r1, r3
   1ac5a:	6a3b      	ldr	r3, [r7, #32]
   1ac5c:	2245      	movs	r2, #69	; 0x45
   1ac5e:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   1ac60:	2301      	movs	r3, #1
   1ac62:	627b      	str	r3, [r7, #36]	; 0x24
   1ac64:	e030      	b.n	1acc8 <MyWrapper+0x1cc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   1ac66:	6a3b      	ldr	r3, [r7, #32]
   1ac68:	0018      	movs	r0, r3
   1ac6a:	4b1d      	ldr	r3, [pc, #116]	; (1ace0 <MyWrapper+0x1e4>)
   1ac6c:	4798      	blx	r3
   1ac6e:	0003      	movs	r3, r0
   1ac70:	001a      	movs	r2, r3
   1ac72:	4b1c      	ldr	r3, [pc, #112]	; (1ace4 <MyWrapper+0x1e8>)
   1ac74:	881b      	ldrh	r3, [r3, #0]
   1ac76:	4013      	ands	r3, r2
   1ac78:	b29b      	uxth	r3, r3
   1ac7a:	2b00      	cmp	r3, #0
   1ac7c:	d022      	beq.n	1acc4 <MyWrapper+0x1c8>
   1ac7e:	687b      	ldr	r3, [r7, #4]
   1ac80:	2b00      	cmp	r3, #0
   1ac82:	d10b      	bne.n	1ac9c <MyWrapper+0x1a0>
   1ac84:	6a3b      	ldr	r3, [r7, #32]
   1ac86:	0018      	movs	r0, r3
   1ac88:	4b17      	ldr	r3, [pc, #92]	; (1ace8 <MyWrapper+0x1ec>)
   1ac8a:	4798      	blx	r3
   1ac8c:	0003      	movs	r3, r0
   1ac8e:	001a      	movs	r2, r3
   1ac90:	4b16      	ldr	r3, [pc, #88]	; (1acec <MyWrapper+0x1f0>)
   1ac92:	5c9b      	ldrb	r3, [r3, r2]
   1ac94:	3358      	adds	r3, #88	; 0x58
   1ac96:	b2db      	uxtb	r3, r3
   1ac98:	001d      	movs	r5, r3
   1ac9a:	e000      	b.n	1ac9e <MyWrapper+0x1a2>
   1ac9c:	255d      	movs	r5, #93	; 0x5d
   1ac9e:	6a3b      	ldr	r3, [r7, #32]
   1aca0:	0018      	movs	r0, r3
   1aca2:	4b11      	ldr	r3, [pc, #68]	; (1ace8 <MyWrapper+0x1ec>)
   1aca4:	4798      	blx	r3
   1aca6:	0003      	movs	r3, r0
   1aca8:	001a      	movs	r2, r3
   1acaa:	4b10      	ldr	r3, [pc, #64]	; (1acec <MyWrapper+0x1f0>)
   1acac:	5c9c      	ldrb	r4, [r3, r2]
   1acae:	6a3b      	ldr	r3, [r7, #32]
   1acb0:	0018      	movs	r0, r3
   1acb2:	4b0f      	ldr	r3, [pc, #60]	; (1acf0 <MyWrapper+0x1f4>)
   1acb4:	4798      	blx	r3
   1acb6:	0003      	movs	r3, r0
   1acb8:	b2db      	uxtb	r3, r3
   1acba:	001a      	movs	r2, r3
   1acbc:	0021      	movs	r1, r4
   1acbe:	0028      	movs	r0, r5
   1acc0:	4b0c      	ldr	r3, [pc, #48]	; (1acf4 <MyWrapper+0x1f8>)
   1acc2:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   1acc4:	2300      	movs	r3, #0
   1acc6:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   1acc8:	69fb      	ldr	r3, [r7, #28]
   1acca:	0018      	movs	r0, r3
   1accc:	4b0d      	ldr	r3, [pc, #52]	; (1ad04 <MyWrapper+0x208>)
   1acce:	4798      	blx	r3

	return xReturn;
   1acd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1acd2:	0018      	movs	r0, r3
   1acd4:	46bd      	mov	sp, r7
   1acd6:	b00a      	add	sp, #40	; 0x28
   1acd8:	bdb0      	pop	{r4, r5, r7, pc}
   1acda:	46c0      	nop			; (mov r8, r8)
   1acdc:	00019f0d 	.word	0x00019f0d
   1ace0:	00017f79 	.word	0x00017f79
   1ace4:	200000cc 	.word	0x200000cc
   1ace8:	00017e79 	.word	0x00017e79
   1acec:	200000c0 	.word	0x200000c0
   1acf0:	00017f59 	.word	0x00017f59
   1acf4:	000188b1 	.word	0x000188b1
   1acf8:	00018f0d 	.word	0x00018f0d
   1acfc:	0001b98d 	.word	0x0001b98d
   1ad00:	0001c74d 	.word	0x0001c74d
   1ad04:	00019f19 	.word	0x00019f19

0001ad08 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
   1ad08:	b5b0      	push	{r4, r5, r7, lr}
   1ad0a:	b08a      	sub	sp, #40	; 0x28
   1ad0c:	af00      	add	r7, sp, #0
   1ad0e:	60f8      	str	r0, [r7, #12]
   1ad10:	60b9      	str	r1, [r7, #8]
   1ad12:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
   1ad14:	2300      	movs	r3, #0
   1ad16:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1ad18:	68fb      	ldr	r3, [r7, #12]
   1ad1a:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1ad1c:	6a3b      	ldr	r3, [r7, #32]
   1ad1e:	2b00      	cmp	r3, #0
   1ad20:	d101      	bne.n	1ad26 <xQueueReceive+0x1e>
   1ad22:	b672      	cpsid	i
   1ad24:	e7fe      	b.n	1ad24 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1ad26:	68bb      	ldr	r3, [r7, #8]
   1ad28:	2b00      	cmp	r3, #0
   1ad2a:	d103      	bne.n	1ad34 <xQueueReceive+0x2c>
   1ad2c:	6a3b      	ldr	r3, [r7, #32]
   1ad2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1ad30:	2b00      	cmp	r3, #0
   1ad32:	d101      	bne.n	1ad38 <xQueueReceive+0x30>
   1ad34:	2301      	movs	r3, #1
   1ad36:	e000      	b.n	1ad3a <xQueueReceive+0x32>
   1ad38:	2300      	movs	r3, #0
   1ad3a:	2b00      	cmp	r3, #0
   1ad3c:	d101      	bne.n	1ad42 <xQueueReceive+0x3a>
   1ad3e:	b672      	cpsid	i
   1ad40:	e7fe      	b.n	1ad40 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1ad42:	4bbf      	ldr	r3, [pc, #764]	; (1b040 <xQueueReceive+0x338>)
   1ad44:	4798      	blx	r3
   1ad46:	1e03      	subs	r3, r0, #0
   1ad48:	d102      	bne.n	1ad50 <xQueueReceive+0x48>
   1ad4a:	687b      	ldr	r3, [r7, #4]
   1ad4c:	2b00      	cmp	r3, #0
   1ad4e:	d101      	bne.n	1ad54 <xQueueReceive+0x4c>
   1ad50:	2301      	movs	r3, #1
   1ad52:	e000      	b.n	1ad56 <xQueueReceive+0x4e>
   1ad54:	2300      	movs	r3, #0
   1ad56:	2b00      	cmp	r3, #0
   1ad58:	d101      	bne.n	1ad5e <xQueueReceive+0x56>
   1ad5a:	b672      	cpsid	i
   1ad5c:	e7fe      	b.n	1ad5c <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   1ad5e:	4bb9      	ldr	r3, [pc, #740]	; (1b044 <xQueueReceive+0x33c>)
   1ad60:	4798      	blx	r3
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1ad62:	6a3b      	ldr	r3, [r7, #32]
   1ad64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1ad66:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1ad68:	69fb      	ldr	r3, [r7, #28]
   1ad6a:	2b00      	cmp	r3, #0
   1ad6c:	d100      	bne.n	1ad70 <xQueueReceive+0x68>
   1ad6e:	e07d      	b.n	1ae6c <xQueueReceive+0x164>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
   1ad70:	68ba      	ldr	r2, [r7, #8]
   1ad72:	6a3b      	ldr	r3, [r7, #32]
   1ad74:	0011      	movs	r1, r2
   1ad76:	0018      	movs	r0, r3
   1ad78:	4bb3      	ldr	r3, [pc, #716]	; (1b048 <xQueueReceive+0x340>)
   1ad7a:	4798      	blx	r3
				traceQUEUE_RECEIVE( pxQueue );
   1ad7c:	4bb3      	ldr	r3, [pc, #716]	; (1b04c <xQueueReceive+0x344>)
   1ad7e:	4798      	blx	r3
   1ad80:	0003      	movs	r3, r0
   1ad82:	0018      	movs	r0, r3
   1ad84:	4bb2      	ldr	r3, [pc, #712]	; (1b050 <xQueueReceive+0x348>)
   1ad86:	4798      	blx	r3
   1ad88:	0003      	movs	r3, r0
   1ad8a:	001a      	movs	r2, r3
   1ad8c:	4bb1      	ldr	r3, [pc, #708]	; (1b054 <xQueueReceive+0x34c>)
   1ad8e:	881b      	ldrh	r3, [r3, #0]
   1ad90:	4013      	ands	r3, r2
   1ad92:	b29b      	uxth	r3, r3
   1ad94:	2b00      	cmp	r3, #0
   1ad96:	d029      	beq.n	1adec <xQueueReceive+0xe4>
   1ad98:	6a3b      	ldr	r3, [r7, #32]
   1ad9a:	0018      	movs	r0, r3
   1ad9c:	4bae      	ldr	r3, [pc, #696]	; (1b058 <xQueueReceive+0x350>)
   1ad9e:	4798      	blx	r3
   1ada0:	0003      	movs	r3, r0
   1ada2:	001a      	movs	r2, r3
   1ada4:	4bab      	ldr	r3, [pc, #684]	; (1b054 <xQueueReceive+0x34c>)
   1ada6:	881b      	ldrh	r3, [r3, #0]
   1ada8:	4013      	ands	r3, r2
   1adaa:	b29b      	uxth	r3, r3
   1adac:	2b00      	cmp	r3, #0
   1adae:	d01d      	beq.n	1adec <xQueueReceive+0xe4>
   1adb0:	6a3b      	ldr	r3, [r7, #32]
   1adb2:	0018      	movs	r0, r3
   1adb4:	4ba9      	ldr	r3, [pc, #676]	; (1b05c <xQueueReceive+0x354>)
   1adb6:	4798      	blx	r3
   1adb8:	0003      	movs	r3, r0
   1adba:	001a      	movs	r2, r3
   1adbc:	4ba8      	ldr	r3, [pc, #672]	; (1b060 <xQueueReceive+0x358>)
   1adbe:	5c9b      	ldrb	r3, [r3, r2]
   1adc0:	3328      	adds	r3, #40	; 0x28
   1adc2:	b2db      	uxtb	r3, r3
   1adc4:	001d      	movs	r5, r3
   1adc6:	6a3b      	ldr	r3, [r7, #32]
   1adc8:	0018      	movs	r0, r3
   1adca:	4ba4      	ldr	r3, [pc, #656]	; (1b05c <xQueueReceive+0x354>)
   1adcc:	4798      	blx	r3
   1adce:	0003      	movs	r3, r0
   1add0:	001a      	movs	r2, r3
   1add2:	4ba3      	ldr	r3, [pc, #652]	; (1b060 <xQueueReceive+0x358>)
   1add4:	5c9c      	ldrb	r4, [r3, r2]
   1add6:	6a3b      	ldr	r3, [r7, #32]
   1add8:	0018      	movs	r0, r3
   1adda:	4ba2      	ldr	r3, [pc, #648]	; (1b064 <xQueueReceive+0x35c>)
   1addc:	4798      	blx	r3
   1adde:	0003      	movs	r3, r0
   1ade0:	b2db      	uxtb	r3, r3
   1ade2:	001a      	movs	r2, r3
   1ade4:	0021      	movs	r1, r4
   1ade6:	0028      	movs	r0, r5
   1ade8:	4b9f      	ldr	r3, [pc, #636]	; (1b068 <xQueueReceive+0x360>)
   1adea:	4798      	blx	r3
   1adec:	6a3b      	ldr	r3, [r7, #32]
   1adee:	0018      	movs	r0, r3
   1adf0:	4b9a      	ldr	r3, [pc, #616]	; (1b05c <xQueueReceive+0x354>)
   1adf2:	4798      	blx	r3
   1adf4:	0003      	movs	r3, r0
   1adf6:	001a      	movs	r2, r3
   1adf8:	4b99      	ldr	r3, [pc, #612]	; (1b060 <xQueueReceive+0x358>)
   1adfa:	5c9c      	ldrb	r4, [r3, r2]
   1adfc:	6a3b      	ldr	r3, [r7, #32]
   1adfe:	0018      	movs	r0, r3
   1ae00:	4b98      	ldr	r3, [pc, #608]	; (1b064 <xQueueReceive+0x35c>)
   1ae02:	4798      	blx	r3
   1ae04:	0003      	movs	r3, r0
   1ae06:	b2dd      	uxtb	r5, r3
   1ae08:	6a3b      	ldr	r3, [r7, #32]
   1ae0a:	0018      	movs	r0, r3
   1ae0c:	4b93      	ldr	r3, [pc, #588]	; (1b05c <xQueueReceive+0x354>)
   1ae0e:	4798      	blx	r3
   1ae10:	0003      	movs	r3, r0
   1ae12:	001a      	movs	r2, r3
   1ae14:	4b92      	ldr	r3, [pc, #584]	; (1b060 <xQueueReceive+0x358>)
   1ae16:	5c9b      	ldrb	r3, [r3, r2]
   1ae18:	2b02      	cmp	r3, #2
   1ae1a:	d108      	bne.n	1ae2e <xQueueReceive+0x126>
   1ae1c:	4b8b      	ldr	r3, [pc, #556]	; (1b04c <xQueueReceive+0x344>)
   1ae1e:	4798      	blx	r3
   1ae20:	0003      	movs	r3, r0
   1ae22:	0018      	movs	r0, r3
   1ae24:	4b91      	ldr	r3, [pc, #580]	; (1b06c <xQueueReceive+0x364>)
   1ae26:	4798      	blx	r3
   1ae28:	0003      	movs	r3, r0
   1ae2a:	b2db      	uxtb	r3, r3
   1ae2c:	e004      	b.n	1ae38 <xQueueReceive+0x130>
   1ae2e:	6a3b      	ldr	r3, [r7, #32]
   1ae30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1ae32:	b2db      	uxtb	r3, r3
   1ae34:	3b01      	subs	r3, #1
   1ae36:	b2db      	uxtb	r3, r3
   1ae38:	001a      	movs	r2, r3
   1ae3a:	0029      	movs	r1, r5
   1ae3c:	0020      	movs	r0, r4
   1ae3e:	4b8c      	ldr	r3, [pc, #560]	; (1b070 <xQueueReceive+0x368>)
   1ae40:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
   1ae42:	69fb      	ldr	r3, [r7, #28]
   1ae44:	1e5a      	subs	r2, r3, #1
   1ae46:	6a3b      	ldr	r3, [r7, #32]
   1ae48:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1ae4a:	6a3b      	ldr	r3, [r7, #32]
   1ae4c:	691b      	ldr	r3, [r3, #16]
   1ae4e:	2b00      	cmp	r3, #0
   1ae50:	d008      	beq.n	1ae64 <xQueueReceive+0x15c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1ae52:	6a3b      	ldr	r3, [r7, #32]
   1ae54:	3310      	adds	r3, #16
   1ae56:	0018      	movs	r0, r3
   1ae58:	4b86      	ldr	r3, [pc, #536]	; (1b074 <xQueueReceive+0x36c>)
   1ae5a:	4798      	blx	r3
   1ae5c:	1e03      	subs	r3, r0, #0
   1ae5e:	d001      	beq.n	1ae64 <xQueueReceive+0x15c>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1ae60:	4b85      	ldr	r3, [pc, #532]	; (1b078 <xQueueReceive+0x370>)
   1ae62:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1ae64:	4b85      	ldr	r3, [pc, #532]	; (1b07c <xQueueReceive+0x374>)
   1ae66:	4798      	blx	r3
				return pdPASS;
   1ae68:	2301      	movs	r3, #1
   1ae6a:	e15f      	b.n	1b12c <xQueueReceive+0x424>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1ae6c:	687b      	ldr	r3, [r7, #4]
   1ae6e:	2b00      	cmp	r3, #0
   1ae70:	d13b      	bne.n	1aeea <xQueueReceive+0x1e2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1ae72:	4b82      	ldr	r3, [pc, #520]	; (1b07c <xQueueReceive+0x374>)
   1ae74:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   1ae76:	4b75      	ldr	r3, [pc, #468]	; (1b04c <xQueueReceive+0x344>)
   1ae78:	4798      	blx	r3
   1ae7a:	0003      	movs	r3, r0
   1ae7c:	0018      	movs	r0, r3
   1ae7e:	4b74      	ldr	r3, [pc, #464]	; (1b050 <xQueueReceive+0x348>)
   1ae80:	4798      	blx	r3
   1ae82:	0003      	movs	r3, r0
   1ae84:	001a      	movs	r2, r3
   1ae86:	4b73      	ldr	r3, [pc, #460]	; (1b054 <xQueueReceive+0x34c>)
   1ae88:	881b      	ldrh	r3, [r3, #0]
   1ae8a:	4013      	ands	r3, r2
   1ae8c:	b29b      	uxth	r3, r3
   1ae8e:	2b00      	cmp	r3, #0
   1ae90:	d029      	beq.n	1aee6 <xQueueReceive+0x1de>
   1ae92:	6a3b      	ldr	r3, [r7, #32]
   1ae94:	0018      	movs	r0, r3
   1ae96:	4b70      	ldr	r3, [pc, #448]	; (1b058 <xQueueReceive+0x350>)
   1ae98:	4798      	blx	r3
   1ae9a:	0003      	movs	r3, r0
   1ae9c:	001a      	movs	r2, r3
   1ae9e:	4b6d      	ldr	r3, [pc, #436]	; (1b054 <xQueueReceive+0x34c>)
   1aea0:	881b      	ldrh	r3, [r3, #0]
   1aea2:	4013      	ands	r3, r2
   1aea4:	b29b      	uxth	r3, r3
   1aea6:	2b00      	cmp	r3, #0
   1aea8:	d01d      	beq.n	1aee6 <xQueueReceive+0x1de>
   1aeaa:	6a3b      	ldr	r3, [r7, #32]
   1aeac:	0018      	movs	r0, r3
   1aeae:	4b6b      	ldr	r3, [pc, #428]	; (1b05c <xQueueReceive+0x354>)
   1aeb0:	4798      	blx	r3
   1aeb2:	0003      	movs	r3, r0
   1aeb4:	001a      	movs	r2, r3
   1aeb6:	4b6a      	ldr	r3, [pc, #424]	; (1b060 <xQueueReceive+0x358>)
   1aeb8:	5c9b      	ldrb	r3, [r3, r2]
   1aeba:	3350      	adds	r3, #80	; 0x50
   1aebc:	b2db      	uxtb	r3, r3
   1aebe:	001d      	movs	r5, r3
   1aec0:	6a3b      	ldr	r3, [r7, #32]
   1aec2:	0018      	movs	r0, r3
   1aec4:	4b65      	ldr	r3, [pc, #404]	; (1b05c <xQueueReceive+0x354>)
   1aec6:	4798      	blx	r3
   1aec8:	0003      	movs	r3, r0
   1aeca:	001a      	movs	r2, r3
   1aecc:	4b64      	ldr	r3, [pc, #400]	; (1b060 <xQueueReceive+0x358>)
   1aece:	5c9c      	ldrb	r4, [r3, r2]
   1aed0:	6a3b      	ldr	r3, [r7, #32]
   1aed2:	0018      	movs	r0, r3
   1aed4:	4b63      	ldr	r3, [pc, #396]	; (1b064 <xQueueReceive+0x35c>)
   1aed6:	4798      	blx	r3
   1aed8:	0003      	movs	r3, r0
   1aeda:	b2db      	uxtb	r3, r3
   1aedc:	001a      	movs	r2, r3
   1aede:	0021      	movs	r1, r4
   1aee0:	0028      	movs	r0, r5
   1aee2:	4b61      	ldr	r3, [pc, #388]	; (1b068 <xQueueReceive+0x360>)
   1aee4:	4798      	blx	r3
					return errQUEUE_EMPTY;
   1aee6:	2300      	movs	r3, #0
   1aee8:	e120      	b.n	1b12c <xQueueReceive+0x424>
				}
				else if( xEntryTimeSet == pdFALSE )
   1aeea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1aeec:	2b00      	cmp	r3, #0
   1aeee:	d106      	bne.n	1aefe <xQueueReceive+0x1f6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1aef0:	2314      	movs	r3, #20
   1aef2:	18fb      	adds	r3, r7, r3
   1aef4:	0018      	movs	r0, r3
   1aef6:	4b62      	ldr	r3, [pc, #392]	; (1b080 <xQueueReceive+0x378>)
   1aef8:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1aefa:	2301      	movs	r3, #1
   1aefc:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1aefe:	4b5f      	ldr	r3, [pc, #380]	; (1b07c <xQueueReceive+0x374>)
   1af00:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1af02:	4b60      	ldr	r3, [pc, #384]	; (1b084 <xQueueReceive+0x37c>)
   1af04:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1af06:	4b4f      	ldr	r3, [pc, #316]	; (1b044 <xQueueReceive+0x33c>)
   1af08:	4798      	blx	r3
   1af0a:	6a3b      	ldr	r3, [r7, #32]
   1af0c:	2244      	movs	r2, #68	; 0x44
   1af0e:	5c9b      	ldrb	r3, [r3, r2]
   1af10:	b25b      	sxtb	r3, r3
   1af12:	3301      	adds	r3, #1
   1af14:	d103      	bne.n	1af1e <xQueueReceive+0x216>
   1af16:	6a3b      	ldr	r3, [r7, #32]
   1af18:	2244      	movs	r2, #68	; 0x44
   1af1a:	2100      	movs	r1, #0
   1af1c:	5499      	strb	r1, [r3, r2]
   1af1e:	6a3b      	ldr	r3, [r7, #32]
   1af20:	2245      	movs	r2, #69	; 0x45
   1af22:	5c9b      	ldrb	r3, [r3, r2]
   1af24:	b25b      	sxtb	r3, r3
   1af26:	3301      	adds	r3, #1
   1af28:	d103      	bne.n	1af32 <xQueueReceive+0x22a>
   1af2a:	6a3b      	ldr	r3, [r7, #32]
   1af2c:	2245      	movs	r2, #69	; 0x45
   1af2e:	2100      	movs	r1, #0
   1af30:	5499      	strb	r1, [r3, r2]
   1af32:	4b52      	ldr	r3, [pc, #328]	; (1b07c <xQueueReceive+0x374>)
   1af34:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1af36:	1d3a      	adds	r2, r7, #4
   1af38:	2314      	movs	r3, #20
   1af3a:	18fb      	adds	r3, r7, r3
   1af3c:	0011      	movs	r1, r2
   1af3e:	0018      	movs	r0, r3
   1af40:	4b51      	ldr	r3, [pc, #324]	; (1b088 <xQueueReceive+0x380>)
   1af42:	4798      	blx	r3
   1af44:	1e03      	subs	r3, r0, #0
   1af46:	d000      	beq.n	1af4a <xQueueReceive+0x242>
   1af48:	e0aa      	b.n	1b0a0 <xQueueReceive+0x398>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1af4a:	6a3b      	ldr	r3, [r7, #32]
   1af4c:	0018      	movs	r0, r3
   1af4e:	4b4f      	ldr	r3, [pc, #316]	; (1b08c <xQueueReceive+0x384>)
   1af50:	4798      	blx	r3
   1af52:	1e03      	subs	r3, r0, #0
   1af54:	d06d      	beq.n	1b032 <xQueueReceive+0x32a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   1af56:	4b3d      	ldr	r3, [pc, #244]	; (1b04c <xQueueReceive+0x344>)
   1af58:	4798      	blx	r3
   1af5a:	0003      	movs	r3, r0
   1af5c:	0018      	movs	r0, r3
   1af5e:	4b3c      	ldr	r3, [pc, #240]	; (1b050 <xQueueReceive+0x348>)
   1af60:	4798      	blx	r3
   1af62:	0003      	movs	r3, r0
   1af64:	001a      	movs	r2, r3
   1af66:	4b3b      	ldr	r3, [pc, #236]	; (1b054 <xQueueReceive+0x34c>)
   1af68:	881b      	ldrh	r3, [r3, #0]
   1af6a:	4013      	ands	r3, r2
   1af6c:	b29b      	uxth	r3, r3
   1af6e:	2b00      	cmp	r3, #0
   1af70:	d029      	beq.n	1afc6 <xQueueReceive+0x2be>
   1af72:	6a3b      	ldr	r3, [r7, #32]
   1af74:	0018      	movs	r0, r3
   1af76:	4b38      	ldr	r3, [pc, #224]	; (1b058 <xQueueReceive+0x350>)
   1af78:	4798      	blx	r3
   1af7a:	0003      	movs	r3, r0
   1af7c:	001a      	movs	r2, r3
   1af7e:	4b35      	ldr	r3, [pc, #212]	; (1b054 <xQueueReceive+0x34c>)
   1af80:	881b      	ldrh	r3, [r3, #0]
   1af82:	4013      	ands	r3, r2
   1af84:	b29b      	uxth	r3, r3
   1af86:	2b00      	cmp	r3, #0
   1af88:	d01d      	beq.n	1afc6 <xQueueReceive+0x2be>
   1af8a:	6a3b      	ldr	r3, [r7, #32]
   1af8c:	0018      	movs	r0, r3
   1af8e:	4b33      	ldr	r3, [pc, #204]	; (1b05c <xQueueReceive+0x354>)
   1af90:	4798      	blx	r3
   1af92:	0003      	movs	r3, r0
   1af94:	001a      	movs	r2, r3
   1af96:	4b32      	ldr	r3, [pc, #200]	; (1b060 <xQueueReceive+0x358>)
   1af98:	5c9b      	ldrb	r3, [r3, r2]
   1af9a:	3368      	adds	r3, #104	; 0x68
   1af9c:	b2db      	uxtb	r3, r3
   1af9e:	001d      	movs	r5, r3
   1afa0:	6a3b      	ldr	r3, [r7, #32]
   1afa2:	0018      	movs	r0, r3
   1afa4:	4b2d      	ldr	r3, [pc, #180]	; (1b05c <xQueueReceive+0x354>)
   1afa6:	4798      	blx	r3
   1afa8:	0003      	movs	r3, r0
   1afaa:	001a      	movs	r2, r3
   1afac:	4b2c      	ldr	r3, [pc, #176]	; (1b060 <xQueueReceive+0x358>)
   1afae:	5c9c      	ldrb	r4, [r3, r2]
   1afb0:	6a3b      	ldr	r3, [r7, #32]
   1afb2:	0018      	movs	r0, r3
   1afb4:	4b2b      	ldr	r3, [pc, #172]	; (1b064 <xQueueReceive+0x35c>)
   1afb6:	4798      	blx	r3
   1afb8:	0003      	movs	r3, r0
   1afba:	b2db      	uxtb	r3, r3
   1afbc:	001a      	movs	r2, r3
   1afbe:	0021      	movs	r1, r4
   1afc0:	0028      	movs	r0, r5
   1afc2:	4b29      	ldr	r3, [pc, #164]	; (1b068 <xQueueReceive+0x360>)
   1afc4:	4798      	blx	r3
   1afc6:	6a3b      	ldr	r3, [r7, #32]
   1afc8:	0018      	movs	r0, r3
   1afca:	4b24      	ldr	r3, [pc, #144]	; (1b05c <xQueueReceive+0x354>)
   1afcc:	4798      	blx	r3
   1afce:	0003      	movs	r3, r0
   1afd0:	001a      	movs	r2, r3
   1afd2:	4b23      	ldr	r3, [pc, #140]	; (1b060 <xQueueReceive+0x358>)
   1afd4:	5c9b      	ldrb	r3, [r3, r2]
   1afd6:	2b02      	cmp	r3, #2
   1afd8:	d018      	beq.n	1b00c <xQueueReceive+0x304>
   1afda:	4b1c      	ldr	r3, [pc, #112]	; (1b04c <xQueueReceive+0x344>)
   1afdc:	4798      	blx	r3
   1afde:	0003      	movs	r3, r0
   1afe0:	0018      	movs	r0, r3
   1afe2:	4b1b      	ldr	r3, [pc, #108]	; (1b050 <xQueueReceive+0x348>)
   1afe4:	4798      	blx	r3
   1afe6:	0003      	movs	r3, r0
   1afe8:	001a      	movs	r2, r3
   1afea:	4b1a      	ldr	r3, [pc, #104]	; (1b054 <xQueueReceive+0x34c>)
   1afec:	881b      	ldrh	r3, [r3, #0]
   1afee:	4013      	ands	r3, r2
   1aff0:	b29b      	uxth	r3, r3
   1aff2:	2b00      	cmp	r3, #0
   1aff4:	d00a      	beq.n	1b00c <xQueueReceive+0x304>
   1aff6:	4b15      	ldr	r3, [pc, #84]	; (1b04c <xQueueReceive+0x344>)
   1aff8:	4798      	blx	r3
   1affa:	0003      	movs	r3, r0
   1affc:	0018      	movs	r0, r3
   1affe:	4b1b      	ldr	r3, [pc, #108]	; (1b06c <xQueueReceive+0x364>)
   1b000:	4798      	blx	r3
   1b002:	0003      	movs	r3, r0
   1b004:	b2db      	uxtb	r3, r3
   1b006:	0018      	movs	r0, r3
   1b008:	4b21      	ldr	r3, [pc, #132]	; (1b090 <xQueueReceive+0x388>)
   1b00a:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1b00c:	6a3b      	ldr	r3, [r7, #32]
   1b00e:	3324      	adds	r3, #36	; 0x24
   1b010:	687a      	ldr	r2, [r7, #4]
   1b012:	0011      	movs	r1, r2
   1b014:	0018      	movs	r0, r3
   1b016:	4b1f      	ldr	r3, [pc, #124]	; (1b094 <xQueueReceive+0x38c>)
   1b018:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   1b01a:	6a3b      	ldr	r3, [r7, #32]
   1b01c:	0018      	movs	r0, r3
   1b01e:	4b1e      	ldr	r3, [pc, #120]	; (1b098 <xQueueReceive+0x390>)
   1b020:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1b022:	4b1e      	ldr	r3, [pc, #120]	; (1b09c <xQueueReceive+0x394>)
   1b024:	4798      	blx	r3
   1b026:	1e03      	subs	r3, r0, #0
   1b028:	d000      	beq.n	1b02c <xQueueReceive+0x324>
   1b02a:	e698      	b.n	1ad5e <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
   1b02c:	4b12      	ldr	r3, [pc, #72]	; (1b078 <xQueueReceive+0x370>)
   1b02e:	4798      	blx	r3
   1b030:	e695      	b.n	1ad5e <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
   1b032:	6a3b      	ldr	r3, [r7, #32]
   1b034:	0018      	movs	r0, r3
   1b036:	4b18      	ldr	r3, [pc, #96]	; (1b098 <xQueueReceive+0x390>)
   1b038:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1b03a:	4b18      	ldr	r3, [pc, #96]	; (1b09c <xQueueReceive+0x394>)
   1b03c:	4798      	blx	r3
   1b03e:	e68e      	b.n	1ad5e <xQueueReceive+0x56>
   1b040:	0001cbdd 	.word	0x0001cbdd
   1b044:	00019eb9 	.word	0x00019eb9
   1b048:	0001b769 	.word	0x0001b769
   1b04c:	00018155 	.word	0x00018155
   1b050:	00017eb9 	.word	0x00017eb9
   1b054:	200000cc 	.word	0x200000cc
   1b058:	00017f79 	.word	0x00017f79
   1b05c:	00017e79 	.word	0x00017e79
   1b060:	200000c0 	.word	0x200000c0
   1b064:	00017f59 	.word	0x00017f59
   1b068:	000188b1 	.word	0x000188b1
   1b06c:	00017e99 	.word	0x00017e99
   1b070:	00018f0d 	.word	0x00018f0d
   1b074:	0001c74d 	.word	0x0001c74d
   1b078:	00019ea1 	.word	0x00019ea1
   1b07c:	00019edd 	.word	0x00019edd
   1b080:	0001c88d 	.word	0x0001c88d
   1b084:	0001c175 	.word	0x0001c175
   1b088:	0001c8b5 	.word	0x0001c8b5
   1b08c:	0001b8a9 	.word	0x0001b8a9
   1b090:	00019049 	.word	0x00019049
   1b094:	0001c629 	.word	0x0001c629
   1b098:	0001b7b9 	.word	0x0001b7b9
   1b09c:	0001c18d 	.word	0x0001c18d
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
   1b0a0:	6a3b      	ldr	r3, [r7, #32]
   1b0a2:	0018      	movs	r0, r3
   1b0a4:	4b23      	ldr	r3, [pc, #140]	; (1b134 <xQueueReceive+0x42c>)
   1b0a6:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1b0a8:	4b23      	ldr	r3, [pc, #140]	; (1b138 <xQueueReceive+0x430>)
   1b0aa:	4798      	blx	r3

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1b0ac:	6a3b      	ldr	r3, [r7, #32]
   1b0ae:	0018      	movs	r0, r3
   1b0b0:	4b22      	ldr	r3, [pc, #136]	; (1b13c <xQueueReceive+0x434>)
   1b0b2:	4798      	blx	r3
   1b0b4:	1e03      	subs	r3, r0, #0
   1b0b6:	d100      	bne.n	1b0ba <xQueueReceive+0x3b2>
   1b0b8:	e651      	b.n	1ad5e <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
   1b0ba:	4b21      	ldr	r3, [pc, #132]	; (1b140 <xQueueReceive+0x438>)
   1b0bc:	4798      	blx	r3
   1b0be:	0003      	movs	r3, r0
   1b0c0:	0018      	movs	r0, r3
   1b0c2:	4b20      	ldr	r3, [pc, #128]	; (1b144 <xQueueReceive+0x43c>)
   1b0c4:	4798      	blx	r3
   1b0c6:	0003      	movs	r3, r0
   1b0c8:	001a      	movs	r2, r3
   1b0ca:	4b1f      	ldr	r3, [pc, #124]	; (1b148 <xQueueReceive+0x440>)
   1b0cc:	881b      	ldrh	r3, [r3, #0]
   1b0ce:	4013      	ands	r3, r2
   1b0d0:	b29b      	uxth	r3, r3
   1b0d2:	2b00      	cmp	r3, #0
   1b0d4:	d029      	beq.n	1b12a <xQueueReceive+0x422>
   1b0d6:	6a3b      	ldr	r3, [r7, #32]
   1b0d8:	0018      	movs	r0, r3
   1b0da:	4b1c      	ldr	r3, [pc, #112]	; (1b14c <xQueueReceive+0x444>)
   1b0dc:	4798      	blx	r3
   1b0de:	0003      	movs	r3, r0
   1b0e0:	001a      	movs	r2, r3
   1b0e2:	4b19      	ldr	r3, [pc, #100]	; (1b148 <xQueueReceive+0x440>)
   1b0e4:	881b      	ldrh	r3, [r3, #0]
   1b0e6:	4013      	ands	r3, r2
   1b0e8:	b29b      	uxth	r3, r3
   1b0ea:	2b00      	cmp	r3, #0
   1b0ec:	d01d      	beq.n	1b12a <xQueueReceive+0x422>
   1b0ee:	6a3b      	ldr	r3, [r7, #32]
   1b0f0:	0018      	movs	r0, r3
   1b0f2:	4b17      	ldr	r3, [pc, #92]	; (1b150 <xQueueReceive+0x448>)
   1b0f4:	4798      	blx	r3
   1b0f6:	0003      	movs	r3, r0
   1b0f8:	001a      	movs	r2, r3
   1b0fa:	4b16      	ldr	r3, [pc, #88]	; (1b154 <xQueueReceive+0x44c>)
   1b0fc:	5c9b      	ldrb	r3, [r3, r2]
   1b0fe:	3350      	adds	r3, #80	; 0x50
   1b100:	b2db      	uxtb	r3, r3
   1b102:	001d      	movs	r5, r3
   1b104:	6a3b      	ldr	r3, [r7, #32]
   1b106:	0018      	movs	r0, r3
   1b108:	4b11      	ldr	r3, [pc, #68]	; (1b150 <xQueueReceive+0x448>)
   1b10a:	4798      	blx	r3
   1b10c:	0003      	movs	r3, r0
   1b10e:	001a      	movs	r2, r3
   1b110:	4b10      	ldr	r3, [pc, #64]	; (1b154 <xQueueReceive+0x44c>)
   1b112:	5c9c      	ldrb	r4, [r3, r2]
   1b114:	6a3b      	ldr	r3, [r7, #32]
   1b116:	0018      	movs	r0, r3
   1b118:	4b0f      	ldr	r3, [pc, #60]	; (1b158 <xQueueReceive+0x450>)
   1b11a:	4798      	blx	r3
   1b11c:	0003      	movs	r3, r0
   1b11e:	b2db      	uxtb	r3, r3
   1b120:	001a      	movs	r2, r3
   1b122:	0021      	movs	r1, r4
   1b124:	0028      	movs	r0, r5
   1b126:	4b0d      	ldr	r3, [pc, #52]	; (1b15c <xQueueReceive+0x454>)
   1b128:	4798      	blx	r3
				return errQUEUE_EMPTY;
   1b12a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   1b12c:	0018      	movs	r0, r3
   1b12e:	46bd      	mov	sp, r7
   1b130:	b00a      	add	sp, #40	; 0x28
   1b132:	bdb0      	pop	{r4, r5, r7, pc}
   1b134:	0001b7b9 	.word	0x0001b7b9
   1b138:	0001c18d 	.word	0x0001c18d
   1b13c:	0001b8a9 	.word	0x0001b8a9
   1b140:	00018155 	.word	0x00018155
   1b144:	00017eb9 	.word	0x00017eb9
   1b148:	200000cc 	.word	0x200000cc
   1b14c:	00017f79 	.word	0x00017f79
   1b150:	00017e79 	.word	0x00017e79
   1b154:	200000c0 	.word	0x200000c0
   1b158:	00017f59 	.word	0x00017f59
   1b15c:	000188b1 	.word	0x000188b1

0001b160 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
   1b160:	b5b0      	push	{r4, r5, r7, lr}
   1b162:	b08a      	sub	sp, #40	; 0x28
   1b164:	af00      	add	r7, sp, #0
   1b166:	6078      	str	r0, [r7, #4]
   1b168:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
   1b16a:	2300      	movs	r3, #0
   1b16c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1b16e:	687b      	ldr	r3, [r7, #4]
   1b170:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
   1b172:	2300      	movs	r3, #0
   1b174:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1b176:	69fb      	ldr	r3, [r7, #28]
   1b178:	2b00      	cmp	r3, #0
   1b17a:	d101      	bne.n	1b180 <xQueueSemaphoreTake+0x20>
   1b17c:	b672      	cpsid	i
   1b17e:	e7fe      	b.n	1b17e <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   1b180:	69fb      	ldr	r3, [r7, #28]
   1b182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b184:	2b00      	cmp	r3, #0
   1b186:	d001      	beq.n	1b18c <xQueueSemaphoreTake+0x2c>
   1b188:	b672      	cpsid	i
   1b18a:	e7fe      	b.n	1b18a <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1b18c:	4bcb      	ldr	r3, [pc, #812]	; (1b4bc <xQueueSemaphoreTake+0x35c>)
   1b18e:	4798      	blx	r3
   1b190:	1e03      	subs	r3, r0, #0
   1b192:	d102      	bne.n	1b19a <xQueueSemaphoreTake+0x3a>
   1b194:	683b      	ldr	r3, [r7, #0]
   1b196:	2b00      	cmp	r3, #0
   1b198:	d101      	bne.n	1b19e <xQueueSemaphoreTake+0x3e>
   1b19a:	2301      	movs	r3, #1
   1b19c:	e000      	b.n	1b1a0 <xQueueSemaphoreTake+0x40>
   1b19e:	2300      	movs	r3, #0
   1b1a0:	2b00      	cmp	r3, #0
   1b1a2:	d101      	bne.n	1b1a8 <xQueueSemaphoreTake+0x48>
   1b1a4:	b672      	cpsid	i
   1b1a6:	e7fe      	b.n	1b1a6 <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   1b1a8:	4bc5      	ldr	r3, [pc, #788]	; (1b4c0 <xQueueSemaphoreTake+0x360>)
   1b1aa:	4798      	blx	r3
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
   1b1ac:	69fb      	ldr	r3, [r7, #28]
   1b1ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b1b0:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
   1b1b2:	69bb      	ldr	r3, [r7, #24]
   1b1b4:	2b00      	cmp	r3, #0
   1b1b6:	d100      	bne.n	1b1ba <xQueueSemaphoreTake+0x5a>
   1b1b8:	e080      	b.n	1b2bc <xQueueSemaphoreTake+0x15c>
			{
				traceQUEUE_RECEIVE( pxQueue );
   1b1ba:	4bc2      	ldr	r3, [pc, #776]	; (1b4c4 <xQueueSemaphoreTake+0x364>)
   1b1bc:	4798      	blx	r3
   1b1be:	0003      	movs	r3, r0
   1b1c0:	0018      	movs	r0, r3
   1b1c2:	4bc1      	ldr	r3, [pc, #772]	; (1b4c8 <xQueueSemaphoreTake+0x368>)
   1b1c4:	4798      	blx	r3
   1b1c6:	0003      	movs	r3, r0
   1b1c8:	001a      	movs	r2, r3
   1b1ca:	4bc0      	ldr	r3, [pc, #768]	; (1b4cc <xQueueSemaphoreTake+0x36c>)
   1b1cc:	881b      	ldrh	r3, [r3, #0]
   1b1ce:	4013      	ands	r3, r2
   1b1d0:	b29b      	uxth	r3, r3
   1b1d2:	2b00      	cmp	r3, #0
   1b1d4:	d029      	beq.n	1b22a <xQueueSemaphoreTake+0xca>
   1b1d6:	69fb      	ldr	r3, [r7, #28]
   1b1d8:	0018      	movs	r0, r3
   1b1da:	4bbd      	ldr	r3, [pc, #756]	; (1b4d0 <xQueueSemaphoreTake+0x370>)
   1b1dc:	4798      	blx	r3
   1b1de:	0003      	movs	r3, r0
   1b1e0:	001a      	movs	r2, r3
   1b1e2:	4bba      	ldr	r3, [pc, #744]	; (1b4cc <xQueueSemaphoreTake+0x36c>)
   1b1e4:	881b      	ldrh	r3, [r3, #0]
   1b1e6:	4013      	ands	r3, r2
   1b1e8:	b29b      	uxth	r3, r3
   1b1ea:	2b00      	cmp	r3, #0
   1b1ec:	d01d      	beq.n	1b22a <xQueueSemaphoreTake+0xca>
   1b1ee:	69fb      	ldr	r3, [r7, #28]
   1b1f0:	0018      	movs	r0, r3
   1b1f2:	4bb8      	ldr	r3, [pc, #736]	; (1b4d4 <xQueueSemaphoreTake+0x374>)
   1b1f4:	4798      	blx	r3
   1b1f6:	0003      	movs	r3, r0
   1b1f8:	001a      	movs	r2, r3
   1b1fa:	4bb7      	ldr	r3, [pc, #732]	; (1b4d8 <xQueueSemaphoreTake+0x378>)
   1b1fc:	5c9b      	ldrb	r3, [r3, r2]
   1b1fe:	3328      	adds	r3, #40	; 0x28
   1b200:	b2db      	uxtb	r3, r3
   1b202:	001d      	movs	r5, r3
   1b204:	69fb      	ldr	r3, [r7, #28]
   1b206:	0018      	movs	r0, r3
   1b208:	4bb2      	ldr	r3, [pc, #712]	; (1b4d4 <xQueueSemaphoreTake+0x374>)
   1b20a:	4798      	blx	r3
   1b20c:	0003      	movs	r3, r0
   1b20e:	001a      	movs	r2, r3
   1b210:	4bb1      	ldr	r3, [pc, #708]	; (1b4d8 <xQueueSemaphoreTake+0x378>)
   1b212:	5c9c      	ldrb	r4, [r3, r2]
   1b214:	69fb      	ldr	r3, [r7, #28]
   1b216:	0018      	movs	r0, r3
   1b218:	4bb0      	ldr	r3, [pc, #704]	; (1b4dc <xQueueSemaphoreTake+0x37c>)
   1b21a:	4798      	blx	r3
   1b21c:	0003      	movs	r3, r0
   1b21e:	b2db      	uxtb	r3, r3
   1b220:	001a      	movs	r2, r3
   1b222:	0021      	movs	r1, r4
   1b224:	0028      	movs	r0, r5
   1b226:	4bae      	ldr	r3, [pc, #696]	; (1b4e0 <xQueueSemaphoreTake+0x380>)
   1b228:	4798      	blx	r3
   1b22a:	69fb      	ldr	r3, [r7, #28]
   1b22c:	0018      	movs	r0, r3
   1b22e:	4ba9      	ldr	r3, [pc, #676]	; (1b4d4 <xQueueSemaphoreTake+0x374>)
   1b230:	4798      	blx	r3
   1b232:	0003      	movs	r3, r0
   1b234:	001a      	movs	r2, r3
   1b236:	4ba8      	ldr	r3, [pc, #672]	; (1b4d8 <xQueueSemaphoreTake+0x378>)
   1b238:	5c9c      	ldrb	r4, [r3, r2]
   1b23a:	69fb      	ldr	r3, [r7, #28]
   1b23c:	0018      	movs	r0, r3
   1b23e:	4ba7      	ldr	r3, [pc, #668]	; (1b4dc <xQueueSemaphoreTake+0x37c>)
   1b240:	4798      	blx	r3
   1b242:	0003      	movs	r3, r0
   1b244:	b2dd      	uxtb	r5, r3
   1b246:	69fb      	ldr	r3, [r7, #28]
   1b248:	0018      	movs	r0, r3
   1b24a:	4ba2      	ldr	r3, [pc, #648]	; (1b4d4 <xQueueSemaphoreTake+0x374>)
   1b24c:	4798      	blx	r3
   1b24e:	0003      	movs	r3, r0
   1b250:	001a      	movs	r2, r3
   1b252:	4ba1      	ldr	r3, [pc, #644]	; (1b4d8 <xQueueSemaphoreTake+0x378>)
   1b254:	5c9b      	ldrb	r3, [r3, r2]
   1b256:	2b02      	cmp	r3, #2
   1b258:	d108      	bne.n	1b26c <xQueueSemaphoreTake+0x10c>
   1b25a:	4b9a      	ldr	r3, [pc, #616]	; (1b4c4 <xQueueSemaphoreTake+0x364>)
   1b25c:	4798      	blx	r3
   1b25e:	0003      	movs	r3, r0
   1b260:	0018      	movs	r0, r3
   1b262:	4ba0      	ldr	r3, [pc, #640]	; (1b4e4 <xQueueSemaphoreTake+0x384>)
   1b264:	4798      	blx	r3
   1b266:	0003      	movs	r3, r0
   1b268:	b2db      	uxtb	r3, r3
   1b26a:	e004      	b.n	1b276 <xQueueSemaphoreTake+0x116>
   1b26c:	69fb      	ldr	r3, [r7, #28]
   1b26e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b270:	b2db      	uxtb	r3, r3
   1b272:	3b01      	subs	r3, #1
   1b274:	b2db      	uxtb	r3, r3
   1b276:	001a      	movs	r2, r3
   1b278:	0029      	movs	r1, r5
   1b27a:	0020      	movs	r0, r4
   1b27c:	4b9a      	ldr	r3, [pc, #616]	; (1b4e8 <xQueueSemaphoreTake+0x388>)
   1b27e:	4798      	blx	r3

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
   1b280:	69bb      	ldr	r3, [r7, #24]
   1b282:	1e5a      	subs	r2, r3, #1
   1b284:	69fb      	ldr	r3, [r7, #28]
   1b286:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1b288:	69fb      	ldr	r3, [r7, #28]
   1b28a:	681b      	ldr	r3, [r3, #0]
   1b28c:	2b00      	cmp	r3, #0
   1b28e:	d104      	bne.n	1b29a <xQueueSemaphoreTake+0x13a>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
   1b290:	4b96      	ldr	r3, [pc, #600]	; (1b4ec <xQueueSemaphoreTake+0x38c>)
   1b292:	4798      	blx	r3
   1b294:	0002      	movs	r2, r0
   1b296:	69fb      	ldr	r3, [r7, #28]
   1b298:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1b29a:	69fb      	ldr	r3, [r7, #28]
   1b29c:	691b      	ldr	r3, [r3, #16]
   1b29e:	2b00      	cmp	r3, #0
   1b2a0:	d008      	beq.n	1b2b4 <xQueueSemaphoreTake+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1b2a2:	69fb      	ldr	r3, [r7, #28]
   1b2a4:	3310      	adds	r3, #16
   1b2a6:	0018      	movs	r0, r3
   1b2a8:	4b91      	ldr	r3, [pc, #580]	; (1b4f0 <xQueueSemaphoreTake+0x390>)
   1b2aa:	4798      	blx	r3
   1b2ac:	1e03      	subs	r3, r0, #0
   1b2ae:	d001      	beq.n	1b2b4 <xQueueSemaphoreTake+0x154>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1b2b0:	4b90      	ldr	r3, [pc, #576]	; (1b4f4 <xQueueSemaphoreTake+0x394>)
   1b2b2:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1b2b4:	4b90      	ldr	r3, [pc, #576]	; (1b4f8 <xQueueSemaphoreTake+0x398>)
   1b2b6:	4798      	blx	r3
				return pdPASS;
   1b2b8:	2301      	movs	r3, #1
   1b2ba:	e18b      	b.n	1b5d4 <xQueueSemaphoreTake+0x474>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1b2bc:	683b      	ldr	r3, [r7, #0]
   1b2be:	2b00      	cmp	r3, #0
   1b2c0:	d140      	bne.n	1b344 <xQueueSemaphoreTake+0x1e4>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
   1b2c2:	6a3b      	ldr	r3, [r7, #32]
   1b2c4:	2b00      	cmp	r3, #0
   1b2c6:	d001      	beq.n	1b2cc <xQueueSemaphoreTake+0x16c>
   1b2c8:	b672      	cpsid	i
   1b2ca:	e7fe      	b.n	1b2ca <xQueueSemaphoreTake+0x16a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
   1b2cc:	4b8a      	ldr	r3, [pc, #552]	; (1b4f8 <xQueueSemaphoreTake+0x398>)
   1b2ce:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   1b2d0:	4b7c      	ldr	r3, [pc, #496]	; (1b4c4 <xQueueSemaphoreTake+0x364>)
   1b2d2:	4798      	blx	r3
   1b2d4:	0003      	movs	r3, r0
   1b2d6:	0018      	movs	r0, r3
   1b2d8:	4b7b      	ldr	r3, [pc, #492]	; (1b4c8 <xQueueSemaphoreTake+0x368>)
   1b2da:	4798      	blx	r3
   1b2dc:	0003      	movs	r3, r0
   1b2de:	001a      	movs	r2, r3
   1b2e0:	4b7a      	ldr	r3, [pc, #488]	; (1b4cc <xQueueSemaphoreTake+0x36c>)
   1b2e2:	881b      	ldrh	r3, [r3, #0]
   1b2e4:	4013      	ands	r3, r2
   1b2e6:	b29b      	uxth	r3, r3
   1b2e8:	2b00      	cmp	r3, #0
   1b2ea:	d029      	beq.n	1b340 <xQueueSemaphoreTake+0x1e0>
   1b2ec:	69fb      	ldr	r3, [r7, #28]
   1b2ee:	0018      	movs	r0, r3
   1b2f0:	4b77      	ldr	r3, [pc, #476]	; (1b4d0 <xQueueSemaphoreTake+0x370>)
   1b2f2:	4798      	blx	r3
   1b2f4:	0003      	movs	r3, r0
   1b2f6:	001a      	movs	r2, r3
   1b2f8:	4b74      	ldr	r3, [pc, #464]	; (1b4cc <xQueueSemaphoreTake+0x36c>)
   1b2fa:	881b      	ldrh	r3, [r3, #0]
   1b2fc:	4013      	ands	r3, r2
   1b2fe:	b29b      	uxth	r3, r3
   1b300:	2b00      	cmp	r3, #0
   1b302:	d01d      	beq.n	1b340 <xQueueSemaphoreTake+0x1e0>
   1b304:	69fb      	ldr	r3, [r7, #28]
   1b306:	0018      	movs	r0, r3
   1b308:	4b72      	ldr	r3, [pc, #456]	; (1b4d4 <xQueueSemaphoreTake+0x374>)
   1b30a:	4798      	blx	r3
   1b30c:	0003      	movs	r3, r0
   1b30e:	001a      	movs	r2, r3
   1b310:	4b71      	ldr	r3, [pc, #452]	; (1b4d8 <xQueueSemaphoreTake+0x378>)
   1b312:	5c9b      	ldrb	r3, [r3, r2]
   1b314:	3350      	adds	r3, #80	; 0x50
   1b316:	b2db      	uxtb	r3, r3
   1b318:	001d      	movs	r5, r3
   1b31a:	69fb      	ldr	r3, [r7, #28]
   1b31c:	0018      	movs	r0, r3
   1b31e:	4b6d      	ldr	r3, [pc, #436]	; (1b4d4 <xQueueSemaphoreTake+0x374>)
   1b320:	4798      	blx	r3
   1b322:	0003      	movs	r3, r0
   1b324:	001a      	movs	r2, r3
   1b326:	4b6c      	ldr	r3, [pc, #432]	; (1b4d8 <xQueueSemaphoreTake+0x378>)
   1b328:	5c9c      	ldrb	r4, [r3, r2]
   1b32a:	69fb      	ldr	r3, [r7, #28]
   1b32c:	0018      	movs	r0, r3
   1b32e:	4b6b      	ldr	r3, [pc, #428]	; (1b4dc <xQueueSemaphoreTake+0x37c>)
   1b330:	4798      	blx	r3
   1b332:	0003      	movs	r3, r0
   1b334:	b2db      	uxtb	r3, r3
   1b336:	001a      	movs	r2, r3
   1b338:	0021      	movs	r1, r4
   1b33a:	0028      	movs	r0, r5
   1b33c:	4b68      	ldr	r3, [pc, #416]	; (1b4e0 <xQueueSemaphoreTake+0x380>)
   1b33e:	4798      	blx	r3
					return errQUEUE_EMPTY;
   1b340:	2300      	movs	r3, #0
   1b342:	e147      	b.n	1b5d4 <xQueueSemaphoreTake+0x474>
				}
				else if( xEntryTimeSet == pdFALSE )
   1b344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b346:	2b00      	cmp	r3, #0
   1b348:	d106      	bne.n	1b358 <xQueueSemaphoreTake+0x1f8>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1b34a:	230c      	movs	r3, #12
   1b34c:	18fb      	adds	r3, r7, r3
   1b34e:	0018      	movs	r0, r3
   1b350:	4b6a      	ldr	r3, [pc, #424]	; (1b4fc <xQueueSemaphoreTake+0x39c>)
   1b352:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1b354:	2301      	movs	r3, #1
   1b356:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1b358:	4b67      	ldr	r3, [pc, #412]	; (1b4f8 <xQueueSemaphoreTake+0x398>)
   1b35a:	4798      	blx	r3

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
   1b35c:	4b68      	ldr	r3, [pc, #416]	; (1b500 <xQueueSemaphoreTake+0x3a0>)
   1b35e:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1b360:	4b57      	ldr	r3, [pc, #348]	; (1b4c0 <xQueueSemaphoreTake+0x360>)
   1b362:	4798      	blx	r3
   1b364:	69fb      	ldr	r3, [r7, #28]
   1b366:	2244      	movs	r2, #68	; 0x44
   1b368:	5c9b      	ldrb	r3, [r3, r2]
   1b36a:	b25b      	sxtb	r3, r3
   1b36c:	3301      	adds	r3, #1
   1b36e:	d103      	bne.n	1b378 <xQueueSemaphoreTake+0x218>
   1b370:	69fb      	ldr	r3, [r7, #28]
   1b372:	2244      	movs	r2, #68	; 0x44
   1b374:	2100      	movs	r1, #0
   1b376:	5499      	strb	r1, [r3, r2]
   1b378:	69fb      	ldr	r3, [r7, #28]
   1b37a:	2245      	movs	r2, #69	; 0x45
   1b37c:	5c9b      	ldrb	r3, [r3, r2]
   1b37e:	b25b      	sxtb	r3, r3
   1b380:	3301      	adds	r3, #1
   1b382:	d103      	bne.n	1b38c <xQueueSemaphoreTake+0x22c>
   1b384:	69fb      	ldr	r3, [r7, #28]
   1b386:	2245      	movs	r2, #69	; 0x45
   1b388:	2100      	movs	r1, #0
   1b38a:	5499      	strb	r1, [r3, r2]
   1b38c:	4b5a      	ldr	r3, [pc, #360]	; (1b4f8 <xQueueSemaphoreTake+0x398>)
   1b38e:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1b390:	003a      	movs	r2, r7
   1b392:	230c      	movs	r3, #12
   1b394:	18fb      	adds	r3, r7, r3
   1b396:	0011      	movs	r1, r2
   1b398:	0018      	movs	r0, r3
   1b39a:	4b5a      	ldr	r3, [pc, #360]	; (1b504 <xQueueSemaphoreTake+0x3a4>)
   1b39c:	4798      	blx	r3
   1b39e:	1e03      	subs	r3, r0, #0
   1b3a0:	d000      	beq.n	1b3a4 <xQueueSemaphoreTake+0x244>
   1b3a2:	e0bd      	b.n	1b520 <xQueueSemaphoreTake+0x3c0>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1b3a4:	69fb      	ldr	r3, [r7, #28]
   1b3a6:	0018      	movs	r0, r3
   1b3a8:	4b57      	ldr	r3, [pc, #348]	; (1b508 <xQueueSemaphoreTake+0x3a8>)
   1b3aa:	4798      	blx	r3
   1b3ac:	1e03      	subs	r3, r0, #0
   1b3ae:	d100      	bne.n	1b3b2 <xQueueSemaphoreTake+0x252>
   1b3b0:	e07c      	b.n	1b4ac <xQueueSemaphoreTake+0x34c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   1b3b2:	4b44      	ldr	r3, [pc, #272]	; (1b4c4 <xQueueSemaphoreTake+0x364>)
   1b3b4:	4798      	blx	r3
   1b3b6:	0003      	movs	r3, r0
   1b3b8:	0018      	movs	r0, r3
   1b3ba:	4b43      	ldr	r3, [pc, #268]	; (1b4c8 <xQueueSemaphoreTake+0x368>)
   1b3bc:	4798      	blx	r3
   1b3be:	0003      	movs	r3, r0
   1b3c0:	001a      	movs	r2, r3
   1b3c2:	4b42      	ldr	r3, [pc, #264]	; (1b4cc <xQueueSemaphoreTake+0x36c>)
   1b3c4:	881b      	ldrh	r3, [r3, #0]
   1b3c6:	4013      	ands	r3, r2
   1b3c8:	b29b      	uxth	r3, r3
   1b3ca:	2b00      	cmp	r3, #0
   1b3cc:	d029      	beq.n	1b422 <xQueueSemaphoreTake+0x2c2>
   1b3ce:	69fb      	ldr	r3, [r7, #28]
   1b3d0:	0018      	movs	r0, r3
   1b3d2:	4b3f      	ldr	r3, [pc, #252]	; (1b4d0 <xQueueSemaphoreTake+0x370>)
   1b3d4:	4798      	blx	r3
   1b3d6:	0003      	movs	r3, r0
   1b3d8:	001a      	movs	r2, r3
   1b3da:	4b3c      	ldr	r3, [pc, #240]	; (1b4cc <xQueueSemaphoreTake+0x36c>)
   1b3dc:	881b      	ldrh	r3, [r3, #0]
   1b3de:	4013      	ands	r3, r2
   1b3e0:	b29b      	uxth	r3, r3
   1b3e2:	2b00      	cmp	r3, #0
   1b3e4:	d01d      	beq.n	1b422 <xQueueSemaphoreTake+0x2c2>
   1b3e6:	69fb      	ldr	r3, [r7, #28]
   1b3e8:	0018      	movs	r0, r3
   1b3ea:	4b3a      	ldr	r3, [pc, #232]	; (1b4d4 <xQueueSemaphoreTake+0x374>)
   1b3ec:	4798      	blx	r3
   1b3ee:	0003      	movs	r3, r0
   1b3f0:	001a      	movs	r2, r3
   1b3f2:	4b39      	ldr	r3, [pc, #228]	; (1b4d8 <xQueueSemaphoreTake+0x378>)
   1b3f4:	5c9b      	ldrb	r3, [r3, r2]
   1b3f6:	3368      	adds	r3, #104	; 0x68
   1b3f8:	b2db      	uxtb	r3, r3
   1b3fa:	001d      	movs	r5, r3
   1b3fc:	69fb      	ldr	r3, [r7, #28]
   1b3fe:	0018      	movs	r0, r3
   1b400:	4b34      	ldr	r3, [pc, #208]	; (1b4d4 <xQueueSemaphoreTake+0x374>)
   1b402:	4798      	blx	r3
   1b404:	0003      	movs	r3, r0
   1b406:	001a      	movs	r2, r3
   1b408:	4b33      	ldr	r3, [pc, #204]	; (1b4d8 <xQueueSemaphoreTake+0x378>)
   1b40a:	5c9c      	ldrb	r4, [r3, r2]
   1b40c:	69fb      	ldr	r3, [r7, #28]
   1b40e:	0018      	movs	r0, r3
   1b410:	4b32      	ldr	r3, [pc, #200]	; (1b4dc <xQueueSemaphoreTake+0x37c>)
   1b412:	4798      	blx	r3
   1b414:	0003      	movs	r3, r0
   1b416:	b2db      	uxtb	r3, r3
   1b418:	001a      	movs	r2, r3
   1b41a:	0021      	movs	r1, r4
   1b41c:	0028      	movs	r0, r5
   1b41e:	4b30      	ldr	r3, [pc, #192]	; (1b4e0 <xQueueSemaphoreTake+0x380>)
   1b420:	4798      	blx	r3
   1b422:	69fb      	ldr	r3, [r7, #28]
   1b424:	0018      	movs	r0, r3
   1b426:	4b2b      	ldr	r3, [pc, #172]	; (1b4d4 <xQueueSemaphoreTake+0x374>)
   1b428:	4798      	blx	r3
   1b42a:	0003      	movs	r3, r0
   1b42c:	001a      	movs	r2, r3
   1b42e:	4b2a      	ldr	r3, [pc, #168]	; (1b4d8 <xQueueSemaphoreTake+0x378>)
   1b430:	5c9b      	ldrb	r3, [r3, r2]
   1b432:	2b02      	cmp	r3, #2
   1b434:	d018      	beq.n	1b468 <xQueueSemaphoreTake+0x308>
   1b436:	4b23      	ldr	r3, [pc, #140]	; (1b4c4 <xQueueSemaphoreTake+0x364>)
   1b438:	4798      	blx	r3
   1b43a:	0003      	movs	r3, r0
   1b43c:	0018      	movs	r0, r3
   1b43e:	4b22      	ldr	r3, [pc, #136]	; (1b4c8 <xQueueSemaphoreTake+0x368>)
   1b440:	4798      	blx	r3
   1b442:	0003      	movs	r3, r0
   1b444:	001a      	movs	r2, r3
   1b446:	4b21      	ldr	r3, [pc, #132]	; (1b4cc <xQueueSemaphoreTake+0x36c>)
   1b448:	881b      	ldrh	r3, [r3, #0]
   1b44a:	4013      	ands	r3, r2
   1b44c:	b29b      	uxth	r3, r3
   1b44e:	2b00      	cmp	r3, #0
   1b450:	d00a      	beq.n	1b468 <xQueueSemaphoreTake+0x308>
   1b452:	4b1c      	ldr	r3, [pc, #112]	; (1b4c4 <xQueueSemaphoreTake+0x364>)
   1b454:	4798      	blx	r3
   1b456:	0003      	movs	r3, r0
   1b458:	0018      	movs	r0, r3
   1b45a:	4b22      	ldr	r3, [pc, #136]	; (1b4e4 <xQueueSemaphoreTake+0x384>)
   1b45c:	4798      	blx	r3
   1b45e:	0003      	movs	r3, r0
   1b460:	b2db      	uxtb	r3, r3
   1b462:	0018      	movs	r0, r3
   1b464:	4b29      	ldr	r3, [pc, #164]	; (1b50c <xQueueSemaphoreTake+0x3ac>)
   1b466:	4798      	blx	r3

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1b468:	69fb      	ldr	r3, [r7, #28]
   1b46a:	681b      	ldr	r3, [r3, #0]
   1b46c:	2b00      	cmp	r3, #0
   1b46e:	d10a      	bne.n	1b486 <xQueueSemaphoreTake+0x326>
					{
						taskENTER_CRITICAL();
   1b470:	4b13      	ldr	r3, [pc, #76]	; (1b4c0 <xQueueSemaphoreTake+0x360>)
   1b472:	4798      	blx	r3
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   1b474:	69fb      	ldr	r3, [r7, #28]
   1b476:	685b      	ldr	r3, [r3, #4]
   1b478:	0018      	movs	r0, r3
   1b47a:	4b25      	ldr	r3, [pc, #148]	; (1b510 <xQueueSemaphoreTake+0x3b0>)
   1b47c:	4798      	blx	r3
   1b47e:	0003      	movs	r3, r0
   1b480:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
   1b482:	4b1d      	ldr	r3, [pc, #116]	; (1b4f8 <xQueueSemaphoreTake+0x398>)
   1b484:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1b486:	69fb      	ldr	r3, [r7, #28]
   1b488:	3324      	adds	r3, #36	; 0x24
   1b48a:	683a      	ldr	r2, [r7, #0]
   1b48c:	0011      	movs	r1, r2
   1b48e:	0018      	movs	r0, r3
   1b490:	4b20      	ldr	r3, [pc, #128]	; (1b514 <xQueueSemaphoreTake+0x3b4>)
   1b492:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   1b494:	69fb      	ldr	r3, [r7, #28]
   1b496:	0018      	movs	r0, r3
   1b498:	4b1f      	ldr	r3, [pc, #124]	; (1b518 <xQueueSemaphoreTake+0x3b8>)
   1b49a:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1b49c:	4b1f      	ldr	r3, [pc, #124]	; (1b51c <xQueueSemaphoreTake+0x3bc>)
   1b49e:	4798      	blx	r3
   1b4a0:	1e03      	subs	r3, r0, #0
   1b4a2:	d000      	beq.n	1b4a6 <xQueueSemaphoreTake+0x346>
   1b4a4:	e680      	b.n	1b1a8 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
   1b4a6:	4b13      	ldr	r3, [pc, #76]	; (1b4f4 <xQueueSemaphoreTake+0x394>)
   1b4a8:	4798      	blx	r3
   1b4aa:	e67d      	b.n	1b1a8 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
   1b4ac:	69fb      	ldr	r3, [r7, #28]
   1b4ae:	0018      	movs	r0, r3
   1b4b0:	4b19      	ldr	r3, [pc, #100]	; (1b518 <xQueueSemaphoreTake+0x3b8>)
   1b4b2:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1b4b4:	4b19      	ldr	r3, [pc, #100]	; (1b51c <xQueueSemaphoreTake+0x3bc>)
   1b4b6:	4798      	blx	r3
   1b4b8:	e676      	b.n	1b1a8 <xQueueSemaphoreTake+0x48>
   1b4ba:	46c0      	nop			; (mov r8, r8)
   1b4bc:	0001cbdd 	.word	0x0001cbdd
   1b4c0:	00019eb9 	.word	0x00019eb9
   1b4c4:	00018155 	.word	0x00018155
   1b4c8:	00017eb9 	.word	0x00017eb9
   1b4cc:	200000cc 	.word	0x200000cc
   1b4d0:	00017f79 	.word	0x00017f79
   1b4d4:	00017e79 	.word	0x00017e79
   1b4d8:	200000c0 	.word	0x200000c0
   1b4dc:	00017f59 	.word	0x00017f59
   1b4e0:	000188b1 	.word	0x000188b1
   1b4e4:	00017e99 	.word	0x00017e99
   1b4e8:	00018f0d 	.word	0x00018f0d
   1b4ec:	0001d0a9 	.word	0x0001d0a9
   1b4f0:	0001c74d 	.word	0x0001c74d
   1b4f4:	00019ea1 	.word	0x00019ea1
   1b4f8:	00019edd 	.word	0x00019edd
   1b4fc:	0001c88d 	.word	0x0001c88d
   1b500:	0001c175 	.word	0x0001c175
   1b504:	0001c8b5 	.word	0x0001c8b5
   1b508:	0001b8a9 	.word	0x0001b8a9
   1b50c:	00019049 	.word	0x00019049
   1b510:	0001cc15 	.word	0x0001cc15
   1b514:	0001c629 	.word	0x0001c629
   1b518:	0001b7b9 	.word	0x0001b7b9
   1b51c:	0001c18d 	.word	0x0001c18d
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
   1b520:	69fb      	ldr	r3, [r7, #28]
   1b522:	0018      	movs	r0, r3
   1b524:	4b2d      	ldr	r3, [pc, #180]	; (1b5dc <xQueueSemaphoreTake+0x47c>)
   1b526:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1b528:	4b2d      	ldr	r3, [pc, #180]	; (1b5e0 <xQueueSemaphoreTake+0x480>)
   1b52a:	4798      	blx	r3

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1b52c:	69fb      	ldr	r3, [r7, #28]
   1b52e:	0018      	movs	r0, r3
   1b530:	4b2c      	ldr	r3, [pc, #176]	; (1b5e4 <xQueueSemaphoreTake+0x484>)
   1b532:	4798      	blx	r3
   1b534:	1e03      	subs	r3, r0, #0
   1b536:	d100      	bne.n	1b53a <xQueueSemaphoreTake+0x3da>
   1b538:	e636      	b.n	1b1a8 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
   1b53a:	6a3b      	ldr	r3, [r7, #32]
   1b53c:	2b00      	cmp	r3, #0
   1b53e:	d010      	beq.n	1b562 <xQueueSemaphoreTake+0x402>
					{
						taskENTER_CRITICAL();
   1b540:	4b29      	ldr	r3, [pc, #164]	; (1b5e8 <xQueueSemaphoreTake+0x488>)
   1b542:	4798      	blx	r3
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
   1b544:	69fb      	ldr	r3, [r7, #28]
   1b546:	0018      	movs	r0, r3
   1b548:	4b28      	ldr	r3, [pc, #160]	; (1b5ec <xQueueSemaphoreTake+0x48c>)
   1b54a:	4798      	blx	r3
   1b54c:	0003      	movs	r3, r0
   1b54e:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
   1b550:	69fb      	ldr	r3, [r7, #28]
   1b552:	685b      	ldr	r3, [r3, #4]
   1b554:	697a      	ldr	r2, [r7, #20]
   1b556:	0011      	movs	r1, r2
   1b558:	0018      	movs	r0, r3
   1b55a:	4b25      	ldr	r3, [pc, #148]	; (1b5f0 <xQueueSemaphoreTake+0x490>)
   1b55c:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
   1b55e:	4b25      	ldr	r3, [pc, #148]	; (1b5f4 <xQueueSemaphoreTake+0x494>)
   1b560:	4798      	blx	r3
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
   1b562:	4b25      	ldr	r3, [pc, #148]	; (1b5f8 <xQueueSemaphoreTake+0x498>)
   1b564:	4798      	blx	r3
   1b566:	0003      	movs	r3, r0
   1b568:	0018      	movs	r0, r3
   1b56a:	4b24      	ldr	r3, [pc, #144]	; (1b5fc <xQueueSemaphoreTake+0x49c>)
   1b56c:	4798      	blx	r3
   1b56e:	0003      	movs	r3, r0
   1b570:	001a      	movs	r2, r3
   1b572:	4b23      	ldr	r3, [pc, #140]	; (1b600 <xQueueSemaphoreTake+0x4a0>)
   1b574:	881b      	ldrh	r3, [r3, #0]
   1b576:	4013      	ands	r3, r2
   1b578:	b29b      	uxth	r3, r3
   1b57a:	2b00      	cmp	r3, #0
   1b57c:	d029      	beq.n	1b5d2 <xQueueSemaphoreTake+0x472>
   1b57e:	69fb      	ldr	r3, [r7, #28]
   1b580:	0018      	movs	r0, r3
   1b582:	4b20      	ldr	r3, [pc, #128]	; (1b604 <xQueueSemaphoreTake+0x4a4>)
   1b584:	4798      	blx	r3
   1b586:	0003      	movs	r3, r0
   1b588:	001a      	movs	r2, r3
   1b58a:	4b1d      	ldr	r3, [pc, #116]	; (1b600 <xQueueSemaphoreTake+0x4a0>)
   1b58c:	881b      	ldrh	r3, [r3, #0]
   1b58e:	4013      	ands	r3, r2
   1b590:	b29b      	uxth	r3, r3
   1b592:	2b00      	cmp	r3, #0
   1b594:	d01d      	beq.n	1b5d2 <xQueueSemaphoreTake+0x472>
   1b596:	69fb      	ldr	r3, [r7, #28]
   1b598:	0018      	movs	r0, r3
   1b59a:	4b1b      	ldr	r3, [pc, #108]	; (1b608 <xQueueSemaphoreTake+0x4a8>)
   1b59c:	4798      	blx	r3
   1b59e:	0003      	movs	r3, r0
   1b5a0:	001a      	movs	r2, r3
   1b5a2:	4b1a      	ldr	r3, [pc, #104]	; (1b60c <xQueueSemaphoreTake+0x4ac>)
   1b5a4:	5c9b      	ldrb	r3, [r3, r2]
   1b5a6:	3350      	adds	r3, #80	; 0x50
   1b5a8:	b2db      	uxtb	r3, r3
   1b5aa:	001d      	movs	r5, r3
   1b5ac:	69fb      	ldr	r3, [r7, #28]
   1b5ae:	0018      	movs	r0, r3
   1b5b0:	4b15      	ldr	r3, [pc, #84]	; (1b608 <xQueueSemaphoreTake+0x4a8>)
   1b5b2:	4798      	blx	r3
   1b5b4:	0003      	movs	r3, r0
   1b5b6:	001a      	movs	r2, r3
   1b5b8:	4b14      	ldr	r3, [pc, #80]	; (1b60c <xQueueSemaphoreTake+0x4ac>)
   1b5ba:	5c9c      	ldrb	r4, [r3, r2]
   1b5bc:	69fb      	ldr	r3, [r7, #28]
   1b5be:	0018      	movs	r0, r3
   1b5c0:	4b13      	ldr	r3, [pc, #76]	; (1b610 <xQueueSemaphoreTake+0x4b0>)
   1b5c2:	4798      	blx	r3
   1b5c4:	0003      	movs	r3, r0
   1b5c6:	b2db      	uxtb	r3, r3
   1b5c8:	001a      	movs	r2, r3
   1b5ca:	0021      	movs	r1, r4
   1b5cc:	0028      	movs	r0, r5
   1b5ce:	4b11      	ldr	r3, [pc, #68]	; (1b614 <xQueueSemaphoreTake+0x4b4>)
   1b5d0:	4798      	blx	r3
				return errQUEUE_EMPTY;
   1b5d2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   1b5d4:	0018      	movs	r0, r3
   1b5d6:	46bd      	mov	sp, r7
   1b5d8:	b00a      	add	sp, #40	; 0x28
   1b5da:	bdb0      	pop	{r4, r5, r7, pc}
   1b5dc:	0001b7b9 	.word	0x0001b7b9
   1b5e0:	0001c18d 	.word	0x0001c18d
   1b5e4:	0001b8a9 	.word	0x0001b8a9
   1b5e8:	00019eb9 	.word	0x00019eb9
   1b5ec:	0001b65b 	.word	0x0001b65b
   1b5f0:	0001cf0d 	.word	0x0001cf0d
   1b5f4:	00019edd 	.word	0x00019edd
   1b5f8:	00018155 	.word	0x00018155
   1b5fc:	00017eb9 	.word	0x00017eb9
   1b600:	200000cc 	.word	0x200000cc
   1b604:	00017f79 	.word	0x00017f79
   1b608:	00017e79 	.word	0x00017e79
   1b60c:	200000c0 	.word	0x200000c0
   1b610:	00017f59 	.word	0x00017f59
   1b614:	000188b1 	.word	0x000188b1

0001b618 <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
	{
   1b618:	b580      	push	{r7, lr}
   1b61a:	b082      	sub	sp, #8
   1b61c:	af00      	add	r7, sp, #0
   1b61e:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
   1b620:	687b      	ldr	r3, [r7, #4]
   1b622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	}
   1b624:	0018      	movs	r0, r3
   1b626:	46bd      	mov	sp, r7
   1b628:	b002      	add	sp, #8
   1b62a:	bd80      	pop	{r7, pc}

0001b62c <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
   1b62c:	b580      	push	{r7, lr}
   1b62e:	b082      	sub	sp, #8
   1b630:	af00      	add	r7, sp, #0
   1b632:	6078      	str	r0, [r7, #4]
   1b634:	6039      	str	r1, [r7, #0]
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
   1b636:	687b      	ldr	r3, [r7, #4]
   1b638:	683a      	ldr	r2, [r7, #0]
   1b63a:	64da      	str	r2, [r3, #76]	; 0x4c
	}
   1b63c:	46c0      	nop			; (mov r8, r8)
   1b63e:	46bd      	mov	sp, r7
   1b640:	b002      	add	sp, #8
   1b642:	bd80      	pop	{r7, pc}

0001b644 <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
	{
   1b644:	b580      	push	{r7, lr}
   1b646:	b082      	sub	sp, #8
   1b648:	af00      	add	r7, sp, #0
   1b64a:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->ucQueueType;
   1b64c:	687b      	ldr	r3, [r7, #4]
   1b64e:	2250      	movs	r2, #80	; 0x50
   1b650:	5c9b      	ldrb	r3, [r3, r2]
	}
   1b652:	0018      	movs	r0, r3
   1b654:	46bd      	mov	sp, r7
   1b656:	b002      	add	sp, #8
   1b658:	bd80      	pop	{r7, pc}

0001b65a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
   1b65a:	b580      	push	{r7, lr}
   1b65c:	b084      	sub	sp, #16
   1b65e:	af00      	add	r7, sp, #0
   1b660:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
   1b662:	687b      	ldr	r3, [r7, #4]
   1b664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1b666:	2b00      	cmp	r3, #0
   1b668:	d006      	beq.n	1b678 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
   1b66a:	687b      	ldr	r3, [r7, #4]
   1b66c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1b66e:	681b      	ldr	r3, [r3, #0]
   1b670:	2205      	movs	r2, #5
   1b672:	1ad3      	subs	r3, r2, r3
   1b674:	60fb      	str	r3, [r7, #12]
   1b676:	e001      	b.n	1b67c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
   1b678:	2300      	movs	r3, #0
   1b67a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
   1b67c:	68fb      	ldr	r3, [r7, #12]
	}
   1b67e:	0018      	movs	r0, r3
   1b680:	46bd      	mov	sp, r7
   1b682:	b004      	add	sp, #16
   1b684:	bd80      	pop	{r7, pc}
	...

0001b688 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
   1b688:	b580      	push	{r7, lr}
   1b68a:	b086      	sub	sp, #24
   1b68c:	af00      	add	r7, sp, #0
   1b68e:	60f8      	str	r0, [r7, #12]
   1b690:	60b9      	str	r1, [r7, #8]
   1b692:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
   1b694:	2300      	movs	r3, #0
   1b696:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1b698:	68fb      	ldr	r3, [r7, #12]
   1b69a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b69c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   1b69e:	68fb      	ldr	r3, [r7, #12]
   1b6a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b6a2:	2b00      	cmp	r3, #0
   1b6a4:	d10e      	bne.n	1b6c4 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1b6a6:	68fb      	ldr	r3, [r7, #12]
   1b6a8:	681b      	ldr	r3, [r3, #0]
   1b6aa:	2b00      	cmp	r3, #0
   1b6ac:	d14e      	bne.n	1b74c <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   1b6ae:	68fb      	ldr	r3, [r7, #12]
   1b6b0:	685b      	ldr	r3, [r3, #4]
   1b6b2:	0018      	movs	r0, r3
   1b6b4:	4b2a      	ldr	r3, [pc, #168]	; (1b760 <prvCopyDataToQueue+0xd8>)
   1b6b6:	4798      	blx	r3
   1b6b8:	0003      	movs	r3, r0
   1b6ba:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
   1b6bc:	68fb      	ldr	r3, [r7, #12]
   1b6be:	2200      	movs	r2, #0
   1b6c0:	605a      	str	r2, [r3, #4]
   1b6c2:	e043      	b.n	1b74c <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
   1b6c4:	687b      	ldr	r3, [r7, #4]
   1b6c6:	2b00      	cmp	r3, #0
   1b6c8:	d119      	bne.n	1b6fe <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
   1b6ca:	68fb      	ldr	r3, [r7, #12]
   1b6cc:	6898      	ldr	r0, [r3, #8]
   1b6ce:	68fb      	ldr	r3, [r7, #12]
   1b6d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1b6d2:	68bb      	ldr	r3, [r7, #8]
   1b6d4:	0019      	movs	r1, r3
   1b6d6:	4b23      	ldr	r3, [pc, #140]	; (1b764 <prvCopyDataToQueue+0xdc>)
   1b6d8:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   1b6da:	68fb      	ldr	r3, [r7, #12]
   1b6dc:	689a      	ldr	r2, [r3, #8]
   1b6de:	68fb      	ldr	r3, [r7, #12]
   1b6e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b6e2:	18d2      	adds	r2, r2, r3
   1b6e4:	68fb      	ldr	r3, [r7, #12]
   1b6e6:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1b6e8:	68fb      	ldr	r3, [r7, #12]
   1b6ea:	689a      	ldr	r2, [r3, #8]
   1b6ec:	68fb      	ldr	r3, [r7, #12]
   1b6ee:	685b      	ldr	r3, [r3, #4]
   1b6f0:	429a      	cmp	r2, r3
   1b6f2:	d32b      	bcc.n	1b74c <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   1b6f4:	68fb      	ldr	r3, [r7, #12]
   1b6f6:	681a      	ldr	r2, [r3, #0]
   1b6f8:	68fb      	ldr	r3, [r7, #12]
   1b6fa:	609a      	str	r2, [r3, #8]
   1b6fc:	e026      	b.n	1b74c <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1b6fe:	68fb      	ldr	r3, [r7, #12]
   1b700:	68d8      	ldr	r0, [r3, #12]
   1b702:	68fb      	ldr	r3, [r7, #12]
   1b704:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1b706:	68bb      	ldr	r3, [r7, #8]
   1b708:	0019      	movs	r1, r3
   1b70a:	4b16      	ldr	r3, [pc, #88]	; (1b764 <prvCopyDataToQueue+0xdc>)
   1b70c:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
   1b70e:	68fb      	ldr	r3, [r7, #12]
   1b710:	68da      	ldr	r2, [r3, #12]
   1b712:	68fb      	ldr	r3, [r7, #12]
   1b714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b716:	425b      	negs	r3, r3
   1b718:	18d2      	adds	r2, r2, r3
   1b71a:	68fb      	ldr	r3, [r7, #12]
   1b71c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1b71e:	68fb      	ldr	r3, [r7, #12]
   1b720:	68da      	ldr	r2, [r3, #12]
   1b722:	68fb      	ldr	r3, [r7, #12]
   1b724:	681b      	ldr	r3, [r3, #0]
   1b726:	429a      	cmp	r2, r3
   1b728:	d207      	bcs.n	1b73a <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   1b72a:	68fb      	ldr	r3, [r7, #12]
   1b72c:	685a      	ldr	r2, [r3, #4]
   1b72e:	68fb      	ldr	r3, [r7, #12]
   1b730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b732:	425b      	negs	r3, r3
   1b734:	18d2      	adds	r2, r2, r3
   1b736:	68fb      	ldr	r3, [r7, #12]
   1b738:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
   1b73a:	687b      	ldr	r3, [r7, #4]
   1b73c:	2b02      	cmp	r3, #2
   1b73e:	d105      	bne.n	1b74c <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1b740:	693b      	ldr	r3, [r7, #16]
   1b742:	2b00      	cmp	r3, #0
   1b744:	d002      	beq.n	1b74c <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
   1b746:	693b      	ldr	r3, [r7, #16]
   1b748:	3b01      	subs	r3, #1
   1b74a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1b74c:	693b      	ldr	r3, [r7, #16]
   1b74e:	1c5a      	adds	r2, r3, #1
   1b750:	68fb      	ldr	r3, [r7, #12]
   1b752:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
   1b754:	697b      	ldr	r3, [r7, #20]
}
   1b756:	0018      	movs	r0, r3
   1b758:	46bd      	mov	sp, r7
   1b75a:	b006      	add	sp, #24
   1b75c:	bd80      	pop	{r7, pc}
   1b75e:	46c0      	nop			; (mov r8, r8)
   1b760:	0001cda5 	.word	0x0001cda5
   1b764:	0003404d 	.word	0x0003404d

0001b768 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
   1b768:	b580      	push	{r7, lr}
   1b76a:	b082      	sub	sp, #8
   1b76c:	af00      	add	r7, sp, #0
   1b76e:	6078      	str	r0, [r7, #4]
   1b770:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   1b772:	687b      	ldr	r3, [r7, #4]
   1b774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b776:	2b00      	cmp	r3, #0
   1b778:	d018      	beq.n	1b7ac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
   1b77a:	687b      	ldr	r3, [r7, #4]
   1b77c:	68da      	ldr	r2, [r3, #12]
   1b77e:	687b      	ldr	r3, [r7, #4]
   1b780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b782:	18d2      	adds	r2, r2, r3
   1b784:	687b      	ldr	r3, [r7, #4]
   1b786:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   1b788:	687b      	ldr	r3, [r7, #4]
   1b78a:	68da      	ldr	r2, [r3, #12]
   1b78c:	687b      	ldr	r3, [r7, #4]
   1b78e:	685b      	ldr	r3, [r3, #4]
   1b790:	429a      	cmp	r2, r3
   1b792:	d303      	bcc.n	1b79c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
   1b794:	687b      	ldr	r3, [r7, #4]
   1b796:	681a      	ldr	r2, [r3, #0]
   1b798:	687b      	ldr	r3, [r7, #4]
   1b79a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
   1b79c:	687b      	ldr	r3, [r7, #4]
   1b79e:	68d9      	ldr	r1, [r3, #12]
   1b7a0:	687b      	ldr	r3, [r7, #4]
   1b7a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1b7a4:	683b      	ldr	r3, [r7, #0]
   1b7a6:	0018      	movs	r0, r3
   1b7a8:	4b02      	ldr	r3, [pc, #8]	; (1b7b4 <prvCopyDataFromQueue+0x4c>)
   1b7aa:	4798      	blx	r3
	}
}
   1b7ac:	46c0      	nop			; (mov r8, r8)
   1b7ae:	46bd      	mov	sp, r7
   1b7b0:	b002      	add	sp, #8
   1b7b2:	bd80      	pop	{r7, pc}
   1b7b4:	0003404d 	.word	0x0003404d

0001b7b8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
   1b7b8:	b580      	push	{r7, lr}
   1b7ba:	b084      	sub	sp, #16
   1b7bc:	af00      	add	r7, sp, #0
   1b7be:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   1b7c0:	4b34      	ldr	r3, [pc, #208]	; (1b894 <prvUnlockQueue+0xdc>)
   1b7c2:	4798      	blx	r3
	{
		int8_t cTxLock = pxQueue->cTxLock;
   1b7c4:	230f      	movs	r3, #15
   1b7c6:	18fb      	adds	r3, r7, r3
   1b7c8:	687a      	ldr	r2, [r7, #4]
   1b7ca:	2145      	movs	r1, #69	; 0x45
   1b7cc:	5c52      	ldrb	r2, [r2, r1]
   1b7ce:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1b7d0:	e022      	b.n	1b818 <prvUnlockQueue+0x60>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
   1b7d2:	687b      	ldr	r3, [r7, #4]
   1b7d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1b7d6:	2b00      	cmp	r3, #0
   1b7d8:	d009      	beq.n	1b7ee <prvUnlockQueue+0x36>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   1b7da:	687b      	ldr	r3, [r7, #4]
   1b7dc:	2100      	movs	r1, #0
   1b7de:	0018      	movs	r0, r3
   1b7e0:	4b2d      	ldr	r3, [pc, #180]	; (1b898 <prvUnlockQueue+0xe0>)
   1b7e2:	4798      	blx	r3
   1b7e4:	1e03      	subs	r3, r0, #0
   1b7e6:	d00f      	beq.n	1b808 <prvUnlockQueue+0x50>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
   1b7e8:	4b2c      	ldr	r3, [pc, #176]	; (1b89c <prvUnlockQueue+0xe4>)
   1b7ea:	4798      	blx	r3
   1b7ec:	e00c      	b.n	1b808 <prvUnlockQueue+0x50>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1b7ee:	687b      	ldr	r3, [r7, #4]
   1b7f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1b7f2:	2b00      	cmp	r3, #0
   1b7f4:	d017      	beq.n	1b826 <prvUnlockQueue+0x6e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1b7f6:	687b      	ldr	r3, [r7, #4]
   1b7f8:	3324      	adds	r3, #36	; 0x24
   1b7fa:	0018      	movs	r0, r3
   1b7fc:	4b28      	ldr	r3, [pc, #160]	; (1b8a0 <prvUnlockQueue+0xe8>)
   1b7fe:	4798      	blx	r3
   1b800:	1e03      	subs	r3, r0, #0
   1b802:	d001      	beq.n	1b808 <prvUnlockQueue+0x50>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
   1b804:	4b25      	ldr	r3, [pc, #148]	; (1b89c <prvUnlockQueue+0xe4>)
   1b806:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
   1b808:	230f      	movs	r3, #15
   1b80a:	18fb      	adds	r3, r7, r3
   1b80c:	781b      	ldrb	r3, [r3, #0]
   1b80e:	3b01      	subs	r3, #1
   1b810:	b2da      	uxtb	r2, r3
   1b812:	230f      	movs	r3, #15
   1b814:	18fb      	adds	r3, r7, r3
   1b816:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1b818:	230f      	movs	r3, #15
   1b81a:	18fb      	adds	r3, r7, r3
   1b81c:	781b      	ldrb	r3, [r3, #0]
   1b81e:	b25b      	sxtb	r3, r3
   1b820:	2b00      	cmp	r3, #0
   1b822:	dcd6      	bgt.n	1b7d2 <prvUnlockQueue+0x1a>
   1b824:	e000      	b.n	1b828 <prvUnlockQueue+0x70>
						break;
   1b826:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
   1b828:	687b      	ldr	r3, [r7, #4]
   1b82a:	2245      	movs	r2, #69	; 0x45
   1b82c:	21ff      	movs	r1, #255	; 0xff
   1b82e:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   1b830:	4b1c      	ldr	r3, [pc, #112]	; (1b8a4 <prvUnlockQueue+0xec>)
   1b832:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   1b834:	4b17      	ldr	r3, [pc, #92]	; (1b894 <prvUnlockQueue+0xdc>)
   1b836:	4798      	blx	r3
	{
		int8_t cRxLock = pxQueue->cRxLock;
   1b838:	230e      	movs	r3, #14
   1b83a:	18fb      	adds	r3, r7, r3
   1b83c:	687a      	ldr	r2, [r7, #4]
   1b83e:	2144      	movs	r1, #68	; 0x44
   1b840:	5c52      	ldrb	r2, [r2, r1]
   1b842:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
   1b844:	e014      	b.n	1b870 <prvUnlockQueue+0xb8>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1b846:	687b      	ldr	r3, [r7, #4]
   1b848:	691b      	ldr	r3, [r3, #16]
   1b84a:	2b00      	cmp	r3, #0
   1b84c:	d017      	beq.n	1b87e <prvUnlockQueue+0xc6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1b84e:	687b      	ldr	r3, [r7, #4]
   1b850:	3310      	adds	r3, #16
   1b852:	0018      	movs	r0, r3
   1b854:	4b12      	ldr	r3, [pc, #72]	; (1b8a0 <prvUnlockQueue+0xe8>)
   1b856:	4798      	blx	r3
   1b858:	1e03      	subs	r3, r0, #0
   1b85a:	d001      	beq.n	1b860 <prvUnlockQueue+0xa8>
				{
					vTaskMissedYield();
   1b85c:	4b0f      	ldr	r3, [pc, #60]	; (1b89c <prvUnlockQueue+0xe4>)
   1b85e:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
   1b860:	230e      	movs	r3, #14
   1b862:	18fb      	adds	r3, r7, r3
   1b864:	781b      	ldrb	r3, [r3, #0]
   1b866:	3b01      	subs	r3, #1
   1b868:	b2da      	uxtb	r2, r3
   1b86a:	230e      	movs	r3, #14
   1b86c:	18fb      	adds	r3, r7, r3
   1b86e:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1b870:	230e      	movs	r3, #14
   1b872:	18fb      	adds	r3, r7, r3
   1b874:	781b      	ldrb	r3, [r3, #0]
   1b876:	b25b      	sxtb	r3, r3
   1b878:	2b00      	cmp	r3, #0
   1b87a:	dce4      	bgt.n	1b846 <prvUnlockQueue+0x8e>
   1b87c:	e000      	b.n	1b880 <prvUnlockQueue+0xc8>
			}
			else
			{
				break;
   1b87e:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
   1b880:	687b      	ldr	r3, [r7, #4]
   1b882:	2244      	movs	r2, #68	; 0x44
   1b884:	21ff      	movs	r1, #255	; 0xff
   1b886:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   1b888:	4b06      	ldr	r3, [pc, #24]	; (1b8a4 <prvUnlockQueue+0xec>)
   1b88a:	4798      	blx	r3
}
   1b88c:	46c0      	nop			; (mov r8, r8)
   1b88e:	46bd      	mov	sp, r7
   1b890:	b004      	add	sp, #16
   1b892:	bd80      	pop	{r7, pc}
   1b894:	00019eb9 	.word	0x00019eb9
   1b898:	0001b98d 	.word	0x0001b98d
   1b89c:	0001c961 	.word	0x0001c961
   1b8a0:	0001c74d 	.word	0x0001c74d
   1b8a4:	00019edd 	.word	0x00019edd

0001b8a8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   1b8a8:	b580      	push	{r7, lr}
   1b8aa:	b084      	sub	sp, #16
   1b8ac:	af00      	add	r7, sp, #0
   1b8ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1b8b0:	4b08      	ldr	r3, [pc, #32]	; (1b8d4 <prvIsQueueEmpty+0x2c>)
   1b8b2:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   1b8b4:	687b      	ldr	r3, [r7, #4]
   1b8b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b8b8:	2b00      	cmp	r3, #0
   1b8ba:	d102      	bne.n	1b8c2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
   1b8bc:	2301      	movs	r3, #1
   1b8be:	60fb      	str	r3, [r7, #12]
   1b8c0:	e001      	b.n	1b8c6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
   1b8c2:	2300      	movs	r3, #0
   1b8c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1b8c6:	4b04      	ldr	r3, [pc, #16]	; (1b8d8 <prvIsQueueEmpty+0x30>)
   1b8c8:	4798      	blx	r3

	return xReturn;
   1b8ca:	68fb      	ldr	r3, [r7, #12]
}
   1b8cc:	0018      	movs	r0, r3
   1b8ce:	46bd      	mov	sp, r7
   1b8d0:	b004      	add	sp, #16
   1b8d2:	bd80      	pop	{r7, pc}
   1b8d4:	00019eb9 	.word	0x00019eb9
   1b8d8:	00019edd 	.word	0x00019edd

0001b8dc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
   1b8dc:	b580      	push	{r7, lr}
   1b8de:	b084      	sub	sp, #16
   1b8e0:	af00      	add	r7, sp, #0
   1b8e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1b8e4:	4b09      	ldr	r3, [pc, #36]	; (1b90c <prvIsQueueFull+0x30>)
   1b8e6:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   1b8e8:	687b      	ldr	r3, [r7, #4]
   1b8ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1b8ec:	687b      	ldr	r3, [r7, #4]
   1b8ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1b8f0:	429a      	cmp	r2, r3
   1b8f2:	d102      	bne.n	1b8fa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
   1b8f4:	2301      	movs	r3, #1
   1b8f6:	60fb      	str	r3, [r7, #12]
   1b8f8:	e001      	b.n	1b8fe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
   1b8fa:	2300      	movs	r3, #0
   1b8fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1b8fe:	4b04      	ldr	r3, [pc, #16]	; (1b910 <prvIsQueueFull+0x34>)
   1b900:	4798      	blx	r3

	return xReturn;
   1b902:	68fb      	ldr	r3, [r7, #12]
}
   1b904:	0018      	movs	r0, r3
   1b906:	46bd      	mov	sp, r7
   1b908:	b004      	add	sp, #16
   1b90a:	bd80      	pop	{r7, pc}
   1b90c:	00019eb9 	.word	0x00019eb9
   1b910:	00019edd 	.word	0x00019edd

0001b914 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1b914:	b580      	push	{r7, lr}
   1b916:	b086      	sub	sp, #24
   1b918:	af00      	add	r7, sp, #0
   1b91a:	60f8      	str	r0, [r7, #12]
   1b91c:	60b9      	str	r1, [r7, #8]
   1b91e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1b920:	68fb      	ldr	r3, [r7, #12]
   1b922:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   1b924:	4b15      	ldr	r3, [pc, #84]	; (1b97c <vQueueWaitForMessageRestricted+0x68>)
   1b926:	4798      	blx	r3
   1b928:	697b      	ldr	r3, [r7, #20]
   1b92a:	2244      	movs	r2, #68	; 0x44
   1b92c:	5c9b      	ldrb	r3, [r3, r2]
   1b92e:	b25b      	sxtb	r3, r3
   1b930:	3301      	adds	r3, #1
   1b932:	d103      	bne.n	1b93c <vQueueWaitForMessageRestricted+0x28>
   1b934:	697b      	ldr	r3, [r7, #20]
   1b936:	2244      	movs	r2, #68	; 0x44
   1b938:	2100      	movs	r1, #0
   1b93a:	5499      	strb	r1, [r3, r2]
   1b93c:	697b      	ldr	r3, [r7, #20]
   1b93e:	2245      	movs	r2, #69	; 0x45
   1b940:	5c9b      	ldrb	r3, [r3, r2]
   1b942:	b25b      	sxtb	r3, r3
   1b944:	3301      	adds	r3, #1
   1b946:	d103      	bne.n	1b950 <vQueueWaitForMessageRestricted+0x3c>
   1b948:	697b      	ldr	r3, [r7, #20]
   1b94a:	2245      	movs	r2, #69	; 0x45
   1b94c:	2100      	movs	r1, #0
   1b94e:	5499      	strb	r1, [r3, r2]
   1b950:	4b0b      	ldr	r3, [pc, #44]	; (1b980 <vQueueWaitForMessageRestricted+0x6c>)
   1b952:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   1b954:	697b      	ldr	r3, [r7, #20]
   1b956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b958:	2b00      	cmp	r3, #0
   1b95a:	d106      	bne.n	1b96a <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
   1b95c:	697b      	ldr	r3, [r7, #20]
   1b95e:	3324      	adds	r3, #36	; 0x24
   1b960:	687a      	ldr	r2, [r7, #4]
   1b962:	68b9      	ldr	r1, [r7, #8]
   1b964:	0018      	movs	r0, r3
   1b966:	4b07      	ldr	r3, [pc, #28]	; (1b984 <vQueueWaitForMessageRestricted+0x70>)
   1b968:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
   1b96a:	697b      	ldr	r3, [r7, #20]
   1b96c:	0018      	movs	r0, r3
   1b96e:	4b06      	ldr	r3, [pc, #24]	; (1b988 <vQueueWaitForMessageRestricted+0x74>)
   1b970:	4798      	blx	r3
	}
   1b972:	46c0      	nop			; (mov r8, r8)
   1b974:	46bd      	mov	sp, r7
   1b976:	b006      	add	sp, #24
   1b978:	bd80      	pop	{r7, pc}
   1b97a:	46c0      	nop			; (mov r8, r8)
   1b97c:	00019eb9 	.word	0x00019eb9
   1b980:	00019edd 	.word	0x00019edd
   1b984:	0001c66d 	.word	0x0001c66d
   1b988:	0001b7b9 	.word	0x0001b7b9

0001b98c <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
   1b98c:	b5b0      	push	{r4, r5, r7, lr}
   1b98e:	b086      	sub	sp, #24
   1b990:	af00      	add	r7, sp, #0
   1b992:	6078      	str	r0, [r7, #4]
   1b994:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
   1b996:	687b      	ldr	r3, [r7, #4]
   1b998:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1b99a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
   1b99c:	2300      	movs	r3, #0
   1b99e:	617b      	str	r3, [r7, #20]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
   1b9a0:	693b      	ldr	r3, [r7, #16]
   1b9a2:	2b00      	cmp	r3, #0
   1b9a4:	d101      	bne.n	1b9aa <prvNotifyQueueSetContainer+0x1e>
   1b9a6:	b672      	cpsid	i
   1b9a8:	e7fe      	b.n	1b9a8 <prvNotifyQueueSetContainer+0x1c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
   1b9aa:	693b      	ldr	r3, [r7, #16]
   1b9ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1b9ae:	693b      	ldr	r3, [r7, #16]
   1b9b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1b9b2:	429a      	cmp	r2, r3
   1b9b4:	d301      	bcc.n	1b9ba <prvNotifyQueueSetContainer+0x2e>
   1b9b6:	b672      	cpsid	i
   1b9b8:	e7fe      	b.n	1b9b8 <prvNotifyQueueSetContainer+0x2c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
   1b9ba:	693b      	ldr	r3, [r7, #16]
   1b9bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1b9be:	693b      	ldr	r3, [r7, #16]
   1b9c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1b9c2:	429a      	cmp	r2, r3
   1b9c4:	d300      	bcc.n	1b9c8 <prvNotifyQueueSetContainer+0x3c>
   1b9c6:	e08b      	b.n	1bae0 <prvNotifyQueueSetContainer+0x154>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
   1b9c8:	230f      	movs	r3, #15
   1b9ca:	18fb      	adds	r3, r7, r3
   1b9cc:	693a      	ldr	r2, [r7, #16]
   1b9ce:	2145      	movs	r1, #69	; 0x45
   1b9d0:	5c52      	ldrb	r2, [r2, r1]
   1b9d2:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND( pxQueueSetContainer );
   1b9d4:	4b45      	ldr	r3, [pc, #276]	; (1baec <prvNotifyQueueSetContainer+0x160>)
   1b9d6:	4798      	blx	r3
   1b9d8:	0003      	movs	r3, r0
   1b9da:	0018      	movs	r0, r3
   1b9dc:	4b44      	ldr	r3, [pc, #272]	; (1baf0 <prvNotifyQueueSetContainer+0x164>)
   1b9de:	4798      	blx	r3
   1b9e0:	0003      	movs	r3, r0
   1b9e2:	001a      	movs	r2, r3
   1b9e4:	4b43      	ldr	r3, [pc, #268]	; (1baf4 <prvNotifyQueueSetContainer+0x168>)
   1b9e6:	881b      	ldrh	r3, [r3, #0]
   1b9e8:	4013      	ands	r3, r2
   1b9ea:	b29b      	uxth	r3, r3
   1b9ec:	2b00      	cmp	r3, #0
   1b9ee:	d02e      	beq.n	1ba4e <prvNotifyQueueSetContainer+0xc2>
   1b9f0:	693b      	ldr	r3, [r7, #16]
   1b9f2:	0018      	movs	r0, r3
   1b9f4:	4b40      	ldr	r3, [pc, #256]	; (1baf8 <prvNotifyQueueSetContainer+0x16c>)
   1b9f6:	4798      	blx	r3
   1b9f8:	0003      	movs	r3, r0
   1b9fa:	001a      	movs	r2, r3
   1b9fc:	4b3d      	ldr	r3, [pc, #244]	; (1baf4 <prvNotifyQueueSetContainer+0x168>)
   1b9fe:	881b      	ldrh	r3, [r3, #0]
   1ba00:	4013      	ands	r3, r2
   1ba02:	b29b      	uxth	r3, r3
   1ba04:	2b00      	cmp	r3, #0
   1ba06:	d022      	beq.n	1ba4e <prvNotifyQueueSetContainer+0xc2>
   1ba08:	683b      	ldr	r3, [r7, #0]
   1ba0a:	2b00      	cmp	r3, #0
   1ba0c:	d10b      	bne.n	1ba26 <prvNotifyQueueSetContainer+0x9a>
   1ba0e:	693b      	ldr	r3, [r7, #16]
   1ba10:	0018      	movs	r0, r3
   1ba12:	4b3a      	ldr	r3, [pc, #232]	; (1bafc <prvNotifyQueueSetContainer+0x170>)
   1ba14:	4798      	blx	r3
   1ba16:	0003      	movs	r3, r0
   1ba18:	001a      	movs	r2, r3
   1ba1a:	4b39      	ldr	r3, [pc, #228]	; (1bb00 <prvNotifyQueueSetContainer+0x174>)
   1ba1c:	5c9b      	ldrb	r3, [r3, r2]
   1ba1e:	3320      	adds	r3, #32
   1ba20:	b2db      	uxtb	r3, r3
   1ba22:	001d      	movs	r5, r3
   1ba24:	e000      	b.n	1ba28 <prvNotifyQueueSetContainer+0x9c>
   1ba26:	2525      	movs	r5, #37	; 0x25
   1ba28:	693b      	ldr	r3, [r7, #16]
   1ba2a:	0018      	movs	r0, r3
   1ba2c:	4b33      	ldr	r3, [pc, #204]	; (1bafc <prvNotifyQueueSetContainer+0x170>)
   1ba2e:	4798      	blx	r3
   1ba30:	0003      	movs	r3, r0
   1ba32:	001a      	movs	r2, r3
   1ba34:	4b32      	ldr	r3, [pc, #200]	; (1bb00 <prvNotifyQueueSetContainer+0x174>)
   1ba36:	5c9c      	ldrb	r4, [r3, r2]
   1ba38:	693b      	ldr	r3, [r7, #16]
   1ba3a:	0018      	movs	r0, r3
   1ba3c:	4b31      	ldr	r3, [pc, #196]	; (1bb04 <prvNotifyQueueSetContainer+0x178>)
   1ba3e:	4798      	blx	r3
   1ba40:	0003      	movs	r3, r0
   1ba42:	b2db      	uxtb	r3, r3
   1ba44:	001a      	movs	r2, r3
   1ba46:	0021      	movs	r1, r4
   1ba48:	0028      	movs	r0, r5
   1ba4a:	4b2f      	ldr	r3, [pc, #188]	; (1bb08 <prvNotifyQueueSetContainer+0x17c>)
   1ba4c:	4798      	blx	r3
   1ba4e:	693b      	ldr	r3, [r7, #16]
   1ba50:	0018      	movs	r0, r3
   1ba52:	4b2a      	ldr	r3, [pc, #168]	; (1bafc <prvNotifyQueueSetContainer+0x170>)
   1ba54:	4798      	blx	r3
   1ba56:	0003      	movs	r3, r0
   1ba58:	001a      	movs	r2, r3
   1ba5a:	4b29      	ldr	r3, [pc, #164]	; (1bb00 <prvNotifyQueueSetContainer+0x174>)
   1ba5c:	5c9c      	ldrb	r4, [r3, r2]
   1ba5e:	693b      	ldr	r3, [r7, #16]
   1ba60:	0018      	movs	r0, r3
   1ba62:	4b28      	ldr	r3, [pc, #160]	; (1bb04 <prvNotifyQueueSetContainer+0x178>)
   1ba64:	4798      	blx	r3
   1ba66:	0003      	movs	r3, r0
   1ba68:	b2dd      	uxtb	r5, r3
   1ba6a:	693b      	ldr	r3, [r7, #16]
   1ba6c:	0018      	movs	r0, r3
   1ba6e:	4b23      	ldr	r3, [pc, #140]	; (1bafc <prvNotifyQueueSetContainer+0x170>)
   1ba70:	4798      	blx	r3
   1ba72:	0003      	movs	r3, r0
   1ba74:	001a      	movs	r2, r3
   1ba76:	4b22      	ldr	r3, [pc, #136]	; (1bb00 <prvNotifyQueueSetContainer+0x174>)
   1ba78:	5c9b      	ldrb	r3, [r3, r2]
   1ba7a:	2b02      	cmp	r3, #2
   1ba7c:	d005      	beq.n	1ba8a <prvNotifyQueueSetContainer+0xfe>
   1ba7e:	693b      	ldr	r3, [r7, #16]
   1ba80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1ba82:	b2db      	uxtb	r3, r3
   1ba84:	3301      	adds	r3, #1
   1ba86:	b2db      	uxtb	r3, r3
   1ba88:	e000      	b.n	1ba8c <prvNotifyQueueSetContainer+0x100>
   1ba8a:	2300      	movs	r3, #0
   1ba8c:	001a      	movs	r2, r3
   1ba8e:	0029      	movs	r1, r5
   1ba90:	0020      	movs	r0, r4
   1ba92:	4b1e      	ldr	r3, [pc, #120]	; (1bb0c <prvNotifyQueueSetContainer+0x180>)
   1ba94:	4798      	blx	r3

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
   1ba96:	683a      	ldr	r2, [r7, #0]
   1ba98:	1d39      	adds	r1, r7, #4
   1ba9a:	693b      	ldr	r3, [r7, #16]
   1ba9c:	0018      	movs	r0, r3
   1ba9e:	4b1c      	ldr	r3, [pc, #112]	; (1bb10 <prvNotifyQueueSetContainer+0x184>)
   1baa0:	4798      	blx	r3
   1baa2:	0003      	movs	r3, r0
   1baa4:	617b      	str	r3, [r7, #20]

			if( cTxLock == queueUNLOCKED )
   1baa6:	230f      	movs	r3, #15
   1baa8:	18fb      	adds	r3, r7, r3
   1baaa:	781b      	ldrb	r3, [r3, #0]
   1baac:	b25b      	sxtb	r3, r3
   1baae:	3301      	adds	r3, #1
   1bab0:	d10d      	bne.n	1bace <prvNotifyQueueSetContainer+0x142>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
   1bab2:	693b      	ldr	r3, [r7, #16]
   1bab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1bab6:	2b00      	cmp	r3, #0
   1bab8:	d012      	beq.n	1bae0 <prvNotifyQueueSetContainer+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
   1baba:	693b      	ldr	r3, [r7, #16]
   1babc:	3324      	adds	r3, #36	; 0x24
   1babe:	0018      	movs	r0, r3
   1bac0:	4b14      	ldr	r3, [pc, #80]	; (1bb14 <prvNotifyQueueSetContainer+0x188>)
   1bac2:	4798      	blx	r3
   1bac4:	1e03      	subs	r3, r0, #0
   1bac6:	d00b      	beq.n	1bae0 <prvNotifyQueueSetContainer+0x154>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
   1bac8:	2301      	movs	r3, #1
   1baca:	617b      	str	r3, [r7, #20]
   1bacc:	e008      	b.n	1bae0 <prvNotifyQueueSetContainer+0x154>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1bace:	230f      	movs	r3, #15
   1bad0:	18fb      	adds	r3, r7, r3
   1bad2:	781b      	ldrb	r3, [r3, #0]
   1bad4:	3301      	adds	r3, #1
   1bad6:	b2db      	uxtb	r3, r3
   1bad8:	b259      	sxtb	r1, r3
   1bada:	693b      	ldr	r3, [r7, #16]
   1badc:	2245      	movs	r2, #69	; 0x45
   1bade:	5499      	strb	r1, [r3, r2]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1bae0:	697b      	ldr	r3, [r7, #20]
	}
   1bae2:	0018      	movs	r0, r3
   1bae4:	46bd      	mov	sp, r7
   1bae6:	b006      	add	sp, #24
   1bae8:	bdb0      	pop	{r4, r5, r7, pc}
   1baea:	46c0      	nop			; (mov r8, r8)
   1baec:	00018155 	.word	0x00018155
   1baf0:	00017eb9 	.word	0x00017eb9
   1baf4:	200000cc 	.word	0x200000cc
   1baf8:	00017f79 	.word	0x00017f79
   1bafc:	00017e79 	.word	0x00017e79
   1bb00:	200000c0 	.word	0x200000c0
   1bb04:	00017f59 	.word	0x00017f59
   1bb08:	000188b1 	.word	0x000188b1
   1bb0c:	00018f0d 	.word	0x00018f0d
   1bb10:	0001b689 	.word	0x0001b689
   1bb14:	0001c74d 	.word	0x0001c74d

0001bb18 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
   1bb18:	b590      	push	{r4, r7, lr}
   1bb1a:	b08d      	sub	sp, #52	; 0x34
   1bb1c:	af04      	add	r7, sp, #16
   1bb1e:	60f8      	str	r0, [r7, #12]
   1bb20:	60b9      	str	r1, [r7, #8]
   1bb22:	603b      	str	r3, [r7, #0]
   1bb24:	1dbb      	adds	r3, r7, #6
   1bb26:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1bb28:	1dbb      	adds	r3, r7, #6
   1bb2a:	881b      	ldrh	r3, [r3, #0]
   1bb2c:	009b      	lsls	r3, r3, #2
   1bb2e:	0018      	movs	r0, r3
   1bb30:	4b1d      	ldr	r3, [pc, #116]	; (1bba8 <xTaskCreate+0x90>)
   1bb32:	4798      	blx	r3
   1bb34:	0003      	movs	r3, r0
   1bb36:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
   1bb38:	697b      	ldr	r3, [r7, #20]
   1bb3a:	2b00      	cmp	r3, #0
   1bb3c:	d010      	beq.n	1bb60 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
   1bb3e:	2054      	movs	r0, #84	; 0x54
   1bb40:	4b19      	ldr	r3, [pc, #100]	; (1bba8 <xTaskCreate+0x90>)
   1bb42:	4798      	blx	r3
   1bb44:	0003      	movs	r3, r0
   1bb46:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
   1bb48:	69fb      	ldr	r3, [r7, #28]
   1bb4a:	2b00      	cmp	r3, #0
   1bb4c:	d003      	beq.n	1bb56 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
   1bb4e:	69fb      	ldr	r3, [r7, #28]
   1bb50:	697a      	ldr	r2, [r7, #20]
   1bb52:	631a      	str	r2, [r3, #48]	; 0x30
   1bb54:	e006      	b.n	1bb64 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
   1bb56:	697b      	ldr	r3, [r7, #20]
   1bb58:	0018      	movs	r0, r3
   1bb5a:	4b14      	ldr	r3, [pc, #80]	; (1bbac <xTaskCreate+0x94>)
   1bb5c:	4798      	blx	r3
   1bb5e:	e001      	b.n	1bb64 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
   1bb60:	2300      	movs	r3, #0
   1bb62:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
   1bb64:	69fb      	ldr	r3, [r7, #28]
   1bb66:	2b00      	cmp	r3, #0
   1bb68:	d016      	beq.n	1bb98 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
   1bb6a:	1dbb      	adds	r3, r7, #6
   1bb6c:	881a      	ldrh	r2, [r3, #0]
   1bb6e:	683c      	ldr	r4, [r7, #0]
   1bb70:	68b9      	ldr	r1, [r7, #8]
   1bb72:	68f8      	ldr	r0, [r7, #12]
   1bb74:	2300      	movs	r3, #0
   1bb76:	9303      	str	r3, [sp, #12]
   1bb78:	69fb      	ldr	r3, [r7, #28]
   1bb7a:	9302      	str	r3, [sp, #8]
   1bb7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1bb7e:	9301      	str	r3, [sp, #4]
   1bb80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1bb82:	9300      	str	r3, [sp, #0]
   1bb84:	0023      	movs	r3, r4
   1bb86:	4c0a      	ldr	r4, [pc, #40]	; (1bbb0 <xTaskCreate+0x98>)
   1bb88:	47a0      	blx	r4
			prvAddNewTaskToReadyList( pxNewTCB );
   1bb8a:	69fb      	ldr	r3, [r7, #28]
   1bb8c:	0018      	movs	r0, r3
   1bb8e:	4b09      	ldr	r3, [pc, #36]	; (1bbb4 <xTaskCreate+0x9c>)
   1bb90:	4798      	blx	r3
			xReturn = pdPASS;
   1bb92:	2301      	movs	r3, #1
   1bb94:	61bb      	str	r3, [r7, #24]
   1bb96:	e002      	b.n	1bb9e <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   1bb98:	2301      	movs	r3, #1
   1bb9a:	425b      	negs	r3, r3
   1bb9c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
   1bb9e:	69bb      	ldr	r3, [r7, #24]
	}
   1bba0:	0018      	movs	r0, r3
   1bba2:	46bd      	mov	sp, r7
   1bba4:	b009      	add	sp, #36	; 0x24
   1bba6:	bd90      	pop	{r4, r7, pc}
   1bba8:	00019ff1 	.word	0x00019ff1
   1bbac:	0001a0b5 	.word	0x0001a0b5
   1bbb0:	0001bbb9 	.word	0x0001bbb9
   1bbb4:	0001bcc9 	.word	0x0001bcc9

0001bbb8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
   1bbb8:	b580      	push	{r7, lr}
   1bbba:	b086      	sub	sp, #24
   1bbbc:	af00      	add	r7, sp, #0
   1bbbe:	60f8      	str	r0, [r7, #12]
   1bbc0:	60b9      	str	r1, [r7, #8]
   1bbc2:	607a      	str	r2, [r7, #4]
   1bbc4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
   1bbc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bbc8:	6b18      	ldr	r0, [r3, #48]	; 0x30
   1bbca:	687b      	ldr	r3, [r7, #4]
   1bbcc:	009b      	lsls	r3, r3, #2
   1bbce:	001a      	movs	r2, r3
   1bbd0:	21a5      	movs	r1, #165	; 0xa5
   1bbd2:	4b39      	ldr	r3, [pc, #228]	; (1bcb8 <prvInitialiseNewTask+0x100>)
   1bbd4:	4798      	blx	r3
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
   1bbd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bbd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1bbda:	687b      	ldr	r3, [r7, #4]
   1bbdc:	4937      	ldr	r1, [pc, #220]	; (1bcbc <prvInitialiseNewTask+0x104>)
   1bbde:	468c      	mov	ip, r1
   1bbe0:	4463      	add	r3, ip
   1bbe2:	009b      	lsls	r3, r3, #2
   1bbe4:	18d3      	adds	r3, r2, r3
   1bbe6:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
   1bbe8:	693b      	ldr	r3, [r7, #16]
   1bbea:	2207      	movs	r2, #7
   1bbec:	4393      	bics	r3, r2
   1bbee:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   1bbf0:	693b      	ldr	r3, [r7, #16]
   1bbf2:	2207      	movs	r2, #7
   1bbf4:	4013      	ands	r3, r2
   1bbf6:	d001      	beq.n	1bbfc <prvInitialiseNewTask+0x44>
   1bbf8:	b672      	cpsid	i
   1bbfa:	e7fe      	b.n	1bbfa <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1bbfc:	2300      	movs	r3, #0
   1bbfe:	617b      	str	r3, [r7, #20]
   1bc00:	e013      	b.n	1bc2a <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1bc02:	68ba      	ldr	r2, [r7, #8]
   1bc04:	697b      	ldr	r3, [r7, #20]
   1bc06:	18d3      	adds	r3, r2, r3
   1bc08:	7818      	ldrb	r0, [r3, #0]
   1bc0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1bc0c:	2134      	movs	r1, #52	; 0x34
   1bc0e:	697b      	ldr	r3, [r7, #20]
   1bc10:	18d3      	adds	r3, r2, r3
   1bc12:	185b      	adds	r3, r3, r1
   1bc14:	1c02      	adds	r2, r0, #0
   1bc16:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
   1bc18:	68ba      	ldr	r2, [r7, #8]
   1bc1a:	697b      	ldr	r3, [r7, #20]
   1bc1c:	18d3      	adds	r3, r2, r3
   1bc1e:	781b      	ldrb	r3, [r3, #0]
   1bc20:	2b00      	cmp	r3, #0
   1bc22:	d006      	beq.n	1bc32 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1bc24:	697b      	ldr	r3, [r7, #20]
   1bc26:	3301      	adds	r3, #1
   1bc28:	617b      	str	r3, [r7, #20]
   1bc2a:	697b      	ldr	r3, [r7, #20]
   1bc2c:	2b07      	cmp	r3, #7
   1bc2e:	d9e8      	bls.n	1bc02 <prvInitialiseNewTask+0x4a>
   1bc30:	e000      	b.n	1bc34 <prvInitialiseNewTask+0x7c>
		{
			break;
   1bc32:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   1bc34:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bc36:	223b      	movs	r2, #59	; 0x3b
   1bc38:	2100      	movs	r1, #0
   1bc3a:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   1bc3c:	6a3b      	ldr	r3, [r7, #32]
   1bc3e:	2b04      	cmp	r3, #4
   1bc40:	d901      	bls.n	1bc46 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   1bc42:	2304      	movs	r3, #4
   1bc44:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
   1bc46:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bc48:	6a3a      	ldr	r2, [r7, #32]
   1bc4a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
   1bc4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bc4e:	6a3a      	ldr	r2, [r7, #32]
   1bc50:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
   1bc52:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bc54:	2200      	movs	r2, #0
   1bc56:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   1bc58:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bc5a:	3304      	adds	r3, #4
   1bc5c:	0018      	movs	r0, r3
   1bc5e:	4b18      	ldr	r3, [pc, #96]	; (1bcc0 <prvInitialiseNewTask+0x108>)
   1bc60:	4798      	blx	r3
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
   1bc62:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bc64:	3318      	adds	r3, #24
   1bc66:	0018      	movs	r0, r3
   1bc68:	4b15      	ldr	r3, [pc, #84]	; (1bcc0 <prvInitialiseNewTask+0x108>)
   1bc6a:	4798      	blx	r3

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
   1bc6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bc6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1bc70:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1bc72:	6a3b      	ldr	r3, [r7, #32]
   1bc74:	2205      	movs	r2, #5
   1bc76:	1ad2      	subs	r2, r2, r3
   1bc78:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bc7a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
   1bc7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bc7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1bc80:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
   1bc82:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bc84:	2200      	movs	r2, #0
   1bc86:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1bc88:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bc8a:	2250      	movs	r2, #80	; 0x50
   1bc8c:	2100      	movs	r1, #0
   1bc8e:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   1bc90:	683a      	ldr	r2, [r7, #0]
   1bc92:	68f9      	ldr	r1, [r7, #12]
   1bc94:	693b      	ldr	r3, [r7, #16]
   1bc96:	0018      	movs	r0, r3
   1bc98:	4b0a      	ldr	r3, [pc, #40]	; (1bcc4 <prvInitialiseNewTask+0x10c>)
   1bc9a:	4798      	blx	r3
   1bc9c:	0002      	movs	r2, r0
   1bc9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bca0:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
   1bca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bca4:	2b00      	cmp	r3, #0
   1bca6:	d002      	beq.n	1bcae <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   1bca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bcaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1bcac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1bcae:	46c0      	nop			; (mov r8, r8)
   1bcb0:	46bd      	mov	sp, r7
   1bcb2:	b006      	add	sp, #24
   1bcb4:	bd80      	pop	{r7, pc}
   1bcb6:	46c0      	nop			; (mov r8, r8)
   1bcb8:	00034083 	.word	0x00034083
   1bcbc:	3fffffff 	.word	0x3fffffff
   1bcc0:	00019c6d 	.word	0x00019c6d
   1bcc4:	00019d85 	.word	0x00019d85

0001bcc8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
   1bcc8:	b580      	push	{r7, lr}
   1bcca:	b082      	sub	sp, #8
   1bccc:	af00      	add	r7, sp, #0
   1bcce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
   1bcd0:	4b60      	ldr	r3, [pc, #384]	; (1be54 <prvAddNewTaskToReadyList+0x18c>)
   1bcd2:	4798      	blx	r3
	{
		uxCurrentNumberOfTasks++;
   1bcd4:	4b60      	ldr	r3, [pc, #384]	; (1be58 <prvAddNewTaskToReadyList+0x190>)
   1bcd6:	681b      	ldr	r3, [r3, #0]
   1bcd8:	1c5a      	adds	r2, r3, #1
   1bcda:	4b5f      	ldr	r3, [pc, #380]	; (1be58 <prvAddNewTaskToReadyList+0x190>)
   1bcdc:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
   1bcde:	4b5f      	ldr	r3, [pc, #380]	; (1be5c <prvAddNewTaskToReadyList+0x194>)
   1bce0:	681b      	ldr	r3, [r3, #0]
   1bce2:	2b00      	cmp	r3, #0
   1bce4:	d109      	bne.n	1bcfa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
   1bce6:	4b5d      	ldr	r3, [pc, #372]	; (1be5c <prvAddNewTaskToReadyList+0x194>)
   1bce8:	687a      	ldr	r2, [r7, #4]
   1bcea:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   1bcec:	4b5a      	ldr	r3, [pc, #360]	; (1be58 <prvAddNewTaskToReadyList+0x190>)
   1bcee:	681b      	ldr	r3, [r3, #0]
   1bcf0:	2b01      	cmp	r3, #1
   1bcf2:	d110      	bne.n	1bd16 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
   1bcf4:	4b5a      	ldr	r3, [pc, #360]	; (1be60 <prvAddNewTaskToReadyList+0x198>)
   1bcf6:	4798      	blx	r3
   1bcf8:	e00d      	b.n	1bd16 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
   1bcfa:	4b5a      	ldr	r3, [pc, #360]	; (1be64 <prvAddNewTaskToReadyList+0x19c>)
   1bcfc:	681b      	ldr	r3, [r3, #0]
   1bcfe:	2b00      	cmp	r3, #0
   1bd00:	d109      	bne.n	1bd16 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
   1bd02:	4b56      	ldr	r3, [pc, #344]	; (1be5c <prvAddNewTaskToReadyList+0x194>)
   1bd04:	681b      	ldr	r3, [r3, #0]
   1bd06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1bd08:	687b      	ldr	r3, [r7, #4]
   1bd0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1bd0c:	429a      	cmp	r2, r3
   1bd0e:	d802      	bhi.n	1bd16 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
   1bd10:	4b52      	ldr	r3, [pc, #328]	; (1be5c <prvAddNewTaskToReadyList+0x194>)
   1bd12:	687a      	ldr	r2, [r7, #4]
   1bd14:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
   1bd16:	4b54      	ldr	r3, [pc, #336]	; (1be68 <prvAddNewTaskToReadyList+0x1a0>)
   1bd18:	681b      	ldr	r3, [r3, #0]
   1bd1a:	1c5a      	adds	r2, r3, #1
   1bd1c:	4b52      	ldr	r3, [pc, #328]	; (1be68 <prvAddNewTaskToReadyList+0x1a0>)
   1bd1e:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
   1bd20:	4b51      	ldr	r3, [pc, #324]	; (1be68 <prvAddNewTaskToReadyList+0x1a0>)
   1bd22:	681a      	ldr	r2, [r3, #0]
   1bd24:	687b      	ldr	r3, [r7, #4]
   1bd26:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
   1bd28:	687b      	ldr	r3, [r7, #4]
   1bd2a:	2b00      	cmp	r3, #0
   1bd2c:	d052      	beq.n	1bdd4 <prvAddNewTaskToReadyList+0x10c>
   1bd2e:	2003      	movs	r0, #3
   1bd30:	4b4e      	ldr	r3, [pc, #312]	; (1be6c <prvAddNewTaskToReadyList+0x1a4>)
   1bd32:	4798      	blx	r3
   1bd34:	0003      	movs	r3, r0
   1bd36:	b29a      	uxth	r2, r3
   1bd38:	687b      	ldr	r3, [r7, #4]
   1bd3a:	0011      	movs	r1, r2
   1bd3c:	0018      	movs	r0, r3
   1bd3e:	4b4c      	ldr	r3, [pc, #304]	; (1be70 <prvAddNewTaskToReadyList+0x1a8>)
   1bd40:	4798      	blx	r3
   1bd42:	4b4c      	ldr	r3, [pc, #304]	; (1be74 <prvAddNewTaskToReadyList+0x1ac>)
   1bd44:	881a      	ldrh	r2, [r3, #0]
   1bd46:	687b      	ldr	r3, [r7, #4]
   1bd48:	0011      	movs	r1, r2
   1bd4a:	0018      	movs	r0, r3
   1bd4c:	4b4a      	ldr	r3, [pc, #296]	; (1be78 <prvAddNewTaskToReadyList+0x1b0>)
   1bd4e:	4798      	blx	r3
   1bd50:	687b      	ldr	r3, [r7, #4]
   1bd52:	0018      	movs	r0, r3
   1bd54:	4b49      	ldr	r3, [pc, #292]	; (1be7c <prvAddNewTaskToReadyList+0x1b4>)
   1bd56:	4798      	blx	r3
   1bd58:	0003      	movs	r3, r0
   1bd5a:	b2d9      	uxtb	r1, r3
   1bd5c:	687b      	ldr	r3, [r7, #4]
   1bd5e:	3334      	adds	r3, #52	; 0x34
   1bd60:	001a      	movs	r2, r3
   1bd62:	2003      	movs	r0, #3
   1bd64:	4b46      	ldr	r3, [pc, #280]	; (1be80 <prvAddNewTaskToReadyList+0x1b8>)
   1bd66:	4798      	blx	r3
   1bd68:	687b      	ldr	r3, [r7, #4]
   1bd6a:	0018      	movs	r0, r3
   1bd6c:	4b43      	ldr	r3, [pc, #268]	; (1be7c <prvAddNewTaskToReadyList+0x1b4>)
   1bd6e:	4798      	blx	r3
   1bd70:	0003      	movs	r3, r0
   1bd72:	b2d9      	uxtb	r1, r3
   1bd74:	687b      	ldr	r3, [r7, #4]
   1bd76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1bd78:	b2db      	uxtb	r3, r3
   1bd7a:	001a      	movs	r2, r3
   1bd7c:	2003      	movs	r0, #3
   1bd7e:	4b41      	ldr	r3, [pc, #260]	; (1be84 <prvAddNewTaskToReadyList+0x1bc>)
   1bd80:	4798      	blx	r3
   1bd82:	4b41      	ldr	r3, [pc, #260]	; (1be88 <prvAddNewTaskToReadyList+0x1c0>)
   1bd84:	4798      	blx	r3
   1bd86:	0003      	movs	r3, r0
   1bd88:	0018      	movs	r0, r3
   1bd8a:	4b40      	ldr	r3, [pc, #256]	; (1be8c <prvAddNewTaskToReadyList+0x1c4>)
   1bd8c:	4798      	blx	r3
   1bd8e:	0003      	movs	r3, r0
   1bd90:	001a      	movs	r2, r3
   1bd92:	4b3f      	ldr	r3, [pc, #252]	; (1be90 <prvAddNewTaskToReadyList+0x1c8>)
   1bd94:	881b      	ldrh	r3, [r3, #0]
   1bd96:	4013      	ands	r3, r2
   1bd98:	b29b      	uxth	r3, r3
   1bd9a:	2b00      	cmp	r3, #0
   1bd9c:	d016      	beq.n	1bdcc <prvAddNewTaskToReadyList+0x104>
   1bd9e:	687b      	ldr	r3, [r7, #4]
   1bda0:	0018      	movs	r0, r3
   1bda2:	4b3a      	ldr	r3, [pc, #232]	; (1be8c <prvAddNewTaskToReadyList+0x1c4>)
   1bda4:	4798      	blx	r3
   1bda6:	0003      	movs	r3, r0
   1bda8:	001a      	movs	r2, r3
   1bdaa:	4b39      	ldr	r3, [pc, #228]	; (1be90 <prvAddNewTaskToReadyList+0x1c8>)
   1bdac:	881b      	ldrh	r3, [r3, #0]
   1bdae:	4013      	ands	r3, r2
   1bdb0:	b29b      	uxth	r3, r3
   1bdb2:	2b00      	cmp	r3, #0
   1bdb4:	d00a      	beq.n	1bdcc <prvAddNewTaskToReadyList+0x104>
   1bdb6:	687b      	ldr	r3, [r7, #4]
   1bdb8:	0018      	movs	r0, r3
   1bdba:	4b30      	ldr	r3, [pc, #192]	; (1be7c <prvAddNewTaskToReadyList+0x1b4>)
   1bdbc:	4798      	blx	r3
   1bdbe:	0003      	movs	r3, r0
   1bdc0:	b2db      	uxtb	r3, r3
   1bdc2:	001a      	movs	r2, r3
   1bdc4:	2103      	movs	r1, #3
   1bdc6:	201b      	movs	r0, #27
   1bdc8:	4b32      	ldr	r3, [pc, #200]	; (1be94 <prvAddNewTaskToReadyList+0x1cc>)
   1bdca:	4798      	blx	r3
   1bdcc:	687b      	ldr	r3, [r7, #4]
   1bdce:	0018      	movs	r0, r3
   1bdd0:	4b31      	ldr	r3, [pc, #196]	; (1be98 <prvAddNewTaskToReadyList+0x1d0>)
   1bdd2:	4798      	blx	r3

		prvAddTaskToReadyList( pxNewTCB );
   1bdd4:	687b      	ldr	r3, [r7, #4]
   1bdd6:	0018      	movs	r0, r3
   1bdd8:	4b2c      	ldr	r3, [pc, #176]	; (1be8c <prvAddNewTaskToReadyList+0x1c4>)
   1bdda:	4798      	blx	r3
   1bddc:	0003      	movs	r3, r0
   1bdde:	001a      	movs	r2, r3
   1bde0:	4b2b      	ldr	r3, [pc, #172]	; (1be90 <prvAddNewTaskToReadyList+0x1c8>)
   1bde2:	881b      	ldrh	r3, [r3, #0]
   1bde4:	4013      	ands	r3, r2
   1bde6:	b29b      	uxth	r3, r3
   1bde8:	2b00      	cmp	r3, #0
   1bdea:	d008      	beq.n	1bdfe <prvAddNewTaskToReadyList+0x136>
   1bdec:	687b      	ldr	r3, [r7, #4]
   1bdee:	0018      	movs	r0, r3
   1bdf0:	4b22      	ldr	r3, [pc, #136]	; (1be7c <prvAddNewTaskToReadyList+0x1b4>)
   1bdf2:	4798      	blx	r3
   1bdf4:	0003      	movs	r3, r0
   1bdf6:	b2db      	uxtb	r3, r3
   1bdf8:	0018      	movs	r0, r3
   1bdfa:	4b28      	ldr	r3, [pc, #160]	; (1be9c <prvAddNewTaskToReadyList+0x1d4>)
   1bdfc:	4798      	blx	r3
   1bdfe:	687b      	ldr	r3, [r7, #4]
   1be00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1be02:	4b27      	ldr	r3, [pc, #156]	; (1bea0 <prvAddNewTaskToReadyList+0x1d8>)
   1be04:	681b      	ldr	r3, [r3, #0]
   1be06:	429a      	cmp	r2, r3
   1be08:	d903      	bls.n	1be12 <prvAddNewTaskToReadyList+0x14a>
   1be0a:	687b      	ldr	r3, [r7, #4]
   1be0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1be0e:	4b24      	ldr	r3, [pc, #144]	; (1bea0 <prvAddNewTaskToReadyList+0x1d8>)
   1be10:	601a      	str	r2, [r3, #0]
   1be12:	687b      	ldr	r3, [r7, #4]
   1be14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1be16:	0013      	movs	r3, r2
   1be18:	009b      	lsls	r3, r3, #2
   1be1a:	189b      	adds	r3, r3, r2
   1be1c:	009b      	lsls	r3, r3, #2
   1be1e:	4a21      	ldr	r2, [pc, #132]	; (1bea4 <prvAddNewTaskToReadyList+0x1dc>)
   1be20:	189a      	adds	r2, r3, r2
   1be22:	687b      	ldr	r3, [r7, #4]
   1be24:	3304      	adds	r3, #4
   1be26:	0019      	movs	r1, r3
   1be28:	0010      	movs	r0, r2
   1be2a:	4b1f      	ldr	r3, [pc, #124]	; (1bea8 <prvAddNewTaskToReadyList+0x1e0>)
   1be2c:	4798      	blx	r3

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
   1be2e:	4b1f      	ldr	r3, [pc, #124]	; (1beac <prvAddNewTaskToReadyList+0x1e4>)
   1be30:	4798      	blx	r3

	if( xSchedulerRunning != pdFALSE )
   1be32:	4b0c      	ldr	r3, [pc, #48]	; (1be64 <prvAddNewTaskToReadyList+0x19c>)
   1be34:	681b      	ldr	r3, [r3, #0]
   1be36:	2b00      	cmp	r3, #0
   1be38:	d008      	beq.n	1be4c <prvAddNewTaskToReadyList+0x184>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
   1be3a:	4b08      	ldr	r3, [pc, #32]	; (1be5c <prvAddNewTaskToReadyList+0x194>)
   1be3c:	681b      	ldr	r3, [r3, #0]
   1be3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1be40:	687b      	ldr	r3, [r7, #4]
   1be42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1be44:	429a      	cmp	r2, r3
   1be46:	d201      	bcs.n	1be4c <prvAddNewTaskToReadyList+0x184>
		{
			taskYIELD_IF_USING_PREEMPTION();
   1be48:	4b19      	ldr	r3, [pc, #100]	; (1beb0 <prvAddNewTaskToReadyList+0x1e8>)
   1be4a:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1be4c:	46c0      	nop			; (mov r8, r8)
   1be4e:	46bd      	mov	sp, r7
   1be50:	b002      	add	sp, #8
   1be52:	bd80      	pop	{r7, pc}
   1be54:	00019eb9 	.word	0x00019eb9
   1be58:	20003bd4 	.word	0x20003bd4
   1be5c:	20003afc 	.word	0x20003afc
   1be60:	0001c9e9 	.word	0x0001c9e9
   1be64:	20003be0 	.word	0x20003be0
   1be68:	20003bf0 	.word	0x20003bf0
   1be6c:	00019439 	.word	0x00019439
   1be70:	00017edd 	.word	0x00017edd
   1be74:	200000ce 	.word	0x200000ce
   1be78:	00017f19 	.word	0x00017f19
   1be7c:	00017e99 	.word	0x00017e99
   1be80:	00019669 	.word	0x00019669
   1be84:	00018dcd 	.word	0x00018dcd
   1be88:	00018155 	.word	0x00018155
   1be8c:	00017eb9 	.word	0x00017eb9
   1be90:	200000cc 	.word	0x200000cc
   1be94:	000188b1 	.word	0x000188b1
   1be98:	00018019 	.word	0x00018019
   1be9c:	00018669 	.word	0x00018669
   1bea0:	20003bdc 	.word	0x20003bdc
   1bea4:	20003b00 	.word	0x20003b00
   1bea8:	00019c83 	.word	0x00019c83
   1beac:	00019edd 	.word	0x00019edd
   1beb0:	00019ea1 	.word	0x00019ea1

0001beb4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
   1beb4:	b580      	push	{r7, lr}
   1beb6:	b084      	sub	sp, #16
   1beb8:	af00      	add	r7, sp, #0
   1beba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
   1bebc:	2300      	movs	r3, #0
   1bebe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
   1bec0:	687b      	ldr	r3, [r7, #4]
   1bec2:	2b00      	cmp	r3, #0
   1bec4:	d045      	beq.n	1bf52 <vTaskDelay+0x9e>
		{
			configASSERT( uxSchedulerSuspended == 0 );
   1bec6:	4b27      	ldr	r3, [pc, #156]	; (1bf64 <vTaskDelay+0xb0>)
   1bec8:	681b      	ldr	r3, [r3, #0]
   1beca:	2b00      	cmp	r3, #0
   1becc:	d001      	beq.n	1bed2 <vTaskDelay+0x1e>
   1bece:	b672      	cpsid	i
   1bed0:	e7fe      	b.n	1bed0 <vTaskDelay+0x1c>
			vTaskSuspendAll();
   1bed2:	4b25      	ldr	r3, [pc, #148]	; (1bf68 <vTaskDelay+0xb4>)
   1bed4:	4798      	blx	r3
			{
				traceTASK_DELAY();
   1bed6:	4b25      	ldr	r3, [pc, #148]	; (1bf6c <vTaskDelay+0xb8>)
   1bed8:	681b      	ldr	r3, [r3, #0]
   1beda:	0018      	movs	r0, r3
   1bedc:	4b24      	ldr	r3, [pc, #144]	; (1bf70 <vTaskDelay+0xbc>)
   1bede:	4798      	blx	r3
   1bee0:	0003      	movs	r3, r0
   1bee2:	001a      	movs	r2, r3
   1bee4:	4b23      	ldr	r3, [pc, #140]	; (1bf74 <vTaskDelay+0xc0>)
   1bee6:	881b      	ldrh	r3, [r3, #0]
   1bee8:	4013      	ands	r3, r2
   1beea:	b29b      	uxth	r3, r3
   1beec:	2b00      	cmp	r3, #0
   1beee:	d00e      	beq.n	1bf0e <vTaskDelay+0x5a>
   1bef0:	687b      	ldr	r3, [r7, #4]
   1bef2:	0019      	movs	r1, r3
   1bef4:	2089      	movs	r0, #137	; 0x89
   1bef6:	4b20      	ldr	r3, [pc, #128]	; (1bf78 <vTaskDelay+0xc4>)
   1bef8:	4798      	blx	r3
   1befa:	4b1c      	ldr	r3, [pc, #112]	; (1bf6c <vTaskDelay+0xb8>)
   1befc:	681b      	ldr	r3, [r3, #0]
   1befe:	0018      	movs	r0, r3
   1bf00:	4b1e      	ldr	r3, [pc, #120]	; (1bf7c <vTaskDelay+0xc8>)
   1bf02:	4798      	blx	r3
   1bf04:	0003      	movs	r3, r0
   1bf06:	b2db      	uxtb	r3, r3
   1bf08:	0018      	movs	r0, r3
   1bf0a:	4b1d      	ldr	r3, [pc, #116]	; (1bf80 <vTaskDelay+0xcc>)
   1bf0c:	4798      	blx	r3
   1bf0e:	4b1d      	ldr	r3, [pc, #116]	; (1bf84 <vTaskDelay+0xd0>)
   1bf10:	4798      	blx	r3
   1bf12:	0003      	movs	r3, r0
   1bf14:	0018      	movs	r0, r3
   1bf16:	4b16      	ldr	r3, [pc, #88]	; (1bf70 <vTaskDelay+0xbc>)
   1bf18:	4798      	blx	r3
   1bf1a:	0003      	movs	r3, r0
   1bf1c:	001a      	movs	r2, r3
   1bf1e:	4b15      	ldr	r3, [pc, #84]	; (1bf74 <vTaskDelay+0xc0>)
   1bf20:	881b      	ldrh	r3, [r3, #0]
   1bf22:	4013      	ands	r3, r2
   1bf24:	b29b      	uxth	r3, r3
   1bf26:	2b00      	cmp	r3, #0
   1bf28:	d00a      	beq.n	1bf40 <vTaskDelay+0x8c>
   1bf2a:	4b16      	ldr	r3, [pc, #88]	; (1bf84 <vTaskDelay+0xd0>)
   1bf2c:	4798      	blx	r3
   1bf2e:	0003      	movs	r3, r0
   1bf30:	0018      	movs	r0, r3
   1bf32:	4b12      	ldr	r3, [pc, #72]	; (1bf7c <vTaskDelay+0xc8>)
   1bf34:	4798      	blx	r3
   1bf36:	0003      	movs	r3, r0
   1bf38:	b2db      	uxtb	r3, r3
   1bf3a:	0018      	movs	r0, r3
   1bf3c:	4b10      	ldr	r3, [pc, #64]	; (1bf80 <vTaskDelay+0xcc>)
   1bf3e:	4798      	blx	r3
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
   1bf40:	687b      	ldr	r3, [r7, #4]
   1bf42:	2100      	movs	r1, #0
   1bf44:	0018      	movs	r0, r3
   1bf46:	4b10      	ldr	r3, [pc, #64]	; (1bf88 <vTaskDelay+0xd4>)
   1bf48:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
   1bf4a:	4b10      	ldr	r3, [pc, #64]	; (1bf8c <vTaskDelay+0xd8>)
   1bf4c:	4798      	blx	r3
   1bf4e:	0003      	movs	r3, r0
   1bf50:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   1bf52:	68fb      	ldr	r3, [r7, #12]
   1bf54:	2b00      	cmp	r3, #0
   1bf56:	d101      	bne.n	1bf5c <vTaskDelay+0xa8>
		{
			portYIELD_WITHIN_API();
   1bf58:	4b0d      	ldr	r3, [pc, #52]	; (1bf90 <vTaskDelay+0xdc>)
   1bf5a:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1bf5c:	46c0      	nop			; (mov r8, r8)
   1bf5e:	46bd      	mov	sp, r7
   1bf60:	b004      	add	sp, #16
   1bf62:	bd80      	pop	{r7, pc}
   1bf64:	20003bfc 	.word	0x20003bfc
   1bf68:	0001c175 	.word	0x0001c175
   1bf6c:	20003afc 	.word	0x20003afc
   1bf70:	00017eb9 	.word	0x00017eb9
   1bf74:	200000cc 	.word	0x200000cc
   1bf78:	00018bb9 	.word	0x00018bb9
   1bf7c:	00017e99 	.word	0x00017e99
   1bf80:	00019049 	.word	0x00019049
   1bf84:	00018155 	.word	0x00018155
   1bf88:	0001d0cd 	.word	0x0001d0cd
   1bf8c:	0001c18d 	.word	0x0001c18d
   1bf90:	00019ea1 	.word	0x00019ea1

0001bf94 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
   1bf94:	b580      	push	{r7, lr}
   1bf96:	b084      	sub	sp, #16
   1bf98:	af00      	add	r7, sp, #0
   1bf9a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
   1bf9c:	4b42      	ldr	r3, [pc, #264]	; (1c0a8 <vTaskSuspend+0x114>)
   1bf9e:	4798      	blx	r3
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
   1bfa0:	687b      	ldr	r3, [r7, #4]
   1bfa2:	2b00      	cmp	r3, #0
   1bfa4:	d102      	bne.n	1bfac <vTaskSuspend+0x18>
   1bfa6:	4b41      	ldr	r3, [pc, #260]	; (1c0ac <vTaskSuspend+0x118>)
   1bfa8:	681b      	ldr	r3, [r3, #0]
   1bfaa:	e000      	b.n	1bfae <vTaskSuspend+0x1a>
   1bfac:	687b      	ldr	r3, [r7, #4]
   1bfae:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );
   1bfb0:	4b3f      	ldr	r3, [pc, #252]	; (1c0b0 <vTaskSuspend+0x11c>)
   1bfb2:	4798      	blx	r3
   1bfb4:	0003      	movs	r3, r0
   1bfb6:	0018      	movs	r0, r3
   1bfb8:	4b3e      	ldr	r3, [pc, #248]	; (1c0b4 <vTaskSuspend+0x120>)
   1bfba:	4798      	blx	r3
   1bfbc:	0003      	movs	r3, r0
   1bfbe:	001a      	movs	r2, r3
   1bfc0:	4b3d      	ldr	r3, [pc, #244]	; (1c0b8 <vTaskSuspend+0x124>)
   1bfc2:	881b      	ldrh	r3, [r3, #0]
   1bfc4:	4013      	ands	r3, r2
   1bfc6:	b29b      	uxth	r3, r3
   1bfc8:	2b00      	cmp	r3, #0
   1bfca:	d016      	beq.n	1bffa <vTaskSuspend+0x66>
   1bfcc:	68fb      	ldr	r3, [r7, #12]
   1bfce:	0018      	movs	r0, r3
   1bfd0:	4b38      	ldr	r3, [pc, #224]	; (1c0b4 <vTaskSuspend+0x120>)
   1bfd2:	4798      	blx	r3
   1bfd4:	0003      	movs	r3, r0
   1bfd6:	001a      	movs	r2, r3
   1bfd8:	4b37      	ldr	r3, [pc, #220]	; (1c0b8 <vTaskSuspend+0x124>)
   1bfda:	881b      	ldrh	r3, [r3, #0]
   1bfdc:	4013      	ands	r3, r2
   1bfde:	b29b      	uxth	r3, r3
   1bfe0:	2b00      	cmp	r3, #0
   1bfe2:	d00a      	beq.n	1bffa <vTaskSuspend+0x66>
   1bfe4:	68fb      	ldr	r3, [r7, #12]
   1bfe6:	0018      	movs	r0, r3
   1bfe8:	4b34      	ldr	r3, [pc, #208]	; (1c0bc <vTaskSuspend+0x128>)
   1bfea:	4798      	blx	r3
   1bfec:	0003      	movs	r3, r0
   1bfee:	b2db      	uxtb	r3, r3
   1bff0:	001a      	movs	r2, r3
   1bff2:	2103      	movs	r1, #3
   1bff4:	208a      	movs	r0, #138	; 0x8a
   1bff6:	4b32      	ldr	r3, [pc, #200]	; (1c0c0 <vTaskSuspend+0x12c>)
   1bff8:	4798      	blx	r3
   1bffa:	68fb      	ldr	r3, [r7, #12]
   1bffc:	0018      	movs	r0, r3
   1bffe:	4b2f      	ldr	r3, [pc, #188]	; (1c0bc <vTaskSuspend+0x128>)
   1c000:	4798      	blx	r3
   1c002:	0003      	movs	r3, r0
   1c004:	b2db      	uxtb	r3, r3
   1c006:	0018      	movs	r0, r3
   1c008:	4b2e      	ldr	r3, [pc, #184]	; (1c0c4 <vTaskSuspend+0x130>)
   1c00a:	4798      	blx	r3

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1c00c:	68fb      	ldr	r3, [r7, #12]
   1c00e:	3304      	adds	r3, #4
   1c010:	0018      	movs	r0, r3
   1c012:	4b2d      	ldr	r3, [pc, #180]	; (1c0c8 <vTaskSuspend+0x134>)
   1c014:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1c016:	68fb      	ldr	r3, [r7, #12]
   1c018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1c01a:	2b00      	cmp	r3, #0
   1c01c:	d004      	beq.n	1c028 <vTaskSuspend+0x94>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1c01e:	68fb      	ldr	r3, [r7, #12]
   1c020:	3318      	adds	r3, #24
   1c022:	0018      	movs	r0, r3
   1c024:	4b28      	ldr	r3, [pc, #160]	; (1c0c8 <vTaskSuspend+0x134>)
   1c026:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
   1c028:	68fb      	ldr	r3, [r7, #12]
   1c02a:	1d1a      	adds	r2, r3, #4
   1c02c:	4b27      	ldr	r3, [pc, #156]	; (1c0cc <vTaskSuspend+0x138>)
   1c02e:	0011      	movs	r1, r2
   1c030:	0018      	movs	r0, r3
   1c032:	4b27      	ldr	r3, [pc, #156]	; (1c0d0 <vTaskSuspend+0x13c>)
   1c034:	4798      	blx	r3

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
   1c036:	68fb      	ldr	r3, [r7, #12]
   1c038:	2250      	movs	r2, #80	; 0x50
   1c03a:	5c9b      	ldrb	r3, [r3, r2]
   1c03c:	b2db      	uxtb	r3, r3
   1c03e:	2b01      	cmp	r3, #1
   1c040:	d103      	bne.n	1c04a <vTaskSuspend+0xb6>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1c042:	68fb      	ldr	r3, [r7, #12]
   1c044:	2250      	movs	r2, #80	; 0x50
   1c046:	2100      	movs	r1, #0
   1c048:	5499      	strb	r1, [r3, r2]
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
   1c04a:	4b22      	ldr	r3, [pc, #136]	; (1c0d4 <vTaskSuspend+0x140>)
   1c04c:	4798      	blx	r3

		if( xSchedulerRunning != pdFALSE )
   1c04e:	4b22      	ldr	r3, [pc, #136]	; (1c0d8 <vTaskSuspend+0x144>)
   1c050:	681b      	ldr	r3, [r3, #0]
   1c052:	2b00      	cmp	r3, #0
   1c054:	d005      	beq.n	1c062 <vTaskSuspend+0xce>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
   1c056:	4b14      	ldr	r3, [pc, #80]	; (1c0a8 <vTaskSuspend+0x114>)
   1c058:	4798      	blx	r3
			{
				prvResetNextTaskUnblockTime();
   1c05a:	4b20      	ldr	r3, [pc, #128]	; (1c0dc <vTaskSuspend+0x148>)
   1c05c:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
   1c05e:	4b1d      	ldr	r3, [pc, #116]	; (1c0d4 <vTaskSuspend+0x140>)
   1c060:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
   1c062:	4b12      	ldr	r3, [pc, #72]	; (1c0ac <vTaskSuspend+0x118>)
   1c064:	681b      	ldr	r3, [r3, #0]
   1c066:	68fa      	ldr	r2, [r7, #12]
   1c068:	429a      	cmp	r2, r3
   1c06a:	d118      	bne.n	1c09e <vTaskSuspend+0x10a>
		{
			if( xSchedulerRunning != pdFALSE )
   1c06c:	4b1a      	ldr	r3, [pc, #104]	; (1c0d8 <vTaskSuspend+0x144>)
   1c06e:	681b      	ldr	r3, [r3, #0]
   1c070:	2b00      	cmp	r3, #0
   1c072:	d008      	beq.n	1c086 <vTaskSuspend+0xf2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
   1c074:	4b1a      	ldr	r3, [pc, #104]	; (1c0e0 <vTaskSuspend+0x14c>)
   1c076:	681b      	ldr	r3, [r3, #0]
   1c078:	2b00      	cmp	r3, #0
   1c07a:	d001      	beq.n	1c080 <vTaskSuspend+0xec>
   1c07c:	b672      	cpsid	i
   1c07e:	e7fe      	b.n	1c07e <vTaskSuspend+0xea>
				portYIELD_WITHIN_API();
   1c080:	4b18      	ldr	r3, [pc, #96]	; (1c0e4 <vTaskSuspend+0x150>)
   1c082:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1c084:	e00b      	b.n	1c09e <vTaskSuspend+0x10a>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
   1c086:	4b11      	ldr	r3, [pc, #68]	; (1c0cc <vTaskSuspend+0x138>)
   1c088:	681a      	ldr	r2, [r3, #0]
   1c08a:	4b17      	ldr	r3, [pc, #92]	; (1c0e8 <vTaskSuspend+0x154>)
   1c08c:	681b      	ldr	r3, [r3, #0]
   1c08e:	429a      	cmp	r2, r3
   1c090:	d103      	bne.n	1c09a <vTaskSuspend+0x106>
					pxCurrentTCB = NULL;
   1c092:	4b06      	ldr	r3, [pc, #24]	; (1c0ac <vTaskSuspend+0x118>)
   1c094:	2200      	movs	r2, #0
   1c096:	601a      	str	r2, [r3, #0]
	}
   1c098:	e001      	b.n	1c09e <vTaskSuspend+0x10a>
					vTaskSwitchContext();
   1c09a:	4b14      	ldr	r3, [pc, #80]	; (1c0ec <vTaskSuspend+0x158>)
   1c09c:	4798      	blx	r3
	}
   1c09e:	46c0      	nop			; (mov r8, r8)
   1c0a0:	46bd      	mov	sp, r7
   1c0a2:	b004      	add	sp, #16
   1c0a4:	bd80      	pop	{r7, pc}
   1c0a6:	46c0      	nop			; (mov r8, r8)
   1c0a8:	00019eb9 	.word	0x00019eb9
   1c0ac:	20003afc 	.word	0x20003afc
   1c0b0:	00018155 	.word	0x00018155
   1c0b4:	00017eb9 	.word	0x00017eb9
   1c0b8:	200000cc 	.word	0x200000cc
   1c0bc:	00017e99 	.word	0x00017e99
   1c0c0:	000188b1 	.word	0x000188b1
   1c0c4:	00019049 	.word	0x00019049
   1c0c8:	00019d33 	.word	0x00019d33
   1c0cc:	20003bc0 	.word	0x20003bc0
   1c0d0:	00019c83 	.word	0x00019c83
   1c0d4:	00019edd 	.word	0x00019edd
   1c0d8:	20003be0 	.word	0x20003be0
   1c0dc:	0001cb79 	.word	0x0001cb79
   1c0e0:	20003bfc 	.word	0x20003bfc
   1c0e4:	00019ea1 	.word	0x00019ea1
   1c0e8:	20003bd4 	.word	0x20003bd4
   1c0ec:	0001c509 	.word	0x0001c509

0001c0f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
   1c0f0:	b590      	push	{r4, r7, lr}
   1c0f2:	b085      	sub	sp, #20
   1c0f4:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
   1c0f6:	4916      	ldr	r1, [pc, #88]	; (1c150 <vTaskStartScheduler+0x60>)
   1c0f8:	4816      	ldr	r0, [pc, #88]	; (1c154 <vTaskStartScheduler+0x64>)
   1c0fa:	4b17      	ldr	r3, [pc, #92]	; (1c158 <vTaskStartScheduler+0x68>)
   1c0fc:	9301      	str	r3, [sp, #4]
   1c0fe:	2300      	movs	r3, #0
   1c100:	9300      	str	r3, [sp, #0]
   1c102:	2300      	movs	r3, #0
   1c104:	2264      	movs	r2, #100	; 0x64
   1c106:	4c15      	ldr	r4, [pc, #84]	; (1c15c <vTaskStartScheduler+0x6c>)
   1c108:	47a0      	blx	r4
   1c10a:	0003      	movs	r3, r0
   1c10c:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   1c10e:	687b      	ldr	r3, [r7, #4]
   1c110:	2b01      	cmp	r3, #1
   1c112:	d103      	bne.n	1c11c <vTaskStartScheduler+0x2c>
		{
			xReturn = xTimerCreateTimerTask();
   1c114:	4b12      	ldr	r3, [pc, #72]	; (1c160 <vTaskStartScheduler+0x70>)
   1c116:	4798      	blx	r3
   1c118:	0003      	movs	r3, r0
   1c11a:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
   1c11c:	687b      	ldr	r3, [r7, #4]
   1c11e:	2b01      	cmp	r3, #1
   1c120:	d10d      	bne.n	1c13e <vTaskStartScheduler+0x4e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
   1c122:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
   1c124:	4b0f      	ldr	r3, [pc, #60]	; (1c164 <vTaskStartScheduler+0x74>)
   1c126:	2201      	movs	r2, #1
   1c128:	4252      	negs	r2, r2
   1c12a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
   1c12c:	4b0e      	ldr	r3, [pc, #56]	; (1c168 <vTaskStartScheduler+0x78>)
   1c12e:	2201      	movs	r2, #1
   1c130:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
   1c132:	4b0e      	ldr	r3, [pc, #56]	; (1c16c <vTaskStartScheduler+0x7c>)
   1c134:	2200      	movs	r2, #0
   1c136:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   1c138:	4b0d      	ldr	r3, [pc, #52]	; (1c170 <vTaskStartScheduler+0x80>)
   1c13a:	4798      	blx	r3
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
   1c13c:	e004      	b.n	1c148 <vTaskStartScheduler+0x58>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   1c13e:	687b      	ldr	r3, [r7, #4]
   1c140:	3301      	adds	r3, #1
   1c142:	d101      	bne.n	1c148 <vTaskStartScheduler+0x58>
   1c144:	b672      	cpsid	i
   1c146:	e7fe      	b.n	1c146 <vTaskStartScheduler+0x56>
}
   1c148:	46c0      	nop			; (mov r8, r8)
   1c14a:	46bd      	mov	sp, r7
   1c14c:	b003      	add	sp, #12
   1c14e:	bd90      	pop	{r4, r7, pc}
   1c150:	00038c5c 	.word	0x00038c5c
   1c154:	0001c9c1 	.word	0x0001c9c1
   1c158:	20003bf8 	.word	0x20003bf8
   1c15c:	0001bb19 	.word	0x0001bb19
   1c160:	0001d181 	.word	0x0001d181
   1c164:	20003bf4 	.word	0x20003bf4
   1c168:	20003be0 	.word	0x20003be0
   1c16c:	20003bd8 	.word	0x20003bd8
   1c170:	00019e49 	.word	0x00019e49

0001c174 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   1c174:	b580      	push	{r7, lr}
   1c176:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
   1c178:	4b03      	ldr	r3, [pc, #12]	; (1c188 <vTaskSuspendAll+0x14>)
   1c17a:	681b      	ldr	r3, [r3, #0]
   1c17c:	1c5a      	adds	r2, r3, #1
   1c17e:	4b02      	ldr	r3, [pc, #8]	; (1c188 <vTaskSuspendAll+0x14>)
   1c180:	601a      	str	r2, [r3, #0]
}
   1c182:	46c0      	nop			; (mov r8, r8)
   1c184:	46bd      	mov	sp, r7
   1c186:	bd80      	pop	{r7, pc}
   1c188:	20003bfc 	.word	0x20003bfc

0001c18c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
   1c18c:	b580      	push	{r7, lr}
   1c18e:	b084      	sub	sp, #16
   1c190:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
   1c192:	2300      	movs	r3, #0
   1c194:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
   1c196:	2300      	movs	r3, #0
   1c198:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   1c19a:	4b45      	ldr	r3, [pc, #276]	; (1c2b0 <xTaskResumeAll+0x124>)
   1c19c:	681b      	ldr	r3, [r3, #0]
   1c19e:	2b00      	cmp	r3, #0
   1c1a0:	d101      	bne.n	1c1a6 <xTaskResumeAll+0x1a>
   1c1a2:	b672      	cpsid	i
   1c1a4:	e7fe      	b.n	1c1a4 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   1c1a6:	4b43      	ldr	r3, [pc, #268]	; (1c2b4 <xTaskResumeAll+0x128>)
   1c1a8:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   1c1aa:	4b41      	ldr	r3, [pc, #260]	; (1c2b0 <xTaskResumeAll+0x124>)
   1c1ac:	681b      	ldr	r3, [r3, #0]
   1c1ae:	1e5a      	subs	r2, r3, #1
   1c1b0:	4b3f      	ldr	r3, [pc, #252]	; (1c2b0 <xTaskResumeAll+0x124>)
   1c1b2:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1c1b4:	4b3e      	ldr	r3, [pc, #248]	; (1c2b0 <xTaskResumeAll+0x124>)
   1c1b6:	681b      	ldr	r3, [r3, #0]
   1c1b8:	2b00      	cmp	r3, #0
   1c1ba:	d000      	beq.n	1c1be <xTaskResumeAll+0x32>
   1c1bc:	e071      	b.n	1c2a2 <xTaskResumeAll+0x116>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   1c1be:	4b3e      	ldr	r3, [pc, #248]	; (1c2b8 <xTaskResumeAll+0x12c>)
   1c1c0:	681b      	ldr	r3, [r3, #0]
   1c1c2:	2b00      	cmp	r3, #0
   1c1c4:	d100      	bne.n	1c1c8 <xTaskResumeAll+0x3c>
   1c1c6:	e06c      	b.n	1c2a2 <xTaskResumeAll+0x116>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1c1c8:	e044      	b.n	1c254 <xTaskResumeAll+0xc8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   1c1ca:	4b3c      	ldr	r3, [pc, #240]	; (1c2bc <xTaskResumeAll+0x130>)
   1c1cc:	68db      	ldr	r3, [r3, #12]
   1c1ce:	68db      	ldr	r3, [r3, #12]
   1c1d0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1c1d2:	68fb      	ldr	r3, [r7, #12]
   1c1d4:	3318      	adds	r3, #24
   1c1d6:	0018      	movs	r0, r3
   1c1d8:	4b39      	ldr	r3, [pc, #228]	; (1c2c0 <xTaskResumeAll+0x134>)
   1c1da:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1c1dc:	68fb      	ldr	r3, [r7, #12]
   1c1de:	3304      	adds	r3, #4
   1c1e0:	0018      	movs	r0, r3
   1c1e2:	4b37      	ldr	r3, [pc, #220]	; (1c2c0 <xTaskResumeAll+0x134>)
   1c1e4:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   1c1e6:	68fb      	ldr	r3, [r7, #12]
   1c1e8:	0018      	movs	r0, r3
   1c1ea:	4b36      	ldr	r3, [pc, #216]	; (1c2c4 <xTaskResumeAll+0x138>)
   1c1ec:	4798      	blx	r3
   1c1ee:	0003      	movs	r3, r0
   1c1f0:	001a      	movs	r2, r3
   1c1f2:	4b35      	ldr	r3, [pc, #212]	; (1c2c8 <xTaskResumeAll+0x13c>)
   1c1f4:	881b      	ldrh	r3, [r3, #0]
   1c1f6:	4013      	ands	r3, r2
   1c1f8:	b29b      	uxth	r3, r3
   1c1fa:	2b00      	cmp	r3, #0
   1c1fc:	d008      	beq.n	1c210 <xTaskResumeAll+0x84>
   1c1fe:	68fb      	ldr	r3, [r7, #12]
   1c200:	0018      	movs	r0, r3
   1c202:	4b32      	ldr	r3, [pc, #200]	; (1c2cc <xTaskResumeAll+0x140>)
   1c204:	4798      	blx	r3
   1c206:	0003      	movs	r3, r0
   1c208:	b2db      	uxtb	r3, r3
   1c20a:	0018      	movs	r0, r3
   1c20c:	4b30      	ldr	r3, [pc, #192]	; (1c2d0 <xTaskResumeAll+0x144>)
   1c20e:	4798      	blx	r3
   1c210:	68fb      	ldr	r3, [r7, #12]
   1c212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c214:	4b2f      	ldr	r3, [pc, #188]	; (1c2d4 <xTaskResumeAll+0x148>)
   1c216:	681b      	ldr	r3, [r3, #0]
   1c218:	429a      	cmp	r2, r3
   1c21a:	d903      	bls.n	1c224 <xTaskResumeAll+0x98>
   1c21c:	68fb      	ldr	r3, [r7, #12]
   1c21e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c220:	4b2c      	ldr	r3, [pc, #176]	; (1c2d4 <xTaskResumeAll+0x148>)
   1c222:	601a      	str	r2, [r3, #0]
   1c224:	68fb      	ldr	r3, [r7, #12]
   1c226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c228:	0013      	movs	r3, r2
   1c22a:	009b      	lsls	r3, r3, #2
   1c22c:	189b      	adds	r3, r3, r2
   1c22e:	009b      	lsls	r3, r3, #2
   1c230:	4a29      	ldr	r2, [pc, #164]	; (1c2d8 <xTaskResumeAll+0x14c>)
   1c232:	189a      	adds	r2, r3, r2
   1c234:	68fb      	ldr	r3, [r7, #12]
   1c236:	3304      	adds	r3, #4
   1c238:	0019      	movs	r1, r3
   1c23a:	0010      	movs	r0, r2
   1c23c:	4b27      	ldr	r3, [pc, #156]	; (1c2dc <xTaskResumeAll+0x150>)
   1c23e:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1c240:	68fb      	ldr	r3, [r7, #12]
   1c242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c244:	4b26      	ldr	r3, [pc, #152]	; (1c2e0 <xTaskResumeAll+0x154>)
   1c246:	681b      	ldr	r3, [r3, #0]
   1c248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c24a:	429a      	cmp	r2, r3
   1c24c:	d302      	bcc.n	1c254 <xTaskResumeAll+0xc8>
					{
						xYieldPending = pdTRUE;
   1c24e:	4b25      	ldr	r3, [pc, #148]	; (1c2e4 <xTaskResumeAll+0x158>)
   1c250:	2201      	movs	r2, #1
   1c252:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1c254:	4b19      	ldr	r3, [pc, #100]	; (1c2bc <xTaskResumeAll+0x130>)
   1c256:	681b      	ldr	r3, [r3, #0]
   1c258:	2b00      	cmp	r3, #0
   1c25a:	d1b6      	bne.n	1c1ca <xTaskResumeAll+0x3e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
   1c25c:	68fb      	ldr	r3, [r7, #12]
   1c25e:	2b00      	cmp	r3, #0
   1c260:	d001      	beq.n	1c266 <xTaskResumeAll+0xda>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
   1c262:	4b21      	ldr	r3, [pc, #132]	; (1c2e8 <xTaskResumeAll+0x15c>)
   1c264:	4798      	blx	r3
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
   1c266:	4b21      	ldr	r3, [pc, #132]	; (1c2ec <xTaskResumeAll+0x160>)
   1c268:	681b      	ldr	r3, [r3, #0]
   1c26a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
   1c26c:	687b      	ldr	r3, [r7, #4]
   1c26e:	2b00      	cmp	r3, #0
   1c270:	d00f      	beq.n	1c292 <xTaskResumeAll+0x106>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
   1c272:	4b1f      	ldr	r3, [pc, #124]	; (1c2f0 <xTaskResumeAll+0x164>)
   1c274:	4798      	blx	r3
   1c276:	1e03      	subs	r3, r0, #0
   1c278:	d002      	beq.n	1c280 <xTaskResumeAll+0xf4>
							{
								xYieldPending = pdTRUE;
   1c27a:	4b1a      	ldr	r3, [pc, #104]	; (1c2e4 <xTaskResumeAll+0x158>)
   1c27c:	2201      	movs	r2, #1
   1c27e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
   1c280:	687b      	ldr	r3, [r7, #4]
   1c282:	3b01      	subs	r3, #1
   1c284:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
   1c286:	687b      	ldr	r3, [r7, #4]
   1c288:	2b00      	cmp	r3, #0
   1c28a:	d1f2      	bne.n	1c272 <xTaskResumeAll+0xe6>

						uxPendedTicks = 0;
   1c28c:	4b17      	ldr	r3, [pc, #92]	; (1c2ec <xTaskResumeAll+0x160>)
   1c28e:	2200      	movs	r2, #0
   1c290:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
   1c292:	4b14      	ldr	r3, [pc, #80]	; (1c2e4 <xTaskResumeAll+0x158>)
   1c294:	681b      	ldr	r3, [r3, #0]
   1c296:	2b00      	cmp	r3, #0
   1c298:	d003      	beq.n	1c2a2 <xTaskResumeAll+0x116>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
   1c29a:	2301      	movs	r3, #1
   1c29c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
   1c29e:	4b15      	ldr	r3, [pc, #84]	; (1c2f4 <xTaskResumeAll+0x168>)
   1c2a0:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   1c2a2:	4b15      	ldr	r3, [pc, #84]	; (1c2f8 <xTaskResumeAll+0x16c>)
   1c2a4:	4798      	blx	r3

	return xAlreadyYielded;
   1c2a6:	68bb      	ldr	r3, [r7, #8]
}
   1c2a8:	0018      	movs	r0, r3
   1c2aa:	46bd      	mov	sp, r7
   1c2ac:	b004      	add	sp, #16
   1c2ae:	bd80      	pop	{r7, pc}
   1c2b0:	20003bfc 	.word	0x20003bfc
   1c2b4:	00019eb9 	.word	0x00019eb9
   1c2b8:	20003bd4 	.word	0x20003bd4
   1c2bc:	20003b94 	.word	0x20003b94
   1c2c0:	00019d33 	.word	0x00019d33
   1c2c4:	00017eb9 	.word	0x00017eb9
   1c2c8:	200000cc 	.word	0x200000cc
   1c2cc:	00017e99 	.word	0x00017e99
   1c2d0:	00018669 	.word	0x00018669
   1c2d4:	20003bdc 	.word	0x20003bdc
   1c2d8:	20003b00 	.word	0x20003b00
   1c2dc:	00019c83 	.word	0x00019c83
   1c2e0:	20003afc 	.word	0x20003afc
   1c2e4:	20003be8 	.word	0x20003be8
   1c2e8:	0001cb79 	.word	0x0001cb79
   1c2ec:	20003be4 	.word	0x20003be4
   1c2f0:	0001c319 	.word	0x0001c319
   1c2f4:	00019ea1 	.word	0x00019ea1
   1c2f8:	00019edd 	.word	0x00019edd

0001c2fc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
   1c2fc:	b580      	push	{r7, lr}
   1c2fe:	b082      	sub	sp, #8
   1c300:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
   1c302:	4b04      	ldr	r3, [pc, #16]	; (1c314 <xTaskGetTickCount+0x18>)
   1c304:	681b      	ldr	r3, [r3, #0]
   1c306:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
   1c308:	687b      	ldr	r3, [r7, #4]
}
   1c30a:	0018      	movs	r0, r3
   1c30c:	46bd      	mov	sp, r7
   1c30e:	b002      	add	sp, #8
   1c310:	bd80      	pop	{r7, pc}
   1c312:	46c0      	nop			; (mov r8, r8)
   1c314:	20003bd8 	.word	0x20003bd8

0001c318 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
   1c318:	b580      	push	{r7, lr}
   1c31a:	b086      	sub	sp, #24
   1c31c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
   1c31e:	2300      	movs	r3, #0
   1c320:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
   1c322:	4b64      	ldr	r3, [pc, #400]	; (1c4b4 <xTaskIncrementTick+0x19c>)
   1c324:	681b      	ldr	r3, [r3, #0]
   1c326:	2b01      	cmp	r3, #1
   1c328:	d003      	beq.n	1c332 <xTaskIncrementTick+0x1a>
   1c32a:	4b63      	ldr	r3, [pc, #396]	; (1c4b8 <xTaskIncrementTick+0x1a0>)
   1c32c:	681b      	ldr	r3, [r3, #0]
   1c32e:	2b00      	cmp	r3, #0
   1c330:	d107      	bne.n	1c342 <xTaskIncrementTick+0x2a>
   1c332:	4b62      	ldr	r3, [pc, #392]	; (1c4bc <xTaskIncrementTick+0x1a4>)
   1c334:	681b      	ldr	r3, [r3, #0]
   1c336:	1c5a      	adds	r2, r3, #1
   1c338:	4b60      	ldr	r3, [pc, #384]	; (1c4bc <xTaskIncrementTick+0x1a4>)
   1c33a:	601a      	str	r2, [r3, #0]
   1c33c:	2000      	movs	r0, #0
   1c33e:	4b60      	ldr	r3, [pc, #384]	; (1c4c0 <xTaskIncrementTick+0x1a8>)
   1c340:	4798      	blx	r3
   1c342:	4b5c      	ldr	r3, [pc, #368]	; (1c4b4 <xTaskIncrementTick+0x19c>)
   1c344:	681b      	ldr	r3, [r3, #0]
   1c346:	2b00      	cmp	r3, #0
   1c348:	d106      	bne.n	1c358 <xTaskIncrementTick+0x40>
   1c34a:	4b5e      	ldr	r3, [pc, #376]	; (1c4c4 <xTaskIncrementTick+0x1ac>)
   1c34c:	681b      	ldr	r3, [r3, #0]
   1c34e:	3301      	adds	r3, #1
   1c350:	0019      	movs	r1, r3
   1c352:	2003      	movs	r0, #3
   1c354:	4b5c      	ldr	r3, [pc, #368]	; (1c4c8 <xTaskIncrementTick+0x1b0>)
   1c356:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1c358:	4b56      	ldr	r3, [pc, #344]	; (1c4b4 <xTaskIncrementTick+0x19c>)
   1c35a:	681b      	ldr	r3, [r3, #0]
   1c35c:	2b00      	cmp	r3, #0
   1c35e:	d000      	beq.n	1c362 <xTaskIncrementTick+0x4a>
   1c360:	e098      	b.n	1c494 <xTaskIncrementTick+0x17c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
   1c362:	4b58      	ldr	r3, [pc, #352]	; (1c4c4 <xTaskIncrementTick+0x1ac>)
   1c364:	681b      	ldr	r3, [r3, #0]
   1c366:	3301      	adds	r3, #1
   1c368:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
   1c36a:	4b56      	ldr	r3, [pc, #344]	; (1c4c4 <xTaskIncrementTick+0x1ac>)
   1c36c:	693a      	ldr	r2, [r7, #16]
   1c36e:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
   1c370:	693b      	ldr	r3, [r7, #16]
   1c372:	2b00      	cmp	r3, #0
   1c374:	d117      	bne.n	1c3a6 <xTaskIncrementTick+0x8e>
		{
			taskSWITCH_DELAYED_LISTS();
   1c376:	4b55      	ldr	r3, [pc, #340]	; (1c4cc <xTaskIncrementTick+0x1b4>)
   1c378:	681b      	ldr	r3, [r3, #0]
   1c37a:	681b      	ldr	r3, [r3, #0]
   1c37c:	2b00      	cmp	r3, #0
   1c37e:	d001      	beq.n	1c384 <xTaskIncrementTick+0x6c>
   1c380:	b672      	cpsid	i
   1c382:	e7fe      	b.n	1c382 <xTaskIncrementTick+0x6a>
   1c384:	4b51      	ldr	r3, [pc, #324]	; (1c4cc <xTaskIncrementTick+0x1b4>)
   1c386:	681b      	ldr	r3, [r3, #0]
   1c388:	60fb      	str	r3, [r7, #12]
   1c38a:	4b51      	ldr	r3, [pc, #324]	; (1c4d0 <xTaskIncrementTick+0x1b8>)
   1c38c:	681a      	ldr	r2, [r3, #0]
   1c38e:	4b4f      	ldr	r3, [pc, #316]	; (1c4cc <xTaskIncrementTick+0x1b4>)
   1c390:	601a      	str	r2, [r3, #0]
   1c392:	4b4f      	ldr	r3, [pc, #316]	; (1c4d0 <xTaskIncrementTick+0x1b8>)
   1c394:	68fa      	ldr	r2, [r7, #12]
   1c396:	601a      	str	r2, [r3, #0]
   1c398:	4b4e      	ldr	r3, [pc, #312]	; (1c4d4 <xTaskIncrementTick+0x1bc>)
   1c39a:	681b      	ldr	r3, [r3, #0]
   1c39c:	1c5a      	adds	r2, r3, #1
   1c39e:	4b4d      	ldr	r3, [pc, #308]	; (1c4d4 <xTaskIncrementTick+0x1bc>)
   1c3a0:	601a      	str	r2, [r3, #0]
   1c3a2:	4b4d      	ldr	r3, [pc, #308]	; (1c4d8 <xTaskIncrementTick+0x1c0>)
   1c3a4:	4798      	blx	r3

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
   1c3a6:	4b4d      	ldr	r3, [pc, #308]	; (1c4dc <xTaskIncrementTick+0x1c4>)
   1c3a8:	681b      	ldr	r3, [r3, #0]
   1c3aa:	693a      	ldr	r2, [r7, #16]
   1c3ac:	429a      	cmp	r2, r3
   1c3ae:	d363      	bcc.n	1c478 <xTaskIncrementTick+0x160>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1c3b0:	4b46      	ldr	r3, [pc, #280]	; (1c4cc <xTaskIncrementTick+0x1b4>)
   1c3b2:	681b      	ldr	r3, [r3, #0]
   1c3b4:	681b      	ldr	r3, [r3, #0]
   1c3b6:	2b00      	cmp	r3, #0
   1c3b8:	d101      	bne.n	1c3be <xTaskIncrementTick+0xa6>
   1c3ba:	2301      	movs	r3, #1
   1c3bc:	e000      	b.n	1c3c0 <xTaskIncrementTick+0xa8>
   1c3be:	2300      	movs	r3, #0
   1c3c0:	2b00      	cmp	r3, #0
   1c3c2:	d004      	beq.n	1c3ce <xTaskIncrementTick+0xb6>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1c3c4:	4b45      	ldr	r3, [pc, #276]	; (1c4dc <xTaskIncrementTick+0x1c4>)
   1c3c6:	2201      	movs	r2, #1
   1c3c8:	4252      	negs	r2, r2
   1c3ca:	601a      	str	r2, [r3, #0]
					break;
   1c3cc:	e054      	b.n	1c478 <xTaskIncrementTick+0x160>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   1c3ce:	4b3f      	ldr	r3, [pc, #252]	; (1c4cc <xTaskIncrementTick+0x1b4>)
   1c3d0:	681b      	ldr	r3, [r3, #0]
   1c3d2:	68db      	ldr	r3, [r3, #12]
   1c3d4:	68db      	ldr	r3, [r3, #12]
   1c3d6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
   1c3d8:	68bb      	ldr	r3, [r7, #8]
   1c3da:	685b      	ldr	r3, [r3, #4]
   1c3dc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
   1c3de:	693a      	ldr	r2, [r7, #16]
   1c3e0:	687b      	ldr	r3, [r7, #4]
   1c3e2:	429a      	cmp	r2, r3
   1c3e4:	d203      	bcs.n	1c3ee <xTaskIncrementTick+0xd6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
   1c3e6:	4b3d      	ldr	r3, [pc, #244]	; (1c4dc <xTaskIncrementTick+0x1c4>)
   1c3e8:	687a      	ldr	r2, [r7, #4]
   1c3ea:	601a      	str	r2, [r3, #0]
						break;
   1c3ec:	e044      	b.n	1c478 <xTaskIncrementTick+0x160>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1c3ee:	68bb      	ldr	r3, [r7, #8]
   1c3f0:	3304      	adds	r3, #4
   1c3f2:	0018      	movs	r0, r3
   1c3f4:	4b3a      	ldr	r3, [pc, #232]	; (1c4e0 <xTaskIncrementTick+0x1c8>)
   1c3f6:	4798      	blx	r3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1c3f8:	68bb      	ldr	r3, [r7, #8]
   1c3fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1c3fc:	2b00      	cmp	r3, #0
   1c3fe:	d004      	beq.n	1c40a <xTaskIncrementTick+0xf2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1c400:	68bb      	ldr	r3, [r7, #8]
   1c402:	3318      	adds	r3, #24
   1c404:	0018      	movs	r0, r3
   1c406:	4b36      	ldr	r3, [pc, #216]	; (1c4e0 <xTaskIncrementTick+0x1c8>)
   1c408:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
   1c40a:	68bb      	ldr	r3, [r7, #8]
   1c40c:	0018      	movs	r0, r3
   1c40e:	4b35      	ldr	r3, [pc, #212]	; (1c4e4 <xTaskIncrementTick+0x1cc>)
   1c410:	4798      	blx	r3
   1c412:	0003      	movs	r3, r0
   1c414:	001a      	movs	r2, r3
   1c416:	4b34      	ldr	r3, [pc, #208]	; (1c4e8 <xTaskIncrementTick+0x1d0>)
   1c418:	881b      	ldrh	r3, [r3, #0]
   1c41a:	4013      	ands	r3, r2
   1c41c:	b29b      	uxth	r3, r3
   1c41e:	2b00      	cmp	r3, #0
   1c420:	d008      	beq.n	1c434 <xTaskIncrementTick+0x11c>
   1c422:	68bb      	ldr	r3, [r7, #8]
   1c424:	0018      	movs	r0, r3
   1c426:	4b31      	ldr	r3, [pc, #196]	; (1c4ec <xTaskIncrementTick+0x1d4>)
   1c428:	4798      	blx	r3
   1c42a:	0003      	movs	r3, r0
   1c42c:	b2db      	uxtb	r3, r3
   1c42e:	0018      	movs	r0, r3
   1c430:	4b2f      	ldr	r3, [pc, #188]	; (1c4f0 <xTaskIncrementTick+0x1d8>)
   1c432:	4798      	blx	r3
   1c434:	68bb      	ldr	r3, [r7, #8]
   1c436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c438:	4b2e      	ldr	r3, [pc, #184]	; (1c4f4 <xTaskIncrementTick+0x1dc>)
   1c43a:	681b      	ldr	r3, [r3, #0]
   1c43c:	429a      	cmp	r2, r3
   1c43e:	d903      	bls.n	1c448 <xTaskIncrementTick+0x130>
   1c440:	68bb      	ldr	r3, [r7, #8]
   1c442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c444:	4b2b      	ldr	r3, [pc, #172]	; (1c4f4 <xTaskIncrementTick+0x1dc>)
   1c446:	601a      	str	r2, [r3, #0]
   1c448:	68bb      	ldr	r3, [r7, #8]
   1c44a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c44c:	0013      	movs	r3, r2
   1c44e:	009b      	lsls	r3, r3, #2
   1c450:	189b      	adds	r3, r3, r2
   1c452:	009b      	lsls	r3, r3, #2
   1c454:	4a28      	ldr	r2, [pc, #160]	; (1c4f8 <xTaskIncrementTick+0x1e0>)
   1c456:	189a      	adds	r2, r3, r2
   1c458:	68bb      	ldr	r3, [r7, #8]
   1c45a:	3304      	adds	r3, #4
   1c45c:	0019      	movs	r1, r3
   1c45e:	0010      	movs	r0, r2
   1c460:	4b26      	ldr	r3, [pc, #152]	; (1c4fc <xTaskIncrementTick+0x1e4>)
   1c462:	4798      	blx	r3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1c464:	68bb      	ldr	r3, [r7, #8]
   1c466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c468:	4b25      	ldr	r3, [pc, #148]	; (1c500 <xTaskIncrementTick+0x1e8>)
   1c46a:	681b      	ldr	r3, [r3, #0]
   1c46c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c46e:	429a      	cmp	r2, r3
   1c470:	d39e      	bcc.n	1c3b0 <xTaskIncrementTick+0x98>
						{
							xSwitchRequired = pdTRUE;
   1c472:	2301      	movs	r3, #1
   1c474:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1c476:	e79b      	b.n	1c3b0 <xTaskIncrementTick+0x98>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
   1c478:	4b21      	ldr	r3, [pc, #132]	; (1c500 <xTaskIncrementTick+0x1e8>)
   1c47a:	681b      	ldr	r3, [r3, #0]
   1c47c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c47e:	491e      	ldr	r1, [pc, #120]	; (1c4f8 <xTaskIncrementTick+0x1e0>)
   1c480:	0013      	movs	r3, r2
   1c482:	009b      	lsls	r3, r3, #2
   1c484:	189b      	adds	r3, r3, r2
   1c486:	009b      	lsls	r3, r3, #2
   1c488:	585b      	ldr	r3, [r3, r1]
   1c48a:	2b01      	cmp	r3, #1
   1c48c:	d907      	bls.n	1c49e <xTaskIncrementTick+0x186>
			{
				xSwitchRequired = pdTRUE;
   1c48e:	2301      	movs	r3, #1
   1c490:	617b      	str	r3, [r7, #20]
   1c492:	e004      	b.n	1c49e <xTaskIncrementTick+0x186>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
   1c494:	4b08      	ldr	r3, [pc, #32]	; (1c4b8 <xTaskIncrementTick+0x1a0>)
   1c496:	681b      	ldr	r3, [r3, #0]
   1c498:	1c5a      	adds	r2, r3, #1
   1c49a:	4b07      	ldr	r3, [pc, #28]	; (1c4b8 <xTaskIncrementTick+0x1a0>)
   1c49c:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
   1c49e:	4b19      	ldr	r3, [pc, #100]	; (1c504 <xTaskIncrementTick+0x1ec>)
   1c4a0:	681b      	ldr	r3, [r3, #0]
   1c4a2:	2b00      	cmp	r3, #0
   1c4a4:	d001      	beq.n	1c4aa <xTaskIncrementTick+0x192>
		{
			xSwitchRequired = pdTRUE;
   1c4a6:	2301      	movs	r3, #1
   1c4a8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
   1c4aa:	697b      	ldr	r3, [r7, #20]
}
   1c4ac:	0018      	movs	r0, r3
   1c4ae:	46bd      	mov	sp, r7
   1c4b0:	b006      	add	sp, #24
   1c4b2:	bd80      	pop	{r7, pc}
   1c4b4:	20003bfc 	.word	0x20003bfc
   1c4b8:	20003be4 	.word	0x20003be4
   1c4bc:	20000b44 	.word	0x20000b44
   1c4c0:	00019b4d 	.word	0x00019b4d
   1c4c4:	20003bd8 	.word	0x20003bd8
   1c4c8:	00018bb9 	.word	0x00018bb9
   1c4cc:	20003b8c 	.word	0x20003b8c
   1c4d0:	20003b90 	.word	0x20003b90
   1c4d4:	20003bec 	.word	0x20003bec
   1c4d8:	0001cb79 	.word	0x0001cb79
   1c4dc:	20003bf4 	.word	0x20003bf4
   1c4e0:	00019d33 	.word	0x00019d33
   1c4e4:	00017eb9 	.word	0x00017eb9
   1c4e8:	200000cc 	.word	0x200000cc
   1c4ec:	00017e99 	.word	0x00017e99
   1c4f0:	00018669 	.word	0x00018669
   1c4f4:	20003bdc 	.word	0x20003bdc
   1c4f8:	20003b00 	.word	0x20003b00
   1c4fc:	00019c83 	.word	0x00019c83
   1c500:	20003afc 	.word	0x20003afc
   1c504:	20003be8 	.word	0x20003be8

0001c508 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   1c508:	b580      	push	{r7, lr}
   1c50a:	b082      	sub	sp, #8
   1c50c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   1c50e:	4b3a      	ldr	r3, [pc, #232]	; (1c5f8 <vTaskSwitchContext+0xf0>)
   1c510:	681b      	ldr	r3, [r3, #0]
   1c512:	2b00      	cmp	r3, #0
   1c514:	d003      	beq.n	1c51e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   1c516:	4b39      	ldr	r3, [pc, #228]	; (1c5fc <vTaskSwitchContext+0xf4>)
   1c518:	2201      	movs	r2, #1
   1c51a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   1c51c:	e067      	b.n	1c5ee <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
   1c51e:	4b37      	ldr	r3, [pc, #220]	; (1c5fc <vTaskSwitchContext+0xf4>)
   1c520:	2200      	movs	r2, #0
   1c522:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
   1c524:	4b36      	ldr	r3, [pc, #216]	; (1c600 <vTaskSwitchContext+0xf8>)
   1c526:	681b      	ldr	r3, [r3, #0]
   1c528:	681a      	ldr	r2, [r3, #0]
   1c52a:	4b35      	ldr	r3, [pc, #212]	; (1c600 <vTaskSwitchContext+0xf8>)
   1c52c:	681b      	ldr	r3, [r3, #0]
   1c52e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1c530:	429a      	cmp	r2, r3
   1c532:	d808      	bhi.n	1c546 <vTaskSwitchContext+0x3e>
   1c534:	4b32      	ldr	r3, [pc, #200]	; (1c600 <vTaskSwitchContext+0xf8>)
   1c536:	681a      	ldr	r2, [r3, #0]
   1c538:	4b31      	ldr	r3, [pc, #196]	; (1c600 <vTaskSwitchContext+0xf8>)
   1c53a:	681b      	ldr	r3, [r3, #0]
   1c53c:	3334      	adds	r3, #52	; 0x34
   1c53e:	0019      	movs	r1, r3
   1c540:	0010      	movs	r0, r2
   1c542:	4b30      	ldr	r3, [pc, #192]	; (1c604 <vTaskSwitchContext+0xfc>)
   1c544:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
   1c546:	4b30      	ldr	r3, [pc, #192]	; (1c608 <vTaskSwitchContext+0x100>)
   1c548:	681b      	ldr	r3, [r3, #0]
   1c54a:	607b      	str	r3, [r7, #4]
   1c54c:	e007      	b.n	1c55e <vTaskSwitchContext+0x56>
   1c54e:	687b      	ldr	r3, [r7, #4]
   1c550:	2b00      	cmp	r3, #0
   1c552:	d101      	bne.n	1c558 <vTaskSwitchContext+0x50>
   1c554:	b672      	cpsid	i
   1c556:	e7fe      	b.n	1c556 <vTaskSwitchContext+0x4e>
   1c558:	687b      	ldr	r3, [r7, #4]
   1c55a:	3b01      	subs	r3, #1
   1c55c:	607b      	str	r3, [r7, #4]
   1c55e:	492b      	ldr	r1, [pc, #172]	; (1c60c <vTaskSwitchContext+0x104>)
   1c560:	687a      	ldr	r2, [r7, #4]
   1c562:	0013      	movs	r3, r2
   1c564:	009b      	lsls	r3, r3, #2
   1c566:	189b      	adds	r3, r3, r2
   1c568:	009b      	lsls	r3, r3, #2
   1c56a:	585b      	ldr	r3, [r3, r1]
   1c56c:	2b00      	cmp	r3, #0
   1c56e:	d0ee      	beq.n	1c54e <vTaskSwitchContext+0x46>
   1c570:	687a      	ldr	r2, [r7, #4]
   1c572:	0013      	movs	r3, r2
   1c574:	009b      	lsls	r3, r3, #2
   1c576:	189b      	adds	r3, r3, r2
   1c578:	009b      	lsls	r3, r3, #2
   1c57a:	4a24      	ldr	r2, [pc, #144]	; (1c60c <vTaskSwitchContext+0x104>)
   1c57c:	189b      	adds	r3, r3, r2
   1c57e:	603b      	str	r3, [r7, #0]
   1c580:	683b      	ldr	r3, [r7, #0]
   1c582:	685b      	ldr	r3, [r3, #4]
   1c584:	685a      	ldr	r2, [r3, #4]
   1c586:	683b      	ldr	r3, [r7, #0]
   1c588:	605a      	str	r2, [r3, #4]
   1c58a:	683b      	ldr	r3, [r7, #0]
   1c58c:	685a      	ldr	r2, [r3, #4]
   1c58e:	683b      	ldr	r3, [r7, #0]
   1c590:	3308      	adds	r3, #8
   1c592:	429a      	cmp	r2, r3
   1c594:	d104      	bne.n	1c5a0 <vTaskSwitchContext+0x98>
   1c596:	683b      	ldr	r3, [r7, #0]
   1c598:	685b      	ldr	r3, [r3, #4]
   1c59a:	685a      	ldr	r2, [r3, #4]
   1c59c:	683b      	ldr	r3, [r7, #0]
   1c59e:	605a      	str	r2, [r3, #4]
   1c5a0:	683b      	ldr	r3, [r7, #0]
   1c5a2:	685b      	ldr	r3, [r3, #4]
   1c5a4:	68da      	ldr	r2, [r3, #12]
   1c5a6:	4b16      	ldr	r3, [pc, #88]	; (1c600 <vTaskSwitchContext+0xf8>)
   1c5a8:	601a      	str	r2, [r3, #0]
   1c5aa:	4b17      	ldr	r3, [pc, #92]	; (1c608 <vTaskSwitchContext+0x100>)
   1c5ac:	687a      	ldr	r2, [r7, #4]
   1c5ae:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_IN();
   1c5b0:	4b17      	ldr	r3, [pc, #92]	; (1c610 <vTaskSwitchContext+0x108>)
   1c5b2:	2201      	movs	r2, #1
   1c5b4:	601a      	str	r2, [r3, #0]
   1c5b6:	4b17      	ldr	r3, [pc, #92]	; (1c614 <vTaskSwitchContext+0x10c>)
   1c5b8:	4798      	blx	r3
   1c5ba:	0003      	movs	r3, r0
   1c5bc:	0018      	movs	r0, r3
   1c5be:	4b16      	ldr	r3, [pc, #88]	; (1c618 <vTaskSwitchContext+0x110>)
   1c5c0:	4798      	blx	r3
   1c5c2:	0003      	movs	r3, r0
   1c5c4:	001a      	movs	r2, r3
   1c5c6:	4b15      	ldr	r3, [pc, #84]	; (1c61c <vTaskSwitchContext+0x114>)
   1c5c8:	881b      	ldrh	r3, [r3, #0]
   1c5ca:	4013      	ands	r3, r2
   1c5cc:	b29b      	uxth	r3, r3
   1c5ce:	2b00      	cmp	r3, #0
   1c5d0:	d00a      	beq.n	1c5e8 <vTaskSwitchContext+0xe0>
   1c5d2:	4b10      	ldr	r3, [pc, #64]	; (1c614 <vTaskSwitchContext+0x10c>)
   1c5d4:	4798      	blx	r3
   1c5d6:	0003      	movs	r3, r0
   1c5d8:	0018      	movs	r0, r3
   1c5da:	4b11      	ldr	r3, [pc, #68]	; (1c620 <vTaskSwitchContext+0x118>)
   1c5dc:	4798      	blx	r3
   1c5de:	0003      	movs	r3, r0
   1c5e0:	b2db      	uxtb	r3, r3
   1c5e2:	0018      	movs	r0, r3
   1c5e4:	4b0f      	ldr	r3, [pc, #60]	; (1c624 <vTaskSwitchContext+0x11c>)
   1c5e6:	4798      	blx	r3
   1c5e8:	4b09      	ldr	r3, [pc, #36]	; (1c610 <vTaskSwitchContext+0x108>)
   1c5ea:	2202      	movs	r2, #2
   1c5ec:	601a      	str	r2, [r3, #0]
}
   1c5ee:	46c0      	nop			; (mov r8, r8)
   1c5f0:	46bd      	mov	sp, r7
   1c5f2:	b002      	add	sp, #8
   1c5f4:	bd80      	pop	{r7, pc}
   1c5f6:	46c0      	nop			; (mov r8, r8)
   1c5f8:	20003bfc 	.word	0x20003bfc
   1c5fc:	20003be8 	.word	0x20003be8
   1c600:	20003afc 	.word	0x20003afc
   1c604:	000323b1 	.word	0x000323b1
   1c608:	20003bdc 	.word	0x20003bdc
   1c60c:	20003b00 	.word	0x20003b00
   1c610:	20000b50 	.word	0x20000b50
   1c614:	00018155 	.word	0x00018155
   1c618:	00017eb9 	.word	0x00017eb9
   1c61c:	200000cc 	.word	0x200000cc
   1c620:	00017e99 	.word	0x00017e99
   1c624:	00018cb5 	.word	0x00018cb5

0001c628 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
   1c628:	b580      	push	{r7, lr}
   1c62a:	b082      	sub	sp, #8
   1c62c:	af00      	add	r7, sp, #0
   1c62e:	6078      	str	r0, [r7, #4]
   1c630:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
   1c632:	687b      	ldr	r3, [r7, #4]
   1c634:	2b00      	cmp	r3, #0
   1c636:	d101      	bne.n	1c63c <vTaskPlaceOnEventList+0x14>
   1c638:	b672      	cpsid	i
   1c63a:	e7fe      	b.n	1c63a <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1c63c:	4b08      	ldr	r3, [pc, #32]	; (1c660 <vTaskPlaceOnEventList+0x38>)
   1c63e:	681b      	ldr	r3, [r3, #0]
   1c640:	3318      	adds	r3, #24
   1c642:	001a      	movs	r2, r3
   1c644:	687b      	ldr	r3, [r7, #4]
   1c646:	0011      	movs	r1, r2
   1c648:	0018      	movs	r0, r3
   1c64a:	4b06      	ldr	r3, [pc, #24]	; (1c664 <vTaskPlaceOnEventList+0x3c>)
   1c64c:	4798      	blx	r3

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   1c64e:	683b      	ldr	r3, [r7, #0]
   1c650:	2101      	movs	r1, #1
   1c652:	0018      	movs	r0, r3
   1c654:	4b04      	ldr	r3, [pc, #16]	; (1c668 <vTaskPlaceOnEventList+0x40>)
   1c656:	4798      	blx	r3
}
   1c658:	46c0      	nop			; (mov r8, r8)
   1c65a:	46bd      	mov	sp, r7
   1c65c:	b002      	add	sp, #8
   1c65e:	bd80      	pop	{r7, pc}
   1c660:	20003afc 	.word	0x20003afc
   1c664:	00019cc7 	.word	0x00019cc7
   1c668:	0001d0cd 	.word	0x0001d0cd

0001c66c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1c66c:	b580      	push	{r7, lr}
   1c66e:	b084      	sub	sp, #16
   1c670:	af00      	add	r7, sp, #0
   1c672:	60f8      	str	r0, [r7, #12]
   1c674:	60b9      	str	r1, [r7, #8]
   1c676:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
   1c678:	68fb      	ldr	r3, [r7, #12]
   1c67a:	2b00      	cmp	r3, #0
   1c67c:	d101      	bne.n	1c682 <vTaskPlaceOnEventListRestricted+0x16>
   1c67e:	b672      	cpsid	i
   1c680:	e7fe      	b.n	1c680 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1c682:	4b28      	ldr	r3, [pc, #160]	; (1c724 <vTaskPlaceOnEventListRestricted+0xb8>)
   1c684:	681b      	ldr	r3, [r3, #0]
   1c686:	3318      	adds	r3, #24
   1c688:	001a      	movs	r2, r3
   1c68a:	68fb      	ldr	r3, [r7, #12]
   1c68c:	0011      	movs	r1, r2
   1c68e:	0018      	movs	r0, r3
   1c690:	4b25      	ldr	r3, [pc, #148]	; (1c728 <vTaskPlaceOnEventListRestricted+0xbc>)
   1c692:	4798      	blx	r3

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
   1c694:	687b      	ldr	r3, [r7, #4]
   1c696:	2b00      	cmp	r3, #0
   1c698:	d002      	beq.n	1c6a0 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
   1c69a:	2301      	movs	r3, #1
   1c69c:	425b      	negs	r3, r3
   1c69e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
   1c6a0:	4b20      	ldr	r3, [pc, #128]	; (1c724 <vTaskPlaceOnEventListRestricted+0xb8>)
   1c6a2:	681b      	ldr	r3, [r3, #0]
   1c6a4:	0018      	movs	r0, r3
   1c6a6:	4b21      	ldr	r3, [pc, #132]	; (1c72c <vTaskPlaceOnEventListRestricted+0xc0>)
   1c6a8:	4798      	blx	r3
   1c6aa:	0003      	movs	r3, r0
   1c6ac:	001a      	movs	r2, r3
   1c6ae:	4b20      	ldr	r3, [pc, #128]	; (1c730 <vTaskPlaceOnEventListRestricted+0xc4>)
   1c6b0:	881b      	ldrh	r3, [r3, #0]
   1c6b2:	4013      	ands	r3, r2
   1c6b4:	b29b      	uxth	r3, r3
   1c6b6:	2b00      	cmp	r3, #0
   1c6b8:	d011      	beq.n	1c6de <vTaskPlaceOnEventListRestricted+0x72>
   1c6ba:	4b1e      	ldr	r3, [pc, #120]	; (1c734 <vTaskPlaceOnEventListRestricted+0xc8>)
   1c6bc:	681a      	ldr	r2, [r3, #0]
   1c6be:	68bb      	ldr	r3, [r7, #8]
   1c6c0:	18d3      	adds	r3, r2, r3
   1c6c2:	0019      	movs	r1, r3
   1c6c4:	2088      	movs	r0, #136	; 0x88
   1c6c6:	4b1c      	ldr	r3, [pc, #112]	; (1c738 <vTaskPlaceOnEventListRestricted+0xcc>)
   1c6c8:	4798      	blx	r3
   1c6ca:	4b16      	ldr	r3, [pc, #88]	; (1c724 <vTaskPlaceOnEventListRestricted+0xb8>)
   1c6cc:	681b      	ldr	r3, [r3, #0]
   1c6ce:	0018      	movs	r0, r3
   1c6d0:	4b1a      	ldr	r3, [pc, #104]	; (1c73c <vTaskPlaceOnEventListRestricted+0xd0>)
   1c6d2:	4798      	blx	r3
   1c6d4:	0003      	movs	r3, r0
   1c6d6:	b2db      	uxtb	r3, r3
   1c6d8:	0018      	movs	r0, r3
   1c6da:	4b19      	ldr	r3, [pc, #100]	; (1c740 <vTaskPlaceOnEventListRestricted+0xd4>)
   1c6dc:	4798      	blx	r3
   1c6de:	4b19      	ldr	r3, [pc, #100]	; (1c744 <vTaskPlaceOnEventListRestricted+0xd8>)
   1c6e0:	4798      	blx	r3
   1c6e2:	0003      	movs	r3, r0
   1c6e4:	0018      	movs	r0, r3
   1c6e6:	4b11      	ldr	r3, [pc, #68]	; (1c72c <vTaskPlaceOnEventListRestricted+0xc0>)
   1c6e8:	4798      	blx	r3
   1c6ea:	0003      	movs	r3, r0
   1c6ec:	001a      	movs	r2, r3
   1c6ee:	4b10      	ldr	r3, [pc, #64]	; (1c730 <vTaskPlaceOnEventListRestricted+0xc4>)
   1c6f0:	881b      	ldrh	r3, [r3, #0]
   1c6f2:	4013      	ands	r3, r2
   1c6f4:	b29b      	uxth	r3, r3
   1c6f6:	2b00      	cmp	r3, #0
   1c6f8:	d00a      	beq.n	1c710 <vTaskPlaceOnEventListRestricted+0xa4>
   1c6fa:	4b12      	ldr	r3, [pc, #72]	; (1c744 <vTaskPlaceOnEventListRestricted+0xd8>)
   1c6fc:	4798      	blx	r3
   1c6fe:	0003      	movs	r3, r0
   1c700:	0018      	movs	r0, r3
   1c702:	4b0e      	ldr	r3, [pc, #56]	; (1c73c <vTaskPlaceOnEventListRestricted+0xd0>)
   1c704:	4798      	blx	r3
   1c706:	0003      	movs	r3, r0
   1c708:	b2db      	uxtb	r3, r3
   1c70a:	0018      	movs	r0, r3
   1c70c:	4b0c      	ldr	r3, [pc, #48]	; (1c740 <vTaskPlaceOnEventListRestricted+0xd4>)
   1c70e:	4798      	blx	r3
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
   1c710:	687a      	ldr	r2, [r7, #4]
   1c712:	68bb      	ldr	r3, [r7, #8]
   1c714:	0011      	movs	r1, r2
   1c716:	0018      	movs	r0, r3
   1c718:	4b0b      	ldr	r3, [pc, #44]	; (1c748 <vTaskPlaceOnEventListRestricted+0xdc>)
   1c71a:	4798      	blx	r3
	}
   1c71c:	46c0      	nop			; (mov r8, r8)
   1c71e:	46bd      	mov	sp, r7
   1c720:	b004      	add	sp, #16
   1c722:	bd80      	pop	{r7, pc}
   1c724:	20003afc 	.word	0x20003afc
   1c728:	00019c83 	.word	0x00019c83
   1c72c:	00017eb9 	.word	0x00017eb9
   1c730:	200000cc 	.word	0x200000cc
   1c734:	20003bd8 	.word	0x20003bd8
   1c738:	00018bb9 	.word	0x00018bb9
   1c73c:	00017e99 	.word	0x00017e99
   1c740:	00019049 	.word	0x00019049
   1c744:	00018155 	.word	0x00018155
   1c748:	0001d0cd 	.word	0x0001d0cd

0001c74c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
   1c74c:	b580      	push	{r7, lr}
   1c74e:	b084      	sub	sp, #16
   1c750:	af00      	add	r7, sp, #0
   1c752:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   1c754:	687b      	ldr	r3, [r7, #4]
   1c756:	68db      	ldr	r3, [r3, #12]
   1c758:	68db      	ldr	r3, [r3, #12]
   1c75a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
   1c75c:	68bb      	ldr	r3, [r7, #8]
   1c75e:	2b00      	cmp	r3, #0
   1c760:	d101      	bne.n	1c766 <xTaskRemoveFromEventList+0x1a>
   1c762:	b672      	cpsid	i
   1c764:	e7fe      	b.n	1c764 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   1c766:	68bb      	ldr	r3, [r7, #8]
   1c768:	3318      	adds	r3, #24
   1c76a:	0018      	movs	r0, r3
   1c76c:	4b2a      	ldr	r3, [pc, #168]	; (1c818 <xTaskRemoveFromEventList+0xcc>)
   1c76e:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1c770:	4b2a      	ldr	r3, [pc, #168]	; (1c81c <xTaskRemoveFromEventList+0xd0>)
   1c772:	681b      	ldr	r3, [r3, #0]
   1c774:	2b00      	cmp	r3, #0
   1c776:	d132      	bne.n	1c7de <xTaskRemoveFromEventList+0x92>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   1c778:	68bb      	ldr	r3, [r7, #8]
   1c77a:	3304      	adds	r3, #4
   1c77c:	0018      	movs	r0, r3
   1c77e:	4b26      	ldr	r3, [pc, #152]	; (1c818 <xTaskRemoveFromEventList+0xcc>)
   1c780:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
   1c782:	68bb      	ldr	r3, [r7, #8]
   1c784:	0018      	movs	r0, r3
   1c786:	4b26      	ldr	r3, [pc, #152]	; (1c820 <xTaskRemoveFromEventList+0xd4>)
   1c788:	4798      	blx	r3
   1c78a:	0003      	movs	r3, r0
   1c78c:	001a      	movs	r2, r3
   1c78e:	4b25      	ldr	r3, [pc, #148]	; (1c824 <xTaskRemoveFromEventList+0xd8>)
   1c790:	881b      	ldrh	r3, [r3, #0]
   1c792:	4013      	ands	r3, r2
   1c794:	b29b      	uxth	r3, r3
   1c796:	2b00      	cmp	r3, #0
   1c798:	d008      	beq.n	1c7ac <xTaskRemoveFromEventList+0x60>
   1c79a:	68bb      	ldr	r3, [r7, #8]
   1c79c:	0018      	movs	r0, r3
   1c79e:	4b22      	ldr	r3, [pc, #136]	; (1c828 <xTaskRemoveFromEventList+0xdc>)
   1c7a0:	4798      	blx	r3
   1c7a2:	0003      	movs	r3, r0
   1c7a4:	b2db      	uxtb	r3, r3
   1c7a6:	0018      	movs	r0, r3
   1c7a8:	4b20      	ldr	r3, [pc, #128]	; (1c82c <xTaskRemoveFromEventList+0xe0>)
   1c7aa:	4798      	blx	r3
   1c7ac:	68bb      	ldr	r3, [r7, #8]
   1c7ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c7b0:	4b1f      	ldr	r3, [pc, #124]	; (1c830 <xTaskRemoveFromEventList+0xe4>)
   1c7b2:	681b      	ldr	r3, [r3, #0]
   1c7b4:	429a      	cmp	r2, r3
   1c7b6:	d903      	bls.n	1c7c0 <xTaskRemoveFromEventList+0x74>
   1c7b8:	68bb      	ldr	r3, [r7, #8]
   1c7ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c7bc:	4b1c      	ldr	r3, [pc, #112]	; (1c830 <xTaskRemoveFromEventList+0xe4>)
   1c7be:	601a      	str	r2, [r3, #0]
   1c7c0:	68bb      	ldr	r3, [r7, #8]
   1c7c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c7c4:	0013      	movs	r3, r2
   1c7c6:	009b      	lsls	r3, r3, #2
   1c7c8:	189b      	adds	r3, r3, r2
   1c7ca:	009b      	lsls	r3, r3, #2
   1c7cc:	4a19      	ldr	r2, [pc, #100]	; (1c834 <xTaskRemoveFromEventList+0xe8>)
   1c7ce:	189a      	adds	r2, r3, r2
   1c7d0:	68bb      	ldr	r3, [r7, #8]
   1c7d2:	3304      	adds	r3, #4
   1c7d4:	0019      	movs	r1, r3
   1c7d6:	0010      	movs	r0, r2
   1c7d8:	4b17      	ldr	r3, [pc, #92]	; (1c838 <xTaskRemoveFromEventList+0xec>)
   1c7da:	4798      	blx	r3
   1c7dc:	e007      	b.n	1c7ee <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   1c7de:	68bb      	ldr	r3, [r7, #8]
   1c7e0:	3318      	adds	r3, #24
   1c7e2:	001a      	movs	r2, r3
   1c7e4:	4b15      	ldr	r3, [pc, #84]	; (1c83c <xTaskRemoveFromEventList+0xf0>)
   1c7e6:	0011      	movs	r1, r2
   1c7e8:	0018      	movs	r0, r3
   1c7ea:	4b13      	ldr	r3, [pc, #76]	; (1c838 <xTaskRemoveFromEventList+0xec>)
   1c7ec:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   1c7ee:	68bb      	ldr	r3, [r7, #8]
   1c7f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c7f2:	4b13      	ldr	r3, [pc, #76]	; (1c840 <xTaskRemoveFromEventList+0xf4>)
   1c7f4:	681b      	ldr	r3, [r3, #0]
   1c7f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c7f8:	429a      	cmp	r2, r3
   1c7fa:	d905      	bls.n	1c808 <xTaskRemoveFromEventList+0xbc>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
   1c7fc:	2301      	movs	r3, #1
   1c7fe:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
   1c800:	4b10      	ldr	r3, [pc, #64]	; (1c844 <xTaskRemoveFromEventList+0xf8>)
   1c802:	2201      	movs	r2, #1
   1c804:	601a      	str	r2, [r3, #0]
   1c806:	e001      	b.n	1c80c <xTaskRemoveFromEventList+0xc0>
	}
	else
	{
		xReturn = pdFALSE;
   1c808:	2300      	movs	r3, #0
   1c80a:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
   1c80c:	68fb      	ldr	r3, [r7, #12]
}
   1c80e:	0018      	movs	r0, r3
   1c810:	46bd      	mov	sp, r7
   1c812:	b004      	add	sp, #16
   1c814:	bd80      	pop	{r7, pc}
   1c816:	46c0      	nop			; (mov r8, r8)
   1c818:	00019d33 	.word	0x00019d33
   1c81c:	20003bfc 	.word	0x20003bfc
   1c820:	00017eb9 	.word	0x00017eb9
   1c824:	200000cc 	.word	0x200000cc
   1c828:	00017e99 	.word	0x00017e99
   1c82c:	00018669 	.word	0x00018669
   1c830:	20003bdc 	.word	0x20003bdc
   1c834:	20003b00 	.word	0x20003b00
   1c838:	00019c83 	.word	0x00019c83
   1c83c:	20003b94 	.word	0x20003b94
   1c840:	20003afc 	.word	0x20003afc
   1c844:	20003be8 	.word	0x20003be8

0001c848 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   1c848:	b580      	push	{r7, lr}
   1c84a:	b082      	sub	sp, #8
   1c84c:	af00      	add	r7, sp, #0
   1c84e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
   1c850:	687b      	ldr	r3, [r7, #4]
   1c852:	2b00      	cmp	r3, #0
   1c854:	d101      	bne.n	1c85a <vTaskSetTimeOutState+0x12>
   1c856:	b672      	cpsid	i
   1c858:	e7fe      	b.n	1c858 <vTaskSetTimeOutState+0x10>
	taskENTER_CRITICAL();
   1c85a:	4b08      	ldr	r3, [pc, #32]	; (1c87c <vTaskSetTimeOutState+0x34>)
   1c85c:	4798      	blx	r3
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
   1c85e:	4b08      	ldr	r3, [pc, #32]	; (1c880 <vTaskSetTimeOutState+0x38>)
   1c860:	681a      	ldr	r2, [r3, #0]
   1c862:	687b      	ldr	r3, [r7, #4]
   1c864:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
   1c866:	4b07      	ldr	r3, [pc, #28]	; (1c884 <vTaskSetTimeOutState+0x3c>)
   1c868:	681a      	ldr	r2, [r3, #0]
   1c86a:	687b      	ldr	r3, [r7, #4]
   1c86c:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
   1c86e:	4b06      	ldr	r3, [pc, #24]	; (1c888 <vTaskSetTimeOutState+0x40>)
   1c870:	4798      	blx	r3
}
   1c872:	46c0      	nop			; (mov r8, r8)
   1c874:	46bd      	mov	sp, r7
   1c876:	b002      	add	sp, #8
   1c878:	bd80      	pop	{r7, pc}
   1c87a:	46c0      	nop			; (mov r8, r8)
   1c87c:	00019eb9 	.word	0x00019eb9
   1c880:	20003bec 	.word	0x20003bec
   1c884:	20003bd8 	.word	0x20003bd8
   1c888:	00019edd 	.word	0x00019edd

0001c88c <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   1c88c:	b580      	push	{r7, lr}
   1c88e:	b082      	sub	sp, #8
   1c890:	af00      	add	r7, sp, #0
   1c892:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   1c894:	4b05      	ldr	r3, [pc, #20]	; (1c8ac <vTaskInternalSetTimeOutState+0x20>)
   1c896:	681a      	ldr	r2, [r3, #0]
   1c898:	687b      	ldr	r3, [r7, #4]
   1c89a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   1c89c:	4b04      	ldr	r3, [pc, #16]	; (1c8b0 <vTaskInternalSetTimeOutState+0x24>)
   1c89e:	681a      	ldr	r2, [r3, #0]
   1c8a0:	687b      	ldr	r3, [r7, #4]
   1c8a2:	605a      	str	r2, [r3, #4]
}
   1c8a4:	46c0      	nop			; (mov r8, r8)
   1c8a6:	46bd      	mov	sp, r7
   1c8a8:	b002      	add	sp, #8
   1c8aa:	bd80      	pop	{r7, pc}
   1c8ac:	20003bec 	.word	0x20003bec
   1c8b0:	20003bd8 	.word	0x20003bd8

0001c8b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
   1c8b4:	b580      	push	{r7, lr}
   1c8b6:	b086      	sub	sp, #24
   1c8b8:	af00      	add	r7, sp, #0
   1c8ba:	6078      	str	r0, [r7, #4]
   1c8bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
   1c8be:	687b      	ldr	r3, [r7, #4]
   1c8c0:	2b00      	cmp	r3, #0
   1c8c2:	d101      	bne.n	1c8c8 <xTaskCheckForTimeOut+0x14>
   1c8c4:	b672      	cpsid	i
   1c8c6:	e7fe      	b.n	1c8c6 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
   1c8c8:	683b      	ldr	r3, [r7, #0]
   1c8ca:	2b00      	cmp	r3, #0
   1c8cc:	d101      	bne.n	1c8d2 <xTaskCheckForTimeOut+0x1e>
   1c8ce:	b672      	cpsid	i
   1c8d0:	e7fe      	b.n	1c8d0 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
   1c8d2:	4b1e      	ldr	r3, [pc, #120]	; (1c94c <xTaskCheckForTimeOut+0x98>)
   1c8d4:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
   1c8d6:	4b1e      	ldr	r3, [pc, #120]	; (1c950 <xTaskCheckForTimeOut+0x9c>)
   1c8d8:	681b      	ldr	r3, [r3, #0]
   1c8da:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   1c8dc:	687b      	ldr	r3, [r7, #4]
   1c8de:	685b      	ldr	r3, [r3, #4]
   1c8e0:	693a      	ldr	r2, [r7, #16]
   1c8e2:	1ad3      	subs	r3, r2, r3
   1c8e4:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
   1c8e6:	683b      	ldr	r3, [r7, #0]
   1c8e8:	681b      	ldr	r3, [r3, #0]
   1c8ea:	3301      	adds	r3, #1
   1c8ec:	d102      	bne.n	1c8f4 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
   1c8ee:	2300      	movs	r3, #0
   1c8f0:	617b      	str	r3, [r7, #20]
   1c8f2:	e024      	b.n	1c93e <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   1c8f4:	687b      	ldr	r3, [r7, #4]
   1c8f6:	681a      	ldr	r2, [r3, #0]
   1c8f8:	4b16      	ldr	r3, [pc, #88]	; (1c954 <xTaskCheckForTimeOut+0xa0>)
   1c8fa:	681b      	ldr	r3, [r3, #0]
   1c8fc:	429a      	cmp	r2, r3
   1c8fe:	d007      	beq.n	1c910 <xTaskCheckForTimeOut+0x5c>
   1c900:	687b      	ldr	r3, [r7, #4]
   1c902:	685a      	ldr	r2, [r3, #4]
   1c904:	693b      	ldr	r3, [r7, #16]
   1c906:	429a      	cmp	r2, r3
   1c908:	d802      	bhi.n	1c910 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
   1c90a:	2301      	movs	r3, #1
   1c90c:	617b      	str	r3, [r7, #20]
   1c90e:	e016      	b.n	1c93e <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
   1c910:	683b      	ldr	r3, [r7, #0]
   1c912:	681a      	ldr	r2, [r3, #0]
   1c914:	68fb      	ldr	r3, [r7, #12]
   1c916:	429a      	cmp	r2, r3
   1c918:	d90c      	bls.n	1c934 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
   1c91a:	683b      	ldr	r3, [r7, #0]
   1c91c:	681a      	ldr	r2, [r3, #0]
   1c91e:	68fb      	ldr	r3, [r7, #12]
   1c920:	1ad2      	subs	r2, r2, r3
   1c922:	683b      	ldr	r3, [r7, #0]
   1c924:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
   1c926:	687b      	ldr	r3, [r7, #4]
   1c928:	0018      	movs	r0, r3
   1c92a:	4b0b      	ldr	r3, [pc, #44]	; (1c958 <xTaskCheckForTimeOut+0xa4>)
   1c92c:	4798      	blx	r3
			xReturn = pdFALSE;
   1c92e:	2300      	movs	r3, #0
   1c930:	617b      	str	r3, [r7, #20]
   1c932:	e004      	b.n	1c93e <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
   1c934:	683b      	ldr	r3, [r7, #0]
   1c936:	2200      	movs	r2, #0
   1c938:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
   1c93a:	2301      	movs	r3, #1
   1c93c:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
   1c93e:	4b07      	ldr	r3, [pc, #28]	; (1c95c <xTaskCheckForTimeOut+0xa8>)
   1c940:	4798      	blx	r3

	return xReturn;
   1c942:	697b      	ldr	r3, [r7, #20]
}
   1c944:	0018      	movs	r0, r3
   1c946:	46bd      	mov	sp, r7
   1c948:	b006      	add	sp, #24
   1c94a:	bd80      	pop	{r7, pc}
   1c94c:	00019eb9 	.word	0x00019eb9
   1c950:	20003bd8 	.word	0x20003bd8
   1c954:	20003bec 	.word	0x20003bec
   1c958:	0001c88d 	.word	0x0001c88d
   1c95c:	00019edd 	.word	0x00019edd

0001c960 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
   1c960:	b580      	push	{r7, lr}
   1c962:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
   1c964:	4b02      	ldr	r3, [pc, #8]	; (1c970 <vTaskMissedYield+0x10>)
   1c966:	2201      	movs	r2, #1
   1c968:	601a      	str	r2, [r3, #0]
}
   1c96a:	46c0      	nop			; (mov r8, r8)
   1c96c:	46bd      	mov	sp, r7
   1c96e:	bd80      	pop	{r7, pc}
   1c970:	20003be8 	.word	0x20003be8

0001c974 <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
	{
   1c974:	b580      	push	{r7, lr}
   1c976:	b084      	sub	sp, #16
   1c978:	af00      	add	r7, sp, #0
   1c97a:	6078      	str	r0, [r7, #4]
	UBaseType_t uxReturn;
	TCB_t *pxTCB;

		if( xTask != NULL )
   1c97c:	687b      	ldr	r3, [r7, #4]
   1c97e:	2b00      	cmp	r3, #0
   1c980:	d005      	beq.n	1c98e <uxTaskGetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
   1c982:	687b      	ldr	r3, [r7, #4]
   1c984:	60bb      	str	r3, [r7, #8]
			uxReturn = pxTCB->uxTaskNumber;
   1c986:	68bb      	ldr	r3, [r7, #8]
   1c988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c98a:	60fb      	str	r3, [r7, #12]
   1c98c:	e001      	b.n	1c992 <uxTaskGetTaskNumber+0x1e>
		}
		else
		{
			uxReturn = 0U;
   1c98e:	2300      	movs	r3, #0
   1c990:	60fb      	str	r3, [r7, #12]
		}

		return uxReturn;
   1c992:	68fb      	ldr	r3, [r7, #12]
	}
   1c994:	0018      	movs	r0, r3
   1c996:	46bd      	mov	sp, r7
   1c998:	b004      	add	sp, #16
   1c99a:	bd80      	pop	{r7, pc}

0001c99c <vTaskSetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
	{
   1c99c:	b580      	push	{r7, lr}
   1c99e:	b084      	sub	sp, #16
   1c9a0:	af00      	add	r7, sp, #0
   1c9a2:	6078      	str	r0, [r7, #4]
   1c9a4:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;

		if( xTask != NULL )
   1c9a6:	687b      	ldr	r3, [r7, #4]
   1c9a8:	2b00      	cmp	r3, #0
   1c9aa:	d004      	beq.n	1c9b6 <vTaskSetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
   1c9ac:	687b      	ldr	r3, [r7, #4]
   1c9ae:	60fb      	str	r3, [r7, #12]
			pxTCB->uxTaskNumber = uxHandle;
   1c9b0:	68fb      	ldr	r3, [r7, #12]
   1c9b2:	683a      	ldr	r2, [r7, #0]
   1c9b4:	641a      	str	r2, [r3, #64]	; 0x40
		}
	}
   1c9b6:	46c0      	nop			; (mov r8, r8)
   1c9b8:	46bd      	mov	sp, r7
   1c9ba:	b004      	add	sp, #16
   1c9bc:	bd80      	pop	{r7, pc}
	...

0001c9c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   1c9c0:	b580      	push	{r7, lr}
   1c9c2:	b082      	sub	sp, #8
   1c9c4:	af00      	add	r7, sp, #0
   1c9c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
   1c9c8:	4b04      	ldr	r3, [pc, #16]	; (1c9dc <prvIdleTask+0x1c>)
   1c9ca:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   1c9cc:	4b04      	ldr	r3, [pc, #16]	; (1c9e0 <prvIdleTask+0x20>)
   1c9ce:	681b      	ldr	r3, [r3, #0]
   1c9d0:	2b01      	cmp	r3, #1
   1c9d2:	d9f9      	bls.n	1c9c8 <prvIdleTask+0x8>
			{
				taskYIELD();
   1c9d4:	4b03      	ldr	r3, [pc, #12]	; (1c9e4 <prvIdleTask+0x24>)
   1c9d6:	4798      	blx	r3
		prvCheckTasksWaitingTermination();
   1c9d8:	e7f6      	b.n	1c9c8 <prvIdleTask+0x8>
   1c9da:	46c0      	nop			; (mov r8, r8)
   1c9dc:	0001ca75 	.word	0x0001ca75
   1c9e0:	20003b00 	.word	0x20003b00
   1c9e4:	00019ea1 	.word	0x00019ea1

0001c9e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
   1c9e8:	b580      	push	{r7, lr}
   1c9ea:	b082      	sub	sp, #8
   1c9ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   1c9ee:	2300      	movs	r3, #0
   1c9f0:	607b      	str	r3, [r7, #4]
   1c9f2:	e00c      	b.n	1ca0e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   1c9f4:	687a      	ldr	r2, [r7, #4]
   1c9f6:	0013      	movs	r3, r2
   1c9f8:	009b      	lsls	r3, r3, #2
   1c9fa:	189b      	adds	r3, r3, r2
   1c9fc:	009b      	lsls	r3, r3, #2
   1c9fe:	4a14      	ldr	r2, [pc, #80]	; (1ca50 <prvInitialiseTaskLists+0x68>)
   1ca00:	189b      	adds	r3, r3, r2
   1ca02:	0018      	movs	r0, r3
   1ca04:	4b13      	ldr	r3, [pc, #76]	; (1ca54 <prvInitialiseTaskLists+0x6c>)
   1ca06:	4798      	blx	r3
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   1ca08:	687b      	ldr	r3, [r7, #4]
   1ca0a:	3301      	adds	r3, #1
   1ca0c:	607b      	str	r3, [r7, #4]
   1ca0e:	687b      	ldr	r3, [r7, #4]
   1ca10:	2b04      	cmp	r3, #4
   1ca12:	d9ef      	bls.n	1c9f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
   1ca14:	4b10      	ldr	r3, [pc, #64]	; (1ca58 <prvInitialiseTaskLists+0x70>)
   1ca16:	0018      	movs	r0, r3
   1ca18:	4b0e      	ldr	r3, [pc, #56]	; (1ca54 <prvInitialiseTaskLists+0x6c>)
   1ca1a:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
   1ca1c:	4b0f      	ldr	r3, [pc, #60]	; (1ca5c <prvInitialiseTaskLists+0x74>)
   1ca1e:	0018      	movs	r0, r3
   1ca20:	4b0c      	ldr	r3, [pc, #48]	; (1ca54 <prvInitialiseTaskLists+0x6c>)
   1ca22:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
   1ca24:	4b0e      	ldr	r3, [pc, #56]	; (1ca60 <prvInitialiseTaskLists+0x78>)
   1ca26:	0018      	movs	r0, r3
   1ca28:	4b0a      	ldr	r3, [pc, #40]	; (1ca54 <prvInitialiseTaskLists+0x6c>)
   1ca2a:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
   1ca2c:	4b0d      	ldr	r3, [pc, #52]	; (1ca64 <prvInitialiseTaskLists+0x7c>)
   1ca2e:	0018      	movs	r0, r3
   1ca30:	4b08      	ldr	r3, [pc, #32]	; (1ca54 <prvInitialiseTaskLists+0x6c>)
   1ca32:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
   1ca34:	4b0c      	ldr	r3, [pc, #48]	; (1ca68 <prvInitialiseTaskLists+0x80>)
   1ca36:	0018      	movs	r0, r3
   1ca38:	4b06      	ldr	r3, [pc, #24]	; (1ca54 <prvInitialiseTaskLists+0x6c>)
   1ca3a:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   1ca3c:	4b0b      	ldr	r3, [pc, #44]	; (1ca6c <prvInitialiseTaskLists+0x84>)
   1ca3e:	4a06      	ldr	r2, [pc, #24]	; (1ca58 <prvInitialiseTaskLists+0x70>)
   1ca40:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   1ca42:	4b0b      	ldr	r3, [pc, #44]	; (1ca70 <prvInitialiseTaskLists+0x88>)
   1ca44:	4a05      	ldr	r2, [pc, #20]	; (1ca5c <prvInitialiseTaskLists+0x74>)
   1ca46:	601a      	str	r2, [r3, #0]
}
   1ca48:	46c0      	nop			; (mov r8, r8)
   1ca4a:	46bd      	mov	sp, r7
   1ca4c:	b002      	add	sp, #8
   1ca4e:	bd80      	pop	{r7, pc}
   1ca50:	20003b00 	.word	0x20003b00
   1ca54:	00019c31 	.word	0x00019c31
   1ca58:	20003b64 	.word	0x20003b64
   1ca5c:	20003b78 	.word	0x20003b78
   1ca60:	20003b94 	.word	0x20003b94
   1ca64:	20003ba8 	.word	0x20003ba8
   1ca68:	20003bc0 	.word	0x20003bc0
   1ca6c:	20003b8c 	.word	0x20003b8c
   1ca70:	20003b90 	.word	0x20003b90

0001ca74 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   1ca74:	b580      	push	{r7, lr}
   1ca76:	b082      	sub	sp, #8
   1ca78:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   1ca7a:	e01a      	b.n	1cab2 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
   1ca7c:	4b11      	ldr	r3, [pc, #68]	; (1cac4 <prvCheckTasksWaitingTermination+0x50>)
   1ca7e:	4798      	blx	r3
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   1ca80:	4b11      	ldr	r3, [pc, #68]	; (1cac8 <prvCheckTasksWaitingTermination+0x54>)
   1ca82:	68db      	ldr	r3, [r3, #12]
   1ca84:	68db      	ldr	r3, [r3, #12]
   1ca86:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1ca88:	687b      	ldr	r3, [r7, #4]
   1ca8a:	3304      	adds	r3, #4
   1ca8c:	0018      	movs	r0, r3
   1ca8e:	4b0f      	ldr	r3, [pc, #60]	; (1cacc <prvCheckTasksWaitingTermination+0x58>)
   1ca90:	4798      	blx	r3
				--uxCurrentNumberOfTasks;
   1ca92:	4b0f      	ldr	r3, [pc, #60]	; (1cad0 <prvCheckTasksWaitingTermination+0x5c>)
   1ca94:	681b      	ldr	r3, [r3, #0]
   1ca96:	1e5a      	subs	r2, r3, #1
   1ca98:	4b0d      	ldr	r3, [pc, #52]	; (1cad0 <prvCheckTasksWaitingTermination+0x5c>)
   1ca9a:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
   1ca9c:	4b0d      	ldr	r3, [pc, #52]	; (1cad4 <prvCheckTasksWaitingTermination+0x60>)
   1ca9e:	681b      	ldr	r3, [r3, #0]
   1caa0:	1e5a      	subs	r2, r3, #1
   1caa2:	4b0c      	ldr	r3, [pc, #48]	; (1cad4 <prvCheckTasksWaitingTermination+0x60>)
   1caa4:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
   1caa6:	4b0c      	ldr	r3, [pc, #48]	; (1cad8 <prvCheckTasksWaitingTermination+0x64>)
   1caa8:	4798      	blx	r3

			prvDeleteTCB( pxTCB );
   1caaa:	687b      	ldr	r3, [r7, #4]
   1caac:	0018      	movs	r0, r3
   1caae:	4b0b      	ldr	r3, [pc, #44]	; (1cadc <prvCheckTasksWaitingTermination+0x68>)
   1cab0:	4798      	blx	r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   1cab2:	4b08      	ldr	r3, [pc, #32]	; (1cad4 <prvCheckTasksWaitingTermination+0x60>)
   1cab4:	681b      	ldr	r3, [r3, #0]
   1cab6:	2b00      	cmp	r3, #0
   1cab8:	d1e0      	bne.n	1ca7c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
   1caba:	46c0      	nop			; (mov r8, r8)
   1cabc:	46bd      	mov	sp, r7
   1cabe:	b002      	add	sp, #8
   1cac0:	bd80      	pop	{r7, pc}
   1cac2:	46c0      	nop			; (mov r8, r8)
   1cac4:	00019eb9 	.word	0x00019eb9
   1cac8:	20003ba8 	.word	0x20003ba8
   1cacc:	00019d33 	.word	0x00019d33
   1cad0:	20003bd4 	.word	0x20003bd4
   1cad4:	20003bbc 	.word	0x20003bbc
   1cad8:	00019edd 	.word	0x00019edd
   1cadc:	0001cb51 	.word	0x0001cb51

0001cae0 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
   1cae0:	b580      	push	{r7, lr}
   1cae2:	b084      	sub	sp, #16
   1cae4:	af00      	add	r7, sp, #0
   1cae6:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
   1cae8:	2300      	movs	r3, #0
   1caea:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
   1caec:	e005      	b.n	1cafa <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
   1caee:	687b      	ldr	r3, [r7, #4]
   1caf0:	3301      	adds	r3, #1
   1caf2:	607b      	str	r3, [r7, #4]
			ulCount++;
   1caf4:	68fb      	ldr	r3, [r7, #12]
   1caf6:	3301      	adds	r3, #1
   1caf8:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
   1cafa:	687b      	ldr	r3, [r7, #4]
   1cafc:	781b      	ldrb	r3, [r3, #0]
   1cafe:	2ba5      	cmp	r3, #165	; 0xa5
   1cb00:	d0f5      	beq.n	1caee <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
   1cb02:	68fb      	ldr	r3, [r7, #12]
   1cb04:	089b      	lsrs	r3, r3, #2
   1cb06:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
   1cb08:	68fb      	ldr	r3, [r7, #12]
   1cb0a:	b29b      	uxth	r3, r3
	}
   1cb0c:	0018      	movs	r0, r3
   1cb0e:	46bd      	mov	sp, r7
   1cb10:	b004      	add	sp, #16
   1cb12:	bd80      	pop	{r7, pc}

0001cb14 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
   1cb14:	b580      	push	{r7, lr}
   1cb16:	b086      	sub	sp, #24
   1cb18:	af00      	add	r7, sp, #0
   1cb1a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
   1cb1c:	687b      	ldr	r3, [r7, #4]
   1cb1e:	2b00      	cmp	r3, #0
   1cb20:	d102      	bne.n	1cb28 <uxTaskGetStackHighWaterMark+0x14>
   1cb22:	4b09      	ldr	r3, [pc, #36]	; (1cb48 <uxTaskGetStackHighWaterMark+0x34>)
   1cb24:	681b      	ldr	r3, [r3, #0]
   1cb26:	e000      	b.n	1cb2a <uxTaskGetStackHighWaterMark+0x16>
   1cb28:	687b      	ldr	r3, [r7, #4]
   1cb2a:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
   1cb2c:	697b      	ldr	r3, [r7, #20]
   1cb2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1cb30:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
   1cb32:	693b      	ldr	r3, [r7, #16]
   1cb34:	0018      	movs	r0, r3
   1cb36:	4b05      	ldr	r3, [pc, #20]	; (1cb4c <uxTaskGetStackHighWaterMark+0x38>)
   1cb38:	4798      	blx	r3
   1cb3a:	0003      	movs	r3, r0
   1cb3c:	60fb      	str	r3, [r7, #12]

		return uxReturn;
   1cb3e:	68fb      	ldr	r3, [r7, #12]
	}
   1cb40:	0018      	movs	r0, r3
   1cb42:	46bd      	mov	sp, r7
   1cb44:	b006      	add	sp, #24
   1cb46:	bd80      	pop	{r7, pc}
   1cb48:	20003afc 	.word	0x20003afc
   1cb4c:	0001cae1 	.word	0x0001cae1

0001cb50 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
   1cb50:	b580      	push	{r7, lr}
   1cb52:	b082      	sub	sp, #8
   1cb54:	af00      	add	r7, sp, #0
   1cb56:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
   1cb58:	687b      	ldr	r3, [r7, #4]
   1cb5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1cb5c:	0018      	movs	r0, r3
   1cb5e:	4b05      	ldr	r3, [pc, #20]	; (1cb74 <prvDeleteTCB+0x24>)
   1cb60:	4798      	blx	r3
			vPortFree( pxTCB );
   1cb62:	687b      	ldr	r3, [r7, #4]
   1cb64:	0018      	movs	r0, r3
   1cb66:	4b03      	ldr	r3, [pc, #12]	; (1cb74 <prvDeleteTCB+0x24>)
   1cb68:	4798      	blx	r3
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
   1cb6a:	46c0      	nop			; (mov r8, r8)
   1cb6c:	46bd      	mov	sp, r7
   1cb6e:	b002      	add	sp, #8
   1cb70:	bd80      	pop	{r7, pc}
   1cb72:	46c0      	nop			; (mov r8, r8)
   1cb74:	0001a0b5 	.word	0x0001a0b5

0001cb78 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
   1cb78:	b580      	push	{r7, lr}
   1cb7a:	b082      	sub	sp, #8
   1cb7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1cb7e:	4b0e      	ldr	r3, [pc, #56]	; (1cbb8 <prvResetNextTaskUnblockTime+0x40>)
   1cb80:	681b      	ldr	r3, [r3, #0]
   1cb82:	681b      	ldr	r3, [r3, #0]
   1cb84:	2b00      	cmp	r3, #0
   1cb86:	d101      	bne.n	1cb8c <prvResetNextTaskUnblockTime+0x14>
   1cb88:	2301      	movs	r3, #1
   1cb8a:	e000      	b.n	1cb8e <prvResetNextTaskUnblockTime+0x16>
   1cb8c:	2300      	movs	r3, #0
   1cb8e:	2b00      	cmp	r3, #0
   1cb90:	d004      	beq.n	1cb9c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
   1cb92:	4b0a      	ldr	r3, [pc, #40]	; (1cbbc <prvResetNextTaskUnblockTime+0x44>)
   1cb94:	2201      	movs	r2, #1
   1cb96:	4252      	negs	r2, r2
   1cb98:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
   1cb9a:	e008      	b.n	1cbae <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   1cb9c:	4b06      	ldr	r3, [pc, #24]	; (1cbb8 <prvResetNextTaskUnblockTime+0x40>)
   1cb9e:	681b      	ldr	r3, [r3, #0]
   1cba0:	68db      	ldr	r3, [r3, #12]
   1cba2:	68db      	ldr	r3, [r3, #12]
   1cba4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   1cba6:	687b      	ldr	r3, [r7, #4]
   1cba8:	685a      	ldr	r2, [r3, #4]
   1cbaa:	4b04      	ldr	r3, [pc, #16]	; (1cbbc <prvResetNextTaskUnblockTime+0x44>)
   1cbac:	601a      	str	r2, [r3, #0]
}
   1cbae:	46c0      	nop			; (mov r8, r8)
   1cbb0:	46bd      	mov	sp, r7
   1cbb2:	b002      	add	sp, #8
   1cbb4:	bd80      	pop	{r7, pc}
   1cbb6:	46c0      	nop			; (mov r8, r8)
   1cbb8:	20003b8c 	.word	0x20003b8c
   1cbbc:	20003bf4 	.word	0x20003bf4

0001cbc0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
   1cbc0:	b580      	push	{r7, lr}
   1cbc2:	b082      	sub	sp, #8
   1cbc4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   1cbc6:	4b04      	ldr	r3, [pc, #16]	; (1cbd8 <xTaskGetCurrentTaskHandle+0x18>)
   1cbc8:	681b      	ldr	r3, [r3, #0]
   1cbca:	607b      	str	r3, [r7, #4]

		return xReturn;
   1cbcc:	687b      	ldr	r3, [r7, #4]
	}
   1cbce:	0018      	movs	r0, r3
   1cbd0:	46bd      	mov	sp, r7
   1cbd2:	b002      	add	sp, #8
   1cbd4:	bd80      	pop	{r7, pc}
   1cbd6:	46c0      	nop			; (mov r8, r8)
   1cbd8:	20003afc 	.word	0x20003afc

0001cbdc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
   1cbdc:	b580      	push	{r7, lr}
   1cbde:	b082      	sub	sp, #8
   1cbe0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
   1cbe2:	4b0a      	ldr	r3, [pc, #40]	; (1cc0c <xTaskGetSchedulerState+0x30>)
   1cbe4:	681b      	ldr	r3, [r3, #0]
   1cbe6:	2b00      	cmp	r3, #0
   1cbe8:	d102      	bne.n	1cbf0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   1cbea:	2301      	movs	r3, #1
   1cbec:	607b      	str	r3, [r7, #4]
   1cbee:	e008      	b.n	1cc02 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1cbf0:	4b07      	ldr	r3, [pc, #28]	; (1cc10 <xTaskGetSchedulerState+0x34>)
   1cbf2:	681b      	ldr	r3, [r3, #0]
   1cbf4:	2b00      	cmp	r3, #0
   1cbf6:	d102      	bne.n	1cbfe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
   1cbf8:	2302      	movs	r3, #2
   1cbfa:	607b      	str	r3, [r7, #4]
   1cbfc:	e001      	b.n	1cc02 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   1cbfe:	2300      	movs	r3, #0
   1cc00:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
   1cc02:	687b      	ldr	r3, [r7, #4]
	}
   1cc04:	0018      	movs	r0, r3
   1cc06:	46bd      	mov	sp, r7
   1cc08:	b002      	add	sp, #8
   1cc0a:	bd80      	pop	{r7, pc}
   1cc0c:	20003be0 	.word	0x20003be0
   1cc10:	20003bfc 	.word	0x20003bfc

0001cc14 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
   1cc14:	b590      	push	{r4, r7, lr}
   1cc16:	b085      	sub	sp, #20
   1cc18:	af00      	add	r7, sp, #0
   1cc1a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
   1cc1c:	687b      	ldr	r3, [r7, #4]
   1cc1e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   1cc20:	2300      	movs	r3, #0
   1cc22:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
   1cc24:	687b      	ldr	r3, [r7, #4]
   1cc26:	2b00      	cmp	r3, #0
   1cc28:	d100      	bne.n	1cc2c <xTaskPriorityInherit+0x18>
   1cc2a:	e09d      	b.n	1cd68 <xTaskPriorityInherit+0x154>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
   1cc2c:	68bb      	ldr	r3, [r7, #8]
   1cc2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cc30:	4b50      	ldr	r3, [pc, #320]	; (1cd74 <xTaskPriorityInherit+0x160>)
   1cc32:	681b      	ldr	r3, [r3, #0]
   1cc34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1cc36:	429a      	cmp	r2, r3
   1cc38:	d300      	bcc.n	1cc3c <xTaskPriorityInherit+0x28>
   1cc3a:	e08c      	b.n	1cd56 <xTaskPriorityInherit+0x142>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   1cc3c:	68bb      	ldr	r3, [r7, #8]
   1cc3e:	699b      	ldr	r3, [r3, #24]
   1cc40:	2b00      	cmp	r3, #0
   1cc42:	db06      	blt.n	1cc52 <xTaskPriorityInherit+0x3e>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1cc44:	4b4b      	ldr	r3, [pc, #300]	; (1cd74 <xTaskPriorityInherit+0x160>)
   1cc46:	681b      	ldr	r3, [r3, #0]
   1cc48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1cc4a:	2205      	movs	r2, #5
   1cc4c:	1ad2      	subs	r2, r2, r3
   1cc4e:	68bb      	ldr	r3, [r7, #8]
   1cc50:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
   1cc52:	68bb      	ldr	r3, [r7, #8]
   1cc54:	6959      	ldr	r1, [r3, #20]
   1cc56:	68bb      	ldr	r3, [r7, #8]
   1cc58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cc5a:	0013      	movs	r3, r2
   1cc5c:	009b      	lsls	r3, r3, #2
   1cc5e:	189b      	adds	r3, r3, r2
   1cc60:	009b      	lsls	r3, r3, #2
   1cc62:	4a45      	ldr	r2, [pc, #276]	; (1cd78 <xTaskPriorityInherit+0x164>)
   1cc64:	189b      	adds	r3, r3, r2
   1cc66:	4299      	cmp	r1, r3
   1cc68:	d101      	bne.n	1cc6e <xTaskPriorityInherit+0x5a>
   1cc6a:	2301      	movs	r3, #1
   1cc6c:	e000      	b.n	1cc70 <xTaskPriorityInherit+0x5c>
   1cc6e:	2300      	movs	r3, #0
   1cc70:	2b00      	cmp	r3, #0
   1cc72:	d037      	beq.n	1cce4 <xTaskPriorityInherit+0xd0>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1cc74:	68bb      	ldr	r3, [r7, #8]
   1cc76:	3304      	adds	r3, #4
   1cc78:	0018      	movs	r0, r3
   1cc7a:	4b40      	ldr	r3, [pc, #256]	; (1cd7c <xTaskPriorityInherit+0x168>)
   1cc7c:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   1cc7e:	4b3d      	ldr	r3, [pc, #244]	; (1cd74 <xTaskPriorityInherit+0x160>)
   1cc80:	681b      	ldr	r3, [r3, #0]
   1cc82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cc84:	68bb      	ldr	r3, [r7, #8]
   1cc86:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
   1cc88:	68bb      	ldr	r3, [r7, #8]
   1cc8a:	0018      	movs	r0, r3
   1cc8c:	4b3c      	ldr	r3, [pc, #240]	; (1cd80 <xTaskPriorityInherit+0x16c>)
   1cc8e:	4798      	blx	r3
   1cc90:	0003      	movs	r3, r0
   1cc92:	001a      	movs	r2, r3
   1cc94:	4b3b      	ldr	r3, [pc, #236]	; (1cd84 <xTaskPriorityInherit+0x170>)
   1cc96:	881b      	ldrh	r3, [r3, #0]
   1cc98:	4013      	ands	r3, r2
   1cc9a:	b29b      	uxth	r3, r3
   1cc9c:	2b00      	cmp	r3, #0
   1cc9e:	d008      	beq.n	1ccb2 <xTaskPriorityInherit+0x9e>
   1cca0:	68bb      	ldr	r3, [r7, #8]
   1cca2:	0018      	movs	r0, r3
   1cca4:	4b38      	ldr	r3, [pc, #224]	; (1cd88 <xTaskPriorityInherit+0x174>)
   1cca6:	4798      	blx	r3
   1cca8:	0003      	movs	r3, r0
   1ccaa:	b2db      	uxtb	r3, r3
   1ccac:	0018      	movs	r0, r3
   1ccae:	4b37      	ldr	r3, [pc, #220]	; (1cd8c <xTaskPriorityInherit+0x178>)
   1ccb0:	4798      	blx	r3
   1ccb2:	68bb      	ldr	r3, [r7, #8]
   1ccb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ccb6:	4b36      	ldr	r3, [pc, #216]	; (1cd90 <xTaskPriorityInherit+0x17c>)
   1ccb8:	681b      	ldr	r3, [r3, #0]
   1ccba:	429a      	cmp	r2, r3
   1ccbc:	d903      	bls.n	1ccc6 <xTaskPriorityInherit+0xb2>
   1ccbe:	68bb      	ldr	r3, [r7, #8]
   1ccc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ccc2:	4b33      	ldr	r3, [pc, #204]	; (1cd90 <xTaskPriorityInherit+0x17c>)
   1ccc4:	601a      	str	r2, [r3, #0]
   1ccc6:	68bb      	ldr	r3, [r7, #8]
   1ccc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ccca:	0013      	movs	r3, r2
   1cccc:	009b      	lsls	r3, r3, #2
   1ccce:	189b      	adds	r3, r3, r2
   1ccd0:	009b      	lsls	r3, r3, #2
   1ccd2:	4a29      	ldr	r2, [pc, #164]	; (1cd78 <xTaskPriorityInherit+0x164>)
   1ccd4:	189a      	adds	r2, r3, r2
   1ccd6:	68bb      	ldr	r3, [r7, #8]
   1ccd8:	3304      	adds	r3, #4
   1ccda:	0019      	movs	r1, r3
   1ccdc:	0010      	movs	r0, r2
   1ccde:	4b2d      	ldr	r3, [pc, #180]	; (1cd94 <xTaskPriorityInherit+0x180>)
   1cce0:	4798      	blx	r3
   1cce2:	e004      	b.n	1ccee <xTaskPriorityInherit+0xda>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   1cce4:	4b23      	ldr	r3, [pc, #140]	; (1cd74 <xTaskPriorityInherit+0x160>)
   1cce6:	681b      	ldr	r3, [r3, #0]
   1cce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ccea:	68bb      	ldr	r3, [r7, #8]
   1ccec:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
   1ccee:	68bb      	ldr	r3, [r7, #8]
   1ccf0:	0018      	movs	r0, r3
   1ccf2:	4b23      	ldr	r3, [pc, #140]	; (1cd80 <xTaskPriorityInherit+0x16c>)
   1ccf4:	4798      	blx	r3
   1ccf6:	0003      	movs	r3, r0
   1ccf8:	001a      	movs	r2, r3
   1ccfa:	4b22      	ldr	r3, [pc, #136]	; (1cd84 <xTaskPriorityInherit+0x170>)
   1ccfc:	881b      	ldrh	r3, [r3, #0]
   1ccfe:	4013      	ands	r3, r2
   1cd00:	b29b      	uxth	r3, r3
   1cd02:	2b00      	cmp	r3, #0
   1cd04:	d024      	beq.n	1cd50 <xTaskPriorityInherit+0x13c>
   1cd06:	68bb      	ldr	r3, [r7, #8]
   1cd08:	0018      	movs	r0, r3
   1cd0a:	4b1f      	ldr	r3, [pc, #124]	; (1cd88 <xTaskPriorityInherit+0x174>)
   1cd0c:	4798      	blx	r3
   1cd0e:	0003      	movs	r3, r0
   1cd10:	b2db      	uxtb	r3, r3
   1cd12:	001c      	movs	r4, r3
   1cd14:	68bb      	ldr	r3, [r7, #8]
   1cd16:	0018      	movs	r0, r3
   1cd18:	4b1b      	ldr	r3, [pc, #108]	; (1cd88 <xTaskPriorityInherit+0x174>)
   1cd1a:	4798      	blx	r3
   1cd1c:	0003      	movs	r3, r0
   1cd1e:	b2db      	uxtb	r3, r3
   1cd20:	0019      	movs	r1, r3
   1cd22:	2003      	movs	r0, #3
   1cd24:	4b1c      	ldr	r3, [pc, #112]	; (1cd98 <xTaskPriorityInherit+0x184>)
   1cd26:	4798      	blx	r3
   1cd28:	0003      	movs	r3, r0
   1cd2a:	0022      	movs	r2, r4
   1cd2c:	2103      	movs	r1, #3
   1cd2e:	208e      	movs	r0, #142	; 0x8e
   1cd30:	4c1a      	ldr	r4, [pc, #104]	; (1cd9c <xTaskPriorityInherit+0x188>)
   1cd32:	47a0      	blx	r4
   1cd34:	68bb      	ldr	r3, [r7, #8]
   1cd36:	0018      	movs	r0, r3
   1cd38:	4b13      	ldr	r3, [pc, #76]	; (1cd88 <xTaskPriorityInherit+0x174>)
   1cd3a:	4798      	blx	r3
   1cd3c:	0003      	movs	r3, r0
   1cd3e:	b2d9      	uxtb	r1, r3
   1cd40:	4b0c      	ldr	r3, [pc, #48]	; (1cd74 <xTaskPriorityInherit+0x160>)
   1cd42:	681b      	ldr	r3, [r3, #0]
   1cd44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1cd46:	b2db      	uxtb	r3, r3
   1cd48:	001a      	movs	r2, r3
   1cd4a:	2003      	movs	r0, #3
   1cd4c:	4b14      	ldr	r3, [pc, #80]	; (1cda0 <xTaskPriorityInherit+0x18c>)
   1cd4e:	4798      	blx	r3

				/* Inheritance occurred. */
				xReturn = pdTRUE;
   1cd50:	2301      	movs	r3, #1
   1cd52:	60fb      	str	r3, [r7, #12]
   1cd54:	e008      	b.n	1cd68 <xTaskPriorityInherit+0x154>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
   1cd56:	68bb      	ldr	r3, [r7, #8]
   1cd58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1cd5a:	4b06      	ldr	r3, [pc, #24]	; (1cd74 <xTaskPriorityInherit+0x160>)
   1cd5c:	681b      	ldr	r3, [r3, #0]
   1cd5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1cd60:	429a      	cmp	r2, r3
   1cd62:	d201      	bcs.n	1cd68 <xTaskPriorityInherit+0x154>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
   1cd64:	2301      	movs	r3, #1
   1cd66:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1cd68:	68fb      	ldr	r3, [r7, #12]
	}
   1cd6a:	0018      	movs	r0, r3
   1cd6c:	46bd      	mov	sp, r7
   1cd6e:	b005      	add	sp, #20
   1cd70:	bd90      	pop	{r4, r7, pc}
   1cd72:	46c0      	nop			; (mov r8, r8)
   1cd74:	20003afc 	.word	0x20003afc
   1cd78:	20003b00 	.word	0x20003b00
   1cd7c:	00019d33 	.word	0x00019d33
   1cd80:	00017eb9 	.word	0x00017eb9
   1cd84:	200000cc 	.word	0x200000cc
   1cd88:	00017e99 	.word	0x00017e99
   1cd8c:	00018669 	.word	0x00018669
   1cd90:	20003bdc 	.word	0x20003bdc
   1cd94:	00019c83 	.word	0x00019c83
   1cd98:	00018e71 	.word	0x00018e71
   1cd9c:	000189e1 	.word	0x000189e1
   1cda0:	00018dcd 	.word	0x00018dcd

0001cda4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
   1cda4:	b590      	push	{r4, r7, lr}
   1cda6:	b085      	sub	sp, #20
   1cda8:	af00      	add	r7, sp, #0
   1cdaa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   1cdac:	687b      	ldr	r3, [r7, #4]
   1cdae:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   1cdb0:	2300      	movs	r3, #0
   1cdb2:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   1cdb4:	687b      	ldr	r3, [r7, #4]
   1cdb6:	2b00      	cmp	r3, #0
   1cdb8:	d100      	bne.n	1cdbc <xTaskPriorityDisinherit+0x18>
   1cdba:	e089      	b.n	1ced0 <xTaskPriorityDisinherit+0x12c>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
   1cdbc:	4b47      	ldr	r3, [pc, #284]	; (1cedc <xTaskPriorityDisinherit+0x138>)
   1cdbe:	681b      	ldr	r3, [r3, #0]
   1cdc0:	68ba      	ldr	r2, [r7, #8]
   1cdc2:	429a      	cmp	r2, r3
   1cdc4:	d001      	beq.n	1cdca <xTaskPriorityDisinherit+0x26>
   1cdc6:	b672      	cpsid	i
   1cdc8:	e7fe      	b.n	1cdc8 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
   1cdca:	68bb      	ldr	r3, [r7, #8]
   1cdcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1cdce:	2b00      	cmp	r3, #0
   1cdd0:	d101      	bne.n	1cdd6 <xTaskPriorityDisinherit+0x32>
   1cdd2:	b672      	cpsid	i
   1cdd4:	e7fe      	b.n	1cdd4 <xTaskPriorityDisinherit+0x30>
			( pxTCB->uxMutexesHeld )--;
   1cdd6:	68bb      	ldr	r3, [r7, #8]
   1cdd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1cdda:	1e5a      	subs	r2, r3, #1
   1cddc:	68bb      	ldr	r3, [r7, #8]
   1cdde:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   1cde0:	68bb      	ldr	r3, [r7, #8]
   1cde2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cde4:	68bb      	ldr	r3, [r7, #8]
   1cde6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1cde8:	429a      	cmp	r2, r3
   1cdea:	d071      	beq.n	1ced0 <xTaskPriorityDisinherit+0x12c>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
   1cdec:	68bb      	ldr	r3, [r7, #8]
   1cdee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1cdf0:	2b00      	cmp	r3, #0
   1cdf2:	d16d      	bne.n	1ced0 <xTaskPriorityDisinherit+0x12c>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1cdf4:	68bb      	ldr	r3, [r7, #8]
   1cdf6:	3304      	adds	r3, #4
   1cdf8:	0018      	movs	r0, r3
   1cdfa:	4b39      	ldr	r3, [pc, #228]	; (1cee0 <xTaskPriorityDisinherit+0x13c>)
   1cdfc:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   1cdfe:	68bb      	ldr	r3, [r7, #8]
   1ce00:	0018      	movs	r0, r3
   1ce02:	4b38      	ldr	r3, [pc, #224]	; (1cee4 <xTaskPriorityDisinherit+0x140>)
   1ce04:	4798      	blx	r3
   1ce06:	0003      	movs	r3, r0
   1ce08:	001a      	movs	r2, r3
   1ce0a:	4b37      	ldr	r3, [pc, #220]	; (1cee8 <xTaskPriorityDisinherit+0x144>)
   1ce0c:	881b      	ldrh	r3, [r3, #0]
   1ce0e:	4013      	ands	r3, r2
   1ce10:	b29b      	uxth	r3, r3
   1ce12:	2b00      	cmp	r3, #0
   1ce14:	d023      	beq.n	1ce5e <xTaskPriorityDisinherit+0xba>
   1ce16:	68bb      	ldr	r3, [r7, #8]
   1ce18:	0018      	movs	r0, r3
   1ce1a:	4b34      	ldr	r3, [pc, #208]	; (1ceec <xTaskPriorityDisinherit+0x148>)
   1ce1c:	4798      	blx	r3
   1ce1e:	0003      	movs	r3, r0
   1ce20:	b2db      	uxtb	r3, r3
   1ce22:	001c      	movs	r4, r3
   1ce24:	68bb      	ldr	r3, [r7, #8]
   1ce26:	0018      	movs	r0, r3
   1ce28:	4b30      	ldr	r3, [pc, #192]	; (1ceec <xTaskPriorityDisinherit+0x148>)
   1ce2a:	4798      	blx	r3
   1ce2c:	0003      	movs	r3, r0
   1ce2e:	b2db      	uxtb	r3, r3
   1ce30:	0019      	movs	r1, r3
   1ce32:	2003      	movs	r0, #3
   1ce34:	4b2e      	ldr	r3, [pc, #184]	; (1cef0 <xTaskPriorityDisinherit+0x14c>)
   1ce36:	4798      	blx	r3
   1ce38:	0003      	movs	r3, r0
   1ce3a:	0022      	movs	r2, r4
   1ce3c:	2103      	movs	r1, #3
   1ce3e:	208f      	movs	r0, #143	; 0x8f
   1ce40:	4c2c      	ldr	r4, [pc, #176]	; (1cef4 <xTaskPriorityDisinherit+0x150>)
   1ce42:	47a0      	blx	r4
   1ce44:	68bb      	ldr	r3, [r7, #8]
   1ce46:	0018      	movs	r0, r3
   1ce48:	4b28      	ldr	r3, [pc, #160]	; (1ceec <xTaskPriorityDisinherit+0x148>)
   1ce4a:	4798      	blx	r3
   1ce4c:	0003      	movs	r3, r0
   1ce4e:	b2d9      	uxtb	r1, r3
   1ce50:	68bb      	ldr	r3, [r7, #8]
   1ce52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1ce54:	b2db      	uxtb	r3, r3
   1ce56:	001a      	movs	r2, r3
   1ce58:	2003      	movs	r0, #3
   1ce5a:	4b27      	ldr	r3, [pc, #156]	; (1cef8 <xTaskPriorityDisinherit+0x154>)
   1ce5c:	4798      	blx	r3
					pxTCB->uxPriority = pxTCB->uxBasePriority;
   1ce5e:	68bb      	ldr	r3, [r7, #8]
   1ce60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1ce62:	68bb      	ldr	r3, [r7, #8]
   1ce64:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1ce66:	68bb      	ldr	r3, [r7, #8]
   1ce68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1ce6a:	2205      	movs	r2, #5
   1ce6c:	1ad2      	subs	r2, r2, r3
   1ce6e:	68bb      	ldr	r3, [r7, #8]
   1ce70:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
   1ce72:	68bb      	ldr	r3, [r7, #8]
   1ce74:	0018      	movs	r0, r3
   1ce76:	4b1b      	ldr	r3, [pc, #108]	; (1cee4 <xTaskPriorityDisinherit+0x140>)
   1ce78:	4798      	blx	r3
   1ce7a:	0003      	movs	r3, r0
   1ce7c:	001a      	movs	r2, r3
   1ce7e:	4b1a      	ldr	r3, [pc, #104]	; (1cee8 <xTaskPriorityDisinherit+0x144>)
   1ce80:	881b      	ldrh	r3, [r3, #0]
   1ce82:	4013      	ands	r3, r2
   1ce84:	b29b      	uxth	r3, r3
   1ce86:	2b00      	cmp	r3, #0
   1ce88:	d008      	beq.n	1ce9c <xTaskPriorityDisinherit+0xf8>
   1ce8a:	68bb      	ldr	r3, [r7, #8]
   1ce8c:	0018      	movs	r0, r3
   1ce8e:	4b17      	ldr	r3, [pc, #92]	; (1ceec <xTaskPriorityDisinherit+0x148>)
   1ce90:	4798      	blx	r3
   1ce92:	0003      	movs	r3, r0
   1ce94:	b2db      	uxtb	r3, r3
   1ce96:	0018      	movs	r0, r3
   1ce98:	4b18      	ldr	r3, [pc, #96]	; (1cefc <xTaskPriorityDisinherit+0x158>)
   1ce9a:	4798      	blx	r3
   1ce9c:	68bb      	ldr	r3, [r7, #8]
   1ce9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cea0:	4b17      	ldr	r3, [pc, #92]	; (1cf00 <xTaskPriorityDisinherit+0x15c>)
   1cea2:	681b      	ldr	r3, [r3, #0]
   1cea4:	429a      	cmp	r2, r3
   1cea6:	d903      	bls.n	1ceb0 <xTaskPriorityDisinherit+0x10c>
   1cea8:	68bb      	ldr	r3, [r7, #8]
   1ceaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ceac:	4b14      	ldr	r3, [pc, #80]	; (1cf00 <xTaskPriorityDisinherit+0x15c>)
   1ceae:	601a      	str	r2, [r3, #0]
   1ceb0:	68bb      	ldr	r3, [r7, #8]
   1ceb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ceb4:	0013      	movs	r3, r2
   1ceb6:	009b      	lsls	r3, r3, #2
   1ceb8:	189b      	adds	r3, r3, r2
   1ceba:	009b      	lsls	r3, r3, #2
   1cebc:	4a11      	ldr	r2, [pc, #68]	; (1cf04 <xTaskPriorityDisinherit+0x160>)
   1cebe:	189a      	adds	r2, r3, r2
   1cec0:	68bb      	ldr	r3, [r7, #8]
   1cec2:	3304      	adds	r3, #4
   1cec4:	0019      	movs	r1, r3
   1cec6:	0010      	movs	r0, r2
   1cec8:	4b0f      	ldr	r3, [pc, #60]	; (1cf08 <xTaskPriorityDisinherit+0x164>)
   1ceca:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
   1cecc:	2301      	movs	r3, #1
   1cece:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1ced0:	68fb      	ldr	r3, [r7, #12]
	}
   1ced2:	0018      	movs	r0, r3
   1ced4:	46bd      	mov	sp, r7
   1ced6:	b005      	add	sp, #20
   1ced8:	bd90      	pop	{r4, r7, pc}
   1ceda:	46c0      	nop			; (mov r8, r8)
   1cedc:	20003afc 	.word	0x20003afc
   1cee0:	00019d33 	.word	0x00019d33
   1cee4:	00017eb9 	.word	0x00017eb9
   1cee8:	200000cc 	.word	0x200000cc
   1ceec:	00017e99 	.word	0x00017e99
   1cef0:	00018e71 	.word	0x00018e71
   1cef4:	000189e1 	.word	0x000189e1
   1cef8:	00018dcd 	.word	0x00018dcd
   1cefc:	00018669 	.word	0x00018669
   1cf00:	20003bdc 	.word	0x20003bdc
   1cf04:	20003b00 	.word	0x20003b00
   1cf08:	00019c83 	.word	0x00019c83

0001cf0c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
   1cf0c:	b590      	push	{r4, r7, lr}
   1cf0e:	b087      	sub	sp, #28
   1cf10:	af00      	add	r7, sp, #0
   1cf12:	6078      	str	r0, [r7, #4]
   1cf14:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   1cf16:	687b      	ldr	r3, [r7, #4]
   1cf18:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
   1cf1a:	2301      	movs	r3, #1
   1cf1c:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   1cf1e:	687b      	ldr	r3, [r7, #4]
   1cf20:	2b00      	cmp	r3, #0
   1cf22:	d100      	bne.n	1cf26 <vTaskPriorityDisinheritAfterTimeout+0x1a>
   1cf24:	e0a4      	b.n	1d070 <vTaskPriorityDisinheritAfterTimeout+0x164>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
   1cf26:	693b      	ldr	r3, [r7, #16]
   1cf28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1cf2a:	2b00      	cmp	r3, #0
   1cf2c:	d101      	bne.n	1cf32 <vTaskPriorityDisinheritAfterTimeout+0x26>
   1cf2e:	b672      	cpsid	i
   1cf30:	e7fe      	b.n	1cf30 <vTaskPriorityDisinheritAfterTimeout+0x24>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
   1cf32:	693b      	ldr	r3, [r7, #16]
   1cf34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1cf36:	683b      	ldr	r3, [r7, #0]
   1cf38:	429a      	cmp	r2, r3
   1cf3a:	d202      	bcs.n	1cf42 <vTaskPriorityDisinheritAfterTimeout+0x36>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
   1cf3c:	683b      	ldr	r3, [r7, #0]
   1cf3e:	617b      	str	r3, [r7, #20]
   1cf40:	e002      	b.n	1cf48 <vTaskPriorityDisinheritAfterTimeout+0x3c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
   1cf42:	693b      	ldr	r3, [r7, #16]
   1cf44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1cf46:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
   1cf48:	693b      	ldr	r3, [r7, #16]
   1cf4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cf4c:	697b      	ldr	r3, [r7, #20]
   1cf4e:	429a      	cmp	r2, r3
   1cf50:	d100      	bne.n	1cf54 <vTaskPriorityDisinheritAfterTimeout+0x48>
   1cf52:	e08d      	b.n	1d070 <vTaskPriorityDisinheritAfterTimeout+0x164>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
   1cf54:	693b      	ldr	r3, [r7, #16]
   1cf56:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1cf58:	68fb      	ldr	r3, [r7, #12]
   1cf5a:	429a      	cmp	r2, r3
   1cf5c:	d000      	beq.n	1cf60 <vTaskPriorityDisinheritAfterTimeout+0x54>
   1cf5e:	e087      	b.n	1d070 <vTaskPriorityDisinheritAfterTimeout+0x164>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
   1cf60:	4b45      	ldr	r3, [pc, #276]	; (1d078 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
   1cf62:	681b      	ldr	r3, [r3, #0]
   1cf64:	693a      	ldr	r2, [r7, #16]
   1cf66:	429a      	cmp	r2, r3
   1cf68:	d101      	bne.n	1cf6e <vTaskPriorityDisinheritAfterTimeout+0x62>
   1cf6a:	b672      	cpsid	i
   1cf6c:	e7fe      	b.n	1cf6c <vTaskPriorityDisinheritAfterTimeout+0x60>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   1cf6e:	693b      	ldr	r3, [r7, #16]
   1cf70:	0018      	movs	r0, r3
   1cf72:	4b42      	ldr	r3, [pc, #264]	; (1d07c <vTaskPriorityDisinheritAfterTimeout+0x170>)
   1cf74:	4798      	blx	r3
   1cf76:	0003      	movs	r3, r0
   1cf78:	001a      	movs	r2, r3
   1cf7a:	4b41      	ldr	r3, [pc, #260]	; (1d080 <vTaskPriorityDisinheritAfterTimeout+0x174>)
   1cf7c:	881b      	ldrh	r3, [r3, #0]
   1cf7e:	4013      	ands	r3, r2
   1cf80:	b29b      	uxth	r3, r3
   1cf82:	2b00      	cmp	r3, #0
   1cf84:	d023      	beq.n	1cfce <vTaskPriorityDisinheritAfterTimeout+0xc2>
   1cf86:	693b      	ldr	r3, [r7, #16]
   1cf88:	0018      	movs	r0, r3
   1cf8a:	4b3e      	ldr	r3, [pc, #248]	; (1d084 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1cf8c:	4798      	blx	r3
   1cf8e:	0003      	movs	r3, r0
   1cf90:	b2db      	uxtb	r3, r3
   1cf92:	001c      	movs	r4, r3
   1cf94:	693b      	ldr	r3, [r7, #16]
   1cf96:	0018      	movs	r0, r3
   1cf98:	4b3a      	ldr	r3, [pc, #232]	; (1d084 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1cf9a:	4798      	blx	r3
   1cf9c:	0003      	movs	r3, r0
   1cf9e:	b2db      	uxtb	r3, r3
   1cfa0:	0019      	movs	r1, r3
   1cfa2:	2003      	movs	r0, #3
   1cfa4:	4b38      	ldr	r3, [pc, #224]	; (1d088 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
   1cfa6:	4798      	blx	r3
   1cfa8:	0003      	movs	r3, r0
   1cfaa:	0022      	movs	r2, r4
   1cfac:	2103      	movs	r1, #3
   1cfae:	208f      	movs	r0, #143	; 0x8f
   1cfb0:	4c36      	ldr	r4, [pc, #216]	; (1d08c <vTaskPriorityDisinheritAfterTimeout+0x180>)
   1cfb2:	47a0      	blx	r4
   1cfb4:	693b      	ldr	r3, [r7, #16]
   1cfb6:	0018      	movs	r0, r3
   1cfb8:	4b32      	ldr	r3, [pc, #200]	; (1d084 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1cfba:	4798      	blx	r3
   1cfbc:	0003      	movs	r3, r0
   1cfbe:	b2d9      	uxtb	r1, r3
   1cfc0:	693b      	ldr	r3, [r7, #16]
   1cfc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1cfc4:	b2db      	uxtb	r3, r3
   1cfc6:	001a      	movs	r2, r3
   1cfc8:	2003      	movs	r0, #3
   1cfca:	4b31      	ldr	r3, [pc, #196]	; (1d090 <vTaskPriorityDisinheritAfterTimeout+0x184>)
   1cfcc:	4798      	blx	r3
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
   1cfce:	693b      	ldr	r3, [r7, #16]
   1cfd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1cfd2:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
   1cfd4:	693b      	ldr	r3, [r7, #16]
   1cfd6:	697a      	ldr	r2, [r7, #20]
   1cfd8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   1cfda:	693b      	ldr	r3, [r7, #16]
   1cfdc:	699b      	ldr	r3, [r3, #24]
   1cfde:	2b00      	cmp	r3, #0
   1cfe0:	db04      	blt.n	1cfec <vTaskPriorityDisinheritAfterTimeout+0xe0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1cfe2:	697b      	ldr	r3, [r7, #20]
   1cfe4:	2205      	movs	r2, #5
   1cfe6:	1ad2      	subs	r2, r2, r3
   1cfe8:	693b      	ldr	r3, [r7, #16]
   1cfea:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
   1cfec:	693b      	ldr	r3, [r7, #16]
   1cfee:	6959      	ldr	r1, [r3, #20]
   1cff0:	68ba      	ldr	r2, [r7, #8]
   1cff2:	0013      	movs	r3, r2
   1cff4:	009b      	lsls	r3, r3, #2
   1cff6:	189b      	adds	r3, r3, r2
   1cff8:	009b      	lsls	r3, r3, #2
   1cffa:	4a26      	ldr	r2, [pc, #152]	; (1d094 <vTaskPriorityDisinheritAfterTimeout+0x188>)
   1cffc:	189b      	adds	r3, r3, r2
   1cffe:	4299      	cmp	r1, r3
   1d000:	d101      	bne.n	1d006 <vTaskPriorityDisinheritAfterTimeout+0xfa>
   1d002:	2301      	movs	r3, #1
   1d004:	e000      	b.n	1d008 <vTaskPriorityDisinheritAfterTimeout+0xfc>
   1d006:	2300      	movs	r3, #0
   1d008:	2b00      	cmp	r3, #0
   1d00a:	d031      	beq.n	1d070 <vTaskPriorityDisinheritAfterTimeout+0x164>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1d00c:	693b      	ldr	r3, [r7, #16]
   1d00e:	3304      	adds	r3, #4
   1d010:	0018      	movs	r0, r3
   1d012:	4b21      	ldr	r3, [pc, #132]	; (1d098 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
   1d014:	4798      	blx	r3
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
   1d016:	693b      	ldr	r3, [r7, #16]
   1d018:	0018      	movs	r0, r3
   1d01a:	4b18      	ldr	r3, [pc, #96]	; (1d07c <vTaskPriorityDisinheritAfterTimeout+0x170>)
   1d01c:	4798      	blx	r3
   1d01e:	0003      	movs	r3, r0
   1d020:	001a      	movs	r2, r3
   1d022:	4b17      	ldr	r3, [pc, #92]	; (1d080 <vTaskPriorityDisinheritAfterTimeout+0x174>)
   1d024:	881b      	ldrh	r3, [r3, #0]
   1d026:	4013      	ands	r3, r2
   1d028:	b29b      	uxth	r3, r3
   1d02a:	2b00      	cmp	r3, #0
   1d02c:	d008      	beq.n	1d040 <vTaskPriorityDisinheritAfterTimeout+0x134>
   1d02e:	693b      	ldr	r3, [r7, #16]
   1d030:	0018      	movs	r0, r3
   1d032:	4b14      	ldr	r3, [pc, #80]	; (1d084 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1d034:	4798      	blx	r3
   1d036:	0003      	movs	r3, r0
   1d038:	b2db      	uxtb	r3, r3
   1d03a:	0018      	movs	r0, r3
   1d03c:	4b17      	ldr	r3, [pc, #92]	; (1d09c <vTaskPriorityDisinheritAfterTimeout+0x190>)
   1d03e:	4798      	blx	r3
   1d040:	693b      	ldr	r3, [r7, #16]
   1d042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d044:	4b16      	ldr	r3, [pc, #88]	; (1d0a0 <vTaskPriorityDisinheritAfterTimeout+0x194>)
   1d046:	681b      	ldr	r3, [r3, #0]
   1d048:	429a      	cmp	r2, r3
   1d04a:	d903      	bls.n	1d054 <vTaskPriorityDisinheritAfterTimeout+0x148>
   1d04c:	693b      	ldr	r3, [r7, #16]
   1d04e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d050:	4b13      	ldr	r3, [pc, #76]	; (1d0a0 <vTaskPriorityDisinheritAfterTimeout+0x194>)
   1d052:	601a      	str	r2, [r3, #0]
   1d054:	693b      	ldr	r3, [r7, #16]
   1d056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d058:	0013      	movs	r3, r2
   1d05a:	009b      	lsls	r3, r3, #2
   1d05c:	189b      	adds	r3, r3, r2
   1d05e:	009b      	lsls	r3, r3, #2
   1d060:	4a0c      	ldr	r2, [pc, #48]	; (1d094 <vTaskPriorityDisinheritAfterTimeout+0x188>)
   1d062:	189a      	adds	r2, r3, r2
   1d064:	693b      	ldr	r3, [r7, #16]
   1d066:	3304      	adds	r3, #4
   1d068:	0019      	movs	r1, r3
   1d06a:	0010      	movs	r0, r2
   1d06c:	4b0d      	ldr	r3, [pc, #52]	; (1d0a4 <vTaskPriorityDisinheritAfterTimeout+0x198>)
   1d06e:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1d070:	46c0      	nop			; (mov r8, r8)
   1d072:	46bd      	mov	sp, r7
   1d074:	b007      	add	sp, #28
   1d076:	bd90      	pop	{r4, r7, pc}
   1d078:	20003afc 	.word	0x20003afc
   1d07c:	00017eb9 	.word	0x00017eb9
   1d080:	200000cc 	.word	0x200000cc
   1d084:	00017e99 	.word	0x00017e99
   1d088:	00018e71 	.word	0x00018e71
   1d08c:	000189e1 	.word	0x000189e1
   1d090:	00018dcd 	.word	0x00018dcd
   1d094:	20003b00 	.word	0x20003b00
   1d098:	00019d33 	.word	0x00019d33
   1d09c:	00018669 	.word	0x00018669
   1d0a0:	20003bdc 	.word	0x20003bdc
   1d0a4:	00019c83 	.word	0x00019c83

0001d0a8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
   1d0a8:	b580      	push	{r7, lr}
   1d0aa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
   1d0ac:	4b06      	ldr	r3, [pc, #24]	; (1d0c8 <pvTaskIncrementMutexHeldCount+0x20>)
   1d0ae:	681b      	ldr	r3, [r3, #0]
   1d0b0:	2b00      	cmp	r3, #0
   1d0b2:	d004      	beq.n	1d0be <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
   1d0b4:	4b04      	ldr	r3, [pc, #16]	; (1d0c8 <pvTaskIncrementMutexHeldCount+0x20>)
   1d0b6:	681b      	ldr	r3, [r3, #0]
   1d0b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1d0ba:	3201      	adds	r2, #1
   1d0bc:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
   1d0be:	4b02      	ldr	r3, [pc, #8]	; (1d0c8 <pvTaskIncrementMutexHeldCount+0x20>)
   1d0c0:	681b      	ldr	r3, [r3, #0]
	}
   1d0c2:	0018      	movs	r0, r3
   1d0c4:	46bd      	mov	sp, r7
   1d0c6:	bd80      	pop	{r7, pc}
   1d0c8:	20003afc 	.word	0x20003afc

0001d0cc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
   1d0cc:	b580      	push	{r7, lr}
   1d0ce:	b084      	sub	sp, #16
   1d0d0:	af00      	add	r7, sp, #0
   1d0d2:	6078      	str	r0, [r7, #4]
   1d0d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
   1d0d6:	4b21      	ldr	r3, [pc, #132]	; (1d15c <prvAddCurrentTaskToDelayedList+0x90>)
   1d0d8:	681b      	ldr	r3, [r3, #0]
   1d0da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1d0dc:	4b20      	ldr	r3, [pc, #128]	; (1d160 <prvAddCurrentTaskToDelayedList+0x94>)
   1d0de:	681b      	ldr	r3, [r3, #0]
   1d0e0:	3304      	adds	r3, #4
   1d0e2:	0018      	movs	r0, r3
   1d0e4:	4b1f      	ldr	r3, [pc, #124]	; (1d164 <prvAddCurrentTaskToDelayedList+0x98>)
   1d0e6:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   1d0e8:	687b      	ldr	r3, [r7, #4]
   1d0ea:	3301      	adds	r3, #1
   1d0ec:	d10b      	bne.n	1d106 <prvAddCurrentTaskToDelayedList+0x3a>
   1d0ee:	683b      	ldr	r3, [r7, #0]
   1d0f0:	2b00      	cmp	r3, #0
   1d0f2:	d008      	beq.n	1d106 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1d0f4:	4b1a      	ldr	r3, [pc, #104]	; (1d160 <prvAddCurrentTaskToDelayedList+0x94>)
   1d0f6:	681b      	ldr	r3, [r3, #0]
   1d0f8:	1d1a      	adds	r2, r3, #4
   1d0fa:	4b1b      	ldr	r3, [pc, #108]	; (1d168 <prvAddCurrentTaskToDelayedList+0x9c>)
   1d0fc:	0011      	movs	r1, r2
   1d0fe:	0018      	movs	r0, r3
   1d100:	4b1a      	ldr	r3, [pc, #104]	; (1d16c <prvAddCurrentTaskToDelayedList+0xa0>)
   1d102:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
   1d104:	e026      	b.n	1d154 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
   1d106:	68fa      	ldr	r2, [r7, #12]
   1d108:	687b      	ldr	r3, [r7, #4]
   1d10a:	18d3      	adds	r3, r2, r3
   1d10c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   1d10e:	4b14      	ldr	r3, [pc, #80]	; (1d160 <prvAddCurrentTaskToDelayedList+0x94>)
   1d110:	681b      	ldr	r3, [r3, #0]
   1d112:	68ba      	ldr	r2, [r7, #8]
   1d114:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
   1d116:	68ba      	ldr	r2, [r7, #8]
   1d118:	68fb      	ldr	r3, [r7, #12]
   1d11a:	429a      	cmp	r2, r3
   1d11c:	d209      	bcs.n	1d132 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1d11e:	4b14      	ldr	r3, [pc, #80]	; (1d170 <prvAddCurrentTaskToDelayedList+0xa4>)
   1d120:	681a      	ldr	r2, [r3, #0]
   1d122:	4b0f      	ldr	r3, [pc, #60]	; (1d160 <prvAddCurrentTaskToDelayedList+0x94>)
   1d124:	681b      	ldr	r3, [r3, #0]
   1d126:	3304      	adds	r3, #4
   1d128:	0019      	movs	r1, r3
   1d12a:	0010      	movs	r0, r2
   1d12c:	4b11      	ldr	r3, [pc, #68]	; (1d174 <prvAddCurrentTaskToDelayedList+0xa8>)
   1d12e:	4798      	blx	r3
}
   1d130:	e010      	b.n	1d154 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1d132:	4b11      	ldr	r3, [pc, #68]	; (1d178 <prvAddCurrentTaskToDelayedList+0xac>)
   1d134:	681a      	ldr	r2, [r3, #0]
   1d136:	4b0a      	ldr	r3, [pc, #40]	; (1d160 <prvAddCurrentTaskToDelayedList+0x94>)
   1d138:	681b      	ldr	r3, [r3, #0]
   1d13a:	3304      	adds	r3, #4
   1d13c:	0019      	movs	r1, r3
   1d13e:	0010      	movs	r0, r2
   1d140:	4b0c      	ldr	r3, [pc, #48]	; (1d174 <prvAddCurrentTaskToDelayedList+0xa8>)
   1d142:	4798      	blx	r3
				if( xTimeToWake < xNextTaskUnblockTime )
   1d144:	4b0d      	ldr	r3, [pc, #52]	; (1d17c <prvAddCurrentTaskToDelayedList+0xb0>)
   1d146:	681b      	ldr	r3, [r3, #0]
   1d148:	68ba      	ldr	r2, [r7, #8]
   1d14a:	429a      	cmp	r2, r3
   1d14c:	d202      	bcs.n	1d154 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
   1d14e:	4b0b      	ldr	r3, [pc, #44]	; (1d17c <prvAddCurrentTaskToDelayedList+0xb0>)
   1d150:	68ba      	ldr	r2, [r7, #8]
   1d152:	601a      	str	r2, [r3, #0]
}
   1d154:	46c0      	nop			; (mov r8, r8)
   1d156:	46bd      	mov	sp, r7
   1d158:	b004      	add	sp, #16
   1d15a:	bd80      	pop	{r7, pc}
   1d15c:	20003bd8 	.word	0x20003bd8
   1d160:	20003afc 	.word	0x20003afc
   1d164:	00019d33 	.word	0x00019d33
   1d168:	20003bc0 	.word	0x20003bc0
   1d16c:	00019c83 	.word	0x00019c83
   1d170:	20003b90 	.word	0x20003b90
   1d174:	00019cc7 	.word	0x00019cc7
   1d178:	20003b8c 	.word	0x20003b8c
   1d17c:	20003bf4 	.word	0x20003bf4

0001d180 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
   1d180:	b590      	push	{r4, r7, lr}
   1d182:	b085      	sub	sp, #20
   1d184:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
   1d186:	2300      	movs	r3, #0
   1d188:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   1d18a:	4b0e      	ldr	r3, [pc, #56]	; (1d1c4 <xTimerCreateTimerTask+0x44>)
   1d18c:	4798      	blx	r3

	if( xTimerQueue != NULL )
   1d18e:	4b0e      	ldr	r3, [pc, #56]	; (1d1c8 <xTimerCreateTimerTask+0x48>)
   1d190:	681b      	ldr	r3, [r3, #0]
   1d192:	2b00      	cmp	r3, #0
   1d194:	d00b      	beq.n	1d1ae <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
   1d196:	490d      	ldr	r1, [pc, #52]	; (1d1cc <xTimerCreateTimerTask+0x4c>)
   1d198:	480d      	ldr	r0, [pc, #52]	; (1d1d0 <xTimerCreateTimerTask+0x50>)
   1d19a:	4b0e      	ldr	r3, [pc, #56]	; (1d1d4 <xTimerCreateTimerTask+0x54>)
   1d19c:	9301      	str	r3, [sp, #4]
   1d19e:	2302      	movs	r3, #2
   1d1a0:	9300      	str	r3, [sp, #0]
   1d1a2:	2300      	movs	r3, #0
   1d1a4:	2280      	movs	r2, #128	; 0x80
   1d1a6:	4c0c      	ldr	r4, [pc, #48]	; (1d1d8 <xTimerCreateTimerTask+0x58>)
   1d1a8:	47a0      	blx	r4
   1d1aa:	0003      	movs	r3, r0
   1d1ac:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   1d1ae:	687b      	ldr	r3, [r7, #4]
   1d1b0:	2b00      	cmp	r3, #0
   1d1b2:	d101      	bne.n	1d1b8 <xTimerCreateTimerTask+0x38>
   1d1b4:	b672      	cpsid	i
   1d1b6:	e7fe      	b.n	1d1b6 <xTimerCreateTimerTask+0x36>
	return xReturn;
   1d1b8:	687b      	ldr	r3, [r7, #4]
}
   1d1ba:	0018      	movs	r0, r3
   1d1bc:	46bd      	mov	sp, r7
   1d1be:	b003      	add	sp, #12
   1d1c0:	bd90      	pop	{r4, r7, pc}
   1d1c2:	46c0      	nop			; (mov r8, r8)
   1d1c4:	0001d6c9 	.word	0x0001d6c9
   1d1c8:	20003c30 	.word	0x20003c30
   1d1cc:	00038c64 	.word	0x00038c64
   1d1d0:	0001d301 	.word	0x0001d301
   1d1d4:	20003c34 	.word	0x20003c34
   1d1d8:	0001bb19 	.word	0x0001bb19

0001d1dc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
   1d1dc:	b590      	push	{r4, r7, lr}
   1d1de:	b089      	sub	sp, #36	; 0x24
   1d1e0:	af00      	add	r7, sp, #0
   1d1e2:	60f8      	str	r0, [r7, #12]
   1d1e4:	60b9      	str	r1, [r7, #8]
   1d1e6:	607a      	str	r2, [r7, #4]
   1d1e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
   1d1ea:	2300      	movs	r3, #0
   1d1ec:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
   1d1ee:	68fb      	ldr	r3, [r7, #12]
   1d1f0:	2b00      	cmp	r3, #0
   1d1f2:	d101      	bne.n	1d1f8 <xTimerGenericCommand+0x1c>
   1d1f4:	b672      	cpsid	i
   1d1f6:	e7fe      	b.n	1d1f6 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   1d1f8:	4b1e      	ldr	r3, [pc, #120]	; (1d274 <xTimerGenericCommand+0x98>)
   1d1fa:	681b      	ldr	r3, [r3, #0]
   1d1fc:	2b00      	cmp	r3, #0
   1d1fe:	d033      	beq.n	1d268 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   1d200:	2310      	movs	r3, #16
   1d202:	18fb      	adds	r3, r7, r3
   1d204:	68ba      	ldr	r2, [r7, #8]
   1d206:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   1d208:	2310      	movs	r3, #16
   1d20a:	18fb      	adds	r3, r7, r3
   1d20c:	687a      	ldr	r2, [r7, #4]
   1d20e:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
   1d210:	2310      	movs	r3, #16
   1d212:	18fb      	adds	r3, r7, r3
   1d214:	68fa      	ldr	r2, [r7, #12]
   1d216:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   1d218:	68bb      	ldr	r3, [r7, #8]
   1d21a:	2b05      	cmp	r3, #5
   1d21c:	dc1a      	bgt.n	1d254 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   1d21e:	4b16      	ldr	r3, [pc, #88]	; (1d278 <xTimerGenericCommand+0x9c>)
   1d220:	4798      	blx	r3
   1d222:	0003      	movs	r3, r0
   1d224:	2b02      	cmp	r3, #2
   1d226:	d10a      	bne.n	1d23e <xTimerGenericCommand+0x62>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   1d228:	4b12      	ldr	r3, [pc, #72]	; (1d274 <xTimerGenericCommand+0x98>)
   1d22a:	6818      	ldr	r0, [r3, #0]
   1d22c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1d22e:	2310      	movs	r3, #16
   1d230:	18f9      	adds	r1, r7, r3
   1d232:	2300      	movs	r3, #0
   1d234:	4c11      	ldr	r4, [pc, #68]	; (1d27c <xTimerGenericCommand+0xa0>)
   1d236:	47a0      	blx	r4
   1d238:	0003      	movs	r3, r0
   1d23a:	61fb      	str	r3, [r7, #28]
   1d23c:	e014      	b.n	1d268 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   1d23e:	4b0d      	ldr	r3, [pc, #52]	; (1d274 <xTimerGenericCommand+0x98>)
   1d240:	6818      	ldr	r0, [r3, #0]
   1d242:	2310      	movs	r3, #16
   1d244:	18f9      	adds	r1, r7, r3
   1d246:	2300      	movs	r3, #0
   1d248:	2200      	movs	r2, #0
   1d24a:	4c0c      	ldr	r4, [pc, #48]	; (1d27c <xTimerGenericCommand+0xa0>)
   1d24c:	47a0      	blx	r4
   1d24e:	0003      	movs	r3, r0
   1d250:	61fb      	str	r3, [r7, #28]
   1d252:	e009      	b.n	1d268 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   1d254:	4b07      	ldr	r3, [pc, #28]	; (1d274 <xTimerGenericCommand+0x98>)
   1d256:	6818      	ldr	r0, [r3, #0]
   1d258:	683a      	ldr	r2, [r7, #0]
   1d25a:	2310      	movs	r3, #16
   1d25c:	18f9      	adds	r1, r7, r3
   1d25e:	2300      	movs	r3, #0
   1d260:	4c07      	ldr	r4, [pc, #28]	; (1d280 <xTimerGenericCommand+0xa4>)
   1d262:	47a0      	blx	r4
   1d264:	0003      	movs	r3, r0
   1d266:	61fb      	str	r3, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
   1d268:	69fb      	ldr	r3, [r7, #28]
}
   1d26a:	0018      	movs	r0, r3
   1d26c:	46bd      	mov	sp, r7
   1d26e:	b009      	add	sp, #36	; 0x24
   1d270:	bd90      	pop	{r4, r7, pc}
   1d272:	46c0      	nop			; (mov r8, r8)
   1d274:	20003c30 	.word	0x20003c30
   1d278:	0001cbdd 	.word	0x0001cbdd
   1d27c:	0001a451 	.word	0x0001a451
   1d280:	0001a8b1 	.word	0x0001a8b1

0001d284 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
   1d284:	b590      	push	{r4, r7, lr}
   1d286:	b087      	sub	sp, #28
   1d288:	af02      	add	r7, sp, #8
   1d28a:	6078      	str	r0, [r7, #4]
   1d28c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   1d28e:	4b18      	ldr	r3, [pc, #96]	; (1d2f0 <prvProcessExpiredTimer+0x6c>)
   1d290:	681b      	ldr	r3, [r3, #0]
   1d292:	68db      	ldr	r3, [r3, #12]
   1d294:	68db      	ldr	r3, [r3, #12]
   1d296:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1d298:	68fb      	ldr	r3, [r7, #12]
   1d29a:	3304      	adds	r3, #4
   1d29c:	0018      	movs	r0, r3
   1d29e:	4b15      	ldr	r3, [pc, #84]	; (1d2f4 <prvProcessExpiredTimer+0x70>)
   1d2a0:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1d2a2:	68fb      	ldr	r3, [r7, #12]
   1d2a4:	69db      	ldr	r3, [r3, #28]
   1d2a6:	2b01      	cmp	r3, #1
   1d2a8:	d119      	bne.n	1d2de <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
   1d2aa:	68fb      	ldr	r3, [r7, #12]
   1d2ac:	699a      	ldr	r2, [r3, #24]
   1d2ae:	687b      	ldr	r3, [r7, #4]
   1d2b0:	18d1      	adds	r1, r2, r3
   1d2b2:	687b      	ldr	r3, [r7, #4]
   1d2b4:	683a      	ldr	r2, [r7, #0]
   1d2b6:	68f8      	ldr	r0, [r7, #12]
   1d2b8:	4c0f      	ldr	r4, [pc, #60]	; (1d2f8 <prvProcessExpiredTimer+0x74>)
   1d2ba:	47a0      	blx	r4
   1d2bc:	1e03      	subs	r3, r0, #0
   1d2be:	d00e      	beq.n	1d2de <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1d2c0:	687a      	ldr	r2, [r7, #4]
   1d2c2:	68f8      	ldr	r0, [r7, #12]
   1d2c4:	2300      	movs	r3, #0
   1d2c6:	9300      	str	r3, [sp, #0]
   1d2c8:	2300      	movs	r3, #0
   1d2ca:	2100      	movs	r1, #0
   1d2cc:	4c0b      	ldr	r4, [pc, #44]	; (1d2fc <prvProcessExpiredTimer+0x78>)
   1d2ce:	47a0      	blx	r4
   1d2d0:	0003      	movs	r3, r0
   1d2d2:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
   1d2d4:	68bb      	ldr	r3, [r7, #8]
   1d2d6:	2b00      	cmp	r3, #0
   1d2d8:	d101      	bne.n	1d2de <prvProcessExpiredTimer+0x5a>
   1d2da:	b672      	cpsid	i
   1d2dc:	e7fe      	b.n	1d2dc <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1d2de:	68fb      	ldr	r3, [r7, #12]
   1d2e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1d2e2:	68fa      	ldr	r2, [r7, #12]
   1d2e4:	0010      	movs	r0, r2
   1d2e6:	4798      	blx	r3
}
   1d2e8:	46c0      	nop			; (mov r8, r8)
   1d2ea:	46bd      	mov	sp, r7
   1d2ec:	b005      	add	sp, #20
   1d2ee:	bd90      	pop	{r4, r7, pc}
   1d2f0:	20003c28 	.word	0x20003c28
   1d2f4:	00019d33 	.word	0x00019d33
   1d2f8:	0001d469 	.word	0x0001d469
   1d2fc:	0001d1dd 	.word	0x0001d1dd

0001d300 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   1d300:	b580      	push	{r7, lr}
   1d302:	b084      	sub	sp, #16
   1d304:	af00      	add	r7, sp, #0
   1d306:	6078      	str	r0, [r7, #4]

		/* Allow the application writer to execute some code in the context of
		this task at the point the task starts executing.  This is useful if the
		application includes initialisation code that would benefit from
		executing after the scheduler has been started. */
		vApplicationDaemonTaskStartupHook();
   1d308:	4b08      	ldr	r3, [pc, #32]	; (1d32c <prvTimerTask+0x2c>)
   1d30a:	4798      	blx	r3

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   1d30c:	2308      	movs	r3, #8
   1d30e:	18fb      	adds	r3, r7, r3
   1d310:	0018      	movs	r0, r3
   1d312:	4b07      	ldr	r3, [pc, #28]	; (1d330 <prvTimerTask+0x30>)
   1d314:	4798      	blx	r3
   1d316:	0003      	movs	r3, r0
   1d318:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
   1d31a:	68ba      	ldr	r2, [r7, #8]
   1d31c:	68fb      	ldr	r3, [r7, #12]
   1d31e:	0011      	movs	r1, r2
   1d320:	0018      	movs	r0, r3
   1d322:	4b04      	ldr	r3, [pc, #16]	; (1d334 <prvTimerTask+0x34>)
   1d324:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
   1d326:	4b04      	ldr	r3, [pc, #16]	; (1d338 <prvTimerTask+0x38>)
   1d328:	4798      	blx	r3
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   1d32a:	e7ef      	b.n	1d30c <prvTimerTask+0xc>
   1d32c:	00032119 	.word	0x00032119
   1d330:	0001d3e1 	.word	0x0001d3e1
   1d334:	0001d33d 	.word	0x0001d33d
   1d338:	0001d4f1 	.word	0x0001d4f1

0001d33c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
   1d33c:	b580      	push	{r7, lr}
   1d33e:	b084      	sub	sp, #16
   1d340:	af00      	add	r7, sp, #0
   1d342:	6078      	str	r0, [r7, #4]
   1d344:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
   1d346:	4b1e      	ldr	r3, [pc, #120]	; (1d3c0 <prvProcessTimerOrBlockTask+0x84>)
   1d348:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   1d34a:	2308      	movs	r3, #8
   1d34c:	18fb      	adds	r3, r7, r3
   1d34e:	0018      	movs	r0, r3
   1d350:	4b1c      	ldr	r3, [pc, #112]	; (1d3c4 <prvProcessTimerOrBlockTask+0x88>)
   1d352:	4798      	blx	r3
   1d354:	0003      	movs	r3, r0
   1d356:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
   1d358:	68bb      	ldr	r3, [r7, #8]
   1d35a:	2b00      	cmp	r3, #0
   1d35c:	d129      	bne.n	1d3b2 <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   1d35e:	683b      	ldr	r3, [r7, #0]
   1d360:	2b00      	cmp	r3, #0
   1d362:	d10c      	bne.n	1d37e <prvProcessTimerOrBlockTask+0x42>
   1d364:	687a      	ldr	r2, [r7, #4]
   1d366:	68fb      	ldr	r3, [r7, #12]
   1d368:	429a      	cmp	r2, r3
   1d36a:	d808      	bhi.n	1d37e <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
   1d36c:	4b16      	ldr	r3, [pc, #88]	; (1d3c8 <prvProcessTimerOrBlockTask+0x8c>)
   1d36e:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
   1d370:	68fa      	ldr	r2, [r7, #12]
   1d372:	687b      	ldr	r3, [r7, #4]
   1d374:	0011      	movs	r1, r2
   1d376:	0018      	movs	r0, r3
   1d378:	4b14      	ldr	r3, [pc, #80]	; (1d3cc <prvProcessTimerOrBlockTask+0x90>)
   1d37a:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
   1d37c:	e01b      	b.n	1d3b6 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
   1d37e:	683b      	ldr	r3, [r7, #0]
   1d380:	2b00      	cmp	r3, #0
   1d382:	d006      	beq.n	1d392 <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
   1d384:	4b12      	ldr	r3, [pc, #72]	; (1d3d0 <prvProcessTimerOrBlockTask+0x94>)
   1d386:	681b      	ldr	r3, [r3, #0]
   1d388:	681b      	ldr	r3, [r3, #0]
   1d38a:	425a      	negs	r2, r3
   1d38c:	4153      	adcs	r3, r2
   1d38e:	b2db      	uxtb	r3, r3
   1d390:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
   1d392:	4b10      	ldr	r3, [pc, #64]	; (1d3d4 <prvProcessTimerOrBlockTask+0x98>)
   1d394:	6818      	ldr	r0, [r3, #0]
   1d396:	687a      	ldr	r2, [r7, #4]
   1d398:	68fb      	ldr	r3, [r7, #12]
   1d39a:	1ad3      	subs	r3, r2, r3
   1d39c:	683a      	ldr	r2, [r7, #0]
   1d39e:	0019      	movs	r1, r3
   1d3a0:	4b0d      	ldr	r3, [pc, #52]	; (1d3d8 <prvProcessTimerOrBlockTask+0x9c>)
   1d3a2:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1d3a4:	4b08      	ldr	r3, [pc, #32]	; (1d3c8 <prvProcessTimerOrBlockTask+0x8c>)
   1d3a6:	4798      	blx	r3
   1d3a8:	1e03      	subs	r3, r0, #0
   1d3aa:	d104      	bne.n	1d3b6 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
   1d3ac:	4b0b      	ldr	r3, [pc, #44]	; (1d3dc <prvProcessTimerOrBlockTask+0xa0>)
   1d3ae:	4798      	blx	r3
}
   1d3b0:	e001      	b.n	1d3b6 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
   1d3b2:	4b05      	ldr	r3, [pc, #20]	; (1d3c8 <prvProcessTimerOrBlockTask+0x8c>)
   1d3b4:	4798      	blx	r3
}
   1d3b6:	46c0      	nop			; (mov r8, r8)
   1d3b8:	46bd      	mov	sp, r7
   1d3ba:	b004      	add	sp, #16
   1d3bc:	bd80      	pop	{r7, pc}
   1d3be:	46c0      	nop			; (mov r8, r8)
   1d3c0:	0001c175 	.word	0x0001c175
   1d3c4:	0001d421 	.word	0x0001d421
   1d3c8:	0001c18d 	.word	0x0001c18d
   1d3cc:	0001d285 	.word	0x0001d285
   1d3d0:	20003c2c 	.word	0x20003c2c
   1d3d4:	20003c30 	.word	0x20003c30
   1d3d8:	0001b915 	.word	0x0001b915
   1d3dc:	00019ea1 	.word	0x00019ea1

0001d3e0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
   1d3e0:	b580      	push	{r7, lr}
   1d3e2:	b084      	sub	sp, #16
   1d3e4:	af00      	add	r7, sp, #0
   1d3e6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   1d3e8:	4b0c      	ldr	r3, [pc, #48]	; (1d41c <prvGetNextExpireTime+0x3c>)
   1d3ea:	681b      	ldr	r3, [r3, #0]
   1d3ec:	681b      	ldr	r3, [r3, #0]
   1d3ee:	425a      	negs	r2, r3
   1d3f0:	4153      	adcs	r3, r2
   1d3f2:	b2db      	uxtb	r3, r3
   1d3f4:	001a      	movs	r2, r3
   1d3f6:	687b      	ldr	r3, [r7, #4]
   1d3f8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   1d3fa:	687b      	ldr	r3, [r7, #4]
   1d3fc:	681b      	ldr	r3, [r3, #0]
   1d3fe:	2b00      	cmp	r3, #0
   1d400:	d105      	bne.n	1d40e <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1d402:	4b06      	ldr	r3, [pc, #24]	; (1d41c <prvGetNextExpireTime+0x3c>)
   1d404:	681b      	ldr	r3, [r3, #0]
   1d406:	68db      	ldr	r3, [r3, #12]
   1d408:	681b      	ldr	r3, [r3, #0]
   1d40a:	60fb      	str	r3, [r7, #12]
   1d40c:	e001      	b.n	1d412 <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
   1d40e:	2300      	movs	r3, #0
   1d410:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
   1d412:	68fb      	ldr	r3, [r7, #12]
}
   1d414:	0018      	movs	r0, r3
   1d416:	46bd      	mov	sp, r7
   1d418:	b004      	add	sp, #16
   1d41a:	bd80      	pop	{r7, pc}
   1d41c:	20003c28 	.word	0x20003c28

0001d420 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
   1d420:	b580      	push	{r7, lr}
   1d422:	b084      	sub	sp, #16
   1d424:	af00      	add	r7, sp, #0
   1d426:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
   1d428:	4b0c      	ldr	r3, [pc, #48]	; (1d45c <prvSampleTimeNow+0x3c>)
   1d42a:	4798      	blx	r3
   1d42c:	0003      	movs	r3, r0
   1d42e:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
   1d430:	4b0b      	ldr	r3, [pc, #44]	; (1d460 <prvSampleTimeNow+0x40>)
   1d432:	681b      	ldr	r3, [r3, #0]
   1d434:	68fa      	ldr	r2, [r7, #12]
   1d436:	429a      	cmp	r2, r3
   1d438:	d205      	bcs.n	1d446 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
   1d43a:	4b0a      	ldr	r3, [pc, #40]	; (1d464 <prvSampleTimeNow+0x44>)
   1d43c:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
   1d43e:	687b      	ldr	r3, [r7, #4]
   1d440:	2201      	movs	r2, #1
   1d442:	601a      	str	r2, [r3, #0]
   1d444:	e002      	b.n	1d44c <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   1d446:	687b      	ldr	r3, [r7, #4]
   1d448:	2200      	movs	r2, #0
   1d44a:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
   1d44c:	4b04      	ldr	r3, [pc, #16]	; (1d460 <prvSampleTimeNow+0x40>)
   1d44e:	68fa      	ldr	r2, [r7, #12]
   1d450:	601a      	str	r2, [r3, #0]

	return xTimeNow;
   1d452:	68fb      	ldr	r3, [r7, #12]
}
   1d454:	0018      	movs	r0, r3
   1d456:	46bd      	mov	sp, r7
   1d458:	b004      	add	sp, #16
   1d45a:	bd80      	pop	{r7, pc}
   1d45c:	0001c2fd 	.word	0x0001c2fd
   1d460:	20003c38 	.word	0x20003c38
   1d464:	0001d609 	.word	0x0001d609

0001d468 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   1d468:	b580      	push	{r7, lr}
   1d46a:	b086      	sub	sp, #24
   1d46c:	af00      	add	r7, sp, #0
   1d46e:	60f8      	str	r0, [r7, #12]
   1d470:	60b9      	str	r1, [r7, #8]
   1d472:	607a      	str	r2, [r7, #4]
   1d474:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
   1d476:	2300      	movs	r3, #0
   1d478:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   1d47a:	68fb      	ldr	r3, [r7, #12]
   1d47c:	68ba      	ldr	r2, [r7, #8]
   1d47e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1d480:	68fb      	ldr	r3, [r7, #12]
   1d482:	68fa      	ldr	r2, [r7, #12]
   1d484:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
   1d486:	68ba      	ldr	r2, [r7, #8]
   1d488:	687b      	ldr	r3, [r7, #4]
   1d48a:	429a      	cmp	r2, r3
   1d48c:	d812      	bhi.n	1d4b4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1d48e:	687a      	ldr	r2, [r7, #4]
   1d490:	683b      	ldr	r3, [r7, #0]
   1d492:	1ad2      	subs	r2, r2, r3
   1d494:	68fb      	ldr	r3, [r7, #12]
   1d496:	699b      	ldr	r3, [r3, #24]
   1d498:	429a      	cmp	r2, r3
   1d49a:	d302      	bcc.n	1d4a2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   1d49c:	2301      	movs	r3, #1
   1d49e:	617b      	str	r3, [r7, #20]
   1d4a0:	e01b      	b.n	1d4da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   1d4a2:	4b10      	ldr	r3, [pc, #64]	; (1d4e4 <prvInsertTimerInActiveList+0x7c>)
   1d4a4:	681a      	ldr	r2, [r3, #0]
   1d4a6:	68fb      	ldr	r3, [r7, #12]
   1d4a8:	3304      	adds	r3, #4
   1d4aa:	0019      	movs	r1, r3
   1d4ac:	0010      	movs	r0, r2
   1d4ae:	4b0e      	ldr	r3, [pc, #56]	; (1d4e8 <prvInsertTimerInActiveList+0x80>)
   1d4b0:	4798      	blx	r3
   1d4b2:	e012      	b.n	1d4da <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   1d4b4:	687a      	ldr	r2, [r7, #4]
   1d4b6:	683b      	ldr	r3, [r7, #0]
   1d4b8:	429a      	cmp	r2, r3
   1d4ba:	d206      	bcs.n	1d4ca <prvInsertTimerInActiveList+0x62>
   1d4bc:	68ba      	ldr	r2, [r7, #8]
   1d4be:	683b      	ldr	r3, [r7, #0]
   1d4c0:	429a      	cmp	r2, r3
   1d4c2:	d302      	bcc.n	1d4ca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   1d4c4:	2301      	movs	r3, #1
   1d4c6:	617b      	str	r3, [r7, #20]
   1d4c8:	e007      	b.n	1d4da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1d4ca:	4b08      	ldr	r3, [pc, #32]	; (1d4ec <prvInsertTimerInActiveList+0x84>)
   1d4cc:	681a      	ldr	r2, [r3, #0]
   1d4ce:	68fb      	ldr	r3, [r7, #12]
   1d4d0:	3304      	adds	r3, #4
   1d4d2:	0019      	movs	r1, r3
   1d4d4:	0010      	movs	r0, r2
   1d4d6:	4b04      	ldr	r3, [pc, #16]	; (1d4e8 <prvInsertTimerInActiveList+0x80>)
   1d4d8:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
   1d4da:	697b      	ldr	r3, [r7, #20]
}
   1d4dc:	0018      	movs	r0, r3
   1d4de:	46bd      	mov	sp, r7
   1d4e0:	b006      	add	sp, #24
   1d4e2:	bd80      	pop	{r7, pc}
   1d4e4:	20003c2c 	.word	0x20003c2c
   1d4e8:	00019cc7 	.word	0x00019cc7
   1d4ec:	20003c28 	.word	0x20003c28

0001d4f0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
   1d4f0:	b590      	push	{r4, r7, lr}
   1d4f2:	b08b      	sub	sp, #44	; 0x2c
   1d4f4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   1d4f6:	e068      	b.n	1d5ca <prvProcessReceivedCommands+0xda>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   1d4f8:	2308      	movs	r3, #8
   1d4fa:	18fb      	adds	r3, r7, r3
   1d4fc:	681b      	ldr	r3, [r3, #0]
   1d4fe:	2b00      	cmp	r3, #0
   1d500:	db63      	blt.n	1d5ca <prvProcessReceivedCommands+0xda>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   1d502:	2308      	movs	r3, #8
   1d504:	18fb      	adds	r3, r7, r3
   1d506:	689b      	ldr	r3, [r3, #8]
   1d508:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
   1d50a:	69fb      	ldr	r3, [r7, #28]
   1d50c:	695b      	ldr	r3, [r3, #20]
   1d50e:	2b00      	cmp	r3, #0
   1d510:	d004      	beq.n	1d51c <prvProcessReceivedCommands+0x2c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1d512:	69fb      	ldr	r3, [r7, #28]
   1d514:	3304      	adds	r3, #4
   1d516:	0018      	movs	r0, r3
   1d518:	4b33      	ldr	r3, [pc, #204]	; (1d5e8 <prvProcessReceivedCommands+0xf8>)
   1d51a:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   1d51c:	1d3b      	adds	r3, r7, #4
   1d51e:	0018      	movs	r0, r3
   1d520:	4b32      	ldr	r3, [pc, #200]	; (1d5ec <prvProcessReceivedCommands+0xfc>)
   1d522:	4798      	blx	r3
   1d524:	0003      	movs	r3, r0
   1d526:	61bb      	str	r3, [r7, #24]

			switch( xMessage.xMessageID )
   1d528:	2308      	movs	r3, #8
   1d52a:	18fb      	adds	r3, r7, r3
   1d52c:	681b      	ldr	r3, [r3, #0]
   1d52e:	2b09      	cmp	r3, #9
   1d530:	d84a      	bhi.n	1d5c8 <prvProcessReceivedCommands+0xd8>
   1d532:	009a      	lsls	r2, r3, #2
   1d534:	4b2e      	ldr	r3, [pc, #184]	; (1d5f0 <prvProcessReceivedCommands+0x100>)
   1d536:	18d3      	adds	r3, r2, r3
   1d538:	681b      	ldr	r3, [r3, #0]
   1d53a:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
   1d53c:	2308      	movs	r3, #8
   1d53e:	18fb      	adds	r3, r7, r3
   1d540:	685a      	ldr	r2, [r3, #4]
   1d542:	69fb      	ldr	r3, [r7, #28]
   1d544:	699b      	ldr	r3, [r3, #24]
   1d546:	18d1      	adds	r1, r2, r3
   1d548:	2308      	movs	r3, #8
   1d54a:	18fb      	adds	r3, r7, r3
   1d54c:	685b      	ldr	r3, [r3, #4]
   1d54e:	69ba      	ldr	r2, [r7, #24]
   1d550:	69f8      	ldr	r0, [r7, #28]
   1d552:	4c28      	ldr	r4, [pc, #160]	; (1d5f4 <prvProcessReceivedCommands+0x104>)
   1d554:	47a0      	blx	r4
   1d556:	1e03      	subs	r3, r0, #0
   1d558:	d037      	beq.n	1d5ca <prvProcessReceivedCommands+0xda>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1d55a:	69fb      	ldr	r3, [r7, #28]
   1d55c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1d55e:	69fa      	ldr	r2, [r7, #28]
   1d560:	0010      	movs	r0, r2
   1d562:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1d564:	69fb      	ldr	r3, [r7, #28]
   1d566:	69db      	ldr	r3, [r3, #28]
   1d568:	2b01      	cmp	r3, #1
   1d56a:	d12e      	bne.n	1d5ca <prvProcessReceivedCommands+0xda>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   1d56c:	2308      	movs	r3, #8
   1d56e:	18fb      	adds	r3, r7, r3
   1d570:	685a      	ldr	r2, [r3, #4]
   1d572:	69fb      	ldr	r3, [r7, #28]
   1d574:	699b      	ldr	r3, [r3, #24]
   1d576:	18d2      	adds	r2, r2, r3
   1d578:	69f8      	ldr	r0, [r7, #28]
   1d57a:	2300      	movs	r3, #0
   1d57c:	9300      	str	r3, [sp, #0]
   1d57e:	2300      	movs	r3, #0
   1d580:	2100      	movs	r1, #0
   1d582:	4c1d      	ldr	r4, [pc, #116]	; (1d5f8 <prvProcessReceivedCommands+0x108>)
   1d584:	47a0      	blx	r4
   1d586:	0003      	movs	r3, r0
   1d588:	617b      	str	r3, [r7, #20]
							configASSERT( xResult );
   1d58a:	697b      	ldr	r3, [r7, #20]
   1d58c:	2b00      	cmp	r3, #0
   1d58e:	d11c      	bne.n	1d5ca <prvProcessReceivedCommands+0xda>
   1d590:	b672      	cpsid	i
   1d592:	e7fe      	b.n	1d592 <prvProcessReceivedCommands+0xa2>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   1d594:	2308      	movs	r3, #8
   1d596:	18fb      	adds	r3, r7, r3
   1d598:	685a      	ldr	r2, [r3, #4]
   1d59a:	69fb      	ldr	r3, [r7, #28]
   1d59c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   1d59e:	69fb      	ldr	r3, [r7, #28]
   1d5a0:	699b      	ldr	r3, [r3, #24]
   1d5a2:	2b00      	cmp	r3, #0
   1d5a4:	d101      	bne.n	1d5aa <prvProcessReceivedCommands+0xba>
   1d5a6:	b672      	cpsid	i
   1d5a8:	e7fe      	b.n	1d5a8 <prvProcessReceivedCommands+0xb8>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   1d5aa:	69fb      	ldr	r3, [r7, #28]
   1d5ac:	699a      	ldr	r2, [r3, #24]
   1d5ae:	69bb      	ldr	r3, [r7, #24]
   1d5b0:	18d1      	adds	r1, r2, r3
   1d5b2:	69bb      	ldr	r3, [r7, #24]
   1d5b4:	69ba      	ldr	r2, [r7, #24]
   1d5b6:	69f8      	ldr	r0, [r7, #28]
   1d5b8:	4c0e      	ldr	r4, [pc, #56]	; (1d5f4 <prvProcessReceivedCommands+0x104>)
   1d5ba:	47a0      	blx	r4
					break;
   1d5bc:	e005      	b.n	1d5ca <prvProcessReceivedCommands+0xda>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
   1d5be:	69fb      	ldr	r3, [r7, #28]
   1d5c0:	0018      	movs	r0, r3
   1d5c2:	4b0e      	ldr	r3, [pc, #56]	; (1d5fc <prvProcessReceivedCommands+0x10c>)
   1d5c4:	4798      	blx	r3
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
   1d5c6:	e000      	b.n	1d5ca <prvProcessReceivedCommands+0xda>

				default	:
					/* Don't expect to get here. */
					break;
   1d5c8:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   1d5ca:	4b0d      	ldr	r3, [pc, #52]	; (1d600 <prvProcessReceivedCommands+0x110>)
   1d5cc:	681b      	ldr	r3, [r3, #0]
   1d5ce:	2208      	movs	r2, #8
   1d5d0:	18b9      	adds	r1, r7, r2
   1d5d2:	2200      	movs	r2, #0
   1d5d4:	0018      	movs	r0, r3
   1d5d6:	4b0b      	ldr	r3, [pc, #44]	; (1d604 <prvProcessReceivedCommands+0x114>)
   1d5d8:	4798      	blx	r3
   1d5da:	1e03      	subs	r3, r0, #0
   1d5dc:	d18c      	bne.n	1d4f8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
   1d5de:	46c0      	nop			; (mov r8, r8)
   1d5e0:	46bd      	mov	sp, r7
   1d5e2:	b009      	add	sp, #36	; 0x24
   1d5e4:	bd90      	pop	{r4, r7, pc}
   1d5e6:	46c0      	nop			; (mov r8, r8)
   1d5e8:	00019d33 	.word	0x00019d33
   1d5ec:	0001d421 	.word	0x0001d421
   1d5f0:	00038c6c 	.word	0x00038c6c
   1d5f4:	0001d469 	.word	0x0001d469
   1d5f8:	0001d1dd 	.word	0x0001d1dd
   1d5fc:	0001a0b5 	.word	0x0001a0b5
   1d600:	20003c30 	.word	0x20003c30
   1d604:	0001ad09 	.word	0x0001ad09

0001d608 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
   1d608:	b590      	push	{r4, r7, lr}
   1d60a:	b089      	sub	sp, #36	; 0x24
   1d60c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1d60e:	e03e      	b.n	1d68e <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1d610:	4b28      	ldr	r3, [pc, #160]	; (1d6b4 <prvSwitchTimerLists+0xac>)
   1d612:	681b      	ldr	r3, [r3, #0]
   1d614:	68db      	ldr	r3, [r3, #12]
   1d616:	681b      	ldr	r3, [r3, #0]
   1d618:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   1d61a:	4b26      	ldr	r3, [pc, #152]	; (1d6b4 <prvSwitchTimerLists+0xac>)
   1d61c:	681b      	ldr	r3, [r3, #0]
   1d61e:	68db      	ldr	r3, [r3, #12]
   1d620:	68db      	ldr	r3, [r3, #12]
   1d622:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1d624:	693b      	ldr	r3, [r7, #16]
   1d626:	3304      	adds	r3, #4
   1d628:	0018      	movs	r0, r3
   1d62a:	4b23      	ldr	r3, [pc, #140]	; (1d6b8 <prvSwitchTimerLists+0xb0>)
   1d62c:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1d62e:	693b      	ldr	r3, [r7, #16]
   1d630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1d632:	693a      	ldr	r2, [r7, #16]
   1d634:	0010      	movs	r0, r2
   1d636:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1d638:	693b      	ldr	r3, [r7, #16]
   1d63a:	69db      	ldr	r3, [r3, #28]
   1d63c:	2b01      	cmp	r3, #1
   1d63e:	d126      	bne.n	1d68e <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   1d640:	693b      	ldr	r3, [r7, #16]
   1d642:	699a      	ldr	r2, [r3, #24]
   1d644:	697b      	ldr	r3, [r7, #20]
   1d646:	18d3      	adds	r3, r2, r3
   1d648:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
   1d64a:	68fa      	ldr	r2, [r7, #12]
   1d64c:	697b      	ldr	r3, [r7, #20]
   1d64e:	429a      	cmp	r2, r3
   1d650:	d90e      	bls.n	1d670 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   1d652:	693b      	ldr	r3, [r7, #16]
   1d654:	68fa      	ldr	r2, [r7, #12]
   1d656:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1d658:	693b      	ldr	r3, [r7, #16]
   1d65a:	693a      	ldr	r2, [r7, #16]
   1d65c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1d65e:	4b15      	ldr	r3, [pc, #84]	; (1d6b4 <prvSwitchTimerLists+0xac>)
   1d660:	681a      	ldr	r2, [r3, #0]
   1d662:	693b      	ldr	r3, [r7, #16]
   1d664:	3304      	adds	r3, #4
   1d666:	0019      	movs	r1, r3
   1d668:	0010      	movs	r0, r2
   1d66a:	4b14      	ldr	r3, [pc, #80]	; (1d6bc <prvSwitchTimerLists+0xb4>)
   1d66c:	4798      	blx	r3
   1d66e:	e00e      	b.n	1d68e <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1d670:	697a      	ldr	r2, [r7, #20]
   1d672:	6938      	ldr	r0, [r7, #16]
   1d674:	2300      	movs	r3, #0
   1d676:	9300      	str	r3, [sp, #0]
   1d678:	2300      	movs	r3, #0
   1d67a:	2100      	movs	r1, #0
   1d67c:	4c10      	ldr	r4, [pc, #64]	; (1d6c0 <prvSwitchTimerLists+0xb8>)
   1d67e:	47a0      	blx	r4
   1d680:	0003      	movs	r3, r0
   1d682:	60bb      	str	r3, [r7, #8]
				configASSERT( xResult );
   1d684:	68bb      	ldr	r3, [r7, #8]
   1d686:	2b00      	cmp	r3, #0
   1d688:	d101      	bne.n	1d68e <prvSwitchTimerLists+0x86>
   1d68a:	b672      	cpsid	i
   1d68c:	e7fe      	b.n	1d68c <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1d68e:	4b09      	ldr	r3, [pc, #36]	; (1d6b4 <prvSwitchTimerLists+0xac>)
   1d690:	681b      	ldr	r3, [r3, #0]
   1d692:	681b      	ldr	r3, [r3, #0]
   1d694:	2b00      	cmp	r3, #0
   1d696:	d1bb      	bne.n	1d610 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
   1d698:	4b06      	ldr	r3, [pc, #24]	; (1d6b4 <prvSwitchTimerLists+0xac>)
   1d69a:	681b      	ldr	r3, [r3, #0]
   1d69c:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
   1d69e:	4b09      	ldr	r3, [pc, #36]	; (1d6c4 <prvSwitchTimerLists+0xbc>)
   1d6a0:	681a      	ldr	r2, [r3, #0]
   1d6a2:	4b04      	ldr	r3, [pc, #16]	; (1d6b4 <prvSwitchTimerLists+0xac>)
   1d6a4:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
   1d6a6:	4b07      	ldr	r3, [pc, #28]	; (1d6c4 <prvSwitchTimerLists+0xbc>)
   1d6a8:	687a      	ldr	r2, [r7, #4]
   1d6aa:	601a      	str	r2, [r3, #0]
}
   1d6ac:	46c0      	nop			; (mov r8, r8)
   1d6ae:	46bd      	mov	sp, r7
   1d6b0:	b007      	add	sp, #28
   1d6b2:	bd90      	pop	{r4, r7, pc}
   1d6b4:	20003c28 	.word	0x20003c28
   1d6b8:	00019d33 	.word	0x00019d33
   1d6bc:	00019cc7 	.word	0x00019cc7
   1d6c0:	0001d1dd 	.word	0x0001d1dd
   1d6c4:	20003c2c 	.word	0x20003c2c

0001d6c8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   1d6c8:	b580      	push	{r7, lr}
   1d6ca:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   1d6cc:	4b10      	ldr	r3, [pc, #64]	; (1d710 <prvCheckForValidListAndQueue+0x48>)
   1d6ce:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   1d6d0:	4b10      	ldr	r3, [pc, #64]	; (1d714 <prvCheckForValidListAndQueue+0x4c>)
   1d6d2:	681b      	ldr	r3, [r3, #0]
   1d6d4:	2b00      	cmp	r3, #0
   1d6d6:	d115      	bne.n	1d704 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
   1d6d8:	4b0f      	ldr	r3, [pc, #60]	; (1d718 <prvCheckForValidListAndQueue+0x50>)
   1d6da:	0018      	movs	r0, r3
   1d6dc:	4b0f      	ldr	r3, [pc, #60]	; (1d71c <prvCheckForValidListAndQueue+0x54>)
   1d6de:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
   1d6e0:	4b0f      	ldr	r3, [pc, #60]	; (1d720 <prvCheckForValidListAndQueue+0x58>)
   1d6e2:	0018      	movs	r0, r3
   1d6e4:	4b0d      	ldr	r3, [pc, #52]	; (1d71c <prvCheckForValidListAndQueue+0x54>)
   1d6e6:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
   1d6e8:	4b0e      	ldr	r3, [pc, #56]	; (1d724 <prvCheckForValidListAndQueue+0x5c>)
   1d6ea:	4a0b      	ldr	r2, [pc, #44]	; (1d718 <prvCheckForValidListAndQueue+0x50>)
   1d6ec:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   1d6ee:	4b0e      	ldr	r3, [pc, #56]	; (1d728 <prvCheckForValidListAndQueue+0x60>)
   1d6f0:	4a0b      	ldr	r2, [pc, #44]	; (1d720 <prvCheckForValidListAndQueue+0x58>)
   1d6f2:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   1d6f4:	2200      	movs	r2, #0
   1d6f6:	210c      	movs	r1, #12
   1d6f8:	2005      	movs	r0, #5
   1d6fa:	4b0c      	ldr	r3, [pc, #48]	; (1d72c <prvCheckForValidListAndQueue+0x64>)
   1d6fc:	4798      	blx	r3
   1d6fe:	0002      	movs	r2, r0
   1d700:	4b04      	ldr	r3, [pc, #16]	; (1d714 <prvCheckForValidListAndQueue+0x4c>)
   1d702:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   1d704:	4b0a      	ldr	r3, [pc, #40]	; (1d730 <prvCheckForValidListAndQueue+0x68>)
   1d706:	4798      	blx	r3
}
   1d708:	46c0      	nop			; (mov r8, r8)
   1d70a:	46bd      	mov	sp, r7
   1d70c:	bd80      	pop	{r7, pc}
   1d70e:	46c0      	nop			; (mov r8, r8)
   1d710:	00019eb9 	.word	0x00019eb9
   1d714:	20003c30 	.word	0x20003c30
   1d718:	20003c00 	.word	0x20003c00
   1d71c:	00019c31 	.word	0x00019c31
   1d720:	20003c14 	.word	0x20003c14
   1d724:	20003c28 	.word	0x20003c28
   1d728:	20003c2c 	.word	0x20003c2c
   1d72c:	0001a1a9 	.word	0x0001a1a9
   1d730:	00019edd 	.word	0x00019edd

0001d734 <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
   1d734:	b580      	push	{r7, lr}
   1d736:	b082      	sub	sp, #8
   1d738:	af00      	add	r7, sp, #0
   1d73a:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 if(cbuf->full)
   1d73c:	687b      	ldr	r3, [r7, #4]
   1d73e:	7c1b      	ldrb	r3, [r3, #16]
   1d740:	2b00      	cmp	r3, #0
   1d742:	d00b      	beq.n	1d75c <advance_pointer+0x28>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   1d744:	687b      	ldr	r3, [r7, #4]
   1d746:	689b      	ldr	r3, [r3, #8]
   1d748:	1c5a      	adds	r2, r3, #1
   1d74a:	687b      	ldr	r3, [r7, #4]
   1d74c:	68d9      	ldr	r1, [r3, #12]
   1d74e:	4b10      	ldr	r3, [pc, #64]	; (1d790 <advance_pointer+0x5c>)
   1d750:	0010      	movs	r0, r2
   1d752:	4798      	blx	r3
   1d754:	000b      	movs	r3, r1
   1d756:	001a      	movs	r2, r3
   1d758:	687b      	ldr	r3, [r7, #4]
   1d75a:	609a      	str	r2, [r3, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
   1d75c:	687b      	ldr	r3, [r7, #4]
   1d75e:	685b      	ldr	r3, [r3, #4]
   1d760:	1c5a      	adds	r2, r3, #1
   1d762:	687b      	ldr	r3, [r7, #4]
   1d764:	68d9      	ldr	r1, [r3, #12]
   1d766:	4b0a      	ldr	r3, [pc, #40]	; (1d790 <advance_pointer+0x5c>)
   1d768:	0010      	movs	r0, r2
   1d76a:	4798      	blx	r3
   1d76c:	000b      	movs	r3, r1
   1d76e:	001a      	movs	r2, r3
   1d770:	687b      	ldr	r3, [r7, #4]
   1d772:	605a      	str	r2, [r3, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
   1d774:	687b      	ldr	r3, [r7, #4]
   1d776:	685a      	ldr	r2, [r3, #4]
   1d778:	687b      	ldr	r3, [r7, #4]
   1d77a:	689b      	ldr	r3, [r3, #8]
   1d77c:	1ad3      	subs	r3, r2, r3
   1d77e:	425a      	negs	r2, r3
   1d780:	4153      	adcs	r3, r2
   1d782:	b2da      	uxtb	r2, r3
   1d784:	687b      	ldr	r3, [r7, #4]
   1d786:	741a      	strb	r2, [r3, #16]
 }
   1d788:	46c0      	nop			; (mov r8, r8)
   1d78a:	46bd      	mov	sp, r7
   1d78c:	b002      	add	sp, #8
   1d78e:	bd80      	pop	{r7, pc}
   1d790:	000324d5 	.word	0x000324d5

0001d794 <retreat_pointer>:

 static void retreat_pointer(cbuf_handle_t cbuf)
 {
   1d794:	b580      	push	{r7, lr}
   1d796:	b082      	sub	sp, #8
   1d798:	af00      	add	r7, sp, #0
   1d79a:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 cbuf->full = false;
   1d79c:	687b      	ldr	r3, [r7, #4]
   1d79e:	2200      	movs	r2, #0
   1d7a0:	741a      	strb	r2, [r3, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   1d7a2:	687b      	ldr	r3, [r7, #4]
   1d7a4:	689b      	ldr	r3, [r3, #8]
   1d7a6:	1c5a      	adds	r2, r3, #1
   1d7a8:	687b      	ldr	r3, [r7, #4]
   1d7aa:	68d9      	ldr	r1, [r3, #12]
   1d7ac:	4b05      	ldr	r3, [pc, #20]	; (1d7c4 <retreat_pointer+0x30>)
   1d7ae:	0010      	movs	r0, r2
   1d7b0:	4798      	blx	r3
   1d7b2:	000b      	movs	r3, r1
   1d7b4:	001a      	movs	r2, r3
   1d7b6:	687b      	ldr	r3, [r7, #4]
   1d7b8:	609a      	str	r2, [r3, #8]
 }
   1d7ba:	46c0      	nop			; (mov r8, r8)
   1d7bc:	46bd      	mov	sp, r7
   1d7be:	b002      	add	sp, #8
   1d7c0:	bd80      	pop	{r7, pc}
   1d7c2:	46c0      	nop			; (mov r8, r8)
   1d7c4:	000324d5 	.word	0x000324d5

0001d7c8 <circular_buf_init>:

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
   1d7c8:	b580      	push	{r7, lr}
   1d7ca:	b084      	sub	sp, #16
   1d7cc:	af00      	add	r7, sp, #0
   1d7ce:	6078      	str	r0, [r7, #4]
   1d7d0:	6039      	str	r1, [r7, #0]
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
   1d7d2:	2014      	movs	r0, #20
   1d7d4:	4b09      	ldr	r3, [pc, #36]	; (1d7fc <circular_buf_init+0x34>)
   1d7d6:	4798      	blx	r3
   1d7d8:	0003      	movs	r3, r0
   1d7da:	60fb      	str	r3, [r7, #12]
	 //assert(cbuf);

	 cbuf->buffer = buffer;
   1d7dc:	68fb      	ldr	r3, [r7, #12]
   1d7de:	687a      	ldr	r2, [r7, #4]
   1d7e0:	601a      	str	r2, [r3, #0]
	 cbuf->max = size;
   1d7e2:	68fb      	ldr	r3, [r7, #12]
   1d7e4:	683a      	ldr	r2, [r7, #0]
   1d7e6:	60da      	str	r2, [r3, #12]
	 circular_buf_reset(cbuf);
   1d7e8:	68fb      	ldr	r3, [r7, #12]
   1d7ea:	0018      	movs	r0, r3
   1d7ec:	4b04      	ldr	r3, [pc, #16]	; (1d800 <circular_buf_init+0x38>)
   1d7ee:	4798      	blx	r3

	// assert(circular_buf_empty(cbuf));

	 return cbuf;
   1d7f0:	68fb      	ldr	r3, [r7, #12]
 }
   1d7f2:	0018      	movs	r0, r3
   1d7f4:	46bd      	mov	sp, r7
   1d7f6:	b004      	add	sp, #16
   1d7f8:	bd80      	pop	{r7, pc}
   1d7fa:	46c0      	nop			; (mov r8, r8)
   1d7fc:	00034025 	.word	0x00034025
   1d800:	0001d805 	.word	0x0001d805

0001d804 <circular_buf_reset>:
	// assert(cbuf);
	 free(cbuf);
 }

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
   1d804:	b580      	push	{r7, lr}
   1d806:	b082      	sub	sp, #8
   1d808:	af00      	add	r7, sp, #0
   1d80a:	6078      	str	r0, [r7, #4]
	// assert(cbuf);

	 cbuf->head = 0;
   1d80c:	687b      	ldr	r3, [r7, #4]
   1d80e:	2200      	movs	r2, #0
   1d810:	605a      	str	r2, [r3, #4]
	 cbuf->tail = 0;
   1d812:	687b      	ldr	r3, [r7, #4]
   1d814:	2200      	movs	r2, #0
   1d816:	609a      	str	r2, [r3, #8]
	 cbuf->full = false;
   1d818:	687b      	ldr	r3, [r7, #4]
   1d81a:	2200      	movs	r2, #0
   1d81c:	741a      	strb	r2, [r3, #16]
 }
   1d81e:	46c0      	nop			; (mov r8, r8)
   1d820:	46bd      	mov	sp, r7
   1d822:	b002      	add	sp, #8
   1d824:	bd80      	pop	{r7, pc}
	...

0001d828 <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
   1d828:	b580      	push	{r7, lr}
   1d82a:	b082      	sub	sp, #8
   1d82c:	af00      	add	r7, sp, #0
   1d82e:	6078      	str	r0, [r7, #4]
   1d830:	000a      	movs	r2, r1
   1d832:	1cfb      	adds	r3, r7, #3
   1d834:	701a      	strb	r2, [r3, #0]
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
   1d836:	687b      	ldr	r3, [r7, #4]
   1d838:	681a      	ldr	r2, [r3, #0]
   1d83a:	687b      	ldr	r3, [r7, #4]
   1d83c:	685b      	ldr	r3, [r3, #4]
   1d83e:	18d3      	adds	r3, r2, r3
   1d840:	1cfa      	adds	r2, r7, #3
   1d842:	7812      	ldrb	r2, [r2, #0]
   1d844:	701a      	strb	r2, [r3, #0]

	 advance_pointer(cbuf);
   1d846:	687b      	ldr	r3, [r7, #4]
   1d848:	0018      	movs	r0, r3
   1d84a:	4b03      	ldr	r3, [pc, #12]	; (1d858 <circular_buf_put+0x30>)
   1d84c:	4798      	blx	r3
 }
   1d84e:	46c0      	nop			; (mov r8, r8)
   1d850:	46bd      	mov	sp, r7
   1d852:	b002      	add	sp, #8
   1d854:	bd80      	pop	{r7, pc}
   1d856:	46c0      	nop			; (mov r8, r8)
   1d858:	0001d735 	.word	0x0001d735

0001d85c <circular_buf_get>:

	 return r;
 }

 int circular_buf_get(cbuf_handle_t cbuf, uint8_t * data)
 {
   1d85c:	b580      	push	{r7, lr}
   1d85e:	b084      	sub	sp, #16
   1d860:	af00      	add	r7, sp, #0
   1d862:	6078      	str	r0, [r7, #4]
   1d864:	6039      	str	r1, [r7, #0]
	 //assert(cbuf && data && cbuf->buffer);
	 
	 int r = -1;
   1d866:	2301      	movs	r3, #1
   1d868:	425b      	negs	r3, r3
   1d86a:	60fb      	str	r3, [r7, #12]

	 if(!circular_buf_empty(cbuf))
   1d86c:	687b      	ldr	r3, [r7, #4]
   1d86e:	0018      	movs	r0, r3
   1d870:	4b0d      	ldr	r3, [pc, #52]	; (1d8a8 <circular_buf_get+0x4c>)
   1d872:	4798      	blx	r3
   1d874:	0003      	movs	r3, r0
   1d876:	001a      	movs	r2, r3
   1d878:	2301      	movs	r3, #1
   1d87a:	4053      	eors	r3, r2
   1d87c:	b2db      	uxtb	r3, r3
   1d87e:	2b00      	cmp	r3, #0
   1d880:	d00d      	beq.n	1d89e <circular_buf_get+0x42>
	 {
		 *data = cbuf->buffer[cbuf->tail];
   1d882:	687b      	ldr	r3, [r7, #4]
   1d884:	681a      	ldr	r2, [r3, #0]
   1d886:	687b      	ldr	r3, [r7, #4]
   1d888:	689b      	ldr	r3, [r3, #8]
   1d88a:	18d3      	adds	r3, r2, r3
   1d88c:	781a      	ldrb	r2, [r3, #0]
   1d88e:	683b      	ldr	r3, [r7, #0]
   1d890:	701a      	strb	r2, [r3, #0]
		 retreat_pointer(cbuf);
   1d892:	687b      	ldr	r3, [r7, #4]
   1d894:	0018      	movs	r0, r3
   1d896:	4b05      	ldr	r3, [pc, #20]	; (1d8ac <circular_buf_get+0x50>)
   1d898:	4798      	blx	r3

		 r = 0;
   1d89a:	2300      	movs	r3, #0
   1d89c:	60fb      	str	r3, [r7, #12]
	 }

	 return r;
   1d89e:	68fb      	ldr	r3, [r7, #12]
 }
   1d8a0:	0018      	movs	r0, r3
   1d8a2:	46bd      	mov	sp, r7
   1d8a4:	b004      	add	sp, #16
   1d8a6:	bd80      	pop	{r7, pc}
   1d8a8:	0001d8b1 	.word	0x0001d8b1
   1d8ac:	0001d795 	.word	0x0001d795

0001d8b0 <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
   1d8b0:	b580      	push	{r7, lr}
   1d8b2:	b082      	sub	sp, #8
   1d8b4:	af00      	add	r7, sp, #0
   1d8b6:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
   1d8b8:	687b      	ldr	r3, [r7, #4]
   1d8ba:	7c1b      	ldrb	r3, [r3, #16]
   1d8bc:	2201      	movs	r2, #1
   1d8be:	4053      	eors	r3, r2
   1d8c0:	b2db      	uxtb	r3, r3
   1d8c2:	2b00      	cmp	r3, #0
   1d8c4:	d007      	beq.n	1d8d6 <circular_buf_empty+0x26>
   1d8c6:	687b      	ldr	r3, [r7, #4]
   1d8c8:	685a      	ldr	r2, [r3, #4]
   1d8ca:	687b      	ldr	r3, [r7, #4]
   1d8cc:	689b      	ldr	r3, [r3, #8]
   1d8ce:	429a      	cmp	r2, r3
   1d8d0:	d101      	bne.n	1d8d6 <circular_buf_empty+0x26>
   1d8d2:	2301      	movs	r3, #1
   1d8d4:	e000      	b.n	1d8d8 <circular_buf_empty+0x28>
   1d8d6:	2300      	movs	r3, #0
   1d8d8:	1c1a      	adds	r2, r3, #0
   1d8da:	2301      	movs	r3, #1
   1d8dc:	4013      	ands	r3, r2
   1d8de:	b2db      	uxtb	r3, r3
 }
   1d8e0:	0018      	movs	r0, r3
   1d8e2:	46bd      	mov	sp, r7
   1d8e4:	b002      	add	sp, #8
   1d8e6:	bd80      	pop	{r7, pc}

0001d8e8 <system_interrupt_enable>:
{
   1d8e8:	b580      	push	{r7, lr}
   1d8ea:	b082      	sub	sp, #8
   1d8ec:	af00      	add	r7, sp, #0
   1d8ee:	0002      	movs	r2, r0
   1d8f0:	1dfb      	adds	r3, r7, #7
   1d8f2:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1d8f4:	4b06      	ldr	r3, [pc, #24]	; (1d910 <system_interrupt_enable+0x28>)
   1d8f6:	1dfa      	adds	r2, r7, #7
   1d8f8:	7812      	ldrb	r2, [r2, #0]
   1d8fa:	0011      	movs	r1, r2
   1d8fc:	221f      	movs	r2, #31
   1d8fe:	400a      	ands	r2, r1
   1d900:	2101      	movs	r1, #1
   1d902:	4091      	lsls	r1, r2
   1d904:	000a      	movs	r2, r1
   1d906:	601a      	str	r2, [r3, #0]
}
   1d908:	46c0      	nop			; (mov r8, r8)
   1d90a:	46bd      	mov	sp, r7
   1d90c:	b002      	add	sp, #8
   1d90e:	bd80      	pop	{r7, pc}
   1d910:	e000e100 	.word	0xe000e100

0001d914 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
   1d914:	b580      	push	{r7, lr}
   1d916:	b084      	sub	sp, #16
   1d918:	af00      	add	r7, sp, #0
   1d91a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
   1d91c:	687b      	ldr	r3, [r7, #4]
   1d91e:	681b      	ldr	r3, [r3, #0]
   1d920:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
   1d922:	68fb      	ldr	r3, [r7, #12]
   1d924:	69db      	ldr	r3, [r3, #28]
   1d926:	1e5a      	subs	r2, r3, #1
   1d928:	4193      	sbcs	r3, r2
   1d92a:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
   1d92c:	0018      	movs	r0, r3
   1d92e:	46bd      	mov	sp, r7
   1d930:	b004      	add	sp, #16
   1d932:	bd80      	pop	{r7, pc}

0001d934 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
   1d934:	b580      	push	{r7, lr}
   1d936:	b082      	sub	sp, #8
   1d938:	af00      	add	r7, sp, #0
   1d93a:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
   1d93c:	46c0      	nop			; (mov r8, r8)
   1d93e:	687b      	ldr	r3, [r7, #4]
   1d940:	0018      	movs	r0, r3
   1d942:	4b04      	ldr	r3, [pc, #16]	; (1d954 <_usart_wait_for_sync+0x20>)
   1d944:	4798      	blx	r3
   1d946:	1e03      	subs	r3, r0, #0
   1d948:	d1f9      	bne.n	1d93e <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
   1d94a:	46c0      	nop			; (mov r8, r8)
   1d94c:	46bd      	mov	sp, r7
   1d94e:	b002      	add	sp, #8
   1d950:	bd80      	pop	{r7, pc}
   1d952:	46c0      	nop			; (mov r8, r8)
   1d954:	0001d915 	.word	0x0001d915

0001d958 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
   1d958:	b580      	push	{r7, lr}
   1d95a:	b082      	sub	sp, #8
   1d95c:	af00      	add	r7, sp, #0
   1d95e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
   1d960:	687b      	ldr	r3, [r7, #4]
   1d962:	2280      	movs	r2, #128	; 0x80
   1d964:	05d2      	lsls	r2, r2, #23
   1d966:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   1d968:	687b      	ldr	r3, [r7, #4]
   1d96a:	2200      	movs	r2, #0
   1d96c:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
   1d96e:	687b      	ldr	r3, [r7, #4]
   1d970:	22ff      	movs	r2, #255	; 0xff
   1d972:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
   1d974:	687b      	ldr	r3, [r7, #4]
   1d976:	2200      	movs	r2, #0
   1d978:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   1d97a:	687b      	ldr	r3, [r7, #4]
   1d97c:	2200      	movs	r2, #0
   1d97e:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
   1d980:	687b      	ldr	r3, [r7, #4]
   1d982:	2296      	movs	r2, #150	; 0x96
   1d984:	0192      	lsls	r2, r2, #6
   1d986:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
   1d988:	687b      	ldr	r3, [r7, #4]
   1d98a:	2224      	movs	r2, #36	; 0x24
   1d98c:	2101      	movs	r1, #1
   1d98e:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
   1d990:	687b      	ldr	r3, [r7, #4]
   1d992:	2225      	movs	r2, #37	; 0x25
   1d994:	2101      	movs	r1, #1
   1d996:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
   1d998:	687b      	ldr	r3, [r7, #4]
   1d99a:	2226      	movs	r2, #38	; 0x26
   1d99c:	2100      	movs	r1, #0
   1d99e:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
   1d9a0:	687b      	ldr	r3, [r7, #4]
   1d9a2:	2227      	movs	r2, #39	; 0x27
   1d9a4:	2100      	movs	r1, #0
   1d9a6:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
   1d9a8:	687b      	ldr	r3, [r7, #4]
   1d9aa:	2200      	movs	r2, #0
   1d9ac:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
   1d9ae:	687b      	ldr	r3, [r7, #4]
   1d9b0:	2288      	movs	r2, #136	; 0x88
   1d9b2:	0352      	lsls	r2, r2, #13
   1d9b4:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
   1d9b6:	687b      	ldr	r3, [r7, #4]
   1d9b8:	222c      	movs	r2, #44	; 0x2c
   1d9ba:	2100      	movs	r1, #0
   1d9bc:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
   1d9be:	687b      	ldr	r3, [r7, #4]
   1d9c0:	222d      	movs	r2, #45	; 0x2d
   1d9c2:	2100      	movs	r1, #0
   1d9c4:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   1d9c6:	687b      	ldr	r3, [r7, #4]
   1d9c8:	2200      	movs	r2, #0
   1d9ca:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
   1d9cc:	687b      	ldr	r3, [r7, #4]
   1d9ce:	2200      	movs	r2, #0
   1d9d0:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
   1d9d2:	687b      	ldr	r3, [r7, #4]
   1d9d4:	2200      	movs	r2, #0
   1d9d6:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
   1d9d8:	687b      	ldr	r3, [r7, #4]
   1d9da:	2200      	movs	r2, #0
   1d9dc:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   1d9de:	687b      	ldr	r3, [r7, #4]
   1d9e0:	2200      	movs	r2, #0
   1d9e2:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   1d9e4:	687b      	ldr	r3, [r7, #4]
   1d9e6:	2200      	movs	r2, #0
   1d9e8:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
   1d9ea:	687b      	ldr	r3, [r7, #4]
   1d9ec:	2200      	movs	r2, #0
   1d9ee:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
   1d9f0:	687b      	ldr	r3, [r7, #4]
   1d9f2:	2200      	movs	r2, #0
   1d9f4:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
   1d9f6:	687b      	ldr	r3, [r7, #4]
   1d9f8:	2200      	movs	r2, #0
   1d9fa:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
   1d9fc:	687b      	ldr	r3, [r7, #4]
   1d9fe:	2200      	movs	r2, #0
   1da00:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
   1da02:	687b      	ldr	r3, [r7, #4]
   1da04:	2213      	movs	r2, #19
   1da06:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
   1da08:	687b      	ldr	r3, [r7, #4]
   1da0a:	2200      	movs	r2, #0
   1da0c:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
   1da0e:	46c0      	nop			; (mov r8, r8)
   1da10:	46bd      	mov	sp, r7
   1da12:	b002      	add	sp, #8
   1da14:	bd80      	pop	{r7, pc}
	...

0001da18 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
   1da18:	b580      	push	{r7, lr}
   1da1a:	b084      	sub	sp, #16
   1da1c:	af00      	add	r7, sp, #0
   1da1e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   1da20:	687b      	ldr	r3, [r7, #4]
   1da22:	681b      	ldr	r3, [r3, #0]
   1da24:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1da26:	687b      	ldr	r3, [r7, #4]
   1da28:	681b      	ldr	r3, [r3, #0]
   1da2a:	0018      	movs	r0, r3
   1da2c:	4b09      	ldr	r3, [pc, #36]	; (1da54 <usart_enable+0x3c>)
   1da2e:	4798      	blx	r3
   1da30:	0003      	movs	r3, r0
   1da32:	0018      	movs	r0, r3
   1da34:	4b08      	ldr	r3, [pc, #32]	; (1da58 <usart_enable+0x40>)
   1da36:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   1da38:	687b      	ldr	r3, [r7, #4]
   1da3a:	0018      	movs	r0, r3
   1da3c:	4b07      	ldr	r3, [pc, #28]	; (1da5c <usart_enable+0x44>)
   1da3e:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   1da40:	68fb      	ldr	r3, [r7, #12]
   1da42:	681b      	ldr	r3, [r3, #0]
   1da44:	2202      	movs	r2, #2
   1da46:	431a      	orrs	r2, r3
   1da48:	68fb      	ldr	r3, [r7, #12]
   1da4a:	601a      	str	r2, [r3, #0]
}
   1da4c:	46c0      	nop			; (mov r8, r8)
   1da4e:	46bd      	mov	sp, r7
   1da50:	b004      	add	sp, #16
   1da52:	bd80      	pop	{r7, pc}
   1da54:	000270bd 	.word	0x000270bd
   1da58:	0001d8e9 	.word	0x0001d8e9
   1da5c:	0001d935 	.word	0x0001d935

0001da60 <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
   1da60:	b580      	push	{r7, lr}
   1da62:	b082      	sub	sp, #8
   1da64:	af00      	add	r7, sp, #0
   1da66:	6078      	str	r0, [r7, #4]
   1da68:	000a      	movs	r2, r1
   1da6a:	1cfb      	adds	r3, r7, #3
   1da6c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
   1da6e:	687b      	ldr	r3, [r7, #4]
   1da70:	2231      	movs	r2, #49	; 0x31
   1da72:	5c9b      	ldrb	r3, [r3, r2]
   1da74:	b25a      	sxtb	r2, r3
   1da76:	1cfb      	adds	r3, r7, #3
   1da78:	781b      	ldrb	r3, [r3, #0]
   1da7a:	2101      	movs	r1, #1
   1da7c:	4099      	lsls	r1, r3
   1da7e:	000b      	movs	r3, r1
   1da80:	b25b      	sxtb	r3, r3
   1da82:	4313      	orrs	r3, r2
   1da84:	b25b      	sxtb	r3, r3
   1da86:	b2d9      	uxtb	r1, r3
   1da88:	687b      	ldr	r3, [r7, #4]
   1da8a:	2231      	movs	r2, #49	; 0x31
   1da8c:	5499      	strb	r1, [r3, r2]

}
   1da8e:	46c0      	nop			; (mov r8, r8)
   1da90:	46bd      	mov	sp, r7
   1da92:	b002      	add	sp, #8
   1da94:	bd80      	pop	{r7, pc}
	...

0001da98 <InitializeSerialConsole>:
*				asynchronous reads and writes. 
* @note			Call from main once to initialize Hardware.
*****************************************************************************/

void InitializeSerialConsole(void)
{
   1da98:	b580      	push	{r7, lr}
   1da9a:	af00      	add	r7, sp, #0

	//Initialize circular buffers for RX and TX
	cbufRx = circular_buf_init((uint8_t*)rxCharacterBuffer, RX_BUFFER_SIZE);
   1da9c:	2380      	movs	r3, #128	; 0x80
   1da9e:	005a      	lsls	r2, r3, #1
   1daa0:	4b0f      	ldr	r3, [pc, #60]	; (1dae0 <InitializeSerialConsole+0x48>)
   1daa2:	0011      	movs	r1, r2
   1daa4:	0018      	movs	r0, r3
   1daa6:	4b0f      	ldr	r3, [pc, #60]	; (1dae4 <InitializeSerialConsole+0x4c>)
   1daa8:	4798      	blx	r3
   1daaa:	0002      	movs	r2, r0
   1daac:	4b0e      	ldr	r3, [pc, #56]	; (1dae8 <InitializeSerialConsole+0x50>)
   1daae:	601a      	str	r2, [r3, #0]
	cbufTx = circular_buf_init((uint8_t*)txCharacterBuffer, TX_BUFFER_SIZE);
   1dab0:	2380      	movs	r3, #128	; 0x80
   1dab2:	009a      	lsls	r2, r3, #2
   1dab4:	4b0d      	ldr	r3, [pc, #52]	; (1daec <InitializeSerialConsole+0x54>)
   1dab6:	0011      	movs	r1, r2
   1dab8:	0018      	movs	r0, r3
   1daba:	4b0a      	ldr	r3, [pc, #40]	; (1dae4 <InitializeSerialConsole+0x4c>)
   1dabc:	4798      	blx	r3
   1dabe:	0002      	movs	r2, r0
   1dac0:	4b0b      	ldr	r3, [pc, #44]	; (1daf0 <InitializeSerialConsole+0x58>)
   1dac2:	601a      	str	r2, [r3, #0]

	//Configure USART and Callbacks
	configure_usart();
   1dac4:	4b0b      	ldr	r3, [pc, #44]	; (1daf4 <InitializeSerialConsole+0x5c>)
   1dac6:	4798      	blx	r3
	configure_usart_callbacks();
   1dac8:	4b0b      	ldr	r3, [pc, #44]	; (1daf8 <InitializeSerialConsole+0x60>)
   1daca:	4798      	blx	r3
	
	
	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Kicks off constant reading of characters
   1dacc:	490b      	ldr	r1, [pc, #44]	; (1dafc <InitializeSerialConsole+0x64>)
   1dace:	4b0c      	ldr	r3, [pc, #48]	; (1db00 <InitializeSerialConsole+0x68>)
   1dad0:	2201      	movs	r2, #1
   1dad2:	0018      	movs	r0, r3
   1dad4:	4b0b      	ldr	r3, [pc, #44]	; (1db04 <InitializeSerialConsole+0x6c>)
   1dad6:	4798      	blx	r3

	//Add any other calls you need to do to initialize your Serial Console
}
   1dad8:	46c0      	nop			; (mov r8, r8)
   1dada:	46bd      	mov	sp, r7
   1dadc:	bd80      	pop	{r7, pc}
   1dade:	46c0      	nop			; (mov r8, r8)
   1dae0:	200052ac 	.word	0x200052ac
   1dae4:	0001d7c9 	.word	0x0001d7c9
   1dae8:	200050a4 	.word	0x200050a4
   1daec:	200050ac 	.word	0x200050ac
   1daf0:	200053b0 	.word	0x200053b0
   1daf4:	0001dc6d 	.word	0x0001dc6d
   1daf8:	0001dce5 	.word	0x0001dce5
   1dafc:	200050a8 	.word	0x200050a8
   1db00:	20005070 	.word	0x20005070
   1db04:	00028965 	.word	0x00028965

0001db08 <SerialConsoleWriteString>:
* @brief		Writes a string to be written to the uart. Copies the string to a ring buffer that is used to hold the text send to the uart
* @details		Uses the ringbuffer 'cbufTx', which in turn uses the array 'txCharacterBuffer'. Modified to be thread safe.
* @note			Use to send a string of characters to the user via UART
*****************************************************************************/
void SerialConsoleWriteString(const char * string)
{
   1db08:	b580      	push	{r7, lr}
   1db0a:	b084      	sub	sp, #16
   1db0c:	af00      	add	r7, sp, #0
   1db0e:	6078      	str	r0, [r7, #4]
vTaskSuspendAll();
   1db10:	4b1a      	ldr	r3, [pc, #104]	; (1db7c <SerialConsoleWriteString+0x74>)
   1db12:	4798      	blx	r3
 	if(string != NULL)
   1db14:	687b      	ldr	r3, [r7, #4]
   1db16:	2b00      	cmp	r3, #0
   1db18:	d02a      	beq.n	1db70 <SerialConsoleWriteString+0x68>
	{
		for (size_t iter = 0; iter < strlen(string); iter++)
   1db1a:	2300      	movs	r3, #0
   1db1c:	60fb      	str	r3, [r7, #12]
   1db1e:	e00b      	b.n	1db38 <SerialConsoleWriteString+0x30>
		{
			circular_buf_put(cbufTx, string[iter]);
   1db20:	4b17      	ldr	r3, [pc, #92]	; (1db80 <SerialConsoleWriteString+0x78>)
   1db22:	6818      	ldr	r0, [r3, #0]
   1db24:	687a      	ldr	r2, [r7, #4]
   1db26:	68fb      	ldr	r3, [r7, #12]
   1db28:	18d3      	adds	r3, r2, r3
   1db2a:	781b      	ldrb	r3, [r3, #0]
   1db2c:	0019      	movs	r1, r3
   1db2e:	4b15      	ldr	r3, [pc, #84]	; (1db84 <SerialConsoleWriteString+0x7c>)
   1db30:	4798      	blx	r3
		for (size_t iter = 0; iter < strlen(string); iter++)
   1db32:	68fb      	ldr	r3, [r7, #12]
   1db34:	3301      	adds	r3, #1
   1db36:	60fb      	str	r3, [r7, #12]
   1db38:	687b      	ldr	r3, [r7, #4]
   1db3a:	0018      	movs	r0, r3
   1db3c:	4b12      	ldr	r3, [pc, #72]	; (1db88 <SerialConsoleWriteString+0x80>)
   1db3e:	4798      	blx	r3
   1db40:	0002      	movs	r2, r0
   1db42:	68fb      	ldr	r3, [r7, #12]
   1db44:	429a      	cmp	r2, r3
   1db46:	d8eb      	bhi.n	1db20 <SerialConsoleWriteString+0x18>
		}

		if(usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK)
   1db48:	4b10      	ldr	r3, [pc, #64]	; (1db8c <SerialConsoleWriteString+0x84>)
   1db4a:	2101      	movs	r1, #1
   1db4c:	0018      	movs	r0, r3
   1db4e:	4b10      	ldr	r3, [pc, #64]	; (1db90 <SerialConsoleWriteString+0x88>)
   1db50:	4798      	blx	r3
   1db52:	1e03      	subs	r3, r0, #0
   1db54:	d10c      	bne.n	1db70 <SerialConsoleWriteString+0x68>
		{
			circular_buf_get(cbufTx, (uint8_t*) &latestTx); //Perform only if the SERCOM TX is free (not busy)
   1db56:	4b0a      	ldr	r3, [pc, #40]	; (1db80 <SerialConsoleWriteString+0x78>)
   1db58:	681b      	ldr	r3, [r3, #0]
   1db5a:	4a0e      	ldr	r2, [pc, #56]	; (1db94 <SerialConsoleWriteString+0x8c>)
   1db5c:	0011      	movs	r1, r2
   1db5e:	0018      	movs	r0, r3
   1db60:	4b0d      	ldr	r3, [pc, #52]	; (1db98 <SerialConsoleWriteString+0x90>)
   1db62:	4798      	blx	r3
			usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
   1db64:	490b      	ldr	r1, [pc, #44]	; (1db94 <SerialConsoleWriteString+0x8c>)
   1db66:	4b09      	ldr	r3, [pc, #36]	; (1db8c <SerialConsoleWriteString+0x84>)
   1db68:	2201      	movs	r2, #1
   1db6a:	0018      	movs	r0, r3
   1db6c:	4b0b      	ldr	r3, [pc, #44]	; (1db9c <SerialConsoleWriteString+0x94>)
   1db6e:	4798      	blx	r3
		}
	}
xTaskResumeAll();
   1db70:	4b0b      	ldr	r3, [pc, #44]	; (1dba0 <SerialConsoleWriteString+0x98>)
   1db72:	4798      	blx	r3
}
   1db74:	46c0      	nop			; (mov r8, r8)
   1db76:	46bd      	mov	sp, r7
   1db78:	b004      	add	sp, #16
   1db7a:	bd80      	pop	{r7, pc}
   1db7c:	0001c175 	.word	0x0001c175
   1db80:	200053b0 	.word	0x200053b0
   1db84:	0001d829 	.word	0x0001d829
   1db88:	0003443b 	.word	0x0003443b
   1db8c:	20005070 	.word	0x20005070
   1db90:	000289ad 	.word	0x000289ad
   1db94:	200053ac 	.word	0x200053ac
   1db98:	0001d85d 	.word	0x0001d85d
   1db9c:	0002891d 	.word	0x0002891d
   1dba0:	0001c18d 	.word	0x0001c18d

0001dba4 <SerialConsoleReadCharacter>:
* @param[in]	Pointer to a character. This function will return the character from the RX buffer into this pointer
* @return		Returns -1 if there are no characters in the buffer
* @note			Use to receive characters from the RX buffer (FIFO)
*****************************************************************************/
int SerialConsoleReadCharacter(uint8_t *rxChar)
{
   1dba4:	b580      	push	{r7, lr}
   1dba6:	b084      	sub	sp, #16
   1dba8:	af00      	add	r7, sp, #0
   1dbaa:	6078      	str	r0, [r7, #4]
	vTaskSuspendAll();
   1dbac:	4b08      	ldr	r3, [pc, #32]	; (1dbd0 <SerialConsoleReadCharacter+0x2c>)
   1dbae:	4798      	blx	r3
	int a = circular_buf_get(cbufRx, (uint8_t*) rxChar);
   1dbb0:	4b08      	ldr	r3, [pc, #32]	; (1dbd4 <SerialConsoleReadCharacter+0x30>)
   1dbb2:	681b      	ldr	r3, [r3, #0]
   1dbb4:	687a      	ldr	r2, [r7, #4]
   1dbb6:	0011      	movs	r1, r2
   1dbb8:	0018      	movs	r0, r3
   1dbba:	4b07      	ldr	r3, [pc, #28]	; (1dbd8 <SerialConsoleReadCharacter+0x34>)
   1dbbc:	4798      	blx	r3
   1dbbe:	0003      	movs	r3, r0
   1dbc0:	60fb      	str	r3, [r7, #12]
	xTaskResumeAll();
   1dbc2:	4b06      	ldr	r3, [pc, #24]	; (1dbdc <SerialConsoleReadCharacter+0x38>)
   1dbc4:	4798      	blx	r3
	return a;
   1dbc6:	68fb      	ldr	r3, [r7, #12]

}
   1dbc8:	0018      	movs	r0, r3
   1dbca:	46bd      	mov	sp, r7
   1dbcc:	b004      	add	sp, #16
   1dbce:	bd80      	pop	{r7, pc}
   1dbd0:	0001c175 	.word	0x0001c175
   1dbd4:	200050a4 	.word	0x200050a4
   1dbd8:	0001d85d 	.word	0x0001d85d
   1dbdc:	0001c18d 	.word	0x0001c18d

0001dbe0 <getLogLevel>:
* @return		Returns the current debug level of the system.
* @note
*****************************************************************************/

enum eDebugLogLevels getLogLevel(void)
{
   1dbe0:	b580      	push	{r7, lr}
   1dbe2:	af00      	add	r7, sp, #0
return currentDebugLevel;
   1dbe4:	4b02      	ldr	r3, [pc, #8]	; (1dbf0 <getLogLevel+0x10>)
   1dbe6:	781b      	ldrb	r3, [r3, #0]
}
   1dbe8:	0018      	movs	r0, r3
   1dbea:	46bd      	mov	sp, r7
   1dbec:	bd80      	pop	{r7, pc}
   1dbee:	46c0      	nop			; (mov r8, r8)
   1dbf0:	20003c3c 	.word	0x20003c3c

0001dbf4 <LogMessage>:
* @fn			LogMessage (Students to fill out this)
* @brief
* @note
*****************************************************************************/
void LogMessage(enum eDebugLogLevels level, const char *format, ...)
{
   1dbf4:	b40e      	push	{r1, r2, r3}
   1dbf6:	b590      	push	{r4, r7, lr}
   1dbf8:	b084      	sub	sp, #16
   1dbfa:	af00      	add	r7, sp, #0
   1dbfc:	0002      	movs	r2, r0
   1dbfe:	1dfb      	adds	r3, r7, #7
   1dc00:	701a      	strb	r2, [r3, #0]

if(getLogLevel() <= level){
   1dc02:	4b0e      	ldr	r3, [pc, #56]	; (1dc3c <LogMessage+0x48>)
   1dc04:	4798      	blx	r3
   1dc06:	0003      	movs	r3, r0
   1dc08:	001a      	movs	r2, r3
   1dc0a:	1dfb      	adds	r3, r7, #7
   1dc0c:	781b      	ldrb	r3, [r3, #0]
   1dc0e:	4293      	cmp	r3, r2
   1dc10:	d30c      	bcc.n	1dc2c <LogMessage+0x38>
	va_list ap;
	va_start(ap, format);
   1dc12:	2320      	movs	r3, #32
   1dc14:	18fb      	adds	r3, r7, r3
   1dc16:	60fb      	str	r3, [r7, #12]
	vsnprintf(debugBuffer, 127, format, ap);
   1dc18:	68fb      	ldr	r3, [r7, #12]
   1dc1a:	69fa      	ldr	r2, [r7, #28]
   1dc1c:	4808      	ldr	r0, [pc, #32]	; (1dc40 <LogMessage+0x4c>)
   1dc1e:	217f      	movs	r1, #127	; 0x7f
   1dc20:	4c08      	ldr	r4, [pc, #32]	; (1dc44 <LogMessage+0x50>)
   1dc22:	47a0      	blx	r4
	SerialConsoleWriteString(debugBuffer);
   1dc24:	4b06      	ldr	r3, [pc, #24]	; (1dc40 <LogMessage+0x4c>)
   1dc26:	0018      	movs	r0, r3
   1dc28:	4b07      	ldr	r3, [pc, #28]	; (1dc48 <LogMessage+0x54>)
   1dc2a:	4798      	blx	r3
	va_end(ap);
}
};
   1dc2c:	46c0      	nop			; (mov r8, r8)
   1dc2e:	46bd      	mov	sp, r7
   1dc30:	b004      	add	sp, #16
   1dc32:	bc90      	pop	{r4, r7}
   1dc34:	bc08      	pop	{r3}
   1dc36:	b003      	add	sp, #12
   1dc38:	4718      	bx	r3
   1dc3a:	46c0      	nop			; (mov r8, r8)
   1dc3c:	0001dbe1 	.word	0x0001dbe1
   1dc40:	20004ff0 	.word	0x20004ff0
   1dc44:	00034675 	.word	0x00034675
   1dc48:	0001db09 	.word	0x0001db09

0001dc4c <LogMessageDebug>:
* @fn			LogMessage Debug(Students to fill out this)
* @brief
* @note
*****************************************************************************/
void LogMessageDebug(const char *format, ...)
{
   1dc4c:	b40f      	push	{r0, r1, r2, r3}
   1dc4e:	b580      	push	{r7, lr}
   1dc50:	af00      	add	r7, sp, #0

LogMessage(LOG_DEBUG_LVL, format);
   1dc52:	68bb      	ldr	r3, [r7, #8]
   1dc54:	0019      	movs	r1, r3
   1dc56:	2001      	movs	r0, #1
   1dc58:	4b03      	ldr	r3, [pc, #12]	; (1dc68 <LogMessageDebug+0x1c>)
   1dc5a:	4798      	blx	r3

};
   1dc5c:	46c0      	nop			; (mov r8, r8)
   1dc5e:	46bd      	mov	sp, r7
   1dc60:	bc80      	pop	{r7}
   1dc62:	bc08      	pop	{r3}
   1dc64:	b004      	add	sp, #16
   1dc66:	4718      	bx	r3
   1dc68:	0001dbf5 	.word	0x0001dbf5

0001dc6c <configure_usart>:
* @fn			static void configure_usart(void)
* @brief		Code to configure the SERCOM "EDBG_CDC_MODULE" to be a UART channel running at 115200 8N1
* @note			
*****************************************************************************/
static void configure_usart(void)
{
   1dc6c:	b580      	push	{r7, lr}
   1dc6e:	b090      	sub	sp, #64	; 0x40
   1dc70:	af00      	add	r7, sp, #0
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);
   1dc72:	003b      	movs	r3, r7
   1dc74:	0018      	movs	r0, r3
   1dc76:	4b14      	ldr	r3, [pc, #80]	; (1dcc8 <configure_usart+0x5c>)
   1dc78:	4798      	blx	r3

	config_usart.baudrate    = 115200;
   1dc7a:	003b      	movs	r3, r7
   1dc7c:	22e1      	movs	r2, #225	; 0xe1
   1dc7e:	0252      	lsls	r2, r2, #9
   1dc80:	621a      	str	r2, [r3, #32]
	config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
   1dc82:	003b      	movs	r3, r7
   1dc84:	22c4      	movs	r2, #196	; 0xc4
   1dc86:	0392      	lsls	r2, r2, #14
   1dc88:	60da      	str	r2, [r3, #12]
	config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
   1dc8a:	003b      	movs	r3, r7
   1dc8c:	2201      	movs	r2, #1
   1dc8e:	4252      	negs	r2, r2
   1dc90:	631a      	str	r2, [r3, #48]	; 0x30
	config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
   1dc92:	003b      	movs	r3, r7
   1dc94:	2201      	movs	r2, #1
   1dc96:	4252      	negs	r2, r2
   1dc98:	635a      	str	r2, [r3, #52]	; 0x34
	config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
   1dc9a:	003b      	movs	r3, r7
   1dc9c:	4a0b      	ldr	r2, [pc, #44]	; (1dccc <configure_usart+0x60>)
   1dc9e:	639a      	str	r2, [r3, #56]	; 0x38
	config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
   1dca0:	003b      	movs	r3, r7
   1dca2:	4a0b      	ldr	r2, [pc, #44]	; (1dcd0 <configure_usart+0x64>)
   1dca4:	63da      	str	r2, [r3, #60]	; 0x3c
	while (usart_init(&usart_instance,
   1dca6:	46c0      	nop			; (mov r8, r8)
   1dca8:	003a      	movs	r2, r7
   1dcaa:	490a      	ldr	r1, [pc, #40]	; (1dcd4 <configure_usart+0x68>)
   1dcac:	4b0a      	ldr	r3, [pc, #40]	; (1dcd8 <configure_usart+0x6c>)
   1dcae:	0018      	movs	r0, r3
   1dcb0:	4b0a      	ldr	r3, [pc, #40]	; (1dcdc <configure_usart+0x70>)
   1dcb2:	4798      	blx	r3
   1dcb4:	1e03      	subs	r3, r0, #0
   1dcb6:	d1f7      	bne.n	1dca8 <configure_usart+0x3c>
					  &config_usart) != STATUS_OK) 
	{

	}
	
	usart_enable(&usart_instance);
   1dcb8:	4b07      	ldr	r3, [pc, #28]	; (1dcd8 <configure_usart+0x6c>)
   1dcba:	0018      	movs	r0, r3
   1dcbc:	4b08      	ldr	r3, [pc, #32]	; (1dce0 <configure_usart+0x74>)
   1dcbe:	4798      	blx	r3
}
   1dcc0:	46c0      	nop			; (mov r8, r8)
   1dcc2:	46bd      	mov	sp, r7
   1dcc4:	b010      	add	sp, #64	; 0x40
   1dcc6:	bd80      	pop	{r7, pc}
   1dcc8:	0001d959 	.word	0x0001d959
   1dccc:	002a0003 	.word	0x002a0003
   1dcd0:	002b0003 	.word	0x002b0003
   1dcd4:	42001800 	.word	0x42001800
   1dcd8:	20005070 	.word	0x20005070
   1dcdc:	00028521 	.word	0x00028521
   1dce0:	0001da19 	.word	0x0001da19

0001dce4 <configure_usart_callbacks>:
* @fn			static void configure_usart_callbacks(void)
* @brief		Code to register callbacks
* @note
*****************************************************************************/
static void configure_usart_callbacks(void)
{
   1dce4:	b580      	push	{r7, lr}
   1dce6:	af00      	add	r7, sp, #0
	usart_register_callback(&usart_instance,
   1dce8:	490c      	ldr	r1, [pc, #48]	; (1dd1c <configure_usart_callbacks+0x38>)
   1dcea:	4b0d      	ldr	r3, [pc, #52]	; (1dd20 <configure_usart_callbacks+0x3c>)
   1dcec:	2200      	movs	r2, #0
   1dcee:	0018      	movs	r0, r3
   1dcf0:	4b0c      	ldr	r3, [pc, #48]	; (1dd24 <configure_usart_callbacks+0x40>)
   1dcf2:	4798      	blx	r3
	usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_register_callback(&usart_instance,
   1dcf4:	490c      	ldr	r1, [pc, #48]	; (1dd28 <configure_usart_callbacks+0x44>)
   1dcf6:	4b0a      	ldr	r3, [pc, #40]	; (1dd20 <configure_usart_callbacks+0x3c>)
   1dcf8:	2201      	movs	r2, #1
   1dcfa:	0018      	movs	r0, r3
   1dcfc:	4b09      	ldr	r3, [pc, #36]	; (1dd24 <configure_usart_callbacks+0x40>)
   1dcfe:	4798      	blx	r3
	usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
   1dd00:	4b07      	ldr	r3, [pc, #28]	; (1dd20 <configure_usart_callbacks+0x3c>)
   1dd02:	2100      	movs	r1, #0
   1dd04:	0018      	movs	r0, r3
   1dd06:	4b09      	ldr	r3, [pc, #36]	; (1dd2c <configure_usart_callbacks+0x48>)
   1dd08:	4798      	blx	r3
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
   1dd0a:	4b05      	ldr	r3, [pc, #20]	; (1dd20 <configure_usart_callbacks+0x3c>)
   1dd0c:	2101      	movs	r1, #1
   1dd0e:	0018      	movs	r0, r3
   1dd10:	4b06      	ldr	r3, [pc, #24]	; (1dd2c <configure_usart_callbacks+0x48>)
   1dd12:	4798      	blx	r3
}
   1dd14:	46c0      	nop			; (mov r8, r8)
   1dd16:	46bd      	mov	sp, r7
   1dd18:	bd80      	pop	{r7, pc}
   1dd1a:	46c0      	nop			; (mov r8, r8)
   1dd1c:	0001dd71 	.word	0x0001dd71
   1dd20:	20005070 	.word	0x20005070
   1dd24:	000288d5 	.word	0x000288d5
   1dd28:	0001dd31 	.word	0x0001dd31
   1dd2c:	0001da61 	.word	0x0001da61

0001dd30 <usart_read_callback>:
* @fn			void usart_read_callback(struct usart_module *const usart_module)
* @brief		Callback called when the system finishes receives all the bytes requested from a UART read job
* @note
*****************************************************************************/
void usart_read_callback(struct usart_module *const usart_module)
{
   1dd30:	b580      	push	{r7, lr}
   1dd32:	b082      	sub	sp, #8
   1dd34:	af00      	add	r7, sp, #0
   1dd36:	6078      	str	r0, [r7, #4]

	circular_buf_put(cbufRx, (uint8_t) latestRx); //Add the latest read character into the RX circular Buffer
   1dd38:	4b08      	ldr	r3, [pc, #32]	; (1dd5c <usart_read_callback+0x2c>)
   1dd3a:	681a      	ldr	r2, [r3, #0]
   1dd3c:	4b08      	ldr	r3, [pc, #32]	; (1dd60 <usart_read_callback+0x30>)
   1dd3e:	781b      	ldrb	r3, [r3, #0]
   1dd40:	0019      	movs	r1, r3
   1dd42:	0010      	movs	r0, r2
   1dd44:	4b07      	ldr	r3, [pc, #28]	; (1dd64 <usart_read_callback+0x34>)
   1dd46:	4798      	blx	r3
	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Order the MCU to keep reading
   1dd48:	4905      	ldr	r1, [pc, #20]	; (1dd60 <usart_read_callback+0x30>)
   1dd4a:	4b07      	ldr	r3, [pc, #28]	; (1dd68 <usart_read_callback+0x38>)
   1dd4c:	2201      	movs	r2, #1
   1dd4e:	0018      	movs	r0, r3
   1dd50:	4b06      	ldr	r3, [pc, #24]	; (1dd6c <usart_read_callback+0x3c>)
   1dd52:	4798      	blx	r3
	
}
   1dd54:	46c0      	nop			; (mov r8, r8)
   1dd56:	46bd      	mov	sp, r7
   1dd58:	b002      	add	sp, #8
   1dd5a:	bd80      	pop	{r7, pc}
   1dd5c:	200050a4 	.word	0x200050a4
   1dd60:	200050a8 	.word	0x200050a8
   1dd64:	0001d829 	.word	0x0001d829
   1dd68:	20005070 	.word	0x20005070
   1dd6c:	00028965 	.word	0x00028965

0001dd70 <usart_write_callback>:
* @fn			void usart_write_callback(struct usart_module *const usart_module)
* @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
* @note
*****************************************************************************/
void usart_write_callback(struct usart_module *const usart_module)
{
   1dd70:	b580      	push	{r7, lr}
   1dd72:	b082      	sub	sp, #8
   1dd74:	af00      	add	r7, sp, #0
   1dd76:	6078      	str	r0, [r7, #4]
	if(circular_buf_get(cbufTx, (uint8_t*) &latestTx) != -1) //Only continue if there are more characters to send
   1dd78:	4b09      	ldr	r3, [pc, #36]	; (1dda0 <usart_write_callback+0x30>)
   1dd7a:	681b      	ldr	r3, [r3, #0]
   1dd7c:	4a09      	ldr	r2, [pc, #36]	; (1dda4 <usart_write_callback+0x34>)
   1dd7e:	0011      	movs	r1, r2
   1dd80:	0018      	movs	r0, r3
   1dd82:	4b09      	ldr	r3, [pc, #36]	; (1dda8 <usart_write_callback+0x38>)
   1dd84:	4798      	blx	r3
   1dd86:	0003      	movs	r3, r0
   1dd88:	3301      	adds	r3, #1
   1dd8a:	d005      	beq.n	1dd98 <usart_write_callback+0x28>
	{
		usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
   1dd8c:	4905      	ldr	r1, [pc, #20]	; (1dda4 <usart_write_callback+0x34>)
   1dd8e:	4b07      	ldr	r3, [pc, #28]	; (1ddac <usart_write_callback+0x3c>)
   1dd90:	2201      	movs	r2, #1
   1dd92:	0018      	movs	r0, r3
   1dd94:	4b06      	ldr	r3, [pc, #24]	; (1ddb0 <usart_write_callback+0x40>)
   1dd96:	4798      	blx	r3
	}
	
}
   1dd98:	46c0      	nop			; (mov r8, r8)
   1dd9a:	46bd      	mov	sp, r7
   1dd9c:	b002      	add	sp, #8
   1dd9e:	bd80      	pop	{r7, pc}
   1dda0:	200053b0 	.word	0x200053b0
   1dda4:	200053ac 	.word	0x200053ac
   1dda8:	0001d85d 	.word	0x0001d85d
   1ddac:	20005070 	.word	0x20005070
   1ddb0:	0002891d 	.word	0x0002891d

0001ddb4 <SDMMC_UNSTUFF_BITS>:
 * \brief Macro function to extract a bits field from a large SD MMC register
 * Used by : CSD, SCR, Switch status
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
   1ddb4:	b590      	push	{r4, r7, lr}
   1ddb6:	b087      	sub	sp, #28
   1ddb8:	af00      	add	r7, sp, #0
   1ddba:	60f8      	str	r0, [r7, #12]
   1ddbc:	000c      	movs	r4, r1
   1ddbe:	0010      	movs	r0, r2
   1ddc0:	0019      	movs	r1, r3
   1ddc2:	230a      	movs	r3, #10
   1ddc4:	18fb      	adds	r3, r7, r3
   1ddc6:	1c22      	adds	r2, r4, #0
   1ddc8:	801a      	strh	r2, [r3, #0]
   1ddca:	2308      	movs	r3, #8
   1ddcc:	18fb      	adds	r3, r7, r3
   1ddce:	1c02      	adds	r2, r0, #0
   1ddd0:	801a      	strh	r2, [r3, #0]
   1ddd2:	1dfb      	adds	r3, r7, #7
   1ddd4:	1c0a      	adds	r2, r1, #0
   1ddd6:	701a      	strb	r2, [r3, #0]
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   1ddd8:	230a      	movs	r3, #10
   1ddda:	18fb      	adds	r3, r7, r3
   1dddc:	881a      	ldrh	r2, [r3, #0]
   1ddde:	2308      	movs	r3, #8
   1dde0:	18fb      	adds	r3, r7, r3
   1dde2:	881b      	ldrh	r3, [r3, #0]
   1dde4:	1ad3      	subs	r3, r2, r3
   1dde6:	3307      	adds	r3, #7
   1dde8:	2b00      	cmp	r3, #0
   1ddea:	da00      	bge.n	1ddee <SDMMC_UNSTUFF_BITS+0x3a>
   1ddec:	3307      	adds	r3, #7
   1ddee:	10db      	asrs	r3, r3, #3
   1ddf0:	3b01      	subs	r3, #1
   1ddf2:	68fa      	ldr	r2, [r7, #12]
   1ddf4:	18d3      	adds	r3, r2, r3
   1ddf6:	781b      	ldrb	r3, [r3, #0]
   1ddf8:	0019      	movs	r1, r3
   1ddfa:	2308      	movs	r3, #8
   1ddfc:	18fb      	adds	r3, r7, r3
   1ddfe:	881b      	ldrh	r3, [r3, #0]
   1de00:	2207      	movs	r2, #7
   1de02:	4013      	ands	r3, r2
   1de04:	4119      	asrs	r1, r3
   1de06:	000b      	movs	r3, r1
   1de08:	617b      	str	r3, [r7, #20]
	if (((pos % 8) + size) > 8) {
   1de0a:	2308      	movs	r3, #8
   1de0c:	18fb      	adds	r3, r7, r3
   1de0e:	881b      	ldrh	r3, [r3, #0]
   1de10:	2207      	movs	r2, #7
   1de12:	401a      	ands	r2, r3
   1de14:	1dfb      	adds	r3, r7, #7
   1de16:	781b      	ldrb	r3, [r3, #0]
   1de18:	18d3      	adds	r3, r2, r3
   1de1a:	2b08      	cmp	r3, #8
   1de1c:	dd1c      	ble.n	1de58 <SDMMC_UNSTUFF_BITS+0xa4>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   1de1e:	230a      	movs	r3, #10
   1de20:	18fb      	adds	r3, r7, r3
   1de22:	881a      	ldrh	r2, [r3, #0]
   1de24:	2308      	movs	r3, #8
   1de26:	18fb      	adds	r3, r7, r3
   1de28:	881b      	ldrh	r3, [r3, #0]
   1de2a:	1ad3      	subs	r3, r2, r3
   1de2c:	3307      	adds	r3, #7
   1de2e:	2b00      	cmp	r3, #0
   1de30:	da00      	bge.n	1de34 <SDMMC_UNSTUFF_BITS+0x80>
   1de32:	3307      	adds	r3, #7
   1de34:	10db      	asrs	r3, r3, #3
   1de36:	3b02      	subs	r3, #2
   1de38:	68fa      	ldr	r2, [r7, #12]
   1de3a:	18d3      	adds	r3, r2, r3
   1de3c:	781b      	ldrb	r3, [r3, #0]
   1de3e:	0019      	movs	r1, r3
   1de40:	2308      	movs	r3, #8
   1de42:	18fb      	adds	r3, r7, r3
   1de44:	881b      	ldrh	r3, [r3, #0]
   1de46:	2207      	movs	r2, #7
   1de48:	4013      	ands	r3, r2
   1de4a:	2208      	movs	r2, #8
   1de4c:	1ad3      	subs	r3, r2, r3
   1de4e:	4099      	lsls	r1, r3
   1de50:	000b      	movs	r3, r1
   1de52:	697a      	ldr	r2, [r7, #20]
   1de54:	4313      	orrs	r3, r2
   1de56:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
   1de58:	2308      	movs	r3, #8
   1de5a:	18fb      	adds	r3, r7, r3
   1de5c:	881b      	ldrh	r3, [r3, #0]
   1de5e:	2207      	movs	r2, #7
   1de60:	401a      	ands	r2, r3
   1de62:	1dfb      	adds	r3, r7, #7
   1de64:	781b      	ldrb	r3, [r3, #0]
   1de66:	18d3      	adds	r3, r2, r3
   1de68:	2b10      	cmp	r3, #16
   1de6a:	dd1c      	ble.n	1dea6 <SDMMC_UNSTUFF_BITS+0xf2>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   1de6c:	230a      	movs	r3, #10
   1de6e:	18fb      	adds	r3, r7, r3
   1de70:	881a      	ldrh	r2, [r3, #0]
   1de72:	2308      	movs	r3, #8
   1de74:	18fb      	adds	r3, r7, r3
   1de76:	881b      	ldrh	r3, [r3, #0]
   1de78:	1ad3      	subs	r3, r2, r3
   1de7a:	3307      	adds	r3, #7
   1de7c:	2b00      	cmp	r3, #0
   1de7e:	da00      	bge.n	1de82 <SDMMC_UNSTUFF_BITS+0xce>
   1de80:	3307      	adds	r3, #7
   1de82:	10db      	asrs	r3, r3, #3
   1de84:	3b03      	subs	r3, #3
   1de86:	68fa      	ldr	r2, [r7, #12]
   1de88:	18d3      	adds	r3, r2, r3
   1de8a:	781b      	ldrb	r3, [r3, #0]
   1de8c:	0019      	movs	r1, r3
   1de8e:	2308      	movs	r3, #8
   1de90:	18fb      	adds	r3, r7, r3
   1de92:	881b      	ldrh	r3, [r3, #0]
   1de94:	2207      	movs	r2, #7
   1de96:	4013      	ands	r3, r2
   1de98:	2210      	movs	r2, #16
   1de9a:	1ad3      	subs	r3, r2, r3
   1de9c:	4099      	lsls	r1, r3
   1de9e:	000b      	movs	r3, r1
   1dea0:	697a      	ldr	r2, [r7, #20]
   1dea2:	4313      	orrs	r3, r2
   1dea4:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
   1dea6:	2308      	movs	r3, #8
   1dea8:	18fb      	adds	r3, r7, r3
   1deaa:	881b      	ldrh	r3, [r3, #0]
   1deac:	2207      	movs	r2, #7
   1deae:	401a      	ands	r2, r3
   1deb0:	1dfb      	adds	r3, r7, #7
   1deb2:	781b      	ldrb	r3, [r3, #0]
   1deb4:	18d3      	adds	r3, r2, r3
   1deb6:	2b10      	cmp	r3, #16
   1deb8:	dd1c      	ble.n	1def4 <SDMMC_UNSTUFF_BITS+0x140>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   1deba:	230a      	movs	r3, #10
   1debc:	18fb      	adds	r3, r7, r3
   1debe:	881a      	ldrh	r2, [r3, #0]
   1dec0:	2308      	movs	r3, #8
   1dec2:	18fb      	adds	r3, r7, r3
   1dec4:	881b      	ldrh	r3, [r3, #0]
   1dec6:	1ad3      	subs	r3, r2, r3
   1dec8:	3307      	adds	r3, #7
   1deca:	2b00      	cmp	r3, #0
   1decc:	da00      	bge.n	1ded0 <SDMMC_UNSTUFF_BITS+0x11c>
   1dece:	3307      	adds	r3, #7
   1ded0:	10db      	asrs	r3, r3, #3
   1ded2:	3b03      	subs	r3, #3
   1ded4:	68fa      	ldr	r2, [r7, #12]
   1ded6:	18d3      	adds	r3, r2, r3
   1ded8:	781b      	ldrb	r3, [r3, #0]
   1deda:	0019      	movs	r1, r3
   1dedc:	2308      	movs	r3, #8
   1dede:	18fb      	adds	r3, r7, r3
   1dee0:	881b      	ldrh	r3, [r3, #0]
   1dee2:	2207      	movs	r2, #7
   1dee4:	4013      	ands	r3, r2
   1dee6:	2210      	movs	r2, #16
   1dee8:	1ad3      	subs	r3, r2, r3
   1deea:	4099      	lsls	r1, r3
   1deec:	000b      	movs	r3, r1
   1deee:	697a      	ldr	r2, [r7, #20]
   1def0:	4313      	orrs	r3, r2
   1def2:	617b      	str	r3, [r7, #20]
	}
	value &=  ((uint32_t)1 << size) - 1;
   1def4:	1dfb      	adds	r3, r7, #7
   1def6:	781b      	ldrb	r3, [r3, #0]
   1def8:	2201      	movs	r2, #1
   1defa:	409a      	lsls	r2, r3
   1defc:	0013      	movs	r3, r2
   1defe:	1e5a      	subs	r2, r3, #1
   1df00:	697b      	ldr	r3, [r7, #20]
   1df02:	4013      	ands	r3, r2
   1df04:	617b      	str	r3, [r7, #20]
	return value;
   1df06:	697b      	ldr	r3, [r7, #20]
}
   1df08:	0018      	movs	r0, r3
   1df0a:	46bd      	mov	sp, r7
   1df0c:	b007      	add	sp, #28
   1df0e:	bd90      	pop	{r4, r7, pc}

0001df10 <mmc_spi_op_cond>:
 * - CMD58 reads OCR
 *
 * \return true if success, otherwise false
 */
static bool mmc_spi_op_cond(void)
{
   1df10:	b580      	push	{r7, lr}
   1df12:	b082      	sub	sp, #8
   1df14:	af00      	add	r7, sp, #0
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
   1df16:	4b23      	ldr	r3, [pc, #140]	; (1dfa4 <mmc_spi_op_cond+0x94>)
   1df18:	607b      	str	r3, [r7, #4]
	do {
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
   1df1a:	4b23      	ldr	r3, [pc, #140]	; (1dfa8 <mmc_spi_op_cond+0x98>)
   1df1c:	2100      	movs	r1, #0
   1df1e:	0018      	movs	r0, r3
   1df20:	4b22      	ldr	r3, [pc, #136]	; (1dfac <mmc_spi_op_cond+0x9c>)
   1df22:	4798      	blx	r3
   1df24:	0003      	movs	r3, r0
   1df26:	001a      	movs	r2, r3
   1df28:	2301      	movs	r3, #1
   1df2a:	4053      	eors	r3, r2
   1df2c:	b2db      	uxtb	r3, r3
   1df2e:	2b00      	cmp	r3, #0
   1df30:	d001      	beq.n	1df36 <mmc_spi_op_cond+0x26>
			sd_mmc_debug("%s: CMD1 SPI Fail - Busy retry %d\n\r",
					__func__, (int)(7150 - retry));
			return false;
   1df32:	2300      	movs	r3, #0
   1df34:	e031      	b.n	1df9a <mmc_spi_op_cond+0x8a>
		}
		// Check busy flag
		resp = driver_get_response();
   1df36:	4b1e      	ldr	r3, [pc, #120]	; (1dfb0 <mmc_spi_op_cond+0xa0>)
   1df38:	4798      	blx	r3
   1df3a:	0003      	movs	r3, r0
   1df3c:	603b      	str	r3, [r7, #0]
		if (!(resp & R1_SPI_IDLE)) {
   1df3e:	683b      	ldr	r3, [r7, #0]
   1df40:	2201      	movs	r2, #1
   1df42:	4013      	ands	r3, r2
   1df44:	d006      	beq.n	1df54 <mmc_spi_op_cond+0x44>
			break;
		}
		if (retry-- == 0) {
   1df46:	687b      	ldr	r3, [r7, #4]
   1df48:	1e5a      	subs	r2, r3, #1
   1df4a:	607a      	str	r2, [r7, #4]
   1df4c:	2b00      	cmp	r3, #0
   1df4e:	d1e4      	bne.n	1df1a <mmc_spi_op_cond+0xa>
			sd_mmc_debug("%s: CMD1 Timeout on busy\n\r", __func__);
			return false;
   1df50:	2300      	movs	r3, #0
   1df52:	e022      	b.n	1df9a <mmc_spi_op_cond+0x8a>
			break;
   1df54:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   1df56:	4b17      	ldr	r3, [pc, #92]	; (1dfb4 <mmc_spi_op_cond+0xa4>)
   1df58:	2100      	movs	r1, #0
   1df5a:	0018      	movs	r0, r3
   1df5c:	4b13      	ldr	r3, [pc, #76]	; (1dfac <mmc_spi_op_cond+0x9c>)
   1df5e:	4798      	blx	r3
   1df60:	0003      	movs	r3, r0
   1df62:	001a      	movs	r2, r3
   1df64:	2301      	movs	r3, #1
   1df66:	4053      	eors	r3, r2
   1df68:	b2db      	uxtb	r3, r3
   1df6a:	2b00      	cmp	r3, #0
   1df6c:	d001      	beq.n	1df72 <mmc_spi_op_cond+0x62>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
   1df6e:	2300      	movs	r3, #0
   1df70:	e013      	b.n	1df9a <mmc_spi_op_cond+0x8a>
	}
	// Check OCR value
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
   1df72:	4b0f      	ldr	r3, [pc, #60]	; (1dfb0 <mmc_spi_op_cond+0xa0>)
   1df74:	4798      	blx	r3
   1df76:	0002      	movs	r2, r0
   1df78:	23c0      	movs	r3, #192	; 0xc0
   1df7a:	05db      	lsls	r3, r3, #23
   1df7c:	401a      	ands	r2, r3
   1df7e:	2380      	movs	r3, #128	; 0x80
   1df80:	05db      	lsls	r3, r3, #23
   1df82:	429a      	cmp	r2, r3
   1df84:	d108      	bne.n	1df98 <mmc_spi_op_cond+0x88>
			== OCR_ACCESS_MODE_SECTOR) {
		sd_mmc_card->type |= CARD_TYPE_HC;
   1df86:	4b0c      	ldr	r3, [pc, #48]	; (1dfb8 <mmc_spi_op_cond+0xa8>)
   1df88:	681a      	ldr	r2, [r3, #0]
   1df8a:	4b0b      	ldr	r3, [pc, #44]	; (1dfb8 <mmc_spi_op_cond+0xa8>)
   1df8c:	681b      	ldr	r3, [r3, #0]
   1df8e:	7adb      	ldrb	r3, [r3, #11]
   1df90:	2108      	movs	r1, #8
   1df92:	430b      	orrs	r3, r1
   1df94:	b2db      	uxtb	r3, r3
   1df96:	72d3      	strb	r3, [r2, #11]
	}
	return true;
   1df98:	2301      	movs	r3, #1
}
   1df9a:	0018      	movs	r0, r3
   1df9c:	46bd      	mov	sp, r7
   1df9e:	b002      	add	sp, #8
   1dfa0:	bd80      	pop	{r7, pc}
   1dfa2:	46c0      	nop			; (mov r8, r8)
   1dfa4:	00001bee 	.word	0x00001bee
   1dfa8:	00001101 	.word	0x00001101
   1dfac:	0001f5d1 	.word	0x0001f5d1
   1dfb0:	0001f811 	.word	0x0001f811
   1dfb4:	0000053a 	.word	0x0000053a
   1dfb8:	20003c64 	.word	0x20003c64

0001dfbc <sd_spi_op_cond>:
 * \param v2   Shall be 1 if it is a SD card V2
 *
 * \return true if success, otherwise false
 */
static bool sd_spi_op_cond(uint8_t v2)
{
   1dfbc:	b580      	push	{r7, lr}
   1dfbe:	b086      	sub	sp, #24
   1dfc0:	af00      	add	r7, sp, #0
   1dfc2:	0002      	movs	r2, r0
   1dfc4:	1dfb      	adds	r3, r7, #7
   1dfc6:	701a      	strb	r2, [r3, #0]
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
   1dfc8:	4b2e      	ldr	r3, [pc, #184]	; (1e084 <sd_spi_op_cond+0xc8>)
   1dfca:	613b      	str	r3, [r7, #16]
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
   1dfcc:	4b2e      	ldr	r3, [pc, #184]	; (1e088 <sd_spi_op_cond+0xcc>)
   1dfce:	2100      	movs	r1, #0
   1dfd0:	0018      	movs	r0, r3
   1dfd2:	4b2e      	ldr	r3, [pc, #184]	; (1e08c <sd_spi_op_cond+0xd0>)
   1dfd4:	4798      	blx	r3
   1dfd6:	0003      	movs	r3, r0
   1dfd8:	001a      	movs	r2, r3
   1dfda:	2301      	movs	r3, #1
   1dfdc:	4053      	eors	r3, r2
   1dfde:	b2db      	uxtb	r3, r3
   1dfe0:	2b00      	cmp	r3, #0
   1dfe2:	d001      	beq.n	1dfe8 <sd_spi_op_cond+0x2c>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
   1dfe4:	2300      	movs	r3, #0
   1dfe6:	e048      	b.n	1e07a <sd_spi_op_cond+0xbe>
		}

		// (ACMD41) Sends host OCR register
		arg = 0;
   1dfe8:	2300      	movs	r3, #0
   1dfea:	617b      	str	r3, [r7, #20]
		if (v2) {
   1dfec:	1dfb      	adds	r3, r7, #7
   1dfee:	781b      	ldrb	r3, [r3, #0]
   1dff0:	2b00      	cmp	r3, #0
   1dff2:	d004      	beq.n	1dffe <sd_spi_op_cond+0x42>
			arg |= SD_ACMD41_HCS;
   1dff4:	697b      	ldr	r3, [r7, #20]
   1dff6:	2280      	movs	r2, #128	; 0x80
   1dff8:	05d2      	lsls	r2, r2, #23
   1dffa:	4313      	orrs	r3, r2
   1dffc:	617b      	str	r3, [r7, #20]
		}
		// Check response
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
   1dffe:	697b      	ldr	r3, [r7, #20]
   1e000:	4a23      	ldr	r2, [pc, #140]	; (1e090 <sd_spi_op_cond+0xd4>)
   1e002:	0019      	movs	r1, r3
   1e004:	0010      	movs	r0, r2
   1e006:	4b21      	ldr	r3, [pc, #132]	; (1e08c <sd_spi_op_cond+0xd0>)
   1e008:	4798      	blx	r3
   1e00a:	0003      	movs	r3, r0
   1e00c:	001a      	movs	r2, r3
   1e00e:	2301      	movs	r3, #1
   1e010:	4053      	eors	r3, r2
   1e012:	b2db      	uxtb	r3, r3
   1e014:	2b00      	cmp	r3, #0
   1e016:	d001      	beq.n	1e01c <sd_spi_op_cond+0x60>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
   1e018:	2300      	movs	r3, #0
   1e01a:	e02e      	b.n	1e07a <sd_spi_op_cond+0xbe>
		}
		resp = driver_get_response();
   1e01c:	4b1d      	ldr	r3, [pc, #116]	; (1e094 <sd_spi_op_cond+0xd8>)
   1e01e:	4798      	blx	r3
   1e020:	0003      	movs	r3, r0
   1e022:	60fb      	str	r3, [r7, #12]
		if (!(resp & R1_SPI_IDLE)) {
   1e024:	68fb      	ldr	r3, [r7, #12]
   1e026:	2201      	movs	r2, #1
   1e028:	4013      	ands	r3, r2
   1e02a:	d006      	beq.n	1e03a <sd_spi_op_cond+0x7e>
			// Card is ready
			break;
		}
		if (retry-- == 0) {
   1e02c:	693b      	ldr	r3, [r7, #16]
   1e02e:	1e5a      	subs	r2, r3, #1
   1e030:	613a      	str	r2, [r7, #16]
   1e032:	2b00      	cmp	r3, #0
   1e034:	d1ca      	bne.n	1dfcc <sd_spi_op_cond+0x10>
			sd_mmc_debug("%s: ACMD41 Timeout on busy, resp32 0x%08x \n\r",
					__func__, resp);
			return false;
   1e036:	2300      	movs	r3, #0
   1e038:	e01f      	b.n	1e07a <sd_spi_op_cond+0xbe>
			break;
   1e03a:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   1e03c:	4b16      	ldr	r3, [pc, #88]	; (1e098 <sd_spi_op_cond+0xdc>)
   1e03e:	2100      	movs	r1, #0
   1e040:	0018      	movs	r0, r3
   1e042:	4b12      	ldr	r3, [pc, #72]	; (1e08c <sd_spi_op_cond+0xd0>)
   1e044:	4798      	blx	r3
   1e046:	0003      	movs	r3, r0
   1e048:	001a      	movs	r2, r3
   1e04a:	2301      	movs	r3, #1
   1e04c:	4053      	eors	r3, r2
   1e04e:	b2db      	uxtb	r3, r3
   1e050:	2b00      	cmp	r3, #0
   1e052:	d001      	beq.n	1e058 <sd_spi_op_cond+0x9c>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
   1e054:	2300      	movs	r3, #0
   1e056:	e010      	b.n	1e07a <sd_spi_op_cond+0xbe>
	}
	if ((driver_get_response() & OCR_CCS) != 0) {
   1e058:	4b0e      	ldr	r3, [pc, #56]	; (1e094 <sd_spi_op_cond+0xd8>)
   1e05a:	4798      	blx	r3
   1e05c:	0002      	movs	r2, r0
   1e05e:	2380      	movs	r3, #128	; 0x80
   1e060:	05db      	lsls	r3, r3, #23
   1e062:	4013      	ands	r3, r2
   1e064:	d008      	beq.n	1e078 <sd_spi_op_cond+0xbc>
		sd_mmc_card->type |= CARD_TYPE_HC;
   1e066:	4b0d      	ldr	r3, [pc, #52]	; (1e09c <sd_spi_op_cond+0xe0>)
   1e068:	681a      	ldr	r2, [r3, #0]
   1e06a:	4b0c      	ldr	r3, [pc, #48]	; (1e09c <sd_spi_op_cond+0xe0>)
   1e06c:	681b      	ldr	r3, [r3, #0]
   1e06e:	7adb      	ldrb	r3, [r3, #11]
   1e070:	2108      	movs	r1, #8
   1e072:	430b      	orrs	r3, r1
   1e074:	b2db      	uxtb	r3, r3
   1e076:	72d3      	strb	r3, [r2, #11]
	}
	return true;
   1e078:	2301      	movs	r3, #1
}
   1e07a:	0018      	movs	r0, r3
   1e07c:	46bd      	mov	sp, r7
   1e07e:	b006      	add	sp, #24
   1e080:	bd80      	pop	{r7, pc}
   1e082:	46c0      	nop			; (mov r8, r8)
   1e084:	00001bee 	.word	0x00001bee
   1e088:	00001137 	.word	0x00001137
   1e08c:	0001f5d1 	.word	0x0001f5d1
   1e090:	00001129 	.word	0x00001129
   1e094:	0001f811 	.word	0x0001f811
   1e098:	0000053a 	.word	0x0000053a
   1e09c:	20003c64 	.word	0x20003c64

0001e0a0 <sdio_op_cond>:
	return true;
}

#else
static bool sdio_op_cond(void)
{
   1e0a0:	b580      	push	{r7, lr}
   1e0a2:	af00      	add	r7, sp, #0
	return true; // No error but card type not updated
   1e0a4:	2301      	movs	r3, #1
}
   1e0a6:	0018      	movs	r0, r3
   1e0a8:	46bd      	mov	sp, r7
   1e0aa:	bd80      	pop	{r7, pc}

0001e0ac <sd_cmd8>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_err.
 */
static bool sd_cmd8(uint8_t * v2)
{
   1e0ac:	b580      	push	{r7, lr}
   1e0ae:	b084      	sub	sp, #16
   1e0b0:	af00      	add	r7, sp, #0
   1e0b2:	6078      	str	r0, [r7, #4]
	uint32_t resp;

	*v2 = 0;
   1e0b4:	687b      	ldr	r3, [r7, #4]
   1e0b6:	2200      	movs	r2, #0
   1e0b8:	701a      	strb	r2, [r3, #0]
	// Test for SD version 2
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
   1e0ba:	23d5      	movs	r3, #213	; 0xd5
   1e0bc:	005b      	lsls	r3, r3, #1
   1e0be:	4a14      	ldr	r2, [pc, #80]	; (1e110 <sd_cmd8+0x64>)
   1e0c0:	0019      	movs	r1, r3
   1e0c2:	0010      	movs	r0, r2
   1e0c4:	4b13      	ldr	r3, [pc, #76]	; (1e114 <sd_cmd8+0x68>)
   1e0c6:	4798      	blx	r3
   1e0c8:	0003      	movs	r3, r0
   1e0ca:	001a      	movs	r2, r3
   1e0cc:	2301      	movs	r3, #1
   1e0ce:	4053      	eors	r3, r2
   1e0d0:	b2db      	uxtb	r3, r3
   1e0d2:	2b00      	cmp	r3, #0
   1e0d4:	d001      	beq.n	1e0da <sd_cmd8+0x2e>
			SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		return true; // It is not a V2
   1e0d6:	2301      	movs	r3, #1
   1e0d8:	e015      	b.n	1e106 <sd_cmd8+0x5a>
	}
	// Check R7 response
	resp = driver_get_response();
   1e0da:	4b0f      	ldr	r3, [pc, #60]	; (1e118 <sd_cmd8+0x6c>)
   1e0dc:	4798      	blx	r3
   1e0de:	0003      	movs	r3, r0
   1e0e0:	60fb      	str	r3, [r7, #12]
	if (resp == 0xFFFFFFFF) {
   1e0e2:	68fb      	ldr	r3, [r7, #12]
   1e0e4:	3301      	adds	r3, #1
   1e0e6:	d101      	bne.n	1e0ec <sd_cmd8+0x40>
		// No compliance R7 value
		return true; // It is not a V2
   1e0e8:	2301      	movs	r3, #1
   1e0ea:	e00c      	b.n	1e106 <sd_cmd8+0x5a>
	}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
   1e0ec:	68fb      	ldr	r3, [r7, #12]
   1e0ee:	051b      	lsls	r3, r3, #20
   1e0f0:	0d1a      	lsrs	r2, r3, #20
   1e0f2:	23d5      	movs	r3, #213	; 0xd5
   1e0f4:	005b      	lsls	r3, r3, #1
   1e0f6:	429a      	cmp	r2, r3
   1e0f8:	d001      	beq.n	1e0fe <sd_cmd8+0x52>
				!= (SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
				__func__, resp);
		return false;
   1e0fa:	2300      	movs	r3, #0
   1e0fc:	e003      	b.n	1e106 <sd_cmd8+0x5a>
	}
	sd_mmc_debug("SD card V2\n\r");
	*v2 = 1;
   1e0fe:	687b      	ldr	r3, [r7, #4]
   1e100:	2201      	movs	r2, #1
   1e102:	701a      	strb	r2, [r3, #0]
	return true;
   1e104:	2301      	movs	r3, #1
}
   1e106:	0018      	movs	r0, r3
   1e108:	46bd      	mov	sp, r7
   1e10a:	b004      	add	sp, #16
   1e10c:	bd80      	pop	{r7, pc}
   1e10e:	46c0      	nop			; (mov r8, r8)
   1e110:	00005508 	.word	0x00005508
   1e114:	0001f5d1 	.word	0x0001f5d1
   1e118:	0001f811 	.word	0x0001f811

0001e11c <mmc_cmd8>:
 * support information
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd8(uint8_t *b_authorize_high_speed)
{
   1e11c:	b590      	push	{r4, r7, lr}
   1e11e:	b089      	sub	sp, #36	; 0x24
   1e120:	af02      	add	r7, sp, #8
   1e122:	6078      	str	r0, [r7, #4]
	uint16_t i;
	uint32_t ext_csd;
	uint32_t sec_count;

	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
   1e124:	2380      	movs	r3, #128	; 0x80
   1e126:	009a      	lsls	r2, r3, #2
   1e128:	4841      	ldr	r0, [pc, #260]	; (1e230 <mmc_cmd8+0x114>)
   1e12a:	2300      	movs	r3, #0
   1e12c:	9300      	str	r3, [sp, #0]
   1e12e:	2301      	movs	r3, #1
   1e130:	2100      	movs	r1, #0
   1e132:	4c40      	ldr	r4, [pc, #256]	; (1e234 <mmc_cmd8+0x118>)
   1e134:	47a0      	blx	r4
   1e136:	0003      	movs	r3, r0
   1e138:	001a      	movs	r2, r3
   1e13a:	2301      	movs	r3, #1
   1e13c:	4053      	eors	r3, r2
   1e13e:	b2db      	uxtb	r3, r3
   1e140:	2b00      	cmp	r3, #0
   1e142:	d001      	beq.n	1e148 <mmc_cmd8+0x2c>
			EXT_CSD_BSIZE, 1, false)) {
		return false;
   1e144:	2300      	movs	r3, #0
   1e146:	e06e      	b.n	1e226 <mmc_cmd8+0x10a>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   1e148:	2316      	movs	r3, #22
   1e14a:	18fb      	adds	r3, r7, r3
   1e14c:	2200      	movs	r2, #0
   1e14e:	801a      	strh	r2, [r3, #0]
   1e150:	e014      	b.n	1e17c <mmc_cmd8+0x60>
		if (!driver_read_word(&ext_csd)) {
   1e152:	2310      	movs	r3, #16
   1e154:	18fb      	adds	r3, r7, r3
   1e156:	0018      	movs	r0, r3
   1e158:	4b37      	ldr	r3, [pc, #220]	; (1e238 <mmc_cmd8+0x11c>)
   1e15a:	4798      	blx	r3
   1e15c:	0003      	movs	r3, r0
   1e15e:	001a      	movs	r2, r3
   1e160:	2301      	movs	r3, #1
   1e162:	4053      	eors	r3, r2
   1e164:	b2db      	uxtb	r3, r3
   1e166:	2b00      	cmp	r3, #0
   1e168:	d001      	beq.n	1e16e <mmc_cmd8+0x52>
			return false;
   1e16a:	2300      	movs	r3, #0
   1e16c:	e05b      	b.n	1e226 <mmc_cmd8+0x10a>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   1e16e:	2316      	movs	r3, #22
   1e170:	18fb      	adds	r3, r7, r3
   1e172:	881a      	ldrh	r2, [r3, #0]
   1e174:	2316      	movs	r3, #22
   1e176:	18fb      	adds	r3, r7, r3
   1e178:	3201      	adds	r2, #1
   1e17a:	801a      	strh	r2, [r3, #0]
   1e17c:	2316      	movs	r3, #22
   1e17e:	18fb      	adds	r3, r7, r3
   1e180:	881b      	ldrh	r3, [r3, #0]
   1e182:	2b31      	cmp	r3, #49	; 0x31
   1e184:	d9e5      	bls.n	1e152 <mmc_cmd8+0x36>
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
			& MMC_CTYPE_52MHZ;
   1e186:	693b      	ldr	r3, [r7, #16]
   1e188:	b2db      	uxtb	r3, r3
   1e18a:	2202      	movs	r2, #2
   1e18c:	4013      	ands	r3, r2
   1e18e:	b2da      	uxtb	r2, r3
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
   1e190:	687b      	ldr	r3, [r7, #4]
   1e192:	701a      	strb	r2, [r3, #0]

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
   1e194:	4b29      	ldr	r3, [pc, #164]	; (1e23c <mmc_cmd8+0x120>)
   1e196:	681b      	ldr	r3, [r3, #0]
   1e198:	330e      	adds	r3, #14
   1e19a:	0018      	movs	r0, r3
   1e19c:	230c      	movs	r3, #12
   1e19e:	223e      	movs	r2, #62	; 0x3e
   1e1a0:	2180      	movs	r1, #128	; 0x80
   1e1a2:	4c27      	ldr	r4, [pc, #156]	; (1e240 <mmc_cmd8+0x124>)
   1e1a4:	47a0      	blx	r4
   1e1a6:	0002      	movs	r2, r0
   1e1a8:	4b26      	ldr	r3, [pc, #152]	; (1e244 <mmc_cmd8+0x128>)
   1e1aa:	429a      	cmp	r2, r3
   1e1ac:	d135      	bne.n	1e21a <mmc_cmd8+0xfe>
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   1e1ae:	e014      	b.n	1e1da <mmc_cmd8+0xbe>
			if (!driver_read_word(&sec_count)) {
   1e1b0:	230c      	movs	r3, #12
   1e1b2:	18fb      	adds	r3, r7, r3
   1e1b4:	0018      	movs	r0, r3
   1e1b6:	4b20      	ldr	r3, [pc, #128]	; (1e238 <mmc_cmd8+0x11c>)
   1e1b8:	4798      	blx	r3
   1e1ba:	0003      	movs	r3, r0
   1e1bc:	001a      	movs	r2, r3
   1e1be:	2301      	movs	r3, #1
   1e1c0:	4053      	eors	r3, r2
   1e1c2:	b2db      	uxtb	r3, r3
   1e1c4:	2b00      	cmp	r3, #0
   1e1c6:	d001      	beq.n	1e1cc <mmc_cmd8+0xb0>
				return false;
   1e1c8:	2300      	movs	r3, #0
   1e1ca:	e02c      	b.n	1e226 <mmc_cmd8+0x10a>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   1e1cc:	2316      	movs	r3, #22
   1e1ce:	18fb      	adds	r3, r7, r3
   1e1d0:	881a      	ldrh	r2, [r3, #0]
   1e1d2:	2316      	movs	r3, #22
   1e1d4:	18fb      	adds	r3, r7, r3
   1e1d6:	3201      	adds	r2, #1
   1e1d8:	801a      	strh	r2, [r3, #0]
   1e1da:	2316      	movs	r3, #22
   1e1dc:	18fb      	adds	r3, r7, r3
   1e1de:	881b      	ldrh	r3, [r3, #0]
   1e1e0:	2b35      	cmp	r3, #53	; 0x35
   1e1e2:	d9e5      	bls.n	1e1b0 <mmc_cmd8+0x94>
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
   1e1e4:	4b15      	ldr	r3, [pc, #84]	; (1e23c <mmc_cmd8+0x120>)
   1e1e6:	681b      	ldr	r3, [r3, #0]
   1e1e8:	68fa      	ldr	r2, [r7, #12]
   1e1ea:	0852      	lsrs	r2, r2, #1
   1e1ec:	605a      	str	r2, [r3, #4]
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   1e1ee:	e014      	b.n	1e21a <mmc_cmd8+0xfe>
		if (!driver_read_word(&sec_count)) {
   1e1f0:	230c      	movs	r3, #12
   1e1f2:	18fb      	adds	r3, r7, r3
   1e1f4:	0018      	movs	r0, r3
   1e1f6:	4b10      	ldr	r3, [pc, #64]	; (1e238 <mmc_cmd8+0x11c>)
   1e1f8:	4798      	blx	r3
   1e1fa:	0003      	movs	r3, r0
   1e1fc:	001a      	movs	r2, r3
   1e1fe:	2301      	movs	r3, #1
   1e200:	4053      	eors	r3, r2
   1e202:	b2db      	uxtb	r3, r3
   1e204:	2b00      	cmp	r3, #0
   1e206:	d001      	beq.n	1e20c <mmc_cmd8+0xf0>
			return false;
   1e208:	2300      	movs	r3, #0
   1e20a:	e00c      	b.n	1e226 <mmc_cmd8+0x10a>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   1e20c:	2316      	movs	r3, #22
   1e20e:	18fb      	adds	r3, r7, r3
   1e210:	881a      	ldrh	r2, [r3, #0]
   1e212:	2316      	movs	r3, #22
   1e214:	18fb      	adds	r3, r7, r3
   1e216:	3201      	adds	r2, #1
   1e218:	801a      	strh	r2, [r3, #0]
   1e21a:	2316      	movs	r3, #22
   1e21c:	18fb      	adds	r3, r7, r3
   1e21e:	881b      	ldrh	r3, [r3, #0]
   1e220:	2b7f      	cmp	r3, #127	; 0x7f
   1e222:	d9e5      	bls.n	1e1f0 <mmc_cmd8+0xd4>
		}
	}
	return true;
   1e224:	2301      	movs	r3, #1
}
   1e226:	0018      	movs	r0, r3
   1e228:	46bd      	mov	sp, r7
   1e22a:	b007      	add	sp, #28
   1e22c:	bd90      	pop	{r4, r7, pc}
   1e22e:	46c0      	nop			; (mov r8, r8)
   1e230:	00081108 	.word	0x00081108
   1e234:	0001f5f9 	.word	0x0001f5f9
   1e238:	0001f825 	.word	0x0001f825
   1e23c:	20003c64 	.word	0x20003c64
   1e240:	0001ddb5 	.word	0x0001ddb5
   1e244:	00000fff 	.word	0x00000fff

0001e248 <sd_mmc_cmd9_spi>:
 * data (CSD) on the CMD line spi.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_spi(void)
{
   1e248:	b590      	push	{r4, r7, lr}
   1e24a:	b083      	sub	sp, #12
   1e24c:	af02      	add	r7, sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
   1e24e:	4b15      	ldr	r3, [pc, #84]	; (1e2a4 <sd_mmc_cmd9_spi+0x5c>)
   1e250:	681b      	ldr	r3, [r3, #0]
   1e252:	891b      	ldrh	r3, [r3, #8]
   1e254:	0419      	lsls	r1, r3, #16
   1e256:	4814      	ldr	r0, [pc, #80]	; (1e2a8 <sd_mmc_cmd9_spi+0x60>)
   1e258:	2301      	movs	r3, #1
   1e25a:	9300      	str	r3, [sp, #0]
   1e25c:	2301      	movs	r3, #1
   1e25e:	2210      	movs	r2, #16
   1e260:	4c12      	ldr	r4, [pc, #72]	; (1e2ac <sd_mmc_cmd9_spi+0x64>)
   1e262:	47a0      	blx	r4
   1e264:	0003      	movs	r3, r0
   1e266:	001a      	movs	r2, r3
   1e268:	2301      	movs	r3, #1
   1e26a:	4053      	eors	r3, r2
   1e26c:	b2db      	uxtb	r3, r3
   1e26e:	2b00      	cmp	r3, #0
   1e270:	d001      	beq.n	1e276 <sd_mmc_cmd9_spi+0x2e>
			CSD_REG_BSIZE, 1, true)) {
		return false;
   1e272:	2300      	movs	r3, #0
   1e274:	e012      	b.n	1e29c <sd_mmc_cmd9_spi+0x54>
	}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
   1e276:	4b0b      	ldr	r3, [pc, #44]	; (1e2a4 <sd_mmc_cmd9_spi+0x5c>)
   1e278:	681b      	ldr	r3, [r3, #0]
   1e27a:	330e      	adds	r3, #14
   1e27c:	2101      	movs	r1, #1
   1e27e:	0018      	movs	r0, r3
   1e280:	4b0b      	ldr	r3, [pc, #44]	; (1e2b0 <sd_mmc_cmd9_spi+0x68>)
   1e282:	4798      	blx	r3
   1e284:	0003      	movs	r3, r0
   1e286:	001a      	movs	r2, r3
   1e288:	2301      	movs	r3, #1
   1e28a:	4053      	eors	r3, r2
   1e28c:	b2db      	uxtb	r3, r3
   1e28e:	2b00      	cmp	r3, #0
   1e290:	d001      	beq.n	1e296 <sd_mmc_cmd9_spi+0x4e>
		return false;
   1e292:	2300      	movs	r3, #0
   1e294:	e002      	b.n	1e29c <sd_mmc_cmd9_spi+0x54>
	}
	return driver_wait_end_of_read_blocks();
   1e296:	4b07      	ldr	r3, [pc, #28]	; (1e2b4 <sd_mmc_cmd9_spi+0x6c>)
   1e298:	4798      	blx	r3
   1e29a:	0003      	movs	r3, r0
}
   1e29c:	0018      	movs	r0, r3
   1e29e:	46bd      	mov	sp, r7
   1e2a0:	b001      	add	sp, #4
   1e2a2:	bd90      	pop	{r4, r7, pc}
   1e2a4:	20003c64 	.word	0x20003c64
   1e2a8:	00081109 	.word	0x00081109
   1e2ac:	0001f5f9 	.word	0x0001f5f9
   1e2b0:	0001f8c9 	.word	0x0001f8c9
   1e2b4:	0001f96d 	.word	0x0001f96d

0001e2b8 <mmc_decode_csd>:

/**
 * \brief Decodes MMC CSD register
 */
static void mmc_decode_csd(void)
{
   1e2b8:	b5b0      	push	{r4, r5, r7, lr}
   1e2ba:	b084      	sub	sp, #16
   1e2bc:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
   1e2be:	4b45      	ldr	r3, [pc, #276]	; (1e3d4 <mmc_decode_csd+0x11c>)
   1e2c0:	681b      	ldr	r3, [r3, #0]
   1e2c2:	330e      	adds	r3, #14
   1e2c4:	0018      	movs	r0, r3
   1e2c6:	2304      	movs	r3, #4
   1e2c8:	227a      	movs	r2, #122	; 0x7a
   1e2ca:	2180      	movs	r1, #128	; 0x80
   1e2cc:	4c42      	ldr	r4, [pc, #264]	; (1e3d8 <mmc_decode_csd+0x120>)
   1e2ce:	47a0      	blx	r4
   1e2d0:	0003      	movs	r3, r0
   1e2d2:	2b02      	cmp	r3, #2
   1e2d4:	d011      	beq.n	1e2fa <mmc_decode_csd+0x42>
   1e2d6:	d802      	bhi.n	1e2de <mmc_decode_csd+0x26>
   1e2d8:	2b01      	cmp	r3, #1
   1e2da:	d009      	beq.n	1e2f0 <mmc_decode_csd+0x38>
   1e2dc:	e003      	b.n	1e2e6 <mmc_decode_csd+0x2e>
   1e2de:	2b03      	cmp	r3, #3
   1e2e0:	d010      	beq.n	1e304 <mmc_decode_csd+0x4c>
   1e2e2:	2b04      	cmp	r3, #4
   1e2e4:	d013      	beq.n	1e30e <mmc_decode_csd+0x56>
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
   1e2e6:	4b3b      	ldr	r3, [pc, #236]	; (1e3d4 <mmc_decode_csd+0x11c>)
   1e2e8:	681b      	ldr	r3, [r3, #0]
   1e2ea:	2212      	movs	r2, #18
   1e2ec:	731a      	strb	r2, [r3, #12]
		break;
   1e2ee:	e013      	b.n	1e318 <mmc_decode_csd+0x60>

	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
   1e2f0:	4b38      	ldr	r3, [pc, #224]	; (1e3d4 <mmc_decode_csd+0x11c>)
   1e2f2:	681b      	ldr	r3, [r3, #0]
   1e2f4:	2214      	movs	r2, #20
   1e2f6:	731a      	strb	r2, [r3, #12]
		break;
   1e2f8:	e00e      	b.n	1e318 <mmc_decode_csd+0x60>

	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
   1e2fa:	4b36      	ldr	r3, [pc, #216]	; (1e3d4 <mmc_decode_csd+0x11c>)
   1e2fc:	681b      	ldr	r3, [r3, #0]
   1e2fe:	2222      	movs	r2, #34	; 0x22
   1e300:	731a      	strb	r2, [r3, #12]
		break;
   1e302:	e009      	b.n	1e318 <mmc_decode_csd+0x60>

	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
   1e304:	4b33      	ldr	r3, [pc, #204]	; (1e3d4 <mmc_decode_csd+0x11c>)
   1e306:	681b      	ldr	r3, [r3, #0]
   1e308:	2230      	movs	r2, #48	; 0x30
   1e30a:	731a      	strb	r2, [r3, #12]
		break;
   1e30c:	e004      	b.n	1e318 <mmc_decode_csd+0x60>

	case 4:
		sd_mmc_card->version = CARD_VER_MMC_4;
   1e30e:	4b31      	ldr	r3, [pc, #196]	; (1e3d4 <mmc_decode_csd+0x11c>)
   1e310:	681b      	ldr	r3, [r3, #0]
   1e312:	2240      	movs	r2, #64	; 0x40
   1e314:	731a      	strb	r2, [r3, #12]
		break;
   1e316:	46c0      	nop			; (mov r8, r8)
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   1e318:	4b2e      	ldr	r3, [pc, #184]	; (1e3d4 <mmc_decode_csd+0x11c>)
   1e31a:	681b      	ldr	r3, [r3, #0]
   1e31c:	330e      	adds	r3, #14
   1e31e:	0018      	movs	r0, r3
   1e320:	2308      	movs	r3, #8
   1e322:	2260      	movs	r2, #96	; 0x60
   1e324:	2180      	movs	r1, #128	; 0x80
   1e326:	4c2c      	ldr	r4, [pc, #176]	; (1e3d8 <mmc_decode_csd+0x120>)
   1e328:	47a0      	blx	r4
   1e32a:	0003      	movs	r3, r0
   1e32c:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   1e32e:	68fb      	ldr	r3, [r7, #12]
   1e330:	2207      	movs	r2, #7
   1e332:	401a      	ands	r2, r3
   1e334:	4b29      	ldr	r3, [pc, #164]	; (1e3dc <mmc_decode_csd+0x124>)
   1e336:	0092      	lsls	r2, r2, #2
   1e338:	58d3      	ldr	r3, [r2, r3]
   1e33a:	60bb      	str	r3, [r7, #8]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
   1e33c:	68fb      	ldr	r3, [r7, #12]
   1e33e:	08db      	lsrs	r3, r3, #3
   1e340:	220f      	movs	r2, #15
   1e342:	401a      	ands	r2, r3
   1e344:	4b26      	ldr	r3, [pc, #152]	; (1e3e0 <mmc_decode_csd+0x128>)
   1e346:	0092      	lsls	r2, r2, #2
   1e348:	58d3      	ldr	r3, [r2, r3]
   1e34a:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
   1e34c:	4b21      	ldr	r3, [pc, #132]	; (1e3d4 <mmc_decode_csd+0x11c>)
   1e34e:	681b      	ldr	r3, [r3, #0]
   1e350:	68ba      	ldr	r2, [r7, #8]
   1e352:	6879      	ldr	r1, [r7, #4]
   1e354:	434a      	muls	r2, r1
   1e356:	21fa      	movs	r1, #250	; 0xfa
   1e358:	0089      	lsls	r1, r1, #2
   1e35a:	434a      	muls	r2, r1
   1e35c:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
   1e35e:	4b1d      	ldr	r3, [pc, #116]	; (1e3d4 <mmc_decode_csd+0x11c>)
   1e360:	681b      	ldr	r3, [r3, #0]
   1e362:	330e      	adds	r3, #14
   1e364:	0018      	movs	r0, r3
   1e366:	230c      	movs	r3, #12
   1e368:	223e      	movs	r2, #62	; 0x3e
   1e36a:	2180      	movs	r1, #128	; 0x80
   1e36c:	4c1a      	ldr	r4, [pc, #104]	; (1e3d8 <mmc_decode_csd+0x120>)
   1e36e:	47a0      	blx	r4
   1e370:	0002      	movs	r2, r0
   1e372:	4b1c      	ldr	r3, [pc, #112]	; (1e3e4 <mmc_decode_csd+0x12c>)
   1e374:	429a      	cmp	r2, r3
   1e376:	d028      	beq.n	1e3ca <mmc_decode_csd+0x112>
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   1e378:	4b16      	ldr	r3, [pc, #88]	; (1e3d4 <mmc_decode_csd+0x11c>)
   1e37a:	681b      	ldr	r3, [r3, #0]
   1e37c:	330e      	adds	r3, #14
   1e37e:	0018      	movs	r0, r3
   1e380:	230c      	movs	r3, #12
   1e382:	223e      	movs	r2, #62	; 0x3e
   1e384:	2180      	movs	r1, #128	; 0x80
   1e386:	4c14      	ldr	r4, [pc, #80]	; (1e3d8 <mmc_decode_csd+0x120>)
   1e388:	47a0      	blx	r4
   1e38a:	0003      	movs	r3, r0
   1e38c:	1c5c      	adds	r4, r3, #1
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   1e38e:	4b11      	ldr	r3, [pc, #68]	; (1e3d4 <mmc_decode_csd+0x11c>)
   1e390:	681b      	ldr	r3, [r3, #0]
   1e392:	330e      	adds	r3, #14
   1e394:	0018      	movs	r0, r3
   1e396:	2303      	movs	r3, #3
   1e398:	222f      	movs	r2, #47	; 0x2f
   1e39a:	2180      	movs	r1, #128	; 0x80
   1e39c:	4d0e      	ldr	r5, [pc, #56]	; (1e3d8 <mmc_decode_csd+0x120>)
   1e39e:	47a8      	blx	r5
   1e3a0:	0003      	movs	r3, r0
   1e3a2:	3302      	adds	r3, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   1e3a4:	409c      	lsls	r4, r3
   1e3a6:	0023      	movs	r3, r4
   1e3a8:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
   1e3aa:	4b0a      	ldr	r3, [pc, #40]	; (1e3d4 <mmc_decode_csd+0x11c>)
   1e3ac:	681c      	ldr	r4, [r3, #0]
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   1e3ae:	4b09      	ldr	r3, [pc, #36]	; (1e3d4 <mmc_decode_csd+0x11c>)
   1e3b0:	681b      	ldr	r3, [r3, #0]
   1e3b2:	330e      	adds	r3, #14
   1e3b4:	0018      	movs	r0, r3
   1e3b6:	2304      	movs	r3, #4
   1e3b8:	2250      	movs	r2, #80	; 0x50
   1e3ba:	2180      	movs	r1, #128	; 0x80
   1e3bc:	4d06      	ldr	r5, [pc, #24]	; (1e3d8 <mmc_decode_csd+0x120>)
   1e3be:	47a8      	blx	r5
   1e3c0:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
   1e3c2:	683b      	ldr	r3, [r7, #0]
   1e3c4:	4093      	lsls	r3, r2
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   1e3c6:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   1e3c8:	6063      	str	r3, [r4, #4]
	}
}
   1e3ca:	46c0      	nop			; (mov r8, r8)
   1e3cc:	46bd      	mov	sp, r7
   1e3ce:	b004      	add	sp, #16
   1e3d0:	bdb0      	pop	{r4, r5, r7, pc}
   1e3d2:	46c0      	nop			; (mov r8, r8)
   1e3d4:	20003c64 	.word	0x20003c64
   1e3d8:	0001ddb5 	.word	0x0001ddb5
   1e3dc:	00038c94 	.word	0x00038c94
   1e3e0:	00038cf0 	.word	0x00038cf0
   1e3e4:	00000fff 	.word	0x00000fff

0001e3e8 <sd_decode_csd>:

/**
 * \brief Decodes SD CSD register
 */
static void sd_decode_csd(void)
{
   1e3e8:	b5b0      	push	{r4, r5, r7, lr}
   1e3ea:	b084      	sub	sp, #16
   1e3ec:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   1e3ee:	4b35      	ldr	r3, [pc, #212]	; (1e4c4 <sd_decode_csd+0xdc>)
   1e3f0:	681b      	ldr	r3, [r3, #0]
   1e3f2:	330e      	adds	r3, #14
   1e3f4:	0018      	movs	r0, r3
   1e3f6:	2308      	movs	r3, #8
   1e3f8:	2260      	movs	r2, #96	; 0x60
   1e3fa:	2180      	movs	r1, #128	; 0x80
   1e3fc:	4c32      	ldr	r4, [pc, #200]	; (1e4c8 <sd_decode_csd+0xe0>)
   1e3fe:	47a0      	blx	r4
   1e400:	0003      	movs	r3, r0
   1e402:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   1e404:	68fb      	ldr	r3, [r7, #12]
   1e406:	2207      	movs	r2, #7
   1e408:	401a      	ands	r2, r3
   1e40a:	4b30      	ldr	r3, [pc, #192]	; (1e4cc <sd_decode_csd+0xe4>)
   1e40c:	0092      	lsls	r2, r2, #2
   1e40e:	58d3      	ldr	r3, [r2, r3]
   1e410:	60bb      	str	r3, [r7, #8]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
   1e412:	68fb      	ldr	r3, [r7, #12]
   1e414:	08db      	lsrs	r3, r3, #3
   1e416:	220f      	movs	r2, #15
   1e418:	401a      	ands	r2, r3
   1e41a:	4b2d      	ldr	r3, [pc, #180]	; (1e4d0 <sd_decode_csd+0xe8>)
   1e41c:	0092      	lsls	r2, r2, #2
   1e41e:	58d3      	ldr	r3, [r2, r3]
   1e420:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
   1e422:	4b28      	ldr	r3, [pc, #160]	; (1e4c4 <sd_decode_csd+0xdc>)
   1e424:	681b      	ldr	r3, [r3, #0]
   1e426:	68ba      	ldr	r2, [r7, #8]
   1e428:	6879      	ldr	r1, [r7, #4]
   1e42a:	434a      	muls	r2, r1
   1e42c:	21fa      	movs	r1, #250	; 0xfa
   1e42e:	0089      	lsls	r1, r1, #2
   1e430:	434a      	muls	r2, r1
   1e432:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
   1e434:	4b23      	ldr	r3, [pc, #140]	; (1e4c4 <sd_decode_csd+0xdc>)
   1e436:	681b      	ldr	r3, [r3, #0]
   1e438:	330e      	adds	r3, #14
   1e43a:	0018      	movs	r0, r3
   1e43c:	2302      	movs	r3, #2
   1e43e:	227e      	movs	r2, #126	; 0x7e
   1e440:	2180      	movs	r1, #128	; 0x80
   1e442:	4c21      	ldr	r4, [pc, #132]	; (1e4c8 <sd_decode_csd+0xe0>)
   1e444:	47a0      	blx	r4
   1e446:	1e03      	subs	r3, r0, #0
   1e448:	d00f      	beq.n	1e46a <sd_decode_csd+0x82>
		sd_mmc_card->capacity =
   1e44a:	4b1e      	ldr	r3, [pc, #120]	; (1e4c4 <sd_decode_csd+0xdc>)
   1e44c:	681c      	ldr	r4, [r3, #0]
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
   1e44e:	4b1d      	ldr	r3, [pc, #116]	; (1e4c4 <sd_decode_csd+0xdc>)
   1e450:	681b      	ldr	r3, [r3, #0]
   1e452:	330e      	adds	r3, #14
   1e454:	0018      	movs	r0, r3
   1e456:	2316      	movs	r3, #22
   1e458:	2230      	movs	r2, #48	; 0x30
   1e45a:	2180      	movs	r1, #128	; 0x80
   1e45c:	4d1a      	ldr	r5, [pc, #104]	; (1e4c8 <sd_decode_csd+0xe0>)
   1e45e:	47a8      	blx	r5
   1e460:	0003      	movs	r3, r0
				* 512;
   1e462:	3301      	adds	r3, #1
   1e464:	025b      	lsls	r3, r3, #9
		sd_mmc_card->capacity =
   1e466:	6063      	str	r3, [r4, #4]
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
				/ 1024;
	}
}
   1e468:	e028      	b.n	1e4bc <sd_decode_csd+0xd4>
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   1e46a:	4b16      	ldr	r3, [pc, #88]	; (1e4c4 <sd_decode_csd+0xdc>)
   1e46c:	681b      	ldr	r3, [r3, #0]
   1e46e:	330e      	adds	r3, #14
   1e470:	0018      	movs	r0, r3
   1e472:	230c      	movs	r3, #12
   1e474:	223e      	movs	r2, #62	; 0x3e
   1e476:	2180      	movs	r1, #128	; 0x80
   1e478:	4c13      	ldr	r4, [pc, #76]	; (1e4c8 <sd_decode_csd+0xe0>)
   1e47a:	47a0      	blx	r4
   1e47c:	0003      	movs	r3, r0
   1e47e:	1c5c      	adds	r4, r3, #1
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   1e480:	4b10      	ldr	r3, [pc, #64]	; (1e4c4 <sd_decode_csd+0xdc>)
   1e482:	681b      	ldr	r3, [r3, #0]
   1e484:	330e      	adds	r3, #14
   1e486:	0018      	movs	r0, r3
   1e488:	2303      	movs	r3, #3
   1e48a:	222f      	movs	r2, #47	; 0x2f
   1e48c:	2180      	movs	r1, #128	; 0x80
   1e48e:	4d0e      	ldr	r5, [pc, #56]	; (1e4c8 <sd_decode_csd+0xe0>)
   1e490:	47a8      	blx	r5
   1e492:	0003      	movs	r3, r0
   1e494:	3302      	adds	r3, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   1e496:	409c      	lsls	r4, r3
   1e498:	0023      	movs	r3, r4
   1e49a:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
   1e49c:	4b09      	ldr	r3, [pc, #36]	; (1e4c4 <sd_decode_csd+0xdc>)
   1e49e:	681c      	ldr	r4, [r3, #0]
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
   1e4a0:	4b08      	ldr	r3, [pc, #32]	; (1e4c4 <sd_decode_csd+0xdc>)
   1e4a2:	681b      	ldr	r3, [r3, #0]
   1e4a4:	330e      	adds	r3, #14
   1e4a6:	0018      	movs	r0, r3
   1e4a8:	2304      	movs	r3, #4
   1e4aa:	2250      	movs	r2, #80	; 0x50
   1e4ac:	2180      	movs	r1, #128	; 0x80
   1e4ae:	4d06      	ldr	r5, [pc, #24]	; (1e4c8 <sd_decode_csd+0xe0>)
   1e4b0:	47a8      	blx	r5
   1e4b2:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
   1e4b4:	683b      	ldr	r3, [r7, #0]
   1e4b6:	4093      	lsls	r3, r2
				/ 1024;
   1e4b8:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   1e4ba:	6063      	str	r3, [r4, #4]
}
   1e4bc:	46c0      	nop			; (mov r8, r8)
   1e4be:	46bd      	mov	sp, r7
   1e4c0:	b004      	add	sp, #16
   1e4c2:	bdb0      	pop	{r4, r5, r7, pc}
   1e4c4:	20003c64 	.word	0x20003c64
   1e4c8:	0001ddb5 	.word	0x0001ddb5
   1e4cc:	00038c94 	.word	0x00038c94
   1e4d0:	00038cb0 	.word	0x00038cb0

0001e4d4 <sd_mmc_cmd13>:
 * This function waits the clear of the busy flag
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd13(void)
{
   1e4d4:	b580      	push	{r7, lr}
   1e4d6:	b082      	sub	sp, #8
   1e4d8:	af00      	add	r7, sp, #0
	/* Wait for data ready status.
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	nec_timeout = 200000;
   1e4da:	4b11      	ldr	r3, [pc, #68]	; (1e520 <sd_mmc_cmd13+0x4c>)
   1e4dc:	607b      	str	r3, [r7, #4]
	do {
		if (sd_mmc_is_spi()) {
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
   1e4de:	4b11      	ldr	r3, [pc, #68]	; (1e524 <sd_mmc_cmd13+0x50>)
   1e4e0:	2100      	movs	r1, #0
   1e4e2:	0018      	movs	r0, r3
   1e4e4:	4b10      	ldr	r3, [pc, #64]	; (1e528 <sd_mmc_cmd13+0x54>)
   1e4e6:	4798      	blx	r3
   1e4e8:	0003      	movs	r3, r0
   1e4ea:	001a      	movs	r2, r3
   1e4ec:	2301      	movs	r3, #1
   1e4ee:	4053      	eors	r3, r2
   1e4f0:	b2db      	uxtb	r3, r3
   1e4f2:	2b00      	cmp	r3, #0
   1e4f4:	d001      	beq.n	1e4fa <sd_mmc_cmd13+0x26>
				return false;
   1e4f6:	2300      	movs	r3, #0
   1e4f8:	e00e      	b.n	1e518 <sd_mmc_cmd13+0x44>
			}
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
   1e4fa:	4b0c      	ldr	r3, [pc, #48]	; (1e52c <sd_mmc_cmd13+0x58>)
   1e4fc:	4798      	blx	r3
   1e4fe:	0002      	movs	r2, r0
   1e500:	23ff      	movs	r3, #255	; 0xff
   1e502:	4013      	ands	r3, r2
   1e504:	d006      	beq.n	1e514 <sd_mmc_cmd13+0x40>
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
				break;
			}
		}
		if (nec_timeout-- == 0) {
   1e506:	687b      	ldr	r3, [r7, #4]
   1e508:	1e5a      	subs	r2, r3, #1
   1e50a:	607a      	str	r2, [r7, #4]
   1e50c:	2b00      	cmp	r3, #0
   1e50e:	d1e6      	bne.n	1e4de <sd_mmc_cmd13+0xa>
			sd_mmc_debug("%s: CMD13 Busy timeout\n\r", __func__);
			return false;
   1e510:	2300      	movs	r3, #0
   1e512:	e001      	b.n	1e518 <sd_mmc_cmd13+0x44>
				break;
   1e514:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	return true;
   1e516:	2301      	movs	r3, #1
}
   1e518:	0018      	movs	r0, r3
   1e51a:	46bd      	mov	sp, r7
   1e51c:	b002      	add	sp, #8
   1e51e:	bd80      	pop	{r7, pc}
   1e520:	00030d40 	.word	0x00030d40
   1e524:	00001b0d 	.word	0x00001b0d
   1e528:	0001f5d1 	.word	0x0001f5d1
   1e52c:	0001f811 	.word	0x0001f811

0001e530 <sd_acmd51>:
 *
 *
 * \return true if success, otherwise false
 */
static bool sd_acmd51(void)
{
   1e530:	b590      	push	{r4, r7, lr}
   1e532:	b085      	sub	sp, #20
   1e534:	af02      	add	r7, sp, #8
	uint8_t scr[SD_SCR_REG_BSIZE];

	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
   1e536:	4b38      	ldr	r3, [pc, #224]	; (1e618 <sd_acmd51+0xe8>)
   1e538:	681b      	ldr	r3, [r3, #0]
   1e53a:	891b      	ldrh	r3, [r3, #8]
   1e53c:	041b      	lsls	r3, r3, #16
   1e53e:	4a37      	ldr	r2, [pc, #220]	; (1e61c <sd_acmd51+0xec>)
   1e540:	0019      	movs	r1, r3
   1e542:	0010      	movs	r0, r2
   1e544:	4b36      	ldr	r3, [pc, #216]	; (1e620 <sd_acmd51+0xf0>)
   1e546:	4798      	blx	r3
   1e548:	0003      	movs	r3, r0
   1e54a:	001a      	movs	r2, r3
   1e54c:	2301      	movs	r3, #1
   1e54e:	4053      	eors	r3, r2
   1e550:	b2db      	uxtb	r3, r3
   1e552:	2b00      	cmp	r3, #0
   1e554:	d001      	beq.n	1e55a <sd_acmd51+0x2a>
		return false;
   1e556:	2300      	movs	r3, #0
   1e558:	e059      	b.n	1e60e <sd_acmd51+0xde>
	}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
   1e55a:	4832      	ldr	r0, [pc, #200]	; (1e624 <sd_acmd51+0xf4>)
   1e55c:	2301      	movs	r3, #1
   1e55e:	9300      	str	r3, [sp, #0]
   1e560:	2301      	movs	r3, #1
   1e562:	2208      	movs	r2, #8
   1e564:	2100      	movs	r1, #0
   1e566:	4c30      	ldr	r4, [pc, #192]	; (1e628 <sd_acmd51+0xf8>)
   1e568:	47a0      	blx	r4
   1e56a:	0003      	movs	r3, r0
   1e56c:	001a      	movs	r2, r3
   1e56e:	2301      	movs	r3, #1
   1e570:	4053      	eors	r3, r2
   1e572:	b2db      	uxtb	r3, r3
   1e574:	2b00      	cmp	r3, #0
   1e576:	d001      	beq.n	1e57c <sd_acmd51+0x4c>
			SD_SCR_REG_BSIZE, 1, true)) {
		return false;
   1e578:	2300      	movs	r3, #0
   1e57a:	e048      	b.n	1e60e <sd_acmd51+0xde>
	}
	if (!driver_start_read_blocks(scr, 1)) {
   1e57c:	003b      	movs	r3, r7
   1e57e:	2101      	movs	r1, #1
   1e580:	0018      	movs	r0, r3
   1e582:	4b2a      	ldr	r3, [pc, #168]	; (1e62c <sd_acmd51+0xfc>)
   1e584:	4798      	blx	r3
   1e586:	0003      	movs	r3, r0
   1e588:	001a      	movs	r2, r3
   1e58a:	2301      	movs	r3, #1
   1e58c:	4053      	eors	r3, r2
   1e58e:	b2db      	uxtb	r3, r3
   1e590:	2b00      	cmp	r3, #0
   1e592:	d001      	beq.n	1e598 <sd_acmd51+0x68>
		return false;
   1e594:	2300      	movs	r3, #0
   1e596:	e03a      	b.n	1e60e <sd_acmd51+0xde>
	}
	if (!driver_wait_end_of_read_blocks()) {
   1e598:	4b25      	ldr	r3, [pc, #148]	; (1e630 <sd_acmd51+0x100>)
   1e59a:	4798      	blx	r3
   1e59c:	0003      	movs	r3, r0
   1e59e:	001a      	movs	r2, r3
   1e5a0:	2301      	movs	r3, #1
   1e5a2:	4053      	eors	r3, r2
   1e5a4:	b2db      	uxtb	r3, r3
   1e5a6:	2b00      	cmp	r3, #0
   1e5a8:	d001      	beq.n	1e5ae <sd_acmd51+0x7e>
		return false;
   1e5aa:	2300      	movs	r3, #0
   1e5ac:	e02f      	b.n	1e60e <sd_acmd51+0xde>
	}

	// Get SD Memory Card - Spec. Version
	switch (SD_SCR_SD_SPEC(scr)) {
   1e5ae:	0038      	movs	r0, r7
   1e5b0:	2304      	movs	r3, #4
   1e5b2:	2238      	movs	r2, #56	; 0x38
   1e5b4:	2140      	movs	r1, #64	; 0x40
   1e5b6:	4c1f      	ldr	r4, [pc, #124]	; (1e634 <sd_acmd51+0x104>)
   1e5b8:	47a0      	blx	r4
   1e5ba:	0003      	movs	r3, r0
   1e5bc:	2b01      	cmp	r3, #1
   1e5be:	d008      	beq.n	1e5d2 <sd_acmd51+0xa2>
   1e5c0:	d302      	bcc.n	1e5c8 <sd_acmd51+0x98>
   1e5c2:	2b02      	cmp	r3, #2
   1e5c4:	d00a      	beq.n	1e5dc <sd_acmd51+0xac>
   1e5c6:	e01c      	b.n	1e602 <sd_acmd51+0xd2>
	case SD_SCR_SD_SPEC_1_0_01:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   1e5c8:	4b13      	ldr	r3, [pc, #76]	; (1e618 <sd_acmd51+0xe8>)
   1e5ca:	681b      	ldr	r3, [r3, #0]
   1e5cc:	2210      	movs	r2, #16
   1e5ce:	731a      	strb	r2, [r3, #12]
		break;
   1e5d0:	e01c      	b.n	1e60c <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
   1e5d2:	4b11      	ldr	r3, [pc, #68]	; (1e618 <sd_acmd51+0xe8>)
   1e5d4:	681b      	ldr	r3, [r3, #0]
   1e5d6:	221a      	movs	r2, #26
   1e5d8:	731a      	strb	r2, [r3, #12]
		break;
   1e5da:	e017      	b.n	1e60c <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
   1e5dc:	0038      	movs	r0, r7
   1e5de:	2301      	movs	r3, #1
   1e5e0:	222f      	movs	r2, #47	; 0x2f
   1e5e2:	2140      	movs	r1, #64	; 0x40
   1e5e4:	4c13      	ldr	r4, [pc, #76]	; (1e634 <sd_acmd51+0x104>)
   1e5e6:	47a0      	blx	r4
   1e5e8:	0003      	movs	r3, r0
   1e5ea:	2b01      	cmp	r3, #1
   1e5ec:	d104      	bne.n	1e5f8 <sd_acmd51+0xc8>
			sd_mmc_card->version = CARD_VER_SD_3_0;
   1e5ee:	4b0a      	ldr	r3, [pc, #40]	; (1e618 <sd_acmd51+0xe8>)
   1e5f0:	681b      	ldr	r3, [r3, #0]
   1e5f2:	2230      	movs	r2, #48	; 0x30
   1e5f4:	731a      	strb	r2, [r3, #12]
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
		}
		break;
   1e5f6:	e009      	b.n	1e60c <sd_acmd51+0xdc>
			sd_mmc_card->version = CARD_VER_SD_2_0;
   1e5f8:	4b07      	ldr	r3, [pc, #28]	; (1e618 <sd_acmd51+0xe8>)
   1e5fa:	681b      	ldr	r3, [r3, #0]
   1e5fc:	2220      	movs	r2, #32
   1e5fe:	731a      	strb	r2, [r3, #12]
		break;
   1e600:	e004      	b.n	1e60c <sd_acmd51+0xdc>

	default:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   1e602:	4b05      	ldr	r3, [pc, #20]	; (1e618 <sd_acmd51+0xe8>)
   1e604:	681b      	ldr	r3, [r3, #0]
   1e606:	2210      	movs	r2, #16
   1e608:	731a      	strb	r2, [r3, #12]
		break;
   1e60a:	46c0      	nop			; (mov r8, r8)
	}
	return true;
   1e60c:	2301      	movs	r3, #1
}
   1e60e:	0018      	movs	r0, r3
   1e610:	46bd      	mov	sp, r7
   1e612:	b003      	add	sp, #12
   1e614:	bd90      	pop	{r4, r7, pc}
   1e616:	46c0      	nop			; (mov r8, r8)
   1e618:	20003c64 	.word	0x20003c64
   1e61c:	00001137 	.word	0x00001137
   1e620:	0001f5d1 	.word	0x0001f5d1
   1e624:	00081133 	.word	0x00081133
   1e628:	0001f5f9 	.word	0x0001f5f9
   1e62c:	0001f8c9 	.word	0x0001f8c9
   1e630:	0001f96d 	.word	0x0001f96d
   1e634:	0001ddb5 	.word	0x0001ddb5

0001e638 <sd_mmc_select_slot>:
 * \retval SD_MMC_ERR_UNUSABLE Unusable card
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
   1e638:	b580      	push	{r7, lr}
   1e63a:	b082      	sub	sp, #8
   1e63c:	af00      	add	r7, sp, #0
   1e63e:	0002      	movs	r2, r0
   1e640:	1dfb      	adds	r3, r7, #7
   1e642:	701a      	strb	r2, [r3, #0]
	if (slot >= SD_MMC_MEM_CNT) {
   1e644:	1dfb      	adds	r3, r7, #7
   1e646:	781b      	ldrb	r3, [r3, #0]
   1e648:	2b00      	cmp	r3, #0
   1e64a:	d001      	beq.n	1e650 <sd_mmc_select_slot+0x18>
		return SD_MMC_ERR_SLOT;
   1e64c:	2304      	movs	r3, #4
   1e64e:	e047      	b.n	1e6e0 <sd_mmc_select_slot+0xa8>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
		return SD_MMC_ERR_UNUSABLE;
	}
#else
	// No pin card detection, then always try to install it
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
   1e650:	1dfb      	adds	r3, r7, #7
   1e652:	781b      	ldrb	r3, [r3, #0]
   1e654:	4a24      	ldr	r2, [pc, #144]	; (1e6e8 <sd_mmc_select_slot+0xb0>)
   1e656:	015b      	lsls	r3, r3, #5
   1e658:	18d3      	adds	r3, r2, r3
   1e65a:	330a      	adds	r3, #10
   1e65c:	781b      	ldrb	r3, [r3, #0]
   1e65e:	2b04      	cmp	r3, #4
   1e660:	d008      	beq.n	1e674 <sd_mmc_select_slot+0x3c>
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
   1e662:	1dfb      	adds	r3, r7, #7
   1e664:	781b      	ldrb	r3, [r3, #0]
   1e666:	4a20      	ldr	r2, [pc, #128]	; (1e6e8 <sd_mmc_select_slot+0xb0>)
   1e668:	015b      	lsls	r3, r3, #5
   1e66a:	18d3      	adds	r3, r2, r3
   1e66c:	330a      	adds	r3, #10
   1e66e:	781b      	ldrb	r3, [r3, #0]
   1e670:	2b03      	cmp	r3, #3
   1e672:	d11d      	bne.n	1e6b0 <sd_mmc_select_slot+0x78>
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
   1e674:	1dfb      	adds	r3, r7, #7
   1e676:	781b      	ldrb	r3, [r3, #0]
   1e678:	4a1b      	ldr	r2, [pc, #108]	; (1e6e8 <sd_mmc_select_slot+0xb0>)
   1e67a:	015b      	lsls	r3, r3, #5
   1e67c:	18d3      	adds	r3, r2, r3
   1e67e:	330a      	adds	r3, #10
   1e680:	2202      	movs	r2, #2
   1e682:	701a      	strb	r2, [r3, #0]
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
   1e684:	1dfb      	adds	r3, r7, #7
   1e686:	781a      	ldrb	r2, [r3, #0]
   1e688:	4b17      	ldr	r3, [pc, #92]	; (1e6e8 <sd_mmc_select_slot+0xb0>)
   1e68a:	0152      	lsls	r2, r2, #5
   1e68c:	4917      	ldr	r1, [pc, #92]	; (1e6ec <sd_mmc_select_slot+0xb4>)
   1e68e:	50d1      	str	r1, [r2, r3]
		sd_mmc_cards[slot].bus_width = 1;
   1e690:	1dfb      	adds	r3, r7, #7
   1e692:	781b      	ldrb	r3, [r3, #0]
   1e694:	4a14      	ldr	r2, [pc, #80]	; (1e6e8 <sd_mmc_select_slot+0xb0>)
   1e696:	015b      	lsls	r3, r3, #5
   1e698:	18d3      	adds	r3, r2, r3
   1e69a:	330d      	adds	r3, #13
   1e69c:	2201      	movs	r2, #1
   1e69e:	701a      	strb	r2, [r3, #0]
		sd_mmc_cards[slot].high_speed = 0;
   1e6a0:	1dfb      	adds	r3, r7, #7
   1e6a2:	781b      	ldrb	r3, [r3, #0]
   1e6a4:	4a10      	ldr	r2, [pc, #64]	; (1e6e8 <sd_mmc_select_slot+0xb0>)
   1e6a6:	015b      	lsls	r3, r3, #5
   1e6a8:	18d3      	adds	r3, r2, r3
   1e6aa:	331e      	adds	r3, #30
   1e6ac:	2200      	movs	r2, #0
   1e6ae:	701a      	strb	r2, [r3, #0]
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
   1e6b0:	4b0f      	ldr	r3, [pc, #60]	; (1e6f0 <sd_mmc_select_slot+0xb8>)
   1e6b2:	1dfa      	adds	r2, r7, #7
   1e6b4:	7812      	ldrb	r2, [r2, #0]
   1e6b6:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
   1e6b8:	1dfb      	adds	r3, r7, #7
   1e6ba:	781b      	ldrb	r3, [r3, #0]
   1e6bc:	015a      	lsls	r2, r3, #5
   1e6be:	4b0a      	ldr	r3, [pc, #40]	; (1e6e8 <sd_mmc_select_slot+0xb0>)
   1e6c0:	18d2      	adds	r2, r2, r3
   1e6c2:	4b0c      	ldr	r3, [pc, #48]	; (1e6f4 <sd_mmc_select_slot+0xbc>)
   1e6c4:	601a      	str	r2, [r3, #0]
	sd_mmc_configure_slot();
   1e6c6:	4b0c      	ldr	r3, [pc, #48]	; (1e6f8 <sd_mmc_select_slot+0xc0>)
   1e6c8:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
   1e6ca:	1dfb      	adds	r3, r7, #7
   1e6cc:	781b      	ldrb	r3, [r3, #0]
   1e6ce:	4a06      	ldr	r2, [pc, #24]	; (1e6e8 <sd_mmc_select_slot+0xb0>)
   1e6d0:	015b      	lsls	r3, r3, #5
   1e6d2:	18d3      	adds	r3, r2, r3
   1e6d4:	330a      	adds	r3, #10
   1e6d6:	781b      	ldrb	r3, [r3, #0]
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
   1e6d8:	3b02      	subs	r3, #2
   1e6da:	425a      	negs	r2, r3
   1e6dc:	4153      	adcs	r3, r2
   1e6de:	b2db      	uxtb	r3, r3
}
   1e6e0:	0018      	movs	r0, r3
   1e6e2:	46bd      	mov	sp, r7
   1e6e4:	b002      	add	sp, #8
   1e6e6:	bd80      	pop	{r7, pc}
   1e6e8:	20003c40 	.word	0x20003c40
   1e6ec:	00061a80 	.word	0x00061a80
   1e6f0:	20003c60 	.word	0x20003c60
   1e6f4:	20003c64 	.word	0x20003c64
   1e6f8:	0001e6fd 	.word	0x0001e6fd

0001e6fc <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
   1e6fc:	b5b0      	push	{r4, r5, r7, lr}
   1e6fe:	af00      	add	r7, sp, #0
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1e700:	4b09      	ldr	r3, [pc, #36]	; (1e728 <sd_mmc_configure_slot+0x2c>)
   1e702:	7818      	ldrb	r0, [r3, #0]
   1e704:	4b09      	ldr	r3, [pc, #36]	; (1e72c <sd_mmc_configure_slot+0x30>)
   1e706:	681b      	ldr	r3, [r3, #0]
   1e708:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
   1e70a:	4b08      	ldr	r3, [pc, #32]	; (1e72c <sd_mmc_configure_slot+0x30>)
   1e70c:	681b      	ldr	r3, [r3, #0]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1e70e:	7b5a      	ldrb	r2, [r3, #13]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
   1e710:	4b06      	ldr	r3, [pc, #24]	; (1e72c <sd_mmc_configure_slot+0x30>)
   1e712:	681b      	ldr	r3, [r3, #0]
   1e714:	7f9b      	ldrb	r3, [r3, #30]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1e716:	1e5c      	subs	r4, r3, #1
   1e718:	41a3      	sbcs	r3, r4
   1e71a:	b2db      	uxtb	r3, r3
   1e71c:	4c04      	ldr	r4, [pc, #16]	; (1e730 <sd_mmc_configure_slot+0x34>)
   1e71e:	47a0      	blx	r4
}
   1e720:	46c0      	nop			; (mov r8, r8)
   1e722:	46bd      	mov	sp, r7
   1e724:	bdb0      	pop	{r4, r5, r7, pc}
   1e726:	46c0      	nop			; (mov r8, r8)
   1e728:	20003c60 	.word	0x20003c60
   1e72c:	20003c64 	.word	0x20003c64
   1e730:	0001f4b9 	.word	0x0001f4b9

0001e734 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
   1e734:	b580      	push	{r7, lr}
   1e736:	af00      	add	r7, sp, #0
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
   1e738:	4b05      	ldr	r3, [pc, #20]	; (1e750 <sd_mmc_deselect_slot+0x1c>)
   1e73a:	781b      	ldrb	r3, [r3, #0]
   1e73c:	2b00      	cmp	r3, #0
   1e73e:	d104      	bne.n	1e74a <sd_mmc_deselect_slot+0x16>
		driver_deselect_device(sd_mmc_slot_sel);
   1e740:	4b03      	ldr	r3, [pc, #12]	; (1e750 <sd_mmc_deselect_slot+0x1c>)
   1e742:	781b      	ldrb	r3, [r3, #0]
   1e744:	0018      	movs	r0, r3
   1e746:	4b03      	ldr	r3, [pc, #12]	; (1e754 <sd_mmc_deselect_slot+0x20>)
   1e748:	4798      	blx	r3
	}
}
   1e74a:	46c0      	nop			; (mov r8, r8)
   1e74c:	46bd      	mov	sp, r7
   1e74e:	bd80      	pop	{r7, pc}
   1e750:	20003c60 	.word	0x20003c60
   1e754:	0001f541 	.word	0x0001f541

0001e758 <sd_mmc_spi_card_init>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_card_init(void)
{
   1e758:	b580      	push	{r7, lr}
   1e75a:	b082      	sub	sp, #8
   1e75c:	af00      	add	r7, sp, #0
	uint8_t v2 = 0;
   1e75e:	1dfb      	adds	r3, r7, #7
   1e760:	2200      	movs	r2, #0
   1e762:	701a      	strb	r2, [r3, #0]

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
   1e764:	4b59      	ldr	r3, [pc, #356]	; (1e8cc <sd_mmc_spi_card_init+0x174>)
   1e766:	681b      	ldr	r3, [r3, #0]
   1e768:	2201      	movs	r2, #1
   1e76a:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
   1e76c:	4b57      	ldr	r3, [pc, #348]	; (1e8cc <sd_mmc_spi_card_init+0x174>)
   1e76e:	681b      	ldr	r3, [r3, #0]
   1e770:	2200      	movs	r2, #0
   1e772:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
   1e774:	4b55      	ldr	r3, [pc, #340]	; (1e8cc <sd_mmc_spi_card_init+0x174>)
   1e776:	681b      	ldr	r3, [r3, #0]
   1e778:	2200      	movs	r2, #0
   1e77a:	811a      	strh	r2, [r3, #8]
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();
   1e77c:	4b54      	ldr	r3, [pc, #336]	; (1e8d0 <sd_mmc_spi_card_init+0x178>)
   1e77e:	4798      	blx	r3

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   1e780:	2388      	movs	r3, #136	; 0x88
   1e782:	015b      	lsls	r3, r3, #5
   1e784:	2100      	movs	r1, #0
   1e786:	0018      	movs	r0, r3
   1e788:	4b52      	ldr	r3, [pc, #328]	; (1e8d4 <sd_mmc_spi_card_init+0x17c>)
   1e78a:	4798      	blx	r3
   1e78c:	0003      	movs	r3, r0
   1e78e:	001a      	movs	r2, r3
   1e790:	2301      	movs	r3, #1
   1e792:	4053      	eors	r3, r2
   1e794:	b2db      	uxtb	r3, r3
   1e796:	2b00      	cmp	r3, #0
   1e798:	d001      	beq.n	1e79e <sd_mmc_spi_card_init+0x46>
		return false;
   1e79a:	2300      	movs	r3, #0
   1e79c:	e092      	b.n	1e8c4 <sd_mmc_spi_card_init+0x16c>
	}
	if (!sd_cmd8(&v2)) {
   1e79e:	1dfb      	adds	r3, r7, #7
   1e7a0:	0018      	movs	r0, r3
   1e7a2:	4b4d      	ldr	r3, [pc, #308]	; (1e8d8 <sd_mmc_spi_card_init+0x180>)
   1e7a4:	4798      	blx	r3
   1e7a6:	0003      	movs	r3, r0
   1e7a8:	001a      	movs	r2, r3
   1e7aa:	2301      	movs	r3, #1
   1e7ac:	4053      	eors	r3, r2
   1e7ae:	b2db      	uxtb	r3, r3
   1e7b0:	2b00      	cmp	r3, #0
   1e7b2:	d001      	beq.n	1e7b8 <sd_mmc_spi_card_init+0x60>
		return false;
   1e7b4:	2300      	movs	r3, #0
   1e7b6:	e085      	b.n	1e8c4 <sd_mmc_spi_card_init+0x16c>
	}
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
   1e7b8:	4b48      	ldr	r3, [pc, #288]	; (1e8dc <sd_mmc_spi_card_init+0x184>)
   1e7ba:	4798      	blx	r3
   1e7bc:	0003      	movs	r3, r0
   1e7be:	001a      	movs	r2, r3
   1e7c0:	2301      	movs	r3, #1
   1e7c2:	4053      	eors	r3, r2
   1e7c4:	b2db      	uxtb	r3, r3
   1e7c6:	2b00      	cmp	r3, #0
   1e7c8:	d001      	beq.n	1e7ce <sd_mmc_spi_card_init+0x76>
		return false;
   1e7ca:	2300      	movs	r3, #0
   1e7cc:	e07a      	b.n	1e8c4 <sd_mmc_spi_card_init+0x16c>
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1e7ce:	4b3f      	ldr	r3, [pc, #252]	; (1e8cc <sd_mmc_spi_card_init+0x174>)
   1e7d0:	681b      	ldr	r3, [r3, #0]
   1e7d2:	7adb      	ldrb	r3, [r3, #11]
   1e7d4:	001a      	movs	r2, r3
   1e7d6:	2301      	movs	r3, #1
   1e7d8:	4013      	ands	r3, r2
   1e7da:	d021      	beq.n	1e820 <sd_mmc_spi_card_init+0xc8>
		// Try to get the SD card's operating condition
		if (!sd_spi_op_cond(v2)) {
   1e7dc:	1dfb      	adds	r3, r7, #7
   1e7de:	781b      	ldrb	r3, [r3, #0]
   1e7e0:	0018      	movs	r0, r3
   1e7e2:	4b3f      	ldr	r3, [pc, #252]	; (1e8e0 <sd_mmc_spi_card_init+0x188>)
   1e7e4:	4798      	blx	r3
   1e7e6:	0003      	movs	r3, r0
   1e7e8:	001a      	movs	r2, r3
   1e7ea:	2301      	movs	r3, #1
   1e7ec:	4053      	eors	r3, r2
   1e7ee:	b2db      	uxtb	r3, r3
   1e7f0:	2b00      	cmp	r3, #0
   1e7f2:	d007      	beq.n	1e804 <sd_mmc_spi_card_init+0xac>
			// It is not a SD card
			sd_mmc_debug("Start MMC Install\n\r");
			sd_mmc_card->type = CARD_TYPE_MMC;
   1e7f4:	4b35      	ldr	r3, [pc, #212]	; (1e8cc <sd_mmc_spi_card_init+0x174>)
   1e7f6:	681b      	ldr	r3, [r3, #0]
   1e7f8:	2202      	movs	r2, #2
   1e7fa:	72da      	strb	r2, [r3, #11]
			return sd_mmc_spi_install_mmc();
   1e7fc:	4b39      	ldr	r3, [pc, #228]	; (1e8e4 <sd_mmc_spi_card_init+0x18c>)
   1e7fe:	4798      	blx	r3
   1e800:	0003      	movs	r3, r0
   1e802:	e05f      	b.n	1e8c4 <sd_mmc_spi_card_init+0x16c>
		 * However, to be sure, the CRC OFF command is send.
		 * Unfortunately, specific SDIO card does not support it
		 * (H&D wireless card - HDG104 WiFi SIP)
		 * and the command is send only on SD card.
		 */
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   1e804:	4b38      	ldr	r3, [pc, #224]	; (1e8e8 <sd_mmc_spi_card_init+0x190>)
   1e806:	2100      	movs	r1, #0
   1e808:	0018      	movs	r0, r3
   1e80a:	4b32      	ldr	r3, [pc, #200]	; (1e8d4 <sd_mmc_spi_card_init+0x17c>)
   1e80c:	4798      	blx	r3
   1e80e:	0003      	movs	r3, r0
   1e810:	001a      	movs	r2, r3
   1e812:	2301      	movs	r3, #1
   1e814:	4053      	eors	r3, r2
   1e816:	b2db      	uxtb	r3, r3
   1e818:	2b00      	cmp	r3, #0
   1e81a:	d001      	beq.n	1e820 <sd_mmc_spi_card_init+0xc8>
			return false;
   1e81c:	2300      	movs	r3, #0
   1e81e:	e051      	b.n	1e8c4 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// SD MEMORY
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1e820:	4b2a      	ldr	r3, [pc, #168]	; (1e8cc <sd_mmc_spi_card_init+0x174>)
   1e822:	681b      	ldr	r3, [r3, #0]
   1e824:	7adb      	ldrb	r3, [r3, #11]
   1e826:	001a      	movs	r2, r3
   1e828:	2301      	movs	r3, #1
   1e82a:	4013      	ands	r3, r2
   1e82c:	d017      	beq.n	1e85e <sd_mmc_spi_card_init+0x106>
		// Get the Card-Specific Data
		if (!sd_mmc_cmd9_spi()) {
   1e82e:	4b2f      	ldr	r3, [pc, #188]	; (1e8ec <sd_mmc_spi_card_init+0x194>)
   1e830:	4798      	blx	r3
   1e832:	0003      	movs	r3, r0
   1e834:	001a      	movs	r2, r3
   1e836:	2301      	movs	r3, #1
   1e838:	4053      	eors	r3, r2
   1e83a:	b2db      	uxtb	r3, r3
   1e83c:	2b00      	cmp	r3, #0
   1e83e:	d001      	beq.n	1e844 <sd_mmc_spi_card_init+0xec>
			return false;
   1e840:	2300      	movs	r3, #0
   1e842:	e03f      	b.n	1e8c4 <sd_mmc_spi_card_init+0x16c>
		}
		sd_decode_csd();
   1e844:	4b2a      	ldr	r3, [pc, #168]	; (1e8f0 <sd_mmc_spi_card_init+0x198>)
   1e846:	4798      	blx	r3
		// Read the SCR to get card version
		if (!sd_acmd51()) {
   1e848:	4b2a      	ldr	r3, [pc, #168]	; (1e8f4 <sd_mmc_spi_card_init+0x19c>)
   1e84a:	4798      	blx	r3
   1e84c:	0003      	movs	r3, r0
   1e84e:	001a      	movs	r2, r3
   1e850:	2301      	movs	r3, #1
   1e852:	4053      	eors	r3, r2
   1e854:	b2db      	uxtb	r3, r3
   1e856:	2b00      	cmp	r3, #0
   1e858:	d001      	beq.n	1e85e <sd_mmc_spi_card_init+0x106>
			return false;
   1e85a:	2300      	movs	r3, #0
   1e85c:	e032      	b.n	1e8c4 <sd_mmc_spi_card_init+0x16c>
		if (!sdio_get_max_speed()) {
			return false;
		}
	}
	// SD MEMORY not HC, Set default block size
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   1e85e:	4b1b      	ldr	r3, [pc, #108]	; (1e8cc <sd_mmc_spi_card_init+0x174>)
   1e860:	681b      	ldr	r3, [r3, #0]
   1e862:	7adb      	ldrb	r3, [r3, #11]
   1e864:	001a      	movs	r2, r3
   1e866:	2301      	movs	r3, #1
   1e868:	4013      	ands	r3, r2
   1e86a:	d016      	beq.n	1e89a <sd_mmc_spi_card_init+0x142>
			(0 == (sd_mmc_card->type & CARD_TYPE_HC))) {
   1e86c:	4b17      	ldr	r3, [pc, #92]	; (1e8cc <sd_mmc_spi_card_init+0x174>)
   1e86e:	681b      	ldr	r3, [r3, #0]
   1e870:	7adb      	ldrb	r3, [r3, #11]
   1e872:	001a      	movs	r2, r3
   1e874:	2308      	movs	r3, #8
   1e876:	4013      	ands	r3, r2
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   1e878:	d10f      	bne.n	1e89a <sd_mmc_spi_card_init+0x142>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   1e87a:	2380      	movs	r3, #128	; 0x80
   1e87c:	009b      	lsls	r3, r3, #2
   1e87e:	4a1e      	ldr	r2, [pc, #120]	; (1e8f8 <sd_mmc_spi_card_init+0x1a0>)
   1e880:	0019      	movs	r1, r3
   1e882:	0010      	movs	r0, r2
   1e884:	4b13      	ldr	r3, [pc, #76]	; (1e8d4 <sd_mmc_spi_card_init+0x17c>)
   1e886:	4798      	blx	r3
   1e888:	0003      	movs	r3, r0
   1e88a:	001a      	movs	r2, r3
   1e88c:	2301      	movs	r3, #1
   1e88e:	4053      	eors	r3, r2
   1e890:	b2db      	uxtb	r3, r3
   1e892:	2b00      	cmp	r3, #0
   1e894:	d001      	beq.n	1e89a <sd_mmc_spi_card_init+0x142>
			return false;
   1e896:	2300      	movs	r3, #0
   1e898:	e014      	b.n	1e8c4 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Check communication
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1e89a:	4b0c      	ldr	r3, [pc, #48]	; (1e8cc <sd_mmc_spi_card_init+0x174>)
   1e89c:	681b      	ldr	r3, [r3, #0]
   1e89e:	7adb      	ldrb	r3, [r3, #11]
   1e8a0:	001a      	movs	r2, r3
   1e8a2:	2301      	movs	r3, #1
   1e8a4:	4013      	ands	r3, r2
   1e8a6:	d00a      	beq.n	1e8be <sd_mmc_spi_card_init+0x166>
		if (!sd_mmc_cmd13()) {
   1e8a8:	4b14      	ldr	r3, [pc, #80]	; (1e8fc <sd_mmc_spi_card_init+0x1a4>)
   1e8aa:	4798      	blx	r3
   1e8ac:	0003      	movs	r3, r0
   1e8ae:	001a      	movs	r2, r3
   1e8b0:	2301      	movs	r3, #1
   1e8b2:	4053      	eors	r3, r2
   1e8b4:	b2db      	uxtb	r3, r3
   1e8b6:	2b00      	cmp	r3, #0
   1e8b8:	d001      	beq.n	1e8be <sd_mmc_spi_card_init+0x166>
			return false;
   1e8ba:	2300      	movs	r3, #0
   1e8bc:	e002      	b.n	1e8c4 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
   1e8be:	4b10      	ldr	r3, [pc, #64]	; (1e900 <sd_mmc_spi_card_init+0x1a8>)
   1e8c0:	4798      	blx	r3
	return true;
   1e8c2:	2301      	movs	r3, #1
}
   1e8c4:	0018      	movs	r0, r3
   1e8c6:	46bd      	mov	sp, r7
   1e8c8:	b002      	add	sp, #8
   1e8ca:	bd80      	pop	{r7, pc}
   1e8cc:	20003c64 	.word	0x20003c64
   1e8d0:	0001f585 	.word	0x0001f585
   1e8d4:	0001f5d1 	.word	0x0001f5d1
   1e8d8:	0001e0ad 	.word	0x0001e0ad
   1e8dc:	0001e0a1 	.word	0x0001e0a1
   1e8e0:	0001dfbd 	.word	0x0001dfbd
   1e8e4:	0001e905 	.word	0x0001e905
   1e8e8:	0000113b 	.word	0x0000113b
   1e8ec:	0001e249 	.word	0x0001e249
   1e8f0:	0001e3e9 	.word	0x0001e3e9
   1e8f4:	0001e531 	.word	0x0001e531
   1e8f8:	00001110 	.word	0x00001110
   1e8fc:	0001e4d5 	.word	0x0001e4d5
   1e900:	0001e6fd 	.word	0x0001e6fd

0001e904 <sd_mmc_spi_install_mmc>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_install_mmc(void)
{
   1e904:	b580      	push	{r7, lr}
   1e906:	b082      	sub	sp, #8
   1e908:	af00      	add	r7, sp, #0
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   1e90a:	2388      	movs	r3, #136	; 0x88
   1e90c:	015b      	lsls	r3, r3, #5
   1e90e:	2100      	movs	r1, #0
   1e910:	0018      	movs	r0, r3
   1e912:	4b32      	ldr	r3, [pc, #200]	; (1e9dc <sd_mmc_spi_install_mmc+0xd8>)
   1e914:	4798      	blx	r3
   1e916:	0003      	movs	r3, r0
   1e918:	001a      	movs	r2, r3
   1e91a:	2301      	movs	r3, #1
   1e91c:	4053      	eors	r3, r2
   1e91e:	b2db      	uxtb	r3, r3
   1e920:	2b00      	cmp	r3, #0
   1e922:	d001      	beq.n	1e928 <sd_mmc_spi_install_mmc+0x24>
		return false;
   1e924:	2300      	movs	r3, #0
   1e926:	e055      	b.n	1e9d4 <sd_mmc_spi_install_mmc+0xd0>
	}

	if (!mmc_spi_op_cond()) {
   1e928:	4b2d      	ldr	r3, [pc, #180]	; (1e9e0 <sd_mmc_spi_install_mmc+0xdc>)
   1e92a:	4798      	blx	r3
   1e92c:	0003      	movs	r3, r0
   1e92e:	001a      	movs	r2, r3
   1e930:	2301      	movs	r3, #1
   1e932:	4053      	eors	r3, r2
   1e934:	b2db      	uxtb	r3, r3
   1e936:	2b00      	cmp	r3, #0
   1e938:	d001      	beq.n	1e93e <sd_mmc_spi_install_mmc+0x3a>
		return false;
   1e93a:	2300      	movs	r3, #0
   1e93c:	e04a      	b.n	1e9d4 <sd_mmc_spi_install_mmc+0xd0>
	}

	// Disable CRC check for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   1e93e:	4b29      	ldr	r3, [pc, #164]	; (1e9e4 <sd_mmc_spi_install_mmc+0xe0>)
   1e940:	2100      	movs	r1, #0
   1e942:	0018      	movs	r0, r3
   1e944:	4b25      	ldr	r3, [pc, #148]	; (1e9dc <sd_mmc_spi_install_mmc+0xd8>)
   1e946:	4798      	blx	r3
   1e948:	0003      	movs	r3, r0
   1e94a:	001a      	movs	r2, r3
   1e94c:	2301      	movs	r3, #1
   1e94e:	4053      	eors	r3, r2
   1e950:	b2db      	uxtb	r3, r3
   1e952:	2b00      	cmp	r3, #0
   1e954:	d001      	beq.n	1e95a <sd_mmc_spi_install_mmc+0x56>
		return false;
   1e956:	2300      	movs	r3, #0
   1e958:	e03c      	b.n	1e9d4 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_spi()) {
   1e95a:	4b23      	ldr	r3, [pc, #140]	; (1e9e8 <sd_mmc_spi_install_mmc+0xe4>)
   1e95c:	4798      	blx	r3
   1e95e:	0003      	movs	r3, r0
   1e960:	001a      	movs	r2, r3
   1e962:	2301      	movs	r3, #1
   1e964:	4053      	eors	r3, r2
   1e966:	b2db      	uxtb	r3, r3
   1e968:	2b00      	cmp	r3, #0
   1e96a:	d001      	beq.n	1e970 <sd_mmc_spi_install_mmc+0x6c>
		return false;
   1e96c:	2300      	movs	r3, #0
   1e96e:	e031      	b.n	1e9d4 <sd_mmc_spi_install_mmc+0xd0>
	}
	mmc_decode_csd();
   1e970:	4b1e      	ldr	r3, [pc, #120]	; (1e9ec <sd_mmc_spi_install_mmc+0xe8>)
   1e972:	4798      	blx	r3
	// For MMC 4.0 Higher version
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
   1e974:	4b1e      	ldr	r3, [pc, #120]	; (1e9f0 <sd_mmc_spi_install_mmc+0xec>)
   1e976:	681b      	ldr	r3, [r3, #0]
   1e978:	7b1b      	ldrb	r3, [r3, #12]
   1e97a:	2b3f      	cmp	r3, #63	; 0x3f
   1e97c:	d90c      	bls.n	1e998 <sd_mmc_spi_install_mmc+0x94>
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
   1e97e:	1dfb      	adds	r3, r7, #7
   1e980:	0018      	movs	r0, r3
   1e982:	4b1c      	ldr	r3, [pc, #112]	; (1e9f4 <sd_mmc_spi_install_mmc+0xf0>)
   1e984:	4798      	blx	r3
   1e986:	0003      	movs	r3, r0
   1e988:	001a      	movs	r2, r3
   1e98a:	2301      	movs	r3, #1
   1e98c:	4053      	eors	r3, r2
   1e98e:	b2db      	uxtb	r3, r3
   1e990:	2b00      	cmp	r3, #0
   1e992:	d001      	beq.n	1e998 <sd_mmc_spi_install_mmc+0x94>
			return false;
   1e994:	2300      	movs	r3, #0
   1e996:	e01d      	b.n	1e9d4 <sd_mmc_spi_install_mmc+0xd0>
		}
	}
	// Set default block size
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   1e998:	2380      	movs	r3, #128	; 0x80
   1e99a:	009b      	lsls	r3, r3, #2
   1e99c:	4a16      	ldr	r2, [pc, #88]	; (1e9f8 <sd_mmc_spi_install_mmc+0xf4>)
   1e99e:	0019      	movs	r1, r3
   1e9a0:	0010      	movs	r0, r2
   1e9a2:	4b0e      	ldr	r3, [pc, #56]	; (1e9dc <sd_mmc_spi_install_mmc+0xd8>)
   1e9a4:	4798      	blx	r3
   1e9a6:	0003      	movs	r3, r0
   1e9a8:	001a      	movs	r2, r3
   1e9aa:	2301      	movs	r3, #1
   1e9ac:	4053      	eors	r3, r2
   1e9ae:	b2db      	uxtb	r3, r3
   1e9b0:	2b00      	cmp	r3, #0
   1e9b2:	d001      	beq.n	1e9b8 <sd_mmc_spi_install_mmc+0xb4>
		return false;
   1e9b4:	2300      	movs	r3, #0
   1e9b6:	e00d      	b.n	1e9d4 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Check communication
	if (!sd_mmc_cmd13()) {
   1e9b8:	4b10      	ldr	r3, [pc, #64]	; (1e9fc <sd_mmc_spi_install_mmc+0xf8>)
   1e9ba:	4798      	blx	r3
   1e9bc:	0003      	movs	r3, r0
   1e9be:	001a      	movs	r2, r3
   1e9c0:	2301      	movs	r3, #1
   1e9c2:	4053      	eors	r3, r2
   1e9c4:	b2db      	uxtb	r3, r3
   1e9c6:	2b00      	cmp	r3, #0
   1e9c8:	d001      	beq.n	1e9ce <sd_mmc_spi_install_mmc+0xca>
		return false;
   1e9ca:	2300      	movs	r3, #0
   1e9cc:	e002      	b.n	1e9d4 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
   1e9ce:	4b0c      	ldr	r3, [pc, #48]	; (1ea00 <sd_mmc_spi_install_mmc+0xfc>)
   1e9d0:	4798      	blx	r3
	return true;
   1e9d2:	2301      	movs	r3, #1
}
   1e9d4:	0018      	movs	r0, r3
   1e9d6:	46bd      	mov	sp, r7
   1e9d8:	b002      	add	sp, #8
   1e9da:	bd80      	pop	{r7, pc}
   1e9dc:	0001f5d1 	.word	0x0001f5d1
   1e9e0:	0001df11 	.word	0x0001df11
   1e9e4:	0000113b 	.word	0x0000113b
   1e9e8:	0001e249 	.word	0x0001e249
   1e9ec:	0001e2b9 	.word	0x0001e2b9
   1e9f0:	20003c64 	.word	0x20003c64
   1e9f4:	0001e11d 	.word	0x0001e11d
   1e9f8:	00001110 	.word	0x00001110
   1e9fc:	0001e4d5 	.word	0x0001e4d5
   1ea00:	0001e6fd 	.word	0x0001e6fd

0001ea04 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
   1ea04:	b590      	push	{r4, r7, lr}
   1ea06:	b085      	sub	sp, #20
   1ea08:	af00      	add	r7, sp, #0
   1ea0a:	0002      	movs	r2, r0
   1ea0c:	1dfb      	adds	r3, r7, #7
   1ea0e:	701a      	strb	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1ea10:	230f      	movs	r3, #15
   1ea12:	18fc      	adds	r4, r7, r3
   1ea14:	1dfb      	adds	r3, r7, #7
   1ea16:	781b      	ldrb	r3, [r3, #0]
   1ea18:	0018      	movs	r0, r3
   1ea1a:	4b13      	ldr	r3, [pc, #76]	; (1ea68 <sd_mmc_check+0x64>)
   1ea1c:	4798      	blx	r3
   1ea1e:	0003      	movs	r3, r0
   1ea20:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
   1ea22:	230f      	movs	r3, #15
   1ea24:	18fb      	adds	r3, r7, r3
   1ea26:	781b      	ldrb	r3, [r3, #0]
   1ea28:	2b01      	cmp	r3, #1
   1ea2a:	d005      	beq.n	1ea38 <sd_mmc_check+0x34>
		sd_mmc_deselect_slot();
   1ea2c:	4b0f      	ldr	r3, [pc, #60]	; (1ea6c <sd_mmc_check+0x68>)
   1ea2e:	4798      	blx	r3
		return sd_mmc_err;
   1ea30:	230f      	movs	r3, #15
   1ea32:	18fb      	adds	r3, r7, r3
   1ea34:	781b      	ldrb	r3, [r3, #0]
   1ea36:	e012      	b.n	1ea5e <sd_mmc_check+0x5a>
	}

	// Initialization of the card requested
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
   1ea38:	4b0d      	ldr	r3, [pc, #52]	; (1ea70 <sd_mmc_check+0x6c>)
   1ea3a:	4798      	blx	r3
   1ea3c:	1e03      	subs	r3, r0, #0
   1ea3e:	d007      	beq.n	1ea50 <sd_mmc_check+0x4c>
			: sd_mmc_mci_card_init()) {
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
   1ea40:	4b0c      	ldr	r3, [pc, #48]	; (1ea74 <sd_mmc_check+0x70>)
   1ea42:	681b      	ldr	r3, [r3, #0]
   1ea44:	2200      	movs	r2, #0
   1ea46:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
   1ea48:	4b08      	ldr	r3, [pc, #32]	; (1ea6c <sd_mmc_check+0x68>)
   1ea4a:	4798      	blx	r3
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
   1ea4c:	2301      	movs	r3, #1
   1ea4e:	e006      	b.n	1ea5e <sd_mmc_check+0x5a>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
   1ea50:	4b08      	ldr	r3, [pc, #32]	; (1ea74 <sd_mmc_check+0x70>)
   1ea52:	681b      	ldr	r3, [r3, #0]
   1ea54:	2203      	movs	r2, #3
   1ea56:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
   1ea58:	4b04      	ldr	r3, [pc, #16]	; (1ea6c <sd_mmc_check+0x68>)
   1ea5a:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
   1ea5c:	2303      	movs	r3, #3
}
   1ea5e:	0018      	movs	r0, r3
   1ea60:	46bd      	mov	sp, r7
   1ea62:	b005      	add	sp, #20
   1ea64:	bd90      	pop	{r4, r7, pc}
   1ea66:	46c0      	nop			; (mov r8, r8)
   1ea68:	0001e639 	.word	0x0001e639
   1ea6c:	0001e735 	.word	0x0001e735
   1ea70:	0001e759 	.word	0x0001e759
   1ea74:	20003c64 	.word	0x20003c64

0001ea78 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
   1ea78:	b580      	push	{r7, lr}
   1ea7a:	b082      	sub	sp, #8
   1ea7c:	af00      	add	r7, sp, #0
   1ea7e:	0002      	movs	r2, r0
   1ea80:	1dfb      	adds	r3, r7, #7
   1ea82:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   1ea84:	1dfb      	adds	r3, r7, #7
   1ea86:	781b      	ldrb	r3, [r3, #0]
   1ea88:	0018      	movs	r0, r3
   1ea8a:	4b07      	ldr	r3, [pc, #28]	; (1eaa8 <sd_mmc_get_type+0x30>)
   1ea8c:	4798      	blx	r3
   1ea8e:	1e03      	subs	r3, r0, #0
   1ea90:	d001      	beq.n	1ea96 <sd_mmc_get_type+0x1e>
		return CARD_TYPE_UNKNOWN;
   1ea92:	2300      	movs	r3, #0
   1ea94:	e004      	b.n	1eaa0 <sd_mmc_get_type+0x28>
	}
	sd_mmc_deselect_slot();
   1ea96:	4b05      	ldr	r3, [pc, #20]	; (1eaac <sd_mmc_get_type+0x34>)
   1ea98:	4798      	blx	r3
	return sd_mmc_card->type;
   1ea9a:	4b05      	ldr	r3, [pc, #20]	; (1eab0 <sd_mmc_get_type+0x38>)
   1ea9c:	681b      	ldr	r3, [r3, #0]
   1ea9e:	7adb      	ldrb	r3, [r3, #11]
}
   1eaa0:	0018      	movs	r0, r3
   1eaa2:	46bd      	mov	sp, r7
   1eaa4:	b002      	add	sp, #8
   1eaa6:	bd80      	pop	{r7, pc}
   1eaa8:	0001e639 	.word	0x0001e639
   1eaac:	0001e735 	.word	0x0001e735
   1eab0:	20003c64 	.word	0x20003c64

0001eab4 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
   1eab4:	b580      	push	{r7, lr}
   1eab6:	b082      	sub	sp, #8
   1eab8:	af00      	add	r7, sp, #0
   1eaba:	0002      	movs	r2, r0
   1eabc:	1dfb      	adds	r3, r7, #7
   1eabe:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   1eac0:	1dfb      	adds	r3, r7, #7
   1eac2:	781b      	ldrb	r3, [r3, #0]
   1eac4:	0018      	movs	r0, r3
   1eac6:	4b07      	ldr	r3, [pc, #28]	; (1eae4 <sd_mmc_get_capacity+0x30>)
   1eac8:	4798      	blx	r3
   1eaca:	1e03      	subs	r3, r0, #0
   1eacc:	d001      	beq.n	1ead2 <sd_mmc_get_capacity+0x1e>
		return 0;
   1eace:	2300      	movs	r3, #0
   1ead0:	e004      	b.n	1eadc <sd_mmc_get_capacity+0x28>
	}
	sd_mmc_deselect_slot();
   1ead2:	4b05      	ldr	r3, [pc, #20]	; (1eae8 <sd_mmc_get_capacity+0x34>)
   1ead4:	4798      	blx	r3
	return sd_mmc_card->capacity;
   1ead6:	4b05      	ldr	r3, [pc, #20]	; (1eaec <sd_mmc_get_capacity+0x38>)
   1ead8:	681b      	ldr	r3, [r3, #0]
   1eada:	685b      	ldr	r3, [r3, #4]
}
   1eadc:	0018      	movs	r0, r3
   1eade:	46bd      	mov	sp, r7
   1eae0:	b002      	add	sp, #8
   1eae2:	bd80      	pop	{r7, pc}
   1eae4:	0001e639 	.word	0x0001e639
   1eae8:	0001e735 	.word	0x0001e735
   1eaec:	20003c64 	.word	0x20003c64

0001eaf0 <sd_mmc_is_write_protected>:

bool sd_mmc_is_write_protected(uint8_t slot)
{
   1eaf0:	b580      	push	{r7, lr}
   1eaf2:	b082      	sub	sp, #8
   1eaf4:	af00      	add	r7, sp, #0
   1eaf6:	0002      	movs	r2, r0
   1eaf8:	1dfb      	adds	r3, r7, #7
   1eafa:	701a      	strb	r2, [r3, #0]
	if (port_pin_get_input_level(sd_mmc_cards[slot].wp_gpio)
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
   1eafc:	2300      	movs	r3, #0
}
   1eafe:	0018      	movs	r0, r3
   1eb00:	46bd      	mov	sp, r7
   1eb02:	b002      	add	sp, #8
   1eb04:	bd80      	pop	{r7, pc}
	...

0001eb08 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   1eb08:	b590      	push	{r4, r7, lr}
   1eb0a:	b089      	sub	sp, #36	; 0x24
   1eb0c:	af02      	add	r7, sp, #8
   1eb0e:	6039      	str	r1, [r7, #0]
   1eb10:	0011      	movs	r1, r2
   1eb12:	1dfb      	adds	r3, r7, #7
   1eb14:	1c02      	adds	r2, r0, #0
   1eb16:	701a      	strb	r2, [r3, #0]
   1eb18:	1d3b      	adds	r3, r7, #4
   1eb1a:	1c0a      	adds	r2, r1, #0
   1eb1c:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1eb1e:	230f      	movs	r3, #15
   1eb20:	18fc      	adds	r4, r7, r3
   1eb22:	1dfb      	adds	r3, r7, #7
   1eb24:	781b      	ldrb	r3, [r3, #0]
   1eb26:	0018      	movs	r0, r3
   1eb28:	4b29      	ldr	r3, [pc, #164]	; (1ebd0 <sd_mmc_init_read_blocks+0xc8>)
   1eb2a:	4798      	blx	r3
   1eb2c:	0003      	movs	r3, r0
   1eb2e:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
   1eb30:	230f      	movs	r3, #15
   1eb32:	18fb      	adds	r3, r7, r3
   1eb34:	781b      	ldrb	r3, [r3, #0]
   1eb36:	2b00      	cmp	r3, #0
   1eb38:	d003      	beq.n	1eb42 <sd_mmc_init_read_blocks+0x3a>
		return sd_mmc_err;
   1eb3a:	230f      	movs	r3, #15
   1eb3c:	18fb      	adds	r3, r7, r3
   1eb3e:	781b      	ldrb	r3, [r3, #0]
   1eb40:	e041      	b.n	1ebc6 <sd_mmc_init_read_blocks+0xbe>
	}

	// Wait for data ready status
	if (!sd_mmc_cmd13()) {
   1eb42:	4b24      	ldr	r3, [pc, #144]	; (1ebd4 <sd_mmc_init_read_blocks+0xcc>)
   1eb44:	4798      	blx	r3
   1eb46:	0003      	movs	r3, r0
   1eb48:	001a      	movs	r2, r3
   1eb4a:	2301      	movs	r3, #1
   1eb4c:	4053      	eors	r3, r2
   1eb4e:	b2db      	uxtb	r3, r3
   1eb50:	2b00      	cmp	r3, #0
   1eb52:	d003      	beq.n	1eb5c <sd_mmc_init_read_blocks+0x54>
		sd_mmc_deselect_slot();
   1eb54:	4b20      	ldr	r3, [pc, #128]	; (1ebd8 <sd_mmc_init_read_blocks+0xd0>)
   1eb56:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1eb58:	2305      	movs	r3, #5
   1eb5a:	e034      	b.n	1ebc6 <sd_mmc_init_read_blocks+0xbe>
	}

	if (nb_block > 1) {
   1eb5c:	1d3b      	adds	r3, r7, #4
   1eb5e:	881b      	ldrh	r3, [r3, #0]
   1eb60:	2b01      	cmp	r3, #1
   1eb62:	d902      	bls.n	1eb6a <sd_mmc_init_read_blocks+0x62>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
   1eb64:	4b1d      	ldr	r3, [pc, #116]	; (1ebdc <sd_mmc_init_read_blocks+0xd4>)
   1eb66:	617b      	str	r3, [r7, #20]
   1eb68:	e001      	b.n	1eb6e <sd_mmc_init_read_blocks+0x66>
	} else {
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
   1eb6a:	4b1d      	ldr	r3, [pc, #116]	; (1ebe0 <sd_mmc_init_read_blocks+0xd8>)
   1eb6c:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   1eb6e:	4b1d      	ldr	r3, [pc, #116]	; (1ebe4 <sd_mmc_init_read_blocks+0xdc>)
   1eb70:	681b      	ldr	r3, [r3, #0]
   1eb72:	7adb      	ldrb	r3, [r3, #11]
   1eb74:	001a      	movs	r2, r3
   1eb76:	2308      	movs	r3, #8
   1eb78:	4013      	ands	r3, r2
   1eb7a:	d002      	beq.n	1eb82 <sd_mmc_init_read_blocks+0x7a>
		arg = start;
   1eb7c:	683b      	ldr	r3, [r7, #0]
   1eb7e:	613b      	str	r3, [r7, #16]
   1eb80:	e002      	b.n	1eb88 <sd_mmc_init_read_blocks+0x80>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   1eb82:	683b      	ldr	r3, [r7, #0]
   1eb84:	025b      	lsls	r3, r3, #9
   1eb86:	613b      	str	r3, [r7, #16]
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   1eb88:	1d3b      	adds	r3, r7, #4
   1eb8a:	881c      	ldrh	r4, [r3, #0]
   1eb8c:	2380      	movs	r3, #128	; 0x80
   1eb8e:	009a      	lsls	r2, r3, #2
   1eb90:	6939      	ldr	r1, [r7, #16]
   1eb92:	6978      	ldr	r0, [r7, #20]
   1eb94:	2301      	movs	r3, #1
   1eb96:	9300      	str	r3, [sp, #0]
   1eb98:	0023      	movs	r3, r4
   1eb9a:	4c13      	ldr	r4, [pc, #76]	; (1ebe8 <sd_mmc_init_read_blocks+0xe0>)
   1eb9c:	47a0      	blx	r4
   1eb9e:	0003      	movs	r3, r0
   1eba0:	001a      	movs	r2, r3
   1eba2:	2301      	movs	r3, #1
   1eba4:	4053      	eors	r3, r2
   1eba6:	b2db      	uxtb	r3, r3
   1eba8:	2b00      	cmp	r3, #0
   1ebaa:	d003      	beq.n	1ebb4 <sd_mmc_init_read_blocks+0xac>
		sd_mmc_deselect_slot();
   1ebac:	4b0a      	ldr	r3, [pc, #40]	; (1ebd8 <sd_mmc_init_read_blocks+0xd0>)
   1ebae:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1ebb0:	2305      	movs	r3, #5
   1ebb2:	e008      	b.n	1ebc6 <sd_mmc_init_read_blocks+0xbe>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   1ebb4:	4b0d      	ldr	r3, [pc, #52]	; (1ebec <sd_mmc_init_read_blocks+0xe4>)
   1ebb6:	1d3a      	adds	r2, r7, #4
   1ebb8:	8812      	ldrh	r2, [r2, #0]
   1ebba:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   1ebbc:	4b0c      	ldr	r3, [pc, #48]	; (1ebf0 <sd_mmc_init_read_blocks+0xe8>)
   1ebbe:	1d3a      	adds	r2, r7, #4
   1ebc0:	8812      	ldrh	r2, [r2, #0]
   1ebc2:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1ebc4:	2300      	movs	r3, #0
}
   1ebc6:	0018      	movs	r0, r3
   1ebc8:	46bd      	mov	sp, r7
   1ebca:	b007      	add	sp, #28
   1ebcc:	bd90      	pop	{r4, r7, pc}
   1ebce:	46c0      	nop			; (mov r8, r8)
   1ebd0:	0001e639 	.word	0x0001e639
   1ebd4:	0001e4d5 	.word	0x0001e4d5
   1ebd8:	0001e735 	.word	0x0001e735
   1ebdc:	00101112 	.word	0x00101112
   1ebe0:	00081111 	.word	0x00081111
   1ebe4:	20003c64 	.word	0x20003c64
   1ebe8:	0001f5f9 	.word	0x0001f5f9
   1ebec:	20003c6a 	.word	0x20003c6a
   1ebf0:	20003c68 	.word	0x20003c68

0001ebf4 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
   1ebf4:	b580      	push	{r7, lr}
   1ebf6:	b082      	sub	sp, #8
   1ebf8:	af00      	add	r7, sp, #0
   1ebfa:	6078      	str	r0, [r7, #4]
   1ebfc:	000a      	movs	r2, r1
   1ebfe:	1cbb      	adds	r3, r7, #2
   1ec00:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
   1ec02:	1cbb      	adds	r3, r7, #2
   1ec04:	881a      	ldrh	r2, [r3, #0]
   1ec06:	687b      	ldr	r3, [r7, #4]
   1ec08:	0011      	movs	r1, r2
   1ec0a:	0018      	movs	r0, r3
   1ec0c:	4b0d      	ldr	r3, [pc, #52]	; (1ec44 <sd_mmc_start_read_blocks+0x50>)
   1ec0e:	4798      	blx	r3
   1ec10:	0003      	movs	r3, r0
   1ec12:	001a      	movs	r2, r3
   1ec14:	2301      	movs	r3, #1
   1ec16:	4053      	eors	r3, r2
   1ec18:	b2db      	uxtb	r3, r3
   1ec1a:	2b00      	cmp	r3, #0
   1ec1c:	d004      	beq.n	1ec28 <sd_mmc_start_read_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
   1ec1e:	4b0a      	ldr	r3, [pc, #40]	; (1ec48 <sd_mmc_start_read_blocks+0x54>)
   1ec20:	2200      	movs	r2, #0
   1ec22:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   1ec24:	2305      	movs	r3, #5
   1ec26:	e008      	b.n	1ec3a <sd_mmc_start_read_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
   1ec28:	4b07      	ldr	r3, [pc, #28]	; (1ec48 <sd_mmc_start_read_blocks+0x54>)
   1ec2a:	881a      	ldrh	r2, [r3, #0]
   1ec2c:	1cbb      	adds	r3, r7, #2
   1ec2e:	881b      	ldrh	r3, [r3, #0]
   1ec30:	1ad3      	subs	r3, r2, r3
   1ec32:	b29a      	uxth	r2, r3
   1ec34:	4b04      	ldr	r3, [pc, #16]	; (1ec48 <sd_mmc_start_read_blocks+0x54>)
   1ec36:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1ec38:	2300      	movs	r3, #0
}
   1ec3a:	0018      	movs	r0, r3
   1ec3c:	46bd      	mov	sp, r7
   1ec3e:	b002      	add	sp, #8
   1ec40:	bd80      	pop	{r7, pc}
   1ec42:	46c0      	nop			; (mov r8, r8)
   1ec44:	0001f8c9 	.word	0x0001f8c9
   1ec48:	20003c6a 	.word	0x20003c6a

0001ec4c <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
   1ec4c:	b580      	push	{r7, lr}
   1ec4e:	b082      	sub	sp, #8
   1ec50:	af00      	add	r7, sp, #0
   1ec52:	0002      	movs	r2, r0
   1ec54:	1dfb      	adds	r3, r7, #7
   1ec56:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_read_blocks()) {
   1ec58:	4b1c      	ldr	r3, [pc, #112]	; (1eccc <sd_mmc_wait_end_of_read_blocks+0x80>)
   1ec5a:	4798      	blx	r3
   1ec5c:	0003      	movs	r3, r0
   1ec5e:	001a      	movs	r2, r3
   1ec60:	2301      	movs	r3, #1
   1ec62:	4053      	eors	r3, r2
   1ec64:	b2db      	uxtb	r3, r3
   1ec66:	2b00      	cmp	r3, #0
   1ec68:	d001      	beq.n	1ec6e <sd_mmc_wait_end_of_read_blocks+0x22>
		return SD_MMC_ERR_COMM;
   1ec6a:	2305      	movs	r3, #5
   1ec6c:	e029      	b.n	1ecc2 <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	if (abort) {
   1ec6e:	1dfb      	adds	r3, r7, #7
   1ec70:	781b      	ldrb	r3, [r3, #0]
   1ec72:	2b00      	cmp	r3, #0
   1ec74:	d003      	beq.n	1ec7e <sd_mmc_wait_end_of_read_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
   1ec76:	4b16      	ldr	r3, [pc, #88]	; (1ecd0 <sd_mmc_wait_end_of_read_blocks+0x84>)
   1ec78:	2200      	movs	r2, #0
   1ec7a:	801a      	strh	r2, [r3, #0]
   1ec7c:	e005      	b.n	1ec8a <sd_mmc_wait_end_of_read_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
   1ec7e:	4b14      	ldr	r3, [pc, #80]	; (1ecd0 <sd_mmc_wait_end_of_read_blocks+0x84>)
   1ec80:	881b      	ldrh	r3, [r3, #0]
   1ec82:	2b00      	cmp	r3, #0
   1ec84:	d001      	beq.n	1ec8a <sd_mmc_wait_end_of_read_blocks+0x3e>
		return SD_MMC_OK;
   1ec86:	2300      	movs	r3, #0
   1ec88:	e01b      	b.n	1ecc2 <sd_mmc_wait_end_of_read_blocks+0x76>
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   1ec8a:	4b12      	ldr	r3, [pc, #72]	; (1ecd4 <sd_mmc_wait_end_of_read_blocks+0x88>)
   1ec8c:	881b      	ldrh	r3, [r3, #0]
   1ec8e:	2b01      	cmp	r3, #1
   1ec90:	d103      	bne.n	1ec9a <sd_mmc_wait_end_of_read_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   1ec92:	4b11      	ldr	r3, [pc, #68]	; (1ecd8 <sd_mmc_wait_end_of_read_blocks+0x8c>)
   1ec94:	4798      	blx	r3
		return SD_MMC_OK;
   1ec96:	2300      	movs	r3, #0
   1ec98:	e013      	b.n	1ecc2 <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
   1ec9a:	4b10      	ldr	r3, [pc, #64]	; (1ecdc <sd_mmc_wait_end_of_read_blocks+0x90>)
   1ec9c:	2100      	movs	r1, #0
   1ec9e:	0018      	movs	r0, r3
   1eca0:	4b0f      	ldr	r3, [pc, #60]	; (1ece0 <sd_mmc_wait_end_of_read_blocks+0x94>)
   1eca2:	4798      	blx	r3
   1eca4:	0003      	movs	r3, r0
   1eca6:	001a      	movs	r2, r3
   1eca8:	2301      	movs	r3, #1
   1ecaa:	4053      	eors	r3, r2
   1ecac:	b2db      	uxtb	r3, r3
   1ecae:	2b00      	cmp	r3, #0
   1ecb0:	d004      	beq.n	1ecbc <sd_mmc_wait_end_of_read_blocks+0x70>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
   1ecb2:	4b0a      	ldr	r3, [pc, #40]	; (1ecdc <sd_mmc_wait_end_of_read_blocks+0x90>)
   1ecb4:	2100      	movs	r1, #0
   1ecb6:	0018      	movs	r0, r3
   1ecb8:	4b09      	ldr	r3, [pc, #36]	; (1ece0 <sd_mmc_wait_end_of_read_blocks+0x94>)
   1ecba:	4798      	blx	r3
	}
	sd_mmc_deselect_slot();
   1ecbc:	4b06      	ldr	r3, [pc, #24]	; (1ecd8 <sd_mmc_wait_end_of_read_blocks+0x8c>)
   1ecbe:	4798      	blx	r3
	return SD_MMC_OK;
   1ecc0:	2300      	movs	r3, #0
}
   1ecc2:	0018      	movs	r0, r3
   1ecc4:	46bd      	mov	sp, r7
   1ecc6:	b002      	add	sp, #8
   1ecc8:	bd80      	pop	{r7, pc}
   1ecca:	46c0      	nop			; (mov r8, r8)
   1eccc:	0001f96d 	.word	0x0001f96d
   1ecd0:	20003c6a 	.word	0x20003c6a
   1ecd4:	20003c68 	.word	0x20003c68
   1ecd8:	0001e735 	.word	0x0001e735
   1ecdc:	0000310c 	.word	0x0000310c
   1ece0:	0001f5d1 	.word	0x0001f5d1

0001ece4 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   1ece4:	b590      	push	{r4, r7, lr}
   1ece6:	b089      	sub	sp, #36	; 0x24
   1ece8:	af02      	add	r7, sp, #8
   1ecea:	6039      	str	r1, [r7, #0]
   1ecec:	0011      	movs	r1, r2
   1ecee:	1dfb      	adds	r3, r7, #7
   1ecf0:	1c02      	adds	r2, r0, #0
   1ecf2:	701a      	strb	r2, [r3, #0]
   1ecf4:	1d3b      	adds	r3, r7, #4
   1ecf6:	1c0a      	adds	r2, r1, #0
   1ecf8:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1ecfa:	230f      	movs	r3, #15
   1ecfc:	18fc      	adds	r4, r7, r3
   1ecfe:	1dfb      	adds	r3, r7, #7
   1ed00:	781b      	ldrb	r3, [r3, #0]
   1ed02:	0018      	movs	r0, r3
   1ed04:	4b28      	ldr	r3, [pc, #160]	; (1eda8 <sd_mmc_init_write_blocks+0xc4>)
   1ed06:	4798      	blx	r3
   1ed08:	0003      	movs	r3, r0
   1ed0a:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
   1ed0c:	230f      	movs	r3, #15
   1ed0e:	18fb      	adds	r3, r7, r3
   1ed10:	781b      	ldrb	r3, [r3, #0]
   1ed12:	2b00      	cmp	r3, #0
   1ed14:	d003      	beq.n	1ed1e <sd_mmc_init_write_blocks+0x3a>
		return sd_mmc_err;
   1ed16:	230f      	movs	r3, #15
   1ed18:	18fb      	adds	r3, r7, r3
   1ed1a:	781b      	ldrb	r3, [r3, #0]
   1ed1c:	e03f      	b.n	1ed9e <sd_mmc_init_write_blocks+0xba>
	}
	if (sd_mmc_is_write_protected(slot)) {
   1ed1e:	1dfb      	adds	r3, r7, #7
   1ed20:	781b      	ldrb	r3, [r3, #0]
   1ed22:	0018      	movs	r0, r3
   1ed24:	4b21      	ldr	r3, [pc, #132]	; (1edac <sd_mmc_init_write_blocks+0xc8>)
   1ed26:	4798      	blx	r3
   1ed28:	1e03      	subs	r3, r0, #0
   1ed2a:	d003      	beq.n	1ed34 <sd_mmc_init_write_blocks+0x50>
		sd_mmc_deselect_slot();
   1ed2c:	4b20      	ldr	r3, [pc, #128]	; (1edb0 <sd_mmc_init_write_blocks+0xcc>)
   1ed2e:	4798      	blx	r3
		return SD_MMC_ERR_WP;
   1ed30:	2307      	movs	r3, #7
   1ed32:	e034      	b.n	1ed9e <sd_mmc_init_write_blocks+0xba>
	}

	if (nb_block > 1) {
   1ed34:	1d3b      	adds	r3, r7, #4
   1ed36:	881b      	ldrh	r3, [r3, #0]
   1ed38:	2b01      	cmp	r3, #1
   1ed3a:	d902      	bls.n	1ed42 <sd_mmc_init_write_blocks+0x5e>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
   1ed3c:	4b1d      	ldr	r3, [pc, #116]	; (1edb4 <sd_mmc_init_write_blocks+0xd0>)
   1ed3e:	617b      	str	r3, [r7, #20]
   1ed40:	e001      	b.n	1ed46 <sd_mmc_init_write_blocks+0x62>
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
   1ed42:	4b1d      	ldr	r3, [pc, #116]	; (1edb8 <sd_mmc_init_write_blocks+0xd4>)
   1ed44:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   1ed46:	4b1d      	ldr	r3, [pc, #116]	; (1edbc <sd_mmc_init_write_blocks+0xd8>)
   1ed48:	681b      	ldr	r3, [r3, #0]
   1ed4a:	7adb      	ldrb	r3, [r3, #11]
   1ed4c:	001a      	movs	r2, r3
   1ed4e:	2308      	movs	r3, #8
   1ed50:	4013      	ands	r3, r2
   1ed52:	d002      	beq.n	1ed5a <sd_mmc_init_write_blocks+0x76>
		arg = start;
   1ed54:	683b      	ldr	r3, [r7, #0]
   1ed56:	613b      	str	r3, [r7, #16]
   1ed58:	e002      	b.n	1ed60 <sd_mmc_init_write_blocks+0x7c>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   1ed5a:	683b      	ldr	r3, [r7, #0]
   1ed5c:	025b      	lsls	r3, r3, #9
   1ed5e:	613b      	str	r3, [r7, #16]
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   1ed60:	1d3b      	adds	r3, r7, #4
   1ed62:	881c      	ldrh	r4, [r3, #0]
   1ed64:	2380      	movs	r3, #128	; 0x80
   1ed66:	009a      	lsls	r2, r3, #2
   1ed68:	6939      	ldr	r1, [r7, #16]
   1ed6a:	6978      	ldr	r0, [r7, #20]
   1ed6c:	2301      	movs	r3, #1
   1ed6e:	9300      	str	r3, [sp, #0]
   1ed70:	0023      	movs	r3, r4
   1ed72:	4c13      	ldr	r4, [pc, #76]	; (1edc0 <sd_mmc_init_write_blocks+0xdc>)
   1ed74:	47a0      	blx	r4
   1ed76:	0003      	movs	r3, r0
   1ed78:	001a      	movs	r2, r3
   1ed7a:	2301      	movs	r3, #1
   1ed7c:	4053      	eors	r3, r2
   1ed7e:	b2db      	uxtb	r3, r3
   1ed80:	2b00      	cmp	r3, #0
   1ed82:	d003      	beq.n	1ed8c <sd_mmc_init_write_blocks+0xa8>
		sd_mmc_deselect_slot();
   1ed84:	4b0a      	ldr	r3, [pc, #40]	; (1edb0 <sd_mmc_init_write_blocks+0xcc>)
   1ed86:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1ed88:	2305      	movs	r3, #5
   1ed8a:	e008      	b.n	1ed9e <sd_mmc_init_write_blocks+0xba>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   1ed8c:	4b0d      	ldr	r3, [pc, #52]	; (1edc4 <sd_mmc_init_write_blocks+0xe0>)
   1ed8e:	1d3a      	adds	r2, r7, #4
   1ed90:	8812      	ldrh	r2, [r2, #0]
   1ed92:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   1ed94:	4b0c      	ldr	r3, [pc, #48]	; (1edc8 <sd_mmc_init_write_blocks+0xe4>)
   1ed96:	1d3a      	adds	r2, r7, #4
   1ed98:	8812      	ldrh	r2, [r2, #0]
   1ed9a:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1ed9c:	2300      	movs	r3, #0
}
   1ed9e:	0018      	movs	r0, r3
   1eda0:	46bd      	mov	sp, r7
   1eda2:	b007      	add	sp, #28
   1eda4:	bd90      	pop	{r4, r7, pc}
   1eda6:	46c0      	nop			; (mov r8, r8)
   1eda8:	0001e639 	.word	0x0001e639
   1edac:	0001eaf1 	.word	0x0001eaf1
   1edb0:	0001e735 	.word	0x0001e735
   1edb4:	00109119 	.word	0x00109119
   1edb8:	00089118 	.word	0x00089118
   1edbc:	20003c64 	.word	0x20003c64
   1edc0:	0001f5f9 	.word	0x0001f5f9
   1edc4:	20003c6a 	.word	0x20003c6a
   1edc8:	20003c68 	.word	0x20003c68

0001edcc <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
   1edcc:	b580      	push	{r7, lr}
   1edce:	b082      	sub	sp, #8
   1edd0:	af00      	add	r7, sp, #0
   1edd2:	6078      	str	r0, [r7, #4]
   1edd4:	000a      	movs	r2, r1
   1edd6:	1cbb      	adds	r3, r7, #2
   1edd8:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
   1edda:	1cbb      	adds	r3, r7, #2
   1eddc:	881a      	ldrh	r2, [r3, #0]
   1edde:	687b      	ldr	r3, [r7, #4]
   1ede0:	0011      	movs	r1, r2
   1ede2:	0018      	movs	r0, r3
   1ede4:	4b0d      	ldr	r3, [pc, #52]	; (1ee1c <sd_mmc_start_write_blocks+0x50>)
   1ede6:	4798      	blx	r3
   1ede8:	0003      	movs	r3, r0
   1edea:	001a      	movs	r2, r3
   1edec:	2301      	movs	r3, #1
   1edee:	4053      	eors	r3, r2
   1edf0:	b2db      	uxtb	r3, r3
   1edf2:	2b00      	cmp	r3, #0
   1edf4:	d004      	beq.n	1ee00 <sd_mmc_start_write_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
   1edf6:	4b0a      	ldr	r3, [pc, #40]	; (1ee20 <sd_mmc_start_write_blocks+0x54>)
   1edf8:	2200      	movs	r2, #0
   1edfa:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   1edfc:	2305      	movs	r3, #5
   1edfe:	e008      	b.n	1ee12 <sd_mmc_start_write_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
   1ee00:	4b07      	ldr	r3, [pc, #28]	; (1ee20 <sd_mmc_start_write_blocks+0x54>)
   1ee02:	881a      	ldrh	r2, [r3, #0]
   1ee04:	1cbb      	adds	r3, r7, #2
   1ee06:	881b      	ldrh	r3, [r3, #0]
   1ee08:	1ad3      	subs	r3, r2, r3
   1ee0a:	b29a      	uxth	r2, r3
   1ee0c:	4b04      	ldr	r3, [pc, #16]	; (1ee20 <sd_mmc_start_write_blocks+0x54>)
   1ee0e:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1ee10:	2300      	movs	r3, #0
}
   1ee12:	0018      	movs	r0, r3
   1ee14:	46bd      	mov	sp, r7
   1ee16:	b002      	add	sp, #8
   1ee18:	bd80      	pop	{r7, pc}
   1ee1a:	46c0      	nop			; (mov r8, r8)
   1ee1c:	0001f979 	.word	0x0001f979
   1ee20:	20003c6a 	.word	0x20003c6a

0001ee24 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
   1ee24:	b580      	push	{r7, lr}
   1ee26:	b082      	sub	sp, #8
   1ee28:	af00      	add	r7, sp, #0
   1ee2a:	0002      	movs	r2, r0
   1ee2c:	1dfb      	adds	r3, r7, #7
   1ee2e:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_write_blocks()) {
   1ee30:	4b13      	ldr	r3, [pc, #76]	; (1ee80 <sd_mmc_wait_end_of_write_blocks+0x5c>)
   1ee32:	4798      	blx	r3
   1ee34:	0003      	movs	r3, r0
   1ee36:	001a      	movs	r2, r3
   1ee38:	2301      	movs	r3, #1
   1ee3a:	4053      	eors	r3, r2
   1ee3c:	b2db      	uxtb	r3, r3
   1ee3e:	2b00      	cmp	r3, #0
   1ee40:	d001      	beq.n	1ee46 <sd_mmc_wait_end_of_write_blocks+0x22>
		return SD_MMC_ERR_COMM;
   1ee42:	2305      	movs	r3, #5
   1ee44:	e018      	b.n	1ee78 <sd_mmc_wait_end_of_write_blocks+0x54>
	}
	if (abort) {
   1ee46:	1dfb      	adds	r3, r7, #7
   1ee48:	781b      	ldrb	r3, [r3, #0]
   1ee4a:	2b00      	cmp	r3, #0
   1ee4c:	d003      	beq.n	1ee56 <sd_mmc_wait_end_of_write_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
   1ee4e:	4b0d      	ldr	r3, [pc, #52]	; (1ee84 <sd_mmc_wait_end_of_write_blocks+0x60>)
   1ee50:	2200      	movs	r2, #0
   1ee52:	801a      	strh	r2, [r3, #0]
   1ee54:	e005      	b.n	1ee62 <sd_mmc_wait_end_of_write_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
   1ee56:	4b0b      	ldr	r3, [pc, #44]	; (1ee84 <sd_mmc_wait_end_of_write_blocks+0x60>)
   1ee58:	881b      	ldrh	r3, [r3, #0]
   1ee5a:	2b00      	cmp	r3, #0
   1ee5c:	d001      	beq.n	1ee62 <sd_mmc_wait_end_of_write_blocks+0x3e>
		return SD_MMC_OK;
   1ee5e:	2300      	movs	r3, #0
   1ee60:	e00a      	b.n	1ee78 <sd_mmc_wait_end_of_write_blocks+0x54>
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   1ee62:	4b09      	ldr	r3, [pc, #36]	; (1ee88 <sd_mmc_wait_end_of_write_blocks+0x64>)
   1ee64:	881b      	ldrh	r3, [r3, #0]
   1ee66:	2b01      	cmp	r3, #1
   1ee68:	d103      	bne.n	1ee72 <sd_mmc_wait_end_of_write_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   1ee6a:	4b08      	ldr	r3, [pc, #32]	; (1ee8c <sd_mmc_wait_end_of_write_blocks+0x68>)
   1ee6c:	4798      	blx	r3
		return SD_MMC_OK;
   1ee6e:	2300      	movs	r3, #0
   1ee70:	e002      	b.n	1ee78 <sd_mmc_wait_end_of_write_blocks+0x54>
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
   1ee72:	4b06      	ldr	r3, [pc, #24]	; (1ee8c <sd_mmc_wait_end_of_write_blocks+0x68>)
   1ee74:	4798      	blx	r3
	return SD_MMC_OK;
   1ee76:	2300      	movs	r3, #0
}
   1ee78:	0018      	movs	r0, r3
   1ee7a:	46bd      	mov	sp, r7
   1ee7c:	b002      	add	sp, #8
   1ee7e:	bd80      	pop	{r7, pc}
   1ee80:	0001fa39 	.word	0x0001fa39
   1ee84:	20003c6a 	.word	0x20003c6a
   1ee88:	20003c68 	.word	0x20003c68
   1ee8c:	0001e735 	.word	0x0001e735

0001ee90 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
   1ee90:	b580      	push	{r7, lr}
   1ee92:	b082      	sub	sp, #8
   1ee94:	af00      	add	r7, sp, #0
   1ee96:	0002      	movs	r2, r0
   1ee98:	1dfb      	adds	r3, r7, #7
   1ee9a:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_check(slot))
   1ee9c:	1dfb      	adds	r3, r7, #7
   1ee9e:	781b      	ldrb	r3, [r3, #0]
   1eea0:	0018      	movs	r0, r3
   1eea2:	4b16      	ldr	r3, [pc, #88]	; (1eefc <sd_mmc_test_unit_ready+0x6c>)
   1eea4:	4798      	blx	r3
   1eea6:	0003      	movs	r3, r0
   1eea8:	2b01      	cmp	r3, #1
   1eeaa:	d019      	beq.n	1eee0 <sd_mmc_test_unit_ready+0x50>
   1eeac:	2b02      	cmp	r3, #2
   1eeae:	d019      	beq.n	1eee4 <sd_mmc_test_unit_ready+0x54>
   1eeb0:	2b00      	cmp	r3, #0
   1eeb2:	d11e      	bne.n	1eef2 <sd_mmc_test_unit_ready+0x62>
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
   1eeb4:	1dfb      	adds	r3, r7, #7
   1eeb6:	781b      	ldrb	r3, [r3, #0]
   1eeb8:	4a11      	ldr	r2, [pc, #68]	; (1ef00 <sd_mmc_test_unit_ready+0x70>)
   1eeba:	5cd3      	ldrb	r3, [r2, r3]
   1eebc:	2b00      	cmp	r3, #0
   1eebe:	d001      	beq.n	1eec4 <sd_mmc_test_unit_ready+0x34>
			return CTRL_NO_PRESENT;
   1eec0:	2302      	movs	r3, #2
   1eec2:	e017      	b.n	1eef4 <sd_mmc_test_unit_ready+0x64>
		}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
   1eec4:	1dfb      	adds	r3, r7, #7
   1eec6:	781b      	ldrb	r3, [r3, #0]
   1eec8:	0018      	movs	r0, r3
   1eeca:	4b0e      	ldr	r3, [pc, #56]	; (1ef04 <sd_mmc_test_unit_ready+0x74>)
   1eecc:	4798      	blx	r3
   1eece:	0003      	movs	r3, r0
   1eed0:	001a      	movs	r2, r3
   1eed2:	2303      	movs	r3, #3
   1eed4:	4013      	ands	r3, r2
   1eed6:	d001      	beq.n	1eedc <sd_mmc_test_unit_ready+0x4c>
			return CTRL_GOOD;
   1eed8:	2300      	movs	r3, #0
   1eeda:	e00b      	b.n	1eef4 <sd_mmc_test_unit_ready+0x64>
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;
   1eedc:	2302      	movs	r3, #2
   1eede:	e009      	b.n	1eef4 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;
   1eee0:	2303      	movs	r3, #3
   1eee2:	e007      	b.n	1eef4 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
   1eee4:	1dfb      	adds	r3, r7, #7
   1eee6:	781b      	ldrb	r3, [r3, #0]
   1eee8:	4a05      	ldr	r2, [pc, #20]	; (1ef00 <sd_mmc_test_unit_ready+0x70>)
   1eeea:	2100      	movs	r1, #0
   1eeec:	54d1      	strb	r1, [r2, r3]
		return CTRL_NO_PRESENT;
   1eeee:	2302      	movs	r3, #2
   1eef0:	e000      	b.n	1eef4 <sd_mmc_test_unit_ready+0x64>

	default:
		return CTRL_FAIL;
   1eef2:	2301      	movs	r3, #1
	}
}
   1eef4:	0018      	movs	r0, r3
   1eef6:	46bd      	mov	sp, r7
   1eef8:	b002      	add	sp, #8
   1eefa:	bd80      	pop	{r7, pc}
   1eefc:	0001ea05 	.word	0x0001ea05
   1ef00:	20003c6c 	.word	0x20003c6c
   1ef04:	0001ea79 	.word	0x0001ea79

0001ef08 <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
   1ef08:	b580      	push	{r7, lr}
   1ef0a:	af00      	add	r7, sp, #0
	return sd_mmc_test_unit_ready(0);
   1ef0c:	2000      	movs	r0, #0
   1ef0e:	4b03      	ldr	r3, [pc, #12]	; (1ef1c <sd_mmc_test_unit_ready_0+0x14>)
   1ef10:	4798      	blx	r3
   1ef12:	0003      	movs	r3, r0
}
   1ef14:	0018      	movs	r0, r3
   1ef16:	46bd      	mov	sp, r7
   1ef18:	bd80      	pop	{r7, pc}
   1ef1a:	46c0      	nop			; (mov r8, r8)
   1ef1c:	0001ee91 	.word	0x0001ee91

0001ef20 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
   1ef20:	b580      	push	{r7, lr}
   1ef22:	b082      	sub	sp, #8
   1ef24:	af00      	add	r7, sp, #0
   1ef26:	0002      	movs	r2, r0
   1ef28:	6039      	str	r1, [r7, #0]
   1ef2a:	1dfb      	adds	r3, r7, #7
   1ef2c:	701a      	strb	r2, [r3, #0]
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
   1ef2e:	1dfb      	adds	r3, r7, #7
   1ef30:	781b      	ldrb	r3, [r3, #0]
   1ef32:	0018      	movs	r0, r3
   1ef34:	4b08      	ldr	r3, [pc, #32]	; (1ef58 <sd_mmc_read_capacity+0x38>)
   1ef36:	4798      	blx	r3
   1ef38:	0003      	movs	r3, r0
   1ef3a:	005b      	lsls	r3, r3, #1
   1ef3c:	1e5a      	subs	r2, r3, #1
   1ef3e:	683b      	ldr	r3, [r7, #0]
   1ef40:	601a      	str	r2, [r3, #0]
	return sd_mmc_test_unit_ready(slot);
   1ef42:	1dfb      	adds	r3, r7, #7
   1ef44:	781b      	ldrb	r3, [r3, #0]
   1ef46:	0018      	movs	r0, r3
   1ef48:	4b04      	ldr	r3, [pc, #16]	; (1ef5c <sd_mmc_read_capacity+0x3c>)
   1ef4a:	4798      	blx	r3
   1ef4c:	0003      	movs	r3, r0
}
   1ef4e:	0018      	movs	r0, r3
   1ef50:	46bd      	mov	sp, r7
   1ef52:	b002      	add	sp, #8
   1ef54:	bd80      	pop	{r7, pc}
   1ef56:	46c0      	nop			; (mov r8, r8)
   1ef58:	0001eab5 	.word	0x0001eab5
   1ef5c:	0001ee91 	.word	0x0001ee91

0001ef60 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
   1ef60:	b580      	push	{r7, lr}
   1ef62:	b082      	sub	sp, #8
   1ef64:	af00      	add	r7, sp, #0
   1ef66:	6078      	str	r0, [r7, #4]
	return sd_mmc_read_capacity(0, nb_sector);
   1ef68:	687b      	ldr	r3, [r7, #4]
   1ef6a:	0019      	movs	r1, r3
   1ef6c:	2000      	movs	r0, #0
   1ef6e:	4b03      	ldr	r3, [pc, #12]	; (1ef7c <sd_mmc_read_capacity_0+0x1c>)
   1ef70:	4798      	blx	r3
   1ef72:	0003      	movs	r3, r0
}
   1ef74:	0018      	movs	r0, r3
   1ef76:	46bd      	mov	sp, r7
   1ef78:	b002      	add	sp, #8
   1ef7a:	bd80      	pop	{r7, pc}
   1ef7c:	0001ef21 	.word	0x0001ef21

0001ef80 <sd_mmc_unload>:
{
	return sd_mmc_read_capacity(1, nb_sector);
}

bool sd_mmc_unload(uint8_t slot, bool unload)
{
   1ef80:	b580      	push	{r7, lr}
   1ef82:	b082      	sub	sp, #8
   1ef84:	af00      	add	r7, sp, #0
   1ef86:	0002      	movs	r2, r0
   1ef88:	1dfb      	adds	r3, r7, #7
   1ef8a:	701a      	strb	r2, [r3, #0]
   1ef8c:	1dbb      	adds	r3, r7, #6
   1ef8e:	1c0a      	adds	r2, r1, #0
   1ef90:	701a      	strb	r2, [r3, #0]
	sd_mmc_ejected[slot] = unload;
   1ef92:	1dfb      	adds	r3, r7, #7
   1ef94:	781b      	ldrb	r3, [r3, #0]
   1ef96:	4a04      	ldr	r2, [pc, #16]	; (1efa8 <sd_mmc_unload+0x28>)
   1ef98:	1db9      	adds	r1, r7, #6
   1ef9a:	7809      	ldrb	r1, [r1, #0]
   1ef9c:	54d1      	strb	r1, [r2, r3]
	return true;
   1ef9e:	2301      	movs	r3, #1
}
   1efa0:	0018      	movs	r0, r3
   1efa2:	46bd      	mov	sp, r7
   1efa4:	b002      	add	sp, #8
   1efa6:	bd80      	pop	{r7, pc}
   1efa8:	20003c6c 	.word	0x20003c6c

0001efac <sd_mmc_unload_0>:

bool sd_mmc_unload_0(bool unload)
{
   1efac:	b580      	push	{r7, lr}
   1efae:	b082      	sub	sp, #8
   1efb0:	af00      	add	r7, sp, #0
   1efb2:	0002      	movs	r2, r0
   1efb4:	1dfb      	adds	r3, r7, #7
   1efb6:	701a      	strb	r2, [r3, #0]
	return sd_mmc_unload(0, unload);
   1efb8:	1dfb      	adds	r3, r7, #7
   1efba:	781b      	ldrb	r3, [r3, #0]
   1efbc:	0019      	movs	r1, r3
   1efbe:	2000      	movs	r0, #0
   1efc0:	4b03      	ldr	r3, [pc, #12]	; (1efd0 <sd_mmc_unload_0+0x24>)
   1efc2:	4798      	blx	r3
   1efc4:	0003      	movs	r3, r0
}
   1efc6:	0018      	movs	r0, r3
   1efc8:	46bd      	mov	sp, r7
   1efca:	b002      	add	sp, #8
   1efcc:	bd80      	pop	{r7, pc}
   1efce:	46c0      	nop			; (mov r8, r8)
   1efd0:	0001ef81 	.word	0x0001ef81

0001efd4 <sd_mmc_wr_protect>:
{
	return sd_mmc_unload(1, unload);
}

bool sd_mmc_wr_protect(uint8_t slot)
{
   1efd4:	b580      	push	{r7, lr}
   1efd6:	b082      	sub	sp, #8
   1efd8:	af00      	add	r7, sp, #0
   1efda:	0002      	movs	r2, r0
   1efdc:	1dfb      	adds	r3, r7, #7
   1efde:	701a      	strb	r2, [r3, #0]
	return sd_mmc_is_write_protected(slot);
   1efe0:	1dfb      	adds	r3, r7, #7
   1efe2:	781b      	ldrb	r3, [r3, #0]
   1efe4:	0018      	movs	r0, r3
   1efe6:	4b03      	ldr	r3, [pc, #12]	; (1eff4 <sd_mmc_wr_protect+0x20>)
   1efe8:	4798      	blx	r3
   1efea:	0003      	movs	r3, r0
}
   1efec:	0018      	movs	r0, r3
   1efee:	46bd      	mov	sp, r7
   1eff0:	b002      	add	sp, #8
   1eff2:	bd80      	pop	{r7, pc}
   1eff4:	0001eaf1 	.word	0x0001eaf1

0001eff8 <sd_mmc_wr_protect_0>:

bool sd_mmc_wr_protect_0(void)
{
   1eff8:	b580      	push	{r7, lr}
   1effa:	af00      	add	r7, sp, #0
	return sd_mmc_wr_protect(0);
   1effc:	2000      	movs	r0, #0
   1effe:	4b03      	ldr	r3, [pc, #12]	; (1f00c <sd_mmc_wr_protect_0+0x14>)
   1f000:	4798      	blx	r3
   1f002:	0003      	movs	r3, r0
}
   1f004:	0018      	movs	r0, r3
   1f006:	46bd      	mov	sp, r7
   1f008:	bd80      	pop	{r7, pc}
   1f00a:	46c0      	nop			; (mov r8, r8)
   1f00c:	0001efd5 	.word	0x0001efd5

0001f010 <sd_mmc_removal>:
{
	return sd_mmc_wr_protect(1);
}

bool sd_mmc_removal(uint8_t slot)
{
   1f010:	b580      	push	{r7, lr}
   1f012:	b082      	sub	sp, #8
   1f014:	af00      	add	r7, sp, #0
   1f016:	0002      	movs	r2, r0
   1f018:	1dfb      	adds	r3, r7, #7
   1f01a:	701a      	strb	r2, [r3, #0]
	UNUSED(slot);
	return true;
   1f01c:	2301      	movs	r3, #1
}
   1f01e:	0018      	movs	r0, r3
   1f020:	46bd      	mov	sp, r7
   1f022:	b002      	add	sp, #8
   1f024:	bd80      	pop	{r7, pc}
	...

0001f028 <sd_mmc_removal_0>:

bool sd_mmc_removal_0(void)
{
   1f028:	b580      	push	{r7, lr}
   1f02a:	af00      	add	r7, sp, #0
	return sd_mmc_removal(0);
   1f02c:	2000      	movs	r0, #0
   1f02e:	4b03      	ldr	r3, [pc, #12]	; (1f03c <sd_mmc_removal_0+0x14>)
   1f030:	4798      	blx	r3
   1f032:	0003      	movs	r3, r0
}
   1f034:	0018      	movs	r0, r3
   1f036:	46bd      	mov	sp, r7
   1f038:	bd80      	pop	{r7, pc}
   1f03a:	46c0      	nop			; (mov r8, r8)
   1f03c:	0001f011 	.word	0x0001f011

0001f040 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
   1f040:	b580      	push	{r7, lr}
   1f042:	b084      	sub	sp, #16
   1f044:	af00      	add	r7, sp, #0
   1f046:	60b9      	str	r1, [r7, #8]
   1f048:	607a      	str	r2, [r7, #4]
   1f04a:	230f      	movs	r3, #15
   1f04c:	18fb      	adds	r3, r7, r3
   1f04e:	1c02      	adds	r2, r0, #0
   1f050:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
   1f052:	68b9      	ldr	r1, [r7, #8]
   1f054:	230f      	movs	r3, #15
   1f056:	18fb      	adds	r3, r7, r3
   1f058:	781b      	ldrb	r3, [r3, #0]
   1f05a:	2201      	movs	r2, #1
   1f05c:	0018      	movs	r0, r3
   1f05e:	4b10      	ldr	r3, [pc, #64]	; (1f0a0 <sd_mmc_mem_2_ram+0x60>)
   1f060:	4798      	blx	r3
   1f062:	1e03      	subs	r3, r0, #0
   1f064:	d005      	beq.n	1f072 <sd_mmc_mem_2_ram+0x32>
   1f066:	2b02      	cmp	r3, #2
   1f068:	d101      	bne.n	1f06e <sd_mmc_mem_2_ram+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
   1f06a:	2302      	movs	r3, #2
   1f06c:	e013      	b.n	1f096 <sd_mmc_mem_2_ram+0x56>
	default:
		return CTRL_FAIL;
   1f06e:	2301      	movs	r3, #1
   1f070:	e011      	b.n	1f096 <sd_mmc_mem_2_ram+0x56>
		break;
   1f072:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
   1f074:	687b      	ldr	r3, [r7, #4]
   1f076:	2101      	movs	r1, #1
   1f078:	0018      	movs	r0, r3
   1f07a:	4b0a      	ldr	r3, [pc, #40]	; (1f0a4 <sd_mmc_mem_2_ram+0x64>)
   1f07c:	4798      	blx	r3
   1f07e:	1e03      	subs	r3, r0, #0
   1f080:	d001      	beq.n	1f086 <sd_mmc_mem_2_ram+0x46>
		return CTRL_FAIL;
   1f082:	2301      	movs	r3, #1
   1f084:	e007      	b.n	1f096 <sd_mmc_mem_2_ram+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
   1f086:	2000      	movs	r0, #0
   1f088:	4b07      	ldr	r3, [pc, #28]	; (1f0a8 <sd_mmc_mem_2_ram+0x68>)
   1f08a:	4798      	blx	r3
   1f08c:	1e03      	subs	r3, r0, #0
   1f08e:	d001      	beq.n	1f094 <sd_mmc_mem_2_ram+0x54>
		return CTRL_FAIL;
   1f090:	2301      	movs	r3, #1
   1f092:	e000      	b.n	1f096 <sd_mmc_mem_2_ram+0x56>
	}
	return CTRL_GOOD;
   1f094:	2300      	movs	r3, #0
}
   1f096:	0018      	movs	r0, r3
   1f098:	46bd      	mov	sp, r7
   1f09a:	b004      	add	sp, #16
   1f09c:	bd80      	pop	{r7, pc}
   1f09e:	46c0      	nop			; (mov r8, r8)
   1f0a0:	0001eb09 	.word	0x0001eb09
   1f0a4:	0001ebf5 	.word	0x0001ebf5
   1f0a8:	0001ec4d 	.word	0x0001ec4d

0001f0ac <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
   1f0ac:	b580      	push	{r7, lr}
   1f0ae:	b082      	sub	sp, #8
   1f0b0:	af00      	add	r7, sp, #0
   1f0b2:	6078      	str	r0, [r7, #4]
   1f0b4:	6039      	str	r1, [r7, #0]
	return sd_mmc_mem_2_ram(0, addr, ram);
   1f0b6:	683a      	ldr	r2, [r7, #0]
   1f0b8:	687b      	ldr	r3, [r7, #4]
   1f0ba:	0019      	movs	r1, r3
   1f0bc:	2000      	movs	r0, #0
   1f0be:	4b03      	ldr	r3, [pc, #12]	; (1f0cc <sd_mmc_mem_2_ram_0+0x20>)
   1f0c0:	4798      	blx	r3
   1f0c2:	0003      	movs	r3, r0
}
   1f0c4:	0018      	movs	r0, r3
   1f0c6:	46bd      	mov	sp, r7
   1f0c8:	b002      	add	sp, #8
   1f0ca:	bd80      	pop	{r7, pc}
   1f0cc:	0001f041 	.word	0x0001f041

0001f0d0 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
   1f0d0:	b580      	push	{r7, lr}
   1f0d2:	b084      	sub	sp, #16
   1f0d4:	af00      	add	r7, sp, #0
   1f0d6:	60b9      	str	r1, [r7, #8]
   1f0d8:	607a      	str	r2, [r7, #4]
   1f0da:	230f      	movs	r3, #15
   1f0dc:	18fb      	adds	r3, r7, r3
   1f0de:	1c02      	adds	r2, r0, #0
   1f0e0:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
   1f0e2:	68b9      	ldr	r1, [r7, #8]
   1f0e4:	230f      	movs	r3, #15
   1f0e6:	18fb      	adds	r3, r7, r3
   1f0e8:	781b      	ldrb	r3, [r3, #0]
   1f0ea:	2201      	movs	r2, #1
   1f0ec:	0018      	movs	r0, r3
   1f0ee:	4b10      	ldr	r3, [pc, #64]	; (1f130 <sd_mmc_ram_2_mem+0x60>)
   1f0f0:	4798      	blx	r3
   1f0f2:	1e03      	subs	r3, r0, #0
   1f0f4:	d005      	beq.n	1f102 <sd_mmc_ram_2_mem+0x32>
   1f0f6:	2b02      	cmp	r3, #2
   1f0f8:	d101      	bne.n	1f0fe <sd_mmc_ram_2_mem+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
   1f0fa:	2302      	movs	r3, #2
   1f0fc:	e013      	b.n	1f126 <sd_mmc_ram_2_mem+0x56>
	default:
		return CTRL_FAIL;
   1f0fe:	2301      	movs	r3, #1
   1f100:	e011      	b.n	1f126 <sd_mmc_ram_2_mem+0x56>
		break;
   1f102:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
   1f104:	687b      	ldr	r3, [r7, #4]
   1f106:	2101      	movs	r1, #1
   1f108:	0018      	movs	r0, r3
   1f10a:	4b0a      	ldr	r3, [pc, #40]	; (1f134 <sd_mmc_ram_2_mem+0x64>)
   1f10c:	4798      	blx	r3
   1f10e:	1e03      	subs	r3, r0, #0
   1f110:	d001      	beq.n	1f116 <sd_mmc_ram_2_mem+0x46>
		return CTRL_FAIL;
   1f112:	2301      	movs	r3, #1
   1f114:	e007      	b.n	1f126 <sd_mmc_ram_2_mem+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
   1f116:	2000      	movs	r0, #0
   1f118:	4b07      	ldr	r3, [pc, #28]	; (1f138 <sd_mmc_ram_2_mem+0x68>)
   1f11a:	4798      	blx	r3
   1f11c:	1e03      	subs	r3, r0, #0
   1f11e:	d001      	beq.n	1f124 <sd_mmc_ram_2_mem+0x54>
		return CTRL_FAIL;
   1f120:	2301      	movs	r3, #1
   1f122:	e000      	b.n	1f126 <sd_mmc_ram_2_mem+0x56>
	}
	return CTRL_GOOD;
   1f124:	2300      	movs	r3, #0
}
   1f126:	0018      	movs	r0, r3
   1f128:	46bd      	mov	sp, r7
   1f12a:	b004      	add	sp, #16
   1f12c:	bd80      	pop	{r7, pc}
   1f12e:	46c0      	nop			; (mov r8, r8)
   1f130:	0001ece5 	.word	0x0001ece5
   1f134:	0001edcd 	.word	0x0001edcd
   1f138:	0001ee25 	.word	0x0001ee25

0001f13c <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
   1f13c:	b580      	push	{r7, lr}
   1f13e:	b082      	sub	sp, #8
   1f140:	af00      	add	r7, sp, #0
   1f142:	6078      	str	r0, [r7, #4]
   1f144:	6039      	str	r1, [r7, #0]
	return sd_mmc_ram_2_mem(0, addr, ram);
   1f146:	683a      	ldr	r2, [r7, #0]
   1f148:	687b      	ldr	r3, [r7, #4]
   1f14a:	0019      	movs	r1, r3
   1f14c:	2000      	movs	r0, #0
   1f14e:	4b03      	ldr	r3, [pc, #12]	; (1f15c <sd_mmc_ram_2_mem_0+0x20>)
   1f150:	4798      	blx	r3
   1f152:	0003      	movs	r3, r0
}
   1f154:	0018      	movs	r0, r3
   1f156:	46bd      	mov	sp, r7
   1f158:	b002      	add	sp, #8
   1f15a:	bd80      	pop	{r7, pc}
   1f15c:	0001f0d1 	.word	0x0001f0d1

0001f160 <sd_mmc_spi_crc7>:
 * \param size    Size of buffer data
 *
 * \return CRC7 computed
 */
static uint8_t sd_mmc_spi_crc7(uint8_t * buf, uint8_t size)
{
   1f160:	b580      	push	{r7, lr}
   1f162:	b084      	sub	sp, #16
   1f164:	af00      	add	r7, sp, #0
   1f166:	6078      	str	r0, [r7, #4]
   1f168:	000a      	movs	r2, r1
   1f16a:	1cfb      	adds	r3, r7, #3
   1f16c:	701a      	strb	r2, [r3, #0]
	uint8_t crc, value, i;

	crc = 0;
   1f16e:	230f      	movs	r3, #15
   1f170:	18fb      	adds	r3, r7, r3
   1f172:	2200      	movs	r2, #0
   1f174:	701a      	strb	r2, [r3, #0]
	while (size--) {
   1f176:	e038      	b.n	1f1ea <sd_mmc_spi_crc7+0x8a>
		value = *buf++;
   1f178:	687b      	ldr	r3, [r7, #4]
   1f17a:	1c5a      	adds	r2, r3, #1
   1f17c:	607a      	str	r2, [r7, #4]
   1f17e:	220e      	movs	r2, #14
   1f180:	18ba      	adds	r2, r7, r2
   1f182:	781b      	ldrb	r3, [r3, #0]
   1f184:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
   1f186:	230d      	movs	r3, #13
   1f188:	18fb      	adds	r3, r7, r3
   1f18a:	2200      	movs	r2, #0
   1f18c:	701a      	strb	r2, [r3, #0]
   1f18e:	e027      	b.n	1f1e0 <sd_mmc_spi_crc7+0x80>
			crc <<= 1;
   1f190:	230f      	movs	r3, #15
   1f192:	18fa      	adds	r2, r7, r3
   1f194:	230f      	movs	r3, #15
   1f196:	18fb      	adds	r3, r7, r3
   1f198:	781b      	ldrb	r3, [r3, #0]
   1f19a:	18db      	adds	r3, r3, r3
   1f19c:	7013      	strb	r3, [r2, #0]
			if ((value & 0x80) ^ (crc & 0x80)) {
   1f19e:	230e      	movs	r3, #14
   1f1a0:	18fa      	adds	r2, r7, r3
   1f1a2:	230f      	movs	r3, #15
   1f1a4:	18fb      	adds	r3, r7, r3
   1f1a6:	7812      	ldrb	r2, [r2, #0]
   1f1a8:	781b      	ldrb	r3, [r3, #0]
   1f1aa:	4053      	eors	r3, r2
   1f1ac:	b2db      	uxtb	r3, r3
   1f1ae:	b25b      	sxtb	r3, r3
   1f1b0:	2b00      	cmp	r3, #0
   1f1b2:	da07      	bge.n	1f1c4 <sd_mmc_spi_crc7+0x64>
				crc ^= 0x09;
   1f1b4:	230f      	movs	r3, #15
   1f1b6:	18fb      	adds	r3, r7, r3
   1f1b8:	220f      	movs	r2, #15
   1f1ba:	18ba      	adds	r2, r7, r2
   1f1bc:	7812      	ldrb	r2, [r2, #0]
   1f1be:	2109      	movs	r1, #9
   1f1c0:	404a      	eors	r2, r1
   1f1c2:	701a      	strb	r2, [r3, #0]
			}
			value <<= 1;
   1f1c4:	230e      	movs	r3, #14
   1f1c6:	18fa      	adds	r2, r7, r3
   1f1c8:	230e      	movs	r3, #14
   1f1ca:	18fb      	adds	r3, r7, r3
   1f1cc:	781b      	ldrb	r3, [r3, #0]
   1f1ce:	18db      	adds	r3, r3, r3
   1f1d0:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
   1f1d2:	230d      	movs	r3, #13
   1f1d4:	18fb      	adds	r3, r7, r3
   1f1d6:	781a      	ldrb	r2, [r3, #0]
   1f1d8:	230d      	movs	r3, #13
   1f1da:	18fb      	adds	r3, r7, r3
   1f1dc:	3201      	adds	r2, #1
   1f1de:	701a      	strb	r2, [r3, #0]
   1f1e0:	230d      	movs	r3, #13
   1f1e2:	18fb      	adds	r3, r7, r3
   1f1e4:	781b      	ldrb	r3, [r3, #0]
   1f1e6:	2b07      	cmp	r3, #7
   1f1e8:	d9d2      	bls.n	1f190 <sd_mmc_spi_crc7+0x30>
	while (size--) {
   1f1ea:	1cfb      	adds	r3, r7, #3
   1f1ec:	781b      	ldrb	r3, [r3, #0]
   1f1ee:	1cfa      	adds	r2, r7, #3
   1f1f0:	1e59      	subs	r1, r3, #1
   1f1f2:	7011      	strb	r1, [r2, #0]
   1f1f4:	2b00      	cmp	r3, #0
   1f1f6:	d1bf      	bne.n	1f178 <sd_mmc_spi_crc7+0x18>
		}
	}
	crc = (crc << 1) | 1;
   1f1f8:	230f      	movs	r3, #15
   1f1fa:	18fb      	adds	r3, r7, r3
   1f1fc:	781b      	ldrb	r3, [r3, #0]
   1f1fe:	005b      	lsls	r3, r3, #1
   1f200:	b25b      	sxtb	r3, r3
   1f202:	2201      	movs	r2, #1
   1f204:	4313      	orrs	r3, r2
   1f206:	b25a      	sxtb	r2, r3
   1f208:	230f      	movs	r3, #15
   1f20a:	18fb      	adds	r3, r7, r3
   1f20c:	701a      	strb	r2, [r3, #0]
	return crc;
   1f20e:	230f      	movs	r3, #15
   1f210:	18fb      	adds	r3, r7, r3
   1f212:	781b      	ldrb	r3, [r3, #0]
}
   1f214:	0018      	movs	r0, r3
   1f216:	46bd      	mov	sp, r7
   1f218:	b004      	add	sp, #16
   1f21a:	bd80      	pop	{r7, pc}

0001f21c <sd_mmc_spi_wait_busy>:
 * \brief Wait the end of busy on DAT0 line
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_wait_busy(void)
{
   1f21c:	b590      	push	{r4, r7, lr}
   1f21e:	b083      	sub	sp, #12
   1f220:	af00      	add	r7, sp, #0
	uint8_t line = 0xFF;
   1f222:	1c7b      	adds	r3, r7, #1
   1f224:	22ff      	movs	r2, #255	; 0xff
   1f226:	701a      	strb	r2, [r3, #0]
	uint16_t dummy = 0xFF;
   1f228:	1cbb      	adds	r3, r7, #2
   1f22a:	22ff      	movs	r2, #255	; 0xff
   1f22c:	801a      	strh	r2, [r3, #0]

	/* Delay before check busy
	 * Nbr timing minimum = 8 cylces
	 */
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   1f22e:	1cbb      	adds	r3, r7, #2
   1f230:	881b      	ldrh	r3, [r3, #0]
   1f232:	1c79      	adds	r1, r7, #1
   1f234:	4811      	ldr	r0, [pc, #68]	; (1f27c <sd_mmc_spi_wait_busy+0x60>)
   1f236:	2201      	movs	r2, #1
   1f238:	4c11      	ldr	r4, [pc, #68]	; (1f280 <sd_mmc_spi_wait_busy+0x64>)
   1f23a:	47a0      	blx	r4
	/* Wait end of busy signal
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	uint32_t nec_timeout = 200000;
   1f23c:	4b11      	ldr	r3, [pc, #68]	; (1f284 <sd_mmc_spi_wait_busy+0x68>)
   1f23e:	607b      	str	r3, [r7, #4]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   1f240:	1cbb      	adds	r3, r7, #2
   1f242:	881b      	ldrh	r3, [r3, #0]
   1f244:	1c79      	adds	r1, r7, #1
   1f246:	480d      	ldr	r0, [pc, #52]	; (1f27c <sd_mmc_spi_wait_busy+0x60>)
   1f248:	2201      	movs	r2, #1
   1f24a:	4c0d      	ldr	r4, [pc, #52]	; (1f280 <sd_mmc_spi_wait_busy+0x64>)
   1f24c:	47a0      	blx	r4
			dummy);
	do {
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   1f24e:	1cbb      	adds	r3, r7, #2
   1f250:	881b      	ldrh	r3, [r3, #0]
   1f252:	1c79      	adds	r1, r7, #1
   1f254:	4809      	ldr	r0, [pc, #36]	; (1f27c <sd_mmc_spi_wait_busy+0x60>)
   1f256:	2201      	movs	r2, #1
   1f258:	4c09      	ldr	r4, [pc, #36]	; (1f280 <sd_mmc_spi_wait_busy+0x64>)
   1f25a:	47a0      	blx	r4
			dummy);
		if (!(nec_timeout--)) {
   1f25c:	687b      	ldr	r3, [r7, #4]
   1f25e:	1e5a      	subs	r2, r3, #1
   1f260:	607a      	str	r2, [r7, #4]
   1f262:	2b00      	cmp	r3, #0
   1f264:	d101      	bne.n	1f26a <sd_mmc_spi_wait_busy+0x4e>
			return false;
   1f266:	2300      	movs	r3, #0
   1f268:	e004      	b.n	1f274 <sd_mmc_spi_wait_busy+0x58>
		}
	} while (line != 0xFF);
   1f26a:	1c7b      	adds	r3, r7, #1
   1f26c:	781b      	ldrb	r3, [r3, #0]
   1f26e:	2bff      	cmp	r3, #255	; 0xff
   1f270:	d1ed      	bne.n	1f24e <sd_mmc_spi_wait_busy+0x32>
	return true;
   1f272:	2301      	movs	r3, #1
}
   1f274:	0018      	movs	r0, r3
   1f276:	46bd      	mov	sp, r7
   1f278:	b003      	add	sp, #12
   1f27a:	bd90      	pop	{r4, r7, pc}
   1f27c:	20003c70 	.word	0x20003c70
   1f280:	000279fd 	.word	0x000279fd
   1f284:	00030d40 	.word	0x00030d40

0001f288 <sd_mmc_spi_start_read_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_start_read_block(void)
{
   1f288:	b590      	push	{r4, r7, lr}
   1f28a:	b083      	sub	sp, #12
   1f28c:	af00      	add	r7, sp, #0
	uint32_t i;
	uint8_t token;
	uint16_t dummy = 0xFF;
   1f28e:	1cbb      	adds	r3, r7, #2
   1f290:	22ff      	movs	r2, #255	; 0xff
   1f292:	801a      	strh	r2, [r3, #0]
	 * Compute the maximum timeout:
	 * Frequency maximum = 25MHz
	 * 1 byte = 8 cycles
	 * 100ms = 312500 x spi_read_buffer_wait() maximum
	 */
	token = 0;
   1f294:	1c7b      	adds	r3, r7, #1
   1f296:	2200      	movs	r2, #0
   1f298:	701a      	strb	r2, [r3, #0]
	i = 500000;
   1f29a:	4b18      	ldr	r3, [pc, #96]	; (1f2fc <sd_mmc_spi_start_read_block+0x74>)
   1f29c:	607b      	str	r3, [r7, #4]
	do {
		if (i-- == 0) {
   1f29e:	687b      	ldr	r3, [r7, #4]
   1f2a0:	1e5a      	subs	r2, r3, #1
   1f2a2:	607a      	str	r2, [r7, #4]
   1f2a4:	2b00      	cmp	r3, #0
   1f2a6:	d104      	bne.n	1f2b2 <sd_mmc_spi_start_read_block+0x2a>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
   1f2a8:	4b15      	ldr	r3, [pc, #84]	; (1f300 <sd_mmc_spi_start_read_block+0x78>)
   1f2aa:	2204      	movs	r2, #4
   1f2ac:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: Read blocks timeout\n\r", __func__);
			return false;
   1f2ae:	2300      	movs	r3, #0
   1f2b0:	e020      	b.n	1f2f4 <sd_mmc_spi_start_read_block+0x6c>
		}
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
   1f2b2:	1cbb      	adds	r3, r7, #2
   1f2b4:	881b      	ldrh	r3, [r3, #0]
   1f2b6:	1c79      	adds	r1, r7, #1
   1f2b8:	4812      	ldr	r0, [pc, #72]	; (1f304 <sd_mmc_spi_start_read_block+0x7c>)
   1f2ba:	2201      	movs	r2, #1
   1f2bc:	4c12      	ldr	r4, [pc, #72]	; (1f308 <sd_mmc_spi_start_read_block+0x80>)
   1f2be:	47a0      	blx	r4
			dummy);
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
   1f2c0:	1c7b      	adds	r3, r7, #1
   1f2c2:	781b      	ldrb	r3, [r3, #0]
   1f2c4:	001a      	movs	r2, r3
   1f2c6:	23f0      	movs	r3, #240	; 0xf0
   1f2c8:	4013      	ands	r3, r2
   1f2ca:	d10e      	bne.n	1f2ea <sd_mmc_spi_start_read_block+0x62>
			Assert(SPI_TOKEN_DATA_ERROR_ERRORS & token);
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
   1f2cc:	1c7b      	adds	r3, r7, #1
   1f2ce:	781b      	ldrb	r3, [r3, #0]
   1f2d0:	001a      	movs	r2, r3
   1f2d2:	2307      	movs	r3, #7
   1f2d4:	4013      	ands	r3, r2
   1f2d6:	d003      	beq.n	1f2e0 <sd_mmc_spi_start_read_block+0x58>
					| SPI_TOKEN_DATA_ERROR_ECC_ERROR
					| SPI_TOKEN_DATA_ERROR_CC_ERROR)) {
				sd_mmc_spi_debug("%s: CRC data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
   1f2d8:	4b09      	ldr	r3, [pc, #36]	; (1f300 <sd_mmc_spi_start_read_block+0x78>)
   1f2da:	2207      	movs	r2, #7
   1f2dc:	701a      	strb	r2, [r3, #0]
   1f2de:	e002      	b.n	1f2e6 <sd_mmc_spi_start_read_block+0x5e>
			} else {
				sd_mmc_spi_debug("%s: Out of range data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
   1f2e0:	4b07      	ldr	r3, [pc, #28]	; (1f300 <sd_mmc_spi_start_read_block+0x78>)
   1f2e2:	220b      	movs	r2, #11
   1f2e4:	701a      	strb	r2, [r3, #0]
			}
			return false;
   1f2e6:	2300      	movs	r3, #0
   1f2e8:	e004      	b.n	1f2f4 <sd_mmc_spi_start_read_block+0x6c>
		}
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
   1f2ea:	1c7b      	adds	r3, r7, #1
   1f2ec:	781b      	ldrb	r3, [r3, #0]
   1f2ee:	2bfe      	cmp	r3, #254	; 0xfe
   1f2f0:	d1d5      	bne.n	1f29e <sd_mmc_spi_start_read_block+0x16>

	return true;
   1f2f2:	2301      	movs	r3, #1
}
   1f2f4:	0018      	movs	r0, r3
   1f2f6:	46bd      	mov	sp, r7
   1f2f8:	b003      	add	sp, #12
   1f2fa:	bd90      	pop	{r4, r7, pc}
   1f2fc:	0007a120 	.word	0x0007a120
   1f300:	20003caf 	.word	0x20003caf
   1f304:	20003c70 	.word	0x20003c70
   1f308:	000279fd 	.word	0x000279fd

0001f30c <sd_mmc_spi_stop_read_block>:

/**
 * \brief Executed the end of a read block transfer
 */
static void sd_mmc_spi_stop_read_block(void)
{
   1f30c:	b590      	push	{r4, r7, lr}
   1f30e:	b083      	sub	sp, #12
   1f310:	af00      	add	r7, sp, #0
	uint8_t crc[2];
	uint16_t dummy = 0xFF;
   1f312:	1dbb      	adds	r3, r7, #6
   1f314:	22ff      	movs	r2, #255	; 0xff
   1f316:	801a      	strh	r2, [r3, #0]
	// Read 16-bit CRC (not cheked)
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
   1f318:	1dbb      	adds	r3, r7, #6
   1f31a:	881b      	ldrh	r3, [r3, #0]
   1f31c:	1d39      	adds	r1, r7, #4
   1f31e:	4804      	ldr	r0, [pc, #16]	; (1f330 <sd_mmc_spi_stop_read_block+0x24>)
   1f320:	2202      	movs	r2, #2
   1f322:	4c04      	ldr	r4, [pc, #16]	; (1f334 <sd_mmc_spi_stop_read_block+0x28>)
   1f324:	47a0      	blx	r4
			dummy);
}
   1f326:	46c0      	nop			; (mov r8, r8)
   1f328:	46bd      	mov	sp, r7
   1f32a:	b003      	add	sp, #12
   1f32c:	bd90      	pop	{r4, r7, pc}
   1f32e:	46c0      	nop			; (mov r8, r8)
   1f330:	20003c70 	.word	0x20003c70
   1f334:	000279fd 	.word	0x000279fd

0001f338 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
   1f338:	b580      	push	{r7, lr}
   1f33a:	b082      	sub	sp, #8
   1f33c:	af00      	add	r7, sp, #0
	uint8_t dummy = 0xFF;
   1f33e:	1dfb      	adds	r3, r7, #7
   1f340:	22ff      	movs	r2, #255	; 0xff
   1f342:	701a      	strb	r2, [r3, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
   1f344:	1df9      	adds	r1, r7, #7
   1f346:	4b0d      	ldr	r3, [pc, #52]	; (1f37c <sd_mmc_spi_start_write_block+0x44>)
   1f348:	2201      	movs	r2, #1
   1f34a:	0018      	movs	r0, r3
   1f34c:	4b0c      	ldr	r3, [pc, #48]	; (1f380 <sd_mmc_spi_start_write_block+0x48>)
   1f34e:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
   1f350:	4b0c      	ldr	r3, [pc, #48]	; (1f384 <sd_mmc_spi_start_write_block+0x4c>)
   1f352:	881b      	ldrh	r3, [r3, #0]
   1f354:	2b01      	cmp	r3, #1
   1f356:	d103      	bne.n	1f360 <sd_mmc_spi_start_write_block+0x28>
		token = SPI_TOKEN_SINGLE_WRITE;
   1f358:	1dbb      	adds	r3, r7, #6
   1f35a:	22fe      	movs	r2, #254	; 0xfe
   1f35c:	701a      	strb	r2, [r3, #0]
   1f35e:	e002      	b.n	1f366 <sd_mmc_spi_start_write_block+0x2e>
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
   1f360:	1dbb      	adds	r3, r7, #6
   1f362:	22fc      	movs	r2, #252	; 0xfc
   1f364:	701a      	strb	r2, [r3, #0]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
   1f366:	1db9      	adds	r1, r7, #6
   1f368:	4b04      	ldr	r3, [pc, #16]	; (1f37c <sd_mmc_spi_start_write_block+0x44>)
   1f36a:	2201      	movs	r2, #1
   1f36c:	0018      	movs	r0, r3
   1f36e:	4b04      	ldr	r3, [pc, #16]	; (1f380 <sd_mmc_spi_start_write_block+0x48>)
   1f370:	4798      	blx	r3
}
   1f372:	46c0      	nop			; (mov r8, r8)
   1f374:	46bd      	mov	sp, r7
   1f376:	b002      	add	sp, #8
   1f378:	bd80      	pop	{r7, pc}
   1f37a:	46c0      	nop			; (mov r8, r8)
   1f37c:	20003c70 	.word	0x20003c70
   1f380:	00027c21 	.word	0x00027c21
   1f384:	20003cba 	.word	0x20003cba

0001f388 <sd_mmc_spi_stop_write_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_write_block(void)
{
   1f388:	b590      	push	{r4, r7, lr}
   1f38a:	b083      	sub	sp, #12
   1f38c:	af00      	add	r7, sp, #0
	uint8_t resp;
	uint16_t crc;
	uint16_t dummy = 0xFF;
   1f38e:	1dbb      	adds	r3, r7, #6
   1f390:	22ff      	movs	r2, #255	; 0xff
   1f392:	801a      	strh	r2, [r3, #0]

	// Send CRC
	crc = 0xFFFF; /// CRC is disabled in SPI mode
   1f394:	1cbb      	adds	r3, r7, #2
   1f396:	2201      	movs	r2, #1
   1f398:	4252      	negs	r2, r2
   1f39a:	801a      	strh	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
   1f39c:	1cb9      	adds	r1, r7, #2
   1f39e:	4b1b      	ldr	r3, [pc, #108]	; (1f40c <sd_mmc_spi_stop_write_block+0x84>)
   1f3a0:	2202      	movs	r2, #2
   1f3a2:	0018      	movs	r0, r3
   1f3a4:	4b1a      	ldr	r3, [pc, #104]	; (1f410 <sd_mmc_spi_stop_write_block+0x88>)
   1f3a6:	4798      	blx	r3
	// Receiv data response token
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
   1f3a8:	1dbb      	adds	r3, r7, #6
   1f3aa:	881b      	ldrh	r3, [r3, #0]
   1f3ac:	1d79      	adds	r1, r7, #5
   1f3ae:	4817      	ldr	r0, [pc, #92]	; (1f40c <sd_mmc_spi_stop_write_block+0x84>)
   1f3b0:	2201      	movs	r2, #1
   1f3b2:	4c18      	ldr	r4, [pc, #96]	; (1f414 <sd_mmc_spi_stop_write_block+0x8c>)
   1f3b4:	47a0      	blx	r4
			dummy);
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
   1f3b6:	1d7b      	adds	r3, r7, #5
   1f3b8:	781b      	ldrb	r3, [r3, #0]
   1f3ba:	001a      	movs	r2, r3
   1f3bc:	2310      	movs	r3, #16
   1f3be:	4013      	ands	r3, r2
   1f3c0:	d105      	bne.n	1f3ce <sd_mmc_spi_stop_write_block+0x46>
   1f3c2:	1d7b      	adds	r3, r7, #5
   1f3c4:	781b      	ldrb	r3, [r3, #0]
   1f3c6:	001a      	movs	r2, r3
   1f3c8:	2301      	movs	r3, #1
   1f3ca:	4013      	ands	r3, r2
   1f3cc:	d104      	bne.n	1f3d8 <sd_mmc_spi_stop_write_block+0x50>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   1f3ce:	4b12      	ldr	r3, [pc, #72]	; (1f418 <sd_mmc_spi_stop_write_block+0x90>)
   1f3d0:	2201      	movs	r2, #1
   1f3d2:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Invalid Data Response Token 0x%x\n\r", __func__, resp);
		return false;
   1f3d4:	2300      	movs	r3, #0
   1f3d6:	e014      	b.n	1f402 <sd_mmc_spi_stop_write_block+0x7a>
	}
	// Check data response
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
   1f3d8:	1d7b      	adds	r3, r7, #5
   1f3da:	781b      	ldrb	r3, [r3, #0]
   1f3dc:	001a      	movs	r2, r3
   1f3de:	231e      	movs	r3, #30
   1f3e0:	4013      	ands	r3, r2
   1f3e2:	2b04      	cmp	r3, #4
   1f3e4:	d00b      	beq.n	1f3fe <sd_mmc_spi_stop_write_block+0x76>
   1f3e6:	2b0a      	cmp	r3, #10
   1f3e8:	d104      	bne.n	1f3f4 <sd_mmc_spi_stop_write_block+0x6c>
	case SPI_TOKEN_DATA_RESP_ACCEPTED:
		break;
	case SPI_TOKEN_DATA_RESP_CRC_ERR:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
   1f3ea:	4b0b      	ldr	r3, [pc, #44]	; (1f418 <sd_mmc_spi_stop_write_block+0x90>)
   1f3ec:	2208      	movs	r2, #8
   1f3ee:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks, SD_MMC_SPI_ERR_CRC, resp 0x%x\n\r",
				__func__, resp);
		return false;
   1f3f0:	2300      	movs	r3, #0
   1f3f2:	e006      	b.n	1f402 <sd_mmc_spi_stop_write_block+0x7a>
	case SPI_TOKEN_DATA_RESP_WRITE_ERR:
	default:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
   1f3f4:	4b08      	ldr	r3, [pc, #32]	; (1f418 <sd_mmc_spi_stop_write_block+0x90>)
   1f3f6:	220a      	movs	r2, #10
   1f3f8:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks SD_MMC_SPI_ERR_WR, resp 0x%x\n\r",
				__func__, resp);
		return false;
   1f3fa:	2300      	movs	r3, #0
   1f3fc:	e001      	b.n	1f402 <sd_mmc_spi_stop_write_block+0x7a>
		break;
   1f3fe:	46c0      	nop			; (mov r8, r8)
	}
	return true;
   1f400:	2301      	movs	r3, #1
}
   1f402:	0018      	movs	r0, r3
   1f404:	46bd      	mov	sp, r7
   1f406:	b003      	add	sp, #12
   1f408:	bd90      	pop	{r4, r7, pc}
   1f40a:	46c0      	nop			; (mov r8, r8)
   1f40c:	20003c70 	.word	0x20003c70
   1f410:	00027c21 	.word	0x00027c21
   1f414:	000279fd 	.word	0x000279fd
   1f418:	20003caf 	.word	0x20003caf

0001f41c <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
   1f41c:	b590      	push	{r4, r7, lr}
   1f41e:	b083      	sub	sp, #12
   1f420:	af00      	add	r7, sp, #0
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
   1f422:	4b1d      	ldr	r3, [pc, #116]	; (1f498 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
   1f424:	881b      	ldrh	r3, [r3, #0]
   1f426:	2b01      	cmp	r3, #1
   1f428:	d101      	bne.n	1f42e <sd_mmc_spi_stop_multiwrite_block+0x12>
		return true; // Single block write
   1f42a:	2301      	movs	r3, #1
   1f42c:	e030      	b.n	1f490 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	if (sd_mmc_spi_nb_block >
   1f42e:	4b1a      	ldr	r3, [pc, #104]	; (1f498 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
   1f430:	881b      	ldrh	r3, [r3, #0]
   1f432:	001c      	movs	r4, r3
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
   1f434:	4b19      	ldr	r3, [pc, #100]	; (1f49c <sd_mmc_spi_stop_multiwrite_block+0x80>)
   1f436:	681a      	ldr	r2, [r3, #0]
   1f438:	4b19      	ldr	r3, [pc, #100]	; (1f4a0 <sd_mmc_spi_stop_multiwrite_block+0x84>)
   1f43a:	881b      	ldrh	r3, [r3, #0]
   1f43c:	0019      	movs	r1, r3
   1f43e:	4b19      	ldr	r3, [pc, #100]	; (1f4a4 <sd_mmc_spi_stop_multiwrite_block+0x88>)
   1f440:	0010      	movs	r0, r2
   1f442:	4798      	blx	r3
   1f444:	0003      	movs	r3, r0
	if (sd_mmc_spi_nb_block >
   1f446:	429c      	cmp	r4, r3
   1f448:	d901      	bls.n	1f44e <sd_mmc_spi_stop_multiwrite_block+0x32>
		return true; // It is not the End of multi write
   1f44a:	2301      	movs	r3, #1
   1f44c:	e020      	b.n	1f490 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}

	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	value = 0xFF;
   1f44e:	1dfb      	adds	r3, r7, #7
   1f450:	22ff      	movs	r2, #255	; 0xff
   1f452:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   1f454:	1df9      	adds	r1, r7, #7
   1f456:	4b14      	ldr	r3, [pc, #80]	; (1f4a8 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
   1f458:	2201      	movs	r2, #1
   1f45a:	0018      	movs	r0, r3
   1f45c:	4b13      	ldr	r3, [pc, #76]	; (1f4ac <sd_mmc_spi_stop_multiwrite_block+0x90>)
   1f45e:	4798      	blx	r3
	// Send stop token
	value = SPI_TOKEN_STOP_TRAN;
   1f460:	1dfb      	adds	r3, r7, #7
   1f462:	22fd      	movs	r2, #253	; 0xfd
   1f464:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   1f466:	1df9      	adds	r1, r7, #7
   1f468:	4b0f      	ldr	r3, [pc, #60]	; (1f4a8 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
   1f46a:	2201      	movs	r2, #1
   1f46c:	0018      	movs	r0, r3
   1f46e:	4b0f      	ldr	r3, [pc, #60]	; (1f4ac <sd_mmc_spi_stop_multiwrite_block+0x90>)
   1f470:	4798      	blx	r3
	// Wait busy
	if (!sd_mmc_spi_wait_busy()) {
   1f472:	4b0f      	ldr	r3, [pc, #60]	; (1f4b0 <sd_mmc_spi_stop_multiwrite_block+0x94>)
   1f474:	4798      	blx	r3
   1f476:	0003      	movs	r3, r0
   1f478:	001a      	movs	r2, r3
   1f47a:	2301      	movs	r3, #1
   1f47c:	4053      	eors	r3, r2
   1f47e:	b2db      	uxtb	r3, r3
   1f480:	2b00      	cmp	r3, #0
   1f482:	d004      	beq.n	1f48e <sd_mmc_spi_stop_multiwrite_block+0x72>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   1f484:	4b0b      	ldr	r3, [pc, #44]	; (1f4b4 <sd_mmc_spi_stop_multiwrite_block+0x98>)
   1f486:	2205      	movs	r2, #5
   1f488:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
   1f48a:	2300      	movs	r3, #0
   1f48c:	e000      	b.n	1f490 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	return true;
   1f48e:	2301      	movs	r3, #1
}
   1f490:	0018      	movs	r0, r3
   1f492:	46bd      	mov	sp, r7
   1f494:	b003      	add	sp, #12
   1f496:	bd90      	pop	{r4, r7, pc}
   1f498:	20003cba 	.word	0x20003cba
   1f49c:	20003cb4 	.word	0x20003cb4
   1f4a0:	20003cb8 	.word	0x20003cb8
   1f4a4:	000323c9 	.word	0x000323c9
   1f4a8:	20003c70 	.word	0x20003c70
   1f4ac:	00027c21 	.word	0x00027c21
   1f4b0:	0001f21d 	.word	0x0001f21d
   1f4b4:	20003caf 	.word	0x20003caf

0001f4b8 <sd_mmc_spi_select_device>:
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
}

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
   1f4b8:	b590      	push	{r4, r7, lr}
   1f4ba:	b083      	sub	sp, #12
   1f4bc:	af00      	add	r7, sp, #0
   1f4be:	0004      	movs	r4, r0
   1f4c0:	6039      	str	r1, [r7, #0]
   1f4c2:	0010      	movs	r0, r2
   1f4c4:	0019      	movs	r1, r3
   1f4c6:	1dfb      	adds	r3, r7, #7
   1f4c8:	1c22      	adds	r2, r4, #0
   1f4ca:	701a      	strb	r2, [r3, #0]
   1f4cc:	1dbb      	adds	r3, r7, #6
   1f4ce:	1c02      	adds	r2, r0, #0
   1f4d0:	701a      	strb	r2, [r3, #0]
   1f4d2:	1d7b      	adds	r3, r7, #5
   1f4d4:	1c0a      	adds	r2, r1, #0
   1f4d6:	701a      	strb	r2, [r3, #0]
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1f4d8:	4b13      	ldr	r3, [pc, #76]	; (1f528 <sd_mmc_spi_select_device+0x70>)
   1f4da:	2200      	movs	r2, #0
   1f4dc:	701a      	strb	r2, [r3, #0]

#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
   1f4de:	683b      	ldr	r3, [r7, #0]
   1f4e0:	4a12      	ldr	r2, [pc, #72]	; (1f52c <sd_mmc_spi_select_device+0x74>)
   1f4e2:	4293      	cmp	r3, r2
   1f4e4:	d907      	bls.n	1f4f6 <sd_mmc_spi_select_device+0x3e>
		clock = SD_MMC_SPI_MAX_CLOCK;
   1f4e6:	4b11      	ldr	r3, [pc, #68]	; (1f52c <sd_mmc_spi_select_device+0x74>)
   1f4e8:	603b      	str	r3, [r7, #0]
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   1f4ea:	e004      	b.n	1f4f6 <sd_mmc_spi_select_device+0x3e>
		clock -= clock / 8;
   1f4ec:	683b      	ldr	r3, [r7, #0]
   1f4ee:	08db      	lsrs	r3, r3, #3
   1f4f0:	683a      	ldr	r2, [r7, #0]
   1f4f2:	1ad3      	subs	r3, r2, r3
   1f4f4:	603b      	str	r3, [r7, #0]
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   1f4f6:	683a      	ldr	r2, [r7, #0]
   1f4f8:	4b0d      	ldr	r3, [pc, #52]	; (1f530 <sd_mmc_spi_select_device+0x78>)
   1f4fa:	0011      	movs	r1, r2
   1f4fc:	0018      	movs	r0, r3
   1f4fe:	4b0d      	ldr	r3, [pc, #52]	; (1f534 <sd_mmc_spi_select_device+0x7c>)
   1f500:	4798      	blx	r3
   1f502:	0003      	movs	r3, r0
   1f504:	2b17      	cmp	r3, #23
   1f506:	d0f1      	beq.n	1f4ec <sd_mmc_spi_select_device+0x34>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
   1f508:	1dfb      	adds	r3, r7, #7
   1f50a:	781a      	ldrb	r2, [r3, #0]
   1f50c:	0013      	movs	r3, r2
   1f50e:	005b      	lsls	r3, r3, #1
   1f510:	189b      	adds	r3, r3, r2
   1f512:	4a09      	ldr	r2, [pc, #36]	; (1f538 <sd_mmc_spi_select_device+0x80>)
   1f514:	1899      	adds	r1, r3, r2
   1f516:	4b06      	ldr	r3, [pc, #24]	; (1f530 <sd_mmc_spi_select_device+0x78>)
   1f518:	2201      	movs	r2, #1
   1f51a:	0018      	movs	r0, r3
   1f51c:	4b07      	ldr	r3, [pc, #28]	; (1f53c <sd_mmc_spi_select_device+0x84>)
   1f51e:	4798      	blx	r3
}
   1f520:	46c0      	nop			; (mov r8, r8)
   1f522:	46bd      	mov	sp, r7
   1f524:	b003      	add	sp, #12
   1f526:	bd90      	pop	{r4, r7, pc}
   1f528:	20003caf 	.word	0x20003caf
   1f52c:	00989680 	.word	0x00989680
   1f530:	20003c70 	.word	0x20003c70
   1f534:	00027595 	.word	0x00027595
   1f538:	20003cac 	.word	0x20003cac
   1f53c:	00027b31 	.word	0x00027b31

0001f540 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
   1f540:	b580      	push	{r7, lr}
   1f542:	b082      	sub	sp, #8
   1f544:	af00      	add	r7, sp, #0
   1f546:	0002      	movs	r2, r0
   1f548:	1dfb      	adds	r3, r7, #7
   1f54a:	701a      	strb	r2, [r3, #0]
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1f54c:	4b09      	ldr	r3, [pc, #36]	; (1f574 <sd_mmc_spi_deselect_device+0x34>)
   1f54e:	2200      	movs	r2, #0
   1f550:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
   1f552:	1dfb      	adds	r3, r7, #7
   1f554:	781a      	ldrb	r2, [r3, #0]
   1f556:	0013      	movs	r3, r2
   1f558:	005b      	lsls	r3, r3, #1
   1f55a:	189b      	adds	r3, r3, r2
   1f55c:	4a06      	ldr	r2, [pc, #24]	; (1f578 <sd_mmc_spi_deselect_device+0x38>)
   1f55e:	1899      	adds	r1, r3, r2
   1f560:	4b06      	ldr	r3, [pc, #24]	; (1f57c <sd_mmc_spi_deselect_device+0x3c>)
   1f562:	2200      	movs	r2, #0
   1f564:	0018      	movs	r0, r3
   1f566:	4b06      	ldr	r3, [pc, #24]	; (1f580 <sd_mmc_spi_deselect_device+0x40>)
   1f568:	4798      	blx	r3
}
   1f56a:	46c0      	nop			; (mov r8, r8)
   1f56c:	46bd      	mov	sp, r7
   1f56e:	b002      	add	sp, #8
   1f570:	bd80      	pop	{r7, pc}
   1f572:	46c0      	nop			; (mov r8, r8)
   1f574:	20003caf 	.word	0x20003caf
   1f578:	20003cac 	.word	0x20003cac
   1f57c:	20003c70 	.word	0x20003c70
   1f580:	00027b31 	.word	0x00027b31

0001f584 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
   1f584:	b580      	push	{r7, lr}
   1f586:	b082      	sub	sp, #8
   1f588:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t dummy = 0xFF;
   1f58a:	1dbb      	adds	r3, r7, #6
   1f58c:	22ff      	movs	r2, #255	; 0xff
   1f58e:	701a      	strb	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1f590:	4b0c      	ldr	r3, [pc, #48]	; (1f5c4 <sd_mmc_spi_send_clock+0x40>)
   1f592:	2200      	movs	r2, #0
   1f594:	701a      	strb	r2, [r3, #0]
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
   1f596:	1dfb      	adds	r3, r7, #7
   1f598:	2200      	movs	r2, #0
   1f59a:	701a      	strb	r2, [r3, #0]
   1f59c:	e00a      	b.n	1f5b4 <sd_mmc_spi_send_clock+0x30>
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
   1f59e:	1db9      	adds	r1, r7, #6
   1f5a0:	4b09      	ldr	r3, [pc, #36]	; (1f5c8 <sd_mmc_spi_send_clock+0x44>)
   1f5a2:	2201      	movs	r2, #1
   1f5a4:	0018      	movs	r0, r3
   1f5a6:	4b09      	ldr	r3, [pc, #36]	; (1f5cc <sd_mmc_spi_send_clock+0x48>)
   1f5a8:	4798      	blx	r3
	for (i = 0; i < 10; i++) {
   1f5aa:	1dfb      	adds	r3, r7, #7
   1f5ac:	781a      	ldrb	r2, [r3, #0]
   1f5ae:	1dfb      	adds	r3, r7, #7
   1f5b0:	3201      	adds	r2, #1
   1f5b2:	701a      	strb	r2, [r3, #0]
   1f5b4:	1dfb      	adds	r3, r7, #7
   1f5b6:	781b      	ldrb	r3, [r3, #0]
   1f5b8:	2b09      	cmp	r3, #9
   1f5ba:	d9f0      	bls.n	1f59e <sd_mmc_spi_send_clock+0x1a>
	}
}
   1f5bc:	46c0      	nop			; (mov r8, r8)
   1f5be:	46bd      	mov	sp, r7
   1f5c0:	b002      	add	sp, #8
   1f5c2:	bd80      	pop	{r7, pc}
   1f5c4:	20003caf 	.word	0x20003caf
   1f5c8:	20003c70 	.word	0x20003c70
   1f5cc:	00027c21 	.word	0x00027c21

0001f5d0 <sd_mmc_spi_send_cmd>:

bool sd_mmc_spi_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
   1f5d0:	b590      	push	{r4, r7, lr}
   1f5d2:	b085      	sub	sp, #20
   1f5d4:	af02      	add	r7, sp, #8
   1f5d6:	6078      	str	r0, [r7, #4]
   1f5d8:	6039      	str	r1, [r7, #0]
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
   1f5da:	6839      	ldr	r1, [r7, #0]
   1f5dc:	6878      	ldr	r0, [r7, #4]
   1f5de:	2300      	movs	r3, #0
   1f5e0:	9300      	str	r3, [sp, #0]
   1f5e2:	2300      	movs	r3, #0
   1f5e4:	2200      	movs	r2, #0
   1f5e6:	4c03      	ldr	r4, [pc, #12]	; (1f5f4 <sd_mmc_spi_send_cmd+0x24>)
   1f5e8:	47a0      	blx	r4
   1f5ea:	0003      	movs	r3, r0
}
   1f5ec:	0018      	movs	r0, r3
   1f5ee:	46bd      	mov	sp, r7
   1f5f0:	b003      	add	sp, #12
   1f5f2:	bd90      	pop	{r4, r7, pc}
   1f5f4:	0001f5f9 	.word	0x0001f5f9

0001f5f8 <sd_mmc_spi_adtc_start>:

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
   1f5f8:	b590      	push	{r4, r7, lr}
   1f5fa:	b089      	sub	sp, #36	; 0x24
   1f5fc:	af00      	add	r7, sp, #0
   1f5fe:	60f8      	str	r0, [r7, #12]
   1f600:	60b9      	str	r1, [r7, #8]
   1f602:	0019      	movs	r1, r3
   1f604:	1dbb      	adds	r3, r7, #6
   1f606:	801a      	strh	r2, [r3, #0]
   1f608:	1d3b      	adds	r3, r7, #4
   1f60a:	1c0a      	adds	r2, r1, #0
   1f60c:	801a      	strh	r2, [r3, #0]
	uint8_t dummy = 0xFF;
   1f60e:	231b      	movs	r3, #27
   1f610:	18fb      	adds	r3, r7, r3
   1f612:	22ff      	movs	r2, #255	; 0xff
   1f614:	701a      	strb	r2, [r3, #0]
	uint8_t cmd_token[6];
	uint8_t ncr_timeout;
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;
   1f616:	231c      	movs	r3, #28
   1f618:	18fb      	adds	r3, r7, r3
   1f61a:	22ff      	movs	r2, #255	; 0xff
   1f61c:	801a      	strh	r2, [r3, #0]

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1f61e:	4b72      	ldr	r3, [pc, #456]	; (1f7e8 <sd_mmc_spi_adtc_start+0x1f0>)
   1f620:	2200      	movs	r2, #0
   1f622:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
   1f624:	68fb      	ldr	r3, [r7, #12]
   1f626:	b2db      	uxtb	r3, r3
   1f628:	223f      	movs	r2, #63	; 0x3f
   1f62a:	4013      	ands	r3, r2
   1f62c:	b2db      	uxtb	r3, r3
   1f62e:	2240      	movs	r2, #64	; 0x40
   1f630:	4313      	orrs	r3, r2
   1f632:	b2da      	uxtb	r2, r3
   1f634:	2314      	movs	r3, #20
   1f636:	18fb      	adds	r3, r7, r3
   1f638:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
   1f63a:	68bb      	ldr	r3, [r7, #8]
   1f63c:	0e1b      	lsrs	r3, r3, #24
   1f63e:	b2da      	uxtb	r2, r3
   1f640:	2314      	movs	r3, #20
   1f642:	18fb      	adds	r3, r7, r3
   1f644:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
   1f646:	68bb      	ldr	r3, [r7, #8]
   1f648:	0c1b      	lsrs	r3, r3, #16
   1f64a:	b2da      	uxtb	r2, r3
   1f64c:	2314      	movs	r3, #20
   1f64e:	18fb      	adds	r3, r7, r3
   1f650:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
   1f652:	68bb      	ldr	r3, [r7, #8]
   1f654:	0a1b      	lsrs	r3, r3, #8
   1f656:	b2da      	uxtb	r2, r3
   1f658:	2314      	movs	r3, #20
   1f65a:	18fb      	adds	r3, r7, r3
   1f65c:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
   1f65e:	68bb      	ldr	r3, [r7, #8]
   1f660:	b2da      	uxtb	r2, r3
   1f662:	2314      	movs	r3, #20
   1f664:	18fb      	adds	r3, r7, r3
   1f666:	711a      	strb	r2, [r3, #4]
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
   1f668:	2314      	movs	r3, #20
   1f66a:	18fb      	adds	r3, r7, r3
   1f66c:	2105      	movs	r1, #5
   1f66e:	0018      	movs	r0, r3
   1f670:	4b5e      	ldr	r3, [pc, #376]	; (1f7ec <sd_mmc_spi_adtc_start+0x1f4>)
   1f672:	4798      	blx	r3
   1f674:	0003      	movs	r3, r0
   1f676:	001a      	movs	r2, r3
   1f678:	2314      	movs	r3, #20
   1f67a:	18fb      	adds	r3, r7, r3
   1f67c:	715a      	strb	r2, [r3, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
   1f67e:	231b      	movs	r3, #27
   1f680:	18f9      	adds	r1, r7, r3
   1f682:	4b5b      	ldr	r3, [pc, #364]	; (1f7f0 <sd_mmc_spi_adtc_start+0x1f8>)
   1f684:	2201      	movs	r2, #1
   1f686:	0018      	movs	r0, r3
   1f688:	4b5a      	ldr	r3, [pc, #360]	; (1f7f4 <sd_mmc_spi_adtc_start+0x1fc>)
   1f68a:	4798      	blx	r3
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
   1f68c:	2314      	movs	r3, #20
   1f68e:	18f9      	adds	r1, r7, r3
   1f690:	4b57      	ldr	r3, [pc, #348]	; (1f7f0 <sd_mmc_spi_adtc_start+0x1f8>)
   1f692:	2206      	movs	r2, #6
   1f694:	0018      	movs	r0, r3
   1f696:	4b57      	ldr	r3, [pc, #348]	; (1f7f4 <sd_mmc_spi_adtc_start+0x1fc>)
   1f698:	4798      	blx	r3

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
   1f69a:	2313      	movs	r3, #19
   1f69c:	18fb      	adds	r3, r7, r3
   1f69e:	22ff      	movs	r2, #255	; 0xff
   1f6a0:	701a      	strb	r2, [r3, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   1f6a2:	231c      	movs	r3, #28
   1f6a4:	18fb      	adds	r3, r7, r3
   1f6a6:	881b      	ldrh	r3, [r3, #0]
   1f6a8:	2213      	movs	r2, #19
   1f6aa:	18b9      	adds	r1, r7, r2
   1f6ac:	4850      	ldr	r0, [pc, #320]	; (1f7f0 <sd_mmc_spi_adtc_start+0x1f8>)
   1f6ae:	2201      	movs	r2, #1
   1f6b0:	4c51      	ldr	r4, [pc, #324]	; (1f7f8 <sd_mmc_spi_adtc_start+0x200>)
   1f6b2:	47a0      	blx	r4
			dummy2);
	ncr_timeout = 7;
   1f6b4:	231f      	movs	r3, #31
   1f6b6:	18fb      	adds	r3, r7, r3
   1f6b8:	2207      	movs	r2, #7
   1f6ba:	701a      	strb	r2, [r3, #0]
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   1f6bc:	231c      	movs	r3, #28
   1f6be:	18fb      	adds	r3, r7, r3
   1f6c0:	881b      	ldrh	r3, [r3, #0]
   1f6c2:	2213      	movs	r2, #19
   1f6c4:	18b9      	adds	r1, r7, r2
   1f6c6:	484a      	ldr	r0, [pc, #296]	; (1f7f0 <sd_mmc_spi_adtc_start+0x1f8>)
   1f6c8:	2201      	movs	r2, #1
   1f6ca:	4c4b      	ldr	r4, [pc, #300]	; (1f7f8 <sd_mmc_spi_adtc_start+0x200>)
   1f6cc:	47a0      	blx	r4
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
   1f6ce:	2313      	movs	r3, #19
   1f6d0:	18fb      	adds	r3, r7, r3
   1f6d2:	781b      	ldrb	r3, [r3, #0]
   1f6d4:	b25b      	sxtb	r3, r3
   1f6d6:	2b00      	cmp	r3, #0
   1f6d8:	da10      	bge.n	1f6fc <sd_mmc_spi_adtc_start+0x104>
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
   1f6da:	231f      	movs	r3, #31
   1f6dc:	18fb      	adds	r3, r7, r3
   1f6de:	221f      	movs	r2, #31
   1f6e0:	18ba      	adds	r2, r7, r2
   1f6e2:	7812      	ldrb	r2, [r2, #0]
   1f6e4:	3a01      	subs	r2, #1
   1f6e6:	701a      	strb	r2, [r3, #0]
   1f6e8:	231f      	movs	r3, #31
   1f6ea:	18fb      	adds	r3, r7, r3
   1f6ec:	781b      	ldrb	r3, [r3, #0]
   1f6ee:	2b00      	cmp	r3, #0
   1f6f0:	d1e4      	bne.n	1f6bc <sd_mmc_spi_adtc_start+0xc4>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
   1f6f2:	4b3d      	ldr	r3, [pc, #244]	; (1f7e8 <sd_mmc_spi_adtc_start+0x1f0>)
   1f6f4:	2202      	movs	r2, #2
   1f6f6:	701a      	strb	r2, [r3, #0]
			return false;
   1f6f8:	2300      	movs	r3, #0
   1f6fa:	e070      	b.n	1f7de <sd_mmc_spi_adtc_start+0x1e6>
			break;
   1f6fc:	46c0      	nop			; (mov r8, r8)
		}
	}

	// Save R1 (Specific to SPI interface) in 32 bit response
	// The R1_SPI_IDLE bit can be checked by high level
	sd_mmc_spi_response_32 = r1;
   1f6fe:	2313      	movs	r3, #19
   1f700:	18fb      	adds	r3, r7, r3
   1f702:	781b      	ldrb	r3, [r3, #0]
   1f704:	001a      	movs	r2, r3
   1f706:	4b3d      	ldr	r3, [pc, #244]	; (1f7fc <sd_mmc_spi_adtc_start+0x204>)
   1f708:	601a      	str	r2, [r3, #0]

	// Manage error in R1
	if (r1 & R1_SPI_COM_CRC) {
   1f70a:	2313      	movs	r3, #19
   1f70c:	18fb      	adds	r3, r7, r3
   1f70e:	781b      	ldrb	r3, [r3, #0]
   1f710:	001a      	movs	r2, r3
   1f712:	2308      	movs	r3, #8
   1f714:	4013      	ands	r3, r2
   1f716:	d004      	beq.n	1f722 <sd_mmc_spi_adtc_start+0x12a>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%02x, R1_SPI_COM_CRC\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
   1f718:	4b33      	ldr	r3, [pc, #204]	; (1f7e8 <sd_mmc_spi_adtc_start+0x1f0>)
   1f71a:	2206      	movs	r2, #6
   1f71c:	701a      	strb	r2, [r3, #0]
		return false;
   1f71e:	2300      	movs	r3, #0
   1f720:	e05d      	b.n	1f7de <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
   1f722:	2313      	movs	r3, #19
   1f724:	18fb      	adds	r3, r7, r3
   1f726:	781b      	ldrb	r3, [r3, #0]
   1f728:	001a      	movs	r2, r3
   1f72a:	2304      	movs	r3, #4
   1f72c:	4013      	ands	r3, r2
   1f72e:	d004      	beq.n	1f73a <sd_mmc_spi_adtc_start+0x142>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 ILLEGAL_COMMAND\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
   1f730:	4b2d      	ldr	r3, [pc, #180]	; (1f7e8 <sd_mmc_spi_adtc_start+0x1f0>)
   1f732:	2209      	movs	r2, #9
   1f734:	701a      	strb	r2, [r3, #0]
		return false;
   1f736:	2300      	movs	r3, #0
   1f738:	e051      	b.n	1f7de <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & ~R1_SPI_IDLE) {
   1f73a:	2313      	movs	r3, #19
   1f73c:	18fb      	adds	r3, r7, r3
   1f73e:	781b      	ldrb	r3, [r3, #0]
   1f740:	001a      	movs	r2, r3
   1f742:	2301      	movs	r3, #1
   1f744:	439a      	bics	r2, r3
   1f746:	1e13      	subs	r3, r2, #0
   1f748:	d004      	beq.n	1f754 <sd_mmc_spi_adtc_start+0x15c>
		// Other error
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 error\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   1f74a:	4b27      	ldr	r3, [pc, #156]	; (1f7e8 <sd_mmc_spi_adtc_start+0x1f0>)
   1f74c:	2201      	movs	r2, #1
   1f74e:	701a      	strb	r2, [r3, #0]
		return false;
   1f750:	2300      	movs	r3, #0
   1f752:	e044      	b.n	1f7de <sd_mmc_spi_adtc_start+0x1e6>
	}

	// Manage other responses
	if (cmd & SDMMC_RESP_BUSY) {
   1f754:	68fa      	ldr	r2, [r7, #12]
   1f756:	2380      	movs	r3, #128	; 0x80
   1f758:	019b      	lsls	r3, r3, #6
   1f75a:	4013      	ands	r3, r2
   1f75c:	d00d      	beq.n	1f77a <sd_mmc_spi_adtc_start+0x182>
		if (!sd_mmc_spi_wait_busy()) {
   1f75e:	4b28      	ldr	r3, [pc, #160]	; (1f800 <sd_mmc_spi_adtc_start+0x208>)
   1f760:	4798      	blx	r3
   1f762:	0003      	movs	r3, r0
   1f764:	001a      	movs	r2, r3
   1f766:	2301      	movs	r3, #1
   1f768:	4053      	eors	r3, r2
   1f76a:	b2db      	uxtb	r3, r3
   1f76c:	2b00      	cmp	r3, #0
   1f76e:	d004      	beq.n	1f77a <sd_mmc_spi_adtc_start+0x182>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
   1f770:	4b1d      	ldr	r3, [pc, #116]	; (1f7e8 <sd_mmc_spi_adtc_start+0x1f0>)
   1f772:	2203      	movs	r2, #3
   1f774:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, Busy signal always high\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			return false;
   1f776:	2300      	movs	r3, #0
   1f778:	e031      	b.n	1f7de <sd_mmc_spi_adtc_start+0x1e6>
		}
	}
	if (cmd & SDMMC_RESP_8) {
   1f77a:	68fa      	ldr	r2, [r7, #12]
   1f77c:	2380      	movs	r3, #128	; 0x80
   1f77e:	009b      	lsls	r3, r3, #2
   1f780:	4013      	ands	r3, r2
   1f782:	d00e      	beq.n	1f7a2 <sd_mmc_spi_adtc_start+0x1aa>
		sd_mmc_spi_response_32 = 0;
   1f784:	4b1d      	ldr	r3, [pc, #116]	; (1f7fc <sd_mmc_spi_adtc_start+0x204>)
   1f786:	2200      	movs	r2, #0
   1f788:	601a      	str	r2, [r3, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
   1f78a:	231c      	movs	r3, #28
   1f78c:	18fb      	adds	r3, r7, r3
   1f78e:	881b      	ldrh	r3, [r3, #0]
   1f790:	491a      	ldr	r1, [pc, #104]	; (1f7fc <sd_mmc_spi_adtc_start+0x204>)
   1f792:	4817      	ldr	r0, [pc, #92]	; (1f7f0 <sd_mmc_spi_adtc_start+0x1f8>)
   1f794:	2201      	movs	r2, #1
   1f796:	4c18      	ldr	r4, [pc, #96]	; (1f7f8 <sd_mmc_spi_adtc_start+0x200>)
   1f798:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = le32_to_cpu(sd_mmc_spi_response_32);
   1f79a:	4b18      	ldr	r3, [pc, #96]	; (1f7fc <sd_mmc_spi_adtc_start+0x204>)
   1f79c:	681a      	ldr	r2, [r3, #0]
   1f79e:	4b17      	ldr	r3, [pc, #92]	; (1f7fc <sd_mmc_spi_adtc_start+0x204>)
   1f7a0:	601a      	str	r2, [r3, #0]
	}
	if (cmd & SDMMC_RESP_32) {
   1f7a2:	68fa      	ldr	r2, [r7, #12]
   1f7a4:	2380      	movs	r3, #128	; 0x80
   1f7a6:	00db      	lsls	r3, r3, #3
   1f7a8:	4013      	ands	r3, r2
   1f7aa:	d00c      	beq.n	1f7c6 <sd_mmc_spi_adtc_start+0x1ce>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
   1f7ac:	231c      	movs	r3, #28
   1f7ae:	18fb      	adds	r3, r7, r3
   1f7b0:	881b      	ldrh	r3, [r3, #0]
   1f7b2:	4912      	ldr	r1, [pc, #72]	; (1f7fc <sd_mmc_spi_adtc_start+0x204>)
   1f7b4:	480e      	ldr	r0, [pc, #56]	; (1f7f0 <sd_mmc_spi_adtc_start+0x1f8>)
   1f7b6:	2204      	movs	r2, #4
   1f7b8:	4c0f      	ldr	r4, [pc, #60]	; (1f7f8 <sd_mmc_spi_adtc_start+0x200>)
   1f7ba:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
   1f7bc:	4b0f      	ldr	r3, [pc, #60]	; (1f7fc <sd_mmc_spi_adtc_start+0x204>)
   1f7be:	681b      	ldr	r3, [r3, #0]
   1f7c0:	ba1a      	rev	r2, r3
   1f7c2:	4b0e      	ldr	r3, [pc, #56]	; (1f7fc <sd_mmc_spi_adtc_start+0x204>)
   1f7c4:	601a      	str	r2, [r3, #0]
	}

	sd_mmc_spi_block_size = block_size;
   1f7c6:	4b0f      	ldr	r3, [pc, #60]	; (1f804 <sd_mmc_spi_adtc_start+0x20c>)
   1f7c8:	1dba      	adds	r2, r7, #6
   1f7ca:	8812      	ldrh	r2, [r2, #0]
   1f7cc:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
   1f7ce:	4b0e      	ldr	r3, [pc, #56]	; (1f808 <sd_mmc_spi_adtc_start+0x210>)
   1f7d0:	1d3a      	adds	r2, r7, #4
   1f7d2:	8812      	ldrh	r2, [r2, #0]
   1f7d4:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
   1f7d6:	4b0d      	ldr	r3, [pc, #52]	; (1f80c <sd_mmc_spi_adtc_start+0x214>)
   1f7d8:	2200      	movs	r2, #0
   1f7da:	601a      	str	r2, [r3, #0]
	return true; // Command complete
   1f7dc:	2301      	movs	r3, #1
}
   1f7de:	0018      	movs	r0, r3
   1f7e0:	46bd      	mov	sp, r7
   1f7e2:	b009      	add	sp, #36	; 0x24
   1f7e4:	bd90      	pop	{r4, r7, pc}
   1f7e6:	46c0      	nop			; (mov r8, r8)
   1f7e8:	20003caf 	.word	0x20003caf
   1f7ec:	0001f161 	.word	0x0001f161
   1f7f0:	20003c70 	.word	0x20003c70
   1f7f4:	00027c21 	.word	0x00027c21
   1f7f8:	000279fd 	.word	0x000279fd
   1f7fc:	20003cb0 	.word	0x20003cb0
   1f800:	0001f21d 	.word	0x0001f21d
   1f804:	20003cb8 	.word	0x20003cb8
   1f808:	20003cba 	.word	0x20003cba
   1f80c:	20003cb4 	.word	0x20003cb4

0001f810 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
   1f810:	b580      	push	{r7, lr}
   1f812:	af00      	add	r7, sp, #0
	return sd_mmc_spi_response_32;
   1f814:	4b02      	ldr	r3, [pc, #8]	; (1f820 <sd_mmc_spi_get_response+0x10>)
   1f816:	681b      	ldr	r3, [r3, #0]
}
   1f818:	0018      	movs	r0, r3
   1f81a:	46bd      	mov	sp, r7
   1f81c:	bd80      	pop	{r7, pc}
   1f81e:	46c0      	nop			; (mov r8, r8)
   1f820:	20003cb0 	.word	0x20003cb0

0001f824 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
   1f824:	b590      	push	{r4, r7, lr}
   1f826:	b085      	sub	sp, #20
   1f828:	af00      	add	r7, sp, #0
   1f82a:	6078      	str	r0, [r7, #4]
	uint16_t dummy = 0xFF;
   1f82c:	230e      	movs	r3, #14
   1f82e:	18fb      	adds	r3, r7, r3
   1f830:	22ff      	movs	r2, #255	; 0xff
   1f832:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1f834:	4b1c      	ldr	r3, [pc, #112]	; (1f8a8 <sd_mmc_spi_read_word+0x84>)
   1f836:	2200      	movs	r2, #0
   1f838:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   1f83a:	4b1c      	ldr	r3, [pc, #112]	; (1f8ac <sd_mmc_spi_read_word+0x88>)
   1f83c:	681a      	ldr	r2, [r3, #0]
   1f83e:	4b1c      	ldr	r3, [pc, #112]	; (1f8b0 <sd_mmc_spi_read_word+0x8c>)
   1f840:	881b      	ldrh	r3, [r3, #0]
   1f842:	0019      	movs	r1, r3
   1f844:	4b1b      	ldr	r3, [pc, #108]	; (1f8b4 <sd_mmc_spi_read_word+0x90>)
   1f846:	0010      	movs	r0, r2
   1f848:	4798      	blx	r3
   1f84a:	1e0b      	subs	r3, r1, #0
   1f84c:	d10a      	bne.n	1f864 <sd_mmc_spi_read_word+0x40>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
   1f84e:	4b1a      	ldr	r3, [pc, #104]	; (1f8b8 <sd_mmc_spi_read_word+0x94>)
   1f850:	4798      	blx	r3
   1f852:	0003      	movs	r3, r0
   1f854:	001a      	movs	r2, r3
   1f856:	2301      	movs	r3, #1
   1f858:	4053      	eors	r3, r2
   1f85a:	b2db      	uxtb	r3, r3
   1f85c:	2b00      	cmp	r3, #0
   1f85e:	d001      	beq.n	1f864 <sd_mmc_spi_read_word+0x40>
			return false;
   1f860:	2300      	movs	r3, #0
   1f862:	e01d      	b.n	1f8a0 <sd_mmc_spi_read_word+0x7c>
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
   1f864:	230e      	movs	r3, #14
   1f866:	18fb      	adds	r3, r7, r3
   1f868:	881b      	ldrh	r3, [r3, #0]
   1f86a:	1d39      	adds	r1, r7, #4
   1f86c:	4813      	ldr	r0, [pc, #76]	; (1f8bc <sd_mmc_spi_read_word+0x98>)
   1f86e:	2204      	movs	r2, #4
   1f870:	4c13      	ldr	r4, [pc, #76]	; (1f8c0 <sd_mmc_spi_read_word+0x9c>)
   1f872:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
   1f874:	687b      	ldr	r3, [r7, #4]
   1f876:	687a      	ldr	r2, [r7, #4]
   1f878:	6812      	ldr	r2, [r2, #0]
   1f87a:	601a      	str	r2, [r3, #0]
	sd_mmc_spi_transfert_pos += 4;
   1f87c:	4b0b      	ldr	r3, [pc, #44]	; (1f8ac <sd_mmc_spi_read_word+0x88>)
   1f87e:	681b      	ldr	r3, [r3, #0]
   1f880:	1d1a      	adds	r2, r3, #4
   1f882:	4b0a      	ldr	r3, [pc, #40]	; (1f8ac <sd_mmc_spi_read_word+0x88>)
   1f884:	601a      	str	r2, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   1f886:	4b09      	ldr	r3, [pc, #36]	; (1f8ac <sd_mmc_spi_read_word+0x88>)
   1f888:	681a      	ldr	r2, [r3, #0]
   1f88a:	4b09      	ldr	r3, [pc, #36]	; (1f8b0 <sd_mmc_spi_read_word+0x8c>)
   1f88c:	881b      	ldrh	r3, [r3, #0]
   1f88e:	0019      	movs	r1, r3
   1f890:	4b08      	ldr	r3, [pc, #32]	; (1f8b4 <sd_mmc_spi_read_word+0x90>)
   1f892:	0010      	movs	r0, r2
   1f894:	4798      	blx	r3
   1f896:	1e0b      	subs	r3, r1, #0
   1f898:	d101      	bne.n	1f89e <sd_mmc_spi_read_word+0x7a>
		// End of block
		sd_mmc_spi_stop_read_block();
   1f89a:	4b0a      	ldr	r3, [pc, #40]	; (1f8c4 <sd_mmc_spi_read_word+0xa0>)
   1f89c:	4798      	blx	r3
	}
	return true;
   1f89e:	2301      	movs	r3, #1
}
   1f8a0:	0018      	movs	r0, r3
   1f8a2:	46bd      	mov	sp, r7
   1f8a4:	b005      	add	sp, #20
   1f8a6:	bd90      	pop	{r4, r7, pc}
   1f8a8:	20003caf 	.word	0x20003caf
   1f8ac:	20003cb4 	.word	0x20003cb4
   1f8b0:	20003cb8 	.word	0x20003cb8
   1f8b4:	000324d5 	.word	0x000324d5
   1f8b8:	0001f289 	.word	0x0001f289
   1f8bc:	20003c70 	.word	0x20003c70
   1f8c0:	000279fd 	.word	0x000279fd
   1f8c4:	0001f30d 	.word	0x0001f30d

0001f8c8 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
   1f8c8:	b590      	push	{r4, r7, lr}
   1f8ca:	b085      	sub	sp, #20
   1f8cc:	af00      	add	r7, sp, #0
   1f8ce:	6078      	str	r0, [r7, #4]
   1f8d0:	000a      	movs	r2, r1
   1f8d2:	1cbb      	adds	r3, r7, #2
   1f8d4:	801a      	strh	r2, [r3, #0]
	uint32_t pos;
	uint16_t dummy = 0xFF;
   1f8d6:	230a      	movs	r3, #10
   1f8d8:	18fb      	adds	r3, r7, r3
   1f8da:	22ff      	movs	r2, #255	; 0xff
   1f8dc:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1f8de:	4b1c      	ldr	r3, [pc, #112]	; (1f950 <sd_mmc_spi_start_read_blocks+0x88>)
   1f8e0:	2200      	movs	r2, #0
   1f8e2:	701a      	strb	r2, [r3, #0]
	pos = 0;
   1f8e4:	2300      	movs	r3, #0
   1f8e6:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
   1f8e8:	e025      	b.n	1f936 <sd_mmc_spi_start_read_blocks+0x6e>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
   1f8ea:	4b1a      	ldr	r3, [pc, #104]	; (1f954 <sd_mmc_spi_start_read_blocks+0x8c>)
   1f8ec:	4798      	blx	r3
   1f8ee:	0003      	movs	r3, r0
   1f8f0:	001a      	movs	r2, r3
   1f8f2:	2301      	movs	r3, #1
   1f8f4:	4053      	eors	r3, r2
   1f8f6:	b2db      	uxtb	r3, r3
   1f8f8:	2b00      	cmp	r3, #0
   1f8fa:	d001      	beq.n	1f900 <sd_mmc_spi_start_read_blocks+0x38>
			return false;
   1f8fc:	2300      	movs	r3, #0
   1f8fe:	e022      	b.n	1f946 <sd_mmc_spi_start_read_blocks+0x7e>
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
   1f900:	687a      	ldr	r2, [r7, #4]
   1f902:	68fb      	ldr	r3, [r7, #12]
   1f904:	18d1      	adds	r1, r2, r3
   1f906:	4b14      	ldr	r3, [pc, #80]	; (1f958 <sd_mmc_spi_start_read_blocks+0x90>)
   1f908:	881a      	ldrh	r2, [r3, #0]
   1f90a:	230a      	movs	r3, #10
   1f90c:	18fb      	adds	r3, r7, r3
   1f90e:	881b      	ldrh	r3, [r3, #0]
   1f910:	4812      	ldr	r0, [pc, #72]	; (1f95c <sd_mmc_spi_start_read_blocks+0x94>)
   1f912:	4c13      	ldr	r4, [pc, #76]	; (1f960 <sd_mmc_spi_start_read_blocks+0x98>)
   1f914:	47a0      	blx	r4
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
   1f916:	4b10      	ldr	r3, [pc, #64]	; (1f958 <sd_mmc_spi_start_read_blocks+0x90>)
   1f918:	881b      	ldrh	r3, [r3, #0]
   1f91a:	001a      	movs	r2, r3
   1f91c:	68fb      	ldr	r3, [r7, #12]
   1f91e:	189b      	adds	r3, r3, r2
   1f920:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   1f922:	4b0d      	ldr	r3, [pc, #52]	; (1f958 <sd_mmc_spi_start_read_blocks+0x90>)
   1f924:	881b      	ldrh	r3, [r3, #0]
   1f926:	001a      	movs	r2, r3
   1f928:	4b0e      	ldr	r3, [pc, #56]	; (1f964 <sd_mmc_spi_start_read_blocks+0x9c>)
   1f92a:	681b      	ldr	r3, [r3, #0]
   1f92c:	18d2      	adds	r2, r2, r3
   1f92e:	4b0d      	ldr	r3, [pc, #52]	; (1f964 <sd_mmc_spi_start_read_blocks+0x9c>)
   1f930:	601a      	str	r2, [r3, #0]

		sd_mmc_spi_stop_read_block();
   1f932:	4b0d      	ldr	r3, [pc, #52]	; (1f968 <sd_mmc_spi_start_read_blocks+0xa0>)
   1f934:	4798      	blx	r3
	while (nb_block--) {
   1f936:	1cbb      	adds	r3, r7, #2
   1f938:	881b      	ldrh	r3, [r3, #0]
   1f93a:	1cba      	adds	r2, r7, #2
   1f93c:	1e59      	subs	r1, r3, #1
   1f93e:	8011      	strh	r1, [r2, #0]
   1f940:	2b00      	cmp	r3, #0
   1f942:	d1d2      	bne.n	1f8ea <sd_mmc_spi_start_read_blocks+0x22>
	}
	return true;
   1f944:	2301      	movs	r3, #1
}
   1f946:	0018      	movs	r0, r3
   1f948:	46bd      	mov	sp, r7
   1f94a:	b005      	add	sp, #20
   1f94c:	bd90      	pop	{r4, r7, pc}
   1f94e:	46c0      	nop			; (mov r8, r8)
   1f950:	20003caf 	.word	0x20003caf
   1f954:	0001f289 	.word	0x0001f289
   1f958:	20003cb8 	.word	0x20003cb8
   1f95c:	20003c70 	.word	0x20003c70
   1f960:	000279fd 	.word	0x000279fd
   1f964:	20003cb4 	.word	0x20003cb4
   1f968:	0001f30d 	.word	0x0001f30d

0001f96c <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
   1f96c:	b580      	push	{r7, lr}
   1f96e:	af00      	add	r7, sp, #0
	return true;
   1f970:	2301      	movs	r3, #1
}
   1f972:	0018      	movs	r0, r3
   1f974:	46bd      	mov	sp, r7
   1f976:	bd80      	pop	{r7, pc}

0001f978 <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
   1f978:	b580      	push	{r7, lr}
   1f97a:	b084      	sub	sp, #16
   1f97c:	af00      	add	r7, sp, #0
   1f97e:	6078      	str	r0, [r7, #4]
   1f980:	000a      	movs	r2, r1
   1f982:	1cbb      	adds	r3, r7, #2
   1f984:	801a      	strh	r2, [r3, #0]
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1f986:	4b24      	ldr	r3, [pc, #144]	; (1fa18 <sd_mmc_spi_start_write_blocks+0xa0>)
   1f988:	2200      	movs	r2, #0
   1f98a:	701a      	strb	r2, [r3, #0]
	pos = 0;
   1f98c:	2300      	movs	r3, #0
   1f98e:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
   1f990:	e035      	b.n	1f9fe <sd_mmc_spi_start_write_blocks+0x86>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
   1f992:	4b22      	ldr	r3, [pc, #136]	; (1fa1c <sd_mmc_spi_start_write_blocks+0xa4>)
   1f994:	4798      	blx	r3

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
   1f996:	687a      	ldr	r2, [r7, #4]
   1f998:	68fb      	ldr	r3, [r7, #12]
   1f99a:	18d1      	adds	r1, r2, r3
   1f99c:	4b20      	ldr	r3, [pc, #128]	; (1fa20 <sd_mmc_spi_start_write_blocks+0xa8>)
   1f99e:	881a      	ldrh	r2, [r3, #0]
   1f9a0:	4b20      	ldr	r3, [pc, #128]	; (1fa24 <sd_mmc_spi_start_write_blocks+0xac>)
   1f9a2:	0018      	movs	r0, r3
   1f9a4:	4b20      	ldr	r3, [pc, #128]	; (1fa28 <sd_mmc_spi_start_write_blocks+0xb0>)
   1f9a6:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
   1f9a8:	4b1d      	ldr	r3, [pc, #116]	; (1fa20 <sd_mmc_spi_start_write_blocks+0xa8>)
   1f9aa:	881b      	ldrh	r3, [r3, #0]
   1f9ac:	001a      	movs	r2, r3
   1f9ae:	68fb      	ldr	r3, [r7, #12]
   1f9b0:	189b      	adds	r3, r3, r2
   1f9b2:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   1f9b4:	4b1a      	ldr	r3, [pc, #104]	; (1fa20 <sd_mmc_spi_start_write_blocks+0xa8>)
   1f9b6:	881b      	ldrh	r3, [r3, #0]
   1f9b8:	001a      	movs	r2, r3
   1f9ba:	4b1c      	ldr	r3, [pc, #112]	; (1fa2c <sd_mmc_spi_start_write_blocks+0xb4>)
   1f9bc:	681b      	ldr	r3, [r3, #0]
   1f9be:	18d2      	adds	r2, r2, r3
   1f9c0:	4b1a      	ldr	r3, [pc, #104]	; (1fa2c <sd_mmc_spi_start_write_blocks+0xb4>)
   1f9c2:	601a      	str	r2, [r3, #0]

		if (!sd_mmc_spi_stop_write_block()) {
   1f9c4:	4b1a      	ldr	r3, [pc, #104]	; (1fa30 <sd_mmc_spi_start_write_blocks+0xb8>)
   1f9c6:	4798      	blx	r3
   1f9c8:	0003      	movs	r3, r0
   1f9ca:	001a      	movs	r2, r3
   1f9cc:	2301      	movs	r3, #1
   1f9ce:	4053      	eors	r3, r2
   1f9d0:	b2db      	uxtb	r3, r3
   1f9d2:	2b00      	cmp	r3, #0
   1f9d4:	d001      	beq.n	1f9da <sd_mmc_spi_start_write_blocks+0x62>
			return false;
   1f9d6:	2300      	movs	r3, #0
   1f9d8:	e019      	b.n	1fa0e <sd_mmc_spi_start_write_blocks+0x96>
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
   1f9da:	1cbb      	adds	r3, r7, #2
   1f9dc:	881b      	ldrh	r3, [r3, #0]
   1f9de:	2b00      	cmp	r3, #0
   1f9e0:	d00d      	beq.n	1f9fe <sd_mmc_spi_start_write_blocks+0x86>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
   1f9e2:	4b14      	ldr	r3, [pc, #80]	; (1fa34 <sd_mmc_spi_start_write_blocks+0xbc>)
   1f9e4:	4798      	blx	r3
   1f9e6:	0003      	movs	r3, r0
   1f9e8:	001a      	movs	r2, r3
   1f9ea:	2301      	movs	r3, #1
   1f9ec:	4053      	eors	r3, r2
   1f9ee:	b2db      	uxtb	r3, r3
   1f9f0:	2b00      	cmp	r3, #0
   1f9f2:	d004      	beq.n	1f9fe <sd_mmc_spi_start_write_blocks+0x86>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   1f9f4:	4b08      	ldr	r3, [pc, #32]	; (1fa18 <sd_mmc_spi_start_write_blocks+0xa0>)
   1f9f6:	2205      	movs	r2, #5
   1f9f8:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
   1f9fa:	2300      	movs	r3, #0
   1f9fc:	e007      	b.n	1fa0e <sd_mmc_spi_start_write_blocks+0x96>
	while (nb_block--) {
   1f9fe:	1cbb      	adds	r3, r7, #2
   1fa00:	881b      	ldrh	r3, [r3, #0]
   1fa02:	1cba      	adds	r2, r7, #2
   1fa04:	1e59      	subs	r1, r3, #1
   1fa06:	8011      	strh	r1, [r2, #0]
   1fa08:	2b00      	cmp	r3, #0
   1fa0a:	d1c2      	bne.n	1f992 <sd_mmc_spi_start_write_blocks+0x1a>
			}
		}
	}
	return true;
   1fa0c:	2301      	movs	r3, #1
}
   1fa0e:	0018      	movs	r0, r3
   1fa10:	46bd      	mov	sp, r7
   1fa12:	b004      	add	sp, #16
   1fa14:	bd80      	pop	{r7, pc}
   1fa16:	46c0      	nop			; (mov r8, r8)
   1fa18:	20003caf 	.word	0x20003caf
   1fa1c:	0001f339 	.word	0x0001f339
   1fa20:	20003cb8 	.word	0x20003cb8
   1fa24:	20003c70 	.word	0x20003c70
   1fa28:	00027c21 	.word	0x00027c21
   1fa2c:	20003cb4 	.word	0x20003cb4
   1fa30:	0001f389 	.word	0x0001f389
   1fa34:	0001f21d 	.word	0x0001f21d

0001fa38 <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
   1fa38:	b580      	push	{r7, lr}
   1fa3a:	af00      	add	r7, sp, #0
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
   1fa3c:	4b09      	ldr	r3, [pc, #36]	; (1fa64 <sd_mmc_spi_wait_end_of_write_blocks+0x2c>)
   1fa3e:	4798      	blx	r3
   1fa40:	0003      	movs	r3, r0
   1fa42:	001a      	movs	r2, r3
   1fa44:	2301      	movs	r3, #1
   1fa46:	4053      	eors	r3, r2
   1fa48:	b2db      	uxtb	r3, r3
   1fa4a:	2b00      	cmp	r3, #0
   1fa4c:	d004      	beq.n	1fa58 <sd_mmc_spi_wait_end_of_write_blocks+0x20>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   1fa4e:	4b06      	ldr	r3, [pc, #24]	; (1fa68 <sd_mmc_spi_wait_end_of_write_blocks+0x30>)
   1fa50:	2205      	movs	r2, #5
   1fa52:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
   1fa54:	2300      	movs	r3, #0
   1fa56:	e002      	b.n	1fa5e <sd_mmc_spi_wait_end_of_write_blocks+0x26>
	}
	return sd_mmc_spi_stop_multiwrite_block();
   1fa58:	4b04      	ldr	r3, [pc, #16]	; (1fa6c <sd_mmc_spi_wait_end_of_write_blocks+0x34>)
   1fa5a:	4798      	blx	r3
   1fa5c:	0003      	movs	r3, r0
}
   1fa5e:	0018      	movs	r0, r3
   1fa60:	46bd      	mov	sp, r7
   1fa62:	bd80      	pop	{r7, pc}
   1fa64:	0001f21d 	.word	0x0001f21d
   1fa68:	20003caf 	.word	0x20003caf
   1fa6c:	0001f41d 	.word	0x0001f41d

0001fa70 <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
   1fa70:	b580      	push	{r7, lr}
   1fa72:	b082      	sub	sp, #8
   1fa74:	af00      	add	r7, sp, #0
   1fa76:	6078      	str	r0, [r7, #4]
	if (n > 0) {
   1fa78:	687b      	ldr	r3, [r7, #4]
   1fa7a:	2b00      	cmp	r3, #0
   1fa7c:	d00c      	beq.n	1fa98 <delay_cycles+0x28>
		SysTick->LOAD = n;
   1fa7e:	4b08      	ldr	r3, [pc, #32]	; (1faa0 <delay_cycles+0x30>)
   1fa80:	687a      	ldr	r2, [r7, #4]
   1fa82:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
   1fa84:	4b06      	ldr	r3, [pc, #24]	; (1faa0 <delay_cycles+0x30>)
   1fa86:	2200      	movs	r2, #0
   1fa88:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
   1fa8a:	46c0      	nop			; (mov r8, r8)
   1fa8c:	4b04      	ldr	r3, [pc, #16]	; (1faa0 <delay_cycles+0x30>)
   1fa8e:	681a      	ldr	r2, [r3, #0]
   1fa90:	2380      	movs	r3, #128	; 0x80
   1fa92:	025b      	lsls	r3, r3, #9
   1fa94:	4013      	ands	r3, r2
   1fa96:	d0f9      	beq.n	1fa8c <delay_cycles+0x1c>
		};
	}
}
   1fa98:	46c0      	nop			; (mov r8, r8)
   1fa9a:	46bd      	mov	sp, r7
   1fa9c:	b002      	add	sp, #8
   1fa9e:	bd80      	pop	{r7, pc}
   1faa0:	e000e010 	.word	0xe000e010

0001faa4 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
   1faa4:	b580      	push	{r7, lr}
   1faa6:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
   1faa8:	2000      	movs	r0, #0
   1faaa:	4b0f      	ldr	r3, [pc, #60]	; (1fae8 <delay_init+0x44>)
   1faac:	4798      	blx	r3
   1faae:	0002      	movs	r2, r0
   1fab0:	4b0e      	ldr	r3, [pc, #56]	; (1faec <delay_init+0x48>)
   1fab2:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
   1fab4:	4b0d      	ldr	r3, [pc, #52]	; (1faec <delay_init+0x48>)
   1fab6:	6818      	ldr	r0, [r3, #0]
   1fab8:	4b0d      	ldr	r3, [pc, #52]	; (1faf0 <delay_init+0x4c>)
   1faba:	22fa      	movs	r2, #250	; 0xfa
   1fabc:	0091      	lsls	r1, r2, #2
   1fabe:	4798      	blx	r3
   1fac0:	0003      	movs	r3, r0
   1fac2:	001a      	movs	r2, r3
   1fac4:	4b09      	ldr	r3, [pc, #36]	; (1faec <delay_init+0x48>)
   1fac6:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
   1fac8:	4b08      	ldr	r3, [pc, #32]	; (1faec <delay_init+0x48>)
   1faca:	6818      	ldr	r0, [r3, #0]
   1facc:	4b08      	ldr	r3, [pc, #32]	; (1faf0 <delay_init+0x4c>)
   1face:	22fa      	movs	r2, #250	; 0xfa
   1fad0:	0091      	lsls	r1, r2, #2
   1fad2:	4798      	blx	r3
   1fad4:	0003      	movs	r3, r0
   1fad6:	001a      	movs	r2, r3
   1fad8:	4b06      	ldr	r3, [pc, #24]	; (1faf4 <delay_init+0x50>)
   1fada:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
   1fadc:	4b06      	ldr	r3, [pc, #24]	; (1faf8 <delay_init+0x54>)
   1fade:	2205      	movs	r2, #5
   1fae0:	601a      	str	r2, [r3, #0]
}
   1fae2:	46c0      	nop			; (mov r8, r8)
   1fae4:	46bd      	mov	sp, r7
   1fae6:	bd80      	pop	{r7, pc}
   1fae8:	000297a5 	.word	0x000297a5
   1faec:	200000d4 	.word	0x200000d4
   1faf0:	000323c9 	.word	0x000323c9
   1faf4:	200000d8 	.word	0x200000d8
   1faf8:	e000e010 	.word	0xe000e010

0001fafc <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
   1fafc:	b580      	push	{r7, lr}
   1fafe:	b082      	sub	sp, #8
   1fb00:	af00      	add	r7, sp, #0
   1fb02:	6078      	str	r0, [r7, #4]
	while (n--) {
   1fb04:	e004      	b.n	1fb10 <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
   1fb06:	4b07      	ldr	r3, [pc, #28]	; (1fb24 <delay_cycles_ms+0x28>)
   1fb08:	681b      	ldr	r3, [r3, #0]
   1fb0a:	0018      	movs	r0, r3
   1fb0c:	4b06      	ldr	r3, [pc, #24]	; (1fb28 <delay_cycles_ms+0x2c>)
   1fb0e:	4798      	blx	r3
	while (n--) {
   1fb10:	687b      	ldr	r3, [r7, #4]
   1fb12:	1e5a      	subs	r2, r3, #1
   1fb14:	607a      	str	r2, [r7, #4]
   1fb16:	2b00      	cmp	r3, #0
   1fb18:	d1f5      	bne.n	1fb06 <delay_cycles_ms+0xa>
	}
}
   1fb1a:	46c0      	nop			; (mov r8, r8)
   1fb1c:	46bd      	mov	sp, r7
   1fb1e:	b002      	add	sp, #8
   1fb20:	bd80      	pop	{r7, pc}
   1fb22:	46c0      	nop			; (mov r8, r8)
   1fb24:	200000d4 	.word	0x200000d4
   1fb28:	0001fa71 	.word	0x0001fa71

0001fb2c <system_pinmux_get_group_from_gpio_pin>:
{
   1fb2c:	b580      	push	{r7, lr}
   1fb2e:	b084      	sub	sp, #16
   1fb30:	af00      	add	r7, sp, #0
   1fb32:	0002      	movs	r2, r0
   1fb34:	1dfb      	adds	r3, r7, #7
   1fb36:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   1fb38:	230f      	movs	r3, #15
   1fb3a:	18fb      	adds	r3, r7, r3
   1fb3c:	1dfa      	adds	r2, r7, #7
   1fb3e:	7812      	ldrb	r2, [r2, #0]
   1fb40:	09d2      	lsrs	r2, r2, #7
   1fb42:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   1fb44:	230e      	movs	r3, #14
   1fb46:	18fb      	adds	r3, r7, r3
   1fb48:	1dfa      	adds	r2, r7, #7
   1fb4a:	7812      	ldrb	r2, [r2, #0]
   1fb4c:	0952      	lsrs	r2, r2, #5
   1fb4e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   1fb50:	4b0d      	ldr	r3, [pc, #52]	; (1fb88 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   1fb52:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   1fb54:	230f      	movs	r3, #15
   1fb56:	18fb      	adds	r3, r7, r3
   1fb58:	781b      	ldrb	r3, [r3, #0]
   1fb5a:	2b00      	cmp	r3, #0
   1fb5c:	d10f      	bne.n	1fb7e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1fb5e:	230f      	movs	r3, #15
   1fb60:	18fb      	adds	r3, r7, r3
   1fb62:	781b      	ldrb	r3, [r3, #0]
   1fb64:	009b      	lsls	r3, r3, #2
   1fb66:	2210      	movs	r2, #16
   1fb68:	4694      	mov	ip, r2
   1fb6a:	44bc      	add	ip, r7
   1fb6c:	4463      	add	r3, ip
   1fb6e:	3b08      	subs	r3, #8
   1fb70:	681a      	ldr	r2, [r3, #0]
   1fb72:	230e      	movs	r3, #14
   1fb74:	18fb      	adds	r3, r7, r3
   1fb76:	781b      	ldrb	r3, [r3, #0]
   1fb78:	01db      	lsls	r3, r3, #7
   1fb7a:	18d3      	adds	r3, r2, r3
   1fb7c:	e000      	b.n	1fb80 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   1fb7e:	2300      	movs	r3, #0
}
   1fb80:	0018      	movs	r0, r3
   1fb82:	46bd      	mov	sp, r7
   1fb84:	b004      	add	sp, #16
   1fb86:	bd80      	pop	{r7, pc}
   1fb88:	41004400 	.word	0x41004400

0001fb8c <system_interrupt_enable_global>:
{
   1fb8c:	b580      	push	{r7, lr}
   1fb8e:	af00      	add	r7, sp, #0
	cpu_irq_enable();
   1fb90:	4b04      	ldr	r3, [pc, #16]	; (1fba4 <system_interrupt_enable_global+0x18>)
   1fb92:	2201      	movs	r2, #1
   1fb94:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   1fb96:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   1fb9a:	b662      	cpsie	i
}
   1fb9c:	46c0      	nop			; (mov r8, r8)
   1fb9e:	46bd      	mov	sp, r7
   1fba0:	bd80      	pop	{r7, pc}
   1fba2:	46c0      	nop			; (mov r8, r8)
   1fba4:	200000de 	.word	0x200000de

0001fba8 <port_get_group_from_gpio_pin>:
{
   1fba8:	b580      	push	{r7, lr}
   1fbaa:	b082      	sub	sp, #8
   1fbac:	af00      	add	r7, sp, #0
   1fbae:	0002      	movs	r2, r0
   1fbb0:	1dfb      	adds	r3, r7, #7
   1fbb2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   1fbb4:	1dfb      	adds	r3, r7, #7
   1fbb6:	781b      	ldrb	r3, [r3, #0]
   1fbb8:	0018      	movs	r0, r3
   1fbba:	4b03      	ldr	r3, [pc, #12]	; (1fbc8 <port_get_group_from_gpio_pin+0x20>)
   1fbbc:	4798      	blx	r3
   1fbbe:	0003      	movs	r3, r0
}
   1fbc0:	0018      	movs	r0, r3
   1fbc2:	46bd      	mov	sp, r7
   1fbc4:	b002      	add	sp, #8
   1fbc6:	bd80      	pop	{r7, pc}
   1fbc8:	0001fb2d 	.word	0x0001fb2d

0001fbcc <port_get_config_defaults>:
{
   1fbcc:	b580      	push	{r7, lr}
   1fbce:	b082      	sub	sp, #8
   1fbd0:	af00      	add	r7, sp, #0
   1fbd2:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   1fbd4:	687b      	ldr	r3, [r7, #4]
   1fbd6:	2200      	movs	r2, #0
   1fbd8:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   1fbda:	687b      	ldr	r3, [r7, #4]
   1fbdc:	2201      	movs	r2, #1
   1fbde:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   1fbe0:	687b      	ldr	r3, [r7, #4]
   1fbe2:	2200      	movs	r2, #0
   1fbe4:	709a      	strb	r2, [r3, #2]
}
   1fbe6:	46c0      	nop			; (mov r8, r8)
   1fbe8:	46bd      	mov	sp, r7
   1fbea:	b002      	add	sp, #8
   1fbec:	bd80      	pop	{r7, pc}
	...

0001fbf0 <port_pin_set_output_level>:
{
   1fbf0:	b580      	push	{r7, lr}
   1fbf2:	b084      	sub	sp, #16
   1fbf4:	af00      	add	r7, sp, #0
   1fbf6:	0002      	movs	r2, r0
   1fbf8:	1dfb      	adds	r3, r7, #7
   1fbfa:	701a      	strb	r2, [r3, #0]
   1fbfc:	1dbb      	adds	r3, r7, #6
   1fbfe:	1c0a      	adds	r2, r1, #0
   1fc00:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1fc02:	1dfb      	adds	r3, r7, #7
   1fc04:	781b      	ldrb	r3, [r3, #0]
   1fc06:	0018      	movs	r0, r3
   1fc08:	4b0d      	ldr	r3, [pc, #52]	; (1fc40 <port_pin_set_output_level+0x50>)
   1fc0a:	4798      	blx	r3
   1fc0c:	0003      	movs	r3, r0
   1fc0e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1fc10:	1dfb      	adds	r3, r7, #7
   1fc12:	781b      	ldrb	r3, [r3, #0]
   1fc14:	221f      	movs	r2, #31
   1fc16:	4013      	ands	r3, r2
   1fc18:	2201      	movs	r2, #1
   1fc1a:	409a      	lsls	r2, r3
   1fc1c:	0013      	movs	r3, r2
   1fc1e:	60bb      	str	r3, [r7, #8]
	if (level) {
   1fc20:	1dbb      	adds	r3, r7, #6
   1fc22:	781b      	ldrb	r3, [r3, #0]
   1fc24:	2b00      	cmp	r3, #0
   1fc26:	d003      	beq.n	1fc30 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   1fc28:	68fb      	ldr	r3, [r7, #12]
   1fc2a:	68ba      	ldr	r2, [r7, #8]
   1fc2c:	619a      	str	r2, [r3, #24]
}
   1fc2e:	e002      	b.n	1fc36 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   1fc30:	68fb      	ldr	r3, [r7, #12]
   1fc32:	68ba      	ldr	r2, [r7, #8]
   1fc34:	615a      	str	r2, [r3, #20]
}
   1fc36:	46c0      	nop			; (mov r8, r8)
   1fc38:	46bd      	mov	sp, r7
   1fc3a:	b004      	add	sp, #16
   1fc3c:	bd80      	pop	{r7, pc}
   1fc3e:	46c0      	nop			; (mov r8, r8)
   1fc40:	0001fba9 	.word	0x0001fba9

0001fc44 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
   1fc44:	b580      	push	{r7, lr}
   1fc46:	af00      	add	r7, sp, #0
	if (gpfIsr) {
   1fc48:	4b04      	ldr	r3, [pc, #16]	; (1fc5c <chip_isr+0x18>)
   1fc4a:	681b      	ldr	r3, [r3, #0]
   1fc4c:	2b00      	cmp	r3, #0
   1fc4e:	d002      	beq.n	1fc56 <chip_isr+0x12>
		gpfIsr();
   1fc50:	4b02      	ldr	r3, [pc, #8]	; (1fc5c <chip_isr+0x18>)
   1fc52:	681b      	ldr	r3, [r3, #0]
   1fc54:	4798      	blx	r3
	}
}
   1fc56:	46c0      	nop			; (mov r8, r8)
   1fc58:	46bd      	mov	sp, r7
   1fc5a:	bd80      	pop	{r7, pc}
   1fc5c:	20003cbc 	.word	0x20003cbc

0001fc60 <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
   1fc60:	b580      	push	{r7, lr}
   1fc62:	b082      	sub	sp, #8
   1fc64:	af00      	add	r7, sp, #0
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);
   1fc66:	1d3b      	adds	r3, r7, #4
   1fc68:	0018      	movs	r0, r3
   1fc6a:	4b10      	ldr	r3, [pc, #64]	; (1fcac <init_chip_pins+0x4c>)
   1fc6c:	4798      	blx	r3

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   1fc6e:	1d3b      	adds	r3, r7, #4
   1fc70:	2201      	movs	r2, #1
   1fc72:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
   1fc74:	1d3b      	adds	r3, r7, #4
   1fc76:	0019      	movs	r1, r3
   1fc78:	201b      	movs	r0, #27
   1fc7a:	4b0d      	ldr	r3, [pc, #52]	; (1fcb0 <init_chip_pins+0x50>)
   1fc7c:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
   1fc7e:	1d3b      	adds	r3, r7, #4
   1fc80:	0019      	movs	r1, r3
   1fc82:	201c      	movs	r0, #28
   1fc84:	4b0a      	ldr	r3, [pc, #40]	; (1fcb0 <init_chip_pins+0x50>)
   1fc86:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
   1fc88:	1d3b      	adds	r3, r7, #4
   1fc8a:	0019      	movs	r1, r3
   1fc8c:	2028      	movs	r0, #40	; 0x28
   1fc8e:	4b08      	ldr	r3, [pc, #32]	; (1fcb0 <init_chip_pins+0x50>)
   1fc90:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
   1fc92:	2100      	movs	r1, #0
   1fc94:	201c      	movs	r0, #28
   1fc96:	4b07      	ldr	r3, [pc, #28]	; (1fcb4 <init_chip_pins+0x54>)
   1fc98:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
   1fc9a:	2100      	movs	r1, #0
   1fc9c:	201b      	movs	r0, #27
   1fc9e:	4b05      	ldr	r3, [pc, #20]	; (1fcb4 <init_chip_pins+0x54>)
   1fca0:	4798      	blx	r3
}
   1fca2:	46c0      	nop			; (mov r8, r8)
   1fca4:	46bd      	mov	sp, r7
   1fca6:	b002      	add	sp, #8
   1fca8:	bd80      	pop	{r7, pc}
   1fcaa:	46c0      	nop			; (mov r8, r8)
   1fcac:	0001fbcd 	.word	0x0001fbcd
   1fcb0:	000263ed 	.word	0x000263ed
   1fcb4:	0001fbf1 	.word	0x0001fbf1

0001fcb8 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
   1fcb8:	b580      	push	{r7, lr}
   1fcba:	af00      	add	r7, sp, #0
	gpfIsr = NULL;
   1fcbc:	4b0b      	ldr	r3, [pc, #44]	; (1fcec <nm_bsp_init+0x34>)
   1fcbe:	2200      	movs	r2, #0
   1fcc0:	601a      	str	r2, [r3, #0]

	/* Initialize chip IOs. */
	init_chip_pins();
   1fcc2:	4b0b      	ldr	r3, [pc, #44]	; (1fcf0 <nm_bsp_init+0x38>)
   1fcc4:	4798      	blx	r3

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
   1fcc6:	4b0b      	ldr	r3, [pc, #44]	; (1fcf4 <nm_bsp_init+0x3c>)
   1fcc8:	681b      	ldr	r3, [r3, #0]
   1fcca:	2201      	movs	r2, #1
   1fccc:	4013      	ands	r3, r2
   1fcce:	d004      	beq.n	1fcda <nm_bsp_init+0x22>
   1fcd0:	4b08      	ldr	r3, [pc, #32]	; (1fcf4 <nm_bsp_init+0x3c>)
   1fcd2:	681b      	ldr	r3, [r3, #0]
   1fcd4:	2202      	movs	r2, #2
   1fcd6:	4013      	ands	r3, r2
   1fcd8:	d101      	bne.n	1fcde <nm_bsp_init+0x26>
	    delay_init();
   1fcda:	4b07      	ldr	r3, [pc, #28]	; (1fcf8 <nm_bsp_init+0x40>)
   1fcdc:	4798      	blx	r3
    }

	system_interrupt_enable_global();
   1fcde:	4b07      	ldr	r3, [pc, #28]	; (1fcfc <nm_bsp_init+0x44>)
   1fce0:	4798      	blx	r3

	return M2M_SUCCESS;
   1fce2:	2300      	movs	r3, #0
}
   1fce4:	0018      	movs	r0, r3
   1fce6:	46bd      	mov	sp, r7
   1fce8:	bd80      	pop	{r7, pc}
   1fcea:	46c0      	nop			; (mov r8, r8)
   1fcec:	20003cbc 	.word	0x20003cbc
   1fcf0:	0001fc61 	.word	0x0001fc61
   1fcf4:	e000e010 	.word	0xe000e010
   1fcf8:	0001faa5 	.word	0x0001faa5
   1fcfc:	0001fb8d 	.word	0x0001fb8d

0001fd00 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
   1fd00:	b580      	push	{r7, lr}
   1fd02:	af00      	add	r7, sp, #0
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
   1fd04:	2100      	movs	r1, #0
   1fd06:	201c      	movs	r0, #28
   1fd08:	4b0b      	ldr	r3, [pc, #44]	; (1fd38 <nm_bsp_reset+0x38>)
   1fd0a:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
   1fd0c:	2100      	movs	r1, #0
   1fd0e:	201b      	movs	r0, #27
   1fd10:	4b09      	ldr	r3, [pc, #36]	; (1fd38 <nm_bsp_reset+0x38>)
   1fd12:	4798      	blx	r3
	nm_bsp_sleep(1);
   1fd14:	2001      	movs	r0, #1
   1fd16:	4b09      	ldr	r3, [pc, #36]	; (1fd3c <nm_bsp_reset+0x3c>)
   1fd18:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
   1fd1a:	2101      	movs	r1, #1
   1fd1c:	201c      	movs	r0, #28
   1fd1e:	4b06      	ldr	r3, [pc, #24]	; (1fd38 <nm_bsp_reset+0x38>)
   1fd20:	4798      	blx	r3
	nm_bsp_sleep(10);
   1fd22:	200a      	movs	r0, #10
   1fd24:	4b05      	ldr	r3, [pc, #20]	; (1fd3c <nm_bsp_reset+0x3c>)
   1fd26:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);
   1fd28:	2101      	movs	r1, #1
   1fd2a:	201b      	movs	r0, #27
   1fd2c:	4b02      	ldr	r3, [pc, #8]	; (1fd38 <nm_bsp_reset+0x38>)
   1fd2e:	4798      	blx	r3
}
   1fd30:	46c0      	nop			; (mov r8, r8)
   1fd32:	46bd      	mov	sp, r7
   1fd34:	bd80      	pop	{r7, pc}
   1fd36:	46c0      	nop			; (mov r8, r8)
   1fd38:	0001fbf1 	.word	0x0001fbf1
   1fd3c:	0001fd41 	.word	0x0001fd41

0001fd40 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
   1fd40:	b580      	push	{r7, lr}
   1fd42:	b082      	sub	sp, #8
   1fd44:	af00      	add	r7, sp, #0
   1fd46:	6078      	str	r0, [r7, #4]
#ifdef __FREERTOS__
	vTaskDelay(u32TimeMsec);
   1fd48:	687b      	ldr	r3, [r7, #4]
   1fd4a:	0018      	movs	r0, r3
   1fd4c:	4b02      	ldr	r3, [pc, #8]	; (1fd58 <nm_bsp_sleep+0x18>)
   1fd4e:	4798      	blx	r3
	while (u32TimeMsec--) {
		delay_ms(1);
	}
	
#endif
}
   1fd50:	46c0      	nop			; (mov r8, r8)
   1fd52:	46bd      	mov	sp, r7
   1fd54:	b002      	add	sp, #8
   1fd56:	bd80      	pop	{r7, pc}
   1fd58:	0001beb5 	.word	0x0001beb5

0001fd5c <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
   1fd5c:	b580      	push	{r7, lr}
   1fd5e:	b086      	sub	sp, #24
   1fd60:	af00      	add	r7, sp, #0
   1fd62:	6078      	str	r0, [r7, #4]
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
   1fd64:	4b15      	ldr	r3, [pc, #84]	; (1fdbc <nm_bsp_register_isr+0x60>)
   1fd66:	687a      	ldr	r2, [r7, #4]
   1fd68:	601a      	str	r2, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
   1fd6a:	230c      	movs	r3, #12
   1fd6c:	18fb      	adds	r3, r7, r3
   1fd6e:	0018      	movs	r0, r3
   1fd70:	4b13      	ldr	r3, [pc, #76]	; (1fdc0 <nm_bsp_register_isr+0x64>)
   1fd72:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
   1fd74:	230c      	movs	r3, #12
   1fd76:	18fb      	adds	r3, r7, r3
   1fd78:	2229      	movs	r2, #41	; 0x29
   1fd7a:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
   1fd7c:	230c      	movs	r3, #12
   1fd7e:	18fb      	adds	r3, r7, r3
   1fd80:	2200      	movs	r2, #0
   1fd82:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   1fd84:	230c      	movs	r3, #12
   1fd86:	18fb      	adds	r3, r7, r3
   1fd88:	2201      	movs	r2, #1
   1fd8a:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   1fd8c:	230c      	movs	r3, #12
   1fd8e:	18fb      	adds	r3, r7, r3
   1fd90:	2202      	movs	r2, #2
   1fd92:	72da      	strb	r2, [r3, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
   1fd94:	230c      	movs	r3, #12
   1fd96:	18fb      	adds	r3, r7, r3
   1fd98:	0019      	movs	r1, r3
   1fd9a:	2009      	movs	r0, #9
   1fd9c:	4b09      	ldr	r3, [pc, #36]	; (1fdc4 <nm_bsp_register_isr+0x68>)
   1fd9e:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
   1fda0:	4b09      	ldr	r3, [pc, #36]	; (1fdc8 <nm_bsp_register_isr+0x6c>)
   1fda2:	2200      	movs	r2, #0
   1fda4:	2109      	movs	r1, #9
   1fda6:	0018      	movs	r0, r3
   1fda8:	4b08      	ldr	r3, [pc, #32]	; (1fdcc <nm_bsp_register_isr+0x70>)
   1fdaa:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   1fdac:	2100      	movs	r1, #0
   1fdae:	2009      	movs	r0, #9
   1fdb0:	4b07      	ldr	r3, [pc, #28]	; (1fdd0 <nm_bsp_register_isr+0x74>)
   1fdb2:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
   1fdb4:	46c0      	nop			; (mov r8, r8)
   1fdb6:	46bd      	mov	sp, r7
   1fdb8:	b006      	add	sp, #24
   1fdba:	bd80      	pop	{r7, pc}
   1fdbc:	20003cbc 	.word	0x20003cbc
   1fdc0:	00026295 	.word	0x00026295
   1fdc4:	000262c9 	.word	0x000262c9
   1fdc8:	0001fc45 	.word	0x0001fc45
   1fdcc:	00025e95 	.word	0x00025e95
   1fdd0:	00025ef9 	.word	0x00025ef9

0001fdd4 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
   1fdd4:	b580      	push	{r7, lr}
   1fdd6:	b082      	sub	sp, #8
   1fdd8:	af00      	add	r7, sp, #0
   1fdda:	0002      	movs	r2, r0
   1fddc:	1dfb      	adds	r3, r7, #7
   1fdde:	701a      	strb	r2, [r3, #0]
	if (u8Enable) {
   1fde0:	1dfb      	adds	r3, r7, #7
   1fde2:	781b      	ldrb	r3, [r3, #0]
   1fde4:	2b00      	cmp	r3, #0
   1fde6:	d004      	beq.n	1fdf2 <nm_bsp_interrupt_ctrl+0x1e>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   1fde8:	2100      	movs	r1, #0
   1fdea:	2009      	movs	r0, #9
   1fdec:	4b05      	ldr	r3, [pc, #20]	; (1fe04 <nm_bsp_interrupt_ctrl+0x30>)
   1fdee:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
   1fdf0:	e003      	b.n	1fdfa <nm_bsp_interrupt_ctrl+0x26>
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
   1fdf2:	2100      	movs	r1, #0
   1fdf4:	2009      	movs	r0, #9
   1fdf6:	4b04      	ldr	r3, [pc, #16]	; (1fe08 <nm_bsp_interrupt_ctrl+0x34>)
   1fdf8:	4798      	blx	r3
}
   1fdfa:	46c0      	nop			; (mov r8, r8)
   1fdfc:	46bd      	mov	sp, r7
   1fdfe:	b002      	add	sp, #8
   1fe00:	bd80      	pop	{r7, pc}
   1fe02:	46c0      	nop			; (mov r8, r8)
   1fe04:	00025ef9 	.word	0x00025ef9
   1fe08:	00025f41 	.word	0x00025f41

0001fe0c <system_pinmux_get_group_from_gpio_pin>:
{
   1fe0c:	b580      	push	{r7, lr}
   1fe0e:	b084      	sub	sp, #16
   1fe10:	af00      	add	r7, sp, #0
   1fe12:	0002      	movs	r2, r0
   1fe14:	1dfb      	adds	r3, r7, #7
   1fe16:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   1fe18:	230f      	movs	r3, #15
   1fe1a:	18fb      	adds	r3, r7, r3
   1fe1c:	1dfa      	adds	r2, r7, #7
   1fe1e:	7812      	ldrb	r2, [r2, #0]
   1fe20:	09d2      	lsrs	r2, r2, #7
   1fe22:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   1fe24:	230e      	movs	r3, #14
   1fe26:	18fb      	adds	r3, r7, r3
   1fe28:	1dfa      	adds	r2, r7, #7
   1fe2a:	7812      	ldrb	r2, [r2, #0]
   1fe2c:	0952      	lsrs	r2, r2, #5
   1fe2e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   1fe30:	4b0d      	ldr	r3, [pc, #52]	; (1fe68 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   1fe32:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   1fe34:	230f      	movs	r3, #15
   1fe36:	18fb      	adds	r3, r7, r3
   1fe38:	781b      	ldrb	r3, [r3, #0]
   1fe3a:	2b00      	cmp	r3, #0
   1fe3c:	d10f      	bne.n	1fe5e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1fe3e:	230f      	movs	r3, #15
   1fe40:	18fb      	adds	r3, r7, r3
   1fe42:	781b      	ldrb	r3, [r3, #0]
   1fe44:	009b      	lsls	r3, r3, #2
   1fe46:	2210      	movs	r2, #16
   1fe48:	4694      	mov	ip, r2
   1fe4a:	44bc      	add	ip, r7
   1fe4c:	4463      	add	r3, ip
   1fe4e:	3b08      	subs	r3, #8
   1fe50:	681a      	ldr	r2, [r3, #0]
   1fe52:	230e      	movs	r3, #14
   1fe54:	18fb      	adds	r3, r7, r3
   1fe56:	781b      	ldrb	r3, [r3, #0]
   1fe58:	01db      	lsls	r3, r3, #7
   1fe5a:	18d3      	adds	r3, r2, r3
   1fe5c:	e000      	b.n	1fe60 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   1fe5e:	2300      	movs	r3, #0
}
   1fe60:	0018      	movs	r0, r3
   1fe62:	46bd      	mov	sp, r7
   1fe64:	b004      	add	sp, #16
   1fe66:	bd80      	pop	{r7, pc}
   1fe68:	41004400 	.word	0x41004400

0001fe6c <system_interrupt_enable>:
{
   1fe6c:	b580      	push	{r7, lr}
   1fe6e:	b082      	sub	sp, #8
   1fe70:	af00      	add	r7, sp, #0
   1fe72:	0002      	movs	r2, r0
   1fe74:	1dfb      	adds	r3, r7, #7
   1fe76:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1fe78:	4b06      	ldr	r3, [pc, #24]	; (1fe94 <system_interrupt_enable+0x28>)
   1fe7a:	1dfa      	adds	r2, r7, #7
   1fe7c:	7812      	ldrb	r2, [r2, #0]
   1fe7e:	0011      	movs	r1, r2
   1fe80:	221f      	movs	r2, #31
   1fe82:	400a      	ands	r2, r1
   1fe84:	2101      	movs	r1, #1
   1fe86:	4091      	lsls	r1, r2
   1fe88:	000a      	movs	r2, r1
   1fe8a:	601a      	str	r2, [r3, #0]
}
   1fe8c:	46c0      	nop			; (mov r8, r8)
   1fe8e:	46bd      	mov	sp, r7
   1fe90:	b002      	add	sp, #8
   1fe92:	bd80      	pop	{r7, pc}
   1fe94:	e000e100 	.word	0xe000e100

0001fe98 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
   1fe98:	b580      	push	{r7, lr}
   1fe9a:	b082      	sub	sp, #8
   1fe9c:	af00      	add	r7, sp, #0
   1fe9e:	0002      	movs	r2, r0
   1fea0:	1dfb      	adds	r3, r7, #7
   1fea2:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1fea4:	4a07      	ldr	r2, [pc, #28]	; (1fec4 <system_interrupt_disable+0x2c>)
   1fea6:	1dfb      	adds	r3, r7, #7
   1fea8:	781b      	ldrb	r3, [r3, #0]
   1feaa:	0019      	movs	r1, r3
   1feac:	231f      	movs	r3, #31
   1feae:	400b      	ands	r3, r1
   1feb0:	2101      	movs	r1, #1
   1feb2:	4099      	lsls	r1, r3
   1feb4:	000b      	movs	r3, r1
   1feb6:	0019      	movs	r1, r3
   1feb8:	2380      	movs	r3, #128	; 0x80
   1feba:	50d1      	str	r1, [r2, r3]
}
   1febc:	46c0      	nop			; (mov r8, r8)
   1febe:	46bd      	mov	sp, r7
   1fec0:	b002      	add	sp, #8
   1fec2:	bd80      	pop	{r7, pc}
   1fec4:	e000e100 	.word	0xe000e100

0001fec8 <port_get_group_from_gpio_pin>:
{
   1fec8:	b580      	push	{r7, lr}
   1feca:	b082      	sub	sp, #8
   1fecc:	af00      	add	r7, sp, #0
   1fece:	0002      	movs	r2, r0
   1fed0:	1dfb      	adds	r3, r7, #7
   1fed2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   1fed4:	1dfb      	adds	r3, r7, #7
   1fed6:	781b      	ldrb	r3, [r3, #0]
   1fed8:	0018      	movs	r0, r3
   1feda:	4b03      	ldr	r3, [pc, #12]	; (1fee8 <port_get_group_from_gpio_pin+0x20>)
   1fedc:	4798      	blx	r3
   1fede:	0003      	movs	r3, r0
}
   1fee0:	0018      	movs	r0, r3
   1fee2:	46bd      	mov	sp, r7
   1fee4:	b002      	add	sp, #8
   1fee6:	bd80      	pop	{r7, pc}
   1fee8:	0001fe0d 	.word	0x0001fe0d

0001feec <port_get_config_defaults>:
{
   1feec:	b580      	push	{r7, lr}
   1feee:	b082      	sub	sp, #8
   1fef0:	af00      	add	r7, sp, #0
   1fef2:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   1fef4:	687b      	ldr	r3, [r7, #4]
   1fef6:	2200      	movs	r2, #0
   1fef8:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   1fefa:	687b      	ldr	r3, [r7, #4]
   1fefc:	2201      	movs	r2, #1
   1fefe:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   1ff00:	687b      	ldr	r3, [r7, #4]
   1ff02:	2200      	movs	r2, #0
   1ff04:	709a      	strb	r2, [r3, #2]
}
   1ff06:	46c0      	nop			; (mov r8, r8)
   1ff08:	46bd      	mov	sp, r7
   1ff0a:	b002      	add	sp, #8
   1ff0c:	bd80      	pop	{r7, pc}
	...

0001ff10 <port_pin_set_output_level>:
{
   1ff10:	b580      	push	{r7, lr}
   1ff12:	b084      	sub	sp, #16
   1ff14:	af00      	add	r7, sp, #0
   1ff16:	0002      	movs	r2, r0
   1ff18:	1dfb      	adds	r3, r7, #7
   1ff1a:	701a      	strb	r2, [r3, #0]
   1ff1c:	1dbb      	adds	r3, r7, #6
   1ff1e:	1c0a      	adds	r2, r1, #0
   1ff20:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1ff22:	1dfb      	adds	r3, r7, #7
   1ff24:	781b      	ldrb	r3, [r3, #0]
   1ff26:	0018      	movs	r0, r3
   1ff28:	4b0d      	ldr	r3, [pc, #52]	; (1ff60 <port_pin_set_output_level+0x50>)
   1ff2a:	4798      	blx	r3
   1ff2c:	0003      	movs	r3, r0
   1ff2e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1ff30:	1dfb      	adds	r3, r7, #7
   1ff32:	781b      	ldrb	r3, [r3, #0]
   1ff34:	221f      	movs	r2, #31
   1ff36:	4013      	ands	r3, r2
   1ff38:	2201      	movs	r2, #1
   1ff3a:	409a      	lsls	r2, r3
   1ff3c:	0013      	movs	r3, r2
   1ff3e:	60bb      	str	r3, [r7, #8]
	if (level) {
   1ff40:	1dbb      	adds	r3, r7, #6
   1ff42:	781b      	ldrb	r3, [r3, #0]
   1ff44:	2b00      	cmp	r3, #0
   1ff46:	d003      	beq.n	1ff50 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   1ff48:	68fb      	ldr	r3, [r7, #12]
   1ff4a:	68ba      	ldr	r2, [r7, #8]
   1ff4c:	619a      	str	r2, [r3, #24]
}
   1ff4e:	e002      	b.n	1ff56 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   1ff50:	68fb      	ldr	r3, [r7, #12]
   1ff52:	68ba      	ldr	r2, [r7, #8]
   1ff54:	615a      	str	r2, [r3, #20]
}
   1ff56:	46c0      	nop			; (mov r8, r8)
   1ff58:	46bd      	mov	sp, r7
   1ff5a:	b004      	add	sp, #16
   1ff5c:	bd80      	pop	{r7, pc}
   1ff5e:	46c0      	nop			; (mov r8, r8)
   1ff60:	0001fec9 	.word	0x0001fec9

0001ff64 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
   1ff64:	b580      	push	{r7, lr}
   1ff66:	b084      	sub	sp, #16
   1ff68:	af00      	add	r7, sp, #0
   1ff6a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1ff6c:	687b      	ldr	r3, [r7, #4]
   1ff6e:	681b      	ldr	r3, [r3, #0]
   1ff70:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
   1ff72:	68fb      	ldr	r3, [r7, #12]
   1ff74:	69db      	ldr	r3, [r3, #28]
   1ff76:	1e5a      	subs	r2, r3, #1
   1ff78:	4193      	sbcs	r3, r2
   1ff7a:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
   1ff7c:	0018      	movs	r0, r3
   1ff7e:	46bd      	mov	sp, r7
   1ff80:	b004      	add	sp, #16
   1ff82:	bd80      	pop	{r7, pc}

0001ff84 <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
   1ff84:	b580      	push	{r7, lr}
   1ff86:	b082      	sub	sp, #8
   1ff88:	af00      	add	r7, sp, #0
   1ff8a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
   1ff8c:	687b      	ldr	r3, [r7, #4]
   1ff8e:	2201      	movs	r2, #1
   1ff90:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   1ff92:	687b      	ldr	r3, [r7, #4]
   1ff94:	2200      	movs	r2, #0
   1ff96:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   1ff98:	687b      	ldr	r3, [r7, #4]
   1ff9a:	2200      	movs	r2, #0
   1ff9c:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   1ff9e:	687b      	ldr	r3, [r7, #4]
   1ffa0:	22c0      	movs	r2, #192	; 0xc0
   1ffa2:	0392      	lsls	r2, r2, #14
   1ffa4:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   1ffa6:	687b      	ldr	r3, [r7, #4]
   1ffa8:	2200      	movs	r2, #0
   1ffaa:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
   1ffac:	687b      	ldr	r3, [r7, #4]
   1ffae:	2200      	movs	r2, #0
   1ffb0:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
   1ffb2:	687b      	ldr	r3, [r7, #4]
   1ffb4:	2201      	movs	r2, #1
   1ffb6:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
   1ffb8:	687b      	ldr	r3, [r7, #4]
   1ffba:	2201      	movs	r2, #1
   1ffbc:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
   1ffbe:	687b      	ldr	r3, [r7, #4]
   1ffc0:	2200      	movs	r2, #0
   1ffc2:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
   1ffc4:	687b      	ldr	r3, [r7, #4]
   1ffc6:	2224      	movs	r2, #36	; 0x24
   1ffc8:	2100      	movs	r1, #0
   1ffca:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   1ffcc:	687b      	ldr	r3, [r7, #4]
   1ffce:	3318      	adds	r3, #24
   1ffd0:	220c      	movs	r2, #12
   1ffd2:	2100      	movs	r1, #0
   1ffd4:	0018      	movs	r0, r3
   1ffd6:	4b0a      	ldr	r3, [pc, #40]	; (20000 <spi_get_config_defaults+0x7c>)
   1ffd8:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
   1ffda:	687b      	ldr	r3, [r7, #4]
   1ffdc:	4a09      	ldr	r2, [pc, #36]	; (20004 <spi_get_config_defaults+0x80>)
   1ffde:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
   1ffe0:	687b      	ldr	r3, [r7, #4]
   1ffe2:	2200      	movs	r2, #0
   1ffe4:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
   1ffe6:	687b      	ldr	r3, [r7, #4]
   1ffe8:	2200      	movs	r2, #0
   1ffea:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
   1ffec:	687b      	ldr	r3, [r7, #4]
   1ffee:	2200      	movs	r2, #0
   1fff0:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
   1fff2:	687b      	ldr	r3, [r7, #4]
   1fff4:	2200      	movs	r2, #0
   1fff6:	635a      	str	r2, [r3, #52]	; 0x34

};
   1fff8:	46c0      	nop			; (mov r8, r8)
   1fffa:	46bd      	mov	sp, r7
   1fffc:	b002      	add	sp, #8
   1fffe:	bd80      	pop	{r7, pc}
   20000:	00034083 	.word	0x00034083
   20004:	000186a0 	.word	0x000186a0

00020008 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
   20008:	b580      	push	{r7, lr}
   2000a:	b082      	sub	sp, #8
   2000c:	af00      	add	r7, sp, #0
   2000e:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
   20010:	687b      	ldr	r3, [r7, #4]
   20012:	220a      	movs	r2, #10
   20014:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
   20016:	687b      	ldr	r3, [r7, #4]
   20018:	2200      	movs	r2, #0
   2001a:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
   2001c:	687b      	ldr	r3, [r7, #4]
   2001e:	2200      	movs	r2, #0
   20020:	709a      	strb	r2, [r3, #2]
}
   20022:	46c0      	nop			; (mov r8, r8)
   20024:	46bd      	mov	sp, r7
   20026:	b002      	add	sp, #8
   20028:	bd80      	pop	{r7, pc}
	...

0002002c <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
   2002c:	b580      	push	{r7, lr}
   2002e:	b084      	sub	sp, #16
   20030:	af00      	add	r7, sp, #0
   20032:	6078      	str	r0, [r7, #4]
   20034:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
   20036:	683b      	ldr	r3, [r7, #0]
   20038:	781a      	ldrb	r2, [r3, #0]
   2003a:	687b      	ldr	r3, [r7, #4]
   2003c:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
   2003e:	683b      	ldr	r3, [r7, #0]
   20040:	785a      	ldrb	r2, [r3, #1]
   20042:	687b      	ldr	r3, [r7, #4]
   20044:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
   20046:	683b      	ldr	r3, [r7, #0]
   20048:	789a      	ldrb	r2, [r3, #2]
   2004a:	687b      	ldr	r3, [r7, #4]
   2004c:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   2004e:	230c      	movs	r3, #12
   20050:	18fb      	adds	r3, r7, r3
   20052:	0018      	movs	r0, r3
   20054:	4b0b      	ldr	r3, [pc, #44]	; (20084 <spi_attach_slave+0x58>)
   20056:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   20058:	230c      	movs	r3, #12
   2005a:	18fb      	adds	r3, r7, r3
   2005c:	2201      	movs	r2, #1
   2005e:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
   20060:	687b      	ldr	r3, [r7, #4]
   20062:	781b      	ldrb	r3, [r3, #0]
   20064:	220c      	movs	r2, #12
   20066:	18ba      	adds	r2, r7, r2
   20068:	0011      	movs	r1, r2
   2006a:	0018      	movs	r0, r3
   2006c:	4b06      	ldr	r3, [pc, #24]	; (20088 <spi_attach_slave+0x5c>)
   2006e:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   20070:	687b      	ldr	r3, [r7, #4]
   20072:	781b      	ldrb	r3, [r3, #0]
   20074:	2101      	movs	r1, #1
   20076:	0018      	movs	r0, r3
   20078:	4b04      	ldr	r3, [pc, #16]	; (2008c <spi_attach_slave+0x60>)
   2007a:	4798      	blx	r3
}
   2007c:	46c0      	nop			; (mov r8, r8)
   2007e:	46bd      	mov	sp, r7
   20080:	b004      	add	sp, #16
   20082:	bd80      	pop	{r7, pc}
   20084:	0001feed 	.word	0x0001feed
   20088:	000263ed 	.word	0x000263ed
   2008c:	0001ff11 	.word	0x0001ff11

00020090 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
   20090:	b580      	push	{r7, lr}
   20092:	b084      	sub	sp, #16
   20094:	af00      	add	r7, sp, #0
   20096:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   20098:	687b      	ldr	r3, [r7, #4]
   2009a:	681b      	ldr	r3, [r3, #0]
   2009c:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   2009e:	687b      	ldr	r3, [r7, #4]
   200a0:	681b      	ldr	r3, [r3, #0]
   200a2:	0018      	movs	r0, r3
   200a4:	4b0b      	ldr	r3, [pc, #44]	; (200d4 <spi_enable+0x44>)
   200a6:	4798      	blx	r3
   200a8:	0003      	movs	r3, r0
   200aa:	0018      	movs	r0, r3
   200ac:	4b0a      	ldr	r3, [pc, #40]	; (200d8 <spi_enable+0x48>)
   200ae:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
   200b0:	46c0      	nop			; (mov r8, r8)
   200b2:	687b      	ldr	r3, [r7, #4]
   200b4:	0018      	movs	r0, r3
   200b6:	4b09      	ldr	r3, [pc, #36]	; (200dc <spi_enable+0x4c>)
   200b8:	4798      	blx	r3
   200ba:	1e03      	subs	r3, r0, #0
   200bc:	d1f9      	bne.n	200b2 <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   200be:	68fb      	ldr	r3, [r7, #12]
   200c0:	681b      	ldr	r3, [r3, #0]
   200c2:	2202      	movs	r2, #2
   200c4:	431a      	orrs	r2, r3
   200c6:	68fb      	ldr	r3, [r7, #12]
   200c8:	601a      	str	r2, [r3, #0]
}
   200ca:	46c0      	nop			; (mov r8, r8)
   200cc:	46bd      	mov	sp, r7
   200ce:	b004      	add	sp, #16
   200d0:	bd80      	pop	{r7, pc}
   200d2:	46c0      	nop			; (mov r8, r8)
   200d4:	000270bd 	.word	0x000270bd
   200d8:	0001fe6d 	.word	0x0001fe6d
   200dc:	0001ff65 	.word	0x0001ff65

000200e0 <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
   200e0:	b580      	push	{r7, lr}
   200e2:	b084      	sub	sp, #16
   200e4:	af00      	add	r7, sp, #0
   200e6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   200e8:	687b      	ldr	r3, [r7, #4]
   200ea:	681b      	ldr	r3, [r3, #0]
   200ec:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   200ee:	687b      	ldr	r3, [r7, #4]
   200f0:	681b      	ldr	r3, [r3, #0]
   200f2:	0018      	movs	r0, r3
   200f4:	4b0e      	ldr	r3, [pc, #56]	; (20130 <spi_disable+0x50>)
   200f6:	4798      	blx	r3
   200f8:	0003      	movs	r3, r0
   200fa:	0018      	movs	r0, r3
   200fc:	4b0d      	ldr	r3, [pc, #52]	; (20134 <spi_disable+0x54>)
   200fe:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
   20100:	46c0      	nop			; (mov r8, r8)
   20102:	687b      	ldr	r3, [r7, #4]
   20104:	0018      	movs	r0, r3
   20106:	4b0c      	ldr	r3, [pc, #48]	; (20138 <spi_disable+0x58>)
   20108:	4798      	blx	r3
   2010a:	1e03      	subs	r3, r0, #0
   2010c:	d1f9      	bne.n	20102 <spi_disable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   2010e:	68fb      	ldr	r3, [r7, #12]
   20110:	228f      	movs	r2, #143	; 0x8f
   20112:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   20114:	68fb      	ldr	r3, [r7, #12]
   20116:	228f      	movs	r2, #143	; 0x8f
   20118:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   2011a:	68fb      	ldr	r3, [r7, #12]
   2011c:	681b      	ldr	r3, [r3, #0]
   2011e:	2202      	movs	r2, #2
   20120:	4393      	bics	r3, r2
   20122:	001a      	movs	r2, r3
   20124:	68fb      	ldr	r3, [r7, #12]
   20126:	601a      	str	r2, [r3, #0]
}
   20128:	46c0      	nop			; (mov r8, r8)
   2012a:	46bd      	mov	sp, r7
   2012c:	b004      	add	sp, #16
   2012e:	bd80      	pop	{r7, pc}
   20130:	000270bd 	.word	0x000270bd
   20134:	0001fe99 	.word	0x0001fe99
   20138:	0001ff65 	.word	0x0001ff65

0002013c <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
   2013c:	b580      	push	{r7, lr}
   2013e:	b084      	sub	sp, #16
   20140:	af00      	add	r7, sp, #0
   20142:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   20144:	687b      	ldr	r3, [r7, #4]
   20146:	681b      	ldr	r3, [r3, #0]
   20148:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   2014a:	68fb      	ldr	r3, [r7, #12]
   2014c:	7e1b      	ldrb	r3, [r3, #24]
   2014e:	b2db      	uxtb	r3, r3
   20150:	001a      	movs	r2, r3
   20152:	2302      	movs	r3, #2
   20154:	4013      	ands	r3, r2
   20156:	1e5a      	subs	r2, r3, #1
   20158:	4193      	sbcs	r3, r2
   2015a:	b2db      	uxtb	r3, r3
}
   2015c:	0018      	movs	r0, r3
   2015e:	46bd      	mov	sp, r7
   20160:	b004      	add	sp, #16
   20162:	bd80      	pop	{r7, pc}

00020164 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
   20164:	b580      	push	{r7, lr}
   20166:	b084      	sub	sp, #16
   20168:	af00      	add	r7, sp, #0
   2016a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   2016c:	687b      	ldr	r3, [r7, #4]
   2016e:	681b      	ldr	r3, [r3, #0]
   20170:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   20172:	68fb      	ldr	r3, [r7, #12]
   20174:	7e1b      	ldrb	r3, [r3, #24]
   20176:	b2db      	uxtb	r3, r3
   20178:	001a      	movs	r2, r3
   2017a:	2301      	movs	r3, #1
   2017c:	4013      	ands	r3, r2
   2017e:	1e5a      	subs	r2, r3, #1
   20180:	4193      	sbcs	r3, r2
   20182:	b2db      	uxtb	r3, r3
}
   20184:	0018      	movs	r0, r3
   20186:	46bd      	mov	sp, r7
   20188:	b004      	add	sp, #16
   2018a:	bd80      	pop	{r7, pc}

0002018c <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
   2018c:	b580      	push	{r7, lr}
   2018e:	b084      	sub	sp, #16
   20190:	af00      	add	r7, sp, #0
   20192:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   20194:	687b      	ldr	r3, [r7, #4]
   20196:	681b      	ldr	r3, [r3, #0]
   20198:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   2019a:	68fb      	ldr	r3, [r7, #12]
   2019c:	7e1b      	ldrb	r3, [r3, #24]
   2019e:	b2db      	uxtb	r3, r3
   201a0:	001a      	movs	r2, r3
   201a2:	2304      	movs	r3, #4
   201a4:	4013      	ands	r3, r2
   201a6:	1e5a      	subs	r2, r3, #1
   201a8:	4193      	sbcs	r3, r2
   201aa:	b2db      	uxtb	r3, r3
}
   201ac:	0018      	movs	r0, r3
   201ae:	46bd      	mov	sp, r7
   201b0:	b004      	add	sp, #16
   201b2:	bd80      	pop	{r7, pc}

000201b4 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
   201b4:	b580      	push	{r7, lr}
   201b6:	b084      	sub	sp, #16
   201b8:	af00      	add	r7, sp, #0
   201ba:	6078      	str	r0, [r7, #4]
   201bc:	000a      	movs	r2, r1
   201be:	1cbb      	adds	r3, r7, #2
   201c0:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   201c2:	687b      	ldr	r3, [r7, #4]
   201c4:	681b      	ldr	r3, [r3, #0]
   201c6:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
   201c8:	687b      	ldr	r3, [r7, #4]
   201ca:	0018      	movs	r0, r3
   201cc:	4b0a      	ldr	r3, [pc, #40]	; (201f8 <spi_write+0x44>)
   201ce:	4798      	blx	r3
   201d0:	0003      	movs	r3, r0
   201d2:	001a      	movs	r2, r3
   201d4:	2301      	movs	r3, #1
   201d6:	4053      	eors	r3, r2
   201d8:	b2db      	uxtb	r3, r3
   201da:	2b00      	cmp	r3, #0
   201dc:	d001      	beq.n	201e2 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
   201de:	2305      	movs	r3, #5
   201e0:	e006      	b.n	201f0 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   201e2:	1cbb      	adds	r3, r7, #2
   201e4:	881b      	ldrh	r3, [r3, #0]
   201e6:	05db      	lsls	r3, r3, #23
   201e8:	0dda      	lsrs	r2, r3, #23
   201ea:	68fb      	ldr	r3, [r7, #12]
   201ec:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
   201ee:	2300      	movs	r3, #0
}
   201f0:	0018      	movs	r0, r3
   201f2:	46bd      	mov	sp, r7
   201f4:	b004      	add	sp, #16
   201f6:	bd80      	pop	{r7, pc}
   201f8:	00020165 	.word	0x00020165

000201fc <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
   201fc:	b580      	push	{r7, lr}
   201fe:	b084      	sub	sp, #16
   20200:	af00      	add	r7, sp, #0
   20202:	6078      	str	r0, [r7, #4]
   20204:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   20206:	687b      	ldr	r3, [r7, #4]
   20208:	681b      	ldr	r3, [r3, #0]
   2020a:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
   2020c:	687b      	ldr	r3, [r7, #4]
   2020e:	0018      	movs	r0, r3
   20210:	4b1b      	ldr	r3, [pc, #108]	; (20280 <spi_read+0x84>)
   20212:	4798      	blx	r3
   20214:	0003      	movs	r3, r0
   20216:	001a      	movs	r2, r3
   20218:	2301      	movs	r3, #1
   2021a:	4053      	eors	r3, r2
   2021c:	b2db      	uxtb	r3, r3
   2021e:	2b00      	cmp	r3, #0
   20220:	d001      	beq.n	20226 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
   20222:	2310      	movs	r3, #16
   20224:	e027      	b.n	20276 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
   20226:	230f      	movs	r3, #15
   20228:	18fb      	adds	r3, r7, r3
   2022a:	2200      	movs	r2, #0
   2022c:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   2022e:	68bb      	ldr	r3, [r7, #8]
   20230:	8b5b      	ldrh	r3, [r3, #26]
   20232:	b29b      	uxth	r3, r3
   20234:	001a      	movs	r2, r3
   20236:	2304      	movs	r3, #4
   20238:	4013      	ands	r3, r2
   2023a:	d006      	beq.n	2024a <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   2023c:	230f      	movs	r3, #15
   2023e:	18fb      	adds	r3, r7, r3
   20240:	221e      	movs	r2, #30
   20242:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   20244:	68bb      	ldr	r3, [r7, #8]
   20246:	2204      	movs	r2, #4
   20248:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   2024a:	687b      	ldr	r3, [r7, #4]
   2024c:	799b      	ldrb	r3, [r3, #6]
   2024e:	2b01      	cmp	r3, #1
   20250:	d108      	bne.n	20264 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   20252:	68bb      	ldr	r3, [r7, #8]
   20254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   20256:	b29b      	uxth	r3, r3
   20258:	05db      	lsls	r3, r3, #23
   2025a:	0ddb      	lsrs	r3, r3, #23
   2025c:	b29a      	uxth	r2, r3
   2025e:	683b      	ldr	r3, [r7, #0]
   20260:	801a      	strh	r2, [r3, #0]
   20262:	e005      	b.n	20270 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
   20264:	68bb      	ldr	r3, [r7, #8]
   20266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   20268:	b2db      	uxtb	r3, r3
   2026a:	b29a      	uxth	r2, r3
   2026c:	683b      	ldr	r3, [r7, #0]
   2026e:	801a      	strh	r2, [r3, #0]
	}

	return retval;
   20270:	230f      	movs	r3, #15
   20272:	18fb      	adds	r3, r7, r3
   20274:	781b      	ldrb	r3, [r3, #0]
}
   20276:	0018      	movs	r0, r3
   20278:	46bd      	mov	sp, r7
   2027a:	b004      	add	sp, #16
   2027c:	bd80      	pop	{r7, pc}
   2027e:	46c0      	nop			; (mov r8, r8)
   20280:	0002018d 	.word	0x0002018d

00020284 <spi_rw>:

struct spi_module master;
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
   20284:	b580      	push	{r7, lr}
   20286:	b086      	sub	sp, #24
   20288:	af00      	add	r7, sp, #0
   2028a:	60f8      	str	r0, [r7, #12]
   2028c:	60b9      	str	r1, [r7, #8]
   2028e:	1dbb      	adds	r3, r7, #6
   20290:	801a      	strh	r2, [r3, #0]
	uint8 u8Dummy = 0xFF;
   20292:	2313      	movs	r3, #19
   20294:	18fb      	adds	r3, r7, r3
   20296:	22ff      	movs	r2, #255	; 0xff
   20298:	701a      	strb	r2, [r3, #0]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
   2029a:	2317      	movs	r3, #23
   2029c:	18fb      	adds	r3, r7, r3
   2029e:	2200      	movs	r2, #0
   202a0:	701a      	strb	r2, [r3, #0]
   202a2:	2316      	movs	r3, #22
   202a4:	18fb      	adds	r3, r7, r3
   202a6:	2200      	movs	r2, #0
   202a8:	701a      	strb	r2, [r3, #0]
	uint16_t txd_data = 0;
   202aa:	2314      	movs	r3, #20
   202ac:	18fb      	adds	r3, r7, r3
   202ae:	2200      	movs	r2, #0
   202b0:	801a      	strh	r2, [r3, #0]
	uint16_t rxd_data = 0;
   202b2:	2310      	movs	r3, #16
   202b4:	18fb      	adds	r3, r7, r3
   202b6:	2200      	movs	r2, #0
   202b8:	801a      	strh	r2, [r3, #0]

	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
   202ba:	68bb      	ldr	r3, [r7, #8]
   202bc:	2b00      	cmp	r3, #0
   202be:	d102      	bne.n	202c6 <spi_rw+0x42>
   202c0:	68fb      	ldr	r3, [r7, #12]
   202c2:	2b00      	cmp	r3, #0
   202c4:	d003      	beq.n	202ce <spi_rw+0x4a>
   202c6:	1dbb      	adds	r3, r7, #6
   202c8:	881b      	ldrh	r3, [r3, #0]
   202ca:	2b00      	cmp	r3, #0
   202cc:	d102      	bne.n	202d4 <spi_rw+0x50>
		return M2M_ERR_INVALID_ARG;
   202ce:	230f      	movs	r3, #15
   202d0:	425b      	negs	r3, r3
   202d2:	e07e      	b.n	203d2 <spi_rw+0x14e>
	}

	if (pu8Mosi == NULL) {
   202d4:	68fb      	ldr	r3, [r7, #12]
   202d6:	2b00      	cmp	r3, #0
   202d8:	d106      	bne.n	202e8 <spi_rw+0x64>
		pu8Mosi = &u8Dummy;
   202da:	2313      	movs	r3, #19
   202dc:	18fb      	adds	r3, r7, r3
   202de:	60fb      	str	r3, [r7, #12]
		u8SkipMosi = 1;
   202e0:	2317      	movs	r3, #23
   202e2:	18fb      	adds	r3, r7, r3
   202e4:	2201      	movs	r2, #1
   202e6:	701a      	strb	r2, [r3, #0]
	}
	if(pu8Miso == NULL) {
   202e8:	68bb      	ldr	r3, [r7, #8]
   202ea:	2b00      	cmp	r3, #0
   202ec:	d106      	bne.n	202fc <spi_rw+0x78>
		pu8Miso = &u8Dummy;
   202ee:	2313      	movs	r3, #19
   202f0:	18fb      	adds	r3, r7, r3
   202f2:	60bb      	str	r3, [r7, #8]
		u8SkipMiso = 1;
   202f4:	2316      	movs	r3, #22
   202f6:	18fb      	adds	r3, r7, r3
   202f8:	2201      	movs	r2, #1
   202fa:	701a      	strb	r2, [r3, #0]
	}

	spi_select_slave(&master, &slave_inst, true);
   202fc:	4937      	ldr	r1, [pc, #220]	; (203dc <spi_rw+0x158>)
   202fe:	4b38      	ldr	r3, [pc, #224]	; (203e0 <spi_rw+0x15c>)
   20300:	2201      	movs	r2, #1
   20302:	0018      	movs	r0, r3
   20304:	4b37      	ldr	r3, [pc, #220]	; (203e4 <spi_rw+0x160>)
   20306:	4798      	blx	r3

	while (u16Sz) {
   20308:	e04c      	b.n	203a4 <spi_rw+0x120>
		txd_data = *pu8Mosi;
   2030a:	68fb      	ldr	r3, [r7, #12]
   2030c:	781a      	ldrb	r2, [r3, #0]
   2030e:	2314      	movs	r3, #20
   20310:	18fb      	adds	r3, r7, r3
   20312:	801a      	strh	r2, [r3, #0]
		while (!spi_is_ready_to_write(&master))
   20314:	46c0      	nop			; (mov r8, r8)
   20316:	4b32      	ldr	r3, [pc, #200]	; (203e0 <spi_rw+0x15c>)
   20318:	0018      	movs	r0, r3
   2031a:	4b33      	ldr	r3, [pc, #204]	; (203e8 <spi_rw+0x164>)
   2031c:	4798      	blx	r3
   2031e:	0003      	movs	r3, r0
   20320:	001a      	movs	r2, r3
   20322:	2301      	movs	r3, #1
   20324:	4053      	eors	r3, r2
   20326:	b2db      	uxtb	r3, r3
   20328:	2b00      	cmp	r3, #0
   2032a:	d1f4      	bne.n	20316 <spi_rw+0x92>
			;
		while(spi_write(&master, txd_data) != STATUS_OK)
   2032c:	46c0      	nop			; (mov r8, r8)
   2032e:	2314      	movs	r3, #20
   20330:	18fb      	adds	r3, r7, r3
   20332:	881a      	ldrh	r2, [r3, #0]
   20334:	4b2a      	ldr	r3, [pc, #168]	; (203e0 <spi_rw+0x15c>)
   20336:	0011      	movs	r1, r2
   20338:	0018      	movs	r0, r3
   2033a:	4b2c      	ldr	r3, [pc, #176]	; (203ec <spi_rw+0x168>)
   2033c:	4798      	blx	r3
   2033e:	1e03      	subs	r3, r0, #0
   20340:	d1f5      	bne.n	2032e <spi_rw+0xaa>
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master))
   20342:	46c0      	nop			; (mov r8, r8)
   20344:	4b26      	ldr	r3, [pc, #152]	; (203e0 <spi_rw+0x15c>)
   20346:	0018      	movs	r0, r3
   20348:	4b29      	ldr	r3, [pc, #164]	; (203f0 <spi_rw+0x16c>)
   2034a:	4798      	blx	r3
   2034c:	0003      	movs	r3, r0
   2034e:	001a      	movs	r2, r3
   20350:	2301      	movs	r3, #1
   20352:	4053      	eors	r3, r2
   20354:	b2db      	uxtb	r3, r3
   20356:	2b00      	cmp	r3, #0
   20358:	d1f4      	bne.n	20344 <spi_rw+0xc0>
			;
		while (spi_read(&master, &rxd_data) != STATUS_OK)
   2035a:	46c0      	nop			; (mov r8, r8)
   2035c:	2310      	movs	r3, #16
   2035e:	18fa      	adds	r2, r7, r3
   20360:	4b1f      	ldr	r3, [pc, #124]	; (203e0 <spi_rw+0x15c>)
   20362:	0011      	movs	r1, r2
   20364:	0018      	movs	r0, r3
   20366:	4b23      	ldr	r3, [pc, #140]	; (203f4 <spi_rw+0x170>)
   20368:	4798      	blx	r3
   2036a:	1e03      	subs	r3, r0, #0
   2036c:	d1f6      	bne.n	2035c <spi_rw+0xd8>
			;
		*pu8Miso = rxd_data;
   2036e:	2310      	movs	r3, #16
   20370:	18fb      	adds	r3, r7, r3
   20372:	881b      	ldrh	r3, [r3, #0]
   20374:	b2da      	uxtb	r2, r3
   20376:	68bb      	ldr	r3, [r7, #8]
   20378:	701a      	strb	r2, [r3, #0]
			
		u16Sz--;
   2037a:	1dbb      	adds	r3, r7, #6
   2037c:	881a      	ldrh	r2, [r3, #0]
   2037e:	1dbb      	adds	r3, r7, #6
   20380:	3a01      	subs	r2, #1
   20382:	801a      	strh	r2, [r3, #0]
		if (!u8SkipMiso)
   20384:	2316      	movs	r3, #22
   20386:	18fb      	adds	r3, r7, r3
   20388:	781b      	ldrb	r3, [r3, #0]
   2038a:	2b00      	cmp	r3, #0
   2038c:	d102      	bne.n	20394 <spi_rw+0x110>
			pu8Miso++;
   2038e:	68bb      	ldr	r3, [r7, #8]
   20390:	3301      	adds	r3, #1
   20392:	60bb      	str	r3, [r7, #8]
		if (!u8SkipMosi)
   20394:	2317      	movs	r3, #23
   20396:	18fb      	adds	r3, r7, r3
   20398:	781b      	ldrb	r3, [r3, #0]
   2039a:	2b00      	cmp	r3, #0
   2039c:	d102      	bne.n	203a4 <spi_rw+0x120>
			pu8Mosi++;
   2039e:	68fb      	ldr	r3, [r7, #12]
   203a0:	3301      	adds	r3, #1
   203a2:	60fb      	str	r3, [r7, #12]
	while (u16Sz) {
   203a4:	1dbb      	adds	r3, r7, #6
   203a6:	881b      	ldrh	r3, [r3, #0]
   203a8:	2b00      	cmp	r3, #0
   203aa:	d1ae      	bne.n	2030a <spi_rw+0x86>
	}

	while (!spi_is_write_complete(&master))
   203ac:	46c0      	nop			; (mov r8, r8)
   203ae:	4b0c      	ldr	r3, [pc, #48]	; (203e0 <spi_rw+0x15c>)
   203b0:	0018      	movs	r0, r3
   203b2:	4b11      	ldr	r3, [pc, #68]	; (203f8 <spi_rw+0x174>)
   203b4:	4798      	blx	r3
   203b6:	0003      	movs	r3, r0
   203b8:	001a      	movs	r2, r3
   203ba:	2301      	movs	r3, #1
   203bc:	4053      	eors	r3, r2
   203be:	b2db      	uxtb	r3, r3
   203c0:	2b00      	cmp	r3, #0
   203c2:	d1f4      	bne.n	203ae <spi_rw+0x12a>
		;

	spi_select_slave(&master, &slave_inst, false);
   203c4:	4905      	ldr	r1, [pc, #20]	; (203dc <spi_rw+0x158>)
   203c6:	4b06      	ldr	r3, [pc, #24]	; (203e0 <spi_rw+0x15c>)
   203c8:	2200      	movs	r2, #0
   203ca:	0018      	movs	r0, r3
   203cc:	4b05      	ldr	r3, [pc, #20]	; (203e4 <spi_rw+0x160>)
   203ce:	4798      	blx	r3

	return M2M_SUCCESS;
   203d0:	2300      	movs	r3, #0
}
   203d2:	0018      	movs	r0, r3
   203d4:	46bd      	mov	sp, r7
   203d6:	b006      	add	sp, #24
   203d8:	bd80      	pop	{r7, pc}
   203da:	46c0      	nop			; (mov r8, r8)
   203dc:	200053b4 	.word	0x200053b4
   203e0:	200053b8 	.word	0x200053b8
   203e4:	00027b31 	.word	0x00027b31
   203e8:	00020165 	.word	0x00020165
   203ec:	000201b5 	.word	0x000201b5
   203f0:	0002018d 	.word	0x0002018d
   203f4:	000201fd 	.word	0x000201fd
   203f8:	0002013d 	.word	0x0002013d

000203fc <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
   203fc:	b580      	push	{r7, lr}
   203fe:	b092      	sub	sp, #72	; 0x48
   20400:	af00      	add	r7, sp, #0
   20402:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
   20404:	2347      	movs	r3, #71	; 0x47
   20406:	18fb      	adds	r3, r7, r3
   20408:	2200      	movs	r2, #0
   2040a:	701a      	strb	r2, [r3, #0]
	struct spi_config config;
	struct spi_slave_inst_config slave_config;

	/* Select SPI slave CS pin. */
	/* This step will set the CS high */
	spi_slave_inst_get_config_defaults(&slave_config);
   2040c:	2308      	movs	r3, #8
   2040e:	18fb      	adds	r3, r7, r3
   20410:	0018      	movs	r0, r3
   20412:	4b26      	ldr	r3, [pc, #152]	; (204ac <nm_bus_init+0xb0>)
   20414:	4798      	blx	r3
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
   20416:	2308      	movs	r3, #8
   20418:	18fb      	adds	r3, r7, r3
   2041a:	220e      	movs	r2, #14
   2041c:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave_inst, &slave_config);
   2041e:	2308      	movs	r3, #8
   20420:	18fa      	adds	r2, r7, r3
   20422:	4b23      	ldr	r3, [pc, #140]	; (204b0 <nm_bus_init+0xb4>)
   20424:	0011      	movs	r1, r2
   20426:	0018      	movs	r0, r3
   20428:	4b22      	ldr	r3, [pc, #136]	; (204b4 <nm_bus_init+0xb8>)
   2042a:	4798      	blx	r3

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
   2042c:	230c      	movs	r3, #12
   2042e:	18fb      	adds	r3, r7, r3
   20430:	0018      	movs	r0, r3
   20432:	4b21      	ldr	r3, [pc, #132]	; (204b8 <nm_bus_init+0xbc>)
   20434:	4798      	blx	r3
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
   20436:	230c      	movs	r3, #12
   20438:	18fb      	adds	r3, r7, r3
   2043a:	22c0      	movs	r2, #192	; 0xc0
   2043c:	0392      	lsls	r2, r2, #14
   2043e:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
   20440:	230c      	movs	r3, #12
   20442:	18fb      	adds	r3, r7, r3
   20444:	4a1d      	ldr	r2, [pc, #116]	; (204bc <nm_bus_init+0xc0>)
   20446:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
   20448:	230c      	movs	r3, #12
   2044a:	18fb      	adds	r3, r7, r3
   2044c:	4a1c      	ldr	r2, [pc, #112]	; (204c0 <nm_bus_init+0xc4>)
   2044e:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
   20450:	230c      	movs	r3, #12
   20452:	18fb      	adds	r3, r7, r3
   20454:	2201      	movs	r2, #1
   20456:	4252      	negs	r2, r2
   20458:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
   2045a:	230c      	movs	r3, #12
   2045c:	18fb      	adds	r3, r7, r3
   2045e:	4a19      	ldr	r2, [pc, #100]	; (204c4 <nm_bus_init+0xc8>)
   20460:	635a      	str	r2, [r3, #52]	; 0x34
	config.master_slave_select_enable = false;
   20462:	230c      	movs	r3, #12
   20464:	18fb      	adds	r3, r7, r3
   20466:	2200      	movs	r2, #0
   20468:	751a      	strb	r2, [r3, #20]
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
   2046a:	230c      	movs	r3, #12
   2046c:	18fb      	adds	r3, r7, r3
   2046e:	4a16      	ldr	r2, [pc, #88]	; (204c8 <nm_bus_init+0xcc>)
   20470:	619a      	str	r2, [r3, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
   20472:	230c      	movs	r3, #12
   20474:	18fa      	adds	r2, r7, r3
   20476:	4915      	ldr	r1, [pc, #84]	; (204cc <nm_bus_init+0xd0>)
   20478:	4b15      	ldr	r3, [pc, #84]	; (204d0 <nm_bus_init+0xd4>)
   2047a:	0018      	movs	r0, r3
   2047c:	4b15      	ldr	r3, [pc, #84]	; (204d4 <nm_bus_init+0xd8>)
   2047e:	4798      	blx	r3
   20480:	1e03      	subs	r3, r0, #0
   20482:	d002      	beq.n	2048a <nm_bus_init+0x8e>
		return M2M_ERR_BUS_FAIL;
   20484:	2306      	movs	r3, #6
   20486:	425b      	negs	r3, r3
   20488:	e00c      	b.n	204a4 <nm_bus_init+0xa8>
	}

	/* Enable the SPI master. */
	spi_enable(&master);
   2048a:	4b11      	ldr	r3, [pc, #68]	; (204d0 <nm_bus_init+0xd4>)
   2048c:	0018      	movs	r0, r3
   2048e:	4b12      	ldr	r3, [pc, #72]	; (204d8 <nm_bus_init+0xdc>)
   20490:	4798      	blx	r3

	nm_bsp_reset();
   20492:	4b12      	ldr	r3, [pc, #72]	; (204dc <nm_bus_init+0xe0>)
   20494:	4798      	blx	r3
	nm_bsp_sleep(1);
   20496:	2001      	movs	r0, #1
   20498:	4b11      	ldr	r3, [pc, #68]	; (204e0 <nm_bus_init+0xe4>)
   2049a:	4798      	blx	r3
#endif
	return result;
   2049c:	2347      	movs	r3, #71	; 0x47
   2049e:	18fb      	adds	r3, r7, r3
   204a0:	781b      	ldrb	r3, [r3, #0]
   204a2:	b25b      	sxtb	r3, r3
}
   204a4:	0018      	movs	r0, r3
   204a6:	46bd      	mov	sp, r7
   204a8:	b012      	add	sp, #72	; 0x48
   204aa:	bd80      	pop	{r7, pc}
   204ac:	00020009 	.word	0x00020009
   204b0:	200053b4 	.word	0x200053b4
   204b4:	0002002d 	.word	0x0002002d
   204b8:	0001ff85 	.word	0x0001ff85
   204bc:	000c0002 	.word	0x000c0002
   204c0:	000d0002 	.word	0x000d0002
   204c4:	000f0002 	.word	0x000f0002
   204c8:	00124f80 	.word	0x00124f80
   204cc:	42001000 	.word	0x42001000
   204d0:	200053b8 	.word	0x200053b8
   204d4:	0002786d 	.word	0x0002786d
   204d8:	00020091 	.word	0x00020091
   204dc:	0001fd01 	.word	0x0001fd01
   204e0:	0001fd41 	.word	0x0001fd41

000204e4 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
   204e4:	b590      	push	{r4, r7, lr}
   204e6:	b085      	sub	sp, #20
   204e8:	af00      	add	r7, sp, #0
   204ea:	0002      	movs	r2, r0
   204ec:	6039      	str	r1, [r7, #0]
   204ee:	1dfb      	adds	r3, r7, #7
   204f0:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = 0;
   204f2:	230f      	movs	r3, #15
   204f4:	18fb      	adds	r3, r7, r3
   204f6:	2200      	movs	r2, #0
   204f8:	701a      	strb	r2, [r3, #0]
	switch(u8Cmd)
   204fa:	1dfb      	adds	r3, r7, #7
   204fc:	781b      	ldrb	r3, [r3, #0]
   204fe:	2b03      	cmp	r3, #3
   20500:	d10f      	bne.n	20522 <nm_bus_ioctl+0x3e>
			s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
   20502:	683b      	ldr	r3, [r7, #0]
   20504:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
   20506:	68bb      	ldr	r3, [r7, #8]
   20508:	6818      	ldr	r0, [r3, #0]
   2050a:	68bb      	ldr	r3, [r7, #8]
   2050c:	6859      	ldr	r1, [r3, #4]
   2050e:	68bb      	ldr	r3, [r7, #8]
   20510:	891b      	ldrh	r3, [r3, #8]
   20512:	220f      	movs	r2, #15
   20514:	18bc      	adds	r4, r7, r2
   20516:	001a      	movs	r2, r3
   20518:	4b10      	ldr	r3, [pc, #64]	; (2055c <nm_bus_ioctl+0x78>)
   2051a:	4798      	blx	r3
   2051c:	0003      	movs	r3, r0
   2051e:	7023      	strb	r3, [r4, #0]
		}
		break;
   20520:	e013      	b.n	2054a <nm_bus_ioctl+0x66>
#endif
		default:
			s8Ret = -1;
   20522:	230f      	movs	r3, #15
   20524:	18fb      	adds	r3, r7, r3
   20526:	22ff      	movs	r2, #255	; 0xff
   20528:	701a      	strb	r2, [r3, #0]
			M2M_ERR("invalide ioclt cmd\n");
   2052a:	2383      	movs	r3, #131	; 0x83
   2052c:	005a      	lsls	r2, r3, #1
   2052e:	490c      	ldr	r1, [pc, #48]	; (20560 <nm_bus_ioctl+0x7c>)
   20530:	4b0c      	ldr	r3, [pc, #48]	; (20564 <nm_bus_ioctl+0x80>)
   20532:	0018      	movs	r0, r3
   20534:	4b0c      	ldr	r3, [pc, #48]	; (20568 <nm_bus_ioctl+0x84>)
   20536:	4798      	blx	r3
   20538:	4b0c      	ldr	r3, [pc, #48]	; (2056c <nm_bus_ioctl+0x88>)
   2053a:	0018      	movs	r0, r3
   2053c:	4b0a      	ldr	r3, [pc, #40]	; (20568 <nm_bus_ioctl+0x84>)
   2053e:	4798      	blx	r3
   20540:	4b0b      	ldr	r3, [pc, #44]	; (20570 <nm_bus_ioctl+0x8c>)
   20542:	0018      	movs	r0, r3
   20544:	4b08      	ldr	r3, [pc, #32]	; (20568 <nm_bus_ioctl+0x84>)
   20546:	4798      	blx	r3
			break;
   20548:	46c0      	nop			; (mov r8, r8)
	}

	return s8Ret;
   2054a:	230f      	movs	r3, #15
   2054c:	18fb      	adds	r3, r7, r3
   2054e:	781b      	ldrb	r3, [r3, #0]
   20550:	b25b      	sxtb	r3, r3
}
   20552:	0018      	movs	r0, r3
   20554:	46bd      	mov	sp, r7
   20556:	b005      	add	sp, #20
   20558:	bd90      	pop	{r4, r7, pc}
   2055a:	46c0      	nop			; (mov r8, r8)
   2055c:	00020285 	.word	0x00020285
   20560:	00038d5c 	.word	0x00038d5c
   20564:	00038d30 	.word	0x00038d30
   20568:	0001dc4d 	.word	0x0001dc4d
   2056c:	00038d44 	.word	0x00038d44
   20570:	00038d58 	.word	0x00038d58

00020574 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
   20574:	b580      	push	{r7, lr}
   20576:	b082      	sub	sp, #8
   20578:	af00      	add	r7, sp, #0
	sint8 result = M2M_SUCCESS;
   2057a:	1dfb      	adds	r3, r7, #7
   2057c:	2200      	movs	r2, #0
   2057e:	701a      	strb	r2, [r3, #0]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
   20580:	1d3b      	adds	r3, r7, #4
   20582:	0018      	movs	r0, r3
   20584:	4b13      	ldr	r3, [pc, #76]	; (205d4 <nm_bus_deinit+0x60>)
   20586:	4798      	blx	r3
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   20588:	1d3b      	adds	r3, r7, #4
   2058a:	2200      	movs	r2, #0
   2058c:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
   2058e:	1d3b      	adds	r3, r7, #4
   20590:	2200      	movs	r2, #0
   20592:	705a      	strb	r2, [r3, #1]
	i2c_master_disable(&i2c_master_instance);
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
   20594:	4b10      	ldr	r3, [pc, #64]	; (205d8 <nm_bus_deinit+0x64>)
   20596:	0018      	movs	r0, r3
   20598:	4b10      	ldr	r3, [pc, #64]	; (205dc <nm_bus_deinit+0x68>)
   2059a:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
   2059c:	1d3b      	adds	r3, r7, #4
   2059e:	0019      	movs	r1, r3
   205a0:	200c      	movs	r0, #12
   205a2:	4b0f      	ldr	r3, [pc, #60]	; (205e0 <nm_bus_deinit+0x6c>)
   205a4:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
   205a6:	1d3b      	adds	r3, r7, #4
   205a8:	0019      	movs	r1, r3
   205aa:	200f      	movs	r0, #15
   205ac:	4b0c      	ldr	r3, [pc, #48]	; (205e0 <nm_bus_deinit+0x6c>)
   205ae:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
   205b0:	1d3b      	adds	r3, r7, #4
   205b2:	0019      	movs	r1, r3
   205b4:	200d      	movs	r0, #13
   205b6:	4b0a      	ldr	r3, [pc, #40]	; (205e0 <nm_bus_deinit+0x6c>)
   205b8:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
   205ba:	1d3b      	adds	r3, r7, #4
   205bc:	0019      	movs	r1, r3
   205be:	200e      	movs	r0, #14
   205c0:	4b07      	ldr	r3, [pc, #28]	; (205e0 <nm_bus_deinit+0x6c>)
   205c2:	4798      	blx	r3
	//port_pin_set_output_level(CONF_WINC_SPI_MOSI, false);
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
   205c4:	1dfb      	adds	r3, r7, #7
   205c6:	781b      	ldrb	r3, [r3, #0]
   205c8:	b25b      	sxtb	r3, r3
}
   205ca:	0018      	movs	r0, r3
   205cc:	46bd      	mov	sp, r7
   205ce:	b002      	add	sp, #8
   205d0:	bd80      	pop	{r7, pc}
   205d2:	46c0      	nop			; (mov r8, r8)
   205d4:	0001feed 	.word	0x0001feed
   205d8:	200053b8 	.word	0x200053b8
   205dc:	000200e1 	.word	0x000200e1
   205e0:	000263ed 	.word	0x000263ed

000205e4 <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
   205e4:	b580      	push	{r7, lr}
   205e6:	b084      	sub	sp, #16
   205e8:	af00      	add	r7, sp, #0
   205ea:	60f8      	str	r0, [r7, #12]
   205ec:	60b9      	str	r1, [r7, #8]
   205ee:	607a      	str	r2, [r7, #4]
	if(sz == 0) return;
   205f0:	687b      	ldr	r3, [r7, #4]
   205f2:	2b00      	cmp	r3, #0
   205f4:	d010      	beq.n	20618 <m2m_memcpy+0x34>
	do
	{
		*pDst = *pSrc;
   205f6:	68bb      	ldr	r3, [r7, #8]
   205f8:	781a      	ldrb	r2, [r3, #0]
   205fa:	68fb      	ldr	r3, [r7, #12]
   205fc:	701a      	strb	r2, [r3, #0]
		pDst++;
   205fe:	68fb      	ldr	r3, [r7, #12]
   20600:	3301      	adds	r3, #1
   20602:	60fb      	str	r3, [r7, #12]
		pSrc++;
   20604:	68bb      	ldr	r3, [r7, #8]
   20606:	3301      	adds	r3, #1
   20608:	60bb      	str	r3, [r7, #8]
	}while(--sz);
   2060a:	687b      	ldr	r3, [r7, #4]
   2060c:	3b01      	subs	r3, #1
   2060e:	607b      	str	r3, [r7, #4]
   20610:	687b      	ldr	r3, [r7, #4]
   20612:	2b00      	cmp	r3, #0
   20614:	d1ef      	bne.n	205f6 <m2m_memcpy+0x12>
   20616:	e000      	b.n	2061a <m2m_memcpy+0x36>
	if(sz == 0) return;
   20618:	46c0      	nop			; (mov r8, r8)
}
   2061a:	46bd      	mov	sp, r7
   2061c:	b004      	add	sp, #16
   2061e:	bd80      	pop	{r7, pc}

00020620 <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
   20620:	b580      	push	{r7, lr}
   20622:	b084      	sub	sp, #16
   20624:	af00      	add	r7, sp, #0
   20626:	60f8      	str	r0, [r7, #12]
   20628:	607a      	str	r2, [r7, #4]
   2062a:	230b      	movs	r3, #11
   2062c:	18fb      	adds	r3, r7, r3
   2062e:	1c0a      	adds	r2, r1, #0
   20630:	701a      	strb	r2, [r3, #0]
	if(sz == 0) return;
   20632:	687b      	ldr	r3, [r7, #4]
   20634:	2b00      	cmp	r3, #0
   20636:	d00e      	beq.n	20656 <m2m_memset+0x36>
	do
	{
		*pBuf = val;
   20638:	68fb      	ldr	r3, [r7, #12]
   2063a:	220b      	movs	r2, #11
   2063c:	18ba      	adds	r2, r7, r2
   2063e:	7812      	ldrb	r2, [r2, #0]
   20640:	701a      	strb	r2, [r3, #0]
		pBuf++;
   20642:	68fb      	ldr	r3, [r7, #12]
   20644:	3301      	adds	r3, #1
   20646:	60fb      	str	r3, [r7, #12]
	}while(--sz);
   20648:	687b      	ldr	r3, [r7, #4]
   2064a:	3b01      	subs	r3, #1
   2064c:	607b      	str	r3, [r7, #4]
   2064e:	687b      	ldr	r3, [r7, #4]
   20650:	2b00      	cmp	r3, #0
   20652:	d1f1      	bne.n	20638 <m2m_memset+0x18>
   20654:	e000      	b.n	20658 <m2m_memset+0x38>
	if(sz == 0) return;
   20656:	46c0      	nop			; (mov r8, r8)
}
   20658:	46bd      	mov	sp, r7
   2065a:	b004      	add	sp, #16
   2065c:	bd80      	pop	{r7, pc}

0002065e <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
   2065e:	b580      	push	{r7, lr}
   20660:	b084      	sub	sp, #16
   20662:	af00      	add	r7, sp, #0
   20664:	6078      	str	r0, [r7, #4]
	uint16	u16StrLen = 0;
   20666:	230e      	movs	r3, #14
   20668:	18fb      	adds	r3, r7, r3
   2066a:	2200      	movs	r2, #0
   2066c:	801a      	strh	r2, [r3, #0]
	while(*pcStr)
   2066e:	e009      	b.n	20684 <m2m_strlen+0x26>
	{
		u16StrLen ++;
   20670:	230e      	movs	r3, #14
   20672:	18fb      	adds	r3, r7, r3
   20674:	881a      	ldrh	r2, [r3, #0]
   20676:	230e      	movs	r3, #14
   20678:	18fb      	adds	r3, r7, r3
   2067a:	3201      	adds	r2, #1
   2067c:	801a      	strh	r2, [r3, #0]
		pcStr++;
   2067e:	687b      	ldr	r3, [r7, #4]
   20680:	3301      	adds	r3, #1
   20682:	607b      	str	r3, [r7, #4]
	while(*pcStr)
   20684:	687b      	ldr	r3, [r7, #4]
   20686:	781b      	ldrb	r3, [r3, #0]
   20688:	2b00      	cmp	r3, #0
   2068a:	d1f1      	bne.n	20670 <m2m_strlen+0x12>
	}
	return u16StrLen;
   2068c:	230e      	movs	r3, #14
   2068e:	18fb      	adds	r3, r7, r3
   20690:	881b      	ldrh	r3, [r3, #0]
}
   20692:	0018      	movs	r0, r3
   20694:	46bd      	mov	sp, r7
   20696:	b004      	add	sp, #16
   20698:	bd80      	pop	{r7, pc}
	...

0002069c <isr>:
#ifdef ETH_MODE
extern void os_hook_isr(void);
#endif

static void isr(void)
{
   2069c:	b580      	push	{r7, lr}
   2069e:	af00      	add	r7, sp, #0
	gstrHifCxt.u8Interrupt++;
   206a0:	4b04      	ldr	r3, [pc, #16]	; (206b4 <isr+0x18>)
   206a2:	78db      	ldrb	r3, [r3, #3]
   206a4:	b2db      	uxtb	r3, r3
   206a6:	3301      	adds	r3, #1
   206a8:	b2da      	uxtb	r2, r3
   206aa:	4b02      	ldr	r3, [pc, #8]	; (206b4 <isr+0x18>)
   206ac:	70da      	strb	r2, [r3, #3]
	nm_bsp_interrupt_ctrl(0);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
   206ae:	46c0      	nop			; (mov r8, r8)
   206b0:	46bd      	mov	sp, r7
   206b2:	bd80      	pop	{r7, pc}
   206b4:	200053f4 	.word	0x200053f4

000206b8 <hif_set_rx_done>:
static sint8 hif_set_rx_done(void)
{
   206b8:	b590      	push	{r4, r7, lr}
   206ba:	b083      	sub	sp, #12
   206bc:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
   206be:	1dfb      	adds	r3, r7, #7
   206c0:	2200      	movs	r2, #0
   206c2:	701a      	strb	r2, [r3, #0]

	gstrHifCxt.u8HifRXDone = 0;
   206c4:	4b14      	ldr	r3, [pc, #80]	; (20718 <hif_set_rx_done+0x60>)
   206c6:	2200      	movs	r2, #0
   206c8:	709a      	strb	r2, [r3, #2]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
   206ca:	2001      	movs	r0, #1
   206cc:	4b13      	ldr	r3, [pc, #76]	; (2071c <hif_set_rx_done+0x64>)
   206ce:	4798      	blx	r3
#endif
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
   206d0:	1dfc      	adds	r4, r7, #7
   206d2:	003b      	movs	r3, r7
   206d4:	4a12      	ldr	r2, [pc, #72]	; (20720 <hif_set_rx_done+0x68>)
   206d6:	0019      	movs	r1, r3
   206d8:	0010      	movs	r0, r2
   206da:	4b12      	ldr	r3, [pc, #72]	; (20724 <hif_set_rx_done+0x6c>)
   206dc:	4798      	blx	r3
   206de:	0003      	movs	r3, r0
   206e0:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   206e2:	1dfb      	adds	r3, r7, #7
   206e4:	781b      	ldrb	r3, [r3, #0]
   206e6:	b25b      	sxtb	r3, r3
   206e8:	2b00      	cmp	r3, #0
   206ea:	d10d      	bne.n	20708 <hif_set_rx_done+0x50>
	/* Set RX Done */
	reg |= NBIT1;
   206ec:	683b      	ldr	r3, [r7, #0]
   206ee:	2202      	movs	r2, #2
   206f0:	4313      	orrs	r3, r2
   206f2:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   206f4:	683b      	ldr	r3, [r7, #0]
   206f6:	1dfc      	adds	r4, r7, #7
   206f8:	4a09      	ldr	r2, [pc, #36]	; (20720 <hif_set_rx_done+0x68>)
   206fa:	0019      	movs	r1, r3
   206fc:	0010      	movs	r0, r2
   206fe:	4b0a      	ldr	r3, [pc, #40]	; (20728 <hif_set_rx_done+0x70>)
   20700:	4798      	blx	r3
   20702:	0003      	movs	r3, r0
   20704:	7023      	strb	r3, [r4, #0]
   20706:	e000      	b.n	2070a <hif_set_rx_done+0x52>
	if(ret != M2M_SUCCESS)goto ERR1;
   20708:	46c0      	nop			; (mov r8, r8)
	if(ret != M2M_SUCCESS)goto ERR1;
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;
   2070a:	1dfb      	adds	r3, r7, #7
   2070c:	781b      	ldrb	r3, [r3, #0]
   2070e:	b25b      	sxtb	r3, r3

}
   20710:	0018      	movs	r0, r3
   20712:	46bd      	mov	sp, r7
   20714:	b003      	add	sp, #12
   20716:	bd90      	pop	{r4, r7, pc}
   20718:	200053f4 	.word	0x200053f4
   2071c:	0001fdd5 	.word	0x0001fdd5
   20720:	00001070 	.word	0x00001070
   20724:	000226b1 	.word	0x000226b1
   20728:	000226d5 	.word	0x000226d5

0002072c <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
   2072c:	b580      	push	{r7, lr}
   2072e:	b082      	sub	sp, #8
   20730:	af00      	add	r7, sp, #0
   20732:	603a      	str	r2, [r7, #0]
   20734:	1dfb      	adds	r3, r7, #7
   20736:	1c02      	adds	r2, r0, #0
   20738:	701a      	strb	r2, [r3, #0]
   2073a:	1d3b      	adds	r3, r7, #4
   2073c:	1c0a      	adds	r2, r1, #0
   2073e:	801a      	strh	r2, [r3, #0]


}
   20740:	46c0      	nop			; (mov r8, r8)
   20742:	46bd      	mov	sp, r7
   20744:	b002      	add	sp, #8
   20746:	bd80      	pop	{r7, pc}

00020748 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
   20748:	b590      	push	{r4, r7, lr}
   2074a:	b083      	sub	sp, #12
   2074c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   2074e:	1dfb      	adds	r3, r7, #7
   20750:	2200      	movs	r2, #0
   20752:	701a      	strb	r2, [r3, #0]
	if(gstrHifCxt.u8HifRXDone)
   20754:	4b16      	ldr	r3, [pc, #88]	; (207b0 <hif_chip_wake+0x68>)
   20756:	789b      	ldrb	r3, [r3, #2]
   20758:	b2db      	uxtb	r3, r3
   2075a:	2b00      	cmp	r3, #0
   2075c:	d003      	beq.n	20766 <hif_chip_wake+0x1e>
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
   2075e:	1dfb      	adds	r3, r7, #7
   20760:	781b      	ldrb	r3, [r3, #0]
   20762:	b25b      	sxtb	r3, r3
   20764:	e01f      	b.n	207a6 <hif_chip_wake+0x5e>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
   20766:	4b12      	ldr	r3, [pc, #72]	; (207b0 <hif_chip_wake+0x68>)
   20768:	785b      	ldrb	r3, [r3, #1]
   2076a:	b2db      	uxtb	r3, r3
   2076c:	2b00      	cmp	r3, #0
   2076e:	d10e      	bne.n	2078e <hif_chip_wake+0x46>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   20770:	4b0f      	ldr	r3, [pc, #60]	; (207b0 <hif_chip_wake+0x68>)
   20772:	781b      	ldrb	r3, [r3, #0]
   20774:	b2db      	uxtb	r3, r3
   20776:	2b00      	cmp	r3, #0
   20778:	d009      	beq.n	2078e <hif_chip_wake+0x46>
		{
			ret = chip_wake();
   2077a:	1dfc      	adds	r4, r7, #7
   2077c:	4b0d      	ldr	r3, [pc, #52]	; (207b4 <hif_chip_wake+0x6c>)
   2077e:	4798      	blx	r3
   20780:	0003      	movs	r3, r0
   20782:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
   20784:	1dfb      	adds	r3, r7, #7
   20786:	781b      	ldrb	r3, [r3, #0]
   20788:	b25b      	sxtb	r3, r3
   2078a:	2b00      	cmp	r3, #0
   2078c:	d107      	bne.n	2079e <hif_chip_wake+0x56>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
   2078e:	4b08      	ldr	r3, [pc, #32]	; (207b0 <hif_chip_wake+0x68>)
   20790:	785b      	ldrb	r3, [r3, #1]
   20792:	b2db      	uxtb	r3, r3
   20794:	3301      	adds	r3, #1
   20796:	b2da      	uxtb	r2, r3
   20798:	4b05      	ldr	r3, [pc, #20]	; (207b0 <hif_chip_wake+0x68>)
   2079a:	705a      	strb	r2, [r3, #1]
   2079c:	e000      	b.n	207a0 <hif_chip_wake+0x58>
			if(ret != M2M_SUCCESS)goto ERR1;
   2079e:	46c0      	nop			; (mov r8, r8)
ERR1:
	return ret;
   207a0:	1dfb      	adds	r3, r7, #7
   207a2:	781b      	ldrb	r3, [r3, #0]
   207a4:	b25b      	sxtb	r3, r3
}
   207a6:	0018      	movs	r0, r3
   207a8:	46bd      	mov	sp, r7
   207aa:	b003      	add	sp, #12
   207ac:	bd90      	pop	{r4, r7, pc}
   207ae:	46c0      	nop			; (mov r8, r8)
   207b0:	200053f4 	.word	0x200053f4
   207b4:	00022181 	.word	0x00022181

000207b8 <hif_chip_sleep_sc>:
*	@brief	To clear the chip sleep but keep the chip sleep
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
   207b8:	b580      	push	{r7, lr}
   207ba:	af00      	add	r7, sp, #0
	if(gstrHifCxt.u8ChipSleep >= 1)
   207bc:	4b07      	ldr	r3, [pc, #28]	; (207dc <hif_chip_sleep_sc+0x24>)
   207be:	785b      	ldrb	r3, [r3, #1]
   207c0:	b2db      	uxtb	r3, r3
   207c2:	2b00      	cmp	r3, #0
   207c4:	d006      	beq.n	207d4 <hif_chip_sleep_sc+0x1c>
	{
		gstrHifCxt.u8ChipSleep--;
   207c6:	4b05      	ldr	r3, [pc, #20]	; (207dc <hif_chip_sleep_sc+0x24>)
   207c8:	785b      	ldrb	r3, [r3, #1]
   207ca:	b2db      	uxtb	r3, r3
   207cc:	3b01      	subs	r3, #1
   207ce:	b2da      	uxtb	r2, r3
   207d0:	4b02      	ldr	r3, [pc, #8]	; (207dc <hif_chip_sleep_sc+0x24>)
   207d2:	705a      	strb	r2, [r3, #1]
	}
	return M2M_SUCCESS;
   207d4:	2300      	movs	r3, #0
}
   207d6:	0018      	movs	r0, r3
   207d8:	46bd      	mov	sp, r7
   207da:	bd80      	pop	{r7, pc}
   207dc:	200053f4 	.word	0x200053f4

000207e0 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
   207e0:	b590      	push	{r4, r7, lr}
   207e2:	b083      	sub	sp, #12
   207e4:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   207e6:	1dfb      	adds	r3, r7, #7
   207e8:	2200      	movs	r2, #0
   207ea:	701a      	strb	r2, [r3, #0]

	if(gstrHifCxt.u8ChipSleep >= 1)
   207ec:	4b10      	ldr	r3, [pc, #64]	; (20830 <hif_chip_sleep+0x50>)
   207ee:	785b      	ldrb	r3, [r3, #1]
   207f0:	b2db      	uxtb	r3, r3
   207f2:	2b00      	cmp	r3, #0
   207f4:	d006      	beq.n	20804 <hif_chip_sleep+0x24>
	{
		gstrHifCxt.u8ChipSleep--;
   207f6:	4b0e      	ldr	r3, [pc, #56]	; (20830 <hif_chip_sleep+0x50>)
   207f8:	785b      	ldrb	r3, [r3, #1]
   207fa:	b2db      	uxtb	r3, r3
   207fc:	3b01      	subs	r3, #1
   207fe:	b2da      	uxtb	r2, r3
   20800:	4b0b      	ldr	r3, [pc, #44]	; (20830 <hif_chip_sleep+0x50>)
   20802:	705a      	strb	r2, [r3, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
   20804:	4b0a      	ldr	r3, [pc, #40]	; (20830 <hif_chip_sleep+0x50>)
   20806:	785b      	ldrb	r3, [r3, #1]
   20808:	b2db      	uxtb	r3, r3
   2080a:	2b00      	cmp	r3, #0
   2080c:	d109      	bne.n	20822 <hif_chip_sleep+0x42>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   2080e:	4b08      	ldr	r3, [pc, #32]	; (20830 <hif_chip_sleep+0x50>)
   20810:	781b      	ldrb	r3, [r3, #0]
   20812:	b2db      	uxtb	r3, r3
   20814:	2b00      	cmp	r3, #0
   20816:	d004      	beq.n	20822 <hif_chip_sleep+0x42>
		{
			ret = chip_sleep();
   20818:	1dfc      	adds	r4, r7, #7
   2081a:	4b06      	ldr	r3, [pc, #24]	; (20834 <hif_chip_sleep+0x54>)
   2081c:	4798      	blx	r3
   2081e:	0003      	movs	r3, r0
   20820:	7023      	strb	r3, [r4, #0]
		else
		{
		}
	}
ERR1:
	return ret;
   20822:	1dfb      	adds	r3, r7, #7
   20824:	781b      	ldrb	r3, [r3, #0]
   20826:	b25b      	sxtb	r3, r3
}
   20828:	0018      	movs	r0, r3
   2082a:	46bd      	mov	sp, r7
   2082c:	b003      	add	sp, #12
   2082e:	bd90      	pop	{r4, r7, pc}
   20830:	200053f4 	.word	0x200053f4
   20834:	000220a9 	.word	0x000220a9

00020838 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
   20838:	b580      	push	{r7, lr}
   2083a:	b082      	sub	sp, #8
   2083c:	af00      	add	r7, sp, #0
   2083e:	6078      	str	r0, [r7, #4]
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
   20840:	4b09      	ldr	r3, [pc, #36]	; (20868 <hif_init+0x30>)
   20842:	222c      	movs	r2, #44	; 0x2c
   20844:	2100      	movs	r1, #0
   20846:	0018      	movs	r0, r3
   20848:	4b08      	ldr	r3, [pc, #32]	; (2086c <hif_init+0x34>)
   2084a:	4798      	blx	r3
	nm_bsp_register_isr(isr);
   2084c:	4b08      	ldr	r3, [pc, #32]	; (20870 <hif_init+0x38>)
   2084e:	0018      	movs	r0, r3
   20850:	4b08      	ldr	r3, [pc, #32]	; (20874 <hif_init+0x3c>)
   20852:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
   20854:	4b08      	ldr	r3, [pc, #32]	; (20878 <hif_init+0x40>)
   20856:	0019      	movs	r1, r3
   20858:	2003      	movs	r0, #3
   2085a:	4b08      	ldr	r3, [pc, #32]	; (2087c <hif_init+0x44>)
   2085c:	4798      	blx	r3
	return M2M_SUCCESS;
   2085e:	2300      	movs	r3, #0
}
   20860:	0018      	movs	r0, r3
   20862:	46bd      	mov	sp, r7
   20864:	b002      	add	sp, #8
   20866:	bd80      	pop	{r7, pc}
   20868:	200053f4 	.word	0x200053f4
   2086c:	00020621 	.word	0x00020621
   20870:	0002069d 	.word	0x0002069d
   20874:	0001fd5d 	.word	0x0001fd5d
   20878:	0002072d 	.word	0x0002072d
   2087c:	0002131d 	.word	0x0002131d

00020880 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
   20880:	b590      	push	{r4, r7, lr}
   20882:	b089      	sub	sp, #36	; 0x24
   20884:	af00      	add	r7, sp, #0
   20886:	0004      	movs	r4, r0
   20888:	0008      	movs	r0, r1
   2088a:	603a      	str	r2, [r7, #0]
   2088c:	0019      	movs	r1, r3
   2088e:	1dfb      	adds	r3, r7, #7
   20890:	1c22      	adds	r2, r4, #0
   20892:	701a      	strb	r2, [r3, #0]
   20894:	1dbb      	adds	r3, r7, #6
   20896:	1c02      	adds	r2, r0, #0
   20898:	701a      	strb	r2, [r3, #0]
   2089a:	1d3b      	adds	r3, r7, #4
   2089c:	1c0a      	adds	r2, r1, #0
   2089e:	801a      	strh	r2, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
   208a0:	231f      	movs	r3, #31
   208a2:	18fb      	adds	r3, r7, r3
   208a4:	22ff      	movs	r2, #255	; 0xff
   208a6:	701a      	strb	r2, [r3, #0]
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
   208a8:	1dbb      	adds	r3, r7, #6
   208aa:	781b      	ldrb	r3, [r3, #0]
   208ac:	227f      	movs	r2, #127	; 0x7f
   208ae:	4013      	ands	r3, r2
   208b0:	b2da      	uxtb	r2, r3
   208b2:	2318      	movs	r3, #24
   208b4:	18fb      	adds	r3, r7, r3
   208b6:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
   208b8:	2318      	movs	r3, #24
   208ba:	18fb      	adds	r3, r7, r3
   208bc:	1dfa      	adds	r2, r7, #7
   208be:	7812      	ldrb	r2, [r2, #0]
   208c0:	701a      	strb	r2, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
   208c2:	2318      	movs	r3, #24
   208c4:	18fb      	adds	r3, r7, r3
   208c6:	2208      	movs	r2, #8
   208c8:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
   208ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   208cc:	2b00      	cmp	r3, #0
   208ce:	d011      	beq.n	208f4 <hif_send+0x74>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
   208d0:	2318      	movs	r3, #24
   208d2:	18fb      	adds	r3, r7, r3
   208d4:	885b      	ldrh	r3, [r3, #2]
   208d6:	b29a      	uxth	r2, r3
   208d8:	2338      	movs	r3, #56	; 0x38
   208da:	18f9      	adds	r1, r7, r3
   208dc:	2334      	movs	r3, #52	; 0x34
   208de:	18fb      	adds	r3, r7, r3
   208e0:	8809      	ldrh	r1, [r1, #0]
   208e2:	881b      	ldrh	r3, [r3, #0]
   208e4:	18cb      	adds	r3, r1, r3
   208e6:	b29b      	uxth	r3, r3
   208e8:	18d3      	adds	r3, r2, r3
   208ea:	b29a      	uxth	r2, r3
   208ec:	2318      	movs	r3, #24
   208ee:	18fb      	adds	r3, r7, r3
   208f0:	805a      	strh	r2, [r3, #2]
   208f2:	e00a      	b.n	2090a <hif_send+0x8a>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
   208f4:	2318      	movs	r3, #24
   208f6:	18fb      	adds	r3, r7, r3
   208f8:	885b      	ldrh	r3, [r3, #2]
   208fa:	b29a      	uxth	r2, r3
   208fc:	1d3b      	adds	r3, r7, #4
   208fe:	881b      	ldrh	r3, [r3, #0]
   20900:	18d3      	adds	r3, r2, r3
   20902:	b29a      	uxth	r2, r3
   20904:	2318      	movs	r3, #24
   20906:	18fb      	adds	r3, r7, r3
   20908:	805a      	strh	r2, [r3, #2]
	}
	ret = hif_chip_wake();
   2090a:	231f      	movs	r3, #31
   2090c:	18fc      	adds	r4, r7, r3
   2090e:	4bb2      	ldr	r3, [pc, #712]	; (20bd8 <hif_send+0x358>)
   20910:	4798      	blx	r3
   20912:	0003      	movs	r3, r0
   20914:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
   20916:	231f      	movs	r3, #31
   20918:	18fb      	adds	r3, r7, r3
   2091a:	781b      	ldrb	r3, [r3, #0]
   2091c:	b25b      	sxtb	r3, r3
   2091e:	2b00      	cmp	r3, #0
   20920:	d000      	beq.n	20924 <hif_send+0xa4>
   20922:	e129      	b.n	20b78 <hif_send+0x2f8>
	{
		volatile uint32 reg, dma_addr = 0;
   20924:	2300      	movs	r3, #0
   20926:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
   20928:	230e      	movs	r3, #14
   2092a:	18fb      	adds	r3, r7, r3
   2092c:	2200      	movs	r2, #0
   2092e:	801a      	strh	r2, [r3, #0]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
   20930:	2300      	movs	r3, #0
   20932:	617b      	str	r3, [r7, #20]
		reg |= (uint32)u8Gid;
   20934:	1dfb      	adds	r3, r7, #7
   20936:	781a      	ldrb	r2, [r3, #0]
   20938:	697b      	ldr	r3, [r7, #20]
   2093a:	4313      	orrs	r3, r2
   2093c:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
   2093e:	1dbb      	adds	r3, r7, #6
   20940:	781b      	ldrb	r3, [r3, #0]
   20942:	021a      	lsls	r2, r3, #8
   20944:	697b      	ldr	r3, [r7, #20]
   20946:	4313      	orrs	r3, r2
   20948:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)strHif.u16Length<<16);
   2094a:	2318      	movs	r3, #24
   2094c:	18fb      	adds	r3, r7, r3
   2094e:	885b      	ldrh	r3, [r3, #2]
   20950:	b29b      	uxth	r3, r3
   20952:	041a      	lsls	r2, r3, #16
   20954:	697b      	ldr	r3, [r7, #20]
   20956:	4313      	orrs	r3, r2
   20958:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
   2095a:	697b      	ldr	r3, [r7, #20]
   2095c:	221f      	movs	r2, #31
   2095e:	18bc      	adds	r4, r7, r2
   20960:	4a9e      	ldr	r2, [pc, #632]	; (20bdc <hif_send+0x35c>)
   20962:	0019      	movs	r1, r3
   20964:	0010      	movs	r0, r2
   20966:	4b9e      	ldr	r3, [pc, #632]	; (20be0 <hif_send+0x360>)
   20968:	4798      	blx	r3
   2096a:	0003      	movs	r3, r0
   2096c:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
   2096e:	231f      	movs	r3, #31
   20970:	18fb      	adds	r3, r7, r3
   20972:	781b      	ldrb	r3, [r3, #0]
   20974:	b25b      	sxtb	r3, r3
   20976:	2b00      	cmp	r3, #0
   20978:	d000      	beq.n	2097c <hif_send+0xfc>
   2097a:	e119      	b.n	20bb0 <hif_send+0x330>

		reg = 0UL;
   2097c:	2300      	movs	r3, #0
   2097e:	617b      	str	r3, [r7, #20]
		reg |= NBIT1;
   20980:	697b      	ldr	r3, [r7, #20]
   20982:	2202      	movs	r2, #2
   20984:	4313      	orrs	r3, r2
   20986:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
   20988:	697b      	ldr	r3, [r7, #20]
   2098a:	221f      	movs	r2, #31
   2098c:	18bc      	adds	r4, r7, r2
   2098e:	4a95      	ldr	r2, [pc, #596]	; (20be4 <hif_send+0x364>)
   20990:	0019      	movs	r1, r3
   20992:	0010      	movs	r0, r2
   20994:	4b92      	ldr	r3, [pc, #584]	; (20be0 <hif_send+0x360>)
   20996:	4798      	blx	r3
   20998:	0003      	movs	r3, r0
   2099a:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
   2099c:	231f      	movs	r3, #31
   2099e:	18fb      	adds	r3, r7, r3
   209a0:	781b      	ldrb	r3, [r3, #0]
   209a2:	b25b      	sxtb	r3, r3
   209a4:	2b00      	cmp	r3, #0
   209a6:	d000      	beq.n	209aa <hif_send+0x12a>
   209a8:	e104      	b.n	20bb4 <hif_send+0x334>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
   209aa:	2300      	movs	r3, #0
   209ac:	613b      	str	r3, [r7, #16]
		
		for(cnt = 0; cnt < 1000; cnt ++)
   209ae:	230e      	movs	r3, #14
   209b0:	18fb      	adds	r3, r7, r3
   209b2:	2200      	movs	r2, #0
   209b4:	801a      	strh	r2, [r3, #0]
   209b6:	e050      	b.n	20a5a <hif_send+0x1da>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
   209b8:	231f      	movs	r3, #31
   209ba:	18fc      	adds	r4, r7, r3
   209bc:	2314      	movs	r3, #20
   209be:	18fb      	adds	r3, r7, r3
   209c0:	4a88      	ldr	r2, [pc, #544]	; (20be4 <hif_send+0x364>)
   209c2:	0019      	movs	r1, r3
   209c4:	0010      	movs	r0, r2
   209c6:	4b88      	ldr	r3, [pc, #544]	; (20be8 <hif_send+0x368>)
   209c8:	4798      	blx	r3
   209ca:	0003      	movs	r3, r0
   209cc:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS) break;
   209ce:	231f      	movs	r3, #31
   209d0:	18fb      	adds	r3, r7, r3
   209d2:	781b      	ldrb	r3, [r3, #0]
   209d4:	b25b      	sxtb	r3, r3
   209d6:	2b00      	cmp	r3, #0
   209d8:	d147      	bne.n	20a6a <hif_send+0x1ea>
			/*
			 * If it takes too long to get a response, the slow down to 
			 * avoid back-to-back register read operations.
			 */
			if(cnt >= 500) {
   209da:	230e      	movs	r3, #14
   209dc:	18fb      	adds	r3, r7, r3
   209de:	881b      	ldrh	r3, [r3, #0]
   209e0:	b29a      	uxth	r2, r3
   209e2:	23f4      	movs	r3, #244	; 0xf4
   209e4:	33ff      	adds	r3, #255	; 0xff
   209e6:	429a      	cmp	r2, r3
   209e8:	d916      	bls.n	20a18 <hif_send+0x198>
				if(cnt < 501) {
   209ea:	230e      	movs	r3, #14
   209ec:	18fb      	adds	r3, r7, r3
   209ee:	881b      	ldrh	r3, [r3, #0]
   209f0:	b29a      	uxth	r2, r3
   209f2:	23fa      	movs	r3, #250	; 0xfa
   209f4:	005b      	lsls	r3, r3, #1
   209f6:	429a      	cmp	r2, r3
   209f8:	d80b      	bhi.n	20a12 <hif_send+0x192>
					M2M_INFO("Slowing down...\n");
   209fa:	4b7c      	ldr	r3, [pc, #496]	; (20bec <hif_send+0x36c>)
   209fc:	0018      	movs	r0, r3
   209fe:	4b7c      	ldr	r3, [pc, #496]	; (20bf0 <hif_send+0x370>)
   20a00:	4798      	blx	r3
   20a02:	4b7c      	ldr	r3, [pc, #496]	; (20bf4 <hif_send+0x374>)
   20a04:	0018      	movs	r0, r3
   20a06:	4b7a      	ldr	r3, [pc, #488]	; (20bf0 <hif_send+0x370>)
   20a08:	4798      	blx	r3
   20a0a:	4b7b      	ldr	r3, [pc, #492]	; (20bf8 <hif_send+0x378>)
   20a0c:	0018      	movs	r0, r3
   20a0e:	4b78      	ldr	r3, [pc, #480]	; (20bf0 <hif_send+0x370>)
   20a10:	4798      	blx	r3
				}
				nm_bsp_sleep(1);
   20a12:	2001      	movs	r0, #1
   20a14:	4b79      	ldr	r3, [pc, #484]	; (20bfc <hif_send+0x37c>)
   20a16:	4798      	blx	r3
			}
			if (!(reg & NBIT1))
   20a18:	697b      	ldr	r3, [r7, #20]
   20a1a:	2202      	movs	r2, #2
   20a1c:	4013      	ands	r3, r2
   20a1e:	d113      	bne.n	20a48 <hif_send+0x1c8>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
   20a20:	231f      	movs	r3, #31
   20a22:	18fc      	adds	r4, r7, r3
   20a24:	2310      	movs	r3, #16
   20a26:	18fb      	adds	r3, r7, r3
   20a28:	4a75      	ldr	r2, [pc, #468]	; (20c00 <hif_send+0x380>)
   20a2a:	0019      	movs	r1, r3
   20a2c:	0010      	movs	r0, r2
   20a2e:	4b6e      	ldr	r3, [pc, #440]	; (20be8 <hif_send+0x368>)
   20a30:	4798      	blx	r3
   20a32:	0003      	movs	r3, r0
   20a34:	7023      	strb	r3, [r4, #0]
				if(ret != M2M_SUCCESS) {
   20a36:	231f      	movs	r3, #31
   20a38:	18fb      	adds	r3, r7, r3
   20a3a:	781b      	ldrb	r3, [r3, #0]
   20a3c:	b25b      	sxtb	r3, r3
   20a3e:	2b00      	cmp	r3, #0
   20a40:	d015      	beq.n	20a6e <hif_send+0x1ee>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
   20a42:	2300      	movs	r3, #0
   20a44:	613b      	str	r3, [r7, #16]
					goto ERR1;
   20a46:	e0bc      	b.n	20bc2 <hif_send+0x342>
		for(cnt = 0; cnt < 1000; cnt ++)
   20a48:	230e      	movs	r3, #14
   20a4a:	18fb      	adds	r3, r7, r3
   20a4c:	881b      	ldrh	r3, [r3, #0]
   20a4e:	b29b      	uxth	r3, r3
   20a50:	3301      	adds	r3, #1
   20a52:	b29a      	uxth	r2, r3
   20a54:	230e      	movs	r3, #14
   20a56:	18fb      	adds	r3, r7, r3
   20a58:	801a      	strh	r2, [r3, #0]
   20a5a:	230e      	movs	r3, #14
   20a5c:	18fb      	adds	r3, r7, r3
   20a5e:	881b      	ldrh	r3, [r3, #0]
   20a60:	b29b      	uxth	r3, r3
   20a62:	4a68      	ldr	r2, [pc, #416]	; (20c04 <hif_send+0x384>)
   20a64:	4293      	cmp	r3, r2
   20a66:	d9a7      	bls.n	209b8 <hif_send+0x138>
   20a68:	e002      	b.n	20a70 <hif_send+0x1f0>
			if(ret != M2M_SUCCESS) break;
   20a6a:	46c0      	nop			; (mov r8, r8)
   20a6c:	e000      	b.n	20a70 <hif_send+0x1f0>
				}
				/*in case of success break */
				break;
   20a6e:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (dma_addr != 0)
   20a70:	693b      	ldr	r3, [r7, #16]
   20a72:	2b00      	cmp	r3, #0
   20a74:	d100      	bne.n	20a78 <hif_send+0x1f8>
   20a76:	e074      	b.n	20b62 <hif_send+0x2e2>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
   20a78:	693b      	ldr	r3, [r7, #16]
   20a7a:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
   20a7c:	2318      	movs	r3, #24
   20a7e:	18fb      	adds	r3, r7, r3
   20a80:	885b      	ldrh	r3, [r3, #2]
   20a82:	b29a      	uxth	r2, r3
   20a84:	2318      	movs	r3, #24
   20a86:	18fb      	adds	r3, r7, r3
   20a88:	805a      	strh	r2, [r3, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
   20a8a:	68bb      	ldr	r3, [r7, #8]
   20a8c:	221f      	movs	r2, #31
   20a8e:	18bc      	adds	r4, r7, r2
   20a90:	2218      	movs	r2, #24
   20a92:	18b9      	adds	r1, r7, r2
   20a94:	2208      	movs	r2, #8
   20a96:	0018      	movs	r0, r3
   20a98:	4b5b      	ldr	r3, [pc, #364]	; (20c08 <hif_send+0x388>)
   20a9a:	4798      	blx	r3
   20a9c:	0003      	movs	r3, r0
   20a9e:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
   20aa0:	231f      	movs	r3, #31
   20aa2:	18fb      	adds	r3, r7, r3
   20aa4:	781b      	ldrb	r3, [r3, #0]
   20aa6:	b25b      	sxtb	r3, r3
   20aa8:	2b00      	cmp	r3, #0
   20aaa:	d000      	beq.n	20aae <hif_send+0x22e>
   20aac:	e084      	b.n	20bb8 <hif_send+0x338>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
   20aae:	68bb      	ldr	r3, [r7, #8]
   20ab0:	3308      	adds	r3, #8
   20ab2:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
   20ab4:	683b      	ldr	r3, [r7, #0]
   20ab6:	2b00      	cmp	r3, #0
   20ab8:	d016      	beq.n	20ae8 <hif_send+0x268>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
   20aba:	68b8      	ldr	r0, [r7, #8]
   20abc:	1d3b      	adds	r3, r7, #4
   20abe:	881a      	ldrh	r2, [r3, #0]
   20ac0:	231f      	movs	r3, #31
   20ac2:	18fc      	adds	r4, r7, r3
   20ac4:	683b      	ldr	r3, [r7, #0]
   20ac6:	0019      	movs	r1, r3
   20ac8:	4b4f      	ldr	r3, [pc, #316]	; (20c08 <hif_send+0x388>)
   20aca:	4798      	blx	r3
   20acc:	0003      	movs	r3, r0
   20ace:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
   20ad0:	231f      	movs	r3, #31
   20ad2:	18fb      	adds	r3, r7, r3
   20ad4:	781b      	ldrb	r3, [r3, #0]
   20ad6:	b25b      	sxtb	r3, r3
   20ad8:	2b00      	cmp	r3, #0
   20ada:	d000      	beq.n	20ade <hif_send+0x25e>
   20adc:	e06e      	b.n	20bbc <hif_send+0x33c>
				u32CurrAddr += u16CtrlBufSize;
   20ade:	1d3b      	adds	r3, r7, #4
   20ae0:	881a      	ldrh	r2, [r3, #0]
   20ae2:	68bb      	ldr	r3, [r7, #8]
   20ae4:	18d3      	adds	r3, r2, r3
   20ae6:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
   20ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   20aea:	2b00      	cmp	r3, #0
   20aec:	d021      	beq.n	20b32 <hif_send+0x2b2>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
   20aee:	2338      	movs	r3, #56	; 0x38
   20af0:	18fb      	adds	r3, r7, r3
   20af2:	881a      	ldrh	r2, [r3, #0]
   20af4:	1d3b      	adds	r3, r7, #4
   20af6:	881b      	ldrh	r3, [r3, #0]
   20af8:	1ad3      	subs	r3, r2, r3
   20afa:	001a      	movs	r2, r3
   20afc:	68bb      	ldr	r3, [r7, #8]
   20afe:	18d3      	adds	r3, r2, r3
   20b00:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
   20b02:	68b8      	ldr	r0, [r7, #8]
   20b04:	2334      	movs	r3, #52	; 0x34
   20b06:	18fb      	adds	r3, r7, r3
   20b08:	881a      	ldrh	r2, [r3, #0]
   20b0a:	231f      	movs	r3, #31
   20b0c:	18fc      	adds	r4, r7, r3
   20b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   20b10:	0019      	movs	r1, r3
   20b12:	4b3d      	ldr	r3, [pc, #244]	; (20c08 <hif_send+0x388>)
   20b14:	4798      	blx	r3
   20b16:	0003      	movs	r3, r0
   20b18:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
   20b1a:	231f      	movs	r3, #31
   20b1c:	18fb      	adds	r3, r7, r3
   20b1e:	781b      	ldrb	r3, [r3, #0]
   20b20:	b25b      	sxtb	r3, r3
   20b22:	2b00      	cmp	r3, #0
   20b24:	d14c      	bne.n	20bc0 <hif_send+0x340>
				u32CurrAddr += u16DataSize;
   20b26:	2334      	movs	r3, #52	; 0x34
   20b28:	18fb      	adds	r3, r7, r3
   20b2a:	881a      	ldrh	r2, [r3, #0]
   20b2c:	68bb      	ldr	r3, [r7, #8]
   20b2e:	18d3      	adds	r3, r2, r3
   20b30:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
   20b32:	693b      	ldr	r3, [r7, #16]
   20b34:	009b      	lsls	r3, r3, #2
   20b36:	617b      	str	r3, [r7, #20]
			reg |= NBIT1;
   20b38:	697b      	ldr	r3, [r7, #20]
   20b3a:	2202      	movs	r2, #2
   20b3c:	4313      	orrs	r3, r2
   20b3e:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
   20b40:	697b      	ldr	r3, [r7, #20]
   20b42:	221f      	movs	r2, #31
   20b44:	18bc      	adds	r4, r7, r2
   20b46:	4a31      	ldr	r2, [pc, #196]	; (20c0c <hif_send+0x38c>)
   20b48:	0019      	movs	r1, r3
   20b4a:	0010      	movs	r0, r2
   20b4c:	4b24      	ldr	r3, [pc, #144]	; (20be0 <hif_send+0x360>)
   20b4e:	4798      	blx	r3
   20b50:	0003      	movs	r3, r0
   20b52:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
   20b54:	231f      	movs	r3, #31
   20b56:	18fb      	adds	r3, r7, r3
   20b58:	781b      	ldrb	r3, [r3, #0]
   20b5a:	b25b      	sxtb	r3, r3
   20b5c:	2b00      	cmp	r3, #0
   20b5e:	d01c      	beq.n	20b9a <hif_send+0x31a>
   20b60:	e02f      	b.n	20bc2 <hif_send+0x342>
		}
		else
		{
			ret = hif_chip_sleep();
   20b62:	231f      	movs	r3, #31
   20b64:	18fc      	adds	r4, r7, r3
   20b66:	4b2a      	ldr	r3, [pc, #168]	; (20c10 <hif_send+0x390>)
   20b68:	4798      	blx	r3
   20b6a:	0003      	movs	r3, r0
   20b6c:	7023      	strb	r3, [r4, #0]
			M2M_DBG("Failed to alloc rx size %d\r",ret);
			ret = M2M_ERR_MEM_ALLOC;
   20b6e:	231f      	movs	r3, #31
   20b70:	18fb      	adds	r3, r7, r3
   20b72:	22fd      	movs	r2, #253	; 0xfd
   20b74:	701a      	strb	r2, [r3, #0]
			goto ERR2;
   20b76:	e026      	b.n	20bc6 <hif_send+0x346>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
   20b78:	2398      	movs	r3, #152	; 0x98
   20b7a:	33ff      	adds	r3, #255	; 0xff
   20b7c:	001a      	movs	r2, r3
   20b7e:	4925      	ldr	r1, [pc, #148]	; (20c14 <hif_send+0x394>)
   20b80:	4b25      	ldr	r3, [pc, #148]	; (20c18 <hif_send+0x398>)
   20b82:	0018      	movs	r0, r3
   20b84:	4b1a      	ldr	r3, [pc, #104]	; (20bf0 <hif_send+0x370>)
   20b86:	4798      	blx	r3
   20b88:	4b24      	ldr	r3, [pc, #144]	; (20c1c <hif_send+0x39c>)
   20b8a:	0018      	movs	r0, r3
   20b8c:	4b18      	ldr	r3, [pc, #96]	; (20bf0 <hif_send+0x370>)
   20b8e:	4798      	blx	r3
   20b90:	4b19      	ldr	r3, [pc, #100]	; (20bf8 <hif_send+0x378>)
   20b92:	0018      	movs	r0, r3
   20b94:	4b16      	ldr	r3, [pc, #88]	; (20bf0 <hif_send+0x370>)
   20b96:	4798      	blx	r3
		goto ERR2;
   20b98:	e015      	b.n	20bc6 <hif_send+0x346>
	}
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
   20b9a:	231f      	movs	r3, #31
   20b9c:	18fc      	adds	r4, r7, r3
   20b9e:	4b1c      	ldr	r3, [pc, #112]	; (20c10 <hif_send+0x390>)
   20ba0:	4798      	blx	r3
   20ba2:	0003      	movs	r3, r0
   20ba4:	7023      	strb	r3, [r4, #0]
	return ret;
   20ba6:	231f      	movs	r3, #31
   20ba8:	18fb      	adds	r3, r7, r3
   20baa:	781b      	ldrb	r3, [r3, #0]
   20bac:	b25b      	sxtb	r3, r3
   20bae:	e00e      	b.n	20bce <hif_send+0x34e>
		if(M2M_SUCCESS != ret) goto ERR1;
   20bb0:	46c0      	nop			; (mov r8, r8)
   20bb2:	e006      	b.n	20bc2 <hif_send+0x342>
		if(M2M_SUCCESS != ret) goto ERR1;
   20bb4:	46c0      	nop			; (mov r8, r8)
   20bb6:	e004      	b.n	20bc2 <hif_send+0x342>
			if(M2M_SUCCESS != ret) goto ERR1;
   20bb8:	46c0      	nop			; (mov r8, r8)
   20bba:	e002      	b.n	20bc2 <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
   20bbc:	46c0      	nop			; (mov r8, r8)
   20bbe:	e000      	b.n	20bc2 <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
   20bc0:	46c0      	nop			; (mov r8, r8)
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
   20bc2:	4b17      	ldr	r3, [pc, #92]	; (20c20 <hif_send+0x3a0>)
   20bc4:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
   20bc6:	231f      	movs	r3, #31
   20bc8:	18fb      	adds	r3, r7, r3
   20bca:	781b      	ldrb	r3, [r3, #0]
   20bcc:	b25b      	sxtb	r3, r3
}
   20bce:	0018      	movs	r0, r3
   20bd0:	46bd      	mov	sp, r7
   20bd2:	b009      	add	sp, #36	; 0x24
   20bd4:	bd90      	pop	{r4, r7, pc}
   20bd6:	46c0      	nop			; (mov r8, r8)
   20bd8:	00020749 	.word	0x00020749
   20bdc:	0000108c 	.word	0x0000108c
   20be0:	000226d5 	.word	0x000226d5
   20be4:	00001078 	.word	0x00001078
   20be8:	000226b1 	.word	0x000226b1
   20bec:	00038d6c 	.word	0x00038d6c
   20bf0:	0001dc4d 	.word	0x0001dc4d
   20bf4:	00038d78 	.word	0x00038d78
   20bf8:	00038d8c 	.word	0x00038d8c
   20bfc:	0001fd41 	.word	0x0001fd41
   20c00:	00150400 	.word	0x00150400
   20c04:	000003e7 	.word	0x000003e7
   20c08:	0002281d 	.word	0x0002281d
   20c0c:	0000106c 	.word	0x0000106c
   20c10:	000207e1 	.word	0x000207e1
   20c14:	00039094 	.word	0x00039094
   20c18:	00038d90 	.word	0x00038d90
   20c1c:	00038da4 	.word	0x00038da4
   20c20:	000207b9 	.word	0x000207b9

00020c24 <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
   20c24:	b590      	push	{r4, r7, lr}
   20c26:	b087      	sub	sp, #28
   20c28:	af02      	add	r7, sp, #8
	sint8 ret = M2M_SUCCESS;
   20c2a:	230f      	movs	r3, #15
   20c2c:	18fb      	adds	r3, r7, r3
   20c2e:	2200      	movs	r2, #0
   20c30:	701a      	strb	r2, [r3, #0]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
   20c32:	230f      	movs	r3, #15
   20c34:	18fc      	adds	r4, r7, r3
   20c36:	2308      	movs	r3, #8
   20c38:	18fb      	adds	r3, r7, r3
   20c3a:	4adc      	ldr	r2, [pc, #880]	; (20fac <hif_isr+0x388>)
   20c3c:	0019      	movs	r1, r3
   20c3e:	0010      	movs	r0, r2
   20c40:	4bdb      	ldr	r3, [pc, #876]	; (20fb0 <hif_isr+0x38c>)
   20c42:	4798      	blx	r3
   20c44:	0003      	movs	r3, r0
   20c46:	7023      	strb	r3, [r4, #0]
	if(M2M_SUCCESS == ret)
   20c48:	230f      	movs	r3, #15
   20c4a:	18fb      	adds	r3, r7, r3
   20c4c:	781b      	ldrb	r3, [r3, #0]
   20c4e:	b25b      	sxtb	r3, r3
   20c50:	2b00      	cmp	r3, #0
   20c52:	d000      	beq.n	20c56 <hif_isr+0x32>
   20c54:	e21e      	b.n	21094 <hif_isr+0x470>
	{
		if(reg & 0x1)	/* New interrupt has been received */
   20c56:	68bb      	ldr	r3, [r7, #8]
   20c58:	2201      	movs	r2, #1
   20c5a:	4013      	ands	r3, r2
   20c5c:	d100      	bne.n	20c60 <hif_isr+0x3c>
   20c5e:	e204      	b.n	2106a <hif_isr+0x446>
		{
			uint16 size;

			nm_bsp_interrupt_ctrl(0);
   20c60:	2000      	movs	r0, #0
   20c62:	4bd4      	ldr	r3, [pc, #848]	; (20fb4 <hif_isr+0x390>)
   20c64:	4798      	blx	r3
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
   20c66:	68bb      	ldr	r3, [r7, #8]
   20c68:	2201      	movs	r2, #1
   20c6a:	4393      	bics	r3, r2
   20c6c:	60bb      	str	r3, [r7, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   20c6e:	68bb      	ldr	r3, [r7, #8]
   20c70:	220f      	movs	r2, #15
   20c72:	18bc      	adds	r4, r7, r2
   20c74:	4acd      	ldr	r2, [pc, #820]	; (20fac <hif_isr+0x388>)
   20c76:	0019      	movs	r1, r3
   20c78:	0010      	movs	r0, r2
   20c7a:	4bcf      	ldr	r3, [pc, #828]	; (20fb8 <hif_isr+0x394>)
   20c7c:	4798      	blx	r3
   20c7e:	0003      	movs	r3, r0
   20c80:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
   20c82:	230f      	movs	r3, #15
   20c84:	18fb      	adds	r3, r7, r3
   20c86:	781b      	ldrb	r3, [r3, #0]
   20c88:	b25b      	sxtb	r3, r3
   20c8a:	2b00      	cmp	r3, #0
   20c8c:	d000      	beq.n	20c90 <hif_isr+0x6c>
   20c8e:	e210      	b.n	210b2 <hif_isr+0x48e>
			gstrHifCxt.u8HifRXDone = 1;
   20c90:	4bca      	ldr	r3, [pc, #808]	; (20fbc <hif_isr+0x398>)
   20c92:	2201      	movs	r2, #1
   20c94:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
   20c96:	68bb      	ldr	r3, [r7, #8]
   20c98:	089b      	lsrs	r3, r3, #2
   20c9a:	b29a      	uxth	r2, r3
   20c9c:	230c      	movs	r3, #12
   20c9e:	18fb      	adds	r3, r7, r3
   20ca0:	0512      	lsls	r2, r2, #20
   20ca2:	0d12      	lsrs	r2, r2, #20
   20ca4:	801a      	strh	r2, [r3, #0]
			if (size > 0) {
   20ca6:	230c      	movs	r3, #12
   20ca8:	18fb      	adds	r3, r7, r3
   20caa:	881b      	ldrh	r3, [r3, #0]
   20cac:	2b00      	cmp	r3, #0
   20cae:	d100      	bne.n	20cb2 <hif_isr+0x8e>
   20cb0:	e1c8      	b.n	21044 <hif_isr+0x420>
				uint32 address = 0;
   20cb2:	2300      	movs	r3, #0
   20cb4:	603b      	str	r3, [r7, #0]
				/**
				start bus transfer
				**/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
   20cb6:	230f      	movs	r3, #15
   20cb8:	18fc      	adds	r4, r7, r3
   20cba:	003b      	movs	r3, r7
   20cbc:	4ac0      	ldr	r2, [pc, #768]	; (20fc0 <hif_isr+0x39c>)
   20cbe:	0019      	movs	r1, r3
   20cc0:	0010      	movs	r0, r2
   20cc2:	4bbb      	ldr	r3, [pc, #748]	; (20fb0 <hif_isr+0x38c>)
   20cc4:	4798      	blx	r3
   20cc6:	0003      	movs	r3, r0
   20cc8:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret)
   20cca:	230f      	movs	r3, #15
   20ccc:	18fb      	adds	r3, r7, r3
   20cce:	781b      	ldrb	r3, [r3, #0]
   20cd0:	b25b      	sxtb	r3, r3
   20cd2:	2b00      	cmp	r3, #0
   20cd4:	d012      	beq.n	20cfc <hif_isr+0xd8>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
   20cd6:	23e4      	movs	r3, #228	; 0xe4
   20cd8:	005a      	lsls	r2, r3, #1
   20cda:	49ba      	ldr	r1, [pc, #744]	; (20fc4 <hif_isr+0x3a0>)
   20cdc:	4bba      	ldr	r3, [pc, #744]	; (20fc8 <hif_isr+0x3a4>)
   20cde:	0018      	movs	r0, r3
   20ce0:	4bba      	ldr	r3, [pc, #744]	; (20fcc <hif_isr+0x3a8>)
   20ce2:	4798      	blx	r3
   20ce4:	4bba      	ldr	r3, [pc, #744]	; (20fd0 <hif_isr+0x3ac>)
   20ce6:	0018      	movs	r0, r3
   20ce8:	4bb8      	ldr	r3, [pc, #736]	; (20fcc <hif_isr+0x3a8>)
   20cea:	4798      	blx	r3
   20cec:	4bb9      	ldr	r3, [pc, #740]	; (20fd4 <hif_isr+0x3b0>)
   20cee:	0018      	movs	r0, r3
   20cf0:	4bb6      	ldr	r3, [pc, #728]	; (20fcc <hif_isr+0x3a8>)
   20cf2:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
   20cf4:	2001      	movs	r0, #1
   20cf6:	4baf      	ldr	r3, [pc, #700]	; (20fb4 <hif_isr+0x390>)
   20cf8:	4798      	blx	r3
					goto ERR1;
   20cfa:	e1db      	b.n	210b4 <hif_isr+0x490>
				}
				gstrHifCxt.u32RxAddr = address;
   20cfc:	683a      	ldr	r2, [r7, #0]
   20cfe:	4baf      	ldr	r3, [pc, #700]	; (20fbc <hif_isr+0x398>)
   20d00:	609a      	str	r2, [r3, #8]
				gstrHifCxt.u32RxSize = size;
   20d02:	230c      	movs	r3, #12
   20d04:	18fb      	adds	r3, r7, r3
   20d06:	881a      	ldrh	r2, [r3, #0]
   20d08:	4bac      	ldr	r3, [pc, #688]	; (20fbc <hif_isr+0x398>)
   20d0a:	60da      	str	r2, [r3, #12]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
   20d0c:	683b      	ldr	r3, [r7, #0]
   20d0e:	220f      	movs	r2, #15
   20d10:	18bc      	adds	r4, r7, r2
   20d12:	1d39      	adds	r1, r7, #4
   20d14:	2204      	movs	r2, #4
   20d16:	0018      	movs	r0, r3
   20d18:	4baf      	ldr	r3, [pc, #700]	; (20fd8 <hif_isr+0x3b4>)
   20d1a:	4798      	blx	r3
   20d1c:	0003      	movs	r3, r0
   20d1e:	7023      	strb	r3, [r4, #0]
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
   20d20:	1d3b      	adds	r3, r7, #4
   20d22:	885b      	ldrh	r3, [r3, #2]
   20d24:	b29a      	uxth	r2, r3
   20d26:	1d3b      	adds	r3, r7, #4
   20d28:	805a      	strh	r2, [r3, #2]
				if(M2M_SUCCESS != ret)
   20d2a:	230f      	movs	r3, #15
   20d2c:	18fb      	adds	r3, r7, r3
   20d2e:	781b      	ldrb	r3, [r3, #0]
   20d30:	b25b      	sxtb	r3, r3
   20d32:	2b00      	cmp	r3, #0
   20d34:	d012      	beq.n	20d5c <hif_isr+0x138>
				{
					M2M_ERR("(hif) address bus fail\n");
   20d36:	23e9      	movs	r3, #233	; 0xe9
   20d38:	005a      	lsls	r2, r3, #1
   20d3a:	49a2      	ldr	r1, [pc, #648]	; (20fc4 <hif_isr+0x3a0>)
   20d3c:	4ba2      	ldr	r3, [pc, #648]	; (20fc8 <hif_isr+0x3a4>)
   20d3e:	0018      	movs	r0, r3
   20d40:	4ba2      	ldr	r3, [pc, #648]	; (20fcc <hif_isr+0x3a8>)
   20d42:	4798      	blx	r3
   20d44:	4ba5      	ldr	r3, [pc, #660]	; (20fdc <hif_isr+0x3b8>)
   20d46:	0018      	movs	r0, r3
   20d48:	4ba0      	ldr	r3, [pc, #640]	; (20fcc <hif_isr+0x3a8>)
   20d4a:	4798      	blx	r3
   20d4c:	4ba1      	ldr	r3, [pc, #644]	; (20fd4 <hif_isr+0x3b0>)
   20d4e:	0018      	movs	r0, r3
   20d50:	4b9e      	ldr	r3, [pc, #632]	; (20fcc <hif_isr+0x3a8>)
   20d52:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
   20d54:	2001      	movs	r0, #1
   20d56:	4b97      	ldr	r3, [pc, #604]	; (20fb4 <hif_isr+0x390>)
   20d58:	4798      	blx	r3
					goto ERR1;
   20d5a:	e1ab      	b.n	210b4 <hif_isr+0x490>
				}
				if(strHif.u16Length != size)
   20d5c:	1d3b      	adds	r3, r7, #4
   20d5e:	885b      	ldrh	r3, [r3, #2]
   20d60:	b29b      	uxth	r3, r3
   20d62:	220c      	movs	r2, #12
   20d64:	18ba      	adds	r2, r7, r2
   20d66:	8812      	ldrh	r2, [r2, #0]
   20d68:	429a      	cmp	r2, r3
   20d6a:	d02f      	beq.n	20dcc <hif_isr+0x1a8>
				{
					if((size - strHif.u16Length) > 4)
   20d6c:	230c      	movs	r3, #12
   20d6e:	18fb      	adds	r3, r7, r3
   20d70:	881b      	ldrh	r3, [r3, #0]
   20d72:	1d3a      	adds	r2, r7, #4
   20d74:	8852      	ldrh	r2, [r2, #2]
   20d76:	b292      	uxth	r2, r2
   20d78:	1a9b      	subs	r3, r3, r2
   20d7a:	2b04      	cmp	r3, #4
   20d7c:	dd26      	ble.n	20dcc <hif_isr+0x1a8>
					{
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
   20d7e:	23dc      	movs	r3, #220	; 0xdc
   20d80:	33ff      	adds	r3, #255	; 0xff
   20d82:	001a      	movs	r2, r3
   20d84:	498f      	ldr	r1, [pc, #572]	; (20fc4 <hif_isr+0x3a0>)
   20d86:	4b90      	ldr	r3, [pc, #576]	; (20fc8 <hif_isr+0x3a4>)
   20d88:	0018      	movs	r0, r3
   20d8a:	4b90      	ldr	r3, [pc, #576]	; (20fcc <hif_isr+0x3a8>)
   20d8c:	4798      	blx	r3
   20d8e:	230c      	movs	r3, #12
   20d90:	18fb      	adds	r3, r7, r3
   20d92:	8819      	ldrh	r1, [r3, #0]
   20d94:	1d3b      	adds	r3, r7, #4
   20d96:	885b      	ldrh	r3, [r3, #2]
   20d98:	b29b      	uxth	r3, r3
   20d9a:	001a      	movs	r2, r3
   20d9c:	1d3b      	adds	r3, r7, #4
   20d9e:	781b      	ldrb	r3, [r3, #0]
   20da0:	b2db      	uxtb	r3, r3
   20da2:	001c      	movs	r4, r3
   20da4:	1d3b      	adds	r3, r7, #4
   20da6:	785b      	ldrb	r3, [r3, #1]
   20da8:	b2db      	uxtb	r3, r3
   20daa:	488d      	ldr	r0, [pc, #564]	; (20fe0 <hif_isr+0x3bc>)
   20dac:	9300      	str	r3, [sp, #0]
   20dae:	0023      	movs	r3, r4
   20db0:	4c86      	ldr	r4, [pc, #536]	; (20fcc <hif_isr+0x3a8>)
   20db2:	47a0      	blx	r4
   20db4:	4b87      	ldr	r3, [pc, #540]	; (20fd4 <hif_isr+0x3b0>)
   20db6:	0018      	movs	r0, r3
   20db8:	4b84      	ldr	r3, [pc, #528]	; (20fcc <hif_isr+0x3a8>)
   20dba:	4798      	blx	r3
							size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
						nm_bsp_interrupt_ctrl(1);
   20dbc:	2001      	movs	r0, #1
   20dbe:	4b7d      	ldr	r3, [pc, #500]	; (20fb4 <hif_isr+0x390>)
   20dc0:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
   20dc2:	230f      	movs	r3, #15
   20dc4:	18fb      	adds	r3, r7, r3
   20dc6:	22fa      	movs	r2, #250	; 0xfa
   20dc8:	701a      	strb	r2, [r3, #0]
						goto ERR1;
   20dca:	e173      	b.n	210b4 <hif_isr+0x490>
					}
				}

				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
   20dcc:	1d3b      	adds	r3, r7, #4
   20dce:	781b      	ldrb	r3, [r3, #0]
   20dd0:	b2db      	uxtb	r3, r3
   20dd2:	2b01      	cmp	r3, #1
   20dd4:	d122      	bne.n	20e1c <hif_isr+0x1f8>
				{
					if(gstrHifCxt.pfWifiCb)
   20dd6:	4b79      	ldr	r3, [pc, #484]	; (20fbc <hif_isr+0x398>)
   20dd8:	691b      	ldr	r3, [r3, #16]
   20dda:	2b00      	cmp	r3, #0
   20ddc:	d00d      	beq.n	20dfa <hif_isr+0x1d6>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   20dde:	4b77      	ldr	r3, [pc, #476]	; (20fbc <hif_isr+0x398>)
   20de0:	691b      	ldr	r3, [r3, #16]
   20de2:	1d3a      	adds	r2, r7, #4
   20de4:	7852      	ldrb	r2, [r2, #1]
   20de6:	b2d0      	uxtb	r0, r2
   20de8:	1d3a      	adds	r2, r7, #4
   20dea:	8852      	ldrh	r2, [r2, #2]
   20dec:	b292      	uxth	r2, r2
   20dee:	3a08      	subs	r2, #8
   20df0:	b291      	uxth	r1, r2
   20df2:	683a      	ldr	r2, [r7, #0]
   20df4:	3208      	adds	r2, #8
   20df6:	4798      	blx	r3
   20df8:	e102      	b.n	21000 <hif_isr+0x3dc>
					else
						M2M_ERR("WIFI callback is not registered\n");
   20dfa:	23e8      	movs	r3, #232	; 0xe8
   20dfc:	33ff      	adds	r3, #255	; 0xff
   20dfe:	001a      	movs	r2, r3
   20e00:	4970      	ldr	r1, [pc, #448]	; (20fc4 <hif_isr+0x3a0>)
   20e02:	4b71      	ldr	r3, [pc, #452]	; (20fc8 <hif_isr+0x3a4>)
   20e04:	0018      	movs	r0, r3
   20e06:	4b71      	ldr	r3, [pc, #452]	; (20fcc <hif_isr+0x3a8>)
   20e08:	4798      	blx	r3
   20e0a:	4b76      	ldr	r3, [pc, #472]	; (20fe4 <hif_isr+0x3c0>)
   20e0c:	0018      	movs	r0, r3
   20e0e:	4b6f      	ldr	r3, [pc, #444]	; (20fcc <hif_isr+0x3a8>)
   20e10:	4798      	blx	r3
   20e12:	4b70      	ldr	r3, [pc, #448]	; (20fd4 <hif_isr+0x3b0>)
   20e14:	0018      	movs	r0, r3
   20e16:	4b6d      	ldr	r3, [pc, #436]	; (20fcc <hif_isr+0x3a8>)
   20e18:	4798      	blx	r3
   20e1a:	e0f1      	b.n	21000 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
   20e1c:	1d3b      	adds	r3, r7, #4
   20e1e:	781b      	ldrb	r3, [r3, #0]
   20e20:	b2db      	uxtb	r3, r3
   20e22:	2b02      	cmp	r3, #2
   20e24:	d122      	bne.n	20e6c <hif_isr+0x248>
				{
					if(gstrHifCxt.pfIpCb)
   20e26:	4b65      	ldr	r3, [pc, #404]	; (20fbc <hif_isr+0x398>)
   20e28:	695b      	ldr	r3, [r3, #20]
   20e2a:	2b00      	cmp	r3, #0
   20e2c:	d00d      	beq.n	20e4a <hif_isr+0x226>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   20e2e:	4b63      	ldr	r3, [pc, #396]	; (20fbc <hif_isr+0x398>)
   20e30:	695b      	ldr	r3, [r3, #20]
   20e32:	1d3a      	adds	r2, r7, #4
   20e34:	7852      	ldrb	r2, [r2, #1]
   20e36:	b2d0      	uxtb	r0, r2
   20e38:	1d3a      	adds	r2, r7, #4
   20e3a:	8852      	ldrh	r2, [r2, #2]
   20e3c:	b292      	uxth	r2, r2
   20e3e:	3a08      	subs	r2, #8
   20e40:	b291      	uxth	r1, r2
   20e42:	683a      	ldr	r2, [r7, #0]
   20e44:	3208      	adds	r2, #8
   20e46:	4798      	blx	r3
   20e48:	e0da      	b.n	21000 <hif_isr+0x3dc>
					else
						M2M_ERR("Scoket callback is not registered\n");
   20e4a:	23f0      	movs	r3, #240	; 0xf0
   20e4c:	33ff      	adds	r3, #255	; 0xff
   20e4e:	001a      	movs	r2, r3
   20e50:	495c      	ldr	r1, [pc, #368]	; (20fc4 <hif_isr+0x3a0>)
   20e52:	4b5d      	ldr	r3, [pc, #372]	; (20fc8 <hif_isr+0x3a4>)
   20e54:	0018      	movs	r0, r3
   20e56:	4b5d      	ldr	r3, [pc, #372]	; (20fcc <hif_isr+0x3a8>)
   20e58:	4798      	blx	r3
   20e5a:	4b63      	ldr	r3, [pc, #396]	; (20fe8 <hif_isr+0x3c4>)
   20e5c:	0018      	movs	r0, r3
   20e5e:	4b5b      	ldr	r3, [pc, #364]	; (20fcc <hif_isr+0x3a8>)
   20e60:	4798      	blx	r3
   20e62:	4b5c      	ldr	r3, [pc, #368]	; (20fd4 <hif_isr+0x3b0>)
   20e64:	0018      	movs	r0, r3
   20e66:	4b59      	ldr	r3, [pc, #356]	; (20fcc <hif_isr+0x3a8>)
   20e68:	4798      	blx	r3
   20e6a:	e0c9      	b.n	21000 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
   20e6c:	1d3b      	adds	r3, r7, #4
   20e6e:	781b      	ldrb	r3, [r3, #0]
   20e70:	b2db      	uxtb	r3, r3
   20e72:	2b04      	cmp	r3, #4
   20e74:	d122      	bne.n	20ebc <hif_isr+0x298>
				{
					if(gstrHifCxt.pfOtaCb)
   20e76:	4b51      	ldr	r3, [pc, #324]	; (20fbc <hif_isr+0x398>)
   20e78:	699b      	ldr	r3, [r3, #24]
   20e7a:	2b00      	cmp	r3, #0
   20e7c:	d00d      	beq.n	20e9a <hif_isr+0x276>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   20e7e:	4b4f      	ldr	r3, [pc, #316]	; (20fbc <hif_isr+0x398>)
   20e80:	699b      	ldr	r3, [r3, #24]
   20e82:	1d3a      	adds	r2, r7, #4
   20e84:	7852      	ldrb	r2, [r2, #1]
   20e86:	b2d0      	uxtb	r0, r2
   20e88:	1d3a      	adds	r2, r7, #4
   20e8a:	8852      	ldrh	r2, [r2, #2]
   20e8c:	b292      	uxth	r2, r2
   20e8e:	3a08      	subs	r2, #8
   20e90:	b291      	uxth	r1, r2
   20e92:	683a      	ldr	r2, [r7, #0]
   20e94:	3208      	adds	r2, #8
   20e96:	4798      	blx	r3
   20e98:	e0b2      	b.n	21000 <hif_isr+0x3dc>
					else
						M2M_ERR("Ota callback is not registered\n");
   20e9a:	23f8      	movs	r3, #248	; 0xf8
   20e9c:	33ff      	adds	r3, #255	; 0xff
   20e9e:	001a      	movs	r2, r3
   20ea0:	4948      	ldr	r1, [pc, #288]	; (20fc4 <hif_isr+0x3a0>)
   20ea2:	4b49      	ldr	r3, [pc, #292]	; (20fc8 <hif_isr+0x3a4>)
   20ea4:	0018      	movs	r0, r3
   20ea6:	4b49      	ldr	r3, [pc, #292]	; (20fcc <hif_isr+0x3a8>)
   20ea8:	4798      	blx	r3
   20eaa:	4b50      	ldr	r3, [pc, #320]	; (20fec <hif_isr+0x3c8>)
   20eac:	0018      	movs	r0, r3
   20eae:	4b47      	ldr	r3, [pc, #284]	; (20fcc <hif_isr+0x3a8>)
   20eb0:	4798      	blx	r3
   20eb2:	4b48      	ldr	r3, [pc, #288]	; (20fd4 <hif_isr+0x3b0>)
   20eb4:	0018      	movs	r0, r3
   20eb6:	4b45      	ldr	r3, [pc, #276]	; (20fcc <hif_isr+0x3a8>)
   20eb8:	4798      	blx	r3
   20eba:	e0a1      	b.n	21000 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
   20ebc:	1d3b      	adds	r3, r7, #4
   20ebe:	781b      	ldrb	r3, [r3, #0]
   20ec0:	b2db      	uxtb	r3, r3
   20ec2:	2b06      	cmp	r3, #6
   20ec4:	d121      	bne.n	20f0a <hif_isr+0x2e6>
				{
					if(gstrHifCxt.pfCryptoCb)
   20ec6:	4b3d      	ldr	r3, [pc, #244]	; (20fbc <hif_isr+0x398>)
   20ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   20eca:	2b00      	cmp	r3, #0
   20ecc:	d00d      	beq.n	20eea <hif_isr+0x2c6>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   20ece:	4b3b      	ldr	r3, [pc, #236]	; (20fbc <hif_isr+0x398>)
   20ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   20ed2:	1d3a      	adds	r2, r7, #4
   20ed4:	7852      	ldrb	r2, [r2, #1]
   20ed6:	b2d0      	uxtb	r0, r2
   20ed8:	1d3a      	adds	r2, r7, #4
   20eda:	8852      	ldrh	r2, [r2, #2]
   20edc:	b292      	uxth	r2, r2
   20ede:	3a08      	subs	r2, #8
   20ee0:	b291      	uxth	r1, r2
   20ee2:	683a      	ldr	r2, [r7, #0]
   20ee4:	3208      	adds	r2, #8
   20ee6:	4798      	blx	r3
   20ee8:	e08a      	b.n	21000 <hif_isr+0x3dc>

					else
						M2M_ERR("Crypto callback is not registered\n");
   20eea:	2380      	movs	r3, #128	; 0x80
   20eec:	009a      	lsls	r2, r3, #2
   20eee:	4935      	ldr	r1, [pc, #212]	; (20fc4 <hif_isr+0x3a0>)
   20ef0:	4b35      	ldr	r3, [pc, #212]	; (20fc8 <hif_isr+0x3a4>)
   20ef2:	0018      	movs	r0, r3
   20ef4:	4b35      	ldr	r3, [pc, #212]	; (20fcc <hif_isr+0x3a8>)
   20ef6:	4798      	blx	r3
   20ef8:	4b3d      	ldr	r3, [pc, #244]	; (20ff0 <hif_isr+0x3cc>)
   20efa:	0018      	movs	r0, r3
   20efc:	4b33      	ldr	r3, [pc, #204]	; (20fcc <hif_isr+0x3a8>)
   20efe:	4798      	blx	r3
   20f00:	4b34      	ldr	r3, [pc, #208]	; (20fd4 <hif_isr+0x3b0>)
   20f02:	0018      	movs	r0, r3
   20f04:	4b31      	ldr	r3, [pc, #196]	; (20fcc <hif_isr+0x3a8>)
   20f06:	4798      	blx	r3
   20f08:	e07a      	b.n	21000 <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
   20f0a:	1d3b      	adds	r3, r7, #4
   20f0c:	781b      	ldrb	r3, [r3, #0]
   20f0e:	b2db      	uxtb	r3, r3
   20f10:	2b07      	cmp	r3, #7
   20f12:	d120      	bne.n	20f56 <hif_isr+0x332>
				{
					if(gstrHifCxt.pfSigmaCb)
   20f14:	4b29      	ldr	r3, [pc, #164]	; (20fbc <hif_isr+0x398>)
   20f16:	69db      	ldr	r3, [r3, #28]
   20f18:	2b00      	cmp	r3, #0
   20f1a:	d00d      	beq.n	20f38 <hif_isr+0x314>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   20f1c:	4b27      	ldr	r3, [pc, #156]	; (20fbc <hif_isr+0x398>)
   20f1e:	69db      	ldr	r3, [r3, #28]
   20f20:	1d3a      	adds	r2, r7, #4
   20f22:	7852      	ldrb	r2, [r2, #1]
   20f24:	b2d0      	uxtb	r0, r2
   20f26:	1d3a      	adds	r2, r7, #4
   20f28:	8852      	ldrh	r2, [r2, #2]
   20f2a:	b292      	uxth	r2, r2
   20f2c:	3a08      	subs	r2, #8
   20f2e:	b291      	uxth	r1, r2
   20f30:	683a      	ldr	r2, [r7, #0]
   20f32:	3208      	adds	r2, #8
   20f34:	4798      	blx	r3
   20f36:	e063      	b.n	21000 <hif_isr+0x3dc>
					else
						M2M_ERR("Sigma callback is not registered\n");
   20f38:	4a2e      	ldr	r2, [pc, #184]	; (20ff4 <hif_isr+0x3d0>)
   20f3a:	4922      	ldr	r1, [pc, #136]	; (20fc4 <hif_isr+0x3a0>)
   20f3c:	4b22      	ldr	r3, [pc, #136]	; (20fc8 <hif_isr+0x3a4>)
   20f3e:	0018      	movs	r0, r3
   20f40:	4b22      	ldr	r3, [pc, #136]	; (20fcc <hif_isr+0x3a8>)
   20f42:	4798      	blx	r3
   20f44:	4b2c      	ldr	r3, [pc, #176]	; (20ff8 <hif_isr+0x3d4>)
   20f46:	0018      	movs	r0, r3
   20f48:	4b20      	ldr	r3, [pc, #128]	; (20fcc <hif_isr+0x3a8>)
   20f4a:	4798      	blx	r3
   20f4c:	4b21      	ldr	r3, [pc, #132]	; (20fd4 <hif_isr+0x3b0>)
   20f4e:	0018      	movs	r0, r3
   20f50:	4b1e      	ldr	r3, [pc, #120]	; (20fcc <hif_isr+0x3a8>)
   20f52:	4798      	blx	r3
   20f54:	e054      	b.n	21000 <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
   20f56:	1d3b      	adds	r3, r7, #4
   20f58:	781b      	ldrb	r3, [r3, #0]
   20f5a:	b2db      	uxtb	r3, r3
   20f5c:	2b05      	cmp	r3, #5
   20f5e:	d111      	bne.n	20f84 <hif_isr+0x360>
				{
				    if(gstrHifCxt.pfSslCb)
   20f60:	4b16      	ldr	r3, [pc, #88]	; (20fbc <hif_isr+0x398>)
   20f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   20f64:	2b00      	cmp	r3, #0
   20f66:	d04b      	beq.n	21000 <hif_isr+0x3dc>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   20f68:	4b14      	ldr	r3, [pc, #80]	; (20fbc <hif_isr+0x398>)
   20f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   20f6c:	1d3a      	adds	r2, r7, #4
   20f6e:	7852      	ldrb	r2, [r2, #1]
   20f70:	b2d0      	uxtb	r0, r2
   20f72:	1d3a      	adds	r2, r7, #4
   20f74:	8852      	ldrh	r2, [r2, #2]
   20f76:	b292      	uxth	r2, r2
   20f78:	3a08      	subs	r2, #8
   20f7a:	b291      	uxth	r1, r2
   20f7c:	683a      	ldr	r2, [r7, #0]
   20f7e:	3208      	adds	r2, #8
   20f80:	4798      	blx	r3
   20f82:	e03d      	b.n	21000 <hif_isr+0x3dc>
				}
				else
				{
					M2M_ERR("(hif) invalid group ID\n");
   20f84:	2384      	movs	r3, #132	; 0x84
   20f86:	009a      	lsls	r2, r3, #2
   20f88:	490e      	ldr	r1, [pc, #56]	; (20fc4 <hif_isr+0x3a0>)
   20f8a:	4b0f      	ldr	r3, [pc, #60]	; (20fc8 <hif_isr+0x3a4>)
   20f8c:	0018      	movs	r0, r3
   20f8e:	4b0f      	ldr	r3, [pc, #60]	; (20fcc <hif_isr+0x3a8>)
   20f90:	4798      	blx	r3
   20f92:	4b1a      	ldr	r3, [pc, #104]	; (20ffc <hif_isr+0x3d8>)
   20f94:	0018      	movs	r0, r3
   20f96:	4b0d      	ldr	r3, [pc, #52]	; (20fcc <hif_isr+0x3a8>)
   20f98:	4798      	blx	r3
   20f9a:	4b0e      	ldr	r3, [pc, #56]	; (20fd4 <hif_isr+0x3b0>)
   20f9c:	0018      	movs	r0, r3
   20f9e:	4b0b      	ldr	r3, [pc, #44]	; (20fcc <hif_isr+0x3a8>)
   20fa0:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
   20fa2:	230f      	movs	r3, #15
   20fa4:	18fb      	adds	r3, r7, r3
   20fa6:	22fa      	movs	r2, #250	; 0xfa
   20fa8:	701a      	strb	r2, [r3, #0]
					goto ERR1;
   20faa:	e083      	b.n	210b4 <hif_isr+0x490>
   20fac:	00001070 	.word	0x00001070
   20fb0:	000226b1 	.word	0x000226b1
   20fb4:	0001fdd5 	.word	0x0001fdd5
   20fb8:	000226d5 	.word	0x000226d5
   20fbc:	200053f4 	.word	0x200053f4
   20fc0:	00001084 	.word	0x00001084
   20fc4:	000390a0 	.word	0x000390a0
   20fc8:	00038d90 	.word	0x00038d90
   20fcc:	0001dc4d 	.word	0x0001dc4d
   20fd0:	00038dc4 	.word	0x00038dc4
   20fd4:	00038d8c 	.word	0x00038d8c
   20fd8:	00022725 	.word	0x00022725
   20fdc:	00038dec 	.word	0x00038dec
   20fe0:	00038e04 	.word	0x00038e04
   20fe4:	00038e44 	.word	0x00038e44
   20fe8:	00038e68 	.word	0x00038e68
   20fec:	00038e8c 	.word	0x00038e8c
   20ff0:	00038eac 	.word	0x00038eac
   20ff4:	00000207 	.word	0x00000207
   20ff8:	00038ed0 	.word	0x00038ed0
   20ffc:	00038ef4 	.word	0x00038ef4
				}
				if(gstrHifCxt.u8HifRXDone)
   21000:	4b30      	ldr	r3, [pc, #192]	; (210c4 <hif_isr+0x4a0>)
   21002:	789b      	ldrb	r3, [r3, #2]
   21004:	b2db      	uxtb	r3, r3
   21006:	2b00      	cmp	r3, #0
   21008:	d054      	beq.n	210b4 <hif_isr+0x490>
				{
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
   2100a:	4a2f      	ldr	r2, [pc, #188]	; (210c8 <hif_isr+0x4a4>)
   2100c:	492f      	ldr	r1, [pc, #188]	; (210cc <hif_isr+0x4a8>)
   2100e:	4b30      	ldr	r3, [pc, #192]	; (210d0 <hif_isr+0x4ac>)
   21010:	0018      	movs	r0, r3
   21012:	4b30      	ldr	r3, [pc, #192]	; (210d4 <hif_isr+0x4b0>)
   21014:	4798      	blx	r3
   21016:	1d3b      	adds	r3, r7, #4
   21018:	781b      	ldrb	r3, [r3, #0]
   2101a:	b2db      	uxtb	r3, r3
   2101c:	0019      	movs	r1, r3
   2101e:	1d3b      	adds	r3, r7, #4
   21020:	785b      	ldrb	r3, [r3, #1]
   21022:	b2db      	uxtb	r3, r3
   21024:	001a      	movs	r2, r3
   21026:	4b2c      	ldr	r3, [pc, #176]	; (210d8 <hif_isr+0x4b4>)
   21028:	0018      	movs	r0, r3
   2102a:	4b2a      	ldr	r3, [pc, #168]	; (210d4 <hif_isr+0x4b0>)
   2102c:	4798      	blx	r3
   2102e:	4b2b      	ldr	r3, [pc, #172]	; (210dc <hif_isr+0x4b8>)
   21030:	0018      	movs	r0, r3
   21032:	4b28      	ldr	r3, [pc, #160]	; (210d4 <hif_isr+0x4b0>)
   21034:	4798      	blx	r3
					ret = hif_set_rx_done();
   21036:	230f      	movs	r3, #15
   21038:	18fc      	adds	r4, r7, r3
   2103a:	4b29      	ldr	r3, [pc, #164]	; (210e0 <hif_isr+0x4bc>)
   2103c:	4798      	blx	r3
   2103e:	0003      	movs	r3, r0
   21040:	7023      	strb	r3, [r4, #0]
   21042:	e037      	b.n	210b4 <hif_isr+0x490>
					if(ret != M2M_SUCCESS) goto ERR1;
				}
			}
			else
			{
				M2M_ERR("(hif) Wrong Size\n");
   21044:	4a27      	ldr	r2, [pc, #156]	; (210e4 <hif_isr+0x4c0>)
   21046:	4921      	ldr	r1, [pc, #132]	; (210cc <hif_isr+0x4a8>)
   21048:	4b21      	ldr	r3, [pc, #132]	; (210d0 <hif_isr+0x4ac>)
   2104a:	0018      	movs	r0, r3
   2104c:	4b21      	ldr	r3, [pc, #132]	; (210d4 <hif_isr+0x4b0>)
   2104e:	4798      	blx	r3
   21050:	4b25      	ldr	r3, [pc, #148]	; (210e8 <hif_isr+0x4c4>)
   21052:	0018      	movs	r0, r3
   21054:	4b1f      	ldr	r3, [pc, #124]	; (210d4 <hif_isr+0x4b0>)
   21056:	4798      	blx	r3
   21058:	4b20      	ldr	r3, [pc, #128]	; (210dc <hif_isr+0x4b8>)
   2105a:	0018      	movs	r0, r3
   2105c:	4b1d      	ldr	r3, [pc, #116]	; (210d4 <hif_isr+0x4b0>)
   2105e:	4798      	blx	r3
				ret = M2M_ERR_RCV;
   21060:	230f      	movs	r3, #15
   21062:	18fb      	adds	r3, r7, r3
   21064:	22fe      	movs	r2, #254	; 0xfe
   21066:	701a      	strb	r2, [r3, #0]
				goto ERR1;
   21068:	e024      	b.n	210b4 <hif_isr+0x490>
			}
		}
		else
		{
#ifndef WIN32
			M2M_ERR("(hif) False interrupt %lx",reg);
   2106a:	4a20      	ldr	r2, [pc, #128]	; (210ec <hif_isr+0x4c8>)
   2106c:	4917      	ldr	r1, [pc, #92]	; (210cc <hif_isr+0x4a8>)
   2106e:	4b18      	ldr	r3, [pc, #96]	; (210d0 <hif_isr+0x4ac>)
   21070:	0018      	movs	r0, r3
   21072:	4b18      	ldr	r3, [pc, #96]	; (210d4 <hif_isr+0x4b0>)
   21074:	4798      	blx	r3
   21076:	68ba      	ldr	r2, [r7, #8]
   21078:	4b1d      	ldr	r3, [pc, #116]	; (210f0 <hif_isr+0x4cc>)
   2107a:	0011      	movs	r1, r2
   2107c:	0018      	movs	r0, r3
   2107e:	4b15      	ldr	r3, [pc, #84]	; (210d4 <hif_isr+0x4b0>)
   21080:	4798      	blx	r3
   21082:	4b16      	ldr	r3, [pc, #88]	; (210dc <hif_isr+0x4b8>)
   21084:	0018      	movs	r0, r3
   21086:	4b13      	ldr	r3, [pc, #76]	; (210d4 <hif_isr+0x4b0>)
   21088:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   2108a:	230f      	movs	r3, #15
   2108c:	18fb      	adds	r3, r7, r3
   2108e:	22f4      	movs	r2, #244	; 0xf4
   21090:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   21092:	e00f      	b.n	210b4 <hif_isr+0x490>
#endif
		}
	}
	else
	{
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
   21094:	4a17      	ldr	r2, [pc, #92]	; (210f4 <hif_isr+0x4d0>)
   21096:	490d      	ldr	r1, [pc, #52]	; (210cc <hif_isr+0x4a8>)
   21098:	4b0d      	ldr	r3, [pc, #52]	; (210d0 <hif_isr+0x4ac>)
   2109a:	0018      	movs	r0, r3
   2109c:	4b0d      	ldr	r3, [pc, #52]	; (210d4 <hif_isr+0x4b0>)
   2109e:	4798      	blx	r3
   210a0:	4b15      	ldr	r3, [pc, #84]	; (210f8 <hif_isr+0x4d4>)
   210a2:	0018      	movs	r0, r3
   210a4:	4b0b      	ldr	r3, [pc, #44]	; (210d4 <hif_isr+0x4b0>)
   210a6:	4798      	blx	r3
   210a8:	4b0c      	ldr	r3, [pc, #48]	; (210dc <hif_isr+0x4b8>)
   210aa:	0018      	movs	r0, r3
   210ac:	4b09      	ldr	r3, [pc, #36]	; (210d4 <hif_isr+0x4b0>)
   210ae:	4798      	blx	r3
		goto ERR1;
   210b0:	e000      	b.n	210b4 <hif_isr+0x490>
			if(ret != M2M_SUCCESS)goto ERR1;
   210b2:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   210b4:	230f      	movs	r3, #15
   210b6:	18fb      	adds	r3, r7, r3
   210b8:	781b      	ldrb	r3, [r3, #0]
   210ba:	b25b      	sxtb	r3, r3
}
   210bc:	0018      	movs	r0, r3
   210be:	46bd      	mov	sp, r7
   210c0:	b005      	add	sp, #20
   210c2:	bd90      	pop	{r4, r7, pc}
   210c4:	200053f4 	.word	0x200053f4
   210c8:	00000216 	.word	0x00000216
   210cc:	000390a0 	.word	0x000390a0
   210d0:	00038d90 	.word	0x00038d90
   210d4:	0001dc4d 	.word	0x0001dc4d
   210d8:	00038f0c 	.word	0x00038f0c
   210dc:	00038d8c 	.word	0x00038d8c
   210e0:	000206b9 	.word	0x000206b9
   210e4:	0000021d 	.word	0x0000021d
   210e8:	00038f38 	.word	0x00038f38
   210ec:	00000225 	.word	0x00000225
   210f0:	00038f4c 	.word	0x00038f4c
   210f4:	0000022e 	.word	0x0000022e
   210f8:	00038f68 	.word	0x00038f68

000210fc <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
   210fc:	b590      	push	{r4, r7, lr}
   210fe:	b083      	sub	sp, #12
   21100:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;	
   21102:	1dfb      	adds	r3, r7, #7
   21104:	2200      	movs	r2, #0
   21106:	701a      	strb	r2, [r3, #0]
	
	gstrHifCxt.u8Yield = 0;
   21108:	4b1c      	ldr	r3, [pc, #112]	; (2117c <hif_handle_isr+0x80>)
   2110a:	2200      	movs	r2, #0
   2110c:	711a      	strb	r2, [r3, #4]
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   2110e:	e024      	b.n	2115a <hif_handle_isr+0x5e>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
   21110:	4b1a      	ldr	r3, [pc, #104]	; (2117c <hif_handle_isr+0x80>)
   21112:	78db      	ldrb	r3, [r3, #3]
   21114:	b2db      	uxtb	r3, r3
   21116:	3b01      	subs	r3, #1
   21118:	b2da      	uxtb	r2, r3
   2111a:	4b18      	ldr	r3, [pc, #96]	; (2117c <hif_handle_isr+0x80>)
   2111c:	70da      	strb	r2, [r3, #3]
		while(1)
		{
			ret = hif_isr();
   2111e:	1dfc      	adds	r4, r7, #7
   21120:	4b17      	ldr	r3, [pc, #92]	; (21180 <hif_handle_isr+0x84>)
   21122:	4798      	blx	r3
   21124:	0003      	movs	r3, r0
   21126:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
   21128:	1dfb      	adds	r3, r7, #7
   2112a:	781b      	ldrb	r3, [r3, #0]
   2112c:	b25b      	sxtb	r3, r3
   2112e:	2b00      	cmp	r3, #0
   21130:	d100      	bne.n	21134 <hif_handle_isr+0x38>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
   21132:	e012      	b.n	2115a <hif_handle_isr+0x5e>
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
   21134:	4a13      	ldr	r2, [pc, #76]	; (21184 <hif_handle_isr+0x88>)
   21136:	4914      	ldr	r1, [pc, #80]	; (21188 <hif_handle_isr+0x8c>)
   21138:	4b14      	ldr	r3, [pc, #80]	; (2118c <hif_handle_isr+0x90>)
   2113a:	0018      	movs	r0, r3
   2113c:	4b14      	ldr	r3, [pc, #80]	; (21190 <hif_handle_isr+0x94>)
   2113e:	4798      	blx	r3
   21140:	1dfb      	adds	r3, r7, #7
   21142:	2200      	movs	r2, #0
   21144:	569a      	ldrsb	r2, [r3, r2]
   21146:	4b13      	ldr	r3, [pc, #76]	; (21194 <hif_handle_isr+0x98>)
   21148:	0011      	movs	r1, r2
   2114a:	0018      	movs	r0, r3
   2114c:	4b10      	ldr	r3, [pc, #64]	; (21190 <hif_handle_isr+0x94>)
   2114e:	4798      	blx	r3
   21150:	4b11      	ldr	r3, [pc, #68]	; (21198 <hif_handle_isr+0x9c>)
   21152:	0018      	movs	r0, r3
   21154:	4b0e      	ldr	r3, [pc, #56]	; (21190 <hif_handle_isr+0x94>)
   21156:	4798      	blx	r3
			ret = hif_isr();
   21158:	e7e1      	b.n	2111e <hif_handle_isr+0x22>
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   2115a:	4b08      	ldr	r3, [pc, #32]	; (2117c <hif_handle_isr+0x80>)
   2115c:	78db      	ldrb	r3, [r3, #3]
   2115e:	b2db      	uxtb	r3, r3
   21160:	2b00      	cmp	r3, #0
   21162:	d004      	beq.n	2116e <hif_handle_isr+0x72>
   21164:	4b05      	ldr	r3, [pc, #20]	; (2117c <hif_handle_isr+0x80>)
   21166:	791b      	ldrb	r3, [r3, #4]
   21168:	b2db      	uxtb	r3, r3
   2116a:	2b00      	cmp	r3, #0
   2116c:	d0d0      	beq.n	21110 <hif_handle_isr+0x14>
			}
		}
	}

	return ret;
   2116e:	1dfb      	adds	r3, r7, #7
   21170:	781b      	ldrb	r3, [r3, #0]
   21172:	b25b      	sxtb	r3, r3
}
   21174:	0018      	movs	r0, r3
   21176:	46bd      	mov	sp, r7
   21178:	b003      	add	sp, #12
   2117a:	bd90      	pop	{r4, r7, pc}
   2117c:	200053f4 	.word	0x200053f4
   21180:	00020c25 	.word	0x00020c25
   21184:	00000257 	.word	0x00000257
   21188:	000390a8 	.word	0x000390a8
   2118c:	00038d90 	.word	0x00038d90
   21190:	0001dc4d 	.word	0x0001dc4d
   21194:	00038f8c 	.word	0x00038f8c
   21198:	00038d8c 	.word	0x00038d8c

0002119c <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
   2119c:	b590      	push	{r4, r7, lr}
   2119e:	b087      	sub	sp, #28
   211a0:	af00      	add	r7, sp, #0
   211a2:	60f8      	str	r0, [r7, #12]
   211a4:	60b9      	str	r1, [r7, #8]
   211a6:	0019      	movs	r1, r3
   211a8:	1dbb      	adds	r3, r7, #6
   211aa:	801a      	strh	r2, [r3, #0]
   211ac:	1d7b      	adds	r3, r7, #5
   211ae:	1c0a      	adds	r2, r1, #0
   211b0:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   211b2:	2317      	movs	r3, #23
   211b4:	18fb      	adds	r3, r7, r3
   211b6:	2200      	movs	r2, #0
   211b8:	701a      	strb	r2, [r3, #0]
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
   211ba:	68fb      	ldr	r3, [r7, #12]
   211bc:	2b00      	cmp	r3, #0
   211be:	d006      	beq.n	211ce <hif_receive+0x32>
   211c0:	68bb      	ldr	r3, [r7, #8]
   211c2:	2b00      	cmp	r3, #0
   211c4:	d003      	beq.n	211ce <hif_receive+0x32>
   211c6:	1dbb      	adds	r3, r7, #6
   211c8:	881b      	ldrh	r3, [r3, #0]
   211ca:	2b00      	cmp	r3, #0
   211cc:	d11e      	bne.n	2120c <hif_receive+0x70>
	{
		if(isDone)
   211ce:	1d7b      	adds	r3, r7, #5
   211d0:	781b      	ldrb	r3, [r3, #0]
   211d2:	2b00      	cmp	r3, #0
   211d4:	d006      	beq.n	211e4 <hif_receive+0x48>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
   211d6:	2317      	movs	r3, #23
   211d8:	18fc      	adds	r4, r7, r3
   211da:	4b45      	ldr	r3, [pc, #276]	; (212f0 <hif_receive+0x154>)
   211dc:	4798      	blx	r3
   211de:	0003      	movs	r3, r0
   211e0:	7023      	strb	r3, [r4, #0]
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
   211e2:	e07c      	b.n	212de <hif_receive+0x142>
			ret = M2M_ERR_FAIL;
   211e4:	2317      	movs	r3, #23
   211e6:	18fb      	adds	r3, r7, r3
   211e8:	22f4      	movs	r2, #244	; 0xf4
   211ea:	701a      	strb	r2, [r3, #0]
			M2M_ERR(" hif_receive: Invalid argument\n");
   211ec:	239e      	movs	r3, #158	; 0x9e
   211ee:	009a      	lsls	r2, r3, #2
   211f0:	4940      	ldr	r1, [pc, #256]	; (212f4 <hif_receive+0x158>)
   211f2:	4b41      	ldr	r3, [pc, #260]	; (212f8 <hif_receive+0x15c>)
   211f4:	0018      	movs	r0, r3
   211f6:	4b41      	ldr	r3, [pc, #260]	; (212fc <hif_receive+0x160>)
   211f8:	4798      	blx	r3
   211fa:	4b41      	ldr	r3, [pc, #260]	; (21300 <hif_receive+0x164>)
   211fc:	0018      	movs	r0, r3
   211fe:	4b3f      	ldr	r3, [pc, #252]	; (212fc <hif_receive+0x160>)
   21200:	4798      	blx	r3
   21202:	4b40      	ldr	r3, [pc, #256]	; (21304 <hif_receive+0x168>)
   21204:	0018      	movs	r0, r3
   21206:	4b3d      	ldr	r3, [pc, #244]	; (212fc <hif_receive+0x160>)
   21208:	4798      	blx	r3
		goto ERR1;
   2120a:	e068      	b.n	212de <hif_receive+0x142>
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
   2120c:	1dbb      	adds	r3, r7, #6
   2120e:	881a      	ldrh	r2, [r3, #0]
   21210:	4b3d      	ldr	r3, [pc, #244]	; (21308 <hif_receive+0x16c>)
   21212:	68db      	ldr	r3, [r3, #12]
   21214:	429a      	cmp	r2, r3
   21216:	d917      	bls.n	21248 <hif_receive+0xac>
	{
		ret = M2M_ERR_FAIL;
   21218:	2317      	movs	r3, #23
   2121a:	18fb      	adds	r3, r7, r3
   2121c:	22f4      	movs	r2, #244	; 0xf4
   2121e:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
   21220:	23a0      	movs	r3, #160	; 0xa0
   21222:	009a      	lsls	r2, r3, #2
   21224:	4933      	ldr	r1, [pc, #204]	; (212f4 <hif_receive+0x158>)
   21226:	4b34      	ldr	r3, [pc, #208]	; (212f8 <hif_receive+0x15c>)
   21228:	0018      	movs	r0, r3
   2122a:	4b34      	ldr	r3, [pc, #208]	; (212fc <hif_receive+0x160>)
   2122c:	4798      	blx	r3
   2122e:	1dbb      	adds	r3, r7, #6
   21230:	8819      	ldrh	r1, [r3, #0]
   21232:	4b35      	ldr	r3, [pc, #212]	; (21308 <hif_receive+0x16c>)
   21234:	68da      	ldr	r2, [r3, #12]
   21236:	4b35      	ldr	r3, [pc, #212]	; (2130c <hif_receive+0x170>)
   21238:	0018      	movs	r0, r3
   2123a:	4b30      	ldr	r3, [pc, #192]	; (212fc <hif_receive+0x160>)
   2123c:	4798      	blx	r3
   2123e:	4b31      	ldr	r3, [pc, #196]	; (21304 <hif_receive+0x168>)
   21240:	0018      	movs	r0, r3
   21242:	4b2e      	ldr	r3, [pc, #184]	; (212fc <hif_receive+0x160>)
   21244:	4798      	blx	r3
		goto ERR1;
   21246:	e04a      	b.n	212de <hif_receive+0x142>
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
   21248:	4b2f      	ldr	r3, [pc, #188]	; (21308 <hif_receive+0x16c>)
   2124a:	689a      	ldr	r2, [r3, #8]
   2124c:	68fb      	ldr	r3, [r7, #12]
   2124e:	429a      	cmp	r2, r3
   21250:	d80a      	bhi.n	21268 <hif_receive+0xcc>
   21252:	1dbb      	adds	r3, r7, #6
   21254:	881a      	ldrh	r2, [r3, #0]
   21256:	68fb      	ldr	r3, [r7, #12]
   21258:	18d2      	adds	r2, r2, r3
   2125a:	4b2b      	ldr	r3, [pc, #172]	; (21308 <hif_receive+0x16c>)
   2125c:	6899      	ldr	r1, [r3, #8]
   2125e:	4b2a      	ldr	r3, [pc, #168]	; (21308 <hif_receive+0x16c>)
   21260:	68db      	ldr	r3, [r3, #12]
   21262:	18cb      	adds	r3, r1, r3
   21264:	429a      	cmp	r2, r3
   21266:	d912      	bls.n	2128e <hif_receive+0xf2>
	{
		ret = M2M_ERR_FAIL;
   21268:	2317      	movs	r3, #23
   2126a:	18fb      	adds	r3, r7, r3
   2126c:	22f4      	movs	r2, #244	; 0xf4
   2126e:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
   21270:	4a27      	ldr	r2, [pc, #156]	; (21310 <hif_receive+0x174>)
   21272:	4920      	ldr	r1, [pc, #128]	; (212f4 <hif_receive+0x158>)
   21274:	4b20      	ldr	r3, [pc, #128]	; (212f8 <hif_receive+0x15c>)
   21276:	0018      	movs	r0, r3
   21278:	4b20      	ldr	r3, [pc, #128]	; (212fc <hif_receive+0x160>)
   2127a:	4798      	blx	r3
   2127c:	4b25      	ldr	r3, [pc, #148]	; (21314 <hif_receive+0x178>)
   2127e:	0018      	movs	r0, r3
   21280:	4b1e      	ldr	r3, [pc, #120]	; (212fc <hif_receive+0x160>)
   21282:	4798      	blx	r3
   21284:	4b1f      	ldr	r3, [pc, #124]	; (21304 <hif_receive+0x168>)
   21286:	0018      	movs	r0, r3
   21288:	4b1c      	ldr	r3, [pc, #112]	; (212fc <hif_receive+0x160>)
   2128a:	4798      	blx	r3
		goto ERR1;
   2128c:	e027      	b.n	212de <hif_receive+0x142>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
   2128e:	1dbb      	adds	r3, r7, #6
   21290:	881a      	ldrh	r2, [r3, #0]
   21292:	2317      	movs	r3, #23
   21294:	18fc      	adds	r4, r7, r3
   21296:	68b9      	ldr	r1, [r7, #8]
   21298:	68fb      	ldr	r3, [r7, #12]
   2129a:	0018      	movs	r0, r3
   2129c:	4b1e      	ldr	r3, [pc, #120]	; (21318 <hif_receive+0x17c>)
   2129e:	4798      	blx	r3
   212a0:	0003      	movs	r3, r0
   212a2:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   212a4:	2317      	movs	r3, #23
   212a6:	18fb      	adds	r3, r7, r3
   212a8:	781b      	ldrb	r3, [r3, #0]
   212aa:	b25b      	sxtb	r3, r3
   212ac:	2b00      	cmp	r3, #0
   212ae:	d115      	bne.n	212dc <hif_receive+0x140>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
   212b0:	4b15      	ldr	r3, [pc, #84]	; (21308 <hif_receive+0x16c>)
   212b2:	689a      	ldr	r2, [r3, #8]
   212b4:	4b14      	ldr	r3, [pc, #80]	; (21308 <hif_receive+0x16c>)
   212b6:	68db      	ldr	r3, [r3, #12]
   212b8:	18d2      	adds	r2, r2, r3
   212ba:	1dbb      	adds	r3, r7, #6
   212bc:	8819      	ldrh	r1, [r3, #0]
   212be:	68fb      	ldr	r3, [r7, #12]
   212c0:	18cb      	adds	r3, r1, r3
   212c2:	429a      	cmp	r2, r3
   212c4:	d003      	beq.n	212ce <hif_receive+0x132>
   212c6:	1d7b      	adds	r3, r7, #5
   212c8:	781b      	ldrb	r3, [r3, #0]
   212ca:	2b00      	cmp	r3, #0
   212cc:	d007      	beq.n	212de <hif_receive+0x142>
	{
		/* set RX done */
		ret = hif_set_rx_done();
   212ce:	2317      	movs	r3, #23
   212d0:	18fc      	adds	r4, r7, r3
   212d2:	4b07      	ldr	r3, [pc, #28]	; (212f0 <hif_receive+0x154>)
   212d4:	4798      	blx	r3
   212d6:	0003      	movs	r3, r0
   212d8:	7023      	strb	r3, [r4, #0]
   212da:	e000      	b.n	212de <hif_receive+0x142>
	if(ret != M2M_SUCCESS)goto ERR1;
   212dc:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   212de:	2317      	movs	r3, #23
   212e0:	18fb      	adds	r3, r7, r3
   212e2:	781b      	ldrb	r3, [r3, #0]
   212e4:	b25b      	sxtb	r3, r3
}
   212e6:	0018      	movs	r0, r3
   212e8:	46bd      	mov	sp, r7
   212ea:	b007      	add	sp, #28
   212ec:	bd90      	pop	{r4, r7, pc}
   212ee:	46c0      	nop			; (mov r8, r8)
   212f0:	000206b9 	.word	0x000206b9
   212f4:	000390b8 	.word	0x000390b8
   212f8:	00038d90 	.word	0x00038d90
   212fc:	0001dc4d 	.word	0x0001dc4d
   21300:	00038fbc 	.word	0x00038fbc
   21304:	00038d8c 	.word	0x00038d8c
   21308:	200053f4 	.word	0x200053f4
   2130c:	00038fdc 	.word	0x00038fdc
   21310:	00000286 	.word	0x00000286
   21314:	00039024 	.word	0x00039024
   21318:	00022725 	.word	0x00022725

0002131c <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
   2131c:	b580      	push	{r7, lr}
   2131e:	b084      	sub	sp, #16
   21320:	af00      	add	r7, sp, #0
   21322:	0002      	movs	r2, r0
   21324:	6039      	str	r1, [r7, #0]
   21326:	1dfb      	adds	r3, r7, #7
   21328:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   2132a:	230f      	movs	r3, #15
   2132c:	18fb      	adds	r3, r7, r3
   2132e:	2200      	movs	r2, #0
   21330:	701a      	strb	r2, [r3, #0]
	switch(u8Grp)
   21332:	1dfb      	adds	r3, r7, #7
   21334:	781b      	ldrb	r3, [r3, #0]
   21336:	2b07      	cmp	r3, #7
   21338:	d820      	bhi.n	2137c <hif_register_cb+0x60>
   2133a:	009a      	lsls	r2, r3, #2
   2133c:	4b1e      	ldr	r3, [pc, #120]	; (213b8 <hif_register_cb+0x9c>)
   2133e:	18d3      	adds	r3, r2, r3
   21340:	681b      	ldr	r3, [r3, #0]
   21342:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
   21344:	4b1d      	ldr	r3, [pc, #116]	; (213bc <hif_register_cb+0xa0>)
   21346:	683a      	ldr	r2, [r7, #0]
   21348:	615a      	str	r2, [r3, #20]
			break;
   2134a:	e02d      	b.n	213a8 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
   2134c:	4b1b      	ldr	r3, [pc, #108]	; (213bc <hif_register_cb+0xa0>)
   2134e:	683a      	ldr	r2, [r7, #0]
   21350:	611a      	str	r2, [r3, #16]
			break;
   21352:	e029      	b.n	213a8 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
   21354:	4b19      	ldr	r3, [pc, #100]	; (213bc <hif_register_cb+0xa0>)
   21356:	683a      	ldr	r2, [r7, #0]
   21358:	619a      	str	r2, [r3, #24]
			break;
   2135a:	e025      	b.n	213a8 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
   2135c:	4b17      	ldr	r3, [pc, #92]	; (213bc <hif_register_cb+0xa0>)
   2135e:	683a      	ldr	r2, [r7, #0]
   21360:	621a      	str	r2, [r3, #32]
			break;
   21362:	e021      	b.n	213a8 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
   21364:	4b15      	ldr	r3, [pc, #84]	; (213bc <hif_register_cb+0xa0>)
   21366:	683a      	ldr	r2, [r7, #0]
   21368:	625a      	str	r2, [r3, #36]	; 0x24
			break;
   2136a:	e01d      	b.n	213a8 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
   2136c:	4b13      	ldr	r3, [pc, #76]	; (213bc <hif_register_cb+0xa0>)
   2136e:	683a      	ldr	r2, [r7, #0]
   21370:	61da      	str	r2, [r3, #28]
			break;
   21372:	e019      	b.n	213a8 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
   21374:	4b11      	ldr	r3, [pc, #68]	; (213bc <hif_register_cb+0xa0>)
   21376:	683a      	ldr	r2, [r7, #0]
   21378:	629a      	str	r2, [r3, #40]	; 0x28
			break;
   2137a:	e015      	b.n	213a8 <hif_register_cb+0x8c>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
   2137c:	4a10      	ldr	r2, [pc, #64]	; (213c0 <hif_register_cb+0xa4>)
   2137e:	4911      	ldr	r1, [pc, #68]	; (213c4 <hif_register_cb+0xa8>)
   21380:	4b11      	ldr	r3, [pc, #68]	; (213c8 <hif_register_cb+0xac>)
   21382:	0018      	movs	r0, r3
   21384:	4b11      	ldr	r3, [pc, #68]	; (213cc <hif_register_cb+0xb0>)
   21386:	4798      	blx	r3
   21388:	1dfb      	adds	r3, r7, #7
   2138a:	781a      	ldrb	r2, [r3, #0]
   2138c:	4b10      	ldr	r3, [pc, #64]	; (213d0 <hif_register_cb+0xb4>)
   2138e:	0011      	movs	r1, r2
   21390:	0018      	movs	r0, r3
   21392:	4b0e      	ldr	r3, [pc, #56]	; (213cc <hif_register_cb+0xb0>)
   21394:	4798      	blx	r3
   21396:	4b0f      	ldr	r3, [pc, #60]	; (213d4 <hif_register_cb+0xb8>)
   21398:	0018      	movs	r0, r3
   2139a:	4b0c      	ldr	r3, [pc, #48]	; (213cc <hif_register_cb+0xb0>)
   2139c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   2139e:	230f      	movs	r3, #15
   213a0:	18fb      	adds	r3, r7, r3
   213a2:	22f4      	movs	r2, #244	; 0xf4
   213a4:	701a      	strb	r2, [r3, #0]
			break;
   213a6:	46c0      	nop			; (mov r8, r8)
	}
	return ret;
   213a8:	230f      	movs	r3, #15
   213aa:	18fb      	adds	r3, r7, r3
   213ac:	781b      	ldrb	r3, [r3, #0]
   213ae:	b25b      	sxtb	r3, r3
}
   213b0:	0018      	movs	r0, r3
   213b2:	46bd      	mov	sp, r7
   213b4:	b004      	add	sp, #16
   213b6:	bd80      	pop	{r7, pc}
   213b8:	00039074 	.word	0x00039074
   213bc:	200053f4 	.word	0x200053f4
   213c0:	000002be 	.word	0x000002be
   213c4:	000390c4 	.word	0x000390c4
   213c8:	00038d90 	.word	0x00038d90
   213cc:	0001dc4d 	.word	0x0001dc4d
   213d0:	00039068 	.word	0x00039068
   213d4:	00038d8c 	.word	0x00038d8c

000213d8 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
   213d8:	b590      	push	{r4, r7, lr}
   213da:	b0af      	sub	sp, #188	; 0xbc
   213dc:	af02      	add	r7, sp, #8
   213de:	603a      	str	r2, [r7, #0]
   213e0:	1dfb      	adds	r3, r7, #7
   213e2:	1c02      	adds	r2, r0, #0
   213e4:	701a      	strb	r2, [r3, #0]
   213e6:	1d3b      	adds	r3, r7, #4
   213e8:	1c0a      	adds	r2, r1, #0
   213ea:	801a      	strh	r2, [r3, #0]
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
   213ec:	1dfb      	adds	r3, r7, #7
   213ee:	781b      	ldrb	r3, [r3, #0]
   213f0:	2b2c      	cmp	r3, #44	; 0x2c
   213f2:	d116      	bne.n	21422 <m2m_wifi_cb+0x4a>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
   213f4:	23a4      	movs	r3, #164	; 0xa4
   213f6:	18f9      	adds	r1, r7, r3
   213f8:	6838      	ldr	r0, [r7, #0]
   213fa:	2300      	movs	r3, #0
   213fc:	2204      	movs	r2, #4
   213fe:	4cca      	ldr	r4, [pc, #808]	; (21728 <m2m_wifi_cb+0x350>)
   21400:	47a0      	blx	r4
   21402:	1e03      	subs	r3, r0, #0
   21404:	d000      	beq.n	21408 <m2m_wifi_cb+0x30>
   21406:	e1b4      	b.n	21772 <m2m_wifi_cb+0x39a>
		{
			if (gpfAppWifiCb)
   21408:	4bc8      	ldr	r3, [pc, #800]	; (2172c <m2m_wifi_cb+0x354>)
   2140a:	681b      	ldr	r3, [r3, #0]
   2140c:	2b00      	cmp	r3, #0
   2140e:	d100      	bne.n	21412 <m2m_wifi_cb+0x3a>
   21410:	e1af      	b.n	21772 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
   21412:	4bc6      	ldr	r3, [pc, #792]	; (2172c <m2m_wifi_cb+0x354>)
   21414:	681b      	ldr	r3, [r3, #0]
   21416:	22a4      	movs	r2, #164	; 0xa4
   21418:	18ba      	adds	r2, r7, r2
   2141a:	0011      	movs	r1, r2
   2141c:	202c      	movs	r0, #44	; 0x2c
   2141e:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
   21420:	e1a7      	b.n	21772 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
   21422:	1dfb      	adds	r3, r7, #7
   21424:	781b      	ldrb	r3, [r3, #0]
   21426:	2b1b      	cmp	r3, #27
   21428:	d116      	bne.n	21458 <m2m_wifi_cb+0x80>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
   2142a:	239c      	movs	r3, #156	; 0x9c
   2142c:	18f9      	adds	r1, r7, r3
   2142e:	6838      	ldr	r0, [r7, #0]
   21430:	2300      	movs	r3, #0
   21432:	2208      	movs	r2, #8
   21434:	4cbc      	ldr	r4, [pc, #752]	; (21728 <m2m_wifi_cb+0x350>)
   21436:	47a0      	blx	r4
   21438:	1e03      	subs	r3, r0, #0
   2143a:	d000      	beq.n	2143e <m2m_wifi_cb+0x66>
   2143c:	e199      	b.n	21772 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   2143e:	4bbb      	ldr	r3, [pc, #748]	; (2172c <m2m_wifi_cb+0x354>)
   21440:	681b      	ldr	r3, [r3, #0]
   21442:	2b00      	cmp	r3, #0
   21444:	d100      	bne.n	21448 <m2m_wifi_cb+0x70>
   21446:	e194      	b.n	21772 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
   21448:	4bb8      	ldr	r3, [pc, #736]	; (2172c <m2m_wifi_cb+0x354>)
   2144a:	681b      	ldr	r3, [r3, #0]
   2144c:	229c      	movs	r2, #156	; 0x9c
   2144e:	18ba      	adds	r2, r7, r2
   21450:	0011      	movs	r1, r2
   21452:	201b      	movs	r0, #27
   21454:	4798      	blx	r3
}
   21456:	e18c      	b.n	21772 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
   21458:	1dfb      	adds	r3, r7, #7
   2145a:	781b      	ldrb	r3, [r3, #0]
   2145c:	2b06      	cmp	r3, #6
   2145e:	d116      	bne.n	2148e <m2m_wifi_cb+0xb6>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
   21460:	230c      	movs	r3, #12
   21462:	18f9      	adds	r1, r7, r3
   21464:	6838      	ldr	r0, [r7, #0]
   21466:	2301      	movs	r3, #1
   21468:	2230      	movs	r2, #48	; 0x30
   2146a:	4caf      	ldr	r4, [pc, #700]	; (21728 <m2m_wifi_cb+0x350>)
   2146c:	47a0      	blx	r4
   2146e:	1e03      	subs	r3, r0, #0
   21470:	d000      	beq.n	21474 <m2m_wifi_cb+0x9c>
   21472:	e17e      	b.n	21772 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   21474:	4bad      	ldr	r3, [pc, #692]	; (2172c <m2m_wifi_cb+0x354>)
   21476:	681b      	ldr	r3, [r3, #0]
   21478:	2b00      	cmp	r3, #0
   2147a:	d100      	bne.n	2147e <m2m_wifi_cb+0xa6>
   2147c:	e179      	b.n	21772 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
   2147e:	4bab      	ldr	r3, [pc, #684]	; (2172c <m2m_wifi_cb+0x354>)
   21480:	681b      	ldr	r3, [r3, #0]
   21482:	220c      	movs	r2, #12
   21484:	18ba      	adds	r2, r7, r2
   21486:	0011      	movs	r1, r2
   21488:	2006      	movs	r0, #6
   2148a:	4798      	blx	r3
}
   2148c:	e171      	b.n	21772 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
   2148e:	1dfb      	adds	r3, r7, #7
   21490:	781b      	ldrb	r3, [r3, #0]
   21492:	2b0e      	cmp	r3, #14
   21494:	d100      	bne.n	21498 <m2m_wifi_cb+0xc0>
   21496:	e16c      	b.n	21772 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
   21498:	1dfb      	adds	r3, r7, #7
   2149a:	781b      	ldrb	r3, [r3, #0]
   2149c:	2b32      	cmp	r3, #50	; 0x32
   2149e:	d116      	bne.n	214ce <m2m_wifi_cb+0xf6>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
   214a0:	2384      	movs	r3, #132	; 0x84
   214a2:	18f9      	adds	r1, r7, r3
   214a4:	6838      	ldr	r0, [r7, #0]
   214a6:	2300      	movs	r3, #0
   214a8:	2218      	movs	r2, #24
   214aa:	4c9f      	ldr	r4, [pc, #636]	; (21728 <m2m_wifi_cb+0x350>)
   214ac:	47a0      	blx	r4
   214ae:	1e03      	subs	r3, r0, #0
   214b0:	d000      	beq.n	214b4 <m2m_wifi_cb+0xdc>
   214b2:	e15e      	b.n	21772 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   214b4:	4b9d      	ldr	r3, [pc, #628]	; (2172c <m2m_wifi_cb+0x354>)
   214b6:	681b      	ldr	r3, [r3, #0]
   214b8:	2b00      	cmp	r3, #0
   214ba:	d100      	bne.n	214be <m2m_wifi_cb+0xe6>
   214bc:	e159      	b.n	21772 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
   214be:	4b9b      	ldr	r3, [pc, #620]	; (2172c <m2m_wifi_cb+0x354>)
   214c0:	681b      	ldr	r3, [r3, #0]
   214c2:	2284      	movs	r2, #132	; 0x84
   214c4:	18ba      	adds	r2, r7, r2
   214c6:	0011      	movs	r1, r2
   214c8:	2032      	movs	r0, #50	; 0x32
   214ca:	4798      	blx	r3
}
   214cc:	e151      	b.n	21772 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
   214ce:	1dfb      	adds	r3, r7, #7
   214d0:	781b      	ldrb	r3, [r3, #0]
   214d2:	2b2f      	cmp	r3, #47	; 0x2f
   214d4:	d11d      	bne.n	21512 <m2m_wifi_cb+0x13a>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
   214d6:	230c      	movs	r3, #12
   214d8:	18fb      	adds	r3, r7, r3
   214da:	2264      	movs	r2, #100	; 0x64
   214dc:	2100      	movs	r1, #0
   214de:	0018      	movs	r0, r3
   214e0:	4b93      	ldr	r3, [pc, #588]	; (21730 <m2m_wifi_cb+0x358>)
   214e2:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
   214e4:	230c      	movs	r3, #12
   214e6:	18f9      	adds	r1, r7, r3
   214e8:	6838      	ldr	r0, [r7, #0]
   214ea:	2300      	movs	r3, #0
   214ec:	2264      	movs	r2, #100	; 0x64
   214ee:	4c8e      	ldr	r4, [pc, #568]	; (21728 <m2m_wifi_cb+0x350>)
   214f0:	47a0      	blx	r4
   214f2:	1e03      	subs	r3, r0, #0
   214f4:	d000      	beq.n	214f8 <m2m_wifi_cb+0x120>
   214f6:	e13c      	b.n	21772 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   214f8:	4b8c      	ldr	r3, [pc, #560]	; (2172c <m2m_wifi_cb+0x354>)
   214fa:	681b      	ldr	r3, [r3, #0]
   214fc:	2b00      	cmp	r3, #0
   214fe:	d100      	bne.n	21502 <m2m_wifi_cb+0x12a>
   21500:	e137      	b.n	21772 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
   21502:	4b8a      	ldr	r3, [pc, #552]	; (2172c <m2m_wifi_cb+0x354>)
   21504:	681b      	ldr	r3, [r3, #0]
   21506:	220c      	movs	r2, #12
   21508:	18ba      	adds	r2, r7, r2
   2150a:	0011      	movs	r1, r2
   2150c:	202f      	movs	r0, #47	; 0x2f
   2150e:	4798      	blx	r3
}
   21510:	e12f      	b.n	21772 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
   21512:	1dfb      	adds	r3, r7, #7
   21514:	781b      	ldrb	r3, [r3, #0]
   21516:	2b34      	cmp	r3, #52	; 0x34
   21518:	d137      	bne.n	2158a <m2m_wifi_cb+0x1b2>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
   2151a:	2380      	movs	r3, #128	; 0x80
   2151c:	18f9      	adds	r1, r7, r3
   2151e:	6838      	ldr	r0, [r7, #0]
   21520:	2300      	movs	r3, #0
   21522:	2204      	movs	r2, #4
   21524:	4c80      	ldr	r4, [pc, #512]	; (21728 <m2m_wifi_cb+0x350>)
   21526:	47a0      	blx	r4
   21528:	1e03      	subs	r3, r0, #0
   2152a:	d000      	beq.n	2152e <m2m_wifi_cb+0x156>
   2152c:	e121      	b.n	21772 <m2m_wifi_cb+0x39a>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
   2152e:	4b81      	ldr	r3, [pc, #516]	; (21734 <m2m_wifi_cb+0x35c>)
   21530:	0018      	movs	r0, r3
   21532:	4b81      	ldr	r3, [pc, #516]	; (21738 <m2m_wifi_cb+0x360>)
   21534:	4798      	blx	r3
   21536:	2380      	movs	r3, #128	; 0x80
   21538:	18fb      	adds	r3, r7, r3
   2153a:	681b      	ldr	r3, [r3, #0]
   2153c:	0e1b      	lsrs	r3, r3, #24
   2153e:	b2db      	uxtb	r3, r3
   21540:	0019      	movs	r1, r3
   21542:	2380      	movs	r3, #128	; 0x80
   21544:	18fb      	adds	r3, r7, r3
   21546:	681b      	ldr	r3, [r3, #0]
   21548:	0c1b      	lsrs	r3, r3, #16
   2154a:	b2db      	uxtb	r3, r3
   2154c:	001a      	movs	r2, r3
   2154e:	2380      	movs	r3, #128	; 0x80
   21550:	18fb      	adds	r3, r7, r3
   21552:	681b      	ldr	r3, [r3, #0]
   21554:	0a1b      	lsrs	r3, r3, #8
   21556:	b2db      	uxtb	r3, r3
   21558:	001c      	movs	r4, r3
   2155a:	2380      	movs	r3, #128	; 0x80
   2155c:	18fb      	adds	r3, r7, r3
   2155e:	681b      	ldr	r3, [r3, #0]
   21560:	b2db      	uxtb	r3, r3
   21562:	4876      	ldr	r0, [pc, #472]	; (2173c <m2m_wifi_cb+0x364>)
   21564:	9300      	str	r3, [sp, #0]
   21566:	0023      	movs	r3, r4
   21568:	4c73      	ldr	r4, [pc, #460]	; (21738 <m2m_wifi_cb+0x360>)
   2156a:	47a0      	blx	r4
   2156c:	4b74      	ldr	r3, [pc, #464]	; (21740 <m2m_wifi_cb+0x368>)
   2156e:	0018      	movs	r0, r3
   21570:	4b71      	ldr	r3, [pc, #452]	; (21738 <m2m_wifi_cb+0x360>)
   21572:	4798      	blx	r3
			if (gpfAppWifiCb)
   21574:	4b6d      	ldr	r3, [pc, #436]	; (2172c <m2m_wifi_cb+0x354>)
   21576:	681b      	ldr	r3, [r3, #0]
   21578:	2b00      	cmp	r3, #0
   2157a:	d100      	bne.n	2157e <m2m_wifi_cb+0x1a6>
   2157c:	e0f9      	b.n	21772 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
   2157e:	4b6b      	ldr	r3, [pc, #428]	; (2172c <m2m_wifi_cb+0x354>)
   21580:	681b      	ldr	r3, [r3, #0]
   21582:	2100      	movs	r1, #0
   21584:	2034      	movs	r0, #52	; 0x34
   21586:	4798      	blx	r3
}
   21588:	e0f3      	b.n	21772 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
   2158a:	1dfb      	adds	r3, r7, #7
   2158c:	781b      	ldrb	r3, [r3, #0]
   2158e:	2b11      	cmp	r3, #17
   21590:	d11e      	bne.n	215d0 <m2m_wifi_cb+0x1f8>
		gu8scanInProgress = 0;
   21592:	4b6c      	ldr	r3, [pc, #432]	; (21744 <m2m_wifi_cb+0x36c>)
   21594:	2200      	movs	r2, #0
   21596:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
   21598:	237c      	movs	r3, #124	; 0x7c
   2159a:	18f9      	adds	r1, r7, r3
   2159c:	6838      	ldr	r0, [r7, #0]
   2159e:	2300      	movs	r3, #0
   215a0:	2204      	movs	r2, #4
   215a2:	4c61      	ldr	r4, [pc, #388]	; (21728 <m2m_wifi_cb+0x350>)
   215a4:	47a0      	blx	r4
   215a6:	1e03      	subs	r3, r0, #0
   215a8:	d000      	beq.n	215ac <m2m_wifi_cb+0x1d4>
   215aa:	e0e2      	b.n	21772 <m2m_wifi_cb+0x39a>
			gu8ChNum = strState.u8NumofCh;
   215ac:	237c      	movs	r3, #124	; 0x7c
   215ae:	18fb      	adds	r3, r7, r3
   215b0:	781a      	ldrb	r2, [r3, #0]
   215b2:	4b65      	ldr	r3, [pc, #404]	; (21748 <m2m_wifi_cb+0x370>)
   215b4:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
   215b6:	4b5d      	ldr	r3, [pc, #372]	; (2172c <m2m_wifi_cb+0x354>)
   215b8:	681b      	ldr	r3, [r3, #0]
   215ba:	2b00      	cmp	r3, #0
   215bc:	d100      	bne.n	215c0 <m2m_wifi_cb+0x1e8>
   215be:	e0d8      	b.n	21772 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
   215c0:	4b5a      	ldr	r3, [pc, #360]	; (2172c <m2m_wifi_cb+0x354>)
   215c2:	681b      	ldr	r3, [r3, #0]
   215c4:	227c      	movs	r2, #124	; 0x7c
   215c6:	18ba      	adds	r2, r7, r2
   215c8:	0011      	movs	r1, r2
   215ca:	2011      	movs	r0, #17
   215cc:	4798      	blx	r3
}
   215ce:	e0d0      	b.n	21772 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
   215d0:	1dfb      	adds	r3, r7, #7
   215d2:	781b      	ldrb	r3, [r3, #0]
   215d4:	2b13      	cmp	r3, #19
   215d6:	d116      	bne.n	21606 <m2m_wifi_cb+0x22e>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
   215d8:	230c      	movs	r3, #12
   215da:	18f9      	adds	r1, r7, r3
   215dc:	6838      	ldr	r0, [r7, #0]
   215de:	2300      	movs	r3, #0
   215e0:	222c      	movs	r2, #44	; 0x2c
   215e2:	4c51      	ldr	r4, [pc, #324]	; (21728 <m2m_wifi_cb+0x350>)
   215e4:	47a0      	blx	r4
   215e6:	1e03      	subs	r3, r0, #0
   215e8:	d000      	beq.n	215ec <m2m_wifi_cb+0x214>
   215ea:	e0c2      	b.n	21772 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   215ec:	4b4f      	ldr	r3, [pc, #316]	; (2172c <m2m_wifi_cb+0x354>)
   215ee:	681b      	ldr	r3, [r3, #0]
   215f0:	2b00      	cmp	r3, #0
   215f2:	d100      	bne.n	215f6 <m2m_wifi_cb+0x21e>
   215f4:	e0bd      	b.n	21772 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
   215f6:	4b4d      	ldr	r3, [pc, #308]	; (2172c <m2m_wifi_cb+0x354>)
   215f8:	681b      	ldr	r3, [r3, #0]
   215fa:	220c      	movs	r2, #12
   215fc:	18ba      	adds	r2, r7, r2
   215fe:	0011      	movs	r1, r2
   21600:	2013      	movs	r0, #19
   21602:	4798      	blx	r3
}
   21604:	e0b5      	b.n	21772 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
   21606:	1dfb      	adds	r3, r7, #7
   21608:	781b      	ldrb	r3, [r3, #0]
   2160a:	2b04      	cmp	r3, #4
   2160c:	d116      	bne.n	2163c <m2m_wifi_cb+0x264>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   2160e:	23a8      	movs	r3, #168	; 0xa8
   21610:	18f9      	adds	r1, r7, r3
   21612:	6838      	ldr	r0, [r7, #0]
   21614:	2300      	movs	r3, #0
   21616:	2204      	movs	r2, #4
   21618:	4c43      	ldr	r4, [pc, #268]	; (21728 <m2m_wifi_cb+0x350>)
   2161a:	47a0      	blx	r4
   2161c:	1e03      	subs	r3, r0, #0
   2161e:	d000      	beq.n	21622 <m2m_wifi_cb+0x24a>
   21620:	e0a7      	b.n	21772 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   21622:	4b42      	ldr	r3, [pc, #264]	; (2172c <m2m_wifi_cb+0x354>)
   21624:	681b      	ldr	r3, [r3, #0]
   21626:	2b00      	cmp	r3, #0
   21628:	d100      	bne.n	2162c <m2m_wifi_cb+0x254>
   2162a:	e0a2      	b.n	21772 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
   2162c:	4b3f      	ldr	r3, [pc, #252]	; (2172c <m2m_wifi_cb+0x354>)
   2162e:	681b      	ldr	r3, [r3, #0]
   21630:	22a8      	movs	r2, #168	; 0xa8
   21632:	18ba      	adds	r2, r7, r2
   21634:	0011      	movs	r1, r2
   21636:	2004      	movs	r0, #4
   21638:	4798      	blx	r3
}
   2163a:	e09a      	b.n	21772 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
   2163c:	1dfb      	adds	r3, r7, #7
   2163e:	781b      	ldrb	r3, [r3, #0]
   21640:	2b65      	cmp	r3, #101	; 0x65
   21642:	d116      	bne.n	21672 <m2m_wifi_cb+0x29a>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   21644:	23a8      	movs	r3, #168	; 0xa8
   21646:	18f9      	adds	r1, r7, r3
   21648:	6838      	ldr	r0, [r7, #0]
   2164a:	2300      	movs	r3, #0
   2164c:	2204      	movs	r2, #4
   2164e:	4c36      	ldr	r4, [pc, #216]	; (21728 <m2m_wifi_cb+0x350>)
   21650:	47a0      	blx	r4
   21652:	1e03      	subs	r3, r0, #0
   21654:	d000      	beq.n	21658 <m2m_wifi_cb+0x280>
   21656:	e08c      	b.n	21772 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   21658:	4b34      	ldr	r3, [pc, #208]	; (2172c <m2m_wifi_cb+0x354>)
   2165a:	681b      	ldr	r3, [r3, #0]
   2165c:	2b00      	cmp	r3, #0
   2165e:	d100      	bne.n	21662 <m2m_wifi_cb+0x28a>
   21660:	e087      	b.n	21772 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
   21662:	4b32      	ldr	r3, [pc, #200]	; (2172c <m2m_wifi_cb+0x354>)
   21664:	681b      	ldr	r3, [r3, #0]
   21666:	22a8      	movs	r2, #168	; 0xa8
   21668:	18ba      	adds	r2, r7, r2
   2166a:	0011      	movs	r1, r2
   2166c:	2065      	movs	r0, #101	; 0x65
   2166e:	4798      	blx	r3
}
   21670:	e07f      	b.n	21772 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
   21672:	1dfb      	adds	r3, r7, #7
   21674:	781b      	ldrb	r3, [r3, #0]
   21676:	2b09      	cmp	r3, #9
   21678:	d116      	bne.n	216a8 <m2m_wifi_cb+0x2d0>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
   2167a:	230c      	movs	r3, #12
   2167c:	18f9      	adds	r1, r7, r3
   2167e:	6838      	ldr	r0, [r7, #0]
   21680:	2301      	movs	r3, #1
   21682:	2264      	movs	r2, #100	; 0x64
   21684:	4c28      	ldr	r4, [pc, #160]	; (21728 <m2m_wifi_cb+0x350>)
   21686:	47a0      	blx	r4
   21688:	1e03      	subs	r3, r0, #0
   2168a:	d000      	beq.n	2168e <m2m_wifi_cb+0x2b6>
   2168c:	e071      	b.n	21772 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   2168e:	4b27      	ldr	r3, [pc, #156]	; (2172c <m2m_wifi_cb+0x354>)
   21690:	681b      	ldr	r3, [r3, #0]
   21692:	2b00      	cmp	r3, #0
   21694:	d100      	bne.n	21698 <m2m_wifi_cb+0x2c0>
   21696:	e06c      	b.n	21772 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
   21698:	4b24      	ldr	r3, [pc, #144]	; (2172c <m2m_wifi_cb+0x354>)
   2169a:	681b      	ldr	r3, [r3, #0]
   2169c:	220c      	movs	r2, #12
   2169e:	18ba      	adds	r2, r7, r2
   216a0:	0011      	movs	r1, r2
   216a2:	2009      	movs	r0, #9
   216a4:	4798      	blx	r3
}
   216a6:	e064      	b.n	21772 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
   216a8:	1dfb      	adds	r3, r7, #7
   216aa:	781b      	ldrb	r3, [r3, #0]
   216ac:	2b2a      	cmp	r3, #42	; 0x2a
   216ae:	d114      	bne.n	216da <m2m_wifi_cb+0x302>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
   216b0:	2378      	movs	r3, #120	; 0x78
   216b2:	18f9      	adds	r1, r7, r3
   216b4:	6838      	ldr	r0, [r7, #0]
   216b6:	2301      	movs	r3, #1
   216b8:	2204      	movs	r2, #4
   216ba:	4c1b      	ldr	r4, [pc, #108]	; (21728 <m2m_wifi_cb+0x350>)
   216bc:	47a0      	blx	r4
   216be:	1e03      	subs	r3, r0, #0
   216c0:	d157      	bne.n	21772 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   216c2:	4b1a      	ldr	r3, [pc, #104]	; (2172c <m2m_wifi_cb+0x354>)
   216c4:	681b      	ldr	r3, [r3, #0]
   216c6:	2b00      	cmp	r3, #0
   216c8:	d053      	beq.n	21772 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
   216ca:	4b18      	ldr	r3, [pc, #96]	; (2172c <m2m_wifi_cb+0x354>)
   216cc:	681b      	ldr	r3, [r3, #0]
   216ce:	2278      	movs	r2, #120	; 0x78
   216d0:	18ba      	adds	r2, r7, r2
   216d2:	0011      	movs	r1, r2
   216d4:	202a      	movs	r0, #42	; 0x2a
   216d6:	4798      	blx	r3
}
   216d8:	e04b      	b.n	21772 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
   216da:	1dfb      	adds	r3, r7, #7
   216dc:	781b      	ldrb	r3, [r3, #0]
   216de:	2b20      	cmp	r3, #32
   216e0:	d134      	bne.n	2174c <m2m_wifi_cb+0x374>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
   216e2:	2370      	movs	r3, #112	; 0x70
   216e4:	18f9      	adds	r1, r7, r3
   216e6:	6838      	ldr	r0, [r7, #0]
   216e8:	2300      	movs	r3, #0
   216ea:	2208      	movs	r2, #8
   216ec:	4c0e      	ldr	r4, [pc, #56]	; (21728 <m2m_wifi_cb+0x350>)
   216ee:	47a0      	blx	r4
   216f0:	1e03      	subs	r3, r0, #0
   216f2:	d13e      	bne.n	21772 <m2m_wifi_cb+0x39a>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
   216f4:	683b      	ldr	r3, [r7, #0]
   216f6:	3308      	adds	r3, #8
   216f8:	0018      	movs	r0, r3
   216fa:	2370      	movs	r3, #112	; 0x70
   216fc:	18fb      	adds	r3, r7, r3
   216fe:	6819      	ldr	r1, [r3, #0]
   21700:	2370      	movs	r3, #112	; 0x70
   21702:	18fb      	adds	r3, r7, r3
   21704:	889a      	ldrh	r2, [r3, #4]
   21706:	2301      	movs	r3, #1
   21708:	4c07      	ldr	r4, [pc, #28]	; (21728 <m2m_wifi_cb+0x350>)
   2170a:	47a0      	blx	r4
   2170c:	1e03      	subs	r3, r0, #0
   2170e:	d130      	bne.n	21772 <m2m_wifi_cb+0x39a>
				if(gpfAppWifiCb)
   21710:	4b06      	ldr	r3, [pc, #24]	; (2172c <m2m_wifi_cb+0x354>)
   21712:	681b      	ldr	r3, [r3, #0]
   21714:	2b00      	cmp	r3, #0
   21716:	d02c      	beq.n	21772 <m2m_wifi_cb+0x39a>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
   21718:	4b04      	ldr	r3, [pc, #16]	; (2172c <m2m_wifi_cb+0x354>)
   2171a:	681b      	ldr	r3, [r3, #0]
   2171c:	2270      	movs	r2, #112	; 0x70
   2171e:	18ba      	adds	r2, r7, r2
   21720:	0011      	movs	r1, r2
   21722:	2020      	movs	r0, #32
   21724:	4798      	blx	r3
}
   21726:	e024      	b.n	21772 <m2m_wifi_cb+0x39a>
   21728:	0002119d 	.word	0x0002119d
   2172c:	20003cc4 	.word	0x20003cc4
   21730:	00020621 	.word	0x00020621
   21734:	000390d4 	.word	0x000390d4
   21738:	0001dc4d 	.word	0x0001dc4d
   2173c:	000390e0 	.word	0x000390e0
   21740:	00039100 	.word	0x00039100
   21744:	20003cc1 	.word	0x20003cc1
   21748:	20003cc0 	.word	0x20003cc0
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
   2174c:	2324      	movs	r3, #36	; 0x24
   2174e:	33ff      	adds	r3, #255	; 0xff
   21750:	001a      	movs	r2, r3
   21752:	490a      	ldr	r1, [pc, #40]	; (2177c <m2m_wifi_cb+0x3a4>)
   21754:	4b0a      	ldr	r3, [pc, #40]	; (21780 <m2m_wifi_cb+0x3a8>)
   21756:	0018      	movs	r0, r3
   21758:	4b0a      	ldr	r3, [pc, #40]	; (21784 <m2m_wifi_cb+0x3ac>)
   2175a:	4798      	blx	r3
   2175c:	1dfb      	adds	r3, r7, #7
   2175e:	781a      	ldrb	r2, [r3, #0]
   21760:	4b09      	ldr	r3, [pc, #36]	; (21788 <m2m_wifi_cb+0x3b0>)
   21762:	0011      	movs	r1, r2
   21764:	0018      	movs	r0, r3
   21766:	4b07      	ldr	r3, [pc, #28]	; (21784 <m2m_wifi_cb+0x3ac>)
   21768:	4798      	blx	r3
   2176a:	4b08      	ldr	r3, [pc, #32]	; (2178c <m2m_wifi_cb+0x3b4>)
   2176c:	0018      	movs	r0, r3
   2176e:	4b05      	ldr	r3, [pc, #20]	; (21784 <m2m_wifi_cb+0x3ac>)
   21770:	4798      	blx	r3
}
   21772:	46c0      	nop			; (mov r8, r8)
   21774:	46bd      	mov	sp, r7
   21776:	b02d      	add	sp, #180	; 0xb4
   21778:	bd90      	pop	{r4, r7, pc}
   2177a:	46c0      	nop			; (mov r8, r8)
   2177c:	000394a0 	.word	0x000394a0
   21780:	00039104 	.word	0x00039104
   21784:	0001dc4d 	.word	0x0001dc4d
   21788:	00039118 	.word	0x00039118
   2178c:	00039100 	.word	0x00039100

00021790 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
   21790:	b590      	push	{r4, r7, lr}
   21792:	b091      	sub	sp, #68	; 0x44
   21794:	af02      	add	r7, sp, #8
   21796:	6078      	str	r0, [r7, #4]
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
   21798:	2337      	movs	r3, #55	; 0x37
   2179a:	18fb      	adds	r3, r7, r3
   2179c:	2200      	movs	r2, #0
   2179e:	701a      	strb	r2, [r3, #0]
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
   217a0:	230b      	movs	r3, #11
   217a2:	18fb      	adds	r3, r7, r3
   217a4:	2201      	movs	r2, #1
   217a6:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
   217a8:	687b      	ldr	r3, [r7, #4]
   217aa:	2b00      	cmp	r3, #0
   217ac:	d104      	bne.n	217b8 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
   217ae:	2337      	movs	r3, #55	; 0x37
   217b0:	18fb      	adds	r3, r7, r3
   217b2:	22f4      	movs	r2, #244	; 0xf4
   217b4:	701a      	strb	r2, [r3, #0]
		goto _EXIT0;
   217b6:	e0b3      	b.n	21920 <m2m_wifi_init+0x190>
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
   217b8:	687b      	ldr	r3, [r7, #4]
   217ba:	681a      	ldr	r2, [r3, #0]
   217bc:	4b5c      	ldr	r3, [pc, #368]	; (21930 <m2m_wifi_init+0x1a0>)
   217be:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
   217c0:	4b5c      	ldr	r3, [pc, #368]	; (21934 <m2m_wifi_init+0x1a4>)
   217c2:	2200      	movs	r2, #0
   217c4:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
   217c6:	2337      	movs	r3, #55	; 0x37
   217c8:	18fc      	adds	r4, r7, r3
   217ca:	230b      	movs	r3, #11
   217cc:	18fb      	adds	r3, r7, r3
   217ce:	0018      	movs	r0, r3
   217d0:	4b59      	ldr	r3, [pc, #356]	; (21938 <m2m_wifi_init+0x1a8>)
   217d2:	4798      	blx	r3
   217d4:	0003      	movs	r3, r0
   217d6:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   217d8:	2337      	movs	r3, #55	; 0x37
   217da:	18fb      	adds	r3, r7, r3
   217dc:	781b      	ldrb	r3, [r3, #0]
   217de:	b25b      	sxtb	r3, r3
   217e0:	2b00      	cmp	r3, #0
   217e2:	d000      	beq.n	217e6 <m2m_wifi_init+0x56>
   217e4:	e099      	b.n	2191a <m2m_wifi_init+0x18a>
	/* Initialize host interface module */
	ret = hif_init(NULL);
   217e6:	2337      	movs	r3, #55	; 0x37
   217e8:	18fc      	adds	r4, r7, r3
   217ea:	2000      	movs	r0, #0
   217ec:	4b53      	ldr	r3, [pc, #332]	; (2193c <m2m_wifi_init+0x1ac>)
   217ee:	4798      	blx	r3
   217f0:	0003      	movs	r3, r0
   217f2:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   217f4:	2337      	movs	r3, #55	; 0x37
   217f6:	18fb      	adds	r3, r7, r3
   217f8:	781b      	ldrb	r3, [r3, #0]
   217fa:	b25b      	sxtb	r3, r3
   217fc:	2b00      	cmp	r3, #0
   217fe:	d000      	beq.n	21802 <m2m_wifi_init+0x72>
   21800:	e086      	b.n	21910 <m2m_wifi_init+0x180>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
   21802:	4b4f      	ldr	r3, [pc, #316]	; (21940 <m2m_wifi_init+0x1b0>)
   21804:	0019      	movs	r1, r3
   21806:	2001      	movs	r0, #1
   21808:	4b4e      	ldr	r3, [pc, #312]	; (21944 <m2m_wifi_init+0x1b4>)
   2180a:	4798      	blx	r3

	ret = nm_get_firmware_full_info(&strtmp);
   2180c:	2337      	movs	r3, #55	; 0x37
   2180e:	18fc      	adds	r4, r7, r3
   21810:	230c      	movs	r3, #12
   21812:	18fb      	adds	r3, r7, r3
   21814:	0018      	movs	r0, r3
   21816:	4b4c      	ldr	r3, [pc, #304]	; (21948 <m2m_wifi_init+0x1b8>)
   21818:	4798      	blx	r3
   2181a:	0003      	movs	r3, r0
   2181c:	7023      	strb	r3, [r4, #0]

	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
   2181e:	4b4b      	ldr	r3, [pc, #300]	; (2194c <m2m_wifi_init+0x1bc>)
   21820:	0018      	movs	r0, r3
   21822:	4b4b      	ldr	r3, [pc, #300]	; (21950 <m2m_wifi_init+0x1c0>)
   21824:	4798      	blx	r3
   21826:	230c      	movs	r3, #12
   21828:	18fb      	adds	r3, r7, r3
   2182a:	791b      	ldrb	r3, [r3, #4]
   2182c:	0019      	movs	r1, r3
   2182e:	230c      	movs	r3, #12
   21830:	18fb      	adds	r3, r7, r3
   21832:	795b      	ldrb	r3, [r3, #5]
   21834:	001a      	movs	r2, r3
   21836:	230c      	movs	r3, #12
   21838:	18fb      	adds	r3, r7, r3
   2183a:	799b      	ldrb	r3, [r3, #6]
   2183c:	001c      	movs	r4, r3
   2183e:	230c      	movs	r3, #12
   21840:	18fb      	adds	r3, r7, r3
   21842:	8c1b      	ldrh	r3, [r3, #32]
   21844:	4843      	ldr	r0, [pc, #268]	; (21954 <m2m_wifi_init+0x1c4>)
   21846:	9300      	str	r3, [sp, #0]
   21848:	0023      	movs	r3, r4
   2184a:	4c41      	ldr	r4, [pc, #260]	; (21950 <m2m_wifi_init+0x1c0>)
   2184c:	47a0      	blx	r4
   2184e:	4b42      	ldr	r3, [pc, #264]	; (21958 <m2m_wifi_init+0x1c8>)
   21850:	0018      	movs	r0, r3
   21852:	4b3f      	ldr	r3, [pc, #252]	; (21950 <m2m_wifi_init+0x1c0>)
   21854:	4798      	blx	r3
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
   21856:	4b3d      	ldr	r3, [pc, #244]	; (2194c <m2m_wifi_init+0x1bc>)
   21858:	0018      	movs	r0, r3
   2185a:	4b3d      	ldr	r3, [pc, #244]	; (21950 <m2m_wifi_init+0x1c0>)
   2185c:	4798      	blx	r3
   2185e:	230c      	movs	r3, #12
   21860:	18fb      	adds	r3, r7, r3
   21862:	3316      	adds	r3, #22
   21864:	001a      	movs	r2, r3
   21866:	230c      	movs	r3, #12
   21868:	18fb      	adds	r3, r7, r3
   2186a:	330a      	adds	r3, #10
   2186c:	0019      	movs	r1, r3
   2186e:	4b3b      	ldr	r3, [pc, #236]	; (2195c <m2m_wifi_init+0x1cc>)
   21870:	0018      	movs	r0, r3
   21872:	4b37      	ldr	r3, [pc, #220]	; (21950 <m2m_wifi_init+0x1c0>)
   21874:	4798      	blx	r3
   21876:	4b38      	ldr	r3, [pc, #224]	; (21958 <m2m_wifi_init+0x1c8>)
   21878:	0018      	movs	r0, r3
   2187a:	4b35      	ldr	r3, [pc, #212]	; (21950 <m2m_wifi_init+0x1c0>)
   2187c:	4798      	blx	r3
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
   2187e:	4b33      	ldr	r3, [pc, #204]	; (2194c <m2m_wifi_init+0x1bc>)
   21880:	0018      	movs	r0, r3
   21882:	4b33      	ldr	r3, [pc, #204]	; (21950 <m2m_wifi_init+0x1c0>)
   21884:	4798      	blx	r3
   21886:	230c      	movs	r3, #12
   21888:	18fb      	adds	r3, r7, r3
   2188a:	79db      	ldrb	r3, [r3, #7]
   2188c:	0019      	movs	r1, r3
   2188e:	230c      	movs	r3, #12
   21890:	18fb      	adds	r3, r7, r3
   21892:	7a1b      	ldrb	r3, [r3, #8]
   21894:	001a      	movs	r2, r3
   21896:	230c      	movs	r3, #12
   21898:	18fb      	adds	r3, r7, r3
   2189a:	7a5b      	ldrb	r3, [r3, #9]
   2189c:	4830      	ldr	r0, [pc, #192]	; (21960 <m2m_wifi_init+0x1d0>)
   2189e:	4c2c      	ldr	r4, [pc, #176]	; (21950 <m2m_wifi_init+0x1c0>)
   218a0:	47a0      	blx	r4
   218a2:	4b2d      	ldr	r3, [pc, #180]	; (21958 <m2m_wifi_init+0x1c8>)
   218a4:	0018      	movs	r0, r3
   218a6:	4b2a      	ldr	r3, [pc, #168]	; (21950 <m2m_wifi_init+0x1c0>)
   218a8:	4798      	blx	r3
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
   218aa:	4b28      	ldr	r3, [pc, #160]	; (2194c <m2m_wifi_init+0x1bc>)
   218ac:	0018      	movs	r0, r3
   218ae:	4b28      	ldr	r3, [pc, #160]	; (21950 <m2m_wifi_init+0x1c0>)
   218b0:	4798      	blx	r3
   218b2:	482c      	ldr	r0, [pc, #176]	; (21964 <m2m_wifi_init+0x1d4>)
   218b4:	2304      	movs	r3, #4
   218b6:	2205      	movs	r2, #5
   218b8:	2113      	movs	r1, #19
   218ba:	4c25      	ldr	r4, [pc, #148]	; (21950 <m2m_wifi_init+0x1c0>)
   218bc:	47a0      	blx	r4
   218be:	4b26      	ldr	r3, [pc, #152]	; (21958 <m2m_wifi_init+0x1c8>)
   218c0:	0018      	movs	r0, r3
   218c2:	4b23      	ldr	r3, [pc, #140]	; (21950 <m2m_wifi_init+0x1c0>)
   218c4:	4798      	blx	r3
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
   218c6:	4b21      	ldr	r3, [pc, #132]	; (2194c <m2m_wifi_init+0x1bc>)
   218c8:	0018      	movs	r0, r3
   218ca:	4b21      	ldr	r3, [pc, #132]	; (21950 <m2m_wifi_init+0x1c0>)
   218cc:	4798      	blx	r3
   218ce:	4a26      	ldr	r2, [pc, #152]	; (21968 <m2m_wifi_init+0x1d8>)
   218d0:	4926      	ldr	r1, [pc, #152]	; (2196c <m2m_wifi_init+0x1dc>)
   218d2:	4b27      	ldr	r3, [pc, #156]	; (21970 <m2m_wifi_init+0x1e0>)
   218d4:	0018      	movs	r0, r3
   218d6:	4b1e      	ldr	r3, [pc, #120]	; (21950 <m2m_wifi_init+0x1c0>)
   218d8:	4798      	blx	r3
   218da:	4b1f      	ldr	r3, [pc, #124]	; (21958 <m2m_wifi_init+0x1c8>)
   218dc:	0018      	movs	r0, r3
   218de:	4b1c      	ldr	r3, [pc, #112]	; (21950 <m2m_wifi_init+0x1c0>)
   218e0:	4798      	blx	r3
	if(M2M_ERR_FW_VER_MISMATCH == ret)
   218e2:	2337      	movs	r3, #55	; 0x37
   218e4:	18fb      	adds	r3, r7, r3
   218e6:	781b      	ldrb	r3, [r3, #0]
   218e8:	b25b      	sxtb	r3, r3
   218ea:	330d      	adds	r3, #13
   218ec:	d117      	bne.n	2191e <m2m_wifi_init+0x18e>
	{
		M2M_ERR("Mismatch Firmawre Version\n");
   218ee:	23e8      	movs	r3, #232	; 0xe8
   218f0:	33ff      	adds	r3, #255	; 0xff
   218f2:	001a      	movs	r2, r3
   218f4:	491f      	ldr	r1, [pc, #124]	; (21974 <m2m_wifi_init+0x1e4>)
   218f6:	4b20      	ldr	r3, [pc, #128]	; (21978 <m2m_wifi_init+0x1e8>)
   218f8:	0018      	movs	r0, r3
   218fa:	4b15      	ldr	r3, [pc, #84]	; (21950 <m2m_wifi_init+0x1c0>)
   218fc:	4798      	blx	r3
   218fe:	4b1f      	ldr	r3, [pc, #124]	; (2197c <m2m_wifi_init+0x1ec>)
   21900:	0018      	movs	r0, r3
   21902:	4b13      	ldr	r3, [pc, #76]	; (21950 <m2m_wifi_init+0x1c0>)
   21904:	4798      	blx	r3
   21906:	4b14      	ldr	r3, [pc, #80]	; (21958 <m2m_wifi_init+0x1c8>)
   21908:	0018      	movs	r0, r3
   2190a:	4b11      	ldr	r3, [pc, #68]	; (21950 <m2m_wifi_init+0x1c0>)
   2190c:	4798      	blx	r3
	}

	goto _EXIT0;
   2190e:	e006      	b.n	2191e <m2m_wifi_init+0x18e>
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   21910:	46c0      	nop			; (mov r8, r8)

_EXIT1:
	nm_drv_deinit(NULL);
   21912:	2000      	movs	r0, #0
   21914:	4b1a      	ldr	r3, [pc, #104]	; (21980 <m2m_wifi_init+0x1f0>)
   21916:	4798      	blx	r3
   21918:	e002      	b.n	21920 <m2m_wifi_init+0x190>
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   2191a:	46c0      	nop			; (mov r8, r8)
   2191c:	e000      	b.n	21920 <m2m_wifi_init+0x190>
	goto _EXIT0;
   2191e:	46c0      	nop			; (mov r8, r8)
_EXIT0:
	return ret;
   21920:	2337      	movs	r3, #55	; 0x37
   21922:	18fb      	adds	r3, r7, r3
   21924:	781b      	ldrb	r3, [r3, #0]
   21926:	b25b      	sxtb	r3, r3
}
   21928:	0018      	movs	r0, r3
   2192a:	46bd      	mov	sp, r7
   2192c:	b00f      	add	sp, #60	; 0x3c
   2192e:	bd90      	pop	{r4, r7, pc}
   21930:	20003cc4 	.word	0x20003cc4
   21934:	20003cc1 	.word	0x20003cc1
   21938:	00022ab5 	.word	0x00022ab5
   2193c:	00020839 	.word	0x00020839
   21940:	000213d9 	.word	0x000213d9
   21944:	0002131d 	.word	0x0002131d
   21948:	000228e9 	.word	0x000228e9
   2194c:	000390d4 	.word	0x000390d4
   21950:	0001dc4d 	.word	0x0001dc4d
   21954:	00039278 	.word	0x00039278
   21958:	00039100 	.word	0x00039100
   2195c:	000392a0 	.word	0x000392a0
   21960:	000392bc 	.word	0x000392bc
   21964:	000392e0 	.word	0x000392e0
   21968:	000392f8 	.word	0x000392f8
   2196c:	00039304 	.word	0x00039304
   21970:	00039310 	.word	0x00039310
   21974:	000394ac 	.word	0x000394ac
   21978:	00039104 	.word	0x00039104
   2197c:	00039328 	.word	0x00039328
   21980:	00022c45 	.word	0x00022c45

00021984 <m2m_wifi_handle_events>:
{
	hif_yield();
}

sint8 m2m_wifi_handle_events(void * arg)
{
   21984:	b580      	push	{r7, lr}
   21986:	b082      	sub	sp, #8
   21988:	af00      	add	r7, sp, #0
   2198a:	6078      	str	r0, [r7, #4]
	return hif_handle_isr();
   2198c:	4b03      	ldr	r3, [pc, #12]	; (2199c <m2m_wifi_handle_events+0x18>)
   2198e:	4798      	blx	r3
   21990:	0003      	movs	r3, r0
}
   21992:	0018      	movs	r0, r3
   21994:	46bd      	mov	sp, r7
   21996:	b002      	add	sp, #8
   21998:	bd80      	pop	{r7, pc}
   2199a:	46c0      	nop			; (mov r8, r8)
   2199c:	000210fd 	.word	0x000210fd

000219a0 <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
   219a0:	b590      	push	{r4, r7, lr}
   219a2:	b087      	sub	sp, #28
   219a4:	af02      	add	r7, sp, #8
   219a6:	60f8      	str	r0, [r7, #12]
   219a8:	0008      	movs	r0, r1
   219aa:	0011      	movs	r1, r2
   219ac:	607b      	str	r3, [r7, #4]
   219ae:	230b      	movs	r3, #11
   219b0:	18fb      	adds	r3, r7, r3
   219b2:	1c02      	adds	r2, r0, #0
   219b4:	701a      	strb	r2, [r3, #0]
   219b6:	230a      	movs	r3, #10
   219b8:	18fb      	adds	r3, r7, r3
   219ba:	1c0a      	adds	r2, r1, #0
   219bc:	701a      	strb	r2, [r3, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
   219be:	687c      	ldr	r4, [r7, #4]
   219c0:	230a      	movs	r3, #10
   219c2:	18fb      	adds	r3, r7, r3
   219c4:	781a      	ldrb	r2, [r3, #0]
   219c6:	230b      	movs	r3, #11
   219c8:	18fb      	adds	r3, r7, r3
   219ca:	7819      	ldrb	r1, [r3, #0]
   219cc:	68f8      	ldr	r0, [r7, #12]
   219ce:	2300      	movs	r3, #0
   219d0:	9301      	str	r3, [sp, #4]
   219d2:	2320      	movs	r3, #32
   219d4:	18fb      	adds	r3, r7, r3
   219d6:	881b      	ldrh	r3, [r3, #0]
   219d8:	9300      	str	r3, [sp, #0]
   219da:	0023      	movs	r3, r4
   219dc:	4c03      	ldr	r4, [pc, #12]	; (219ec <m2m_wifi_connect+0x4c>)
   219de:	47a0      	blx	r4
   219e0:	0003      	movs	r3, r0
}
   219e2:	0018      	movs	r0, r3
   219e4:	46bd      	mov	sp, r7
   219e6:	b005      	add	sp, #20
   219e8:	bd90      	pop	{r4, r7, pc}
   219ea:	46c0      	nop			; (mov r8, r8)
   219ec:	000219f1 	.word	0x000219f1

000219f0 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
   219f0:	b5b0      	push	{r4, r5, r7, lr}
   219f2:	b0aa      	sub	sp, #168	; 0xa8
   219f4:	af04      	add	r7, sp, #16
   219f6:	60f8      	str	r0, [r7, #12]
   219f8:	0008      	movs	r0, r1
   219fa:	0011      	movs	r1, r2
   219fc:	607b      	str	r3, [r7, #4]
   219fe:	230b      	movs	r3, #11
   21a00:	18fb      	adds	r3, r7, r3
   21a02:	1c02      	adds	r2, r0, #0
   21a04:	701a      	strb	r2, [r3, #0]
   21a06:	230a      	movs	r3, #10
   21a08:	18fb      	adds	r3, r7, r3
   21a0a:	1c0a      	adds	r2, r1, #0
   21a0c:	701a      	strb	r2, [r3, #0]
	sint8				ret = M2M_SUCCESS;
   21a0e:	2397      	movs	r3, #151	; 0x97
   21a10:	18fb      	adds	r3, r7, r3
   21a12:	2200      	movs	r2, #0
   21a14:	701a      	strb	r2, [r3, #0]
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
   21a16:	230a      	movs	r3, #10
   21a18:	18fb      	adds	r3, r7, r3
   21a1a:	781b      	ldrb	r3, [r3, #0]
   21a1c:	2b01      	cmp	r3, #1
   21a1e:	d100      	bne.n	21a22 <m2m_wifi_connect_sc+0x32>
   21a20:	e085      	b.n	21b2e <m2m_wifi_connect_sc+0x13e>
	{
		if(pvAuthInfo == NULL)
   21a22:	687b      	ldr	r3, [r7, #4]
   21a24:	2b00      	cmp	r3, #0
   21a26:	d112      	bne.n	21a4e <m2m_wifi_connect_sc+0x5e>
		{
			M2M_ERR("Key is not valid\n");
   21a28:	4ad8      	ldr	r2, [pc, #864]	; (21d8c <m2m_wifi_connect_sc+0x39c>)
   21a2a:	49d9      	ldr	r1, [pc, #868]	; (21d90 <m2m_wifi_connect_sc+0x3a0>)
   21a2c:	4bd9      	ldr	r3, [pc, #868]	; (21d94 <m2m_wifi_connect_sc+0x3a4>)
   21a2e:	0018      	movs	r0, r3
   21a30:	4bd9      	ldr	r3, [pc, #868]	; (21d98 <m2m_wifi_connect_sc+0x3a8>)
   21a32:	4798      	blx	r3
   21a34:	4bd9      	ldr	r3, [pc, #868]	; (21d9c <m2m_wifi_connect_sc+0x3ac>)
   21a36:	0018      	movs	r0, r3
   21a38:	4bd7      	ldr	r3, [pc, #860]	; (21d98 <m2m_wifi_connect_sc+0x3a8>)
   21a3a:	4798      	blx	r3
   21a3c:	4bd8      	ldr	r3, [pc, #864]	; (21da0 <m2m_wifi_connect_sc+0x3b0>)
   21a3e:	0018      	movs	r0, r3
   21a40:	4bd5      	ldr	r3, [pc, #852]	; (21d98 <m2m_wifi_connect_sc+0x3a8>)
   21a42:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   21a44:	2397      	movs	r3, #151	; 0x97
   21a46:	18fb      	adds	r3, r7, r3
   21a48:	22f4      	movs	r2, #244	; 0xf4
   21a4a:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   21a4c:	e1f9      	b.n	21e42 <m2m_wifi_connect_sc+0x452>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
   21a4e:	230a      	movs	r3, #10
   21a50:	18fb      	adds	r3, r7, r3
   21a52:	781b      	ldrb	r3, [r3, #0]
   21a54:	2b02      	cmp	r3, #2
   21a56:	d16a      	bne.n	21b2e <m2m_wifi_connect_sc+0x13e>
   21a58:	687b      	ldr	r3, [r7, #4]
   21a5a:	0018      	movs	r0, r3
   21a5c:	4bd1      	ldr	r3, [pc, #836]	; (21da4 <m2m_wifi_connect_sc+0x3b4>)
   21a5e:	4798      	blx	r3
   21a60:	0003      	movs	r3, r0
   21a62:	2b40      	cmp	r3, #64	; 0x40
   21a64:	d163      	bne.n	21b2e <m2m_wifi_connect_sc+0x13e>
		{
			uint8 i = 0;
   21a66:	2396      	movs	r3, #150	; 0x96
   21a68:	18fb      	adds	r3, r7, r3
   21a6a:	2200      	movs	r2, #0
   21a6c:	701a      	strb	r2, [r3, #0]
			uint8* pu8Psk = (uint8*)pvAuthInfo;
   21a6e:	687b      	ldr	r3, [r7, #4]
   21a70:	2290      	movs	r2, #144	; 0x90
   21a72:	18ba      	adds	r2, r7, r2
   21a74:	6013      	str	r3, [r2, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
   21a76:	e055      	b.n	21b24 <m2m_wifi_connect_sc+0x134>
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
   21a78:	2396      	movs	r3, #150	; 0x96
   21a7a:	18fb      	adds	r3, r7, r3
   21a7c:	781b      	ldrb	r3, [r3, #0]
   21a7e:	2290      	movs	r2, #144	; 0x90
   21a80:	18ba      	adds	r2, r7, r2
   21a82:	6812      	ldr	r2, [r2, #0]
   21a84:	18d3      	adds	r3, r2, r3
   21a86:	781b      	ldrb	r3, [r3, #0]
   21a88:	2b2f      	cmp	r3, #47	; 0x2f
   21a8a:	d931      	bls.n	21af0 <m2m_wifi_connect_sc+0x100>
   21a8c:	2396      	movs	r3, #150	; 0x96
   21a8e:	18fb      	adds	r3, r7, r3
   21a90:	781b      	ldrb	r3, [r3, #0]
   21a92:	2290      	movs	r2, #144	; 0x90
   21a94:	18ba      	adds	r2, r7, r2
   21a96:	6812      	ldr	r2, [r2, #0]
   21a98:	18d3      	adds	r3, r2, r3
   21a9a:	781b      	ldrb	r3, [r3, #0]
   21a9c:	2b39      	cmp	r3, #57	; 0x39
   21a9e:	d909      	bls.n	21ab4 <m2m_wifi_connect_sc+0xc4>
   21aa0:	2396      	movs	r3, #150	; 0x96
   21aa2:	18fb      	adds	r3, r7, r3
   21aa4:	781b      	ldrb	r3, [r3, #0]
   21aa6:	2290      	movs	r2, #144	; 0x90
   21aa8:	18ba      	adds	r2, r7, r2
   21aaa:	6812      	ldr	r2, [r2, #0]
   21aac:	18d3      	adds	r3, r2, r3
   21aae:	781b      	ldrb	r3, [r3, #0]
   21ab0:	2b40      	cmp	r3, #64	; 0x40
   21ab2:	d91d      	bls.n	21af0 <m2m_wifi_connect_sc+0x100>
   21ab4:	2396      	movs	r3, #150	; 0x96
   21ab6:	18fb      	adds	r3, r7, r3
   21ab8:	781b      	ldrb	r3, [r3, #0]
   21aba:	2290      	movs	r2, #144	; 0x90
   21abc:	18ba      	adds	r2, r7, r2
   21abe:	6812      	ldr	r2, [r2, #0]
   21ac0:	18d3      	adds	r3, r2, r3
   21ac2:	781b      	ldrb	r3, [r3, #0]
   21ac4:	2b46      	cmp	r3, #70	; 0x46
   21ac6:	d909      	bls.n	21adc <m2m_wifi_connect_sc+0xec>
   21ac8:	2396      	movs	r3, #150	; 0x96
   21aca:	18fb      	adds	r3, r7, r3
   21acc:	781b      	ldrb	r3, [r3, #0]
   21ace:	2290      	movs	r2, #144	; 0x90
   21ad0:	18ba      	adds	r2, r7, r2
   21ad2:	6812      	ldr	r2, [r2, #0]
   21ad4:	18d3      	adds	r3, r2, r3
   21ad6:	781b      	ldrb	r3, [r3, #0]
   21ad8:	2b60      	cmp	r3, #96	; 0x60
   21ada:	d909      	bls.n	21af0 <m2m_wifi_connect_sc+0x100>
   21adc:	2396      	movs	r3, #150	; 0x96
   21ade:	18fb      	adds	r3, r7, r3
   21ae0:	781b      	ldrb	r3, [r3, #0]
   21ae2:	2290      	movs	r2, #144	; 0x90
   21ae4:	18ba      	adds	r2, r7, r2
   21ae6:	6812      	ldr	r2, [r2, #0]
   21ae8:	18d3      	adds	r3, r2, r3
   21aea:	781b      	ldrb	r3, [r3, #0]
   21aec:	2b66      	cmp	r3, #102	; 0x66
   21aee:	d912      	bls.n	21b16 <m2m_wifi_connect_sc+0x126>
				{
					M2M_ERR("Invalid Key\n");
   21af0:	4aad      	ldr	r2, [pc, #692]	; (21da8 <m2m_wifi_connect_sc+0x3b8>)
   21af2:	49a7      	ldr	r1, [pc, #668]	; (21d90 <m2m_wifi_connect_sc+0x3a0>)
   21af4:	4ba7      	ldr	r3, [pc, #668]	; (21d94 <m2m_wifi_connect_sc+0x3a4>)
   21af6:	0018      	movs	r0, r3
   21af8:	4ba7      	ldr	r3, [pc, #668]	; (21d98 <m2m_wifi_connect_sc+0x3a8>)
   21afa:	4798      	blx	r3
   21afc:	4bab      	ldr	r3, [pc, #684]	; (21dac <m2m_wifi_connect_sc+0x3bc>)
   21afe:	0018      	movs	r0, r3
   21b00:	4ba5      	ldr	r3, [pc, #660]	; (21d98 <m2m_wifi_connect_sc+0x3a8>)
   21b02:	4798      	blx	r3
   21b04:	4ba6      	ldr	r3, [pc, #664]	; (21da0 <m2m_wifi_connect_sc+0x3b0>)
   21b06:	0018      	movs	r0, r3
   21b08:	4ba3      	ldr	r3, [pc, #652]	; (21d98 <m2m_wifi_connect_sc+0x3a8>)
   21b0a:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
   21b0c:	2397      	movs	r3, #151	; 0x97
   21b0e:	18fb      	adds	r3, r7, r3
   21b10:	22f4      	movs	r2, #244	; 0xf4
   21b12:	701a      	strb	r2, [r3, #0]
					goto ERR1;
   21b14:	e195      	b.n	21e42 <m2m_wifi_connect_sc+0x452>
				}
				i++;
   21b16:	2396      	movs	r3, #150	; 0x96
   21b18:	18fb      	adds	r3, r7, r3
   21b1a:	781a      	ldrb	r2, [r3, #0]
   21b1c:	2396      	movs	r3, #150	; 0x96
   21b1e:	18fb      	adds	r3, r7, r3
   21b20:	3201      	adds	r2, #1
   21b22:	701a      	strb	r2, [r3, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
   21b24:	2396      	movs	r3, #150	; 0x96
   21b26:	18fb      	adds	r3, r7, r3
   21b28:	781b      	ldrb	r3, [r3, #0]
   21b2a:	2b3f      	cmp	r3, #63	; 0x3f
   21b2c:	d9a4      	bls.n	21a78 <m2m_wifi_connect_sc+0x88>
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
   21b2e:	230b      	movs	r3, #11
   21b30:	18fb      	adds	r3, r7, r3
   21b32:	781b      	ldrb	r3, [r3, #0]
   21b34:	2b00      	cmp	r3, #0
   21b36:	d004      	beq.n	21b42 <m2m_wifi_connect_sc+0x152>
   21b38:	230b      	movs	r3, #11
   21b3a:	18fb      	adds	r3, r7, r3
   21b3c:	781b      	ldrb	r3, [r3, #0]
   21b3e:	2b20      	cmp	r3, #32
   21b40:	d913      	bls.n	21b6a <m2m_wifi_connect_sc+0x17a>
	{
		M2M_ERR("SSID LEN INVALID\n");
   21b42:	238c      	movs	r3, #140	; 0x8c
   21b44:	009a      	lsls	r2, r3, #2
   21b46:	4992      	ldr	r1, [pc, #584]	; (21d90 <m2m_wifi_connect_sc+0x3a0>)
   21b48:	4b92      	ldr	r3, [pc, #584]	; (21d94 <m2m_wifi_connect_sc+0x3a4>)
   21b4a:	0018      	movs	r0, r3
   21b4c:	4b92      	ldr	r3, [pc, #584]	; (21d98 <m2m_wifi_connect_sc+0x3a8>)
   21b4e:	4798      	blx	r3
   21b50:	4b97      	ldr	r3, [pc, #604]	; (21db0 <m2m_wifi_connect_sc+0x3c0>)
   21b52:	0018      	movs	r0, r3
   21b54:	4b90      	ldr	r3, [pc, #576]	; (21d98 <m2m_wifi_connect_sc+0x3a8>)
   21b56:	4798      	blx	r3
   21b58:	4b91      	ldr	r3, [pc, #580]	; (21da0 <m2m_wifi_connect_sc+0x3b0>)
   21b5a:	0018      	movs	r0, r3
   21b5c:	4b8e      	ldr	r3, [pc, #568]	; (21d98 <m2m_wifi_connect_sc+0x3a8>)
   21b5e:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
   21b60:	2397      	movs	r3, #151	; 0x97
   21b62:	18fb      	adds	r3, r7, r3
   21b64:	22f4      	movs	r2, #244	; 0xf4
   21b66:	701a      	strb	r2, [r3, #0]
		goto ERR1;
   21b68:	e16b      	b.n	21e42 <m2m_wifi_connect_sc+0x452>
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
   21b6a:	23a8      	movs	r3, #168	; 0xa8
   21b6c:	18fb      	adds	r3, r7, r3
   21b6e:	881b      	ldrh	r3, [r3, #0]
   21b70:	2b00      	cmp	r3, #0
   21b72:	d004      	beq.n	21b7e <m2m_wifi_connect_sc+0x18e>
   21b74:	23a8      	movs	r3, #168	; 0xa8
   21b76:	18fb      	adds	r3, r7, r3
   21b78:	881b      	ldrh	r3, [r3, #0]
   21b7a:	2b0e      	cmp	r3, #14
   21b7c:	d917      	bls.n	21bae <m2m_wifi_connect_sc+0x1be>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
   21b7e:	23a8      	movs	r3, #168	; 0xa8
   21b80:	18fb      	adds	r3, r7, r3
   21b82:	881b      	ldrh	r3, [r3, #0]
   21b84:	2bff      	cmp	r3, #255	; 0xff
   21b86:	d012      	beq.n	21bae <m2m_wifi_connect_sc+0x1be>
		{
			M2M_ERR("CH INVALID\n");
   21b88:	4a8a      	ldr	r2, [pc, #552]	; (21db4 <m2m_wifi_connect_sc+0x3c4>)
   21b8a:	4981      	ldr	r1, [pc, #516]	; (21d90 <m2m_wifi_connect_sc+0x3a0>)
   21b8c:	4b81      	ldr	r3, [pc, #516]	; (21d94 <m2m_wifi_connect_sc+0x3a4>)
   21b8e:	0018      	movs	r0, r3
   21b90:	4b81      	ldr	r3, [pc, #516]	; (21d98 <m2m_wifi_connect_sc+0x3a8>)
   21b92:	4798      	blx	r3
   21b94:	4b88      	ldr	r3, [pc, #544]	; (21db8 <m2m_wifi_connect_sc+0x3c8>)
   21b96:	0018      	movs	r0, r3
   21b98:	4b7f      	ldr	r3, [pc, #508]	; (21d98 <m2m_wifi_connect_sc+0x3a8>)
   21b9a:	4798      	blx	r3
   21b9c:	4b80      	ldr	r3, [pc, #512]	; (21da0 <m2m_wifi_connect_sc+0x3b0>)
   21b9e:	0018      	movs	r0, r3
   21ba0:	4b7d      	ldr	r3, [pc, #500]	; (21d98 <m2m_wifi_connect_sc+0x3a8>)
   21ba2:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   21ba4:	2397      	movs	r3, #151	; 0x97
   21ba6:	18fb      	adds	r3, r7, r3
   21ba8:	22f4      	movs	r2, #244	; 0xf4
   21baa:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   21bac:	e149      	b.n	21e42 <m2m_wifi_connect_sc+0x452>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
   21bae:	230b      	movs	r3, #11
   21bb0:	18fb      	adds	r3, r7, r3
   21bb2:	781a      	ldrb	r2, [r3, #0]
   21bb4:	68f9      	ldr	r1, [r7, #12]
   21bb6:	2314      	movs	r3, #20
   21bb8:	18fb      	adds	r3, r7, r3
   21bba:	3346      	adds	r3, #70	; 0x46
   21bbc:	0018      	movs	r0, r3
   21bbe:	4b7f      	ldr	r3, [pc, #508]	; (21dbc <m2m_wifi_connect_sc+0x3cc>)
   21bc0:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
   21bc2:	230b      	movs	r3, #11
   21bc4:	18fb      	adds	r3, r7, r3
   21bc6:	781b      	ldrb	r3, [r3, #0]
   21bc8:	2214      	movs	r2, #20
   21bca:	18ba      	adds	r2, r7, r2
   21bcc:	2146      	movs	r1, #70	; 0x46
   21bce:	18d3      	adds	r3, r2, r3
   21bd0:	185b      	adds	r3, r3, r1
   21bd2:	2200      	movs	r2, #0
   21bd4:	701a      	strb	r2, [r3, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
   21bd6:	2314      	movs	r3, #20
   21bd8:	18fb      	adds	r3, r7, r3
   21bda:	22a8      	movs	r2, #168	; 0xa8
   21bdc:	18ba      	adds	r2, r7, r2
   21bde:	2144      	movs	r1, #68	; 0x44
   21be0:	8812      	ldrh	r2, [r2, #0]
   21be2:	525a      	strh	r2, [r3, r1]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
   21be4:	23ac      	movs	r3, #172	; 0xac
   21be6:	18fb      	adds	r3, r7, r3
   21be8:	781b      	ldrb	r3, [r3, #0]
   21bea:	1e5a      	subs	r2, r3, #1
   21bec:	4193      	sbcs	r3, r2
   21bee:	b2db      	uxtb	r3, r3
   21bf0:	0019      	movs	r1, r3
   21bf2:	2314      	movs	r3, #20
   21bf4:	18fb      	adds	r3, r7, r3
   21bf6:	2267      	movs	r2, #103	; 0x67
   21bf8:	5499      	strb	r1, [r3, r2]
	pstrAuthInfo = &strConnect.strSec;
   21bfa:	2314      	movs	r3, #20
   21bfc:	18fb      	adds	r3, r7, r3
   21bfe:	228c      	movs	r2, #140	; 0x8c
   21c00:	18ba      	adds	r2, r7, r2
   21c02:	6013      	str	r3, [r2, #0]
	pstrAuthInfo->u8SecType		= u8SecType;
   21c04:	238c      	movs	r3, #140	; 0x8c
   21c06:	18fb      	adds	r3, r7, r3
   21c08:	681b      	ldr	r3, [r3, #0]
   21c0a:	220a      	movs	r2, #10
   21c0c:	18ba      	adds	r2, r7, r2
   21c0e:	2141      	movs	r1, #65	; 0x41
   21c10:	7812      	ldrb	r2, [r2, #0]
   21c12:	545a      	strb	r2, [r3, r1]

	if(u8SecType == M2M_WIFI_SEC_WEP)
   21c14:	230a      	movs	r3, #10
   21c16:	18fb      	adds	r3, r7, r3
   21c18:	781b      	ldrb	r3, [r3, #0]
   21c1a:	2b03      	cmp	r3, #3
   21c1c:	d000      	beq.n	21c20 <m2m_wifi_connect_sc+0x230>
   21c1e:	e07d      	b.n	21d1c <m2m_wifi_connect_sc+0x32c>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
   21c20:	687b      	ldr	r3, [r7, #4]
   21c22:	2288      	movs	r2, #136	; 0x88
   21c24:	18ba      	adds	r2, r7, r2
   21c26:	6013      	str	r3, [r2, #0]
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
   21c28:	238c      	movs	r3, #140	; 0x8c
   21c2a:	18fb      	adds	r3, r7, r3
   21c2c:	681b      	ldr	r3, [r3, #0]
   21c2e:	2284      	movs	r2, #132	; 0x84
   21c30:	18ba      	adds	r2, r7, r2
   21c32:	6013      	str	r3, [r2, #0]
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
   21c34:	2388      	movs	r3, #136	; 0x88
   21c36:	18fb      	adds	r3, r7, r3
   21c38:	681b      	ldr	r3, [r3, #0]
   21c3a:	781b      	ldrb	r3, [r3, #0]
   21c3c:	3b01      	subs	r3, #1
   21c3e:	b2da      	uxtb	r2, r3
   21c40:	2384      	movs	r3, #132	; 0x84
   21c42:	18fb      	adds	r3, r7, r3
   21c44:	681b      	ldr	r3, [r3, #0]
   21c46:	701a      	strb	r2, [r3, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
   21c48:	2384      	movs	r3, #132	; 0x84
   21c4a:	18fb      	adds	r3, r7, r3
   21c4c:	681b      	ldr	r3, [r3, #0]
   21c4e:	781b      	ldrb	r3, [r3, #0]
   21c50:	2b03      	cmp	r3, #3
   21c52:	d919      	bls.n	21c88 <m2m_wifi_connect_sc+0x298>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
   21c54:	2394      	movs	r3, #148	; 0x94
   21c56:	009a      	lsls	r2, r3, #2
   21c58:	494d      	ldr	r1, [pc, #308]	; (21d90 <m2m_wifi_connect_sc+0x3a0>)
   21c5a:	4b4e      	ldr	r3, [pc, #312]	; (21d94 <m2m_wifi_connect_sc+0x3a4>)
   21c5c:	0018      	movs	r0, r3
   21c5e:	4b4e      	ldr	r3, [pc, #312]	; (21d98 <m2m_wifi_connect_sc+0x3a8>)
   21c60:	4798      	blx	r3
   21c62:	2384      	movs	r3, #132	; 0x84
   21c64:	18fb      	adds	r3, r7, r3
   21c66:	681b      	ldr	r3, [r3, #0]
   21c68:	781b      	ldrb	r3, [r3, #0]
   21c6a:	001a      	movs	r2, r3
   21c6c:	4b54      	ldr	r3, [pc, #336]	; (21dc0 <m2m_wifi_connect_sc+0x3d0>)
   21c6e:	0011      	movs	r1, r2
   21c70:	0018      	movs	r0, r3
   21c72:	4b49      	ldr	r3, [pc, #292]	; (21d98 <m2m_wifi_connect_sc+0x3a8>)
   21c74:	4798      	blx	r3
   21c76:	4b4a      	ldr	r3, [pc, #296]	; (21da0 <m2m_wifi_connect_sc+0x3b0>)
   21c78:	0018      	movs	r0, r3
   21c7a:	4b47      	ldr	r3, [pc, #284]	; (21d98 <m2m_wifi_connect_sc+0x3a8>)
   21c7c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   21c7e:	2397      	movs	r3, #151	; 0x97
   21c80:	18fb      	adds	r3, r7, r3
   21c82:	22f4      	movs	r2, #244	; 0xf4
   21c84:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   21c86:	e0dc      	b.n	21e42 <m2m_wifi_connect_sc+0x452>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
   21c88:	2388      	movs	r3, #136	; 0x88
   21c8a:	18fb      	adds	r3, r7, r3
   21c8c:	681b      	ldr	r3, [r3, #0]
   21c8e:	785b      	ldrb	r3, [r3, #1]
   21c90:	3b01      	subs	r3, #1
   21c92:	b2da      	uxtb	r2, r3
   21c94:	2384      	movs	r3, #132	; 0x84
   21c96:	18fb      	adds	r3, r7, r3
   21c98:	681b      	ldr	r3, [r3, #0]
   21c9a:	705a      	strb	r2, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
   21c9c:	2384      	movs	r3, #132	; 0x84
   21c9e:	18fb      	adds	r3, r7, r3
   21ca0:	681b      	ldr	r3, [r3, #0]
   21ca2:	785b      	ldrb	r3, [r3, #1]
   21ca4:	2b0a      	cmp	r3, #10
   21ca6:	d01e      	beq.n	21ce6 <m2m_wifi_connect_sc+0x2f6>
   21ca8:	2384      	movs	r3, #132	; 0x84
   21caa:	18fb      	adds	r3, r7, r3
   21cac:	681b      	ldr	r3, [r3, #0]
   21cae:	785b      	ldrb	r3, [r3, #1]
   21cb0:	2b1a      	cmp	r3, #26
   21cb2:	d018      	beq.n	21ce6 <m2m_wifi_connect_sc+0x2f6>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
   21cb4:	4a43      	ldr	r2, [pc, #268]	; (21dc4 <m2m_wifi_connect_sc+0x3d4>)
   21cb6:	4936      	ldr	r1, [pc, #216]	; (21d90 <m2m_wifi_connect_sc+0x3a0>)
   21cb8:	4b36      	ldr	r3, [pc, #216]	; (21d94 <m2m_wifi_connect_sc+0x3a4>)
   21cba:	0018      	movs	r0, r3
   21cbc:	4b36      	ldr	r3, [pc, #216]	; (21d98 <m2m_wifi_connect_sc+0x3a8>)
   21cbe:	4798      	blx	r3
   21cc0:	2384      	movs	r3, #132	; 0x84
   21cc2:	18fb      	adds	r3, r7, r3
   21cc4:	681b      	ldr	r3, [r3, #0]
   21cc6:	785b      	ldrb	r3, [r3, #1]
   21cc8:	001a      	movs	r2, r3
   21cca:	4b3f      	ldr	r3, [pc, #252]	; (21dc8 <m2m_wifi_connect_sc+0x3d8>)
   21ccc:	0011      	movs	r1, r2
   21cce:	0018      	movs	r0, r3
   21cd0:	4b31      	ldr	r3, [pc, #196]	; (21d98 <m2m_wifi_connect_sc+0x3a8>)
   21cd2:	4798      	blx	r3
   21cd4:	4b32      	ldr	r3, [pc, #200]	; (21da0 <m2m_wifi_connect_sc+0x3b0>)
   21cd6:	0018      	movs	r0, r3
   21cd8:	4b2f      	ldr	r3, [pc, #188]	; (21d98 <m2m_wifi_connect_sc+0x3a8>)
   21cda:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   21cdc:	2397      	movs	r3, #151	; 0x97
   21cde:	18fb      	adds	r3, r7, r3
   21ce0:	22f4      	movs	r2, #244	; 0xf4
   21ce2:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   21ce4:	e0ad      	b.n	21e42 <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
   21ce6:	2384      	movs	r3, #132	; 0x84
   21ce8:	18fb      	adds	r3, r7, r3
   21cea:	681b      	ldr	r3, [r3, #0]
   21cec:	1c98      	adds	r0, r3, #2
   21cee:	2388      	movs	r3, #136	; 0x88
   21cf0:	18fb      	adds	r3, r7, r3
   21cf2:	681b      	ldr	r3, [r3, #0]
   21cf4:	1c99      	adds	r1, r3, #2
   21cf6:	2388      	movs	r3, #136	; 0x88
   21cf8:	18fb      	adds	r3, r7, r3
   21cfa:	681b      	ldr	r3, [r3, #0]
   21cfc:	785b      	ldrb	r3, [r3, #1]
   21cfe:	001a      	movs	r2, r3
   21d00:	4b2e      	ldr	r3, [pc, #184]	; (21dbc <m2m_wifi_connect_sc+0x3cc>)
   21d02:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
   21d04:	2388      	movs	r3, #136	; 0x88
   21d06:	18fb      	adds	r3, r7, r3
   21d08:	681b      	ldr	r3, [r3, #0]
   21d0a:	785b      	ldrb	r3, [r3, #1]
   21d0c:	001a      	movs	r2, r3
   21d0e:	2384      	movs	r3, #132	; 0x84
   21d10:	18fb      	adds	r3, r7, r3
   21d12:	681b      	ldr	r3, [r3, #0]
   21d14:	189b      	adds	r3, r3, r2
   21d16:	2200      	movs	r2, #0
   21d18:	709a      	strb	r2, [r3, #2]
   21d1a:	e081      	b.n	21e20 <m2m_wifi_connect_sc+0x430>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
   21d1c:	230a      	movs	r3, #10
   21d1e:	18fb      	adds	r3, r7, r3
   21d20:	781b      	ldrb	r3, [r3, #0]
   21d22:	2b02      	cmp	r3, #2
   21d24:	d156      	bne.n	21dd4 <m2m_wifi_connect_sc+0x3e4>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
   21d26:	2382      	movs	r3, #130	; 0x82
   21d28:	18fc      	adds	r4, r7, r3
   21d2a:	687b      	ldr	r3, [r7, #4]
   21d2c:	0018      	movs	r0, r3
   21d2e:	4b1d      	ldr	r3, [pc, #116]	; (21da4 <m2m_wifi_connect_sc+0x3b4>)
   21d30:	4798      	blx	r3
   21d32:	0003      	movs	r3, r0
   21d34:	8023      	strh	r3, [r4, #0]
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
   21d36:	2382      	movs	r3, #130	; 0x82
   21d38:	18fb      	adds	r3, r7, r3
   21d3a:	881b      	ldrh	r3, [r3, #0]
   21d3c:	2b00      	cmp	r3, #0
   21d3e:	d004      	beq.n	21d4a <m2m_wifi_connect_sc+0x35a>
   21d40:	2382      	movs	r3, #130	; 0x82
   21d42:	18fb      	adds	r3, r7, r3
   21d44:	881b      	ldrh	r3, [r3, #0]
   21d46:	2b40      	cmp	r3, #64	; 0x40
   21d48:	d912      	bls.n	21d70 <m2m_wifi_connect_sc+0x380>
		{
			M2M_ERR("Incorrect PSK key length\n");
   21d4a:	4a20      	ldr	r2, [pc, #128]	; (21dcc <m2m_wifi_connect_sc+0x3dc>)
   21d4c:	4910      	ldr	r1, [pc, #64]	; (21d90 <m2m_wifi_connect_sc+0x3a0>)
   21d4e:	4b11      	ldr	r3, [pc, #68]	; (21d94 <m2m_wifi_connect_sc+0x3a4>)
   21d50:	0018      	movs	r0, r3
   21d52:	4b11      	ldr	r3, [pc, #68]	; (21d98 <m2m_wifi_connect_sc+0x3a8>)
   21d54:	4798      	blx	r3
   21d56:	4b1e      	ldr	r3, [pc, #120]	; (21dd0 <m2m_wifi_connect_sc+0x3e0>)
   21d58:	0018      	movs	r0, r3
   21d5a:	4b0f      	ldr	r3, [pc, #60]	; (21d98 <m2m_wifi_connect_sc+0x3a8>)
   21d5c:	4798      	blx	r3
   21d5e:	4b10      	ldr	r3, [pc, #64]	; (21da0 <m2m_wifi_connect_sc+0x3b0>)
   21d60:	0018      	movs	r0, r3
   21d62:	4b0d      	ldr	r3, [pc, #52]	; (21d98 <m2m_wifi_connect_sc+0x3a8>)
   21d64:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   21d66:	2397      	movs	r3, #151	; 0x97
   21d68:	18fb      	adds	r3, r7, r3
   21d6a:	22f4      	movs	r2, #244	; 0xf4
   21d6c:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   21d6e:	e068      	b.n	21e42 <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
   21d70:	238c      	movs	r3, #140	; 0x8c
   21d72:	18fb      	adds	r3, r7, r3
   21d74:	6818      	ldr	r0, [r3, #0]
   21d76:	2382      	movs	r3, #130	; 0x82
   21d78:	18fb      	adds	r3, r7, r3
   21d7a:	881b      	ldrh	r3, [r3, #0]
   21d7c:	3301      	adds	r3, #1
   21d7e:	001a      	movs	r2, r3
   21d80:	687b      	ldr	r3, [r7, #4]
   21d82:	0019      	movs	r1, r3
   21d84:	4b0d      	ldr	r3, [pc, #52]	; (21dbc <m2m_wifi_connect_sc+0x3cc>)
   21d86:	4798      	blx	r3
   21d88:	e04a      	b.n	21e20 <m2m_wifi_connect_sc+0x430>
   21d8a:	46c0      	nop			; (mov r8, r8)
   21d8c:	0000021a 	.word	0x0000021a
   21d90:	000394bc 	.word	0x000394bc
   21d94:	00039104 	.word	0x00039104
   21d98:	0001dc4d 	.word	0x0001dc4d
   21d9c:	00039344 	.word	0x00039344
   21da0:	00039100 	.word	0x00039100
   21da4:	0002065f 	.word	0x0002065f
   21da8:	00000226 	.word	0x00000226
   21dac:	00039358 	.word	0x00039358
   21db0:	00039368 	.word	0x00039368
   21db4:	00000239 	.word	0x00000239
   21db8:	0003937c 	.word	0x0003937c
   21dbc:	000205e5 	.word	0x000205e5
   21dc0:	00039388 	.word	0x00039388
   21dc4:	00000257 	.word	0x00000257
   21dc8:	000393a4 	.word	0x000393a4
   21dcc:	00000266 	.word	0x00000266
   21dd0:	000393c0 	.word	0x000393c0
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
   21dd4:	230a      	movs	r3, #10
   21dd6:	18fb      	adds	r3, r7, r3
   21dd8:	781b      	ldrb	r3, [r3, #0]
   21dda:	2b04      	cmp	r3, #4
   21ddc:	d108      	bne.n	21df0 <m2m_wifi_connect_sc+0x400>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
   21dde:	238c      	movs	r3, #140	; 0x8c
   21de0:	18fb      	adds	r3, r7, r3
   21de2:	681b      	ldr	r3, [r3, #0]
   21de4:	6879      	ldr	r1, [r7, #4]
   21de6:	223e      	movs	r2, #62	; 0x3e
   21de8:	0018      	movs	r0, r3
   21dea:	4b1a      	ldr	r3, [pc, #104]	; (21e54 <m2m_wifi_connect_sc+0x464>)
   21dec:	4798      	blx	r3
   21dee:	e017      	b.n	21e20 <m2m_wifi_connect_sc+0x430>
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
   21df0:	230a      	movs	r3, #10
   21df2:	18fb      	adds	r3, r7, r3
   21df4:	781b      	ldrb	r3, [r3, #0]
   21df6:	2b01      	cmp	r3, #1
   21df8:	d012      	beq.n	21e20 <m2m_wifi_connect_sc+0x430>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
   21dfa:	4a17      	ldr	r2, [pc, #92]	; (21e58 <m2m_wifi_connect_sc+0x468>)
   21dfc:	4917      	ldr	r1, [pc, #92]	; (21e5c <m2m_wifi_connect_sc+0x46c>)
   21dfe:	4b18      	ldr	r3, [pc, #96]	; (21e60 <m2m_wifi_connect_sc+0x470>)
   21e00:	0018      	movs	r0, r3
   21e02:	4b18      	ldr	r3, [pc, #96]	; (21e64 <m2m_wifi_connect_sc+0x474>)
   21e04:	4798      	blx	r3
   21e06:	4b18      	ldr	r3, [pc, #96]	; (21e68 <m2m_wifi_connect_sc+0x478>)
   21e08:	0018      	movs	r0, r3
   21e0a:	4b16      	ldr	r3, [pc, #88]	; (21e64 <m2m_wifi_connect_sc+0x474>)
   21e0c:	4798      	blx	r3
   21e0e:	4b17      	ldr	r3, [pc, #92]	; (21e6c <m2m_wifi_connect_sc+0x47c>)
   21e10:	0018      	movs	r0, r3
   21e12:	4b14      	ldr	r3, [pc, #80]	; (21e64 <m2m_wifi_connect_sc+0x474>)
   21e14:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
   21e16:	2397      	movs	r3, #151	; 0x97
   21e18:	18fb      	adds	r3, r7, r3
   21e1a:	22f4      	movs	r2, #244	; 0xf4
   21e1c:	701a      	strb	r2, [r3, #0]
		goto ERR1;
   21e1e:	e010      	b.n	21e42 <m2m_wifi_connect_sc+0x452>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
   21e20:	2397      	movs	r3, #151	; 0x97
   21e22:	18fc      	adds	r4, r7, r3
   21e24:	2314      	movs	r3, #20
   21e26:	18fa      	adds	r2, r7, r3
   21e28:	2300      	movs	r3, #0
   21e2a:	9302      	str	r3, [sp, #8]
   21e2c:	2300      	movs	r3, #0
   21e2e:	9301      	str	r3, [sp, #4]
   21e30:	2300      	movs	r3, #0
   21e32:	9300      	str	r3, [sp, #0]
   21e34:	236c      	movs	r3, #108	; 0x6c
   21e36:	2128      	movs	r1, #40	; 0x28
   21e38:	2001      	movs	r0, #1
   21e3a:	4d0d      	ldr	r5, [pc, #52]	; (21e70 <m2m_wifi_connect_sc+0x480>)
   21e3c:	47a8      	blx	r5
   21e3e:	0003      	movs	r3, r0
   21e40:	7023      	strb	r3, [r4, #0]

ERR1:
	return ret;
   21e42:	2397      	movs	r3, #151	; 0x97
   21e44:	18fb      	adds	r3, r7, r3
   21e46:	781b      	ldrb	r3, [r3, #0]
   21e48:	b25b      	sxtb	r3, r3
}
   21e4a:	0018      	movs	r0, r3
   21e4c:	46bd      	mov	sp, r7
   21e4e:	b026      	add	sp, #152	; 0x98
   21e50:	bdb0      	pop	{r4, r5, r7, pc}
   21e52:	46c0      	nop			; (mov r8, r8)
   21e54:	000205e5 	.word	0x000205e5
   21e58:	00000276 	.word	0x00000276
   21e5c:	000394bc 	.word	0x000394bc
   21e60:	00039104 	.word	0x00039104
   21e64:	0001dc4d 	.word	0x0001dc4d
   21e68:	000393dc 	.word	0x000393dc
   21e6c:	00039100 	.word	0x00039100
   21e70:	00020881 	.word	0x00020881

00021e74 <m2m_wifi_request_dhcp_client>:
	return hif_send(M2M_REQ_GROUP_IP, M2M_IP_REQ_STATIC_IP_CONF,
		(uint8*) pstrStaticIPConf, sizeof(tstrM2MIPConfig), NULL, 0,0);
}

sint8 m2m_wifi_request_dhcp_client(void)
{
   21e74:	b580      	push	{r7, lr}
   21e76:	af00      	add	r7, sp, #0
	/*legacy API should be removed */
	return 0;
   21e78:	2300      	movs	r3, #0
}
   21e7a:	0018      	movs	r0, r3
   21e7c:	46bd      	mov	sp, r7
   21e7e:	bd80      	pop	{r7, pc}

00021e80 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
   21e80:	b590      	push	{r4, r7, lr}
   21e82:	b087      	sub	sp, #28
   21e84:	af00      	add	r7, sp, #0
   21e86:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   21e88:	2317      	movs	r3, #23
   21e8a:	18fb      	adds	r3, r7, r3
   21e8c:	2200      	movs	r2, #0
   21e8e:	701a      	strb	r2, [r3, #0]
	uint32 val32 = u32Conf;
   21e90:	687b      	ldr	r3, [r7, #4]
   21e92:	613b      	str	r3, [r7, #16]
#endif
#if defined CONF_WINC_XO_XTALGM2_DIS
	val32 |= rHAVE_XO_XTALGM2_DIS_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
   21e94:	693b      	ldr	r3, [r7, #16]
   21e96:	2280      	movs	r2, #128	; 0x80
   21e98:	0052      	lsls	r2, r2, #1
   21e9a:	4313      	orrs	r3, r2
   21e9c:	613b      	str	r3, [r7, #16]
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
   21e9e:	693a      	ldr	r2, [r7, #16]
   21ea0:	23a5      	movs	r3, #165	; 0xa5
   21ea2:	015b      	lsls	r3, r3, #5
   21ea4:	0011      	movs	r1, r2
   21ea6:	0018      	movs	r0, r3
   21ea8:	4b12      	ldr	r3, [pc, #72]	; (21ef4 <chip_apply_conf+0x74>)
   21eaa:	4798      	blx	r3
		if(val32 != 0) {		
   21eac:	693b      	ldr	r3, [r7, #16]
   21eae:	2b00      	cmp	r3, #0
   21eb0:	d018      	beq.n	21ee4 <chip_apply_conf+0x64>
			uint32 reg = 0;
   21eb2:	2300      	movs	r3, #0
   21eb4:	60fb      	str	r3, [r7, #12]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
   21eb6:	2317      	movs	r3, #23
   21eb8:	18fc      	adds	r4, r7, r3
   21eba:	230c      	movs	r3, #12
   21ebc:	18fa      	adds	r2, r7, r3
   21ebe:	23a5      	movs	r3, #165	; 0xa5
   21ec0:	015b      	lsls	r3, r3, #5
   21ec2:	0011      	movs	r1, r2
   21ec4:	0018      	movs	r0, r3
   21ec6:	4b0c      	ldr	r3, [pc, #48]	; (21ef8 <chip_apply_conf+0x78>)
   21ec8:	4798      	blx	r3
   21eca:	0003      	movs	r3, r0
   21ecc:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
   21ece:	2317      	movs	r3, #23
   21ed0:	18fb      	adds	r3, r7, r3
   21ed2:	781b      	ldrb	r3, [r3, #0]
   21ed4:	b25b      	sxtb	r3, r3
   21ed6:	2b00      	cmp	r3, #0
   21ed8:	d1e1      	bne.n	21e9e <chip_apply_conf+0x1e>
				if(reg == val32)
   21eda:	68fa      	ldr	r2, [r7, #12]
   21edc:	693b      	ldr	r3, [r7, #16]
   21ede:	429a      	cmp	r2, r3
   21ee0:	d002      	beq.n	21ee8 <chip_apply_conf+0x68>
		nm_write_reg(rNMI_GP_REG_1, val32);
   21ee2:	e7dc      	b.n	21e9e <chip_apply_conf+0x1e>
					break;
			}
		} else {
			break;
   21ee4:	46c0      	nop			; (mov r8, r8)
   21ee6:	e000      	b.n	21eea <chip_apply_conf+0x6a>
					break;
   21ee8:	46c0      	nop			; (mov r8, r8)
		}
	} while(1);

	return M2M_SUCCESS;
   21eea:	2300      	movs	r3, #0
}
   21eec:	0018      	movs	r0, r3
   21eee:	46bd      	mov	sp, r7
   21ef0:	b007      	add	sp, #28
   21ef2:	bd90      	pop	{r4, r7, pc}
   21ef4:	000226d5 	.word	0x000226d5
   21ef8:	000226b1 	.word	0x000226b1

00021efc <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
   21efc:	b590      	push	{r4, r7, lr}
   21efe:	b083      	sub	sp, #12
   21f00:	af00      	add	r7, sp, #0
	uint32 reg = 0;
   21f02:	2300      	movs	r3, #0
   21f04:	603b      	str	r3, [r7, #0]
	sint8 ret = M2M_SUCCESS;
   21f06:	1dfb      	adds	r3, r7, #7
   21f08:	2200      	movs	r2, #0
   21f0a:	701a      	strb	r2, [r3, #0]
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
   21f0c:	1dfc      	adds	r4, r7, #7
   21f0e:	003b      	movs	r3, r7
   21f10:	4a24      	ldr	r2, [pc, #144]	; (21fa4 <enable_interrupts+0xa8>)
   21f12:	0019      	movs	r1, r3
   21f14:	0010      	movs	r0, r2
   21f16:	4b24      	ldr	r3, [pc, #144]	; (21fa8 <enable_interrupts+0xac>)
   21f18:	4798      	blx	r3
   21f1a:	0003      	movs	r3, r0
   21f1c:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   21f1e:	1dfb      	adds	r3, r7, #7
   21f20:	781b      	ldrb	r3, [r3, #0]
   21f22:	b25b      	sxtb	r3, r3
   21f24:	2b00      	cmp	r3, #0
   21f26:	d131      	bne.n	21f8c <enable_interrupts+0x90>
	
	reg |= ((uint32) 1 << 8);
   21f28:	683b      	ldr	r3, [r7, #0]
   21f2a:	2280      	movs	r2, #128	; 0x80
   21f2c:	0052      	lsls	r2, r2, #1
   21f2e:	4313      	orrs	r3, r2
   21f30:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
   21f32:	683b      	ldr	r3, [r7, #0]
   21f34:	1dfc      	adds	r4, r7, #7
   21f36:	4a1b      	ldr	r2, [pc, #108]	; (21fa4 <enable_interrupts+0xa8>)
   21f38:	0019      	movs	r1, r3
   21f3a:	0010      	movs	r0, r2
   21f3c:	4b1b      	ldr	r3, [pc, #108]	; (21fac <enable_interrupts+0xb0>)
   21f3e:	4798      	blx	r3
   21f40:	0003      	movs	r3, r0
   21f42:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   21f44:	1dfb      	adds	r3, r7, #7
   21f46:	781b      	ldrb	r3, [r3, #0]
   21f48:	b25b      	sxtb	r3, r3
   21f4a:	2b00      	cmp	r3, #0
   21f4c:	d120      	bne.n	21f90 <enable_interrupts+0x94>
	
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
   21f4e:	1dfc      	adds	r4, r7, #7
   21f50:	003a      	movs	r2, r7
   21f52:	23d0      	movs	r3, #208	; 0xd0
   21f54:	015b      	lsls	r3, r3, #5
   21f56:	0011      	movs	r1, r2
   21f58:	0018      	movs	r0, r3
   21f5a:	4b13      	ldr	r3, [pc, #76]	; (21fa8 <enable_interrupts+0xac>)
   21f5c:	4798      	blx	r3
   21f5e:	0003      	movs	r3, r0
   21f60:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   21f62:	1dfb      	adds	r3, r7, #7
   21f64:	781b      	ldrb	r3, [r3, #0]
   21f66:	b25b      	sxtb	r3, r3
   21f68:	2b00      	cmp	r3, #0
   21f6a:	d113      	bne.n	21f94 <enable_interrupts+0x98>
	
	reg |= ((uint32) 1 << 16);
   21f6c:	683b      	ldr	r3, [r7, #0]
   21f6e:	2280      	movs	r2, #128	; 0x80
   21f70:	0252      	lsls	r2, r2, #9
   21f72:	4313      	orrs	r3, r2
   21f74:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
   21f76:	683a      	ldr	r2, [r7, #0]
   21f78:	1dfc      	adds	r4, r7, #7
   21f7a:	23d0      	movs	r3, #208	; 0xd0
   21f7c:	015b      	lsls	r3, r3, #5
   21f7e:	0011      	movs	r1, r2
   21f80:	0018      	movs	r0, r3
   21f82:	4b0a      	ldr	r3, [pc, #40]	; (21fac <enable_interrupts+0xb0>)
   21f84:	4798      	blx	r3
   21f86:	0003      	movs	r3, r0
   21f88:	7023      	strb	r3, [r4, #0]
   21f8a:	e004      	b.n	21f96 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   21f8c:	46c0      	nop			; (mov r8, r8)
   21f8e:	e002      	b.n	21f96 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   21f90:	46c0      	nop			; (mov r8, r8)
   21f92:	e000      	b.n	21f96 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   21f94:	46c0      	nop			; (mov r8, r8)
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
   21f96:	1dfb      	adds	r3, r7, #7
   21f98:	781b      	ldrb	r3, [r3, #0]
   21f9a:	b25b      	sxtb	r3, r3
}
   21f9c:	0018      	movs	r0, r3
   21f9e:	46bd      	mov	sp, r7
   21fa0:	b003      	add	sp, #12
   21fa2:	bd90      	pop	{r4, r7, pc}
   21fa4:	00001408 	.word	0x00001408
   21fa8:	000226b1 	.word	0x000226b1
   21fac:	000226d5 	.word	0x000226d5

00021fb0 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
   21fb0:	b580      	push	{r7, lr}
   21fb2:	b082      	sub	sp, #8
   21fb4:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
   21fb6:	4b32      	ldr	r3, [pc, #200]	; (22080 <nmi_get_chipid+0xd0>)
   21fb8:	681b      	ldr	r3, [r3, #0]
   21fba:	2b00      	cmp	r3, #0
   21fbc:	d159      	bne.n	22072 <nmi_get_chipid+0xc2>
		uint32 rfrevid;
		
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
   21fbe:	4a30      	ldr	r2, [pc, #192]	; (22080 <nmi_get_chipid+0xd0>)
   21fc0:	2380      	movs	r3, #128	; 0x80
   21fc2:	015b      	lsls	r3, r3, #5
   21fc4:	0011      	movs	r1, r2
   21fc6:	0018      	movs	r0, r3
   21fc8:	4b2e      	ldr	r3, [pc, #184]	; (22084 <nmi_get_chipid+0xd4>)
   21fca:	4798      	blx	r3
   21fcc:	1e03      	subs	r3, r0, #0
   21fce:	d004      	beq.n	21fda <nmi_get_chipid+0x2a>
			chipid = 0;
   21fd0:	4b2b      	ldr	r3, [pc, #172]	; (22080 <nmi_get_chipid+0xd0>)
   21fd2:	2200      	movs	r2, #0
   21fd4:	601a      	str	r2, [r3, #0]
			return 0;
   21fd6:	2300      	movs	r3, #0
   21fd8:	e04d      	b.n	22076 <nmi_get_chipid+0xc6>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
   21fda:	1d3b      	adds	r3, r7, #4
   21fdc:	4a2a      	ldr	r2, [pc, #168]	; (22088 <nmi_get_chipid+0xd8>)
   21fde:	0019      	movs	r1, r3
   21fe0:	0010      	movs	r0, r2
   21fe2:	4b28      	ldr	r3, [pc, #160]	; (22084 <nmi_get_chipid+0xd4>)
   21fe4:	4798      	blx	r3
   21fe6:	1e03      	subs	r3, r0, #0
   21fe8:	d004      	beq.n	21ff4 <nmi_get_chipid+0x44>
			chipid = 0;
   21fea:	4b25      	ldr	r3, [pc, #148]	; (22080 <nmi_get_chipid+0xd0>)
   21fec:	2200      	movs	r2, #0
   21fee:	601a      	str	r2, [r3, #0]
			return 0;
   21ff0:	2300      	movs	r3, #0
   21ff2:	e040      	b.n	22076 <nmi_get_chipid+0xc6>
		}

		if (chipid == 0x1002a0)  {
   21ff4:	4b22      	ldr	r3, [pc, #136]	; (22080 <nmi_get_chipid+0xd0>)
   21ff6:	681b      	ldr	r3, [r3, #0]
   21ff8:	4a24      	ldr	r2, [pc, #144]	; (2208c <nmi_get_chipid+0xdc>)
   21ffa:	4293      	cmp	r3, r2
   21ffc:	d106      	bne.n	2200c <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
   21ffe:	687b      	ldr	r3, [r7, #4]
   22000:	2b01      	cmp	r3, #1
   22002:	d029      	beq.n	22058 <nmi_get_chipid+0xa8>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
   22004:	4b1e      	ldr	r3, [pc, #120]	; (22080 <nmi_get_chipid+0xd0>)
   22006:	4a22      	ldr	r2, [pc, #136]	; (22090 <nmi_get_chipid+0xe0>)
   22008:	601a      	str	r2, [r3, #0]
   2200a:	e025      	b.n	22058 <nmi_get_chipid+0xa8>
			}
		} else if(chipid == 0x1002b0) {
   2200c:	4b1c      	ldr	r3, [pc, #112]	; (22080 <nmi_get_chipid+0xd0>)
   2200e:	681b      	ldr	r3, [r3, #0]
   22010:	4a20      	ldr	r2, [pc, #128]	; (22094 <nmi_get_chipid+0xe4>)
   22012:	4293      	cmp	r3, r2
   22014:	d10d      	bne.n	22032 <nmi_get_chipid+0x82>
			if(rfrevid == 3) { /* 1002B0 */
   22016:	687b      	ldr	r3, [r7, #4]
   22018:	2b03      	cmp	r3, #3
   2201a:	d01d      	beq.n	22058 <nmi_get_chipid+0xa8>
			} else if(rfrevid == 4) { /* 1002B1 */
   2201c:	687b      	ldr	r3, [r7, #4]
   2201e:	2b04      	cmp	r3, #4
   22020:	d103      	bne.n	2202a <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
   22022:	4b17      	ldr	r3, [pc, #92]	; (22080 <nmi_get_chipid+0xd0>)
   22024:	4a1c      	ldr	r2, [pc, #112]	; (22098 <nmi_get_chipid+0xe8>)
   22026:	601a      	str	r2, [r3, #0]
   22028:	e016      	b.n	22058 <nmi_get_chipid+0xa8>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
   2202a:	4b15      	ldr	r3, [pc, #84]	; (22080 <nmi_get_chipid+0xd0>)
   2202c:	4a1b      	ldr	r2, [pc, #108]	; (2209c <nmi_get_chipid+0xec>)
   2202e:	601a      	str	r2, [r3, #0]
   22030:	e012      	b.n	22058 <nmi_get_chipid+0xa8>
			}
		}else if(chipid == 0x1000F0) { 
   22032:	4b13      	ldr	r3, [pc, #76]	; (22080 <nmi_get_chipid+0xd0>)
   22034:	681b      	ldr	r3, [r3, #0]
   22036:	4a1a      	ldr	r2, [pc, #104]	; (220a0 <nmi_get_chipid+0xf0>)
   22038:	4293      	cmp	r3, r2
   2203a:	d10d      	bne.n	22058 <nmi_get_chipid+0xa8>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
   2203c:	4a10      	ldr	r2, [pc, #64]	; (22080 <nmi_get_chipid+0xd0>)
   2203e:	23ec      	movs	r3, #236	; 0xec
   22040:	039b      	lsls	r3, r3, #14
   22042:	0011      	movs	r1, r2
   22044:	0018      	movs	r0, r3
   22046:	4b0f      	ldr	r3, [pc, #60]	; (22084 <nmi_get_chipid+0xd4>)
   22048:	4798      	blx	r3
   2204a:	1e03      	subs	r3, r0, #0
   2204c:	d004      	beq.n	22058 <nmi_get_chipid+0xa8>
			chipid = 0;
   2204e:	4b0c      	ldr	r3, [pc, #48]	; (22080 <nmi_get_chipid+0xd0>)
   22050:	2200      	movs	r2, #0
   22052:	601a      	str	r2, [r3, #0]
			return 0;
   22054:	2300      	movs	r3, #0
   22056:	e00e      	b.n	22076 <nmi_get_chipid+0xc6>
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
   22058:	4b09      	ldr	r3, [pc, #36]	; (22080 <nmi_get_chipid+0xd0>)
   2205a:	681b      	ldr	r3, [r3, #0]
   2205c:	4a11      	ldr	r2, [pc, #68]	; (220a4 <nmi_get_chipid+0xf4>)
   2205e:	401a      	ands	r2, r3
   22060:	4b07      	ldr	r3, [pc, #28]	; (22080 <nmi_get_chipid+0xd0>)
   22062:	601a      	str	r2, [r3, #0]
		chipid |= 0x050000;
   22064:	4b06      	ldr	r3, [pc, #24]	; (22080 <nmi_get_chipid+0xd0>)
   22066:	681b      	ldr	r3, [r3, #0]
   22068:	22a0      	movs	r2, #160	; 0xa0
   2206a:	02d2      	lsls	r2, r2, #11
   2206c:	431a      	orrs	r2, r3
   2206e:	4b04      	ldr	r3, [pc, #16]	; (22080 <nmi_get_chipid+0xd0>)
   22070:	601a      	str	r2, [r3, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
   22072:	4b03      	ldr	r3, [pc, #12]	; (22080 <nmi_get_chipid+0xd0>)
   22074:	681b      	ldr	r3, [r3, #0]
}
   22076:	0018      	movs	r0, r3
   22078:	46bd      	mov	sp, r7
   2207a:	b002      	add	sp, #8
   2207c:	bd80      	pop	{r7, pc}
   2207e:	46c0      	nop			; (mov r8, r8)
   22080:	20003cc8 	.word	0x20003cc8
   22084:	000226b1 	.word	0x000226b1
   22088:	000013f4 	.word	0x000013f4
   2208c:	001002a0 	.word	0x001002a0
   22090:	001002a1 	.word	0x001002a1
   22094:	001002b0 	.word	0x001002b0
   22098:	001002b1 	.word	0x001002b1
   2209c:	001002b2 	.word	0x001002b2
   220a0:	001000f0 	.word	0x001000f0
   220a4:	fff0ffff 	.word	0xfff0ffff

000220a8 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
   220a8:	b590      	push	{r4, r7, lr}
   220aa:	b083      	sub	sp, #12
   220ac:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
   220ae:	1dfb      	adds	r3, r7, #7
   220b0:	2200      	movs	r2, #0
   220b2:	701a      	strb	r2, [r3, #0]
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   220b4:	1dfc      	adds	r4, r7, #7
   220b6:	003b      	movs	r3, r7
   220b8:	0019      	movs	r1, r3
   220ba:	2010      	movs	r0, #16
   220bc:	4b2e      	ldr	r3, [pc, #184]	; (22178 <chip_sleep+0xd0>)
   220be:	4798      	blx	r3
   220c0:	0003      	movs	r3, r0
   220c2:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto ERR1;
   220c4:	1dfb      	adds	r3, r7, #7
   220c6:	781b      	ldrb	r3, [r3, #0]
   220c8:	b25b      	sxtb	r3, r3
   220ca:	2b00      	cmp	r3, #0
   220cc:	d145      	bne.n	2215a <chip_sleep+0xb2>
		if((reg & NBIT0) == 0) break;
   220ce:	683b      	ldr	r3, [r7, #0]
   220d0:	2201      	movs	r2, #1
   220d2:	4013      	ands	r3, r2
   220d4:	d000      	beq.n	220d8 <chip_sleep+0x30>
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   220d6:	e7ed      	b.n	220b4 <chip_sleep+0xc>
		if((reg & NBIT0) == 0) break;
   220d8:	46c0      	nop			; (mov r8, r8)
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   220da:	1dfc      	adds	r4, r7, #7
   220dc:	003b      	movs	r3, r7
   220de:	0019      	movs	r1, r3
   220e0:	2001      	movs	r0, #1
   220e2:	4b25      	ldr	r3, [pc, #148]	; (22178 <chip_sleep+0xd0>)
   220e4:	4798      	blx	r3
   220e6:	0003      	movs	r3, r0
   220e8:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   220ea:	1dfb      	adds	r3, r7, #7
   220ec:	781b      	ldrb	r3, [r3, #0]
   220ee:	b25b      	sxtb	r3, r3
   220f0:	2b00      	cmp	r3, #0
   220f2:	d134      	bne.n	2215e <chip_sleep+0xb6>
	if(reg & NBIT1)
   220f4:	683b      	ldr	r3, [r7, #0]
   220f6:	2202      	movs	r2, #2
   220f8:	4013      	ands	r3, r2
   220fa:	d010      	beq.n	2211e <chip_sleep+0x76>
	{
		reg &=~NBIT1;
   220fc:	683b      	ldr	r3, [r7, #0]
   220fe:	2202      	movs	r2, #2
   22100:	4393      	bics	r3, r2
   22102:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
   22104:	683b      	ldr	r3, [r7, #0]
   22106:	1dfc      	adds	r4, r7, #7
   22108:	0019      	movs	r1, r3
   2210a:	2001      	movs	r0, #1
   2210c:	4b1b      	ldr	r3, [pc, #108]	; (2217c <chip_sleep+0xd4>)
   2210e:	4798      	blx	r3
   22110:	0003      	movs	r3, r0
   22112:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto ERR1;
   22114:	1dfb      	adds	r3, r7, #7
   22116:	781b      	ldrb	r3, [r3, #0]
   22118:	b25b      	sxtb	r3, r3
   2211a:	2b00      	cmp	r3, #0
   2211c:	d121      	bne.n	22162 <chip_sleep+0xba>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   2211e:	1dfc      	adds	r4, r7, #7
   22120:	003b      	movs	r3, r7
   22122:	0019      	movs	r1, r3
   22124:	200b      	movs	r0, #11
   22126:	4b14      	ldr	r3, [pc, #80]	; (22178 <chip_sleep+0xd0>)
   22128:	4798      	blx	r3
   2212a:	0003      	movs	r3, r0
   2212c:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   2212e:	1dfb      	adds	r3, r7, #7
   22130:	781b      	ldrb	r3, [r3, #0]
   22132:	b25b      	sxtb	r3, r3
   22134:	2b00      	cmp	r3, #0
   22136:	d116      	bne.n	22166 <chip_sleep+0xbe>
	if(reg & NBIT0)
   22138:	683b      	ldr	r3, [r7, #0]
   2213a:	2201      	movs	r2, #1
   2213c:	4013      	ands	r3, r2
   2213e:	d013      	beq.n	22168 <chip_sleep+0xc0>
	{
		reg &= ~NBIT0;
   22140:	683b      	ldr	r3, [r7, #0]
   22142:	2201      	movs	r2, #1
   22144:	4393      	bics	r3, r2
   22146:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
   22148:	683b      	ldr	r3, [r7, #0]
   2214a:	1dfc      	adds	r4, r7, #7
   2214c:	0019      	movs	r1, r3
   2214e:	200b      	movs	r0, #11
   22150:	4b0a      	ldr	r3, [pc, #40]	; (2217c <chip_sleep+0xd4>)
   22152:	4798      	blx	r3
   22154:	0003      	movs	r3, r0
   22156:	7023      	strb	r3, [r4, #0]
   22158:	e006      	b.n	22168 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS) goto ERR1;
   2215a:	46c0      	nop			; (mov r8, r8)
   2215c:	e004      	b.n	22168 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
   2215e:	46c0      	nop			; (mov r8, r8)
   22160:	e002      	b.n	22168 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS)goto ERR1;
   22162:	46c0      	nop			; (mov r8, r8)
   22164:	e000      	b.n	22168 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
   22166:	46c0      	nop			; (mov r8, r8)
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
   22168:	1dfb      	adds	r3, r7, #7
   2216a:	781b      	ldrb	r3, [r3, #0]
   2216c:	b25b      	sxtb	r3, r3
}
   2216e:	0018      	movs	r0, r3
   22170:	46bd      	mov	sp, r7
   22172:	b003      	add	sp, #12
   22174:	bd90      	pop	{r4, r7, pc}
   22176:	46c0      	nop			; (mov r8, r8)
   22178:	000226b1 	.word	0x000226b1
   2217c:	000226d5 	.word	0x000226d5

00022180 <chip_wake>:
sint8 chip_wake(void)
{
   22180:	b590      	push	{r4, r7, lr}
   22182:	b085      	sub	sp, #20
   22184:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   22186:	230f      	movs	r3, #15
   22188:	18fb      	adds	r3, r7, r3
   2218a:	2200      	movs	r2, #0
   2218c:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
   2218e:	2300      	movs	r3, #0
   22190:	607b      	str	r3, [r7, #4]
   22192:	2300      	movs	r3, #0
   22194:	603b      	str	r3, [r7, #0]
   22196:	2300      	movs	r3, #0
   22198:	60bb      	str	r3, [r7, #8]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   2219a:	230f      	movs	r3, #15
   2219c:	18fc      	adds	r4, r7, r3
   2219e:	1d3b      	adds	r3, r7, #4
   221a0:	0019      	movs	r1, r3
   221a2:	200b      	movs	r0, #11
   221a4:	4b4e      	ldr	r3, [pc, #312]	; (222e0 <chip_wake+0x160>)
   221a6:	4798      	blx	r3
   221a8:	0003      	movs	r3, r0
   221aa:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   221ac:	230f      	movs	r3, #15
   221ae:	18fb      	adds	r3, r7, r3
   221b0:	781b      	ldrb	r3, [r3, #0]
   221b2:	b25b      	sxtb	r3, r3
   221b4:	2b00      	cmp	r3, #0
   221b6:	d000      	beq.n	221ba <chip_wake+0x3a>
   221b8:	e082      	b.n	222c0 <chip_wake+0x140>
	
	if(!(reg & NBIT0))
   221ba:	687b      	ldr	r3, [r7, #4]
   221bc:	2201      	movs	r2, #1
   221be:	4013      	ands	r3, r2
   221c0:	d111      	bne.n	221e6 <chip_wake+0x66>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
   221c2:	687b      	ldr	r3, [r7, #4]
   221c4:	2201      	movs	r2, #1
   221c6:	4313      	orrs	r3, r2
   221c8:	220f      	movs	r2, #15
   221ca:	18bc      	adds	r4, r7, r2
   221cc:	0019      	movs	r1, r3
   221ce:	200b      	movs	r0, #11
   221d0:	4b44      	ldr	r3, [pc, #272]	; (222e4 <chip_wake+0x164>)
   221d2:	4798      	blx	r3
   221d4:	0003      	movs	r3, r0
   221d6:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   221d8:	230f      	movs	r3, #15
   221da:	18fb      	adds	r3, r7, r3
   221dc:	781b      	ldrb	r3, [r3, #0]
   221de:	b25b      	sxtb	r3, r3
   221e0:	2b00      	cmp	r3, #0
   221e2:	d000      	beq.n	221e6 <chip_wake+0x66>
   221e4:	e06e      	b.n	222c4 <chip_wake+0x144>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   221e6:	230f      	movs	r3, #15
   221e8:	18fc      	adds	r4, r7, r3
   221ea:	1d3b      	adds	r3, r7, #4
   221ec:	0019      	movs	r1, r3
   221ee:	2001      	movs	r0, #1
   221f0:	4b3b      	ldr	r3, [pc, #236]	; (222e0 <chip_wake+0x160>)
   221f2:	4798      	blx	r3
   221f4:	0003      	movs	r3, r0
   221f6:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   221f8:	230f      	movs	r3, #15
   221fa:	18fb      	adds	r3, r7, r3
   221fc:	781b      	ldrb	r3, [r3, #0]
   221fe:	b25b      	sxtb	r3, r3
   22200:	2b00      	cmp	r3, #0
   22202:	d161      	bne.n	222c8 <chip_wake+0x148>
	/* Set bit 1 */
	if(!(reg & NBIT1))
   22204:	687b      	ldr	r3, [r7, #4]
   22206:	2202      	movs	r2, #2
   22208:	4013      	ands	r3, r2
   2220a:	d110      	bne.n	2222e <chip_wake+0xae>
	{
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
   2220c:	687b      	ldr	r3, [r7, #4]
   2220e:	2202      	movs	r2, #2
   22210:	4313      	orrs	r3, r2
   22212:	220f      	movs	r2, #15
   22214:	18bc      	adds	r4, r7, r2
   22216:	0019      	movs	r1, r3
   22218:	2001      	movs	r0, #1
   2221a:	4b32      	ldr	r3, [pc, #200]	; (222e4 <chip_wake+0x164>)
   2221c:	4798      	blx	r3
   2221e:	0003      	movs	r3, r0
   22220:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   22222:	230f      	movs	r3, #15
   22224:	18fb      	adds	r3, r7, r3
   22226:	781b      	ldrb	r3, [r3, #0]
   22228:	b25b      	sxtb	r3, r3
   2222a:	2b00      	cmp	r3, #0
   2222c:	d14e      	bne.n	222cc <chip_wake+0x14c>
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
   2222e:	230f      	movs	r3, #15
   22230:	18fc      	adds	r4, r7, r3
   22232:	003b      	movs	r3, r7
   22234:	0019      	movs	r1, r3
   22236:	200f      	movs	r0, #15
   22238:	4b29      	ldr	r3, [pc, #164]	; (222e0 <chip_wake+0x160>)
   2223a:	4798      	blx	r3
   2223c:	0003      	movs	r3, r0
   2223e:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) {
   22240:	230f      	movs	r3, #15
   22242:	18fb      	adds	r3, r7, r3
   22244:	781b      	ldrb	r3, [r3, #0]
   22246:	b25b      	sxtb	r3, r3
   22248:	2b00      	cmp	r3, #0
   2224a:	d014      	beq.n	22276 <chip_wake+0xf6>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
   2224c:	23a8      	movs	r3, #168	; 0xa8
   2224e:	005a      	lsls	r2, r3, #1
   22250:	4925      	ldr	r1, [pc, #148]	; (222e8 <chip_wake+0x168>)
   22252:	4b26      	ldr	r3, [pc, #152]	; (222ec <chip_wake+0x16c>)
   22254:	0018      	movs	r0, r3
   22256:	4b26      	ldr	r3, [pc, #152]	; (222f0 <chip_wake+0x170>)
   22258:	4798      	blx	r3
   2225a:	230f      	movs	r3, #15
   2225c:	18fb      	adds	r3, r7, r3
   2225e:	2100      	movs	r1, #0
   22260:	5659      	ldrsb	r1, [r3, r1]
   22262:	683a      	ldr	r2, [r7, #0]
   22264:	4b23      	ldr	r3, [pc, #140]	; (222f4 <chip_wake+0x174>)
   22266:	0018      	movs	r0, r3
   22268:	4b21      	ldr	r3, [pc, #132]	; (222f0 <chip_wake+0x170>)
   2226a:	4798      	blx	r3
   2226c:	4b22      	ldr	r3, [pc, #136]	; (222f8 <chip_wake+0x178>)
   2226e:	0018      	movs	r0, r3
   22270:	4b1f      	ldr	r3, [pc, #124]	; (222f0 <chip_wake+0x170>)
   22272:	4798      	blx	r3
			goto _WAKE_EXIT;
   22274:	e02b      	b.n	222ce <chip_wake+0x14e>
		}
		if(clk_status_reg & NBIT2) {
   22276:	683b      	ldr	r3, [r7, #0]
   22278:	2204      	movs	r2, #4
   2227a:	4013      	ands	r3, r2
   2227c:	d11c      	bne.n	222b8 <chip_wake+0x138>
			break;
		}
		nm_bsp_sleep(2);
   2227e:	2002      	movs	r0, #2
   22280:	4b1e      	ldr	r3, [pc, #120]	; (222fc <chip_wake+0x17c>)
   22282:	4798      	blx	r3
		trials++;
   22284:	68bb      	ldr	r3, [r7, #8]
   22286:	3301      	adds	r3, #1
   22288:	60bb      	str	r3, [r7, #8]
		if(trials > WAKUP_TRAILS_TIMEOUT)
   2228a:	68bb      	ldr	r3, [r7, #8]
   2228c:	2b04      	cmp	r3, #4
   2228e:	d9ce      	bls.n	2222e <chip_wake+0xae>
		{
			M2M_ERR("Failed to wakup the chip\n");
   22290:	23ad      	movs	r3, #173	; 0xad
   22292:	005a      	lsls	r2, r3, #1
   22294:	4914      	ldr	r1, [pc, #80]	; (222e8 <chip_wake+0x168>)
   22296:	4b15      	ldr	r3, [pc, #84]	; (222ec <chip_wake+0x16c>)
   22298:	0018      	movs	r0, r3
   2229a:	4b15      	ldr	r3, [pc, #84]	; (222f0 <chip_wake+0x170>)
   2229c:	4798      	blx	r3
   2229e:	4b18      	ldr	r3, [pc, #96]	; (22300 <chip_wake+0x180>)
   222a0:	0018      	movs	r0, r3
   222a2:	4b13      	ldr	r3, [pc, #76]	; (222f0 <chip_wake+0x170>)
   222a4:	4798      	blx	r3
   222a6:	4b14      	ldr	r3, [pc, #80]	; (222f8 <chip_wake+0x178>)
   222a8:	0018      	movs	r0, r3
   222aa:	4b11      	ldr	r3, [pc, #68]	; (222f0 <chip_wake+0x170>)
   222ac:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
   222ae:	230f      	movs	r3, #15
   222b0:	18fb      	adds	r3, r7, r3
   222b2:	22fc      	movs	r2, #252	; 0xfc
   222b4:	701a      	strb	r2, [r3, #0]
			goto _WAKE_EXIT;
   222b6:	e00a      	b.n	222ce <chip_wake+0x14e>
			break;
   222b8:	46c0      	nop			; (mov r8, r8)
		}
	}while(1);
	
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
   222ba:	4b12      	ldr	r3, [pc, #72]	; (22304 <chip_wake+0x184>)
   222bc:	4798      	blx	r3
   222be:	e006      	b.n	222ce <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   222c0:	46c0      	nop			; (mov r8, r8)
   222c2:	e004      	b.n	222ce <chip_wake+0x14e>
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   222c4:	46c0      	nop			; (mov r8, r8)
   222c6:	e002      	b.n	222ce <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   222c8:	46c0      	nop			; (mov r8, r8)
   222ca:	e000      	b.n	222ce <chip_wake+0x14e>
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   222cc:	46c0      	nop			; (mov r8, r8)
	
_WAKE_EXIT:
	return ret;
   222ce:	230f      	movs	r3, #15
   222d0:	18fb      	adds	r3, r7, r3
   222d2:	781b      	ldrb	r3, [r3, #0]
   222d4:	b25b      	sxtb	r3, r3
}
   222d6:	0018      	movs	r0, r3
   222d8:	46bd      	mov	sp, r7
   222da:	b005      	add	sp, #20
   222dc:	bd90      	pop	{r4, r7, pc}
   222de:	46c0      	nop			; (mov r8, r8)
   222e0:	000226b1 	.word	0x000226b1
   222e4:	000226d5 	.word	0x000226d5
   222e8:	0003955c 	.word	0x0003955c
   222ec:	000394d0 	.word	0x000394d0
   222f0:	0001dc4d 	.word	0x0001dc4d
   222f4:	000394e4 	.word	0x000394e4
   222f8:	000394fc 	.word	0x000394fc
   222fc:	0001fd41 	.word	0x0001fd41
   22300:	00039500 	.word	0x00039500
   22304:	00022671 	.word	0x00022671

00022308 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
   22308:	b580      	push	{r7, lr}
   2230a:	b088      	sub	sp, #32
   2230c:	af00      	add	r7, sp, #0
   2230e:	0002      	movs	r2, r0
   22310:	1dfb      	adds	r3, r7, #7
   22312:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   22314:	2313      	movs	r3, #19
   22316:	18fb      	adds	r3, r7, r3
   22318:	2200      	movs	r2, #0
   2231a:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
   2231c:	2300      	movs	r3, #0
   2231e:	61fb      	str	r3, [r7, #28]
   22320:	2300      	movs	r3, #0
   22322:	61bb      	str	r3, [r7, #24]
	uint32 u32GpReg1 = 0;
   22324:	2300      	movs	r3, #0
   22326:	617b      	str	r3, [r7, #20]
	uint32 u32DriverVerInfo = M2M_MAKE_VERSION_INFO(M2M_RELEASE_VERSION_MAJOR_NO,\
   22328:	4b4a      	ldr	r3, [pc, #296]	; (22454 <wait_for_bootrom+0x14c>)
   2232a:	60fb      	str	r3, [r7, #12]
				M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO,\
				M2M_MIN_REQ_DRV_VERSION_MAJOR_NO, M2M_MIN_REQ_DRV_VERSION_MINOR_NO,\
				M2M_MIN_REQ_DRV_VERSION_PATCH_NO);


	reg = 0;
   2232c:	2300      	movs	r3, #0
   2232e:	61fb      	str	r3, [r7, #28]
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   22330:	4b49      	ldr	r3, [pc, #292]	; (22458 <wait_for_bootrom+0x150>)
   22332:	0018      	movs	r0, r3
   22334:	4b49      	ldr	r3, [pc, #292]	; (2245c <wait_for_bootrom+0x154>)
   22336:	4798      	blx	r3
   22338:	0003      	movs	r3, r0
   2233a:	61fb      	str	r3, [r7, #28]
		if (reg & 0x80000000) {
   2233c:	69fb      	ldr	r3, [r7, #28]
   2233e:	2b00      	cmp	r3, #0
   22340:	db03      	blt.n	2234a <wait_for_bootrom+0x42>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
   22342:	2001      	movs	r0, #1
   22344:	4b46      	ldr	r3, [pc, #280]	; (22460 <wait_for_bootrom+0x158>)
   22346:	4798      	blx	r3
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   22348:	e7f2      	b.n	22330 <wait_for_bootrom+0x28>
			break;
   2234a:	46c0      	nop			; (mov r8, r8)
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
   2234c:	4b45      	ldr	r3, [pc, #276]	; (22464 <wait_for_bootrom+0x15c>)
   2234e:	0018      	movs	r0, r3
   22350:	4b42      	ldr	r3, [pc, #264]	; (2245c <wait_for_bootrom+0x154>)
   22352:	4798      	blx	r3
   22354:	0003      	movs	r3, r0
   22356:	61fb      	str	r3, [r7, #28]
	reg &= 0x1;
   22358:	69fb      	ldr	r3, [r7, #28]
   2235a:	2201      	movs	r2, #1
   2235c:	4013      	ands	r3, r2
   2235e:	61fb      	str	r3, [r7, #28]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
   22360:	69fb      	ldr	r3, [r7, #28]
   22362:	2b00      	cmp	r3, #0
   22364:	d112      	bne.n	2238c <wait_for_bootrom+0x84>
	{
		reg = 0;
   22366:	2300      	movs	r3, #0
   22368:	61fb      	str	r3, [r7, #28]
		while(reg != M2M_FINISH_BOOT_ROM)
   2236a:	e00b      	b.n	22384 <wait_for_bootrom+0x7c>
		{
			nm_bsp_sleep(1);
   2236c:	2001      	movs	r0, #1
   2236e:	4b3c      	ldr	r3, [pc, #240]	; (22460 <wait_for_bootrom+0x158>)
   22370:	4798      	blx	r3
			reg = nm_read_reg(BOOTROM_REG);
   22372:	4b3d      	ldr	r3, [pc, #244]	; (22468 <wait_for_bootrom+0x160>)
   22374:	0018      	movs	r0, r3
   22376:	4b39      	ldr	r3, [pc, #228]	; (2245c <wait_for_bootrom+0x154>)
   22378:	4798      	blx	r3
   2237a:	0003      	movs	r3, r0
   2237c:	61fb      	str	r3, [r7, #28]

			if(++cnt > TIMEOUT)
   2237e:	69bb      	ldr	r3, [r7, #24]
   22380:	3301      	adds	r3, #1
   22382:	61bb      	str	r3, [r7, #24]
		while(reg != M2M_FINISH_BOOT_ROM)
   22384:	69fb      	ldr	r3, [r7, #28]
   22386:	4a39      	ldr	r2, [pc, #228]	; (2246c <wait_for_bootrom+0x164>)
   22388:	4293      	cmp	r3, r2
   2238a:	d1ef      	bne.n	2236c <wait_for_bootrom+0x64>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
   2238c:	1dfb      	adds	r3, r7, #7
   2238e:	781b      	ldrb	r3, [r3, #0]
   22390:	2b02      	cmp	r3, #2
   22392:	d10d      	bne.n	223b0 <wait_for_bootrom+0xa8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   22394:	4a36      	ldr	r2, [pc, #216]	; (22470 <wait_for_bootrom+0x168>)
   22396:	4b37      	ldr	r3, [pc, #220]	; (22474 <wait_for_bootrom+0x16c>)
   22398:	0011      	movs	r1, r2
   2239a:	0018      	movs	r0, r3
   2239c:	4b36      	ldr	r3, [pc, #216]	; (22478 <wait_for_bootrom+0x170>)
   2239e:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, NBIT20);
   223a0:	2380      	movs	r3, #128	; 0x80
   223a2:	035b      	lsls	r3, r3, #13
   223a4:	4a35      	ldr	r2, [pc, #212]	; (2247c <wait_for_bootrom+0x174>)
   223a6:	0019      	movs	r1, r3
   223a8:	0010      	movs	r0, r2
   223aa:	4b33      	ldr	r3, [pc, #204]	; (22478 <wait_for_bootrom+0x170>)
   223ac:	4798      	blx	r3
   223ae:	e022      	b.n	223f6 <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
   223b0:	1dfb      	adds	r3, r7, #7
   223b2:	781b      	ldrb	r3, [r3, #0]
   223b4:	2b03      	cmp	r3, #3
   223b6:	d10b      	bne.n	223d0 <wait_for_bootrom+0xc8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   223b8:	4a2d      	ldr	r2, [pc, #180]	; (22470 <wait_for_bootrom+0x168>)
   223ba:	4b2e      	ldr	r3, [pc, #184]	; (22474 <wait_for_bootrom+0x16c>)
   223bc:	0011      	movs	r1, r2
   223be:	0018      	movs	r0, r3
   223c0:	4b2d      	ldr	r3, [pc, #180]	; (22478 <wait_for_bootrom+0x170>)
   223c2:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, 0);
   223c4:	4b2d      	ldr	r3, [pc, #180]	; (2247c <wait_for_bootrom+0x174>)
   223c6:	2100      	movs	r1, #0
   223c8:	0018      	movs	r0, r3
   223ca:	4b2b      	ldr	r3, [pc, #172]	; (22478 <wait_for_bootrom+0x170>)
   223cc:	4798      	blx	r3
   223ce:	e012      	b.n	223f6 <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
   223d0:	1dfb      	adds	r3, r7, #7
   223d2:	781b      	ldrb	r3, [r3, #0]
   223d4:	2b04      	cmp	r3, #4
   223d6:	d108      	bne.n	223ea <wait_for_bootrom+0xe2>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
   223d8:	2380      	movs	r3, #128	; 0x80
   223da:	617b      	str	r3, [r7, #20]
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   223dc:	68fb      	ldr	r3, [r7, #12]
   223de:	4a27      	ldr	r2, [pc, #156]	; (2247c <wait_for_bootrom+0x174>)
   223e0:	0019      	movs	r1, r3
   223e2:	0010      	movs	r0, r2
   223e4:	4b24      	ldr	r3, [pc, #144]	; (22478 <wait_for_bootrom+0x170>)
   223e6:	4798      	blx	r3
   223e8:	e005      	b.n	223f6 <wait_for_bootrom+0xee>
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   223ea:	68fb      	ldr	r3, [r7, #12]
   223ec:	4a23      	ldr	r2, [pc, #140]	; (2247c <wait_for_bootrom+0x174>)
   223ee:	0019      	movs	r1, r3
   223f0:	0010      	movs	r0, r2
   223f2:	4b21      	ldr	r3, [pc, #132]	; (22478 <wait_for_bootrom+0x170>)
   223f4:	4798      	blx	r3
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
   223f6:	4b22      	ldr	r3, [pc, #136]	; (22480 <wait_for_bootrom+0x178>)
   223f8:	4798      	blx	r3
   223fa:	0003      	movs	r3, r0
   223fc:	051b      	lsls	r3, r3, #20
   223fe:	0d1b      	lsrs	r3, r3, #20
   22400:	4a20      	ldr	r2, [pc, #128]	; (22484 <wait_for_bootrom+0x17c>)
   22402:	4293      	cmp	r3, r2
   22404:	d906      	bls.n	22414 <wait_for_bootrom+0x10c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
   22406:	697b      	ldr	r3, [r7, #20]
   22408:	2202      	movs	r2, #2
   2240a:	4313      	orrs	r3, r2
   2240c:	0018      	movs	r0, r3
   2240e:	4b1e      	ldr	r3, [pc, #120]	; (22488 <wait_for_bootrom+0x180>)
   22410:	4798      	blx	r3
   22412:	e003      	b.n	2241c <wait_for_bootrom+0x114>
	} else {
		chip_apply_conf(u32GpReg1);
   22414:	697b      	ldr	r3, [r7, #20]
   22416:	0018      	movs	r0, r3
   22418:	4b1b      	ldr	r3, [pc, #108]	; (22488 <wait_for_bootrom+0x180>)
   2241a:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
   2241c:	4b1b      	ldr	r3, [pc, #108]	; (2248c <wait_for_bootrom+0x184>)
   2241e:	0018      	movs	r0, r3
   22420:	4b1b      	ldr	r3, [pc, #108]	; (22490 <wait_for_bootrom+0x188>)
   22422:	4798      	blx	r3
   22424:	68fa      	ldr	r2, [r7, #12]
   22426:	4b1b      	ldr	r3, [pc, #108]	; (22494 <wait_for_bootrom+0x18c>)
   22428:	0011      	movs	r1, r2
   2242a:	0018      	movs	r0, r3
   2242c:	4b18      	ldr	r3, [pc, #96]	; (22490 <wait_for_bootrom+0x188>)
   2242e:	4798      	blx	r3
   22430:	4b19      	ldr	r3, [pc, #100]	; (22498 <wait_for_bootrom+0x190>)
   22432:	0018      	movs	r0, r3
   22434:	4b16      	ldr	r3, [pc, #88]	; (22490 <wait_for_bootrom+0x188>)
   22436:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
   22438:	4a18      	ldr	r2, [pc, #96]	; (2249c <wait_for_bootrom+0x194>)
   2243a:	4b0b      	ldr	r3, [pc, #44]	; (22468 <wait_for_bootrom+0x160>)
   2243c:	0011      	movs	r1, r2
   2243e:	0018      	movs	r0, r3
   22440:	4b0d      	ldr	r3, [pc, #52]	; (22478 <wait_for_bootrom+0x170>)
   22442:	4798      	blx	r3
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
   22444:	2313      	movs	r3, #19
   22446:	18fb      	adds	r3, r7, r3
   22448:	781b      	ldrb	r3, [r3, #0]
   2244a:	b25b      	sxtb	r3, r3
}
   2244c:	0018      	movs	r0, r3
   2244e:	46bd      	mov	sp, r7
   22450:	b008      	add	sp, #32
   22452:	bd80      	pop	{r7, pc}
   22454:	13301354 	.word	0x13301354
   22458:	00001014 	.word	0x00001014
   2245c:	00022691 	.word	0x00022691
   22460:	0001fd41 	.word	0x0001fd41
   22464:	000207bc 	.word	0x000207bc
   22468:	000c000c 	.word	0x000c000c
   2246c:	10add09e 	.word	0x10add09e
   22470:	3c1cd57d 	.word	0x3c1cd57d
   22474:	000207ac 	.word	0x000207ac
   22478:	000226d5 	.word	0x000226d5
   2247c:	0000108c 	.word	0x0000108c
   22480:	00021fb1 	.word	0x00021fb1
   22484:	0000039f 	.word	0x0000039f
   22488:	00021e81 	.word	0x00021e81
   2248c:	0003951c 	.word	0x0003951c
   22490:	0001dc4d 	.word	0x0001dc4d
   22494:	00039528 	.word	0x00039528
   22498:	000394fc 	.word	0x000394fc
   2249c:	ef522f61 	.word	0xef522f61

000224a0 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
   224a0:	b580      	push	{r7, lr}
   224a2:	b088      	sub	sp, #32
   224a4:	af00      	add	r7, sp, #0
   224a6:	0002      	movs	r2, r0
   224a8:	1dfb      	adds	r3, r7, #7
   224aa:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   224ac:	231f      	movs	r3, #31
   224ae:	18fb      	adds	r3, r7, r3
   224b0:	2200      	movs	r2, #0
   224b2:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
   224b4:	2300      	movs	r3, #0
   224b6:	61bb      	str	r3, [r7, #24]
   224b8:	2300      	movs	r3, #0
   224ba:	617b      	str	r3, [r7, #20]
	uint32 u32Timeout = TIMEOUT;
   224bc:	2301      	movs	r3, #1
   224be:	425b      	negs	r3, r3
   224c0:	613b      	str	r3, [r7, #16]
	volatile uint32 regAddress = NMI_STATE_REG;
   224c2:	4b1d      	ldr	r3, [pc, #116]	; (22538 <wait_for_firmware_start+0x98>)
   224c4:	60fb      	str	r3, [r7, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
   224c6:	4b1d      	ldr	r3, [pc, #116]	; (2253c <wait_for_firmware_start+0x9c>)
   224c8:	60bb      	str	r3, [r7, #8]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
   224ca:	1dfb      	adds	r3, r7, #7
   224cc:	781b      	ldrb	r3, [r3, #0]
   224ce:	2b02      	cmp	r3, #2
   224d0:	d003      	beq.n	224da <wait_for_firmware_start+0x3a>
   224d2:	1dfb      	adds	r3, r7, #7
   224d4:	781b      	ldrb	r3, [r3, #0]
   224d6:	2b03      	cmp	r3, #3
   224d8:	d119      	bne.n	2250e <wait_for_firmware_start+0x6e>
		regAddress = NMI_REV_REG;
   224da:	4b19      	ldr	r3, [pc, #100]	; (22540 <wait_for_firmware_start+0xa0>)
   224dc:	60fb      	str	r3, [r7, #12]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
   224de:	4b19      	ldr	r3, [pc, #100]	; (22544 <wait_for_firmware_start+0xa4>)
   224e0:	60bb      	str	r3, [r7, #8]
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
   224e2:	e014      	b.n	2250e <wait_for_firmware_start+0x6e>
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
   224e4:	2002      	movs	r0, #2
   224e6:	4b18      	ldr	r3, [pc, #96]	; (22548 <wait_for_firmware_start+0xa8>)
   224e8:	4798      	blx	r3
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
   224ea:	68fb      	ldr	r3, [r7, #12]
   224ec:	0018      	movs	r0, r3
   224ee:	4b17      	ldr	r3, [pc, #92]	; (2254c <wait_for_firmware_start+0xac>)
   224f0:	4798      	blx	r3
   224f2:	0003      	movs	r3, r0
   224f4:	61bb      	str	r3, [r7, #24]
		if(++cnt >= u32Timeout)
   224f6:	697b      	ldr	r3, [r7, #20]
   224f8:	3301      	adds	r3, #1
   224fa:	617b      	str	r3, [r7, #20]
   224fc:	697a      	ldr	r2, [r7, #20]
   224fe:	693b      	ldr	r3, [r7, #16]
   22500:	429a      	cmp	r2, r3
   22502:	d304      	bcc.n	2250e <wait_for_firmware_start+0x6e>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
   22504:	231f      	movs	r3, #31
   22506:	18fb      	adds	r3, r7, r3
   22508:	22fb      	movs	r2, #251	; 0xfb
   2250a:	701a      	strb	r2, [r3, #0]
			goto ERR;
   2250c:	e00c      	b.n	22528 <wait_for_firmware_start+0x88>
	while (checkValue != reg)
   2250e:	68ba      	ldr	r2, [r7, #8]
   22510:	69bb      	ldr	r3, [r7, #24]
   22512:	429a      	cmp	r2, r3
   22514:	d1e6      	bne.n	224e4 <wait_for_firmware_start+0x44>
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
   22516:	68bb      	ldr	r3, [r7, #8]
   22518:	4a08      	ldr	r2, [pc, #32]	; (2253c <wait_for_firmware_start+0x9c>)
   2251a:	4293      	cmp	r3, r2
   2251c:	d104      	bne.n	22528 <wait_for_firmware_start+0x88>
	{
		nm_write_reg(NMI_STATE_REG, 0);
   2251e:	4b06      	ldr	r3, [pc, #24]	; (22538 <wait_for_firmware_start+0x98>)
   22520:	2100      	movs	r1, #0
   22522:	0018      	movs	r0, r3
   22524:	4b0a      	ldr	r3, [pc, #40]	; (22550 <wait_for_firmware_start+0xb0>)
   22526:	4798      	blx	r3
	}
ERR:
	return ret;
   22528:	231f      	movs	r3, #31
   2252a:	18fb      	adds	r3, r7, r3
   2252c:	781b      	ldrb	r3, [r3, #0]
   2252e:	b25b      	sxtb	r3, r3
}
   22530:	0018      	movs	r0, r3
   22532:	46bd      	mov	sp, r7
   22534:	b008      	add	sp, #32
   22536:	bd80      	pop	{r7, pc}
   22538:	0000108c 	.word	0x0000108c
   2253c:	02532636 	.word	0x02532636
   22540:	000207ac 	.word	0x000207ac
   22544:	d75dc1c3 	.word	0xd75dc1c3
   22548:	0001fd41 	.word	0x0001fd41
   2254c:	00022691 	.word	0x00022691
   22550:	000226d5 	.word	0x000226d5

00022554 <chip_deinit>:

sint8 chip_deinit(void)
{
   22554:	b590      	push	{r4, r7, lr}
   22556:	b083      	sub	sp, #12
   22558:	af00      	add	r7, sp, #0
	uint32 reg = 0;
   2255a:	2300      	movs	r3, #0
   2255c:	603b      	str	r3, [r7, #0]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
   2255e:	1dfc      	adds	r4, r7, #7
   22560:	003a      	movs	r2, r7
   22562:	23a0      	movs	r3, #160	; 0xa0
   22564:	015b      	lsls	r3, r3, #5
   22566:	0011      	movs	r1, r2
   22568:	0018      	movs	r0, r3
   2256a:	4b20      	ldr	r3, [pc, #128]	; (225ec <chip_deinit+0x98>)
   2256c:	4798      	blx	r3
   2256e:	0003      	movs	r3, r0
   22570:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
   22572:	1dfb      	adds	r3, r7, #7
   22574:	781b      	ldrb	r3, [r3, #0]
   22576:	b25b      	sxtb	r3, r3
   22578:	2b00      	cmp	r3, #0
   2257a:	d00e      	beq.n	2259a <chip_deinit+0x46>
		M2M_ERR("failed to de-initialize\n");
   2257c:	4a1c      	ldr	r2, [pc, #112]	; (225f0 <chip_deinit+0x9c>)
   2257e:	491d      	ldr	r1, [pc, #116]	; (225f4 <chip_deinit+0xa0>)
   22580:	4b1d      	ldr	r3, [pc, #116]	; (225f8 <chip_deinit+0xa4>)
   22582:	0018      	movs	r0, r3
   22584:	4b1d      	ldr	r3, [pc, #116]	; (225fc <chip_deinit+0xa8>)
   22586:	4798      	blx	r3
   22588:	4b1d      	ldr	r3, [pc, #116]	; (22600 <chip_deinit+0xac>)
   2258a:	0018      	movs	r0, r3
   2258c:	4b1b      	ldr	r3, [pc, #108]	; (225fc <chip_deinit+0xa8>)
   2258e:	4798      	blx	r3
   22590:	4b1c      	ldr	r3, [pc, #112]	; (22604 <chip_deinit+0xb0>)
   22592:	0018      	movs	r0, r3
   22594:	4b19      	ldr	r3, [pc, #100]	; (225fc <chip_deinit+0xa8>)
   22596:	4798      	blx	r3
		goto ERR1;
   22598:	e021      	b.n	225de <chip_deinit+0x8a>
	}
	reg &= ~(1 << 10);
   2259a:	683b      	ldr	r3, [r7, #0]
   2259c:	4a1a      	ldr	r2, [pc, #104]	; (22608 <chip_deinit+0xb4>)
   2259e:	4013      	ands	r3, r2
   225a0:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
   225a2:	683a      	ldr	r2, [r7, #0]
   225a4:	1dfc      	adds	r4, r7, #7
   225a6:	23a0      	movs	r3, #160	; 0xa0
   225a8:	015b      	lsls	r3, r3, #5
   225aa:	0011      	movs	r1, r2
   225ac:	0018      	movs	r0, r3
   225ae:	4b17      	ldr	r3, [pc, #92]	; (2260c <chip_deinit+0xb8>)
   225b0:	4798      	blx	r3
   225b2:	0003      	movs	r3, r0
   225b4:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
   225b6:	1dfb      	adds	r3, r7, #7
   225b8:	781b      	ldrb	r3, [r3, #0]
   225ba:	b25b      	sxtb	r3, r3
   225bc:	2b00      	cmp	r3, #0
   225be:	d00e      	beq.n	225de <chip_deinit+0x8a>
		M2M_ERR("failed to de-initialize\n");
   225c0:	4a13      	ldr	r2, [pc, #76]	; (22610 <chip_deinit+0xbc>)
   225c2:	490c      	ldr	r1, [pc, #48]	; (225f4 <chip_deinit+0xa0>)
   225c4:	4b0c      	ldr	r3, [pc, #48]	; (225f8 <chip_deinit+0xa4>)
   225c6:	0018      	movs	r0, r3
   225c8:	4b0c      	ldr	r3, [pc, #48]	; (225fc <chip_deinit+0xa8>)
   225ca:	4798      	blx	r3
   225cc:	4b0c      	ldr	r3, [pc, #48]	; (22600 <chip_deinit+0xac>)
   225ce:	0018      	movs	r0, r3
   225d0:	4b0a      	ldr	r3, [pc, #40]	; (225fc <chip_deinit+0xa8>)
   225d2:	4798      	blx	r3
   225d4:	4b0b      	ldr	r3, [pc, #44]	; (22604 <chip_deinit+0xb0>)
   225d6:	0018      	movs	r0, r3
   225d8:	4b08      	ldr	r3, [pc, #32]	; (225fc <chip_deinit+0xa8>)
   225da:	4798      	blx	r3
		goto ERR1;
   225dc:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   225de:	1dfb      	adds	r3, r7, #7
   225e0:	781b      	ldrb	r3, [r3, #0]
   225e2:	b25b      	sxtb	r3, r3
}
   225e4:	0018      	movs	r0, r3
   225e6:	46bd      	mov	sp, r7
   225e8:	b003      	add	sp, #12
   225ea:	bd90      	pop	{r4, r7, pc}
   225ec:	000226b1 	.word	0x000226b1
   225f0:	00000201 	.word	0x00000201
   225f4:	00039568 	.word	0x00039568
   225f8:	000394d0 	.word	0x000394d0
   225fc:	0001dc4d 	.word	0x0001dc4d
   22600:	00039540 	.word	0x00039540
   22604:	000394fc 	.word	0x000394fc
   22608:	fffffbff 	.word	0xfffffbff
   2260c:	000226d5 	.word	0x000226d5
   22610:	00000207 	.word	0x00000207

00022614 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
   22614:	b590      	push	{r4, r7, lr}
   22616:	b085      	sub	sp, #20
   22618:	af00      	add	r7, sp, #0
   2261a:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   2261c:	230f      	movs	r3, #15
   2261e:	18fb      	adds	r3, r7, r3
   22620:	2200      	movs	r2, #0
   22622:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_init(pvInitVal);
   22624:	230f      	movs	r3, #15
   22626:	18fc      	adds	r4, r7, r3
   22628:	687b      	ldr	r3, [r7, #4]
   2262a:	0018      	movs	r0, r3
   2262c:	4b05      	ldr	r3, [pc, #20]	; (22644 <nm_bus_iface_init+0x30>)
   2262e:	4798      	blx	r3
   22630:	0003      	movs	r3, r0
   22632:	7023      	strb	r3, [r4, #0]
	return ret;
   22634:	230f      	movs	r3, #15
   22636:	18fb      	adds	r3, r7, r3
   22638:	781b      	ldrb	r3, [r3, #0]
   2263a:	b25b      	sxtb	r3, r3
}
   2263c:	0018      	movs	r0, r3
   2263e:	46bd      	mov	sp, r7
   22640:	b005      	add	sp, #20
   22642:	bd90      	pop	{r4, r7, pc}
   22644:	000203fd 	.word	0x000203fd

00022648 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
   22648:	b590      	push	{r4, r7, lr}
   2264a:	b083      	sub	sp, #12
   2264c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   2264e:	1dfb      	adds	r3, r7, #7
   22650:	2200      	movs	r2, #0
   22652:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_deinit();
   22654:	1dfc      	adds	r4, r7, #7
   22656:	4b05      	ldr	r3, [pc, #20]	; (2266c <nm_bus_iface_deinit+0x24>)
   22658:	4798      	blx	r3
   2265a:	0003      	movs	r3, r0
   2265c:	7023      	strb	r3, [r4, #0]

	return ret;
   2265e:	1dfb      	adds	r3, r7, #7
   22660:	781b      	ldrb	r3, [r3, #0]
   22662:	b25b      	sxtb	r3, r3
}
   22664:	0018      	movs	r0, r3
   22666:	46bd      	mov	sp, r7
   22668:	b003      	add	sp, #12
   2266a:	bd90      	pop	{r4, r7, pc}
   2266c:	00020575 	.word	0x00020575

00022670 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
   22670:	b580      	push	{r7, lr}
   22672:	b082      	sub	sp, #8
   22674:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   22676:	1dfb      	adds	r3, r7, #7
   22678:	2200      	movs	r2, #0
   2267a:	701a      	strb	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
   2267c:	4b03      	ldr	r3, [pc, #12]	; (2268c <nm_bus_reset+0x1c>)
   2267e:	4798      	blx	r3
   22680:	0003      	movs	r3, r0
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
   22682:	0018      	movs	r0, r3
   22684:	46bd      	mov	sp, r7
   22686:	b002      	add	sp, #8
   22688:	bd80      	pop	{r7, pc}
   2268a:	46c0      	nop			; (mov r8, r8)
   2268c:	0002449d 	.word	0x0002449d

00022690 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
   22690:	b580      	push	{r7, lr}
   22692:	b082      	sub	sp, #8
   22694:	af00      	add	r7, sp, #0
   22696:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
   22698:	687b      	ldr	r3, [r7, #4]
   2269a:	0018      	movs	r0, r3
   2269c:	4b03      	ldr	r3, [pc, #12]	; (226ac <nm_read_reg+0x1c>)
   2269e:	4798      	blx	r3
   226a0:	0003      	movs	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
   226a2:	0018      	movs	r0, r3
   226a4:	46bd      	mov	sp, r7
   226a6:	b002      	add	sp, #8
   226a8:	bd80      	pop	{r7, pc}
   226aa:	46c0      	nop			; (mov r8, r8)
   226ac:	00024631 	.word	0x00024631

000226b0 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   226b0:	b580      	push	{r7, lr}
   226b2:	b082      	sub	sp, #8
   226b4:	af00      	add	r7, sp, #0
   226b6:	6078      	str	r0, [r7, #4]
   226b8:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
   226ba:	683a      	ldr	r2, [r7, #0]
   226bc:	687b      	ldr	r3, [r7, #4]
   226be:	0011      	movs	r1, r2
   226c0:	0018      	movs	r0, r3
   226c2:	4b03      	ldr	r3, [pc, #12]	; (226d0 <nm_read_reg_with_ret+0x20>)
   226c4:	4798      	blx	r3
   226c6:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
   226c8:	0018      	movs	r0, r3
   226ca:	46bd      	mov	sp, r7
   226cc:	b002      	add	sp, #8
   226ce:	bd80      	pop	{r7, pc}
   226d0:	00024655 	.word	0x00024655

000226d4 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
   226d4:	b580      	push	{r7, lr}
   226d6:	b082      	sub	sp, #8
   226d8:	af00      	add	r7, sp, #0
   226da:	6078      	str	r0, [r7, #4]
   226dc:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
   226de:	683a      	ldr	r2, [r7, #0]
   226e0:	687b      	ldr	r3, [r7, #4]
   226e2:	0011      	movs	r1, r2
   226e4:	0018      	movs	r0, r3
   226e6:	4b03      	ldr	r3, [pc, #12]	; (226f4 <nm_write_reg+0x20>)
   226e8:	4798      	blx	r3
   226ea:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
   226ec:	0018      	movs	r0, r3
   226ee:	46bd      	mov	sp, r7
   226f0:	b002      	add	sp, #8
   226f2:	bd80      	pop	{r7, pc}
   226f4:	000246a5 	.word	0x000246a5

000226f8 <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   226f8:	b580      	push	{r7, lr}
   226fa:	b084      	sub	sp, #16
   226fc:	af00      	add	r7, sp, #0
   226fe:	60f8      	str	r0, [r7, #12]
   22700:	60b9      	str	r1, [r7, #8]
   22702:	1dbb      	adds	r3, r7, #6
   22704:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
   22706:	1dbb      	adds	r3, r7, #6
   22708:	881a      	ldrh	r2, [r3, #0]
   2270a:	68b9      	ldr	r1, [r7, #8]
   2270c:	68fb      	ldr	r3, [r7, #12]
   2270e:	0018      	movs	r0, r3
   22710:	4b03      	ldr	r3, [pc, #12]	; (22720 <p_nm_read_block+0x28>)
   22712:	4798      	blx	r3
   22714:	0003      	movs	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
   22716:	0018      	movs	r0, r3
   22718:	46bd      	mov	sp, r7
   2271a:	b004      	add	sp, #16
   2271c:	bd80      	pop	{r7, pc}
   2271e:	46c0      	nop			; (mov r8, r8)
   22720:	000246f5 	.word	0x000246f5

00022724 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   22724:	b580      	push	{r7, lr}
   22726:	b086      	sub	sp, #24
   22728:	af00      	add	r7, sp, #0
   2272a:	60f8      	str	r0, [r7, #12]
   2272c:	60b9      	str	r1, [r7, #8]
   2272e:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   22730:	4b2d      	ldr	r3, [pc, #180]	; (227e8 <nm_read_block+0xc4>)
   22732:	881a      	ldrh	r2, [r3, #0]
   22734:	2310      	movs	r3, #16
   22736:	18fb      	adds	r3, r7, r3
   22738:	3a08      	subs	r2, #8
   2273a:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
   2273c:	2300      	movs	r3, #0
   2273e:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
   22740:	2313      	movs	r3, #19
   22742:	18fb      	adds	r3, r7, r3
   22744:	2200      	movs	r2, #0
   22746:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   22748:	2310      	movs	r3, #16
   2274a:	18fb      	adds	r3, r7, r3
   2274c:	881a      	ldrh	r2, [r3, #0]
   2274e:	687b      	ldr	r3, [r7, #4]
   22750:	429a      	cmp	r2, r3
   22752:	d313      	bcc.n	2277c <nm_read_block+0x58>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   22754:	68ba      	ldr	r2, [r7, #8]
   22756:	697b      	ldr	r3, [r7, #20]
   22758:	18d1      	adds	r1, r2, r3
   2275a:	687b      	ldr	r3, [r7, #4]
   2275c:	b29a      	uxth	r2, r3
   2275e:	68fb      	ldr	r3, [r7, #12]
   22760:	0018      	movs	r0, r3
   22762:	4b22      	ldr	r3, [pc, #136]	; (227ec <nm_read_block+0xc8>)
   22764:	4798      	blx	r3
   22766:	0003      	movs	r3, r0
   22768:	b2da      	uxtb	r2, r3
   2276a:	2313      	movs	r3, #19
   2276c:	18fb      	adds	r3, r7, r3
   2276e:	781b      	ldrb	r3, [r3, #0]
   22770:	18d3      	adds	r3, r2, r3
   22772:	b2da      	uxtb	r2, r3
   22774:	2313      	movs	r3, #19
   22776:	18fb      	adds	r3, r7, r3
   22778:	701a      	strb	r2, [r3, #0]
			break;
   2277a:	e02d      	b.n	227d8 <nm_read_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
   2277c:	68ba      	ldr	r2, [r7, #8]
   2277e:	697b      	ldr	r3, [r7, #20]
   22780:	18d1      	adds	r1, r2, r3
   22782:	2310      	movs	r3, #16
   22784:	18fb      	adds	r3, r7, r3
   22786:	881a      	ldrh	r2, [r3, #0]
   22788:	68fb      	ldr	r3, [r7, #12]
   2278a:	0018      	movs	r0, r3
   2278c:	4b17      	ldr	r3, [pc, #92]	; (227ec <nm_read_block+0xc8>)
   2278e:	4798      	blx	r3
   22790:	0003      	movs	r3, r0
   22792:	b2da      	uxtb	r2, r3
   22794:	2313      	movs	r3, #19
   22796:	18fb      	adds	r3, r7, r3
   22798:	781b      	ldrb	r3, [r3, #0]
   2279a:	18d3      	adds	r3, r2, r3
   2279c:	b2da      	uxtb	r2, r3
   2279e:	2313      	movs	r3, #19
   227a0:	18fb      	adds	r3, r7, r3
   227a2:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
   227a4:	2313      	movs	r3, #19
   227a6:	18fb      	adds	r3, r7, r3
   227a8:	781b      	ldrb	r3, [r3, #0]
   227aa:	b25b      	sxtb	r3, r3
   227ac:	2b00      	cmp	r3, #0
   227ae:	d112      	bne.n	227d6 <nm_read_block+0xb2>
			u32Sz -= u16MaxTrxSz;
   227b0:	2310      	movs	r3, #16
   227b2:	18fb      	adds	r3, r7, r3
   227b4:	881b      	ldrh	r3, [r3, #0]
   227b6:	687a      	ldr	r2, [r7, #4]
   227b8:	1ad3      	subs	r3, r2, r3
   227ba:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
   227bc:	2310      	movs	r3, #16
   227be:	18fb      	adds	r3, r7, r3
   227c0:	881b      	ldrh	r3, [r3, #0]
   227c2:	697a      	ldr	r2, [r7, #20]
   227c4:	18d3      	adds	r3, r2, r3
   227c6:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
   227c8:	2310      	movs	r3, #16
   227ca:	18fb      	adds	r3, r7, r3
   227cc:	881b      	ldrh	r3, [r3, #0]
   227ce:	68fa      	ldr	r2, [r7, #12]
   227d0:	18d3      	adds	r3, r2, r3
   227d2:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
   227d4:	e7b8      	b.n	22748 <nm_read_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
   227d6:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
   227d8:	2313      	movs	r3, #19
   227da:	18fb      	adds	r3, r7, r3
   227dc:	781b      	ldrb	r3, [r3, #0]
   227de:	b25b      	sxtb	r3, r3
}
   227e0:	0018      	movs	r0, r3
   227e2:	46bd      	mov	sp, r7
   227e4:	b006      	add	sp, #24
   227e6:	bd80      	pop	{r7, pc}
   227e8:	200000dc 	.word	0x200000dc
   227ec:	000226f9 	.word	0x000226f9

000227f0 <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   227f0:	b580      	push	{r7, lr}
   227f2:	b084      	sub	sp, #16
   227f4:	af00      	add	r7, sp, #0
   227f6:	60f8      	str	r0, [r7, #12]
   227f8:	60b9      	str	r1, [r7, #8]
   227fa:	1dbb      	adds	r3, r7, #6
   227fc:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
   227fe:	1dbb      	adds	r3, r7, #6
   22800:	881a      	ldrh	r2, [r3, #0]
   22802:	68b9      	ldr	r1, [r7, #8]
   22804:	68fb      	ldr	r3, [r7, #12]
   22806:	0018      	movs	r0, r3
   22808:	4b03      	ldr	r3, [pc, #12]	; (22818 <p_nm_write_block+0x28>)
   2280a:	4798      	blx	r3
   2280c:	0003      	movs	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
   2280e:	0018      	movs	r0, r3
   22810:	46bd      	mov	sp, r7
   22812:	b004      	add	sp, #16
   22814:	bd80      	pop	{r7, pc}
   22816:	46c0      	nop			; (mov r8, r8)
   22818:	0002474d 	.word	0x0002474d

0002281c <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   2281c:	b580      	push	{r7, lr}
   2281e:	b086      	sub	sp, #24
   22820:	af00      	add	r7, sp, #0
   22822:	60f8      	str	r0, [r7, #12]
   22824:	60b9      	str	r1, [r7, #8]
   22826:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   22828:	4b2d      	ldr	r3, [pc, #180]	; (228e0 <nm_write_block+0xc4>)
   2282a:	881a      	ldrh	r2, [r3, #0]
   2282c:	2310      	movs	r3, #16
   2282e:	18fb      	adds	r3, r7, r3
   22830:	3a08      	subs	r2, #8
   22832:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
   22834:	2300      	movs	r3, #0
   22836:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
   22838:	2313      	movs	r3, #19
   2283a:	18fb      	adds	r3, r7, r3
   2283c:	2200      	movs	r2, #0
   2283e:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   22840:	2310      	movs	r3, #16
   22842:	18fb      	adds	r3, r7, r3
   22844:	881a      	ldrh	r2, [r3, #0]
   22846:	687b      	ldr	r3, [r7, #4]
   22848:	429a      	cmp	r2, r3
   2284a:	d313      	bcc.n	22874 <nm_write_block+0x58>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   2284c:	68ba      	ldr	r2, [r7, #8]
   2284e:	697b      	ldr	r3, [r7, #20]
   22850:	18d1      	adds	r1, r2, r3
   22852:	687b      	ldr	r3, [r7, #4]
   22854:	b29a      	uxth	r2, r3
   22856:	68fb      	ldr	r3, [r7, #12]
   22858:	0018      	movs	r0, r3
   2285a:	4b22      	ldr	r3, [pc, #136]	; (228e4 <nm_write_block+0xc8>)
   2285c:	4798      	blx	r3
   2285e:	0003      	movs	r3, r0
   22860:	b2da      	uxtb	r2, r3
   22862:	2313      	movs	r3, #19
   22864:	18fb      	adds	r3, r7, r3
   22866:	781b      	ldrb	r3, [r3, #0]
   22868:	18d3      	adds	r3, r2, r3
   2286a:	b2da      	uxtb	r2, r3
   2286c:	2313      	movs	r3, #19
   2286e:	18fb      	adds	r3, r7, r3
   22870:	701a      	strb	r2, [r3, #0]
			break;
   22872:	e02d      	b.n	228d0 <nm_write_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
   22874:	68ba      	ldr	r2, [r7, #8]
   22876:	697b      	ldr	r3, [r7, #20]
   22878:	18d1      	adds	r1, r2, r3
   2287a:	2310      	movs	r3, #16
   2287c:	18fb      	adds	r3, r7, r3
   2287e:	881a      	ldrh	r2, [r3, #0]
   22880:	68fb      	ldr	r3, [r7, #12]
   22882:	0018      	movs	r0, r3
   22884:	4b17      	ldr	r3, [pc, #92]	; (228e4 <nm_write_block+0xc8>)
   22886:	4798      	blx	r3
   22888:	0003      	movs	r3, r0
   2288a:	b2da      	uxtb	r2, r3
   2288c:	2313      	movs	r3, #19
   2288e:	18fb      	adds	r3, r7, r3
   22890:	781b      	ldrb	r3, [r3, #0]
   22892:	18d3      	adds	r3, r2, r3
   22894:	b2da      	uxtb	r2, r3
   22896:	2313      	movs	r3, #19
   22898:	18fb      	adds	r3, r7, r3
   2289a:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
   2289c:	2313      	movs	r3, #19
   2289e:	18fb      	adds	r3, r7, r3
   228a0:	781b      	ldrb	r3, [r3, #0]
   228a2:	b25b      	sxtb	r3, r3
   228a4:	2b00      	cmp	r3, #0
   228a6:	d112      	bne.n	228ce <nm_write_block+0xb2>
			u32Sz -= u16MaxTrxSz;
   228a8:	2310      	movs	r3, #16
   228aa:	18fb      	adds	r3, r7, r3
   228ac:	881b      	ldrh	r3, [r3, #0]
   228ae:	687a      	ldr	r2, [r7, #4]
   228b0:	1ad3      	subs	r3, r2, r3
   228b2:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
   228b4:	2310      	movs	r3, #16
   228b6:	18fb      	adds	r3, r7, r3
   228b8:	881b      	ldrh	r3, [r3, #0]
   228ba:	697a      	ldr	r2, [r7, #20]
   228bc:	18d3      	adds	r3, r2, r3
   228be:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
   228c0:	2310      	movs	r3, #16
   228c2:	18fb      	adds	r3, r7, r3
   228c4:	881b      	ldrh	r3, [r3, #0]
   228c6:	68fa      	ldr	r2, [r7, #12]
   228c8:	18d3      	adds	r3, r2, r3
   228ca:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
   228cc:	e7b8      	b.n	22840 <nm_write_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
   228ce:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
   228d0:	2313      	movs	r3, #19
   228d2:	18fb      	adds	r3, r7, r3
   228d4:	781b      	ldrb	r3, [r3, #0]
   228d6:	b25b      	sxtb	r3, r3
}
   228d8:	0018      	movs	r0, r3
   228da:	46bd      	mov	sp, r7
   228dc:	b006      	add	sp, #24
   228de:	bd80      	pop	{r7, pc}
   228e0:	200000dc 	.word	0x200000dc
   228e4:	000227f1 	.word	0x000227f1

000228e8 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
   228e8:	b590      	push	{r4, r7, lr}
   228ea:	b089      	sub	sp, #36	; 0x24
   228ec:	af00      	add	r7, sp, #0
   228ee:	6078      	str	r0, [r7, #4]
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
   228f0:	2300      	movs	r3, #0
   228f2:	617b      	str	r3, [r7, #20]
	sint8	ret = M2M_SUCCESS;
   228f4:	231f      	movs	r3, #31
   228f6:	18fb      	adds	r3, r7, r3
   228f8:	2200      	movs	r2, #0
   228fa:	701a      	strb	r2, [r3, #0]
	tstrGpRegs strgp = {0};
   228fc:	230c      	movs	r3, #12
   228fe:	18fb      	adds	r3, r7, r3
   22900:	0018      	movs	r0, r3
   22902:	2308      	movs	r3, #8
   22904:	001a      	movs	r2, r3
   22906:	2100      	movs	r1, #0
   22908:	4b64      	ldr	r3, [pc, #400]	; (22a9c <nm_get_firmware_full_info+0x1b4>)
   2290a:	4798      	blx	r3
	if (pstrRev != NULL)
   2290c:	687b      	ldr	r3, [r7, #4]
   2290e:	2b00      	cmp	r3, #0
   22910:	d100      	bne.n	22914 <nm_get_firmware_full_info+0x2c>
   22912:	e0ba      	b.n	22a8a <nm_get_firmware_full_info+0x1a2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
   22914:	687b      	ldr	r3, [r7, #4]
   22916:	2228      	movs	r2, #40	; 0x28
   22918:	2100      	movs	r1, #0
   2291a:	0018      	movs	r0, r3
   2291c:	4b60      	ldr	r3, [pc, #384]	; (22aa0 <nm_get_firmware_full_info+0x1b8>)
   2291e:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
   22920:	231f      	movs	r3, #31
   22922:	18fc      	adds	r4, r7, r3
   22924:	2314      	movs	r3, #20
   22926:	18fb      	adds	r3, r7, r3
   22928:	4a5e      	ldr	r2, [pc, #376]	; (22aa4 <nm_get_firmware_full_info+0x1bc>)
   2292a:	0019      	movs	r1, r3
   2292c:	0010      	movs	r0, r2
   2292e:	4b5e      	ldr	r3, [pc, #376]	; (22aa8 <nm_get_firmware_full_info+0x1c0>)
   22930:	4798      	blx	r3
   22932:	0003      	movs	r3, r0
   22934:	7023      	strb	r3, [r4, #0]
		if(ret == M2M_SUCCESS)
   22936:	231f      	movs	r3, #31
   22938:	18fb      	adds	r3, r7, r3
   2293a:	781b      	ldrb	r3, [r3, #0]
   2293c:	b25b      	sxtb	r3, r3
   2293e:	2b00      	cmp	r3, #0
   22940:	d000      	beq.n	22944 <nm_get_firmware_full_info+0x5c>
   22942:	e0a2      	b.n	22a8a <nm_get_firmware_full_info+0x1a2>
		{
			if(reg != 0)
   22944:	697b      	ldr	r3, [r7, #20]
   22946:	2b00      	cmp	r3, #0
   22948:	d100      	bne.n	2294c <nm_get_firmware_full_info+0x64>
   2294a:	e09a      	b.n	22a82 <nm_get_firmware_full_info+0x19a>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
   2294c:	697b      	ldr	r3, [r7, #20]
   2294e:	22c0      	movs	r2, #192	; 0xc0
   22950:	0292      	lsls	r2, r2, #10
   22952:	4313      	orrs	r3, r2
   22954:	221f      	movs	r2, #31
   22956:	18bc      	adds	r4, r7, r2
   22958:	220c      	movs	r2, #12
   2295a:	18b9      	adds	r1, r7, r2
   2295c:	2208      	movs	r2, #8
   2295e:	0018      	movs	r0, r3
   22960:	4b52      	ldr	r3, [pc, #328]	; (22aac <nm_get_firmware_full_info+0x1c4>)
   22962:	4798      	blx	r3
   22964:	0003      	movs	r3, r0
   22966:	7023      	strb	r3, [r4, #0]
				if(ret == M2M_SUCCESS)
   22968:	231f      	movs	r3, #31
   2296a:	18fb      	adds	r3, r7, r3
   2296c:	781b      	ldrb	r3, [r3, #0]
   2296e:	b25b      	sxtb	r3, r3
   22970:	2b00      	cmp	r3, #0
   22972:	d000      	beq.n	22976 <nm_get_firmware_full_info+0x8e>
   22974:	e089      	b.n	22a8a <nm_get_firmware_full_info+0x1a2>
				{
					reg = strgp.u32Firmware_Ota_rev;
   22976:	230c      	movs	r3, #12
   22978:	18fb      	adds	r3, r7, r3
   2297a:	685b      	ldr	r3, [r3, #4]
   2297c:	617b      	str	r3, [r7, #20]
					reg &= 0x0000ffff;
   2297e:	697b      	ldr	r3, [r7, #20]
   22980:	041b      	lsls	r3, r3, #16
   22982:	0c1b      	lsrs	r3, r3, #16
   22984:	617b      	str	r3, [r7, #20]
					if(reg != 0)
   22986:	697b      	ldr	r3, [r7, #20]
   22988:	2b00      	cmp	r3, #0
   2298a:	d100      	bne.n	2298e <nm_get_firmware_full_info+0xa6>
   2298c:	e074      	b.n	22a78 <nm_get_firmware_full_info+0x190>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
   2298e:	697b      	ldr	r3, [r7, #20]
   22990:	22c0      	movs	r2, #192	; 0xc0
   22992:	0292      	lsls	r2, r2, #10
   22994:	4313      	orrs	r3, r2
   22996:	221f      	movs	r2, #31
   22998:	18bc      	adds	r4, r7, r2
   2299a:	6879      	ldr	r1, [r7, #4]
   2299c:	2228      	movs	r2, #40	; 0x28
   2299e:	0018      	movs	r0, r3
   229a0:	4b42      	ldr	r3, [pc, #264]	; (22aac <nm_get_firmware_full_info+0x1c4>)
   229a2:	4798      	blx	r3
   229a4:	0003      	movs	r3, r0
   229a6:	7023      	strb	r3, [r4, #0]
						if(ret == M2M_SUCCESS)
   229a8:	231f      	movs	r3, #31
   229aa:	18fb      	adds	r3, r7, r3
   229ac:	781b      	ldrb	r3, [r3, #0]
   229ae:	b25b      	sxtb	r3, r3
   229b0:	2b00      	cmp	r3, #0
   229b2:	d16a      	bne.n	22a8a <nm_get_firmware_full_info+0x1a2>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
   229b4:	687b      	ldr	r3, [r7, #4]
   229b6:	791b      	ldrb	r3, [r3, #4]
   229b8:	021b      	lsls	r3, r3, #8
   229ba:	b21a      	sxth	r2, r3
   229bc:	687b      	ldr	r3, [r7, #4]
   229be:	795b      	ldrb	r3, [r3, #5]
   229c0:	011b      	lsls	r3, r3, #4
   229c2:	b21b      	sxth	r3, r3
   229c4:	21ff      	movs	r1, #255	; 0xff
   229c6:	400b      	ands	r3, r1
   229c8:	b21b      	sxth	r3, r3
   229ca:	4313      	orrs	r3, r2
   229cc:	b21a      	sxth	r2, r3
   229ce:	687b      	ldr	r3, [r7, #4]
   229d0:	799b      	ldrb	r3, [r3, #6]
   229d2:	b21b      	sxth	r3, r3
   229d4:	210f      	movs	r1, #15
   229d6:	400b      	ands	r3, r1
   229d8:	b21b      	sxth	r3, r3
   229da:	4313      	orrs	r3, r2
   229dc:	b21a      	sxth	r2, r3
   229de:	231c      	movs	r3, #28
   229e0:	18fb      	adds	r3, r7, r3
   229e2:	801a      	strh	r2, [r3, #0]
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
   229e4:	231a      	movs	r3, #26
   229e6:	18fb      	adds	r3, r7, r3
   229e8:	4a31      	ldr	r2, [pc, #196]	; (22ab0 <nm_get_firmware_full_info+0x1c8>)
   229ea:	801a      	strh	r2, [r3, #0]
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
   229ec:	687b      	ldr	r3, [r7, #4]
   229ee:	79db      	ldrb	r3, [r3, #7]
   229f0:	021b      	lsls	r3, r3, #8
   229f2:	b21a      	sxth	r2, r3
   229f4:	687b      	ldr	r3, [r7, #4]
   229f6:	7a1b      	ldrb	r3, [r3, #8]
   229f8:	011b      	lsls	r3, r3, #4
   229fa:	b21b      	sxth	r3, r3
   229fc:	21ff      	movs	r1, #255	; 0xff
   229fe:	400b      	ands	r3, r1
   22a00:	b21b      	sxth	r3, r3
   22a02:	4313      	orrs	r3, r2
   22a04:	b21a      	sxth	r2, r3
   22a06:	687b      	ldr	r3, [r7, #4]
   22a08:	7a5b      	ldrb	r3, [r3, #9]
   22a0a:	b21b      	sxth	r3, r3
   22a0c:	210f      	movs	r1, #15
   22a0e:	400b      	ands	r3, r1
   22a10:	b21b      	sxth	r3, r3
   22a12:	4313      	orrs	r3, r2
   22a14:	b21a      	sxth	r2, r3
   22a16:	2318      	movs	r3, #24
   22a18:	18fb      	adds	r3, r7, r3
   22a1a:	801a      	strh	r2, [r3, #0]
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
   22a1c:	231c      	movs	r3, #28
   22a1e:	18fb      	adds	r3, r7, r3
   22a20:	881b      	ldrh	r3, [r3, #0]
   22a22:	2b00      	cmp	r3, #0
   22a24:	d009      	beq.n	22a3a <nm_get_firmware_full_info+0x152>
   22a26:	2318      	movs	r3, #24
   22a28:	18fb      	adds	r3, r7, r3
   22a2a:	881b      	ldrh	r3, [r3, #0]
   22a2c:	2b00      	cmp	r3, #0
   22a2e:	d004      	beq.n	22a3a <nm_get_firmware_full_info+0x152>
   22a30:	2318      	movs	r3, #24
   22a32:	18fb      	adds	r3, r7, r3
   22a34:	881b      	ldrh	r3, [r3, #0]
   22a36:	2b00      	cmp	r3, #0
   22a38:	d104      	bne.n	22a44 <nm_get_firmware_full_info+0x15c>
								ret = M2M_ERR_FAIL;
   22a3a:	231f      	movs	r3, #31
   22a3c:	18fb      	adds	r3, r7, r3
   22a3e:	22f4      	movs	r2, #244	; 0xf4
   22a40:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   22a42:	e022      	b.n	22a8a <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver <  min_req_drv_ver) {
   22a44:	231a      	movs	r3, #26
   22a46:	18fa      	adds	r2, r7, r3
   22a48:	2318      	movs	r3, #24
   22a4a:	18fb      	adds	r3, r7, r3
   22a4c:	8812      	ldrh	r2, [r2, #0]
   22a4e:	881b      	ldrh	r3, [r3, #0]
   22a50:	429a      	cmp	r2, r3
   22a52:	d204      	bcs.n	22a5e <nm_get_firmware_full_info+0x176>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
   22a54:	231f      	movs	r3, #31
   22a56:	18fb      	adds	r3, r7, r3
   22a58:	22f3      	movs	r2, #243	; 0xf3
   22a5a:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   22a5c:	e015      	b.n	22a8a <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver >  curr_firm_ver) {
   22a5e:	231a      	movs	r3, #26
   22a60:	18fa      	adds	r2, r7, r3
   22a62:	231c      	movs	r3, #28
   22a64:	18fb      	adds	r3, r7, r3
   22a66:	8812      	ldrh	r2, [r2, #0]
   22a68:	881b      	ldrh	r3, [r3, #0]
   22a6a:	429a      	cmp	r2, r3
   22a6c:	d90d      	bls.n	22a8a <nm_get_firmware_full_info+0x1a2>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
   22a6e:	231f      	movs	r3, #31
   22a70:	18fb      	adds	r3, r7, r3
   22a72:	22f3      	movs	r2, #243	; 0xf3
   22a74:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   22a76:	e008      	b.n	22a8a <nm_get_firmware_full_info+0x1a2>
							}
						}
					}else {
						ret = M2M_ERR_FAIL;
   22a78:	231f      	movs	r3, #31
   22a7a:	18fb      	adds	r3, r7, r3
   22a7c:	22f4      	movs	r2, #244	; 0xf4
   22a7e:	701a      	strb	r2, [r3, #0]
   22a80:	e003      	b.n	22a8a <nm_get_firmware_full_info+0x1a2>
					}
				}
			}else{
				ret = M2M_ERR_FAIL;
   22a82:	231f      	movs	r3, #31
   22a84:	18fb      	adds	r3, r7, r3
   22a86:	22f4      	movs	r2, #244	; 0xf4
   22a88:	701a      	strb	r2, [r3, #0]
			}
		}
	}
EXIT:
	return ret;
   22a8a:	231f      	movs	r3, #31
   22a8c:	18fb      	adds	r3, r7, r3
   22a8e:	781b      	ldrb	r3, [r3, #0]
   22a90:	b25b      	sxtb	r3, r3
}
   22a92:	0018      	movs	r0, r3
   22a94:	46bd      	mov	sp, r7
   22a96:	b009      	add	sp, #36	; 0x24
   22a98:	bd90      	pop	{r4, r7, pc}
   22a9a:	46c0      	nop			; (mov r8, r8)
   22a9c:	00034083 	.word	0x00034083
   22aa0:	00020621 	.word	0x00020621
   22aa4:	000c0008 	.word	0x000c0008
   22aa8:	000226b1 	.word	0x000226b1
   22aac:	00022725 	.word	0x00022725
   22ab0:	00001354 	.word	0x00001354

00022ab4 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
   22ab4:	b590      	push	{r4, r7, lr}
   22ab6:	b085      	sub	sp, #20
   22ab8:	af00      	add	r7, sp, #0
   22aba:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   22abc:	230f      	movs	r3, #15
   22abe:	18fb      	adds	r3, r7, r3
   22ac0:	2200      	movs	r2, #0
   22ac2:	701a      	strb	r2, [r3, #0]
	uint8 u8Mode;
	
	if(NULL != arg) {
   22ac4:	687b      	ldr	r3, [r7, #4]
   22ac6:	2b00      	cmp	r3, #0
   22ac8:	d013      	beq.n	22af2 <nm_drv_init+0x3e>
		u8Mode = *((uint8 *)arg);
   22aca:	230e      	movs	r3, #14
   22acc:	18fb      	adds	r3, r7, r3
   22ace:	687a      	ldr	r2, [r7, #4]
   22ad0:	7812      	ldrb	r2, [r2, #0]
   22ad2:	701a      	strb	r2, [r3, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
   22ad4:	230e      	movs	r3, #14
   22ad6:	18fb      	adds	r3, r7, r3
   22ad8:	781b      	ldrb	r3, [r3, #0]
   22ada:	2b00      	cmp	r3, #0
   22adc:	d004      	beq.n	22ae8 <nm_drv_init+0x34>
   22ade:	230e      	movs	r3, #14
   22ae0:	18fb      	adds	r3, r7, r3
   22ae2:	781b      	ldrb	r3, [r3, #0]
   22ae4:	2b04      	cmp	r3, #4
   22ae6:	d908      	bls.n	22afa <nm_drv_init+0x46>
			u8Mode = M2M_WIFI_MODE_NORMAL;
   22ae8:	230e      	movs	r3, #14
   22aea:	18fb      	adds	r3, r7, r3
   22aec:	2201      	movs	r2, #1
   22aee:	701a      	strb	r2, [r3, #0]
   22af0:	e003      	b.n	22afa <nm_drv_init+0x46>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
   22af2:	230e      	movs	r3, #14
   22af4:	18fb      	adds	r3, r7, r3
   22af6:	2201      	movs	r2, #1
   22af8:	701a      	strb	r2, [r3, #0]
	}
	
	ret = nm_bus_iface_init(NULL);
   22afa:	230f      	movs	r3, #15
   22afc:	18fc      	adds	r4, r7, r3
   22afe:	2000      	movs	r0, #0
   22b00:	4b41      	ldr	r3, [pc, #260]	; (22c08 <nm_drv_init+0x154>)
   22b02:	4798      	blx	r3
   22b04:	0003      	movs	r3, r0
   22b06:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   22b08:	230f      	movs	r3, #15
   22b0a:	18fb      	adds	r3, r7, r3
   22b0c:	781b      	ldrb	r3, [r3, #0]
   22b0e:	b25b      	sxtb	r3, r3
   22b10:	2b00      	cmp	r3, #0
   22b12:	d00f      	beq.n	22b34 <nm_drv_init+0x80>
		M2M_ERR("[nmi start]: fail init bus\n");
   22b14:	2390      	movs	r3, #144	; 0x90
   22b16:	005a      	lsls	r2, r3, #1
   22b18:	493c      	ldr	r1, [pc, #240]	; (22c0c <nm_drv_init+0x158>)
   22b1a:	4b3d      	ldr	r3, [pc, #244]	; (22c10 <nm_drv_init+0x15c>)
   22b1c:	0018      	movs	r0, r3
   22b1e:	4b3d      	ldr	r3, [pc, #244]	; (22c14 <nm_drv_init+0x160>)
   22b20:	4798      	blx	r3
   22b22:	4b3d      	ldr	r3, [pc, #244]	; (22c18 <nm_drv_init+0x164>)
   22b24:	0018      	movs	r0, r3
   22b26:	4b3b      	ldr	r3, [pc, #236]	; (22c14 <nm_drv_init+0x160>)
   22b28:	4798      	blx	r3
   22b2a:	4b3c      	ldr	r3, [pc, #240]	; (22c1c <nm_drv_init+0x168>)
   22b2c:	0018      	movs	r0, r3
   22b2e:	4b39      	ldr	r3, [pc, #228]	; (22c14 <nm_drv_init+0x160>)
   22b30:	4798      	blx	r3
		goto ERR1;
   22b32:	e061      	b.n	22bf8 <nm_drv_init+0x144>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
   22b34:	4b3a      	ldr	r3, [pc, #232]	; (22c20 <nm_drv_init+0x16c>)
   22b36:	0018      	movs	r0, r3
   22b38:	4b36      	ldr	r3, [pc, #216]	; (22c14 <nm_drv_init+0x160>)
   22b3a:	4798      	blx	r3
   22b3c:	4b39      	ldr	r3, [pc, #228]	; (22c24 <nm_drv_init+0x170>)
   22b3e:	4798      	blx	r3
   22b40:	0002      	movs	r2, r0
   22b42:	4b39      	ldr	r3, [pc, #228]	; (22c28 <nm_drv_init+0x174>)
   22b44:	0011      	movs	r1, r2
   22b46:	0018      	movs	r0, r3
   22b48:	4b32      	ldr	r3, [pc, #200]	; (22c14 <nm_drv_init+0x160>)
   22b4a:	4798      	blx	r3
   22b4c:	4b33      	ldr	r3, [pc, #204]	; (22c1c <nm_drv_init+0x168>)
   22b4e:	0018      	movs	r0, r3
   22b50:	4b30      	ldr	r3, [pc, #192]	; (22c14 <nm_drv_init+0x160>)
   22b52:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
   22b54:	4b35      	ldr	r3, [pc, #212]	; (22c2c <nm_drv_init+0x178>)
   22b56:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
   22b58:	230f      	movs	r3, #15
   22b5a:	18fc      	adds	r4, r7, r3
   22b5c:	230e      	movs	r3, #14
   22b5e:	18fb      	adds	r3, r7, r3
   22b60:	781b      	ldrb	r3, [r3, #0]
   22b62:	0018      	movs	r0, r3
   22b64:	4b32      	ldr	r3, [pc, #200]	; (22c30 <nm_drv_init+0x17c>)
   22b66:	4798      	blx	r3
   22b68:	0003      	movs	r3, r0
   22b6a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   22b6c:	230f      	movs	r3, #15
   22b6e:	18fb      	adds	r3, r7, r3
   22b70:	781b      	ldrb	r3, [r3, #0]
   22b72:	b25b      	sxtb	r3, r3
   22b74:	2b00      	cmp	r3, #0
   22b76:	d13a      	bne.n	22bee <nm_drv_init+0x13a>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
   22b78:	230f      	movs	r3, #15
   22b7a:	18fc      	adds	r4, r7, r3
   22b7c:	230e      	movs	r3, #14
   22b7e:	18fb      	adds	r3, r7, r3
   22b80:	781b      	ldrb	r3, [r3, #0]
   22b82:	0018      	movs	r0, r3
   22b84:	4b2b      	ldr	r3, [pc, #172]	; (22c34 <nm_drv_init+0x180>)
   22b86:	4798      	blx	r3
   22b88:	0003      	movs	r3, r0
   22b8a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   22b8c:	230f      	movs	r3, #15
   22b8e:	18fb      	adds	r3, r7, r3
   22b90:	781b      	ldrb	r3, [r3, #0]
   22b92:	b25b      	sxtb	r3, r3
   22b94:	2b00      	cmp	r3, #0
   22b96:	d12c      	bne.n	22bf2 <nm_drv_init+0x13e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
   22b98:	230e      	movs	r3, #14
   22b9a:	18fb      	adds	r3, r7, r3
   22b9c:	781b      	ldrb	r3, [r3, #0]
   22b9e:	2b02      	cmp	r3, #2
   22ba0:	d02a      	beq.n	22bf8 <nm_drv_init+0x144>
   22ba2:	230e      	movs	r3, #14
   22ba4:	18fb      	adds	r3, r7, r3
   22ba6:	781b      	ldrb	r3, [r3, #0]
   22ba8:	2b03      	cmp	r3, #3
   22baa:	d025      	beq.n	22bf8 <nm_drv_init+0x144>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
   22bac:	230f      	movs	r3, #15
   22bae:	18fc      	adds	r4, r7, r3
   22bb0:	4b21      	ldr	r3, [pc, #132]	; (22c38 <nm_drv_init+0x184>)
   22bb2:	4798      	blx	r3
   22bb4:	0003      	movs	r3, r0
   22bb6:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   22bb8:	230f      	movs	r3, #15
   22bba:	18fb      	adds	r3, r7, r3
   22bbc:	781b      	ldrb	r3, [r3, #0]
   22bbe:	b25b      	sxtb	r3, r3
   22bc0:	2b00      	cmp	r3, #0
   22bc2:	d00f      	beq.n	22be4 <nm_drv_init+0x130>
		M2M_ERR("failed to enable interrupts..\n");
   22bc4:	23a7      	movs	r3, #167	; 0xa7
   22bc6:	005a      	lsls	r2, r3, #1
   22bc8:	4910      	ldr	r1, [pc, #64]	; (22c0c <nm_drv_init+0x158>)
   22bca:	4b11      	ldr	r3, [pc, #68]	; (22c10 <nm_drv_init+0x15c>)
   22bcc:	0018      	movs	r0, r3
   22bce:	4b11      	ldr	r3, [pc, #68]	; (22c14 <nm_drv_init+0x160>)
   22bd0:	4798      	blx	r3
   22bd2:	4b1a      	ldr	r3, [pc, #104]	; (22c3c <nm_drv_init+0x188>)
   22bd4:	0018      	movs	r0, r3
   22bd6:	4b0f      	ldr	r3, [pc, #60]	; (22c14 <nm_drv_init+0x160>)
   22bd8:	4798      	blx	r3
   22bda:	4b10      	ldr	r3, [pc, #64]	; (22c1c <nm_drv_init+0x168>)
   22bdc:	0018      	movs	r0, r3
   22bde:	4b0d      	ldr	r3, [pc, #52]	; (22c14 <nm_drv_init+0x160>)
   22be0:	4798      	blx	r3
		goto ERR2;
   22be2:	e007      	b.n	22bf4 <nm_drv_init+0x140>
	}
	return ret;
   22be4:	230f      	movs	r3, #15
   22be6:	18fb      	adds	r3, r7, r3
   22be8:	781b      	ldrb	r3, [r3, #0]
   22bea:	b25b      	sxtb	r3, r3
   22bec:	e008      	b.n	22c00 <nm_drv_init+0x14c>
		goto ERR2;
   22bee:	46c0      	nop			; (mov r8, r8)
   22bf0:	e000      	b.n	22bf4 <nm_drv_init+0x140>
		goto ERR2;
   22bf2:	46c0      	nop			; (mov r8, r8)
ERR2:
	nm_bus_iface_deinit();
   22bf4:	4b12      	ldr	r3, [pc, #72]	; (22c40 <nm_drv_init+0x18c>)
   22bf6:	4798      	blx	r3
ERR1:
	return ret;
   22bf8:	230f      	movs	r3, #15
   22bfa:	18fb      	adds	r3, r7, r3
   22bfc:	781b      	ldrb	r3, [r3, #0]
   22bfe:	b25b      	sxtb	r3, r3
}
   22c00:	0018      	movs	r0, r3
   22c02:	46bd      	mov	sp, r7
   22c04:	b005      	add	sp, #20
   22c06:	bd90      	pop	{r4, r7, pc}
   22c08:	00022615 	.word	0x00022615
   22c0c:	00039644 	.word	0x00039644
   22c10:	00039574 	.word	0x00039574
   22c14:	0001dc4d 	.word	0x0001dc4d
   22c18:	00039588 	.word	0x00039588
   22c1c:	000395a4 	.word	0x000395a4
   22c20:	000395a8 	.word	0x000395a8
   22c24:	00021fb1 	.word	0x00021fb1
   22c28:	000395b4 	.word	0x000395b4
   22c2c:	000244cd 	.word	0x000244cd
   22c30:	00022309 	.word	0x00022309
   22c34:	000224a1 	.word	0x000224a1
   22c38:	00021efd 	.word	0x00021efd
   22c3c:	000395c4 	.word	0x000395c4
   22c40:	00022649 	.word	0x00022649

00022c44 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
   22c44:	b590      	push	{r4, r7, lr}
   22c46:	b085      	sub	sp, #20
   22c48:	af00      	add	r7, sp, #0
   22c4a:	6078      	str	r0, [r7, #4]
	sint8 ret;

	ret = chip_deinit();
   22c4c:	230f      	movs	r3, #15
   22c4e:	18fc      	adds	r4, r7, r3
   22c50:	4b2e      	ldr	r3, [pc, #184]	; (22d0c <nm_drv_deinit+0xc8>)
   22c52:	4798      	blx	r3
   22c54:	0003      	movs	r3, r0
   22c56:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   22c58:	230f      	movs	r3, #15
   22c5a:	18fb      	adds	r3, r7, r3
   22c5c:	781b      	ldrb	r3, [r3, #0]
   22c5e:	b25b      	sxtb	r3, r3
   22c60:	2b00      	cmp	r3, #0
   22c62:	d010      	beq.n	22c86 <nm_drv_deinit+0x42>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
   22c64:	2366      	movs	r3, #102	; 0x66
   22c66:	33ff      	adds	r3, #255	; 0xff
   22c68:	001a      	movs	r2, r3
   22c6a:	4929      	ldr	r1, [pc, #164]	; (22d10 <nm_drv_deinit+0xcc>)
   22c6c:	4b29      	ldr	r3, [pc, #164]	; (22d14 <nm_drv_deinit+0xd0>)
   22c6e:	0018      	movs	r0, r3
   22c70:	4b29      	ldr	r3, [pc, #164]	; (22d18 <nm_drv_deinit+0xd4>)
   22c72:	4798      	blx	r3
   22c74:	4b29      	ldr	r3, [pc, #164]	; (22d1c <nm_drv_deinit+0xd8>)
   22c76:	0018      	movs	r0, r3
   22c78:	4b27      	ldr	r3, [pc, #156]	; (22d18 <nm_drv_deinit+0xd4>)
   22c7a:	4798      	blx	r3
   22c7c:	4b28      	ldr	r3, [pc, #160]	; (22d20 <nm_drv_deinit+0xdc>)
   22c7e:	0018      	movs	r0, r3
   22c80:	4b25      	ldr	r3, [pc, #148]	; (22d18 <nm_drv_deinit+0xd4>)
   22c82:	4798      	blx	r3
		goto ERR1;
   22c84:	e03a      	b.n	22cfc <nm_drv_deinit+0xb8>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
   22c86:	230f      	movs	r3, #15
   22c88:	18fc      	adds	r4, r7, r3
   22c8a:	2000      	movs	r0, #0
   22c8c:	4b25      	ldr	r3, [pc, #148]	; (22d24 <nm_drv_deinit+0xe0>)
   22c8e:	4798      	blx	r3
   22c90:	0003      	movs	r3, r0
   22c92:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   22c94:	230f      	movs	r3, #15
   22c96:	18fb      	adds	r3, r7, r3
   22c98:	781b      	ldrb	r3, [r3, #0]
   22c9a:	b25b      	sxtb	r3, r3
   22c9c:	2b00      	cmp	r3, #0
   22c9e:	d00f      	beq.n	22cc0 <nm_drv_deinit+0x7c>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
   22ca0:	23b6      	movs	r3, #182	; 0xb6
   22ca2:	005a      	lsls	r2, r3, #1
   22ca4:	491a      	ldr	r1, [pc, #104]	; (22d10 <nm_drv_deinit+0xcc>)
   22ca6:	4b1b      	ldr	r3, [pc, #108]	; (22d14 <nm_drv_deinit+0xd0>)
   22ca8:	0018      	movs	r0, r3
   22caa:	4b1b      	ldr	r3, [pc, #108]	; (22d18 <nm_drv_deinit+0xd4>)
   22cac:	4798      	blx	r3
   22cae:	4b1e      	ldr	r3, [pc, #120]	; (22d28 <nm_drv_deinit+0xe4>)
   22cb0:	0018      	movs	r0, r3
   22cb2:	4b19      	ldr	r3, [pc, #100]	; (22d18 <nm_drv_deinit+0xd4>)
   22cb4:	4798      	blx	r3
   22cb6:	4b1a      	ldr	r3, [pc, #104]	; (22d20 <nm_drv_deinit+0xdc>)
   22cb8:	0018      	movs	r0, r3
   22cba:	4b17      	ldr	r3, [pc, #92]	; (22d18 <nm_drv_deinit+0xd4>)
   22cbc:	4798      	blx	r3
		goto ERR1;
   22cbe:	e01d      	b.n	22cfc <nm_drv_deinit+0xb8>
	}

	ret = nm_bus_iface_deinit();
   22cc0:	230f      	movs	r3, #15
   22cc2:	18fc      	adds	r4, r7, r3
   22cc4:	4b19      	ldr	r3, [pc, #100]	; (22d2c <nm_drv_deinit+0xe8>)
   22cc6:	4798      	blx	r3
   22cc8:	0003      	movs	r3, r0
   22cca:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   22ccc:	230f      	movs	r3, #15
   22cce:	18fb      	adds	r3, r7, r3
   22cd0:	781b      	ldrb	r3, [r3, #0]
   22cd2:	b25b      	sxtb	r3, r3
   22cd4:	2b00      	cmp	r3, #0
   22cd6:	d00f      	beq.n	22cf8 <nm_drv_deinit+0xb4>
		M2M_ERR("[nmi stop]: fail init bus\n");
   22cd8:	23b9      	movs	r3, #185	; 0xb9
   22cda:	005a      	lsls	r2, r3, #1
   22cdc:	490c      	ldr	r1, [pc, #48]	; (22d10 <nm_drv_deinit+0xcc>)
   22cde:	4b0d      	ldr	r3, [pc, #52]	; (22d14 <nm_drv_deinit+0xd0>)
   22ce0:	0018      	movs	r0, r3
   22ce2:	4b0d      	ldr	r3, [pc, #52]	; (22d18 <nm_drv_deinit+0xd4>)
   22ce4:	4798      	blx	r3
   22ce6:	4b12      	ldr	r3, [pc, #72]	; (22d30 <nm_drv_deinit+0xec>)
   22ce8:	0018      	movs	r0, r3
   22cea:	4b0b      	ldr	r3, [pc, #44]	; (22d18 <nm_drv_deinit+0xd4>)
   22cec:	4798      	blx	r3
   22cee:	4b0c      	ldr	r3, [pc, #48]	; (22d20 <nm_drv_deinit+0xdc>)
   22cf0:	0018      	movs	r0, r3
   22cf2:	4b09      	ldr	r3, [pc, #36]	; (22d18 <nm_drv_deinit+0xd4>)
   22cf4:	4798      	blx	r3
		goto ERR1;
   22cf6:	e001      	b.n	22cfc <nm_drv_deinit+0xb8>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
   22cf8:	4b0e      	ldr	r3, [pc, #56]	; (22d34 <nm_drv_deinit+0xf0>)
   22cfa:	4798      	blx	r3
#endif

ERR1:
	return ret;
   22cfc:	230f      	movs	r3, #15
   22cfe:	18fb      	adds	r3, r7, r3
   22d00:	781b      	ldrb	r3, [r3, #0]
   22d02:	b25b      	sxtb	r3, r3
}
   22d04:	0018      	movs	r0, r3
   22d06:	46bd      	mov	sp, r7
   22d08:	b005      	add	sp, #20
   22d0a:	bd90      	pop	{r4, r7, pc}
   22d0c:	00022555 	.word	0x00022555
   22d10:	00039650 	.word	0x00039650
   22d14:	00039574 	.word	0x00039574
   22d18:	0001dc4d 	.word	0x0001dc4d
   22d1c:	000395e4 	.word	0x000395e4
   22d20:	000395a4 	.word	0x000395a4
   22d24:	00025975 	.word	0x00025975
   22d28:	00039604 	.word	0x00039604
   22d2c:	00022649 	.word	0x00022649
   22d30:	00039628 	.word	0x00039628
   22d34:	00024619 	.word	0x00024619

00022d38 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
   22d38:	b580      	push	{r7, lr}
   22d3a:	b086      	sub	sp, #24
   22d3c:	af00      	add	r7, sp, #0
   22d3e:	6078      	str	r0, [r7, #4]
   22d40:	000a      	movs	r2, r1
   22d42:	1cbb      	adds	r3, r7, #2
   22d44:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
   22d46:	230c      	movs	r3, #12
   22d48:	18fb      	adds	r3, r7, r3
   22d4a:	2200      	movs	r2, #0
   22d4c:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = b;
   22d4e:	230c      	movs	r3, #12
   22d50:	18fb      	adds	r3, r7, r3
   22d52:	687a      	ldr	r2, [r7, #4]
   22d54:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   22d56:	230c      	movs	r3, #12
   22d58:	18fb      	adds	r3, r7, r3
   22d5a:	1cba      	adds	r2, r7, #2
   22d5c:	8812      	ldrh	r2, [r2, #0]
   22d5e:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   22d60:	230c      	movs	r3, #12
   22d62:	18fb      	adds	r3, r7, r3
   22d64:	0019      	movs	r1, r3
   22d66:	2003      	movs	r0, #3
   22d68:	4b03      	ldr	r3, [pc, #12]	; (22d78 <nmi_spi_read+0x40>)
   22d6a:	4798      	blx	r3
   22d6c:	0003      	movs	r3, r0
}
   22d6e:	0018      	movs	r0, r3
   22d70:	46bd      	mov	sp, r7
   22d72:	b006      	add	sp, #24
   22d74:	bd80      	pop	{r7, pc}
   22d76:	46c0      	nop			; (mov r8, r8)
   22d78:	000204e5 	.word	0x000204e5

00022d7c <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
   22d7c:	b580      	push	{r7, lr}
   22d7e:	b086      	sub	sp, #24
   22d80:	af00      	add	r7, sp, #0
   22d82:	6078      	str	r0, [r7, #4]
   22d84:	000a      	movs	r2, r1
   22d86:	1cbb      	adds	r3, r7, #2
   22d88:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
   22d8a:	230c      	movs	r3, #12
   22d8c:	18fb      	adds	r3, r7, r3
   22d8e:	687a      	ldr	r2, [r7, #4]
   22d90:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = NULL;
   22d92:	230c      	movs	r3, #12
   22d94:	18fb      	adds	r3, r7, r3
   22d96:	2200      	movs	r2, #0
   22d98:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   22d9a:	230c      	movs	r3, #12
   22d9c:	18fb      	adds	r3, r7, r3
   22d9e:	1cba      	adds	r2, r7, #2
   22da0:	8812      	ldrh	r2, [r2, #0]
   22da2:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   22da4:	230c      	movs	r3, #12
   22da6:	18fb      	adds	r3, r7, r3
   22da8:	0019      	movs	r1, r3
   22daa:	2003      	movs	r0, #3
   22dac:	4b03      	ldr	r3, [pc, #12]	; (22dbc <nmi_spi_write+0x40>)
   22dae:	4798      	blx	r3
   22db0:	0003      	movs	r3, r0
}
   22db2:	0018      	movs	r0, r3
   22db4:	46bd      	mov	sp, r7
   22db6:	b006      	add	sp, #24
   22db8:	bd80      	pop	{r7, pc}
   22dba:	46c0      	nop			; (mov r8, r8)
   22dbc:	000204e5 	.word	0x000204e5

00022dc0 <nmi_spi_rw>:
#ifndef USE_OLD_SPI_SW
static sint8 nmi_spi_rw(uint8 *bin,uint8* bout,uint16 sz)
{
   22dc0:	b580      	push	{r7, lr}
   22dc2:	b088      	sub	sp, #32
   22dc4:	af00      	add	r7, sp, #0
   22dc6:	60f8      	str	r0, [r7, #12]
   22dc8:	60b9      	str	r1, [r7, #8]
   22dca:	1dbb      	adds	r3, r7, #6
   22dcc:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = bin;
   22dce:	2314      	movs	r3, #20
   22dd0:	18fb      	adds	r3, r7, r3
   22dd2:	68fa      	ldr	r2, [r7, #12]
   22dd4:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = bout;
   22dd6:	2314      	movs	r3, #20
   22dd8:	18fb      	adds	r3, r7, r3
   22dda:	68ba      	ldr	r2, [r7, #8]
   22ddc:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   22dde:	2314      	movs	r3, #20
   22de0:	18fb      	adds	r3, r7, r3
   22de2:	1dba      	adds	r2, r7, #6
   22de4:	8812      	ldrh	r2, [r2, #0]
   22de6:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);	
   22de8:	2314      	movs	r3, #20
   22dea:	18fb      	adds	r3, r7, r3
   22dec:	0019      	movs	r1, r3
   22dee:	2003      	movs	r0, #3
   22df0:	4b03      	ldr	r3, [pc, #12]	; (22e00 <nmi_spi_rw+0x40>)
   22df2:	4798      	blx	r3
   22df4:	0003      	movs	r3, r0
}
   22df6:	0018      	movs	r0, r3
   22df8:	46bd      	mov	sp, r7
   22dfa:	b008      	add	sp, #32
   22dfc:	bd80      	pop	{r7, pc}
   22dfe:	46c0      	nop			; (mov r8, r8)
   22e00:	000204e5 	.word	0x000204e5

00022e04 <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
   22e04:	b580      	push	{r7, lr}
   22e06:	b082      	sub	sp, #8
   22e08:	af00      	add	r7, sp, #0
   22e0a:	0002      	movs	r2, r0
   22e0c:	1dfb      	adds	r3, r7, #7
   22e0e:	701a      	strb	r2, [r3, #0]
   22e10:	1dbb      	adds	r3, r7, #6
   22e12:	1c0a      	adds	r2, r1, #0
   22e14:	701a      	strb	r2, [r3, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
   22e16:	1dfb      	adds	r3, r7, #7
   22e18:	781b      	ldrb	r3, [r3, #0]
   22e1a:	005a      	lsls	r2, r3, #1
   22e1c:	1dbb      	adds	r3, r7, #6
   22e1e:	781b      	ldrb	r3, [r3, #0]
   22e20:	4053      	eors	r3, r2
   22e22:	4a03      	ldr	r2, [pc, #12]	; (22e30 <crc7_byte+0x2c>)
   22e24:	5cd3      	ldrb	r3, [r2, r3]
}
   22e26:	0018      	movs	r0, r3
   22e28:	46bd      	mov	sp, r7
   22e2a:	b002      	add	sp, #8
   22e2c:	bd80      	pop	{r7, pc}
   22e2e:	46c0      	nop			; (mov r8, r8)
   22e30:	00039660 	.word	0x00039660

00022e34 <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
   22e34:	b590      	push	{r4, r7, lr}
   22e36:	b085      	sub	sp, #20
   22e38:	af00      	add	r7, sp, #0
   22e3a:	60b9      	str	r1, [r7, #8]
   22e3c:	607a      	str	r2, [r7, #4]
   22e3e:	230f      	movs	r3, #15
   22e40:	18fb      	adds	r3, r7, r3
   22e42:	1c02      	adds	r2, r0, #0
   22e44:	701a      	strb	r2, [r3, #0]
	while (len--)
   22e46:	e00e      	b.n	22e66 <crc7+0x32>
		crc = crc7_byte(crc, *buffer++);
   22e48:	68bb      	ldr	r3, [r7, #8]
   22e4a:	1c5a      	adds	r2, r3, #1
   22e4c:	60ba      	str	r2, [r7, #8]
   22e4e:	781a      	ldrb	r2, [r3, #0]
   22e50:	230f      	movs	r3, #15
   22e52:	18fc      	adds	r4, r7, r3
   22e54:	230f      	movs	r3, #15
   22e56:	18fb      	adds	r3, r7, r3
   22e58:	781b      	ldrb	r3, [r3, #0]
   22e5a:	0011      	movs	r1, r2
   22e5c:	0018      	movs	r0, r3
   22e5e:	4b08      	ldr	r3, [pc, #32]	; (22e80 <crc7+0x4c>)
   22e60:	4798      	blx	r3
   22e62:	0003      	movs	r3, r0
   22e64:	7023      	strb	r3, [r4, #0]
	while (len--)
   22e66:	687b      	ldr	r3, [r7, #4]
   22e68:	1e5a      	subs	r2, r3, #1
   22e6a:	607a      	str	r2, [r7, #4]
   22e6c:	2b00      	cmp	r3, #0
   22e6e:	d1eb      	bne.n	22e48 <crc7+0x14>
	return crc;
   22e70:	230f      	movs	r3, #15
   22e72:	18fb      	adds	r3, r7, r3
   22e74:	781b      	ldrb	r3, [r3, #0]
}
   22e76:	0018      	movs	r0, r3
   22e78:	46bd      	mov	sp, r7
   22e7a:	b005      	add	sp, #20
   22e7c:	bd90      	pop	{r4, r7, pc}
   22e7e:	46c0      	nop			; (mov r8, r8)
   22e80:	00022e05 	.word	0x00022e05

00022e84 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
   22e84:	b590      	push	{r4, r7, lr}
   22e86:	b089      	sub	sp, #36	; 0x24
   22e88:	af00      	add	r7, sp, #0
   22e8a:	60b9      	str	r1, [r7, #8]
   22e8c:	607a      	str	r2, [r7, #4]
   22e8e:	603b      	str	r3, [r7, #0]
   22e90:	230f      	movs	r3, #15
   22e92:	18fb      	adds	r3, r7, r3
   22e94:	1c02      	adds	r2, r0, #0
   22e96:	701a      	strb	r2, [r3, #0]
	uint8 bc[9];
	uint8 len = 5;
   22e98:	231f      	movs	r3, #31
   22e9a:	18fb      	adds	r3, r7, r3
   22e9c:	2205      	movs	r2, #5
   22e9e:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   22ea0:	231e      	movs	r3, #30
   22ea2:	18fb      	adds	r3, r7, r3
   22ea4:	2201      	movs	r2, #1
   22ea6:	701a      	strb	r2, [r3, #0]

	bc[0] = cmd;
   22ea8:	2314      	movs	r3, #20
   22eaa:	18fb      	adds	r3, r7, r3
   22eac:	220f      	movs	r2, #15
   22eae:	18ba      	adds	r2, r7, r2
   22eb0:	7812      	ldrb	r2, [r2, #0]
   22eb2:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   22eb4:	230f      	movs	r3, #15
   22eb6:	18fb      	adds	r3, r7, r3
   22eb8:	781b      	ldrb	r3, [r3, #0]
   22eba:	3bc1      	subs	r3, #193	; 0xc1
   22ebc:	2b0e      	cmp	r3, #14
   22ebe:	d900      	bls.n	22ec2 <spi_cmd+0x3e>
   22ec0:	e11b      	b.n	230fa <spi_cmd+0x276>
   22ec2:	009a      	lsls	r2, r3, #2
   22ec4:	4bb6      	ldr	r3, [pc, #728]	; (231a0 <spi_cmd+0x31c>)
   22ec6:	18d3      	adds	r3, r2, r3
   22ec8:	681b      	ldr	r3, [r3, #0]
   22eca:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
   22ecc:	68bb      	ldr	r3, [r7, #8]
   22ece:	0c1b      	lsrs	r3, r3, #16
   22ed0:	b2da      	uxtb	r2, r3
   22ed2:	2314      	movs	r3, #20
   22ed4:	18fb      	adds	r3, r7, r3
   22ed6:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   22ed8:	68bb      	ldr	r3, [r7, #8]
   22eda:	0a1b      	lsrs	r3, r3, #8
   22edc:	b2da      	uxtb	r2, r3
   22ede:	2314      	movs	r3, #20
   22ee0:	18fb      	adds	r3, r7, r3
   22ee2:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   22ee4:	68bb      	ldr	r3, [r7, #8]
   22ee6:	b2da      	uxtb	r2, r3
   22ee8:	2314      	movs	r3, #20
   22eea:	18fb      	adds	r3, r7, r3
   22eec:	70da      	strb	r2, [r3, #3]
		len = 5;
   22eee:	231f      	movs	r3, #31
   22ef0:	18fb      	adds	r3, r7, r3
   22ef2:	2205      	movs	r2, #5
   22ef4:	701a      	strb	r2, [r3, #0]
		break;
   22ef6:	e105      	b.n	23104 <spi_cmd+0x280>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
   22ef8:	68bb      	ldr	r3, [r7, #8]
   22efa:	0a1b      	lsrs	r3, r3, #8
   22efc:	b2da      	uxtb	r2, r3
   22efe:	2314      	movs	r3, #20
   22f00:	18fb      	adds	r3, r7, r3
   22f02:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
   22f04:	2330      	movs	r3, #48	; 0x30
   22f06:	18fb      	adds	r3, r7, r3
   22f08:	781b      	ldrb	r3, [r3, #0]
   22f0a:	2b00      	cmp	r3, #0
   22f0c:	d009      	beq.n	22f22 <spi_cmd+0x9e>
   22f0e:	2314      	movs	r3, #20
   22f10:	18fb      	adds	r3, r7, r3
   22f12:	785b      	ldrb	r3, [r3, #1]
   22f14:	2280      	movs	r2, #128	; 0x80
   22f16:	4252      	negs	r2, r2
   22f18:	4313      	orrs	r3, r2
   22f1a:	b2da      	uxtb	r2, r3
   22f1c:	2314      	movs	r3, #20
   22f1e:	18fb      	adds	r3, r7, r3
   22f20:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)adr;
   22f22:	68bb      	ldr	r3, [r7, #8]
   22f24:	b2da      	uxtb	r2, r3
   22f26:	2314      	movs	r3, #20
   22f28:	18fb      	adds	r3, r7, r3
   22f2a:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   22f2c:	2314      	movs	r3, #20
   22f2e:	18fb      	adds	r3, r7, r3
   22f30:	2200      	movs	r2, #0
   22f32:	70da      	strb	r2, [r3, #3]
		len = 5;
   22f34:	231f      	movs	r3, #31
   22f36:	18fb      	adds	r3, r7, r3
   22f38:	2205      	movs	r2, #5
   22f3a:	701a      	strb	r2, [r3, #0]
		break;
   22f3c:	e0e2      	b.n	23104 <spi_cmd+0x280>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
   22f3e:	2314      	movs	r3, #20
   22f40:	18fb      	adds	r3, r7, r3
   22f42:	2200      	movs	r2, #0
   22f44:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   22f46:	2314      	movs	r3, #20
   22f48:	18fb      	adds	r3, r7, r3
   22f4a:	2200      	movs	r2, #0
   22f4c:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   22f4e:	2314      	movs	r3, #20
   22f50:	18fb      	adds	r3, r7, r3
   22f52:	2200      	movs	r2, #0
   22f54:	70da      	strb	r2, [r3, #3]
		len = 5;
   22f56:	231f      	movs	r3, #31
   22f58:	18fb      	adds	r3, r7, r3
   22f5a:	2205      	movs	r2, #5
   22f5c:	701a      	strb	r2, [r3, #0]
		break;
   22f5e:	e0d1      	b.n	23104 <spi_cmd+0x280>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
   22f60:	2314      	movs	r3, #20
   22f62:	18fb      	adds	r3, r7, r3
   22f64:	2200      	movs	r2, #0
   22f66:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   22f68:	2314      	movs	r3, #20
   22f6a:	18fb      	adds	r3, r7, r3
   22f6c:	2200      	movs	r2, #0
   22f6e:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   22f70:	2314      	movs	r3, #20
   22f72:	18fb      	adds	r3, r7, r3
   22f74:	2200      	movs	r2, #0
   22f76:	70da      	strb	r2, [r3, #3]
		len = 5;
   22f78:	231f      	movs	r3, #31
   22f7a:	18fb      	adds	r3, r7, r3
   22f7c:	2205      	movs	r2, #5
   22f7e:	701a      	strb	r2, [r3, #0]
		break;
   22f80:	e0c0      	b.n	23104 <spi_cmd+0x280>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
   22f82:	2314      	movs	r3, #20
   22f84:	18fb      	adds	r3, r7, r3
   22f86:	22ff      	movs	r2, #255	; 0xff
   22f88:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
   22f8a:	2314      	movs	r3, #20
   22f8c:	18fb      	adds	r3, r7, r3
   22f8e:	22ff      	movs	r2, #255	; 0xff
   22f90:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
   22f92:	2314      	movs	r3, #20
   22f94:	18fb      	adds	r3, r7, r3
   22f96:	22ff      	movs	r2, #255	; 0xff
   22f98:	70da      	strb	r2, [r3, #3]
		len = 5;
   22f9a:	231f      	movs	r3, #31
   22f9c:	18fb      	adds	r3, r7, r3
   22f9e:	2205      	movs	r2, #5
   22fa0:	701a      	strb	r2, [r3, #0]
		break;
   22fa2:	e0af      	b.n	23104 <spi_cmd+0x280>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
   22fa4:	68bb      	ldr	r3, [r7, #8]
   22fa6:	0c1b      	lsrs	r3, r3, #16
   22fa8:	b2da      	uxtb	r2, r3
   22faa:	2314      	movs	r3, #20
   22fac:	18fb      	adds	r3, r7, r3
   22fae:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   22fb0:	68bb      	ldr	r3, [r7, #8]
   22fb2:	0a1b      	lsrs	r3, r3, #8
   22fb4:	b2da      	uxtb	r2, r3
   22fb6:	2314      	movs	r3, #20
   22fb8:	18fb      	adds	r3, r7, r3
   22fba:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   22fbc:	68bb      	ldr	r3, [r7, #8]
   22fbe:	b2da      	uxtb	r2, r3
   22fc0:	2314      	movs	r3, #20
   22fc2:	18fb      	adds	r3, r7, r3
   22fc4:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 8);
   22fc6:	683b      	ldr	r3, [r7, #0]
   22fc8:	0a1b      	lsrs	r3, r3, #8
   22fca:	b2da      	uxtb	r2, r3
   22fcc:	2314      	movs	r3, #20
   22fce:	18fb      	adds	r3, r7, r3
   22fd0:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz);
   22fd2:	683b      	ldr	r3, [r7, #0]
   22fd4:	b2da      	uxtb	r2, r3
   22fd6:	2314      	movs	r3, #20
   22fd8:	18fb      	adds	r3, r7, r3
   22fda:	715a      	strb	r2, [r3, #5]
		len = 7;
   22fdc:	231f      	movs	r3, #31
   22fde:	18fb      	adds	r3, r7, r3
   22fe0:	2207      	movs	r2, #7
   22fe2:	701a      	strb	r2, [r3, #0]
		break;
   22fe4:	e08e      	b.n	23104 <spi_cmd+0x280>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
   22fe6:	68bb      	ldr	r3, [r7, #8]
   22fe8:	0c1b      	lsrs	r3, r3, #16
   22fea:	b2da      	uxtb	r2, r3
   22fec:	2314      	movs	r3, #20
   22fee:	18fb      	adds	r3, r7, r3
   22ff0:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   22ff2:	68bb      	ldr	r3, [r7, #8]
   22ff4:	0a1b      	lsrs	r3, r3, #8
   22ff6:	b2da      	uxtb	r2, r3
   22ff8:	2314      	movs	r3, #20
   22ffa:	18fb      	adds	r3, r7, r3
   22ffc:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   22ffe:	68bb      	ldr	r3, [r7, #8]
   23000:	b2da      	uxtb	r2, r3
   23002:	2314      	movs	r3, #20
   23004:	18fb      	adds	r3, r7, r3
   23006:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 16);
   23008:	683b      	ldr	r3, [r7, #0]
   2300a:	0c1b      	lsrs	r3, r3, #16
   2300c:	b2da      	uxtb	r2, r3
   2300e:	2314      	movs	r3, #20
   23010:	18fb      	adds	r3, r7, r3
   23012:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz >> 8);
   23014:	683b      	ldr	r3, [r7, #0]
   23016:	0a1b      	lsrs	r3, r3, #8
   23018:	b2da      	uxtb	r2, r3
   2301a:	2314      	movs	r3, #20
   2301c:	18fb      	adds	r3, r7, r3
   2301e:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(sz);
   23020:	683b      	ldr	r3, [r7, #0]
   23022:	b2da      	uxtb	r2, r3
   23024:	2314      	movs	r3, #20
   23026:	18fb      	adds	r3, r7, r3
   23028:	719a      	strb	r2, [r3, #6]
		len = 8;
   2302a:	231f      	movs	r3, #31
   2302c:	18fb      	adds	r3, r7, r3
   2302e:	2208      	movs	r2, #8
   23030:	701a      	strb	r2, [r3, #0]
		break;
   23032:	e067      	b.n	23104 <spi_cmd+0x280>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
   23034:	68bb      	ldr	r3, [r7, #8]
   23036:	0a1b      	lsrs	r3, r3, #8
   23038:	b2da      	uxtb	r2, r3
   2303a:	2314      	movs	r3, #20
   2303c:	18fb      	adds	r3, r7, r3
   2303e:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
   23040:	2330      	movs	r3, #48	; 0x30
   23042:	18fb      	adds	r3, r7, r3
   23044:	781b      	ldrb	r3, [r3, #0]
   23046:	2b00      	cmp	r3, #0
   23048:	d009      	beq.n	2305e <spi_cmd+0x1da>
   2304a:	2314      	movs	r3, #20
   2304c:	18fb      	adds	r3, r7, r3
   2304e:	785b      	ldrb	r3, [r3, #1]
   23050:	2280      	movs	r2, #128	; 0x80
   23052:	4252      	negs	r2, r2
   23054:	4313      	orrs	r3, r2
   23056:	b2da      	uxtb	r2, r3
   23058:	2314      	movs	r3, #20
   2305a:	18fb      	adds	r3, r7, r3
   2305c:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr);
   2305e:	68bb      	ldr	r3, [r7, #8]
   23060:	b2da      	uxtb	r2, r3
   23062:	2314      	movs	r3, #20
   23064:	18fb      	adds	r3, r7, r3
   23066:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
   23068:	687b      	ldr	r3, [r7, #4]
   2306a:	0e1b      	lsrs	r3, r3, #24
   2306c:	b2da      	uxtb	r2, r3
   2306e:	2314      	movs	r3, #20
   23070:	18fb      	adds	r3, r7, r3
   23072:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
   23074:	687b      	ldr	r3, [r7, #4]
   23076:	0c1b      	lsrs	r3, r3, #16
   23078:	b2da      	uxtb	r2, r3
   2307a:	2314      	movs	r3, #20
   2307c:	18fb      	adds	r3, r7, r3
   2307e:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
   23080:	687b      	ldr	r3, [r7, #4]
   23082:	0a1b      	lsrs	r3, r3, #8
   23084:	b2da      	uxtb	r2, r3
   23086:	2314      	movs	r3, #20
   23088:	18fb      	adds	r3, r7, r3
   2308a:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data);
   2308c:	687b      	ldr	r3, [r7, #4]
   2308e:	b2da      	uxtb	r2, r3
   23090:	2314      	movs	r3, #20
   23092:	18fb      	adds	r3, r7, r3
   23094:	719a      	strb	r2, [r3, #6]
		len = 8;
   23096:	231f      	movs	r3, #31
   23098:	18fb      	adds	r3, r7, r3
   2309a:	2208      	movs	r2, #8
   2309c:	701a      	strb	r2, [r3, #0]
		break;
   2309e:	e031      	b.n	23104 <spi_cmd+0x280>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
   230a0:	68bb      	ldr	r3, [r7, #8]
   230a2:	0c1b      	lsrs	r3, r3, #16
   230a4:	b2da      	uxtb	r2, r3
   230a6:	2314      	movs	r3, #20
   230a8:	18fb      	adds	r3, r7, r3
   230aa:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   230ac:	68bb      	ldr	r3, [r7, #8]
   230ae:	0a1b      	lsrs	r3, r3, #8
   230b0:	b2da      	uxtb	r2, r3
   230b2:	2314      	movs	r3, #20
   230b4:	18fb      	adds	r3, r7, r3
   230b6:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(adr);
   230b8:	68bb      	ldr	r3, [r7, #8]
   230ba:	b2da      	uxtb	r2, r3
   230bc:	2314      	movs	r3, #20
   230be:	18fb      	adds	r3, r7, r3
   230c0:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
   230c2:	687b      	ldr	r3, [r7, #4]
   230c4:	0e1b      	lsrs	r3, r3, #24
   230c6:	b2da      	uxtb	r2, r3
   230c8:	2314      	movs	r3, #20
   230ca:	18fb      	adds	r3, r7, r3
   230cc:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
   230ce:	687b      	ldr	r3, [r7, #4]
   230d0:	0c1b      	lsrs	r3, r3, #16
   230d2:	b2da      	uxtb	r2, r3
   230d4:	2314      	movs	r3, #20
   230d6:	18fb      	adds	r3, r7, r3
   230d8:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
   230da:	687b      	ldr	r3, [r7, #4]
   230dc:	0a1b      	lsrs	r3, r3, #8
   230de:	b2da      	uxtb	r2, r3
   230e0:	2314      	movs	r3, #20
   230e2:	18fb      	adds	r3, r7, r3
   230e4:	719a      	strb	r2, [r3, #6]
		bc[7] = (uint8)(u32data);
   230e6:	687b      	ldr	r3, [r7, #4]
   230e8:	b2da      	uxtb	r2, r3
   230ea:	2314      	movs	r3, #20
   230ec:	18fb      	adds	r3, r7, r3
   230ee:	71da      	strb	r2, [r3, #7]
		len = 9;
   230f0:	231f      	movs	r3, #31
   230f2:	18fb      	adds	r3, r7, r3
   230f4:	2209      	movs	r2, #9
   230f6:	701a      	strb	r2, [r3, #0]
		break;
   230f8:	e004      	b.n	23104 <spi_cmd+0x280>
	default:
		result = N_FAIL;
   230fa:	231e      	movs	r3, #30
   230fc:	18fb      	adds	r3, r7, r3
   230fe:	2200      	movs	r2, #0
   23100:	701a      	strb	r2, [r3, #0]
		break;
   23102:	46c0      	nop			; (mov r8, r8)
	}

	if (result) {
   23104:	231e      	movs	r3, #30
   23106:	18fb      	adds	r3, r7, r3
   23108:	781b      	ldrb	r3, [r3, #0]
   2310a:	b25b      	sxtb	r3, r3
   2310c:	2b00      	cmp	r3, #0
   2310e:	d03f      	beq.n	23190 <spi_cmd+0x30c>
		if (!gu8Crc_off)
   23110:	4b24      	ldr	r3, [pc, #144]	; (231a4 <spi_cmd+0x320>)
   23112:	781b      	ldrb	r3, [r3, #0]
   23114:	2b00      	cmp	r3, #0
   23116:	d115      	bne.n	23144 <spi_cmd+0x2c0>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
   23118:	231f      	movs	r3, #31
   2311a:	18fb      	adds	r3, r7, r3
   2311c:	781b      	ldrb	r3, [r3, #0]
   2311e:	1e5c      	subs	r4, r3, #1
   23120:	231f      	movs	r3, #31
   23122:	18fb      	adds	r3, r7, r3
   23124:	781b      	ldrb	r3, [r3, #0]
   23126:	3b01      	subs	r3, #1
   23128:	001a      	movs	r2, r3
   2312a:	2314      	movs	r3, #20
   2312c:	18fb      	adds	r3, r7, r3
   2312e:	0019      	movs	r1, r3
   23130:	207f      	movs	r0, #127	; 0x7f
   23132:	4b1d      	ldr	r3, [pc, #116]	; (231a8 <spi_cmd+0x324>)
   23134:	4798      	blx	r3
   23136:	0003      	movs	r3, r0
   23138:	18db      	adds	r3, r3, r3
   2313a:	b2da      	uxtb	r2, r3
   2313c:	2314      	movs	r3, #20
   2313e:	18fb      	adds	r3, r7, r3
   23140:	551a      	strb	r2, [r3, r4]
   23142:	e006      	b.n	23152 <spi_cmd+0x2ce>
		else
			len-=1;
   23144:	231f      	movs	r3, #31
   23146:	18fb      	adds	r3, r7, r3
   23148:	221f      	movs	r2, #31
   2314a:	18ba      	adds	r2, r7, r2
   2314c:	7812      	ldrb	r2, [r2, #0]
   2314e:	3a01      	subs	r2, #1
   23150:	701a      	strb	r2, [r3, #0]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
   23152:	231f      	movs	r3, #31
   23154:	18fb      	adds	r3, r7, r3
   23156:	781b      	ldrb	r3, [r3, #0]
   23158:	b29a      	uxth	r2, r3
   2315a:	2314      	movs	r3, #20
   2315c:	18fb      	adds	r3, r7, r3
   2315e:	0011      	movs	r1, r2
   23160:	0018      	movs	r0, r3
   23162:	4b12      	ldr	r3, [pc, #72]	; (231ac <spi_cmd+0x328>)
   23164:	4798      	blx	r3
   23166:	1e03      	subs	r3, r0, #0
   23168:	d012      	beq.n	23190 <spi_cmd+0x30c>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   2316a:	2390      	movs	r3, #144	; 0x90
   2316c:	005a      	lsls	r2, r3, #1
   2316e:	4910      	ldr	r1, [pc, #64]	; (231b0 <spi_cmd+0x32c>)
   23170:	4b10      	ldr	r3, [pc, #64]	; (231b4 <spi_cmd+0x330>)
   23172:	0018      	movs	r0, r3
   23174:	4b10      	ldr	r3, [pc, #64]	; (231b8 <spi_cmd+0x334>)
   23176:	4798      	blx	r3
   23178:	4b10      	ldr	r3, [pc, #64]	; (231bc <spi_cmd+0x338>)
   2317a:	0018      	movs	r0, r3
   2317c:	4b0e      	ldr	r3, [pc, #56]	; (231b8 <spi_cmd+0x334>)
   2317e:	4798      	blx	r3
   23180:	4b0f      	ldr	r3, [pc, #60]	; (231c0 <spi_cmd+0x33c>)
   23182:	0018      	movs	r0, r3
   23184:	4b0c      	ldr	r3, [pc, #48]	; (231b8 <spi_cmd+0x334>)
   23186:	4798      	blx	r3
			result = N_FAIL;
   23188:	231e      	movs	r3, #30
   2318a:	18fb      	adds	r3, r7, r3
   2318c:	2200      	movs	r2, #0
   2318e:	701a      	strb	r2, [r3, #0]
		}
	}

	return result;
   23190:	231e      	movs	r3, #30
   23192:	18fb      	adds	r3, r7, r3
   23194:	781b      	ldrb	r3, [r3, #0]
   23196:	b25b      	sxtb	r3, r3
}
   23198:	0018      	movs	r0, r3
   2319a:	46bd      	mov	sp, r7
   2319c:	b009      	add	sp, #36	; 0x24
   2319e:	bd90      	pop	{r4, r7, pc}
   231a0:	00039cd8 	.word	0x00039cd8
   231a4:	20003ccc 	.word	0x20003ccc
   231a8:	00022e35 	.word	0x00022e35
   231ac:	00022d7d 	.word	0x00022d7d
   231b0:	00039d50 	.word	0x00039d50
   231b4:	00039760 	.word	0x00039760
   231b8:	0001dc4d 	.word	0x0001dc4d
   231bc:	00039774 	.word	0x00039774
   231c0:	000397a0 	.word	0x000397a0

000231c4 <spi_data_rsp>:

static sint8 spi_data_rsp(uint8 cmd)
{
   231c4:	b590      	push	{r4, r7, lr}
   231c6:	b085      	sub	sp, #20
   231c8:	af00      	add	r7, sp, #0
   231ca:	0002      	movs	r2, r0
   231cc:	1dfb      	adds	r3, r7, #7
   231ce:	701a      	strb	r2, [r3, #0]
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;
   231d0:	230e      	movs	r3, #14
   231d2:	18fb      	adds	r3, r7, r3
   231d4:	2201      	movs	r2, #1
   231d6:	701a      	strb	r2, [r3, #0]

    if (!gu8Crc_off)
   231d8:	4b32      	ldr	r3, [pc, #200]	; (232a4 <spi_data_rsp+0xe0>)
   231da:	781b      	ldrb	r3, [r3, #0]
   231dc:	2b00      	cmp	r3, #0
   231de:	d104      	bne.n	231ea <spi_data_rsp+0x26>
		len = 2;
   231e0:	230f      	movs	r3, #15
   231e2:	18fb      	adds	r3, r7, r3
   231e4:	2202      	movs	r2, #2
   231e6:	701a      	strb	r2, [r3, #0]
   231e8:	e003      	b.n	231f2 <spi_data_rsp+0x2e>
	else
		len = 3;
   231ea:	230f      	movs	r3, #15
   231ec:	18fb      	adds	r3, r7, r3
   231ee:	2203      	movs	r2, #3
   231f0:	701a      	strb	r2, [r3, #0]

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
   231f2:	230f      	movs	r3, #15
   231f4:	18fb      	adds	r3, r7, r3
   231f6:	781b      	ldrb	r3, [r3, #0]
   231f8:	b29a      	uxth	r2, r3
   231fa:	2308      	movs	r3, #8
   231fc:	18fb      	adds	r3, r7, r3
   231fe:	0011      	movs	r1, r2
   23200:	0018      	movs	r0, r3
   23202:	4b29      	ldr	r3, [pc, #164]	; (232a8 <spi_data_rsp+0xe4>)
   23204:	4798      	blx	r3
   23206:	1e03      	subs	r3, r0, #0
   23208:	d013      	beq.n	23232 <spi_data_rsp+0x6e>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
   2320a:	239a      	movs	r3, #154	; 0x9a
   2320c:	005a      	lsls	r2, r3, #1
   2320e:	4927      	ldr	r1, [pc, #156]	; (232ac <spi_data_rsp+0xe8>)
   23210:	4b27      	ldr	r3, [pc, #156]	; (232b0 <spi_data_rsp+0xec>)
   23212:	0018      	movs	r0, r3
   23214:	4b27      	ldr	r3, [pc, #156]	; (232b4 <spi_data_rsp+0xf0>)
   23216:	4798      	blx	r3
   23218:	4b27      	ldr	r3, [pc, #156]	; (232b8 <spi_data_rsp+0xf4>)
   2321a:	0018      	movs	r0, r3
   2321c:	4b25      	ldr	r3, [pc, #148]	; (232b4 <spi_data_rsp+0xf0>)
   2321e:	4798      	blx	r3
   23220:	4b26      	ldr	r3, [pc, #152]	; (232bc <spi_data_rsp+0xf8>)
   23222:	0018      	movs	r0, r3
   23224:	4b23      	ldr	r3, [pc, #140]	; (232b4 <spi_data_rsp+0xf0>)
   23226:	4798      	blx	r3
		result = N_FAIL;
   23228:	230e      	movs	r3, #14
   2322a:	18fb      	adds	r3, r7, r3
   2322c:	2200      	movs	r2, #0
   2322e:	701a      	strb	r2, [r3, #0]
		goto _fail_;
   23230:	e030      	b.n	23294 <spi_data_rsp+0xd0>
	}
		
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
   23232:	230f      	movs	r3, #15
   23234:	18fb      	adds	r3, r7, r3
   23236:	781b      	ldrb	r3, [r3, #0]
   23238:	3b01      	subs	r3, #1
   2323a:	2208      	movs	r2, #8
   2323c:	18ba      	adds	r2, r7, r2
   2323e:	5cd3      	ldrb	r3, [r2, r3]
   23240:	2b00      	cmp	r3, #0
   23242:	d108      	bne.n	23256 <spi_data_rsp+0x92>
   23244:	230f      	movs	r3, #15
   23246:	18fb      	adds	r3, r7, r3
   23248:	781b      	ldrb	r3, [r3, #0]
   2324a:	3b02      	subs	r3, #2
   2324c:	2208      	movs	r2, #8
   2324e:	18ba      	adds	r2, r7, r2
   23250:	5cd3      	ldrb	r3, [r2, r3]
   23252:	2bc3      	cmp	r3, #195	; 0xc3
   23254:	d01e      	beq.n	23294 <spi_data_rsp+0xd0>
	{
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
   23256:	233c      	movs	r3, #60	; 0x3c
   23258:	33ff      	adds	r3, #255	; 0xff
   2325a:	001a      	movs	r2, r3
   2325c:	4913      	ldr	r1, [pc, #76]	; (232ac <spi_data_rsp+0xe8>)
   2325e:	4b14      	ldr	r3, [pc, #80]	; (232b0 <spi_data_rsp+0xec>)
   23260:	0018      	movs	r0, r3
   23262:	4b14      	ldr	r3, [pc, #80]	; (232b4 <spi_data_rsp+0xf0>)
   23264:	4798      	blx	r3
   23266:	2308      	movs	r3, #8
   23268:	18fb      	adds	r3, r7, r3
   2326a:	781b      	ldrb	r3, [r3, #0]
   2326c:	0019      	movs	r1, r3
   2326e:	2308      	movs	r3, #8
   23270:	18fb      	adds	r3, r7, r3
   23272:	785b      	ldrb	r3, [r3, #1]
   23274:	001a      	movs	r2, r3
   23276:	2308      	movs	r3, #8
   23278:	18fb      	adds	r3, r7, r3
   2327a:	789b      	ldrb	r3, [r3, #2]
   2327c:	4810      	ldr	r0, [pc, #64]	; (232c0 <spi_data_rsp+0xfc>)
   2327e:	4c0d      	ldr	r4, [pc, #52]	; (232b4 <spi_data_rsp+0xf0>)
   23280:	47a0      	blx	r4
   23282:	4b0e      	ldr	r3, [pc, #56]	; (232bc <spi_data_rsp+0xf8>)
   23284:	0018      	movs	r0, r3
   23286:	4b0b      	ldr	r3, [pc, #44]	; (232b4 <spi_data_rsp+0xf0>)
   23288:	4798      	blx	r3
		result = N_FAIL;
   2328a:	230e      	movs	r3, #14
   2328c:	18fb      	adds	r3, r7, r3
   2328e:	2200      	movs	r2, #0
   23290:	701a      	strb	r2, [r3, #0]
		goto _fail_;
   23292:	46c0      	nop			; (mov r8, r8)
	}
_fail_:

	return result;
   23294:	230e      	movs	r3, #14
   23296:	18fb      	adds	r3, r7, r3
   23298:	781b      	ldrb	r3, [r3, #0]
   2329a:	b25b      	sxtb	r3, r3
}
   2329c:	0018      	movs	r0, r3
   2329e:	46bd      	mov	sp, r7
   232a0:	b005      	add	sp, #20
   232a2:	bd90      	pop	{r4, r7, pc}
   232a4:	20003ccc 	.word	0x20003ccc
   232a8:	00022d39 	.word	0x00022d39
   232ac:	00039d58 	.word	0x00039d58
   232b0:	00039760 	.word	0x00039760
   232b4:	0001dc4d 	.word	0x0001dc4d
   232b8:	000397a4 	.word	0x000397a4
   232bc:	000397a0 	.word	0x000397a0
   232c0:	000397c4 	.word	0x000397c4

000232c4 <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
   232c4:	b580      	push	{r7, lr}
   232c6:	b084      	sub	sp, #16
   232c8:	af00      	add	r7, sp, #0
   232ca:	0002      	movs	r2, r0
   232cc:	1dfb      	adds	r3, r7, #7
   232ce:	701a      	strb	r2, [r3, #0]
	uint8 rsp;
	sint8 result = N_OK;
   232d0:	230f      	movs	r3, #15
   232d2:	18fb      	adds	r3, r7, r3
   232d4:	2201      	movs	r2, #1
   232d6:	701a      	strb	r2, [r3, #0]
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   232d8:	1dfb      	adds	r3, r7, #7
   232da:	781b      	ldrb	r3, [r3, #0]
   232dc:	2bcf      	cmp	r3, #207	; 0xcf
   232de:	d007      	beq.n	232f0 <spi_cmd_rsp+0x2c>
   232e0:	1dfb      	adds	r3, r7, #7
   232e2:	781b      	ldrb	r3, [r3, #0]
   232e4:	2bc5      	cmp	r3, #197	; 0xc5
   232e6:	d003      	beq.n	232f0 <spi_cmd_rsp+0x2c>
		 (cmd == CMD_TERMINATE) ||
   232e8:	1dfb      	adds	r3, r7, #7
   232ea:	781b      	ldrb	r3, [r3, #0]
   232ec:	2bc6      	cmp	r3, #198	; 0xc6
   232ee:	d10c      	bne.n	2330a <spi_cmd_rsp+0x46>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   232f0:	230d      	movs	r3, #13
   232f2:	18fb      	adds	r3, r7, r3
   232f4:	2101      	movs	r1, #1
   232f6:	0018      	movs	r0, r3
   232f8:	4b3b      	ldr	r3, [pc, #236]	; (233e8 <spi_cmd_rsp+0x124>)
   232fa:	4798      	blx	r3
   232fc:	1e03      	subs	r3, r0, #0
   232fe:	d004      	beq.n	2330a <spi_cmd_rsp+0x46>
			result = N_FAIL;
   23300:	230f      	movs	r3, #15
   23302:	18fb      	adds	r3, r7, r3
   23304:	2200      	movs	r2, #0
   23306:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   23308:	e065      	b.n	233d6 <spi_cmd_rsp+0x112>
		}
	}

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
   2330a:	230e      	movs	r3, #14
   2330c:	18fb      	adds	r3, r7, r3
   2330e:	220a      	movs	r2, #10
   23310:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   23312:	230d      	movs	r3, #13
   23314:	18fb      	adds	r3, r7, r3
   23316:	2101      	movs	r1, #1
   23318:	0018      	movs	r0, r3
   2331a:	4b33      	ldr	r3, [pc, #204]	; (233e8 <spi_cmd_rsp+0x124>)
   2331c:	4798      	blx	r3
   2331e:	1e03      	subs	r3, r0, #0
   23320:	d014      	beq.n	2334c <spi_cmd_rsp+0x88>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   23322:	235c      	movs	r3, #92	; 0x5c
   23324:	33ff      	adds	r3, #255	; 0xff
   23326:	001a      	movs	r2, r3
   23328:	4930      	ldr	r1, [pc, #192]	; (233ec <spi_cmd_rsp+0x128>)
   2332a:	4b31      	ldr	r3, [pc, #196]	; (233f0 <spi_cmd_rsp+0x12c>)
   2332c:	0018      	movs	r0, r3
   2332e:	4b31      	ldr	r3, [pc, #196]	; (233f4 <spi_cmd_rsp+0x130>)
   23330:	4798      	blx	r3
   23332:	4b31      	ldr	r3, [pc, #196]	; (233f8 <spi_cmd_rsp+0x134>)
   23334:	0018      	movs	r0, r3
   23336:	4b2f      	ldr	r3, [pc, #188]	; (233f4 <spi_cmd_rsp+0x130>)
   23338:	4798      	blx	r3
   2333a:	4b30      	ldr	r3, [pc, #192]	; (233fc <spi_cmd_rsp+0x138>)
   2333c:	0018      	movs	r0, r3
   2333e:	4b2d      	ldr	r3, [pc, #180]	; (233f4 <spi_cmd_rsp+0x130>)
   23340:	4798      	blx	r3
			result = N_FAIL;
   23342:	230f      	movs	r3, #15
   23344:	18fb      	adds	r3, r7, r3
   23346:	2200      	movs	r2, #0
   23348:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   2334a:	e044      	b.n	233d6 <spi_cmd_rsp+0x112>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
   2334c:	230d      	movs	r3, #13
   2334e:	18fb      	adds	r3, r7, r3
   23350:	781b      	ldrb	r3, [r3, #0]
   23352:	1dfa      	adds	r2, r7, #7
   23354:	7812      	ldrb	r2, [r2, #0]
   23356:	429a      	cmp	r2, r3
   23358:	d00b      	beq.n	23372 <spi_cmd_rsp+0xae>
   2335a:	230e      	movs	r3, #14
   2335c:	18fb      	adds	r3, r7, r3
   2335e:	781b      	ldrb	r3, [r3, #0]
   23360:	b25b      	sxtb	r3, r3
   23362:	b2da      	uxtb	r2, r3
   23364:	3a01      	subs	r2, #1
   23366:	b2d1      	uxtb	r1, r2
   23368:	220e      	movs	r2, #14
   2336a:	18ba      	adds	r2, r7, r2
   2336c:	7011      	strb	r1, [r2, #0]
   2336e:	2b00      	cmp	r3, #0
   23370:	dccf      	bgt.n	23312 <spi_cmd_rsp+0x4e>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
   23372:	230e      	movs	r3, #14
   23374:	18fb      	adds	r3, r7, r3
   23376:	220a      	movs	r2, #10
   23378:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   2337a:	230d      	movs	r3, #13
   2337c:	18fb      	adds	r3, r7, r3
   2337e:	2101      	movs	r1, #1
   23380:	0018      	movs	r0, r3
   23382:	4b19      	ldr	r3, [pc, #100]	; (233e8 <spi_cmd_rsp+0x124>)
   23384:	4798      	blx	r3
   23386:	1e03      	subs	r3, r0, #0
   23388:	d014      	beq.n	233b4 <spi_cmd_rsp+0xf0>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   2338a:	236a      	movs	r3, #106	; 0x6a
   2338c:	33ff      	adds	r3, #255	; 0xff
   2338e:	001a      	movs	r2, r3
   23390:	4916      	ldr	r1, [pc, #88]	; (233ec <spi_cmd_rsp+0x128>)
   23392:	4b17      	ldr	r3, [pc, #92]	; (233f0 <spi_cmd_rsp+0x12c>)
   23394:	0018      	movs	r0, r3
   23396:	4b17      	ldr	r3, [pc, #92]	; (233f4 <spi_cmd_rsp+0x130>)
   23398:	4798      	blx	r3
   2339a:	4b17      	ldr	r3, [pc, #92]	; (233f8 <spi_cmd_rsp+0x134>)
   2339c:	0018      	movs	r0, r3
   2339e:	4b15      	ldr	r3, [pc, #84]	; (233f4 <spi_cmd_rsp+0x130>)
   233a0:	4798      	blx	r3
   233a2:	4b16      	ldr	r3, [pc, #88]	; (233fc <spi_cmd_rsp+0x138>)
   233a4:	0018      	movs	r0, r3
   233a6:	4b13      	ldr	r3, [pc, #76]	; (233f4 <spi_cmd_rsp+0x130>)
   233a8:	4798      	blx	r3
			result = N_FAIL;
   233aa:	230f      	movs	r3, #15
   233ac:	18fb      	adds	r3, r7, r3
   233ae:	2200      	movs	r2, #0
   233b0:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   233b2:	e010      	b.n	233d6 <spi_cmd_rsp+0x112>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
   233b4:	230d      	movs	r3, #13
   233b6:	18fb      	adds	r3, r7, r3
   233b8:	781b      	ldrb	r3, [r3, #0]
   233ba:	2b00      	cmp	r3, #0
   233bc:	d00b      	beq.n	233d6 <spi_cmd_rsp+0x112>
   233be:	230e      	movs	r3, #14
   233c0:	18fb      	adds	r3, r7, r3
   233c2:	781b      	ldrb	r3, [r3, #0]
   233c4:	b25b      	sxtb	r3, r3
   233c6:	b2da      	uxtb	r2, r3
   233c8:	3a01      	subs	r2, #1
   233ca:	b2d1      	uxtb	r1, r2
   233cc:	220e      	movs	r2, #14
   233ce:	18ba      	adds	r2, r7, r2
   233d0:	7011      	strb	r1, [r2, #0]
   233d2:	2b00      	cmp	r3, #0
   233d4:	dcd1      	bgt.n	2337a <spi_cmd_rsp+0xb6>

_fail_:

	return result;
   233d6:	230f      	movs	r3, #15
   233d8:	18fb      	adds	r3, r7, r3
   233da:	781b      	ldrb	r3, [r3, #0]
   233dc:	b25b      	sxtb	r3, r3
}
   233de:	0018      	movs	r0, r3
   233e0:	46bd      	mov	sp, r7
   233e2:	b004      	add	sp, #16
   233e4:	bd80      	pop	{r7, pc}
   233e6:	46c0      	nop			; (mov r8, r8)
   233e8:	00022d39 	.word	0x00022d39
   233ec:	00039d68 	.word	0x00039d68
   233f0:	00039760 	.word	0x00039760
   233f4:	0001dc4d 	.word	0x0001dc4d
   233f8:	000397f4 	.word	0x000397f4
   233fc:	000397a0 	.word	0x000397a0

00023400 <spi_cmd_complete>:
#ifndef USE_OLD_SPI_SW
static int spi_cmd_complete(uint8_t cmd, uint32_t adr, uint8_t *b, uint32_t sz, uint8_t clockless)
{
   23400:	b590      	push	{r4, r7, lr}
   23402:	b09f      	sub	sp, #124	; 0x7c
   23404:	af00      	add	r7, sp, #0
   23406:	60b9      	str	r1, [r7, #8]
   23408:	607a      	str	r2, [r7, #4]
   2340a:	603b      	str	r3, [r7, #0]
   2340c:	230f      	movs	r3, #15
   2340e:	18fb      	adds	r3, r7, r3
   23410:	1c02      	adds	r2, r0, #0
   23412:	701a      	strb	r2, [r3, #0]
	uint8_t wb[32], rb[32];
	uint8_t wix, rix;
	uint32_t len2;
	uint8_t rsp;
	int len = 0;
   23414:	2300      	movs	r3, #0
   23416:	66fb      	str	r3, [r7, #108]	; 0x6c
	int result = N_OK;
   23418:	2301      	movs	r3, #1
   2341a:	66bb      	str	r3, [r7, #104]	; 0x68

	wb[0] = cmd;
   2341c:	2338      	movs	r3, #56	; 0x38
   2341e:	18fb      	adds	r3, r7, r3
   23420:	220f      	movs	r2, #15
   23422:	18ba      	adds	r2, r7, r2
   23424:	7812      	ldrb	r2, [r2, #0]
   23426:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   23428:	230f      	movs	r3, #15
   2342a:	18fb      	adds	r3, r7, r3
   2342c:	781b      	ldrb	r3, [r3, #0]
   2342e:	3bc1      	subs	r3, #193	; 0xc1
   23430:	2b0e      	cmp	r3, #14
   23432:	d900      	bls.n	23436 <spi_cmd_complete+0x36>
   23434:	e103      	b.n	2363e <spi_cmd_complete+0x23e>
   23436:	009a      	lsls	r2, r3, #2
   23438:	4bd1      	ldr	r3, [pc, #836]	; (23780 <spi_cmd_complete+0x380>)
   2343a:	18d3      	adds	r3, r2, r3
   2343c:	681b      	ldr	r3, [r3, #0]
   2343e:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		wb[1] = (uint8_t)(adr >> 16);
   23440:	68bb      	ldr	r3, [r7, #8]
   23442:	0c1b      	lsrs	r3, r3, #16
   23444:	b2da      	uxtb	r2, r3
   23446:	2338      	movs	r3, #56	; 0x38
   23448:	18fb      	adds	r3, r7, r3
   2344a:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   2344c:	68bb      	ldr	r3, [r7, #8]
   2344e:	0a1b      	lsrs	r3, r3, #8
   23450:	b2da      	uxtb	r2, r3
   23452:	2338      	movs	r3, #56	; 0x38
   23454:	18fb      	adds	r3, r7, r3
   23456:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   23458:	68bb      	ldr	r3, [r7, #8]
   2345a:	b2da      	uxtb	r2, r3
   2345c:	2338      	movs	r3, #56	; 0x38
   2345e:	18fb      	adds	r3, r7, r3
   23460:	70da      	strb	r2, [r3, #3]
		len = 5;
   23462:	2305      	movs	r3, #5
   23464:	66fb      	str	r3, [r7, #108]	; 0x6c
		break; 
   23466:	e0ed      	b.n	23644 <spi_cmd_complete+0x244>
	case CMD_INTERNAL_READ:			/* internal register read */ 
		wb[1] = (uint8_t)(adr >> 8);
   23468:	68bb      	ldr	r3, [r7, #8]
   2346a:	0a1b      	lsrs	r3, r3, #8
   2346c:	b2da      	uxtb	r2, r3
   2346e:	2338      	movs	r3, #56	; 0x38
   23470:	18fb      	adds	r3, r7, r3
   23472:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   23474:	2388      	movs	r3, #136	; 0x88
   23476:	18fb      	adds	r3, r7, r3
   23478:	781b      	ldrb	r3, [r3, #0]
   2347a:	2b01      	cmp	r3, #1
   2347c:	d109      	bne.n	23492 <spi_cmd_complete+0x92>
   2347e:	2338      	movs	r3, #56	; 0x38
   23480:	18fb      	adds	r3, r7, r3
   23482:	785b      	ldrb	r3, [r3, #1]
   23484:	2280      	movs	r2, #128	; 0x80
   23486:	4252      	negs	r2, r2
   23488:	4313      	orrs	r3, r2
   2348a:	b2da      	uxtb	r2, r3
   2348c:	2338      	movs	r3, #56	; 0x38
   2348e:	18fb      	adds	r3, r7, r3
   23490:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)adr;
   23492:	68bb      	ldr	r3, [r7, #8]
   23494:	b2da      	uxtb	r2, r3
   23496:	2338      	movs	r3, #56	; 0x38
   23498:	18fb      	adds	r3, r7, r3
   2349a:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   2349c:	2338      	movs	r3, #56	; 0x38
   2349e:	18fb      	adds	r3, r7, r3
   234a0:	2200      	movs	r2, #0
   234a2:	70da      	strb	r2, [r3, #3]
		len = 5;
   234a4:	2305      	movs	r3, #5
   234a6:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   234a8:	e0cc      	b.n	23644 <spi_cmd_complete+0x244>
	case CMD_TERMINATE:					/* termination */
		wb[1] = 0x00;
   234aa:	2338      	movs	r3, #56	; 0x38
   234ac:	18fb      	adds	r3, r7, r3
   234ae:	2200      	movs	r2, #0
   234b0:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   234b2:	2338      	movs	r3, #56	; 0x38
   234b4:	18fb      	adds	r3, r7, r3
   234b6:	2200      	movs	r2, #0
   234b8:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   234ba:	2338      	movs	r3, #56	; 0x38
   234bc:	18fb      	adds	r3, r7, r3
   234be:	2200      	movs	r2, #0
   234c0:	70da      	strb	r2, [r3, #3]
		len = 5;
   234c2:	2305      	movs	r3, #5
   234c4:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   234c6:	e0bd      	b.n	23644 <spi_cmd_complete+0x244>
	case CMD_REPEAT:						/* repeat */
		wb[1] = 0x00;
   234c8:	2338      	movs	r3, #56	; 0x38
   234ca:	18fb      	adds	r3, r7, r3
   234cc:	2200      	movs	r2, #0
   234ce:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   234d0:	2338      	movs	r3, #56	; 0x38
   234d2:	18fb      	adds	r3, r7, r3
   234d4:	2200      	movs	r2, #0
   234d6:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   234d8:	2338      	movs	r3, #56	; 0x38
   234da:	18fb      	adds	r3, r7, r3
   234dc:	2200      	movs	r2, #0
   234de:	70da      	strb	r2, [r3, #3]
		len = 5;
   234e0:	2305      	movs	r3, #5
   234e2:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   234e4:	e0ae      	b.n	23644 <spi_cmd_complete+0x244>
	case CMD_RESET:							/* reset */
		wb[1] = 0xff;
   234e6:	2338      	movs	r3, #56	; 0x38
   234e8:	18fb      	adds	r3, r7, r3
   234ea:	22ff      	movs	r2, #255	; 0xff
   234ec:	705a      	strb	r2, [r3, #1]
		wb[2] = 0xff;
   234ee:	2338      	movs	r3, #56	; 0x38
   234f0:	18fb      	adds	r3, r7, r3
   234f2:	22ff      	movs	r2, #255	; 0xff
   234f4:	709a      	strb	r2, [r3, #2]
		wb[3] = 0xff;
   234f6:	2338      	movs	r3, #56	; 0x38
   234f8:	18fb      	adds	r3, r7, r3
   234fa:	22ff      	movs	r2, #255	; 0xff
   234fc:	70da      	strb	r2, [r3, #3]
		len = 5;
   234fe:	2305      	movs	r3, #5
   23500:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   23502:	e09f      	b.n	23644 <spi_cmd_complete+0x244>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		wb[1] = (uint8_t)(adr >> 16);
   23504:	68bb      	ldr	r3, [r7, #8]
   23506:	0c1b      	lsrs	r3, r3, #16
   23508:	b2da      	uxtb	r2, r3
   2350a:	2338      	movs	r3, #56	; 0x38
   2350c:	18fb      	adds	r3, r7, r3
   2350e:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   23510:	68bb      	ldr	r3, [r7, #8]
   23512:	0a1b      	lsrs	r3, r3, #8
   23514:	b2da      	uxtb	r2, r3
   23516:	2338      	movs	r3, #56	; 0x38
   23518:	18fb      	adds	r3, r7, r3
   2351a:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   2351c:	68bb      	ldr	r3, [r7, #8]
   2351e:	b2da      	uxtb	r2, r3
   23520:	2338      	movs	r3, #56	; 0x38
   23522:	18fb      	adds	r3, r7, r3
   23524:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 8);
   23526:	683b      	ldr	r3, [r7, #0]
   23528:	0a1b      	lsrs	r3, r3, #8
   2352a:	b2da      	uxtb	r2, r3
   2352c:	2338      	movs	r3, #56	; 0x38
   2352e:	18fb      	adds	r3, r7, r3
   23530:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz);
   23532:	683b      	ldr	r3, [r7, #0]
   23534:	b2da      	uxtb	r2, r3
   23536:	2338      	movs	r3, #56	; 0x38
   23538:	18fb      	adds	r3, r7, r3
   2353a:	715a      	strb	r2, [r3, #5]
		len = 7;
   2353c:	2307      	movs	r3, #7
   2353e:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   23540:	e080      	b.n	23644 <spi_cmd_complete+0x244>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		wb[1] = (uint8_t)(adr >> 16);
   23542:	68bb      	ldr	r3, [r7, #8]
   23544:	0c1b      	lsrs	r3, r3, #16
   23546:	b2da      	uxtb	r2, r3
   23548:	2338      	movs	r3, #56	; 0x38
   2354a:	18fb      	adds	r3, r7, r3
   2354c:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   2354e:	68bb      	ldr	r3, [r7, #8]
   23550:	0a1b      	lsrs	r3, r3, #8
   23552:	b2da      	uxtb	r2, r3
   23554:	2338      	movs	r3, #56	; 0x38
   23556:	18fb      	adds	r3, r7, r3
   23558:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   2355a:	68bb      	ldr	r3, [r7, #8]
   2355c:	b2da      	uxtb	r2, r3
   2355e:	2338      	movs	r3, #56	; 0x38
   23560:	18fb      	adds	r3, r7, r3
   23562:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 16);
   23564:	683b      	ldr	r3, [r7, #0]
   23566:	0c1b      	lsrs	r3, r3, #16
   23568:	b2da      	uxtb	r2, r3
   2356a:	2338      	movs	r3, #56	; 0x38
   2356c:	18fb      	adds	r3, r7, r3
   2356e:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz >> 8);
   23570:	683b      	ldr	r3, [r7, #0]
   23572:	0a1b      	lsrs	r3, r3, #8
   23574:	b2da      	uxtb	r2, r3
   23576:	2338      	movs	r3, #56	; 0x38
   23578:	18fb      	adds	r3, r7, r3
   2357a:	715a      	strb	r2, [r3, #5]
		wb[6] = (uint8_t)(sz);
   2357c:	683b      	ldr	r3, [r7, #0]
   2357e:	b2da      	uxtb	r2, r3
   23580:	2338      	movs	r3, #56	; 0x38
   23582:	18fb      	adds	r3, r7, r3
   23584:	719a      	strb	r2, [r3, #6]
		len = 8;
   23586:	2308      	movs	r3, #8
   23588:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   2358a:	e05b      	b.n	23644 <spi_cmd_complete+0x244>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		wb[1] = (uint8_t)(adr >> 8);
   2358c:	68bb      	ldr	r3, [r7, #8]
   2358e:	0a1b      	lsrs	r3, r3, #8
   23590:	b2da      	uxtb	r2, r3
   23592:	2338      	movs	r3, #56	; 0x38
   23594:	18fb      	adds	r3, r7, r3
   23596:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   23598:	2388      	movs	r3, #136	; 0x88
   2359a:	18fb      	adds	r3, r7, r3
   2359c:	781b      	ldrb	r3, [r3, #0]
   2359e:	2b01      	cmp	r3, #1
   235a0:	d109      	bne.n	235b6 <spi_cmd_complete+0x1b6>
   235a2:	2338      	movs	r3, #56	; 0x38
   235a4:	18fb      	adds	r3, r7, r3
   235a6:	785b      	ldrb	r3, [r3, #1]
   235a8:	2280      	movs	r2, #128	; 0x80
   235aa:	4252      	negs	r2, r2
   235ac:	4313      	orrs	r3, r2
   235ae:	b2da      	uxtb	r2, r3
   235b0:	2338      	movs	r3, #56	; 0x38
   235b2:	18fb      	adds	r3, r7, r3
   235b4:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr);
   235b6:	68bb      	ldr	r3, [r7, #8]
   235b8:	b2da      	uxtb	r2, r3
   235ba:	2338      	movs	r3, #56	; 0x38
   235bc:	18fb      	adds	r3, r7, r3
   235be:	709a      	strb	r2, [r3, #2]
		wb[3] = b[3];
   235c0:	687b      	ldr	r3, [r7, #4]
   235c2:	78da      	ldrb	r2, [r3, #3]
   235c4:	2338      	movs	r3, #56	; 0x38
   235c6:	18fb      	adds	r3, r7, r3
   235c8:	70da      	strb	r2, [r3, #3]
		wb[4] = b[2];
   235ca:	687b      	ldr	r3, [r7, #4]
   235cc:	789a      	ldrb	r2, [r3, #2]
   235ce:	2338      	movs	r3, #56	; 0x38
   235d0:	18fb      	adds	r3, r7, r3
   235d2:	711a      	strb	r2, [r3, #4]
		wb[5] = b[1];
   235d4:	687b      	ldr	r3, [r7, #4]
   235d6:	785a      	ldrb	r2, [r3, #1]
   235d8:	2338      	movs	r3, #56	; 0x38
   235da:	18fb      	adds	r3, r7, r3
   235dc:	715a      	strb	r2, [r3, #5]
		wb[6] = b[0];
   235de:	687b      	ldr	r3, [r7, #4]
   235e0:	781a      	ldrb	r2, [r3, #0]
   235e2:	2338      	movs	r3, #56	; 0x38
   235e4:	18fb      	adds	r3, r7, r3
   235e6:	719a      	strb	r2, [r3, #6]
		len = 8;
   235e8:	2308      	movs	r3, #8
   235ea:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   235ec:	e02a      	b.n	23644 <spi_cmd_complete+0x244>
	case CMD_SINGLE_WRITE:			/* single word write */
		wb[1] = (uint8_t)(adr >> 16);
   235ee:	68bb      	ldr	r3, [r7, #8]
   235f0:	0c1b      	lsrs	r3, r3, #16
   235f2:	b2da      	uxtb	r2, r3
   235f4:	2338      	movs	r3, #56	; 0x38
   235f6:	18fb      	adds	r3, r7, r3
   235f8:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   235fa:	68bb      	ldr	r3, [r7, #8]
   235fc:	0a1b      	lsrs	r3, r3, #8
   235fe:	b2da      	uxtb	r2, r3
   23600:	2338      	movs	r3, #56	; 0x38
   23602:	18fb      	adds	r3, r7, r3
   23604:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)(adr);
   23606:	68bb      	ldr	r3, [r7, #8]
   23608:	b2da      	uxtb	r2, r3
   2360a:	2338      	movs	r3, #56	; 0x38
   2360c:	18fb      	adds	r3, r7, r3
   2360e:	70da      	strb	r2, [r3, #3]
		wb[4] = b[3];
   23610:	687b      	ldr	r3, [r7, #4]
   23612:	78da      	ldrb	r2, [r3, #3]
   23614:	2338      	movs	r3, #56	; 0x38
   23616:	18fb      	adds	r3, r7, r3
   23618:	711a      	strb	r2, [r3, #4]
		wb[5] = b[2];
   2361a:	687b      	ldr	r3, [r7, #4]
   2361c:	789a      	ldrb	r2, [r3, #2]
   2361e:	2338      	movs	r3, #56	; 0x38
   23620:	18fb      	adds	r3, r7, r3
   23622:	715a      	strb	r2, [r3, #5]
		wb[6] = b[1];
   23624:	687b      	ldr	r3, [r7, #4]
   23626:	785a      	ldrb	r2, [r3, #1]
   23628:	2338      	movs	r3, #56	; 0x38
   2362a:	18fb      	adds	r3, r7, r3
   2362c:	719a      	strb	r2, [r3, #6]
		wb[7] = b[0];
   2362e:	687b      	ldr	r3, [r7, #4]
   23630:	781a      	ldrb	r2, [r3, #0]
   23632:	2338      	movs	r3, #56	; 0x38
   23634:	18fb      	adds	r3, r7, r3
   23636:	71da      	strb	r2, [r3, #7]
		len = 9;
   23638:	2309      	movs	r3, #9
   2363a:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   2363c:	e002      	b.n	23644 <spi_cmd_complete+0x244>
	default:
		result = N_FAIL;
   2363e:	2300      	movs	r3, #0
   23640:	66bb      	str	r3, [r7, #104]	; 0x68
		break;
   23642:	46c0      	nop			; (mov r8, r8)
	}

	if (result != N_OK) {
   23644:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   23646:	2b01      	cmp	r3, #1
   23648:	d001      	beq.n	2364e <spi_cmd_complete+0x24e>
		return result;
   2364a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2364c:	e33a      	b.n	23cc4 <spi_cmd_complete+0x8c4>
	}

	if (!gu8Crc_off) {
   2364e:	4b4d      	ldr	r3, [pc, #308]	; (23784 <spi_cmd_complete+0x384>)
   23650:	781b      	ldrb	r3, [r3, #0]
   23652:	2b00      	cmp	r3, #0
   23654:	d111      	bne.n	2367a <spi_cmd_complete+0x27a>
		wb[len-1] = (crc7(0x7f, (const uint8_t *)&wb[0], len-1)) << 1;
   23656:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   23658:	1e5c      	subs	r4, r3, #1
   2365a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   2365c:	3b01      	subs	r3, #1
   2365e:	001a      	movs	r2, r3
   23660:	2338      	movs	r3, #56	; 0x38
   23662:	18fb      	adds	r3, r7, r3
   23664:	0019      	movs	r1, r3
   23666:	207f      	movs	r0, #127	; 0x7f
   23668:	4b47      	ldr	r3, [pc, #284]	; (23788 <spi_cmd_complete+0x388>)
   2366a:	4798      	blx	r3
   2366c:	0003      	movs	r3, r0
   2366e:	18db      	adds	r3, r3, r3
   23670:	b2da      	uxtb	r2, r3
   23672:	2338      	movs	r3, #56	; 0x38
   23674:	18fb      	adds	r3, r7, r3
   23676:	551a      	strb	r2, [r3, r4]
   23678:	e002      	b.n	23680 <spi_cmd_complete+0x280>
	} else {
		len -=1;
   2367a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   2367c:	3b01      	subs	r3, #1
   2367e:	66fb      	str	r3, [r7, #108]	; 0x6c
#define NUM_DATA_HDR_BYTES (1)
#define NUM_DATA_BYTES (4)
#define NUM_CRC_BYTES (2)
#define NUM_DUMMY_BYTES (3)

	if ((cmd == CMD_RESET) ||
   23680:	230f      	movs	r3, #15
   23682:	18fb      	adds	r3, r7, r3
   23684:	781b      	ldrb	r3, [r3, #0]
   23686:	2bcf      	cmp	r3, #207	; 0xcf
   23688:	d009      	beq.n	2369e <spi_cmd_complete+0x29e>
   2368a:	230f      	movs	r3, #15
   2368c:	18fb      	adds	r3, r7, r3
   2368e:	781b      	ldrb	r3, [r3, #0]
   23690:	2bc5      	cmp	r3, #197	; 0xc5
   23692:	d004      	beq.n	2369e <spi_cmd_complete+0x29e>
		(cmd == CMD_TERMINATE) ||
   23694:	230f      	movs	r3, #15
   23696:	18fb      	adds	r3, r7, r3
   23698:	781b      	ldrb	r3, [r3, #0]
   2369a:	2bc6      	cmp	r3, #198	; 0xc6
   2369c:	d103      	bne.n	236a6 <spi_cmd_complete+0x2a6>
		(cmd == CMD_REPEAT)) {
			len2 = len + (NUM_SKIP_BYTES + NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   2369e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   236a0:	3306      	adds	r3, #6
   236a2:	673b      	str	r3, [r7, #112]	; 0x70
   236a4:	e018      	b.n	236d8 <spi_cmd_complete+0x2d8>
	} else if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   236a6:	230f      	movs	r3, #15
   236a8:	18fb      	adds	r3, r7, r3
   236aa:	781b      	ldrb	r3, [r3, #0]
   236ac:	2bc4      	cmp	r3, #196	; 0xc4
   236ae:	d004      	beq.n	236ba <spi_cmd_complete+0x2ba>
   236b0:	230f      	movs	r3, #15
   236b2:	18fb      	adds	r3, r7, r3
   236b4:	781b      	ldrb	r3, [r3, #0]
   236b6:	2bca      	cmp	r3, #202	; 0xca
   236b8:	d10b      	bne.n	236d2 <spi_cmd_complete+0x2d2>
		if (!gu8Crc_off) {
   236ba:	4b32      	ldr	r3, [pc, #200]	; (23784 <spi_cmd_complete+0x384>)
   236bc:	781b      	ldrb	r3, [r3, #0]
   236be:	2b00      	cmp	r3, #0
   236c0:	d103      	bne.n	236ca <spi_cmd_complete+0x2ca>
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   236c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   236c4:	330c      	adds	r3, #12
   236c6:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   236c8:	e006      	b.n	236d8 <spi_cmd_complete+0x2d8>
			+ NUM_CRC_BYTES + NUM_DUMMY_BYTES);	
		} else {
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   236ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   236cc:	330a      	adds	r3, #10
   236ce:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   236d0:	e002      	b.n	236d8 <spi_cmd_complete+0x2d8>
			+ NUM_DUMMY_BYTES);
		}
	} else {
		len2 = len + (NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   236d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   236d4:	3305      	adds	r3, #5
   236d6:	673b      	str	r3, [r7, #112]	; 0x70
	}
#undef NUM_DUMMY_BYTES

	if(len2 > (sizeof(wb)/sizeof(wb[0]))) {
   236d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   236da:	2b20      	cmp	r3, #32
   236dc:	d914      	bls.n	23708 <spi_cmd_complete+0x308>
		M2M_ERR("[nmi spi]: spi buffer size too small (%d) (%d)\n",
   236de:	23f7      	movs	r3, #247	; 0xf7
   236e0:	005a      	lsls	r2, r3, #1
   236e2:	492a      	ldr	r1, [pc, #168]	; (2378c <spi_cmd_complete+0x38c>)
   236e4:	4b2a      	ldr	r3, [pc, #168]	; (23790 <spi_cmd_complete+0x390>)
   236e6:	0018      	movs	r0, r3
   236e8:	4b2a      	ldr	r3, [pc, #168]	; (23794 <spi_cmd_complete+0x394>)
   236ea:	4798      	blx	r3
   236ec:	6f39      	ldr	r1, [r7, #112]	; 0x70
   236ee:	4b2a      	ldr	r3, [pc, #168]	; (23798 <spi_cmd_complete+0x398>)
   236f0:	2220      	movs	r2, #32
   236f2:	0018      	movs	r0, r3
   236f4:	4b27      	ldr	r3, [pc, #156]	; (23794 <spi_cmd_complete+0x394>)
   236f6:	4798      	blx	r3
   236f8:	4b28      	ldr	r3, [pc, #160]	; (2379c <spi_cmd_complete+0x39c>)
   236fa:	0018      	movs	r0, r3
   236fc:	4b25      	ldr	r3, [pc, #148]	; (23794 <spi_cmd_complete+0x394>)
   236fe:	4798      	blx	r3
			len2, (sizeof(wb)/sizeof(wb[0])));
		result = N_FAIL;
   23700:	2300      	movs	r3, #0
   23702:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   23704:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   23706:	e2dd      	b.n	23cc4 <spi_cmd_complete+0x8c4>
	}
	/* zero spi write buffers. */
	for(wix = len; wix< len2; wix++) {
   23708:	2377      	movs	r3, #119	; 0x77
   2370a:	18fb      	adds	r3, r7, r3
   2370c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   2370e:	701a      	strb	r2, [r3, #0]
   23710:	e00d      	b.n	2372e <spi_cmd_complete+0x32e>
		wb[wix] = 0;
   23712:	2377      	movs	r3, #119	; 0x77
   23714:	18fb      	adds	r3, r7, r3
   23716:	781b      	ldrb	r3, [r3, #0]
   23718:	2238      	movs	r2, #56	; 0x38
   2371a:	18ba      	adds	r2, r7, r2
   2371c:	2100      	movs	r1, #0
   2371e:	54d1      	strb	r1, [r2, r3]
	for(wix = len; wix< len2; wix++) {
   23720:	2377      	movs	r3, #119	; 0x77
   23722:	18fb      	adds	r3, r7, r3
   23724:	781a      	ldrb	r2, [r3, #0]
   23726:	2377      	movs	r3, #119	; 0x77
   23728:	18fb      	adds	r3, r7, r3
   2372a:	3201      	adds	r2, #1
   2372c:	701a      	strb	r2, [r3, #0]
   2372e:	2377      	movs	r3, #119	; 0x77
   23730:	18fb      	adds	r3, r7, r3
   23732:	781a      	ldrb	r2, [r3, #0]
   23734:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   23736:	429a      	cmp	r2, r3
   23738:	d3eb      	bcc.n	23712 <spi_cmd_complete+0x312>
	}
	rix = len;
   2373a:	2376      	movs	r3, #118	; 0x76
   2373c:	18fb      	adds	r3, r7, r3
   2373e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   23740:	701a      	strb	r2, [r3, #0]

	if (nmi_spi_rw(wb, rb, len2) != M2M_SUCCESS) {
   23742:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   23744:	b29a      	uxth	r2, r3
   23746:	2318      	movs	r3, #24
   23748:	18f9      	adds	r1, r7, r3
   2374a:	2338      	movs	r3, #56	; 0x38
   2374c:	18fb      	adds	r3, r7, r3
   2374e:	0018      	movs	r0, r3
   23750:	4b13      	ldr	r3, [pc, #76]	; (237a0 <spi_cmd_complete+0x3a0>)
   23752:	4798      	blx	r3
   23754:	1e03      	subs	r3, r0, #0
   23756:	d027      	beq.n	237a8 <spi_cmd_complete+0x3a8>
		M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   23758:	23fa      	movs	r3, #250	; 0xfa
   2375a:	33ff      	adds	r3, #255	; 0xff
   2375c:	001a      	movs	r2, r3
   2375e:	490b      	ldr	r1, [pc, #44]	; (2378c <spi_cmd_complete+0x38c>)
   23760:	4b0b      	ldr	r3, [pc, #44]	; (23790 <spi_cmd_complete+0x390>)
   23762:	0018      	movs	r0, r3
   23764:	4b0b      	ldr	r3, [pc, #44]	; (23794 <spi_cmd_complete+0x394>)
   23766:	4798      	blx	r3
   23768:	4b0e      	ldr	r3, [pc, #56]	; (237a4 <spi_cmd_complete+0x3a4>)
   2376a:	0018      	movs	r0, r3
   2376c:	4b09      	ldr	r3, [pc, #36]	; (23794 <spi_cmd_complete+0x394>)
   2376e:	4798      	blx	r3
   23770:	4b0a      	ldr	r3, [pc, #40]	; (2379c <spi_cmd_complete+0x39c>)
   23772:	0018      	movs	r0, r3
   23774:	4b07      	ldr	r3, [pc, #28]	; (23794 <spi_cmd_complete+0x394>)
   23776:	4798      	blx	r3
		result = N_FAIL;
   23778:	2300      	movs	r3, #0
   2377a:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   2377c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2377e:	e2a1      	b.n	23cc4 <spi_cmd_complete+0x8c4>
   23780:	00039d14 	.word	0x00039d14
   23784:	20003ccc 	.word	0x20003ccc
   23788:	00022e35 	.word	0x00022e35
   2378c:	00039d74 	.word	0x00039d74
   23790:	00039760 	.word	0x00039760
   23794:	0001dc4d 	.word	0x0001dc4d
   23798:	00039828 	.word	0x00039828
   2379c:	000397a0 	.word	0x000397a0
   237a0:	00022dc1 	.word	0x00022dc1
   237a4:	00039774 	.word	0x00039774
#endif

	/**
	Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   237a8:	230f      	movs	r3, #15
   237aa:	18fb      	adds	r3, r7, r3
   237ac:	781b      	ldrb	r3, [r3, #0]
   237ae:	2bcf      	cmp	r3, #207	; 0xcf
   237b0:	d009      	beq.n	237c6 <spi_cmd_complete+0x3c6>
   237b2:	230f      	movs	r3, #15
   237b4:	18fb      	adds	r3, r7, r3
   237b6:	781b      	ldrb	r3, [r3, #0]
   237b8:	2bc5      	cmp	r3, #197	; 0xc5
   237ba:	d004      	beq.n	237c6 <spi_cmd_complete+0x3c6>
		(cmd == CMD_TERMINATE) ||
   237bc:	230f      	movs	r3, #15
   237be:	18fb      	adds	r3, r7, r3
   237c0:	781b      	ldrb	r3, [r3, #0]
   237c2:	2bc6      	cmp	r3, #198	; 0xc6
   237c4:	d106      	bne.n	237d4 <spi_cmd_complete+0x3d4>
		(cmd == CMD_REPEAT)) {
			rix++; /* skip 1 byte */
   237c6:	2376      	movs	r3, #118	; 0x76
   237c8:	18fb      	adds	r3, r7, r3
   237ca:	781a      	ldrb	r2, [r3, #0]
   237cc:	2376      	movs	r3, #118	; 0x76
   237ce:	18fb      	adds	r3, r7, r3
   237d0:	3201      	adds	r2, #1
   237d2:	701a      	strb	r2, [r3, #0]
	}

	rsp = rb[rix++];
   237d4:	2376      	movs	r3, #118	; 0x76
   237d6:	18fb      	adds	r3, r7, r3
   237d8:	781b      	ldrb	r3, [r3, #0]
   237da:	2276      	movs	r2, #118	; 0x76
   237dc:	18ba      	adds	r2, r7, r2
   237de:	1c59      	adds	r1, r3, #1
   237e0:	7011      	strb	r1, [r2, #0]
   237e2:	001a      	movs	r2, r3
   237e4:	2318      	movs	r3, #24
   237e6:	18fb      	adds	r3, r7, r3
   237e8:	5c9a      	ldrb	r2, [r3, r2]
   237ea:	2317      	movs	r3, #23
   237ec:	18fb      	adds	r3, r7, r3
   237ee:	701a      	strb	r2, [r3, #0]


	if (rsp != cmd) {
   237f0:	2317      	movs	r3, #23
   237f2:	18fb      	adds	r3, r7, r3
   237f4:	781b      	ldrb	r3, [r3, #0]
   237f6:	220f      	movs	r2, #15
   237f8:	18ba      	adds	r2, r7, r2
   237fa:	7812      	ldrb	r2, [r2, #0]
   237fc:	429a      	cmp	r2, r3
   237fe:	d018      	beq.n	23832 <spi_cmd_complete+0x432>
		M2M_ERR("[nmi spi]: Failed cmd response, cmd (%02x), resp (%02x)\n", cmd, rsp);
   23800:	4add      	ldr	r2, [pc, #884]	; (23b78 <spi_cmd_complete+0x778>)
   23802:	49de      	ldr	r1, [pc, #888]	; (23b7c <spi_cmd_complete+0x77c>)
   23804:	4bde      	ldr	r3, [pc, #888]	; (23b80 <spi_cmd_complete+0x780>)
   23806:	0018      	movs	r0, r3
   23808:	4bde      	ldr	r3, [pc, #888]	; (23b84 <spi_cmd_complete+0x784>)
   2380a:	4798      	blx	r3
   2380c:	230f      	movs	r3, #15
   2380e:	18fb      	adds	r3, r7, r3
   23810:	7819      	ldrb	r1, [r3, #0]
   23812:	2317      	movs	r3, #23
   23814:	18fb      	adds	r3, r7, r3
   23816:	781b      	ldrb	r3, [r3, #0]
   23818:	001a      	movs	r2, r3
   2381a:	4bdb      	ldr	r3, [pc, #876]	; (23b88 <spi_cmd_complete+0x788>)
   2381c:	0018      	movs	r0, r3
   2381e:	4bd9      	ldr	r3, [pc, #868]	; (23b84 <spi_cmd_complete+0x784>)
   23820:	4798      	blx	r3
   23822:	4bda      	ldr	r3, [pc, #872]	; (23b8c <spi_cmd_complete+0x78c>)
   23824:	0018      	movs	r0, r3
   23826:	4bd7      	ldr	r3, [pc, #860]	; (23b84 <spi_cmd_complete+0x784>)
   23828:	4798      	blx	r3
		result = N_FAIL;
   2382a:	2300      	movs	r3, #0
   2382c:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   2382e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   23830:	e248      	b.n	23cc4 <spi_cmd_complete+0x8c4>
	}

	/**
	State response
	**/
	rsp = rb[rix++];
   23832:	2376      	movs	r3, #118	; 0x76
   23834:	18fb      	adds	r3, r7, r3
   23836:	781b      	ldrb	r3, [r3, #0]
   23838:	2276      	movs	r2, #118	; 0x76
   2383a:	18ba      	adds	r2, r7, r2
   2383c:	1c59      	adds	r1, r3, #1
   2383e:	7011      	strb	r1, [r2, #0]
   23840:	001a      	movs	r2, r3
   23842:	2318      	movs	r3, #24
   23844:	18fb      	adds	r3, r7, r3
   23846:	5c9a      	ldrb	r2, [r3, r2]
   23848:	2317      	movs	r3, #23
   2384a:	18fb      	adds	r3, r7, r3
   2384c:	701a      	strb	r2, [r3, #0]
	if (rsp != 0x00) {
   2384e:	2317      	movs	r3, #23
   23850:	18fb      	adds	r3, r7, r3
   23852:	781b      	ldrb	r3, [r3, #0]
   23854:	2b00      	cmp	r3, #0
   23856:	d016      	beq.n	23886 <spi_cmd_complete+0x486>
		M2M_ERR("[nmi spi]: Failed cmd state response state (%02x)\n", rsp);
   23858:	4acd      	ldr	r2, [pc, #820]	; (23b90 <spi_cmd_complete+0x790>)
   2385a:	49c8      	ldr	r1, [pc, #800]	; (23b7c <spi_cmd_complete+0x77c>)
   2385c:	4bc8      	ldr	r3, [pc, #800]	; (23b80 <spi_cmd_complete+0x780>)
   2385e:	0018      	movs	r0, r3
   23860:	4bc8      	ldr	r3, [pc, #800]	; (23b84 <spi_cmd_complete+0x784>)
   23862:	4798      	blx	r3
   23864:	2317      	movs	r3, #23
   23866:	18fb      	adds	r3, r7, r3
   23868:	781b      	ldrb	r3, [r3, #0]
   2386a:	001a      	movs	r2, r3
   2386c:	4bc9      	ldr	r3, [pc, #804]	; (23b94 <spi_cmd_complete+0x794>)
   2386e:	0011      	movs	r1, r2
   23870:	0018      	movs	r0, r3
   23872:	4bc4      	ldr	r3, [pc, #784]	; (23b84 <spi_cmd_complete+0x784>)
   23874:	4798      	blx	r3
   23876:	4bc5      	ldr	r3, [pc, #788]	; (23b8c <spi_cmd_complete+0x78c>)
   23878:	0018      	movs	r0, r3
   2387a:	4bc2      	ldr	r3, [pc, #776]	; (23b84 <spi_cmd_complete+0x784>)
   2387c:	4798      	blx	r3
		result = N_FAIL;
   2387e:	2300      	movs	r3, #0
   23880:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   23882:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   23884:	e21e      	b.n	23cc4 <spi_cmd_complete+0x8c4>
	}

	if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)
   23886:	230f      	movs	r3, #15
   23888:	18fb      	adds	r3, r7, r3
   2388a:	781b      	ldrb	r3, [r3, #0]
   2388c:	2bc4      	cmp	r3, #196	; 0xc4
   2388e:	d00f      	beq.n	238b0 <spi_cmd_complete+0x4b0>
   23890:	230f      	movs	r3, #15
   23892:	18fb      	adds	r3, r7, r3
   23894:	781b      	ldrb	r3, [r3, #0]
   23896:	2bca      	cmp	r3, #202	; 0xca
   23898:	d00a      	beq.n	238b0 <spi_cmd_complete+0x4b0>
		|| (cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   2389a:	230f      	movs	r3, #15
   2389c:	18fb      	adds	r3, r7, r3
   2389e:	781b      	ldrb	r3, [r3, #0]
   238a0:	2bc2      	cmp	r3, #194	; 0xc2
   238a2:	d005      	beq.n	238b0 <spi_cmd_complete+0x4b0>
   238a4:	230f      	movs	r3, #15
   238a6:	18fb      	adds	r3, r7, r3
   238a8:	781b      	ldrb	r3, [r3, #0]
   238aa:	2bc8      	cmp	r3, #200	; 0xc8
   238ac:	d000      	beq.n	238b0 <spi_cmd_complete+0x4b0>
   238ae:	e208      	b.n	23cc2 <spi_cmd_complete+0x8c2>
			//uint16_t crc1, crc2;
			uint8_t crc[2];
			/**
			Data Respnose header
			**/
			retry = SPI_RESP_RETRY_COUNT;
   238b0:	230a      	movs	r3, #10
   238b2:	667b      	str	r3, [r7, #100]	; 0x64
			do {
				/* ensure there is room in buffer later to read data and crc */
				if(rix < len2) { 
   238b4:	2376      	movs	r3, #118	; 0x76
   238b6:	18fb      	adds	r3, r7, r3
   238b8:	781a      	ldrb	r2, [r3, #0]
   238ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   238bc:	429a      	cmp	r2, r3
   238be:	d218      	bcs.n	238f2 <spi_cmd_complete+0x4f2>
					rsp = rb[rix++];
   238c0:	2376      	movs	r3, #118	; 0x76
   238c2:	18fb      	adds	r3, r7, r3
   238c4:	781b      	ldrb	r3, [r3, #0]
   238c6:	2276      	movs	r2, #118	; 0x76
   238c8:	18ba      	adds	r2, r7, r2
   238ca:	1c59      	adds	r1, r3, #1
   238cc:	7011      	strb	r1, [r2, #0]
   238ce:	001a      	movs	r2, r3
   238d0:	2318      	movs	r3, #24
   238d2:	18fb      	adds	r3, r7, r3
   238d4:	5c9a      	ldrb	r2, [r3, r2]
   238d6:	2317      	movs	r3, #23
   238d8:	18fb      	adds	r3, r7, r3
   238da:	701a      	strb	r2, [r3, #0]
				} else {
					retry = 0;
					break;
				}
				if (((rsp >> 4) & 0xf) == 0xf)
   238dc:	2317      	movs	r3, #23
   238de:	18fb      	adds	r3, r7, r3
   238e0:	781b      	ldrb	r3, [r3, #0]
   238e2:	091b      	lsrs	r3, r3, #4
   238e4:	b2db      	uxtb	r3, r3
   238e6:	001a      	movs	r2, r3
   238e8:	230f      	movs	r3, #15
   238ea:	4013      	ands	r3, r2
   238ec:	2b0f      	cmp	r3, #15
   238ee:	d103      	bne.n	238f8 <spi_cmd_complete+0x4f8>
					break;
   238f0:	e007      	b.n	23902 <spi_cmd_complete+0x502>
					retry = 0;
   238f2:	2300      	movs	r3, #0
   238f4:	667b      	str	r3, [r7, #100]	; 0x64
					break;
   238f6:	e004      	b.n	23902 <spi_cmd_complete+0x502>
			} while (retry--);
   238f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   238fa:	1e5a      	subs	r2, r3, #1
   238fc:	667a      	str	r2, [r7, #100]	; 0x64
   238fe:	2b00      	cmp	r3, #0
   23900:	d1d8      	bne.n	238b4 <spi_cmd_complete+0x4b4>

			if (retry <= 0) {
   23902:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   23904:	2b00      	cmp	r3, #0
   23906:	dc18      	bgt.n	2393a <spi_cmd_complete+0x53a>
				M2M_ERR("[nmi spi]: Error, data read response (%02x)\n", rsp);
   23908:	2395      	movs	r3, #149	; 0x95
   2390a:	009a      	lsls	r2, r3, #2
   2390c:	499b      	ldr	r1, [pc, #620]	; (23b7c <spi_cmd_complete+0x77c>)
   2390e:	4b9c      	ldr	r3, [pc, #624]	; (23b80 <spi_cmd_complete+0x780>)
   23910:	0018      	movs	r0, r3
   23912:	4b9c      	ldr	r3, [pc, #624]	; (23b84 <spi_cmd_complete+0x784>)
   23914:	4798      	blx	r3
   23916:	2317      	movs	r3, #23
   23918:	18fb      	adds	r3, r7, r3
   2391a:	781b      	ldrb	r3, [r3, #0]
   2391c:	001a      	movs	r2, r3
   2391e:	4b9e      	ldr	r3, [pc, #632]	; (23b98 <spi_cmd_complete+0x798>)
   23920:	0011      	movs	r1, r2
   23922:	0018      	movs	r0, r3
   23924:	4b97      	ldr	r3, [pc, #604]	; (23b84 <spi_cmd_complete+0x784>)
   23926:	4798      	blx	r3
   23928:	4b98      	ldr	r3, [pc, #608]	; (23b8c <spi_cmd_complete+0x78c>)
   2392a:	0018      	movs	r0, r3
   2392c:	4b95      	ldr	r3, [pc, #596]	; (23b84 <spi_cmd_complete+0x784>)
   2392e:	4798      	blx	r3
				result = N_RESET;
   23930:	2301      	movs	r3, #1
   23932:	425b      	negs	r3, r3
   23934:	66bb      	str	r3, [r7, #104]	; 0x68
				return result;
   23936:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   23938:	e1c4      	b.n	23cc4 <spi_cmd_complete+0x8c4>
			}

			if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   2393a:	230f      	movs	r3, #15
   2393c:	18fb      	adds	r3, r7, r3
   2393e:	781b      	ldrb	r3, [r3, #0]
   23940:	2bc4      	cmp	r3, #196	; 0xc4
   23942:	d005      	beq.n	23950 <spi_cmd_complete+0x550>
   23944:	230f      	movs	r3, #15
   23946:	18fb      	adds	r3, r7, r3
   23948:	781b      	ldrb	r3, [r3, #0]
   2394a:	2bca      	cmp	r3, #202	; 0xca
   2394c:	d000      	beq.n	23950 <spi_cmd_complete+0x550>
   2394e:	e08e      	b.n	23a6e <spi_cmd_complete+0x66e>
				/**
				Read bytes
				**/
				if((rix+3) < len2) { 
   23950:	2376      	movs	r3, #118	; 0x76
   23952:	18fb      	adds	r3, r7, r3
   23954:	781b      	ldrb	r3, [r3, #0]
   23956:	3303      	adds	r3, #3
   23958:	001a      	movs	r2, r3
   2395a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2395c:	429a      	cmp	r2, r3
   2395e:	d23c      	bcs.n	239da <spi_cmd_complete+0x5da>
					b[0] = rb[rix++];
   23960:	2376      	movs	r3, #118	; 0x76
   23962:	18fb      	adds	r3, r7, r3
   23964:	781b      	ldrb	r3, [r3, #0]
   23966:	2276      	movs	r2, #118	; 0x76
   23968:	18ba      	adds	r2, r7, r2
   2396a:	1c59      	adds	r1, r3, #1
   2396c:	7011      	strb	r1, [r2, #0]
   2396e:	001a      	movs	r2, r3
   23970:	2318      	movs	r3, #24
   23972:	18fb      	adds	r3, r7, r3
   23974:	5c9a      	ldrb	r2, [r3, r2]
   23976:	687b      	ldr	r3, [r7, #4]
   23978:	701a      	strb	r2, [r3, #0]
					b[1] = rb[rix++];
   2397a:	687b      	ldr	r3, [r7, #4]
   2397c:	1c5a      	adds	r2, r3, #1
   2397e:	2376      	movs	r3, #118	; 0x76
   23980:	18fb      	adds	r3, r7, r3
   23982:	781b      	ldrb	r3, [r3, #0]
   23984:	2176      	movs	r1, #118	; 0x76
   23986:	1879      	adds	r1, r7, r1
   23988:	1c58      	adds	r0, r3, #1
   2398a:	7008      	strb	r0, [r1, #0]
   2398c:	0019      	movs	r1, r3
   2398e:	2318      	movs	r3, #24
   23990:	18fb      	adds	r3, r7, r3
   23992:	5c5b      	ldrb	r3, [r3, r1]
   23994:	7013      	strb	r3, [r2, #0]
					b[2] = rb[rix++];
   23996:	687b      	ldr	r3, [r7, #4]
   23998:	1c9a      	adds	r2, r3, #2
   2399a:	2376      	movs	r3, #118	; 0x76
   2399c:	18fb      	adds	r3, r7, r3
   2399e:	781b      	ldrb	r3, [r3, #0]
   239a0:	2176      	movs	r1, #118	; 0x76
   239a2:	1879      	adds	r1, r7, r1
   239a4:	1c58      	adds	r0, r3, #1
   239a6:	7008      	strb	r0, [r1, #0]
   239a8:	0019      	movs	r1, r3
   239aa:	2318      	movs	r3, #24
   239ac:	18fb      	adds	r3, r7, r3
   239ae:	5c5b      	ldrb	r3, [r3, r1]
   239b0:	7013      	strb	r3, [r2, #0]
					b[3] = rb[rix++];
   239b2:	687b      	ldr	r3, [r7, #4]
   239b4:	1cda      	adds	r2, r3, #3
   239b6:	2376      	movs	r3, #118	; 0x76
   239b8:	18fb      	adds	r3, r7, r3
   239ba:	781b      	ldrb	r3, [r3, #0]
   239bc:	2176      	movs	r1, #118	; 0x76
   239be:	1879      	adds	r1, r7, r1
   239c0:	1c58      	adds	r0, r3, #1
   239c2:	7008      	strb	r0, [r1, #0]
   239c4:	0019      	movs	r1, r3
   239c6:	2318      	movs	r3, #24
   239c8:	18fb      	adds	r3, r7, r3
   239ca:	5c5b      	ldrb	r3, [r3, r1]
   239cc:	7013      	strb	r3, [r2, #0]
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
					result = N_FAIL;
					return result;
				}

				if (!gu8Crc_off) {						
   239ce:	4b73      	ldr	r3, [pc, #460]	; (23b9c <spi_cmd_complete+0x79c>)
   239d0:	781b      	ldrb	r3, [r3, #0]
   239d2:	2b00      	cmp	r3, #0
   239d4:	d000      	beq.n	239d8 <spi_cmd_complete+0x5d8>
   239d6:	e174      	b.n	23cc2 <spi_cmd_complete+0x8c2>
   239d8:	e011      	b.n	239fe <spi_cmd_complete+0x5fe>
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
   239da:	4a71      	ldr	r2, [pc, #452]	; (23ba0 <spi_cmd_complete+0x7a0>)
   239dc:	4967      	ldr	r1, [pc, #412]	; (23b7c <spi_cmd_complete+0x77c>)
   239de:	4b68      	ldr	r3, [pc, #416]	; (23b80 <spi_cmd_complete+0x780>)
   239e0:	0018      	movs	r0, r3
   239e2:	4b68      	ldr	r3, [pc, #416]	; (23b84 <spi_cmd_complete+0x784>)
   239e4:	4798      	blx	r3
   239e6:	4b6f      	ldr	r3, [pc, #444]	; (23ba4 <spi_cmd_complete+0x7a4>)
   239e8:	0018      	movs	r0, r3
   239ea:	4b66      	ldr	r3, [pc, #408]	; (23b84 <spi_cmd_complete+0x784>)
   239ec:	4798      	blx	r3
   239ee:	4b67      	ldr	r3, [pc, #412]	; (23b8c <spi_cmd_complete+0x78c>)
   239f0:	0018      	movs	r0, r3
   239f2:	4b64      	ldr	r3, [pc, #400]	; (23b84 <spi_cmd_complete+0x784>)
   239f4:	4798      	blx	r3
					result = N_FAIL;
   239f6:	2300      	movs	r3, #0
   239f8:	66bb      	str	r3, [r7, #104]	; 0x68
					return result;
   239fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   239fc:	e162      	b.n	23cc4 <spi_cmd_complete+0x8c4>
					/**
					Read Crc
					**/
					if((rix+1) < len2) { 
   239fe:	2376      	movs	r3, #118	; 0x76
   23a00:	18fb      	adds	r3, r7, r3
   23a02:	781b      	ldrb	r3, [r3, #0]
   23a04:	3301      	adds	r3, #1
   23a06:	001a      	movs	r2, r3
   23a08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   23a0a:	429a      	cmp	r2, r3
   23a0c:	d21c      	bcs.n	23a48 <spi_cmd_complete+0x648>
						crc[0] = rb[rix++];
   23a0e:	2376      	movs	r3, #118	; 0x76
   23a10:	18fb      	adds	r3, r7, r3
   23a12:	781b      	ldrb	r3, [r3, #0]
   23a14:	2276      	movs	r2, #118	; 0x76
   23a16:	18ba      	adds	r2, r7, r2
   23a18:	1c59      	adds	r1, r3, #1
   23a1a:	7011      	strb	r1, [r2, #0]
   23a1c:	001a      	movs	r2, r3
   23a1e:	2318      	movs	r3, #24
   23a20:	18fb      	adds	r3, r7, r3
   23a22:	5c9a      	ldrb	r2, [r3, r2]
   23a24:	2314      	movs	r3, #20
   23a26:	18fb      	adds	r3, r7, r3
   23a28:	701a      	strb	r2, [r3, #0]
						crc[1] = rb[rix++];
   23a2a:	2376      	movs	r3, #118	; 0x76
   23a2c:	18fb      	adds	r3, r7, r3
   23a2e:	781b      	ldrb	r3, [r3, #0]
   23a30:	2276      	movs	r2, #118	; 0x76
   23a32:	18ba      	adds	r2, r7, r2
   23a34:	1c59      	adds	r1, r3, #1
   23a36:	7011      	strb	r1, [r2, #0]
   23a38:	001a      	movs	r2, r3
   23a3a:	2318      	movs	r3, #24
   23a3c:	18fb      	adds	r3, r7, r3
   23a3e:	5c9a      	ldrb	r2, [r3, r2]
   23a40:	2314      	movs	r3, #20
   23a42:	18fb      	adds	r3, r7, r3
   23a44:	705a      	strb	r2, [r3, #1]
				if (!gu8Crc_off) {						
   23a46:	e13c      	b.n	23cc2 <spi_cmd_complete+0x8c2>
					} else {
						M2M_ERR("[nmi spi]: buffer overrun when reading crc.\n");
   23a48:	239c      	movs	r3, #156	; 0x9c
   23a4a:	009a      	lsls	r2, r3, #2
   23a4c:	494b      	ldr	r1, [pc, #300]	; (23b7c <spi_cmd_complete+0x77c>)
   23a4e:	4b4c      	ldr	r3, [pc, #304]	; (23b80 <spi_cmd_complete+0x780>)
   23a50:	0018      	movs	r0, r3
   23a52:	4b4c      	ldr	r3, [pc, #304]	; (23b84 <spi_cmd_complete+0x784>)
   23a54:	4798      	blx	r3
   23a56:	4b54      	ldr	r3, [pc, #336]	; (23ba8 <spi_cmd_complete+0x7a8>)
   23a58:	0018      	movs	r0, r3
   23a5a:	4b4a      	ldr	r3, [pc, #296]	; (23b84 <spi_cmd_complete+0x784>)
   23a5c:	4798      	blx	r3
   23a5e:	4b4b      	ldr	r3, [pc, #300]	; (23b8c <spi_cmd_complete+0x78c>)
   23a60:	0018      	movs	r0, r3
   23a62:	4b48      	ldr	r3, [pc, #288]	; (23b84 <spi_cmd_complete+0x784>)
   23a64:	4798      	blx	r3
						result = N_FAIL;
   23a66:	2300      	movs	r3, #0
   23a68:	66bb      	str	r3, [r7, #104]	; 0x68
						return result;
   23a6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   23a6c:	e12a      	b.n	23cc4 <spi_cmd_complete+0x8c4>
					}
				}
			} else if((cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   23a6e:	230f      	movs	r3, #15
   23a70:	18fb      	adds	r3, r7, r3
   23a72:	781b      	ldrb	r3, [r3, #0]
   23a74:	2bc2      	cmp	r3, #194	; 0xc2
   23a76:	d005      	beq.n	23a84 <spi_cmd_complete+0x684>
   23a78:	230f      	movs	r3, #15
   23a7a:	18fb      	adds	r3, r7, r3
   23a7c:	781b      	ldrb	r3, [r3, #0]
   23a7e:	2bc8      	cmp	r3, #200	; 0xc8
   23a80:	d000      	beq.n	23a84 <spi_cmd_complete+0x684>
   23a82:	e11e      	b.n	23cc2 <spi_cmd_complete+0x8c2>
				int ix;

				/* some data may be read in response to dummy bytes. */
				for(ix=0; (rix < len2) && (ix < sz);) {
   23a84:	2300      	movs	r3, #0
   23a86:	663b      	str	r3, [r7, #96]	; 0x60
   23a88:	e011      	b.n	23aae <spi_cmd_complete+0x6ae>
					b[ix++] = rb[rix++];				
   23a8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   23a8c:	1c5a      	adds	r2, r3, #1
   23a8e:	663a      	str	r2, [r7, #96]	; 0x60
   23a90:	001a      	movs	r2, r3
   23a92:	687b      	ldr	r3, [r7, #4]
   23a94:	189a      	adds	r2, r3, r2
   23a96:	2376      	movs	r3, #118	; 0x76
   23a98:	18fb      	adds	r3, r7, r3
   23a9a:	781b      	ldrb	r3, [r3, #0]
   23a9c:	2176      	movs	r1, #118	; 0x76
   23a9e:	1879      	adds	r1, r7, r1
   23aa0:	1c58      	adds	r0, r3, #1
   23aa2:	7008      	strb	r0, [r1, #0]
   23aa4:	0019      	movs	r1, r3
   23aa6:	2318      	movs	r3, #24
   23aa8:	18fb      	adds	r3, r7, r3
   23aaa:	5c5b      	ldrb	r3, [r3, r1]
   23aac:	7013      	strb	r3, [r2, #0]
				for(ix=0; (rix < len2) && (ix < sz);) {
   23aae:	2376      	movs	r3, #118	; 0x76
   23ab0:	18fb      	adds	r3, r7, r3
   23ab2:	781a      	ldrb	r2, [r3, #0]
   23ab4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   23ab6:	429a      	cmp	r2, r3
   23ab8:	d203      	bcs.n	23ac2 <spi_cmd_complete+0x6c2>
   23aba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   23abc:	683b      	ldr	r3, [r7, #0]
   23abe:	429a      	cmp	r2, r3
   23ac0:	d3e3      	bcc.n	23a8a <spi_cmd_complete+0x68a>
				}
#if 0
				if(ix) M2M_INFO("ttt %d %d\n", sz, ix);
#endif
				sz -= ix;
   23ac2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   23ac4:	683a      	ldr	r2, [r7, #0]
   23ac6:	1ad3      	subs	r3, r2, r3
   23ac8:	603b      	str	r3, [r7, #0]

				if(sz > 0) {
   23aca:	683b      	ldr	r3, [r7, #0]
   23acc:	2b00      	cmp	r3, #0
   23ace:	d100      	bne.n	23ad2 <spi_cmd_complete+0x6d2>
   23ad0:	e0f1      	b.n	23cb6 <spi_cmd_complete+0x8b6>
					int nbytes;
					
					if (sz <= (DATA_PKT_SZ-ix)) {
   23ad2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   23ad4:	2280      	movs	r2, #128	; 0x80
   23ad6:	0192      	lsls	r2, r2, #6
   23ad8:	1ad3      	subs	r3, r2, r3
   23ada:	001a      	movs	r2, r3
   23adc:	683b      	ldr	r3, [r7, #0]
   23ade:	429a      	cmp	r2, r3
   23ae0:	d302      	bcc.n	23ae8 <spi_cmd_complete+0x6e8>
						nbytes = sz;
   23ae2:	683b      	ldr	r3, [r7, #0]
   23ae4:	65fb      	str	r3, [r7, #92]	; 0x5c
   23ae6:	e004      	b.n	23af2 <spi_cmd_complete+0x6f2>
					} else {
						nbytes = DATA_PKT_SZ-ix;
   23ae8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   23aea:	2280      	movs	r2, #128	; 0x80
   23aec:	0192      	lsls	r2, r2, #6
   23aee:	1ad3      	subs	r3, r2, r3
   23af0:	65fb      	str	r3, [r7, #92]	; 0x5c
					}

					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   23af2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   23af4:	687a      	ldr	r2, [r7, #4]
   23af6:	18d3      	adds	r3, r2, r3
   23af8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   23afa:	b292      	uxth	r2, r2
   23afc:	0011      	movs	r1, r2
   23afe:	0018      	movs	r0, r3
   23b00:	4b2a      	ldr	r3, [pc, #168]	; (23bac <spi_cmd_complete+0x7ac>)
   23b02:	4798      	blx	r3
   23b04:	1e03      	subs	r3, r0, #0
   23b06:	d010      	beq.n	23b2a <spi_cmd_complete+0x72a>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   23b08:	4a29      	ldr	r2, [pc, #164]	; (23bb0 <spi_cmd_complete+0x7b0>)
   23b0a:	491c      	ldr	r1, [pc, #112]	; (23b7c <spi_cmd_complete+0x77c>)
   23b0c:	4b1c      	ldr	r3, [pc, #112]	; (23b80 <spi_cmd_complete+0x780>)
   23b0e:	0018      	movs	r0, r3
   23b10:	4b1c      	ldr	r3, [pc, #112]	; (23b84 <spi_cmd_complete+0x784>)
   23b12:	4798      	blx	r3
   23b14:	4b27      	ldr	r3, [pc, #156]	; (23bb4 <spi_cmd_complete+0x7b4>)
   23b16:	0018      	movs	r0, r3
   23b18:	4b1a      	ldr	r3, [pc, #104]	; (23b84 <spi_cmd_complete+0x784>)
   23b1a:	4798      	blx	r3
   23b1c:	4b1b      	ldr	r3, [pc, #108]	; (23b8c <spi_cmd_complete+0x78c>)
   23b1e:	0018      	movs	r0, r3
   23b20:	4b18      	ldr	r3, [pc, #96]	; (23b84 <spi_cmd_complete+0x784>)
   23b22:	4798      	blx	r3
						result = N_FAIL;
   23b24:	2300      	movs	r3, #0
   23b26:	66bb      	str	r3, [r7, #104]	; 0x68
						goto _error_;
   23b28:	e0cb      	b.n	23cc2 <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   23b2a:	4b1c      	ldr	r3, [pc, #112]	; (23b9c <spi_cmd_complete+0x79c>)
   23b2c:	781b      	ldrb	r3, [r3, #0]
   23b2e:	2b00      	cmp	r3, #0
   23b30:	d119      	bne.n	23b66 <spi_cmd_complete+0x766>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   23b32:	2314      	movs	r3, #20
   23b34:	18fb      	adds	r3, r7, r3
   23b36:	2102      	movs	r1, #2
   23b38:	0018      	movs	r0, r3
   23b3a:	4b1c      	ldr	r3, [pc, #112]	; (23bac <spi_cmd_complete+0x7ac>)
   23b3c:	4798      	blx	r3
   23b3e:	1e03      	subs	r3, r0, #0
   23b40:	d011      	beq.n	23b66 <spi_cmd_complete+0x766>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   23b42:	23a6      	movs	r3, #166	; 0xa6
   23b44:	009a      	lsls	r2, r3, #2
   23b46:	490d      	ldr	r1, [pc, #52]	; (23b7c <spi_cmd_complete+0x77c>)
   23b48:	4b0d      	ldr	r3, [pc, #52]	; (23b80 <spi_cmd_complete+0x780>)
   23b4a:	0018      	movs	r0, r3
   23b4c:	4b0d      	ldr	r3, [pc, #52]	; (23b84 <spi_cmd_complete+0x784>)
   23b4e:	4798      	blx	r3
   23b50:	4b19      	ldr	r3, [pc, #100]	; (23bb8 <spi_cmd_complete+0x7b8>)
   23b52:	0018      	movs	r0, r3
   23b54:	4b0b      	ldr	r3, [pc, #44]	; (23b84 <spi_cmd_complete+0x784>)
   23b56:	4798      	blx	r3
   23b58:	4b0c      	ldr	r3, [pc, #48]	; (23b8c <spi_cmd_complete+0x78c>)
   23b5a:	0018      	movs	r0, r3
   23b5c:	4b09      	ldr	r3, [pc, #36]	; (23b84 <spi_cmd_complete+0x784>)
   23b5e:	4798      	blx	r3
							result = N_FAIL;
   23b60:	2300      	movs	r3, #0
   23b62:	66bb      	str	r3, [r7, #104]	; 0x68
							goto _error_;
   23b64:	e0ad      	b.n	23cc2 <spi_cmd_complete+0x8c2>
						}
					}

					
					ix += nbytes;
   23b66:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   23b68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   23b6a:	18d3      	adds	r3, r2, r3
   23b6c:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   23b6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   23b70:	683a      	ldr	r2, [r7, #0]
   23b72:	1ad3      	subs	r3, r2, r3
   23b74:	603b      	str	r3, [r7, #0]
				}

				/*  if any data in left unread, then read the rest using normal DMA code.*/	
				while(sz > 0) {
   23b76:	e09e      	b.n	23cb6 <spi_cmd_complete+0x8b6>
   23b78:	0000022f 	.word	0x0000022f
   23b7c:	00039d74 	.word	0x00039d74
   23b80:	00039760 	.word	0x00039760
   23b84:	0001dc4d 	.word	0x0001dc4d
   23b88:	00039858 	.word	0x00039858
   23b8c:	000397a0 	.word	0x000397a0
   23b90:	00000239 	.word	0x00000239
   23b94:	00039894 	.word	0x00039894
   23b98:	000398c8 	.word	0x000398c8
   23b9c:	20003ccc 	.word	0x20003ccc
   23ba0:	00000263 	.word	0x00000263
   23ba4:	000398f8 	.word	0x000398f8
   23ba8:	00039928 	.word	0x00039928
   23bac:	00022d39 	.word	0x00022d39
   23bb0:	0000028e 	.word	0x0000028e
   23bb4:	00039958 	.word	0x00039958
   23bb8:	0003998c 	.word	0x0003998c
					int nbytes;
			
					if (sz <= DATA_PKT_SZ) {
   23bbc:	683a      	ldr	r2, [r7, #0]
   23bbe:	2380      	movs	r3, #128	; 0x80
   23bc0:	019b      	lsls	r3, r3, #6
   23bc2:	429a      	cmp	r2, r3
   23bc4:	d802      	bhi.n	23bcc <spi_cmd_complete+0x7cc>
						nbytes = sz;
   23bc6:	683b      	ldr	r3, [r7, #0]
   23bc8:	65bb      	str	r3, [r7, #88]	; 0x58
   23bca:	e002      	b.n	23bd2 <spi_cmd_complete+0x7d2>
					} else {
						nbytes = DATA_PKT_SZ;
   23bcc:	2380      	movs	r3, #128	; 0x80
   23bce:	019b      	lsls	r3, r3, #6
   23bd0:	65bb      	str	r3, [r7, #88]	; 0x58
					handled above for the first DMA.
					**/
					/**
					Data Respnose header
					**/
					retry = SPI_RESP_RETRY_COUNT;
   23bd2:	230a      	movs	r3, #10
   23bd4:	667b      	str	r3, [r7, #100]	; 0x64
					do {
						if (nmi_spi_read(&rsp, 1) != M2M_SUCCESS) {
   23bd6:	2317      	movs	r3, #23
   23bd8:	18fb      	adds	r3, r7, r3
   23bda:	2101      	movs	r1, #1
   23bdc:	0018      	movs	r0, r3
   23bde:	4b3b      	ldr	r3, [pc, #236]	; (23ccc <spi_cmd_complete+0x8cc>)
   23be0:	4798      	blx	r3
   23be2:	1e03      	subs	r3, r0, #0
   23be4:	d011      	beq.n	23c0a <spi_cmd_complete+0x80a>
							M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
   23be6:	23ae      	movs	r3, #174	; 0xae
   23be8:	009a      	lsls	r2, r3, #2
   23bea:	4939      	ldr	r1, [pc, #228]	; (23cd0 <spi_cmd_complete+0x8d0>)
   23bec:	4b39      	ldr	r3, [pc, #228]	; (23cd4 <spi_cmd_complete+0x8d4>)
   23bee:	0018      	movs	r0, r3
   23bf0:	4b39      	ldr	r3, [pc, #228]	; (23cd8 <spi_cmd_complete+0x8d8>)
   23bf2:	4798      	blx	r3
   23bf4:	4b39      	ldr	r3, [pc, #228]	; (23cdc <spi_cmd_complete+0x8dc>)
   23bf6:	0018      	movs	r0, r3
   23bf8:	4b37      	ldr	r3, [pc, #220]	; (23cd8 <spi_cmd_complete+0x8d8>)
   23bfa:	4798      	blx	r3
   23bfc:	4b38      	ldr	r3, [pc, #224]	; (23ce0 <spi_cmd_complete+0x8e0>)
   23bfe:	0018      	movs	r0, r3
   23c00:	4b35      	ldr	r3, [pc, #212]	; (23cd8 <spi_cmd_complete+0x8d8>)
   23c02:	4798      	blx	r3
							result = N_FAIL;
   23c04:	2300      	movs	r3, #0
   23c06:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   23c08:	e010      	b.n	23c2c <spi_cmd_complete+0x82c>
						}
						if (((rsp >> 4) & 0xf) == 0xf)
   23c0a:	2317      	movs	r3, #23
   23c0c:	18fb      	adds	r3, r7, r3
   23c0e:	781b      	ldrb	r3, [r3, #0]
   23c10:	091b      	lsrs	r3, r3, #4
   23c12:	b2db      	uxtb	r3, r3
   23c14:	001a      	movs	r2, r3
   23c16:	230f      	movs	r3, #15
   23c18:	4013      	ands	r3, r2
   23c1a:	2b0f      	cmp	r3, #15
   23c1c:	d005      	beq.n	23c2a <spi_cmd_complete+0x82a>
							break;
					} while (retry--);
   23c1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   23c20:	1e5a      	subs	r2, r3, #1
   23c22:	667a      	str	r2, [r7, #100]	; 0x64
   23c24:	2b00      	cmp	r3, #0
   23c26:	d1d6      	bne.n	23bd6 <spi_cmd_complete+0x7d6>
   23c28:	e000      	b.n	23c2c <spi_cmd_complete+0x82c>
							break;
   23c2a:	46c0      	nop			; (mov r8, r8)

					if (result == N_FAIL)
   23c2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   23c2e:	2b00      	cmp	r3, #0
   23c30:	d046      	beq.n	23cc0 <spi_cmd_complete+0x8c0>


					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   23c32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   23c34:	687a      	ldr	r2, [r7, #4]
   23c36:	18d3      	adds	r3, r2, r3
   23c38:	6dba      	ldr	r2, [r7, #88]	; 0x58
   23c3a:	b292      	uxth	r2, r2
   23c3c:	0011      	movs	r1, r2
   23c3e:	0018      	movs	r0, r3
   23c40:	4b22      	ldr	r3, [pc, #136]	; (23ccc <spi_cmd_complete+0x8cc>)
   23c42:	4798      	blx	r3
   23c44:	1e03      	subs	r3, r0, #0
   23c46:	d011      	beq.n	23c6c <spi_cmd_complete+0x86c>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   23c48:	23b2      	movs	r3, #178	; 0xb2
   23c4a:	009a      	lsls	r2, r3, #2
   23c4c:	4920      	ldr	r1, [pc, #128]	; (23cd0 <spi_cmd_complete+0x8d0>)
   23c4e:	4b21      	ldr	r3, [pc, #132]	; (23cd4 <spi_cmd_complete+0x8d4>)
   23c50:	0018      	movs	r0, r3
   23c52:	4b21      	ldr	r3, [pc, #132]	; (23cd8 <spi_cmd_complete+0x8d8>)
   23c54:	4798      	blx	r3
   23c56:	4b23      	ldr	r3, [pc, #140]	; (23ce4 <spi_cmd_complete+0x8e4>)
   23c58:	0018      	movs	r0, r3
   23c5a:	4b1f      	ldr	r3, [pc, #124]	; (23cd8 <spi_cmd_complete+0x8d8>)
   23c5c:	4798      	blx	r3
   23c5e:	4b20      	ldr	r3, [pc, #128]	; (23ce0 <spi_cmd_complete+0x8e0>)
   23c60:	0018      	movs	r0, r3
   23c62:	4b1d      	ldr	r3, [pc, #116]	; (23cd8 <spi_cmd_complete+0x8d8>)
   23c64:	4798      	blx	r3
						result = N_FAIL;
   23c66:	2300      	movs	r3, #0
   23c68:	66bb      	str	r3, [r7, #104]	; 0x68
						break;
   23c6a:	e02a      	b.n	23cc2 <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   23c6c:	4b1e      	ldr	r3, [pc, #120]	; (23ce8 <spi_cmd_complete+0x8e8>)
   23c6e:	781b      	ldrb	r3, [r3, #0]
   23c70:	2b00      	cmp	r3, #0
   23c72:	d118      	bne.n	23ca6 <spi_cmd_complete+0x8a6>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   23c74:	2314      	movs	r3, #20
   23c76:	18fb      	adds	r3, r7, r3
   23c78:	2102      	movs	r1, #2
   23c7a:	0018      	movs	r0, r3
   23c7c:	4b13      	ldr	r3, [pc, #76]	; (23ccc <spi_cmd_complete+0x8cc>)
   23c7e:	4798      	blx	r3
   23c80:	1e03      	subs	r3, r0, #0
   23c82:	d010      	beq.n	23ca6 <spi_cmd_complete+0x8a6>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   23c84:	4a19      	ldr	r2, [pc, #100]	; (23cec <spi_cmd_complete+0x8ec>)
   23c86:	4912      	ldr	r1, [pc, #72]	; (23cd0 <spi_cmd_complete+0x8d0>)
   23c88:	4b12      	ldr	r3, [pc, #72]	; (23cd4 <spi_cmd_complete+0x8d4>)
   23c8a:	0018      	movs	r0, r3
   23c8c:	4b12      	ldr	r3, [pc, #72]	; (23cd8 <spi_cmd_complete+0x8d8>)
   23c8e:	4798      	blx	r3
   23c90:	4b17      	ldr	r3, [pc, #92]	; (23cf0 <spi_cmd_complete+0x8f0>)
   23c92:	0018      	movs	r0, r3
   23c94:	4b10      	ldr	r3, [pc, #64]	; (23cd8 <spi_cmd_complete+0x8d8>)
   23c96:	4798      	blx	r3
   23c98:	4b11      	ldr	r3, [pc, #68]	; (23ce0 <spi_cmd_complete+0x8e0>)
   23c9a:	0018      	movs	r0, r3
   23c9c:	4b0e      	ldr	r3, [pc, #56]	; (23cd8 <spi_cmd_complete+0x8d8>)
   23c9e:	4798      	blx	r3
							result = N_FAIL;
   23ca0:	2300      	movs	r3, #0
   23ca2:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   23ca4:	e00d      	b.n	23cc2 <spi_cmd_complete+0x8c2>
						}
					}

					ix += nbytes;
   23ca6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   23ca8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   23caa:	18d3      	adds	r3, r2, r3
   23cac:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   23cae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   23cb0:	683a      	ldr	r2, [r7, #0]
   23cb2:	1ad3      	subs	r3, r2, r3
   23cb4:	603b      	str	r3, [r7, #0]
				while(sz > 0) {
   23cb6:	683b      	ldr	r3, [r7, #0]
   23cb8:	2b00      	cmp	r3, #0
   23cba:	d000      	beq.n	23cbe <spi_cmd_complete+0x8be>
   23cbc:	e77e      	b.n	23bbc <spi_cmd_complete+0x7bc>
   23cbe:	e000      	b.n	23cc2 <spi_cmd_complete+0x8c2>
						break;
   23cc0:	46c0      	nop			; (mov r8, r8)
				}
			}
	}
_error_:
	return result;
   23cc2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
   23cc4:	0018      	movs	r0, r3
   23cc6:	46bd      	mov	sp, r7
   23cc8:	b01f      	add	sp, #124	; 0x7c
   23cca:	bd90      	pop	{r4, r7, pc}
   23ccc:	00022d39 	.word	0x00022d39
   23cd0:	00039d74 	.word	0x00039d74
   23cd4:	00039760 	.word	0x00039760
   23cd8:	0001dc4d 	.word	0x0001dc4d
   23cdc:	000399c4 	.word	0x000399c4
   23ce0:	000397a0 	.word	0x000397a0
   23ce4:	00039958 	.word	0x00039958
   23ce8:	20003ccc 	.word	0x20003ccc
   23cec:	000002d2 	.word	0x000002d2
   23cf0:	0003998c 	.word	0x0003998c

00023cf4 <spi_data_write>:

	return result;
}

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
   23cf4:	b580      	push	{r7, lr}
   23cf6:	b086      	sub	sp, #24
   23cf8:	af00      	add	r7, sp, #0
   23cfa:	6078      	str	r0, [r7, #4]
   23cfc:	000a      	movs	r2, r1
   23cfe:	1cbb      	adds	r3, r7, #2
   23d00:	801a      	strh	r2, [r3, #0]
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
   23d02:	2313      	movs	r3, #19
   23d04:	18fb      	adds	r3, r7, r3
   23d06:	2201      	movs	r2, #1
   23d08:	701a      	strb	r2, [r3, #0]
	uint8 cmd, order, crc[2] = {0};
   23d0a:	230c      	movs	r3, #12
   23d0c:	18fb      	adds	r3, r7, r3
   23d0e:	2200      	movs	r2, #0
   23d10:	801a      	strh	r2, [r3, #0]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
   23d12:	2316      	movs	r3, #22
   23d14:	18fb      	adds	r3, r7, r3
   23d16:	2200      	movs	r2, #0
   23d18:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
   23d1a:	1cbb      	adds	r3, r7, #2
   23d1c:	881a      	ldrh	r2, [r3, #0]
   23d1e:	2380      	movs	r3, #128	; 0x80
   23d20:	019b      	lsls	r3, r3, #6
   23d22:	429a      	cmp	r2, r3
   23d24:	d805      	bhi.n	23d32 <spi_data_write+0x3e>
			nbytes = sz;
   23d26:	2314      	movs	r3, #20
   23d28:	18fb      	adds	r3, r7, r3
   23d2a:	1cba      	adds	r2, r7, #2
   23d2c:	8812      	ldrh	r2, [r2, #0]
   23d2e:	801a      	strh	r2, [r3, #0]
   23d30:	e004      	b.n	23d3c <spi_data_write+0x48>
		else
			nbytes = DATA_PKT_SZ;
   23d32:	2314      	movs	r3, #20
   23d34:	18fb      	adds	r3, r7, r3
   23d36:	2280      	movs	r2, #128	; 0x80
   23d38:	0192      	lsls	r2, r2, #6
   23d3a:	801a      	strh	r2, [r3, #0]

		/**
			Write command
		**/
		cmd = 0xf0;
   23d3c:	2311      	movs	r3, #17
   23d3e:	18fb      	adds	r3, r7, r3
   23d40:	22f0      	movs	r2, #240	; 0xf0
   23d42:	701a      	strb	r2, [r3, #0]
		if (ix == 0)  {
   23d44:	2316      	movs	r3, #22
   23d46:	18fb      	adds	r3, r7, r3
   23d48:	2200      	movs	r2, #0
   23d4a:	5e9b      	ldrsh	r3, [r3, r2]
   23d4c:	2b00      	cmp	r3, #0
   23d4e:	d10f      	bne.n	23d70 <spi_data_write+0x7c>
			if (sz <= DATA_PKT_SZ)
   23d50:	1cbb      	adds	r3, r7, #2
   23d52:	881a      	ldrh	r2, [r3, #0]
   23d54:	2380      	movs	r3, #128	; 0x80
   23d56:	019b      	lsls	r3, r3, #6
   23d58:	429a      	cmp	r2, r3
   23d5a:	d804      	bhi.n	23d66 <spi_data_write+0x72>
				order = 0x3;
   23d5c:	2312      	movs	r3, #18
   23d5e:	18fb      	adds	r3, r7, r3
   23d60:	2203      	movs	r2, #3
   23d62:	701a      	strb	r2, [r3, #0]
   23d64:	e013      	b.n	23d8e <spi_data_write+0x9a>
			else
				order = 0x1;
   23d66:	2312      	movs	r3, #18
   23d68:	18fb      	adds	r3, r7, r3
   23d6a:	2201      	movs	r2, #1
   23d6c:	701a      	strb	r2, [r3, #0]
   23d6e:	e00e      	b.n	23d8e <spi_data_write+0x9a>
		} else {
			if (sz <= DATA_PKT_SZ)
   23d70:	1cbb      	adds	r3, r7, #2
   23d72:	881a      	ldrh	r2, [r3, #0]
   23d74:	2380      	movs	r3, #128	; 0x80
   23d76:	019b      	lsls	r3, r3, #6
   23d78:	429a      	cmp	r2, r3
   23d7a:	d804      	bhi.n	23d86 <spi_data_write+0x92>
				order = 0x3;
   23d7c:	2312      	movs	r3, #18
   23d7e:	18fb      	adds	r3, r7, r3
   23d80:	2203      	movs	r2, #3
   23d82:	701a      	strb	r2, [r3, #0]
   23d84:	e003      	b.n	23d8e <spi_data_write+0x9a>
			else
				order = 0x2;
   23d86:	2312      	movs	r3, #18
   23d88:	18fb      	adds	r3, r7, r3
   23d8a:	2202      	movs	r2, #2
   23d8c:	701a      	strb	r2, [r3, #0]
		}
		cmd |= order;
   23d8e:	2311      	movs	r3, #17
   23d90:	18fb      	adds	r3, r7, r3
   23d92:	781a      	ldrb	r2, [r3, #0]
   23d94:	2312      	movs	r3, #18
   23d96:	18fb      	adds	r3, r7, r3
   23d98:	781b      	ldrb	r3, [r3, #0]
   23d9a:	4313      	orrs	r3, r2
   23d9c:	b2da      	uxtb	r2, r3
   23d9e:	2311      	movs	r3, #17
   23da0:	18fb      	adds	r3, r7, r3
   23da2:	701a      	strb	r2, [r3, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
   23da4:	2311      	movs	r3, #17
   23da6:	18fb      	adds	r3, r7, r3
   23da8:	2101      	movs	r1, #1
   23daa:	0018      	movs	r0, r3
   23dac:	4b3c      	ldr	r3, [pc, #240]	; (23ea0 <spi_data_write+0x1ac>)
   23dae:	4798      	blx	r3
   23db0:	1e03      	subs	r3, r0, #0
   23db2:	d012      	beq.n	23dda <spi_data_write+0xe6>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
   23db4:	4a3b      	ldr	r2, [pc, #236]	; (23ea4 <spi_data_write+0x1b0>)
   23db6:	493c      	ldr	r1, [pc, #240]	; (23ea8 <spi_data_write+0x1b4>)
   23db8:	4b3c      	ldr	r3, [pc, #240]	; (23eac <spi_data_write+0x1b8>)
   23dba:	0018      	movs	r0, r3
   23dbc:	4b3c      	ldr	r3, [pc, #240]	; (23eb0 <spi_data_write+0x1bc>)
   23dbe:	4798      	blx	r3
   23dc0:	4b3c      	ldr	r3, [pc, #240]	; (23eb4 <spi_data_write+0x1c0>)
   23dc2:	0018      	movs	r0, r3
   23dc4:	4b3a      	ldr	r3, [pc, #232]	; (23eb0 <spi_data_write+0x1bc>)
   23dc6:	4798      	blx	r3
   23dc8:	4b3b      	ldr	r3, [pc, #236]	; (23eb8 <spi_data_write+0x1c4>)
   23dca:	0018      	movs	r0, r3
   23dcc:	4b38      	ldr	r3, [pc, #224]	; (23eb0 <spi_data_write+0x1bc>)
   23dce:	4798      	blx	r3
			result = N_FAIL;
   23dd0:	2313      	movs	r3, #19
   23dd2:	18fb      	adds	r3, r7, r3
   23dd4:	2200      	movs	r2, #0
   23dd6:	701a      	strb	r2, [r3, #0]
			break;
   23dd8:	e059      	b.n	23e8e <spi_data_write+0x19a>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
   23dda:	2316      	movs	r3, #22
   23ddc:	18fb      	adds	r3, r7, r3
   23dde:	2200      	movs	r2, #0
   23de0:	5e9b      	ldrsh	r3, [r3, r2]
   23de2:	687a      	ldr	r2, [r7, #4]
   23de4:	18d2      	adds	r2, r2, r3
   23de6:	2314      	movs	r3, #20
   23de8:	18fb      	adds	r3, r7, r3
   23dea:	881b      	ldrh	r3, [r3, #0]
   23dec:	0019      	movs	r1, r3
   23dee:	0010      	movs	r0, r2
   23df0:	4b2b      	ldr	r3, [pc, #172]	; (23ea0 <spi_data_write+0x1ac>)
   23df2:	4798      	blx	r3
   23df4:	1e03      	subs	r3, r0, #0
   23df6:	d012      	beq.n	23e1e <spi_data_write+0x12a>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
   23df8:	4a30      	ldr	r2, [pc, #192]	; (23ebc <spi_data_write+0x1c8>)
   23dfa:	492b      	ldr	r1, [pc, #172]	; (23ea8 <spi_data_write+0x1b4>)
   23dfc:	4b2b      	ldr	r3, [pc, #172]	; (23eac <spi_data_write+0x1b8>)
   23dfe:	0018      	movs	r0, r3
   23e00:	4b2b      	ldr	r3, [pc, #172]	; (23eb0 <spi_data_write+0x1bc>)
   23e02:	4798      	blx	r3
   23e04:	4b2e      	ldr	r3, [pc, #184]	; (23ec0 <spi_data_write+0x1cc>)
   23e06:	0018      	movs	r0, r3
   23e08:	4b29      	ldr	r3, [pc, #164]	; (23eb0 <spi_data_write+0x1bc>)
   23e0a:	4798      	blx	r3
   23e0c:	4b2a      	ldr	r3, [pc, #168]	; (23eb8 <spi_data_write+0x1c4>)
   23e0e:	0018      	movs	r0, r3
   23e10:	4b27      	ldr	r3, [pc, #156]	; (23eb0 <spi_data_write+0x1bc>)
   23e12:	4798      	blx	r3
			result = N_FAIL;
   23e14:	2313      	movs	r3, #19
   23e16:	18fb      	adds	r3, r7, r3
   23e18:	2200      	movs	r2, #0
   23e1a:	701a      	strb	r2, [r3, #0]
			break;
   23e1c:	e037      	b.n	23e8e <spi_data_write+0x19a>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
   23e1e:	4b29      	ldr	r3, [pc, #164]	; (23ec4 <spi_data_write+0x1d0>)
   23e20:	781b      	ldrb	r3, [r3, #0]
   23e22:	2b00      	cmp	r3, #0
   23e24:	d11b      	bne.n	23e5e <spi_data_write+0x16a>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
   23e26:	230c      	movs	r3, #12
   23e28:	18fb      	adds	r3, r7, r3
   23e2a:	2102      	movs	r1, #2
   23e2c:	0018      	movs	r0, r3
   23e2e:	4b1c      	ldr	r3, [pc, #112]	; (23ea0 <spi_data_write+0x1ac>)
   23e30:	4798      	blx	r3
   23e32:	1e03      	subs	r3, r0, #0
   23e34:	d013      	beq.n	23e5e <spi_data_write+0x16a>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
   23e36:	23d7      	movs	r3, #215	; 0xd7
   23e38:	009a      	lsls	r2, r3, #2
   23e3a:	491b      	ldr	r1, [pc, #108]	; (23ea8 <spi_data_write+0x1b4>)
   23e3c:	4b1b      	ldr	r3, [pc, #108]	; (23eac <spi_data_write+0x1b8>)
   23e3e:	0018      	movs	r0, r3
   23e40:	4b1b      	ldr	r3, [pc, #108]	; (23eb0 <spi_data_write+0x1bc>)
   23e42:	4798      	blx	r3
   23e44:	4b20      	ldr	r3, [pc, #128]	; (23ec8 <spi_data_write+0x1d4>)
   23e46:	0018      	movs	r0, r3
   23e48:	4b19      	ldr	r3, [pc, #100]	; (23eb0 <spi_data_write+0x1bc>)
   23e4a:	4798      	blx	r3
   23e4c:	4b1a      	ldr	r3, [pc, #104]	; (23eb8 <spi_data_write+0x1c4>)
   23e4e:	0018      	movs	r0, r3
   23e50:	4b17      	ldr	r3, [pc, #92]	; (23eb0 <spi_data_write+0x1bc>)
   23e52:	4798      	blx	r3
				result = N_FAIL;
   23e54:	2313      	movs	r3, #19
   23e56:	18fb      	adds	r3, r7, r3
   23e58:	2200      	movs	r2, #0
   23e5a:	701a      	strb	r2, [r3, #0]
				break;
   23e5c:	e017      	b.n	23e8e <spi_data_write+0x19a>
			}
		}

		ix += nbytes;
   23e5e:	2316      	movs	r3, #22
   23e60:	18fb      	adds	r3, r7, r3
   23e62:	881a      	ldrh	r2, [r3, #0]
   23e64:	2314      	movs	r3, #20
   23e66:	18fb      	adds	r3, r7, r3
   23e68:	881b      	ldrh	r3, [r3, #0]
   23e6a:	18d3      	adds	r3, r2, r3
   23e6c:	b29a      	uxth	r2, r3
   23e6e:	2316      	movs	r3, #22
   23e70:	18fb      	adds	r3, r7, r3
   23e72:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
   23e74:	1cbb      	adds	r3, r7, #2
   23e76:	1cb9      	adds	r1, r7, #2
   23e78:	2214      	movs	r2, #20
   23e7a:	18ba      	adds	r2, r7, r2
   23e7c:	8809      	ldrh	r1, [r1, #0]
   23e7e:	8812      	ldrh	r2, [r2, #0]
   23e80:	1a8a      	subs	r2, r1, r2
   23e82:	801a      	strh	r2, [r3, #0]
	} while (sz);
   23e84:	1cbb      	adds	r3, r7, #2
   23e86:	881b      	ldrh	r3, [r3, #0]
   23e88:	2b00      	cmp	r3, #0
   23e8a:	d000      	beq.n	23e8e <spi_data_write+0x19a>
   23e8c:	e745      	b.n	23d1a <spi_data_write+0x26>


	return result;
   23e8e:	2313      	movs	r3, #19
   23e90:	18fb      	adds	r3, r7, r3
   23e92:	781b      	ldrb	r3, [r3, #0]
   23e94:	b25b      	sxtb	r3, r3
}
   23e96:	0018      	movs	r0, r3
   23e98:	46bd      	mov	sp, r7
   23e9a:	b006      	add	sp, #24
   23e9c:	bd80      	pop	{r7, pc}
   23e9e:	46c0      	nop			; (mov r8, r8)
   23ea0:	00022d7d 	.word	0x00022d7d
   23ea4:	00000349 	.word	0x00000349
   23ea8:	00039d88 	.word	0x00039d88
   23eac:	00039760 	.word	0x00039760
   23eb0:	0001dc4d 	.word	0x0001dc4d
   23eb4:	00039a28 	.word	0x00039a28
   23eb8:	000397a0 	.word	0x000397a0
   23ebc:	00000352 	.word	0x00000352
   23ec0:	00039a60 	.word	0x00039a60
   23ec4:	20003ccc 	.word	0x20003ccc
   23ec8:	00039a94 	.word	0x00039a94

00023ecc <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
   23ecc:	b590      	push	{r4, r7, lr}
   23ece:	b087      	sub	sp, #28
   23ed0:	af02      	add	r7, sp, #8
   23ed2:	6078      	str	r0, [r7, #4]
   23ed4:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   23ed6:	230f      	movs	r3, #15
   23ed8:	18fb      	adds	r3, r7, r3
   23eda:	220a      	movs	r2, #10
   23edc:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   23ede:	230c      	movs	r3, #12
   23ee0:	18fb      	adds	r3, r7, r3
   23ee2:	2201      	movs	r2, #1
   23ee4:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_WRITE;
   23ee6:	230e      	movs	r3, #14
   23ee8:	18fb      	adds	r3, r7, r3
   23eea:	22c9      	movs	r2, #201	; 0xc9
   23eec:	701a      	strb	r2, [r3, #0]
	uint8 clockless = 0;
   23eee:	230d      	movs	r3, #13
   23ef0:	18fb      	adds	r3, r7, r3
   23ef2:	2200      	movs	r2, #0
   23ef4:	701a      	strb	r2, [r3, #0]
	
_RETRY_:	
	if (addr <= 0x30)
   23ef6:	687b      	ldr	r3, [r7, #4]
   23ef8:	2b30      	cmp	r3, #48	; 0x30
   23efa:	d808      	bhi.n	23f0e <spi_write_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
   23efc:	230e      	movs	r3, #14
   23efe:	18fb      	adds	r3, r7, r3
   23f00:	22c3      	movs	r2, #195	; 0xc3
   23f02:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   23f04:	230d      	movs	r3, #13
   23f06:	18fb      	adds	r3, r7, r3
   23f08:	2201      	movs	r2, #1
   23f0a:	701a      	strb	r2, [r3, #0]
   23f0c:	e007      	b.n	23f1e <spi_write_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
   23f0e:	230e      	movs	r3, #14
   23f10:	18fb      	adds	r3, r7, r3
   23f12:	22c9      	movs	r2, #201	; 0xc9
   23f14:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   23f16:	230d      	movs	r3, #13
   23f18:	18fb      	adds	r3, r7, r3
   23f1a:	2200      	movs	r2, #0
   23f1c:	701a      	strb	r2, [r3, #0]
		goto _FAIL_;
	}

#else

	result = spi_cmd_complete(cmd, addr, (uint8*)&u32data, 4, clockless);
   23f1e:	003a      	movs	r2, r7
   23f20:	6879      	ldr	r1, [r7, #4]
   23f22:	230e      	movs	r3, #14
   23f24:	18fb      	adds	r3, r7, r3
   23f26:	7818      	ldrb	r0, [r3, #0]
   23f28:	230d      	movs	r3, #13
   23f2a:	18fb      	adds	r3, r7, r3
   23f2c:	781b      	ldrb	r3, [r3, #0]
   23f2e:	9300      	str	r3, [sp, #0]
   23f30:	2304      	movs	r3, #4
   23f32:	4c2e      	ldr	r4, [pc, #184]	; (23fec <spi_write_reg+0x120>)
   23f34:	47a0      	blx	r4
   23f36:	0002      	movs	r2, r0
   23f38:	230c      	movs	r3, #12
   23f3a:	18fb      	adds	r3, r7, r3
   23f3c:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   23f3e:	230c      	movs	r3, #12
   23f40:	18fb      	adds	r3, r7, r3
   23f42:	781b      	ldrb	r3, [r3, #0]
   23f44:	b25b      	sxtb	r3, r3
   23f46:	2b01      	cmp	r3, #1
   23f48:	d010      	beq.n	23f6c <spi_write_reg+0xa0>
		M2M_ERR( "[nmi spi]: Failed cmd, write reg (%08x)...\n", addr);
   23f4a:	4a29      	ldr	r2, [pc, #164]	; (23ff0 <spi_write_reg+0x124>)
   23f4c:	4929      	ldr	r1, [pc, #164]	; (23ff4 <spi_write_reg+0x128>)
   23f4e:	4b2a      	ldr	r3, [pc, #168]	; (23ff8 <spi_write_reg+0x12c>)
   23f50:	0018      	movs	r0, r3
   23f52:	4b2a      	ldr	r3, [pc, #168]	; (23ffc <spi_write_reg+0x130>)
   23f54:	4798      	blx	r3
   23f56:	687a      	ldr	r2, [r7, #4]
   23f58:	4b29      	ldr	r3, [pc, #164]	; (24000 <spi_write_reg+0x134>)
   23f5a:	0011      	movs	r1, r2
   23f5c:	0018      	movs	r0, r3
   23f5e:	4b27      	ldr	r3, [pc, #156]	; (23ffc <spi_write_reg+0x130>)
   23f60:	4798      	blx	r3
   23f62:	4b28      	ldr	r3, [pc, #160]	; (24004 <spi_write_reg+0x138>)
   23f64:	0018      	movs	r0, r3
   23f66:	4b25      	ldr	r3, [pc, #148]	; (23ffc <spi_write_reg+0x130>)
   23f68:	4798      	blx	r3
		goto _FAIL_;
   23f6a:	46c0      	nop			; (mov r8, r8)
	}

#endif
_FAIL_:
	if(result != N_OK)
   23f6c:	230c      	movs	r3, #12
   23f6e:	18fb      	adds	r3, r7, r3
   23f70:	781b      	ldrb	r3, [r3, #0]
   23f72:	b25b      	sxtb	r3, r3
   23f74:	2b01      	cmp	r3, #1
   23f76:	d030      	beq.n	23fda <spi_write_reg+0x10e>
	{
		nm_bsp_sleep(1);
   23f78:	2001      	movs	r0, #1
   23f7a:	4b23      	ldr	r3, [pc, #140]	; (24008 <spi_write_reg+0x13c>)
   23f7c:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   23f7e:	2300      	movs	r3, #0
   23f80:	9300      	str	r3, [sp, #0]
   23f82:	2300      	movs	r3, #0
   23f84:	2200      	movs	r2, #0
   23f86:	2100      	movs	r1, #0
   23f88:	20cf      	movs	r0, #207	; 0xcf
   23f8a:	4c20      	ldr	r4, [pc, #128]	; (2400c <spi_write_reg+0x140>)
   23f8c:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   23f8e:	20cf      	movs	r0, #207	; 0xcf
   23f90:	4b1f      	ldr	r3, [pc, #124]	; (24010 <spi_write_reg+0x144>)
   23f92:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
   23f94:	23ea      	movs	r3, #234	; 0xea
   23f96:	009a      	lsls	r2, r3, #2
   23f98:	4916      	ldr	r1, [pc, #88]	; (23ff4 <spi_write_reg+0x128>)
   23f9a:	4b17      	ldr	r3, [pc, #92]	; (23ff8 <spi_write_reg+0x12c>)
   23f9c:	0018      	movs	r0, r3
   23f9e:	4b17      	ldr	r3, [pc, #92]	; (23ffc <spi_write_reg+0x130>)
   23fa0:	4798      	blx	r3
   23fa2:	230f      	movs	r3, #15
   23fa4:	18fb      	adds	r3, r7, r3
   23fa6:	7819      	ldrb	r1, [r3, #0]
   23fa8:	683b      	ldr	r3, [r7, #0]
   23faa:	687a      	ldr	r2, [r7, #4]
   23fac:	4819      	ldr	r0, [pc, #100]	; (24014 <spi_write_reg+0x148>)
   23fae:	4c13      	ldr	r4, [pc, #76]	; (23ffc <spi_write_reg+0x130>)
   23fb0:	47a0      	blx	r4
   23fb2:	4b14      	ldr	r3, [pc, #80]	; (24004 <spi_write_reg+0x138>)
   23fb4:	0018      	movs	r0, r3
   23fb6:	4b11      	ldr	r3, [pc, #68]	; (23ffc <spi_write_reg+0x130>)
   23fb8:	4798      	blx	r3
		nm_bsp_sleep(1);
   23fba:	2001      	movs	r0, #1
   23fbc:	4b12      	ldr	r3, [pc, #72]	; (24008 <spi_write_reg+0x13c>)
   23fbe:	4798      	blx	r3
		retry--;
   23fc0:	230f      	movs	r3, #15
   23fc2:	18fb      	adds	r3, r7, r3
   23fc4:	781a      	ldrb	r2, [r3, #0]
   23fc6:	230f      	movs	r3, #15
   23fc8:	18fb      	adds	r3, r7, r3
   23fca:	3a01      	subs	r2, #1
   23fcc:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   23fce:	230f      	movs	r3, #15
   23fd0:	18fb      	adds	r3, r7, r3
   23fd2:	781b      	ldrb	r3, [r3, #0]
   23fd4:	2b00      	cmp	r3, #0
   23fd6:	d000      	beq.n	23fda <spi_write_reg+0x10e>
   23fd8:	e78d      	b.n	23ef6 <spi_write_reg+0x2a>
	}

	return result;
   23fda:	230c      	movs	r3, #12
   23fdc:	18fb      	adds	r3, r7, r3
   23fde:	781b      	ldrb	r3, [r3, #0]
   23fe0:	b25b      	sxtb	r3, r3
}
   23fe2:	0018      	movs	r0, r3
   23fe4:	46bd      	mov	sp, r7
   23fe6:	b005      	add	sp, #20
   23fe8:	bd90      	pop	{r4, r7, pc}
   23fea:	46c0      	nop			; (mov r8, r8)
   23fec:	00023401 	.word	0x00023401
   23ff0:	0000039d 	.word	0x0000039d
   23ff4:	00039d98 	.word	0x00039d98
   23ff8:	00039760 	.word	0x00039760
   23ffc:	0001dc4d 	.word	0x0001dc4d
   24000:	00039acc 	.word	0x00039acc
   24004:	000397a0 	.word	0x000397a0
   24008:	0001fd41 	.word	0x0001fd41
   2400c:	00022e85 	.word	0x00022e85
   24010:	000232c5 	.word	0x000232c5
   24014:	00039af8 	.word	0x00039af8

00024018 <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
   24018:	b590      	push	{r4, r7, lr}
   2401a:	b089      	sub	sp, #36	; 0x24
   2401c:	af02      	add	r7, sp, #8
   2401e:	60f8      	str	r0, [r7, #12]
   24020:	60b9      	str	r1, [r7, #8]
   24022:	1dbb      	adds	r3, r7, #6
   24024:	801a      	strh	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   24026:	2316      	movs	r3, #22
   24028:	18fb      	adds	r3, r7, r3
   2402a:	220a      	movs	r2, #10
   2402c:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_WRITE;
   2402e:	2315      	movs	r3, #21
   24030:	18fb      	adds	r3, r7, r3
   24032:	22c7      	movs	r2, #199	; 0xc7
   24034:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, NULL, size, 0);
   24036:	1dbb      	adds	r3, r7, #6
   24038:	881a      	ldrh	r2, [r3, #0]
   2403a:	68f9      	ldr	r1, [r7, #12]
   2403c:	2315      	movs	r3, #21
   2403e:	18fb      	adds	r3, r7, r3
   24040:	7818      	ldrb	r0, [r3, #0]
   24042:	2300      	movs	r3, #0
   24044:	9300      	str	r3, [sp, #0]
   24046:	0013      	movs	r3, r2
   24048:	2200      	movs	r2, #0
   2404a:	4c4d      	ldr	r4, [pc, #308]	; (24180 <nm_spi_write+0x168>)
   2404c:	47a0      	blx	r4
   2404e:	0002      	movs	r2, r0
   24050:	2317      	movs	r3, #23
   24052:	18fb      	adds	r3, r7, r3
   24054:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   24056:	2317      	movs	r3, #23
   24058:	18fb      	adds	r3, r7, r3
   2405a:	781b      	ldrb	r3, [r3, #0]
   2405c:	b25b      	sxtb	r3, r3
   2405e:	2b01      	cmp	r3, #1
   24060:	d010      	beq.n	24084 <nm_spi_write+0x6c>
		M2M_ERR( "[nmi spi]: Failed cmd, write block (%08x)...\n", addr);
   24062:	4a48      	ldr	r2, [pc, #288]	; (24184 <nm_spi_write+0x16c>)
   24064:	4948      	ldr	r1, [pc, #288]	; (24188 <nm_spi_write+0x170>)
   24066:	4b49      	ldr	r3, [pc, #292]	; (2418c <nm_spi_write+0x174>)
   24068:	0018      	movs	r0, r3
   2406a:	4b49      	ldr	r3, [pc, #292]	; (24190 <nm_spi_write+0x178>)
   2406c:	4798      	blx	r3
   2406e:	68fa      	ldr	r2, [r7, #12]
   24070:	4b48      	ldr	r3, [pc, #288]	; (24194 <nm_spi_write+0x17c>)
   24072:	0011      	movs	r1, r2
   24074:	0018      	movs	r0, r3
   24076:	4b46      	ldr	r3, [pc, #280]	; (24190 <nm_spi_write+0x178>)
   24078:	4798      	blx	r3
   2407a:	4b47      	ldr	r3, [pc, #284]	; (24198 <nm_spi_write+0x180>)
   2407c:	0018      	movs	r0, r3
   2407e:	4b44      	ldr	r3, [pc, #272]	; (24190 <nm_spi_write+0x178>)
   24080:	4798      	blx	r3
		goto _FAIL_;
   24082:	e03e      	b.n	24102 <nm_spi_write+0xea>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
   24084:	2317      	movs	r3, #23
   24086:	18fc      	adds	r4, r7, r3
   24088:	1dbb      	adds	r3, r7, #6
   2408a:	881a      	ldrh	r2, [r3, #0]
   2408c:	68bb      	ldr	r3, [r7, #8]
   2408e:	0011      	movs	r1, r2
   24090:	0018      	movs	r0, r3
   24092:	4b42      	ldr	r3, [pc, #264]	; (2419c <nm_spi_write+0x184>)
   24094:	4798      	blx	r3
   24096:	0003      	movs	r3, r0
   24098:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   2409a:	2317      	movs	r3, #23
   2409c:	18fb      	adds	r3, r7, r3
   2409e:	781b      	ldrb	r3, [r3, #0]
   240a0:	b25b      	sxtb	r3, r3
   240a2:	2b01      	cmp	r3, #1
   240a4:	d00e      	beq.n	240c4 <nm_spi_write+0xac>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   240a6:	4a3e      	ldr	r2, [pc, #248]	; (241a0 <nm_spi_write+0x188>)
   240a8:	4937      	ldr	r1, [pc, #220]	; (24188 <nm_spi_write+0x170>)
   240aa:	4b38      	ldr	r3, [pc, #224]	; (2418c <nm_spi_write+0x174>)
   240ac:	0018      	movs	r0, r3
   240ae:	4b38      	ldr	r3, [pc, #224]	; (24190 <nm_spi_write+0x178>)
   240b0:	4798      	blx	r3
   240b2:	4b3c      	ldr	r3, [pc, #240]	; (241a4 <nm_spi_write+0x18c>)
   240b4:	0018      	movs	r0, r3
   240b6:	4b36      	ldr	r3, [pc, #216]	; (24190 <nm_spi_write+0x178>)
   240b8:	4798      	blx	r3
   240ba:	4b37      	ldr	r3, [pc, #220]	; (24198 <nm_spi_write+0x180>)
   240bc:	0018      	movs	r0, r3
   240be:	4b34      	ldr	r3, [pc, #208]	; (24190 <nm_spi_write+0x178>)
   240c0:	4798      	blx	r3
		goto _FAIL_;
   240c2:	e01e      	b.n	24102 <nm_spi_write+0xea>
	}
	/**
		Data RESP
	**/
	result = spi_data_rsp(cmd);
   240c4:	2317      	movs	r3, #23
   240c6:	18fc      	adds	r4, r7, r3
   240c8:	2315      	movs	r3, #21
   240ca:	18fb      	adds	r3, r7, r3
   240cc:	781b      	ldrb	r3, [r3, #0]
   240ce:	0018      	movs	r0, r3
   240d0:	4b35      	ldr	r3, [pc, #212]	; (241a8 <nm_spi_write+0x190>)
   240d2:	4798      	blx	r3
   240d4:	0003      	movs	r3, r0
   240d6:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   240d8:	2317      	movs	r3, #23
   240da:	18fb      	adds	r3, r7, r3
   240dc:	781b      	ldrb	r3, [r3, #0]
   240de:	b25b      	sxtb	r3, r3
   240e0:	2b01      	cmp	r3, #1
   240e2:	d00e      	beq.n	24102 <nm_spi_write+0xea>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   240e4:	4a31      	ldr	r2, [pc, #196]	; (241ac <nm_spi_write+0x194>)
   240e6:	4928      	ldr	r1, [pc, #160]	; (24188 <nm_spi_write+0x170>)
   240e8:	4b28      	ldr	r3, [pc, #160]	; (2418c <nm_spi_write+0x174>)
   240ea:	0018      	movs	r0, r3
   240ec:	4b28      	ldr	r3, [pc, #160]	; (24190 <nm_spi_write+0x178>)
   240ee:	4798      	blx	r3
   240f0:	4b2c      	ldr	r3, [pc, #176]	; (241a4 <nm_spi_write+0x18c>)
   240f2:	0018      	movs	r0, r3
   240f4:	4b26      	ldr	r3, [pc, #152]	; (24190 <nm_spi_write+0x178>)
   240f6:	4798      	blx	r3
   240f8:	4b27      	ldr	r3, [pc, #156]	; (24198 <nm_spi_write+0x180>)
   240fa:	0018      	movs	r0, r3
   240fc:	4b24      	ldr	r3, [pc, #144]	; (24190 <nm_spi_write+0x178>)
   240fe:	4798      	blx	r3
		goto _FAIL_;
   24100:	46c0      	nop			; (mov r8, r8)
	}
	
_FAIL_:
	if(result != N_OK)
   24102:	2317      	movs	r3, #23
   24104:	18fb      	adds	r3, r7, r3
   24106:	781b      	ldrb	r3, [r3, #0]
   24108:	b25b      	sxtb	r3, r3
   2410a:	2b01      	cmp	r3, #1
   2410c:	d030      	beq.n	24170 <nm_spi_write+0x158>
	{
		nm_bsp_sleep(1);
   2410e:	2001      	movs	r0, #1
   24110:	4b27      	ldr	r3, [pc, #156]	; (241b0 <nm_spi_write+0x198>)
   24112:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   24114:	2300      	movs	r3, #0
   24116:	9300      	str	r3, [sp, #0]
   24118:	2300      	movs	r3, #0
   2411a:	2200      	movs	r2, #0
   2411c:	2100      	movs	r1, #0
   2411e:	20cf      	movs	r0, #207	; 0xcf
   24120:	4c24      	ldr	r4, [pc, #144]	; (241b4 <nm_spi_write+0x19c>)
   24122:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   24124:	20cf      	movs	r0, #207	; 0xcf
   24126:	4b24      	ldr	r3, [pc, #144]	; (241b8 <nm_spi_write+0x1a0>)
   24128:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   2412a:	4a24      	ldr	r2, [pc, #144]	; (241bc <nm_spi_write+0x1a4>)
   2412c:	4916      	ldr	r1, [pc, #88]	; (24188 <nm_spi_write+0x170>)
   2412e:	4b17      	ldr	r3, [pc, #92]	; (2418c <nm_spi_write+0x174>)
   24130:	0018      	movs	r0, r3
   24132:	4b17      	ldr	r3, [pc, #92]	; (24190 <nm_spi_write+0x178>)
   24134:	4798      	blx	r3
   24136:	2316      	movs	r3, #22
   24138:	18fb      	adds	r3, r7, r3
   2413a:	7819      	ldrb	r1, [r3, #0]
   2413c:	1dbb      	adds	r3, r7, #6
   2413e:	881b      	ldrh	r3, [r3, #0]
   24140:	68fa      	ldr	r2, [r7, #12]
   24142:	481f      	ldr	r0, [pc, #124]	; (241c0 <nm_spi_write+0x1a8>)
   24144:	4c12      	ldr	r4, [pc, #72]	; (24190 <nm_spi_write+0x178>)
   24146:	47a0      	blx	r4
   24148:	4b13      	ldr	r3, [pc, #76]	; (24198 <nm_spi_write+0x180>)
   2414a:	0018      	movs	r0, r3
   2414c:	4b10      	ldr	r3, [pc, #64]	; (24190 <nm_spi_write+0x178>)
   2414e:	4798      	blx	r3
		nm_bsp_sleep(1);
   24150:	2001      	movs	r0, #1
   24152:	4b17      	ldr	r3, [pc, #92]	; (241b0 <nm_spi_write+0x198>)
   24154:	4798      	blx	r3
		retry--;
   24156:	2316      	movs	r3, #22
   24158:	18fb      	adds	r3, r7, r3
   2415a:	781a      	ldrb	r2, [r3, #0]
   2415c:	2316      	movs	r3, #22
   2415e:	18fb      	adds	r3, r7, r3
   24160:	3a01      	subs	r2, #1
   24162:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   24164:	2316      	movs	r3, #22
   24166:	18fb      	adds	r3, r7, r3
   24168:	781b      	ldrb	r3, [r3, #0]
   2416a:	2b00      	cmp	r3, #0
   2416c:	d000      	beq.n	24170 <nm_spi_write+0x158>
   2416e:	e762      	b.n	24036 <nm_spi_write+0x1e>
	}


	return result;
   24170:	2317      	movs	r3, #23
   24172:	18fb      	adds	r3, r7, r3
   24174:	781b      	ldrb	r3, [r3, #0]
   24176:	b25b      	sxtb	r3, r3
}
   24178:	0018      	movs	r0, r3
   2417a:	46bd      	mov	sp, r7
   2417c:	b007      	add	sp, #28
   2417e:	bd90      	pop	{r4, r7, pc}
   24180:	00023401 	.word	0x00023401
   24184:	000003cf 	.word	0x000003cf
   24188:	00039da8 	.word	0x00039da8
   2418c:	00039760 	.word	0x00039760
   24190:	0001dc4d 	.word	0x0001dc4d
   24194:	00039b14 	.word	0x00039b14
   24198:	000397a0 	.word	0x000397a0
   2419c:	00023cf5 	.word	0x00023cf5
   241a0:	000003d9 	.word	0x000003d9
   241a4:	00039b44 	.word	0x00039b44
   241a8:	000231c5 	.word	0x000231c5
   241ac:	000003e1 	.word	0x000003e1
   241b0:	0001fd41 	.word	0x0001fd41
   241b4:	00022e85 	.word	0x00022e85
   241b8:	000232c5 	.word	0x000232c5
   241bc:	000003eb 	.word	0x000003eb
   241c0:	00039b6c 	.word	0x00039b6c

000241c4 <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
   241c4:	b590      	push	{r4, r7, lr}
   241c6:	b087      	sub	sp, #28
   241c8:	af02      	add	r7, sp, #8
   241ca:	6078      	str	r0, [r7, #4]
   241cc:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   241ce:	230f      	movs	r3, #15
   241d0:	18fb      	adds	r3, r7, r3
   241d2:	220a      	movs	r2, #10
   241d4:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   241d6:	230c      	movs	r3, #12
   241d8:	18fb      	adds	r3, r7, r3
   241da:	2201      	movs	r2, #1
   241dc:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_READ;
   241de:	230e      	movs	r3, #14
   241e0:	18fb      	adds	r3, r7, r3
   241e2:	22ca      	movs	r2, #202	; 0xca
   241e4:	701a      	strb	r2, [r3, #0]
	uint8 tmp[4];
	uint8 clockless = 0;
   241e6:	230d      	movs	r3, #13
   241e8:	18fb      	adds	r3, r7, r3
   241ea:	2200      	movs	r2, #0
   241ec:	701a      	strb	r2, [r3, #0]

_RETRY_:

	if (addr <= 0xff)
   241ee:	687b      	ldr	r3, [r7, #4]
   241f0:	2bff      	cmp	r3, #255	; 0xff
   241f2:	d808      	bhi.n	24206 <spi_read_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
   241f4:	230e      	movs	r3, #14
   241f6:	18fb      	adds	r3, r7, r3
   241f8:	22c4      	movs	r2, #196	; 0xc4
   241fa:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   241fc:	230d      	movs	r3, #13
   241fe:	18fb      	adds	r3, r7, r3
   24200:	2201      	movs	r2, #1
   24202:	701a      	strb	r2, [r3, #0]
   24204:	e007      	b.n	24216 <spi_read_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
   24206:	230e      	movs	r3, #14
   24208:	18fb      	adds	r3, r7, r3
   2420a:	22ca      	movs	r2, #202	; 0xca
   2420c:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   2420e:	230d      	movs	r3, #13
   24210:	18fb      	adds	r3, r7, r3
   24212:	2200      	movs	r2, #0
   24214:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, (uint8*)&tmp[0], 4, clockless);
   24216:	2308      	movs	r3, #8
   24218:	18fa      	adds	r2, r7, r3
   2421a:	6879      	ldr	r1, [r7, #4]
   2421c:	230e      	movs	r3, #14
   2421e:	18fb      	adds	r3, r7, r3
   24220:	7818      	ldrb	r0, [r3, #0]
   24222:	230d      	movs	r3, #13
   24224:	18fb      	adds	r3, r7, r3
   24226:	781b      	ldrb	r3, [r3, #0]
   24228:	9300      	str	r3, [sp, #0]
   2422a:	2304      	movs	r3, #4
   2422c:	4c37      	ldr	r4, [pc, #220]	; (2430c <spi_read_reg+0x148>)
   2422e:	47a0      	blx	r4
   24230:	0002      	movs	r2, r0
   24232:	230c      	movs	r3, #12
   24234:	18fb      	adds	r3, r7, r3
   24236:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   24238:	230c      	movs	r3, #12
   2423a:	18fb      	adds	r3, r7, r3
   2423c:	781b      	ldrb	r3, [r3, #0]
   2423e:	b25b      	sxtb	r3, r3
   24240:	2b01      	cmp	r3, #1
   24242:	d010      	beq.n	24266 <spi_read_reg+0xa2>
		M2M_ERR( "[nmi spi]: Failed cmd, read reg (%08x)...\n", addr);
   24244:	4a32      	ldr	r2, [pc, #200]	; (24310 <spi_read_reg+0x14c>)
   24246:	4933      	ldr	r1, [pc, #204]	; (24314 <spi_read_reg+0x150>)
   24248:	4b33      	ldr	r3, [pc, #204]	; (24318 <spi_read_reg+0x154>)
   2424a:	0018      	movs	r0, r3
   2424c:	4b33      	ldr	r3, [pc, #204]	; (2431c <spi_read_reg+0x158>)
   2424e:	4798      	blx	r3
   24250:	687a      	ldr	r2, [r7, #4]
   24252:	4b33      	ldr	r3, [pc, #204]	; (24320 <spi_read_reg+0x15c>)
   24254:	0011      	movs	r1, r2
   24256:	0018      	movs	r0, r3
   24258:	4b30      	ldr	r3, [pc, #192]	; (2431c <spi_read_reg+0x158>)
   2425a:	4798      	blx	r3
   2425c:	4b31      	ldr	r3, [pc, #196]	; (24324 <spi_read_reg+0x160>)
   2425e:	0018      	movs	r0, r3
   24260:	4b2e      	ldr	r3, [pc, #184]	; (2431c <spi_read_reg+0x158>)
   24262:	4798      	blx	r3
		goto _FAIL_;
   24264:	e014      	b.n	24290 <spi_read_reg+0xcc>
	}

#endif

	*u32data = tmp[0] |
   24266:	2308      	movs	r3, #8
   24268:	18fb      	adds	r3, r7, r3
   2426a:	781b      	ldrb	r3, [r3, #0]
   2426c:	001a      	movs	r2, r3
		((uint32)tmp[1] << 8) |
   2426e:	2308      	movs	r3, #8
   24270:	18fb      	adds	r3, r7, r3
   24272:	785b      	ldrb	r3, [r3, #1]
   24274:	021b      	lsls	r3, r3, #8
	*u32data = tmp[0] |
   24276:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
   24278:	2308      	movs	r3, #8
   2427a:	18fb      	adds	r3, r7, r3
   2427c:	789b      	ldrb	r3, [r3, #2]
   2427e:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
   24280:	431a      	orrs	r2, r3
		((uint32)tmp[3] << 24);
   24282:	2308      	movs	r3, #8
   24284:	18fb      	adds	r3, r7, r3
   24286:	78db      	ldrb	r3, [r3, #3]
   24288:	061b      	lsls	r3, r3, #24
		((uint32)tmp[2] << 16) |
   2428a:	431a      	orrs	r2, r3
	*u32data = tmp[0] |
   2428c:	683b      	ldr	r3, [r7, #0]
   2428e:	601a      	str	r2, [r3, #0]
		
_FAIL_:
	if(result != N_OK)
   24290:	230c      	movs	r3, #12
   24292:	18fb      	adds	r3, r7, r3
   24294:	781b      	ldrb	r3, [r3, #0]
   24296:	b25b      	sxtb	r3, r3
   24298:	2b01      	cmp	r3, #1
   2429a:	d02f      	beq.n	242fc <spi_read_reg+0x138>
	{
		
		nm_bsp_sleep(1);
   2429c:	2001      	movs	r0, #1
   2429e:	4b22      	ldr	r3, [pc, #136]	; (24328 <spi_read_reg+0x164>)
   242a0:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   242a2:	2300      	movs	r3, #0
   242a4:	9300      	str	r3, [sp, #0]
   242a6:	2300      	movs	r3, #0
   242a8:	2200      	movs	r2, #0
   242aa:	2100      	movs	r1, #0
   242ac:	20cf      	movs	r0, #207	; 0xcf
   242ae:	4c1f      	ldr	r4, [pc, #124]	; (2432c <spi_read_reg+0x168>)
   242b0:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   242b2:	20cf      	movs	r0, #207	; 0xcf
   242b4:	4b1e      	ldr	r3, [pc, #120]	; (24330 <spi_read_reg+0x16c>)
   242b6:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
   242b8:	4a1e      	ldr	r2, [pc, #120]	; (24334 <spi_read_reg+0x170>)
   242ba:	4916      	ldr	r1, [pc, #88]	; (24314 <spi_read_reg+0x150>)
   242bc:	4b16      	ldr	r3, [pc, #88]	; (24318 <spi_read_reg+0x154>)
   242be:	0018      	movs	r0, r3
   242c0:	4b16      	ldr	r3, [pc, #88]	; (2431c <spi_read_reg+0x158>)
   242c2:	4798      	blx	r3
   242c4:	230f      	movs	r3, #15
   242c6:	18fb      	adds	r3, r7, r3
   242c8:	7819      	ldrb	r1, [r3, #0]
   242ca:	687a      	ldr	r2, [r7, #4]
   242cc:	4b1a      	ldr	r3, [pc, #104]	; (24338 <spi_read_reg+0x174>)
   242ce:	0018      	movs	r0, r3
   242d0:	4b12      	ldr	r3, [pc, #72]	; (2431c <spi_read_reg+0x158>)
   242d2:	4798      	blx	r3
   242d4:	4b13      	ldr	r3, [pc, #76]	; (24324 <spi_read_reg+0x160>)
   242d6:	0018      	movs	r0, r3
   242d8:	4b10      	ldr	r3, [pc, #64]	; (2431c <spi_read_reg+0x158>)
   242da:	4798      	blx	r3
		nm_bsp_sleep(1);
   242dc:	2001      	movs	r0, #1
   242de:	4b12      	ldr	r3, [pc, #72]	; (24328 <spi_read_reg+0x164>)
   242e0:	4798      	blx	r3
		retry--;
   242e2:	230f      	movs	r3, #15
   242e4:	18fb      	adds	r3, r7, r3
   242e6:	781a      	ldrb	r2, [r3, #0]
   242e8:	230f      	movs	r3, #15
   242ea:	18fb      	adds	r3, r7, r3
   242ec:	3a01      	subs	r2, #1
   242ee:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   242f0:	230f      	movs	r3, #15
   242f2:	18fb      	adds	r3, r7, r3
   242f4:	781b      	ldrb	r3, [r3, #0]
   242f6:	2b00      	cmp	r3, #0
   242f8:	d000      	beq.n	242fc <spi_read_reg+0x138>
   242fa:	e778      	b.n	241ee <spi_read_reg+0x2a>
	}
		
	return result;
   242fc:	230c      	movs	r3, #12
   242fe:	18fb      	adds	r3, r7, r3
   24300:	781b      	ldrb	r3, [r3, #0]
   24302:	b25b      	sxtb	r3, r3
}
   24304:	0018      	movs	r0, r3
   24306:	46bd      	mov	sp, r7
   24308:	b005      	add	sp, #20
   2430a:	bd90      	pop	{r4, r7, pc}
   2430c:	00023401 	.word	0x00023401
   24310:	00000423 	.word	0x00000423
   24314:	00039db8 	.word	0x00039db8
   24318:	00039760 	.word	0x00039760
   2431c:	0001dc4d 	.word	0x0001dc4d
   24320:	00039b88 	.word	0x00039b88
   24324:	000397a0 	.word	0x000397a0
   24328:	0001fd41 	.word	0x0001fd41
   2432c:	00022e85 	.word	0x00022e85
   24330:	000232c5 	.word	0x000232c5
   24334:	00000435 	.word	0x00000435
   24338:	00039bb4 	.word	0x00039bb4

0002433c <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
   2433c:	b590      	push	{r4, r7, lr}
   2433e:	b089      	sub	sp, #36	; 0x24
   24340:	af02      	add	r7, sp, #8
   24342:	60f8      	str	r0, [r7, #12]
   24344:	60b9      	str	r1, [r7, #8]
   24346:	1dbb      	adds	r3, r7, #6
   24348:	801a      	strh	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_READ;
   2434a:	2316      	movs	r3, #22
   2434c:	18fb      	adds	r3, r7, r3
   2434e:	22c8      	movs	r2, #200	; 0xc8
   24350:	701a      	strb	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   24352:	2317      	movs	r3, #23
   24354:	18fb      	adds	r3, r7, r3
   24356:	220a      	movs	r2, #10
   24358:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed block data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, buf, size, 0);
   2435a:	1dbb      	adds	r3, r7, #6
   2435c:	881c      	ldrh	r4, [r3, #0]
   2435e:	68ba      	ldr	r2, [r7, #8]
   24360:	68f9      	ldr	r1, [r7, #12]
   24362:	2316      	movs	r3, #22
   24364:	18fb      	adds	r3, r7, r3
   24366:	7818      	ldrb	r0, [r3, #0]
   24368:	2300      	movs	r3, #0
   2436a:	9300      	str	r3, [sp, #0]
   2436c:	0023      	movs	r3, r4
   2436e:	4c2e      	ldr	r4, [pc, #184]	; (24428 <nm_spi_read+0xec>)
   24370:	47a0      	blx	r4
   24372:	0002      	movs	r2, r0
   24374:	2315      	movs	r3, #21
   24376:	18fb      	adds	r3, r7, r3
   24378:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   2437a:	2315      	movs	r3, #21
   2437c:	18fb      	adds	r3, r7, r3
   2437e:	781b      	ldrb	r3, [r3, #0]
   24380:	b25b      	sxtb	r3, r3
   24382:	2b01      	cmp	r3, #1
   24384:	d010      	beq.n	243a8 <nm_spi_read+0x6c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", addr);
   24386:	4a29      	ldr	r2, [pc, #164]	; (2442c <nm_spi_read+0xf0>)
   24388:	4929      	ldr	r1, [pc, #164]	; (24430 <nm_spi_read+0xf4>)
   2438a:	4b2a      	ldr	r3, [pc, #168]	; (24434 <nm_spi_read+0xf8>)
   2438c:	0018      	movs	r0, r3
   2438e:	4b2a      	ldr	r3, [pc, #168]	; (24438 <nm_spi_read+0xfc>)
   24390:	4798      	blx	r3
   24392:	68fa      	ldr	r2, [r7, #12]
   24394:	4b29      	ldr	r3, [pc, #164]	; (2443c <nm_spi_read+0x100>)
   24396:	0011      	movs	r1, r2
   24398:	0018      	movs	r0, r3
   2439a:	4b27      	ldr	r3, [pc, #156]	; (24438 <nm_spi_read+0xfc>)
   2439c:	4798      	blx	r3
   2439e:	4b28      	ldr	r3, [pc, #160]	; (24440 <nm_spi_read+0x104>)
   243a0:	0018      	movs	r0, r3
   243a2:	4b25      	ldr	r3, [pc, #148]	; (24438 <nm_spi_read+0xfc>)
   243a4:	4798      	blx	r3
		goto _FAIL_;
   243a6:	46c0      	nop			; (mov r8, r8)
	}
#endif

_FAIL_:
	if(result != N_OK)
   243a8:	2315      	movs	r3, #21
   243aa:	18fb      	adds	r3, r7, r3
   243ac:	781b      	ldrb	r3, [r3, #0]
   243ae:	b25b      	sxtb	r3, r3
   243b0:	2b01      	cmp	r3, #1
   243b2:	d030      	beq.n	24416 <nm_spi_read+0xda>
	{
		nm_bsp_sleep(1);
   243b4:	2001      	movs	r0, #1
   243b6:	4b23      	ldr	r3, [pc, #140]	; (24444 <nm_spi_read+0x108>)
   243b8:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   243ba:	2300      	movs	r3, #0
   243bc:	9300      	str	r3, [sp, #0]
   243be:	2300      	movs	r3, #0
   243c0:	2200      	movs	r2, #0
   243c2:	2100      	movs	r1, #0
   243c4:	20cf      	movs	r0, #207	; 0xcf
   243c6:	4c20      	ldr	r4, [pc, #128]	; (24448 <nm_spi_read+0x10c>)
   243c8:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   243ca:	20cf      	movs	r0, #207	; 0xcf
   243cc:	4b1f      	ldr	r3, [pc, #124]	; (2444c <nm_spi_read+0x110>)
   243ce:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   243d0:	4a1f      	ldr	r2, [pc, #124]	; (24450 <nm_spi_read+0x114>)
   243d2:	4917      	ldr	r1, [pc, #92]	; (24430 <nm_spi_read+0xf4>)
   243d4:	4b17      	ldr	r3, [pc, #92]	; (24434 <nm_spi_read+0xf8>)
   243d6:	0018      	movs	r0, r3
   243d8:	4b17      	ldr	r3, [pc, #92]	; (24438 <nm_spi_read+0xfc>)
   243da:	4798      	blx	r3
   243dc:	2317      	movs	r3, #23
   243de:	18fb      	adds	r3, r7, r3
   243e0:	7819      	ldrb	r1, [r3, #0]
   243e2:	1dbb      	adds	r3, r7, #6
   243e4:	881b      	ldrh	r3, [r3, #0]
   243e6:	68fa      	ldr	r2, [r7, #12]
   243e8:	481a      	ldr	r0, [pc, #104]	; (24454 <nm_spi_read+0x118>)
   243ea:	4c13      	ldr	r4, [pc, #76]	; (24438 <nm_spi_read+0xfc>)
   243ec:	47a0      	blx	r4
   243ee:	4b14      	ldr	r3, [pc, #80]	; (24440 <nm_spi_read+0x104>)
   243f0:	0018      	movs	r0, r3
   243f2:	4b11      	ldr	r3, [pc, #68]	; (24438 <nm_spi_read+0xfc>)
   243f4:	4798      	blx	r3
		nm_bsp_sleep(1);
   243f6:	2001      	movs	r0, #1
   243f8:	4b12      	ldr	r3, [pc, #72]	; (24444 <nm_spi_read+0x108>)
   243fa:	4798      	blx	r3
		retry--;
   243fc:	2317      	movs	r3, #23
   243fe:	18fb      	adds	r3, r7, r3
   24400:	781a      	ldrb	r2, [r3, #0]
   24402:	2317      	movs	r3, #23
   24404:	18fb      	adds	r3, r7, r3
   24406:	3a01      	subs	r2, #1
   24408:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   2440a:	2317      	movs	r3, #23
   2440c:	18fb      	adds	r3, r7, r3
   2440e:	781b      	ldrb	r3, [r3, #0]
   24410:	2b00      	cmp	r3, #0
   24412:	d000      	beq.n	24416 <nm_spi_read+0xda>
   24414:	e7a1      	b.n	2435a <nm_spi_read+0x1e>
	}

	return result;
   24416:	2315      	movs	r3, #21
   24418:	18fb      	adds	r3, r7, r3
   2441a:	781b      	ldrb	r3, [r3, #0]
   2441c:	b25b      	sxtb	r3, r3
}
   2441e:	0018      	movs	r0, r3
   24420:	46bd      	mov	sp, r7
   24422:	b007      	add	sp, #28
   24424:	bd90      	pop	{r4, r7, pc}
   24426:	46c0      	nop			; (mov r8, r8)
   24428:	00023401 	.word	0x00023401
   2442c:	00000472 	.word	0x00000472
   24430:	00039dc8 	.word	0x00039dc8
   24434:	00039760 	.word	0x00039760
   24438:	0001dc4d 	.word	0x0001dc4d
   2443c:	00039bcc 	.word	0x00039bcc
   24440:	000397a0 	.word	0x000397a0
   24444:	0001fd41 	.word	0x0001fd41
   24448:	00022e85 	.word	0x00022e85
   2444c:	000232c5 	.word	0x000232c5
   24450:	0000047d 	.word	0x0000047d
   24454:	00039b6c 	.word	0x00039b6c

00024458 <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
   24458:	b580      	push	{r7, lr}
   2445a:	b082      	sub	sp, #8
   2445c:	af00      	add	r7, sp, #0
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
   2445e:	4b0c      	ldr	r3, [pc, #48]	; (24490 <spi_init_pkt_sz+0x38>)
   24460:	0018      	movs	r0, r3
   24462:	4b0c      	ldr	r3, [pc, #48]	; (24494 <spi_init_pkt_sz+0x3c>)
   24464:	4798      	blx	r3
   24466:	0003      	movs	r3, r0
   24468:	607b      	str	r3, [r7, #4]
	val32 &= ~(0x7 << 4);
   2446a:	687b      	ldr	r3, [r7, #4]
   2446c:	2270      	movs	r2, #112	; 0x70
   2446e:	4393      	bics	r3, r2
   24470:	607b      	str	r3, [r7, #4]
	case 256:  val32 |= (0 << 4); break;
	case 512:  val32 |= (1 << 4); break;
	case 1024: val32 |= (2 << 4); break;
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;
   24472:	687b      	ldr	r3, [r7, #4]
   24474:	2250      	movs	r2, #80	; 0x50
   24476:	4313      	orrs	r3, r2
   24478:	607b      	str	r3, [r7, #4]
   2447a:	46c0      	nop			; (mov r8, r8)

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
   2447c:	687b      	ldr	r3, [r7, #4]
   2447e:	4a04      	ldr	r2, [pc, #16]	; (24490 <spi_init_pkt_sz+0x38>)
   24480:	0019      	movs	r1, r3
   24482:	0010      	movs	r0, r2
   24484:	4b04      	ldr	r3, [pc, #16]	; (24498 <spi_init_pkt_sz+0x40>)
   24486:	4798      	blx	r3
}
   24488:	46c0      	nop			; (mov r8, r8)
   2448a:	46bd      	mov	sp, r7
   2448c:	b002      	add	sp, #8
   2448e:	bd80      	pop	{r7, pc}
   24490:	0000e824 	.word	0x0000e824
   24494:	00024631 	.word	0x00024631
   24498:	000246a5 	.word	0x000246a5

0002449c <nm_spi_reset>:

sint8 nm_spi_reset(void)
{
   2449c:	b590      	push	{r4, r7, lr}
   2449e:	b083      	sub	sp, #12
   244a0:	af02      	add	r7, sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
   244a2:	2300      	movs	r3, #0
   244a4:	9300      	str	r3, [sp, #0]
   244a6:	2300      	movs	r3, #0
   244a8:	2200      	movs	r2, #0
   244aa:	2100      	movs	r1, #0
   244ac:	20cf      	movs	r0, #207	; 0xcf
   244ae:	4c05      	ldr	r4, [pc, #20]	; (244c4 <nm_spi_reset+0x28>)
   244b0:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
   244b2:	20cf      	movs	r0, #207	; 0xcf
   244b4:	4b04      	ldr	r3, [pc, #16]	; (244c8 <nm_spi_reset+0x2c>)
   244b6:	4798      	blx	r3
	return M2M_SUCCESS;
   244b8:	2300      	movs	r3, #0
}
   244ba:	0018      	movs	r0, r3
   244bc:	46bd      	mov	sp, r7
   244be:	b001      	add	sp, #4
   244c0:	bd90      	pop	{r4, r7, pc}
   244c2:	46c0      	nop			; (mov r8, r8)
   244c4:	00022e85 	.word	0x00022e85
   244c8:	000232c5 	.word	0x000232c5

000244cc <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
   244cc:	b580      	push	{r7, lr}
   244ce:	b082      	sub	sp, #8
   244d0:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg = 0;
   244d2:	2300      	movs	r3, #0
   244d4:	603b      	str	r3, [r7, #0]
	

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
   244d6:	4b40      	ldr	r3, [pc, #256]	; (245d8 <nm_spi_init+0x10c>)
   244d8:	2200      	movs	r2, #0
   244da:	701a      	strb	r2, [r3, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
   244dc:	003b      	movs	r3, r7
   244de:	4a3f      	ldr	r2, [pc, #252]	; (245dc <nm_spi_init+0x110>)
   244e0:	0019      	movs	r1, r3
   244e2:	0010      	movs	r0, r2
   244e4:	4b3e      	ldr	r3, [pc, #248]	; (245e0 <nm_spi_init+0x114>)
   244e6:	4798      	blx	r3
   244e8:	1e03      	subs	r3, r0, #0
   244ea:	d129      	bne.n	24540 <nm_spi_init+0x74>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
   244ec:	4b3a      	ldr	r3, [pc, #232]	; (245d8 <nm_spi_init+0x10c>)
   244ee:	2201      	movs	r2, #1
   244f0:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
   244f2:	2398      	movs	r3, #152	; 0x98
   244f4:	00da      	lsls	r2, r3, #3
   244f6:	493b      	ldr	r1, [pc, #236]	; (245e4 <nm_spi_init+0x118>)
   244f8:	4b3b      	ldr	r3, [pc, #236]	; (245e8 <nm_spi_init+0x11c>)
   244fa:	0018      	movs	r0, r3
   244fc:	4b3b      	ldr	r3, [pc, #236]	; (245ec <nm_spi_init+0x120>)
   244fe:	4798      	blx	r3
   24500:	4b3b      	ldr	r3, [pc, #236]	; (245f0 <nm_spi_init+0x124>)
   24502:	0018      	movs	r0, r3
   24504:	4b39      	ldr	r3, [pc, #228]	; (245ec <nm_spi_init+0x120>)
   24506:	4798      	blx	r3
   24508:	4b3a      	ldr	r3, [pc, #232]	; (245f4 <nm_spi_init+0x128>)
   2450a:	0018      	movs	r0, r3
   2450c:	4b37      	ldr	r3, [pc, #220]	; (245ec <nm_spi_init+0x120>)
   2450e:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
   24510:	003b      	movs	r3, r7
   24512:	4a32      	ldr	r2, [pc, #200]	; (245dc <nm_spi_init+0x110>)
   24514:	0019      	movs	r1, r3
   24516:	0010      	movs	r0, r2
   24518:	4b31      	ldr	r3, [pc, #196]	; (245e0 <nm_spi_init+0x114>)
   2451a:	4798      	blx	r3
   2451c:	1e03      	subs	r3, r0, #0
   2451e:	d10f      	bne.n	24540 <nm_spi_init+0x74>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
   24520:	4a35      	ldr	r2, [pc, #212]	; (245f8 <nm_spi_init+0x12c>)
   24522:	4930      	ldr	r1, [pc, #192]	; (245e4 <nm_spi_init+0x118>)
   24524:	4b30      	ldr	r3, [pc, #192]	; (245e8 <nm_spi_init+0x11c>)
   24526:	0018      	movs	r0, r3
   24528:	4b30      	ldr	r3, [pc, #192]	; (245ec <nm_spi_init+0x120>)
   2452a:	4798      	blx	r3
   2452c:	4b33      	ldr	r3, [pc, #204]	; (245fc <nm_spi_init+0x130>)
   2452e:	0018      	movs	r0, r3
   24530:	4b2e      	ldr	r3, [pc, #184]	; (245ec <nm_spi_init+0x120>)
   24532:	4798      	blx	r3
   24534:	4b2f      	ldr	r3, [pc, #188]	; (245f4 <nm_spi_init+0x128>)
   24536:	0018      	movs	r0, r3
   24538:	4b2c      	ldr	r3, [pc, #176]	; (245ec <nm_spi_init+0x120>)
   2453a:	4798      	blx	r3
			return 0;
   2453c:	2300      	movs	r3, #0
   2453e:	e047      	b.n	245d0 <nm_spi_init+0x104>
		}
	}
	if(gu8Crc_off == 0)
   24540:	4b25      	ldr	r3, [pc, #148]	; (245d8 <nm_spi_init+0x10c>)
   24542:	781b      	ldrb	r3, [r3, #0]
   24544:	2b00      	cmp	r3, #0
   24546:	d126      	bne.n	24596 <nm_spi_init+0xca>
	{
		reg &= ~0xc;	/* disable crc checking */
   24548:	683b      	ldr	r3, [r7, #0]
   2454a:	220c      	movs	r2, #12
   2454c:	4393      	bics	r3, r2
   2454e:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
   24550:	683b      	ldr	r3, [r7, #0]
   24552:	2270      	movs	r2, #112	; 0x70
   24554:	4393      	bics	r3, r2
   24556:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
   24558:	683b      	ldr	r3, [r7, #0]
   2455a:	2250      	movs	r2, #80	; 0x50
   2455c:	4313      	orrs	r3, r2
   2455e:	603b      	str	r3, [r7, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
   24560:	683b      	ldr	r3, [r7, #0]
   24562:	4a1e      	ldr	r2, [pc, #120]	; (245dc <nm_spi_init+0x110>)
   24564:	0019      	movs	r1, r3
   24566:	0010      	movs	r0, r2
   24568:	4b25      	ldr	r3, [pc, #148]	; (24600 <nm_spi_init+0x134>)
   2456a:	4798      	blx	r3
   2456c:	1e03      	subs	r3, r0, #0
   2456e:	d10f      	bne.n	24590 <nm_spi_init+0xc4>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
   24570:	4a24      	ldr	r2, [pc, #144]	; (24604 <nm_spi_init+0x138>)
   24572:	491c      	ldr	r1, [pc, #112]	; (245e4 <nm_spi_init+0x118>)
   24574:	4b1c      	ldr	r3, [pc, #112]	; (245e8 <nm_spi_init+0x11c>)
   24576:	0018      	movs	r0, r3
   24578:	4b1c      	ldr	r3, [pc, #112]	; (245ec <nm_spi_init+0x120>)
   2457a:	4798      	blx	r3
   2457c:	4b22      	ldr	r3, [pc, #136]	; (24608 <nm_spi_init+0x13c>)
   2457e:	0018      	movs	r0, r3
   24580:	4b1a      	ldr	r3, [pc, #104]	; (245ec <nm_spi_init+0x120>)
   24582:	4798      	blx	r3
   24584:	4b1b      	ldr	r3, [pc, #108]	; (245f4 <nm_spi_init+0x128>)
   24586:	0018      	movs	r0, r3
   24588:	4b18      	ldr	r3, [pc, #96]	; (245ec <nm_spi_init+0x120>)
   2458a:	4798      	blx	r3
			return 0;
   2458c:	2300      	movs	r3, #0
   2458e:	e01f      	b.n	245d0 <nm_spi_init+0x104>
		}
		gu8Crc_off = 1;
   24590:	4b11      	ldr	r3, [pc, #68]	; (245d8 <nm_spi_init+0x10c>)
   24592:	2201      	movs	r2, #1
   24594:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
   24596:	1d3a      	adds	r2, r7, #4
   24598:	2380      	movs	r3, #128	; 0x80
   2459a:	015b      	lsls	r3, r3, #5
   2459c:	0011      	movs	r1, r2
   2459e:	0018      	movs	r0, r3
   245a0:	4b0f      	ldr	r3, [pc, #60]	; (245e0 <nm_spi_init+0x114>)
   245a2:	4798      	blx	r3
   245a4:	1e03      	subs	r3, r0, #0
   245a6:	d110      	bne.n	245ca <nm_spi_init+0xfe>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
   245a8:	4a18      	ldr	r2, [pc, #96]	; (2460c <nm_spi_init+0x140>)
   245aa:	490e      	ldr	r1, [pc, #56]	; (245e4 <nm_spi_init+0x118>)
   245ac:	4b0e      	ldr	r3, [pc, #56]	; (245e8 <nm_spi_init+0x11c>)
   245ae:	0018      	movs	r0, r3
   245b0:	4b0e      	ldr	r3, [pc, #56]	; (245ec <nm_spi_init+0x120>)
   245b2:	4798      	blx	r3
   245b4:	4b16      	ldr	r3, [pc, #88]	; (24610 <nm_spi_init+0x144>)
   245b6:	0018      	movs	r0, r3
   245b8:	4b0c      	ldr	r3, [pc, #48]	; (245ec <nm_spi_init+0x120>)
   245ba:	4798      	blx	r3
   245bc:	4b0d      	ldr	r3, [pc, #52]	; (245f4 <nm_spi_init+0x128>)
   245be:	0018      	movs	r0, r3
   245c0:	4b0a      	ldr	r3, [pc, #40]	; (245ec <nm_spi_init+0x120>)
   245c2:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
   245c4:	2306      	movs	r3, #6
   245c6:	425b      	negs	r3, r3
   245c8:	e002      	b.n	245d0 <nm_spi_init+0x104>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();
   245ca:	4b12      	ldr	r3, [pc, #72]	; (24614 <nm_spi_init+0x148>)
   245cc:	4798      	blx	r3


	return M2M_SUCCESS;
   245ce:	2300      	movs	r3, #0
}
   245d0:	0018      	movs	r0, r3
   245d2:	46bd      	mov	sp, r7
   245d4:	b002      	add	sp, #8
   245d6:	bd80      	pop	{r7, pc}
   245d8:	20003ccc 	.word	0x20003ccc
   245dc:	0000e824 	.word	0x0000e824
   245e0:	000241c5 	.word	0x000241c5
   245e4:	00039dd4 	.word	0x00039dd4
   245e8:	00039760 	.word	0x00039760
   245ec:	0001dc4d 	.word	0x0001dc4d
   245f0:	00039bfc 	.word	0x00039bfc
   245f4:	000397a0 	.word	0x000397a0
   245f8:	000004c3 	.word	0x000004c3
   245fc:	00039c4c 	.word	0x00039c4c
   24600:	00023ecd 	.word	0x00023ecd
   24604:	000004cd 	.word	0x000004cd
   24608:	00039c7c 	.word	0x00039c7c
   2460c:	000004d7 	.word	0x000004d7
   24610:	00039cb0 	.word	0x00039cb0
   24614:	00024459 	.word	0x00024459

00024618 <nm_spi_deinit>:
*	@author	Samer Sarhan
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
   24618:	b580      	push	{r7, lr}
   2461a:	af00      	add	r7, sp, #0
	gu8Crc_off = 0;
   2461c:	4b03      	ldr	r3, [pc, #12]	; (2462c <nm_spi_deinit+0x14>)
   2461e:	2200      	movs	r2, #0
   24620:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
   24622:	2300      	movs	r3, #0
}
   24624:	0018      	movs	r0, r3
   24626:	46bd      	mov	sp, r7
   24628:	bd80      	pop	{r7, pc}
   2462a:	46c0      	nop			; (mov r8, r8)
   2462c:	20003ccc 	.word	0x20003ccc

00024630 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
   24630:	b580      	push	{r7, lr}
   24632:	b084      	sub	sp, #16
   24634:	af00      	add	r7, sp, #0
   24636:	6078      	str	r0, [r7, #4]
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
   24638:	230c      	movs	r3, #12
   2463a:	18fa      	adds	r2, r7, r3
   2463c:	687b      	ldr	r3, [r7, #4]
   2463e:	0011      	movs	r1, r2
   24640:	0018      	movs	r0, r3
   24642:	4b03      	ldr	r3, [pc, #12]	; (24650 <nm_spi_read_reg+0x20>)
   24644:	4798      	blx	r3

	return u32Val;
   24646:	68fb      	ldr	r3, [r7, #12]
}
   24648:	0018      	movs	r0, r3
   2464a:	46bd      	mov	sp, r7
   2464c:	b004      	add	sp, #16
   2464e:	bd80      	pop	{r7, pc}
   24650:	000241c5 	.word	0x000241c5

00024654 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   24654:	b590      	push	{r4, r7, lr}
   24656:	b085      	sub	sp, #20
   24658:	af00      	add	r7, sp, #0
   2465a:	6078      	str	r0, [r7, #4]
   2465c:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
   2465e:	230f      	movs	r3, #15
   24660:	18fc      	adds	r4, r7, r3
   24662:	683a      	ldr	r2, [r7, #0]
   24664:	687b      	ldr	r3, [r7, #4]
   24666:	0011      	movs	r1, r2
   24668:	0018      	movs	r0, r3
   2466a:	4b0d      	ldr	r3, [pc, #52]	; (246a0 <nm_spi_read_reg_with_ret+0x4c>)
   2466c:	4798      	blx	r3
   2466e:	0003      	movs	r3, r0
   24670:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   24672:	230f      	movs	r3, #15
   24674:	18fb      	adds	r3, r7, r3
   24676:	781b      	ldrb	r3, [r3, #0]
   24678:	b25b      	sxtb	r3, r3
   2467a:	2b01      	cmp	r3, #1
   2467c:	d104      	bne.n	24688 <nm_spi_read_reg_with_ret+0x34>
   2467e:	230f      	movs	r3, #15
   24680:	18fb      	adds	r3, r7, r3
   24682:	2200      	movs	r2, #0
   24684:	701a      	strb	r2, [r3, #0]
   24686:	e003      	b.n	24690 <nm_spi_read_reg_with_ret+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   24688:	230f      	movs	r3, #15
   2468a:	18fb      	adds	r3, r7, r3
   2468c:	22fa      	movs	r2, #250	; 0xfa
   2468e:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   24690:	230f      	movs	r3, #15
   24692:	18fb      	adds	r3, r7, r3
   24694:	781b      	ldrb	r3, [r3, #0]
   24696:	b25b      	sxtb	r3, r3
}
   24698:	0018      	movs	r0, r3
   2469a:	46bd      	mov	sp, r7
   2469c:	b005      	add	sp, #20
   2469e:	bd90      	pop	{r4, r7, pc}
   246a0:	000241c5 	.word	0x000241c5

000246a4 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
   246a4:	b590      	push	{r4, r7, lr}
   246a6:	b085      	sub	sp, #20
   246a8:	af00      	add	r7, sp, #0
   246aa:	6078      	str	r0, [r7, #4]
   246ac:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
   246ae:	230f      	movs	r3, #15
   246b0:	18fc      	adds	r4, r7, r3
   246b2:	683a      	ldr	r2, [r7, #0]
   246b4:	687b      	ldr	r3, [r7, #4]
   246b6:	0011      	movs	r1, r2
   246b8:	0018      	movs	r0, r3
   246ba:	4b0d      	ldr	r3, [pc, #52]	; (246f0 <nm_spi_write_reg+0x4c>)
   246bc:	4798      	blx	r3
   246be:	0003      	movs	r3, r0
   246c0:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   246c2:	230f      	movs	r3, #15
   246c4:	18fb      	adds	r3, r7, r3
   246c6:	781b      	ldrb	r3, [r3, #0]
   246c8:	b25b      	sxtb	r3, r3
   246ca:	2b01      	cmp	r3, #1
   246cc:	d104      	bne.n	246d8 <nm_spi_write_reg+0x34>
   246ce:	230f      	movs	r3, #15
   246d0:	18fb      	adds	r3, r7, r3
   246d2:	2200      	movs	r2, #0
   246d4:	701a      	strb	r2, [r3, #0]
   246d6:	e003      	b.n	246e0 <nm_spi_write_reg+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   246d8:	230f      	movs	r3, #15
   246da:	18fb      	adds	r3, r7, r3
   246dc:	22fa      	movs	r2, #250	; 0xfa
   246de:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   246e0:	230f      	movs	r3, #15
   246e2:	18fb      	adds	r3, r7, r3
   246e4:	781b      	ldrb	r3, [r3, #0]
   246e6:	b25b      	sxtb	r3, r3
}
   246e8:	0018      	movs	r0, r3
   246ea:	46bd      	mov	sp, r7
   246ec:	b005      	add	sp, #20
   246ee:	bd90      	pop	{r4, r7, pc}
   246f0:	00023ecd 	.word	0x00023ecd

000246f4 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   246f4:	b590      	push	{r4, r7, lr}
   246f6:	b087      	sub	sp, #28
   246f8:	af00      	add	r7, sp, #0
   246fa:	60f8      	str	r0, [r7, #12]
   246fc:	60b9      	str	r1, [r7, #8]
   246fe:	1dbb      	adds	r3, r7, #6
   24700:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
   24702:	2317      	movs	r3, #23
   24704:	18fc      	adds	r4, r7, r3
   24706:	1dbb      	adds	r3, r7, #6
   24708:	881a      	ldrh	r2, [r3, #0]
   2470a:	68b9      	ldr	r1, [r7, #8]
   2470c:	68fb      	ldr	r3, [r7, #12]
   2470e:	0018      	movs	r0, r3
   24710:	4b0d      	ldr	r3, [pc, #52]	; (24748 <nm_spi_read_block+0x54>)
   24712:	4798      	blx	r3
   24714:	0003      	movs	r3, r0
   24716:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   24718:	2317      	movs	r3, #23
   2471a:	18fb      	adds	r3, r7, r3
   2471c:	781b      	ldrb	r3, [r3, #0]
   2471e:	b25b      	sxtb	r3, r3
   24720:	2b01      	cmp	r3, #1
   24722:	d104      	bne.n	2472e <nm_spi_read_block+0x3a>
   24724:	2317      	movs	r3, #23
   24726:	18fb      	adds	r3, r7, r3
   24728:	2200      	movs	r2, #0
   2472a:	701a      	strb	r2, [r3, #0]
   2472c:	e003      	b.n	24736 <nm_spi_read_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   2472e:	2317      	movs	r3, #23
   24730:	18fb      	adds	r3, r7, r3
   24732:	22fa      	movs	r2, #250	; 0xfa
   24734:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   24736:	2317      	movs	r3, #23
   24738:	18fb      	adds	r3, r7, r3
   2473a:	781b      	ldrb	r3, [r3, #0]
   2473c:	b25b      	sxtb	r3, r3
}
   2473e:	0018      	movs	r0, r3
   24740:	46bd      	mov	sp, r7
   24742:	b007      	add	sp, #28
   24744:	bd90      	pop	{r4, r7, pc}
   24746:	46c0      	nop			; (mov r8, r8)
   24748:	0002433d 	.word	0x0002433d

0002474c <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   2474c:	b590      	push	{r4, r7, lr}
   2474e:	b087      	sub	sp, #28
   24750:	af00      	add	r7, sp, #0
   24752:	60f8      	str	r0, [r7, #12]
   24754:	60b9      	str	r1, [r7, #8]
   24756:	1dbb      	adds	r3, r7, #6
   24758:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
   2475a:	2317      	movs	r3, #23
   2475c:	18fc      	adds	r4, r7, r3
   2475e:	1dbb      	adds	r3, r7, #6
   24760:	881a      	ldrh	r2, [r3, #0]
   24762:	68b9      	ldr	r1, [r7, #8]
   24764:	68fb      	ldr	r3, [r7, #12]
   24766:	0018      	movs	r0, r3
   24768:	4b0d      	ldr	r3, [pc, #52]	; (247a0 <nm_spi_write_block+0x54>)
   2476a:	4798      	blx	r3
   2476c:	0003      	movs	r3, r0
   2476e:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   24770:	2317      	movs	r3, #23
   24772:	18fb      	adds	r3, r7, r3
   24774:	781b      	ldrb	r3, [r3, #0]
   24776:	b25b      	sxtb	r3, r3
   24778:	2b01      	cmp	r3, #1
   2477a:	d104      	bne.n	24786 <nm_spi_write_block+0x3a>
   2477c:	2317      	movs	r3, #23
   2477e:	18fb      	adds	r3, r7, r3
   24780:	2200      	movs	r2, #0
   24782:	701a      	strb	r2, [r3, #0]
   24784:	e003      	b.n	2478e <nm_spi_write_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   24786:	2317      	movs	r3, #23
   24788:	18fb      	adds	r3, r7, r3
   2478a:	22fa      	movs	r2, #250	; 0xfa
   2478c:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   2478e:	2317      	movs	r3, #23
   24790:	18fb      	adds	r3, r7, r3
   24792:	781b      	ldrb	r3, [r3, #0]
   24794:	b25b      	sxtb	r3, r3
}
   24796:	0018      	movs	r0, r3
   24798:	46bd      	mov	sp, r7
   2479a:	b007      	add	sp, #28
   2479c:	bd90      	pop	{r4, r7, pc}
   2479e:	46c0      	nop			; (mov r8, r8)
   247a0:	00024019 	.word	0x00024019

000247a4 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
   247a4:	b590      	push	{r4, r7, lr}
   247a6:	b089      	sub	sp, #36	; 0x24
   247a8:	af00      	add	r7, sp, #0
   247aa:	60b9      	str	r1, [r7, #8]
   247ac:	0011      	movs	r1, r2
   247ae:	607b      	str	r3, [r7, #4]
   247b0:	230f      	movs	r3, #15
   247b2:	18fb      	adds	r3, r7, r3
   247b4:	1c02      	adds	r2, r0, #0
   247b6:	701a      	strb	r2, [r3, #0]
   247b8:	230e      	movs	r3, #14
   247ba:	18fb      	adds	r3, r7, r3
   247bc:	1c0a      	adds	r2, r1, #0
   247be:	701a      	strb	r2, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
   247c0:	2330      	movs	r3, #48	; 0x30
   247c2:	18fb      	adds	r3, r7, r3
   247c4:	881b      	ldrh	r3, [r3, #0]
   247c6:	2b00      	cmp	r3, #0
   247c8:	d100      	bne.n	247cc <Socket_ReadSocketData+0x28>
   247ca:	e0d7      	b.n	2497c <Socket_ReadSocketData+0x1d8>
   247cc:	230f      	movs	r3, #15
   247ce:	18fb      	adds	r3, r7, r3
   247d0:	2200      	movs	r2, #0
   247d2:	569a      	ldrsb	r2, [r3, r2]
   247d4:	4b6b      	ldr	r3, [pc, #428]	; (24984 <Socket_ReadSocketData+0x1e0>)
   247d6:	0112      	lsls	r2, r2, #4
   247d8:	58d3      	ldr	r3, [r2, r3]
   247da:	2b00      	cmp	r3, #0
   247dc:	d100      	bne.n	247e0 <Socket_ReadSocketData+0x3c>
   247de:	e0cd      	b.n	2497c <Socket_ReadSocketData+0x1d8>
   247e0:	230f      	movs	r3, #15
   247e2:	18fb      	adds	r3, r7, r3
   247e4:	781b      	ldrb	r3, [r3, #0]
   247e6:	b25b      	sxtb	r3, r3
   247e8:	4a66      	ldr	r2, [pc, #408]	; (24984 <Socket_ReadSocketData+0x1e0>)
   247ea:	011b      	lsls	r3, r3, #4
   247ec:	18d3      	adds	r3, r2, r3
   247ee:	3304      	adds	r3, #4
   247f0:	881b      	ldrh	r3, [r3, #0]
   247f2:	b29b      	uxth	r3, r3
   247f4:	2b00      	cmp	r3, #0
   247f6:	d100      	bne.n	247fa <Socket_ReadSocketData+0x56>
   247f8:	e0c0      	b.n	2497c <Socket_ReadSocketData+0x1d8>
   247fa:	230f      	movs	r3, #15
   247fc:	18fb      	adds	r3, r7, r3
   247fe:	781b      	ldrb	r3, [r3, #0]
   24800:	b25b      	sxtb	r3, r3
   24802:	4a60      	ldr	r2, [pc, #384]	; (24984 <Socket_ReadSocketData+0x1e0>)
   24804:	011b      	lsls	r3, r3, #4
   24806:	18d3      	adds	r3, r2, r3
   24808:	330a      	adds	r3, #10
   2480a:	781b      	ldrb	r3, [r3, #0]
   2480c:	b2db      	uxtb	r3, r3
   2480e:	2b01      	cmp	r3, #1
   24810:	d000      	beq.n	24814 <Socket_ReadSocketData+0x70>
   24812:	e0b3      	b.n	2497c <Socket_ReadSocketData+0x1d8>
	{
		uint32	u32Address = u32StartAddress;
   24814:	687b      	ldr	r3, [r7, #4]
   24816:	61fb      	str	r3, [r7, #28]
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
   24818:	68bb      	ldr	r3, [r7, #8]
   2481a:	2230      	movs	r2, #48	; 0x30
   2481c:	18ba      	adds	r2, r7, r2
   2481e:	8812      	ldrh	r2, [r2, #0]
   24820:	80da      	strh	r2, [r3, #6]
		do
		{
			u8SetRxDone = 1;
   24822:	2319      	movs	r3, #25
   24824:	18fb      	adds	r3, r7, r3
   24826:	2201      	movs	r2, #1
   24828:	701a      	strb	r2, [r3, #0]
			u16Read = u16ReadCount;
   2482a:	231a      	movs	r3, #26
   2482c:	18fb      	adds	r3, r7, r3
   2482e:	2230      	movs	r2, #48	; 0x30
   24830:	18ba      	adds	r2, r7, r2
   24832:	8812      	ldrh	r2, [r2, #0]
   24834:	801a      	strh	r2, [r3, #0]
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
   24836:	230f      	movs	r3, #15
   24838:	18fb      	adds	r3, r7, r3
   2483a:	781b      	ldrb	r3, [r3, #0]
   2483c:	b25b      	sxtb	r3, r3
   2483e:	4a51      	ldr	r2, [pc, #324]	; (24984 <Socket_ReadSocketData+0x1e0>)
   24840:	011b      	lsls	r3, r3, #4
   24842:	18d3      	adds	r3, r2, r3
   24844:	3304      	adds	r3, #4
   24846:	881b      	ldrh	r3, [r3, #0]
   24848:	b29b      	uxth	r3, r3
   2484a:	221a      	movs	r2, #26
   2484c:	18ba      	adds	r2, r7, r2
   2484e:	8812      	ldrh	r2, [r2, #0]
   24850:	1ad3      	subs	r3, r2, r3
   24852:	b29a      	uxth	r2, r3
   24854:	2316      	movs	r3, #22
   24856:	18fb      	adds	r3, r7, r3
   24858:	801a      	strh	r2, [r3, #0]
			if(s16Diff > 0)
   2485a:	2316      	movs	r3, #22
   2485c:	18fb      	adds	r3, r7, r3
   2485e:	2200      	movs	r2, #0
   24860:	5e9b      	ldrsh	r3, [r3, r2]
   24862:	2b00      	cmp	r3, #0
   24864:	dd0f      	ble.n	24886 <Socket_ReadSocketData+0xe2>
			{
				u8SetRxDone = 0;
   24866:	2319      	movs	r3, #25
   24868:	18fb      	adds	r3, r7, r3
   2486a:	2200      	movs	r2, #0
   2486c:	701a      	strb	r2, [r3, #0]
				u16Read		= gastrSockets[sock].u16UserBufferSize;
   2486e:	230f      	movs	r3, #15
   24870:	18fb      	adds	r3, r7, r3
   24872:	2200      	movs	r2, #0
   24874:	569a      	ldrsb	r2, [r3, r2]
   24876:	231a      	movs	r3, #26
   24878:	18fb      	adds	r3, r7, r3
   2487a:	4942      	ldr	r1, [pc, #264]	; (24984 <Socket_ReadSocketData+0x1e0>)
   2487c:	0112      	lsls	r2, r2, #4
   2487e:	188a      	adds	r2, r1, r2
   24880:	3204      	adds	r2, #4
   24882:	8812      	ldrh	r2, [r2, #0]
   24884:	801a      	strh	r2, [r3, #0]
			}
			
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
   24886:	230f      	movs	r3, #15
   24888:	18fb      	adds	r3, r7, r3
   2488a:	2200      	movs	r2, #0
   2488c:	569a      	ldrsb	r2, [r3, r2]
   2488e:	4b3d      	ldr	r3, [pc, #244]	; (24984 <Socket_ReadSocketData+0x1e0>)
   24890:	0112      	lsls	r2, r2, #4
   24892:	58d1      	ldr	r1, [r2, r3]
   24894:	2319      	movs	r3, #25
   24896:	18fb      	adds	r3, r7, r3
   24898:	781c      	ldrb	r4, [r3, #0]
   2489a:	231a      	movs	r3, #26
   2489c:	18fb      	adds	r3, r7, r3
   2489e:	881a      	ldrh	r2, [r3, #0]
   248a0:	69f8      	ldr	r0, [r7, #28]
   248a2:	0023      	movs	r3, r4
   248a4:	4c38      	ldr	r4, [pc, #224]	; (24988 <Socket_ReadSocketData+0x1e4>)
   248a6:	47a0      	blx	r4
   248a8:	1e03      	subs	r3, r0, #0
   248aa:	d14f      	bne.n	2494c <Socket_ReadSocketData+0x1a8>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
   248ac:	230f      	movs	r3, #15
   248ae:	18fb      	adds	r3, r7, r3
   248b0:	2200      	movs	r2, #0
   248b2:	569a      	ldrsb	r2, [r3, r2]
   248b4:	4b33      	ldr	r3, [pc, #204]	; (24984 <Socket_ReadSocketData+0x1e0>)
   248b6:	0112      	lsls	r2, r2, #4
   248b8:	58d2      	ldr	r2, [r2, r3]
   248ba:	68bb      	ldr	r3, [r7, #8]
   248bc:	601a      	str	r2, [r3, #0]
				pstrRecv->s16BufferSize		= u16Read;
   248be:	231a      	movs	r3, #26
   248c0:	18fb      	adds	r3, r7, r3
   248c2:	2200      	movs	r2, #0
   248c4:	5e9a      	ldrsh	r2, [r3, r2]
   248c6:	68bb      	ldr	r3, [r7, #8]
   248c8:	809a      	strh	r2, [r3, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
   248ca:	68bb      	ldr	r3, [r7, #8]
   248cc:	88da      	ldrh	r2, [r3, #6]
   248ce:	231a      	movs	r3, #26
   248d0:	18fb      	adds	r3, r7, r3
   248d2:	881b      	ldrh	r3, [r3, #0]
   248d4:	1ad3      	subs	r3, r2, r3
   248d6:	b29a      	uxth	r2, r3
   248d8:	68bb      	ldr	r3, [r7, #8]
   248da:	80da      	strh	r2, [r3, #6]

				if (gpfAppSocketCb)
   248dc:	4b2b      	ldr	r3, [pc, #172]	; (2498c <Socket_ReadSocketData+0x1e8>)
   248de:	681b      	ldr	r3, [r3, #0]
   248e0:	2b00      	cmp	r3, #0
   248e2:	d00b      	beq.n	248fc <Socket_ReadSocketData+0x158>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
   248e4:	4b29      	ldr	r3, [pc, #164]	; (2498c <Socket_ReadSocketData+0x1e8>)
   248e6:	681b      	ldr	r3, [r3, #0]
   248e8:	68bc      	ldr	r4, [r7, #8]
   248ea:	220e      	movs	r2, #14
   248ec:	18ba      	adds	r2, r7, r2
   248ee:	7811      	ldrb	r1, [r2, #0]
   248f0:	220f      	movs	r2, #15
   248f2:	18ba      	adds	r2, r7, r2
   248f4:	2000      	movs	r0, #0
   248f6:	5610      	ldrsb	r0, [r2, r0]
   248f8:	0022      	movs	r2, r4
   248fa:	4798      	blx	r3

				u16ReadCount -= u16Read;
   248fc:	2330      	movs	r3, #48	; 0x30
   248fe:	18f9      	adds	r1, r7, r3
   24900:	2330      	movs	r3, #48	; 0x30
   24902:	18fa      	adds	r2, r7, r3
   24904:	231a      	movs	r3, #26
   24906:	18fb      	adds	r3, r7, r3
   24908:	8812      	ldrh	r2, [r2, #0]
   2490a:	881b      	ldrh	r3, [r3, #0]
   2490c:	1ad3      	subs	r3, r2, r3
   2490e:	800b      	strh	r3, [r1, #0]
				u32Address += u16Read;
   24910:	231a      	movs	r3, #26
   24912:	18fb      	adds	r3, r7, r3
   24914:	881b      	ldrh	r3, [r3, #0]
   24916:	69fa      	ldr	r2, [r7, #28]
   24918:	18d3      	adds	r3, r2, r3
   2491a:	61fb      	str	r3, [r7, #28]

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
   2491c:	230f      	movs	r3, #15
   2491e:	18fb      	adds	r3, r7, r3
   24920:	781b      	ldrb	r3, [r3, #0]
   24922:	b25b      	sxtb	r3, r3
   24924:	4a17      	ldr	r2, [pc, #92]	; (24984 <Socket_ReadSocketData+0x1e0>)
   24926:	011b      	lsls	r3, r3, #4
   24928:	18d3      	adds	r3, r2, r3
   2492a:	330a      	adds	r3, #10
   2492c:	781b      	ldrb	r3, [r3, #0]
   2492e:	b2db      	uxtb	r3, r3
   24930:	2b00      	cmp	r3, #0
   24932:	d11c      	bne.n	2496e <Socket_ReadSocketData+0x1ca>
   24934:	2330      	movs	r3, #48	; 0x30
   24936:	18fb      	adds	r3, r7, r3
   24938:	881b      	ldrh	r3, [r3, #0]
   2493a:	2b00      	cmp	r3, #0
   2493c:	d017      	beq.n	2496e <Socket_ReadSocketData+0x1ca>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   2493e:	2301      	movs	r3, #1
   24940:	2200      	movs	r2, #0
   24942:	2100      	movs	r1, #0
   24944:	2000      	movs	r0, #0
   24946:	4c10      	ldr	r4, [pc, #64]	; (24988 <Socket_ReadSocketData+0x1e4>)
   24948:	47a0      	blx	r4
						M2M_DBG("hif_receive Success\n");
					else
						M2M_DBG("hif_receive Fail\n");
					break;
   2494a:	e017      	b.n	2497c <Socket_ReadSocketData+0x1d8>
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
   2494c:	4b10      	ldr	r3, [pc, #64]	; (24990 <Socket_ReadSocketData+0x1ec>)
   2494e:	0018      	movs	r0, r3
   24950:	4b10      	ldr	r3, [pc, #64]	; (24994 <Socket_ReadSocketData+0x1f0>)
   24952:	4798      	blx	r3
   24954:	2330      	movs	r3, #48	; 0x30
   24956:	18fb      	adds	r3, r7, r3
   24958:	881a      	ldrh	r2, [r3, #0]
   2495a:	4b0f      	ldr	r3, [pc, #60]	; (24998 <Socket_ReadSocketData+0x1f4>)
   2495c:	0011      	movs	r1, r2
   2495e:	0018      	movs	r0, r3
   24960:	4b0c      	ldr	r3, [pc, #48]	; (24994 <Socket_ReadSocketData+0x1f0>)
   24962:	4798      	blx	r3
   24964:	4b0d      	ldr	r3, [pc, #52]	; (2499c <Socket_ReadSocketData+0x1f8>)
   24966:	0018      	movs	r0, r3
   24968:	4b0a      	ldr	r3, [pc, #40]	; (24994 <Socket_ReadSocketData+0x1f0>)
   2496a:	4798      	blx	r3
				break;
   2496c:	e006      	b.n	2497c <Socket_ReadSocketData+0x1d8>
			}
		}while(u16ReadCount != 0);
   2496e:	2330      	movs	r3, #48	; 0x30
   24970:	18fb      	adds	r3, r7, r3
   24972:	881b      	ldrh	r3, [r3, #0]
   24974:	2b00      	cmp	r3, #0
   24976:	d000      	beq.n	2497a <Socket_ReadSocketData+0x1d6>
   24978:	e753      	b.n	24822 <Socket_ReadSocketData+0x7e>
	}
}
   2497a:	e7ff      	b.n	2497c <Socket_ReadSocketData+0x1d8>
   2497c:	46c0      	nop			; (mov r8, r8)
   2497e:	46bd      	mov	sp, r7
   24980:	b009      	add	sp, #36	; 0x24
   24982:	bd90      	pop	{r4, r7, pc}
   24984:	20005424 	.word	0x20005424
   24988:	0002119d 	.word	0x0002119d
   2498c:	200054d4 	.word	0x200054d4
   24990:	00039de0 	.word	0x00039de0
   24994:	0001dc4d 	.word	0x0001dc4d
   24998:	00039dec 	.word	0x00039dec
   2499c:	00039e00 	.word	0x00039e00

000249a0 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
   249a0:	b590      	push	{r4, r7, lr}
   249a2:	b0bb      	sub	sp, #236	; 0xec
   249a4:	af02      	add	r7, sp, #8
   249a6:	603a      	str	r2, [r7, #0]
   249a8:	1dfb      	adds	r3, r7, #7
   249aa:	1c02      	adds	r2, r0, #0
   249ac:	701a      	strb	r2, [r3, #0]
   249ae:	1d3b      	adds	r3, r7, #4
   249b0:	1c0a      	adds	r2, r1, #0
   249b2:	801a      	strh	r2, [r3, #0]
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
   249b4:	1dfb      	adds	r3, r7, #7
   249b6:	781b      	ldrb	r3, [r3, #0]
   249b8:	2b41      	cmp	r3, #65	; 0x41
   249ba:	d003      	beq.n	249c4 <m2m_ip_cb+0x24>
   249bc:	1dfb      	adds	r3, r7, #7
   249be:	781b      	ldrb	r3, [r3, #0]
   249c0:	2b54      	cmp	r3, #84	; 0x54
   249c2:	d120      	bne.n	24a06 <m2m_ip_cb+0x66>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
   249c4:	23cc      	movs	r3, #204	; 0xcc
   249c6:	18f9      	adds	r1, r7, r3
   249c8:	6838      	ldr	r0, [r7, #0]
   249ca:	2300      	movs	r3, #0
   249cc:	2204      	movs	r2, #4
   249ce:	4c98      	ldr	r4, [pc, #608]	; (24c30 <m2m_ip_cb+0x290>)
   249d0:	47a0      	blx	r4
   249d2:	1e03      	subs	r3, r0, #0
   249d4:	d000      	beq.n	249d8 <m2m_ip_cb+0x38>
   249d6:	e275      	b.n	24ec4 <m2m_ip_cb+0x524>
		{
			strBind.status = strBindReply.s8Status;
   249d8:	23cc      	movs	r3, #204	; 0xcc
   249da:	18fb      	adds	r3, r7, r3
   249dc:	2201      	movs	r2, #1
   249de:	569a      	ldrsb	r2, [r3, r2]
   249e0:	23c8      	movs	r3, #200	; 0xc8
   249e2:	18fb      	adds	r3, r7, r3
   249e4:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   249e6:	4b93      	ldr	r3, [pc, #588]	; (24c34 <m2m_ip_cb+0x294>)
   249e8:	681b      	ldr	r3, [r3, #0]
   249ea:	2b00      	cmp	r3, #0
   249ec:	d100      	bne.n	249f0 <m2m_ip_cb+0x50>
   249ee:	e269      	b.n	24ec4 <m2m_ip_cb+0x524>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
   249f0:	4b90      	ldr	r3, [pc, #576]	; (24c34 <m2m_ip_cb+0x294>)
   249f2:	681b      	ldr	r3, [r3, #0]
   249f4:	22cc      	movs	r2, #204	; 0xcc
   249f6:	18ba      	adds	r2, r7, r2
   249f8:	2000      	movs	r0, #0
   249fa:	5610      	ldrsb	r0, [r2, r0]
   249fc:	22c8      	movs	r2, #200	; 0xc8
   249fe:	18ba      	adds	r2, r7, r2
   24a00:	2101      	movs	r1, #1
   24a02:	4798      	blx	r3
	{
   24a04:	e25e      	b.n	24ec4 <m2m_ip_cb+0x524>
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
   24a06:	1dfb      	adds	r3, r7, #7
   24a08:	781b      	ldrb	r3, [r3, #0]
   24a0a:	2b42      	cmp	r3, #66	; 0x42
   24a0c:	d120      	bne.n	24a50 <m2m_ip_cb+0xb0>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
   24a0e:	23c4      	movs	r3, #196	; 0xc4
   24a10:	18f9      	adds	r1, r7, r3
   24a12:	6838      	ldr	r0, [r7, #0]
   24a14:	2300      	movs	r3, #0
   24a16:	2204      	movs	r2, #4
   24a18:	4c85      	ldr	r4, [pc, #532]	; (24c30 <m2m_ip_cb+0x290>)
   24a1a:	47a0      	blx	r4
   24a1c:	1e03      	subs	r3, r0, #0
   24a1e:	d000      	beq.n	24a22 <m2m_ip_cb+0x82>
   24a20:	e257      	b.n	24ed2 <m2m_ip_cb+0x532>
		{
			strListen.status = strListenReply.s8Status;
   24a22:	23c4      	movs	r3, #196	; 0xc4
   24a24:	18fb      	adds	r3, r7, r3
   24a26:	2201      	movs	r2, #1
   24a28:	569a      	ldrsb	r2, [r3, r2]
   24a2a:	23c0      	movs	r3, #192	; 0xc0
   24a2c:	18fb      	adds	r3, r7, r3
   24a2e:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   24a30:	4b80      	ldr	r3, [pc, #512]	; (24c34 <m2m_ip_cb+0x294>)
   24a32:	681b      	ldr	r3, [r3, #0]
   24a34:	2b00      	cmp	r3, #0
   24a36:	d100      	bne.n	24a3a <m2m_ip_cb+0x9a>
   24a38:	e24b      	b.n	24ed2 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
   24a3a:	4b7e      	ldr	r3, [pc, #504]	; (24c34 <m2m_ip_cb+0x294>)
   24a3c:	681b      	ldr	r3, [r3, #0]
   24a3e:	22c4      	movs	r2, #196	; 0xc4
   24a40:	18ba      	adds	r2, r7, r2
   24a42:	2000      	movs	r0, #0
   24a44:	5610      	ldrsb	r0, [r2, r0]
   24a46:	22c0      	movs	r2, #192	; 0xc0
   24a48:	18ba      	adds	r2, r7, r2
   24a4a:	2102      	movs	r1, #2
   24a4c:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
   24a4e:	e240      	b.n	24ed2 <m2m_ip_cb+0x532>
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
   24a50:	1dfb      	adds	r3, r7, #7
   24a52:	781b      	ldrb	r3, [r3, #0]
   24a54:	2b43      	cmp	r3, #67	; 0x43
   24a56:	d000      	beq.n	24a5a <m2m_ip_cb+0xba>
   24a58:	e086      	b.n	24b68 <m2m_ip_cb+0x1c8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
   24a5a:	23b4      	movs	r3, #180	; 0xb4
   24a5c:	18f9      	adds	r1, r7, r3
   24a5e:	6838      	ldr	r0, [r7, #0]
   24a60:	2300      	movs	r3, #0
   24a62:	220c      	movs	r2, #12
   24a64:	4c72      	ldr	r4, [pc, #456]	; (24c30 <m2m_ip_cb+0x290>)
   24a66:	47a0      	blx	r4
   24a68:	1e03      	subs	r3, r0, #0
   24a6a:	d000      	beq.n	24a6e <m2m_ip_cb+0xce>
   24a6c:	e231      	b.n	24ed2 <m2m_ip_cb+0x532>
			if(strAcceptReply.sConnectedSock >= 0)
   24a6e:	23b4      	movs	r3, #180	; 0xb4
   24a70:	18fb      	adds	r3, r7, r3
   24a72:	7a5b      	ldrb	r3, [r3, #9]
   24a74:	b25b      	sxtb	r3, r3
   24a76:	2b00      	cmp	r3, #0
   24a78:	db4f      	blt.n	24b1a <m2m_ip_cb+0x17a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
   24a7a:	23b4      	movs	r3, #180	; 0xb4
   24a7c:	18fb      	adds	r3, r7, r3
   24a7e:	7a5b      	ldrb	r3, [r3, #9]
   24a80:	b25b      	sxtb	r3, r3
   24a82:	0018      	movs	r0, r3
   24a84:	23b4      	movs	r3, #180	; 0xb4
   24a86:	18fb      	adds	r3, r7, r3
   24a88:	7a1b      	ldrb	r3, [r3, #8]
   24a8a:	b25b      	sxtb	r3, r3
   24a8c:	4a6a      	ldr	r2, [pc, #424]	; (24c38 <m2m_ip_cb+0x298>)
   24a8e:	011b      	lsls	r3, r3, #4
   24a90:	18d3      	adds	r3, r2, r3
   24a92:	330b      	adds	r3, #11
   24a94:	781b      	ldrb	r3, [r3, #0]
   24a96:	b2d9      	uxtb	r1, r3
   24a98:	4a67      	ldr	r2, [pc, #412]	; (24c38 <m2m_ip_cb+0x298>)
   24a9a:	0103      	lsls	r3, r0, #4
   24a9c:	18d3      	adds	r3, r2, r3
   24a9e:	330b      	adds	r3, #11
   24aa0:	1c0a      	adds	r2, r1, #0
   24aa2:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
   24aa4:	23b4      	movs	r3, #180	; 0xb4
   24aa6:	18fb      	adds	r3, r7, r3
   24aa8:	7a5b      	ldrb	r3, [r3, #9]
   24aaa:	b25b      	sxtb	r3, r3
   24aac:	4a62      	ldr	r2, [pc, #392]	; (24c38 <m2m_ip_cb+0x298>)
   24aae:	011b      	lsls	r3, r3, #4
   24ab0:	18d3      	adds	r3, r2, r3
   24ab2:	330a      	adds	r3, #10
   24ab4:	2201      	movs	r2, #1
   24ab6:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   24ab8:	23b4      	movs	r3, #180	; 0xb4
   24aba:	18fb      	adds	r3, r7, r3
   24abc:	7a5b      	ldrb	r3, [r3, #9]
   24abe:	b25b      	sxtb	r3, r3
   24ac0:	0018      	movs	r0, r3
   24ac2:	23b4      	movs	r3, #180	; 0xb4
   24ac4:	18fb      	adds	r3, r7, r3
   24ac6:	895b      	ldrh	r3, [r3, #10]
   24ac8:	3b08      	subs	r3, #8
   24aca:	b299      	uxth	r1, r3
   24acc:	4a5a      	ldr	r2, [pc, #360]	; (24c38 <m2m_ip_cb+0x298>)
   24ace:	0103      	lsls	r3, r0, #4
   24ad0:	18d3      	adds	r3, r2, r3
   24ad2:	3308      	adds	r3, #8
   24ad4:	1c0a      	adds	r2, r1, #0
   24ad6:	801a      	strh	r2, [r3, #0]
				++gu16SessionID;
   24ad8:	4b58      	ldr	r3, [pc, #352]	; (24c3c <m2m_ip_cb+0x29c>)
   24ada:	881b      	ldrh	r3, [r3, #0]
   24adc:	b29b      	uxth	r3, r3
   24ade:	3301      	adds	r3, #1
   24ae0:	b29a      	uxth	r2, r3
   24ae2:	4b56      	ldr	r3, [pc, #344]	; (24c3c <m2m_ip_cb+0x29c>)
   24ae4:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
   24ae6:	4b55      	ldr	r3, [pc, #340]	; (24c3c <m2m_ip_cb+0x29c>)
   24ae8:	881b      	ldrh	r3, [r3, #0]
   24aea:	b29b      	uxth	r3, r3
   24aec:	2b00      	cmp	r3, #0
   24aee:	d106      	bne.n	24afe <m2m_ip_cb+0x15e>
					++gu16SessionID;
   24af0:	4b52      	ldr	r3, [pc, #328]	; (24c3c <m2m_ip_cb+0x29c>)
   24af2:	881b      	ldrh	r3, [r3, #0]
   24af4:	b29b      	uxth	r3, r3
   24af6:	3301      	adds	r3, #1
   24af8:	b29a      	uxth	r2, r3
   24afa:	4b50      	ldr	r3, [pc, #320]	; (24c3c <m2m_ip_cb+0x29c>)
   24afc:	801a      	strh	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
   24afe:	23b4      	movs	r3, #180	; 0xb4
   24b00:	18fb      	adds	r3, r7, r3
   24b02:	7a5b      	ldrb	r3, [r3, #9]
   24b04:	b25b      	sxtb	r3, r3
   24b06:	0018      	movs	r0, r3
   24b08:	4b4c      	ldr	r3, [pc, #304]	; (24c3c <m2m_ip_cb+0x29c>)
   24b0a:	881b      	ldrh	r3, [r3, #0]
   24b0c:	b299      	uxth	r1, r3
   24b0e:	4a4a      	ldr	r2, [pc, #296]	; (24c38 <m2m_ip_cb+0x298>)
   24b10:	0103      	lsls	r3, r0, #4
   24b12:	18d3      	adds	r3, r2, r3
   24b14:	3306      	adds	r3, #6
   24b16:	1c0a      	adds	r2, r1, #0
   24b18:	801a      	strh	r2, [r3, #0]
			strAccept.sock = strAcceptReply.sConnectedSock;
   24b1a:	23b4      	movs	r3, #180	; 0xb4
   24b1c:	18fb      	adds	r3, r7, r3
   24b1e:	2209      	movs	r2, #9
   24b20:	569a      	ldrsb	r2, [r3, r2]
   24b22:	23a0      	movs	r3, #160	; 0xa0
   24b24:	18fb      	adds	r3, r7, r3
   24b26:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
   24b28:	23a0      	movs	r3, #160	; 0xa0
   24b2a:	18fb      	adds	r3, r7, r3
   24b2c:	2202      	movs	r2, #2
   24b2e:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
   24b30:	23b4      	movs	r3, #180	; 0xb4
   24b32:	18fb      	adds	r3, r7, r3
   24b34:	885a      	ldrh	r2, [r3, #2]
   24b36:	23a0      	movs	r3, #160	; 0xa0
   24b38:	18fb      	adds	r3, r7, r3
   24b3a:	80da      	strh	r2, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
   24b3c:	23b4      	movs	r3, #180	; 0xb4
   24b3e:	18fb      	adds	r3, r7, r3
   24b40:	685a      	ldr	r2, [r3, #4]
   24b42:	23a0      	movs	r3, #160	; 0xa0
   24b44:	18fb      	adds	r3, r7, r3
   24b46:	609a      	str	r2, [r3, #8]
			if(gpfAppSocketCb)
   24b48:	4b3a      	ldr	r3, [pc, #232]	; (24c34 <m2m_ip_cb+0x294>)
   24b4a:	681b      	ldr	r3, [r3, #0]
   24b4c:	2b00      	cmp	r3, #0
   24b4e:	d100      	bne.n	24b52 <m2m_ip_cb+0x1b2>
   24b50:	e1bf      	b.n	24ed2 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
   24b52:	4b38      	ldr	r3, [pc, #224]	; (24c34 <m2m_ip_cb+0x294>)
   24b54:	681b      	ldr	r3, [r3, #0]
   24b56:	22b4      	movs	r2, #180	; 0xb4
   24b58:	18ba      	adds	r2, r7, r2
   24b5a:	2008      	movs	r0, #8
   24b5c:	5610      	ldrsb	r0, [r2, r0]
   24b5e:	22a0      	movs	r2, #160	; 0xa0
   24b60:	18ba      	adds	r2, r7, r2
   24b62:	2104      	movs	r1, #4
   24b64:	4798      	blx	r3
}
   24b66:	e1b4      	b.n	24ed2 <m2m_ip_cb+0x532>
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
   24b68:	1dfb      	adds	r3, r7, #7
   24b6a:	781b      	ldrb	r3, [r3, #0]
   24b6c:	2b44      	cmp	r3, #68	; 0x44
   24b6e:	d003      	beq.n	24b78 <m2m_ip_cb+0x1d8>
   24b70:	1dfb      	adds	r3, r7, #7
   24b72:	781b      	ldrb	r3, [r3, #0]
   24b74:	2b4b      	cmp	r3, #75	; 0x4b
   24b76:	d13d      	bne.n	24bf4 <m2m_ip_cb+0x254>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
   24b78:	239c      	movs	r3, #156	; 0x9c
   24b7a:	18f9      	adds	r1, r7, r3
   24b7c:	6838      	ldr	r0, [r7, #0]
   24b7e:	2300      	movs	r3, #0
   24b80:	2204      	movs	r2, #4
   24b82:	4c2b      	ldr	r4, [pc, #172]	; (24c30 <m2m_ip_cb+0x290>)
   24b84:	47a0      	blx	r4
   24b86:	1e03      	subs	r3, r0, #0
   24b88:	d000      	beq.n	24b8c <m2m_ip_cb+0x1ec>
   24b8a:	e19d      	b.n	24ec8 <m2m_ip_cb+0x528>
			strConnMsg.sock		= strConnectReply.sock;
   24b8c:	239c      	movs	r3, #156	; 0x9c
   24b8e:	18fb      	adds	r3, r7, r3
   24b90:	2200      	movs	r2, #0
   24b92:	569a      	ldrsb	r2, [r3, r2]
   24b94:	2398      	movs	r3, #152	; 0x98
   24b96:	18fb      	adds	r3, r7, r3
   24b98:	701a      	strb	r2, [r3, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
   24b9a:	239c      	movs	r3, #156	; 0x9c
   24b9c:	18fb      	adds	r3, r7, r3
   24b9e:	2201      	movs	r2, #1
   24ba0:	569a      	ldrsb	r2, [r3, r2]
   24ba2:	2398      	movs	r3, #152	; 0x98
   24ba4:	18fb      	adds	r3, r7, r3
   24ba6:	705a      	strb	r2, [r3, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
   24ba8:	239c      	movs	r3, #156	; 0x9c
   24baa:	18fb      	adds	r3, r7, r3
   24bac:	785b      	ldrb	r3, [r3, #1]
   24bae:	b25b      	sxtb	r3, r3
   24bb0:	2b00      	cmp	r3, #0
   24bb2:	d10f      	bne.n	24bd4 <m2m_ip_cb+0x234>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   24bb4:	239c      	movs	r3, #156	; 0x9c
   24bb6:	18fb      	adds	r3, r7, r3
   24bb8:	781b      	ldrb	r3, [r3, #0]
   24bba:	b25b      	sxtb	r3, r3
   24bbc:	0018      	movs	r0, r3
   24bbe:	239c      	movs	r3, #156	; 0x9c
   24bc0:	18fb      	adds	r3, r7, r3
   24bc2:	885b      	ldrh	r3, [r3, #2]
   24bc4:	3b08      	subs	r3, #8
   24bc6:	b299      	uxth	r1, r3
   24bc8:	4a1b      	ldr	r2, [pc, #108]	; (24c38 <m2m_ip_cb+0x298>)
   24bca:	0103      	lsls	r3, r0, #4
   24bcc:	18d3      	adds	r3, r2, r3
   24bce:	3308      	adds	r3, #8
   24bd0:	1c0a      	adds	r2, r1, #0
   24bd2:	801a      	strh	r2, [r3, #0]
			if(gpfAppSocketCb)
   24bd4:	4b17      	ldr	r3, [pc, #92]	; (24c34 <m2m_ip_cb+0x294>)
   24bd6:	681b      	ldr	r3, [r3, #0]
   24bd8:	2b00      	cmp	r3, #0
   24bda:	d100      	bne.n	24bde <m2m_ip_cb+0x23e>
   24bdc:	e174      	b.n	24ec8 <m2m_ip_cb+0x528>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
   24bde:	4b15      	ldr	r3, [pc, #84]	; (24c34 <m2m_ip_cb+0x294>)
   24be0:	681b      	ldr	r3, [r3, #0]
   24be2:	229c      	movs	r2, #156	; 0x9c
   24be4:	18ba      	adds	r2, r7, r2
   24be6:	2000      	movs	r0, #0
   24be8:	5610      	ldrsb	r0, [r2, r0]
   24bea:	2298      	movs	r2, #152	; 0x98
   24bec:	18ba      	adds	r2, r7, r2
   24bee:	2105      	movs	r1, #5
   24bf0:	4798      	blx	r3
	{
   24bf2:	e169      	b.n	24ec8 <m2m_ip_cb+0x528>
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
   24bf4:	1dfb      	adds	r3, r7, #7
   24bf6:	781b      	ldrb	r3, [r3, #0]
   24bf8:	2b4a      	cmp	r3, #74	; 0x4a
   24bfa:	d123      	bne.n	24c44 <m2m_ip_cb+0x2a4>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
   24bfc:	230c      	movs	r3, #12
   24bfe:	18f9      	adds	r1, r7, r3
   24c00:	6838      	ldr	r0, [r7, #0]
   24c02:	2300      	movs	r3, #0
   24c04:	2244      	movs	r2, #68	; 0x44
   24c06:	4c0a      	ldr	r4, [pc, #40]	; (24c30 <m2m_ip_cb+0x290>)
   24c08:	47a0      	blx	r4
   24c0a:	1e03      	subs	r3, r0, #0
   24c0c:	d000      	beq.n	24c10 <m2m_ip_cb+0x270>
   24c0e:	e160      	b.n	24ed2 <m2m_ip_cb+0x532>
			if(gpfAppResolveCb)
   24c10:	4b0b      	ldr	r3, [pc, #44]	; (24c40 <m2m_ip_cb+0x2a0>)
   24c12:	681b      	ldr	r3, [r3, #0]
   24c14:	2b00      	cmp	r3, #0
   24c16:	d100      	bne.n	24c1a <m2m_ip_cb+0x27a>
   24c18:	e15b      	b.n	24ed2 <m2m_ip_cb+0x532>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
   24c1a:	4b09      	ldr	r3, [pc, #36]	; (24c40 <m2m_ip_cb+0x2a0>)
   24c1c:	681a      	ldr	r2, [r3, #0]
   24c1e:	230c      	movs	r3, #12
   24c20:	18fb      	adds	r3, r7, r3
   24c22:	6c19      	ldr	r1, [r3, #64]	; 0x40
   24c24:	230c      	movs	r3, #12
   24c26:	18fb      	adds	r3, r7, r3
   24c28:	0018      	movs	r0, r3
   24c2a:	4790      	blx	r2
}
   24c2c:	e151      	b.n	24ed2 <m2m_ip_cb+0x532>
   24c2e:	46c0      	nop			; (mov r8, r8)
   24c30:	0002119d 	.word	0x0002119d
   24c34:	200054d4 	.word	0x200054d4
   24c38:	20005424 	.word	0x20005424
   24c3c:	20003cce 	.word	0x20003cce
   24c40:	200054dc 	.word	0x200054dc
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
   24c44:	1dfb      	adds	r3, r7, #7
   24c46:	781b      	ldrb	r3, [r3, #0]
   24c48:	2b46      	cmp	r3, #70	; 0x46
   24c4a:	d008      	beq.n	24c5e <m2m_ip_cb+0x2be>
   24c4c:	1dfb      	adds	r3, r7, #7
   24c4e:	781b      	ldrb	r3, [r3, #0]
   24c50:	2b48      	cmp	r3, #72	; 0x48
   24c52:	d004      	beq.n	24c5e <m2m_ip_cb+0x2be>
   24c54:	1dfb      	adds	r3, r7, #7
   24c56:	781b      	ldrb	r3, [r3, #0]
   24c58:	2b4d      	cmp	r3, #77	; 0x4d
   24c5a:	d000      	beq.n	24c5e <m2m_ip_cb+0x2be>
   24c5c:	e0b4      	b.n	24dc8 <m2m_ip_cb+0x428>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
   24c5e:	23df      	movs	r3, #223	; 0xdf
   24c60:	18fb      	adds	r3, r7, r3
   24c62:	2206      	movs	r2, #6
   24c64:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_RECVFROM)
   24c66:	1dfb      	adds	r3, r7, #7
   24c68:	781b      	ldrb	r3, [r3, #0]
   24c6a:	2b48      	cmp	r3, #72	; 0x48
   24c6c:	d103      	bne.n	24c76 <m2m_ip_cb+0x2d6>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
   24c6e:	23df      	movs	r3, #223	; 0xdf
   24c70:	18fb      	adds	r3, r7, r3
   24c72:	2209      	movs	r2, #9
   24c74:	701a      	strb	r2, [r3, #0]
		u16ReadSize = sizeof(tstrRecvReply);
   24c76:	23d8      	movs	r3, #216	; 0xd8
   24c78:	18fb      	adds	r3, r7, r3
   24c7a:	2210      	movs	r2, #16
   24c7c:	801a      	strh	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
   24c7e:	23d8      	movs	r3, #216	; 0xd8
   24c80:	18fb      	adds	r3, r7, r3
   24c82:	881a      	ldrh	r2, [r3, #0]
   24c84:	2388      	movs	r3, #136	; 0x88
   24c86:	18f9      	adds	r1, r7, r3
   24c88:	6838      	ldr	r0, [r7, #0]
   24c8a:	2300      	movs	r3, #0
   24c8c:	4c93      	ldr	r4, [pc, #588]	; (24edc <m2m_ip_cb+0x53c>)
   24c8e:	47a0      	blx	r4
   24c90:	1e03      	subs	r3, r0, #0
   24c92:	d000      	beq.n	24c96 <m2m_ip_cb+0x2f6>
   24c94:	e11a      	b.n	24ecc <m2m_ip_cb+0x52c>
			uint16 u16SessionID = 0;
   24c96:	23d6      	movs	r3, #214	; 0xd6
   24c98:	18fb      	adds	r3, r7, r3
   24c9a:	2200      	movs	r2, #0
   24c9c:	801a      	strh	r2, [r3, #0]
			sock			= strRecvReply.sock;
   24c9e:	23d5      	movs	r3, #213	; 0xd5
   24ca0:	18fb      	adds	r3, r7, r3
   24ca2:	2288      	movs	r2, #136	; 0x88
   24ca4:	18ba      	adds	r2, r7, r2
   24ca6:	7b12      	ldrb	r2, [r2, #12]
   24ca8:	701a      	strb	r2, [r3, #0]
			u16SessionID = strRecvReply.u16SessionID;
   24caa:	23d6      	movs	r3, #214	; 0xd6
   24cac:	18fb      	adds	r3, r7, r3
   24cae:	2288      	movs	r2, #136	; 0x88
   24cb0:	18ba      	adds	r2, r7, r2
   24cb2:	89d2      	ldrh	r2, [r2, #14]
   24cb4:	801a      	strh	r2, [r3, #0]
			gastrSockets[sock].bIsRecvPending = 0;
   24cb6:	23d5      	movs	r3, #213	; 0xd5
   24cb8:	18fb      	adds	r3, r7, r3
   24cba:	781b      	ldrb	r3, [r3, #0]
   24cbc:	b25b      	sxtb	r3, r3
   24cbe:	4a88      	ldr	r2, [pc, #544]	; (24ee0 <m2m_ip_cb+0x540>)
   24cc0:	011b      	lsls	r3, r3, #4
   24cc2:	18d3      	adds	r3, r2, r3
   24cc4:	330c      	adds	r3, #12
   24cc6:	2200      	movs	r2, #0
   24cc8:	701a      	strb	r2, [r3, #0]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
   24cca:	23d2      	movs	r3, #210	; 0xd2
   24ccc:	18fb      	adds	r3, r7, r3
   24cce:	2288      	movs	r2, #136	; 0x88
   24cd0:	18ba      	adds	r2, r7, r2
   24cd2:	8912      	ldrh	r2, [r2, #8]
   24cd4:	801a      	strh	r2, [r3, #0]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
   24cd6:	23d0      	movs	r3, #208	; 0xd0
   24cd8:	18fb      	adds	r3, r7, r3
   24cda:	2288      	movs	r2, #136	; 0x88
   24cdc:	18ba      	adds	r2, r7, r2
   24cde:	8952      	ldrh	r2, [r2, #10]
   24ce0:	801a      	strh	r2, [r3, #0]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
   24ce2:	2388      	movs	r3, #136	; 0x88
   24ce4:	18fb      	adds	r3, r7, r3
   24ce6:	885a      	ldrh	r2, [r3, #2]
   24ce8:	2370      	movs	r3, #112	; 0x70
   24cea:	18fb      	adds	r3, r7, r3
   24cec:	815a      	strh	r2, [r3, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
   24cee:	2388      	movs	r3, #136	; 0x88
   24cf0:	18fb      	adds	r3, r7, r3
   24cf2:	685a      	ldr	r2, [r3, #4]
   24cf4:	2370      	movs	r3, #112	; 0x70
   24cf6:	18fb      	adds	r3, r7, r3
   24cf8:	60da      	str	r2, [r3, #12]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   24cfa:	23d5      	movs	r3, #213	; 0xd5
   24cfc:	18fb      	adds	r3, r7, r3
   24cfe:	781b      	ldrb	r3, [r3, #0]
   24d00:	b25b      	sxtb	r3, r3
   24d02:	4a77      	ldr	r2, [pc, #476]	; (24ee0 <m2m_ip_cb+0x540>)
   24d04:	011b      	lsls	r3, r3, #4
   24d06:	18d3      	adds	r3, r2, r3
   24d08:	3306      	adds	r3, #6
   24d0a:	881b      	ldrh	r3, [r3, #0]
   24d0c:	b29b      	uxth	r3, r3
   24d0e:	22d6      	movs	r2, #214	; 0xd6
   24d10:	18ba      	adds	r2, r7, r2
   24d12:	8812      	ldrh	r2, [r2, #0]
   24d14:	429a      	cmp	r2, r3
   24d16:	d148      	bne.n	24daa <m2m_ip_cb+0x40a>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
   24d18:	23d2      	movs	r3, #210	; 0xd2
   24d1a:	18fb      	adds	r3, r7, r3
   24d1c:	2200      	movs	r2, #0
   24d1e:	5e9b      	ldrsh	r3, [r3, r2]
   24d20:	2b00      	cmp	r3, #0
   24d22:	dd25      	ble.n	24d70 <m2m_ip_cb+0x3d0>
   24d24:	23d2      	movs	r3, #210	; 0xd2
   24d26:	18fb      	adds	r3, r7, r3
   24d28:	2200      	movs	r2, #0
   24d2a:	5e9a      	ldrsh	r2, [r3, r2]
   24d2c:	1d3b      	adds	r3, r7, #4
   24d2e:	881b      	ldrh	r3, [r3, #0]
   24d30:	429a      	cmp	r2, r3
   24d32:	da1d      	bge.n	24d70 <m2m_ip_cb+0x3d0>
					u32Address += u16DataOffset;
   24d34:	23d0      	movs	r3, #208	; 0xd0
   24d36:	18fb      	adds	r3, r7, r3
   24d38:	881b      	ldrh	r3, [r3, #0]
   24d3a:	683a      	ldr	r2, [r7, #0]
   24d3c:	18d3      	adds	r3, r2, r3
   24d3e:	603b      	str	r3, [r7, #0]
					u16ReadSize = (uint16)s16RecvStatus;
   24d40:	23d8      	movs	r3, #216	; 0xd8
   24d42:	18fb      	adds	r3, r7, r3
   24d44:	22d2      	movs	r2, #210	; 0xd2
   24d46:	18ba      	adds	r2, r7, r2
   24d48:	8812      	ldrh	r2, [r2, #0]
   24d4a:	801a      	strh	r2, [r3, #0]
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
   24d4c:	683c      	ldr	r4, [r7, #0]
   24d4e:	23df      	movs	r3, #223	; 0xdf
   24d50:	18fb      	adds	r3, r7, r3
   24d52:	781a      	ldrb	r2, [r3, #0]
   24d54:	2370      	movs	r3, #112	; 0x70
   24d56:	18f9      	adds	r1, r7, r3
   24d58:	23d5      	movs	r3, #213	; 0xd5
   24d5a:	18fb      	adds	r3, r7, r3
   24d5c:	2000      	movs	r0, #0
   24d5e:	5618      	ldrsb	r0, [r3, r0]
   24d60:	23d8      	movs	r3, #216	; 0xd8
   24d62:	18fb      	adds	r3, r7, r3
   24d64:	881b      	ldrh	r3, [r3, #0]
   24d66:	9300      	str	r3, [sp, #0]
   24d68:	0023      	movs	r3, r4
   24d6a:	4c5e      	ldr	r4, [pc, #376]	; (24ee4 <m2m_ip_cb+0x544>)
   24d6c:	47a0      	blx	r4
	{
   24d6e:	e0ad      	b.n	24ecc <m2m_ip_cb+0x52c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
   24d70:	2370      	movs	r3, #112	; 0x70
   24d72:	18fb      	adds	r3, r7, r3
   24d74:	22d2      	movs	r2, #210	; 0xd2
   24d76:	18ba      	adds	r2, r7, r2
   24d78:	8812      	ldrh	r2, [r2, #0]
   24d7a:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
   24d7c:	2370      	movs	r3, #112	; 0x70
   24d7e:	18fb      	adds	r3, r7, r3
   24d80:	2200      	movs	r2, #0
   24d82:	601a      	str	r2, [r3, #0]
					if(gpfAppSocketCb)
   24d84:	4b58      	ldr	r3, [pc, #352]	; (24ee8 <m2m_ip_cb+0x548>)
   24d86:	681b      	ldr	r3, [r3, #0]
   24d88:	2b00      	cmp	r3, #0
   24d8a:	d100      	bne.n	24d8e <m2m_ip_cb+0x3ee>
   24d8c:	e09e      	b.n	24ecc <m2m_ip_cb+0x52c>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
   24d8e:	4b56      	ldr	r3, [pc, #344]	; (24ee8 <m2m_ip_cb+0x548>)
   24d90:	681b      	ldr	r3, [r3, #0]
   24d92:	2270      	movs	r2, #112	; 0x70
   24d94:	18bc      	adds	r4, r7, r2
   24d96:	22df      	movs	r2, #223	; 0xdf
   24d98:	18ba      	adds	r2, r7, r2
   24d9a:	7811      	ldrb	r1, [r2, #0]
   24d9c:	22d5      	movs	r2, #213	; 0xd5
   24d9e:	18ba      	adds	r2, r7, r2
   24da0:	2000      	movs	r0, #0
   24da2:	5610      	ldrsb	r0, [r2, r0]
   24da4:	0022      	movs	r2, r4
   24da6:	4798      	blx	r3
	{
   24da8:	e090      	b.n	24ecc <m2m_ip_cb+0x52c>
				if(u16ReadSize < u16BufferSize)
   24daa:	23d8      	movs	r3, #216	; 0xd8
   24dac:	18fa      	adds	r2, r7, r3
   24dae:	1d3b      	adds	r3, r7, #4
   24db0:	8812      	ldrh	r2, [r2, #0]
   24db2:	881b      	ldrh	r3, [r3, #0]
   24db4:	429a      	cmp	r2, r3
   24db6:	d300      	bcc.n	24dba <m2m_ip_cb+0x41a>
   24db8:	e088      	b.n	24ecc <m2m_ip_cb+0x52c>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   24dba:	2301      	movs	r3, #1
   24dbc:	2200      	movs	r2, #0
   24dbe:	2100      	movs	r1, #0
   24dc0:	2000      	movs	r0, #0
   24dc2:	4c46      	ldr	r4, [pc, #280]	; (24edc <m2m_ip_cb+0x53c>)
   24dc4:	47a0      	blx	r4
	{
   24dc6:	e081      	b.n	24ecc <m2m_ip_cb+0x52c>
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
   24dc8:	1dfb      	adds	r3, r7, #7
   24dca:	781b      	ldrb	r3, [r3, #0]
   24dcc:	2b45      	cmp	r3, #69	; 0x45
   24dce:	d007      	beq.n	24de0 <m2m_ip_cb+0x440>
   24dd0:	1dfb      	adds	r3, r7, #7
   24dd2:	781b      	ldrb	r3, [r3, #0]
   24dd4:	2b47      	cmp	r3, #71	; 0x47
   24dd6:	d003      	beq.n	24de0 <m2m_ip_cb+0x440>
   24dd8:	1dfb      	adds	r3, r7, #7
   24dda:	781b      	ldrb	r3, [r3, #0]
   24ddc:	2b4c      	cmp	r3, #76	; 0x4c
   24dde:	d14c      	bne.n	24e7a <m2m_ip_cb+0x4da>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
   24de0:	23de      	movs	r3, #222	; 0xde
   24de2:	18fb      	adds	r3, r7, r3
   24de4:	2207      	movs	r2, #7
   24de6:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_SENDTO)
   24de8:	1dfb      	adds	r3, r7, #7
   24dea:	781b      	ldrb	r3, [r3, #0]
   24dec:	2b47      	cmp	r3, #71	; 0x47
   24dee:	d103      	bne.n	24df8 <m2m_ip_cb+0x458>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
   24df0:	23de      	movs	r3, #222	; 0xde
   24df2:	18fb      	adds	r3, r7, r3
   24df4:	2208      	movs	r2, #8
   24df6:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
   24df8:	2364      	movs	r3, #100	; 0x64
   24dfa:	18f9      	adds	r1, r7, r3
   24dfc:	6838      	ldr	r0, [r7, #0]
   24dfe:	2300      	movs	r3, #0
   24e00:	2208      	movs	r2, #8
   24e02:	4c36      	ldr	r4, [pc, #216]	; (24edc <m2m_ip_cb+0x53c>)
   24e04:	47a0      	blx	r4
   24e06:	1e03      	subs	r3, r0, #0
   24e08:	d162      	bne.n	24ed0 <m2m_ip_cb+0x530>
			uint16 u16SessionID = 0;
   24e0a:	23dc      	movs	r3, #220	; 0xdc
   24e0c:	18fb      	adds	r3, r7, r3
   24e0e:	2200      	movs	r2, #0
   24e10:	801a      	strh	r2, [r3, #0]
			sock = strReply.sock;
   24e12:	23db      	movs	r3, #219	; 0xdb
   24e14:	18fb      	adds	r3, r7, r3
   24e16:	2264      	movs	r2, #100	; 0x64
   24e18:	18ba      	adds	r2, r7, r2
   24e1a:	7812      	ldrb	r2, [r2, #0]
   24e1c:	701a      	strb	r2, [r3, #0]
			u16SessionID = strReply.u16SessionID;
   24e1e:	23dc      	movs	r3, #220	; 0xdc
   24e20:	18fb      	adds	r3, r7, r3
   24e22:	2264      	movs	r2, #100	; 0x64
   24e24:	18ba      	adds	r2, r7, r2
   24e26:	8892      	ldrh	r2, [r2, #4]
   24e28:	801a      	strh	r2, [r3, #0]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
   24e2a:	2364      	movs	r3, #100	; 0x64
   24e2c:	18fb      	adds	r3, r7, r3
   24e2e:	2202      	movs	r2, #2
   24e30:	5e9a      	ldrsh	r2, [r3, r2]
   24e32:	236e      	movs	r3, #110	; 0x6e
   24e34:	18fb      	adds	r3, r7, r3
   24e36:	801a      	strh	r2, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   24e38:	23db      	movs	r3, #219	; 0xdb
   24e3a:	18fb      	adds	r3, r7, r3
   24e3c:	781b      	ldrb	r3, [r3, #0]
   24e3e:	b25b      	sxtb	r3, r3
   24e40:	4a27      	ldr	r2, [pc, #156]	; (24ee0 <m2m_ip_cb+0x540>)
   24e42:	011b      	lsls	r3, r3, #4
   24e44:	18d3      	adds	r3, r2, r3
   24e46:	3306      	adds	r3, #6
   24e48:	881b      	ldrh	r3, [r3, #0]
   24e4a:	b29b      	uxth	r3, r3
   24e4c:	22dc      	movs	r2, #220	; 0xdc
   24e4e:	18ba      	adds	r2, r7, r2
   24e50:	8812      	ldrh	r2, [r2, #0]
   24e52:	429a      	cmp	r2, r3
   24e54:	d13c      	bne.n	24ed0 <m2m_ip_cb+0x530>
				if(gpfAppSocketCb)
   24e56:	4b24      	ldr	r3, [pc, #144]	; (24ee8 <m2m_ip_cb+0x548>)
   24e58:	681b      	ldr	r3, [r3, #0]
   24e5a:	2b00      	cmp	r3, #0
   24e5c:	d038      	beq.n	24ed0 <m2m_ip_cb+0x530>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
   24e5e:	4b22      	ldr	r3, [pc, #136]	; (24ee8 <m2m_ip_cb+0x548>)
   24e60:	681b      	ldr	r3, [r3, #0]
   24e62:	226e      	movs	r2, #110	; 0x6e
   24e64:	18bc      	adds	r4, r7, r2
   24e66:	22de      	movs	r2, #222	; 0xde
   24e68:	18ba      	adds	r2, r7, r2
   24e6a:	7811      	ldrb	r1, [r2, #0]
   24e6c:	22db      	movs	r2, #219	; 0xdb
   24e6e:	18ba      	adds	r2, r7, r2
   24e70:	2000      	movs	r0, #0
   24e72:	5610      	ldrsb	r0, [r2, r0]
   24e74:	0022      	movs	r2, r4
   24e76:	4798      	blx	r3
	{
   24e78:	e02a      	b.n	24ed0 <m2m_ip_cb+0x530>
	else if(u8OpCode == SOCKET_CMD_PING)
   24e7a:	1dfb      	adds	r3, r7, #7
   24e7c:	781b      	ldrb	r3, [r3, #0]
   24e7e:	2b52      	cmp	r3, #82	; 0x52
   24e80:	d127      	bne.n	24ed2 <m2m_ip_cb+0x532>
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
   24e82:	2350      	movs	r3, #80	; 0x50
   24e84:	18f9      	adds	r1, r7, r3
   24e86:	6838      	ldr	r0, [r7, #0]
   24e88:	2301      	movs	r3, #1
   24e8a:	2214      	movs	r2, #20
   24e8c:	4c13      	ldr	r4, [pc, #76]	; (24edc <m2m_ip_cb+0x53c>)
   24e8e:	47a0      	blx	r4
   24e90:	1e03      	subs	r3, r0, #0
   24e92:	d11e      	bne.n	24ed2 <m2m_ip_cb+0x532>
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
   24e94:	2350      	movs	r3, #80	; 0x50
   24e96:	18fb      	adds	r3, r7, r3
   24e98:	685b      	ldr	r3, [r3, #4]
   24e9a:	001a      	movs	r2, r3
   24e9c:	4b13      	ldr	r3, [pc, #76]	; (24eec <m2m_ip_cb+0x54c>)
   24e9e:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
   24ea0:	4b12      	ldr	r3, [pc, #72]	; (24eec <m2m_ip_cb+0x54c>)
   24ea2:	681b      	ldr	r3, [r3, #0]
   24ea4:	2b00      	cmp	r3, #0
   24ea6:	d014      	beq.n	24ed2 <m2m_ip_cb+0x532>
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
   24ea8:	4b10      	ldr	r3, [pc, #64]	; (24eec <m2m_ip_cb+0x54c>)
   24eaa:	681c      	ldr	r4, [r3, #0]
   24eac:	2350      	movs	r3, #80	; 0x50
   24eae:	18fb      	adds	r3, r7, r3
   24eb0:	6818      	ldr	r0, [r3, #0]
   24eb2:	2350      	movs	r3, #80	; 0x50
   24eb4:	18fb      	adds	r3, r7, r3
   24eb6:	6899      	ldr	r1, [r3, #8]
   24eb8:	2350      	movs	r3, #80	; 0x50
   24eba:	18fb      	adds	r3, r7, r3
   24ebc:	7c1b      	ldrb	r3, [r3, #16]
   24ebe:	001a      	movs	r2, r3
   24ec0:	47a0      	blx	r4
}
   24ec2:	e006      	b.n	24ed2 <m2m_ip_cb+0x532>
	{
   24ec4:	46c0      	nop			; (mov r8, r8)
   24ec6:	e004      	b.n	24ed2 <m2m_ip_cb+0x532>
	{
   24ec8:	46c0      	nop			; (mov r8, r8)
   24eca:	e002      	b.n	24ed2 <m2m_ip_cb+0x532>
	{
   24ecc:	46c0      	nop			; (mov r8, r8)
   24ece:	e000      	b.n	24ed2 <m2m_ip_cb+0x532>
	{
   24ed0:	46c0      	nop			; (mov r8, r8)
}
   24ed2:	46c0      	nop			; (mov r8, r8)
   24ed4:	46bd      	mov	sp, r7
   24ed6:	b039      	add	sp, #228	; 0xe4
   24ed8:	bd90      	pop	{r4, r7, pc}
   24eda:	46c0      	nop			; (mov r8, r8)
   24edc:	0002119d 	.word	0x0002119d
   24ee0:	20005424 	.word	0x20005424
   24ee4:	000247a5 	.word	0x000247a5
   24ee8:	200054d4 	.word	0x200054d4
   24eec:	200054d8 	.word	0x200054d8

00024ef0 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
   24ef0:	b580      	push	{r7, lr}
   24ef2:	af00      	add	r7, sp, #0
	if(gbSocketInit == 0)
   24ef4:	4b0c      	ldr	r3, [pc, #48]	; (24f28 <socketInit+0x38>)
   24ef6:	781b      	ldrb	r3, [r3, #0]
   24ef8:	b2db      	uxtb	r3, r3
   24efa:	2b00      	cmp	r3, #0
   24efc:	d110      	bne.n	24f20 <socketInit+0x30>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   24efe:	4b0b      	ldr	r3, [pc, #44]	; (24f2c <socketInit+0x3c>)
   24f00:	22b0      	movs	r2, #176	; 0xb0
   24f02:	2100      	movs	r1, #0
   24f04:	0018      	movs	r0, r3
   24f06:	4b0a      	ldr	r3, [pc, #40]	; (24f30 <socketInit+0x40>)
   24f08:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
   24f0a:	4b0a      	ldr	r3, [pc, #40]	; (24f34 <socketInit+0x44>)
   24f0c:	0019      	movs	r1, r3
   24f0e:	2002      	movs	r0, #2
   24f10:	4b09      	ldr	r3, [pc, #36]	; (24f38 <socketInit+0x48>)
   24f12:	4798      	blx	r3
		gbSocketInit	= 1;
   24f14:	4b04      	ldr	r3, [pc, #16]	; (24f28 <socketInit+0x38>)
   24f16:	2201      	movs	r2, #1
   24f18:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
   24f1a:	4b08      	ldr	r3, [pc, #32]	; (24f3c <socketInit+0x4c>)
   24f1c:	2200      	movs	r2, #0
   24f1e:	801a      	strh	r2, [r3, #0]
	}
}
   24f20:	46c0      	nop			; (mov r8, r8)
   24f22:	46bd      	mov	sp, r7
   24f24:	bd80      	pop	{r7, pc}
   24f26:	46c0      	nop			; (mov r8, r8)
   24f28:	20003cd0 	.word	0x20003cd0
   24f2c:	20005424 	.word	0x20005424
   24f30:	00020621 	.word	0x00020621
   24f34:	000249a1 	.word	0x000249a1
   24f38:	0002131d 	.word	0x0002131d
   24f3c:	20003cce 	.word	0x20003cce

00024f40 <socketDeinit>:

Date
		27 Feb 2015
*********************************************************************/
void socketDeinit(void)
{	
   24f40:	b580      	push	{r7, lr}
   24f42:	af00      	add	r7, sp, #0
	m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   24f44:	4b0a      	ldr	r3, [pc, #40]	; (24f70 <socketDeinit+0x30>)
   24f46:	22b0      	movs	r2, #176	; 0xb0
   24f48:	2100      	movs	r1, #0
   24f4a:	0018      	movs	r0, r3
   24f4c:	4b09      	ldr	r3, [pc, #36]	; (24f74 <socketDeinit+0x34>)
   24f4e:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_IP, NULL);
   24f50:	2100      	movs	r1, #0
   24f52:	2002      	movs	r0, #2
   24f54:	4b08      	ldr	r3, [pc, #32]	; (24f78 <socketDeinit+0x38>)
   24f56:	4798      	blx	r3
	gpfAppSocketCb	= NULL;
   24f58:	4b08      	ldr	r3, [pc, #32]	; (24f7c <socketDeinit+0x3c>)
   24f5a:	2200      	movs	r2, #0
   24f5c:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb	= NULL;
   24f5e:	4b08      	ldr	r3, [pc, #32]	; (24f80 <socketDeinit+0x40>)
   24f60:	2200      	movs	r2, #0
   24f62:	601a      	str	r2, [r3, #0]
	gbSocketInit	= 0;
   24f64:	4b07      	ldr	r3, [pc, #28]	; (24f84 <socketDeinit+0x44>)
   24f66:	2200      	movs	r2, #0
   24f68:	701a      	strb	r2, [r3, #0]
}
   24f6a:	46c0      	nop			; (mov r8, r8)
   24f6c:	46bd      	mov	sp, r7
   24f6e:	bd80      	pop	{r7, pc}
   24f70:	20005424 	.word	0x20005424
   24f74:	00020621 	.word	0x00020621
   24f78:	0002131d 	.word	0x0002131d
   24f7c:	200054d4 	.word	0x200054d4
   24f80:	200054dc 	.word	0x200054dc
   24f84:	20003cd0 	.word	0x20003cd0

00024f88 <registerSocketCallback>:

Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
   24f88:	b580      	push	{r7, lr}
   24f8a:	b082      	sub	sp, #8
   24f8c:	af00      	add	r7, sp, #0
   24f8e:	6078      	str	r0, [r7, #4]
   24f90:	6039      	str	r1, [r7, #0]
	gpfAppSocketCb = pfAppSocketCb;
   24f92:	4b05      	ldr	r3, [pc, #20]	; (24fa8 <registerSocketCallback+0x20>)
   24f94:	687a      	ldr	r2, [r7, #4]
   24f96:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
   24f98:	4b04      	ldr	r3, [pc, #16]	; (24fac <registerSocketCallback+0x24>)
   24f9a:	683a      	ldr	r2, [r7, #0]
   24f9c:	601a      	str	r2, [r3, #0]
}
   24f9e:	46c0      	nop			; (mov r8, r8)
   24fa0:	46bd      	mov	sp, r7
   24fa2:	b002      	add	sp, #8
   24fa4:	bd80      	pop	{r7, pc}
   24fa6:	46c0      	nop			; (mov r8, r8)
   24fa8:	200054d4 	.word	0x200054d4
   24fac:	200054dc 	.word	0x200054dc

00024fb0 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
   24fb0:	b590      	push	{r4, r7, lr}
   24fb2:	b08d      	sub	sp, #52	; 0x34
   24fb4:	af04      	add	r7, sp, #16
   24fb6:	0004      	movs	r4, r0
   24fb8:	0008      	movs	r0, r1
   24fba:	0011      	movs	r1, r2
   24fbc:	1dbb      	adds	r3, r7, #6
   24fbe:	1c22      	adds	r2, r4, #0
   24fc0:	801a      	strh	r2, [r3, #0]
   24fc2:	1d7b      	adds	r3, r7, #5
   24fc4:	1c02      	adds	r2, r0, #0
   24fc6:	701a      	strb	r2, [r3, #0]
   24fc8:	1d3b      	adds	r3, r7, #4
   24fca:	1c0a      	adds	r2, r1, #0
   24fcc:	701a      	strb	r2, [r3, #0]
	SOCKET					sock = -1;
   24fce:	231f      	movs	r3, #31
   24fd0:	18fb      	adds	r3, r7, r3
   24fd2:	22ff      	movs	r2, #255	; 0xff
   24fd4:	701a      	strb	r2, [r3, #0]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
   24fd6:	1dbb      	adds	r3, r7, #6
   24fd8:	881b      	ldrh	r3, [r3, #0]
   24fda:	2b02      	cmp	r3, #2
   24fdc:	d000      	beq.n	24fe0 <socket+0x30>
   24fde:	e0ce      	b.n	2517e <socket+0x1ce>
	{
		if(u8Type == SOCK_STREAM)
   24fe0:	1d7b      	adds	r3, r7, #5
   24fe2:	781b      	ldrb	r3, [r3, #0]
   24fe4:	2b01      	cmp	r3, #1
   24fe6:	d135      	bne.n	25054 <socket+0xa4>
		{
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   24fe8:	231e      	movs	r3, #30
   24fea:	18fb      	adds	r3, r7, r3
   24fec:	2200      	movs	r2, #0
   24fee:	701a      	strb	r2, [r3, #0]
   24ff0:	e02a      	b.n	25048 <socket+0x98>
			{
				u8SockID	= u8NextTcpSock;
   24ff2:	2317      	movs	r3, #23
   24ff4:	18fb      	adds	r3, r7, r3
   24ff6:	4a66      	ldr	r2, [pc, #408]	; (25190 <socket+0x1e0>)
   24ff8:	7812      	ldrb	r2, [r2, #0]
   24ffa:	701a      	strb	r2, [r3, #0]
				pstrSock	= &gastrSockets[u8NextTcpSock];
   24ffc:	4b64      	ldr	r3, [pc, #400]	; (25190 <socket+0x1e0>)
   24ffe:	781b      	ldrb	r3, [r3, #0]
   25000:	b2db      	uxtb	r3, r3
   25002:	011a      	lsls	r2, r3, #4
   25004:	4b63      	ldr	r3, [pc, #396]	; (25194 <socket+0x1e4>)
   25006:	18d3      	adds	r3, r2, r3
   25008:	61bb      	str	r3, [r7, #24]
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
   2500a:	4b61      	ldr	r3, [pc, #388]	; (25190 <socket+0x1e0>)
   2500c:	781b      	ldrb	r3, [r3, #0]
   2500e:	b2db      	uxtb	r3, r3
   25010:	1c5a      	adds	r2, r3, #1
   25012:	4b61      	ldr	r3, [pc, #388]	; (25198 <socket+0x1e8>)
   25014:	2107      	movs	r1, #7
   25016:	0010      	movs	r0, r2
   25018:	4798      	blx	r3
   2501a:	000b      	movs	r3, r1
   2501c:	b2da      	uxtb	r2, r3
   2501e:	4b5c      	ldr	r3, [pc, #368]	; (25190 <socket+0x1e0>)
   25020:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   25022:	69bb      	ldr	r3, [r7, #24]
   25024:	7a9b      	ldrb	r3, [r3, #10]
   25026:	b2db      	uxtb	r3, r3
   25028:	2b00      	cmp	r3, #0
   2502a:	d106      	bne.n	2503a <socket+0x8a>
				{
					sock = (SOCKET)u8SockID;
   2502c:	231f      	movs	r3, #31
   2502e:	18fb      	adds	r3, r7, r3
   25030:	2217      	movs	r2, #23
   25032:	18ba      	adds	r2, r7, r2
   25034:	7812      	ldrb	r2, [r2, #0]
   25036:	701a      	strb	r2, [r3, #0]
					break;
   25038:	e04c      	b.n	250d4 <socket+0x124>
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   2503a:	231e      	movs	r3, #30
   2503c:	18fb      	adds	r3, r7, r3
   2503e:	781a      	ldrb	r2, [r3, #0]
   25040:	231e      	movs	r3, #30
   25042:	18fb      	adds	r3, r7, r3
   25044:	3201      	adds	r2, #1
   25046:	701a      	strb	r2, [r3, #0]
   25048:	231e      	movs	r3, #30
   2504a:	18fb      	adds	r3, r7, r3
   2504c:	781b      	ldrb	r3, [r3, #0]
   2504e:	2b06      	cmp	r3, #6
   25050:	d9cf      	bls.n	24ff2 <socket+0x42>
   25052:	e03f      	b.n	250d4 <socket+0x124>
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
   25054:	1d7b      	adds	r3, r7, #5
   25056:	781b      	ldrb	r3, [r3, #0]
   25058:	2b02      	cmp	r3, #2
   2505a:	d13b      	bne.n	250d4 <socket+0x124>
		{
			volatile tstrSocket	*pastrUDPSockets = &gastrSockets[TCP_SOCK_MAX];
   2505c:	4b4f      	ldr	r3, [pc, #316]	; (2519c <socket+0x1ec>)
   2505e:	613b      	str	r3, [r7, #16]
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   25060:	231e      	movs	r3, #30
   25062:	18fb      	adds	r3, r7, r3
   25064:	2200      	movs	r2, #0
   25066:	701a      	strb	r2, [r3, #0]
   25068:	e02f      	b.n	250ca <socket+0x11a>
			{
				u8SockID		= u8NextUdpSock;
   2506a:	2317      	movs	r3, #23
   2506c:	18fb      	adds	r3, r7, r3
   2506e:	4a4c      	ldr	r2, [pc, #304]	; (251a0 <socket+0x1f0>)
   25070:	7812      	ldrb	r2, [r2, #0]
   25072:	701a      	strb	r2, [r3, #0]
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
   25074:	4b4a      	ldr	r3, [pc, #296]	; (251a0 <socket+0x1f0>)
   25076:	781b      	ldrb	r3, [r3, #0]
   25078:	b2db      	uxtb	r3, r3
   2507a:	011b      	lsls	r3, r3, #4
   2507c:	693a      	ldr	r2, [r7, #16]
   2507e:	18d3      	adds	r3, r2, r3
   25080:	61bb      	str	r3, [r7, #24]
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
   25082:	4b47      	ldr	r3, [pc, #284]	; (251a0 <socket+0x1f0>)
   25084:	781b      	ldrb	r3, [r3, #0]
   25086:	b2db      	uxtb	r3, r3
   25088:	3301      	adds	r3, #1
   2508a:	4a46      	ldr	r2, [pc, #280]	; (251a4 <socket+0x1f4>)
   2508c:	4013      	ands	r3, r2
   2508e:	d504      	bpl.n	2509a <socket+0xea>
   25090:	3b01      	subs	r3, #1
   25092:	2204      	movs	r2, #4
   25094:	4252      	negs	r2, r2
   25096:	4313      	orrs	r3, r2
   25098:	3301      	adds	r3, #1
   2509a:	b2da      	uxtb	r2, r3
   2509c:	4b40      	ldr	r3, [pc, #256]	; (251a0 <socket+0x1f0>)
   2509e:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   250a0:	69bb      	ldr	r3, [r7, #24]
   250a2:	7a9b      	ldrb	r3, [r3, #10]
   250a4:	b2db      	uxtb	r3, r3
   250a6:	2b00      	cmp	r3, #0
   250a8:	d108      	bne.n	250bc <socket+0x10c>
				{
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
   250aa:	2317      	movs	r3, #23
   250ac:	18fb      	adds	r3, r7, r3
   250ae:	781b      	ldrb	r3, [r3, #0]
   250b0:	3307      	adds	r3, #7
   250b2:	b2da      	uxtb	r2, r3
   250b4:	231f      	movs	r3, #31
   250b6:	18fb      	adds	r3, r7, r3
   250b8:	701a      	strb	r2, [r3, #0]
					break;
   250ba:	e00b      	b.n	250d4 <socket+0x124>
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   250bc:	231e      	movs	r3, #30
   250be:	18fb      	adds	r3, r7, r3
   250c0:	781a      	ldrb	r2, [r3, #0]
   250c2:	231e      	movs	r3, #30
   250c4:	18fb      	adds	r3, r7, r3
   250c6:	3201      	adds	r2, #1
   250c8:	701a      	strb	r2, [r3, #0]
   250ca:	231e      	movs	r3, #30
   250cc:	18fb      	adds	r3, r7, r3
   250ce:	781b      	ldrb	r3, [r3, #0]
   250d0:	2b03      	cmp	r3, #3
   250d2:	d9ca      	bls.n	2506a <socket+0xba>
				}
			}
		}

		if(sock >= 0)
   250d4:	231f      	movs	r3, #31
   250d6:	18fb      	adds	r3, r7, r3
   250d8:	781b      	ldrb	r3, [r3, #0]
   250da:	2b7f      	cmp	r3, #127	; 0x7f
   250dc:	d84f      	bhi.n	2517e <socket+0x1ce>
		{
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
   250de:	69bb      	ldr	r3, [r7, #24]
   250e0:	2210      	movs	r2, #16
   250e2:	2100      	movs	r1, #0
   250e4:	0018      	movs	r0, r3
   250e6:	4b30      	ldr	r3, [pc, #192]	; (251a8 <socket+0x1f8>)
   250e8:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
   250ea:	69bb      	ldr	r3, [r7, #24]
   250ec:	2201      	movs	r2, #1
   250ee:	729a      	strb	r2, [r3, #10]

			/* The session ID is used to distinguish different socket connections
				by comparing the assigned session ID to the one reported by the firmware*/
			++gu16SessionID;
   250f0:	4b2e      	ldr	r3, [pc, #184]	; (251ac <socket+0x1fc>)
   250f2:	881b      	ldrh	r3, [r3, #0]
   250f4:	b29b      	uxth	r3, r3
   250f6:	3301      	adds	r3, #1
   250f8:	b29a      	uxth	r2, r3
   250fa:	4b2c      	ldr	r3, [pc, #176]	; (251ac <socket+0x1fc>)
   250fc:	801a      	strh	r2, [r3, #0]
			if(gu16SessionID == 0)
   250fe:	4b2b      	ldr	r3, [pc, #172]	; (251ac <socket+0x1fc>)
   25100:	881b      	ldrh	r3, [r3, #0]
   25102:	b29b      	uxth	r3, r3
   25104:	2b00      	cmp	r3, #0
   25106:	d106      	bne.n	25116 <socket+0x166>
				++gu16SessionID;
   25108:	4b28      	ldr	r3, [pc, #160]	; (251ac <socket+0x1fc>)
   2510a:	881b      	ldrh	r3, [r3, #0]
   2510c:	b29b      	uxth	r3, r3
   2510e:	3301      	adds	r3, #1
   25110:	b29a      	uxth	r2, r3
   25112:	4b26      	ldr	r3, [pc, #152]	; (251ac <socket+0x1fc>)
   25114:	801a      	strh	r2, [r3, #0]
				
			pstrSock->u16SessionID = gu16SessionID;
   25116:	4b25      	ldr	r3, [pc, #148]	; (251ac <socket+0x1fc>)
   25118:	881b      	ldrh	r3, [r3, #0]
   2511a:	b29a      	uxth	r2, r3
   2511c:	69bb      	ldr	r3, [r7, #24]
   2511e:	80da      	strh	r2, [r3, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
   25120:	4b23      	ldr	r3, [pc, #140]	; (251b0 <socket+0x200>)
   25122:	0018      	movs	r0, r3
   25124:	4b23      	ldr	r3, [pc, #140]	; (251b4 <socket+0x204>)
   25126:	4798      	blx	r3
   25128:	231f      	movs	r3, #31
   2512a:	18fb      	adds	r3, r7, r3
   2512c:	2100      	movs	r1, #0
   2512e:	5659      	ldrsb	r1, [r3, r1]
   25130:	4b1e      	ldr	r3, [pc, #120]	; (251ac <socket+0x1fc>)
   25132:	881b      	ldrh	r3, [r3, #0]
   25134:	b29b      	uxth	r3, r3
   25136:	001a      	movs	r2, r3
   25138:	4b1f      	ldr	r3, [pc, #124]	; (251b8 <socket+0x208>)
   2513a:	0018      	movs	r0, r3
   2513c:	4b1d      	ldr	r3, [pc, #116]	; (251b4 <socket+0x204>)
   2513e:	4798      	blx	r3
   25140:	4b1e      	ldr	r3, [pc, #120]	; (251bc <socket+0x20c>)
   25142:	0018      	movs	r0, r3
   25144:	4b1b      	ldr	r3, [pc, #108]	; (251b4 <socket+0x204>)
   25146:	4798      	blx	r3

			if(u8Flags & SOCKET_FLAGS_SSL)
   25148:	1d3b      	adds	r3, r7, #4
   2514a:	781b      	ldrb	r3, [r3, #0]
   2514c:	2201      	movs	r2, #1
   2514e:	4013      	ands	r3, r2
   25150:	d015      	beq.n	2517e <socket+0x1ce>
			{
				tstrSSLSocketCreateCmd	strSSLCreate;
				strSSLCreate.sslSock = sock;
   25152:	230c      	movs	r3, #12
   25154:	18fb      	adds	r3, r7, r3
   25156:	221f      	movs	r2, #31
   25158:	18ba      	adds	r2, r7, r2
   2515a:	7812      	ldrb	r2, [r2, #0]
   2515c:	701a      	strb	r2, [r3, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
   2515e:	69bb      	ldr	r3, [r7, #24]
   25160:	2221      	movs	r2, #33	; 0x21
   25162:	72da      	strb	r2, [r3, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
   25164:	230c      	movs	r3, #12
   25166:	18fa      	adds	r2, r7, r3
   25168:	2300      	movs	r3, #0
   2516a:	9302      	str	r3, [sp, #8]
   2516c:	2300      	movs	r3, #0
   2516e:	9301      	str	r3, [sp, #4]
   25170:	2300      	movs	r3, #0
   25172:	9300      	str	r3, [sp, #0]
   25174:	2304      	movs	r3, #4
   25176:	2150      	movs	r1, #80	; 0x50
   25178:	2002      	movs	r0, #2
   2517a:	4c11      	ldr	r4, [pc, #68]	; (251c0 <socket+0x210>)
   2517c:	47a0      	blx	r4
			}
		}
	}
	return sock;
   2517e:	231f      	movs	r3, #31
   25180:	18fb      	adds	r3, r7, r3
   25182:	781b      	ldrb	r3, [r3, #0]
   25184:	b25b      	sxtb	r3, r3
}
   25186:	0018      	movs	r0, r3
   25188:	46bd      	mov	sp, r7
   2518a:	b009      	add	sp, #36	; 0x24
   2518c:	bd90      	pop	{r4, r7, pc}
   2518e:	46c0      	nop			; (mov r8, r8)
   25190:	20003cd1 	.word	0x20003cd1
   25194:	20005424 	.word	0x20005424
   25198:	000326a9 	.word	0x000326a9
   2519c:	20005494 	.word	0x20005494
   251a0:	20003cd2 	.word	0x20003cd2
   251a4:	80000003 	.word	0x80000003
   251a8:	00020621 	.word	0x00020621
   251ac:	20003cce 	.word	0x20003cce
   251b0:	00039de0 	.word	0x00039de0
   251b4:	0001dc4d 	.word	0x0001dc4d
   251b8:	00039e04 	.word	0x00039e04
   251bc:	00039e00 	.word	0x00039e00
   251c0:	00020881 	.word	0x00020881

000251c4 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
   251c4:	b5b0      	push	{r4, r5, r7, lr}
   251c6:	b08a      	sub	sp, #40	; 0x28
   251c8:	af04      	add	r7, sp, #16
   251ca:	6039      	str	r1, [r7, #0]
   251cc:	0011      	movs	r1, r2
   251ce:	1dfb      	adds	r3, r7, #7
   251d0:	1c02      	adds	r2, r0, #0
   251d2:	701a      	strb	r2, [r3, #0]
   251d4:	1dbb      	adds	r3, r7, #6
   251d6:	1c0a      	adds	r2, r1, #0
   251d8:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   251da:	2317      	movs	r3, #23
   251dc:	18fb      	adds	r3, r7, r3
   251de:	22fa      	movs	r2, #250	; 0xfa
   251e0:	701a      	strb	r2, [r3, #0]
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
   251e2:	1dfb      	adds	r3, r7, #7
   251e4:	781b      	ldrb	r3, [r3, #0]
   251e6:	2b7f      	cmp	r3, #127	; 0x7f
   251e8:	d867      	bhi.n	252ba <connect+0xf6>
   251ea:	683b      	ldr	r3, [r7, #0]
   251ec:	2b00      	cmp	r3, #0
   251ee:	d064      	beq.n	252ba <connect+0xf6>
   251f0:	1dfb      	adds	r3, r7, #7
   251f2:	781b      	ldrb	r3, [r3, #0]
   251f4:	b25b      	sxtb	r3, r3
   251f6:	4a35      	ldr	r2, [pc, #212]	; (252cc <connect+0x108>)
   251f8:	011b      	lsls	r3, r3, #4
   251fa:	18d3      	adds	r3, r2, r3
   251fc:	330a      	adds	r3, #10
   251fe:	781b      	ldrb	r3, [r3, #0]
   25200:	b2db      	uxtb	r3, r3
   25202:	2b01      	cmp	r3, #1
   25204:	d159      	bne.n	252ba <connect+0xf6>
   25206:	1dbb      	adds	r3, r7, #6
   25208:	781b      	ldrb	r3, [r3, #0]
   2520a:	2b00      	cmp	r3, #0
   2520c:	d055      	beq.n	252ba <connect+0xf6>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
   2520e:	2316      	movs	r3, #22
   25210:	18fb      	adds	r3, r7, r3
   25212:	2244      	movs	r2, #68	; 0x44
   25214:	701a      	strb	r2, [r3, #0]
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
   25216:	1dfb      	adds	r3, r7, #7
   25218:	781b      	ldrb	r3, [r3, #0]
   2521a:	b25b      	sxtb	r3, r3
   2521c:	4a2b      	ldr	r2, [pc, #172]	; (252cc <connect+0x108>)
   2521e:	011b      	lsls	r3, r3, #4
   25220:	18d3      	adds	r3, r2, r3
   25222:	330b      	adds	r3, #11
   25224:	781b      	ldrb	r3, [r3, #0]
   25226:	b2db      	uxtb	r3, r3
   25228:	001a      	movs	r2, r3
   2522a:	2301      	movs	r3, #1
   2522c:	4013      	ands	r3, r2
   2522e:	d00f      	beq.n	25250 <connect+0x8c>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
   25230:	2316      	movs	r3, #22
   25232:	18fb      	adds	r3, r7, r3
   25234:	224b      	movs	r2, #75	; 0x4b
   25236:	701a      	strb	r2, [r3, #0]
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
   25238:	1dfb      	adds	r3, r7, #7
   2523a:	781b      	ldrb	r3, [r3, #0]
   2523c:	b25b      	sxtb	r3, r3
   2523e:	4a23      	ldr	r2, [pc, #140]	; (252cc <connect+0x108>)
   25240:	011b      	lsls	r3, r3, #4
   25242:	18d3      	adds	r3, r2, r3
   25244:	330b      	adds	r3, #11
   25246:	781b      	ldrb	r3, [r3, #0]
   25248:	b2da      	uxtb	r2, r3
   2524a:	2308      	movs	r3, #8
   2524c:	18fb      	adds	r3, r7, r3
   2524e:	725a      	strb	r2, [r3, #9]
		}
		strConnect.sock = sock;
   25250:	2308      	movs	r3, #8
   25252:	18fb      	adds	r3, r7, r3
   25254:	1dfa      	adds	r2, r7, #7
   25256:	7812      	ldrb	r2, [r2, #0]
   25258:	721a      	strb	r2, [r3, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
   2525a:	6839      	ldr	r1, [r7, #0]
   2525c:	2308      	movs	r3, #8
   2525e:	18fb      	adds	r3, r7, r3
   25260:	2208      	movs	r2, #8
   25262:	0018      	movs	r0, r3
   25264:	4b1a      	ldr	r3, [pc, #104]	; (252d0 <connect+0x10c>)
   25266:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
   25268:	1dfb      	adds	r3, r7, #7
   2526a:	781b      	ldrb	r3, [r3, #0]
   2526c:	b25b      	sxtb	r3, r3
   2526e:	4a17      	ldr	r2, [pc, #92]	; (252cc <connect+0x108>)
   25270:	011b      	lsls	r3, r3, #4
   25272:	18d3      	adds	r3, r2, r3
   25274:	3306      	adds	r3, #6
   25276:	881b      	ldrh	r3, [r3, #0]
   25278:	b29a      	uxth	r2, r3
   2527a:	2308      	movs	r3, #8
   2527c:	18fb      	adds	r3, r7, r3
   2527e:	815a      	strh	r2, [r3, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
   25280:	2317      	movs	r3, #23
   25282:	18fc      	adds	r4, r7, r3
   25284:	2308      	movs	r3, #8
   25286:	18fa      	adds	r2, r7, r3
   25288:	2316      	movs	r3, #22
   2528a:	18fb      	adds	r3, r7, r3
   2528c:	7819      	ldrb	r1, [r3, #0]
   2528e:	2300      	movs	r3, #0
   25290:	9302      	str	r3, [sp, #8]
   25292:	2300      	movs	r3, #0
   25294:	9301      	str	r3, [sp, #4]
   25296:	2300      	movs	r3, #0
   25298:	9300      	str	r3, [sp, #0]
   2529a:	230c      	movs	r3, #12
   2529c:	2002      	movs	r0, #2
   2529e:	4d0d      	ldr	r5, [pc, #52]	; (252d4 <connect+0x110>)
   252a0:	47a8      	blx	r5
   252a2:	0003      	movs	r3, r0
   252a4:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   252a6:	2317      	movs	r3, #23
   252a8:	18fb      	adds	r3, r7, r3
   252aa:	781b      	ldrb	r3, [r3, #0]
   252ac:	b25b      	sxtb	r3, r3
   252ae:	2b00      	cmp	r3, #0
   252b0:	d003      	beq.n	252ba <connect+0xf6>
		{
			s8Ret = SOCK_ERR_INVALID;
   252b2:	2317      	movs	r3, #23
   252b4:	18fb      	adds	r3, r7, r3
   252b6:	22f7      	movs	r2, #247	; 0xf7
   252b8:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Ret;
   252ba:	2317      	movs	r3, #23
   252bc:	18fb      	adds	r3, r7, r3
   252be:	781b      	ldrb	r3, [r3, #0]
   252c0:	b25b      	sxtb	r3, r3
}
   252c2:	0018      	movs	r0, r3
   252c4:	46bd      	mov	sp, r7
   252c6:	b006      	add	sp, #24
   252c8:	bdb0      	pop	{r4, r5, r7, pc}
   252ca:	46c0      	nop			; (mov r8, r8)
   252cc:	20005424 	.word	0x20005424
   252d0:	000205e5 	.word	0x000205e5
   252d4:	00020881 	.word	0x00020881

000252d8 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
   252d8:	b590      	push	{r4, r7, lr}
   252da:	b08f      	sub	sp, #60	; 0x3c
   252dc:	af04      	add	r7, sp, #16
   252de:	0004      	movs	r4, r0
   252e0:	60b9      	str	r1, [r7, #8]
   252e2:	0010      	movs	r0, r2
   252e4:	0019      	movs	r1, r3
   252e6:	230f      	movs	r3, #15
   252e8:	18fb      	adds	r3, r7, r3
   252ea:	1c22      	adds	r2, r4, #0
   252ec:	701a      	strb	r2, [r3, #0]
   252ee:	230c      	movs	r3, #12
   252f0:	18fb      	adds	r3, r7, r3
   252f2:	1c02      	adds	r2, r0, #0
   252f4:	801a      	strh	r2, [r3, #0]
   252f6:	1dbb      	adds	r3, r7, #6
   252f8:	1c0a      	adds	r2, r1, #0
   252fa:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   252fc:	2326      	movs	r3, #38	; 0x26
   252fe:	18fb      	adds	r3, r7, r3
   25300:	2206      	movs	r2, #6
   25302:	4252      	negs	r2, r2
   25304:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
   25306:	230f      	movs	r3, #15
   25308:	18fb      	adds	r3, r7, r3
   2530a:	781b      	ldrb	r3, [r3, #0]
   2530c:	2b7f      	cmp	r3, #127	; 0x7f
   2530e:	d900      	bls.n	25312 <send+0x3a>
   25310:	e087      	b.n	25422 <send+0x14a>
   25312:	68bb      	ldr	r3, [r7, #8]
   25314:	2b00      	cmp	r3, #0
   25316:	d100      	bne.n	2531a <send+0x42>
   25318:	e083      	b.n	25422 <send+0x14a>
   2531a:	230c      	movs	r3, #12
   2531c:	18fb      	adds	r3, r7, r3
   2531e:	881a      	ldrh	r2, [r3, #0]
   25320:	23af      	movs	r3, #175	; 0xaf
   25322:	00db      	lsls	r3, r3, #3
   25324:	429a      	cmp	r2, r3
   25326:	d900      	bls.n	2532a <send+0x52>
   25328:	e07b      	b.n	25422 <send+0x14a>
   2532a:	230f      	movs	r3, #15
   2532c:	18fb      	adds	r3, r7, r3
   2532e:	781b      	ldrb	r3, [r3, #0]
   25330:	b25b      	sxtb	r3, r3
   25332:	4a40      	ldr	r2, [pc, #256]	; (25434 <send+0x15c>)
   25334:	011b      	lsls	r3, r3, #4
   25336:	18d3      	adds	r3, r2, r3
   25338:	330a      	adds	r3, #10
   2533a:	781b      	ldrb	r3, [r3, #0]
   2533c:	b2db      	uxtb	r3, r3
   2533e:	2b01      	cmp	r3, #1
   25340:	d16f      	bne.n	25422 <send+0x14a>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
   25342:	2323      	movs	r3, #35	; 0x23
   25344:	18fb      	adds	r3, r7, r3
   25346:	2245      	movs	r2, #69	; 0x45
   25348:	701a      	strb	r2, [r3, #0]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
   2534a:	2324      	movs	r3, #36	; 0x24
   2534c:	18fb      	adds	r3, r7, r3
   2534e:	2250      	movs	r2, #80	; 0x50
   25350:	801a      	strh	r2, [r3, #0]

		strSend.sock			= sock;
   25352:	2310      	movs	r3, #16
   25354:	18fb      	adds	r3, r7, r3
   25356:	220f      	movs	r2, #15
   25358:	18ba      	adds	r2, r7, r2
   2535a:	7812      	ldrb	r2, [r2, #0]
   2535c:	701a      	strb	r2, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
   2535e:	2310      	movs	r3, #16
   25360:	18fb      	adds	r3, r7, r3
   25362:	220c      	movs	r2, #12
   25364:	18ba      	adds	r2, r7, r2
   25366:	8812      	ldrh	r2, [r2, #0]
   25368:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
   2536a:	230f      	movs	r3, #15
   2536c:	18fb      	adds	r3, r7, r3
   2536e:	781b      	ldrb	r3, [r3, #0]
   25370:	b25b      	sxtb	r3, r3
   25372:	4a30      	ldr	r2, [pc, #192]	; (25434 <send+0x15c>)
   25374:	011b      	lsls	r3, r3, #4
   25376:	18d3      	adds	r3, r2, r3
   25378:	3306      	adds	r3, #6
   2537a:	881b      	ldrh	r3, [r3, #0]
   2537c:	b29a      	uxth	r2, r3
   2537e:	2310      	movs	r3, #16
   25380:	18fb      	adds	r3, r7, r3
   25382:	819a      	strh	r2, [r3, #12]

		if(sock >= TCP_SOCK_MAX)
   25384:	230f      	movs	r3, #15
   25386:	18fb      	adds	r3, r7, r3
   25388:	781b      	ldrb	r3, [r3, #0]
   2538a:	b25b      	sxtb	r3, r3
   2538c:	2b06      	cmp	r3, #6
   2538e:	dd03      	ble.n	25398 <send+0xc0>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
   25390:	2324      	movs	r3, #36	; 0x24
   25392:	18fb      	adds	r3, r7, r3
   25394:	2244      	movs	r2, #68	; 0x44
   25396:	801a      	strh	r2, [r3, #0]
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   25398:	230f      	movs	r3, #15
   2539a:	18fb      	adds	r3, r7, r3
   2539c:	781b      	ldrb	r3, [r3, #0]
   2539e:	b25b      	sxtb	r3, r3
   253a0:	4a24      	ldr	r2, [pc, #144]	; (25434 <send+0x15c>)
   253a2:	011b      	lsls	r3, r3, #4
   253a4:	18d3      	adds	r3, r2, r3
   253a6:	330b      	adds	r3, #11
   253a8:	781b      	ldrb	r3, [r3, #0]
   253aa:	b2db      	uxtb	r3, r3
   253ac:	001a      	movs	r2, r3
   253ae:	2301      	movs	r3, #1
   253b0:	4013      	ands	r3, r2
   253b2:	d00f      	beq.n	253d4 <send+0xfc>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
   253b4:	2323      	movs	r3, #35	; 0x23
   253b6:	18fb      	adds	r3, r7, r3
   253b8:	224c      	movs	r2, #76	; 0x4c
   253ba:	701a      	strb	r2, [r3, #0]
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
   253bc:	230f      	movs	r3, #15
   253be:	18fb      	adds	r3, r7, r3
   253c0:	2200      	movs	r2, #0
   253c2:	569a      	ldrsb	r2, [r3, r2]
   253c4:	2324      	movs	r3, #36	; 0x24
   253c6:	18fb      	adds	r3, r7, r3
   253c8:	491a      	ldr	r1, [pc, #104]	; (25434 <send+0x15c>)
   253ca:	0112      	lsls	r2, r2, #4
   253cc:	188a      	adds	r2, r1, r2
   253ce:	3208      	adds	r2, #8
   253d0:	8812      	ldrh	r2, [r2, #0]
   253d2:	801a      	strh	r2, [r3, #0]
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
   253d4:	2323      	movs	r3, #35	; 0x23
   253d6:	18fb      	adds	r3, r7, r3
   253d8:	781b      	ldrb	r3, [r3, #0]
   253da:	2280      	movs	r2, #128	; 0x80
   253dc:	4252      	negs	r2, r2
   253de:	4313      	orrs	r3, r2
   253e0:	b2d9      	uxtb	r1, r3
   253e2:	2310      	movs	r3, #16
   253e4:	18fa      	adds	r2, r7, r3
   253e6:	2324      	movs	r3, #36	; 0x24
   253e8:	18fb      	adds	r3, r7, r3
   253ea:	881b      	ldrh	r3, [r3, #0]
   253ec:	9302      	str	r3, [sp, #8]
   253ee:	230c      	movs	r3, #12
   253f0:	18fb      	adds	r3, r7, r3
   253f2:	881b      	ldrh	r3, [r3, #0]
   253f4:	9301      	str	r3, [sp, #4]
   253f6:	68bb      	ldr	r3, [r7, #8]
   253f8:	9300      	str	r3, [sp, #0]
   253fa:	2310      	movs	r3, #16
   253fc:	2002      	movs	r0, #2
   253fe:	4c0e      	ldr	r4, [pc, #56]	; (25438 <send+0x160>)
   25400:	47a0      	blx	r4
   25402:	0003      	movs	r3, r0
   25404:	001a      	movs	r2, r3
   25406:	2326      	movs	r3, #38	; 0x26
   25408:	18fb      	adds	r3, r7, r3
   2540a:	801a      	strh	r2, [r3, #0]
		if(s16Ret != SOCK_ERR_NO_ERROR)
   2540c:	2326      	movs	r3, #38	; 0x26
   2540e:	18fb      	adds	r3, r7, r3
   25410:	2200      	movs	r2, #0
   25412:	5e9b      	ldrsh	r3, [r3, r2]
   25414:	2b00      	cmp	r3, #0
   25416:	d004      	beq.n	25422 <send+0x14a>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
   25418:	2326      	movs	r3, #38	; 0x26
   2541a:	18fb      	adds	r3, r7, r3
   2541c:	220e      	movs	r2, #14
   2541e:	4252      	negs	r2, r2
   25420:	801a      	strh	r2, [r3, #0]
		}
	}
	return s16Ret;
   25422:	2326      	movs	r3, #38	; 0x26
   25424:	18fb      	adds	r3, r7, r3
   25426:	2200      	movs	r2, #0
   25428:	5e9b      	ldrsh	r3, [r3, r2]
}
   2542a:	0018      	movs	r0, r3
   2542c:	46bd      	mov	sp, r7
   2542e:	b00b      	add	sp, #44	; 0x2c
   25430:	bd90      	pop	{r4, r7, pc}
   25432:	46c0      	nop			; (mov r8, r8)
   25434:	20005424 	.word	0x20005424
   25438:	00020881 	.word	0x00020881

0002543c <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
   2543c:	b590      	push	{r4, r7, lr}
   2543e:	b08d      	sub	sp, #52	; 0x34
   25440:	af04      	add	r7, sp, #16
   25442:	60b9      	str	r1, [r7, #8]
   25444:	0011      	movs	r1, r2
   25446:	607b      	str	r3, [r7, #4]
   25448:	230f      	movs	r3, #15
   2544a:	18fb      	adds	r3, r7, r3
   2544c:	1c02      	adds	r2, r0, #0
   2544e:	701a      	strb	r2, [r3, #0]
   25450:	230c      	movs	r3, #12
   25452:	18fb      	adds	r3, r7, r3
   25454:	1c0a      	adds	r2, r1, #0
   25456:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   25458:	231e      	movs	r3, #30
   2545a:	18fb      	adds	r3, r7, r3
   2545c:	2206      	movs	r2, #6
   2545e:	4252      	negs	r2, r2
   25460:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
   25462:	230f      	movs	r3, #15
   25464:	18fb      	adds	r3, r7, r3
   25466:	781b      	ldrb	r3, [r3, #0]
   25468:	2b7f      	cmp	r3, #127	; 0x7f
   2546a:	d900      	bls.n	2546e <recv+0x32>
   2546c:	e099      	b.n	255a2 <recv+0x166>
   2546e:	68bb      	ldr	r3, [r7, #8]
   25470:	2b00      	cmp	r3, #0
   25472:	d100      	bne.n	25476 <recv+0x3a>
   25474:	e095      	b.n	255a2 <recv+0x166>
   25476:	230c      	movs	r3, #12
   25478:	18fb      	adds	r3, r7, r3
   2547a:	881b      	ldrh	r3, [r3, #0]
   2547c:	2b00      	cmp	r3, #0
   2547e:	d100      	bne.n	25482 <recv+0x46>
   25480:	e08f      	b.n	255a2 <recv+0x166>
   25482:	230f      	movs	r3, #15
   25484:	18fb      	adds	r3, r7, r3
   25486:	781b      	ldrb	r3, [r3, #0]
   25488:	b25b      	sxtb	r3, r3
   2548a:	4a4a      	ldr	r2, [pc, #296]	; (255b4 <recv+0x178>)
   2548c:	011b      	lsls	r3, r3, #4
   2548e:	18d3      	adds	r3, r2, r3
   25490:	330a      	adds	r3, #10
   25492:	781b      	ldrb	r3, [r3, #0]
   25494:	b2db      	uxtb	r3, r3
   25496:	2b01      	cmp	r3, #1
   25498:	d000      	beq.n	2549c <recv+0x60>
   2549a:	e082      	b.n	255a2 <recv+0x166>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
   2549c:	231e      	movs	r3, #30
   2549e:	18fb      	adds	r3, r7, r3
   254a0:	2200      	movs	r2, #0
   254a2:	801a      	strh	r2, [r3, #0]
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
   254a4:	230f      	movs	r3, #15
   254a6:	18fb      	adds	r3, r7, r3
   254a8:	2200      	movs	r2, #0
   254aa:	569a      	ldrsb	r2, [r3, r2]
   254ac:	4b41      	ldr	r3, [pc, #260]	; (255b4 <recv+0x178>)
   254ae:	0112      	lsls	r2, r2, #4
   254b0:	68b9      	ldr	r1, [r7, #8]
   254b2:	50d1      	str	r1, [r2, r3]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
   254b4:	230f      	movs	r3, #15
   254b6:	18fb      	adds	r3, r7, r3
   254b8:	781b      	ldrb	r3, [r3, #0]
   254ba:	b25b      	sxtb	r3, r3
   254bc:	4a3d      	ldr	r2, [pc, #244]	; (255b4 <recv+0x178>)
   254be:	011b      	lsls	r3, r3, #4
   254c0:	18d3      	adds	r3, r2, r3
   254c2:	3304      	adds	r3, #4
   254c4:	220c      	movs	r2, #12
   254c6:	18ba      	adds	r2, r7, r2
   254c8:	8812      	ldrh	r2, [r2, #0]
   254ca:	801a      	strh	r2, [r3, #0]

		if(!gastrSockets[sock].bIsRecvPending)
   254cc:	230f      	movs	r3, #15
   254ce:	18fb      	adds	r3, r7, r3
   254d0:	781b      	ldrb	r3, [r3, #0]
   254d2:	b25b      	sxtb	r3, r3
   254d4:	4a37      	ldr	r2, [pc, #220]	; (255b4 <recv+0x178>)
   254d6:	011b      	lsls	r3, r3, #4
   254d8:	18d3      	adds	r3, r2, r3
   254da:	330c      	adds	r3, #12
   254dc:	781b      	ldrb	r3, [r3, #0]
   254de:	b2db      	uxtb	r3, r3
   254e0:	2b00      	cmp	r3, #0
   254e2:	d15e      	bne.n	255a2 <recv+0x166>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
   254e4:	231d      	movs	r3, #29
   254e6:	18fb      	adds	r3, r7, r3
   254e8:	2246      	movs	r2, #70	; 0x46
   254ea:	701a      	strb	r2, [r3, #0]

			gastrSockets[sock].bIsRecvPending = 1;
   254ec:	230f      	movs	r3, #15
   254ee:	18fb      	adds	r3, r7, r3
   254f0:	781b      	ldrb	r3, [r3, #0]
   254f2:	b25b      	sxtb	r3, r3
   254f4:	4a2f      	ldr	r2, [pc, #188]	; (255b4 <recv+0x178>)
   254f6:	011b      	lsls	r3, r3, #4
   254f8:	18d3      	adds	r3, r2, r3
   254fa:	330c      	adds	r3, #12
   254fc:	2201      	movs	r2, #1
   254fe:	701a      	strb	r2, [r3, #0]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   25500:	230f      	movs	r3, #15
   25502:	18fb      	adds	r3, r7, r3
   25504:	781b      	ldrb	r3, [r3, #0]
   25506:	b25b      	sxtb	r3, r3
   25508:	4a2a      	ldr	r2, [pc, #168]	; (255b4 <recv+0x178>)
   2550a:	011b      	lsls	r3, r3, #4
   2550c:	18d3      	adds	r3, r2, r3
   2550e:	330b      	adds	r3, #11
   25510:	781b      	ldrb	r3, [r3, #0]
   25512:	b2db      	uxtb	r3, r3
   25514:	001a      	movs	r2, r3
   25516:	2301      	movs	r3, #1
   25518:	4013      	ands	r3, r2
   2551a:	d003      	beq.n	25524 <recv+0xe8>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
   2551c:	231d      	movs	r3, #29
   2551e:	18fb      	adds	r3, r7, r3
   25520:	224d      	movs	r2, #77	; 0x4d
   25522:	701a      	strb	r2, [r3, #0]
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
   25524:	687b      	ldr	r3, [r7, #4]
   25526:	2b00      	cmp	r3, #0
   25528:	d105      	bne.n	25536 <recv+0xfa>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
   2552a:	2314      	movs	r3, #20
   2552c:	18fb      	adds	r3, r7, r3
   2552e:	2201      	movs	r2, #1
   25530:	4252      	negs	r2, r2
   25532:	601a      	str	r2, [r3, #0]
   25534:	e003      	b.n	2553e <recv+0x102>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
   25536:	2314      	movs	r3, #20
   25538:	18fb      	adds	r3, r7, r3
   2553a:	687a      	ldr	r2, [r7, #4]
   2553c:	601a      	str	r2, [r3, #0]
			strRecv.sock = sock;
   2553e:	2314      	movs	r3, #20
   25540:	18fb      	adds	r3, r7, r3
   25542:	220f      	movs	r2, #15
   25544:	18ba      	adds	r2, r7, r2
   25546:	7812      	ldrb	r2, [r2, #0]
   25548:	711a      	strb	r2, [r3, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
   2554a:	230f      	movs	r3, #15
   2554c:	18fb      	adds	r3, r7, r3
   2554e:	781b      	ldrb	r3, [r3, #0]
   25550:	b25b      	sxtb	r3, r3
   25552:	4a18      	ldr	r2, [pc, #96]	; (255b4 <recv+0x178>)
   25554:	011b      	lsls	r3, r3, #4
   25556:	18d3      	adds	r3, r2, r3
   25558:	3306      	adds	r3, #6
   2555a:	881b      	ldrh	r3, [r3, #0]
   2555c:	b29a      	uxth	r2, r3
   2555e:	2314      	movs	r3, #20
   25560:	18fb      	adds	r3, r7, r3
   25562:	80da      	strh	r2, [r3, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
   25564:	2314      	movs	r3, #20
   25566:	18fa      	adds	r2, r7, r3
   25568:	231d      	movs	r3, #29
   2556a:	18fb      	adds	r3, r7, r3
   2556c:	7819      	ldrb	r1, [r3, #0]
   2556e:	2300      	movs	r3, #0
   25570:	9302      	str	r3, [sp, #8]
   25572:	2300      	movs	r3, #0
   25574:	9301      	str	r3, [sp, #4]
   25576:	2300      	movs	r3, #0
   25578:	9300      	str	r3, [sp, #0]
   2557a:	2308      	movs	r3, #8
   2557c:	2002      	movs	r0, #2
   2557e:	4c0e      	ldr	r4, [pc, #56]	; (255b8 <recv+0x17c>)
   25580:	47a0      	blx	r4
   25582:	0003      	movs	r3, r0
   25584:	001a      	movs	r2, r3
   25586:	231e      	movs	r3, #30
   25588:	18fb      	adds	r3, r7, r3
   2558a:	801a      	strh	r2, [r3, #0]
			if(s16Ret != SOCK_ERR_NO_ERROR)
   2558c:	231e      	movs	r3, #30
   2558e:	18fb      	adds	r3, r7, r3
   25590:	2200      	movs	r2, #0
   25592:	5e9b      	ldrsh	r3, [r3, r2]
   25594:	2b00      	cmp	r3, #0
   25596:	d004      	beq.n	255a2 <recv+0x166>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
   25598:	231e      	movs	r3, #30
   2559a:	18fb      	adds	r3, r7, r3
   2559c:	220e      	movs	r2, #14
   2559e:	4252      	negs	r2, r2
   255a0:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	return s16Ret;
   255a2:	231e      	movs	r3, #30
   255a4:	18fb      	adds	r3, r7, r3
   255a6:	2200      	movs	r2, #0
   255a8:	5e9b      	ldrsh	r3, [r3, r2]
}
   255aa:	0018      	movs	r0, r3
   255ac:	46bd      	mov	sp, r7
   255ae:	b009      	add	sp, #36	; 0x24
   255b0:	bd90      	pop	{r4, r7, pc}
   255b2:	46c0      	nop			; (mov r8, r8)
   255b4:	20005424 	.word	0x20005424
   255b8:	00020881 	.word	0x00020881

000255bc <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
   255bc:	b5b0      	push	{r4, r5, r7, lr}
   255be:	b088      	sub	sp, #32
   255c0:	af04      	add	r7, sp, #16
   255c2:	0002      	movs	r2, r0
   255c4:	1dfb      	adds	r3, r7, #7
   255c6:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   255c8:	230f      	movs	r3, #15
   255ca:	18fb      	adds	r3, r7, r3
   255cc:	22fa      	movs	r2, #250	; 0xfa
   255ce:	701a      	strb	r2, [r3, #0]
    M2M_INFO("Sock to delete <%d>\n", sock);
   255d0:	4b43      	ldr	r3, [pc, #268]	; (256e0 <close+0x124>)
   255d2:	0018      	movs	r0, r3
   255d4:	4b43      	ldr	r3, [pc, #268]	; (256e4 <close+0x128>)
   255d6:	4798      	blx	r3
   255d8:	1dfb      	adds	r3, r7, #7
   255da:	2200      	movs	r2, #0
   255dc:	569a      	ldrsb	r2, [r3, r2]
   255de:	4b42      	ldr	r3, [pc, #264]	; (256e8 <close+0x12c>)
   255e0:	0011      	movs	r1, r2
   255e2:	0018      	movs	r0, r3
   255e4:	4b3f      	ldr	r3, [pc, #252]	; (256e4 <close+0x128>)
   255e6:	4798      	blx	r3
   255e8:	4b40      	ldr	r3, [pc, #256]	; (256ec <close+0x130>)
   255ea:	0018      	movs	r0, r3
   255ec:	4b3d      	ldr	r3, [pc, #244]	; (256e4 <close+0x128>)
   255ee:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
   255f0:	1dfb      	adds	r3, r7, #7
   255f2:	781b      	ldrb	r3, [r3, #0]
   255f4:	2b7f      	cmp	r3, #127	; 0x7f
   255f6:	d86a      	bhi.n	256ce <close+0x112>
   255f8:	1dfb      	adds	r3, r7, #7
   255fa:	781b      	ldrb	r3, [r3, #0]
   255fc:	b25b      	sxtb	r3, r3
   255fe:	4a3c      	ldr	r2, [pc, #240]	; (256f0 <close+0x134>)
   25600:	011b      	lsls	r3, r3, #4
   25602:	18d3      	adds	r3, r2, r3
   25604:	330a      	adds	r3, #10
   25606:	781b      	ldrb	r3, [r3, #0]
   25608:	b2db      	uxtb	r3, r3
   2560a:	2b01      	cmp	r3, #1
   2560c:	d15f      	bne.n	256ce <close+0x112>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
   2560e:	230e      	movs	r3, #14
   25610:	18fb      	adds	r3, r7, r3
   25612:	2249      	movs	r2, #73	; 0x49
   25614:	701a      	strb	r2, [r3, #0]
		tstrCloseCmd strclose;
		strclose.sock = sock; 
   25616:	2308      	movs	r3, #8
   25618:	18fb      	adds	r3, r7, r3
   2561a:	1dfa      	adds	r2, r7, #7
   2561c:	7812      	ldrb	r2, [r2, #0]
   2561e:	701a      	strb	r2, [r3, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
   25620:	1dfb      	adds	r3, r7, #7
   25622:	781b      	ldrb	r3, [r3, #0]
   25624:	b25b      	sxtb	r3, r3
   25626:	4a32      	ldr	r2, [pc, #200]	; (256f0 <close+0x134>)
   25628:	011b      	lsls	r3, r3, #4
   2562a:	18d3      	adds	r3, r2, r3
   2562c:	3306      	adds	r3, #6
   2562e:	881b      	ldrh	r3, [r3, #0]
   25630:	b29a      	uxth	r2, r3
   25632:	2308      	movs	r3, #8
   25634:	18fb      	adds	r3, r7, r3
   25636:	805a      	strh	r2, [r3, #2]
		
		gastrSockets[sock].bIsUsed = 0;
   25638:	1dfb      	adds	r3, r7, #7
   2563a:	781b      	ldrb	r3, [r3, #0]
   2563c:	b25b      	sxtb	r3, r3
   2563e:	4a2c      	ldr	r2, [pc, #176]	; (256f0 <close+0x134>)
   25640:	011b      	lsls	r3, r3, #4
   25642:	18d3      	adds	r3, r2, r3
   25644:	330a      	adds	r3, #10
   25646:	2200      	movs	r2, #0
   25648:	701a      	strb	r2, [r3, #0]
		gastrSockets[sock].u16SessionID =0;
   2564a:	1dfb      	adds	r3, r7, #7
   2564c:	781b      	ldrb	r3, [r3, #0]
   2564e:	b25b      	sxtb	r3, r3
   25650:	4a27      	ldr	r2, [pc, #156]	; (256f0 <close+0x134>)
   25652:	011b      	lsls	r3, r3, #4
   25654:	18d3      	adds	r3, r2, r3
   25656:	3306      	adds	r3, #6
   25658:	2200      	movs	r2, #0
   2565a:	801a      	strh	r2, [r3, #0]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   2565c:	1dfb      	adds	r3, r7, #7
   2565e:	781b      	ldrb	r3, [r3, #0]
   25660:	b25b      	sxtb	r3, r3
   25662:	4a23      	ldr	r2, [pc, #140]	; (256f0 <close+0x134>)
   25664:	011b      	lsls	r3, r3, #4
   25666:	18d3      	adds	r3, r2, r3
   25668:	330b      	adds	r3, #11
   2566a:	781b      	ldrb	r3, [r3, #0]
   2566c:	b2db      	uxtb	r3, r3
   2566e:	001a      	movs	r2, r3
   25670:	2301      	movs	r3, #1
   25672:	4013      	ands	r3, r2
   25674:	d003      	beq.n	2567e <close+0xc2>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
   25676:	230e      	movs	r3, #14
   25678:	18fb      	adds	r3, r7, r3
   2567a:	224e      	movs	r2, #78	; 0x4e
   2567c:	701a      	strb	r2, [r3, #0]
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
   2567e:	230f      	movs	r3, #15
   25680:	18fc      	adds	r4, r7, r3
   25682:	2308      	movs	r3, #8
   25684:	18fa      	adds	r2, r7, r3
   25686:	230e      	movs	r3, #14
   25688:	18fb      	adds	r3, r7, r3
   2568a:	7819      	ldrb	r1, [r3, #0]
   2568c:	2300      	movs	r3, #0
   2568e:	9302      	str	r3, [sp, #8]
   25690:	2300      	movs	r3, #0
   25692:	9301      	str	r3, [sp, #4]
   25694:	2300      	movs	r3, #0
   25696:	9300      	str	r3, [sp, #0]
   25698:	2304      	movs	r3, #4
   2569a:	2002      	movs	r0, #2
   2569c:	4d15      	ldr	r5, [pc, #84]	; (256f4 <close+0x138>)
   2569e:	47a8      	blx	r5
   256a0:	0003      	movs	r3, r0
   256a2:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   256a4:	230f      	movs	r3, #15
   256a6:	18fb      	adds	r3, r7, r3
   256a8:	781b      	ldrb	r3, [r3, #0]
   256aa:	b25b      	sxtb	r3, r3
   256ac:	2b00      	cmp	r3, #0
   256ae:	d003      	beq.n	256b8 <close+0xfc>
		{
			s8Ret = SOCK_ERR_INVALID;
   256b0:	230f      	movs	r3, #15
   256b2:	18fb      	adds	r3, r7, r3
   256b4:	22f7      	movs	r2, #247	; 0xf7
   256b6:	701a      	strb	r2, [r3, #0]
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
   256b8:	1dfb      	adds	r3, r7, #7
   256ba:	781b      	ldrb	r3, [r3, #0]
   256bc:	b25b      	sxtb	r3, r3
   256be:	011a      	lsls	r2, r3, #4
   256c0:	4b0b      	ldr	r3, [pc, #44]	; (256f0 <close+0x134>)
   256c2:	18d3      	adds	r3, r2, r3
   256c4:	2210      	movs	r2, #16
   256c6:	2100      	movs	r1, #0
   256c8:	0018      	movs	r0, r3
   256ca:	4b0b      	ldr	r3, [pc, #44]	; (256f8 <close+0x13c>)
   256cc:	4798      	blx	r3
	}
	return s8Ret;
   256ce:	230f      	movs	r3, #15
   256d0:	18fb      	adds	r3, r7, r3
   256d2:	781b      	ldrb	r3, [r3, #0]
   256d4:	b25b      	sxtb	r3, r3
}
   256d6:	0018      	movs	r0, r3
   256d8:	46bd      	mov	sp, r7
   256da:	b004      	add	sp, #16
   256dc:	bdb0      	pop	{r4, r5, r7, pc}
   256de:	46c0      	nop			; (mov r8, r8)
   256e0:	00039de0 	.word	0x00039de0
   256e4:	0001dc4d 	.word	0x0001dc4d
   256e8:	00039e20 	.word	0x00039e20
   256ec:	00039e00 	.word	0x00039e00
   256f0:	20005424 	.word	0x20005424
   256f4:	00020881 	.word	0x00020881
   256f8:	00020621 	.word	0x00020621

000256fc <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
   256fc:	b580      	push	{r7, lr}
   256fe:	b086      	sub	sp, #24
   25700:	af00      	add	r7, sp, #0
   25702:	6078      	str	r0, [r7, #4]
	uint8	tmp;
	uint32	u32IP = 0;
   25704:	2300      	movs	r3, #0
   25706:	613b      	str	r3, [r7, #16]
	uint8	au8IP[4];
	uint8 	c;
	uint8	i, j;

	tmp = 0;
   25708:	2317      	movs	r3, #23
   2570a:	18fb      	adds	r3, r7, r3
   2570c:	2200      	movs	r2, #0
   2570e:	701a      	strb	r2, [r3, #0]

	for(i = 0; i < 4; ++i)
   25710:	2316      	movs	r3, #22
   25712:	18fb      	adds	r3, r7, r3
   25714:	2200      	movs	r2, #0
   25716:	701a      	strb	r2, [r3, #0]
   25718:	e060      	b.n	257dc <nmi_inet_addr+0xe0>
	{
		j = 0;
   2571a:	2315      	movs	r3, #21
   2571c:	18fb      	adds	r3, r7, r3
   2571e:	2200      	movs	r2, #0
   25720:	701a      	strb	r2, [r3, #0]
		do
		{
			c = *pcIpAddr;
   25722:	2314      	movs	r3, #20
   25724:	18fb      	adds	r3, r7, r3
   25726:	687a      	ldr	r2, [r7, #4]
   25728:	7812      	ldrb	r2, [r2, #0]
   2572a:	701a      	strb	r2, [r3, #0]
			++j;
   2572c:	2315      	movs	r3, #21
   2572e:	18fb      	adds	r3, r7, r3
   25730:	2215      	movs	r2, #21
   25732:	18ba      	adds	r2, r7, r2
   25734:	7812      	ldrb	r2, [r2, #0]
   25736:	3201      	adds	r2, #1
   25738:	701a      	strb	r2, [r3, #0]
			if(j > 4)
   2573a:	2315      	movs	r3, #21
   2573c:	18fb      	adds	r3, r7, r3
   2573e:	781b      	ldrb	r3, [r3, #0]
   25740:	2b04      	cmp	r3, #4
   25742:	d901      	bls.n	25748 <nmi_inet_addr+0x4c>
			{
				return 0;
   25744:	2300      	movs	r3, #0
   25746:	e057      	b.n	257f8 <nmi_inet_addr+0xfc>
			}
			if(c == '.' || c == 0)
   25748:	2314      	movs	r3, #20
   2574a:	18fb      	adds	r3, r7, r3
   2574c:	781b      	ldrb	r3, [r3, #0]
   2574e:	2b2e      	cmp	r3, #46	; 0x2e
   25750:	d004      	beq.n	2575c <nmi_inet_addr+0x60>
   25752:	2314      	movs	r3, #20
   25754:	18fb      	adds	r3, r7, r3
   25756:	781b      	ldrb	r3, [r3, #0]
   25758:	2b00      	cmp	r3, #0
   2575a:	d10d      	bne.n	25778 <nmi_inet_addr+0x7c>
			{
				au8IP[i] = tmp;
   2575c:	2316      	movs	r3, #22
   2575e:	18fb      	adds	r3, r7, r3
   25760:	781b      	ldrb	r3, [r3, #0]
   25762:	220c      	movs	r2, #12
   25764:	18ba      	adds	r2, r7, r2
   25766:	2117      	movs	r1, #23
   25768:	1879      	adds	r1, r7, r1
   2576a:	7809      	ldrb	r1, [r1, #0]
   2576c:	54d1      	strb	r1, [r2, r3]
				tmp = 0;
   2576e:	2317      	movs	r3, #23
   25770:	18fb      	adds	r3, r7, r3
   25772:	2200      	movs	r2, #0
   25774:	701a      	strb	r2, [r3, #0]
   25776:	e01d      	b.n	257b4 <nmi_inet_addr+0xb8>
			}
			else if(c >= '0' && c <= '9')
   25778:	2314      	movs	r3, #20
   2577a:	18fb      	adds	r3, r7, r3
   2577c:	781b      	ldrb	r3, [r3, #0]
   2577e:	2b2f      	cmp	r3, #47	; 0x2f
   25780:	d916      	bls.n	257b0 <nmi_inet_addr+0xb4>
   25782:	2314      	movs	r3, #20
   25784:	18fb      	adds	r3, r7, r3
   25786:	781b      	ldrb	r3, [r3, #0]
   25788:	2b39      	cmp	r3, #57	; 0x39
   2578a:	d811      	bhi.n	257b0 <nmi_inet_addr+0xb4>
			{
				tmp = (tmp * 10) + (c - '0');
   2578c:	2317      	movs	r3, #23
   2578e:	18fb      	adds	r3, r7, r3
   25790:	781b      	ldrb	r3, [r3, #0]
   25792:	1c1a      	adds	r2, r3, #0
   25794:	0092      	lsls	r2, r2, #2
   25796:	18d3      	adds	r3, r2, r3
   25798:	18db      	adds	r3, r3, r3
   2579a:	b2da      	uxtb	r2, r3
   2579c:	2314      	movs	r3, #20
   2579e:	18fb      	adds	r3, r7, r3
   257a0:	781b      	ldrb	r3, [r3, #0]
   257a2:	18d3      	adds	r3, r2, r3
   257a4:	b2da      	uxtb	r2, r3
   257a6:	2317      	movs	r3, #23
   257a8:	18fb      	adds	r3, r7, r3
   257aa:	3a30      	subs	r2, #48	; 0x30
   257ac:	701a      	strb	r2, [r3, #0]
   257ae:	e001      	b.n	257b4 <nmi_inet_addr+0xb8>
			}
			else
			{
				return 0;
   257b0:	2300      	movs	r3, #0
   257b2:	e021      	b.n	257f8 <nmi_inet_addr+0xfc>
			}
			++pcIpAddr;
   257b4:	687b      	ldr	r3, [r7, #4]
   257b6:	3301      	adds	r3, #1
   257b8:	607b      	str	r3, [r7, #4]
		} while(c != '.' && c != 0);
   257ba:	2314      	movs	r3, #20
   257bc:	18fb      	adds	r3, r7, r3
   257be:	781b      	ldrb	r3, [r3, #0]
   257c0:	2b2e      	cmp	r3, #46	; 0x2e
   257c2:	d004      	beq.n	257ce <nmi_inet_addr+0xd2>
   257c4:	2314      	movs	r3, #20
   257c6:	18fb      	adds	r3, r7, r3
   257c8:	781b      	ldrb	r3, [r3, #0]
   257ca:	2b00      	cmp	r3, #0
   257cc:	d1a9      	bne.n	25722 <nmi_inet_addr+0x26>
	for(i = 0; i < 4; ++i)
   257ce:	2316      	movs	r3, #22
   257d0:	18fb      	adds	r3, r7, r3
   257d2:	2216      	movs	r2, #22
   257d4:	18ba      	adds	r2, r7, r2
   257d6:	7812      	ldrb	r2, [r2, #0]
   257d8:	3201      	adds	r2, #1
   257da:	701a      	strb	r2, [r3, #0]
   257dc:	2316      	movs	r3, #22
   257de:	18fb      	adds	r3, r7, r3
   257e0:	781b      	ldrb	r3, [r3, #0]
   257e2:	2b03      	cmp	r3, #3
   257e4:	d999      	bls.n	2571a <nmi_inet_addr+0x1e>
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
   257e6:	230c      	movs	r3, #12
   257e8:	18f9      	adds	r1, r7, r3
   257ea:	2310      	movs	r3, #16
   257ec:	18fb      	adds	r3, r7, r3
   257ee:	2204      	movs	r2, #4
   257f0:	0018      	movs	r0, r3
   257f2:	4b03      	ldr	r3, [pc, #12]	; (25800 <nmi_inet_addr+0x104>)
   257f4:	4798      	blx	r3
	return u32IP;
   257f6:	693b      	ldr	r3, [r7, #16]
}
   257f8:	0018      	movs	r0, r3
   257fa:	46bd      	mov	sp, r7
   257fc:	b006      	add	sp, #24
   257fe:	bd80      	pop	{r7, pc}
   25800:	000205e5 	.word	0x000205e5

00025804 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
   25804:	b5b0      	push	{r4, r5, r7, lr}
   25806:	b088      	sub	sp, #32
   25808:	af04      	add	r7, sp, #16
   2580a:	6078      	str	r0, [r7, #4]
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
   2580c:	230f      	movs	r3, #15
   2580e:	18fb      	adds	r3, r7, r3
   25810:	22fa      	movs	r2, #250	; 0xfa
   25812:	701a      	strb	r2, [r3, #0]
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
   25814:	687b      	ldr	r3, [r7, #4]
   25816:	0018      	movs	r0, r3
   25818:	4b14      	ldr	r3, [pc, #80]	; (2586c <gethostbyname+0x68>)
   2581a:	4798      	blx	r3
   2581c:	0003      	movs	r3, r0
   2581e:	001a      	movs	r2, r3
   25820:	230e      	movs	r3, #14
   25822:	18fb      	adds	r3, r7, r3
   25824:	701a      	strb	r2, [r3, #0]
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
   25826:	230e      	movs	r3, #14
   25828:	18fb      	adds	r3, r7, r3
   2582a:	781b      	ldrb	r3, [r3, #0]
   2582c:	2b40      	cmp	r3, #64	; 0x40
   2582e:	d815      	bhi.n	2585c <gethostbyname+0x58>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
   25830:	230e      	movs	r3, #14
   25832:	18fb      	adds	r3, r7, r3
   25834:	781b      	ldrb	r3, [r3, #0]
   25836:	b29b      	uxth	r3, r3
   25838:	3301      	adds	r3, #1
   2583a:	b299      	uxth	r1, r3
   2583c:	230f      	movs	r3, #15
   2583e:	18fc      	adds	r4, r7, r3
   25840:	687a      	ldr	r2, [r7, #4]
   25842:	2300      	movs	r3, #0
   25844:	9302      	str	r3, [sp, #8]
   25846:	2300      	movs	r3, #0
   25848:	9301      	str	r3, [sp, #4]
   2584a:	2300      	movs	r3, #0
   2584c:	9300      	str	r3, [sp, #0]
   2584e:	000b      	movs	r3, r1
   25850:	214a      	movs	r1, #74	; 0x4a
   25852:	2002      	movs	r0, #2
   25854:	4d06      	ldr	r5, [pc, #24]	; (25870 <gethostbyname+0x6c>)
   25856:	47a8      	blx	r5
   25858:	0003      	movs	r3, r0
   2585a:	7023      	strb	r3, [r4, #0]
	}
	return s8Err;
   2585c:	230f      	movs	r3, #15
   2585e:	18fb      	adds	r3, r7, r3
   25860:	781b      	ldrb	r3, [r3, #0]
   25862:	b25b      	sxtb	r3, r3
}
   25864:	0018      	movs	r0, r3
   25866:	46bd      	mov	sp, r7
   25868:	b004      	add	sp, #16
   2586a:	bdb0      	pop	{r4, r5, r7, pc}
   2586c:	0002065f 	.word	0x0002065f
   25870:	00020881 	.word	0x00020881

00025874 <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
   25874:	b580      	push	{r7, lr}
   25876:	b082      	sub	sp, #8
   25878:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   2587a:	003b      	movs	r3, r7
   2587c:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xb9;
   2587e:	687b      	ldr	r3, [r7, #4]
   25880:	22b9      	movs	r2, #185	; 0xb9
   25882:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   25884:	4b13      	ldr	r3, [pc, #76]	; (258d4 <spi_flash_enter_low_power_mode+0x60>)
   25886:	2100      	movs	r1, #0
   25888:	0018      	movs	r0, r3
   2588a:	4b13      	ldr	r3, [pc, #76]	; (258d8 <spi_flash_enter_low_power_mode+0x64>)
   2588c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   2588e:	687b      	ldr	r3, [r7, #4]
   25890:	781b      	ldrb	r3, [r3, #0]
   25892:	001a      	movs	r2, r3
   25894:	4b11      	ldr	r3, [pc, #68]	; (258dc <spi_flash_enter_low_power_mode+0x68>)
   25896:	0011      	movs	r1, r2
   25898:	0018      	movs	r0, r3
   2589a:	4b0f      	ldr	r3, [pc, #60]	; (258d8 <spi_flash_enter_low_power_mode+0x64>)
   2589c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   2589e:	4b10      	ldr	r3, [pc, #64]	; (258e0 <spi_flash_enter_low_power_mode+0x6c>)
   258a0:	2101      	movs	r1, #1
   258a2:	0018      	movs	r0, r3
   258a4:	4b0c      	ldr	r3, [pc, #48]	; (258d8 <spi_flash_enter_low_power_mode+0x64>)
   258a6:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   258a8:	4b0e      	ldr	r3, [pc, #56]	; (258e4 <spi_flash_enter_low_power_mode+0x70>)
   258aa:	2100      	movs	r1, #0
   258ac:	0018      	movs	r0, r3
   258ae:	4b0a      	ldr	r3, [pc, #40]	; (258d8 <spi_flash_enter_low_power_mode+0x64>)
   258b0:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
   258b2:	4b0d      	ldr	r3, [pc, #52]	; (258e8 <spi_flash_enter_low_power_mode+0x74>)
   258b4:	2181      	movs	r1, #129	; 0x81
   258b6:	0018      	movs	r0, r3
   258b8:	4b07      	ldr	r3, [pc, #28]	; (258d8 <spi_flash_enter_low_power_mode+0x64>)
   258ba:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   258bc:	46c0      	nop			; (mov r8, r8)
   258be:	4b0b      	ldr	r3, [pc, #44]	; (258ec <spi_flash_enter_low_power_mode+0x78>)
   258c0:	0018      	movs	r0, r3
   258c2:	4b0b      	ldr	r3, [pc, #44]	; (258f0 <spi_flash_enter_low_power_mode+0x7c>)
   258c4:	4798      	blx	r3
   258c6:	0003      	movs	r3, r0
   258c8:	2b01      	cmp	r3, #1
   258ca:	d1f8      	bne.n	258be <spi_flash_enter_low_power_mode+0x4a>
}
   258cc:	46c0      	nop			; (mov r8, r8)
   258ce:	46bd      	mov	sp, r7
   258d0:	b002      	add	sp, #8
   258d2:	bd80      	pop	{r7, pc}
   258d4:	00010208 	.word	0x00010208
   258d8:	000226d5 	.word	0x000226d5
   258dc:	0001020c 	.word	0x0001020c
   258e0:	00010214 	.word	0x00010214
   258e4:	0001021c 	.word	0x0001021c
   258e8:	00010204 	.word	0x00010204
   258ec:	00010218 	.word	0x00010218
   258f0:	00022691 	.word	0x00022691

000258f4 <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
   258f4:	b580      	push	{r7, lr}
   258f6:	b082      	sub	sp, #8
   258f8:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   258fa:	003b      	movs	r3, r7
   258fc:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xab;
   258fe:	687b      	ldr	r3, [r7, #4]
   25900:	22ab      	movs	r2, #171	; 0xab
   25902:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   25904:	4b13      	ldr	r3, [pc, #76]	; (25954 <spi_flash_leave_low_power_mode+0x60>)
   25906:	2100      	movs	r1, #0
   25908:	0018      	movs	r0, r3
   2590a:	4b13      	ldr	r3, [pc, #76]	; (25958 <spi_flash_leave_low_power_mode+0x64>)
   2590c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   2590e:	687b      	ldr	r3, [r7, #4]
   25910:	781b      	ldrb	r3, [r3, #0]
   25912:	001a      	movs	r2, r3
   25914:	4b11      	ldr	r3, [pc, #68]	; (2595c <spi_flash_leave_low_power_mode+0x68>)
   25916:	0011      	movs	r1, r2
   25918:	0018      	movs	r0, r3
   2591a:	4b0f      	ldr	r3, [pc, #60]	; (25958 <spi_flash_leave_low_power_mode+0x64>)
   2591c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   2591e:	4b10      	ldr	r3, [pc, #64]	; (25960 <spi_flash_leave_low_power_mode+0x6c>)
   25920:	2101      	movs	r1, #1
   25922:	0018      	movs	r0, r3
   25924:	4b0c      	ldr	r3, [pc, #48]	; (25958 <spi_flash_leave_low_power_mode+0x64>)
   25926:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   25928:	4b0e      	ldr	r3, [pc, #56]	; (25964 <spi_flash_leave_low_power_mode+0x70>)
   2592a:	2100      	movs	r1, #0
   2592c:	0018      	movs	r0, r3
   2592e:	4b0a      	ldr	r3, [pc, #40]	; (25958 <spi_flash_leave_low_power_mode+0x64>)
   25930:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
   25932:	4b0d      	ldr	r3, [pc, #52]	; (25968 <spi_flash_leave_low_power_mode+0x74>)
   25934:	2181      	movs	r1, #129	; 0x81
   25936:	0018      	movs	r0, r3
   25938:	4b07      	ldr	r3, [pc, #28]	; (25958 <spi_flash_leave_low_power_mode+0x64>)
   2593a:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   2593c:	46c0      	nop			; (mov r8, r8)
   2593e:	4b0b      	ldr	r3, [pc, #44]	; (2596c <spi_flash_leave_low_power_mode+0x78>)
   25940:	0018      	movs	r0, r3
   25942:	4b0b      	ldr	r3, [pc, #44]	; (25970 <spi_flash_leave_low_power_mode+0x7c>)
   25944:	4798      	blx	r3
   25946:	0003      	movs	r3, r0
   25948:	2b01      	cmp	r3, #1
   2594a:	d1f8      	bne.n	2593e <spi_flash_leave_low_power_mode+0x4a>
}
   2594c:	46c0      	nop			; (mov r8, r8)
   2594e:	46bd      	mov	sp, r7
   25950:	b002      	add	sp, #8
   25952:	bd80      	pop	{r7, pc}
   25954:	00010208 	.word	0x00010208
   25958:	000226d5 	.word	0x000226d5
   2595c:	0001020c 	.word	0x0001020c
   25960:	00010214 	.word	0x00010214
   25964:	0001021c 	.word	0x0001021c
   25968:	00010204 	.word	0x00010204
   2596c:	00010218 	.word	0x00010218
   25970:	00022691 	.word	0x00022691

00025974 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
   25974:	b590      	push	{r4, r7, lr}
   25976:	b085      	sub	sp, #20
   25978:	af00      	add	r7, sp, #0
   2597a:	0002      	movs	r2, r0
   2597c:	1dfb      	adds	r3, r7, #7
   2597e:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = M2M_SUCCESS;
   25980:	230f      	movs	r3, #15
   25982:	18fb      	adds	r3, r7, r3
   25984:	2200      	movs	r2, #0
   25986:	701a      	strb	r2, [r3, #0]
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
   25988:	4b24      	ldr	r3, [pc, #144]	; (25a1c <spi_flash_enable+0xa8>)
   2598a:	4798      	blx	r3
   2598c:	0003      	movs	r3, r0
   2598e:	051b      	lsls	r3, r3, #20
   25990:	0d1b      	lsrs	r3, r3, #20
   25992:	4a23      	ldr	r2, [pc, #140]	; (25a20 <spi_flash_enable+0xac>)
   25994:	4293      	cmp	r3, r2
   25996:	d938      	bls.n	25a0a <spi_flash_enable+0x96>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
   25998:	230f      	movs	r3, #15
   2599a:	18fc      	adds	r4, r7, r3
   2599c:	2308      	movs	r3, #8
   2599e:	18fb      	adds	r3, r7, r3
   259a0:	4a20      	ldr	r2, [pc, #128]	; (25a24 <spi_flash_enable+0xb0>)
   259a2:	0019      	movs	r1, r3
   259a4:	0010      	movs	r0, r2
   259a6:	4b20      	ldr	r3, [pc, #128]	; (25a28 <spi_flash_enable+0xb4>)
   259a8:	4798      	blx	r3
   259aa:	0003      	movs	r3, r0
   259ac:	7023      	strb	r3, [r4, #0]
		if(s8Ret != M2M_SUCCESS) {
   259ae:	230f      	movs	r3, #15
   259b0:	18fb      	adds	r3, r7, r3
   259b2:	781b      	ldrb	r3, [r3, #0]
   259b4:	b25b      	sxtb	r3, r3
   259b6:	2b00      	cmp	r3, #0
   259b8:	d126      	bne.n	25a08 <spi_flash_enable+0x94>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
   259ba:	68bb      	ldr	r3, [r7, #8]
   259bc:	4a1b      	ldr	r2, [pc, #108]	; (25a2c <spi_flash_enable+0xb8>)
   259be:	4013      	ands	r3, r2
   259c0:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x1111ul) << 12);
   259c2:	68bb      	ldr	r3, [r7, #8]
   259c4:	4a1a      	ldr	r2, [pc, #104]	; (25a30 <spi_flash_enable+0xbc>)
   259c6:	4313      	orrs	r3, r2
   259c8:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   259ca:	68bb      	ldr	r3, [r7, #8]
   259cc:	4a15      	ldr	r2, [pc, #84]	; (25a24 <spi_flash_enable+0xb0>)
   259ce:	0019      	movs	r1, r3
   259d0:	0010      	movs	r0, r2
   259d2:	4b18      	ldr	r3, [pc, #96]	; (25a34 <spi_flash_enable+0xc0>)
   259d4:	4798      	blx	r3
		if(enable) {
   259d6:	1dfb      	adds	r3, r7, #7
   259d8:	781b      	ldrb	r3, [r3, #0]
   259da:	2b00      	cmp	r3, #0
   259dc:	d002      	beq.n	259e4 <spi_flash_enable+0x70>
			spi_flash_leave_low_power_mode();
   259de:	4b16      	ldr	r3, [pc, #88]	; (25a38 <spi_flash_enable+0xc4>)
   259e0:	4798      	blx	r3
   259e2:	e001      	b.n	259e8 <spi_flash_enable+0x74>
		} else {
			spi_flash_enter_low_power_mode();
   259e4:	4b15      	ldr	r3, [pc, #84]	; (25a3c <spi_flash_enable+0xc8>)
   259e6:	4798      	blx	r3
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
   259e8:	68bb      	ldr	r3, [r7, #8]
   259ea:	4a10      	ldr	r2, [pc, #64]	; (25a2c <spi_flash_enable+0xb8>)
   259ec:	4013      	ands	r3, r2
   259ee:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x0010ul) << 12);
   259f0:	68bb      	ldr	r3, [r7, #8]
   259f2:	2280      	movs	r2, #128	; 0x80
   259f4:	0252      	lsls	r2, r2, #9
   259f6:	4313      	orrs	r3, r2
   259f8:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   259fa:	68bb      	ldr	r3, [r7, #8]
   259fc:	4a09      	ldr	r2, [pc, #36]	; (25a24 <spi_flash_enable+0xb0>)
   259fe:	0019      	movs	r1, r3
   25a00:	0010      	movs	r0, r2
   25a02:	4b0c      	ldr	r3, [pc, #48]	; (25a34 <spi_flash_enable+0xc0>)
   25a04:	4798      	blx	r3
   25a06:	e000      	b.n	25a0a <spi_flash_enable+0x96>
			goto ERR1;
   25a08:	46c0      	nop			; (mov r8, r8)
	}
ERR1:
	return s8Ret;
   25a0a:	230f      	movs	r3, #15
   25a0c:	18fb      	adds	r3, r7, r3
   25a0e:	781b      	ldrb	r3, [r3, #0]
   25a10:	b25b      	sxtb	r3, r3
}
   25a12:	0018      	movs	r0, r3
   25a14:	46bd      	mov	sp, r7
   25a16:	b005      	add	sp, #20
   25a18:	bd90      	pop	{r4, r7, pc}
   25a1a:	46c0      	nop			; (mov r8, r8)
   25a1c:	00021fb1 	.word	0x00021fb1
   25a20:	0000039f 	.word	0x0000039f
   25a24:	00001410 	.word	0x00001410
   25a28:	000226b1 	.word	0x000226b1
   25a2c:	f8888fff 	.word	0xf8888fff
   25a30:	01111000 	.word	0x01111000
   25a34:	000226d5 	.word	0x000226d5
   25a38:	000258f5 	.word	0x000258f5
   25a3c:	00025875 	.word	0x00025875

00025a40 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
   25a40:	b580      	push	{r7, lr}
   25a42:	b084      	sub	sp, #16
   25a44:	af00      	add	r7, sp, #0
   25a46:	0002      	movs	r2, r0
   25a48:	1dfb      	adds	r3, r7, #7
   25a4a:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
   25a4c:	1dfb      	adds	r3, r7, #7
   25a4e:	781b      	ldrb	r3, [r3, #0]
   25a50:	2b00      	cmp	r3, #0
   25a52:	d108      	bne.n	25a66 <mem_test_unit_ready+0x26>
   25a54:	1dfb      	adds	r3, r7, #7
   25a56:	781a      	ldrb	r2, [r3, #0]
   25a58:	4b08      	ldr	r3, [pc, #32]	; (25a7c <mem_test_unit_ready+0x3c>)
   25a5a:	0152      	lsls	r2, r2, #5
   25a5c:	58d3      	ldr	r3, [r2, r3]
   25a5e:	4798      	blx	r3
   25a60:	0003      	movs	r3, r0
   25a62:	001a      	movs	r2, r3
   25a64:	e000      	b.n	25a68 <mem_test_unit_ready+0x28>
   25a66:	2201      	movs	r2, #1
  status =
   25a68:	230f      	movs	r3, #15
   25a6a:	18fb      	adds	r3, r7, r3
   25a6c:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   25a6e:	230f      	movs	r3, #15
   25a70:	18fb      	adds	r3, r7, r3
   25a72:	781b      	ldrb	r3, [r3, #0]
}
   25a74:	0018      	movs	r0, r3
   25a76:	46bd      	mov	sp, r7
   25a78:	b004      	add	sp, #16
   25a7a:	bd80      	pop	{r7, pc}
   25a7c:	00039eac 	.word	0x00039eac

00025a80 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
   25a80:	b580      	push	{r7, lr}
   25a82:	b084      	sub	sp, #16
   25a84:	af00      	add	r7, sp, #0
   25a86:	0002      	movs	r2, r0
   25a88:	6039      	str	r1, [r7, #0]
   25a8a:	1dfb      	adds	r3, r7, #7
   25a8c:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
   25a8e:	1dfb      	adds	r3, r7, #7
   25a90:	781b      	ldrb	r3, [r3, #0]
   25a92:	2b00      	cmp	r3, #0
   25a94:	d10c      	bne.n	25ab0 <mem_read_capacity+0x30>
   25a96:	1dfb      	adds	r3, r7, #7
   25a98:	781b      	ldrb	r3, [r3, #0]
   25a9a:	4a0b      	ldr	r2, [pc, #44]	; (25ac8 <mem_read_capacity+0x48>)
   25a9c:	015b      	lsls	r3, r3, #5
   25a9e:	18d3      	adds	r3, r2, r3
   25aa0:	3304      	adds	r3, #4
   25aa2:	681b      	ldr	r3, [r3, #0]
   25aa4:	683a      	ldr	r2, [r7, #0]
   25aa6:	0010      	movs	r0, r2
   25aa8:	4798      	blx	r3
   25aaa:	0003      	movs	r3, r0
   25aac:	001a      	movs	r2, r3
   25aae:	e000      	b.n	25ab2 <mem_read_capacity+0x32>
   25ab0:	2201      	movs	r2, #1
  status =
   25ab2:	230f      	movs	r3, #15
   25ab4:	18fb      	adds	r3, r7, r3
   25ab6:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   25ab8:	230f      	movs	r3, #15
   25aba:	18fb      	adds	r3, r7, r3
   25abc:	781b      	ldrb	r3, [r3, #0]
}
   25abe:	0018      	movs	r0, r3
   25ac0:	46bd      	mov	sp, r7
   25ac2:	b004      	add	sp, #16
   25ac4:	bd80      	pop	{r7, pc}
   25ac6:	46c0      	nop			; (mov r8, r8)
   25ac8:	00039eac 	.word	0x00039eac

00025acc <mem_sector_size>:


U8 mem_sector_size(U8 lun)
{
   25acc:	b580      	push	{r7, lr}
   25ace:	b084      	sub	sp, #16
   25ad0:	af00      	add	r7, sp, #0
   25ad2:	0002      	movs	r2, r0
   25ad4:	1dfb      	adds	r3, r7, #7
   25ad6:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
   25ad8:	1dfb      	adds	r3, r7, #7
   25ada:	781b      	ldrb	r3, [r3, #0]
   25adc:	425a      	negs	r2, r3
   25ade:	4153      	adcs	r3, r2
   25ae0:	b2da      	uxtb	r2, r3
  sector_size =
   25ae2:	230f      	movs	r3, #15
   25ae4:	18fb      	adds	r3, r7, r3
   25ae6:	701a      	strb	r2, [r3, #0]
                                  0;
#endif

  Ctrl_access_unlock();

  return sector_size;
   25ae8:	230f      	movs	r3, #15
   25aea:	18fb      	adds	r3, r7, r3
   25aec:	781b      	ldrb	r3, [r3, #0]
}
   25aee:	0018      	movs	r0, r3
   25af0:	46bd      	mov	sp, r7
   25af2:	b004      	add	sp, #16
   25af4:	bd80      	pop	{r7, pc}
	...

00025af8 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
   25af8:	b580      	push	{r7, lr}
   25afa:	b084      	sub	sp, #16
   25afc:	af00      	add	r7, sp, #0
   25afe:	0002      	movs	r2, r0
   25b00:	1dfb      	adds	r3, r7, #7
   25b02:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
   25b04:	1dfb      	adds	r3, r7, #7
   25b06:	781b      	ldrb	r3, [r3, #0]
   25b08:	2b00      	cmp	r3, #0
   25b0a:	d109      	bne.n	25b20 <mem_wr_protect+0x28>
   25b0c:	1dfb      	adds	r3, r7, #7
   25b0e:	781b      	ldrb	r3, [r3, #0]
   25b10:	4a0a      	ldr	r2, [pc, #40]	; (25b3c <mem_wr_protect+0x44>)
   25b12:	015b      	lsls	r3, r3, #5
   25b14:	18d3      	adds	r3, r2, r3
   25b16:	330c      	adds	r3, #12
   25b18:	681b      	ldr	r3, [r3, #0]
   25b1a:	4798      	blx	r3
   25b1c:	1e03      	subs	r3, r0, #0
   25b1e:	d001      	beq.n	25b24 <mem_wr_protect+0x2c>
   25b20:	2201      	movs	r2, #1
   25b22:	e000      	b.n	25b26 <mem_wr_protect+0x2e>
   25b24:	2200      	movs	r2, #0
  wr_protect =
   25b26:	230f      	movs	r3, #15
   25b28:	18fb      	adds	r3, r7, r3
   25b2a:	701a      	strb	r2, [r3, #0]
                                 true;
#endif

  Ctrl_access_unlock();

  return wr_protect;
   25b2c:	230f      	movs	r3, #15
   25b2e:	18fb      	adds	r3, r7, r3
   25b30:	781b      	ldrb	r3, [r3, #0]
}
   25b32:	0018      	movs	r0, r3
   25b34:	46bd      	mov	sp, r7
   25b36:	b004      	add	sp, #16
   25b38:	bd80      	pop	{r7, pc}
   25b3a:	46c0      	nop			; (mov r8, r8)
   25b3c:	00039eac 	.word	0x00039eac

00025b40 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
   25b40:	b580      	push	{r7, lr}
   25b42:	b086      	sub	sp, #24
   25b44:	af00      	add	r7, sp, #0
   25b46:	60b9      	str	r1, [r7, #8]
   25b48:	607a      	str	r2, [r7, #4]
   25b4a:	230f      	movs	r3, #15
   25b4c:	18fb      	adds	r3, r7, r3
   25b4e:	1c02      	adds	r2, r0, #0
   25b50:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
   25b52:	230f      	movs	r3, #15
   25b54:	18fb      	adds	r3, r7, r3
   25b56:	781b      	ldrb	r3, [r3, #0]
   25b58:	2b00      	cmp	r3, #0
   25b5a:	d10e      	bne.n	25b7a <memory_2_ram+0x3a>
   25b5c:	230f      	movs	r3, #15
   25b5e:	18fb      	adds	r3, r7, r3
   25b60:	781b      	ldrb	r3, [r3, #0]
   25b62:	4a0b      	ldr	r2, [pc, #44]	; (25b90 <memory_2_ram+0x50>)
   25b64:	015b      	lsls	r3, r3, #5
   25b66:	18d3      	adds	r3, r2, r3
   25b68:	3314      	adds	r3, #20
   25b6a:	681b      	ldr	r3, [r3, #0]
   25b6c:	6879      	ldr	r1, [r7, #4]
   25b6e:	68ba      	ldr	r2, [r7, #8]
   25b70:	0010      	movs	r0, r2
   25b72:	4798      	blx	r3
   25b74:	0003      	movs	r3, r0
   25b76:	001a      	movs	r2, r3
   25b78:	e000      	b.n	25b7c <memory_2_ram+0x3c>
   25b7a:	2201      	movs	r2, #1
  status =
   25b7c:	2317      	movs	r3, #23
   25b7e:	18fb      	adds	r3, r7, r3
   25b80:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
   25b82:	2317      	movs	r3, #23
   25b84:	18fb      	adds	r3, r7, r3
   25b86:	781b      	ldrb	r3, [r3, #0]
}
   25b88:	0018      	movs	r0, r3
   25b8a:	46bd      	mov	sp, r7
   25b8c:	b006      	add	sp, #24
   25b8e:	bd80      	pop	{r7, pc}
   25b90:	00039eac 	.word	0x00039eac

00025b94 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
   25b94:	b580      	push	{r7, lr}
   25b96:	b086      	sub	sp, #24
   25b98:	af00      	add	r7, sp, #0
   25b9a:	60b9      	str	r1, [r7, #8]
   25b9c:	607a      	str	r2, [r7, #4]
   25b9e:	230f      	movs	r3, #15
   25ba0:	18fb      	adds	r3, r7, r3
   25ba2:	1c02      	adds	r2, r0, #0
   25ba4:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
   25ba6:	230f      	movs	r3, #15
   25ba8:	18fb      	adds	r3, r7, r3
   25baa:	781b      	ldrb	r3, [r3, #0]
   25bac:	2b00      	cmp	r3, #0
   25bae:	d10e      	bne.n	25bce <ram_2_memory+0x3a>
   25bb0:	230f      	movs	r3, #15
   25bb2:	18fb      	adds	r3, r7, r3
   25bb4:	781b      	ldrb	r3, [r3, #0]
   25bb6:	4a0b      	ldr	r2, [pc, #44]	; (25be4 <ram_2_memory+0x50>)
   25bb8:	015b      	lsls	r3, r3, #5
   25bba:	18d3      	adds	r3, r2, r3
   25bbc:	3318      	adds	r3, #24
   25bbe:	681b      	ldr	r3, [r3, #0]
   25bc0:	6879      	ldr	r1, [r7, #4]
   25bc2:	68ba      	ldr	r2, [r7, #8]
   25bc4:	0010      	movs	r0, r2
   25bc6:	4798      	blx	r3
   25bc8:	0003      	movs	r3, r0
   25bca:	001a      	movs	r2, r3
   25bcc:	e000      	b.n	25bd0 <ram_2_memory+0x3c>
   25bce:	2201      	movs	r2, #1
  status =
   25bd0:	2317      	movs	r3, #23
   25bd2:	18fb      	adds	r3, r7, r3
   25bd4:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
   25bd6:	2317      	movs	r3, #23
   25bd8:	18fb      	adds	r3, r7, r3
   25bda:	781b      	ldrb	r3, [r3, #0]
}
   25bdc:	0018      	movs	r0, r3
   25bde:	46bd      	mov	sp, r7
   25be0:	b006      	add	sp, #24
   25be2:	bd80      	pop	{r7, pc}
   25be4:	00039eac 	.word	0x00039eac

00025be8 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
   25be8:	b580      	push	{r7, lr}
   25bea:	b082      	sub	sp, #8
   25bec:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   25bee:	4b10      	ldr	r3, [pc, #64]	; (25c30 <cpu_irq_enter_critical+0x48>)
   25bf0:	681b      	ldr	r3, [r3, #0]
   25bf2:	2b00      	cmp	r3, #0
   25bf4:	d112      	bne.n	25c1c <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   25bf6:	f3ef 8310 	mrs	r3, PRIMASK
   25bfa:	607b      	str	r3, [r7, #4]
  return(result);
   25bfc:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   25bfe:	2b00      	cmp	r3, #0
   25c00:	d109      	bne.n	25c16 <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
   25c02:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   25c04:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   25c08:	4b0a      	ldr	r3, [pc, #40]	; (25c34 <cpu_irq_enter_critical+0x4c>)
   25c0a:	2200      	movs	r2, #0
   25c0c:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   25c0e:	4b0a      	ldr	r3, [pc, #40]	; (25c38 <cpu_irq_enter_critical+0x50>)
   25c10:	2201      	movs	r2, #1
   25c12:	701a      	strb	r2, [r3, #0]
   25c14:	e002      	b.n	25c1c <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   25c16:	4b08      	ldr	r3, [pc, #32]	; (25c38 <cpu_irq_enter_critical+0x50>)
   25c18:	2200      	movs	r2, #0
   25c1a:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   25c1c:	4b04      	ldr	r3, [pc, #16]	; (25c30 <cpu_irq_enter_critical+0x48>)
   25c1e:	681b      	ldr	r3, [r3, #0]
   25c20:	1c5a      	adds	r2, r3, #1
   25c22:	4b03      	ldr	r3, [pc, #12]	; (25c30 <cpu_irq_enter_critical+0x48>)
   25c24:	601a      	str	r2, [r3, #0]
}
   25c26:	46c0      	nop			; (mov r8, r8)
   25c28:	46bd      	mov	sp, r7
   25c2a:	b002      	add	sp, #8
   25c2c:	bd80      	pop	{r7, pc}
   25c2e:	46c0      	nop			; (mov r8, r8)
   25c30:	20003cd4 	.word	0x20003cd4
   25c34:	200000de 	.word	0x200000de
   25c38:	20003cd8 	.word	0x20003cd8

00025c3c <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   25c3c:	b580      	push	{r7, lr}
   25c3e:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   25c40:	4b0b      	ldr	r3, [pc, #44]	; (25c70 <cpu_irq_leave_critical+0x34>)
   25c42:	681b      	ldr	r3, [r3, #0]
   25c44:	1e5a      	subs	r2, r3, #1
   25c46:	4b0a      	ldr	r3, [pc, #40]	; (25c70 <cpu_irq_leave_critical+0x34>)
   25c48:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   25c4a:	4b09      	ldr	r3, [pc, #36]	; (25c70 <cpu_irq_leave_critical+0x34>)
   25c4c:	681b      	ldr	r3, [r3, #0]
   25c4e:	2b00      	cmp	r3, #0
   25c50:	d10a      	bne.n	25c68 <cpu_irq_leave_critical+0x2c>
   25c52:	4b08      	ldr	r3, [pc, #32]	; (25c74 <cpu_irq_leave_critical+0x38>)
   25c54:	781b      	ldrb	r3, [r3, #0]
   25c56:	b2db      	uxtb	r3, r3
   25c58:	2b00      	cmp	r3, #0
   25c5a:	d005      	beq.n	25c68 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
   25c5c:	4b06      	ldr	r3, [pc, #24]	; (25c78 <cpu_irq_leave_critical+0x3c>)
   25c5e:	2201      	movs	r2, #1
   25c60:	701a      	strb	r2, [r3, #0]
   25c62:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   25c66:	b662      	cpsie	i
	}
}
   25c68:	46c0      	nop			; (mov r8, r8)
   25c6a:	46bd      	mov	sp, r7
   25c6c:	bd80      	pop	{r7, pc}
   25c6e:	46c0      	nop			; (mov r8, r8)
   25c70:	20003cd4 	.word	0x20003cd4
   25c74:	20003cd8 	.word	0x20003cd8
   25c78:	200000de 	.word	0x200000de

00025c7c <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   25c7c:	b580      	push	{r7, lr}
   25c7e:	b084      	sub	sp, #16
   25c80:	af00      	add	r7, sp, #0
   25c82:	0002      	movs	r2, r0
   25c84:	1dfb      	adds	r3, r7, #7
   25c86:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   25c88:	230f      	movs	r3, #15
   25c8a:	18fb      	adds	r3, r7, r3
   25c8c:	1dfa      	adds	r2, r7, #7
   25c8e:	7812      	ldrb	r2, [r2, #0]
   25c90:	09d2      	lsrs	r2, r2, #7
   25c92:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   25c94:	230e      	movs	r3, #14
   25c96:	18fb      	adds	r3, r7, r3
   25c98:	1dfa      	adds	r2, r7, #7
   25c9a:	7812      	ldrb	r2, [r2, #0]
   25c9c:	0952      	lsrs	r2, r2, #5
   25c9e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   25ca0:	4b0d      	ldr	r3, [pc, #52]	; (25cd8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   25ca2:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
   25ca4:	230f      	movs	r3, #15
   25ca6:	18fb      	adds	r3, r7, r3
   25ca8:	781b      	ldrb	r3, [r3, #0]
   25caa:	2b00      	cmp	r3, #0
   25cac:	d10f      	bne.n	25cce <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   25cae:	230f      	movs	r3, #15
   25cb0:	18fb      	adds	r3, r7, r3
   25cb2:	781b      	ldrb	r3, [r3, #0]
   25cb4:	009b      	lsls	r3, r3, #2
   25cb6:	2210      	movs	r2, #16
   25cb8:	4694      	mov	ip, r2
   25cba:	44bc      	add	ip, r7
   25cbc:	4463      	add	r3, ip
   25cbe:	3b08      	subs	r3, #8
   25cc0:	681a      	ldr	r2, [r3, #0]
   25cc2:	230e      	movs	r3, #14
   25cc4:	18fb      	adds	r3, r7, r3
   25cc6:	781b      	ldrb	r3, [r3, #0]
   25cc8:	01db      	lsls	r3, r3, #7
   25cca:	18d3      	adds	r3, r2, r3
   25ccc:	e000      	b.n	25cd0 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
   25cce:	2300      	movs	r3, #0
	}
}
   25cd0:	0018      	movs	r0, r3
   25cd2:	46bd      	mov	sp, r7
   25cd4:	b004      	add	sp, #16
   25cd6:	bd80      	pop	{r7, pc}
   25cd8:	41004400 	.word	0x41004400

00025cdc <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   25cdc:	b580      	push	{r7, lr}
   25cde:	b082      	sub	sp, #8
   25ce0:	af00      	add	r7, sp, #0
   25ce2:	0002      	movs	r2, r0
   25ce4:	1dfb      	adds	r3, r7, #7
   25ce6:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   25ce8:	1dfb      	adds	r3, r7, #7
   25cea:	781b      	ldrb	r3, [r3, #0]
   25cec:	0018      	movs	r0, r3
   25cee:	4b03      	ldr	r3, [pc, #12]	; (25cfc <port_get_group_from_gpio_pin+0x20>)
   25cf0:	4798      	blx	r3
   25cf2:	0003      	movs	r3, r0
}
   25cf4:	0018      	movs	r0, r3
   25cf6:	46bd      	mov	sp, r7
   25cf8:	b002      	add	sp, #8
   25cfa:	bd80      	pop	{r7, pc}
   25cfc:	00025c7d 	.word	0x00025c7d

00025d00 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
   25d00:	b580      	push	{r7, lr}
   25d02:	b082      	sub	sp, #8
   25d04:	af00      	add	r7, sp, #0
   25d06:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
   25d08:	687b      	ldr	r3, [r7, #4]
   25d0a:	2200      	movs	r2, #0
   25d0c:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   25d0e:	687b      	ldr	r3, [r7, #4]
   25d10:	2201      	movs	r2, #1
   25d12:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   25d14:	687b      	ldr	r3, [r7, #4]
   25d16:	2200      	movs	r2, #0
   25d18:	709a      	strb	r2, [r3, #2]
}
   25d1a:	46c0      	nop			; (mov r8, r8)
   25d1c:	46bd      	mov	sp, r7
   25d1e:	b002      	add	sp, #8
   25d20:	bd80      	pop	{r7, pc}
	...

00025d24 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
   25d24:	b580      	push	{r7, lr}
   25d26:	b084      	sub	sp, #16
   25d28:	af00      	add	r7, sp, #0
   25d2a:	0002      	movs	r2, r0
   25d2c:	1dfb      	adds	r3, r7, #7
   25d2e:	701a      	strb	r2, [r3, #0]
   25d30:	1dbb      	adds	r3, r7, #6
   25d32:	1c0a      	adds	r2, r1, #0
   25d34:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   25d36:	1dfb      	adds	r3, r7, #7
   25d38:	781b      	ldrb	r3, [r3, #0]
   25d3a:	0018      	movs	r0, r3
   25d3c:	4b0d      	ldr	r3, [pc, #52]	; (25d74 <port_pin_set_output_level+0x50>)
   25d3e:	4798      	blx	r3
   25d40:	0003      	movs	r3, r0
   25d42:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   25d44:	1dfb      	adds	r3, r7, #7
   25d46:	781b      	ldrb	r3, [r3, #0]
   25d48:	221f      	movs	r2, #31
   25d4a:	4013      	ands	r3, r2
   25d4c:	2201      	movs	r2, #1
   25d4e:	409a      	lsls	r2, r3
   25d50:	0013      	movs	r3, r2
   25d52:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
   25d54:	1dbb      	adds	r3, r7, #6
   25d56:	781b      	ldrb	r3, [r3, #0]
   25d58:	2b00      	cmp	r3, #0
   25d5a:	d003      	beq.n	25d64 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   25d5c:	68fb      	ldr	r3, [r7, #12]
   25d5e:	68ba      	ldr	r2, [r7, #8]
   25d60:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
   25d62:	e002      	b.n	25d6a <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   25d64:	68fb      	ldr	r3, [r7, #12]
   25d66:	68ba      	ldr	r2, [r7, #8]
   25d68:	615a      	str	r2, [r3, #20]
}
   25d6a:	46c0      	nop			; (mov r8, r8)
   25d6c:	46bd      	mov	sp, r7
   25d6e:	b004      	add	sp, #16
   25d70:	bd80      	pop	{r7, pc}
   25d72:	46c0      	nop			; (mov r8, r8)
   25d74:	00025cdd 	.word	0x00025cdd

00025d78 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
   25d78:	b580      	push	{r7, lr}
   25d7a:	b082      	sub	sp, #8
   25d7c:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   25d7e:	1d3b      	adds	r3, r7, #4
   25d80:	0018      	movs	r0, r3
   25d82:	4b0e      	ldr	r3, [pc, #56]	; (25dbc <system_board_init+0x44>)
   25d84:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   25d86:	1d3b      	adds	r3, r7, #4
   25d88:	2201      	movs	r2, #1
   25d8a:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
   25d8c:	1d3b      	adds	r3, r7, #4
   25d8e:	0019      	movs	r1, r3
   25d90:	2017      	movs	r0, #23
   25d92:	4b0b      	ldr	r3, [pc, #44]	; (25dc0 <system_board_init+0x48>)
   25d94:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
   25d96:	2101      	movs	r1, #1
   25d98:	2017      	movs	r0, #23
   25d9a:	4b0a      	ldr	r3, [pc, #40]	; (25dc4 <system_board_init+0x4c>)
   25d9c:	4798      	blx	r3
	
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   25d9e:	1d3b      	adds	r3, r7, #4
   25da0:	2200      	movs	r2, #0
   25da2:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
   25da4:	1d3b      	adds	r3, r7, #4
   25da6:	2201      	movs	r2, #1
   25da8:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
   25daa:	1d3b      	adds	r3, r7, #4
   25dac:	0019      	movs	r1, r3
   25dae:	2037      	movs	r0, #55	; 0x37
   25db0:	4b03      	ldr	r3, [pc, #12]	; (25dc0 <system_board_init+0x48>)
   25db2:	4798      	blx	r3
}
   25db4:	46c0      	nop			; (mov r8, r8)
   25db6:	46bd      	mov	sp, r7
   25db8:	b002      	add	sp, #8
   25dba:	bd80      	pop	{r7, pc}
   25dbc:	00025d01 	.word	0x00025d01
   25dc0:	000263ed 	.word	0x000263ed
   25dc4:	00025d25 	.word	0x00025d25

00025dc8 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
   25dc8:	b580      	push	{r7, lr}
   25dca:	b084      	sub	sp, #16
   25dcc:	af00      	add	r7, sp, #0
   25dce:	0002      	movs	r2, r0
   25dd0:	1dfb      	adds	r3, r7, #7
   25dd2:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   25dd4:	230f      	movs	r3, #15
   25dd6:	18fb      	adds	r3, r7, r3
   25dd8:	1dfa      	adds	r2, r7, #7
   25dda:	7812      	ldrb	r2, [r2, #0]
   25ddc:	0952      	lsrs	r2, r2, #5
   25dde:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
   25de0:	230f      	movs	r3, #15
   25de2:	18fb      	adds	r3, r7, r3
   25de4:	781b      	ldrb	r3, [r3, #0]
   25de6:	2b00      	cmp	r3, #0
   25de8:	d10c      	bne.n	25e04 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   25dea:	4b09      	ldr	r3, [pc, #36]	; (25e10 <_extint_get_eic_from_channel+0x48>)
   25dec:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
   25dee:	230f      	movs	r3, #15
   25df0:	18fb      	adds	r3, r7, r3
   25df2:	781b      	ldrb	r3, [r3, #0]
   25df4:	009b      	lsls	r3, r3, #2
   25df6:	2210      	movs	r2, #16
   25df8:	4694      	mov	ip, r2
   25dfa:	44bc      	add	ip, r7
   25dfc:	4463      	add	r3, ip
   25dfe:	3b08      	subs	r3, #8
   25e00:	681b      	ldr	r3, [r3, #0]
   25e02:	e000      	b.n	25e06 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
   25e04:	2300      	movs	r3, #0
	}
}
   25e06:	0018      	movs	r0, r3
   25e08:	46bd      	mov	sp, r7
   25e0a:	b004      	add	sp, #16
   25e0c:	bd80      	pop	{r7, pc}
   25e0e:	46c0      	nop			; (mov r8, r8)
   25e10:	40001800 	.word	0x40001800

00025e14 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
   25e14:	b580      	push	{r7, lr}
   25e16:	b084      	sub	sp, #16
   25e18:	af00      	add	r7, sp, #0
   25e1a:	0002      	movs	r2, r0
   25e1c:	1dfb      	adds	r3, r7, #7
   25e1e:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   25e20:	1dfb      	adds	r3, r7, #7
   25e22:	781b      	ldrb	r3, [r3, #0]
   25e24:	0018      	movs	r0, r3
   25e26:	4b0b      	ldr	r3, [pc, #44]	; (25e54 <extint_chan_is_detected+0x40>)
   25e28:	4798      	blx	r3
   25e2a:	0003      	movs	r3, r0
   25e2c:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   25e2e:	1dfb      	adds	r3, r7, #7
   25e30:	781b      	ldrb	r3, [r3, #0]
   25e32:	221f      	movs	r2, #31
   25e34:	4013      	ands	r3, r2
   25e36:	2201      	movs	r2, #1
   25e38:	409a      	lsls	r2, r3
   25e3a:	0013      	movs	r3, r2
   25e3c:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
   25e3e:	68fb      	ldr	r3, [r7, #12]
   25e40:	691b      	ldr	r3, [r3, #16]
   25e42:	68ba      	ldr	r2, [r7, #8]
   25e44:	4013      	ands	r3, r2
   25e46:	1e5a      	subs	r2, r3, #1
   25e48:	4193      	sbcs	r3, r2
   25e4a:	b2db      	uxtb	r3, r3
}
   25e4c:	0018      	movs	r0, r3
   25e4e:	46bd      	mov	sp, r7
   25e50:	b004      	add	sp, #16
   25e52:	bd80      	pop	{r7, pc}
   25e54:	00025dc9 	.word	0x00025dc9

00025e58 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
   25e58:	b580      	push	{r7, lr}
   25e5a:	b084      	sub	sp, #16
   25e5c:	af00      	add	r7, sp, #0
   25e5e:	0002      	movs	r2, r0
   25e60:	1dfb      	adds	r3, r7, #7
   25e62:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   25e64:	1dfb      	adds	r3, r7, #7
   25e66:	781b      	ldrb	r3, [r3, #0]
   25e68:	0018      	movs	r0, r3
   25e6a:	4b09      	ldr	r3, [pc, #36]	; (25e90 <extint_chan_clear_detected+0x38>)
   25e6c:	4798      	blx	r3
   25e6e:	0003      	movs	r3, r0
   25e70:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   25e72:	1dfb      	adds	r3, r7, #7
   25e74:	781b      	ldrb	r3, [r3, #0]
   25e76:	221f      	movs	r2, #31
   25e78:	4013      	ands	r3, r2
   25e7a:	2201      	movs	r2, #1
   25e7c:	409a      	lsls	r2, r3
   25e7e:	0013      	movs	r3, r2
   25e80:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
   25e82:	68fb      	ldr	r3, [r7, #12]
   25e84:	68ba      	ldr	r2, [r7, #8]
   25e86:	611a      	str	r2, [r3, #16]
}
   25e88:	46c0      	nop			; (mov r8, r8)
   25e8a:	46bd      	mov	sp, r7
   25e8c:	b004      	add	sp, #16
   25e8e:	bd80      	pop	{r7, pc}
   25e90:	00025dc9 	.word	0x00025dc9

00025e94 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
   25e94:	b580      	push	{r7, lr}
   25e96:	b082      	sub	sp, #8
   25e98:	af00      	add	r7, sp, #0
   25e9a:	6078      	str	r0, [r7, #4]
   25e9c:	0008      	movs	r0, r1
   25e9e:	0011      	movs	r1, r2
   25ea0:	1cfb      	adds	r3, r7, #3
   25ea2:	1c02      	adds	r2, r0, #0
   25ea4:	701a      	strb	r2, [r3, #0]
   25ea6:	1cbb      	adds	r3, r7, #2
   25ea8:	1c0a      	adds	r2, r1, #0
   25eaa:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
   25eac:	1cbb      	adds	r3, r7, #2
   25eae:	781b      	ldrb	r3, [r3, #0]
   25eb0:	2b00      	cmp	r3, #0
   25eb2:	d001      	beq.n	25eb8 <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   25eb4:	2317      	movs	r3, #23
   25eb6:	e019      	b.n	25eec <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
   25eb8:	1cfb      	adds	r3, r7, #3
   25eba:	781a      	ldrb	r2, [r3, #0]
   25ebc:	4b0d      	ldr	r3, [pc, #52]	; (25ef4 <extint_register_callback+0x60>)
   25ebe:	0092      	lsls	r2, r2, #2
   25ec0:	58d3      	ldr	r3, [r2, r3]
   25ec2:	2b00      	cmp	r3, #0
   25ec4:	d107      	bne.n	25ed6 <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
   25ec6:	1cfb      	adds	r3, r7, #3
   25ec8:	781a      	ldrb	r2, [r3, #0]
   25eca:	4b0a      	ldr	r3, [pc, #40]	; (25ef4 <extint_register_callback+0x60>)
   25ecc:	0092      	lsls	r2, r2, #2
   25ece:	6879      	ldr	r1, [r7, #4]
   25ed0:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
   25ed2:	2300      	movs	r3, #0
   25ed4:	e00a      	b.n	25eec <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
   25ed6:	1cfb      	adds	r3, r7, #3
   25ed8:	781a      	ldrb	r2, [r3, #0]
   25eda:	4b06      	ldr	r3, [pc, #24]	; (25ef4 <extint_register_callback+0x60>)
   25edc:	0092      	lsls	r2, r2, #2
   25ede:	58d2      	ldr	r2, [r2, r3]
   25ee0:	687b      	ldr	r3, [r7, #4]
   25ee2:	429a      	cmp	r2, r3
   25ee4:	d101      	bne.n	25eea <extint_register_callback+0x56>
		return STATUS_OK;
   25ee6:	2300      	movs	r3, #0
   25ee8:	e000      	b.n	25eec <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
   25eea:	231d      	movs	r3, #29
}
   25eec:	0018      	movs	r0, r3
   25eee:	46bd      	mov	sp, r7
   25ef0:	b002      	add	sp, #8
   25ef2:	bd80      	pop	{r7, pc}
   25ef4:	200054e4 	.word	0x200054e4

00025ef8 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   25ef8:	b580      	push	{r7, lr}
   25efa:	b084      	sub	sp, #16
   25efc:	af00      	add	r7, sp, #0
   25efe:	0002      	movs	r2, r0
   25f00:	1dfb      	adds	r3, r7, #7
   25f02:	701a      	strb	r2, [r3, #0]
   25f04:	1dbb      	adds	r3, r7, #6
   25f06:	1c0a      	adds	r2, r1, #0
   25f08:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   25f0a:	1dbb      	adds	r3, r7, #6
   25f0c:	781b      	ldrb	r3, [r3, #0]
   25f0e:	2b00      	cmp	r3, #0
   25f10:	d10e      	bne.n	25f30 <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   25f12:	1dfb      	adds	r3, r7, #7
   25f14:	781b      	ldrb	r3, [r3, #0]
   25f16:	0018      	movs	r0, r3
   25f18:	4b08      	ldr	r3, [pc, #32]	; (25f3c <extint_chan_enable_callback+0x44>)
   25f1a:	4798      	blx	r3
   25f1c:	0003      	movs	r3, r0
   25f1e:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
   25f20:	1dfb      	adds	r3, r7, #7
   25f22:	781b      	ldrb	r3, [r3, #0]
   25f24:	2201      	movs	r2, #1
   25f26:	409a      	lsls	r2, r3
   25f28:	68fb      	ldr	r3, [r7, #12]
   25f2a:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   25f2c:	2300      	movs	r3, #0
   25f2e:	e000      	b.n	25f32 <extint_chan_enable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   25f30:	2317      	movs	r3, #23
}
   25f32:	0018      	movs	r0, r3
   25f34:	46bd      	mov	sp, r7
   25f36:	b004      	add	sp, #16
   25f38:	bd80      	pop	{r7, pc}
   25f3a:	46c0      	nop			; (mov r8, r8)
   25f3c:	00025dc9 	.word	0x00025dc9

00025f40 <extint_chan_disable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   25f40:	b580      	push	{r7, lr}
   25f42:	b084      	sub	sp, #16
   25f44:	af00      	add	r7, sp, #0
   25f46:	0002      	movs	r2, r0
   25f48:	1dfb      	adds	r3, r7, #7
   25f4a:	701a      	strb	r2, [r3, #0]
   25f4c:	1dbb      	adds	r3, r7, #6
   25f4e:	1c0a      	adds	r2, r1, #0
   25f50:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   25f52:	1dbb      	adds	r3, r7, #6
   25f54:	781b      	ldrb	r3, [r3, #0]
   25f56:	2b00      	cmp	r3, #0
   25f58:	d10e      	bne.n	25f78 <extint_chan_disable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   25f5a:	1dfb      	adds	r3, r7, #7
   25f5c:	781b      	ldrb	r3, [r3, #0]
   25f5e:	0018      	movs	r0, r3
   25f60:	4b08      	ldr	r3, [pc, #32]	; (25f84 <extint_chan_disable_callback+0x44>)
   25f62:	4798      	blx	r3
   25f64:	0003      	movs	r3, r0
   25f66:	60fb      	str	r3, [r7, #12]

		eic->INTENCLR.reg = (1UL << channel);
   25f68:	1dfb      	adds	r3, r7, #7
   25f6a:	781b      	ldrb	r3, [r3, #0]
   25f6c:	2201      	movs	r2, #1
   25f6e:	409a      	lsls	r2, r3
   25f70:	68fb      	ldr	r3, [r7, #12]
   25f72:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   25f74:	2300      	movs	r3, #0
   25f76:	e000      	b.n	25f7a <extint_chan_disable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   25f78:	2317      	movs	r3, #23
}
   25f7a:	0018      	movs	r0, r3
   25f7c:	46bd      	mov	sp, r7
   25f7e:	b004      	add	sp, #16
   25f80:	bd80      	pop	{r7, pc}
   25f82:	46c0      	nop			; (mov r8, r8)
   25f84:	00025dc9 	.word	0x00025dc9

00025f88 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
   25f88:	b580      	push	{r7, lr}
   25f8a:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   25f8c:	4b15      	ldr	r3, [pc, #84]	; (25fe4 <EIC_Handler+0x5c>)
   25f8e:	2200      	movs	r2, #0
   25f90:	701a      	strb	r2, [r3, #0]
   25f92:	e020      	b.n	25fd6 <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
   25f94:	4b13      	ldr	r3, [pc, #76]	; (25fe4 <EIC_Handler+0x5c>)
   25f96:	781b      	ldrb	r3, [r3, #0]
   25f98:	0018      	movs	r0, r3
   25f9a:	4b13      	ldr	r3, [pc, #76]	; (25fe8 <EIC_Handler+0x60>)
   25f9c:	4798      	blx	r3
   25f9e:	1e03      	subs	r3, r0, #0
   25fa0:	d013      	beq.n	25fca <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
   25fa2:	4b10      	ldr	r3, [pc, #64]	; (25fe4 <EIC_Handler+0x5c>)
   25fa4:	781b      	ldrb	r3, [r3, #0]
   25fa6:	0018      	movs	r0, r3
   25fa8:	4b10      	ldr	r3, [pc, #64]	; (25fec <EIC_Handler+0x64>)
   25faa:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
   25fac:	4b0d      	ldr	r3, [pc, #52]	; (25fe4 <EIC_Handler+0x5c>)
   25fae:	781b      	ldrb	r3, [r3, #0]
   25fb0:	001a      	movs	r2, r3
   25fb2:	4b0f      	ldr	r3, [pc, #60]	; (25ff0 <EIC_Handler+0x68>)
   25fb4:	0092      	lsls	r2, r2, #2
   25fb6:	58d3      	ldr	r3, [r2, r3]
   25fb8:	2b00      	cmp	r3, #0
   25fba:	d006      	beq.n	25fca <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
   25fbc:	4b09      	ldr	r3, [pc, #36]	; (25fe4 <EIC_Handler+0x5c>)
   25fbe:	781b      	ldrb	r3, [r3, #0]
   25fc0:	001a      	movs	r2, r3
   25fc2:	4b0b      	ldr	r3, [pc, #44]	; (25ff0 <EIC_Handler+0x68>)
   25fc4:	0092      	lsls	r2, r2, #2
   25fc6:	58d3      	ldr	r3, [r2, r3]
   25fc8:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   25fca:	4b06      	ldr	r3, [pc, #24]	; (25fe4 <EIC_Handler+0x5c>)
   25fcc:	781b      	ldrb	r3, [r3, #0]
   25fce:	3301      	adds	r3, #1
   25fd0:	b2da      	uxtb	r2, r3
   25fd2:	4b04      	ldr	r3, [pc, #16]	; (25fe4 <EIC_Handler+0x5c>)
   25fd4:	701a      	strb	r2, [r3, #0]
   25fd6:	4b03      	ldr	r3, [pc, #12]	; (25fe4 <EIC_Handler+0x5c>)
   25fd8:	781b      	ldrb	r3, [r3, #0]
   25fda:	2b0f      	cmp	r3, #15
   25fdc:	d9da      	bls.n	25f94 <EIC_Handler+0xc>
			}
		}
	}
}
   25fde:	46c0      	nop			; (mov r8, r8)
   25fe0:	46bd      	mov	sp, r7
   25fe2:	bd80      	pop	{r7, pc}
   25fe4:	200054e0 	.word	0x200054e0
   25fe8:	00025e15 	.word	0x00025e15
   25fec:	00025e59 	.word	0x00025e59
   25ff0:	200054e4 	.word	0x200054e4

00025ff4 <system_gclk_chan_get_config_defaults>:
{
   25ff4:	b580      	push	{r7, lr}
   25ff6:	b082      	sub	sp, #8
   25ff8:	af00      	add	r7, sp, #0
   25ffa:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   25ffc:	687b      	ldr	r3, [r7, #4]
   25ffe:	2200      	movs	r2, #0
   26000:	701a      	strb	r2, [r3, #0]
}
   26002:	46c0      	nop			; (mov r8, r8)
   26004:	46bd      	mov	sp, r7
   26006:	b002      	add	sp, #8
   26008:	bd80      	pop	{r7, pc}
	...

0002600c <system_apb_clock_set_mask>:
{
   2600c:	b580      	push	{r7, lr}
   2600e:	b082      	sub	sp, #8
   26010:	af00      	add	r7, sp, #0
   26012:	0002      	movs	r2, r0
   26014:	6039      	str	r1, [r7, #0]
   26016:	1dfb      	adds	r3, r7, #7
   26018:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2601a:	1dfb      	adds	r3, r7, #7
   2601c:	781b      	ldrb	r3, [r3, #0]
   2601e:	2b01      	cmp	r3, #1
   26020:	d00a      	beq.n	26038 <system_apb_clock_set_mask+0x2c>
   26022:	2b02      	cmp	r3, #2
   26024:	d00f      	beq.n	26046 <system_apb_clock_set_mask+0x3a>
   26026:	2b00      	cmp	r3, #0
   26028:	d114      	bne.n	26054 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2602a:	4b0e      	ldr	r3, [pc, #56]	; (26064 <system_apb_clock_set_mask+0x58>)
   2602c:	4a0d      	ldr	r2, [pc, #52]	; (26064 <system_apb_clock_set_mask+0x58>)
   2602e:	6991      	ldr	r1, [r2, #24]
   26030:	683a      	ldr	r2, [r7, #0]
   26032:	430a      	orrs	r2, r1
   26034:	619a      	str	r2, [r3, #24]
			break;
   26036:	e00f      	b.n	26058 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   26038:	4b0a      	ldr	r3, [pc, #40]	; (26064 <system_apb_clock_set_mask+0x58>)
   2603a:	4a0a      	ldr	r2, [pc, #40]	; (26064 <system_apb_clock_set_mask+0x58>)
   2603c:	69d1      	ldr	r1, [r2, #28]
   2603e:	683a      	ldr	r2, [r7, #0]
   26040:	430a      	orrs	r2, r1
   26042:	61da      	str	r2, [r3, #28]
			break;
   26044:	e008      	b.n	26058 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   26046:	4b07      	ldr	r3, [pc, #28]	; (26064 <system_apb_clock_set_mask+0x58>)
   26048:	4a06      	ldr	r2, [pc, #24]	; (26064 <system_apb_clock_set_mask+0x58>)
   2604a:	6a11      	ldr	r1, [r2, #32]
   2604c:	683a      	ldr	r2, [r7, #0]
   2604e:	430a      	orrs	r2, r1
   26050:	621a      	str	r2, [r3, #32]
			break;
   26052:	e001      	b.n	26058 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   26054:	2317      	movs	r3, #23
   26056:	e000      	b.n	2605a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   26058:	2300      	movs	r3, #0
}
   2605a:	0018      	movs	r0, r3
   2605c:	46bd      	mov	sp, r7
   2605e:	b002      	add	sp, #8
   26060:	bd80      	pop	{r7, pc}
   26062:	46c0      	nop			; (mov r8, r8)
   26064:	40000400 	.word	0x40000400

00026068 <system_pinmux_get_config_defaults>:
{
   26068:	b580      	push	{r7, lr}
   2606a:	b082      	sub	sp, #8
   2606c:	af00      	add	r7, sp, #0
   2606e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   26070:	687b      	ldr	r3, [r7, #4]
   26072:	2280      	movs	r2, #128	; 0x80
   26074:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   26076:	687b      	ldr	r3, [r7, #4]
   26078:	2200      	movs	r2, #0
   2607a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   2607c:	687b      	ldr	r3, [r7, #4]
   2607e:	2201      	movs	r2, #1
   26080:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   26082:	687b      	ldr	r3, [r7, #4]
   26084:	2200      	movs	r2, #0
   26086:	70da      	strb	r2, [r3, #3]
}
   26088:	46c0      	nop			; (mov r8, r8)
   2608a:	46bd      	mov	sp, r7
   2608c:	b002      	add	sp, #8
   2608e:	bd80      	pop	{r7, pc}

00026090 <system_interrupt_enable>:
{
   26090:	b580      	push	{r7, lr}
   26092:	b082      	sub	sp, #8
   26094:	af00      	add	r7, sp, #0
   26096:	0002      	movs	r2, r0
   26098:	1dfb      	adds	r3, r7, #7
   2609a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   2609c:	4b06      	ldr	r3, [pc, #24]	; (260b8 <system_interrupt_enable+0x28>)
   2609e:	1dfa      	adds	r2, r7, #7
   260a0:	7812      	ldrb	r2, [r2, #0]
   260a2:	0011      	movs	r1, r2
   260a4:	221f      	movs	r2, #31
   260a6:	400a      	ands	r2, r1
   260a8:	2101      	movs	r1, #1
   260aa:	4091      	lsls	r1, r2
   260ac:	000a      	movs	r2, r1
   260ae:	601a      	str	r2, [r3, #0]
}
   260b0:	46c0      	nop			; (mov r8, r8)
   260b2:	46bd      	mov	sp, r7
   260b4:	b002      	add	sp, #8
   260b6:	bd80      	pop	{r7, pc}
   260b8:	e000e100 	.word	0xe000e100

000260bc <_extint_get_eic_from_channel>:
{
   260bc:	b580      	push	{r7, lr}
   260be:	b084      	sub	sp, #16
   260c0:	af00      	add	r7, sp, #0
   260c2:	0002      	movs	r2, r0
   260c4:	1dfb      	adds	r3, r7, #7
   260c6:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   260c8:	230f      	movs	r3, #15
   260ca:	18fb      	adds	r3, r7, r3
   260cc:	1dfa      	adds	r2, r7, #7
   260ce:	7812      	ldrb	r2, [r2, #0]
   260d0:	0952      	lsrs	r2, r2, #5
   260d2:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
   260d4:	230f      	movs	r3, #15
   260d6:	18fb      	adds	r3, r7, r3
   260d8:	781b      	ldrb	r3, [r3, #0]
   260da:	2b00      	cmp	r3, #0
   260dc:	d10c      	bne.n	260f8 <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   260de:	4b09      	ldr	r3, [pc, #36]	; (26104 <_extint_get_eic_from_channel+0x48>)
   260e0:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
   260e2:	230f      	movs	r3, #15
   260e4:	18fb      	adds	r3, r7, r3
   260e6:	781b      	ldrb	r3, [r3, #0]
   260e8:	009b      	lsls	r3, r3, #2
   260ea:	2210      	movs	r2, #16
   260ec:	4694      	mov	ip, r2
   260ee:	44bc      	add	ip, r7
   260f0:	4463      	add	r3, ip
   260f2:	3b08      	subs	r3, #8
   260f4:	681b      	ldr	r3, [r3, #0]
   260f6:	e000      	b.n	260fa <_extint_get_eic_from_channel+0x3e>
		return NULL;
   260f8:	2300      	movs	r3, #0
}
   260fa:	0018      	movs	r0, r3
   260fc:	46bd      	mov	sp, r7
   260fe:	b004      	add	sp, #16
   26100:	bd80      	pop	{r7, pc}
   26102:	46c0      	nop			; (mov r8, r8)
   26104:	40001800 	.word	0x40001800

00026108 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
   26108:	b580      	push	{r7, lr}
   2610a:	b082      	sub	sp, #8
   2610c:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   2610e:	4b0f      	ldr	r3, [pc, #60]	; (2614c <extint_is_syncing+0x44>)
   26110:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   26112:	2300      	movs	r3, #0
   26114:	607b      	str	r3, [r7, #4]
   26116:	e011      	b.n	2613c <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
   26118:	687b      	ldr	r3, [r7, #4]
   2611a:	009b      	lsls	r3, r3, #2
   2611c:	2208      	movs	r2, #8
   2611e:	4694      	mov	ip, r2
   26120:	44bc      	add	ip, r7
   26122:	4463      	add	r3, ip
   26124:	3b08      	subs	r3, #8
   26126:	681b      	ldr	r3, [r3, #0]
   26128:	785b      	ldrb	r3, [r3, #1]
   2612a:	b2db      	uxtb	r3, r3
   2612c:	b25b      	sxtb	r3, r3
   2612e:	2b00      	cmp	r3, #0
   26130:	da01      	bge.n	26136 <extint_is_syncing+0x2e>
			return true;
   26132:	2301      	movs	r3, #1
   26134:	e006      	b.n	26144 <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   26136:	687b      	ldr	r3, [r7, #4]
   26138:	3301      	adds	r3, #1
   2613a:	607b      	str	r3, [r7, #4]
   2613c:	687b      	ldr	r3, [r7, #4]
   2613e:	2b00      	cmp	r3, #0
   26140:	d0ea      	beq.n	26118 <extint_is_syncing+0x10>
		}
	}
	return false;
   26142:	2300      	movs	r3, #0
}
   26144:	0018      	movs	r0, r3
   26146:	46bd      	mov	sp, r7
   26148:	b002      	add	sp, #8
   2614a:	bd80      	pop	{r7, pc}
   2614c:	40001800 	.word	0x40001800

00026150 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
   26150:	b580      	push	{r7, lr}
   26152:	b084      	sub	sp, #16
   26154:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   26156:	4b2d      	ldr	r3, [pc, #180]	; (2620c <_system_extint_init+0xbc>)
   26158:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
   2615a:	2140      	movs	r1, #64	; 0x40
   2615c:	2000      	movs	r0, #0
   2615e:	4b2c      	ldr	r3, [pc, #176]	; (26210 <_system_extint_init+0xc0>)
   26160:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   26162:	003b      	movs	r3, r7
   26164:	0018      	movs	r0, r3
   26166:	4b2b      	ldr	r3, [pc, #172]	; (26214 <_system_extint_init+0xc4>)
   26168:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
   2616a:	003b      	movs	r3, r7
   2616c:	2200      	movs	r2, #0
   2616e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
   26170:	003b      	movs	r3, r7
   26172:	0019      	movs	r1, r3
   26174:	2005      	movs	r0, #5
   26176:	4b28      	ldr	r3, [pc, #160]	; (26218 <_system_extint_init+0xc8>)
   26178:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
   2617a:	2005      	movs	r0, #5
   2617c:	4b27      	ldr	r3, [pc, #156]	; (2621c <_system_extint_init+0xcc>)
   2617e:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   26180:	2300      	movs	r3, #0
   26182:	60fb      	str	r3, [r7, #12]
   26184:	e018      	b.n	261b8 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
   26186:	68fb      	ldr	r3, [r7, #12]
   26188:	009b      	lsls	r3, r3, #2
   2618a:	2210      	movs	r2, #16
   2618c:	4694      	mov	ip, r2
   2618e:	44bc      	add	ip, r7
   26190:	4463      	add	r3, ip
   26192:	3b0c      	subs	r3, #12
   26194:	681a      	ldr	r2, [r3, #0]
   26196:	68fb      	ldr	r3, [r7, #12]
   26198:	009b      	lsls	r3, r3, #2
   2619a:	2110      	movs	r1, #16
   2619c:	468c      	mov	ip, r1
   2619e:	44bc      	add	ip, r7
   261a0:	4463      	add	r3, ip
   261a2:	3b0c      	subs	r3, #12
   261a4:	681b      	ldr	r3, [r3, #0]
   261a6:	781b      	ldrb	r3, [r3, #0]
   261a8:	b2db      	uxtb	r3, r3
   261aa:	2101      	movs	r1, #1
   261ac:	430b      	orrs	r3, r1
   261ae:	b2db      	uxtb	r3, r3
   261b0:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   261b2:	68fb      	ldr	r3, [r7, #12]
   261b4:	3301      	adds	r3, #1
   261b6:	60fb      	str	r3, [r7, #12]
   261b8:	68fb      	ldr	r3, [r7, #12]
   261ba:	2b00      	cmp	r3, #0
   261bc:	d0e3      	beq.n	26186 <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
   261be:	46c0      	nop			; (mov r8, r8)
   261c0:	4b17      	ldr	r3, [pc, #92]	; (26220 <_system_extint_init+0xd0>)
   261c2:	4798      	blx	r3
   261c4:	1e03      	subs	r3, r0, #0
   261c6:	d1fb      	bne.n	261c0 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   261c8:	230b      	movs	r3, #11
   261ca:	18fb      	adds	r3, r7, r3
   261cc:	2200      	movs	r2, #0
   261ce:	701a      	strb	r2, [r3, #0]
   261d0:	e00d      	b.n	261ee <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
   261d2:	230b      	movs	r3, #11
   261d4:	18fb      	adds	r3, r7, r3
   261d6:	781a      	ldrb	r2, [r3, #0]
   261d8:	4b12      	ldr	r3, [pc, #72]	; (26224 <_system_extint_init+0xd4>)
   261da:	0092      	lsls	r2, r2, #2
   261dc:	2100      	movs	r1, #0
   261de:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   261e0:	230b      	movs	r3, #11
   261e2:	18fb      	adds	r3, r7, r3
   261e4:	781a      	ldrb	r2, [r3, #0]
   261e6:	230b      	movs	r3, #11
   261e8:	18fb      	adds	r3, r7, r3
   261ea:	3201      	adds	r2, #1
   261ec:	701a      	strb	r2, [r3, #0]
   261ee:	230b      	movs	r3, #11
   261f0:	18fb      	adds	r3, r7, r3
   261f2:	781b      	ldrb	r3, [r3, #0]
   261f4:	2b0f      	cmp	r3, #15
   261f6:	d9ec      	bls.n	261d2 <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
   261f8:	2004      	movs	r0, #4
   261fa:	4b0b      	ldr	r3, [pc, #44]	; (26228 <_system_extint_init+0xd8>)
   261fc:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
   261fe:	4b0b      	ldr	r3, [pc, #44]	; (2622c <_system_extint_init+0xdc>)
   26200:	4798      	blx	r3
}
   26202:	46c0      	nop			; (mov r8, r8)
   26204:	46bd      	mov	sp, r7
   26206:	b004      	add	sp, #16
   26208:	bd80      	pop	{r7, pc}
   2620a:	46c0      	nop			; (mov r8, r8)
   2620c:	40001800 	.word	0x40001800
   26210:	0002600d 	.word	0x0002600d
   26214:	00025ff5 	.word	0x00025ff5
   26218:	0002987d 	.word	0x0002987d
   2621c:	000298c1 	.word	0x000298c1
   26220:	00026109 	.word	0x00026109
   26224:	200054e4 	.word	0x200054e4
   26228:	00026091 	.word	0x00026091
   2622c:	00026231 	.word	0x00026231

00026230 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
   26230:	b580      	push	{r7, lr}
   26232:	b082      	sub	sp, #8
   26234:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   26236:	4b15      	ldr	r3, [pc, #84]	; (2628c <_extint_enable+0x5c>)
   26238:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   2623a:	2300      	movs	r3, #0
   2623c:	607b      	str	r3, [r7, #4]
   2623e:	e018      	b.n	26272 <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
   26240:	687b      	ldr	r3, [r7, #4]
   26242:	009b      	lsls	r3, r3, #2
   26244:	2208      	movs	r2, #8
   26246:	4694      	mov	ip, r2
   26248:	44bc      	add	ip, r7
   2624a:	4463      	add	r3, ip
   2624c:	3b08      	subs	r3, #8
   2624e:	681a      	ldr	r2, [r3, #0]
   26250:	687b      	ldr	r3, [r7, #4]
   26252:	009b      	lsls	r3, r3, #2
   26254:	2108      	movs	r1, #8
   26256:	468c      	mov	ip, r1
   26258:	44bc      	add	ip, r7
   2625a:	4463      	add	r3, ip
   2625c:	3b08      	subs	r3, #8
   2625e:	681b      	ldr	r3, [r3, #0]
   26260:	781b      	ldrb	r3, [r3, #0]
   26262:	b2db      	uxtb	r3, r3
   26264:	2102      	movs	r1, #2
   26266:	430b      	orrs	r3, r1
   26268:	b2db      	uxtb	r3, r3
   2626a:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   2626c:	687b      	ldr	r3, [r7, #4]
   2626e:	3301      	adds	r3, #1
   26270:	607b      	str	r3, [r7, #4]
   26272:	687b      	ldr	r3, [r7, #4]
   26274:	2b00      	cmp	r3, #0
   26276:	d0e3      	beq.n	26240 <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
   26278:	46c0      	nop			; (mov r8, r8)
   2627a:	4b05      	ldr	r3, [pc, #20]	; (26290 <_extint_enable+0x60>)
   2627c:	4798      	blx	r3
   2627e:	1e03      	subs	r3, r0, #0
   26280:	d1fb      	bne.n	2627a <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
   26282:	46c0      	nop			; (mov r8, r8)
   26284:	46bd      	mov	sp, r7
   26286:	b002      	add	sp, #8
   26288:	bd80      	pop	{r7, pc}
   2628a:	46c0      	nop			; (mov r8, r8)
   2628c:	40001800 	.word	0x40001800
   26290:	00026109 	.word	0x00026109

00026294 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
   26294:	b580      	push	{r7, lr}
   26296:	b082      	sub	sp, #8
   26298:	af00      	add	r7, sp, #0
   2629a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
   2629c:	687b      	ldr	r3, [r7, #4]
   2629e:	2200      	movs	r2, #0
   262a0:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
   262a2:	687b      	ldr	r3, [r7, #4]
   262a4:	2200      	movs	r2, #0
   262a6:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
   262a8:	687b      	ldr	r3, [r7, #4]
   262aa:	2201      	movs	r2, #1
   262ac:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
   262ae:	687b      	ldr	r3, [r7, #4]
   262b0:	2201      	movs	r2, #1
   262b2:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
   262b4:	687b      	ldr	r3, [r7, #4]
   262b6:	2200      	movs	r2, #0
   262b8:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
   262ba:	687b      	ldr	r3, [r7, #4]
   262bc:	2202      	movs	r2, #2
   262be:	72da      	strb	r2, [r3, #11]
}
   262c0:	46c0      	nop			; (mov r8, r8)
   262c2:	46bd      	mov	sp, r7
   262c4:	b002      	add	sp, #8
   262c6:	bd80      	pop	{r7, pc}

000262c8 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
   262c8:	b580      	push	{r7, lr}
   262ca:	b086      	sub	sp, #24
   262cc:	af00      	add	r7, sp, #0
   262ce:	0002      	movs	r2, r0
   262d0:	6039      	str	r1, [r7, #0]
   262d2:	1dfb      	adds	r3, r7, #7
   262d4:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   262d6:	2308      	movs	r3, #8
   262d8:	18fb      	adds	r3, r7, r3
   262da:	0018      	movs	r0, r3
   262dc:	4b36      	ldr	r3, [pc, #216]	; (263b8 <extint_chan_set_config+0xf0>)
   262de:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
   262e0:	683b      	ldr	r3, [r7, #0]
   262e2:	685b      	ldr	r3, [r3, #4]
   262e4:	b2da      	uxtb	r2, r3
   262e6:	2308      	movs	r3, #8
   262e8:	18fb      	adds	r3, r7, r3
   262ea:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   262ec:	2308      	movs	r3, #8
   262ee:	18fb      	adds	r3, r7, r3
   262f0:	2200      	movs	r2, #0
   262f2:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
   262f4:	683b      	ldr	r3, [r7, #0]
   262f6:	7a1a      	ldrb	r2, [r3, #8]
   262f8:	2308      	movs	r3, #8
   262fa:	18fb      	adds	r3, r7, r3
   262fc:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
   262fe:	683b      	ldr	r3, [r7, #0]
   26300:	681b      	ldr	r3, [r3, #0]
   26302:	b2db      	uxtb	r3, r3
   26304:	2208      	movs	r2, #8
   26306:	18ba      	adds	r2, r7, r2
   26308:	0011      	movs	r1, r2
   2630a:	0018      	movs	r0, r3
   2630c:	4b2b      	ldr	r3, [pc, #172]	; (263bc <extint_chan_set_config+0xf4>)
   2630e:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
   26310:	1dfb      	adds	r3, r7, #7
   26312:	781b      	ldrb	r3, [r3, #0]
   26314:	0018      	movs	r0, r3
   26316:	4b2a      	ldr	r3, [pc, #168]	; (263c0 <extint_chan_set_config+0xf8>)
   26318:	4798      	blx	r3
   2631a:	0003      	movs	r3, r0
   2631c:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
   2631e:	1dfb      	adds	r3, r7, #7
   26320:	781b      	ldrb	r3, [r3, #0]
   26322:	2207      	movs	r2, #7
   26324:	4013      	ands	r3, r2
   26326:	009b      	lsls	r3, r3, #2
   26328:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
   2632a:	683b      	ldr	r3, [r7, #0]
   2632c:	7adb      	ldrb	r3, [r3, #11]
   2632e:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
   26330:	683b      	ldr	r3, [r7, #0]
   26332:	7a9b      	ldrb	r3, [r3, #10]
   26334:	2b00      	cmp	r3, #0
   26336:	d003      	beq.n	26340 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
   26338:	697b      	ldr	r3, [r7, #20]
   2633a:	2208      	movs	r2, #8
   2633c:	4313      	orrs	r3, r2
   2633e:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
   26340:	1dfb      	adds	r3, r7, #7
   26342:	781b      	ldrb	r3, [r3, #0]
   26344:	08db      	lsrs	r3, r3, #3
   26346:	b2db      	uxtb	r3, r3
   26348:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
   2634a:	1dfb      	adds	r3, r7, #7
   2634c:	781b      	ldrb	r3, [r3, #0]
   2634e:	08db      	lsrs	r3, r3, #3
   26350:	b2db      	uxtb	r3, r3
   26352:	001a      	movs	r2, r3
   26354:	693b      	ldr	r3, [r7, #16]
   26356:	3206      	adds	r2, #6
   26358:	0092      	lsls	r2, r2, #2
   2635a:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   2635c:	210f      	movs	r1, #15
   2635e:	68fa      	ldr	r2, [r7, #12]
   26360:	4091      	lsls	r1, r2
   26362:	000a      	movs	r2, r1
   26364:	43d2      	mvns	r2, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   26366:	401a      	ands	r2, r3
			(new_config << config_pos);
   26368:	6979      	ldr	r1, [r7, #20]
   2636a:	68fb      	ldr	r3, [r7, #12]
   2636c:	4099      	lsls	r1, r3
   2636e:	000b      	movs	r3, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   26370:	431a      	orrs	r2, r3
   26372:	0011      	movs	r1, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   26374:	693b      	ldr	r3, [r7, #16]
   26376:	1d82      	adds	r2, r0, #6
   26378:	0092      	lsls	r2, r2, #2
   2637a:	50d1      	str	r1, [r2, r3]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
   2637c:	683b      	ldr	r3, [r7, #0]
   2637e:	7a5b      	ldrb	r3, [r3, #9]
   26380:	2b00      	cmp	r3, #0
   26382:	d00a      	beq.n	2639a <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
   26384:	693b      	ldr	r3, [r7, #16]
   26386:	695a      	ldr	r2, [r3, #20]
   26388:	1dfb      	adds	r3, r7, #7
   2638a:	781b      	ldrb	r3, [r3, #0]
   2638c:	2101      	movs	r1, #1
   2638e:	4099      	lsls	r1, r3
   26390:	000b      	movs	r3, r1
   26392:	431a      	orrs	r2, r3
   26394:	693b      	ldr	r3, [r7, #16]
   26396:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
   26398:	e00a      	b.n	263b0 <extint_chan_set_config+0xe8>
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
   2639a:	693b      	ldr	r3, [r7, #16]
   2639c:	695b      	ldr	r3, [r3, #20]
   2639e:	1dfa      	adds	r2, r7, #7
   263a0:	7812      	ldrb	r2, [r2, #0]
   263a2:	2101      	movs	r1, #1
   263a4:	4091      	lsls	r1, r2
   263a6:	000a      	movs	r2, r1
   263a8:	43d2      	mvns	r2, r2
   263aa:	401a      	ands	r2, r3
   263ac:	693b      	ldr	r3, [r7, #16]
   263ae:	615a      	str	r2, [r3, #20]
}
   263b0:	46c0      	nop			; (mov r8, r8)
   263b2:	46bd      	mov	sp, r7
   263b4:	b006      	add	sp, #24
   263b6:	bd80      	pop	{r7, pc}
   263b8:	00026069 	.word	0x00026069
   263bc:	00029bdd 	.word	0x00029bdd
   263c0:	000260bd 	.word	0x000260bd

000263c4 <system_pinmux_get_config_defaults>:
{
   263c4:	b580      	push	{r7, lr}
   263c6:	b082      	sub	sp, #8
   263c8:	af00      	add	r7, sp, #0
   263ca:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   263cc:	687b      	ldr	r3, [r7, #4]
   263ce:	2280      	movs	r2, #128	; 0x80
   263d0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   263d2:	687b      	ldr	r3, [r7, #4]
   263d4:	2200      	movs	r2, #0
   263d6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   263d8:	687b      	ldr	r3, [r7, #4]
   263da:	2201      	movs	r2, #1
   263dc:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   263de:	687b      	ldr	r3, [r7, #4]
   263e0:	2200      	movs	r2, #0
   263e2:	70da      	strb	r2, [r3, #3]
}
   263e4:	46c0      	nop			; (mov r8, r8)
   263e6:	46bd      	mov	sp, r7
   263e8:	b002      	add	sp, #8
   263ea:	bd80      	pop	{r7, pc}

000263ec <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
   263ec:	b580      	push	{r7, lr}
   263ee:	b084      	sub	sp, #16
   263f0:	af00      	add	r7, sp, #0
   263f2:	0002      	movs	r2, r0
   263f4:	6039      	str	r1, [r7, #0]
   263f6:	1dfb      	adds	r3, r7, #7
   263f8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   263fa:	230c      	movs	r3, #12
   263fc:	18fb      	adds	r3, r7, r3
   263fe:	0018      	movs	r0, r3
   26400:	4b10      	ldr	r3, [pc, #64]	; (26444 <port_pin_set_config+0x58>)
   26402:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
   26404:	230c      	movs	r3, #12
   26406:	18fb      	adds	r3, r7, r3
   26408:	2280      	movs	r2, #128	; 0x80
   2640a:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
   2640c:	683b      	ldr	r3, [r7, #0]
   2640e:	781a      	ldrb	r2, [r3, #0]
   26410:	230c      	movs	r3, #12
   26412:	18fb      	adds	r3, r7, r3
   26414:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
   26416:	683b      	ldr	r3, [r7, #0]
   26418:	785a      	ldrb	r2, [r3, #1]
   2641a:	230c      	movs	r3, #12
   2641c:	18fb      	adds	r3, r7, r3
   2641e:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
   26420:	683b      	ldr	r3, [r7, #0]
   26422:	789a      	ldrb	r2, [r3, #2]
   26424:	230c      	movs	r3, #12
   26426:	18fb      	adds	r3, r7, r3
   26428:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   2642a:	230c      	movs	r3, #12
   2642c:	18fa      	adds	r2, r7, r3
   2642e:	1dfb      	adds	r3, r7, #7
   26430:	781b      	ldrb	r3, [r3, #0]
   26432:	0011      	movs	r1, r2
   26434:	0018      	movs	r0, r3
   26436:	4b04      	ldr	r3, [pc, #16]	; (26448 <port_pin_set_config+0x5c>)
   26438:	4798      	blx	r3
}
   2643a:	46c0      	nop			; (mov r8, r8)
   2643c:	46bd      	mov	sp, r7
   2643e:	b004      	add	sp, #16
   26440:	bd80      	pop	{r7, pc}
   26442:	46c0      	nop			; (mov r8, r8)
   26444:	000263c5 	.word	0x000263c5
   26448:	00029bdd 	.word	0x00029bdd

0002644c <system_gclk_chan_get_config_defaults>:
{
   2644c:	b580      	push	{r7, lr}
   2644e:	b082      	sub	sp, #8
   26450:	af00      	add	r7, sp, #0
   26452:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   26454:	687b      	ldr	r3, [r7, #4]
   26456:	2200      	movs	r2, #0
   26458:	701a      	strb	r2, [r3, #0]
}
   2645a:	46c0      	nop			; (mov r8, r8)
   2645c:	46bd      	mov	sp, r7
   2645e:	b002      	add	sp, #8
   26460:	bd80      	pop	{r7, pc}
	...

00026464 <system_apb_clock_set_mask>:
{
   26464:	b580      	push	{r7, lr}
   26466:	b082      	sub	sp, #8
   26468:	af00      	add	r7, sp, #0
   2646a:	0002      	movs	r2, r0
   2646c:	6039      	str	r1, [r7, #0]
   2646e:	1dfb      	adds	r3, r7, #7
   26470:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   26472:	1dfb      	adds	r3, r7, #7
   26474:	781b      	ldrb	r3, [r3, #0]
   26476:	2b01      	cmp	r3, #1
   26478:	d00a      	beq.n	26490 <system_apb_clock_set_mask+0x2c>
   2647a:	2b02      	cmp	r3, #2
   2647c:	d00f      	beq.n	2649e <system_apb_clock_set_mask+0x3a>
   2647e:	2b00      	cmp	r3, #0
   26480:	d114      	bne.n	264ac <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   26482:	4b0e      	ldr	r3, [pc, #56]	; (264bc <system_apb_clock_set_mask+0x58>)
   26484:	4a0d      	ldr	r2, [pc, #52]	; (264bc <system_apb_clock_set_mask+0x58>)
   26486:	6991      	ldr	r1, [r2, #24]
   26488:	683a      	ldr	r2, [r7, #0]
   2648a:	430a      	orrs	r2, r1
   2648c:	619a      	str	r2, [r3, #24]
			break;
   2648e:	e00f      	b.n	264b0 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   26490:	4b0a      	ldr	r3, [pc, #40]	; (264bc <system_apb_clock_set_mask+0x58>)
   26492:	4a0a      	ldr	r2, [pc, #40]	; (264bc <system_apb_clock_set_mask+0x58>)
   26494:	69d1      	ldr	r1, [r2, #28]
   26496:	683a      	ldr	r2, [r7, #0]
   26498:	430a      	orrs	r2, r1
   2649a:	61da      	str	r2, [r3, #28]
			break;
   2649c:	e008      	b.n	264b0 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   2649e:	4b07      	ldr	r3, [pc, #28]	; (264bc <system_apb_clock_set_mask+0x58>)
   264a0:	4a06      	ldr	r2, [pc, #24]	; (264bc <system_apb_clock_set_mask+0x58>)
   264a2:	6a11      	ldr	r1, [r2, #32]
   264a4:	683a      	ldr	r2, [r7, #0]
   264a6:	430a      	orrs	r2, r1
   264a8:	621a      	str	r2, [r3, #32]
			break;
   264aa:	e001      	b.n	264b0 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   264ac:	2317      	movs	r3, #23
   264ae:	e000      	b.n	264b2 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   264b0:	2300      	movs	r3, #0
}
   264b2:	0018      	movs	r0, r3
   264b4:	46bd      	mov	sp, r7
   264b6:	b002      	add	sp, #8
   264b8:	bd80      	pop	{r7, pc}
   264ba:	46c0      	nop			; (mov r8, r8)
   264bc:	40000400 	.word	0x40000400

000264c0 <system_interrupt_enable>:
{
   264c0:	b580      	push	{r7, lr}
   264c2:	b082      	sub	sp, #8
   264c4:	af00      	add	r7, sp, #0
   264c6:	0002      	movs	r2, r0
   264c8:	1dfb      	adds	r3, r7, #7
   264ca:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   264cc:	4b06      	ldr	r3, [pc, #24]	; (264e8 <system_interrupt_enable+0x28>)
   264ce:	1dfa      	adds	r2, r7, #7
   264d0:	7812      	ldrb	r2, [r2, #0]
   264d2:	0011      	movs	r1, r2
   264d4:	221f      	movs	r2, #31
   264d6:	400a      	ands	r2, r1
   264d8:	2101      	movs	r1, #1
   264da:	4091      	lsls	r1, r2
   264dc:	000a      	movs	r2, r1
   264de:	601a      	str	r2, [r3, #0]
}
   264e0:	46c0      	nop			; (mov r8, r8)
   264e2:	46bd      	mov	sp, r7
   264e4:	b002      	add	sp, #8
   264e6:	bd80      	pop	{r7, pc}
   264e8:	e000e100 	.word	0xe000e100

000264ec <system_interrupt_disable>:
{
   264ec:	b580      	push	{r7, lr}
   264ee:	b082      	sub	sp, #8
   264f0:	af00      	add	r7, sp, #0
   264f2:	0002      	movs	r2, r0
   264f4:	1dfb      	adds	r3, r7, #7
   264f6:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   264f8:	4a07      	ldr	r2, [pc, #28]	; (26518 <system_interrupt_disable+0x2c>)
   264fa:	1dfb      	adds	r3, r7, #7
   264fc:	781b      	ldrb	r3, [r3, #0]
   264fe:	0019      	movs	r1, r3
   26500:	231f      	movs	r3, #31
   26502:	400b      	ands	r3, r1
   26504:	2101      	movs	r1, #1
   26506:	4099      	lsls	r1, r3
   26508:	000b      	movs	r3, r1
   2650a:	0019      	movs	r1, r3
   2650c:	2380      	movs	r3, #128	; 0x80
   2650e:	50d1      	str	r1, [r2, r3]
}
   26510:	46c0      	nop			; (mov r8, r8)
   26512:	46bd      	mov	sp, r7
   26514:	b002      	add	sp, #8
   26516:	bd80      	pop	{r7, pc}
   26518:	e000e100 	.word	0xe000e100

0002651c <rtc_calendar_is_syncing>:
 *
 * \retval false If the module has completed synchronization
 * \retval true If the module synchronization is ongoing
 */
static inline bool rtc_calendar_is_syncing(struct rtc_module *const module)
{
   2651c:	b580      	push	{r7, lr}
   2651e:	b084      	sub	sp, #16
   26520:	af00      	add	r7, sp, #0
   26522:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   26524:	687b      	ldr	r3, [r7, #4]
   26526:	681b      	ldr	r3, [r3, #0]
   26528:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
   2652a:	68fb      	ldr	r3, [r7, #12]
   2652c:	7a9b      	ldrb	r3, [r3, #10]
   2652e:	b2db      	uxtb	r3, r3
   26530:	b25b      	sxtb	r3, r3
   26532:	2b00      	cmp	r3, #0
   26534:	da01      	bge.n	2653a <rtc_calendar_is_syncing+0x1e>
                return true;
   26536:	2301      	movs	r3, #1
   26538:	e000      	b.n	2653c <rtc_calendar_is_syncing+0x20>
        }

        return false;
   2653a:	2300      	movs	r3, #0
}
   2653c:	0018      	movs	r0, r3
   2653e:	46bd      	mov	sp, r7
   26540:	b004      	add	sp, #16
   26542:	bd80      	pop	{r7, pc}

00026544 <rtc_calendar_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_enable(struct rtc_module *const module)
{
   26544:	b580      	push	{r7, lr}
   26546:	b084      	sub	sp, #16
   26548:	af00      	add	r7, sp, #0
   2654a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   2654c:	687b      	ldr	r3, [r7, #4]
   2654e:	681b      	ldr	r3, [r3, #0]
   26550:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
   26552:	2003      	movs	r0, #3
   26554:	4b0a      	ldr	r3, [pc, #40]	; (26580 <rtc_calendar_enable+0x3c>)
   26556:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
   26558:	46c0      	nop			; (mov r8, r8)
   2655a:	687b      	ldr	r3, [r7, #4]
   2655c:	0018      	movs	r0, r3
   2655e:	4b09      	ldr	r3, [pc, #36]	; (26584 <rtc_calendar_enable+0x40>)
   26560:	4798      	blx	r3
   26562:	1e03      	subs	r3, r0, #0
   26564:	d1f9      	bne.n	2655a <rtc_calendar_enable+0x16>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
   26566:	68fb      	ldr	r3, [r7, #12]
   26568:	881b      	ldrh	r3, [r3, #0]
   2656a:	b29b      	uxth	r3, r3
   2656c:	2202      	movs	r2, #2
   2656e:	4313      	orrs	r3, r2
   26570:	b29a      	uxth	r2, r3
   26572:	68fb      	ldr	r3, [r7, #12]
   26574:	801a      	strh	r2, [r3, #0]
}
   26576:	46c0      	nop			; (mov r8, r8)
   26578:	46bd      	mov	sp, r7
   2657a:	b004      	add	sp, #16
   2657c:	bd80      	pop	{r7, pc}
   2657e:	46c0      	nop			; (mov r8, r8)
   26580:	000264c1 	.word	0x000264c1
   26584:	0002651d 	.word	0x0002651d

00026588 <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
   26588:	b580      	push	{r7, lr}
   2658a:	b084      	sub	sp, #16
   2658c:	af00      	add	r7, sp, #0
   2658e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   26590:	687b      	ldr	r3, [r7, #4]
   26592:	681b      	ldr	r3, [r3, #0]
   26594:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
   26596:	2003      	movs	r0, #3
   26598:	4b0d      	ldr	r3, [pc, #52]	; (265d0 <rtc_calendar_disable+0x48>)
   2659a:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
   2659c:	46c0      	nop			; (mov r8, r8)
   2659e:	687b      	ldr	r3, [r7, #4]
   265a0:	0018      	movs	r0, r3
   265a2:	4b0c      	ldr	r3, [pc, #48]	; (265d4 <rtc_calendar_disable+0x4c>)
   265a4:	4798      	blx	r3
   265a6:	1e03      	subs	r3, r0, #0
   265a8:	d1f9      	bne.n	2659e <rtc_calendar_disable+0x16>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
   265aa:	68fb      	ldr	r3, [r7, #12]
   265ac:	22c1      	movs	r2, #193	; 0xc1
   265ae:	719a      	strb	r2, [r3, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
   265b0:	68fb      	ldr	r3, [r7, #12]
   265b2:	22c1      	movs	r2, #193	; 0xc1
   265b4:	721a      	strb	r2, [r3, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
   265b6:	68fb      	ldr	r3, [r7, #12]
   265b8:	881b      	ldrh	r3, [r3, #0]
   265ba:	b29b      	uxth	r3, r3
   265bc:	2202      	movs	r2, #2
   265be:	4393      	bics	r3, r2
   265c0:	b29a      	uxth	r2, r3
   265c2:	68fb      	ldr	r3, [r7, #12]
   265c4:	801a      	strh	r2, [r3, #0]
}
   265c6:	46c0      	nop			; (mov r8, r8)
   265c8:	46bd      	mov	sp, r7
   265ca:	b004      	add	sp, #16
   265cc:	bd80      	pop	{r7, pc}
   265ce:	46c0      	nop			; (mov r8, r8)
   265d0:	000264ed 	.word	0x000264ed
   265d4:	0002651d 	.word	0x0002651d

000265d8 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
   265d8:	b580      	push	{r7, lr}
   265da:	b084      	sub	sp, #16
   265dc:	af00      	add	r7, sp, #0
   265de:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   265e0:	687b      	ldr	r3, [r7, #4]
   265e2:	681b      	ldr	r3, [r3, #0]
   265e4:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
   265e6:	687b      	ldr	r3, [r7, #4]
   265e8:	0018      	movs	r0, r3
   265ea:	4b0d      	ldr	r3, [pc, #52]	; (26620 <rtc_calendar_reset+0x48>)
   265ec:	4798      	blx	r3

#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
   265ee:	687b      	ldr	r3, [r7, #4]
   265f0:	2200      	movs	r2, #0
   265f2:	821a      	strh	r2, [r3, #16]
	module->enabled_callback    = 0;
   265f4:	687b      	ldr	r3, [r7, #4]
   265f6:	2200      	movs	r2, #0
   265f8:	825a      	strh	r2, [r3, #18]
#endif

	while (rtc_calendar_is_syncing(module)) {
   265fa:	46c0      	nop			; (mov r8, r8)
   265fc:	687b      	ldr	r3, [r7, #4]
   265fe:	0018      	movs	r0, r3
   26600:	4b08      	ldr	r3, [pc, #32]	; (26624 <rtc_calendar_reset+0x4c>)
   26602:	4798      	blx	r3
   26604:	1e03      	subs	r3, r0, #0
   26606:	d1f9      	bne.n	265fc <rtc_calendar_reset+0x24>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
   26608:	68fb      	ldr	r3, [r7, #12]
   2660a:	881b      	ldrh	r3, [r3, #0]
   2660c:	b29b      	uxth	r3, r3
   2660e:	2201      	movs	r2, #1
   26610:	4313      	orrs	r3, r2
   26612:	b29a      	uxth	r2, r3
   26614:	68fb      	ldr	r3, [r7, #12]
   26616:	801a      	strh	r2, [r3, #0]
}
   26618:	46c0      	nop			; (mov r8, r8)
   2661a:	46bd      	mov	sp, r7
   2661c:	b004      	add	sp, #16
   2661e:	bd80      	pop	{r7, pc}
   26620:	00026589 	.word	0x00026589
   26624:	0002651d 	.word	0x0002651d

00026628 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
   26628:	b580      	push	{r7, lr}
   2662a:	b084      	sub	sp, #16
   2662c:	af00      	add	r7, sp, #0
   2662e:	6078      	str	r0, [r7, #4]
   26630:	6039      	str	r1, [r7, #0]
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
   26632:	683b      	ldr	r3, [r7, #0]
   26634:	88db      	ldrh	r3, [r3, #6]
   26636:	001a      	movs	r2, r3
   26638:	687b      	ldr	r3, [r7, #4]
   2663a:	88db      	ldrh	r3, [r3, #6]
   2663c:	1ad3      	subs	r3, r2, r3
   2663e:	069b      	lsls	r3, r3, #26
   26640:	60fb      	str	r3, [r7, #12]
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
   26642:	683b      	ldr	r3, [r7, #0]
   26644:	795b      	ldrb	r3, [r3, #5]
   26646:	059b      	lsls	r3, r3, #22
   26648:	001a      	movs	r2, r3
   2664a:	68fb      	ldr	r3, [r7, #12]
   2664c:	4313      	orrs	r3, r2
   2664e:	60fb      	str	r3, [r7, #12]

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
   26650:	683b      	ldr	r3, [r7, #0]
   26652:	791b      	ldrb	r3, [r3, #4]
   26654:	045b      	lsls	r3, r3, #17
   26656:	001a      	movs	r2, r3
   26658:	68fb      	ldr	r3, [r7, #12]
   2665a:	4313      	orrs	r3, r2
   2665c:	60fb      	str	r3, [r7, #12]

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
   2665e:	683b      	ldr	r3, [r7, #0]
   26660:	789b      	ldrb	r3, [r3, #2]
   26662:	031b      	lsls	r3, r3, #12
   26664:	001a      	movs	r2, r3
   26666:	68fb      	ldr	r3, [r7, #12]
   26668:	4313      	orrs	r3, r2
   2666a:	60fb      	str	r3, [r7, #12]

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
   2666c:	687b      	ldr	r3, [r7, #4]
   2666e:	791b      	ldrb	r3, [r3, #4]
   26670:	2201      	movs	r2, #1
   26672:	4053      	eors	r3, r2
   26674:	b2db      	uxtb	r3, r3
   26676:	2b00      	cmp	r3, #0
   26678:	d008      	beq.n	2668c <rtc_calendar_time_to_register_value+0x64>
   2667a:	683b      	ldr	r3, [r7, #0]
   2667c:	78db      	ldrb	r3, [r3, #3]
   2667e:	2b00      	cmp	r3, #0
   26680:	d004      	beq.n	2668c <rtc_calendar_time_to_register_value+0x64>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
   26682:	68fb      	ldr	r3, [r7, #12]
   26684:	2280      	movs	r2, #128	; 0x80
   26686:	0252      	lsls	r2, r2, #9
   26688:	4313      	orrs	r3, r2
   2668a:	60fb      	str	r3, [r7, #12]
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
   2668c:	683b      	ldr	r3, [r7, #0]
   2668e:	785b      	ldrb	r3, [r3, #1]
   26690:	019b      	lsls	r3, r3, #6
   26692:	001a      	movs	r2, r3
   26694:	68fb      	ldr	r3, [r7, #12]
   26696:	4313      	orrs	r3, r2
   26698:	60fb      	str	r3, [r7, #12]

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
   2669a:	683b      	ldr	r3, [r7, #0]
   2669c:	781b      	ldrb	r3, [r3, #0]
   2669e:	001a      	movs	r2, r3
   266a0:	68fb      	ldr	r3, [r7, #12]
   266a2:	4313      	orrs	r3, r2
   266a4:	60fb      	str	r3, [r7, #12]

	return register_value;
   266a6:	68fb      	ldr	r3, [r7, #12]
}
   266a8:	0018      	movs	r0, r3
   266aa:	46bd      	mov	sp, r7
   266ac:	b004      	add	sp, #16
   266ae:	bd80      	pop	{r7, pc}

000266b0 <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
   266b0:	b580      	push	{r7, lr}
   266b2:	b084      	sub	sp, #16
   266b4:	af00      	add	r7, sp, #0
   266b6:	60f8      	str	r0, [r7, #12]
   266b8:	60b9      	str	r1, [r7, #8]
   266ba:	607a      	str	r2, [r7, #4]
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   266bc:	68bb      	ldr	r3, [r7, #8]
   266be:	0e9b      	lsrs	r3, r3, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
   266c0:	b29a      	uxth	r2, r3
   266c2:	68fb      	ldr	r3, [r7, #12]
   266c4:	88db      	ldrh	r3, [r3, #6]
   266c6:	18d3      	adds	r3, r2, r3
   266c8:	b29a      	uxth	r2, r3
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   266ca:	687b      	ldr	r3, [r7, #4]
   266cc:	80da      	strh	r2, [r3, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
   266ce:	68bb      	ldr	r3, [r7, #8]
   266d0:	0d9b      	lsrs	r3, r3, #22
   266d2:	b2db      	uxtb	r3, r3
   266d4:	220f      	movs	r2, #15
   266d6:	4013      	ands	r3, r2
   266d8:	b2da      	uxtb	r2, r3
   266da:	687b      	ldr	r3, [r7, #4]
   266dc:	715a      	strb	r2, [r3, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
   266de:	68bb      	ldr	r3, [r7, #8]
   266e0:	0c5b      	lsrs	r3, r3, #17
   266e2:	b2db      	uxtb	r3, r3
   266e4:	221f      	movs	r2, #31
   266e6:	4013      	ands	r3, r2
   266e8:	b2da      	uxtb	r2, r3
   266ea:	687b      	ldr	r3, [r7, #4]
   266ec:	711a      	strb	r2, [r3, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
   266ee:	68fb      	ldr	r3, [r7, #12]
   266f0:	791b      	ldrb	r3, [r3, #4]
   266f2:	2b00      	cmp	r3, #0
   266f4:	d008      	beq.n	26708 <rtc_calendar_register_value_to_time+0x58>
		/* Set hour in 24h mode. */
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
   266f6:	68bb      	ldr	r3, [r7, #8]
   266f8:	0b1b      	lsrs	r3, r3, #12
   266fa:	b2db      	uxtb	r3, r3
   266fc:	221f      	movs	r2, #31
   266fe:	4013      	ands	r3, r2
   26700:	b2da      	uxtb	r2, r3
   26702:	687b      	ldr	r3, [r7, #4]
   26704:	709a      	strb	r2, [r3, #2]
   26706:	e010      	b.n	2672a <rtc_calendar_register_value_to_time+0x7a>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
   26708:	68bb      	ldr	r3, [r7, #8]
   2670a:	0b1b      	lsrs	r3, r3, #12
   2670c:	b2db      	uxtb	r3, r3
   2670e:	220f      	movs	r2, #15
   26710:	4013      	ands	r3, r2
   26712:	b2da      	uxtb	r2, r3
		time->hour = ((register_value &
   26714:	687b      	ldr	r3, [r7, #4]
   26716:	709a      	strb	r2, [r3, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
   26718:	68ba      	ldr	r2, [r7, #8]
   2671a:	2380      	movs	r3, #128	; 0x80
   2671c:	025b      	lsls	r3, r3, #9
   2671e:	4013      	ands	r3, r2
   26720:	1e5a      	subs	r2, r3, #1
   26722:	4193      	sbcs	r3, r2
   26724:	b2da      	uxtb	r2, r3
   26726:	687b      	ldr	r3, [r7, #4]
   26728:	70da      	strb	r2, [r3, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
   2672a:	68bb      	ldr	r3, [r7, #8]
   2672c:	099b      	lsrs	r3, r3, #6
   2672e:	b2db      	uxtb	r3, r3
   26730:	223f      	movs	r2, #63	; 0x3f
   26732:	4013      	ands	r3, r2
   26734:	b2da      	uxtb	r2, r3
   26736:	687b      	ldr	r3, [r7, #4]
   26738:	705a      	strb	r2, [r3, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
   2673a:	68bb      	ldr	r3, [r7, #8]
   2673c:	b2db      	uxtb	r3, r3
   2673e:	223f      	movs	r2, #63	; 0x3f
   26740:	4013      	ands	r3, r2
   26742:	b2da      	uxtb	r2, r3
   26744:	687b      	ldr	r3, [r7, #4]
   26746:	701a      	strb	r2, [r3, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
   26748:	46c0      	nop			; (mov r8, r8)
   2674a:	46bd      	mov	sp, r7
   2674c:	b004      	add	sp, #16
   2674e:	bd80      	pop	{r7, pc}

00026750 <_rtc_calendar_set_config>:
 * \param[in] config  Pointer to the configuration structure.
 */
static void _rtc_calendar_set_config(
		struct rtc_module *const module,
		const struct rtc_calendar_config *const config)
{
   26750:	b580      	push	{r7, lr}
   26752:	b084      	sub	sp, #16
   26754:	af00      	add	r7, sp, #0
   26756:	6078      	str	r0, [r7, #4]
   26758:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   2675a:	687b      	ldr	r3, [r7, #4]
   2675c:	681b      	ldr	r3, [r3, #0]
   2675e:	60bb      	str	r3, [r7, #8]

	/* Set up temporary register value. */
	uint16_t tmp_reg;

	/* Set to calendar mode and set the prescaler. */
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
   26760:	683b      	ldr	r3, [r7, #0]
   26762:	881a      	ldrh	r2, [r3, #0]
   26764:	230e      	movs	r3, #14
   26766:	18fb      	adds	r3, r7, r3
   26768:	2108      	movs	r1, #8
   2676a:	430a      	orrs	r2, r1
   2676c:	801a      	strh	r2, [r3, #0]

	/* Check clock mode. */
	if (!(config->clock_24h)) {
   2676e:	683b      	ldr	r3, [r7, #0]
   26770:	791b      	ldrb	r3, [r3, #4]
   26772:	2201      	movs	r2, #1
   26774:	4053      	eors	r3, r2
   26776:	b2db      	uxtb	r3, r3
   26778:	2b00      	cmp	r3, #0
   2677a:	d007      	beq.n	2678c <_rtc_calendar_set_config+0x3c>
		/* Set clock mode 12h. */
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
   2677c:	230e      	movs	r3, #14
   2677e:	18fb      	adds	r3, r7, r3
   26780:	220e      	movs	r2, #14
   26782:	18ba      	adds	r2, r7, r2
   26784:	8812      	ldrh	r2, [r2, #0]
   26786:	2140      	movs	r1, #64	; 0x40
   26788:	430a      	orrs	r2, r1
   2678a:	801a      	strh	r2, [r3, #0]
	}

	/* Check for clear on compare match. */
	if (config->clear_on_match) {
   2678c:	683b      	ldr	r3, [r7, #0]
   2678e:	789b      	ldrb	r3, [r3, #2]
   26790:	2b00      	cmp	r3, #0
   26792:	d007      	beq.n	267a4 <_rtc_calendar_set_config+0x54>
		/* Set clear on compare match. */
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
   26794:	230e      	movs	r3, #14
   26796:	18fb      	adds	r3, r7, r3
   26798:	220e      	movs	r2, #14
   2679a:	18ba      	adds	r2, r7, r2
   2679c:	8812      	ldrh	r2, [r2, #0]
   2679e:	2180      	movs	r1, #128	; 0x80
   267a0:	430a      	orrs	r2, r1
   267a2:	801a      	strh	r2, [r3, #0]
	}

	/* Set temporary value to register. */
	rtc_module->MODE2.CTRL.reg = tmp_reg;
   267a4:	68bb      	ldr	r3, [r7, #8]
   267a6:	220e      	movs	r2, #14
   267a8:	18ba      	adds	r2, r7, r2
   267aa:	8812      	ldrh	r2, [r2, #0]
   267ac:	801a      	strh	r2, [r3, #0]

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
   267ae:	683b      	ldr	r3, [r7, #0]
   267b0:	78db      	ldrb	r3, [r3, #3]
   267b2:	2b00      	cmp	r3, #0
   267b4:	d008      	beq.n	267c8 <_rtc_calendar_set_config+0x78>
		/* Set continuously mode. */
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
   267b6:	68bb      	ldr	r3, [r7, #8]
   267b8:	885b      	ldrh	r3, [r3, #2]
   267ba:	b29b      	uxth	r3, r3
   267bc:	2280      	movs	r2, #128	; 0x80
   267be:	01d2      	lsls	r2, r2, #7
   267c0:	4313      	orrs	r3, r2
   267c2:	b29a      	uxth	r2, r3
   267c4:	68bb      	ldr	r3, [r7, #8]
   267c6:	805a      	strh	r2, [r3, #2]
	}

	/* Set alarm time registers. */
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   267c8:	230d      	movs	r3, #13
   267ca:	18fb      	adds	r3, r7, r3
   267cc:	2200      	movs	r2, #0
   267ce:	701a      	strb	r2, [r3, #0]
   267d0:	e017      	b.n	26802 <_rtc_calendar_set_config+0xb2>
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
   267d2:	230d      	movs	r3, #13
   267d4:	18fb      	adds	r3, r7, r3
   267d6:	781a      	ldrb	r2, [r3, #0]
   267d8:	0013      	movs	r3, r2
   267da:	009b      	lsls	r3, r3, #2
   267dc:	189b      	adds	r3, r3, r2
   267de:	005b      	lsls	r3, r3, #1
   267e0:	3308      	adds	r3, #8
   267e2:	683a      	ldr	r2, [r7, #0]
   267e4:	18d1      	adds	r1, r2, r3
   267e6:	230d      	movs	r3, #13
   267e8:	18fb      	adds	r3, r7, r3
   267ea:	781a      	ldrb	r2, [r3, #0]
   267ec:	687b      	ldr	r3, [r7, #4]
   267ee:	0018      	movs	r0, r3
   267f0:	4b08      	ldr	r3, [pc, #32]	; (26814 <_rtc_calendar_set_config+0xc4>)
   267f2:	4798      	blx	r3
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   267f4:	230d      	movs	r3, #13
   267f6:	18fb      	adds	r3, r7, r3
   267f8:	781a      	ldrb	r2, [r3, #0]
   267fa:	230d      	movs	r3, #13
   267fc:	18fb      	adds	r3, r7, r3
   267fe:	3201      	adds	r2, #1
   26800:	701a      	strb	r2, [r3, #0]
   26802:	230d      	movs	r3, #13
   26804:	18fb      	adds	r3, r7, r3
   26806:	781b      	ldrb	r3, [r3, #0]
   26808:	2b00      	cmp	r3, #0
   2680a:	d0e2      	beq.n	267d2 <_rtc_calendar_set_config+0x82>
	}
}
   2680c:	46c0      	nop			; (mov r8, r8)
   2680e:	46bd      	mov	sp, r7
   26810:	b004      	add	sp, #16
   26812:	bd80      	pop	{r7, pc}
   26814:	00026939 	.word	0x00026939

00026818 <rtc_calendar_init>:
 */
void rtc_calendar_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_calendar_config *const config)
{
   26818:	b580      	push	{r7, lr}
   2681a:	b086      	sub	sp, #24
   2681c:	af00      	add	r7, sp, #0
   2681e:	60f8      	str	r0, [r7, #12]
   26820:	60b9      	str	r1, [r7, #8]
   26822:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   26824:	68fb      	ldr	r3, [r7, #12]
   26826:	68ba      	ldr	r2, [r7, #8]
   26828:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
   2682a:	2120      	movs	r1, #32
   2682c:	2000      	movs	r0, #0
   2682e:	4b18      	ldr	r3, [pc, #96]	; (26890 <rtc_calendar_init+0x78>)
   26830:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   26832:	2314      	movs	r3, #20
   26834:	18fb      	adds	r3, r7, r3
   26836:	0018      	movs	r0, r3
   26838:	4b16      	ldr	r3, [pc, #88]	; (26894 <rtc_calendar_init+0x7c>)
   2683a:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
   2683c:	2314      	movs	r3, #20
   2683e:	18fb      	adds	r3, r7, r3
   26840:	2202      	movs	r2, #2
   26842:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
   26844:	2314      	movs	r3, #20
   26846:	18fb      	adds	r3, r7, r3
   26848:	0019      	movs	r1, r3
   2684a:	2004      	movs	r0, #4
   2684c:	4b12      	ldr	r3, [pc, #72]	; (26898 <rtc_calendar_init+0x80>)
   2684e:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
   26850:	2004      	movs	r0, #4
   26852:	4b12      	ldr	r3, [pc, #72]	; (2689c <rtc_calendar_init+0x84>)
   26854:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_calendar_reset(module);
   26856:	68fb      	ldr	r3, [r7, #12]
   26858:	0018      	movs	r0, r3
   2685a:	4b11      	ldr	r3, [pc, #68]	; (268a0 <rtc_calendar_init+0x88>)
   2685c:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->clock_24h           = config->clock_24h;
   2685e:	687b      	ldr	r3, [r7, #4]
   26860:	791a      	ldrb	r2, [r3, #4]
   26862:	68fb      	ldr	r3, [r7, #12]
   26864:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
   26866:	687b      	ldr	r3, [r7, #4]
   26868:	78da      	ldrb	r2, [r3, #3]
   2686a:	68fb      	ldr	r3, [r7, #12]
   2686c:	715a      	strb	r2, [r3, #5]
	module->year_init_value     = config->year_init_value;
   2686e:	687b      	ldr	r3, [r7, #4]
   26870:	88da      	ldrh	r2, [r3, #6]
   26872:	68fb      	ldr	r3, [r7, #12]
   26874:	80da      	strh	r2, [r3, #6]

#if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
   26876:	4b0b      	ldr	r3, [pc, #44]	; (268a4 <rtc_calendar_init+0x8c>)
   26878:	68fa      	ldr	r2, [r7, #12]
   2687a:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#endif

	/* Set config. */
	_rtc_calendar_set_config(module, config);
   2687c:	687a      	ldr	r2, [r7, #4]
   2687e:	68fb      	ldr	r3, [r7, #12]
   26880:	0011      	movs	r1, r2
   26882:	0018      	movs	r0, r3
   26884:	4b08      	ldr	r3, [pc, #32]	; (268a8 <rtc_calendar_init+0x90>)
   26886:	4798      	blx	r3
}
   26888:	46c0      	nop			; (mov r8, r8)
   2688a:	46bd      	mov	sp, r7
   2688c:	b006      	add	sp, #24
   2688e:	bd80      	pop	{r7, pc}
   26890:	00026465 	.word	0x00026465
   26894:	0002644d 	.word	0x0002644d
   26898:	0002987d 	.word	0x0002987d
   2689c:	000298c1 	.word	0x000298c1
   268a0:	000265d9 	.word	0x000265d9
   268a4:	20005524 	.word	0x20005524
   268a8:	00026751 	.word	0x00026751

000268ac <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
   268ac:	b580      	push	{r7, lr}
   268ae:	b084      	sub	sp, #16
   268b0:	af00      	add	r7, sp, #0
   268b2:	6078      	str	r0, [r7, #4]
   268b4:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   268b6:	687b      	ldr	r3, [r7, #4]
   268b8:	681b      	ldr	r3, [r3, #0]
   268ba:	60fb      	str	r3, [r7, #12]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
   268bc:	687b      	ldr	r3, [r7, #4]
   268be:	795b      	ldrb	r3, [r3, #5]
   268c0:	2201      	movs	r2, #1
   268c2:	4053      	eors	r3, r2
   268c4:	b2db      	uxtb	r3, r3
   268c6:	2b00      	cmp	r3, #0
   268c8:	d00a      	beq.n	268e0 <rtc_calendar_get_time+0x34>
		/* Request read on CLOCK register. */
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
   268ca:	68fb      	ldr	r3, [r7, #12]
   268cc:	4a16      	ldr	r2, [pc, #88]	; (26928 <rtc_calendar_get_time+0x7c>)
   268ce:	805a      	strh	r2, [r3, #2]

		while (rtc_calendar_is_syncing(module)) {
   268d0:	46c0      	nop			; (mov r8, r8)
   268d2:	687b      	ldr	r3, [r7, #4]
   268d4:	0018      	movs	r0, r3
   268d6:	4b15      	ldr	r3, [pc, #84]	; (2692c <rtc_calendar_get_time+0x80>)
   268d8:	4798      	blx	r3
   268da:	1e03      	subs	r3, r0, #0
   268dc:	d1f9      	bne.n	268d2 <rtc_calendar_get_time+0x26>
   268de:	e016      	b.n	2690e <rtc_calendar_get_time+0x62>
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
   268e0:	68fb      	ldr	r3, [r7, #12]
   268e2:	885b      	ldrh	r3, [r3, #2]
   268e4:	b29b      	uxth	r3, r3
   268e6:	001a      	movs	r2, r3
   268e8:	2380      	movs	r3, #128	; 0x80
   268ea:	01db      	lsls	r3, r3, #7
   268ec:	4013      	ands	r3, r2
   268ee:	d10e      	bne.n	2690e <rtc_calendar_get_time+0x62>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
   268f0:	68fb      	ldr	r3, [r7, #12]
   268f2:	885b      	ldrh	r3, [r3, #2]
   268f4:	b29b      	uxth	r3, r3
   268f6:	4a0e      	ldr	r2, [pc, #56]	; (26930 <rtc_calendar_get_time+0x84>)
   268f8:	4313      	orrs	r3, r2
   268fa:	b29a      	uxth	r2, r3
   268fc:	68fb      	ldr	r3, [r7, #12]
   268fe:	805a      	strh	r2, [r3, #2]
		 /* wait that the first Read request finishes */
		while (rtc_calendar_is_syncing(module)) {
   26900:	46c0      	nop			; (mov r8, r8)
   26902:	687b      	ldr	r3, [r7, #4]
   26904:	0018      	movs	r0, r3
   26906:	4b09      	ldr	r3, [pc, #36]	; (2692c <rtc_calendar_get_time+0x80>)
   26908:	4798      	blx	r3
   2690a:	1e03      	subs	r3, r0, #0
   2690c:	d1f9      	bne.n	26902 <rtc_calendar_get_time+0x56>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
   2690e:	68fb      	ldr	r3, [r7, #12]
   26910:	691b      	ldr	r3, [r3, #16]
   26912:	60bb      	str	r3, [r7, #8]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
   26914:	683a      	ldr	r2, [r7, #0]
   26916:	68b9      	ldr	r1, [r7, #8]
   26918:	687b      	ldr	r3, [r7, #4]
   2691a:	0018      	movs	r0, r3
   2691c:	4b05      	ldr	r3, [pc, #20]	; (26934 <rtc_calendar_get_time+0x88>)
   2691e:	4798      	blx	r3
}
   26920:	46c0      	nop			; (mov r8, r8)
   26922:	46bd      	mov	sp, r7
   26924:	b004      	add	sp, #16
   26926:	bd80      	pop	{r7, pc}
   26928:	ffff8000 	.word	0xffff8000
   2692c:	0002651d 	.word	0x0002651d
   26930:	ffffc000 	.word	0xffffc000
   26934:	000266b1 	.word	0x000266b1

00026938 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
   26938:	b580      	push	{r7, lr}
   2693a:	b086      	sub	sp, #24
   2693c:	af00      	add	r7, sp, #0
   2693e:	60f8      	str	r0, [r7, #12]
   26940:	60b9      	str	r1, [r7, #8]
   26942:	1dfb      	adds	r3, r7, #7
   26944:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   26946:	68fb      	ldr	r3, [r7, #12]
   26948:	681b      	ldr	r3, [r3, #0]
   2694a:	617b      	str	r3, [r7, #20]

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
   2694c:	1dfb      	adds	r3, r7, #7
   2694e:	781b      	ldrb	r3, [r3, #0]
   26950:	2b01      	cmp	r3, #1
   26952:	d901      	bls.n	26958 <rtc_calendar_set_alarm+0x20>
		return STATUS_ERR_INVALID_ARG;
   26954:	2317      	movs	r3, #23
   26956:	e021      	b.n	2699c <rtc_calendar_set_alarm+0x64>
	}

	/* Get register_value from time. */
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
   26958:	68ba      	ldr	r2, [r7, #8]
   2695a:	68fb      	ldr	r3, [r7, #12]
   2695c:	0011      	movs	r1, r2
   2695e:	0018      	movs	r0, r3
   26960:	4b10      	ldr	r3, [pc, #64]	; (269a4 <rtc_calendar_set_alarm+0x6c>)
   26962:	4798      	blx	r3
   26964:	0003      	movs	r3, r0
   26966:	613b      	str	r3, [r7, #16]

	while (rtc_calendar_is_syncing(module)) {
   26968:	46c0      	nop			; (mov r8, r8)
   2696a:	68fb      	ldr	r3, [r7, #12]
   2696c:	0018      	movs	r0, r3
   2696e:	4b0e      	ldr	r3, [pc, #56]	; (269a8 <rtc_calendar_set_alarm+0x70>)
   26970:	4798      	blx	r3
   26972:	1e03      	subs	r3, r0, #0
   26974:	d1f9      	bne.n	2696a <rtc_calendar_set_alarm+0x32>
		/* Wait for synchronization */
	}

	/* Set alarm value. */
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
   26976:	1dfb      	adds	r3, r7, #7
   26978:	781a      	ldrb	r2, [r3, #0]
   2697a:	697b      	ldr	r3, [r7, #20]
   2697c:	3203      	adds	r2, #3
   2697e:	00d2      	lsls	r2, r2, #3
   26980:	6939      	ldr	r1, [r7, #16]
   26982:	50d1      	str	r1, [r2, r3]

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
   26984:	1dfb      	adds	r3, r7, #7
   26986:	781b      	ldrb	r3, [r3, #0]
   26988:	68ba      	ldr	r2, [r7, #8]
   2698a:	7a11      	ldrb	r1, [r2, #8]
   2698c:	697a      	ldr	r2, [r7, #20]
   2698e:	3303      	adds	r3, #3
   26990:	00db      	lsls	r3, r3, #3
   26992:	18d3      	adds	r3, r2, r3
   26994:	3304      	adds	r3, #4
   26996:	1c0a      	adds	r2, r1, #0
   26998:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
   2699a:	2300      	movs	r3, #0
}
   2699c:	0018      	movs	r0, r3
   2699e:	46bd      	mov	sp, r7
   269a0:	b006      	add	sp, #24
   269a2:	bd80      	pop	{r7, pc}
   269a4:	00026629 	.word	0x00026629
   269a8:	0002651d 	.word	0x0002651d

000269ac <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
   269ac:	b580      	push	{r7, lr}
   269ae:	b086      	sub	sp, #24
   269b0:	af00      	add	r7, sp, #0
   269b2:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
   269b4:	4b28      	ldr	r3, [pc, #160]	; (26a58 <_rtc_interrupt_handler+0xac>)
   269b6:	687a      	ldr	r2, [r7, #4]
   269b8:	0092      	lsls	r2, r2, #2
   269ba:	58d3      	ldr	r3, [r2, r3]
   269bc:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
   269be:	697b      	ldr	r3, [r7, #20]
   269c0:	681b      	ldr	r3, [r3, #0]
   269c2:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
   269c4:	230e      	movs	r3, #14
   269c6:	18fb      	adds	r3, r7, r3
   269c8:	697a      	ldr	r2, [r7, #20]
   269ca:	8a52      	ldrh	r2, [r2, #18]
   269cc:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   269ce:	697b      	ldr	r3, [r7, #20]
   269d0:	8a1b      	ldrh	r3, [r3, #16]
   269d2:	b29a      	uxth	r2, r3
   269d4:	230e      	movs	r3, #14
   269d6:	18fb      	adds	r3, r7, r3
   269d8:	210e      	movs	r1, #14
   269da:	1879      	adds	r1, r7, r1
   269dc:	8809      	ldrh	r1, [r1, #0]
   269de:	400a      	ands	r2, r1
   269e0:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
   269e2:	693b      	ldr	r3, [r7, #16]
   269e4:	7a1b      	ldrb	r3, [r3, #8]
   269e6:	b2da      	uxtb	r2, r3
   269e8:	230c      	movs	r3, #12
   269ea:	18fb      	adds	r3, r7, r3
   269ec:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
   269ee:	693b      	ldr	r3, [r7, #16]
   269f0:	79db      	ldrb	r3, [r3, #7]
   269f2:	b2db      	uxtb	r3, r3
   269f4:	b29a      	uxth	r2, r3
   269f6:	230c      	movs	r3, #12
   269f8:	18fb      	adds	r3, r7, r3
   269fa:	210c      	movs	r1, #12
   269fc:	1879      	adds	r1, r7, r1
   269fe:	8809      	ldrh	r1, [r1, #0]
   26a00:	400a      	ands	r2, r1
   26a02:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
   26a04:	230c      	movs	r3, #12
   26a06:	18fb      	adds	r3, r7, r3
   26a08:	881b      	ldrh	r3, [r3, #0]
   26a0a:	2280      	movs	r2, #128	; 0x80
   26a0c:	4013      	ands	r3, r2
   26a0e:	d00c      	beq.n	26a2a <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
   26a10:	230e      	movs	r3, #14
   26a12:	18fb      	adds	r3, r7, r3
   26a14:	881b      	ldrh	r3, [r3, #0]
   26a16:	2202      	movs	r2, #2
   26a18:	4013      	ands	r3, r2
   26a1a:	d002      	beq.n	26a22 <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
   26a1c:	697b      	ldr	r3, [r7, #20]
   26a1e:	68db      	ldr	r3, [r3, #12]
   26a20:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
   26a22:	693b      	ldr	r3, [r7, #16]
   26a24:	2280      	movs	r2, #128	; 0x80
   26a26:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 3);
		#endif
	}
}
   26a28:	e011      	b.n	26a4e <_rtc_interrupt_handler+0xa2>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
   26a2a:	230c      	movs	r3, #12
   26a2c:	18fb      	adds	r3, r7, r3
   26a2e:	881b      	ldrh	r3, [r3, #0]
   26a30:	2201      	movs	r2, #1
   26a32:	4013      	ands	r3, r2
   26a34:	d00b      	beq.n	26a4e <_rtc_interrupt_handler+0xa2>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
   26a36:	230e      	movs	r3, #14
   26a38:	18fb      	adds	r3, r7, r3
   26a3a:	881b      	ldrh	r3, [r3, #0]
   26a3c:	2201      	movs	r2, #1
   26a3e:	4013      	ands	r3, r2
   26a40:	d002      	beq.n	26a48 <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
   26a42:	697b      	ldr	r3, [r7, #20]
   26a44:	689b      	ldr	r3, [r3, #8]
   26a46:	4798      	blx	r3
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
   26a48:	693b      	ldr	r3, [r7, #16]
   26a4a:	2201      	movs	r2, #1
   26a4c:	721a      	strb	r2, [r3, #8]
}
   26a4e:	46c0      	nop			; (mov r8, r8)
   26a50:	46bd      	mov	sp, r7
   26a52:	b006      	add	sp, #24
   26a54:	bd80      	pop	{r7, pc}
   26a56:	46c0      	nop			; (mov r8, r8)
   26a58:	20005524 	.word	0x20005524

00026a5c <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
   26a5c:	b580      	push	{r7, lr}
   26a5e:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
   26a60:	2000      	movs	r0, #0
   26a62:	4b02      	ldr	r3, [pc, #8]	; (26a6c <RTC_Handler+0x10>)
   26a64:	4798      	blx	r3
}
   26a66:	46c0      	nop			; (mov r8, r8)
   26a68:	46bd      	mov	sp, r7
   26a6a:	bd80      	pop	{r7, pc}
   26a6c:	000269ad 	.word	0x000269ad

00026a70 <system_gclk_chan_get_config_defaults>:
{
   26a70:	b580      	push	{r7, lr}
   26a72:	b082      	sub	sp, #8
   26a74:	af00      	add	r7, sp, #0
   26a76:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   26a78:	687b      	ldr	r3, [r7, #4]
   26a7a:	2200      	movs	r2, #0
   26a7c:	701a      	strb	r2, [r3, #0]
}
   26a7e:	46c0      	nop			; (mov r8, r8)
   26a80:	46bd      	mov	sp, r7
   26a82:	b002      	add	sp, #8
   26a84:	bd80      	pop	{r7, pc}

00026a86 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
   26a86:	b5f0      	push	{r4, r5, r6, r7, lr}
   26a88:	b08d      	sub	sp, #52	; 0x34
   26a8a:	af00      	add	r7, sp, #0
   26a8c:	60b8      	str	r0, [r7, #8]
   26a8e:	60f9      	str	r1, [r7, #12]
   26a90:	603a      	str	r2, [r7, #0]
   26a92:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
   26a94:	2300      	movs	r3, #0
   26a96:	2400      	movs	r4, #0
   26a98:	623b      	str	r3, [r7, #32]
   26a9a:	627c      	str	r4, [r7, #36]	; 0x24
   26a9c:	2300      	movs	r3, #0
   26a9e:	2400      	movs	r4, #0
   26aa0:	61bb      	str	r3, [r7, #24]
   26aa2:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
   26aa4:	233f      	movs	r3, #63	; 0x3f
   26aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
   26aa8:	e053      	b.n	26b52 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
   26aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   26aac:	3b20      	subs	r3, #32
   26aae:	2b00      	cmp	r3, #0
   26ab0:	db04      	blt.n	26abc <long_division+0x36>
   26ab2:	2201      	movs	r2, #1
   26ab4:	409a      	lsls	r2, r3
   26ab6:	0013      	movs	r3, r2
   26ab8:	617b      	str	r3, [r7, #20]
   26aba:	e00b      	b.n	26ad4 <long_division+0x4e>
   26abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   26abe:	2220      	movs	r2, #32
   26ac0:	1ad3      	subs	r3, r2, r3
   26ac2:	2201      	movs	r2, #1
   26ac4:	40da      	lsrs	r2, r3
   26ac6:	0013      	movs	r3, r2
   26ac8:	2100      	movs	r1, #0
   26aca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   26acc:	4091      	lsls	r1, r2
   26ace:	000a      	movs	r2, r1
   26ad0:	4313      	orrs	r3, r2
   26ad2:	617b      	str	r3, [r7, #20]
   26ad4:	2201      	movs	r2, #1
   26ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   26ad8:	409a      	lsls	r2, r3
   26ada:	0013      	movs	r3, r2
   26adc:	613b      	str	r3, [r7, #16]

		r = r << 1;
   26ade:	69bb      	ldr	r3, [r7, #24]
   26ae0:	69fc      	ldr	r4, [r7, #28]
   26ae2:	18db      	adds	r3, r3, r3
   26ae4:	4164      	adcs	r4, r4
   26ae6:	61bb      	str	r3, [r7, #24]
   26ae8:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
   26aea:	68bb      	ldr	r3, [r7, #8]
   26aec:	693a      	ldr	r2, [r7, #16]
   26aee:	401a      	ands	r2, r3
   26af0:	0015      	movs	r5, r2
   26af2:	68fb      	ldr	r3, [r7, #12]
   26af4:	697a      	ldr	r2, [r7, #20]
   26af6:	401a      	ands	r2, r3
   26af8:	0016      	movs	r6, r2
   26afa:	002b      	movs	r3, r5
   26afc:	4333      	orrs	r3, r6
   26afe:	d007      	beq.n	26b10 <long_division+0x8a>
			r |= 0x01;
   26b00:	69bb      	ldr	r3, [r7, #24]
   26b02:	2201      	movs	r2, #1
   26b04:	4313      	orrs	r3, r2
   26b06:	61bb      	str	r3, [r7, #24]
   26b08:	69fb      	ldr	r3, [r7, #28]
   26b0a:	2200      	movs	r2, #0
   26b0c:	4313      	orrs	r3, r2
   26b0e:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
   26b10:	687a      	ldr	r2, [r7, #4]
   26b12:	69fb      	ldr	r3, [r7, #28]
   26b14:	429a      	cmp	r2, r3
   26b16:	d819      	bhi.n	26b4c <long_division+0xc6>
   26b18:	687a      	ldr	r2, [r7, #4]
   26b1a:	69fb      	ldr	r3, [r7, #28]
   26b1c:	429a      	cmp	r2, r3
   26b1e:	d103      	bne.n	26b28 <long_division+0xa2>
   26b20:	683a      	ldr	r2, [r7, #0]
   26b22:	69bb      	ldr	r3, [r7, #24]
   26b24:	429a      	cmp	r2, r3
   26b26:	d811      	bhi.n	26b4c <long_division+0xc6>
			r = r - d;
   26b28:	69b9      	ldr	r1, [r7, #24]
   26b2a:	69fa      	ldr	r2, [r7, #28]
   26b2c:	683b      	ldr	r3, [r7, #0]
   26b2e:	687c      	ldr	r4, [r7, #4]
   26b30:	1ac9      	subs	r1, r1, r3
   26b32:	41a2      	sbcs	r2, r4
   26b34:	000b      	movs	r3, r1
   26b36:	0014      	movs	r4, r2
   26b38:	61bb      	str	r3, [r7, #24]
   26b3a:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
   26b3c:	6a3a      	ldr	r2, [r7, #32]
   26b3e:	693b      	ldr	r3, [r7, #16]
   26b40:	4313      	orrs	r3, r2
   26b42:	623b      	str	r3, [r7, #32]
   26b44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   26b46:	697b      	ldr	r3, [r7, #20]
   26b48:	4313      	orrs	r3, r2
   26b4a:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
   26b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   26b4e:	3b01      	subs	r3, #1
   26b50:	62fb      	str	r3, [r7, #44]	; 0x2c
   26b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   26b54:	2b00      	cmp	r3, #0
   26b56:	daa8      	bge.n	26aaa <long_division+0x24>
		}
	}

	return q;
   26b58:	6a3b      	ldr	r3, [r7, #32]
   26b5a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
   26b5c:	0018      	movs	r0, r3
   26b5e:	0021      	movs	r1, r4
   26b60:	46bd      	mov	sp, r7
   26b62:	b00d      	add	sp, #52	; 0x34
   26b64:	bdf0      	pop	{r4, r5, r6, r7, pc}

00026b66 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
   26b66:	b580      	push	{r7, lr}
   26b68:	b086      	sub	sp, #24
   26b6a:	af00      	add	r7, sp, #0
   26b6c:	60f8      	str	r0, [r7, #12]
   26b6e:	60b9      	str	r1, [r7, #8]
   26b70:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
   26b72:	2316      	movs	r3, #22
   26b74:	18fb      	adds	r3, r7, r3
   26b76:	2200      	movs	r2, #0
   26b78:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
   26b7a:	68bb      	ldr	r3, [r7, #8]
   26b7c:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
   26b7e:	68bb      	ldr	r3, [r7, #8]
   26b80:	085a      	lsrs	r2, r3, #1
   26b82:	68fb      	ldr	r3, [r7, #12]
   26b84:	429a      	cmp	r2, r3
   26b86:	d201      	bcs.n	26b8c <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   26b88:	2340      	movs	r3, #64	; 0x40
   26b8a:	e026      	b.n	26bda <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
   26b8c:	68bb      	ldr	r3, [r7, #8]
   26b8e:	085b      	lsrs	r3, r3, #1
   26b90:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
   26b92:	e00a      	b.n	26baa <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
   26b94:	693a      	ldr	r2, [r7, #16]
   26b96:	68fb      	ldr	r3, [r7, #12]
   26b98:	1ad3      	subs	r3, r2, r3
   26b9a:	613b      	str	r3, [r7, #16]
		baud_calculated++;
   26b9c:	2316      	movs	r3, #22
   26b9e:	18fb      	adds	r3, r7, r3
   26ba0:	881a      	ldrh	r2, [r3, #0]
   26ba2:	2316      	movs	r3, #22
   26ba4:	18fb      	adds	r3, r7, r3
   26ba6:	3201      	adds	r2, #1
   26ba8:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
   26baa:	693a      	ldr	r2, [r7, #16]
   26bac:	68fb      	ldr	r3, [r7, #12]
   26bae:	429a      	cmp	r2, r3
   26bb0:	d2f0      	bcs.n	26b94 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
   26bb2:	2316      	movs	r3, #22
   26bb4:	18fb      	adds	r3, r7, r3
   26bb6:	2216      	movs	r2, #22
   26bb8:	18ba      	adds	r2, r7, r2
   26bba:	8812      	ldrh	r2, [r2, #0]
   26bbc:	3a01      	subs	r2, #1
   26bbe:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
   26bc0:	2316      	movs	r3, #22
   26bc2:	18fb      	adds	r3, r7, r3
   26bc4:	881b      	ldrh	r3, [r3, #0]
   26bc6:	2bff      	cmp	r3, #255	; 0xff
   26bc8:	d901      	bls.n	26bce <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   26bca:	2340      	movs	r3, #64	; 0x40
   26bcc:	e005      	b.n	26bda <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
   26bce:	687b      	ldr	r3, [r7, #4]
   26bd0:	2216      	movs	r2, #22
   26bd2:	18ba      	adds	r2, r7, r2
   26bd4:	8812      	ldrh	r2, [r2, #0]
   26bd6:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
   26bd8:	2300      	movs	r3, #0
	}
}
   26bda:	0018      	movs	r0, r3
   26bdc:	46bd      	mov	sp, r7
   26bde:	b006      	add	sp, #24
   26be0:	bd80      	pop	{r7, pc}
	...

00026be4 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
   26be4:	b5f0      	push	{r4, r5, r6, r7, lr}
   26be6:	b0a1      	sub	sp, #132	; 0x84
   26be8:	af00      	add	r7, sp, #0
   26bea:	64f8      	str	r0, [r7, #76]	; 0x4c
   26bec:	64b9      	str	r1, [r7, #72]	; 0x48
   26bee:	647a      	str	r2, [r7, #68]	; 0x44
   26bf0:	2243      	movs	r2, #67	; 0x43
   26bf2:	18ba      	adds	r2, r7, r2
   26bf4:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
   26bf6:	2300      	movs	r3, #0
   26bf8:	2400      	movs	r4, #0
   26bfa:	673b      	str	r3, [r7, #112]	; 0x70
   26bfc:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
   26bfe:	2300      	movs	r3, #0
   26c00:	2400      	movs	r4, #0
   26c02:	66bb      	str	r3, [r7, #104]	; 0x68
   26c04:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
   26c06:	2300      	movs	r3, #0
   26c08:	2400      	movs	r4, #0
   26c0a:	67bb      	str	r3, [r7, #120]	; 0x78
   26c0c:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
   26c0e:	2300      	movs	r3, #0
   26c10:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
   26c12:	2358      	movs	r3, #88	; 0x58
   26c14:	2240      	movs	r2, #64	; 0x40
   26c16:	4694      	mov	ip, r2
   26c18:	44bc      	add	ip, r7
   26c1a:	4463      	add	r3, ip
   26c1c:	781a      	ldrb	r2, [r3, #0]
   26c1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   26c20:	435a      	muls	r2, r3
   26c22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   26c24:	429a      	cmp	r2, r3
   26c26:	d901      	bls.n	26c2c <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   26c28:	2340      	movs	r3, #64	; 0x40
   26c2a:	e0b3      	b.n	26d94 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
   26c2c:	2343      	movs	r3, #67	; 0x43
   26c2e:	18fb      	adds	r3, r7, r3
   26c30:	781b      	ldrb	r3, [r3, #0]
   26c32:	2b00      	cmp	r3, #0
   26c34:	d13d      	bne.n	26cb2 <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
   26c36:	2358      	movs	r3, #88	; 0x58
   26c38:	2240      	movs	r2, #64	; 0x40
   26c3a:	4694      	mov	ip, r2
   26c3c:	44bc      	add	ip, r7
   26c3e:	4463      	add	r3, ip
   26c40:	781b      	ldrb	r3, [r3, #0]
   26c42:	b2db      	uxtb	r3, r3
   26c44:	613b      	str	r3, [r7, #16]
   26c46:	2300      	movs	r3, #0
   26c48:	617b      	str	r3, [r7, #20]
   26c4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   26c4c:	60bb      	str	r3, [r7, #8]
   26c4e:	2300      	movs	r3, #0
   26c50:	60fb      	str	r3, [r7, #12]
   26c52:	4c52      	ldr	r4, [pc, #328]	; (26d9c <_sercom_get_async_baud_val+0x1b8>)
   26c54:	68ba      	ldr	r2, [r7, #8]
   26c56:	68fb      	ldr	r3, [r7, #12]
   26c58:	6938      	ldr	r0, [r7, #16]
   26c5a:	6979      	ldr	r1, [r7, #20]
   26c5c:	47a0      	blx	r4
   26c5e:	0003      	movs	r3, r0
   26c60:	000c      	movs	r4, r1
   26c62:	001b      	movs	r3, r3
   26c64:	65fb      	str	r3, [r7, #92]	; 0x5c
   26c66:	2300      	movs	r3, #0
   26c68:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
   26c6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   26c6c:	603b      	str	r3, [r7, #0]
   26c6e:	2300      	movs	r3, #0
   26c70:	607b      	str	r3, [r7, #4]
   26c72:	6db8      	ldr	r0, [r7, #88]	; 0x58
   26c74:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   26c76:	683a      	ldr	r2, [r7, #0]
   26c78:	687b      	ldr	r3, [r7, #4]
   26c7a:	4c49      	ldr	r4, [pc, #292]	; (26da0 <_sercom_get_async_baud_val+0x1bc>)
   26c7c:	47a0      	blx	r4
   26c7e:	0003      	movs	r3, r0
   26c80:	000c      	movs	r4, r1
   26c82:	673b      	str	r3, [r7, #112]	; 0x70
   26c84:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
   26c86:	2100      	movs	r1, #0
   26c88:	2201      	movs	r2, #1
   26c8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   26c8c:	6f7c      	ldr	r4, [r7, #116]	; 0x74
   26c8e:	1ac9      	subs	r1, r1, r3
   26c90:	41a2      	sbcs	r2, r4
   26c92:	000b      	movs	r3, r1
   26c94:	0014      	movs	r4, r2
   26c96:	66bb      	str	r3, [r7, #104]	; 0x68
   26c98:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
   26c9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   26c9c:	0c1b      	lsrs	r3, r3, #16
   26c9e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   26ca0:	0416      	lsls	r6, r2, #16
   26ca2:	431e      	orrs	r6, r3
   26ca4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   26ca6:	041d      	lsls	r5, r3, #16
   26ca8:	0033      	movs	r3, r6
   26caa:	67bb      	str	r3, [r7, #120]	; 0x78
   26cac:	2300      	movs	r3, #0
   26cae:	67fb      	str	r3, [r7, #124]	; 0x7c
   26cb0:	e06a      	b.n	26d88 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
   26cb2:	2343      	movs	r3, #67	; 0x43
   26cb4:	18fb      	adds	r3, r7, r3
   26cb6:	781b      	ldrb	r3, [r3, #0]
   26cb8:	2b01      	cmp	r3, #1
   26cba:	d165      	bne.n	26d88 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
   26cbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   26cbe:	633b      	str	r3, [r7, #48]	; 0x30
   26cc0:	2300      	movs	r3, #0
   26cc2:	637b      	str	r3, [r7, #52]	; 0x34
   26cc4:	2358      	movs	r3, #88	; 0x58
   26cc6:	2240      	movs	r2, #64	; 0x40
   26cc8:	4694      	mov	ip, r2
   26cca:	44bc      	add	ip, r7
   26ccc:	4463      	add	r3, ip
   26cce:	781b      	ldrb	r3, [r3, #0]
   26cd0:	b2db      	uxtb	r3, r3
   26cd2:	62bb      	str	r3, [r7, #40]	; 0x28
   26cd4:	2300      	movs	r3, #0
   26cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
   26cd8:	4c30      	ldr	r4, [pc, #192]	; (26d9c <_sercom_get_async_baud_val+0x1b8>)
   26cda:	6aba      	ldr	r2, [r7, #40]	; 0x28
   26cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   26cde:	6b38      	ldr	r0, [r7, #48]	; 0x30
   26ce0:	6b79      	ldr	r1, [r7, #52]	; 0x34
   26ce2:	47a0      	blx	r4
   26ce4:	0003      	movs	r3, r0
   26ce6:	000c      	movs	r4, r1
   26ce8:	65bb      	str	r3, [r7, #88]	; 0x58
   26cea:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
   26cec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   26cee:	623b      	str	r3, [r7, #32]
   26cf0:	2300      	movs	r3, #0
   26cf2:	627b      	str	r3, [r7, #36]	; 0x24
   26cf4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   26cf6:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   26cf8:	001a      	movs	r2, r3
   26cfa:	0023      	movs	r3, r4
   26cfc:	6a38      	ldr	r0, [r7, #32]
   26cfe:	6a79      	ldr	r1, [r7, #36]	; 0x24
   26d00:	4c27      	ldr	r4, [pc, #156]	; (26da0 <_sercom_get_async_baud_val+0x1bc>)
   26d02:	47a0      	blx	r4
   26d04:	0003      	movs	r3, r0
   26d06:	000c      	movs	r4, r1
   26d08:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
   26d0a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   26d0c:	2380      	movs	r3, #128	; 0x80
   26d0e:	019b      	lsls	r3, r3, #6
   26d10:	429a      	cmp	r2, r3
   26d12:	d901      	bls.n	26d18 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   26d14:	2340      	movs	r3, #64	; 0x40
   26d16:	e03d      	b.n	26d94 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
   26d18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   26d1a:	61bb      	str	r3, [r7, #24]
   26d1c:	2300      	movs	r3, #0
   26d1e:	61fb      	str	r3, [r7, #28]
   26d20:	69b9      	ldr	r1, [r7, #24]
   26d22:	69fa      	ldr	r2, [r7, #28]
   26d24:	000b      	movs	r3, r1
   26d26:	0f5b      	lsrs	r3, r3, #29
   26d28:	0010      	movs	r0, r2
   26d2a:	00c0      	lsls	r0, r0, #3
   26d2c:	63f8      	str	r0, [r7, #60]	; 0x3c
   26d2e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   26d30:	4318      	orrs	r0, r3
   26d32:	63f8      	str	r0, [r7, #60]	; 0x3c
   26d34:	000b      	movs	r3, r1
   26d36:	00db      	lsls	r3, r3, #3
   26d38:	63bb      	str	r3, [r7, #56]	; 0x38
   26d3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   26d3c:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   26d3e:	001a      	movs	r2, r3
   26d40:	0023      	movs	r3, r4
   26d42:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   26d44:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   26d46:	4c16      	ldr	r4, [pc, #88]	; (26da0 <_sercom_get_async_baud_val+0x1bc>)
   26d48:	47a0      	blx	r4
   26d4a:	0003      	movs	r3, r0
   26d4c:	000c      	movs	r4, r1
   26d4e:	65bb      	str	r3, [r7, #88]	; 0x58
   26d50:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
   26d52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   26d54:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   26d56:	b2d9      	uxtb	r1, r3
   26d58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   26d5a:	b2db      	uxtb	r3, r3
   26d5c:	00db      	lsls	r3, r3, #3
   26d5e:	b2da      	uxtb	r2, r3
   26d60:	2317      	movs	r3, #23
   26d62:	2040      	movs	r0, #64	; 0x40
   26d64:	4684      	mov	ip, r0
   26d66:	44bc      	add	ip, r7
   26d68:	4463      	add	r3, ip
   26d6a:	1a8a      	subs	r2, r1, r2
   26d6c:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
   26d6e:	2317      	movs	r3, #23
   26d70:	2240      	movs	r2, #64	; 0x40
   26d72:	4694      	mov	ip, r2
   26d74:	44bc      	add	ip, r7
   26d76:	4463      	add	r3, ip
   26d78:	781b      	ldrb	r3, [r3, #0]
   26d7a:	035b      	lsls	r3, r3, #13
   26d7c:	001a      	movs	r2, r3
   26d7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   26d80:	4313      	orrs	r3, r2
   26d82:	67bb      	str	r3, [r7, #120]	; 0x78
   26d84:	2300      	movs	r3, #0
   26d86:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
   26d88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   26d8a:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
   26d8c:	b29a      	uxth	r2, r3
   26d8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   26d90:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
   26d92:	2300      	movs	r3, #0
}
   26d94:	0018      	movs	r0, r3
   26d96:	46bd      	mov	sp, r7
   26d98:	b021      	add	sp, #132	; 0x84
   26d9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26d9c:	000326b5 	.word	0x000326b5
   26da0:	00026a87 	.word	0x00026a87

00026da4 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
   26da4:	b580      	push	{r7, lr}
   26da6:	b084      	sub	sp, #16
   26da8:	af00      	add	r7, sp, #0
   26daa:	0002      	movs	r2, r0
   26dac:	1dfb      	adds	r3, r7, #7
   26dae:	701a      	strb	r2, [r3, #0]
   26db0:	1dbb      	adds	r3, r7, #6
   26db2:	1c0a      	adds	r2, r1, #0
   26db4:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
   26db6:	4b1a      	ldr	r3, [pc, #104]	; (26e20 <sercom_set_gclk_generator+0x7c>)
   26db8:	781b      	ldrb	r3, [r3, #0]
   26dba:	2201      	movs	r2, #1
   26dbc:	4053      	eors	r3, r2
   26dbe:	b2db      	uxtb	r3, r3
   26dc0:	2b00      	cmp	r3, #0
   26dc2:	d103      	bne.n	26dcc <sercom_set_gclk_generator+0x28>
   26dc4:	1dbb      	adds	r3, r7, #6
   26dc6:	781b      	ldrb	r3, [r3, #0]
   26dc8:	2b00      	cmp	r3, #0
   26dca:	d01b      	beq.n	26e04 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   26dcc:	230c      	movs	r3, #12
   26dce:	18fb      	adds	r3, r7, r3
   26dd0:	0018      	movs	r0, r3
   26dd2:	4b14      	ldr	r3, [pc, #80]	; (26e24 <sercom_set_gclk_generator+0x80>)
   26dd4:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
   26dd6:	230c      	movs	r3, #12
   26dd8:	18fb      	adds	r3, r7, r3
   26dda:	1dfa      	adds	r2, r7, #7
   26ddc:	7812      	ldrb	r2, [r2, #0]
   26dde:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
   26de0:	230c      	movs	r3, #12
   26de2:	18fb      	adds	r3, r7, r3
   26de4:	0019      	movs	r1, r3
   26de6:	2013      	movs	r0, #19
   26de8:	4b0f      	ldr	r3, [pc, #60]	; (26e28 <sercom_set_gclk_generator+0x84>)
   26dea:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
   26dec:	2013      	movs	r0, #19
   26dee:	4b0f      	ldr	r3, [pc, #60]	; (26e2c <sercom_set_gclk_generator+0x88>)
   26df0:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
   26df2:	4b0b      	ldr	r3, [pc, #44]	; (26e20 <sercom_set_gclk_generator+0x7c>)
   26df4:	1dfa      	adds	r2, r7, #7
   26df6:	7812      	ldrb	r2, [r2, #0]
   26df8:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
   26dfa:	4b09      	ldr	r3, [pc, #36]	; (26e20 <sercom_set_gclk_generator+0x7c>)
   26dfc:	2201      	movs	r2, #1
   26dfe:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
   26e00:	2300      	movs	r3, #0
   26e02:	e008      	b.n	26e16 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
   26e04:	4b06      	ldr	r3, [pc, #24]	; (26e20 <sercom_set_gclk_generator+0x7c>)
   26e06:	785b      	ldrb	r3, [r3, #1]
   26e08:	1dfa      	adds	r2, r7, #7
   26e0a:	7812      	ldrb	r2, [r2, #0]
   26e0c:	429a      	cmp	r2, r3
   26e0e:	d101      	bne.n	26e14 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
   26e10:	2300      	movs	r3, #0
   26e12:	e000      	b.n	26e16 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
   26e14:	231d      	movs	r3, #29
}
   26e16:	0018      	movs	r0, r3
   26e18:	46bd      	mov	sp, r7
   26e1a:	b004      	add	sp, #16
   26e1c:	bd80      	pop	{r7, pc}
   26e1e:	46c0      	nop			; (mov r8, r8)
   26e20:	20003cdc 	.word	0x20003cdc
   26e24:	00026a71 	.word	0x00026a71
   26e28:	0002987d 	.word	0x0002987d
   26e2c:	000298c1 	.word	0x000298c1

00026e30 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
   26e30:	b580      	push	{r7, lr}
   26e32:	b082      	sub	sp, #8
   26e34:	af00      	add	r7, sp, #0
   26e36:	6078      	str	r0, [r7, #4]
   26e38:	000a      	movs	r2, r1
   26e3a:	1cfb      	adds	r3, r7, #3
   26e3c:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
   26e3e:	687b      	ldr	r3, [r7, #4]
   26e40:	4a4d      	ldr	r2, [pc, #308]	; (26f78 <_sercom_get_default_pad+0x148>)
   26e42:	4293      	cmp	r3, r2
   26e44:	d03f      	beq.n	26ec6 <_sercom_get_default_pad+0x96>
   26e46:	4a4c      	ldr	r2, [pc, #304]	; (26f78 <_sercom_get_default_pad+0x148>)
   26e48:	4293      	cmp	r3, r2
   26e4a:	d806      	bhi.n	26e5a <_sercom_get_default_pad+0x2a>
   26e4c:	4a4b      	ldr	r2, [pc, #300]	; (26f7c <_sercom_get_default_pad+0x14c>)
   26e4e:	4293      	cmp	r3, r2
   26e50:	d00f      	beq.n	26e72 <_sercom_get_default_pad+0x42>
   26e52:	4a4b      	ldr	r2, [pc, #300]	; (26f80 <_sercom_get_default_pad+0x150>)
   26e54:	4293      	cmp	r3, r2
   26e56:	d021      	beq.n	26e9c <_sercom_get_default_pad+0x6c>
   26e58:	e089      	b.n	26f6e <_sercom_get_default_pad+0x13e>
   26e5a:	4a4a      	ldr	r2, [pc, #296]	; (26f84 <_sercom_get_default_pad+0x154>)
   26e5c:	4293      	cmp	r3, r2
   26e5e:	d100      	bne.n	26e62 <_sercom_get_default_pad+0x32>
   26e60:	e05b      	b.n	26f1a <_sercom_get_default_pad+0xea>
   26e62:	4a49      	ldr	r2, [pc, #292]	; (26f88 <_sercom_get_default_pad+0x158>)
   26e64:	4293      	cmp	r3, r2
   26e66:	d100      	bne.n	26e6a <_sercom_get_default_pad+0x3a>
   26e68:	e06c      	b.n	26f44 <_sercom_get_default_pad+0x114>
   26e6a:	4a48      	ldr	r2, [pc, #288]	; (26f8c <_sercom_get_default_pad+0x15c>)
   26e6c:	4293      	cmp	r3, r2
   26e6e:	d03f      	beq.n	26ef0 <_sercom_get_default_pad+0xc0>
   26e70:	e07d      	b.n	26f6e <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   26e72:	1cfb      	adds	r3, r7, #3
   26e74:	781b      	ldrb	r3, [r3, #0]
   26e76:	2b01      	cmp	r3, #1
   26e78:	d00a      	beq.n	26e90 <_sercom_get_default_pad+0x60>
   26e7a:	dc02      	bgt.n	26e82 <_sercom_get_default_pad+0x52>
   26e7c:	2b00      	cmp	r3, #0
   26e7e:	d005      	beq.n	26e8c <_sercom_get_default_pad+0x5c>
   26e80:	e075      	b.n	26f6e <_sercom_get_default_pad+0x13e>
   26e82:	2b02      	cmp	r3, #2
   26e84:	d006      	beq.n	26e94 <_sercom_get_default_pad+0x64>
   26e86:	2b03      	cmp	r3, #3
   26e88:	d006      	beq.n	26e98 <_sercom_get_default_pad+0x68>
   26e8a:	e070      	b.n	26f6e <_sercom_get_default_pad+0x13e>
   26e8c:	4b40      	ldr	r3, [pc, #256]	; (26f90 <_sercom_get_default_pad+0x160>)
   26e8e:	e06f      	b.n	26f70 <_sercom_get_default_pad+0x140>
   26e90:	4b40      	ldr	r3, [pc, #256]	; (26f94 <_sercom_get_default_pad+0x164>)
   26e92:	e06d      	b.n	26f70 <_sercom_get_default_pad+0x140>
   26e94:	4b40      	ldr	r3, [pc, #256]	; (26f98 <_sercom_get_default_pad+0x168>)
   26e96:	e06b      	b.n	26f70 <_sercom_get_default_pad+0x140>
   26e98:	4b40      	ldr	r3, [pc, #256]	; (26f9c <_sercom_get_default_pad+0x16c>)
   26e9a:	e069      	b.n	26f70 <_sercom_get_default_pad+0x140>
   26e9c:	1cfb      	adds	r3, r7, #3
   26e9e:	781b      	ldrb	r3, [r3, #0]
   26ea0:	2b01      	cmp	r3, #1
   26ea2:	d00a      	beq.n	26eba <_sercom_get_default_pad+0x8a>
   26ea4:	dc02      	bgt.n	26eac <_sercom_get_default_pad+0x7c>
   26ea6:	2b00      	cmp	r3, #0
   26ea8:	d005      	beq.n	26eb6 <_sercom_get_default_pad+0x86>
   26eaa:	e060      	b.n	26f6e <_sercom_get_default_pad+0x13e>
   26eac:	2b02      	cmp	r3, #2
   26eae:	d006      	beq.n	26ebe <_sercom_get_default_pad+0x8e>
   26eb0:	2b03      	cmp	r3, #3
   26eb2:	d006      	beq.n	26ec2 <_sercom_get_default_pad+0x92>
   26eb4:	e05b      	b.n	26f6e <_sercom_get_default_pad+0x13e>
   26eb6:	2303      	movs	r3, #3
   26eb8:	e05a      	b.n	26f70 <_sercom_get_default_pad+0x140>
   26eba:	4b39      	ldr	r3, [pc, #228]	; (26fa0 <_sercom_get_default_pad+0x170>)
   26ebc:	e058      	b.n	26f70 <_sercom_get_default_pad+0x140>
   26ebe:	4b39      	ldr	r3, [pc, #228]	; (26fa4 <_sercom_get_default_pad+0x174>)
   26ec0:	e056      	b.n	26f70 <_sercom_get_default_pad+0x140>
   26ec2:	4b39      	ldr	r3, [pc, #228]	; (26fa8 <_sercom_get_default_pad+0x178>)
   26ec4:	e054      	b.n	26f70 <_sercom_get_default_pad+0x140>
   26ec6:	1cfb      	adds	r3, r7, #3
   26ec8:	781b      	ldrb	r3, [r3, #0]
   26eca:	2b01      	cmp	r3, #1
   26ecc:	d00a      	beq.n	26ee4 <_sercom_get_default_pad+0xb4>
   26ece:	dc02      	bgt.n	26ed6 <_sercom_get_default_pad+0xa6>
   26ed0:	2b00      	cmp	r3, #0
   26ed2:	d005      	beq.n	26ee0 <_sercom_get_default_pad+0xb0>
   26ed4:	e04b      	b.n	26f6e <_sercom_get_default_pad+0x13e>
   26ed6:	2b02      	cmp	r3, #2
   26ed8:	d006      	beq.n	26ee8 <_sercom_get_default_pad+0xb8>
   26eda:	2b03      	cmp	r3, #3
   26edc:	d006      	beq.n	26eec <_sercom_get_default_pad+0xbc>
   26ede:	e046      	b.n	26f6e <_sercom_get_default_pad+0x13e>
   26ee0:	4b32      	ldr	r3, [pc, #200]	; (26fac <_sercom_get_default_pad+0x17c>)
   26ee2:	e045      	b.n	26f70 <_sercom_get_default_pad+0x140>
   26ee4:	4b32      	ldr	r3, [pc, #200]	; (26fb0 <_sercom_get_default_pad+0x180>)
   26ee6:	e043      	b.n	26f70 <_sercom_get_default_pad+0x140>
   26ee8:	4b32      	ldr	r3, [pc, #200]	; (26fb4 <_sercom_get_default_pad+0x184>)
   26eea:	e041      	b.n	26f70 <_sercom_get_default_pad+0x140>
   26eec:	4b32      	ldr	r3, [pc, #200]	; (26fb8 <_sercom_get_default_pad+0x188>)
   26eee:	e03f      	b.n	26f70 <_sercom_get_default_pad+0x140>
   26ef0:	1cfb      	adds	r3, r7, #3
   26ef2:	781b      	ldrb	r3, [r3, #0]
   26ef4:	2b01      	cmp	r3, #1
   26ef6:	d00a      	beq.n	26f0e <_sercom_get_default_pad+0xde>
   26ef8:	dc02      	bgt.n	26f00 <_sercom_get_default_pad+0xd0>
   26efa:	2b00      	cmp	r3, #0
   26efc:	d005      	beq.n	26f0a <_sercom_get_default_pad+0xda>
   26efe:	e036      	b.n	26f6e <_sercom_get_default_pad+0x13e>
   26f00:	2b02      	cmp	r3, #2
   26f02:	d006      	beq.n	26f12 <_sercom_get_default_pad+0xe2>
   26f04:	2b03      	cmp	r3, #3
   26f06:	d006      	beq.n	26f16 <_sercom_get_default_pad+0xe6>
   26f08:	e031      	b.n	26f6e <_sercom_get_default_pad+0x13e>
   26f0a:	4b2c      	ldr	r3, [pc, #176]	; (26fbc <_sercom_get_default_pad+0x18c>)
   26f0c:	e030      	b.n	26f70 <_sercom_get_default_pad+0x140>
   26f0e:	4b2c      	ldr	r3, [pc, #176]	; (26fc0 <_sercom_get_default_pad+0x190>)
   26f10:	e02e      	b.n	26f70 <_sercom_get_default_pad+0x140>
   26f12:	4b2c      	ldr	r3, [pc, #176]	; (26fc4 <_sercom_get_default_pad+0x194>)
   26f14:	e02c      	b.n	26f70 <_sercom_get_default_pad+0x140>
   26f16:	4b2c      	ldr	r3, [pc, #176]	; (26fc8 <_sercom_get_default_pad+0x198>)
   26f18:	e02a      	b.n	26f70 <_sercom_get_default_pad+0x140>
   26f1a:	1cfb      	adds	r3, r7, #3
   26f1c:	781b      	ldrb	r3, [r3, #0]
   26f1e:	2b01      	cmp	r3, #1
   26f20:	d00a      	beq.n	26f38 <_sercom_get_default_pad+0x108>
   26f22:	dc02      	bgt.n	26f2a <_sercom_get_default_pad+0xfa>
   26f24:	2b00      	cmp	r3, #0
   26f26:	d005      	beq.n	26f34 <_sercom_get_default_pad+0x104>
   26f28:	e021      	b.n	26f6e <_sercom_get_default_pad+0x13e>
   26f2a:	2b02      	cmp	r3, #2
   26f2c:	d006      	beq.n	26f3c <_sercom_get_default_pad+0x10c>
   26f2e:	2b03      	cmp	r3, #3
   26f30:	d006      	beq.n	26f40 <_sercom_get_default_pad+0x110>
   26f32:	e01c      	b.n	26f6e <_sercom_get_default_pad+0x13e>
   26f34:	4b25      	ldr	r3, [pc, #148]	; (26fcc <_sercom_get_default_pad+0x19c>)
   26f36:	e01b      	b.n	26f70 <_sercom_get_default_pad+0x140>
   26f38:	4b25      	ldr	r3, [pc, #148]	; (26fd0 <_sercom_get_default_pad+0x1a0>)
   26f3a:	e019      	b.n	26f70 <_sercom_get_default_pad+0x140>
   26f3c:	4b25      	ldr	r3, [pc, #148]	; (26fd4 <_sercom_get_default_pad+0x1a4>)
   26f3e:	e017      	b.n	26f70 <_sercom_get_default_pad+0x140>
   26f40:	4b25      	ldr	r3, [pc, #148]	; (26fd8 <_sercom_get_default_pad+0x1a8>)
   26f42:	e015      	b.n	26f70 <_sercom_get_default_pad+0x140>
   26f44:	1cfb      	adds	r3, r7, #3
   26f46:	781b      	ldrb	r3, [r3, #0]
   26f48:	2b01      	cmp	r3, #1
   26f4a:	d00a      	beq.n	26f62 <_sercom_get_default_pad+0x132>
   26f4c:	dc02      	bgt.n	26f54 <_sercom_get_default_pad+0x124>
   26f4e:	2b00      	cmp	r3, #0
   26f50:	d005      	beq.n	26f5e <_sercom_get_default_pad+0x12e>
   26f52:	e00c      	b.n	26f6e <_sercom_get_default_pad+0x13e>
   26f54:	2b02      	cmp	r3, #2
   26f56:	d006      	beq.n	26f66 <_sercom_get_default_pad+0x136>
   26f58:	2b03      	cmp	r3, #3
   26f5a:	d006      	beq.n	26f6a <_sercom_get_default_pad+0x13a>
   26f5c:	e007      	b.n	26f6e <_sercom_get_default_pad+0x13e>
   26f5e:	4b1f      	ldr	r3, [pc, #124]	; (26fdc <_sercom_get_default_pad+0x1ac>)
   26f60:	e006      	b.n	26f70 <_sercom_get_default_pad+0x140>
   26f62:	4b1f      	ldr	r3, [pc, #124]	; (26fe0 <_sercom_get_default_pad+0x1b0>)
   26f64:	e004      	b.n	26f70 <_sercom_get_default_pad+0x140>
   26f66:	4b1f      	ldr	r3, [pc, #124]	; (26fe4 <_sercom_get_default_pad+0x1b4>)
   26f68:	e002      	b.n	26f70 <_sercom_get_default_pad+0x140>
   26f6a:	4b1f      	ldr	r3, [pc, #124]	; (26fe8 <_sercom_get_default_pad+0x1b8>)
   26f6c:	e000      	b.n	26f70 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
   26f6e:	2300      	movs	r3, #0
}
   26f70:	0018      	movs	r0, r3
   26f72:	46bd      	mov	sp, r7
   26f74:	b002      	add	sp, #8
   26f76:	bd80      	pop	{r7, pc}
   26f78:	42001000 	.word	0x42001000
   26f7c:	42000800 	.word	0x42000800
   26f80:	42000c00 	.word	0x42000c00
   26f84:	42001800 	.word	0x42001800
   26f88:	42001c00 	.word	0x42001c00
   26f8c:	42001400 	.word	0x42001400
   26f90:	00040003 	.word	0x00040003
   26f94:	00050003 	.word	0x00050003
   26f98:	00060003 	.word	0x00060003
   26f9c:	00070003 	.word	0x00070003
   26fa0:	00010003 	.word	0x00010003
   26fa4:	001e0003 	.word	0x001e0003
   26fa8:	001f0003 	.word	0x001f0003
   26fac:	00080003 	.word	0x00080003
   26fb0:	00090003 	.word	0x00090003
   26fb4:	000a0003 	.word	0x000a0003
   26fb8:	000b0003 	.word	0x000b0003
   26fbc:	00100003 	.word	0x00100003
   26fc0:	00110003 	.word	0x00110003
   26fc4:	00120003 	.word	0x00120003
   26fc8:	00130003 	.word	0x00130003
   26fcc:	000c0003 	.word	0x000c0003
   26fd0:	000d0003 	.word	0x000d0003
   26fd4:	000e0003 	.word	0x000e0003
   26fd8:	000f0003 	.word	0x000f0003
   26fdc:	00160003 	.word	0x00160003
   26fe0:	00170003 	.word	0x00170003
   26fe4:	00180003 	.word	0x00180003
   26fe8:	00190003 	.word	0x00190003

00026fec <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
   26fec:	b590      	push	{r4, r7, lr}
   26fee:	b08b      	sub	sp, #44	; 0x2c
   26ff0:	af00      	add	r7, sp, #0
   26ff2:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
   26ff4:	230c      	movs	r3, #12
   26ff6:	18fb      	adds	r3, r7, r3
   26ff8:	4a0f      	ldr	r2, [pc, #60]	; (27038 <_sercom_get_sercom_inst_index+0x4c>)
   26ffa:	ca13      	ldmia	r2!, {r0, r1, r4}
   26ffc:	c313      	stmia	r3!, {r0, r1, r4}
   26ffe:	ca13      	ldmia	r2!, {r0, r1, r4}
   27000:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   27002:	2300      	movs	r3, #0
   27004:	627b      	str	r3, [r7, #36]	; 0x24
   27006:	e00e      	b.n	27026 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
   27008:	230c      	movs	r3, #12
   2700a:	18fb      	adds	r3, r7, r3
   2700c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2700e:	0092      	lsls	r2, r2, #2
   27010:	58d3      	ldr	r3, [r2, r3]
   27012:	001a      	movs	r2, r3
   27014:	687b      	ldr	r3, [r7, #4]
   27016:	429a      	cmp	r2, r3
   27018:	d102      	bne.n	27020 <_sercom_get_sercom_inst_index+0x34>
			return i;
   2701a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2701c:	b2db      	uxtb	r3, r3
   2701e:	e006      	b.n	2702e <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   27020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   27022:	3301      	adds	r3, #1
   27024:	627b      	str	r3, [r7, #36]	; 0x24
   27026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   27028:	2b05      	cmp	r3, #5
   2702a:	d9ed      	bls.n	27008 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
   2702c:	2300      	movs	r3, #0
}
   2702e:	0018      	movs	r0, r3
   27030:	46bd      	mov	sp, r7
   27032:	b00b      	add	sp, #44	; 0x2c
   27034:	bd90      	pop	{r4, r7, pc}
   27036:	46c0      	nop			; (mov r8, r8)
   27038:	00039ecc 	.word	0x00039ecc

0002703c <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
   2703c:	b580      	push	{r7, lr}
   2703e:	b082      	sub	sp, #8
   27040:	af00      	add	r7, sp, #0
   27042:	0002      	movs	r2, r0
   27044:	1dfb      	adds	r3, r7, #7
   27046:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
   27048:	46c0      	nop			; (mov r8, r8)
   2704a:	46bd      	mov	sp, r7
   2704c:	b002      	add	sp, #8
   2704e:	bd80      	pop	{r7, pc}

00027050 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
   27050:	b580      	push	{r7, lr}
   27052:	b084      	sub	sp, #16
   27054:	af00      	add	r7, sp, #0
   27056:	0002      	movs	r2, r0
   27058:	6039      	str	r1, [r7, #0]
   2705a:	1dfb      	adds	r3, r7, #7
   2705c:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
   2705e:	4b13      	ldr	r3, [pc, #76]	; (270ac <_sercom_set_handler+0x5c>)
   27060:	781b      	ldrb	r3, [r3, #0]
   27062:	2201      	movs	r2, #1
   27064:	4053      	eors	r3, r2
   27066:	b2db      	uxtb	r3, r3
   27068:	2b00      	cmp	r3, #0
   2706a:	d015      	beq.n	27098 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   2706c:	2300      	movs	r3, #0
   2706e:	60fb      	str	r3, [r7, #12]
   27070:	e00c      	b.n	2708c <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   27072:	4b0f      	ldr	r3, [pc, #60]	; (270b0 <_sercom_set_handler+0x60>)
   27074:	68fa      	ldr	r2, [r7, #12]
   27076:	0092      	lsls	r2, r2, #2
   27078:	490e      	ldr	r1, [pc, #56]	; (270b4 <_sercom_set_handler+0x64>)
   2707a:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
   2707c:	4b0e      	ldr	r3, [pc, #56]	; (270b8 <_sercom_set_handler+0x68>)
   2707e:	68fa      	ldr	r2, [r7, #12]
   27080:	0092      	lsls	r2, r2, #2
   27082:	2100      	movs	r1, #0
   27084:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   27086:	68fb      	ldr	r3, [r7, #12]
   27088:	3301      	adds	r3, #1
   2708a:	60fb      	str	r3, [r7, #12]
   2708c:	68fb      	ldr	r3, [r7, #12]
   2708e:	2b05      	cmp	r3, #5
   27090:	d9ef      	bls.n	27072 <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
   27092:	4b06      	ldr	r3, [pc, #24]	; (270ac <_sercom_set_handler+0x5c>)
   27094:	2201      	movs	r2, #1
   27096:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
   27098:	1dfb      	adds	r3, r7, #7
   2709a:	781a      	ldrb	r2, [r3, #0]
   2709c:	4b04      	ldr	r3, [pc, #16]	; (270b0 <_sercom_set_handler+0x60>)
   2709e:	0092      	lsls	r2, r2, #2
   270a0:	6839      	ldr	r1, [r7, #0]
   270a2:	50d1      	str	r1, [r2, r3]
}
   270a4:	46c0      	nop			; (mov r8, r8)
   270a6:	46bd      	mov	sp, r7
   270a8:	b004      	add	sp, #16
   270aa:	bd80      	pop	{r7, pc}
   270ac:	20003cde 	.word	0x20003cde
   270b0:	20003ce0 	.word	0x20003ce0
   270b4:	0002703d 	.word	0x0002703d
   270b8:	20005528 	.word	0x20005528

000270bc <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
   270bc:	b590      	push	{r4, r7, lr}
   270be:	b085      	sub	sp, #20
   270c0:	af00      	add	r7, sp, #0
   270c2:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
   270c4:	2308      	movs	r3, #8
   270c6:	18fb      	adds	r3, r7, r3
   270c8:	4a0b      	ldr	r2, [pc, #44]	; (270f8 <_sercom_get_interrupt_vector+0x3c>)
   270ca:	6811      	ldr	r1, [r2, #0]
   270cc:	6019      	str	r1, [r3, #0]
   270ce:	8892      	ldrh	r2, [r2, #4]
   270d0:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
   270d2:	230f      	movs	r3, #15
   270d4:	18fc      	adds	r4, r7, r3
   270d6:	687b      	ldr	r3, [r7, #4]
   270d8:	0018      	movs	r0, r3
   270da:	4b08      	ldr	r3, [pc, #32]	; (270fc <_sercom_get_interrupt_vector+0x40>)
   270dc:	4798      	blx	r3
   270de:	0003      	movs	r3, r0
   270e0:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
   270e2:	230f      	movs	r3, #15
   270e4:	18fb      	adds	r3, r7, r3
   270e6:	781b      	ldrb	r3, [r3, #0]
   270e8:	2208      	movs	r2, #8
   270ea:	18ba      	adds	r2, r7, r2
   270ec:	5cd3      	ldrb	r3, [r2, r3]
   270ee:	b25b      	sxtb	r3, r3
}
   270f0:	0018      	movs	r0, r3
   270f2:	46bd      	mov	sp, r7
   270f4:	b005      	add	sp, #20
   270f6:	bd90      	pop	{r4, r7, pc}
   270f8:	00039ee4 	.word	0x00039ee4
   270fc:	00026fed 	.word	0x00026fed

00027100 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
   27100:	b580      	push	{r7, lr}
   27102:	af00      	add	r7, sp, #0
   27104:	4b03      	ldr	r3, [pc, #12]	; (27114 <SERCOM0_Handler+0x14>)
   27106:	681b      	ldr	r3, [r3, #0]
   27108:	2000      	movs	r0, #0
   2710a:	4798      	blx	r3
   2710c:	46c0      	nop			; (mov r8, r8)
   2710e:	46bd      	mov	sp, r7
   27110:	bd80      	pop	{r7, pc}
   27112:	46c0      	nop			; (mov r8, r8)
   27114:	20003ce0 	.word	0x20003ce0

00027118 <SERCOM1_Handler>:
   27118:	b580      	push	{r7, lr}
   2711a:	af00      	add	r7, sp, #0
   2711c:	4b03      	ldr	r3, [pc, #12]	; (2712c <SERCOM1_Handler+0x14>)
   2711e:	685b      	ldr	r3, [r3, #4]
   27120:	2001      	movs	r0, #1
   27122:	4798      	blx	r3
   27124:	46c0      	nop			; (mov r8, r8)
   27126:	46bd      	mov	sp, r7
   27128:	bd80      	pop	{r7, pc}
   2712a:	46c0      	nop			; (mov r8, r8)
   2712c:	20003ce0 	.word	0x20003ce0

00027130 <SERCOM2_Handler>:
   27130:	b580      	push	{r7, lr}
   27132:	af00      	add	r7, sp, #0
   27134:	4b03      	ldr	r3, [pc, #12]	; (27144 <SERCOM2_Handler+0x14>)
   27136:	689b      	ldr	r3, [r3, #8]
   27138:	2002      	movs	r0, #2
   2713a:	4798      	blx	r3
   2713c:	46c0      	nop			; (mov r8, r8)
   2713e:	46bd      	mov	sp, r7
   27140:	bd80      	pop	{r7, pc}
   27142:	46c0      	nop			; (mov r8, r8)
   27144:	20003ce0 	.word	0x20003ce0

00027148 <SERCOM3_Handler>:
   27148:	b580      	push	{r7, lr}
   2714a:	af00      	add	r7, sp, #0
   2714c:	4b03      	ldr	r3, [pc, #12]	; (2715c <SERCOM3_Handler+0x14>)
   2714e:	68db      	ldr	r3, [r3, #12]
   27150:	2003      	movs	r0, #3
   27152:	4798      	blx	r3
   27154:	46c0      	nop			; (mov r8, r8)
   27156:	46bd      	mov	sp, r7
   27158:	bd80      	pop	{r7, pc}
   2715a:	46c0      	nop			; (mov r8, r8)
   2715c:	20003ce0 	.word	0x20003ce0

00027160 <SERCOM4_Handler>:
   27160:	b580      	push	{r7, lr}
   27162:	af00      	add	r7, sp, #0
   27164:	4b03      	ldr	r3, [pc, #12]	; (27174 <SERCOM4_Handler+0x14>)
   27166:	691b      	ldr	r3, [r3, #16]
   27168:	2004      	movs	r0, #4
   2716a:	4798      	blx	r3
   2716c:	46c0      	nop			; (mov r8, r8)
   2716e:	46bd      	mov	sp, r7
   27170:	bd80      	pop	{r7, pc}
   27172:	46c0      	nop			; (mov r8, r8)
   27174:	20003ce0 	.word	0x20003ce0

00027178 <SERCOM5_Handler>:
   27178:	b580      	push	{r7, lr}
   2717a:	af00      	add	r7, sp, #0
   2717c:	4b03      	ldr	r3, [pc, #12]	; (2718c <SERCOM5_Handler+0x14>)
   2717e:	695b      	ldr	r3, [r3, #20]
   27180:	2005      	movs	r0, #5
   27182:	4798      	blx	r3
   27184:	46c0      	nop			; (mov r8, r8)
   27186:	46bd      	mov	sp, r7
   27188:	bd80      	pop	{r7, pc}
   2718a:	46c0      	nop			; (mov r8, r8)
   2718c:	20003ce0 	.word	0x20003ce0

00027190 <system_pinmux_get_config_defaults>:
{
   27190:	b580      	push	{r7, lr}
   27192:	b082      	sub	sp, #8
   27194:	af00      	add	r7, sp, #0
   27196:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   27198:	687b      	ldr	r3, [r7, #4]
   2719a:	2280      	movs	r2, #128	; 0x80
   2719c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   2719e:	687b      	ldr	r3, [r7, #4]
   271a0:	2200      	movs	r2, #0
   271a2:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   271a4:	687b      	ldr	r3, [r7, #4]
   271a6:	2201      	movs	r2, #1
   271a8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   271aa:	687b      	ldr	r3, [r7, #4]
   271ac:	2200      	movs	r2, #0
   271ae:	70da      	strb	r2, [r3, #3]
}
   271b0:	46c0      	nop			; (mov r8, r8)
   271b2:	46bd      	mov	sp, r7
   271b4:	b002      	add	sp, #8
   271b6:	bd80      	pop	{r7, pc}

000271b8 <system_pinmux_get_group_from_gpio_pin>:
{
   271b8:	b580      	push	{r7, lr}
   271ba:	b084      	sub	sp, #16
   271bc:	af00      	add	r7, sp, #0
   271be:	0002      	movs	r2, r0
   271c0:	1dfb      	adds	r3, r7, #7
   271c2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   271c4:	230f      	movs	r3, #15
   271c6:	18fb      	adds	r3, r7, r3
   271c8:	1dfa      	adds	r2, r7, #7
   271ca:	7812      	ldrb	r2, [r2, #0]
   271cc:	09d2      	lsrs	r2, r2, #7
   271ce:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   271d0:	230e      	movs	r3, #14
   271d2:	18fb      	adds	r3, r7, r3
   271d4:	1dfa      	adds	r2, r7, #7
   271d6:	7812      	ldrb	r2, [r2, #0]
   271d8:	0952      	lsrs	r2, r2, #5
   271da:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   271dc:	4b0d      	ldr	r3, [pc, #52]	; (27214 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   271de:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   271e0:	230f      	movs	r3, #15
   271e2:	18fb      	adds	r3, r7, r3
   271e4:	781b      	ldrb	r3, [r3, #0]
   271e6:	2b00      	cmp	r3, #0
   271e8:	d10f      	bne.n	2720a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   271ea:	230f      	movs	r3, #15
   271ec:	18fb      	adds	r3, r7, r3
   271ee:	781b      	ldrb	r3, [r3, #0]
   271f0:	009b      	lsls	r3, r3, #2
   271f2:	2210      	movs	r2, #16
   271f4:	4694      	mov	ip, r2
   271f6:	44bc      	add	ip, r7
   271f8:	4463      	add	r3, ip
   271fa:	3b08      	subs	r3, #8
   271fc:	681a      	ldr	r2, [r3, #0]
   271fe:	230e      	movs	r3, #14
   27200:	18fb      	adds	r3, r7, r3
   27202:	781b      	ldrb	r3, [r3, #0]
   27204:	01db      	lsls	r3, r3, #7
   27206:	18d3      	adds	r3, r2, r3
   27208:	e000      	b.n	2720c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   2720a:	2300      	movs	r3, #0
}
   2720c:	0018      	movs	r0, r3
   2720e:	46bd      	mov	sp, r7
   27210:	b004      	add	sp, #16
   27212:	bd80      	pop	{r7, pc}
   27214:	41004400 	.word	0x41004400

00027218 <port_get_group_from_gpio_pin>:
{
   27218:	b580      	push	{r7, lr}
   2721a:	b082      	sub	sp, #8
   2721c:	af00      	add	r7, sp, #0
   2721e:	0002      	movs	r2, r0
   27220:	1dfb      	adds	r3, r7, #7
   27222:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   27224:	1dfb      	adds	r3, r7, #7
   27226:	781b      	ldrb	r3, [r3, #0]
   27228:	0018      	movs	r0, r3
   2722a:	4b03      	ldr	r3, [pc, #12]	; (27238 <port_get_group_from_gpio_pin+0x20>)
   2722c:	4798      	blx	r3
   2722e:	0003      	movs	r3, r0
}
   27230:	0018      	movs	r0, r3
   27232:	46bd      	mov	sp, r7
   27234:	b002      	add	sp, #8
   27236:	bd80      	pop	{r7, pc}
   27238:	000271b9 	.word	0x000271b9

0002723c <port_pin_set_output_level>:
{
   2723c:	b580      	push	{r7, lr}
   2723e:	b084      	sub	sp, #16
   27240:	af00      	add	r7, sp, #0
   27242:	0002      	movs	r2, r0
   27244:	1dfb      	adds	r3, r7, #7
   27246:	701a      	strb	r2, [r3, #0]
   27248:	1dbb      	adds	r3, r7, #6
   2724a:	1c0a      	adds	r2, r1, #0
   2724c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   2724e:	1dfb      	adds	r3, r7, #7
   27250:	781b      	ldrb	r3, [r3, #0]
   27252:	0018      	movs	r0, r3
   27254:	4b0d      	ldr	r3, [pc, #52]	; (2728c <port_pin_set_output_level+0x50>)
   27256:	4798      	blx	r3
   27258:	0003      	movs	r3, r0
   2725a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   2725c:	1dfb      	adds	r3, r7, #7
   2725e:	781b      	ldrb	r3, [r3, #0]
   27260:	221f      	movs	r2, #31
   27262:	4013      	ands	r3, r2
   27264:	2201      	movs	r2, #1
   27266:	409a      	lsls	r2, r3
   27268:	0013      	movs	r3, r2
   2726a:	60bb      	str	r3, [r7, #8]
	if (level) {
   2726c:	1dbb      	adds	r3, r7, #6
   2726e:	781b      	ldrb	r3, [r3, #0]
   27270:	2b00      	cmp	r3, #0
   27272:	d003      	beq.n	2727c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   27274:	68fb      	ldr	r3, [r7, #12]
   27276:	68ba      	ldr	r2, [r7, #8]
   27278:	619a      	str	r2, [r3, #24]
}
   2727a:	e002      	b.n	27282 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   2727c:	68fb      	ldr	r3, [r7, #12]
   2727e:	68ba      	ldr	r2, [r7, #8]
   27280:	615a      	str	r2, [r3, #20]
}
   27282:	46c0      	nop			; (mov r8, r8)
   27284:	46bd      	mov	sp, r7
   27286:	b004      	add	sp, #16
   27288:	bd80      	pop	{r7, pc}
   2728a:	46c0      	nop			; (mov r8, r8)
   2728c:	00027219 	.word	0x00027219

00027290 <system_gclk_chan_get_config_defaults>:
{
   27290:	b580      	push	{r7, lr}
   27292:	b082      	sub	sp, #8
   27294:	af00      	add	r7, sp, #0
   27296:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   27298:	687b      	ldr	r3, [r7, #4]
   2729a:	2200      	movs	r2, #0
   2729c:	701a      	strb	r2, [r3, #0]
}
   2729e:	46c0      	nop			; (mov r8, r8)
   272a0:	46bd      	mov	sp, r7
   272a2:	b002      	add	sp, #8
   272a4:	bd80      	pop	{r7, pc}
	...

000272a8 <system_apb_clock_set_mask>:
{
   272a8:	b580      	push	{r7, lr}
   272aa:	b082      	sub	sp, #8
   272ac:	af00      	add	r7, sp, #0
   272ae:	0002      	movs	r2, r0
   272b0:	6039      	str	r1, [r7, #0]
   272b2:	1dfb      	adds	r3, r7, #7
   272b4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   272b6:	1dfb      	adds	r3, r7, #7
   272b8:	781b      	ldrb	r3, [r3, #0]
   272ba:	2b01      	cmp	r3, #1
   272bc:	d00a      	beq.n	272d4 <system_apb_clock_set_mask+0x2c>
   272be:	2b02      	cmp	r3, #2
   272c0:	d00f      	beq.n	272e2 <system_apb_clock_set_mask+0x3a>
   272c2:	2b00      	cmp	r3, #0
   272c4:	d114      	bne.n	272f0 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   272c6:	4b0e      	ldr	r3, [pc, #56]	; (27300 <system_apb_clock_set_mask+0x58>)
   272c8:	4a0d      	ldr	r2, [pc, #52]	; (27300 <system_apb_clock_set_mask+0x58>)
   272ca:	6991      	ldr	r1, [r2, #24]
   272cc:	683a      	ldr	r2, [r7, #0]
   272ce:	430a      	orrs	r2, r1
   272d0:	619a      	str	r2, [r3, #24]
			break;
   272d2:	e00f      	b.n	272f4 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   272d4:	4b0a      	ldr	r3, [pc, #40]	; (27300 <system_apb_clock_set_mask+0x58>)
   272d6:	4a0a      	ldr	r2, [pc, #40]	; (27300 <system_apb_clock_set_mask+0x58>)
   272d8:	69d1      	ldr	r1, [r2, #28]
   272da:	683a      	ldr	r2, [r7, #0]
   272dc:	430a      	orrs	r2, r1
   272de:	61da      	str	r2, [r3, #28]
			break;
   272e0:	e008      	b.n	272f4 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   272e2:	4b07      	ldr	r3, [pc, #28]	; (27300 <system_apb_clock_set_mask+0x58>)
   272e4:	4a06      	ldr	r2, [pc, #24]	; (27300 <system_apb_clock_set_mask+0x58>)
   272e6:	6a11      	ldr	r1, [r2, #32]
   272e8:	683a      	ldr	r2, [r7, #0]
   272ea:	430a      	orrs	r2, r1
   272ec:	621a      	str	r2, [r3, #32]
			break;
   272ee:	e001      	b.n	272f4 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   272f0:	2317      	movs	r3, #23
   272f2:	e000      	b.n	272f6 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   272f4:	2300      	movs	r3, #0
}
   272f6:	0018      	movs	r0, r3
   272f8:	46bd      	mov	sp, r7
   272fa:	b002      	add	sp, #8
   272fc:	bd80      	pop	{r7, pc}
   272fe:	46c0      	nop			; (mov r8, r8)
   27300:	40000400 	.word	0x40000400

00027304 <system_is_debugger_present>:
{
   27304:	b580      	push	{r7, lr}
   27306:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   27308:	4b05      	ldr	r3, [pc, #20]	; (27320 <system_is_debugger_present+0x1c>)
   2730a:	789b      	ldrb	r3, [r3, #2]
   2730c:	b2db      	uxtb	r3, r3
   2730e:	001a      	movs	r2, r3
   27310:	2302      	movs	r3, #2
   27312:	4013      	ands	r3, r2
   27314:	1e5a      	subs	r2, r3, #1
   27316:	4193      	sbcs	r3, r2
   27318:	b2db      	uxtb	r3, r3
}
   2731a:	0018      	movs	r0, r3
   2731c:	46bd      	mov	sp, r7
   2731e:	bd80      	pop	{r7, pc}
   27320:	41002000 	.word	0x41002000

00027324 <system_interrupt_enable>:
{
   27324:	b580      	push	{r7, lr}
   27326:	b082      	sub	sp, #8
   27328:	af00      	add	r7, sp, #0
   2732a:	0002      	movs	r2, r0
   2732c:	1dfb      	adds	r3, r7, #7
   2732e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   27330:	4b06      	ldr	r3, [pc, #24]	; (2734c <system_interrupt_enable+0x28>)
   27332:	1dfa      	adds	r2, r7, #7
   27334:	7812      	ldrb	r2, [r2, #0]
   27336:	0011      	movs	r1, r2
   27338:	221f      	movs	r2, #31
   2733a:	400a      	ands	r2, r1
   2733c:	2101      	movs	r1, #1
   2733e:	4091      	lsls	r1, r2
   27340:	000a      	movs	r2, r1
   27342:	601a      	str	r2, [r3, #0]
}
   27344:	46c0      	nop			; (mov r8, r8)
   27346:	46bd      	mov	sp, r7
   27348:	b002      	add	sp, #8
   2734a:	bd80      	pop	{r7, pc}
   2734c:	e000e100 	.word	0xe000e100

00027350 <system_interrupt_disable>:
{
   27350:	b580      	push	{r7, lr}
   27352:	b082      	sub	sp, #8
   27354:	af00      	add	r7, sp, #0
   27356:	0002      	movs	r2, r0
   27358:	1dfb      	adds	r3, r7, #7
   2735a:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   2735c:	4a07      	ldr	r2, [pc, #28]	; (2737c <system_interrupt_disable+0x2c>)
   2735e:	1dfb      	adds	r3, r7, #7
   27360:	781b      	ldrb	r3, [r3, #0]
   27362:	0019      	movs	r1, r3
   27364:	231f      	movs	r3, #31
   27366:	400b      	ands	r3, r1
   27368:	2101      	movs	r1, #1
   2736a:	4099      	lsls	r1, r3
   2736c:	000b      	movs	r3, r1
   2736e:	0019      	movs	r1, r3
   27370:	2380      	movs	r3, #128	; 0x80
   27372:	50d1      	str	r1, [r2, r3]
}
   27374:	46c0      	nop			; (mov r8, r8)
   27376:	46bd      	mov	sp, r7
   27378:	b002      	add	sp, #8
   2737a:	bd80      	pop	{r7, pc}
   2737c:	e000e100 	.word	0xe000e100

00027380 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
   27380:	b580      	push	{r7, lr}
   27382:	b084      	sub	sp, #16
   27384:	af00      	add	r7, sp, #0
   27386:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   27388:	687b      	ldr	r3, [r7, #4]
   2738a:	681b      	ldr	r3, [r3, #0]
   2738c:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
   2738e:	68fb      	ldr	r3, [r7, #12]
   27390:	69db      	ldr	r3, [r3, #28]
   27392:	1e5a      	subs	r2, r3, #1
   27394:	4193      	sbcs	r3, r2
   27396:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
   27398:	0018      	movs	r0, r3
   2739a:	46bd      	mov	sp, r7
   2739c:	b004      	add	sp, #16
   2739e:	bd80      	pop	{r7, pc}

000273a0 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
   273a0:	b580      	push	{r7, lr}
   273a2:	b084      	sub	sp, #16
   273a4:	af00      	add	r7, sp, #0
   273a6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   273a8:	687b      	ldr	r3, [r7, #4]
   273aa:	681b      	ldr	r3, [r3, #0]
   273ac:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   273ae:	687b      	ldr	r3, [r7, #4]
   273b0:	681b      	ldr	r3, [r3, #0]
   273b2:	0018      	movs	r0, r3
   273b4:	4b0b      	ldr	r3, [pc, #44]	; (273e4 <spi_enable+0x44>)
   273b6:	4798      	blx	r3
   273b8:	0003      	movs	r3, r0
   273ba:	0018      	movs	r0, r3
   273bc:	4b0a      	ldr	r3, [pc, #40]	; (273e8 <spi_enable+0x48>)
   273be:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
   273c0:	46c0      	nop			; (mov r8, r8)
   273c2:	687b      	ldr	r3, [r7, #4]
   273c4:	0018      	movs	r0, r3
   273c6:	4b09      	ldr	r3, [pc, #36]	; (273ec <spi_enable+0x4c>)
   273c8:	4798      	blx	r3
   273ca:	1e03      	subs	r3, r0, #0
   273cc:	d1f9      	bne.n	273c2 <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   273ce:	68fb      	ldr	r3, [r7, #12]
   273d0:	681b      	ldr	r3, [r3, #0]
   273d2:	2202      	movs	r2, #2
   273d4:	431a      	orrs	r2, r3
   273d6:	68fb      	ldr	r3, [r7, #12]
   273d8:	601a      	str	r2, [r3, #0]
}
   273da:	46c0      	nop			; (mov r8, r8)
   273dc:	46bd      	mov	sp, r7
   273de:	b004      	add	sp, #16
   273e0:	bd80      	pop	{r7, pc}
   273e2:	46c0      	nop			; (mov r8, r8)
   273e4:	000270bd 	.word	0x000270bd
   273e8:	00027325 	.word	0x00027325
   273ec:	00027381 	.word	0x00027381

000273f0 <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
   273f0:	b580      	push	{r7, lr}
   273f2:	b084      	sub	sp, #16
   273f4:	af00      	add	r7, sp, #0
   273f6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   273f8:	687b      	ldr	r3, [r7, #4]
   273fa:	681b      	ldr	r3, [r3, #0]
   273fc:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   273fe:	687b      	ldr	r3, [r7, #4]
   27400:	681b      	ldr	r3, [r3, #0]
   27402:	0018      	movs	r0, r3
   27404:	4b0e      	ldr	r3, [pc, #56]	; (27440 <spi_disable+0x50>)
   27406:	4798      	blx	r3
   27408:	0003      	movs	r3, r0
   2740a:	0018      	movs	r0, r3
   2740c:	4b0d      	ldr	r3, [pc, #52]	; (27444 <spi_disable+0x54>)
   2740e:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
   27410:	46c0      	nop			; (mov r8, r8)
   27412:	687b      	ldr	r3, [r7, #4]
   27414:	0018      	movs	r0, r3
   27416:	4b0c      	ldr	r3, [pc, #48]	; (27448 <spi_disable+0x58>)
   27418:	4798      	blx	r3
   2741a:	1e03      	subs	r3, r0, #0
   2741c:	d1f9      	bne.n	27412 <spi_disable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   2741e:	68fb      	ldr	r3, [r7, #12]
   27420:	228f      	movs	r2, #143	; 0x8f
   27422:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   27424:	68fb      	ldr	r3, [r7, #12]
   27426:	228f      	movs	r2, #143	; 0x8f
   27428:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   2742a:	68fb      	ldr	r3, [r7, #12]
   2742c:	681b      	ldr	r3, [r3, #0]
   2742e:	2202      	movs	r2, #2
   27430:	4393      	bics	r3, r2
   27432:	001a      	movs	r2, r3
   27434:	68fb      	ldr	r3, [r7, #12]
   27436:	601a      	str	r2, [r3, #0]
}
   27438:	46c0      	nop			; (mov r8, r8)
   2743a:	46bd      	mov	sp, r7
   2743c:	b004      	add	sp, #16
   2743e:	bd80      	pop	{r7, pc}
   27440:	000270bd 	.word	0x000270bd
   27444:	00027351 	.word	0x00027351
   27448:	00027381 	.word	0x00027381

0002744c <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
   2744c:	b580      	push	{r7, lr}
   2744e:	b084      	sub	sp, #16
   27450:	af00      	add	r7, sp, #0
   27452:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   27454:	687b      	ldr	r3, [r7, #4]
   27456:	681b      	ldr	r3, [r3, #0]
   27458:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   2745a:	68fb      	ldr	r3, [r7, #12]
   2745c:	7e1b      	ldrb	r3, [r3, #24]
   2745e:	b2db      	uxtb	r3, r3
   27460:	001a      	movs	r2, r3
   27462:	2302      	movs	r3, #2
   27464:	4013      	ands	r3, r2
   27466:	1e5a      	subs	r2, r3, #1
   27468:	4193      	sbcs	r3, r2
   2746a:	b2db      	uxtb	r3, r3
}
   2746c:	0018      	movs	r0, r3
   2746e:	46bd      	mov	sp, r7
   27470:	b004      	add	sp, #16
   27472:	bd80      	pop	{r7, pc}

00027474 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
   27474:	b580      	push	{r7, lr}
   27476:	b084      	sub	sp, #16
   27478:	af00      	add	r7, sp, #0
   2747a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   2747c:	687b      	ldr	r3, [r7, #4]
   2747e:	681b      	ldr	r3, [r3, #0]
   27480:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   27482:	68fb      	ldr	r3, [r7, #12]
   27484:	7e1b      	ldrb	r3, [r3, #24]
   27486:	b2db      	uxtb	r3, r3
   27488:	001a      	movs	r2, r3
   2748a:	2301      	movs	r3, #1
   2748c:	4013      	ands	r3, r2
   2748e:	1e5a      	subs	r2, r3, #1
   27490:	4193      	sbcs	r3, r2
   27492:	b2db      	uxtb	r3, r3
}
   27494:	0018      	movs	r0, r3
   27496:	46bd      	mov	sp, r7
   27498:	b004      	add	sp, #16
   2749a:	bd80      	pop	{r7, pc}

0002749c <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
   2749c:	b580      	push	{r7, lr}
   2749e:	b084      	sub	sp, #16
   274a0:	af00      	add	r7, sp, #0
   274a2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   274a4:	687b      	ldr	r3, [r7, #4]
   274a6:	681b      	ldr	r3, [r3, #0]
   274a8:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   274aa:	68fb      	ldr	r3, [r7, #12]
   274ac:	7e1b      	ldrb	r3, [r3, #24]
   274ae:	b2db      	uxtb	r3, r3
   274b0:	001a      	movs	r2, r3
   274b2:	2304      	movs	r3, #4
   274b4:	4013      	ands	r3, r2
   274b6:	1e5a      	subs	r2, r3, #1
   274b8:	4193      	sbcs	r3, r2
   274ba:	b2db      	uxtb	r3, r3
}
   274bc:	0018      	movs	r0, r3
   274be:	46bd      	mov	sp, r7
   274c0:	b004      	add	sp, #16
   274c2:	bd80      	pop	{r7, pc}

000274c4 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
   274c4:	b580      	push	{r7, lr}
   274c6:	b084      	sub	sp, #16
   274c8:	af00      	add	r7, sp, #0
   274ca:	6078      	str	r0, [r7, #4]
   274cc:	000a      	movs	r2, r1
   274ce:	1cbb      	adds	r3, r7, #2
   274d0:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   274d2:	687b      	ldr	r3, [r7, #4]
   274d4:	681b      	ldr	r3, [r3, #0]
   274d6:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
   274d8:	687b      	ldr	r3, [r7, #4]
   274da:	0018      	movs	r0, r3
   274dc:	4b0a      	ldr	r3, [pc, #40]	; (27508 <spi_write+0x44>)
   274de:	4798      	blx	r3
   274e0:	0003      	movs	r3, r0
   274e2:	001a      	movs	r2, r3
   274e4:	2301      	movs	r3, #1
   274e6:	4053      	eors	r3, r2
   274e8:	b2db      	uxtb	r3, r3
   274ea:	2b00      	cmp	r3, #0
   274ec:	d001      	beq.n	274f2 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
   274ee:	2305      	movs	r3, #5
   274f0:	e006      	b.n	27500 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   274f2:	1cbb      	adds	r3, r7, #2
   274f4:	881b      	ldrh	r3, [r3, #0]
   274f6:	05db      	lsls	r3, r3, #23
   274f8:	0dda      	lsrs	r2, r3, #23
   274fa:	68fb      	ldr	r3, [r7, #12]
   274fc:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
   274fe:	2300      	movs	r3, #0
}
   27500:	0018      	movs	r0, r3
   27502:	46bd      	mov	sp, r7
   27504:	b004      	add	sp, #16
   27506:	bd80      	pop	{r7, pc}
   27508:	00027475 	.word	0x00027475

0002750c <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
   2750c:	b580      	push	{r7, lr}
   2750e:	b084      	sub	sp, #16
   27510:	af00      	add	r7, sp, #0
   27512:	6078      	str	r0, [r7, #4]
   27514:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   27516:	687b      	ldr	r3, [r7, #4]
   27518:	681b      	ldr	r3, [r3, #0]
   2751a:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
   2751c:	687b      	ldr	r3, [r7, #4]
   2751e:	0018      	movs	r0, r3
   27520:	4b1b      	ldr	r3, [pc, #108]	; (27590 <spi_read+0x84>)
   27522:	4798      	blx	r3
   27524:	0003      	movs	r3, r0
   27526:	001a      	movs	r2, r3
   27528:	2301      	movs	r3, #1
   2752a:	4053      	eors	r3, r2
   2752c:	b2db      	uxtb	r3, r3
   2752e:	2b00      	cmp	r3, #0
   27530:	d001      	beq.n	27536 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
   27532:	2310      	movs	r3, #16
   27534:	e027      	b.n	27586 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
   27536:	230f      	movs	r3, #15
   27538:	18fb      	adds	r3, r7, r3
   2753a:	2200      	movs	r2, #0
   2753c:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   2753e:	68bb      	ldr	r3, [r7, #8]
   27540:	8b5b      	ldrh	r3, [r3, #26]
   27542:	b29b      	uxth	r3, r3
   27544:	001a      	movs	r2, r3
   27546:	2304      	movs	r3, #4
   27548:	4013      	ands	r3, r2
   2754a:	d006      	beq.n	2755a <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   2754c:	230f      	movs	r3, #15
   2754e:	18fb      	adds	r3, r7, r3
   27550:	221e      	movs	r2, #30
   27552:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   27554:	68bb      	ldr	r3, [r7, #8]
   27556:	2204      	movs	r2, #4
   27558:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   2755a:	687b      	ldr	r3, [r7, #4]
   2755c:	799b      	ldrb	r3, [r3, #6]
   2755e:	2b01      	cmp	r3, #1
   27560:	d108      	bne.n	27574 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   27562:	68bb      	ldr	r3, [r7, #8]
   27564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27566:	b29b      	uxth	r3, r3
   27568:	05db      	lsls	r3, r3, #23
   2756a:	0ddb      	lsrs	r3, r3, #23
   2756c:	b29a      	uxth	r2, r3
   2756e:	683b      	ldr	r3, [r7, #0]
   27570:	801a      	strh	r2, [r3, #0]
   27572:	e005      	b.n	27580 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
   27574:	68bb      	ldr	r3, [r7, #8]
   27576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27578:	b2db      	uxtb	r3, r3
   2757a:	b29a      	uxth	r2, r3
   2757c:	683b      	ldr	r3, [r7, #0]
   2757e:	801a      	strh	r2, [r3, #0]
	}

	return retval;
   27580:	230f      	movs	r3, #15
   27582:	18fb      	adds	r3, r7, r3
   27584:	781b      	ldrb	r3, [r3, #0]
}
   27586:	0018      	movs	r0, r3
   27588:	46bd      	mov	sp, r7
   2758a:	b004      	add	sp, #16
   2758c:	bd80      	pop	{r7, pc}
   2758e:	46c0      	nop			; (mov r8, r8)
   27590:	0002749d 	.word	0x0002749d

00027594 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
   27594:	b590      	push	{r4, r7, lr}
   27596:	b089      	sub	sp, #36	; 0x24
   27598:	af00      	add	r7, sp, #0
   2759a:	6078      	str	r0, [r7, #4]
   2759c:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
   2759e:	230c      	movs	r3, #12
   275a0:	18fb      	adds	r3, r7, r3
   275a2:	2200      	movs	r2, #0
   275a4:	801a      	strh	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   275a6:	687b      	ldr	r3, [r7, #4]
   275a8:	681b      	ldr	r3, [r3, #0]
   275aa:	61fb      	str	r3, [r7, #28]

	/* Disable the module */
	spi_disable(module);
   275ac:	687b      	ldr	r3, [r7, #4]
   275ae:	0018      	movs	r0, r3
   275b0:	4b24      	ldr	r3, [pc, #144]	; (27644 <spi_set_baudrate+0xb0>)
   275b2:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   275b4:	46c0      	nop			; (mov r8, r8)
   275b6:	687b      	ldr	r3, [r7, #4]
   275b8:	0018      	movs	r0, r3
   275ba:	4b23      	ldr	r3, [pc, #140]	; (27648 <spi_set_baudrate+0xb4>)
   275bc:	4798      	blx	r3
   275be:	1e03      	subs	r3, r0, #0
   275c0:	d1f9      	bne.n	275b6 <spi_set_baudrate+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   275c2:	687b      	ldr	r3, [r7, #4]
   275c4:	681b      	ldr	r3, [r3, #0]
   275c6:	0018      	movs	r0, r3
   275c8:	4b20      	ldr	r3, [pc, #128]	; (2764c <spi_set_baudrate+0xb8>)
   275ca:	4798      	blx	r3
   275cc:	0003      	movs	r3, r0
   275ce:	61bb      	str	r3, [r7, #24]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   275d0:	69bb      	ldr	r3, [r7, #24]
   275d2:	3314      	adds	r3, #20
   275d4:	617b      	str	r3, [r7, #20]
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   275d6:	697b      	ldr	r3, [r7, #20]
   275d8:	b2db      	uxtb	r3, r3
   275da:	0018      	movs	r0, r3
   275dc:	4b1c      	ldr	r3, [pc, #112]	; (27650 <spi_set_baudrate+0xbc>)
   275de:	4798      	blx	r3
   275e0:	0003      	movs	r3, r0
   275e2:	613b      	str	r3, [r7, #16]

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
   275e4:	230f      	movs	r3, #15
   275e6:	18fc      	adds	r4, r7, r3
   275e8:	230c      	movs	r3, #12
   275ea:	18fa      	adds	r2, r7, r3
   275ec:	6939      	ldr	r1, [r7, #16]
   275ee:	683b      	ldr	r3, [r7, #0]
   275f0:	0018      	movs	r0, r3
   275f2:	4b18      	ldr	r3, [pc, #96]	; (27654 <spi_set_baudrate+0xc0>)
   275f4:	4798      	blx	r3
   275f6:	0003      	movs	r3, r0
   275f8:	7023      	strb	r3, [r4, #0]
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
   275fa:	230f      	movs	r3, #15
   275fc:	18fb      	adds	r3, r7, r3
   275fe:	781b      	ldrb	r3, [r3, #0]
   27600:	2b00      	cmp	r3, #0
   27602:	d001      	beq.n	27608 <spi_set_baudrate+0x74>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
   27604:	2317      	movs	r3, #23
   27606:	e018      	b.n	2763a <spi_set_baudrate+0xa6>
	}

	spi_module->BAUD.reg = (uint8_t)baud;
   27608:	230c      	movs	r3, #12
   2760a:	18fb      	adds	r3, r7, r3
   2760c:	881b      	ldrh	r3, [r3, #0]
   2760e:	b2da      	uxtb	r2, r3
   27610:	69fb      	ldr	r3, [r7, #28]
   27612:	731a      	strb	r2, [r3, #12]

	while (spi_is_syncing(module)) {
   27614:	46c0      	nop			; (mov r8, r8)
   27616:	687b      	ldr	r3, [r7, #4]
   27618:	0018      	movs	r0, r3
   2761a:	4b0b      	ldr	r3, [pc, #44]	; (27648 <spi_set_baudrate+0xb4>)
   2761c:	4798      	blx	r3
   2761e:	1e03      	subs	r3, r0, #0
   27620:	d1f9      	bne.n	27616 <spi_set_baudrate+0x82>
		/* Wait until the synchronization is complete */
	}

	/* Enable the module */
	spi_enable(module);
   27622:	687b      	ldr	r3, [r7, #4]
   27624:	0018      	movs	r0, r3
   27626:	4b0c      	ldr	r3, [pc, #48]	; (27658 <spi_set_baudrate+0xc4>)
   27628:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   2762a:	46c0      	nop			; (mov r8, r8)
   2762c:	687b      	ldr	r3, [r7, #4]
   2762e:	0018      	movs	r0, r3
   27630:	4b05      	ldr	r3, [pc, #20]	; (27648 <spi_set_baudrate+0xb4>)
   27632:	4798      	blx	r3
   27634:	1e03      	subs	r3, r0, #0
   27636:	d1f9      	bne.n	2762c <spi_set_baudrate+0x98>
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
   27638:	2300      	movs	r3, #0
}
   2763a:	0018      	movs	r0, r3
   2763c:	46bd      	mov	sp, r7
   2763e:	b009      	add	sp, #36	; 0x24
   27640:	bd90      	pop	{r4, r7, pc}
   27642:	46c0      	nop			; (mov r8, r8)
   27644:	000273f1 	.word	0x000273f1
   27648:	00027381 	.word	0x00027381
   2764c:	00026fed 	.word	0x00026fed
   27650:	000299a1 	.word	0x000299a1
   27654:	00026b67 	.word	0x00026b67
   27658:	000273a1 	.word	0x000273a1

0002765c <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
   2765c:	b590      	push	{r4, r7, lr}
   2765e:	b093      	sub	sp, #76	; 0x4c
   27660:	af00      	add	r7, sp, #0
   27662:	6078      	str	r0, [r7, #4]
   27664:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   27666:	687b      	ldr	r3, [r7, #4]
   27668:	681b      	ldr	r3, [r3, #0]
   2766a:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
   2766c:	687b      	ldr	r3, [r7, #4]
   2766e:	681b      	ldr	r3, [r3, #0]
   27670:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   27672:	231c      	movs	r3, #28
   27674:	18fb      	adds	r3, r7, r3
   27676:	0018      	movs	r0, r3
   27678:	4b75      	ldr	r3, [pc, #468]	; (27850 <_spi_set_config+0x1f4>)
   2767a:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   2767c:	231c      	movs	r3, #28
   2767e:	18fb      	adds	r3, r7, r3
   27680:	2200      	movs	r2, #0
   27682:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
   27684:	683b      	ldr	r3, [r7, #0]
   27686:	781b      	ldrb	r3, [r3, #0]
   27688:	2b00      	cmp	r3, #0
   2768a:	d103      	bne.n	27694 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   2768c:	231c      	movs	r3, #28
   2768e:	18fb      	adds	r3, r7, r3
   27690:	2200      	movs	r2, #0
   27692:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   27694:	683b      	ldr	r3, [r7, #0]
   27696:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
   27698:	230c      	movs	r3, #12
   2769a:	18fb      	adds	r3, r7, r3
   2769c:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   2769e:	683b      	ldr	r3, [r7, #0]
   276a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
   276a2:	230c      	movs	r3, #12
   276a4:	18fb      	adds	r3, r7, r3
   276a6:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   276a8:	683b      	ldr	r3, [r7, #0]
   276aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   276ac:	230c      	movs	r3, #12
   276ae:	18fb      	adds	r3, r7, r3
   276b0:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   276b2:	683b      	ldr	r3, [r7, #0]
   276b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   276b6:	230c      	movs	r3, #12
   276b8:	18fb      	adds	r3, r7, r3
   276ba:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   276bc:	2347      	movs	r3, #71	; 0x47
   276be:	18fb      	adds	r3, r7, r3
   276c0:	2200      	movs	r2, #0
   276c2:	701a      	strb	r2, [r3, #0]
   276c4:	e02c      	b.n	27720 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   276c6:	2347      	movs	r3, #71	; 0x47
   276c8:	18fb      	adds	r3, r7, r3
   276ca:	781a      	ldrb	r2, [r3, #0]
   276cc:	230c      	movs	r3, #12
   276ce:	18fb      	adds	r3, r7, r3
   276d0:	0092      	lsls	r2, r2, #2
   276d2:	58d3      	ldr	r3, [r2, r3]
   276d4:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   276d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   276d8:	2b00      	cmp	r3, #0
   276da:	d109      	bne.n	276f0 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   276dc:	2347      	movs	r3, #71	; 0x47
   276de:	18fb      	adds	r3, r7, r3
   276e0:	781a      	ldrb	r2, [r3, #0]
   276e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   276e4:	0011      	movs	r1, r2
   276e6:	0018      	movs	r0, r3
   276e8:	4b5a      	ldr	r3, [pc, #360]	; (27854 <_spi_set_config+0x1f8>)
   276ea:	4798      	blx	r3
   276ec:	0003      	movs	r3, r0
   276ee:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   276f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   276f2:	3301      	adds	r3, #1
   276f4:	d00d      	beq.n	27712 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   276f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   276f8:	b2da      	uxtb	r2, r3
   276fa:	231c      	movs	r3, #28
   276fc:	18fb      	adds	r3, r7, r3
   276fe:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   27700:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   27702:	0c1b      	lsrs	r3, r3, #16
   27704:	b2db      	uxtb	r3, r3
   27706:	221c      	movs	r2, #28
   27708:	18ba      	adds	r2, r7, r2
   2770a:	0011      	movs	r1, r2
   2770c:	0018      	movs	r0, r3
   2770e:	4b52      	ldr	r3, [pc, #328]	; (27858 <_spi_set_config+0x1fc>)
   27710:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   27712:	2347      	movs	r3, #71	; 0x47
   27714:	18fb      	adds	r3, r7, r3
   27716:	781a      	ldrb	r2, [r3, #0]
   27718:	2347      	movs	r3, #71	; 0x47
   2771a:	18fb      	adds	r3, r7, r3
   2771c:	3201      	adds	r2, #1
   2771e:	701a      	strb	r2, [r3, #0]
   27720:	2347      	movs	r3, #71	; 0x47
   27722:	18fb      	adds	r3, r7, r3
   27724:	781b      	ldrb	r3, [r3, #0]
   27726:	2b03      	cmp	r3, #3
   27728:	d9cd      	bls.n	276c6 <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
   2772a:	683b      	ldr	r3, [r7, #0]
   2772c:	781a      	ldrb	r2, [r3, #0]
   2772e:	687b      	ldr	r3, [r7, #4]
   27730:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
   27732:	683b      	ldr	r3, [r7, #0]
   27734:	7c1a      	ldrb	r2, [r3, #16]
   27736:	687b      	ldr	r3, [r7, #4]
   27738:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
   2773a:	683b      	ldr	r3, [r7, #0]
   2773c:	7c9a      	ldrb	r2, [r3, #18]
   2773e:	687b      	ldr	r3, [r7, #4]
   27740:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
   27742:	683b      	ldr	r3, [r7, #0]
   27744:	7d1a      	ldrb	r2, [r3, #20]
   27746:	687b      	ldr	r3, [r7, #4]
   27748:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
   2774a:	230a      	movs	r3, #10
   2774c:	18fb      	adds	r3, r7, r3
   2774e:	2200      	movs	r2, #0
   27750:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
   27752:	2300      	movs	r3, #0
   27754:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
   27756:	2300      	movs	r3, #0
   27758:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
   2775a:	683b      	ldr	r3, [r7, #0]
   2775c:	781b      	ldrb	r3, [r3, #0]
   2775e:	2b01      	cmp	r3, #1
   27760:	d129      	bne.n	277b6 <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   27762:	687b      	ldr	r3, [r7, #4]
   27764:	681b      	ldr	r3, [r3, #0]
   27766:	0018      	movs	r0, r3
   27768:	4b3c      	ldr	r3, [pc, #240]	; (2785c <_spi_set_config+0x200>)
   2776a:	4798      	blx	r3
   2776c:	0003      	movs	r3, r0
   2776e:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   27770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27772:	3314      	adds	r3, #20
   27774:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   27776:	6abb      	ldr	r3, [r7, #40]	; 0x28
   27778:	b2db      	uxtb	r3, r3
   2777a:	0018      	movs	r0, r3
   2777c:	4b38      	ldr	r3, [pc, #224]	; (27860 <_spi_set_config+0x204>)
   2777e:	4798      	blx	r3
   27780:	0003      	movs	r3, r0
   27782:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
   27784:	683b      	ldr	r3, [r7, #0]
   27786:	699b      	ldr	r3, [r3, #24]
   27788:	2223      	movs	r2, #35	; 0x23
   2778a:	18bc      	adds	r4, r7, r2
   2778c:	220a      	movs	r2, #10
   2778e:	18ba      	adds	r2, r7, r2
   27790:	6a79      	ldr	r1, [r7, #36]	; 0x24
   27792:	0018      	movs	r0, r3
   27794:	4b33      	ldr	r3, [pc, #204]	; (27864 <_spi_set_config+0x208>)
   27796:	4798      	blx	r3
   27798:	0003      	movs	r3, r0
   2779a:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
   2779c:	2323      	movs	r3, #35	; 0x23
   2779e:	18fb      	adds	r3, r7, r3
   277a0:	781b      	ldrb	r3, [r3, #0]
   277a2:	2b00      	cmp	r3, #0
   277a4:	d001      	beq.n	277aa <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
   277a6:	2317      	movs	r3, #23
   277a8:	e04e      	b.n	27848 <_spi_set_config+0x1ec>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
   277aa:	230a      	movs	r3, #10
   277ac:	18fb      	adds	r3, r7, r3
   277ae:	881b      	ldrh	r3, [r3, #0]
   277b0:	b2da      	uxtb	r2, r3
   277b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   277b4:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
   277b6:	683b      	ldr	r3, [r7, #0]
   277b8:	685b      	ldr	r3, [r3, #4]
   277ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   277bc:	4313      	orrs	r3, r2
   277be:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
   277c0:	683b      	ldr	r3, [r7, #0]
   277c2:	689b      	ldr	r3, [r3, #8]
   277c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   277c6:	4313      	orrs	r3, r2
   277c8:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
   277ca:	683b      	ldr	r3, [r7, #0]
   277cc:	68db      	ldr	r3, [r3, #12]
   277ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   277d0:	4313      	orrs	r3, r2
   277d2:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
   277d4:	683b      	ldr	r3, [r7, #0]
   277d6:	7c1b      	ldrb	r3, [r3, #16]
   277d8:	001a      	movs	r2, r3
   277da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   277dc:	4313      	orrs	r3, r2
   277de:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   277e0:	683b      	ldr	r3, [r7, #0]
   277e2:	7c5b      	ldrb	r3, [r3, #17]
   277e4:	2b00      	cmp	r3, #0
   277e6:	d103      	bne.n	277f0 <_spi_set_config+0x194>
   277e8:	4b1f      	ldr	r3, [pc, #124]	; (27868 <_spi_set_config+0x20c>)
   277ea:	4798      	blx	r3
   277ec:	1e03      	subs	r3, r0, #0
   277ee:	d003      	beq.n	277f8 <_spi_set_config+0x19c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
   277f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   277f2:	2280      	movs	r2, #128	; 0x80
   277f4:	4313      	orrs	r3, r2
   277f6:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
   277f8:	683b      	ldr	r3, [r7, #0]
   277fa:	7c9b      	ldrb	r3, [r3, #18]
   277fc:	2b00      	cmp	r3, #0
   277fe:	d004      	beq.n	2780a <_spi_set_config+0x1ae>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
   27800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   27802:	2280      	movs	r2, #128	; 0x80
   27804:	0292      	lsls	r2, r2, #10
   27806:	4313      	orrs	r3, r2
   27808:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
   2780a:	683b      	ldr	r3, [r7, #0]
   2780c:	7cdb      	ldrb	r3, [r3, #19]
   2780e:	2b00      	cmp	r3, #0
   27810:	d004      	beq.n	2781c <_spi_set_config+0x1c0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
   27812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   27814:	2280      	movs	r2, #128	; 0x80
   27816:	0092      	lsls	r2, r2, #2
   27818:	4313      	orrs	r3, r2
   2781a:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
   2781c:	683b      	ldr	r3, [r7, #0]
   2781e:	7d1b      	ldrb	r3, [r3, #20]
   27820:	2b00      	cmp	r3, #0
   27822:	d004      	beq.n	2782e <_spi_set_config+0x1d2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
   27824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   27826:	2280      	movs	r2, #128	; 0x80
   27828:	0192      	lsls	r2, r2, #6
   2782a:	4313      	orrs	r3, r2
   2782c:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
   2782e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   27830:	681a      	ldr	r2, [r3, #0]
   27832:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   27834:	431a      	orrs	r2, r3
   27836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   27838:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
   2783a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2783c:	685a      	ldr	r2, [r3, #4]
   2783e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   27840:	431a      	orrs	r2, r3
   27842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   27844:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
   27846:	2300      	movs	r3, #0
}
   27848:	0018      	movs	r0, r3
   2784a:	46bd      	mov	sp, r7
   2784c:	b013      	add	sp, #76	; 0x4c
   2784e:	bd90      	pop	{r4, r7, pc}
   27850:	00027191 	.word	0x00027191
   27854:	00026e31 	.word	0x00026e31
   27858:	00029bdd 	.word	0x00029bdd
   2785c:	00026fed 	.word	0x00026fed
   27860:	000299a1 	.word	0x000299a1
   27864:	00026b67 	.word	0x00026b67
   27868:	00027305 	.word	0x00027305

0002786c <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
   2786c:	b590      	push	{r4, r7, lr}
   2786e:	b08b      	sub	sp, #44	; 0x2c
   27870:	af00      	add	r7, sp, #0
   27872:	60f8      	str	r0, [r7, #12]
   27874:	60b9      	str	r1, [r7, #8]
   27876:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   27878:	68fb      	ldr	r3, [r7, #12]
   2787a:	68ba      	ldr	r2, [r7, #8]
   2787c:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   2787e:	68fb      	ldr	r3, [r7, #12]
   27880:	681b      	ldr	r3, [r3, #0]
   27882:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
   27884:	6a3b      	ldr	r3, [r7, #32]
   27886:	681b      	ldr	r3, [r3, #0]
   27888:	2202      	movs	r2, #2
   2788a:	4013      	ands	r3, r2
   2788c:	d001      	beq.n	27892 <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
   2788e:	231c      	movs	r3, #28
   27890:	e09c      	b.n	279cc <spi_init+0x160>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
   27892:	6a3b      	ldr	r3, [r7, #32]
   27894:	681b      	ldr	r3, [r3, #0]
   27896:	2201      	movs	r2, #1
   27898:	4013      	ands	r3, r2
   2789a:	d001      	beq.n	278a0 <spi_init+0x34>
		return STATUS_BUSY;
   2789c:	2305      	movs	r3, #5
   2789e:	e095      	b.n	279cc <spi_init+0x160>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   278a0:	68fb      	ldr	r3, [r7, #12]
   278a2:	681b      	ldr	r3, [r3, #0]
   278a4:	0018      	movs	r0, r3
   278a6:	4b4b      	ldr	r3, [pc, #300]	; (279d4 <spi_init+0x168>)
   278a8:	4798      	blx	r3
   278aa:	0003      	movs	r3, r0
   278ac:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   278ae:	69fb      	ldr	r3, [r7, #28]
   278b0:	3302      	adds	r3, #2
   278b2:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   278b4:	69fb      	ldr	r3, [r7, #28]
   278b6:	3314      	adds	r3, #20
   278b8:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   278ba:	2201      	movs	r2, #1
   278bc:	69bb      	ldr	r3, [r7, #24]
   278be:	409a      	lsls	r2, r3
   278c0:	0013      	movs	r3, r2
   278c2:	0019      	movs	r1, r3
   278c4:	2002      	movs	r0, #2
   278c6:	4b44      	ldr	r3, [pc, #272]	; (279d8 <spi_init+0x16c>)
   278c8:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   278ca:	2310      	movs	r3, #16
   278cc:	18fb      	adds	r3, r7, r3
   278ce:	0018      	movs	r0, r3
   278d0:	4b42      	ldr	r3, [pc, #264]	; (279dc <spi_init+0x170>)
   278d2:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   278d4:	687b      	ldr	r3, [r7, #4]
   278d6:	2224      	movs	r2, #36	; 0x24
   278d8:	5c9a      	ldrb	r2, [r3, r2]
   278da:	2310      	movs	r3, #16
   278dc:	18fb      	adds	r3, r7, r3
   278de:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   278e0:	697b      	ldr	r3, [r7, #20]
   278e2:	b2db      	uxtb	r3, r3
   278e4:	2210      	movs	r2, #16
   278e6:	18ba      	adds	r2, r7, r2
   278e8:	0011      	movs	r1, r2
   278ea:	0018      	movs	r0, r3
   278ec:	4b3c      	ldr	r3, [pc, #240]	; (279e0 <spi_init+0x174>)
   278ee:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   278f0:	697b      	ldr	r3, [r7, #20]
   278f2:	b2db      	uxtb	r3, r3
   278f4:	0018      	movs	r0, r3
   278f6:	4b3b      	ldr	r3, [pc, #236]	; (279e4 <spi_init+0x178>)
   278f8:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   278fa:	687b      	ldr	r3, [r7, #4]
   278fc:	2224      	movs	r2, #36	; 0x24
   278fe:	5c9b      	ldrb	r3, [r3, r2]
   27900:	2100      	movs	r1, #0
   27902:	0018      	movs	r0, r3
   27904:	4b38      	ldr	r3, [pc, #224]	; (279e8 <spi_init+0x17c>)
   27906:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
   27908:	687b      	ldr	r3, [r7, #4]
   2790a:	781b      	ldrb	r3, [r3, #0]
   2790c:	2b01      	cmp	r3, #1
   2790e:	d105      	bne.n	2791c <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
   27910:	6a3b      	ldr	r3, [r7, #32]
   27912:	681b      	ldr	r3, [r3, #0]
   27914:	220c      	movs	r2, #12
   27916:	431a      	orrs	r2, r3
   27918:	6a3b      	ldr	r3, [r7, #32]
   2791a:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   2791c:	2327      	movs	r3, #39	; 0x27
   2791e:	18fb      	adds	r3, r7, r3
   27920:	2200      	movs	r2, #0
   27922:	701a      	strb	r2, [r3, #0]
   27924:	e010      	b.n	27948 <spi_init+0xdc>
		module->callback[i]        = NULL;
   27926:	2327      	movs	r3, #39	; 0x27
   27928:	18fb      	adds	r3, r7, r3
   2792a:	781b      	ldrb	r3, [r3, #0]
   2792c:	68fa      	ldr	r2, [r7, #12]
   2792e:	3302      	adds	r3, #2
   27930:	009b      	lsls	r3, r3, #2
   27932:	18d3      	adds	r3, r2, r3
   27934:	3304      	adds	r3, #4
   27936:	2200      	movs	r2, #0
   27938:	601a      	str	r2, [r3, #0]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   2793a:	2327      	movs	r3, #39	; 0x27
   2793c:	18fb      	adds	r3, r7, r3
   2793e:	781a      	ldrb	r2, [r3, #0]
   27940:	2327      	movs	r3, #39	; 0x27
   27942:	18fb      	adds	r3, r7, r3
   27944:	3201      	adds	r2, #1
   27946:	701a      	strb	r2, [r3, #0]
   27948:	2327      	movs	r3, #39	; 0x27
   2794a:	18fb      	adds	r3, r7, r3
   2794c:	781b      	ldrb	r3, [r3, #0]
   2794e:	2b06      	cmp	r3, #6
   27950:	d9e9      	bls.n	27926 <spi_init+0xba>
	}
	module->tx_buffer_ptr              = NULL;
   27952:	68fb      	ldr	r3, [r7, #12]
   27954:	2200      	movs	r2, #0
   27956:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
   27958:	68fb      	ldr	r3, [r7, #12]
   2795a:	2200      	movs	r2, #0
   2795c:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
   2795e:	68fb      	ldr	r3, [r7, #12]
   27960:	2200      	movs	r2, #0
   27962:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
   27964:	68fb      	ldr	r3, [r7, #12]
   27966:	2200      	movs	r2, #0
   27968:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
   2796a:	68fb      	ldr	r3, [r7, #12]
   2796c:	2236      	movs	r2, #54	; 0x36
   2796e:	2100      	movs	r1, #0
   27970:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
   27972:	68fb      	ldr	r3, [r7, #12]
   27974:	2237      	movs	r2, #55	; 0x37
   27976:	2100      	movs	r1, #0
   27978:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
   2797a:	68fb      	ldr	r3, [r7, #12]
   2797c:	2238      	movs	r2, #56	; 0x38
   2797e:	2100      	movs	r1, #0
   27980:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
   27982:	68fb      	ldr	r3, [r7, #12]
   27984:	2203      	movs	r2, #3
   27986:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
   27988:	68fb      	ldr	r3, [r7, #12]
   2798a:	2200      	movs	r2, #0
   2798c:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
   2798e:	68fb      	ldr	r3, [r7, #12]
   27990:	681b      	ldr	r3, [r3, #0]
   27992:	2213      	movs	r2, #19
   27994:	18bc      	adds	r4, r7, r2
   27996:	0018      	movs	r0, r3
   27998:	4b0e      	ldr	r3, [pc, #56]	; (279d4 <spi_init+0x168>)
   2799a:	4798      	blx	r3
   2799c:	0003      	movs	r3, r0
   2799e:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
   279a0:	4a12      	ldr	r2, [pc, #72]	; (279ec <spi_init+0x180>)
   279a2:	2313      	movs	r3, #19
   279a4:	18fb      	adds	r3, r7, r3
   279a6:	781b      	ldrb	r3, [r3, #0]
   279a8:	0011      	movs	r1, r2
   279aa:	0018      	movs	r0, r3
   279ac:	4b10      	ldr	r3, [pc, #64]	; (279f0 <spi_init+0x184>)
   279ae:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   279b0:	2313      	movs	r3, #19
   279b2:	18fb      	adds	r3, r7, r3
   279b4:	781a      	ldrb	r2, [r3, #0]
   279b6:	4b0f      	ldr	r3, [pc, #60]	; (279f4 <spi_init+0x188>)
   279b8:	0092      	lsls	r2, r2, #2
   279ba:	68f9      	ldr	r1, [r7, #12]
   279bc:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
   279be:	687a      	ldr	r2, [r7, #4]
   279c0:	68fb      	ldr	r3, [r7, #12]
   279c2:	0011      	movs	r1, r2
   279c4:	0018      	movs	r0, r3
   279c6:	4b0c      	ldr	r3, [pc, #48]	; (279f8 <spi_init+0x18c>)
   279c8:	4798      	blx	r3
   279ca:	0003      	movs	r3, r0
}
   279cc:	0018      	movs	r0, r3
   279ce:	46bd      	mov	sp, r7
   279d0:	b00b      	add	sp, #44	; 0x2c
   279d2:	bd90      	pop	{r4, r7, pc}
   279d4:	00026fed 	.word	0x00026fed
   279d8:	000272a9 	.word	0x000272a9
   279dc:	00027291 	.word	0x00027291
   279e0:	0002987d 	.word	0x0002987d
   279e4:	000298c1 	.word	0x000298c1
   279e8:	00026da5 	.word	0x00026da5
   279ec:	00027ec5 	.word	0x00027ec5
   279f0:	00027051 	.word	0x00027051
   279f4:	20005528 	.word	0x20005528
   279f8:	0002765d 	.word	0x0002765d

000279fc <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
   279fc:	b590      	push	{r4, r7, lr}
   279fe:	b087      	sub	sp, #28
   27a00:	af00      	add	r7, sp, #0
   27a02:	60f8      	str	r0, [r7, #12]
   27a04:	60b9      	str	r1, [r7, #8]
   27a06:	0019      	movs	r1, r3
   27a08:	1dbb      	adds	r3, r7, #6
   27a0a:	801a      	strh	r2, [r3, #0]
   27a0c:	1d3b      	adds	r3, r7, #4
   27a0e:	1c0a      	adds	r2, r1, #0
   27a10:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   27a12:	68fb      	ldr	r3, [r7, #12]
   27a14:	2238      	movs	r2, #56	; 0x38
   27a16:	5c9b      	ldrb	r3, [r3, r2]
   27a18:	b2db      	uxtb	r3, r3
   27a1a:	2b05      	cmp	r3, #5
   27a1c:	d101      	bne.n	27a22 <spi_read_buffer_wait+0x26>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   27a1e:	2305      	movs	r3, #5
   27a20:	e07a      	b.n	27b18 <spi_read_buffer_wait+0x11c>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
   27a22:	1dbb      	adds	r3, r7, #6
   27a24:	881b      	ldrh	r3, [r3, #0]
   27a26:	2b00      	cmp	r3, #0
   27a28:	d101      	bne.n	27a2e <spi_read_buffer_wait+0x32>
		return STATUS_ERR_INVALID_ARG;
   27a2a:	2317      	movs	r3, #23
   27a2c:	e074      	b.n	27b18 <spi_read_buffer_wait+0x11c>
	}

	if (!(module->receiver_enabled)) {
   27a2e:	68fb      	ldr	r3, [r7, #12]
   27a30:	79db      	ldrb	r3, [r3, #7]
   27a32:	2201      	movs	r2, #1
   27a34:	4053      	eors	r3, r2
   27a36:	b2db      	uxtb	r3, r3
   27a38:	2b00      	cmp	r3, #0
   27a3a:	d001      	beq.n	27a40 <spi_read_buffer_wait+0x44>
		return STATUS_ERR_DENIED;
   27a3c:	231c      	movs	r3, #28
   27a3e:	e06b      	b.n	27b18 <spi_read_buffer_wait+0x11c>
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;
   27a40:	2316      	movs	r3, #22
   27a42:	18fb      	adds	r3, r7, r3
   27a44:	2200      	movs	r2, #0
   27a46:	801a      	strh	r2, [r3, #0]

	while (length--) {
   27a48:	e05e      	b.n	27b08 <spi_read_buffer_wait+0x10c>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
   27a4a:	68fb      	ldr	r3, [r7, #12]
   27a4c:	795b      	ldrb	r3, [r3, #5]
   27a4e:	2b01      	cmp	r3, #1
   27a50:	d112      	bne.n	27a78 <spi_read_buffer_wait+0x7c>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
   27a52:	46c0      	nop			; (mov r8, r8)
   27a54:	68fb      	ldr	r3, [r7, #12]
   27a56:	0018      	movs	r0, r3
   27a58:	4b31      	ldr	r3, [pc, #196]	; (27b20 <spi_read_buffer_wait+0x124>)
   27a5a:	4798      	blx	r3
   27a5c:	0003      	movs	r3, r0
   27a5e:	001a      	movs	r2, r3
   27a60:	2301      	movs	r3, #1
   27a62:	4053      	eors	r3, r2
   27a64:	b2db      	uxtb	r3, r3
   27a66:	2b00      	cmp	r3, #0
   27a68:	d1f4      	bne.n	27a54 <spi_read_buffer_wait+0x58>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
   27a6a:	1d3b      	adds	r3, r7, #4
   27a6c:	881a      	ldrh	r2, [r3, #0]
   27a6e:	68fb      	ldr	r3, [r7, #12]
   27a70:	0011      	movs	r1, r2
   27a72:	0018      	movs	r0, r3
   27a74:	4b2b      	ldr	r3, [pc, #172]	; (27b24 <spi_read_buffer_wait+0x128>)
   27a76:	4798      	blx	r3
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
   27a78:	46c0      	nop			; (mov r8, r8)
   27a7a:	68fb      	ldr	r3, [r7, #12]
   27a7c:	0018      	movs	r0, r3
   27a7e:	4b2a      	ldr	r3, [pc, #168]	; (27b28 <spi_read_buffer_wait+0x12c>)
   27a80:	4798      	blx	r3
   27a82:	0003      	movs	r3, r0
   27a84:	001a      	movs	r2, r3
   27a86:	2301      	movs	r3, #1
   27a88:	4053      	eors	r3, r2
   27a8a:	b2db      	uxtb	r3, r3
   27a8c:	2b00      	cmp	r3, #0
   27a8e:	d1f4      	bne.n	27a7a <spi_read_buffer_wait+0x7e>
		}

		uint16_t received_data = 0;
   27a90:	2312      	movs	r3, #18
   27a92:	18fb      	adds	r3, r7, r3
   27a94:	2200      	movs	r2, #0
   27a96:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
   27a98:	2315      	movs	r3, #21
   27a9a:	18fc      	adds	r4, r7, r3
   27a9c:	2312      	movs	r3, #18
   27a9e:	18fa      	adds	r2, r7, r3
   27aa0:	68fb      	ldr	r3, [r7, #12]
   27aa2:	0011      	movs	r1, r2
   27aa4:	0018      	movs	r0, r3
   27aa6:	4b21      	ldr	r3, [pc, #132]	; (27b2c <spi_read_buffer_wait+0x130>)
   27aa8:	4798      	blx	r3
   27aaa:	0003      	movs	r3, r0
   27aac:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
   27aae:	2315      	movs	r3, #21
   27ab0:	18fb      	adds	r3, r7, r3
   27ab2:	781b      	ldrb	r3, [r3, #0]
   27ab4:	2b00      	cmp	r3, #0
   27ab6:	d003      	beq.n	27ac0 <spi_read_buffer_wait+0xc4>
			/* Overflow, abort */
			return retval;
   27ab8:	2315      	movs	r3, #21
   27aba:	18fb      	adds	r3, r7, r3
   27abc:	781b      	ldrb	r3, [r3, #0]
   27abe:	e02b      	b.n	27b18 <spi_read_buffer_wait+0x11c>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
   27ac0:	2316      	movs	r3, #22
   27ac2:	18fb      	adds	r3, r7, r3
   27ac4:	881b      	ldrh	r3, [r3, #0]
   27ac6:	2216      	movs	r2, #22
   27ac8:	18ba      	adds	r2, r7, r2
   27aca:	1c59      	adds	r1, r3, #1
   27acc:	8011      	strh	r1, [r2, #0]
   27ace:	001a      	movs	r2, r3
   27ad0:	68bb      	ldr	r3, [r7, #8]
   27ad2:	189b      	adds	r3, r3, r2
   27ad4:	2212      	movs	r2, #18
   27ad6:	18ba      	adds	r2, r7, r2
   27ad8:	8812      	ldrh	r2, [r2, #0]
   27ada:	b2d2      	uxtb	r2, r2
   27adc:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   27ade:	68fb      	ldr	r3, [r7, #12]
   27ae0:	799b      	ldrb	r3, [r3, #6]
   27ae2:	2b01      	cmp	r3, #1
   27ae4:	d110      	bne.n	27b08 <spi_read_buffer_wait+0x10c>
			rx_data[rx_pos++] = (received_data >> 8);
   27ae6:	2316      	movs	r3, #22
   27ae8:	18fb      	adds	r3, r7, r3
   27aea:	881b      	ldrh	r3, [r3, #0]
   27aec:	2216      	movs	r2, #22
   27aee:	18ba      	adds	r2, r7, r2
   27af0:	1c59      	adds	r1, r3, #1
   27af2:	8011      	strh	r1, [r2, #0]
   27af4:	001a      	movs	r2, r3
   27af6:	68bb      	ldr	r3, [r7, #8]
   27af8:	189b      	adds	r3, r3, r2
   27afa:	2212      	movs	r2, #18
   27afc:	18ba      	adds	r2, r7, r2
   27afe:	8812      	ldrh	r2, [r2, #0]
   27b00:	0a12      	lsrs	r2, r2, #8
   27b02:	b292      	uxth	r2, r2
   27b04:	b2d2      	uxtb	r2, r2
   27b06:	701a      	strb	r2, [r3, #0]
	while (length--) {
   27b08:	1dbb      	adds	r3, r7, #6
   27b0a:	881b      	ldrh	r3, [r3, #0]
   27b0c:	1dba      	adds	r2, r7, #6
   27b0e:	1e59      	subs	r1, r3, #1
   27b10:	8011      	strh	r1, [r2, #0]
   27b12:	2b00      	cmp	r3, #0
   27b14:	d199      	bne.n	27a4a <spi_read_buffer_wait+0x4e>
		}
	}

	return STATUS_OK;
   27b16:	2300      	movs	r3, #0
}
   27b18:	0018      	movs	r0, r3
   27b1a:	46bd      	mov	sp, r7
   27b1c:	b007      	add	sp, #28
   27b1e:	bd90      	pop	{r4, r7, pc}
   27b20:	00027475 	.word	0x00027475
   27b24:	000274c5 	.word	0x000274c5
   27b28:	0002749d 	.word	0x0002749d
   27b2c:	0002750d 	.word	0x0002750d

00027b30 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
   27b30:	b580      	push	{r7, lr}
   27b32:	b086      	sub	sp, #24
   27b34:	af00      	add	r7, sp, #0
   27b36:	60f8      	str	r0, [r7, #12]
   27b38:	60b9      	str	r1, [r7, #8]
   27b3a:	1dfb      	adds	r3, r7, #7
   27b3c:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
   27b3e:	68fb      	ldr	r3, [r7, #12]
   27b40:	795b      	ldrb	r3, [r3, #5]
   27b42:	2b01      	cmp	r3, #1
   27b44:	d001      	beq.n	27b4a <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
   27b46:	2315      	movs	r3, #21
   27b48:	e05c      	b.n	27c04 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
   27b4a:	68fb      	ldr	r3, [r7, #12]
   27b4c:	7a1b      	ldrb	r3, [r3, #8]
   27b4e:	2201      	movs	r2, #1
   27b50:	4053      	eors	r3, r2
   27b52:	b2db      	uxtb	r3, r3
   27b54:	2b00      	cmp	r3, #0
   27b56:	d054      	beq.n	27c02 <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
   27b58:	1dfb      	adds	r3, r7, #7
   27b5a:	781b      	ldrb	r3, [r3, #0]
   27b5c:	2b00      	cmp	r3, #0
   27b5e:	d04a      	beq.n	27bf6 <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
   27b60:	68bb      	ldr	r3, [r7, #8]
   27b62:	785b      	ldrb	r3, [r3, #1]
   27b64:	2b00      	cmp	r3, #0
   27b66:	d03f      	beq.n	27be8 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
   27b68:	68fb      	ldr	r3, [r7, #12]
   27b6a:	0018      	movs	r0, r3
   27b6c:	4b27      	ldr	r3, [pc, #156]	; (27c0c <spi_select_slave+0xdc>)
   27b6e:	4798      	blx	r3
   27b70:	0003      	movs	r3, r0
   27b72:	001a      	movs	r2, r3
   27b74:	2301      	movs	r3, #1
   27b76:	4053      	eors	r3, r2
   27b78:	b2db      	uxtb	r3, r3
   27b7a:	2b00      	cmp	r3, #0
   27b7c:	d007      	beq.n	27b8e <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
   27b7e:	68bb      	ldr	r3, [r7, #8]
   27b80:	781b      	ldrb	r3, [r3, #0]
   27b82:	2101      	movs	r1, #1
   27b84:	0018      	movs	r0, r3
   27b86:	4b22      	ldr	r3, [pc, #136]	; (27c10 <spi_select_slave+0xe0>)
   27b88:	4798      	blx	r3
					return STATUS_BUSY;
   27b8a:	2305      	movs	r3, #5
   27b8c:	e03a      	b.n	27c04 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   27b8e:	68bb      	ldr	r3, [r7, #8]
   27b90:	781b      	ldrb	r3, [r3, #0]
   27b92:	2100      	movs	r1, #0
   27b94:	0018      	movs	r0, r3
   27b96:	4b1e      	ldr	r3, [pc, #120]	; (27c10 <spi_select_slave+0xe0>)
   27b98:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
   27b9a:	68bb      	ldr	r3, [r7, #8]
   27b9c:	789b      	ldrb	r3, [r3, #2]
   27b9e:	b29a      	uxth	r2, r3
   27ba0:	68fb      	ldr	r3, [r7, #12]
   27ba2:	0011      	movs	r1, r2
   27ba4:	0018      	movs	r0, r3
   27ba6:	4b1b      	ldr	r3, [pc, #108]	; (27c14 <spi_select_slave+0xe4>)
   27ba8:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
   27baa:	68fb      	ldr	r3, [r7, #12]
   27bac:	79db      	ldrb	r3, [r3, #7]
   27bae:	2201      	movs	r2, #1
   27bb0:	4053      	eors	r3, r2
   27bb2:	b2db      	uxtb	r3, r3
   27bb4:	2b00      	cmp	r3, #0
   27bb6:	d024      	beq.n	27c02 <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
   27bb8:	46c0      	nop			; (mov r8, r8)
   27bba:	68fb      	ldr	r3, [r7, #12]
   27bbc:	0018      	movs	r0, r3
   27bbe:	4b16      	ldr	r3, [pc, #88]	; (27c18 <spi_select_slave+0xe8>)
   27bc0:	4798      	blx	r3
   27bc2:	0003      	movs	r3, r0
   27bc4:	001a      	movs	r2, r3
   27bc6:	2301      	movs	r3, #1
   27bc8:	4053      	eors	r3, r2
   27bca:	b2db      	uxtb	r3, r3
   27bcc:	2b00      	cmp	r3, #0
   27bce:	d1f4      	bne.n	27bba <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
   27bd0:	2316      	movs	r3, #22
   27bd2:	18fb      	adds	r3, r7, r3
   27bd4:	2200      	movs	r2, #0
   27bd6:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
   27bd8:	2316      	movs	r3, #22
   27bda:	18fa      	adds	r2, r7, r3
   27bdc:	68fb      	ldr	r3, [r7, #12]
   27bde:	0011      	movs	r1, r2
   27be0:	0018      	movs	r0, r3
   27be2:	4b0e      	ldr	r3, [pc, #56]	; (27c1c <spi_select_slave+0xec>)
   27be4:	4798      	blx	r3
   27be6:	e00c      	b.n	27c02 <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   27be8:	68bb      	ldr	r3, [r7, #8]
   27bea:	781b      	ldrb	r3, [r3, #0]
   27bec:	2100      	movs	r1, #0
   27bee:	0018      	movs	r0, r3
   27bf0:	4b07      	ldr	r3, [pc, #28]	; (27c10 <spi_select_slave+0xe0>)
   27bf2:	4798      	blx	r3
   27bf4:	e005      	b.n	27c02 <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
   27bf6:	68bb      	ldr	r3, [r7, #8]
   27bf8:	781b      	ldrb	r3, [r3, #0]
   27bfa:	2101      	movs	r1, #1
   27bfc:	0018      	movs	r0, r3
   27bfe:	4b04      	ldr	r3, [pc, #16]	; (27c10 <spi_select_slave+0xe0>)
   27c00:	4798      	blx	r3
		}
	}
	return STATUS_OK;
   27c02:	2300      	movs	r3, #0
}
   27c04:	0018      	movs	r0, r3
   27c06:	46bd      	mov	sp, r7
   27c08:	b006      	add	sp, #24
   27c0a:	bd80      	pop	{r7, pc}
   27c0c:	00027475 	.word	0x00027475
   27c10:	0002723d 	.word	0x0002723d
   27c14:	000274c5 	.word	0x000274c5
   27c18:	0002749d 	.word	0x0002749d
   27c1c:	0002750d 	.word	0x0002750d

00027c20 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
   27c20:	b580      	push	{r7, lr}
   27c22:	b086      	sub	sp, #24
   27c24:	af00      	add	r7, sp, #0
   27c26:	60f8      	str	r0, [r7, #12]
   27c28:	60b9      	str	r1, [r7, #8]
   27c2a:	1dbb      	adds	r3, r7, #6
   27c2c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   27c2e:	68fb      	ldr	r3, [r7, #12]
   27c30:	2238      	movs	r2, #56	; 0x38
   27c32:	5c9b      	ldrb	r3, [r3, r2]
   27c34:	b2db      	uxtb	r3, r3
   27c36:	2b05      	cmp	r3, #5
   27c38:	d101      	bne.n	27c3e <spi_write_buffer_wait+0x1e>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   27c3a:	2305      	movs	r3, #5
   27c3c:	e087      	b.n	27d4e <spi_write_buffer_wait+0x12e>
	}
#  endif

	if (length == 0) {
   27c3e:	1dbb      	adds	r3, r7, #6
   27c40:	881b      	ldrh	r3, [r3, #0]
   27c42:	2b00      	cmp	r3, #0
   27c44:	d101      	bne.n	27c4a <spi_write_buffer_wait+0x2a>
		return STATUS_ERR_INVALID_ARG;
   27c46:	2317      	movs	r3, #23
   27c48:	e081      	b.n	27d4e <spi_write_buffer_wait+0x12e>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif

	uint16_t tx_pos = 0;
   27c4a:	2316      	movs	r3, #22
   27c4c:	18fb      	adds	r3, r7, r3
   27c4e:	2200      	movs	r2, #0
   27c50:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
   27c52:	2314      	movs	r3, #20
   27c54:	18fb      	adds	r3, r7, r3
   27c56:	1dba      	adds	r2, r7, #6
   27c58:	8812      	ldrh	r2, [r2, #0]
   27c5a:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
   27c5c:	e05f      	b.n	27d1e <spi_write_buffer_wait+0xfe>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
   27c5e:	46c0      	nop			; (mov r8, r8)
   27c60:	68fb      	ldr	r3, [r7, #12]
   27c62:	0018      	movs	r0, r3
   27c64:	4b3c      	ldr	r3, [pc, #240]	; (27d58 <spi_write_buffer_wait+0x138>)
   27c66:	4798      	blx	r3
   27c68:	0003      	movs	r3, r0
   27c6a:	001a      	movs	r2, r3
   27c6c:	2301      	movs	r3, #1
   27c6e:	4053      	eors	r3, r2
   27c70:	b2db      	uxtb	r3, r3
   27c72:	2b00      	cmp	r3, #0
   27c74:	d1f4      	bne.n	27c60 <spi_write_buffer_wait+0x40>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
   27c76:	2316      	movs	r3, #22
   27c78:	18fb      	adds	r3, r7, r3
   27c7a:	881b      	ldrh	r3, [r3, #0]
   27c7c:	2216      	movs	r2, #22
   27c7e:	18ba      	adds	r2, r7, r2
   27c80:	1c59      	adds	r1, r3, #1
   27c82:	8011      	strh	r1, [r2, #0]
   27c84:	001a      	movs	r2, r3
   27c86:	68bb      	ldr	r3, [r7, #8]
   27c88:	189b      	adds	r3, r3, r2
   27c8a:	781a      	ldrb	r2, [r3, #0]
   27c8c:	2312      	movs	r3, #18
   27c8e:	18fb      	adds	r3, r7, r3
   27c90:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   27c92:	68fb      	ldr	r3, [r7, #12]
   27c94:	799b      	ldrb	r3, [r3, #6]
   27c96:	2b01      	cmp	r3, #1
   27c98:	d115      	bne.n	27cc6 <spi_write_buffer_wait+0xa6>
			data_to_send |= (tx_data[tx_pos++] << 8);
   27c9a:	2316      	movs	r3, #22
   27c9c:	18fb      	adds	r3, r7, r3
   27c9e:	881b      	ldrh	r3, [r3, #0]
   27ca0:	2216      	movs	r2, #22
   27ca2:	18ba      	adds	r2, r7, r2
   27ca4:	1c59      	adds	r1, r3, #1
   27ca6:	8011      	strh	r1, [r2, #0]
   27ca8:	001a      	movs	r2, r3
   27caa:	68bb      	ldr	r3, [r7, #8]
   27cac:	189b      	adds	r3, r3, r2
   27cae:	781b      	ldrb	r3, [r3, #0]
   27cb0:	021b      	lsls	r3, r3, #8
   27cb2:	b21a      	sxth	r2, r3
   27cb4:	2312      	movs	r3, #18
   27cb6:	18fb      	adds	r3, r7, r3
   27cb8:	2100      	movs	r1, #0
   27cba:	5e5b      	ldrsh	r3, [r3, r1]
   27cbc:	4313      	orrs	r3, r2
   27cbe:	b21a      	sxth	r2, r3
   27cc0:	2312      	movs	r3, #18
   27cc2:	18fb      	adds	r3, r7, r3
   27cc4:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
   27cc6:	2312      	movs	r3, #18
   27cc8:	18fb      	adds	r3, r7, r3
   27cca:	881a      	ldrh	r2, [r3, #0]
   27ccc:	68fb      	ldr	r3, [r7, #12]
   27cce:	0011      	movs	r1, r2
   27cd0:	0018      	movs	r0, r3
   27cd2:	4b22      	ldr	r3, [pc, #136]	; (27d5c <spi_write_buffer_wait+0x13c>)
   27cd4:	4798      	blx	r3

		if (module->receiver_enabled) {
   27cd6:	68fb      	ldr	r3, [r7, #12]
   27cd8:	79db      	ldrb	r3, [r3, #7]
   27cda:	2214      	movs	r2, #20
   27cdc:	18ba      	adds	r2, r7, r2
   27cde:	2114      	movs	r1, #20
   27ce0:	1879      	adds	r1, r7, r1
   27ce2:	8809      	ldrh	r1, [r1, #0]
   27ce4:	8011      	strh	r1, [r2, #0]
   27ce6:	2b00      	cmp	r3, #0
   27ce8:	d019      	beq.n	27d1e <spi_write_buffer_wait+0xfe>
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
   27cea:	46c0      	nop			; (mov r8, r8)
   27cec:	68fb      	ldr	r3, [r7, #12]
   27cee:	0018      	movs	r0, r3
   27cf0:	4b1b      	ldr	r3, [pc, #108]	; (27d60 <spi_write_buffer_wait+0x140>)
   27cf2:	4798      	blx	r3
   27cf4:	0003      	movs	r3, r0
   27cf6:	001a      	movs	r2, r3
   27cf8:	2301      	movs	r3, #1
   27cfa:	4053      	eors	r3, r2
   27cfc:	b2db      	uxtb	r3, r3
   27cfe:	2b00      	cmp	r3, #0
   27d00:	d1f4      	bne.n	27cec <spi_write_buffer_wait+0xcc>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
   27d02:	2310      	movs	r3, #16
   27d04:	18fa      	adds	r2, r7, r3
   27d06:	68fb      	ldr	r3, [r7, #12]
   27d08:	0011      	movs	r1, r2
   27d0a:	0018      	movs	r0, r3
   27d0c:	4b15      	ldr	r3, [pc, #84]	; (27d64 <spi_write_buffer_wait+0x144>)
   27d0e:	4798      	blx	r3
			flush_length--;
   27d10:	2314      	movs	r3, #20
   27d12:	18fb      	adds	r3, r7, r3
   27d14:	881a      	ldrh	r2, [r3, #0]
   27d16:	2314      	movs	r3, #20
   27d18:	18fb      	adds	r3, r7, r3
   27d1a:	3a01      	subs	r2, #1
   27d1c:	801a      	strh	r2, [r3, #0]
	while (length--) {
   27d1e:	1dbb      	adds	r3, r7, #6
   27d20:	881b      	ldrh	r3, [r3, #0]
   27d22:	1dba      	adds	r2, r7, #6
   27d24:	1e59      	subs	r1, r3, #1
   27d26:	8011      	strh	r1, [r2, #0]
   27d28:	2b00      	cmp	r3, #0
   27d2a:	d198      	bne.n	27c5e <spi_write_buffer_wait+0x3e>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
   27d2c:	68fb      	ldr	r3, [r7, #12]
   27d2e:	795b      	ldrb	r3, [r3, #5]
   27d30:	2b01      	cmp	r3, #1
   27d32:	d10b      	bne.n	27d4c <spi_write_buffer_wait+0x12c>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
   27d34:	46c0      	nop			; (mov r8, r8)
   27d36:	68fb      	ldr	r3, [r7, #12]
   27d38:	0018      	movs	r0, r3
   27d3a:	4b0b      	ldr	r3, [pc, #44]	; (27d68 <spi_write_buffer_wait+0x148>)
   27d3c:	4798      	blx	r3
   27d3e:	0003      	movs	r3, r0
   27d40:	001a      	movs	r2, r3
   27d42:	2301      	movs	r3, #1
   27d44:	4053      	eors	r3, r2
   27d46:	b2db      	uxtb	r3, r3
   27d48:	2b00      	cmp	r3, #0
   27d4a:	d1f4      	bne.n	27d36 <spi_write_buffer_wait+0x116>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
   27d4c:	2300      	movs	r3, #0
}
   27d4e:	0018      	movs	r0, r3
   27d50:	46bd      	mov	sp, r7
   27d52:	b006      	add	sp, #24
   27d54:	bd80      	pop	{r7, pc}
   27d56:	46c0      	nop			; (mov r8, r8)
   27d58:	00027475 	.word	0x00027475
   27d5c:	000274c5 	.word	0x000274c5
   27d60:	0002749d 	.word	0x0002749d
   27d64:	0002750d 	.word	0x0002750d
   27d68:	0002744d 	.word	0x0002744d

00027d6c <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
   27d6c:	b580      	push	{r7, lr}
   27d6e:	b084      	sub	sp, #16
   27d70:	af00      	add	r7, sp, #0
   27d72:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   27d74:	687b      	ldr	r3, [r7, #4]
   27d76:	681b      	ldr	r3, [r3, #0]
   27d78:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
   27d7a:	687b      	ldr	r3, [r7, #4]
   27d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   27d7e:	781b      	ldrb	r3, [r3, #0]
   27d80:	b2da      	uxtb	r2, r3
   27d82:	230e      	movs	r3, #14
   27d84:	18fb      	adds	r3, r7, r3
   27d86:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
   27d88:	687b      	ldr	r3, [r7, #4]
   27d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   27d8c:	1c5a      	adds	r2, r3, #1
   27d8e:	687b      	ldr	r3, [r7, #4]
   27d90:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   27d92:	687b      	ldr	r3, [r7, #4]
   27d94:	799b      	ldrb	r3, [r3, #6]
   27d96:	2b01      	cmp	r3, #1
   27d98:	d113      	bne.n	27dc2 <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
   27d9a:	687b      	ldr	r3, [r7, #4]
   27d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   27d9e:	781b      	ldrb	r3, [r3, #0]
   27da0:	b2db      	uxtb	r3, r3
   27da2:	021b      	lsls	r3, r3, #8
   27da4:	b21a      	sxth	r2, r3
   27da6:	230e      	movs	r3, #14
   27da8:	18fb      	adds	r3, r7, r3
   27daa:	2100      	movs	r1, #0
   27dac:	5e5b      	ldrsh	r3, [r3, r1]
   27dae:	4313      	orrs	r3, r2
   27db0:	b21a      	sxth	r2, r3
   27db2:	230e      	movs	r3, #14
   27db4:	18fb      	adds	r3, r7, r3
   27db6:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
   27db8:	687b      	ldr	r3, [r7, #4]
   27dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   27dbc:	1c5a      	adds	r2, r3, #1
   27dbe:	687b      	ldr	r3, [r7, #4]
   27dc0:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
   27dc2:	230e      	movs	r3, #14
   27dc4:	18fb      	adds	r3, r7, r3
   27dc6:	881b      	ldrh	r3, [r3, #0]
   27dc8:	05db      	lsls	r3, r3, #23
   27dca:	0dda      	lsrs	r2, r3, #23
   27dcc:	68bb      	ldr	r3, [r7, #8]
   27dce:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
   27dd0:	687b      	ldr	r3, [r7, #4]
   27dd2:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   27dd4:	b29b      	uxth	r3, r3
   27dd6:	3b01      	subs	r3, #1
   27dd8:	b29a      	uxth	r2, r3
   27dda:	687b      	ldr	r3, [r7, #4]
   27ddc:	869a      	strh	r2, [r3, #52]	; 0x34
}
   27dde:	46c0      	nop			; (mov r8, r8)
   27de0:	46bd      	mov	sp, r7
   27de2:	b004      	add	sp, #16
   27de4:	bd80      	pop	{r7, pc}
	...

00027de8 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
   27de8:	b580      	push	{r7, lr}
   27dea:	b084      	sub	sp, #16
   27dec:	af00      	add	r7, sp, #0
   27dee:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   27df0:	687b      	ldr	r3, [r7, #4]
   27df2:	681b      	ldr	r3, [r3, #0]
   27df4:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
   27df6:	4b08      	ldr	r3, [pc, #32]	; (27e18 <_spi_write_dummy+0x30>)
   27df8:	881b      	ldrh	r3, [r3, #0]
   27dfa:	001a      	movs	r2, r3
   27dfc:	68fb      	ldr	r3, [r7, #12]
   27dfe:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
   27e00:	687b      	ldr	r3, [r7, #4]
   27e02:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   27e04:	b29b      	uxth	r3, r3
   27e06:	3b01      	subs	r3, #1
   27e08:	b29a      	uxth	r2, r3
   27e0a:	687b      	ldr	r3, [r7, #4]
   27e0c:	865a      	strh	r2, [r3, #50]	; 0x32
}
   27e0e:	46c0      	nop			; (mov r8, r8)
   27e10:	46bd      	mov	sp, r7
   27e12:	b004      	add	sp, #16
   27e14:	bd80      	pop	{r7, pc}
   27e16:	46c0      	nop			; (mov r8, r8)
   27e18:	20005540 	.word	0x20005540

00027e1c <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
   27e1c:	b580      	push	{r7, lr}
   27e1e:	b084      	sub	sp, #16
   27e20:	af00      	add	r7, sp, #0
   27e22:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   27e24:	687b      	ldr	r3, [r7, #4]
   27e26:	681b      	ldr	r3, [r3, #0]
   27e28:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
   27e2a:	230a      	movs	r3, #10
   27e2c:	18fb      	adds	r3, r7, r3
   27e2e:	2200      	movs	r2, #0
   27e30:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
   27e32:	68fb      	ldr	r3, [r7, #12]
   27e34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   27e36:	230a      	movs	r3, #10
   27e38:	18fb      	adds	r3, r7, r3
   27e3a:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
   27e3c:	687b      	ldr	r3, [r7, #4]
   27e3e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   27e40:	b29b      	uxth	r3, r3
   27e42:	3b01      	subs	r3, #1
   27e44:	b29a      	uxth	r2, r3
   27e46:	687b      	ldr	r3, [r7, #4]
   27e48:	865a      	strh	r2, [r3, #50]	; 0x32
}
   27e4a:	46c0      	nop			; (mov r8, r8)
   27e4c:	46bd      	mov	sp, r7
   27e4e:	b004      	add	sp, #16
   27e50:	bd80      	pop	{r7, pc}

00027e52 <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
   27e52:	b580      	push	{r7, lr}
   27e54:	b084      	sub	sp, #16
   27e56:	af00      	add	r7, sp, #0
   27e58:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   27e5a:	687b      	ldr	r3, [r7, #4]
   27e5c:	681b      	ldr	r3, [r3, #0]
   27e5e:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
   27e60:	68fb      	ldr	r3, [r7, #12]
   27e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27e64:	b29a      	uxth	r2, r3
   27e66:	230a      	movs	r3, #10
   27e68:	18fb      	adds	r3, r7, r3
   27e6a:	05d2      	lsls	r2, r2, #23
   27e6c:	0dd2      	lsrs	r2, r2, #23
   27e6e:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
   27e70:	687b      	ldr	r3, [r7, #4]
   27e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27e74:	220a      	movs	r2, #10
   27e76:	18ba      	adds	r2, r7, r2
   27e78:	8812      	ldrh	r2, [r2, #0]
   27e7a:	b2d2      	uxtb	r2, r2
   27e7c:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
   27e7e:	687b      	ldr	r3, [r7, #4]
   27e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27e82:	1c5a      	adds	r2, r3, #1
   27e84:	687b      	ldr	r3, [r7, #4]
   27e86:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   27e88:	687b      	ldr	r3, [r7, #4]
   27e8a:	799b      	ldrb	r3, [r3, #6]
   27e8c:	2b01      	cmp	r3, #1
   27e8e:	d10d      	bne.n	27eac <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
   27e90:	687b      	ldr	r3, [r7, #4]
   27e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27e94:	220a      	movs	r2, #10
   27e96:	18ba      	adds	r2, r7, r2
   27e98:	8812      	ldrh	r2, [r2, #0]
   27e9a:	0a12      	lsrs	r2, r2, #8
   27e9c:	b292      	uxth	r2, r2
   27e9e:	b2d2      	uxtb	r2, r2
   27ea0:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
   27ea2:	687b      	ldr	r3, [r7, #4]
   27ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27ea6:	1c5a      	adds	r2, r3, #1
   27ea8:	687b      	ldr	r3, [r7, #4]
   27eaa:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
   27eac:	687b      	ldr	r3, [r7, #4]
   27eae:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   27eb0:	b29b      	uxth	r3, r3
   27eb2:	3b01      	subs	r3, #1
   27eb4:	b29a      	uxth	r2, r3
   27eb6:	687b      	ldr	r3, [r7, #4]
   27eb8:	861a      	strh	r2, [r3, #48]	; 0x30
}
   27eba:	46c0      	nop			; (mov r8, r8)
   27ebc:	46bd      	mov	sp, r7
   27ebe:	b004      	add	sp, #16
   27ec0:	bd80      	pop	{r7, pc}
	...

00027ec4 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
   27ec4:	b580      	push	{r7, lr}
   27ec6:	b086      	sub	sp, #24
   27ec8:	af00      	add	r7, sp, #0
   27eca:	0002      	movs	r2, r0
   27ecc:	1dfb      	adds	r3, r7, #7
   27ece:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
   27ed0:	1dfb      	adds	r3, r7, #7
   27ed2:	781a      	ldrb	r2, [r3, #0]
	struct spi_module *module
   27ed4:	4b96      	ldr	r3, [pc, #600]	; (28130 <_spi_interrupt_handler+0x26c>)
   27ed6:	0092      	lsls	r2, r2, #2
   27ed8:	58d3      	ldr	r3, [r2, r3]
   27eda:	617b      	str	r3, [r7, #20]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   27edc:	697b      	ldr	r3, [r7, #20]
   27ede:	681b      	ldr	r3, [r3, #0]
   27ee0:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
   27ee2:	697b      	ldr	r3, [r7, #20]
   27ee4:	2237      	movs	r2, #55	; 0x37
   27ee6:	5c9a      	ldrb	r2, [r3, r2]
   27ee8:	697b      	ldr	r3, [r7, #20]
   27eea:	2136      	movs	r1, #54	; 0x36
   27eec:	5c59      	ldrb	r1, [r3, r1]
	uint8_t callback_mask =
   27eee:	230f      	movs	r3, #15
   27ef0:	18fb      	adds	r3, r7, r3
   27ef2:	400a      	ands	r2, r1
   27ef4:	701a      	strb	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
   27ef6:	693b      	ldr	r3, [r7, #16]
   27ef8:	7e1b      	ldrb	r3, [r3, #24]
   27efa:	b2da      	uxtb	r2, r3
   27efc:	230c      	movs	r3, #12
   27efe:	18fb      	adds	r3, r7, r3
   27f00:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
   27f02:	693b      	ldr	r3, [r7, #16]
   27f04:	7d9b      	ldrb	r3, [r3, #22]
   27f06:	b2db      	uxtb	r3, r3
   27f08:	b29a      	uxth	r2, r3
   27f0a:	230c      	movs	r3, #12
   27f0c:	18fb      	adds	r3, r7, r3
   27f0e:	210c      	movs	r1, #12
   27f10:	1879      	adds	r1, r7, r1
   27f12:	8809      	ldrh	r1, [r1, #0]
   27f14:	400a      	ands	r2, r1
   27f16:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
   27f18:	230c      	movs	r3, #12
   27f1a:	18fb      	adds	r3, r7, r3
   27f1c:	881b      	ldrh	r3, [r3, #0]
   27f1e:	2201      	movs	r2, #1
   27f20:	4013      	ands	r3, r2
   27f22:	d038      	beq.n	27f96 <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   27f24:	697b      	ldr	r3, [r7, #20]
   27f26:	795b      	ldrb	r3, [r3, #5]
   27f28:	2b01      	cmp	r3, #1
   27f2a:	d110      	bne.n	27f4e <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
   27f2c:	697b      	ldr	r3, [r7, #20]
   27f2e:	7a5b      	ldrb	r3, [r3, #9]
   27f30:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
   27f32:	2b00      	cmp	r3, #0
   27f34:	d10b      	bne.n	27f4e <_spi_interrupt_handler+0x8a>
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
   27f36:	697b      	ldr	r3, [r7, #20]
   27f38:	0018      	movs	r0, r3
   27f3a:	4b7e      	ldr	r3, [pc, #504]	; (28134 <_spi_interrupt_handler+0x270>)
   27f3c:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
   27f3e:	697b      	ldr	r3, [r7, #20]
   27f40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   27f42:	b29b      	uxth	r3, r3
   27f44:	2b00      	cmp	r3, #0
   27f46:	d102      	bne.n	27f4e <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   27f48:	693b      	ldr	r3, [r7, #16]
   27f4a:	2201      	movs	r2, #1
   27f4c:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
   27f4e:	697b      	ldr	r3, [r7, #20]
   27f50:	795b      	ldrb	r3, [r3, #5]
		if (0
   27f52:	2b01      	cmp	r3, #1
   27f54:	d11f      	bne.n	27f96 <_spi_interrupt_handler+0xd2>
			(module->dir != SPI_DIRECTION_READ))
   27f56:	697b      	ldr	r3, [r7, #20]
   27f58:	7a5b      	ldrb	r3, [r3, #9]
   27f5a:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_MASTER) &&
   27f5c:	2b00      	cmp	r3, #0
   27f5e:	d01a      	beq.n	27f96 <_spi_interrupt_handler+0xd2>
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
   27f60:	697b      	ldr	r3, [r7, #20]
   27f62:	0018      	movs	r0, r3
   27f64:	4b74      	ldr	r3, [pc, #464]	; (28138 <_spi_interrupt_handler+0x274>)
   27f66:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
   27f68:	697b      	ldr	r3, [r7, #20]
   27f6a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   27f6c:	b29b      	uxth	r3, r3
   27f6e:	2b00      	cmp	r3, #0
   27f70:	d111      	bne.n	27f96 <_spi_interrupt_handler+0xd2>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   27f72:	693b      	ldr	r3, [r7, #16]
   27f74:	2201      	movs	r2, #1
   27f76:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
   27f78:	697b      	ldr	r3, [r7, #20]
   27f7a:	7a5b      	ldrb	r3, [r3, #9]
   27f7c:	b2db      	uxtb	r3, r3
   27f7e:	2b01      	cmp	r3, #1
   27f80:	d109      	bne.n	27f96 <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
   27f82:	697b      	ldr	r3, [r7, #20]
   27f84:	79db      	ldrb	r3, [r3, #7]
   27f86:	2201      	movs	r2, #1
   27f88:	4053      	eors	r3, r2
   27f8a:	b2db      	uxtb	r3, r3
				if (module->dir == SPI_DIRECTION_WRITE &&
   27f8c:	2b00      	cmp	r3, #0
   27f8e:	d002      	beq.n	27f96 <_spi_interrupt_handler+0xd2>
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
   27f90:	693b      	ldr	r3, [r7, #16]
   27f92:	2202      	movs	r2, #2
   27f94:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
   27f96:	230c      	movs	r3, #12
   27f98:	18fb      	adds	r3, r7, r3
   27f9a:	881b      	ldrh	r3, [r3, #0]
   27f9c:	2204      	movs	r2, #4
   27f9e:	4013      	ands	r3, r2
   27fa0:	d100      	bne.n	27fa4 <_spi_interrupt_handler+0xe0>
   27fa2:	e07e      	b.n	280a2 <_spi_interrupt_handler+0x1de>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   27fa4:	693b      	ldr	r3, [r7, #16]
   27fa6:	8b5b      	ldrh	r3, [r3, #26]
   27fa8:	b29b      	uxth	r3, r3
   27faa:	001a      	movs	r2, r3
   27fac:	2304      	movs	r3, #4
   27fae:	4013      	ands	r3, r2
   27fb0:	d022      	beq.n	27ff8 <_spi_interrupt_handler+0x134>
			if (module->dir != SPI_DIRECTION_WRITE) {
   27fb2:	697b      	ldr	r3, [r7, #20]
   27fb4:	7a5b      	ldrb	r3, [r3, #9]
   27fb6:	b2db      	uxtb	r3, r3
   27fb8:	2b01      	cmp	r3, #1
   27fba:	d014      	beq.n	27fe6 <_spi_interrupt_handler+0x122>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
   27fbc:	697b      	ldr	r3, [r7, #20]
   27fbe:	2238      	movs	r2, #56	; 0x38
   27fc0:	211e      	movs	r1, #30
   27fc2:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
   27fc4:	697b      	ldr	r3, [r7, #20]
   27fc6:	2203      	movs	r2, #3
   27fc8:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
   27fca:	693b      	ldr	r3, [r7, #16]
   27fcc:	2205      	movs	r2, #5
   27fce:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
   27fd0:	230f      	movs	r3, #15
   27fd2:	18fb      	adds	r3, r7, r3
   27fd4:	781b      	ldrb	r3, [r3, #0]
   27fd6:	2208      	movs	r2, #8
   27fd8:	4013      	ands	r3, r2
   27fda:	d004      	beq.n	27fe6 <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
   27fdc:	697b      	ldr	r3, [r7, #20]
   27fde:	699b      	ldr	r3, [r3, #24]
   27fe0:	697a      	ldr	r2, [r7, #20]
   27fe2:	0010      	movs	r0, r2
   27fe4:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
   27fe6:	693b      	ldr	r3, [r7, #16]
   27fe8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   27fea:	230a      	movs	r3, #10
   27fec:	18fb      	adds	r3, r7, r3
   27fee:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   27ff0:	693b      	ldr	r3, [r7, #16]
   27ff2:	2204      	movs	r2, #4
   27ff4:	835a      	strh	r2, [r3, #26]
   27ff6:	e054      	b.n	280a2 <_spi_interrupt_handler+0x1de>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
   27ff8:	697b      	ldr	r3, [r7, #20]
   27ffa:	7a5b      	ldrb	r3, [r3, #9]
   27ffc:	b2db      	uxtb	r3, r3
   27ffe:	2b01      	cmp	r3, #1
   28000:	d11e      	bne.n	28040 <_spi_interrupt_handler+0x17c>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
   28002:	697b      	ldr	r3, [r7, #20]
   28004:	0018      	movs	r0, r3
   28006:	4b4d      	ldr	r3, [pc, #308]	; (2813c <_spi_interrupt_handler+0x278>)
   28008:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
   2800a:	697b      	ldr	r3, [r7, #20]
   2800c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   2800e:	b29b      	uxth	r3, r3
   28010:	2b00      	cmp	r3, #0
   28012:	d146      	bne.n	280a2 <_spi_interrupt_handler+0x1de>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   28014:	693b      	ldr	r3, [r7, #16]
   28016:	2204      	movs	r2, #4
   28018:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
   2801a:	697b      	ldr	r3, [r7, #20]
   2801c:	2238      	movs	r2, #56	; 0x38
   2801e:	2100      	movs	r1, #0
   28020:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
   28022:	697b      	ldr	r3, [r7, #20]
   28024:	2203      	movs	r2, #3
   28026:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
   28028:	230f      	movs	r3, #15
   2802a:	18fb      	adds	r3, r7, r3
   2802c:	781b      	ldrb	r3, [r3, #0]
   2802e:	2201      	movs	r2, #1
   28030:	4013      	ands	r3, r2
   28032:	d036      	beq.n	280a2 <_spi_interrupt_handler+0x1de>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
   28034:	697b      	ldr	r3, [r7, #20]
   28036:	68db      	ldr	r3, [r3, #12]
   28038:	697a      	ldr	r2, [r7, #20]
   2803a:	0010      	movs	r0, r2
   2803c:	4798      	blx	r3
   2803e:	e030      	b.n	280a2 <_spi_interrupt_handler+0x1de>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
   28040:	697b      	ldr	r3, [r7, #20]
   28042:	0018      	movs	r0, r3
   28044:	4b3e      	ldr	r3, [pc, #248]	; (28140 <_spi_interrupt_handler+0x27c>)
   28046:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
   28048:	697b      	ldr	r3, [r7, #20]
   2804a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   2804c:	b29b      	uxth	r3, r3
   2804e:	2b00      	cmp	r3, #0
   28050:	d127      	bne.n	280a2 <_spi_interrupt_handler+0x1de>
					module->status = STATUS_OK;
   28052:	697b      	ldr	r3, [r7, #20]
   28054:	2238      	movs	r2, #56	; 0x38
   28056:	2100      	movs	r1, #0
   28058:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   2805a:	693b      	ldr	r3, [r7, #16]
   2805c:	2204      	movs	r2, #4
   2805e:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
   28060:	697b      	ldr	r3, [r7, #20]
   28062:	7a5b      	ldrb	r3, [r3, #9]
   28064:	b2db      	uxtb	r3, r3
   28066:	2b02      	cmp	r3, #2
   28068:	d10b      	bne.n	28082 <_spi_interrupt_handler+0x1be>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
   2806a:	230f      	movs	r3, #15
   2806c:	18fb      	adds	r3, r7, r3
   2806e:	781b      	ldrb	r3, [r3, #0]
   28070:	2204      	movs	r2, #4
   28072:	4013      	ands	r3, r2
   28074:	d015      	beq.n	280a2 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
   28076:	697b      	ldr	r3, [r7, #20]
   28078:	695b      	ldr	r3, [r3, #20]
   2807a:	697a      	ldr	r2, [r7, #20]
   2807c:	0010      	movs	r0, r2
   2807e:	4798      	blx	r3
   28080:	e00f      	b.n	280a2 <_spi_interrupt_handler+0x1de>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
   28082:	697b      	ldr	r3, [r7, #20]
   28084:	7a5b      	ldrb	r3, [r3, #9]
   28086:	b2db      	uxtb	r3, r3
   28088:	2b00      	cmp	r3, #0
   2808a:	d10a      	bne.n	280a2 <_spi_interrupt_handler+0x1de>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
   2808c:	230f      	movs	r3, #15
   2808e:	18fb      	adds	r3, r7, r3
   28090:	781b      	ldrb	r3, [r3, #0]
   28092:	2202      	movs	r2, #2
   28094:	4013      	ands	r3, r2
   28096:	d004      	beq.n	280a2 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
   28098:	697b      	ldr	r3, [r7, #20]
   2809a:	691b      	ldr	r3, [r3, #16]
   2809c:	697a      	ldr	r2, [r7, #20]
   2809e:	0010      	movs	r0, r2
   280a0:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
   280a2:	230c      	movs	r3, #12
   280a4:	18fb      	adds	r3, r7, r3
   280a6:	881b      	ldrh	r3, [r3, #0]
   280a8:	2202      	movs	r2, #2
   280aa:	4013      	ands	r3, r2
   280ac:	d024      	beq.n	280f8 <_spi_interrupt_handler+0x234>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   280ae:	697b      	ldr	r3, [r7, #20]
   280b0:	795b      	ldrb	r3, [r3, #5]
   280b2:	2b01      	cmp	r3, #1
   280b4:	d120      	bne.n	280f8 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   280b6:	697b      	ldr	r3, [r7, #20]
   280b8:	7a5b      	ldrb	r3, [r3, #9]
   280ba:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
   280bc:	2b01      	cmp	r3, #1
   280be:	d11b      	bne.n	280f8 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   280c0:	697b      	ldr	r3, [r7, #20]
   280c2:	79db      	ldrb	r3, [r3, #7]
   280c4:	2201      	movs	r2, #1
   280c6:	4053      	eors	r3, r2
   280c8:	b2db      	uxtb	r3, r3
   280ca:	2b00      	cmp	r3, #0
   280cc:	d014      	beq.n	280f8 <_spi_interrupt_handler+0x234>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
   280ce:	693b      	ldr	r3, [r7, #16]
   280d0:	2202      	movs	r2, #2
   280d2:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
   280d4:	697b      	ldr	r3, [r7, #20]
   280d6:	2203      	movs	r2, #3
   280d8:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
   280da:	697b      	ldr	r3, [r7, #20]
   280dc:	2238      	movs	r2, #56	; 0x38
   280de:	2100      	movs	r1, #0
   280e0:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
   280e2:	230f      	movs	r3, #15
   280e4:	18fb      	adds	r3, r7, r3
   280e6:	781b      	ldrb	r3, [r3, #0]
   280e8:	2201      	movs	r2, #1
   280ea:	4013      	ands	r3, r2
   280ec:	d004      	beq.n	280f8 <_spi_interrupt_handler+0x234>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
   280ee:	697b      	ldr	r3, [r7, #20]
   280f0:	68db      	ldr	r3, [r3, #12]
   280f2:	697a      	ldr	r2, [r7, #20]
   280f4:	0010      	movs	r0, r2
   280f6:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
   280f8:	230c      	movs	r3, #12
   280fa:	18fb      	adds	r3, r7, r3
   280fc:	881b      	ldrh	r3, [r3, #0]
   280fe:	2280      	movs	r2, #128	; 0x80
   28100:	4013      	ands	r3, r2
   28102:	d010      	beq.n	28126 <_spi_interrupt_handler+0x262>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   28104:	693b      	ldr	r3, [r7, #16]
   28106:	2280      	movs	r2, #128	; 0x80
   28108:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   2810a:	693b      	ldr	r3, [r7, #16]
   2810c:	2280      	movs	r2, #128	; 0x80
   2810e:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
   28110:	230f      	movs	r3, #15
   28112:	18fb      	adds	r3, r7, r3
   28114:	781b      	ldrb	r3, [r3, #0]
   28116:	2240      	movs	r2, #64	; 0x40
   28118:	4013      	ands	r3, r2
   2811a:	d004      	beq.n	28126 <_spi_interrupt_handler+0x262>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
   2811c:	697b      	ldr	r3, [r7, #20]
   2811e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   28120:	697a      	ldr	r2, [r7, #20]
   28122:	0010      	movs	r0, r2
   28124:	4798      	blx	r3
		}
	}
#  endif
}
   28126:	46c0      	nop			; (mov r8, r8)
   28128:	46bd      	mov	sp, r7
   2812a:	b006      	add	sp, #24
   2812c:	bd80      	pop	{r7, pc}
   2812e:	46c0      	nop			; (mov r8, r8)
   28130:	20005528 	.word	0x20005528
   28134:	00027de9 	.word	0x00027de9
   28138:	00027d6d 	.word	0x00027d6d
   2813c:	00027e1d 	.word	0x00027e1d
   28140:	00027e53 	.word	0x00027e53

00028144 <system_gclk_chan_get_config_defaults>:
{
   28144:	b580      	push	{r7, lr}
   28146:	b082      	sub	sp, #8
   28148:	af00      	add	r7, sp, #0
   2814a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   2814c:	687b      	ldr	r3, [r7, #4]
   2814e:	2200      	movs	r2, #0
   28150:	701a      	strb	r2, [r3, #0]
}
   28152:	46c0      	nop			; (mov r8, r8)
   28154:	46bd      	mov	sp, r7
   28156:	b002      	add	sp, #8
   28158:	bd80      	pop	{r7, pc}
	...

0002815c <system_apb_clock_set_mask>:
{
   2815c:	b580      	push	{r7, lr}
   2815e:	b082      	sub	sp, #8
   28160:	af00      	add	r7, sp, #0
   28162:	0002      	movs	r2, r0
   28164:	6039      	str	r1, [r7, #0]
   28166:	1dfb      	adds	r3, r7, #7
   28168:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2816a:	1dfb      	adds	r3, r7, #7
   2816c:	781b      	ldrb	r3, [r3, #0]
   2816e:	2b01      	cmp	r3, #1
   28170:	d00a      	beq.n	28188 <system_apb_clock_set_mask+0x2c>
   28172:	2b02      	cmp	r3, #2
   28174:	d00f      	beq.n	28196 <system_apb_clock_set_mask+0x3a>
   28176:	2b00      	cmp	r3, #0
   28178:	d114      	bne.n	281a4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2817a:	4b0e      	ldr	r3, [pc, #56]	; (281b4 <system_apb_clock_set_mask+0x58>)
   2817c:	4a0d      	ldr	r2, [pc, #52]	; (281b4 <system_apb_clock_set_mask+0x58>)
   2817e:	6991      	ldr	r1, [r2, #24]
   28180:	683a      	ldr	r2, [r7, #0]
   28182:	430a      	orrs	r2, r1
   28184:	619a      	str	r2, [r3, #24]
			break;
   28186:	e00f      	b.n	281a8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   28188:	4b0a      	ldr	r3, [pc, #40]	; (281b4 <system_apb_clock_set_mask+0x58>)
   2818a:	4a0a      	ldr	r2, [pc, #40]	; (281b4 <system_apb_clock_set_mask+0x58>)
   2818c:	69d1      	ldr	r1, [r2, #28]
   2818e:	683a      	ldr	r2, [r7, #0]
   28190:	430a      	orrs	r2, r1
   28192:	61da      	str	r2, [r3, #28]
			break;
   28194:	e008      	b.n	281a8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   28196:	4b07      	ldr	r3, [pc, #28]	; (281b4 <system_apb_clock_set_mask+0x58>)
   28198:	4a06      	ldr	r2, [pc, #24]	; (281b4 <system_apb_clock_set_mask+0x58>)
   2819a:	6a11      	ldr	r1, [r2, #32]
   2819c:	683a      	ldr	r2, [r7, #0]
   2819e:	430a      	orrs	r2, r1
   281a0:	621a      	str	r2, [r3, #32]
			break;
   281a2:	e001      	b.n	281a8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   281a4:	2317      	movs	r3, #23
   281a6:	e000      	b.n	281aa <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   281a8:	2300      	movs	r3, #0
}
   281aa:	0018      	movs	r0, r3
   281ac:	46bd      	mov	sp, r7
   281ae:	b002      	add	sp, #8
   281b0:	bd80      	pop	{r7, pc}
   281b2:	46c0      	nop			; (mov r8, r8)
   281b4:	40000400 	.word	0x40000400

000281b8 <system_pinmux_get_config_defaults>:
{
   281b8:	b580      	push	{r7, lr}
   281ba:	b082      	sub	sp, #8
   281bc:	af00      	add	r7, sp, #0
   281be:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   281c0:	687b      	ldr	r3, [r7, #4]
   281c2:	2280      	movs	r2, #128	; 0x80
   281c4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   281c6:	687b      	ldr	r3, [r7, #4]
   281c8:	2200      	movs	r2, #0
   281ca:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   281cc:	687b      	ldr	r3, [r7, #4]
   281ce:	2201      	movs	r2, #1
   281d0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   281d2:	687b      	ldr	r3, [r7, #4]
   281d4:	2200      	movs	r2, #0
   281d6:	70da      	strb	r2, [r3, #3]
}
   281d8:	46c0      	nop			; (mov r8, r8)
   281da:	46bd      	mov	sp, r7
   281dc:	b002      	add	sp, #8
   281de:	bd80      	pop	{r7, pc}

000281e0 <system_is_debugger_present>:
{
   281e0:	b580      	push	{r7, lr}
   281e2:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   281e4:	4b05      	ldr	r3, [pc, #20]	; (281fc <system_is_debugger_present+0x1c>)
   281e6:	789b      	ldrb	r3, [r3, #2]
   281e8:	b2db      	uxtb	r3, r3
   281ea:	001a      	movs	r2, r3
   281ec:	2302      	movs	r3, #2
   281ee:	4013      	ands	r3, r2
   281f0:	1e5a      	subs	r2, r3, #1
   281f2:	4193      	sbcs	r3, r2
   281f4:	b2db      	uxtb	r3, r3
}
   281f6:	0018      	movs	r0, r3
   281f8:	46bd      	mov	sp, r7
   281fa:	bd80      	pop	{r7, pc}
   281fc:	41002000 	.word	0x41002000

00028200 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
   28200:	b580      	push	{r7, lr}
   28202:	b084      	sub	sp, #16
   28204:	af00      	add	r7, sp, #0
   28206:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
   28208:	687b      	ldr	r3, [r7, #4]
   2820a:	681b      	ldr	r3, [r3, #0]
   2820c:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
   2820e:	68fb      	ldr	r3, [r7, #12]
   28210:	69db      	ldr	r3, [r3, #28]
   28212:	1e5a      	subs	r2, r3, #1
   28214:	4193      	sbcs	r3, r2
   28216:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
   28218:	0018      	movs	r0, r3
   2821a:	46bd      	mov	sp, r7
   2821c:	b004      	add	sp, #16
   2821e:	bd80      	pop	{r7, pc}

00028220 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
   28220:	b580      	push	{r7, lr}
   28222:	b082      	sub	sp, #8
   28224:	af00      	add	r7, sp, #0
   28226:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
   28228:	46c0      	nop			; (mov r8, r8)
   2822a:	687b      	ldr	r3, [r7, #4]
   2822c:	0018      	movs	r0, r3
   2822e:	4b04      	ldr	r3, [pc, #16]	; (28240 <_usart_wait_for_sync+0x20>)
   28230:	4798      	blx	r3
   28232:	1e03      	subs	r3, r0, #0
   28234:	d1f9      	bne.n	2822a <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
   28236:	46c0      	nop			; (mov r8, r8)
   28238:	46bd      	mov	sp, r7
   2823a:	b002      	add	sp, #8
   2823c:	bd80      	pop	{r7, pc}
   2823e:	46c0      	nop			; (mov r8, r8)
   28240:	00028201 	.word	0x00028201

00028244 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
   28244:	b5b0      	push	{r4, r5, r7, lr}
   28246:	b08c      	sub	sp, #48	; 0x30
   28248:	af02      	add	r7, sp, #8
   2824a:	6078      	str	r0, [r7, #4]
   2824c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   2824e:	687b      	ldr	r3, [r7, #4]
   28250:	681b      	ldr	r3, [r3, #0]
   28252:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   28254:	687b      	ldr	r3, [r7, #4]
   28256:	681b      	ldr	r3, [r3, #0]
   28258:	0018      	movs	r0, r3
   2825a:	4bab      	ldr	r3, [pc, #684]	; (28508 <_usart_set_config+0x2c4>)
   2825c:	4798      	blx	r3
   2825e:	0003      	movs	r3, r0
   28260:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   28262:	697b      	ldr	r3, [r7, #20]
   28264:	3314      	adds	r3, #20
   28266:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
   28268:	2300      	movs	r3, #0
   2826a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
   2826c:	2300      	movs	r3, #0
   2826e:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
   28270:	230a      	movs	r3, #10
   28272:	18fb      	adds	r3, r7, r3
   28274:	2200      	movs	r2, #0
   28276:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   28278:	231f      	movs	r3, #31
   2827a:	18fb      	adds	r3, r7, r3
   2827c:	2200      	movs	r2, #0
   2827e:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   28280:	231e      	movs	r3, #30
   28282:	18fb      	adds	r3, r7, r3
   28284:	2210      	movs	r2, #16
   28286:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
   28288:	683b      	ldr	r3, [r7, #0]
   2828a:	8a1b      	ldrh	r3, [r3, #16]
   2828c:	2280      	movs	r2, #128	; 0x80
   2828e:	01d2      	lsls	r2, r2, #7
   28290:	4293      	cmp	r3, r2
   28292:	d01c      	beq.n	282ce <_usart_set_config+0x8a>
   28294:	2280      	movs	r2, #128	; 0x80
   28296:	01d2      	lsls	r2, r2, #7
   28298:	4293      	cmp	r3, r2
   2829a:	dc06      	bgt.n	282aa <_usart_set_config+0x66>
   2829c:	2b00      	cmp	r3, #0
   2829e:	d00d      	beq.n	282bc <_usart_set_config+0x78>
   282a0:	2280      	movs	r2, #128	; 0x80
   282a2:	0192      	lsls	r2, r2, #6
   282a4:	4293      	cmp	r3, r2
   282a6:	d024      	beq.n	282f2 <_usart_set_config+0xae>
   282a8:	e035      	b.n	28316 <_usart_set_config+0xd2>
   282aa:	22c0      	movs	r2, #192	; 0xc0
   282ac:	01d2      	lsls	r2, r2, #7
   282ae:	4293      	cmp	r3, r2
   282b0:	d028      	beq.n	28304 <_usart_set_config+0xc0>
   282b2:	2280      	movs	r2, #128	; 0x80
   282b4:	0212      	lsls	r2, r2, #8
   282b6:	4293      	cmp	r3, r2
   282b8:	d012      	beq.n	282e0 <_usart_set_config+0x9c>
   282ba:	e02c      	b.n	28316 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   282bc:	231f      	movs	r3, #31
   282be:	18fb      	adds	r3, r7, r3
   282c0:	2200      	movs	r2, #0
   282c2:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   282c4:	231e      	movs	r3, #30
   282c6:	18fb      	adds	r3, r7, r3
   282c8:	2210      	movs	r2, #16
   282ca:	701a      	strb	r2, [r3, #0]
			break;
   282cc:	e023      	b.n	28316 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   282ce:	231f      	movs	r3, #31
   282d0:	18fb      	adds	r3, r7, r3
   282d2:	2200      	movs	r2, #0
   282d4:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   282d6:	231e      	movs	r3, #30
   282d8:	18fb      	adds	r3, r7, r3
   282da:	2208      	movs	r2, #8
   282dc:	701a      	strb	r2, [r3, #0]
			break;
   282de:	e01a      	b.n	28316 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   282e0:	231f      	movs	r3, #31
   282e2:	18fb      	adds	r3, r7, r3
   282e4:	2200      	movs	r2, #0
   282e6:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
   282e8:	231e      	movs	r3, #30
   282ea:	18fb      	adds	r3, r7, r3
   282ec:	2203      	movs	r2, #3
   282ee:	701a      	strb	r2, [r3, #0]
			break;
   282f0:	e011      	b.n	28316 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   282f2:	231f      	movs	r3, #31
   282f4:	18fb      	adds	r3, r7, r3
   282f6:	2201      	movs	r2, #1
   282f8:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   282fa:	231e      	movs	r3, #30
   282fc:	18fb      	adds	r3, r7, r3
   282fe:	2210      	movs	r2, #16
   28300:	701a      	strb	r2, [r3, #0]
			break;
   28302:	e008      	b.n	28316 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   28304:	231f      	movs	r3, #31
   28306:	18fb      	adds	r3, r7, r3
   28308:	2201      	movs	r2, #1
   2830a:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   2830c:	231e      	movs	r3, #30
   2830e:	18fb      	adds	r3, r7, r3
   28310:	2208      	movs	r2, #8
   28312:	701a      	strb	r2, [r3, #0]
			break;
   28314:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
   28316:	683b      	ldr	r3, [r7, #0]
   28318:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
   2831a:	683b      	ldr	r3, [r7, #0]
   2831c:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
   2831e:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
   28320:	683b      	ldr	r3, [r7, #0]
   28322:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
   28324:	4313      	orrs	r3, r2
		config->sample_rate |
   28326:	683a      	ldr	r2, [r7, #0]
   28328:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
   2832a:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   2832c:	683a      	ldr	r2, [r7, #0]
   2832e:	7e12      	ldrb	r2, [r2, #24]
   28330:	0212      	lsls	r2, r2, #8
		config->sample_rate |
   28332:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   28334:	683a      	ldr	r2, [r7, #0]
   28336:	2126      	movs	r1, #38	; 0x26
   28338:	5c52      	ldrb	r2, [r2, r1]
   2833a:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
   2833c:	4313      	orrs	r3, r2
   2833e:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
   28340:	231d      	movs	r3, #29
   28342:	18fb      	adds	r3, r7, r3
   28344:	2200      	movs	r2, #0
   28346:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
   28348:	683b      	ldr	r3, [r7, #0]
   2834a:	685b      	ldr	r3, [r3, #4]
   2834c:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
   2834e:	68fb      	ldr	r3, [r7, #12]
   28350:	2b00      	cmp	r3, #0
   28352:	d01e      	beq.n	28392 <_usart_set_config+0x14e>
   28354:	2280      	movs	r2, #128	; 0x80
   28356:	0552      	lsls	r2, r2, #21
   28358:	4293      	cmp	r3, r2
   2835a:	d14f      	bne.n	283fc <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
   2835c:	683b      	ldr	r3, [r7, #0]
   2835e:	2227      	movs	r2, #39	; 0x27
   28360:	5c9b      	ldrb	r3, [r3, r2]
   28362:	2201      	movs	r2, #1
   28364:	4053      	eors	r3, r2
   28366:	b2db      	uxtb	r3, r3
   28368:	2b00      	cmp	r3, #0
   2836a:	d046      	beq.n	283fa <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
   2836c:	683b      	ldr	r3, [r7, #0]
   2836e:	6a1d      	ldr	r5, [r3, #32]
   28370:	693b      	ldr	r3, [r7, #16]
   28372:	b2db      	uxtb	r3, r3
   28374:	0018      	movs	r0, r3
   28376:	4b65      	ldr	r3, [pc, #404]	; (2850c <_usart_set_config+0x2c8>)
   28378:	4798      	blx	r3
   2837a:	0001      	movs	r1, r0
   2837c:	231d      	movs	r3, #29
   2837e:	18fc      	adds	r4, r7, r3
   28380:	230a      	movs	r3, #10
   28382:	18fb      	adds	r3, r7, r3
   28384:	001a      	movs	r2, r3
   28386:	0028      	movs	r0, r5
   28388:	4b61      	ldr	r3, [pc, #388]	; (28510 <_usart_set_config+0x2cc>)
   2838a:	4798      	blx	r3
   2838c:	0003      	movs	r3, r0
   2838e:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
   28390:	e033      	b.n	283fa <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
   28392:	683b      	ldr	r3, [r7, #0]
   28394:	2227      	movs	r2, #39	; 0x27
   28396:	5c9b      	ldrb	r3, [r3, r2]
   28398:	2b00      	cmp	r3, #0
   2839a:	d014      	beq.n	283c6 <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
   2839c:	683b      	ldr	r3, [r7, #0]
   2839e:	6a18      	ldr	r0, [r3, #32]
   283a0:	683b      	ldr	r3, [r7, #0]
   283a2:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
   283a4:	231d      	movs	r3, #29
   283a6:	18fc      	adds	r4, r7, r3
   283a8:	231f      	movs	r3, #31
   283aa:	18fb      	adds	r3, r7, r3
   283ac:	781d      	ldrb	r5, [r3, #0]
   283ae:	230a      	movs	r3, #10
   283b0:	18fa      	adds	r2, r7, r3
   283b2:	231e      	movs	r3, #30
   283b4:	18fb      	adds	r3, r7, r3
   283b6:	781b      	ldrb	r3, [r3, #0]
   283b8:	9300      	str	r3, [sp, #0]
   283ba:	002b      	movs	r3, r5
   283bc:	4d55      	ldr	r5, [pc, #340]	; (28514 <_usart_set_config+0x2d0>)
   283be:	47a8      	blx	r5
   283c0:	0003      	movs	r3, r0
   283c2:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
   283c4:	e01a      	b.n	283fc <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
   283c6:	683b      	ldr	r3, [r7, #0]
   283c8:	6a1d      	ldr	r5, [r3, #32]
   283ca:	693b      	ldr	r3, [r7, #16]
   283cc:	b2db      	uxtb	r3, r3
   283ce:	0018      	movs	r0, r3
   283d0:	4b4e      	ldr	r3, [pc, #312]	; (2850c <_usart_set_config+0x2c8>)
   283d2:	4798      	blx	r3
				status_code =
   283d4:	231d      	movs	r3, #29
   283d6:	18fc      	adds	r4, r7, r3
   283d8:	231f      	movs	r3, #31
   283da:	18fb      	adds	r3, r7, r3
   283dc:	7819      	ldrb	r1, [r3, #0]
   283de:	230a      	movs	r3, #10
   283e0:	18fa      	adds	r2, r7, r3
   283e2:	231e      	movs	r3, #30
   283e4:	18fb      	adds	r3, r7, r3
   283e6:	781b      	ldrb	r3, [r3, #0]
   283e8:	9300      	str	r3, [sp, #0]
   283ea:	000b      	movs	r3, r1
   283ec:	0001      	movs	r1, r0
   283ee:	0028      	movs	r0, r5
   283f0:	4d48      	ldr	r5, [pc, #288]	; (28514 <_usart_set_config+0x2d0>)
   283f2:	47a8      	blx	r5
   283f4:	0003      	movs	r3, r0
   283f6:	7023      	strb	r3, [r4, #0]
			break;
   283f8:	e000      	b.n	283fc <_usart_set_config+0x1b8>
			break;
   283fa:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
   283fc:	231d      	movs	r3, #29
   283fe:	18fb      	adds	r3, r7, r3
   28400:	781b      	ldrb	r3, [r3, #0]
   28402:	2b00      	cmp	r3, #0
   28404:	d003      	beq.n	2840e <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
   28406:	231d      	movs	r3, #29
   28408:	18fb      	adds	r3, r7, r3
   2840a:	781b      	ldrb	r3, [r3, #0]
   2840c:	e077      	b.n	284fe <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
   2840e:	683b      	ldr	r3, [r7, #0]
   28410:	7e5b      	ldrb	r3, [r3, #25]
   28412:	2b00      	cmp	r3, #0
   28414:	d003      	beq.n	2841e <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
   28416:	683b      	ldr	r3, [r7, #0]
   28418:	7e9a      	ldrb	r2, [r3, #26]
   2841a:	69bb      	ldr	r3, [r7, #24]
   2841c:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   2841e:	687b      	ldr	r3, [r7, #4]
   28420:	0018      	movs	r0, r3
   28422:	4b3d      	ldr	r3, [pc, #244]	; (28518 <_usart_set_config+0x2d4>)
   28424:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
   28426:	230a      	movs	r3, #10
   28428:	18fb      	adds	r3, r7, r3
   2842a:	881a      	ldrh	r2, [r3, #0]
   2842c:	69bb      	ldr	r3, [r7, #24]
   2842e:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
   28430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   28432:	68fb      	ldr	r3, [r7, #12]
   28434:	4313      	orrs	r3, r2
   28436:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
   28438:	683b      	ldr	r3, [r7, #0]
   2843a:	2227      	movs	r2, #39	; 0x27
   2843c:	5c9b      	ldrb	r3, [r3, r2]
   2843e:	2201      	movs	r2, #1
   28440:	4053      	eors	r3, r2
   28442:	b2db      	uxtb	r3, r3
   28444:	2b00      	cmp	r3, #0
   28446:	d003      	beq.n	28450 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
   28448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2844a:	2204      	movs	r2, #4
   2844c:	4313      	orrs	r3, r2
   2844e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   28450:	683b      	ldr	r3, [r7, #0]
   28452:	7e5b      	ldrb	r3, [r3, #25]
   28454:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   28456:	683b      	ldr	r3, [r7, #0]
   28458:	7f1b      	ldrb	r3, [r3, #28]
   2845a:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   2845c:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   2845e:	683b      	ldr	r3, [r7, #0]
   28460:	7f5b      	ldrb	r3, [r3, #29]
   28462:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   28464:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   28466:	683b      	ldr	r3, [r7, #0]
   28468:	2124      	movs	r1, #36	; 0x24
   2846a:	5c5b      	ldrb	r3, [r3, r1]
   2846c:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   2846e:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
   28470:	683b      	ldr	r3, [r7, #0]
   28472:	2125      	movs	r1, #37	; 0x25
   28474:	5c5b      	ldrb	r3, [r3, r1]
   28476:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   28478:	4313      	orrs	r3, r2
	ctrlb =  
   2847a:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
   2847c:	683b      	ldr	r3, [r7, #0]
   2847e:	7a9b      	ldrb	r3, [r3, #10]
   28480:	001a      	movs	r2, r3
   28482:	6a3b      	ldr	r3, [r7, #32]
   28484:	4313      	orrs	r3, r2
   28486:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
   28488:	683b      	ldr	r3, [r7, #0]
   2848a:	7adb      	ldrb	r3, [r3, #11]
   2848c:	001a      	movs	r2, r3
   2848e:	6a3b      	ldr	r3, [r7, #32]
   28490:	4313      	orrs	r3, r2
   28492:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
   28494:	683b      	ldr	r3, [r7, #0]
   28496:	891b      	ldrh	r3, [r3, #8]
   28498:	2bff      	cmp	r3, #255	; 0xff
   2849a:	d00b      	beq.n	284b4 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
   2849c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2849e:	2280      	movs	r2, #128	; 0x80
   284a0:	0452      	lsls	r2, r2, #17
   284a2:	4313      	orrs	r3, r2
   284a4:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
   284a6:	683b      	ldr	r3, [r7, #0]
   284a8:	891b      	ldrh	r3, [r3, #8]
   284aa:	001a      	movs	r2, r3
   284ac:	6a3b      	ldr	r3, [r7, #32]
   284ae:	4313      	orrs	r3, r2
   284b0:	623b      	str	r3, [r7, #32]
   284b2:	e008      	b.n	284c6 <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
   284b4:	683b      	ldr	r3, [r7, #0]
   284b6:	7edb      	ldrb	r3, [r3, #27]
   284b8:	2b00      	cmp	r3, #0
   284ba:	d004      	beq.n	284c6 <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
   284bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   284be:	2280      	movs	r2, #128	; 0x80
   284c0:	04d2      	lsls	r2, r2, #19
   284c2:	4313      	orrs	r3, r2
   284c4:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   284c6:	683b      	ldr	r3, [r7, #0]
   284c8:	222c      	movs	r2, #44	; 0x2c
   284ca:	5c9b      	ldrb	r3, [r3, r2]
   284cc:	2b00      	cmp	r3, #0
   284ce:	d103      	bne.n	284d8 <_usart_set_config+0x294>
   284d0:	4b12      	ldr	r3, [pc, #72]	; (2851c <_usart_set_config+0x2d8>)
   284d2:	4798      	blx	r3
   284d4:	1e03      	subs	r3, r0, #0
   284d6:	d003      	beq.n	284e0 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
   284d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   284da:	2280      	movs	r2, #128	; 0x80
   284dc:	4313      	orrs	r3, r2
   284de:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   284e0:	687b      	ldr	r3, [r7, #4]
   284e2:	0018      	movs	r0, r3
   284e4:	4b0c      	ldr	r3, [pc, #48]	; (28518 <_usart_set_config+0x2d4>)
   284e6:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
   284e8:	69bb      	ldr	r3, [r7, #24]
   284ea:	6a3a      	ldr	r2, [r7, #32]
   284ec:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   284ee:	687b      	ldr	r3, [r7, #4]
   284f0:	0018      	movs	r0, r3
   284f2:	4b09      	ldr	r3, [pc, #36]	; (28518 <_usart_set_config+0x2d4>)
   284f4:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
   284f6:	69bb      	ldr	r3, [r7, #24]
   284f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   284fa:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
   284fc:	2300      	movs	r3, #0
}
   284fe:	0018      	movs	r0, r3
   28500:	46bd      	mov	sp, r7
   28502:	b00a      	add	sp, #40	; 0x28
   28504:	bdb0      	pop	{r4, r5, r7, pc}
   28506:	46c0      	nop			; (mov r8, r8)
   28508:	00026fed 	.word	0x00026fed
   2850c:	000299a1 	.word	0x000299a1
   28510:	00026b67 	.word	0x00026b67
   28514:	00026be5 	.word	0x00026be5
   28518:	00028221 	.word	0x00028221
   2851c:	000281e1 	.word	0x000281e1

00028520 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
   28520:	b590      	push	{r4, r7, lr}
   28522:	b093      	sub	sp, #76	; 0x4c
   28524:	af00      	add	r7, sp, #0
   28526:	60f8      	str	r0, [r7, #12]
   28528:	60b9      	str	r1, [r7, #8]
   2852a:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
   2852c:	233b      	movs	r3, #59	; 0x3b
   2852e:	18fb      	adds	r3, r7, r3
   28530:	2200      	movs	r2, #0
   28532:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
   28534:	68fb      	ldr	r3, [r7, #12]
   28536:	68ba      	ldr	r2, [r7, #8]
   28538:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   2853a:	68fb      	ldr	r3, [r7, #12]
   2853c:	681b      	ldr	r3, [r3, #0]
   2853e:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   28540:	68fb      	ldr	r3, [r7, #12]
   28542:	681b      	ldr	r3, [r3, #0]
   28544:	0018      	movs	r0, r3
   28546:	4b86      	ldr	r3, [pc, #536]	; (28760 <usart_init+0x240>)
   28548:	4798      	blx	r3
   2854a:	0003      	movs	r3, r0
   2854c:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   2854e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   28550:	3302      	adds	r3, #2
   28552:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   28554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   28556:	3314      	adds	r3, #20
   28558:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   2855a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2855c:	681b      	ldr	r3, [r3, #0]
   2855e:	2201      	movs	r2, #1
   28560:	4013      	ands	r3, r2
   28562:	d001      	beq.n	28568 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
   28564:	2305      	movs	r3, #5
   28566:	e0f6      	b.n	28756 <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   28568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2856a:	681b      	ldr	r3, [r3, #0]
   2856c:	2202      	movs	r2, #2
   2856e:	4013      	ands	r3, r2
   28570:	d001      	beq.n	28576 <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
   28572:	231c      	movs	r3, #28
   28574:	e0ef      	b.n	28756 <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   28576:	2201      	movs	r2, #1
   28578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2857a:	409a      	lsls	r2, r3
   2857c:	0013      	movs	r3, r2
   2857e:	0019      	movs	r1, r3
   28580:	2002      	movs	r0, #2
   28582:	4b78      	ldr	r3, [pc, #480]	; (28764 <usart_init+0x244>)
   28584:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   28586:	2324      	movs	r3, #36	; 0x24
   28588:	18fb      	adds	r3, r7, r3
   2858a:	0018      	movs	r0, r3
   2858c:	4b76      	ldr	r3, [pc, #472]	; (28768 <usart_init+0x248>)
   2858e:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   28590:	687b      	ldr	r3, [r7, #4]
   28592:	222d      	movs	r2, #45	; 0x2d
   28594:	5c9a      	ldrb	r2, [r3, r2]
   28596:	2324      	movs	r3, #36	; 0x24
   28598:	18fb      	adds	r3, r7, r3
   2859a:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   2859c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2859e:	b2db      	uxtb	r3, r3
   285a0:	2224      	movs	r2, #36	; 0x24
   285a2:	18ba      	adds	r2, r7, r2
   285a4:	0011      	movs	r1, r2
   285a6:	0018      	movs	r0, r3
   285a8:	4b70      	ldr	r3, [pc, #448]	; (2876c <usart_init+0x24c>)
   285aa:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   285ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
   285ae:	b2db      	uxtb	r3, r3
   285b0:	0018      	movs	r0, r3
   285b2:	4b6f      	ldr	r3, [pc, #444]	; (28770 <usart_init+0x250>)
   285b4:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   285b6:	687b      	ldr	r3, [r7, #4]
   285b8:	222d      	movs	r2, #45	; 0x2d
   285ba:	5c9b      	ldrb	r3, [r3, r2]
   285bc:	2100      	movs	r1, #0
   285be:	0018      	movs	r0, r3
   285c0:	4b6c      	ldr	r3, [pc, #432]	; (28774 <usart_init+0x254>)
   285c2:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
   285c4:	687b      	ldr	r3, [r7, #4]
   285c6:	7ada      	ldrb	r2, [r3, #11]
   285c8:	68fb      	ldr	r3, [r7, #12]
   285ca:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
   285cc:	687b      	ldr	r3, [r7, #4]
   285ce:	2224      	movs	r2, #36	; 0x24
   285d0:	5c9a      	ldrb	r2, [r3, r2]
   285d2:	68fb      	ldr	r3, [r7, #12]
   285d4:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
   285d6:	687b      	ldr	r3, [r7, #4]
   285d8:	2225      	movs	r2, #37	; 0x25
   285da:	5c9a      	ldrb	r2, [r3, r2]
   285dc:	68fb      	ldr	r3, [r7, #12]
   285de:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
   285e0:	687b      	ldr	r3, [r7, #4]
   285e2:	7eda      	ldrb	r2, [r3, #27]
   285e4:	68fb      	ldr	r3, [r7, #12]
   285e6:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
   285e8:	687b      	ldr	r3, [r7, #4]
   285ea:	7f1a      	ldrb	r2, [r3, #28]
   285ec:	68fb      	ldr	r3, [r7, #12]
   285ee:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
   285f0:	233b      	movs	r3, #59	; 0x3b
   285f2:	18fc      	adds	r4, r7, r3
   285f4:	687a      	ldr	r2, [r7, #4]
   285f6:	68fb      	ldr	r3, [r7, #12]
   285f8:	0011      	movs	r1, r2
   285fa:	0018      	movs	r0, r3
   285fc:	4b5e      	ldr	r3, [pc, #376]	; (28778 <usart_init+0x258>)
   285fe:	4798      	blx	r3
   28600:	0003      	movs	r3, r0
   28602:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
   28604:	233b      	movs	r3, #59	; 0x3b
   28606:	18fb      	adds	r3, r7, r3
   28608:	781b      	ldrb	r3, [r3, #0]
   2860a:	2b00      	cmp	r3, #0
   2860c:	d003      	beq.n	28616 <usart_init+0xf6>
		return status_code;
   2860e:	233b      	movs	r3, #59	; 0x3b
   28610:	18fb      	adds	r3, r7, r3
   28612:	781b      	ldrb	r3, [r3, #0]
   28614:	e09f      	b.n	28756 <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   28616:	2320      	movs	r3, #32
   28618:	18fb      	adds	r3, r7, r3
   2861a:	0018      	movs	r0, r3
   2861c:	4b57      	ldr	r3, [pc, #348]	; (2877c <usart_init+0x25c>)
   2861e:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   28620:	2320      	movs	r3, #32
   28622:	18fb      	adds	r3, r7, r3
   28624:	2200      	movs	r2, #0
   28626:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   28628:	2320      	movs	r3, #32
   2862a:	18fb      	adds	r3, r7, r3
   2862c:	2200      	movs	r2, #0
   2862e:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   28630:	687b      	ldr	r3, [r7, #4]
   28632:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   28634:	2310      	movs	r3, #16
   28636:	18fb      	adds	r3, r7, r3
   28638:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   2863a:	687b      	ldr	r3, [r7, #4]
   2863c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   2863e:	2310      	movs	r3, #16
   28640:	18fb      	adds	r3, r7, r3
   28642:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   28644:	687b      	ldr	r3, [r7, #4]
   28646:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
   28648:	2310      	movs	r3, #16
   2864a:	18fb      	adds	r3, r7, r3
   2864c:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   2864e:	687b      	ldr	r3, [r7, #4]
   28650:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
   28652:	2310      	movs	r3, #16
   28654:	18fb      	adds	r3, r7, r3
   28656:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   28658:	2347      	movs	r3, #71	; 0x47
   2865a:	18fb      	adds	r3, r7, r3
   2865c:	2200      	movs	r2, #0
   2865e:	701a      	strb	r2, [r3, #0]
   28660:	e02c      	b.n	286bc <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   28662:	2347      	movs	r3, #71	; 0x47
   28664:	18fb      	adds	r3, r7, r3
   28666:	781a      	ldrb	r2, [r3, #0]
   28668:	2310      	movs	r3, #16
   2866a:	18fb      	adds	r3, r7, r3
   2866c:	0092      	lsls	r2, r2, #2
   2866e:	58d3      	ldr	r3, [r2, r3]
   28670:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   28672:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   28674:	2b00      	cmp	r3, #0
   28676:	d109      	bne.n	2868c <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   28678:	2347      	movs	r3, #71	; 0x47
   2867a:	18fb      	adds	r3, r7, r3
   2867c:	781a      	ldrb	r2, [r3, #0]
   2867e:	68bb      	ldr	r3, [r7, #8]
   28680:	0011      	movs	r1, r2
   28682:	0018      	movs	r0, r3
   28684:	4b3e      	ldr	r3, [pc, #248]	; (28780 <usart_init+0x260>)
   28686:	4798      	blx	r3
   28688:	0003      	movs	r3, r0
   2868a:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   2868c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2868e:	3301      	adds	r3, #1
   28690:	d00d      	beq.n	286ae <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   28692:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   28694:	b2da      	uxtb	r2, r3
   28696:	2320      	movs	r3, #32
   28698:	18fb      	adds	r3, r7, r3
   2869a:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   2869c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2869e:	0c1b      	lsrs	r3, r3, #16
   286a0:	b2db      	uxtb	r3, r3
   286a2:	2220      	movs	r2, #32
   286a4:	18ba      	adds	r2, r7, r2
   286a6:	0011      	movs	r1, r2
   286a8:	0018      	movs	r0, r3
   286aa:	4b36      	ldr	r3, [pc, #216]	; (28784 <usart_init+0x264>)
   286ac:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   286ae:	2347      	movs	r3, #71	; 0x47
   286b0:	18fb      	adds	r3, r7, r3
   286b2:	781a      	ldrb	r2, [r3, #0]
   286b4:	2347      	movs	r3, #71	; 0x47
   286b6:	18fb      	adds	r3, r7, r3
   286b8:	3201      	adds	r2, #1
   286ba:	701a      	strb	r2, [r3, #0]
   286bc:	2347      	movs	r3, #71	; 0x47
   286be:	18fb      	adds	r3, r7, r3
   286c0:	781b      	ldrb	r3, [r3, #0]
   286c2:	2b03      	cmp	r3, #3
   286c4:	d9cd      	bls.n	28662 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   286c6:	2300      	movs	r3, #0
   286c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   286ca:	e00a      	b.n	286e2 <usart_init+0x1c2>
		module->callback[i]            = NULL;
   286cc:	68fa      	ldr	r2, [r7, #12]
   286ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   286d0:	3302      	adds	r3, #2
   286d2:	009b      	lsls	r3, r3, #2
   286d4:	18d3      	adds	r3, r2, r3
   286d6:	3304      	adds	r3, #4
   286d8:	2200      	movs	r2, #0
   286da:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   286dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   286de:	3301      	adds	r3, #1
   286e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   286e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   286e4:	2b05      	cmp	r3, #5
   286e6:	d9f1      	bls.n	286cc <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
   286e8:	68fb      	ldr	r3, [r7, #12]
   286ea:	2200      	movs	r2, #0
   286ec:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
   286ee:	68fb      	ldr	r3, [r7, #12]
   286f0:	2200      	movs	r2, #0
   286f2:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
   286f4:	68fb      	ldr	r3, [r7, #12]
   286f6:	2200      	movs	r2, #0
   286f8:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
   286fa:	68fb      	ldr	r3, [r7, #12]
   286fc:	2200      	movs	r2, #0
   286fe:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
   28700:	68fb      	ldr	r3, [r7, #12]
   28702:	2230      	movs	r2, #48	; 0x30
   28704:	2100      	movs	r1, #0
   28706:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
   28708:	68fb      	ldr	r3, [r7, #12]
   2870a:	2231      	movs	r2, #49	; 0x31
   2870c:	2100      	movs	r1, #0
   2870e:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
   28710:	68fb      	ldr	r3, [r7, #12]
   28712:	2232      	movs	r2, #50	; 0x32
   28714:	2100      	movs	r1, #0
   28716:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
   28718:	68fb      	ldr	r3, [r7, #12]
   2871a:	2233      	movs	r2, #51	; 0x33
   2871c:	2100      	movs	r1, #0
   2871e:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   28720:	68fb      	ldr	r3, [r7, #12]
   28722:	681b      	ldr	r3, [r3, #0]
   28724:	2227      	movs	r2, #39	; 0x27
   28726:	18bc      	adds	r4, r7, r2
   28728:	0018      	movs	r0, r3
   2872a:	4b0d      	ldr	r3, [pc, #52]	; (28760 <usart_init+0x240>)
   2872c:	4798      	blx	r3
   2872e:	0003      	movs	r3, r0
   28730:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   28732:	4a15      	ldr	r2, [pc, #84]	; (28788 <usart_init+0x268>)
   28734:	2327      	movs	r3, #39	; 0x27
   28736:	18fb      	adds	r3, r7, r3
   28738:	781b      	ldrb	r3, [r3, #0]
   2873a:	0011      	movs	r1, r2
   2873c:	0018      	movs	r0, r3
   2873e:	4b13      	ldr	r3, [pc, #76]	; (2878c <usart_init+0x26c>)
   28740:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   28742:	2327      	movs	r3, #39	; 0x27
   28744:	18fb      	adds	r3, r7, r3
   28746:	781a      	ldrb	r2, [r3, #0]
   28748:	4b11      	ldr	r3, [pc, #68]	; (28790 <usart_init+0x270>)
   2874a:	0092      	lsls	r2, r2, #2
   2874c:	68f9      	ldr	r1, [r7, #12]
   2874e:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
   28750:	233b      	movs	r3, #59	; 0x3b
   28752:	18fb      	adds	r3, r7, r3
   28754:	781b      	ldrb	r3, [r3, #0]
}
   28756:	0018      	movs	r0, r3
   28758:	46bd      	mov	sp, r7
   2875a:	b013      	add	sp, #76	; 0x4c
   2875c:	bd90      	pop	{r4, r7, pc}
   2875e:	46c0      	nop			; (mov r8, r8)
   28760:	00026fed 	.word	0x00026fed
   28764:	0002815d 	.word	0x0002815d
   28768:	00028145 	.word	0x00028145
   2876c:	0002987d 	.word	0x0002987d
   28770:	000298c1 	.word	0x000298c1
   28774:	00026da5 	.word	0x00026da5
   28778:	00028245 	.word	0x00028245
   2877c:	000281b9 	.word	0x000281b9
   28780:	00026e31 	.word	0x00026e31
   28784:	00029bdd 	.word	0x00029bdd
   28788:	000289fd 	.word	0x000289fd
   2878c:	00027051 	.word	0x00027051
   28790:	20005528 	.word	0x20005528

00028794 <system_interrupt_enter_critical_section>:
{
   28794:	b580      	push	{r7, lr}
   28796:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   28798:	4b02      	ldr	r3, [pc, #8]	; (287a4 <system_interrupt_enter_critical_section+0x10>)
   2879a:	4798      	blx	r3
}
   2879c:	46c0      	nop			; (mov r8, r8)
   2879e:	46bd      	mov	sp, r7
   287a0:	bd80      	pop	{r7, pc}
   287a2:	46c0      	nop			; (mov r8, r8)
   287a4:	00025be9 	.word	0x00025be9

000287a8 <system_interrupt_leave_critical_section>:
{
   287a8:	b580      	push	{r7, lr}
   287aa:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   287ac:	4b02      	ldr	r3, [pc, #8]	; (287b8 <system_interrupt_leave_critical_section+0x10>)
   287ae:	4798      	blx	r3
}
   287b0:	46c0      	nop			; (mov r8, r8)
   287b2:	46bd      	mov	sp, r7
   287b4:	bd80      	pop	{r7, pc}
   287b6:	46c0      	nop			; (mov r8, r8)
   287b8:	00025c3d 	.word	0x00025c3d

000287bc <usart_is_syncing>:
{
   287bc:	b580      	push	{r7, lr}
   287be:	b084      	sub	sp, #16
   287c0:	af00      	add	r7, sp, #0
   287c2:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   287c4:	687b      	ldr	r3, [r7, #4]
   287c6:	681b      	ldr	r3, [r3, #0]
   287c8:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   287ca:	68fb      	ldr	r3, [r7, #12]
   287cc:	69db      	ldr	r3, [r3, #28]
   287ce:	1e5a      	subs	r2, r3, #1
   287d0:	4193      	sbcs	r3, r2
   287d2:	b2db      	uxtb	r3, r3
}
   287d4:	0018      	movs	r0, r3
   287d6:	46bd      	mov	sp, r7
   287d8:	b004      	add	sp, #16
   287da:	bd80      	pop	{r7, pc}

000287dc <_usart_wait_for_sync>:
{
   287dc:	b580      	push	{r7, lr}
   287de:	b082      	sub	sp, #8
   287e0:	af00      	add	r7, sp, #0
   287e2:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   287e4:	46c0      	nop			; (mov r8, r8)
   287e6:	687b      	ldr	r3, [r7, #4]
   287e8:	0018      	movs	r0, r3
   287ea:	4b04      	ldr	r3, [pc, #16]	; (287fc <_usart_wait_for_sync+0x20>)
   287ec:	4798      	blx	r3
   287ee:	1e03      	subs	r3, r0, #0
   287f0:	d1f9      	bne.n	287e6 <_usart_wait_for_sync+0xa>
}
   287f2:	46c0      	nop			; (mov r8, r8)
   287f4:	46bd      	mov	sp, r7
   287f6:	b002      	add	sp, #8
   287f8:	bd80      	pop	{r7, pc}
   287fa:	46c0      	nop			; (mov r8, r8)
   287fc:	000287bd 	.word	0x000287bd

00028800 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   28800:	b580      	push	{r7, lr}
   28802:	b086      	sub	sp, #24
   28804:	af00      	add	r7, sp, #0
   28806:	60f8      	str	r0, [r7, #12]
   28808:	60b9      	str	r1, [r7, #8]
   2880a:	1dbb      	adds	r3, r7, #6
   2880c:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   2880e:	68fb      	ldr	r3, [r7, #12]
   28810:	681b      	ldr	r3, [r3, #0]
   28812:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   28814:	4b0f      	ldr	r3, [pc, #60]	; (28854 <_usart_write_buffer+0x54>)
   28816:	4798      	blx	r3

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
   28818:	68fb      	ldr	r3, [r7, #12]
   2881a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   2881c:	b29b      	uxth	r3, r3
   2881e:	2b00      	cmp	r3, #0
   28820:	d003      	beq.n	2882a <_usart_write_buffer+0x2a>
		system_interrupt_leave_critical_section();
   28822:	4b0d      	ldr	r3, [pc, #52]	; (28858 <_usart_write_buffer+0x58>)
   28824:	4798      	blx	r3
		return STATUS_BUSY;
   28826:	2305      	movs	r3, #5
   28828:	e010      	b.n	2884c <_usart_write_buffer+0x4c>
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
   2882a:	68fb      	ldr	r3, [r7, #12]
   2882c:	1dba      	adds	r2, r7, #6
   2882e:	8812      	ldrh	r2, [r2, #0]
   28830:	85da      	strh	r2, [r3, #46]	; 0x2e

	system_interrupt_leave_critical_section();
   28832:	4b09      	ldr	r3, [pc, #36]	; (28858 <_usart_write_buffer+0x58>)
   28834:	4798      	blx	r3

	module->tx_buffer_ptr              = tx_data;
   28836:	68fb      	ldr	r3, [r7, #12]
   28838:	68ba      	ldr	r2, [r7, #8]
   2883a:	629a      	str	r2, [r3, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
   2883c:	68fb      	ldr	r3, [r7, #12]
   2883e:	2233      	movs	r2, #51	; 0x33
   28840:	2105      	movs	r1, #5
   28842:	5499      	strb	r1, [r3, r2]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
   28844:	697b      	ldr	r3, [r7, #20]
   28846:	2201      	movs	r2, #1
   28848:	759a      	strb	r2, [r3, #22]

	return STATUS_OK;
   2884a:	2300      	movs	r3, #0
}
   2884c:	0018      	movs	r0, r3
   2884e:	46bd      	mov	sp, r7
   28850:	b006      	add	sp, #24
   28852:	bd80      	pop	{r7, pc}
   28854:	00028795 	.word	0x00028795
   28858:	000287a9 	.word	0x000287a9

0002885c <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   2885c:	b580      	push	{r7, lr}
   2885e:	b086      	sub	sp, #24
   28860:	af00      	add	r7, sp, #0
   28862:	60f8      	str	r0, [r7, #12]
   28864:	60b9      	str	r1, [r7, #8]
   28866:	1dbb      	adds	r3, r7, #6
   28868:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   2886a:	68fb      	ldr	r3, [r7, #12]
   2886c:	681b      	ldr	r3, [r3, #0]
   2886e:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   28870:	4b16      	ldr	r3, [pc, #88]	; (288cc <_usart_read_buffer+0x70>)
   28872:	4798      	blx	r3

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
   28874:	68fb      	ldr	r3, [r7, #12]
   28876:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   28878:	b29b      	uxth	r3, r3
   2887a:	2b00      	cmp	r3, #0
   2887c:	d003      	beq.n	28886 <_usart_read_buffer+0x2a>
		system_interrupt_leave_critical_section();
   2887e:	4b14      	ldr	r3, [pc, #80]	; (288d0 <_usart_read_buffer+0x74>)
   28880:	4798      	blx	r3
		return STATUS_BUSY;
   28882:	2305      	movs	r3, #5
   28884:	e01e      	b.n	288c4 <_usart_read_buffer+0x68>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
   28886:	68fb      	ldr	r3, [r7, #12]
   28888:	1dba      	adds	r2, r7, #6
   2888a:	8812      	ldrh	r2, [r2, #0]
   2888c:	859a      	strh	r2, [r3, #44]	; 0x2c

	system_interrupt_leave_critical_section();
   2888e:	4b10      	ldr	r3, [pc, #64]	; (288d0 <_usart_read_buffer+0x74>)
   28890:	4798      	blx	r3

	module->rx_buffer_ptr              = rx_data;
   28892:	68fb      	ldr	r3, [r7, #12]
   28894:	68ba      	ldr	r2, [r7, #8]
   28896:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
   28898:	68fb      	ldr	r3, [r7, #12]
   2889a:	2232      	movs	r2, #50	; 0x32
   2889c:	2105      	movs	r1, #5
   2889e:	5499      	strb	r1, [r3, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
   288a0:	697b      	ldr	r3, [r7, #20]
   288a2:	2204      	movs	r2, #4
   288a4:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
   288a6:	68fb      	ldr	r3, [r7, #12]
   288a8:	7a1b      	ldrb	r3, [r3, #8]
   288aa:	2b00      	cmp	r3, #0
   288ac:	d002      	beq.n	288b4 <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
   288ae:	697b      	ldr	r3, [r7, #20]
   288b0:	2220      	movs	r2, #32
   288b2:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
   288b4:	68fb      	ldr	r3, [r7, #12]
   288b6:	7a5b      	ldrb	r3, [r3, #9]
   288b8:	2b00      	cmp	r3, #0
   288ba:	d002      	beq.n	288c2 <_usart_read_buffer+0x66>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
   288bc:	697b      	ldr	r3, [r7, #20]
   288be:	2208      	movs	r2, #8
   288c0:	759a      	strb	r2, [r3, #22]
	}
#endif

	return STATUS_OK;
   288c2:	2300      	movs	r3, #0
}
   288c4:	0018      	movs	r0, r3
   288c6:	46bd      	mov	sp, r7
   288c8:	b006      	add	sp, #24
   288ca:	bd80      	pop	{r7, pc}
   288cc:	00028795 	.word	0x00028795
   288d0:	000287a9 	.word	0x000287a9

000288d4 <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
   288d4:	b580      	push	{r7, lr}
   288d6:	b084      	sub	sp, #16
   288d8:	af00      	add	r7, sp, #0
   288da:	60f8      	str	r0, [r7, #12]
   288dc:	60b9      	str	r1, [r7, #8]
   288de:	1dfb      	adds	r3, r7, #7
   288e0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   288e2:	1dfb      	adds	r3, r7, #7
   288e4:	781b      	ldrb	r3, [r3, #0]
   288e6:	68fa      	ldr	r2, [r7, #12]
   288e8:	3302      	adds	r3, #2
   288ea:	009b      	lsls	r3, r3, #2
   288ec:	18d3      	adds	r3, r2, r3
   288ee:	3304      	adds	r3, #4
   288f0:	68ba      	ldr	r2, [r7, #8]
   288f2:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
   288f4:	68fb      	ldr	r3, [r7, #12]
   288f6:	2230      	movs	r2, #48	; 0x30
   288f8:	5c9b      	ldrb	r3, [r3, r2]
   288fa:	b25a      	sxtb	r2, r3
   288fc:	1dfb      	adds	r3, r7, #7
   288fe:	781b      	ldrb	r3, [r3, #0]
   28900:	2101      	movs	r1, #1
   28902:	4099      	lsls	r1, r3
   28904:	000b      	movs	r3, r1
   28906:	b25b      	sxtb	r3, r3
   28908:	4313      	orrs	r3, r2
   2890a:	b25b      	sxtb	r3, r3
   2890c:	b2d9      	uxtb	r1, r3
   2890e:	68fb      	ldr	r3, [r7, #12]
   28910:	2230      	movs	r2, #48	; 0x30
   28912:	5499      	strb	r1, [r3, r2]
}
   28914:	46c0      	nop			; (mov r8, r8)
   28916:	46bd      	mov	sp, r7
   28918:	b004      	add	sp, #16
   2891a:	bd80      	pop	{r7, pc}

0002891c <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   2891c:	b580      	push	{r7, lr}
   2891e:	b084      	sub	sp, #16
   28920:	af00      	add	r7, sp, #0
   28922:	60f8      	str	r0, [r7, #12]
   28924:	60b9      	str	r1, [r7, #8]
   28926:	1dbb      	adds	r3, r7, #6
   28928:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
   2892a:	1dbb      	adds	r3, r7, #6
   2892c:	881b      	ldrh	r3, [r3, #0]
   2892e:	2b00      	cmp	r3, #0
   28930:	d101      	bne.n	28936 <usart_write_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   28932:	2317      	movs	r3, #23
   28934:	e010      	b.n	28958 <usart_write_buffer_job+0x3c>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   28936:	68fb      	ldr	r3, [r7, #12]
   28938:	79db      	ldrb	r3, [r3, #7]
   2893a:	2201      	movs	r2, #1
   2893c:	4053      	eors	r3, r2
   2893e:	b2db      	uxtb	r3, r3
   28940:	2b00      	cmp	r3, #0
   28942:	d001      	beq.n	28948 <usart_write_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   28944:	231c      	movs	r3, #28
   28946:	e007      	b.n	28958 <usart_write_buffer_job+0x3c>
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
   28948:	1dbb      	adds	r3, r7, #6
   2894a:	881a      	ldrh	r2, [r3, #0]
   2894c:	68b9      	ldr	r1, [r7, #8]
   2894e:	68fb      	ldr	r3, [r7, #12]
   28950:	0018      	movs	r0, r3
   28952:	4b03      	ldr	r3, [pc, #12]	; (28960 <usart_write_buffer_job+0x44>)
   28954:	4798      	blx	r3
   28956:	0003      	movs	r3, r0
}
   28958:	0018      	movs	r0, r3
   2895a:	46bd      	mov	sp, r7
   2895c:	b004      	add	sp, #16
   2895e:	bd80      	pop	{r7, pc}
   28960:	00028801 	.word	0x00028801

00028964 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   28964:	b580      	push	{r7, lr}
   28966:	b084      	sub	sp, #16
   28968:	af00      	add	r7, sp, #0
   2896a:	60f8      	str	r0, [r7, #12]
   2896c:	60b9      	str	r1, [r7, #8]
   2896e:	1dbb      	adds	r3, r7, #6
   28970:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
   28972:	1dbb      	adds	r3, r7, #6
   28974:	881b      	ldrh	r3, [r3, #0]
   28976:	2b00      	cmp	r3, #0
   28978:	d101      	bne.n	2897e <usart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   2897a:	2317      	movs	r3, #23
   2897c:	e010      	b.n	289a0 <usart_read_buffer_job+0x3c>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
   2897e:	68fb      	ldr	r3, [r7, #12]
   28980:	799b      	ldrb	r3, [r3, #6]
   28982:	2201      	movs	r2, #1
   28984:	4053      	eors	r3, r2
   28986:	b2db      	uxtb	r3, r3
   28988:	2b00      	cmp	r3, #0
   2898a:	d001      	beq.n	28990 <usart_read_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   2898c:	231c      	movs	r3, #28
   2898e:	e007      	b.n	289a0 <usart_read_buffer_job+0x3c>
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
   28990:	1dbb      	adds	r3, r7, #6
   28992:	881a      	ldrh	r2, [r3, #0]
   28994:	68b9      	ldr	r1, [r7, #8]
   28996:	68fb      	ldr	r3, [r7, #12]
   28998:	0018      	movs	r0, r3
   2899a:	4b03      	ldr	r3, [pc, #12]	; (289a8 <usart_read_buffer_job+0x44>)
   2899c:	4798      	blx	r3
   2899e:	0003      	movs	r3, r0
}
   289a0:	0018      	movs	r0, r3
   289a2:	46bd      	mov	sp, r7
   289a4:	b004      	add	sp, #16
   289a6:	bd80      	pop	{r7, pc}
   289a8:	0002885d 	.word	0x0002885d

000289ac <usart_get_job_status>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid transceiver enum given
 */
enum status_code usart_get_job_status(
		struct usart_module *const module,
		enum usart_transceiver_type transceiver_type)
{
   289ac:	b580      	push	{r7, lr}
   289ae:	b084      	sub	sp, #16
   289b0:	af00      	add	r7, sp, #0
   289b2:	6078      	str	r0, [r7, #4]
   289b4:	000a      	movs	r2, r1
   289b6:	1cfb      	adds	r3, r7, #3
   289b8:	701a      	strb	r2, [r3, #0]
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
   289ba:	1cfb      	adds	r3, r7, #3
   289bc:	781b      	ldrb	r3, [r3, #0]
   289be:	2b00      	cmp	r3, #0
   289c0:	d002      	beq.n	289c8 <usart_get_job_status+0x1c>
   289c2:	2b01      	cmp	r3, #1
   289c4:	d007      	beq.n	289d6 <usart_get_job_status+0x2a>
   289c6:	e00d      	b.n	289e4 <usart_get_job_status+0x38>
	case USART_TRANSCEIVER_RX:
			status_code = module->rx_status;
   289c8:	230f      	movs	r3, #15
   289ca:	18fb      	adds	r3, r7, r3
   289cc:	687a      	ldr	r2, [r7, #4]
   289ce:	2132      	movs	r1, #50	; 0x32
   289d0:	5c52      	ldrb	r2, [r2, r1]
   289d2:	701a      	strb	r2, [r3, #0]
			break;
   289d4:	e00b      	b.n	289ee <usart_get_job_status+0x42>

	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
   289d6:	230f      	movs	r3, #15
   289d8:	18fb      	adds	r3, r7, r3
   289da:	687a      	ldr	r2, [r7, #4]
   289dc:	2133      	movs	r1, #51	; 0x33
   289de:	5c52      	ldrb	r2, [r2, r1]
   289e0:	701a      	strb	r2, [r3, #0]
			break;
   289e2:	e004      	b.n	289ee <usart_get_job_status+0x42>

	default:
			status_code = STATUS_ERR_INVALID_ARG;
   289e4:	230f      	movs	r3, #15
   289e6:	18fb      	adds	r3, r7, r3
   289e8:	2217      	movs	r2, #23
   289ea:	701a      	strb	r2, [r3, #0]
			break;
   289ec:	46c0      	nop			; (mov r8, r8)
	}

	return status_code;
   289ee:	230f      	movs	r3, #15
   289f0:	18fb      	adds	r3, r7, r3
   289f2:	781b      	ldrb	r3, [r3, #0]
}
   289f4:	0018      	movs	r0, r3
   289f6:	46bd      	mov	sp, r7
   289f8:	b004      	add	sp, #16
   289fa:	bd80      	pop	{r7, pc}

000289fc <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
   289fc:	b580      	push	{r7, lr}
   289fe:	b088      	sub	sp, #32
   28a00:	af00      	add	r7, sp, #0
   28a02:	0002      	movs	r2, r0
   28a04:	1dfb      	adds	r3, r7, #7
   28a06:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
   28a08:	1dfb      	adds	r3, r7, #7
   28a0a:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
   28a0c:	4ba3      	ldr	r3, [pc, #652]	; (28c9c <_usart_interrupt_handler+0x2a0>)
   28a0e:	0092      	lsls	r2, r2, #2
   28a10:	58d3      	ldr	r3, [r2, r3]
   28a12:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
   28a14:	69bb      	ldr	r3, [r7, #24]
   28a16:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
   28a18:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
   28a1a:	69bb      	ldr	r3, [r7, #24]
   28a1c:	0018      	movs	r0, r3
   28a1e:	4ba0      	ldr	r3, [pc, #640]	; (28ca0 <_usart_interrupt_handler+0x2a4>)
   28a20:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
   28a22:	697b      	ldr	r3, [r7, #20]
   28a24:	7e1b      	ldrb	r3, [r3, #24]
   28a26:	b2da      	uxtb	r2, r3
   28a28:	2312      	movs	r3, #18
   28a2a:	18fb      	adds	r3, r7, r3
   28a2c:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
   28a2e:	697b      	ldr	r3, [r7, #20]
   28a30:	7d9b      	ldrb	r3, [r3, #22]
   28a32:	b2db      	uxtb	r3, r3
   28a34:	b29a      	uxth	r2, r3
   28a36:	2312      	movs	r3, #18
   28a38:	18fb      	adds	r3, r7, r3
   28a3a:	2112      	movs	r1, #18
   28a3c:	1879      	adds	r1, r7, r1
   28a3e:	8809      	ldrh	r1, [r1, #0]
   28a40:	400a      	ands	r2, r1
   28a42:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
   28a44:	69bb      	ldr	r3, [r7, #24]
   28a46:	2230      	movs	r2, #48	; 0x30
   28a48:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
   28a4a:	69ba      	ldr	r2, [r7, #24]
   28a4c:	2131      	movs	r1, #49	; 0x31
   28a4e:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
   28a50:	4013      	ands	r3, r2
   28a52:	b2da      	uxtb	r2, r3
   28a54:	2310      	movs	r3, #16
   28a56:	18fb      	adds	r3, r7, r3
   28a58:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
   28a5a:	2312      	movs	r3, #18
   28a5c:	18fb      	adds	r3, r7, r3
   28a5e:	881b      	ldrh	r3, [r3, #0]
   28a60:	2201      	movs	r2, #1
   28a62:	4013      	ands	r3, r2
   28a64:	d044      	beq.n	28af0 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
   28a66:	69bb      	ldr	r3, [r7, #24]
   28a68:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   28a6a:	b29b      	uxth	r3, r3
   28a6c:	2b00      	cmp	r3, #0
   28a6e:	d03c      	beq.n	28aea <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   28a70:	69bb      	ldr	r3, [r7, #24]
   28a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28a74:	781b      	ldrb	r3, [r3, #0]
   28a76:	b2da      	uxtb	r2, r3
   28a78:	231c      	movs	r3, #28
   28a7a:	18fb      	adds	r3, r7, r3
   28a7c:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
   28a7e:	69bb      	ldr	r3, [r7, #24]
   28a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28a82:	1c5a      	adds	r2, r3, #1
   28a84:	69bb      	ldr	r3, [r7, #24]
   28a86:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   28a88:	69bb      	ldr	r3, [r7, #24]
   28a8a:	795b      	ldrb	r3, [r3, #5]
   28a8c:	2b01      	cmp	r3, #1
   28a8e:	d113      	bne.n	28ab8 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
   28a90:	69bb      	ldr	r3, [r7, #24]
   28a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28a94:	781b      	ldrb	r3, [r3, #0]
   28a96:	b2db      	uxtb	r3, r3
   28a98:	021b      	lsls	r3, r3, #8
   28a9a:	b21a      	sxth	r2, r3
   28a9c:	231c      	movs	r3, #28
   28a9e:	18fb      	adds	r3, r7, r3
   28aa0:	2100      	movs	r1, #0
   28aa2:	5e5b      	ldrsh	r3, [r3, r1]
   28aa4:	4313      	orrs	r3, r2
   28aa6:	b21a      	sxth	r2, r3
   28aa8:	231c      	movs	r3, #28
   28aaa:	18fb      	adds	r3, r7, r3
   28aac:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
   28aae:	69bb      	ldr	r3, [r7, #24]
   28ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28ab2:	1c5a      	adds	r2, r3, #1
   28ab4:	69bb      	ldr	r3, [r7, #24]
   28ab6:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
   28ab8:	231c      	movs	r3, #28
   28aba:	18fb      	adds	r3, r7, r3
   28abc:	881b      	ldrh	r3, [r3, #0]
   28abe:	05db      	lsls	r3, r3, #23
   28ac0:	0ddb      	lsrs	r3, r3, #23
   28ac2:	b29a      	uxth	r2, r3
   28ac4:	697b      	ldr	r3, [r7, #20]
   28ac6:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
   28ac8:	69bb      	ldr	r3, [r7, #24]
   28aca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   28acc:	b29b      	uxth	r3, r3
   28ace:	3b01      	subs	r3, #1
   28ad0:	b29b      	uxth	r3, r3
   28ad2:	69ba      	ldr	r2, [r7, #24]
   28ad4:	1c19      	adds	r1, r3, #0
   28ad6:	85d1      	strh	r1, [r2, #46]	; 0x2e
   28ad8:	2b00      	cmp	r3, #0
   28ada:	d109      	bne.n	28af0 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   28adc:	697b      	ldr	r3, [r7, #20]
   28ade:	2201      	movs	r2, #1
   28ae0:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
   28ae2:	697b      	ldr	r3, [r7, #20]
   28ae4:	2202      	movs	r2, #2
   28ae6:	759a      	strb	r2, [r3, #22]
   28ae8:	e002      	b.n	28af0 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   28aea:	697b      	ldr	r3, [r7, #20]
   28aec:	2201      	movs	r2, #1
   28aee:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
   28af0:	2312      	movs	r3, #18
   28af2:	18fb      	adds	r3, r7, r3
   28af4:	881b      	ldrh	r3, [r3, #0]
   28af6:	2202      	movs	r2, #2
   28af8:	4013      	ands	r3, r2
   28afa:	d011      	beq.n	28b20 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
   28afc:	697b      	ldr	r3, [r7, #20]
   28afe:	2202      	movs	r2, #2
   28b00:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
   28b02:	69bb      	ldr	r3, [r7, #24]
   28b04:	2233      	movs	r2, #51	; 0x33
   28b06:	2100      	movs	r1, #0
   28b08:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
   28b0a:	2310      	movs	r3, #16
   28b0c:	18fb      	adds	r3, r7, r3
   28b0e:	881b      	ldrh	r3, [r3, #0]
   28b10:	2201      	movs	r2, #1
   28b12:	4013      	ands	r3, r2
   28b14:	d004      	beq.n	28b20 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
   28b16:	69bb      	ldr	r3, [r7, #24]
   28b18:	68db      	ldr	r3, [r3, #12]
   28b1a:	69ba      	ldr	r2, [r7, #24]
   28b1c:	0010      	movs	r0, r2
   28b1e:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
   28b20:	2312      	movs	r3, #18
   28b22:	18fb      	adds	r3, r7, r3
   28b24:	881b      	ldrh	r3, [r3, #0]
   28b26:	2204      	movs	r2, #4
   28b28:	4013      	ands	r3, r2
   28b2a:	d100      	bne.n	28b2e <_usart_interrupt_handler+0x132>
   28b2c:	e0bd      	b.n	28caa <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
   28b2e:	69bb      	ldr	r3, [r7, #24]
   28b30:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   28b32:	b29b      	uxth	r3, r3
   28b34:	2b00      	cmp	r3, #0
   28b36:	d100      	bne.n	28b3a <_usart_interrupt_handler+0x13e>
   28b38:	e0b4      	b.n	28ca4 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   28b3a:	697b      	ldr	r3, [r7, #20]
   28b3c:	8b5b      	ldrh	r3, [r3, #26]
   28b3e:	b29b      	uxth	r3, r3
   28b40:	b2da      	uxtb	r2, r3
   28b42:	231f      	movs	r3, #31
   28b44:	18fb      	adds	r3, r7, r3
   28b46:	213f      	movs	r1, #63	; 0x3f
   28b48:	400a      	ands	r2, r1
   28b4a:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
   28b4c:	231f      	movs	r3, #31
   28b4e:	18fb      	adds	r3, r7, r3
   28b50:	781b      	ldrb	r3, [r3, #0]
   28b52:	2208      	movs	r2, #8
   28b54:	4013      	ands	r3, r2
   28b56:	d007      	beq.n	28b68 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
   28b58:	231f      	movs	r3, #31
   28b5a:	18fb      	adds	r3, r7, r3
   28b5c:	221f      	movs	r2, #31
   28b5e:	18ba      	adds	r2, r7, r2
   28b60:	7812      	ldrb	r2, [r2, #0]
   28b62:	2108      	movs	r1, #8
   28b64:	438a      	bics	r2, r1
   28b66:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
   28b68:	231f      	movs	r3, #31
   28b6a:	18fb      	adds	r3, r7, r3
   28b6c:	781b      	ldrb	r3, [r3, #0]
   28b6e:	2b00      	cmp	r3, #0
   28b70:	d050      	beq.n	28c14 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
   28b72:	231f      	movs	r3, #31
   28b74:	18fb      	adds	r3, r7, r3
   28b76:	781b      	ldrb	r3, [r3, #0]
   28b78:	2202      	movs	r2, #2
   28b7a:	4013      	ands	r3, r2
   28b7c:	d007      	beq.n	28b8e <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
   28b7e:	69bb      	ldr	r3, [r7, #24]
   28b80:	2232      	movs	r2, #50	; 0x32
   28b82:	211a      	movs	r1, #26
   28b84:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   28b86:	697b      	ldr	r3, [r7, #20]
   28b88:	2202      	movs	r2, #2
   28b8a:	835a      	strh	r2, [r3, #26]
   28b8c:	e036      	b.n	28bfc <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   28b8e:	231f      	movs	r3, #31
   28b90:	18fb      	adds	r3, r7, r3
   28b92:	781b      	ldrb	r3, [r3, #0]
   28b94:	2204      	movs	r2, #4
   28b96:	4013      	ands	r3, r2
   28b98:	d007      	beq.n	28baa <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
   28b9a:	69bb      	ldr	r3, [r7, #24]
   28b9c:	2232      	movs	r2, #50	; 0x32
   28b9e:	211e      	movs	r1, #30
   28ba0:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   28ba2:	697b      	ldr	r3, [r7, #20]
   28ba4:	2204      	movs	r2, #4
   28ba6:	835a      	strh	r2, [r3, #26]
   28ba8:	e028      	b.n	28bfc <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
   28baa:	231f      	movs	r3, #31
   28bac:	18fb      	adds	r3, r7, r3
   28bae:	781b      	ldrb	r3, [r3, #0]
   28bb0:	2201      	movs	r2, #1
   28bb2:	4013      	ands	r3, r2
   28bb4:	d007      	beq.n	28bc6 <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
   28bb6:	69bb      	ldr	r3, [r7, #24]
   28bb8:	2232      	movs	r2, #50	; 0x32
   28bba:	2113      	movs	r1, #19
   28bbc:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   28bbe:	697b      	ldr	r3, [r7, #20]
   28bc0:	2201      	movs	r2, #1
   28bc2:	835a      	strh	r2, [r3, #26]
   28bc4:	e01a      	b.n	28bfc <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
   28bc6:	231f      	movs	r3, #31
   28bc8:	18fb      	adds	r3, r7, r3
   28bca:	781b      	ldrb	r3, [r3, #0]
   28bcc:	2210      	movs	r2, #16
   28bce:	4013      	ands	r3, r2
   28bd0:	d007      	beq.n	28be2 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
   28bd2:	69bb      	ldr	r3, [r7, #24]
   28bd4:	2232      	movs	r2, #50	; 0x32
   28bd6:	2142      	movs	r1, #66	; 0x42
   28bd8:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   28bda:	697b      	ldr	r3, [r7, #20]
   28bdc:	2210      	movs	r2, #16
   28bde:	835a      	strh	r2, [r3, #26]
   28be0:	e00c      	b.n	28bfc <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
   28be2:	231f      	movs	r3, #31
   28be4:	18fb      	adds	r3, r7, r3
   28be6:	781b      	ldrb	r3, [r3, #0]
   28be8:	2220      	movs	r2, #32
   28bea:	4013      	ands	r3, r2
   28bec:	d006      	beq.n	28bfc <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
   28bee:	69bb      	ldr	r3, [r7, #24]
   28bf0:	2232      	movs	r2, #50	; 0x32
   28bf2:	2141      	movs	r1, #65	; 0x41
   28bf4:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   28bf6:	697b      	ldr	r3, [r7, #20]
   28bf8:	2220      	movs	r2, #32
   28bfa:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
   28bfc:	2310      	movs	r3, #16
   28bfe:	18fb      	adds	r3, r7, r3
   28c00:	881b      	ldrh	r3, [r3, #0]
   28c02:	2204      	movs	r2, #4
   28c04:	4013      	ands	r3, r2
				if (callback_status
   28c06:	d050      	beq.n	28caa <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
   28c08:	69bb      	ldr	r3, [r7, #24]
   28c0a:	695b      	ldr	r3, [r3, #20]
   28c0c:	69ba      	ldr	r2, [r7, #24]
   28c0e:	0010      	movs	r0, r2
   28c10:	4798      	blx	r3
   28c12:	e04a      	b.n	28caa <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   28c14:	697b      	ldr	r3, [r7, #20]
   28c16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   28c18:	b29a      	uxth	r2, r3
   28c1a:	230e      	movs	r3, #14
   28c1c:	18fb      	adds	r3, r7, r3
   28c1e:	05d2      	lsls	r2, r2, #23
   28c20:	0dd2      	lsrs	r2, r2, #23
   28c22:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
   28c24:	69bb      	ldr	r3, [r7, #24]
   28c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   28c28:	220e      	movs	r2, #14
   28c2a:	18ba      	adds	r2, r7, r2
   28c2c:	8812      	ldrh	r2, [r2, #0]
   28c2e:	b2d2      	uxtb	r2, r2
   28c30:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
   28c32:	69bb      	ldr	r3, [r7, #24]
   28c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   28c36:	1c5a      	adds	r2, r3, #1
   28c38:	69bb      	ldr	r3, [r7, #24]
   28c3a:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   28c3c:	69bb      	ldr	r3, [r7, #24]
   28c3e:	795b      	ldrb	r3, [r3, #5]
   28c40:	2b01      	cmp	r3, #1
   28c42:	d10d      	bne.n	28c60 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
   28c44:	69bb      	ldr	r3, [r7, #24]
   28c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   28c48:	220e      	movs	r2, #14
   28c4a:	18ba      	adds	r2, r7, r2
   28c4c:	8812      	ldrh	r2, [r2, #0]
   28c4e:	0a12      	lsrs	r2, r2, #8
   28c50:	b292      	uxth	r2, r2
   28c52:	b2d2      	uxtb	r2, r2
   28c54:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
   28c56:	69bb      	ldr	r3, [r7, #24]
   28c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   28c5a:	1c5a      	adds	r2, r3, #1
   28c5c:	69bb      	ldr	r3, [r7, #24]
   28c5e:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
   28c60:	69bb      	ldr	r3, [r7, #24]
   28c62:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   28c64:	b29b      	uxth	r3, r3
   28c66:	3b01      	subs	r3, #1
   28c68:	b29b      	uxth	r3, r3
   28c6a:	69ba      	ldr	r2, [r7, #24]
   28c6c:	1c19      	adds	r1, r3, #0
   28c6e:	8591      	strh	r1, [r2, #44]	; 0x2c
   28c70:	2b00      	cmp	r3, #0
   28c72:	d11a      	bne.n	28caa <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   28c74:	697b      	ldr	r3, [r7, #20]
   28c76:	2204      	movs	r2, #4
   28c78:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
   28c7a:	69bb      	ldr	r3, [r7, #24]
   28c7c:	2232      	movs	r2, #50	; 0x32
   28c7e:	2100      	movs	r1, #0
   28c80:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
   28c82:	2310      	movs	r3, #16
   28c84:	18fb      	adds	r3, r7, r3
   28c86:	881b      	ldrh	r3, [r3, #0]
   28c88:	2202      	movs	r2, #2
   28c8a:	4013      	ands	r3, r2
					if (callback_status
   28c8c:	d00d      	beq.n	28caa <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
   28c8e:	69bb      	ldr	r3, [r7, #24]
   28c90:	691b      	ldr	r3, [r3, #16]
   28c92:	69ba      	ldr	r2, [r7, #24]
   28c94:	0010      	movs	r0, r2
   28c96:	4798      	blx	r3
   28c98:	e007      	b.n	28caa <_usart_interrupt_handler+0x2ae>
   28c9a:	46c0      	nop			; (mov r8, r8)
   28c9c:	20005528 	.word	0x20005528
   28ca0:	000287dd 	.word	0x000287dd
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   28ca4:	697b      	ldr	r3, [r7, #20]
   28ca6:	2204      	movs	r2, #4
   28ca8:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
   28caa:	2312      	movs	r3, #18
   28cac:	18fb      	adds	r3, r7, r3
   28cae:	881b      	ldrh	r3, [r3, #0]
   28cb0:	2210      	movs	r2, #16
   28cb2:	4013      	ands	r3, r2
   28cb4:	d010      	beq.n	28cd8 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
   28cb6:	697b      	ldr	r3, [r7, #20]
   28cb8:	2210      	movs	r2, #16
   28cba:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
   28cbc:	697b      	ldr	r3, [r7, #20]
   28cbe:	2210      	movs	r2, #16
   28cc0:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
   28cc2:	2310      	movs	r3, #16
   28cc4:	18fb      	adds	r3, r7, r3
   28cc6:	881b      	ldrh	r3, [r3, #0]
   28cc8:	2210      	movs	r2, #16
   28cca:	4013      	ands	r3, r2
   28ccc:	d004      	beq.n	28cd8 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
   28cce:	69bb      	ldr	r3, [r7, #24]
   28cd0:	69db      	ldr	r3, [r3, #28]
   28cd2:	69ba      	ldr	r2, [r7, #24]
   28cd4:	0010      	movs	r0, r2
   28cd6:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
   28cd8:	2312      	movs	r3, #18
   28cda:	18fb      	adds	r3, r7, r3
   28cdc:	881b      	ldrh	r3, [r3, #0]
   28cde:	2220      	movs	r2, #32
   28ce0:	4013      	ands	r3, r2
   28ce2:	d010      	beq.n	28d06 <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
   28ce4:	697b      	ldr	r3, [r7, #20]
   28ce6:	2220      	movs	r2, #32
   28ce8:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
   28cea:	697b      	ldr	r3, [r7, #20]
   28cec:	2220      	movs	r2, #32
   28cee:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
   28cf0:	2310      	movs	r3, #16
   28cf2:	18fb      	adds	r3, r7, r3
   28cf4:	881b      	ldrh	r3, [r3, #0]
   28cf6:	2208      	movs	r2, #8
   28cf8:	4013      	ands	r3, r2
   28cfa:	d004      	beq.n	28d06 <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
   28cfc:	69bb      	ldr	r3, [r7, #24]
   28cfe:	699b      	ldr	r3, [r3, #24]
   28d00:	69ba      	ldr	r2, [r7, #24]
   28d02:	0010      	movs	r0, r2
   28d04:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
   28d06:	2312      	movs	r3, #18
   28d08:	18fb      	adds	r3, r7, r3
   28d0a:	881b      	ldrh	r3, [r3, #0]
   28d0c:	2208      	movs	r2, #8
   28d0e:	4013      	ands	r3, r2
   28d10:	d010      	beq.n	28d34 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
   28d12:	697b      	ldr	r3, [r7, #20]
   28d14:	2208      	movs	r2, #8
   28d16:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
   28d18:	697b      	ldr	r3, [r7, #20]
   28d1a:	2208      	movs	r2, #8
   28d1c:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
   28d1e:	2310      	movs	r3, #16
   28d20:	18fb      	adds	r3, r7, r3
   28d22:	881b      	ldrh	r3, [r3, #0]
   28d24:	2220      	movs	r2, #32
   28d26:	4013      	ands	r3, r2
   28d28:	d004      	beq.n	28d34 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
   28d2a:	69bb      	ldr	r3, [r7, #24]
   28d2c:	6a1b      	ldr	r3, [r3, #32]
   28d2e:	69ba      	ldr	r2, [r7, #24]
   28d30:	0010      	movs	r0, r2
   28d32:	4798      	blx	r3
		}
	}
#endif
}
   28d34:	46c0      	nop			; (mov r8, r8)
   28d36:	46bd      	mov	sp, r7
   28d38:	b008      	add	sp, #32
   28d3a:	bd80      	pop	{r7, pc}

00028d3c <system_gclk_gen_get_config_defaults>:
{
   28d3c:	b580      	push	{r7, lr}
   28d3e:	b082      	sub	sp, #8
   28d40:	af00      	add	r7, sp, #0
   28d42:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
   28d44:	687b      	ldr	r3, [r7, #4]
   28d46:	2201      	movs	r2, #1
   28d48:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
   28d4a:	687b      	ldr	r3, [r7, #4]
   28d4c:	2200      	movs	r2, #0
   28d4e:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
   28d50:	687b      	ldr	r3, [r7, #4]
   28d52:	2206      	movs	r2, #6
   28d54:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
   28d56:	687b      	ldr	r3, [r7, #4]
   28d58:	2200      	movs	r2, #0
   28d5a:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
   28d5c:	687b      	ldr	r3, [r7, #4]
   28d5e:	2200      	movs	r2, #0
   28d60:	725a      	strb	r2, [r3, #9]
}
   28d62:	46c0      	nop			; (mov r8, r8)
   28d64:	46bd      	mov	sp, r7
   28d66:	b002      	add	sp, #8
   28d68:	bd80      	pop	{r7, pc}

00028d6a <system_gclk_chan_get_config_defaults>:
{
   28d6a:	b580      	push	{r7, lr}
   28d6c:	b082      	sub	sp, #8
   28d6e:	af00      	add	r7, sp, #0
   28d70:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   28d72:	687b      	ldr	r3, [r7, #4]
   28d74:	2200      	movs	r2, #0
   28d76:	701a      	strb	r2, [r3, #0]
}
   28d78:	46c0      	nop			; (mov r8, r8)
   28d7a:	46bd      	mov	sp, r7
   28d7c:	b002      	add	sp, #8
   28d7e:	bd80      	pop	{r7, pc}

00028d80 <system_clock_source_osc8m_get_config_defaults>:
{
   28d80:	b580      	push	{r7, lr}
   28d82:	b082      	sub	sp, #8
   28d84:	af00      	add	r7, sp, #0
   28d86:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
   28d88:	687b      	ldr	r3, [r7, #4]
   28d8a:	2203      	movs	r2, #3
   28d8c:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
   28d8e:	687b      	ldr	r3, [r7, #4]
   28d90:	2200      	movs	r2, #0
   28d92:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
   28d94:	687b      	ldr	r3, [r7, #4]
   28d96:	2201      	movs	r2, #1
   28d98:	709a      	strb	r2, [r3, #2]
}
   28d9a:	46c0      	nop			; (mov r8, r8)
   28d9c:	46bd      	mov	sp, r7
   28d9e:	b002      	add	sp, #8
   28da0:	bd80      	pop	{r7, pc}
	...

00028da4 <system_cpu_clock_set_divider>:
{
   28da4:	b580      	push	{r7, lr}
   28da6:	b082      	sub	sp, #8
   28da8:	af00      	add	r7, sp, #0
   28daa:	0002      	movs	r2, r0
   28dac:	1dfb      	adds	r3, r7, #7
   28dae:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
   28db0:	4a03      	ldr	r2, [pc, #12]	; (28dc0 <system_cpu_clock_set_divider+0x1c>)
   28db2:	1dfb      	adds	r3, r7, #7
   28db4:	781b      	ldrb	r3, [r3, #0]
   28db6:	7213      	strb	r3, [r2, #8]
}
   28db8:	46c0      	nop			; (mov r8, r8)
   28dba:	46bd      	mov	sp, r7
   28dbc:	b002      	add	sp, #8
   28dbe:	bd80      	pop	{r7, pc}
   28dc0:	40000400 	.word	0x40000400

00028dc4 <system_apb_clock_set_divider>:
{
   28dc4:	b580      	push	{r7, lr}
   28dc6:	b082      	sub	sp, #8
   28dc8:	af00      	add	r7, sp, #0
   28dca:	0002      	movs	r2, r0
   28dcc:	1dfb      	adds	r3, r7, #7
   28dce:	701a      	strb	r2, [r3, #0]
   28dd0:	1dbb      	adds	r3, r7, #6
   28dd2:	1c0a      	adds	r2, r1, #0
   28dd4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   28dd6:	1dfb      	adds	r3, r7, #7
   28dd8:	781b      	ldrb	r3, [r3, #0]
   28dda:	2b01      	cmp	r3, #1
   28ddc:	d008      	beq.n	28df0 <system_apb_clock_set_divider+0x2c>
   28dde:	2b02      	cmp	r3, #2
   28de0:	d00b      	beq.n	28dfa <system_apb_clock_set_divider+0x36>
   28de2:	2b00      	cmp	r3, #0
   28de4:	d10e      	bne.n	28e04 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
   28de6:	4a0b      	ldr	r2, [pc, #44]	; (28e14 <system_apb_clock_set_divider+0x50>)
   28de8:	1dbb      	adds	r3, r7, #6
   28dea:	781b      	ldrb	r3, [r3, #0]
   28dec:	7253      	strb	r3, [r2, #9]
			break;
   28dee:	e00b      	b.n	28e08 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
   28df0:	4a08      	ldr	r2, [pc, #32]	; (28e14 <system_apb_clock_set_divider+0x50>)
   28df2:	1dbb      	adds	r3, r7, #6
   28df4:	781b      	ldrb	r3, [r3, #0]
   28df6:	7293      	strb	r3, [r2, #10]
			break;
   28df8:	e006      	b.n	28e08 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
   28dfa:	4a06      	ldr	r2, [pc, #24]	; (28e14 <system_apb_clock_set_divider+0x50>)
   28dfc:	1dbb      	adds	r3, r7, #6
   28dfe:	781b      	ldrb	r3, [r3, #0]
   28e00:	72d3      	strb	r3, [r2, #11]
			break;
   28e02:	e001      	b.n	28e08 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
   28e04:	2317      	movs	r3, #23
   28e06:	e000      	b.n	28e0a <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
   28e08:	2300      	movs	r3, #0
}
   28e0a:	0018      	movs	r0, r3
   28e0c:	46bd      	mov	sp, r7
   28e0e:	b002      	add	sp, #8
   28e10:	bd80      	pop	{r7, pc}
   28e12:	46c0      	nop			; (mov r8, r8)
   28e14:	40000400 	.word	0x40000400

00028e18 <system_clock_source_dpll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dpll_get_config_defaults(
		struct system_clock_source_dpll_config *const config)
{
   28e18:	b580      	push	{r7, lr}
   28e1a:	b082      	sub	sp, #8
   28e1c:	af00      	add	r7, sp, #0
   28e1e:	6078      	str	r0, [r7, #4]
	config->on_demand           = true;
   28e20:	687b      	ldr	r3, [r7, #4]
   28e22:	2201      	movs	r2, #1
   28e24:	701a      	strb	r2, [r3, #0]
	config->run_in_standby      = false;
   28e26:	687b      	ldr	r3, [r7, #4]
   28e28:	2200      	movs	r2, #0
   28e2a:	705a      	strb	r2, [r3, #1]
	config->lock_bypass         = false;
   28e2c:	687b      	ldr	r3, [r7, #4]
   28e2e:	2200      	movs	r2, #0
   28e30:	709a      	strb	r2, [r3, #2]
	config->wake_up_fast        = false;
   28e32:	687b      	ldr	r3, [r7, #4]
   28e34:	2200      	movs	r2, #0
   28e36:	70da      	strb	r2, [r3, #3]
	config->low_power_enable    = false;
   28e38:	687b      	ldr	r3, [r7, #4]
   28e3a:	2200      	movs	r2, #0
   28e3c:	711a      	strb	r2, [r3, #4]

	config->output_frequency    = 48000000;
   28e3e:	687b      	ldr	r3, [r7, #4]
   28e40:	4a0a      	ldr	r2, [pc, #40]	; (28e6c <system_clock_source_dpll_get_config_defaults+0x54>)
   28e42:	609a      	str	r2, [r3, #8]
	config->reference_frequency = 32768;
   28e44:	687b      	ldr	r3, [r7, #4]
   28e46:	2280      	movs	r2, #128	; 0x80
   28e48:	0212      	lsls	r2, r2, #8
   28e4a:	60da      	str	r2, [r3, #12]
	config->reference_divider   = 1;
   28e4c:	687b      	ldr	r3, [r7, #4]
   28e4e:	2201      	movs	r2, #1
   28e50:	821a      	strh	r2, [r3, #16]
	config->reference_clock     = SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC32K;
   28e52:	687b      	ldr	r3, [r7, #4]
   28e54:	2200      	movs	r2, #0
   28e56:	751a      	strb	r2, [r3, #20]

	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
   28e58:	687b      	ldr	r3, [r7, #4]
   28e5a:	2200      	movs	r2, #0
   28e5c:	74da      	strb	r2, [r3, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
   28e5e:	687b      	ldr	r3, [r7, #4]
   28e60:	2200      	movs	r2, #0
   28e62:	749a      	strb	r2, [r3, #18]
};
   28e64:	46c0      	nop			; (mov r8, r8)
   28e66:	46bd      	mov	sp, r7
   28e68:	b002      	add	sp, #8
   28e6a:	bd80      	pop	{r7, pc}
   28e6c:	02dc6c00 	.word	0x02dc6c00

00028e70 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
   28e70:	b580      	push	{r7, lr}
   28e72:	b082      	sub	sp, #8
   28e74:	af00      	add	r7, sp, #0
   28e76:	0002      	movs	r2, r0
   28e78:	1dfb      	adds	r3, r7, #7
   28e7a:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   28e7c:	4a08      	ldr	r2, [pc, #32]	; (28ea0 <system_flash_set_waitstates+0x30>)
   28e7e:	1dfb      	adds	r3, r7, #7
   28e80:	781b      	ldrb	r3, [r3, #0]
   28e82:	210f      	movs	r1, #15
   28e84:	400b      	ands	r3, r1
   28e86:	b2d9      	uxtb	r1, r3
   28e88:	6853      	ldr	r3, [r2, #4]
   28e8a:	200f      	movs	r0, #15
   28e8c:	4001      	ands	r1, r0
   28e8e:	0049      	lsls	r1, r1, #1
   28e90:	201e      	movs	r0, #30
   28e92:	4383      	bics	r3, r0
   28e94:	430b      	orrs	r3, r1
   28e96:	6053      	str	r3, [r2, #4]
}
   28e98:	46c0      	nop			; (mov r8, r8)
   28e9a:	46bd      	mov	sp, r7
   28e9c:	b002      	add	sp, #8
   28e9e:	bd80      	pop	{r7, pc}
   28ea0:	41004000 	.word	0x41004000

00028ea4 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
   28ea4:	b580      	push	{r7, lr}
   28ea6:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   28ea8:	46c0      	nop			; (mov r8, r8)
   28eaa:	4b04      	ldr	r3, [pc, #16]	; (28ebc <_system_dfll_wait_for_sync+0x18>)
   28eac:	68db      	ldr	r3, [r3, #12]
   28eae:	2210      	movs	r2, #16
   28eb0:	4013      	ands	r3, r2
   28eb2:	d0fa      	beq.n	28eaa <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
   28eb4:	46c0      	nop			; (mov r8, r8)
   28eb6:	46bd      	mov	sp, r7
   28eb8:	bd80      	pop	{r7, pc}
   28eba:	46c0      	nop			; (mov r8, r8)
   28ebc:	40000800 	.word	0x40000800

00028ec0 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
   28ec0:	b580      	push	{r7, lr}
   28ec2:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
   28ec4:	4b0c      	ldr	r3, [pc, #48]	; (28ef8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   28ec6:	2202      	movs	r2, #2
   28ec8:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   28eca:	4b0c      	ldr	r3, [pc, #48]	; (28efc <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   28ecc:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   28ece:	4a0a      	ldr	r2, [pc, #40]	; (28ef8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   28ed0:	4b0b      	ldr	r3, [pc, #44]	; (28f00 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   28ed2:	689b      	ldr	r3, [r3, #8]
   28ed4:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   28ed6:	4a08      	ldr	r2, [pc, #32]	; (28ef8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   28ed8:	4b09      	ldr	r3, [pc, #36]	; (28f00 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   28eda:	685b      	ldr	r3, [r3, #4]
   28edc:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
   28ede:	4b06      	ldr	r3, [pc, #24]	; (28ef8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   28ee0:	2200      	movs	r2, #0
   28ee2:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   28ee4:	4b05      	ldr	r3, [pc, #20]	; (28efc <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   28ee6:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   28ee8:	4a03      	ldr	r2, [pc, #12]	; (28ef8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   28eea:	4b05      	ldr	r3, [pc, #20]	; (28f00 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   28eec:	681b      	ldr	r3, [r3, #0]
   28eee:	b29b      	uxth	r3, r3
   28ef0:	8493      	strh	r3, [r2, #36]	; 0x24
}
   28ef2:	46c0      	nop			; (mov r8, r8)
   28ef4:	46bd      	mov	sp, r7
   28ef6:	bd80      	pop	{r7, pc}
   28ef8:	40000800 	.word	0x40000800
   28efc:	00028ea5 	.word	0x00028ea5
   28f00:	20003cf8 	.word	0x20003cf8

00028f04 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   28f04:	b580      	push	{r7, lr}
   28f06:	b082      	sub	sp, #8
   28f08:	af00      	add	r7, sp, #0
   28f0a:	0002      	movs	r2, r0
   28f0c:	1dfb      	adds	r3, r7, #7
   28f0e:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   28f10:	1dfb      	adds	r3, r7, #7
   28f12:	781b      	ldrb	r3, [r3, #0]
   28f14:	2b08      	cmp	r3, #8
   28f16:	d841      	bhi.n	28f9c <system_clock_source_get_hz+0x98>
   28f18:	009a      	lsls	r2, r3, #2
   28f1a:	4b23      	ldr	r3, [pc, #140]	; (28fa8 <system_clock_source_get_hz+0xa4>)
   28f1c:	18d3      	adds	r3, r2, r3
   28f1e:	681b      	ldr	r3, [r3, #0]
   28f20:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
   28f22:	4b22      	ldr	r3, [pc, #136]	; (28fac <system_clock_source_get_hz+0xa8>)
   28f24:	691b      	ldr	r3, [r3, #16]
   28f26:	e03a      	b.n	28f9e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
   28f28:	4b21      	ldr	r3, [pc, #132]	; (28fb0 <system_clock_source_get_hz+0xac>)
   28f2a:	6a1b      	ldr	r3, [r3, #32]
   28f2c:	059b      	lsls	r3, r3, #22
   28f2e:	0f9b      	lsrs	r3, r3, #30
   28f30:	b2db      	uxtb	r3, r3
   28f32:	001a      	movs	r2, r3
   28f34:	4b1f      	ldr	r3, [pc, #124]	; (28fb4 <system_clock_source_get_hz+0xb0>)
   28f36:	40d3      	lsrs	r3, r2
   28f38:	e031      	b.n	28f9e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
   28f3a:	2380      	movs	r3, #128	; 0x80
   28f3c:	021b      	lsls	r3, r3, #8
   28f3e:	e02e      	b.n	28f9e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
   28f40:	2380      	movs	r3, #128	; 0x80
   28f42:	021b      	lsls	r3, r3, #8
   28f44:	e02b      	b.n	28f9e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
   28f46:	4b19      	ldr	r3, [pc, #100]	; (28fac <system_clock_source_get_hz+0xa8>)
   28f48:	695b      	ldr	r3, [r3, #20]
   28f4a:	e028      	b.n	28f9e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   28f4c:	4b17      	ldr	r3, [pc, #92]	; (28fac <system_clock_source_get_hz+0xa8>)
   28f4e:	681b      	ldr	r3, [r3, #0]
   28f50:	2202      	movs	r2, #2
   28f52:	4013      	ands	r3, r2
   28f54:	d101      	bne.n	28f5a <system_clock_source_get_hz+0x56>
			return 0;
   28f56:	2300      	movs	r3, #0
   28f58:	e021      	b.n	28f9e <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
   28f5a:	4b17      	ldr	r3, [pc, #92]	; (28fb8 <system_clock_source_get_hz+0xb4>)
   28f5c:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
   28f5e:	4b13      	ldr	r3, [pc, #76]	; (28fac <system_clock_source_get_hz+0xa8>)
   28f60:	681b      	ldr	r3, [r3, #0]
   28f62:	2224      	movs	r2, #36	; 0x24
   28f64:	4013      	ands	r3, r2
   28f66:	2b04      	cmp	r3, #4
   28f68:	d109      	bne.n	28f7e <system_clock_source_get_hz+0x7a>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   28f6a:	2000      	movs	r0, #0
   28f6c:	4b13      	ldr	r3, [pc, #76]	; (28fbc <system_clock_source_get_hz+0xb8>)
   28f6e:	4798      	blx	r3
   28f70:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
   28f72:	4b0e      	ldr	r3, [pc, #56]	; (28fac <system_clock_source_get_hz+0xa8>)
   28f74:	689b      	ldr	r3, [r3, #8]
   28f76:	041b      	lsls	r3, r3, #16
   28f78:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   28f7a:	4353      	muls	r3, r2
   28f7c:	e00f      	b.n	28f9e <system_clock_source_get_hz+0x9a>
		default:
			return 48000000UL;
   28f7e:	4b10      	ldr	r3, [pc, #64]	; (28fc0 <system_clock_source_get_hz+0xbc>)
   28f80:	e00d      	b.n	28f9e <system_clock_source_get_hz+0x9a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   28f82:	4a0b      	ldr	r2, [pc, #44]	; (28fb0 <system_clock_source_get_hz+0xac>)
   28f84:	2350      	movs	r3, #80	; 0x50
   28f86:	5cd3      	ldrb	r3, [r2, r3]
   28f88:	b2db      	uxtb	r3, r3
   28f8a:	001a      	movs	r2, r3
   28f8c:	2304      	movs	r3, #4
   28f8e:	4013      	ands	r3, r2
   28f90:	d101      	bne.n	28f96 <system_clock_source_get_hz+0x92>
			return 0;
   28f92:	2300      	movs	r3, #0
   28f94:	e003      	b.n	28f9e <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
   28f96:	4b05      	ldr	r3, [pc, #20]	; (28fac <system_clock_source_get_hz+0xa8>)
   28f98:	68db      	ldr	r3, [r3, #12]
   28f9a:	e000      	b.n	28f9e <system_clock_source_get_hz+0x9a>
#endif

	default:
		return 0;
   28f9c:	2300      	movs	r3, #0
	}
}
   28f9e:	0018      	movs	r0, r3
   28fa0:	46bd      	mov	sp, r7
   28fa2:	b002      	add	sp, #8
   28fa4:	bd80      	pop	{r7, pc}
   28fa6:	46c0      	nop			; (mov r8, r8)
   28fa8:	00039eec 	.word	0x00039eec
   28fac:	20003cf8 	.word	0x20003cf8
   28fb0:	40000800 	.word	0x40000800
   28fb4:	007a1200 	.word	0x007a1200
   28fb8:	00028ea5 	.word	0x00028ea5
   28fbc:	000299a1 	.word	0x000299a1
   28fc0:	02dc6c00 	.word	0x02dc6c00

00028fc4 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
   28fc4:	b580      	push	{r7, lr}
   28fc6:	b084      	sub	sp, #16
   28fc8:	af00      	add	r7, sp, #0
   28fca:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
   28fcc:	4b1a      	ldr	r3, [pc, #104]	; (29038 <system_clock_source_osc8m_set_config+0x74>)
   28fce:	6a1b      	ldr	r3, [r3, #32]
   28fd0:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
   28fd2:	687b      	ldr	r3, [r7, #4]
   28fd4:	781b      	ldrb	r3, [r3, #0]
   28fd6:	1c1a      	adds	r2, r3, #0
   28fd8:	2303      	movs	r3, #3
   28fda:	4013      	ands	r3, r2
   28fdc:	b2da      	uxtb	r2, r3
   28fde:	230d      	movs	r3, #13
   28fe0:	18fb      	adds	r3, r7, r3
   28fe2:	2103      	movs	r1, #3
   28fe4:	400a      	ands	r2, r1
   28fe6:	0010      	movs	r0, r2
   28fe8:	781a      	ldrb	r2, [r3, #0]
   28fea:	2103      	movs	r1, #3
   28fec:	438a      	bics	r2, r1
   28fee:	1c11      	adds	r1, r2, #0
   28ff0:	1c02      	adds	r2, r0, #0
   28ff2:	430a      	orrs	r2, r1
   28ff4:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
   28ff6:	687b      	ldr	r3, [r7, #4]
   28ff8:	789a      	ldrb	r2, [r3, #2]
   28ffa:	230c      	movs	r3, #12
   28ffc:	18fb      	adds	r3, r7, r3
   28ffe:	01d0      	lsls	r0, r2, #7
   29000:	781a      	ldrb	r2, [r3, #0]
   29002:	217f      	movs	r1, #127	; 0x7f
   29004:	400a      	ands	r2, r1
   29006:	1c11      	adds	r1, r2, #0
   29008:	1c02      	adds	r2, r0, #0
   2900a:	430a      	orrs	r2, r1
   2900c:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   2900e:	687b      	ldr	r3, [r7, #4]
   29010:	785a      	ldrb	r2, [r3, #1]
   29012:	230c      	movs	r3, #12
   29014:	18fb      	adds	r3, r7, r3
   29016:	2101      	movs	r1, #1
   29018:	400a      	ands	r2, r1
   2901a:	0190      	lsls	r0, r2, #6
   2901c:	781a      	ldrb	r2, [r3, #0]
   2901e:	2140      	movs	r1, #64	; 0x40
   29020:	438a      	bics	r2, r1
   29022:	1c11      	adds	r1, r2, #0
   29024:	1c02      	adds	r2, r0, #0
   29026:	430a      	orrs	r2, r1
   29028:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
   2902a:	4b03      	ldr	r3, [pc, #12]	; (29038 <system_clock_source_osc8m_set_config+0x74>)
   2902c:	68fa      	ldr	r2, [r7, #12]
   2902e:	621a      	str	r2, [r3, #32]
}
   29030:	46c0      	nop			; (mov r8, r8)
   29032:	46bd      	mov	sp, r7
   29034:	b004      	add	sp, #16
   29036:	bd80      	pop	{r7, pc}
   29038:	40000800 	.word	0x40000800

0002903c <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
   2903c:	b580      	push	{r7, lr}
   2903e:	b086      	sub	sp, #24
   29040:	af00      	add	r7, sp, #0
   29042:	6078      	str	r0, [r7, #4]

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
   29044:	687b      	ldr	r3, [r7, #4]
   29046:	68db      	ldr	r3, [r3, #12]
   29048:	617b      	str	r3, [r7, #20]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
   2904a:	687b      	ldr	r3, [r7, #4]
   2904c:	7d1b      	ldrb	r3, [r3, #20]
   2904e:	2b01      	cmp	r3, #1
   29050:	d10a      	bne.n	29068 <system_clock_source_dpll_set_config+0x2c>
		refclk = refclk / (2 * (config->reference_divider + 1));
   29052:	687b      	ldr	r3, [r7, #4]
   29054:	8a1b      	ldrh	r3, [r3, #16]
   29056:	3301      	adds	r3, #1
   29058:	005b      	lsls	r3, r3, #1
   2905a:	001a      	movs	r2, r3
   2905c:	4b36      	ldr	r3, [pc, #216]	; (29138 <system_clock_source_dpll_set_config+0xfc>)
   2905e:	0011      	movs	r1, r2
   29060:	6978      	ldr	r0, [r7, #20]
   29062:	4798      	blx	r3
   29064:	0003      	movs	r3, r0
   29066:	617b      	str	r3, [r7, #20]
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
   29068:	687b      	ldr	r3, [r7, #4]
   2906a:	689b      	ldr	r3, [r3, #8]
   2906c:	011a      	lsls	r2, r3, #4
   2906e:	4b32      	ldr	r3, [pc, #200]	; (29138 <system_clock_source_dpll_set_config+0xfc>)
   29070:	6979      	ldr	r1, [r7, #20]
   29072:	0010      	movs	r0, r2
   29074:	4798      	blx	r3
   29076:	0003      	movs	r3, r0
   29078:	613b      	str	r3, [r7, #16]
	tmpldrfrac = tmpldr & 0x0f;
   2907a:	693b      	ldr	r3, [r7, #16]
   2907c:	b2da      	uxtb	r2, r3
   2907e:	230f      	movs	r3, #15
   29080:	18fb      	adds	r3, r7, r3
   29082:	210f      	movs	r1, #15
   29084:	400a      	ands	r2, r1
   29086:	701a      	strb	r2, [r3, #0]
	tmpldr = (tmpldr >> 4) - 1;
   29088:	693b      	ldr	r3, [r7, #16]
   2908a:	091b      	lsrs	r3, r3, #4
   2908c:	3b01      	subs	r3, #1
   2908e:	613b      	str	r3, [r7, #16]

	SYSCTRL->DPLLCTRLA.reg =
   29090:	492a      	ldr	r1, [pc, #168]	; (2913c <system_clock_source_dpll_set_config+0x100>)
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   29092:	687b      	ldr	r3, [r7, #4]
   29094:	781b      	ldrb	r3, [r3, #0]
   29096:	01db      	lsls	r3, r3, #7
   29098:	b2da      	uxtb	r2, r3
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);
   2909a:	687b      	ldr	r3, [r7, #4]
   2909c:	785b      	ldrb	r3, [r3, #1]
   2909e:	019b      	lsls	r3, r3, #6
   290a0:	b2db      	uxtb	r3, r3
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   290a2:	4313      	orrs	r3, r2
   290a4:	b2da      	uxtb	r2, r3
	SYSCTRL->DPLLCTRLA.reg =
   290a6:	2344      	movs	r3, #68	; 0x44
   290a8:	54ca      	strb	r2, [r1, r3]

	SYSCTRL->DPLLRATIO.reg =
   290aa:	4b24      	ldr	r3, [pc, #144]	; (2913c <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   290ac:	220f      	movs	r2, #15
   290ae:	18ba      	adds	r2, r7, r2
   290b0:	7812      	ldrb	r2, [r2, #0]
   290b2:	0412      	lsls	r2, r2, #16
   290b4:	0011      	movs	r1, r2
   290b6:	22f0      	movs	r2, #240	; 0xf0
   290b8:	0312      	lsls	r2, r2, #12
   290ba:	4011      	ands	r1, r2
			SYSCTRL_DPLLRATIO_LDR(tmpldr);
   290bc:	693a      	ldr	r2, [r7, #16]
   290be:	0512      	lsls	r2, r2, #20
   290c0:	0d12      	lsrs	r2, r2, #20
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   290c2:	430a      	orrs	r2, r1
	SYSCTRL->DPLLRATIO.reg =
   290c4:	649a      	str	r2, [r3, #72]	; 0x48

	SYSCTRL->DPLLCTRLB.reg =
   290c6:	4b1d      	ldr	r3, [pc, #116]	; (2913c <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   290c8:	687a      	ldr	r2, [r7, #4]
   290ca:	8a12      	ldrh	r2, [r2, #16]
   290cc:	0412      	lsls	r2, r2, #16
   290ce:	0011      	movs	r1, r2
   290d0:	4a1b      	ldr	r2, [pc, #108]	; (29140 <system_clock_source_dpll_set_config+0x104>)
   290d2:	4011      	ands	r1, r2
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   290d4:	687a      	ldr	r2, [r7, #4]
   290d6:	7892      	ldrb	r2, [r2, #2]
   290d8:	0312      	lsls	r2, r2, #12
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   290da:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   290dc:	687a      	ldr	r2, [r7, #4]
   290de:	7cd2      	ldrb	r2, [r2, #19]
   290e0:	0212      	lsls	r2, r2, #8
   290e2:	0010      	movs	r0, r2
   290e4:	22e0      	movs	r2, #224	; 0xe0
   290e6:	00d2      	lsls	r2, r2, #3
   290e8:	4002      	ands	r2, r0
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   290ea:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   290ec:	687a      	ldr	r2, [r7, #4]
   290ee:	7d12      	ldrb	r2, [r2, #20]
   290f0:	0112      	lsls	r2, r2, #4
   290f2:	0010      	movs	r0, r2
   290f4:	2230      	movs	r2, #48	; 0x30
   290f6:	4002      	ands	r2, r0
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   290f8:	4311      	orrs	r1, r2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   290fa:	687a      	ldr	r2, [r7, #4]
   290fc:	78d2      	ldrb	r2, [r2, #3]
   290fe:	00d2      	lsls	r2, r2, #3
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   29100:	4311      	orrs	r1, r2
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   29102:	687a      	ldr	r2, [r7, #4]
   29104:	7912      	ldrb	r2, [r2, #4]
   29106:	0092      	lsls	r2, r2, #2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   29108:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);
   2910a:	687a      	ldr	r2, [r7, #4]
   2910c:	7c92      	ldrb	r2, [r2, #18]
   2910e:	0010      	movs	r0, r2
   29110:	2203      	movs	r2, #3
   29112:	4002      	ands	r2, r0
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   29114:	430a      	orrs	r2, r1
	SYSCTRL->DPLLCTRLB.reg =
   29116:	64da      	str	r2, [r3, #76]	; 0x4c

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
   29118:	693b      	ldr	r3, [r7, #16]
   2911a:	3301      	adds	r3, #1
   2911c:	011a      	lsls	r2, r3, #4
   2911e:	230f      	movs	r3, #15
   29120:	18fb      	adds	r3, r7, r3
   29122:	781b      	ldrb	r3, [r3, #0]
   29124:	18d3      	adds	r3, r2, r3
   29126:	697a      	ldr	r2, [r7, #20]
   29128:	4353      	muls	r3, r2
   2912a:	091a      	lsrs	r2, r3, #4
	_system_clock_inst.dpll.frequency =
   2912c:	4b05      	ldr	r3, [pc, #20]	; (29144 <system_clock_source_dpll_set_config+0x108>)
   2912e:	60da      	str	r2, [r3, #12]
}
   29130:	46c0      	nop			; (mov r8, r8)
   29132:	46bd      	mov	sp, r7
   29134:	b006      	add	sp, #24
   29136:	bd80      	pop	{r7, pc}
   29138:	000323c9 	.word	0x000323c9
   2913c:	40000800 	.word	0x40000800
   29140:	07ff0000 	.word	0x07ff0000
   29144:	20003cf8 	.word	0x20003cf8

00029148 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
   29148:	b580      	push	{r7, lr}
   2914a:	b082      	sub	sp, #8
   2914c:	af00      	add	r7, sp, #0
   2914e:	0002      	movs	r2, r0
   29150:	1dfb      	adds	r3, r7, #7
   29152:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   29154:	1dfb      	adds	r3, r7, #7
   29156:	781b      	ldrb	r3, [r3, #0]
   29158:	2b08      	cmp	r3, #8
   2915a:	d83b      	bhi.n	291d4 <system_clock_source_enable+0x8c>
   2915c:	009a      	lsls	r2, r3, #2
   2915e:	4b21      	ldr	r3, [pc, #132]	; (291e4 <system_clock_source_enable+0x9c>)
   29160:	18d3      	adds	r3, r2, r3
   29162:	681b      	ldr	r3, [r3, #0]
   29164:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
   29166:	4b20      	ldr	r3, [pc, #128]	; (291e8 <system_clock_source_enable+0xa0>)
   29168:	4a1f      	ldr	r2, [pc, #124]	; (291e8 <system_clock_source_enable+0xa0>)
   2916a:	6a12      	ldr	r2, [r2, #32]
   2916c:	2102      	movs	r1, #2
   2916e:	430a      	orrs	r2, r1
   29170:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
   29172:	2300      	movs	r3, #0
   29174:	e031      	b.n	291da <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
   29176:	4b1c      	ldr	r3, [pc, #112]	; (291e8 <system_clock_source_enable+0xa0>)
   29178:	4a1b      	ldr	r2, [pc, #108]	; (291e8 <system_clock_source_enable+0xa0>)
   2917a:	6992      	ldr	r2, [r2, #24]
   2917c:	2102      	movs	r1, #2
   2917e:	430a      	orrs	r2, r1
   29180:	619a      	str	r2, [r3, #24]
		break;
   29182:	e029      	b.n	291d8 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
   29184:	4a18      	ldr	r2, [pc, #96]	; (291e8 <system_clock_source_enable+0xa0>)
   29186:	4b18      	ldr	r3, [pc, #96]	; (291e8 <system_clock_source_enable+0xa0>)
   29188:	8a1b      	ldrh	r3, [r3, #16]
   2918a:	b29b      	uxth	r3, r3
   2918c:	2102      	movs	r1, #2
   2918e:	430b      	orrs	r3, r1
   29190:	b29b      	uxth	r3, r3
   29192:	8213      	strh	r3, [r2, #16]
		break;
   29194:	e020      	b.n	291d8 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
   29196:	4a14      	ldr	r2, [pc, #80]	; (291e8 <system_clock_source_enable+0xa0>)
   29198:	4b13      	ldr	r3, [pc, #76]	; (291e8 <system_clock_source_enable+0xa0>)
   2919a:	8a9b      	ldrh	r3, [r3, #20]
   2919c:	b29b      	uxth	r3, r3
   2919e:	2102      	movs	r1, #2
   291a0:	430b      	orrs	r3, r1
   291a2:	b29b      	uxth	r3, r3
   291a4:	8293      	strh	r3, [r2, #20]
		break;
   291a6:	e017      	b.n	291d8 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   291a8:	4b10      	ldr	r3, [pc, #64]	; (291ec <system_clock_source_enable+0xa4>)
   291aa:	681b      	ldr	r3, [r3, #0]
   291ac:	2202      	movs	r2, #2
   291ae:	431a      	orrs	r2, r3
   291b0:	4b0e      	ldr	r3, [pc, #56]	; (291ec <system_clock_source_enable+0xa4>)
   291b2:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
   291b4:	4b0e      	ldr	r3, [pc, #56]	; (291f0 <system_clock_source_enable+0xa8>)
   291b6:	4798      	blx	r3
		break;
   291b8:	e00e      	b.n	291d8 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
   291ba:	4a0b      	ldr	r2, [pc, #44]	; (291e8 <system_clock_source_enable+0xa0>)
   291bc:	490a      	ldr	r1, [pc, #40]	; (291e8 <system_clock_source_enable+0xa0>)
   291be:	2344      	movs	r3, #68	; 0x44
   291c0:	5ccb      	ldrb	r3, [r1, r3]
   291c2:	b2db      	uxtb	r3, r3
   291c4:	2102      	movs	r1, #2
   291c6:	430b      	orrs	r3, r1
   291c8:	b2d9      	uxtb	r1, r3
   291ca:	2344      	movs	r3, #68	; 0x44
   291cc:	54d1      	strb	r1, [r2, r3]
		break;
   291ce:	e003      	b.n	291d8 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
   291d0:	2300      	movs	r3, #0
   291d2:	e002      	b.n	291da <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   291d4:	2317      	movs	r3, #23
   291d6:	e000      	b.n	291da <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
   291d8:	2300      	movs	r3, #0
}
   291da:	0018      	movs	r0, r3
   291dc:	46bd      	mov	sp, r7
   291de:	b002      	add	sp, #8
   291e0:	bd80      	pop	{r7, pc}
   291e2:	46c0      	nop			; (mov r8, r8)
   291e4:	00039f10 	.word	0x00039f10
   291e8:	40000800 	.word	0x40000800
   291ec:	20003cf8 	.word	0x20003cf8
   291f0:	00028ec1 	.word	0x00028ec1

000291f4 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
   291f4:	b580      	push	{r7, lr}
   291f6:	b084      	sub	sp, #16
   291f8:	af00      	add	r7, sp, #0
   291fa:	0002      	movs	r2, r0
   291fc:	1dfb      	adds	r3, r7, #7
   291fe:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
   29200:	2300      	movs	r3, #0
   29202:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
   29204:	1dfb      	adds	r3, r7, #7
   29206:	781b      	ldrb	r3, [r3, #0]
   29208:	2b08      	cmp	r3, #8
   2920a:	d821      	bhi.n	29250 <system_clock_source_is_ready+0x5c>
   2920c:	009a      	lsls	r2, r3, #2
   2920e:	4b18      	ldr	r3, [pc, #96]	; (29270 <system_clock_source_is_ready+0x7c>)
   29210:	18d3      	adds	r3, r2, r3
   29212:	681b      	ldr	r3, [r3, #0]
   29214:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
   29216:	2308      	movs	r3, #8
   29218:	60fb      	str	r3, [r7, #12]
		break;
   2921a:	e01b      	b.n	29254 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
   2921c:	2304      	movs	r3, #4
   2921e:	60fb      	str	r3, [r7, #12]
		break;
   29220:	e018      	b.n	29254 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
   29222:	2301      	movs	r3, #1
   29224:	60fb      	str	r3, [r7, #12]
		break;
   29226:	e015      	b.n	29254 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
   29228:	2302      	movs	r3, #2
   2922a:	60fb      	str	r3, [r7, #12]
		break;
   2922c:	e012      	b.n	29254 <system_clock_source_is_ready+0x60>
	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
   2922e:	2310      	movs	r3, #16
   29230:	60fb      	str	r3, [r7, #12]
		}
		break;
   29232:	e00f      	b.n	29254 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
   29234:	4a0f      	ldr	r2, [pc, #60]	; (29274 <system_clock_source_is_ready+0x80>)
   29236:	2350      	movs	r3, #80	; 0x50
   29238:	5cd3      	ldrb	r3, [r2, r3]
   2923a:	b2db      	uxtb	r3, r3
   2923c:	001a      	movs	r2, r3
   2923e:	2303      	movs	r3, #3
   29240:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
   29242:	3b03      	subs	r3, #3
   29244:	425a      	negs	r2, r3
   29246:	4153      	adcs	r3, r2
   29248:	b2db      	uxtb	r3, r3
   2924a:	e00c      	b.n	29266 <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
   2924c:	2301      	movs	r3, #1
   2924e:	e00a      	b.n	29266 <system_clock_source_is_ready+0x72>

	default:
		return false;
   29250:	2300      	movs	r3, #0
   29252:	e008      	b.n	29266 <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
   29254:	4b07      	ldr	r3, [pc, #28]	; (29274 <system_clock_source_is_ready+0x80>)
   29256:	68db      	ldr	r3, [r3, #12]
   29258:	68fa      	ldr	r2, [r7, #12]
   2925a:	401a      	ands	r2, r3
   2925c:	68fb      	ldr	r3, [r7, #12]
   2925e:	1ad3      	subs	r3, r2, r3
   29260:	425a      	negs	r2, r3
   29262:	4153      	adcs	r3, r2
   29264:	b2db      	uxtb	r3, r3
}
   29266:	0018      	movs	r0, r3
   29268:	46bd      	mov	sp, r7
   2926a:	b004      	add	sp, #16
   2926c:	bd80      	pop	{r7, pc}
   2926e:	46c0      	nop			; (mov r8, r8)
   29270:	00039f34 	.word	0x00039f34
   29274:	40000800 	.word	0x40000800

00029278 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
   29278:	b580      	push	{r7, lr}
   2927a:	b082      	sub	sp, #8
   2927c:	af00      	add	r7, sp, #0
#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
   2927e:	003b      	movs	r3, r7
   29280:	2203      	movs	r2, #3
   29282:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   29284:	2300      	movs	r3, #0
   29286:	607b      	str	r3, [r7, #4]
   29288:	e009      	b.n	2929e <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
   2928a:	687b      	ldr	r3, [r7, #4]
   2928c:	b2db      	uxtb	r3, r3
   2928e:	003a      	movs	r2, r7
   29290:	0011      	movs	r1, r2
   29292:	0018      	movs	r0, r3
   29294:	4b05      	ldr	r3, [pc, #20]	; (292ac <_switch_peripheral_gclk+0x34>)
   29296:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   29298:	687b      	ldr	r3, [r7, #4]
   2929a:	3301      	adds	r3, #1
   2929c:	607b      	str	r3, [r7, #4]
   2929e:	687b      	ldr	r3, [r7, #4]
   292a0:	2b24      	cmp	r3, #36	; 0x24
   292a2:	d9f2      	bls.n	2928a <_switch_peripheral_gclk+0x12>
	}
}
   292a4:	46c0      	nop			; (mov r8, r8)
   292a6:	46bd      	mov	sp, r7
   292a8:	b002      	add	sp, #8
   292aa:	bd80      	pop	{r7, pc}
   292ac:	0002987d 	.word	0x0002987d

000292b0 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
   292b0:	b580      	push	{r7, lr}
   292b2:	b0a6      	sub	sp, #152	; 0x98
   292b4:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
   292b6:	4b92      	ldr	r3, [pc, #584]	; (29500 <system_clock_init+0x250>)
   292b8:	22c2      	movs	r2, #194	; 0xc2
   292ba:	00d2      	lsls	r2, r2, #3
   292bc:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
   292be:	2003      	movs	r0, #3
   292c0:	4b90      	ldr	r3, [pc, #576]	; (29504 <system_clock_init+0x254>)
   292c2:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
   292c4:	4b90      	ldr	r3, [pc, #576]	; (29508 <system_clock_init+0x258>)
   292c6:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
   292c8:	2394      	movs	r3, #148	; 0x94
   292ca:	18fb      	adds	r3, r7, r3
   292cc:	0018      	movs	r0, r3
   292ce:	4b8f      	ldr	r3, [pc, #572]	; (2950c <system_clock_init+0x25c>)
   292d0:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
   292d2:	2394      	movs	r3, #148	; 0x94
   292d4:	18fb      	adds	r3, r7, r3
   292d6:	2200      	movs	r2, #0
   292d8:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
   292da:	2394      	movs	r3, #148	; 0x94
   292dc:	18fb      	adds	r3, r7, r3
   292de:	2201      	movs	r2, #1
   292e0:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
   292e2:	2394      	movs	r3, #148	; 0x94
   292e4:	18fb      	adds	r3, r7, r3
   292e6:	2200      	movs	r2, #0
   292e8:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
   292ea:	2394      	movs	r3, #148	; 0x94
   292ec:	18fb      	adds	r3, r7, r3
   292ee:	0018      	movs	r0, r3
   292f0:	4b87      	ldr	r3, [pc, #540]	; (29510 <system_clock_init+0x260>)
   292f2:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
   292f4:	2006      	movs	r0, #6
   292f6:	4b87      	ldr	r3, [pc, #540]	; (29514 <system_clock_init+0x264>)
   292f8:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   292fa:	4b87      	ldr	r3, [pc, #540]	; (29518 <system_clock_init+0x268>)
   292fc:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   292fe:	2360      	movs	r3, #96	; 0x60
   29300:	18fb      	adds	r3, r7, r3
   29302:	0018      	movs	r0, r3
   29304:	4b85      	ldr	r3, [pc, #532]	; (2951c <system_clock_init+0x26c>)
   29306:	4798      	blx	r3
   29308:	2360      	movs	r3, #96	; 0x60
   2930a:	18fb      	adds	r3, r7, r3
   2930c:	2206      	movs	r2, #6
   2930e:	701a      	strb	r2, [r3, #0]
   29310:	2360      	movs	r3, #96	; 0x60
   29312:	18fb      	adds	r3, r7, r3
   29314:	2208      	movs	r2, #8
   29316:	605a      	str	r2, [r3, #4]
   29318:	2360      	movs	r3, #96	; 0x60
   2931a:	18fb      	adds	r3, r7, r3
   2931c:	2200      	movs	r2, #0
   2931e:	721a      	strb	r2, [r3, #8]
   29320:	2360      	movs	r3, #96	; 0x60
   29322:	18fb      	adds	r3, r7, r3
   29324:	2200      	movs	r2, #0
   29326:	725a      	strb	r2, [r3, #9]
   29328:	2360      	movs	r3, #96	; 0x60
   2932a:	18fb      	adds	r3, r7, r3
   2932c:	0019      	movs	r1, r3
   2932e:	2001      	movs	r0, #1
   29330:	4b7b      	ldr	r3, [pc, #492]	; (29520 <system_clock_init+0x270>)
   29332:	4798      	blx	r3
   29334:	2001      	movs	r0, #1
   29336:	4b7b      	ldr	r3, [pc, #492]	; (29524 <system_clock_init+0x274>)
   29338:	4798      	blx	r3
   2933a:	2354      	movs	r3, #84	; 0x54
   2933c:	18fb      	adds	r3, r7, r3
   2933e:	0018      	movs	r0, r3
   29340:	4b76      	ldr	r3, [pc, #472]	; (2951c <system_clock_init+0x26c>)
   29342:	4798      	blx	r3
   29344:	2354      	movs	r3, #84	; 0x54
   29346:	18fb      	adds	r3, r7, r3
   29348:	2203      	movs	r2, #3
   2934a:	701a      	strb	r2, [r3, #0]
   2934c:	2354      	movs	r3, #84	; 0x54
   2934e:	18fb      	adds	r3, r7, r3
   29350:	2201      	movs	r2, #1
   29352:	605a      	str	r2, [r3, #4]
   29354:	2354      	movs	r3, #84	; 0x54
   29356:	18fb      	adds	r3, r7, r3
   29358:	2201      	movs	r2, #1
   2935a:	721a      	strb	r2, [r3, #8]
   2935c:	2354      	movs	r3, #84	; 0x54
   2935e:	18fb      	adds	r3, r7, r3
   29360:	2200      	movs	r2, #0
   29362:	725a      	strb	r2, [r3, #9]
   29364:	2354      	movs	r3, #84	; 0x54
   29366:	18fb      	adds	r3, r7, r3
   29368:	0019      	movs	r1, r3
   2936a:	2002      	movs	r0, #2
   2936c:	4b6c      	ldr	r3, [pc, #432]	; (29520 <system_clock_init+0x270>)
   2936e:	4798      	blx	r3
   29370:	2002      	movs	r0, #2
   29372:	4b6c      	ldr	r3, [pc, #432]	; (29524 <system_clock_init+0x274>)
   29374:	4798      	blx	r3
   29376:	233c      	movs	r3, #60	; 0x3c
   29378:	18fb      	adds	r3, r7, r3
   2937a:	0018      	movs	r0, r3
   2937c:	4b67      	ldr	r3, [pc, #412]	; (2951c <system_clock_init+0x26c>)
   2937e:	4798      	blx	r3
   29380:	233c      	movs	r3, #60	; 0x3c
   29382:	18fb      	adds	r3, r7, r3
   29384:	2203      	movs	r2, #3
   29386:	701a      	strb	r2, [r3, #0]
   29388:	233c      	movs	r3, #60	; 0x3c
   2938a:	18fb      	adds	r3, r7, r3
   2938c:	2220      	movs	r2, #32
   2938e:	605a      	str	r2, [r3, #4]
   29390:	233c      	movs	r3, #60	; 0x3c
   29392:	18fb      	adds	r3, r7, r3
   29394:	2200      	movs	r2, #0
   29396:	721a      	strb	r2, [r3, #8]
   29398:	233c      	movs	r3, #60	; 0x3c
   2939a:	18fb      	adds	r3, r7, r3
   2939c:	2200      	movs	r2, #0
   2939e:	725a      	strb	r2, [r3, #9]
   293a0:	233c      	movs	r3, #60	; 0x3c
   293a2:	18fb      	adds	r3, r7, r3
   293a4:	0019      	movs	r1, r3
   293a6:	2004      	movs	r0, #4
   293a8:	4b5d      	ldr	r3, [pc, #372]	; (29520 <system_clock_init+0x270>)
   293aa:	4798      	blx	r3
   293ac:	2004      	movs	r0, #4
   293ae:	4b5d      	ldr	r3, [pc, #372]	; (29524 <system_clock_init+0x274>)
   293b0:	4798      	blx	r3
   293b2:	2330      	movs	r3, #48	; 0x30
   293b4:	18fb      	adds	r3, r7, r3
   293b6:	0018      	movs	r0, r3
   293b8:	4b58      	ldr	r3, [pc, #352]	; (2951c <system_clock_init+0x26c>)
   293ba:	4798      	blx	r3
   293bc:	2330      	movs	r3, #48	; 0x30
   293be:	18fb      	adds	r3, r7, r3
   293c0:	2206      	movs	r2, #6
   293c2:	701a      	strb	r2, [r3, #0]
   293c4:	2330      	movs	r3, #48	; 0x30
   293c6:	18fb      	adds	r3, r7, r3
   293c8:	2201      	movs	r2, #1
   293ca:	605a      	str	r2, [r3, #4]
   293cc:	2330      	movs	r3, #48	; 0x30
   293ce:	18fb      	adds	r3, r7, r3
   293d0:	2200      	movs	r2, #0
   293d2:	721a      	strb	r2, [r3, #8]
   293d4:	2330      	movs	r3, #48	; 0x30
   293d6:	18fb      	adds	r3, r7, r3
   293d8:	2200      	movs	r2, #0
   293da:	725a      	strb	r2, [r3, #9]
   293dc:	2330      	movs	r3, #48	; 0x30
   293de:	18fb      	adds	r3, r7, r3
   293e0:	0019      	movs	r1, r3
   293e2:	2005      	movs	r0, #5
   293e4:	4b4e      	ldr	r3, [pc, #312]	; (29520 <system_clock_init+0x270>)
   293e6:	4798      	blx	r3
   293e8:	2005      	movs	r0, #5
   293ea:	4b4e      	ldr	r3, [pc, #312]	; (29524 <system_clock_init+0x274>)
   293ec:	4798      	blx	r3
#  endif

#  if CONF_CLOCK_DPLL_ENABLE == true
	/* Enable DPLL internal lock timer and reference clock */
	struct system_gclk_chan_config dpll_gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&dpll_gclk_chan_conf);
   293ee:	2390      	movs	r3, #144	; 0x90
   293f0:	18fb      	adds	r3, r7, r3
   293f2:	0018      	movs	r0, r3
   293f4:	4b4c      	ldr	r3, [pc, #304]	; (29528 <system_clock_init+0x278>)
   293f6:	4798      	blx	r3
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL32K, &dpll_gclk_chan_conf);
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL32K);
	}

	if (CONF_CLOCK_DPLL_REFERENCE_CLOCK == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_GCLK) {
		dpll_gclk_chan_conf.source_generator = CONF_CLOCK_DPLL_REFERENCE_GCLK_GENERATOR;
   293f8:	2390      	movs	r3, #144	; 0x90
   293fa:	18fb      	adds	r3, r7, r3
   293fc:	2201      	movs	r2, #1
   293fe:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL, &dpll_gclk_chan_conf);
   29400:	2390      	movs	r3, #144	; 0x90
   29402:	18fb      	adds	r3, r7, r3
   29404:	0019      	movs	r1, r3
   29406:	2001      	movs	r0, #1
   29408:	4b48      	ldr	r3, [pc, #288]	; (2952c <system_clock_init+0x27c>)
   2940a:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL);
   2940c:	2001      	movs	r0, #1
   2940e:	4b48      	ldr	r3, [pc, #288]	; (29530 <system_clock_init+0x280>)
   29410:	4798      	blx	r3
	else {
		Assert(false);
	}

	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);
   29412:	2378      	movs	r3, #120	; 0x78
   29414:	18fb      	adds	r3, r7, r3
   29416:	0018      	movs	r0, r3
   29418:	4b46      	ldr	r3, [pc, #280]	; (29534 <system_clock_init+0x284>)
   2941a:	4798      	blx	r3

	dpll_config.on_demand        = false;
   2941c:	2378      	movs	r3, #120	; 0x78
   2941e:	18fb      	adds	r3, r7, r3
   29420:	2200      	movs	r2, #0
   29422:	701a      	strb	r2, [r3, #0]
	dpll_config.run_in_standby   = CONF_CLOCK_DPLL_RUN_IN_STANDBY;
   29424:	2378      	movs	r3, #120	; 0x78
   29426:	18fb      	adds	r3, r7, r3
   29428:	2200      	movs	r2, #0
   2942a:	705a      	strb	r2, [r3, #1]
	dpll_config.lock_bypass      = CONF_CLOCK_DPLL_LOCK_BYPASS;
   2942c:	2378      	movs	r3, #120	; 0x78
   2942e:	18fb      	adds	r3, r7, r3
   29430:	2200      	movs	r2, #0
   29432:	709a      	strb	r2, [r3, #2]
	dpll_config.wake_up_fast     = CONF_CLOCK_DPLL_WAKE_UP_FAST;
   29434:	2378      	movs	r3, #120	; 0x78
   29436:	18fb      	adds	r3, r7, r3
   29438:	2200      	movs	r2, #0
   2943a:	70da      	strb	r2, [r3, #3]
	dpll_config.low_power_enable = CONF_CLOCK_DPLL_LOW_POWER_ENABLE;
   2943c:	2378      	movs	r3, #120	; 0x78
   2943e:	18fb      	adds	r3, r7, r3
   29440:	2200      	movs	r2, #0
   29442:	711a      	strb	r2, [r3, #4]

	dpll_config.filter           = CONF_CLOCK_DPLL_FILTER;
   29444:	2378      	movs	r3, #120	; 0x78
   29446:	18fb      	adds	r3, r7, r3
   29448:	2200      	movs	r2, #0
   2944a:	749a      	strb	r2, [r3, #18]
	dpll_config.lock_time        = CONF_CLOCK_DPLL_LOCK_TIME;
   2944c:	2378      	movs	r3, #120	; 0x78
   2944e:	18fb      	adds	r3, r7, r3
   29450:	2200      	movs	r2, #0
   29452:	74da      	strb	r2, [r3, #19]

	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
   29454:	2378      	movs	r3, #120	; 0x78
   29456:	18fb      	adds	r3, r7, r3
   29458:	2202      	movs	r2, #2
   2945a:	751a      	strb	r2, [r3, #20]
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
   2945c:	2378      	movs	r3, #120	; 0x78
   2945e:	18fb      	adds	r3, r7, r3
   29460:	4a35      	ldr	r2, [pc, #212]	; (29538 <system_clock_init+0x288>)
   29462:	60da      	str	r2, [r3, #12]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
   29464:	2378      	movs	r3, #120	; 0x78
   29466:	18fb      	adds	r3, r7, r3
   29468:	2201      	movs	r2, #1
   2946a:	821a      	strh	r2, [r3, #16]
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;
   2946c:	2378      	movs	r3, #120	; 0x78
   2946e:	18fb      	adds	r3, r7, r3
   29470:	4a32      	ldr	r2, [pc, #200]	; (2953c <system_clock_init+0x28c>)
   29472:	609a      	str	r2, [r3, #8]

	system_clock_source_dpll_set_config(&dpll_config);
   29474:	2378      	movs	r3, #120	; 0x78
   29476:	18fb      	adds	r3, r7, r3
   29478:	0018      	movs	r0, r3
   2947a:	4b31      	ldr	r3, [pc, #196]	; (29540 <system_clock_init+0x290>)
   2947c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
   2947e:	2008      	movs	r0, #8
   29480:	4b24      	ldr	r3, [pc, #144]	; (29514 <system_clock_init+0x264>)
   29482:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
   29484:	46c0      	nop			; (mov r8, r8)
   29486:	2008      	movs	r0, #8
   29488:	4b2e      	ldr	r3, [pc, #184]	; (29544 <system_clock_init+0x294>)
   2948a:	4798      	blx	r3
   2948c:	0003      	movs	r3, r0
   2948e:	001a      	movs	r2, r3
   29490:	2301      	movs	r3, #1
   29492:	4053      	eors	r3, r2
   29494:	b2db      	uxtb	r3, r3
   29496:	2b00      	cmp	r3, #0
   29498:	d1f5      	bne.n	29486 <system_clock_init+0x1d6>
	if (CONF_CLOCK_DPLL_ON_DEMAND) {
		SYSCTRL->DPLLCTRLA.bit.ONDEMAND = 1;
   2949a:	4919      	ldr	r1, [pc, #100]	; (29500 <system_clock_init+0x250>)
   2949c:	2244      	movs	r2, #68	; 0x44
   2949e:	5c8b      	ldrb	r3, [r1, r2]
   294a0:	2080      	movs	r0, #128	; 0x80
   294a2:	4240      	negs	r0, r0
   294a4:	4303      	orrs	r3, r0
   294a6:	548b      	strb	r3, [r1, r2]

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
   294a8:	2000      	movs	r0, #0
   294aa:	4b27      	ldr	r3, [pc, #156]	; (29548 <system_clock_init+0x298>)
   294ac:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
   294ae:	2100      	movs	r1, #0
   294b0:	2000      	movs	r0, #0
   294b2:	4b26      	ldr	r3, [pc, #152]	; (2954c <system_clock_init+0x29c>)
   294b4:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
   294b6:	2100      	movs	r1, #0
   294b8:	2001      	movs	r0, #1
   294ba:	4b24      	ldr	r3, [pc, #144]	; (2954c <system_clock_init+0x29c>)
   294bc:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
   294be:	2100      	movs	r1, #0
   294c0:	2002      	movs	r0, #2
   294c2:	4b22      	ldr	r3, [pc, #136]	; (2954c <system_clock_init+0x29c>)
   294c4:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   294c6:	003b      	movs	r3, r7
   294c8:	0018      	movs	r0, r3
   294ca:	4b14      	ldr	r3, [pc, #80]	; (2951c <system_clock_init+0x26c>)
   294cc:	4798      	blx	r3
   294ce:	003b      	movs	r3, r7
   294d0:	2208      	movs	r2, #8
   294d2:	701a      	strb	r2, [r3, #0]
   294d4:	003b      	movs	r3, r7
   294d6:	2201      	movs	r2, #1
   294d8:	605a      	str	r2, [r3, #4]
   294da:	003b      	movs	r3, r7
   294dc:	2200      	movs	r2, #0
   294de:	721a      	strb	r2, [r3, #8]
   294e0:	003b      	movs	r3, r7
   294e2:	2201      	movs	r2, #1
   294e4:	725a      	strb	r2, [r3, #9]
   294e6:	003b      	movs	r3, r7
   294e8:	0019      	movs	r1, r3
   294ea:	2000      	movs	r0, #0
   294ec:	4b0c      	ldr	r3, [pc, #48]	; (29520 <system_clock_init+0x270>)
   294ee:	4798      	blx	r3
   294f0:	2000      	movs	r0, #0
   294f2:	4b0c      	ldr	r3, [pc, #48]	; (29524 <system_clock_init+0x274>)
   294f4:	4798      	blx	r3
#endif
}
   294f6:	46c0      	nop			; (mov r8, r8)
   294f8:	46bd      	mov	sp, r7
   294fa:	b026      	add	sp, #152	; 0x98
   294fc:	bd80      	pop	{r7, pc}
   294fe:	46c0      	nop			; (mov r8, r8)
   29500:	40000800 	.word	0x40000800
   29504:	00028e71 	.word	0x00028e71
   29508:	00029279 	.word	0x00029279
   2950c:	00028d81 	.word	0x00028d81
   29510:	00028fc5 	.word	0x00028fc5
   29514:	00029149 	.word	0x00029149
   29518:	000295f5 	.word	0x000295f5
   2951c:	00028d3d 	.word	0x00028d3d
   29520:	00029625 	.word	0x00029625
   29524:	00029749 	.word	0x00029749
   29528:	00028d6b 	.word	0x00028d6b
   2952c:	0002987d 	.word	0x0002987d
   29530:	000298c1 	.word	0x000298c1
   29534:	00028e19 	.word	0x00028e19
   29538:	000f4240 	.word	0x000f4240
   2953c:	02dc6c00 	.word	0x02dc6c00
   29540:	0002903d 	.word	0x0002903d
   29544:	000291f5 	.word	0x000291f5
   29548:	00028da5 	.word	0x00028da5
   2954c:	00028dc5 	.word	0x00028dc5

00029550 <system_apb_clock_set_mask>:
{
   29550:	b580      	push	{r7, lr}
   29552:	b082      	sub	sp, #8
   29554:	af00      	add	r7, sp, #0
   29556:	0002      	movs	r2, r0
   29558:	6039      	str	r1, [r7, #0]
   2955a:	1dfb      	adds	r3, r7, #7
   2955c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2955e:	1dfb      	adds	r3, r7, #7
   29560:	781b      	ldrb	r3, [r3, #0]
   29562:	2b01      	cmp	r3, #1
   29564:	d00a      	beq.n	2957c <system_apb_clock_set_mask+0x2c>
   29566:	2b02      	cmp	r3, #2
   29568:	d00f      	beq.n	2958a <system_apb_clock_set_mask+0x3a>
   2956a:	2b00      	cmp	r3, #0
   2956c:	d114      	bne.n	29598 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2956e:	4b0e      	ldr	r3, [pc, #56]	; (295a8 <system_apb_clock_set_mask+0x58>)
   29570:	4a0d      	ldr	r2, [pc, #52]	; (295a8 <system_apb_clock_set_mask+0x58>)
   29572:	6991      	ldr	r1, [r2, #24]
   29574:	683a      	ldr	r2, [r7, #0]
   29576:	430a      	orrs	r2, r1
   29578:	619a      	str	r2, [r3, #24]
			break;
   2957a:	e00f      	b.n	2959c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   2957c:	4b0a      	ldr	r3, [pc, #40]	; (295a8 <system_apb_clock_set_mask+0x58>)
   2957e:	4a0a      	ldr	r2, [pc, #40]	; (295a8 <system_apb_clock_set_mask+0x58>)
   29580:	69d1      	ldr	r1, [r2, #28]
   29582:	683a      	ldr	r2, [r7, #0]
   29584:	430a      	orrs	r2, r1
   29586:	61da      	str	r2, [r3, #28]
			break;
   29588:	e008      	b.n	2959c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   2958a:	4b07      	ldr	r3, [pc, #28]	; (295a8 <system_apb_clock_set_mask+0x58>)
   2958c:	4a06      	ldr	r2, [pc, #24]	; (295a8 <system_apb_clock_set_mask+0x58>)
   2958e:	6a11      	ldr	r1, [r2, #32]
   29590:	683a      	ldr	r2, [r7, #0]
   29592:	430a      	orrs	r2, r1
   29594:	621a      	str	r2, [r3, #32]
			break;
   29596:	e001      	b.n	2959c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   29598:	2317      	movs	r3, #23
   2959a:	e000      	b.n	2959e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   2959c:	2300      	movs	r3, #0
}
   2959e:	0018      	movs	r0, r3
   295a0:	46bd      	mov	sp, r7
   295a2:	b002      	add	sp, #8
   295a4:	bd80      	pop	{r7, pc}
   295a6:	46c0      	nop			; (mov r8, r8)
   295a8:	40000400 	.word	0x40000400

000295ac <system_interrupt_enter_critical_section>:
{
   295ac:	b580      	push	{r7, lr}
   295ae:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   295b0:	4b02      	ldr	r3, [pc, #8]	; (295bc <system_interrupt_enter_critical_section+0x10>)
   295b2:	4798      	blx	r3
}
   295b4:	46c0      	nop			; (mov r8, r8)
   295b6:	46bd      	mov	sp, r7
   295b8:	bd80      	pop	{r7, pc}
   295ba:	46c0      	nop			; (mov r8, r8)
   295bc:	00025be9 	.word	0x00025be9

000295c0 <system_interrupt_leave_critical_section>:
{
   295c0:	b580      	push	{r7, lr}
   295c2:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   295c4:	4b02      	ldr	r3, [pc, #8]	; (295d0 <system_interrupt_leave_critical_section+0x10>)
   295c6:	4798      	blx	r3
}
   295c8:	46c0      	nop			; (mov r8, r8)
   295ca:	46bd      	mov	sp, r7
   295cc:	bd80      	pop	{r7, pc}
   295ce:	46c0      	nop			; (mov r8, r8)
   295d0:	00025c3d 	.word	0x00025c3d

000295d4 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
   295d4:	b580      	push	{r7, lr}
   295d6:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   295d8:	4b05      	ldr	r3, [pc, #20]	; (295f0 <system_gclk_is_syncing+0x1c>)
   295da:	785b      	ldrb	r3, [r3, #1]
   295dc:	b2db      	uxtb	r3, r3
   295de:	b25b      	sxtb	r3, r3
   295e0:	2b00      	cmp	r3, #0
   295e2:	da01      	bge.n	295e8 <system_gclk_is_syncing+0x14>
		return true;
   295e4:	2301      	movs	r3, #1
   295e6:	e000      	b.n	295ea <system_gclk_is_syncing+0x16>
	}

	return false;
   295e8:	2300      	movs	r3, #0
}
   295ea:	0018      	movs	r0, r3
   295ec:	46bd      	mov	sp, r7
   295ee:	bd80      	pop	{r7, pc}
   295f0:	40000c00 	.word	0x40000c00

000295f4 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
   295f4:	b580      	push	{r7, lr}
   295f6:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
   295f8:	2108      	movs	r1, #8
   295fa:	2000      	movs	r0, #0
   295fc:	4b07      	ldr	r3, [pc, #28]	; (2961c <system_gclk_init+0x28>)
   295fe:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
   29600:	4b07      	ldr	r3, [pc, #28]	; (29620 <system_gclk_init+0x2c>)
   29602:	2201      	movs	r2, #1
   29604:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
   29606:	46c0      	nop			; (mov r8, r8)
   29608:	4b05      	ldr	r3, [pc, #20]	; (29620 <system_gclk_init+0x2c>)
   2960a:	781b      	ldrb	r3, [r3, #0]
   2960c:	b2db      	uxtb	r3, r3
   2960e:	001a      	movs	r2, r3
   29610:	2301      	movs	r3, #1
   29612:	4013      	ands	r3, r2
   29614:	d1f8      	bne.n	29608 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
   29616:	46c0      	nop			; (mov r8, r8)
   29618:	46bd      	mov	sp, r7
   2961a:	bd80      	pop	{r7, pc}
   2961c:	00029551 	.word	0x00029551
   29620:	40000c00 	.word	0x40000c00

00029624 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   29624:	b580      	push	{r7, lr}
   29626:	b086      	sub	sp, #24
   29628:	af00      	add	r7, sp, #0
   2962a:	0002      	movs	r2, r0
   2962c:	6039      	str	r1, [r7, #0]
   2962e:	1dfb      	adds	r3, r7, #7
   29630:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
   29632:	1dfb      	adds	r3, r7, #7
   29634:	781b      	ldrb	r3, [r3, #0]
   29636:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
   29638:	1dfb      	adds	r3, r7, #7
   2963a:	781b      	ldrb	r3, [r3, #0]
   2963c:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
   2963e:	683b      	ldr	r3, [r7, #0]
   29640:	781b      	ldrb	r3, [r3, #0]
   29642:	021b      	lsls	r3, r3, #8
   29644:	001a      	movs	r2, r3
   29646:	697b      	ldr	r3, [r7, #20]
   29648:	4313      	orrs	r3, r2
   2964a:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   2964c:	683b      	ldr	r3, [r7, #0]
   2964e:	785b      	ldrb	r3, [r3, #1]
   29650:	2b00      	cmp	r3, #0
   29652:	d004      	beq.n	2965e <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   29654:	697b      	ldr	r3, [r7, #20]
   29656:	2280      	movs	r2, #128	; 0x80
   29658:	02d2      	lsls	r2, r2, #11
   2965a:	4313      	orrs	r3, r2
   2965c:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   2965e:	683b      	ldr	r3, [r7, #0]
   29660:	7a5b      	ldrb	r3, [r3, #9]
   29662:	2b00      	cmp	r3, #0
   29664:	d004      	beq.n	29670 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   29666:	697b      	ldr	r3, [r7, #20]
   29668:	2280      	movs	r2, #128	; 0x80
   2966a:	0312      	lsls	r2, r2, #12
   2966c:	4313      	orrs	r3, r2
   2966e:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   29670:	683b      	ldr	r3, [r7, #0]
   29672:	685b      	ldr	r3, [r3, #4]
   29674:	2b01      	cmp	r3, #1
   29676:	d92c      	bls.n	296d2 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   29678:	683b      	ldr	r3, [r7, #0]
   2967a:	685a      	ldr	r2, [r3, #4]
   2967c:	683b      	ldr	r3, [r7, #0]
   2967e:	685b      	ldr	r3, [r3, #4]
   29680:	3b01      	subs	r3, #1
   29682:	4013      	ands	r3, r2
   29684:	d11a      	bne.n	296bc <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
   29686:	2300      	movs	r3, #0
   29688:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   2968a:	2302      	movs	r3, #2
   2968c:	60bb      	str	r3, [r7, #8]
   2968e:	e005      	b.n	2969c <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
   29690:	68fb      	ldr	r3, [r7, #12]
   29692:	3301      	adds	r3, #1
   29694:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
   29696:	68bb      	ldr	r3, [r7, #8]
   29698:	005b      	lsls	r3, r3, #1
   2969a:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
   2969c:	683b      	ldr	r3, [r7, #0]
   2969e:	685a      	ldr	r2, [r3, #4]
   296a0:	68bb      	ldr	r3, [r7, #8]
   296a2:	429a      	cmp	r2, r3
   296a4:	d8f4      	bhi.n	29690 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
   296a6:	68fb      	ldr	r3, [r7, #12]
   296a8:	021b      	lsls	r3, r3, #8
   296aa:	693a      	ldr	r2, [r7, #16]
   296ac:	4313      	orrs	r3, r2
   296ae:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   296b0:	697b      	ldr	r3, [r7, #20]
   296b2:	2280      	movs	r2, #128	; 0x80
   296b4:	0352      	lsls	r2, r2, #13
   296b6:	4313      	orrs	r3, r2
   296b8:	617b      	str	r3, [r7, #20]
   296ba:	e00a      	b.n	296d2 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
   296bc:	683b      	ldr	r3, [r7, #0]
   296be:	685b      	ldr	r3, [r3, #4]
   296c0:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
   296c2:	693a      	ldr	r2, [r7, #16]
   296c4:	4313      	orrs	r3, r2
   296c6:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   296c8:	697b      	ldr	r3, [r7, #20]
   296ca:	2280      	movs	r2, #128	; 0x80
   296cc:	0292      	lsls	r2, r2, #10
   296ce:	4313      	orrs	r3, r2
   296d0:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   296d2:	683b      	ldr	r3, [r7, #0]
   296d4:	7a1b      	ldrb	r3, [r3, #8]
   296d6:	2b00      	cmp	r3, #0
   296d8:	d004      	beq.n	296e4 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   296da:	697b      	ldr	r3, [r7, #20]
   296dc:	2280      	movs	r2, #128	; 0x80
   296de:	0392      	lsls	r2, r2, #14
   296e0:	4313      	orrs	r3, r2
   296e2:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
   296e4:	46c0      	nop			; (mov r8, r8)
   296e6:	4b13      	ldr	r3, [pc, #76]	; (29734 <system_gclk_gen_set_config+0x110>)
   296e8:	4798      	blx	r3
   296ea:	1e03      	subs	r3, r0, #0
   296ec:	d1fb      	bne.n	296e6 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   296ee:	4b12      	ldr	r3, [pc, #72]	; (29738 <system_gclk_gen_set_config+0x114>)
   296f0:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   296f2:	4a12      	ldr	r2, [pc, #72]	; (2973c <system_gclk_gen_set_config+0x118>)
   296f4:	1dfb      	adds	r3, r7, #7
   296f6:	781b      	ldrb	r3, [r3, #0]
   296f8:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
   296fa:	46c0      	nop			; (mov r8, r8)
   296fc:	4b0d      	ldr	r3, [pc, #52]	; (29734 <system_gclk_gen_set_config+0x110>)
   296fe:	4798      	blx	r3
   29700:	1e03      	subs	r3, r0, #0
   29702:	d1fb      	bne.n	296fc <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
   29704:	4b0e      	ldr	r3, [pc, #56]	; (29740 <system_gclk_gen_set_config+0x11c>)
   29706:	693a      	ldr	r2, [r7, #16]
   29708:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
   2970a:	46c0      	nop			; (mov r8, r8)
   2970c:	4b09      	ldr	r3, [pc, #36]	; (29734 <system_gclk_gen_set_config+0x110>)
   2970e:	4798      	blx	r3
   29710:	1e03      	subs	r3, r0, #0
   29712:	d1fb      	bne.n	2970c <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
   29714:	4b0a      	ldr	r3, [pc, #40]	; (29740 <system_gclk_gen_set_config+0x11c>)
   29716:	4a0a      	ldr	r2, [pc, #40]	; (29740 <system_gclk_gen_set_config+0x11c>)
   29718:	6851      	ldr	r1, [r2, #4]
   2971a:	2280      	movs	r2, #128	; 0x80
   2971c:	0252      	lsls	r2, r2, #9
   2971e:	4011      	ands	r1, r2
   29720:	697a      	ldr	r2, [r7, #20]
   29722:	430a      	orrs	r2, r1
   29724:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   29726:	4b07      	ldr	r3, [pc, #28]	; (29744 <system_gclk_gen_set_config+0x120>)
   29728:	4798      	blx	r3
}
   2972a:	46c0      	nop			; (mov r8, r8)
   2972c:	46bd      	mov	sp, r7
   2972e:	b006      	add	sp, #24
   29730:	bd80      	pop	{r7, pc}
   29732:	46c0      	nop			; (mov r8, r8)
   29734:	000295d5 	.word	0x000295d5
   29738:	000295ad 	.word	0x000295ad
   2973c:	40000c08 	.word	0x40000c08
   29740:	40000c00 	.word	0x40000c00
   29744:	000295c1 	.word	0x000295c1

00029748 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   29748:	b580      	push	{r7, lr}
   2974a:	b082      	sub	sp, #8
   2974c:	af00      	add	r7, sp, #0
   2974e:	0002      	movs	r2, r0
   29750:	1dfb      	adds	r3, r7, #7
   29752:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   29754:	46c0      	nop			; (mov r8, r8)
   29756:	4b0e      	ldr	r3, [pc, #56]	; (29790 <system_gclk_gen_enable+0x48>)
   29758:	4798      	blx	r3
   2975a:	1e03      	subs	r3, r0, #0
   2975c:	d1fb      	bne.n	29756 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   2975e:	4b0d      	ldr	r3, [pc, #52]	; (29794 <system_gclk_gen_enable+0x4c>)
   29760:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   29762:	4a0d      	ldr	r2, [pc, #52]	; (29798 <system_gclk_gen_enable+0x50>)
   29764:	1dfb      	adds	r3, r7, #7
   29766:	781b      	ldrb	r3, [r3, #0]
   29768:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   2976a:	46c0      	nop			; (mov r8, r8)
   2976c:	4b08      	ldr	r3, [pc, #32]	; (29790 <system_gclk_gen_enable+0x48>)
   2976e:	4798      	blx	r3
   29770:	1e03      	subs	r3, r0, #0
   29772:	d1fb      	bne.n	2976c <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
   29774:	4b09      	ldr	r3, [pc, #36]	; (2979c <system_gclk_gen_enable+0x54>)
   29776:	4a09      	ldr	r2, [pc, #36]	; (2979c <system_gclk_gen_enable+0x54>)
   29778:	6852      	ldr	r2, [r2, #4]
   2977a:	2180      	movs	r1, #128	; 0x80
   2977c:	0249      	lsls	r1, r1, #9
   2977e:	430a      	orrs	r2, r1
   29780:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   29782:	4b07      	ldr	r3, [pc, #28]	; (297a0 <system_gclk_gen_enable+0x58>)
   29784:	4798      	blx	r3
}
   29786:	46c0      	nop			; (mov r8, r8)
   29788:	46bd      	mov	sp, r7
   2978a:	b002      	add	sp, #8
   2978c:	bd80      	pop	{r7, pc}
   2978e:	46c0      	nop			; (mov r8, r8)
   29790:	000295d5 	.word	0x000295d5
   29794:	000295ad 	.word	0x000295ad
   29798:	40000c04 	.word	0x40000c04
   2979c:	40000c00 	.word	0x40000c00
   297a0:	000295c1 	.word	0x000295c1

000297a4 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   297a4:	b580      	push	{r7, lr}
   297a6:	b086      	sub	sp, #24
   297a8:	af00      	add	r7, sp, #0
   297aa:	0002      	movs	r2, r0
   297ac:	1dfb      	adds	r3, r7, #7
   297ae:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   297b0:	46c0      	nop			; (mov r8, r8)
   297b2:	4b2a      	ldr	r3, [pc, #168]	; (2985c <system_gclk_gen_get_hz+0xb8>)
   297b4:	4798      	blx	r3
   297b6:	1e03      	subs	r3, r0, #0
   297b8:	d1fb      	bne.n	297b2 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   297ba:	4b29      	ldr	r3, [pc, #164]	; (29860 <system_gclk_gen_get_hz+0xbc>)
   297bc:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   297be:	4a29      	ldr	r2, [pc, #164]	; (29864 <system_gclk_gen_get_hz+0xc0>)
   297c0:	1dfb      	adds	r3, r7, #7
   297c2:	781b      	ldrb	r3, [r3, #0]
   297c4:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   297c6:	46c0      	nop			; (mov r8, r8)
   297c8:	4b24      	ldr	r3, [pc, #144]	; (2985c <system_gclk_gen_get_hz+0xb8>)
   297ca:	4798      	blx	r3
   297cc:	1e03      	subs	r3, r0, #0
   297ce:	d1fb      	bne.n	297c8 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   297d0:	4b25      	ldr	r3, [pc, #148]	; (29868 <system_gclk_gen_get_hz+0xc4>)
   297d2:	685b      	ldr	r3, [r3, #4]
   297d4:	04db      	lsls	r3, r3, #19
   297d6:	0edb      	lsrs	r3, r3, #27
   297d8:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
   297da:	0018      	movs	r0, r3
   297dc:	4b23      	ldr	r3, [pc, #140]	; (2986c <system_gclk_gen_get_hz+0xc8>)
   297de:	4798      	blx	r3
   297e0:	0003      	movs	r3, r0
   297e2:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   297e4:	4a1f      	ldr	r2, [pc, #124]	; (29864 <system_gclk_gen_get_hz+0xc0>)
   297e6:	1dfb      	adds	r3, r7, #7
   297e8:	781b      	ldrb	r3, [r3, #0]
   297ea:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   297ec:	4b1e      	ldr	r3, [pc, #120]	; (29868 <system_gclk_gen_get_hz+0xc4>)
   297ee:	685b      	ldr	r3, [r3, #4]
   297f0:	02db      	lsls	r3, r3, #11
   297f2:	0fdb      	lsrs	r3, r3, #31
   297f4:	b2da      	uxtb	r2, r3
   297f6:	2313      	movs	r3, #19
   297f8:	18fb      	adds	r3, r7, r3
   297fa:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   297fc:	4a1c      	ldr	r2, [pc, #112]	; (29870 <system_gclk_gen_get_hz+0xcc>)
   297fe:	1dfb      	adds	r3, r7, #7
   29800:	781b      	ldrb	r3, [r3, #0]
   29802:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   29804:	46c0      	nop			; (mov r8, r8)
   29806:	4b15      	ldr	r3, [pc, #84]	; (2985c <system_gclk_gen_get_hz+0xb8>)
   29808:	4798      	blx	r3
   2980a:	1e03      	subs	r3, r0, #0
   2980c:	d1fb      	bne.n	29806 <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
   2980e:	4b16      	ldr	r3, [pc, #88]	; (29868 <system_gclk_gen_get_hz+0xc4>)
   29810:	689b      	ldr	r3, [r3, #8]
   29812:	021b      	lsls	r3, r3, #8
   29814:	0c1b      	lsrs	r3, r3, #16
   29816:	b29b      	uxth	r3, r3
   29818:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
   2981a:	4b16      	ldr	r3, [pc, #88]	; (29874 <system_gclk_gen_get_hz+0xd0>)
   2981c:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   2981e:	2313      	movs	r3, #19
   29820:	18fb      	adds	r3, r7, r3
   29822:	781b      	ldrb	r3, [r3, #0]
   29824:	2b00      	cmp	r3, #0
   29826:	d109      	bne.n	2983c <system_gclk_gen_get_hz+0x98>
   29828:	68fb      	ldr	r3, [r7, #12]
   2982a:	2b01      	cmp	r3, #1
   2982c:	d906      	bls.n	2983c <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
   2982e:	4b12      	ldr	r3, [pc, #72]	; (29878 <system_gclk_gen_get_hz+0xd4>)
   29830:	68f9      	ldr	r1, [r7, #12]
   29832:	6978      	ldr	r0, [r7, #20]
   29834:	4798      	blx	r3
   29836:	0003      	movs	r3, r0
   29838:	617b      	str	r3, [r7, #20]
   2983a:	e00a      	b.n	29852 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
   2983c:	2313      	movs	r3, #19
   2983e:	18fb      	adds	r3, r7, r3
   29840:	781b      	ldrb	r3, [r3, #0]
   29842:	2b00      	cmp	r3, #0
   29844:	d005      	beq.n	29852 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
   29846:	68fb      	ldr	r3, [r7, #12]
   29848:	3301      	adds	r3, #1
   2984a:	697a      	ldr	r2, [r7, #20]
   2984c:	40da      	lsrs	r2, r3
   2984e:	0013      	movs	r3, r2
   29850:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
   29852:	697b      	ldr	r3, [r7, #20]
}
   29854:	0018      	movs	r0, r3
   29856:	46bd      	mov	sp, r7
   29858:	b006      	add	sp, #24
   2985a:	bd80      	pop	{r7, pc}
   2985c:	000295d5 	.word	0x000295d5
   29860:	000295ad 	.word	0x000295ad
   29864:	40000c04 	.word	0x40000c04
   29868:	40000c00 	.word	0x40000c00
   2986c:	00028f05 	.word	0x00028f05
   29870:	40000c08 	.word	0x40000c08
   29874:	000295c1 	.word	0x000295c1
   29878:	000323c9 	.word	0x000323c9

0002987c <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
   2987c:	b580      	push	{r7, lr}
   2987e:	b084      	sub	sp, #16
   29880:	af00      	add	r7, sp, #0
   29882:	0002      	movs	r2, r0
   29884:	6039      	str	r1, [r7, #0]
   29886:	1dfb      	adds	r3, r7, #7
   29888:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
   2988a:	1dfb      	adds	r3, r7, #7
   2988c:	781b      	ldrb	r3, [r3, #0]
   2988e:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   29890:	683b      	ldr	r3, [r7, #0]
   29892:	781b      	ldrb	r3, [r3, #0]
   29894:	021b      	lsls	r3, r3, #8
   29896:	001a      	movs	r2, r3
   29898:	68fb      	ldr	r3, [r7, #12]
   2989a:	4313      	orrs	r3, r2
   2989c:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
   2989e:	1dfb      	adds	r3, r7, #7
   298a0:	781b      	ldrb	r3, [r3, #0]
   298a2:	0018      	movs	r0, r3
   298a4:	4b04      	ldr	r3, [pc, #16]	; (298b8 <system_gclk_chan_set_config+0x3c>)
   298a6:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
   298a8:	4b04      	ldr	r3, [pc, #16]	; (298bc <system_gclk_chan_set_config+0x40>)
   298aa:	68fa      	ldr	r2, [r7, #12]
   298ac:	b292      	uxth	r2, r2
   298ae:	805a      	strh	r2, [r3, #2]
}
   298b0:	46c0      	nop			; (mov r8, r8)
   298b2:	46bd      	mov	sp, r7
   298b4:	b004      	add	sp, #16
   298b6:	bd80      	pop	{r7, pc}
   298b8:	00029909 	.word	0x00029909
   298bc:	40000c00 	.word	0x40000c00

000298c0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   298c0:	b580      	push	{r7, lr}
   298c2:	b082      	sub	sp, #8
   298c4:	af00      	add	r7, sp, #0
   298c6:	0002      	movs	r2, r0
   298c8:	1dfb      	adds	r3, r7, #7
   298ca:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   298cc:	4b0a      	ldr	r3, [pc, #40]	; (298f8 <system_gclk_chan_enable+0x38>)
   298ce:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   298d0:	4a0a      	ldr	r2, [pc, #40]	; (298fc <system_gclk_chan_enable+0x3c>)
   298d2:	1dfb      	adds	r3, r7, #7
   298d4:	781b      	ldrb	r3, [r3, #0]
   298d6:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   298d8:	4909      	ldr	r1, [pc, #36]	; (29900 <system_gclk_chan_enable+0x40>)
   298da:	4b09      	ldr	r3, [pc, #36]	; (29900 <system_gclk_chan_enable+0x40>)
   298dc:	885b      	ldrh	r3, [r3, #2]
   298de:	b29b      	uxth	r3, r3
   298e0:	2280      	movs	r2, #128	; 0x80
   298e2:	01d2      	lsls	r2, r2, #7
   298e4:	4313      	orrs	r3, r2
   298e6:	b29b      	uxth	r3, r3
   298e8:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
   298ea:	4b06      	ldr	r3, [pc, #24]	; (29904 <system_gclk_chan_enable+0x44>)
   298ec:	4798      	blx	r3
}
   298ee:	46c0      	nop			; (mov r8, r8)
   298f0:	46bd      	mov	sp, r7
   298f2:	b002      	add	sp, #8
   298f4:	bd80      	pop	{r7, pc}
   298f6:	46c0      	nop			; (mov r8, r8)
   298f8:	000295ad 	.word	0x000295ad
   298fc:	40000c02 	.word	0x40000c02
   29900:	40000c00 	.word	0x40000c00
   29904:	000295c1 	.word	0x000295c1

00029908 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   29908:	b580      	push	{r7, lr}
   2990a:	b084      	sub	sp, #16
   2990c:	af00      	add	r7, sp, #0
   2990e:	0002      	movs	r2, r0
   29910:	1dfb      	adds	r3, r7, #7
   29912:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   29914:	4b1c      	ldr	r3, [pc, #112]	; (29988 <system_gclk_chan_disable+0x80>)
   29916:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   29918:	4a1c      	ldr	r2, [pc, #112]	; (2998c <system_gclk_chan_disable+0x84>)
   2991a:	1dfb      	adds	r3, r7, #7
   2991c:	781b      	ldrb	r3, [r3, #0]
   2991e:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   29920:	4b1b      	ldr	r3, [pc, #108]	; (29990 <system_gclk_chan_disable+0x88>)
   29922:	885b      	ldrh	r3, [r3, #2]
   29924:	051b      	lsls	r3, r3, #20
   29926:	0f1b      	lsrs	r3, r3, #28
   29928:	b2db      	uxtb	r3, r3
   2992a:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
   2992c:	4a18      	ldr	r2, [pc, #96]	; (29990 <system_gclk_chan_disable+0x88>)
   2992e:	8853      	ldrh	r3, [r2, #2]
   29930:	4918      	ldr	r1, [pc, #96]	; (29994 <system_gclk_chan_disable+0x8c>)
   29932:	400b      	ands	r3, r1
   29934:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   29936:	4a16      	ldr	r2, [pc, #88]	; (29990 <system_gclk_chan_disable+0x88>)
   29938:	4b15      	ldr	r3, [pc, #84]	; (29990 <system_gclk_chan_disable+0x88>)
   2993a:	885b      	ldrh	r3, [r3, #2]
   2993c:	b29b      	uxth	r3, r3
   2993e:	4916      	ldr	r1, [pc, #88]	; (29998 <system_gclk_chan_disable+0x90>)
   29940:	400b      	ands	r3, r1
   29942:	b29b      	uxth	r3, r3
   29944:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   29946:	46c0      	nop			; (mov r8, r8)
   29948:	4b11      	ldr	r3, [pc, #68]	; (29990 <system_gclk_chan_disable+0x88>)
   2994a:	885b      	ldrh	r3, [r3, #2]
   2994c:	b29b      	uxth	r3, r3
   2994e:	001a      	movs	r2, r3
   29950:	2380      	movs	r3, #128	; 0x80
   29952:	01db      	lsls	r3, r3, #7
   29954:	4013      	ands	r3, r2
   29956:	d1f7      	bne.n	29948 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
   29958:	4a0d      	ldr	r2, [pc, #52]	; (29990 <system_gclk_chan_disable+0x88>)
   2995a:	68fb      	ldr	r3, [r7, #12]
   2995c:	b2db      	uxtb	r3, r3
   2995e:	1c19      	adds	r1, r3, #0
   29960:	230f      	movs	r3, #15
   29962:	400b      	ands	r3, r1
   29964:	b2d9      	uxtb	r1, r3
   29966:	8853      	ldrh	r3, [r2, #2]
   29968:	1c08      	adds	r0, r1, #0
   2996a:	210f      	movs	r1, #15
   2996c:	4001      	ands	r1, r0
   2996e:	0208      	lsls	r0, r1, #8
   29970:	4908      	ldr	r1, [pc, #32]	; (29994 <system_gclk_chan_disable+0x8c>)
   29972:	400b      	ands	r3, r1
   29974:	1c19      	adds	r1, r3, #0
   29976:	1c03      	adds	r3, r0, #0
   29978:	430b      	orrs	r3, r1
   2997a:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
   2997c:	4b07      	ldr	r3, [pc, #28]	; (2999c <system_gclk_chan_disable+0x94>)
   2997e:	4798      	blx	r3
}
   29980:	46c0      	nop			; (mov r8, r8)
   29982:	46bd      	mov	sp, r7
   29984:	b004      	add	sp, #16
   29986:	bd80      	pop	{r7, pc}
   29988:	000295ad 	.word	0x000295ad
   2998c:	40000c02 	.word	0x40000c02
   29990:	40000c00 	.word	0x40000c00
   29994:	fffff0ff 	.word	0xfffff0ff
   29998:	ffffbfff 	.word	0xffffbfff
   2999c:	000295c1 	.word	0x000295c1

000299a0 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   299a0:	b580      	push	{r7, lr}
   299a2:	b084      	sub	sp, #16
   299a4:	af00      	add	r7, sp, #0
   299a6:	0002      	movs	r2, r0
   299a8:	1dfb      	adds	r3, r7, #7
   299aa:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
   299ac:	4b0d      	ldr	r3, [pc, #52]	; (299e4 <system_gclk_chan_get_hz+0x44>)
   299ae:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   299b0:	4a0d      	ldr	r2, [pc, #52]	; (299e8 <system_gclk_chan_get_hz+0x48>)
   299b2:	1dfb      	adds	r3, r7, #7
   299b4:	781b      	ldrb	r3, [r3, #0]
   299b6:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
   299b8:	4b0c      	ldr	r3, [pc, #48]	; (299ec <system_gclk_chan_get_hz+0x4c>)
   299ba:	885b      	ldrh	r3, [r3, #2]
   299bc:	051b      	lsls	r3, r3, #20
   299be:	0f1b      	lsrs	r3, r3, #28
   299c0:	b2da      	uxtb	r2, r3
   299c2:	230f      	movs	r3, #15
   299c4:	18fb      	adds	r3, r7, r3
   299c6:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
   299c8:	4b09      	ldr	r3, [pc, #36]	; (299f0 <system_gclk_chan_get_hz+0x50>)
   299ca:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   299cc:	230f      	movs	r3, #15
   299ce:	18fb      	adds	r3, r7, r3
   299d0:	781b      	ldrb	r3, [r3, #0]
   299d2:	0018      	movs	r0, r3
   299d4:	4b07      	ldr	r3, [pc, #28]	; (299f4 <system_gclk_chan_get_hz+0x54>)
   299d6:	4798      	blx	r3
   299d8:	0003      	movs	r3, r0
}
   299da:	0018      	movs	r0, r3
   299dc:	46bd      	mov	sp, r7
   299de:	b004      	add	sp, #16
   299e0:	bd80      	pop	{r7, pc}
   299e2:	46c0      	nop			; (mov r8, r8)
   299e4:	000295ad 	.word	0x000295ad
   299e8:	40000c02 	.word	0x40000c02
   299ec:	40000c00 	.word	0x40000c00
   299f0:	000295c1 	.word	0x000295c1
   299f4:	000297a5 	.word	0x000297a5

000299f8 <system_interrupt_clear_pending>:
 * \retval STATUS_OK           If no error was detected
 * \retval STATUS_INVALID_ARG  If an unsupported interrupt vector number was given
 */
enum status_code system_interrupt_clear_pending(
		const enum system_interrupt_vector vector)
{
   299f8:	b580      	push	{r7, lr}
   299fa:	b084      	sub	sp, #16
   299fc:	af00      	add	r7, sp, #0
   299fe:	0002      	movs	r2, r0
   29a00:	1dfb      	adds	r3, r7, #7
   29a02:	701a      	strb	r2, [r3, #0]
	enum status_code status = STATUS_OK;
   29a04:	230f      	movs	r3, #15
   29a06:	18fb      	adds	r3, r7, r3
   29a08:	2200      	movs	r2, #0
   29a0a:	701a      	strb	r2, [r3, #0]

	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
   29a0c:	1dfb      	adds	r3, r7, #7
   29a0e:	781b      	ldrb	r3, [r3, #0]
   29a10:	2b7f      	cmp	r3, #127	; 0x7f
   29a12:	d80b      	bhi.n	29a2c <system_interrupt_clear_pending+0x34>
		NVIC->ICPR[0] = (1 << vector);
   29a14:	4a13      	ldr	r2, [pc, #76]	; (29a64 <system_interrupt_clear_pending+0x6c>)
   29a16:	1dfb      	adds	r3, r7, #7
   29a18:	781b      	ldrb	r3, [r3, #0]
   29a1a:	b25b      	sxtb	r3, r3
   29a1c:	2101      	movs	r1, #1
   29a1e:	4099      	lsls	r1, r3
   29a20:	000b      	movs	r3, r1
   29a22:	0019      	movs	r1, r3
   29a24:	23c0      	movs	r3, #192	; 0xc0
   29a26:	005b      	lsls	r3, r3, #1
   29a28:	50d1      	str	r1, [r2, r3]
   29a2a:	e014      	b.n	29a56 <system_interrupt_clear_pending+0x5e>
	} else if (vector == SYSTEM_INTERRUPT_NON_MASKABLE) {
   29a2c:	1dfb      	adds	r3, r7, #7
   29a2e:	781b      	ldrb	r3, [r3, #0]
   29a30:	b25b      	sxtb	r3, r3
   29a32:	330e      	adds	r3, #14
   29a34:	d101      	bne.n	29a3a <system_interrupt_clear_pending+0x42>
		/* Note: Clearing of NMI pending interrupts does not make sense and is
		 * not supported by the device, as it has the highest priority and will
		 * always be executed at the moment it is set */
		return STATUS_ERR_INVALID_ARG;
   29a36:	2317      	movs	r3, #23
   29a38:	e010      	b.n	29a5c <system_interrupt_clear_pending+0x64>
	} else if (vector == SYSTEM_INTERRUPT_SYSTICK) {
   29a3a:	1dfb      	adds	r3, r7, #7
   29a3c:	781b      	ldrb	r3, [r3, #0]
   29a3e:	b25b      	sxtb	r3, r3
   29a40:	3301      	adds	r3, #1
   29a42:	d104      	bne.n	29a4e <system_interrupt_clear_pending+0x56>
		SCB->ICSR = SCB_ICSR_PENDSTCLR_Msk;
   29a44:	4b08      	ldr	r3, [pc, #32]	; (29a68 <system_interrupt_clear_pending+0x70>)
   29a46:	2280      	movs	r2, #128	; 0x80
   29a48:	0492      	lsls	r2, r2, #18
   29a4a:	605a      	str	r2, [r3, #4]
   29a4c:	e003      	b.n	29a56 <system_interrupt_clear_pending+0x5e>
	} else {
		Assert(false);
		status = STATUS_ERR_INVALID_ARG;
   29a4e:	230f      	movs	r3, #15
   29a50:	18fb      	adds	r3, r7, r3
   29a52:	2217      	movs	r2, #23
   29a54:	701a      	strb	r2, [r3, #0]
	}

	return status;
   29a56:	230f      	movs	r3, #15
   29a58:	18fb      	adds	r3, r7, r3
   29a5a:	781b      	ldrb	r3, [r3, #0]
}
   29a5c:	0018      	movs	r0, r3
   29a5e:	46bd      	mov	sp, r7
   29a60:	b004      	add	sp, #16
   29a62:	bd80      	pop	{r7, pc}
   29a64:	e000e100 	.word	0xe000e100
   29a68:	e000ed00 	.word	0xe000ed00

00029a6c <system_pinmux_get_group_from_gpio_pin>:
{
   29a6c:	b580      	push	{r7, lr}
   29a6e:	b084      	sub	sp, #16
   29a70:	af00      	add	r7, sp, #0
   29a72:	0002      	movs	r2, r0
   29a74:	1dfb      	adds	r3, r7, #7
   29a76:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   29a78:	230f      	movs	r3, #15
   29a7a:	18fb      	adds	r3, r7, r3
   29a7c:	1dfa      	adds	r2, r7, #7
   29a7e:	7812      	ldrb	r2, [r2, #0]
   29a80:	09d2      	lsrs	r2, r2, #7
   29a82:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   29a84:	230e      	movs	r3, #14
   29a86:	18fb      	adds	r3, r7, r3
   29a88:	1dfa      	adds	r2, r7, #7
   29a8a:	7812      	ldrb	r2, [r2, #0]
   29a8c:	0952      	lsrs	r2, r2, #5
   29a8e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   29a90:	4b0d      	ldr	r3, [pc, #52]	; (29ac8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   29a92:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   29a94:	230f      	movs	r3, #15
   29a96:	18fb      	adds	r3, r7, r3
   29a98:	781b      	ldrb	r3, [r3, #0]
   29a9a:	2b00      	cmp	r3, #0
   29a9c:	d10f      	bne.n	29abe <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   29a9e:	230f      	movs	r3, #15
   29aa0:	18fb      	adds	r3, r7, r3
   29aa2:	781b      	ldrb	r3, [r3, #0]
   29aa4:	009b      	lsls	r3, r3, #2
   29aa6:	2210      	movs	r2, #16
   29aa8:	4694      	mov	ip, r2
   29aaa:	44bc      	add	ip, r7
   29aac:	4463      	add	r3, ip
   29aae:	3b08      	subs	r3, #8
   29ab0:	681a      	ldr	r2, [r3, #0]
   29ab2:	230e      	movs	r3, #14
   29ab4:	18fb      	adds	r3, r7, r3
   29ab6:	781b      	ldrb	r3, [r3, #0]
   29ab8:	01db      	lsls	r3, r3, #7
   29aba:	18d3      	adds	r3, r2, r3
   29abc:	e000      	b.n	29ac0 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   29abe:	2300      	movs	r3, #0
}
   29ac0:	0018      	movs	r0, r3
   29ac2:	46bd      	mov	sp, r7
   29ac4:	b004      	add	sp, #16
   29ac6:	bd80      	pop	{r7, pc}
   29ac8:	41004400 	.word	0x41004400

00029acc <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   29acc:	b580      	push	{r7, lr}
   29ace:	b088      	sub	sp, #32
   29ad0:	af00      	add	r7, sp, #0
   29ad2:	60f8      	str	r0, [r7, #12]
   29ad4:	60b9      	str	r1, [r7, #8]
   29ad6:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
   29ad8:	2300      	movs	r3, #0
   29ada:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   29adc:	687b      	ldr	r3, [r7, #4]
   29ade:	78db      	ldrb	r3, [r3, #3]
   29ae0:	2201      	movs	r2, #1
   29ae2:	4053      	eors	r3, r2
   29ae4:	b2db      	uxtb	r3, r3
   29ae6:	2b00      	cmp	r3, #0
   29ae8:	d035      	beq.n	29b56 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   29aea:	687b      	ldr	r3, [r7, #4]
   29aec:	781b      	ldrb	r3, [r3, #0]
   29aee:	2b80      	cmp	r3, #128	; 0x80
   29af0:	d00b      	beq.n	29b0a <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
   29af2:	69fb      	ldr	r3, [r7, #28]
   29af4:	2280      	movs	r2, #128	; 0x80
   29af6:	0252      	lsls	r2, r2, #9
   29af8:	4313      	orrs	r3, r2
   29afa:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   29afc:	687b      	ldr	r3, [r7, #4]
   29afe:	781b      	ldrb	r3, [r3, #0]
   29b00:	061b      	lsls	r3, r3, #24
   29b02:	001a      	movs	r2, r3
   29b04:	69fb      	ldr	r3, [r7, #28]
   29b06:	4313      	orrs	r3, r2
   29b08:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   29b0a:	687b      	ldr	r3, [r7, #4]
   29b0c:	785b      	ldrb	r3, [r3, #1]
   29b0e:	2b00      	cmp	r3, #0
   29b10:	d003      	beq.n	29b1a <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   29b12:	687b      	ldr	r3, [r7, #4]
   29b14:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   29b16:	2b02      	cmp	r3, #2
   29b18:	d110      	bne.n	29b3c <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
   29b1a:	69fb      	ldr	r3, [r7, #28]
   29b1c:	2280      	movs	r2, #128	; 0x80
   29b1e:	0292      	lsls	r2, r2, #10
   29b20:	4313      	orrs	r3, r2
   29b22:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   29b24:	687b      	ldr	r3, [r7, #4]
   29b26:	789b      	ldrb	r3, [r3, #2]
   29b28:	2b00      	cmp	r3, #0
   29b2a:	d004      	beq.n	29b36 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   29b2c:	69fb      	ldr	r3, [r7, #28]
   29b2e:	2280      	movs	r2, #128	; 0x80
   29b30:	02d2      	lsls	r2, r2, #11
   29b32:	4313      	orrs	r3, r2
   29b34:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   29b36:	68fb      	ldr	r3, [r7, #12]
   29b38:	68ba      	ldr	r2, [r7, #8]
   29b3a:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   29b3c:	687b      	ldr	r3, [r7, #4]
   29b3e:	785b      	ldrb	r3, [r3, #1]
   29b40:	2b01      	cmp	r3, #1
   29b42:	d003      	beq.n	29b4c <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   29b44:	687b      	ldr	r3, [r7, #4]
   29b46:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   29b48:	2b02      	cmp	r3, #2
   29b4a:	d107      	bne.n	29b5c <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   29b4c:	69fb      	ldr	r3, [r7, #28]
   29b4e:	4a22      	ldr	r2, [pc, #136]	; (29bd8 <_system_pinmux_config+0x10c>)
   29b50:	4013      	ands	r3, r2
   29b52:	61fb      	str	r3, [r7, #28]
   29b54:	e002      	b.n	29b5c <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
   29b56:	68fb      	ldr	r3, [r7, #12]
   29b58:	68ba      	ldr	r2, [r7, #8]
   29b5a:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   29b5c:	68bb      	ldr	r3, [r7, #8]
   29b5e:	041b      	lsls	r3, r3, #16
   29b60:	0c1b      	lsrs	r3, r3, #16
   29b62:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
   29b64:	68bb      	ldr	r3, [r7, #8]
   29b66:	0c1b      	lsrs	r3, r3, #16
   29b68:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   29b6a:	69ba      	ldr	r2, [r7, #24]
   29b6c:	69fb      	ldr	r3, [r7, #28]
   29b6e:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   29b70:	22a0      	movs	r2, #160	; 0xa0
   29b72:	05d2      	lsls	r2, r2, #23
   29b74:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   29b76:	68fb      	ldr	r3, [r7, #12]
   29b78:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   29b7a:	697a      	ldr	r2, [r7, #20]
   29b7c:	69fb      	ldr	r3, [r7, #28]
   29b7e:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   29b80:	22d0      	movs	r2, #208	; 0xd0
   29b82:	0612      	lsls	r2, r2, #24
   29b84:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   29b86:	68fb      	ldr	r3, [r7, #12]
   29b88:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   29b8a:	687b      	ldr	r3, [r7, #4]
   29b8c:	78db      	ldrb	r3, [r3, #3]
   29b8e:	2201      	movs	r2, #1
   29b90:	4053      	eors	r3, r2
   29b92:	b2db      	uxtb	r3, r3
   29b94:	2b00      	cmp	r3, #0
   29b96:	d01a      	beq.n	29bce <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   29b98:	69fa      	ldr	r2, [r7, #28]
   29b9a:	2380      	movs	r3, #128	; 0x80
   29b9c:	02db      	lsls	r3, r3, #11
   29b9e:	4013      	ands	r3, r2
   29ba0:	d00a      	beq.n	29bb8 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   29ba2:	687b      	ldr	r3, [r7, #4]
   29ba4:	789b      	ldrb	r3, [r3, #2]
   29ba6:	2b01      	cmp	r3, #1
   29ba8:	d103      	bne.n	29bb2 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
   29baa:	68fb      	ldr	r3, [r7, #12]
   29bac:	68ba      	ldr	r2, [r7, #8]
   29bae:	619a      	str	r2, [r3, #24]
   29bb0:	e002      	b.n	29bb8 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
   29bb2:	68fb      	ldr	r3, [r7, #12]
   29bb4:	68ba      	ldr	r2, [r7, #8]
   29bb6:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   29bb8:	687b      	ldr	r3, [r7, #4]
   29bba:	785b      	ldrb	r3, [r3, #1]
   29bbc:	2b01      	cmp	r3, #1
   29bbe:	d003      	beq.n	29bc8 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   29bc0:	687b      	ldr	r3, [r7, #4]
   29bc2:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   29bc4:	2b02      	cmp	r3, #2
   29bc6:	d102      	bne.n	29bce <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
   29bc8:	68fb      	ldr	r3, [r7, #12]
   29bca:	68ba      	ldr	r2, [r7, #8]
   29bcc:	609a      	str	r2, [r3, #8]
		}
	}
}
   29bce:	46c0      	nop			; (mov r8, r8)
   29bd0:	46bd      	mov	sp, r7
   29bd2:	b008      	add	sp, #32
   29bd4:	bd80      	pop	{r7, pc}
   29bd6:	46c0      	nop			; (mov r8, r8)
   29bd8:	fffbffff 	.word	0xfffbffff

00029bdc <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   29bdc:	b580      	push	{r7, lr}
   29bde:	b084      	sub	sp, #16
   29be0:	af00      	add	r7, sp, #0
   29be2:	0002      	movs	r2, r0
   29be4:	6039      	str	r1, [r7, #0]
   29be6:	1dfb      	adds	r3, r7, #7
   29be8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
   29bea:	1dfb      	adds	r3, r7, #7
   29bec:	781b      	ldrb	r3, [r3, #0]
   29bee:	0018      	movs	r0, r3
   29bf0:	4b0a      	ldr	r3, [pc, #40]	; (29c1c <system_pinmux_pin_set_config+0x40>)
   29bf2:	4798      	blx	r3
   29bf4:	0003      	movs	r3, r0
   29bf6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   29bf8:	1dfb      	adds	r3, r7, #7
   29bfa:	781b      	ldrb	r3, [r3, #0]
   29bfc:	221f      	movs	r2, #31
   29bfe:	4013      	ands	r3, r2
   29c00:	2201      	movs	r2, #1
   29c02:	409a      	lsls	r2, r3
   29c04:	0013      	movs	r3, r2
   29c06:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
   29c08:	683a      	ldr	r2, [r7, #0]
   29c0a:	68b9      	ldr	r1, [r7, #8]
   29c0c:	68fb      	ldr	r3, [r7, #12]
   29c0e:	0018      	movs	r0, r3
   29c10:	4b03      	ldr	r3, [pc, #12]	; (29c20 <system_pinmux_pin_set_config+0x44>)
   29c12:	4798      	blx	r3
}
   29c14:	46c0      	nop			; (mov r8, r8)
   29c16:	46bd      	mov	sp, r7
   29c18:	b004      	add	sp, #16
   29c1a:	bd80      	pop	{r7, pc}
   29c1c:	00029a6d 	.word	0x00029a6d
   29c20:	00029acd 	.word	0x00029acd

00029c24 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
   29c24:	b580      	push	{r7, lr}
   29c26:	af00      	add	r7, sp, #0
	return;
   29c28:	46c0      	nop			; (mov r8, r8)
}
   29c2a:	46bd      	mov	sp, r7
   29c2c:	bd80      	pop	{r7, pc}
	...

00029c30 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   29c30:	b580      	push	{r7, lr}
   29c32:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   29c34:	4b06      	ldr	r3, [pc, #24]	; (29c50 <system_init+0x20>)
   29c36:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   29c38:	4b06      	ldr	r3, [pc, #24]	; (29c54 <system_init+0x24>)
   29c3a:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   29c3c:	4b06      	ldr	r3, [pc, #24]	; (29c58 <system_init+0x28>)
   29c3e:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   29c40:	4b06      	ldr	r3, [pc, #24]	; (29c5c <system_init+0x2c>)
   29c42:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   29c44:	4b06      	ldr	r3, [pc, #24]	; (29c60 <system_init+0x30>)
   29c46:	4798      	blx	r3
}
   29c48:	46c0      	nop			; (mov r8, r8)
   29c4a:	46bd      	mov	sp, r7
   29c4c:	bd80      	pop	{r7, pc}
   29c4e:	46c0      	nop			; (mov r8, r8)
   29c50:	000292b1 	.word	0x000292b1
   29c54:	00025d79 	.word	0x00025d79
   29c58:	000132cd 	.word	0x000132cd
   29c5c:	00026151 	.word	0x00026151
   29c60:	00029c25 	.word	0x00029c25

00029c64 <system_gclk_chan_get_config_defaults>:
{
   29c64:	b580      	push	{r7, lr}
   29c66:	b082      	sub	sp, #8
   29c68:	af00      	add	r7, sp, #0
   29c6a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   29c6c:	687b      	ldr	r3, [r7, #4]
   29c6e:	2200      	movs	r2, #0
   29c70:	701a      	strb	r2, [r3, #0]
}
   29c72:	46c0      	nop			; (mov r8, r8)
   29c74:	46bd      	mov	sp, r7
   29c76:	b002      	add	sp, #8
   29c78:	bd80      	pop	{r7, pc}
	...

00029c7c <system_apb_clock_set_mask>:
{
   29c7c:	b580      	push	{r7, lr}
   29c7e:	b082      	sub	sp, #8
   29c80:	af00      	add	r7, sp, #0
   29c82:	0002      	movs	r2, r0
   29c84:	6039      	str	r1, [r7, #0]
   29c86:	1dfb      	adds	r3, r7, #7
   29c88:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   29c8a:	1dfb      	adds	r3, r7, #7
   29c8c:	781b      	ldrb	r3, [r3, #0]
   29c8e:	2b01      	cmp	r3, #1
   29c90:	d00a      	beq.n	29ca8 <system_apb_clock_set_mask+0x2c>
   29c92:	2b02      	cmp	r3, #2
   29c94:	d00f      	beq.n	29cb6 <system_apb_clock_set_mask+0x3a>
   29c96:	2b00      	cmp	r3, #0
   29c98:	d114      	bne.n	29cc4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   29c9a:	4b0e      	ldr	r3, [pc, #56]	; (29cd4 <system_apb_clock_set_mask+0x58>)
   29c9c:	4a0d      	ldr	r2, [pc, #52]	; (29cd4 <system_apb_clock_set_mask+0x58>)
   29c9e:	6991      	ldr	r1, [r2, #24]
   29ca0:	683a      	ldr	r2, [r7, #0]
   29ca2:	430a      	orrs	r2, r1
   29ca4:	619a      	str	r2, [r3, #24]
			break;
   29ca6:	e00f      	b.n	29cc8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   29ca8:	4b0a      	ldr	r3, [pc, #40]	; (29cd4 <system_apb_clock_set_mask+0x58>)
   29caa:	4a0a      	ldr	r2, [pc, #40]	; (29cd4 <system_apb_clock_set_mask+0x58>)
   29cac:	69d1      	ldr	r1, [r2, #28]
   29cae:	683a      	ldr	r2, [r7, #0]
   29cb0:	430a      	orrs	r2, r1
   29cb2:	61da      	str	r2, [r3, #28]
			break;
   29cb4:	e008      	b.n	29cc8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   29cb6:	4b07      	ldr	r3, [pc, #28]	; (29cd4 <system_apb_clock_set_mask+0x58>)
   29cb8:	4a06      	ldr	r2, [pc, #24]	; (29cd4 <system_apb_clock_set_mask+0x58>)
   29cba:	6a11      	ldr	r1, [r2, #32]
   29cbc:	683a      	ldr	r2, [r7, #0]
   29cbe:	430a      	orrs	r2, r1
   29cc0:	621a      	str	r2, [r3, #32]
			break;
   29cc2:	e001      	b.n	29cc8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   29cc4:	2317      	movs	r3, #23
   29cc6:	e000      	b.n	29cca <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   29cc8:	2300      	movs	r3, #0
}
   29cca:	0018      	movs	r0, r3
   29ccc:	46bd      	mov	sp, r7
   29cce:	b002      	add	sp, #8
   29cd0:	bd80      	pop	{r7, pc}
   29cd2:	46c0      	nop			; (mov r8, r8)
   29cd4:	40000400 	.word	0x40000400

00029cd8 <system_pinmux_get_config_defaults>:
{
   29cd8:	b580      	push	{r7, lr}
   29cda:	b082      	sub	sp, #8
   29cdc:	af00      	add	r7, sp, #0
   29cde:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   29ce0:	687b      	ldr	r3, [r7, #4]
   29ce2:	2280      	movs	r2, #128	; 0x80
   29ce4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   29ce6:	687b      	ldr	r3, [r7, #4]
   29ce8:	2200      	movs	r2, #0
   29cea:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   29cec:	687b      	ldr	r3, [r7, #4]
   29cee:	2201      	movs	r2, #1
   29cf0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   29cf2:	687b      	ldr	r3, [r7, #4]
   29cf4:	2200      	movs	r2, #0
   29cf6:	70da      	strb	r2, [r3, #3]
}
   29cf8:	46c0      	nop			; (mov r8, r8)
   29cfa:	46bd      	mov	sp, r7
   29cfc:	b002      	add	sp, #8
   29cfe:	bd80      	pop	{r7, pc}

00029d00 <_tcc_get_inst_index>:
 *
 * \return Index of the given TCC module instance.
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
   29d00:	b580      	push	{r7, lr}
   29d02:	b084      	sub	sp, #16
   29d04:	af00      	add	r7, sp, #0
   29d06:	6078      	str	r0, [r7, #4]
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   29d08:	2300      	movs	r3, #0
   29d0a:	60fb      	str	r3, [r7, #12]
   29d0c:	e00c      	b.n	29d28 <_tcc_get_inst_index+0x28>
		if (hw == tcc_modules[i]) {
   29d0e:	4b0a      	ldr	r3, [pc, #40]	; (29d38 <_tcc_get_inst_index+0x38>)
   29d10:	68fa      	ldr	r2, [r7, #12]
   29d12:	0092      	lsls	r2, r2, #2
   29d14:	58d2      	ldr	r2, [r2, r3]
   29d16:	687b      	ldr	r3, [r7, #4]
   29d18:	429a      	cmp	r2, r3
   29d1a:	d102      	bne.n	29d22 <_tcc_get_inst_index+0x22>
			return i;
   29d1c:	68fb      	ldr	r3, [r7, #12]
   29d1e:	b2db      	uxtb	r3, r3
   29d20:	e006      	b.n	29d30 <_tcc_get_inst_index+0x30>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   29d22:	68fb      	ldr	r3, [r7, #12]
   29d24:	3301      	adds	r3, #1
   29d26:	60fb      	str	r3, [r7, #12]
   29d28:	68fb      	ldr	r3, [r7, #12]
   29d2a:	2b02      	cmp	r3, #2
   29d2c:	d9ef      	bls.n	29d0e <_tcc_get_inst_index+0xe>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
   29d2e:	2300      	movs	r3, #0
}
   29d30:	0018      	movs	r0, r3
   29d32:	46bd      	mov	sp, r7
   29d34:	b004      	add	sp, #16
   29d36:	bd80      	pop	{r7, pc}
   29d38:	00039f58 	.word	0x00039f58

00029d3c <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
   29d3c:	b590      	push	{r4, r7, lr}
   29d3e:	b085      	sub	sp, #20
   29d40:	af00      	add	r7, sp, #0
   29d42:	6078      	str	r0, [r7, #4]
   29d44:	6039      	str	r1, [r7, #0]
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   29d46:	230f      	movs	r3, #15
   29d48:	18fc      	adds	r4, r7, r3
   29d4a:	683b      	ldr	r3, [r7, #0]
   29d4c:	0018      	movs	r0, r3
   29d4e:	4bad      	ldr	r3, [pc, #692]	; (2a004 <tcc_get_config_defaults+0x2c8>)
   29d50:	4798      	blx	r3
   29d52:	0003      	movs	r3, r0
   29d54:	7023      	strb	r3, [r4, #0]

	/* Base counter defaults */
	config->counter.count                  = 0;
   29d56:	687b      	ldr	r3, [r7, #4]
   29d58:	2200      	movs	r2, #0
   29d5a:	601a      	str	r2, [r3, #0]

	config->counter.period                 = _tcc_maxs[module_index];
   29d5c:	230f      	movs	r3, #15
   29d5e:	18fb      	adds	r3, r7, r3
   29d60:	781a      	ldrb	r2, [r3, #0]
   29d62:	4ba9      	ldr	r3, [pc, #676]	; (2a008 <tcc_get_config_defaults+0x2cc>)
   29d64:	0092      	lsls	r2, r2, #2
   29d66:	58d2      	ldr	r2, [r2, r3]
   29d68:	687b      	ldr	r3, [r7, #4]
   29d6a:	605a      	str	r2, [r3, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
   29d6c:	687b      	ldr	r3, [r7, #4]
   29d6e:	2200      	movs	r2, #0
   29d70:	729a      	strb	r2, [r3, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
   29d72:	687b      	ldr	r3, [r7, #4]
   29d74:	2200      	movs	r2, #0
   29d76:	72da      	strb	r2, [r3, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
   29d78:	687b      	ldr	r3, [r7, #4]
   29d7a:	2200      	movs	r2, #0
   29d7c:	731a      	strb	r2, [r3, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
   29d7e:	687b      	ldr	r3, [r7, #4]
   29d80:	2200      	movs	r2, #0
   29d82:	725a      	strb	r2, [r3, #9]
	config->counter.oneshot                = false;
   29d84:	687b      	ldr	r3, [r7, #4]
   29d86:	2200      	movs	r2, #0
   29d88:	721a      	strb	r2, [r3, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   29d8a:	687b      	ldr	r3, [r7, #4]
   29d8c:	2200      	movs	r2, #0
   29d8e:	61da      	str	r2, [r3, #28]
   29d90:	687b      	ldr	r3, [r7, #4]
   29d92:	2200      	movs	r2, #0
   29d94:	621a      	str	r2, [r3, #32]
   29d96:	687b      	ldr	r3, [r7, #4]
   29d98:	2200      	movs	r2, #0
   29d9a:	625a      	str	r2, [r3, #36]	; 0x24
   29d9c:	687b      	ldr	r3, [r7, #4]
   29d9e:	2200      	movs	r2, #0
   29da0:	629a      	str	r2, [r3, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   29da2:	687b      	ldr	r3, [r7, #4]
   29da4:	2200      	movs	r2, #0
   29da6:	751a      	strb	r2, [r3, #20]
   29da8:	687b      	ldr	r3, [r7, #4]
   29daa:	2200      	movs	r2, #0
   29dac:	755a      	strb	r2, [r3, #21]
   29dae:	687b      	ldr	r3, [r7, #4]
   29db0:	2200      	movs	r2, #0
   29db2:	759a      	strb	r2, [r3, #22]
   29db4:	687b      	ldr	r3, [r7, #4]
   29db6:	2200      	movs	r2, #0
   29db8:	75da      	strb	r2, [r3, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
   29dba:	687b      	ldr	r3, [r7, #4]
   29dbc:	2200      	movs	r2, #0
   29dbe:	761a      	strb	r2, [r3, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
   29dc0:	687b      	ldr	r3, [r7, #4]
   29dc2:	2200      	movs	r2, #0
   29dc4:	765a      	strb	r2, [r3, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   29dc6:	687b      	ldr	r3, [r7, #4]
   29dc8:	2200      	movs	r2, #0
   29dca:	741a      	strb	r2, [r3, #16]
   29dcc:	687b      	ldr	r3, [r7, #4]
   29dce:	2200      	movs	r2, #0
   29dd0:	745a      	strb	r2, [r3, #17]
   29dd2:	687b      	ldr	r3, [r7, #4]
   29dd4:	2200      	movs	r2, #0
   29dd6:	749a      	strb	r2, [r3, #18]
   29dd8:	687b      	ldr	r3, [r7, #4]
   29dda:	2200      	movs	r2, #0
   29ddc:	74da      	strb	r2, [r3, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
   29dde:	687b      	ldr	r3, [r7, #4]
   29de0:	222c      	movs	r2, #44	; 0x2c
   29de2:	2100      	movs	r1, #0
   29de4:	5499      	strb	r1, [r3, r2]
   29de6:	687b      	ldr	r3, [r7, #4]
   29de8:	222d      	movs	r2, #45	; 0x2d
   29dea:	2100      	movs	r1, #0
   29dec:	5499      	strb	r1, [r3, r2]
   29dee:	687b      	ldr	r3, [r7, #4]
   29df0:	222e      	movs	r2, #46	; 0x2e
   29df2:	2100      	movs	r1, #0
   29df4:	5499      	strb	r1, [r3, r2]
   29df6:	687b      	ldr	r3, [r7, #4]
   29df8:	222f      	movs	r2, #47	; 0x2f
   29dfa:	2100      	movs	r1, #0
   29dfc:	5499      	strb	r1, [r3, r2]
   29dfe:	687b      	ldr	r3, [r7, #4]
   29e00:	2230      	movs	r2, #48	; 0x30
   29e02:	2100      	movs	r1, #0
   29e04:	5499      	strb	r1, [r3, r2]
   29e06:	687b      	ldr	r3, [r7, #4]
   29e08:	2231      	movs	r2, #49	; 0x31
   29e0a:	2100      	movs	r1, #0
   29e0c:	5499      	strb	r1, [r3, r2]
   29e0e:	687b      	ldr	r3, [r7, #4]
   29e10:	2232      	movs	r2, #50	; 0x32
   29e12:	2100      	movs	r1, #0
   29e14:	5499      	strb	r1, [r3, r2]
   29e16:	687b      	ldr	r3, [r7, #4]
   29e18:	2233      	movs	r2, #51	; 0x33
   29e1a:	2100      	movs	r1, #0
   29e1c:	5499      	strb	r1, [r3, r2]
   29e1e:	687b      	ldr	r3, [r7, #4]
   29e20:	2234      	movs	r2, #52	; 0x34
   29e22:	2100      	movs	r1, #0
   29e24:	5499      	strb	r1, [r3, r2]
   29e26:	687b      	ldr	r3, [r7, #4]
   29e28:	2235      	movs	r2, #53	; 0x35
   29e2a:	2100      	movs	r1, #0
   29e2c:	5499      	strb	r1, [r3, r2]
   29e2e:	687b      	ldr	r3, [r7, #4]
   29e30:	2236      	movs	r2, #54	; 0x36
   29e32:	2100      	movs	r1, #0
   29e34:	5499      	strb	r1, [r3, r2]
   29e36:	687b      	ldr	r3, [r7, #4]
   29e38:	2237      	movs	r2, #55	; 0x37
   29e3a:	2100      	movs	r1, #0
   29e3c:	5499      	strb	r1, [r3, r2]
   29e3e:	687b      	ldr	r3, [r7, #4]
   29e40:	2238      	movs	r2, #56	; 0x38
   29e42:	2100      	movs	r1, #0
   29e44:	5499      	strb	r1, [r3, r2]
   29e46:	687b      	ldr	r3, [r7, #4]
   29e48:	2239      	movs	r2, #57	; 0x39
   29e4a:	2100      	movs	r1, #0
   29e4c:	5499      	strb	r1, [r3, r2]
   29e4e:	687b      	ldr	r3, [r7, #4]
   29e50:	223a      	movs	r2, #58	; 0x3a
   29e52:	2100      	movs	r1, #0
   29e54:	5499      	strb	r1, [r3, r2]
   29e56:	687b      	ldr	r3, [r7, #4]
   29e58:	223b      	movs	r2, #59	; 0x3b
   29e5a:	2100      	movs	r1, #0
   29e5c:	5499      	strb	r1, [r3, r2]
   29e5e:	687b      	ldr	r3, [r7, #4]
   29e60:	223c      	movs	r2, #60	; 0x3c
   29e62:	2100      	movs	r1, #0
   29e64:	5499      	strb	r1, [r3, r2]
   29e66:	687b      	ldr	r3, [r7, #4]
   29e68:	223d      	movs	r2, #61	; 0x3d
   29e6a:	2100      	movs	r1, #0
   29e6c:	5499      	strb	r1, [r3, r2]
   29e6e:	687b      	ldr	r3, [r7, #4]
   29e70:	223e      	movs	r2, #62	; 0x3e
   29e72:	2100      	movs	r1, #0
   29e74:	5499      	strb	r1, [r3, r2]
   29e76:	687b      	ldr	r3, [r7, #4]
   29e78:	223f      	movs	r2, #63	; 0x3f
   29e7a:	2100      	movs	r1, #0
   29e7c:	5499      	strb	r1, [r3, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
   29e7e:	687b      	ldr	r3, [r7, #4]
   29e80:	2240      	movs	r2, #64	; 0x40
   29e82:	2100      	movs	r1, #0
   29e84:	5499      	strb	r1, [r3, r2]
   29e86:	687b      	ldr	r3, [r7, #4]
   29e88:	2241      	movs	r2, #65	; 0x41
   29e8a:	2100      	movs	r1, #0
   29e8c:	5499      	strb	r1, [r3, r2]
   29e8e:	687b      	ldr	r3, [r7, #4]
   29e90:	2242      	movs	r2, #66	; 0x42
   29e92:	2100      	movs	r1, #0
   29e94:	5499      	strb	r1, [r3, r2]
   29e96:	687b      	ldr	r3, [r7, #4]
   29e98:	2243      	movs	r2, #67	; 0x43
   29e9a:	2100      	movs	r1, #0
   29e9c:	5499      	strb	r1, [r3, r2]
   29e9e:	687b      	ldr	r3, [r7, #4]
   29ea0:	2244      	movs	r2, #68	; 0x44
   29ea2:	2100      	movs	r1, #0
   29ea4:	5499      	strb	r1, [r3, r2]
   29ea6:	687b      	ldr	r3, [r7, #4]
   29ea8:	2245      	movs	r2, #69	; 0x45
   29eaa:	2100      	movs	r1, #0
   29eac:	5499      	strb	r1, [r3, r2]
   29eae:	687b      	ldr	r3, [r7, #4]
   29eb0:	2246      	movs	r2, #70	; 0x46
   29eb2:	2100      	movs	r1, #0
   29eb4:	5499      	strb	r1, [r3, r2]
   29eb6:	687b      	ldr	r3, [r7, #4]
   29eb8:	2247      	movs	r2, #71	; 0x47
   29eba:	2100      	movs	r1, #0
   29ebc:	5499      	strb	r1, [r3, r2]
   29ebe:	687b      	ldr	r3, [r7, #4]
   29ec0:	2248      	movs	r2, #72	; 0x48
   29ec2:	2100      	movs	r1, #0
   29ec4:	5499      	strb	r1, [r3, r2]
   29ec6:	687b      	ldr	r3, [r7, #4]
   29ec8:	2249      	movs	r2, #73	; 0x49
   29eca:	2100      	movs	r1, #0
   29ecc:	5499      	strb	r1, [r3, r2]
   29ece:	687b      	ldr	r3, [r7, #4]
   29ed0:	224a      	movs	r2, #74	; 0x4a
   29ed2:	2100      	movs	r1, #0
   29ed4:	5499      	strb	r1, [r3, r2]
   29ed6:	687b      	ldr	r3, [r7, #4]
   29ed8:	224b      	movs	r2, #75	; 0x4b
   29eda:	2100      	movs	r1, #0
   29edc:	5499      	strb	r1, [r3, r2]
   29ede:	687b      	ldr	r3, [r7, #4]
   29ee0:	224c      	movs	r2, #76	; 0x4c
   29ee2:	2100      	movs	r1, #0
   29ee4:	5499      	strb	r1, [r3, r2]
   29ee6:	687b      	ldr	r3, [r7, #4]
   29ee8:	224d      	movs	r2, #77	; 0x4d
   29eea:	2100      	movs	r1, #0
   29eec:	5499      	strb	r1, [r3, r2]
   29eee:	687b      	ldr	r3, [r7, #4]
   29ef0:	224e      	movs	r2, #78	; 0x4e
   29ef2:	2100      	movs	r1, #0
   29ef4:	5499      	strb	r1, [r3, r2]
   29ef6:	687b      	ldr	r3, [r7, #4]
   29ef8:	224f      	movs	r2, #79	; 0x4f
   29efa:	2100      	movs	r1, #0
   29efc:	5499      	strb	r1, [r3, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
   29efe:	687b      	ldr	r3, [r7, #4]
   29f00:	2250      	movs	r2, #80	; 0x50
   29f02:	2100      	movs	r1, #0
   29f04:	5499      	strb	r1, [r3, r2]
   29f06:	687b      	ldr	r3, [r7, #4]
   29f08:	2251      	movs	r2, #81	; 0x51
   29f0a:	2100      	movs	r1, #0
   29f0c:	5499      	strb	r1, [r3, r2]
   29f0e:	687b      	ldr	r3, [r7, #4]
   29f10:	2252      	movs	r2, #82	; 0x52
   29f12:	2100      	movs	r1, #0
   29f14:	5499      	strb	r1, [r3, r2]
   29f16:	687b      	ldr	r3, [r7, #4]
   29f18:	2253      	movs	r2, #83	; 0x53
   29f1a:	2100      	movs	r1, #0
   29f1c:	5499      	strb	r1, [r3, r2]
   29f1e:	687b      	ldr	r3, [r7, #4]
   29f20:	2254      	movs	r2, #84	; 0x54
   29f22:	2100      	movs	r1, #0
   29f24:	5499      	strb	r1, [r3, r2]
   29f26:	687b      	ldr	r3, [r7, #4]
   29f28:	2255      	movs	r2, #85	; 0x55
   29f2a:	2100      	movs	r1, #0
   29f2c:	5499      	strb	r1, [r3, r2]
   29f2e:	687b      	ldr	r3, [r7, #4]
   29f30:	2256      	movs	r2, #86	; 0x56
   29f32:	2100      	movs	r1, #0
   29f34:	5499      	strb	r1, [r3, r2]
   29f36:	687b      	ldr	r3, [r7, #4]
   29f38:	2257      	movs	r2, #87	; 0x57
   29f3a:	2100      	movs	r1, #0
   29f3c:	5499      	strb	r1, [r3, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
   29f3e:	687b      	ldr	r3, [r7, #4]
   29f40:	2298      	movs	r2, #152	; 0x98
   29f42:	2100      	movs	r1, #0
   29f44:	5499      	strb	r1, [r3, r2]
   29f46:	687b      	ldr	r3, [r7, #4]
   29f48:	2200      	movs	r2, #0
   29f4a:	659a      	str	r2, [r3, #88]	; 0x58
   29f4c:	687b      	ldr	r3, [r7, #4]
   29f4e:	2200      	movs	r2, #0
   29f50:	679a      	str	r2, [r3, #120]	; 0x78
   29f52:	687b      	ldr	r3, [r7, #4]
   29f54:	2299      	movs	r2, #153	; 0x99
   29f56:	2100      	movs	r1, #0
   29f58:	5499      	strb	r1, [r3, r2]
   29f5a:	687b      	ldr	r3, [r7, #4]
   29f5c:	2200      	movs	r2, #0
   29f5e:	65da      	str	r2, [r3, #92]	; 0x5c
   29f60:	687b      	ldr	r3, [r7, #4]
   29f62:	2200      	movs	r2, #0
   29f64:	67da      	str	r2, [r3, #124]	; 0x7c
   29f66:	687b      	ldr	r3, [r7, #4]
   29f68:	229a      	movs	r2, #154	; 0x9a
   29f6a:	2100      	movs	r1, #0
   29f6c:	5499      	strb	r1, [r3, r2]
   29f6e:	687b      	ldr	r3, [r7, #4]
   29f70:	2200      	movs	r2, #0
   29f72:	661a      	str	r2, [r3, #96]	; 0x60
   29f74:	687b      	ldr	r3, [r7, #4]
   29f76:	2280      	movs	r2, #128	; 0x80
   29f78:	2100      	movs	r1, #0
   29f7a:	5099      	str	r1, [r3, r2]
   29f7c:	687b      	ldr	r3, [r7, #4]
   29f7e:	229b      	movs	r2, #155	; 0x9b
   29f80:	2100      	movs	r1, #0
   29f82:	5499      	strb	r1, [r3, r2]
   29f84:	687b      	ldr	r3, [r7, #4]
   29f86:	2200      	movs	r2, #0
   29f88:	665a      	str	r2, [r3, #100]	; 0x64
   29f8a:	687b      	ldr	r3, [r7, #4]
   29f8c:	2284      	movs	r2, #132	; 0x84
   29f8e:	2100      	movs	r1, #0
   29f90:	5099      	str	r1, [r3, r2]
   29f92:	687b      	ldr	r3, [r7, #4]
   29f94:	229c      	movs	r2, #156	; 0x9c
   29f96:	2100      	movs	r1, #0
   29f98:	5499      	strb	r1, [r3, r2]
   29f9a:	687b      	ldr	r3, [r7, #4]
   29f9c:	2200      	movs	r2, #0
   29f9e:	669a      	str	r2, [r3, #104]	; 0x68
   29fa0:	687b      	ldr	r3, [r7, #4]
   29fa2:	2288      	movs	r2, #136	; 0x88
   29fa4:	2100      	movs	r1, #0
   29fa6:	5099      	str	r1, [r3, r2]
   29fa8:	687b      	ldr	r3, [r7, #4]
   29faa:	229d      	movs	r2, #157	; 0x9d
   29fac:	2100      	movs	r1, #0
   29fae:	5499      	strb	r1, [r3, r2]
   29fb0:	687b      	ldr	r3, [r7, #4]
   29fb2:	2200      	movs	r2, #0
   29fb4:	66da      	str	r2, [r3, #108]	; 0x6c
   29fb6:	687b      	ldr	r3, [r7, #4]
   29fb8:	228c      	movs	r2, #140	; 0x8c
   29fba:	2100      	movs	r1, #0
   29fbc:	5099      	str	r1, [r3, r2]
   29fbe:	687b      	ldr	r3, [r7, #4]
   29fc0:	229e      	movs	r2, #158	; 0x9e
   29fc2:	2100      	movs	r1, #0
   29fc4:	5499      	strb	r1, [r3, r2]
   29fc6:	687b      	ldr	r3, [r7, #4]
   29fc8:	2200      	movs	r2, #0
   29fca:	671a      	str	r2, [r3, #112]	; 0x70
   29fcc:	687b      	ldr	r3, [r7, #4]
   29fce:	2290      	movs	r2, #144	; 0x90
   29fd0:	2100      	movs	r1, #0
   29fd2:	5099      	str	r1, [r3, r2]
   29fd4:	687b      	ldr	r3, [r7, #4]
   29fd6:	229f      	movs	r2, #159	; 0x9f
   29fd8:	2100      	movs	r1, #0
   29fda:	5499      	strb	r1, [r3, r2]
   29fdc:	687b      	ldr	r3, [r7, #4]
   29fde:	2200      	movs	r2, #0
   29fe0:	675a      	str	r2, [r3, #116]	; 0x74
   29fe2:	687b      	ldr	r3, [r7, #4]
   29fe4:	2294      	movs	r2, #148	; 0x94
   29fe6:	2100      	movs	r1, #0
   29fe8:	5099      	str	r1, [r3, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
   29fea:	687b      	ldr	r3, [r7, #4]
   29fec:	22a0      	movs	r2, #160	; 0xa0
   29fee:	2101      	movs	r1, #1
   29ff0:	5499      	strb	r1, [r3, r2]
	config->run_in_standby            = false;
   29ff2:	687b      	ldr	r3, [r7, #4]
   29ff4:	22a1      	movs	r2, #161	; 0xa1
   29ff6:	2100      	movs	r1, #0
   29ff8:	5499      	strb	r1, [r3, r2]
}
   29ffa:	46c0      	nop			; (mov r8, r8)
   29ffc:	46bd      	mov	sp, r7
   29ffe:	b005      	add	sp, #20
   2a000:	bd90      	pop	{r4, r7, pc}
   2a002:	46c0      	nop			; (mov r8, r8)
   2a004:	00029d01 	.word	0x00029d01
   2a008:	00039f74 	.word	0x00039f74

0002a00c <_tcc_build_ctrla>:
 */
static inline enum status_code _tcc_build_ctrla(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2a00c:	b580      	push	{r7, lr}
   2a00e:	b086      	sub	sp, #24
   2a010:	af00      	add	r7, sp, #0
   2a012:	60b9      	str	r1, [r7, #8]
   2a014:	607a      	str	r2, [r7, #4]
   2a016:	230f      	movs	r3, #15
   2a018:	18fb      	adds	r3, r7, r3
   2a01a:	1c02      	adds	r2, r0, #0
   2a01c:	701a      	strb	r2, [r3, #0]
	uint32_t ctrla = 0;
   2a01e:	2300      	movs	r3, #0
   2a020:	617b      	str	r3, [r7, #20]

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2a022:	2300      	movs	r3, #0
   2a024:	613b      	str	r3, [r7, #16]
   2a026:	e01d      	b.n	2a064 <_tcc_build_ctrla+0x58>
		if (config->capture.channel_function[i] ==
   2a028:	68ba      	ldr	r2, [r7, #8]
   2a02a:	693b      	ldr	r3, [r7, #16]
   2a02c:	18d3      	adds	r3, r2, r3
   2a02e:	3310      	adds	r3, #16
   2a030:	781b      	ldrb	r3, [r3, #0]
   2a032:	2b01      	cmp	r3, #1
   2a034:	d113      	bne.n	2a05e <_tcc_build_ctrla+0x52>
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
   2a036:	230f      	movs	r3, #15
   2a038:	18fb      	adds	r3, r7, r3
   2a03a:	781b      	ldrb	r3, [r3, #0]
   2a03c:	4a1b      	ldr	r2, [pc, #108]	; (2a0ac <_tcc_build_ctrla+0xa0>)
   2a03e:	5cd3      	ldrb	r3, [r2, r3]
   2a040:	001a      	movs	r2, r3
   2a042:	693b      	ldr	r3, [r7, #16]
   2a044:	429a      	cmp	r2, r3
   2a046:	da01      	bge.n	2a04c <_tcc_build_ctrla+0x40>
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
   2a048:	2317      	movs	r3, #23
   2a04a:	e02a      	b.n	2a0a2 <_tcc_build_ctrla+0x96>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
   2a04c:	2380      	movs	r3, #128	; 0x80
   2a04e:	045a      	lsls	r2, r3, #17
   2a050:	693b      	ldr	r3, [r7, #16]
   2a052:	409a      	lsls	r2, r3
   2a054:	0013      	movs	r3, r2
   2a056:	001a      	movs	r2, r3
   2a058:	697b      	ldr	r3, [r7, #20]
   2a05a:	4313      	orrs	r3, r2
   2a05c:	617b      	str	r3, [r7, #20]
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2a05e:	693b      	ldr	r3, [r7, #16]
   2a060:	3301      	adds	r3, #1
   2a062:	613b      	str	r3, [r7, #16]
   2a064:	693b      	ldr	r3, [r7, #16]
   2a066:	2b03      	cmp	r3, #3
   2a068:	ddde      	ble.n	2a028 <_tcc_build_ctrla+0x1c>
		}
	}

	if (config->run_in_standby) {
   2a06a:	68bb      	ldr	r3, [r7, #8]
   2a06c:	22a1      	movs	r2, #161	; 0xa1
   2a06e:	5c9b      	ldrb	r3, [r3, r2]
   2a070:	2b00      	cmp	r3, #0
   2a072:	d004      	beq.n	2a07e <_tcc_build_ctrla+0x72>
		ctrla |= TCC_CTRLA_RUNSTDBY;
   2a074:	697b      	ldr	r3, [r7, #20]
   2a076:	2280      	movs	r2, #128	; 0x80
   2a078:	0112      	lsls	r2, r2, #4
   2a07a:	4313      	orrs	r3, r2
   2a07c:	617b      	str	r3, [r7, #20]
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
   2a07e:	68bb      	ldr	r3, [r7, #8]
   2a080:	7b1b      	ldrb	r3, [r3, #12]
   2a082:	031b      	lsls	r3, r3, #12
   2a084:	001a      	movs	r2, r3
   2a086:	697b      	ldr	r3, [r7, #20]
   2a088:	4313      	orrs	r3, r2
   2a08a:	617b      	str	r3, [r7, #20]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
   2a08c:	68bb      	ldr	r3, [r7, #8]
   2a08e:	7adb      	ldrb	r3, [r3, #11]
   2a090:	021b      	lsls	r3, r3, #8
   2a092:	001a      	movs	r2, r3
   2a094:	697b      	ldr	r3, [r7, #20]
   2a096:	4313      	orrs	r3, r2
   2a098:	617b      	str	r3, [r7, #20]

	*value_buffer = ctrla;
   2a09a:	687b      	ldr	r3, [r7, #4]
   2a09c:	697a      	ldr	r2, [r7, #20]
   2a09e:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   2a0a0:	2300      	movs	r3, #0
}
   2a0a2:	0018      	movs	r0, r3
   2a0a4:	46bd      	mov	sp, r7
   2a0a6:	b006      	add	sp, #24
   2a0a8:	bd80      	pop	{r7, pc}
   2a0aa:	46c0      	nop			; (mov r8, r8)
   2a0ac:	00039f80 	.word	0x00039f80

0002a0b0 <_tcc_build_ctrlb>:
 */
static inline void _tcc_build_ctrlb(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
   2a0b0:	b580      	push	{r7, lr}
   2a0b2:	b086      	sub	sp, #24
   2a0b4:	af00      	add	r7, sp, #0
   2a0b6:	60b9      	str	r1, [r7, #8]
   2a0b8:	607a      	str	r2, [r7, #4]
   2a0ba:	230f      	movs	r3, #15
   2a0bc:	18fb      	adds	r3, r7, r3
   2a0be:	1c02      	adds	r2, r0, #0
   2a0c0:	701a      	strb	r2, [r3, #0]
	uint8_t ctrlb = 0;
   2a0c2:	2317      	movs	r3, #23
   2a0c4:	18fb      	adds	r3, r7, r3
   2a0c6:	2200      	movs	r2, #0
   2a0c8:	701a      	strb	r2, [r3, #0]

	if (config->counter.oneshot) {
   2a0ca:	68bb      	ldr	r3, [r7, #8]
   2a0cc:	7a1b      	ldrb	r3, [r3, #8]
   2a0ce:	2b00      	cmp	r3, #0
   2a0d0:	d007      	beq.n	2a0e2 <_tcc_build_ctrlb+0x32>
		ctrlb |= TCC_CTRLBSET_ONESHOT;
   2a0d2:	2317      	movs	r3, #23
   2a0d4:	18fb      	adds	r3, r7, r3
   2a0d6:	2217      	movs	r2, #23
   2a0d8:	18ba      	adds	r2, r7, r2
   2a0da:	7812      	ldrb	r2, [r2, #0]
   2a0dc:	2104      	movs	r1, #4
   2a0de:	430a      	orrs	r2, r1
   2a0e0:	701a      	strb	r2, [r3, #0]
	}
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
   2a0e2:	68bb      	ldr	r3, [r7, #8]
   2a0e4:	7a5b      	ldrb	r3, [r3, #9]
   2a0e6:	2b01      	cmp	r3, #1
   2a0e8:	d107      	bne.n	2a0fa <_tcc_build_ctrlb+0x4a>
		ctrlb |= TCC_CTRLBSET_DIR;
   2a0ea:	2317      	movs	r3, #23
   2a0ec:	18fb      	adds	r3, r7, r3
   2a0ee:	2217      	movs	r2, #23
   2a0f0:	18ba      	adds	r2, r7, r2
   2a0f2:	7812      	ldrb	r2, [r2, #0]
   2a0f4:	2101      	movs	r1, #1
   2a0f6:	430a      	orrs	r2, r1
   2a0f8:	701a      	strb	r2, [r3, #0]
	}

	*value_buffer = ctrlb;
   2a0fa:	687b      	ldr	r3, [r7, #4]
   2a0fc:	2217      	movs	r2, #23
   2a0fe:	18ba      	adds	r2, r7, r2
   2a100:	7812      	ldrb	r2, [r2, #0]
   2a102:	701a      	strb	r2, [r3, #0]
}
   2a104:	46c0      	nop			; (mov r8, r8)
   2a106:	46bd      	mov	sp, r7
   2a108:	b006      	add	sp, #24
   2a10a:	bd80      	pop	{r7, pc}

0002a10c <_tcc_build_faults>:
 */
static inline enum status_code _tcc_build_faults(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2a10c:	b580      	push	{r7, lr}
   2a10e:	b088      	sub	sp, #32
   2a110:	af00      	add	r7, sp, #0
   2a112:	60b9      	str	r1, [r7, #8]
   2a114:	607a      	str	r2, [r7, #4]
   2a116:	230f      	movs	r3, #15
   2a118:	18fb      	adds	r3, r7, r3
   2a11a:	1c02      	adds	r2, r0, #0
   2a11c:	701a      	strb	r2, [r3, #0]
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
   2a11e:	230f      	movs	r3, #15
   2a120:	18fb      	adds	r3, r7, r3
   2a122:	781a      	ldrb	r2, [r3, #0]
   2a124:	231b      	movs	r3, #27
   2a126:	18fb      	adds	r3, r7, r3
   2a128:	493e      	ldr	r1, [pc, #248]	; (2a224 <_tcc_build_faults+0x118>)
   2a12a:	5c8a      	ldrb	r2, [r1, r2]
   2a12c:	701a      	strb	r2, [r3, #0]
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   2a12e:	2300      	movs	r3, #0
   2a130:	61fb      	str	r3, [r7, #28]
   2a132:	e06e      	b.n	2a212 <_tcc_build_faults+0x106>
		cfg = (struct tcc_recoverable_fault_config *)
   2a134:	69fa      	ldr	r2, [r7, #28]
   2a136:	0013      	movs	r3, r2
   2a138:	009b      	lsls	r3, r3, #2
   2a13a:	189b      	adds	r3, r3, r2
   2a13c:	005b      	lsls	r3, r3, #1
   2a13e:	3328      	adds	r3, #40	; 0x28
   2a140:	68ba      	ldr	r2, [r7, #8]
   2a142:	18d3      	adds	r3, r2, r3
   2a144:	3304      	adds	r3, #4
   2a146:	617b      	str	r3, [r7, #20]
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
   2a148:	697b      	ldr	r3, [r7, #20]
   2a14a:	7a5b      	ldrb	r3, [r3, #9]
   2a14c:	221b      	movs	r2, #27
   2a14e:	18ba      	adds	r2, r7, r2
   2a150:	7812      	ldrb	r2, [r2, #0]
   2a152:	429a      	cmp	r2, r3
   2a154:	d801      	bhi.n	2a15a <_tcc_build_faults+0x4e>
			return STATUS_ERR_INVALID_ARG;
   2a156:	2317      	movs	r3, #23
   2a158:	e05f      	b.n	2a21a <_tcc_build_faults+0x10e>
		}
		if (cfg->filter_value > 0xF) {
   2a15a:	697b      	ldr	r3, [r7, #20]
   2a15c:	781b      	ldrb	r3, [r3, #0]
   2a15e:	2b0f      	cmp	r3, #15
   2a160:	d901      	bls.n	2a166 <_tcc_build_faults+0x5a>
			return STATUS_ERR_INVALID_ARG;
   2a162:	2317      	movs	r3, #23
   2a164:	e059      	b.n	2a21a <_tcc_build_faults+0x10e>
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   2a166:	697b      	ldr	r3, [r7, #20]
   2a168:	781b      	ldrb	r3, [r3, #0]
   2a16a:	061b      	lsls	r3, r3, #24
   2a16c:	001a      	movs	r2, r3
   2a16e:	23f0      	movs	r3, #240	; 0xf0
   2a170:	051b      	lsls	r3, r3, #20
   2a172:	401a      	ands	r2, r3
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
   2a174:	697b      	ldr	r3, [r7, #20]
   2a176:	785b      	ldrb	r3, [r3, #1]
   2a178:	041b      	lsls	r3, r3, #16
   2a17a:	0019      	movs	r1, r3
   2a17c:	23ff      	movs	r3, #255	; 0xff
   2a17e:	041b      	lsls	r3, r3, #16
   2a180:	400b      	ands	r3, r1
   2a182:	431a      	orrs	r2, r3
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
   2a184:	697b      	ldr	r3, [r7, #20]
   2a186:	789b      	ldrb	r3, [r3, #2]
   2a188:	2b00      	cmp	r3, #0
   2a18a:	d001      	beq.n	2a190 <_tcc_build_faults+0x84>
   2a18c:	2380      	movs	r3, #128	; 0x80
   2a18e:	e000      	b.n	2a192 <_tcc_build_faults+0x86>
   2a190:	2300      	movs	r3, #0
   2a192:	431a      	orrs	r2, r3
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
   2a194:	697b      	ldr	r3, [r7, #20]
   2a196:	78db      	ldrb	r3, [r3, #3]
   2a198:	2b00      	cmp	r3, #0
   2a19a:	d001      	beq.n	2a1a0 <_tcc_build_faults+0x94>
   2a19c:	2308      	movs	r3, #8
   2a19e:	e000      	b.n	2a1a2 <_tcc_build_faults+0x96>
   2a1a0:	2300      	movs	r3, #0
   2a1a2:	431a      	orrs	r2, r3
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
   2a1a4:	697b      	ldr	r3, [r7, #20]
   2a1a6:	791b      	ldrb	r3, [r3, #4]
   2a1a8:	2b00      	cmp	r3, #0
   2a1aa:	d001      	beq.n	2a1b0 <_tcc_build_faults+0xa4>
   2a1ac:	2310      	movs	r3, #16
   2a1ae:	e000      	b.n	2a1b2 <_tcc_build_faults+0xa6>
   2a1b0:	2300      	movs	r3, #0
   2a1b2:	431a      	orrs	r2, r3
				| TCC_FCTRLA_SRC(cfg->source)
   2a1b4:	697b      	ldr	r3, [r7, #20]
   2a1b6:	795b      	ldrb	r3, [r3, #5]
   2a1b8:	0019      	movs	r1, r3
   2a1ba:	2303      	movs	r3, #3
   2a1bc:	400b      	ands	r3, r1
   2a1be:	431a      	orrs	r2, r3
				| TCC_FCTRLA_BLANK(cfg->blanking)
   2a1c0:	697b      	ldr	r3, [r7, #20]
   2a1c2:	799b      	ldrb	r3, [r3, #6]
   2a1c4:	015b      	lsls	r3, r3, #5
   2a1c6:	0019      	movs	r1, r3
   2a1c8:	2360      	movs	r3, #96	; 0x60
   2a1ca:	400b      	ands	r3, r1
   2a1cc:	431a      	orrs	r2, r3
				| TCC_FCTRLA_HALT(cfg->halt_action)
   2a1ce:	697b      	ldr	r3, [r7, #20]
   2a1d0:	79db      	ldrb	r3, [r3, #7]
   2a1d2:	021b      	lsls	r3, r3, #8
   2a1d4:	0019      	movs	r1, r3
   2a1d6:	23c0      	movs	r3, #192	; 0xc0
   2a1d8:	009b      	lsls	r3, r3, #2
   2a1da:	400b      	ands	r3, r1
   2a1dc:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
   2a1de:	697b      	ldr	r3, [r7, #20]
   2a1e0:	7a1b      	ldrb	r3, [r3, #8]
   2a1e2:	031b      	lsls	r3, r3, #12
   2a1e4:	0019      	movs	r1, r3
   2a1e6:	23e0      	movs	r3, #224	; 0xe0
   2a1e8:	01db      	lsls	r3, r3, #7
   2a1ea:	400b      	ands	r3, r1
   2a1ec:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
   2a1ee:	697b      	ldr	r3, [r7, #20]
   2a1f0:	7a5b      	ldrb	r3, [r3, #9]
   2a1f2:	029b      	lsls	r3, r3, #10
   2a1f4:	0019      	movs	r1, r3
   2a1f6:	23c0      	movs	r3, #192	; 0xc0
   2a1f8:	011b      	lsls	r3, r3, #4
   2a1fa:	400b      	ands	r3, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   2a1fc:	4313      	orrs	r3, r2
   2a1fe:	613b      	str	r3, [r7, #16]
		value_buffer[i] = fault;
   2a200:	69fb      	ldr	r3, [r7, #28]
   2a202:	009b      	lsls	r3, r3, #2
   2a204:	687a      	ldr	r2, [r7, #4]
   2a206:	18d3      	adds	r3, r2, r3
   2a208:	693a      	ldr	r2, [r7, #16]
   2a20a:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   2a20c:	69fb      	ldr	r3, [r7, #28]
   2a20e:	3301      	adds	r3, #1
   2a210:	61fb      	str	r3, [r7, #28]
   2a212:	69fb      	ldr	r3, [r7, #28]
   2a214:	2b01      	cmp	r3, #1
   2a216:	dd8d      	ble.n	2a134 <_tcc_build_faults+0x28>
	}
	return STATUS_OK;
   2a218:	2300      	movs	r3, #0
}
   2a21a:	0018      	movs	r0, r3
   2a21c:	46bd      	mov	sp, r7
   2a21e:	b008      	add	sp, #32
   2a220:	bd80      	pop	{r7, pc}
   2a222:	46c0      	nop			; (mov r8, r8)
   2a224:	00039f80 	.word	0x00039f80

0002a228 <_tcc_build_drvctrl>:
 */
static inline enum status_code _tcc_build_drvctrl(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2a228:	b580      	push	{r7, lr}
   2a22a:	b088      	sub	sp, #32
   2a22c:	af00      	add	r7, sp, #0
   2a22e:	60b9      	str	r1, [r7, #8]
   2a230:	607a      	str	r2, [r7, #4]
   2a232:	230f      	movs	r3, #15
   2a234:	18fb      	adds	r3, r7, r3
   2a236:	1c02      	adds	r2, r0, #0
   2a238:	701a      	strb	r2, [r3, #0]
	uint32_t i;
	uint8_t ow_num = _tcc_ow_nums[module_index];
   2a23a:	230f      	movs	r3, #15
   2a23c:	18fb      	adds	r3, r7, r3
   2a23e:	781a      	ldrb	r2, [r3, #0]
   2a240:	2317      	movs	r3, #23
   2a242:	18fb      	adds	r3, r7, r3
   2a244:	492d      	ldr	r1, [pc, #180]	; (2a2fc <_tcc_build_drvctrl+0xd4>)
   2a246:	5c8a      	ldrb	r2, [r1, r2]
   2a248:	701a      	strb	r2, [r3, #0]
	uint32_t drvctrl;

	drvctrl = 0;
   2a24a:	2300      	movs	r3, #0
   2a24c:	61bb      	str	r3, [r7, #24]

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2a24e:	2300      	movs	r3, #0
   2a250:	61fb      	str	r3, [r7, #28]
   2a252:	e048      	b.n	2a2e6 <_tcc_build_drvctrl+0xbe>
		if (config->wave_ext.invert[i]) {
   2a254:	68ba      	ldr	r2, [r7, #8]
   2a256:	2150      	movs	r1, #80	; 0x50
   2a258:	69fb      	ldr	r3, [r7, #28]
   2a25a:	18d3      	adds	r3, r2, r3
   2a25c:	185b      	adds	r3, r3, r1
   2a25e:	781b      	ldrb	r3, [r3, #0]
   2a260:	2b00      	cmp	r3, #0
   2a262:	d010      	beq.n	2a286 <_tcc_build_drvctrl+0x5e>
			if (i >= ow_num) {
   2a264:	2317      	movs	r3, #23
   2a266:	18fb      	adds	r3, r7, r3
   2a268:	781a      	ldrb	r2, [r3, #0]
   2a26a:	69fb      	ldr	r3, [r7, #28]
   2a26c:	429a      	cmp	r2, r3
   2a26e:	d801      	bhi.n	2a274 <_tcc_build_drvctrl+0x4c>
				return STATUS_ERR_INVALID_ARG;
   2a270:	2317      	movs	r3, #23
   2a272:	e03f      	b.n	2a2f4 <_tcc_build_drvctrl+0xcc>
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
   2a274:	2380      	movs	r3, #128	; 0x80
   2a276:	025a      	lsls	r2, r3, #9
   2a278:	69fb      	ldr	r3, [r7, #28]
   2a27a:	409a      	lsls	r2, r3
   2a27c:	0013      	movs	r3, r2
   2a27e:	001a      	movs	r2, r3
   2a280:	69bb      	ldr	r3, [r7, #24]
   2a282:	4313      	orrs	r3, r2
   2a284:	61bb      	str	r3, [r7, #24]
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
   2a286:	68ba      	ldr	r2, [r7, #8]
   2a288:	69fb      	ldr	r3, [r7, #28]
   2a28a:	331c      	adds	r3, #28
   2a28c:	005b      	lsls	r3, r3, #1
   2a28e:	18d3      	adds	r3, r2, r3
   2a290:	3309      	adds	r3, #9
   2a292:	781b      	ldrb	r3, [r3, #0]
   2a294:	2b00      	cmp	r3, #0
   2a296:	d023      	beq.n	2a2e0 <_tcc_build_drvctrl+0xb8>
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
   2a298:	2317      	movs	r3, #23
   2a29a:	18fb      	adds	r3, r7, r3
   2a29c:	781a      	ldrb	r2, [r3, #0]
   2a29e:	69fb      	ldr	r3, [r7, #28]
   2a2a0:	429a      	cmp	r2, r3
   2a2a2:	d801      	bhi.n	2a2a8 <_tcc_build_drvctrl+0x80>
				return STATUS_ERR_INVALID_ARG;
   2a2a4:	2317      	movs	r3, #23
   2a2a6:	e025      	b.n	2a2f4 <_tcc_build_drvctrl+0xcc>
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
   2a2a8:	68ba      	ldr	r2, [r7, #8]
   2a2aa:	69fb      	ldr	r3, [r7, #28]
   2a2ac:	331c      	adds	r3, #28
   2a2ae:	005b      	lsls	r3, r3, #1
   2a2b0:	18d3      	adds	r3, r2, r3
   2a2b2:	3309      	adds	r3, #9
   2a2b4:	781b      	ldrb	r3, [r3, #0]
   2a2b6:	2b02      	cmp	r3, #2
   2a2b8:	d10a      	bne.n	2a2d0 <_tcc_build_drvctrl+0xa8>
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
   2a2ba:	2302      	movs	r3, #2
   2a2bc:	33ff      	adds	r3, #255	; 0xff
   2a2be:	001a      	movs	r2, r3
   2a2c0:	69fb      	ldr	r3, [r7, #28]
   2a2c2:	409a      	lsls	r2, r3
   2a2c4:	0013      	movs	r3, r2
   2a2c6:	001a      	movs	r2, r3
   2a2c8:	69bb      	ldr	r3, [r7, #24]
   2a2ca:	4313      	orrs	r3, r2
   2a2cc:	61bb      	str	r3, [r7, #24]
   2a2ce:	e007      	b.n	2a2e0 <_tcc_build_drvctrl+0xb8>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
   2a2d0:	2201      	movs	r2, #1
   2a2d2:	69fb      	ldr	r3, [r7, #28]
   2a2d4:	409a      	lsls	r2, r3
   2a2d6:	0013      	movs	r3, r2
   2a2d8:	001a      	movs	r2, r3
   2a2da:	69bb      	ldr	r3, [r7, #24]
   2a2dc:	4313      	orrs	r3, r2
   2a2de:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2a2e0:	69fb      	ldr	r3, [r7, #28]
   2a2e2:	3301      	adds	r3, #1
   2a2e4:	61fb      	str	r3, [r7, #28]
   2a2e6:	69fb      	ldr	r3, [r7, #28]
   2a2e8:	2b07      	cmp	r3, #7
   2a2ea:	d9b3      	bls.n	2a254 <_tcc_build_drvctrl+0x2c>
			}
		}
	}
	*value_buffer = drvctrl;
   2a2ec:	687b      	ldr	r3, [r7, #4]
   2a2ee:	69ba      	ldr	r2, [r7, #24]
   2a2f0:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   2a2f2:	2300      	movs	r3, #0
}
   2a2f4:	0018      	movs	r0, r3
   2a2f6:	46bd      	mov	sp, r7
   2a2f8:	b008      	add	sp, #32
   2a2fa:	bd80      	pop	{r7, pc}
   2a2fc:	00039f84 	.word	0x00039f84

0002a300 <_tcc_build_waves>:
 */
static inline enum status_code _tcc_build_waves(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2a300:	b580      	push	{r7, lr}
   2a302:	b088      	sub	sp, #32
   2a304:	af00      	add	r7, sp, #0
   2a306:	60b9      	str	r1, [r7, #8]
   2a308:	607a      	str	r2, [r7, #4]
   2a30a:	230f      	movs	r3, #15
   2a30c:	18fb      	adds	r3, r7, r3
   2a30e:	1c02      	adds	r2, r0, #0
   2a310:	701a      	strb	r2, [r3, #0]
	int n;

	uint8_t cc_num = _tcc_cc_nums[module_index];
   2a312:	230f      	movs	r3, #15
   2a314:	18fb      	adds	r3, r7, r3
   2a316:	781a      	ldrb	r2, [r3, #0]
   2a318:	2317      	movs	r3, #23
   2a31a:	18fb      	adds	r3, r7, r3
   2a31c:	491d      	ldr	r1, [pc, #116]	; (2a394 <_tcc_build_waves+0x94>)
   2a31e:	5c8a      	ldrb	r2, [r1, r2]
   2a320:	701a      	strb	r2, [r3, #0]
	struct tcc_match_wave_config const *wav_cfg = &config->compare;
   2a322:	68bb      	ldr	r3, [r7, #8]
   2a324:	3310      	adds	r3, #16
   2a326:	613b      	str	r3, [r7, #16]

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   2a328:	693b      	ldr	r3, [r7, #16]
   2a32a:	7a5b      	ldrb	r3, [r3, #9]
   2a32c:	011b      	lsls	r3, r3, #4
   2a32e:	001a      	movs	r2, r3
   2a330:	2330      	movs	r3, #48	; 0x30
   2a332:	401a      	ands	r2, r3
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
   2a334:	693b      	ldr	r3, [r7, #16]
   2a336:	7a1b      	ldrb	r3, [r3, #8]
   2a338:	0019      	movs	r1, r3
   2a33a:	2307      	movs	r3, #7
   2a33c:	400b      	ands	r3, r1
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   2a33e:	4313      	orrs	r3, r2
   2a340:	61bb      	str	r3, [r7, #24]

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   2a342:	2300      	movs	r3, #0
   2a344:	61fb      	str	r3, [r7, #28]
   2a346:	e01a      	b.n	2a37e <_tcc_build_waves+0x7e>
		if (wav_cfg->wave_polarity[n]) {
   2a348:	693a      	ldr	r2, [r7, #16]
   2a34a:	69fb      	ldr	r3, [r7, #28]
   2a34c:	18d3      	adds	r3, r2, r3
   2a34e:	3304      	adds	r3, #4
   2a350:	781b      	ldrb	r3, [r3, #0]
   2a352:	2b00      	cmp	r3, #0
   2a354:	d010      	beq.n	2a378 <_tcc_build_waves+0x78>
			if (n >= cc_num) {
   2a356:	2317      	movs	r3, #23
   2a358:	18fb      	adds	r3, r7, r3
   2a35a:	781a      	ldrb	r2, [r3, #0]
   2a35c:	69fb      	ldr	r3, [r7, #28]
   2a35e:	429a      	cmp	r2, r3
   2a360:	dc01      	bgt.n	2a366 <_tcc_build_waves+0x66>
				return STATUS_ERR_INVALID_ARG;
   2a362:	2317      	movs	r3, #23
   2a364:	e012      	b.n	2a38c <_tcc_build_waves+0x8c>
			}
			wave |= (TCC_WAVE_POL0 << n);
   2a366:	2380      	movs	r3, #128	; 0x80
   2a368:	025a      	lsls	r2, r3, #9
   2a36a:	69fb      	ldr	r3, [r7, #28]
   2a36c:	409a      	lsls	r2, r3
   2a36e:	0013      	movs	r3, r2
   2a370:	001a      	movs	r2, r3
   2a372:	69bb      	ldr	r3, [r7, #24]
   2a374:	4313      	orrs	r3, r2
   2a376:	61bb      	str	r3, [r7, #24]
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   2a378:	69fb      	ldr	r3, [r7, #28]
   2a37a:	3301      	adds	r3, #1
   2a37c:	61fb      	str	r3, [r7, #28]
   2a37e:	69fb      	ldr	r3, [r7, #28]
   2a380:	2b03      	cmp	r3, #3
   2a382:	dde1      	ble.n	2a348 <_tcc_build_waves+0x48>
		}
	}

	value_buffer[0] = wave;
   2a384:	687b      	ldr	r3, [r7, #4]
   2a386:	69ba      	ldr	r2, [r7, #24]
   2a388:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
   2a38a:	2300      	movs	r3, #0
}
   2a38c:	0018      	movs	r0, r3
   2a38e:	46bd      	mov	sp, r7
   2a390:	b008      	add	sp, #32
   2a392:	bd80      	pop	{r7, pc}
   2a394:	00039f80 	.word	0x00039f80

0002a398 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
   2a398:	b590      	push	{r4, r7, lr}
   2a39a:	b091      	sub	sp, #68	; 0x44
   2a39c:	af00      	add	r7, sp, #0
   2a39e:	60f8      	str	r0, [r7, #12]
   2a3a0:	60b9      	str	r1, [r7, #8]
   2a3a2:	607a      	str	r2, [r7, #4]
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   2a3a4:	233b      	movs	r3, #59	; 0x3b
   2a3a6:	18fc      	adds	r4, r7, r3
   2a3a8:	68bb      	ldr	r3, [r7, #8]
   2a3aa:	0018      	movs	r0, r3
   2a3ac:	4bc4      	ldr	r3, [pc, #784]	; (2a6c0 <tcc_init+0x328>)
   2a3ae:	4798      	blx	r3
   2a3b0:	0003      	movs	r3, r0
   2a3b2:	7023      	strb	r3, [r4, #0]

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
   2a3b4:	233b      	movs	r3, #59	; 0x3b
   2a3b6:	18fb      	adds	r3, r7, r3
   2a3b8:	781a      	ldrb	r2, [r3, #0]
   2a3ba:	4bc2      	ldr	r3, [pc, #776]	; (2a6c4 <tcc_init+0x32c>)
   2a3bc:	0092      	lsls	r2, r2, #2
   2a3be:	58d3      	ldr	r3, [r2, r3]
   2a3c0:	0019      	movs	r1, r3
   2a3c2:	2002      	movs	r0, #2
   2a3c4:	4bc0      	ldr	r3, [pc, #768]	; (2a6c8 <tcc_init+0x330>)
   2a3c6:	4798      	blx	r3
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
   2a3c8:	68bb      	ldr	r3, [r7, #8]
   2a3ca:	681b      	ldr	r3, [r3, #0]
   2a3cc:	2202      	movs	r2, #2
   2a3ce:	4013      	ands	r3, r2
   2a3d0:	d001      	beq.n	2a3d6 <tcc_init+0x3e>
		return STATUS_ERR_DENIED;
   2a3d2:	231c      	movs	r3, #28
   2a3d4:	e1be      	b.n	2a754 <tcc_init+0x3bc>
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
   2a3d6:	68bb      	ldr	r3, [r7, #8]
   2a3d8:	681b      	ldr	r3, [r3, #0]
   2a3da:	2201      	movs	r2, #1
   2a3dc:	4013      	ands	r3, r2
   2a3de:	d001      	beq.n	2a3e4 <tcc_init+0x4c>
		return STATUS_ERR_DENIED;
   2a3e0:	231c      	movs	r3, #28
   2a3e2:	e1b7      	b.n	2a754 <tcc_init+0x3bc>
	}

	enum status_code status;

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];
   2a3e4:	233b      	movs	r3, #59	; 0x3b
   2a3e6:	18fb      	adds	r3, r7, r3
   2a3e8:	781a      	ldrb	r2, [r3, #0]
   2a3ea:	4bb8      	ldr	r3, [pc, #736]	; (2a6cc <tcc_init+0x334>)
   2a3ec:	0092      	lsls	r2, r2, #2
   2a3ee:	58d3      	ldr	r3, [r2, r3]
   2a3f0:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check all counter values */
	if ((config->counter.count > count_max)
   2a3f2:	687b      	ldr	r3, [r7, #4]
   2a3f4:	681a      	ldr	r2, [r3, #0]
   2a3f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2a3f8:	429a      	cmp	r2, r3
   2a3fa:	d804      	bhi.n	2a406 <tcc_init+0x6e>
		|| (config->counter.period > count_max)
   2a3fc:	687b      	ldr	r3, [r7, #4]
   2a3fe:	685a      	ldr	r2, [r3, #4]
   2a400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2a402:	429a      	cmp	r2, r3
   2a404:	d901      	bls.n	2a40a <tcc_init+0x72>
		) {
		return STATUS_ERR_INVALID_ARG;
   2a406:	2317      	movs	r3, #23
   2a408:	e1a4      	b.n	2a754 <tcc_init+0x3bc>
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2a40a:	2300      	movs	r3, #0
   2a40c:	63fb      	str	r3, [r7, #60]	; 0x3c
   2a40e:	e00e      	b.n	2a42e <tcc_init+0x96>
		if ((config->compare.match[i] > count_max)
   2a410:	687a      	ldr	r2, [r7, #4]
   2a412:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a414:	3306      	adds	r3, #6
   2a416:	009b      	lsls	r3, r3, #2
   2a418:	18d3      	adds	r3, r2, r3
   2a41a:	3304      	adds	r3, #4
   2a41c:	681a      	ldr	r2, [r3, #0]
   2a41e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2a420:	429a      	cmp	r2, r3
   2a422:	d901      	bls.n	2a428 <tcc_init+0x90>
			) {
			return STATUS_ERR_INVALID_ARG;
   2a424:	2317      	movs	r3, #23
   2a426:	e195      	b.n	2a754 <tcc_init+0x3bc>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2a428:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a42a:	3301      	adds	r3, #1
   2a42c:	63fb      	str	r3, [r7, #60]	; 0x3c
   2a42e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a430:	2b03      	cmp	r3, #3
   2a432:	dded      	ble.n	2a410 <tcc_init+0x78>
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2a434:	2300      	movs	r3, #0
   2a436:	63fb      	str	r3, [r7, #60]	; 0x3c
   2a438:	e019      	b.n	2a46e <tcc_init+0xd6>
		if (!config->pins.enable_wave_out_pin[i]) {
   2a43a:	687a      	ldr	r2, [r7, #4]
   2a43c:	2198      	movs	r1, #152	; 0x98
   2a43e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a440:	18d3      	adds	r3, r2, r3
   2a442:	185b      	adds	r3, r3, r1
   2a444:	781b      	ldrb	r3, [r3, #0]
   2a446:	2201      	movs	r2, #1
   2a448:	4053      	eors	r3, r2
   2a44a:	b2db      	uxtb	r3, r3
   2a44c:	2b00      	cmp	r3, #0
   2a44e:	d10a      	bne.n	2a466 <tcc_init+0xce>
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
   2a450:	233b      	movs	r3, #59	; 0x3b
   2a452:	18fb      	adds	r3, r7, r3
   2a454:	781b      	ldrb	r3, [r3, #0]
   2a456:	4a9e      	ldr	r2, [pc, #632]	; (2a6d0 <tcc_init+0x338>)
   2a458:	5cd3      	ldrb	r3, [r2, r3]
   2a45a:	001a      	movs	r2, r3
   2a45c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a45e:	429a      	cmp	r2, r3
   2a460:	dc02      	bgt.n	2a468 <tcc_init+0xd0>
			return STATUS_ERR_INVALID_ARG;
   2a462:	2317      	movs	r3, #23
   2a464:	e176      	b.n	2a754 <tcc_init+0x3bc>
			continue;
   2a466:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2a468:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a46a:	3301      	adds	r3, #1
   2a46c:	63fb      	str	r3, [r7, #60]	; 0x3c
   2a46e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a470:	2b07      	cmp	r3, #7
   2a472:	dde2      	ble.n	2a43a <tcc_init+0xa2>
		}
	}

	/* CTRLA settings */
	uint32_t ctrla = 0;
   2a474:	2300      	movs	r3, #0
   2a476:	62fb      	str	r3, [r7, #44]	; 0x2c
	status = _tcc_build_ctrla(module_index, config, &ctrla);
   2a478:	2333      	movs	r3, #51	; 0x33
   2a47a:	18fc      	adds	r4, r7, r3
   2a47c:	232c      	movs	r3, #44	; 0x2c
   2a47e:	18fa      	adds	r2, r7, r3
   2a480:	6879      	ldr	r1, [r7, #4]
   2a482:	233b      	movs	r3, #59	; 0x3b
   2a484:	18fb      	adds	r3, r7, r3
   2a486:	781b      	ldrb	r3, [r3, #0]
   2a488:	0018      	movs	r0, r3
   2a48a:	4b92      	ldr	r3, [pc, #584]	; (2a6d4 <tcc_init+0x33c>)
   2a48c:	4798      	blx	r3
   2a48e:	0003      	movs	r3, r0
   2a490:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2a492:	2333      	movs	r3, #51	; 0x33
   2a494:	18fb      	adds	r3, r7, r3
   2a496:	781b      	ldrb	r3, [r3, #0]
   2a498:	2b00      	cmp	r3, #0
   2a49a:	d003      	beq.n	2a4a4 <tcc_init+0x10c>
		return status;
   2a49c:	2333      	movs	r3, #51	; 0x33
   2a49e:	18fb      	adds	r3, r7, r3
   2a4a0:	781b      	ldrb	r3, [r3, #0]
   2a4a2:	e157      	b.n	2a754 <tcc_init+0x3bc>
	}

	/* CTRLB settings */
	uint8_t ctrlb;
	_tcc_build_ctrlb(module_index, config, &ctrlb);
   2a4a4:	232b      	movs	r3, #43	; 0x2b
   2a4a6:	18fa      	adds	r2, r7, r3
   2a4a8:	6879      	ldr	r1, [r7, #4]
   2a4aa:	233b      	movs	r3, #59	; 0x3b
   2a4ac:	18fb      	adds	r3, r7, r3
   2a4ae:	781b      	ldrb	r3, [r3, #0]
   2a4b0:	0018      	movs	r0, r3
   2a4b2:	4b89      	ldr	r3, [pc, #548]	; (2a6d8 <tcc_init+0x340>)
   2a4b4:	4798      	blx	r3

	/* FAULTs settings */
	uint32_t faults[TCC_NUM_FAULTS];

	status = _tcc_build_faults(module_index, config, faults);
   2a4b6:	2333      	movs	r3, #51	; 0x33
   2a4b8:	18fc      	adds	r4, r7, r3
   2a4ba:	2320      	movs	r3, #32
   2a4bc:	18fa      	adds	r2, r7, r3
   2a4be:	6879      	ldr	r1, [r7, #4]
   2a4c0:	233b      	movs	r3, #59	; 0x3b
   2a4c2:	18fb      	adds	r3, r7, r3
   2a4c4:	781b      	ldrb	r3, [r3, #0]
   2a4c6:	0018      	movs	r0, r3
   2a4c8:	4b84      	ldr	r3, [pc, #528]	; (2a6dc <tcc_init+0x344>)
   2a4ca:	4798      	blx	r3
   2a4cc:	0003      	movs	r3, r0
   2a4ce:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2a4d0:	2333      	movs	r3, #51	; 0x33
   2a4d2:	18fb      	adds	r3, r7, r3
   2a4d4:	781b      	ldrb	r3, [r3, #0]
   2a4d6:	2b00      	cmp	r3, #0
   2a4d8:	d003      	beq.n	2a4e2 <tcc_init+0x14a>
		return status;
   2a4da:	2333      	movs	r3, #51	; 0x33
   2a4dc:	18fb      	adds	r3, r7, r3
   2a4de:	781b      	ldrb	r3, [r3, #0]
   2a4e0:	e138      	b.n	2a754 <tcc_init+0x3bc>
	}

	/* DRVCTRL */
	uint32_t drvctrl = 0;
   2a4e2:	2300      	movs	r3, #0
   2a4e4:	61fb      	str	r3, [r7, #28]

	status = _tcc_build_drvctrl(module_index, config, &drvctrl);
   2a4e6:	2333      	movs	r3, #51	; 0x33
   2a4e8:	18fc      	adds	r4, r7, r3
   2a4ea:	231c      	movs	r3, #28
   2a4ec:	18fa      	adds	r2, r7, r3
   2a4ee:	6879      	ldr	r1, [r7, #4]
   2a4f0:	233b      	movs	r3, #59	; 0x3b
   2a4f2:	18fb      	adds	r3, r7, r3
   2a4f4:	781b      	ldrb	r3, [r3, #0]
   2a4f6:	0018      	movs	r0, r3
   2a4f8:	4b79      	ldr	r3, [pc, #484]	; (2a6e0 <tcc_init+0x348>)
   2a4fa:	4798      	blx	r3
   2a4fc:	0003      	movs	r3, r0
   2a4fe:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2a500:	2333      	movs	r3, #51	; 0x33
   2a502:	18fb      	adds	r3, r7, r3
   2a504:	781b      	ldrb	r3, [r3, #0]
   2a506:	2b00      	cmp	r3, #0
   2a508:	d003      	beq.n	2a512 <tcc_init+0x17a>
		return status;
   2a50a:	2333      	movs	r3, #51	; 0x33
   2a50c:	18fb      	adds	r3, r7, r3
   2a50e:	781b      	ldrb	r3, [r3, #0]
   2a510:	e120      	b.n	2a754 <tcc_init+0x3bc>
	}

	/* WAVE */
	uint32_t waves[1];

	status = _tcc_build_waves(module_index, config, waves);
   2a512:	2333      	movs	r3, #51	; 0x33
   2a514:	18fc      	adds	r4, r7, r3
   2a516:	2318      	movs	r3, #24
   2a518:	18fa      	adds	r2, r7, r3
   2a51a:	6879      	ldr	r1, [r7, #4]
   2a51c:	233b      	movs	r3, #59	; 0x3b
   2a51e:	18fb      	adds	r3, r7, r3
   2a520:	781b      	ldrb	r3, [r3, #0]
   2a522:	0018      	movs	r0, r3
   2a524:	4b6f      	ldr	r3, [pc, #444]	; (2a6e4 <tcc_init+0x34c>)
   2a526:	4798      	blx	r3
   2a528:	0003      	movs	r3, r0
   2a52a:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2a52c:	2333      	movs	r3, #51	; 0x33
   2a52e:	18fb      	adds	r3, r7, r3
   2a530:	781b      	ldrb	r3, [r3, #0]
   2a532:	2b00      	cmp	r3, #0
   2a534:	d003      	beq.n	2a53e <tcc_init+0x1a6>
		return status;
   2a536:	2333      	movs	r3, #51	; 0x33
   2a538:	18fb      	adds	r3, r7, r3
   2a53a:	781b      	ldrb	r3, [r3, #0]
   2a53c:	e10a      	b.n	2a754 <tcc_init+0x3bc>
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2a53e:	2300      	movs	r3, #0
   2a540:	63fb      	str	r3, [r7, #60]	; 0x3c
   2a542:	e009      	b.n	2a558 <tcc_init+0x1c0>
		module_inst->callback[i] = NULL;
   2a544:	68fa      	ldr	r2, [r7, #12]
   2a546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a548:	009b      	lsls	r3, r3, #2
   2a54a:	18d3      	adds	r3, r2, r3
   2a54c:	3304      	adds	r3, #4
   2a54e:	2200      	movs	r2, #0
   2a550:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2a552:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a554:	3301      	adds	r3, #1
   2a556:	63fb      	str	r3, [r7, #60]	; 0x3c
   2a558:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a55a:	2b0b      	cmp	r3, #11
   2a55c:	ddf2      	ble.n	2a544 <tcc_init+0x1ac>
	}
	module_inst->register_callback_mask = 0;
   2a55e:	68fb      	ldr	r3, [r7, #12]
   2a560:	2200      	movs	r2, #0
   2a562:	635a      	str	r2, [r3, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
   2a564:	68fb      	ldr	r3, [r7, #12]
   2a566:	2200      	movs	r2, #0
   2a568:	639a      	str	r2, [r3, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
   2a56a:	233b      	movs	r3, #59	; 0x3b
   2a56c:	18fb      	adds	r3, r7, r3
   2a56e:	781a      	ldrb	r2, [r3, #0]
   2a570:	4b5d      	ldr	r3, [pc, #372]	; (2a6e8 <tcc_init+0x350>)
   2a572:	0092      	lsls	r2, r2, #2
   2a574:	68f9      	ldr	r1, [r7, #12]
   2a576:	50d1      	str	r1, [r2, r3]
#endif

	module_inst->hw = hw;
   2a578:	68fb      	ldr	r3, [r7, #12]
   2a57a:	68ba      	ldr	r2, [r7, #8]
   2a57c:	601a      	str	r2, [r3, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
   2a57e:	687b      	ldr	r3, [r7, #4]
   2a580:	22a0      	movs	r2, #160	; 0xa0
   2a582:	5c99      	ldrb	r1, [r3, r2]
   2a584:	68fb      	ldr	r3, [r7, #12]
   2a586:	223c      	movs	r2, #60	; 0x3c
   2a588:	5499      	strb	r1, [r3, r2]

	/* Setup clock for module */
	struct system_gclk_chan_config gclk_chan_config;
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
   2a58a:	2314      	movs	r3, #20
   2a58c:	18fb      	adds	r3, r7, r3
   2a58e:	0018      	movs	r0, r3
   2a590:	4b56      	ldr	r3, [pc, #344]	; (2a6ec <tcc_init+0x354>)
   2a592:	4798      	blx	r3
	gclk_chan_config.source_generator = config->counter.clock_source;
   2a594:	687b      	ldr	r3, [r7, #4]
   2a596:	7a9a      	ldrb	r2, [r3, #10]
   2a598:	2314      	movs	r3, #20
   2a59a:	18fb      	adds	r3, r7, r3
   2a59c:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
   2a59e:	233b      	movs	r3, #59	; 0x3b
   2a5a0:	18fb      	adds	r3, r7, r3
   2a5a2:	781b      	ldrb	r3, [r3, #0]
   2a5a4:	4a52      	ldr	r2, [pc, #328]	; (2a6f0 <tcc_init+0x358>)
   2a5a6:	5cd3      	ldrb	r3, [r2, r3]
   2a5a8:	2214      	movs	r2, #20
   2a5aa:	18ba      	adds	r2, r7, r2
   2a5ac:	0011      	movs	r1, r2
   2a5ae:	0018      	movs	r0, r3
   2a5b0:	4b50      	ldr	r3, [pc, #320]	; (2a6f4 <tcc_init+0x35c>)
   2a5b2:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
   2a5b4:	233b      	movs	r3, #59	; 0x3b
   2a5b6:	18fb      	adds	r3, r7, r3
   2a5b8:	781b      	ldrb	r3, [r3, #0]
   2a5ba:	4a4d      	ldr	r2, [pc, #308]	; (2a6f0 <tcc_init+0x358>)
   2a5bc:	5cd3      	ldrb	r3, [r2, r3]
   2a5be:	0018      	movs	r0, r3
   2a5c0:	4b4d      	ldr	r3, [pc, #308]	; (2a6f8 <tcc_init+0x360>)
   2a5c2:	4798      	blx	r3

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   2a5c4:	2300      	movs	r3, #0
   2a5c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   2a5c8:	e02d      	b.n	2a626 <tcc_init+0x28e>
		if (!config->pins.enable_wave_out_pin[i]) {
   2a5ca:	687a      	ldr	r2, [r7, #4]
   2a5cc:	2198      	movs	r1, #152	; 0x98
   2a5ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a5d0:	18d3      	adds	r3, r2, r3
   2a5d2:	185b      	adds	r3, r3, r1
   2a5d4:	781b      	ldrb	r3, [r3, #0]
   2a5d6:	2201      	movs	r2, #1
   2a5d8:	4053      	eors	r3, r2
   2a5da:	b2db      	uxtb	r3, r3
   2a5dc:	2b00      	cmp	r3, #0
   2a5de:	d11e      	bne.n	2a61e <tcc_init+0x286>
			continue;
		}

		system_pinmux_get_config_defaults(&pin_config);
   2a5e0:	2310      	movs	r3, #16
   2a5e2:	18fb      	adds	r3, r7, r3
   2a5e4:	0018      	movs	r0, r3
   2a5e6:	4b45      	ldr	r3, [pc, #276]	; (2a6fc <tcc_init+0x364>)
   2a5e8:	4798      	blx	r3
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
   2a5ea:	687b      	ldr	r3, [r7, #4]
   2a5ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2a5ee:	321e      	adds	r2, #30
   2a5f0:	0092      	lsls	r2, r2, #2
   2a5f2:	58d3      	ldr	r3, [r2, r3]
   2a5f4:	b2da      	uxtb	r2, r3
   2a5f6:	2310      	movs	r3, #16
   2a5f8:	18fb      	adds	r3, r7, r3
   2a5fa:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
   2a5fc:	2310      	movs	r3, #16
   2a5fe:	18fb      	adds	r3, r7, r3
   2a600:	2201      	movs	r2, #1
   2a602:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pins.wave_out_pin[i], &pin_config);
   2a604:	687b      	ldr	r3, [r7, #4]
   2a606:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2a608:	3216      	adds	r2, #22
   2a60a:	0092      	lsls	r2, r2, #2
   2a60c:	58d3      	ldr	r3, [r2, r3]
		system_pinmux_pin_set_config(
   2a60e:	b2db      	uxtb	r3, r3
   2a610:	2210      	movs	r2, #16
   2a612:	18ba      	adds	r2, r7, r2
   2a614:	0011      	movs	r1, r2
   2a616:	0018      	movs	r0, r3
   2a618:	4b39      	ldr	r3, [pc, #228]	; (2a700 <tcc_init+0x368>)
   2a61a:	4798      	blx	r3
   2a61c:	e000      	b.n	2a620 <tcc_init+0x288>
			continue;
   2a61e:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   2a620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a622:	3301      	adds	r3, #1
   2a624:	63fb      	str	r3, [r7, #60]	; 0x3c
   2a626:	233b      	movs	r3, #59	; 0x3b
   2a628:	18fb      	adds	r3, r7, r3
   2a62a:	781b      	ldrb	r3, [r3, #0]
   2a62c:	4a28      	ldr	r2, [pc, #160]	; (2a6d0 <tcc_init+0x338>)
   2a62e:	5cd3      	ldrb	r3, [r2, r3]
   2a630:	001a      	movs	r2, r3
   2a632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a634:	429a      	cmp	r2, r3
   2a636:	dcc8      	bgt.n	2a5ca <tcc_init+0x232>
	}

	/* Write to registers */

	hw->CTRLA.reg = ctrla;
   2a638:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2a63a:	68bb      	ldr	r3, [r7, #8]
   2a63c:	601a      	str	r2, [r3, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   2a63e:	46c0      	nop			; (mov r8, r8)
   2a640:	68bb      	ldr	r3, [r7, #8]
   2a642:	689b      	ldr	r3, [r3, #8]
   2a644:	2204      	movs	r2, #4
   2a646:	4013      	ands	r3, r2
   2a648:	d1fa      	bne.n	2a640 <tcc_init+0x2a8>
		/* Wait for sync */
	}

	hw->CTRLBCLR.reg = 0xFF;
   2a64a:	68bb      	ldr	r3, [r7, #8]
   2a64c:	22ff      	movs	r2, #255	; 0xff
   2a64e:	711a      	strb	r2, [r3, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   2a650:	46c0      	nop			; (mov r8, r8)
   2a652:	68bb      	ldr	r3, [r7, #8]
   2a654:	689b      	ldr	r3, [r3, #8]
   2a656:	2204      	movs	r2, #4
   2a658:	4013      	ands	r3, r2
   2a65a:	d1fa      	bne.n	2a652 <tcc_init+0x2ba>
		/* Wait for sync */
	}
	hw->CTRLBSET.reg = ctrlb;
   2a65c:	232b      	movs	r3, #43	; 0x2b
   2a65e:	18fb      	adds	r3, r7, r3
   2a660:	781a      	ldrb	r2, [r3, #0]
   2a662:	68bb      	ldr	r3, [r7, #8]
   2a664:	715a      	strb	r2, [r3, #5]

	hw->FCTRLA.reg = faults[0];
   2a666:	2320      	movs	r3, #32
   2a668:	18fb      	adds	r3, r7, r3
   2a66a:	681a      	ldr	r2, [r3, #0]
   2a66c:	68bb      	ldr	r3, [r7, #8]
   2a66e:	60da      	str	r2, [r3, #12]
	hw->FCTRLB.reg = faults[1];
   2a670:	2320      	movs	r3, #32
   2a672:	18fb      	adds	r3, r7, r3
   2a674:	685a      	ldr	r2, [r3, #4]
   2a676:	68bb      	ldr	r3, [r7, #8]
   2a678:	611a      	str	r2, [r3, #16]

	hw->DRVCTRL.reg = drvctrl;
   2a67a:	69fa      	ldr	r2, [r7, #28]
   2a67c:	68bb      	ldr	r3, [r7, #8]
   2a67e:	619a      	str	r2, [r3, #24]

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
   2a680:	46c0      	nop			; (mov r8, r8)
   2a682:	68bb      	ldr	r3, [r7, #8]
   2a684:	689b      	ldr	r3, [r3, #8]
   2a686:	4a1f      	ldr	r2, [pc, #124]	; (2a704 <tcc_init+0x36c>)
   2a688:	4013      	ands	r3, r2
   2a68a:	d1fa      	bne.n	2a682 <tcc_init+0x2ea>
		/* Wait for sync */
	}
#endif
	hw->WAVE.reg = waves[0];
   2a68c:	69ba      	ldr	r2, [r7, #24]
   2a68e:	68bb      	ldr	r3, [r7, #8]
   2a690:	63da      	str	r2, [r3, #60]	; 0x3c

	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
   2a692:	46c0      	nop			; (mov r8, r8)
   2a694:	68bb      	ldr	r3, [r7, #8]
   2a696:	689b      	ldr	r3, [r3, #8]
   2a698:	2210      	movs	r2, #16
   2a69a:	4013      	ands	r3, r2
   2a69c:	d1fa      	bne.n	2a694 <tcc_init+0x2fc>
		/* Wait for sync */
	}
	hw->COUNT.reg = config->counter.count;
   2a69e:	687b      	ldr	r3, [r7, #4]
   2a6a0:	681a      	ldr	r2, [r3, #0]
   2a6a2:	68bb      	ldr	r3, [r7, #8]
   2a6a4:	635a      	str	r2, [r3, #52]	; 0x34

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
   2a6a6:	46c0      	nop			; (mov r8, r8)
   2a6a8:	68bb      	ldr	r3, [r7, #8]
   2a6aa:	689b      	ldr	r3, [r3, #8]
   2a6ac:	4a16      	ldr	r2, [pc, #88]	; (2a708 <tcc_init+0x370>)
   2a6ae:	4013      	ands	r3, r2
   2a6b0:	d1fa      	bne.n	2a6a8 <tcc_init+0x310>
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);
   2a6b2:	687b      	ldr	r3, [r7, #4]
   2a6b4:	685a      	ldr	r2, [r3, #4]
   2a6b6:	68bb      	ldr	r3, [r7, #8]
   2a6b8:	641a      	str	r2, [r3, #64]	; 0x40

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   2a6ba:	2300      	movs	r3, #0
   2a6bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   2a6be:	e03f      	b.n	2a740 <tcc_init+0x3a8>
   2a6c0:	00029d01 	.word	0x00029d01
   2a6c4:	00039f68 	.word	0x00039f68
   2a6c8:	00029c7d 	.word	0x00029c7d
   2a6cc:	00039f74 	.word	0x00039f74
   2a6d0:	00039f84 	.word	0x00039f84
   2a6d4:	0002a00d 	.word	0x0002a00d
   2a6d8:	0002a0b1 	.word	0x0002a0b1
   2a6dc:	0002a10d 	.word	0x0002a10d
   2a6e0:	0002a229 	.word	0x0002a229
   2a6e4:	0002a301 	.word	0x0002a301
   2a6e8:	20005544 	.word	0x20005544
   2a6ec:	00029c65 	.word	0x00029c65
   2a6f0:	00039f64 	.word	0x00039f64
   2a6f4:	0002987d 	.word	0x0002987d
   2a6f8:	000298c1 	.word	0x000298c1
   2a6fc:	00029cd9 	.word	0x00029cd9
   2a700:	00029bdd 	.word	0x00029bdd
   2a704:	00020040 	.word	0x00020040
   2a708:	00040080 	.word	0x00040080
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
		while (hw->SYNCBUSY.reg & (
   2a70c:	46c0      	nop			; (mov r8, r8)
   2a70e:	68bb      	ldr	r3, [r7, #8]
   2a710:	689b      	ldr	r3, [r3, #8]
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
   2a712:	4912      	ldr	r1, [pc, #72]	; (2a75c <tcc_init+0x3c4>)
   2a714:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2a716:	4091      	lsls	r1, r2
   2a718:	000a      	movs	r2, r1
		while (hw->SYNCBUSY.reg & (
   2a71a:	4013      	ands	r3, r2
   2a71c:	d1f7      	bne.n	2a70e <tcc_init+0x376>
			/* Wait for sync */
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
   2a71e:	687a      	ldr	r2, [r7, #4]
   2a720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a722:	3306      	adds	r3, #6
   2a724:	009b      	lsls	r3, r3, #2
   2a726:	18d3      	adds	r3, r2, r3
   2a728:	3304      	adds	r3, #4
   2a72a:	681a      	ldr	r2, [r3, #0]
   2a72c:	68b9      	ldr	r1, [r7, #8]
   2a72e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a730:	3310      	adds	r3, #16
   2a732:	009b      	lsls	r3, r3, #2
   2a734:	18cb      	adds	r3, r1, r3
   2a736:	3304      	adds	r3, #4
   2a738:	601a      	str	r2, [r3, #0]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   2a73a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a73c:	3301      	adds	r3, #1
   2a73e:	63fb      	str	r3, [r7, #60]	; 0x3c
   2a740:	233b      	movs	r3, #59	; 0x3b
   2a742:	18fb      	adds	r3, r7, r3
   2a744:	781b      	ldrb	r3, [r3, #0]
   2a746:	4a06      	ldr	r2, [pc, #24]	; (2a760 <tcc_init+0x3c8>)
   2a748:	5cd3      	ldrb	r3, [r2, r3]
   2a74a:	001a      	movs	r2, r3
   2a74c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a74e:	429a      	cmp	r2, r3
   2a750:	dcdc      	bgt.n	2a70c <tcc_init+0x374>
	}

	return STATUS_OK;
   2a752:	2300      	movs	r3, #0
}
   2a754:	0018      	movs	r0, r3
   2a756:	46bd      	mov	sp, r7
   2a758:	b011      	add	sp, #68	; 0x44
   2a75a:	bd90      	pop	{r4, r7, pc}
   2a75c:	00080100 	.word	0x00080100
   2a760:	00039f80 	.word	0x00039f80

0002a764 <system_interrupt_enable>:
{
   2a764:	b580      	push	{r7, lr}
   2a766:	b082      	sub	sp, #8
   2a768:	af00      	add	r7, sp, #0
   2a76a:	0002      	movs	r2, r0
   2a76c:	1dfb      	adds	r3, r7, #7
   2a76e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   2a770:	4b06      	ldr	r3, [pc, #24]	; (2a78c <system_interrupt_enable+0x28>)
   2a772:	1dfa      	adds	r2, r7, #7
   2a774:	7812      	ldrb	r2, [r2, #0]
   2a776:	0011      	movs	r1, r2
   2a778:	221f      	movs	r2, #31
   2a77a:	400a      	ands	r2, r1
   2a77c:	2101      	movs	r1, #1
   2a77e:	4091      	lsls	r1, r2
   2a780:	000a      	movs	r2, r1
   2a782:	601a      	str	r2, [r3, #0]
}
   2a784:	46c0      	nop			; (mov r8, r8)
   2a786:	46bd      	mov	sp, r7
   2a788:	b002      	add	sp, #8
   2a78a:	bd80      	pop	{r7, pc}
   2a78c:	e000e100 	.word	0xe000e100

0002a790 <_tcc_interrupt_get_interrupt_vector>:
 *
 * \return Interrupt vector for of the given TCC module instance.
 */
static enum system_interrupt_vector _tcc_interrupt_get_interrupt_vector(
		uint32_t inst_num)
{
   2a790:	b580      	push	{r7, lr}
   2a792:	b082      	sub	sp, #8
   2a794:	af00      	add	r7, sp, #0
   2a796:	6078      	str	r0, [r7, #4]
	static uint8_t tcc_interrupt_vectors[TCC_INST_NUM] = {
		MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_VECT_NUM, 0)
	};

	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
   2a798:	4a04      	ldr	r2, [pc, #16]	; (2a7ac <_tcc_interrupt_get_interrupt_vector+0x1c>)
   2a79a:	687b      	ldr	r3, [r7, #4]
   2a79c:	18d3      	adds	r3, r2, r3
   2a79e:	781b      	ldrb	r3, [r3, #0]
   2a7a0:	b25b      	sxtb	r3, r3
}
   2a7a2:	0018      	movs	r0, r3
   2a7a4:	46bd      	mov	sp, r7
   2a7a6:	b002      	add	sp, #8
   2a7a8:	bd80      	pop	{r7, pc}
   2a7aa:	46c0      	nop			; (mov r8, r8)
   2a7ac:	200000e0 	.word	0x200000e0

0002a7b0 <tcc_register_callback>:
 */
enum status_code tcc_register_callback(
		struct tcc_module *const module,
		tcc_callback_t callback_func,
		const enum tcc_callback callback_type)
{
   2a7b0:	b580      	push	{r7, lr}
   2a7b2:	b084      	sub	sp, #16
   2a7b4:	af00      	add	r7, sp, #0
   2a7b6:	60f8      	str	r0, [r7, #12]
   2a7b8:	60b9      	str	r1, [r7, #8]
   2a7ba:	1dfb      	adds	r3, r7, #7
   2a7bc:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   2a7be:	1dfb      	adds	r3, r7, #7
   2a7c0:	781b      	ldrb	r3, [r3, #0]
   2a7c2:	68fa      	ldr	r2, [r7, #12]
   2a7c4:	009b      	lsls	r3, r3, #2
   2a7c6:	18d3      	adds	r3, r2, r3
   2a7c8:	3304      	adds	r3, #4
   2a7ca:	68ba      	ldr	r2, [r7, #8]
   2a7cc:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
   2a7ce:	68fb      	ldr	r3, [r7, #12]
   2a7d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   2a7d2:	1dfb      	adds	r3, r7, #7
   2a7d4:	7819      	ldrb	r1, [r3, #0]
   2a7d6:	4b05      	ldr	r3, [pc, #20]	; (2a7ec <tcc_register_callback+0x3c>)
   2a7d8:	0089      	lsls	r1, r1, #2
   2a7da:	58cb      	ldr	r3, [r1, r3]
   2a7dc:	431a      	orrs	r2, r3
   2a7de:	68fb      	ldr	r3, [r7, #12]
   2a7e0:	635a      	str	r2, [r3, #52]	; 0x34

	return STATUS_OK;
   2a7e2:	2300      	movs	r3, #0
}
   2a7e4:	0018      	movs	r0, r3
   2a7e6:	46bd      	mov	sp, r7
   2a7e8:	b004      	add	sp, #16
   2a7ea:	bd80      	pop	{r7, pc}
   2a7ec:	00039f88 	.word	0x00039f88

0002a7f0 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
   2a7f0:	b580      	push	{r7, lr}
   2a7f2:	b082      	sub	sp, #8
   2a7f4:	af00      	add	r7, sp, #0
   2a7f6:	6078      	str	r0, [r7, #4]
   2a7f8:	000a      	movs	r2, r1
   2a7fa:	1cfb      	adds	r3, r7, #3
   2a7fc:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
   2a7fe:	687b      	ldr	r3, [r7, #4]
   2a800:	681b      	ldr	r3, [r3, #0]
   2a802:	0018      	movs	r0, r3
   2a804:	4b0f      	ldr	r3, [pc, #60]	; (2a844 <tcc_enable_callback+0x54>)
   2a806:	4798      	blx	r3
   2a808:	0003      	movs	r3, r0
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
   2a80a:	0018      	movs	r0, r3
   2a80c:	4b0e      	ldr	r3, [pc, #56]	; (2a848 <tcc_enable_callback+0x58>)
   2a80e:	4798      	blx	r3
   2a810:	0003      	movs	r3, r0
   2a812:	0018      	movs	r0, r3
   2a814:	4b0d      	ldr	r3, [pc, #52]	; (2a84c <tcc_enable_callback+0x5c>)
   2a816:	4798      	blx	r3

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
   2a818:	687b      	ldr	r3, [r7, #4]
   2a81a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   2a81c:	1cfb      	adds	r3, r7, #3
   2a81e:	7819      	ldrb	r1, [r3, #0]
   2a820:	4b0b      	ldr	r3, [pc, #44]	; (2a850 <tcc_enable_callback+0x60>)
   2a822:	0089      	lsls	r1, r1, #2
   2a824:	58cb      	ldr	r3, [r1, r3]
   2a826:	431a      	orrs	r2, r3
   2a828:	687b      	ldr	r3, [r7, #4]
   2a82a:	639a      	str	r2, [r3, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
   2a82c:	687b      	ldr	r3, [r7, #4]
   2a82e:	681b      	ldr	r3, [r3, #0]
   2a830:	1cfa      	adds	r2, r7, #3
   2a832:	7811      	ldrb	r1, [r2, #0]
   2a834:	4a06      	ldr	r2, [pc, #24]	; (2a850 <tcc_enable_callback+0x60>)
   2a836:	0089      	lsls	r1, r1, #2
   2a838:	588a      	ldr	r2, [r1, r2]
   2a83a:	629a      	str	r2, [r3, #40]	; 0x28
}
   2a83c:	46c0      	nop			; (mov r8, r8)
   2a83e:	46bd      	mov	sp, r7
   2a840:	b002      	add	sp, #8
   2a842:	bd80      	pop	{r7, pc}
   2a844:	00029d01 	.word	0x00029d01
   2a848:	0002a791 	.word	0x0002a791
   2a84c:	0002a765 	.word	0x0002a765
   2a850:	00039f88 	.word	0x00039f88

0002a854 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
   2a854:	b580      	push	{r7, lr}
   2a856:	af00      	add	r7, sp, #0
   2a858:	2000      	movs	r0, #0
   2a85a:	4b02      	ldr	r3, [pc, #8]	; (2a864 <TCC0_Handler+0x10>)
   2a85c:	4798      	blx	r3
   2a85e:	46c0      	nop			; (mov r8, r8)
   2a860:	46bd      	mov	sp, r7
   2a862:	bd80      	pop	{r7, pc}
   2a864:	0002a891 	.word	0x0002a891

0002a868 <TCC1_Handler>:
   2a868:	b580      	push	{r7, lr}
   2a86a:	af00      	add	r7, sp, #0
   2a86c:	2001      	movs	r0, #1
   2a86e:	4b02      	ldr	r3, [pc, #8]	; (2a878 <TCC1_Handler+0x10>)
   2a870:	4798      	blx	r3
   2a872:	46c0      	nop			; (mov r8, r8)
   2a874:	46bd      	mov	sp, r7
   2a876:	bd80      	pop	{r7, pc}
   2a878:	0002a891 	.word	0x0002a891

0002a87c <TCC2_Handler>:
   2a87c:	b580      	push	{r7, lr}
   2a87e:	af00      	add	r7, sp, #0
   2a880:	2002      	movs	r0, #2
   2a882:	4b02      	ldr	r3, [pc, #8]	; (2a88c <TCC2_Handler+0x10>)
   2a884:	4798      	blx	r3
   2a886:	46c0      	nop			; (mov r8, r8)
   2a888:	46bd      	mov	sp, r7
   2a88a:	bd80      	pop	{r7, pc}
   2a88c:	0002a891 	.word	0x0002a891

0002a890 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
   2a890:	b580      	push	{r7, lr}
   2a892:	b086      	sub	sp, #24
   2a894:	af00      	add	r7, sp, #0
   2a896:	0002      	movs	r2, r0
   2a898:	1dfb      	adds	r3, r7, #7
   2a89a:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
   2a89c:	1dfb      	adds	r3, r7, #7
   2a89e:	781a      	ldrb	r2, [r3, #0]
	struct tcc_module *module =
   2a8a0:	4b18      	ldr	r3, [pc, #96]	; (2a904 <_tcc_interrupt_handler+0x74>)
   2a8a2:	0092      	lsls	r2, r2, #2
   2a8a4:	58d3      	ldr	r3, [r2, r3]
   2a8a6:	613b      	str	r3, [r7, #16]

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2a8a8:	693b      	ldr	r3, [r7, #16]
   2a8aa:	681b      	ldr	r3, [r3, #0]
   2a8ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
   2a8ae:	693b      	ldr	r3, [r7, #16]
   2a8b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2a8b2:	401a      	ands	r2, r3
			module->enable_callback_mask);
   2a8b4:	693b      	ldr	r3, [r7, #16]
   2a8b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2a8b8:	4013      	ands	r3, r2
   2a8ba:	60fb      	str	r3, [r7, #12]

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2a8bc:	2300      	movs	r3, #0
   2a8be:	617b      	str	r3, [r7, #20]
   2a8c0:	e019      	b.n	2a8f6 <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
   2a8c2:	4b11      	ldr	r3, [pc, #68]	; (2a908 <_tcc_interrupt_handler+0x78>)
   2a8c4:	697a      	ldr	r2, [r7, #20]
   2a8c6:	0092      	lsls	r2, r2, #2
   2a8c8:	58d3      	ldr	r3, [r2, r3]
   2a8ca:	68fa      	ldr	r2, [r7, #12]
   2a8cc:	4013      	ands	r3, r2
   2a8ce:	d00f      	beq.n	2a8f0 <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
   2a8d0:	693a      	ldr	r2, [r7, #16]
   2a8d2:	697b      	ldr	r3, [r7, #20]
   2a8d4:	009b      	lsls	r3, r3, #2
   2a8d6:	18d3      	adds	r3, r2, r3
   2a8d8:	3304      	adds	r3, #4
   2a8da:	681b      	ldr	r3, [r3, #0]
   2a8dc:	693a      	ldr	r2, [r7, #16]
   2a8de:	0010      	movs	r0, r2
   2a8e0:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
   2a8e2:	693b      	ldr	r3, [r7, #16]
   2a8e4:	681b      	ldr	r3, [r3, #0]
   2a8e6:	4a08      	ldr	r2, [pc, #32]	; (2a908 <_tcc_interrupt_handler+0x78>)
   2a8e8:	6979      	ldr	r1, [r7, #20]
   2a8ea:	0089      	lsls	r1, r1, #2
   2a8ec:	588a      	ldr	r2, [r1, r2]
   2a8ee:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2a8f0:	697b      	ldr	r3, [r7, #20]
   2a8f2:	3301      	adds	r3, #1
   2a8f4:	617b      	str	r3, [r7, #20]
   2a8f6:	697b      	ldr	r3, [r7, #20]
   2a8f8:	2b0b      	cmp	r3, #11
   2a8fa:	dde2      	ble.n	2a8c2 <_tcc_interrupt_handler+0x32>
		}
	}
}
   2a8fc:	46c0      	nop			; (mov r8, r8)
   2a8fe:	46bd      	mov	sp, r7
   2a900:	b006      	add	sp, #24
   2a902:	bd80      	pop	{r7, pc}
   2a904:	20005544 	.word	0x20005544
   2a908:	00039f88 	.word	0x00039f88

0002a90c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   2a90c:	b580      	push	{r7, lr}
   2a90e:	b082      	sub	sp, #8
   2a910:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
   2a912:	4b2f      	ldr	r3, [pc, #188]	; (2a9d0 <Reset_Handler+0xc4>)
   2a914:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
   2a916:	4b2f      	ldr	r3, [pc, #188]	; (2a9d4 <Reset_Handler+0xc8>)
   2a918:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
   2a91a:	687a      	ldr	r2, [r7, #4]
   2a91c:	683b      	ldr	r3, [r7, #0]
   2a91e:	429a      	cmp	r2, r3
   2a920:	d00c      	beq.n	2a93c <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
   2a922:	e007      	b.n	2a934 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
   2a924:	683b      	ldr	r3, [r7, #0]
   2a926:	1d1a      	adds	r2, r3, #4
   2a928:	603a      	str	r2, [r7, #0]
   2a92a:	687a      	ldr	r2, [r7, #4]
   2a92c:	1d11      	adds	r1, r2, #4
   2a92e:	6079      	str	r1, [r7, #4]
   2a930:	6812      	ldr	r2, [r2, #0]
   2a932:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
   2a934:	683a      	ldr	r2, [r7, #0]
   2a936:	4b28      	ldr	r3, [pc, #160]	; (2a9d8 <Reset_Handler+0xcc>)
   2a938:	429a      	cmp	r2, r3
   2a93a:	d3f3      	bcc.n	2a924 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   2a93c:	4b27      	ldr	r3, [pc, #156]	; (2a9dc <Reset_Handler+0xd0>)
   2a93e:	603b      	str	r3, [r7, #0]
   2a940:	e004      	b.n	2a94c <Reset_Handler+0x40>
                *pDest++ = 0;
   2a942:	683b      	ldr	r3, [r7, #0]
   2a944:	1d1a      	adds	r2, r3, #4
   2a946:	603a      	str	r2, [r7, #0]
   2a948:	2200      	movs	r2, #0
   2a94a:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
   2a94c:	683a      	ldr	r2, [r7, #0]
   2a94e:	4b24      	ldr	r3, [pc, #144]	; (2a9e0 <Reset_Handler+0xd4>)
   2a950:	429a      	cmp	r2, r3
   2a952:	d3f6      	bcc.n	2a942 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
   2a954:	4b23      	ldr	r3, [pc, #140]	; (2a9e4 <Reset_Handler+0xd8>)
   2a956:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   2a958:	4b23      	ldr	r3, [pc, #140]	; (2a9e8 <Reset_Handler+0xdc>)
   2a95a:	687a      	ldr	r2, [r7, #4]
   2a95c:	21ff      	movs	r1, #255	; 0xff
   2a95e:	438a      	bics	r2, r1
   2a960:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
   2a962:	4a22      	ldr	r2, [pc, #136]	; (2a9ec <Reset_Handler+0xe0>)
   2a964:	2390      	movs	r3, #144	; 0x90
   2a966:	005b      	lsls	r3, r3, #1
   2a968:	2102      	movs	r1, #2
   2a96a:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   2a96c:	4a20      	ldr	r2, [pc, #128]	; (2a9f0 <Reset_Handler+0xe4>)
   2a96e:	78d3      	ldrb	r3, [r2, #3]
   2a970:	2103      	movs	r1, #3
   2a972:	438b      	bics	r3, r1
   2a974:	1c19      	adds	r1, r3, #0
   2a976:	2302      	movs	r3, #2
   2a978:	430b      	orrs	r3, r1
   2a97a:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   2a97c:	4a1c      	ldr	r2, [pc, #112]	; (2a9f0 <Reset_Handler+0xe4>)
   2a97e:	78d3      	ldrb	r3, [r2, #3]
   2a980:	210c      	movs	r1, #12
   2a982:	438b      	bics	r3, r1
   2a984:	1c19      	adds	r1, r3, #0
   2a986:	2308      	movs	r3, #8
   2a988:	430b      	orrs	r3, r1
   2a98a:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
   2a98c:	4a19      	ldr	r2, [pc, #100]	; (2a9f4 <Reset_Handler+0xe8>)
   2a98e:	7b93      	ldrb	r3, [r2, #14]
   2a990:	2130      	movs	r1, #48	; 0x30
   2a992:	438b      	bics	r3, r1
   2a994:	1c19      	adds	r1, r3, #0
   2a996:	2320      	movs	r3, #32
   2a998:	430b      	orrs	r3, r1
   2a99a:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
   2a99c:	4a15      	ldr	r2, [pc, #84]	; (2a9f4 <Reset_Handler+0xe8>)
   2a99e:	7b93      	ldrb	r3, [r2, #14]
   2a9a0:	210c      	movs	r1, #12
   2a9a2:	438b      	bics	r3, r1
   2a9a4:	1c19      	adds	r1, r3, #0
   2a9a6:	2308      	movs	r3, #8
   2a9a8:	430b      	orrs	r3, r1
   2a9aa:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
   2a9ac:	4a11      	ldr	r2, [pc, #68]	; (2a9f4 <Reset_Handler+0xe8>)
   2a9ae:	7b93      	ldrb	r3, [r2, #14]
   2a9b0:	2103      	movs	r1, #3
   2a9b2:	438b      	bics	r3, r1
   2a9b4:	1c19      	adds	r1, r3, #0
   2a9b6:	2302      	movs	r3, #2
   2a9b8:	430b      	orrs	r3, r1
   2a9ba:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
   2a9bc:	4a0e      	ldr	r2, [pc, #56]	; (2a9f8 <Reset_Handler+0xec>)
   2a9be:	6853      	ldr	r3, [r2, #4]
   2a9c0:	2180      	movs	r1, #128	; 0x80
   2a9c2:	430b      	orrs	r3, r1
   2a9c4:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
   2a9c6:	4b0d      	ldr	r3, [pc, #52]	; (2a9fc <Reset_Handler+0xf0>)
   2a9c8:	4798      	blx	r3

        /* Branch to main function */
        main();
   2a9ca:	4b0d      	ldr	r3, [pc, #52]	; (2aa00 <Reset_Handler+0xf4>)
   2a9cc:	4798      	blx	r3

        /* Infinite loop */
        while (1);
   2a9ce:	e7fe      	b.n	2a9ce <Reset_Handler+0xc2>
   2a9d0:	0003ad4c 	.word	0x0003ad4c
   2a9d4:	20000000 	.word	0x20000000
   2a9d8:	200002b8 	.word	0x200002b8
   2a9dc:	200002c0 	.word	0x200002c0
   2a9e0:	200055b4 	.word	0x200055b4
   2a9e4:	00012000 	.word	0x00012000
   2a9e8:	e000ed00 	.word	0xe000ed00
   2a9ec:	41007000 	.word	0x41007000
   2a9f0:	41005000 	.word	0x41005000
   2a9f4:	41004800 	.word	0x41004800
   2a9f8:	41004000 	.word	0x41004000
   2a9fc:	00033fdd 	.word	0x00033fdd
   2aa00:	000320e9 	.word	0x000320e9

0002aa04 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void HardFault_HandlerC(unsigned long *hardfault_args);

void Dummy_Handler(void)
{
   2aa04:	b580      	push	{r7, lr}
   2aa06:	af00      	add	r7, sp, #0
  __asm volatile (
   2aa08:	2004      	movs	r0, #4
   2aa0a:	4671      	mov	r1, lr
   2aa0c:	4208      	tst	r0, r1
   2aa0e:	d002      	beq.n	2aa16 <_MSP>
   2aa10:	f3ef 8009 	mrs	r0, PSP
   2aa14:	e001      	b.n	2aa1a <_HALT>

0002aa16 <_MSP>:
   2aa16:	f3ef 8008 	mrs	r0, MSP

0002aa1a <_HALT>:
   2aa1a:	6941      	ldr	r1, [r0, #20]
   2aa1c:	e004      	b.n	2aa28 <HardFault_HandlerC>
   2aa1e:	be00      	bkpt	0x0000
  "_HALT:              \n"
  " ldr r1,[r0,#20]  \n"
  " b HardFault_HandlerC \n"
  " bkpt #0          \n"
  );
}
   2aa20:	46c0      	nop			; (mov r8, r8)
   2aa22:	46bd      	mov	sp, r7
   2aa24:	bd80      	pop	{r7, pc}
	...

0002aa28 <HardFault_HandlerC>:

void HardFault_HandlerC(unsigned long *hardfault_args) {
   2aa28:	b580      	push	{r7, lr}
   2aa2a:	b090      	sub	sp, #64	; 0x40
   2aa2c:	af00      	add	r7, sp, #0
   2aa2e:	6078      	str	r0, [r7, #4]
	volatile unsigned long _DFSR ;
	volatile unsigned long _AFSR ;
	volatile unsigned long _BFAR ;
	volatile unsigned long _MMAR ;
	
	stacked_r0  = ((unsigned long)hardfault_args[0]) ;
   2aa30:	687b      	ldr	r3, [r7, #4]
   2aa32:	681b      	ldr	r3, [r3, #0]
   2aa34:	63fb      	str	r3, [r7, #60]	; 0x3c
	stacked_r1  = ((unsigned long)hardfault_args[1]) ;
   2aa36:	687b      	ldr	r3, [r7, #4]
   2aa38:	685b      	ldr	r3, [r3, #4]
   2aa3a:	63bb      	str	r3, [r7, #56]	; 0x38
	stacked_r2  = ((unsigned long)hardfault_args[2]) ;
   2aa3c:	687b      	ldr	r3, [r7, #4]
   2aa3e:	689b      	ldr	r3, [r3, #8]
   2aa40:	637b      	str	r3, [r7, #52]	; 0x34
	stacked_r3  = ((unsigned long)hardfault_args[3]) ;
   2aa42:	687b      	ldr	r3, [r7, #4]
   2aa44:	68db      	ldr	r3, [r3, #12]
   2aa46:	633b      	str	r3, [r7, #48]	; 0x30
	stacked_r12 = ((unsigned long)hardfault_args[4]) ;
   2aa48:	687b      	ldr	r3, [r7, #4]
   2aa4a:	691b      	ldr	r3, [r3, #16]
   2aa4c:	62fb      	str	r3, [r7, #44]	; 0x2c
	stacked_lr  = ((unsigned long)hardfault_args[5]) ;
   2aa4e:	687b      	ldr	r3, [r7, #4]
   2aa50:	695b      	ldr	r3, [r3, #20]
   2aa52:	62bb      	str	r3, [r7, #40]	; 0x28
	stacked_pc  = ((unsigned long)hardfault_args[6]) ;
   2aa54:	687b      	ldr	r3, [r7, #4]
   2aa56:	699b      	ldr	r3, [r3, #24]
   2aa58:	627b      	str	r3, [r7, #36]	; 0x24
	stacked_psr = ((unsigned long)hardfault_args[7]) ;
   2aa5a:	687b      	ldr	r3, [r7, #4]
   2aa5c:	69db      	ldr	r3, [r3, #28]
   2aa5e:	623b      	str	r3, [r7, #32]
	
	// Configurable Fault Status Register
	// Consists of MMSR, BFSR and UFSR
	_CFSR = (*((volatile unsigned long *)(0xE000ED28))) ;
   2aa60:	4b0b      	ldr	r3, [pc, #44]	; (2aa90 <HardFault_HandlerC+0x68>)
   2aa62:	681b      	ldr	r3, [r3, #0]
   2aa64:	61fb      	str	r3, [r7, #28]
	
	// Hard Fault Status Register
	_HFSR = (*((volatile unsigned long *)(0xE000ED2C))) ;
   2aa66:	4b0b      	ldr	r3, [pc, #44]	; (2aa94 <HardFault_HandlerC+0x6c>)
   2aa68:	681b      	ldr	r3, [r3, #0]
   2aa6a:	61bb      	str	r3, [r7, #24]
	
	// Debug Fault Status Register
	_DFSR = (*((volatile unsigned long *)(0xE000ED30))) ;
   2aa6c:	4b0a      	ldr	r3, [pc, #40]	; (2aa98 <HardFault_HandlerC+0x70>)
   2aa6e:	681b      	ldr	r3, [r3, #0]
   2aa70:	617b      	str	r3, [r7, #20]
	
	// Auxiliary Fault Status Register
	_AFSR = (*((volatile unsigned long *)(0xE000ED3C))) ;
   2aa72:	4b0a      	ldr	r3, [pc, #40]	; (2aa9c <HardFault_HandlerC+0x74>)
   2aa74:	681b      	ldr	r3, [r3, #0]
   2aa76:	613b      	str	r3, [r7, #16]
	
	// Read the Fault Address Registers. These may not contain valid values.
	// Check BFARVALID/MMARVALID to see if they are valid values
	// MemManage Fault Address Register
	_MMAR = (*((volatile unsigned long *)(0xE000ED34))) ;
   2aa78:	4b09      	ldr	r3, [pc, #36]	; (2aaa0 <HardFault_HandlerC+0x78>)
   2aa7a:	681b      	ldr	r3, [r3, #0]
   2aa7c:	60bb      	str	r3, [r7, #8]
	// Bus Fault Address Register
	_BFAR = (*((volatile unsigned long *)(0xE000ED38))) ;
   2aa7e:	4b09      	ldr	r3, [pc, #36]	; (2aaa4 <HardFault_HandlerC+0x7c>)
   2aa80:	681b      	ldr	r3, [r3, #0]
   2aa82:	60fb      	str	r3, [r7, #12]
	
	__asm("BKPT #0\n") ; // Break into the debugger
   2aa84:	be00      	bkpt	0x0000
	#pragma GCC diagnostic pop
   2aa86:	46c0      	nop			; (mov r8, r8)
   2aa88:	46bd      	mov	sp, r7
   2aa8a:	b010      	add	sp, #64	; 0x40
   2aa8c:	bd80      	pop	{r7, pc}
   2aa8e:	46c0      	nop			; (mov r8, r8)
   2aa90:	e000ed28 	.word	0xe000ed28
   2aa94:	e000ed2c 	.word	0xe000ed2c
   2aa98:	e000ed30 	.word	0xe000ed30
   2aa9c:	e000ed3c 	.word	0xe000ed3c
   2aaa0:	e000ed34 	.word	0xe000ed34
   2aaa4:	e000ed38 	.word	0xe000ed38

0002aaa8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   2aaa8:	b580      	push	{r7, lr}
   2aaaa:	b086      	sub	sp, #24
   2aaac:	af00      	add	r7, sp, #0
   2aaae:	60f8      	str	r0, [r7, #12]
   2aab0:	60b9      	str	r1, [r7, #8]
   2aab2:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   2aab4:	2300      	movs	r3, #0
   2aab6:	617b      	str	r3, [r7, #20]

	if (file != 0) {
   2aab8:	68fb      	ldr	r3, [r7, #12]
   2aaba:	2b00      	cmp	r3, #0
   2aabc:	d012      	beq.n	2aae4 <_read+0x3c>
		return -1;
   2aabe:	2301      	movs	r3, #1
   2aac0:	425b      	negs	r3, r3
   2aac2:	e013      	b.n	2aaec <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   2aac4:	4b0b      	ldr	r3, [pc, #44]	; (2aaf4 <_read+0x4c>)
   2aac6:	681a      	ldr	r2, [r3, #0]
   2aac8:	4b0b      	ldr	r3, [pc, #44]	; (2aaf8 <_read+0x50>)
   2aaca:	681b      	ldr	r3, [r3, #0]
   2aacc:	68b9      	ldr	r1, [r7, #8]
   2aace:	0018      	movs	r0, r3
   2aad0:	4790      	blx	r2
		ptr++;
   2aad2:	68bb      	ldr	r3, [r7, #8]
   2aad4:	3301      	adds	r3, #1
   2aad6:	60bb      	str	r3, [r7, #8]
		nChars++;
   2aad8:	697b      	ldr	r3, [r7, #20]
   2aada:	3301      	adds	r3, #1
   2aadc:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
   2aade:	687b      	ldr	r3, [r7, #4]
   2aae0:	3b01      	subs	r3, #1
   2aae2:	607b      	str	r3, [r7, #4]
   2aae4:	687b      	ldr	r3, [r7, #4]
   2aae6:	2b00      	cmp	r3, #0
   2aae8:	dcec      	bgt.n	2aac4 <_read+0x1c>
	}
	return nChars;
   2aaea:	697b      	ldr	r3, [r7, #20]
}
   2aaec:	0018      	movs	r0, r3
   2aaee:	46bd      	mov	sp, r7
   2aaf0:	b006      	add	sp, #24
   2aaf2:	bd80      	pop	{r7, pc}
   2aaf4:	20005550 	.word	0x20005550
   2aaf8:	20005558 	.word	0x20005558

0002aafc <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
   2aafc:	b580      	push	{r7, lr}
   2aafe:	b086      	sub	sp, #24
   2ab00:	af00      	add	r7, sp, #0
   2ab02:	60f8      	str	r0, [r7, #12]
   2ab04:	60b9      	str	r1, [r7, #8]
   2ab06:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   2ab08:	2300      	movs	r3, #0
   2ab0a:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
   2ab0c:	68fb      	ldr	r3, [r7, #12]
   2ab0e:	2b01      	cmp	r3, #1
   2ab10:	d01d      	beq.n	2ab4e <_write+0x52>
   2ab12:	68fb      	ldr	r3, [r7, #12]
   2ab14:	2b02      	cmp	r3, #2
   2ab16:	d01a      	beq.n	2ab4e <_write+0x52>
   2ab18:	68fb      	ldr	r3, [r7, #12]
   2ab1a:	2b03      	cmp	r3, #3
   2ab1c:	d017      	beq.n	2ab4e <_write+0x52>
		return -1;
   2ab1e:	2301      	movs	r3, #1
   2ab20:	425b      	negs	r3, r3
   2ab22:	e018      	b.n	2ab56 <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
   2ab24:	4b0e      	ldr	r3, [pc, #56]	; (2ab60 <_write+0x64>)
   2ab26:	681a      	ldr	r2, [r3, #0]
   2ab28:	4b0e      	ldr	r3, [pc, #56]	; (2ab64 <_write+0x68>)
   2ab2a:	6818      	ldr	r0, [r3, #0]
   2ab2c:	68bb      	ldr	r3, [r7, #8]
   2ab2e:	1c59      	adds	r1, r3, #1
   2ab30:	60b9      	str	r1, [r7, #8]
   2ab32:	781b      	ldrb	r3, [r3, #0]
   2ab34:	0019      	movs	r1, r3
   2ab36:	4790      	blx	r2
   2ab38:	1e03      	subs	r3, r0, #0
   2ab3a:	da02      	bge.n	2ab42 <_write+0x46>
			return -1;
   2ab3c:	2301      	movs	r3, #1
   2ab3e:	425b      	negs	r3, r3
   2ab40:	e009      	b.n	2ab56 <_write+0x5a>
		}
		++nChars;
   2ab42:	697b      	ldr	r3, [r7, #20]
   2ab44:	3301      	adds	r3, #1
   2ab46:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
   2ab48:	687b      	ldr	r3, [r7, #4]
   2ab4a:	3b01      	subs	r3, #1
   2ab4c:	607b      	str	r3, [r7, #4]
   2ab4e:	687b      	ldr	r3, [r7, #4]
   2ab50:	2b00      	cmp	r3, #0
   2ab52:	d1e7      	bne.n	2ab24 <_write+0x28>
	}
	return nChars;
   2ab54:	697b      	ldr	r3, [r7, #20]
}
   2ab56:	0018      	movs	r0, r3
   2ab58:	46bd      	mov	sp, r7
   2ab5a:	b006      	add	sp, #24
   2ab5c:	bd80      	pop	{r7, pc}
   2ab5e:	46c0      	nop			; (mov r8, r8)
   2ab60:	20005554 	.word	0x20005554
   2ab64:	20005558 	.word	0x20005558

0002ab68 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   2ab68:	b580      	push	{r7, lr}
   2ab6a:	b084      	sub	sp, #16
   2ab6c:	af00      	add	r7, sp, #0
   2ab6e:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   2ab70:	4b0a      	ldr	r3, [pc, #40]	; (2ab9c <_sbrk+0x34>)
   2ab72:	681b      	ldr	r3, [r3, #0]
   2ab74:	2b00      	cmp	r3, #0
   2ab76:	d102      	bne.n	2ab7e <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   2ab78:	4b08      	ldr	r3, [pc, #32]	; (2ab9c <_sbrk+0x34>)
   2ab7a:	4a09      	ldr	r2, [pc, #36]	; (2aba0 <_sbrk+0x38>)
   2ab7c:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   2ab7e:	4b07      	ldr	r3, [pc, #28]	; (2ab9c <_sbrk+0x34>)
   2ab80:	681b      	ldr	r3, [r3, #0]
   2ab82:	60fb      	str	r3, [r7, #12]

	heap += incr;
   2ab84:	4b05      	ldr	r3, [pc, #20]	; (2ab9c <_sbrk+0x34>)
   2ab86:	681a      	ldr	r2, [r3, #0]
   2ab88:	687b      	ldr	r3, [r7, #4]
   2ab8a:	18d2      	adds	r2, r2, r3
   2ab8c:	4b03      	ldr	r3, [pc, #12]	; (2ab9c <_sbrk+0x34>)
   2ab8e:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
   2ab90:	68fb      	ldr	r3, [r7, #12]
}
   2ab92:	0018      	movs	r0, r3
   2ab94:	46bd      	mov	sp, r7
   2ab96:	b004      	add	sp, #16
   2ab98:	bd80      	pop	{r7, pc}
   2ab9a:	46c0      	nop			; (mov r8, r8)
   2ab9c:	20003d10 	.word	0x20003d10
   2aba0:	200075b8 	.word	0x200075b8

0002aba4 <_close>:
{
	return -1;
}

extern int _close(int file)
{
   2aba4:	b580      	push	{r7, lr}
   2aba6:	b082      	sub	sp, #8
   2aba8:	af00      	add	r7, sp, #0
   2abaa:	6078      	str	r0, [r7, #4]
	return -1;
   2abac:	2301      	movs	r3, #1
   2abae:	425b      	negs	r3, r3
}
   2abb0:	0018      	movs	r0, r3
   2abb2:	46bd      	mov	sp, r7
   2abb4:	b002      	add	sp, #8
   2abb6:	bd80      	pop	{r7, pc}

0002abb8 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
   2abb8:	b580      	push	{r7, lr}
   2abba:	b082      	sub	sp, #8
   2abbc:	af00      	add	r7, sp, #0
   2abbe:	6078      	str	r0, [r7, #4]
   2abc0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
   2abc2:	683b      	ldr	r3, [r7, #0]
   2abc4:	2280      	movs	r2, #128	; 0x80
   2abc6:	0192      	lsls	r2, r2, #6
   2abc8:	605a      	str	r2, [r3, #4]

	return 0;
   2abca:	2300      	movs	r3, #0
}
   2abcc:	0018      	movs	r0, r3
   2abce:	46bd      	mov	sp, r7
   2abd0:	b002      	add	sp, #8
   2abd2:	bd80      	pop	{r7, pc}

0002abd4 <_isatty>:

extern int _isatty(int file)
{
   2abd4:	b580      	push	{r7, lr}
   2abd6:	b082      	sub	sp, #8
   2abd8:	af00      	add	r7, sp, #0
   2abda:	6078      	str	r0, [r7, #4]
	return 1;
   2abdc:	2301      	movs	r3, #1
}
   2abde:	0018      	movs	r0, r3
   2abe0:	46bd      	mov	sp, r7
   2abe2:	b002      	add	sp, #8
   2abe4:	bd80      	pop	{r7, pc}

0002abe6 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
   2abe6:	b580      	push	{r7, lr}
   2abe8:	b084      	sub	sp, #16
   2abea:	af00      	add	r7, sp, #0
   2abec:	60f8      	str	r0, [r7, #12]
   2abee:	60b9      	str	r1, [r7, #8]
   2abf0:	607a      	str	r2, [r7, #4]
	return 0;
   2abf2:	2300      	movs	r3, #0
}
   2abf4:	0018      	movs	r0, r3
   2abf6:	46bd      	mov	sp, r7
   2abf8:	b004      	add	sp, #16
   2abfa:	bd80      	pop	{r7, pc}

0002abfc <rtc_calendar_get_time_defaults>:
 *
 * \param[out] time  Time structure to initialize
 */
static inline void rtc_calendar_get_time_defaults(
		struct rtc_calendar_time *const time)
{
   2abfc:	b580      	push	{r7, lr}
   2abfe:	b082      	sub	sp, #8
   2ac00:	af00      	add	r7, sp, #0
   2ac02:	6078      	str	r0, [r7, #4]
	time->second = 0;
   2ac04:	687b      	ldr	r3, [r7, #4]
   2ac06:	2200      	movs	r2, #0
   2ac08:	701a      	strb	r2, [r3, #0]
	time->minute = 0;
   2ac0a:	687b      	ldr	r3, [r7, #4]
   2ac0c:	2200      	movs	r2, #0
   2ac0e:	705a      	strb	r2, [r3, #1]
	time->hour   = 0;
   2ac10:	687b      	ldr	r3, [r7, #4]
   2ac12:	2200      	movs	r2, #0
   2ac14:	709a      	strb	r2, [r3, #2]
	time->pm     = 0;
   2ac16:	687b      	ldr	r3, [r7, #4]
   2ac18:	2200      	movs	r2, #0
   2ac1a:	70da      	strb	r2, [r3, #3]
	time->day    = 1;
   2ac1c:	687b      	ldr	r3, [r7, #4]
   2ac1e:	2201      	movs	r2, #1
   2ac20:	711a      	strb	r2, [r3, #4]
	time->month  = 1;
   2ac22:	687b      	ldr	r3, [r7, #4]
   2ac24:	2201      	movs	r2, #1
   2ac26:	715a      	strb	r2, [r3, #5]
	time->year   = 2000;
   2ac28:	687b      	ldr	r3, [r7, #4]
   2ac2a:	22fa      	movs	r2, #250	; 0xfa
   2ac2c:	00d2      	lsls	r2, r2, #3
   2ac2e:	80da      	strh	r2, [r3, #6]
}
   2ac30:	46c0      	nop			; (mov r8, r8)
   2ac32:	46bd      	mov	sp, r7
   2ac34:	b002      	add	sp, #8
   2ac36:	bd80      	pop	{r7, pc}

0002ac38 <rtc_calendar_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_calendar_get_config_defaults(
		struct rtc_calendar_config *const config)
{
   2ac38:	b580      	push	{r7, lr}
   2ac3a:	b086      	sub	sp, #24
   2ac3c:	af00      	add	r7, sp, #0
   2ac3e:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);
   2ac40:	230c      	movs	r3, #12
   2ac42:	18fb      	adds	r3, r7, r3
   2ac44:	0018      	movs	r0, r3
   2ac46:	4b23      	ldr	r3, [pc, #140]	; (2acd4 <rtc_calendar_get_config_defaults+0x9c>)
   2ac48:	4798      	blx	r3

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
   2ac4a:	687b      	ldr	r3, [r7, #4]
   2ac4c:	22a0      	movs	r2, #160	; 0xa0
   2ac4e:	0112      	lsls	r2, r2, #4
   2ac50:	801a      	strh	r2, [r3, #0]
	config->clear_on_match      = false;
   2ac52:	687b      	ldr	r3, [r7, #4]
   2ac54:	2200      	movs	r2, #0
   2ac56:	709a      	strb	r2, [r3, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
   2ac58:	687b      	ldr	r3, [r7, #4]
   2ac5a:	2200      	movs	r2, #0
   2ac5c:	70da      	strb	r2, [r3, #3]
#endif
	config->clock_24h           = false;
   2ac5e:	687b      	ldr	r3, [r7, #4]
   2ac60:	2200      	movs	r2, #0
   2ac62:	711a      	strb	r2, [r3, #4]
	config->year_init_value     = 2000;
   2ac64:	687b      	ldr	r3, [r7, #4]
   2ac66:	22fa      	movs	r2, #250	; 0xfa
   2ac68:	00d2      	lsls	r2, r2, #3
   2ac6a:	80da      	strh	r2, [r3, #6]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   2ac6c:	2317      	movs	r3, #23
   2ac6e:	18fb      	adds	r3, r7, r3
   2ac70:	2200      	movs	r2, #0
   2ac72:	701a      	strb	r2, [r3, #0]
   2ac74:	e025      	b.n	2acc2 <rtc_calendar_get_config_defaults+0x8a>
		config->alarm[i].time = time;
   2ac76:	2317      	movs	r3, #23
   2ac78:	18fb      	adds	r3, r7, r3
   2ac7a:	781a      	ldrb	r2, [r3, #0]
   2ac7c:	6879      	ldr	r1, [r7, #4]
   2ac7e:	2008      	movs	r0, #8
   2ac80:	0013      	movs	r3, r2
   2ac82:	009b      	lsls	r3, r3, #2
   2ac84:	189b      	adds	r3, r3, r2
   2ac86:	005b      	lsls	r3, r3, #1
   2ac88:	18cb      	adds	r3, r1, r3
   2ac8a:	181a      	adds	r2, r3, r0
   2ac8c:	230c      	movs	r3, #12
   2ac8e:	18fb      	adds	r3, r7, r3
   2ac90:	0010      	movs	r0, r2
   2ac92:	0019      	movs	r1, r3
   2ac94:	2308      	movs	r3, #8
   2ac96:	001a      	movs	r2, r3
   2ac98:	4b0f      	ldr	r3, [pc, #60]	; (2acd8 <rtc_calendar_get_config_defaults+0xa0>)
   2ac9a:	4798      	blx	r3
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   2ac9c:	2317      	movs	r3, #23
   2ac9e:	18fb      	adds	r3, r7, r3
   2aca0:	781a      	ldrb	r2, [r3, #0]
   2aca2:	6879      	ldr	r1, [r7, #4]
   2aca4:	0013      	movs	r3, r2
   2aca6:	009b      	lsls	r3, r3, #2
   2aca8:	189b      	adds	r3, r3, r2
   2acaa:	005b      	lsls	r3, r3, #1
   2acac:	18cb      	adds	r3, r1, r3
   2acae:	3310      	adds	r3, #16
   2acb0:	2206      	movs	r2, #6
   2acb2:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   2acb4:	2317      	movs	r3, #23
   2acb6:	18fb      	adds	r3, r7, r3
   2acb8:	781a      	ldrb	r2, [r3, #0]
   2acba:	2317      	movs	r3, #23
   2acbc:	18fb      	adds	r3, r7, r3
   2acbe:	3201      	adds	r2, #1
   2acc0:	701a      	strb	r2, [r3, #0]
   2acc2:	2317      	movs	r3, #23
   2acc4:	18fb      	adds	r3, r7, r3
   2acc6:	781b      	ldrb	r3, [r3, #0]
   2acc8:	2b00      	cmp	r3, #0
   2acca:	d0d4      	beq.n	2ac76 <rtc_calendar_get_config_defaults+0x3e>
	}
}
   2accc:	46c0      	nop			; (mov r8, r8)
   2acce:	46bd      	mov	sp, r7
   2acd0:	b006      	add	sp, #24
   2acd2:	bd80      	pop	{r7, pc}
   2acd4:	0002abfd 	.word	0x0002abfd
   2acd8:	0003404d 	.word	0x0003404d

0002acdc <configure_rtc_calendar>:
#if (SAM0)
# include <rtc_calendar.h>
struct rtc_module rtc_instance;

static void configure_rtc_calendar(void)
{
   2acdc:	b580      	push	{r7, lr}
   2acde:	b088      	sub	sp, #32
   2ace0:	af00      	add	r7, sp, #0
	/* Initialize RTC in calendar mode. */
	struct rtc_calendar_config config_rtc_calendar;

	rtc_calendar_get_config_defaults(&config_rtc_calendar);
   2ace2:	230c      	movs	r3, #12
   2ace4:	18fb      	adds	r3, r7, r3
   2ace6:	0018      	movs	r0, r3
   2ace8:	4b1a      	ldr	r3, [pc, #104]	; (2ad54 <configure_rtc_calendar+0x78>)
   2acea:	4798      	blx	r3

	struct rtc_calendar_time init_time;
	rtc_calendar_get_time_defaults(&init_time);
   2acec:	1d3b      	adds	r3, r7, #4
   2acee:	0018      	movs	r0, r3
   2acf0:	4b19      	ldr	r3, [pc, #100]	; (2ad58 <configure_rtc_calendar+0x7c>)
   2acf2:	4798      	blx	r3
	init_time.year   = 2014;
   2acf4:	1d3b      	adds	r3, r7, #4
   2acf6:	4a19      	ldr	r2, [pc, #100]	; (2ad5c <configure_rtc_calendar+0x80>)
   2acf8:	80da      	strh	r2, [r3, #6]
	init_time.month  = 1;
   2acfa:	1d3b      	adds	r3, r7, #4
   2acfc:	2201      	movs	r2, #1
   2acfe:	715a      	strb	r2, [r3, #5]
	init_time.day    = 1;
   2ad00:	1d3b      	adds	r3, r7, #4
   2ad02:	2201      	movs	r2, #1
   2ad04:	711a      	strb	r2, [r3, #4]
	init_time.hour   = 0;
   2ad06:	1d3b      	adds	r3, r7, #4
   2ad08:	2200      	movs	r2, #0
   2ad0a:	709a      	strb	r2, [r3, #2]
	init_time.minute = 0;
   2ad0c:	1d3b      	adds	r3, r7, #4
   2ad0e:	2200      	movs	r2, #0
   2ad10:	705a      	strb	r2, [r3, #1]
	init_time.second = 4;
   2ad12:	1d3b      	adds	r3, r7, #4
   2ad14:	2204      	movs	r2, #4
   2ad16:	701a      	strb	r2, [r3, #0]

	config_rtc_calendar.clock_24h     = true;
   2ad18:	230c      	movs	r3, #12
   2ad1a:	18fb      	adds	r3, r7, r3
   2ad1c:	2201      	movs	r2, #1
   2ad1e:	711a      	strb	r2, [r3, #4]
	config_rtc_calendar.alarm[0].time = init_time;
   2ad20:	230c      	movs	r3, #12
   2ad22:	18fb      	adds	r3, r7, r3
   2ad24:	1d3a      	adds	r2, r7, #4
   2ad26:	3308      	adds	r3, #8
   2ad28:	ca03      	ldmia	r2!, {r0, r1}
   2ad2a:	c303      	stmia	r3!, {r0, r1}
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   2ad2c:	230c      	movs	r3, #12
   2ad2e:	18fb      	adds	r3, r7, r3
   2ad30:	2206      	movs	r2, #6
   2ad32:	741a      	strb	r2, [r3, #16]

	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
   2ad34:	230c      	movs	r3, #12
   2ad36:	18fa      	adds	r2, r7, r3
   2ad38:	4909      	ldr	r1, [pc, #36]	; (2ad60 <configure_rtc_calendar+0x84>)
   2ad3a:	4b0a      	ldr	r3, [pc, #40]	; (2ad64 <configure_rtc_calendar+0x88>)
   2ad3c:	0018      	movs	r0, r3
   2ad3e:	4b0a      	ldr	r3, [pc, #40]	; (2ad68 <configure_rtc_calendar+0x8c>)
   2ad40:	4798      	blx	r3

	rtc_calendar_enable(&rtc_instance);
   2ad42:	4b08      	ldr	r3, [pc, #32]	; (2ad64 <configure_rtc_calendar+0x88>)
   2ad44:	0018      	movs	r0, r3
   2ad46:	4b09      	ldr	r3, [pc, #36]	; (2ad6c <configure_rtc_calendar+0x90>)
   2ad48:	4798      	blx	r3
}
   2ad4a:	46c0      	nop			; (mov r8, r8)
   2ad4c:	46bd      	mov	sp, r7
   2ad4e:	b008      	add	sp, #32
   2ad50:	bd80      	pop	{r7, pc}
   2ad52:	46c0      	nop			; (mov r8, r8)
   2ad54:	0002ac39 	.word	0x0002ac39
   2ad58:	0002abfd 	.word	0x0002abfd
   2ad5c:	000007de 	.word	0x000007de
   2ad60:	40001400 	.word	0x40001400
   2ad64:	2000555c 	.word	0x2000555c
   2ad68:	00026819 	.word	0x00026819
   2ad6c:	00026545 	.word	0x00026545

0002ad70 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
   2ad70:	b590      	push	{r4, r7, lr}
   2ad72:	b085      	sub	sp, #20
   2ad74:	af00      	add	r7, sp, #0
   2ad76:	0002      	movs	r2, r0
   2ad78:	1dfb      	adds	r3, r7, #7
   2ad7a:	701a      	strb	r2, [r3, #0]
	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(RTC, 0);
#endif

#if (SAMD20 || SAMD21 || SAMR21)
	configure_rtc_calendar();
   2ad7c:	4b1a      	ldr	r3, [pc, #104]	; (2ade8 <disk_initialize+0x78>)
   2ad7e:	4798      	blx	r3
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
   2ad80:	1dfb      	adds	r3, r7, #7
   2ad82:	781b      	ldrb	r3, [r3, #0]
   2ad84:	2b01      	cmp	r3, #1
   2ad86:	d901      	bls.n	2ad8c <disk_initialize+0x1c>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
   2ad88:	2301      	movs	r3, #1
   2ad8a:	e029      	b.n	2ade0 <disk_initialize+0x70>
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
   2ad8c:	2300      	movs	r3, #0
   2ad8e:	60fb      	str	r3, [r7, #12]
   2ad90:	e010      	b.n	2adb4 <disk_initialize+0x44>
		mem_status = mem_test_unit_ready(drv);
   2ad92:	230b      	movs	r3, #11
   2ad94:	18fc      	adds	r4, r7, r3
   2ad96:	1dfb      	adds	r3, r7, #7
   2ad98:	781b      	ldrb	r3, [r3, #0]
   2ad9a:	0018      	movs	r0, r3
   2ad9c:	4b13      	ldr	r3, [pc, #76]	; (2adec <disk_initialize+0x7c>)
   2ad9e:	4798      	blx	r3
   2ada0:	0003      	movs	r3, r0
   2ada2:	7023      	strb	r3, [r4, #0]
		if (CTRL_BUSY != mem_status) {
   2ada4:	230b      	movs	r3, #11
   2ada6:	18fb      	adds	r3, r7, r3
   2ada8:	781b      	ldrb	r3, [r3, #0]
   2adaa:	2b03      	cmp	r3, #3
   2adac:	d106      	bne.n	2adbc <disk_initialize+0x4c>
	for (i = 0; i < 2; i ++) {
   2adae:	68fb      	ldr	r3, [r7, #12]
   2adb0:	3301      	adds	r3, #1
   2adb2:	60fb      	str	r3, [r7, #12]
   2adb4:	68fb      	ldr	r3, [r7, #12]
   2adb6:	2b01      	cmp	r3, #1
   2adb8:	ddeb      	ble.n	2ad92 <disk_initialize+0x22>
   2adba:	e000      	b.n	2adbe <disk_initialize+0x4e>
			break;
   2adbc:	46c0      	nop			; (mov r8, r8)
		}
	}
	if (mem_status != CTRL_GOOD) {
   2adbe:	230b      	movs	r3, #11
   2adc0:	18fb      	adds	r3, r7, r3
   2adc2:	781b      	ldrb	r3, [r3, #0]
   2adc4:	2b00      	cmp	r3, #0
   2adc6:	d001      	beq.n	2adcc <disk_initialize+0x5c>
		return STA_NOINIT;
   2adc8:	2301      	movs	r3, #1
   2adca:	e009      	b.n	2ade0 <disk_initialize+0x70>
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
   2adcc:	1dfb      	adds	r3, r7, #7
   2adce:	781b      	ldrb	r3, [r3, #0]
   2add0:	0018      	movs	r0, r3
   2add2:	4b07      	ldr	r3, [pc, #28]	; (2adf0 <disk_initialize+0x80>)
   2add4:	4798      	blx	r3
   2add6:	1e03      	subs	r3, r0, #0
   2add8:	d001      	beq.n	2adde <disk_initialize+0x6e>
		return STA_PROTECT;
   2adda:	2304      	movs	r3, #4
   2addc:	e000      	b.n	2ade0 <disk_initialize+0x70>
	}

	/* The memory should already be initialized */
	return 0;
   2adde:	2300      	movs	r3, #0
}
   2ade0:	0018      	movs	r0, r3
   2ade2:	46bd      	mov	sp, r7
   2ade4:	b005      	add	sp, #20
   2ade6:	bd90      	pop	{r4, r7, pc}
   2ade8:	0002acdd 	.word	0x0002acdd
   2adec:	00025a41 	.word	0x00025a41
   2adf0:	00025af9 	.word	0x00025af9

0002adf4 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
   2adf4:	b580      	push	{r7, lr}
   2adf6:	b082      	sub	sp, #8
   2adf8:	af00      	add	r7, sp, #0
   2adfa:	0002      	movs	r2, r0
   2adfc:	1dfb      	adds	r3, r7, #7
   2adfe:	701a      	strb	r2, [r3, #0]
	switch (mem_test_unit_ready(drv)) {
   2ae00:	1dfb      	adds	r3, r7, #7
   2ae02:	781b      	ldrb	r3, [r3, #0]
   2ae04:	0018      	movs	r0, r3
   2ae06:	4b08      	ldr	r3, [pc, #32]	; (2ae28 <disk_status+0x34>)
   2ae08:	4798      	blx	r3
   2ae0a:	1e03      	subs	r3, r0, #0
   2ae0c:	d002      	beq.n	2ae14 <disk_status+0x20>
   2ae0e:	2b02      	cmp	r3, #2
   2ae10:	d002      	beq.n	2ae18 <disk_status+0x24>
   2ae12:	e003      	b.n	2ae1c <disk_status+0x28>
	case CTRL_GOOD:
		return 0;
   2ae14:	2300      	movs	r3, #0
   2ae16:	e002      	b.n	2ae1e <disk_status+0x2a>
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
   2ae18:	2303      	movs	r3, #3
   2ae1a:	e000      	b.n	2ae1e <disk_status+0x2a>
	default:
		return STA_NOINIT;
   2ae1c:	2301      	movs	r3, #1
	}
}
   2ae1e:	0018      	movs	r0, r3
   2ae20:	46bd      	mov	sp, r7
   2ae22:	b002      	add	sp, #8
   2ae24:	bd80      	pop	{r7, pc}
   2ae26:	46c0      	nop			; (mov r8, r8)
   2ae28:	00025a41 	.word	0x00025a41

0002ae2c <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
   2ae2c:	b590      	push	{r4, r7, lr}
   2ae2e:	b089      	sub	sp, #36	; 0x24
   2ae30:	af00      	add	r7, sp, #0
   2ae32:	60b9      	str	r1, [r7, #8]
   2ae34:	607a      	str	r2, [r7, #4]
   2ae36:	0019      	movs	r1, r3
   2ae38:	230f      	movs	r3, #15
   2ae3a:	18fb      	adds	r3, r7, r3
   2ae3c:	1c02      	adds	r2, r0, #0
   2ae3e:	701a      	strb	r2, [r3, #0]
   2ae40:	230e      	movs	r3, #14
   2ae42:	18fb      	adds	r3, r7, r3
   2ae44:	1c0a      	adds	r2, r1, #0
   2ae46:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   2ae48:	231b      	movs	r3, #27
   2ae4a:	18fc      	adds	r4, r7, r3
   2ae4c:	230f      	movs	r3, #15
   2ae4e:	18fb      	adds	r3, r7, r3
   2ae50:	781b      	ldrb	r3, [r3, #0]
   2ae52:	0018      	movs	r0, r3
   2ae54:	4b28      	ldr	r3, [pc, #160]	; (2aef8 <disk_read+0xcc>)
   2ae56:	4798      	blx	r3
   2ae58:	0003      	movs	r3, r0
   2ae5a:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   2ae5c:	231b      	movs	r3, #27
   2ae5e:	18fb      	adds	r3, r7, r3
   2ae60:	781b      	ldrb	r3, [r3, #0]
   2ae62:	2b00      	cmp	r3, #0
   2ae64:	d101      	bne.n	2ae6a <disk_read+0x3e>
		return RES_ERROR;
   2ae66:	2301      	movs	r3, #1
   2ae68:	e042      	b.n	2aef0 <disk_read+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   2ae6a:	2314      	movs	r3, #20
   2ae6c:	18fa      	adds	r2, r7, r3
   2ae6e:	230f      	movs	r3, #15
   2ae70:	18fb      	adds	r3, r7, r3
   2ae72:	781b      	ldrb	r3, [r3, #0]
   2ae74:	0011      	movs	r1, r2
   2ae76:	0018      	movs	r0, r3
   2ae78:	4b20      	ldr	r3, [pc, #128]	; (2aefc <disk_read+0xd0>)
   2ae7a:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   2ae7c:	230e      	movs	r3, #14
   2ae7e:	18fb      	adds	r3, r7, r3
   2ae80:	781b      	ldrb	r3, [r3, #0]
   2ae82:	221b      	movs	r2, #27
   2ae84:	18ba      	adds	r2, r7, r2
   2ae86:	7812      	ldrb	r2, [r2, #0]
   2ae88:	4353      	muls	r3, r2
   2ae8a:	001a      	movs	r2, r3
   2ae8c:	687b      	ldr	r3, [r7, #4]
   2ae8e:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   2ae90:	697b      	ldr	r3, [r7, #20]
   2ae92:	3301      	adds	r3, #1
   2ae94:	211b      	movs	r1, #27
   2ae96:	1879      	adds	r1, r7, r1
   2ae98:	7809      	ldrb	r1, [r1, #0]
   2ae9a:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   2ae9c:	429a      	cmp	r2, r3
   2ae9e:	d901      	bls.n	2aea4 <disk_read+0x78>
		return RES_PARERR;
   2aea0:	2304      	movs	r3, #4
   2aea2:	e025      	b.n	2aef0 <disk_read+0xc4>
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
   2aea4:	2300      	movs	r3, #0
   2aea6:	61fb      	str	r3, [r7, #28]
   2aea8:	e01b      	b.n	2aee2 <disk_read+0xb6>
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   2aeaa:	231b      	movs	r3, #27
   2aeac:	18fb      	adds	r3, r7, r3
   2aeae:	781b      	ldrb	r3, [r3, #0]
   2aeb0:	69fa      	ldr	r2, [r7, #28]
   2aeb2:	435a      	muls	r2, r3
   2aeb4:	687b      	ldr	r3, [r7, #4]
   2aeb6:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   2aeb8:	231b      	movs	r3, #27
   2aeba:	18fb      	adds	r3, r7, r3
   2aebc:	781b      	ldrb	r3, [r3, #0]
   2aebe:	69fa      	ldr	r2, [r7, #28]
   2aec0:	4353      	muls	r3, r2
   2aec2:	025b      	lsls	r3, r3, #9
   2aec4:	68ba      	ldr	r2, [r7, #8]
   2aec6:	18d2      	adds	r2, r2, r3
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   2aec8:	230f      	movs	r3, #15
   2aeca:	18fb      	adds	r3, r7, r3
   2aecc:	781b      	ldrb	r3, [r3, #0]
   2aece:	0018      	movs	r0, r3
   2aed0:	4b0b      	ldr	r3, [pc, #44]	; (2af00 <disk_read+0xd4>)
   2aed2:	4798      	blx	r3
   2aed4:	1e03      	subs	r3, r0, #0
   2aed6:	d001      	beq.n	2aedc <disk_read+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   2aed8:	2301      	movs	r3, #1
   2aeda:	e009      	b.n	2aef0 <disk_read+0xc4>
	for (i = 0; i < count; i++) {
   2aedc:	69fb      	ldr	r3, [r7, #28]
   2aede:	3301      	adds	r3, #1
   2aee0:	61fb      	str	r3, [r7, #28]
   2aee2:	230e      	movs	r3, #14
   2aee4:	18fb      	adds	r3, r7, r3
   2aee6:	781a      	ldrb	r2, [r3, #0]
   2aee8:	69fb      	ldr	r3, [r7, #28]
   2aeea:	429a      	cmp	r2, r3
   2aeec:	d8dd      	bhi.n	2aeaa <disk_read+0x7e>
		}
	}

	return RES_OK;
   2aeee:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   2aef0:	0018      	movs	r0, r3
   2aef2:	46bd      	mov	sp, r7
   2aef4:	b009      	add	sp, #36	; 0x24
   2aef6:	bd90      	pop	{r4, r7, pc}
   2aef8:	00025acd 	.word	0x00025acd
   2aefc:	00025a81 	.word	0x00025a81
   2af00:	00025b41 	.word	0x00025b41

0002af04 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
   2af04:	b590      	push	{r4, r7, lr}
   2af06:	b089      	sub	sp, #36	; 0x24
   2af08:	af00      	add	r7, sp, #0
   2af0a:	60b9      	str	r1, [r7, #8]
   2af0c:	607a      	str	r2, [r7, #4]
   2af0e:	0019      	movs	r1, r3
   2af10:	230f      	movs	r3, #15
   2af12:	18fb      	adds	r3, r7, r3
   2af14:	1c02      	adds	r2, r0, #0
   2af16:	701a      	strb	r2, [r3, #0]
   2af18:	230e      	movs	r3, #14
   2af1a:	18fb      	adds	r3, r7, r3
   2af1c:	1c0a      	adds	r2, r1, #0
   2af1e:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   2af20:	231b      	movs	r3, #27
   2af22:	18fc      	adds	r4, r7, r3
   2af24:	230f      	movs	r3, #15
   2af26:	18fb      	adds	r3, r7, r3
   2af28:	781b      	ldrb	r3, [r3, #0]
   2af2a:	0018      	movs	r0, r3
   2af2c:	4b28      	ldr	r3, [pc, #160]	; (2afd0 <disk_write+0xcc>)
   2af2e:	4798      	blx	r3
   2af30:	0003      	movs	r3, r0
   2af32:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   2af34:	231b      	movs	r3, #27
   2af36:	18fb      	adds	r3, r7, r3
   2af38:	781b      	ldrb	r3, [r3, #0]
   2af3a:	2b00      	cmp	r3, #0
   2af3c:	d101      	bne.n	2af42 <disk_write+0x3e>
		return RES_ERROR;
   2af3e:	2301      	movs	r3, #1
   2af40:	e042      	b.n	2afc8 <disk_write+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   2af42:	2314      	movs	r3, #20
   2af44:	18fa      	adds	r2, r7, r3
   2af46:	230f      	movs	r3, #15
   2af48:	18fb      	adds	r3, r7, r3
   2af4a:	781b      	ldrb	r3, [r3, #0]
   2af4c:	0011      	movs	r1, r2
   2af4e:	0018      	movs	r0, r3
   2af50:	4b20      	ldr	r3, [pc, #128]	; (2afd4 <disk_write+0xd0>)
   2af52:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   2af54:	230e      	movs	r3, #14
   2af56:	18fb      	adds	r3, r7, r3
   2af58:	781b      	ldrb	r3, [r3, #0]
   2af5a:	221b      	movs	r2, #27
   2af5c:	18ba      	adds	r2, r7, r2
   2af5e:	7812      	ldrb	r2, [r2, #0]
   2af60:	4353      	muls	r3, r2
   2af62:	001a      	movs	r2, r3
   2af64:	687b      	ldr	r3, [r7, #4]
   2af66:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   2af68:	697b      	ldr	r3, [r7, #20]
   2af6a:	3301      	adds	r3, #1
   2af6c:	211b      	movs	r1, #27
   2af6e:	1879      	adds	r1, r7, r1
   2af70:	7809      	ldrb	r1, [r1, #0]
   2af72:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   2af74:	429a      	cmp	r2, r3
   2af76:	d901      	bls.n	2af7c <disk_write+0x78>
		return RES_PARERR;
   2af78:	2304      	movs	r3, #4
   2af7a:	e025      	b.n	2afc8 <disk_write+0xc4>
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
   2af7c:	2300      	movs	r3, #0
   2af7e:	61fb      	str	r3, [r7, #28]
   2af80:	e01b      	b.n	2afba <disk_write+0xb6>
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   2af82:	231b      	movs	r3, #27
   2af84:	18fb      	adds	r3, r7, r3
   2af86:	781b      	ldrb	r3, [r3, #0]
   2af88:	69fa      	ldr	r2, [r7, #28]
   2af8a:	435a      	muls	r2, r3
   2af8c:	687b      	ldr	r3, [r7, #4]
   2af8e:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   2af90:	231b      	movs	r3, #27
   2af92:	18fb      	adds	r3, r7, r3
   2af94:	781b      	ldrb	r3, [r3, #0]
   2af96:	69fa      	ldr	r2, [r7, #28]
   2af98:	4353      	muls	r3, r2
   2af9a:	025b      	lsls	r3, r3, #9
   2af9c:	68ba      	ldr	r2, [r7, #8]
   2af9e:	18d2      	adds	r2, r2, r3
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   2afa0:	230f      	movs	r3, #15
   2afa2:	18fb      	adds	r3, r7, r3
   2afa4:	781b      	ldrb	r3, [r3, #0]
   2afa6:	0018      	movs	r0, r3
   2afa8:	4b0b      	ldr	r3, [pc, #44]	; (2afd8 <disk_write+0xd4>)
   2afaa:	4798      	blx	r3
   2afac:	1e03      	subs	r3, r0, #0
   2afae:	d001      	beq.n	2afb4 <disk_write+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   2afb0:	2301      	movs	r3, #1
   2afb2:	e009      	b.n	2afc8 <disk_write+0xc4>
	for (i = 0; i < count; i++) {
   2afb4:	69fb      	ldr	r3, [r7, #28]
   2afb6:	3301      	adds	r3, #1
   2afb8:	61fb      	str	r3, [r7, #28]
   2afba:	230e      	movs	r3, #14
   2afbc:	18fb      	adds	r3, r7, r3
   2afbe:	781a      	ldrb	r2, [r3, #0]
   2afc0:	69fb      	ldr	r3, [r7, #28]
   2afc2:	429a      	cmp	r2, r3
   2afc4:	d8dd      	bhi.n	2af82 <disk_write+0x7e>
		}
	}

	return RES_OK;
   2afc6:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   2afc8:	0018      	movs	r0, r3
   2afca:	46bd      	mov	sp, r7
   2afcc:	b009      	add	sp, #36	; 0x24
   2afce:	bd90      	pop	{r4, r7, pc}
   2afd0:	00025acd 	.word	0x00025acd
   2afd4:	00025a81 	.word	0x00025a81
   2afd8:	00025b95 	.word	0x00025b95

0002afdc <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
   2afdc:	b590      	push	{r4, r7, lr}
   2afde:	b085      	sub	sp, #20
   2afe0:	af00      	add	r7, sp, #0
   2afe2:	603a      	str	r2, [r7, #0]
   2afe4:	1dfb      	adds	r3, r7, #7
   2afe6:	1c02      	adds	r2, r0, #0
   2afe8:	701a      	strb	r2, [r3, #0]
   2afea:	1dbb      	adds	r3, r7, #6
   2afec:	1c0a      	adds	r2, r1, #0
   2afee:	701a      	strb	r2, [r3, #0]
	DRESULT res = RES_PARERR;
   2aff0:	230f      	movs	r3, #15
   2aff2:	18fb      	adds	r3, r7, r3
   2aff4:	2204      	movs	r2, #4
   2aff6:	701a      	strb	r2, [r3, #0]

	switch (ctrl) {
   2aff8:	1dbb      	adds	r3, r7, #6
   2affa:	781b      	ldrb	r3, [r3, #0]
   2affc:	2b01      	cmp	r3, #1
   2affe:	d00f      	beq.n	2b020 <disk_ioctl+0x44>
   2b000:	dc02      	bgt.n	2b008 <disk_ioctl+0x2c>
   2b002:	2b00      	cmp	r3, #0
   2b004:	d044      	beq.n	2b090 <disk_ioctl+0xb4>
   2b006:	e054      	b.n	2b0b2 <disk_ioctl+0xd6>
   2b008:	2b02      	cmp	r3, #2
   2b00a:	d01a      	beq.n	2b042 <disk_ioctl+0x66>
   2b00c:	2b03      	cmp	r3, #3
   2b00e:	d150      	bne.n	2b0b2 <disk_ioctl+0xd6>
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
   2b010:	683b      	ldr	r3, [r7, #0]
   2b012:	2201      	movs	r2, #1
   2b014:	601a      	str	r2, [r3, #0]
		res = RES_OK;
   2b016:	230f      	movs	r3, #15
   2b018:	18fb      	adds	r3, r7, r3
   2b01a:	2200      	movs	r2, #0
   2b01c:	701a      	strb	r2, [r3, #0]
		break;
   2b01e:	e04c      	b.n	2b0ba <disk_ioctl+0xde>
	case GET_SECTOR_COUNT:
	{
		uint32_t ul_last_sector_num;

		/* Check valid address */
		mem_read_capacity(drv, &ul_last_sector_num);
   2b020:	2308      	movs	r3, #8
   2b022:	18fa      	adds	r2, r7, r3
   2b024:	1dfb      	adds	r3, r7, #7
   2b026:	781b      	ldrb	r3, [r3, #0]
   2b028:	0011      	movs	r1, r2
   2b02a:	0018      	movs	r0, r3
   2b02c:	4b26      	ldr	r3, [pc, #152]	; (2b0c8 <disk_ioctl+0xec>)
   2b02e:	4798      	blx	r3

		*(DWORD *)buff = ul_last_sector_num + 1;
   2b030:	68bb      	ldr	r3, [r7, #8]
   2b032:	1c5a      	adds	r2, r3, #1
   2b034:	683b      	ldr	r3, [r7, #0]
   2b036:	601a      	str	r2, [r3, #0]

		res = RES_OK;
   2b038:	230f      	movs	r3, #15
   2b03a:	18fb      	adds	r3, r7, r3
   2b03c:	2200      	movs	r2, #0
   2b03e:	701a      	strb	r2, [r3, #0]
	}
	break;
   2b040:	e03b      	b.n	2b0ba <disk_ioctl+0xde>

	/* Get sectors on the disk (WORD) */
	case GET_SECTOR_SIZE:
	{
		uint8_t uc_sector_size = mem_sector_size(drv);
   2b042:	230e      	movs	r3, #14
   2b044:	18fc      	adds	r4, r7, r3
   2b046:	1dfb      	adds	r3, r7, #7
   2b048:	781b      	ldrb	r3, [r3, #0]
   2b04a:	0018      	movs	r0, r3
   2b04c:	4b1f      	ldr	r3, [pc, #124]	; (2b0cc <disk_ioctl+0xf0>)
   2b04e:	4798      	blx	r3
   2b050:	0003      	movs	r3, r0
   2b052:	7023      	strb	r3, [r4, #0]

		if ((uc_sector_size != SECTOR_SIZE_512) &&
   2b054:	230e      	movs	r3, #14
   2b056:	18fb      	adds	r3, r7, r3
   2b058:	781b      	ldrb	r3, [r3, #0]
   2b05a:	2b01      	cmp	r3, #1
   2b05c:	d010      	beq.n	2b080 <disk_ioctl+0xa4>
   2b05e:	230e      	movs	r3, #14
   2b060:	18fb      	adds	r3, r7, r3
   2b062:	781b      	ldrb	r3, [r3, #0]
   2b064:	2b02      	cmp	r3, #2
   2b066:	d00b      	beq.n	2b080 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_1024) &&
   2b068:	230e      	movs	r3, #14
   2b06a:	18fb      	adds	r3, r7, r3
   2b06c:	781b      	ldrb	r3, [r3, #0]
   2b06e:	2b04      	cmp	r3, #4
   2b070:	d006      	beq.n	2b080 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_2048) &&
   2b072:	230e      	movs	r3, #14
   2b074:	18fb      	adds	r3, r7, r3
   2b076:	781b      	ldrb	r3, [r3, #0]
   2b078:	2b08      	cmp	r3, #8
   2b07a:	d001      	beq.n	2b080 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_4096)) {
			/* The sector size is not supported by the FatFS */
			return RES_ERROR;
   2b07c:	2301      	movs	r3, #1
   2b07e:	e01f      	b.n	2b0c0 <disk_ioctl+0xe4>
		}

		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
   2b080:	683b      	ldr	r3, [r7, #0]
   2b082:	2200      	movs	r2, #0
   2b084:	701a      	strb	r2, [r3, #0]

		res = RES_OK;
   2b086:	230f      	movs	r3, #15
   2b088:	18fb      	adds	r3, r7, r3
   2b08a:	2200      	movs	r2, #0
   2b08c:	701a      	strb	r2, [r3, #0]
	}
	break;
   2b08e:	e014      	b.n	2b0ba <disk_ioctl+0xde>

	/* Make sure that data has been written */
	case CTRL_SYNC:
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
   2b090:	1dfb      	adds	r3, r7, #7
   2b092:	781b      	ldrb	r3, [r3, #0]
   2b094:	0018      	movs	r0, r3
   2b096:	4b0e      	ldr	r3, [pc, #56]	; (2b0d0 <disk_ioctl+0xf4>)
   2b098:	4798      	blx	r3
   2b09a:	1e03      	subs	r3, r0, #0
   2b09c:	d104      	bne.n	2b0a8 <disk_ioctl+0xcc>
			res = RES_OK;
   2b09e:	230f      	movs	r3, #15
   2b0a0:	18fb      	adds	r3, r7, r3
   2b0a2:	2200      	movs	r2, #0
   2b0a4:	701a      	strb	r2, [r3, #0]
		} else {
			res = RES_NOTRDY;
		}
		break;
   2b0a6:	e008      	b.n	2b0ba <disk_ioctl+0xde>
			res = RES_NOTRDY;
   2b0a8:	230f      	movs	r3, #15
   2b0aa:	18fb      	adds	r3, r7, r3
   2b0ac:	2203      	movs	r2, #3
   2b0ae:	701a      	strb	r2, [r3, #0]
		break;
   2b0b0:	e003      	b.n	2b0ba <disk_ioctl+0xde>

	default:
		res = RES_PARERR;
   2b0b2:	230f      	movs	r3, #15
   2b0b4:	18fb      	adds	r3, r7, r3
   2b0b6:	2204      	movs	r2, #4
   2b0b8:	701a      	strb	r2, [r3, #0]
	}

	return res;
   2b0ba:	230f      	movs	r3, #15
   2b0bc:	18fb      	adds	r3, r7, r3
   2b0be:	781b      	ldrb	r3, [r3, #0]
}
   2b0c0:	0018      	movs	r0, r3
   2b0c2:	46bd      	mov	sp, r7
   2b0c4:	b005      	add	sp, #20
   2b0c6:	bd90      	pop	{r4, r7, pc}
   2b0c8:	00025a81 	.word	0x00025a81
   2b0cc:	00025acd 	.word	0x00025acd
   2b0d0:	00025a41 	.word	0x00025a41

0002b0d4 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
   2b0d4:	b580      	push	{r7, lr}
   2b0d6:	b084      	sub	sp, #16
   2b0d8:	af00      	add	r7, sp, #0
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
   2b0da:	1d3a      	adds	r2, r7, #4
   2b0dc:	4b12      	ldr	r3, [pc, #72]	; (2b128 <get_fattime+0x54>)
   2b0de:	0011      	movs	r1, r2
   2b0e0:	0018      	movs	r0, r3
   2b0e2:	4b12      	ldr	r3, [pc, #72]	; (2b12c <get_fattime+0x58>)
   2b0e4:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
   2b0e6:	1d3b      	adds	r3, r7, #4
   2b0e8:	88db      	ldrh	r3, [r3, #6]
   2b0ea:	4a11      	ldr	r2, [pc, #68]	; (2b130 <get_fattime+0x5c>)
   2b0ec:	4694      	mov	ip, r2
   2b0ee:	4463      	add	r3, ip
   2b0f0:	065a      	lsls	r2, r3, #25
			| (current_time.month << 21)
   2b0f2:	1d3b      	adds	r3, r7, #4
   2b0f4:	795b      	ldrb	r3, [r3, #5]
   2b0f6:	055b      	lsls	r3, r3, #21
   2b0f8:	431a      	orrs	r2, r3
			| (current_time.day << 16)
   2b0fa:	1d3b      	adds	r3, r7, #4
   2b0fc:	791b      	ldrb	r3, [r3, #4]
   2b0fe:	041b      	lsls	r3, r3, #16
   2b100:	431a      	orrs	r2, r3
			| (current_time.hour << 11)
   2b102:	1d3b      	adds	r3, r7, #4
   2b104:	789b      	ldrb	r3, [r3, #2]
   2b106:	02db      	lsls	r3, r3, #11
   2b108:	431a      	orrs	r2, r3
			| (current_time.minute << 5)
   2b10a:	1d3b      	adds	r3, r7, #4
   2b10c:	785b      	ldrb	r3, [r3, #1]
   2b10e:	015b      	lsls	r3, r3, #5
   2b110:	4313      	orrs	r3, r2
			| ((current_time.second >> 1) << 0);
   2b112:	1d3a      	adds	r2, r7, #4
   2b114:	7812      	ldrb	r2, [r2, #0]
   2b116:	0852      	lsrs	r2, r2, #1
   2b118:	b2d2      	uxtb	r2, r2
   2b11a:	4313      	orrs	r3, r2
	ul_time = ((current_time.year - 1980) << 25)
   2b11c:	60fb      	str	r3, [r7, #12]

	return ul_time;
   2b11e:	68fb      	ldr	r3, [r7, #12]
}
   2b120:	0018      	movs	r0, r3
   2b122:	46bd      	mov	sp, r7
   2b124:	b004      	add	sp, #16
   2b126:	bd80      	pop	{r7, pc}
   2b128:	2000555c 	.word	0x2000555c
   2b12c:	000268ad 	.word	0x000268ad
   2b130:	fffff844 	.word	0xfffff844

0002b134 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
   2b134:	b580      	push	{r7, lr}
   2b136:	b086      	sub	sp, #24
   2b138:	af00      	add	r7, sp, #0
   2b13a:	60f8      	str	r0, [r7, #12]
   2b13c:	60b9      	str	r1, [r7, #8]
   2b13e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   2b140:	68fb      	ldr	r3, [r7, #12]
   2b142:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
   2b144:	68bb      	ldr	r3, [r7, #8]
   2b146:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
   2b148:	e007      	b.n	2b15a <mem_cpy+0x26>
		*d++ = *s++;
   2b14a:	697b      	ldr	r3, [r7, #20]
   2b14c:	1c5a      	adds	r2, r3, #1
   2b14e:	617a      	str	r2, [r7, #20]
   2b150:	693a      	ldr	r2, [r7, #16]
   2b152:	1c51      	adds	r1, r2, #1
   2b154:	6139      	str	r1, [r7, #16]
   2b156:	7812      	ldrb	r2, [r2, #0]
   2b158:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   2b15a:	687b      	ldr	r3, [r7, #4]
   2b15c:	1e5a      	subs	r2, r3, #1
   2b15e:	607a      	str	r2, [r7, #4]
   2b160:	2b00      	cmp	r3, #0
   2b162:	d1f2      	bne.n	2b14a <mem_cpy+0x16>
}
   2b164:	46c0      	nop			; (mov r8, r8)
   2b166:	46bd      	mov	sp, r7
   2b168:	b006      	add	sp, #24
   2b16a:	bd80      	pop	{r7, pc}

0002b16c <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
   2b16c:	b580      	push	{r7, lr}
   2b16e:	b086      	sub	sp, #24
   2b170:	af00      	add	r7, sp, #0
   2b172:	60f8      	str	r0, [r7, #12]
   2b174:	60b9      	str	r1, [r7, #8]
   2b176:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   2b178:	68fb      	ldr	r3, [r7, #12]
   2b17a:	617b      	str	r3, [r7, #20]

	while (cnt--)
   2b17c:	e005      	b.n	2b18a <mem_set+0x1e>
		*d++ = (BYTE)val;
   2b17e:	697b      	ldr	r3, [r7, #20]
   2b180:	1c5a      	adds	r2, r3, #1
   2b182:	617a      	str	r2, [r7, #20]
   2b184:	68ba      	ldr	r2, [r7, #8]
   2b186:	b2d2      	uxtb	r2, r2
   2b188:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   2b18a:	687b      	ldr	r3, [r7, #4]
   2b18c:	1e5a      	subs	r2, r3, #1
   2b18e:	607a      	str	r2, [r7, #4]
   2b190:	2b00      	cmp	r3, #0
   2b192:	d1f4      	bne.n	2b17e <mem_set+0x12>
}
   2b194:	46c0      	nop			; (mov r8, r8)
   2b196:	46bd      	mov	sp, r7
   2b198:	b006      	add	sp, #24
   2b19a:	bd80      	pop	{r7, pc}

0002b19c <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
   2b19c:	b580      	push	{r7, lr}
   2b19e:	b088      	sub	sp, #32
   2b1a0:	af00      	add	r7, sp, #0
   2b1a2:	60f8      	str	r0, [r7, #12]
   2b1a4:	60b9      	str	r1, [r7, #8]
   2b1a6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
   2b1a8:	68fb      	ldr	r3, [r7, #12]
   2b1aa:	61fb      	str	r3, [r7, #28]
   2b1ac:	68bb      	ldr	r3, [r7, #8]
   2b1ae:	61bb      	str	r3, [r7, #24]
	int r = 0;
   2b1b0:	2300      	movs	r3, #0
   2b1b2:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
   2b1b4:	46c0      	nop			; (mov r8, r8)
   2b1b6:	687b      	ldr	r3, [r7, #4]
   2b1b8:	1e5a      	subs	r2, r3, #1
   2b1ba:	607a      	str	r2, [r7, #4]
   2b1bc:	2b00      	cmp	r3, #0
   2b1be:	d00d      	beq.n	2b1dc <mem_cmp+0x40>
   2b1c0:	69fb      	ldr	r3, [r7, #28]
   2b1c2:	1c5a      	adds	r2, r3, #1
   2b1c4:	61fa      	str	r2, [r7, #28]
   2b1c6:	781b      	ldrb	r3, [r3, #0]
   2b1c8:	0019      	movs	r1, r3
   2b1ca:	69bb      	ldr	r3, [r7, #24]
   2b1cc:	1c5a      	adds	r2, r3, #1
   2b1ce:	61ba      	str	r2, [r7, #24]
   2b1d0:	781b      	ldrb	r3, [r3, #0]
   2b1d2:	1acb      	subs	r3, r1, r3
   2b1d4:	617b      	str	r3, [r7, #20]
   2b1d6:	697b      	ldr	r3, [r7, #20]
   2b1d8:	2b00      	cmp	r3, #0
   2b1da:	d0ec      	beq.n	2b1b6 <mem_cmp+0x1a>
	return r;
   2b1dc:	697b      	ldr	r3, [r7, #20]
}
   2b1de:	0018      	movs	r0, r3
   2b1e0:	46bd      	mov	sp, r7
   2b1e2:	b008      	add	sp, #32
   2b1e4:	bd80      	pop	{r7, pc}

0002b1e6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
   2b1e6:	b580      	push	{r7, lr}
   2b1e8:	b082      	sub	sp, #8
   2b1ea:	af00      	add	r7, sp, #0
   2b1ec:	6078      	str	r0, [r7, #4]
   2b1ee:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
   2b1f0:	e002      	b.n	2b1f8 <chk_chr+0x12>
   2b1f2:	687b      	ldr	r3, [r7, #4]
   2b1f4:	3301      	adds	r3, #1
   2b1f6:	607b      	str	r3, [r7, #4]
   2b1f8:	687b      	ldr	r3, [r7, #4]
   2b1fa:	781b      	ldrb	r3, [r3, #0]
   2b1fc:	2b00      	cmp	r3, #0
   2b1fe:	d005      	beq.n	2b20c <chk_chr+0x26>
   2b200:	687b      	ldr	r3, [r7, #4]
   2b202:	781b      	ldrb	r3, [r3, #0]
   2b204:	001a      	movs	r2, r3
   2b206:	683b      	ldr	r3, [r7, #0]
   2b208:	429a      	cmp	r2, r3
   2b20a:	d1f2      	bne.n	2b1f2 <chk_chr+0xc>
	return *str;
   2b20c:	687b      	ldr	r3, [r7, #4]
   2b20e:	781b      	ldrb	r3, [r3, #0]
}
   2b210:	0018      	movs	r0, r3
   2b212:	46bd      	mov	sp, r7
   2b214:	b002      	add	sp, #8
   2b216:	bd80      	pop	{r7, pc}

0002b218 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
   2b218:	b590      	push	{r4, r7, lr}
   2b21a:	b085      	sub	sp, #20
   2b21c:	af00      	add	r7, sp, #0
   2b21e:	6078      	str	r0, [r7, #4]
   2b220:	6039      	str	r1, [r7, #0]
	DWORD wsect;


	wsect = fs->winsect;
   2b222:	687b      	ldr	r3, [r7, #4]
   2b224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2b226:	60fb      	str	r3, [r7, #12]
	if (wsect != sector) {	/* Changed current window */
   2b228:	68fa      	ldr	r2, [r7, #12]
   2b22a:	683b      	ldr	r3, [r7, #0]
   2b22c:	429a      	cmp	r2, r3
   2b22e:	d04e      	beq.n	2b2ce <move_window+0xb6>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
   2b230:	687b      	ldr	r3, [r7, #4]
   2b232:	791b      	ldrb	r3, [r3, #4]
   2b234:	2b00      	cmp	r3, #0
   2b236:	d037      	beq.n	2b2a8 <move_window+0x90>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   2b238:	687b      	ldr	r3, [r7, #4]
   2b23a:	7858      	ldrb	r0, [r3, #1]
   2b23c:	687b      	ldr	r3, [r7, #4]
   2b23e:	3330      	adds	r3, #48	; 0x30
   2b240:	0019      	movs	r1, r3
   2b242:	68fa      	ldr	r2, [r7, #12]
   2b244:	2301      	movs	r3, #1
   2b246:	4c24      	ldr	r4, [pc, #144]	; (2b2d8 <move_window+0xc0>)
   2b248:	47a0      	blx	r4
   2b24a:	1e03      	subs	r3, r0, #0
   2b24c:	d001      	beq.n	2b252 <move_window+0x3a>
				return FR_DISK_ERR;
   2b24e:	2301      	movs	r3, #1
   2b250:	e03e      	b.n	2b2d0 <move_window+0xb8>
			fs->wflag = 0;
   2b252:	687b      	ldr	r3, [r7, #4]
   2b254:	2200      	movs	r2, #0
   2b256:	711a      	strb	r2, [r3, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   2b258:	687b      	ldr	r3, [r7, #4]
   2b25a:	6a1a      	ldr	r2, [r3, #32]
   2b25c:	687b      	ldr	r3, [r7, #4]
   2b25e:	69db      	ldr	r3, [r3, #28]
   2b260:	18d2      	adds	r2, r2, r3
   2b262:	68fb      	ldr	r3, [r7, #12]
   2b264:	429a      	cmp	r2, r3
   2b266:	d91f      	bls.n	2b2a8 <move_window+0x90>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   2b268:	230b      	movs	r3, #11
   2b26a:	18fb      	adds	r3, r7, r3
   2b26c:	687a      	ldr	r2, [r7, #4]
   2b26e:	78d2      	ldrb	r2, [r2, #3]
   2b270:	701a      	strb	r2, [r3, #0]
   2b272:	e014      	b.n	2b29e <move_window+0x86>
					wsect += fs->fsize;
   2b274:	687b      	ldr	r3, [r7, #4]
   2b276:	69db      	ldr	r3, [r3, #28]
   2b278:	68fa      	ldr	r2, [r7, #12]
   2b27a:	18d3      	adds	r3, r2, r3
   2b27c:	60fb      	str	r3, [r7, #12]
					disk_write(fs->drv, fs->win, wsect, 1);
   2b27e:	687b      	ldr	r3, [r7, #4]
   2b280:	7858      	ldrb	r0, [r3, #1]
   2b282:	687b      	ldr	r3, [r7, #4]
   2b284:	3330      	adds	r3, #48	; 0x30
   2b286:	0019      	movs	r1, r3
   2b288:	68fa      	ldr	r2, [r7, #12]
   2b28a:	2301      	movs	r3, #1
   2b28c:	4c12      	ldr	r4, [pc, #72]	; (2b2d8 <move_window+0xc0>)
   2b28e:	47a0      	blx	r4
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   2b290:	230b      	movs	r3, #11
   2b292:	18fb      	adds	r3, r7, r3
   2b294:	781a      	ldrb	r2, [r3, #0]
   2b296:	230b      	movs	r3, #11
   2b298:	18fb      	adds	r3, r7, r3
   2b29a:	3a01      	subs	r2, #1
   2b29c:	701a      	strb	r2, [r3, #0]
   2b29e:	230b      	movs	r3, #11
   2b2a0:	18fb      	adds	r3, r7, r3
   2b2a2:	781b      	ldrb	r3, [r3, #0]
   2b2a4:	2b01      	cmp	r3, #1
   2b2a6:	d8e5      	bhi.n	2b274 <move_window+0x5c>
				}
			}
		}
#endif
		if (sector) {
   2b2a8:	683b      	ldr	r3, [r7, #0]
   2b2aa:	2b00      	cmp	r3, #0
   2b2ac:	d00f      	beq.n	2b2ce <move_window+0xb6>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   2b2ae:	687b      	ldr	r3, [r7, #4]
   2b2b0:	7858      	ldrb	r0, [r3, #1]
   2b2b2:	687b      	ldr	r3, [r7, #4]
   2b2b4:	3330      	adds	r3, #48	; 0x30
   2b2b6:	0019      	movs	r1, r3
   2b2b8:	683a      	ldr	r2, [r7, #0]
   2b2ba:	2301      	movs	r3, #1
   2b2bc:	4c07      	ldr	r4, [pc, #28]	; (2b2dc <move_window+0xc4>)
   2b2be:	47a0      	blx	r4
   2b2c0:	1e03      	subs	r3, r0, #0
   2b2c2:	d001      	beq.n	2b2c8 <move_window+0xb0>
				return FR_DISK_ERR;
   2b2c4:	2301      	movs	r3, #1
   2b2c6:	e003      	b.n	2b2d0 <move_window+0xb8>
			fs->winsect = sector;
   2b2c8:	687b      	ldr	r3, [r7, #4]
   2b2ca:	683a      	ldr	r2, [r7, #0]
   2b2cc:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}

	return FR_OK;
   2b2ce:	2300      	movs	r3, #0
}
   2b2d0:	0018      	movs	r0, r3
   2b2d2:	46bd      	mov	sp, r7
   2b2d4:	b005      	add	sp, #20
   2b2d6:	bd90      	pop	{r4, r7, pc}
   2b2d8:	0002af05 	.word	0x0002af05
   2b2dc:	0002ae2d 	.word	0x0002ae2d

0002b2e0 <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
   2b2e0:	b590      	push	{r4, r7, lr}
   2b2e2:	b085      	sub	sp, #20
   2b2e4:	af00      	add	r7, sp, #0
   2b2e6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = move_window(fs, 0);
   2b2e8:	230f      	movs	r3, #15
   2b2ea:	18fc      	adds	r4, r7, r3
   2b2ec:	687b      	ldr	r3, [r7, #4]
   2b2ee:	2100      	movs	r1, #0
   2b2f0:	0018      	movs	r0, r3
   2b2f2:	4b52      	ldr	r3, [pc, #328]	; (2b43c <sync+0x15c>)
   2b2f4:	4798      	blx	r3
   2b2f6:	0003      	movs	r3, r0
   2b2f8:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   2b2fa:	230f      	movs	r3, #15
   2b2fc:	18fb      	adds	r3, r7, r3
   2b2fe:	781b      	ldrb	r3, [r3, #0]
   2b300:	2b00      	cmp	r3, #0
   2b302:	d000      	beq.n	2b306 <sync+0x26>
   2b304:	e093      	b.n	2b42e <sync+0x14e>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
   2b306:	687b      	ldr	r3, [r7, #4]
   2b308:	781b      	ldrb	r3, [r3, #0]
   2b30a:	2b03      	cmp	r3, #3
   2b30c:	d000      	beq.n	2b310 <sync+0x30>
   2b30e:	e081      	b.n	2b414 <sync+0x134>
   2b310:	687b      	ldr	r3, [r7, #4]
   2b312:	795b      	ldrb	r3, [r3, #5]
   2b314:	2b00      	cmp	r3, #0
   2b316:	d07d      	beq.n	2b414 <sync+0x134>
			fs->winsect = 0;
   2b318:	687b      	ldr	r3, [r7, #4]
   2b31a:	2200      	movs	r2, #0
   2b31c:	62da      	str	r2, [r3, #44]	; 0x2c
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
   2b31e:	687b      	ldr	r3, [r7, #4]
   2b320:	3330      	adds	r3, #48	; 0x30
   2b322:	0018      	movs	r0, r3
   2b324:	2380      	movs	r3, #128	; 0x80
   2b326:	009b      	lsls	r3, r3, #2
   2b328:	001a      	movs	r2, r3
   2b32a:	2100      	movs	r1, #0
   2b32c:	4b44      	ldr	r3, [pc, #272]	; (2b440 <sync+0x160>)
   2b32e:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
   2b330:	687b      	ldr	r3, [r7, #4]
   2b332:	4a44      	ldr	r2, [pc, #272]	; (2b444 <sync+0x164>)
   2b334:	2155      	movs	r1, #85	; 0x55
   2b336:	5499      	strb	r1, [r3, r2]
   2b338:	687b      	ldr	r3, [r7, #4]
   2b33a:	4a43      	ldr	r2, [pc, #268]	; (2b448 <sync+0x168>)
   2b33c:	21aa      	movs	r1, #170	; 0xaa
   2b33e:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
   2b340:	687b      	ldr	r3, [r7, #4]
   2b342:	2230      	movs	r2, #48	; 0x30
   2b344:	2152      	movs	r1, #82	; 0x52
   2b346:	5499      	strb	r1, [r3, r2]
   2b348:	687b      	ldr	r3, [r7, #4]
   2b34a:	2231      	movs	r2, #49	; 0x31
   2b34c:	2152      	movs	r1, #82	; 0x52
   2b34e:	5499      	strb	r1, [r3, r2]
   2b350:	687b      	ldr	r3, [r7, #4]
   2b352:	2232      	movs	r2, #50	; 0x32
   2b354:	2161      	movs	r1, #97	; 0x61
   2b356:	5499      	strb	r1, [r3, r2]
   2b358:	687b      	ldr	r3, [r7, #4]
   2b35a:	2233      	movs	r2, #51	; 0x33
   2b35c:	2141      	movs	r1, #65	; 0x41
   2b35e:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
   2b360:	687a      	ldr	r2, [r7, #4]
   2b362:	2385      	movs	r3, #133	; 0x85
   2b364:	009b      	lsls	r3, r3, #2
   2b366:	2172      	movs	r1, #114	; 0x72
   2b368:	54d1      	strb	r1, [r2, r3]
   2b36a:	687b      	ldr	r3, [r7, #4]
   2b36c:	4a37      	ldr	r2, [pc, #220]	; (2b44c <sync+0x16c>)
   2b36e:	2172      	movs	r1, #114	; 0x72
   2b370:	5499      	strb	r1, [r3, r2]
   2b372:	687b      	ldr	r3, [r7, #4]
   2b374:	4a36      	ldr	r2, [pc, #216]	; (2b450 <sync+0x170>)
   2b376:	2141      	movs	r1, #65	; 0x41
   2b378:	5499      	strb	r1, [r3, r2]
   2b37a:	687b      	ldr	r3, [r7, #4]
   2b37c:	4a35      	ldr	r2, [pc, #212]	; (2b454 <sync+0x174>)
   2b37e:	2161      	movs	r1, #97	; 0x61
   2b380:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
   2b382:	687b      	ldr	r3, [r7, #4]
   2b384:	691b      	ldr	r3, [r3, #16]
   2b386:	b2d9      	uxtb	r1, r3
   2b388:	687a      	ldr	r2, [r7, #4]
   2b38a:	2386      	movs	r3, #134	; 0x86
   2b38c:	009b      	lsls	r3, r3, #2
   2b38e:	54d1      	strb	r1, [r2, r3]
   2b390:	687b      	ldr	r3, [r7, #4]
   2b392:	691b      	ldr	r3, [r3, #16]
   2b394:	b29b      	uxth	r3, r3
   2b396:	0a1b      	lsrs	r3, r3, #8
   2b398:	b29b      	uxth	r3, r3
   2b39a:	b2d9      	uxtb	r1, r3
   2b39c:	687b      	ldr	r3, [r7, #4]
   2b39e:	4a2e      	ldr	r2, [pc, #184]	; (2b458 <sync+0x178>)
   2b3a0:	5499      	strb	r1, [r3, r2]
   2b3a2:	687b      	ldr	r3, [r7, #4]
   2b3a4:	691b      	ldr	r3, [r3, #16]
   2b3a6:	0c1b      	lsrs	r3, r3, #16
   2b3a8:	b2d9      	uxtb	r1, r3
   2b3aa:	687b      	ldr	r3, [r7, #4]
   2b3ac:	4a2b      	ldr	r2, [pc, #172]	; (2b45c <sync+0x17c>)
   2b3ae:	5499      	strb	r1, [r3, r2]
   2b3b0:	687b      	ldr	r3, [r7, #4]
   2b3b2:	691b      	ldr	r3, [r3, #16]
   2b3b4:	0e1b      	lsrs	r3, r3, #24
   2b3b6:	b2d9      	uxtb	r1, r3
   2b3b8:	687b      	ldr	r3, [r7, #4]
   2b3ba:	4a29      	ldr	r2, [pc, #164]	; (2b460 <sync+0x180>)
   2b3bc:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
   2b3be:	687b      	ldr	r3, [r7, #4]
   2b3c0:	68db      	ldr	r3, [r3, #12]
   2b3c2:	b2d9      	uxtb	r1, r3
   2b3c4:	687a      	ldr	r2, [r7, #4]
   2b3c6:	2387      	movs	r3, #135	; 0x87
   2b3c8:	009b      	lsls	r3, r3, #2
   2b3ca:	54d1      	strb	r1, [r2, r3]
   2b3cc:	687b      	ldr	r3, [r7, #4]
   2b3ce:	68db      	ldr	r3, [r3, #12]
   2b3d0:	b29b      	uxth	r3, r3
   2b3d2:	0a1b      	lsrs	r3, r3, #8
   2b3d4:	b29b      	uxth	r3, r3
   2b3d6:	b2d9      	uxtb	r1, r3
   2b3d8:	687b      	ldr	r3, [r7, #4]
   2b3da:	4a22      	ldr	r2, [pc, #136]	; (2b464 <sync+0x184>)
   2b3dc:	5499      	strb	r1, [r3, r2]
   2b3de:	687b      	ldr	r3, [r7, #4]
   2b3e0:	68db      	ldr	r3, [r3, #12]
   2b3e2:	0c1b      	lsrs	r3, r3, #16
   2b3e4:	b2d9      	uxtb	r1, r3
   2b3e6:	687b      	ldr	r3, [r7, #4]
   2b3e8:	4a1f      	ldr	r2, [pc, #124]	; (2b468 <sync+0x188>)
   2b3ea:	5499      	strb	r1, [r3, r2]
   2b3ec:	687b      	ldr	r3, [r7, #4]
   2b3ee:	68db      	ldr	r3, [r3, #12]
   2b3f0:	0e1b      	lsrs	r3, r3, #24
   2b3f2:	b2d9      	uxtb	r1, r3
   2b3f4:	687b      	ldr	r3, [r7, #4]
   2b3f6:	4a1d      	ldr	r2, [pc, #116]	; (2b46c <sync+0x18c>)
   2b3f8:	5499      	strb	r1, [r3, r2]
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
   2b3fa:	687b      	ldr	r3, [r7, #4]
   2b3fc:	7858      	ldrb	r0, [r3, #1]
   2b3fe:	687b      	ldr	r3, [r7, #4]
   2b400:	3330      	adds	r3, #48	; 0x30
   2b402:	0019      	movs	r1, r3
   2b404:	687b      	ldr	r3, [r7, #4]
   2b406:	695a      	ldr	r2, [r3, #20]
   2b408:	2301      	movs	r3, #1
   2b40a:	4c19      	ldr	r4, [pc, #100]	; (2b470 <sync+0x190>)
   2b40c:	47a0      	blx	r4
			fs->fsi_flag = 0;
   2b40e:	687b      	ldr	r3, [r7, #4]
   2b410:	2200      	movs	r2, #0
   2b412:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
   2b414:	687b      	ldr	r3, [r7, #4]
   2b416:	785b      	ldrb	r3, [r3, #1]
   2b418:	2200      	movs	r2, #0
   2b41a:	2100      	movs	r1, #0
   2b41c:	0018      	movs	r0, r3
   2b41e:	4b15      	ldr	r3, [pc, #84]	; (2b474 <sync+0x194>)
   2b420:	4798      	blx	r3
   2b422:	1e03      	subs	r3, r0, #0
   2b424:	d003      	beq.n	2b42e <sync+0x14e>
			res = FR_DISK_ERR;
   2b426:	230f      	movs	r3, #15
   2b428:	18fb      	adds	r3, r7, r3
   2b42a:	2201      	movs	r2, #1
   2b42c:	701a      	strb	r2, [r3, #0]
	}

	return res;
   2b42e:	230f      	movs	r3, #15
   2b430:	18fb      	adds	r3, r7, r3
   2b432:	781b      	ldrb	r3, [r3, #0]
}
   2b434:	0018      	movs	r0, r3
   2b436:	46bd      	mov	sp, r7
   2b438:	b005      	add	sp, #20
   2b43a:	bd90      	pop	{r4, r7, pc}
   2b43c:	0002b219 	.word	0x0002b219
   2b440:	0002b16d 	.word	0x0002b16d
   2b444:	0000022e 	.word	0x0000022e
   2b448:	0000022f 	.word	0x0000022f
   2b44c:	00000215 	.word	0x00000215
   2b450:	00000216 	.word	0x00000216
   2b454:	00000217 	.word	0x00000217
   2b458:	00000219 	.word	0x00000219
   2b45c:	0000021a 	.word	0x0000021a
   2b460:	0000021b 	.word	0x0000021b
   2b464:	0000021d 	.word	0x0000021d
   2b468:	0000021e 	.word	0x0000021e
   2b46c:	0000021f 	.word	0x0000021f
   2b470:	0002af05 	.word	0x0002af05
   2b474:	0002afdd 	.word	0x0002afdd

0002b478 <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
   2b478:	b580      	push	{r7, lr}
   2b47a:	b082      	sub	sp, #8
   2b47c:	af00      	add	r7, sp, #0
   2b47e:	6078      	str	r0, [r7, #4]
   2b480:	6039      	str	r1, [r7, #0]
	clst -= 2;
   2b482:	683b      	ldr	r3, [r7, #0]
   2b484:	3b02      	subs	r3, #2
   2b486:	603b      	str	r3, [r7, #0]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   2b488:	687b      	ldr	r3, [r7, #4]
   2b48a:	699b      	ldr	r3, [r3, #24]
   2b48c:	1e9a      	subs	r2, r3, #2
   2b48e:	683b      	ldr	r3, [r7, #0]
   2b490:	429a      	cmp	r2, r3
   2b492:	d801      	bhi.n	2b498 <clust2sect+0x20>
   2b494:	2300      	movs	r3, #0
   2b496:	e007      	b.n	2b4a8 <clust2sect+0x30>
	return clst * fs->csize + fs->database;
   2b498:	687b      	ldr	r3, [r7, #4]
   2b49a:	789b      	ldrb	r3, [r3, #2]
   2b49c:	001a      	movs	r2, r3
   2b49e:	683b      	ldr	r3, [r7, #0]
   2b4a0:	435a      	muls	r2, r3
   2b4a2:	687b      	ldr	r3, [r7, #4]
   2b4a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2b4a6:	18d3      	adds	r3, r2, r3
}
   2b4a8:	0018      	movs	r0, r3
   2b4aa:	46bd      	mov	sp, r7
   2b4ac:	b002      	add	sp, #8
   2b4ae:	bd80      	pop	{r7, pc}

0002b4b0 <get_fat>:

static DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
   2b4b0:	b580      	push	{r7, lr}
   2b4b2:	b086      	sub	sp, #24
   2b4b4:	af00      	add	r7, sp, #0
   2b4b6:	6078      	str	r0, [r7, #4]
   2b4b8:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   2b4ba:	683b      	ldr	r3, [r7, #0]
   2b4bc:	2b01      	cmp	r3, #1
   2b4be:	d904      	bls.n	2b4ca <get_fat+0x1a>
   2b4c0:	687b      	ldr	r3, [r7, #4]
   2b4c2:	699a      	ldr	r2, [r3, #24]
   2b4c4:	683b      	ldr	r3, [r7, #0]
   2b4c6:	429a      	cmp	r2, r3
   2b4c8:	d801      	bhi.n	2b4ce <get_fat+0x1e>
		return 1;
   2b4ca:	2301      	movs	r3, #1
   2b4cc:	e09f      	b.n	2b60e <get_fat+0x15e>

	switch (fs->fs_type) {
   2b4ce:	687b      	ldr	r3, [r7, #4]
   2b4d0:	781b      	ldrb	r3, [r3, #0]
   2b4d2:	2b02      	cmp	r3, #2
   2b4d4:	d048      	beq.n	2b568 <get_fat+0xb8>
   2b4d6:	2b03      	cmp	r3, #3
   2b4d8:	d067      	beq.n	2b5aa <get_fat+0xfa>
   2b4da:	2b01      	cmp	r3, #1
   2b4dc:	d000      	beq.n	2b4e0 <get_fat+0x30>
   2b4de:	e094      	b.n	2b60a <get_fat+0x15a>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
   2b4e0:	683b      	ldr	r3, [r7, #0]
   2b4e2:	617b      	str	r3, [r7, #20]
   2b4e4:	697b      	ldr	r3, [r7, #20]
   2b4e6:	085b      	lsrs	r3, r3, #1
   2b4e8:	697a      	ldr	r2, [r7, #20]
   2b4ea:	18d3      	adds	r3, r2, r3
   2b4ec:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2b4ee:	687b      	ldr	r3, [r7, #4]
   2b4f0:	6a1a      	ldr	r2, [r3, #32]
   2b4f2:	697b      	ldr	r3, [r7, #20]
   2b4f4:	0a5b      	lsrs	r3, r3, #9
   2b4f6:	18d2      	adds	r2, r2, r3
   2b4f8:	687b      	ldr	r3, [r7, #4]
   2b4fa:	0011      	movs	r1, r2
   2b4fc:	0018      	movs	r0, r3
   2b4fe:	4b46      	ldr	r3, [pc, #280]	; (2b618 <get_fat+0x168>)
   2b500:	4798      	blx	r3
   2b502:	1e03      	subs	r3, r0, #0
   2b504:	d000      	beq.n	2b508 <get_fat+0x58>
   2b506:	e079      	b.n	2b5fc <get_fat+0x14c>
		wc = fs->win[bc % SS(fs)]; bc++;
   2b508:	697b      	ldr	r3, [r7, #20]
   2b50a:	05db      	lsls	r3, r3, #23
   2b50c:	0ddb      	lsrs	r3, r3, #23
   2b50e:	687a      	ldr	r2, [r7, #4]
   2b510:	2130      	movs	r1, #48	; 0x30
   2b512:	18d3      	adds	r3, r2, r3
   2b514:	185b      	adds	r3, r3, r1
   2b516:	781b      	ldrb	r3, [r3, #0]
   2b518:	613b      	str	r3, [r7, #16]
   2b51a:	697b      	ldr	r3, [r7, #20]
   2b51c:	3301      	adds	r3, #1
   2b51e:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2b520:	687b      	ldr	r3, [r7, #4]
   2b522:	6a1a      	ldr	r2, [r3, #32]
   2b524:	697b      	ldr	r3, [r7, #20]
   2b526:	0a5b      	lsrs	r3, r3, #9
   2b528:	18d2      	adds	r2, r2, r3
   2b52a:	687b      	ldr	r3, [r7, #4]
   2b52c:	0011      	movs	r1, r2
   2b52e:	0018      	movs	r0, r3
   2b530:	4b39      	ldr	r3, [pc, #228]	; (2b618 <get_fat+0x168>)
   2b532:	4798      	blx	r3
   2b534:	1e03      	subs	r3, r0, #0
   2b536:	d163      	bne.n	2b600 <get_fat+0x150>
		wc |= fs->win[bc % SS(fs)] << 8;
   2b538:	697b      	ldr	r3, [r7, #20]
   2b53a:	05db      	lsls	r3, r3, #23
   2b53c:	0ddb      	lsrs	r3, r3, #23
   2b53e:	687a      	ldr	r2, [r7, #4]
   2b540:	2130      	movs	r1, #48	; 0x30
   2b542:	18d3      	adds	r3, r2, r3
   2b544:	185b      	adds	r3, r3, r1
   2b546:	781b      	ldrb	r3, [r3, #0]
   2b548:	021b      	lsls	r3, r3, #8
   2b54a:	001a      	movs	r2, r3
   2b54c:	693b      	ldr	r3, [r7, #16]
   2b54e:	4313      	orrs	r3, r2
   2b550:	613b      	str	r3, [r7, #16]
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
   2b552:	683b      	ldr	r3, [r7, #0]
   2b554:	2201      	movs	r2, #1
   2b556:	4013      	ands	r3, r2
   2b558:	d002      	beq.n	2b560 <get_fat+0xb0>
   2b55a:	693b      	ldr	r3, [r7, #16]
   2b55c:	091b      	lsrs	r3, r3, #4
   2b55e:	e056      	b.n	2b60e <get_fat+0x15e>
   2b560:	693b      	ldr	r3, [r7, #16]
   2b562:	051b      	lsls	r3, r3, #20
   2b564:	0d1b      	lsrs	r3, r3, #20
   2b566:	e052      	b.n	2b60e <get_fat+0x15e>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   2b568:	687b      	ldr	r3, [r7, #4]
   2b56a:	6a1a      	ldr	r2, [r3, #32]
   2b56c:	683b      	ldr	r3, [r7, #0]
   2b56e:	0a1b      	lsrs	r3, r3, #8
   2b570:	18d2      	adds	r2, r2, r3
   2b572:	687b      	ldr	r3, [r7, #4]
   2b574:	0011      	movs	r1, r2
   2b576:	0018      	movs	r0, r3
   2b578:	4b27      	ldr	r3, [pc, #156]	; (2b618 <get_fat+0x168>)
   2b57a:	4798      	blx	r3
   2b57c:	1e03      	subs	r3, r0, #0
   2b57e:	d141      	bne.n	2b604 <get_fat+0x154>
		p = &fs->win[clst * 2 % SS(fs)];
   2b580:	683b      	ldr	r3, [r7, #0]
   2b582:	005a      	lsls	r2, r3, #1
   2b584:	23ff      	movs	r3, #255	; 0xff
   2b586:	005b      	lsls	r3, r3, #1
   2b588:	4013      	ands	r3, r2
   2b58a:	3330      	adds	r3, #48	; 0x30
   2b58c:	687a      	ldr	r2, [r7, #4]
   2b58e:	18d3      	adds	r3, r2, r3
   2b590:	60fb      	str	r3, [r7, #12]
		return LD_WORD(p);
   2b592:	68fb      	ldr	r3, [r7, #12]
   2b594:	3301      	adds	r3, #1
   2b596:	781b      	ldrb	r3, [r3, #0]
   2b598:	021b      	lsls	r3, r3, #8
   2b59a:	b21a      	sxth	r2, r3
   2b59c:	68fb      	ldr	r3, [r7, #12]
   2b59e:	781b      	ldrb	r3, [r3, #0]
   2b5a0:	b21b      	sxth	r3, r3
   2b5a2:	4313      	orrs	r3, r2
   2b5a4:	b21b      	sxth	r3, r3
   2b5a6:	b29b      	uxth	r3, r3
   2b5a8:	e031      	b.n	2b60e <get_fat+0x15e>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   2b5aa:	687b      	ldr	r3, [r7, #4]
   2b5ac:	6a1a      	ldr	r2, [r3, #32]
   2b5ae:	683b      	ldr	r3, [r7, #0]
   2b5b0:	09db      	lsrs	r3, r3, #7
   2b5b2:	18d2      	adds	r2, r2, r3
   2b5b4:	687b      	ldr	r3, [r7, #4]
   2b5b6:	0011      	movs	r1, r2
   2b5b8:	0018      	movs	r0, r3
   2b5ba:	4b17      	ldr	r3, [pc, #92]	; (2b618 <get_fat+0x168>)
   2b5bc:	4798      	blx	r3
   2b5be:	1e03      	subs	r3, r0, #0
   2b5c0:	d122      	bne.n	2b608 <get_fat+0x158>
		p = &fs->win[clst * 4 % SS(fs)];
   2b5c2:	683b      	ldr	r3, [r7, #0]
   2b5c4:	009a      	lsls	r2, r3, #2
   2b5c6:	23fe      	movs	r3, #254	; 0xfe
   2b5c8:	005b      	lsls	r3, r3, #1
   2b5ca:	4013      	ands	r3, r2
   2b5cc:	3330      	adds	r3, #48	; 0x30
   2b5ce:	687a      	ldr	r2, [r7, #4]
   2b5d0:	18d3      	adds	r3, r2, r3
   2b5d2:	60fb      	str	r3, [r7, #12]
		return LD_DWORD(p) & 0x0FFFFFFF;
   2b5d4:	68fb      	ldr	r3, [r7, #12]
   2b5d6:	3303      	adds	r3, #3
   2b5d8:	781b      	ldrb	r3, [r3, #0]
   2b5da:	061a      	lsls	r2, r3, #24
   2b5dc:	68fb      	ldr	r3, [r7, #12]
   2b5de:	3302      	adds	r3, #2
   2b5e0:	781b      	ldrb	r3, [r3, #0]
   2b5e2:	041b      	lsls	r3, r3, #16
   2b5e4:	4313      	orrs	r3, r2
   2b5e6:	68fa      	ldr	r2, [r7, #12]
   2b5e8:	3201      	adds	r2, #1
   2b5ea:	7812      	ldrb	r2, [r2, #0]
   2b5ec:	0212      	lsls	r2, r2, #8
   2b5ee:	4313      	orrs	r3, r2
   2b5f0:	68fa      	ldr	r2, [r7, #12]
   2b5f2:	7812      	ldrb	r2, [r2, #0]
   2b5f4:	4313      	orrs	r3, r2
   2b5f6:	011b      	lsls	r3, r3, #4
   2b5f8:	091b      	lsrs	r3, r3, #4
   2b5fa:	e008      	b.n	2b60e <get_fat+0x15e>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2b5fc:	46c0      	nop			; (mov r8, r8)
   2b5fe:	e004      	b.n	2b60a <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2b600:	46c0      	nop			; (mov r8, r8)
   2b602:	e002      	b.n	2b60a <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   2b604:	46c0      	nop			; (mov r8, r8)
   2b606:	e000      	b.n	2b60a <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   2b608:	46c0      	nop			; (mov r8, r8)
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   2b60a:	2301      	movs	r3, #1
   2b60c:	425b      	negs	r3, r3
}
   2b60e:	0018      	movs	r0, r3
   2b610:	46bd      	mov	sp, r7
   2b612:	b006      	add	sp, #24
   2b614:	bd80      	pop	{r7, pc}
   2b616:	46c0      	nop			; (mov r8, r8)
   2b618:	0002b219 	.word	0x0002b219

0002b61c <put_fat>:
static FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
   2b61c:	b590      	push	{r4, r7, lr}
   2b61e:	b089      	sub	sp, #36	; 0x24
   2b620:	af00      	add	r7, sp, #0
   2b622:	60f8      	str	r0, [r7, #12]
   2b624:	60b9      	str	r1, [r7, #8]
   2b626:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   2b628:	68bb      	ldr	r3, [r7, #8]
   2b62a:	2b01      	cmp	r3, #1
   2b62c:	d904      	bls.n	2b638 <put_fat+0x1c>
   2b62e:	68fb      	ldr	r3, [r7, #12]
   2b630:	699a      	ldr	r2, [r3, #24]
   2b632:	68bb      	ldr	r3, [r7, #8]
   2b634:	429a      	cmp	r2, r3
   2b636:	d804      	bhi.n	2b642 <put_fat+0x26>
		res = FR_INT_ERR;
   2b638:	231f      	movs	r3, #31
   2b63a:	18fb      	adds	r3, r7, r3
   2b63c:	2202      	movs	r2, #2
   2b63e:	701a      	strb	r2, [r3, #0]
   2b640:	e100      	b.n	2b844 <put_fat+0x228>

	} else {
		switch (fs->fs_type) {
   2b642:	68fb      	ldr	r3, [r7, #12]
   2b644:	781b      	ldrb	r3, [r3, #0]
   2b646:	2b02      	cmp	r3, #2
   2b648:	d100      	bne.n	2b64c <put_fat+0x30>
   2b64a:	e078      	b.n	2b73e <put_fat+0x122>
   2b64c:	2b03      	cmp	r3, #3
   2b64e:	d100      	bne.n	2b652 <put_fat+0x36>
   2b650:	e09e      	b.n	2b790 <put_fat+0x174>
   2b652:	2b01      	cmp	r3, #1
   2b654:	d000      	beq.n	2b658 <put_fat+0x3c>
   2b656:	e0e6      	b.n	2b826 <put_fat+0x20a>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
   2b658:	68bb      	ldr	r3, [r7, #8]
   2b65a:	61bb      	str	r3, [r7, #24]
   2b65c:	69bb      	ldr	r3, [r7, #24]
   2b65e:	085b      	lsrs	r3, r3, #1
   2b660:	69ba      	ldr	r2, [r7, #24]
   2b662:	18d3      	adds	r3, r2, r3
   2b664:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   2b666:	68fb      	ldr	r3, [r7, #12]
   2b668:	6a1a      	ldr	r2, [r3, #32]
   2b66a:	69bb      	ldr	r3, [r7, #24]
   2b66c:	0a5b      	lsrs	r3, r3, #9
   2b66e:	18d2      	adds	r2, r2, r3
   2b670:	231f      	movs	r3, #31
   2b672:	18fc      	adds	r4, r7, r3
   2b674:	68fb      	ldr	r3, [r7, #12]
   2b676:	0011      	movs	r1, r2
   2b678:	0018      	movs	r0, r3
   2b67a:	4b76      	ldr	r3, [pc, #472]	; (2b854 <put_fat+0x238>)
   2b67c:	4798      	blx	r3
   2b67e:	0003      	movs	r3, r0
   2b680:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2b682:	231f      	movs	r3, #31
   2b684:	18fb      	adds	r3, r7, r3
   2b686:	781b      	ldrb	r3, [r3, #0]
   2b688:	2b00      	cmp	r3, #0
   2b68a:	d000      	beq.n	2b68e <put_fat+0x72>
   2b68c:	e0d0      	b.n	2b830 <put_fat+0x214>
			p = &fs->win[bc % SS(fs)];
   2b68e:	69bb      	ldr	r3, [r7, #24]
   2b690:	05db      	lsls	r3, r3, #23
   2b692:	0ddb      	lsrs	r3, r3, #23
   2b694:	3330      	adds	r3, #48	; 0x30
   2b696:	68fa      	ldr	r2, [r7, #12]
   2b698:	18d3      	adds	r3, r2, r3
   2b69a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   2b69c:	68bb      	ldr	r3, [r7, #8]
   2b69e:	2201      	movs	r2, #1
   2b6a0:	4013      	ands	r3, r2
   2b6a2:	d00d      	beq.n	2b6c0 <put_fat+0xa4>
   2b6a4:	697b      	ldr	r3, [r7, #20]
   2b6a6:	781b      	ldrb	r3, [r3, #0]
   2b6a8:	b25b      	sxtb	r3, r3
   2b6aa:	220f      	movs	r2, #15
   2b6ac:	4013      	ands	r3, r2
   2b6ae:	b25a      	sxtb	r2, r3
   2b6b0:	687b      	ldr	r3, [r7, #4]
   2b6b2:	b2db      	uxtb	r3, r3
   2b6b4:	011b      	lsls	r3, r3, #4
   2b6b6:	b25b      	sxtb	r3, r3
   2b6b8:	4313      	orrs	r3, r2
   2b6ba:	b25b      	sxtb	r3, r3
   2b6bc:	b2db      	uxtb	r3, r3
   2b6be:	e001      	b.n	2b6c4 <put_fat+0xa8>
   2b6c0:	687b      	ldr	r3, [r7, #4]
   2b6c2:	b2db      	uxtb	r3, r3
   2b6c4:	697a      	ldr	r2, [r7, #20]
   2b6c6:	7013      	strb	r3, [r2, #0]
			bc++;
   2b6c8:	69bb      	ldr	r3, [r7, #24]
   2b6ca:	3301      	adds	r3, #1
   2b6cc:	61bb      	str	r3, [r7, #24]
			fs->wflag = 1;
   2b6ce:	68fb      	ldr	r3, [r7, #12]
   2b6d0:	2201      	movs	r2, #1
   2b6d2:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   2b6d4:	68fb      	ldr	r3, [r7, #12]
   2b6d6:	6a1a      	ldr	r2, [r3, #32]
   2b6d8:	69bb      	ldr	r3, [r7, #24]
   2b6da:	0a5b      	lsrs	r3, r3, #9
   2b6dc:	18d2      	adds	r2, r2, r3
   2b6de:	231f      	movs	r3, #31
   2b6e0:	18fc      	adds	r4, r7, r3
   2b6e2:	68fb      	ldr	r3, [r7, #12]
   2b6e4:	0011      	movs	r1, r2
   2b6e6:	0018      	movs	r0, r3
   2b6e8:	4b5a      	ldr	r3, [pc, #360]	; (2b854 <put_fat+0x238>)
   2b6ea:	4798      	blx	r3
   2b6ec:	0003      	movs	r3, r0
   2b6ee:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2b6f0:	231f      	movs	r3, #31
   2b6f2:	18fb      	adds	r3, r7, r3
   2b6f4:	781b      	ldrb	r3, [r3, #0]
   2b6f6:	2b00      	cmp	r3, #0
   2b6f8:	d000      	beq.n	2b6fc <put_fat+0xe0>
   2b6fa:	e09b      	b.n	2b834 <put_fat+0x218>
			p = &fs->win[bc % SS(fs)];
   2b6fc:	69bb      	ldr	r3, [r7, #24]
   2b6fe:	05db      	lsls	r3, r3, #23
   2b700:	0ddb      	lsrs	r3, r3, #23
   2b702:	3330      	adds	r3, #48	; 0x30
   2b704:	68fa      	ldr	r2, [r7, #12]
   2b706:	18d3      	adds	r3, r2, r3
   2b708:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
   2b70a:	68bb      	ldr	r3, [r7, #8]
   2b70c:	2201      	movs	r2, #1
   2b70e:	4013      	ands	r3, r2
   2b710:	d003      	beq.n	2b71a <put_fat+0xfe>
   2b712:	687b      	ldr	r3, [r7, #4]
   2b714:	091b      	lsrs	r3, r3, #4
   2b716:	b2db      	uxtb	r3, r3
   2b718:	e00e      	b.n	2b738 <put_fat+0x11c>
   2b71a:	697b      	ldr	r3, [r7, #20]
   2b71c:	781b      	ldrb	r3, [r3, #0]
   2b71e:	b25b      	sxtb	r3, r3
   2b720:	220f      	movs	r2, #15
   2b722:	4393      	bics	r3, r2
   2b724:	b25a      	sxtb	r2, r3
   2b726:	687b      	ldr	r3, [r7, #4]
   2b728:	0a1b      	lsrs	r3, r3, #8
   2b72a:	b25b      	sxtb	r3, r3
   2b72c:	210f      	movs	r1, #15
   2b72e:	400b      	ands	r3, r1
   2b730:	b25b      	sxtb	r3, r3
   2b732:	4313      	orrs	r3, r2
   2b734:	b25b      	sxtb	r3, r3
   2b736:	b2db      	uxtb	r3, r3
   2b738:	697a      	ldr	r2, [r7, #20]
   2b73a:	7013      	strb	r3, [r2, #0]
			break;
   2b73c:	e07f      	b.n	2b83e <put_fat+0x222>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
   2b73e:	68fb      	ldr	r3, [r7, #12]
   2b740:	6a1a      	ldr	r2, [r3, #32]
   2b742:	68bb      	ldr	r3, [r7, #8]
   2b744:	0a1b      	lsrs	r3, r3, #8
   2b746:	18d2      	adds	r2, r2, r3
   2b748:	231f      	movs	r3, #31
   2b74a:	18fc      	adds	r4, r7, r3
   2b74c:	68fb      	ldr	r3, [r7, #12]
   2b74e:	0011      	movs	r1, r2
   2b750:	0018      	movs	r0, r3
   2b752:	4b40      	ldr	r3, [pc, #256]	; (2b854 <put_fat+0x238>)
   2b754:	4798      	blx	r3
   2b756:	0003      	movs	r3, r0
   2b758:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2b75a:	231f      	movs	r3, #31
   2b75c:	18fb      	adds	r3, r7, r3
   2b75e:	781b      	ldrb	r3, [r3, #0]
   2b760:	2b00      	cmp	r3, #0
   2b762:	d169      	bne.n	2b838 <put_fat+0x21c>
			p = &fs->win[clst * 2 % SS(fs)];
   2b764:	68bb      	ldr	r3, [r7, #8]
   2b766:	005a      	lsls	r2, r3, #1
   2b768:	23ff      	movs	r3, #255	; 0xff
   2b76a:	005b      	lsls	r3, r3, #1
   2b76c:	4013      	ands	r3, r2
   2b76e:	3330      	adds	r3, #48	; 0x30
   2b770:	68fa      	ldr	r2, [r7, #12]
   2b772:	18d3      	adds	r3, r2, r3
   2b774:	617b      	str	r3, [r7, #20]
			ST_WORD(p, (WORD)val);
   2b776:	687b      	ldr	r3, [r7, #4]
   2b778:	b2da      	uxtb	r2, r3
   2b77a:	697b      	ldr	r3, [r7, #20]
   2b77c:	701a      	strb	r2, [r3, #0]
   2b77e:	697b      	ldr	r3, [r7, #20]
   2b780:	3301      	adds	r3, #1
   2b782:	687a      	ldr	r2, [r7, #4]
   2b784:	b292      	uxth	r2, r2
   2b786:	0a12      	lsrs	r2, r2, #8
   2b788:	b292      	uxth	r2, r2
   2b78a:	b2d2      	uxtb	r2, r2
   2b78c:	701a      	strb	r2, [r3, #0]
			break;
   2b78e:	e056      	b.n	2b83e <put_fat+0x222>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
   2b790:	68fb      	ldr	r3, [r7, #12]
   2b792:	6a1a      	ldr	r2, [r3, #32]
   2b794:	68bb      	ldr	r3, [r7, #8]
   2b796:	09db      	lsrs	r3, r3, #7
   2b798:	18d2      	adds	r2, r2, r3
   2b79a:	231f      	movs	r3, #31
   2b79c:	18fc      	adds	r4, r7, r3
   2b79e:	68fb      	ldr	r3, [r7, #12]
   2b7a0:	0011      	movs	r1, r2
   2b7a2:	0018      	movs	r0, r3
   2b7a4:	4b2b      	ldr	r3, [pc, #172]	; (2b854 <put_fat+0x238>)
   2b7a6:	4798      	blx	r3
   2b7a8:	0003      	movs	r3, r0
   2b7aa:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2b7ac:	231f      	movs	r3, #31
   2b7ae:	18fb      	adds	r3, r7, r3
   2b7b0:	781b      	ldrb	r3, [r3, #0]
   2b7b2:	2b00      	cmp	r3, #0
   2b7b4:	d142      	bne.n	2b83c <put_fat+0x220>
			p = &fs->win[clst * 4 % SS(fs)];
   2b7b6:	68bb      	ldr	r3, [r7, #8]
   2b7b8:	009a      	lsls	r2, r3, #2
   2b7ba:	23fe      	movs	r3, #254	; 0xfe
   2b7bc:	005b      	lsls	r3, r3, #1
   2b7be:	4013      	ands	r3, r2
   2b7c0:	3330      	adds	r3, #48	; 0x30
   2b7c2:	68fa      	ldr	r2, [r7, #12]
   2b7c4:	18d3      	adds	r3, r2, r3
   2b7c6:	617b      	str	r3, [r7, #20]
			val |= LD_DWORD(p) & 0xF0000000;
   2b7c8:	697b      	ldr	r3, [r7, #20]
   2b7ca:	3303      	adds	r3, #3
   2b7cc:	781b      	ldrb	r3, [r3, #0]
   2b7ce:	061a      	lsls	r2, r3, #24
   2b7d0:	697b      	ldr	r3, [r7, #20]
   2b7d2:	3302      	adds	r3, #2
   2b7d4:	781b      	ldrb	r3, [r3, #0]
   2b7d6:	041b      	lsls	r3, r3, #16
   2b7d8:	4313      	orrs	r3, r2
   2b7da:	697a      	ldr	r2, [r7, #20]
   2b7dc:	3201      	adds	r2, #1
   2b7de:	7812      	ldrb	r2, [r2, #0]
   2b7e0:	0212      	lsls	r2, r2, #8
   2b7e2:	4313      	orrs	r3, r2
   2b7e4:	697a      	ldr	r2, [r7, #20]
   2b7e6:	7812      	ldrb	r2, [r2, #0]
   2b7e8:	4313      	orrs	r3, r2
   2b7ea:	0f1b      	lsrs	r3, r3, #28
   2b7ec:	071b      	lsls	r3, r3, #28
   2b7ee:	687a      	ldr	r2, [r7, #4]
   2b7f0:	4313      	orrs	r3, r2
   2b7f2:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
   2b7f4:	687b      	ldr	r3, [r7, #4]
   2b7f6:	b2da      	uxtb	r2, r3
   2b7f8:	697b      	ldr	r3, [r7, #20]
   2b7fa:	701a      	strb	r2, [r3, #0]
   2b7fc:	697b      	ldr	r3, [r7, #20]
   2b7fe:	3301      	adds	r3, #1
   2b800:	687a      	ldr	r2, [r7, #4]
   2b802:	b292      	uxth	r2, r2
   2b804:	0a12      	lsrs	r2, r2, #8
   2b806:	b292      	uxth	r2, r2
   2b808:	b2d2      	uxtb	r2, r2
   2b80a:	701a      	strb	r2, [r3, #0]
   2b80c:	697b      	ldr	r3, [r7, #20]
   2b80e:	3302      	adds	r3, #2
   2b810:	687a      	ldr	r2, [r7, #4]
   2b812:	0c12      	lsrs	r2, r2, #16
   2b814:	b2d2      	uxtb	r2, r2
   2b816:	701a      	strb	r2, [r3, #0]
   2b818:	697b      	ldr	r3, [r7, #20]
   2b81a:	3303      	adds	r3, #3
   2b81c:	687a      	ldr	r2, [r7, #4]
   2b81e:	0e12      	lsrs	r2, r2, #24
   2b820:	b2d2      	uxtb	r2, r2
   2b822:	701a      	strb	r2, [r3, #0]
			break;
   2b824:	e00b      	b.n	2b83e <put_fat+0x222>

		default :
			res = FR_INT_ERR;
   2b826:	231f      	movs	r3, #31
   2b828:	18fb      	adds	r3, r7, r3
   2b82a:	2202      	movs	r2, #2
   2b82c:	701a      	strb	r2, [r3, #0]
   2b82e:	e006      	b.n	2b83e <put_fat+0x222>
			if (res != FR_OK) break;
   2b830:	46c0      	nop			; (mov r8, r8)
   2b832:	e004      	b.n	2b83e <put_fat+0x222>
			if (res != FR_OK) break;
   2b834:	46c0      	nop			; (mov r8, r8)
   2b836:	e002      	b.n	2b83e <put_fat+0x222>
			if (res != FR_OK) break;
   2b838:	46c0      	nop			; (mov r8, r8)
   2b83a:	e000      	b.n	2b83e <put_fat+0x222>
			if (res != FR_OK) break;
   2b83c:	46c0      	nop			; (mov r8, r8)
		}
		fs->wflag = 1;
   2b83e:	68fb      	ldr	r3, [r7, #12]
   2b840:	2201      	movs	r2, #1
   2b842:	711a      	strb	r2, [r3, #4]
	}

	return res;
   2b844:	231f      	movs	r3, #31
   2b846:	18fb      	adds	r3, r7, r3
   2b848:	781b      	ldrb	r3, [r3, #0]
}
   2b84a:	0018      	movs	r0, r3
   2b84c:	46bd      	mov	sp, r7
   2b84e:	b009      	add	sp, #36	; 0x24
   2b850:	bd90      	pop	{r4, r7, pc}
   2b852:	46c0      	nop			; (mov r8, r8)
   2b854:	0002b219 	.word	0x0002b219

0002b858 <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
   2b858:	b590      	push	{r4, r7, lr}
   2b85a:	b085      	sub	sp, #20
   2b85c:	af00      	add	r7, sp, #0
   2b85e:	6078      	str	r0, [r7, #4]
   2b860:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   2b862:	683b      	ldr	r3, [r7, #0]
   2b864:	2b01      	cmp	r3, #1
   2b866:	d904      	bls.n	2b872 <remove_chain+0x1a>
   2b868:	687b      	ldr	r3, [r7, #4]
   2b86a:	699a      	ldr	r2, [r3, #24]
   2b86c:	683b      	ldr	r3, [r7, #0]
   2b86e:	429a      	cmp	r2, r3
   2b870:	d804      	bhi.n	2b87c <remove_chain+0x24>
		res = FR_INT_ERR;
   2b872:	230f      	movs	r3, #15
   2b874:	18fb      	adds	r3, r7, r3
   2b876:	2202      	movs	r2, #2
   2b878:	701a      	strb	r2, [r3, #0]
   2b87a:	e045      	b.n	2b908 <remove_chain+0xb0>

	} else {
		res = FR_OK;
   2b87c:	230f      	movs	r3, #15
   2b87e:	18fb      	adds	r3, r7, r3
   2b880:	2200      	movs	r2, #0
   2b882:	701a      	strb	r2, [r3, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   2b884:	e037      	b.n	2b8f6 <remove_chain+0x9e>
			nxt = get_fat(fs, clst);			/* Get cluster status */
   2b886:	683a      	ldr	r2, [r7, #0]
   2b888:	687b      	ldr	r3, [r7, #4]
   2b88a:	0011      	movs	r1, r2
   2b88c:	0018      	movs	r0, r3
   2b88e:	4b22      	ldr	r3, [pc, #136]	; (2b918 <remove_chain+0xc0>)
   2b890:	4798      	blx	r3
   2b892:	0003      	movs	r3, r0
   2b894:	60bb      	str	r3, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
   2b896:	68bb      	ldr	r3, [r7, #8]
   2b898:	2b00      	cmp	r3, #0
   2b89a:	d032      	beq.n	2b902 <remove_chain+0xaa>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
   2b89c:	68bb      	ldr	r3, [r7, #8]
   2b89e:	2b01      	cmp	r3, #1
   2b8a0:	d104      	bne.n	2b8ac <remove_chain+0x54>
   2b8a2:	230f      	movs	r3, #15
   2b8a4:	18fb      	adds	r3, r7, r3
   2b8a6:	2202      	movs	r2, #2
   2b8a8:	701a      	strb	r2, [r3, #0]
   2b8aa:	e02d      	b.n	2b908 <remove_chain+0xb0>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
   2b8ac:	68bb      	ldr	r3, [r7, #8]
   2b8ae:	3301      	adds	r3, #1
   2b8b0:	d104      	bne.n	2b8bc <remove_chain+0x64>
   2b8b2:	230f      	movs	r3, #15
   2b8b4:	18fb      	adds	r3, r7, r3
   2b8b6:	2201      	movs	r2, #1
   2b8b8:	701a      	strb	r2, [r3, #0]
   2b8ba:	e025      	b.n	2b908 <remove_chain+0xb0>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
   2b8bc:	230f      	movs	r3, #15
   2b8be:	18fc      	adds	r4, r7, r3
   2b8c0:	6839      	ldr	r1, [r7, #0]
   2b8c2:	687b      	ldr	r3, [r7, #4]
   2b8c4:	2200      	movs	r2, #0
   2b8c6:	0018      	movs	r0, r3
   2b8c8:	4b14      	ldr	r3, [pc, #80]	; (2b91c <remove_chain+0xc4>)
   2b8ca:	4798      	blx	r3
   2b8cc:	0003      	movs	r3, r0
   2b8ce:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2b8d0:	230f      	movs	r3, #15
   2b8d2:	18fb      	adds	r3, r7, r3
   2b8d4:	781b      	ldrb	r3, [r3, #0]
   2b8d6:	2b00      	cmp	r3, #0
   2b8d8:	d115      	bne.n	2b906 <remove_chain+0xae>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
   2b8da:	687b      	ldr	r3, [r7, #4]
   2b8dc:	691b      	ldr	r3, [r3, #16]
   2b8de:	3301      	adds	r3, #1
   2b8e0:	d007      	beq.n	2b8f2 <remove_chain+0x9a>
				fs->free_clust++;
   2b8e2:	687b      	ldr	r3, [r7, #4]
   2b8e4:	691b      	ldr	r3, [r3, #16]
   2b8e6:	1c5a      	adds	r2, r3, #1
   2b8e8:	687b      	ldr	r3, [r7, #4]
   2b8ea:	611a      	str	r2, [r3, #16]
				fs->fsi_flag = 1;
   2b8ec:	687b      	ldr	r3, [r7, #4]
   2b8ee:	2201      	movs	r2, #1
   2b8f0:	715a      	strb	r2, [r3, #5]
				resion[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, resion);		/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
   2b8f2:	68bb      	ldr	r3, [r7, #8]
   2b8f4:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   2b8f6:	687b      	ldr	r3, [r7, #4]
   2b8f8:	699a      	ldr	r2, [r3, #24]
   2b8fa:	683b      	ldr	r3, [r7, #0]
   2b8fc:	429a      	cmp	r2, r3
   2b8fe:	d8c2      	bhi.n	2b886 <remove_chain+0x2e>
   2b900:	e002      	b.n	2b908 <remove_chain+0xb0>
			if (nxt == 0) break;				/* Empty cluster? */
   2b902:	46c0      	nop			; (mov r8, r8)
   2b904:	e000      	b.n	2b908 <remove_chain+0xb0>
			if (res != FR_OK) break;
   2b906:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
   2b908:	230f      	movs	r3, #15
   2b90a:	18fb      	adds	r3, r7, r3
   2b90c:	781b      	ldrb	r3, [r3, #0]
}
   2b90e:	0018      	movs	r0, r3
   2b910:	46bd      	mov	sp, r7
   2b912:	b005      	add	sp, #20
   2b914:	bd90      	pop	{r4, r7, pc}
   2b916:	46c0      	nop			; (mov r8, r8)
   2b918:	0002b4b1 	.word	0x0002b4b1
   2b91c:	0002b61d 	.word	0x0002b61d

0002b920 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
   2b920:	b590      	push	{r4, r7, lr}
   2b922:	b087      	sub	sp, #28
   2b924:	af00      	add	r7, sp, #0
   2b926:	6078      	str	r0, [r7, #4]
   2b928:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
   2b92a:	683b      	ldr	r3, [r7, #0]
   2b92c:	2b00      	cmp	r3, #0
   2b92e:	d10d      	bne.n	2b94c <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
   2b930:	687b      	ldr	r3, [r7, #4]
   2b932:	68db      	ldr	r3, [r3, #12]
   2b934:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
   2b936:	693b      	ldr	r3, [r7, #16]
   2b938:	2b00      	cmp	r3, #0
   2b93a:	d004      	beq.n	2b946 <create_chain+0x26>
   2b93c:	687b      	ldr	r3, [r7, #4]
   2b93e:	699a      	ldr	r2, [r3, #24]
   2b940:	693b      	ldr	r3, [r7, #16]
   2b942:	429a      	cmp	r2, r3
   2b944:	d818      	bhi.n	2b978 <create_chain+0x58>
   2b946:	2301      	movs	r3, #1
   2b948:	613b      	str	r3, [r7, #16]
   2b94a:	e015      	b.n	2b978 <create_chain+0x58>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
   2b94c:	683a      	ldr	r2, [r7, #0]
   2b94e:	687b      	ldr	r3, [r7, #4]
   2b950:	0011      	movs	r1, r2
   2b952:	0018      	movs	r0, r3
   2b954:	4b3e      	ldr	r3, [pc, #248]	; (2ba50 <create_chain+0x130>)
   2b956:	4798      	blx	r3
   2b958:	0003      	movs	r3, r0
   2b95a:	60bb      	str	r3, [r7, #8]
		if (cs < 2) return 1;			/* It is an invalid cluster */
   2b95c:	68bb      	ldr	r3, [r7, #8]
   2b95e:	2b01      	cmp	r3, #1
   2b960:	d801      	bhi.n	2b966 <create_chain+0x46>
   2b962:	2301      	movs	r3, #1
   2b964:	e070      	b.n	2ba48 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   2b966:	687b      	ldr	r3, [r7, #4]
   2b968:	699a      	ldr	r2, [r3, #24]
   2b96a:	68bb      	ldr	r3, [r7, #8]
   2b96c:	429a      	cmp	r2, r3
   2b96e:	d901      	bls.n	2b974 <create_chain+0x54>
   2b970:	68bb      	ldr	r3, [r7, #8]
   2b972:	e069      	b.n	2ba48 <create_chain+0x128>
		scl = clst;
   2b974:	683b      	ldr	r3, [r7, #0]
   2b976:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
   2b978:	693b      	ldr	r3, [r7, #16]
   2b97a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
   2b97c:	697b      	ldr	r3, [r7, #20]
   2b97e:	3301      	adds	r3, #1
   2b980:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Wrap around */
   2b982:	687b      	ldr	r3, [r7, #4]
   2b984:	699a      	ldr	r2, [r3, #24]
   2b986:	697b      	ldr	r3, [r7, #20]
   2b988:	429a      	cmp	r2, r3
   2b98a:	d807      	bhi.n	2b99c <create_chain+0x7c>
			ncl = 2;
   2b98c:	2302      	movs	r3, #2
   2b98e:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
   2b990:	697a      	ldr	r2, [r7, #20]
   2b992:	693b      	ldr	r3, [r7, #16]
   2b994:	429a      	cmp	r2, r3
   2b996:	d901      	bls.n	2b99c <create_chain+0x7c>
   2b998:	2300      	movs	r3, #0
   2b99a:	e055      	b.n	2ba48 <create_chain+0x128>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
   2b99c:	697a      	ldr	r2, [r7, #20]
   2b99e:	687b      	ldr	r3, [r7, #4]
   2b9a0:	0011      	movs	r1, r2
   2b9a2:	0018      	movs	r0, r3
   2b9a4:	4b2a      	ldr	r3, [pc, #168]	; (2ba50 <create_chain+0x130>)
   2b9a6:	4798      	blx	r3
   2b9a8:	0003      	movs	r3, r0
   2b9aa:	60bb      	str	r3, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
   2b9ac:	68bb      	ldr	r3, [r7, #8]
   2b9ae:	2b00      	cmp	r3, #0
   2b9b0:	d00d      	beq.n	2b9ce <create_chain+0xae>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
   2b9b2:	68bb      	ldr	r3, [r7, #8]
   2b9b4:	3301      	adds	r3, #1
   2b9b6:	d002      	beq.n	2b9be <create_chain+0x9e>
   2b9b8:	68bb      	ldr	r3, [r7, #8]
   2b9ba:	2b01      	cmp	r3, #1
   2b9bc:	d101      	bne.n	2b9c2 <create_chain+0xa2>
			return cs;
   2b9be:	68bb      	ldr	r3, [r7, #8]
   2b9c0:	e042      	b.n	2ba48 <create_chain+0x128>
		if (ncl == scl) return 0;		/* No free cluster */
   2b9c2:	697a      	ldr	r2, [r7, #20]
   2b9c4:	693b      	ldr	r3, [r7, #16]
   2b9c6:	429a      	cmp	r2, r3
   2b9c8:	d1d8      	bne.n	2b97c <create_chain+0x5c>
   2b9ca:	2300      	movs	r3, #0
   2b9cc:	e03c      	b.n	2ba48 <create_chain+0x128>
		if (cs == 0) break;				/* Found a free cluster */
   2b9ce:	46c0      	nop			; (mov r8, r8)
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
   2b9d0:	230f      	movs	r3, #15
   2b9d2:	18fc      	adds	r4, r7, r3
   2b9d4:	4a1f      	ldr	r2, [pc, #124]	; (2ba54 <create_chain+0x134>)
   2b9d6:	6979      	ldr	r1, [r7, #20]
   2b9d8:	687b      	ldr	r3, [r7, #4]
   2b9da:	0018      	movs	r0, r3
   2b9dc:	4b1e      	ldr	r3, [pc, #120]	; (2ba58 <create_chain+0x138>)
   2b9de:	4798      	blx	r3
   2b9e0:	0003      	movs	r3, r0
   2b9e2:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && clst != 0) {
   2b9e4:	230f      	movs	r3, #15
   2b9e6:	18fb      	adds	r3, r7, r3
   2b9e8:	781b      	ldrb	r3, [r3, #0]
   2b9ea:	2b00      	cmp	r3, #0
   2b9ec:	d10c      	bne.n	2ba08 <create_chain+0xe8>
   2b9ee:	683b      	ldr	r3, [r7, #0]
   2b9f0:	2b00      	cmp	r3, #0
   2b9f2:	d009      	beq.n	2ba08 <create_chain+0xe8>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
   2b9f4:	230f      	movs	r3, #15
   2b9f6:	18fc      	adds	r4, r7, r3
   2b9f8:	697a      	ldr	r2, [r7, #20]
   2b9fa:	6839      	ldr	r1, [r7, #0]
   2b9fc:	687b      	ldr	r3, [r7, #4]
   2b9fe:	0018      	movs	r0, r3
   2ba00:	4b15      	ldr	r3, [pc, #84]	; (2ba58 <create_chain+0x138>)
   2ba02:	4798      	blx	r3
   2ba04:	0003      	movs	r3, r0
   2ba06:	7023      	strb	r3, [r4, #0]
	}
	if (res == FR_OK) {
   2ba08:	230f      	movs	r3, #15
   2ba0a:	18fb      	adds	r3, r7, r3
   2ba0c:	781b      	ldrb	r3, [r3, #0]
   2ba0e:	2b00      	cmp	r3, #0
   2ba10:	d10f      	bne.n	2ba32 <create_chain+0x112>
		fs->last_clust = ncl;			/* Update FSINFO */
   2ba12:	687b      	ldr	r3, [r7, #4]
   2ba14:	697a      	ldr	r2, [r7, #20]
   2ba16:	60da      	str	r2, [r3, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
   2ba18:	687b      	ldr	r3, [r7, #4]
   2ba1a:	691b      	ldr	r3, [r3, #16]
   2ba1c:	3301      	adds	r3, #1
   2ba1e:	d012      	beq.n	2ba46 <create_chain+0x126>
			fs->free_clust--;
   2ba20:	687b      	ldr	r3, [r7, #4]
   2ba22:	691b      	ldr	r3, [r3, #16]
   2ba24:	1e5a      	subs	r2, r3, #1
   2ba26:	687b      	ldr	r3, [r7, #4]
   2ba28:	611a      	str	r2, [r3, #16]
			fs->fsi_flag = 1;
   2ba2a:	687b      	ldr	r3, [r7, #4]
   2ba2c:	2201      	movs	r2, #1
   2ba2e:	715a      	strb	r2, [r3, #5]
   2ba30:	e009      	b.n	2ba46 <create_chain+0x126>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
   2ba32:	230f      	movs	r3, #15
   2ba34:	18fb      	adds	r3, r7, r3
   2ba36:	781b      	ldrb	r3, [r3, #0]
   2ba38:	2b01      	cmp	r3, #1
   2ba3a:	d102      	bne.n	2ba42 <create_chain+0x122>
   2ba3c:	2301      	movs	r3, #1
   2ba3e:	425b      	negs	r3, r3
   2ba40:	e000      	b.n	2ba44 <create_chain+0x124>
   2ba42:	2301      	movs	r3, #1
   2ba44:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
   2ba46:	697b      	ldr	r3, [r7, #20]
}
   2ba48:	0018      	movs	r0, r3
   2ba4a:	46bd      	mov	sp, r7
   2ba4c:	b007      	add	sp, #28
   2ba4e:	bd90      	pop	{r4, r7, pc}
   2ba50:	0002b4b1 	.word	0x0002b4b1
   2ba54:	0fffffff 	.word	0x0fffffff
   2ba58:	0002b61d 	.word	0x0002b61d

0002ba5c <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
   2ba5c:	b580      	push	{r7, lr}
   2ba5e:	b084      	sub	sp, #16
   2ba60:	af00      	add	r7, sp, #0
   2ba62:	6078      	str	r0, [r7, #4]
   2ba64:	000a      	movs	r2, r1
   2ba66:	1cbb      	adds	r3, r7, #2
   2ba68:	801a      	strh	r2, [r3, #0]
	DWORD clst;
	WORD ic;


	dj->index = idx;
   2ba6a:	687b      	ldr	r3, [r7, #4]
   2ba6c:	1cba      	adds	r2, r7, #2
   2ba6e:	8812      	ldrh	r2, [r2, #0]
   2ba70:	80da      	strh	r2, [r3, #6]
	clst = dj->sclust;
   2ba72:	687b      	ldr	r3, [r7, #4]
   2ba74:	689b      	ldr	r3, [r3, #8]
   2ba76:	60fb      	str	r3, [r7, #12]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
   2ba78:	68fb      	ldr	r3, [r7, #12]
   2ba7a:	2b01      	cmp	r3, #1
   2ba7c:	d005      	beq.n	2ba8a <dir_sdi+0x2e>
   2ba7e:	687b      	ldr	r3, [r7, #4]
   2ba80:	681b      	ldr	r3, [r3, #0]
   2ba82:	699a      	ldr	r2, [r3, #24]
   2ba84:	68fb      	ldr	r3, [r7, #12]
   2ba86:	429a      	cmp	r2, r3
   2ba88:	d801      	bhi.n	2ba8e <dir_sdi+0x32>
		return FR_INT_ERR;
   2ba8a:	2302      	movs	r3, #2
   2ba8c:	e075      	b.n	2bb7a <dir_sdi+0x11e>
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
   2ba8e:	68fb      	ldr	r3, [r7, #12]
   2ba90:	2b00      	cmp	r3, #0
   2ba92:	d108      	bne.n	2baa6 <dir_sdi+0x4a>
   2ba94:	687b      	ldr	r3, [r7, #4]
   2ba96:	681b      	ldr	r3, [r3, #0]
   2ba98:	781b      	ldrb	r3, [r3, #0]
   2ba9a:	2b03      	cmp	r3, #3
   2ba9c:	d103      	bne.n	2baa6 <dir_sdi+0x4a>
		clst = dj->fs->dirbase;
   2ba9e:	687b      	ldr	r3, [r7, #4]
   2baa0:	681b      	ldr	r3, [r3, #0]
   2baa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2baa4:	60fb      	str	r3, [r7, #12]

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
   2baa6:	68fb      	ldr	r3, [r7, #12]
   2baa8:	2b00      	cmp	r3, #0
   2baaa:	d116      	bne.n	2bada <dir_sdi+0x7e>
		dj->clust = clst;
   2baac:	687b      	ldr	r3, [r7, #4]
   2baae:	68fa      	ldr	r2, [r7, #12]
   2bab0:	60da      	str	r2, [r3, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
   2bab2:	687b      	ldr	r3, [r7, #4]
   2bab4:	681b      	ldr	r3, [r3, #0]
   2bab6:	891b      	ldrh	r3, [r3, #8]
   2bab8:	1cba      	adds	r2, r7, #2
   2baba:	8812      	ldrh	r2, [r2, #0]
   2babc:	429a      	cmp	r2, r3
   2babe:	d301      	bcc.n	2bac4 <dir_sdi+0x68>
			return FR_INT_ERR;
   2bac0:	2302      	movs	r3, #2
   2bac2:	e05a      	b.n	2bb7a <dir_sdi+0x11e>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   2bac4:	687b      	ldr	r3, [r7, #4]
   2bac6:	681b      	ldr	r3, [r3, #0]
   2bac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2baca:	1cba      	adds	r2, r7, #2
   2bacc:	8812      	ldrh	r2, [r2, #0]
   2bace:	0912      	lsrs	r2, r2, #4
   2bad0:	b292      	uxth	r2, r2
   2bad2:	189a      	adds	r2, r3, r2
   2bad4:	687b      	ldr	r3, [r7, #4]
   2bad6:	611a      	str	r2, [r3, #16]
   2bad8:	e042      	b.n	2bb60 <dir_sdi+0x104>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
   2bada:	687b      	ldr	r3, [r7, #4]
   2badc:	681b      	ldr	r3, [r3, #0]
   2bade:	789b      	ldrb	r3, [r3, #2]
   2bae0:	b29a      	uxth	r2, r3
   2bae2:	230a      	movs	r3, #10
   2bae4:	18fb      	adds	r3, r7, r3
   2bae6:	0112      	lsls	r2, r2, #4
   2bae8:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
   2baea:	e020      	b.n	2bb2e <dir_sdi+0xd2>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
   2baec:	687b      	ldr	r3, [r7, #4]
   2baee:	681b      	ldr	r3, [r3, #0]
   2baf0:	68fa      	ldr	r2, [r7, #12]
   2baf2:	0011      	movs	r1, r2
   2baf4:	0018      	movs	r0, r3
   2baf6:	4b23      	ldr	r3, [pc, #140]	; (2bb84 <dir_sdi+0x128>)
   2baf8:	4798      	blx	r3
   2bafa:	0003      	movs	r3, r0
   2bafc:	60fb      	str	r3, [r7, #12]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   2bafe:	68fb      	ldr	r3, [r7, #12]
   2bb00:	3301      	adds	r3, #1
   2bb02:	d101      	bne.n	2bb08 <dir_sdi+0xac>
   2bb04:	2301      	movs	r3, #1
   2bb06:	e038      	b.n	2bb7a <dir_sdi+0x11e>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
   2bb08:	68fb      	ldr	r3, [r7, #12]
   2bb0a:	2b01      	cmp	r3, #1
   2bb0c:	d905      	bls.n	2bb1a <dir_sdi+0xbe>
   2bb0e:	687b      	ldr	r3, [r7, #4]
   2bb10:	681b      	ldr	r3, [r3, #0]
   2bb12:	699a      	ldr	r2, [r3, #24]
   2bb14:	68fb      	ldr	r3, [r7, #12]
   2bb16:	429a      	cmp	r2, r3
   2bb18:	d801      	bhi.n	2bb1e <dir_sdi+0xc2>
				return FR_INT_ERR;
   2bb1a:	2302      	movs	r3, #2
   2bb1c:	e02d      	b.n	2bb7a <dir_sdi+0x11e>
			idx -= ic;
   2bb1e:	1cbb      	adds	r3, r7, #2
   2bb20:	1cb9      	adds	r1, r7, #2
   2bb22:	220a      	movs	r2, #10
   2bb24:	18ba      	adds	r2, r7, r2
   2bb26:	8809      	ldrh	r1, [r1, #0]
   2bb28:	8812      	ldrh	r2, [r2, #0]
   2bb2a:	1a8a      	subs	r2, r1, r2
   2bb2c:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
   2bb2e:	1cba      	adds	r2, r7, #2
   2bb30:	230a      	movs	r3, #10
   2bb32:	18fb      	adds	r3, r7, r3
   2bb34:	8812      	ldrh	r2, [r2, #0]
   2bb36:	881b      	ldrh	r3, [r3, #0]
   2bb38:	429a      	cmp	r2, r3
   2bb3a:	d2d7      	bcs.n	2baec <dir_sdi+0x90>
		}
		dj->clust = clst;
   2bb3c:	687b      	ldr	r3, [r7, #4]
   2bb3e:	68fa      	ldr	r2, [r7, #12]
   2bb40:	60da      	str	r2, [r3, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   2bb42:	687b      	ldr	r3, [r7, #4]
   2bb44:	681b      	ldr	r3, [r3, #0]
   2bb46:	68fa      	ldr	r2, [r7, #12]
   2bb48:	0011      	movs	r1, r2
   2bb4a:	0018      	movs	r0, r3
   2bb4c:	4b0e      	ldr	r3, [pc, #56]	; (2bb88 <dir_sdi+0x12c>)
   2bb4e:	4798      	blx	r3
   2bb50:	0002      	movs	r2, r0
   2bb52:	1cbb      	adds	r3, r7, #2
   2bb54:	881b      	ldrh	r3, [r3, #0]
   2bb56:	091b      	lsrs	r3, r3, #4
   2bb58:	b29b      	uxth	r3, r3
   2bb5a:	18d2      	adds	r2, r2, r3
   2bb5c:	687b      	ldr	r3, [r7, #4]
   2bb5e:	611a      	str	r2, [r3, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
   2bb60:	687b      	ldr	r3, [r7, #4]
   2bb62:	681b      	ldr	r3, [r3, #0]
   2bb64:	3330      	adds	r3, #48	; 0x30
   2bb66:	001a      	movs	r2, r3
   2bb68:	1cbb      	adds	r3, r7, #2
   2bb6a:	881b      	ldrh	r3, [r3, #0]
   2bb6c:	210f      	movs	r1, #15
   2bb6e:	400b      	ands	r3, r1
   2bb70:	015b      	lsls	r3, r3, #5
   2bb72:	18d2      	adds	r2, r2, r3
   2bb74:	687b      	ldr	r3, [r7, #4]
   2bb76:	615a      	str	r2, [r3, #20]

	return FR_OK;	/* Seek succeeded */
   2bb78:	2300      	movs	r3, #0
}
   2bb7a:	0018      	movs	r0, r3
   2bb7c:	46bd      	mov	sp, r7
   2bb7e:	b004      	add	sp, #16
   2bb80:	bd80      	pop	{r7, pc}
   2bb82:	46c0      	nop			; (mov r8, r8)
   2bb84:	0002b4b1 	.word	0x0002b4b1
   2bb88:	0002b479 	.word	0x0002b479

0002bb8c <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
   2bb8c:	b590      	push	{r4, r7, lr}
   2bb8e:	b085      	sub	sp, #20
   2bb90:	af00      	add	r7, sp, #0
   2bb92:	6078      	str	r0, [r7, #4]
   2bb94:	6039      	str	r1, [r7, #0]
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
   2bb96:	687b      	ldr	r3, [r7, #4]
   2bb98:	88da      	ldrh	r2, [r3, #6]
   2bb9a:	2308      	movs	r3, #8
   2bb9c:	18fb      	adds	r3, r7, r3
   2bb9e:	3201      	adds	r2, #1
   2bba0:	801a      	strh	r2, [r3, #0]
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   2bba2:	2308      	movs	r3, #8
   2bba4:	18fb      	adds	r3, r7, r3
   2bba6:	881b      	ldrh	r3, [r3, #0]
   2bba8:	2b00      	cmp	r3, #0
   2bbaa:	d003      	beq.n	2bbb4 <dir_next+0x28>
   2bbac:	687b      	ldr	r3, [r7, #4]
   2bbae:	691b      	ldr	r3, [r3, #16]
   2bbb0:	2b00      	cmp	r3, #0
   2bbb2:	d101      	bne.n	2bbb8 <dir_next+0x2c>
		return FR_NO_FILE;
   2bbb4:	2304      	movs	r3, #4
   2bbb6:	e0d2      	b.n	2bd5e <dir_next+0x1d2>

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
   2bbb8:	2308      	movs	r3, #8
   2bbba:	18fb      	adds	r3, r7, r3
   2bbbc:	881b      	ldrh	r3, [r3, #0]
   2bbbe:	220f      	movs	r2, #15
   2bbc0:	4013      	ands	r3, r2
   2bbc2:	b29b      	uxth	r3, r3
   2bbc4:	2b00      	cmp	r3, #0
   2bbc6:	d000      	beq.n	2bbca <dir_next+0x3e>
   2bbc8:	e0b6      	b.n	2bd38 <dir_next+0x1ac>
		dj->sect++;					/* Next sector */
   2bbca:	687b      	ldr	r3, [r7, #4]
   2bbcc:	691b      	ldr	r3, [r3, #16]
   2bbce:	1c5a      	adds	r2, r3, #1
   2bbd0:	687b      	ldr	r3, [r7, #4]
   2bbd2:	611a      	str	r2, [r3, #16]

		if (dj->clust == 0) {	/* Static table */
   2bbd4:	687b      	ldr	r3, [r7, #4]
   2bbd6:	68db      	ldr	r3, [r3, #12]
   2bbd8:	2b00      	cmp	r3, #0
   2bbda:	d10a      	bne.n	2bbf2 <dir_next+0x66>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
   2bbdc:	687b      	ldr	r3, [r7, #4]
   2bbde:	681b      	ldr	r3, [r3, #0]
   2bbe0:	891b      	ldrh	r3, [r3, #8]
   2bbe2:	2208      	movs	r2, #8
   2bbe4:	18ba      	adds	r2, r7, r2
   2bbe6:	8812      	ldrh	r2, [r2, #0]
   2bbe8:	429a      	cmp	r2, r3
   2bbea:	d200      	bcs.n	2bbee <dir_next+0x62>
   2bbec:	e0a4      	b.n	2bd38 <dir_next+0x1ac>
				return FR_NO_FILE;
   2bbee:	2304      	movs	r3, #4
   2bbf0:	e0b5      	b.n	2bd5e <dir_next+0x1d2>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
   2bbf2:	2308      	movs	r3, #8
   2bbf4:	18fb      	adds	r3, r7, r3
   2bbf6:	881b      	ldrh	r3, [r3, #0]
   2bbf8:	091b      	lsrs	r3, r3, #4
   2bbfa:	b29b      	uxth	r3, r3
   2bbfc:	001a      	movs	r2, r3
   2bbfe:	687b      	ldr	r3, [r7, #4]
   2bc00:	681b      	ldr	r3, [r3, #0]
   2bc02:	789b      	ldrb	r3, [r3, #2]
   2bc04:	3b01      	subs	r3, #1
   2bc06:	4013      	ands	r3, r2
   2bc08:	d000      	beq.n	2bc0c <dir_next+0x80>
   2bc0a:	e095      	b.n	2bd38 <dir_next+0x1ac>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
   2bc0c:	687b      	ldr	r3, [r7, #4]
   2bc0e:	681a      	ldr	r2, [r3, #0]
   2bc10:	687b      	ldr	r3, [r7, #4]
   2bc12:	68db      	ldr	r3, [r3, #12]
   2bc14:	0019      	movs	r1, r3
   2bc16:	0010      	movs	r0, r2
   2bc18:	4b53      	ldr	r3, [pc, #332]	; (2bd68 <dir_next+0x1dc>)
   2bc1a:	4798      	blx	r3
   2bc1c:	0003      	movs	r3, r0
   2bc1e:	60fb      	str	r3, [r7, #12]
				if (clst <= 1) return FR_INT_ERR;
   2bc20:	68fb      	ldr	r3, [r7, #12]
   2bc22:	2b01      	cmp	r3, #1
   2bc24:	d801      	bhi.n	2bc2a <dir_next+0x9e>
   2bc26:	2302      	movs	r3, #2
   2bc28:	e099      	b.n	2bd5e <dir_next+0x1d2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   2bc2a:	68fb      	ldr	r3, [r7, #12]
   2bc2c:	3301      	adds	r3, #1
   2bc2e:	d101      	bne.n	2bc34 <dir_next+0xa8>
   2bc30:	2301      	movs	r3, #1
   2bc32:	e094      	b.n	2bd5e <dir_next+0x1d2>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
   2bc34:	687b      	ldr	r3, [r7, #4]
   2bc36:	681b      	ldr	r3, [r3, #0]
   2bc38:	699a      	ldr	r2, [r3, #24]
   2bc3a:	68fb      	ldr	r3, [r7, #12]
   2bc3c:	429a      	cmp	r2, r3
   2bc3e:	d900      	bls.n	2bc42 <dir_next+0xb6>
   2bc40:	e06d      	b.n	2bd1e <dir_next+0x192>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
   2bc42:	683b      	ldr	r3, [r7, #0]
   2bc44:	2b00      	cmp	r3, #0
   2bc46:	d101      	bne.n	2bc4c <dir_next+0xc0>
   2bc48:	2304      	movs	r3, #4
   2bc4a:	e088      	b.n	2bd5e <dir_next+0x1d2>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
   2bc4c:	687b      	ldr	r3, [r7, #4]
   2bc4e:	681a      	ldr	r2, [r3, #0]
   2bc50:	687b      	ldr	r3, [r7, #4]
   2bc52:	68db      	ldr	r3, [r3, #12]
   2bc54:	0019      	movs	r1, r3
   2bc56:	0010      	movs	r0, r2
   2bc58:	4b44      	ldr	r3, [pc, #272]	; (2bd6c <dir_next+0x1e0>)
   2bc5a:	4798      	blx	r3
   2bc5c:	0003      	movs	r3, r0
   2bc5e:	60fb      	str	r3, [r7, #12]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
   2bc60:	68fb      	ldr	r3, [r7, #12]
   2bc62:	2b00      	cmp	r3, #0
   2bc64:	d101      	bne.n	2bc6a <dir_next+0xde>
   2bc66:	2307      	movs	r3, #7
   2bc68:	e079      	b.n	2bd5e <dir_next+0x1d2>
					if (clst == 1) return FR_INT_ERR;
   2bc6a:	68fb      	ldr	r3, [r7, #12]
   2bc6c:	2b01      	cmp	r3, #1
   2bc6e:	d101      	bne.n	2bc74 <dir_next+0xe8>
   2bc70:	2302      	movs	r3, #2
   2bc72:	e074      	b.n	2bd5e <dir_next+0x1d2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   2bc74:	68fb      	ldr	r3, [r7, #12]
   2bc76:	3301      	adds	r3, #1
   2bc78:	d101      	bne.n	2bc7e <dir_next+0xf2>
   2bc7a:	2301      	movs	r3, #1
   2bc7c:	e06f      	b.n	2bd5e <dir_next+0x1d2>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
   2bc7e:	687b      	ldr	r3, [r7, #4]
   2bc80:	681b      	ldr	r3, [r3, #0]
   2bc82:	2100      	movs	r1, #0
   2bc84:	0018      	movs	r0, r3
   2bc86:	4b3a      	ldr	r3, [pc, #232]	; (2bd70 <dir_next+0x1e4>)
   2bc88:	4798      	blx	r3
   2bc8a:	1e03      	subs	r3, r0, #0
   2bc8c:	d001      	beq.n	2bc92 <dir_next+0x106>
   2bc8e:	2301      	movs	r3, #1
   2bc90:	e065      	b.n	2bd5e <dir_next+0x1d2>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
   2bc92:	687b      	ldr	r3, [r7, #4]
   2bc94:	681b      	ldr	r3, [r3, #0]
   2bc96:	3330      	adds	r3, #48	; 0x30
   2bc98:	0018      	movs	r0, r3
   2bc9a:	2380      	movs	r3, #128	; 0x80
   2bc9c:	009b      	lsls	r3, r3, #2
   2bc9e:	001a      	movs	r2, r3
   2bca0:	2100      	movs	r1, #0
   2bca2:	4b34      	ldr	r3, [pc, #208]	; (2bd74 <dir_next+0x1e8>)
   2bca4:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
   2bca6:	687b      	ldr	r3, [r7, #4]
   2bca8:	681c      	ldr	r4, [r3, #0]
   2bcaa:	687b      	ldr	r3, [r7, #4]
   2bcac:	681b      	ldr	r3, [r3, #0]
   2bcae:	68fa      	ldr	r2, [r7, #12]
   2bcb0:	0011      	movs	r1, r2
   2bcb2:	0018      	movs	r0, r3
   2bcb4:	4b30      	ldr	r3, [pc, #192]	; (2bd78 <dir_next+0x1ec>)
   2bcb6:	4798      	blx	r3
   2bcb8:	0003      	movs	r3, r0
   2bcba:	62e3      	str	r3, [r4, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   2bcbc:	230b      	movs	r3, #11
   2bcbe:	18fb      	adds	r3, r7, r3
   2bcc0:	2200      	movs	r2, #0
   2bcc2:	701a      	strb	r2, [r3, #0]
   2bcc4:	e019      	b.n	2bcfa <dir_next+0x16e>
						dj->fs->wflag = 1;
   2bcc6:	687b      	ldr	r3, [r7, #4]
   2bcc8:	681b      	ldr	r3, [r3, #0]
   2bcca:	2201      	movs	r2, #1
   2bccc:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
   2bcce:	687b      	ldr	r3, [r7, #4]
   2bcd0:	681b      	ldr	r3, [r3, #0]
   2bcd2:	2100      	movs	r1, #0
   2bcd4:	0018      	movs	r0, r3
   2bcd6:	4b26      	ldr	r3, [pc, #152]	; (2bd70 <dir_next+0x1e4>)
   2bcd8:	4798      	blx	r3
   2bcda:	1e03      	subs	r3, r0, #0
   2bcdc:	d001      	beq.n	2bce2 <dir_next+0x156>
   2bcde:	2301      	movs	r3, #1
   2bce0:	e03d      	b.n	2bd5e <dir_next+0x1d2>
						dj->fs->winsect++;
   2bce2:	687b      	ldr	r3, [r7, #4]
   2bce4:	681b      	ldr	r3, [r3, #0]
   2bce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2bce8:	3201      	adds	r2, #1
   2bcea:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   2bcec:	230b      	movs	r3, #11
   2bcee:	18fb      	adds	r3, r7, r3
   2bcf0:	781a      	ldrb	r2, [r3, #0]
   2bcf2:	230b      	movs	r3, #11
   2bcf4:	18fb      	adds	r3, r7, r3
   2bcf6:	3201      	adds	r2, #1
   2bcf8:	701a      	strb	r2, [r3, #0]
   2bcfa:	687b      	ldr	r3, [r7, #4]
   2bcfc:	681b      	ldr	r3, [r3, #0]
   2bcfe:	789b      	ldrb	r3, [r3, #2]
   2bd00:	220b      	movs	r2, #11
   2bd02:	18ba      	adds	r2, r7, r2
   2bd04:	7812      	ldrb	r2, [r2, #0]
   2bd06:	429a      	cmp	r2, r3
   2bd08:	d3dd      	bcc.n	2bcc6 <dir_next+0x13a>
					}
					dj->fs->winsect -= c;						/* Rewind window address */
   2bd0a:	687b      	ldr	r3, [r7, #4]
   2bd0c:	681b      	ldr	r3, [r3, #0]
   2bd0e:	687a      	ldr	r2, [r7, #4]
   2bd10:	6812      	ldr	r2, [r2, #0]
   2bd12:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   2bd14:	220b      	movs	r2, #11
   2bd16:	18ba      	adds	r2, r7, r2
   2bd18:	7812      	ldrb	r2, [r2, #0]
   2bd1a:	1a8a      	subs	r2, r1, r2
   2bd1c:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
   2bd1e:	687b      	ldr	r3, [r7, #4]
   2bd20:	68fa      	ldr	r2, [r7, #12]
   2bd22:	60da      	str	r2, [r3, #12]
				dj->sect = clust2sect(dj->fs, clst);
   2bd24:	687b      	ldr	r3, [r7, #4]
   2bd26:	681b      	ldr	r3, [r3, #0]
   2bd28:	68fa      	ldr	r2, [r7, #12]
   2bd2a:	0011      	movs	r1, r2
   2bd2c:	0018      	movs	r0, r3
   2bd2e:	4b12      	ldr	r3, [pc, #72]	; (2bd78 <dir_next+0x1ec>)
   2bd30:	4798      	blx	r3
   2bd32:	0002      	movs	r2, r0
   2bd34:	687b      	ldr	r3, [r7, #4]
   2bd36:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dj->index = i;
   2bd38:	687b      	ldr	r3, [r7, #4]
   2bd3a:	2208      	movs	r2, #8
   2bd3c:	18ba      	adds	r2, r7, r2
   2bd3e:	8812      	ldrh	r2, [r2, #0]
   2bd40:	80da      	strh	r2, [r3, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
   2bd42:	687b      	ldr	r3, [r7, #4]
   2bd44:	681b      	ldr	r3, [r3, #0]
   2bd46:	3330      	adds	r3, #48	; 0x30
   2bd48:	001a      	movs	r2, r3
   2bd4a:	2308      	movs	r3, #8
   2bd4c:	18fb      	adds	r3, r7, r3
   2bd4e:	881b      	ldrh	r3, [r3, #0]
   2bd50:	210f      	movs	r1, #15
   2bd52:	400b      	ands	r3, r1
   2bd54:	015b      	lsls	r3, r3, #5
   2bd56:	18d2      	adds	r2, r2, r3
   2bd58:	687b      	ldr	r3, [r7, #4]
   2bd5a:	615a      	str	r2, [r3, #20]

	return FR_OK;
   2bd5c:	2300      	movs	r3, #0
}
   2bd5e:	0018      	movs	r0, r3
   2bd60:	46bd      	mov	sp, r7
   2bd62:	b005      	add	sp, #20
   2bd64:	bd90      	pop	{r4, r7, pc}
   2bd66:	46c0      	nop			; (mov r8, r8)
   2bd68:	0002b4b1 	.word	0x0002b4b1
   2bd6c:	0002b921 	.word	0x0002b921
   2bd70:	0002b219 	.word	0x0002b219
   2bd74:	0002b16d 	.word	0x0002b16d
   2bd78:	0002b479 	.word	0x0002b479

0002bd7c <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
)
{
   2bd7c:	b590      	push	{r4, r7, lr}
   2bd7e:	b087      	sub	sp, #28
   2bd80:	af00      	add	r7, sp, #0
   2bd82:	6078      	str	r0, [r7, #4]
   2bd84:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
   2bd86:	683b      	ldr	r3, [r7, #0]
   2bd88:	781b      	ldrb	r3, [r3, #0]
   2bd8a:	001a      	movs	r2, r3
   2bd8c:	2340      	movs	r3, #64	; 0x40
   2bd8e:	439a      	bics	r2, r3
   2bd90:	0013      	movs	r3, r2
   2bd92:	1e5a      	subs	r2, r3, #1
   2bd94:	0013      	movs	r3, r2
   2bd96:	005b      	lsls	r3, r3, #1
   2bd98:	189b      	adds	r3, r3, r2
   2bd9a:	009b      	lsls	r3, r3, #2
   2bd9c:	189b      	adds	r3, r3, r2
   2bd9e:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
   2bda0:	2300      	movs	r3, #0
   2bda2:	613b      	str	r3, [r7, #16]
   2bda4:	230e      	movs	r3, #14
   2bda6:	18fb      	adds	r3, r7, r3
   2bda8:	2201      	movs	r2, #1
   2bdaa:	801a      	strh	r2, [r3, #0]
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
   2bdac:	4a31      	ldr	r2, [pc, #196]	; (2be74 <cmp_lfn+0xf8>)
   2bdae:	693b      	ldr	r3, [r7, #16]
   2bdb0:	18d3      	adds	r3, r2, r3
   2bdb2:	781b      	ldrb	r3, [r3, #0]
   2bdb4:	3301      	adds	r3, #1
   2bdb6:	683a      	ldr	r2, [r7, #0]
   2bdb8:	18d3      	adds	r3, r2, r3
   2bdba:	781b      	ldrb	r3, [r3, #0]
   2bdbc:	021b      	lsls	r3, r3, #8
   2bdbe:	b21a      	sxth	r2, r3
   2bdc0:	492c      	ldr	r1, [pc, #176]	; (2be74 <cmp_lfn+0xf8>)
   2bdc2:	693b      	ldr	r3, [r7, #16]
   2bdc4:	18cb      	adds	r3, r1, r3
   2bdc6:	781b      	ldrb	r3, [r3, #0]
   2bdc8:	0019      	movs	r1, r3
   2bdca:	683b      	ldr	r3, [r7, #0]
   2bdcc:	185b      	adds	r3, r3, r1
   2bdce:	781b      	ldrb	r3, [r3, #0]
   2bdd0:	b21b      	sxth	r3, r3
   2bdd2:	4313      	orrs	r3, r2
   2bdd4:	b21a      	sxth	r2, r3
   2bdd6:	230c      	movs	r3, #12
   2bdd8:	18fb      	adds	r3, r7, r3
   2bdda:	801a      	strh	r2, [r3, #0]
		if (wc) {	/* Last char has not been processed */
   2bddc:	230e      	movs	r3, #14
   2bdde:	18fb      	adds	r3, r7, r3
   2bde0:	881b      	ldrh	r3, [r3, #0]
   2bde2:	2b00      	cmp	r3, #0
   2bde4:	d01f      	beq.n	2be26 <cmp_lfn+0xaa>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
   2bde6:	230e      	movs	r3, #14
   2bde8:	18fc      	adds	r4, r7, r3
   2bdea:	230c      	movs	r3, #12
   2bdec:	18fb      	adds	r3, r7, r3
   2bdee:	881b      	ldrh	r3, [r3, #0]
   2bdf0:	0018      	movs	r0, r3
   2bdf2:	4b21      	ldr	r3, [pc, #132]	; (2be78 <cmp_lfn+0xfc>)
   2bdf4:	4798      	blx	r3
   2bdf6:	0003      	movs	r3, r0
   2bdf8:	8023      	strh	r3, [r4, #0]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
   2bdfa:	697b      	ldr	r3, [r7, #20]
   2bdfc:	2bfe      	cmp	r3, #254	; 0xfe
   2bdfe:	d810      	bhi.n	2be22 <cmp_lfn+0xa6>
   2be00:	697b      	ldr	r3, [r7, #20]
   2be02:	1c5a      	adds	r2, r3, #1
   2be04:	617a      	str	r2, [r7, #20]
   2be06:	005b      	lsls	r3, r3, #1
   2be08:	687a      	ldr	r2, [r7, #4]
   2be0a:	18d3      	adds	r3, r2, r3
   2be0c:	881b      	ldrh	r3, [r3, #0]
   2be0e:	0018      	movs	r0, r3
   2be10:	4b19      	ldr	r3, [pc, #100]	; (2be78 <cmp_lfn+0xfc>)
   2be12:	4798      	blx	r3
   2be14:	0003      	movs	r3, r0
   2be16:	001a      	movs	r2, r3
   2be18:	230e      	movs	r3, #14
   2be1a:	18fb      	adds	r3, r7, r3
   2be1c:	881b      	ldrh	r3, [r3, #0]
   2be1e:	4293      	cmp	r3, r2
   2be20:	d009      	beq.n	2be36 <cmp_lfn+0xba>
				return 0;				/* Not matched */
   2be22:	2300      	movs	r3, #0
   2be24:	e022      	b.n	2be6c <cmp_lfn+0xf0>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
   2be26:	230c      	movs	r3, #12
   2be28:	18fb      	adds	r3, r7, r3
   2be2a:	881b      	ldrh	r3, [r3, #0]
   2be2c:	4a13      	ldr	r2, [pc, #76]	; (2be7c <cmp_lfn+0x100>)
   2be2e:	4293      	cmp	r3, r2
   2be30:	d001      	beq.n	2be36 <cmp_lfn+0xba>
   2be32:	2300      	movs	r3, #0
   2be34:	e01a      	b.n	2be6c <cmp_lfn+0xf0>
		}
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
   2be36:	693b      	ldr	r3, [r7, #16]
   2be38:	3301      	adds	r3, #1
   2be3a:	613b      	str	r3, [r7, #16]
   2be3c:	693b      	ldr	r3, [r7, #16]
   2be3e:	2b0c      	cmp	r3, #12
   2be40:	d9b4      	bls.n	2bdac <cmp_lfn+0x30>

	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
   2be42:	683b      	ldr	r3, [r7, #0]
   2be44:	781b      	ldrb	r3, [r3, #0]
   2be46:	001a      	movs	r2, r3
   2be48:	2340      	movs	r3, #64	; 0x40
   2be4a:	4013      	ands	r3, r2
   2be4c:	d00d      	beq.n	2be6a <cmp_lfn+0xee>
   2be4e:	230e      	movs	r3, #14
   2be50:	18fb      	adds	r3, r7, r3
   2be52:	881b      	ldrh	r3, [r3, #0]
   2be54:	2b00      	cmp	r3, #0
   2be56:	d008      	beq.n	2be6a <cmp_lfn+0xee>
   2be58:	697b      	ldr	r3, [r7, #20]
   2be5a:	005b      	lsls	r3, r3, #1
   2be5c:	687a      	ldr	r2, [r7, #4]
   2be5e:	18d3      	adds	r3, r2, r3
   2be60:	881b      	ldrh	r3, [r3, #0]
   2be62:	2b00      	cmp	r3, #0
   2be64:	d001      	beq.n	2be6a <cmp_lfn+0xee>
		return 0;
   2be66:	2300      	movs	r3, #0
   2be68:	e000      	b.n	2be6c <cmp_lfn+0xf0>

	return 1;						/* The part of LFN matched */
   2be6a:	2301      	movs	r3, #1
}
   2be6c:	0018      	movs	r0, r3
   2be6e:	46bd      	mov	sp, r7
   2be70:	b007      	add	sp, #28
   2be72:	bd90      	pop	{r4, r7, pc}
   2be74:	00039fb8 	.word	0x00039fb8
   2be78:	0002ddd1 	.word	0x0002ddd1
   2be7c:	0000ffff 	.word	0x0000ffff

0002be80 <fit_lfn>:
	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
	BYTE *dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
   2be80:	b580      	push	{r7, lr}
   2be82:	b088      	sub	sp, #32
   2be84:	af00      	add	r7, sp, #0
   2be86:	60f8      	str	r0, [r7, #12]
   2be88:	60b9      	str	r1, [r7, #8]
   2be8a:	0019      	movs	r1, r3
   2be8c:	1dfb      	adds	r3, r7, #7
   2be8e:	701a      	strb	r2, [r3, #0]
   2be90:	1dbb      	adds	r3, r7, #6
   2be92:	1c0a      	adds	r2, r1, #0
   2be94:	701a      	strb	r2, [r3, #0]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
   2be96:	68bb      	ldr	r3, [r7, #8]
   2be98:	330d      	adds	r3, #13
   2be9a:	1dba      	adds	r2, r7, #6
   2be9c:	7812      	ldrb	r2, [r2, #0]
   2be9e:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
   2bea0:	68bb      	ldr	r3, [r7, #8]
   2bea2:	330b      	adds	r3, #11
   2bea4:	220f      	movs	r2, #15
   2bea6:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
   2bea8:	68bb      	ldr	r3, [r7, #8]
   2beaa:	330c      	adds	r3, #12
   2beac:	2200      	movs	r2, #0
   2beae:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir+LDIR_FstClusLO, 0);
   2beb0:	68bb      	ldr	r3, [r7, #8]
   2beb2:	331a      	adds	r3, #26
   2beb4:	2200      	movs	r2, #0
   2beb6:	701a      	strb	r2, [r3, #0]
   2beb8:	68bb      	ldr	r3, [r7, #8]
   2beba:	331b      	adds	r3, #27
   2bebc:	2200      	movs	r2, #0
   2bebe:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
   2bec0:	1dfb      	adds	r3, r7, #7
   2bec2:	781b      	ldrb	r3, [r3, #0]
   2bec4:	1e5a      	subs	r2, r3, #1
   2bec6:	0013      	movs	r3, r2
   2bec8:	005b      	lsls	r3, r3, #1
   2beca:	189b      	adds	r3, r3, r2
   2becc:	009b      	lsls	r3, r3, #2
   2bece:	189b      	adds	r3, r3, r2
   2bed0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
   2bed2:	2316      	movs	r3, #22
   2bed4:	18fb      	adds	r3, r7, r3
   2bed6:	2200      	movs	r2, #0
   2bed8:	801a      	strh	r2, [r3, #0]
   2beda:	2300      	movs	r3, #0
   2bedc:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   2bede:	2316      	movs	r3, #22
   2bee0:	18fb      	adds	r3, r7, r3
   2bee2:	881b      	ldrh	r3, [r3, #0]
   2bee4:	4a28      	ldr	r2, [pc, #160]	; (2bf88 <fit_lfn+0x108>)
   2bee6:	4293      	cmp	r3, r2
   2bee8:	d009      	beq.n	2befe <fit_lfn+0x7e>
   2beea:	69fb      	ldr	r3, [r7, #28]
   2beec:	1c5a      	adds	r2, r3, #1
   2beee:	61fa      	str	r2, [r7, #28]
   2bef0:	005b      	lsls	r3, r3, #1
   2bef2:	68fa      	ldr	r2, [r7, #12]
   2bef4:	18d2      	adds	r2, r2, r3
   2bef6:	2316      	movs	r3, #22
   2bef8:	18fb      	adds	r3, r7, r3
   2befa:	8812      	ldrh	r2, [r2, #0]
   2befc:	801a      	strh	r2, [r3, #0]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   2befe:	4a23      	ldr	r2, [pc, #140]	; (2bf8c <fit_lfn+0x10c>)
   2bf00:	69bb      	ldr	r3, [r7, #24]
   2bf02:	18d3      	adds	r3, r2, r3
   2bf04:	781b      	ldrb	r3, [r3, #0]
   2bf06:	001a      	movs	r2, r3
   2bf08:	68bb      	ldr	r3, [r7, #8]
   2bf0a:	189b      	adds	r3, r3, r2
   2bf0c:	2216      	movs	r2, #22
   2bf0e:	18ba      	adds	r2, r7, r2
   2bf10:	8812      	ldrh	r2, [r2, #0]
   2bf12:	b2d2      	uxtb	r2, r2
   2bf14:	701a      	strb	r2, [r3, #0]
   2bf16:	4a1d      	ldr	r2, [pc, #116]	; (2bf8c <fit_lfn+0x10c>)
   2bf18:	69bb      	ldr	r3, [r7, #24]
   2bf1a:	18d3      	adds	r3, r2, r3
   2bf1c:	781b      	ldrb	r3, [r3, #0]
   2bf1e:	3301      	adds	r3, #1
   2bf20:	68ba      	ldr	r2, [r7, #8]
   2bf22:	18d3      	adds	r3, r2, r3
   2bf24:	2216      	movs	r2, #22
   2bf26:	18ba      	adds	r2, r7, r2
   2bf28:	8812      	ldrh	r2, [r2, #0]
   2bf2a:	0a12      	lsrs	r2, r2, #8
   2bf2c:	b292      	uxth	r2, r2
   2bf2e:	b2d2      	uxtb	r2, r2
   2bf30:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   2bf32:	2316      	movs	r3, #22
   2bf34:	18fb      	adds	r3, r7, r3
   2bf36:	881b      	ldrh	r3, [r3, #0]
   2bf38:	2b00      	cmp	r3, #0
   2bf3a:	d104      	bne.n	2bf46 <fit_lfn+0xc6>
   2bf3c:	2316      	movs	r3, #22
   2bf3e:	18fb      	adds	r3, r7, r3
   2bf40:	2201      	movs	r2, #1
   2bf42:	4252      	negs	r2, r2
   2bf44:	801a      	strh	r2, [r3, #0]
	} while (++s < 13);
   2bf46:	69bb      	ldr	r3, [r7, #24]
   2bf48:	3301      	adds	r3, #1
   2bf4a:	61bb      	str	r3, [r7, #24]
   2bf4c:	69bb      	ldr	r3, [r7, #24]
   2bf4e:	2b0c      	cmp	r3, #12
   2bf50:	d9c5      	bls.n	2bede <fit_lfn+0x5e>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
   2bf52:	2316      	movs	r3, #22
   2bf54:	18fb      	adds	r3, r7, r3
   2bf56:	881b      	ldrh	r3, [r3, #0]
   2bf58:	4a0b      	ldr	r2, [pc, #44]	; (2bf88 <fit_lfn+0x108>)
   2bf5a:	4293      	cmp	r3, r2
   2bf5c:	d006      	beq.n	2bf6c <fit_lfn+0xec>
   2bf5e:	69fb      	ldr	r3, [r7, #28]
   2bf60:	005b      	lsls	r3, r3, #1
   2bf62:	68fa      	ldr	r2, [r7, #12]
   2bf64:	18d3      	adds	r3, r2, r3
   2bf66:	881b      	ldrh	r3, [r3, #0]
   2bf68:	2b00      	cmp	r3, #0
   2bf6a:	d105      	bne.n	2bf78 <fit_lfn+0xf8>
   2bf6c:	1dfb      	adds	r3, r7, #7
   2bf6e:	1dfa      	adds	r2, r7, #7
   2bf70:	7812      	ldrb	r2, [r2, #0]
   2bf72:	2140      	movs	r1, #64	; 0x40
   2bf74:	430a      	orrs	r2, r1
   2bf76:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
   2bf78:	68bb      	ldr	r3, [r7, #8]
   2bf7a:	1dfa      	adds	r2, r7, #7
   2bf7c:	7812      	ldrb	r2, [r2, #0]
   2bf7e:	701a      	strb	r2, [r3, #0]
}
   2bf80:	46c0      	nop			; (mov r8, r8)
   2bf82:	46bd      	mov	sp, r7
   2bf84:	b008      	add	sp, #32
   2bf86:	bd80      	pop	{r7, pc}
   2bf88:	0000ffff 	.word	0x0000ffff
   2bf8c:	00039fb8 	.word	0x00039fb8

0002bf90 <gen_numname>:
	BYTE *dst,			/* Pointer to generated SFN */
	const BYTE *src,	/* Pointer to source SFN to be modified */
	const WCHAR *lfn,	/* Pointer to LFN */
	WORD seq			/* Sequence number */
)
{
   2bf90:	b580      	push	{r7, lr}
   2bf92:	b08a      	sub	sp, #40	; 0x28
   2bf94:	af00      	add	r7, sp, #0
   2bf96:	60f8      	str	r0, [r7, #12]
   2bf98:	60b9      	str	r1, [r7, #8]
   2bf9a:	607a      	str	r2, [r7, #4]
   2bf9c:	001a      	movs	r2, r3
   2bf9e:	1cbb      	adds	r3, r7, #2
   2bfa0:	801a      	strh	r2, [r3, #0]
	BYTE ns[8], c;
	UINT i, j;


	mem_cpy(dst, src, 11);
   2bfa2:	68b9      	ldr	r1, [r7, #8]
   2bfa4:	68fb      	ldr	r3, [r7, #12]
   2bfa6:	220b      	movs	r2, #11
   2bfa8:	0018      	movs	r0, r3
   2bfaa:	4b38      	ldr	r3, [pc, #224]	; (2c08c <gen_numname+0xfc>)
   2bfac:	4798      	blx	r3

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
   2bfae:	1cbb      	adds	r3, r7, #2
   2bfb0:	881b      	ldrh	r3, [r3, #0]
   2bfb2:	2b05      	cmp	r3, #5
   2bfb4:	d911      	bls.n	2bfda <gen_numname+0x4a>
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
   2bfb6:	1cbb      	adds	r3, r7, #2
   2bfb8:	881b      	ldrh	r3, [r3, #0]
   2bfba:	b29a      	uxth	r2, r3
   2bfbc:	0852      	lsrs	r2, r2, #1
   2bfbe:	03db      	lsls	r3, r3, #15
   2bfc0:	4313      	orrs	r3, r2
   2bfc2:	b299      	uxth	r1, r3
   2bfc4:	687b      	ldr	r3, [r7, #4]
   2bfc6:	1c9a      	adds	r2, r3, #2
   2bfc8:	607a      	str	r2, [r7, #4]
   2bfca:	881a      	ldrh	r2, [r3, #0]
   2bfcc:	1cbb      	adds	r3, r7, #2
   2bfce:	188a      	adds	r2, r1, r2
   2bfd0:	801a      	strh	r2, [r3, #0]
   2bfd2:	687b      	ldr	r3, [r7, #4]
   2bfd4:	881b      	ldrh	r3, [r3, #0]
   2bfd6:	2b00      	cmp	r3, #0
   2bfd8:	d1ed      	bne.n	2bfb6 <gen_numname+0x26>
	}

	/* itoa (hexdecimal) */
	i = 7;
   2bfda:	2307      	movs	r3, #7
   2bfdc:	623b      	str	r3, [r7, #32]
	do {
		c = (seq % 16) + '0';
   2bfde:	1cbb      	adds	r3, r7, #2
   2bfe0:	881b      	ldrh	r3, [r3, #0]
   2bfe2:	b2db      	uxtb	r3, r3
   2bfe4:	220f      	movs	r2, #15
   2bfe6:	4013      	ands	r3, r2
   2bfe8:	b2da      	uxtb	r2, r3
   2bfea:	2327      	movs	r3, #39	; 0x27
   2bfec:	18fb      	adds	r3, r7, r3
   2bfee:	3230      	adds	r2, #48	; 0x30
   2bff0:	701a      	strb	r2, [r3, #0]
		if (c > '9') c += 7;
   2bff2:	2327      	movs	r3, #39	; 0x27
   2bff4:	18fb      	adds	r3, r7, r3
   2bff6:	781b      	ldrb	r3, [r3, #0]
   2bff8:	2b39      	cmp	r3, #57	; 0x39
   2bffa:	d906      	bls.n	2c00a <gen_numname+0x7a>
   2bffc:	2327      	movs	r3, #39	; 0x27
   2bffe:	18fb      	adds	r3, r7, r3
   2c000:	2227      	movs	r2, #39	; 0x27
   2c002:	18ba      	adds	r2, r7, r2
   2c004:	7812      	ldrb	r2, [r2, #0]
   2c006:	3207      	adds	r2, #7
   2c008:	701a      	strb	r2, [r3, #0]
		ns[i--] = c;
   2c00a:	6a3b      	ldr	r3, [r7, #32]
   2c00c:	1e5a      	subs	r2, r3, #1
   2c00e:	623a      	str	r2, [r7, #32]
   2c010:	2214      	movs	r2, #20
   2c012:	18ba      	adds	r2, r7, r2
   2c014:	2127      	movs	r1, #39	; 0x27
   2c016:	1879      	adds	r1, r7, r1
   2c018:	7809      	ldrb	r1, [r1, #0]
   2c01a:	54d1      	strb	r1, [r2, r3]
		seq /= 16;
   2c01c:	1cbb      	adds	r3, r7, #2
   2c01e:	1cba      	adds	r2, r7, #2
   2c020:	8812      	ldrh	r2, [r2, #0]
   2c022:	0912      	lsrs	r2, r2, #4
   2c024:	801a      	strh	r2, [r3, #0]
	} while (seq);
   2c026:	1cbb      	adds	r3, r7, #2
   2c028:	881b      	ldrh	r3, [r3, #0]
   2c02a:	2b00      	cmp	r3, #0
   2c02c:	d1d7      	bne.n	2bfde <gen_numname+0x4e>
	ns[i] = '~';
   2c02e:	2314      	movs	r3, #20
   2c030:	18fa      	adds	r2, r7, r3
   2c032:	6a3b      	ldr	r3, [r7, #32]
   2c034:	18d3      	adds	r3, r2, r3
   2c036:	227e      	movs	r2, #126	; 0x7e
   2c038:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
   2c03a:	2300      	movs	r3, #0
   2c03c:	61fb      	str	r3, [r7, #28]
   2c03e:	e002      	b.n	2c046 <gen_numname+0xb6>
   2c040:	69fb      	ldr	r3, [r7, #28]
   2c042:	3301      	adds	r3, #1
   2c044:	61fb      	str	r3, [r7, #28]
   2c046:	69fa      	ldr	r2, [r7, #28]
   2c048:	6a3b      	ldr	r3, [r7, #32]
   2c04a:	429a      	cmp	r2, r3
   2c04c:	d205      	bcs.n	2c05a <gen_numname+0xca>
   2c04e:	68fa      	ldr	r2, [r7, #12]
   2c050:	69fb      	ldr	r3, [r7, #28]
   2c052:	18d3      	adds	r3, r2, r3
   2c054:	781b      	ldrb	r3, [r3, #0]
   2c056:	2b20      	cmp	r3, #32
   2c058:	d1f2      	bne.n	2c040 <gen_numname+0xb0>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   2c05a:	69fb      	ldr	r3, [r7, #28]
   2c05c:	1c5a      	adds	r2, r3, #1
   2c05e:	61fa      	str	r2, [r7, #28]
   2c060:	68fa      	ldr	r2, [r7, #12]
   2c062:	18d2      	adds	r2, r2, r3
   2c064:	6a3b      	ldr	r3, [r7, #32]
   2c066:	2b07      	cmp	r3, #7
   2c068:	d806      	bhi.n	2c078 <gen_numname+0xe8>
   2c06a:	6a3b      	ldr	r3, [r7, #32]
   2c06c:	1c59      	adds	r1, r3, #1
   2c06e:	6239      	str	r1, [r7, #32]
   2c070:	2114      	movs	r1, #20
   2c072:	1879      	adds	r1, r7, r1
   2c074:	5ccb      	ldrb	r3, [r1, r3]
   2c076:	e000      	b.n	2c07a <gen_numname+0xea>
   2c078:	2320      	movs	r3, #32
   2c07a:	7013      	strb	r3, [r2, #0]
	} while (j < 8);
   2c07c:	69fb      	ldr	r3, [r7, #28]
   2c07e:	2b07      	cmp	r3, #7
   2c080:	d9eb      	bls.n	2c05a <gen_numname+0xca>
}
   2c082:	46c0      	nop			; (mov r8, r8)
   2c084:	46bd      	mov	sp, r7
   2c086:	b00a      	add	sp, #40	; 0x28
   2c088:	bd80      	pop	{r7, pc}
   2c08a:	46c0      	nop			; (mov r8, r8)
   2c08c:	0002b135 	.word	0x0002b135

0002c090 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
   2c090:	b580      	push	{r7, lr}
   2c092:	b084      	sub	sp, #16
   2c094:	af00      	add	r7, sp, #0
   2c096:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
   2c098:	230f      	movs	r3, #15
   2c09a:	18fb      	adds	r3, r7, r3
   2c09c:	2200      	movs	r2, #0
   2c09e:	701a      	strb	r2, [r3, #0]
	UINT n = 11;
   2c0a0:	230b      	movs	r3, #11
   2c0a2:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
   2c0a4:	230f      	movs	r3, #15
   2c0a6:	18fb      	adds	r3, r7, r3
   2c0a8:	781b      	ldrb	r3, [r3, #0]
   2c0aa:	b2da      	uxtb	r2, r3
   2c0ac:	0852      	lsrs	r2, r2, #1
   2c0ae:	01db      	lsls	r3, r3, #7
   2c0b0:	4313      	orrs	r3, r2
   2c0b2:	b2d9      	uxtb	r1, r3
   2c0b4:	687b      	ldr	r3, [r7, #4]
   2c0b6:	1c5a      	adds	r2, r3, #1
   2c0b8:	607a      	str	r2, [r7, #4]
   2c0ba:	781a      	ldrb	r2, [r3, #0]
   2c0bc:	230f      	movs	r3, #15
   2c0be:	18fb      	adds	r3, r7, r3
   2c0c0:	188a      	adds	r2, r1, r2
   2c0c2:	701a      	strb	r2, [r3, #0]
   2c0c4:	68bb      	ldr	r3, [r7, #8]
   2c0c6:	3b01      	subs	r3, #1
   2c0c8:	60bb      	str	r3, [r7, #8]
   2c0ca:	68bb      	ldr	r3, [r7, #8]
   2c0cc:	2b00      	cmp	r3, #0
   2c0ce:	d1e9      	bne.n	2c0a4 <sum_sfn+0x14>
	return sum;
   2c0d0:	230f      	movs	r3, #15
   2c0d2:	18fb      	adds	r3, r7, r3
   2c0d4:	781b      	ldrb	r3, [r3, #0]
}
   2c0d6:	0018      	movs	r0, r3
   2c0d8:	46bd      	mov	sp, r7
   2c0da:	b004      	add	sp, #16
   2c0dc:	bd80      	pop	{r7, pc}
	...

0002c0e0 <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
   2c0e0:	b590      	push	{r4, r7, lr}
   2c0e2:	b087      	sub	sp, #28
   2c0e4:	af00      	add	r7, sp, #0
   2c0e6:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
   2c0e8:	2317      	movs	r3, #23
   2c0ea:	18fc      	adds	r4, r7, r3
   2c0ec:	687b      	ldr	r3, [r7, #4]
   2c0ee:	2100      	movs	r1, #0
   2c0f0:	0018      	movs	r0, r3
   2c0f2:	4b74      	ldr	r3, [pc, #464]	; (2c2c4 <dir_find+0x1e4>)
   2c0f4:	4798      	blx	r3
   2c0f6:	0003      	movs	r3, r0
   2c0f8:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   2c0fa:	2317      	movs	r3, #23
   2c0fc:	18fb      	adds	r3, r7, r3
   2c0fe:	781b      	ldrb	r3, [r3, #0]
   2c100:	2b00      	cmp	r3, #0
   2c102:	d003      	beq.n	2c10c <dir_find+0x2c>
   2c104:	2317      	movs	r3, #23
   2c106:	18fb      	adds	r3, r7, r3
   2c108:	781b      	ldrb	r3, [r3, #0]
   2c10a:	e0d6      	b.n	2c2ba <dir_find+0x1da>

#if _USE_LFN
	ord = sum = 0xFF;
   2c10c:	2314      	movs	r3, #20
   2c10e:	18fb      	adds	r3, r7, r3
   2c110:	22ff      	movs	r2, #255	; 0xff
   2c112:	701a      	strb	r2, [r3, #0]
   2c114:	2315      	movs	r3, #21
   2c116:	18fb      	adds	r3, r7, r3
   2c118:	2214      	movs	r2, #20
   2c11a:	18ba      	adds	r2, r7, r2
   2c11c:	7812      	ldrb	r2, [r2, #0]
   2c11e:	701a      	strb	r2, [r3, #0]
#endif
	do {
		res = move_window(dj->fs, dj->sect);
   2c120:	687b      	ldr	r3, [r7, #4]
   2c122:	681a      	ldr	r2, [r3, #0]
   2c124:	687b      	ldr	r3, [r7, #4]
   2c126:	691b      	ldr	r3, [r3, #16]
   2c128:	2117      	movs	r1, #23
   2c12a:	187c      	adds	r4, r7, r1
   2c12c:	0019      	movs	r1, r3
   2c12e:	0010      	movs	r0, r2
   2c130:	4b65      	ldr	r3, [pc, #404]	; (2c2c8 <dir_find+0x1e8>)
   2c132:	4798      	blx	r3
   2c134:	0003      	movs	r3, r0
   2c136:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   2c138:	2317      	movs	r3, #23
   2c13a:	18fb      	adds	r3, r7, r3
   2c13c:	781b      	ldrb	r3, [r3, #0]
   2c13e:	2b00      	cmp	r3, #0
   2c140:	d000      	beq.n	2c144 <dir_find+0x64>
   2c142:	e0b2      	b.n	2c2aa <dir_find+0x1ca>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
   2c144:	687b      	ldr	r3, [r7, #4]
   2c146:	695b      	ldr	r3, [r3, #20]
   2c148:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
   2c14a:	2316      	movs	r3, #22
   2c14c:	18fb      	adds	r3, r7, r3
   2c14e:	693a      	ldr	r2, [r7, #16]
   2c150:	7812      	ldrb	r2, [r2, #0]
   2c152:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   2c154:	2316      	movs	r3, #22
   2c156:	18fb      	adds	r3, r7, r3
   2c158:	781b      	ldrb	r3, [r3, #0]
   2c15a:	2b00      	cmp	r3, #0
   2c15c:	d104      	bne.n	2c168 <dir_find+0x88>
   2c15e:	2317      	movs	r3, #23
   2c160:	18fb      	adds	r3, r7, r3
   2c162:	2204      	movs	r2, #4
   2c164:	701a      	strb	r2, [r3, #0]
   2c166:	e0a5      	b.n	2c2b4 <dir_find+0x1d4>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
   2c168:	693b      	ldr	r3, [r7, #16]
   2c16a:	330b      	adds	r3, #11
   2c16c:	781a      	ldrb	r2, [r3, #0]
   2c16e:	230f      	movs	r3, #15
   2c170:	18fb      	adds	r3, r7, r3
   2c172:	213f      	movs	r1, #63	; 0x3f
   2c174:	400a      	ands	r2, r1
   2c176:	701a      	strb	r2, [r3, #0]
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   2c178:	2316      	movs	r3, #22
   2c17a:	18fb      	adds	r3, r7, r3
   2c17c:	781b      	ldrb	r3, [r3, #0]
   2c17e:	2be5      	cmp	r3, #229	; 0xe5
   2c180:	d00a      	beq.n	2c198 <dir_find+0xb8>
   2c182:	230f      	movs	r3, #15
   2c184:	18fb      	adds	r3, r7, r3
   2c186:	781b      	ldrb	r3, [r3, #0]
   2c188:	2208      	movs	r2, #8
   2c18a:	4013      	ands	r3, r2
   2c18c:	d009      	beq.n	2c1a2 <dir_find+0xc2>
   2c18e:	230f      	movs	r3, #15
   2c190:	18fb      	adds	r3, r7, r3
   2c192:	781b      	ldrb	r3, [r3, #0]
   2c194:	2b0f      	cmp	r3, #15
   2c196:	d004      	beq.n	2c1a2 <dir_find+0xc2>
			ord = 0xFF;
   2c198:	2315      	movs	r3, #21
   2c19a:	18fb      	adds	r3, r7, r3
   2c19c:	22ff      	movs	r2, #255	; 0xff
   2c19e:	701a      	strb	r2, [r3, #0]
   2c1a0:	e073      	b.n	2c28a <dir_find+0x1aa>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
   2c1a2:	230f      	movs	r3, #15
   2c1a4:	18fb      	adds	r3, r7, r3
   2c1a6:	781b      	ldrb	r3, [r3, #0]
   2c1a8:	2b0f      	cmp	r3, #15
   2c1aa:	d145      	bne.n	2c238 <dir_find+0x158>
				if (dj->lfn) {
   2c1ac:	687b      	ldr	r3, [r7, #4]
   2c1ae:	69db      	ldr	r3, [r3, #28]
   2c1b0:	2b00      	cmp	r3, #0
   2c1b2:	d100      	bne.n	2c1b6 <dir_find+0xd6>
   2c1b4:	e069      	b.n	2c28a <dir_find+0x1aa>
					if (c & LLE) {		/* Is it start of LFN sequence? */
   2c1b6:	2316      	movs	r3, #22
   2c1b8:	18fb      	adds	r3, r7, r3
   2c1ba:	781b      	ldrb	r3, [r3, #0]
   2c1bc:	2240      	movs	r2, #64	; 0x40
   2c1be:	4013      	ands	r3, r2
   2c1c0:	d016      	beq.n	2c1f0 <dir_find+0x110>
						sum = dir[LDIR_Chksum];
   2c1c2:	2314      	movs	r3, #20
   2c1c4:	18fb      	adds	r3, r7, r3
   2c1c6:	693a      	ldr	r2, [r7, #16]
   2c1c8:	7b52      	ldrb	r2, [r2, #13]
   2c1ca:	701a      	strb	r2, [r3, #0]
						c &= ~LLE; ord = c;	/* LFN start order */
   2c1cc:	2316      	movs	r3, #22
   2c1ce:	18fb      	adds	r3, r7, r3
   2c1d0:	2216      	movs	r2, #22
   2c1d2:	18ba      	adds	r2, r7, r2
   2c1d4:	7812      	ldrb	r2, [r2, #0]
   2c1d6:	2140      	movs	r1, #64	; 0x40
   2c1d8:	438a      	bics	r2, r1
   2c1da:	701a      	strb	r2, [r3, #0]
   2c1dc:	2315      	movs	r3, #21
   2c1de:	18fb      	adds	r3, r7, r3
   2c1e0:	2216      	movs	r2, #22
   2c1e2:	18ba      	adds	r2, r7, r2
   2c1e4:	7812      	ldrb	r2, [r2, #0]
   2c1e6:	701a      	strb	r2, [r3, #0]
						dj->lfn_idx = dj->index;
   2c1e8:	687b      	ldr	r3, [r7, #4]
   2c1ea:	88da      	ldrh	r2, [r3, #6]
   2c1ec:	687b      	ldr	r3, [r7, #4]
   2c1ee:	841a      	strh	r2, [r3, #32]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   2c1f0:	2316      	movs	r3, #22
   2c1f2:	18fa      	adds	r2, r7, r3
   2c1f4:	2315      	movs	r3, #21
   2c1f6:	18fb      	adds	r3, r7, r3
   2c1f8:	7812      	ldrb	r2, [r2, #0]
   2c1fa:	781b      	ldrb	r3, [r3, #0]
   2c1fc:	429a      	cmp	r2, r3
   2c1fe:	d116      	bne.n	2c22e <dir_find+0x14e>
   2c200:	693b      	ldr	r3, [r7, #16]
   2c202:	330d      	adds	r3, #13
   2c204:	781b      	ldrb	r3, [r3, #0]
   2c206:	2214      	movs	r2, #20
   2c208:	18ba      	adds	r2, r7, r2
   2c20a:	7812      	ldrb	r2, [r2, #0]
   2c20c:	429a      	cmp	r2, r3
   2c20e:	d10e      	bne.n	2c22e <dir_find+0x14e>
   2c210:	687b      	ldr	r3, [r7, #4]
   2c212:	69db      	ldr	r3, [r3, #28]
   2c214:	693a      	ldr	r2, [r7, #16]
   2c216:	0011      	movs	r1, r2
   2c218:	0018      	movs	r0, r3
   2c21a:	4b2c      	ldr	r3, [pc, #176]	; (2c2cc <dir_find+0x1ec>)
   2c21c:	4798      	blx	r3
   2c21e:	1e03      	subs	r3, r0, #0
   2c220:	d005      	beq.n	2c22e <dir_find+0x14e>
   2c222:	2315      	movs	r3, #21
   2c224:	18fb      	adds	r3, r7, r3
   2c226:	781b      	ldrb	r3, [r3, #0]
   2c228:	3b01      	subs	r3, #1
   2c22a:	b2da      	uxtb	r2, r3
   2c22c:	e000      	b.n	2c230 <dir_find+0x150>
   2c22e:	22ff      	movs	r2, #255	; 0xff
   2c230:	2315      	movs	r3, #21
   2c232:	18fb      	adds	r3, r7, r3
   2c234:	701a      	strb	r2, [r3, #0]
   2c236:	e028      	b.n	2c28a <dir_find+0x1aa>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   2c238:	2315      	movs	r3, #21
   2c23a:	18fb      	adds	r3, r7, r3
   2c23c:	781b      	ldrb	r3, [r3, #0]
   2c23e:	2b00      	cmp	r3, #0
   2c240:	d10a      	bne.n	2c258 <dir_find+0x178>
   2c242:	693b      	ldr	r3, [r7, #16]
   2c244:	0018      	movs	r0, r3
   2c246:	4b22      	ldr	r3, [pc, #136]	; (2c2d0 <dir_find+0x1f0>)
   2c248:	4798      	blx	r3
   2c24a:	0003      	movs	r3, r0
   2c24c:	001a      	movs	r2, r3
   2c24e:	2314      	movs	r3, #20
   2c250:	18fb      	adds	r3, r7, r3
   2c252:	781b      	ldrb	r3, [r3, #0]
   2c254:	4293      	cmp	r3, r2
   2c256:	d02a      	beq.n	2c2ae <dir_find+0x1ce>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   2c258:	2315      	movs	r3, #21
   2c25a:	18fb      	adds	r3, r7, r3
   2c25c:	22ff      	movs	r2, #255	; 0xff
   2c25e:	701a      	strb	r2, [r3, #0]
   2c260:	687b      	ldr	r3, [r7, #4]
   2c262:	2201      	movs	r2, #1
   2c264:	4252      	negs	r2, r2
   2c266:	841a      	strh	r2, [r3, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   2c268:	687b      	ldr	r3, [r7, #4]
   2c26a:	699b      	ldr	r3, [r3, #24]
   2c26c:	330b      	adds	r3, #11
   2c26e:	781b      	ldrb	r3, [r3, #0]
   2c270:	001a      	movs	r2, r3
   2c272:	2301      	movs	r3, #1
   2c274:	4013      	ands	r3, r2
   2c276:	d108      	bne.n	2c28a <dir_find+0x1aa>
   2c278:	687b      	ldr	r3, [r7, #4]
   2c27a:	6999      	ldr	r1, [r3, #24]
   2c27c:	693b      	ldr	r3, [r7, #16]
   2c27e:	220b      	movs	r2, #11
   2c280:	0018      	movs	r0, r3
   2c282:	4b14      	ldr	r3, [pc, #80]	; (2c2d4 <dir_find+0x1f4>)
   2c284:	4798      	blx	r3
   2c286:	1e03      	subs	r3, r0, #0
   2c288:	d013      	beq.n	2c2b2 <dir_find+0x1d2>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
   2c28a:	2317      	movs	r3, #23
   2c28c:	18fc      	adds	r4, r7, r3
   2c28e:	687b      	ldr	r3, [r7, #4]
   2c290:	2100      	movs	r1, #0
   2c292:	0018      	movs	r0, r3
   2c294:	4b10      	ldr	r3, [pc, #64]	; (2c2d8 <dir_find+0x1f8>)
   2c296:	4798      	blx	r3
   2c298:	0003      	movs	r3, r0
   2c29a:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   2c29c:	2317      	movs	r3, #23
   2c29e:	18fb      	adds	r3, r7, r3
   2c2a0:	781b      	ldrb	r3, [r3, #0]
   2c2a2:	2b00      	cmp	r3, #0
   2c2a4:	d100      	bne.n	2c2a8 <dir_find+0x1c8>
   2c2a6:	e73b      	b.n	2c120 <dir_find+0x40>
   2c2a8:	e004      	b.n	2c2b4 <dir_find+0x1d4>
		if (res != FR_OK) break;
   2c2aa:	46c0      	nop			; (mov r8, r8)
   2c2ac:	e002      	b.n	2c2b4 <dir_find+0x1d4>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   2c2ae:	46c0      	nop			; (mov r8, r8)
   2c2b0:	e000      	b.n	2c2b4 <dir_find+0x1d4>
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   2c2b2:	46c0      	nop			; (mov r8, r8)

	return res;
   2c2b4:	2317      	movs	r3, #23
   2c2b6:	18fb      	adds	r3, r7, r3
   2c2b8:	781b      	ldrb	r3, [r3, #0]
}
   2c2ba:	0018      	movs	r0, r3
   2c2bc:	46bd      	mov	sp, r7
   2c2be:	b007      	add	sp, #28
   2c2c0:	bd90      	pop	{r4, r7, pc}
   2c2c2:	46c0      	nop			; (mov r8, r8)
   2c2c4:	0002ba5d 	.word	0x0002ba5d
   2c2c8:	0002b219 	.word	0x0002b219
   2c2cc:	0002bd7d 	.word	0x0002bd7d
   2c2d0:	0002c091 	.word	0x0002c091
   2c2d4:	0002b19d 	.word	0x0002b19d
   2c2d8:	0002bb8d 	.word	0x0002bb8d

0002c2dc <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
   2c2dc:	b590      	push	{r4, r7, lr}
   2c2de:	b08d      	sub	sp, #52	; 0x34
   2c2e0:	af00      	add	r7, sp, #0
   2c2e2:	6078      	str	r0, [r7, #4]
	WORD n, ne, is;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dj->fn; lfn = dj->lfn;
   2c2e4:	687b      	ldr	r3, [r7, #4]
   2c2e6:	699b      	ldr	r3, [r3, #24]
   2c2e8:	627b      	str	r3, [r7, #36]	; 0x24
   2c2ea:	687b      	ldr	r3, [r7, #4]
   2c2ec:	69db      	ldr	r3, [r3, #28]
   2c2ee:	623b      	str	r3, [r7, #32]
	mem_cpy(sn, fn, 12);
   2c2f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2c2f2:	230c      	movs	r3, #12
   2c2f4:	18fb      	adds	r3, r7, r3
   2c2f6:	220c      	movs	r2, #12
   2c2f8:	0018      	movs	r0, r3
   2c2fa:	4bc8      	ldr	r3, [pc, #800]	; (2c61c <dir_register+0x340>)
   2c2fc:	4798      	blx	r3

	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
   2c2fe:	230c      	movs	r3, #12
   2c300:	18fb      	adds	r3, r7, r3
   2c302:	7adb      	ldrb	r3, [r3, #11]
   2c304:	001a      	movs	r2, r3
   2c306:	2301      	movs	r3, #1
   2c308:	4013      	ands	r3, r2
   2c30a:	d048      	beq.n	2c39e <dir_register+0xc2>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
   2c30c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2c30e:	330b      	adds	r3, #11
   2c310:	2200      	movs	r2, #0
   2c312:	701a      	strb	r2, [r3, #0]
   2c314:	687b      	ldr	r3, [r7, #4]
   2c316:	2200      	movs	r2, #0
   2c318:	61da      	str	r2, [r3, #28]
		for (n = 1; n < 100; n++) {
   2c31a:	232c      	movs	r3, #44	; 0x2c
   2c31c:	18fb      	adds	r3, r7, r3
   2c31e:	2201      	movs	r2, #1
   2c320:	801a      	strh	r2, [r3, #0]
   2c322:	e01c      	b.n	2c35e <dir_register+0x82>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
   2c324:	232c      	movs	r3, #44	; 0x2c
   2c326:	18fb      	adds	r3, r7, r3
   2c328:	881b      	ldrh	r3, [r3, #0]
   2c32a:	6a3a      	ldr	r2, [r7, #32]
   2c32c:	210c      	movs	r1, #12
   2c32e:	1879      	adds	r1, r7, r1
   2c330:	6a78      	ldr	r0, [r7, #36]	; 0x24
   2c332:	4cbb      	ldr	r4, [pc, #748]	; (2c620 <dir_register+0x344>)
   2c334:	47a0      	blx	r4
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
   2c336:	232f      	movs	r3, #47	; 0x2f
   2c338:	18fc      	adds	r4, r7, r3
   2c33a:	687b      	ldr	r3, [r7, #4]
   2c33c:	0018      	movs	r0, r3
   2c33e:	4bb9      	ldr	r3, [pc, #740]	; (2c624 <dir_register+0x348>)
   2c340:	4798      	blx	r3
   2c342:	0003      	movs	r3, r0
   2c344:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2c346:	232f      	movs	r3, #47	; 0x2f
   2c348:	18fb      	adds	r3, r7, r3
   2c34a:	781b      	ldrb	r3, [r3, #0]
   2c34c:	2b00      	cmp	r3, #0
   2c34e:	d10c      	bne.n	2c36a <dir_register+0x8e>
		for (n = 1; n < 100; n++) {
   2c350:	232c      	movs	r3, #44	; 0x2c
   2c352:	18fb      	adds	r3, r7, r3
   2c354:	881a      	ldrh	r2, [r3, #0]
   2c356:	232c      	movs	r3, #44	; 0x2c
   2c358:	18fb      	adds	r3, r7, r3
   2c35a:	3201      	adds	r2, #1
   2c35c:	801a      	strh	r2, [r3, #0]
   2c35e:	232c      	movs	r3, #44	; 0x2c
   2c360:	18fb      	adds	r3, r7, r3
   2c362:	881b      	ldrh	r3, [r3, #0]
   2c364:	2b63      	cmp	r3, #99	; 0x63
   2c366:	d9dd      	bls.n	2c324 <dir_register+0x48>
   2c368:	e000      	b.n	2c36c <dir_register+0x90>
			if (res != FR_OK) break;
   2c36a:	46c0      	nop			; (mov r8, r8)
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
   2c36c:	232c      	movs	r3, #44	; 0x2c
   2c36e:	18fb      	adds	r3, r7, r3
   2c370:	881b      	ldrh	r3, [r3, #0]
   2c372:	2b64      	cmp	r3, #100	; 0x64
   2c374:	d101      	bne.n	2c37a <dir_register+0x9e>
   2c376:	2307      	movs	r3, #7
   2c378:	e14c      	b.n	2c614 <dir_register+0x338>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
   2c37a:	232f      	movs	r3, #47	; 0x2f
   2c37c:	18fb      	adds	r3, r7, r3
   2c37e:	781b      	ldrb	r3, [r3, #0]
   2c380:	2b04      	cmp	r3, #4
   2c382:	d003      	beq.n	2c38c <dir_register+0xb0>
   2c384:	232f      	movs	r3, #47	; 0x2f
   2c386:	18fb      	adds	r3, r7, r3
   2c388:	781b      	ldrb	r3, [r3, #0]
   2c38a:	e143      	b.n	2c614 <dir_register+0x338>
		fn[NS] = sn[NS]; dj->lfn = lfn;
   2c38c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2c38e:	330b      	adds	r3, #11
   2c390:	220c      	movs	r2, #12
   2c392:	18ba      	adds	r2, r7, r2
   2c394:	7ad2      	ldrb	r2, [r2, #11]
   2c396:	701a      	strb	r2, [r3, #0]
   2c398:	687b      	ldr	r3, [r7, #4]
   2c39a:	6a3a      	ldr	r2, [r7, #32]
   2c39c:	61da      	str	r2, [r3, #28]
	}

	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
   2c39e:	230c      	movs	r3, #12
   2c3a0:	18fb      	adds	r3, r7, r3
   2c3a2:	7adb      	ldrb	r3, [r3, #11]
   2c3a4:	001a      	movs	r2, r3
   2c3a6:	2302      	movs	r3, #2
   2c3a8:	4013      	ands	r3, r2
   2c3aa:	d023      	beq.n	2c3f4 <dir_register+0x118>
		for (ne = 0; lfn[ne]; ne++) ;
   2c3ac:	232a      	movs	r3, #42	; 0x2a
   2c3ae:	18fb      	adds	r3, r7, r3
   2c3b0:	2200      	movs	r2, #0
   2c3b2:	801a      	strh	r2, [r3, #0]
   2c3b4:	e006      	b.n	2c3c4 <dir_register+0xe8>
   2c3b6:	232a      	movs	r3, #42	; 0x2a
   2c3b8:	18fb      	adds	r3, r7, r3
   2c3ba:	881a      	ldrh	r2, [r3, #0]
   2c3bc:	232a      	movs	r3, #42	; 0x2a
   2c3be:	18fb      	adds	r3, r7, r3
   2c3c0:	3201      	adds	r2, #1
   2c3c2:	801a      	strh	r2, [r3, #0]
   2c3c4:	232a      	movs	r3, #42	; 0x2a
   2c3c6:	18fb      	adds	r3, r7, r3
   2c3c8:	881b      	ldrh	r3, [r3, #0]
   2c3ca:	005b      	lsls	r3, r3, #1
   2c3cc:	6a3a      	ldr	r2, [r7, #32]
   2c3ce:	18d3      	adds	r3, r2, r3
   2c3d0:	881b      	ldrh	r3, [r3, #0]
   2c3d2:	2b00      	cmp	r3, #0
   2c3d4:	d1ef      	bne.n	2c3b6 <dir_register+0xda>
		ne = (ne + 25) / 13;
   2c3d6:	232a      	movs	r3, #42	; 0x2a
   2c3d8:	18fb      	adds	r3, r7, r3
   2c3da:	881b      	ldrh	r3, [r3, #0]
   2c3dc:	3319      	adds	r3, #25
   2c3de:	001a      	movs	r2, r3
   2c3e0:	4b91      	ldr	r3, [pc, #580]	; (2c628 <dir_register+0x34c>)
   2c3e2:	210d      	movs	r1, #13
   2c3e4:	0010      	movs	r0, r2
   2c3e6:	4798      	blx	r3
   2c3e8:	0003      	movs	r3, r0
   2c3ea:	001a      	movs	r2, r3
   2c3ec:	232a      	movs	r3, #42	; 0x2a
   2c3ee:	18fb      	adds	r3, r7, r3
   2c3f0:	801a      	strh	r2, [r3, #0]
   2c3f2:	e003      	b.n	2c3fc <dir_register+0x120>
	} else {						/* Otherwise reserve only an SFN entry. */
		ne = 1;
   2c3f4:	232a      	movs	r3, #42	; 0x2a
   2c3f6:	18fb      	adds	r3, r7, r3
   2c3f8:	2201      	movs	r2, #1
   2c3fa:	801a      	strh	r2, [r3, #0]
	}

	/* Reserve contiguous entries */
	res = dir_sdi(dj, 0);
   2c3fc:	232f      	movs	r3, #47	; 0x2f
   2c3fe:	18fc      	adds	r4, r7, r3
   2c400:	687b      	ldr	r3, [r7, #4]
   2c402:	2100      	movs	r1, #0
   2c404:	0018      	movs	r0, r3
   2c406:	4b89      	ldr	r3, [pc, #548]	; (2c62c <dir_register+0x350>)
   2c408:	4798      	blx	r3
   2c40a:	0003      	movs	r3, r0
   2c40c:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   2c40e:	232f      	movs	r3, #47	; 0x2f
   2c410:	18fb      	adds	r3, r7, r3
   2c412:	781b      	ldrb	r3, [r3, #0]
   2c414:	2b00      	cmp	r3, #0
   2c416:	d003      	beq.n	2c420 <dir_register+0x144>
   2c418:	232f      	movs	r3, #47	; 0x2f
   2c41a:	18fb      	adds	r3, r7, r3
   2c41c:	781b      	ldrb	r3, [r3, #0]
   2c41e:	e0f9      	b.n	2c614 <dir_register+0x338>
	n = is = 0;
   2c420:	2328      	movs	r3, #40	; 0x28
   2c422:	18fb      	adds	r3, r7, r3
   2c424:	2200      	movs	r2, #0
   2c426:	801a      	strh	r2, [r3, #0]
   2c428:	232c      	movs	r3, #44	; 0x2c
   2c42a:	18fb      	adds	r3, r7, r3
   2c42c:	2228      	movs	r2, #40	; 0x28
   2c42e:	18ba      	adds	r2, r7, r2
   2c430:	8812      	ldrh	r2, [r2, #0]
   2c432:	801a      	strh	r2, [r3, #0]
	do {
		res = move_window(dj->fs, dj->sect);
   2c434:	687b      	ldr	r3, [r7, #4]
   2c436:	681a      	ldr	r2, [r3, #0]
   2c438:	687b      	ldr	r3, [r7, #4]
   2c43a:	691b      	ldr	r3, [r3, #16]
   2c43c:	212f      	movs	r1, #47	; 0x2f
   2c43e:	187c      	adds	r4, r7, r1
   2c440:	0019      	movs	r1, r3
   2c442:	0010      	movs	r0, r2
   2c444:	4b7a      	ldr	r3, [pc, #488]	; (2c630 <dir_register+0x354>)
   2c446:	4798      	blx	r3
   2c448:	0003      	movs	r3, r0
   2c44a:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   2c44c:	232f      	movs	r3, #47	; 0x2f
   2c44e:	18fb      	adds	r3, r7, r3
   2c450:	781b      	ldrb	r3, [r3, #0]
   2c452:	2b00      	cmp	r3, #0
   2c454:	d13c      	bne.n	2c4d0 <dir_register+0x1f4>
		c = *dj->dir;				/* Check the entry status */
   2c456:	687b      	ldr	r3, [r7, #4]
   2c458:	695a      	ldr	r2, [r3, #20]
   2c45a:	231f      	movs	r3, #31
   2c45c:	18fb      	adds	r3, r7, r3
   2c45e:	7812      	ldrb	r2, [r2, #0]
   2c460:	701a      	strb	r2, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
   2c462:	231f      	movs	r3, #31
   2c464:	18fb      	adds	r3, r7, r3
   2c466:	781b      	ldrb	r3, [r3, #0]
   2c468:	2be5      	cmp	r3, #229	; 0xe5
   2c46a:	d004      	beq.n	2c476 <dir_register+0x19a>
   2c46c:	231f      	movs	r3, #31
   2c46e:	18fb      	adds	r3, r7, r3
   2c470:	781b      	ldrb	r3, [r3, #0]
   2c472:	2b00      	cmp	r3, #0
   2c474:	d119      	bne.n	2c4aa <dir_register+0x1ce>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
   2c476:	232c      	movs	r3, #44	; 0x2c
   2c478:	18fb      	adds	r3, r7, r3
   2c47a:	881b      	ldrh	r3, [r3, #0]
   2c47c:	2b00      	cmp	r3, #0
   2c47e:	d104      	bne.n	2c48a <dir_register+0x1ae>
   2c480:	2328      	movs	r3, #40	; 0x28
   2c482:	18fb      	adds	r3, r7, r3
   2c484:	687a      	ldr	r2, [r7, #4]
   2c486:	88d2      	ldrh	r2, [r2, #6]
   2c488:	801a      	strh	r2, [r3, #0]
			if (++n == ne) break;	/* A contiguous entry that required count is found */
   2c48a:	232c      	movs	r3, #44	; 0x2c
   2c48c:	18fb      	adds	r3, r7, r3
   2c48e:	222c      	movs	r2, #44	; 0x2c
   2c490:	18ba      	adds	r2, r7, r2
   2c492:	8812      	ldrh	r2, [r2, #0]
   2c494:	3201      	adds	r2, #1
   2c496:	801a      	strh	r2, [r3, #0]
   2c498:	232c      	movs	r3, #44	; 0x2c
   2c49a:	18fa      	adds	r2, r7, r3
   2c49c:	232a      	movs	r3, #42	; 0x2a
   2c49e:	18fb      	adds	r3, r7, r3
   2c4a0:	8812      	ldrh	r2, [r2, #0]
   2c4a2:	881b      	ldrh	r3, [r3, #0]
   2c4a4:	429a      	cmp	r2, r3
   2c4a6:	d104      	bne.n	2c4b2 <dir_register+0x1d6>
   2c4a8:	e013      	b.n	2c4d2 <dir_register+0x1f6>
		} else {
			n = 0;					/* Not a blank entry. Restart to search */
   2c4aa:	232c      	movs	r3, #44	; 0x2c
   2c4ac:	18fb      	adds	r3, r7, r3
   2c4ae:	2200      	movs	r2, #0
   2c4b0:	801a      	strh	r2, [r3, #0]
		}
		res = dir_next(dj, 1);		/* Next entry with table stretch */
   2c4b2:	232f      	movs	r3, #47	; 0x2f
   2c4b4:	18fc      	adds	r4, r7, r3
   2c4b6:	687b      	ldr	r3, [r7, #4]
   2c4b8:	2101      	movs	r1, #1
   2c4ba:	0018      	movs	r0, r3
   2c4bc:	4b5d      	ldr	r3, [pc, #372]	; (2c634 <dir_register+0x358>)
   2c4be:	4798      	blx	r3
   2c4c0:	0003      	movs	r3, r0
   2c4c2:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   2c4c4:	232f      	movs	r3, #47	; 0x2f
   2c4c6:	18fb      	adds	r3, r7, r3
   2c4c8:	781b      	ldrb	r3, [r3, #0]
   2c4ca:	2b00      	cmp	r3, #0
   2c4cc:	d0b2      	beq.n	2c434 <dir_register+0x158>
   2c4ce:	e000      	b.n	2c4d2 <dir_register+0x1f6>
		if (res != FR_OK) break;
   2c4d0:	46c0      	nop			; (mov r8, r8)

	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
   2c4d2:	232f      	movs	r3, #47	; 0x2f
   2c4d4:	18fb      	adds	r3, r7, r3
   2c4d6:	781b      	ldrb	r3, [r3, #0]
   2c4d8:	2b00      	cmp	r3, #0
   2c4da:	d163      	bne.n	2c5a4 <dir_register+0x2c8>
   2c4dc:	232a      	movs	r3, #42	; 0x2a
   2c4de:	18fb      	adds	r3, r7, r3
   2c4e0:	881b      	ldrh	r3, [r3, #0]
   2c4e2:	2b01      	cmp	r3, #1
   2c4e4:	d95e      	bls.n	2c5a4 <dir_register+0x2c8>
		res = dir_sdi(dj, is);
   2c4e6:	232f      	movs	r3, #47	; 0x2f
   2c4e8:	18fc      	adds	r4, r7, r3
   2c4ea:	2328      	movs	r3, #40	; 0x28
   2c4ec:	18fb      	adds	r3, r7, r3
   2c4ee:	881a      	ldrh	r2, [r3, #0]
   2c4f0:	687b      	ldr	r3, [r7, #4]
   2c4f2:	0011      	movs	r1, r2
   2c4f4:	0018      	movs	r0, r3
   2c4f6:	4b4d      	ldr	r3, [pc, #308]	; (2c62c <dir_register+0x350>)
   2c4f8:	4798      	blx	r3
   2c4fa:	0003      	movs	r3, r0
   2c4fc:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   2c4fe:	232f      	movs	r3, #47	; 0x2f
   2c500:	18fb      	adds	r3, r7, r3
   2c502:	781b      	ldrb	r3, [r3, #0]
   2c504:	2b00      	cmp	r3, #0
   2c506:	d14d      	bne.n	2c5a4 <dir_register+0x2c8>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
   2c508:	687b      	ldr	r3, [r7, #4]
   2c50a:	699b      	ldr	r3, [r3, #24]
   2c50c:	221e      	movs	r2, #30
   2c50e:	18bc      	adds	r4, r7, r2
   2c510:	0018      	movs	r0, r3
   2c512:	4b49      	ldr	r3, [pc, #292]	; (2c638 <dir_register+0x35c>)
   2c514:	4798      	blx	r3
   2c516:	0003      	movs	r3, r0
   2c518:	7023      	strb	r3, [r4, #0]
			ne--;
   2c51a:	232a      	movs	r3, #42	; 0x2a
   2c51c:	18fb      	adds	r3, r7, r3
   2c51e:	881a      	ldrh	r2, [r3, #0]
   2c520:	232a      	movs	r3, #42	; 0x2a
   2c522:	18fb      	adds	r3, r7, r3
   2c524:	3a01      	subs	r2, #1
   2c526:	801a      	strh	r2, [r3, #0]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
   2c528:	687b      	ldr	r3, [r7, #4]
   2c52a:	681a      	ldr	r2, [r3, #0]
   2c52c:	687b      	ldr	r3, [r7, #4]
   2c52e:	691b      	ldr	r3, [r3, #16]
   2c530:	212f      	movs	r1, #47	; 0x2f
   2c532:	187c      	adds	r4, r7, r1
   2c534:	0019      	movs	r1, r3
   2c536:	0010      	movs	r0, r2
   2c538:	4b3d      	ldr	r3, [pc, #244]	; (2c630 <dir_register+0x354>)
   2c53a:	4798      	blx	r3
   2c53c:	0003      	movs	r3, r0
   2c53e:	7023      	strb	r3, [r4, #0]
				if (res != FR_OK) break;
   2c540:	232f      	movs	r3, #47	; 0x2f
   2c542:	18fb      	adds	r3, r7, r3
   2c544:	781b      	ldrb	r3, [r3, #0]
   2c546:	2b00      	cmp	r3, #0
   2c548:	d12b      	bne.n	2c5a2 <dir_register+0x2c6>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
   2c54a:	687b      	ldr	r3, [r7, #4]
   2c54c:	69d8      	ldr	r0, [r3, #28]
   2c54e:	687b      	ldr	r3, [r7, #4]
   2c550:	6959      	ldr	r1, [r3, #20]
   2c552:	232a      	movs	r3, #42	; 0x2a
   2c554:	18fb      	adds	r3, r7, r3
   2c556:	881b      	ldrh	r3, [r3, #0]
   2c558:	b2da      	uxtb	r2, r3
   2c55a:	231e      	movs	r3, #30
   2c55c:	18fb      	adds	r3, r7, r3
   2c55e:	781b      	ldrb	r3, [r3, #0]
   2c560:	4c36      	ldr	r4, [pc, #216]	; (2c63c <dir_register+0x360>)
   2c562:	47a0      	blx	r4
				dj->fs->wflag = 1;
   2c564:	687b      	ldr	r3, [r7, #4]
   2c566:	681b      	ldr	r3, [r3, #0]
   2c568:	2201      	movs	r2, #1
   2c56a:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
   2c56c:	232f      	movs	r3, #47	; 0x2f
   2c56e:	18fc      	adds	r4, r7, r3
   2c570:	687b      	ldr	r3, [r7, #4]
   2c572:	2100      	movs	r1, #0
   2c574:	0018      	movs	r0, r3
   2c576:	4b2f      	ldr	r3, [pc, #188]	; (2c634 <dir_register+0x358>)
   2c578:	4798      	blx	r3
   2c57a:	0003      	movs	r3, r0
   2c57c:	7023      	strb	r3, [r4, #0]
			} while (res == FR_OK && --ne);
   2c57e:	232f      	movs	r3, #47	; 0x2f
   2c580:	18fb      	adds	r3, r7, r3
   2c582:	781b      	ldrb	r3, [r3, #0]
   2c584:	2b00      	cmp	r3, #0
   2c586:	d10d      	bne.n	2c5a4 <dir_register+0x2c8>
   2c588:	232a      	movs	r3, #42	; 0x2a
   2c58a:	18fb      	adds	r3, r7, r3
   2c58c:	222a      	movs	r2, #42	; 0x2a
   2c58e:	18ba      	adds	r2, r7, r2
   2c590:	8812      	ldrh	r2, [r2, #0]
   2c592:	3a01      	subs	r2, #1
   2c594:	801a      	strh	r2, [r3, #0]
   2c596:	232a      	movs	r3, #42	; 0x2a
   2c598:	18fb      	adds	r3, r7, r3
   2c59a:	881b      	ldrh	r3, [r3, #0]
   2c59c:	2b00      	cmp	r3, #0
   2c59e:	d1c3      	bne.n	2c528 <dir_register+0x24c>
   2c5a0:	e000      	b.n	2c5a4 <dir_register+0x2c8>
				if (res != FR_OK) break;
   2c5a2:	46c0      	nop			; (mov r8, r8)
			res = dir_next(dj, 1);			/* Next entry with table stretch */
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
   2c5a4:	232f      	movs	r3, #47	; 0x2f
   2c5a6:	18fb      	adds	r3, r7, r3
   2c5a8:	781b      	ldrb	r3, [r3, #0]
   2c5aa:	2b00      	cmp	r3, #0
   2c5ac:	d12f      	bne.n	2c60e <dir_register+0x332>
		res = move_window(dj->fs, dj->sect);
   2c5ae:	687b      	ldr	r3, [r7, #4]
   2c5b0:	681a      	ldr	r2, [r3, #0]
   2c5b2:	687b      	ldr	r3, [r7, #4]
   2c5b4:	691b      	ldr	r3, [r3, #16]
   2c5b6:	212f      	movs	r1, #47	; 0x2f
   2c5b8:	187c      	adds	r4, r7, r1
   2c5ba:	0019      	movs	r1, r3
   2c5bc:	0010      	movs	r0, r2
   2c5be:	4b1c      	ldr	r3, [pc, #112]	; (2c630 <dir_register+0x354>)
   2c5c0:	4798      	blx	r3
   2c5c2:	0003      	movs	r3, r0
   2c5c4:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   2c5c6:	232f      	movs	r3, #47	; 0x2f
   2c5c8:	18fb      	adds	r3, r7, r3
   2c5ca:	781b      	ldrb	r3, [r3, #0]
   2c5cc:	2b00      	cmp	r3, #0
   2c5ce:	d11e      	bne.n	2c60e <dir_register+0x332>
			dir = dj->dir;
   2c5d0:	687b      	ldr	r3, [r7, #4]
   2c5d2:	695b      	ldr	r3, [r3, #20]
   2c5d4:	61bb      	str	r3, [r7, #24]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
   2c5d6:	69bb      	ldr	r3, [r7, #24]
   2c5d8:	2220      	movs	r2, #32
   2c5da:	2100      	movs	r1, #0
   2c5dc:	0018      	movs	r0, r3
   2c5de:	4b18      	ldr	r3, [pc, #96]	; (2c640 <dir_register+0x364>)
   2c5e0:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
   2c5e2:	687b      	ldr	r3, [r7, #4]
   2c5e4:	6999      	ldr	r1, [r3, #24]
   2c5e6:	69bb      	ldr	r3, [r7, #24]
   2c5e8:	220b      	movs	r2, #11
   2c5ea:	0018      	movs	r0, r3
   2c5ec:	4b0b      	ldr	r3, [pc, #44]	; (2c61c <dir_register+0x340>)
   2c5ee:	4798      	blx	r3
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
   2c5f0:	69bb      	ldr	r3, [r7, #24]
   2c5f2:	330c      	adds	r3, #12
   2c5f4:	001a      	movs	r2, r3
   2c5f6:	687b      	ldr	r3, [r7, #4]
   2c5f8:	699b      	ldr	r3, [r3, #24]
   2c5fa:	330b      	adds	r3, #11
   2c5fc:	781b      	ldrb	r3, [r3, #0]
   2c5fe:	2118      	movs	r1, #24
   2c600:	400b      	ands	r3, r1
   2c602:	b2db      	uxtb	r3, r3
   2c604:	7013      	strb	r3, [r2, #0]
#endif
			dj->fs->wflag = 1;
   2c606:	687b      	ldr	r3, [r7, #4]
   2c608:	681b      	ldr	r3, [r3, #0]
   2c60a:	2201      	movs	r2, #1
   2c60c:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
   2c60e:	232f      	movs	r3, #47	; 0x2f
   2c610:	18fb      	adds	r3, r7, r3
   2c612:	781b      	ldrb	r3, [r3, #0]
}
   2c614:	0018      	movs	r0, r3
   2c616:	46bd      	mov	sp, r7
   2c618:	b00d      	add	sp, #52	; 0x34
   2c61a:	bd90      	pop	{r4, r7, pc}
   2c61c:	0002b135 	.word	0x0002b135
   2c620:	0002bf91 	.word	0x0002bf91
   2c624:	0002c0e1 	.word	0x0002c0e1
   2c628:	000324dd 	.word	0x000324dd
   2c62c:	0002ba5d 	.word	0x0002ba5d
   2c630:	0002b219 	.word	0x0002b219
   2c634:	0002bb8d 	.word	0x0002bb8d
   2c638:	0002c091 	.word	0x0002c091
   2c63c:	0002be81 	.word	0x0002be81
   2c640:	0002b16d 	.word	0x0002b16d

0002c644 <create_name>:
static
FRESULT create_name (
	DIR *dj,			/* Pointer to the directory object */
	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
)
{
   2c644:	b590      	push	{r4, r7, lr}
   2c646:	b08b      	sub	sp, #44	; 0x2c
   2c648:	af00      	add	r7, sp, #0
   2c64a:	6078      	str	r0, [r7, #4]
   2c64c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
   2c64e:	683b      	ldr	r3, [r7, #0]
   2c650:	681b      	ldr	r3, [r3, #0]
   2c652:	613b      	str	r3, [r7, #16]
   2c654:	e002      	b.n	2c65c <create_name+0x18>
   2c656:	693b      	ldr	r3, [r7, #16]
   2c658:	3301      	adds	r3, #1
   2c65a:	613b      	str	r3, [r7, #16]
   2c65c:	693b      	ldr	r3, [r7, #16]
   2c65e:	781b      	ldrb	r3, [r3, #0]
   2c660:	2b2f      	cmp	r3, #47	; 0x2f
   2c662:	d0f8      	beq.n	2c656 <create_name+0x12>
   2c664:	693b      	ldr	r3, [r7, #16]
   2c666:	781b      	ldrb	r3, [r3, #0]
   2c668:	2b5c      	cmp	r3, #92	; 0x5c
   2c66a:	d0f4      	beq.n	2c656 <create_name+0x12>
	lfn = dj->lfn;
   2c66c:	687b      	ldr	r3, [r7, #4]
   2c66e:	69db      	ldr	r3, [r3, #28]
   2c670:	60fb      	str	r3, [r7, #12]
	si = di = 0;
   2c672:	2300      	movs	r3, #0
   2c674:	617b      	str	r3, [r7, #20]
   2c676:	697b      	ldr	r3, [r7, #20]
   2c678:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
   2c67a:	69bb      	ldr	r3, [r7, #24]
   2c67c:	1c5a      	adds	r2, r3, #1
   2c67e:	61ba      	str	r2, [r7, #24]
   2c680:	693a      	ldr	r2, [r7, #16]
   2c682:	18d3      	adds	r3, r2, r3
   2c684:	781a      	ldrb	r2, [r3, #0]
   2c686:	2324      	movs	r3, #36	; 0x24
   2c688:	18fb      	adds	r3, r7, r3
   2c68a:	801a      	strh	r2, [r3, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
   2c68c:	2324      	movs	r3, #36	; 0x24
   2c68e:	18fb      	adds	r3, r7, r3
   2c690:	881b      	ldrh	r3, [r3, #0]
   2c692:	2b1f      	cmp	r3, #31
   2c694:	d944      	bls.n	2c720 <create_name+0xdc>
   2c696:	2324      	movs	r3, #36	; 0x24
   2c698:	18fb      	adds	r3, r7, r3
   2c69a:	881b      	ldrh	r3, [r3, #0]
   2c69c:	2b2f      	cmp	r3, #47	; 0x2f
   2c69e:	d03f      	beq.n	2c720 <create_name+0xdc>
   2c6a0:	2324      	movs	r3, #36	; 0x24
   2c6a2:	18fb      	adds	r3, r7, r3
   2c6a4:	881b      	ldrh	r3, [r3, #0]
   2c6a6:	2b5c      	cmp	r3, #92	; 0x5c
   2c6a8:	d03a      	beq.n	2c720 <create_name+0xdc>
		if (di >= _MAX_LFN)				/* Reject too long name */
   2c6aa:	697b      	ldr	r3, [r7, #20]
   2c6ac:	2bfe      	cmp	r3, #254	; 0xfe
   2c6ae:	d901      	bls.n	2c6b4 <create_name+0x70>
			return FR_INVALID_NAME;
   2c6b0:	2306      	movs	r3, #6
   2c6b2:	e1e7      	b.n	2ca84 <create_name+0x440>
#if !_LFN_UNICODE
		w &= 0xFF;
   2c6b4:	2324      	movs	r3, #36	; 0x24
   2c6b6:	18fb      	adds	r3, r7, r3
   2c6b8:	2224      	movs	r2, #36	; 0x24
   2c6ba:	18ba      	adds	r2, r7, r2
   2c6bc:	8812      	ldrh	r2, [r2, #0]
   2c6be:	21ff      	movs	r1, #255	; 0xff
   2c6c0:	400a      	ands	r2, r1
   2c6c2:	801a      	strh	r2, [r3, #0]
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
   2c6c4:	2324      	movs	r3, #36	; 0x24
   2c6c6:	18fc      	adds	r4, r7, r3
   2c6c8:	2324      	movs	r3, #36	; 0x24
   2c6ca:	18fb      	adds	r3, r7, r3
   2c6cc:	881b      	ldrh	r3, [r3, #0]
   2c6ce:	2101      	movs	r1, #1
   2c6d0:	0018      	movs	r0, r3
   2c6d2:	4bba      	ldr	r3, [pc, #744]	; (2c9bc <create_name+0x378>)
   2c6d4:	4798      	blx	r3
   2c6d6:	0003      	movs	r3, r0
   2c6d8:	8023      	strh	r3, [r4, #0]
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
   2c6da:	2324      	movs	r3, #36	; 0x24
   2c6dc:	18fb      	adds	r3, r7, r3
   2c6de:	881b      	ldrh	r3, [r3, #0]
   2c6e0:	2b00      	cmp	r3, #0
   2c6e2:	d101      	bne.n	2c6e8 <create_name+0xa4>
   2c6e4:	2306      	movs	r3, #6
   2c6e6:	e1cd      	b.n	2ca84 <create_name+0x440>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
   2c6e8:	2324      	movs	r3, #36	; 0x24
   2c6ea:	18fb      	adds	r3, r7, r3
   2c6ec:	881b      	ldrh	r3, [r3, #0]
   2c6ee:	2b7f      	cmp	r3, #127	; 0x7f
   2c6f0:	d80b      	bhi.n	2c70a <create_name+0xc6>
   2c6f2:	2324      	movs	r3, #36	; 0x24
   2c6f4:	18fb      	adds	r3, r7, r3
   2c6f6:	881a      	ldrh	r2, [r3, #0]
   2c6f8:	4bb1      	ldr	r3, [pc, #708]	; (2c9c0 <create_name+0x37c>)
   2c6fa:	0011      	movs	r1, r2
   2c6fc:	0018      	movs	r0, r3
   2c6fe:	4bb1      	ldr	r3, [pc, #708]	; (2c9c4 <create_name+0x380>)
   2c700:	4798      	blx	r3
   2c702:	1e03      	subs	r3, r0, #0
   2c704:	d001      	beq.n	2c70a <create_name+0xc6>
			return FR_INVALID_NAME;
   2c706:	2306      	movs	r3, #6
   2c708:	e1bc      	b.n	2ca84 <create_name+0x440>
		lfn[di++] = w;					/* Store the Unicode char */
   2c70a:	697b      	ldr	r3, [r7, #20]
   2c70c:	1c5a      	adds	r2, r3, #1
   2c70e:	617a      	str	r2, [r7, #20]
   2c710:	005b      	lsls	r3, r3, #1
   2c712:	68fa      	ldr	r2, [r7, #12]
   2c714:	18d3      	adds	r3, r2, r3
   2c716:	2224      	movs	r2, #36	; 0x24
   2c718:	18ba      	adds	r2, r7, r2
   2c71a:	8812      	ldrh	r2, [r2, #0]
   2c71c:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
   2c71e:	e7ac      	b.n	2c67a <create_name+0x36>
	}
	*path = &p[si];						/* Return pointer to the next segment */
   2c720:	693a      	ldr	r2, [r7, #16]
   2c722:	69bb      	ldr	r3, [r7, #24]
   2c724:	18d2      	adds	r2, r2, r3
   2c726:	683b      	ldr	r3, [r7, #0]
   2c728:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   2c72a:	2324      	movs	r3, #36	; 0x24
   2c72c:	18fb      	adds	r3, r7, r3
   2c72e:	881b      	ldrh	r3, [r3, #0]
   2c730:	2b1f      	cmp	r3, #31
   2c732:	d801      	bhi.n	2c738 <create_name+0xf4>
   2c734:	2204      	movs	r2, #4
   2c736:	e000      	b.n	2c73a <create_name+0xf6>
   2c738:	2200      	movs	r2, #0
   2c73a:	2326      	movs	r3, #38	; 0x26
   2c73c:	18fb      	adds	r3, r7, r3
   2c73e:	701a      	strb	r2, [r3, #0]
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
   2c740:	e017      	b.n	2c772 <create_name+0x12e>
		w = lfn[di-1];
   2c742:	697b      	ldr	r3, [r7, #20]
   2c744:	4aa0      	ldr	r2, [pc, #640]	; (2c9c8 <create_name+0x384>)
   2c746:	4694      	mov	ip, r2
   2c748:	4463      	add	r3, ip
   2c74a:	005b      	lsls	r3, r3, #1
   2c74c:	68fa      	ldr	r2, [r7, #12]
   2c74e:	18d2      	adds	r2, r2, r3
   2c750:	2324      	movs	r3, #36	; 0x24
   2c752:	18fb      	adds	r3, r7, r3
   2c754:	8812      	ldrh	r2, [r2, #0]
   2c756:	801a      	strh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
   2c758:	2324      	movs	r3, #36	; 0x24
   2c75a:	18fb      	adds	r3, r7, r3
   2c75c:	881b      	ldrh	r3, [r3, #0]
   2c75e:	2b20      	cmp	r3, #32
   2c760:	d004      	beq.n	2c76c <create_name+0x128>
   2c762:	2324      	movs	r3, #36	; 0x24
   2c764:	18fb      	adds	r3, r7, r3
   2c766:	881b      	ldrh	r3, [r3, #0]
   2c768:	2b2e      	cmp	r3, #46	; 0x2e
   2c76a:	d106      	bne.n	2c77a <create_name+0x136>
		di--;
   2c76c:	697b      	ldr	r3, [r7, #20]
   2c76e:	3b01      	subs	r3, #1
   2c770:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
   2c772:	697b      	ldr	r3, [r7, #20]
   2c774:	2b00      	cmp	r3, #0
   2c776:	d1e4      	bne.n	2c742 <create_name+0xfe>
   2c778:	e000      	b.n	2c77c <create_name+0x138>
		if (w != ' ' && w != '.') break;
   2c77a:	46c0      	nop			; (mov r8, r8)
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
   2c77c:	697b      	ldr	r3, [r7, #20]
   2c77e:	2b00      	cmp	r3, #0
   2c780:	d101      	bne.n	2c786 <create_name+0x142>
   2c782:	2306      	movs	r3, #6
   2c784:	e17e      	b.n	2ca84 <create_name+0x440>

	lfn[di] = 0;						/* LFN is created */
   2c786:	697b      	ldr	r3, [r7, #20]
   2c788:	005b      	lsls	r3, r3, #1
   2c78a:	68fa      	ldr	r2, [r7, #12]
   2c78c:	18d3      	adds	r3, r2, r3
   2c78e:	2200      	movs	r2, #0
   2c790:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
   2c792:	687b      	ldr	r3, [r7, #4]
   2c794:	699b      	ldr	r3, [r3, #24]
   2c796:	220b      	movs	r2, #11
   2c798:	2120      	movs	r1, #32
   2c79a:	0018      	movs	r0, r3
   2c79c:	4b8b      	ldr	r3, [pc, #556]	; (2c9cc <create_name+0x388>)
   2c79e:	4798      	blx	r3
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
   2c7a0:	2300      	movs	r3, #0
   2c7a2:	61bb      	str	r3, [r7, #24]
   2c7a4:	e002      	b.n	2c7ac <create_name+0x168>
   2c7a6:	69bb      	ldr	r3, [r7, #24]
   2c7a8:	3301      	adds	r3, #1
   2c7aa:	61bb      	str	r3, [r7, #24]
   2c7ac:	69bb      	ldr	r3, [r7, #24]
   2c7ae:	005b      	lsls	r3, r3, #1
   2c7b0:	68fa      	ldr	r2, [r7, #12]
   2c7b2:	18d3      	adds	r3, r2, r3
   2c7b4:	881b      	ldrh	r3, [r3, #0]
   2c7b6:	2b20      	cmp	r3, #32
   2c7b8:	d0f5      	beq.n	2c7a6 <create_name+0x162>
   2c7ba:	69bb      	ldr	r3, [r7, #24]
   2c7bc:	005b      	lsls	r3, r3, #1
   2c7be:	68fa      	ldr	r2, [r7, #12]
   2c7c0:	18d3      	adds	r3, r2, r3
   2c7c2:	881b      	ldrh	r3, [r3, #0]
   2c7c4:	2b2e      	cmp	r3, #46	; 0x2e
   2c7c6:	d0ee      	beq.n	2c7a6 <create_name+0x162>
	if (si) cf |= NS_LOSS | NS_LFN;
   2c7c8:	69bb      	ldr	r3, [r7, #24]
   2c7ca:	2b00      	cmp	r3, #0
   2c7cc:	d00b      	beq.n	2c7e6 <create_name+0x1a2>
   2c7ce:	2326      	movs	r3, #38	; 0x26
   2c7d0:	18fb      	adds	r3, r7, r3
   2c7d2:	2226      	movs	r2, #38	; 0x26
   2c7d4:	18ba      	adds	r2, r7, r2
   2c7d6:	7812      	ldrb	r2, [r2, #0]
   2c7d8:	2103      	movs	r1, #3
   2c7da:	430a      	orrs	r2, r1
   2c7dc:	701a      	strb	r2, [r3, #0]
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
   2c7de:	e002      	b.n	2c7e6 <create_name+0x1a2>
   2c7e0:	697b      	ldr	r3, [r7, #20]
   2c7e2:	3b01      	subs	r3, #1
   2c7e4:	617b      	str	r3, [r7, #20]
   2c7e6:	697b      	ldr	r3, [r7, #20]
   2c7e8:	2b00      	cmp	r3, #0
   2c7ea:	d009      	beq.n	2c800 <create_name+0x1bc>
   2c7ec:	697b      	ldr	r3, [r7, #20]
   2c7ee:	4a76      	ldr	r2, [pc, #472]	; (2c9c8 <create_name+0x384>)
   2c7f0:	4694      	mov	ip, r2
   2c7f2:	4463      	add	r3, ip
   2c7f4:	005b      	lsls	r3, r3, #1
   2c7f6:	68fa      	ldr	r2, [r7, #12]
   2c7f8:	18d3      	adds	r3, r2, r3
   2c7fa:	881b      	ldrh	r3, [r3, #0]
   2c7fc:	2b2e      	cmp	r3, #46	; 0x2e
   2c7fe:	d1ef      	bne.n	2c7e0 <create_name+0x19c>

	b = i = 0; ni = 8;
   2c800:	2300      	movs	r3, #0
   2c802:	623b      	str	r3, [r7, #32]
   2c804:	2327      	movs	r3, #39	; 0x27
   2c806:	18fb      	adds	r3, r7, r3
   2c808:	2200      	movs	r2, #0
   2c80a:	701a      	strb	r2, [r3, #0]
   2c80c:	2308      	movs	r3, #8
   2c80e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
   2c810:	69bb      	ldr	r3, [r7, #24]
   2c812:	1c5a      	adds	r2, r3, #1
   2c814:	61ba      	str	r2, [r7, #24]
   2c816:	005b      	lsls	r3, r3, #1
   2c818:	68fa      	ldr	r2, [r7, #12]
   2c81a:	18d2      	adds	r2, r2, r3
   2c81c:	2324      	movs	r3, #36	; 0x24
   2c81e:	18fb      	adds	r3, r7, r3
   2c820:	8812      	ldrh	r2, [r2, #0]
   2c822:	801a      	strh	r2, [r3, #0]
		if (!w) break;					/* Break on end of the LFN */
   2c824:	2324      	movs	r3, #36	; 0x24
   2c826:	18fb      	adds	r3, r7, r3
   2c828:	881b      	ldrh	r3, [r3, #0]
   2c82a:	2b00      	cmp	r3, #0
   2c82c:	d100      	bne.n	2c830 <create_name+0x1ec>
   2c82e:	e0c3      	b.n	2c9b8 <create_name+0x374>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
   2c830:	2324      	movs	r3, #36	; 0x24
   2c832:	18fb      	adds	r3, r7, r3
   2c834:	881b      	ldrh	r3, [r3, #0]
   2c836:	2b20      	cmp	r3, #32
   2c838:	d008      	beq.n	2c84c <create_name+0x208>
   2c83a:	2324      	movs	r3, #36	; 0x24
   2c83c:	18fb      	adds	r3, r7, r3
   2c83e:	881b      	ldrh	r3, [r3, #0]
   2c840:	2b2e      	cmp	r3, #46	; 0x2e
   2c842:	d10c      	bne.n	2c85e <create_name+0x21a>
   2c844:	69ba      	ldr	r2, [r7, #24]
   2c846:	697b      	ldr	r3, [r7, #20]
   2c848:	429a      	cmp	r2, r3
   2c84a:	d008      	beq.n	2c85e <create_name+0x21a>
			cf |= NS_LOSS | NS_LFN; continue;
   2c84c:	2326      	movs	r3, #38	; 0x26
   2c84e:	18fb      	adds	r3, r7, r3
   2c850:	2226      	movs	r2, #38	; 0x26
   2c852:	18ba      	adds	r2, r7, r2
   2c854:	7812      	ldrb	r2, [r2, #0]
   2c856:	2103      	movs	r1, #3
   2c858:	430a      	orrs	r2, r1
   2c85a:	701a      	strb	r2, [r3, #0]
   2c85c:	e0ab      	b.n	2c9b6 <create_name+0x372>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
   2c85e:	6a3a      	ldr	r2, [r7, #32]
   2c860:	69fb      	ldr	r3, [r7, #28]
   2c862:	429a      	cmp	r2, r3
   2c864:	d203      	bcs.n	2c86e <create_name+0x22a>
   2c866:	69ba      	ldr	r2, [r7, #24]
   2c868:	697b      	ldr	r3, [r7, #20]
   2c86a:	429a      	cmp	r2, r3
   2c86c:	d12a      	bne.n	2c8c4 <create_name+0x280>
			if (ni == 11) {				/* Long extension */
   2c86e:	69fb      	ldr	r3, [r7, #28]
   2c870:	2b0b      	cmp	r3, #11
   2c872:	d108      	bne.n	2c886 <create_name+0x242>
				cf |= NS_LOSS | NS_LFN; break;
   2c874:	2326      	movs	r3, #38	; 0x26
   2c876:	18fb      	adds	r3, r7, r3
   2c878:	2226      	movs	r2, #38	; 0x26
   2c87a:	18ba      	adds	r2, r7, r2
   2c87c:	7812      	ldrb	r2, [r2, #0]
   2c87e:	2103      	movs	r1, #3
   2c880:	430a      	orrs	r2, r1
   2c882:	701a      	strb	r2, [r3, #0]
   2c884:	e0a9      	b.n	2c9da <create_name+0x396>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
   2c886:	69ba      	ldr	r2, [r7, #24]
   2c888:	697b      	ldr	r3, [r7, #20]
   2c88a:	429a      	cmp	r2, r3
   2c88c:	d007      	beq.n	2c89e <create_name+0x25a>
   2c88e:	2326      	movs	r3, #38	; 0x26
   2c890:	18fb      	adds	r3, r7, r3
   2c892:	2226      	movs	r2, #38	; 0x26
   2c894:	18ba      	adds	r2, r7, r2
   2c896:	7812      	ldrb	r2, [r2, #0]
   2c898:	2103      	movs	r1, #3
   2c89a:	430a      	orrs	r2, r1
   2c89c:	701a      	strb	r2, [r3, #0]
			if (si > di) break;			/* No extension */
   2c89e:	69ba      	ldr	r2, [r7, #24]
   2c8a0:	697b      	ldr	r3, [r7, #20]
   2c8a2:	429a      	cmp	r2, r3
   2c8a4:	d900      	bls.n	2c8a8 <create_name+0x264>
   2c8a6:	e097      	b.n	2c9d8 <create_name+0x394>
			si = di; i = 8; ni = 11;	/* Enter extension section */
   2c8a8:	697b      	ldr	r3, [r7, #20]
   2c8aa:	61bb      	str	r3, [r7, #24]
   2c8ac:	2308      	movs	r3, #8
   2c8ae:	623b      	str	r3, [r7, #32]
   2c8b0:	230b      	movs	r3, #11
   2c8b2:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
   2c8b4:	2327      	movs	r3, #39	; 0x27
   2c8b6:	18fb      	adds	r3, r7, r3
   2c8b8:	2227      	movs	r2, #39	; 0x27
   2c8ba:	18ba      	adds	r2, r7, r2
   2c8bc:	7812      	ldrb	r2, [r2, #0]
   2c8be:	0092      	lsls	r2, r2, #2
   2c8c0:	701a      	strb	r2, [r3, #0]
   2c8c2:	e078      	b.n	2c9b6 <create_name+0x372>
		}

		if (w >= 0x80) {				/* Non ASCII char */
   2c8c4:	2324      	movs	r3, #36	; 0x24
   2c8c6:	18fb      	adds	r3, r7, r3
   2c8c8:	881b      	ldrh	r3, [r3, #0]
   2c8ca:	2b7f      	cmp	r3, #127	; 0x7f
   2c8cc:	d920      	bls.n	2c910 <create_name+0x2cc>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
   2c8ce:	2324      	movs	r3, #36	; 0x24
   2c8d0:	18fc      	adds	r4, r7, r3
   2c8d2:	2324      	movs	r3, #36	; 0x24
   2c8d4:	18fb      	adds	r3, r7, r3
   2c8d6:	881b      	ldrh	r3, [r3, #0]
   2c8d8:	2100      	movs	r1, #0
   2c8da:	0018      	movs	r0, r3
   2c8dc:	4b37      	ldr	r3, [pc, #220]	; (2c9bc <create_name+0x378>)
   2c8de:	4798      	blx	r3
   2c8e0:	0003      	movs	r3, r0
   2c8e2:	8023      	strh	r3, [r4, #0]
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
   2c8e4:	2324      	movs	r3, #36	; 0x24
   2c8e6:	18fb      	adds	r3, r7, r3
   2c8e8:	881b      	ldrh	r3, [r3, #0]
   2c8ea:	2b00      	cmp	r3, #0
   2c8ec:	d008      	beq.n	2c900 <create_name+0x2bc>
   2c8ee:	2324      	movs	r3, #36	; 0x24
   2c8f0:	18fb      	adds	r3, r7, r3
   2c8f2:	881b      	ldrh	r3, [r3, #0]
   2c8f4:	3b80      	subs	r3, #128	; 0x80
   2c8f6:	4a36      	ldr	r2, [pc, #216]	; (2c9d0 <create_name+0x38c>)
   2c8f8:	5cd2      	ldrb	r2, [r2, r3]
   2c8fa:	2324      	movs	r3, #36	; 0x24
   2c8fc:	18fb      	adds	r3, r7, r3
   2c8fe:	801a      	strh	r2, [r3, #0]
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
   2c900:	2326      	movs	r3, #38	; 0x26
   2c902:	18fb      	adds	r3, r7, r3
   2c904:	2226      	movs	r2, #38	; 0x26
   2c906:	18ba      	adds	r2, r7, r2
   2c908:	7812      	ldrb	r2, [r2, #0]
   2c90a:	2102      	movs	r1, #2
   2c90c:	430a      	orrs	r2, r1
   2c90e:	701a      	strb	r2, [r3, #0]
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
   2c910:	2324      	movs	r3, #36	; 0x24
   2c912:	18fb      	adds	r3, r7, r3
   2c914:	881b      	ldrh	r3, [r3, #0]
   2c916:	2b00      	cmp	r3, #0
   2c918:	d009      	beq.n	2c92e <create_name+0x2ea>
   2c91a:	2324      	movs	r3, #36	; 0x24
   2c91c:	18fb      	adds	r3, r7, r3
   2c91e:	881a      	ldrh	r2, [r3, #0]
   2c920:	4b2c      	ldr	r3, [pc, #176]	; (2c9d4 <create_name+0x390>)
   2c922:	0011      	movs	r1, r2
   2c924:	0018      	movs	r0, r3
   2c926:	4b27      	ldr	r3, [pc, #156]	; (2c9c4 <create_name+0x380>)
   2c928:	4798      	blx	r3
   2c92a:	1e03      	subs	r3, r0, #0
   2c92c:	d00c      	beq.n	2c948 <create_name+0x304>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
   2c92e:	2324      	movs	r3, #36	; 0x24
   2c930:	18fb      	adds	r3, r7, r3
   2c932:	225f      	movs	r2, #95	; 0x5f
   2c934:	801a      	strh	r2, [r3, #0]
   2c936:	2326      	movs	r3, #38	; 0x26
   2c938:	18fb      	adds	r3, r7, r3
   2c93a:	2226      	movs	r2, #38	; 0x26
   2c93c:	18ba      	adds	r2, r7, r2
   2c93e:	7812      	ldrb	r2, [r2, #0]
   2c940:	2103      	movs	r1, #3
   2c942:	430a      	orrs	r2, r1
   2c944:	701a      	strb	r2, [r3, #0]
   2c946:	e02b      	b.n	2c9a0 <create_name+0x35c>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
   2c948:	2324      	movs	r3, #36	; 0x24
   2c94a:	18fb      	adds	r3, r7, r3
   2c94c:	881b      	ldrh	r3, [r3, #0]
   2c94e:	2b40      	cmp	r3, #64	; 0x40
   2c950:	d90d      	bls.n	2c96e <create_name+0x32a>
   2c952:	2324      	movs	r3, #36	; 0x24
   2c954:	18fb      	adds	r3, r7, r3
   2c956:	881b      	ldrh	r3, [r3, #0]
   2c958:	2b5a      	cmp	r3, #90	; 0x5a
   2c95a:	d808      	bhi.n	2c96e <create_name+0x32a>
					b |= 2;
   2c95c:	2327      	movs	r3, #39	; 0x27
   2c95e:	18fb      	adds	r3, r7, r3
   2c960:	2227      	movs	r2, #39	; 0x27
   2c962:	18ba      	adds	r2, r7, r2
   2c964:	7812      	ldrb	r2, [r2, #0]
   2c966:	2102      	movs	r1, #2
   2c968:	430a      	orrs	r2, r1
   2c96a:	701a      	strb	r2, [r3, #0]
   2c96c:	e018      	b.n	2c9a0 <create_name+0x35c>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
   2c96e:	2324      	movs	r3, #36	; 0x24
   2c970:	18fb      	adds	r3, r7, r3
   2c972:	881b      	ldrh	r3, [r3, #0]
   2c974:	2b60      	cmp	r3, #96	; 0x60
   2c976:	d913      	bls.n	2c9a0 <create_name+0x35c>
   2c978:	2324      	movs	r3, #36	; 0x24
   2c97a:	18fb      	adds	r3, r7, r3
   2c97c:	881b      	ldrh	r3, [r3, #0]
   2c97e:	2b7a      	cmp	r3, #122	; 0x7a
   2c980:	d80e      	bhi.n	2c9a0 <create_name+0x35c>
						b |= 1; w -= 0x20;
   2c982:	2327      	movs	r3, #39	; 0x27
   2c984:	18fb      	adds	r3, r7, r3
   2c986:	2227      	movs	r2, #39	; 0x27
   2c988:	18ba      	adds	r2, r7, r2
   2c98a:	7812      	ldrb	r2, [r2, #0]
   2c98c:	2101      	movs	r1, #1
   2c98e:	430a      	orrs	r2, r1
   2c990:	701a      	strb	r2, [r3, #0]
   2c992:	2324      	movs	r3, #36	; 0x24
   2c994:	18fb      	adds	r3, r7, r3
   2c996:	2224      	movs	r2, #36	; 0x24
   2c998:	18ba      	adds	r2, r7, r2
   2c99a:	8812      	ldrh	r2, [r2, #0]
   2c99c:	3a20      	subs	r2, #32
   2c99e:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}
		dj->fn[i++] = (BYTE)w;
   2c9a0:	687b      	ldr	r3, [r7, #4]
   2c9a2:	699a      	ldr	r2, [r3, #24]
   2c9a4:	6a3b      	ldr	r3, [r7, #32]
   2c9a6:	1c59      	adds	r1, r3, #1
   2c9a8:	6239      	str	r1, [r7, #32]
   2c9aa:	18d3      	adds	r3, r2, r3
   2c9ac:	2224      	movs	r2, #36	; 0x24
   2c9ae:	18ba      	adds	r2, r7, r2
   2c9b0:	8812      	ldrh	r2, [r2, #0]
   2c9b2:	b2d2      	uxtb	r2, r2
   2c9b4:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN char */
   2c9b6:	e72b      	b.n	2c810 <create_name+0x1cc>
		if (!w) break;					/* Break on end of the LFN */
   2c9b8:	46c0      	nop			; (mov r8, r8)
   2c9ba:	e00e      	b.n	2c9da <create_name+0x396>
   2c9bc:	0002dd25 	.word	0x0002dd25
   2c9c0:	00039fc8 	.word	0x00039fc8
   2c9c4:	0002b1e7 	.word	0x0002b1e7
   2c9c8:	7fffffff 	.word	0x7fffffff
   2c9cc:	0002b16d 	.word	0x0002b16d
   2c9d0:	0003a010 	.word	0x0003a010
   2c9d4:	00039fd4 	.word	0x00039fd4
			if (si > di) break;			/* No extension */
   2c9d8:	46c0      	nop			; (mov r8, r8)
	}

	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
   2c9da:	687b      	ldr	r3, [r7, #4]
   2c9dc:	699b      	ldr	r3, [r3, #24]
   2c9de:	781b      	ldrb	r3, [r3, #0]
   2c9e0:	2be5      	cmp	r3, #229	; 0xe5
   2c9e2:	d103      	bne.n	2c9ec <create_name+0x3a8>
   2c9e4:	687b      	ldr	r3, [r7, #4]
   2c9e6:	699b      	ldr	r3, [r3, #24]
   2c9e8:	2205      	movs	r2, #5
   2c9ea:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
   2c9ec:	69fb      	ldr	r3, [r7, #28]
   2c9ee:	2b08      	cmp	r3, #8
   2c9f0:	d106      	bne.n	2ca00 <create_name+0x3bc>
   2c9f2:	2327      	movs	r3, #39	; 0x27
   2c9f4:	18fb      	adds	r3, r7, r3
   2c9f6:	2227      	movs	r2, #39	; 0x27
   2c9f8:	18ba      	adds	r2, r7, r2
   2c9fa:	7812      	ldrb	r2, [r2, #0]
   2c9fc:	0092      	lsls	r2, r2, #2
   2c9fe:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
   2ca00:	2327      	movs	r3, #39	; 0x27
   2ca02:	18fb      	adds	r3, r7, r3
   2ca04:	781b      	ldrb	r3, [r3, #0]
   2ca06:	220c      	movs	r2, #12
   2ca08:	4013      	ands	r3, r2
   2ca0a:	2b0c      	cmp	r3, #12
   2ca0c:	d006      	beq.n	2ca1c <create_name+0x3d8>
   2ca0e:	2327      	movs	r3, #39	; 0x27
   2ca10:	18fb      	adds	r3, r7, r3
   2ca12:	781b      	ldrb	r3, [r3, #0]
   2ca14:	2203      	movs	r2, #3
   2ca16:	4013      	ands	r3, r2
   2ca18:	2b03      	cmp	r3, #3
   2ca1a:	d107      	bne.n	2ca2c <create_name+0x3e8>
		cf |= NS_LFN;
   2ca1c:	2326      	movs	r3, #38	; 0x26
   2ca1e:	18fb      	adds	r3, r7, r3
   2ca20:	2226      	movs	r2, #38	; 0x26
   2ca22:	18ba      	adds	r2, r7, r2
   2ca24:	7812      	ldrb	r2, [r2, #0]
   2ca26:	2102      	movs	r1, #2
   2ca28:	430a      	orrs	r2, r1
   2ca2a:	701a      	strb	r2, [r3, #0]
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
   2ca2c:	2326      	movs	r3, #38	; 0x26
   2ca2e:	18fb      	adds	r3, r7, r3
   2ca30:	781b      	ldrb	r3, [r3, #0]
   2ca32:	2202      	movs	r2, #2
   2ca34:	4013      	ands	r3, r2
   2ca36:	d11d      	bne.n	2ca74 <create_name+0x430>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
   2ca38:	2327      	movs	r3, #39	; 0x27
   2ca3a:	18fb      	adds	r3, r7, r3
   2ca3c:	781b      	ldrb	r3, [r3, #0]
   2ca3e:	2203      	movs	r2, #3
   2ca40:	4013      	ands	r3, r2
   2ca42:	2b01      	cmp	r3, #1
   2ca44:	d107      	bne.n	2ca56 <create_name+0x412>
   2ca46:	2326      	movs	r3, #38	; 0x26
   2ca48:	18fb      	adds	r3, r7, r3
   2ca4a:	2226      	movs	r2, #38	; 0x26
   2ca4c:	18ba      	adds	r2, r7, r2
   2ca4e:	7812      	ldrb	r2, [r2, #0]
   2ca50:	2110      	movs	r1, #16
   2ca52:	430a      	orrs	r2, r1
   2ca54:	701a      	strb	r2, [r3, #0]
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
   2ca56:	2327      	movs	r3, #39	; 0x27
   2ca58:	18fb      	adds	r3, r7, r3
   2ca5a:	781b      	ldrb	r3, [r3, #0]
   2ca5c:	220c      	movs	r2, #12
   2ca5e:	4013      	ands	r3, r2
   2ca60:	2b04      	cmp	r3, #4
   2ca62:	d107      	bne.n	2ca74 <create_name+0x430>
   2ca64:	2326      	movs	r3, #38	; 0x26
   2ca66:	18fb      	adds	r3, r7, r3
   2ca68:	2226      	movs	r2, #38	; 0x26
   2ca6a:	18ba      	adds	r2, r7, r2
   2ca6c:	7812      	ldrb	r2, [r2, #0]
   2ca6e:	2108      	movs	r1, #8
   2ca70:	430a      	orrs	r2, r1
   2ca72:	701a      	strb	r2, [r3, #0]
	}

	dj->fn[NS] = cf;	/* SFN is created */
   2ca74:	687b      	ldr	r3, [r7, #4]
   2ca76:	699b      	ldr	r3, [r3, #24]
   2ca78:	330b      	adds	r3, #11
   2ca7a:	2226      	movs	r2, #38	; 0x26
   2ca7c:	18ba      	adds	r2, r7, r2
   2ca7e:	7812      	ldrb	r2, [r2, #0]
   2ca80:	701a      	strb	r2, [r3, #0]

	return FR_OK;
   2ca82:	2300      	movs	r3, #0

	sfn[NS] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
   2ca84:	0018      	movs	r0, r3
   2ca86:	46bd      	mov	sp, r7
   2ca88:	b00b      	add	sp, #44	; 0x2c
   2ca8a:	bd90      	pop	{r4, r7, pc}

0002ca8c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
   2ca8c:	b590      	push	{r4, r7, lr}
   2ca8e:	b085      	sub	sp, #20
   2ca90:	af00      	add	r7, sp, #0
   2ca92:	6078      	str	r0, [r7, #4]
   2ca94:	6039      	str	r1, [r7, #0]
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
   2ca96:	683b      	ldr	r3, [r7, #0]
   2ca98:	781b      	ldrb	r3, [r3, #0]
   2ca9a:	2b2f      	cmp	r3, #47	; 0x2f
   2ca9c:	d003      	beq.n	2caa6 <follow_path+0x1a>
   2ca9e:	683b      	ldr	r3, [r7, #0]
   2caa0:	781b      	ldrb	r3, [r3, #0]
   2caa2:	2b5c      	cmp	r3, #92	; 0x5c
   2caa4:	d102      	bne.n	2caac <follow_path+0x20>
		path++;
   2caa6:	683b      	ldr	r3, [r7, #0]
   2caa8:	3301      	adds	r3, #1
   2caaa:	603b      	str	r3, [r7, #0]
	dj->sclust = 0;						/* Start from the root dir */
   2caac:	687b      	ldr	r3, [r7, #4]
   2caae:	2200      	movs	r2, #0
   2cab0:	609a      	str	r2, [r3, #8]
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
   2cab2:	683b      	ldr	r3, [r7, #0]
   2cab4:	781b      	ldrb	r3, [r3, #0]
   2cab6:	2b1f      	cmp	r3, #31
   2cab8:	d80c      	bhi.n	2cad4 <follow_path+0x48>
		res = dir_sdi(dj, 0);
   2caba:	230f      	movs	r3, #15
   2cabc:	18fc      	adds	r4, r7, r3
   2cabe:	687b      	ldr	r3, [r7, #4]
   2cac0:	2100      	movs	r1, #0
   2cac2:	0018      	movs	r0, r3
   2cac4:	4b3c      	ldr	r3, [pc, #240]	; (2cbb8 <follow_path+0x12c>)
   2cac6:	4798      	blx	r3
   2cac8:	0003      	movs	r3, r0
   2caca:	7023      	strb	r3, [r4, #0]
		dj->dir = 0;
   2cacc:	687b      	ldr	r3, [r7, #4]
   2cace:	2200      	movs	r2, #0
   2cad0:	615a      	str	r2, [r3, #20]
   2cad2:	e06a      	b.n	2cbaa <follow_path+0x11e>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
   2cad4:	230f      	movs	r3, #15
   2cad6:	18fc      	adds	r4, r7, r3
   2cad8:	003a      	movs	r2, r7
   2cada:	687b      	ldr	r3, [r7, #4]
   2cadc:	0011      	movs	r1, r2
   2cade:	0018      	movs	r0, r3
   2cae0:	4b36      	ldr	r3, [pc, #216]	; (2cbbc <follow_path+0x130>)
   2cae2:	4798      	blx	r3
   2cae4:	0003      	movs	r3, r0
   2cae6:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2cae8:	230f      	movs	r3, #15
   2caea:	18fb      	adds	r3, r7, r3
   2caec:	781b      	ldrb	r3, [r3, #0]
   2caee:	2b00      	cmp	r3, #0
   2caf0:	d154      	bne.n	2cb9c <follow_path+0x110>
			res = dir_find(dj);				/* Find it */
   2caf2:	230f      	movs	r3, #15
   2caf4:	18fc      	adds	r4, r7, r3
   2caf6:	687b      	ldr	r3, [r7, #4]
   2caf8:	0018      	movs	r0, r3
   2cafa:	4b31      	ldr	r3, [pc, #196]	; (2cbc0 <follow_path+0x134>)
   2cafc:	4798      	blx	r3
   2cafe:	0003      	movs	r3, r0
   2cb00:	7023      	strb	r3, [r4, #0]
			ns = *(dj->fn+NS);
   2cb02:	687b      	ldr	r3, [r7, #4]
   2cb04:	699a      	ldr	r2, [r3, #24]
   2cb06:	230e      	movs	r3, #14
   2cb08:	18fb      	adds	r3, r7, r3
   2cb0a:	7ad2      	ldrb	r2, [r2, #11]
   2cb0c:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
   2cb0e:	230f      	movs	r3, #15
   2cb10:	18fb      	adds	r3, r7, r3
   2cb12:	781b      	ldrb	r3, [r3, #0]
   2cb14:	2b00      	cmp	r3, #0
   2cb16:	d00f      	beq.n	2cb38 <follow_path+0xac>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   2cb18:	230f      	movs	r3, #15
   2cb1a:	18fb      	adds	r3, r7, r3
   2cb1c:	781b      	ldrb	r3, [r3, #0]
   2cb1e:	2b04      	cmp	r3, #4
   2cb20:	d13e      	bne.n	2cba0 <follow_path+0x114>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
   2cb22:	230e      	movs	r3, #14
   2cb24:	18fb      	adds	r3, r7, r3
   2cb26:	781b      	ldrb	r3, [r3, #0]
   2cb28:	2204      	movs	r2, #4
   2cb2a:	4013      	ands	r3, r2
   2cb2c:	d13a      	bne.n	2cba4 <follow_path+0x118>
   2cb2e:	230f      	movs	r3, #15
   2cb30:	18fb      	adds	r3, r7, r3
   2cb32:	2205      	movs	r2, #5
   2cb34:	701a      	strb	r2, [r3, #0]
				}
				break;
   2cb36:	e035      	b.n	2cba4 <follow_path+0x118>
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   2cb38:	230e      	movs	r3, #14
   2cb3a:	18fb      	adds	r3, r7, r3
   2cb3c:	781b      	ldrb	r3, [r3, #0]
   2cb3e:	2204      	movs	r2, #4
   2cb40:	4013      	ands	r3, r2
   2cb42:	d131      	bne.n	2cba8 <follow_path+0x11c>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
   2cb44:	687b      	ldr	r3, [r7, #4]
   2cb46:	695b      	ldr	r3, [r3, #20]
   2cb48:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
   2cb4a:	68bb      	ldr	r3, [r7, #8]
   2cb4c:	330b      	adds	r3, #11
   2cb4e:	781b      	ldrb	r3, [r3, #0]
   2cb50:	001a      	movs	r2, r3
   2cb52:	2310      	movs	r3, #16
   2cb54:	4013      	ands	r3, r2
   2cb56:	d104      	bne.n	2cb62 <follow_path+0xd6>
				res = FR_NO_PATH; break;
   2cb58:	230f      	movs	r3, #15
   2cb5a:	18fb      	adds	r3, r7, r3
   2cb5c:	2205      	movs	r2, #5
   2cb5e:	701a      	strb	r2, [r3, #0]
   2cb60:	e023      	b.n	2cbaa <follow_path+0x11e>
			}
			dj->sclust = LD_CLUST(dir);
   2cb62:	68bb      	ldr	r3, [r7, #8]
   2cb64:	3315      	adds	r3, #21
   2cb66:	781b      	ldrb	r3, [r3, #0]
   2cb68:	021b      	lsls	r3, r3, #8
   2cb6a:	b21a      	sxth	r2, r3
   2cb6c:	68bb      	ldr	r3, [r7, #8]
   2cb6e:	3314      	adds	r3, #20
   2cb70:	781b      	ldrb	r3, [r3, #0]
   2cb72:	b21b      	sxth	r3, r3
   2cb74:	4313      	orrs	r3, r2
   2cb76:	b21b      	sxth	r3, r3
   2cb78:	b29b      	uxth	r3, r3
   2cb7a:	041b      	lsls	r3, r3, #16
   2cb7c:	68ba      	ldr	r2, [r7, #8]
   2cb7e:	321b      	adds	r2, #27
   2cb80:	7812      	ldrb	r2, [r2, #0]
   2cb82:	0212      	lsls	r2, r2, #8
   2cb84:	b211      	sxth	r1, r2
   2cb86:	68ba      	ldr	r2, [r7, #8]
   2cb88:	321a      	adds	r2, #26
   2cb8a:	7812      	ldrb	r2, [r2, #0]
   2cb8c:	b212      	sxth	r2, r2
   2cb8e:	430a      	orrs	r2, r1
   2cb90:	b212      	sxth	r2, r2
   2cb92:	b292      	uxth	r2, r2
   2cb94:	431a      	orrs	r2, r3
   2cb96:	687b      	ldr	r3, [r7, #4]
   2cb98:	609a      	str	r2, [r3, #8]
			res = create_name(dj, &path);	/* Get a segment */
   2cb9a:	e79b      	b.n	2cad4 <follow_path+0x48>
			if (res != FR_OK) break;
   2cb9c:	46c0      	nop			; (mov r8, r8)
   2cb9e:	e004      	b.n	2cbaa <follow_path+0x11e>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   2cba0:	46c0      	nop			; (mov r8, r8)
   2cba2:	e002      	b.n	2cbaa <follow_path+0x11e>
				break;
   2cba4:	46c0      	nop			; (mov r8, r8)
   2cba6:	e000      	b.n	2cbaa <follow_path+0x11e>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   2cba8:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
   2cbaa:	230f      	movs	r3, #15
   2cbac:	18fb      	adds	r3, r7, r3
   2cbae:	781b      	ldrb	r3, [r3, #0]
}
   2cbb0:	0018      	movs	r0, r3
   2cbb2:	46bd      	mov	sp, r7
   2cbb4:	b005      	add	sp, #20
   2cbb6:	bd90      	pop	{r4, r7, pc}
   2cbb8:	0002ba5d 	.word	0x0002ba5d
   2cbbc:	0002c645 	.word	0x0002c645
   2cbc0:	0002c0e1 	.word	0x0002c0e1

0002cbc4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
   2cbc4:	b590      	push	{r4, r7, lr}
   2cbc6:	b083      	sub	sp, #12
   2cbc8:	af00      	add	r7, sp, #0
   2cbca:	6078      	str	r0, [r7, #4]
   2cbcc:	6039      	str	r1, [r7, #0]
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   2cbce:	687b      	ldr	r3, [r7, #4]
   2cbd0:	7858      	ldrb	r0, [r3, #1]
   2cbd2:	687b      	ldr	r3, [r7, #4]
   2cbd4:	3330      	adds	r3, #48	; 0x30
   2cbd6:	0019      	movs	r1, r3
   2cbd8:	683a      	ldr	r2, [r7, #0]
   2cbda:	2301      	movs	r3, #1
   2cbdc:	4c2a      	ldr	r4, [pc, #168]	; (2cc88 <check_fs+0xc4>)
   2cbde:	47a0      	blx	r4
   2cbe0:	1e03      	subs	r3, r0, #0
   2cbe2:	d001      	beq.n	2cbe8 <check_fs+0x24>
		return 3;
   2cbe4:	2303      	movs	r3, #3
   2cbe6:	e04b      	b.n	2cc80 <check_fs+0xbc>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
   2cbe8:	687b      	ldr	r3, [r7, #4]
   2cbea:	4a28      	ldr	r2, [pc, #160]	; (2cc8c <check_fs+0xc8>)
   2cbec:	4694      	mov	ip, r2
   2cbee:	4463      	add	r3, ip
   2cbf0:	3301      	adds	r3, #1
   2cbf2:	781b      	ldrb	r3, [r3, #0]
   2cbf4:	021b      	lsls	r3, r3, #8
   2cbf6:	b21a      	sxth	r2, r3
   2cbf8:	687b      	ldr	r3, [r7, #4]
   2cbfa:	4924      	ldr	r1, [pc, #144]	; (2cc8c <check_fs+0xc8>)
   2cbfc:	5c5b      	ldrb	r3, [r3, r1]
   2cbfe:	b21b      	sxth	r3, r3
   2cc00:	4313      	orrs	r3, r2
   2cc02:	b21b      	sxth	r3, r3
   2cc04:	4a22      	ldr	r2, [pc, #136]	; (2cc90 <check_fs+0xcc>)
   2cc06:	4293      	cmp	r3, r2
   2cc08:	d001      	beq.n	2cc0e <check_fs+0x4a>
		return 2;
   2cc0a:	2302      	movs	r3, #2
   2cc0c:	e038      	b.n	2cc80 <check_fs+0xbc>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
   2cc0e:	687b      	ldr	r3, [r7, #4]
   2cc10:	3366      	adds	r3, #102	; 0x66
   2cc12:	3303      	adds	r3, #3
   2cc14:	781b      	ldrb	r3, [r3, #0]
   2cc16:	061a      	lsls	r2, r3, #24
   2cc18:	687b      	ldr	r3, [r7, #4]
   2cc1a:	3366      	adds	r3, #102	; 0x66
   2cc1c:	3302      	adds	r3, #2
   2cc1e:	781b      	ldrb	r3, [r3, #0]
   2cc20:	041b      	lsls	r3, r3, #16
   2cc22:	4313      	orrs	r3, r2
   2cc24:	687a      	ldr	r2, [r7, #4]
   2cc26:	3266      	adds	r2, #102	; 0x66
   2cc28:	3201      	adds	r2, #1
   2cc2a:	7812      	ldrb	r2, [r2, #0]
   2cc2c:	0212      	lsls	r2, r2, #8
   2cc2e:	4313      	orrs	r3, r2
   2cc30:	687a      	ldr	r2, [r7, #4]
   2cc32:	2166      	movs	r1, #102	; 0x66
   2cc34:	5c52      	ldrb	r2, [r2, r1]
   2cc36:	4313      	orrs	r3, r2
   2cc38:	021b      	lsls	r3, r3, #8
   2cc3a:	0a1b      	lsrs	r3, r3, #8
   2cc3c:	4a15      	ldr	r2, [pc, #84]	; (2cc94 <check_fs+0xd0>)
   2cc3e:	4293      	cmp	r3, r2
   2cc40:	d101      	bne.n	2cc46 <check_fs+0x82>
		return 0;
   2cc42:	2300      	movs	r3, #0
   2cc44:	e01c      	b.n	2cc80 <check_fs+0xbc>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
   2cc46:	687b      	ldr	r3, [r7, #4]
   2cc48:	3382      	adds	r3, #130	; 0x82
   2cc4a:	3303      	adds	r3, #3
   2cc4c:	781b      	ldrb	r3, [r3, #0]
   2cc4e:	061a      	lsls	r2, r3, #24
   2cc50:	687b      	ldr	r3, [r7, #4]
   2cc52:	3382      	adds	r3, #130	; 0x82
   2cc54:	3302      	adds	r3, #2
   2cc56:	781b      	ldrb	r3, [r3, #0]
   2cc58:	041b      	lsls	r3, r3, #16
   2cc5a:	4313      	orrs	r3, r2
   2cc5c:	687a      	ldr	r2, [r7, #4]
   2cc5e:	3282      	adds	r2, #130	; 0x82
   2cc60:	3201      	adds	r2, #1
   2cc62:	7812      	ldrb	r2, [r2, #0]
   2cc64:	0212      	lsls	r2, r2, #8
   2cc66:	4313      	orrs	r3, r2
   2cc68:	687a      	ldr	r2, [r7, #4]
   2cc6a:	2182      	movs	r1, #130	; 0x82
   2cc6c:	5c52      	ldrb	r2, [r2, r1]
   2cc6e:	4313      	orrs	r3, r2
   2cc70:	021b      	lsls	r3, r3, #8
   2cc72:	0a1b      	lsrs	r3, r3, #8
   2cc74:	4a07      	ldr	r2, [pc, #28]	; (2cc94 <check_fs+0xd0>)
   2cc76:	4293      	cmp	r3, r2
   2cc78:	d101      	bne.n	2cc7e <check_fs+0xba>
		return 0;
   2cc7a:	2300      	movs	r3, #0
   2cc7c:	e000      	b.n	2cc80 <check_fs+0xbc>

	return 1;
   2cc7e:	2301      	movs	r3, #1
}
   2cc80:	0018      	movs	r0, r3
   2cc82:	46bd      	mov	sp, r7
   2cc84:	b003      	add	sp, #12
   2cc86:	bd90      	pop	{r4, r7, pc}
   2cc88:	0002ae2d 	.word	0x0002ae2d
   2cc8c:	0000022e 	.word	0x0000022e
   2cc90:	ffffaa55 	.word	0xffffaa55
   2cc94:	00544146 	.word	0x00544146

0002cc98 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
   2cc98:	b590      	push	{r4, r7, lr}
   2cc9a:	b093      	sub	sp, #76	; 0x4c
   2cc9c:	af00      	add	r7, sp, #0
   2cc9e:	60f8      	str	r0, [r7, #12]
   2cca0:	60b9      	str	r1, [r7, #8]
   2cca2:	1dfb      	adds	r3, r7, #7
   2cca4:	701a      	strb	r2, [r3, #0]
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
   2cca6:	68fb      	ldr	r3, [r7, #12]
   2cca8:	681b      	ldr	r3, [r3, #0]
   2ccaa:	62fb      	str	r3, [r7, #44]	; 0x2c
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
   2ccac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2ccae:	781b      	ldrb	r3, [r3, #0]
   2ccb0:	3b30      	subs	r3, #48	; 0x30
   2ccb2:	643b      	str	r3, [r7, #64]	; 0x40
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
   2ccb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2ccb6:	2b09      	cmp	r3, #9
   2ccb8:	d80b      	bhi.n	2ccd2 <chk_mounted+0x3a>
   2ccba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2ccbc:	3301      	adds	r3, #1
   2ccbe:	781b      	ldrb	r3, [r3, #0]
   2ccc0:	2b3a      	cmp	r3, #58	; 0x3a
   2ccc2:	d106      	bne.n	2ccd2 <chk_mounted+0x3a>
		p += 2; *path = p;				/* Return pointer to the path name */
   2ccc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2ccc6:	3302      	adds	r3, #2
   2ccc8:	62fb      	str	r3, [r7, #44]	; 0x2c
   2ccca:	68fb      	ldr	r3, [r7, #12]
   2cccc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2ccce:	601a      	str	r2, [r3, #0]
   2ccd0:	e001      	b.n	2ccd6 <chk_mounted+0x3e>
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
#else
		vol = 0;						/* Use drive 0 */
   2ccd2:	2300      	movs	r3, #0
   2ccd4:	643b      	str	r3, [r7, #64]	; 0x40
#endif
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
   2ccd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2ccd8:	2b07      	cmp	r3, #7
   2ccda:	d901      	bls.n	2cce0 <chk_mounted+0x48>
		return FR_INVALID_DRIVE;
   2ccdc:	230b      	movs	r3, #11
   2ccde:	e2af      	b.n	2d240 <chk_mounted+0x5a8>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
   2cce0:	4bc5      	ldr	r3, [pc, #788]	; (2cff8 <chk_mounted+0x360>)
   2cce2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   2cce4:	0092      	lsls	r2, r2, #2
   2cce6:	58d3      	ldr	r3, [r2, r3]
   2cce8:	62bb      	str	r3, [r7, #40]	; 0x28
   2ccea:	68bb      	ldr	r3, [r7, #8]
   2ccec:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2ccee:	601a      	str	r2, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
   2ccf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ccf2:	2b00      	cmp	r3, #0
   2ccf4:	d101      	bne.n	2ccfa <chk_mounted+0x62>
   2ccf6:	230c      	movs	r3, #12
   2ccf8:	e2a2      	b.n	2d240 <chk_mounted+0x5a8>

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
   2ccfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ccfc:	781b      	ldrb	r3, [r3, #0]
   2ccfe:	2b00      	cmp	r3, #0
   2cd00:	d01c      	beq.n	2cd3c <chk_mounted+0xa4>
		stat = disk_status(fs->drv);
   2cd02:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cd04:	785b      	ldrb	r3, [r3, #1]
   2cd06:	2227      	movs	r2, #39	; 0x27
   2cd08:	18bc      	adds	r4, r7, r2
   2cd0a:	0018      	movs	r0, r3
   2cd0c:	4bbb      	ldr	r3, [pc, #748]	; (2cffc <chk_mounted+0x364>)
   2cd0e:	4798      	blx	r3
   2cd10:	0003      	movs	r3, r0
   2cd12:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
   2cd14:	2327      	movs	r3, #39	; 0x27
   2cd16:	18fb      	adds	r3, r7, r3
   2cd18:	781b      	ldrb	r3, [r3, #0]
   2cd1a:	2201      	movs	r2, #1
   2cd1c:	4013      	ands	r3, r2
   2cd1e:	d10d      	bne.n	2cd3c <chk_mounted+0xa4>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
   2cd20:	1dfb      	adds	r3, r7, #7
   2cd22:	781b      	ldrb	r3, [r3, #0]
   2cd24:	2b00      	cmp	r3, #0
   2cd26:	d007      	beq.n	2cd38 <chk_mounted+0xa0>
   2cd28:	2327      	movs	r3, #39	; 0x27
   2cd2a:	18fb      	adds	r3, r7, r3
   2cd2c:	781b      	ldrb	r3, [r3, #0]
   2cd2e:	2204      	movs	r2, #4
   2cd30:	4013      	ands	r3, r2
   2cd32:	d001      	beq.n	2cd38 <chk_mounted+0xa0>
				return FR_WRITE_PROTECTED;
   2cd34:	230a      	movs	r3, #10
   2cd36:	e283      	b.n	2d240 <chk_mounted+0x5a8>
			return FR_OK;				/* The file system object is valid */
   2cd38:	2300      	movs	r3, #0
   2cd3a:	e281      	b.n	2d240 <chk_mounted+0x5a8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
   2cd3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cd3e:	2200      	movs	r2, #0
   2cd40:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
   2cd42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2cd44:	b2da      	uxtb	r2, r3
   2cd46:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cd48:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
   2cd4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cd4c:	785b      	ldrb	r3, [r3, #1]
   2cd4e:	2227      	movs	r2, #39	; 0x27
   2cd50:	18bc      	adds	r4, r7, r2
   2cd52:	0018      	movs	r0, r3
   2cd54:	4baa      	ldr	r3, [pc, #680]	; (2d000 <chk_mounted+0x368>)
   2cd56:	4798      	blx	r3
   2cd58:	0003      	movs	r3, r0
   2cd5a:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
   2cd5c:	2327      	movs	r3, #39	; 0x27
   2cd5e:	18fb      	adds	r3, r7, r3
   2cd60:	781b      	ldrb	r3, [r3, #0]
   2cd62:	2201      	movs	r2, #1
   2cd64:	4013      	ands	r3, r2
   2cd66:	d001      	beq.n	2cd6c <chk_mounted+0xd4>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
   2cd68:	2303      	movs	r3, #3
   2cd6a:	e269      	b.n	2d240 <chk_mounted+0x5a8>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
   2cd6c:	1dfb      	adds	r3, r7, #7
   2cd6e:	781b      	ldrb	r3, [r3, #0]
   2cd70:	2b00      	cmp	r3, #0
   2cd72:	d007      	beq.n	2cd84 <chk_mounted+0xec>
   2cd74:	2327      	movs	r3, #39	; 0x27
   2cd76:	18fb      	adds	r3, r7, r3
   2cd78:	781b      	ldrb	r3, [r3, #0]
   2cd7a:	2204      	movs	r2, #4
   2cd7c:	4013      	ands	r3, r2
   2cd7e:	d001      	beq.n	2cd84 <chk_mounted+0xec>
		return FR_WRITE_PROTECTED;
   2cd80:	230a      	movs	r3, #10
   2cd82:	e25d      	b.n	2d240 <chk_mounted+0x5a8>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
   2cd84:	2300      	movs	r3, #0
   2cd86:	63fb      	str	r3, [r7, #60]	; 0x3c
   2cd88:	2347      	movs	r3, #71	; 0x47
   2cd8a:	18fc      	adds	r4, r7, r3
   2cd8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2cd8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cd90:	0011      	movs	r1, r2
   2cd92:	0018      	movs	r0, r3
   2cd94:	4b9b      	ldr	r3, [pc, #620]	; (2d004 <chk_mounted+0x36c>)
   2cd96:	4798      	blx	r3
   2cd98:	0003      	movs	r3, r0
   2cd9a:	7023      	strb	r3, [r4, #0]
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
   2cd9c:	2347      	movs	r3, #71	; 0x47
   2cd9e:	18fb      	adds	r3, r7, r3
   2cda0:	781b      	ldrb	r3, [r3, #0]
   2cda2:	2b01      	cmp	r3, #1
   2cda4:	d13b      	bne.n	2ce1e <chk_mounted+0x186>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
   2cda6:	2346      	movs	r3, #70	; 0x46
   2cda8:	18fb      	adds	r3, r7, r3
   2cdaa:	2200      	movs	r2, #0
   2cdac:	701a      	strb	r2, [r3, #0]
		if (pi) pi--;
   2cdae:	2346      	movs	r3, #70	; 0x46
   2cdb0:	18fb      	adds	r3, r7, r3
   2cdb2:	781b      	ldrb	r3, [r3, #0]
   2cdb4:	2b00      	cmp	r3, #0
   2cdb6:	d006      	beq.n	2cdc6 <chk_mounted+0x12e>
   2cdb8:	2346      	movs	r3, #70	; 0x46
   2cdba:	18fb      	adds	r3, r7, r3
   2cdbc:	781a      	ldrb	r2, [r3, #0]
   2cdbe:	2346      	movs	r3, #70	; 0x46
   2cdc0:	18fb      	adds	r3, r7, r3
   2cdc2:	3a01      	subs	r2, #1
   2cdc4:	701a      	strb	r2, [r3, #0]
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
   2cdc6:	2346      	movs	r3, #70	; 0x46
   2cdc8:	18fb      	adds	r3, r7, r3
   2cdca:	781b      	ldrb	r3, [r3, #0]
   2cdcc:	011b      	lsls	r3, r3, #4
   2cdce:	33bf      	adds	r3, #191	; 0xbf
   2cdd0:	33ff      	adds	r3, #255	; 0xff
   2cdd2:	3330      	adds	r3, #48	; 0x30
   2cdd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2cdd6:	18d3      	adds	r3, r2, r3
   2cdd8:	623b      	str	r3, [r7, #32]
		if (tbl[4]) {						/* Is the partition existing? */
   2cdda:	6a3b      	ldr	r3, [r7, #32]
   2cddc:	3304      	adds	r3, #4
   2cdde:	781b      	ldrb	r3, [r3, #0]
   2cde0:	2b00      	cmp	r3, #0
   2cde2:	d01c      	beq.n	2ce1e <chk_mounted+0x186>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
   2cde4:	6a3b      	ldr	r3, [r7, #32]
   2cde6:	330b      	adds	r3, #11
   2cde8:	781b      	ldrb	r3, [r3, #0]
   2cdea:	061a      	lsls	r2, r3, #24
   2cdec:	6a3b      	ldr	r3, [r7, #32]
   2cdee:	330a      	adds	r3, #10
   2cdf0:	781b      	ldrb	r3, [r3, #0]
   2cdf2:	041b      	lsls	r3, r3, #16
   2cdf4:	4313      	orrs	r3, r2
   2cdf6:	6a3a      	ldr	r2, [r7, #32]
   2cdf8:	3209      	adds	r2, #9
   2cdfa:	7812      	ldrb	r2, [r2, #0]
   2cdfc:	0212      	lsls	r2, r2, #8
   2cdfe:	4313      	orrs	r3, r2
   2ce00:	6a3a      	ldr	r2, [r7, #32]
   2ce02:	3208      	adds	r2, #8
   2ce04:	7812      	ldrb	r2, [r2, #0]
   2ce06:	4313      	orrs	r3, r2
   2ce08:	63fb      	str	r3, [r7, #60]	; 0x3c
			fmt = check_fs(fs, bsect);		/* Check the partition */
   2ce0a:	2347      	movs	r3, #71	; 0x47
   2ce0c:	18fc      	adds	r4, r7, r3
   2ce0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2ce10:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ce12:	0011      	movs	r1, r2
   2ce14:	0018      	movs	r0, r3
   2ce16:	4b7b      	ldr	r3, [pc, #492]	; (2d004 <chk_mounted+0x36c>)
   2ce18:	4798      	blx	r3
   2ce1a:	0003      	movs	r3, r0
   2ce1c:	7023      	strb	r3, [r4, #0]
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
   2ce1e:	2347      	movs	r3, #71	; 0x47
   2ce20:	18fb      	adds	r3, r7, r3
   2ce22:	781b      	ldrb	r3, [r3, #0]
   2ce24:	2b03      	cmp	r3, #3
   2ce26:	d101      	bne.n	2ce2c <chk_mounted+0x194>
   2ce28:	2301      	movs	r3, #1
   2ce2a:	e209      	b.n	2d240 <chk_mounted+0x5a8>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
   2ce2c:	2347      	movs	r3, #71	; 0x47
   2ce2e:	18fb      	adds	r3, r7, r3
   2ce30:	781b      	ldrb	r3, [r3, #0]
   2ce32:	2b00      	cmp	r3, #0
   2ce34:	d001      	beq.n	2ce3a <chk_mounted+0x1a2>
   2ce36:	230d      	movs	r3, #13
   2ce38:	e202      	b.n	2d240 <chk_mounted+0x5a8>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
   2ce3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ce3c:	223c      	movs	r2, #60	; 0x3c
   2ce3e:	5c9b      	ldrb	r3, [r3, r2]
   2ce40:	021b      	lsls	r3, r3, #8
   2ce42:	b21a      	sxth	r2, r3
   2ce44:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ce46:	213b      	movs	r1, #59	; 0x3b
   2ce48:	5c5b      	ldrb	r3, [r3, r1]
   2ce4a:	b21b      	sxth	r3, r3
   2ce4c:	4313      	orrs	r3, r2
   2ce4e:	b21a      	sxth	r2, r3
   2ce50:	2380      	movs	r3, #128	; 0x80
   2ce52:	009b      	lsls	r3, r3, #2
   2ce54:	429a      	cmp	r2, r3
   2ce56:	d001      	beq.n	2ce5c <chk_mounted+0x1c4>
		return FR_NO_FILESYSTEM;
   2ce58:	230d      	movs	r3, #13
   2ce5a:	e1f1      	b.n	2d240 <chk_mounted+0x5a8>

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
   2ce5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ce5e:	2247      	movs	r2, #71	; 0x47
   2ce60:	5c9b      	ldrb	r3, [r3, r2]
   2ce62:	021b      	lsls	r3, r3, #8
   2ce64:	b21a      	sxth	r2, r3
   2ce66:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ce68:	2146      	movs	r1, #70	; 0x46
   2ce6a:	5c5b      	ldrb	r3, [r3, r1]
   2ce6c:	b21b      	sxth	r3, r3
   2ce6e:	4313      	orrs	r3, r2
   2ce70:	b21b      	sxth	r3, r3
   2ce72:	b29b      	uxth	r3, r3
   2ce74:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
   2ce76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2ce78:	2b00      	cmp	r3, #0
   2ce7a:	d112      	bne.n	2cea2 <chk_mounted+0x20a>
   2ce7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ce7e:	2257      	movs	r2, #87	; 0x57
   2ce80:	5c9b      	ldrb	r3, [r3, r2]
   2ce82:	061a      	lsls	r2, r3, #24
   2ce84:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ce86:	2156      	movs	r1, #86	; 0x56
   2ce88:	5c5b      	ldrb	r3, [r3, r1]
   2ce8a:	041b      	lsls	r3, r3, #16
   2ce8c:	4313      	orrs	r3, r2
   2ce8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2ce90:	2155      	movs	r1, #85	; 0x55
   2ce92:	5c52      	ldrb	r2, [r2, r1]
   2ce94:	0212      	lsls	r2, r2, #8
   2ce96:	4313      	orrs	r3, r2
   2ce98:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2ce9a:	2154      	movs	r1, #84	; 0x54
   2ce9c:	5c52      	ldrb	r2, [r2, r1]
   2ce9e:	4313      	orrs	r3, r2
   2cea0:	63bb      	str	r3, [r7, #56]	; 0x38
	fs->fsize = fasize;
   2cea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cea4:	6bba      	ldr	r2, [r7, #56]	; 0x38
   2cea6:	61da      	str	r2, [r3, #28]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
   2cea8:	231f      	movs	r3, #31
   2ceaa:	18fb      	adds	r3, r7, r3
   2ceac:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2ceae:	2140      	movs	r1, #64	; 0x40
   2ceb0:	5c52      	ldrb	r2, [r2, r1]
   2ceb2:	701a      	strb	r2, [r3, #0]
   2ceb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ceb6:	221f      	movs	r2, #31
   2ceb8:	18ba      	adds	r2, r7, r2
   2ceba:	7812      	ldrb	r2, [r2, #0]
   2cebc:	70da      	strb	r2, [r3, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
   2cebe:	231f      	movs	r3, #31
   2cec0:	18fb      	adds	r3, r7, r3
   2cec2:	781b      	ldrb	r3, [r3, #0]
   2cec4:	2b01      	cmp	r3, #1
   2cec6:	d006      	beq.n	2ced6 <chk_mounted+0x23e>
   2cec8:	231f      	movs	r3, #31
   2ceca:	18fb      	adds	r3, r7, r3
   2cecc:	781b      	ldrb	r3, [r3, #0]
   2cece:	2b02      	cmp	r3, #2
   2ced0:	d001      	beq.n	2ced6 <chk_mounted+0x23e>
   2ced2:	230d      	movs	r3, #13
   2ced4:	e1b4      	b.n	2d240 <chk_mounted+0x5a8>
	fasize *= b;										/* Number of sectors for FAT area */
   2ced6:	231f      	movs	r3, #31
   2ced8:	18fb      	adds	r3, r7, r3
   2ceda:	781a      	ldrb	r2, [r3, #0]
   2cedc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2cede:	4353      	muls	r3, r2
   2cee0:	63bb      	str	r3, [r7, #56]	; 0x38

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
   2cee2:	231f      	movs	r3, #31
   2cee4:	18fb      	adds	r3, r7, r3
   2cee6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2cee8:	213d      	movs	r1, #61	; 0x3d
   2ceea:	5c52      	ldrb	r2, [r2, r1]
   2ceec:	701a      	strb	r2, [r3, #0]
   2ceee:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cef0:	221f      	movs	r2, #31
   2cef2:	18ba      	adds	r2, r7, r2
   2cef4:	7812      	ldrb	r2, [r2, #0]
   2cef6:	709a      	strb	r2, [r3, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
   2cef8:	231f      	movs	r3, #31
   2cefa:	18fb      	adds	r3, r7, r3
   2cefc:	781b      	ldrb	r3, [r3, #0]
   2cefe:	2b00      	cmp	r3, #0
   2cf00:	d008      	beq.n	2cf14 <chk_mounted+0x27c>
   2cf02:	231f      	movs	r3, #31
   2cf04:	18fb      	adds	r3, r7, r3
   2cf06:	781b      	ldrb	r3, [r3, #0]
   2cf08:	221f      	movs	r2, #31
   2cf0a:	18ba      	adds	r2, r7, r2
   2cf0c:	7812      	ldrb	r2, [r2, #0]
   2cf0e:	3a01      	subs	r2, #1
   2cf10:	4013      	ands	r3, r2
   2cf12:	d001      	beq.n	2cf18 <chk_mounted+0x280>
   2cf14:	230d      	movs	r3, #13
   2cf16:	e193      	b.n	2d240 <chk_mounted+0x5a8>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
   2cf18:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cf1a:	2242      	movs	r2, #66	; 0x42
   2cf1c:	5c9b      	ldrb	r3, [r3, r2]
   2cf1e:	021b      	lsls	r3, r3, #8
   2cf20:	b21a      	sxth	r2, r3
   2cf22:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cf24:	2141      	movs	r1, #65	; 0x41
   2cf26:	5c5b      	ldrb	r3, [r3, r1]
   2cf28:	b21b      	sxth	r3, r3
   2cf2a:	4313      	orrs	r3, r2
   2cf2c:	b21b      	sxth	r3, r3
   2cf2e:	b29a      	uxth	r2, r3
   2cf30:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cf32:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
   2cf34:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cf36:	891b      	ldrh	r3, [r3, #8]
   2cf38:	220f      	movs	r2, #15
   2cf3a:	4013      	ands	r3, r2
   2cf3c:	b29b      	uxth	r3, r3
   2cf3e:	2b00      	cmp	r3, #0
   2cf40:	d001      	beq.n	2cf46 <chk_mounted+0x2ae>
   2cf42:	230d      	movs	r3, #13
   2cf44:	e17c      	b.n	2d240 <chk_mounted+0x5a8>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
   2cf46:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cf48:	2244      	movs	r2, #68	; 0x44
   2cf4a:	5c9b      	ldrb	r3, [r3, r2]
   2cf4c:	021b      	lsls	r3, r3, #8
   2cf4e:	b21a      	sxth	r2, r3
   2cf50:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cf52:	2143      	movs	r1, #67	; 0x43
   2cf54:	5c5b      	ldrb	r3, [r3, r1]
   2cf56:	b21b      	sxth	r3, r3
   2cf58:	4313      	orrs	r3, r2
   2cf5a:	b21b      	sxth	r3, r3
   2cf5c:	b29b      	uxth	r3, r3
   2cf5e:	637b      	str	r3, [r7, #52]	; 0x34
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
   2cf60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2cf62:	2b00      	cmp	r3, #0
   2cf64:	d112      	bne.n	2cf8c <chk_mounted+0x2f4>
   2cf66:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cf68:	2253      	movs	r2, #83	; 0x53
   2cf6a:	5c9b      	ldrb	r3, [r3, r2]
   2cf6c:	061a      	lsls	r2, r3, #24
   2cf6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cf70:	2152      	movs	r1, #82	; 0x52
   2cf72:	5c5b      	ldrb	r3, [r3, r1]
   2cf74:	041b      	lsls	r3, r3, #16
   2cf76:	4313      	orrs	r3, r2
   2cf78:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2cf7a:	2151      	movs	r1, #81	; 0x51
   2cf7c:	5c52      	ldrb	r2, [r2, r1]
   2cf7e:	0212      	lsls	r2, r2, #8
   2cf80:	4313      	orrs	r3, r2
   2cf82:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2cf84:	2150      	movs	r1, #80	; 0x50
   2cf86:	5c52      	ldrb	r2, [r2, r1]
   2cf88:	4313      	orrs	r3, r2
   2cf8a:	637b      	str	r3, [r7, #52]	; 0x34

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
   2cf8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cf8e:	223f      	movs	r2, #63	; 0x3f
   2cf90:	5c9b      	ldrb	r3, [r3, r2]
   2cf92:	021b      	lsls	r3, r3, #8
   2cf94:	b21a      	sxth	r2, r3
   2cf96:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cf98:	213e      	movs	r1, #62	; 0x3e
   2cf9a:	5c5b      	ldrb	r3, [r3, r1]
   2cf9c:	b21b      	sxth	r3, r3
   2cf9e:	4313      	orrs	r3, r2
   2cfa0:	b21a      	sxth	r2, r3
   2cfa2:	231c      	movs	r3, #28
   2cfa4:	18fb      	adds	r3, r7, r3
   2cfa6:	801a      	strh	r2, [r3, #0]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
   2cfa8:	231c      	movs	r3, #28
   2cfaa:	18fb      	adds	r3, r7, r3
   2cfac:	881b      	ldrh	r3, [r3, #0]
   2cfae:	2b00      	cmp	r3, #0
   2cfb0:	d101      	bne.n	2cfb6 <chk_mounted+0x31e>
   2cfb2:	230d      	movs	r3, #13
   2cfb4:	e144      	b.n	2d240 <chk_mounted+0x5a8>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
   2cfb6:	231c      	movs	r3, #28
   2cfb8:	18fb      	adds	r3, r7, r3
   2cfba:	881a      	ldrh	r2, [r3, #0]
   2cfbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2cfbe:	18d3      	adds	r3, r2, r3
   2cfc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2cfc2:	8912      	ldrh	r2, [r2, #8]
   2cfc4:	0912      	lsrs	r2, r2, #4
   2cfc6:	b292      	uxth	r2, r2
   2cfc8:	189b      	adds	r3, r3, r2
   2cfca:	61bb      	str	r3, [r7, #24]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
   2cfcc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2cfce:	69bb      	ldr	r3, [r7, #24]
   2cfd0:	429a      	cmp	r2, r3
   2cfd2:	d201      	bcs.n	2cfd8 <chk_mounted+0x340>
   2cfd4:	230d      	movs	r3, #13
   2cfd6:	e133      	b.n	2d240 <chk_mounted+0x5a8>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
   2cfd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2cfda:	69bb      	ldr	r3, [r7, #24]
   2cfdc:	1ad2      	subs	r2, r2, r3
   2cfde:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cfe0:	789b      	ldrb	r3, [r3, #2]
   2cfe2:	0019      	movs	r1, r3
   2cfe4:	4b08      	ldr	r3, [pc, #32]	; (2d008 <chk_mounted+0x370>)
   2cfe6:	0010      	movs	r0, r2
   2cfe8:	4798      	blx	r3
   2cfea:	0003      	movs	r3, r0
   2cfec:	617b      	str	r3, [r7, #20]
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
   2cfee:	697b      	ldr	r3, [r7, #20]
   2cff0:	2b00      	cmp	r3, #0
   2cff2:	d10b      	bne.n	2d00c <chk_mounted+0x374>
   2cff4:	230d      	movs	r3, #13
   2cff6:	e123      	b.n	2d240 <chk_mounted+0x5a8>
   2cff8:	20003d14 	.word	0x20003d14
   2cffc:	0002adf5 	.word	0x0002adf5
   2d000:	0002ad71 	.word	0x0002ad71
   2d004:	0002cbc5 	.word	0x0002cbc5
   2d008:	000323c9 	.word	0x000323c9
	fmt = FS_FAT12;
   2d00c:	2347      	movs	r3, #71	; 0x47
   2d00e:	18fb      	adds	r3, r7, r3
   2d010:	2201      	movs	r2, #1
   2d012:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
   2d014:	697b      	ldr	r3, [r7, #20]
   2d016:	4a8c      	ldr	r2, [pc, #560]	; (2d248 <chk_mounted+0x5b0>)
   2d018:	4293      	cmp	r3, r2
   2d01a:	d903      	bls.n	2d024 <chk_mounted+0x38c>
   2d01c:	2347      	movs	r3, #71	; 0x47
   2d01e:	18fb      	adds	r3, r7, r3
   2d020:	2202      	movs	r2, #2
   2d022:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
   2d024:	697b      	ldr	r3, [r7, #20]
   2d026:	4a89      	ldr	r2, [pc, #548]	; (2d24c <chk_mounted+0x5b4>)
   2d028:	4293      	cmp	r3, r2
   2d02a:	d903      	bls.n	2d034 <chk_mounted+0x39c>
   2d02c:	2347      	movs	r3, #71	; 0x47
   2d02e:	18fb      	adds	r3, r7, r3
   2d030:	2203      	movs	r2, #3
   2d032:	701a      	strb	r2, [r3, #0]

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   2d034:	697b      	ldr	r3, [r7, #20]
   2d036:	1c9a      	adds	r2, r3, #2
   2d038:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d03a:	619a      	str	r2, [r3, #24]
	fs->database = bsect + sysect;						/* Data start sector */
   2d03c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2d03e:	69bb      	ldr	r3, [r7, #24]
   2d040:	18d2      	adds	r2, r2, r3
   2d042:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d044:	629a      	str	r2, [r3, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   2d046:	231c      	movs	r3, #28
   2d048:	18fb      	adds	r3, r7, r3
   2d04a:	881a      	ldrh	r2, [r3, #0]
   2d04c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2d04e:	18d2      	adds	r2, r2, r3
   2d050:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d052:	621a      	str	r2, [r3, #32]
	if (fmt == FS_FAT32) {
   2d054:	2347      	movs	r3, #71	; 0x47
   2d056:	18fb      	adds	r3, r7, r3
   2d058:	781b      	ldrb	r3, [r3, #0]
   2d05a:	2b03      	cmp	r3, #3
   2d05c:	d11e      	bne.n	2d09c <chk_mounted+0x404>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
   2d05e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d060:	891b      	ldrh	r3, [r3, #8]
   2d062:	2b00      	cmp	r3, #0
   2d064:	d001      	beq.n	2d06a <chk_mounted+0x3d2>
   2d066:	230d      	movs	r3, #13
   2d068:	e0ea      	b.n	2d240 <chk_mounted+0x5a8>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
   2d06a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d06c:	225f      	movs	r2, #95	; 0x5f
   2d06e:	5c9b      	ldrb	r3, [r3, r2]
   2d070:	061a      	lsls	r2, r3, #24
   2d072:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d074:	215e      	movs	r1, #94	; 0x5e
   2d076:	5c5b      	ldrb	r3, [r3, r1]
   2d078:	041b      	lsls	r3, r3, #16
   2d07a:	4313      	orrs	r3, r2
   2d07c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d07e:	215d      	movs	r1, #93	; 0x5d
   2d080:	5c52      	ldrb	r2, [r2, r1]
   2d082:	0212      	lsls	r2, r2, #8
   2d084:	4313      	orrs	r3, r2
   2d086:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d088:	215c      	movs	r1, #92	; 0x5c
   2d08a:	5c52      	ldrb	r2, [r2, r1]
   2d08c:	431a      	orrs	r2, r3
   2d08e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d090:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
   2d092:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d094:	699b      	ldr	r3, [r3, #24]
   2d096:	009b      	lsls	r3, r3, #2
   2d098:	633b      	str	r3, [r7, #48]	; 0x30
   2d09a:	e020      	b.n	2d0de <chk_mounted+0x446>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
   2d09c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d09e:	891b      	ldrh	r3, [r3, #8]
   2d0a0:	2b00      	cmp	r3, #0
   2d0a2:	d101      	bne.n	2d0a8 <chk_mounted+0x410>
   2d0a4:	230d      	movs	r3, #13
   2d0a6:	e0cb      	b.n	2d240 <chk_mounted+0x5a8>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
   2d0a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d0aa:	6a1a      	ldr	r2, [r3, #32]
   2d0ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2d0ae:	18d2      	adds	r2, r2, r3
   2d0b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d0b2:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   2d0b4:	2347      	movs	r3, #71	; 0x47
   2d0b6:	18fb      	adds	r3, r7, r3
   2d0b8:	781b      	ldrb	r3, [r3, #0]
   2d0ba:	2b02      	cmp	r3, #2
   2d0bc:	d103      	bne.n	2d0c6 <chk_mounted+0x42e>
   2d0be:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d0c0:	699b      	ldr	r3, [r3, #24]
   2d0c2:	005b      	lsls	r3, r3, #1
   2d0c4:	e00a      	b.n	2d0dc <chk_mounted+0x444>
   2d0c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d0c8:	699a      	ldr	r2, [r3, #24]
   2d0ca:	0013      	movs	r3, r2
   2d0cc:	005b      	lsls	r3, r3, #1
   2d0ce:	189b      	adds	r3, r3, r2
   2d0d0:	085a      	lsrs	r2, r3, #1
   2d0d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d0d4:	699b      	ldr	r3, [r3, #24]
   2d0d6:	2101      	movs	r1, #1
   2d0d8:	400b      	ands	r3, r1
   2d0da:	18d3      	adds	r3, r2, r3
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
   2d0dc:	633b      	str	r3, [r7, #48]	; 0x30
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   2d0de:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d0e0:	69da      	ldr	r2, [r3, #28]
   2d0e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2d0e4:	495a      	ldr	r1, [pc, #360]	; (2d250 <chk_mounted+0x5b8>)
   2d0e6:	468c      	mov	ip, r1
   2d0e8:	4463      	add	r3, ip
   2d0ea:	0a5b      	lsrs	r3, r3, #9
   2d0ec:	429a      	cmp	r2, r3
   2d0ee:	d201      	bcs.n	2d0f4 <chk_mounted+0x45c>
		return FR_NO_FILESYSTEM;
   2d0f0:	230d      	movs	r3, #13
   2d0f2:	e0a5      	b.n	2d240 <chk_mounted+0x5a8>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
   2d0f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d0f6:	2201      	movs	r2, #1
   2d0f8:	4252      	negs	r2, r2
   2d0fa:	611a      	str	r2, [r3, #16]
	fs->last_clust = 0;
   2d0fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d0fe:	2200      	movs	r2, #0
   2d100:	60da      	str	r2, [r3, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
   2d102:	2347      	movs	r3, #71	; 0x47
   2d104:	18fb      	adds	r3, r7, r3
   2d106:	781b      	ldrb	r3, [r3, #0]
   2d108:	2b03      	cmp	r3, #3
   2d10a:	d000      	beq.n	2d10e <chk_mounted+0x476>
   2d10c:	e082      	b.n	2d214 <chk_mounted+0x57c>
	 	fs->fsi_flag = 0;
   2d10e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d110:	2200      	movs	r2, #0
   2d112:	715a      	strb	r2, [r3, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
   2d114:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d116:	2261      	movs	r2, #97	; 0x61
   2d118:	5c9b      	ldrb	r3, [r3, r2]
   2d11a:	021b      	lsls	r3, r3, #8
   2d11c:	b21a      	sxth	r2, r3
   2d11e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d120:	2160      	movs	r1, #96	; 0x60
   2d122:	5c5b      	ldrb	r3, [r3, r1]
   2d124:	b21b      	sxth	r3, r3
   2d126:	4313      	orrs	r3, r2
   2d128:	b21b      	sxth	r3, r3
   2d12a:	b29b      	uxth	r3, r3
   2d12c:	001a      	movs	r2, r3
   2d12e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2d130:	18d2      	adds	r2, r2, r3
   2d132:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d134:	615a      	str	r2, [r3, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   2d136:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d138:	7858      	ldrb	r0, [r3, #1]
   2d13a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d13c:	3330      	adds	r3, #48	; 0x30
   2d13e:	0019      	movs	r1, r3
   2d140:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d142:	695a      	ldr	r2, [r3, #20]
   2d144:	2301      	movs	r3, #1
   2d146:	4c43      	ldr	r4, [pc, #268]	; (2d254 <chk_mounted+0x5bc>)
   2d148:	47a0      	blx	r4
   2d14a:	1e03      	subs	r3, r0, #0
   2d14c:	d162      	bne.n	2d214 <chk_mounted+0x57c>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   2d14e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d150:	4a41      	ldr	r2, [pc, #260]	; (2d258 <chk_mounted+0x5c0>)
   2d152:	5c9b      	ldrb	r3, [r3, r2]
   2d154:	021b      	lsls	r3, r3, #8
   2d156:	b21a      	sxth	r2, r3
   2d158:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d15a:	4940      	ldr	r1, [pc, #256]	; (2d25c <chk_mounted+0x5c4>)
   2d15c:	5c5b      	ldrb	r3, [r3, r1]
   2d15e:	b21b      	sxth	r3, r3
   2d160:	4313      	orrs	r3, r2
   2d162:	b21b      	sxth	r3, r3
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   2d164:	4a3e      	ldr	r2, [pc, #248]	; (2d260 <chk_mounted+0x5c8>)
   2d166:	4293      	cmp	r3, r2
   2d168:	d154      	bne.n	2d214 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   2d16a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d16c:	2233      	movs	r2, #51	; 0x33
   2d16e:	5c9b      	ldrb	r3, [r3, r2]
   2d170:	061a      	lsls	r2, r3, #24
   2d172:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d174:	2132      	movs	r1, #50	; 0x32
   2d176:	5c5b      	ldrb	r3, [r3, r1]
   2d178:	041b      	lsls	r3, r3, #16
   2d17a:	4313      	orrs	r3, r2
   2d17c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d17e:	2131      	movs	r1, #49	; 0x31
   2d180:	5c52      	ldrb	r2, [r2, r1]
   2d182:	0212      	lsls	r2, r2, #8
   2d184:	4313      	orrs	r3, r2
   2d186:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d188:	2130      	movs	r1, #48	; 0x30
   2d18a:	5c52      	ldrb	r2, [r2, r1]
   2d18c:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   2d18e:	4a35      	ldr	r2, [pc, #212]	; (2d264 <chk_mounted+0x5cc>)
   2d190:	4293      	cmp	r3, r2
   2d192:	d13f      	bne.n	2d214 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
   2d194:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d196:	4a34      	ldr	r2, [pc, #208]	; (2d268 <chk_mounted+0x5d0>)
   2d198:	5c9b      	ldrb	r3, [r3, r2]
   2d19a:	061a      	lsls	r2, r3, #24
   2d19c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d19e:	4933      	ldr	r1, [pc, #204]	; (2d26c <chk_mounted+0x5d4>)
   2d1a0:	5c5b      	ldrb	r3, [r3, r1]
   2d1a2:	041b      	lsls	r3, r3, #16
   2d1a4:	4313      	orrs	r3, r2
   2d1a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d1a8:	4931      	ldr	r1, [pc, #196]	; (2d270 <chk_mounted+0x5d8>)
   2d1aa:	5c52      	ldrb	r2, [r2, r1]
   2d1ac:	0212      	lsls	r2, r2, #8
   2d1ae:	4313      	orrs	r3, r2
   2d1b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2d1b2:	2285      	movs	r2, #133	; 0x85
   2d1b4:	0092      	lsls	r2, r2, #2
   2d1b6:	5c8a      	ldrb	r2, [r1, r2]
   2d1b8:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   2d1ba:	4a2e      	ldr	r2, [pc, #184]	; (2d274 <chk_mounted+0x5dc>)
   2d1bc:	4293      	cmp	r3, r2
   2d1be:	d129      	bne.n	2d214 <chk_mounted+0x57c>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
   2d1c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d1c2:	4a2d      	ldr	r2, [pc, #180]	; (2d278 <chk_mounted+0x5e0>)
   2d1c4:	5c9b      	ldrb	r3, [r3, r2]
   2d1c6:	061a      	lsls	r2, r3, #24
   2d1c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d1ca:	492c      	ldr	r1, [pc, #176]	; (2d27c <chk_mounted+0x5e4>)
   2d1cc:	5c5b      	ldrb	r3, [r3, r1]
   2d1ce:	041b      	lsls	r3, r3, #16
   2d1d0:	4313      	orrs	r3, r2
   2d1d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d1d4:	492a      	ldr	r1, [pc, #168]	; (2d280 <chk_mounted+0x5e8>)
   2d1d6:	5c52      	ldrb	r2, [r2, r1]
   2d1d8:	0212      	lsls	r2, r2, #8
   2d1da:	4313      	orrs	r3, r2
   2d1dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2d1de:	2287      	movs	r2, #135	; 0x87
   2d1e0:	0092      	lsls	r2, r2, #2
   2d1e2:	5c8a      	ldrb	r2, [r1, r2]
   2d1e4:	431a      	orrs	r2, r3
   2d1e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d1e8:	60da      	str	r2, [r3, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
   2d1ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d1ec:	4a25      	ldr	r2, [pc, #148]	; (2d284 <chk_mounted+0x5ec>)
   2d1ee:	5c9b      	ldrb	r3, [r3, r2]
   2d1f0:	061a      	lsls	r2, r3, #24
   2d1f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d1f4:	4924      	ldr	r1, [pc, #144]	; (2d288 <chk_mounted+0x5f0>)
   2d1f6:	5c5b      	ldrb	r3, [r3, r1]
   2d1f8:	041b      	lsls	r3, r3, #16
   2d1fa:	4313      	orrs	r3, r2
   2d1fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d1fe:	4923      	ldr	r1, [pc, #140]	; (2d28c <chk_mounted+0x5f4>)
   2d200:	5c52      	ldrb	r2, [r2, r1]
   2d202:	0212      	lsls	r2, r2, #8
   2d204:	4313      	orrs	r3, r2
   2d206:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2d208:	2286      	movs	r2, #134	; 0x86
   2d20a:	0092      	lsls	r2, r2, #2
   2d20c:	5c8a      	ldrb	r2, [r1, r2]
   2d20e:	431a      	orrs	r2, r3
   2d210:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d212:	611a      	str	r2, [r3, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
   2d214:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d216:	2247      	movs	r2, #71	; 0x47
   2d218:	18ba      	adds	r2, r7, r2
   2d21a:	7812      	ldrb	r2, [r2, #0]
   2d21c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
   2d21e:	4b1c      	ldr	r3, [pc, #112]	; (2d290 <chk_mounted+0x5f8>)
   2d220:	881b      	ldrh	r3, [r3, #0]
   2d222:	3301      	adds	r3, #1
   2d224:	b29a      	uxth	r2, r3
   2d226:	4b1a      	ldr	r3, [pc, #104]	; (2d290 <chk_mounted+0x5f8>)
   2d228:	801a      	strh	r2, [r3, #0]
   2d22a:	4b19      	ldr	r3, [pc, #100]	; (2d290 <chk_mounted+0x5f8>)
   2d22c:	881a      	ldrh	r2, [r3, #0]
   2d22e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d230:	80da      	strh	r2, [r3, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
   2d232:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d234:	2200      	movs	r2, #0
   2d236:	62da      	str	r2, [r3, #44]	; 0x2c
	fs->wflag = 0;
   2d238:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d23a:	2200      	movs	r2, #0
   2d23c:	711a      	strb	r2, [r3, #4]
#endif
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
   2d23e:	2300      	movs	r3, #0
}
   2d240:	0018      	movs	r0, r3
   2d242:	46bd      	mov	sp, r7
   2d244:	b013      	add	sp, #76	; 0x4c
   2d246:	bd90      	pop	{r4, r7, pc}
   2d248:	00000ff5 	.word	0x00000ff5
   2d24c:	0000fff5 	.word	0x0000fff5
   2d250:	000001ff 	.word	0x000001ff
   2d254:	0002ae2d 	.word	0x0002ae2d
   2d258:	0000022f 	.word	0x0000022f
   2d25c:	0000022e 	.word	0x0000022e
   2d260:	ffffaa55 	.word	0xffffaa55
   2d264:	41615252 	.word	0x41615252
   2d268:	00000217 	.word	0x00000217
   2d26c:	00000216 	.word	0x00000216
   2d270:	00000215 	.word	0x00000215
   2d274:	61417272 	.word	0x61417272
   2d278:	0000021f 	.word	0x0000021f
   2d27c:	0000021e 	.word	0x0000021e
   2d280:	0000021d 	.word	0x0000021d
   2d284:	0000021b 	.word	0x0000021b
   2d288:	0000021a 	.word	0x0000021a
   2d28c:	00000219 	.word	0x00000219
   2d290:	20003d34 	.word	0x20003d34

0002d294 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
   2d294:	b580      	push	{r7, lr}
   2d296:	b082      	sub	sp, #8
   2d298:	af00      	add	r7, sp, #0
   2d29a:	6078      	str	r0, [r7, #4]
   2d29c:	000a      	movs	r2, r1
   2d29e:	1cbb      	adds	r3, r7, #2
   2d2a0:	801a      	strh	r2, [r3, #0]
	if (!fs || !fs->fs_type || fs->id != id)
   2d2a2:	687b      	ldr	r3, [r7, #4]
   2d2a4:	2b00      	cmp	r3, #0
   2d2a6:	d009      	beq.n	2d2bc <validate+0x28>
   2d2a8:	687b      	ldr	r3, [r7, #4]
   2d2aa:	781b      	ldrb	r3, [r3, #0]
   2d2ac:	2b00      	cmp	r3, #0
   2d2ae:	d005      	beq.n	2d2bc <validate+0x28>
   2d2b0:	687b      	ldr	r3, [r7, #4]
   2d2b2:	88db      	ldrh	r3, [r3, #6]
   2d2b4:	1cba      	adds	r2, r7, #2
   2d2b6:	8812      	ldrh	r2, [r2, #0]
   2d2b8:	429a      	cmp	r2, r3
   2d2ba:	d001      	beq.n	2d2c0 <validate+0x2c>
		return FR_INVALID_OBJECT;
   2d2bc:	2309      	movs	r3, #9
   2d2be:	e00c      	b.n	2d2da <validate+0x46>

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
   2d2c0:	687b      	ldr	r3, [r7, #4]
   2d2c2:	785b      	ldrb	r3, [r3, #1]
   2d2c4:	0018      	movs	r0, r3
   2d2c6:	4b07      	ldr	r3, [pc, #28]	; (2d2e4 <validate+0x50>)
   2d2c8:	4798      	blx	r3
   2d2ca:	0003      	movs	r3, r0
   2d2cc:	001a      	movs	r2, r3
   2d2ce:	2301      	movs	r3, #1
   2d2d0:	4013      	ands	r3, r2
   2d2d2:	d001      	beq.n	2d2d8 <validate+0x44>
		return FR_NOT_READY;
   2d2d4:	2303      	movs	r3, #3
   2d2d6:	e000      	b.n	2d2da <validate+0x46>

	return FR_OK;
   2d2d8:	2300      	movs	r3, #0
}
   2d2da:	0018      	movs	r0, r3
   2d2dc:	46bd      	mov	sp, r7
   2d2de:	b002      	add	sp, #8
   2d2e0:	bd80      	pop	{r7, pc}
   2d2e2:	46c0      	nop			; (mov r8, r8)
   2d2e4:	0002adf5 	.word	0x0002adf5

0002d2e8 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
   2d2e8:	b590      	push	{r4, r7, lr}
   2d2ea:	4ce5      	ldr	r4, [pc, #916]	; (2d680 <f_open+0x398>)
   2d2ec:	44a5      	add	sp, r4
   2d2ee:	af00      	add	r7, sp, #0
   2d2f0:	60f8      	str	r0, [r7, #12]
   2d2f2:	60b9      	str	r1, [r7, #8]
   2d2f4:	4be3      	ldr	r3, [pc, #908]	; (2d684 <f_open+0x39c>)
   2d2f6:	2194      	movs	r1, #148	; 0x94
   2d2f8:	0089      	lsls	r1, r1, #2
   2d2fa:	468c      	mov	ip, r1
   2d2fc:	44bc      	add	ip, r7
   2d2fe:	4463      	add	r3, ip
   2d300:	701a      	strb	r2, [r3, #0]
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
   2d302:	68fb      	ldr	r3, [r7, #12]
   2d304:	2200      	movs	r2, #0
   2d306:	601a      	str	r2, [r3, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
   2d308:	4bde      	ldr	r3, [pc, #888]	; (2d684 <f_open+0x39c>)
   2d30a:	2294      	movs	r2, #148	; 0x94
   2d30c:	0092      	lsls	r2, r2, #2
   2d30e:	4694      	mov	ip, r2
   2d310:	44bc      	add	ip, r7
   2d312:	4463      	add	r3, ip
   2d314:	4adb      	ldr	r2, [pc, #876]	; (2d684 <f_open+0x39c>)
   2d316:	2194      	movs	r1, #148	; 0x94
   2d318:	0089      	lsls	r1, r1, #2
   2d31a:	468c      	mov	ip, r1
   2d31c:	44bc      	add	ip, r7
   2d31e:	4462      	add	r2, ip
   2d320:	7812      	ldrb	r2, [r2, #0]
   2d322:	211f      	movs	r1, #31
   2d324:	400a      	ands	r2, r1
   2d326:	701a      	strb	r2, [r3, #0]
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
   2d328:	4bd6      	ldr	r3, [pc, #856]	; (2d684 <f_open+0x39c>)
   2d32a:	2294      	movs	r2, #148	; 0x94
   2d32c:	0092      	lsls	r2, r2, #2
   2d32e:	4694      	mov	ip, r2
   2d330:	44bc      	add	ip, r7
   2d332:	4463      	add	r3, ip
   2d334:	781b      	ldrb	r3, [r3, #0]
   2d336:	2201      	movs	r2, #1
   2d338:	4393      	bics	r3, r2
   2d33a:	b2da      	uxtb	r2, r3
   2d33c:	4bd2      	ldr	r3, [pc, #840]	; (2d688 <f_open+0x3a0>)
   2d33e:	18fc      	adds	r4, r7, r3
   2d340:	2387      	movs	r3, #135	; 0x87
   2d342:	009b      	lsls	r3, r3, #2
   2d344:	18f9      	adds	r1, r7, r3
   2d346:	2308      	movs	r3, #8
   2d348:	18fb      	adds	r3, r7, r3
   2d34a:	0018      	movs	r0, r3
   2d34c:	4bcf      	ldr	r3, [pc, #828]	; (2d68c <f_open+0x3a4>)
   2d34e:	4798      	blx	r3
   2d350:	0003      	movs	r3, r0
   2d352:	7023      	strb	r3, [r4, #0]
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
   2d354:	2387      	movs	r3, #135	; 0x87
   2d356:	009b      	lsls	r3, r3, #2
   2d358:	18fb      	adds	r3, r7, r3
   2d35a:	2284      	movs	r2, #132	; 0x84
   2d35c:	0092      	lsls	r2, r2, #2
   2d35e:	18ba      	adds	r2, r7, r2
   2d360:	619a      	str	r2, [r3, #24]
   2d362:	2387      	movs	r3, #135	; 0x87
   2d364:	009b      	lsls	r3, r3, #2
   2d366:	18fb      	adds	r3, r7, r3
   2d368:	2210      	movs	r2, #16
   2d36a:	18ba      	adds	r2, r7, r2
   2d36c:	61da      	str	r2, [r3, #28]
	if (res == FR_OK)
   2d36e:	4bc6      	ldr	r3, [pc, #792]	; (2d688 <f_open+0x3a0>)
   2d370:	18fb      	adds	r3, r7, r3
   2d372:	781b      	ldrb	r3, [r3, #0]
   2d374:	2b00      	cmp	r3, #0
   2d376:	d10b      	bne.n	2d390 <f_open+0xa8>
		res = follow_path(&dj, path);	/* Follow the file path */
   2d378:	68ba      	ldr	r2, [r7, #8]
   2d37a:	4bc3      	ldr	r3, [pc, #780]	; (2d688 <f_open+0x3a0>)
   2d37c:	18fc      	adds	r4, r7, r3
   2d37e:	2387      	movs	r3, #135	; 0x87
   2d380:	009b      	lsls	r3, r3, #2
   2d382:	18fb      	adds	r3, r7, r3
   2d384:	0011      	movs	r1, r2
   2d386:	0018      	movs	r0, r3
   2d388:	4bc1      	ldr	r3, [pc, #772]	; (2d690 <f_open+0x3a8>)
   2d38a:	4798      	blx	r3
   2d38c:	0003      	movs	r3, r0
   2d38e:	7023      	strb	r3, [r4, #0]
	dir = dj.dir;
   2d390:	2387      	movs	r3, #135	; 0x87
   2d392:	009b      	lsls	r3, r3, #2
   2d394:	18fb      	adds	r3, r7, r3
   2d396:	695b      	ldr	r3, [r3, #20]
   2d398:	2292      	movs	r2, #146	; 0x92
   2d39a:	0092      	lsls	r2, r2, #2
   2d39c:	18ba      	adds	r2, r7, r2
   2d39e:	6013      	str	r3, [r2, #0]

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
   2d3a0:	4bb9      	ldr	r3, [pc, #740]	; (2d688 <f_open+0x3a0>)
   2d3a2:	18fb      	adds	r3, r7, r3
   2d3a4:	781b      	ldrb	r3, [r3, #0]
   2d3a6:	2b00      	cmp	r3, #0
   2d3a8:	d109      	bne.n	2d3be <f_open+0xd6>
		if (!dir)	/* Current dir itself */
   2d3aa:	2392      	movs	r3, #146	; 0x92
   2d3ac:	009b      	lsls	r3, r3, #2
   2d3ae:	18fb      	adds	r3, r7, r3
   2d3b0:	681b      	ldr	r3, [r3, #0]
   2d3b2:	2b00      	cmp	r3, #0
   2d3b4:	d103      	bne.n	2d3be <f_open+0xd6>
			res = FR_INVALID_NAME;
   2d3b6:	4bb4      	ldr	r3, [pc, #720]	; (2d688 <f_open+0x3a0>)
   2d3b8:	18fb      	adds	r3, r7, r3
   2d3ba:	2206      	movs	r2, #6
   2d3bc:	701a      	strb	r2, [r3, #0]
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   2d3be:	4bb1      	ldr	r3, [pc, #708]	; (2d684 <f_open+0x39c>)
   2d3c0:	2294      	movs	r2, #148	; 0x94
   2d3c2:	0092      	lsls	r2, r2, #2
   2d3c4:	4694      	mov	ip, r2
   2d3c6:	44bc      	add	ip, r7
   2d3c8:	4463      	add	r3, ip
   2d3ca:	781b      	ldrb	r3, [r3, #0]
   2d3cc:	221c      	movs	r2, #28
   2d3ce:	4013      	ands	r3, r2
   2d3d0:	d100      	bne.n	2d3d4 <f_open+0xec>
   2d3d2:	e141      	b.n	2d658 <f_open+0x370>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
   2d3d4:	4bac      	ldr	r3, [pc, #688]	; (2d688 <f_open+0x3a0>)
   2d3d6:	18fb      	adds	r3, r7, r3
   2d3d8:	781b      	ldrb	r3, [r3, #0]
   2d3da:	2b00      	cmp	r3, #0
   2d3dc:	d027      	beq.n	2d42e <f_open+0x146>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
   2d3de:	4baa      	ldr	r3, [pc, #680]	; (2d688 <f_open+0x3a0>)
   2d3e0:	18fb      	adds	r3, r7, r3
   2d3e2:	781b      	ldrb	r3, [r3, #0]
   2d3e4:	2b04      	cmp	r3, #4
   2d3e6:	d109      	bne.n	2d3fc <f_open+0x114>
#if _FS_SHARE
				res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
   2d3e8:	4ba7      	ldr	r3, [pc, #668]	; (2d688 <f_open+0x3a0>)
   2d3ea:	18fc      	adds	r4, r7, r3
   2d3ec:	2387      	movs	r3, #135	; 0x87
   2d3ee:	009b      	lsls	r3, r3, #2
   2d3f0:	18fb      	adds	r3, r7, r3
   2d3f2:	0018      	movs	r0, r3
   2d3f4:	4ba7      	ldr	r3, [pc, #668]	; (2d694 <f_open+0x3ac>)
   2d3f6:	4798      	blx	r3
   2d3f8:	0003      	movs	r3, r0
   2d3fa:	7023      	strb	r3, [r4, #0]
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
   2d3fc:	4ba1      	ldr	r3, [pc, #644]	; (2d684 <f_open+0x39c>)
   2d3fe:	2294      	movs	r2, #148	; 0x94
   2d400:	0092      	lsls	r2, r2, #2
   2d402:	4694      	mov	ip, r2
   2d404:	44bc      	add	ip, r7
   2d406:	4463      	add	r3, ip
   2d408:	4a9e      	ldr	r2, [pc, #632]	; (2d684 <f_open+0x39c>)
   2d40a:	2194      	movs	r1, #148	; 0x94
   2d40c:	0089      	lsls	r1, r1, #2
   2d40e:	468c      	mov	ip, r1
   2d410:	44bc      	add	ip, r7
   2d412:	4462      	add	r2, ip
   2d414:	7812      	ldrb	r2, [r2, #0]
   2d416:	2108      	movs	r1, #8
   2d418:	430a      	orrs	r2, r1
   2d41a:	701a      	strb	r2, [r3, #0]
			dir = dj.dir;					/* New entry */
   2d41c:	2387      	movs	r3, #135	; 0x87
   2d41e:	009b      	lsls	r3, r3, #2
   2d420:	18fb      	adds	r3, r7, r3
   2d422:	695b      	ldr	r3, [r3, #20]
   2d424:	2292      	movs	r2, #146	; 0x92
   2d426:	0092      	lsls	r2, r2, #2
   2d428:	18ba      	adds	r2, r7, r2
   2d42a:	6013      	str	r3, [r2, #0]
   2d42c:	e01c      	b.n	2d468 <f_open+0x180>
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   2d42e:	2392      	movs	r3, #146	; 0x92
   2d430:	009b      	lsls	r3, r3, #2
   2d432:	18fb      	adds	r3, r7, r3
   2d434:	681b      	ldr	r3, [r3, #0]
   2d436:	330b      	adds	r3, #11
   2d438:	781b      	ldrb	r3, [r3, #0]
   2d43a:	001a      	movs	r2, r3
   2d43c:	2311      	movs	r3, #17
   2d43e:	4013      	ands	r3, r2
   2d440:	d004      	beq.n	2d44c <f_open+0x164>
				res = FR_DENIED;
   2d442:	4b91      	ldr	r3, [pc, #580]	; (2d688 <f_open+0x3a0>)
   2d444:	18fb      	adds	r3, r7, r3
   2d446:	2207      	movs	r2, #7
   2d448:	701a      	strb	r2, [r3, #0]
   2d44a:	e00d      	b.n	2d468 <f_open+0x180>
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
   2d44c:	4b8d      	ldr	r3, [pc, #564]	; (2d684 <f_open+0x39c>)
   2d44e:	2294      	movs	r2, #148	; 0x94
   2d450:	0092      	lsls	r2, r2, #2
   2d452:	4694      	mov	ip, r2
   2d454:	44bc      	add	ip, r7
   2d456:	4463      	add	r3, ip
   2d458:	781b      	ldrb	r3, [r3, #0]
   2d45a:	2204      	movs	r2, #4
   2d45c:	4013      	ands	r3, r2
   2d45e:	d003      	beq.n	2d468 <f_open+0x180>
					res = FR_EXIST;
   2d460:	4b89      	ldr	r3, [pc, #548]	; (2d688 <f_open+0x3a0>)
   2d462:	18fb      	adds	r3, r7, r3
   2d464:	2208      	movs	r2, #8
   2d466:	701a      	strb	r2, [r3, #0]
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
   2d468:	4b87      	ldr	r3, [pc, #540]	; (2d688 <f_open+0x3a0>)
   2d46a:	18fb      	adds	r3, r7, r3
   2d46c:	781b      	ldrb	r3, [r3, #0]
   2d46e:	2b00      	cmp	r3, #0
   2d470:	d000      	beq.n	2d474 <f_open+0x18c>
   2d472:	e12f      	b.n	2d6d4 <f_open+0x3ec>
   2d474:	4b83      	ldr	r3, [pc, #524]	; (2d684 <f_open+0x39c>)
   2d476:	2294      	movs	r2, #148	; 0x94
   2d478:	0092      	lsls	r2, r2, #2
   2d47a:	4694      	mov	ip, r2
   2d47c:	44bc      	add	ip, r7
   2d47e:	4463      	add	r3, ip
   2d480:	781b      	ldrb	r3, [r3, #0]
   2d482:	2208      	movs	r2, #8
   2d484:	4013      	ands	r3, r2
   2d486:	d100      	bne.n	2d48a <f_open+0x1a2>
   2d488:	e124      	b.n	2d6d4 <f_open+0x3ec>
			dw = get_fattime();					/* Created time */
   2d48a:	4b83      	ldr	r3, [pc, #524]	; (2d698 <f_open+0x3b0>)
   2d48c:	4798      	blx	r3
   2d48e:	0003      	movs	r3, r0
   2d490:	2291      	movs	r2, #145	; 0x91
   2d492:	0092      	lsls	r2, r2, #2
   2d494:	18ba      	adds	r2, r7, r2
   2d496:	6013      	str	r3, [r2, #0]
			ST_DWORD(dir+DIR_CrtTime, dw);
   2d498:	2392      	movs	r3, #146	; 0x92
   2d49a:	009b      	lsls	r3, r3, #2
   2d49c:	18fb      	adds	r3, r7, r3
   2d49e:	681b      	ldr	r3, [r3, #0]
   2d4a0:	330e      	adds	r3, #14
   2d4a2:	2291      	movs	r2, #145	; 0x91
   2d4a4:	0092      	lsls	r2, r2, #2
   2d4a6:	18ba      	adds	r2, r7, r2
   2d4a8:	6812      	ldr	r2, [r2, #0]
   2d4aa:	b2d2      	uxtb	r2, r2
   2d4ac:	701a      	strb	r2, [r3, #0]
   2d4ae:	2392      	movs	r3, #146	; 0x92
   2d4b0:	009b      	lsls	r3, r3, #2
   2d4b2:	18fb      	adds	r3, r7, r3
   2d4b4:	681b      	ldr	r3, [r3, #0]
   2d4b6:	330f      	adds	r3, #15
   2d4b8:	2291      	movs	r2, #145	; 0x91
   2d4ba:	0092      	lsls	r2, r2, #2
   2d4bc:	18ba      	adds	r2, r7, r2
   2d4be:	6812      	ldr	r2, [r2, #0]
   2d4c0:	b292      	uxth	r2, r2
   2d4c2:	0a12      	lsrs	r2, r2, #8
   2d4c4:	b292      	uxth	r2, r2
   2d4c6:	b2d2      	uxtb	r2, r2
   2d4c8:	701a      	strb	r2, [r3, #0]
   2d4ca:	2392      	movs	r3, #146	; 0x92
   2d4cc:	009b      	lsls	r3, r3, #2
   2d4ce:	18fb      	adds	r3, r7, r3
   2d4d0:	681b      	ldr	r3, [r3, #0]
   2d4d2:	3310      	adds	r3, #16
   2d4d4:	2291      	movs	r2, #145	; 0x91
   2d4d6:	0092      	lsls	r2, r2, #2
   2d4d8:	18ba      	adds	r2, r7, r2
   2d4da:	6812      	ldr	r2, [r2, #0]
   2d4dc:	0c12      	lsrs	r2, r2, #16
   2d4de:	b2d2      	uxtb	r2, r2
   2d4e0:	701a      	strb	r2, [r3, #0]
   2d4e2:	2392      	movs	r3, #146	; 0x92
   2d4e4:	009b      	lsls	r3, r3, #2
   2d4e6:	18fb      	adds	r3, r7, r3
   2d4e8:	681b      	ldr	r3, [r3, #0]
   2d4ea:	3311      	adds	r3, #17
   2d4ec:	2291      	movs	r2, #145	; 0x91
   2d4ee:	0092      	lsls	r2, r2, #2
   2d4f0:	18ba      	adds	r2, r7, r2
   2d4f2:	6812      	ldr	r2, [r2, #0]
   2d4f4:	0e12      	lsrs	r2, r2, #24
   2d4f6:	b2d2      	uxtb	r2, r2
   2d4f8:	701a      	strb	r2, [r3, #0]
			dir[DIR_Attr] = 0;					/* Reset attribute */
   2d4fa:	2392      	movs	r3, #146	; 0x92
   2d4fc:	009b      	lsls	r3, r3, #2
   2d4fe:	18fb      	adds	r3, r7, r3
   2d500:	681b      	ldr	r3, [r3, #0]
   2d502:	330b      	adds	r3, #11
   2d504:	2200      	movs	r2, #0
   2d506:	701a      	strb	r2, [r3, #0]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
   2d508:	2392      	movs	r3, #146	; 0x92
   2d50a:	009b      	lsls	r3, r3, #2
   2d50c:	18fb      	adds	r3, r7, r3
   2d50e:	681b      	ldr	r3, [r3, #0]
   2d510:	331c      	adds	r3, #28
   2d512:	2200      	movs	r2, #0
   2d514:	701a      	strb	r2, [r3, #0]
   2d516:	2392      	movs	r3, #146	; 0x92
   2d518:	009b      	lsls	r3, r3, #2
   2d51a:	18fb      	adds	r3, r7, r3
   2d51c:	681b      	ldr	r3, [r3, #0]
   2d51e:	331d      	adds	r3, #29
   2d520:	2200      	movs	r2, #0
   2d522:	701a      	strb	r2, [r3, #0]
   2d524:	2392      	movs	r3, #146	; 0x92
   2d526:	009b      	lsls	r3, r3, #2
   2d528:	18fb      	adds	r3, r7, r3
   2d52a:	681b      	ldr	r3, [r3, #0]
   2d52c:	331e      	adds	r3, #30
   2d52e:	2200      	movs	r2, #0
   2d530:	701a      	strb	r2, [r3, #0]
   2d532:	2392      	movs	r3, #146	; 0x92
   2d534:	009b      	lsls	r3, r3, #2
   2d536:	18fb      	adds	r3, r7, r3
   2d538:	681b      	ldr	r3, [r3, #0]
   2d53a:	331f      	adds	r3, #31
   2d53c:	2200      	movs	r2, #0
   2d53e:	701a      	strb	r2, [r3, #0]
			cl = LD_CLUST(dir);					/* Get start cluster */
   2d540:	2392      	movs	r3, #146	; 0x92
   2d542:	009b      	lsls	r3, r3, #2
   2d544:	18fb      	adds	r3, r7, r3
   2d546:	681b      	ldr	r3, [r3, #0]
   2d548:	3315      	adds	r3, #21
   2d54a:	781b      	ldrb	r3, [r3, #0]
   2d54c:	021b      	lsls	r3, r3, #8
   2d54e:	b21a      	sxth	r2, r3
   2d550:	2392      	movs	r3, #146	; 0x92
   2d552:	009b      	lsls	r3, r3, #2
   2d554:	18fb      	adds	r3, r7, r3
   2d556:	681b      	ldr	r3, [r3, #0]
   2d558:	3314      	adds	r3, #20
   2d55a:	781b      	ldrb	r3, [r3, #0]
   2d55c:	b21b      	sxth	r3, r3
   2d55e:	4313      	orrs	r3, r2
   2d560:	b21b      	sxth	r3, r3
   2d562:	b29b      	uxth	r3, r3
   2d564:	041b      	lsls	r3, r3, #16
   2d566:	2292      	movs	r2, #146	; 0x92
   2d568:	0092      	lsls	r2, r2, #2
   2d56a:	18ba      	adds	r2, r7, r2
   2d56c:	6812      	ldr	r2, [r2, #0]
   2d56e:	321b      	adds	r2, #27
   2d570:	7812      	ldrb	r2, [r2, #0]
   2d572:	0212      	lsls	r2, r2, #8
   2d574:	b211      	sxth	r1, r2
   2d576:	2292      	movs	r2, #146	; 0x92
   2d578:	0092      	lsls	r2, r2, #2
   2d57a:	18ba      	adds	r2, r7, r2
   2d57c:	6812      	ldr	r2, [r2, #0]
   2d57e:	321a      	adds	r2, #26
   2d580:	7812      	ldrb	r2, [r2, #0]
   2d582:	b212      	sxth	r2, r2
   2d584:	430a      	orrs	r2, r1
   2d586:	b212      	sxth	r2, r2
   2d588:	b292      	uxth	r2, r2
   2d58a:	4313      	orrs	r3, r2
   2d58c:	2290      	movs	r2, #144	; 0x90
   2d58e:	0092      	lsls	r2, r2, #2
   2d590:	18ba      	adds	r2, r7, r2
   2d592:	6013      	str	r3, [r2, #0]
			ST_CLUST(dir, 0);					/* cluster = 0 */
   2d594:	2392      	movs	r3, #146	; 0x92
   2d596:	009b      	lsls	r3, r3, #2
   2d598:	18fb      	adds	r3, r7, r3
   2d59a:	681b      	ldr	r3, [r3, #0]
   2d59c:	331a      	adds	r3, #26
   2d59e:	2200      	movs	r2, #0
   2d5a0:	701a      	strb	r2, [r3, #0]
   2d5a2:	2392      	movs	r3, #146	; 0x92
   2d5a4:	009b      	lsls	r3, r3, #2
   2d5a6:	18fb      	adds	r3, r7, r3
   2d5a8:	681b      	ldr	r3, [r3, #0]
   2d5aa:	331b      	adds	r3, #27
   2d5ac:	2200      	movs	r2, #0
   2d5ae:	701a      	strb	r2, [r3, #0]
   2d5b0:	2392      	movs	r3, #146	; 0x92
   2d5b2:	009b      	lsls	r3, r3, #2
   2d5b4:	18fb      	adds	r3, r7, r3
   2d5b6:	681b      	ldr	r3, [r3, #0]
   2d5b8:	3314      	adds	r3, #20
   2d5ba:	2200      	movs	r2, #0
   2d5bc:	701a      	strb	r2, [r3, #0]
   2d5be:	2392      	movs	r3, #146	; 0x92
   2d5c0:	009b      	lsls	r3, r3, #2
   2d5c2:	18fb      	adds	r3, r7, r3
   2d5c4:	681b      	ldr	r3, [r3, #0]
   2d5c6:	3315      	adds	r3, #21
   2d5c8:	2200      	movs	r2, #0
   2d5ca:	701a      	strb	r2, [r3, #0]
			dj.fs->wflag = 1;
   2d5cc:	2387      	movs	r3, #135	; 0x87
   2d5ce:	009b      	lsls	r3, r3, #2
   2d5d0:	18fb      	adds	r3, r7, r3
   2d5d2:	681b      	ldr	r3, [r3, #0]
   2d5d4:	2201      	movs	r2, #1
   2d5d6:	711a      	strb	r2, [r3, #4]
			if (cl) {							/* Remove the cluster chain if exist */
   2d5d8:	2390      	movs	r3, #144	; 0x90
   2d5da:	009b      	lsls	r3, r3, #2
   2d5dc:	18fb      	adds	r3, r7, r3
   2d5de:	681b      	ldr	r3, [r3, #0]
   2d5e0:	2b00      	cmp	r3, #0
   2d5e2:	d100      	bne.n	2d5e6 <f_open+0x2fe>
   2d5e4:	e076      	b.n	2d6d4 <f_open+0x3ec>
				dw = dj.fs->winsect;
   2d5e6:	2387      	movs	r3, #135	; 0x87
   2d5e8:	009b      	lsls	r3, r3, #2
   2d5ea:	18fb      	adds	r3, r7, r3
   2d5ec:	681b      	ldr	r3, [r3, #0]
   2d5ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2d5f0:	2291      	movs	r2, #145	; 0x91
   2d5f2:	0092      	lsls	r2, r2, #2
   2d5f4:	18ba      	adds	r2, r7, r2
   2d5f6:	6013      	str	r3, [r2, #0]
				res = remove_chain(dj.fs, cl);
   2d5f8:	2387      	movs	r3, #135	; 0x87
   2d5fa:	009b      	lsls	r3, r3, #2
   2d5fc:	18fb      	adds	r3, r7, r3
   2d5fe:	681b      	ldr	r3, [r3, #0]
   2d600:	4a21      	ldr	r2, [pc, #132]	; (2d688 <f_open+0x3a0>)
   2d602:	18bc      	adds	r4, r7, r2
   2d604:	2290      	movs	r2, #144	; 0x90
   2d606:	0092      	lsls	r2, r2, #2
   2d608:	18ba      	adds	r2, r7, r2
   2d60a:	6812      	ldr	r2, [r2, #0]
   2d60c:	0011      	movs	r1, r2
   2d60e:	0018      	movs	r0, r3
   2d610:	4b22      	ldr	r3, [pc, #136]	; (2d69c <f_open+0x3b4>)
   2d612:	4798      	blx	r3
   2d614:	0003      	movs	r3, r0
   2d616:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
   2d618:	4b1b      	ldr	r3, [pc, #108]	; (2d688 <f_open+0x3a0>)
   2d61a:	18fb      	adds	r3, r7, r3
   2d61c:	781b      	ldrb	r3, [r3, #0]
   2d61e:	2b00      	cmp	r3, #0
   2d620:	d158      	bne.n	2d6d4 <f_open+0x3ec>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
   2d622:	2387      	movs	r3, #135	; 0x87
   2d624:	009b      	lsls	r3, r3, #2
   2d626:	18fb      	adds	r3, r7, r3
   2d628:	681b      	ldr	r3, [r3, #0]
   2d62a:	2290      	movs	r2, #144	; 0x90
   2d62c:	0092      	lsls	r2, r2, #2
   2d62e:	18ba      	adds	r2, r7, r2
   2d630:	6812      	ldr	r2, [r2, #0]
   2d632:	3a01      	subs	r2, #1
   2d634:	60da      	str	r2, [r3, #12]
					res = move_window(dj.fs, dw);
   2d636:	2387      	movs	r3, #135	; 0x87
   2d638:	009b      	lsls	r3, r3, #2
   2d63a:	18fb      	adds	r3, r7, r3
   2d63c:	681b      	ldr	r3, [r3, #0]
   2d63e:	4a12      	ldr	r2, [pc, #72]	; (2d688 <f_open+0x3a0>)
   2d640:	18bc      	adds	r4, r7, r2
   2d642:	2291      	movs	r2, #145	; 0x91
   2d644:	0092      	lsls	r2, r2, #2
   2d646:	18ba      	adds	r2, r7, r2
   2d648:	6812      	ldr	r2, [r2, #0]
   2d64a:	0011      	movs	r1, r2
   2d64c:	0018      	movs	r0, r3
   2d64e:	4b14      	ldr	r3, [pc, #80]	; (2d6a0 <f_open+0x3b8>)
   2d650:	4798      	blx	r3
   2d652:	0003      	movs	r3, r0
   2d654:	7023      	strb	r3, [r4, #0]
   2d656:	e03d      	b.n	2d6d4 <f_open+0x3ec>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
   2d658:	4b0b      	ldr	r3, [pc, #44]	; (2d688 <f_open+0x3a0>)
   2d65a:	18fb      	adds	r3, r7, r3
   2d65c:	781b      	ldrb	r3, [r3, #0]
   2d65e:	2b00      	cmp	r3, #0
   2d660:	d138      	bne.n	2d6d4 <f_open+0x3ec>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
   2d662:	2392      	movs	r3, #146	; 0x92
   2d664:	009b      	lsls	r3, r3, #2
   2d666:	18fb      	adds	r3, r7, r3
   2d668:	681b      	ldr	r3, [r3, #0]
   2d66a:	330b      	adds	r3, #11
   2d66c:	781b      	ldrb	r3, [r3, #0]
   2d66e:	001a      	movs	r2, r3
   2d670:	2310      	movs	r3, #16
   2d672:	4013      	ands	r3, r2
   2d674:	d016      	beq.n	2d6a4 <f_open+0x3bc>
				res = FR_NO_FILE;
   2d676:	4b04      	ldr	r3, [pc, #16]	; (2d688 <f_open+0x3a0>)
   2d678:	18fb      	adds	r3, r7, r3
   2d67a:	2204      	movs	r2, #4
   2d67c:	701a      	strb	r2, [r3, #0]
   2d67e:	e029      	b.n	2d6d4 <f_open+0x3ec>
   2d680:	fffffdac 	.word	0xfffffdac
   2d684:	fffffdb7 	.word	0xfffffdb7
   2d688:	0000024f 	.word	0x0000024f
   2d68c:	0002cc99 	.word	0x0002cc99
   2d690:	0002ca8d 	.word	0x0002ca8d
   2d694:	0002c2dd 	.word	0x0002c2dd
   2d698:	0002b0d5 	.word	0x0002b0d5
   2d69c:	0002b859 	.word	0x0002b859
   2d6a0:	0002b219 	.word	0x0002b219
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
   2d6a4:	4b5a      	ldr	r3, [pc, #360]	; (2d810 <f_open+0x528>)
   2d6a6:	2294      	movs	r2, #148	; 0x94
   2d6a8:	0092      	lsls	r2, r2, #2
   2d6aa:	4694      	mov	ip, r2
   2d6ac:	44bc      	add	ip, r7
   2d6ae:	4463      	add	r3, ip
   2d6b0:	781b      	ldrb	r3, [r3, #0]
   2d6b2:	2202      	movs	r2, #2
   2d6b4:	4013      	ands	r3, r2
   2d6b6:	d00d      	beq.n	2d6d4 <f_open+0x3ec>
   2d6b8:	2392      	movs	r3, #146	; 0x92
   2d6ba:	009b      	lsls	r3, r3, #2
   2d6bc:	18fb      	adds	r3, r7, r3
   2d6be:	681b      	ldr	r3, [r3, #0]
   2d6c0:	330b      	adds	r3, #11
   2d6c2:	781b      	ldrb	r3, [r3, #0]
   2d6c4:	001a      	movs	r2, r3
   2d6c6:	2301      	movs	r3, #1
   2d6c8:	4013      	ands	r3, r2
   2d6ca:	d003      	beq.n	2d6d4 <f_open+0x3ec>
					res = FR_DENIED;
   2d6cc:	4b51      	ldr	r3, [pc, #324]	; (2d814 <f_open+0x52c>)
   2d6ce:	18fb      	adds	r3, r7, r3
   2d6d0:	2207      	movs	r2, #7
   2d6d2:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	if (res == FR_OK) {
   2d6d4:	4b4f      	ldr	r3, [pc, #316]	; (2d814 <f_open+0x52c>)
   2d6d6:	18fb      	adds	r3, r7, r3
   2d6d8:	781b      	ldrb	r3, [r3, #0]
   2d6da:	2b00      	cmp	r3, #0
   2d6dc:	d126      	bne.n	2d72c <f_open+0x444>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
   2d6de:	4b4c      	ldr	r3, [pc, #304]	; (2d810 <f_open+0x528>)
   2d6e0:	2294      	movs	r2, #148	; 0x94
   2d6e2:	0092      	lsls	r2, r2, #2
   2d6e4:	4694      	mov	ip, r2
   2d6e6:	44bc      	add	ip, r7
   2d6e8:	4463      	add	r3, ip
   2d6ea:	781b      	ldrb	r3, [r3, #0]
   2d6ec:	2208      	movs	r2, #8
   2d6ee:	4013      	ands	r3, r2
   2d6f0:	d00f      	beq.n	2d712 <f_open+0x42a>
			mode |= FA__WRITTEN;
   2d6f2:	4b47      	ldr	r3, [pc, #284]	; (2d810 <f_open+0x528>)
   2d6f4:	2294      	movs	r2, #148	; 0x94
   2d6f6:	0092      	lsls	r2, r2, #2
   2d6f8:	4694      	mov	ip, r2
   2d6fa:	44bc      	add	ip, r7
   2d6fc:	4463      	add	r3, ip
   2d6fe:	4a44      	ldr	r2, [pc, #272]	; (2d810 <f_open+0x528>)
   2d700:	2194      	movs	r1, #148	; 0x94
   2d702:	0089      	lsls	r1, r1, #2
   2d704:	468c      	mov	ip, r1
   2d706:	44bc      	add	ip, r7
   2d708:	4462      	add	r2, ip
   2d70a:	7812      	ldrb	r2, [r2, #0]
   2d70c:	2120      	movs	r1, #32
   2d70e:	430a      	orrs	r2, r1
   2d710:	701a      	strb	r2, [r3, #0]
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
   2d712:	2387      	movs	r3, #135	; 0x87
   2d714:	009b      	lsls	r3, r3, #2
   2d716:	18fb      	adds	r3, r7, r3
   2d718:	681b      	ldr	r3, [r3, #0]
   2d71a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2d71c:	68fb      	ldr	r3, [r7, #12]
   2d71e:	61da      	str	r2, [r3, #28]
		fp->dir_ptr = dir;
   2d720:	68fb      	ldr	r3, [r7, #12]
   2d722:	2292      	movs	r2, #146	; 0x92
   2d724:	0092      	lsls	r2, r2, #2
   2d726:	18ba      	adds	r2, r7, r2
   2d728:	6812      	ldr	r2, [r2, #0]
   2d72a:	621a      	str	r2, [r3, #32]
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
   2d72c:	4b39      	ldr	r3, [pc, #228]	; (2d814 <f_open+0x52c>)
   2d72e:	18fb      	adds	r3, r7, r3
   2d730:	781b      	ldrb	r3, [r3, #0]
   2d732:	2b00      	cmp	r3, #0
   2d734:	d163      	bne.n	2d7fe <f_open+0x516>
		fp->flag = mode;					/* File access mode */
   2d736:	68fb      	ldr	r3, [r7, #12]
   2d738:	4a35      	ldr	r2, [pc, #212]	; (2d810 <f_open+0x528>)
   2d73a:	2194      	movs	r1, #148	; 0x94
   2d73c:	0089      	lsls	r1, r1, #2
   2d73e:	468c      	mov	ip, r1
   2d740:	44bc      	add	ip, r7
   2d742:	4462      	add	r2, ip
   2d744:	7812      	ldrb	r2, [r2, #0]
   2d746:	719a      	strb	r2, [r3, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
   2d748:	2392      	movs	r3, #146	; 0x92
   2d74a:	009b      	lsls	r3, r3, #2
   2d74c:	18fb      	adds	r3, r7, r3
   2d74e:	681b      	ldr	r3, [r3, #0]
   2d750:	3315      	adds	r3, #21
   2d752:	781b      	ldrb	r3, [r3, #0]
   2d754:	021b      	lsls	r3, r3, #8
   2d756:	b21a      	sxth	r2, r3
   2d758:	2392      	movs	r3, #146	; 0x92
   2d75a:	009b      	lsls	r3, r3, #2
   2d75c:	18fb      	adds	r3, r7, r3
   2d75e:	681b      	ldr	r3, [r3, #0]
   2d760:	3314      	adds	r3, #20
   2d762:	781b      	ldrb	r3, [r3, #0]
   2d764:	b21b      	sxth	r3, r3
   2d766:	4313      	orrs	r3, r2
   2d768:	b21b      	sxth	r3, r3
   2d76a:	b29b      	uxth	r3, r3
   2d76c:	041b      	lsls	r3, r3, #16
   2d76e:	2292      	movs	r2, #146	; 0x92
   2d770:	0092      	lsls	r2, r2, #2
   2d772:	18ba      	adds	r2, r7, r2
   2d774:	6812      	ldr	r2, [r2, #0]
   2d776:	321b      	adds	r2, #27
   2d778:	7812      	ldrb	r2, [r2, #0]
   2d77a:	0212      	lsls	r2, r2, #8
   2d77c:	b211      	sxth	r1, r2
   2d77e:	2292      	movs	r2, #146	; 0x92
   2d780:	0092      	lsls	r2, r2, #2
   2d782:	18ba      	adds	r2, r7, r2
   2d784:	6812      	ldr	r2, [r2, #0]
   2d786:	321a      	adds	r2, #26
   2d788:	7812      	ldrb	r2, [r2, #0]
   2d78a:	b212      	sxth	r2, r2
   2d78c:	430a      	orrs	r2, r1
   2d78e:	b212      	sxth	r2, r2
   2d790:	b292      	uxth	r2, r2
   2d792:	431a      	orrs	r2, r3
   2d794:	68fb      	ldr	r3, [r7, #12]
   2d796:	611a      	str	r2, [r3, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
   2d798:	2392      	movs	r3, #146	; 0x92
   2d79a:	009b      	lsls	r3, r3, #2
   2d79c:	18fb      	adds	r3, r7, r3
   2d79e:	681b      	ldr	r3, [r3, #0]
   2d7a0:	331f      	adds	r3, #31
   2d7a2:	781b      	ldrb	r3, [r3, #0]
   2d7a4:	061a      	lsls	r2, r3, #24
   2d7a6:	2392      	movs	r3, #146	; 0x92
   2d7a8:	009b      	lsls	r3, r3, #2
   2d7aa:	18fb      	adds	r3, r7, r3
   2d7ac:	681b      	ldr	r3, [r3, #0]
   2d7ae:	331e      	adds	r3, #30
   2d7b0:	781b      	ldrb	r3, [r3, #0]
   2d7b2:	041b      	lsls	r3, r3, #16
   2d7b4:	4313      	orrs	r3, r2
   2d7b6:	2292      	movs	r2, #146	; 0x92
   2d7b8:	0092      	lsls	r2, r2, #2
   2d7ba:	18ba      	adds	r2, r7, r2
   2d7bc:	6812      	ldr	r2, [r2, #0]
   2d7be:	321d      	adds	r2, #29
   2d7c0:	7812      	ldrb	r2, [r2, #0]
   2d7c2:	0212      	lsls	r2, r2, #8
   2d7c4:	4313      	orrs	r3, r2
   2d7c6:	2292      	movs	r2, #146	; 0x92
   2d7c8:	0092      	lsls	r2, r2, #2
   2d7ca:	18ba      	adds	r2, r7, r2
   2d7cc:	6812      	ldr	r2, [r2, #0]
   2d7ce:	321c      	adds	r2, #28
   2d7d0:	7812      	ldrb	r2, [r2, #0]
   2d7d2:	431a      	orrs	r2, r3
   2d7d4:	68fb      	ldr	r3, [r7, #12]
   2d7d6:	60da      	str	r2, [r3, #12]
		fp->fptr = 0;						/* File pointer */
   2d7d8:	68fb      	ldr	r3, [r7, #12]
   2d7da:	2200      	movs	r2, #0
   2d7dc:	609a      	str	r2, [r3, #8]
		fp->dsect = 0;
   2d7de:	68fb      	ldr	r3, [r7, #12]
   2d7e0:	2200      	movs	r2, #0
   2d7e2:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
   2d7e4:	2387      	movs	r3, #135	; 0x87
   2d7e6:	009b      	lsls	r3, r3, #2
   2d7e8:	18fb      	adds	r3, r7, r3
   2d7ea:	681a      	ldr	r2, [r3, #0]
   2d7ec:	68fb      	ldr	r3, [r7, #12]
   2d7ee:	601a      	str	r2, [r3, #0]
   2d7f0:	2387      	movs	r3, #135	; 0x87
   2d7f2:	009b      	lsls	r3, r3, #2
   2d7f4:	18fb      	adds	r3, r7, r3
   2d7f6:	681b      	ldr	r3, [r3, #0]
   2d7f8:	88da      	ldrh	r2, [r3, #6]
   2d7fa:	68fb      	ldr	r3, [r7, #12]
   2d7fc:	809a      	strh	r2, [r3, #4]
	}

	LEAVE_FF(dj.fs, res);
   2d7fe:	4b05      	ldr	r3, [pc, #20]	; (2d814 <f_open+0x52c>)
   2d800:	18fb      	adds	r3, r7, r3
   2d802:	781b      	ldrb	r3, [r3, #0]
}
   2d804:	0018      	movs	r0, r3
   2d806:	46bd      	mov	sp, r7
   2d808:	2395      	movs	r3, #149	; 0x95
   2d80a:	009b      	lsls	r3, r3, #2
   2d80c:	449d      	add	sp, r3
   2d80e:	bd90      	pop	{r4, r7, pc}
   2d810:	fffffdb7 	.word	0xfffffdb7
   2d814:	0000024f 	.word	0x0000024f

0002d818 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
   2d818:	b590      	push	{r4, r7, lr}
   2d81a:	b08b      	sub	sp, #44	; 0x2c
   2d81c:	af00      	add	r7, sp, #0
   2d81e:	60f8      	str	r0, [r7, #12]
   2d820:	60b9      	str	r1, [r7, #8]
   2d822:	607a      	str	r2, [r7, #4]
   2d824:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
   2d826:	68bb      	ldr	r3, [r7, #8]
   2d828:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
   2d82a:	683b      	ldr	r3, [r7, #0]
   2d82c:	2200      	movs	r2, #0
   2d82e:	601a      	str	r2, [r3, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
   2d830:	68fb      	ldr	r3, [r7, #12]
   2d832:	681a      	ldr	r2, [r3, #0]
   2d834:	68fb      	ldr	r3, [r7, #12]
   2d836:	889b      	ldrh	r3, [r3, #4]
   2d838:	2117      	movs	r1, #23
   2d83a:	187c      	adds	r4, r7, r1
   2d83c:	0019      	movs	r1, r3
   2d83e:	0010      	movs	r0, r2
   2d840:	4bc3      	ldr	r3, [pc, #780]	; (2db50 <f_write+0x338>)
   2d842:	4798      	blx	r3
   2d844:	0003      	movs	r3, r0
   2d846:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   2d848:	2317      	movs	r3, #23
   2d84a:	18fb      	adds	r3, r7, r3
   2d84c:	781b      	ldrb	r3, [r3, #0]
   2d84e:	2b00      	cmp	r3, #0
   2d850:	d003      	beq.n	2d85a <f_write+0x42>
   2d852:	2317      	movs	r3, #23
   2d854:	18fb      	adds	r3, r7, r3
   2d856:	781b      	ldrb	r3, [r3, #0]
   2d858:	e176      	b.n	2db48 <f_write+0x330>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
   2d85a:	68fb      	ldr	r3, [r7, #12]
   2d85c:	799b      	ldrb	r3, [r3, #6]
   2d85e:	b25b      	sxtb	r3, r3
   2d860:	2b00      	cmp	r3, #0
   2d862:	da01      	bge.n	2d868 <f_write+0x50>
		LEAVE_FF(fp->fs, FR_INT_ERR);
   2d864:	2302      	movs	r3, #2
   2d866:	e16f      	b.n	2db48 <f_write+0x330>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
   2d868:	68fb      	ldr	r3, [r7, #12]
   2d86a:	799b      	ldrb	r3, [r3, #6]
   2d86c:	001a      	movs	r2, r3
   2d86e:	2302      	movs	r3, #2
   2d870:	4013      	ands	r3, r2
   2d872:	d101      	bne.n	2d878 <f_write+0x60>
		LEAVE_FF(fp->fs, FR_DENIED);
   2d874:	2307      	movs	r3, #7
   2d876:	e167      	b.n	2db48 <f_write+0x330>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
   2d878:	68fb      	ldr	r3, [r7, #12]
   2d87a:	68da      	ldr	r2, [r3, #12]
   2d87c:	687b      	ldr	r3, [r7, #4]
   2d87e:	18d2      	adds	r2, r2, r3
   2d880:	68fb      	ldr	r3, [r7, #12]
   2d882:	68db      	ldr	r3, [r3, #12]
   2d884:	429a      	cmp	r2, r3
   2d886:	d300      	bcc.n	2d88a <f_write+0x72>
   2d888:	e146      	b.n	2db18 <f_write+0x300>
   2d88a:	2300      	movs	r3, #0
   2d88c:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
   2d88e:	e143      	b.n	2db18 <f_write+0x300>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
   2d890:	68fb      	ldr	r3, [r7, #12]
   2d892:	689b      	ldr	r3, [r3, #8]
   2d894:	05db      	lsls	r3, r3, #23
   2d896:	0ddb      	lsrs	r3, r3, #23
   2d898:	d000      	beq.n	2d89c <f_write+0x84>
   2d89a:	e0f6      	b.n	2da8a <f_write+0x272>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
   2d89c:	68fb      	ldr	r3, [r7, #12]
   2d89e:	689b      	ldr	r3, [r3, #8]
   2d8a0:	0a5b      	lsrs	r3, r3, #9
   2d8a2:	b2da      	uxtb	r2, r3
   2d8a4:	68fb      	ldr	r3, [r7, #12]
   2d8a6:	681b      	ldr	r3, [r3, #0]
   2d8a8:	789b      	ldrb	r3, [r3, #2]
   2d8aa:	3b01      	subs	r3, #1
   2d8ac:	b2d9      	uxtb	r1, r3
   2d8ae:	2316      	movs	r3, #22
   2d8b0:	18fb      	adds	r3, r7, r3
   2d8b2:	400a      	ands	r2, r1
   2d8b4:	701a      	strb	r2, [r3, #0]
			if (!csect) {					/* On the cluster boundary? */
   2d8b6:	2316      	movs	r3, #22
   2d8b8:	18fb      	adds	r3, r7, r3
   2d8ba:	781b      	ldrb	r3, [r3, #0]
   2d8bc:	2b00      	cmp	r3, #0
   2d8be:	d140      	bne.n	2d942 <f_write+0x12a>
				if (fp->fptr == 0) {		/* On the top of the file? */
   2d8c0:	68fb      	ldr	r3, [r7, #12]
   2d8c2:	689b      	ldr	r3, [r3, #8]
   2d8c4:	2b00      	cmp	r3, #0
   2d8c6:	d111      	bne.n	2d8ec <f_write+0xd4>
					clst = fp->sclust;		/* Follow from the origin */
   2d8c8:	68fb      	ldr	r3, [r7, #12]
   2d8ca:	691b      	ldr	r3, [r3, #16]
   2d8cc:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
   2d8ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2d8d0:	2b00      	cmp	r3, #0
   2d8d2:	d115      	bne.n	2d900 <f_write+0xe8>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
   2d8d4:	68fb      	ldr	r3, [r7, #12]
   2d8d6:	681b      	ldr	r3, [r3, #0]
   2d8d8:	2100      	movs	r1, #0
   2d8da:	0018      	movs	r0, r3
   2d8dc:	4b9d      	ldr	r3, [pc, #628]	; (2db54 <f_write+0x33c>)
   2d8de:	4798      	blx	r3
   2d8e0:	0003      	movs	r3, r0
   2d8e2:	627b      	str	r3, [r7, #36]	; 0x24
   2d8e4:	68fb      	ldr	r3, [r7, #12]
   2d8e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2d8e8:	611a      	str	r2, [r3, #16]
   2d8ea:	e009      	b.n	2d900 <f_write+0xe8>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
   2d8ec:	68fb      	ldr	r3, [r7, #12]
   2d8ee:	681a      	ldr	r2, [r3, #0]
   2d8f0:	68fb      	ldr	r3, [r7, #12]
   2d8f2:	695b      	ldr	r3, [r3, #20]
   2d8f4:	0019      	movs	r1, r3
   2d8f6:	0010      	movs	r0, r2
   2d8f8:	4b96      	ldr	r3, [pc, #600]	; (2db54 <f_write+0x33c>)
   2d8fa:	4798      	blx	r3
   2d8fc:	0003      	movs	r3, r0
   2d8fe:	627b      	str	r3, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   2d900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2d902:	2b00      	cmp	r3, #0
   2d904:	d100      	bne.n	2d908 <f_write+0xf0>
   2d906:	e10c      	b.n	2db22 <f_write+0x30a>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   2d908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2d90a:	2b01      	cmp	r3, #1
   2d90c:	d109      	bne.n	2d922 <f_write+0x10a>
   2d90e:	68fb      	ldr	r3, [r7, #12]
   2d910:	799b      	ldrb	r3, [r3, #6]
   2d912:	2280      	movs	r2, #128	; 0x80
   2d914:	4252      	negs	r2, r2
   2d916:	4313      	orrs	r3, r2
   2d918:	b2da      	uxtb	r2, r3
   2d91a:	68fb      	ldr	r3, [r7, #12]
   2d91c:	719a      	strb	r2, [r3, #6]
   2d91e:	2302      	movs	r3, #2
   2d920:	e112      	b.n	2db48 <f_write+0x330>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   2d922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2d924:	3301      	adds	r3, #1
   2d926:	d109      	bne.n	2d93c <f_write+0x124>
   2d928:	68fb      	ldr	r3, [r7, #12]
   2d92a:	799b      	ldrb	r3, [r3, #6]
   2d92c:	2280      	movs	r2, #128	; 0x80
   2d92e:	4252      	negs	r2, r2
   2d930:	4313      	orrs	r3, r2
   2d932:	b2da      	uxtb	r2, r3
   2d934:	68fb      	ldr	r3, [r7, #12]
   2d936:	719a      	strb	r2, [r3, #6]
   2d938:	2301      	movs	r3, #1
   2d93a:	e105      	b.n	2db48 <f_write+0x330>
				fp->clust = clst;			/* Update current cluster */
   2d93c:	68fb      	ldr	r3, [r7, #12]
   2d93e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2d940:	615a      	str	r2, [r3, #20]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
   2d942:	68fb      	ldr	r3, [r7, #12]
   2d944:	681b      	ldr	r3, [r3, #0]
   2d946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2d948:	68fb      	ldr	r3, [r7, #12]
   2d94a:	699b      	ldr	r3, [r3, #24]
   2d94c:	429a      	cmp	r2, r3
   2d94e:	d111      	bne.n	2d974 <f_write+0x15c>
   2d950:	68fb      	ldr	r3, [r7, #12]
   2d952:	681b      	ldr	r3, [r3, #0]
   2d954:	2100      	movs	r1, #0
   2d956:	0018      	movs	r0, r3
   2d958:	4b7f      	ldr	r3, [pc, #508]	; (2db58 <f_write+0x340>)
   2d95a:	4798      	blx	r3
   2d95c:	1e03      	subs	r3, r0, #0
   2d95e:	d009      	beq.n	2d974 <f_write+0x15c>
				ABORT(fp->fs, FR_DISK_ERR);
   2d960:	68fb      	ldr	r3, [r7, #12]
   2d962:	799b      	ldrb	r3, [r3, #6]
   2d964:	2280      	movs	r2, #128	; 0x80
   2d966:	4252      	negs	r2, r2
   2d968:	4313      	orrs	r3, r2
   2d96a:	b2da      	uxtb	r2, r3
   2d96c:	68fb      	ldr	r3, [r7, #12]
   2d96e:	719a      	strb	r2, [r3, #6]
   2d970:	2301      	movs	r3, #1
   2d972:	e0e9      	b.n	2db48 <f_write+0x330>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
   2d974:	68fb      	ldr	r3, [r7, #12]
   2d976:	681a      	ldr	r2, [r3, #0]
   2d978:	68fb      	ldr	r3, [r7, #12]
   2d97a:	695b      	ldr	r3, [r3, #20]
   2d97c:	0019      	movs	r1, r3
   2d97e:	0010      	movs	r0, r2
   2d980:	4b76      	ldr	r3, [pc, #472]	; (2db5c <f_write+0x344>)
   2d982:	4798      	blx	r3
   2d984:	0003      	movs	r3, r0
   2d986:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   2d988:	693b      	ldr	r3, [r7, #16]
   2d98a:	2b00      	cmp	r3, #0
   2d98c:	d109      	bne.n	2d9a2 <f_write+0x18a>
   2d98e:	68fb      	ldr	r3, [r7, #12]
   2d990:	799b      	ldrb	r3, [r3, #6]
   2d992:	2280      	movs	r2, #128	; 0x80
   2d994:	4252      	negs	r2, r2
   2d996:	4313      	orrs	r3, r2
   2d998:	b2da      	uxtb	r2, r3
   2d99a:	68fb      	ldr	r3, [r7, #12]
   2d99c:	719a      	strb	r2, [r3, #6]
   2d99e:	2302      	movs	r3, #2
   2d9a0:	e0d2      	b.n	2db48 <f_write+0x330>
			sect += csect;
   2d9a2:	2316      	movs	r3, #22
   2d9a4:	18fb      	adds	r3, r7, r3
   2d9a6:	781b      	ldrb	r3, [r3, #0]
   2d9a8:	693a      	ldr	r2, [r7, #16]
   2d9aa:	18d3      	adds	r3, r2, r3
   2d9ac:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
   2d9ae:	687b      	ldr	r3, [r7, #4]
   2d9b0:	0a5b      	lsrs	r3, r3, #9
   2d9b2:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
   2d9b4:	69fb      	ldr	r3, [r7, #28]
   2d9b6:	2b00      	cmp	r3, #0
   2d9b8:	d048      	beq.n	2da4c <f_write+0x234>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
   2d9ba:	2316      	movs	r3, #22
   2d9bc:	18fb      	adds	r3, r7, r3
   2d9be:	781a      	ldrb	r2, [r3, #0]
   2d9c0:	69fb      	ldr	r3, [r7, #28]
   2d9c2:	18d2      	adds	r2, r2, r3
   2d9c4:	68fb      	ldr	r3, [r7, #12]
   2d9c6:	681b      	ldr	r3, [r3, #0]
   2d9c8:	789b      	ldrb	r3, [r3, #2]
   2d9ca:	429a      	cmp	r2, r3
   2d9cc:	d908      	bls.n	2d9e0 <f_write+0x1c8>
					cc = fp->fs->csize - csect;
   2d9ce:	68fb      	ldr	r3, [r7, #12]
   2d9d0:	681b      	ldr	r3, [r3, #0]
   2d9d2:	789b      	ldrb	r3, [r3, #2]
   2d9d4:	001a      	movs	r2, r3
   2d9d6:	2316      	movs	r3, #22
   2d9d8:	18fb      	adds	r3, r7, r3
   2d9da:	781b      	ldrb	r3, [r3, #0]
   2d9dc:	1ad3      	subs	r3, r2, r3
   2d9de:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
   2d9e0:	68fb      	ldr	r3, [r7, #12]
   2d9e2:	681b      	ldr	r3, [r3, #0]
   2d9e4:	7858      	ldrb	r0, [r3, #1]
   2d9e6:	69fb      	ldr	r3, [r7, #28]
   2d9e8:	b2db      	uxtb	r3, r3
   2d9ea:	693a      	ldr	r2, [r7, #16]
   2d9ec:	69b9      	ldr	r1, [r7, #24]
   2d9ee:	4c5c      	ldr	r4, [pc, #368]	; (2db60 <f_write+0x348>)
   2d9f0:	47a0      	blx	r4
   2d9f2:	1e03      	subs	r3, r0, #0
   2d9f4:	d009      	beq.n	2da0a <f_write+0x1f2>
					ABORT(fp->fs, FR_DISK_ERR);
   2d9f6:	68fb      	ldr	r3, [r7, #12]
   2d9f8:	799b      	ldrb	r3, [r3, #6]
   2d9fa:	2280      	movs	r2, #128	; 0x80
   2d9fc:	4252      	negs	r2, r2
   2d9fe:	4313      	orrs	r3, r2
   2da00:	b2da      	uxtb	r2, r3
   2da02:	68fb      	ldr	r3, [r7, #12]
   2da04:	719a      	strb	r2, [r3, #6]
   2da06:	2301      	movs	r3, #1
   2da08:	e09e      	b.n	2db48 <f_write+0x330>
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
   2da0a:	68fb      	ldr	r3, [r7, #12]
   2da0c:	681b      	ldr	r3, [r3, #0]
   2da0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2da10:	693b      	ldr	r3, [r7, #16]
   2da12:	1ad2      	subs	r2, r2, r3
   2da14:	69fb      	ldr	r3, [r7, #28]
   2da16:	429a      	cmp	r2, r3
   2da18:	d214      	bcs.n	2da44 <f_write+0x22c>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
   2da1a:	68fb      	ldr	r3, [r7, #12]
   2da1c:	681b      	ldr	r3, [r3, #0]
   2da1e:	3330      	adds	r3, #48	; 0x30
   2da20:	0018      	movs	r0, r3
   2da22:	68fb      	ldr	r3, [r7, #12]
   2da24:	681b      	ldr	r3, [r3, #0]
   2da26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2da28:	693b      	ldr	r3, [r7, #16]
   2da2a:	1ad3      	subs	r3, r2, r3
   2da2c:	025b      	lsls	r3, r3, #9
   2da2e:	69ba      	ldr	r2, [r7, #24]
   2da30:	18d1      	adds	r1, r2, r3
   2da32:	2380      	movs	r3, #128	; 0x80
   2da34:	009b      	lsls	r3, r3, #2
   2da36:	001a      	movs	r2, r3
   2da38:	4b4a      	ldr	r3, [pc, #296]	; (2db64 <f_write+0x34c>)
   2da3a:	4798      	blx	r3
					fp->fs->wflag = 0;
   2da3c:	68fb      	ldr	r3, [r7, #12]
   2da3e:	681b      	ldr	r3, [r3, #0]
   2da40:	2200      	movs	r2, #0
   2da42:	711a      	strb	r2, [r3, #4]
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
   2da44:	69fb      	ldr	r3, [r7, #28]
   2da46:	025b      	lsls	r3, r3, #9
   2da48:	623b      	str	r3, [r7, #32]
				continue;
   2da4a:	e051      	b.n	2daf0 <f_write+0x2d8>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
   2da4c:	68fb      	ldr	r3, [r7, #12]
   2da4e:	689a      	ldr	r2, [r3, #8]
   2da50:	68fb      	ldr	r3, [r7, #12]
   2da52:	68db      	ldr	r3, [r3, #12]
   2da54:	429a      	cmp	r2, r3
   2da56:	d315      	bcc.n	2da84 <f_write+0x26c>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
   2da58:	68fb      	ldr	r3, [r7, #12]
   2da5a:	681b      	ldr	r3, [r3, #0]
   2da5c:	2100      	movs	r1, #0
   2da5e:	0018      	movs	r0, r3
   2da60:	4b3d      	ldr	r3, [pc, #244]	; (2db58 <f_write+0x340>)
   2da62:	4798      	blx	r3
   2da64:	1e03      	subs	r3, r0, #0
   2da66:	d009      	beq.n	2da7c <f_write+0x264>
   2da68:	68fb      	ldr	r3, [r7, #12]
   2da6a:	799b      	ldrb	r3, [r3, #6]
   2da6c:	2280      	movs	r2, #128	; 0x80
   2da6e:	4252      	negs	r2, r2
   2da70:	4313      	orrs	r3, r2
   2da72:	b2da      	uxtb	r2, r3
   2da74:	68fb      	ldr	r3, [r7, #12]
   2da76:	719a      	strb	r2, [r3, #6]
   2da78:	2301      	movs	r3, #1
   2da7a:	e065      	b.n	2db48 <f_write+0x330>
				fp->fs->winsect = sect;
   2da7c:	68fb      	ldr	r3, [r7, #12]
   2da7e:	681b      	ldr	r3, [r3, #0]
   2da80:	693a      	ldr	r2, [r7, #16]
   2da82:	62da      	str	r2, [r3, #44]	; 0x2c
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
   2da84:	68fb      	ldr	r3, [r7, #12]
   2da86:	693a      	ldr	r2, [r7, #16]
   2da88:	619a      	str	r2, [r3, #24]
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
   2da8a:	68fb      	ldr	r3, [r7, #12]
   2da8c:	689b      	ldr	r3, [r3, #8]
   2da8e:	05db      	lsls	r3, r3, #23
   2da90:	0ddb      	lsrs	r3, r3, #23
   2da92:	2280      	movs	r2, #128	; 0x80
   2da94:	0092      	lsls	r2, r2, #2
   2da96:	1ad3      	subs	r3, r2, r3
   2da98:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
   2da9a:	6a3a      	ldr	r2, [r7, #32]
   2da9c:	687b      	ldr	r3, [r7, #4]
   2da9e:	429a      	cmp	r2, r3
   2daa0:	d901      	bls.n	2daa6 <f_write+0x28e>
   2daa2:	687b      	ldr	r3, [r7, #4]
   2daa4:	623b      	str	r3, [r7, #32]
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
   2daa6:	68fb      	ldr	r3, [r7, #12]
   2daa8:	681a      	ldr	r2, [r3, #0]
   2daaa:	68fb      	ldr	r3, [r7, #12]
   2daac:	699b      	ldr	r3, [r3, #24]
   2daae:	0019      	movs	r1, r3
   2dab0:	0010      	movs	r0, r2
   2dab2:	4b29      	ldr	r3, [pc, #164]	; (2db58 <f_write+0x340>)
   2dab4:	4798      	blx	r3
   2dab6:	1e03      	subs	r3, r0, #0
   2dab8:	d009      	beq.n	2dace <f_write+0x2b6>
			ABORT(fp->fs, FR_DISK_ERR);
   2daba:	68fb      	ldr	r3, [r7, #12]
   2dabc:	799b      	ldrb	r3, [r3, #6]
   2dabe:	2280      	movs	r2, #128	; 0x80
   2dac0:	4252      	negs	r2, r2
   2dac2:	4313      	orrs	r3, r2
   2dac4:	b2da      	uxtb	r2, r3
   2dac6:	68fb      	ldr	r3, [r7, #12]
   2dac8:	719a      	strb	r2, [r3, #6]
   2daca:	2301      	movs	r3, #1
   2dacc:	e03c      	b.n	2db48 <f_write+0x330>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
   2dace:	68fb      	ldr	r3, [r7, #12]
   2dad0:	681a      	ldr	r2, [r3, #0]
   2dad2:	68fb      	ldr	r3, [r7, #12]
   2dad4:	689b      	ldr	r3, [r3, #8]
   2dad6:	05db      	lsls	r3, r3, #23
   2dad8:	0ddb      	lsrs	r3, r3, #23
   2dada:	3330      	adds	r3, #48	; 0x30
   2dadc:	18d3      	adds	r3, r2, r3
   2dade:	6a3a      	ldr	r2, [r7, #32]
   2dae0:	69b9      	ldr	r1, [r7, #24]
   2dae2:	0018      	movs	r0, r3
   2dae4:	4b1f      	ldr	r3, [pc, #124]	; (2db64 <f_write+0x34c>)
   2dae6:	4798      	blx	r3
		fp->fs->wflag = 1;
   2dae8:	68fb      	ldr	r3, [r7, #12]
   2daea:	681b      	ldr	r3, [r3, #0]
   2daec:	2201      	movs	r2, #1
   2daee:	711a      	strb	r2, [r3, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
   2daf0:	69ba      	ldr	r2, [r7, #24]
   2daf2:	6a3b      	ldr	r3, [r7, #32]
   2daf4:	18d3      	adds	r3, r2, r3
   2daf6:	61bb      	str	r3, [r7, #24]
   2daf8:	68fb      	ldr	r3, [r7, #12]
   2dafa:	689a      	ldr	r2, [r3, #8]
   2dafc:	6a3b      	ldr	r3, [r7, #32]
   2dafe:	18d2      	adds	r2, r2, r3
   2db00:	68fb      	ldr	r3, [r7, #12]
   2db02:	609a      	str	r2, [r3, #8]
   2db04:	683b      	ldr	r3, [r7, #0]
   2db06:	681a      	ldr	r2, [r3, #0]
   2db08:	6a3b      	ldr	r3, [r7, #32]
   2db0a:	18d2      	adds	r2, r2, r3
   2db0c:	683b      	ldr	r3, [r7, #0]
   2db0e:	601a      	str	r2, [r3, #0]
   2db10:	687a      	ldr	r2, [r7, #4]
   2db12:	6a3b      	ldr	r3, [r7, #32]
   2db14:	1ad3      	subs	r3, r2, r3
   2db16:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
   2db18:	687b      	ldr	r3, [r7, #4]
   2db1a:	2b00      	cmp	r3, #0
   2db1c:	d000      	beq.n	2db20 <f_write+0x308>
   2db1e:	e6b7      	b.n	2d890 <f_write+0x78>
   2db20:	e000      	b.n	2db24 <f_write+0x30c>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   2db22:	46c0      	nop			; (mov r8, r8)
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
   2db24:	68fb      	ldr	r3, [r7, #12]
   2db26:	689a      	ldr	r2, [r3, #8]
   2db28:	68fb      	ldr	r3, [r7, #12]
   2db2a:	68db      	ldr	r3, [r3, #12]
   2db2c:	429a      	cmp	r2, r3
   2db2e:	d903      	bls.n	2db38 <f_write+0x320>
   2db30:	68fb      	ldr	r3, [r7, #12]
   2db32:	689a      	ldr	r2, [r3, #8]
   2db34:	68fb      	ldr	r3, [r7, #12]
   2db36:	60da      	str	r2, [r3, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
   2db38:	68fb      	ldr	r3, [r7, #12]
   2db3a:	799b      	ldrb	r3, [r3, #6]
   2db3c:	2220      	movs	r2, #32
   2db3e:	4313      	orrs	r3, r2
   2db40:	b2da      	uxtb	r2, r3
   2db42:	68fb      	ldr	r3, [r7, #12]
   2db44:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
   2db46:	2300      	movs	r3, #0
}
   2db48:	0018      	movs	r0, r3
   2db4a:	46bd      	mov	sp, r7
   2db4c:	b00b      	add	sp, #44	; 0x2c
   2db4e:	bd90      	pop	{r4, r7, pc}
   2db50:	0002d295 	.word	0x0002d295
   2db54:	0002b921 	.word	0x0002b921
   2db58:	0002b219 	.word	0x0002b219
   2db5c:	0002b479 	.word	0x0002b479
   2db60:	0002af05 	.word	0x0002af05
   2db64:	0002b135 	.word	0x0002b135

0002db68 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
   2db68:	b590      	push	{r4, r7, lr}
   2db6a:	b087      	sub	sp, #28
   2db6c:	af00      	add	r7, sp, #0
   2db6e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
   2db70:	687b      	ldr	r3, [r7, #4]
   2db72:	681a      	ldr	r2, [r3, #0]
   2db74:	687b      	ldr	r3, [r7, #4]
   2db76:	889b      	ldrh	r3, [r3, #4]
   2db78:	2117      	movs	r1, #23
   2db7a:	187c      	adds	r4, r7, r1
   2db7c:	0019      	movs	r1, r3
   2db7e:	0010      	movs	r0, r2
   2db80:	4b55      	ldr	r3, [pc, #340]	; (2dcd8 <f_sync+0x170>)
   2db82:	4798      	blx	r3
   2db84:	0003      	movs	r3, r0
   2db86:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   2db88:	2317      	movs	r3, #23
   2db8a:	18fb      	adds	r3, r7, r3
   2db8c:	781b      	ldrb	r3, [r3, #0]
   2db8e:	2b00      	cmp	r3, #0
   2db90:	d000      	beq.n	2db94 <f_sync+0x2c>
   2db92:	e09a      	b.n	2dcca <f_sync+0x162>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
   2db94:	687b      	ldr	r3, [r7, #4]
   2db96:	799b      	ldrb	r3, [r3, #6]
   2db98:	001a      	movs	r2, r3
   2db9a:	2320      	movs	r3, #32
   2db9c:	4013      	ands	r3, r2
   2db9e:	d100      	bne.n	2dba2 <f_sync+0x3a>
   2dba0:	e093      	b.n	2dcca <f_sync+0x162>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
   2dba2:	687b      	ldr	r3, [r7, #4]
   2dba4:	681a      	ldr	r2, [r3, #0]
   2dba6:	687b      	ldr	r3, [r7, #4]
   2dba8:	69db      	ldr	r3, [r3, #28]
   2dbaa:	2117      	movs	r1, #23
   2dbac:	187c      	adds	r4, r7, r1
   2dbae:	0019      	movs	r1, r3
   2dbb0:	0010      	movs	r0, r2
   2dbb2:	4b4a      	ldr	r3, [pc, #296]	; (2dcdc <f_sync+0x174>)
   2dbb4:	4798      	blx	r3
   2dbb6:	0003      	movs	r3, r0
   2dbb8:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK) {
   2dbba:	2317      	movs	r3, #23
   2dbbc:	18fb      	adds	r3, r7, r3
   2dbbe:	781b      	ldrb	r3, [r3, #0]
   2dbc0:	2b00      	cmp	r3, #0
   2dbc2:	d000      	beq.n	2dbc6 <f_sync+0x5e>
   2dbc4:	e081      	b.n	2dcca <f_sync+0x162>
				dir = fp->dir_ptr;
   2dbc6:	687b      	ldr	r3, [r7, #4]
   2dbc8:	6a1b      	ldr	r3, [r3, #32]
   2dbca:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
   2dbcc:	693b      	ldr	r3, [r7, #16]
   2dbce:	330b      	adds	r3, #11
   2dbd0:	693a      	ldr	r2, [r7, #16]
   2dbd2:	320b      	adds	r2, #11
   2dbd4:	7812      	ldrb	r2, [r2, #0]
   2dbd6:	2120      	movs	r1, #32
   2dbd8:	430a      	orrs	r2, r1
   2dbda:	b2d2      	uxtb	r2, r2
   2dbdc:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
   2dbde:	693b      	ldr	r3, [r7, #16]
   2dbe0:	331c      	adds	r3, #28
   2dbe2:	001a      	movs	r2, r3
   2dbe4:	687b      	ldr	r3, [r7, #4]
   2dbe6:	68db      	ldr	r3, [r3, #12]
   2dbe8:	b2db      	uxtb	r3, r3
   2dbea:	7013      	strb	r3, [r2, #0]
   2dbec:	693b      	ldr	r3, [r7, #16]
   2dbee:	331d      	adds	r3, #29
   2dbf0:	001a      	movs	r2, r3
   2dbf2:	687b      	ldr	r3, [r7, #4]
   2dbf4:	68db      	ldr	r3, [r3, #12]
   2dbf6:	b29b      	uxth	r3, r3
   2dbf8:	0a1b      	lsrs	r3, r3, #8
   2dbfa:	b29b      	uxth	r3, r3
   2dbfc:	b2db      	uxtb	r3, r3
   2dbfe:	7013      	strb	r3, [r2, #0]
   2dc00:	693b      	ldr	r3, [r7, #16]
   2dc02:	331e      	adds	r3, #30
   2dc04:	001a      	movs	r2, r3
   2dc06:	687b      	ldr	r3, [r7, #4]
   2dc08:	68db      	ldr	r3, [r3, #12]
   2dc0a:	0c1b      	lsrs	r3, r3, #16
   2dc0c:	b2db      	uxtb	r3, r3
   2dc0e:	7013      	strb	r3, [r2, #0]
   2dc10:	693b      	ldr	r3, [r7, #16]
   2dc12:	331f      	adds	r3, #31
   2dc14:	001a      	movs	r2, r3
   2dc16:	687b      	ldr	r3, [r7, #4]
   2dc18:	68db      	ldr	r3, [r3, #12]
   2dc1a:	0e1b      	lsrs	r3, r3, #24
   2dc1c:	b2db      	uxtb	r3, r3
   2dc1e:	7013      	strb	r3, [r2, #0]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
   2dc20:	693b      	ldr	r3, [r7, #16]
   2dc22:	331a      	adds	r3, #26
   2dc24:	001a      	movs	r2, r3
   2dc26:	687b      	ldr	r3, [r7, #4]
   2dc28:	691b      	ldr	r3, [r3, #16]
   2dc2a:	b2db      	uxtb	r3, r3
   2dc2c:	7013      	strb	r3, [r2, #0]
   2dc2e:	693b      	ldr	r3, [r7, #16]
   2dc30:	331b      	adds	r3, #27
   2dc32:	001a      	movs	r2, r3
   2dc34:	687b      	ldr	r3, [r7, #4]
   2dc36:	691b      	ldr	r3, [r3, #16]
   2dc38:	b29b      	uxth	r3, r3
   2dc3a:	0a1b      	lsrs	r3, r3, #8
   2dc3c:	b29b      	uxth	r3, r3
   2dc3e:	b2db      	uxtb	r3, r3
   2dc40:	7013      	strb	r3, [r2, #0]
   2dc42:	693b      	ldr	r3, [r7, #16]
   2dc44:	3314      	adds	r3, #20
   2dc46:	001a      	movs	r2, r3
   2dc48:	687b      	ldr	r3, [r7, #4]
   2dc4a:	691b      	ldr	r3, [r3, #16]
   2dc4c:	0c1b      	lsrs	r3, r3, #16
   2dc4e:	b2db      	uxtb	r3, r3
   2dc50:	7013      	strb	r3, [r2, #0]
   2dc52:	693b      	ldr	r3, [r7, #16]
   2dc54:	3315      	adds	r3, #21
   2dc56:	001a      	movs	r2, r3
   2dc58:	687b      	ldr	r3, [r7, #4]
   2dc5a:	691b      	ldr	r3, [r3, #16]
   2dc5c:	0c1b      	lsrs	r3, r3, #16
   2dc5e:	b29b      	uxth	r3, r3
   2dc60:	0a1b      	lsrs	r3, r3, #8
   2dc62:	b29b      	uxth	r3, r3
   2dc64:	b2db      	uxtb	r3, r3
   2dc66:	7013      	strb	r3, [r2, #0]
				tim = get_fattime();						/* Update updated time */
   2dc68:	4b1d      	ldr	r3, [pc, #116]	; (2dce0 <f_sync+0x178>)
   2dc6a:	4798      	blx	r3
   2dc6c:	0003      	movs	r3, r0
   2dc6e:	60fb      	str	r3, [r7, #12]
				ST_DWORD(dir+DIR_WrtTime, tim);
   2dc70:	693b      	ldr	r3, [r7, #16]
   2dc72:	3316      	adds	r3, #22
   2dc74:	68fa      	ldr	r2, [r7, #12]
   2dc76:	b2d2      	uxtb	r2, r2
   2dc78:	701a      	strb	r2, [r3, #0]
   2dc7a:	693b      	ldr	r3, [r7, #16]
   2dc7c:	3317      	adds	r3, #23
   2dc7e:	68fa      	ldr	r2, [r7, #12]
   2dc80:	b292      	uxth	r2, r2
   2dc82:	0a12      	lsrs	r2, r2, #8
   2dc84:	b292      	uxth	r2, r2
   2dc86:	b2d2      	uxtb	r2, r2
   2dc88:	701a      	strb	r2, [r3, #0]
   2dc8a:	693b      	ldr	r3, [r7, #16]
   2dc8c:	3318      	adds	r3, #24
   2dc8e:	68fa      	ldr	r2, [r7, #12]
   2dc90:	0c12      	lsrs	r2, r2, #16
   2dc92:	b2d2      	uxtb	r2, r2
   2dc94:	701a      	strb	r2, [r3, #0]
   2dc96:	693b      	ldr	r3, [r7, #16]
   2dc98:	3319      	adds	r3, #25
   2dc9a:	68fa      	ldr	r2, [r7, #12]
   2dc9c:	0e12      	lsrs	r2, r2, #24
   2dc9e:	b2d2      	uxtb	r2, r2
   2dca0:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
   2dca2:	687b      	ldr	r3, [r7, #4]
   2dca4:	799b      	ldrb	r3, [r3, #6]
   2dca6:	2220      	movs	r2, #32
   2dca8:	4393      	bics	r3, r2
   2dcaa:	b2da      	uxtb	r2, r3
   2dcac:	687b      	ldr	r3, [r7, #4]
   2dcae:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
   2dcb0:	687b      	ldr	r3, [r7, #4]
   2dcb2:	681b      	ldr	r3, [r3, #0]
   2dcb4:	2201      	movs	r2, #1
   2dcb6:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
   2dcb8:	687b      	ldr	r3, [r7, #4]
   2dcba:	681b      	ldr	r3, [r3, #0]
   2dcbc:	2217      	movs	r2, #23
   2dcbe:	18bc      	adds	r4, r7, r2
   2dcc0:	0018      	movs	r0, r3
   2dcc2:	4b08      	ldr	r3, [pc, #32]	; (2dce4 <f_sync+0x17c>)
   2dcc4:	4798      	blx	r3
   2dcc6:	0003      	movs	r3, r0
   2dcc8:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
   2dcca:	2317      	movs	r3, #23
   2dccc:	18fb      	adds	r3, r7, r3
   2dcce:	781b      	ldrb	r3, [r3, #0]
}
   2dcd0:	0018      	movs	r0, r3
   2dcd2:	46bd      	mov	sp, r7
   2dcd4:	b007      	add	sp, #28
   2dcd6:	bd90      	pop	{r4, r7, pc}
   2dcd8:	0002d295 	.word	0x0002d295
   2dcdc:	0002b219 	.word	0x0002b219
   2dce0:	0002b0d5 	.word	0x0002b0d5
   2dce4:	0002b2e1 	.word	0x0002b2e1

0002dce8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
   2dce8:	b590      	push	{r4, r7, lr}
   2dcea:	b085      	sub	sp, #20
   2dcec:	af00      	add	r7, sp, #0
   2dcee:	6078      	str	r0, [r7, #4]
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
   2dcf0:	230f      	movs	r3, #15
   2dcf2:	18fc      	adds	r4, r7, r3
   2dcf4:	687b      	ldr	r3, [r7, #4]
   2dcf6:	0018      	movs	r0, r3
   2dcf8:	4b09      	ldr	r3, [pc, #36]	; (2dd20 <f_close+0x38>)
   2dcfa:	4798      	blx	r3
   2dcfc:	0003      	movs	r3, r0
   2dcfe:	7023      	strb	r3, [r4, #0]
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
   2dd00:	230f      	movs	r3, #15
   2dd02:	18fb      	adds	r3, r7, r3
   2dd04:	781b      	ldrb	r3, [r3, #0]
   2dd06:	2b00      	cmp	r3, #0
   2dd08:	d102      	bne.n	2dd10 <f_close+0x28>
   2dd0a:	687b      	ldr	r3, [r7, #4]
   2dd0c:	2200      	movs	r2, #0
   2dd0e:	601a      	str	r2, [r3, #0]
	return res;
   2dd10:	230f      	movs	r3, #15
   2dd12:	18fb      	adds	r3, r7, r3
   2dd14:	781b      	ldrb	r3, [r3, #0]
#endif
}
   2dd16:	0018      	movs	r0, r3
   2dd18:	46bd      	mov	sp, r7
   2dd1a:	b005      	add	sp, #20
   2dd1c:	bd90      	pop	{r4, r7, pc}
   2dd1e:	46c0      	nop			; (mov r8, r8)
   2dd20:	0002db69 	.word	0x0002db69

0002dd24 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	src,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
   2dd24:	b580      	push	{r7, lr}
   2dd26:	b084      	sub	sp, #16
   2dd28:	af00      	add	r7, sp, #0
   2dd2a:	0002      	movs	r2, r0
   2dd2c:	6039      	str	r1, [r7, #0]
   2dd2e:	1dbb      	adds	r3, r7, #6
   2dd30:	801a      	strh	r2, [r3, #0]
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
   2dd32:	1dbb      	adds	r3, r7, #6
   2dd34:	881b      	ldrh	r3, [r3, #0]
   2dd36:	2b7f      	cmp	r3, #127	; 0x7f
   2dd38:	d805      	bhi.n	2dd46 <ff_convert+0x22>
		c = src;
   2dd3a:	230e      	movs	r3, #14
   2dd3c:	18fb      	adds	r3, r7, r3
   2dd3e:	1dba      	adds	r2, r7, #6
   2dd40:	8812      	ldrh	r2, [r2, #0]
   2dd42:	801a      	strh	r2, [r3, #0]
   2dd44:	e03a      	b.n	2ddbc <ff_convert+0x98>

	} else {
		if (dir) {		/* OEMCP to Unicode */
   2dd46:	683b      	ldr	r3, [r7, #0]
   2dd48:	2b00      	cmp	r3, #0
   2dd4a:	d010      	beq.n	2dd6e <ff_convert+0x4a>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
   2dd4c:	1dbb      	adds	r3, r7, #6
   2dd4e:	881b      	ldrh	r3, [r3, #0]
   2dd50:	2bff      	cmp	r3, #255	; 0xff
   2dd52:	d807      	bhi.n	2dd64 <ff_convert+0x40>
   2dd54:	1dbb      	adds	r3, r7, #6
   2dd56:	881b      	ldrh	r3, [r3, #0]
   2dd58:	3b80      	subs	r3, #128	; 0x80
   2dd5a:	001a      	movs	r2, r3
   2dd5c:	4b1b      	ldr	r3, [pc, #108]	; (2ddcc <ff_convert+0xa8>)
   2dd5e:	0052      	lsls	r2, r2, #1
   2dd60:	5ad2      	ldrh	r2, [r2, r3]
   2dd62:	e000      	b.n	2dd66 <ff_convert+0x42>
   2dd64:	2200      	movs	r2, #0
   2dd66:	230e      	movs	r3, #14
   2dd68:	18fb      	adds	r3, r7, r3
   2dd6a:	801a      	strh	r2, [r3, #0]
   2dd6c:	e026      	b.n	2ddbc <ff_convert+0x98>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
   2dd6e:	230e      	movs	r3, #14
   2dd70:	18fb      	adds	r3, r7, r3
   2dd72:	2200      	movs	r2, #0
   2dd74:	801a      	strh	r2, [r3, #0]
   2dd76:	e010      	b.n	2dd9a <ff_convert+0x76>
				if (src == Tbl[c]) break;
   2dd78:	230e      	movs	r3, #14
   2dd7a:	18fb      	adds	r3, r7, r3
   2dd7c:	881a      	ldrh	r2, [r3, #0]
   2dd7e:	4b13      	ldr	r3, [pc, #76]	; (2ddcc <ff_convert+0xa8>)
   2dd80:	0052      	lsls	r2, r2, #1
   2dd82:	5ad3      	ldrh	r3, [r2, r3]
   2dd84:	1dba      	adds	r2, r7, #6
   2dd86:	8812      	ldrh	r2, [r2, #0]
   2dd88:	429a      	cmp	r2, r3
   2dd8a:	d00c      	beq.n	2dda6 <ff_convert+0x82>
			for (c = 0; c < 0x80; c++) {
   2dd8c:	230e      	movs	r3, #14
   2dd8e:	18fb      	adds	r3, r7, r3
   2dd90:	881a      	ldrh	r2, [r3, #0]
   2dd92:	230e      	movs	r3, #14
   2dd94:	18fb      	adds	r3, r7, r3
   2dd96:	3201      	adds	r2, #1
   2dd98:	801a      	strh	r2, [r3, #0]
   2dd9a:	230e      	movs	r3, #14
   2dd9c:	18fb      	adds	r3, r7, r3
   2dd9e:	881b      	ldrh	r3, [r3, #0]
   2dda0:	2b7f      	cmp	r3, #127	; 0x7f
   2dda2:	d9e9      	bls.n	2dd78 <ff_convert+0x54>
   2dda4:	e000      	b.n	2dda8 <ff_convert+0x84>
				if (src == Tbl[c]) break;
   2dda6:	46c0      	nop			; (mov r8, r8)
			}
			c = (c + 0x80) & 0xFF;
   2dda8:	230e      	movs	r3, #14
   2ddaa:	18fb      	adds	r3, r7, r3
   2ddac:	881b      	ldrh	r3, [r3, #0]
   2ddae:	3380      	adds	r3, #128	; 0x80
   2ddb0:	b29a      	uxth	r2, r3
   2ddb2:	230e      	movs	r3, #14
   2ddb4:	18fb      	adds	r3, r7, r3
   2ddb6:	21ff      	movs	r1, #255	; 0xff
   2ddb8:	400a      	ands	r2, r1
   2ddba:	801a      	strh	r2, [r3, #0]
		}
	}

	return c;
   2ddbc:	230e      	movs	r3, #14
   2ddbe:	18fb      	adds	r3, r7, r3
   2ddc0:	881b      	ldrh	r3, [r3, #0]
}
   2ddc2:	0018      	movs	r0, r3
   2ddc4:	46bd      	mov	sp, r7
   2ddc6:	b004      	add	sp, #16
   2ddc8:	bd80      	pop	{r7, pc}
   2ddca:	46c0      	nop			; (mov r8, r8)
   2ddcc:	0003a090 	.word	0x0003a090

0002ddd0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
   2ddd0:	b580      	push	{r7, lr}
   2ddd2:	b084      	sub	sp, #16
   2ddd4:	af00      	add	r7, sp, #0
   2ddd6:	0002      	movs	r2, r0
   2ddd8:	1dbb      	adds	r3, r7, #6
   2ddda:	801a      	strh	r2, [r3, #0]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
   2dddc:	2300      	movs	r3, #0
   2ddde:	60fb      	str	r3, [r7, #12]
   2dde0:	e002      	b.n	2dde8 <ff_wtoupper+0x18>
   2dde2:	68fb      	ldr	r3, [r7, #12]
   2dde4:	3301      	adds	r3, #1
   2dde6:	60fb      	str	r3, [r7, #12]
   2dde8:	4b0f      	ldr	r3, [pc, #60]	; (2de28 <ff_wtoupper+0x58>)
   2ddea:	68fa      	ldr	r2, [r7, #12]
   2ddec:	0052      	lsls	r2, r2, #1
   2ddee:	5ad3      	ldrh	r3, [r2, r3]
   2ddf0:	2b00      	cmp	r3, #0
   2ddf2:	d007      	beq.n	2de04 <ff_wtoupper+0x34>
   2ddf4:	4b0c      	ldr	r3, [pc, #48]	; (2de28 <ff_wtoupper+0x58>)
   2ddf6:	68fa      	ldr	r2, [r7, #12]
   2ddf8:	0052      	lsls	r2, r2, #1
   2ddfa:	5ad3      	ldrh	r3, [r2, r3]
   2ddfc:	1dba      	adds	r2, r7, #6
   2ddfe:	8812      	ldrh	r2, [r2, #0]
   2de00:	429a      	cmp	r2, r3
   2de02:	d1ee      	bne.n	2dde2 <ff_wtoupper+0x12>

	return tbl_lower[i] ? tbl_upper[i] : chr;
   2de04:	4b08      	ldr	r3, [pc, #32]	; (2de28 <ff_wtoupper+0x58>)
   2de06:	68fa      	ldr	r2, [r7, #12]
   2de08:	0052      	lsls	r2, r2, #1
   2de0a:	5ad3      	ldrh	r3, [r2, r3]
   2de0c:	2b00      	cmp	r3, #0
   2de0e:	d004      	beq.n	2de1a <ff_wtoupper+0x4a>
   2de10:	4b06      	ldr	r3, [pc, #24]	; (2de2c <ff_wtoupper+0x5c>)
   2de12:	68fa      	ldr	r2, [r7, #12]
   2de14:	0052      	lsls	r2, r2, #1
   2de16:	5ad3      	ldrh	r3, [r2, r3]
   2de18:	e001      	b.n	2de1e <ff_wtoupper+0x4e>
   2de1a:	1dbb      	adds	r3, r7, #6
   2de1c:	881b      	ldrh	r3, [r3, #0]
}
   2de1e:	0018      	movs	r0, r3
   2de20:	46bd      	mov	sp, r7
   2de22:	b004      	add	sp, #16
   2de24:	bd80      	pop	{r7, pc}
   2de26:	46c0      	nop			; (mov r8, r8)
   2de28:	0003a190 	.word	0x0003a190
   2de2c:	0003a370 	.word	0x0003a370

0002de30 <NewMessageData>:
int cycle(MQTTClient* c, Timer* timer);
void MQTTRun(void* parm);
int waitfor(MQTTClient* c, int packet_type, Timer* timer);


static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
   2de30:	b580      	push	{r7, lr}
   2de32:	b084      	sub	sp, #16
   2de34:	af00      	add	r7, sp, #0
   2de36:	60f8      	str	r0, [r7, #12]
   2de38:	60b9      	str	r1, [r7, #8]
   2de3a:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
   2de3c:	68fb      	ldr	r3, [r7, #12]
   2de3e:	68ba      	ldr	r2, [r7, #8]
   2de40:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
   2de42:	68fb      	ldr	r3, [r7, #12]
   2de44:	687a      	ldr	r2, [r7, #4]
   2de46:	601a      	str	r2, [r3, #0]
}
   2de48:	46c0      	nop			; (mov r8, r8)
   2de4a:	46bd      	mov	sp, r7
   2de4c:	b004      	add	sp, #16
   2de4e:	bd80      	pop	{r7, pc}

0002de50 <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
   2de50:	b580      	push	{r7, lr}
   2de52:	b082      	sub	sp, #8
   2de54:	af00      	add	r7, sp, #0
   2de56:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   2de58:	687b      	ldr	r3, [r7, #4]
   2de5a:	681b      	ldr	r3, [r3, #0]
   2de5c:	4a07      	ldr	r2, [pc, #28]	; (2de7c <getNextPacketId+0x2c>)
   2de5e:	4293      	cmp	r3, r2
   2de60:	d003      	beq.n	2de6a <getNextPacketId+0x1a>
   2de62:	687b      	ldr	r3, [r7, #4]
   2de64:	681b      	ldr	r3, [r3, #0]
   2de66:	1c5a      	adds	r2, r3, #1
   2de68:	e000      	b.n	2de6c <getNextPacketId+0x1c>
   2de6a:	2201      	movs	r2, #1
   2de6c:	687b      	ldr	r3, [r7, #4]
   2de6e:	601a      	str	r2, [r3, #0]
   2de70:	687b      	ldr	r3, [r7, #4]
   2de72:	681b      	ldr	r3, [r3, #0]
}
   2de74:	0018      	movs	r0, r3
   2de76:	46bd      	mov	sp, r7
   2de78:	b002      	add	sp, #8
   2de7a:	bd80      	pop	{r7, pc}
   2de7c:	0000ffff 	.word	0x0000ffff

0002de80 <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
   2de80:	b5f0      	push	{r4, r5, r6, r7, lr}
   2de82:	b087      	sub	sp, #28
   2de84:	af00      	add	r7, sp, #0
   2de86:	60f8      	str	r0, [r7, #12]
   2de88:	60b9      	str	r1, [r7, #8]
   2de8a:	607a      	str	r2, [r7, #4]
    int rc = FAILURE, 
   2de8c:	2301      	movs	r3, #1
   2de8e:	425b      	negs	r3, r3
   2de90:	617b      	str	r3, [r7, #20]
        sent = 0;
   2de92:	2300      	movs	r3, #0
   2de94:	613b      	str	r3, [r7, #16]
    
    while (sent < length && !TimerIsExpired(timer))
   2de96:	e01a      	b.n	2dece <sendPacket+0x4e>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
   2de98:	68fb      	ldr	r3, [r7, #12]
   2de9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2de9c:	68dc      	ldr	r4, [r3, #12]
   2de9e:	68fb      	ldr	r3, [r7, #12]
   2dea0:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2dea2:	68fb      	ldr	r3, [r7, #12]
   2dea4:	691a      	ldr	r2, [r3, #16]
   2dea6:	693b      	ldr	r3, [r7, #16]
   2dea8:	18d6      	adds	r6, r2, r3
   2deaa:	687b      	ldr	r3, [r7, #4]
   2deac:	0018      	movs	r0, r3
   2deae:	4b1a      	ldr	r3, [pc, #104]	; (2df18 <sendPacket+0x98>)
   2deb0:	4798      	blx	r3
   2deb2:	0003      	movs	r3, r0
   2deb4:	68ba      	ldr	r2, [r7, #8]
   2deb6:	0031      	movs	r1, r6
   2deb8:	0028      	movs	r0, r5
   2deba:	47a0      	blx	r4
   2debc:	0003      	movs	r3, r0
   2debe:	617b      	str	r3, [r7, #20]
        if (rc < 0)  // there was an error writing the data
   2dec0:	697b      	ldr	r3, [r7, #20]
   2dec2:	2b00      	cmp	r3, #0
   2dec4:	db0e      	blt.n	2dee4 <sendPacket+0x64>
            break;
        sent += rc;
   2dec6:	693a      	ldr	r2, [r7, #16]
   2dec8:	697b      	ldr	r3, [r7, #20]
   2deca:	18d3      	adds	r3, r2, r3
   2decc:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
   2dece:	693a      	ldr	r2, [r7, #16]
   2ded0:	68bb      	ldr	r3, [r7, #8]
   2ded2:	429a      	cmp	r2, r3
   2ded4:	da07      	bge.n	2dee6 <sendPacket+0x66>
   2ded6:	687b      	ldr	r3, [r7, #4]
   2ded8:	0018      	movs	r0, r3
   2deda:	4b10      	ldr	r3, [pc, #64]	; (2df1c <sendPacket+0x9c>)
   2dedc:	4798      	blx	r3
   2dede:	1e03      	subs	r3, r0, #0
   2dee0:	d0da      	beq.n	2de98 <sendPacket+0x18>
   2dee2:	e000      	b.n	2dee6 <sendPacket+0x66>
            break;
   2dee4:	46c0      	nop			; (mov r8, r8)
    }
    if (sent == length)
   2dee6:	693a      	ldr	r2, [r7, #16]
   2dee8:	68bb      	ldr	r3, [r7, #8]
   2deea:	429a      	cmp	r2, r3
   2deec:	d10b      	bne.n	2df06 <sendPacket+0x86>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
   2deee:	68fb      	ldr	r3, [r7, #12]
   2def0:	3354      	adds	r3, #84	; 0x54
   2def2:	001a      	movs	r2, r3
   2def4:	68fb      	ldr	r3, [r7, #12]
   2def6:	699b      	ldr	r3, [r3, #24]
   2def8:	0019      	movs	r1, r3
   2defa:	0010      	movs	r0, r2
   2defc:	4b08      	ldr	r3, [pc, #32]	; (2df20 <sendPacket+0xa0>)
   2defe:	4798      	blx	r3
        rc = SUCCESS;
   2df00:	2300      	movs	r3, #0
   2df02:	617b      	str	r3, [r7, #20]
   2df04:	e002      	b.n	2df0c <sendPacket+0x8c>
    }
    else
        rc = FAILURE;
   2df06:	2301      	movs	r3, #1
   2df08:	425b      	negs	r3, r3
   2df0a:	617b      	str	r3, [r7, #20]
    return rc;
   2df0c:	697b      	ldr	r3, [r7, #20]
}
   2df0e:	0018      	movs	r0, r3
   2df10:	46bd      	mov	sp, r7
   2df12:	b007      	add	sp, #28
   2df14:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2df16:	46c0      	nop			; (mov r8, r8)
   2df18:	0002ece1 	.word	0x0002ece1
   2df1c:	0002ec65 	.word	0x0002ec65
   2df20:	0002ecb9 	.word	0x0002ecb9

0002df24 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
   2df24:	b580      	push	{r7, lr}
   2df26:	b086      	sub	sp, #24
   2df28:	af00      	add	r7, sp, #0
   2df2a:	60f8      	str	r0, [r7, #12]
   2df2c:	60b9      	str	r1, [r7, #8]
   2df2e:	607a      	str	r2, [r7, #4]
   2df30:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
   2df32:	68fb      	ldr	r3, [r7, #12]
   2df34:	68ba      	ldr	r2, [r7, #8]
   2df36:	651a      	str	r2, [r3, #80]	; 0x50
    
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2df38:	2300      	movs	r3, #0
   2df3a:	617b      	str	r3, [r7, #20]
   2df3c:	e00a      	b.n	2df54 <MQTTClientInit+0x30>
        c->messageHandlers[i].topicFilter = 0;
   2df3e:	68fa      	ldr	r2, [r7, #12]
   2df40:	697b      	ldr	r3, [r7, #20]
   2df42:	3304      	adds	r3, #4
   2df44:	00db      	lsls	r3, r3, #3
   2df46:	18d3      	adds	r3, r2, r3
   2df48:	3304      	adds	r3, #4
   2df4a:	2200      	movs	r2, #0
   2df4c:	601a      	str	r2, [r3, #0]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2df4e:	697b      	ldr	r3, [r7, #20]
   2df50:	3301      	adds	r3, #1
   2df52:	617b      	str	r3, [r7, #20]
   2df54:	697b      	ldr	r3, [r7, #20]
   2df56:	2b04      	cmp	r3, #4
   2df58:	ddf1      	ble.n	2df3e <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
   2df5a:	68fb      	ldr	r3, [r7, #12]
   2df5c:	687a      	ldr	r2, [r7, #4]
   2df5e:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
   2df60:	68fb      	ldr	r3, [r7, #12]
   2df62:	683a      	ldr	r2, [r7, #0]
   2df64:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
   2df66:	68fb      	ldr	r3, [r7, #12]
   2df68:	6a3a      	ldr	r2, [r7, #32]
   2df6a:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
   2df6c:	68fb      	ldr	r3, [r7, #12]
   2df6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2df70:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
   2df72:	68fb      	ldr	r3, [r7, #12]
   2df74:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2df76:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
   2df78:	68fb      	ldr	r3, [r7, #12]
   2df7a:	2200      	movs	r2, #0
   2df7c:	621a      	str	r2, [r3, #32]
    c->ping_outstanding = 0;
   2df7e:	68fb      	ldr	r3, [r7, #12]
   2df80:	2200      	movs	r2, #0
   2df82:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
   2df84:	68fb      	ldr	r3, [r7, #12]
   2df86:	2200      	movs	r2, #0
   2df88:	64da      	str	r2, [r3, #76]	; 0x4c
	c->next_packetid = 1;
   2df8a:	68fb      	ldr	r3, [r7, #12]
   2df8c:	2201      	movs	r2, #1
   2df8e:	601a      	str	r2, [r3, #0]
    TimerInit(&c->ping_timer);
   2df90:	68fb      	ldr	r3, [r7, #12]
   2df92:	3354      	adds	r3, #84	; 0x54
   2df94:	0018      	movs	r0, r3
   2df96:	4b03      	ldr	r3, [pc, #12]	; (2dfa4 <MQTTClientInit+0x80>)
   2df98:	4798      	blx	r3
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
   2df9a:	46c0      	nop			; (mov r8, r8)
   2df9c:	46bd      	mov	sp, r7
   2df9e:	b006      	add	sp, #24
   2dfa0:	bd80      	pop	{r7, pc}
   2dfa2:	46c0      	nop			; (mov r8, r8)
   2dfa4:	0002ed09 	.word	0x0002ed09

0002dfa8 <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
   2dfa8:	b590      	push	{r4, r7, lr}
   2dfaa:	b08b      	sub	sp, #44	; 0x2c
   2dfac:	af00      	add	r7, sp, #0
   2dfae:	60f8      	str	r0, [r7, #12]
   2dfb0:	60b9      	str	r1, [r7, #8]
   2dfb2:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
   2dfb4:	2301      	movs	r3, #1
   2dfb6:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
   2dfb8:	2300      	movs	r3, #0
   2dfba:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
   2dfbc:	2304      	movs	r3, #4
   2dfbe:	61fb      	str	r3, [r7, #28]

    *value = 0;
   2dfc0:	68bb      	ldr	r3, [r7, #8]
   2dfc2:	2200      	movs	r2, #0
   2dfc4:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
   2dfc6:	2301      	movs	r3, #1
   2dfc8:	425b      	negs	r3, r3
   2dfca:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   2dfcc:	6a3b      	ldr	r3, [r7, #32]
   2dfce:	3301      	adds	r3, #1
   2dfd0:	623b      	str	r3, [r7, #32]
   2dfd2:	6a3a      	ldr	r2, [r7, #32]
   2dfd4:	69fb      	ldr	r3, [r7, #28]
   2dfd6:	429a      	cmp	r2, r3
   2dfd8:	dd03      	ble.n	2dfe2 <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
   2dfda:	2301      	movs	r3, #1
   2dfdc:	425b      	negs	r3, r3
   2dfde:	61bb      	str	r3, [r7, #24]
            goto exit;
   2dfe0:	e026      	b.n	2e030 <decodePacket+0x88>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
   2dfe2:	68fb      	ldr	r3, [r7, #12]
   2dfe4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2dfe6:	689c      	ldr	r4, [r3, #8]
   2dfe8:	68fb      	ldr	r3, [r7, #12]
   2dfea:	6d18      	ldr	r0, [r3, #80]	; 0x50
   2dfec:	687b      	ldr	r3, [r7, #4]
   2dfee:	2217      	movs	r2, #23
   2dff0:	18b9      	adds	r1, r7, r2
   2dff2:	2201      	movs	r2, #1
   2dff4:	47a0      	blx	r4
   2dff6:	0003      	movs	r3, r0
   2dff8:	61bb      	str	r3, [r7, #24]
        if (rc != 1)
   2dffa:	69bb      	ldr	r3, [r7, #24]
   2dffc:	2b01      	cmp	r3, #1
   2dffe:	d116      	bne.n	2e02e <decodePacket+0x86>
            goto exit;
        *value += (i & 127) * multiplier;
   2e000:	68bb      	ldr	r3, [r7, #8]
   2e002:	681a      	ldr	r2, [r3, #0]
   2e004:	2317      	movs	r3, #23
   2e006:	18fb      	adds	r3, r7, r3
   2e008:	781b      	ldrb	r3, [r3, #0]
   2e00a:	0019      	movs	r1, r3
   2e00c:	237f      	movs	r3, #127	; 0x7f
   2e00e:	400b      	ands	r3, r1
   2e010:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2e012:	434b      	muls	r3, r1
   2e014:	18d2      	adds	r2, r2, r3
   2e016:	68bb      	ldr	r3, [r7, #8]
   2e018:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
   2e01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e01c:	01db      	lsls	r3, r3, #7
   2e01e:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
   2e020:	2317      	movs	r3, #23
   2e022:	18fb      	adds	r3, r7, r3
   2e024:	781b      	ldrb	r3, [r3, #0]
   2e026:	b25b      	sxtb	r3, r3
   2e028:	2b00      	cmp	r3, #0
   2e02a:	dbcc      	blt.n	2dfc6 <decodePacket+0x1e>
   2e02c:	e000      	b.n	2e030 <decodePacket+0x88>
            goto exit;
   2e02e:	46c0      	nop			; (mov r8, r8)
exit:
    return len;
   2e030:	6a3b      	ldr	r3, [r7, #32]
}
   2e032:	0018      	movs	r0, r3
   2e034:	46bd      	mov	sp, r7
   2e036:	b00b      	add	sp, #44	; 0x2c
   2e038:	bd90      	pop	{r4, r7, pc}
	...

0002e03c <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
   2e03c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e03e:	46c6      	mov	lr, r8
   2e040:	b500      	push	{lr}
   2e042:	b086      	sub	sp, #24
   2e044:	af00      	add	r7, sp, #0
   2e046:	6078      	str	r0, [r7, #4]
   2e048:	6039      	str	r1, [r7, #0]
    int rc = FAILURE;
   2e04a:	2301      	movs	r3, #1
   2e04c:	425b      	negs	r3, r3
   2e04e:	617b      	str	r3, [r7, #20]
    MQTTHeader header = {0};
   2e050:	2300      	movs	r3, #0
   2e052:	60fb      	str	r3, [r7, #12]
    int len = 0;
   2e054:	2300      	movs	r3, #0
   2e056:	613b      	str	r3, [r7, #16]
    int rem_len = 0;
   2e058:	2300      	movs	r3, #0
   2e05a:	60bb      	str	r3, [r7, #8]

    /* 1. read the header byte.  This has the packet type in it */
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
   2e05c:	687b      	ldr	r3, [r7, #4]
   2e05e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2e060:	689c      	ldr	r4, [r3, #8]
   2e062:	687b      	ldr	r3, [r7, #4]
   2e064:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2e066:	687b      	ldr	r3, [r7, #4]
   2e068:	695e      	ldr	r6, [r3, #20]
   2e06a:	683b      	ldr	r3, [r7, #0]
   2e06c:	0018      	movs	r0, r3
   2e06e:	4b2b      	ldr	r3, [pc, #172]	; (2e11c <readPacket+0xe0>)
   2e070:	4798      	blx	r3
   2e072:	0003      	movs	r3, r0
   2e074:	2201      	movs	r2, #1
   2e076:	0031      	movs	r1, r6
   2e078:	0028      	movs	r0, r5
   2e07a:	47a0      	blx	r4
   2e07c:	0003      	movs	r3, r0
   2e07e:	2b01      	cmp	r3, #1
   2e080:	d141      	bne.n	2e106 <readPacket+0xca>
        goto exit;

    len = 1;
   2e082:	2301      	movs	r3, #1
   2e084:	613b      	str	r3, [r7, #16]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
   2e086:	683b      	ldr	r3, [r7, #0]
   2e088:	0018      	movs	r0, r3
   2e08a:	4b24      	ldr	r3, [pc, #144]	; (2e11c <readPacket+0xe0>)
   2e08c:	4798      	blx	r3
   2e08e:	0002      	movs	r2, r0
   2e090:	2308      	movs	r3, #8
   2e092:	18f9      	adds	r1, r7, r3
   2e094:	687b      	ldr	r3, [r7, #4]
   2e096:	0018      	movs	r0, r3
   2e098:	4b21      	ldr	r3, [pc, #132]	; (2e120 <readPacket+0xe4>)
   2e09a:	4798      	blx	r3
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
   2e09c:	687b      	ldr	r3, [r7, #4]
   2e09e:	695b      	ldr	r3, [r3, #20]
   2e0a0:	3301      	adds	r3, #1
   2e0a2:	68ba      	ldr	r2, [r7, #8]
   2e0a4:	0011      	movs	r1, r2
   2e0a6:	0018      	movs	r0, r3
   2e0a8:	4b1e      	ldr	r3, [pc, #120]	; (2e124 <readPacket+0xe8>)
   2e0aa:	4798      	blx	r3
   2e0ac:	0002      	movs	r2, r0
   2e0ae:	693b      	ldr	r3, [r7, #16]
   2e0b0:	189b      	adds	r3, r3, r2
   2e0b2:	613b      	str	r3, [r7, #16]

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
   2e0b4:	68bb      	ldr	r3, [r7, #8]
   2e0b6:	2b00      	cmp	r3, #0
   2e0b8:	dd17      	ble.n	2e0ea <readPacket+0xae>
   2e0ba:	687b      	ldr	r3, [r7, #4]
   2e0bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2e0be:	689c      	ldr	r4, [r3, #8]
   2e0c0:	687b      	ldr	r3, [r7, #4]
   2e0c2:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2e0c4:	687b      	ldr	r3, [r7, #4]
   2e0c6:	695a      	ldr	r2, [r3, #20]
   2e0c8:	693b      	ldr	r3, [r7, #16]
   2e0ca:	18d6      	adds	r6, r2, r3
   2e0cc:	68bb      	ldr	r3, [r7, #8]
   2e0ce:	4698      	mov	r8, r3
   2e0d0:	683b      	ldr	r3, [r7, #0]
   2e0d2:	0018      	movs	r0, r3
   2e0d4:	4b11      	ldr	r3, [pc, #68]	; (2e11c <readPacket+0xe0>)
   2e0d6:	4798      	blx	r3
   2e0d8:	0003      	movs	r3, r0
   2e0da:	4642      	mov	r2, r8
   2e0dc:	0031      	movs	r1, r6
   2e0de:	0028      	movs	r0, r5
   2e0e0:	47a0      	blx	r4
   2e0e2:	0002      	movs	r2, r0
   2e0e4:	68bb      	ldr	r3, [r7, #8]
   2e0e6:	429a      	cmp	r2, r3
   2e0e8:	d10f      	bne.n	2e10a <readPacket+0xce>
        goto exit;

    header.byte = c->readbuf[0];
   2e0ea:	687b      	ldr	r3, [r7, #4]
   2e0ec:	695b      	ldr	r3, [r3, #20]
   2e0ee:	781a      	ldrb	r2, [r3, #0]
   2e0f0:	230c      	movs	r3, #12
   2e0f2:	18fb      	adds	r3, r7, r3
   2e0f4:	701a      	strb	r2, [r3, #0]
    rc = header.bits.type;
   2e0f6:	230c      	movs	r3, #12
   2e0f8:	18fb      	adds	r3, r7, r3
   2e0fa:	781b      	ldrb	r3, [r3, #0]
   2e0fc:	061b      	lsls	r3, r3, #24
   2e0fe:	0f1b      	lsrs	r3, r3, #28
   2e100:	b2db      	uxtb	r3, r3
   2e102:	617b      	str	r3, [r7, #20]
   2e104:	e002      	b.n	2e10c <readPacket+0xd0>
        goto exit;
   2e106:	46c0      	nop			; (mov r8, r8)
   2e108:	e000      	b.n	2e10c <readPacket+0xd0>
        goto exit;
   2e10a:	46c0      	nop			; (mov r8, r8)
exit:
    return rc;
   2e10c:	697b      	ldr	r3, [r7, #20]
}
   2e10e:	0018      	movs	r0, r3
   2e110:	46bd      	mov	sp, r7
   2e112:	b006      	add	sp, #24
   2e114:	bc04      	pop	{r2}
   2e116:	4690      	mov	r8, r2
   2e118:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2e11a:	46c0      	nop			; (mov r8, r8)
   2e11c:	0002ece1 	.word	0x0002ece1
   2e120:	0002dfa9 	.word	0x0002dfa9
   2e124:	0002fab9 	.word	0x0002fab9

0002e128 <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
   2e128:	b580      	push	{r7, lr}
   2e12a:	b086      	sub	sp, #24
   2e12c:	af00      	add	r7, sp, #0
   2e12e:	6078      	str	r0, [r7, #4]
   2e130:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
   2e132:	687b      	ldr	r3, [r7, #4]
   2e134:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
   2e136:	683b      	ldr	r3, [r7, #0]
   2e138:	689b      	ldr	r3, [r3, #8]
   2e13a:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
   2e13c:	683b      	ldr	r3, [r7, #0]
   2e13e:	685b      	ldr	r3, [r3, #4]
   2e140:	001a      	movs	r2, r3
   2e142:	693b      	ldr	r3, [r7, #16]
   2e144:	189b      	adds	r3, r3, r2
   2e146:	60bb      	str	r3, [r7, #8]
    
    while (*curf && curn < curn_end)
   2e148:	e039      	b.n	2e1be <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
   2e14a:	693b      	ldr	r3, [r7, #16]
   2e14c:	781b      	ldrb	r3, [r3, #0]
   2e14e:	2b2f      	cmp	r3, #47	; 0x2f
   2e150:	d103      	bne.n	2e15a <isTopicMatched+0x32>
   2e152:	697b      	ldr	r3, [r7, #20]
   2e154:	781b      	ldrb	r3, [r3, #0]
   2e156:	2b2f      	cmp	r3, #47	; 0x2f
   2e158:	d13a      	bne.n	2e1d0 <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
   2e15a:	697b      	ldr	r3, [r7, #20]
   2e15c:	781b      	ldrb	r3, [r3, #0]
   2e15e:	2b2b      	cmp	r3, #43	; 0x2b
   2e160:	d009      	beq.n	2e176 <isTopicMatched+0x4e>
   2e162:	697b      	ldr	r3, [r7, #20]
   2e164:	781b      	ldrb	r3, [r3, #0]
   2e166:	2b23      	cmp	r3, #35	; 0x23
   2e168:	d005      	beq.n	2e176 <isTopicMatched+0x4e>
   2e16a:	697b      	ldr	r3, [r7, #20]
   2e16c:	781a      	ldrb	r2, [r3, #0]
   2e16e:	693b      	ldr	r3, [r7, #16]
   2e170:	781b      	ldrb	r3, [r3, #0]
   2e172:	429a      	cmp	r2, r3
   2e174:	d12e      	bne.n	2e1d4 <isTopicMatched+0xac>
            break;
        if (*curf == '+')
   2e176:	697b      	ldr	r3, [r7, #20]
   2e178:	781b      	ldrb	r3, [r3, #0]
   2e17a:	2b2b      	cmp	r3, #43	; 0x2b
   2e17c:	d112      	bne.n	2e1a4 <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
   2e17e:	693b      	ldr	r3, [r7, #16]
   2e180:	3301      	adds	r3, #1
   2e182:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   2e184:	e005      	b.n	2e192 <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
   2e186:	693b      	ldr	r3, [r7, #16]
   2e188:	3301      	adds	r3, #1
   2e18a:	613b      	str	r3, [r7, #16]
   2e18c:	693b      	ldr	r3, [r7, #16]
   2e18e:	3301      	adds	r3, #1
   2e190:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   2e192:	68fa      	ldr	r2, [r7, #12]
   2e194:	68bb      	ldr	r3, [r7, #8]
   2e196:	429a      	cmp	r2, r3
   2e198:	d20b      	bcs.n	2e1b2 <isTopicMatched+0x8a>
   2e19a:	68fb      	ldr	r3, [r7, #12]
   2e19c:	781b      	ldrb	r3, [r3, #0]
   2e19e:	2b2f      	cmp	r3, #47	; 0x2f
   2e1a0:	d1f1      	bne.n	2e186 <isTopicMatched+0x5e>
   2e1a2:	e006      	b.n	2e1b2 <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
   2e1a4:	697b      	ldr	r3, [r7, #20]
   2e1a6:	781b      	ldrb	r3, [r3, #0]
   2e1a8:	2b23      	cmp	r3, #35	; 0x23
   2e1aa:	d102      	bne.n	2e1b2 <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
   2e1ac:	68bb      	ldr	r3, [r7, #8]
   2e1ae:	3b01      	subs	r3, #1
   2e1b0:	613b      	str	r3, [r7, #16]
        curf++;
   2e1b2:	697b      	ldr	r3, [r7, #20]
   2e1b4:	3301      	adds	r3, #1
   2e1b6:	617b      	str	r3, [r7, #20]
        curn++;
   2e1b8:	693b      	ldr	r3, [r7, #16]
   2e1ba:	3301      	adds	r3, #1
   2e1bc:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
   2e1be:	697b      	ldr	r3, [r7, #20]
   2e1c0:	781b      	ldrb	r3, [r3, #0]
   2e1c2:	2b00      	cmp	r3, #0
   2e1c4:	d007      	beq.n	2e1d6 <isTopicMatched+0xae>
   2e1c6:	693a      	ldr	r2, [r7, #16]
   2e1c8:	68bb      	ldr	r3, [r7, #8]
   2e1ca:	429a      	cmp	r2, r3
   2e1cc:	d3bd      	bcc.n	2e14a <isTopicMatched+0x22>
   2e1ce:	e002      	b.n	2e1d6 <isTopicMatched+0xae>
            break;
   2e1d0:	46c0      	nop			; (mov r8, r8)
   2e1d2:	e000      	b.n	2e1d6 <isTopicMatched+0xae>
            break;
   2e1d4:	46c0      	nop			; (mov r8, r8)
    };
    
    return (curn == curn_end) && (*curf == '\0');
   2e1d6:	693a      	ldr	r2, [r7, #16]
   2e1d8:	68bb      	ldr	r3, [r7, #8]
   2e1da:	429a      	cmp	r2, r3
   2e1dc:	d105      	bne.n	2e1ea <isTopicMatched+0xc2>
   2e1de:	697b      	ldr	r3, [r7, #20]
   2e1e0:	781b      	ldrb	r3, [r3, #0]
   2e1e2:	2b00      	cmp	r3, #0
   2e1e4:	d101      	bne.n	2e1ea <isTopicMatched+0xc2>
   2e1e6:	2301      	movs	r3, #1
   2e1e8:	e000      	b.n	2e1ec <isTopicMatched+0xc4>
   2e1ea:	2300      	movs	r3, #0
   2e1ec:	b2db      	uxtb	r3, r3
}
   2e1ee:	0018      	movs	r0, r3
   2e1f0:	46bd      	mov	sp, r7
   2e1f2:	b006      	add	sp, #24
   2e1f4:	bd80      	pop	{r7, pc}
	...

0002e1f8 <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
   2e1f8:	b580      	push	{r7, lr}
   2e1fa:	b08a      	sub	sp, #40	; 0x28
   2e1fc:	af00      	add	r7, sp, #0
   2e1fe:	60f8      	str	r0, [r7, #12]
   2e200:	60b9      	str	r1, [r7, #8]
   2e202:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
   2e204:	2301      	movs	r3, #1
   2e206:	425b      	negs	r3, r3
   2e208:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2e20a:	2300      	movs	r3, #0
   2e20c:	627b      	str	r3, [r7, #36]	; 0x24
   2e20e:	e044      	b.n	2e29a <deliverMessage+0xa2>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   2e210:	68fa      	ldr	r2, [r7, #12]
   2e212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e214:	3304      	adds	r3, #4
   2e216:	00db      	lsls	r3, r3, #3
   2e218:	18d3      	adds	r3, r2, r3
   2e21a:	3304      	adds	r3, #4
   2e21c:	681b      	ldr	r3, [r3, #0]
   2e21e:	2b00      	cmp	r3, #0
   2e220:	d038      	beq.n	2e294 <deliverMessage+0x9c>
   2e222:	68fa      	ldr	r2, [r7, #12]
   2e224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e226:	3304      	adds	r3, #4
   2e228:	00db      	lsls	r3, r3, #3
   2e22a:	18d3      	adds	r3, r2, r3
   2e22c:	3304      	adds	r3, #4
   2e22e:	681a      	ldr	r2, [r3, #0]
   2e230:	68bb      	ldr	r3, [r7, #8]
   2e232:	0011      	movs	r1, r2
   2e234:	0018      	movs	r0, r3
   2e236:	4b28      	ldr	r3, [pc, #160]	; (2e2d8 <deliverMessage+0xe0>)
   2e238:	4798      	blx	r3
   2e23a:	1e03      	subs	r3, r0, #0
   2e23c:	d10d      	bne.n	2e25a <deliverMessage+0x62>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
   2e23e:	68fa      	ldr	r2, [r7, #12]
   2e240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e242:	3304      	adds	r3, #4
   2e244:	00db      	lsls	r3, r3, #3
   2e246:	18d3      	adds	r3, r2, r3
   2e248:	3304      	adds	r3, #4
   2e24a:	681b      	ldr	r3, [r3, #0]
   2e24c:	68ba      	ldr	r2, [r7, #8]
   2e24e:	0011      	movs	r1, r2
   2e250:	0018      	movs	r0, r3
   2e252:	4b22      	ldr	r3, [pc, #136]	; (2e2dc <deliverMessage+0xe4>)
   2e254:	4798      	blx	r3
   2e256:	1e03      	subs	r3, r0, #0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   2e258:	d01c      	beq.n	2e294 <deliverMessage+0x9c>
        {
            if (c->messageHandlers[i].fp != NULL)
   2e25a:	68fa      	ldr	r2, [r7, #12]
   2e25c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e25e:	3304      	adds	r3, #4
   2e260:	00db      	lsls	r3, r3, #3
   2e262:	18d3      	adds	r3, r2, r3
   2e264:	3308      	adds	r3, #8
   2e266:	681b      	ldr	r3, [r3, #0]
   2e268:	2b00      	cmp	r3, #0
   2e26a:	d013      	beq.n	2e294 <deliverMessage+0x9c>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
   2e26c:	687a      	ldr	r2, [r7, #4]
   2e26e:	68b9      	ldr	r1, [r7, #8]
   2e270:	2318      	movs	r3, #24
   2e272:	18fb      	adds	r3, r7, r3
   2e274:	0018      	movs	r0, r3
   2e276:	4b1a      	ldr	r3, [pc, #104]	; (2e2e0 <deliverMessage+0xe8>)
   2e278:	4798      	blx	r3
                c->messageHandlers[i].fp(&md);
   2e27a:	68fa      	ldr	r2, [r7, #12]
   2e27c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e27e:	3304      	adds	r3, #4
   2e280:	00db      	lsls	r3, r3, #3
   2e282:	18d3      	adds	r3, r2, r3
   2e284:	3308      	adds	r3, #8
   2e286:	681b      	ldr	r3, [r3, #0]
   2e288:	2218      	movs	r2, #24
   2e28a:	18ba      	adds	r2, r7, r2
   2e28c:	0010      	movs	r0, r2
   2e28e:	4798      	blx	r3
                rc = SUCCESS;
   2e290:	2300      	movs	r3, #0
   2e292:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2e294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e296:	3301      	adds	r3, #1
   2e298:	627b      	str	r3, [r7, #36]	; 0x24
   2e29a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e29c:	2b04      	cmp	r3, #4
   2e29e:	ddb7      	ble.n	2e210 <deliverMessage+0x18>
            }
        }
    }
    
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
   2e2a0:	6a3b      	ldr	r3, [r7, #32]
   2e2a2:	3301      	adds	r3, #1
   2e2a4:	d112      	bne.n	2e2cc <deliverMessage+0xd4>
   2e2a6:	68fb      	ldr	r3, [r7, #12]
   2e2a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2e2aa:	2b00      	cmp	r3, #0
   2e2ac:	d00e      	beq.n	2e2cc <deliverMessage+0xd4>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
   2e2ae:	687a      	ldr	r2, [r7, #4]
   2e2b0:	68b9      	ldr	r1, [r7, #8]
   2e2b2:	2310      	movs	r3, #16
   2e2b4:	18fb      	adds	r3, r7, r3
   2e2b6:	0018      	movs	r0, r3
   2e2b8:	4b09      	ldr	r3, [pc, #36]	; (2e2e0 <deliverMessage+0xe8>)
   2e2ba:	4798      	blx	r3
        c->defaultMessageHandler(&md);
   2e2bc:	68fb      	ldr	r3, [r7, #12]
   2e2be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2e2c0:	2210      	movs	r2, #16
   2e2c2:	18ba      	adds	r2, r7, r2
   2e2c4:	0010      	movs	r0, r2
   2e2c6:	4798      	blx	r3
        rc = SUCCESS;
   2e2c8:	2300      	movs	r3, #0
   2e2ca:	623b      	str	r3, [r7, #32]
    }   
    
    return rc;
   2e2cc:	6a3b      	ldr	r3, [r7, #32]
}
   2e2ce:	0018      	movs	r0, r3
   2e2d0:	46bd      	mov	sp, r7
   2e2d2:	b00a      	add	sp, #40	; 0x28
   2e2d4:	bd80      	pop	{r7, pc}
   2e2d6:	46c0      	nop			; (mov r8, r8)
   2e2d8:	0002fecd 	.word	0x0002fecd
   2e2dc:	0002e129 	.word	0x0002e129
   2e2e0:	0002de31 	.word	0x0002de31

0002e2e4 <keepalive>:


int keepalive(MQTTClient* c)
{
   2e2e4:	b580      	push	{r7, lr}
   2e2e6:	b088      	sub	sp, #32
   2e2e8:	af00      	add	r7, sp, #0
   2e2ea:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   2e2ec:	2301      	movs	r3, #1
   2e2ee:	425b      	negs	r3, r3
   2e2f0:	61fb      	str	r3, [r7, #28]

    if (c->keepAliveInterval == 0)
   2e2f2:	687b      	ldr	r3, [r7, #4]
   2e2f4:	699b      	ldr	r3, [r3, #24]
   2e2f6:	2b00      	cmp	r3, #0
   2e2f8:	d102      	bne.n	2e300 <keepalive+0x1c>
    {
        rc = SUCCESS;
   2e2fa:	2300      	movs	r3, #0
   2e2fc:	61fb      	str	r3, [r7, #28]
        goto exit;
   2e2fe:	e033      	b.n	2e368 <keepalive+0x84>
    }

    if (TimerIsExpired(&c->ping_timer))
   2e300:	687b      	ldr	r3, [r7, #4]
   2e302:	3354      	adds	r3, #84	; 0x54
   2e304:	0018      	movs	r0, r3
   2e306:	4b1b      	ldr	r3, [pc, #108]	; (2e374 <keepalive+0x90>)
   2e308:	4798      	blx	r3
   2e30a:	1e03      	subs	r3, r0, #0
   2e30c:	d02c      	beq.n	2e368 <keepalive+0x84>
    {
        if (!c->ping_outstanding)
   2e30e:	687b      	ldr	r3, [r7, #4]
   2e310:	7f1b      	ldrb	r3, [r3, #28]
   2e312:	2b00      	cmp	r3, #0
   2e314:	d128      	bne.n	2e368 <keepalive+0x84>
        {
            Timer timer;
            TimerInit(&timer);
   2e316:	230c      	movs	r3, #12
   2e318:	18fb      	adds	r3, r7, r3
   2e31a:	0018      	movs	r0, r3
   2e31c:	4b16      	ldr	r3, [pc, #88]	; (2e378 <keepalive+0x94>)
   2e31e:	4798      	blx	r3
            TimerCountdownMS(&timer, 1000);
   2e320:	23fa      	movs	r3, #250	; 0xfa
   2e322:	009a      	lsls	r2, r3, #2
   2e324:	230c      	movs	r3, #12
   2e326:	18fb      	adds	r3, r7, r3
   2e328:	0011      	movs	r1, r2
   2e32a:	0018      	movs	r0, r3
   2e32c:	4b13      	ldr	r3, [pc, #76]	; (2e37c <keepalive+0x98>)
   2e32e:	4798      	blx	r3
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
   2e330:	687b      	ldr	r3, [r7, #4]
   2e332:	691a      	ldr	r2, [r3, #16]
   2e334:	687b      	ldr	r3, [r7, #4]
   2e336:	689b      	ldr	r3, [r3, #8]
   2e338:	0019      	movs	r1, r3
   2e33a:	0010      	movs	r0, r2
   2e33c:	4b10      	ldr	r3, [pc, #64]	; (2e380 <keepalive+0x9c>)
   2e33e:	4798      	blx	r3
   2e340:	0003      	movs	r3, r0
   2e342:	61bb      	str	r3, [r7, #24]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESS) // send the ping packet
   2e344:	69bb      	ldr	r3, [r7, #24]
   2e346:	2b00      	cmp	r3, #0
   2e348:	dd0e      	ble.n	2e368 <keepalive+0x84>
   2e34a:	230c      	movs	r3, #12
   2e34c:	18fa      	adds	r2, r7, r3
   2e34e:	69b9      	ldr	r1, [r7, #24]
   2e350:	687b      	ldr	r3, [r7, #4]
   2e352:	0018      	movs	r0, r3
   2e354:	4b0b      	ldr	r3, [pc, #44]	; (2e384 <keepalive+0xa0>)
   2e356:	4798      	blx	r3
   2e358:	0003      	movs	r3, r0
   2e35a:	61fb      	str	r3, [r7, #28]
   2e35c:	69fb      	ldr	r3, [r7, #28]
   2e35e:	2b00      	cmp	r3, #0
   2e360:	d102      	bne.n	2e368 <keepalive+0x84>
                c->ping_outstanding = 1;
   2e362:	687b      	ldr	r3, [r7, #4]
   2e364:	2201      	movs	r2, #1
   2e366:	771a      	strb	r2, [r3, #28]
        }
    }

exit:
    return rc;
   2e368:	69fb      	ldr	r3, [r7, #28]
}
   2e36a:	0018      	movs	r0, r3
   2e36c:	46bd      	mov	sp, r7
   2e36e:	b008      	add	sp, #32
   2e370:	bd80      	pop	{r7, pc}
   2e372:	46c0      	nop			; (mov r8, r8)
   2e374:	0002ec65 	.word	0x0002ec65
   2e378:	0002ed09 	.word	0x0002ed09
   2e37c:	0002ec91 	.word	0x0002ec91
   2e380:	0002f8dd 	.word	0x0002f8dd
   2e384:	0002de81 	.word	0x0002de81

0002e388 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
   2e388:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e38a:	b095      	sub	sp, #84	; 0x54
   2e38c:	af06      	add	r7, sp, #24
   2e38e:	6078      	str	r0, [r7, #4]
   2e390:	6039      	str	r1, [r7, #0]
    // read the socket, see what work is due
    unsigned short packet_type = readPacket(c, timer);
   2e392:	683a      	ldr	r2, [r7, #0]
   2e394:	687b      	ldr	r3, [r7, #4]
   2e396:	0011      	movs	r1, r2
   2e398:	0018      	movs	r0, r3
   2e39a:	4b70      	ldr	r3, [pc, #448]	; (2e55c <cycle+0x1d4>)
   2e39c:	4798      	blx	r3
   2e39e:	0002      	movs	r2, r0
   2e3a0:	232e      	movs	r3, #46	; 0x2e
   2e3a2:	18fb      	adds	r3, r7, r3
   2e3a4:	801a      	strh	r2, [r3, #0]
    
    int len = 0,
   2e3a6:	2300      	movs	r3, #0
   2e3a8:	637b      	str	r3, [r7, #52]	; 0x34
        rc = SUCCESS;
   2e3aa:	2300      	movs	r3, #0
   2e3ac:	633b      	str	r3, [r7, #48]	; 0x30

    switch (packet_type)
   2e3ae:	232e      	movs	r3, #46	; 0x2e
   2e3b0:	18fb      	adds	r3, r7, r3
   2e3b2:	881b      	ldrh	r3, [r3, #0]
   2e3b4:	2b0d      	cmp	r3, #13
   2e3b6:	d900      	bls.n	2e3ba <cycle+0x32>
   2e3b8:	e0bd      	b.n	2e536 <cycle+0x1ae>
   2e3ba:	009a      	lsls	r2, r3, #2
   2e3bc:	4b68      	ldr	r3, [pc, #416]	; (2e560 <cycle+0x1d8>)
   2e3be:	18d3      	adds	r3, r2, r3
   2e3c0:	681b      	ldr	r3, [r3, #0]
   2e3c2:	469f      	mov	pc, r3
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   2e3c4:	687b      	ldr	r3, [r7, #4]
   2e3c6:	695a      	ldr	r2, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
   2e3c8:	687b      	ldr	r3, [r7, #4]
   2e3ca:	68db      	ldr	r3, [r3, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   2e3cc:	001e      	movs	r6, r3
   2e3ce:	2310      	movs	r3, #16
   2e3d0:	18fb      	adds	r3, r7, r3
   2e3d2:	1d1d      	adds	r5, r3, #4
   2e3d4:	2310      	movs	r3, #16
   2e3d6:	18fb      	adds	r3, r7, r3
   2e3d8:	1c5c      	adds	r4, r3, #1
   2e3da:	230c      	movs	r3, #12
   2e3dc:	18f9      	adds	r1, r7, r3
   2e3de:	2310      	movs	r3, #16
   2e3e0:	18fb      	adds	r3, r7, r3
   2e3e2:	1c98      	adds	r0, r3, #2
   2e3e4:	9604      	str	r6, [sp, #16]
   2e3e6:	9203      	str	r2, [sp, #12]
   2e3e8:	2310      	movs	r3, #16
   2e3ea:	18fb      	adds	r3, r7, r3
   2e3ec:	330c      	adds	r3, #12
   2e3ee:	9302      	str	r3, [sp, #8]
   2e3f0:	2310      	movs	r3, #16
   2e3f2:	18fb      	adds	r3, r7, r3
   2e3f4:	3308      	adds	r3, #8
   2e3f6:	9301      	str	r3, [sp, #4]
   2e3f8:	2320      	movs	r3, #32
   2e3fa:	18fb      	adds	r3, r7, r3
   2e3fc:	9300      	str	r3, [sp, #0]
   2e3fe:	002b      	movs	r3, r5
   2e400:	0022      	movs	r2, r4
   2e402:	4c58      	ldr	r4, [pc, #352]	; (2e564 <cycle+0x1dc>)
   2e404:	47a0      	blx	r4
   2e406:	0003      	movs	r3, r0
   2e408:	2b01      	cmp	r3, #1
   2e40a:	d000      	beq.n	2e40e <cycle+0x86>
   2e40c:	e098      	b.n	2e540 <cycle+0x1b8>
                goto exit;
            msg.qos = (enum QoS)intQoS;
   2e40e:	68fb      	ldr	r3, [r7, #12]
   2e410:	b2da      	uxtb	r2, r3
   2e412:	2310      	movs	r3, #16
   2e414:	18fb      	adds	r3, r7, r3
   2e416:	701a      	strb	r2, [r3, #0]
            deliverMessage(c, &topicName, &msg);
   2e418:	2310      	movs	r3, #16
   2e41a:	18fa      	adds	r2, r7, r3
   2e41c:	2320      	movs	r3, #32
   2e41e:	18f9      	adds	r1, r7, r3
   2e420:	687b      	ldr	r3, [r7, #4]
   2e422:	0018      	movs	r0, r3
   2e424:	4b50      	ldr	r3, [pc, #320]	; (2e568 <cycle+0x1e0>)
   2e426:	4798      	blx	r3
            if (msg.qos != QOS0)
   2e428:	2310      	movs	r3, #16
   2e42a:	18fb      	adds	r3, r7, r3
   2e42c:	781b      	ldrb	r3, [r3, #0]
   2e42e:	2b00      	cmp	r3, #0
   2e430:	d100      	bne.n	2e434 <cycle+0xac>
   2e432:	e07d      	b.n	2e530 <cycle+0x1a8>
            {
                if (msg.qos == QOS1)
   2e434:	2310      	movs	r3, #16
   2e436:	18fb      	adds	r3, r7, r3
   2e438:	781b      	ldrb	r3, [r3, #0]
   2e43a:	2b01      	cmp	r3, #1
   2e43c:	d10f      	bne.n	2e45e <cycle+0xd6>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
   2e43e:	687b      	ldr	r3, [r7, #4]
   2e440:	6918      	ldr	r0, [r3, #16]
   2e442:	687b      	ldr	r3, [r7, #4]
   2e444:	689b      	ldr	r3, [r3, #8]
   2e446:	0019      	movs	r1, r3
   2e448:	2310      	movs	r3, #16
   2e44a:	18fb      	adds	r3, r7, r3
   2e44c:	889b      	ldrh	r3, [r3, #4]
   2e44e:	9300      	str	r3, [sp, #0]
   2e450:	2300      	movs	r3, #0
   2e452:	2204      	movs	r2, #4
   2e454:	4c45      	ldr	r4, [pc, #276]	; (2e56c <cycle+0x1e4>)
   2e456:	47a0      	blx	r4
   2e458:	0003      	movs	r3, r0
   2e45a:	637b      	str	r3, [r7, #52]	; 0x34
   2e45c:	e013      	b.n	2e486 <cycle+0xfe>
                else if (msg.qos == QOS2)
   2e45e:	2310      	movs	r3, #16
   2e460:	18fb      	adds	r3, r7, r3
   2e462:	781b      	ldrb	r3, [r3, #0]
   2e464:	2b02      	cmp	r3, #2
   2e466:	d10e      	bne.n	2e486 <cycle+0xfe>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
   2e468:	687b      	ldr	r3, [r7, #4]
   2e46a:	6918      	ldr	r0, [r3, #16]
   2e46c:	687b      	ldr	r3, [r7, #4]
   2e46e:	689b      	ldr	r3, [r3, #8]
   2e470:	0019      	movs	r1, r3
   2e472:	2310      	movs	r3, #16
   2e474:	18fb      	adds	r3, r7, r3
   2e476:	889b      	ldrh	r3, [r3, #4]
   2e478:	9300      	str	r3, [sp, #0]
   2e47a:	2300      	movs	r3, #0
   2e47c:	2205      	movs	r2, #5
   2e47e:	4c3b      	ldr	r4, [pc, #236]	; (2e56c <cycle+0x1e4>)
   2e480:	47a0      	blx	r4
   2e482:	0003      	movs	r3, r0
   2e484:	637b      	str	r3, [r7, #52]	; 0x34
                if (len <= 0)
   2e486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2e488:	2b00      	cmp	r3, #0
   2e48a:	dc03      	bgt.n	2e494 <cycle+0x10c>
                    rc = FAILURE;
   2e48c:	2301      	movs	r3, #1
   2e48e:	425b      	negs	r3, r3
   2e490:	633b      	str	r3, [r7, #48]	; 0x30
   2e492:	e007      	b.n	2e4a4 <cycle+0x11c>
                else
                    rc = sendPacket(c, len, timer);
   2e494:	683a      	ldr	r2, [r7, #0]
   2e496:	6b79      	ldr	r1, [r7, #52]	; 0x34
   2e498:	687b      	ldr	r3, [r7, #4]
   2e49a:	0018      	movs	r0, r3
   2e49c:	4b34      	ldr	r3, [pc, #208]	; (2e570 <cycle+0x1e8>)
   2e49e:	4798      	blx	r3
   2e4a0:	0003      	movs	r3, r0
   2e4a2:	633b      	str	r3, [r7, #48]	; 0x30
                if (rc == FAILURE)
   2e4a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2e4a6:	3301      	adds	r3, #1
   2e4a8:	d142      	bne.n	2e530 <cycle+0x1a8>
                    goto exit; // there was a problem
   2e4aa:	46c0      	nop			; (mov r8, r8)
   2e4ac:	e049      	b.n	2e542 <cycle+0x1ba>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2e4ae:	687b      	ldr	r3, [r7, #4]
   2e4b0:	695c      	ldr	r4, [r3, #20]
   2e4b2:	687b      	ldr	r3, [r7, #4]
   2e4b4:	68db      	ldr	r3, [r3, #12]
   2e4b6:	220a      	movs	r2, #10
   2e4b8:	18ba      	adds	r2, r7, r2
   2e4ba:	2109      	movs	r1, #9
   2e4bc:	1879      	adds	r1, r7, r1
   2e4be:	2008      	movs	r0, #8
   2e4c0:	1838      	adds	r0, r7, r0
   2e4c2:	9300      	str	r3, [sp, #0]
   2e4c4:	0023      	movs	r3, r4
   2e4c6:	4c2b      	ldr	r4, [pc, #172]	; (2e574 <cycle+0x1ec>)
   2e4c8:	47a0      	blx	r4
   2e4ca:	0003      	movs	r3, r0
   2e4cc:	2b01      	cmp	r3, #1
   2e4ce:	d003      	beq.n	2e4d8 <cycle+0x150>
                rc = FAILURE;
   2e4d0:	2301      	movs	r3, #1
   2e4d2:	425b      	negs	r3, r3
   2e4d4:	633b      	str	r3, [r7, #48]	; 0x30
   2e4d6:	e023      	b.n	2e520 <cycle+0x198>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
   2e4d8:	687b      	ldr	r3, [r7, #4]
   2e4da:	6918      	ldr	r0, [r3, #16]
   2e4dc:	687b      	ldr	r3, [r7, #4]
   2e4de:	689b      	ldr	r3, [r3, #8]
   2e4e0:	0019      	movs	r1, r3
   2e4e2:	230a      	movs	r3, #10
   2e4e4:	18fb      	adds	r3, r7, r3
   2e4e6:	881b      	ldrh	r3, [r3, #0]
   2e4e8:	9300      	str	r3, [sp, #0]
   2e4ea:	2300      	movs	r3, #0
   2e4ec:	2206      	movs	r2, #6
   2e4ee:	4c1f      	ldr	r4, [pc, #124]	; (2e56c <cycle+0x1e4>)
   2e4f0:	47a0      	blx	r4
   2e4f2:	0003      	movs	r3, r0
   2e4f4:	637b      	str	r3, [r7, #52]	; 0x34
   2e4f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2e4f8:	2b00      	cmp	r3, #0
   2e4fa:	dc03      	bgt.n	2e504 <cycle+0x17c>
                rc = FAILURE;
   2e4fc:	2301      	movs	r3, #1
   2e4fe:	425b      	negs	r3, r3
   2e500:	633b      	str	r3, [r7, #48]	; 0x30
   2e502:	e00d      	b.n	2e520 <cycle+0x198>
            else if ((rc = sendPacket(c, len, timer)) != SUCCESS) // send the PUBREL packet
   2e504:	683a      	ldr	r2, [r7, #0]
   2e506:	6b79      	ldr	r1, [r7, #52]	; 0x34
   2e508:	687b      	ldr	r3, [r7, #4]
   2e50a:	0018      	movs	r0, r3
   2e50c:	4b18      	ldr	r3, [pc, #96]	; (2e570 <cycle+0x1e8>)
   2e50e:	4798      	blx	r3
   2e510:	0003      	movs	r3, r0
   2e512:	633b      	str	r3, [r7, #48]	; 0x30
   2e514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2e516:	2b00      	cmp	r3, #0
   2e518:	d002      	beq.n	2e520 <cycle+0x198>
                rc = FAILURE; // there was a problem
   2e51a:	2301      	movs	r3, #1
   2e51c:	425b      	negs	r3, r3
   2e51e:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
   2e520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2e522:	3301      	adds	r3, #1
   2e524:	d106      	bne.n	2e534 <cycle+0x1ac>
                goto exit; // there was a problem
   2e526:	e00c      	b.n	2e542 <cycle+0x1ba>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
   2e528:	687b      	ldr	r3, [r7, #4]
   2e52a:	2200      	movs	r2, #0
   2e52c:	771a      	strb	r2, [r3, #28]
            break;
   2e52e:	e002      	b.n	2e536 <cycle+0x1ae>
            break;
   2e530:	46c0      	nop			; (mov r8, r8)
   2e532:	e000      	b.n	2e536 <cycle+0x1ae>
            break;
   2e534:	46c0      	nop			; (mov r8, r8)
    }
    keepalive(c);
   2e536:	687b      	ldr	r3, [r7, #4]
   2e538:	0018      	movs	r0, r3
   2e53a:	4b0f      	ldr	r3, [pc, #60]	; (2e578 <cycle+0x1f0>)
   2e53c:	4798      	blx	r3
   2e53e:	e000      	b.n	2e542 <cycle+0x1ba>
                goto exit;
   2e540:	46c0      	nop			; (mov r8, r8)
exit:
    if (rc == SUCCESS)
   2e542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2e544:	2b00      	cmp	r3, #0
   2e546:	d103      	bne.n	2e550 <cycle+0x1c8>
        rc = packet_type;
   2e548:	232e      	movs	r3, #46	; 0x2e
   2e54a:	18fb      	adds	r3, r7, r3
   2e54c:	881b      	ldrh	r3, [r3, #0]
   2e54e:	633b      	str	r3, [r7, #48]	; 0x30
    return rc;
   2e550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
   2e552:	0018      	movs	r0, r3
   2e554:	46bd      	mov	sp, r7
   2e556:	b00f      	add	sp, #60	; 0x3c
   2e558:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2e55a:	46c0      	nop			; (mov r8, r8)
   2e55c:	0002e03d 	.word	0x0002e03d
   2e560:	0003a550 	.word	0x0003a550
   2e564:	0002f901 	.word	0x0002f901
   2e568:	0002e1f9 	.word	0x0002e1f9
   2e56c:	000300f9 	.word	0x000300f9
   2e570:	0002de81 	.word	0x0002de81
   2e574:	0002fa05 	.word	0x0002fa05
   2e578:	0002e2e5 	.word	0x0002e2e5

0002e57c <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
   2e57c:	b580      	push	{r7, lr}
   2e57e:	b086      	sub	sp, #24
   2e580:	af00      	add	r7, sp, #0
   2e582:	6078      	str	r0, [r7, #4]
   2e584:	6039      	str	r1, [r7, #0]
    int rc = SUCCESS;
   2e586:	2300      	movs	r3, #0
   2e588:	617b      	str	r3, [r7, #20]
    Timer timer;

    TimerInit(&timer);
   2e58a:	2308      	movs	r3, #8
   2e58c:	18fb      	adds	r3, r7, r3
   2e58e:	0018      	movs	r0, r3
   2e590:	4b11      	ldr	r3, [pc, #68]	; (2e5d8 <MQTTYield+0x5c>)
   2e592:	4798      	blx	r3
    TimerCountdownMS(&timer, timeout_ms);
   2e594:	683a      	ldr	r2, [r7, #0]
   2e596:	2308      	movs	r3, #8
   2e598:	18fb      	adds	r3, r7, r3
   2e59a:	0011      	movs	r1, r2
   2e59c:	0018      	movs	r0, r3
   2e59e:	4b0f      	ldr	r3, [pc, #60]	; (2e5dc <MQTTYield+0x60>)
   2e5a0:	4798      	blx	r3

	do
    {
        if (cycle(c, &timer) == FAILURE)
   2e5a2:	2308      	movs	r3, #8
   2e5a4:	18fa      	adds	r2, r7, r3
   2e5a6:	687b      	ldr	r3, [r7, #4]
   2e5a8:	0011      	movs	r1, r2
   2e5aa:	0018      	movs	r0, r3
   2e5ac:	4b0c      	ldr	r3, [pc, #48]	; (2e5e0 <MQTTYield+0x64>)
   2e5ae:	4798      	blx	r3
   2e5b0:	0003      	movs	r3, r0
   2e5b2:	3301      	adds	r3, #1
   2e5b4:	d103      	bne.n	2e5be <MQTTYield+0x42>
        {
            rc = FAILURE;
   2e5b6:	2301      	movs	r3, #1
   2e5b8:	425b      	negs	r3, r3
   2e5ba:	617b      	str	r3, [r7, #20]
            break;
   2e5bc:	e006      	b.n	2e5cc <MQTTYield+0x50>
        }
	} while (!TimerIsExpired(&timer));
   2e5be:	2308      	movs	r3, #8
   2e5c0:	18fb      	adds	r3, r7, r3
   2e5c2:	0018      	movs	r0, r3
   2e5c4:	4b07      	ldr	r3, [pc, #28]	; (2e5e4 <MQTTYield+0x68>)
   2e5c6:	4798      	blx	r3
   2e5c8:	1e03      	subs	r3, r0, #0
   2e5ca:	d0ea      	beq.n	2e5a2 <MQTTYield+0x26>
        
    return rc;
   2e5cc:	697b      	ldr	r3, [r7, #20]
}
   2e5ce:	0018      	movs	r0, r3
   2e5d0:	46bd      	mov	sp, r7
   2e5d2:	b006      	add	sp, #24
   2e5d4:	bd80      	pop	{r7, pc}
   2e5d6:	46c0      	nop			; (mov r8, r8)
   2e5d8:	0002ed09 	.word	0x0002ed09
   2e5dc:	0002ec91 	.word	0x0002ec91
   2e5e0:	0002e389 	.word	0x0002e389
   2e5e4:	0002ec65 	.word	0x0002ec65

0002e5e8 <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
   2e5e8:	b580      	push	{r7, lr}
   2e5ea:	b086      	sub	sp, #24
   2e5ec:	af00      	add	r7, sp, #0
   2e5ee:	60f8      	str	r0, [r7, #12]
   2e5f0:	60b9      	str	r1, [r7, #8]
   2e5f2:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   2e5f4:	2301      	movs	r3, #1
   2e5f6:	425b      	negs	r3, r3
   2e5f8:	617b      	str	r3, [r7, #20]
    
    do
    {
        if (TimerIsExpired(timer))
   2e5fa:	687b      	ldr	r3, [r7, #4]
   2e5fc:	0018      	movs	r0, r3
   2e5fe:	4b0b      	ldr	r3, [pc, #44]	; (2e62c <waitfor+0x44>)
   2e600:	4798      	blx	r3
   2e602:	1e03      	subs	r3, r0, #0
   2e604:	d10c      	bne.n	2e620 <waitfor+0x38>
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);  
   2e606:	687a      	ldr	r2, [r7, #4]
   2e608:	68fb      	ldr	r3, [r7, #12]
   2e60a:	0011      	movs	r1, r2
   2e60c:	0018      	movs	r0, r3
   2e60e:	4b08      	ldr	r3, [pc, #32]	; (2e630 <waitfor+0x48>)
   2e610:	4798      	blx	r3
   2e612:	0003      	movs	r3, r0
   2e614:	617b      	str	r3, [r7, #20]
   2e616:	697a      	ldr	r2, [r7, #20]
   2e618:	68bb      	ldr	r3, [r7, #8]
   2e61a:	429a      	cmp	r2, r3
   2e61c:	d1ed      	bne.n	2e5fa <waitfor+0x12>
   2e61e:	e000      	b.n	2e622 <waitfor+0x3a>
            break; // we timed out
   2e620:	46c0      	nop			; (mov r8, r8)
    
    return rc;
   2e622:	697b      	ldr	r3, [r7, #20]
}
   2e624:	0018      	movs	r0, r3
   2e626:	46bd      	mov	sp, r7
   2e628:	b006      	add	sp, #24
   2e62a:	bd80      	pop	{r7, pc}
   2e62c:	0002ec65 	.word	0x0002ec65
   2e630:	0002e389 	.word	0x0002e389

0002e634 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
   2e634:	b590      	push	{r4, r7, lr}
   2e636:	b09f      	sub	sp, #124	; 0x7c
   2e638:	af00      	add	r7, sp, #0
   2e63a:	6078      	str	r0, [r7, #4]
   2e63c:	6039      	str	r1, [r7, #0]
    Timer connect_timer;
    int rc = FAILURE;
   2e63e:	2301      	movs	r3, #1
   2e640:	425b      	negs	r3, r3
   2e642:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
   2e644:	230c      	movs	r3, #12
   2e646:	18fa      	adds	r2, r7, r3
   2e648:	4b41      	ldr	r3, [pc, #260]	; (2e750 <MQTTConnect+0x11c>)
   2e64a:	0010      	movs	r0, r2
   2e64c:	0019      	movs	r1, r3
   2e64e:	2358      	movs	r3, #88	; 0x58
   2e650:	001a      	movs	r2, r3
   2e652:	4b40      	ldr	r3, [pc, #256]	; (2e754 <MQTTConnect+0x120>)
   2e654:	4798      	blx	r3
    int len = 0;
   2e656:	2300      	movs	r3, #0
   2e658:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
   2e65a:	687b      	ldr	r3, [r7, #4]
   2e65c:	6a1b      	ldr	r3, [r3, #32]
   2e65e:	2b00      	cmp	r3, #0
   2e660:	d166      	bne.n	2e730 <MQTTConnect+0xfc>
		goto exit;
    
    TimerInit(&connect_timer);
   2e662:	2364      	movs	r3, #100	; 0x64
   2e664:	18fb      	adds	r3, r7, r3
   2e666:	0018      	movs	r0, r3
   2e668:	4b3b      	ldr	r3, [pc, #236]	; (2e758 <MQTTConnect+0x124>)
   2e66a:	4798      	blx	r3
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
   2e66c:	687b      	ldr	r3, [r7, #4]
   2e66e:	685a      	ldr	r2, [r3, #4]
   2e670:	2364      	movs	r3, #100	; 0x64
   2e672:	18fb      	adds	r3, r7, r3
   2e674:	0011      	movs	r1, r2
   2e676:	0018      	movs	r0, r3
   2e678:	4b38      	ldr	r3, [pc, #224]	; (2e75c <MQTTConnect+0x128>)
   2e67a:	4798      	blx	r3

    if (options == 0)
   2e67c:	683b      	ldr	r3, [r7, #0]
   2e67e:	2b00      	cmp	r3, #0
   2e680:	d102      	bne.n	2e688 <MQTTConnect+0x54>
        options = &default_options; /* set default options if none were supplied */
   2e682:	230c      	movs	r3, #12
   2e684:	18fb      	adds	r3, r7, r3
   2e686:	603b      	str	r3, [r7, #0]
    
    c->keepAliveInterval = options->keepAliveInterval;
   2e688:	683b      	ldr	r3, [r7, #0]
   2e68a:	8b1b      	ldrh	r3, [r3, #24]
   2e68c:	001a      	movs	r2, r3
   2e68e:	687b      	ldr	r3, [r7, #4]
   2e690:	619a      	str	r2, [r3, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
   2e692:	687b      	ldr	r3, [r7, #4]
   2e694:	3354      	adds	r3, #84	; 0x54
   2e696:	001a      	movs	r2, r3
   2e698:	687b      	ldr	r3, [r7, #4]
   2e69a:	699b      	ldr	r3, [r3, #24]
   2e69c:	0019      	movs	r1, r3
   2e69e:	0010      	movs	r0, r2
   2e6a0:	4b2f      	ldr	r3, [pc, #188]	; (2e760 <MQTTConnect+0x12c>)
   2e6a2:	4798      	blx	r3
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
   2e6a4:	687b      	ldr	r3, [r7, #4]
   2e6a6:	6918      	ldr	r0, [r3, #16]
   2e6a8:	687b      	ldr	r3, [r7, #4]
   2e6aa:	689b      	ldr	r3, [r3, #8]
   2e6ac:	0019      	movs	r1, r3
   2e6ae:	683b      	ldr	r3, [r7, #0]
   2e6b0:	001a      	movs	r2, r3
   2e6b2:	4b2c      	ldr	r3, [pc, #176]	; (2e764 <MQTTConnect+0x130>)
   2e6b4:	4798      	blx	r3
   2e6b6:	0003      	movs	r3, r0
   2e6b8:	673b      	str	r3, [r7, #112]	; 0x70
   2e6ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2e6bc:	2b00      	cmp	r3, #0
   2e6be:	dd39      	ble.n	2e734 <MQTTConnect+0x100>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESS)  // send the connect packet
   2e6c0:	2364      	movs	r3, #100	; 0x64
   2e6c2:	18fa      	adds	r2, r7, r3
   2e6c4:	6f39      	ldr	r1, [r7, #112]	; 0x70
   2e6c6:	687b      	ldr	r3, [r7, #4]
   2e6c8:	0018      	movs	r0, r3
   2e6ca:	4b27      	ldr	r3, [pc, #156]	; (2e768 <MQTTConnect+0x134>)
   2e6cc:	4798      	blx	r3
   2e6ce:	0003      	movs	r3, r0
   2e6d0:	677b      	str	r3, [r7, #116]	; 0x74
   2e6d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2e6d4:	2b00      	cmp	r3, #0
   2e6d6:	d12f      	bne.n	2e738 <MQTTConnect+0x104>
        goto exit; // there was a problem
    
    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
   2e6d8:	2364      	movs	r3, #100	; 0x64
   2e6da:	18fa      	adds	r2, r7, r3
   2e6dc:	687b      	ldr	r3, [r7, #4]
   2e6de:	2102      	movs	r1, #2
   2e6e0:	0018      	movs	r0, r3
   2e6e2:	4b22      	ldr	r3, [pc, #136]	; (2e76c <MQTTConnect+0x138>)
   2e6e4:	4798      	blx	r3
   2e6e6:	0003      	movs	r3, r0
   2e6e8:	2b02      	cmp	r3, #2
   2e6ea:	d11d      	bne.n	2e728 <MQTTConnect+0xf4>
    {
        unsigned char connack_rc = 255;
   2e6ec:	230b      	movs	r3, #11
   2e6ee:	18fb      	adds	r3, r7, r3
   2e6f0:	22ff      	movs	r2, #255	; 0xff
   2e6f2:	701a      	strb	r2, [r3, #0]
        unsigned char sessionPresent = 0;
   2e6f4:	230a      	movs	r3, #10
   2e6f6:	18fb      	adds	r3, r7, r3
   2e6f8:	2200      	movs	r2, #0
   2e6fa:	701a      	strb	r2, [r3, #0]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
   2e6fc:	687b      	ldr	r3, [r7, #4]
   2e6fe:	695a      	ldr	r2, [r3, #20]
   2e700:	687b      	ldr	r3, [r7, #4]
   2e702:	68db      	ldr	r3, [r3, #12]
   2e704:	210b      	movs	r1, #11
   2e706:	1879      	adds	r1, r7, r1
   2e708:	200a      	movs	r0, #10
   2e70a:	1838      	adds	r0, r7, r0
   2e70c:	4c18      	ldr	r4, [pc, #96]	; (2e770 <MQTTConnect+0x13c>)
   2e70e:	47a0      	blx	r4
   2e710:	0003      	movs	r3, r0
   2e712:	2b01      	cmp	r3, #1
   2e714:	d104      	bne.n	2e720 <MQTTConnect+0xec>
            rc = connack_rc;
   2e716:	230b      	movs	r3, #11
   2e718:	18fb      	adds	r3, r7, r3
   2e71a:	781b      	ldrb	r3, [r3, #0]
   2e71c:	677b      	str	r3, [r7, #116]	; 0x74
   2e71e:	e00c      	b.n	2e73a <MQTTConnect+0x106>
        else
            rc = FAILURE;
   2e720:	2301      	movs	r3, #1
   2e722:	425b      	negs	r3, r3
   2e724:	677b      	str	r3, [r7, #116]	; 0x74
   2e726:	e008      	b.n	2e73a <MQTTConnect+0x106>
    }
    else
        rc = FAILURE;
   2e728:	2301      	movs	r3, #1
   2e72a:	425b      	negs	r3, r3
   2e72c:	677b      	str	r3, [r7, #116]	; 0x74
   2e72e:	e004      	b.n	2e73a <MQTTConnect+0x106>
		goto exit;
   2e730:	46c0      	nop			; (mov r8, r8)
   2e732:	e002      	b.n	2e73a <MQTTConnect+0x106>
        goto exit;
   2e734:	46c0      	nop			; (mov r8, r8)
   2e736:	e000      	b.n	2e73a <MQTTConnect+0x106>
        goto exit; // there was a problem
   2e738:	46c0      	nop			; (mov r8, r8)
    
exit:
    if (rc == SUCCESS)
   2e73a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2e73c:	2b00      	cmp	r3, #0
   2e73e:	d102      	bne.n	2e746 <MQTTConnect+0x112>
        c->isconnected = 1;
   2e740:	687b      	ldr	r3, [r7, #4]
   2e742:	2201      	movs	r2, #1
   2e744:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
   2e746:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
   2e748:	0018      	movs	r0, r3
   2e74a:	46bd      	mov	sp, r7
   2e74c:	b01f      	add	sp, #124	; 0x7c
   2e74e:	bd90      	pop	{r4, r7, pc}
   2e750:	0003a588 	.word	0x0003a588
   2e754:	0003404d 	.word	0x0003404d
   2e758:	0002ed09 	.word	0x0002ed09
   2e75c:	0002ec91 	.word	0x0002ec91
   2e760:	0002ecb9 	.word	0x0002ecb9
   2e764:	0002f4e5 	.word	0x0002f4e5
   2e768:	0002de81 	.word	0x0002de81
   2e76c:	0002e5e9 	.word	0x0002e5e9
   2e770:	0002f761 	.word	0x0002f761

0002e774 <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler msgHandler)
{ 
   2e774:	b5b0      	push	{r4, r5, r7, lr}
   2e776:	b096      	sub	sp, #88	; 0x58
   2e778:	af04      	add	r7, sp, #16
   2e77a:	60f8      	str	r0, [r7, #12]
   2e77c:	60b9      	str	r1, [r7, #8]
   2e77e:	603b      	str	r3, [r7, #0]
   2e780:	1dfb      	adds	r3, r7, #7
   2e782:	701a      	strb	r2, [r3, #0]
    int rc = FAILURE;  
   2e784:	2301      	movs	r3, #1
   2e786:	425b      	negs	r3, r3
   2e788:	647b      	str	r3, [r7, #68]	; 0x44
    Timer timer;
    int len = 0;
   2e78a:	2300      	movs	r3, #0
   2e78c:	63fb      	str	r3, [r7, #60]	; 0x3c
    MQTTString topic = MQTTString_initializer;
   2e78e:	2324      	movs	r3, #36	; 0x24
   2e790:	18fb      	adds	r3, r7, r3
   2e792:	2200      	movs	r2, #0
   2e794:	601a      	str	r2, [r3, #0]
   2e796:	2324      	movs	r3, #36	; 0x24
   2e798:	18fb      	adds	r3, r7, r3
   2e79a:	2200      	movs	r2, #0
   2e79c:	605a      	str	r2, [r3, #4]
   2e79e:	2324      	movs	r3, #36	; 0x24
   2e7a0:	18fb      	adds	r3, r7, r3
   2e7a2:	2200      	movs	r2, #0
   2e7a4:	609a      	str	r2, [r3, #8]
	int Qoss = (int) qos;
   2e7a6:	1dfb      	adds	r3, r7, #7
   2e7a8:	781b      	ldrb	r3, [r3, #0]
   2e7aa:	623b      	str	r3, [r7, #32]
    topic.cstring = (char *)topicFilter;
   2e7ac:	2324      	movs	r3, #36	; 0x24
   2e7ae:	18fb      	adds	r3, r7, r3
   2e7b0:	68ba      	ldr	r2, [r7, #8]
   2e7b2:	601a      	str	r2, [r3, #0]
    
#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   2e7b4:	68fb      	ldr	r3, [r7, #12]
   2e7b6:	6a1b      	ldr	r3, [r3, #32]
   2e7b8:	2b00      	cmp	r3, #0
   2e7ba:	d100      	bne.n	2e7be <MQTTSubscribe+0x4a>
   2e7bc:	e088      	b.n	2e8d0 <MQTTSubscribe+0x15c>
		goto exit;

    TimerInit(&timer);
   2e7be:	2330      	movs	r3, #48	; 0x30
   2e7c0:	18fb      	adds	r3, r7, r3
   2e7c2:	0018      	movs	r0, r3
   2e7c4:	4b47      	ldr	r3, [pc, #284]	; (2e8e4 <MQTTSubscribe+0x170>)
   2e7c6:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2e7c8:	68fb      	ldr	r3, [r7, #12]
   2e7ca:	685a      	ldr	r2, [r3, #4]
   2e7cc:	2330      	movs	r3, #48	; 0x30
   2e7ce:	18fb      	adds	r3, r7, r3
   2e7d0:	0011      	movs	r1, r2
   2e7d2:	0018      	movs	r0, r3
   2e7d4:	4b44      	ldr	r3, [pc, #272]	; (2e8e8 <MQTTSubscribe+0x174>)
   2e7d6:	4798      	blx	r3
    
	len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&Qoss);
   2e7d8:	68fb      	ldr	r3, [r7, #12]
   2e7da:	691c      	ldr	r4, [r3, #16]
   2e7dc:	68fb      	ldr	r3, [r7, #12]
   2e7de:	689b      	ldr	r3, [r3, #8]
   2e7e0:	001d      	movs	r5, r3
   2e7e2:	68fb      	ldr	r3, [r7, #12]
   2e7e4:	0018      	movs	r0, r3
   2e7e6:	4b41      	ldr	r3, [pc, #260]	; (2e8ec <MQTTSubscribe+0x178>)
   2e7e8:	4798      	blx	r3
   2e7ea:	0003      	movs	r3, r0
   2e7ec:	b29a      	uxth	r2, r3
   2e7ee:	2320      	movs	r3, #32
   2e7f0:	18fb      	adds	r3, r7, r3
   2e7f2:	9302      	str	r3, [sp, #8]
   2e7f4:	2324      	movs	r3, #36	; 0x24
   2e7f6:	18fb      	adds	r3, r7, r3
   2e7f8:	9301      	str	r3, [sp, #4]
   2e7fa:	2301      	movs	r3, #1
   2e7fc:	9300      	str	r3, [sp, #0]
   2e7fe:	0013      	movs	r3, r2
   2e800:	2200      	movs	r2, #0
   2e802:	0029      	movs	r1, r5
   2e804:	0020      	movs	r0, r4
   2e806:	4c3a      	ldr	r4, [pc, #232]	; (2e8f0 <MQTTSubscribe+0x17c>)
   2e808:	47a0      	blx	r4
   2e80a:	0003      	movs	r3, r0
   2e80c:	63fb      	str	r3, [r7, #60]	; 0x3c
 //   len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, qos);
    if (len <= 0)
   2e80e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2e810:	2b00      	cmp	r3, #0
   2e812:	dd5f      	ble.n	2e8d4 <MQTTSubscribe+0x160>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   2e814:	2330      	movs	r3, #48	; 0x30
   2e816:	18fa      	adds	r2, r7, r3
   2e818:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   2e81a:	68fb      	ldr	r3, [r7, #12]
   2e81c:	0018      	movs	r0, r3
   2e81e:	4b35      	ldr	r3, [pc, #212]	; (2e8f4 <MQTTSubscribe+0x180>)
   2e820:	4798      	blx	r3
   2e822:	0003      	movs	r3, r0
   2e824:	647b      	str	r3, [r7, #68]	; 0x44
   2e826:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   2e828:	2b00      	cmp	r3, #0
   2e82a:	d155      	bne.n	2e8d8 <MQTTSubscribe+0x164>
        goto exit;             // there was a problem
    
    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback 
   2e82c:	2330      	movs	r3, #48	; 0x30
   2e82e:	18fa      	adds	r2, r7, r3
   2e830:	68fb      	ldr	r3, [r7, #12]
   2e832:	2109      	movs	r1, #9
   2e834:	0018      	movs	r0, r3
   2e836:	4b30      	ldr	r3, [pc, #192]	; (2e8f8 <MQTTSubscribe+0x184>)
   2e838:	4798      	blx	r3
   2e83a:	0003      	movs	r3, r0
   2e83c:	2b09      	cmp	r3, #9
   2e83e:	d143      	bne.n	2e8c8 <MQTTSubscribe+0x154>
    {
        int count = 0, grantedQoS = -1;
   2e840:	2300      	movs	r3, #0
   2e842:	61fb      	str	r3, [r7, #28]
   2e844:	2301      	movs	r3, #1
   2e846:	425b      	negs	r3, r3
   2e848:	61bb      	str	r3, [r7, #24]
        unsigned short mypacketid;
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
   2e84a:	68fb      	ldr	r3, [r7, #12]
   2e84c:	695a      	ldr	r2, [r3, #20]
   2e84e:	68fb      	ldr	r3, [r7, #12]
   2e850:	68db      	ldr	r3, [r3, #12]
   2e852:	001c      	movs	r4, r3
   2e854:	2318      	movs	r3, #24
   2e856:	18fb      	adds	r3, r7, r3
   2e858:	211c      	movs	r1, #28
   2e85a:	1879      	adds	r1, r7, r1
   2e85c:	2016      	movs	r0, #22
   2e85e:	1838      	adds	r0, r7, r0
   2e860:	9401      	str	r4, [sp, #4]
   2e862:	9200      	str	r2, [sp, #0]
   2e864:	000a      	movs	r2, r1
   2e866:	2101      	movs	r1, #1
   2e868:	4c24      	ldr	r4, [pc, #144]	; (2e8fc <MQTTSubscribe+0x188>)
   2e86a:	47a0      	blx	r4
   2e86c:	0003      	movs	r3, r0
   2e86e:	2b01      	cmp	r3, #1
   2e870:	d101      	bne.n	2e876 <MQTTSubscribe+0x102>
            rc = grantedQoS; // 0, 1, 2 or 0x80 
   2e872:	69bb      	ldr	r3, [r7, #24]
   2e874:	647b      	str	r3, [r7, #68]	; 0x44
        if (rc != 0x80)
   2e876:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   2e878:	2b80      	cmp	r3, #128	; 0x80
   2e87a:	d02e      	beq.n	2e8da <MQTTSubscribe+0x166>
        {
            int i;
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2e87c:	2300      	movs	r3, #0
   2e87e:	643b      	str	r3, [r7, #64]	; 0x40
   2e880:	e01e      	b.n	2e8c0 <MQTTSubscribe+0x14c>
            {
                if (c->messageHandlers[i].topicFilter == 0)
   2e882:	68fa      	ldr	r2, [r7, #12]
   2e884:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2e886:	3304      	adds	r3, #4
   2e888:	00db      	lsls	r3, r3, #3
   2e88a:	18d3      	adds	r3, r2, r3
   2e88c:	3304      	adds	r3, #4
   2e88e:	681b      	ldr	r3, [r3, #0]
   2e890:	2b00      	cmp	r3, #0
   2e892:	d112      	bne.n	2e8ba <MQTTSubscribe+0x146>
                {
                    c->messageHandlers[i].topicFilter = topicFilter;
   2e894:	68fa      	ldr	r2, [r7, #12]
   2e896:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2e898:	3304      	adds	r3, #4
   2e89a:	00db      	lsls	r3, r3, #3
   2e89c:	18d3      	adds	r3, r2, r3
   2e89e:	3304      	adds	r3, #4
   2e8a0:	68ba      	ldr	r2, [r7, #8]
   2e8a2:	601a      	str	r2, [r3, #0]
                    c->messageHandlers[i].fp = msgHandler;
   2e8a4:	68fa      	ldr	r2, [r7, #12]
   2e8a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2e8a8:	3304      	adds	r3, #4
   2e8aa:	00db      	lsls	r3, r3, #3
   2e8ac:	18d3      	adds	r3, r2, r3
   2e8ae:	3308      	adds	r3, #8
   2e8b0:	683a      	ldr	r2, [r7, #0]
   2e8b2:	601a      	str	r2, [r3, #0]
                    rc = 0;
   2e8b4:	2300      	movs	r3, #0
   2e8b6:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
   2e8b8:	e00f      	b.n	2e8da <MQTTSubscribe+0x166>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2e8ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2e8bc:	3301      	adds	r3, #1
   2e8be:	643b      	str	r3, [r7, #64]	; 0x40
   2e8c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2e8c2:	2b04      	cmp	r3, #4
   2e8c4:	dddd      	ble.n	2e882 <MQTTSubscribe+0x10e>
   2e8c6:	e008      	b.n	2e8da <MQTTSubscribe+0x166>
                }
            }
        }
    }
    else 
        rc = FAILURE;
   2e8c8:	2301      	movs	r3, #1
   2e8ca:	425b      	negs	r3, r3
   2e8cc:	647b      	str	r3, [r7, #68]	; 0x44
   2e8ce:	e004      	b.n	2e8da <MQTTSubscribe+0x166>
		goto exit;
   2e8d0:	46c0      	nop			; (mov r8, r8)
   2e8d2:	e002      	b.n	2e8da <MQTTSubscribe+0x166>
        goto exit;
   2e8d4:	46c0      	nop			; (mov r8, r8)
   2e8d6:	e000      	b.n	2e8da <MQTTSubscribe+0x166>
        goto exit;             // there was a problem
   2e8d8:	46c0      	nop			; (mov r8, r8)
        
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2e8da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
   2e8dc:	0018      	movs	r0, r3
   2e8de:	46bd      	mov	sp, r7
   2e8e0:	b012      	add	sp, #72	; 0x48
   2e8e2:	bdb0      	pop	{r4, r5, r7, pc}
   2e8e4:	0002ed09 	.word	0x0002ed09
   2e8e8:	0002ec91 	.word	0x0002ec91
   2e8ec:	0002de51 	.word	0x0002de51
   2e8f0:	00030241 	.word	0x00030241
   2e8f4:	0002de81 	.word	0x0002de81
   2e8f8:	0002e5e9 	.word	0x0002e5e9
   2e8fc:	00030391 	.word	0x00030391

0002e900 <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
   2e900:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e902:	46ce      	mov	lr, r9
   2e904:	4647      	mov	r7, r8
   2e906:	b580      	push	{r7, lr}
   2e908:	b097      	sub	sp, #92	; 0x5c
   2e90a:	af08      	add	r7, sp, #32
   2e90c:	60f8      	str	r0, [r7, #12]
   2e90e:	60b9      	str	r1, [r7, #8]
   2e910:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   2e912:	2301      	movs	r3, #1
   2e914:	425b      	negs	r3, r3
   2e916:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;   
    MQTTString topic = MQTTString_initializer;
   2e918:	2318      	movs	r3, #24
   2e91a:	18fb      	adds	r3, r7, r3
   2e91c:	2200      	movs	r2, #0
   2e91e:	601a      	str	r2, [r3, #0]
   2e920:	2318      	movs	r3, #24
   2e922:	18fb      	adds	r3, r7, r3
   2e924:	2200      	movs	r2, #0
   2e926:	605a      	str	r2, [r3, #4]
   2e928:	2318      	movs	r3, #24
   2e92a:	18fb      	adds	r3, r7, r3
   2e92c:	2200      	movs	r2, #0
   2e92e:	609a      	str	r2, [r3, #8]
    topic.cstring = (char *)topicName;
   2e930:	2318      	movs	r3, #24
   2e932:	18fb      	adds	r3, r7, r3
   2e934:	68ba      	ldr	r2, [r7, #8]
   2e936:	601a      	str	r2, [r3, #0]
    int len = 0;
   2e938:	2300      	movs	r3, #0
   2e93a:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   2e93c:	68fb      	ldr	r3, [r7, #12]
   2e93e:	6a1b      	ldr	r3, [r3, #32]
   2e940:	2b00      	cmp	r3, #0
   2e942:	d100      	bne.n	2e946 <MQTTPublish+0x46>
   2e944:	e0a0      	b.n	2ea88 <MQTTPublish+0x188>
		goto exit;

    TimerInit(&timer);
   2e946:	2324      	movs	r3, #36	; 0x24
   2e948:	18fb      	adds	r3, r7, r3
   2e94a:	0018      	movs	r0, r3
   2e94c:	4b55      	ldr	r3, [pc, #340]	; (2eaa4 <MQTTPublish+0x1a4>)
   2e94e:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2e950:	68fb      	ldr	r3, [r7, #12]
   2e952:	685a      	ldr	r2, [r3, #4]
   2e954:	2324      	movs	r3, #36	; 0x24
   2e956:	18fb      	adds	r3, r7, r3
   2e958:	0011      	movs	r1, r2
   2e95a:	0018      	movs	r0, r3
   2e95c:	4b52      	ldr	r3, [pc, #328]	; (2eaa8 <MQTTPublish+0x1a8>)
   2e95e:	4798      	blx	r3

    if (message->qos == QOS1 || message->qos == QOS2)
   2e960:	687b      	ldr	r3, [r7, #4]
   2e962:	781b      	ldrb	r3, [r3, #0]
   2e964:	2b01      	cmp	r3, #1
   2e966:	d003      	beq.n	2e970 <MQTTPublish+0x70>
   2e968:	687b      	ldr	r3, [r7, #4]
   2e96a:	781b      	ldrb	r3, [r3, #0]
   2e96c:	2b02      	cmp	r3, #2
   2e96e:	d107      	bne.n	2e980 <MQTTPublish+0x80>
        message->id = getNextPacketId(c);
   2e970:	68fb      	ldr	r3, [r7, #12]
   2e972:	0018      	movs	r0, r3
   2e974:	4b4d      	ldr	r3, [pc, #308]	; (2eaac <MQTTPublish+0x1ac>)
   2e976:	4798      	blx	r3
   2e978:	0003      	movs	r3, r0
   2e97a:	b29a      	uxth	r2, r3
   2e97c:	687b      	ldr	r3, [r7, #4]
   2e97e:	809a      	strh	r2, [r3, #4]
    
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   2e980:	68fb      	ldr	r3, [r7, #12]
   2e982:	691b      	ldr	r3, [r3, #16]
   2e984:	469c      	mov	ip, r3
   2e986:	68fb      	ldr	r3, [r7, #12]
   2e988:	689b      	ldr	r3, [r3, #8]
   2e98a:	001d      	movs	r5, r3
   2e98c:	687b      	ldr	r3, [r7, #4]
   2e98e:	781b      	ldrb	r3, [r3, #0]
   2e990:	001e      	movs	r6, r3
   2e992:	687b      	ldr	r3, [r7, #4]
   2e994:	785b      	ldrb	r3, [r3, #1]
   2e996:	4698      	mov	r8, r3
   2e998:	687b      	ldr	r3, [r7, #4]
   2e99a:	889b      	ldrh	r3, [r3, #4]
   2e99c:	4699      	mov	r9, r3
              topic, (unsigned char*)message->payload, message->payloadlen);
   2e99e:	687b      	ldr	r3, [r7, #4]
   2e9a0:	689a      	ldr	r2, [r3, #8]
   2e9a2:	687b      	ldr	r3, [r7, #4]
   2e9a4:	68db      	ldr	r3, [r3, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   2e9a6:	9306      	str	r3, [sp, #24]
   2e9a8:	9205      	str	r2, [sp, #20]
   2e9aa:	2318      	movs	r3, #24
   2e9ac:	18fa      	adds	r2, r7, r3
   2e9ae:	2308      	movs	r3, #8
   2e9b0:	446b      	add	r3, sp
   2e9b2:	ca13      	ldmia	r2!, {r0, r1, r4}
   2e9b4:	c313      	stmia	r3!, {r0, r1, r4}
   2e9b6:	464b      	mov	r3, r9
   2e9b8:	9301      	str	r3, [sp, #4]
   2e9ba:	4643      	mov	r3, r8
   2e9bc:	9300      	str	r3, [sp, #0]
   2e9be:	0033      	movs	r3, r6
   2e9c0:	2200      	movs	r2, #0
   2e9c2:	0029      	movs	r1, r5
   2e9c4:	4660      	mov	r0, ip
   2e9c6:	4c3a      	ldr	r4, [pc, #232]	; (2eab0 <MQTTPublish+0x1b0>)
   2e9c8:	47a0      	blx	r4
   2e9ca:	0003      	movs	r3, r0
   2e9cc:	633b      	str	r3, [r7, #48]	; 0x30
    if (len <= 0)
   2e9ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2e9d0:	2b00      	cmp	r3, #0
   2e9d2:	dd5b      	ble.n	2ea8c <MQTTPublish+0x18c>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   2e9d4:	2324      	movs	r3, #36	; 0x24
   2e9d6:	18fa      	adds	r2, r7, r3
   2e9d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
   2e9da:	68fb      	ldr	r3, [r7, #12]
   2e9dc:	0018      	movs	r0, r3
   2e9de:	4b35      	ldr	r3, [pc, #212]	; (2eab4 <MQTTPublish+0x1b4>)
   2e9e0:	4798      	blx	r3
   2e9e2:	0003      	movs	r3, r0
   2e9e4:	637b      	str	r3, [r7, #52]	; 0x34
   2e9e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2e9e8:	2b00      	cmp	r3, #0
   2e9ea:	d151      	bne.n	2ea90 <MQTTPublish+0x190>
        goto exit; // there was a problem
    
    if (message->qos == QOS1)
   2e9ec:	687b      	ldr	r3, [r7, #4]
   2e9ee:	781b      	ldrb	r3, [r3, #0]
   2e9f0:	2b01      	cmp	r3, #1
   2e9f2:	d122      	bne.n	2ea3a <MQTTPublish+0x13a>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
   2e9f4:	2324      	movs	r3, #36	; 0x24
   2e9f6:	18fa      	adds	r2, r7, r3
   2e9f8:	68fb      	ldr	r3, [r7, #12]
   2e9fa:	2104      	movs	r1, #4
   2e9fc:	0018      	movs	r0, r3
   2e9fe:	4b2e      	ldr	r3, [pc, #184]	; (2eab8 <MQTTPublish+0x1b8>)
   2ea00:	4798      	blx	r3
   2ea02:	0003      	movs	r3, r0
   2ea04:	2b04      	cmp	r3, #4
   2ea06:	d114      	bne.n	2ea32 <MQTTPublish+0x132>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2ea08:	68fb      	ldr	r3, [r7, #12]
   2ea0a:	695c      	ldr	r4, [r3, #20]
   2ea0c:	68fb      	ldr	r3, [r7, #12]
   2ea0e:	68db      	ldr	r3, [r3, #12]
   2ea10:	2216      	movs	r2, #22
   2ea12:	18ba      	adds	r2, r7, r2
   2ea14:	2115      	movs	r1, #21
   2ea16:	1879      	adds	r1, r7, r1
   2ea18:	2014      	movs	r0, #20
   2ea1a:	1838      	adds	r0, r7, r0
   2ea1c:	9300      	str	r3, [sp, #0]
   2ea1e:	0023      	movs	r3, r4
   2ea20:	4c26      	ldr	r4, [pc, #152]	; (2eabc <MQTTPublish+0x1bc>)
   2ea22:	47a0      	blx	r4
   2ea24:	0003      	movs	r3, r0
   2ea26:	2b01      	cmp	r3, #1
   2ea28:	d033      	beq.n	2ea92 <MQTTPublish+0x192>
                rc = FAILURE;
   2ea2a:	2301      	movs	r3, #1
   2ea2c:	425b      	negs	r3, r3
   2ea2e:	637b      	str	r3, [r7, #52]	; 0x34
   2ea30:	e02f      	b.n	2ea92 <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   2ea32:	2301      	movs	r3, #1
   2ea34:	425b      	negs	r3, r3
   2ea36:	637b      	str	r3, [r7, #52]	; 0x34
   2ea38:	e02b      	b.n	2ea92 <MQTTPublish+0x192>
    }
    else if (message->qos == QOS2)
   2ea3a:	687b      	ldr	r3, [r7, #4]
   2ea3c:	781b      	ldrb	r3, [r3, #0]
   2ea3e:	2b02      	cmp	r3, #2
   2ea40:	d127      	bne.n	2ea92 <MQTTPublish+0x192>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
   2ea42:	2324      	movs	r3, #36	; 0x24
   2ea44:	18fa      	adds	r2, r7, r3
   2ea46:	68fb      	ldr	r3, [r7, #12]
   2ea48:	2107      	movs	r1, #7
   2ea4a:	0018      	movs	r0, r3
   2ea4c:	4b1a      	ldr	r3, [pc, #104]	; (2eab8 <MQTTPublish+0x1b8>)
   2ea4e:	4798      	blx	r3
   2ea50:	0003      	movs	r3, r0
   2ea52:	2b07      	cmp	r3, #7
   2ea54:	d114      	bne.n	2ea80 <MQTTPublish+0x180>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2ea56:	68fb      	ldr	r3, [r7, #12]
   2ea58:	695c      	ldr	r4, [r3, #20]
   2ea5a:	68fb      	ldr	r3, [r7, #12]
   2ea5c:	68db      	ldr	r3, [r3, #12]
   2ea5e:	2212      	movs	r2, #18
   2ea60:	18ba      	adds	r2, r7, r2
   2ea62:	2111      	movs	r1, #17
   2ea64:	1879      	adds	r1, r7, r1
   2ea66:	2010      	movs	r0, #16
   2ea68:	1838      	adds	r0, r7, r0
   2ea6a:	9300      	str	r3, [sp, #0]
   2ea6c:	0023      	movs	r3, r4
   2ea6e:	4c13      	ldr	r4, [pc, #76]	; (2eabc <MQTTPublish+0x1bc>)
   2ea70:	47a0      	blx	r4
   2ea72:	0003      	movs	r3, r0
   2ea74:	2b01      	cmp	r3, #1
   2ea76:	d00c      	beq.n	2ea92 <MQTTPublish+0x192>
                rc = FAILURE;
   2ea78:	2301      	movs	r3, #1
   2ea7a:	425b      	negs	r3, r3
   2ea7c:	637b      	str	r3, [r7, #52]	; 0x34
   2ea7e:	e008      	b.n	2ea92 <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   2ea80:	2301      	movs	r3, #1
   2ea82:	425b      	negs	r3, r3
   2ea84:	637b      	str	r3, [r7, #52]	; 0x34
   2ea86:	e004      	b.n	2ea92 <MQTTPublish+0x192>
		goto exit;
   2ea88:	46c0      	nop			; (mov r8, r8)
   2ea8a:	e002      	b.n	2ea92 <MQTTPublish+0x192>
        goto exit;
   2ea8c:	46c0      	nop			; (mov r8, r8)
   2ea8e:	e000      	b.n	2ea92 <MQTTPublish+0x192>
        goto exit; // there was a problem
   2ea90:	46c0      	nop			; (mov r8, r8)
    
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2ea92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
   2ea94:	0018      	movs	r0, r3
   2ea96:	46bd      	mov	sp, r7
   2ea98:	b00f      	add	sp, #60	; 0x3c
   2ea9a:	bc0c      	pop	{r2, r3}
   2ea9c:	4690      	mov	r8, r2
   2ea9e:	4699      	mov	r9, r3
   2eaa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2eaa2:	46c0      	nop			; (mov r8, r8)
   2eaa4:	0002ed09 	.word	0x0002ed09
   2eaa8:	0002ec91 	.word	0x0002ec91
   2eaac:	0002de51 	.word	0x0002de51
   2eab0:	0002ff8d 	.word	0x0002ff8d
   2eab4:	0002de81 	.word	0x0002de81
   2eab8:	0002e5e9 	.word	0x0002e5e9
   2eabc:	0002fa05 	.word	0x0002fa05

0002eac0 <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{  
   2eac0:	b580      	push	{r7, lr}
   2eac2:	b088      	sub	sp, #32
   2eac4:	af00      	add	r7, sp, #0
   2eac6:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   2eac8:	2301      	movs	r3, #1
   2eaca:	425b      	negs	r3, r3
   2eacc:	61fb      	str	r3, [r7, #28]
    Timer timer;     // we might wait for incomplete incoming publishes to complete
    int len = 0;
   2eace:	2300      	movs	r3, #0
   2ead0:	61bb      	str	r3, [r7, #24]

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
   2ead2:	230c      	movs	r3, #12
   2ead4:	18fb      	adds	r3, r7, r3
   2ead6:	0018      	movs	r0, r3
   2ead8:	4b13      	ldr	r3, [pc, #76]	; (2eb28 <MQTTDisconnect+0x68>)
   2eada:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2eadc:	687b      	ldr	r3, [r7, #4]
   2eade:	685a      	ldr	r2, [r3, #4]
   2eae0:	230c      	movs	r3, #12
   2eae2:	18fb      	adds	r3, r7, r3
   2eae4:	0011      	movs	r1, r2
   2eae6:	0018      	movs	r0, r3
   2eae8:	4b10      	ldr	r3, [pc, #64]	; (2eb2c <MQTTDisconnect+0x6c>)
   2eaea:	4798      	blx	r3

	len = MQTTSerialize_disconnect(c->buf, c->buf_size);
   2eaec:	687b      	ldr	r3, [r7, #4]
   2eaee:	691a      	ldr	r2, [r3, #16]
   2eaf0:	687b      	ldr	r3, [r7, #4]
   2eaf2:	689b      	ldr	r3, [r3, #8]
   2eaf4:	0019      	movs	r1, r3
   2eaf6:	0010      	movs	r0, r2
   2eaf8:	4b0d      	ldr	r3, [pc, #52]	; (2eb30 <MQTTDisconnect+0x70>)
   2eafa:	4798      	blx	r3
   2eafc:	0003      	movs	r3, r0
   2eafe:	61bb      	str	r3, [r7, #24]
    if (len > 0)
   2eb00:	69bb      	ldr	r3, [r7, #24]
   2eb02:	2b00      	cmp	r3, #0
   2eb04:	dd08      	ble.n	2eb18 <MQTTDisconnect+0x58>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
   2eb06:	230c      	movs	r3, #12
   2eb08:	18fa      	adds	r2, r7, r3
   2eb0a:	69b9      	ldr	r1, [r7, #24]
   2eb0c:	687b      	ldr	r3, [r7, #4]
   2eb0e:	0018      	movs	r0, r3
   2eb10:	4b08      	ldr	r3, [pc, #32]	; (2eb34 <MQTTDisconnect+0x74>)
   2eb12:	4798      	blx	r3
   2eb14:	0003      	movs	r3, r0
   2eb16:	61fb      	str	r3, [r7, #28]
        
    c->isconnected = 0;
   2eb18:	687b      	ldr	r3, [r7, #4]
   2eb1a:	2200      	movs	r2, #0
   2eb1c:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2eb1e:	69fb      	ldr	r3, [r7, #28]
}
   2eb20:	0018      	movs	r0, r3
   2eb22:	46bd      	mov	sp, r7
   2eb24:	b008      	add	sp, #32
   2eb26:	bd80      	pop	{r7, pc}
   2eb28:	0002ed09 	.word	0x0002ed09
   2eb2c:	0002ec91 	.word	0x0002ec91
   2eb30:	0002f8b9 	.word	0x0002f8b9
   2eb34:	0002de81 	.word	0x0002de81

0002eb38 <isMQTTSocket>:
static uint32_t gu32MQTTRxFIFOPtr=0;
static uint32_t gu32MQTTRxFIFOLen=0;
static char *gpcHostAddr;

static bool isMQTTSocket(SOCKET sock)
{
   2eb38:	b580      	push	{r7, lr}
   2eb3a:	b084      	sub	sp, #16
   2eb3c:	af00      	add	r7, sp, #0
   2eb3e:	0002      	movs	r2, r0
   2eb40:	1dfb      	adds	r3, r7, #7
   2eb42:	701a      	strb	r2, [r3, #0]
	unsigned int cIdx;
	struct mqtt_module *mqttInstance;
	
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2eb44:	2300      	movs	r3, #0
   2eb46:	60fb      	str	r3, [r7, #12]
   2eb48:	e01c      	b.n	2eb84 <isMQTTSocket+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance != NULL)
   2eb4a:	4a12      	ldr	r2, [pc, #72]	; (2eb94 <isMQTTSocket+0x5c>)
   2eb4c:	68fb      	ldr	r3, [r7, #12]
   2eb4e:	2164      	movs	r1, #100	; 0x64
   2eb50:	434b      	muls	r3, r1
   2eb52:	18d3      	adds	r3, r2, r3
   2eb54:	3360      	adds	r3, #96	; 0x60
   2eb56:	681b      	ldr	r3, [r3, #0]
   2eb58:	2b00      	cmp	r3, #0
   2eb5a:	d010      	beq.n	2eb7e <isMQTTSocket+0x46>
		{
			mqttInstance = mqttClientPool[cIdx].mqtt_instance;
   2eb5c:	4a0d      	ldr	r2, [pc, #52]	; (2eb94 <isMQTTSocket+0x5c>)
   2eb5e:	68fb      	ldr	r3, [r7, #12]
   2eb60:	2164      	movs	r1, #100	; 0x64
   2eb62:	434b      	muls	r3, r1
   2eb64:	18d3      	adds	r3, r2, r3
   2eb66:	3360      	adds	r3, #96	; 0x60
   2eb68:	681b      	ldr	r3, [r3, #0]
   2eb6a:	60bb      	str	r3, [r7, #8]
			if(mqttInstance->network.socket == sock)
   2eb6c:	68bb      	ldr	r3, [r7, #8]
   2eb6e:	6a1a      	ldr	r2, [r3, #32]
   2eb70:	1dfb      	adds	r3, r7, #7
   2eb72:	781b      	ldrb	r3, [r3, #0]
   2eb74:	b25b      	sxtb	r3, r3
   2eb76:	429a      	cmp	r2, r3
   2eb78:	d101      	bne.n	2eb7e <isMQTTSocket+0x46>
				return true;
   2eb7a:	2301      	movs	r3, #1
   2eb7c:	e006      	b.n	2eb8c <isMQTTSocket+0x54>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2eb7e:	68fb      	ldr	r3, [r7, #12]
   2eb80:	3301      	adds	r3, #1
   2eb82:	60fb      	str	r3, [r7, #12]
   2eb84:	68fb      	ldr	r3, [r7, #12]
   2eb86:	2b06      	cmp	r3, #6
   2eb88:	d9df      	bls.n	2eb4a <isMQTTSocket+0x12>
		}
	}
	return false;
   2eb8a:	2300      	movs	r3, #0
}
   2eb8c:	0018      	movs	r0, r3
   2eb8e:	46bd      	mov	sp, r7
   2eb90:	b004      	add	sp, #16
   2eb92:	bd80      	pop	{r7, pc}
   2eb94:	20003e50 	.word	0x20003e50

0002eb98 <dnsResolveCallback>:

void dnsResolveCallback(uint8_t *hostName, uint32_t hostIp)
{
   2eb98:	b580      	push	{r7, lr}
   2eb9a:	b082      	sub	sp, #8
   2eb9c:	af00      	add	r7, sp, #0
   2eb9e:	6078      	str	r0, [r7, #4]
   2eba0:	6039      	str	r1, [r7, #0]
	if((gbMQTTBrokerIpresolved == false) && (!strcmp((const char *)gpcHostAddr, (const char *)hostName)))
   2eba2:	4b0d      	ldr	r3, [pc, #52]	; (2ebd8 <dnsResolveCallback+0x40>)
   2eba4:	781b      	ldrb	r3, [r3, #0]
   2eba6:	2201      	movs	r2, #1
   2eba8:	4053      	eors	r3, r2
   2ebaa:	b2db      	uxtb	r3, r3
   2ebac:	2b00      	cmp	r3, #0
   2ebae:	d00e      	beq.n	2ebce <dnsResolveCallback+0x36>
   2ebb0:	4b0a      	ldr	r3, [pc, #40]	; (2ebdc <dnsResolveCallback+0x44>)
   2ebb2:	681b      	ldr	r3, [r3, #0]
   2ebb4:	687a      	ldr	r2, [r7, #4]
   2ebb6:	0011      	movs	r1, r2
   2ebb8:	0018      	movs	r0, r3
   2ebba:	4b09      	ldr	r3, [pc, #36]	; (2ebe0 <dnsResolveCallback+0x48>)
   2ebbc:	4798      	blx	r3
   2ebbe:	1e03      	subs	r3, r0, #0
   2ebc0:	d105      	bne.n	2ebce <dnsResolveCallback+0x36>
	{
		gi32MQTTBrokerIp = hostIp;
   2ebc2:	683a      	ldr	r2, [r7, #0]
   2ebc4:	4b07      	ldr	r3, [pc, #28]	; (2ebe4 <dnsResolveCallback+0x4c>)
   2ebc6:	601a      	str	r2, [r3, #0]
		gbMQTTBrokerIpresolved = true;
   2ebc8:	4b03      	ldr	r3, [pc, #12]	; (2ebd8 <dnsResolveCallback+0x40>)
   2ebca:	2201      	movs	r2, #1
   2ebcc:	701a      	strb	r2, [r3, #0]
		#ifdef MQTT_PLATFORM_DBG
		printf("INFO >> Host IP of %s is %d.%d.%d.%d\r\n", hostName, (int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
		(int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
		#endif
	}
}
   2ebce:	46c0      	nop			; (mov r8, r8)
   2ebd0:	46bd      	mov	sp, r7
   2ebd2:	b002      	add	sp, #8
   2ebd4:	bd80      	pop	{r7, pc}
   2ebd6:	46c0      	nop			; (mov r8, r8)
   2ebd8:	20003d40 	.word	0x20003d40
   2ebdc:	20003e4c 	.word	0x20003e4c
   2ebe0:	000343db 	.word	0x000343db
   2ebe4:	20003d38 	.word	0x20003d38

0002ebe8 <tcpClientSocketEventHandler>:

void tcpClientSocketEventHandler(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   2ebe8:	b580      	push	{r7, lr}
   2ebea:	b084      	sub	sp, #16
   2ebec:	af00      	add	r7, sp, #0
   2ebee:	603a      	str	r2, [r7, #0]
   2ebf0:	1dfb      	adds	r3, r7, #7
   2ebf2:	1c02      	adds	r2, r0, #0
   2ebf4:	701a      	strb	r2, [r3, #0]
   2ebf6:	1dbb      	adds	r3, r7, #6
   2ebf8:	1c0a      	adds	r2, r1, #0
   2ebfa:	701a      	strb	r2, [r3, #0]
	if(isMQTTSocket(sock)) { 
   2ebfc:	1dfb      	adds	r3, r7, #7
   2ebfe:	781b      	ldrb	r3, [r3, #0]
   2ec00:	b25b      	sxtb	r3, r3
   2ec02:	0018      	movs	r0, r3
   2ec04:	4b12      	ldr	r3, [pc, #72]	; (2ec50 <tcpClientSocketEventHandler+0x68>)
   2ec06:	4798      	blx	r3
   2ec08:	1e03      	subs	r3, r0, #0
   2ec0a:	d01c      	beq.n	2ec46 <tcpClientSocketEventHandler+0x5e>
		switch (u8Msg) {
   2ec0c:	1dbb      	adds	r3, r7, #6
   2ec0e:	781b      	ldrb	r3, [r3, #0]
   2ec10:	2b06      	cmp	r3, #6
   2ec12:	d00c      	beq.n	2ec2e <tcpClientSocketEventHandler+0x46>
   2ec14:	2b07      	cmp	r3, #7
   2ec16:	d006      	beq.n	2ec26 <tcpClientSocketEventHandler+0x3e>
   2ec18:	2b05      	cmp	r3, #5
   2ec1a:	d000      	beq.n	2ec1e <tcpClientSocketEventHandler+0x36>
				printf("DEBUG >> Remaining data in Rx buffer of broker socket: %d\r\n",pstrRx->u16RemainingSize);
				#endif
				gbMQTTBrokerRecvDone=true;
			}
			break;
			default: break;
   2ec1c:	e013      	b.n	2ec46 <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerConnected=true;
   2ec1e:	4b0d      	ldr	r3, [pc, #52]	; (2ec54 <tcpClientSocketEventHandler+0x6c>)
   2ec20:	2201      	movs	r2, #1
   2ec22:	701a      	strb	r2, [r3, #0]
			break;
   2ec24:	e00f      	b.n	2ec46 <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerSendDone=true;
   2ec26:	4b0c      	ldr	r3, [pc, #48]	; (2ec58 <tcpClientSocketEventHandler+0x70>)
   2ec28:	2201      	movs	r2, #1
   2ec2a:	701a      	strb	r2, [r3, #0]
			break;
   2ec2c:	e00b      	b.n	2ec46 <tcpClientSocketEventHandler+0x5e>
				tstrSocketRecvMsg* pstrRx = (tstrSocketRecvMsg*)pvMsg;
   2ec2e:	683b      	ldr	r3, [r7, #0]
   2ec30:	60fb      	str	r3, [r7, #12]
				gi32MQTTBrokerRxLen = pstrRx->s16BufferSize;
   2ec32:	68fb      	ldr	r3, [r7, #12]
   2ec34:	2204      	movs	r2, #4
   2ec36:	5e9b      	ldrsh	r3, [r3, r2]
   2ec38:	001a      	movs	r2, r3
   2ec3a:	4b08      	ldr	r3, [pc, #32]	; (2ec5c <tcpClientSocketEventHandler+0x74>)
   2ec3c:	601a      	str	r2, [r3, #0]
				gbMQTTBrokerRecvDone=true;
   2ec3e:	4b08      	ldr	r3, [pc, #32]	; (2ec60 <tcpClientSocketEventHandler+0x78>)
   2ec40:	2201      	movs	r2, #1
   2ec42:	701a      	strb	r2, [r3, #0]
			break;
   2ec44:	46c0      	nop			; (mov r8, r8)
		}
	}
}
   2ec46:	46c0      	nop			; (mov r8, r8)
   2ec48:	46bd      	mov	sp, r7
   2ec4a:	b004      	add	sp, #16
   2ec4c:	bd80      	pop	{r7, pc}
   2ec4e:	46c0      	nop			; (mov r8, r8)
   2ec50:	0002eb39 	.word	0x0002eb39
   2ec54:	20003d41 	.word	0x20003d41
   2ec58:	20003d42 	.word	0x20003d42
   2ec5c:	20003d3c 	.word	0x20003d3c
   2ec60:	20003d43 	.word	0x20003d43

0002ec64 <TimerIsExpired>:

void SysTick_Handler_MQTT(void){
	MilliTimer++;
}

char TimerIsExpired(Timer* timer) {
   2ec64:	b580      	push	{r7, lr}
   2ec66:	b082      	sub	sp, #8
   2ec68:	af00      	add	r7, sp, #0
   2ec6a:	6078      	str	r0, [r7, #4]
	return xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait) == pdTRUE;
   2ec6c:	687b      	ldr	r3, [r7, #4]
   2ec6e:	3304      	adds	r3, #4
   2ec70:	687a      	ldr	r2, [r7, #4]
   2ec72:	0011      	movs	r1, r2
   2ec74:	0018      	movs	r0, r3
   2ec76:	4b05      	ldr	r3, [pc, #20]	; (2ec8c <TimerIsExpired+0x28>)
   2ec78:	4798      	blx	r3
   2ec7a:	0003      	movs	r3, r0
   2ec7c:	3b01      	subs	r3, #1
   2ec7e:	425a      	negs	r2, r3
   2ec80:	4153      	adcs	r3, r2
   2ec82:	b2db      	uxtb	r3, r3
}
   2ec84:	0018      	movs	r0, r3
   2ec86:	46bd      	mov	sp, r7
   2ec88:	b002      	add	sp, #8
   2ec8a:	bd80      	pop	{r7, pc}
   2ec8c:	0001c8b5 	.word	0x0001c8b5

0002ec90 <TimerCountdownMS>:


void TimerCountdownMS(Timer* timer, unsigned int timeout_ms) {
   2ec90:	b580      	push	{r7, lr}
   2ec92:	b082      	sub	sp, #8
   2ec94:	af00      	add	r7, sp, #0
   2ec96:	6078      	str	r0, [r7, #4]
   2ec98:	6039      	str	r1, [r7, #0]
	timer->xTicksToWait = timeout_ms / portTICK_PERIOD_MS; /* convert milliseconds to ticks */
   2ec9a:	687b      	ldr	r3, [r7, #4]
   2ec9c:	683a      	ldr	r2, [r7, #0]
   2ec9e:	601a      	str	r2, [r3, #0]
	vTaskSetTimeOutState(&timer->xTimeOut); /* Record the time at which this function was entered. */
   2eca0:	687b      	ldr	r3, [r7, #4]
   2eca2:	3304      	adds	r3, #4
   2eca4:	0018      	movs	r0, r3
   2eca6:	4b03      	ldr	r3, [pc, #12]	; (2ecb4 <TimerCountdownMS+0x24>)
   2eca8:	4798      	blx	r3
}
   2ecaa:	46c0      	nop			; (mov r8, r8)
   2ecac:	46bd      	mov	sp, r7
   2ecae:	b002      	add	sp, #8
   2ecb0:	bd80      	pop	{r7, pc}
   2ecb2:	46c0      	nop			; (mov r8, r8)
   2ecb4:	0001c849 	.word	0x0001c849

0002ecb8 <TimerCountdown>:


void TimerCountdown(Timer* timer, unsigned int timeout) {
   2ecb8:	b580      	push	{r7, lr}
   2ecba:	b082      	sub	sp, #8
   2ecbc:	af00      	add	r7, sp, #0
   2ecbe:	6078      	str	r0, [r7, #4]
   2ecc0:	6039      	str	r1, [r7, #0]
	TimerCountdownMS(timer, timeout * 1000);
   2ecc2:	683b      	ldr	r3, [r7, #0]
   2ecc4:	22fa      	movs	r2, #250	; 0xfa
   2ecc6:	0092      	lsls	r2, r2, #2
   2ecc8:	435a      	muls	r2, r3
   2ecca:	687b      	ldr	r3, [r7, #4]
   2eccc:	0011      	movs	r1, r2
   2ecce:	0018      	movs	r0, r3
   2ecd0:	4b02      	ldr	r3, [pc, #8]	; (2ecdc <TimerCountdown+0x24>)
   2ecd2:	4798      	blx	r3
}
   2ecd4:	46c0      	nop			; (mov r8, r8)
   2ecd6:	46bd      	mov	sp, r7
   2ecd8:	b002      	add	sp, #8
   2ecda:	bd80      	pop	{r7, pc}
   2ecdc:	0002ec91 	.word	0x0002ec91

0002ece0 <TimerLeftMS>:


int TimerLeftMS(Timer* timer) {
   2ece0:	b580      	push	{r7, lr}
   2ece2:	b082      	sub	sp, #8
   2ece4:	af00      	add	r7, sp, #0
   2ece6:	6078      	str	r0, [r7, #4]
	xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait); /* updates xTicksToWait to the number left */
   2ece8:	687b      	ldr	r3, [r7, #4]
   2ecea:	3304      	adds	r3, #4
   2ecec:	687a      	ldr	r2, [r7, #4]
   2ecee:	0011      	movs	r1, r2
   2ecf0:	0018      	movs	r0, r3
   2ecf2:	4b04      	ldr	r3, [pc, #16]	; (2ed04 <TimerLeftMS+0x24>)
   2ecf4:	4798      	blx	r3
	return (timer->xTicksToWait < 0) ? 0 : (timer->xTicksToWait * portTICK_PERIOD_MS);
   2ecf6:	687b      	ldr	r3, [r7, #4]
   2ecf8:	681b      	ldr	r3, [r3, #0]
}
   2ecfa:	0018      	movs	r0, r3
   2ecfc:	46bd      	mov	sp, r7
   2ecfe:	b002      	add	sp, #8
   2ed00:	bd80      	pop	{r7, pc}
   2ed02:	46c0      	nop			; (mov r8, r8)
   2ed04:	0001c8b5 	.word	0x0001c8b5

0002ed08 <TimerInit>:


void TimerInit(Timer* timer) {
   2ed08:	b580      	push	{r7, lr}
   2ed0a:	b082      	sub	sp, #8
   2ed0c:	af00      	add	r7, sp, #0
   2ed0e:	6078      	str	r0, [r7, #4]
	timer->xTicksToWait = 0;
   2ed10:	687b      	ldr	r3, [r7, #4]
   2ed12:	2200      	movs	r2, #0
   2ed14:	601a      	str	r2, [r3, #0]
	memset(&timer->xTimeOut, '\0', sizeof(timer->xTimeOut));
   2ed16:	687b      	ldr	r3, [r7, #4]
   2ed18:	3304      	adds	r3, #4
   2ed1a:	2208      	movs	r2, #8
   2ed1c:	2100      	movs	r1, #0
   2ed1e:	0018      	movs	r0, r3
   2ed20:	4b02      	ldr	r3, [pc, #8]	; (2ed2c <TimerInit+0x24>)
   2ed22:	4798      	blx	r3
}
   2ed24:	46c0      	nop			; (mov r8, r8)
   2ed26:	46bd      	mov	sp, r7
   2ed28:	b002      	add	sp, #8
   2ed2a:	bd80      	pop	{r7, pc}
   2ed2c:	00034083 	.word	0x00034083

0002ed30 <WINC1500_read>:

static int WINC1500_read(Network* n, unsigned char* buffer, int len, int timeout_ms) { 
   2ed30:	b590      	push	{r4, r7, lr}
   2ed32:	b085      	sub	sp, #20
   2ed34:	af00      	add	r7, sp, #0
   2ed36:	60f8      	str	r0, [r7, #12]
   2ed38:	60b9      	str	r1, [r7, #8]
   2ed3a:	607a      	str	r2, [r7, #4]
   2ed3c:	603b      	str	r3, [r7, #0]
  //at times the upper layer requests for single byte of data, but network has more in rx buffer.
  //this results in callback being invoked multiple times with length 1 before returning. To prevent loss of
  //data in this process, pool data internally and give it to upper layer on request. 
  
  //temporary workaround for timer overrun 
  if(0==timeout_ms) timeout_ms=10;
   2ed3e:	683b      	ldr	r3, [r7, #0]
   2ed40:	2b00      	cmp	r3, #0
   2ed42:	d101      	bne.n	2ed48 <WINC1500_read+0x18>
   2ed44:	230a      	movs	r3, #10
   2ed46:	603b      	str	r3, [r7, #0]
  
  if(0==gu32MQTTRxFIFOLen){ //no data in internal FIFO
   2ed48:	4b2c      	ldr	r3, [pc, #176]	; (2edfc <WINC1500_read+0xcc>)
   2ed4a:	681b      	ldr	r3, [r3, #0]
   2ed4c:	2b00      	cmp	r3, #0
   2ed4e:	d131      	bne.n	2edb4 <WINC1500_read+0x84>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("DEBUG >> Requesting data from network\r\n");
	  #endif
	  gbMQTTBrokerRecvDone=false;
   2ed50:	4b2b      	ldr	r3, [pc, #172]	; (2ee00 <WINC1500_read+0xd0>)
   2ed52:	2200      	movs	r2, #0
   2ed54:	701a      	strb	r2, [r3, #0]
	  if (SOCK_ERR_NO_ERROR!=recv(n->socket,gcMQTTRxFIFO,MQTT_RX_POOL_SIZE,timeout_ms)){
   2ed56:	68fb      	ldr	r3, [r7, #12]
   2ed58:	681b      	ldr	r3, [r3, #0]
   2ed5a:	b258      	sxtb	r0, r3
   2ed5c:	683c      	ldr	r4, [r7, #0]
   2ed5e:	2380      	movs	r3, #128	; 0x80
   2ed60:	005a      	lsls	r2, r3, #1
   2ed62:	4928      	ldr	r1, [pc, #160]	; (2ee04 <WINC1500_read+0xd4>)
   2ed64:	0023      	movs	r3, r4
   2ed66:	4c28      	ldr	r4, [pc, #160]	; (2ee08 <WINC1500_read+0xd8>)
   2ed68:	47a0      	blx	r4
   2ed6a:	1e03      	subs	r3, r0, #0
   2ed6c:	d005      	beq.n	2ed7a <WINC1500_read+0x4a>
		  #ifdef MQTT_PLATFORM_DBG
		  printf("ERROR >> recv failed\r\n");
		  #endif
		  return -1;
   2ed6e:	2301      	movs	r3, #1
   2ed70:	425b      	negs	r3, r3
   2ed72:	e03e      	b.n	2edf2 <WINC1500_read+0xc2>
	  }
	  //call handle_events until we get rx callback 
	  while (false==gbMQTTBrokerRecvDone){
		  m2m_wifi_handle_events(NULL);
   2ed74:	2000      	movs	r0, #0
   2ed76:	4b25      	ldr	r3, [pc, #148]	; (2ee0c <WINC1500_read+0xdc>)
   2ed78:	4798      	blx	r3
	  while (false==gbMQTTBrokerRecvDone){
   2ed7a:	4b21      	ldr	r3, [pc, #132]	; (2ee00 <WINC1500_read+0xd0>)
   2ed7c:	781b      	ldrb	r3, [r3, #0]
   2ed7e:	2201      	movs	r2, #1
   2ed80:	4053      	eors	r3, r2
   2ed82:	b2db      	uxtb	r3, r3
   2ed84:	2b00      	cmp	r3, #0
   2ed86:	d1f5      	bne.n	2ed74 <WINC1500_read+0x44>
	  }
	  
	  //update current FIFO length
	  if(gi32MQTTBrokerRxLen>0){ //data recieved form network
   2ed88:	4b21      	ldr	r3, [pc, #132]	; (2ee10 <WINC1500_read+0xe0>)
   2ed8a:	681b      	ldr	r3, [r3, #0]
   2ed8c:	2b00      	cmp	r3, #0
   2ed8e:	dd08      	ble.n	2eda2 <WINC1500_read+0x72>
		gu32MQTTRxFIFOLen=gi32MQTTBrokerRxLen;
   2ed90:	4b1f      	ldr	r3, [pc, #124]	; (2ee10 <WINC1500_read+0xe0>)
   2ed92:	681b      	ldr	r3, [r3, #0]
   2ed94:	001a      	movs	r2, r3
   2ed96:	4b19      	ldr	r3, [pc, #100]	; (2edfc <WINC1500_read+0xcc>)
   2ed98:	601a      	str	r2, [r3, #0]
		gu32MQTTRxFIFOPtr=0;
   2ed9a:	4b1e      	ldr	r3, [pc, #120]	; (2ee14 <WINC1500_read+0xe4>)
   2ed9c:	2200      	movs	r2, #0
   2ed9e:	601a      	str	r2, [r3, #0]
   2eda0:	e008      	b.n	2edb4 <WINC1500_read+0x84>
    	printf("0x%x, ",gcMQTTRxFIFO[i]);
    	printf("\r\n");
	  #endif
	  }
	  else{//mostly in case of timeout
		  gu32MQTTRxFIFOLen=0;
   2eda2:	4b16      	ldr	r3, [pc, #88]	; (2edfc <WINC1500_read+0xcc>)
   2eda4:	2200      	movs	r2, #0
   2eda6:	601a      	str	r2, [r3, #0]
		  gu32MQTTRxFIFOPtr=0;
   2eda8:	4b1a      	ldr	r3, [pc, #104]	; (2ee14 <WINC1500_read+0xe4>)
   2edaa:	2200      	movs	r2, #0
   2edac:	601a      	str	r2, [r3, #0]
		  #ifdef MQTT_PLATFORM_DBG
		  printf("DEBUG >> no data to send. returning error code (%d)\r\n",gi32MQTTBrokerRxLen);
		  #endif
		  return gi32MQTTBrokerRxLen; //this corresponds to the error code.
   2edae:	4b18      	ldr	r3, [pc, #96]	; (2ee10 <WINC1500_read+0xe0>)
   2edb0:	681b      	ldr	r3, [r3, #0]
   2edb2:	e01e      	b.n	2edf2 <WINC1500_read+0xc2>
	  }
  }
  //return data to client from data present in the FIFO from previous recv()
  if(len>(int)gu32MQTTRxFIFOLen){
   2edb4:	4b11      	ldr	r3, [pc, #68]	; (2edfc <WINC1500_read+0xcc>)
   2edb6:	681b      	ldr	r3, [r3, #0]
   2edb8:	001a      	movs	r2, r3
   2edba:	687b      	ldr	r3, [r7, #4]
   2edbc:	4293      	cmp	r3, r2
   2edbe:	dd02      	ble.n	2edc6 <WINC1500_read+0x96>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> unable to process read request since FIFO contains less data than requested\r\n");
	  #endif
	  return -1;
   2edc0:	2301      	movs	r3, #1
   2edc2:	425b      	negs	r3, r3
   2edc4:	e015      	b.n	2edf2 <WINC1500_read+0xc2>
  }
 
  memcpy((void*)buffer, (const void*)&gcMQTTRxFIFO[gu32MQTTRxFIFOPtr],len);
   2edc6:	4b13      	ldr	r3, [pc, #76]	; (2ee14 <WINC1500_read+0xe4>)
   2edc8:	681a      	ldr	r2, [r3, #0]
   2edca:	4b0e      	ldr	r3, [pc, #56]	; (2ee04 <WINC1500_read+0xd4>)
   2edcc:	18d1      	adds	r1, r2, r3
   2edce:	687a      	ldr	r2, [r7, #4]
   2edd0:	68bb      	ldr	r3, [r7, #8]
   2edd2:	0018      	movs	r0, r3
   2edd4:	4b10      	ldr	r3, [pc, #64]	; (2ee18 <WINC1500_read+0xe8>)
   2edd6:	4798      	blx	r3
  gu32MQTTRxFIFOLen-=len;
   2edd8:	4b08      	ldr	r3, [pc, #32]	; (2edfc <WINC1500_read+0xcc>)
   2edda:	681a      	ldr	r2, [r3, #0]
   2eddc:	687b      	ldr	r3, [r7, #4]
   2edde:	1ad2      	subs	r2, r2, r3
   2ede0:	4b06      	ldr	r3, [pc, #24]	; (2edfc <WINC1500_read+0xcc>)
   2ede2:	601a      	str	r2, [r3, #0]
  gu32MQTTRxFIFOPtr+=len;
   2ede4:	4b0b      	ldr	r3, [pc, #44]	; (2ee14 <WINC1500_read+0xe4>)
   2ede6:	681a      	ldr	r2, [r3, #0]
   2ede8:	687b      	ldr	r3, [r7, #4]
   2edea:	18d2      	adds	r2, r2, r3
   2edec:	4b09      	ldr	r3, [pc, #36]	; (2ee14 <WINC1500_read+0xe4>)
   2edee:	601a      	str	r2, [r3, #0]
  
  return len;
   2edf0:	687b      	ldr	r3, [r7, #4]
}
   2edf2:	0018      	movs	r0, r3
   2edf4:	46bd      	mov	sp, r7
   2edf6:	b005      	add	sp, #20
   2edf8:	bd90      	pop	{r4, r7, pc}
   2edfa:	46c0      	nop			; (mov r8, r8)
   2edfc:	20003e48 	.word	0x20003e48
   2ee00:	20003d43 	.word	0x20003d43
   2ee04:	20003d44 	.word	0x20003d44
   2ee08:	0002543d 	.word	0x0002543d
   2ee0c:	00021985 	.word	0x00021985
   2ee10:	20003d3c 	.word	0x20003d3c
   2ee14:	20003e44 	.word	0x20003e44
   2ee18:	0003404d 	.word	0x0003404d

0002ee1c <WINC1500_write>:


static int WINC1500_write(Network* n, unsigned char* buffer, int len, int timeout_ms) {
   2ee1c:	b590      	push	{r4, r7, lr}
   2ee1e:	b085      	sub	sp, #20
   2ee20:	af00      	add	r7, sp, #0
   2ee22:	60f8      	str	r0, [r7, #12]
   2ee24:	60b9      	str	r1, [r7, #8]
   2ee26:	607a      	str	r2, [r7, #4]
   2ee28:	603b      	str	r3, [r7, #0]
  gbMQTTBrokerSendDone=false;
   2ee2a:	4b10      	ldr	r3, [pc, #64]	; (2ee6c <WINC1500_write+0x50>)
   2ee2c:	2200      	movs	r2, #0
   2ee2e:	701a      	strb	r2, [r3, #0]
  if (SOCK_ERR_NO_ERROR!=send(n->socket,buffer,len,0)){
   2ee30:	68fb      	ldr	r3, [r7, #12]
   2ee32:	681b      	ldr	r3, [r3, #0]
   2ee34:	b258      	sxtb	r0, r3
   2ee36:	687b      	ldr	r3, [r7, #4]
   2ee38:	b29a      	uxth	r2, r3
   2ee3a:	68b9      	ldr	r1, [r7, #8]
   2ee3c:	2300      	movs	r3, #0
   2ee3e:	4c0c      	ldr	r4, [pc, #48]	; (2ee70 <WINC1500_write+0x54>)
   2ee40:	47a0      	blx	r4
   2ee42:	1e03      	subs	r3, r0, #0
   2ee44:	d005      	beq.n	2ee52 <WINC1500_write+0x36>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> send error");
	  #endif
	  return -1;
   2ee46:	2301      	movs	r3, #1
   2ee48:	425b      	negs	r3, r3
   2ee4a:	e00a      	b.n	2ee62 <WINC1500_write+0x46>
  }
  //wait for send callback
  while (false==gbMQTTBrokerSendDone){
	  m2m_wifi_handle_events(NULL);
   2ee4c:	2000      	movs	r0, #0
   2ee4e:	4b09      	ldr	r3, [pc, #36]	; (2ee74 <WINC1500_write+0x58>)
   2ee50:	4798      	blx	r3
  while (false==gbMQTTBrokerSendDone){
   2ee52:	4b06      	ldr	r3, [pc, #24]	; (2ee6c <WINC1500_write+0x50>)
   2ee54:	781b      	ldrb	r3, [r3, #0]
   2ee56:	2201      	movs	r2, #1
   2ee58:	4053      	eors	r3, r2
   2ee5a:	b2db      	uxtb	r3, r3
   2ee5c:	2b00      	cmp	r3, #0
   2ee5e:	d1f5      	bne.n	2ee4c <WINC1500_write+0x30>
  #endif

  //TODO: figure out how to get actual send length from callback
  //this length will be updated in the callback
  //return gu32MQTTBrokerSendLen;
  return len;
   2ee60:	687b      	ldr	r3, [r7, #4]
}
   2ee62:	0018      	movs	r0, r3
   2ee64:	46bd      	mov	sp, r7
   2ee66:	b005      	add	sp, #20
   2ee68:	bd90      	pop	{r4, r7, pc}
   2ee6a:	46c0      	nop			; (mov r8, r8)
   2ee6c:	20003d42 	.word	0x20003d42
   2ee70:	000252d9 	.word	0x000252d9
   2ee74:	00021985 	.word	0x00021985

0002ee78 <WINC1500_disconnect>:


static void WINC1500_disconnect(Network* n) {
   2ee78:	b580      	push	{r7, lr}
   2ee7a:	b082      	sub	sp, #8
   2ee7c:	af00      	add	r7, sp, #0
   2ee7e:	6078      	str	r0, [r7, #4]
	close(n->socket);
   2ee80:	687b      	ldr	r3, [r7, #4]
   2ee82:	681b      	ldr	r3, [r3, #0]
   2ee84:	b25b      	sxtb	r3, r3
   2ee86:	0018      	movs	r0, r3
   2ee88:	4b06      	ldr	r3, [pc, #24]	; (2eea4 <WINC1500_disconnect+0x2c>)
   2ee8a:	4798      	blx	r3
	n->socket=-1;
   2ee8c:	687b      	ldr	r3, [r7, #4]
   2ee8e:	2201      	movs	r2, #1
   2ee90:	4252      	negs	r2, r2
   2ee92:	601a      	str	r2, [r3, #0]
	gbMQTTBrokerConnected=false;
   2ee94:	4b04      	ldr	r3, [pc, #16]	; (2eea8 <WINC1500_disconnect+0x30>)
   2ee96:	2200      	movs	r2, #0
   2ee98:	701a      	strb	r2, [r3, #0]
}
   2ee9a:	46c0      	nop			; (mov r8, r8)
   2ee9c:	46bd      	mov	sp, r7
   2ee9e:	b002      	add	sp, #8
   2eea0:	bd80      	pop	{r7, pc}
   2eea2:	46c0      	nop			; (mov r8, r8)
   2eea4:	000255bd 	.word	0x000255bd
   2eea8:	20003d41 	.word	0x20003d41

0002eeac <NetworkInit>:


void NetworkInit(Network* n) {
   2eeac:	b580      	push	{r7, lr}
   2eeae:	b082      	sub	sp, #8
   2eeb0:	af00      	add	r7, sp, #0
   2eeb2:	6078      	str	r0, [r7, #4]
	n->socket = -1;
   2eeb4:	687b      	ldr	r3, [r7, #4]
   2eeb6:	2201      	movs	r2, #1
   2eeb8:	4252      	negs	r2, r2
   2eeba:	601a      	str	r2, [r3, #0]
	n->mqttread = WINC1500_read;
   2eebc:	687b      	ldr	r3, [r7, #4]
   2eebe:	4a06      	ldr	r2, [pc, #24]	; (2eed8 <NetworkInit+0x2c>)
   2eec0:	609a      	str	r2, [r3, #8]
	n->mqttwrite = WINC1500_write;
   2eec2:	687b      	ldr	r3, [r7, #4]
   2eec4:	4a05      	ldr	r2, [pc, #20]	; (2eedc <NetworkInit+0x30>)
   2eec6:	60da      	str	r2, [r3, #12]
	n->disconnect = WINC1500_disconnect;
   2eec8:	687b      	ldr	r3, [r7, #4]
   2eeca:	4a05      	ldr	r2, [pc, #20]	; (2eee0 <NetworkInit+0x34>)
   2eecc:	611a      	str	r2, [r3, #16]
}
   2eece:	46c0      	nop			; (mov r8, r8)
   2eed0:	46bd      	mov	sp, r7
   2eed2:	b002      	add	sp, #8
   2eed4:	bd80      	pop	{r7, pc}
   2eed6:	46c0      	nop			; (mov r8, r8)
   2eed8:	0002ed31 	.word	0x0002ed31
   2eedc:	0002ee1d 	.word	0x0002ee1d
   2eee0:	0002ee79 	.word	0x0002ee79

0002eee4 <ConnectNetwork>:

int ConnectNetwork(Network* n, char* addr, int port, int TLSFlag){
   2eee4:	b580      	push	{r7, lr}
   2eee6:	b088      	sub	sp, #32
   2eee8:	af00      	add	r7, sp, #0
   2eeea:	60f8      	str	r0, [r7, #12]
   2eeec:	60b9      	str	r1, [r7, #8]
   2eeee:	607a      	str	r2, [r7, #4]
   2eef0:	603b      	str	r3, [r7, #0]

  //Resolve Server URL.
  gbMQTTBrokerIpresolved = false;
   2eef2:	4b37      	ldr	r3, [pc, #220]	; (2efd0 <ConnectNetwork+0xec>)
   2eef4:	2200      	movs	r2, #0
   2eef6:	701a      	strb	r2, [r3, #0]
  gpcHostAddr = addr;
   2eef8:	4b36      	ldr	r3, [pc, #216]	; (2efd4 <ConnectNetwork+0xf0>)
   2eefa:	68ba      	ldr	r2, [r7, #8]
   2eefc:	601a      	str	r2, [r3, #0]
  gethostbyname((uint8*)addr);
   2eefe:	68bb      	ldr	r3, [r7, #8]
   2ef00:	0018      	movs	r0, r3
   2ef02:	4b35      	ldr	r3, [pc, #212]	; (2efd8 <ConnectNetwork+0xf4>)
   2ef04:	4798      	blx	r3
 
  //wait for resolver callback
  while (false==gbMQTTBrokerIpresolved){
   2ef06:	e002      	b.n	2ef0e <ConnectNetwork+0x2a>
	  m2m_wifi_handle_events(NULL);
   2ef08:	2000      	movs	r0, #0
   2ef0a:	4b34      	ldr	r3, [pc, #208]	; (2efdc <ConnectNetwork+0xf8>)
   2ef0c:	4798      	blx	r3
  while (false==gbMQTTBrokerIpresolved){
   2ef0e:	4b30      	ldr	r3, [pc, #192]	; (2efd0 <ConnectNetwork+0xec>)
   2ef10:	781b      	ldrb	r3, [r3, #0]
   2ef12:	2201      	movs	r2, #1
   2ef14:	4053      	eors	r3, r2
   2ef16:	b2db      	uxtb	r3, r3
   2ef18:	2b00      	cmp	r3, #0
   2ef1a:	d1f5      	bne.n	2ef08 <ConnectNetwork+0x24>
  }
  
  n->hostIP = gi32MQTTBrokerIp;
   2ef1c:	4b30      	ldr	r3, [pc, #192]	; (2efe0 <ConnectNetwork+0xfc>)
   2ef1e:	681a      	ldr	r2, [r3, #0]
   2ef20:	68fb      	ldr	r3, [r7, #12]
   2ef22:	605a      	str	r2, [r3, #4]
  
  //connect to socket
  struct sockaddr_in addr_in;
  addr_in.sin_family = AF_INET;
   2ef24:	2310      	movs	r3, #16
   2ef26:	18fb      	adds	r3, r7, r3
   2ef28:	2202      	movs	r2, #2
   2ef2a:	801a      	strh	r2, [r3, #0]
  addr_in.sin_port = _htons(port);
   2ef2c:	687b      	ldr	r3, [r7, #4]
   2ef2e:	b29b      	uxth	r3, r3
   2ef30:	021b      	lsls	r3, r3, #8
   2ef32:	b21a      	sxth	r2, r3
   2ef34:	687b      	ldr	r3, [r7, #4]
   2ef36:	b29b      	uxth	r3, r3
   2ef38:	0a1b      	lsrs	r3, r3, #8
   2ef3a:	b29b      	uxth	r3, r3
   2ef3c:	b21b      	sxth	r3, r3
   2ef3e:	4313      	orrs	r3, r2
   2ef40:	b21b      	sxth	r3, r3
   2ef42:	b29a      	uxth	r2, r3
   2ef44:	2310      	movs	r3, #16
   2ef46:	18fb      	adds	r3, r7, r3
   2ef48:	805a      	strh	r2, [r3, #2]
  addr_in.sin_addr.s_addr = gi32MQTTBrokerIp;
   2ef4a:	4b25      	ldr	r3, [pc, #148]	; (2efe0 <ConnectNetwork+0xfc>)
   2ef4c:	681b      	ldr	r3, [r3, #0]
   2ef4e:	001a      	movs	r2, r3
   2ef50:	2310      	movs	r3, #16
   2ef52:	18fb      	adds	r3, r7, r3
   2ef54:	605a      	str	r2, [r3, #4]

  /* Create secure socket */ 
  if(n->socket < 0)
   2ef56:	68fb      	ldr	r3, [r7, #12]
   2ef58:	681b      	ldr	r3, [r3, #0]
   2ef5a:	2b00      	cmp	r3, #0
   2ef5c:	da0a      	bge.n	2ef74 <ConnectNetwork+0x90>
	n->socket = socket(AF_INET, SOCK_STREAM, TLSFlag);
   2ef5e:	683b      	ldr	r3, [r7, #0]
   2ef60:	b2db      	uxtb	r3, r3
   2ef62:	001a      	movs	r2, r3
   2ef64:	2101      	movs	r1, #1
   2ef66:	2002      	movs	r0, #2
   2ef68:	4b1e      	ldr	r3, [pc, #120]	; (2efe4 <ConnectNetwork+0x100>)
   2ef6a:	4798      	blx	r3
   2ef6c:	0003      	movs	r3, r0
   2ef6e:	001a      	movs	r2, r3
   2ef70:	68fb      	ldr	r3, [r7, #12]
   2ef72:	601a      	str	r2, [r3, #0]
  
  /* Check if socket was created successfully */
  if (n->socket == -1) {
   2ef74:	68fb      	ldr	r3, [r7, #12]
   2ef76:	681b      	ldr	r3, [r3, #0]
   2ef78:	3301      	adds	r3, #1
   2ef7a:	d108      	bne.n	2ef8e <ConnectNetwork+0xaa>
   #ifdef MQTT_PLATFORM_DBG
   printf("ERROR >> socket error.\r\n");
   #endif
   close(n->socket);
   2ef7c:	68fb      	ldr	r3, [r7, #12]
   2ef7e:	681b      	ldr	r3, [r3, #0]
   2ef80:	b25b      	sxtb	r3, r3
   2ef82:	0018      	movs	r0, r3
   2ef84:	4b18      	ldr	r3, [pc, #96]	; (2efe8 <ConnectNetwork+0x104>)
   2ef86:	4798      	blx	r3
   return SOCK_ERR_INVALID;
   2ef88:	2309      	movs	r3, #9
   2ef8a:	425b      	negs	r3, r3
   2ef8c:	e01c      	b.n	2efc8 <ConnectNetwork+0xe4>
  }
  
  /* If success, connect to socket */
  if (connect(n->socket, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
   2ef8e:	68fb      	ldr	r3, [r7, #12]
   2ef90:	681b      	ldr	r3, [r3, #0]
   2ef92:	b25b      	sxtb	r3, r3
   2ef94:	2210      	movs	r2, #16
   2ef96:	18b9      	adds	r1, r7, r2
   2ef98:	2210      	movs	r2, #16
   2ef9a:	0018      	movs	r0, r3
   2ef9c:	4b13      	ldr	r3, [pc, #76]	; (2efec <ConnectNetwork+0x108>)
   2ef9e:	4798      	blx	r3
   2efa0:	1e03      	subs	r3, r0, #0
   2efa2:	d002      	beq.n	2efaa <ConnectNetwork+0xc6>
   #ifdef MQTT_PLATFORM_DBG  
   printf("ERROR >> connect error.\r\n");
   #endif
   return SOCK_ERR_INVALID;
   2efa4:	2309      	movs	r3, #9
   2efa6:	425b      	negs	r3, r3
   2efa8:	e00e      	b.n	2efc8 <ConnectNetwork+0xe4>
  }
  
  gbMQTTBrokerConnected = false;
   2efaa:	4b11      	ldr	r3, [pc, #68]	; (2eff0 <ConnectNetwork+0x10c>)
   2efac:	2200      	movs	r2, #0
   2efae:	701a      	strb	r2, [r3, #0]
  
  /*wait for SOCKET_MSG_CONNECT event */
  while(false==gbMQTTBrokerConnected){
   2efb0:	e002      	b.n	2efb8 <ConnectNetwork+0xd4>
    m2m_wifi_handle_events(NULL);
   2efb2:	2000      	movs	r0, #0
   2efb4:	4b09      	ldr	r3, [pc, #36]	; (2efdc <ConnectNetwork+0xf8>)
   2efb6:	4798      	blx	r3
  while(false==gbMQTTBrokerConnected){
   2efb8:	4b0d      	ldr	r3, [pc, #52]	; (2eff0 <ConnectNetwork+0x10c>)
   2efba:	781b      	ldrb	r3, [r3, #0]
   2efbc:	2201      	movs	r2, #1
   2efbe:	4053      	eors	r3, r2
   2efc0:	b2db      	uxtb	r3, r3
   2efc2:	2b00      	cmp	r3, #0
   2efc4:	d1f5      	bne.n	2efb2 <ConnectNetwork+0xce>
  
  /* Success */
  #ifdef MQTT_PLATFORM_DBG
  printf("INFO >> ConnectNetwork successful\r\n");
  #endif
  return SOCK_ERR_NO_ERROR;
   2efc6:	2300      	movs	r3, #0
   2efc8:	0018      	movs	r0, r3
   2efca:	46bd      	mov	sp, r7
   2efcc:	b008      	add	sp, #32
   2efce:	bd80      	pop	{r7, pc}
   2efd0:	20003d40 	.word	0x20003d40
   2efd4:	20003e4c 	.word	0x20003e4c
   2efd8:	00025805 	.word	0x00025805
   2efdc:	00021985 	.word	0x00021985
   2efe0:	20003d38 	.word	0x20003d38
   2efe4:	00024fb1 	.word	0x00024fb1
   2efe8:	000255bd 	.word	0x000255bd
   2efec:	000251c5 	.word	0x000251c5
   2eff0:	20003d41 	.word	0x20003d41

0002eff4 <allocateClient>:

static void allocateClient(struct mqtt_module *module);
static void deAllocateClient(struct mqtt_module *module);

static void allocateClient(struct mqtt_module *module)
{
   2eff4:	b580      	push	{r7, lr}
   2eff6:	b084      	sub	sp, #16
   2eff8:	af00      	add	r7, sp, #0
   2effa:	6078      	str	r0, [r7, #4]
	unsigned int cIdx;
	
	if(!module)
   2effc:	687b      	ldr	r3, [r7, #4]
   2effe:	2b00      	cmp	r3, #0
   2f000:	d022      	beq.n	2f048 <allocateClient+0x54>
		return;
		
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2f002:	2300      	movs	r3, #0
   2f004:	60fb      	str	r3, [r7, #12]
   2f006:	e01b      	b.n	2f040 <allocateClient+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   2f008:	4a11      	ldr	r2, [pc, #68]	; (2f050 <allocateClient+0x5c>)
   2f00a:	68fb      	ldr	r3, [r7, #12]
   2f00c:	2164      	movs	r1, #100	; 0x64
   2f00e:	434b      	muls	r3, r1
   2f010:	18d3      	adds	r3, r2, r3
   2f012:	3360      	adds	r3, #96	; 0x60
   2f014:	681b      	ldr	r3, [r3, #0]
   2f016:	2b00      	cmp	r3, #0
   2f018:	d10f      	bne.n	2f03a <allocateClient+0x46>
		{
			mqttClientPool[cIdx].mqtt_instance = module;
   2f01a:	4a0d      	ldr	r2, [pc, #52]	; (2f050 <allocateClient+0x5c>)
   2f01c:	68fb      	ldr	r3, [r7, #12]
   2f01e:	2164      	movs	r1, #100	; 0x64
   2f020:	434b      	muls	r3, r1
   2f022:	18d3      	adds	r3, r2, r3
   2f024:	3360      	adds	r3, #96	; 0x60
   2f026:	687a      	ldr	r2, [r7, #4]
   2f028:	601a      	str	r2, [r3, #0]
			module->client = &(mqttClientPool[cIdx].client);
   2f02a:	68fb      	ldr	r3, [r7, #12]
   2f02c:	2264      	movs	r2, #100	; 0x64
   2f02e:	435a      	muls	r2, r3
   2f030:	4b07      	ldr	r3, [pc, #28]	; (2f050 <allocateClient+0x5c>)
   2f032:	18d2      	adds	r2, r2, r3
   2f034:	687b      	ldr	r3, [r7, #4]
   2f036:	61da      	str	r2, [r3, #28]
			return;
   2f038:	e007      	b.n	2f04a <allocateClient+0x56>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2f03a:	68fb      	ldr	r3, [r7, #12]
   2f03c:	3301      	adds	r3, #1
   2f03e:	60fb      	str	r3, [r7, #12]
   2f040:	68fb      	ldr	r3, [r7, #12]
   2f042:	2b06      	cmp	r3, #6
   2f044:	d9e0      	bls.n	2f008 <allocateClient+0x14>
   2f046:	e000      	b.n	2f04a <allocateClient+0x56>
		return;
   2f048:	46c0      	nop			; (mov r8, r8)
		}
	}	
}
   2f04a:	46bd      	mov	sp, r7
   2f04c:	b004      	add	sp, #16
   2f04e:	bd80      	pop	{r7, pc}
   2f050:	20003e50 	.word	0x20003e50

0002f054 <mqtt_init>:
		}
	}
}

int mqtt_init(struct mqtt_module *module, struct mqtt_config *config)
{
   2f054:	b5f0      	push	{r4, r5, r6, r7, lr}
   2f056:	b089      	sub	sp, #36	; 0x24
   2f058:	af04      	add	r7, sp, #16
   2f05a:	6078      	str	r0, [r7, #4]
   2f05c:	6039      	str	r1, [r7, #0]
	unsigned int timeout_ms;
	
	if(NULL == module || NULL == config || NULL == config->send_buffer || NULL == config->read_buffer)
   2f05e:	687b      	ldr	r3, [r7, #4]
   2f060:	2b00      	cmp	r3, #0
   2f062:	d00a      	beq.n	2f07a <mqtt_init+0x26>
   2f064:	683b      	ldr	r3, [r7, #0]
   2f066:	2b00      	cmp	r3, #0
   2f068:	d007      	beq.n	2f07a <mqtt_init+0x26>
   2f06a:	683b      	ldr	r3, [r7, #0]
   2f06c:	691b      	ldr	r3, [r3, #16]
   2f06e:	2b00      	cmp	r3, #0
   2f070:	d003      	beq.n	2f07a <mqtt_init+0x26>
   2f072:	683b      	ldr	r3, [r7, #0]
   2f074:	689b      	ldr	r3, [r3, #8]
   2f076:	2b00      	cmp	r3, #0
   2f078:	d102      	bne.n	2f080 <mqtt_init+0x2c>
		return FAILURE;
   2f07a:	2301      	movs	r3, #1
   2f07c:	425b      	negs	r3, r3
   2f07e:	e034      	b.n	2f0ea <mqtt_init+0x96>
		
	timeout_ms = config->keep_alive * 1000;
   2f080:	683b      	ldr	r3, [r7, #0]
   2f082:	889b      	ldrh	r3, [r3, #4]
   2f084:	001a      	movs	r2, r3
   2f086:	23fa      	movs	r3, #250	; 0xfa
   2f088:	009b      	lsls	r3, r3, #2
   2f08a:	4353      	muls	r3, r2
   2f08c:	60fb      	str	r3, [r7, #12]
	NetworkInit(&(module->network));
   2f08e:	687b      	ldr	r3, [r7, #4]
   2f090:	3320      	adds	r3, #32
   2f092:	0018      	movs	r0, r3
   2f094:	4b17      	ldr	r3, [pc, #92]	; (2f0f4 <mqtt_init+0xa0>)
   2f096:	4798      	blx	r3
	memcpy((void *)&(module->config), config, sizeof(struct mqtt_config));
   2f098:	687b      	ldr	r3, [r7, #4]
   2f09a:	3304      	adds	r3, #4
   2f09c:	6839      	ldr	r1, [r7, #0]
   2f09e:	2218      	movs	r2, #24
   2f0a0:	0018      	movs	r0, r3
   2f0a2:	4b15      	ldr	r3, [pc, #84]	; (2f0f8 <mqtt_init+0xa4>)
   2f0a4:	4798      	blx	r3
	allocateClient(module);
   2f0a6:	687b      	ldr	r3, [r7, #4]
   2f0a8:	0018      	movs	r0, r3
   2f0aa:	4b14      	ldr	r3, [pc, #80]	; (2f0fc <mqtt_init+0xa8>)
   2f0ac:	4798      	blx	r3
	
	if(module->client)
   2f0ae:	687b      	ldr	r3, [r7, #4]
   2f0b0:	69db      	ldr	r3, [r3, #28]
   2f0b2:	2b00      	cmp	r3, #0
   2f0b4:	d017      	beq.n	2f0e6 <mqtt_init+0x92>
	{
		MQTTClientInit(module->client, &(module->network), timeout_ms, config->send_buffer, config->send_buffer_size, config->read_buffer, config->read_buffer_size);
   2f0b6:	687b      	ldr	r3, [r7, #4]
   2f0b8:	69d8      	ldr	r0, [r3, #28]
   2f0ba:	687b      	ldr	r3, [r7, #4]
   2f0bc:	3320      	adds	r3, #32
   2f0be:	001c      	movs	r4, r3
   2f0c0:	683b      	ldr	r3, [r7, #0]
   2f0c2:	691e      	ldr	r6, [r3, #16]
   2f0c4:	683b      	ldr	r3, [r7, #0]
   2f0c6:	695a      	ldr	r2, [r3, #20]
   2f0c8:	683b      	ldr	r3, [r7, #0]
   2f0ca:	6899      	ldr	r1, [r3, #8]
   2f0cc:	683b      	ldr	r3, [r7, #0]
   2f0ce:	68db      	ldr	r3, [r3, #12]
   2f0d0:	68fd      	ldr	r5, [r7, #12]
   2f0d2:	9302      	str	r3, [sp, #8]
   2f0d4:	9101      	str	r1, [sp, #4]
   2f0d6:	9200      	str	r2, [sp, #0]
   2f0d8:	0033      	movs	r3, r6
   2f0da:	002a      	movs	r2, r5
   2f0dc:	0021      	movs	r1, r4
   2f0de:	4c08      	ldr	r4, [pc, #32]	; (2f100 <mqtt_init+0xac>)
   2f0e0:	47a0      	blx	r4
		return SUCCESS;
   2f0e2:	2300      	movs	r3, #0
   2f0e4:	e001      	b.n	2f0ea <mqtt_init+0x96>
	}
	else
		return FAILURE;
   2f0e6:	2301      	movs	r3, #1
   2f0e8:	425b      	negs	r3, r3
}
   2f0ea:	0018      	movs	r0, r3
   2f0ec:	46bd      	mov	sp, r7
   2f0ee:	b005      	add	sp, #20
   2f0f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2f0f2:	46c0      	nop			; (mov r8, r8)
   2f0f4:	0002eead 	.word	0x0002eead
   2f0f8:	0003404d 	.word	0x0003404d
   2f0fc:	0002eff5 	.word	0x0002eff5
   2f100:	0002df25 	.word	0x0002df25

0002f104 <mqtt_get_config_defaults>:
	else
		return FAILURE;
}

void mqtt_get_config_defaults(struct mqtt_config *const config)
{
   2f104:	b580      	push	{r7, lr}
   2f106:	b082      	sub	sp, #8
   2f108:	af00      	add	r7, sp, #0
   2f10a:	6078      	str	r0, [r7, #4]
	config->port = 1883;
   2f10c:	687b      	ldr	r3, [r7, #4]
   2f10e:	4a0c      	ldr	r2, [pc, #48]	; (2f140 <mqtt_get_config_defaults+0x3c>)
   2f110:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   2f112:	687b      	ldr	r3, [r7, #4]
   2f114:	2200      	movs	r2, #0
   2f116:	709a      	strb	r2, [r3, #2]
	config->keep_alive = 60;
   2f118:	687b      	ldr	r3, [r7, #4]
   2f11a:	223c      	movs	r2, #60	; 0x3c
   2f11c:	809a      	strh	r2, [r3, #4]
	/* Below configuration must be initialized by Application */
	config->read_buffer = NULL;
   2f11e:	687b      	ldr	r3, [r7, #4]
   2f120:	2200      	movs	r2, #0
   2f122:	609a      	str	r2, [r3, #8]
	config->send_buffer = NULL;
   2f124:	687b      	ldr	r3, [r7, #4]
   2f126:	2200      	movs	r2, #0
   2f128:	611a      	str	r2, [r3, #16]
	config->read_buffer_size = 0;
   2f12a:	687b      	ldr	r3, [r7, #4]
   2f12c:	2200      	movs	r2, #0
   2f12e:	60da      	str	r2, [r3, #12]
	config->send_buffer_size = 0;
   2f130:	687b      	ldr	r3, [r7, #4]
   2f132:	2200      	movs	r2, #0
   2f134:	615a      	str	r2, [r3, #20]
}
   2f136:	46c0      	nop			; (mov r8, r8)
   2f138:	46bd      	mov	sp, r7
   2f13a:	b002      	add	sp, #8
   2f13c:	bd80      	pop	{r7, pc}
   2f13e:	46c0      	nop			; (mov r8, r8)
   2f140:	0000075b 	.word	0x0000075b

0002f144 <mqtt_register_callback>:

int mqtt_register_callback(struct mqtt_module *module, mqtt_callback_t callback)
{
   2f144:	b580      	push	{r7, lr}
   2f146:	b082      	sub	sp, #8
   2f148:	af00      	add	r7, sp, #0
   2f14a:	6078      	str	r0, [r7, #4]
   2f14c:	6039      	str	r1, [r7, #0]
	if(module)
   2f14e:	687b      	ldr	r3, [r7, #4]
   2f150:	2b00      	cmp	r3, #0
   2f152:	d004      	beq.n	2f15e <mqtt_register_callback+0x1a>
	{
		module->callback = callback;
   2f154:	687b      	ldr	r3, [r7, #4]
   2f156:	683a      	ldr	r2, [r7, #0]
   2f158:	601a      	str	r2, [r3, #0]
		return SUCCESS;
   2f15a:	2300      	movs	r3, #0
   2f15c:	e001      	b.n	2f162 <mqtt_register_callback+0x1e>
	}
	else
		return FAILURE;
   2f15e:	2301      	movs	r3, #1
   2f160:	425b      	negs	r3, r3
}
   2f162:	0018      	movs	r0, r3
   2f164:	46bd      	mov	sp, r7
   2f166:	b002      	add	sp, #8
   2f168:	bd80      	pop	{r7, pc}
	...

0002f16c <mqtt_socket_event_handler>:
	module->callback = NULL;
	return SUCCESS;
}

void mqtt_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   2f16c:	b580      	push	{r7, lr}
   2f16e:	b082      	sub	sp, #8
   2f170:	af00      	add	r7, sp, #0
   2f172:	603a      	str	r2, [r7, #0]
   2f174:	1dfb      	adds	r3, r7, #7
   2f176:	1c02      	adds	r2, r0, #0
   2f178:	701a      	strb	r2, [r3, #0]
   2f17a:	1dbb      	adds	r3, r7, #6
   2f17c:	1c0a      	adds	r2, r1, #0
   2f17e:	701a      	strb	r2, [r3, #0]
	tcpClientSocketEventHandler(sock, msg_type, msg_data);
   2f180:	683a      	ldr	r2, [r7, #0]
   2f182:	1dbb      	adds	r3, r7, #6
   2f184:	7819      	ldrb	r1, [r3, #0]
   2f186:	1dfb      	adds	r3, r7, #7
   2f188:	781b      	ldrb	r3, [r3, #0]
   2f18a:	b25b      	sxtb	r3, r3
   2f18c:	0018      	movs	r0, r3
   2f18e:	4b03      	ldr	r3, [pc, #12]	; (2f19c <mqtt_socket_event_handler+0x30>)
   2f190:	4798      	blx	r3
}
   2f192:	46c0      	nop			; (mov r8, r8)
   2f194:	46bd      	mov	sp, r7
   2f196:	b002      	add	sp, #8
   2f198:	bd80      	pop	{r7, pc}
   2f19a:	46c0      	nop			; (mov r8, r8)
   2f19c:	0002ebe9 	.word	0x0002ebe9

0002f1a0 <mqtt_socket_resolve_handler>:

void mqtt_socket_resolve_handler(uint8_t *domain_name, uint32_t server_ip)
{
   2f1a0:	b580      	push	{r7, lr}
   2f1a2:	b082      	sub	sp, #8
   2f1a4:	af00      	add	r7, sp, #0
   2f1a6:	6078      	str	r0, [r7, #4]
   2f1a8:	6039      	str	r1, [r7, #0]
	dnsResolveCallback(domain_name, server_ip);
   2f1aa:	683a      	ldr	r2, [r7, #0]
   2f1ac:	687b      	ldr	r3, [r7, #4]
   2f1ae:	0011      	movs	r1, r2
   2f1b0:	0018      	movs	r0, r3
   2f1b2:	4b03      	ldr	r3, [pc, #12]	; (2f1c0 <mqtt_socket_resolve_handler+0x20>)
   2f1b4:	4798      	blx	r3
}
   2f1b6:	46c0      	nop			; (mov r8, r8)
   2f1b8:	46bd      	mov	sp, r7
   2f1ba:	b002      	add	sp, #8
   2f1bc:	bd80      	pop	{r7, pc}
   2f1be:	46c0      	nop			; (mov r8, r8)
   2f1c0:	0002eb99 	.word	0x0002eb99

0002f1c4 <mqtt_connect>:

int mqtt_connect(struct mqtt_module *module, const char *host)
{
   2f1c4:	b590      	push	{r4, r7, lr}
   2f1c6:	b085      	sub	sp, #20
   2f1c8:	af00      	add	r7, sp, #0
   2f1ca:	6078      	str	r0, [r7, #4]
   2f1cc:	6039      	str	r1, [r7, #0]
	union mqtt_data connResult;
	connResult.sock_connected.result = ConnectNetwork(&(module->network), (char *)host, module->config.port, module->config.tls);
   2f1ce:	687b      	ldr	r3, [r7, #4]
   2f1d0:	3320      	adds	r3, #32
   2f1d2:	0018      	movs	r0, r3
   2f1d4:	687b      	ldr	r3, [r7, #4]
   2f1d6:	889b      	ldrh	r3, [r3, #4]
   2f1d8:	001a      	movs	r2, r3
   2f1da:	687b      	ldr	r3, [r7, #4]
   2f1dc:	799b      	ldrb	r3, [r3, #6]
   2f1de:	6839      	ldr	r1, [r7, #0]
   2f1e0:	4c09      	ldr	r4, [pc, #36]	; (2f208 <mqtt_connect+0x44>)
   2f1e2:	47a0      	blx	r4
   2f1e4:	0003      	movs	r3, r0
   2f1e6:	60fb      	str	r3, [r7, #12]
	if(module->callback)
   2f1e8:	687b      	ldr	r3, [r7, #4]
   2f1ea:	681b      	ldr	r3, [r3, #0]
   2f1ec:	2b00      	cmp	r3, #0
   2f1ee:	d006      	beq.n	2f1fe <mqtt_connect+0x3a>
		module->callback(module, MQTT_CALLBACK_SOCK_CONNECTED, &connResult);
   2f1f0:	687b      	ldr	r3, [r7, #4]
   2f1f2:	681b      	ldr	r3, [r3, #0]
   2f1f4:	220c      	movs	r2, #12
   2f1f6:	18ba      	adds	r2, r7, r2
   2f1f8:	6878      	ldr	r0, [r7, #4]
   2f1fa:	2100      	movs	r1, #0
   2f1fc:	4798      	blx	r3
	return connResult.sock_connected.result;
   2f1fe:	68fb      	ldr	r3, [r7, #12]
}
   2f200:	0018      	movs	r0, r3
   2f202:	46bd      	mov	sp, r7
   2f204:	b005      	add	sp, #20
   2f206:	bd90      	pop	{r4, r7, pc}
   2f208:	0002eee5 	.word	0x0002eee5

0002f20c <mqtt_connect_broker>:

int mqtt_connect_broker(struct mqtt_module *const module, uint8_t clean_session, const char *id, const char *password, const char *client_id, const char *will_topic, const char *will_msg, uint32_t will_msg_len, uint8_t will_qos, uint8_t will_retain)
{
   2f20c:	b580      	push	{r7, lr}
   2f20e:	b09c      	sub	sp, #112	; 0x70
   2f210:	af00      	add	r7, sp, #0
   2f212:	60f8      	str	r0, [r7, #12]
   2f214:	607a      	str	r2, [r7, #4]
   2f216:	603b      	str	r3, [r7, #0]
   2f218:	230b      	movs	r3, #11
   2f21a:	18fb      	adds	r3, r7, r3
   2f21c:	1c0a      	adds	r2, r1, #0
   2f21e:	701a      	strb	r2, [r3, #0]
	// Will Message length is not used by Paho MQTT. 
	int rc;
	union mqtt_data connBrokerResult;
	MQTTPacket_connectData connectData = MQTTPacket_connectData_initializer;
   2f220:	2310      	movs	r3, #16
   2f222:	18fa      	adds	r2, r7, r3
   2f224:	4b31      	ldr	r3, [pc, #196]	; (2f2ec <mqtt_connect_broker+0xe0>)
   2f226:	0010      	movs	r0, r2
   2f228:	0019      	movs	r1, r3
   2f22a:	2358      	movs	r3, #88	; 0x58
   2f22c:	001a      	movs	r2, r3
   2f22e:	4b30      	ldr	r3, [pc, #192]	; (2f2f0 <mqtt_connect_broker+0xe4>)
   2f230:	4798      	blx	r3
		
	connectData.MQTTVersion = 4; //use protocol version 3.1.1
   2f232:	2310      	movs	r3, #16
   2f234:	18fb      	adds	r3, r7, r3
   2f236:	2204      	movs	r2, #4
   2f238:	721a      	strb	r2, [r3, #8]
	connectData.clientID.cstring = (char *)client_id;
   2f23a:	2310      	movs	r3, #16
   2f23c:	18fb      	adds	r3, r7, r3
   2f23e:	6fba      	ldr	r2, [r7, #120]	; 0x78
   2f240:	60da      	str	r2, [r3, #12]
	connectData.username.cstring = (char *)id;
   2f242:	2310      	movs	r3, #16
   2f244:	18fb      	adds	r3, r7, r3
   2f246:	687a      	ldr	r2, [r7, #4]
   2f248:	641a      	str	r2, [r3, #64]	; 0x40
	connectData.password.cstring = (char *)password;
   2f24a:	2310      	movs	r3, #16
   2f24c:	18fb      	adds	r3, r7, r3
   2f24e:	683a      	ldr	r2, [r7, #0]
   2f250:	64da      	str	r2, [r3, #76]	; 0x4c
	connectData.cleansession = clean_session;
   2f252:	2310      	movs	r3, #16
   2f254:	18fb      	adds	r3, r7, r3
   2f256:	220b      	movs	r2, #11
   2f258:	18ba      	adds	r2, r7, r2
   2f25a:	7812      	ldrb	r2, [r2, #0]
   2f25c:	769a      	strb	r2, [r3, #26]
	connectData.will.topicName.cstring = (char *)will_topic;
   2f25e:	2310      	movs	r3, #16
   2f260:	18fb      	adds	r3, r7, r3
   2f262:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   2f264:	625a      	str	r2, [r3, #36]	; 0x24
	connectData.will.message.cstring = (char *)will_msg;
   2f266:	2310      	movs	r3, #16
   2f268:	18fb      	adds	r3, r7, r3
   2f26a:	2280      	movs	r2, #128	; 0x80
   2f26c:	18ba      	adds	r2, r7, r2
   2f26e:	6812      	ldr	r2, [r2, #0]
   2f270:	631a      	str	r2, [r3, #48]	; 0x30
	connectData.will.retained = will_retain;
   2f272:	2310      	movs	r3, #16
   2f274:	18fb      	adds	r3, r7, r3
   2f276:	228c      	movs	r2, #140	; 0x8c
   2f278:	18ba      	adds	r2, r7, r2
   2f27a:	213c      	movs	r1, #60	; 0x3c
   2f27c:	7812      	ldrb	r2, [r2, #0]
   2f27e:	545a      	strb	r2, [r3, r1]
	connectData.will.qos = will_qos;
   2f280:	2310      	movs	r3, #16
   2f282:	18fb      	adds	r3, r7, r3
   2f284:	2288      	movs	r2, #136	; 0x88
   2f286:	18ba      	adds	r2, r7, r2
   2f288:	213d      	movs	r1, #61	; 0x3d
   2f28a:	7812      	ldrb	r2, [r2, #0]
   2f28c:	545a      	strb	r2, [r3, r1]
	
	if(will_topic && will_msg)
   2f28e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   2f290:	2b00      	cmp	r3, #0
   2f292:	d008      	beq.n	2f2a6 <mqtt_connect_broker+0x9a>
   2f294:	2380      	movs	r3, #128	; 0x80
   2f296:	18fb      	adds	r3, r7, r3
   2f298:	681b      	ldr	r3, [r3, #0]
   2f29a:	2b00      	cmp	r3, #0
   2f29c:	d003      	beq.n	2f2a6 <mqtt_connect_broker+0x9a>
		connectData.willFlag = 1;
   2f29e:	2310      	movs	r3, #16
   2f2a0:	18fb      	adds	r3, r7, r3
   2f2a2:	2201      	movs	r2, #1
   2f2a4:	76da      	strb	r2, [r3, #27]
		
	rc = MQTTConnect(module->client, &connectData);
   2f2a6:	68fb      	ldr	r3, [r7, #12]
   2f2a8:	69db      	ldr	r3, [r3, #28]
   2f2aa:	2210      	movs	r2, #16
   2f2ac:	18ba      	adds	r2, r7, r2
   2f2ae:	0011      	movs	r1, r2
   2f2b0:	0018      	movs	r0, r3
   2f2b2:	4b10      	ldr	r3, [pc, #64]	; (2f2f4 <mqtt_connect_broker+0xe8>)
   2f2b4:	4798      	blx	r3
   2f2b6:	0003      	movs	r3, r0
   2f2b8:	66fb      	str	r3, [r7, #108]	; 0x6c
	
	connBrokerResult.connected.result = rc;
   2f2ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   2f2bc:	b2da      	uxtb	r2, r3
   2f2be:	2368      	movs	r3, #104	; 0x68
   2f2c0:	18fb      	adds	r3, r7, r3
   2f2c2:	701a      	strb	r2, [r3, #0]
	if(module->callback)
   2f2c4:	68fb      	ldr	r3, [r7, #12]
   2f2c6:	681b      	ldr	r3, [r3, #0]
   2f2c8:	2b00      	cmp	r3, #0
   2f2ca:	d006      	beq.n	2f2da <mqtt_connect_broker+0xce>
		module->callback(module, MQTT_CALLBACK_CONNECTED, &connBrokerResult);
   2f2cc:	68fb      	ldr	r3, [r7, #12]
   2f2ce:	681b      	ldr	r3, [r3, #0]
   2f2d0:	2268      	movs	r2, #104	; 0x68
   2f2d2:	18ba      	adds	r2, r7, r2
   2f2d4:	68f8      	ldr	r0, [r7, #12]
   2f2d6:	2101      	movs	r1, #1
   2f2d8:	4798      	blx	r3
	
	module->isConnected = true;
   2f2da:	68fb      	ldr	r3, [r7, #12]
   2f2dc:	2234      	movs	r2, #52	; 0x34
   2f2de:	2101      	movs	r1, #1
   2f2e0:	5499      	strb	r1, [r3, r2]
	return rc;
   2f2e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
   2f2e4:	0018      	movs	r0, r3
   2f2e6:	46bd      	mov	sp, r7
   2f2e8:	b01c      	add	sp, #112	; 0x70
   2f2ea:	bd80      	pop	{r7, pc}
   2f2ec:	0003a5e0 	.word	0x0003a5e0
   2f2f0:	0003404d 	.word	0x0003404d
   2f2f4:	0002e635 	.word	0x0002e635

0002f2f8 <mqtt_disconnect>:

int mqtt_disconnect(struct mqtt_module *const module, int force_close)
{
   2f2f8:	b580      	push	{r7, lr}
   2f2fa:	b084      	sub	sp, #16
   2f2fc:	af00      	add	r7, sp, #0
   2f2fe:	6078      	str	r0, [r7, #4]
   2f300:	6039      	str	r1, [r7, #0]
	//force_close is not used by Paho MQTT
	int rc;
	union mqtt_data disconnectResult;
	
	rc = MQTTDisconnect(module->client);
   2f302:	687b      	ldr	r3, [r7, #4]
   2f304:	69db      	ldr	r3, [r3, #28]
   2f306:	0018      	movs	r0, r3
   2f308:	4b0c      	ldr	r3, [pc, #48]	; (2f33c <mqtt_disconnect+0x44>)
   2f30a:	4798      	blx	r3
   2f30c:	0003      	movs	r3, r0
   2f30e:	60fb      	str	r3, [r7, #12]
	
	disconnectResult.disconnected.reason = rc;
   2f310:	68fb      	ldr	r3, [r7, #12]
   2f312:	60bb      	str	r3, [r7, #8]
	
	if(module->callback)
   2f314:	687b      	ldr	r3, [r7, #4]
   2f316:	681b      	ldr	r3, [r3, #0]
   2f318:	2b00      	cmp	r3, #0
   2f31a:	d006      	beq.n	2f32a <mqtt_disconnect+0x32>
		module->callback(module, MQTT_CALLBACK_DISCONNECTED, &disconnectResult);
   2f31c:	687b      	ldr	r3, [r7, #4]
   2f31e:	681b      	ldr	r3, [r3, #0]
   2f320:	2208      	movs	r2, #8
   2f322:	18ba      	adds	r2, r7, r2
   2f324:	6878      	ldr	r0, [r7, #4]
   2f326:	2105      	movs	r1, #5
   2f328:	4798      	blx	r3
	
	module->isConnected = false;
   2f32a:	687b      	ldr	r3, [r7, #4]
   2f32c:	2234      	movs	r2, #52	; 0x34
   2f32e:	2100      	movs	r1, #0
   2f330:	5499      	strb	r1, [r3, r2]
	return rc;
   2f332:	68fb      	ldr	r3, [r7, #12]
}
   2f334:	0018      	movs	r0, r3
   2f336:	46bd      	mov	sp, r7
   2f338:	b004      	add	sp, #16
   2f33a:	bd80      	pop	{r7, pc}
   2f33c:	0002eac1 	.word	0x0002eac1

0002f340 <mqtt_publish>:

int mqtt_publish(struct mqtt_module *const module, const char *topic, const char *msg, uint32_t msg_len, uint8_t qos, uint8_t retain)
{
   2f340:	b580      	push	{r7, lr}
   2f342:	b08a      	sub	sp, #40	; 0x28
   2f344:	af00      	add	r7, sp, #0
   2f346:	60f8      	str	r0, [r7, #12]
   2f348:	60b9      	str	r1, [r7, #8]
   2f34a:	607a      	str	r2, [r7, #4]
   2f34c:	603b      	str	r3, [r7, #0]
	int rc;
	MQTTMessage mqttMsg;	
	
	mqttMsg.qos = qos;
   2f34e:	2314      	movs	r3, #20
   2f350:	18fb      	adds	r3, r7, r3
   2f352:	2230      	movs	r2, #48	; 0x30
   2f354:	18ba      	adds	r2, r7, r2
   2f356:	7812      	ldrb	r2, [r2, #0]
   2f358:	701a      	strb	r2, [r3, #0]
	mqttMsg.payload = (char *)msg;
   2f35a:	2314      	movs	r3, #20
   2f35c:	18fb      	adds	r3, r7, r3
   2f35e:	687a      	ldr	r2, [r7, #4]
   2f360:	609a      	str	r2, [r3, #8]
	mqttMsg.payloadlen = (size_t)msg_len;
   2f362:	2314      	movs	r3, #20
   2f364:	18fb      	adds	r3, r7, r3
   2f366:	683a      	ldr	r2, [r7, #0]
   2f368:	60da      	str	r2, [r3, #12]
	mqttMsg.retained = retain;
   2f36a:	2314      	movs	r3, #20
   2f36c:	18fb      	adds	r3, r7, r3
   2f36e:	2234      	movs	r2, #52	; 0x34
   2f370:	18ba      	adds	r2, r7, r2
   2f372:	7812      	ldrb	r2, [r2, #0]
   2f374:	705a      	strb	r2, [r3, #1]
	
	rc = MQTTPublish(module->client, topic, &mqttMsg);
   2f376:	68fb      	ldr	r3, [r7, #12]
   2f378:	69db      	ldr	r3, [r3, #28]
   2f37a:	2214      	movs	r2, #20
   2f37c:	18ba      	adds	r2, r7, r2
   2f37e:	68b9      	ldr	r1, [r7, #8]
   2f380:	0018      	movs	r0, r3
   2f382:	4b09      	ldr	r3, [pc, #36]	; (2f3a8 <mqtt_publish+0x68>)
   2f384:	4798      	blx	r3
   2f386:	0003      	movs	r3, r0
   2f388:	627b      	str	r3, [r7, #36]	; 0x24
	
	if(module->callback)
   2f38a:	68fb      	ldr	r3, [r7, #12]
   2f38c:	681b      	ldr	r3, [r3, #0]
   2f38e:	2b00      	cmp	r3, #0
   2f390:	d005      	beq.n	2f39e <mqtt_publish+0x5e>
		module->callback(module, MQTT_CALLBACK_PUBLISHED, NULL);
   2f392:	68fb      	ldr	r3, [r7, #12]
   2f394:	681b      	ldr	r3, [r3, #0]
   2f396:	68f8      	ldr	r0, [r7, #12]
   2f398:	2200      	movs	r2, #0
   2f39a:	2102      	movs	r1, #2
   2f39c:	4798      	blx	r3
	
	return rc;
   2f39e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2f3a0:	0018      	movs	r0, r3
   2f3a2:	46bd      	mov	sp, r7
   2f3a4:	b00a      	add	sp, #40	; 0x28
   2f3a6:	bd80      	pop	{r7, pc}
   2f3a8:	0002e901 	.word	0x0002e901

0002f3ac <mqtt_subscribe>:

int mqtt_subscribe(struct mqtt_module *module, const char *topic, uint8_t qos, messageHandler msgHandler)
{
   2f3ac:	b590      	push	{r4, r7, lr}
   2f3ae:	b087      	sub	sp, #28
   2f3b0:	af00      	add	r7, sp, #0
   2f3b2:	60f8      	str	r0, [r7, #12]
   2f3b4:	60b9      	str	r1, [r7, #8]
   2f3b6:	603b      	str	r3, [r7, #0]
   2f3b8:	1dfb      	adds	r3, r7, #7
   2f3ba:	701a      	strb	r2, [r3, #0]
	int rc;
	
	rc = MQTTSubscribe(module->client, topic, qos, msgHandler);
   2f3bc:	68fb      	ldr	r3, [r7, #12]
   2f3be:	69d8      	ldr	r0, [r3, #28]
   2f3c0:	683c      	ldr	r4, [r7, #0]
   2f3c2:	1dfb      	adds	r3, r7, #7
   2f3c4:	781a      	ldrb	r2, [r3, #0]
   2f3c6:	68b9      	ldr	r1, [r7, #8]
   2f3c8:	0023      	movs	r3, r4
   2f3ca:	4c09      	ldr	r4, [pc, #36]	; (2f3f0 <mqtt_subscribe+0x44>)
   2f3cc:	47a0      	blx	r4
   2f3ce:	0003      	movs	r3, r0
   2f3d0:	617b      	str	r3, [r7, #20]
	
	if(module->callback)
   2f3d2:	68fb      	ldr	r3, [r7, #12]
   2f3d4:	681b      	ldr	r3, [r3, #0]
   2f3d6:	2b00      	cmp	r3, #0
   2f3d8:	d005      	beq.n	2f3e6 <mqtt_subscribe+0x3a>
		module->callback(module, MQTT_CALLBACK_SUBSCRIBED, NULL);	
   2f3da:	68fb      	ldr	r3, [r7, #12]
   2f3dc:	681b      	ldr	r3, [r3, #0]
   2f3de:	68f8      	ldr	r0, [r7, #12]
   2f3e0:	2200      	movs	r2, #0
   2f3e2:	2103      	movs	r1, #3
   2f3e4:	4798      	blx	r3
	
	return rc;
   2f3e6:	697b      	ldr	r3, [r7, #20]
}
   2f3e8:	0018      	movs	r0, r3
   2f3ea:	46bd      	mov	sp, r7
   2f3ec:	b007      	add	sp, #28
   2f3ee:	bd90      	pop	{r4, r7, pc}
   2f3f0:	0002e775 	.word	0x0002e775

0002f3f4 <mqtt_yield>:
	
	return rc;
}

int mqtt_yield(struct mqtt_module *module, int timeout_ms)
{
   2f3f4:	b580      	push	{r7, lr}
   2f3f6:	b082      	sub	sp, #8
   2f3f8:	af00      	add	r7, sp, #0
   2f3fa:	6078      	str	r0, [r7, #4]
   2f3fc:	6039      	str	r1, [r7, #0]
	return MQTTYield(module->client, timeout_ms);
   2f3fe:	687b      	ldr	r3, [r7, #4]
   2f400:	69db      	ldr	r3, [r3, #28]
   2f402:	683a      	ldr	r2, [r7, #0]
   2f404:	0011      	movs	r1, r2
   2f406:	0018      	movs	r0, r3
   2f408:	4b03      	ldr	r3, [pc, #12]	; (2f418 <mqtt_yield+0x24>)
   2f40a:	4798      	blx	r3
   2f40c:	0003      	movs	r3, r0
   2f40e:	0018      	movs	r0, r3
   2f410:	46bd      	mov	sp, r7
   2f412:	b002      	add	sp, #8
   2f414:	bd80      	pop	{r7, pc}
   2f416:	46c0      	nop			; (mov r8, r8)
   2f418:	0002e57d 	.word	0x0002e57d

0002f41c <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
   2f41c:	b590      	push	{r4, r7, lr}
   2f41e:	b085      	sub	sp, #20
   2f420:	af00      	add	r7, sp, #0
   2f422:	6078      	str	r0, [r7, #4]
	int len = 0;
   2f424:	2300      	movs	r3, #0
   2f426:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
   2f428:	687b      	ldr	r3, [r7, #4]
   2f42a:	7a1b      	ldrb	r3, [r3, #8]
   2f42c:	2b03      	cmp	r3, #3
   2f42e:	d102      	bne.n	2f436 <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
   2f430:	230c      	movs	r3, #12
   2f432:	60fb      	str	r3, [r7, #12]
   2f434:	e005      	b.n	2f442 <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
   2f436:	687b      	ldr	r3, [r7, #4]
   2f438:	7a1b      	ldrb	r3, [r3, #8]
   2f43a:	2b04      	cmp	r3, #4
   2f43c:	d101      	bne.n	2f442 <MQTTSerialize_connectLength+0x26>
		len = 10;
   2f43e:	230a      	movs	r3, #10
   2f440:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
   2f442:	687b      	ldr	r3, [r7, #4]
   2f444:	68d8      	ldr	r0, [r3, #12]
   2f446:	6919      	ldr	r1, [r3, #16]
   2f448:	695a      	ldr	r2, [r3, #20]
   2f44a:	4b25      	ldr	r3, [pc, #148]	; (2f4e0 <MQTTSerialize_connectLength+0xc4>)
   2f44c:	4798      	blx	r3
   2f44e:	0003      	movs	r3, r0
   2f450:	3302      	adds	r3, #2
   2f452:	68fa      	ldr	r2, [r7, #12]
   2f454:	18d3      	adds	r3, r2, r3
   2f456:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
   2f458:	687b      	ldr	r3, [r7, #4]
   2f45a:	7edb      	ldrb	r3, [r3, #27]
   2f45c:	2b00      	cmp	r3, #0
   2f45e:	d013      	beq.n	2f488 <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
   2f460:	687b      	ldr	r3, [r7, #4]
   2f462:	6a58      	ldr	r0, [r3, #36]	; 0x24
   2f464:	6a99      	ldr	r1, [r3, #40]	; 0x28
   2f466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2f468:	4b1d      	ldr	r3, [pc, #116]	; (2f4e0 <MQTTSerialize_connectLength+0xc4>)
   2f46a:	4798      	blx	r3
   2f46c:	0003      	movs	r3, r0
   2f46e:	1c9c      	adds	r4, r3, #2
   2f470:	687b      	ldr	r3, [r7, #4]
   2f472:	6b18      	ldr	r0, [r3, #48]	; 0x30
   2f474:	6b59      	ldr	r1, [r3, #52]	; 0x34
   2f476:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   2f478:	4b19      	ldr	r3, [pc, #100]	; (2f4e0 <MQTTSerialize_connectLength+0xc4>)
   2f47a:	4798      	blx	r3
   2f47c:	0003      	movs	r3, r0
   2f47e:	18e3      	adds	r3, r4, r3
   2f480:	3302      	adds	r3, #2
   2f482:	68fa      	ldr	r2, [r7, #12]
   2f484:	18d3      	adds	r3, r2, r3
   2f486:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
   2f488:	687b      	ldr	r3, [r7, #4]
   2f48a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   2f48c:	2b00      	cmp	r3, #0
   2f48e:	d103      	bne.n	2f498 <MQTTSerialize_connectLength+0x7c>
   2f490:	687b      	ldr	r3, [r7, #4]
   2f492:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2f494:	2b00      	cmp	r3, #0
   2f496:	d00a      	beq.n	2f4ae <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
   2f498:	687b      	ldr	r3, [r7, #4]
   2f49a:	6c18      	ldr	r0, [r3, #64]	; 0x40
   2f49c:	6c59      	ldr	r1, [r3, #68]	; 0x44
   2f49e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   2f4a0:	4b0f      	ldr	r3, [pc, #60]	; (2f4e0 <MQTTSerialize_connectLength+0xc4>)
   2f4a2:	4798      	blx	r3
   2f4a4:	0003      	movs	r3, r0
   2f4a6:	3302      	adds	r3, #2
   2f4a8:	68fa      	ldr	r2, [r7, #12]
   2f4aa:	18d3      	adds	r3, r2, r3
   2f4ac:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
   2f4ae:	687b      	ldr	r3, [r7, #4]
   2f4b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2f4b2:	2b00      	cmp	r3, #0
   2f4b4:	d103      	bne.n	2f4be <MQTTSerialize_connectLength+0xa2>
   2f4b6:	687b      	ldr	r3, [r7, #4]
   2f4b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   2f4ba:	2b00      	cmp	r3, #0
   2f4bc:	d00a      	beq.n	2f4d4 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
   2f4be:	687b      	ldr	r3, [r7, #4]
   2f4c0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
   2f4c2:	6d19      	ldr	r1, [r3, #80]	; 0x50
   2f4c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   2f4c6:	4b06      	ldr	r3, [pc, #24]	; (2f4e0 <MQTTSerialize_connectLength+0xc4>)
   2f4c8:	4798      	blx	r3
   2f4ca:	0003      	movs	r3, r0
   2f4cc:	3302      	adds	r3, #2
   2f4ce:	68fa      	ldr	r2, [r7, #12]
   2f4d0:	18d3      	adds	r3, r2, r3
   2f4d2:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
   2f4d4:	68fb      	ldr	r3, [r7, #12]
}
   2f4d6:	0018      	movs	r0, r3
   2f4d8:	46bd      	mov	sp, r7
   2f4da:	b005      	add	sp, #20
   2f4dc:	bd90      	pop	{r4, r7, pc}
   2f4de:	46c0      	nop			; (mov r8, r8)
   2f4e0:	0002fe8d 	.word	0x0002fe8d

0002f4e4 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
   2f4e4:	b590      	push	{r4, r7, lr}
   2f4e6:	b08b      	sub	sp, #44	; 0x2c
   2f4e8:	af00      	add	r7, sp, #0
   2f4ea:	60f8      	str	r0, [r7, #12]
   2f4ec:	60b9      	str	r1, [r7, #8]
   2f4ee:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
   2f4f0:	68fb      	ldr	r3, [r7, #12]
   2f4f2:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
   2f4f4:	2300      	movs	r3, #0
   2f4f6:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
   2f4f8:	2300      	movs	r3, #0
   2f4fa:	617b      	str	r3, [r7, #20]
	int len = 0;
   2f4fc:	2300      	movs	r3, #0
   2f4fe:	623b      	str	r3, [r7, #32]
	int rc = -1;
   2f500:	2301      	movs	r3, #1
   2f502:	425b      	negs	r3, r3
   2f504:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
   2f506:	687b      	ldr	r3, [r7, #4]
   2f508:	0018      	movs	r0, r3
   2f50a:	4b8c      	ldr	r3, [pc, #560]	; (2f73c <MQTTSerialize_connect+0x258>)
   2f50c:	4798      	blx	r3
   2f50e:	0003      	movs	r3, r0
   2f510:	623b      	str	r3, [r7, #32]
   2f512:	6a3b      	ldr	r3, [r7, #32]
   2f514:	0018      	movs	r0, r3
   2f516:	4b8a      	ldr	r3, [pc, #552]	; (2f740 <MQTTSerialize_connect+0x25c>)
   2f518:	4798      	blx	r3
   2f51a:	0002      	movs	r2, r0
   2f51c:	68bb      	ldr	r3, [r7, #8]
   2f51e:	429a      	cmp	r2, r3
   2f520:	dd03      	ble.n	2f52a <MQTTSerialize_connect+0x46>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   2f522:	2302      	movs	r3, #2
   2f524:	425b      	negs	r3, r3
   2f526:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   2f528:	e103      	b.n	2f732 <MQTTSerialize_connect+0x24e>
	}

	header.byte = 0;
   2f52a:	2318      	movs	r3, #24
   2f52c:	18fb      	adds	r3, r7, r3
   2f52e:	2200      	movs	r2, #0
   2f530:	701a      	strb	r2, [r3, #0]
	header.bits.type = CONNECT;
   2f532:	2318      	movs	r3, #24
   2f534:	18fb      	adds	r3, r7, r3
   2f536:	781a      	ldrb	r2, [r3, #0]
   2f538:	210f      	movs	r1, #15
   2f53a:	400a      	ands	r2, r1
   2f53c:	1c11      	adds	r1, r2, #0
   2f53e:	2210      	movs	r2, #16
   2f540:	430a      	orrs	r2, r1
   2f542:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   2f544:	2318      	movs	r3, #24
   2f546:	18fb      	adds	r3, r7, r3
   2f548:	781a      	ldrb	r2, [r3, #0]
   2f54a:	231c      	movs	r3, #28
   2f54c:	18fb      	adds	r3, r7, r3
   2f54e:	0011      	movs	r1, r2
   2f550:	0018      	movs	r0, r3
   2f552:	4b7c      	ldr	r3, [pc, #496]	; (2f744 <MQTTSerialize_connect+0x260>)
   2f554:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
   2f556:	69fb      	ldr	r3, [r7, #28]
   2f558:	6a3a      	ldr	r2, [r7, #32]
   2f55a:	0011      	movs	r1, r2
   2f55c:	0018      	movs	r0, r3
   2f55e:	4b7a      	ldr	r3, [pc, #488]	; (2f748 <MQTTSerialize_connect+0x264>)
   2f560:	4798      	blx	r3
   2f562:	0002      	movs	r2, r0
   2f564:	69fb      	ldr	r3, [r7, #28]
   2f566:	189b      	adds	r3, r3, r2
   2f568:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
   2f56a:	687b      	ldr	r3, [r7, #4]
   2f56c:	7a1b      	ldrb	r3, [r3, #8]
   2f56e:	2b04      	cmp	r3, #4
   2f570:	d10d      	bne.n	2f58e <MQTTSerialize_connect+0xaa>
	{
		writeCString(&ptr, "MQTT");
   2f572:	4a76      	ldr	r2, [pc, #472]	; (2f74c <MQTTSerialize_connect+0x268>)
   2f574:	231c      	movs	r3, #28
   2f576:	18fb      	adds	r3, r7, r3
   2f578:	0011      	movs	r1, r2
   2f57a:	0018      	movs	r0, r3
   2f57c:	4b74      	ldr	r3, [pc, #464]	; (2f750 <MQTTSerialize_connect+0x26c>)
   2f57e:	4798      	blx	r3
		writeChar(&ptr, (char) 4);
   2f580:	231c      	movs	r3, #28
   2f582:	18fb      	adds	r3, r7, r3
   2f584:	2104      	movs	r1, #4
   2f586:	0018      	movs	r0, r3
   2f588:	4b6e      	ldr	r3, [pc, #440]	; (2f744 <MQTTSerialize_connect+0x260>)
   2f58a:	4798      	blx	r3
   2f58c:	e00c      	b.n	2f5a8 <MQTTSerialize_connect+0xc4>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
   2f58e:	4a71      	ldr	r2, [pc, #452]	; (2f754 <MQTTSerialize_connect+0x270>)
   2f590:	231c      	movs	r3, #28
   2f592:	18fb      	adds	r3, r7, r3
   2f594:	0011      	movs	r1, r2
   2f596:	0018      	movs	r0, r3
   2f598:	4b6d      	ldr	r3, [pc, #436]	; (2f750 <MQTTSerialize_connect+0x26c>)
   2f59a:	4798      	blx	r3
		writeChar(&ptr, (char) 3);
   2f59c:	231c      	movs	r3, #28
   2f59e:	18fb      	adds	r3, r7, r3
   2f5a0:	2103      	movs	r1, #3
   2f5a2:	0018      	movs	r0, r3
   2f5a4:	4b67      	ldr	r3, [pc, #412]	; (2f744 <MQTTSerialize_connect+0x260>)
   2f5a6:	4798      	blx	r3
	}

	flags.all = 0;
   2f5a8:	2314      	movs	r3, #20
   2f5aa:	18fb      	adds	r3, r7, r3
   2f5ac:	2200      	movs	r2, #0
   2f5ae:	701a      	strb	r2, [r3, #0]
	flags.bits.cleansession = options->cleansession;
   2f5b0:	687b      	ldr	r3, [r7, #4]
   2f5b2:	7e9b      	ldrb	r3, [r3, #26]
   2f5b4:	1c1a      	adds	r2, r3, #0
   2f5b6:	2301      	movs	r3, #1
   2f5b8:	4013      	ands	r3, r2
   2f5ba:	b2da      	uxtb	r2, r3
   2f5bc:	2314      	movs	r3, #20
   2f5be:	18fb      	adds	r3, r7, r3
   2f5c0:	2101      	movs	r1, #1
   2f5c2:	400a      	ands	r2, r1
   2f5c4:	1890      	adds	r0, r2, r2
   2f5c6:	781a      	ldrb	r2, [r3, #0]
   2f5c8:	2102      	movs	r1, #2
   2f5ca:	438a      	bics	r2, r1
   2f5cc:	1c11      	adds	r1, r2, #0
   2f5ce:	1c02      	adds	r2, r0, #0
   2f5d0:	430a      	orrs	r2, r1
   2f5d2:	701a      	strb	r2, [r3, #0]
	flags.bits.will = (options->willFlag) ? 1 : 0;
   2f5d4:	687b      	ldr	r3, [r7, #4]
   2f5d6:	7edb      	ldrb	r3, [r3, #27]
   2f5d8:	1e5a      	subs	r2, r3, #1
   2f5da:	4193      	sbcs	r3, r2
   2f5dc:	b2da      	uxtb	r2, r3
   2f5de:	2314      	movs	r3, #20
   2f5e0:	18fb      	adds	r3, r7, r3
   2f5e2:	2101      	movs	r1, #1
   2f5e4:	400a      	ands	r2, r1
   2f5e6:	0090      	lsls	r0, r2, #2
   2f5e8:	781a      	ldrb	r2, [r3, #0]
   2f5ea:	2104      	movs	r1, #4
   2f5ec:	438a      	bics	r2, r1
   2f5ee:	1c11      	adds	r1, r2, #0
   2f5f0:	1c02      	adds	r2, r0, #0
   2f5f2:	430a      	orrs	r2, r1
   2f5f4:	701a      	strb	r2, [r3, #0]
	if (flags.bits.will)
   2f5f6:	2314      	movs	r3, #20
   2f5f8:	18fb      	adds	r3, r7, r3
   2f5fa:	781b      	ldrb	r3, [r3, #0]
   2f5fc:	2204      	movs	r2, #4
   2f5fe:	4013      	ands	r3, r2
   2f600:	b2db      	uxtb	r3, r3
   2f602:	2b00      	cmp	r3, #0
   2f604:	d025      	beq.n	2f652 <MQTTSerialize_connect+0x16e>
	{
		flags.bits.willQoS = options->will.qos;
   2f606:	687b      	ldr	r3, [r7, #4]
   2f608:	223d      	movs	r2, #61	; 0x3d
   2f60a:	5c9b      	ldrb	r3, [r3, r2]
   2f60c:	1c1a      	adds	r2, r3, #0
   2f60e:	2303      	movs	r3, #3
   2f610:	4013      	ands	r3, r2
   2f612:	b2da      	uxtb	r2, r3
   2f614:	2314      	movs	r3, #20
   2f616:	18fb      	adds	r3, r7, r3
   2f618:	2103      	movs	r1, #3
   2f61a:	400a      	ands	r2, r1
   2f61c:	00d0      	lsls	r0, r2, #3
   2f61e:	781a      	ldrb	r2, [r3, #0]
   2f620:	2118      	movs	r1, #24
   2f622:	438a      	bics	r2, r1
   2f624:	1c11      	adds	r1, r2, #0
   2f626:	1c02      	adds	r2, r0, #0
   2f628:	430a      	orrs	r2, r1
   2f62a:	701a      	strb	r2, [r3, #0]
		flags.bits.willRetain = options->will.retained;
   2f62c:	687b      	ldr	r3, [r7, #4]
   2f62e:	223c      	movs	r2, #60	; 0x3c
   2f630:	5c9b      	ldrb	r3, [r3, r2]
   2f632:	1c1a      	adds	r2, r3, #0
   2f634:	2301      	movs	r3, #1
   2f636:	4013      	ands	r3, r2
   2f638:	b2da      	uxtb	r2, r3
   2f63a:	2314      	movs	r3, #20
   2f63c:	18fb      	adds	r3, r7, r3
   2f63e:	2101      	movs	r1, #1
   2f640:	400a      	ands	r2, r1
   2f642:	0150      	lsls	r0, r2, #5
   2f644:	781a      	ldrb	r2, [r3, #0]
   2f646:	2120      	movs	r1, #32
   2f648:	438a      	bics	r2, r1
   2f64a:	1c11      	adds	r1, r2, #0
   2f64c:	1c02      	adds	r2, r0, #0
   2f64e:	430a      	orrs	r2, r1
   2f650:	701a      	strb	r2, [r3, #0]
	}

	if (options->username.cstring || options->username.lenstring.data)
   2f652:	687b      	ldr	r3, [r7, #4]
   2f654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   2f656:	2b00      	cmp	r3, #0
   2f658:	d103      	bne.n	2f662 <MQTTSerialize_connect+0x17e>
   2f65a:	687b      	ldr	r3, [r7, #4]
   2f65c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2f65e:	2b00      	cmp	r3, #0
   2f660:	d006      	beq.n	2f670 <MQTTSerialize_connect+0x18c>
		flags.bits.username = 1;
   2f662:	2314      	movs	r3, #20
   2f664:	18fb      	adds	r3, r7, r3
   2f666:	781a      	ldrb	r2, [r3, #0]
   2f668:	2180      	movs	r1, #128	; 0x80
   2f66a:	4249      	negs	r1, r1
   2f66c:	430a      	orrs	r2, r1
   2f66e:	701a      	strb	r2, [r3, #0]
	if (options->password.cstring || options->password.lenstring.data)
   2f670:	687b      	ldr	r3, [r7, #4]
   2f672:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2f674:	2b00      	cmp	r3, #0
   2f676:	d103      	bne.n	2f680 <MQTTSerialize_connect+0x19c>
   2f678:	687b      	ldr	r3, [r7, #4]
   2f67a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   2f67c:	2b00      	cmp	r3, #0
   2f67e:	d005      	beq.n	2f68c <MQTTSerialize_connect+0x1a8>
		flags.bits.password = 1;
   2f680:	2314      	movs	r3, #20
   2f682:	18fb      	adds	r3, r7, r3
   2f684:	781a      	ldrb	r2, [r3, #0]
   2f686:	2140      	movs	r1, #64	; 0x40
   2f688:	430a      	orrs	r2, r1
   2f68a:	701a      	strb	r2, [r3, #0]

	writeChar(&ptr, flags.all);
   2f68c:	2314      	movs	r3, #20
   2f68e:	18fb      	adds	r3, r7, r3
   2f690:	781a      	ldrb	r2, [r3, #0]
   2f692:	231c      	movs	r3, #28
   2f694:	18fb      	adds	r3, r7, r3
   2f696:	0011      	movs	r1, r2
   2f698:	0018      	movs	r0, r3
   2f69a:	4b2a      	ldr	r3, [pc, #168]	; (2f744 <MQTTSerialize_connect+0x260>)
   2f69c:	4798      	blx	r3
	writeInt(&ptr, options->keepAliveInterval);
   2f69e:	687b      	ldr	r3, [r7, #4]
   2f6a0:	8b1b      	ldrh	r3, [r3, #24]
   2f6a2:	001a      	movs	r2, r3
   2f6a4:	231c      	movs	r3, #28
   2f6a6:	18fb      	adds	r3, r7, r3
   2f6a8:	0011      	movs	r1, r2
   2f6aa:	0018      	movs	r0, r3
   2f6ac:	4b2a      	ldr	r3, [pc, #168]	; (2f758 <MQTTSerialize_connect+0x274>)
   2f6ae:	4798      	blx	r3
	writeMQTTString(&ptr, options->clientID);
   2f6b0:	687b      	ldr	r3, [r7, #4]
   2f6b2:	221c      	movs	r2, #28
   2f6b4:	18b8      	adds	r0, r7, r2
   2f6b6:	68d9      	ldr	r1, [r3, #12]
   2f6b8:	691a      	ldr	r2, [r3, #16]
   2f6ba:	695b      	ldr	r3, [r3, #20]
   2f6bc:	4c27      	ldr	r4, [pc, #156]	; (2f75c <MQTTSerialize_connect+0x278>)
   2f6be:	47a0      	blx	r4
	if (options->willFlag)
   2f6c0:	687b      	ldr	r3, [r7, #4]
   2f6c2:	7edb      	ldrb	r3, [r3, #27]
   2f6c4:	2b00      	cmp	r3, #0
   2f6c6:	d00f      	beq.n	2f6e8 <MQTTSerialize_connect+0x204>
	{
		writeMQTTString(&ptr, options->will.topicName);
   2f6c8:	687b      	ldr	r3, [r7, #4]
   2f6ca:	221c      	movs	r2, #28
   2f6cc:	18b8      	adds	r0, r7, r2
   2f6ce:	6a59      	ldr	r1, [r3, #36]	; 0x24
   2f6d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2f6d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2f6d4:	4c21      	ldr	r4, [pc, #132]	; (2f75c <MQTTSerialize_connect+0x278>)
   2f6d6:	47a0      	blx	r4
		writeMQTTString(&ptr, options->will.message);
   2f6d8:	687b      	ldr	r3, [r7, #4]
   2f6da:	221c      	movs	r2, #28
   2f6dc:	18b8      	adds	r0, r7, r2
   2f6de:	6b19      	ldr	r1, [r3, #48]	; 0x30
   2f6e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   2f6e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   2f6e4:	4c1d      	ldr	r4, [pc, #116]	; (2f75c <MQTTSerialize_connect+0x278>)
   2f6e6:	47a0      	blx	r4
	}
	if (flags.bits.username)
   2f6e8:	2314      	movs	r3, #20
   2f6ea:	18fb      	adds	r3, r7, r3
   2f6ec:	781b      	ldrb	r3, [r3, #0]
   2f6ee:	227f      	movs	r2, #127	; 0x7f
   2f6f0:	4393      	bics	r3, r2
   2f6f2:	b2db      	uxtb	r3, r3
   2f6f4:	2b00      	cmp	r3, #0
   2f6f6:	d007      	beq.n	2f708 <MQTTSerialize_connect+0x224>
		writeMQTTString(&ptr, options->username);
   2f6f8:	687b      	ldr	r3, [r7, #4]
   2f6fa:	221c      	movs	r2, #28
   2f6fc:	18b8      	adds	r0, r7, r2
   2f6fe:	6c19      	ldr	r1, [r3, #64]	; 0x40
   2f700:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   2f702:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2f704:	4c15      	ldr	r4, [pc, #84]	; (2f75c <MQTTSerialize_connect+0x278>)
   2f706:	47a0      	blx	r4
	if (flags.bits.password)
   2f708:	2314      	movs	r3, #20
   2f70a:	18fb      	adds	r3, r7, r3
   2f70c:	781b      	ldrb	r3, [r3, #0]
   2f70e:	2240      	movs	r2, #64	; 0x40
   2f710:	4013      	ands	r3, r2
   2f712:	b2db      	uxtb	r3, r3
   2f714:	2b00      	cmp	r3, #0
   2f716:	d007      	beq.n	2f728 <MQTTSerialize_connect+0x244>
		writeMQTTString(&ptr, options->password);
   2f718:	687b      	ldr	r3, [r7, #4]
   2f71a:	221c      	movs	r2, #28
   2f71c:	18b8      	adds	r0, r7, r2
   2f71e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   2f720:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   2f722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   2f724:	4c0d      	ldr	r4, [pc, #52]	; (2f75c <MQTTSerialize_connect+0x278>)
   2f726:	47a0      	blx	r4

	rc = ptr - buf;
   2f728:	69fb      	ldr	r3, [r7, #28]
   2f72a:	001a      	movs	r2, r3
   2f72c:	68fb      	ldr	r3, [r7, #12]
   2f72e:	1ad3      	subs	r3, r2, r3
   2f730:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
   2f732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2f734:	0018      	movs	r0, r3
   2f736:	46bd      	mov	sp, r7
   2f738:	b00b      	add	sp, #44	; 0x2c
   2f73a:	bd90      	pop	{r4, r7, pc}
   2f73c:	0002f41d 	.word	0x0002f41d
   2f740:	0002fbb1 	.word	0x0002fbb1
   2f744:	0002fcd3 	.word	0x0002fcd3
   2f748:	0002fab9 	.word	0x0002fab9
   2f74c:	0003a638 	.word	0x0003a638
   2f750:	0002fd55 	.word	0x0002fd55
   2f754:	0003a640 	.word	0x0003a640
   2f758:	0002fcfd 	.word	0x0002fcfd
   2f75c:	0002fda5 	.word	0x0002fda5

0002f760 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
   2f760:	b580      	push	{r7, lr}
   2f762:	b08a      	sub	sp, #40	; 0x28
   2f764:	af00      	add	r7, sp, #0
   2f766:	60f8      	str	r0, [r7, #12]
   2f768:	60b9      	str	r1, [r7, #8]
   2f76a:	607a      	str	r2, [r7, #4]
   2f76c:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   2f76e:	2300      	movs	r3, #0
   2f770:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   2f772:	687b      	ldr	r3, [r7, #4]
   2f774:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   2f776:	2300      	movs	r3, #0
   2f778:	623b      	str	r3, [r7, #32]
	int rc = 0;
   2f77a:	2300      	movs	r3, #0
   2f77c:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
   2f77e:	2300      	movs	r3, #0
   2f780:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   2f782:	2318      	movs	r3, #24
   2f784:	18fb      	adds	r3, r7, r3
   2f786:	0018      	movs	r0, r3
   2f788:	4b25      	ldr	r3, [pc, #148]	; (2f820 <MQTTDeserialize_connack+0xc0>)
   2f78a:	4798      	blx	r3
   2f78c:	0003      	movs	r3, r0
   2f78e:	001a      	movs	r2, r3
   2f790:	231c      	movs	r3, #28
   2f792:	18fb      	adds	r3, r7, r3
   2f794:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != CONNACK)
   2f796:	231c      	movs	r3, #28
   2f798:	18fb      	adds	r3, r7, r3
   2f79a:	781b      	ldrb	r3, [r3, #0]
   2f79c:	220f      	movs	r2, #15
   2f79e:	4393      	bics	r3, r2
   2f7a0:	b2db      	uxtb	r3, r3
   2f7a2:	2b20      	cmp	r3, #32
   2f7a4:	d134      	bne.n	2f810 <MQTTDeserialize_connack+0xb0>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   2f7a6:	69bb      	ldr	r3, [r7, #24]
   2f7a8:	2214      	movs	r2, #20
   2f7aa:	18ba      	adds	r2, r7, r2
   2f7ac:	0011      	movs	r1, r2
   2f7ae:	0018      	movs	r0, r3
   2f7b0:	4b1c      	ldr	r3, [pc, #112]	; (2f824 <MQTTDeserialize_connack+0xc4>)
   2f7b2:	4798      	blx	r3
   2f7b4:	0003      	movs	r3, r0
   2f7b6:	627b      	str	r3, [r7, #36]	; 0x24
   2f7b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2f7ba:	69bb      	ldr	r3, [r7, #24]
   2f7bc:	189b      	adds	r3, r3, r2
   2f7be:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   2f7c0:	69bb      	ldr	r3, [r7, #24]
   2f7c2:	697a      	ldr	r2, [r7, #20]
   2f7c4:	189b      	adds	r3, r3, r2
   2f7c6:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   2f7c8:	6a3b      	ldr	r3, [r7, #32]
   2f7ca:	69ba      	ldr	r2, [r7, #24]
   2f7cc:	1a9b      	subs	r3, r3, r2
   2f7ce:	2b01      	cmp	r3, #1
   2f7d0:	dd20      	ble.n	2f814 <MQTTDeserialize_connack+0xb4>
		goto exit;

	flags.all = readChar(&curdata);
   2f7d2:	2318      	movs	r3, #24
   2f7d4:	18fb      	adds	r3, r7, r3
   2f7d6:	0018      	movs	r0, r3
   2f7d8:	4b11      	ldr	r3, [pc, #68]	; (2f820 <MQTTDeserialize_connack+0xc0>)
   2f7da:	4798      	blx	r3
   2f7dc:	0003      	movs	r3, r0
   2f7de:	001a      	movs	r2, r3
   2f7e0:	2310      	movs	r3, #16
   2f7e2:	18fb      	adds	r3, r7, r3
   2f7e4:	701a      	strb	r2, [r3, #0]
	*sessionPresent = flags.bits.sessionpresent;
   2f7e6:	2310      	movs	r3, #16
   2f7e8:	18fb      	adds	r3, r7, r3
   2f7ea:	781b      	ldrb	r3, [r3, #0]
   2f7ec:	061b      	lsls	r3, r3, #24
   2f7ee:	0fdb      	lsrs	r3, r3, #31
   2f7f0:	b2db      	uxtb	r3, r3
   2f7f2:	001a      	movs	r2, r3
   2f7f4:	68fb      	ldr	r3, [r7, #12]
   2f7f6:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
   2f7f8:	2318      	movs	r3, #24
   2f7fa:	18fb      	adds	r3, r7, r3
   2f7fc:	0018      	movs	r0, r3
   2f7fe:	4b08      	ldr	r3, [pc, #32]	; (2f820 <MQTTDeserialize_connack+0xc0>)
   2f800:	4798      	blx	r3
   2f802:	0003      	movs	r3, r0
   2f804:	001a      	movs	r2, r3
   2f806:	68bb      	ldr	r3, [r7, #8]
   2f808:	701a      	strb	r2, [r3, #0]

	rc = 1;
   2f80a:	2301      	movs	r3, #1
   2f80c:	627b      	str	r3, [r7, #36]	; 0x24
   2f80e:	e002      	b.n	2f816 <MQTTDeserialize_connack+0xb6>
		goto exit;
   2f810:	46c0      	nop			; (mov r8, r8)
   2f812:	e000      	b.n	2f816 <MQTTDeserialize_connack+0xb6>
		goto exit;
   2f814:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2f816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2f818:	0018      	movs	r0, r3
   2f81a:	46bd      	mov	sp, r7
   2f81c:	b00a      	add	sp, #40	; 0x28
   2f81e:	bd80      	pop	{r7, pc}
   2f820:	0002fca7 	.word	0x0002fca7
   2f824:	0002fc41 	.word	0x0002fc41

0002f828 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
   2f828:	b580      	push	{r7, lr}
   2f82a:	b088      	sub	sp, #32
   2f82c:	af00      	add	r7, sp, #0
   2f82e:	60f8      	str	r0, [r7, #12]
   2f830:	60b9      	str	r1, [r7, #8]
   2f832:	1dfb      	adds	r3, r7, #7
   2f834:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   2f836:	2300      	movs	r3, #0
   2f838:	61bb      	str	r3, [r7, #24]
	int rc = -1;
   2f83a:	2301      	movs	r3, #1
   2f83c:	425b      	negs	r3, r3
   2f83e:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   2f840:	68fb      	ldr	r3, [r7, #12]
   2f842:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
   2f844:	68bb      	ldr	r3, [r7, #8]
   2f846:	2b01      	cmp	r3, #1
   2f848:	dc03      	bgt.n	2f852 <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   2f84a:	2302      	movs	r3, #2
   2f84c:	425b      	negs	r3, r3
   2f84e:	61fb      	str	r3, [r7, #28]
		goto exit;
   2f850:	e029      	b.n	2f8a6 <MQTTSerialize_zero+0x7e>
	}
	header.byte = 0;
   2f852:	2318      	movs	r3, #24
   2f854:	18fb      	adds	r3, r7, r3
   2f856:	2200      	movs	r2, #0
   2f858:	701a      	strb	r2, [r3, #0]
	header.bits.type = packettype;
   2f85a:	1dfb      	adds	r3, r7, #7
   2f85c:	781b      	ldrb	r3, [r3, #0]
   2f85e:	220f      	movs	r2, #15
   2f860:	4013      	ands	r3, r2
   2f862:	b2da      	uxtb	r2, r3
   2f864:	2318      	movs	r3, #24
   2f866:	18fb      	adds	r3, r7, r3
   2f868:	0110      	lsls	r0, r2, #4
   2f86a:	781a      	ldrb	r2, [r3, #0]
   2f86c:	210f      	movs	r1, #15
   2f86e:	400a      	ands	r2, r1
   2f870:	1c11      	adds	r1, r2, #0
   2f872:	1c02      	adds	r2, r0, #0
   2f874:	430a      	orrs	r2, r1
   2f876:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   2f878:	2318      	movs	r3, #24
   2f87a:	18fb      	adds	r3, r7, r3
   2f87c:	781a      	ldrb	r2, [r3, #0]
   2f87e:	2314      	movs	r3, #20
   2f880:	18fb      	adds	r3, r7, r3
   2f882:	0011      	movs	r1, r2
   2f884:	0018      	movs	r0, r3
   2f886:	4b0a      	ldr	r3, [pc, #40]	; (2f8b0 <MQTTSerialize_zero+0x88>)
   2f888:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
   2f88a:	697b      	ldr	r3, [r7, #20]
   2f88c:	2100      	movs	r1, #0
   2f88e:	0018      	movs	r0, r3
   2f890:	4b08      	ldr	r3, [pc, #32]	; (2f8b4 <MQTTSerialize_zero+0x8c>)
   2f892:	4798      	blx	r3
   2f894:	0002      	movs	r2, r0
   2f896:	697b      	ldr	r3, [r7, #20]
   2f898:	189b      	adds	r3, r3, r2
   2f89a:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
   2f89c:	697b      	ldr	r3, [r7, #20]
   2f89e:	001a      	movs	r2, r3
   2f8a0:	68fb      	ldr	r3, [r7, #12]
   2f8a2:	1ad3      	subs	r3, r2, r3
   2f8a4:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2f8a6:	69fb      	ldr	r3, [r7, #28]
}
   2f8a8:	0018      	movs	r0, r3
   2f8aa:	46bd      	mov	sp, r7
   2f8ac:	b008      	add	sp, #32
   2f8ae:	bd80      	pop	{r7, pc}
   2f8b0:	0002fcd3 	.word	0x0002fcd3
   2f8b4:	0002fab9 	.word	0x0002fab9

0002f8b8 <MQTTSerialize_disconnect>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
   2f8b8:	b580      	push	{r7, lr}
   2f8ba:	b082      	sub	sp, #8
   2f8bc:	af00      	add	r7, sp, #0
   2f8be:	6078      	str	r0, [r7, #4]
   2f8c0:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
   2f8c2:	6839      	ldr	r1, [r7, #0]
   2f8c4:	687b      	ldr	r3, [r7, #4]
   2f8c6:	220e      	movs	r2, #14
   2f8c8:	0018      	movs	r0, r3
   2f8ca:	4b03      	ldr	r3, [pc, #12]	; (2f8d8 <MQTTSerialize_disconnect+0x20>)
   2f8cc:	4798      	blx	r3
   2f8ce:	0003      	movs	r3, r0
}
   2f8d0:	0018      	movs	r0, r3
   2f8d2:	46bd      	mov	sp, r7
   2f8d4:	b002      	add	sp, #8
   2f8d6:	bd80      	pop	{r7, pc}
   2f8d8:	0002f829 	.word	0x0002f829

0002f8dc <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
   2f8dc:	b580      	push	{r7, lr}
   2f8de:	b082      	sub	sp, #8
   2f8e0:	af00      	add	r7, sp, #0
   2f8e2:	6078      	str	r0, [r7, #4]
   2f8e4:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
   2f8e6:	6839      	ldr	r1, [r7, #0]
   2f8e8:	687b      	ldr	r3, [r7, #4]
   2f8ea:	220c      	movs	r2, #12
   2f8ec:	0018      	movs	r0, r3
   2f8ee:	4b03      	ldr	r3, [pc, #12]	; (2f8fc <MQTTSerialize_pingreq+0x20>)
   2f8f0:	4798      	blx	r3
   2f8f2:	0003      	movs	r3, r0
}
   2f8f4:	0018      	movs	r0, r3
   2f8f6:	46bd      	mov	sp, r7
   2f8f8:	b002      	add	sp, #8
   2f8fa:	bd80      	pop	{r7, pc}
   2f8fc:	0002f829 	.word	0x0002f829

0002f900 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
   2f900:	b580      	push	{r7, lr}
   2f902:	b08a      	sub	sp, #40	; 0x28
   2f904:	af00      	add	r7, sp, #0
   2f906:	60f8      	str	r0, [r7, #12]
   2f908:	60b9      	str	r1, [r7, #8]
   2f90a:	607a      	str	r2, [r7, #4]
   2f90c:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   2f90e:	2300      	movs	r3, #0
   2f910:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   2f912:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2f914:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   2f916:	2300      	movs	r3, #0
   2f918:	623b      	str	r3, [r7, #32]
	int rc = 0;
   2f91a:	2300      	movs	r3, #0
   2f91c:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
   2f91e:	2300      	movs	r3, #0
   2f920:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   2f922:	2318      	movs	r3, #24
   2f924:	18fb      	adds	r3, r7, r3
   2f926:	0018      	movs	r0, r3
   2f928:	4b32      	ldr	r3, [pc, #200]	; (2f9f4 <MQTTDeserialize_publish+0xf4>)
   2f92a:	4798      	blx	r3
   2f92c:	0003      	movs	r3, r0
   2f92e:	001a      	movs	r2, r3
   2f930:	231c      	movs	r3, #28
   2f932:	18fb      	adds	r3, r7, r3
   2f934:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != PUBLISH)
   2f936:	231c      	movs	r3, #28
   2f938:	18fb      	adds	r3, r7, r3
   2f93a:	781b      	ldrb	r3, [r3, #0]
   2f93c:	220f      	movs	r2, #15
   2f93e:	4393      	bics	r3, r2
   2f940:	b2db      	uxtb	r3, r3
   2f942:	2b30      	cmp	r3, #48	; 0x30
   2f944:	d150      	bne.n	2f9e8 <MQTTDeserialize_publish+0xe8>
		goto exit;
	*dup = header.bits.dup;
   2f946:	231c      	movs	r3, #28
   2f948:	18fb      	adds	r3, r7, r3
   2f94a:	781b      	ldrb	r3, [r3, #0]
   2f94c:	071b      	lsls	r3, r3, #28
   2f94e:	0fdb      	lsrs	r3, r3, #31
   2f950:	b2db      	uxtb	r3, r3
   2f952:	001a      	movs	r2, r3
   2f954:	68fb      	ldr	r3, [r7, #12]
   2f956:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
   2f958:	231c      	movs	r3, #28
   2f95a:	18fb      	adds	r3, r7, r3
   2f95c:	781b      	ldrb	r3, [r3, #0]
   2f95e:	075b      	lsls	r3, r3, #29
   2f960:	0f9b      	lsrs	r3, r3, #30
   2f962:	b2db      	uxtb	r3, r3
   2f964:	001a      	movs	r2, r3
   2f966:	68bb      	ldr	r3, [r7, #8]
   2f968:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
   2f96a:	231c      	movs	r3, #28
   2f96c:	18fb      	adds	r3, r7, r3
   2f96e:	781b      	ldrb	r3, [r3, #0]
   2f970:	07db      	lsls	r3, r3, #31
   2f972:	0fdb      	lsrs	r3, r3, #31
   2f974:	b2db      	uxtb	r3, r3
   2f976:	001a      	movs	r2, r3
   2f978:	687b      	ldr	r3, [r7, #4]
   2f97a:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   2f97c:	69bb      	ldr	r3, [r7, #24]
   2f97e:	2214      	movs	r2, #20
   2f980:	18ba      	adds	r2, r7, r2
   2f982:	0011      	movs	r1, r2
   2f984:	0018      	movs	r0, r3
   2f986:	4b1c      	ldr	r3, [pc, #112]	; (2f9f8 <MQTTDeserialize_publish+0xf8>)
   2f988:	4798      	blx	r3
   2f98a:	0003      	movs	r3, r0
   2f98c:	627b      	str	r3, [r7, #36]	; 0x24
   2f98e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2f990:	69bb      	ldr	r3, [r7, #24]
   2f992:	189b      	adds	r3, r3, r2
   2f994:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   2f996:	69bb      	ldr	r3, [r7, #24]
   2f998:	697a      	ldr	r2, [r7, #20]
   2f99a:	189b      	adds	r3, r3, r2
   2f99c:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   2f99e:	6a3a      	ldr	r2, [r7, #32]
   2f9a0:	2318      	movs	r3, #24
   2f9a2:	18f9      	adds	r1, r7, r3
   2f9a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2f9a6:	0018      	movs	r0, r3
   2f9a8:	4b14      	ldr	r3, [pc, #80]	; (2f9fc <MQTTDeserialize_publish+0xfc>)
   2f9aa:	4798      	blx	r3
   2f9ac:	1e03      	subs	r3, r0, #0
   2f9ae:	d01c      	beq.n	2f9ea <MQTTDeserialize_publish+0xea>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
   2f9b0:	6a3b      	ldr	r3, [r7, #32]
   2f9b2:	69ba      	ldr	r2, [r7, #24]
   2f9b4:	1a9b      	subs	r3, r3, r2
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   2f9b6:	d418      	bmi.n	2f9ea <MQTTDeserialize_publish+0xea>
		goto exit;

	if (*qos > 0)
   2f9b8:	68bb      	ldr	r3, [r7, #8]
   2f9ba:	681b      	ldr	r3, [r3, #0]
   2f9bc:	2b00      	cmp	r3, #0
   2f9be:	dd08      	ble.n	2f9d2 <MQTTDeserialize_publish+0xd2>
		*packetid = readInt(&curdata);
   2f9c0:	2318      	movs	r3, #24
   2f9c2:	18fb      	adds	r3, r7, r3
   2f9c4:	0018      	movs	r0, r3
   2f9c6:	4b0e      	ldr	r3, [pc, #56]	; (2fa00 <MQTTDeserialize_publish+0x100>)
   2f9c8:	4798      	blx	r3
   2f9ca:	0003      	movs	r3, r0
   2f9cc:	b29a      	uxth	r2, r3
   2f9ce:	683b      	ldr	r3, [r7, #0]
   2f9d0:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
   2f9d2:	6a3b      	ldr	r3, [r7, #32]
   2f9d4:	69ba      	ldr	r2, [r7, #24]
   2f9d6:	1a9a      	subs	r2, r3, r2
   2f9d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2f9da:	601a      	str	r2, [r3, #0]
	*payload = curdata;
   2f9dc:	69ba      	ldr	r2, [r7, #24]
   2f9de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2f9e0:	601a      	str	r2, [r3, #0]
	rc = 1;
   2f9e2:	2301      	movs	r3, #1
   2f9e4:	627b      	str	r3, [r7, #36]	; 0x24
   2f9e6:	e000      	b.n	2f9ea <MQTTDeserialize_publish+0xea>
		goto exit;
   2f9e8:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2f9ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2f9ec:	0018      	movs	r0, r3
   2f9ee:	46bd      	mov	sp, r7
   2f9f0:	b00a      	add	sp, #40	; 0x28
   2f9f2:	bd80      	pop	{r7, pc}
   2f9f4:	0002fca7 	.word	0x0002fca7
   2f9f8:	0002fc41 	.word	0x0002fc41
   2f9fc:	0002fe25 	.word	0x0002fe25
   2fa00:	0002fc75 	.word	0x0002fc75

0002fa04 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
   2fa04:	b580      	push	{r7, lr}
   2fa06:	b08a      	sub	sp, #40	; 0x28
   2fa08:	af00      	add	r7, sp, #0
   2fa0a:	60f8      	str	r0, [r7, #12]
   2fa0c:	60b9      	str	r1, [r7, #8]
   2fa0e:	607a      	str	r2, [r7, #4]
   2fa10:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   2fa12:	2300      	movs	r3, #0
   2fa14:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   2fa16:	683b      	ldr	r3, [r7, #0]
   2fa18:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   2fa1a:	2300      	movs	r3, #0
   2fa1c:	623b      	str	r3, [r7, #32]
	int rc = 0;
   2fa1e:	2300      	movs	r3, #0
   2fa20:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   2fa22:	2318      	movs	r3, #24
   2fa24:	18fb      	adds	r3, r7, r3
   2fa26:	0018      	movs	r0, r3
   2fa28:	4b20      	ldr	r3, [pc, #128]	; (2faac <MQTTDeserialize_ack+0xa8>)
   2fa2a:	4798      	blx	r3
   2fa2c:	0003      	movs	r3, r0
   2fa2e:	001a      	movs	r2, r3
   2fa30:	231c      	movs	r3, #28
   2fa32:	18fb      	adds	r3, r7, r3
   2fa34:	701a      	strb	r2, [r3, #0]
	*dup = header.bits.dup;
   2fa36:	231c      	movs	r3, #28
   2fa38:	18fb      	adds	r3, r7, r3
   2fa3a:	781b      	ldrb	r3, [r3, #0]
   2fa3c:	071b      	lsls	r3, r3, #28
   2fa3e:	0fdb      	lsrs	r3, r3, #31
   2fa40:	b2db      	uxtb	r3, r3
   2fa42:	001a      	movs	r2, r3
   2fa44:	68bb      	ldr	r3, [r7, #8]
   2fa46:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
   2fa48:	231c      	movs	r3, #28
   2fa4a:	18fb      	adds	r3, r7, r3
   2fa4c:	781b      	ldrb	r3, [r3, #0]
   2fa4e:	061b      	lsls	r3, r3, #24
   2fa50:	0f1b      	lsrs	r3, r3, #28
   2fa52:	b2db      	uxtb	r3, r3
   2fa54:	001a      	movs	r2, r3
   2fa56:	68fb      	ldr	r3, [r7, #12]
   2fa58:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   2fa5a:	69bb      	ldr	r3, [r7, #24]
   2fa5c:	2214      	movs	r2, #20
   2fa5e:	18ba      	adds	r2, r7, r2
   2fa60:	0011      	movs	r1, r2
   2fa62:	0018      	movs	r0, r3
   2fa64:	4b12      	ldr	r3, [pc, #72]	; (2fab0 <MQTTDeserialize_ack+0xac>)
   2fa66:	4798      	blx	r3
   2fa68:	0003      	movs	r3, r0
   2fa6a:	627b      	str	r3, [r7, #36]	; 0x24
   2fa6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2fa6e:	69bb      	ldr	r3, [r7, #24]
   2fa70:	189b      	adds	r3, r3, r2
   2fa72:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   2fa74:	69bb      	ldr	r3, [r7, #24]
   2fa76:	697a      	ldr	r2, [r7, #20]
   2fa78:	189b      	adds	r3, r3, r2
   2fa7a:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
   2fa7c:	6a3b      	ldr	r3, [r7, #32]
   2fa7e:	69ba      	ldr	r2, [r7, #24]
   2fa80:	1a9b      	subs	r3, r3, r2
   2fa82:	2b01      	cmp	r3, #1
   2fa84:	dd0b      	ble.n	2fa9e <MQTTDeserialize_ack+0x9a>
		goto exit;
	*packetid = readInt(&curdata);
   2fa86:	2318      	movs	r3, #24
   2fa88:	18fb      	adds	r3, r7, r3
   2fa8a:	0018      	movs	r0, r3
   2fa8c:	4b09      	ldr	r3, [pc, #36]	; (2fab4 <MQTTDeserialize_ack+0xb0>)
   2fa8e:	4798      	blx	r3
   2fa90:	0003      	movs	r3, r0
   2fa92:	b29a      	uxth	r2, r3
   2fa94:	687b      	ldr	r3, [r7, #4]
   2fa96:	801a      	strh	r2, [r3, #0]

	rc = 1;
   2fa98:	2301      	movs	r3, #1
   2fa9a:	627b      	str	r3, [r7, #36]	; 0x24
   2fa9c:	e000      	b.n	2faa0 <MQTTDeserialize_ack+0x9c>
		goto exit;
   2fa9e:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2faa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2faa2:	0018      	movs	r0, r3
   2faa4:	46bd      	mov	sp, r7
   2faa6:	b00a      	add	sp, #40	; 0x28
   2faa8:	bd80      	pop	{r7, pc}
   2faaa:	46c0      	nop			; (mov r8, r8)
   2faac:	0002fca7 	.word	0x0002fca7
   2fab0:	0002fc41 	.word	0x0002fc41
   2fab4:	0002fc75 	.word	0x0002fc75

0002fab8 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
   2fab8:	b580      	push	{r7, lr}
   2faba:	b084      	sub	sp, #16
   2fabc:	af00      	add	r7, sp, #0
   2fabe:	6078      	str	r0, [r7, #4]
   2fac0:	6039      	str	r1, [r7, #0]
	int rc = 0;
   2fac2:	2300      	movs	r3, #0
   2fac4:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
   2fac6:	683b      	ldr	r3, [r7, #0]
   2fac8:	4a17      	ldr	r2, [pc, #92]	; (2fb28 <MQTTPacket_encode+0x70>)
   2faca:	4013      	ands	r3, r2
   2facc:	d504      	bpl.n	2fad8 <MQTTPacket_encode+0x20>
   2face:	3b01      	subs	r3, #1
   2fad0:	2280      	movs	r2, #128	; 0x80
   2fad2:	4252      	negs	r2, r2
   2fad4:	4313      	orrs	r3, r2
   2fad6:	3301      	adds	r3, #1
   2fad8:	001a      	movs	r2, r3
   2fada:	230b      	movs	r3, #11
   2fadc:	18fb      	adds	r3, r7, r3
   2fade:	701a      	strb	r2, [r3, #0]
		length /= 128;
   2fae0:	683b      	ldr	r3, [r7, #0]
   2fae2:	2b00      	cmp	r3, #0
   2fae4:	da00      	bge.n	2fae8 <MQTTPacket_encode+0x30>
   2fae6:	337f      	adds	r3, #127	; 0x7f
   2fae8:	11db      	asrs	r3, r3, #7
   2faea:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
   2faec:	683b      	ldr	r3, [r7, #0]
   2faee:	2b00      	cmp	r3, #0
   2faf0:	dd08      	ble.n	2fb04 <MQTTPacket_encode+0x4c>
			d |= 0x80;
   2faf2:	230b      	movs	r3, #11
   2faf4:	18fb      	adds	r3, r7, r3
   2faf6:	220b      	movs	r2, #11
   2faf8:	18ba      	adds	r2, r7, r2
   2fafa:	7812      	ldrb	r2, [r2, #0]
   2fafc:	2180      	movs	r1, #128	; 0x80
   2fafe:	4249      	negs	r1, r1
   2fb00:	430a      	orrs	r2, r1
   2fb02:	701a      	strb	r2, [r3, #0]
		buf[rc++] = d;
   2fb04:	68fb      	ldr	r3, [r7, #12]
   2fb06:	1c5a      	adds	r2, r3, #1
   2fb08:	60fa      	str	r2, [r7, #12]
   2fb0a:	001a      	movs	r2, r3
   2fb0c:	687b      	ldr	r3, [r7, #4]
   2fb0e:	189b      	adds	r3, r3, r2
   2fb10:	220b      	movs	r2, #11
   2fb12:	18ba      	adds	r2, r7, r2
   2fb14:	7812      	ldrb	r2, [r2, #0]
   2fb16:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
   2fb18:	683b      	ldr	r3, [r7, #0]
   2fb1a:	2b00      	cmp	r3, #0
   2fb1c:	dcd3      	bgt.n	2fac6 <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
   2fb1e:	68fb      	ldr	r3, [r7, #12]
}
   2fb20:	0018      	movs	r0, r3
   2fb22:	46bd      	mov	sp, r7
   2fb24:	b004      	add	sp, #16
   2fb26:	bd80      	pop	{r7, pc}
   2fb28:	8000007f 	.word	0x8000007f

0002fb2c <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
   2fb2c:	b580      	push	{r7, lr}
   2fb2e:	b086      	sub	sp, #24
   2fb30:	af00      	add	r7, sp, #0
   2fb32:	6078      	str	r0, [r7, #4]
   2fb34:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
   2fb36:	2301      	movs	r3, #1
   2fb38:	617b      	str	r3, [r7, #20]
	int len = 0;
   2fb3a:	2300      	movs	r3, #0
   2fb3c:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
   2fb3e:	683b      	ldr	r3, [r7, #0]
   2fb40:	2200      	movs	r2, #0
   2fb42:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
   2fb44:	2301      	movs	r3, #1
   2fb46:	425b      	negs	r3, r3
   2fb48:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   2fb4a:	693b      	ldr	r3, [r7, #16]
   2fb4c:	3301      	adds	r3, #1
   2fb4e:	613b      	str	r3, [r7, #16]
   2fb50:	693b      	ldr	r3, [r7, #16]
   2fb52:	2b04      	cmp	r3, #4
   2fb54:	dd03      	ble.n	2fb5e <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
   2fb56:	2301      	movs	r3, #1
   2fb58:	425b      	negs	r3, r3
   2fb5a:	60fb      	str	r3, [r7, #12]
			goto exit;
   2fb5c:	e022      	b.n	2fba4 <MQTTPacket_decode+0x78>
		}
		rc = (*getcharfn)(&c, 1);
   2fb5e:	230b      	movs	r3, #11
   2fb60:	18fa      	adds	r2, r7, r3
   2fb62:	687b      	ldr	r3, [r7, #4]
   2fb64:	2101      	movs	r1, #1
   2fb66:	0010      	movs	r0, r2
   2fb68:	4798      	blx	r3
   2fb6a:	0003      	movs	r3, r0
   2fb6c:	60fb      	str	r3, [r7, #12]
		if (rc != 1)
   2fb6e:	68fb      	ldr	r3, [r7, #12]
   2fb70:	2b01      	cmp	r3, #1
   2fb72:	d116      	bne.n	2fba2 <MQTTPacket_decode+0x76>
			goto exit;
		*value += (c & 127) * multiplier;
   2fb74:	683b      	ldr	r3, [r7, #0]
   2fb76:	681a      	ldr	r2, [r3, #0]
   2fb78:	230b      	movs	r3, #11
   2fb7a:	18fb      	adds	r3, r7, r3
   2fb7c:	781b      	ldrb	r3, [r3, #0]
   2fb7e:	0019      	movs	r1, r3
   2fb80:	237f      	movs	r3, #127	; 0x7f
   2fb82:	400b      	ands	r3, r1
   2fb84:	6979      	ldr	r1, [r7, #20]
   2fb86:	434b      	muls	r3, r1
   2fb88:	18d2      	adds	r2, r2, r3
   2fb8a:	683b      	ldr	r3, [r7, #0]
   2fb8c:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
   2fb8e:	697b      	ldr	r3, [r7, #20]
   2fb90:	01db      	lsls	r3, r3, #7
   2fb92:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
   2fb94:	230b      	movs	r3, #11
   2fb96:	18fb      	adds	r3, r7, r3
   2fb98:	781b      	ldrb	r3, [r3, #0]
   2fb9a:	b25b      	sxtb	r3, r3
   2fb9c:	2b00      	cmp	r3, #0
   2fb9e:	dbd1      	blt.n	2fb44 <MQTTPacket_decode+0x18>
   2fba0:	e000      	b.n	2fba4 <MQTTPacket_decode+0x78>
			goto exit;
   2fba2:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(len);
	return len;
   2fba4:	693b      	ldr	r3, [r7, #16]
}
   2fba6:	0018      	movs	r0, r3
   2fba8:	46bd      	mov	sp, r7
   2fbaa:	b006      	add	sp, #24
   2fbac:	bd80      	pop	{r7, pc}
	...

0002fbb0 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
   2fbb0:	b580      	push	{r7, lr}
   2fbb2:	b082      	sub	sp, #8
   2fbb4:	af00      	add	r7, sp, #0
   2fbb6:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
   2fbb8:	687b      	ldr	r3, [r7, #4]
   2fbba:	3301      	adds	r3, #1
   2fbbc:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
   2fbbe:	687b      	ldr	r3, [r7, #4]
   2fbc0:	2b7f      	cmp	r3, #127	; 0x7f
   2fbc2:	dc03      	bgt.n	2fbcc <MQTTPacket_len+0x1c>
		rem_len += 1;
   2fbc4:	687b      	ldr	r3, [r7, #4]
   2fbc6:	3301      	adds	r3, #1
   2fbc8:	607b      	str	r3, [r7, #4]
   2fbca:	e012      	b.n	2fbf2 <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
   2fbcc:	687b      	ldr	r3, [r7, #4]
   2fbce:	4a0b      	ldr	r2, [pc, #44]	; (2fbfc <MQTTPacket_len+0x4c>)
   2fbd0:	4293      	cmp	r3, r2
   2fbd2:	dc03      	bgt.n	2fbdc <MQTTPacket_len+0x2c>
		rem_len += 2;
   2fbd4:	687b      	ldr	r3, [r7, #4]
   2fbd6:	3302      	adds	r3, #2
   2fbd8:	607b      	str	r3, [r7, #4]
   2fbda:	e00a      	b.n	2fbf2 <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
   2fbdc:	687b      	ldr	r3, [r7, #4]
   2fbde:	4a08      	ldr	r2, [pc, #32]	; (2fc00 <MQTTPacket_len+0x50>)
   2fbe0:	4293      	cmp	r3, r2
   2fbe2:	dc03      	bgt.n	2fbec <MQTTPacket_len+0x3c>
		rem_len += 3;
   2fbe4:	687b      	ldr	r3, [r7, #4]
   2fbe6:	3303      	adds	r3, #3
   2fbe8:	607b      	str	r3, [r7, #4]
   2fbea:	e002      	b.n	2fbf2 <MQTTPacket_len+0x42>
	else
		rem_len += 4;
   2fbec:	687b      	ldr	r3, [r7, #4]
   2fbee:	3304      	adds	r3, #4
   2fbf0:	607b      	str	r3, [r7, #4]
	return rem_len;
   2fbf2:	687b      	ldr	r3, [r7, #4]
}
   2fbf4:	0018      	movs	r0, r3
   2fbf6:	46bd      	mov	sp, r7
   2fbf8:	b002      	add	sp, #8
   2fbfa:	bd80      	pop	{r7, pc}
   2fbfc:	00003fff 	.word	0x00003fff
   2fc00:	001ffffe 	.word	0x001ffffe

0002fc04 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
   2fc04:	b580      	push	{r7, lr}
   2fc06:	b084      	sub	sp, #16
   2fc08:	af00      	add	r7, sp, #0
   2fc0a:	6078      	str	r0, [r7, #4]
   2fc0c:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
   2fc0e:	2300      	movs	r3, #0
   2fc10:	60fb      	str	r3, [r7, #12]
   2fc12:	e00a      	b.n	2fc2a <bufchar+0x26>
		*c = *bufptr++;
   2fc14:	4b09      	ldr	r3, [pc, #36]	; (2fc3c <bufchar+0x38>)
   2fc16:	681b      	ldr	r3, [r3, #0]
   2fc18:	1c59      	adds	r1, r3, #1
   2fc1a:	4a08      	ldr	r2, [pc, #32]	; (2fc3c <bufchar+0x38>)
   2fc1c:	6011      	str	r1, [r2, #0]
   2fc1e:	781a      	ldrb	r2, [r3, #0]
   2fc20:	687b      	ldr	r3, [r7, #4]
   2fc22:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
   2fc24:	68fb      	ldr	r3, [r7, #12]
   2fc26:	3301      	adds	r3, #1
   2fc28:	60fb      	str	r3, [r7, #12]
   2fc2a:	68fa      	ldr	r2, [r7, #12]
   2fc2c:	683b      	ldr	r3, [r7, #0]
   2fc2e:	429a      	cmp	r2, r3
   2fc30:	dbf0      	blt.n	2fc14 <bufchar+0x10>
	return count;
   2fc32:	683b      	ldr	r3, [r7, #0]
}
   2fc34:	0018      	movs	r0, r3
   2fc36:	46bd      	mov	sp, r7
   2fc38:	b004      	add	sp, #16
   2fc3a:	bd80      	pop	{r7, pc}
   2fc3c:	2000410c 	.word	0x2000410c

0002fc40 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
   2fc40:	b580      	push	{r7, lr}
   2fc42:	b082      	sub	sp, #8
   2fc44:	af00      	add	r7, sp, #0
   2fc46:	6078      	str	r0, [r7, #4]
   2fc48:	6039      	str	r1, [r7, #0]
	bufptr = buf;
   2fc4a:	4b07      	ldr	r3, [pc, #28]	; (2fc68 <MQTTPacket_decodeBuf+0x28>)
   2fc4c:	687a      	ldr	r2, [r7, #4]
   2fc4e:	601a      	str	r2, [r3, #0]
	return MQTTPacket_decode(bufchar, value);
   2fc50:	683a      	ldr	r2, [r7, #0]
   2fc52:	4b06      	ldr	r3, [pc, #24]	; (2fc6c <MQTTPacket_decodeBuf+0x2c>)
   2fc54:	0011      	movs	r1, r2
   2fc56:	0018      	movs	r0, r3
   2fc58:	4b05      	ldr	r3, [pc, #20]	; (2fc70 <MQTTPacket_decodeBuf+0x30>)
   2fc5a:	4798      	blx	r3
   2fc5c:	0003      	movs	r3, r0
}
   2fc5e:	0018      	movs	r0, r3
   2fc60:	46bd      	mov	sp, r7
   2fc62:	b002      	add	sp, #8
   2fc64:	bd80      	pop	{r7, pc}
   2fc66:	46c0      	nop			; (mov r8, r8)
   2fc68:	2000410c 	.word	0x2000410c
   2fc6c:	0002fc05 	.word	0x0002fc05
   2fc70:	0002fb2d 	.word	0x0002fb2d

0002fc74 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
   2fc74:	b580      	push	{r7, lr}
   2fc76:	b084      	sub	sp, #16
   2fc78:	af00      	add	r7, sp, #0
   2fc7a:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
   2fc7c:	687b      	ldr	r3, [r7, #4]
   2fc7e:	681b      	ldr	r3, [r3, #0]
   2fc80:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
   2fc82:	68fb      	ldr	r3, [r7, #12]
   2fc84:	781b      	ldrb	r3, [r3, #0]
   2fc86:	021b      	lsls	r3, r3, #8
   2fc88:	68fa      	ldr	r2, [r7, #12]
   2fc8a:	3201      	adds	r2, #1
   2fc8c:	7812      	ldrb	r2, [r2, #0]
   2fc8e:	189b      	adds	r3, r3, r2
   2fc90:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
   2fc92:	687b      	ldr	r3, [r7, #4]
   2fc94:	681b      	ldr	r3, [r3, #0]
   2fc96:	1c9a      	adds	r2, r3, #2
   2fc98:	687b      	ldr	r3, [r7, #4]
   2fc9a:	601a      	str	r2, [r3, #0]
	return len;
   2fc9c:	68bb      	ldr	r3, [r7, #8]
}
   2fc9e:	0018      	movs	r0, r3
   2fca0:	46bd      	mov	sp, r7
   2fca2:	b004      	add	sp, #16
   2fca4:	bd80      	pop	{r7, pc}

0002fca6 <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
   2fca6:	b580      	push	{r7, lr}
   2fca8:	b084      	sub	sp, #16
   2fcaa:	af00      	add	r7, sp, #0
   2fcac:	6078      	str	r0, [r7, #4]
	char c = **pptr;
   2fcae:	687b      	ldr	r3, [r7, #4]
   2fcb0:	681a      	ldr	r2, [r3, #0]
   2fcb2:	230f      	movs	r3, #15
   2fcb4:	18fb      	adds	r3, r7, r3
   2fcb6:	7812      	ldrb	r2, [r2, #0]
   2fcb8:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   2fcba:	687b      	ldr	r3, [r7, #4]
   2fcbc:	681b      	ldr	r3, [r3, #0]
   2fcbe:	1c5a      	adds	r2, r3, #1
   2fcc0:	687b      	ldr	r3, [r7, #4]
   2fcc2:	601a      	str	r2, [r3, #0]
	return c;
   2fcc4:	230f      	movs	r3, #15
   2fcc6:	18fb      	adds	r3, r7, r3
   2fcc8:	781b      	ldrb	r3, [r3, #0]
}
   2fcca:	0018      	movs	r0, r3
   2fccc:	46bd      	mov	sp, r7
   2fcce:	b004      	add	sp, #16
   2fcd0:	bd80      	pop	{r7, pc}

0002fcd2 <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
   2fcd2:	b580      	push	{r7, lr}
   2fcd4:	b082      	sub	sp, #8
   2fcd6:	af00      	add	r7, sp, #0
   2fcd8:	6078      	str	r0, [r7, #4]
   2fcda:	000a      	movs	r2, r1
   2fcdc:	1cfb      	adds	r3, r7, #3
   2fcde:	701a      	strb	r2, [r3, #0]
	**pptr = c;
   2fce0:	687b      	ldr	r3, [r7, #4]
   2fce2:	681b      	ldr	r3, [r3, #0]
   2fce4:	1cfa      	adds	r2, r7, #3
   2fce6:	7812      	ldrb	r2, [r2, #0]
   2fce8:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   2fcea:	687b      	ldr	r3, [r7, #4]
   2fcec:	681b      	ldr	r3, [r3, #0]
   2fcee:	1c5a      	adds	r2, r3, #1
   2fcf0:	687b      	ldr	r3, [r7, #4]
   2fcf2:	601a      	str	r2, [r3, #0]
}
   2fcf4:	46c0      	nop			; (mov r8, r8)
   2fcf6:	46bd      	mov	sp, r7
   2fcf8:	b002      	add	sp, #8
   2fcfa:	bd80      	pop	{r7, pc}

0002fcfc <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
   2fcfc:	b580      	push	{r7, lr}
   2fcfe:	b082      	sub	sp, #8
   2fd00:	af00      	add	r7, sp, #0
   2fd02:	6078      	str	r0, [r7, #4]
   2fd04:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
   2fd06:	687b      	ldr	r3, [r7, #4]
   2fd08:	681a      	ldr	r2, [r3, #0]
   2fd0a:	683b      	ldr	r3, [r7, #0]
   2fd0c:	2b00      	cmp	r3, #0
   2fd0e:	da00      	bge.n	2fd12 <writeInt+0x16>
   2fd10:	33ff      	adds	r3, #255	; 0xff
   2fd12:	121b      	asrs	r3, r3, #8
   2fd14:	b2db      	uxtb	r3, r3
   2fd16:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   2fd18:	687b      	ldr	r3, [r7, #4]
   2fd1a:	681b      	ldr	r3, [r3, #0]
   2fd1c:	1c5a      	adds	r2, r3, #1
   2fd1e:	687b      	ldr	r3, [r7, #4]
   2fd20:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
   2fd22:	687b      	ldr	r3, [r7, #4]
   2fd24:	681a      	ldr	r2, [r3, #0]
   2fd26:	683b      	ldr	r3, [r7, #0]
   2fd28:	4908      	ldr	r1, [pc, #32]	; (2fd4c <writeInt+0x50>)
   2fd2a:	400b      	ands	r3, r1
   2fd2c:	d503      	bpl.n	2fd36 <writeInt+0x3a>
   2fd2e:	3b01      	subs	r3, #1
   2fd30:	4907      	ldr	r1, [pc, #28]	; (2fd50 <writeInt+0x54>)
   2fd32:	430b      	orrs	r3, r1
   2fd34:	3301      	adds	r3, #1
   2fd36:	b2db      	uxtb	r3, r3
   2fd38:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   2fd3a:	687b      	ldr	r3, [r7, #4]
   2fd3c:	681b      	ldr	r3, [r3, #0]
   2fd3e:	1c5a      	adds	r2, r3, #1
   2fd40:	687b      	ldr	r3, [r7, #4]
   2fd42:	601a      	str	r2, [r3, #0]
}
   2fd44:	46c0      	nop			; (mov r8, r8)
   2fd46:	46bd      	mov	sp, r7
   2fd48:	b002      	add	sp, #8
   2fd4a:	bd80      	pop	{r7, pc}
   2fd4c:	800000ff 	.word	0x800000ff
   2fd50:	ffffff00 	.word	0xffffff00

0002fd54 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
   2fd54:	b580      	push	{r7, lr}
   2fd56:	b084      	sub	sp, #16
   2fd58:	af00      	add	r7, sp, #0
   2fd5a:	6078      	str	r0, [r7, #4]
   2fd5c:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
   2fd5e:	683b      	ldr	r3, [r7, #0]
   2fd60:	0018      	movs	r0, r3
   2fd62:	4b0d      	ldr	r3, [pc, #52]	; (2fd98 <writeCString+0x44>)
   2fd64:	4798      	blx	r3
   2fd66:	0003      	movs	r3, r0
   2fd68:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
   2fd6a:	68fa      	ldr	r2, [r7, #12]
   2fd6c:	687b      	ldr	r3, [r7, #4]
   2fd6e:	0011      	movs	r1, r2
   2fd70:	0018      	movs	r0, r3
   2fd72:	4b0a      	ldr	r3, [pc, #40]	; (2fd9c <writeCString+0x48>)
   2fd74:	4798      	blx	r3
	memcpy(*pptr, string, len);
   2fd76:	687b      	ldr	r3, [r7, #4]
   2fd78:	681b      	ldr	r3, [r3, #0]
   2fd7a:	68fa      	ldr	r2, [r7, #12]
   2fd7c:	6839      	ldr	r1, [r7, #0]
   2fd7e:	0018      	movs	r0, r3
   2fd80:	4b07      	ldr	r3, [pc, #28]	; (2fda0 <writeCString+0x4c>)
   2fd82:	4798      	blx	r3
	*pptr += len;
   2fd84:	687b      	ldr	r3, [r7, #4]
   2fd86:	681a      	ldr	r2, [r3, #0]
   2fd88:	68fb      	ldr	r3, [r7, #12]
   2fd8a:	18d2      	adds	r2, r2, r3
   2fd8c:	687b      	ldr	r3, [r7, #4]
   2fd8e:	601a      	str	r2, [r3, #0]
}
   2fd90:	46c0      	nop			; (mov r8, r8)
   2fd92:	46bd      	mov	sp, r7
   2fd94:	b004      	add	sp, #16
   2fd96:	bd80      	pop	{r7, pc}
   2fd98:	0003443b 	.word	0x0003443b
   2fd9c:	0002fcfd 	.word	0x0002fcfd
   2fda0:	0003404d 	.word	0x0003404d

0002fda4 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
   2fda4:	b580      	push	{r7, lr}
   2fda6:	b084      	sub	sp, #16
   2fda8:	af00      	add	r7, sp, #0
   2fdaa:	60f8      	str	r0, [r7, #12]
   2fdac:	0038      	movs	r0, r7
   2fdae:	6001      	str	r1, [r0, #0]
   2fdb0:	6042      	str	r2, [r0, #4]
   2fdb2:	6083      	str	r3, [r0, #8]
	if (mqttstring.lenstring.len > 0)
   2fdb4:	003b      	movs	r3, r7
   2fdb6:	685b      	ldr	r3, [r3, #4]
   2fdb8:	2b00      	cmp	r3, #0
   2fdba:	dd17      	ble.n	2fdec <writeMQTTString+0x48>
	{
		writeInt(pptr, mqttstring.lenstring.len);
   2fdbc:	003b      	movs	r3, r7
   2fdbe:	685a      	ldr	r2, [r3, #4]
   2fdc0:	68fb      	ldr	r3, [r7, #12]
   2fdc2:	0011      	movs	r1, r2
   2fdc4:	0018      	movs	r0, r3
   2fdc6:	4b14      	ldr	r3, [pc, #80]	; (2fe18 <writeMQTTString+0x74>)
   2fdc8:	4798      	blx	r3
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
   2fdca:	68fb      	ldr	r3, [r7, #12]
   2fdcc:	6818      	ldr	r0, [r3, #0]
   2fdce:	003b      	movs	r3, r7
   2fdd0:	6899      	ldr	r1, [r3, #8]
   2fdd2:	003b      	movs	r3, r7
   2fdd4:	685b      	ldr	r3, [r3, #4]
   2fdd6:	001a      	movs	r2, r3
   2fdd8:	4b10      	ldr	r3, [pc, #64]	; (2fe1c <writeMQTTString+0x78>)
   2fdda:	4798      	blx	r3
		*pptr += mqttstring.lenstring.len;
   2fddc:	68fb      	ldr	r3, [r7, #12]
   2fdde:	681a      	ldr	r2, [r3, #0]
   2fde0:	003b      	movs	r3, r7
   2fde2:	685b      	ldr	r3, [r3, #4]
   2fde4:	18d2      	adds	r2, r2, r3
   2fde6:	68fb      	ldr	r3, [r7, #12]
   2fde8:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
   2fdea:	e010      	b.n	2fe0e <writeMQTTString+0x6a>
	else if (mqttstring.cstring)
   2fdec:	003b      	movs	r3, r7
   2fdee:	681b      	ldr	r3, [r3, #0]
   2fdf0:	2b00      	cmp	r3, #0
   2fdf2:	d007      	beq.n	2fe04 <writeMQTTString+0x60>
		writeCString(pptr, mqttstring.cstring);
   2fdf4:	003b      	movs	r3, r7
   2fdf6:	681a      	ldr	r2, [r3, #0]
   2fdf8:	68fb      	ldr	r3, [r7, #12]
   2fdfa:	0011      	movs	r1, r2
   2fdfc:	0018      	movs	r0, r3
   2fdfe:	4b08      	ldr	r3, [pc, #32]	; (2fe20 <writeMQTTString+0x7c>)
   2fe00:	4798      	blx	r3
}
   2fe02:	e004      	b.n	2fe0e <writeMQTTString+0x6a>
		writeInt(pptr, 0);
   2fe04:	68fb      	ldr	r3, [r7, #12]
   2fe06:	2100      	movs	r1, #0
   2fe08:	0018      	movs	r0, r3
   2fe0a:	4b03      	ldr	r3, [pc, #12]	; (2fe18 <writeMQTTString+0x74>)
   2fe0c:	4798      	blx	r3
}
   2fe0e:	46c0      	nop			; (mov r8, r8)
   2fe10:	46bd      	mov	sp, r7
   2fe12:	b004      	add	sp, #16
   2fe14:	bd80      	pop	{r7, pc}
   2fe16:	46c0      	nop			; (mov r8, r8)
   2fe18:	0002fcfd 	.word	0x0002fcfd
   2fe1c:	0003404d 	.word	0x0003404d
   2fe20:	0002fd55 	.word	0x0002fd55

0002fe24 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
   2fe24:	b580      	push	{r7, lr}
   2fe26:	b086      	sub	sp, #24
   2fe28:	af00      	add	r7, sp, #0
   2fe2a:	60f8      	str	r0, [r7, #12]
   2fe2c:	60b9      	str	r1, [r7, #8]
   2fe2e:	607a      	str	r2, [r7, #4]
	int rc = 0;
   2fe30:	2300      	movs	r3, #0
   2fe32:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
   2fe34:	687a      	ldr	r2, [r7, #4]
   2fe36:	68bb      	ldr	r3, [r7, #8]
   2fe38:	681b      	ldr	r3, [r3, #0]
   2fe3a:	1ad3      	subs	r3, r2, r3
   2fe3c:	2b01      	cmp	r3, #1
   2fe3e:	dd1b      	ble.n	2fe78 <readMQTTLenString+0x54>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
   2fe40:	68bb      	ldr	r3, [r7, #8]
   2fe42:	0018      	movs	r0, r3
   2fe44:	4b10      	ldr	r3, [pc, #64]	; (2fe88 <readMQTTLenString+0x64>)
   2fe46:	4798      	blx	r3
   2fe48:	0002      	movs	r2, r0
   2fe4a:	68fb      	ldr	r3, [r7, #12]
   2fe4c:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
   2fe4e:	68bb      	ldr	r3, [r7, #8]
   2fe50:	681a      	ldr	r2, [r3, #0]
   2fe52:	68fb      	ldr	r3, [r7, #12]
   2fe54:	685b      	ldr	r3, [r3, #4]
   2fe56:	18d2      	adds	r2, r2, r3
   2fe58:	687b      	ldr	r3, [r7, #4]
   2fe5a:	429a      	cmp	r2, r3
   2fe5c:	d80c      	bhi.n	2fe78 <readMQTTLenString+0x54>
		{
			mqttstring->lenstring.data = (char*)*pptr;
   2fe5e:	68bb      	ldr	r3, [r7, #8]
   2fe60:	681a      	ldr	r2, [r3, #0]
   2fe62:	68fb      	ldr	r3, [r7, #12]
   2fe64:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
   2fe66:	68bb      	ldr	r3, [r7, #8]
   2fe68:	681a      	ldr	r2, [r3, #0]
   2fe6a:	68fb      	ldr	r3, [r7, #12]
   2fe6c:	685b      	ldr	r3, [r3, #4]
   2fe6e:	18d2      	adds	r2, r2, r3
   2fe70:	68bb      	ldr	r3, [r7, #8]
   2fe72:	601a      	str	r2, [r3, #0]
			rc = 1;
   2fe74:	2301      	movs	r3, #1
   2fe76:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
   2fe78:	68fb      	ldr	r3, [r7, #12]
   2fe7a:	2200      	movs	r2, #0
   2fe7c:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
   2fe7e:	697b      	ldr	r3, [r7, #20]
}
   2fe80:	0018      	movs	r0, r3
   2fe82:	46bd      	mov	sp, r7
   2fe84:	b006      	add	sp, #24
   2fe86:	bd80      	pop	{r7, pc}
   2fe88:	0002fc75 	.word	0x0002fc75

0002fe8c <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
   2fe8c:	b580      	push	{r7, lr}
   2fe8e:	b086      	sub	sp, #24
   2fe90:	af00      	add	r7, sp, #0
   2fe92:	1d3b      	adds	r3, r7, #4
   2fe94:	6018      	str	r0, [r3, #0]
   2fe96:	6059      	str	r1, [r3, #4]
   2fe98:	609a      	str	r2, [r3, #8]
	int rc = 0;
   2fe9a:	2300      	movs	r3, #0
   2fe9c:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
   2fe9e:	1d3b      	adds	r3, r7, #4
   2fea0:	681b      	ldr	r3, [r3, #0]
   2fea2:	2b00      	cmp	r3, #0
   2fea4:	d007      	beq.n	2feb6 <MQTTstrlen+0x2a>
		rc = strlen(mqttstring.cstring);
   2fea6:	1d3b      	adds	r3, r7, #4
   2fea8:	681b      	ldr	r3, [r3, #0]
   2feaa:	0018      	movs	r0, r3
   2feac:	4b06      	ldr	r3, [pc, #24]	; (2fec8 <MQTTstrlen+0x3c>)
   2feae:	4798      	blx	r3
   2feb0:	0003      	movs	r3, r0
   2feb2:	617b      	str	r3, [r7, #20]
   2feb4:	e002      	b.n	2febc <MQTTstrlen+0x30>
	else
		rc = mqttstring.lenstring.len;
   2feb6:	1d3b      	adds	r3, r7, #4
   2feb8:	685b      	ldr	r3, [r3, #4]
   2feba:	617b      	str	r3, [r7, #20]
	return rc;
   2febc:	697b      	ldr	r3, [r7, #20]
}
   2febe:	0018      	movs	r0, r3
   2fec0:	46bd      	mov	sp, r7
   2fec2:	b006      	add	sp, #24
   2fec4:	bd80      	pop	{r7, pc}
   2fec6:	46c0      	nop			; (mov r8, r8)
   2fec8:	0003443b 	.word	0x0003443b

0002fecc <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
   2fecc:	b580      	push	{r7, lr}
   2fece:	b086      	sub	sp, #24
   2fed0:	af00      	add	r7, sp, #0
   2fed2:	6078      	str	r0, [r7, #4]
   2fed4:	6039      	str	r1, [r7, #0]
	int alen = 0,
   2fed6:	2300      	movs	r3, #0
   2fed8:	617b      	str	r3, [r7, #20]
		blen = 0;
   2feda:	2300      	movs	r3, #0
   2fedc:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
   2fede:	687b      	ldr	r3, [r7, #4]
   2fee0:	681b      	ldr	r3, [r3, #0]
   2fee2:	2b00      	cmp	r3, #0
   2fee4:	d00a      	beq.n	2fefc <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
   2fee6:	687b      	ldr	r3, [r7, #4]
   2fee8:	681b      	ldr	r3, [r3, #0]
   2feea:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
   2feec:	687b      	ldr	r3, [r7, #4]
   2feee:	681b      	ldr	r3, [r3, #0]
   2fef0:	0018      	movs	r0, r3
   2fef2:	4b12      	ldr	r3, [pc, #72]	; (2ff3c <MQTTPacket_equals+0x70>)
   2fef4:	4798      	blx	r3
   2fef6:	0003      	movs	r3, r0
   2fef8:	617b      	str	r3, [r7, #20]
   2fefa:	e005      	b.n	2ff08 <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
   2fefc:	687b      	ldr	r3, [r7, #4]
   2fefe:	689b      	ldr	r3, [r3, #8]
   2ff00:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
   2ff02:	687b      	ldr	r3, [r7, #4]
   2ff04:	685b      	ldr	r3, [r3, #4]
   2ff06:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
   2ff08:	683b      	ldr	r3, [r7, #0]
   2ff0a:	0018      	movs	r0, r3
   2ff0c:	4b0b      	ldr	r3, [pc, #44]	; (2ff3c <MQTTPacket_equals+0x70>)
   2ff0e:	4798      	blx	r3
   2ff10:	0003      	movs	r3, r0
   2ff12:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
   2ff14:	697a      	ldr	r2, [r7, #20]
   2ff16:	68fb      	ldr	r3, [r7, #12]
   2ff18:	429a      	cmp	r2, r3
   2ff1a:	d109      	bne.n	2ff30 <MQTTPacket_equals+0x64>
   2ff1c:	697a      	ldr	r2, [r7, #20]
   2ff1e:	6839      	ldr	r1, [r7, #0]
   2ff20:	693b      	ldr	r3, [r7, #16]
   2ff22:	0018      	movs	r0, r3
   2ff24:	4b06      	ldr	r3, [pc, #24]	; (2ff40 <MQTTPacket_equals+0x74>)
   2ff26:	4798      	blx	r3
   2ff28:	1e03      	subs	r3, r0, #0
   2ff2a:	d101      	bne.n	2ff30 <MQTTPacket_equals+0x64>
   2ff2c:	2301      	movs	r3, #1
   2ff2e:	e000      	b.n	2ff32 <MQTTPacket_equals+0x66>
   2ff30:	2300      	movs	r3, #0
}
   2ff32:	0018      	movs	r0, r3
   2ff34:	46bd      	mov	sp, r7
   2ff36:	b006      	add	sp, #24
   2ff38:	bd80      	pop	{r7, pc}
   2ff3a:	46c0      	nop			; (mov r8, r8)
   2ff3c:	0003443b 	.word	0x0003443b
   2ff40:	00034449 	.word	0x00034449

0002ff44 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
   2ff44:	b580      	push	{r7, lr}
   2ff46:	b086      	sub	sp, #24
   2ff48:	af00      	add	r7, sp, #0
   2ff4a:	60f8      	str	r0, [r7, #12]
   2ff4c:	0038      	movs	r0, r7
   2ff4e:	6001      	str	r1, [r0, #0]
   2ff50:	6042      	str	r2, [r0, #4]
   2ff52:	6083      	str	r3, [r0, #8]
	int len = 0;
   2ff54:	2300      	movs	r3, #0
   2ff56:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
   2ff58:	003b      	movs	r3, r7
   2ff5a:	6818      	ldr	r0, [r3, #0]
   2ff5c:	6859      	ldr	r1, [r3, #4]
   2ff5e:	689a      	ldr	r2, [r3, #8]
   2ff60:	4b09      	ldr	r3, [pc, #36]	; (2ff88 <MQTTSerialize_publishLength+0x44>)
   2ff62:	4798      	blx	r3
   2ff64:	0003      	movs	r3, r0
   2ff66:	1c9a      	adds	r2, r3, #2
   2ff68:	6a3b      	ldr	r3, [r7, #32]
   2ff6a:	18d3      	adds	r3, r2, r3
   2ff6c:	697a      	ldr	r2, [r7, #20]
   2ff6e:	18d3      	adds	r3, r2, r3
   2ff70:	617b      	str	r3, [r7, #20]
	if (qos > 0)
   2ff72:	68fb      	ldr	r3, [r7, #12]
   2ff74:	2b00      	cmp	r3, #0
   2ff76:	dd02      	ble.n	2ff7e <MQTTSerialize_publishLength+0x3a>
		len += 2; /* packetid */
   2ff78:	697b      	ldr	r3, [r7, #20]
   2ff7a:	3302      	adds	r3, #2
   2ff7c:	617b      	str	r3, [r7, #20]
	return len;
   2ff7e:	697b      	ldr	r3, [r7, #20]
}
   2ff80:	0018      	movs	r0, r3
   2ff82:	46bd      	mov	sp, r7
   2ff84:	b006      	add	sp, #24
   2ff86:	bd80      	pop	{r7, pc}
   2ff88:	0002fe8d 	.word	0x0002fe8d

0002ff8c <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
   2ff8c:	b590      	push	{r4, r7, lr}
   2ff8e:	b08b      	sub	sp, #44	; 0x2c
   2ff90:	af02      	add	r7, sp, #8
   2ff92:	60f8      	str	r0, [r7, #12]
   2ff94:	60b9      	str	r1, [r7, #8]
   2ff96:	603b      	str	r3, [r7, #0]
   2ff98:	1dfb      	adds	r3, r7, #7
   2ff9a:	701a      	strb	r2, [r3, #0]
	unsigned char *ptr = buf;
   2ff9c:	68fb      	ldr	r3, [r7, #12]
   2ff9e:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
   2ffa0:	2300      	movs	r3, #0
   2ffa2:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
   2ffa4:	2300      	movs	r3, #0
   2ffa6:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   2ffa8:	2300      	movs	r3, #0
   2ffaa:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
   2ffac:	2308      	movs	r3, #8
   2ffae:	2230      	movs	r2, #48	; 0x30
   2ffb0:	4694      	mov	ip, r2
   2ffb2:	44bc      	add	ip, r7
   2ffb4:	4463      	add	r3, ip
   2ffb6:	6838      	ldr	r0, [r7, #0]
   2ffb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
   2ffba:	9200      	str	r2, [sp, #0]
   2ffbc:	6819      	ldr	r1, [r3, #0]
   2ffbe:	685a      	ldr	r2, [r3, #4]
   2ffc0:	689b      	ldr	r3, [r3, #8]
   2ffc2:	4c46      	ldr	r4, [pc, #280]	; (300dc <MQTTSerialize_publish+0x150>)
   2ffc4:	47a0      	blx	r4
   2ffc6:	0003      	movs	r3, r0
   2ffc8:	61bb      	str	r3, [r7, #24]
   2ffca:	69bb      	ldr	r3, [r7, #24]
   2ffcc:	0018      	movs	r0, r3
   2ffce:	4b44      	ldr	r3, [pc, #272]	; (300e0 <MQTTSerialize_publish+0x154>)
   2ffd0:	4798      	blx	r3
   2ffd2:	0002      	movs	r2, r0
   2ffd4:	68bb      	ldr	r3, [r7, #8]
   2ffd6:	429a      	cmp	r2, r3
   2ffd8:	dd03      	ble.n	2ffe2 <MQTTSerialize_publish+0x56>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   2ffda:	2302      	movs	r3, #2
   2ffdc:	425b      	negs	r3, r3
   2ffde:	61fb      	str	r3, [r7, #28]
		goto exit;
   2ffe0:	e077      	b.n	300d2 <MQTTSerialize_publish+0x146>
	}

	header.bits.type = PUBLISH;
   2ffe2:	2310      	movs	r3, #16
   2ffe4:	18fb      	adds	r3, r7, r3
   2ffe6:	781a      	ldrb	r2, [r3, #0]
   2ffe8:	210f      	movs	r1, #15
   2ffea:	400a      	ands	r2, r1
   2ffec:	1c11      	adds	r1, r2, #0
   2ffee:	2230      	movs	r2, #48	; 0x30
   2fff0:	430a      	orrs	r2, r1
   2fff2:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   2fff4:	1dfb      	adds	r3, r7, #7
   2fff6:	781b      	ldrb	r3, [r3, #0]
   2fff8:	2201      	movs	r2, #1
   2fffa:	4013      	ands	r3, r2
   2fffc:	b2da      	uxtb	r2, r3
   2fffe:	2310      	movs	r3, #16
   30000:	18fb      	adds	r3, r7, r3
   30002:	2101      	movs	r1, #1
   30004:	400a      	ands	r2, r1
   30006:	00d0      	lsls	r0, r2, #3
   30008:	781a      	ldrb	r2, [r3, #0]
   3000a:	2108      	movs	r1, #8
   3000c:	438a      	bics	r2, r1
   3000e:	1c11      	adds	r1, r2, #0
   30010:	1c02      	adds	r2, r0, #0
   30012:	430a      	orrs	r2, r1
   30014:	701a      	strb	r2, [r3, #0]
	header.bits.qos = qos;
   30016:	683b      	ldr	r3, [r7, #0]
   30018:	b2db      	uxtb	r3, r3
   3001a:	1c1a      	adds	r2, r3, #0
   3001c:	2303      	movs	r3, #3
   3001e:	4013      	ands	r3, r2
   30020:	b2da      	uxtb	r2, r3
   30022:	2310      	movs	r3, #16
   30024:	18fb      	adds	r3, r7, r3
   30026:	2103      	movs	r1, #3
   30028:	400a      	ands	r2, r1
   3002a:	1890      	adds	r0, r2, r2
   3002c:	781a      	ldrb	r2, [r3, #0]
   3002e:	2106      	movs	r1, #6
   30030:	438a      	bics	r2, r1
   30032:	1c11      	adds	r1, r2, #0
   30034:	1c02      	adds	r2, r0, #0
   30036:	430a      	orrs	r2, r1
   30038:	701a      	strb	r2, [r3, #0]
	header.bits.retain = retained;
   3003a:	2330      	movs	r3, #48	; 0x30
   3003c:	18fb      	adds	r3, r7, r3
   3003e:	781b      	ldrb	r3, [r3, #0]
   30040:	2201      	movs	r2, #1
   30042:	4013      	ands	r3, r2
   30044:	b2da      	uxtb	r2, r3
   30046:	2310      	movs	r3, #16
   30048:	18fb      	adds	r3, r7, r3
   3004a:	2101      	movs	r1, #1
   3004c:	400a      	ands	r2, r1
   3004e:	0010      	movs	r0, r2
   30050:	781a      	ldrb	r2, [r3, #0]
   30052:	2101      	movs	r1, #1
   30054:	438a      	bics	r2, r1
   30056:	1c11      	adds	r1, r2, #0
   30058:	1c02      	adds	r2, r0, #0
   3005a:	430a      	orrs	r2, r1
   3005c:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   3005e:	2310      	movs	r3, #16
   30060:	18fb      	adds	r3, r7, r3
   30062:	781a      	ldrb	r2, [r3, #0]
   30064:	2314      	movs	r3, #20
   30066:	18fb      	adds	r3, r7, r3
   30068:	0011      	movs	r1, r2
   3006a:	0018      	movs	r0, r3
   3006c:	4b1d      	ldr	r3, [pc, #116]	; (300e4 <MQTTSerialize_publish+0x158>)
   3006e:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   30070:	697b      	ldr	r3, [r7, #20]
   30072:	69ba      	ldr	r2, [r7, #24]
   30074:	0011      	movs	r1, r2
   30076:	0018      	movs	r0, r3
   30078:	4b1b      	ldr	r3, [pc, #108]	; (300e8 <MQTTSerialize_publish+0x15c>)
   3007a:	4798      	blx	r3
   3007c:	0002      	movs	r2, r0
   3007e:	697b      	ldr	r3, [r7, #20]
   30080:	189b      	adds	r3, r3, r2
   30082:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
   30084:	2308      	movs	r3, #8
   30086:	2230      	movs	r2, #48	; 0x30
   30088:	4694      	mov	ip, r2
   3008a:	44bc      	add	ip, r7
   3008c:	4463      	add	r3, ip
   3008e:	2214      	movs	r2, #20
   30090:	18b8      	adds	r0, r7, r2
   30092:	6819      	ldr	r1, [r3, #0]
   30094:	685a      	ldr	r2, [r3, #4]
   30096:	689b      	ldr	r3, [r3, #8]
   30098:	4c14      	ldr	r4, [pc, #80]	; (300ec <MQTTSerialize_publish+0x160>)
   3009a:	47a0      	blx	r4

	if (qos > 0)
   3009c:	683b      	ldr	r3, [r7, #0]
   3009e:	2b00      	cmp	r3, #0
   300a0:	dd08      	ble.n	300b4 <MQTTSerialize_publish+0x128>
		writeInt(&ptr, packetid);
   300a2:	2334      	movs	r3, #52	; 0x34
   300a4:	18fb      	adds	r3, r7, r3
   300a6:	881a      	ldrh	r2, [r3, #0]
   300a8:	2314      	movs	r3, #20
   300aa:	18fb      	adds	r3, r7, r3
   300ac:	0011      	movs	r1, r2
   300ae:	0018      	movs	r0, r3
   300b0:	4b0f      	ldr	r3, [pc, #60]	; (300f0 <MQTTSerialize_publish+0x164>)
   300b2:	4798      	blx	r3

	memcpy(ptr, payload, payloadlen);
   300b4:	697b      	ldr	r3, [r7, #20]
   300b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
   300b8:	6c79      	ldr	r1, [r7, #68]	; 0x44
   300ba:	0018      	movs	r0, r3
   300bc:	4b0d      	ldr	r3, [pc, #52]	; (300f4 <MQTTSerialize_publish+0x168>)
   300be:	4798      	blx	r3
	ptr += payloadlen;
   300c0:	697a      	ldr	r2, [r7, #20]
   300c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   300c4:	18d3      	adds	r3, r2, r3
   300c6:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
   300c8:	697b      	ldr	r3, [r7, #20]
   300ca:	001a      	movs	r2, r3
   300cc:	68fb      	ldr	r3, [r7, #12]
   300ce:	1ad3      	subs	r3, r2, r3
   300d0:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
   300d2:	69fb      	ldr	r3, [r7, #28]
}
   300d4:	0018      	movs	r0, r3
   300d6:	46bd      	mov	sp, r7
   300d8:	b009      	add	sp, #36	; 0x24
   300da:	bd90      	pop	{r4, r7, pc}
   300dc:	0002ff45 	.word	0x0002ff45
   300e0:	0002fbb1 	.word	0x0002fbb1
   300e4:	0002fcd3 	.word	0x0002fcd3
   300e8:	0002fab9 	.word	0x0002fab9
   300ec:	0002fda5 	.word	0x0002fda5
   300f0:	0002fcfd 	.word	0x0002fcfd
   300f4:	0003404d 	.word	0x0003404d

000300f8 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
   300f8:	b580      	push	{r7, lr}
   300fa:	b088      	sub	sp, #32
   300fc:	af00      	add	r7, sp, #0
   300fe:	60f8      	str	r0, [r7, #12]
   30100:	60b9      	str	r1, [r7, #8]
   30102:	0019      	movs	r1, r3
   30104:	1dfb      	adds	r3, r7, #7
   30106:	701a      	strb	r2, [r3, #0]
   30108:	1dbb      	adds	r3, r7, #6
   3010a:	1c0a      	adds	r2, r1, #0
   3010c:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   3010e:	2300      	movs	r3, #0
   30110:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   30112:	2300      	movs	r3, #0
   30114:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   30116:	68fb      	ldr	r3, [r7, #12]
   30118:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
   3011a:	68bb      	ldr	r3, [r7, #8]
   3011c:	2b03      	cmp	r3, #3
   3011e:	dc03      	bgt.n	30128 <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   30120:	2302      	movs	r3, #2
   30122:	425b      	negs	r3, r3
   30124:	61fb      	str	r3, [r7, #28]
		goto exit;
   30126:	e055      	b.n	301d4 <MQTTSerialize_ack+0xdc>
	}
	header.bits.type = packettype;
   30128:	1dfb      	adds	r3, r7, #7
   3012a:	781b      	ldrb	r3, [r3, #0]
   3012c:	220f      	movs	r2, #15
   3012e:	4013      	ands	r3, r2
   30130:	b2da      	uxtb	r2, r3
   30132:	2318      	movs	r3, #24
   30134:	18fb      	adds	r3, r7, r3
   30136:	0110      	lsls	r0, r2, #4
   30138:	781a      	ldrb	r2, [r3, #0]
   3013a:	210f      	movs	r1, #15
   3013c:	400a      	ands	r2, r1
   3013e:	1c11      	adds	r1, r2, #0
   30140:	1c02      	adds	r2, r0, #0
   30142:	430a      	orrs	r2, r1
   30144:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   30146:	1dbb      	adds	r3, r7, #6
   30148:	781b      	ldrb	r3, [r3, #0]
   3014a:	2201      	movs	r2, #1
   3014c:	4013      	ands	r3, r2
   3014e:	b2da      	uxtb	r2, r3
   30150:	2318      	movs	r3, #24
   30152:	18fb      	adds	r3, r7, r3
   30154:	2101      	movs	r1, #1
   30156:	400a      	ands	r2, r1
   30158:	00d0      	lsls	r0, r2, #3
   3015a:	781a      	ldrb	r2, [r3, #0]
   3015c:	2108      	movs	r1, #8
   3015e:	438a      	bics	r2, r1
   30160:	1c11      	adds	r1, r2, #0
   30162:	1c02      	adds	r2, r0, #0
   30164:	430a      	orrs	r2, r1
   30166:	701a      	strb	r2, [r3, #0]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
   30168:	1dfb      	adds	r3, r7, #7
   3016a:	781b      	ldrb	r3, [r3, #0]
   3016c:	3b06      	subs	r3, #6
   3016e:	425a      	negs	r2, r3
   30170:	4153      	adcs	r3, r2
   30172:	b2db      	uxtb	r3, r3
   30174:	1c1a      	adds	r2, r3, #0
   30176:	2303      	movs	r3, #3
   30178:	4013      	ands	r3, r2
   3017a:	b2da      	uxtb	r2, r3
   3017c:	2318      	movs	r3, #24
   3017e:	18fb      	adds	r3, r7, r3
   30180:	2103      	movs	r1, #3
   30182:	400a      	ands	r2, r1
   30184:	1890      	adds	r0, r2, r2
   30186:	781a      	ldrb	r2, [r3, #0]
   30188:	2106      	movs	r1, #6
   3018a:	438a      	bics	r2, r1
   3018c:	1c11      	adds	r1, r2, #0
   3018e:	1c02      	adds	r2, r0, #0
   30190:	430a      	orrs	r2, r1
   30192:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   30194:	2318      	movs	r3, #24
   30196:	18fb      	adds	r3, r7, r3
   30198:	781a      	ldrb	r2, [r3, #0]
   3019a:	2314      	movs	r3, #20
   3019c:	18fb      	adds	r3, r7, r3
   3019e:	0011      	movs	r1, r2
   301a0:	0018      	movs	r0, r3
   301a2:	4b0f      	ldr	r3, [pc, #60]	; (301e0 <MQTTSerialize_ack+0xe8>)
   301a4:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
   301a6:	697b      	ldr	r3, [r7, #20]
   301a8:	2102      	movs	r1, #2
   301aa:	0018      	movs	r0, r3
   301ac:	4b0d      	ldr	r3, [pc, #52]	; (301e4 <MQTTSerialize_ack+0xec>)
   301ae:	4798      	blx	r3
   301b0:	0002      	movs	r2, r0
   301b2:	697b      	ldr	r3, [r7, #20]
   301b4:	189b      	adds	r3, r3, r2
   301b6:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
   301b8:	2328      	movs	r3, #40	; 0x28
   301ba:	18fb      	adds	r3, r7, r3
   301bc:	881a      	ldrh	r2, [r3, #0]
   301be:	2314      	movs	r3, #20
   301c0:	18fb      	adds	r3, r7, r3
   301c2:	0011      	movs	r1, r2
   301c4:	0018      	movs	r0, r3
   301c6:	4b08      	ldr	r3, [pc, #32]	; (301e8 <MQTTSerialize_ack+0xf0>)
   301c8:	4798      	blx	r3
	rc = ptr - buf;
   301ca:	697b      	ldr	r3, [r7, #20]
   301cc:	001a      	movs	r2, r3
   301ce:	68fb      	ldr	r3, [r7, #12]
   301d0:	1ad3      	subs	r3, r2, r3
   301d2:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   301d4:	69fb      	ldr	r3, [r7, #28]
}
   301d6:	0018      	movs	r0, r3
   301d8:	46bd      	mov	sp, r7
   301da:	b008      	add	sp, #32
   301dc:	bd80      	pop	{r7, pc}
   301de:	46c0      	nop			; (mov r8, r8)
   301e0:	0002fcd3 	.word	0x0002fcd3
   301e4:	0002fab9 	.word	0x0002fab9
   301e8:	0002fcfd 	.word	0x0002fcfd

000301ec <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
   301ec:	b580      	push	{r7, lr}
   301ee:	b084      	sub	sp, #16
   301f0:	af00      	add	r7, sp, #0
   301f2:	6078      	str	r0, [r7, #4]
   301f4:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
   301f6:	2302      	movs	r3, #2
   301f8:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
   301fa:	2300      	movs	r3, #0
   301fc:	60fb      	str	r3, [r7, #12]
   301fe:	e014      	b.n	3022a <MQTTSerialize_subscribeLength+0x3e>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
   30200:	68fa      	ldr	r2, [r7, #12]
   30202:	0013      	movs	r3, r2
   30204:	005b      	lsls	r3, r3, #1
   30206:	189b      	adds	r3, r3, r2
   30208:	009b      	lsls	r3, r3, #2
   3020a:	001a      	movs	r2, r3
   3020c:	683b      	ldr	r3, [r7, #0]
   3020e:	189b      	adds	r3, r3, r2
   30210:	6818      	ldr	r0, [r3, #0]
   30212:	6859      	ldr	r1, [r3, #4]
   30214:	689a      	ldr	r2, [r3, #8]
   30216:	4b09      	ldr	r3, [pc, #36]	; (3023c <MQTTSerialize_subscribeLength+0x50>)
   30218:	4798      	blx	r3
   3021a:	0003      	movs	r3, r0
   3021c:	3303      	adds	r3, #3
   3021e:	68ba      	ldr	r2, [r7, #8]
   30220:	18d3      	adds	r3, r2, r3
   30222:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
   30224:	68fb      	ldr	r3, [r7, #12]
   30226:	3301      	adds	r3, #1
   30228:	60fb      	str	r3, [r7, #12]
   3022a:	68fa      	ldr	r2, [r7, #12]
   3022c:	687b      	ldr	r3, [r7, #4]
   3022e:	429a      	cmp	r2, r3
   30230:	dbe6      	blt.n	30200 <MQTTSerialize_subscribeLength+0x14>
	return len;
   30232:	68bb      	ldr	r3, [r7, #8]
}
   30234:	0018      	movs	r0, r3
   30236:	46bd      	mov	sp, r7
   30238:	b004      	add	sp, #16
   3023a:	bd80      	pop	{r7, pc}
   3023c:	0002fe8d 	.word	0x0002fe8d

00030240 <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
   30240:	b590      	push	{r4, r7, lr}
   30242:	b08b      	sub	sp, #44	; 0x2c
   30244:	af00      	add	r7, sp, #0
   30246:	60f8      	str	r0, [r7, #12]
   30248:	60b9      	str	r1, [r7, #8]
   3024a:	0019      	movs	r1, r3
   3024c:	1dfb      	adds	r3, r7, #7
   3024e:	701a      	strb	r2, [r3, #0]
   30250:	1d3b      	adds	r3, r7, #4
   30252:	1c0a      	adds	r2, r1, #0
   30254:	801a      	strh	r2, [r3, #0]
	unsigned char *ptr = buf;
   30256:	68fb      	ldr	r3, [r7, #12]
   30258:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
   3025a:	2300      	movs	r3, #0
   3025c:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
   3025e:	2300      	movs	r3, #0
   30260:	61fb      	str	r3, [r7, #28]
	int rc = 0;
   30262:	2300      	movs	r3, #0
   30264:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
   30266:	2300      	movs	r3, #0
   30268:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
   3026a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   3026c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   3026e:	0011      	movs	r1, r2
   30270:	0018      	movs	r0, r3
   30272:	4b41      	ldr	r3, [pc, #260]	; (30378 <MQTTSerialize_subscribe+0x138>)
   30274:	4798      	blx	r3
   30276:	0003      	movs	r3, r0
   30278:	61fb      	str	r3, [r7, #28]
   3027a:	69fb      	ldr	r3, [r7, #28]
   3027c:	0018      	movs	r0, r3
   3027e:	4b3f      	ldr	r3, [pc, #252]	; (3037c <MQTTSerialize_subscribe+0x13c>)
   30280:	4798      	blx	r3
   30282:	0002      	movs	r2, r0
   30284:	68bb      	ldr	r3, [r7, #8]
   30286:	429a      	cmp	r2, r3
   30288:	dd03      	ble.n	30292 <MQTTSerialize_subscribe+0x52>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   3028a:	2302      	movs	r3, #2
   3028c:	425b      	negs	r3, r3
   3028e:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   30290:	e06c      	b.n	3036c <MQTTSerialize_subscribe+0x12c>
	}

	header.byte = 0;
   30292:	2314      	movs	r3, #20
   30294:	18fb      	adds	r3, r7, r3
   30296:	2200      	movs	r2, #0
   30298:	701a      	strb	r2, [r3, #0]
	header.bits.type = SUBSCRIBE;
   3029a:	2314      	movs	r3, #20
   3029c:	18fb      	adds	r3, r7, r3
   3029e:	781a      	ldrb	r2, [r3, #0]
   302a0:	210f      	movs	r1, #15
   302a2:	400a      	ands	r2, r1
   302a4:	1c11      	adds	r1, r2, #0
   302a6:	2280      	movs	r2, #128	; 0x80
   302a8:	4252      	negs	r2, r2
   302aa:	430a      	orrs	r2, r1
   302ac:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   302ae:	1dfb      	adds	r3, r7, #7
   302b0:	781b      	ldrb	r3, [r3, #0]
   302b2:	2201      	movs	r2, #1
   302b4:	4013      	ands	r3, r2
   302b6:	b2da      	uxtb	r2, r3
   302b8:	2314      	movs	r3, #20
   302ba:	18fb      	adds	r3, r7, r3
   302bc:	2101      	movs	r1, #1
   302be:	400a      	ands	r2, r1
   302c0:	00d0      	lsls	r0, r2, #3
   302c2:	781a      	ldrb	r2, [r3, #0]
   302c4:	2108      	movs	r1, #8
   302c6:	438a      	bics	r2, r1
   302c8:	1c11      	adds	r1, r2, #0
   302ca:	1c02      	adds	r2, r0, #0
   302cc:	430a      	orrs	r2, r1
   302ce:	701a      	strb	r2, [r3, #0]
	header.bits.qos = 1;
   302d0:	2314      	movs	r3, #20
   302d2:	18fb      	adds	r3, r7, r3
   302d4:	781a      	ldrb	r2, [r3, #0]
   302d6:	2106      	movs	r1, #6
   302d8:	438a      	bics	r2, r1
   302da:	1c11      	adds	r1, r2, #0
   302dc:	2202      	movs	r2, #2
   302de:	430a      	orrs	r2, r1
   302e0:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   302e2:	2314      	movs	r3, #20
   302e4:	18fb      	adds	r3, r7, r3
   302e6:	781a      	ldrb	r2, [r3, #0]
   302e8:	2318      	movs	r3, #24
   302ea:	18fb      	adds	r3, r7, r3
   302ec:	0011      	movs	r1, r2
   302ee:	0018      	movs	r0, r3
   302f0:	4b23      	ldr	r3, [pc, #140]	; (30380 <MQTTSerialize_subscribe+0x140>)
   302f2:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   302f4:	69bb      	ldr	r3, [r7, #24]
   302f6:	69fa      	ldr	r2, [r7, #28]
   302f8:	0011      	movs	r1, r2
   302fa:	0018      	movs	r0, r3
   302fc:	4b21      	ldr	r3, [pc, #132]	; (30384 <MQTTSerialize_subscribe+0x144>)
   302fe:	4798      	blx	r3
   30300:	0002      	movs	r2, r0
   30302:	69bb      	ldr	r3, [r7, #24]
   30304:	189b      	adds	r3, r3, r2
   30306:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
   30308:	1d3b      	adds	r3, r7, #4
   3030a:	881a      	ldrh	r2, [r3, #0]
   3030c:	2318      	movs	r3, #24
   3030e:	18fb      	adds	r3, r7, r3
   30310:	0011      	movs	r1, r2
   30312:	0018      	movs	r0, r3
   30314:	4b1c      	ldr	r3, [pc, #112]	; (30388 <MQTTSerialize_subscribe+0x148>)
   30316:	4798      	blx	r3

	for (i = 0; i < count; ++i)
   30318:	2300      	movs	r3, #0
   3031a:	623b      	str	r3, [r7, #32]
   3031c:	e01d      	b.n	3035a <MQTTSerialize_subscribe+0x11a>
	{
		writeMQTTString(&ptr, topicFilters[i]);
   3031e:	6a3a      	ldr	r2, [r7, #32]
   30320:	0013      	movs	r3, r2
   30322:	005b      	lsls	r3, r3, #1
   30324:	189b      	adds	r3, r3, r2
   30326:	009b      	lsls	r3, r3, #2
   30328:	001a      	movs	r2, r3
   3032a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   3032c:	189b      	adds	r3, r3, r2
   3032e:	2218      	movs	r2, #24
   30330:	18b8      	adds	r0, r7, r2
   30332:	6819      	ldr	r1, [r3, #0]
   30334:	685a      	ldr	r2, [r3, #4]
   30336:	689b      	ldr	r3, [r3, #8]
   30338:	4c14      	ldr	r4, [pc, #80]	; (3038c <MQTTSerialize_subscribe+0x14c>)
   3033a:	47a0      	blx	r4
		writeChar(&ptr, requestedQoSs[i]);
   3033c:	6a3b      	ldr	r3, [r7, #32]
   3033e:	009b      	lsls	r3, r3, #2
   30340:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   30342:	18d3      	adds	r3, r2, r3
   30344:	681b      	ldr	r3, [r3, #0]
   30346:	b2da      	uxtb	r2, r3
   30348:	2318      	movs	r3, #24
   3034a:	18fb      	adds	r3, r7, r3
   3034c:	0011      	movs	r1, r2
   3034e:	0018      	movs	r0, r3
   30350:	4b0b      	ldr	r3, [pc, #44]	; (30380 <MQTTSerialize_subscribe+0x140>)
   30352:	4798      	blx	r3
	for (i = 0; i < count; ++i)
   30354:	6a3b      	ldr	r3, [r7, #32]
   30356:	3301      	adds	r3, #1
   30358:	623b      	str	r3, [r7, #32]
   3035a:	6a3a      	ldr	r2, [r7, #32]
   3035c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   3035e:	429a      	cmp	r2, r3
   30360:	dbdd      	blt.n	3031e <MQTTSerialize_subscribe+0xde>
	}

	rc = ptr - buf;
   30362:	69bb      	ldr	r3, [r7, #24]
   30364:	001a      	movs	r2, r3
   30366:	68fb      	ldr	r3, [r7, #12]
   30368:	1ad3      	subs	r3, r2, r3
   3036a:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   3036c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   3036e:	0018      	movs	r0, r3
   30370:	46bd      	mov	sp, r7
   30372:	b00b      	add	sp, #44	; 0x2c
   30374:	bd90      	pop	{r4, r7, pc}
   30376:	46c0      	nop			; (mov r8, r8)
   30378:	000301ed 	.word	0x000301ed
   3037c:	0002fbb1 	.word	0x0002fbb1
   30380:	0002fcd3 	.word	0x0002fcd3
   30384:	0002fab9 	.word	0x0002fab9
   30388:	0002fcfd 	.word	0x0002fcfd
   3038c:	0002fda5 	.word	0x0002fda5

00030390 <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
   30390:	b590      	push	{r4, r7, lr}
   30392:	b08b      	sub	sp, #44	; 0x2c
   30394:	af00      	add	r7, sp, #0
   30396:	60f8      	str	r0, [r7, #12]
   30398:	60b9      	str	r1, [r7, #8]
   3039a:	607a      	str	r2, [r7, #4]
   3039c:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   3039e:	2300      	movs	r3, #0
   303a0:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   303a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   303a4:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   303a6:	2300      	movs	r3, #0
   303a8:	623b      	str	r3, [r7, #32]
	int rc = 0;
   303aa:	2300      	movs	r3, #0
   303ac:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   303ae:	2318      	movs	r3, #24
   303b0:	18fb      	adds	r3, r7, r3
   303b2:	0018      	movs	r0, r3
   303b4:	4b2c      	ldr	r3, [pc, #176]	; (30468 <MQTTDeserialize_suback+0xd8>)
   303b6:	4798      	blx	r3
   303b8:	0003      	movs	r3, r0
   303ba:	001a      	movs	r2, r3
   303bc:	231c      	movs	r3, #28
   303be:	18fb      	adds	r3, r7, r3
   303c0:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != SUBACK)
   303c2:	231c      	movs	r3, #28
   303c4:	18fb      	adds	r3, r7, r3
   303c6:	781b      	ldrb	r3, [r3, #0]
   303c8:	220f      	movs	r2, #15
   303ca:	4393      	bics	r3, r2
   303cc:	b2db      	uxtb	r3, r3
   303ce:	2b90      	cmp	r3, #144	; 0x90
   303d0:	d142      	bne.n	30458 <MQTTDeserialize_suback+0xc8>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   303d2:	69bb      	ldr	r3, [r7, #24]
   303d4:	2214      	movs	r2, #20
   303d6:	18ba      	adds	r2, r7, r2
   303d8:	0011      	movs	r1, r2
   303da:	0018      	movs	r0, r3
   303dc:	4b23      	ldr	r3, [pc, #140]	; (3046c <MQTTDeserialize_suback+0xdc>)
   303de:	4798      	blx	r3
   303e0:	0003      	movs	r3, r0
   303e2:	627b      	str	r3, [r7, #36]	; 0x24
   303e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   303e6:	69bb      	ldr	r3, [r7, #24]
   303e8:	189b      	adds	r3, r3, r2
   303ea:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   303ec:	69bb      	ldr	r3, [r7, #24]
   303ee:	697a      	ldr	r2, [r7, #20]
   303f0:	189b      	adds	r3, r3, r2
   303f2:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   303f4:	6a3b      	ldr	r3, [r7, #32]
   303f6:	69ba      	ldr	r2, [r7, #24]
   303f8:	1a9b      	subs	r3, r3, r2
   303fa:	2b01      	cmp	r3, #1
   303fc:	dd2e      	ble.n	3045c <MQTTDeserialize_suback+0xcc>
		goto exit;

	*packetid = readInt(&curdata);
   303fe:	2318      	movs	r3, #24
   30400:	18fb      	adds	r3, r7, r3
   30402:	0018      	movs	r0, r3
   30404:	4b1a      	ldr	r3, [pc, #104]	; (30470 <MQTTDeserialize_suback+0xe0>)
   30406:	4798      	blx	r3
   30408:	0003      	movs	r3, r0
   3040a:	b29a      	uxth	r2, r3
   3040c:	68fb      	ldr	r3, [r7, #12]
   3040e:	801a      	strh	r2, [r3, #0]

	*count = 0;
   30410:	687b      	ldr	r3, [r7, #4]
   30412:	2200      	movs	r2, #0
   30414:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
   30416:	e018      	b.n	3044a <MQTTDeserialize_suback+0xba>
	{
		if (*count > maxcount)
   30418:	687b      	ldr	r3, [r7, #4]
   3041a:	681a      	ldr	r2, [r3, #0]
   3041c:	68bb      	ldr	r3, [r7, #8]
   3041e:	429a      	cmp	r2, r3
   30420:	dd03      	ble.n	3042a <MQTTDeserialize_suback+0x9a>
		{
			rc = -1;
   30422:	2301      	movs	r3, #1
   30424:	425b      	negs	r3, r3
   30426:	627b      	str	r3, [r7, #36]	; 0x24
			goto exit;
   30428:	e019      	b.n	3045e <MQTTDeserialize_suback+0xce>
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
   3042a:	687b      	ldr	r3, [r7, #4]
   3042c:	681a      	ldr	r2, [r3, #0]
   3042e:	1c51      	adds	r1, r2, #1
   30430:	687b      	ldr	r3, [r7, #4]
   30432:	6019      	str	r1, [r3, #0]
   30434:	0013      	movs	r3, r2
   30436:	009b      	lsls	r3, r3, #2
   30438:	683a      	ldr	r2, [r7, #0]
   3043a:	18d4      	adds	r4, r2, r3
   3043c:	2318      	movs	r3, #24
   3043e:	18fb      	adds	r3, r7, r3
   30440:	0018      	movs	r0, r3
   30442:	4b09      	ldr	r3, [pc, #36]	; (30468 <MQTTDeserialize_suback+0xd8>)
   30444:	4798      	blx	r3
   30446:	0003      	movs	r3, r0
   30448:	6023      	str	r3, [r4, #0]
	while (curdata < enddata)
   3044a:	69ba      	ldr	r2, [r7, #24]
   3044c:	6a3b      	ldr	r3, [r7, #32]
   3044e:	429a      	cmp	r2, r3
   30450:	d3e2      	bcc.n	30418 <MQTTDeserialize_suback+0x88>
	}

	rc = 1;
   30452:	2301      	movs	r3, #1
   30454:	627b      	str	r3, [r7, #36]	; 0x24
   30456:	e002      	b.n	3045e <MQTTDeserialize_suback+0xce>
		goto exit;
   30458:	46c0      	nop			; (mov r8, r8)
   3045a:	e000      	b.n	3045e <MQTTDeserialize_suback+0xce>
		goto exit;
   3045c:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   3045e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   30460:	0018      	movs	r0, r3
   30462:	46bd      	mov	sp, r7
   30464:	b00b      	add	sp, #44	; 0x2c
   30466:	bd90      	pop	{r4, r7, pc}
   30468:	0002fca7 	.word	0x0002fca7
   3046c:	0002fc41 	.word	0x0002fc41
   30470:	0002fc75 	.word	0x0002fc75

00030474 <http_client_get_config_defaults>:
 * So it needed reference to HTTP client module instance.
 */
static struct http_client_module *module_ref_inst[TCP_SOCK_MAX] = {NULL,};

void http_client_get_config_defaults(struct http_client_config *const config)
{
   30474:	b580      	push	{r7, lr}
   30476:	b082      	sub	sp, #8
   30478:	af00      	add	r7, sp, #0
   3047a:	6078      	str	r0, [r7, #4]
	config->port = 80;
   3047c:	687b      	ldr	r3, [r7, #4]
   3047e:	2250      	movs	r2, #80	; 0x50
   30480:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   30482:	687b      	ldr	r3, [r7, #4]
   30484:	2200      	movs	r2, #0
   30486:	709a      	strb	r2, [r3, #2]
	config->timeout = 20000;
   30488:	687b      	ldr	r3, [r7, #4]
   3048a:	4a0b      	ldr	r2, [pc, #44]	; (304b8 <http_client_get_config_defaults+0x44>)
   3048c:	811a      	strh	r2, [r3, #8]
	config->timer_inst = NULL;
   3048e:	687b      	ldr	r3, [r7, #4]
   30490:	2200      	movs	r2, #0
   30492:	605a      	str	r2, [r3, #4]
	config->recv_buffer = NULL;
   30494:	687b      	ldr	r3, [r7, #4]
   30496:	2200      	movs	r2, #0
   30498:	60da      	str	r2, [r3, #12]
	config->recv_buffer_size = 256;
   3049a:	687b      	ldr	r3, [r7, #4]
   3049c:	2280      	movs	r2, #128	; 0x80
   3049e:	0052      	lsls	r2, r2, #1
   304a0:	611a      	str	r2, [r3, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
   304a2:	687b      	ldr	r3, [r7, #4]
   304a4:	2252      	movs	r2, #82	; 0x52
   304a6:	615a      	str	r2, [r3, #20]
	config->user_agent = DEFAULT_USER_AGENT;
   304a8:	687b      	ldr	r3, [r7, #4]
   304aa:	4a04      	ldr	r2, [pc, #16]	; (304bc <http_client_get_config_defaults+0x48>)
   304ac:	619a      	str	r2, [r3, #24]
}
   304ae:	46c0      	nop			; (mov r8, r8)
   304b0:	46bd      	mov	sp, r7
   304b2:	b002      	add	sp, #8
   304b4:	bd80      	pop	{r7, pc}
   304b6:	46c0      	nop			; (mov r8, r8)
   304b8:	00004e20 	.word	0x00004e20
   304bc:	0003a648 	.word	0x0003a648

000304c0 <http_client_init>:

int http_client_init(struct http_client_module *const module, struct http_client_config *config)
{
   304c0:	b590      	push	{r4, r7, lr}
   304c2:	b083      	sub	sp, #12
   304c4:	af00      	add	r7, sp, #0
   304c6:	6078      	str	r0, [r7, #4]
   304c8:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL || config == NULL) {
   304ca:	687b      	ldr	r3, [r7, #4]
   304cc:	2b00      	cmp	r3, #0
   304ce:	d002      	beq.n	304d6 <http_client_init+0x16>
   304d0:	683b      	ldr	r3, [r7, #0]
   304d2:	2b00      	cmp	r3, #0
   304d4:	d102      	bne.n	304dc <http_client_init+0x1c>
		return -EINVAL;
   304d6:	2316      	movs	r3, #22
   304d8:	425b      	negs	r3, r3
   304da:	e058      	b.n	3058e <http_client_init+0xce>
	}

	if (config->recv_buffer_size == 0) {
   304dc:	683b      	ldr	r3, [r7, #0]
   304de:	691b      	ldr	r3, [r3, #16]
   304e0:	2b00      	cmp	r3, #0
   304e2:	d102      	bne.n	304ea <http_client_init+0x2a>
		return -EINVAL;
   304e4:	2316      	movs	r3, #22
   304e6:	425b      	negs	r3, r3
   304e8:	e051      	b.n	3058e <http_client_init+0xce>
	}

	if (config->timer_inst == NULL) {
   304ea:	683b      	ldr	r3, [r7, #0]
   304ec:	685b      	ldr	r3, [r3, #4]
   304ee:	2b00      	cmp	r3, #0
   304f0:	d102      	bne.n	304f8 <http_client_init+0x38>
		return -EINVAL;
   304f2:	2316      	movs	r3, #22
   304f4:	425b      	negs	r3, r3
   304f6:	e04a      	b.n	3058e <http_client_init+0xce>
	}

	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
   304f8:	683b      	ldr	r3, [r7, #0]
   304fa:	695b      	ldr	r3, [r3, #20]
   304fc:	2b51      	cmp	r3, #81	; 0x51
   304fe:	d802      	bhi.n	30506 <http_client_init+0x46>
		return -EINVAL;
   30500:	2316      	movs	r3, #22
   30502:	425b      	negs	r3, r3
   30504:	e043      	b.n	3058e <http_client_init+0xce>
	}

	memset(module, 0, sizeof(struct http_client_module));
   30506:	687b      	ldr	r3, [r7, #4]
   30508:	22e8      	movs	r2, #232	; 0xe8
   3050a:	2100      	movs	r1, #0
   3050c:	0018      	movs	r0, r3
   3050e:	4b22      	ldr	r3, [pc, #136]	; (30598 <http_client_init+0xd8>)
   30510:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
   30512:	687b      	ldr	r3, [r7, #4]
   30514:	3350      	adds	r3, #80	; 0x50
   30516:	6839      	ldr	r1, [r7, #0]
   30518:	221c      	movs	r2, #28
   3051a:	0018      	movs	r0, r3
   3051c:	4b1f      	ldr	r3, [pc, #124]	; (3059c <http_client_init+0xdc>)
   3051e:	4798      	blx	r3

	/* Allocate the buffer in the heap. */
	if (module->config.recv_buffer == NULL) {
   30520:	687b      	ldr	r3, [r7, #4]
   30522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   30524:	2b00      	cmp	r3, #0
   30526:	d115      	bne.n	30554 <http_client_init+0x94>
		module->config.recv_buffer = malloc(config->recv_buffer_size);
   30528:	683b      	ldr	r3, [r7, #0]
   3052a:	691b      	ldr	r3, [r3, #16]
   3052c:	0018      	movs	r0, r3
   3052e:	4b1c      	ldr	r3, [pc, #112]	; (305a0 <http_client_init+0xe0>)
   30530:	4798      	blx	r3
   30532:	0003      	movs	r3, r0
   30534:	001a      	movs	r2, r3
   30536:	687b      	ldr	r3, [r7, #4]
   30538:	65da      	str	r2, [r3, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
   3053a:	687b      	ldr	r3, [r7, #4]
   3053c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   3053e:	2b00      	cmp	r3, #0
   30540:	d102      	bne.n	30548 <http_client_init+0x88>
			return -ENOMEM;
   30542:	230c      	movs	r3, #12
   30544:	425b      	negs	r3, r3
   30546:	e022      	b.n	3058e <http_client_init+0xce>
		}
		module->alloc_buffer = 1;
   30548:	687b      	ldr	r3, [r7, #4]
   3054a:	2241      	movs	r2, #65	; 0x41
   3054c:	5c99      	ldrb	r1, [r3, r2]
   3054e:	2004      	movs	r0, #4
   30550:	4301      	orrs	r1, r0
   30552:	5499      	strb	r1, [r3, r2]
	}

	if (config->timeout > 0) {
   30554:	683b      	ldr	r3, [r7, #0]
   30556:	891b      	ldrh	r3, [r3, #8]
   30558:	2b00      	cmp	r3, #0
   3055a:	d010      	beq.n	3057e <http_client_init+0xbe>
		/* Enable the timer. */
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
   3055c:	683b      	ldr	r3, [r7, #0]
   3055e:	6858      	ldr	r0, [r3, #4]
   30560:	687a      	ldr	r2, [r7, #4]
   30562:	4910      	ldr	r1, [pc, #64]	; (305a4 <http_client_init+0xe4>)
   30564:	2300      	movs	r3, #0
   30566:	4c10      	ldr	r4, [pc, #64]	; (305a8 <http_client_init+0xe8>)
   30568:	47a0      	blx	r4
   3056a:	0002      	movs	r2, r0
   3056c:	687b      	ldr	r3, [r7, #4]
   3056e:	649a      	str	r2, [r3, #72]	; 0x48

		if (module->timer_id < 0) {
   30570:	687b      	ldr	r3, [r7, #4]
   30572:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   30574:	2b00      	cmp	r3, #0
   30576:	da02      	bge.n	3057e <http_client_init+0xbe>
			return -ENOSPC;
   30578:	231c      	movs	r3, #28
   3057a:	425b      	negs	r3, r3
   3057c:	e007      	b.n	3058e <http_client_init+0xce>
		}
	}

	module->req.state = STATE_INIT;
   3057e:	687b      	ldr	r3, [r7, #4]
   30580:	2200      	movs	r2, #0
   30582:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   30584:	687b      	ldr	r3, [r7, #4]
   30586:	22d8      	movs	r2, #216	; 0xd8
   30588:	2100      	movs	r1, #0
   3058a:	5099      	str	r1, [r3, r2]

	return 0;
   3058c:	2300      	movs	r3, #0
}
   3058e:	0018      	movs	r0, r3
   30590:	46bd      	mov	sp, r7
   30592:	b003      	add	sp, #12
   30594:	bd90      	pop	{r4, r7, pc}
   30596:	46c0      	nop			; (mov r8, r8)
   30598:	00034083 	.word	0x00034083
   3059c:	0003404d 	.word	0x0003404d
   305a0:	00034025 	.word	0x00034025
   305a4:	00030871 	.word	0x00030871
   305a8:	00031f15 	.word	0x00031f15

000305ac <http_client_register_callback>:

	return 0;
}

int http_client_register_callback(struct http_client_module *const module, http_client_callback_t callback)
{
   305ac:	b580      	push	{r7, lr}
   305ae:	b082      	sub	sp, #8
   305b0:	af00      	add	r7, sp, #0
   305b2:	6078      	str	r0, [r7, #4]
   305b4:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL) {
   305b6:	687b      	ldr	r3, [r7, #4]
   305b8:	2b00      	cmp	r3, #0
   305ba:	d102      	bne.n	305c2 <http_client_register_callback+0x16>
		return -EINVAL;
   305bc:	2316      	movs	r3, #22
   305be:	425b      	negs	r3, r3
   305c0:	e003      	b.n	305ca <http_client_register_callback+0x1e>
	}

	module->cb = callback;
   305c2:	687b      	ldr	r3, [r7, #4]
   305c4:	683a      	ldr	r2, [r7, #0]
   305c6:	64da      	str	r2, [r3, #76]	; 0x4c

	return 0;
   305c8:	2300      	movs	r3, #0
}
   305ca:	0018      	movs	r0, r3
   305cc:	46bd      	mov	sp, r7
   305ce:	b002      	add	sp, #8
   305d0:	bd80      	pop	{r7, pc}
	...

000305d4 <_hwerr_to_stderr>:

/**
 * \brief change HW error type to standard error.
 */
static inline int _hwerr_to_stderr(int err)
{
   305d4:	b580      	push	{r7, lr}
   305d6:	b082      	sub	sp, #8
   305d8:	af00      	add	r7, sp, #0
   305da:	6078      	str	r0, [r7, #4]
	switch (err) {
   305dc:	687b      	ldr	r3, [r7, #4]
   305de:	330e      	adds	r3, #14
   305e0:	2b0e      	cmp	r3, #14
   305e2:	d825      	bhi.n	30630 <_hwerr_to_stderr+0x5c>
   305e4:	009a      	lsls	r2, r3, #2
   305e6:	4b18      	ldr	r3, [pc, #96]	; (30648 <_hwerr_to_stderr+0x74>)
   305e8:	18d3      	adds	r3, r2, r3
   305ea:	681b      	ldr	r3, [r3, #0]
   305ec:	469f      	mov	pc, r3
		case 0:
			return -EIO;
   305ee:	2305      	movs	r3, #5
   305f0:	425b      	negs	r3, r3
   305f2:	e024      	b.n	3063e <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ADDRESS:
			return -ENOENT;
   305f4:	2302      	movs	r3, #2
   305f6:	425b      	negs	r3, r3
   305f8:	e021      	b.n	3063e <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_ALREADY_IN_USE:
			return -EADDRINUSE;
   305fa:	2370      	movs	r3, #112	; 0x70
   305fc:	425b      	negs	r3, r3
   305fe:	e01e      	b.n	3063e <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_TCP_SOCK:
		case SOCK_ERR_MAX_UDP_SOCK:
			return -ENOMEM;
   30600:	230c      	movs	r3, #12
   30602:	425b      	negs	r3, r3
   30604:	e01b      	b.n	3063e <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ARG:
			return -EINVAL;
   30606:	2316      	movs	r3, #22
   30608:	425b      	negs	r3, r3
   3060a:	e018      	b.n	3063e <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_LISTEN_SOCK:
			return -ENOMEM;
   3060c:	230c      	movs	r3, #12
   3060e:	425b      	negs	r3, r3
   30610:	e015      	b.n	3063e <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID:
			return -EIO;
   30612:	2305      	movs	r3, #5
   30614:	425b      	negs	r3, r3
   30616:	e012      	b.n	3063e <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_IS_REQUIRED:
			return -EDESTADDRREQ;
   30618:	2379      	movs	r3, #121	; 0x79
   3061a:	425b      	negs	r3, r3
   3061c:	e00f      	b.n	3063e <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_CONN_ABORTED:
			return -ECONNRESET;
   3061e:	2368      	movs	r3, #104	; 0x68
   30620:	425b      	negs	r3, r3
   30622:	e00c      	b.n	3063e <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_TIMEOUT:
			return -EAGAIN;
   30624:	230b      	movs	r3, #11
   30626:	425b      	negs	r3, r3
   30628:	e009      	b.n	3063e <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_BUFFER_FULL:
			return -EBUSY; /* HW error occurred. Retry it*/
   3062a:	2310      	movs	r3, #16
   3062c:	425b      	negs	r3, r3
   3062e:	e006      	b.n	3063e <_hwerr_to_stderr+0x6a>
		default:
			if (err < 0) {
   30630:	687b      	ldr	r3, [r7, #4]
   30632:	2b00      	cmp	r3, #0
   30634:	da02      	bge.n	3063c <_hwerr_to_stderr+0x68>
				return -EIO;
   30636:	2305      	movs	r3, #5
   30638:	425b      	negs	r3, r3
   3063a:	e000      	b.n	3063e <_hwerr_to_stderr+0x6a>
			}
			return 0;
   3063c:	2300      	movs	r3, #0
	}
}
   3063e:	0018      	movs	r0, r3
   30640:	46bd      	mov	sp, r7
   30642:	b002      	add	sp, #8
   30644:	bd80      	pop	{r7, pc}
   30646:	46c0      	nop			; (mov r8, r8)
   30648:	0003a784 	.word	0x0003a784

0003064c <http_client_socket_event_handler>:

void http_client_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   3064c:	b580      	push	{r7, lr}
   3064e:	b08a      	sub	sp, #40	; 0x28
   30650:	af00      	add	r7, sp, #0
   30652:	603a      	str	r2, [r7, #0]
   30654:	1dfb      	adds	r3, r7, #7
   30656:	1c02      	adds	r2, r0, #0
   30658:	701a      	strb	r2, [r3, #0]
   3065a:	1dbb      	adds	r3, r7, #6
   3065c:	1c0a      	adds	r2, r1, #0
   3065e:	701a      	strb	r2, [r3, #0]
	tstrSocketRecvMsg *msg_recv;
	int16_t send_ret;
	union http_client_data data;

	/* Find instance using the socket descriptor. */
	struct http_client_module *module = module_ref_inst[sock];
   30660:	1dfb      	adds	r3, r7, #7
   30662:	2200      	movs	r2, #0
   30664:	569a      	ldrsb	r2, [r3, r2]
   30666:	4b4b      	ldr	r3, [pc, #300]	; (30794 <http_client_socket_event_handler+0x148>)
   30668:	0092      	lsls	r2, r2, #2
   3066a:	58d3      	ldr	r3, [r2, r3]
   3066c:	627b      	str	r3, [r7, #36]	; 0x24
	/* If cannot found reference, This socket is not HTTP client socket. */
	if (module == NULL) {
   3066e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30670:	2b00      	cmp	r3, #0
   30672:	d100      	bne.n	30676 <http_client_socket_event_handler+0x2a>
   30674:	e08a      	b.n	3078c <http_client_socket_event_handler+0x140>
		return;
	}

	switch (msg_type) {
   30676:	1dbb      	adds	r3, r7, #6
   30678:	781b      	ldrb	r3, [r3, #0]
   3067a:	2b06      	cmp	r3, #6
   3067c:	d040      	beq.n	30700 <http_client_socket_event_handler+0xb4>
   3067e:	2b07      	cmp	r3, #7
   30680:	d060      	beq.n	30744 <http_client_socket_event_handler+0xf8>
   30682:	2b05      	cmp	r3, #5
   30684:	d000      	beq.n	30688 <http_client_socket_event_handler+0x3c>
		}
		/* Disable sending flag. */
		module->sending = 0;
    	break;
	default:
		break;
   30686:	e082      	b.n	3078e <http_client_socket_event_handler+0x142>
    	msg_connect = (tstrSocketConnectMsg*)msg_data;
   30688:	683b      	ldr	r3, [r7, #0]
   3068a:	623b      	str	r3, [r7, #32]
    	data.sock_connected.result = msg_connect->s8Error;
   3068c:	6a3b      	ldr	r3, [r7, #32]
   3068e:	785b      	ldrb	r3, [r3, #1]
   30690:	b25b      	sxtb	r3, r3
   30692:	001a      	movs	r2, r3
   30694:	230c      	movs	r3, #12
   30696:	18fb      	adds	r3, r7, r3
   30698:	601a      	str	r2, [r3, #0]
    	if (msg_connect->s8Error < 0) {
   3069a:	6a3b      	ldr	r3, [r7, #32]
   3069c:	785b      	ldrb	r3, [r3, #1]
   3069e:	b25b      	sxtb	r3, r3
   306a0:	2b00      	cmp	r3, #0
   306a2:	da0c      	bge.n	306be <http_client_socket_event_handler+0x72>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
   306a4:	6a3b      	ldr	r3, [r7, #32]
   306a6:	785b      	ldrb	r3, [r3, #1]
   306a8:	b25b      	sxtb	r3, r3
   306aa:	0018      	movs	r0, r3
   306ac:	4b3a      	ldr	r3, [pc, #232]	; (30798 <http_client_socket_event_handler+0x14c>)
   306ae:	4798      	blx	r3
   306b0:	0002      	movs	r2, r0
   306b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   306b4:	0011      	movs	r1, r2
   306b6:	0018      	movs	r0, r3
   306b8:	4b38      	ldr	r3, [pc, #224]	; (3079c <http_client_socket_event_handler+0x150>)
   306ba:	4798      	blx	r3
    	break;
   306bc:	e067      	b.n	3078e <http_client_socket_event_handler+0x142>
			if (module->cb != NULL) {
   306be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   306c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   306c2:	2b00      	cmp	r3, #0
   306c4:	d006      	beq.n	306d4 <http_client_socket_event_handler+0x88>
				module->cb(module, HTTP_CLIENT_CALLBACK_SOCK_CONNECTED, &data);
   306c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   306c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   306ca:	220c      	movs	r2, #12
   306cc:	18ba      	adds	r2, r7, r2
   306ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
   306d0:	2100      	movs	r1, #0
   306d2:	4798      	blx	r3
			module->req.state = STATE_REQ_SEND_HEADER;
   306d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   306d6:	2203      	movs	r2, #3
   306d8:	66da      	str	r2, [r3, #108]	; 0x6c
			sw_timer_enable_callback(module->config.timer_inst, module->timer_id, module->config.timeout);
   306da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   306dc:	6d58      	ldr	r0, [r3, #84]	; 0x54
   306de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   306e0:	6c99      	ldr	r1, [r3, #72]	; 0x48
   306e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   306e4:	2258      	movs	r2, #88	; 0x58
   306e6:	5a9b      	ldrh	r3, [r3, r2]
   306e8:	001a      	movs	r2, r3
   306ea:	4b2d      	ldr	r3, [pc, #180]	; (307a0 <http_client_socket_event_handler+0x154>)
   306ec:	4798      	blx	r3
    		_http_client_recv_packet(module);
   306ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   306f0:	0018      	movs	r0, r3
   306f2:	4b2c      	ldr	r3, [pc, #176]	; (307a4 <http_client_socket_event_handler+0x158>)
   306f4:	4798      	blx	r3
			_http_client_request(module);
   306f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   306f8:	0018      	movs	r0, r3
   306fa:	4b2b      	ldr	r3, [pc, #172]	; (307a8 <http_client_socket_event_handler+0x15c>)
   306fc:	4798      	blx	r3
    	break;
   306fe:	e046      	b.n	3078e <http_client_socket_event_handler+0x142>
    	msg_recv = (tstrSocketRecvMsg*)msg_data;
   30700:	683b      	ldr	r3, [r7, #0]
   30702:	61fb      	str	r3, [r7, #28]
    	if (msg_recv->s16BufferSize > 0) {
   30704:	69fb      	ldr	r3, [r7, #28]
   30706:	2204      	movs	r2, #4
   30708:	5e9b      	ldrsh	r3, [r3, r2]
   3070a:	2b00      	cmp	r3, #0
   3070c:	dd09      	ble.n	30722 <http_client_socket_event_handler+0xd6>
    		_http_client_recved_packet(module, msg_recv->s16BufferSize);
   3070e:	69fb      	ldr	r3, [r7, #28]
   30710:	2204      	movs	r2, #4
   30712:	5e9b      	ldrsh	r3, [r3, r2]
   30714:	001a      	movs	r2, r3
   30716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30718:	0011      	movs	r1, r2
   3071a:	0018      	movs	r0, r3
   3071c:	4b23      	ldr	r3, [pc, #140]	; (307ac <http_client_socket_event_handler+0x160>)
   3071e:	4798      	blx	r3
   30720:	e00b      	b.n	3073a <http_client_socket_event_handler+0xee>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_recv->s16BufferSize));
   30722:	69fb      	ldr	r3, [r7, #28]
   30724:	2204      	movs	r2, #4
   30726:	5e9b      	ldrsh	r3, [r3, r2]
   30728:	0018      	movs	r0, r3
   3072a:	4b1b      	ldr	r3, [pc, #108]	; (30798 <http_client_socket_event_handler+0x14c>)
   3072c:	4798      	blx	r3
   3072e:	0002      	movs	r2, r0
   30730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30732:	0011      	movs	r1, r2
   30734:	0018      	movs	r0, r3
   30736:	4b19      	ldr	r3, [pc, #100]	; (3079c <http_client_socket_event_handler+0x150>)
   30738:	4798      	blx	r3
		_http_client_recv_packet(module);
   3073a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3073c:	0018      	movs	r0, r3
   3073e:	4b19      	ldr	r3, [pc, #100]	; (307a4 <http_client_socket_event_handler+0x158>)
   30740:	4798      	blx	r3
		break;
   30742:	e024      	b.n	3078e <http_client_socket_event_handler+0x142>
		send_ret = *(int16_t*)msg_data;
   30744:	231a      	movs	r3, #26
   30746:	18fb      	adds	r3, r7, r3
   30748:	683a      	ldr	r2, [r7, #0]
   3074a:	8812      	ldrh	r2, [r2, #0]
   3074c:	801a      	strh	r2, [r3, #0]
		if (send_ret < 0) {
   3074e:	231a      	movs	r3, #26
   30750:	18fb      	adds	r3, r7, r3
   30752:	2200      	movs	r2, #0
   30754:	5e9b      	ldrsh	r3, [r3, r2]
   30756:	2b00      	cmp	r3, #0
   30758:	da0d      	bge.n	30776 <http_client_socket_event_handler+0x12a>
			_http_client_clear_conn(module, _hwerr_to_stderr(send_ret));
   3075a:	231a      	movs	r3, #26
   3075c:	18fb      	adds	r3, r7, r3
   3075e:	2200      	movs	r2, #0
   30760:	5e9b      	ldrsh	r3, [r3, r2]
   30762:	0018      	movs	r0, r3
   30764:	4b0c      	ldr	r3, [pc, #48]	; (30798 <http_client_socket_event_handler+0x14c>)
   30766:	4798      	blx	r3
   30768:	0002      	movs	r2, r0
   3076a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3076c:	0011      	movs	r1, r2
   3076e:	0018      	movs	r0, r3
   30770:	4b0a      	ldr	r3, [pc, #40]	; (3079c <http_client_socket_event_handler+0x150>)
   30772:	4798      	blx	r3
   30774:	e003      	b.n	3077e <http_client_socket_event_handler+0x132>
    		_http_client_request(module);
   30776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30778:	0018      	movs	r0, r3
   3077a:	4b0b      	ldr	r3, [pc, #44]	; (307a8 <http_client_socket_event_handler+0x15c>)
   3077c:	4798      	blx	r3
		module->sending = 0;
   3077e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30780:	2241      	movs	r2, #65	; 0x41
   30782:	5c99      	ldrb	r1, [r3, r2]
   30784:	2001      	movs	r0, #1
   30786:	4381      	bics	r1, r0
   30788:	5499      	strb	r1, [r3, r2]
    	break;
   3078a:	e000      	b.n	3078e <http_client_socket_event_handler+0x142>
		return;
   3078c:	46c0      	nop			; (mov r8, r8)
	}

}
   3078e:	46bd      	mov	sp, r7
   30790:	b00a      	add	sp, #40	; 0x28
   30792:	bd80      	pop	{r7, pc}
   30794:	20004110 	.word	0x20004110
   30798:	000305d5 	.word	0x000305d5
   3079c:	00030c49 	.word	0x00030c49
   307a0:	00031fa5 	.word	0x00031fa5
   307a4:	000314d5 	.word	0x000314d5
   307a8:	00030d9d 	.word	0x00030d9d
   307ac:	00031539 	.word	0x00031539

000307b0 <http_client_socket_resolve_handler>:

void http_client_socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
   307b0:	b580      	push	{r7, lr}
   307b2:	b088      	sub	sp, #32
   307b4:	af00      	add	r7, sp, #0
   307b6:	6078      	str	r0, [r7, #4]
   307b8:	6039      	str	r1, [r7, #0]
	int i;
	struct http_client_module *module;
	struct sockaddr_in addr_in;

	for (i = 0; i < TCP_SOCK_MAX; i++) {
   307ba:	2300      	movs	r3, #0
   307bc:	61fb      	str	r3, [r7, #28]
   307be:	e048      	b.n	30852 <http_client_socket_resolve_handler+0xa2>
		if (module_ref_inst[i] != NULL) {
   307c0:	4b27      	ldr	r3, [pc, #156]	; (30860 <http_client_socket_resolve_handler+0xb0>)
   307c2:	69fa      	ldr	r2, [r7, #28]
   307c4:	0092      	lsls	r2, r2, #2
   307c6:	58d3      	ldr	r3, [r2, r3]
   307c8:	2b00      	cmp	r3, #0
   307ca:	d03f      	beq.n	3084c <http_client_socket_resolve_handler+0x9c>
			module = module_ref_inst[i];
   307cc:	4b24      	ldr	r3, [pc, #144]	; (30860 <http_client_socket_resolve_handler+0xb0>)
   307ce:	69fa      	ldr	r2, [r7, #28]
   307d0:	0092      	lsls	r2, r2, #2
   307d2:	58d3      	ldr	r3, [r2, r3]
   307d4:	61bb      	str	r3, [r7, #24]
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
   307d6:	69bb      	ldr	r3, [r7, #24]
   307d8:	1c5a      	adds	r2, r3, #1
   307da:	687b      	ldr	r3, [r7, #4]
   307dc:	0011      	movs	r1, r2
   307de:	0018      	movs	r0, r3
   307e0:	4b20      	ldr	r3, [pc, #128]	; (30864 <http_client_socket_resolve_handler+0xb4>)
   307e2:	4798      	blx	r3
   307e4:	1e03      	subs	r3, r0, #0
   307e6:	d131      	bne.n	3084c <http_client_socket_resolve_handler+0x9c>
   307e8:	69bb      	ldr	r3, [r7, #24]
   307ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   307ec:	2b01      	cmp	r3, #1
   307ee:	d12d      	bne.n	3084c <http_client_socket_resolve_handler+0x9c>
				if (server_ip == 0) { /* Host was not found or was not reachable. */ 
   307f0:	683b      	ldr	r3, [r7, #0]
   307f2:	2b00      	cmp	r3, #0
   307f4:	d107      	bne.n	30806 <http_client_socket_resolve_handler+0x56>
					_http_client_clear_conn(module, -EHOSTUNREACH);
   307f6:	2376      	movs	r3, #118	; 0x76
   307f8:	425a      	negs	r2, r3
   307fa:	69bb      	ldr	r3, [r7, #24]
   307fc:	0011      	movs	r1, r2
   307fe:	0018      	movs	r0, r3
   30800:	4b19      	ldr	r3, [pc, #100]	; (30868 <http_client_socket_resolve_handler+0xb8>)
   30802:	4798      	blx	r3
					return;
   30804:	e028      	b.n	30858 <http_client_socket_resolve_handler+0xa8>
				}
				addr_in.sin_family = AF_INET;
   30806:	2308      	movs	r3, #8
   30808:	18fb      	adds	r3, r7, r3
   3080a:	2202      	movs	r2, #2
   3080c:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   3080e:	69bb      	ldr	r3, [r7, #24]
   30810:	2250      	movs	r2, #80	; 0x50
   30812:	5a9b      	ldrh	r3, [r3, r2]
   30814:	021b      	lsls	r3, r3, #8
   30816:	b21a      	sxth	r2, r3
   30818:	69bb      	ldr	r3, [r7, #24]
   3081a:	2150      	movs	r1, #80	; 0x50
   3081c:	5a5b      	ldrh	r3, [r3, r1]
   3081e:	0a1b      	lsrs	r3, r3, #8
   30820:	b29b      	uxth	r3, r3
   30822:	b21b      	sxth	r3, r3
   30824:	4313      	orrs	r3, r2
   30826:	b21b      	sxth	r3, r3
   30828:	b29a      	uxth	r2, r3
   3082a:	2308      	movs	r3, #8
   3082c:	18fb      	adds	r3, r7, r3
   3082e:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = server_ip;
   30830:	2308      	movs	r3, #8
   30832:	18fb      	adds	r3, r7, r3
   30834:	683a      	ldr	r2, [r7, #0]
   30836:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   30838:	69bb      	ldr	r3, [r7, #24]
   3083a:	781b      	ldrb	r3, [r3, #0]
   3083c:	b25b      	sxtb	r3, r3
   3083e:	2208      	movs	r2, #8
   30840:	18b9      	adds	r1, r7, r2
   30842:	2210      	movs	r2, #16
   30844:	0018      	movs	r0, r3
   30846:	4b09      	ldr	r3, [pc, #36]	; (3086c <http_client_socket_resolve_handler+0xbc>)
   30848:	4798      	blx	r3
				return;
   3084a:	e005      	b.n	30858 <http_client_socket_resolve_handler+0xa8>
	for (i = 0; i < TCP_SOCK_MAX; i++) {
   3084c:	69fb      	ldr	r3, [r7, #28]
   3084e:	3301      	adds	r3, #1
   30850:	61fb      	str	r3, [r7, #28]
   30852:	69fb      	ldr	r3, [r7, #28]
   30854:	2b06      	cmp	r3, #6
   30856:	ddb3      	ble.n	307c0 <http_client_socket_resolve_handler+0x10>
			}
		}
	}
}
   30858:	46bd      	mov	sp, r7
   3085a:	b008      	add	sp, #32
   3085c:	bd80      	pop	{r7, pc}
   3085e:	46c0      	nop			; (mov r8, r8)
   30860:	20004110 	.word	0x20004110
   30864:	000343db 	.word	0x000343db
   30868:	00030c49 	.word	0x00030c49
   3086c:	000251c5 	.word	0x000251c5

00030870 <http_client_timer_callback>:

void http_client_timer_callback(struct sw_timer_module *const module, int timer_id, void *context, int period)
{
   30870:	b580      	push	{r7, lr}
   30872:	b086      	sub	sp, #24
   30874:	af00      	add	r7, sp, #0
   30876:	60f8      	str	r0, [r7, #12]
   30878:	60b9      	str	r1, [r7, #8]
   3087a:	607a      	str	r2, [r7, #4]
   3087c:	603b      	str	r3, [r7, #0]
	struct http_client_module *module_inst = (struct http_client_module *)context;
   3087e:	687b      	ldr	r3, [r7, #4]
   30880:	617b      	str	r3, [r7, #20]

	/* Checks invalid arguments. */
	if (module_inst == NULL) {
   30882:	697b      	ldr	r3, [r7, #20]
   30884:	2b00      	cmp	r3, #0
   30886:	d007      	beq.n	30898 <http_client_timer_callback+0x28>
		return;
	}

	_http_client_clear_conn(module_inst, -ETIME);
   30888:	233e      	movs	r3, #62	; 0x3e
   3088a:	425a      	negs	r2, r3
   3088c:	697b      	ldr	r3, [r7, #20]
   3088e:	0011      	movs	r1, r2
   30890:	0018      	movs	r0, r3
   30892:	4b03      	ldr	r3, [pc, #12]	; (308a0 <http_client_timer_callback+0x30>)
   30894:	4798      	blx	r3
   30896:	e000      	b.n	3089a <http_client_timer_callback+0x2a>
		return;
   30898:	46c0      	nop			; (mov r8, r8)
}
   3089a:	46bd      	mov	sp, r7
   3089c:	b006      	add	sp, #24
   3089e:	bd80      	pop	{r7, pc}
   308a0:	00030c49 	.word	0x00030c49

000308a4 <_is_ip>:

static int _is_ip(const char *host)
{
   308a4:	b580      	push	{r7, lr}
   308a6:	b084      	sub	sp, #16
   308a8:	af00      	add	r7, sp, #0
   308aa:	6078      	str	r0, [r7, #4]
	uint32_t isv6 = 0;
   308ac:	2300      	movs	r3, #0
   308ae:	60fb      	str	r3, [r7, #12]
	char ch;

	while (*host != '\0') {
   308b0:	e03a      	b.n	30928 <_is_ip+0x84>
		ch = *host++;
   308b2:	687b      	ldr	r3, [r7, #4]
   308b4:	1c5a      	adds	r2, r3, #1
   308b6:	607a      	str	r2, [r7, #4]
   308b8:	220b      	movs	r2, #11
   308ba:	18ba      	adds	r2, r7, r2
   308bc:	781b      	ldrb	r3, [r3, #0]
   308be:	7013      	strb	r3, [r2, #0]
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
   308c0:	230b      	movs	r3, #11
   308c2:	18fb      	adds	r3, r7, r3
   308c4:	781b      	ldrb	r3, [r3, #0]
   308c6:	2b60      	cmp	r3, #96	; 0x60
   308c8:	d904      	bls.n	308d4 <_is_ip+0x30>
   308ca:	230b      	movs	r3, #11
   308cc:	18fb      	adds	r3, r7, r3
   308ce:	781b      	ldrb	r3, [r3, #0]
   308d0:	2b66      	cmp	r3, #102	; 0x66
   308d2:	d913      	bls.n	308fc <_is_ip+0x58>
   308d4:	230b      	movs	r3, #11
   308d6:	18fb      	adds	r3, r7, r3
   308d8:	781b      	ldrb	r3, [r3, #0]
   308da:	2b40      	cmp	r3, #64	; 0x40
   308dc:	d904      	bls.n	308e8 <_is_ip+0x44>
   308de:	230b      	movs	r3, #11
   308e0:	18fb      	adds	r3, r7, r3
   308e2:	781b      	ldrb	r3, [r3, #0]
   308e4:	2b46      	cmp	r3, #70	; 0x46
   308e6:	d909      	bls.n	308fc <_is_ip+0x58>
   308e8:	230b      	movs	r3, #11
   308ea:	18fb      	adds	r3, r7, r3
   308ec:	781b      	ldrb	r3, [r3, #0]
   308ee:	2b3a      	cmp	r3, #58	; 0x3a
   308f0:	d004      	beq.n	308fc <_is_ip+0x58>
   308f2:	230b      	movs	r3, #11
   308f4:	18fb      	adds	r3, r7, r3
   308f6:	781b      	ldrb	r3, [r3, #0]
   308f8:	2b2f      	cmp	r3, #47	; 0x2f
   308fa:	d102      	bne.n	30902 <_is_ip+0x5e>
			isv6 = 1;
   308fc:	2301      	movs	r3, #1
   308fe:	60fb      	str	r3, [r7, #12]
   30900:	e012      	b.n	30928 <_is_ip+0x84>
		} else if (ch == '.') {
   30902:	230b      	movs	r3, #11
   30904:	18fb      	adds	r3, r7, r3
   30906:	781b      	ldrb	r3, [r3, #0]
   30908:	2b2e      	cmp	r3, #46	; 0x2e
   3090a:	d104      	bne.n	30916 <_is_ip+0x72>
			if (isv6) {
   3090c:	68fb      	ldr	r3, [r7, #12]
   3090e:	2b00      	cmp	r3, #0
   30910:	d00a      	beq.n	30928 <_is_ip+0x84>
				return 0;
   30912:	2300      	movs	r3, #0
   30914:	e00d      	b.n	30932 <_is_ip+0x8e>
			}
		} else if ((ch & 0x30) != 0x30) {
   30916:	230b      	movs	r3, #11
   30918:	18fb      	adds	r3, r7, r3
   3091a:	781b      	ldrb	r3, [r3, #0]
   3091c:	2230      	movs	r2, #48	; 0x30
   3091e:	4013      	ands	r3, r2
   30920:	2b30      	cmp	r3, #48	; 0x30
   30922:	d001      	beq.n	30928 <_is_ip+0x84>
			return 0;
   30924:	2300      	movs	r3, #0
   30926:	e004      	b.n	30932 <_is_ip+0x8e>
	while (*host != '\0') {
   30928:	687b      	ldr	r3, [r7, #4]
   3092a:	781b      	ldrb	r3, [r3, #0]
   3092c:	2b00      	cmp	r3, #0
   3092e:	d1c0      	bne.n	308b2 <_is_ip+0xe>
		}
	}
	return 1;
   30930:	2301      	movs	r3, #1
}
   30932:	0018      	movs	r0, r3
   30934:	46bd      	mov	sp, r7
   30936:	b004      	add	sp, #16
   30938:	bd80      	pop	{r7, pc}
	...

0003093c <http_client_send_request>:

int http_client_send_request(struct http_client_module *const module, const char *url,
	enum http_method method, struct http_entity *const entity, const char *ext_header)
{
   3093c:	b5b0      	push	{r4, r5, r7, lr}
   3093e:	b08e      	sub	sp, #56	; 0x38
   30940:	af00      	add	r7, sp, #0
   30942:	60f8      	str	r0, [r7, #12]
   30944:	60b9      	str	r1, [r7, #8]
   30946:	603b      	str	r3, [r7, #0]
   30948:	1dfb      	adds	r3, r7, #7
   3094a:	701a      	strb	r2, [r3, #0]
	uint8_t flag = 0;
   3094c:	2337      	movs	r3, #55	; 0x37
   3094e:	18fb      	adds	r3, r7, r3
   30950:	2200      	movs	r2, #0
   30952:	701a      	strb	r2, [r3, #0]
	struct sockaddr_in addr_in;
	const char *uri = NULL;
   30954:	2300      	movs	r3, #0
   30956:	62bb      	str	r3, [r7, #40]	; 0x28
	int i = 0, j = 0, reconnect = 0;
   30958:	2300      	movs	r3, #0
   3095a:	633b      	str	r3, [r7, #48]	; 0x30
   3095c:	2300      	movs	r3, #0
   3095e:	62fb      	str	r3, [r7, #44]	; 0x2c
   30960:	2300      	movs	r3, #0
   30962:	627b      	str	r3, [r7, #36]	; 0x24

	if (module == NULL) {
   30964:	68fb      	ldr	r3, [r7, #12]
   30966:	2b00      	cmp	r3, #0
   30968:	d102      	bne.n	30970 <http_client_send_request+0x34>
		return -EINVAL;
   3096a:	2316      	movs	r3, #22
   3096c:	425b      	negs	r3, r3
   3096e:	e145      	b.n	30bfc <http_client_send_request+0x2c0>
	}

	if (module->req.state > STATE_SOCK_CONNECTED) {
   30970:	68fb      	ldr	r3, [r7, #12]
   30972:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   30974:	2b02      	cmp	r3, #2
   30976:	d902      	bls.n	3097e <http_client_send_request+0x42>
		return -EBUSY;
   30978:	2310      	movs	r3, #16
   3097a:	425b      	negs	r3, r3
   3097c:	e13e      	b.n	30bfc <http_client_send_request+0x2c0>
	}

	/* Separate host and uri */
	if (!strncmp(url, "http://", 7)) {
   3097e:	49a1      	ldr	r1, [pc, #644]	; (30c04 <http_client_send_request+0x2c8>)
   30980:	68bb      	ldr	r3, [r7, #8]
   30982:	2207      	movs	r2, #7
   30984:	0018      	movs	r0, r3
   30986:	4ba0      	ldr	r3, [pc, #640]	; (30c08 <http_client_send_request+0x2cc>)
   30988:	4798      	blx	r3
   3098a:	1e03      	subs	r3, r0, #0
   3098c:	d102      	bne.n	30994 <http_client_send_request+0x58>
		i = 7;
   3098e:	2307      	movs	r3, #7
   30990:	633b      	str	r3, [r7, #48]	; 0x30
   30992:	e009      	b.n	309a8 <http_client_send_request+0x6c>
	} else if (!strncmp(url, "https://", 8)) {
   30994:	499d      	ldr	r1, [pc, #628]	; (30c0c <http_client_send_request+0x2d0>)
   30996:	68bb      	ldr	r3, [r7, #8]
   30998:	2208      	movs	r2, #8
   3099a:	0018      	movs	r0, r3
   3099c:	4b9a      	ldr	r3, [pc, #616]	; (30c08 <http_client_send_request+0x2cc>)
   3099e:	4798      	blx	r3
   309a0:	1e03      	subs	r3, r0, #0
   309a2:	d101      	bne.n	309a8 <http_client_send_request+0x6c>
		i = 8;
   309a4:	2308      	movs	r3, #8
   309a6:	633b      	str	r3, [r7, #48]	; 0x30
	}
	reconnect = strncmp(module->host, url + i, strlen(module->host));
   309a8:	68fb      	ldr	r3, [r7, #12]
   309aa:	1c5c      	adds	r4, r3, #1
   309ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   309ae:	68ba      	ldr	r2, [r7, #8]
   309b0:	18d5      	adds	r5, r2, r3
   309b2:	68fb      	ldr	r3, [r7, #12]
   309b4:	3301      	adds	r3, #1
   309b6:	0018      	movs	r0, r3
   309b8:	4b95      	ldr	r3, [pc, #596]	; (30c10 <http_client_send_request+0x2d4>)
   309ba:	4798      	blx	r3
   309bc:	0003      	movs	r3, r0
   309be:	001a      	movs	r2, r3
   309c0:	0029      	movs	r1, r5
   309c2:	0020      	movs	r0, r4
   309c4:	4b90      	ldr	r3, [pc, #576]	; (30c08 <http_client_send_request+0x2cc>)
   309c6:	4798      	blx	r3
   309c8:	0003      	movs	r3, r0
   309ca:	627b      	str	r3, [r7, #36]	; 0x24

	for (; url[i] != '\0' && url[i] != '/'; i++) {
   309cc:	e00d      	b.n	309ea <http_client_send_request+0xae>
		module->host[j++] = url[i];
   309ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   309d0:	1c5a      	adds	r2, r3, #1
   309d2:	62fa      	str	r2, [r7, #44]	; 0x2c
   309d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   309d6:	68b9      	ldr	r1, [r7, #8]
   309d8:	188a      	adds	r2, r1, r2
   309da:	7811      	ldrb	r1, [r2, #0]
   309dc:	68fa      	ldr	r2, [r7, #12]
   309de:	18d3      	adds	r3, r2, r3
   309e0:	1c0a      	adds	r2, r1, #0
   309e2:	705a      	strb	r2, [r3, #1]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
   309e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   309e6:	3301      	adds	r3, #1
   309e8:	633b      	str	r3, [r7, #48]	; 0x30
   309ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   309ec:	68ba      	ldr	r2, [r7, #8]
   309ee:	18d3      	adds	r3, r2, r3
   309f0:	781b      	ldrb	r3, [r3, #0]
   309f2:	2b00      	cmp	r3, #0
   309f4:	d005      	beq.n	30a02 <http_client_send_request+0xc6>
   309f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   309f8:	68ba      	ldr	r2, [r7, #8]
   309fa:	18d3      	adds	r3, r2, r3
   309fc:	781b      	ldrb	r3, [r3, #0]
   309fe:	2b2f      	cmp	r3, #47	; 0x2f
   30a00:	d1e5      	bne.n	309ce <http_client_send_request+0x92>
	}
	module->host[j] = '\0';
   30a02:	68fa      	ldr	r2, [r7, #12]
   30a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   30a06:	18d3      	adds	r3, r2, r3
   30a08:	3301      	adds	r3, #1
   30a0a:	2200      	movs	r2, #0
   30a0c:	701a      	strb	r2, [r3, #0]
	uri = url + i;
   30a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   30a10:	68ba      	ldr	r2, [r7, #8]
   30a12:	18d3      	adds	r3, r2, r3
   30a14:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Checks the parameters. */
	if (strlen(module->host) == 0) {
   30a16:	68fb      	ldr	r3, [r7, #12]
   30a18:	3301      	adds	r3, #1
   30a1a:	781b      	ldrb	r3, [r3, #0]
   30a1c:	2b00      	cmp	r3, #0
   30a1e:	d102      	bne.n	30a26 <http_client_send_request+0xea>
		return -EINVAL;
   30a20:	2316      	movs	r3, #22
   30a22:	425b      	negs	r3, r3
   30a24:	e0ea      	b.n	30bfc <http_client_send_request+0x2c0>
	}

	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
   30a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
   30a28:	0018      	movs	r0, r3
   30a2a:	4b79      	ldr	r3, [pc, #484]	; (30c10 <http_client_send_request+0x2d4>)
   30a2c:	4798      	blx	r3
   30a2e:	0003      	movs	r3, r0
   30a30:	2b3f      	cmp	r3, #63	; 0x3f
   30a32:	d902      	bls.n	30a3a <http_client_send_request+0xfe>
		return -ENAMETOOLONG;
   30a34:	235b      	movs	r3, #91	; 0x5b
   30a36:	425b      	negs	r3, r3
   30a38:	e0e0      	b.n	30bfc <http_client_send_request+0x2c0>
	}

	if (module->req.ext_header != NULL) {
   30a3a:	68fb      	ldr	r3, [r7, #12]
   30a3c:	22d4      	movs	r2, #212	; 0xd4
   30a3e:	589b      	ldr	r3, [r3, r2]
   30a40:	2b00      	cmp	r3, #0
   30a42:	d005      	beq.n	30a50 <http_client_send_request+0x114>
		free(module->req.ext_header);
   30a44:	68fb      	ldr	r3, [r7, #12]
   30a46:	22d4      	movs	r2, #212	; 0xd4
   30a48:	589b      	ldr	r3, [r3, r2]
   30a4a:	0018      	movs	r0, r3
   30a4c:	4b71      	ldr	r3, [pc, #452]	; (30c14 <http_client_send_request+0x2d8>)
   30a4e:	4798      	blx	r3
	}
	if (ext_header != NULL) {
   30a50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   30a52:	2b00      	cmp	r3, #0
   30a54:	d010      	beq.n	30a78 <http_client_send_request+0x13c>
		module->req.ext_header = strdup(ext_header);
   30a56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   30a58:	0018      	movs	r0, r3
   30a5a:	4b6f      	ldr	r3, [pc, #444]	; (30c18 <http_client_send_request+0x2dc>)
   30a5c:	4798      	blx	r3
   30a5e:	0003      	movs	r3, r0
   30a60:	0019      	movs	r1, r3
   30a62:	68fb      	ldr	r3, [r7, #12]
   30a64:	22d4      	movs	r2, #212	; 0xd4
   30a66:	5099      	str	r1, [r3, r2]
		if (module->req.ext_header == NULL) {
   30a68:	68fb      	ldr	r3, [r7, #12]
   30a6a:	22d4      	movs	r2, #212	; 0xd4
   30a6c:	589b      	ldr	r3, [r3, r2]
   30a6e:	2b00      	cmp	r3, #0
   30a70:	d106      	bne.n	30a80 <http_client_send_request+0x144>
			return -ENOMEM;
   30a72:	230c      	movs	r3, #12
   30a74:	425b      	negs	r3, r3
   30a76:	e0c1      	b.n	30bfc <http_client_send_request+0x2c0>
		}
	} else {
		module->req.ext_header = NULL;
   30a78:	68fb      	ldr	r3, [r7, #12]
   30a7a:	22d4      	movs	r2, #212	; 0xd4
   30a7c:	2100      	movs	r1, #0
   30a7e:	5099      	str	r1, [r3, r2]
	}

	module->sending = 0;
   30a80:	68fb      	ldr	r3, [r7, #12]
   30a82:	2241      	movs	r2, #65	; 0x41
   30a84:	5c99      	ldrb	r1, [r3, r2]
   30a86:	2001      	movs	r0, #1
   30a88:	4381      	bics	r1, r0
   30a8a:	5499      	strb	r1, [r3, r2]
	module->recved_size = 0;
   30a8c:	68fb      	ldr	r3, [r7, #12]
   30a8e:	2200      	movs	r2, #0
   30a90:	645a      	str	r2, [r3, #68]	; 0x44
	if (uri[0] == '/') {
   30a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
   30a94:	781b      	ldrb	r3, [r3, #0]
   30a96:	2b2f      	cmp	r3, #47	; 0x2f
   30a98:	d107      	bne.n	30aaa <http_client_send_request+0x16e>
		strcpy(module->req.uri, uri);
   30a9a:	68fb      	ldr	r3, [r7, #12]
   30a9c:	3370      	adds	r3, #112	; 0x70
   30a9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   30aa0:	0011      	movs	r1, r2
   30aa2:	0018      	movs	r0, r3
   30aa4:	4b5d      	ldr	r3, [pc, #372]	; (30c1c <http_client_send_request+0x2e0>)
   30aa6:	4798      	blx	r3
   30aa8:	e00f      	b.n	30aca <http_client_send_request+0x18e>
		} else {
		module->req.uri[0] = '/';
   30aaa:	68fb      	ldr	r3, [r7, #12]
   30aac:	2270      	movs	r2, #112	; 0x70
   30aae:	212f      	movs	r1, #47	; 0x2f
   30ab0:	5499      	strb	r1, [r3, r2]
		if (uri[0] != 0) {
   30ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   30ab4:	781b      	ldrb	r3, [r3, #0]
   30ab6:	2b00      	cmp	r3, #0
   30ab8:	d007      	beq.n	30aca <http_client_send_request+0x18e>
			strcpy(module->req.uri + 1, uri);
   30aba:	68fb      	ldr	r3, [r7, #12]
   30abc:	3370      	adds	r3, #112	; 0x70
   30abe:	3301      	adds	r3, #1
   30ac0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   30ac2:	0011      	movs	r1, r2
   30ac4:	0018      	movs	r0, r3
   30ac6:	4b55      	ldr	r3, [pc, #340]	; (30c1c <http_client_send_request+0x2e0>)
   30ac8:	4798      	blx	r3
		}
	}

	if (entity != NULL) {
   30aca:	683b      	ldr	r3, [r7, #0]
   30acc:	2b00      	cmp	r3, #0
   30ace:	d007      	beq.n	30ae0 <http_client_send_request+0x1a4>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
   30ad0:	68fb      	ldr	r3, [r7, #12]
   30ad2:	33b0      	adds	r3, #176	; 0xb0
   30ad4:	6839      	ldr	r1, [r7, #0]
   30ad6:	2218      	movs	r2, #24
   30ad8:	0018      	movs	r0, r3
   30ada:	4b51      	ldr	r3, [pc, #324]	; (30c20 <http_client_send_request+0x2e4>)
   30adc:	4798      	blx	r3
   30ade:	e006      	b.n	30aee <http_client_send_request+0x1b2>
		} else {
		memset(&module->req.entity, 0, sizeof(struct http_entity));
   30ae0:	68fb      	ldr	r3, [r7, #12]
   30ae2:	33b0      	adds	r3, #176	; 0xb0
   30ae4:	2218      	movs	r2, #24
   30ae6:	2100      	movs	r1, #0
   30ae8:	0018      	movs	r0, r3
   30aea:	4b4e      	ldr	r3, [pc, #312]	; (30c24 <http_client_send_request+0x2e8>)
   30aec:	4798      	blx	r3
	}

	module->req.method = method;
   30aee:	68fb      	ldr	r3, [r7, #12]
   30af0:	1dfa      	adds	r2, r7, #7
   30af2:	21c8      	movs	r1, #200	; 0xc8
   30af4:	7812      	ldrb	r2, [r2, #0]
   30af6:	545a      	strb	r2, [r3, r1]
	
	switch (module->req.state) {
   30af8:	68fb      	ldr	r3, [r7, #12]
   30afa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   30afc:	2b01      	cmp	r3, #1
   30afe:	d003      	beq.n	30b08 <http_client_send_request+0x1cc>
   30b00:	d316      	bcc.n	30b30 <http_client_send_request+0x1f4>
   30b02:	2b02      	cmp	r3, #2
   30b04:	d004      	beq.n	30b10 <http_client_send_request+0x1d4>
   30b06:	e074      	b.n	30bf2 <http_client_send_request+0x2b6>
	case STATE_TRY_SOCK_CONNECT:
		if (!reconnect) {
   30b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30b0a:	2b00      	cmp	r3, #0
   30b0c:	d100      	bne.n	30b10 <http_client_send_request+0x1d4>
   30b0e:	e073      	b.n	30bf8 <http_client_send_request+0x2bc>
			break; /* Currently try to connect to the same server. */
		}
	case STATE_SOCK_CONNECTED:
		if (!reconnect) {
   30b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30b12:	2b00      	cmp	r3, #0
   30b14:	d107      	bne.n	30b26 <http_client_send_request+0x1ea>
			module->req.state = STATE_REQ_SEND_HEADER;
   30b16:	68fb      	ldr	r3, [r7, #12]
   30b18:	2203      	movs	r2, #3
   30b1a:	66da      	str	r2, [r3, #108]	; 0x6c
			/* Send request immediately. */
			_http_client_request(module);
   30b1c:	68fb      	ldr	r3, [r7, #12]
   30b1e:	0018      	movs	r0, r3
   30b20:	4b41      	ldr	r3, [pc, #260]	; (30c28 <http_client_send_request+0x2ec>)
   30b22:	4798      	blx	r3
			break;
   30b24:	e069      	b.n	30bfa <http_client_send_request+0x2be>
		} else {
			/* Request to another peer. Disconnect and try connect again. */
			_http_client_clear_conn(module, 0);
   30b26:	68fb      	ldr	r3, [r7, #12]
   30b28:	2100      	movs	r1, #0
   30b2a:	0018      	movs	r0, r3
   30b2c:	4b3f      	ldr	r3, [pc, #252]	; (30c2c <http_client_send_request+0x2f0>)
   30b2e:	4798      	blx	r3
		}
	case STATE_INIT:
		if (module->config.tls) {
   30b30:	68fb      	ldr	r3, [r7, #12]
   30b32:	2252      	movs	r2, #82	; 0x52
   30b34:	5c9b      	ldrb	r3, [r3, r2]
   30b36:	2b00      	cmp	r3, #0
   30b38:	d007      	beq.n	30b4a <http_client_send_request+0x20e>
			flag |= SOCKET_FLAGS_SSL;
   30b3a:	2337      	movs	r3, #55	; 0x37
   30b3c:	18fb      	adds	r3, r7, r3
   30b3e:	2237      	movs	r2, #55	; 0x37
   30b40:	18ba      	adds	r2, r7, r2
   30b42:	7812      	ldrb	r2, [r2, #0]
   30b44:	2101      	movs	r1, #1
   30b46:	430a      	orrs	r2, r1
   30b48:	701a      	strb	r2, [r3, #0]
		}
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
   30b4a:	2337      	movs	r3, #55	; 0x37
   30b4c:	18fb      	adds	r3, r7, r3
   30b4e:	781b      	ldrb	r3, [r3, #0]
   30b50:	001a      	movs	r2, r3
   30b52:	2101      	movs	r1, #1
   30b54:	2002      	movs	r0, #2
   30b56:	4b36      	ldr	r3, [pc, #216]	; (30c30 <http_client_send_request+0x2f4>)
   30b58:	4798      	blx	r3
   30b5a:	0003      	movs	r3, r0
   30b5c:	001a      	movs	r2, r3
   30b5e:	68fb      	ldr	r3, [r7, #12]
   30b60:	701a      	strb	r2, [r3, #0]
		if (module->sock >= 0) {
   30b62:	68fb      	ldr	r3, [r7, #12]
   30b64:	781b      	ldrb	r3, [r3, #0]
   30b66:	b25b      	sxtb	r3, r3
   30b68:	2b00      	cmp	r3, #0
   30b6a:	db3f      	blt.n	30bec <http_client_send_request+0x2b0>
			module_ref_inst[module->sock] = module;
   30b6c:	68fb      	ldr	r3, [r7, #12]
   30b6e:	781b      	ldrb	r3, [r3, #0]
   30b70:	b25b      	sxtb	r3, r3
   30b72:	001a      	movs	r2, r3
   30b74:	4b2f      	ldr	r3, [pc, #188]	; (30c34 <http_client_send_request+0x2f8>)
   30b76:	0092      	lsls	r2, r2, #2
   30b78:	68f9      	ldr	r1, [r7, #12]
   30b7a:	50d1      	str	r1, [r2, r3]
			if (_is_ip(module->host)) {
   30b7c:	68fb      	ldr	r3, [r7, #12]
   30b7e:	3301      	adds	r3, #1
   30b80:	0018      	movs	r0, r3
   30b82:	4b2d      	ldr	r3, [pc, #180]	; (30c38 <http_client_send_request+0x2fc>)
   30b84:	4798      	blx	r3
   30b86:	1e03      	subs	r3, r0, #0
   30b88:	d027      	beq.n	30bda <http_client_send_request+0x29e>
				addr_in.sin_family = AF_INET;
   30b8a:	2314      	movs	r3, #20
   30b8c:	18fb      	adds	r3, r7, r3
   30b8e:	2202      	movs	r2, #2
   30b90:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   30b92:	68fb      	ldr	r3, [r7, #12]
   30b94:	2250      	movs	r2, #80	; 0x50
   30b96:	5a9b      	ldrh	r3, [r3, r2]
   30b98:	021b      	lsls	r3, r3, #8
   30b9a:	b21a      	sxth	r2, r3
   30b9c:	68fb      	ldr	r3, [r7, #12]
   30b9e:	2150      	movs	r1, #80	; 0x50
   30ba0:	5a5b      	ldrh	r3, [r3, r1]
   30ba2:	0a1b      	lsrs	r3, r3, #8
   30ba4:	b29b      	uxth	r3, r3
   30ba6:	b21b      	sxth	r3, r3
   30ba8:	4313      	orrs	r3, r2
   30baa:	b21b      	sxth	r3, r3
   30bac:	b29a      	uxth	r2, r3
   30bae:	2314      	movs	r3, #20
   30bb0:	18fb      	adds	r3, r7, r3
   30bb2:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
   30bb4:	68fb      	ldr	r3, [r7, #12]
   30bb6:	3301      	adds	r3, #1
   30bb8:	0018      	movs	r0, r3
   30bba:	4b20      	ldr	r3, [pc, #128]	; (30c3c <http_client_send_request+0x300>)
   30bbc:	4798      	blx	r3
   30bbe:	0002      	movs	r2, r0
   30bc0:	2314      	movs	r3, #20
   30bc2:	18fb      	adds	r3, r7, r3
   30bc4:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   30bc6:	68fb      	ldr	r3, [r7, #12]
   30bc8:	781b      	ldrb	r3, [r3, #0]
   30bca:	b25b      	sxtb	r3, r3
   30bcc:	2214      	movs	r2, #20
   30bce:	18b9      	adds	r1, r7, r2
   30bd0:	2210      	movs	r2, #16
   30bd2:	0018      	movs	r0, r3
   30bd4:	4b1a      	ldr	r3, [pc, #104]	; (30c40 <http_client_send_request+0x304>)
   30bd6:	4798      	blx	r3
   30bd8:	e004      	b.n	30be4 <http_client_send_request+0x2a8>
			} else {
				gethostbyname((uint8*)module->host);
   30bda:	68fb      	ldr	r3, [r7, #12]
   30bdc:	3301      	adds	r3, #1
   30bde:	0018      	movs	r0, r3
   30be0:	4b18      	ldr	r3, [pc, #96]	; (30c44 <http_client_send_request+0x308>)
   30be2:	4798      	blx	r3
			}
			module->req.state = STATE_TRY_SOCK_CONNECT;
   30be4:	68fb      	ldr	r3, [r7, #12]
   30be6:	2201      	movs	r2, #1
   30be8:	66da      	str	r2, [r3, #108]	; 0x6c
		} else {
			return -ENOSPC;
		}
		break;
   30bea:	e006      	b.n	30bfa <http_client_send_request+0x2be>
			return -ENOSPC;
   30bec:	231c      	movs	r3, #28
   30bee:	425b      	negs	r3, r3
   30bf0:	e004      	b.n	30bfc <http_client_send_request+0x2c0>
	default:
		/* STATE_TRY_REQ */
		/* STATE_WAIT_RESP */
		/* STATE_RECV_RESP */
		/* Session was busy. Try again later. */
		return -EAGAIN;
   30bf2:	230b      	movs	r3, #11
   30bf4:	425b      	negs	r3, r3
   30bf6:	e001      	b.n	30bfc <http_client_send_request+0x2c0>
			break; /* Currently try to connect to the same server. */
   30bf8:	46c0      	nop			; (mov r8, r8)
	}

	return 0;
   30bfa:	2300      	movs	r3, #0
}
   30bfc:	0018      	movs	r0, r3
   30bfe:	46bd      	mov	sp, r7
   30c00:	b00e      	add	sp, #56	; 0x38
   30c02:	bdb0      	pop	{r4, r5, r7, pc}
   30c04:	0003a654 	.word	0x0003a654
   30c08:	00034449 	.word	0x00034449
   30c0c:	0003a65c 	.word	0x0003a65c
   30c10:	0003443b 	.word	0x0003443b
   30c14:	00034039 	.word	0x00034039
   30c18:	00034401 	.word	0x00034401
   30c1c:	000343ef 	.word	0x000343ef
   30c20:	0003404d 	.word	0x0003404d
   30c24:	00034083 	.word	0x00034083
   30c28:	00030d9d 	.word	0x00030d9d
   30c2c:	00030c49 	.word	0x00030c49
   30c30:	00024fb1 	.word	0x00024fb1
   30c34:	20004110 	.word	0x20004110
   30c38:	000308a5 	.word	0x000308a5
   30c3c:	000256fd 	.word	0x000256fd
   30c40:	000251c5 	.word	0x000251c5
   30c44:	00025805 	.word	0x00025805

00030c48 <_http_client_clear_conn>:

	return 0;
}

void _http_client_clear_conn(struct http_client_module *const module, int reason)
{
   30c48:	b580      	push	{r7, lr}
   30c4a:	b086      	sub	sp, #24
   30c4c:	af00      	add	r7, sp, #0
   30c4e:	6078      	str	r0, [r7, #4]
   30c50:	6039      	str	r1, [r7, #0]
	union http_client_data data;

	if (module->req.entity.close) {
   30c52:	687b      	ldr	r3, [r7, #4]
   30c54:	22c0      	movs	r2, #192	; 0xc0
   30c56:	589b      	ldr	r3, [r3, r2]
   30c58:	2b00      	cmp	r3, #0
   30c5a:	d007      	beq.n	30c6c <_http_client_clear_conn+0x24>
		module->req.entity.close(module->req.entity.priv_data);
   30c5c:	687b      	ldr	r3, [r7, #4]
   30c5e:	22c0      	movs	r2, #192	; 0xc0
   30c60:	589b      	ldr	r3, [r3, r2]
   30c62:	687a      	ldr	r2, [r7, #4]
   30c64:	21c4      	movs	r1, #196	; 0xc4
   30c66:	5852      	ldr	r2, [r2, r1]
   30c68:	0010      	movs	r0, r2
   30c6a:	4798      	blx	r3
	}

	memset(&module->req.entity, 0, sizeof(struct http_entity));
   30c6c:	687b      	ldr	r3, [r7, #4]
   30c6e:	33b0      	adds	r3, #176	; 0xb0
   30c70:	2218      	movs	r2, #24
   30c72:	2100      	movs	r1, #0
   30c74:	0018      	movs	r0, r3
   30c76:	4b24      	ldr	r3, [pc, #144]	; (30d08 <_http_client_clear_conn+0xc0>)
   30c78:	4798      	blx	r3

	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
   30c7a:	687b      	ldr	r3, [r7, #4]
   30c7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   30c7e:	2b00      	cmp	r3, #0
   30c80:	d005      	beq.n	30c8e <_http_client_clear_conn+0x46>
		close(module->sock);
   30c82:	687b      	ldr	r3, [r7, #4]
   30c84:	781b      	ldrb	r3, [r3, #0]
   30c86:	b25b      	sxtb	r3, r3
   30c88:	0018      	movs	r0, r3
   30c8a:	4b20      	ldr	r3, [pc, #128]	; (30d0c <_http_client_clear_conn+0xc4>)
   30c8c:	4798      	blx	r3
	}

	module_ref_inst[module->sock] = NULL;
   30c8e:	687b      	ldr	r3, [r7, #4]
   30c90:	781b      	ldrb	r3, [r3, #0]
   30c92:	b25b      	sxtb	r3, r3
   30c94:	001a      	movs	r2, r3
   30c96:	4b1e      	ldr	r3, [pc, #120]	; (30d10 <_http_client_clear_conn+0xc8>)
   30c98:	0092      	lsls	r2, r2, #2
   30c9a:	2100      	movs	r1, #0
   30c9c:	50d1      	str	r1, [r2, r3]
	memset(&module->req, 0, sizeof(struct http_client_req));
   30c9e:	687b      	ldr	r3, [r7, #4]
   30ca0:	336c      	adds	r3, #108	; 0x6c
   30ca2:	226c      	movs	r2, #108	; 0x6c
   30ca4:	2100      	movs	r1, #0
   30ca6:	0018      	movs	r0, r3
   30ca8:	4b17      	ldr	r3, [pc, #92]	; (30d08 <_http_client_clear_conn+0xc0>)
   30caa:	4798      	blx	r3
	memset(&module->resp, 0, sizeof(struct http_client_resp));
   30cac:	687b      	ldr	r3, [r7, #4]
   30cae:	33d8      	adds	r3, #216	; 0xd8
   30cb0:	2210      	movs	r2, #16
   30cb2:	2100      	movs	r1, #0
   30cb4:	0018      	movs	r0, r3
   30cb6:	4b14      	ldr	r3, [pc, #80]	; (30d08 <_http_client_clear_conn+0xc0>)
   30cb8:	4798      	blx	r3
	module->req.state = STATE_INIT;
   30cba:	687b      	ldr	r3, [r7, #4]
   30cbc:	2200      	movs	r2, #0
   30cbe:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   30cc0:	687b      	ldr	r3, [r7, #4]
   30cc2:	22d8      	movs	r2, #216	; 0xd8
   30cc4:	2100      	movs	r1, #0
   30cc6:	5099      	str	r1, [r3, r2]

	module->sending = 0;
   30cc8:	687b      	ldr	r3, [r7, #4]
   30cca:	2241      	movs	r2, #65	; 0x41
   30ccc:	5c99      	ldrb	r1, [r3, r2]
   30cce:	2001      	movs	r0, #1
   30cd0:	4381      	bics	r1, r0
   30cd2:	5499      	strb	r1, [r3, r2]
	module->permanent = 0;
   30cd4:	687b      	ldr	r3, [r7, #4]
   30cd6:	2241      	movs	r2, #65	; 0x41
   30cd8:	5c99      	ldrb	r1, [r3, r2]
   30cda:	2002      	movs	r0, #2
   30cdc:	4381      	bics	r1, r0
   30cde:	5499      	strb	r1, [r3, r2]
	data.disconnected.reason = reason;
   30ce0:	230c      	movs	r3, #12
   30ce2:	18fb      	adds	r3, r7, r3
   30ce4:	683a      	ldr	r2, [r7, #0]
   30ce6:	601a      	str	r2, [r3, #0]
	if (module->cb) {
   30ce8:	687b      	ldr	r3, [r7, #4]
   30cea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30cec:	2b00      	cmp	r3, #0
   30cee:	d006      	beq.n	30cfe <_http_client_clear_conn+0xb6>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
   30cf0:	687b      	ldr	r3, [r7, #4]
   30cf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30cf4:	220c      	movs	r2, #12
   30cf6:	18ba      	adds	r2, r7, r2
   30cf8:	6878      	ldr	r0, [r7, #4]
   30cfa:	2104      	movs	r1, #4
   30cfc:	4798      	blx	r3
	}
}
   30cfe:	46c0      	nop			; (mov r8, r8)
   30d00:	46bd      	mov	sp, r7
   30d02:	b006      	add	sp, #24
   30d04:	bd80      	pop	{r7, pc}
   30d06:	46c0      	nop			; (mov r8, r8)
   30d08:	00034083 	.word	0x00034083
   30d0c:	000255bd 	.word	0x000255bd
   30d10:	20004110 	.word	0x20004110

00030d14 <_http_client_send_wait>:

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
   30d14:	b590      	push	{r4, r7, lr}
   30d16:	b087      	sub	sp, #28
   30d18:	af00      	add	r7, sp, #0
   30d1a:	60f8      	str	r0, [r7, #12]
   30d1c:	60b9      	str	r1, [r7, #8]
   30d1e:	607a      	str	r2, [r7, #4]
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
   30d20:	68fb      	ldr	r3, [r7, #12]
   30d22:	617b      	str	r3, [r7, #20]
	
	module->sending = 1;
   30d24:	697b      	ldr	r3, [r7, #20]
   30d26:	2241      	movs	r2, #65	; 0x41
   30d28:	5c99      	ldrb	r1, [r3, r2]
   30d2a:	2001      	movs	r0, #1
   30d2c:	4301      	orrs	r1, r0
   30d2e:	5499      	strb	r1, [r3, r2]

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
   30d30:	697b      	ldr	r3, [r7, #20]
   30d32:	2000      	movs	r0, #0
   30d34:	5618      	ldrsb	r0, [r3, r0]
   30d36:	687b      	ldr	r3, [r7, #4]
   30d38:	b29a      	uxth	r2, r3
   30d3a:	68b9      	ldr	r1, [r7, #8]
   30d3c:	2300      	movs	r3, #0
   30d3e:	4c14      	ldr	r4, [pc, #80]	; (30d90 <_http_client_send_wait+0x7c>)
   30d40:	47a0      	blx	r4
   30d42:	0003      	movs	r3, r0
   30d44:	613b      	str	r3, [r7, #16]
   30d46:	693b      	ldr	r3, [r7, #16]
   30d48:	2b00      	cmp	r3, #0
   30d4a:	da0f      	bge.n	30d6c <_http_client_send_wait+0x58>
		module->sending = 0;
   30d4c:	697b      	ldr	r3, [r7, #20]
   30d4e:	2241      	movs	r2, #65	; 0x41
   30d50:	5c99      	ldrb	r1, [r3, r2]
   30d52:	2001      	movs	r0, #1
   30d54:	4381      	bics	r1, r0
   30d56:	5499      	strb	r1, [r3, r2]
		return result;
   30d58:	693b      	ldr	r3, [r7, #16]
   30d5a:	e014      	b.n	30d86 <_http_client_send_wait+0x72>
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
		m2m_wifi_handle_events(NULL);
   30d5c:	2000      	movs	r0, #0
   30d5e:	4b0d      	ldr	r3, [pc, #52]	; (30d94 <_http_client_send_wait+0x80>)
   30d60:	4798      	blx	r3
		sw_timer_task(module->config.timer_inst);
   30d62:	697b      	ldr	r3, [r7, #20]
   30d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   30d66:	0018      	movs	r0, r3
   30d68:	4b0b      	ldr	r3, [pc, #44]	; (30d98 <_http_client_send_wait+0x84>)
   30d6a:	4798      	blx	r3
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   30d6c:	697b      	ldr	r3, [r7, #20]
   30d6e:	2241      	movs	r2, #65	; 0x41
   30d70:	5c9b      	ldrb	r3, [r3, r2]
   30d72:	2201      	movs	r2, #1
   30d74:	4013      	ands	r3, r2
   30d76:	b2db      	uxtb	r3, r3
   30d78:	2b00      	cmp	r3, #0
   30d7a:	d003      	beq.n	30d84 <_http_client_send_wait+0x70>
   30d7c:	697b      	ldr	r3, [r7, #20]
   30d7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   30d80:	2b02      	cmp	r3, #2
   30d82:	d8eb      	bhi.n	30d5c <_http_client_send_wait+0x48>
	}

	return 0;
   30d84:	2300      	movs	r3, #0
}
   30d86:	0018      	movs	r0, r3
   30d88:	46bd      	mov	sp, r7
   30d8a:	b007      	add	sp, #28
   30d8c:	bd90      	pop	{r4, r7, pc}
   30d8e:	46c0      	nop			; (mov r8, r8)
   30d90:	000252d9 	.word	0x000252d9
   30d94:	00021985 	.word	0x00021985
   30d98:	00032021 	.word	0x00032021

00030d9c <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
   30d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
   30d9e:	46c6      	mov	lr, r8
   30da0:	b500      	push	{lr}
   30da2:	b0a0      	sub	sp, #128	; 0x80
   30da4:	af02      	add	r7, sp, #8
   30da6:	61f8      	str	r0, [r7, #28]
   30da8:	4668      	mov	r0, sp
   30daa:	61b8      	str	r0, [r7, #24]
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
   30dac:	2318      	movs	r3, #24
   30dae:	2218      	movs	r2, #24
   30db0:	18ba      	adds	r2, r7, r2
   30db2:	18d0      	adds	r0, r2, r3
   30db4:	4bbd      	ldr	r3, [pc, #756]	; (310ac <_http_client_request+0x310>)
   30db6:	469c      	mov	ip, r3
   30db8:	4663      	mov	r3, ip
   30dba:	cb16      	ldmia	r3!, {r1, r2, r4}
   30dbc:	c016      	stmia	r0!, {r1, r2, r4}
   30dbe:	469c      	mov	ip, r3
   30dc0:	4663      	mov	r3, ip
   30dc2:	681b      	ldr	r3, [r3, #0]
   30dc4:	469c      	mov	ip, r3
   30dc6:	4663      	mov	r3, ip
   30dc8:	6003      	str	r3, [r0, #0]
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
   30dca:	69f8      	ldr	r0, [r7, #28]
   30dcc:	6e40      	ldr	r0, [r0, #100]	; 0x64
   30dce:	4684      	mov	ip, r0
   30dd0:	2301      	movs	r3, #1
   30dd2:	425b      	negs	r3, r3
   30dd4:	4698      	mov	r8, r3
   30dd6:	44c4      	add	ip, r8
   30dd8:	4663      	mov	r3, ip
   30dda:	66fb      	str	r3, [r7, #108]	; 0x6c
   30ddc:	6038      	str	r0, [r7, #0]
   30dde:	2300      	movs	r3, #0
   30de0:	607b      	str	r3, [r7, #4]
   30de2:	6839      	ldr	r1, [r7, #0]
   30de4:	687a      	ldr	r2, [r7, #4]
   30de6:	000b      	movs	r3, r1
   30de8:	0f5b      	lsrs	r3, r3, #29
   30dea:	469c      	mov	ip, r3
   30dec:	0013      	movs	r3, r2
   30dee:	00db      	lsls	r3, r3, #3
   30df0:	617b      	str	r3, [r7, #20]
   30df2:	4663      	mov	r3, ip
   30df4:	697c      	ldr	r4, [r7, #20]
   30df6:	431c      	orrs	r4, r3
   30df8:	617c      	str	r4, [r7, #20]
   30dfa:	000b      	movs	r3, r1
   30dfc:	00db      	lsls	r3, r3, #3
   30dfe:	613b      	str	r3, [r7, #16]
   30e00:	0005      	movs	r5, r0
   30e02:	2200      	movs	r2, #0
   30e04:	0016      	movs	r6, r2
   30e06:	0f6a      	lsrs	r2, r5, #29
   30e08:	00f3      	lsls	r3, r6, #3
   30e0a:	60fb      	str	r3, [r7, #12]
   30e0c:	68fb      	ldr	r3, [r7, #12]
   30e0e:	4313      	orrs	r3, r2
   30e10:	60fb      	str	r3, [r7, #12]
   30e12:	00eb      	lsls	r3, r5, #3
   30e14:	60bb      	str	r3, [r7, #8]
   30e16:	1dc3      	adds	r3, r0, #7
   30e18:	08db      	lsrs	r3, r3, #3
   30e1a:	00db      	lsls	r3, r3, #3
   30e1c:	466a      	mov	r2, sp
   30e1e:	1ad3      	subs	r3, r2, r3
   30e20:	469d      	mov	sp, r3
   30e22:	ab02      	add	r3, sp, #8
   30e24:	3300      	adds	r3, #0
   30e26:	66bb      	str	r3, [r7, #104]	; 0x68

	if (module == NULL) {
   30e28:	69fb      	ldr	r3, [r7, #28]
   30e2a:	2b00      	cmp	r3, #0
   30e2c:	d100      	bne.n	30e30 <_http_client_request+0x94>
   30e2e:	e346      	b.n	314be <_http_client_request+0x722>
		return;
	}

	if (module->sending != 0) {
   30e30:	69fb      	ldr	r3, [r7, #28]
   30e32:	2241      	movs	r2, #65	; 0x41
   30e34:	5c9b      	ldrb	r3, [r3, r2]
   30e36:	2201      	movs	r2, #1
   30e38:	4013      	ands	r3, r2
   30e3a:	b2db      	uxtb	r3, r3
   30e3c:	2b00      	cmp	r3, #0
   30e3e:	d000      	beq.n	30e42 <_http_client_request+0xa6>
   30e40:	e33f      	b.n	314c2 <_http_client_request+0x726>
		/* Device is busy. */
		return;
	}

	entity = &module->req.entity;
   30e42:	69fb      	ldr	r3, [r7, #28]
   30e44:	33b0      	adds	r3, #176	; 0xb0
   30e46:	667b      	str	r3, [r7, #100]	; 0x64

	switch (module->req.state) {
   30e48:	69fb      	ldr	r3, [r7, #28]
   30e4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   30e4c:	2b03      	cmp	r3, #3
   30e4e:	d003      	beq.n	30e58 <_http_client_request+0xbc>
   30e50:	2b04      	cmp	r3, #4
   30e52:	d100      	bne.n	30e56 <_http_client_request+0xba>
   30e54:	e1b3      	b.n	311be <_http_client_request+0x422>
		}

		break;
	default:
		/* Invalid status. */
		break;
   30e56:	e32f      	b.n	314b8 <_http_client_request+0x71c>
		module->req.content_length = 0;
   30e58:	69fb      	ldr	r3, [r7, #28]
   30e5a:	22cc      	movs	r2, #204	; 0xcc
   30e5c:	2100      	movs	r1, #0
   30e5e:	5099      	str	r1, [r3, r2]
		module->req.sent_length = 0;
   30e60:	69fb      	ldr	r3, [r7, #28]
   30e62:	22d0      	movs	r2, #208	; 0xd0
   30e64:	2100      	movs	r1, #0
   30e66:	5099      	str	r1, [r3, r2]
		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
   30e68:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   30e6a:	69fb      	ldr	r3, [r7, #28]
   30e6c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   30e6e:	4c90      	ldr	r4, [pc, #576]	; (310b0 <_http_client_request+0x314>)
   30e70:	2334      	movs	r3, #52	; 0x34
   30e72:	2018      	movs	r0, #24
   30e74:	1838      	adds	r0, r7, r0
   30e76:	18c0      	adds	r0, r0, r3
   30e78:	69fb      	ldr	r3, [r7, #28]
   30e7a:	9300      	str	r3, [sp, #0]
   30e7c:	0023      	movs	r3, r4
   30e7e:	4c8d      	ldr	r4, [pc, #564]	; (310b4 <_http_client_request+0x318>)
   30e80:	47a0      	blx	r4
		if (module->req.method == HTTP_METHOD_GET) {
   30e82:	69fb      	ldr	r3, [r7, #28]
   30e84:	22c8      	movs	r2, #200	; 0xc8
   30e86:	5c9b      	ldrb	r3, [r3, r2]
   30e88:	2b01      	cmp	r3, #1
   30e8a:	d10a      	bne.n	30ea2 <_http_client_request+0x106>
			stream_writer_send_buffer(&writer, "GET ", 4);
   30e8c:	498a      	ldr	r1, [pc, #552]	; (310b8 <_http_client_request+0x31c>)
   30e8e:	2334      	movs	r3, #52	; 0x34
   30e90:	2218      	movs	r2, #24
   30e92:	4694      	mov	ip, r2
   30e94:	44bc      	add	ip, r7
   30e96:	4463      	add	r3, ip
   30e98:	2204      	movs	r2, #4
   30e9a:	0018      	movs	r0, r3
   30e9c:	4b87      	ldr	r3, [pc, #540]	; (310bc <_http_client_request+0x320>)
   30e9e:	4798      	blx	r3
   30ea0:	e04e      	b.n	30f40 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_POST) {
   30ea2:	69fb      	ldr	r3, [r7, #28]
   30ea4:	22c8      	movs	r2, #200	; 0xc8
   30ea6:	5c9b      	ldrb	r3, [r3, r2]
   30ea8:	2b02      	cmp	r3, #2
   30eaa:	d10a      	bne.n	30ec2 <_http_client_request+0x126>
			stream_writer_send_buffer(&writer, "POST ", 5);
   30eac:	4984      	ldr	r1, [pc, #528]	; (310c0 <_http_client_request+0x324>)
   30eae:	2334      	movs	r3, #52	; 0x34
   30eb0:	2218      	movs	r2, #24
   30eb2:	4694      	mov	ip, r2
   30eb4:	44bc      	add	ip, r7
   30eb6:	4463      	add	r3, ip
   30eb8:	2205      	movs	r2, #5
   30eba:	0018      	movs	r0, r3
   30ebc:	4b7f      	ldr	r3, [pc, #508]	; (310bc <_http_client_request+0x320>)
   30ebe:	4798      	blx	r3
   30ec0:	e03e      	b.n	30f40 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_DELETE) {
   30ec2:	69fb      	ldr	r3, [r7, #28]
   30ec4:	22c8      	movs	r2, #200	; 0xc8
   30ec6:	5c9b      	ldrb	r3, [r3, r2]
   30ec8:	2b03      	cmp	r3, #3
   30eca:	d10a      	bne.n	30ee2 <_http_client_request+0x146>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
   30ecc:	497d      	ldr	r1, [pc, #500]	; (310c4 <_http_client_request+0x328>)
   30ece:	2334      	movs	r3, #52	; 0x34
   30ed0:	2218      	movs	r2, #24
   30ed2:	4694      	mov	ip, r2
   30ed4:	44bc      	add	ip, r7
   30ed6:	4463      	add	r3, ip
   30ed8:	2207      	movs	r2, #7
   30eda:	0018      	movs	r0, r3
   30edc:	4b77      	ldr	r3, [pc, #476]	; (310bc <_http_client_request+0x320>)
   30ede:	4798      	blx	r3
   30ee0:	e02e      	b.n	30f40 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_PUT) {
   30ee2:	69fb      	ldr	r3, [r7, #28]
   30ee4:	22c8      	movs	r2, #200	; 0xc8
   30ee6:	5c9b      	ldrb	r3, [r3, r2]
   30ee8:	2b04      	cmp	r3, #4
   30eea:	d10a      	bne.n	30f02 <_http_client_request+0x166>
			stream_writer_send_buffer(&writer, "PUT ", 4);
   30eec:	4976      	ldr	r1, [pc, #472]	; (310c8 <_http_client_request+0x32c>)
   30eee:	2334      	movs	r3, #52	; 0x34
   30ef0:	2218      	movs	r2, #24
   30ef2:	4694      	mov	ip, r2
   30ef4:	44bc      	add	ip, r7
   30ef6:	4463      	add	r3, ip
   30ef8:	2204      	movs	r2, #4
   30efa:	0018      	movs	r0, r3
   30efc:	4b6f      	ldr	r3, [pc, #444]	; (310bc <_http_client_request+0x320>)
   30efe:	4798      	blx	r3
   30f00:	e01e      	b.n	30f40 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
   30f02:	69fb      	ldr	r3, [r7, #28]
   30f04:	22c8      	movs	r2, #200	; 0xc8
   30f06:	5c9b      	ldrb	r3, [r3, r2]
   30f08:	2b05      	cmp	r3, #5
   30f0a:	d10a      	bne.n	30f22 <_http_client_request+0x186>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
   30f0c:	496f      	ldr	r1, [pc, #444]	; (310cc <_http_client_request+0x330>)
   30f0e:	2334      	movs	r3, #52	; 0x34
   30f10:	2218      	movs	r2, #24
   30f12:	4694      	mov	ip, r2
   30f14:	44bc      	add	ip, r7
   30f16:	4463      	add	r3, ip
   30f18:	2208      	movs	r2, #8
   30f1a:	0018      	movs	r0, r3
   30f1c:	4b67      	ldr	r3, [pc, #412]	; (310bc <_http_client_request+0x320>)
   30f1e:	4798      	blx	r3
   30f20:	e00e      	b.n	30f40 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_HEAD) {
   30f22:	69fb      	ldr	r3, [r7, #28]
   30f24:	22c8      	movs	r2, #200	; 0xc8
   30f26:	5c9b      	ldrb	r3, [r3, r2]
   30f28:	2b06      	cmp	r3, #6
   30f2a:	d109      	bne.n	30f40 <_http_client_request+0x1a4>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
   30f2c:	4968      	ldr	r1, [pc, #416]	; (310d0 <_http_client_request+0x334>)
   30f2e:	2334      	movs	r3, #52	; 0x34
   30f30:	2218      	movs	r2, #24
   30f32:	4694      	mov	ip, r2
   30f34:	44bc      	add	ip, r7
   30f36:	4463      	add	r3, ip
   30f38:	2205      	movs	r2, #5
   30f3a:	0018      	movs	r0, r3
   30f3c:	4b5f      	ldr	r3, [pc, #380]	; (310bc <_http_client_request+0x320>)
   30f3e:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
   30f40:	69fb      	ldr	r3, [r7, #28]
   30f42:	3370      	adds	r3, #112	; 0x70
   30f44:	001c      	movs	r4, r3
   30f46:	69fb      	ldr	r3, [r7, #28]
   30f48:	3370      	adds	r3, #112	; 0x70
   30f4a:	0018      	movs	r0, r3
   30f4c:	4b61      	ldr	r3, [pc, #388]	; (310d4 <_http_client_request+0x338>)
   30f4e:	4798      	blx	r3
   30f50:	0002      	movs	r2, r0
   30f52:	2334      	movs	r3, #52	; 0x34
   30f54:	2118      	movs	r1, #24
   30f56:	468c      	mov	ip, r1
   30f58:	44bc      	add	ip, r7
   30f5a:	4463      	add	r3, ip
   30f5c:	0021      	movs	r1, r4
   30f5e:	0018      	movs	r0, r3
   30f60:	4b56      	ldr	r3, [pc, #344]	; (310bc <_http_client_request+0x320>)
   30f62:	4798      	blx	r3
		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
   30f64:	495c      	ldr	r1, [pc, #368]	; (310d8 <_http_client_request+0x33c>)
   30f66:	2334      	movs	r3, #52	; 0x34
   30f68:	2218      	movs	r2, #24
   30f6a:	4694      	mov	ip, r2
   30f6c:	44bc      	add	ip, r7
   30f6e:	4463      	add	r3, ip
   30f70:	220b      	movs	r2, #11
   30f72:	0018      	movs	r0, r3
   30f74:	4b51      	ldr	r3, [pc, #324]	; (310bc <_http_client_request+0x320>)
   30f76:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
   30f78:	4958      	ldr	r1, [pc, #352]	; (310dc <_http_client_request+0x340>)
   30f7a:	2334      	movs	r3, #52	; 0x34
   30f7c:	2218      	movs	r2, #24
   30f7e:	4694      	mov	ip, r2
   30f80:	44bc      	add	ip, r7
   30f82:	4463      	add	r3, ip
   30f84:	220c      	movs	r2, #12
   30f86:	0018      	movs	r0, r3
   30f88:	4b4c      	ldr	r3, [pc, #304]	; (310bc <_http_client_request+0x320>)
   30f8a:	4798      	blx	r3
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
   30f8c:	69fb      	ldr	r3, [r7, #28]
   30f8e:	6e9c      	ldr	r4, [r3, #104]	; 0x68
   30f90:	69fb      	ldr	r3, [r7, #28]
   30f92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   30f94:	0018      	movs	r0, r3
   30f96:	4b4f      	ldr	r3, [pc, #316]	; (310d4 <_http_client_request+0x338>)
   30f98:	4798      	blx	r3
   30f9a:	0002      	movs	r2, r0
   30f9c:	2334      	movs	r3, #52	; 0x34
   30f9e:	2118      	movs	r1, #24
   30fa0:	468c      	mov	ip, r1
   30fa2:	44bc      	add	ip, r7
   30fa4:	4463      	add	r3, ip
   30fa6:	0021      	movs	r1, r4
   30fa8:	0018      	movs	r0, r3
   30faa:	4b44      	ldr	r3, [pc, #272]	; (310bc <_http_client_request+0x320>)
   30fac:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   30fae:	494c      	ldr	r1, [pc, #304]	; (310e0 <_http_client_request+0x344>)
   30fb0:	2334      	movs	r3, #52	; 0x34
   30fb2:	2218      	movs	r2, #24
   30fb4:	4694      	mov	ip, r2
   30fb6:	44bc      	add	ip, r7
   30fb8:	4463      	add	r3, ip
   30fba:	2202      	movs	r2, #2
   30fbc:	0018      	movs	r0, r3
   30fbe:	4b3f      	ldr	r3, [pc, #252]	; (310bc <_http_client_request+0x320>)
   30fc0:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
   30fc2:	4948      	ldr	r1, [pc, #288]	; (310e4 <_http_client_request+0x348>)
   30fc4:	2334      	movs	r3, #52	; 0x34
   30fc6:	2218      	movs	r2, #24
   30fc8:	4694      	mov	ip, r2
   30fca:	44bc      	add	ip, r7
   30fcc:	4463      	add	r3, ip
   30fce:	2206      	movs	r2, #6
   30fd0:	0018      	movs	r0, r3
   30fd2:	4b3a      	ldr	r3, [pc, #232]	; (310bc <_http_client_request+0x320>)
   30fd4:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
   30fd6:	69fb      	ldr	r3, [r7, #28]
   30fd8:	1c5c      	adds	r4, r3, #1
   30fda:	69fb      	ldr	r3, [r7, #28]
   30fdc:	3301      	adds	r3, #1
   30fde:	0018      	movs	r0, r3
   30fe0:	4b3c      	ldr	r3, [pc, #240]	; (310d4 <_http_client_request+0x338>)
   30fe2:	4798      	blx	r3
   30fe4:	0002      	movs	r2, r0
   30fe6:	2334      	movs	r3, #52	; 0x34
   30fe8:	2118      	movs	r1, #24
   30fea:	468c      	mov	ip, r1
   30fec:	44bc      	add	ip, r7
   30fee:	4463      	add	r3, ip
   30ff0:	0021      	movs	r1, r4
   30ff2:	0018      	movs	r0, r3
   30ff4:	4b31      	ldr	r3, [pc, #196]	; (310bc <_http_client_request+0x320>)
   30ff6:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   30ff8:	4939      	ldr	r1, [pc, #228]	; (310e0 <_http_client_request+0x344>)
   30ffa:	2334      	movs	r3, #52	; 0x34
   30ffc:	2218      	movs	r2, #24
   30ffe:	4694      	mov	ip, r2
   31000:	44bc      	add	ip, r7
   31002:	4463      	add	r3, ip
   31004:	2202      	movs	r2, #2
   31006:	0018      	movs	r0, r3
   31008:	4b2c      	ldr	r3, [pc, #176]	; (310bc <_http_client_request+0x320>)
   3100a:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
   3100c:	4936      	ldr	r1, [pc, #216]	; (310e8 <_http_client_request+0x34c>)
   3100e:	2334      	movs	r3, #52	; 0x34
   31010:	2218      	movs	r2, #24
   31012:	4694      	mov	ip, r2
   31014:	44bc      	add	ip, r7
   31016:	4463      	add	r3, ip
   31018:	2218      	movs	r2, #24
   3101a:	0018      	movs	r0, r3
   3101c:	4b27      	ldr	r3, [pc, #156]	; (310bc <_http_client_request+0x320>)
   3101e:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
   31020:	4932      	ldr	r1, [pc, #200]	; (310ec <_http_client_request+0x350>)
   31022:	2334      	movs	r3, #52	; 0x34
   31024:	2218      	movs	r2, #24
   31026:	4694      	mov	ip, r2
   31028:	44bc      	add	ip, r7
   3102a:	4463      	add	r3, ip
   3102c:	2213      	movs	r2, #19
   3102e:	0018      	movs	r0, r3
   31030:	4b22      	ldr	r3, [pc, #136]	; (310bc <_http_client_request+0x320>)
   31032:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
   31034:	492e      	ldr	r1, [pc, #184]	; (310f0 <_http_client_request+0x354>)
   31036:	2334      	movs	r3, #52	; 0x34
   31038:	2218      	movs	r2, #24
   3103a:	4694      	mov	ip, r2
   3103c:	44bc      	add	ip, r7
   3103e:	4463      	add	r3, ip
   31040:	2217      	movs	r2, #23
   31042:	0018      	movs	r0, r3
   31044:	4b1d      	ldr	r3, [pc, #116]	; (310bc <_http_client_request+0x320>)
   31046:	4798      	blx	r3
		if (entity->read != NULL) {
   31048:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   3104a:	68db      	ldr	r3, [r3, #12]
   3104c:	2b00      	cmp	r3, #0
   3104e:	d100      	bne.n	31052 <_http_client_request+0x2b6>
   31050:	e088      	b.n	31164 <_http_client_request+0x3c8>
			if (entity->is_chunked) {
   31052:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   31054:	781b      	ldrb	r3, [r3, #0]
   31056:	2b00      	cmp	r3, #0
   31058:	d00f      	beq.n	3107a <_http_client_request+0x2de>
				module->req.content_length = -1;
   3105a:	69fb      	ldr	r3, [r7, #28]
   3105c:	21cc      	movs	r1, #204	; 0xcc
   3105e:	2201      	movs	r2, #1
   31060:	4252      	negs	r2, r2
   31062:	505a      	str	r2, [r3, r1]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
   31064:	4923      	ldr	r1, [pc, #140]	; (310f4 <_http_client_request+0x358>)
   31066:	2334      	movs	r3, #52	; 0x34
   31068:	2218      	movs	r2, #24
   3106a:	4694      	mov	ip, r2
   3106c:	44bc      	add	ip, r7
   3106e:	4463      	add	r3, ip
   31070:	221c      	movs	r2, #28
   31072:	0018      	movs	r0, r3
   31074:	4b11      	ldr	r3, [pc, #68]	; (310bc <_http_client_request+0x320>)
   31076:	4798      	blx	r3
   31078:	e074      	b.n	31164 <_http_client_request+0x3c8>
			} else if(entity->get_contents_length) {
   3107a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   3107c:	689b      	ldr	r3, [r3, #8]
   3107e:	2b00      	cmp	r3, #0
   31080:	d070      	beq.n	31164 <_http_client_request+0x3c8>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
   31082:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   31084:	689a      	ldr	r2, [r3, #8]
   31086:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   31088:	695b      	ldr	r3, [r3, #20]
   3108a:	0018      	movs	r0, r3
   3108c:	4790      	blx	r2
   3108e:	0001      	movs	r1, r0
   31090:	69fb      	ldr	r3, [r7, #28]
   31092:	22cc      	movs	r2, #204	; 0xcc
   31094:	5099      	str	r1, [r3, r2]
				if (module->req.content_length < 0) {
   31096:	69fb      	ldr	r3, [r7, #28]
   31098:	22cc      	movs	r2, #204	; 0xcc
   3109a:	589b      	ldr	r3, [r3, r2]
   3109c:	2b00      	cmp	r3, #0
   3109e:	da2b      	bge.n	310f8 <_http_client_request+0x35c>
					module->req.content_length = 0;
   310a0:	69fb      	ldr	r3, [r7, #28]
   310a2:	22cc      	movs	r2, #204	; 0xcc
   310a4:	2100      	movs	r1, #0
   310a6:	5099      	str	r1, [r3, r2]
   310a8:	e05c      	b.n	31164 <_http_client_request+0x3c8>
   310aa:	46c0      	nop			; (mov r8, r8)
   310ac:	0003a744 	.word	0x0003a744
   310b0:	00030d15 	.word	0x00030d15
   310b4:	00031c7d 	.word	0x00031c7d
   310b8:	0003a668 	.word	0x0003a668
   310bc:	00031cfd 	.word	0x00031cfd
   310c0:	0003a670 	.word	0x0003a670
   310c4:	0003a678 	.word	0x0003a678
   310c8:	0003a680 	.word	0x0003a680
   310cc:	0003a688 	.word	0x0003a688
   310d0:	0003a694 	.word	0x0003a694
   310d4:	0003443b 	.word	0x0003443b
   310d8:	0003a69c 	.word	0x0003a69c
   310dc:	0003a6a8 	.word	0x0003a6a8
   310e0:	0003a6b8 	.word	0x0003a6b8
   310e4:	0003a6bc 	.word	0x0003a6bc
   310e8:	0003a6c4 	.word	0x0003a6c4
   310ec:	0003a6e0 	.word	0x0003a6e0
   310f0:	0003a6f4 	.word	0x0003a6f4
   310f4:	0003a70c 	.word	0x0003a70c
					sprintf(length, "%u", (unsigned int)module->req.content_length);
   310f8:	69fb      	ldr	r3, [r7, #28]
   310fa:	22cc      	movs	r2, #204	; 0xcc
   310fc:	589b      	ldr	r3, [r3, r2]
   310fe:	001a      	movs	r2, r3
   31100:	49e0      	ldr	r1, [pc, #896]	; (31484 <_http_client_request+0x6e8>)
   31102:	2328      	movs	r3, #40	; 0x28
   31104:	2018      	movs	r0, #24
   31106:	4684      	mov	ip, r0
   31108:	44bc      	add	ip, r7
   3110a:	4463      	add	r3, ip
   3110c:	0018      	movs	r0, r3
   3110e:	4bde      	ldr	r3, [pc, #888]	; (31488 <_http_client_request+0x6ec>)
   31110:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
   31112:	49de      	ldr	r1, [pc, #888]	; (3148c <_http_client_request+0x6f0>)
   31114:	2334      	movs	r3, #52	; 0x34
   31116:	2218      	movs	r2, #24
   31118:	4694      	mov	ip, r2
   3111a:	44bc      	add	ip, r7
   3111c:	4463      	add	r3, ip
   3111e:	2210      	movs	r2, #16
   31120:	0018      	movs	r0, r3
   31122:	4bdb      	ldr	r3, [pc, #876]	; (31490 <_http_client_request+0x6f4>)
   31124:	4798      	blx	r3
					stream_writer_send_buffer(&writer, length, strlen(length));
   31126:	2328      	movs	r3, #40	; 0x28
   31128:	2218      	movs	r2, #24
   3112a:	4694      	mov	ip, r2
   3112c:	44bc      	add	ip, r7
   3112e:	4463      	add	r3, ip
   31130:	0018      	movs	r0, r3
   31132:	4bd8      	ldr	r3, [pc, #864]	; (31494 <_http_client_request+0x6f8>)
   31134:	4798      	blx	r3
   31136:	0002      	movs	r2, r0
   31138:	2328      	movs	r3, #40	; 0x28
   3113a:	2118      	movs	r1, #24
   3113c:	1879      	adds	r1, r7, r1
   3113e:	18c9      	adds	r1, r1, r3
   31140:	2334      	movs	r3, #52	; 0x34
   31142:	2018      	movs	r0, #24
   31144:	4684      	mov	ip, r0
   31146:	44bc      	add	ip, r7
   31148:	4463      	add	r3, ip
   3114a:	0018      	movs	r0, r3
   3114c:	4bd0      	ldr	r3, [pc, #832]	; (31490 <_http_client_request+0x6f4>)
   3114e:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   31150:	49d1      	ldr	r1, [pc, #836]	; (31498 <_http_client_request+0x6fc>)
   31152:	2334      	movs	r3, #52	; 0x34
   31154:	2218      	movs	r2, #24
   31156:	4694      	mov	ip, r2
   31158:	44bc      	add	ip, r7
   3115a:	4463      	add	r3, ip
   3115c:	2202      	movs	r2, #2
   3115e:	0018      	movs	r0, r3
   31160:	4bcb      	ldr	r3, [pc, #812]	; (31490 <_http_client_request+0x6f4>)
   31162:	4798      	blx	r3
		if (module->req.ext_header != NULL ) {
   31164:	69fb      	ldr	r3, [r7, #28]
   31166:	22d4      	movs	r2, #212	; 0xd4
   31168:	589b      	ldr	r3, [r3, r2]
   3116a:	2b00      	cmp	r3, #0
   3116c:	d012      	beq.n	31194 <_http_client_request+0x3f8>
				module->req.ext_header,
   3116e:	69fb      	ldr	r3, [r7, #28]
   31170:	22d4      	movs	r2, #212	; 0xd4
   31172:	589c      	ldr	r4, [r3, r2]
				strlen(module->req.ext_header));
   31174:	69fb      	ldr	r3, [r7, #28]
   31176:	22d4      	movs	r2, #212	; 0xd4
   31178:	589b      	ldr	r3, [r3, r2]
			stream_writer_send_buffer(&writer,
   3117a:	0018      	movs	r0, r3
   3117c:	4bc5      	ldr	r3, [pc, #788]	; (31494 <_http_client_request+0x6f8>)
   3117e:	4798      	blx	r3
   31180:	0002      	movs	r2, r0
   31182:	2334      	movs	r3, #52	; 0x34
   31184:	2118      	movs	r1, #24
   31186:	468c      	mov	ip, r1
   31188:	44bc      	add	ip, r7
   3118a:	4463      	add	r3, ip
   3118c:	0021      	movs	r1, r4
   3118e:	0018      	movs	r0, r3
   31190:	4bbf      	ldr	r3, [pc, #764]	; (31490 <_http_client_request+0x6f4>)
   31192:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   31194:	49c0      	ldr	r1, [pc, #768]	; (31498 <_http_client_request+0x6fc>)
   31196:	2334      	movs	r3, #52	; 0x34
   31198:	2218      	movs	r2, #24
   3119a:	4694      	mov	ip, r2
   3119c:	44bc      	add	ip, r7
   3119e:	4463      	add	r3, ip
   311a0:	2202      	movs	r2, #2
   311a2:	0018      	movs	r0, r3
   311a4:	4bba      	ldr	r3, [pc, #744]	; (31490 <_http_client_request+0x6f4>)
   311a6:	4798      	blx	r3
		stream_writer_send_remain(&writer);
   311a8:	2334      	movs	r3, #52	; 0x34
   311aa:	2218      	movs	r2, #24
   311ac:	4694      	mov	ip, r2
   311ae:	44bc      	add	ip, r7
   311b0:	4463      	add	r3, ip
   311b2:	0018      	movs	r0, r3
   311b4:	4bb9      	ldr	r3, [pc, #740]	; (3149c <_http_client_request+0x700>)
   311b6:	4798      	blx	r3
		module->req.state = STATE_REQ_SEND_ENTITY;
   311b8:	69fb      	ldr	r3, [r7, #28]
   311ba:	2204      	movs	r2, #4
   311bc:	66da      	str	r2, [r3, #108]	; 0x6c
		if (module->req.content_length < 0 && entity->read) {
   311be:	69fb      	ldr	r3, [r7, #28]
   311c0:	22cc      	movs	r2, #204	; 0xcc
   311c2:	589b      	ldr	r3, [r3, r2]
   311c4:	2b00      	cmp	r3, #0
   311c6:	db00      	blt.n	311ca <_http_client_request+0x42e>
   311c8:	e0c6      	b.n	31358 <_http_client_request+0x5bc>
   311ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   311cc:	68db      	ldr	r3, [r3, #12]
   311ce:	2b00      	cmp	r3, #0
   311d0:	d100      	bne.n	311d4 <_http_client_request+0x438>
   311d2:	e0c1      	b.n	31358 <_http_client_request+0x5bc>
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   311d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   311d6:	68dc      	ldr	r4, [r3, #12]
   311d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   311da:	6958      	ldr	r0, [r3, #20]
   311dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   311de:	1d59      	adds	r1, r3, #5
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   311e0:	69fb      	ldr	r3, [r7, #28]
   311e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   311e4:	1fdd      	subs	r5, r3, #7
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   311e6:	69fb      	ldr	r3, [r7, #28]
   311e8:	22d0      	movs	r2, #208	; 0xd0
   311ea:	589b      	ldr	r3, [r3, r2]
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   311ec:	002a      	movs	r2, r5
   311ee:	47a0      	blx	r4
   311f0:	0003      	movs	r3, r0
   311f2:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   311f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   311f6:	2b00      	cmp	r3, #0
   311f8:	da01      	bge.n	311fe <_http_client_request+0x462>
				size = 0;
   311fa:	2300      	movs	r3, #0
   311fc:	677b      	str	r3, [r7, #116]	; 0x74
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
   311fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   31200:	220a      	movs	r2, #10
   31202:	711a      	strb	r2, [r3, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
   31204:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   31206:	220d      	movs	r2, #13
   31208:	70da      	strb	r2, [r3, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
   3120a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3120c:	3305      	adds	r3, #5
   3120e:	6eba      	ldr	r2, [r7, #104]	; 0x68
   31210:	210d      	movs	r1, #13
   31212:	54d1      	strb	r1, [r2, r3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
   31214:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31216:	3306      	adds	r3, #6
   31218:	6eba      	ldr	r2, [r7, #104]	; 0x68
   3121a:	210a      	movs	r1, #10
   3121c:	54d1      	strb	r1, [r2, r3]
			if (size >= 0) {
   3121e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31220:	2b00      	cmp	r3, #0
   31222:	db14      	blt.n	3124e <_http_client_request+0x4b2>
				ptr = buffer + 2;
   31224:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   31226:	3302      	adds	r3, #2
   31228:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[size % 16];
   3122a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3122c:	4a9c      	ldr	r2, [pc, #624]	; (314a0 <_http_client_request+0x704>)
   3122e:	4013      	ands	r3, r2
   31230:	d504      	bpl.n	3123c <_http_client_request+0x4a0>
   31232:	3b01      	subs	r3, #1
   31234:	2210      	movs	r2, #16
   31236:	4252      	negs	r2, r2
   31238:	4313      	orrs	r3, r2
   3123a:	3301      	adds	r3, #1
   3123c:	001a      	movs	r2, r3
   3123e:	2318      	movs	r3, #24
   31240:	2118      	movs	r1, #24
   31242:	468c      	mov	ip, r1
   31244:	44bc      	add	ip, r7
   31246:	4463      	add	r3, ip
   31248:	5c9a      	ldrb	r2, [r3, r2]
   3124a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   3124c:	701a      	strb	r2, [r3, #0]
			if (size >= 0x10) {
   3124e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31250:	2b0f      	cmp	r3, #15
   31252:	dd19      	ble.n	31288 <_http_client_request+0x4ec>
				ptr = buffer + 1;
   31254:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   31256:	3301      	adds	r3, #1
   31258:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x10) % 16];
   3125a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3125c:	2b00      	cmp	r3, #0
   3125e:	da00      	bge.n	31262 <_http_client_request+0x4c6>
   31260:	330f      	adds	r3, #15
   31262:	111b      	asrs	r3, r3, #4
   31264:	001a      	movs	r2, r3
   31266:	4b8e      	ldr	r3, [pc, #568]	; (314a0 <_http_client_request+0x704>)
   31268:	4013      	ands	r3, r2
   3126a:	d504      	bpl.n	31276 <_http_client_request+0x4da>
   3126c:	3b01      	subs	r3, #1
   3126e:	2210      	movs	r2, #16
   31270:	4252      	negs	r2, r2
   31272:	4313      	orrs	r3, r2
   31274:	3301      	adds	r3, #1
   31276:	001a      	movs	r2, r3
   31278:	2318      	movs	r3, #24
   3127a:	2118      	movs	r1, #24
   3127c:	468c      	mov	ip, r1
   3127e:	44bc      	add	ip, r7
   31280:	4463      	add	r3, ip
   31282:	5c9a      	ldrb	r2, [r3, r2]
   31284:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   31286:	701a      	strb	r2, [r3, #0]
			if (size >= 0x100) {
   31288:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3128a:	2bff      	cmp	r3, #255	; 0xff
   3128c:	dd18      	ble.n	312c0 <_http_client_request+0x524>
				ptr = buffer;
   3128e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   31290:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x100) % 16];
   31292:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31294:	2b00      	cmp	r3, #0
   31296:	da00      	bge.n	3129a <_http_client_request+0x4fe>
   31298:	33ff      	adds	r3, #255	; 0xff
   3129a:	121b      	asrs	r3, r3, #8
   3129c:	001a      	movs	r2, r3
   3129e:	4b80      	ldr	r3, [pc, #512]	; (314a0 <_http_client_request+0x704>)
   312a0:	4013      	ands	r3, r2
   312a2:	d504      	bpl.n	312ae <_http_client_request+0x512>
   312a4:	3b01      	subs	r3, #1
   312a6:	2210      	movs	r2, #16
   312a8:	4252      	negs	r2, r2
   312aa:	4313      	orrs	r3, r2
   312ac:	3301      	adds	r3, #1
   312ae:	001a      	movs	r2, r3
   312b0:	2318      	movs	r3, #24
   312b2:	2118      	movs	r1, #24
   312b4:	468c      	mov	ip, r1
   312b6:	44bc      	add	ip, r7
   312b8:	4463      	add	r3, ip
   312ba:	5c9a      	ldrb	r2, [r3, r2]
   312bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   312be:	701a      	strb	r2, [r3, #0]
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
   312c0:	69fb      	ldr	r3, [r7, #28]
   312c2:	2000      	movs	r0, #0
   312c4:	5618      	ldrsb	r0, [r3, r0]
   312c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   312c8:	3303      	adds	r3, #3
   312ca:	001a      	movs	r2, r3
   312cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   312ce:	1ad3      	subs	r3, r2, r3
   312d0:	b29a      	uxth	r2, r3
   312d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   312d4:	b29b      	uxth	r3, r3
   312d6:	18d3      	adds	r3, r2, r3
   312d8:	b29b      	uxth	r3, r3
   312da:	3304      	adds	r3, #4
   312dc:	b29a      	uxth	r2, r3
   312de:	6f39      	ldr	r1, [r7, #112]	; 0x70
   312e0:	2300      	movs	r3, #0
   312e2:	4c70      	ldr	r4, [pc, #448]	; (314a4 <_http_client_request+0x708>)
   312e4:	47a0      	blx	r4
   312e6:	0003      	movs	r3, r0
   312e8:	663b      	str	r3, [r7, #96]	; 0x60
   312ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   312ec:	2b00      	cmp	r3, #0
   312ee:	da07      	bge.n	31300 <_http_client_request+0x564>
				_http_client_clear_conn(module, -EIO);
   312f0:	2305      	movs	r3, #5
   312f2:	425a      	negs	r2, r3
   312f4:	69fb      	ldr	r3, [r7, #28]
   312f6:	0011      	movs	r1, r2
   312f8:	0018      	movs	r0, r3
   312fa:	4b6b      	ldr	r3, [pc, #428]	; (314a8 <_http_client_request+0x70c>)
   312fc:	4798      	blx	r3
				return;
   312fe:	e0e1      	b.n	314c4 <_http_client_request+0x728>
			module->req.sent_length += size;
   31300:	69fb      	ldr	r3, [r7, #28]
   31302:	22d0      	movs	r2, #208	; 0xd0
   31304:	589a      	ldr	r2, [r3, r2]
   31306:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31308:	18d2      	adds	r2, r2, r3
   3130a:	69fb      	ldr	r3, [r7, #28]
   3130c:	21d0      	movs	r1, #208	; 0xd0
   3130e:	505a      	str	r2, [r3, r1]
			if(size == 0) {
   31310:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31312:	2b00      	cmp	r3, #0
   31314:	d000      	beq.n	31318 <_http_client_request+0x57c>
   31316:	e0c9      	b.n	314ac <_http_client_request+0x710>
				if (module->req.entity.close) {
   31318:	69fb      	ldr	r3, [r7, #28]
   3131a:	22c0      	movs	r2, #192	; 0xc0
   3131c:	589b      	ldr	r3, [r3, r2]
   3131e:	2b00      	cmp	r3, #0
   31320:	d007      	beq.n	31332 <_http_client_request+0x596>
					module->req.entity.close(module->req.entity.priv_data);
   31322:	69fb      	ldr	r3, [r7, #28]
   31324:	22c0      	movs	r2, #192	; 0xc0
   31326:	589b      	ldr	r3, [r3, r2]
   31328:	69fa      	ldr	r2, [r7, #28]
   3132a:	21c4      	movs	r1, #196	; 0xc4
   3132c:	5852      	ldr	r2, [r2, r1]
   3132e:	0010      	movs	r0, r2
   31330:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   31332:	69fb      	ldr	r3, [r7, #28]
   31334:	2202      	movs	r2, #2
   31336:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   31338:	69fb      	ldr	r3, [r7, #28]
   3133a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3133c:	2b00      	cmp	r3, #0
   3133e:	d100      	bne.n	31342 <_http_client_request+0x5a6>
   31340:	e0b5      	b.n	314ae <_http_client_request+0x712>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   31342:	69fb      	ldr	r3, [r7, #28]
   31344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31346:	220c      	movs	r2, #12
   31348:	2118      	movs	r1, #24
   3134a:	468c      	mov	ip, r1
   3134c:	44bc      	add	ip, r7
   3134e:	4462      	add	r2, ip
   31350:	69f8      	ldr	r0, [r7, #28]
   31352:	2101      	movs	r1, #1
   31354:	4798      	blx	r3
				break;
   31356:	e0aa      	b.n	314ae <_http_client_request+0x712>
		} else if (module->req.content_length > 0 && entity->read) {
   31358:	69fb      	ldr	r3, [r7, #28]
   3135a:	22cc      	movs	r2, #204	; 0xcc
   3135c:	589b      	ldr	r3, [r3, r2]
   3135e:	2b00      	cmp	r3, #0
   31360:	dc00      	bgt.n	31364 <_http_client_request+0x5c8>
   31362:	e07c      	b.n	3145e <_http_client_request+0x6c2>
   31364:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   31366:	68db      	ldr	r3, [r3, #12]
   31368:	2b00      	cmp	r3, #0
   3136a:	d100      	bne.n	3136e <_http_client_request+0x5d2>
   3136c:	e077      	b.n	3145e <_http_client_request+0x6c2>
			if (module->req.sent_length >= module->req.content_length) {
   3136e:	69fb      	ldr	r3, [r7, #28]
   31370:	22d0      	movs	r2, #208	; 0xd0
   31372:	589a      	ldr	r2, [r3, r2]
   31374:	69fb      	ldr	r3, [r7, #28]
   31376:	21cc      	movs	r1, #204	; 0xcc
   31378:	585b      	ldr	r3, [r3, r1]
   3137a:	429a      	cmp	r2, r3
   3137c:	db1f      	blt.n	313be <_http_client_request+0x622>
				if (module->req.entity.close) {
   3137e:	69fb      	ldr	r3, [r7, #28]
   31380:	22c0      	movs	r2, #192	; 0xc0
   31382:	589b      	ldr	r3, [r3, r2]
   31384:	2b00      	cmp	r3, #0
   31386:	d007      	beq.n	31398 <_http_client_request+0x5fc>
					module->req.entity.close(module->req.entity.priv_data);
   31388:	69fb      	ldr	r3, [r7, #28]
   3138a:	22c0      	movs	r2, #192	; 0xc0
   3138c:	589b      	ldr	r3, [r3, r2]
   3138e:	69fa      	ldr	r2, [r7, #28]
   31390:	21c4      	movs	r1, #196	; 0xc4
   31392:	5852      	ldr	r2, [r2, r1]
   31394:	0010      	movs	r0, r2
   31396:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   31398:	69fb      	ldr	r3, [r7, #28]
   3139a:	2202      	movs	r2, #2
   3139c:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   3139e:	69fb      	ldr	r3, [r7, #28]
   313a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   313a2:	2b00      	cmp	r3, #0
   313a4:	d100      	bne.n	313a8 <_http_client_request+0x60c>
   313a6:	e084      	b.n	314b2 <_http_client_request+0x716>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   313a8:	69fb      	ldr	r3, [r7, #28]
   313aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   313ac:	220c      	movs	r2, #12
   313ae:	2118      	movs	r1, #24
   313b0:	468c      	mov	ip, r1
   313b2:	44bc      	add	ip, r7
   313b4:	4462      	add	r2, ip
   313b6:	69f8      	ldr	r0, [r7, #28]
   313b8:	2101      	movs	r1, #1
   313ba:	4798      	blx	r3
				break;
   313bc:	e079      	b.n	314b2 <_http_client_request+0x716>
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
   313be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   313c0:	68dc      	ldr	r4, [r3, #12]
   313c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   313c4:	6958      	ldr	r0, [r3, #20]
   313c6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   313c8:	69fb      	ldr	r3, [r7, #28]
   313ca:	6e5d      	ldr	r5, [r3, #100]	; 0x64
   313cc:	69fb      	ldr	r3, [r7, #28]
   313ce:	22d0      	movs	r2, #208	; 0xd0
   313d0:	589b      	ldr	r3, [r3, r2]
   313d2:	002a      	movs	r2, r5
   313d4:	47a0      	blx	r4
   313d6:	0003      	movs	r3, r0
   313d8:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   313da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   313dc:	2b00      	cmp	r3, #0
   313de:	da0d      	bge.n	313fc <_http_client_request+0x660>
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
   313e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   313e2:	2b00      	cmp	r3, #0
   313e4:	d102      	bne.n	313ec <_http_client_request+0x650>
   313e6:	234d      	movs	r3, #77	; 0x4d
   313e8:	425b      	negs	r3, r3
   313ea:	e001      	b.n	313f0 <_http_client_request+0x654>
   313ec:	2305      	movs	r3, #5
   313ee:	425b      	negs	r3, r3
   313f0:	69fa      	ldr	r2, [r7, #28]
   313f2:	0019      	movs	r1, r3
   313f4:	0010      	movs	r0, r2
   313f6:	4b2c      	ldr	r3, [pc, #176]	; (314a8 <_http_client_request+0x70c>)
   313f8:	4798      	blx	r3
			if (size < 0) {
   313fa:	e057      	b.n	314ac <_http_client_request+0x710>
				if (size > module->req.content_length - module->req.sent_length) {
   313fc:	69fb      	ldr	r3, [r7, #28]
   313fe:	22cc      	movs	r2, #204	; 0xcc
   31400:	589a      	ldr	r2, [r3, r2]
   31402:	69fb      	ldr	r3, [r7, #28]
   31404:	21d0      	movs	r1, #208	; 0xd0
   31406:	585b      	ldr	r3, [r3, r1]
   31408:	1ad2      	subs	r2, r2, r3
   3140a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3140c:	429a      	cmp	r2, r3
   3140e:	da07      	bge.n	31420 <_http_client_request+0x684>
					size = module->req.content_length - module->req.sent_length;
   31410:	69fb      	ldr	r3, [r7, #28]
   31412:	22cc      	movs	r2, #204	; 0xcc
   31414:	589a      	ldr	r2, [r3, r2]
   31416:	69fb      	ldr	r3, [r7, #28]
   31418:	21d0      	movs	r1, #208	; 0xd0
   3141a:	585b      	ldr	r3, [r3, r1]
   3141c:	1ad3      	subs	r3, r2, r3
   3141e:	677b      	str	r3, [r7, #116]	; 0x74
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
   31420:	69fb      	ldr	r3, [r7, #28]
   31422:	2000      	movs	r0, #0
   31424:	5618      	ldrsb	r0, [r3, r0]
   31426:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   31428:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3142a:	b29a      	uxth	r2, r3
   3142c:	2300      	movs	r3, #0
   3142e:	4c1d      	ldr	r4, [pc, #116]	; (314a4 <_http_client_request+0x708>)
   31430:	47a0      	blx	r4
   31432:	0003      	movs	r3, r0
   31434:	663b      	str	r3, [r7, #96]	; 0x60
   31436:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   31438:	2b00      	cmp	r3, #0
   3143a:	da07      	bge.n	3144c <_http_client_request+0x6b0>
					_http_client_clear_conn(module, -EIO);
   3143c:	2305      	movs	r3, #5
   3143e:	425a      	negs	r2, r3
   31440:	69fb      	ldr	r3, [r7, #28]
   31442:	0011      	movs	r1, r2
   31444:	0018      	movs	r0, r3
   31446:	4b18      	ldr	r3, [pc, #96]	; (314a8 <_http_client_request+0x70c>)
   31448:	4798      	blx	r3
					return;
   3144a:	e03b      	b.n	314c4 <_http_client_request+0x728>
				module->req.sent_length += size;
   3144c:	69fb      	ldr	r3, [r7, #28]
   3144e:	22d0      	movs	r2, #208	; 0xd0
   31450:	589a      	ldr	r2, [r3, r2]
   31452:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31454:	18d2      	adds	r2, r2, r3
   31456:	69fb      	ldr	r3, [r7, #28]
   31458:	21d0      	movs	r1, #208	; 0xd0
   3145a:	505a      	str	r2, [r3, r1]
			if (size < 0) {
   3145c:	e026      	b.n	314ac <_http_client_request+0x710>
			module->req.state = STATE_SOCK_CONNECTED;
   3145e:	69fb      	ldr	r3, [r7, #28]
   31460:	2202      	movs	r2, #2
   31462:	66da      	str	r2, [r3, #108]	; 0x6c
			if (module->cb) {
   31464:	69fb      	ldr	r3, [r7, #28]
   31466:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31468:	2b00      	cmp	r3, #0
   3146a:	d024      	beq.n	314b6 <_http_client_request+0x71a>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   3146c:	69fb      	ldr	r3, [r7, #28]
   3146e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31470:	220c      	movs	r2, #12
   31472:	2118      	movs	r1, #24
   31474:	468c      	mov	ip, r1
   31476:	44bc      	add	ip, r7
   31478:	4462      	add	r2, ip
   3147a:	69f8      	ldr	r0, [r7, #28]
   3147c:	2101      	movs	r1, #1
   3147e:	4798      	blx	r3
			break;
   31480:	e019      	b.n	314b6 <_http_client_request+0x71a>
   31482:	46c0      	nop			; (mov r8, r8)
   31484:	0003a72c 	.word	0x0003a72c
   31488:	00034341 	.word	0x00034341
   3148c:	0003a730 	.word	0x0003a730
   31490:	00031cfd 	.word	0x00031cfd
   31494:	0003443b 	.word	0x0003443b
   31498:	0003a6b8 	.word	0x0003a6b8
   3149c:	00031d39 	.word	0x00031d39
   314a0:	8000000f 	.word	0x8000000f
   314a4:	000252d9 	.word	0x000252d9
   314a8:	00030c49 	.word	0x00030c49
		break;
   314ac:	e004      	b.n	314b8 <_http_client_request+0x71c>
				break;
   314ae:	46c0      	nop			; (mov r8, r8)
   314b0:	e002      	b.n	314b8 <_http_client_request+0x71c>
				break;
   314b2:	46c0      	nop			; (mov r8, r8)
   314b4:	e000      	b.n	314b8 <_http_client_request+0x71c>
			break;
   314b6:	46c0      	nop			; (mov r8, r8)
   314b8:	69bb      	ldr	r3, [r7, #24]
   314ba:	469d      	mov	sp, r3
   314bc:	e004      	b.n	314c8 <_http_client_request+0x72c>
		return;
   314be:	46c0      	nop			; (mov r8, r8)
   314c0:	e000      	b.n	314c4 <_http_client_request+0x728>
		return;
   314c2:	46c0      	nop			; (mov r8, r8)
   314c4:	69bb      	ldr	r3, [r7, #24]
   314c6:	469d      	mov	sp, r3
	}
}
   314c8:	46bd      	mov	sp, r7
   314ca:	b01e      	add	sp, #120	; 0x78
   314cc:	bc04      	pop	{r2}
   314ce:	4690      	mov	r8, r2
   314d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   314d2:	46c0      	nop			; (mov r8, r8)

000314d4 <_http_client_recv_packet>:

void _http_client_recv_packet(struct http_client_module *const module)
{
   314d4:	b590      	push	{r4, r7, lr}
   314d6:	b083      	sub	sp, #12
   314d8:	af00      	add	r7, sp, #0
   314da:	6078      	str	r0, [r7, #4]
	if (module == NULL) {
   314dc:	687b      	ldr	r3, [r7, #4]
   314de:	2b00      	cmp	r3, #0
   314e0:	d021      	beq.n	31526 <_http_client_recv_packet+0x52>
		return;
	}
	
	if (module->recved_size >= module->config.recv_buffer_size) {
   314e2:	687b      	ldr	r3, [r7, #4]
   314e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   314e6:	687b      	ldr	r3, [r7, #4]
   314e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   314ea:	429a      	cmp	r2, r3
   314ec:	d307      	bcc.n	314fe <_http_client_recv_packet+0x2a>
		/* Has not enough memory. */
		_http_client_clear_conn(module, -EOVERFLOW);
   314ee:	238b      	movs	r3, #139	; 0x8b
   314f0:	425a      	negs	r2, r3
   314f2:	687b      	ldr	r3, [r7, #4]
   314f4:	0011      	movs	r1, r2
   314f6:	0018      	movs	r0, r3
   314f8:	4b0d      	ldr	r3, [pc, #52]	; (31530 <_http_client_recv_packet+0x5c>)
   314fa:	4798      	blx	r3
		return;
   314fc:	e014      	b.n	31528 <_http_client_recv_packet+0x54>
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
   314fe:	687b      	ldr	r3, [r7, #4]
   31500:	2000      	movs	r0, #0
   31502:	5618      	ldrsb	r0, [r3, r0]
		module->config.recv_buffer + module->recved_size,
   31504:	687b      	ldr	r3, [r7, #4]
   31506:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   31508:	687b      	ldr	r3, [r7, #4]
   3150a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   3150c:	18d1      	adds	r1, r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   3150e:	687b      	ldr	r3, [r7, #4]
   31510:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	recv(module->sock,
   31512:	b29a      	uxth	r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   31514:	687b      	ldr	r3, [r7, #4]
   31516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
	recv(module->sock,
   31518:	b29b      	uxth	r3, r3
   3151a:	1ad3      	subs	r3, r2, r3
   3151c:	b29a      	uxth	r2, r3
   3151e:	2300      	movs	r3, #0
   31520:	4c04      	ldr	r4, [pc, #16]	; (31534 <_http_client_recv_packet+0x60>)
   31522:	47a0      	blx	r4
   31524:	e000      	b.n	31528 <_http_client_recv_packet+0x54>
		return;
   31526:	46c0      	nop			; (mov r8, r8)
}
   31528:	46bd      	mov	sp, r7
   3152a:	b003      	add	sp, #12
   3152c:	bd90      	pop	{r4, r7, pc}
   3152e:	46c0      	nop			; (mov r8, r8)
   31530:	00030c49 	.word	0x00030c49
   31534:	0002543d 	.word	0x0002543d

00031538 <_http_client_recved_packet>:

void _http_client_recved_packet(struct http_client_module *const module, int read_len)
{
   31538:	b580      	push	{r7, lr}
   3153a:	b082      	sub	sp, #8
   3153c:	af00      	add	r7, sp, #0
   3153e:	6078      	str	r0, [r7, #4]
   31540:	6039      	str	r1, [r7, #0]
	module->recved_size += read_len;
   31542:	687b      	ldr	r3, [r7, #4]
   31544:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   31546:	683b      	ldr	r3, [r7, #0]
   31548:	18d2      	adds	r2, r2, r3
   3154a:	687b      	ldr	r3, [r7, #4]
   3154c:	645a      	str	r2, [r3, #68]	; 0x44
	if (module->config.timeout > 0) {
   3154e:	687b      	ldr	r3, [r7, #4]
   31550:	2258      	movs	r2, #88	; 0x58
   31552:	5a9b      	ldrh	r3, [r3, r2]
   31554:	2b00      	cmp	r3, #0
   31556:	d007      	beq.n	31568 <_http_client_recved_packet+0x30>
		sw_timer_disable_callback(module->config.timer_inst, module->timer_id);
   31558:	687b      	ldr	r3, [r7, #4]
   3155a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   3155c:	687b      	ldr	r3, [r7, #4]
   3155e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   31560:	0019      	movs	r1, r3
   31562:	0010      	movs	r0, r2
   31564:	4b06      	ldr	r3, [pc, #24]	; (31580 <_http_client_recved_packet+0x48>)
   31566:	4798      	blx	r3
	}

	/* Recursive function call can be occurred overflow. */
	while(_http_client_handle_response(module) != 0);
   31568:	46c0      	nop			; (mov r8, r8)
   3156a:	687b      	ldr	r3, [r7, #4]
   3156c:	0018      	movs	r0, r3
   3156e:	4b05      	ldr	r3, [pc, #20]	; (31584 <_http_client_recved_packet+0x4c>)
   31570:	4798      	blx	r3
   31572:	1e03      	subs	r3, r0, #0
   31574:	d1f9      	bne.n	3156a <_http_client_recved_packet+0x32>
}
   31576:	46c0      	nop			; (mov r8, r8)
   31578:	46bd      	mov	sp, r7
   3157a:	b002      	add	sp, #8
   3157c:	bd80      	pop	{r7, pc}
   3157e:	46c0      	nop			; (mov r8, r8)
   31580:	00031ff5 	.word	0x00031ff5
   31584:	00031589 	.word	0x00031589

00031588 <_http_client_handle_response>:

int _http_client_handle_response(struct http_client_module *const module)
{
   31588:	b580      	push	{r7, lr}
   3158a:	b082      	sub	sp, #8
   3158c:	af00      	add	r7, sp, #0
   3158e:	6078      	str	r0, [r7, #4]
	switch(module->resp.state) {
   31590:	687b      	ldr	r3, [r7, #4]
   31592:	22d8      	movs	r2, #216	; 0xd8
   31594:	589b      	ldr	r3, [r3, r2]
   31596:	2b00      	cmp	r3, #0
   31598:	d002      	beq.n	315a0 <_http_client_handle_response+0x18>
   3159a:	2b01      	cmp	r3, #1
   3159c:	d006      	beq.n	315ac <_http_client_handle_response+0x24>
   3159e:	e00b      	b.n	315b8 <_http_client_handle_response+0x30>
	case STATE_PARSE_HEADER:
		return _http_client_handle_header(module);
   315a0:	687b      	ldr	r3, [r7, #4]
   315a2:	0018      	movs	r0, r3
   315a4:	4b07      	ldr	r3, [pc, #28]	; (315c4 <_http_client_handle_response+0x3c>)
   315a6:	4798      	blx	r3
   315a8:	0003      	movs	r3, r0
   315aa:	e006      	b.n	315ba <_http_client_handle_response+0x32>
	case STATE_PARSE_ENTITY:
		return _http_client_handle_entity(module);
   315ac:	687b      	ldr	r3, [r7, #4]
   315ae:	0018      	movs	r0, r3
   315b0:	4b05      	ldr	r3, [pc, #20]	; (315c8 <_http_client_handle_response+0x40>)
   315b2:	4798      	blx	r3
   315b4:	0003      	movs	r3, r0
   315b6:	e000      	b.n	315ba <_http_client_handle_response+0x32>
	}
	return 0;
   315b8:	2300      	movs	r3, #0
}
   315ba:	0018      	movs	r0, r3
   315bc:	46bd      	mov	sp, r7
   315be:	b002      	add	sp, #8
   315c0:	bd80      	pop	{r7, pc}
   315c2:	46c0      	nop			; (mov r8, r8)
   315c4:	000315cd 	.word	0x000315cd
   315c8:	00031a85 	.word	0x00031a85

000315cc <_http_client_handle_header>:

int _http_client_handle_header(struct http_client_module *const module)
{
   315cc:	b590      	push	{r4, r7, lr}
   315ce:	b08b      	sub	sp, #44	; 0x2c
   315d0:	af00      	add	r7, sp, #0
   315d2:	6078      	str	r0, [r7, #4]
	/* New line character only used in this function. So variable registered in the code region. */
	static const char *new_line = "\r\n";

	//TODO : header filter

	for (ptr = module->config.recv_buffer ; ; ) {
   315d4:	687b      	ldr	r3, [r7, #4]
   315d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   315d8:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   315da:	4b9a      	ldr	r3, [pc, #616]	; (31844 <_http_client_handle_header+0x278>)
   315dc:	681a      	ldr	r2, [r3, #0]
   315de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   315e0:	0011      	movs	r1, r2
   315e2:	0018      	movs	r0, r3
   315e4:	4b98      	ldr	r3, [pc, #608]	; (31848 <_http_client_handle_header+0x27c>)
   315e6:	4798      	blx	r3
   315e8:	0003      	movs	r3, r0
   315ea:	61bb      	str	r3, [r7, #24]
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
   315ec:	69bb      	ldr	r3, [r7, #24]
   315ee:	2b00      	cmp	r3, #0
   315f0:	d007      	beq.n	31602 <_http_client_handle_header+0x36>
   315f2:	687b      	ldr	r3, [r7, #4]
   315f4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   315f6:	687b      	ldr	r3, [r7, #4]
   315f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   315fa:	18d2      	adds	r2, r2, r3
   315fc:	69bb      	ldr	r3, [r7, #24]
   315fe:	429a      	cmp	r2, r3
   31600:	d807      	bhi.n	31612 <_http_client_handle_header+0x46>
			/* not enough buffer. */
			_http_client_move_buffer(module, ptr);
   31602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   31604:	687b      	ldr	r3, [r7, #4]
   31606:	0011      	movs	r1, r2
   31608:	0018      	movs	r0, r3
   3160a:	4b90      	ldr	r3, [pc, #576]	; (3184c <_http_client_handle_header+0x280>)
   3160c:	4798      	blx	r3
			return 0;
   3160e:	2300      	movs	r3, #0
   31610:	e114      	b.n	3183c <_http_client_handle_header+0x270>
		}

		if (!strncmp(ptr, new_line, strlen(new_line))) {
   31612:	4b8c      	ldr	r3, [pc, #560]	; (31844 <_http_client_handle_header+0x278>)
   31614:	681c      	ldr	r4, [r3, #0]
   31616:	4b8b      	ldr	r3, [pc, #556]	; (31844 <_http_client_handle_header+0x278>)
   31618:	681b      	ldr	r3, [r3, #0]
   3161a:	0018      	movs	r0, r3
   3161c:	4b8c      	ldr	r3, [pc, #560]	; (31850 <_http_client_handle_header+0x284>)
   3161e:	4798      	blx	r3
   31620:	0002      	movs	r2, r0
   31622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31624:	0021      	movs	r1, r4
   31626:	0018      	movs	r0, r3
   31628:	4b8a      	ldr	r3, [pc, #552]	; (31854 <_http_client_handle_header+0x288>)
   3162a:	4798      	blx	r3
   3162c:	1e03      	subs	r3, r0, #0
   3162e:	d15d      	bne.n	316ec <_http_client_handle_header+0x120>
			/* Move remain data to forward part of buffer. */
			_http_client_move_buffer(module, ptr + strlen(new_line));
   31630:	4b84      	ldr	r3, [pc, #528]	; (31844 <_http_client_handle_header+0x278>)
   31632:	681b      	ldr	r3, [r3, #0]
   31634:	0018      	movs	r0, r3
   31636:	4b86      	ldr	r3, [pc, #536]	; (31850 <_http_client_handle_header+0x284>)
   31638:	4798      	blx	r3
   3163a:	0002      	movs	r2, r0
   3163c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3163e:	189a      	adds	r2, r3, r2
   31640:	687b      	ldr	r3, [r7, #4]
   31642:	0011      	movs	r1, r2
   31644:	0018      	movs	r0, r3
   31646:	4b81      	ldr	r3, [pc, #516]	; (3184c <_http_client_handle_header+0x280>)
   31648:	4798      	blx	r3

			/* Check validation first. */
			if (module->cb && module->resp.response_code) {
   3164a:	687b      	ldr	r3, [r7, #4]
   3164c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3164e:	2b00      	cmp	r3, #0
   31650:	d046      	beq.n	316e0 <_http_client_handle_header+0x114>
   31652:	687b      	ldr	r3, [r7, #4]
   31654:	22e4      	movs	r2, #228	; 0xe4
   31656:	5a9b      	ldrh	r3, [r3, r2]
   31658:	2b00      	cmp	r3, #0
   3165a:	d041      	beq.n	316e0 <_http_client_handle_header+0x114>
				/* Chunked transfer */
				if (module->resp.content_length < 0) {
   3165c:	687b      	ldr	r3, [r7, #4]
   3165e:	22dc      	movs	r2, #220	; 0xdc
   31660:	589b      	ldr	r3, [r3, r2]
   31662:	2b00      	cmp	r3, #0
   31664:	da19      	bge.n	3169a <_http_client_handle_header+0xce>
					data.recv_response.response_code = module->resp.response_code;
   31666:	687b      	ldr	r3, [r7, #4]
   31668:	22e4      	movs	r2, #228	; 0xe4
   3166a:	5a9a      	ldrh	r2, [r3, r2]
   3166c:	230c      	movs	r3, #12
   3166e:	18fb      	adds	r3, r7, r3
   31670:	801a      	strh	r2, [r3, #0]
					data.recv_response.is_chunked = 1;
   31672:	230c      	movs	r3, #12
   31674:	18fb      	adds	r3, r7, r3
   31676:	2201      	movs	r2, #1
   31678:	709a      	strb	r2, [r3, #2]
					module->resp.read_length = 0;
   3167a:	687b      	ldr	r3, [r7, #4]
   3167c:	22e0      	movs	r2, #224	; 0xe0
   3167e:	2100      	movs	r1, #0
   31680:	5099      	str	r1, [r3, r2]
					data.recv_response.content = NULL;
   31682:	230c      	movs	r3, #12
   31684:	18fb      	adds	r3, r7, r3
   31686:	2200      	movs	r2, #0
   31688:	609a      	str	r2, [r3, #8]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   3168a:	687b      	ldr	r3, [r7, #4]
   3168c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3168e:	220c      	movs	r2, #12
   31690:	18ba      	adds	r2, r7, r2
   31692:	6878      	ldr	r0, [r7, #4]
   31694:	2102      	movs	r1, #2
   31696:	4798      	blx	r3
   31698:	e022      	b.n	316e0 <_http_client_handle_header+0x114>
				} else if (module->resp.content_length > (int)module->config.recv_buffer_size) {
   3169a:	687b      	ldr	r3, [r7, #4]
   3169c:	22dc      	movs	r2, #220	; 0xdc
   3169e:	589a      	ldr	r2, [r3, r2]
   316a0:	687b      	ldr	r3, [r7, #4]
   316a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   316a4:	429a      	cmp	r2, r3
   316a6:	dd1b      	ble.n	316e0 <_http_client_handle_header+0x114>
					/* Entity is bigger than receive buffer. Sending the buffer to user like chunked transfer. */
					data.recv_response.response_code = module->resp.response_code;
   316a8:	687b      	ldr	r3, [r7, #4]
   316aa:	22e4      	movs	r2, #228	; 0xe4
   316ac:	5a9a      	ldrh	r2, [r3, r2]
   316ae:	230c      	movs	r3, #12
   316b0:	18fb      	adds	r3, r7, r3
   316b2:	801a      	strh	r2, [r3, #0]
					data.recv_response.content_length = module->resp.content_length;
   316b4:	687b      	ldr	r3, [r7, #4]
   316b6:	22dc      	movs	r2, #220	; 0xdc
   316b8:	589b      	ldr	r3, [r3, r2]
   316ba:	001a      	movs	r2, r3
   316bc:	230c      	movs	r3, #12
   316be:	18fb      	adds	r3, r7, r3
   316c0:	605a      	str	r2, [r3, #4]
					data.recv_response.content = NULL;
   316c2:	230c      	movs	r3, #12
   316c4:	18fb      	adds	r3, r7, r3
   316c6:	2200      	movs	r2, #0
   316c8:	609a      	str	r2, [r3, #8]
					module->resp.read_length = 0;
   316ca:	687b      	ldr	r3, [r7, #4]
   316cc:	22e0      	movs	r2, #224	; 0xe0
   316ce:	2100      	movs	r1, #0
   316d0:	5099      	str	r1, [r3, r2]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   316d2:	687b      	ldr	r3, [r7, #4]
   316d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   316d6:	220c      	movs	r2, #12
   316d8:	18ba      	adds	r2, r7, r2
   316da:	6878      	ldr	r0, [r7, #4]
   316dc:	2102      	movs	r1, #2
   316de:	4798      	blx	r3
				}
			}

			module->resp.state = STATE_PARSE_ENTITY;
   316e0:	687b      	ldr	r3, [r7, #4]
   316e2:	22d8      	movs	r2, #216	; 0xd8
   316e4:	2101      	movs	r1, #1
   316e6:	5099      	str	r1, [r3, r2]
			return 1;
   316e8:	2301      	movs	r3, #1
   316ea:	e0a7      	b.n	3183c <_http_client_handle_header+0x270>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
   316ec:	495a      	ldr	r1, [pc, #360]	; (31858 <_http_client_handle_header+0x28c>)
   316ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   316f0:	2210      	movs	r2, #16
   316f2:	0018      	movs	r0, r3
   316f4:	4b57      	ldr	r3, [pc, #348]	; (31854 <_http_client_handle_header+0x288>)
   316f6:	4798      	blx	r3
   316f8:	1e03      	subs	r3, r0, #0
   316fa:	d109      	bne.n	31710 <_http_client_handle_header+0x144>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
   316fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   316fe:	3310      	adds	r3, #16
   31700:	0018      	movs	r0, r3
   31702:	4b56      	ldr	r3, [pc, #344]	; (3185c <_http_client_handle_header+0x290>)
   31704:	4798      	blx	r3
   31706:	0001      	movs	r1, r0
   31708:	687b      	ldr	r3, [r7, #4]
   3170a:	22dc      	movs	r2, #220	; 0xdc
   3170c:	5099      	str	r1, [r3, r2]
   3170e:	e08b      	b.n	31828 <_http_client_handle_header+0x25c>
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
   31710:	4953      	ldr	r1, [pc, #332]	; (31860 <_http_client_handle_header+0x294>)
   31712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31714:	2213      	movs	r2, #19
   31716:	0018      	movs	r0, r3
   31718:	4b4e      	ldr	r3, [pc, #312]	; (31854 <_http_client_handle_header+0x288>)
   3171a:	4798      	blx	r3
   3171c:	1e03      	subs	r3, r0, #0
   3171e:	d127      	bne.n	31770 <_http_client_handle_header+0x1a4>
			/* Currently does not support gzip or deflate encoding. If received this header, disconnect session immediately*/
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
   31720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31722:	3313      	adds	r3, #19
   31724:	623b      	str	r3, [r7, #32]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   31726:	e01e      	b.n	31766 <_http_client_handle_header+0x19a>
				if (*type_ptr == ' ') {
   31728:	6a3b      	ldr	r3, [r7, #32]
   3172a:	781b      	ldrb	r3, [r3, #0]
   3172c:	2b20      	cmp	r3, #32
   3172e:	d103      	bne.n	31738 <_http_client_handle_header+0x16c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   31730:	6a3b      	ldr	r3, [r7, #32]
   31732:	3301      	adds	r3, #1
   31734:	623b      	str	r3, [r7, #32]
   31736:	e016      	b.n	31766 <_http_client_handle_header+0x19a>
					continue;
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
   31738:	6a3b      	ldr	r3, [r7, #32]
   3173a:	781b      	ldrb	r3, [r3, #0]
   3173c:	2b43      	cmp	r3, #67	; 0x43
   3173e:	d003      	beq.n	31748 <_http_client_handle_header+0x17c>
   31740:	6a3b      	ldr	r3, [r7, #32]
   31742:	781b      	ldrb	r3, [r3, #0]
   31744:	2b63      	cmp	r3, #99	; 0x63
   31746:	d105      	bne.n	31754 <_http_client_handle_header+0x188>
					/* Chunked transfer */
					module->req.content_length = -1;
   31748:	687b      	ldr	r3, [r7, #4]
   3174a:	21cc      	movs	r1, #204	; 0xcc
   3174c:	2201      	movs	r2, #1
   3174e:	4252      	negs	r2, r2
   31750:	505a      	str	r2, [r3, r1]
				} else {
					_http_client_clear_conn(module, -ENOTSUP);
					return 0;
				}
				break;
   31752:	e069      	b.n	31828 <_http_client_handle_header+0x25c>
					_http_client_clear_conn(module, -ENOTSUP);
   31754:	2386      	movs	r3, #134	; 0x86
   31756:	425a      	negs	r2, r3
   31758:	687b      	ldr	r3, [r7, #4]
   3175a:	0011      	movs	r1, r2
   3175c:	0018      	movs	r0, r3
   3175e:	4b41      	ldr	r3, [pc, #260]	; (31864 <_http_client_handle_header+0x298>)
   31760:	4798      	blx	r3
					return 0;
   31762:	2300      	movs	r3, #0
   31764:	e06a      	b.n	3183c <_http_client_handle_header+0x270>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   31766:	69ba      	ldr	r2, [r7, #24]
   31768:	6a3b      	ldr	r3, [r7, #32]
   3176a:	429a      	cmp	r2, r3
   3176c:	d8dc      	bhi.n	31728 <_http_client_handle_header+0x15c>
   3176e:	e05b      	b.n	31828 <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
   31770:	493d      	ldr	r1, [pc, #244]	; (31868 <_http_client_handle_header+0x29c>)
   31772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31774:	220c      	movs	r2, #12
   31776:	0018      	movs	r0, r3
   31778:	4b36      	ldr	r3, [pc, #216]	; (31854 <_http_client_handle_header+0x288>)
   3177a:	4798      	blx	r3
   3177c:	1e03      	subs	r3, r0, #0
   3177e:	d126      	bne.n	317ce <_http_client_handle_header+0x202>
			char *type_ptr = ptr + strlen("Connection: ");
   31780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31782:	330c      	adds	r3, #12
   31784:	61fb      	str	r3, [r7, #28]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   31786:	e01d      	b.n	317c4 <_http_client_handle_header+0x1f8>
				if (*type_ptr == ' ') {
   31788:	69fb      	ldr	r3, [r7, #28]
   3178a:	781b      	ldrb	r3, [r3, #0]
   3178c:	2b20      	cmp	r3, #32
   3178e:	d103      	bne.n	31798 <_http_client_handle_header+0x1cc>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   31790:	69fb      	ldr	r3, [r7, #28]
   31792:	3301      	adds	r3, #1
   31794:	61fb      	str	r3, [r7, #28]
   31796:	e015      	b.n	317c4 <_http_client_handle_header+0x1f8>
					continue;
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
   31798:	69fb      	ldr	r3, [r7, #28]
   3179a:	781b      	ldrb	r3, [r3, #0]
   3179c:	2b4b      	cmp	r3, #75	; 0x4b
   3179e:	d003      	beq.n	317a8 <_http_client_handle_header+0x1dc>
   317a0:	69fb      	ldr	r3, [r7, #28]
   317a2:	781b      	ldrb	r3, [r3, #0]
   317a4:	2b6b      	cmp	r3, #107	; 0x6b
   317a6:	d106      	bne.n	317b6 <_http_client_handle_header+0x1ea>
					module->permanent = 1;
   317a8:	687b      	ldr	r3, [r7, #4]
   317aa:	2241      	movs	r2, #65	; 0x41
   317ac:	5c99      	ldrb	r1, [r3, r2]
   317ae:	2002      	movs	r0, #2
   317b0:	4301      	orrs	r1, r0
   317b2:	5499      	strb	r1, [r3, r2]
				} else {
					module->permanent = 0;
				}
				break;
   317b4:	e038      	b.n	31828 <_http_client_handle_header+0x25c>
					module->permanent = 0;
   317b6:	687b      	ldr	r3, [r7, #4]
   317b8:	2241      	movs	r2, #65	; 0x41
   317ba:	5c99      	ldrb	r1, [r3, r2]
   317bc:	2002      	movs	r0, #2
   317be:	4381      	bics	r1, r0
   317c0:	5499      	strb	r1, [r3, r2]
				break;
   317c2:	e031      	b.n	31828 <_http_client_handle_header+0x25c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   317c4:	69ba      	ldr	r2, [r7, #24]
   317c6:	69fb      	ldr	r3, [r7, #28]
   317c8:	429a      	cmp	r2, r3
   317ca:	d8dd      	bhi.n	31788 <_http_client_handle_header+0x1bc>
   317cc:	e02c      	b.n	31828 <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "HTTP/", 5)) {
   317ce:	4927      	ldr	r1, [pc, #156]	; (3186c <_http_client_handle_header+0x2a0>)
   317d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   317d2:	2205      	movs	r2, #5
   317d4:	0018      	movs	r0, r3
   317d6:	4b1f      	ldr	r3, [pc, #124]	; (31854 <_http_client_handle_header+0x288>)
   317d8:	4798      	blx	r3
   317da:	1e03      	subs	r3, r0, #0
   317dc:	d124      	bne.n	31828 <_http_client_handle_header+0x25c>
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
   317de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   317e0:	3309      	adds	r3, #9
   317e2:	0018      	movs	r0, r3
   317e4:	4b1d      	ldr	r3, [pc, #116]	; (3185c <_http_client_handle_header+0x290>)
   317e6:	4798      	blx	r3
   317e8:	0003      	movs	r3, r0
   317ea:	b299      	uxth	r1, r3
   317ec:	687b      	ldr	r3, [r7, #4]
   317ee:	22e4      	movs	r2, #228	; 0xe4
   317f0:	5299      	strh	r1, [r3, r2]
			/* Initializing the variables */
			module->resp.content_length = 0;
   317f2:	687b      	ldr	r3, [r7, #4]
   317f4:	22dc      	movs	r2, #220	; 0xdc
   317f6:	2100      	movs	r1, #0
   317f8:	5099      	str	r1, [r3, r2]
			/* persistent connection is turn on in the HTTP 1.1 or above version of protocols. */  
			if (ptr [5] > '1' || ptr[7] > '0') {
   317fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   317fc:	3305      	adds	r3, #5
   317fe:	781b      	ldrb	r3, [r3, #0]
   31800:	2b31      	cmp	r3, #49	; 0x31
   31802:	d804      	bhi.n	3180e <_http_client_handle_header+0x242>
   31804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31806:	3307      	adds	r3, #7
   31808:	781b      	ldrb	r3, [r3, #0]
   3180a:	2b30      	cmp	r3, #48	; 0x30
   3180c:	d906      	bls.n	3181c <_http_client_handle_header+0x250>
				module->permanent = 1;
   3180e:	687b      	ldr	r3, [r7, #4]
   31810:	2241      	movs	r2, #65	; 0x41
   31812:	5c99      	ldrb	r1, [r3, r2]
   31814:	2002      	movs	r0, #2
   31816:	4301      	orrs	r1, r0
   31818:	5499      	strb	r1, [r3, r2]
   3181a:	e005      	b.n	31828 <_http_client_handle_header+0x25c>
			} else {
				module->permanent = 0;
   3181c:	687b      	ldr	r3, [r7, #4]
   3181e:	2241      	movs	r2, #65	; 0x41
   31820:	5c99      	ldrb	r1, [r3, r2]
   31822:	2002      	movs	r0, #2
   31824:	4381      	bics	r1, r0
   31826:	5499      	strb	r1, [r3, r2]
			}
		}

		ptr = ptr_line_end + strlen(new_line);
   31828:	4b06      	ldr	r3, [pc, #24]	; (31844 <_http_client_handle_header+0x278>)
   3182a:	681b      	ldr	r3, [r3, #0]
   3182c:	0018      	movs	r0, r3
   3182e:	4b08      	ldr	r3, [pc, #32]	; (31850 <_http_client_handle_header+0x284>)
   31830:	4798      	blx	r3
   31832:	0002      	movs	r2, r0
   31834:	69bb      	ldr	r3, [r7, #24]
   31836:	189b      	adds	r3, r3, r2
   31838:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   3183a:	e6ce      	b.n	315da <_http_client_handle_header+0xe>
	}
}
   3183c:	0018      	movs	r0, r3
   3183e:	46bd      	mov	sp, r7
   31840:	b00b      	add	sp, #44	; 0x2c
   31842:	bd90      	pop	{r4, r7, pc}
   31844:	200000e4 	.word	0x200000e4
   31848:	000344b9 	.word	0x000344b9
   3184c:	00031c31 	.word	0x00031c31
   31850:	0003443b 	.word	0x0003443b
   31854:	00034449 	.word	0x00034449
   31858:	0003a730 	.word	0x0003a730
   3185c:	00033fd1 	.word	0x00033fd1
   31860:	0003a754 	.word	0x0003a754
   31864:	00030c49 	.word	0x00030c49
   31868:	0003a768 	.word	0x0003a768
   3186c:	0003a778 	.word	0x0003a778

00031870 <_http_client_read_chuked_entity>:

static void _http_client_read_chuked_entity(struct http_client_module *const module)
{
   31870:	b580      	push	{r7, lr}
   31872:	b088      	sub	sp, #32
   31874:	af00      	add	r7, sp, #0
   31876:	6078      	str	r0, [r7, #4]
	/* In chunked mode, read_length variable is means to remain data in the chunk. */
	union http_client_data data;
	int length = (int)module->recved_size;
   31878:	687b      	ldr	r3, [r7, #4]
   3187a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   3187c:	61fb      	str	r3, [r7, #28]
	int extension = 0;
   3187e:	2300      	movs	r3, #0
   31880:	61bb      	str	r3, [r7, #24]
	char *buffer= module->config.recv_buffer;
   31882:	687b      	ldr	r3, [r7, #4]
   31884:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   31886:	617b      	str	r3, [r7, #20]

	do {
		if (module->resp.read_length >= 0) {
   31888:	687b      	ldr	r3, [r7, #4]
   3188a:	22e0      	movs	r2, #224	; 0xe0
   3188c:	589b      	ldr	r3, [r3, r2]
   3188e:	2b00      	cmp	r3, #0
   31890:	db71      	blt.n	31976 <_http_client_read_chuked_entity+0x106>
			if (module->resp.read_length == 0) {
   31892:	687b      	ldr	r3, [r7, #4]
   31894:	22e0      	movs	r2, #224	; 0xe0
   31896:	589b      	ldr	r3, [r3, r2]
   31898:	2b00      	cmp	r3, #0
   3189a:	d134      	bne.n	31906 <_http_client_read_chuked_entity+0x96>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   3189c:	687b      	ldr	r3, [r7, #4]
   3189e:	22d8      	movs	r2, #216	; 0xd8
   318a0:	2100      	movs	r1, #0
   318a2:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   318a4:	687b      	ldr	r3, [r7, #4]
   318a6:	22e4      	movs	r2, #228	; 0xe4
   318a8:	2100      	movs	r1, #0
   318aa:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   318ac:	2308      	movs	r3, #8
   318ae:	18fb      	adds	r3, r7, r3
   318b0:	2201      	movs	r2, #1
   318b2:	721a      	strb	r2, [r3, #8]
				data.recv_chunked_data.length = 0;
   318b4:	2308      	movs	r3, #8
   318b6:	18fb      	adds	r3, r7, r3
   318b8:	2200      	movs	r2, #0
   318ba:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = NULL;
   318bc:	2308      	movs	r3, #8
   318be:	18fb      	adds	r3, r7, r3
   318c0:	2200      	movs	r2, #0
   318c2:	605a      	str	r2, [r3, #4]
				if (module->cb) {
   318c4:	687b      	ldr	r3, [r7, #4]
   318c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   318c8:	2b00      	cmp	r3, #0
   318ca:	d006      	beq.n	318da <_http_client_read_chuked_entity+0x6a>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   318cc:	687b      	ldr	r3, [r7, #4]
   318ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   318d0:	2208      	movs	r2, #8
   318d2:	18ba      	adds	r2, r7, r2
   318d4:	6878      	ldr	r0, [r7, #4]
   318d6:	2103      	movs	r1, #3
   318d8:	4798      	blx	r3
				}
				if (module->permanent == 0) {
   318da:	687b      	ldr	r3, [r7, #4]
   318dc:	2241      	movs	r2, #65	; 0x41
   318de:	5c9b      	ldrb	r3, [r3, r2]
   318e0:	2202      	movs	r2, #2
   318e2:	4013      	ands	r3, r2
   318e4:	b2db      	uxtb	r3, r3
   318e6:	2b00      	cmp	r3, #0
   318e8:	d105      	bne.n	318f6 <_http_client_read_chuked_entity+0x86>
					/* This server was not supported keep alive. */
					_http_client_clear_conn(module, 0);
   318ea:	687b      	ldr	r3, [r7, #4]
   318ec:	2100      	movs	r1, #0
   318ee:	0018      	movs	r0, r3
   318f0:	4b62      	ldr	r3, [pc, #392]	; (31a7c <_http_client_read_chuked_entity+0x20c>)
   318f2:	4798      	blx	r3
					return;
   318f4:	e0bf      	b.n	31a76 <_http_client_read_chuked_entity+0x206>
				}
				_http_client_move_buffer(module, buffer + 2);
   318f6:	697b      	ldr	r3, [r7, #20]
   318f8:	1c9a      	adds	r2, r3, #2
   318fa:	687b      	ldr	r3, [r7, #4]
   318fc:	0011      	movs	r1, r2
   318fe:	0018      	movs	r0, r3
   31900:	4b5f      	ldr	r3, [pc, #380]	; (31a80 <_http_client_read_chuked_entity+0x210>)
   31902:	4798      	blx	r3
   31904:	e0b2      	b.n	31a6c <_http_client_read_chuked_entity+0x1fc>
			} else if (module->resp.read_length <= length) {
   31906:	687b      	ldr	r3, [r7, #4]
   31908:	22e0      	movs	r2, #224	; 0xe0
   3190a:	589a      	ldr	r2, [r3, r2]
   3190c:	69fb      	ldr	r3, [r7, #28]
   3190e:	429a      	cmp	r2, r3
   31910:	dd00      	ble.n	31914 <_http_client_read_chuked_entity+0xa4>
   31912:	e0ab      	b.n	31a6c <_http_client_read_chuked_entity+0x1fc>
				data.recv_chunked_data.length = module->resp.read_length;
   31914:	687b      	ldr	r3, [r7, #4]
   31916:	22e0      	movs	r2, #224	; 0xe0
   31918:	589b      	ldr	r3, [r3, r2]
   3191a:	001a      	movs	r2, r3
   3191c:	2308      	movs	r3, #8
   3191e:	18fb      	adds	r3, r7, r3
   31920:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = buffer;
   31922:	2308      	movs	r3, #8
   31924:	18fb      	adds	r3, r7, r3
   31926:	697a      	ldr	r2, [r7, #20]
   31928:	605a      	str	r2, [r3, #4]
				data.recv_chunked_data.is_complete = 0;
   3192a:	2308      	movs	r3, #8
   3192c:	18fb      	adds	r3, r7, r3
   3192e:	2200      	movs	r2, #0
   31930:	721a      	strb	r2, [r3, #8]

				if (module->cb) {
   31932:	687b      	ldr	r3, [r7, #4]
   31934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31936:	2b00      	cmp	r3, #0
   31938:	d006      	beq.n	31948 <_http_client_read_chuked_entity+0xd8>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   3193a:	687b      	ldr	r3, [r7, #4]
   3193c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3193e:	2208      	movs	r2, #8
   31940:	18ba      	adds	r2, r7, r2
   31942:	6878      	ldr	r0, [r7, #4]
   31944:	2103      	movs	r1, #3
   31946:	4798      	blx	r3
				}
				/* Last two character in the chunk is '\r\n'. */
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
   31948:	687b      	ldr	r3, [r7, #4]
   3194a:	22e0      	movs	r2, #224	; 0xe0
   3194c:	589b      	ldr	r3, [r3, r2]
   3194e:	3302      	adds	r3, #2
   31950:	697a      	ldr	r2, [r7, #20]
   31952:	18d2      	adds	r2, r2, r3
   31954:	687b      	ldr	r3, [r7, #4]
   31956:	0011      	movs	r1, r2
   31958:	0018      	movs	r0, r3
   3195a:	4b49      	ldr	r3, [pc, #292]	; (31a80 <_http_client_read_chuked_entity+0x210>)
   3195c:	4798      	blx	r3
				length = (int)module->recved_size;
   3195e:	687b      	ldr	r3, [r7, #4]
   31960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   31962:	61fb      	str	r3, [r7, #28]
				buffer = module->config.recv_buffer;
   31964:	687b      	ldr	r3, [r7, #4]
   31966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   31968:	617b      	str	r3, [r7, #20]
				module->resp.read_length = -1;
   3196a:	687b      	ldr	r3, [r7, #4]
   3196c:	21e0      	movs	r1, #224	; 0xe0
   3196e:	2201      	movs	r2, #1
   31970:	4252      	negs	r2, r2
   31972:	505a      	str	r2, [r3, r1]
   31974:	e07a      	b.n	31a6c <_http_client_read_chuked_entity+0x1fc>
			}
		} else {
			/* Read chunked length. */
			module->resp.read_length = 0;
   31976:	687b      	ldr	r3, [r7, #4]
   31978:	22e0      	movs	r2, #224	; 0xe0
   3197a:	2100      	movs	r1, #0
   3197c:	5099      	str	r1, [r3, r2]
			for (; length > 0; buffer++, length--) {
   3197e:	e05a      	b.n	31a36 <_http_client_read_chuked_entity+0x1c6>
				if (*buffer == '\n') {
   31980:	697b      	ldr	r3, [r7, #20]
   31982:	781b      	ldrb	r3, [r3, #0]
   31984:	2b0a      	cmp	r3, #10
   31986:	d106      	bne.n	31996 <_http_client_read_chuked_entity+0x126>
					buffer++;
   31988:	697b      	ldr	r3, [r7, #20]
   3198a:	3301      	adds	r3, #1
   3198c:	617b      	str	r3, [r7, #20]
					length--;
   3198e:	69fb      	ldr	r3, [r7, #28]
   31990:	3b01      	subs	r3, #1
   31992:	61fb      	str	r3, [r7, #28]
					break;
   31994:	e052      	b.n	31a3c <_http_client_read_chuked_entity+0x1cc>
				}
				if (extension != 0) {
   31996:	69bb      	ldr	r3, [r7, #24]
   31998:	2b00      	cmp	r3, #0
   3199a:	d145      	bne.n	31a28 <_http_client_read_chuked_entity+0x1b8>
					continue;
				}
				if (*buffer >= '0' && *buffer <= '9') {
   3199c:	697b      	ldr	r3, [r7, #20]
   3199e:	781b      	ldrb	r3, [r3, #0]
   319a0:	2b2f      	cmp	r3, #47	; 0x2f
   319a2:	d910      	bls.n	319c6 <_http_client_read_chuked_entity+0x156>
   319a4:	697b      	ldr	r3, [r7, #20]
   319a6:	781b      	ldrb	r3, [r3, #0]
   319a8:	2b39      	cmp	r3, #57	; 0x39
   319aa:	d80c      	bhi.n	319c6 <_http_client_read_chuked_entity+0x156>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - '0';
   319ac:	687b      	ldr	r3, [r7, #4]
   319ae:	22e0      	movs	r2, #224	; 0xe0
   319b0:	589b      	ldr	r3, [r3, r2]
   319b2:	011b      	lsls	r3, r3, #4
   319b4:	697a      	ldr	r2, [r7, #20]
   319b6:	7812      	ldrb	r2, [r2, #0]
   319b8:	189b      	adds	r3, r3, r2
   319ba:	3b30      	subs	r3, #48	; 0x30
   319bc:	001a      	movs	r2, r3
   319be:	687b      	ldr	r3, [r7, #4]
   319c0:	21e0      	movs	r1, #224	; 0xe0
   319c2:	505a      	str	r2, [r3, r1]
   319c4:	e031      	b.n	31a2a <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'a' && *buffer <= 'f') {
   319c6:	697b      	ldr	r3, [r7, #20]
   319c8:	781b      	ldrb	r3, [r3, #0]
   319ca:	2b60      	cmp	r3, #96	; 0x60
   319cc:	d910      	bls.n	319f0 <_http_client_read_chuked_entity+0x180>
   319ce:	697b      	ldr	r3, [r7, #20]
   319d0:	781b      	ldrb	r3, [r3, #0]
   319d2:	2b66      	cmp	r3, #102	; 0x66
   319d4:	d80c      	bhi.n	319f0 <_http_client_read_chuked_entity+0x180>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
   319d6:	687b      	ldr	r3, [r7, #4]
   319d8:	22e0      	movs	r2, #224	; 0xe0
   319da:	589b      	ldr	r3, [r3, r2]
   319dc:	011b      	lsls	r3, r3, #4
   319de:	697a      	ldr	r2, [r7, #20]
   319e0:	7812      	ldrb	r2, [r2, #0]
   319e2:	189b      	adds	r3, r3, r2
   319e4:	3b61      	subs	r3, #97	; 0x61
   319e6:	001a      	movs	r2, r3
   319e8:	687b      	ldr	r3, [r7, #4]
   319ea:	21e0      	movs	r1, #224	; 0xe0
   319ec:	505a      	str	r2, [r3, r1]
   319ee:	e01c      	b.n	31a2a <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'A' && *buffer <= 'F') {
   319f0:	697b      	ldr	r3, [r7, #20]
   319f2:	781b      	ldrb	r3, [r3, #0]
   319f4:	2b40      	cmp	r3, #64	; 0x40
   319f6:	d910      	bls.n	31a1a <_http_client_read_chuked_entity+0x1aa>
   319f8:	697b      	ldr	r3, [r7, #20]
   319fa:	781b      	ldrb	r3, [r3, #0]
   319fc:	2b46      	cmp	r3, #70	; 0x46
   319fe:	d80c      	bhi.n	31a1a <_http_client_read_chuked_entity+0x1aa>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'A';
   31a00:	687b      	ldr	r3, [r7, #4]
   31a02:	22e0      	movs	r2, #224	; 0xe0
   31a04:	589b      	ldr	r3, [r3, r2]
   31a06:	011b      	lsls	r3, r3, #4
   31a08:	697a      	ldr	r2, [r7, #20]
   31a0a:	7812      	ldrb	r2, [r2, #0]
   31a0c:	189b      	adds	r3, r3, r2
   31a0e:	3b41      	subs	r3, #65	; 0x41
   31a10:	001a      	movs	r2, r3
   31a12:	687b      	ldr	r3, [r7, #4]
   31a14:	21e0      	movs	r1, #224	; 0xe0
   31a16:	505a      	str	r2, [r3, r1]
   31a18:	e007      	b.n	31a2a <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer == ';') {
   31a1a:	697b      	ldr	r3, [r7, #20]
   31a1c:	781b      	ldrb	r3, [r3, #0]
   31a1e:	2b3b      	cmp	r3, #59	; 0x3b
   31a20:	d103      	bne.n	31a2a <_http_client_read_chuked_entity+0x1ba>
					extension = 1;
   31a22:	2301      	movs	r3, #1
   31a24:	61bb      	str	r3, [r7, #24]
   31a26:	e000      	b.n	31a2a <_http_client_read_chuked_entity+0x1ba>
					continue;
   31a28:	46c0      	nop			; (mov r8, r8)
			for (; length > 0; buffer++, length--) {
   31a2a:	697b      	ldr	r3, [r7, #20]
   31a2c:	3301      	adds	r3, #1
   31a2e:	617b      	str	r3, [r7, #20]
   31a30:	69fb      	ldr	r3, [r7, #28]
   31a32:	3b01      	subs	r3, #1
   31a34:	61fb      	str	r3, [r7, #28]
   31a36:	69fb      	ldr	r3, [r7, #28]
   31a38:	2b00      	cmp	r3, #0
   31a3a:	dca1      	bgt.n	31980 <_http_client_read_chuked_entity+0x110>
				}
			}

			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
   31a3c:	687b      	ldr	r3, [r7, #4]
   31a3e:	22e0      	movs	r2, #224	; 0xe0
   31a40:	589a      	ldr	r2, [r3, r2]
   31a42:	687b      	ldr	r3, [r7, #4]
   31a44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   31a46:	429a      	cmp	r2, r3
   31a48:	dd07      	ble.n	31a5a <_http_client_read_chuked_entity+0x1ea>
				/* Chunked size is too big. */
				/* Through exception. */
				_http_client_clear_conn(module, -EOVERFLOW);
   31a4a:	238b      	movs	r3, #139	; 0x8b
   31a4c:	425a      	negs	r2, r3
   31a4e:	687b      	ldr	r3, [r7, #4]
   31a50:	0011      	movs	r1, r2
   31a52:	0018      	movs	r0, r3
   31a54:	4b09      	ldr	r3, [pc, #36]	; (31a7c <_http_client_read_chuked_entity+0x20c>)
   31a56:	4798      	blx	r3
				return;
   31a58:	e00d      	b.n	31a76 <_http_client_read_chuked_entity+0x206>
			}

			if (length  == 0) {
   31a5a:	69fb      	ldr	r3, [r7, #28]
   31a5c:	2b00      	cmp	r3, #0
   31a5e:	d105      	bne.n	31a6c <_http_client_read_chuked_entity+0x1fc>
				/* currently not received packet yet. */
				module->resp.read_length = -1;
   31a60:	687b      	ldr	r3, [r7, #4]
   31a62:	21e0      	movs	r1, #224	; 0xe0
   31a64:	2201      	movs	r2, #1
   31a66:	4252      	negs	r2, r2
   31a68:	505a      	str	r2, [r3, r1]
				return;
   31a6a:	e004      	b.n	31a76 <_http_client_read_chuked_entity+0x206>
			}
		}
	} while(module->recved_size > 0);
   31a6c:	687b      	ldr	r3, [r7, #4]
   31a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   31a70:	2b00      	cmp	r3, #0
   31a72:	d000      	beq.n	31a76 <_http_client_read_chuked_entity+0x206>
   31a74:	e708      	b.n	31888 <_http_client_read_chuked_entity+0x18>
}
   31a76:	46bd      	mov	sp, r7
   31a78:	b008      	add	sp, #32
   31a7a:	bd80      	pop	{r7, pc}
   31a7c:	00030c49 	.word	0x00030c49
   31a80:	00031c31 	.word	0x00031c31

00031a84 <_http_client_handle_entity>:

int _http_client_handle_entity(struct http_client_module *const module)
{
   31a84:	b580      	push	{r7, lr}
   31a86:	b086      	sub	sp, #24
   31a88:	af00      	add	r7, sp, #0
   31a8a:	6078      	str	r0, [r7, #4]
	union http_client_data data;
	char *buffer = module->config.recv_buffer;
   31a8c:	687b      	ldr	r3, [r7, #4]
   31a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   31a90:	617b      	str	r3, [r7, #20]

	/* If data size is lesser than buffer size, read all buffer and retransmission it to application. */
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
   31a92:	687b      	ldr	r3, [r7, #4]
   31a94:	22dc      	movs	r2, #220	; 0xdc
   31a96:	589b      	ldr	r3, [r3, r2]
   31a98:	2b00      	cmp	r3, #0
   31a9a:	db58      	blt.n	31b4e <_http_client_handle_entity+0xca>
   31a9c:	687b      	ldr	r3, [r7, #4]
   31a9e:	22dc      	movs	r2, #220	; 0xdc
   31aa0:	589a      	ldr	r2, [r3, r2]
   31aa2:	687b      	ldr	r3, [r7, #4]
   31aa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   31aa6:	429a      	cmp	r2, r3
   31aa8:	dc51      	bgt.n	31b4e <_http_client_handle_entity+0xca>
		if ((int)module->recved_size >= module->resp.content_length) {
   31aaa:	687b      	ldr	r3, [r7, #4]
   31aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   31aae:	0019      	movs	r1, r3
   31ab0:	687b      	ldr	r3, [r7, #4]
   31ab2:	22dc      	movs	r2, #220	; 0xdc
   31ab4:	589b      	ldr	r3, [r3, r2]
   31ab6:	4299      	cmp	r1, r3
   31ab8:	da00      	bge.n	31abc <_http_client_handle_entity+0x38>
   31aba:	e0a9      	b.n	31c10 <_http_client_handle_entity+0x18c>
			if (module->cb && module->resp.response_code) {
   31abc:	687b      	ldr	r3, [r7, #4]
   31abe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31ac0:	2b00      	cmp	r3, #0
   31ac2:	d020      	beq.n	31b06 <_http_client_handle_entity+0x82>
   31ac4:	687b      	ldr	r3, [r7, #4]
   31ac6:	22e4      	movs	r2, #228	; 0xe4
   31ac8:	5a9b      	ldrh	r3, [r3, r2]
   31aca:	2b00      	cmp	r3, #0
   31acc:	d01b      	beq.n	31b06 <_http_client_handle_entity+0x82>
				data.recv_response.response_code = module->resp.response_code;
   31ace:	687b      	ldr	r3, [r7, #4]
   31ad0:	22e4      	movs	r2, #228	; 0xe4
   31ad2:	5a9a      	ldrh	r2, [r3, r2]
   31ad4:	2308      	movs	r3, #8
   31ad6:	18fb      	adds	r3, r7, r3
   31ad8:	801a      	strh	r2, [r3, #0]
				data.recv_response.is_chunked = 0;
   31ada:	2308      	movs	r3, #8
   31adc:	18fb      	adds	r3, r7, r3
   31ade:	2200      	movs	r2, #0
   31ae0:	709a      	strb	r2, [r3, #2]
				data.recv_response.content_length = module->resp.content_length;
   31ae2:	687b      	ldr	r3, [r7, #4]
   31ae4:	22dc      	movs	r2, #220	; 0xdc
   31ae6:	589b      	ldr	r3, [r3, r2]
   31ae8:	001a      	movs	r2, r3
   31aea:	2308      	movs	r3, #8
   31aec:	18fb      	adds	r3, r7, r3
   31aee:	605a      	str	r2, [r3, #4]
				data.recv_response.content = buffer;
   31af0:	2308      	movs	r3, #8
   31af2:	18fb      	adds	r3, r7, r3
   31af4:	697a      	ldr	r2, [r7, #20]
   31af6:	609a      	str	r2, [r3, #8]
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   31af8:	687b      	ldr	r3, [r7, #4]
   31afa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31afc:	2208      	movs	r2, #8
   31afe:	18ba      	adds	r2, r7, r2
   31b00:	6878      	ldr	r0, [r7, #4]
   31b02:	2102      	movs	r1, #2
   31b04:	4798      	blx	r3
			}
			module->resp.state = STATE_PARSE_HEADER;
   31b06:	687b      	ldr	r3, [r7, #4]
   31b08:	22d8      	movs	r2, #216	; 0xd8
   31b0a:	2100      	movs	r1, #0
   31b0c:	5099      	str	r1, [r3, r2]
			module->resp.response_code = 0;
   31b0e:	687b      	ldr	r3, [r7, #4]
   31b10:	22e4      	movs	r2, #228	; 0xe4
   31b12:	2100      	movs	r1, #0
   31b14:	5299      	strh	r1, [r3, r2]
			
			if (module->permanent == 0) {
   31b16:	687b      	ldr	r3, [r7, #4]
   31b18:	2241      	movs	r2, #65	; 0x41
   31b1a:	5c9b      	ldrb	r3, [r3, r2]
   31b1c:	2202      	movs	r2, #2
   31b1e:	4013      	ands	r3, r2
   31b20:	b2db      	uxtb	r3, r3
   31b22:	2b00      	cmp	r3, #0
   31b24:	d105      	bne.n	31b32 <_http_client_handle_entity+0xae>
				/* This server was not supported keep alive. */
				_http_client_clear_conn(module, 0);
   31b26:	687b      	ldr	r3, [r7, #4]
   31b28:	2100      	movs	r1, #0
   31b2a:	0018      	movs	r0, r3
   31b2c:	4b3b      	ldr	r3, [pc, #236]	; (31c1c <_http_client_handle_entity+0x198>)
   31b2e:	4798      	blx	r3
		if ((int)module->recved_size >= module->resp.content_length) {
   31b30:	e06e      	b.n	31c10 <_http_client_handle_entity+0x18c>
			} else {
				_http_client_move_buffer(module, buffer + module->resp.content_length);
   31b32:	687b      	ldr	r3, [r7, #4]
   31b34:	22dc      	movs	r2, #220	; 0xdc
   31b36:	589b      	ldr	r3, [r3, r2]
   31b38:	001a      	movs	r2, r3
   31b3a:	697b      	ldr	r3, [r7, #20]
   31b3c:	189a      	adds	r2, r3, r2
   31b3e:	687b      	ldr	r3, [r7, #4]
   31b40:	0011      	movs	r1, r2
   31b42:	0018      	movs	r0, r3
   31b44:	4b36      	ldr	r3, [pc, #216]	; (31c20 <_http_client_handle_entity+0x19c>)
   31b46:	4798      	blx	r3
				return module->recved_size;
   31b48:	687b      	ldr	r3, [r7, #4]
   31b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   31b4c:	e061      	b.n	31c12 <_http_client_handle_entity+0x18e>
			}
		}
		/* else, buffer was not received enough size yet. */
	} else {
		if (module->resp.content_length >= 0) {
   31b4e:	687b      	ldr	r3, [r7, #4]
   31b50:	22dc      	movs	r2, #220	; 0xdc
   31b52:	589b      	ldr	r3, [r3, r2]
   31b54:	2b00      	cmp	r3, #0
   31b56:	db57      	blt.n	31c08 <_http_client_handle_entity+0x184>
			data.recv_chunked_data.length = module->recved_size;
   31b58:	687b      	ldr	r3, [r7, #4]
   31b5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   31b5c:	2308      	movs	r3, #8
   31b5e:	18fb      	adds	r3, r7, r3
   31b60:	601a      	str	r2, [r3, #0]
			data.recv_chunked_data.data = buffer;
   31b62:	2308      	movs	r3, #8
   31b64:	18fb      	adds	r3, r7, r3
   31b66:	697a      	ldr	r2, [r7, #20]
   31b68:	605a      	str	r2, [r3, #4]
			module->resp.read_length += (int)module->recved_size;
   31b6a:	687b      	ldr	r3, [r7, #4]
   31b6c:	22e0      	movs	r2, #224	; 0xe0
   31b6e:	589a      	ldr	r2, [r3, r2]
   31b70:	687b      	ldr	r3, [r7, #4]
   31b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   31b74:	18d2      	adds	r2, r2, r3
   31b76:	687b      	ldr	r3, [r7, #4]
   31b78:	21e0      	movs	r1, #224	; 0xe0
   31b7a:	505a      	str	r2, [r3, r1]
			if (module->resp.content_length <= module->resp.read_length) {
   31b7c:	687b      	ldr	r3, [r7, #4]
   31b7e:	22dc      	movs	r2, #220	; 0xdc
   31b80:	589a      	ldr	r2, [r3, r2]
   31b82:	687b      	ldr	r3, [r7, #4]
   31b84:	21e0      	movs	r1, #224	; 0xe0
   31b86:	585b      	ldr	r3, [r3, r1]
   31b88:	429a      	cmp	r2, r3
   31b8a:	dc0c      	bgt.n	31ba6 <_http_client_handle_entity+0x122>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   31b8c:	687b      	ldr	r3, [r7, #4]
   31b8e:	22d8      	movs	r2, #216	; 0xd8
   31b90:	2100      	movs	r1, #0
   31b92:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   31b94:	687b      	ldr	r3, [r7, #4]
   31b96:	22e4      	movs	r2, #228	; 0xe4
   31b98:	2100      	movs	r1, #0
   31b9a:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   31b9c:	2308      	movs	r3, #8
   31b9e:	18fb      	adds	r3, r7, r3
   31ba0:	2201      	movs	r2, #1
   31ba2:	721a      	strb	r2, [r3, #8]
   31ba4:	e003      	b.n	31bae <_http_client_handle_entity+0x12a>
			} else {
				data.recv_chunked_data.is_complete = 0;
   31ba6:	2308      	movs	r3, #8
   31ba8:	18fb      	adds	r3, r7, r3
   31baa:	2200      	movs	r2, #0
   31bac:	721a      	strb	r2, [r3, #8]
			}

			if (module->cb) {
   31bae:	687b      	ldr	r3, [r7, #4]
   31bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31bb2:	2b00      	cmp	r3, #0
   31bb4:	d006      	beq.n	31bc4 <_http_client_handle_entity+0x140>
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   31bb6:	687b      	ldr	r3, [r7, #4]
   31bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31bba:	2208      	movs	r2, #8
   31bbc:	18ba      	adds	r2, r7, r2
   31bbe:	6878      	ldr	r0, [r7, #4]
   31bc0:	2103      	movs	r1, #3
   31bc2:	4798      	blx	r3
			}
			
			if (data.recv_chunked_data.is_complete == 1) {
   31bc4:	2308      	movs	r3, #8
   31bc6:	18fb      	adds	r3, r7, r3
   31bc8:	7a1b      	ldrb	r3, [r3, #8]
   31bca:	2b01      	cmp	r3, #1
   31bcc:	d112      	bne.n	31bf4 <_http_client_handle_entity+0x170>
				if (module->permanent == 0) {
   31bce:	687b      	ldr	r3, [r7, #4]
   31bd0:	2241      	movs	r2, #65	; 0x41
   31bd2:	5c9b      	ldrb	r3, [r3, r2]
   31bd4:	2202      	movs	r2, #2
   31bd6:	4013      	ands	r3, r2
   31bd8:	b2db      	uxtb	r3, r3
   31bda:	2b00      	cmp	r3, #0
   31bdc:	d10a      	bne.n	31bf4 <_http_client_handle_entity+0x170>
					/* This server was not supported keep alive. */
					printf("1\r\n");
   31bde:	4b11      	ldr	r3, [pc, #68]	; (31c24 <_http_client_handle_entity+0x1a0>)
   31be0:	0018      	movs	r0, r3
   31be2:	4b11      	ldr	r3, [pc, #68]	; (31c28 <_http_client_handle_entity+0x1a4>)
   31be4:	4798      	blx	r3
					_http_client_clear_conn(module, 0);
   31be6:	687b      	ldr	r3, [r7, #4]
   31be8:	2100      	movs	r1, #0
   31bea:	0018      	movs	r0, r3
   31bec:	4b0b      	ldr	r3, [pc, #44]	; (31c1c <_http_client_handle_entity+0x198>)
   31bee:	4798      	blx	r3
					return 0;
   31bf0:	2300      	movs	r3, #0
   31bf2:	e00e      	b.n	31c12 <_http_client_handle_entity+0x18e>
				}
			}
			_http_client_move_buffer(module, buffer + module->recved_size);
   31bf4:	687b      	ldr	r3, [r7, #4]
   31bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   31bf8:	697a      	ldr	r2, [r7, #20]
   31bfa:	18d2      	adds	r2, r2, r3
   31bfc:	687b      	ldr	r3, [r7, #4]
   31bfe:	0011      	movs	r1, r2
   31c00:	0018      	movs	r0, r3
   31c02:	4b07      	ldr	r3, [pc, #28]	; (31c20 <_http_client_handle_entity+0x19c>)
   31c04:	4798      	blx	r3
   31c06:	e003      	b.n	31c10 <_http_client_handle_entity+0x18c>
		} else {
			_http_client_read_chuked_entity(module);
   31c08:	687b      	ldr	r3, [r7, #4]
   31c0a:	0018      	movs	r0, r3
   31c0c:	4b07      	ldr	r3, [pc, #28]	; (31c2c <_http_client_handle_entity+0x1a8>)
   31c0e:	4798      	blx	r3
		}
	}

	return 0;
   31c10:	2300      	movs	r3, #0
}
   31c12:	0018      	movs	r0, r3
   31c14:	46bd      	mov	sp, r7
   31c16:	b006      	add	sp, #24
   31c18:	bd80      	pop	{r7, pc}
   31c1a:	46c0      	nop			; (mov r8, r8)
   31c1c:	00030c49 	.word	0x00030c49
   31c20:	00031c31 	.word	0x00031c31
   31c24:	0003a780 	.word	0x0003a780
   31c28:	000342a5 	.word	0x000342a5
   31c2c:	00031871 	.word	0x00031871

00031c30 <_http_client_move_buffer>:

void _http_client_move_buffer(struct http_client_module *const module, char *base)
{
   31c30:	b580      	push	{r7, lr}
   31c32:	b084      	sub	sp, #16
   31c34:	af00      	add	r7, sp, #0
   31c36:	6078      	str	r0, [r7, #4]
   31c38:	6039      	str	r1, [r7, #0]
	char *buffer = module->config.recv_buffer;
   31c3a:	687b      	ldr	r3, [r7, #4]
   31c3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   31c3e:	60fb      	str	r3, [r7, #12]
	int remain = (int)module->recved_size - (int)base + (int)buffer;
   31c40:	687b      	ldr	r3, [r7, #4]
   31c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   31c44:	001a      	movs	r2, r3
   31c46:	683b      	ldr	r3, [r7, #0]
   31c48:	1ad2      	subs	r2, r2, r3
   31c4a:	68fb      	ldr	r3, [r7, #12]
   31c4c:	18d3      	adds	r3, r2, r3
   31c4e:	60bb      	str	r3, [r7, #8]

	if (remain > 0) {
   31c50:	68bb      	ldr	r3, [r7, #8]
   31c52:	2b00      	cmp	r3, #0
   31c54:	dd09      	ble.n	31c6a <_http_client_move_buffer+0x3a>
		memmove(buffer, base, remain);
   31c56:	68ba      	ldr	r2, [r7, #8]
   31c58:	6839      	ldr	r1, [r7, #0]
   31c5a:	68fb      	ldr	r3, [r7, #12]
   31c5c:	0018      	movs	r0, r3
   31c5e:	4b06      	ldr	r3, [pc, #24]	; (31c78 <_http_client_move_buffer+0x48>)
   31c60:	4798      	blx	r3
		module->recved_size = remain;
   31c62:	68ba      	ldr	r2, [r7, #8]
   31c64:	687b      	ldr	r3, [r7, #4]
   31c66:	645a      	str	r2, [r3, #68]	; 0x44
	} else {
		module->recved_size = 0;
	}
}
   31c68:	e002      	b.n	31c70 <_http_client_move_buffer+0x40>
		module->recved_size = 0;
   31c6a:	687b      	ldr	r3, [r7, #4]
   31c6c:	2200      	movs	r2, #0
   31c6e:	645a      	str	r2, [r3, #68]	; 0x44
}
   31c70:	46c0      	nop			; (mov r8, r8)
   31c72:	46bd      	mov	sp, r7
   31c74:	b004      	add	sp, #16
   31c76:	bd80      	pop	{r7, pc}
   31c78:	0003405f 	.word	0x0003405f

00031c7c <stream_writer_init>:
#include <asf.h>
#include <string.h>
#include "iot/stream_writer.h"

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
   31c7c:	b580      	push	{r7, lr}
   31c7e:	b084      	sub	sp, #16
   31c80:	af00      	add	r7, sp, #0
   31c82:	60f8      	str	r0, [r7, #12]
   31c84:	60b9      	str	r1, [r7, #8]
   31c86:	607a      	str	r2, [r7, #4]
   31c88:	603b      	str	r3, [r7, #0]
	writer->max_size = max_length;
   31c8a:	68fb      	ldr	r3, [r7, #12]
   31c8c:	687a      	ldr	r2, [r7, #4]
   31c8e:	601a      	str	r2, [r3, #0]
	writer->buffer = buffer;
   31c90:	68fb      	ldr	r3, [r7, #12]
   31c92:	68ba      	ldr	r2, [r7, #8]
   31c94:	611a      	str	r2, [r3, #16]
	writer->written = 0;
   31c96:	68fb      	ldr	r3, [r7, #12]
   31c98:	2200      	movs	r2, #0
   31c9a:	605a      	str	r2, [r3, #4]
	writer->write_func = func;
   31c9c:	68fb      	ldr	r3, [r7, #12]
   31c9e:	683a      	ldr	r2, [r7, #0]
   31ca0:	609a      	str	r2, [r3, #8]
	writer->priv_data = priv_data;
   31ca2:	68fb      	ldr	r3, [r7, #12]
   31ca4:	69ba      	ldr	r2, [r7, #24]
   31ca6:	60da      	str	r2, [r3, #12]
}
   31ca8:	46c0      	nop			; (mov r8, r8)
   31caa:	46bd      	mov	sp, r7
   31cac:	b004      	add	sp, #16
   31cae:	bd80      	pop	{r7, pc}

00031cb0 <stream_writer_send_8>:

void stream_writer_send_8(struct stream_writer * writer, int8_t value)
{
   31cb0:	b580      	push	{r7, lr}
   31cb2:	b084      	sub	sp, #16
   31cb4:	af00      	add	r7, sp, #0
   31cb6:	6078      	str	r0, [r7, #4]
   31cb8:	000a      	movs	r2, r1
   31cba:	1cfb      	adds	r3, r7, #3
   31cbc:	701a      	strb	r2, [r3, #0]
	int remain = writer->max_size - writer->written;
   31cbe:	687b      	ldr	r3, [r7, #4]
   31cc0:	681a      	ldr	r2, [r3, #0]
   31cc2:	687b      	ldr	r3, [r7, #4]
   31cc4:	685b      	ldr	r3, [r3, #4]
   31cc6:	1ad3      	subs	r3, r2, r3
   31cc8:	60fb      	str	r3, [r7, #12]
	
	if (remain < 1) {
   31cca:	68fb      	ldr	r3, [r7, #12]
   31ccc:	2b00      	cmp	r3, #0
   31cce:	dc03      	bgt.n	31cd8 <stream_writer_send_8+0x28>
		stream_writer_send_remain(writer);
   31cd0:	687b      	ldr	r3, [r7, #4]
   31cd2:	0018      	movs	r0, r3
   31cd4:	4b08      	ldr	r3, [pc, #32]	; (31cf8 <stream_writer_send_8+0x48>)
   31cd6:	4798      	blx	r3
	}
	
	writer->buffer[writer->written++] = (char)value;
   31cd8:	687b      	ldr	r3, [r7, #4]
   31cda:	6919      	ldr	r1, [r3, #16]
   31cdc:	687b      	ldr	r3, [r7, #4]
   31cde:	685b      	ldr	r3, [r3, #4]
   31ce0:	1c58      	adds	r0, r3, #1
   31ce2:	687a      	ldr	r2, [r7, #4]
   31ce4:	6050      	str	r0, [r2, #4]
   31ce6:	18cb      	adds	r3, r1, r3
   31ce8:	1cfa      	adds	r2, r7, #3
   31cea:	7812      	ldrb	r2, [r2, #0]
   31cec:	701a      	strb	r2, [r3, #0]
}
   31cee:	46c0      	nop			; (mov r8, r8)
   31cf0:	46bd      	mov	sp, r7
   31cf2:	b004      	add	sp, #16
   31cf4:	bd80      	pop	{r7, pc}
   31cf6:	46c0      	nop			; (mov r8, r8)
   31cf8:	00031d39 	.word	0x00031d39

00031cfc <stream_writer_send_buffer>:
	stream_writer_send_8(writer, (value >> 16) & 0xFF);
	stream_writer_send_8(writer, (value >> 24) & 0xFF);
}

void stream_writer_send_buffer(struct stream_writer * writer, const char *buffer, size_t length)
{
   31cfc:	b580      	push	{r7, lr}
   31cfe:	b084      	sub	sp, #16
   31d00:	af00      	add	r7, sp, #0
   31d02:	60f8      	str	r0, [r7, #12]
   31d04:	60b9      	str	r1, [r7, #8]
   31d06:	607a      	str	r2, [r7, #4]
	for (; length > 0; length--, buffer++) {
   31d08:	e00d      	b.n	31d26 <stream_writer_send_buffer+0x2a>
		stream_writer_send_8(writer, *buffer);
   31d0a:	68bb      	ldr	r3, [r7, #8]
   31d0c:	781b      	ldrb	r3, [r3, #0]
   31d0e:	b25a      	sxtb	r2, r3
   31d10:	68fb      	ldr	r3, [r7, #12]
   31d12:	0011      	movs	r1, r2
   31d14:	0018      	movs	r0, r3
   31d16:	4b07      	ldr	r3, [pc, #28]	; (31d34 <stream_writer_send_buffer+0x38>)
   31d18:	4798      	blx	r3
	for (; length > 0; length--, buffer++) {
   31d1a:	687b      	ldr	r3, [r7, #4]
   31d1c:	3b01      	subs	r3, #1
   31d1e:	607b      	str	r3, [r7, #4]
   31d20:	68bb      	ldr	r3, [r7, #8]
   31d22:	3301      	adds	r3, #1
   31d24:	60bb      	str	r3, [r7, #8]
   31d26:	687b      	ldr	r3, [r7, #4]
   31d28:	2b00      	cmp	r3, #0
   31d2a:	d1ee      	bne.n	31d0a <stream_writer_send_buffer+0xe>
	}
}
   31d2c:	46c0      	nop			; (mov r8, r8)
   31d2e:	46bd      	mov	sp, r7
   31d30:	b004      	add	sp, #16
   31d32:	bd80      	pop	{r7, pc}
   31d34:	00031cb1 	.word	0x00031cb1

00031d38 <stream_writer_send_remain>:

void stream_writer_send_remain(struct stream_writer * writer)
{
   31d38:	b590      	push	{r4, r7, lr}
   31d3a:	b083      	sub	sp, #12
   31d3c:	af00      	add	r7, sp, #0
   31d3e:	6078      	str	r0, [r7, #4]
	if(writer->written > 0) {
   31d40:	687b      	ldr	r3, [r7, #4]
   31d42:	685b      	ldr	r3, [r3, #4]
   31d44:	2b00      	cmp	r3, #0
   31d46:	d00c      	beq.n	31d62 <stream_writer_send_remain+0x2a>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
   31d48:	687b      	ldr	r3, [r7, #4]
   31d4a:	689c      	ldr	r4, [r3, #8]
   31d4c:	687b      	ldr	r3, [r7, #4]
   31d4e:	68d8      	ldr	r0, [r3, #12]
   31d50:	687b      	ldr	r3, [r7, #4]
   31d52:	6919      	ldr	r1, [r3, #16]
   31d54:	687b      	ldr	r3, [r7, #4]
   31d56:	685b      	ldr	r3, [r3, #4]
   31d58:	001a      	movs	r2, r3
   31d5a:	47a0      	blx	r4
		writer->written = 0;
   31d5c:	687b      	ldr	r3, [r7, #4]
   31d5e:	2200      	movs	r2, #0
   31d60:	605a      	str	r2, [r3, #4]
	}
}
   31d62:	46c0      	nop			; (mov r8, r8)
   31d64:	46bd      	mov	sp, r7
   31d66:	b003      	add	sp, #12
   31d68:	bd90      	pop	{r4, r7, pc}
	...

00031d6c <system_cpu_clock_get_hz>:
 * generic clock and the set CPU bus divider.
 *
 * \return Current CPU frequency in Hz.
 */
static inline uint32_t system_cpu_clock_get_hz(void)
{
   31d6c:	b580      	push	{r7, lr}
   31d6e:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
   31d70:	2000      	movs	r0, #0
   31d72:	4b05      	ldr	r3, [pc, #20]	; (31d88 <system_cpu_clock_get_hz+0x1c>)
   31d74:	4798      	blx	r3
   31d76:	0002      	movs	r2, r0
   31d78:	4b04      	ldr	r3, [pc, #16]	; (31d8c <system_cpu_clock_get_hz+0x20>)
   31d7a:	7a1b      	ldrb	r3, [r3, #8]
   31d7c:	b2db      	uxtb	r3, r3
   31d7e:	40da      	lsrs	r2, r3
   31d80:	0013      	movs	r3, r2
}
   31d82:	0018      	movs	r0, r3
   31d84:	46bd      	mov	sp, r7
   31d86:	bd80      	pop	{r7, pc}
   31d88:	000297a5 	.word	0x000297a5
   31d8c:	40000400 	.word	0x40000400

00031d90 <tcc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tcc_enable(
		const struct tcc_module *const module_inst)
{
   31d90:	b580      	push	{r7, lr}
   31d92:	b084      	sub	sp, #16
   31d94:	af00      	add	r7, sp, #0
   31d96:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
   31d98:	687b      	ldr	r3, [r7, #4]
   31d9a:	681b      	ldr	r3, [r3, #0]
   31d9c:	60fb      	str	r3, [r7, #12]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
   31d9e:	46c0      	nop			; (mov r8, r8)
   31da0:	68fb      	ldr	r3, [r7, #12]
   31da2:	689b      	ldr	r3, [r3, #8]
   31da4:	2202      	movs	r2, #2
   31da6:	4013      	ands	r3, r2
   31da8:	d1fa      	bne.n	31da0 <tcc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
   31daa:	68fb      	ldr	r3, [r7, #12]
   31dac:	681b      	ldr	r3, [r3, #0]
   31dae:	2202      	movs	r2, #2
   31db0:	431a      	orrs	r2, r3
   31db2:	68fb      	ldr	r3, [r7, #12]
   31db4:	601a      	str	r2, [r3, #0]
}
   31db6:	46c0      	nop			; (mov r8, r8)
   31db8:	46bd      	mov	sp, r7
   31dba:	b004      	add	sp, #16
   31dbc:	bd80      	pop	{r7, pc}
	...

00031dc0 <sw_timer_tcc_callback>:
 *
 * \param[in] module Instance of the TCC.
 */
#if (SAMD21)
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
   31dc0:	b580      	push	{r7, lr}
   31dc2:	b082      	sub	sp, #8
   31dc4:	af00      	add	r7, sp, #0
   31dc6:	6078      	str	r0, [r7, #4]
	sw_timer_tick++;
   31dc8:	4b04      	ldr	r3, [pc, #16]	; (31ddc <sw_timer_tcc_callback+0x1c>)
   31dca:	681b      	ldr	r3, [r3, #0]
   31dcc:	1c5a      	adds	r2, r3, #1
   31dce:	4b03      	ldr	r3, [pc, #12]	; (31ddc <sw_timer_tcc_callback+0x1c>)
   31dd0:	601a      	str	r2, [r3, #0]
}
   31dd2:	46c0      	nop			; (mov r8, r8)
   31dd4:	46bd      	mov	sp, r7
   31dd6:	b002      	add	sp, #8
   31dd8:	bd80      	pop	{r7, pc}
   31dda:	46c0      	nop			; (mov r8, r8)
   31ddc:	2000412c 	.word	0x2000412c

00031de0 <sw_timer_get_config_defaults>:
}

#endif

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
   31de0:	b580      	push	{r7, lr}
   31de2:	b082      	sub	sp, #8
   31de4:	af00      	add	r7, sp, #0
   31de6:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->accuracy = 100;
   31de8:	687b      	ldr	r3, [r7, #4]
   31dea:	2264      	movs	r2, #100	; 0x64
   31dec:	805a      	strh	r2, [r3, #2]
	config->tcc_dev = 0;
   31dee:	687b      	ldr	r3, [r7, #4]
   31df0:	2200      	movs	r2, #0
   31df2:	701a      	strb	r2, [r3, #0]
	config->tcc_callback_channel = 0;
   31df4:	687b      	ldr	r3, [r7, #4]
   31df6:	2200      	movs	r2, #0
   31df8:	705a      	strb	r2, [r3, #1]
}
   31dfa:	46c0      	nop			; (mov r8, r8)
   31dfc:	46bd      	mov	sp, r7
   31dfe:	b002      	add	sp, #8
   31e00:	bd80      	pop	{r7, pc}
	...

00031e04 <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
   31e04:	b590      	push	{r4, r7, lr}
   31e06:	b0b1      	sub	sp, #196	; 0xc4
   31e08:	af00      	add	r7, sp, #0
   31e0a:	6078      	str	r0, [r7, #4]
   31e0c:	6039      	str	r1, [r7, #0]
#if (SAMD21)
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
   31e0e:	230c      	movs	r3, #12
   31e10:	18fb      	adds	r3, r7, r3
   31e12:	4a2e      	ldr	r2, [pc, #184]	; (31ecc <sw_timer_init+0xc8>)
   31e14:	ca13      	ldmia	r2!, {r0, r1, r4}
   31e16:	c313      	stmia	r3!, {r0, r1, r4}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
   31e18:	683b      	ldr	r3, [r7, #0]
   31e1a:	885b      	ldrh	r3, [r3, #2]
   31e1c:	001a      	movs	r2, r3
   31e1e:	687b      	ldr	r3, [r7, #4]
   31e20:	655a      	str	r2, [r3, #84]	; 0x54
#if (SAMD21)
	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
   31e22:	687b      	ldr	r3, [r7, #4]
   31e24:	3314      	adds	r3, #20
   31e26:	22bc      	movs	r2, #188	; 0xbc
   31e28:	18ba      	adds	r2, r7, r2
   31e2a:	6013      	str	r3, [r2, #0]
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
   31e2c:	683b      	ldr	r3, [r7, #0]
   31e2e:	781b      	ldrb	r3, [r3, #0]
   31e30:	001a      	movs	r2, r3
   31e32:	230c      	movs	r3, #12
   31e34:	18fb      	adds	r3, r7, r3
   31e36:	0092      	lsls	r2, r2, #2
   31e38:	58d2      	ldr	r2, [r2, r3]
   31e3a:	2318      	movs	r3, #24
   31e3c:	18fb      	adds	r3, r7, r3
   31e3e:	0011      	movs	r1, r2
   31e40:	0018      	movs	r0, r3
   31e42:	4b23      	ldr	r3, [pc, #140]	; (31ed0 <sw_timer_init+0xcc>)
   31e44:	4798      	blx	r3
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
   31e46:	4b23      	ldr	r3, [pc, #140]	; (31ed4 <sw_timer_init+0xd0>)
   31e48:	4798      	blx	r3
   31e4a:	0004      	movs	r4, r0
   31e4c:	683b      	ldr	r3, [r7, #0]
   31e4e:	885b      	ldrh	r3, [r3, #2]
   31e50:	001a      	movs	r2, r3
   31e52:	4b21      	ldr	r3, [pc, #132]	; (31ed8 <sw_timer_init+0xd4>)
   31e54:	0011      	movs	r1, r2
   31e56:	22fa      	movs	r2, #250	; 0xfa
   31e58:	0210      	lsls	r0, r2, #8
   31e5a:	4798      	blx	r3
   31e5c:	0003      	movs	r3, r0
   31e5e:	001a      	movs	r2, r3
   31e60:	4b1e      	ldr	r3, [pc, #120]	; (31edc <sw_timer_init+0xd8>)
   31e62:	0011      	movs	r1, r2
   31e64:	0020      	movs	r0, r4
   31e66:	4798      	blx	r3
   31e68:	0003      	movs	r3, r0
   31e6a:	001a      	movs	r2, r3
   31e6c:	2318      	movs	r3, #24
   31e6e:	18fb      	adds	r3, r7, r3
   31e70:	605a      	str	r2, [r3, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
   31e72:	2318      	movs	r3, #24
   31e74:	18fb      	adds	r3, r7, r3
   31e76:	2205      	movs	r2, #5
   31e78:	72da      	strb	r2, [r3, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
   31e7a:	683b      	ldr	r3, [r7, #0]
   31e7c:	781b      	ldrb	r3, [r3, #0]
   31e7e:	001a      	movs	r2, r3
   31e80:	230c      	movs	r3, #12
   31e82:	18fb      	adds	r3, r7, r3
   31e84:	0092      	lsls	r2, r2, #2
   31e86:	58d1      	ldr	r1, [r2, r3]
   31e88:	2318      	movs	r3, #24
   31e8a:	18fa      	adds	r2, r7, r3
   31e8c:	23bc      	movs	r3, #188	; 0xbc
   31e8e:	18fb      	adds	r3, r7, r3
   31e90:	681b      	ldr	r3, [r3, #0]
   31e92:	0018      	movs	r0, r3
   31e94:	4b12      	ldr	r3, [pc, #72]	; (31ee0 <sw_timer_init+0xdc>)
   31e96:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   31e98:	683b      	ldr	r3, [r7, #0]
   31e9a:	785b      	ldrb	r3, [r3, #1]
   31e9c:	3308      	adds	r3, #8
   31e9e:	b2da      	uxtb	r2, r3
   31ea0:	4910      	ldr	r1, [pc, #64]	; (31ee4 <sw_timer_init+0xe0>)
   31ea2:	23bc      	movs	r3, #188	; 0xbc
   31ea4:	18fb      	adds	r3, r7, r3
   31ea6:	681b      	ldr	r3, [r3, #0]
   31ea8:	0018      	movs	r0, r3
   31eaa:	4b0f      	ldr	r3, [pc, #60]	; (31ee8 <sw_timer_init+0xe4>)
   31eac:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   31eae:	683b      	ldr	r3, [r7, #0]
   31eb0:	785b      	ldrb	r3, [r3, #1]
   31eb2:	3308      	adds	r3, #8
   31eb4:	b2da      	uxtb	r2, r3
   31eb6:	23bc      	movs	r3, #188	; 0xbc
   31eb8:	18fb      	adds	r3, r7, r3
   31eba:	681b      	ldr	r3, [r3, #0]
   31ebc:	0011      	movs	r1, r2
   31ebe:	0018      	movs	r0, r3
   31ec0:	4b0a      	ldr	r3, [pc, #40]	; (31eec <sw_timer_init+0xe8>)
   31ec2:	4798      	blx	r3

	ul_previous_time = rtt_read_timer_value(RTT);
	while (ul_previous_time == rtt_read_timer_value(RTT)) {
	}
#endif
}
   31ec4:	46c0      	nop			; (mov r8, r8)
   31ec6:	46bd      	mov	sp, r7
   31ec8:	b031      	add	sp, #196	; 0xc4
   31eca:	bd90      	pop	{r4, r7, pc}
   31ecc:	0003a7c0 	.word	0x0003a7c0
   31ed0:	00029d3d 	.word	0x00029d3d
   31ed4:	00031d6d 	.word	0x00031d6d
   31ed8:	000324dd 	.word	0x000324dd
   31edc:	000323c9 	.word	0x000323c9
   31ee0:	0002a399 	.word	0x0002a399
   31ee4:	00031dc1 	.word	0x00031dc1
   31ee8:	0002a7b1 	.word	0x0002a7b1
   31eec:	0002a7f1 	.word	0x0002a7f1

00031ef0 <sw_timer_enable>:

void sw_timer_enable(struct sw_timer_module *const module_inst)
{
   31ef0:	b580      	push	{r7, lr}
   31ef2:	b084      	sub	sp, #16
   31ef4:	af00      	add	r7, sp, #0
   31ef6:	6078      	str	r0, [r7, #4]
	struct tcc_module *tcc_module;
#endif

	Assert(module_inst);
#if (SAMD21)
	tcc_module = &module_inst->tcc_inst;
   31ef8:	687b      	ldr	r3, [r7, #4]
   31efa:	3314      	adds	r3, #20
   31efc:	60fb      	str	r3, [r7, #12]

	tcc_enable(tcc_module);
   31efe:	68fb      	ldr	r3, [r7, #12]
   31f00:	0018      	movs	r0, r3
   31f02:	4b03      	ldr	r3, [pc, #12]	; (31f10 <sw_timer_enable+0x20>)
   31f04:	4798      	blx	r3
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 0);
	NVIC_EnableIRQ(RTT_IRQn);
	rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
#endif
}
   31f06:	46c0      	nop			; (mov r8, r8)
   31f08:	46bd      	mov	sp, r7
   31f0a:	b004      	add	sp, #16
   31f0c:	bd80      	pop	{r7, pc}
   31f0e:	46c0      	nop			; (mov r8, r8)
   31f10:	00031d91 	.word	0x00031d91

00031f14 <sw_timer_register_callback>:
#endif
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
		sw_timer_callback_t callback, void *context, uint32_t period)
{
   31f14:	b580      	push	{r7, lr}
   31f16:	b086      	sub	sp, #24
   31f18:	af00      	add	r7, sp, #0
   31f1a:	60f8      	str	r0, [r7, #12]
   31f1c:	60b9      	str	r1, [r7, #8]
   31f1e:	607a      	str	r2, [r7, #4]
   31f20:	603b      	str	r3, [r7, #0]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   31f22:	2300      	movs	r3, #0
   31f24:	617b      	str	r3, [r7, #20]
   31f26:	e032      	b.n	31f8e <sw_timer_register_callback+0x7a>
		if (module_inst->handler[index].used == 0) {
   31f28:	68f9      	ldr	r1, [r7, #12]
   31f2a:	697a      	ldr	r2, [r7, #20]
   31f2c:	0013      	movs	r3, r2
   31f2e:	009b      	lsls	r3, r3, #2
   31f30:	189b      	adds	r3, r3, r2
   31f32:	009b      	lsls	r3, r3, #2
   31f34:	5c5b      	ldrb	r3, [r3, r1]
   31f36:	07db      	lsls	r3, r3, #31
   31f38:	0fdb      	lsrs	r3, r3, #31
   31f3a:	b2db      	uxtb	r3, r3
   31f3c:	2b00      	cmp	r3, #0
   31f3e:	d123      	bne.n	31f88 <sw_timer_register_callback+0x74>
			handler = &module_inst->handler[index];
   31f40:	697a      	ldr	r2, [r7, #20]
   31f42:	0013      	movs	r3, r2
   31f44:	009b      	lsls	r3, r3, #2
   31f46:	189b      	adds	r3, r3, r2
   31f48:	009b      	lsls	r3, r3, #2
   31f4a:	68fa      	ldr	r2, [r7, #12]
   31f4c:	18d3      	adds	r3, r2, r3
   31f4e:	613b      	str	r3, [r7, #16]
			handler->callback = callback;
   31f50:	693b      	ldr	r3, [r7, #16]
   31f52:	68ba      	ldr	r2, [r7, #8]
   31f54:	605a      	str	r2, [r3, #4]
			handler->callback_enable = 0;
   31f56:	693b      	ldr	r3, [r7, #16]
   31f58:	781a      	ldrb	r2, [r3, #0]
   31f5a:	2102      	movs	r1, #2
   31f5c:	438a      	bics	r2, r1
   31f5e:	701a      	strb	r2, [r3, #0]
			handler->context = context;
   31f60:	693b      	ldr	r3, [r7, #16]
   31f62:	687a      	ldr	r2, [r7, #4]
   31f64:	609a      	str	r2, [r3, #8]
			handler->period = period / module_inst->accuracy;
   31f66:	68fb      	ldr	r3, [r7, #12]
   31f68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   31f6a:	4b0d      	ldr	r3, [pc, #52]	; (31fa0 <sw_timer_register_callback+0x8c>)
   31f6c:	0011      	movs	r1, r2
   31f6e:	6838      	ldr	r0, [r7, #0]
   31f70:	4798      	blx	r3
   31f72:	0003      	movs	r3, r0
   31f74:	001a      	movs	r2, r3
   31f76:	693b      	ldr	r3, [r7, #16]
   31f78:	60da      	str	r2, [r3, #12]
			handler->used = 1;
   31f7a:	693b      	ldr	r3, [r7, #16]
   31f7c:	781a      	ldrb	r2, [r3, #0]
   31f7e:	2101      	movs	r1, #1
   31f80:	430a      	orrs	r2, r1
   31f82:	701a      	strb	r2, [r3, #0]
			return index;
   31f84:	697b      	ldr	r3, [r7, #20]
   31f86:	e007      	b.n	31f98 <sw_timer_register_callback+0x84>
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   31f88:	697b      	ldr	r3, [r7, #20]
   31f8a:	3301      	adds	r3, #1
   31f8c:	617b      	str	r3, [r7, #20]
   31f8e:	697b      	ldr	r3, [r7, #20]
   31f90:	2b00      	cmp	r3, #0
   31f92:	ddc9      	ble.n	31f28 <sw_timer_register_callback+0x14>
		}
	}
	return -1;
   31f94:	2301      	movs	r3, #1
   31f96:	425b      	negs	r3, r3
}
   31f98:	0018      	movs	r0, r3
   31f9a:	46bd      	mov	sp, r7
   31f9c:	b006      	add	sp, #24
   31f9e:	bd80      	pop	{r7, pc}
   31fa0:	000323c9 	.word	0x000323c9

00031fa4 <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
   31fa4:	b580      	push	{r7, lr}
   31fa6:	b086      	sub	sp, #24
   31fa8:	af00      	add	r7, sp, #0
   31faa:	60f8      	str	r0, [r7, #12]
   31fac:	60b9      	str	r1, [r7, #8]
   31fae:	607a      	str	r2, [r7, #4]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   31fb0:	68ba      	ldr	r2, [r7, #8]
   31fb2:	0013      	movs	r3, r2
   31fb4:	009b      	lsls	r3, r3, #2
   31fb6:	189b      	adds	r3, r3, r2
   31fb8:	009b      	lsls	r3, r3, #2
   31fba:	68fa      	ldr	r2, [r7, #12]
   31fbc:	18d3      	adds	r3, r2, r3
   31fbe:	617b      	str	r3, [r7, #20]

	handler->callback_enable = 1;
   31fc0:	697b      	ldr	r3, [r7, #20]
   31fc2:	781a      	ldrb	r2, [r3, #0]
   31fc4:	2102      	movs	r1, #2
   31fc6:	430a      	orrs	r2, r1
   31fc8:	701a      	strb	r2, [r3, #0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
   31fca:	68fb      	ldr	r3, [r7, #12]
   31fcc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   31fce:	4b07      	ldr	r3, [pc, #28]	; (31fec <sw_timer_enable_callback+0x48>)
   31fd0:	0011      	movs	r1, r2
   31fd2:	6878      	ldr	r0, [r7, #4]
   31fd4:	4798      	blx	r3
   31fd6:	0003      	movs	r3, r0
   31fd8:	001a      	movs	r2, r3
   31fda:	4b05      	ldr	r3, [pc, #20]	; (31ff0 <sw_timer_enable_callback+0x4c>)
   31fdc:	681b      	ldr	r3, [r3, #0]
   31fde:	18d2      	adds	r2, r2, r3
   31fe0:	697b      	ldr	r3, [r7, #20]
   31fe2:	611a      	str	r2, [r3, #16]
}
   31fe4:	46c0      	nop			; (mov r8, r8)
   31fe6:	46bd      	mov	sp, r7
   31fe8:	b006      	add	sp, #24
   31fea:	bd80      	pop	{r7, pc}
   31fec:	000323c9 	.word	0x000323c9
   31ff0:	2000412c 	.word	0x2000412c

00031ff4 <sw_timer_disable_callback>:

void sw_timer_disable_callback(struct sw_timer_module *const module_inst, int timer_id)
{
   31ff4:	b580      	push	{r7, lr}
   31ff6:	b084      	sub	sp, #16
   31ff8:	af00      	add	r7, sp, #0
   31ffa:	6078      	str	r0, [r7, #4]
   31ffc:	6039      	str	r1, [r7, #0]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   31ffe:	683a      	ldr	r2, [r7, #0]
   32000:	0013      	movs	r3, r2
   32002:	009b      	lsls	r3, r3, #2
   32004:	189b      	adds	r3, r3, r2
   32006:	009b      	lsls	r3, r3, #2
   32008:	687a      	ldr	r2, [r7, #4]
   3200a:	18d3      	adds	r3, r2, r3
   3200c:	60fb      	str	r3, [r7, #12]

	handler->callback_enable = 0;
   3200e:	68fb      	ldr	r3, [r7, #12]
   32010:	781a      	ldrb	r2, [r3, #0]
   32012:	2102      	movs	r1, #2
   32014:	438a      	bics	r2, r1
   32016:	701a      	strb	r2, [r3, #0]
}
   32018:	46c0      	nop			; (mov r8, r8)
   3201a:	46bd      	mov	sp, r7
   3201c:	b004      	add	sp, #16
   3201e:	bd80      	pop	{r7, pc}

00032020 <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
   32020:	b590      	push	{r4, r7, lr}
   32022:	b085      	sub	sp, #20
   32024:	af00      	add	r7, sp, #0
   32026:	6078      	str	r0, [r7, #4]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   32028:	2300      	movs	r3, #0
   3202a:	60fb      	str	r3, [r7, #12]
   3202c:	e053      	b.n	320d6 <sw_timer_task+0xb6>
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
   3202e:	6879      	ldr	r1, [r7, #4]
   32030:	68fa      	ldr	r2, [r7, #12]
   32032:	0013      	movs	r3, r2
   32034:	009b      	lsls	r3, r3, #2
   32036:	189b      	adds	r3, r3, r2
   32038:	009b      	lsls	r3, r3, #2
   3203a:	5c5b      	ldrb	r3, [r3, r1]
   3203c:	07db      	lsls	r3, r3, #31
   3203e:	0fdb      	lsrs	r3, r3, #31
   32040:	b2db      	uxtb	r3, r3
   32042:	2b00      	cmp	r3, #0
   32044:	d044      	beq.n	320d0 <sw_timer_task+0xb0>
   32046:	6879      	ldr	r1, [r7, #4]
   32048:	68fa      	ldr	r2, [r7, #12]
   3204a:	0013      	movs	r3, r2
   3204c:	009b      	lsls	r3, r3, #2
   3204e:	189b      	adds	r3, r3, r2
   32050:	009b      	lsls	r3, r3, #2
   32052:	5c5b      	ldrb	r3, [r3, r1]
   32054:	079b      	lsls	r3, r3, #30
   32056:	0fdb      	lsrs	r3, r3, #31
   32058:	b2db      	uxtb	r3, r3
   3205a:	2b00      	cmp	r3, #0
   3205c:	d038      	beq.n	320d0 <sw_timer_task+0xb0>
			handler = &module_inst->handler[index];
   3205e:	68fa      	ldr	r2, [r7, #12]
   32060:	0013      	movs	r3, r2
   32062:	009b      	lsls	r3, r3, #2
   32064:	189b      	adds	r3, r3, r2
   32066:	009b      	lsls	r3, r3, #2
   32068:	687a      	ldr	r2, [r7, #4]
   3206a:	18d3      	adds	r3, r2, r3
   3206c:	60bb      	str	r3, [r7, #8]
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
   3206e:	68bb      	ldr	r3, [r7, #8]
   32070:	691a      	ldr	r2, [r3, #16]
   32072:	4b1c      	ldr	r3, [pc, #112]	; (320e4 <sw_timer_task+0xc4>)
   32074:	681b      	ldr	r3, [r3, #0]
   32076:	1ad3      	subs	r3, r2, r3
   32078:	d52a      	bpl.n	320d0 <sw_timer_task+0xb0>
   3207a:	68bb      	ldr	r3, [r7, #8]
   3207c:	781b      	ldrb	r3, [r3, #0]
   3207e:	2204      	movs	r2, #4
   32080:	4013      	ands	r3, r2
   32082:	b2db      	uxtb	r3, r3
   32084:	2b00      	cmp	r3, #0
   32086:	d123      	bne.n	320d0 <sw_timer_task+0xb0>
				/* Enter critical section. */
				handler->busy = 1;
   32088:	68bb      	ldr	r3, [r7, #8]
   3208a:	781a      	ldrb	r2, [r3, #0]
   3208c:	2104      	movs	r1, #4
   3208e:	430a      	orrs	r2, r1
   32090:	701a      	strb	r2, [r3, #0]
				/* Timer was expired. */
				if (handler->period > 0) {
   32092:	68bb      	ldr	r3, [r7, #8]
   32094:	68db      	ldr	r3, [r3, #12]
   32096:	2b00      	cmp	r3, #0
   32098:	d007      	beq.n	320aa <sw_timer_task+0x8a>
					handler->expire_time = sw_timer_tick + handler->period;
   3209a:	68bb      	ldr	r3, [r7, #8]
   3209c:	68da      	ldr	r2, [r3, #12]
   3209e:	4b11      	ldr	r3, [pc, #68]	; (320e4 <sw_timer_task+0xc4>)
   320a0:	681b      	ldr	r3, [r3, #0]
   320a2:	18d2      	adds	r2, r2, r3
   320a4:	68bb      	ldr	r3, [r7, #8]
   320a6:	611a      	str	r2, [r3, #16]
   320a8:	e004      	b.n	320b4 <sw_timer_task+0x94>
				} else {
					/* One shot. */
					handler->callback_enable = 0;
   320aa:	68bb      	ldr	r3, [r7, #8]
   320ac:	781a      	ldrb	r2, [r3, #0]
   320ae:	2102      	movs	r1, #2
   320b0:	438a      	bics	r2, r1
   320b2:	701a      	strb	r2, [r3, #0]
				}
				/* Call callback function. */
				handler->callback(module_inst, index, handler->context, handler->period);
   320b4:	68bb      	ldr	r3, [r7, #8]
   320b6:	685c      	ldr	r4, [r3, #4]
   320b8:	68bb      	ldr	r3, [r7, #8]
   320ba:	689a      	ldr	r2, [r3, #8]
   320bc:	68bb      	ldr	r3, [r7, #8]
   320be:	68db      	ldr	r3, [r3, #12]
   320c0:	68f9      	ldr	r1, [r7, #12]
   320c2:	6878      	ldr	r0, [r7, #4]
   320c4:	47a0      	blx	r4
				/* Leave critical section. */
				handler->busy = 0;
   320c6:	68bb      	ldr	r3, [r7, #8]
   320c8:	781a      	ldrb	r2, [r3, #0]
   320ca:	2104      	movs	r1, #4
   320cc:	438a      	bics	r2, r1
   320ce:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   320d0:	68fb      	ldr	r3, [r7, #12]
   320d2:	3301      	adds	r3, #1
   320d4:	60fb      	str	r3, [r7, #12]
   320d6:	68fb      	ldr	r3, [r7, #12]
   320d8:	2b00      	cmp	r3, #0
   320da:	dda8      	ble.n	3202e <sw_timer_task+0xe>
			}
		}
	}
}
   320dc:	46c0      	nop			; (mov r8, r8)
   320de:	46bd      	mov	sp, r7
   320e0:	b005      	add	sp, #20
   320e2:	bd90      	pop	{r4, r7, pc}
   320e4:	2000412c 	.word	0x2000412c

000320e8 <main>:
 * Application entry point.
 *
 * \return program return value.
 */
int main(void)
{
   320e8:	b580      	push	{r7, lr}
   320ea:	af00      	add	r7, sp, #0
	/* Initialize the board. */
	system_init();
   320ec:	4b06      	ldr	r3, [pc, #24]	; (32108 <main+0x20>)
   320ee:	4798      	blx	r3

	/* Initialize the UART console. */
	InitializeSerialConsole();
   320f0:	4b06      	ldr	r3, [pc, #24]	; (3210c <main+0x24>)
   320f2:	4798      	blx	r3

	//Initialize trace capabilities
	 vTraceEnable(TRC_START);
   320f4:	2001      	movs	r0, #1
   320f6:	4b06      	ldr	r3, [pc, #24]	; (32110 <main+0x28>)
   320f8:	4798      	blx	r3
    // Start FreeRTOS scheduler
    vTaskStartScheduler();
   320fa:	4b06      	ldr	r3, [pc, #24]	; (32114 <main+0x2c>)
   320fc:	4798      	blx	r3

	return 0; //Will not get here
   320fe:	2300      	movs	r3, #0
}
   32100:	0018      	movs	r0, r3
   32102:	46bd      	mov	sp, r7
   32104:	bd80      	pop	{r7, pc}
   32106:	46c0      	nop			; (mov r8, r8)
   32108:	00029c31 	.word	0x00029c31
   3210c:	0001da99 	.word	0x0001da99
   32110:	00018169 	.word	0x00018169
   32114:	0001c0f1 	.word	0x0001c0f1

00032118 <vApplicationDaemonTaskStartupHook>:
*					here will be called before other tasks are initilized.
* @param[in]        None
* @return           None
*****************************************************************************/
void vApplicationDaemonTaskStartupHook(void)
{
   32118:	b580      	push	{r7, lr}
   3211a:	af00      	add	r7, sp, #0
	SerialConsoleWriteString("\r\n\r\n-----ESE516 Main Program-----\r\n");
   3211c:	4b1c      	ldr	r3, [pc, #112]	; (32190 <vApplicationDaemonTaskStartupHook+0x78>)
   3211e:	0018      	movs	r0, r3
   32120:	4b1c      	ldr	r3, [pc, #112]	; (32194 <vApplicationDaemonTaskStartupHook+0x7c>)
   32122:	4798      	blx	r3

	//Initialize HW that needs FreeRTOS Initialization
	SerialConsoleWriteString("\r\n\r\nInitialize HW...\r\n");
   32124:	4b1c      	ldr	r3, [pc, #112]	; (32198 <vApplicationDaemonTaskStartupHook+0x80>)
   32126:	0018      	movs	r0, r3
   32128:	4b1a      	ldr	r3, [pc, #104]	; (32194 <vApplicationDaemonTaskStartupHook+0x7c>)
   3212a:	4798      	blx	r3
	if (I2cInitializeDriver() != STATUS_OK)
   3212c:	4b1b      	ldr	r3, [pc, #108]	; (3219c <vApplicationDaemonTaskStartupHook+0x84>)
   3212e:	4798      	blx	r3
   32130:	1e03      	subs	r3, r0, #0
   32132:	d004      	beq.n	3213e <vApplicationDaemonTaskStartupHook+0x26>
	{
		SerialConsoleWriteString("Error initializing I2C Driver!\r\n");
   32134:	4b1a      	ldr	r3, [pc, #104]	; (321a0 <vApplicationDaemonTaskStartupHook+0x88>)
   32136:	0018      	movs	r0, r3
   32138:	4b16      	ldr	r3, [pc, #88]	; (32194 <vApplicationDaemonTaskStartupHook+0x7c>)
   3213a:	4798      	blx	r3
   3213c:	e003      	b.n	32146 <vApplicationDaemonTaskStartupHook+0x2e>
	}
	else
	{
		SerialConsoleWriteString("Initialized I2C Driver!\r\n");
   3213e:	4b19      	ldr	r3, [pc, #100]	; (321a4 <vApplicationDaemonTaskStartupHook+0x8c>)
   32140:	0018      	movs	r0, r3
   32142:	4b14      	ldr	r3, [pc, #80]	; (32194 <vApplicationDaemonTaskStartupHook+0x7c>)
   32144:	4798      	blx	r3
	}

	if(0 != InitializeSeesaw())
   32146:	4b18      	ldr	r3, [pc, #96]	; (321a8 <vApplicationDaemonTaskStartupHook+0x90>)
   32148:	4798      	blx	r3
   3214a:	1e03      	subs	r3, r0, #0
   3214c:	d004      	beq.n	32158 <vApplicationDaemonTaskStartupHook+0x40>
	{
		SerialConsoleWriteString("Error initializing Seesaw!\r\n");
   3214e:	4b17      	ldr	r3, [pc, #92]	; (321ac <vApplicationDaemonTaskStartupHook+0x94>)
   32150:	0018      	movs	r0, r3
   32152:	4b10      	ldr	r3, [pc, #64]	; (32194 <vApplicationDaemonTaskStartupHook+0x7c>)
   32154:	4798      	blx	r3
   32156:	e003      	b.n	32160 <vApplicationDaemonTaskStartupHook+0x48>
	}	
	else
	{
		SerialConsoleWriteString("Initialized Seesaw!\r\n");
   32158:	4b15      	ldr	r3, [pc, #84]	; (321b0 <vApplicationDaemonTaskStartupHook+0x98>)
   3215a:	0018      	movs	r0, r3
   3215c:	4b0d      	ldr	r3, [pc, #52]	; (32194 <vApplicationDaemonTaskStartupHook+0x7c>)
   3215e:	4798      	blx	r3
	}
	
	//initialize OLED
	if (InitializeOLEDdriver() != STATUS_OK)
   32160:	4b14      	ldr	r3, [pc, #80]	; (321b4 <vApplicationDaemonTaskStartupHook+0x9c>)
   32162:	4798      	blx	r3
   32164:	1e03      	subs	r3, r0, #0
   32166:	d004      	beq.n	32172 <vApplicationDaemonTaskStartupHook+0x5a>
	{
		SerialConsoleWriteString("Error initializing OLED Driver!\r\n");
   32168:	4b13      	ldr	r3, [pc, #76]	; (321b8 <vApplicationDaemonTaskStartupHook+0xa0>)
   3216a:	0018      	movs	r0, r3
   3216c:	4b09      	ldr	r3, [pc, #36]	; (32194 <vApplicationDaemonTaskStartupHook+0x7c>)
   3216e:	4798      	blx	r3
   32170:	e003      	b.n	3217a <vApplicationDaemonTaskStartupHook+0x62>
	}
	else
	{
		SerialConsoleWriteString("Initialized OLED Driver!\r\n");
   32172:	4b12      	ldr	r3, [pc, #72]	; (321bc <vApplicationDaemonTaskStartupHook+0xa4>)
   32174:	0018      	movs	r0, r3
   32176:	4b07      	ldr	r3, [pc, #28]	; (32194 <vApplicationDaemonTaskStartupHook+0x7c>)
   32178:	4798      	blx	r3
	}

	StartTasks();
   3217a:	4b11      	ldr	r3, [pc, #68]	; (321c0 <vApplicationDaemonTaskStartupHook+0xa8>)
   3217c:	4798      	blx	r3

	vTaskSuspend(daemonTaskHandle);
   3217e:	4b11      	ldr	r3, [pc, #68]	; (321c4 <vApplicationDaemonTaskStartupHook+0xac>)
   32180:	681b      	ldr	r3, [r3, #0]
   32182:	0018      	movs	r0, r3
   32184:	4b10      	ldr	r3, [pc, #64]	; (321c8 <vApplicationDaemonTaskStartupHook+0xb0>)
   32186:	4798      	blx	r3
}
   32188:	46c0      	nop			; (mov r8, r8)
   3218a:	46bd      	mov	sp, r7
   3218c:	bd80      	pop	{r7, pc}
   3218e:	46c0      	nop			; (mov r8, r8)
   32190:	0003a7cc 	.word	0x0003a7cc
   32194:	0001db09 	.word	0x0001db09
   32198:	0003a7f0 	.word	0x0003a7f0
   3219c:	00015fa1 	.word	0x00015fa1
   321a0:	0003a808 	.word	0x0003a808
   321a4:	0003a82c 	.word	0x0003a82c
   321a8:	00016d61 	.word	0x00016d61
   321ac:	0003a848 	.word	0x0003a848
   321b0:	0003a868 	.word	0x0003a868
   321b4:	000167a5 	.word	0x000167a5
   321b8:	0003a880 	.word	0x0003a880
   321bc:	0003a8a4 	.word	0x0003a8a4
   321c0:	000321cd 	.word	0x000321cd
   321c4:	20004134 	.word	0x20004134
   321c8:	0001bf95 	.word	0x0001bf95

000321cc <StartTasks>:
* @details
* @param[in]        None
* @return           None
*****************************************************************************/
static void StartTasks(void)
{
   321cc:	b590      	push	{r4, r7, lr}
   321ce:	b083      	sub	sp, #12
   321d0:	af02      	add	r7, sp, #8

	snprintf(bufferPrint, 64, "Heap before starting tasks: %d\r\n", xPortGetFreeHeapSize());
   321d2:	4b52      	ldr	r3, [pc, #328]	; (3231c <StartTasks+0x150>)
   321d4:	4798      	blx	r3
   321d6:	0003      	movs	r3, r0
   321d8:	4a51      	ldr	r2, [pc, #324]	; (32320 <StartTasks+0x154>)
   321da:	4852      	ldr	r0, [pc, #328]	; (32324 <StartTasks+0x158>)
   321dc:	2140      	movs	r1, #64	; 0x40
   321de:	4c52      	ldr	r4, [pc, #328]	; (32328 <StartTasks+0x15c>)
   321e0:	47a0      	blx	r4
	SerialConsoleWriteString(bufferPrint);
   321e2:	4b50      	ldr	r3, [pc, #320]	; (32324 <StartTasks+0x158>)
   321e4:	0018      	movs	r0, r3
   321e6:	4b51      	ldr	r3, [pc, #324]	; (3232c <StartTasks+0x160>)
   321e8:	4798      	blx	r3

	//Initialize Tasks here

	if (xTaskCreate(vCommandConsoleTask, "CLI_TASK", CLI_TASK_SIZE, NULL, CLI_PRIORITY, &cliTaskHandle) != pdPASS) {
   321ea:	4951      	ldr	r1, [pc, #324]	; (32330 <StartTasks+0x164>)
   321ec:	4851      	ldr	r0, [pc, #324]	; (32334 <StartTasks+0x168>)
   321ee:	4b52      	ldr	r3, [pc, #328]	; (32338 <StartTasks+0x16c>)
   321f0:	9301      	str	r3, [sp, #4]
   321f2:	2304      	movs	r3, #4
   321f4:	9300      	str	r3, [sp, #0]
   321f6:	2300      	movs	r3, #0
   321f8:	2280      	movs	r2, #128	; 0x80
   321fa:	4c50      	ldr	r4, [pc, #320]	; (3233c <StartTasks+0x170>)
   321fc:	47a0      	blx	r4
   321fe:	0003      	movs	r3, r0
   32200:	2b01      	cmp	r3, #1
   32202:	d003      	beq.n	3220c <StartTasks+0x40>
		SerialConsoleWriteString("ERR: CLI task could not be initialized!\r\n");
   32204:	4b4e      	ldr	r3, [pc, #312]	; (32340 <StartTasks+0x174>)
   32206:	0018      	movs	r0, r3
   32208:	4b48      	ldr	r3, [pc, #288]	; (3232c <StartTasks+0x160>)
   3220a:	4798      	blx	r3
	}

	snprintf(bufferPrint, 64, "Heap after starting CLI: %d\r\n", xPortGetFreeHeapSize());
   3220c:	4b43      	ldr	r3, [pc, #268]	; (3231c <StartTasks+0x150>)
   3220e:	4798      	blx	r3
   32210:	0003      	movs	r3, r0
   32212:	4a4c      	ldr	r2, [pc, #304]	; (32344 <StartTasks+0x178>)
   32214:	4843      	ldr	r0, [pc, #268]	; (32324 <StartTasks+0x158>)
   32216:	2140      	movs	r1, #64	; 0x40
   32218:	4c43      	ldr	r4, [pc, #268]	; (32328 <StartTasks+0x15c>)
   3221a:	47a0      	blx	r4
	SerialConsoleWriteString(bufferPrint);
   3221c:	4b41      	ldr	r3, [pc, #260]	; (32324 <StartTasks+0x158>)
   3221e:	0018      	movs	r0, r3
   32220:	4b42      	ldr	r3, [pc, #264]	; (3232c <StartTasks+0x160>)
   32222:	4798      	blx	r3


	if (xTaskCreate(vWifiTask, "WIFI_TASK", WIFI_TASK_SIZE, NULL, WIFI_PRIORITY, &wifiTaskHandle) != pdPASS) {
   32224:	23fa      	movs	r3, #250	; 0xfa
   32226:	009a      	lsls	r2, r3, #2
   32228:	4947      	ldr	r1, [pc, #284]	; (32348 <StartTasks+0x17c>)
   3222a:	4848      	ldr	r0, [pc, #288]	; (3234c <StartTasks+0x180>)
   3222c:	4b48      	ldr	r3, [pc, #288]	; (32350 <StartTasks+0x184>)
   3222e:	9301      	str	r3, [sp, #4]
   32230:	2303      	movs	r3, #3
   32232:	9300      	str	r3, [sp, #0]
   32234:	2300      	movs	r3, #0
   32236:	4c41      	ldr	r4, [pc, #260]	; (3233c <StartTasks+0x170>)
   32238:	47a0      	blx	r4
   3223a:	0003      	movs	r3, r0
   3223c:	2b01      	cmp	r3, #1
   3223e:	d003      	beq.n	32248 <StartTasks+0x7c>
		SerialConsoleWriteString("ERR: WIFI task could not be initialized!\r\n");
   32240:	4b44      	ldr	r3, [pc, #272]	; (32354 <StartTasks+0x188>)
   32242:	0018      	movs	r0, r3
   32244:	4b39      	ldr	r3, [pc, #228]	; (3232c <StartTasks+0x160>)
   32246:	4798      	blx	r3
	}
	snprintf(bufferPrint, 64, "Heap after starting WIFI: %d\r\n", xPortGetFreeHeapSize());
   32248:	4b34      	ldr	r3, [pc, #208]	; (3231c <StartTasks+0x150>)
   3224a:	4798      	blx	r3
   3224c:	0003      	movs	r3, r0
   3224e:	4a42      	ldr	r2, [pc, #264]	; (32358 <StartTasks+0x18c>)
   32250:	4834      	ldr	r0, [pc, #208]	; (32324 <StartTasks+0x158>)
   32252:	2140      	movs	r1, #64	; 0x40
   32254:	4c34      	ldr	r4, [pc, #208]	; (32328 <StartTasks+0x15c>)
   32256:	47a0      	blx	r4
	SerialConsoleWriteString(bufferPrint);
   32258:	4b32      	ldr	r3, [pc, #200]	; (32324 <StartTasks+0x158>)
   3225a:	0018      	movs	r0, r3
   3225c:	4b33      	ldr	r3, [pc, #204]	; (3232c <StartTasks+0x160>)
   3225e:	4798      	blx	r3


	if(xTaskCreate(vUiHandlerTask, "UI Task", UI_TASK_SIZE, NULL, UI_TASK_PRIORITY, &uiTaskHandle) != pdPASS) {
   32260:	23c8      	movs	r3, #200	; 0xc8
   32262:	005a      	lsls	r2, r3, #1
   32264:	493d      	ldr	r1, [pc, #244]	; (3235c <StartTasks+0x190>)
   32266:	483e      	ldr	r0, [pc, #248]	; (32360 <StartTasks+0x194>)
   32268:	4b3e      	ldr	r3, [pc, #248]	; (32364 <StartTasks+0x198>)
   3226a:	9301      	str	r3, [sp, #4]
   3226c:	2302      	movs	r3, #2
   3226e:	9300      	str	r3, [sp, #0]
   32270:	2300      	movs	r3, #0
   32272:	4c32      	ldr	r4, [pc, #200]	; (3233c <StartTasks+0x170>)
   32274:	47a0      	blx	r4
   32276:	0003      	movs	r3, r0
   32278:	2b01      	cmp	r3, #1
   3227a:	d003      	beq.n	32284 <StartTasks+0xb8>
		SerialConsoleWriteString("ERR: UI task could not be initialized!\r\n");
   3227c:	4b3a      	ldr	r3, [pc, #232]	; (32368 <StartTasks+0x19c>)
   3227e:	0018      	movs	r0, r3
   32280:	4b2a      	ldr	r3, [pc, #168]	; (3232c <StartTasks+0x160>)
   32282:	4798      	blx	r3
	}

	snprintf(bufferPrint, 64, "Heap after starting UI Task: %d\r\n", xPortGetFreeHeapSize());
   32284:	4b25      	ldr	r3, [pc, #148]	; (3231c <StartTasks+0x150>)
   32286:	4798      	blx	r3
   32288:	0003      	movs	r3, r0
   3228a:	4a38      	ldr	r2, [pc, #224]	; (3236c <StartTasks+0x1a0>)
   3228c:	4825      	ldr	r0, [pc, #148]	; (32324 <StartTasks+0x158>)
   3228e:	2140      	movs	r1, #64	; 0x40
   32290:	4c25      	ldr	r4, [pc, #148]	; (32328 <StartTasks+0x15c>)
   32292:	47a0      	blx	r4
	SerialConsoleWriteString(bufferPrint);
   32294:	4b23      	ldr	r3, [pc, #140]	; (32324 <StartTasks+0x158>)
   32296:	0018      	movs	r0, r3
   32298:	4b24      	ldr	r3, [pc, #144]	; (3232c <StartTasks+0x160>)
   3229a:	4798      	blx	r3

	if(xTaskCreate(vControlHandlerTask, "Control Task", CONTROL_TASK_SIZE, NULL, CONTROL_TASK_PRIORITY, &controlTaskHandle) != pdPASS) {
   3229c:	2380      	movs	r3, #128	; 0x80
   3229e:	005a      	lsls	r2, r3, #1
   322a0:	4933      	ldr	r1, [pc, #204]	; (32370 <StartTasks+0x1a4>)
   322a2:	4834      	ldr	r0, [pc, #208]	; (32374 <StartTasks+0x1a8>)
   322a4:	4b34      	ldr	r3, [pc, #208]	; (32378 <StartTasks+0x1ac>)
   322a6:	9301      	str	r3, [sp, #4]
   322a8:	2304      	movs	r3, #4
   322aa:	9300      	str	r3, [sp, #0]
   322ac:	2300      	movs	r3, #0
   322ae:	4c23      	ldr	r4, [pc, #140]	; (3233c <StartTasks+0x170>)
   322b0:	47a0      	blx	r4
   322b2:	0003      	movs	r3, r0
   322b4:	2b01      	cmp	r3, #1
   322b6:	d003      	beq.n	322c0 <StartTasks+0xf4>
		SerialConsoleWriteString("ERR: Control task could not be initialized!\r\n");
   322b8:	4b30      	ldr	r3, [pc, #192]	; (3237c <StartTasks+0x1b0>)
   322ba:	0018      	movs	r0, r3
   322bc:	4b1b      	ldr	r3, [pc, #108]	; (3232c <StartTasks+0x160>)
   322be:	4798      	blx	r3
	}
	snprintf(bufferPrint, 64, "Heap after starting Control Task: %d\r\n", xPortGetFreeHeapSize());
   322c0:	4b16      	ldr	r3, [pc, #88]	; (3231c <StartTasks+0x150>)
   322c2:	4798      	blx	r3
   322c4:	0003      	movs	r3, r0
   322c6:	4a2e      	ldr	r2, [pc, #184]	; (32380 <StartTasks+0x1b4>)
   322c8:	4816      	ldr	r0, [pc, #88]	; (32324 <StartTasks+0x158>)
   322ca:	2140      	movs	r1, #64	; 0x40
   322cc:	4c16      	ldr	r4, [pc, #88]	; (32328 <StartTasks+0x15c>)
   322ce:	47a0      	blx	r4
	SerialConsoleWriteString(bufferPrint);
   322d0:	4b14      	ldr	r3, [pc, #80]	; (32324 <StartTasks+0x158>)
   322d2:	0018      	movs	r0, r3
   322d4:	4b15      	ldr	r3, [pc, #84]	; (3232c <StartTasks+0x160>)
   322d6:	4798      	blx	r3

	if(xTaskCreate(vLightReadTask, "Light Task", LIGHT_TASK_SIZE, NULL, LIGHTSENSOR_PRIORITY, &lightTaskHandle) != pdPASS) {
   322d8:	492a      	ldr	r1, [pc, #168]	; (32384 <StartTasks+0x1b8>)
   322da:	482b      	ldr	r0, [pc, #172]	; (32388 <StartTasks+0x1bc>)
   322dc:	4b2b      	ldr	r3, [pc, #172]	; (3238c <StartTasks+0x1c0>)
   322de:	9301      	str	r3, [sp, #4]
   322e0:	2301      	movs	r3, #1
   322e2:	9300      	str	r3, [sp, #0]
   322e4:	2300      	movs	r3, #0
   322e6:	22c8      	movs	r2, #200	; 0xc8
   322e8:	4c14      	ldr	r4, [pc, #80]	; (3233c <StartTasks+0x170>)
   322ea:	47a0      	blx	r4
   322ec:	0003      	movs	r3, r0
   322ee:	2b01      	cmp	r3, #1
   322f0:	d003      	beq.n	322fa <StartTasks+0x12e>
		SerialConsoleWriteString("ERR: Light task could not be initialized!\r\n");
   322f2:	4b27      	ldr	r3, [pc, #156]	; (32390 <StartTasks+0x1c4>)
   322f4:	0018      	movs	r0, r3
   322f6:	4b0d      	ldr	r3, [pc, #52]	; (3232c <StartTasks+0x160>)
   322f8:	4798      	blx	r3
	}
	snprintf(bufferPrint, 64, "Heap after starting Light Task: %d\r\n", xPortGetFreeHeapSize());
   322fa:	4b08      	ldr	r3, [pc, #32]	; (3231c <StartTasks+0x150>)
   322fc:	4798      	blx	r3
   322fe:	0003      	movs	r3, r0
   32300:	4a24      	ldr	r2, [pc, #144]	; (32394 <StartTasks+0x1c8>)
   32302:	4808      	ldr	r0, [pc, #32]	; (32324 <StartTasks+0x158>)
   32304:	2140      	movs	r1, #64	; 0x40
   32306:	4c08      	ldr	r4, [pc, #32]	; (32328 <StartTasks+0x15c>)
   32308:	47a0      	blx	r4
	SerialConsoleWriteString(bufferPrint);
   3230a:	4b06      	ldr	r3, [pc, #24]	; (32324 <StartTasks+0x158>)
   3230c:	0018      	movs	r0, r3
   3230e:	4b07      	ldr	r3, [pc, #28]	; (3232c <StartTasks+0x160>)
   32310:	4798      	blx	r3
}
   32312:	46c0      	nop			; (mov r8, r8)
   32314:	46bd      	mov	sp, r7
   32316:	b001      	add	sp, #4
   32318:	bd90      	pop	{r4, r7, pc}
   3231a:	46c0      	nop			; (mov r8, r8)
   3231c:	0001a0d1 	.word	0x0001a0d1
   32320:	0003a8c0 	.word	0x0003a8c0
   32324:	20005570 	.word	0x20005570
   32328:	000342dd 	.word	0x000342dd
   3232c:	0001db09 	.word	0x0001db09
   32330:	0003a8e4 	.word	0x0003a8e4
   32334:	00013b15 	.word	0x00013b15
   32338:	20004130 	.word	0x20004130
   3233c:	0001bb19 	.word	0x0001bb19
   32340:	0003a8f0 	.word	0x0003a8f0
   32344:	0003a91c 	.word	0x0003a91c
   32348:	0003a93c 	.word	0x0003a93c
   3234c:	00015961 	.word	0x00015961
   32350:	20004138 	.word	0x20004138
   32354:	0003a948 	.word	0x0003a948
   32358:	0003a974 	.word	0x0003a974
   3235c:	0003a994 	.word	0x0003a994
   32360:	000142a9 	.word	0x000142a9
   32364:	2000413c 	.word	0x2000413c
   32368:	0003a99c 	.word	0x0003a99c
   3236c:	0003a9c8 	.word	0x0003a9c8
   32370:	0003a9ec 	.word	0x0003a9ec
   32374:	00013f75 	.word	0x00013f75
   32378:	20004140 	.word	0x20004140
   3237c:	0003a9fc 	.word	0x0003a9fc
   32380:	0003aa2c 	.word	0x0003aa2c
   32384:	0003aa54 	.word	0x0003aa54
   32388:	000141f5 	.word	0x000141f5
   3238c:	20004144 	.word	0x20004144
   32390:	0003aa60 	.word	0x0003aa60
   32394:	0003aa8c 	.word	0x0003aa8c

00032398 <vApplicationMallocFailedHook>:
	//stdio_serial_init(GetUsartModule(), EDBG_CDC_MODULE, &usart_conf);
	//usart_enable(&cdc_uart_module);
}

void vApplicationMallocFailedHook(void)
{
   32398:	b580      	push	{r7, lr}
   3239a:	af00      	add	r7, sp, #0
	SerialConsoleWriteString("Error on memory allocation on FREERTOS!\r\n");
   3239c:	4b02      	ldr	r3, [pc, #8]	; (323a8 <vApplicationMallocFailedHook+0x10>)
   3239e:	0018      	movs	r0, r3
   323a0:	4b02      	ldr	r3, [pc, #8]	; (323ac <vApplicationMallocFailedHook+0x14>)
   323a2:	4798      	blx	r3
	while(1);
   323a4:	e7fe      	b.n	323a4 <vApplicationMallocFailedHook+0xc>
   323a6:	46c0      	nop			; (mov r8, r8)
   323a8:	0003aab4 	.word	0x0003aab4
   323ac:	0001db09 	.word	0x0001db09

000323b0 <vApplicationStackOverflowHook>:
}

void vApplicationStackOverflowHook(void)
{
   323b0:	b580      	push	{r7, lr}
   323b2:	af00      	add	r7, sp, #0
	SerialConsoleWriteString("Error on stack overflow on FREERTOS!\r\n");
   323b4:	4b02      	ldr	r3, [pc, #8]	; (323c0 <vApplicationStackOverflowHook+0x10>)
   323b6:	0018      	movs	r0, r3
   323b8:	4b02      	ldr	r3, [pc, #8]	; (323c4 <vApplicationStackOverflowHook+0x14>)
   323ba:	4798      	blx	r3
	while(1);
   323bc:	e7fe      	b.n	323bc <vApplicationStackOverflowHook+0xc>
   323be:	46c0      	nop			; (mov r8, r8)
   323c0:	0003aae0 	.word	0x0003aae0
   323c4:	0001db09 	.word	0x0001db09

000323c8 <__udivsi3>:
   323c8:	2200      	movs	r2, #0
   323ca:	0843      	lsrs	r3, r0, #1
   323cc:	428b      	cmp	r3, r1
   323ce:	d374      	bcc.n	324ba <__udivsi3+0xf2>
   323d0:	0903      	lsrs	r3, r0, #4
   323d2:	428b      	cmp	r3, r1
   323d4:	d35f      	bcc.n	32496 <__udivsi3+0xce>
   323d6:	0a03      	lsrs	r3, r0, #8
   323d8:	428b      	cmp	r3, r1
   323da:	d344      	bcc.n	32466 <__udivsi3+0x9e>
   323dc:	0b03      	lsrs	r3, r0, #12
   323de:	428b      	cmp	r3, r1
   323e0:	d328      	bcc.n	32434 <__udivsi3+0x6c>
   323e2:	0c03      	lsrs	r3, r0, #16
   323e4:	428b      	cmp	r3, r1
   323e6:	d30d      	bcc.n	32404 <__udivsi3+0x3c>
   323e8:	22ff      	movs	r2, #255	; 0xff
   323ea:	0209      	lsls	r1, r1, #8
   323ec:	ba12      	rev	r2, r2
   323ee:	0c03      	lsrs	r3, r0, #16
   323f0:	428b      	cmp	r3, r1
   323f2:	d302      	bcc.n	323fa <__udivsi3+0x32>
   323f4:	1212      	asrs	r2, r2, #8
   323f6:	0209      	lsls	r1, r1, #8
   323f8:	d065      	beq.n	324c6 <__udivsi3+0xfe>
   323fa:	0b03      	lsrs	r3, r0, #12
   323fc:	428b      	cmp	r3, r1
   323fe:	d319      	bcc.n	32434 <__udivsi3+0x6c>
   32400:	e000      	b.n	32404 <__udivsi3+0x3c>
   32402:	0a09      	lsrs	r1, r1, #8
   32404:	0bc3      	lsrs	r3, r0, #15
   32406:	428b      	cmp	r3, r1
   32408:	d301      	bcc.n	3240e <__udivsi3+0x46>
   3240a:	03cb      	lsls	r3, r1, #15
   3240c:	1ac0      	subs	r0, r0, r3
   3240e:	4152      	adcs	r2, r2
   32410:	0b83      	lsrs	r3, r0, #14
   32412:	428b      	cmp	r3, r1
   32414:	d301      	bcc.n	3241a <__udivsi3+0x52>
   32416:	038b      	lsls	r3, r1, #14
   32418:	1ac0      	subs	r0, r0, r3
   3241a:	4152      	adcs	r2, r2
   3241c:	0b43      	lsrs	r3, r0, #13
   3241e:	428b      	cmp	r3, r1
   32420:	d301      	bcc.n	32426 <__udivsi3+0x5e>
   32422:	034b      	lsls	r3, r1, #13
   32424:	1ac0      	subs	r0, r0, r3
   32426:	4152      	adcs	r2, r2
   32428:	0b03      	lsrs	r3, r0, #12
   3242a:	428b      	cmp	r3, r1
   3242c:	d301      	bcc.n	32432 <__udivsi3+0x6a>
   3242e:	030b      	lsls	r3, r1, #12
   32430:	1ac0      	subs	r0, r0, r3
   32432:	4152      	adcs	r2, r2
   32434:	0ac3      	lsrs	r3, r0, #11
   32436:	428b      	cmp	r3, r1
   32438:	d301      	bcc.n	3243e <__udivsi3+0x76>
   3243a:	02cb      	lsls	r3, r1, #11
   3243c:	1ac0      	subs	r0, r0, r3
   3243e:	4152      	adcs	r2, r2
   32440:	0a83      	lsrs	r3, r0, #10
   32442:	428b      	cmp	r3, r1
   32444:	d301      	bcc.n	3244a <__udivsi3+0x82>
   32446:	028b      	lsls	r3, r1, #10
   32448:	1ac0      	subs	r0, r0, r3
   3244a:	4152      	adcs	r2, r2
   3244c:	0a43      	lsrs	r3, r0, #9
   3244e:	428b      	cmp	r3, r1
   32450:	d301      	bcc.n	32456 <__udivsi3+0x8e>
   32452:	024b      	lsls	r3, r1, #9
   32454:	1ac0      	subs	r0, r0, r3
   32456:	4152      	adcs	r2, r2
   32458:	0a03      	lsrs	r3, r0, #8
   3245a:	428b      	cmp	r3, r1
   3245c:	d301      	bcc.n	32462 <__udivsi3+0x9a>
   3245e:	020b      	lsls	r3, r1, #8
   32460:	1ac0      	subs	r0, r0, r3
   32462:	4152      	adcs	r2, r2
   32464:	d2cd      	bcs.n	32402 <__udivsi3+0x3a>
   32466:	09c3      	lsrs	r3, r0, #7
   32468:	428b      	cmp	r3, r1
   3246a:	d301      	bcc.n	32470 <__udivsi3+0xa8>
   3246c:	01cb      	lsls	r3, r1, #7
   3246e:	1ac0      	subs	r0, r0, r3
   32470:	4152      	adcs	r2, r2
   32472:	0983      	lsrs	r3, r0, #6
   32474:	428b      	cmp	r3, r1
   32476:	d301      	bcc.n	3247c <__udivsi3+0xb4>
   32478:	018b      	lsls	r3, r1, #6
   3247a:	1ac0      	subs	r0, r0, r3
   3247c:	4152      	adcs	r2, r2
   3247e:	0943      	lsrs	r3, r0, #5
   32480:	428b      	cmp	r3, r1
   32482:	d301      	bcc.n	32488 <__udivsi3+0xc0>
   32484:	014b      	lsls	r3, r1, #5
   32486:	1ac0      	subs	r0, r0, r3
   32488:	4152      	adcs	r2, r2
   3248a:	0903      	lsrs	r3, r0, #4
   3248c:	428b      	cmp	r3, r1
   3248e:	d301      	bcc.n	32494 <__udivsi3+0xcc>
   32490:	010b      	lsls	r3, r1, #4
   32492:	1ac0      	subs	r0, r0, r3
   32494:	4152      	adcs	r2, r2
   32496:	08c3      	lsrs	r3, r0, #3
   32498:	428b      	cmp	r3, r1
   3249a:	d301      	bcc.n	324a0 <__udivsi3+0xd8>
   3249c:	00cb      	lsls	r3, r1, #3
   3249e:	1ac0      	subs	r0, r0, r3
   324a0:	4152      	adcs	r2, r2
   324a2:	0883      	lsrs	r3, r0, #2
   324a4:	428b      	cmp	r3, r1
   324a6:	d301      	bcc.n	324ac <__udivsi3+0xe4>
   324a8:	008b      	lsls	r3, r1, #2
   324aa:	1ac0      	subs	r0, r0, r3
   324ac:	4152      	adcs	r2, r2
   324ae:	0843      	lsrs	r3, r0, #1
   324b0:	428b      	cmp	r3, r1
   324b2:	d301      	bcc.n	324b8 <__udivsi3+0xf0>
   324b4:	004b      	lsls	r3, r1, #1
   324b6:	1ac0      	subs	r0, r0, r3
   324b8:	4152      	adcs	r2, r2
   324ba:	1a41      	subs	r1, r0, r1
   324bc:	d200      	bcs.n	324c0 <__udivsi3+0xf8>
   324be:	4601      	mov	r1, r0
   324c0:	4152      	adcs	r2, r2
   324c2:	4610      	mov	r0, r2
   324c4:	4770      	bx	lr
   324c6:	e7ff      	b.n	324c8 <__udivsi3+0x100>
   324c8:	b501      	push	{r0, lr}
   324ca:	2000      	movs	r0, #0
   324cc:	f000 f8f0 	bl	326b0 <__aeabi_idiv0>
   324d0:	bd02      	pop	{r1, pc}
   324d2:	46c0      	nop			; (mov r8, r8)

000324d4 <__aeabi_uidivmod>:
   324d4:	2900      	cmp	r1, #0
   324d6:	d0f7      	beq.n	324c8 <__udivsi3+0x100>
   324d8:	e776      	b.n	323c8 <__udivsi3>
   324da:	4770      	bx	lr

000324dc <__divsi3>:
   324dc:	4603      	mov	r3, r0
   324de:	430b      	orrs	r3, r1
   324e0:	d47f      	bmi.n	325e2 <__divsi3+0x106>
   324e2:	2200      	movs	r2, #0
   324e4:	0843      	lsrs	r3, r0, #1
   324e6:	428b      	cmp	r3, r1
   324e8:	d374      	bcc.n	325d4 <__divsi3+0xf8>
   324ea:	0903      	lsrs	r3, r0, #4
   324ec:	428b      	cmp	r3, r1
   324ee:	d35f      	bcc.n	325b0 <__divsi3+0xd4>
   324f0:	0a03      	lsrs	r3, r0, #8
   324f2:	428b      	cmp	r3, r1
   324f4:	d344      	bcc.n	32580 <__divsi3+0xa4>
   324f6:	0b03      	lsrs	r3, r0, #12
   324f8:	428b      	cmp	r3, r1
   324fa:	d328      	bcc.n	3254e <__divsi3+0x72>
   324fc:	0c03      	lsrs	r3, r0, #16
   324fe:	428b      	cmp	r3, r1
   32500:	d30d      	bcc.n	3251e <__divsi3+0x42>
   32502:	22ff      	movs	r2, #255	; 0xff
   32504:	0209      	lsls	r1, r1, #8
   32506:	ba12      	rev	r2, r2
   32508:	0c03      	lsrs	r3, r0, #16
   3250a:	428b      	cmp	r3, r1
   3250c:	d302      	bcc.n	32514 <__divsi3+0x38>
   3250e:	1212      	asrs	r2, r2, #8
   32510:	0209      	lsls	r1, r1, #8
   32512:	d065      	beq.n	325e0 <__divsi3+0x104>
   32514:	0b03      	lsrs	r3, r0, #12
   32516:	428b      	cmp	r3, r1
   32518:	d319      	bcc.n	3254e <__divsi3+0x72>
   3251a:	e000      	b.n	3251e <__divsi3+0x42>
   3251c:	0a09      	lsrs	r1, r1, #8
   3251e:	0bc3      	lsrs	r3, r0, #15
   32520:	428b      	cmp	r3, r1
   32522:	d301      	bcc.n	32528 <__divsi3+0x4c>
   32524:	03cb      	lsls	r3, r1, #15
   32526:	1ac0      	subs	r0, r0, r3
   32528:	4152      	adcs	r2, r2
   3252a:	0b83      	lsrs	r3, r0, #14
   3252c:	428b      	cmp	r3, r1
   3252e:	d301      	bcc.n	32534 <__divsi3+0x58>
   32530:	038b      	lsls	r3, r1, #14
   32532:	1ac0      	subs	r0, r0, r3
   32534:	4152      	adcs	r2, r2
   32536:	0b43      	lsrs	r3, r0, #13
   32538:	428b      	cmp	r3, r1
   3253a:	d301      	bcc.n	32540 <__divsi3+0x64>
   3253c:	034b      	lsls	r3, r1, #13
   3253e:	1ac0      	subs	r0, r0, r3
   32540:	4152      	adcs	r2, r2
   32542:	0b03      	lsrs	r3, r0, #12
   32544:	428b      	cmp	r3, r1
   32546:	d301      	bcc.n	3254c <__divsi3+0x70>
   32548:	030b      	lsls	r3, r1, #12
   3254a:	1ac0      	subs	r0, r0, r3
   3254c:	4152      	adcs	r2, r2
   3254e:	0ac3      	lsrs	r3, r0, #11
   32550:	428b      	cmp	r3, r1
   32552:	d301      	bcc.n	32558 <__divsi3+0x7c>
   32554:	02cb      	lsls	r3, r1, #11
   32556:	1ac0      	subs	r0, r0, r3
   32558:	4152      	adcs	r2, r2
   3255a:	0a83      	lsrs	r3, r0, #10
   3255c:	428b      	cmp	r3, r1
   3255e:	d301      	bcc.n	32564 <__divsi3+0x88>
   32560:	028b      	lsls	r3, r1, #10
   32562:	1ac0      	subs	r0, r0, r3
   32564:	4152      	adcs	r2, r2
   32566:	0a43      	lsrs	r3, r0, #9
   32568:	428b      	cmp	r3, r1
   3256a:	d301      	bcc.n	32570 <__divsi3+0x94>
   3256c:	024b      	lsls	r3, r1, #9
   3256e:	1ac0      	subs	r0, r0, r3
   32570:	4152      	adcs	r2, r2
   32572:	0a03      	lsrs	r3, r0, #8
   32574:	428b      	cmp	r3, r1
   32576:	d301      	bcc.n	3257c <__divsi3+0xa0>
   32578:	020b      	lsls	r3, r1, #8
   3257a:	1ac0      	subs	r0, r0, r3
   3257c:	4152      	adcs	r2, r2
   3257e:	d2cd      	bcs.n	3251c <__divsi3+0x40>
   32580:	09c3      	lsrs	r3, r0, #7
   32582:	428b      	cmp	r3, r1
   32584:	d301      	bcc.n	3258a <__divsi3+0xae>
   32586:	01cb      	lsls	r3, r1, #7
   32588:	1ac0      	subs	r0, r0, r3
   3258a:	4152      	adcs	r2, r2
   3258c:	0983      	lsrs	r3, r0, #6
   3258e:	428b      	cmp	r3, r1
   32590:	d301      	bcc.n	32596 <__divsi3+0xba>
   32592:	018b      	lsls	r3, r1, #6
   32594:	1ac0      	subs	r0, r0, r3
   32596:	4152      	adcs	r2, r2
   32598:	0943      	lsrs	r3, r0, #5
   3259a:	428b      	cmp	r3, r1
   3259c:	d301      	bcc.n	325a2 <__divsi3+0xc6>
   3259e:	014b      	lsls	r3, r1, #5
   325a0:	1ac0      	subs	r0, r0, r3
   325a2:	4152      	adcs	r2, r2
   325a4:	0903      	lsrs	r3, r0, #4
   325a6:	428b      	cmp	r3, r1
   325a8:	d301      	bcc.n	325ae <__divsi3+0xd2>
   325aa:	010b      	lsls	r3, r1, #4
   325ac:	1ac0      	subs	r0, r0, r3
   325ae:	4152      	adcs	r2, r2
   325b0:	08c3      	lsrs	r3, r0, #3
   325b2:	428b      	cmp	r3, r1
   325b4:	d301      	bcc.n	325ba <__divsi3+0xde>
   325b6:	00cb      	lsls	r3, r1, #3
   325b8:	1ac0      	subs	r0, r0, r3
   325ba:	4152      	adcs	r2, r2
   325bc:	0883      	lsrs	r3, r0, #2
   325be:	428b      	cmp	r3, r1
   325c0:	d301      	bcc.n	325c6 <__divsi3+0xea>
   325c2:	008b      	lsls	r3, r1, #2
   325c4:	1ac0      	subs	r0, r0, r3
   325c6:	4152      	adcs	r2, r2
   325c8:	0843      	lsrs	r3, r0, #1
   325ca:	428b      	cmp	r3, r1
   325cc:	d301      	bcc.n	325d2 <__divsi3+0xf6>
   325ce:	004b      	lsls	r3, r1, #1
   325d0:	1ac0      	subs	r0, r0, r3
   325d2:	4152      	adcs	r2, r2
   325d4:	1a41      	subs	r1, r0, r1
   325d6:	d200      	bcs.n	325da <__divsi3+0xfe>
   325d8:	4601      	mov	r1, r0
   325da:	4152      	adcs	r2, r2
   325dc:	4610      	mov	r0, r2
   325de:	4770      	bx	lr
   325e0:	e05d      	b.n	3269e <__divsi3+0x1c2>
   325e2:	0fca      	lsrs	r2, r1, #31
   325e4:	d000      	beq.n	325e8 <__divsi3+0x10c>
   325e6:	4249      	negs	r1, r1
   325e8:	1003      	asrs	r3, r0, #32
   325ea:	d300      	bcc.n	325ee <__divsi3+0x112>
   325ec:	4240      	negs	r0, r0
   325ee:	4053      	eors	r3, r2
   325f0:	2200      	movs	r2, #0
   325f2:	469c      	mov	ip, r3
   325f4:	0903      	lsrs	r3, r0, #4
   325f6:	428b      	cmp	r3, r1
   325f8:	d32d      	bcc.n	32656 <__divsi3+0x17a>
   325fa:	0a03      	lsrs	r3, r0, #8
   325fc:	428b      	cmp	r3, r1
   325fe:	d312      	bcc.n	32626 <__divsi3+0x14a>
   32600:	22fc      	movs	r2, #252	; 0xfc
   32602:	0189      	lsls	r1, r1, #6
   32604:	ba12      	rev	r2, r2
   32606:	0a03      	lsrs	r3, r0, #8
   32608:	428b      	cmp	r3, r1
   3260a:	d30c      	bcc.n	32626 <__divsi3+0x14a>
   3260c:	0189      	lsls	r1, r1, #6
   3260e:	1192      	asrs	r2, r2, #6
   32610:	428b      	cmp	r3, r1
   32612:	d308      	bcc.n	32626 <__divsi3+0x14a>
   32614:	0189      	lsls	r1, r1, #6
   32616:	1192      	asrs	r2, r2, #6
   32618:	428b      	cmp	r3, r1
   3261a:	d304      	bcc.n	32626 <__divsi3+0x14a>
   3261c:	0189      	lsls	r1, r1, #6
   3261e:	d03a      	beq.n	32696 <__divsi3+0x1ba>
   32620:	1192      	asrs	r2, r2, #6
   32622:	e000      	b.n	32626 <__divsi3+0x14a>
   32624:	0989      	lsrs	r1, r1, #6
   32626:	09c3      	lsrs	r3, r0, #7
   32628:	428b      	cmp	r3, r1
   3262a:	d301      	bcc.n	32630 <__divsi3+0x154>
   3262c:	01cb      	lsls	r3, r1, #7
   3262e:	1ac0      	subs	r0, r0, r3
   32630:	4152      	adcs	r2, r2
   32632:	0983      	lsrs	r3, r0, #6
   32634:	428b      	cmp	r3, r1
   32636:	d301      	bcc.n	3263c <__divsi3+0x160>
   32638:	018b      	lsls	r3, r1, #6
   3263a:	1ac0      	subs	r0, r0, r3
   3263c:	4152      	adcs	r2, r2
   3263e:	0943      	lsrs	r3, r0, #5
   32640:	428b      	cmp	r3, r1
   32642:	d301      	bcc.n	32648 <__divsi3+0x16c>
   32644:	014b      	lsls	r3, r1, #5
   32646:	1ac0      	subs	r0, r0, r3
   32648:	4152      	adcs	r2, r2
   3264a:	0903      	lsrs	r3, r0, #4
   3264c:	428b      	cmp	r3, r1
   3264e:	d301      	bcc.n	32654 <__divsi3+0x178>
   32650:	010b      	lsls	r3, r1, #4
   32652:	1ac0      	subs	r0, r0, r3
   32654:	4152      	adcs	r2, r2
   32656:	08c3      	lsrs	r3, r0, #3
   32658:	428b      	cmp	r3, r1
   3265a:	d301      	bcc.n	32660 <__divsi3+0x184>
   3265c:	00cb      	lsls	r3, r1, #3
   3265e:	1ac0      	subs	r0, r0, r3
   32660:	4152      	adcs	r2, r2
   32662:	0883      	lsrs	r3, r0, #2
   32664:	428b      	cmp	r3, r1
   32666:	d301      	bcc.n	3266c <__divsi3+0x190>
   32668:	008b      	lsls	r3, r1, #2
   3266a:	1ac0      	subs	r0, r0, r3
   3266c:	4152      	adcs	r2, r2
   3266e:	d2d9      	bcs.n	32624 <__divsi3+0x148>
   32670:	0843      	lsrs	r3, r0, #1
   32672:	428b      	cmp	r3, r1
   32674:	d301      	bcc.n	3267a <__divsi3+0x19e>
   32676:	004b      	lsls	r3, r1, #1
   32678:	1ac0      	subs	r0, r0, r3
   3267a:	4152      	adcs	r2, r2
   3267c:	1a41      	subs	r1, r0, r1
   3267e:	d200      	bcs.n	32682 <__divsi3+0x1a6>
   32680:	4601      	mov	r1, r0
   32682:	4663      	mov	r3, ip
   32684:	4152      	adcs	r2, r2
   32686:	105b      	asrs	r3, r3, #1
   32688:	4610      	mov	r0, r2
   3268a:	d301      	bcc.n	32690 <__divsi3+0x1b4>
   3268c:	4240      	negs	r0, r0
   3268e:	2b00      	cmp	r3, #0
   32690:	d500      	bpl.n	32694 <__divsi3+0x1b8>
   32692:	4249      	negs	r1, r1
   32694:	4770      	bx	lr
   32696:	4663      	mov	r3, ip
   32698:	105b      	asrs	r3, r3, #1
   3269a:	d300      	bcc.n	3269e <__divsi3+0x1c2>
   3269c:	4240      	negs	r0, r0
   3269e:	b501      	push	{r0, lr}
   326a0:	2000      	movs	r0, #0
   326a2:	f000 f805 	bl	326b0 <__aeabi_idiv0>
   326a6:	bd02      	pop	{r1, pc}

000326a8 <__aeabi_idivmod>:
   326a8:	2900      	cmp	r1, #0
   326aa:	d0f8      	beq.n	3269e <__divsi3+0x1c2>
   326ac:	e716      	b.n	324dc <__divsi3>
   326ae:	4770      	bx	lr

000326b0 <__aeabi_idiv0>:
   326b0:	4770      	bx	lr
   326b2:	46c0      	nop			; (mov r8, r8)

000326b4 <__aeabi_lmul>:
   326b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   326b6:	46ce      	mov	lr, r9
   326b8:	4647      	mov	r7, r8
   326ba:	0415      	lsls	r5, r2, #16
   326bc:	0c2d      	lsrs	r5, r5, #16
   326be:	002e      	movs	r6, r5
   326c0:	b580      	push	{r7, lr}
   326c2:	0407      	lsls	r7, r0, #16
   326c4:	0c14      	lsrs	r4, r2, #16
   326c6:	0c3f      	lsrs	r7, r7, #16
   326c8:	4699      	mov	r9, r3
   326ca:	0c03      	lsrs	r3, r0, #16
   326cc:	437e      	muls	r6, r7
   326ce:	435d      	muls	r5, r3
   326d0:	4367      	muls	r7, r4
   326d2:	4363      	muls	r3, r4
   326d4:	197f      	adds	r7, r7, r5
   326d6:	0c34      	lsrs	r4, r6, #16
   326d8:	19e4      	adds	r4, r4, r7
   326da:	469c      	mov	ip, r3
   326dc:	42a5      	cmp	r5, r4
   326de:	d903      	bls.n	326e8 <__aeabi_lmul+0x34>
   326e0:	2380      	movs	r3, #128	; 0x80
   326e2:	025b      	lsls	r3, r3, #9
   326e4:	4698      	mov	r8, r3
   326e6:	44c4      	add	ip, r8
   326e8:	464b      	mov	r3, r9
   326ea:	4351      	muls	r1, r2
   326ec:	4343      	muls	r3, r0
   326ee:	0436      	lsls	r6, r6, #16
   326f0:	0c36      	lsrs	r6, r6, #16
   326f2:	0c25      	lsrs	r5, r4, #16
   326f4:	0424      	lsls	r4, r4, #16
   326f6:	4465      	add	r5, ip
   326f8:	19a4      	adds	r4, r4, r6
   326fa:	1859      	adds	r1, r3, r1
   326fc:	1949      	adds	r1, r1, r5
   326fe:	0020      	movs	r0, r4
   32700:	bc0c      	pop	{r2, r3}
   32702:	4690      	mov	r8, r2
   32704:	4699      	mov	r9, r3
   32706:	bdf0      	pop	{r4, r5, r6, r7, pc}

00032708 <__aeabi_dadd>:
   32708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3270a:	4645      	mov	r5, r8
   3270c:	46de      	mov	lr, fp
   3270e:	4657      	mov	r7, sl
   32710:	464e      	mov	r6, r9
   32712:	030c      	lsls	r4, r1, #12
   32714:	b5e0      	push	{r5, r6, r7, lr}
   32716:	004e      	lsls	r6, r1, #1
   32718:	0fc9      	lsrs	r1, r1, #31
   3271a:	4688      	mov	r8, r1
   3271c:	000d      	movs	r5, r1
   3271e:	0a61      	lsrs	r1, r4, #9
   32720:	0f44      	lsrs	r4, r0, #29
   32722:	430c      	orrs	r4, r1
   32724:	00c7      	lsls	r7, r0, #3
   32726:	0319      	lsls	r1, r3, #12
   32728:	0058      	lsls	r0, r3, #1
   3272a:	0fdb      	lsrs	r3, r3, #31
   3272c:	469b      	mov	fp, r3
   3272e:	0a4b      	lsrs	r3, r1, #9
   32730:	0f51      	lsrs	r1, r2, #29
   32732:	430b      	orrs	r3, r1
   32734:	0d76      	lsrs	r6, r6, #21
   32736:	0d40      	lsrs	r0, r0, #21
   32738:	0019      	movs	r1, r3
   3273a:	00d2      	lsls	r2, r2, #3
   3273c:	45d8      	cmp	r8, fp
   3273e:	d100      	bne.n	32742 <__aeabi_dadd+0x3a>
   32740:	e0ae      	b.n	328a0 <__aeabi_dadd+0x198>
   32742:	1a35      	subs	r5, r6, r0
   32744:	2d00      	cmp	r5, #0
   32746:	dc00      	bgt.n	3274a <__aeabi_dadd+0x42>
   32748:	e0f6      	b.n	32938 <__aeabi_dadd+0x230>
   3274a:	2800      	cmp	r0, #0
   3274c:	d10f      	bne.n	3276e <__aeabi_dadd+0x66>
   3274e:	4313      	orrs	r3, r2
   32750:	d100      	bne.n	32754 <__aeabi_dadd+0x4c>
   32752:	e0db      	b.n	3290c <__aeabi_dadd+0x204>
   32754:	1e6b      	subs	r3, r5, #1
   32756:	2b00      	cmp	r3, #0
   32758:	d000      	beq.n	3275c <__aeabi_dadd+0x54>
   3275a:	e137      	b.n	329cc <__aeabi_dadd+0x2c4>
   3275c:	1aba      	subs	r2, r7, r2
   3275e:	4297      	cmp	r7, r2
   32760:	41bf      	sbcs	r7, r7
   32762:	1a64      	subs	r4, r4, r1
   32764:	427f      	negs	r7, r7
   32766:	1be4      	subs	r4, r4, r7
   32768:	2601      	movs	r6, #1
   3276a:	0017      	movs	r7, r2
   3276c:	e024      	b.n	327b8 <__aeabi_dadd+0xb0>
   3276e:	4bc6      	ldr	r3, [pc, #792]	; (32a88 <__aeabi_dadd+0x380>)
   32770:	429e      	cmp	r6, r3
   32772:	d04d      	beq.n	32810 <__aeabi_dadd+0x108>
   32774:	2380      	movs	r3, #128	; 0x80
   32776:	041b      	lsls	r3, r3, #16
   32778:	4319      	orrs	r1, r3
   3277a:	2d38      	cmp	r5, #56	; 0x38
   3277c:	dd00      	ble.n	32780 <__aeabi_dadd+0x78>
   3277e:	e107      	b.n	32990 <__aeabi_dadd+0x288>
   32780:	2d1f      	cmp	r5, #31
   32782:	dd00      	ble.n	32786 <__aeabi_dadd+0x7e>
   32784:	e138      	b.n	329f8 <__aeabi_dadd+0x2f0>
   32786:	2020      	movs	r0, #32
   32788:	1b43      	subs	r3, r0, r5
   3278a:	469a      	mov	sl, r3
   3278c:	000b      	movs	r3, r1
   3278e:	4650      	mov	r0, sl
   32790:	4083      	lsls	r3, r0
   32792:	4699      	mov	r9, r3
   32794:	0013      	movs	r3, r2
   32796:	4648      	mov	r0, r9
   32798:	40eb      	lsrs	r3, r5
   3279a:	4318      	orrs	r0, r3
   3279c:	0003      	movs	r3, r0
   3279e:	4650      	mov	r0, sl
   327a0:	4082      	lsls	r2, r0
   327a2:	1e50      	subs	r0, r2, #1
   327a4:	4182      	sbcs	r2, r0
   327a6:	40e9      	lsrs	r1, r5
   327a8:	431a      	orrs	r2, r3
   327aa:	1aba      	subs	r2, r7, r2
   327ac:	1a61      	subs	r1, r4, r1
   327ae:	4297      	cmp	r7, r2
   327b0:	41a4      	sbcs	r4, r4
   327b2:	0017      	movs	r7, r2
   327b4:	4264      	negs	r4, r4
   327b6:	1b0c      	subs	r4, r1, r4
   327b8:	0223      	lsls	r3, r4, #8
   327ba:	d562      	bpl.n	32882 <__aeabi_dadd+0x17a>
   327bc:	0264      	lsls	r4, r4, #9
   327be:	0a65      	lsrs	r5, r4, #9
   327c0:	2d00      	cmp	r5, #0
   327c2:	d100      	bne.n	327c6 <__aeabi_dadd+0xbe>
   327c4:	e0df      	b.n	32986 <__aeabi_dadd+0x27e>
   327c6:	0028      	movs	r0, r5
   327c8:	f001 fbe4 	bl	33f94 <__clzsi2>
   327cc:	0003      	movs	r3, r0
   327ce:	3b08      	subs	r3, #8
   327d0:	2b1f      	cmp	r3, #31
   327d2:	dd00      	ble.n	327d6 <__aeabi_dadd+0xce>
   327d4:	e0d2      	b.n	3297c <__aeabi_dadd+0x274>
   327d6:	2220      	movs	r2, #32
   327d8:	003c      	movs	r4, r7
   327da:	1ad2      	subs	r2, r2, r3
   327dc:	409d      	lsls	r5, r3
   327de:	40d4      	lsrs	r4, r2
   327e0:	409f      	lsls	r7, r3
   327e2:	4325      	orrs	r5, r4
   327e4:	429e      	cmp	r6, r3
   327e6:	dd00      	ble.n	327ea <__aeabi_dadd+0xe2>
   327e8:	e0c4      	b.n	32974 <__aeabi_dadd+0x26c>
   327ea:	1b9e      	subs	r6, r3, r6
   327ec:	1c73      	adds	r3, r6, #1
   327ee:	2b1f      	cmp	r3, #31
   327f0:	dd00      	ble.n	327f4 <__aeabi_dadd+0xec>
   327f2:	e0f1      	b.n	329d8 <__aeabi_dadd+0x2d0>
   327f4:	2220      	movs	r2, #32
   327f6:	0038      	movs	r0, r7
   327f8:	0029      	movs	r1, r5
   327fa:	1ad2      	subs	r2, r2, r3
   327fc:	40d8      	lsrs	r0, r3
   327fe:	4091      	lsls	r1, r2
   32800:	4097      	lsls	r7, r2
   32802:	002c      	movs	r4, r5
   32804:	4301      	orrs	r1, r0
   32806:	1e78      	subs	r0, r7, #1
   32808:	4187      	sbcs	r7, r0
   3280a:	40dc      	lsrs	r4, r3
   3280c:	2600      	movs	r6, #0
   3280e:	430f      	orrs	r7, r1
   32810:	077b      	lsls	r3, r7, #29
   32812:	d009      	beq.n	32828 <__aeabi_dadd+0x120>
   32814:	230f      	movs	r3, #15
   32816:	403b      	ands	r3, r7
   32818:	2b04      	cmp	r3, #4
   3281a:	d005      	beq.n	32828 <__aeabi_dadd+0x120>
   3281c:	1d3b      	adds	r3, r7, #4
   3281e:	42bb      	cmp	r3, r7
   32820:	41bf      	sbcs	r7, r7
   32822:	427f      	negs	r7, r7
   32824:	19e4      	adds	r4, r4, r7
   32826:	001f      	movs	r7, r3
   32828:	0223      	lsls	r3, r4, #8
   3282a:	d52c      	bpl.n	32886 <__aeabi_dadd+0x17e>
   3282c:	4b96      	ldr	r3, [pc, #600]	; (32a88 <__aeabi_dadd+0x380>)
   3282e:	3601      	adds	r6, #1
   32830:	429e      	cmp	r6, r3
   32832:	d100      	bne.n	32836 <__aeabi_dadd+0x12e>
   32834:	e09a      	b.n	3296c <__aeabi_dadd+0x264>
   32836:	4645      	mov	r5, r8
   32838:	4b94      	ldr	r3, [pc, #592]	; (32a8c <__aeabi_dadd+0x384>)
   3283a:	08ff      	lsrs	r7, r7, #3
   3283c:	401c      	ands	r4, r3
   3283e:	0760      	lsls	r0, r4, #29
   32840:	0576      	lsls	r6, r6, #21
   32842:	0264      	lsls	r4, r4, #9
   32844:	4307      	orrs	r7, r0
   32846:	0b24      	lsrs	r4, r4, #12
   32848:	0d76      	lsrs	r6, r6, #21
   3284a:	2100      	movs	r1, #0
   3284c:	0324      	lsls	r4, r4, #12
   3284e:	0b23      	lsrs	r3, r4, #12
   32850:	0d0c      	lsrs	r4, r1, #20
   32852:	4a8f      	ldr	r2, [pc, #572]	; (32a90 <__aeabi_dadd+0x388>)
   32854:	0524      	lsls	r4, r4, #20
   32856:	431c      	orrs	r4, r3
   32858:	4014      	ands	r4, r2
   3285a:	0533      	lsls	r3, r6, #20
   3285c:	4323      	orrs	r3, r4
   3285e:	005b      	lsls	r3, r3, #1
   32860:	07ed      	lsls	r5, r5, #31
   32862:	085b      	lsrs	r3, r3, #1
   32864:	432b      	orrs	r3, r5
   32866:	0038      	movs	r0, r7
   32868:	0019      	movs	r1, r3
   3286a:	bc3c      	pop	{r2, r3, r4, r5}
   3286c:	4690      	mov	r8, r2
   3286e:	4699      	mov	r9, r3
   32870:	46a2      	mov	sl, r4
   32872:	46ab      	mov	fp, r5
   32874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   32876:	4664      	mov	r4, ip
   32878:	4304      	orrs	r4, r0
   3287a:	d100      	bne.n	3287e <__aeabi_dadd+0x176>
   3287c:	e211      	b.n	32ca2 <__aeabi_dadd+0x59a>
   3287e:	0004      	movs	r4, r0
   32880:	4667      	mov	r7, ip
   32882:	077b      	lsls	r3, r7, #29
   32884:	d1c6      	bne.n	32814 <__aeabi_dadd+0x10c>
   32886:	4645      	mov	r5, r8
   32888:	0760      	lsls	r0, r4, #29
   3288a:	08ff      	lsrs	r7, r7, #3
   3288c:	4307      	orrs	r7, r0
   3288e:	08e4      	lsrs	r4, r4, #3
   32890:	4b7d      	ldr	r3, [pc, #500]	; (32a88 <__aeabi_dadd+0x380>)
   32892:	429e      	cmp	r6, r3
   32894:	d030      	beq.n	328f8 <__aeabi_dadd+0x1f0>
   32896:	0324      	lsls	r4, r4, #12
   32898:	0576      	lsls	r6, r6, #21
   3289a:	0b24      	lsrs	r4, r4, #12
   3289c:	0d76      	lsrs	r6, r6, #21
   3289e:	e7d4      	b.n	3284a <__aeabi_dadd+0x142>
   328a0:	1a33      	subs	r3, r6, r0
   328a2:	469a      	mov	sl, r3
   328a4:	2b00      	cmp	r3, #0
   328a6:	dd78      	ble.n	3299a <__aeabi_dadd+0x292>
   328a8:	2800      	cmp	r0, #0
   328aa:	d031      	beq.n	32910 <__aeabi_dadd+0x208>
   328ac:	4876      	ldr	r0, [pc, #472]	; (32a88 <__aeabi_dadd+0x380>)
   328ae:	4286      	cmp	r6, r0
   328b0:	d0ae      	beq.n	32810 <__aeabi_dadd+0x108>
   328b2:	2080      	movs	r0, #128	; 0x80
   328b4:	0400      	lsls	r0, r0, #16
   328b6:	4301      	orrs	r1, r0
   328b8:	4653      	mov	r3, sl
   328ba:	2b38      	cmp	r3, #56	; 0x38
   328bc:	dc00      	bgt.n	328c0 <__aeabi_dadd+0x1b8>
   328be:	e0e9      	b.n	32a94 <__aeabi_dadd+0x38c>
   328c0:	430a      	orrs	r2, r1
   328c2:	1e51      	subs	r1, r2, #1
   328c4:	418a      	sbcs	r2, r1
   328c6:	2100      	movs	r1, #0
   328c8:	19d2      	adds	r2, r2, r7
   328ca:	42ba      	cmp	r2, r7
   328cc:	41bf      	sbcs	r7, r7
   328ce:	1909      	adds	r1, r1, r4
   328d0:	427c      	negs	r4, r7
   328d2:	0017      	movs	r7, r2
   328d4:	190c      	adds	r4, r1, r4
   328d6:	0223      	lsls	r3, r4, #8
   328d8:	d5d3      	bpl.n	32882 <__aeabi_dadd+0x17a>
   328da:	4b6b      	ldr	r3, [pc, #428]	; (32a88 <__aeabi_dadd+0x380>)
   328dc:	3601      	adds	r6, #1
   328de:	429e      	cmp	r6, r3
   328e0:	d100      	bne.n	328e4 <__aeabi_dadd+0x1dc>
   328e2:	e13a      	b.n	32b5a <__aeabi_dadd+0x452>
   328e4:	2001      	movs	r0, #1
   328e6:	4b69      	ldr	r3, [pc, #420]	; (32a8c <__aeabi_dadd+0x384>)
   328e8:	401c      	ands	r4, r3
   328ea:	087b      	lsrs	r3, r7, #1
   328ec:	4007      	ands	r7, r0
   328ee:	431f      	orrs	r7, r3
   328f0:	07e0      	lsls	r0, r4, #31
   328f2:	4307      	orrs	r7, r0
   328f4:	0864      	lsrs	r4, r4, #1
   328f6:	e78b      	b.n	32810 <__aeabi_dadd+0x108>
   328f8:	0023      	movs	r3, r4
   328fa:	433b      	orrs	r3, r7
   328fc:	d100      	bne.n	32900 <__aeabi_dadd+0x1f8>
   328fe:	e1cb      	b.n	32c98 <__aeabi_dadd+0x590>
   32900:	2280      	movs	r2, #128	; 0x80
   32902:	0312      	lsls	r2, r2, #12
   32904:	4314      	orrs	r4, r2
   32906:	0324      	lsls	r4, r4, #12
   32908:	0b24      	lsrs	r4, r4, #12
   3290a:	e79e      	b.n	3284a <__aeabi_dadd+0x142>
   3290c:	002e      	movs	r6, r5
   3290e:	e77f      	b.n	32810 <__aeabi_dadd+0x108>
   32910:	0008      	movs	r0, r1
   32912:	4310      	orrs	r0, r2
   32914:	d100      	bne.n	32918 <__aeabi_dadd+0x210>
   32916:	e0b4      	b.n	32a82 <__aeabi_dadd+0x37a>
   32918:	1e58      	subs	r0, r3, #1
   3291a:	2800      	cmp	r0, #0
   3291c:	d000      	beq.n	32920 <__aeabi_dadd+0x218>
   3291e:	e0de      	b.n	32ade <__aeabi_dadd+0x3d6>
   32920:	18ba      	adds	r2, r7, r2
   32922:	42ba      	cmp	r2, r7
   32924:	419b      	sbcs	r3, r3
   32926:	1864      	adds	r4, r4, r1
   32928:	425b      	negs	r3, r3
   3292a:	18e4      	adds	r4, r4, r3
   3292c:	0017      	movs	r7, r2
   3292e:	2601      	movs	r6, #1
   32930:	0223      	lsls	r3, r4, #8
   32932:	d5a6      	bpl.n	32882 <__aeabi_dadd+0x17a>
   32934:	2602      	movs	r6, #2
   32936:	e7d5      	b.n	328e4 <__aeabi_dadd+0x1dc>
   32938:	2d00      	cmp	r5, #0
   3293a:	d16e      	bne.n	32a1a <__aeabi_dadd+0x312>
   3293c:	1c70      	adds	r0, r6, #1
   3293e:	0540      	lsls	r0, r0, #21
   32940:	0d40      	lsrs	r0, r0, #21
   32942:	2801      	cmp	r0, #1
   32944:	dc00      	bgt.n	32948 <__aeabi_dadd+0x240>
   32946:	e0f9      	b.n	32b3c <__aeabi_dadd+0x434>
   32948:	1ab8      	subs	r0, r7, r2
   3294a:	4684      	mov	ip, r0
   3294c:	4287      	cmp	r7, r0
   3294e:	4180      	sbcs	r0, r0
   32950:	1ae5      	subs	r5, r4, r3
   32952:	4240      	negs	r0, r0
   32954:	1a2d      	subs	r5, r5, r0
   32956:	0228      	lsls	r0, r5, #8
   32958:	d400      	bmi.n	3295c <__aeabi_dadd+0x254>
   3295a:	e089      	b.n	32a70 <__aeabi_dadd+0x368>
   3295c:	1bd7      	subs	r7, r2, r7
   3295e:	42ba      	cmp	r2, r7
   32960:	4192      	sbcs	r2, r2
   32962:	1b1c      	subs	r4, r3, r4
   32964:	4252      	negs	r2, r2
   32966:	1aa5      	subs	r5, r4, r2
   32968:	46d8      	mov	r8, fp
   3296a:	e729      	b.n	327c0 <__aeabi_dadd+0xb8>
   3296c:	4645      	mov	r5, r8
   3296e:	2400      	movs	r4, #0
   32970:	2700      	movs	r7, #0
   32972:	e76a      	b.n	3284a <__aeabi_dadd+0x142>
   32974:	4c45      	ldr	r4, [pc, #276]	; (32a8c <__aeabi_dadd+0x384>)
   32976:	1af6      	subs	r6, r6, r3
   32978:	402c      	ands	r4, r5
   3297a:	e749      	b.n	32810 <__aeabi_dadd+0x108>
   3297c:	003d      	movs	r5, r7
   3297e:	3828      	subs	r0, #40	; 0x28
   32980:	4085      	lsls	r5, r0
   32982:	2700      	movs	r7, #0
   32984:	e72e      	b.n	327e4 <__aeabi_dadd+0xdc>
   32986:	0038      	movs	r0, r7
   32988:	f001 fb04 	bl	33f94 <__clzsi2>
   3298c:	3020      	adds	r0, #32
   3298e:	e71d      	b.n	327cc <__aeabi_dadd+0xc4>
   32990:	430a      	orrs	r2, r1
   32992:	1e51      	subs	r1, r2, #1
   32994:	418a      	sbcs	r2, r1
   32996:	2100      	movs	r1, #0
   32998:	e707      	b.n	327aa <__aeabi_dadd+0xa2>
   3299a:	2b00      	cmp	r3, #0
   3299c:	d000      	beq.n	329a0 <__aeabi_dadd+0x298>
   3299e:	e0f3      	b.n	32b88 <__aeabi_dadd+0x480>
   329a0:	1c70      	adds	r0, r6, #1
   329a2:	0543      	lsls	r3, r0, #21
   329a4:	0d5b      	lsrs	r3, r3, #21
   329a6:	2b01      	cmp	r3, #1
   329a8:	dc00      	bgt.n	329ac <__aeabi_dadd+0x2a4>
   329aa:	e0ad      	b.n	32b08 <__aeabi_dadd+0x400>
   329ac:	4b36      	ldr	r3, [pc, #216]	; (32a88 <__aeabi_dadd+0x380>)
   329ae:	4298      	cmp	r0, r3
   329b0:	d100      	bne.n	329b4 <__aeabi_dadd+0x2ac>
   329b2:	e0d1      	b.n	32b58 <__aeabi_dadd+0x450>
   329b4:	18ba      	adds	r2, r7, r2
   329b6:	42ba      	cmp	r2, r7
   329b8:	41bf      	sbcs	r7, r7
   329ba:	1864      	adds	r4, r4, r1
   329bc:	427f      	negs	r7, r7
   329be:	19e4      	adds	r4, r4, r7
   329c0:	07e7      	lsls	r7, r4, #31
   329c2:	0852      	lsrs	r2, r2, #1
   329c4:	4317      	orrs	r7, r2
   329c6:	0864      	lsrs	r4, r4, #1
   329c8:	0006      	movs	r6, r0
   329ca:	e721      	b.n	32810 <__aeabi_dadd+0x108>
   329cc:	482e      	ldr	r0, [pc, #184]	; (32a88 <__aeabi_dadd+0x380>)
   329ce:	4285      	cmp	r5, r0
   329d0:	d100      	bne.n	329d4 <__aeabi_dadd+0x2cc>
   329d2:	e093      	b.n	32afc <__aeabi_dadd+0x3f4>
   329d4:	001d      	movs	r5, r3
   329d6:	e6d0      	b.n	3277a <__aeabi_dadd+0x72>
   329d8:	0029      	movs	r1, r5
   329da:	3e1f      	subs	r6, #31
   329dc:	40f1      	lsrs	r1, r6
   329de:	2b20      	cmp	r3, #32
   329e0:	d100      	bne.n	329e4 <__aeabi_dadd+0x2dc>
   329e2:	e08d      	b.n	32b00 <__aeabi_dadd+0x3f8>
   329e4:	2240      	movs	r2, #64	; 0x40
   329e6:	1ad3      	subs	r3, r2, r3
   329e8:	409d      	lsls	r5, r3
   329ea:	432f      	orrs	r7, r5
   329ec:	1e7d      	subs	r5, r7, #1
   329ee:	41af      	sbcs	r7, r5
   329f0:	2400      	movs	r4, #0
   329f2:	430f      	orrs	r7, r1
   329f4:	2600      	movs	r6, #0
   329f6:	e744      	b.n	32882 <__aeabi_dadd+0x17a>
   329f8:	002b      	movs	r3, r5
   329fa:	0008      	movs	r0, r1
   329fc:	3b20      	subs	r3, #32
   329fe:	40d8      	lsrs	r0, r3
   32a00:	0003      	movs	r3, r0
   32a02:	2d20      	cmp	r5, #32
   32a04:	d100      	bne.n	32a08 <__aeabi_dadd+0x300>
   32a06:	e07d      	b.n	32b04 <__aeabi_dadd+0x3fc>
   32a08:	2040      	movs	r0, #64	; 0x40
   32a0a:	1b45      	subs	r5, r0, r5
   32a0c:	40a9      	lsls	r1, r5
   32a0e:	430a      	orrs	r2, r1
   32a10:	1e51      	subs	r1, r2, #1
   32a12:	418a      	sbcs	r2, r1
   32a14:	2100      	movs	r1, #0
   32a16:	431a      	orrs	r2, r3
   32a18:	e6c7      	b.n	327aa <__aeabi_dadd+0xa2>
   32a1a:	2e00      	cmp	r6, #0
   32a1c:	d050      	beq.n	32ac0 <__aeabi_dadd+0x3b8>
   32a1e:	4e1a      	ldr	r6, [pc, #104]	; (32a88 <__aeabi_dadd+0x380>)
   32a20:	42b0      	cmp	r0, r6
   32a22:	d057      	beq.n	32ad4 <__aeabi_dadd+0x3cc>
   32a24:	2680      	movs	r6, #128	; 0x80
   32a26:	426b      	negs	r3, r5
   32a28:	4699      	mov	r9, r3
   32a2a:	0436      	lsls	r6, r6, #16
   32a2c:	4334      	orrs	r4, r6
   32a2e:	464b      	mov	r3, r9
   32a30:	2b38      	cmp	r3, #56	; 0x38
   32a32:	dd00      	ble.n	32a36 <__aeabi_dadd+0x32e>
   32a34:	e0d6      	b.n	32be4 <__aeabi_dadd+0x4dc>
   32a36:	2b1f      	cmp	r3, #31
   32a38:	dd00      	ble.n	32a3c <__aeabi_dadd+0x334>
   32a3a:	e135      	b.n	32ca8 <__aeabi_dadd+0x5a0>
   32a3c:	2620      	movs	r6, #32
   32a3e:	1af5      	subs	r5, r6, r3
   32a40:	0026      	movs	r6, r4
   32a42:	40ae      	lsls	r6, r5
   32a44:	46b2      	mov	sl, r6
   32a46:	003e      	movs	r6, r7
   32a48:	40de      	lsrs	r6, r3
   32a4a:	46ac      	mov	ip, r5
   32a4c:	0035      	movs	r5, r6
   32a4e:	4656      	mov	r6, sl
   32a50:	432e      	orrs	r6, r5
   32a52:	4665      	mov	r5, ip
   32a54:	40af      	lsls	r7, r5
   32a56:	1e7d      	subs	r5, r7, #1
   32a58:	41af      	sbcs	r7, r5
   32a5a:	40dc      	lsrs	r4, r3
   32a5c:	4337      	orrs	r7, r6
   32a5e:	1bd7      	subs	r7, r2, r7
   32a60:	42ba      	cmp	r2, r7
   32a62:	4192      	sbcs	r2, r2
   32a64:	1b0c      	subs	r4, r1, r4
   32a66:	4252      	negs	r2, r2
   32a68:	1aa4      	subs	r4, r4, r2
   32a6a:	0006      	movs	r6, r0
   32a6c:	46d8      	mov	r8, fp
   32a6e:	e6a3      	b.n	327b8 <__aeabi_dadd+0xb0>
   32a70:	4664      	mov	r4, ip
   32a72:	4667      	mov	r7, ip
   32a74:	432c      	orrs	r4, r5
   32a76:	d000      	beq.n	32a7a <__aeabi_dadd+0x372>
   32a78:	e6a2      	b.n	327c0 <__aeabi_dadd+0xb8>
   32a7a:	2500      	movs	r5, #0
   32a7c:	2600      	movs	r6, #0
   32a7e:	2700      	movs	r7, #0
   32a80:	e706      	b.n	32890 <__aeabi_dadd+0x188>
   32a82:	001e      	movs	r6, r3
   32a84:	e6c4      	b.n	32810 <__aeabi_dadd+0x108>
   32a86:	46c0      	nop			; (mov r8, r8)
   32a88:	000007ff 	.word	0x000007ff
   32a8c:	ff7fffff 	.word	0xff7fffff
   32a90:	800fffff 	.word	0x800fffff
   32a94:	2b1f      	cmp	r3, #31
   32a96:	dc63      	bgt.n	32b60 <__aeabi_dadd+0x458>
   32a98:	2020      	movs	r0, #32
   32a9a:	1ac3      	subs	r3, r0, r3
   32a9c:	0008      	movs	r0, r1
   32a9e:	4098      	lsls	r0, r3
   32aa0:	469c      	mov	ip, r3
   32aa2:	4683      	mov	fp, r0
   32aa4:	4653      	mov	r3, sl
   32aa6:	0010      	movs	r0, r2
   32aa8:	40d8      	lsrs	r0, r3
   32aaa:	0003      	movs	r3, r0
   32aac:	4658      	mov	r0, fp
   32aae:	4318      	orrs	r0, r3
   32ab0:	4663      	mov	r3, ip
   32ab2:	409a      	lsls	r2, r3
   32ab4:	1e53      	subs	r3, r2, #1
   32ab6:	419a      	sbcs	r2, r3
   32ab8:	4653      	mov	r3, sl
   32aba:	4302      	orrs	r2, r0
   32abc:	40d9      	lsrs	r1, r3
   32abe:	e703      	b.n	328c8 <__aeabi_dadd+0x1c0>
   32ac0:	0026      	movs	r6, r4
   32ac2:	433e      	orrs	r6, r7
   32ac4:	d006      	beq.n	32ad4 <__aeabi_dadd+0x3cc>
   32ac6:	43eb      	mvns	r3, r5
   32ac8:	4699      	mov	r9, r3
   32aca:	2b00      	cmp	r3, #0
   32acc:	d0c7      	beq.n	32a5e <__aeabi_dadd+0x356>
   32ace:	4e94      	ldr	r6, [pc, #592]	; (32d20 <__aeabi_dadd+0x618>)
   32ad0:	42b0      	cmp	r0, r6
   32ad2:	d1ac      	bne.n	32a2e <__aeabi_dadd+0x326>
   32ad4:	000c      	movs	r4, r1
   32ad6:	0017      	movs	r7, r2
   32ad8:	0006      	movs	r6, r0
   32ada:	46d8      	mov	r8, fp
   32adc:	e698      	b.n	32810 <__aeabi_dadd+0x108>
   32ade:	4b90      	ldr	r3, [pc, #576]	; (32d20 <__aeabi_dadd+0x618>)
   32ae0:	459a      	cmp	sl, r3
   32ae2:	d00b      	beq.n	32afc <__aeabi_dadd+0x3f4>
   32ae4:	4682      	mov	sl, r0
   32ae6:	e6e7      	b.n	328b8 <__aeabi_dadd+0x1b0>
   32ae8:	2800      	cmp	r0, #0
   32aea:	d000      	beq.n	32aee <__aeabi_dadd+0x3e6>
   32aec:	e09e      	b.n	32c2c <__aeabi_dadd+0x524>
   32aee:	0018      	movs	r0, r3
   32af0:	4310      	orrs	r0, r2
   32af2:	d100      	bne.n	32af6 <__aeabi_dadd+0x3ee>
   32af4:	e0e9      	b.n	32cca <__aeabi_dadd+0x5c2>
   32af6:	001c      	movs	r4, r3
   32af8:	0017      	movs	r7, r2
   32afa:	46d8      	mov	r8, fp
   32afc:	4e88      	ldr	r6, [pc, #544]	; (32d20 <__aeabi_dadd+0x618>)
   32afe:	e687      	b.n	32810 <__aeabi_dadd+0x108>
   32b00:	2500      	movs	r5, #0
   32b02:	e772      	b.n	329ea <__aeabi_dadd+0x2e2>
   32b04:	2100      	movs	r1, #0
   32b06:	e782      	b.n	32a0e <__aeabi_dadd+0x306>
   32b08:	0023      	movs	r3, r4
   32b0a:	433b      	orrs	r3, r7
   32b0c:	2e00      	cmp	r6, #0
   32b0e:	d000      	beq.n	32b12 <__aeabi_dadd+0x40a>
   32b10:	e0ab      	b.n	32c6a <__aeabi_dadd+0x562>
   32b12:	2b00      	cmp	r3, #0
   32b14:	d100      	bne.n	32b18 <__aeabi_dadd+0x410>
   32b16:	e0e7      	b.n	32ce8 <__aeabi_dadd+0x5e0>
   32b18:	000b      	movs	r3, r1
   32b1a:	4313      	orrs	r3, r2
   32b1c:	d100      	bne.n	32b20 <__aeabi_dadd+0x418>
   32b1e:	e677      	b.n	32810 <__aeabi_dadd+0x108>
   32b20:	18ba      	adds	r2, r7, r2
   32b22:	42ba      	cmp	r2, r7
   32b24:	41bf      	sbcs	r7, r7
   32b26:	1864      	adds	r4, r4, r1
   32b28:	427f      	negs	r7, r7
   32b2a:	19e4      	adds	r4, r4, r7
   32b2c:	0223      	lsls	r3, r4, #8
   32b2e:	d400      	bmi.n	32b32 <__aeabi_dadd+0x42a>
   32b30:	e0f2      	b.n	32d18 <__aeabi_dadd+0x610>
   32b32:	4b7c      	ldr	r3, [pc, #496]	; (32d24 <__aeabi_dadd+0x61c>)
   32b34:	0017      	movs	r7, r2
   32b36:	401c      	ands	r4, r3
   32b38:	0006      	movs	r6, r0
   32b3a:	e669      	b.n	32810 <__aeabi_dadd+0x108>
   32b3c:	0020      	movs	r0, r4
   32b3e:	4338      	orrs	r0, r7
   32b40:	2e00      	cmp	r6, #0
   32b42:	d1d1      	bne.n	32ae8 <__aeabi_dadd+0x3e0>
   32b44:	2800      	cmp	r0, #0
   32b46:	d15b      	bne.n	32c00 <__aeabi_dadd+0x4f8>
   32b48:	001c      	movs	r4, r3
   32b4a:	4314      	orrs	r4, r2
   32b4c:	d100      	bne.n	32b50 <__aeabi_dadd+0x448>
   32b4e:	e0a8      	b.n	32ca2 <__aeabi_dadd+0x59a>
   32b50:	001c      	movs	r4, r3
   32b52:	0017      	movs	r7, r2
   32b54:	46d8      	mov	r8, fp
   32b56:	e65b      	b.n	32810 <__aeabi_dadd+0x108>
   32b58:	0006      	movs	r6, r0
   32b5a:	2400      	movs	r4, #0
   32b5c:	2700      	movs	r7, #0
   32b5e:	e697      	b.n	32890 <__aeabi_dadd+0x188>
   32b60:	4650      	mov	r0, sl
   32b62:	000b      	movs	r3, r1
   32b64:	3820      	subs	r0, #32
   32b66:	40c3      	lsrs	r3, r0
   32b68:	4699      	mov	r9, r3
   32b6a:	4653      	mov	r3, sl
   32b6c:	2b20      	cmp	r3, #32
   32b6e:	d100      	bne.n	32b72 <__aeabi_dadd+0x46a>
   32b70:	e095      	b.n	32c9e <__aeabi_dadd+0x596>
   32b72:	2340      	movs	r3, #64	; 0x40
   32b74:	4650      	mov	r0, sl
   32b76:	1a1b      	subs	r3, r3, r0
   32b78:	4099      	lsls	r1, r3
   32b7a:	430a      	orrs	r2, r1
   32b7c:	1e51      	subs	r1, r2, #1
   32b7e:	418a      	sbcs	r2, r1
   32b80:	464b      	mov	r3, r9
   32b82:	2100      	movs	r1, #0
   32b84:	431a      	orrs	r2, r3
   32b86:	e69f      	b.n	328c8 <__aeabi_dadd+0x1c0>
   32b88:	2e00      	cmp	r6, #0
   32b8a:	d130      	bne.n	32bee <__aeabi_dadd+0x4e6>
   32b8c:	0026      	movs	r6, r4
   32b8e:	433e      	orrs	r6, r7
   32b90:	d067      	beq.n	32c62 <__aeabi_dadd+0x55a>
   32b92:	43db      	mvns	r3, r3
   32b94:	469a      	mov	sl, r3
   32b96:	2b00      	cmp	r3, #0
   32b98:	d01c      	beq.n	32bd4 <__aeabi_dadd+0x4cc>
   32b9a:	4e61      	ldr	r6, [pc, #388]	; (32d20 <__aeabi_dadd+0x618>)
   32b9c:	42b0      	cmp	r0, r6
   32b9e:	d060      	beq.n	32c62 <__aeabi_dadd+0x55a>
   32ba0:	4653      	mov	r3, sl
   32ba2:	2b38      	cmp	r3, #56	; 0x38
   32ba4:	dd00      	ble.n	32ba8 <__aeabi_dadd+0x4a0>
   32ba6:	e096      	b.n	32cd6 <__aeabi_dadd+0x5ce>
   32ba8:	2b1f      	cmp	r3, #31
   32baa:	dd00      	ble.n	32bae <__aeabi_dadd+0x4a6>
   32bac:	e09f      	b.n	32cee <__aeabi_dadd+0x5e6>
   32bae:	2620      	movs	r6, #32
   32bb0:	1af3      	subs	r3, r6, r3
   32bb2:	0026      	movs	r6, r4
   32bb4:	409e      	lsls	r6, r3
   32bb6:	469c      	mov	ip, r3
   32bb8:	46b3      	mov	fp, r6
   32bba:	4653      	mov	r3, sl
   32bbc:	003e      	movs	r6, r7
   32bbe:	40de      	lsrs	r6, r3
   32bc0:	0033      	movs	r3, r6
   32bc2:	465e      	mov	r6, fp
   32bc4:	431e      	orrs	r6, r3
   32bc6:	4663      	mov	r3, ip
   32bc8:	409f      	lsls	r7, r3
   32bca:	1e7b      	subs	r3, r7, #1
   32bcc:	419f      	sbcs	r7, r3
   32bce:	4653      	mov	r3, sl
   32bd0:	40dc      	lsrs	r4, r3
   32bd2:	4337      	orrs	r7, r6
   32bd4:	18bf      	adds	r7, r7, r2
   32bd6:	4297      	cmp	r7, r2
   32bd8:	4192      	sbcs	r2, r2
   32bda:	1864      	adds	r4, r4, r1
   32bdc:	4252      	negs	r2, r2
   32bde:	18a4      	adds	r4, r4, r2
   32be0:	0006      	movs	r6, r0
   32be2:	e678      	b.n	328d6 <__aeabi_dadd+0x1ce>
   32be4:	4327      	orrs	r7, r4
   32be6:	1e7c      	subs	r4, r7, #1
   32be8:	41a7      	sbcs	r7, r4
   32bea:	2400      	movs	r4, #0
   32bec:	e737      	b.n	32a5e <__aeabi_dadd+0x356>
   32bee:	4e4c      	ldr	r6, [pc, #304]	; (32d20 <__aeabi_dadd+0x618>)
   32bf0:	42b0      	cmp	r0, r6
   32bf2:	d036      	beq.n	32c62 <__aeabi_dadd+0x55a>
   32bf4:	2680      	movs	r6, #128	; 0x80
   32bf6:	425b      	negs	r3, r3
   32bf8:	0436      	lsls	r6, r6, #16
   32bfa:	469a      	mov	sl, r3
   32bfc:	4334      	orrs	r4, r6
   32bfe:	e7cf      	b.n	32ba0 <__aeabi_dadd+0x498>
   32c00:	0018      	movs	r0, r3
   32c02:	4310      	orrs	r0, r2
   32c04:	d100      	bne.n	32c08 <__aeabi_dadd+0x500>
   32c06:	e603      	b.n	32810 <__aeabi_dadd+0x108>
   32c08:	1ab8      	subs	r0, r7, r2
   32c0a:	4684      	mov	ip, r0
   32c0c:	4567      	cmp	r7, ip
   32c0e:	41ad      	sbcs	r5, r5
   32c10:	1ae0      	subs	r0, r4, r3
   32c12:	426d      	negs	r5, r5
   32c14:	1b40      	subs	r0, r0, r5
   32c16:	0205      	lsls	r5, r0, #8
   32c18:	d400      	bmi.n	32c1c <__aeabi_dadd+0x514>
   32c1a:	e62c      	b.n	32876 <__aeabi_dadd+0x16e>
   32c1c:	1bd7      	subs	r7, r2, r7
   32c1e:	42ba      	cmp	r2, r7
   32c20:	4192      	sbcs	r2, r2
   32c22:	1b1c      	subs	r4, r3, r4
   32c24:	4252      	negs	r2, r2
   32c26:	1aa4      	subs	r4, r4, r2
   32c28:	46d8      	mov	r8, fp
   32c2a:	e5f1      	b.n	32810 <__aeabi_dadd+0x108>
   32c2c:	0018      	movs	r0, r3
   32c2e:	4310      	orrs	r0, r2
   32c30:	d100      	bne.n	32c34 <__aeabi_dadd+0x52c>
   32c32:	e763      	b.n	32afc <__aeabi_dadd+0x3f4>
   32c34:	08f8      	lsrs	r0, r7, #3
   32c36:	0767      	lsls	r7, r4, #29
   32c38:	4307      	orrs	r7, r0
   32c3a:	2080      	movs	r0, #128	; 0x80
   32c3c:	08e4      	lsrs	r4, r4, #3
   32c3e:	0300      	lsls	r0, r0, #12
   32c40:	4204      	tst	r4, r0
   32c42:	d008      	beq.n	32c56 <__aeabi_dadd+0x54e>
   32c44:	08dd      	lsrs	r5, r3, #3
   32c46:	4205      	tst	r5, r0
   32c48:	d105      	bne.n	32c56 <__aeabi_dadd+0x54e>
   32c4a:	08d2      	lsrs	r2, r2, #3
   32c4c:	0759      	lsls	r1, r3, #29
   32c4e:	4311      	orrs	r1, r2
   32c50:	000f      	movs	r7, r1
   32c52:	002c      	movs	r4, r5
   32c54:	46d8      	mov	r8, fp
   32c56:	0f7b      	lsrs	r3, r7, #29
   32c58:	00e4      	lsls	r4, r4, #3
   32c5a:	431c      	orrs	r4, r3
   32c5c:	00ff      	lsls	r7, r7, #3
   32c5e:	4e30      	ldr	r6, [pc, #192]	; (32d20 <__aeabi_dadd+0x618>)
   32c60:	e5d6      	b.n	32810 <__aeabi_dadd+0x108>
   32c62:	000c      	movs	r4, r1
   32c64:	0017      	movs	r7, r2
   32c66:	0006      	movs	r6, r0
   32c68:	e5d2      	b.n	32810 <__aeabi_dadd+0x108>
   32c6a:	2b00      	cmp	r3, #0
   32c6c:	d038      	beq.n	32ce0 <__aeabi_dadd+0x5d8>
   32c6e:	000b      	movs	r3, r1
   32c70:	4313      	orrs	r3, r2
   32c72:	d100      	bne.n	32c76 <__aeabi_dadd+0x56e>
   32c74:	e742      	b.n	32afc <__aeabi_dadd+0x3f4>
   32c76:	08f8      	lsrs	r0, r7, #3
   32c78:	0767      	lsls	r7, r4, #29
   32c7a:	4307      	orrs	r7, r0
   32c7c:	2080      	movs	r0, #128	; 0x80
   32c7e:	08e4      	lsrs	r4, r4, #3
   32c80:	0300      	lsls	r0, r0, #12
   32c82:	4204      	tst	r4, r0
   32c84:	d0e7      	beq.n	32c56 <__aeabi_dadd+0x54e>
   32c86:	08cb      	lsrs	r3, r1, #3
   32c88:	4203      	tst	r3, r0
   32c8a:	d1e4      	bne.n	32c56 <__aeabi_dadd+0x54e>
   32c8c:	08d2      	lsrs	r2, r2, #3
   32c8e:	0749      	lsls	r1, r1, #29
   32c90:	4311      	orrs	r1, r2
   32c92:	000f      	movs	r7, r1
   32c94:	001c      	movs	r4, r3
   32c96:	e7de      	b.n	32c56 <__aeabi_dadd+0x54e>
   32c98:	2700      	movs	r7, #0
   32c9a:	2400      	movs	r4, #0
   32c9c:	e5d5      	b.n	3284a <__aeabi_dadd+0x142>
   32c9e:	2100      	movs	r1, #0
   32ca0:	e76b      	b.n	32b7a <__aeabi_dadd+0x472>
   32ca2:	2500      	movs	r5, #0
   32ca4:	2700      	movs	r7, #0
   32ca6:	e5f3      	b.n	32890 <__aeabi_dadd+0x188>
   32ca8:	464e      	mov	r6, r9
   32caa:	0025      	movs	r5, r4
   32cac:	3e20      	subs	r6, #32
   32cae:	40f5      	lsrs	r5, r6
   32cb0:	464b      	mov	r3, r9
   32cb2:	002e      	movs	r6, r5
   32cb4:	2b20      	cmp	r3, #32
   32cb6:	d02d      	beq.n	32d14 <__aeabi_dadd+0x60c>
   32cb8:	2540      	movs	r5, #64	; 0x40
   32cba:	1aed      	subs	r5, r5, r3
   32cbc:	40ac      	lsls	r4, r5
   32cbe:	4327      	orrs	r7, r4
   32cc0:	1e7c      	subs	r4, r7, #1
   32cc2:	41a7      	sbcs	r7, r4
   32cc4:	2400      	movs	r4, #0
   32cc6:	4337      	orrs	r7, r6
   32cc8:	e6c9      	b.n	32a5e <__aeabi_dadd+0x356>
   32cca:	2480      	movs	r4, #128	; 0x80
   32ccc:	2500      	movs	r5, #0
   32cce:	0324      	lsls	r4, r4, #12
   32cd0:	4e13      	ldr	r6, [pc, #76]	; (32d20 <__aeabi_dadd+0x618>)
   32cd2:	2700      	movs	r7, #0
   32cd4:	e5dc      	b.n	32890 <__aeabi_dadd+0x188>
   32cd6:	4327      	orrs	r7, r4
   32cd8:	1e7c      	subs	r4, r7, #1
   32cda:	41a7      	sbcs	r7, r4
   32cdc:	2400      	movs	r4, #0
   32cde:	e779      	b.n	32bd4 <__aeabi_dadd+0x4cc>
   32ce0:	000c      	movs	r4, r1
   32ce2:	0017      	movs	r7, r2
   32ce4:	4e0e      	ldr	r6, [pc, #56]	; (32d20 <__aeabi_dadd+0x618>)
   32ce6:	e593      	b.n	32810 <__aeabi_dadd+0x108>
   32ce8:	000c      	movs	r4, r1
   32cea:	0017      	movs	r7, r2
   32cec:	e590      	b.n	32810 <__aeabi_dadd+0x108>
   32cee:	4656      	mov	r6, sl
   32cf0:	0023      	movs	r3, r4
   32cf2:	3e20      	subs	r6, #32
   32cf4:	40f3      	lsrs	r3, r6
   32cf6:	4699      	mov	r9, r3
   32cf8:	4653      	mov	r3, sl
   32cfa:	2b20      	cmp	r3, #32
   32cfc:	d00e      	beq.n	32d1c <__aeabi_dadd+0x614>
   32cfe:	2340      	movs	r3, #64	; 0x40
   32d00:	4656      	mov	r6, sl
   32d02:	1b9b      	subs	r3, r3, r6
   32d04:	409c      	lsls	r4, r3
   32d06:	4327      	orrs	r7, r4
   32d08:	1e7c      	subs	r4, r7, #1
   32d0a:	41a7      	sbcs	r7, r4
   32d0c:	464b      	mov	r3, r9
   32d0e:	2400      	movs	r4, #0
   32d10:	431f      	orrs	r7, r3
   32d12:	e75f      	b.n	32bd4 <__aeabi_dadd+0x4cc>
   32d14:	2400      	movs	r4, #0
   32d16:	e7d2      	b.n	32cbe <__aeabi_dadd+0x5b6>
   32d18:	0017      	movs	r7, r2
   32d1a:	e5b2      	b.n	32882 <__aeabi_dadd+0x17a>
   32d1c:	2400      	movs	r4, #0
   32d1e:	e7f2      	b.n	32d06 <__aeabi_dadd+0x5fe>
   32d20:	000007ff 	.word	0x000007ff
   32d24:	ff7fffff 	.word	0xff7fffff

00032d28 <__aeabi_ddiv>:
   32d28:	b5f0      	push	{r4, r5, r6, r7, lr}
   32d2a:	4657      	mov	r7, sl
   32d2c:	4645      	mov	r5, r8
   32d2e:	46de      	mov	lr, fp
   32d30:	464e      	mov	r6, r9
   32d32:	b5e0      	push	{r5, r6, r7, lr}
   32d34:	004c      	lsls	r4, r1, #1
   32d36:	030e      	lsls	r6, r1, #12
   32d38:	b087      	sub	sp, #28
   32d3a:	4683      	mov	fp, r0
   32d3c:	4692      	mov	sl, r2
   32d3e:	001d      	movs	r5, r3
   32d40:	4680      	mov	r8, r0
   32d42:	0b36      	lsrs	r6, r6, #12
   32d44:	0d64      	lsrs	r4, r4, #21
   32d46:	0fcf      	lsrs	r7, r1, #31
   32d48:	2c00      	cmp	r4, #0
   32d4a:	d04f      	beq.n	32dec <__aeabi_ddiv+0xc4>
   32d4c:	4b6f      	ldr	r3, [pc, #444]	; (32f0c <__aeabi_ddiv+0x1e4>)
   32d4e:	429c      	cmp	r4, r3
   32d50:	d035      	beq.n	32dbe <__aeabi_ddiv+0x96>
   32d52:	2380      	movs	r3, #128	; 0x80
   32d54:	0f42      	lsrs	r2, r0, #29
   32d56:	041b      	lsls	r3, r3, #16
   32d58:	00f6      	lsls	r6, r6, #3
   32d5a:	4313      	orrs	r3, r2
   32d5c:	4333      	orrs	r3, r6
   32d5e:	4699      	mov	r9, r3
   32d60:	00c3      	lsls	r3, r0, #3
   32d62:	4698      	mov	r8, r3
   32d64:	4b6a      	ldr	r3, [pc, #424]	; (32f10 <__aeabi_ddiv+0x1e8>)
   32d66:	2600      	movs	r6, #0
   32d68:	469c      	mov	ip, r3
   32d6a:	2300      	movs	r3, #0
   32d6c:	4464      	add	r4, ip
   32d6e:	9303      	str	r3, [sp, #12]
   32d70:	032b      	lsls	r3, r5, #12
   32d72:	0b1b      	lsrs	r3, r3, #12
   32d74:	469b      	mov	fp, r3
   32d76:	006b      	lsls	r3, r5, #1
   32d78:	0fed      	lsrs	r5, r5, #31
   32d7a:	4650      	mov	r0, sl
   32d7c:	0d5b      	lsrs	r3, r3, #21
   32d7e:	9501      	str	r5, [sp, #4]
   32d80:	d05e      	beq.n	32e40 <__aeabi_ddiv+0x118>
   32d82:	4a62      	ldr	r2, [pc, #392]	; (32f0c <__aeabi_ddiv+0x1e4>)
   32d84:	4293      	cmp	r3, r2
   32d86:	d053      	beq.n	32e30 <__aeabi_ddiv+0x108>
   32d88:	465a      	mov	r2, fp
   32d8a:	00d1      	lsls	r1, r2, #3
   32d8c:	2280      	movs	r2, #128	; 0x80
   32d8e:	0f40      	lsrs	r0, r0, #29
   32d90:	0412      	lsls	r2, r2, #16
   32d92:	4302      	orrs	r2, r0
   32d94:	430a      	orrs	r2, r1
   32d96:	4693      	mov	fp, r2
   32d98:	4652      	mov	r2, sl
   32d9a:	00d1      	lsls	r1, r2, #3
   32d9c:	4a5c      	ldr	r2, [pc, #368]	; (32f10 <__aeabi_ddiv+0x1e8>)
   32d9e:	4694      	mov	ip, r2
   32da0:	2200      	movs	r2, #0
   32da2:	4463      	add	r3, ip
   32da4:	0038      	movs	r0, r7
   32da6:	4068      	eors	r0, r5
   32da8:	4684      	mov	ip, r0
   32daa:	9002      	str	r0, [sp, #8]
   32dac:	1ae4      	subs	r4, r4, r3
   32dae:	4316      	orrs	r6, r2
   32db0:	2e0f      	cmp	r6, #15
   32db2:	d900      	bls.n	32db6 <__aeabi_ddiv+0x8e>
   32db4:	e0b4      	b.n	32f20 <__aeabi_ddiv+0x1f8>
   32db6:	4b57      	ldr	r3, [pc, #348]	; (32f14 <__aeabi_ddiv+0x1ec>)
   32db8:	00b6      	lsls	r6, r6, #2
   32dba:	599b      	ldr	r3, [r3, r6]
   32dbc:	469f      	mov	pc, r3
   32dbe:	0003      	movs	r3, r0
   32dc0:	4333      	orrs	r3, r6
   32dc2:	4699      	mov	r9, r3
   32dc4:	d16c      	bne.n	32ea0 <__aeabi_ddiv+0x178>
   32dc6:	2300      	movs	r3, #0
   32dc8:	4698      	mov	r8, r3
   32dca:	3302      	adds	r3, #2
   32dcc:	2608      	movs	r6, #8
   32dce:	9303      	str	r3, [sp, #12]
   32dd0:	e7ce      	b.n	32d70 <__aeabi_ddiv+0x48>
   32dd2:	46cb      	mov	fp, r9
   32dd4:	4641      	mov	r1, r8
   32dd6:	9a03      	ldr	r2, [sp, #12]
   32dd8:	9701      	str	r7, [sp, #4]
   32dda:	2a02      	cmp	r2, #2
   32ddc:	d165      	bne.n	32eaa <__aeabi_ddiv+0x182>
   32dde:	9b01      	ldr	r3, [sp, #4]
   32de0:	4c4a      	ldr	r4, [pc, #296]	; (32f0c <__aeabi_ddiv+0x1e4>)
   32de2:	469c      	mov	ip, r3
   32de4:	2300      	movs	r3, #0
   32de6:	2200      	movs	r2, #0
   32de8:	4698      	mov	r8, r3
   32dea:	e06b      	b.n	32ec4 <__aeabi_ddiv+0x19c>
   32dec:	0003      	movs	r3, r0
   32dee:	4333      	orrs	r3, r6
   32df0:	4699      	mov	r9, r3
   32df2:	d04e      	beq.n	32e92 <__aeabi_ddiv+0x16a>
   32df4:	2e00      	cmp	r6, #0
   32df6:	d100      	bne.n	32dfa <__aeabi_ddiv+0xd2>
   32df8:	e1bc      	b.n	33174 <__aeabi_ddiv+0x44c>
   32dfa:	0030      	movs	r0, r6
   32dfc:	f001 f8ca 	bl	33f94 <__clzsi2>
   32e00:	0003      	movs	r3, r0
   32e02:	3b0b      	subs	r3, #11
   32e04:	2b1c      	cmp	r3, #28
   32e06:	dd00      	ble.n	32e0a <__aeabi_ddiv+0xe2>
   32e08:	e1ac      	b.n	33164 <__aeabi_ddiv+0x43c>
   32e0a:	221d      	movs	r2, #29
   32e0c:	1ad3      	subs	r3, r2, r3
   32e0e:	465a      	mov	r2, fp
   32e10:	0001      	movs	r1, r0
   32e12:	40da      	lsrs	r2, r3
   32e14:	3908      	subs	r1, #8
   32e16:	408e      	lsls	r6, r1
   32e18:	0013      	movs	r3, r2
   32e1a:	4333      	orrs	r3, r6
   32e1c:	4699      	mov	r9, r3
   32e1e:	465b      	mov	r3, fp
   32e20:	408b      	lsls	r3, r1
   32e22:	4698      	mov	r8, r3
   32e24:	2300      	movs	r3, #0
   32e26:	4c3c      	ldr	r4, [pc, #240]	; (32f18 <__aeabi_ddiv+0x1f0>)
   32e28:	2600      	movs	r6, #0
   32e2a:	1a24      	subs	r4, r4, r0
   32e2c:	9303      	str	r3, [sp, #12]
   32e2e:	e79f      	b.n	32d70 <__aeabi_ddiv+0x48>
   32e30:	4651      	mov	r1, sl
   32e32:	465a      	mov	r2, fp
   32e34:	4311      	orrs	r1, r2
   32e36:	d129      	bne.n	32e8c <__aeabi_ddiv+0x164>
   32e38:	2200      	movs	r2, #0
   32e3a:	4693      	mov	fp, r2
   32e3c:	3202      	adds	r2, #2
   32e3e:	e7b1      	b.n	32da4 <__aeabi_ddiv+0x7c>
   32e40:	4659      	mov	r1, fp
   32e42:	4301      	orrs	r1, r0
   32e44:	d01e      	beq.n	32e84 <__aeabi_ddiv+0x15c>
   32e46:	465b      	mov	r3, fp
   32e48:	2b00      	cmp	r3, #0
   32e4a:	d100      	bne.n	32e4e <__aeabi_ddiv+0x126>
   32e4c:	e19e      	b.n	3318c <__aeabi_ddiv+0x464>
   32e4e:	4658      	mov	r0, fp
   32e50:	f001 f8a0 	bl	33f94 <__clzsi2>
   32e54:	0003      	movs	r3, r0
   32e56:	3b0b      	subs	r3, #11
   32e58:	2b1c      	cmp	r3, #28
   32e5a:	dd00      	ble.n	32e5e <__aeabi_ddiv+0x136>
   32e5c:	e18f      	b.n	3317e <__aeabi_ddiv+0x456>
   32e5e:	0002      	movs	r2, r0
   32e60:	4659      	mov	r1, fp
   32e62:	3a08      	subs	r2, #8
   32e64:	4091      	lsls	r1, r2
   32e66:	468b      	mov	fp, r1
   32e68:	211d      	movs	r1, #29
   32e6a:	1acb      	subs	r3, r1, r3
   32e6c:	4651      	mov	r1, sl
   32e6e:	40d9      	lsrs	r1, r3
   32e70:	000b      	movs	r3, r1
   32e72:	4659      	mov	r1, fp
   32e74:	430b      	orrs	r3, r1
   32e76:	4651      	mov	r1, sl
   32e78:	469b      	mov	fp, r3
   32e7a:	4091      	lsls	r1, r2
   32e7c:	4b26      	ldr	r3, [pc, #152]	; (32f18 <__aeabi_ddiv+0x1f0>)
   32e7e:	2200      	movs	r2, #0
   32e80:	1a1b      	subs	r3, r3, r0
   32e82:	e78f      	b.n	32da4 <__aeabi_ddiv+0x7c>
   32e84:	2300      	movs	r3, #0
   32e86:	2201      	movs	r2, #1
   32e88:	469b      	mov	fp, r3
   32e8a:	e78b      	b.n	32da4 <__aeabi_ddiv+0x7c>
   32e8c:	4651      	mov	r1, sl
   32e8e:	2203      	movs	r2, #3
   32e90:	e788      	b.n	32da4 <__aeabi_ddiv+0x7c>
   32e92:	2300      	movs	r3, #0
   32e94:	4698      	mov	r8, r3
   32e96:	3301      	adds	r3, #1
   32e98:	2604      	movs	r6, #4
   32e9a:	2400      	movs	r4, #0
   32e9c:	9303      	str	r3, [sp, #12]
   32e9e:	e767      	b.n	32d70 <__aeabi_ddiv+0x48>
   32ea0:	2303      	movs	r3, #3
   32ea2:	46b1      	mov	r9, r6
   32ea4:	9303      	str	r3, [sp, #12]
   32ea6:	260c      	movs	r6, #12
   32ea8:	e762      	b.n	32d70 <__aeabi_ddiv+0x48>
   32eaa:	2a03      	cmp	r2, #3
   32eac:	d100      	bne.n	32eb0 <__aeabi_ddiv+0x188>
   32eae:	e25c      	b.n	3336a <__aeabi_ddiv+0x642>
   32eb0:	9b01      	ldr	r3, [sp, #4]
   32eb2:	2a01      	cmp	r2, #1
   32eb4:	d000      	beq.n	32eb8 <__aeabi_ddiv+0x190>
   32eb6:	e1e4      	b.n	33282 <__aeabi_ddiv+0x55a>
   32eb8:	4013      	ands	r3, r2
   32eba:	469c      	mov	ip, r3
   32ebc:	2300      	movs	r3, #0
   32ebe:	2400      	movs	r4, #0
   32ec0:	2200      	movs	r2, #0
   32ec2:	4698      	mov	r8, r3
   32ec4:	2100      	movs	r1, #0
   32ec6:	0312      	lsls	r2, r2, #12
   32ec8:	0b13      	lsrs	r3, r2, #12
   32eca:	0d0a      	lsrs	r2, r1, #20
   32ecc:	0512      	lsls	r2, r2, #20
   32ece:	431a      	orrs	r2, r3
   32ed0:	0523      	lsls	r3, r4, #20
   32ed2:	4c12      	ldr	r4, [pc, #72]	; (32f1c <__aeabi_ddiv+0x1f4>)
   32ed4:	4640      	mov	r0, r8
   32ed6:	4022      	ands	r2, r4
   32ed8:	4313      	orrs	r3, r2
   32eda:	4662      	mov	r2, ip
   32edc:	005b      	lsls	r3, r3, #1
   32ede:	07d2      	lsls	r2, r2, #31
   32ee0:	085b      	lsrs	r3, r3, #1
   32ee2:	4313      	orrs	r3, r2
   32ee4:	0019      	movs	r1, r3
   32ee6:	b007      	add	sp, #28
   32ee8:	bc3c      	pop	{r2, r3, r4, r5}
   32eea:	4690      	mov	r8, r2
   32eec:	4699      	mov	r9, r3
   32eee:	46a2      	mov	sl, r4
   32ef0:	46ab      	mov	fp, r5
   32ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   32ef4:	2300      	movs	r3, #0
   32ef6:	2280      	movs	r2, #128	; 0x80
   32ef8:	469c      	mov	ip, r3
   32efa:	0312      	lsls	r2, r2, #12
   32efc:	4698      	mov	r8, r3
   32efe:	4c03      	ldr	r4, [pc, #12]	; (32f0c <__aeabi_ddiv+0x1e4>)
   32f00:	e7e0      	b.n	32ec4 <__aeabi_ddiv+0x19c>
   32f02:	2300      	movs	r3, #0
   32f04:	4c01      	ldr	r4, [pc, #4]	; (32f0c <__aeabi_ddiv+0x1e4>)
   32f06:	2200      	movs	r2, #0
   32f08:	4698      	mov	r8, r3
   32f0a:	e7db      	b.n	32ec4 <__aeabi_ddiv+0x19c>
   32f0c:	000007ff 	.word	0x000007ff
   32f10:	fffffc01 	.word	0xfffffc01
   32f14:	0003ab08 	.word	0x0003ab08
   32f18:	fffffc0d 	.word	0xfffffc0d
   32f1c:	800fffff 	.word	0x800fffff
   32f20:	45d9      	cmp	r9, fp
   32f22:	d900      	bls.n	32f26 <__aeabi_ddiv+0x1fe>
   32f24:	e139      	b.n	3319a <__aeabi_ddiv+0x472>
   32f26:	d100      	bne.n	32f2a <__aeabi_ddiv+0x202>
   32f28:	e134      	b.n	33194 <__aeabi_ddiv+0x46c>
   32f2a:	2300      	movs	r3, #0
   32f2c:	4646      	mov	r6, r8
   32f2e:	464d      	mov	r5, r9
   32f30:	469a      	mov	sl, r3
   32f32:	3c01      	subs	r4, #1
   32f34:	465b      	mov	r3, fp
   32f36:	0e0a      	lsrs	r2, r1, #24
   32f38:	021b      	lsls	r3, r3, #8
   32f3a:	431a      	orrs	r2, r3
   32f3c:	020b      	lsls	r3, r1, #8
   32f3e:	0c17      	lsrs	r7, r2, #16
   32f40:	9303      	str	r3, [sp, #12]
   32f42:	0413      	lsls	r3, r2, #16
   32f44:	0c1b      	lsrs	r3, r3, #16
   32f46:	0039      	movs	r1, r7
   32f48:	0028      	movs	r0, r5
   32f4a:	4690      	mov	r8, r2
   32f4c:	9301      	str	r3, [sp, #4]
   32f4e:	f7ff fa3b 	bl	323c8 <__udivsi3>
   32f52:	0002      	movs	r2, r0
   32f54:	9b01      	ldr	r3, [sp, #4]
   32f56:	4683      	mov	fp, r0
   32f58:	435a      	muls	r2, r3
   32f5a:	0028      	movs	r0, r5
   32f5c:	0039      	movs	r1, r7
   32f5e:	4691      	mov	r9, r2
   32f60:	f7ff fab8 	bl	324d4 <__aeabi_uidivmod>
   32f64:	0c35      	lsrs	r5, r6, #16
   32f66:	0409      	lsls	r1, r1, #16
   32f68:	430d      	orrs	r5, r1
   32f6a:	45a9      	cmp	r9, r5
   32f6c:	d90d      	bls.n	32f8a <__aeabi_ddiv+0x262>
   32f6e:	465b      	mov	r3, fp
   32f70:	4445      	add	r5, r8
   32f72:	3b01      	subs	r3, #1
   32f74:	45a8      	cmp	r8, r5
   32f76:	d900      	bls.n	32f7a <__aeabi_ddiv+0x252>
   32f78:	e13a      	b.n	331f0 <__aeabi_ddiv+0x4c8>
   32f7a:	45a9      	cmp	r9, r5
   32f7c:	d800      	bhi.n	32f80 <__aeabi_ddiv+0x258>
   32f7e:	e137      	b.n	331f0 <__aeabi_ddiv+0x4c8>
   32f80:	2302      	movs	r3, #2
   32f82:	425b      	negs	r3, r3
   32f84:	469c      	mov	ip, r3
   32f86:	4445      	add	r5, r8
   32f88:	44e3      	add	fp, ip
   32f8a:	464b      	mov	r3, r9
   32f8c:	1aeb      	subs	r3, r5, r3
   32f8e:	0039      	movs	r1, r7
   32f90:	0018      	movs	r0, r3
   32f92:	9304      	str	r3, [sp, #16]
   32f94:	f7ff fa18 	bl	323c8 <__udivsi3>
   32f98:	9b01      	ldr	r3, [sp, #4]
   32f9a:	0005      	movs	r5, r0
   32f9c:	4343      	muls	r3, r0
   32f9e:	0039      	movs	r1, r7
   32fa0:	9804      	ldr	r0, [sp, #16]
   32fa2:	4699      	mov	r9, r3
   32fa4:	f7ff fa96 	bl	324d4 <__aeabi_uidivmod>
   32fa8:	0433      	lsls	r3, r6, #16
   32faa:	0409      	lsls	r1, r1, #16
   32fac:	0c1b      	lsrs	r3, r3, #16
   32fae:	430b      	orrs	r3, r1
   32fb0:	4599      	cmp	r9, r3
   32fb2:	d909      	bls.n	32fc8 <__aeabi_ddiv+0x2a0>
   32fb4:	4443      	add	r3, r8
   32fb6:	1e6a      	subs	r2, r5, #1
   32fb8:	4598      	cmp	r8, r3
   32fba:	d900      	bls.n	32fbe <__aeabi_ddiv+0x296>
   32fbc:	e11a      	b.n	331f4 <__aeabi_ddiv+0x4cc>
   32fbe:	4599      	cmp	r9, r3
   32fc0:	d800      	bhi.n	32fc4 <__aeabi_ddiv+0x29c>
   32fc2:	e117      	b.n	331f4 <__aeabi_ddiv+0x4cc>
   32fc4:	3d02      	subs	r5, #2
   32fc6:	4443      	add	r3, r8
   32fc8:	464a      	mov	r2, r9
   32fca:	1a9b      	subs	r3, r3, r2
   32fcc:	465a      	mov	r2, fp
   32fce:	0412      	lsls	r2, r2, #16
   32fd0:	432a      	orrs	r2, r5
   32fd2:	9903      	ldr	r1, [sp, #12]
   32fd4:	4693      	mov	fp, r2
   32fd6:	0c10      	lsrs	r0, r2, #16
   32fd8:	0c0a      	lsrs	r2, r1, #16
   32fda:	4691      	mov	r9, r2
   32fdc:	0409      	lsls	r1, r1, #16
   32fde:	465a      	mov	r2, fp
   32fe0:	0c09      	lsrs	r1, r1, #16
   32fe2:	464e      	mov	r6, r9
   32fe4:	000d      	movs	r5, r1
   32fe6:	0412      	lsls	r2, r2, #16
   32fe8:	0c12      	lsrs	r2, r2, #16
   32fea:	4345      	muls	r5, r0
   32fec:	9105      	str	r1, [sp, #20]
   32fee:	4351      	muls	r1, r2
   32ff0:	4372      	muls	r2, r6
   32ff2:	4370      	muls	r0, r6
   32ff4:	1952      	adds	r2, r2, r5
   32ff6:	0c0e      	lsrs	r6, r1, #16
   32ff8:	18b2      	adds	r2, r6, r2
   32ffa:	4295      	cmp	r5, r2
   32ffc:	d903      	bls.n	33006 <__aeabi_ddiv+0x2de>
   32ffe:	2580      	movs	r5, #128	; 0x80
   33000:	026d      	lsls	r5, r5, #9
   33002:	46ac      	mov	ip, r5
   33004:	4460      	add	r0, ip
   33006:	0c15      	lsrs	r5, r2, #16
   33008:	0409      	lsls	r1, r1, #16
   3300a:	0412      	lsls	r2, r2, #16
   3300c:	0c09      	lsrs	r1, r1, #16
   3300e:	1828      	adds	r0, r5, r0
   33010:	1852      	adds	r2, r2, r1
   33012:	4283      	cmp	r3, r0
   33014:	d200      	bcs.n	33018 <__aeabi_ddiv+0x2f0>
   33016:	e0ce      	b.n	331b6 <__aeabi_ddiv+0x48e>
   33018:	d100      	bne.n	3301c <__aeabi_ddiv+0x2f4>
   3301a:	e0c8      	b.n	331ae <__aeabi_ddiv+0x486>
   3301c:	1a1d      	subs	r5, r3, r0
   3301e:	4653      	mov	r3, sl
   33020:	1a9e      	subs	r6, r3, r2
   33022:	45b2      	cmp	sl, r6
   33024:	4192      	sbcs	r2, r2
   33026:	4252      	negs	r2, r2
   33028:	1aab      	subs	r3, r5, r2
   3302a:	469a      	mov	sl, r3
   3302c:	4598      	cmp	r8, r3
   3302e:	d100      	bne.n	33032 <__aeabi_ddiv+0x30a>
   33030:	e117      	b.n	33262 <__aeabi_ddiv+0x53a>
   33032:	0039      	movs	r1, r7
   33034:	0018      	movs	r0, r3
   33036:	f7ff f9c7 	bl	323c8 <__udivsi3>
   3303a:	9b01      	ldr	r3, [sp, #4]
   3303c:	0005      	movs	r5, r0
   3303e:	4343      	muls	r3, r0
   33040:	0039      	movs	r1, r7
   33042:	4650      	mov	r0, sl
   33044:	9304      	str	r3, [sp, #16]
   33046:	f7ff fa45 	bl	324d4 <__aeabi_uidivmod>
   3304a:	9804      	ldr	r0, [sp, #16]
   3304c:	040b      	lsls	r3, r1, #16
   3304e:	0c31      	lsrs	r1, r6, #16
   33050:	4319      	orrs	r1, r3
   33052:	4288      	cmp	r0, r1
   33054:	d909      	bls.n	3306a <__aeabi_ddiv+0x342>
   33056:	4441      	add	r1, r8
   33058:	1e6b      	subs	r3, r5, #1
   3305a:	4588      	cmp	r8, r1
   3305c:	d900      	bls.n	33060 <__aeabi_ddiv+0x338>
   3305e:	e107      	b.n	33270 <__aeabi_ddiv+0x548>
   33060:	4288      	cmp	r0, r1
   33062:	d800      	bhi.n	33066 <__aeabi_ddiv+0x33e>
   33064:	e104      	b.n	33270 <__aeabi_ddiv+0x548>
   33066:	3d02      	subs	r5, #2
   33068:	4441      	add	r1, r8
   3306a:	9b04      	ldr	r3, [sp, #16]
   3306c:	1acb      	subs	r3, r1, r3
   3306e:	0018      	movs	r0, r3
   33070:	0039      	movs	r1, r7
   33072:	9304      	str	r3, [sp, #16]
   33074:	f7ff f9a8 	bl	323c8 <__udivsi3>
   33078:	9b01      	ldr	r3, [sp, #4]
   3307a:	4682      	mov	sl, r0
   3307c:	4343      	muls	r3, r0
   3307e:	0039      	movs	r1, r7
   33080:	9804      	ldr	r0, [sp, #16]
   33082:	9301      	str	r3, [sp, #4]
   33084:	f7ff fa26 	bl	324d4 <__aeabi_uidivmod>
   33088:	9801      	ldr	r0, [sp, #4]
   3308a:	040b      	lsls	r3, r1, #16
   3308c:	0431      	lsls	r1, r6, #16
   3308e:	0c09      	lsrs	r1, r1, #16
   33090:	4319      	orrs	r1, r3
   33092:	4288      	cmp	r0, r1
   33094:	d90d      	bls.n	330b2 <__aeabi_ddiv+0x38a>
   33096:	4653      	mov	r3, sl
   33098:	4441      	add	r1, r8
   3309a:	3b01      	subs	r3, #1
   3309c:	4588      	cmp	r8, r1
   3309e:	d900      	bls.n	330a2 <__aeabi_ddiv+0x37a>
   330a0:	e0e8      	b.n	33274 <__aeabi_ddiv+0x54c>
   330a2:	4288      	cmp	r0, r1
   330a4:	d800      	bhi.n	330a8 <__aeabi_ddiv+0x380>
   330a6:	e0e5      	b.n	33274 <__aeabi_ddiv+0x54c>
   330a8:	2302      	movs	r3, #2
   330aa:	425b      	negs	r3, r3
   330ac:	469c      	mov	ip, r3
   330ae:	4441      	add	r1, r8
   330b0:	44e2      	add	sl, ip
   330b2:	9b01      	ldr	r3, [sp, #4]
   330b4:	042d      	lsls	r5, r5, #16
   330b6:	1ace      	subs	r6, r1, r3
   330b8:	4651      	mov	r1, sl
   330ba:	4329      	orrs	r1, r5
   330bc:	9d05      	ldr	r5, [sp, #20]
   330be:	464f      	mov	r7, r9
   330c0:	002a      	movs	r2, r5
   330c2:	040b      	lsls	r3, r1, #16
   330c4:	0c08      	lsrs	r0, r1, #16
   330c6:	0c1b      	lsrs	r3, r3, #16
   330c8:	435a      	muls	r2, r3
   330ca:	4345      	muls	r5, r0
   330cc:	437b      	muls	r3, r7
   330ce:	4378      	muls	r0, r7
   330d0:	195b      	adds	r3, r3, r5
   330d2:	0c17      	lsrs	r7, r2, #16
   330d4:	18fb      	adds	r3, r7, r3
   330d6:	429d      	cmp	r5, r3
   330d8:	d903      	bls.n	330e2 <__aeabi_ddiv+0x3ba>
   330da:	2580      	movs	r5, #128	; 0x80
   330dc:	026d      	lsls	r5, r5, #9
   330de:	46ac      	mov	ip, r5
   330e0:	4460      	add	r0, ip
   330e2:	0c1d      	lsrs	r5, r3, #16
   330e4:	0412      	lsls	r2, r2, #16
   330e6:	041b      	lsls	r3, r3, #16
   330e8:	0c12      	lsrs	r2, r2, #16
   330ea:	1828      	adds	r0, r5, r0
   330ec:	189b      	adds	r3, r3, r2
   330ee:	4286      	cmp	r6, r0
   330f0:	d200      	bcs.n	330f4 <__aeabi_ddiv+0x3cc>
   330f2:	e093      	b.n	3321c <__aeabi_ddiv+0x4f4>
   330f4:	d100      	bne.n	330f8 <__aeabi_ddiv+0x3d0>
   330f6:	e08e      	b.n	33216 <__aeabi_ddiv+0x4ee>
   330f8:	2301      	movs	r3, #1
   330fa:	4319      	orrs	r1, r3
   330fc:	4ba0      	ldr	r3, [pc, #640]	; (33380 <__aeabi_ddiv+0x658>)
   330fe:	18e3      	adds	r3, r4, r3
   33100:	2b00      	cmp	r3, #0
   33102:	dc00      	bgt.n	33106 <__aeabi_ddiv+0x3de>
   33104:	e099      	b.n	3323a <__aeabi_ddiv+0x512>
   33106:	074a      	lsls	r2, r1, #29
   33108:	d000      	beq.n	3310c <__aeabi_ddiv+0x3e4>
   3310a:	e09e      	b.n	3324a <__aeabi_ddiv+0x522>
   3310c:	465a      	mov	r2, fp
   3310e:	01d2      	lsls	r2, r2, #7
   33110:	d506      	bpl.n	33120 <__aeabi_ddiv+0x3f8>
   33112:	465a      	mov	r2, fp
   33114:	4b9b      	ldr	r3, [pc, #620]	; (33384 <__aeabi_ddiv+0x65c>)
   33116:	401a      	ands	r2, r3
   33118:	2380      	movs	r3, #128	; 0x80
   3311a:	4693      	mov	fp, r2
   3311c:	00db      	lsls	r3, r3, #3
   3311e:	18e3      	adds	r3, r4, r3
   33120:	4a99      	ldr	r2, [pc, #612]	; (33388 <__aeabi_ddiv+0x660>)
   33122:	4293      	cmp	r3, r2
   33124:	dd68      	ble.n	331f8 <__aeabi_ddiv+0x4d0>
   33126:	2301      	movs	r3, #1
   33128:	9a02      	ldr	r2, [sp, #8]
   3312a:	4c98      	ldr	r4, [pc, #608]	; (3338c <__aeabi_ddiv+0x664>)
   3312c:	401a      	ands	r2, r3
   3312e:	2300      	movs	r3, #0
   33130:	4694      	mov	ip, r2
   33132:	4698      	mov	r8, r3
   33134:	2200      	movs	r2, #0
   33136:	e6c5      	b.n	32ec4 <__aeabi_ddiv+0x19c>
   33138:	2280      	movs	r2, #128	; 0x80
   3313a:	464b      	mov	r3, r9
   3313c:	0312      	lsls	r2, r2, #12
   3313e:	4213      	tst	r3, r2
   33140:	d00a      	beq.n	33158 <__aeabi_ddiv+0x430>
   33142:	465b      	mov	r3, fp
   33144:	4213      	tst	r3, r2
   33146:	d106      	bne.n	33156 <__aeabi_ddiv+0x42e>
   33148:	431a      	orrs	r2, r3
   3314a:	0312      	lsls	r2, r2, #12
   3314c:	0b12      	lsrs	r2, r2, #12
   3314e:	46ac      	mov	ip, r5
   33150:	4688      	mov	r8, r1
   33152:	4c8e      	ldr	r4, [pc, #568]	; (3338c <__aeabi_ddiv+0x664>)
   33154:	e6b6      	b.n	32ec4 <__aeabi_ddiv+0x19c>
   33156:	464b      	mov	r3, r9
   33158:	431a      	orrs	r2, r3
   3315a:	0312      	lsls	r2, r2, #12
   3315c:	0b12      	lsrs	r2, r2, #12
   3315e:	46bc      	mov	ip, r7
   33160:	4c8a      	ldr	r4, [pc, #552]	; (3338c <__aeabi_ddiv+0x664>)
   33162:	e6af      	b.n	32ec4 <__aeabi_ddiv+0x19c>
   33164:	0003      	movs	r3, r0
   33166:	465a      	mov	r2, fp
   33168:	3b28      	subs	r3, #40	; 0x28
   3316a:	409a      	lsls	r2, r3
   3316c:	2300      	movs	r3, #0
   3316e:	4691      	mov	r9, r2
   33170:	4698      	mov	r8, r3
   33172:	e657      	b.n	32e24 <__aeabi_ddiv+0xfc>
   33174:	4658      	mov	r0, fp
   33176:	f000 ff0d 	bl	33f94 <__clzsi2>
   3317a:	3020      	adds	r0, #32
   3317c:	e640      	b.n	32e00 <__aeabi_ddiv+0xd8>
   3317e:	0003      	movs	r3, r0
   33180:	4652      	mov	r2, sl
   33182:	3b28      	subs	r3, #40	; 0x28
   33184:	409a      	lsls	r2, r3
   33186:	2100      	movs	r1, #0
   33188:	4693      	mov	fp, r2
   3318a:	e677      	b.n	32e7c <__aeabi_ddiv+0x154>
   3318c:	f000 ff02 	bl	33f94 <__clzsi2>
   33190:	3020      	adds	r0, #32
   33192:	e65f      	b.n	32e54 <__aeabi_ddiv+0x12c>
   33194:	4588      	cmp	r8, r1
   33196:	d200      	bcs.n	3319a <__aeabi_ddiv+0x472>
   33198:	e6c7      	b.n	32f2a <__aeabi_ddiv+0x202>
   3319a:	464b      	mov	r3, r9
   3319c:	07de      	lsls	r6, r3, #31
   3319e:	085d      	lsrs	r5, r3, #1
   331a0:	4643      	mov	r3, r8
   331a2:	085b      	lsrs	r3, r3, #1
   331a4:	431e      	orrs	r6, r3
   331a6:	4643      	mov	r3, r8
   331a8:	07db      	lsls	r3, r3, #31
   331aa:	469a      	mov	sl, r3
   331ac:	e6c2      	b.n	32f34 <__aeabi_ddiv+0x20c>
   331ae:	2500      	movs	r5, #0
   331b0:	4592      	cmp	sl, r2
   331b2:	d300      	bcc.n	331b6 <__aeabi_ddiv+0x48e>
   331b4:	e733      	b.n	3301e <__aeabi_ddiv+0x2f6>
   331b6:	9e03      	ldr	r6, [sp, #12]
   331b8:	4659      	mov	r1, fp
   331ba:	46b4      	mov	ip, r6
   331bc:	44e2      	add	sl, ip
   331be:	45b2      	cmp	sl, r6
   331c0:	41ad      	sbcs	r5, r5
   331c2:	426d      	negs	r5, r5
   331c4:	4445      	add	r5, r8
   331c6:	18eb      	adds	r3, r5, r3
   331c8:	3901      	subs	r1, #1
   331ca:	4598      	cmp	r8, r3
   331cc:	d207      	bcs.n	331de <__aeabi_ddiv+0x4b6>
   331ce:	4298      	cmp	r0, r3
   331d0:	d900      	bls.n	331d4 <__aeabi_ddiv+0x4ac>
   331d2:	e07f      	b.n	332d4 <__aeabi_ddiv+0x5ac>
   331d4:	d100      	bne.n	331d8 <__aeabi_ddiv+0x4b0>
   331d6:	e0bc      	b.n	33352 <__aeabi_ddiv+0x62a>
   331d8:	1a1d      	subs	r5, r3, r0
   331da:	468b      	mov	fp, r1
   331dc:	e71f      	b.n	3301e <__aeabi_ddiv+0x2f6>
   331de:	4598      	cmp	r8, r3
   331e0:	d1fa      	bne.n	331d8 <__aeabi_ddiv+0x4b0>
   331e2:	9d03      	ldr	r5, [sp, #12]
   331e4:	4555      	cmp	r5, sl
   331e6:	d9f2      	bls.n	331ce <__aeabi_ddiv+0x4a6>
   331e8:	4643      	mov	r3, r8
   331ea:	468b      	mov	fp, r1
   331ec:	1a1d      	subs	r5, r3, r0
   331ee:	e716      	b.n	3301e <__aeabi_ddiv+0x2f6>
   331f0:	469b      	mov	fp, r3
   331f2:	e6ca      	b.n	32f8a <__aeabi_ddiv+0x262>
   331f4:	0015      	movs	r5, r2
   331f6:	e6e7      	b.n	32fc8 <__aeabi_ddiv+0x2a0>
   331f8:	465a      	mov	r2, fp
   331fa:	08c9      	lsrs	r1, r1, #3
   331fc:	0752      	lsls	r2, r2, #29
   331fe:	430a      	orrs	r2, r1
   33200:	055b      	lsls	r3, r3, #21
   33202:	4690      	mov	r8, r2
   33204:	0d5c      	lsrs	r4, r3, #21
   33206:	465a      	mov	r2, fp
   33208:	2301      	movs	r3, #1
   3320a:	9902      	ldr	r1, [sp, #8]
   3320c:	0252      	lsls	r2, r2, #9
   3320e:	4019      	ands	r1, r3
   33210:	0b12      	lsrs	r2, r2, #12
   33212:	468c      	mov	ip, r1
   33214:	e656      	b.n	32ec4 <__aeabi_ddiv+0x19c>
   33216:	2b00      	cmp	r3, #0
   33218:	d100      	bne.n	3321c <__aeabi_ddiv+0x4f4>
   3321a:	e76f      	b.n	330fc <__aeabi_ddiv+0x3d4>
   3321c:	4446      	add	r6, r8
   3321e:	1e4a      	subs	r2, r1, #1
   33220:	45b0      	cmp	r8, r6
   33222:	d929      	bls.n	33278 <__aeabi_ddiv+0x550>
   33224:	0011      	movs	r1, r2
   33226:	4286      	cmp	r6, r0
   33228:	d000      	beq.n	3322c <__aeabi_ddiv+0x504>
   3322a:	e765      	b.n	330f8 <__aeabi_ddiv+0x3d0>
   3322c:	9a03      	ldr	r2, [sp, #12]
   3322e:	4293      	cmp	r3, r2
   33230:	d000      	beq.n	33234 <__aeabi_ddiv+0x50c>
   33232:	e761      	b.n	330f8 <__aeabi_ddiv+0x3d0>
   33234:	e762      	b.n	330fc <__aeabi_ddiv+0x3d4>
   33236:	2101      	movs	r1, #1
   33238:	4249      	negs	r1, r1
   3323a:	2001      	movs	r0, #1
   3323c:	1ac2      	subs	r2, r0, r3
   3323e:	2a38      	cmp	r2, #56	; 0x38
   33240:	dd21      	ble.n	33286 <__aeabi_ddiv+0x55e>
   33242:	9b02      	ldr	r3, [sp, #8]
   33244:	4003      	ands	r3, r0
   33246:	469c      	mov	ip, r3
   33248:	e638      	b.n	32ebc <__aeabi_ddiv+0x194>
   3324a:	220f      	movs	r2, #15
   3324c:	400a      	ands	r2, r1
   3324e:	2a04      	cmp	r2, #4
   33250:	d100      	bne.n	33254 <__aeabi_ddiv+0x52c>
   33252:	e75b      	b.n	3310c <__aeabi_ddiv+0x3e4>
   33254:	000a      	movs	r2, r1
   33256:	1d11      	adds	r1, r2, #4
   33258:	4291      	cmp	r1, r2
   3325a:	4192      	sbcs	r2, r2
   3325c:	4252      	negs	r2, r2
   3325e:	4493      	add	fp, r2
   33260:	e754      	b.n	3310c <__aeabi_ddiv+0x3e4>
   33262:	4b47      	ldr	r3, [pc, #284]	; (33380 <__aeabi_ddiv+0x658>)
   33264:	18e3      	adds	r3, r4, r3
   33266:	2b00      	cmp	r3, #0
   33268:	dde5      	ble.n	33236 <__aeabi_ddiv+0x50e>
   3326a:	2201      	movs	r2, #1
   3326c:	4252      	negs	r2, r2
   3326e:	e7f2      	b.n	33256 <__aeabi_ddiv+0x52e>
   33270:	001d      	movs	r5, r3
   33272:	e6fa      	b.n	3306a <__aeabi_ddiv+0x342>
   33274:	469a      	mov	sl, r3
   33276:	e71c      	b.n	330b2 <__aeabi_ddiv+0x38a>
   33278:	42b0      	cmp	r0, r6
   3327a:	d839      	bhi.n	332f0 <__aeabi_ddiv+0x5c8>
   3327c:	d06e      	beq.n	3335c <__aeabi_ddiv+0x634>
   3327e:	0011      	movs	r1, r2
   33280:	e73a      	b.n	330f8 <__aeabi_ddiv+0x3d0>
   33282:	9302      	str	r3, [sp, #8]
   33284:	e73a      	b.n	330fc <__aeabi_ddiv+0x3d4>
   33286:	2a1f      	cmp	r2, #31
   33288:	dc3c      	bgt.n	33304 <__aeabi_ddiv+0x5dc>
   3328a:	2320      	movs	r3, #32
   3328c:	1a9b      	subs	r3, r3, r2
   3328e:	000c      	movs	r4, r1
   33290:	4658      	mov	r0, fp
   33292:	4099      	lsls	r1, r3
   33294:	4098      	lsls	r0, r3
   33296:	1e4b      	subs	r3, r1, #1
   33298:	4199      	sbcs	r1, r3
   3329a:	465b      	mov	r3, fp
   3329c:	40d4      	lsrs	r4, r2
   3329e:	40d3      	lsrs	r3, r2
   332a0:	4320      	orrs	r0, r4
   332a2:	4308      	orrs	r0, r1
   332a4:	001a      	movs	r2, r3
   332a6:	0743      	lsls	r3, r0, #29
   332a8:	d009      	beq.n	332be <__aeabi_ddiv+0x596>
   332aa:	230f      	movs	r3, #15
   332ac:	4003      	ands	r3, r0
   332ae:	2b04      	cmp	r3, #4
   332b0:	d005      	beq.n	332be <__aeabi_ddiv+0x596>
   332b2:	0001      	movs	r1, r0
   332b4:	1d08      	adds	r0, r1, #4
   332b6:	4288      	cmp	r0, r1
   332b8:	419b      	sbcs	r3, r3
   332ba:	425b      	negs	r3, r3
   332bc:	18d2      	adds	r2, r2, r3
   332be:	0213      	lsls	r3, r2, #8
   332c0:	d53a      	bpl.n	33338 <__aeabi_ddiv+0x610>
   332c2:	2301      	movs	r3, #1
   332c4:	9a02      	ldr	r2, [sp, #8]
   332c6:	2401      	movs	r4, #1
   332c8:	401a      	ands	r2, r3
   332ca:	2300      	movs	r3, #0
   332cc:	4694      	mov	ip, r2
   332ce:	4698      	mov	r8, r3
   332d0:	2200      	movs	r2, #0
   332d2:	e5f7      	b.n	32ec4 <__aeabi_ddiv+0x19c>
   332d4:	2102      	movs	r1, #2
   332d6:	4249      	negs	r1, r1
   332d8:	468c      	mov	ip, r1
   332da:	9d03      	ldr	r5, [sp, #12]
   332dc:	44e3      	add	fp, ip
   332de:	46ac      	mov	ip, r5
   332e0:	44e2      	add	sl, ip
   332e2:	45aa      	cmp	sl, r5
   332e4:	41ad      	sbcs	r5, r5
   332e6:	426d      	negs	r5, r5
   332e8:	4445      	add	r5, r8
   332ea:	18ed      	adds	r5, r5, r3
   332ec:	1a2d      	subs	r5, r5, r0
   332ee:	e696      	b.n	3301e <__aeabi_ddiv+0x2f6>
   332f0:	1e8a      	subs	r2, r1, #2
   332f2:	9903      	ldr	r1, [sp, #12]
   332f4:	004d      	lsls	r5, r1, #1
   332f6:	428d      	cmp	r5, r1
   332f8:	4189      	sbcs	r1, r1
   332fa:	4249      	negs	r1, r1
   332fc:	4441      	add	r1, r8
   332fe:	1876      	adds	r6, r6, r1
   33300:	9503      	str	r5, [sp, #12]
   33302:	e78f      	b.n	33224 <__aeabi_ddiv+0x4fc>
   33304:	201f      	movs	r0, #31
   33306:	4240      	negs	r0, r0
   33308:	1ac3      	subs	r3, r0, r3
   3330a:	4658      	mov	r0, fp
   3330c:	40d8      	lsrs	r0, r3
   3330e:	0003      	movs	r3, r0
   33310:	2a20      	cmp	r2, #32
   33312:	d028      	beq.n	33366 <__aeabi_ddiv+0x63e>
   33314:	2040      	movs	r0, #64	; 0x40
   33316:	465d      	mov	r5, fp
   33318:	1a82      	subs	r2, r0, r2
   3331a:	4095      	lsls	r5, r2
   3331c:	4329      	orrs	r1, r5
   3331e:	1e4a      	subs	r2, r1, #1
   33320:	4191      	sbcs	r1, r2
   33322:	4319      	orrs	r1, r3
   33324:	2307      	movs	r3, #7
   33326:	2200      	movs	r2, #0
   33328:	400b      	ands	r3, r1
   3332a:	d009      	beq.n	33340 <__aeabi_ddiv+0x618>
   3332c:	230f      	movs	r3, #15
   3332e:	2200      	movs	r2, #0
   33330:	400b      	ands	r3, r1
   33332:	0008      	movs	r0, r1
   33334:	2b04      	cmp	r3, #4
   33336:	d1bd      	bne.n	332b4 <__aeabi_ddiv+0x58c>
   33338:	0001      	movs	r1, r0
   3333a:	0753      	lsls	r3, r2, #29
   3333c:	0252      	lsls	r2, r2, #9
   3333e:	0b12      	lsrs	r2, r2, #12
   33340:	08c9      	lsrs	r1, r1, #3
   33342:	4319      	orrs	r1, r3
   33344:	2301      	movs	r3, #1
   33346:	4688      	mov	r8, r1
   33348:	9902      	ldr	r1, [sp, #8]
   3334a:	2400      	movs	r4, #0
   3334c:	4019      	ands	r1, r3
   3334e:	468c      	mov	ip, r1
   33350:	e5b8      	b.n	32ec4 <__aeabi_ddiv+0x19c>
   33352:	4552      	cmp	r2, sl
   33354:	d8be      	bhi.n	332d4 <__aeabi_ddiv+0x5ac>
   33356:	468b      	mov	fp, r1
   33358:	2500      	movs	r5, #0
   3335a:	e660      	b.n	3301e <__aeabi_ddiv+0x2f6>
   3335c:	9d03      	ldr	r5, [sp, #12]
   3335e:	429d      	cmp	r5, r3
   33360:	d3c6      	bcc.n	332f0 <__aeabi_ddiv+0x5c8>
   33362:	0011      	movs	r1, r2
   33364:	e762      	b.n	3322c <__aeabi_ddiv+0x504>
   33366:	2500      	movs	r5, #0
   33368:	e7d8      	b.n	3331c <__aeabi_ddiv+0x5f4>
   3336a:	2280      	movs	r2, #128	; 0x80
   3336c:	465b      	mov	r3, fp
   3336e:	0312      	lsls	r2, r2, #12
   33370:	431a      	orrs	r2, r3
   33372:	9b01      	ldr	r3, [sp, #4]
   33374:	0312      	lsls	r2, r2, #12
   33376:	0b12      	lsrs	r2, r2, #12
   33378:	469c      	mov	ip, r3
   3337a:	4688      	mov	r8, r1
   3337c:	4c03      	ldr	r4, [pc, #12]	; (3338c <__aeabi_ddiv+0x664>)
   3337e:	e5a1      	b.n	32ec4 <__aeabi_ddiv+0x19c>
   33380:	000003ff 	.word	0x000003ff
   33384:	feffffff 	.word	0xfeffffff
   33388:	000007fe 	.word	0x000007fe
   3338c:	000007ff 	.word	0x000007ff

00033390 <__aeabi_dmul>:
   33390:	b5f0      	push	{r4, r5, r6, r7, lr}
   33392:	4657      	mov	r7, sl
   33394:	4645      	mov	r5, r8
   33396:	46de      	mov	lr, fp
   33398:	464e      	mov	r6, r9
   3339a:	b5e0      	push	{r5, r6, r7, lr}
   3339c:	030c      	lsls	r4, r1, #12
   3339e:	4698      	mov	r8, r3
   333a0:	004e      	lsls	r6, r1, #1
   333a2:	0b23      	lsrs	r3, r4, #12
   333a4:	b087      	sub	sp, #28
   333a6:	0007      	movs	r7, r0
   333a8:	4692      	mov	sl, r2
   333aa:	469b      	mov	fp, r3
   333ac:	0d76      	lsrs	r6, r6, #21
   333ae:	0fcd      	lsrs	r5, r1, #31
   333b0:	2e00      	cmp	r6, #0
   333b2:	d06b      	beq.n	3348c <__aeabi_dmul+0xfc>
   333b4:	4b6d      	ldr	r3, [pc, #436]	; (3356c <__aeabi_dmul+0x1dc>)
   333b6:	429e      	cmp	r6, r3
   333b8:	d035      	beq.n	33426 <__aeabi_dmul+0x96>
   333ba:	2480      	movs	r4, #128	; 0x80
   333bc:	465b      	mov	r3, fp
   333be:	0f42      	lsrs	r2, r0, #29
   333c0:	0424      	lsls	r4, r4, #16
   333c2:	00db      	lsls	r3, r3, #3
   333c4:	4314      	orrs	r4, r2
   333c6:	431c      	orrs	r4, r3
   333c8:	00c3      	lsls	r3, r0, #3
   333ca:	4699      	mov	r9, r3
   333cc:	4b68      	ldr	r3, [pc, #416]	; (33570 <__aeabi_dmul+0x1e0>)
   333ce:	46a3      	mov	fp, r4
   333d0:	469c      	mov	ip, r3
   333d2:	2300      	movs	r3, #0
   333d4:	2700      	movs	r7, #0
   333d6:	4466      	add	r6, ip
   333d8:	9302      	str	r3, [sp, #8]
   333da:	4643      	mov	r3, r8
   333dc:	031c      	lsls	r4, r3, #12
   333de:	005a      	lsls	r2, r3, #1
   333e0:	0fdb      	lsrs	r3, r3, #31
   333e2:	4650      	mov	r0, sl
   333e4:	0b24      	lsrs	r4, r4, #12
   333e6:	0d52      	lsrs	r2, r2, #21
   333e8:	4698      	mov	r8, r3
   333ea:	d100      	bne.n	333ee <__aeabi_dmul+0x5e>
   333ec:	e076      	b.n	334dc <__aeabi_dmul+0x14c>
   333ee:	4b5f      	ldr	r3, [pc, #380]	; (3356c <__aeabi_dmul+0x1dc>)
   333f0:	429a      	cmp	r2, r3
   333f2:	d06d      	beq.n	334d0 <__aeabi_dmul+0x140>
   333f4:	2380      	movs	r3, #128	; 0x80
   333f6:	0f41      	lsrs	r1, r0, #29
   333f8:	041b      	lsls	r3, r3, #16
   333fa:	430b      	orrs	r3, r1
   333fc:	495c      	ldr	r1, [pc, #368]	; (33570 <__aeabi_dmul+0x1e0>)
   333fe:	00e4      	lsls	r4, r4, #3
   33400:	468c      	mov	ip, r1
   33402:	431c      	orrs	r4, r3
   33404:	00c3      	lsls	r3, r0, #3
   33406:	2000      	movs	r0, #0
   33408:	4462      	add	r2, ip
   3340a:	4641      	mov	r1, r8
   3340c:	18b6      	adds	r6, r6, r2
   3340e:	4069      	eors	r1, r5
   33410:	1c72      	adds	r2, r6, #1
   33412:	9101      	str	r1, [sp, #4]
   33414:	4694      	mov	ip, r2
   33416:	4307      	orrs	r7, r0
   33418:	2f0f      	cmp	r7, #15
   3341a:	d900      	bls.n	3341e <__aeabi_dmul+0x8e>
   3341c:	e0b0      	b.n	33580 <__aeabi_dmul+0x1f0>
   3341e:	4a55      	ldr	r2, [pc, #340]	; (33574 <__aeabi_dmul+0x1e4>)
   33420:	00bf      	lsls	r7, r7, #2
   33422:	59d2      	ldr	r2, [r2, r7]
   33424:	4697      	mov	pc, r2
   33426:	465b      	mov	r3, fp
   33428:	4303      	orrs	r3, r0
   3342a:	4699      	mov	r9, r3
   3342c:	d000      	beq.n	33430 <__aeabi_dmul+0xa0>
   3342e:	e087      	b.n	33540 <__aeabi_dmul+0x1b0>
   33430:	2300      	movs	r3, #0
   33432:	469b      	mov	fp, r3
   33434:	3302      	adds	r3, #2
   33436:	2708      	movs	r7, #8
   33438:	9302      	str	r3, [sp, #8]
   3343a:	e7ce      	b.n	333da <__aeabi_dmul+0x4a>
   3343c:	4642      	mov	r2, r8
   3343e:	9201      	str	r2, [sp, #4]
   33440:	2802      	cmp	r0, #2
   33442:	d067      	beq.n	33514 <__aeabi_dmul+0x184>
   33444:	2803      	cmp	r0, #3
   33446:	d100      	bne.n	3344a <__aeabi_dmul+0xba>
   33448:	e20e      	b.n	33868 <__aeabi_dmul+0x4d8>
   3344a:	2801      	cmp	r0, #1
   3344c:	d000      	beq.n	33450 <__aeabi_dmul+0xc0>
   3344e:	e162      	b.n	33716 <__aeabi_dmul+0x386>
   33450:	2300      	movs	r3, #0
   33452:	2400      	movs	r4, #0
   33454:	2200      	movs	r2, #0
   33456:	4699      	mov	r9, r3
   33458:	9901      	ldr	r1, [sp, #4]
   3345a:	4001      	ands	r1, r0
   3345c:	b2cd      	uxtb	r5, r1
   3345e:	2100      	movs	r1, #0
   33460:	0312      	lsls	r2, r2, #12
   33462:	0d0b      	lsrs	r3, r1, #20
   33464:	0b12      	lsrs	r2, r2, #12
   33466:	051b      	lsls	r3, r3, #20
   33468:	4313      	orrs	r3, r2
   3346a:	4a43      	ldr	r2, [pc, #268]	; (33578 <__aeabi_dmul+0x1e8>)
   3346c:	0524      	lsls	r4, r4, #20
   3346e:	4013      	ands	r3, r2
   33470:	431c      	orrs	r4, r3
   33472:	0064      	lsls	r4, r4, #1
   33474:	07ed      	lsls	r5, r5, #31
   33476:	0864      	lsrs	r4, r4, #1
   33478:	432c      	orrs	r4, r5
   3347a:	4648      	mov	r0, r9
   3347c:	0021      	movs	r1, r4
   3347e:	b007      	add	sp, #28
   33480:	bc3c      	pop	{r2, r3, r4, r5}
   33482:	4690      	mov	r8, r2
   33484:	4699      	mov	r9, r3
   33486:	46a2      	mov	sl, r4
   33488:	46ab      	mov	fp, r5
   3348a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3348c:	4303      	orrs	r3, r0
   3348e:	4699      	mov	r9, r3
   33490:	d04f      	beq.n	33532 <__aeabi_dmul+0x1a2>
   33492:	465b      	mov	r3, fp
   33494:	2b00      	cmp	r3, #0
   33496:	d100      	bne.n	3349a <__aeabi_dmul+0x10a>
   33498:	e189      	b.n	337ae <__aeabi_dmul+0x41e>
   3349a:	4658      	mov	r0, fp
   3349c:	f000 fd7a 	bl	33f94 <__clzsi2>
   334a0:	0003      	movs	r3, r0
   334a2:	3b0b      	subs	r3, #11
   334a4:	2b1c      	cmp	r3, #28
   334a6:	dd00      	ble.n	334aa <__aeabi_dmul+0x11a>
   334a8:	e17a      	b.n	337a0 <__aeabi_dmul+0x410>
   334aa:	221d      	movs	r2, #29
   334ac:	1ad3      	subs	r3, r2, r3
   334ae:	003a      	movs	r2, r7
   334b0:	0001      	movs	r1, r0
   334b2:	465c      	mov	r4, fp
   334b4:	40da      	lsrs	r2, r3
   334b6:	3908      	subs	r1, #8
   334b8:	408c      	lsls	r4, r1
   334ba:	0013      	movs	r3, r2
   334bc:	408f      	lsls	r7, r1
   334be:	4323      	orrs	r3, r4
   334c0:	469b      	mov	fp, r3
   334c2:	46b9      	mov	r9, r7
   334c4:	2300      	movs	r3, #0
   334c6:	4e2d      	ldr	r6, [pc, #180]	; (3357c <__aeabi_dmul+0x1ec>)
   334c8:	2700      	movs	r7, #0
   334ca:	1a36      	subs	r6, r6, r0
   334cc:	9302      	str	r3, [sp, #8]
   334ce:	e784      	b.n	333da <__aeabi_dmul+0x4a>
   334d0:	4653      	mov	r3, sl
   334d2:	4323      	orrs	r3, r4
   334d4:	d12a      	bne.n	3352c <__aeabi_dmul+0x19c>
   334d6:	2400      	movs	r4, #0
   334d8:	2002      	movs	r0, #2
   334da:	e796      	b.n	3340a <__aeabi_dmul+0x7a>
   334dc:	4653      	mov	r3, sl
   334de:	4323      	orrs	r3, r4
   334e0:	d020      	beq.n	33524 <__aeabi_dmul+0x194>
   334e2:	2c00      	cmp	r4, #0
   334e4:	d100      	bne.n	334e8 <__aeabi_dmul+0x158>
   334e6:	e157      	b.n	33798 <__aeabi_dmul+0x408>
   334e8:	0020      	movs	r0, r4
   334ea:	f000 fd53 	bl	33f94 <__clzsi2>
   334ee:	0003      	movs	r3, r0
   334f0:	3b0b      	subs	r3, #11
   334f2:	2b1c      	cmp	r3, #28
   334f4:	dd00      	ble.n	334f8 <__aeabi_dmul+0x168>
   334f6:	e149      	b.n	3378c <__aeabi_dmul+0x3fc>
   334f8:	211d      	movs	r1, #29
   334fa:	1acb      	subs	r3, r1, r3
   334fc:	4651      	mov	r1, sl
   334fe:	0002      	movs	r2, r0
   33500:	40d9      	lsrs	r1, r3
   33502:	4653      	mov	r3, sl
   33504:	3a08      	subs	r2, #8
   33506:	4094      	lsls	r4, r2
   33508:	4093      	lsls	r3, r2
   3350a:	430c      	orrs	r4, r1
   3350c:	4a1b      	ldr	r2, [pc, #108]	; (3357c <__aeabi_dmul+0x1ec>)
   3350e:	1a12      	subs	r2, r2, r0
   33510:	2000      	movs	r0, #0
   33512:	e77a      	b.n	3340a <__aeabi_dmul+0x7a>
   33514:	2501      	movs	r5, #1
   33516:	9b01      	ldr	r3, [sp, #4]
   33518:	4c14      	ldr	r4, [pc, #80]	; (3356c <__aeabi_dmul+0x1dc>)
   3351a:	401d      	ands	r5, r3
   3351c:	2300      	movs	r3, #0
   3351e:	2200      	movs	r2, #0
   33520:	4699      	mov	r9, r3
   33522:	e79c      	b.n	3345e <__aeabi_dmul+0xce>
   33524:	2400      	movs	r4, #0
   33526:	2200      	movs	r2, #0
   33528:	2001      	movs	r0, #1
   3352a:	e76e      	b.n	3340a <__aeabi_dmul+0x7a>
   3352c:	4653      	mov	r3, sl
   3352e:	2003      	movs	r0, #3
   33530:	e76b      	b.n	3340a <__aeabi_dmul+0x7a>
   33532:	2300      	movs	r3, #0
   33534:	469b      	mov	fp, r3
   33536:	3301      	adds	r3, #1
   33538:	2704      	movs	r7, #4
   3353a:	2600      	movs	r6, #0
   3353c:	9302      	str	r3, [sp, #8]
   3353e:	e74c      	b.n	333da <__aeabi_dmul+0x4a>
   33540:	2303      	movs	r3, #3
   33542:	4681      	mov	r9, r0
   33544:	270c      	movs	r7, #12
   33546:	9302      	str	r3, [sp, #8]
   33548:	e747      	b.n	333da <__aeabi_dmul+0x4a>
   3354a:	2280      	movs	r2, #128	; 0x80
   3354c:	2300      	movs	r3, #0
   3354e:	2500      	movs	r5, #0
   33550:	0312      	lsls	r2, r2, #12
   33552:	4699      	mov	r9, r3
   33554:	4c05      	ldr	r4, [pc, #20]	; (3356c <__aeabi_dmul+0x1dc>)
   33556:	e782      	b.n	3345e <__aeabi_dmul+0xce>
   33558:	465c      	mov	r4, fp
   3355a:	464b      	mov	r3, r9
   3355c:	9802      	ldr	r0, [sp, #8]
   3355e:	e76f      	b.n	33440 <__aeabi_dmul+0xb0>
   33560:	465c      	mov	r4, fp
   33562:	464b      	mov	r3, r9
   33564:	9501      	str	r5, [sp, #4]
   33566:	9802      	ldr	r0, [sp, #8]
   33568:	e76a      	b.n	33440 <__aeabi_dmul+0xb0>
   3356a:	46c0      	nop			; (mov r8, r8)
   3356c:	000007ff 	.word	0x000007ff
   33570:	fffffc01 	.word	0xfffffc01
   33574:	0003ab48 	.word	0x0003ab48
   33578:	800fffff 	.word	0x800fffff
   3357c:	fffffc0d 	.word	0xfffffc0d
   33580:	464a      	mov	r2, r9
   33582:	4649      	mov	r1, r9
   33584:	0c17      	lsrs	r7, r2, #16
   33586:	0c1a      	lsrs	r2, r3, #16
   33588:	041b      	lsls	r3, r3, #16
   3358a:	0c1b      	lsrs	r3, r3, #16
   3358c:	0408      	lsls	r0, r1, #16
   3358e:	0019      	movs	r1, r3
   33590:	0c00      	lsrs	r0, r0, #16
   33592:	4341      	muls	r1, r0
   33594:	0015      	movs	r5, r2
   33596:	4688      	mov	r8, r1
   33598:	0019      	movs	r1, r3
   3359a:	437d      	muls	r5, r7
   3359c:	4379      	muls	r1, r7
   3359e:	9503      	str	r5, [sp, #12]
   335a0:	4689      	mov	r9, r1
   335a2:	0029      	movs	r1, r5
   335a4:	0015      	movs	r5, r2
   335a6:	4345      	muls	r5, r0
   335a8:	444d      	add	r5, r9
   335aa:	9502      	str	r5, [sp, #8]
   335ac:	4645      	mov	r5, r8
   335ae:	0c2d      	lsrs	r5, r5, #16
   335b0:	46aa      	mov	sl, r5
   335b2:	9d02      	ldr	r5, [sp, #8]
   335b4:	4455      	add	r5, sl
   335b6:	45a9      	cmp	r9, r5
   335b8:	d906      	bls.n	335c8 <__aeabi_dmul+0x238>
   335ba:	468a      	mov	sl, r1
   335bc:	2180      	movs	r1, #128	; 0x80
   335be:	0249      	lsls	r1, r1, #9
   335c0:	4689      	mov	r9, r1
   335c2:	44ca      	add	sl, r9
   335c4:	4651      	mov	r1, sl
   335c6:	9103      	str	r1, [sp, #12]
   335c8:	0c29      	lsrs	r1, r5, #16
   335ca:	9104      	str	r1, [sp, #16]
   335cc:	4641      	mov	r1, r8
   335ce:	0409      	lsls	r1, r1, #16
   335d0:	042d      	lsls	r5, r5, #16
   335d2:	0c09      	lsrs	r1, r1, #16
   335d4:	4688      	mov	r8, r1
   335d6:	0029      	movs	r1, r5
   335d8:	0c25      	lsrs	r5, r4, #16
   335da:	0424      	lsls	r4, r4, #16
   335dc:	4441      	add	r1, r8
   335de:	0c24      	lsrs	r4, r4, #16
   335e0:	9105      	str	r1, [sp, #20]
   335e2:	0021      	movs	r1, r4
   335e4:	4341      	muls	r1, r0
   335e6:	4688      	mov	r8, r1
   335e8:	0021      	movs	r1, r4
   335ea:	4379      	muls	r1, r7
   335ec:	468a      	mov	sl, r1
   335ee:	4368      	muls	r0, r5
   335f0:	4641      	mov	r1, r8
   335f2:	4450      	add	r0, sl
   335f4:	4681      	mov	r9, r0
   335f6:	0c08      	lsrs	r0, r1, #16
   335f8:	4448      	add	r0, r9
   335fa:	436f      	muls	r7, r5
   335fc:	4582      	cmp	sl, r0
   335fe:	d903      	bls.n	33608 <__aeabi_dmul+0x278>
   33600:	2180      	movs	r1, #128	; 0x80
   33602:	0249      	lsls	r1, r1, #9
   33604:	4689      	mov	r9, r1
   33606:	444f      	add	r7, r9
   33608:	0c01      	lsrs	r1, r0, #16
   3360a:	4689      	mov	r9, r1
   3360c:	0039      	movs	r1, r7
   3360e:	4449      	add	r1, r9
   33610:	9102      	str	r1, [sp, #8]
   33612:	4641      	mov	r1, r8
   33614:	040f      	lsls	r7, r1, #16
   33616:	9904      	ldr	r1, [sp, #16]
   33618:	0c3f      	lsrs	r7, r7, #16
   3361a:	4688      	mov	r8, r1
   3361c:	0400      	lsls	r0, r0, #16
   3361e:	19c0      	adds	r0, r0, r7
   33620:	4480      	add	r8, r0
   33622:	4641      	mov	r1, r8
   33624:	9104      	str	r1, [sp, #16]
   33626:	4659      	mov	r1, fp
   33628:	0c0f      	lsrs	r7, r1, #16
   3362a:	0409      	lsls	r1, r1, #16
   3362c:	0c09      	lsrs	r1, r1, #16
   3362e:	4688      	mov	r8, r1
   33630:	4359      	muls	r1, r3
   33632:	468a      	mov	sl, r1
   33634:	0039      	movs	r1, r7
   33636:	4351      	muls	r1, r2
   33638:	4689      	mov	r9, r1
   3363a:	4641      	mov	r1, r8
   3363c:	434a      	muls	r2, r1
   3363e:	4651      	mov	r1, sl
   33640:	0c09      	lsrs	r1, r1, #16
   33642:	468b      	mov	fp, r1
   33644:	437b      	muls	r3, r7
   33646:	18d2      	adds	r2, r2, r3
   33648:	445a      	add	r2, fp
   3364a:	4293      	cmp	r3, r2
   3364c:	d903      	bls.n	33656 <__aeabi_dmul+0x2c6>
   3364e:	2380      	movs	r3, #128	; 0x80
   33650:	025b      	lsls	r3, r3, #9
   33652:	469b      	mov	fp, r3
   33654:	44d9      	add	r9, fp
   33656:	4651      	mov	r1, sl
   33658:	0409      	lsls	r1, r1, #16
   3365a:	0c09      	lsrs	r1, r1, #16
   3365c:	468a      	mov	sl, r1
   3365e:	4641      	mov	r1, r8
   33660:	4361      	muls	r1, r4
   33662:	437c      	muls	r4, r7
   33664:	0c13      	lsrs	r3, r2, #16
   33666:	0412      	lsls	r2, r2, #16
   33668:	444b      	add	r3, r9
   3366a:	4452      	add	r2, sl
   3366c:	46a1      	mov	r9, r4
   3366e:	468a      	mov	sl, r1
   33670:	003c      	movs	r4, r7
   33672:	4641      	mov	r1, r8
   33674:	436c      	muls	r4, r5
   33676:	434d      	muls	r5, r1
   33678:	4651      	mov	r1, sl
   3367a:	444d      	add	r5, r9
   3367c:	0c0f      	lsrs	r7, r1, #16
   3367e:	197d      	adds	r5, r7, r5
   33680:	45a9      	cmp	r9, r5
   33682:	d903      	bls.n	3368c <__aeabi_dmul+0x2fc>
   33684:	2180      	movs	r1, #128	; 0x80
   33686:	0249      	lsls	r1, r1, #9
   33688:	4688      	mov	r8, r1
   3368a:	4444      	add	r4, r8
   3368c:	9f04      	ldr	r7, [sp, #16]
   3368e:	9903      	ldr	r1, [sp, #12]
   33690:	46b8      	mov	r8, r7
   33692:	4441      	add	r1, r8
   33694:	468b      	mov	fp, r1
   33696:	4583      	cmp	fp, r0
   33698:	4180      	sbcs	r0, r0
   3369a:	4241      	negs	r1, r0
   3369c:	4688      	mov	r8, r1
   3369e:	4651      	mov	r1, sl
   336a0:	0408      	lsls	r0, r1, #16
   336a2:	042f      	lsls	r7, r5, #16
   336a4:	0c00      	lsrs	r0, r0, #16
   336a6:	183f      	adds	r7, r7, r0
   336a8:	4658      	mov	r0, fp
   336aa:	9902      	ldr	r1, [sp, #8]
   336ac:	1810      	adds	r0, r2, r0
   336ae:	4689      	mov	r9, r1
   336b0:	4290      	cmp	r0, r2
   336b2:	4192      	sbcs	r2, r2
   336b4:	444f      	add	r7, r9
   336b6:	46ba      	mov	sl, r7
   336b8:	4252      	negs	r2, r2
   336ba:	4699      	mov	r9, r3
   336bc:	4693      	mov	fp, r2
   336be:	44c2      	add	sl, r8
   336c0:	44d1      	add	r9, sl
   336c2:	44cb      	add	fp, r9
   336c4:	428f      	cmp	r7, r1
   336c6:	41bf      	sbcs	r7, r7
   336c8:	45c2      	cmp	sl, r8
   336ca:	4189      	sbcs	r1, r1
   336cc:	4599      	cmp	r9, r3
   336ce:	419b      	sbcs	r3, r3
   336d0:	4593      	cmp	fp, r2
   336d2:	4192      	sbcs	r2, r2
   336d4:	427f      	negs	r7, r7
   336d6:	4249      	negs	r1, r1
   336d8:	0c2d      	lsrs	r5, r5, #16
   336da:	4252      	negs	r2, r2
   336dc:	430f      	orrs	r7, r1
   336de:	425b      	negs	r3, r3
   336e0:	4313      	orrs	r3, r2
   336e2:	197f      	adds	r7, r7, r5
   336e4:	18ff      	adds	r7, r7, r3
   336e6:	465b      	mov	r3, fp
   336e8:	193c      	adds	r4, r7, r4
   336ea:	0ddb      	lsrs	r3, r3, #23
   336ec:	9a05      	ldr	r2, [sp, #20]
   336ee:	0264      	lsls	r4, r4, #9
   336f0:	431c      	orrs	r4, r3
   336f2:	0243      	lsls	r3, r0, #9
   336f4:	4313      	orrs	r3, r2
   336f6:	1e5d      	subs	r5, r3, #1
   336f8:	41ab      	sbcs	r3, r5
   336fa:	465a      	mov	r2, fp
   336fc:	0dc0      	lsrs	r0, r0, #23
   336fe:	4303      	orrs	r3, r0
   33700:	0252      	lsls	r2, r2, #9
   33702:	4313      	orrs	r3, r2
   33704:	01e2      	lsls	r2, r4, #7
   33706:	d556      	bpl.n	337b6 <__aeabi_dmul+0x426>
   33708:	2001      	movs	r0, #1
   3370a:	085a      	lsrs	r2, r3, #1
   3370c:	4003      	ands	r3, r0
   3370e:	4313      	orrs	r3, r2
   33710:	07e2      	lsls	r2, r4, #31
   33712:	4313      	orrs	r3, r2
   33714:	0864      	lsrs	r4, r4, #1
   33716:	485a      	ldr	r0, [pc, #360]	; (33880 <__aeabi_dmul+0x4f0>)
   33718:	4460      	add	r0, ip
   3371a:	2800      	cmp	r0, #0
   3371c:	dd4d      	ble.n	337ba <__aeabi_dmul+0x42a>
   3371e:	075a      	lsls	r2, r3, #29
   33720:	d009      	beq.n	33736 <__aeabi_dmul+0x3a6>
   33722:	220f      	movs	r2, #15
   33724:	401a      	ands	r2, r3
   33726:	2a04      	cmp	r2, #4
   33728:	d005      	beq.n	33736 <__aeabi_dmul+0x3a6>
   3372a:	1d1a      	adds	r2, r3, #4
   3372c:	429a      	cmp	r2, r3
   3372e:	419b      	sbcs	r3, r3
   33730:	425b      	negs	r3, r3
   33732:	18e4      	adds	r4, r4, r3
   33734:	0013      	movs	r3, r2
   33736:	01e2      	lsls	r2, r4, #7
   33738:	d504      	bpl.n	33744 <__aeabi_dmul+0x3b4>
   3373a:	2080      	movs	r0, #128	; 0x80
   3373c:	4a51      	ldr	r2, [pc, #324]	; (33884 <__aeabi_dmul+0x4f4>)
   3373e:	00c0      	lsls	r0, r0, #3
   33740:	4014      	ands	r4, r2
   33742:	4460      	add	r0, ip
   33744:	4a50      	ldr	r2, [pc, #320]	; (33888 <__aeabi_dmul+0x4f8>)
   33746:	4290      	cmp	r0, r2
   33748:	dd00      	ble.n	3374c <__aeabi_dmul+0x3bc>
   3374a:	e6e3      	b.n	33514 <__aeabi_dmul+0x184>
   3374c:	2501      	movs	r5, #1
   3374e:	08db      	lsrs	r3, r3, #3
   33750:	0762      	lsls	r2, r4, #29
   33752:	431a      	orrs	r2, r3
   33754:	0264      	lsls	r4, r4, #9
   33756:	9b01      	ldr	r3, [sp, #4]
   33758:	4691      	mov	r9, r2
   3375a:	0b22      	lsrs	r2, r4, #12
   3375c:	0544      	lsls	r4, r0, #21
   3375e:	0d64      	lsrs	r4, r4, #21
   33760:	401d      	ands	r5, r3
   33762:	e67c      	b.n	3345e <__aeabi_dmul+0xce>
   33764:	2280      	movs	r2, #128	; 0x80
   33766:	4659      	mov	r1, fp
   33768:	0312      	lsls	r2, r2, #12
   3376a:	4211      	tst	r1, r2
   3376c:	d008      	beq.n	33780 <__aeabi_dmul+0x3f0>
   3376e:	4214      	tst	r4, r2
   33770:	d106      	bne.n	33780 <__aeabi_dmul+0x3f0>
   33772:	4322      	orrs	r2, r4
   33774:	0312      	lsls	r2, r2, #12
   33776:	0b12      	lsrs	r2, r2, #12
   33778:	4645      	mov	r5, r8
   3377a:	4699      	mov	r9, r3
   3377c:	4c43      	ldr	r4, [pc, #268]	; (3388c <__aeabi_dmul+0x4fc>)
   3377e:	e66e      	b.n	3345e <__aeabi_dmul+0xce>
   33780:	465b      	mov	r3, fp
   33782:	431a      	orrs	r2, r3
   33784:	0312      	lsls	r2, r2, #12
   33786:	0b12      	lsrs	r2, r2, #12
   33788:	4c40      	ldr	r4, [pc, #256]	; (3388c <__aeabi_dmul+0x4fc>)
   3378a:	e668      	b.n	3345e <__aeabi_dmul+0xce>
   3378c:	0003      	movs	r3, r0
   3378e:	4654      	mov	r4, sl
   33790:	3b28      	subs	r3, #40	; 0x28
   33792:	409c      	lsls	r4, r3
   33794:	2300      	movs	r3, #0
   33796:	e6b9      	b.n	3350c <__aeabi_dmul+0x17c>
   33798:	f000 fbfc 	bl	33f94 <__clzsi2>
   3379c:	3020      	adds	r0, #32
   3379e:	e6a6      	b.n	334ee <__aeabi_dmul+0x15e>
   337a0:	0003      	movs	r3, r0
   337a2:	3b28      	subs	r3, #40	; 0x28
   337a4:	409f      	lsls	r7, r3
   337a6:	2300      	movs	r3, #0
   337a8:	46bb      	mov	fp, r7
   337aa:	4699      	mov	r9, r3
   337ac:	e68a      	b.n	334c4 <__aeabi_dmul+0x134>
   337ae:	f000 fbf1 	bl	33f94 <__clzsi2>
   337b2:	3020      	adds	r0, #32
   337b4:	e674      	b.n	334a0 <__aeabi_dmul+0x110>
   337b6:	46b4      	mov	ip, r6
   337b8:	e7ad      	b.n	33716 <__aeabi_dmul+0x386>
   337ba:	2501      	movs	r5, #1
   337bc:	1a2a      	subs	r2, r5, r0
   337be:	2a38      	cmp	r2, #56	; 0x38
   337c0:	dd06      	ble.n	337d0 <__aeabi_dmul+0x440>
   337c2:	9b01      	ldr	r3, [sp, #4]
   337c4:	2400      	movs	r4, #0
   337c6:	401d      	ands	r5, r3
   337c8:	2300      	movs	r3, #0
   337ca:	2200      	movs	r2, #0
   337cc:	4699      	mov	r9, r3
   337ce:	e646      	b.n	3345e <__aeabi_dmul+0xce>
   337d0:	2a1f      	cmp	r2, #31
   337d2:	dc21      	bgt.n	33818 <__aeabi_dmul+0x488>
   337d4:	2520      	movs	r5, #32
   337d6:	0020      	movs	r0, r4
   337d8:	1aad      	subs	r5, r5, r2
   337da:	001e      	movs	r6, r3
   337dc:	40ab      	lsls	r3, r5
   337de:	40a8      	lsls	r0, r5
   337e0:	40d6      	lsrs	r6, r2
   337e2:	1e5d      	subs	r5, r3, #1
   337e4:	41ab      	sbcs	r3, r5
   337e6:	4330      	orrs	r0, r6
   337e8:	4318      	orrs	r0, r3
   337ea:	40d4      	lsrs	r4, r2
   337ec:	0743      	lsls	r3, r0, #29
   337ee:	d009      	beq.n	33804 <__aeabi_dmul+0x474>
   337f0:	230f      	movs	r3, #15
   337f2:	4003      	ands	r3, r0
   337f4:	2b04      	cmp	r3, #4
   337f6:	d005      	beq.n	33804 <__aeabi_dmul+0x474>
   337f8:	0003      	movs	r3, r0
   337fa:	1d18      	adds	r0, r3, #4
   337fc:	4298      	cmp	r0, r3
   337fe:	419b      	sbcs	r3, r3
   33800:	425b      	negs	r3, r3
   33802:	18e4      	adds	r4, r4, r3
   33804:	0223      	lsls	r3, r4, #8
   33806:	d521      	bpl.n	3384c <__aeabi_dmul+0x4bc>
   33808:	2501      	movs	r5, #1
   3380a:	9b01      	ldr	r3, [sp, #4]
   3380c:	2401      	movs	r4, #1
   3380e:	401d      	ands	r5, r3
   33810:	2300      	movs	r3, #0
   33812:	2200      	movs	r2, #0
   33814:	4699      	mov	r9, r3
   33816:	e622      	b.n	3345e <__aeabi_dmul+0xce>
   33818:	251f      	movs	r5, #31
   3381a:	0021      	movs	r1, r4
   3381c:	426d      	negs	r5, r5
   3381e:	1a28      	subs	r0, r5, r0
   33820:	40c1      	lsrs	r1, r0
   33822:	0008      	movs	r0, r1
   33824:	2a20      	cmp	r2, #32
   33826:	d01d      	beq.n	33864 <__aeabi_dmul+0x4d4>
   33828:	355f      	adds	r5, #95	; 0x5f
   3382a:	1aaa      	subs	r2, r5, r2
   3382c:	4094      	lsls	r4, r2
   3382e:	4323      	orrs	r3, r4
   33830:	1e5c      	subs	r4, r3, #1
   33832:	41a3      	sbcs	r3, r4
   33834:	2507      	movs	r5, #7
   33836:	4303      	orrs	r3, r0
   33838:	401d      	ands	r5, r3
   3383a:	2200      	movs	r2, #0
   3383c:	2d00      	cmp	r5, #0
   3383e:	d009      	beq.n	33854 <__aeabi_dmul+0x4c4>
   33840:	220f      	movs	r2, #15
   33842:	2400      	movs	r4, #0
   33844:	401a      	ands	r2, r3
   33846:	0018      	movs	r0, r3
   33848:	2a04      	cmp	r2, #4
   3384a:	d1d6      	bne.n	337fa <__aeabi_dmul+0x46a>
   3384c:	0003      	movs	r3, r0
   3384e:	0765      	lsls	r5, r4, #29
   33850:	0264      	lsls	r4, r4, #9
   33852:	0b22      	lsrs	r2, r4, #12
   33854:	08db      	lsrs	r3, r3, #3
   33856:	432b      	orrs	r3, r5
   33858:	2501      	movs	r5, #1
   3385a:	4699      	mov	r9, r3
   3385c:	9b01      	ldr	r3, [sp, #4]
   3385e:	2400      	movs	r4, #0
   33860:	401d      	ands	r5, r3
   33862:	e5fc      	b.n	3345e <__aeabi_dmul+0xce>
   33864:	2400      	movs	r4, #0
   33866:	e7e2      	b.n	3382e <__aeabi_dmul+0x49e>
   33868:	2280      	movs	r2, #128	; 0x80
   3386a:	2501      	movs	r5, #1
   3386c:	0312      	lsls	r2, r2, #12
   3386e:	4322      	orrs	r2, r4
   33870:	9901      	ldr	r1, [sp, #4]
   33872:	0312      	lsls	r2, r2, #12
   33874:	0b12      	lsrs	r2, r2, #12
   33876:	400d      	ands	r5, r1
   33878:	4699      	mov	r9, r3
   3387a:	4c04      	ldr	r4, [pc, #16]	; (3388c <__aeabi_dmul+0x4fc>)
   3387c:	e5ef      	b.n	3345e <__aeabi_dmul+0xce>
   3387e:	46c0      	nop			; (mov r8, r8)
   33880:	000003ff 	.word	0x000003ff
   33884:	feffffff 	.word	0xfeffffff
   33888:	000007fe 	.word	0x000007fe
   3388c:	000007ff 	.word	0x000007ff

00033890 <__aeabi_dsub>:
   33890:	b5f0      	push	{r4, r5, r6, r7, lr}
   33892:	4646      	mov	r6, r8
   33894:	46d6      	mov	lr, sl
   33896:	464f      	mov	r7, r9
   33898:	030c      	lsls	r4, r1, #12
   3389a:	b5c0      	push	{r6, r7, lr}
   3389c:	0fcd      	lsrs	r5, r1, #31
   3389e:	004e      	lsls	r6, r1, #1
   338a0:	0a61      	lsrs	r1, r4, #9
   338a2:	0f44      	lsrs	r4, r0, #29
   338a4:	430c      	orrs	r4, r1
   338a6:	00c1      	lsls	r1, r0, #3
   338a8:	0058      	lsls	r0, r3, #1
   338aa:	0d40      	lsrs	r0, r0, #21
   338ac:	4684      	mov	ip, r0
   338ae:	468a      	mov	sl, r1
   338b0:	000f      	movs	r7, r1
   338b2:	0319      	lsls	r1, r3, #12
   338b4:	0f50      	lsrs	r0, r2, #29
   338b6:	0a49      	lsrs	r1, r1, #9
   338b8:	4301      	orrs	r1, r0
   338ba:	48c6      	ldr	r0, [pc, #792]	; (33bd4 <__aeabi_dsub+0x344>)
   338bc:	0d76      	lsrs	r6, r6, #21
   338be:	46a8      	mov	r8, r5
   338c0:	0fdb      	lsrs	r3, r3, #31
   338c2:	00d2      	lsls	r2, r2, #3
   338c4:	4584      	cmp	ip, r0
   338c6:	d100      	bne.n	338ca <__aeabi_dsub+0x3a>
   338c8:	e0d8      	b.n	33a7c <__aeabi_dsub+0x1ec>
   338ca:	2001      	movs	r0, #1
   338cc:	4043      	eors	r3, r0
   338ce:	42ab      	cmp	r3, r5
   338d0:	d100      	bne.n	338d4 <__aeabi_dsub+0x44>
   338d2:	e0a6      	b.n	33a22 <__aeabi_dsub+0x192>
   338d4:	4660      	mov	r0, ip
   338d6:	1a35      	subs	r5, r6, r0
   338d8:	2d00      	cmp	r5, #0
   338da:	dc00      	bgt.n	338de <__aeabi_dsub+0x4e>
   338dc:	e105      	b.n	33aea <__aeabi_dsub+0x25a>
   338de:	2800      	cmp	r0, #0
   338e0:	d110      	bne.n	33904 <__aeabi_dsub+0x74>
   338e2:	000b      	movs	r3, r1
   338e4:	4313      	orrs	r3, r2
   338e6:	d100      	bne.n	338ea <__aeabi_dsub+0x5a>
   338e8:	e0d7      	b.n	33a9a <__aeabi_dsub+0x20a>
   338ea:	1e6b      	subs	r3, r5, #1
   338ec:	2b00      	cmp	r3, #0
   338ee:	d000      	beq.n	338f2 <__aeabi_dsub+0x62>
   338f0:	e14b      	b.n	33b8a <__aeabi_dsub+0x2fa>
   338f2:	4653      	mov	r3, sl
   338f4:	1a9f      	subs	r7, r3, r2
   338f6:	45ba      	cmp	sl, r7
   338f8:	4180      	sbcs	r0, r0
   338fa:	1a64      	subs	r4, r4, r1
   338fc:	4240      	negs	r0, r0
   338fe:	1a24      	subs	r4, r4, r0
   33900:	2601      	movs	r6, #1
   33902:	e01e      	b.n	33942 <__aeabi_dsub+0xb2>
   33904:	4bb3      	ldr	r3, [pc, #716]	; (33bd4 <__aeabi_dsub+0x344>)
   33906:	429e      	cmp	r6, r3
   33908:	d048      	beq.n	3399c <__aeabi_dsub+0x10c>
   3390a:	2380      	movs	r3, #128	; 0x80
   3390c:	041b      	lsls	r3, r3, #16
   3390e:	4319      	orrs	r1, r3
   33910:	2d38      	cmp	r5, #56	; 0x38
   33912:	dd00      	ble.n	33916 <__aeabi_dsub+0x86>
   33914:	e119      	b.n	33b4a <__aeabi_dsub+0x2ba>
   33916:	2d1f      	cmp	r5, #31
   33918:	dd00      	ble.n	3391c <__aeabi_dsub+0x8c>
   3391a:	e14c      	b.n	33bb6 <__aeabi_dsub+0x326>
   3391c:	2320      	movs	r3, #32
   3391e:	000f      	movs	r7, r1
   33920:	1b5b      	subs	r3, r3, r5
   33922:	0010      	movs	r0, r2
   33924:	409a      	lsls	r2, r3
   33926:	409f      	lsls	r7, r3
   33928:	40e8      	lsrs	r0, r5
   3392a:	1e53      	subs	r3, r2, #1
   3392c:	419a      	sbcs	r2, r3
   3392e:	40e9      	lsrs	r1, r5
   33930:	4307      	orrs	r7, r0
   33932:	4317      	orrs	r7, r2
   33934:	4653      	mov	r3, sl
   33936:	1bdf      	subs	r7, r3, r7
   33938:	1a61      	subs	r1, r4, r1
   3393a:	45ba      	cmp	sl, r7
   3393c:	41a4      	sbcs	r4, r4
   3393e:	4264      	negs	r4, r4
   33940:	1b0c      	subs	r4, r1, r4
   33942:	0223      	lsls	r3, r4, #8
   33944:	d400      	bmi.n	33948 <__aeabi_dsub+0xb8>
   33946:	e0c5      	b.n	33ad4 <__aeabi_dsub+0x244>
   33948:	0264      	lsls	r4, r4, #9
   3394a:	0a65      	lsrs	r5, r4, #9
   3394c:	2d00      	cmp	r5, #0
   3394e:	d100      	bne.n	33952 <__aeabi_dsub+0xc2>
   33950:	e0f6      	b.n	33b40 <__aeabi_dsub+0x2b0>
   33952:	0028      	movs	r0, r5
   33954:	f000 fb1e 	bl	33f94 <__clzsi2>
   33958:	0003      	movs	r3, r0
   3395a:	3b08      	subs	r3, #8
   3395c:	2b1f      	cmp	r3, #31
   3395e:	dd00      	ble.n	33962 <__aeabi_dsub+0xd2>
   33960:	e0e9      	b.n	33b36 <__aeabi_dsub+0x2a6>
   33962:	2220      	movs	r2, #32
   33964:	003c      	movs	r4, r7
   33966:	1ad2      	subs	r2, r2, r3
   33968:	409d      	lsls	r5, r3
   3396a:	40d4      	lsrs	r4, r2
   3396c:	409f      	lsls	r7, r3
   3396e:	4325      	orrs	r5, r4
   33970:	429e      	cmp	r6, r3
   33972:	dd00      	ble.n	33976 <__aeabi_dsub+0xe6>
   33974:	e0db      	b.n	33b2e <__aeabi_dsub+0x29e>
   33976:	1b9e      	subs	r6, r3, r6
   33978:	1c73      	adds	r3, r6, #1
   3397a:	2b1f      	cmp	r3, #31
   3397c:	dd00      	ble.n	33980 <__aeabi_dsub+0xf0>
   3397e:	e10a      	b.n	33b96 <__aeabi_dsub+0x306>
   33980:	2220      	movs	r2, #32
   33982:	0038      	movs	r0, r7
   33984:	1ad2      	subs	r2, r2, r3
   33986:	0029      	movs	r1, r5
   33988:	4097      	lsls	r7, r2
   3398a:	002c      	movs	r4, r5
   3398c:	4091      	lsls	r1, r2
   3398e:	40d8      	lsrs	r0, r3
   33990:	1e7a      	subs	r2, r7, #1
   33992:	4197      	sbcs	r7, r2
   33994:	40dc      	lsrs	r4, r3
   33996:	2600      	movs	r6, #0
   33998:	4301      	orrs	r1, r0
   3399a:	430f      	orrs	r7, r1
   3399c:	077b      	lsls	r3, r7, #29
   3399e:	d009      	beq.n	339b4 <__aeabi_dsub+0x124>
   339a0:	230f      	movs	r3, #15
   339a2:	403b      	ands	r3, r7
   339a4:	2b04      	cmp	r3, #4
   339a6:	d005      	beq.n	339b4 <__aeabi_dsub+0x124>
   339a8:	1d3b      	adds	r3, r7, #4
   339aa:	42bb      	cmp	r3, r7
   339ac:	41bf      	sbcs	r7, r7
   339ae:	427f      	negs	r7, r7
   339b0:	19e4      	adds	r4, r4, r7
   339b2:	001f      	movs	r7, r3
   339b4:	0223      	lsls	r3, r4, #8
   339b6:	d525      	bpl.n	33a04 <__aeabi_dsub+0x174>
   339b8:	4b86      	ldr	r3, [pc, #536]	; (33bd4 <__aeabi_dsub+0x344>)
   339ba:	3601      	adds	r6, #1
   339bc:	429e      	cmp	r6, r3
   339be:	d100      	bne.n	339c2 <__aeabi_dsub+0x132>
   339c0:	e0af      	b.n	33b22 <__aeabi_dsub+0x292>
   339c2:	4b85      	ldr	r3, [pc, #532]	; (33bd8 <__aeabi_dsub+0x348>)
   339c4:	2501      	movs	r5, #1
   339c6:	401c      	ands	r4, r3
   339c8:	4643      	mov	r3, r8
   339ca:	0762      	lsls	r2, r4, #29
   339cc:	08ff      	lsrs	r7, r7, #3
   339ce:	0264      	lsls	r4, r4, #9
   339d0:	0576      	lsls	r6, r6, #21
   339d2:	4317      	orrs	r7, r2
   339d4:	0b24      	lsrs	r4, r4, #12
   339d6:	0d76      	lsrs	r6, r6, #21
   339d8:	401d      	ands	r5, r3
   339da:	2100      	movs	r1, #0
   339dc:	0324      	lsls	r4, r4, #12
   339de:	0b23      	lsrs	r3, r4, #12
   339e0:	0d0c      	lsrs	r4, r1, #20
   339e2:	4a7e      	ldr	r2, [pc, #504]	; (33bdc <__aeabi_dsub+0x34c>)
   339e4:	0524      	lsls	r4, r4, #20
   339e6:	431c      	orrs	r4, r3
   339e8:	4014      	ands	r4, r2
   339ea:	0533      	lsls	r3, r6, #20
   339ec:	4323      	orrs	r3, r4
   339ee:	005b      	lsls	r3, r3, #1
   339f0:	07ed      	lsls	r5, r5, #31
   339f2:	085b      	lsrs	r3, r3, #1
   339f4:	432b      	orrs	r3, r5
   339f6:	0038      	movs	r0, r7
   339f8:	0019      	movs	r1, r3
   339fa:	bc1c      	pop	{r2, r3, r4}
   339fc:	4690      	mov	r8, r2
   339fe:	4699      	mov	r9, r3
   33a00:	46a2      	mov	sl, r4
   33a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
   33a04:	2501      	movs	r5, #1
   33a06:	4643      	mov	r3, r8
   33a08:	0762      	lsls	r2, r4, #29
   33a0a:	08ff      	lsrs	r7, r7, #3
   33a0c:	4317      	orrs	r7, r2
   33a0e:	08e4      	lsrs	r4, r4, #3
   33a10:	401d      	ands	r5, r3
   33a12:	4b70      	ldr	r3, [pc, #448]	; (33bd4 <__aeabi_dsub+0x344>)
   33a14:	429e      	cmp	r6, r3
   33a16:	d036      	beq.n	33a86 <__aeabi_dsub+0x1f6>
   33a18:	0324      	lsls	r4, r4, #12
   33a1a:	0576      	lsls	r6, r6, #21
   33a1c:	0b24      	lsrs	r4, r4, #12
   33a1e:	0d76      	lsrs	r6, r6, #21
   33a20:	e7db      	b.n	339da <__aeabi_dsub+0x14a>
   33a22:	4663      	mov	r3, ip
   33a24:	1af3      	subs	r3, r6, r3
   33a26:	2b00      	cmp	r3, #0
   33a28:	dc00      	bgt.n	33a2c <__aeabi_dsub+0x19c>
   33a2a:	e094      	b.n	33b56 <__aeabi_dsub+0x2c6>
   33a2c:	4660      	mov	r0, ip
   33a2e:	2800      	cmp	r0, #0
   33a30:	d035      	beq.n	33a9e <__aeabi_dsub+0x20e>
   33a32:	4868      	ldr	r0, [pc, #416]	; (33bd4 <__aeabi_dsub+0x344>)
   33a34:	4286      	cmp	r6, r0
   33a36:	d0b1      	beq.n	3399c <__aeabi_dsub+0x10c>
   33a38:	2780      	movs	r7, #128	; 0x80
   33a3a:	043f      	lsls	r7, r7, #16
   33a3c:	4339      	orrs	r1, r7
   33a3e:	2b38      	cmp	r3, #56	; 0x38
   33a40:	dc00      	bgt.n	33a44 <__aeabi_dsub+0x1b4>
   33a42:	e0fd      	b.n	33c40 <__aeabi_dsub+0x3b0>
   33a44:	430a      	orrs	r2, r1
   33a46:	0017      	movs	r7, r2
   33a48:	2100      	movs	r1, #0
   33a4a:	1e7a      	subs	r2, r7, #1
   33a4c:	4197      	sbcs	r7, r2
   33a4e:	4457      	add	r7, sl
   33a50:	4557      	cmp	r7, sl
   33a52:	4180      	sbcs	r0, r0
   33a54:	1909      	adds	r1, r1, r4
   33a56:	4244      	negs	r4, r0
   33a58:	190c      	adds	r4, r1, r4
   33a5a:	0223      	lsls	r3, r4, #8
   33a5c:	d53a      	bpl.n	33ad4 <__aeabi_dsub+0x244>
   33a5e:	4b5d      	ldr	r3, [pc, #372]	; (33bd4 <__aeabi_dsub+0x344>)
   33a60:	3601      	adds	r6, #1
   33a62:	429e      	cmp	r6, r3
   33a64:	d100      	bne.n	33a68 <__aeabi_dsub+0x1d8>
   33a66:	e14b      	b.n	33d00 <__aeabi_dsub+0x470>
   33a68:	2201      	movs	r2, #1
   33a6a:	4b5b      	ldr	r3, [pc, #364]	; (33bd8 <__aeabi_dsub+0x348>)
   33a6c:	401c      	ands	r4, r3
   33a6e:	087b      	lsrs	r3, r7, #1
   33a70:	4017      	ands	r7, r2
   33a72:	431f      	orrs	r7, r3
   33a74:	07e2      	lsls	r2, r4, #31
   33a76:	4317      	orrs	r7, r2
   33a78:	0864      	lsrs	r4, r4, #1
   33a7a:	e78f      	b.n	3399c <__aeabi_dsub+0x10c>
   33a7c:	0008      	movs	r0, r1
   33a7e:	4310      	orrs	r0, r2
   33a80:	d000      	beq.n	33a84 <__aeabi_dsub+0x1f4>
   33a82:	e724      	b.n	338ce <__aeabi_dsub+0x3e>
   33a84:	e721      	b.n	338ca <__aeabi_dsub+0x3a>
   33a86:	0023      	movs	r3, r4
   33a88:	433b      	orrs	r3, r7
   33a8a:	d100      	bne.n	33a8e <__aeabi_dsub+0x1fe>
   33a8c:	e1b9      	b.n	33e02 <__aeabi_dsub+0x572>
   33a8e:	2280      	movs	r2, #128	; 0x80
   33a90:	0312      	lsls	r2, r2, #12
   33a92:	4314      	orrs	r4, r2
   33a94:	0324      	lsls	r4, r4, #12
   33a96:	0b24      	lsrs	r4, r4, #12
   33a98:	e79f      	b.n	339da <__aeabi_dsub+0x14a>
   33a9a:	002e      	movs	r6, r5
   33a9c:	e77e      	b.n	3399c <__aeabi_dsub+0x10c>
   33a9e:	0008      	movs	r0, r1
   33aa0:	4310      	orrs	r0, r2
   33aa2:	d100      	bne.n	33aa6 <__aeabi_dsub+0x216>
   33aa4:	e0ca      	b.n	33c3c <__aeabi_dsub+0x3ac>
   33aa6:	1e58      	subs	r0, r3, #1
   33aa8:	4684      	mov	ip, r0
   33aaa:	2800      	cmp	r0, #0
   33aac:	d000      	beq.n	33ab0 <__aeabi_dsub+0x220>
   33aae:	e0e7      	b.n	33c80 <__aeabi_dsub+0x3f0>
   33ab0:	4452      	add	r2, sl
   33ab2:	4552      	cmp	r2, sl
   33ab4:	4180      	sbcs	r0, r0
   33ab6:	1864      	adds	r4, r4, r1
   33ab8:	4240      	negs	r0, r0
   33aba:	1824      	adds	r4, r4, r0
   33abc:	0017      	movs	r7, r2
   33abe:	2601      	movs	r6, #1
   33ac0:	0223      	lsls	r3, r4, #8
   33ac2:	d507      	bpl.n	33ad4 <__aeabi_dsub+0x244>
   33ac4:	2602      	movs	r6, #2
   33ac6:	e7cf      	b.n	33a68 <__aeabi_dsub+0x1d8>
   33ac8:	4664      	mov	r4, ip
   33aca:	432c      	orrs	r4, r5
   33acc:	d100      	bne.n	33ad0 <__aeabi_dsub+0x240>
   33ace:	e1b3      	b.n	33e38 <__aeabi_dsub+0x5a8>
   33ad0:	002c      	movs	r4, r5
   33ad2:	4667      	mov	r7, ip
   33ad4:	077b      	lsls	r3, r7, #29
   33ad6:	d000      	beq.n	33ada <__aeabi_dsub+0x24a>
   33ad8:	e762      	b.n	339a0 <__aeabi_dsub+0x110>
   33ada:	0763      	lsls	r3, r4, #29
   33adc:	08ff      	lsrs	r7, r7, #3
   33ade:	431f      	orrs	r7, r3
   33ae0:	2501      	movs	r5, #1
   33ae2:	4643      	mov	r3, r8
   33ae4:	08e4      	lsrs	r4, r4, #3
   33ae6:	401d      	ands	r5, r3
   33ae8:	e793      	b.n	33a12 <__aeabi_dsub+0x182>
   33aea:	2d00      	cmp	r5, #0
   33aec:	d178      	bne.n	33be0 <__aeabi_dsub+0x350>
   33aee:	1c75      	adds	r5, r6, #1
   33af0:	056d      	lsls	r5, r5, #21
   33af2:	0d6d      	lsrs	r5, r5, #21
   33af4:	2d01      	cmp	r5, #1
   33af6:	dc00      	bgt.n	33afa <__aeabi_dsub+0x26a>
   33af8:	e0f2      	b.n	33ce0 <__aeabi_dsub+0x450>
   33afa:	4650      	mov	r0, sl
   33afc:	1a80      	subs	r0, r0, r2
   33afe:	4582      	cmp	sl, r0
   33b00:	41bf      	sbcs	r7, r7
   33b02:	1a65      	subs	r5, r4, r1
   33b04:	427f      	negs	r7, r7
   33b06:	1bed      	subs	r5, r5, r7
   33b08:	4684      	mov	ip, r0
   33b0a:	0228      	lsls	r0, r5, #8
   33b0c:	d400      	bmi.n	33b10 <__aeabi_dsub+0x280>
   33b0e:	e08c      	b.n	33c2a <__aeabi_dsub+0x39a>
   33b10:	4650      	mov	r0, sl
   33b12:	1a17      	subs	r7, r2, r0
   33b14:	42ba      	cmp	r2, r7
   33b16:	4192      	sbcs	r2, r2
   33b18:	1b0c      	subs	r4, r1, r4
   33b1a:	4255      	negs	r5, r2
   33b1c:	1b65      	subs	r5, r4, r5
   33b1e:	4698      	mov	r8, r3
   33b20:	e714      	b.n	3394c <__aeabi_dsub+0xbc>
   33b22:	2501      	movs	r5, #1
   33b24:	4643      	mov	r3, r8
   33b26:	2400      	movs	r4, #0
   33b28:	401d      	ands	r5, r3
   33b2a:	2700      	movs	r7, #0
   33b2c:	e755      	b.n	339da <__aeabi_dsub+0x14a>
   33b2e:	4c2a      	ldr	r4, [pc, #168]	; (33bd8 <__aeabi_dsub+0x348>)
   33b30:	1af6      	subs	r6, r6, r3
   33b32:	402c      	ands	r4, r5
   33b34:	e732      	b.n	3399c <__aeabi_dsub+0x10c>
   33b36:	003d      	movs	r5, r7
   33b38:	3828      	subs	r0, #40	; 0x28
   33b3a:	4085      	lsls	r5, r0
   33b3c:	2700      	movs	r7, #0
   33b3e:	e717      	b.n	33970 <__aeabi_dsub+0xe0>
   33b40:	0038      	movs	r0, r7
   33b42:	f000 fa27 	bl	33f94 <__clzsi2>
   33b46:	3020      	adds	r0, #32
   33b48:	e706      	b.n	33958 <__aeabi_dsub+0xc8>
   33b4a:	430a      	orrs	r2, r1
   33b4c:	0017      	movs	r7, r2
   33b4e:	2100      	movs	r1, #0
   33b50:	1e7a      	subs	r2, r7, #1
   33b52:	4197      	sbcs	r7, r2
   33b54:	e6ee      	b.n	33934 <__aeabi_dsub+0xa4>
   33b56:	2b00      	cmp	r3, #0
   33b58:	d000      	beq.n	33b5c <__aeabi_dsub+0x2cc>
   33b5a:	e0e5      	b.n	33d28 <__aeabi_dsub+0x498>
   33b5c:	1c73      	adds	r3, r6, #1
   33b5e:	469c      	mov	ip, r3
   33b60:	055b      	lsls	r3, r3, #21
   33b62:	0d5b      	lsrs	r3, r3, #21
   33b64:	2b01      	cmp	r3, #1
   33b66:	dc00      	bgt.n	33b6a <__aeabi_dsub+0x2da>
   33b68:	e09f      	b.n	33caa <__aeabi_dsub+0x41a>
   33b6a:	4b1a      	ldr	r3, [pc, #104]	; (33bd4 <__aeabi_dsub+0x344>)
   33b6c:	459c      	cmp	ip, r3
   33b6e:	d100      	bne.n	33b72 <__aeabi_dsub+0x2e2>
   33b70:	e0c5      	b.n	33cfe <__aeabi_dsub+0x46e>
   33b72:	4452      	add	r2, sl
   33b74:	4552      	cmp	r2, sl
   33b76:	4180      	sbcs	r0, r0
   33b78:	1864      	adds	r4, r4, r1
   33b7a:	4240      	negs	r0, r0
   33b7c:	1824      	adds	r4, r4, r0
   33b7e:	07e7      	lsls	r7, r4, #31
   33b80:	0852      	lsrs	r2, r2, #1
   33b82:	4317      	orrs	r7, r2
   33b84:	0864      	lsrs	r4, r4, #1
   33b86:	4666      	mov	r6, ip
   33b88:	e708      	b.n	3399c <__aeabi_dsub+0x10c>
   33b8a:	4812      	ldr	r0, [pc, #72]	; (33bd4 <__aeabi_dsub+0x344>)
   33b8c:	4285      	cmp	r5, r0
   33b8e:	d100      	bne.n	33b92 <__aeabi_dsub+0x302>
   33b90:	e085      	b.n	33c9e <__aeabi_dsub+0x40e>
   33b92:	001d      	movs	r5, r3
   33b94:	e6bc      	b.n	33910 <__aeabi_dsub+0x80>
   33b96:	0029      	movs	r1, r5
   33b98:	3e1f      	subs	r6, #31
   33b9a:	40f1      	lsrs	r1, r6
   33b9c:	2b20      	cmp	r3, #32
   33b9e:	d100      	bne.n	33ba2 <__aeabi_dsub+0x312>
   33ba0:	e07f      	b.n	33ca2 <__aeabi_dsub+0x412>
   33ba2:	2240      	movs	r2, #64	; 0x40
   33ba4:	1ad3      	subs	r3, r2, r3
   33ba6:	409d      	lsls	r5, r3
   33ba8:	432f      	orrs	r7, r5
   33baa:	1e7d      	subs	r5, r7, #1
   33bac:	41af      	sbcs	r7, r5
   33bae:	2400      	movs	r4, #0
   33bb0:	430f      	orrs	r7, r1
   33bb2:	2600      	movs	r6, #0
   33bb4:	e78e      	b.n	33ad4 <__aeabi_dsub+0x244>
   33bb6:	002b      	movs	r3, r5
   33bb8:	000f      	movs	r7, r1
   33bba:	3b20      	subs	r3, #32
   33bbc:	40df      	lsrs	r7, r3
   33bbe:	2d20      	cmp	r5, #32
   33bc0:	d071      	beq.n	33ca6 <__aeabi_dsub+0x416>
   33bc2:	2340      	movs	r3, #64	; 0x40
   33bc4:	1b5d      	subs	r5, r3, r5
   33bc6:	40a9      	lsls	r1, r5
   33bc8:	430a      	orrs	r2, r1
   33bca:	1e51      	subs	r1, r2, #1
   33bcc:	418a      	sbcs	r2, r1
   33bce:	2100      	movs	r1, #0
   33bd0:	4317      	orrs	r7, r2
   33bd2:	e6af      	b.n	33934 <__aeabi_dsub+0xa4>
   33bd4:	000007ff 	.word	0x000007ff
   33bd8:	ff7fffff 	.word	0xff7fffff
   33bdc:	800fffff 	.word	0x800fffff
   33be0:	2e00      	cmp	r6, #0
   33be2:	d03e      	beq.n	33c62 <__aeabi_dsub+0x3d2>
   33be4:	4eb3      	ldr	r6, [pc, #716]	; (33eb4 <__aeabi_dsub+0x624>)
   33be6:	45b4      	cmp	ip, r6
   33be8:	d045      	beq.n	33c76 <__aeabi_dsub+0x3e6>
   33bea:	2680      	movs	r6, #128	; 0x80
   33bec:	0436      	lsls	r6, r6, #16
   33bee:	426d      	negs	r5, r5
   33bf0:	4334      	orrs	r4, r6
   33bf2:	2d38      	cmp	r5, #56	; 0x38
   33bf4:	dd00      	ble.n	33bf8 <__aeabi_dsub+0x368>
   33bf6:	e0a8      	b.n	33d4a <__aeabi_dsub+0x4ba>
   33bf8:	2d1f      	cmp	r5, #31
   33bfa:	dd00      	ble.n	33bfe <__aeabi_dsub+0x36e>
   33bfc:	e11f      	b.n	33e3e <__aeabi_dsub+0x5ae>
   33bfe:	2620      	movs	r6, #32
   33c00:	0027      	movs	r7, r4
   33c02:	4650      	mov	r0, sl
   33c04:	1b76      	subs	r6, r6, r5
   33c06:	40b7      	lsls	r7, r6
   33c08:	40e8      	lsrs	r0, r5
   33c0a:	4307      	orrs	r7, r0
   33c0c:	4650      	mov	r0, sl
   33c0e:	40b0      	lsls	r0, r6
   33c10:	1e46      	subs	r6, r0, #1
   33c12:	41b0      	sbcs	r0, r6
   33c14:	40ec      	lsrs	r4, r5
   33c16:	4338      	orrs	r0, r7
   33c18:	1a17      	subs	r7, r2, r0
   33c1a:	42ba      	cmp	r2, r7
   33c1c:	4192      	sbcs	r2, r2
   33c1e:	1b0c      	subs	r4, r1, r4
   33c20:	4252      	negs	r2, r2
   33c22:	1aa4      	subs	r4, r4, r2
   33c24:	4666      	mov	r6, ip
   33c26:	4698      	mov	r8, r3
   33c28:	e68b      	b.n	33942 <__aeabi_dsub+0xb2>
   33c2a:	4664      	mov	r4, ip
   33c2c:	4667      	mov	r7, ip
   33c2e:	432c      	orrs	r4, r5
   33c30:	d000      	beq.n	33c34 <__aeabi_dsub+0x3a4>
   33c32:	e68b      	b.n	3394c <__aeabi_dsub+0xbc>
   33c34:	2500      	movs	r5, #0
   33c36:	2600      	movs	r6, #0
   33c38:	2700      	movs	r7, #0
   33c3a:	e6ea      	b.n	33a12 <__aeabi_dsub+0x182>
   33c3c:	001e      	movs	r6, r3
   33c3e:	e6ad      	b.n	3399c <__aeabi_dsub+0x10c>
   33c40:	2b1f      	cmp	r3, #31
   33c42:	dc60      	bgt.n	33d06 <__aeabi_dsub+0x476>
   33c44:	2720      	movs	r7, #32
   33c46:	1af8      	subs	r0, r7, r3
   33c48:	000f      	movs	r7, r1
   33c4a:	4684      	mov	ip, r0
   33c4c:	4087      	lsls	r7, r0
   33c4e:	0010      	movs	r0, r2
   33c50:	40d8      	lsrs	r0, r3
   33c52:	4307      	orrs	r7, r0
   33c54:	4660      	mov	r0, ip
   33c56:	4082      	lsls	r2, r0
   33c58:	1e50      	subs	r0, r2, #1
   33c5a:	4182      	sbcs	r2, r0
   33c5c:	40d9      	lsrs	r1, r3
   33c5e:	4317      	orrs	r7, r2
   33c60:	e6f5      	b.n	33a4e <__aeabi_dsub+0x1be>
   33c62:	0026      	movs	r6, r4
   33c64:	4650      	mov	r0, sl
   33c66:	4306      	orrs	r6, r0
   33c68:	d005      	beq.n	33c76 <__aeabi_dsub+0x3e6>
   33c6a:	43ed      	mvns	r5, r5
   33c6c:	2d00      	cmp	r5, #0
   33c6e:	d0d3      	beq.n	33c18 <__aeabi_dsub+0x388>
   33c70:	4e90      	ldr	r6, [pc, #576]	; (33eb4 <__aeabi_dsub+0x624>)
   33c72:	45b4      	cmp	ip, r6
   33c74:	d1bd      	bne.n	33bf2 <__aeabi_dsub+0x362>
   33c76:	000c      	movs	r4, r1
   33c78:	0017      	movs	r7, r2
   33c7a:	4666      	mov	r6, ip
   33c7c:	4698      	mov	r8, r3
   33c7e:	e68d      	b.n	3399c <__aeabi_dsub+0x10c>
   33c80:	488c      	ldr	r0, [pc, #560]	; (33eb4 <__aeabi_dsub+0x624>)
   33c82:	4283      	cmp	r3, r0
   33c84:	d00b      	beq.n	33c9e <__aeabi_dsub+0x40e>
   33c86:	4663      	mov	r3, ip
   33c88:	e6d9      	b.n	33a3e <__aeabi_dsub+0x1ae>
   33c8a:	2d00      	cmp	r5, #0
   33c8c:	d000      	beq.n	33c90 <__aeabi_dsub+0x400>
   33c8e:	e096      	b.n	33dbe <__aeabi_dsub+0x52e>
   33c90:	0008      	movs	r0, r1
   33c92:	4310      	orrs	r0, r2
   33c94:	d100      	bne.n	33c98 <__aeabi_dsub+0x408>
   33c96:	e0e2      	b.n	33e5e <__aeabi_dsub+0x5ce>
   33c98:	000c      	movs	r4, r1
   33c9a:	0017      	movs	r7, r2
   33c9c:	4698      	mov	r8, r3
   33c9e:	4e85      	ldr	r6, [pc, #532]	; (33eb4 <__aeabi_dsub+0x624>)
   33ca0:	e67c      	b.n	3399c <__aeabi_dsub+0x10c>
   33ca2:	2500      	movs	r5, #0
   33ca4:	e780      	b.n	33ba8 <__aeabi_dsub+0x318>
   33ca6:	2100      	movs	r1, #0
   33ca8:	e78e      	b.n	33bc8 <__aeabi_dsub+0x338>
   33caa:	0023      	movs	r3, r4
   33cac:	4650      	mov	r0, sl
   33cae:	4303      	orrs	r3, r0
   33cb0:	2e00      	cmp	r6, #0
   33cb2:	d000      	beq.n	33cb6 <__aeabi_dsub+0x426>
   33cb4:	e0a8      	b.n	33e08 <__aeabi_dsub+0x578>
   33cb6:	2b00      	cmp	r3, #0
   33cb8:	d100      	bne.n	33cbc <__aeabi_dsub+0x42c>
   33cba:	e0de      	b.n	33e7a <__aeabi_dsub+0x5ea>
   33cbc:	000b      	movs	r3, r1
   33cbe:	4313      	orrs	r3, r2
   33cc0:	d100      	bne.n	33cc4 <__aeabi_dsub+0x434>
   33cc2:	e66b      	b.n	3399c <__aeabi_dsub+0x10c>
   33cc4:	4452      	add	r2, sl
   33cc6:	4552      	cmp	r2, sl
   33cc8:	4180      	sbcs	r0, r0
   33cca:	1864      	adds	r4, r4, r1
   33ccc:	4240      	negs	r0, r0
   33cce:	1824      	adds	r4, r4, r0
   33cd0:	0017      	movs	r7, r2
   33cd2:	0223      	lsls	r3, r4, #8
   33cd4:	d400      	bmi.n	33cd8 <__aeabi_dsub+0x448>
   33cd6:	e6fd      	b.n	33ad4 <__aeabi_dsub+0x244>
   33cd8:	4b77      	ldr	r3, [pc, #476]	; (33eb8 <__aeabi_dsub+0x628>)
   33cda:	4666      	mov	r6, ip
   33cdc:	401c      	ands	r4, r3
   33cde:	e65d      	b.n	3399c <__aeabi_dsub+0x10c>
   33ce0:	0025      	movs	r5, r4
   33ce2:	4650      	mov	r0, sl
   33ce4:	4305      	orrs	r5, r0
   33ce6:	2e00      	cmp	r6, #0
   33ce8:	d1cf      	bne.n	33c8a <__aeabi_dsub+0x3fa>
   33cea:	2d00      	cmp	r5, #0
   33cec:	d14f      	bne.n	33d8e <__aeabi_dsub+0x4fe>
   33cee:	000c      	movs	r4, r1
   33cf0:	4314      	orrs	r4, r2
   33cf2:	d100      	bne.n	33cf6 <__aeabi_dsub+0x466>
   33cf4:	e0a0      	b.n	33e38 <__aeabi_dsub+0x5a8>
   33cf6:	000c      	movs	r4, r1
   33cf8:	0017      	movs	r7, r2
   33cfa:	4698      	mov	r8, r3
   33cfc:	e64e      	b.n	3399c <__aeabi_dsub+0x10c>
   33cfe:	4666      	mov	r6, ip
   33d00:	2400      	movs	r4, #0
   33d02:	2700      	movs	r7, #0
   33d04:	e685      	b.n	33a12 <__aeabi_dsub+0x182>
   33d06:	001f      	movs	r7, r3
   33d08:	0008      	movs	r0, r1
   33d0a:	3f20      	subs	r7, #32
   33d0c:	40f8      	lsrs	r0, r7
   33d0e:	0007      	movs	r7, r0
   33d10:	2b20      	cmp	r3, #32
   33d12:	d100      	bne.n	33d16 <__aeabi_dsub+0x486>
   33d14:	e08e      	b.n	33e34 <__aeabi_dsub+0x5a4>
   33d16:	2040      	movs	r0, #64	; 0x40
   33d18:	1ac3      	subs	r3, r0, r3
   33d1a:	4099      	lsls	r1, r3
   33d1c:	430a      	orrs	r2, r1
   33d1e:	1e51      	subs	r1, r2, #1
   33d20:	418a      	sbcs	r2, r1
   33d22:	2100      	movs	r1, #0
   33d24:	4317      	orrs	r7, r2
   33d26:	e692      	b.n	33a4e <__aeabi_dsub+0x1be>
   33d28:	2e00      	cmp	r6, #0
   33d2a:	d114      	bne.n	33d56 <__aeabi_dsub+0x4c6>
   33d2c:	0026      	movs	r6, r4
   33d2e:	4650      	mov	r0, sl
   33d30:	4306      	orrs	r6, r0
   33d32:	d062      	beq.n	33dfa <__aeabi_dsub+0x56a>
   33d34:	43db      	mvns	r3, r3
   33d36:	2b00      	cmp	r3, #0
   33d38:	d15c      	bne.n	33df4 <__aeabi_dsub+0x564>
   33d3a:	1887      	adds	r7, r0, r2
   33d3c:	4297      	cmp	r7, r2
   33d3e:	4192      	sbcs	r2, r2
   33d40:	1864      	adds	r4, r4, r1
   33d42:	4252      	negs	r2, r2
   33d44:	18a4      	adds	r4, r4, r2
   33d46:	4666      	mov	r6, ip
   33d48:	e687      	b.n	33a5a <__aeabi_dsub+0x1ca>
   33d4a:	4650      	mov	r0, sl
   33d4c:	4320      	orrs	r0, r4
   33d4e:	1e44      	subs	r4, r0, #1
   33d50:	41a0      	sbcs	r0, r4
   33d52:	2400      	movs	r4, #0
   33d54:	e760      	b.n	33c18 <__aeabi_dsub+0x388>
   33d56:	4e57      	ldr	r6, [pc, #348]	; (33eb4 <__aeabi_dsub+0x624>)
   33d58:	45b4      	cmp	ip, r6
   33d5a:	d04e      	beq.n	33dfa <__aeabi_dsub+0x56a>
   33d5c:	2680      	movs	r6, #128	; 0x80
   33d5e:	0436      	lsls	r6, r6, #16
   33d60:	425b      	negs	r3, r3
   33d62:	4334      	orrs	r4, r6
   33d64:	2b38      	cmp	r3, #56	; 0x38
   33d66:	dd00      	ble.n	33d6a <__aeabi_dsub+0x4da>
   33d68:	e07f      	b.n	33e6a <__aeabi_dsub+0x5da>
   33d6a:	2b1f      	cmp	r3, #31
   33d6c:	dd00      	ble.n	33d70 <__aeabi_dsub+0x4e0>
   33d6e:	e08b      	b.n	33e88 <__aeabi_dsub+0x5f8>
   33d70:	2620      	movs	r6, #32
   33d72:	0027      	movs	r7, r4
   33d74:	4650      	mov	r0, sl
   33d76:	1af6      	subs	r6, r6, r3
   33d78:	40b7      	lsls	r7, r6
   33d7a:	40d8      	lsrs	r0, r3
   33d7c:	4307      	orrs	r7, r0
   33d7e:	4650      	mov	r0, sl
   33d80:	40b0      	lsls	r0, r6
   33d82:	1e46      	subs	r6, r0, #1
   33d84:	41b0      	sbcs	r0, r6
   33d86:	4307      	orrs	r7, r0
   33d88:	40dc      	lsrs	r4, r3
   33d8a:	18bf      	adds	r7, r7, r2
   33d8c:	e7d6      	b.n	33d3c <__aeabi_dsub+0x4ac>
   33d8e:	000d      	movs	r5, r1
   33d90:	4315      	orrs	r5, r2
   33d92:	d100      	bne.n	33d96 <__aeabi_dsub+0x506>
   33d94:	e602      	b.n	3399c <__aeabi_dsub+0x10c>
   33d96:	4650      	mov	r0, sl
   33d98:	1a80      	subs	r0, r0, r2
   33d9a:	4582      	cmp	sl, r0
   33d9c:	41bf      	sbcs	r7, r7
   33d9e:	1a65      	subs	r5, r4, r1
   33da0:	427f      	negs	r7, r7
   33da2:	1bed      	subs	r5, r5, r7
   33da4:	4684      	mov	ip, r0
   33da6:	0228      	lsls	r0, r5, #8
   33da8:	d400      	bmi.n	33dac <__aeabi_dsub+0x51c>
   33daa:	e68d      	b.n	33ac8 <__aeabi_dsub+0x238>
   33dac:	4650      	mov	r0, sl
   33dae:	1a17      	subs	r7, r2, r0
   33db0:	42ba      	cmp	r2, r7
   33db2:	4192      	sbcs	r2, r2
   33db4:	1b0c      	subs	r4, r1, r4
   33db6:	4252      	negs	r2, r2
   33db8:	1aa4      	subs	r4, r4, r2
   33dba:	4698      	mov	r8, r3
   33dbc:	e5ee      	b.n	3399c <__aeabi_dsub+0x10c>
   33dbe:	000d      	movs	r5, r1
   33dc0:	4315      	orrs	r5, r2
   33dc2:	d100      	bne.n	33dc6 <__aeabi_dsub+0x536>
   33dc4:	e76b      	b.n	33c9e <__aeabi_dsub+0x40e>
   33dc6:	4650      	mov	r0, sl
   33dc8:	0767      	lsls	r7, r4, #29
   33dca:	08c0      	lsrs	r0, r0, #3
   33dcc:	4307      	orrs	r7, r0
   33dce:	2080      	movs	r0, #128	; 0x80
   33dd0:	08e4      	lsrs	r4, r4, #3
   33dd2:	0300      	lsls	r0, r0, #12
   33dd4:	4204      	tst	r4, r0
   33dd6:	d007      	beq.n	33de8 <__aeabi_dsub+0x558>
   33dd8:	08cd      	lsrs	r5, r1, #3
   33dda:	4205      	tst	r5, r0
   33ddc:	d104      	bne.n	33de8 <__aeabi_dsub+0x558>
   33dde:	002c      	movs	r4, r5
   33de0:	4698      	mov	r8, r3
   33de2:	08d7      	lsrs	r7, r2, #3
   33de4:	0749      	lsls	r1, r1, #29
   33de6:	430f      	orrs	r7, r1
   33de8:	0f7b      	lsrs	r3, r7, #29
   33dea:	00e4      	lsls	r4, r4, #3
   33dec:	431c      	orrs	r4, r3
   33dee:	00ff      	lsls	r7, r7, #3
   33df0:	4e30      	ldr	r6, [pc, #192]	; (33eb4 <__aeabi_dsub+0x624>)
   33df2:	e5d3      	b.n	3399c <__aeabi_dsub+0x10c>
   33df4:	4e2f      	ldr	r6, [pc, #188]	; (33eb4 <__aeabi_dsub+0x624>)
   33df6:	45b4      	cmp	ip, r6
   33df8:	d1b4      	bne.n	33d64 <__aeabi_dsub+0x4d4>
   33dfa:	000c      	movs	r4, r1
   33dfc:	0017      	movs	r7, r2
   33dfe:	4666      	mov	r6, ip
   33e00:	e5cc      	b.n	3399c <__aeabi_dsub+0x10c>
   33e02:	2700      	movs	r7, #0
   33e04:	2400      	movs	r4, #0
   33e06:	e5e8      	b.n	339da <__aeabi_dsub+0x14a>
   33e08:	2b00      	cmp	r3, #0
   33e0a:	d039      	beq.n	33e80 <__aeabi_dsub+0x5f0>
   33e0c:	000b      	movs	r3, r1
   33e0e:	4313      	orrs	r3, r2
   33e10:	d100      	bne.n	33e14 <__aeabi_dsub+0x584>
   33e12:	e744      	b.n	33c9e <__aeabi_dsub+0x40e>
   33e14:	08c0      	lsrs	r0, r0, #3
   33e16:	0767      	lsls	r7, r4, #29
   33e18:	4307      	orrs	r7, r0
   33e1a:	2080      	movs	r0, #128	; 0x80
   33e1c:	08e4      	lsrs	r4, r4, #3
   33e1e:	0300      	lsls	r0, r0, #12
   33e20:	4204      	tst	r4, r0
   33e22:	d0e1      	beq.n	33de8 <__aeabi_dsub+0x558>
   33e24:	08cb      	lsrs	r3, r1, #3
   33e26:	4203      	tst	r3, r0
   33e28:	d1de      	bne.n	33de8 <__aeabi_dsub+0x558>
   33e2a:	08d7      	lsrs	r7, r2, #3
   33e2c:	0749      	lsls	r1, r1, #29
   33e2e:	430f      	orrs	r7, r1
   33e30:	001c      	movs	r4, r3
   33e32:	e7d9      	b.n	33de8 <__aeabi_dsub+0x558>
   33e34:	2100      	movs	r1, #0
   33e36:	e771      	b.n	33d1c <__aeabi_dsub+0x48c>
   33e38:	2500      	movs	r5, #0
   33e3a:	2700      	movs	r7, #0
   33e3c:	e5e9      	b.n	33a12 <__aeabi_dsub+0x182>
   33e3e:	002e      	movs	r6, r5
   33e40:	0027      	movs	r7, r4
   33e42:	3e20      	subs	r6, #32
   33e44:	40f7      	lsrs	r7, r6
   33e46:	2d20      	cmp	r5, #32
   33e48:	d02f      	beq.n	33eaa <__aeabi_dsub+0x61a>
   33e4a:	2640      	movs	r6, #64	; 0x40
   33e4c:	1b75      	subs	r5, r6, r5
   33e4e:	40ac      	lsls	r4, r5
   33e50:	4650      	mov	r0, sl
   33e52:	4320      	orrs	r0, r4
   33e54:	1e44      	subs	r4, r0, #1
   33e56:	41a0      	sbcs	r0, r4
   33e58:	2400      	movs	r4, #0
   33e5a:	4338      	orrs	r0, r7
   33e5c:	e6dc      	b.n	33c18 <__aeabi_dsub+0x388>
   33e5e:	2480      	movs	r4, #128	; 0x80
   33e60:	2500      	movs	r5, #0
   33e62:	0324      	lsls	r4, r4, #12
   33e64:	4e13      	ldr	r6, [pc, #76]	; (33eb4 <__aeabi_dsub+0x624>)
   33e66:	2700      	movs	r7, #0
   33e68:	e5d3      	b.n	33a12 <__aeabi_dsub+0x182>
   33e6a:	4650      	mov	r0, sl
   33e6c:	4320      	orrs	r0, r4
   33e6e:	0007      	movs	r7, r0
   33e70:	1e78      	subs	r0, r7, #1
   33e72:	4187      	sbcs	r7, r0
   33e74:	2400      	movs	r4, #0
   33e76:	18bf      	adds	r7, r7, r2
   33e78:	e760      	b.n	33d3c <__aeabi_dsub+0x4ac>
   33e7a:	000c      	movs	r4, r1
   33e7c:	0017      	movs	r7, r2
   33e7e:	e58d      	b.n	3399c <__aeabi_dsub+0x10c>
   33e80:	000c      	movs	r4, r1
   33e82:	0017      	movs	r7, r2
   33e84:	4e0b      	ldr	r6, [pc, #44]	; (33eb4 <__aeabi_dsub+0x624>)
   33e86:	e589      	b.n	3399c <__aeabi_dsub+0x10c>
   33e88:	001e      	movs	r6, r3
   33e8a:	0027      	movs	r7, r4
   33e8c:	3e20      	subs	r6, #32
   33e8e:	40f7      	lsrs	r7, r6
   33e90:	2b20      	cmp	r3, #32
   33e92:	d00c      	beq.n	33eae <__aeabi_dsub+0x61e>
   33e94:	2640      	movs	r6, #64	; 0x40
   33e96:	1af3      	subs	r3, r6, r3
   33e98:	409c      	lsls	r4, r3
   33e9a:	4650      	mov	r0, sl
   33e9c:	4320      	orrs	r0, r4
   33e9e:	1e44      	subs	r4, r0, #1
   33ea0:	41a0      	sbcs	r0, r4
   33ea2:	4307      	orrs	r7, r0
   33ea4:	2400      	movs	r4, #0
   33ea6:	18bf      	adds	r7, r7, r2
   33ea8:	e748      	b.n	33d3c <__aeabi_dsub+0x4ac>
   33eaa:	2400      	movs	r4, #0
   33eac:	e7d0      	b.n	33e50 <__aeabi_dsub+0x5c0>
   33eae:	2400      	movs	r4, #0
   33eb0:	e7f3      	b.n	33e9a <__aeabi_dsub+0x60a>
   33eb2:	46c0      	nop			; (mov r8, r8)
   33eb4:	000007ff 	.word	0x000007ff
   33eb8:	ff7fffff 	.word	0xff7fffff

00033ebc <__aeabi_d2iz>:
   33ebc:	b530      	push	{r4, r5, lr}
   33ebe:	4d13      	ldr	r5, [pc, #76]	; (33f0c <__aeabi_d2iz+0x50>)
   33ec0:	030a      	lsls	r2, r1, #12
   33ec2:	004b      	lsls	r3, r1, #1
   33ec4:	0b12      	lsrs	r2, r2, #12
   33ec6:	0d5b      	lsrs	r3, r3, #21
   33ec8:	0fc9      	lsrs	r1, r1, #31
   33eca:	2400      	movs	r4, #0
   33ecc:	42ab      	cmp	r3, r5
   33ece:	dd10      	ble.n	33ef2 <__aeabi_d2iz+0x36>
   33ed0:	4c0f      	ldr	r4, [pc, #60]	; (33f10 <__aeabi_d2iz+0x54>)
   33ed2:	42a3      	cmp	r3, r4
   33ed4:	dc0f      	bgt.n	33ef6 <__aeabi_d2iz+0x3a>
   33ed6:	2480      	movs	r4, #128	; 0x80
   33ed8:	4d0e      	ldr	r5, [pc, #56]	; (33f14 <__aeabi_d2iz+0x58>)
   33eda:	0364      	lsls	r4, r4, #13
   33edc:	4322      	orrs	r2, r4
   33ede:	1aed      	subs	r5, r5, r3
   33ee0:	2d1f      	cmp	r5, #31
   33ee2:	dd0b      	ble.n	33efc <__aeabi_d2iz+0x40>
   33ee4:	480c      	ldr	r0, [pc, #48]	; (33f18 <__aeabi_d2iz+0x5c>)
   33ee6:	1ac3      	subs	r3, r0, r3
   33ee8:	40da      	lsrs	r2, r3
   33eea:	4254      	negs	r4, r2
   33eec:	2900      	cmp	r1, #0
   33eee:	d100      	bne.n	33ef2 <__aeabi_d2iz+0x36>
   33ef0:	0014      	movs	r4, r2
   33ef2:	0020      	movs	r0, r4
   33ef4:	bd30      	pop	{r4, r5, pc}
   33ef6:	4b09      	ldr	r3, [pc, #36]	; (33f1c <__aeabi_d2iz+0x60>)
   33ef8:	18cc      	adds	r4, r1, r3
   33efa:	e7fa      	b.n	33ef2 <__aeabi_d2iz+0x36>
   33efc:	4c08      	ldr	r4, [pc, #32]	; (33f20 <__aeabi_d2iz+0x64>)
   33efe:	40e8      	lsrs	r0, r5
   33f00:	46a4      	mov	ip, r4
   33f02:	4463      	add	r3, ip
   33f04:	409a      	lsls	r2, r3
   33f06:	4302      	orrs	r2, r0
   33f08:	e7ef      	b.n	33eea <__aeabi_d2iz+0x2e>
   33f0a:	46c0      	nop			; (mov r8, r8)
   33f0c:	000003fe 	.word	0x000003fe
   33f10:	0000041d 	.word	0x0000041d
   33f14:	00000433 	.word	0x00000433
   33f18:	00000413 	.word	0x00000413
   33f1c:	7fffffff 	.word	0x7fffffff
   33f20:	fffffbed 	.word	0xfffffbed

00033f24 <__aeabi_ui2d>:
   33f24:	b510      	push	{r4, lr}
   33f26:	1e04      	subs	r4, r0, #0
   33f28:	d028      	beq.n	33f7c <__aeabi_ui2d+0x58>
   33f2a:	f000 f833 	bl	33f94 <__clzsi2>
   33f2e:	4b15      	ldr	r3, [pc, #84]	; (33f84 <__aeabi_ui2d+0x60>)
   33f30:	4a15      	ldr	r2, [pc, #84]	; (33f88 <__aeabi_ui2d+0x64>)
   33f32:	1a1b      	subs	r3, r3, r0
   33f34:	1ad2      	subs	r2, r2, r3
   33f36:	2a1f      	cmp	r2, #31
   33f38:	dd15      	ble.n	33f66 <__aeabi_ui2d+0x42>
   33f3a:	4a14      	ldr	r2, [pc, #80]	; (33f8c <__aeabi_ui2d+0x68>)
   33f3c:	1ad2      	subs	r2, r2, r3
   33f3e:	4094      	lsls	r4, r2
   33f40:	2200      	movs	r2, #0
   33f42:	0324      	lsls	r4, r4, #12
   33f44:	055b      	lsls	r3, r3, #21
   33f46:	0b24      	lsrs	r4, r4, #12
   33f48:	0d5b      	lsrs	r3, r3, #21
   33f4a:	2100      	movs	r1, #0
   33f4c:	0010      	movs	r0, r2
   33f4e:	0324      	lsls	r4, r4, #12
   33f50:	0d0a      	lsrs	r2, r1, #20
   33f52:	0b24      	lsrs	r4, r4, #12
   33f54:	0512      	lsls	r2, r2, #20
   33f56:	4322      	orrs	r2, r4
   33f58:	4c0d      	ldr	r4, [pc, #52]	; (33f90 <__aeabi_ui2d+0x6c>)
   33f5a:	051b      	lsls	r3, r3, #20
   33f5c:	4022      	ands	r2, r4
   33f5e:	4313      	orrs	r3, r2
   33f60:	005b      	lsls	r3, r3, #1
   33f62:	0859      	lsrs	r1, r3, #1
   33f64:	bd10      	pop	{r4, pc}
   33f66:	0021      	movs	r1, r4
   33f68:	4091      	lsls	r1, r2
   33f6a:	000a      	movs	r2, r1
   33f6c:	210b      	movs	r1, #11
   33f6e:	1a08      	subs	r0, r1, r0
   33f70:	40c4      	lsrs	r4, r0
   33f72:	055b      	lsls	r3, r3, #21
   33f74:	0324      	lsls	r4, r4, #12
   33f76:	0b24      	lsrs	r4, r4, #12
   33f78:	0d5b      	lsrs	r3, r3, #21
   33f7a:	e7e6      	b.n	33f4a <__aeabi_ui2d+0x26>
   33f7c:	2300      	movs	r3, #0
   33f7e:	2400      	movs	r4, #0
   33f80:	2200      	movs	r2, #0
   33f82:	e7e2      	b.n	33f4a <__aeabi_ui2d+0x26>
   33f84:	0000041e 	.word	0x0000041e
   33f88:	00000433 	.word	0x00000433
   33f8c:	00000413 	.word	0x00000413
   33f90:	800fffff 	.word	0x800fffff

00033f94 <__clzsi2>:
   33f94:	211c      	movs	r1, #28
   33f96:	2301      	movs	r3, #1
   33f98:	041b      	lsls	r3, r3, #16
   33f9a:	4298      	cmp	r0, r3
   33f9c:	d301      	bcc.n	33fa2 <__clzsi2+0xe>
   33f9e:	0c00      	lsrs	r0, r0, #16
   33fa0:	3910      	subs	r1, #16
   33fa2:	0a1b      	lsrs	r3, r3, #8
   33fa4:	4298      	cmp	r0, r3
   33fa6:	d301      	bcc.n	33fac <__clzsi2+0x18>
   33fa8:	0a00      	lsrs	r0, r0, #8
   33faa:	3908      	subs	r1, #8
   33fac:	091b      	lsrs	r3, r3, #4
   33fae:	4298      	cmp	r0, r3
   33fb0:	d301      	bcc.n	33fb6 <__clzsi2+0x22>
   33fb2:	0900      	lsrs	r0, r0, #4
   33fb4:	3904      	subs	r1, #4
   33fb6:	a202      	add	r2, pc, #8	; (adr r2, 33fc0 <__clzsi2+0x2c>)
   33fb8:	5c10      	ldrb	r0, [r2, r0]
   33fba:	1840      	adds	r0, r0, r1
   33fbc:	4770      	bx	lr
   33fbe:	46c0      	nop			; (mov r8, r8)
   33fc0:	02020304 	.word	0x02020304
   33fc4:	01010101 	.word	0x01010101
	...

00033fd0 <atoi>:
   33fd0:	b510      	push	{r4, lr}
   33fd2:	220a      	movs	r2, #10
   33fd4:	2100      	movs	r1, #0
   33fd6:	f000 fb0d 	bl	345f4 <strtol>
   33fda:	bd10      	pop	{r4, pc}

00033fdc <__libc_init_array>:
   33fdc:	b570      	push	{r4, r5, r6, lr}
   33fde:	2600      	movs	r6, #0
   33fe0:	4d0c      	ldr	r5, [pc, #48]	; (34014 <__libc_init_array+0x38>)
   33fe2:	4c0d      	ldr	r4, [pc, #52]	; (34018 <__libc_init_array+0x3c>)
   33fe4:	1b64      	subs	r4, r4, r5
   33fe6:	10a4      	asrs	r4, r4, #2
   33fe8:	42a6      	cmp	r6, r4
   33fea:	d109      	bne.n	34000 <__libc_init_array+0x24>
   33fec:	2600      	movs	r6, #0
   33fee:	f006 fe9d 	bl	3ad2c <_init>
   33ff2:	4d0a      	ldr	r5, [pc, #40]	; (3401c <__libc_init_array+0x40>)
   33ff4:	4c0a      	ldr	r4, [pc, #40]	; (34020 <__libc_init_array+0x44>)
   33ff6:	1b64      	subs	r4, r4, r5
   33ff8:	10a4      	asrs	r4, r4, #2
   33ffa:	42a6      	cmp	r6, r4
   33ffc:	d105      	bne.n	3400a <__libc_init_array+0x2e>
   33ffe:	bd70      	pop	{r4, r5, r6, pc}
   34000:	00b3      	lsls	r3, r6, #2
   34002:	58eb      	ldr	r3, [r5, r3]
   34004:	4798      	blx	r3
   34006:	3601      	adds	r6, #1
   34008:	e7ee      	b.n	33fe8 <__libc_init_array+0xc>
   3400a:	00b3      	lsls	r3, r6, #2
   3400c:	58eb      	ldr	r3, [r5, r3]
   3400e:	4798      	blx	r3
   34010:	3601      	adds	r6, #1
   34012:	e7f2      	b.n	33ffa <__libc_init_array+0x1e>
   34014:	0003ad38 	.word	0x0003ad38
   34018:	0003ad38 	.word	0x0003ad38
   3401c:	0003ad38 	.word	0x0003ad38
   34020:	0003ad3c 	.word	0x0003ad3c

00034024 <malloc>:
   34024:	b510      	push	{r4, lr}
   34026:	4b03      	ldr	r3, [pc, #12]	; (34034 <malloc+0x10>)
   34028:	0001      	movs	r1, r0
   3402a:	6818      	ldr	r0, [r3, #0]
   3402c:	f000 f87c 	bl	34128 <_malloc_r>
   34030:	bd10      	pop	{r4, pc}
   34032:	46c0      	nop			; (mov r8, r8)
   34034:	200000e8 	.word	0x200000e8

00034038 <free>:
   34038:	b510      	push	{r4, lr}
   3403a:	4b03      	ldr	r3, [pc, #12]	; (34048 <free+0x10>)
   3403c:	0001      	movs	r1, r0
   3403e:	6818      	ldr	r0, [r3, #0]
   34040:	f000 f828 	bl	34094 <_free_r>
   34044:	bd10      	pop	{r4, pc}
   34046:	46c0      	nop			; (mov r8, r8)
   34048:	200000e8 	.word	0x200000e8

0003404c <memcpy>:
   3404c:	2300      	movs	r3, #0
   3404e:	b510      	push	{r4, lr}
   34050:	429a      	cmp	r2, r3
   34052:	d100      	bne.n	34056 <memcpy+0xa>
   34054:	bd10      	pop	{r4, pc}
   34056:	5ccc      	ldrb	r4, [r1, r3]
   34058:	54c4      	strb	r4, [r0, r3]
   3405a:	3301      	adds	r3, #1
   3405c:	e7f8      	b.n	34050 <memcpy+0x4>

0003405e <memmove>:
   3405e:	b510      	push	{r4, lr}
   34060:	4288      	cmp	r0, r1
   34062:	d902      	bls.n	3406a <memmove+0xc>
   34064:	188b      	adds	r3, r1, r2
   34066:	4298      	cmp	r0, r3
   34068:	d308      	bcc.n	3407c <memmove+0x1e>
   3406a:	2300      	movs	r3, #0
   3406c:	429a      	cmp	r2, r3
   3406e:	d007      	beq.n	34080 <memmove+0x22>
   34070:	5ccc      	ldrb	r4, [r1, r3]
   34072:	54c4      	strb	r4, [r0, r3]
   34074:	3301      	adds	r3, #1
   34076:	e7f9      	b.n	3406c <memmove+0xe>
   34078:	5c8b      	ldrb	r3, [r1, r2]
   3407a:	5483      	strb	r3, [r0, r2]
   3407c:	3a01      	subs	r2, #1
   3407e:	d2fb      	bcs.n	34078 <memmove+0x1a>
   34080:	bd10      	pop	{r4, pc}

00034082 <memset>:
   34082:	0003      	movs	r3, r0
   34084:	1882      	adds	r2, r0, r2
   34086:	4293      	cmp	r3, r2
   34088:	d100      	bne.n	3408c <memset+0xa>
   3408a:	4770      	bx	lr
   3408c:	7019      	strb	r1, [r3, #0]
   3408e:	3301      	adds	r3, #1
   34090:	e7f9      	b.n	34086 <memset+0x4>
	...

00034094 <_free_r>:
   34094:	b570      	push	{r4, r5, r6, lr}
   34096:	0005      	movs	r5, r0
   34098:	2900      	cmp	r1, #0
   3409a:	d010      	beq.n	340be <_free_r+0x2a>
   3409c:	1f0c      	subs	r4, r1, #4
   3409e:	6823      	ldr	r3, [r4, #0]
   340a0:	2b00      	cmp	r3, #0
   340a2:	da00      	bge.n	340a6 <_free_r+0x12>
   340a4:	18e4      	adds	r4, r4, r3
   340a6:	0028      	movs	r0, r5
   340a8:	f000 fdd8 	bl	34c5c <__malloc_lock>
   340ac:	4a1d      	ldr	r2, [pc, #116]	; (34124 <_free_r+0x90>)
   340ae:	6813      	ldr	r3, [r2, #0]
   340b0:	2b00      	cmp	r3, #0
   340b2:	d105      	bne.n	340c0 <_free_r+0x2c>
   340b4:	6063      	str	r3, [r4, #4]
   340b6:	6014      	str	r4, [r2, #0]
   340b8:	0028      	movs	r0, r5
   340ba:	f000 fdd0 	bl	34c5e <__malloc_unlock>
   340be:	bd70      	pop	{r4, r5, r6, pc}
   340c0:	42a3      	cmp	r3, r4
   340c2:	d909      	bls.n	340d8 <_free_r+0x44>
   340c4:	6821      	ldr	r1, [r4, #0]
   340c6:	1860      	adds	r0, r4, r1
   340c8:	4283      	cmp	r3, r0
   340ca:	d1f3      	bne.n	340b4 <_free_r+0x20>
   340cc:	6818      	ldr	r0, [r3, #0]
   340ce:	685b      	ldr	r3, [r3, #4]
   340d0:	1841      	adds	r1, r0, r1
   340d2:	6021      	str	r1, [r4, #0]
   340d4:	e7ee      	b.n	340b4 <_free_r+0x20>
   340d6:	0013      	movs	r3, r2
   340d8:	685a      	ldr	r2, [r3, #4]
   340da:	2a00      	cmp	r2, #0
   340dc:	d001      	beq.n	340e2 <_free_r+0x4e>
   340de:	42a2      	cmp	r2, r4
   340e0:	d9f9      	bls.n	340d6 <_free_r+0x42>
   340e2:	6819      	ldr	r1, [r3, #0]
   340e4:	1858      	adds	r0, r3, r1
   340e6:	42a0      	cmp	r0, r4
   340e8:	d10b      	bne.n	34102 <_free_r+0x6e>
   340ea:	6820      	ldr	r0, [r4, #0]
   340ec:	1809      	adds	r1, r1, r0
   340ee:	1858      	adds	r0, r3, r1
   340f0:	6019      	str	r1, [r3, #0]
   340f2:	4282      	cmp	r2, r0
   340f4:	d1e0      	bne.n	340b8 <_free_r+0x24>
   340f6:	6810      	ldr	r0, [r2, #0]
   340f8:	6852      	ldr	r2, [r2, #4]
   340fa:	1841      	adds	r1, r0, r1
   340fc:	6019      	str	r1, [r3, #0]
   340fe:	605a      	str	r2, [r3, #4]
   34100:	e7da      	b.n	340b8 <_free_r+0x24>
   34102:	42a0      	cmp	r0, r4
   34104:	d902      	bls.n	3410c <_free_r+0x78>
   34106:	230c      	movs	r3, #12
   34108:	602b      	str	r3, [r5, #0]
   3410a:	e7d5      	b.n	340b8 <_free_r+0x24>
   3410c:	6821      	ldr	r1, [r4, #0]
   3410e:	1860      	adds	r0, r4, r1
   34110:	4282      	cmp	r2, r0
   34112:	d103      	bne.n	3411c <_free_r+0x88>
   34114:	6810      	ldr	r0, [r2, #0]
   34116:	6852      	ldr	r2, [r2, #4]
   34118:	1841      	adds	r1, r0, r1
   3411a:	6021      	str	r1, [r4, #0]
   3411c:	6062      	str	r2, [r4, #4]
   3411e:	605c      	str	r4, [r3, #4]
   34120:	e7ca      	b.n	340b8 <_free_r+0x24>
   34122:	46c0      	nop			; (mov r8, r8)
   34124:	20004148 	.word	0x20004148

00034128 <_malloc_r>:
   34128:	2303      	movs	r3, #3
   3412a:	b570      	push	{r4, r5, r6, lr}
   3412c:	1ccd      	adds	r5, r1, #3
   3412e:	439d      	bics	r5, r3
   34130:	3508      	adds	r5, #8
   34132:	0006      	movs	r6, r0
   34134:	2d0c      	cmp	r5, #12
   34136:	d21e      	bcs.n	34176 <_malloc_r+0x4e>
   34138:	250c      	movs	r5, #12
   3413a:	42a9      	cmp	r1, r5
   3413c:	d81d      	bhi.n	3417a <_malloc_r+0x52>
   3413e:	0030      	movs	r0, r6
   34140:	f000 fd8c 	bl	34c5c <__malloc_lock>
   34144:	4a25      	ldr	r2, [pc, #148]	; (341dc <_malloc_r+0xb4>)
   34146:	6814      	ldr	r4, [r2, #0]
   34148:	0021      	movs	r1, r4
   3414a:	2900      	cmp	r1, #0
   3414c:	d119      	bne.n	34182 <_malloc_r+0x5a>
   3414e:	4c24      	ldr	r4, [pc, #144]	; (341e0 <_malloc_r+0xb8>)
   34150:	6823      	ldr	r3, [r4, #0]
   34152:	2b00      	cmp	r3, #0
   34154:	d103      	bne.n	3415e <_malloc_r+0x36>
   34156:	0030      	movs	r0, r6
   34158:	f000 f8ae 	bl	342b8 <_sbrk_r>
   3415c:	6020      	str	r0, [r4, #0]
   3415e:	0029      	movs	r1, r5
   34160:	0030      	movs	r0, r6
   34162:	f000 f8a9 	bl	342b8 <_sbrk_r>
   34166:	1c43      	adds	r3, r0, #1
   34168:	d12c      	bne.n	341c4 <_malloc_r+0x9c>
   3416a:	230c      	movs	r3, #12
   3416c:	0030      	movs	r0, r6
   3416e:	6033      	str	r3, [r6, #0]
   34170:	f000 fd75 	bl	34c5e <__malloc_unlock>
   34174:	e003      	b.n	3417e <_malloc_r+0x56>
   34176:	2d00      	cmp	r5, #0
   34178:	dadf      	bge.n	3413a <_malloc_r+0x12>
   3417a:	230c      	movs	r3, #12
   3417c:	6033      	str	r3, [r6, #0]
   3417e:	2000      	movs	r0, #0
   34180:	bd70      	pop	{r4, r5, r6, pc}
   34182:	680b      	ldr	r3, [r1, #0]
   34184:	1b5b      	subs	r3, r3, r5
   34186:	d41a      	bmi.n	341be <_malloc_r+0x96>
   34188:	2b0b      	cmp	r3, #11
   3418a:	d903      	bls.n	34194 <_malloc_r+0x6c>
   3418c:	600b      	str	r3, [r1, #0]
   3418e:	18cc      	adds	r4, r1, r3
   34190:	6025      	str	r5, [r4, #0]
   34192:	e003      	b.n	3419c <_malloc_r+0x74>
   34194:	428c      	cmp	r4, r1
   34196:	d10e      	bne.n	341b6 <_malloc_r+0x8e>
   34198:	6863      	ldr	r3, [r4, #4]
   3419a:	6013      	str	r3, [r2, #0]
   3419c:	0030      	movs	r0, r6
   3419e:	f000 fd5e 	bl	34c5e <__malloc_unlock>
   341a2:	0020      	movs	r0, r4
   341a4:	2207      	movs	r2, #7
   341a6:	300b      	adds	r0, #11
   341a8:	1d23      	adds	r3, r4, #4
   341aa:	4390      	bics	r0, r2
   341ac:	1ac3      	subs	r3, r0, r3
   341ae:	d0e7      	beq.n	34180 <_malloc_r+0x58>
   341b0:	425a      	negs	r2, r3
   341b2:	50e2      	str	r2, [r4, r3]
   341b4:	e7e4      	b.n	34180 <_malloc_r+0x58>
   341b6:	684b      	ldr	r3, [r1, #4]
   341b8:	6063      	str	r3, [r4, #4]
   341ba:	000c      	movs	r4, r1
   341bc:	e7ee      	b.n	3419c <_malloc_r+0x74>
   341be:	000c      	movs	r4, r1
   341c0:	6849      	ldr	r1, [r1, #4]
   341c2:	e7c2      	b.n	3414a <_malloc_r+0x22>
   341c4:	2303      	movs	r3, #3
   341c6:	1cc4      	adds	r4, r0, #3
   341c8:	439c      	bics	r4, r3
   341ca:	42a0      	cmp	r0, r4
   341cc:	d0e0      	beq.n	34190 <_malloc_r+0x68>
   341ce:	1a21      	subs	r1, r4, r0
   341d0:	0030      	movs	r0, r6
   341d2:	f000 f871 	bl	342b8 <_sbrk_r>
   341d6:	1c43      	adds	r3, r0, #1
   341d8:	d1da      	bne.n	34190 <_malloc_r+0x68>
   341da:	e7c6      	b.n	3416a <_malloc_r+0x42>
   341dc:	20004148 	.word	0x20004148
   341e0:	2000414c 	.word	0x2000414c

000341e4 <_puts_r>:
   341e4:	b570      	push	{r4, r5, r6, lr}
   341e6:	0005      	movs	r5, r0
   341e8:	000e      	movs	r6, r1
   341ea:	2800      	cmp	r0, #0
   341ec:	d004      	beq.n	341f8 <_puts_r+0x14>
   341ee:	6983      	ldr	r3, [r0, #24]
   341f0:	2b00      	cmp	r3, #0
   341f2:	d101      	bne.n	341f8 <_puts_r+0x14>
   341f4:	f000 fc0e 	bl	34a14 <__sinit>
   341f8:	69ab      	ldr	r3, [r5, #24]
   341fa:	68ac      	ldr	r4, [r5, #8]
   341fc:	2b00      	cmp	r3, #0
   341fe:	d102      	bne.n	34206 <_puts_r+0x22>
   34200:	0028      	movs	r0, r5
   34202:	f000 fc07 	bl	34a14 <__sinit>
   34206:	4b24      	ldr	r3, [pc, #144]	; (34298 <_puts_r+0xb4>)
   34208:	429c      	cmp	r4, r3
   3420a:	d10f      	bne.n	3422c <_puts_r+0x48>
   3420c:	686c      	ldr	r4, [r5, #4]
   3420e:	89a3      	ldrh	r3, [r4, #12]
   34210:	071b      	lsls	r3, r3, #28
   34212:	d502      	bpl.n	3421a <_puts_r+0x36>
   34214:	6923      	ldr	r3, [r4, #16]
   34216:	2b00      	cmp	r3, #0
   34218:	d120      	bne.n	3425c <_puts_r+0x78>
   3421a:	0021      	movs	r1, r4
   3421c:	0028      	movs	r0, r5
   3421e:	f000 fa8b 	bl	34738 <__swsetup_r>
   34222:	2800      	cmp	r0, #0
   34224:	d01a      	beq.n	3425c <_puts_r+0x78>
   34226:	2001      	movs	r0, #1
   34228:	4240      	negs	r0, r0
   3422a:	bd70      	pop	{r4, r5, r6, pc}
   3422c:	4b1b      	ldr	r3, [pc, #108]	; (3429c <_puts_r+0xb8>)
   3422e:	429c      	cmp	r4, r3
   34230:	d101      	bne.n	34236 <_puts_r+0x52>
   34232:	68ac      	ldr	r4, [r5, #8]
   34234:	e7eb      	b.n	3420e <_puts_r+0x2a>
   34236:	4b1a      	ldr	r3, [pc, #104]	; (342a0 <_puts_r+0xbc>)
   34238:	429c      	cmp	r4, r3
   3423a:	d1e8      	bne.n	3420e <_puts_r+0x2a>
   3423c:	68ec      	ldr	r4, [r5, #12]
   3423e:	e7e6      	b.n	3420e <_puts_r+0x2a>
   34240:	3b01      	subs	r3, #1
   34242:	3601      	adds	r6, #1
   34244:	60a3      	str	r3, [r4, #8]
   34246:	2b00      	cmp	r3, #0
   34248:	da04      	bge.n	34254 <_puts_r+0x70>
   3424a:	69a2      	ldr	r2, [r4, #24]
   3424c:	4293      	cmp	r3, r2
   3424e:	db16      	blt.n	3427e <_puts_r+0x9a>
   34250:	290a      	cmp	r1, #10
   34252:	d014      	beq.n	3427e <_puts_r+0x9a>
   34254:	6823      	ldr	r3, [r4, #0]
   34256:	1c5a      	adds	r2, r3, #1
   34258:	6022      	str	r2, [r4, #0]
   3425a:	7019      	strb	r1, [r3, #0]
   3425c:	7831      	ldrb	r1, [r6, #0]
   3425e:	68a3      	ldr	r3, [r4, #8]
   34260:	2900      	cmp	r1, #0
   34262:	d1ed      	bne.n	34240 <_puts_r+0x5c>
   34264:	3b01      	subs	r3, #1
   34266:	60a3      	str	r3, [r4, #8]
   34268:	2b00      	cmp	r3, #0
   3426a:	da0f      	bge.n	3428c <_puts_r+0xa8>
   3426c:	0022      	movs	r2, r4
   3426e:	310a      	adds	r1, #10
   34270:	0028      	movs	r0, r5
   34272:	f000 fa0b 	bl	3468c <__swbuf_r>
   34276:	1c43      	adds	r3, r0, #1
   34278:	d0d5      	beq.n	34226 <_puts_r+0x42>
   3427a:	200a      	movs	r0, #10
   3427c:	e7d5      	b.n	3422a <_puts_r+0x46>
   3427e:	0022      	movs	r2, r4
   34280:	0028      	movs	r0, r5
   34282:	f000 fa03 	bl	3468c <__swbuf_r>
   34286:	1c43      	adds	r3, r0, #1
   34288:	d1e8      	bne.n	3425c <_puts_r+0x78>
   3428a:	e7cc      	b.n	34226 <_puts_r+0x42>
   3428c:	200a      	movs	r0, #10
   3428e:	6823      	ldr	r3, [r4, #0]
   34290:	1c5a      	adds	r2, r3, #1
   34292:	6022      	str	r2, [r4, #0]
   34294:	7018      	strb	r0, [r3, #0]
   34296:	e7c8      	b.n	3422a <_puts_r+0x46>
   34298:	0003abac 	.word	0x0003abac
   3429c:	0003abcc 	.word	0x0003abcc
   342a0:	0003ab8c 	.word	0x0003ab8c

000342a4 <puts>:
   342a4:	b510      	push	{r4, lr}
   342a6:	4b03      	ldr	r3, [pc, #12]	; (342b4 <puts+0x10>)
   342a8:	0001      	movs	r1, r0
   342aa:	6818      	ldr	r0, [r3, #0]
   342ac:	f7ff ff9a 	bl	341e4 <_puts_r>
   342b0:	bd10      	pop	{r4, pc}
   342b2:	46c0      	nop			; (mov r8, r8)
   342b4:	200000e8 	.word	0x200000e8

000342b8 <_sbrk_r>:
   342b8:	2300      	movs	r3, #0
   342ba:	b570      	push	{r4, r5, r6, lr}
   342bc:	4c06      	ldr	r4, [pc, #24]	; (342d8 <_sbrk_r+0x20>)
   342be:	0005      	movs	r5, r0
   342c0:	0008      	movs	r0, r1
   342c2:	6023      	str	r3, [r4, #0]
   342c4:	f7f6 fc50 	bl	2ab68 <_sbrk>
   342c8:	1c43      	adds	r3, r0, #1
   342ca:	d103      	bne.n	342d4 <_sbrk_r+0x1c>
   342cc:	6823      	ldr	r3, [r4, #0]
   342ce:	2b00      	cmp	r3, #0
   342d0:	d000      	beq.n	342d4 <_sbrk_r+0x1c>
   342d2:	602b      	str	r3, [r5, #0]
   342d4:	bd70      	pop	{r4, r5, r6, pc}
   342d6:	46c0      	nop			; (mov r8, r8)
   342d8:	200055b0 	.word	0x200055b0

000342dc <sniprintf>:
   342dc:	b40c      	push	{r2, r3}
   342de:	b530      	push	{r4, r5, lr}
   342e0:	4b16      	ldr	r3, [pc, #88]	; (3433c <sniprintf+0x60>)
   342e2:	b09d      	sub	sp, #116	; 0x74
   342e4:	1e0c      	subs	r4, r1, #0
   342e6:	681d      	ldr	r5, [r3, #0]
   342e8:	da08      	bge.n	342fc <sniprintf+0x20>
   342ea:	238b      	movs	r3, #139	; 0x8b
   342ec:	2001      	movs	r0, #1
   342ee:	602b      	str	r3, [r5, #0]
   342f0:	4240      	negs	r0, r0
   342f2:	b01d      	add	sp, #116	; 0x74
   342f4:	bc30      	pop	{r4, r5}
   342f6:	bc08      	pop	{r3}
   342f8:	b002      	add	sp, #8
   342fa:	4718      	bx	r3
   342fc:	2382      	movs	r3, #130	; 0x82
   342fe:	a902      	add	r1, sp, #8
   34300:	009b      	lsls	r3, r3, #2
   34302:	818b      	strh	r3, [r1, #12]
   34304:	2300      	movs	r3, #0
   34306:	9002      	str	r0, [sp, #8]
   34308:	6108      	str	r0, [r1, #16]
   3430a:	429c      	cmp	r4, r3
   3430c:	d000      	beq.n	34310 <sniprintf+0x34>
   3430e:	1e63      	subs	r3, r4, #1
   34310:	608b      	str	r3, [r1, #8]
   34312:	614b      	str	r3, [r1, #20]
   34314:	2301      	movs	r3, #1
   34316:	425b      	negs	r3, r3
   34318:	81cb      	strh	r3, [r1, #14]
   3431a:	9a20      	ldr	r2, [sp, #128]	; 0x80
   3431c:	ab21      	add	r3, sp, #132	; 0x84
   3431e:	0028      	movs	r0, r5
   34320:	9301      	str	r3, [sp, #4]
   34322:	f000 fcff 	bl	34d24 <_svfiprintf_r>
   34326:	1c43      	adds	r3, r0, #1
   34328:	da01      	bge.n	3432e <sniprintf+0x52>
   3432a:	238b      	movs	r3, #139	; 0x8b
   3432c:	602b      	str	r3, [r5, #0]
   3432e:	2c00      	cmp	r4, #0
   34330:	d0df      	beq.n	342f2 <sniprintf+0x16>
   34332:	2300      	movs	r3, #0
   34334:	9a02      	ldr	r2, [sp, #8]
   34336:	7013      	strb	r3, [r2, #0]
   34338:	e7db      	b.n	342f2 <sniprintf+0x16>
   3433a:	46c0      	nop			; (mov r8, r8)
   3433c:	200000e8 	.word	0x200000e8

00034340 <siprintf>:
   34340:	b40e      	push	{r1, r2, r3}
   34342:	b510      	push	{r4, lr}
   34344:	b09d      	sub	sp, #116	; 0x74
   34346:	a902      	add	r1, sp, #8
   34348:	9002      	str	r0, [sp, #8]
   3434a:	6108      	str	r0, [r1, #16]
   3434c:	480b      	ldr	r0, [pc, #44]	; (3437c <siprintf+0x3c>)
   3434e:	2482      	movs	r4, #130	; 0x82
   34350:	6088      	str	r0, [r1, #8]
   34352:	6148      	str	r0, [r1, #20]
   34354:	2001      	movs	r0, #1
   34356:	4240      	negs	r0, r0
   34358:	ab1f      	add	r3, sp, #124	; 0x7c
   3435a:	81c8      	strh	r0, [r1, #14]
   3435c:	4808      	ldr	r0, [pc, #32]	; (34380 <siprintf+0x40>)
   3435e:	cb04      	ldmia	r3!, {r2}
   34360:	00a4      	lsls	r4, r4, #2
   34362:	6800      	ldr	r0, [r0, #0]
   34364:	9301      	str	r3, [sp, #4]
   34366:	818c      	strh	r4, [r1, #12]
   34368:	f000 fcdc 	bl	34d24 <_svfiprintf_r>
   3436c:	2300      	movs	r3, #0
   3436e:	9a02      	ldr	r2, [sp, #8]
   34370:	7013      	strb	r3, [r2, #0]
   34372:	b01d      	add	sp, #116	; 0x74
   34374:	bc10      	pop	{r4}
   34376:	bc08      	pop	{r3}
   34378:	b003      	add	sp, #12
   3437a:	4718      	bx	r3
   3437c:	7fffffff 	.word	0x7fffffff
   34380:	200000e8 	.word	0x200000e8

00034384 <strcasecmp>:
   34384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   34386:	0007      	movs	r7, r0
   34388:	000e      	movs	r6, r1
   3438a:	783c      	ldrb	r4, [r7, #0]
   3438c:	f000 fbda 	bl	34b44 <__locale_ctype_ptr>
   34390:	2203      	movs	r2, #3
   34392:	1900      	adds	r0, r0, r4
   34394:	7843      	ldrb	r3, [r0, #1]
   34396:	4013      	ands	r3, r2
   34398:	2b01      	cmp	r3, #1
   3439a:	d100      	bne.n	3439e <strcasecmp+0x1a>
   3439c:	3420      	adds	r4, #32
   3439e:	7835      	ldrb	r5, [r6, #0]
   343a0:	f000 fbd0 	bl	34b44 <__locale_ctype_ptr>
   343a4:	2203      	movs	r2, #3
   343a6:	1940      	adds	r0, r0, r5
   343a8:	7843      	ldrb	r3, [r0, #1]
   343aa:	4013      	ands	r3, r2
   343ac:	2b01      	cmp	r3, #1
   343ae:	d100      	bne.n	343b2 <strcasecmp+0x2e>
   343b0:	3520      	adds	r5, #32
   343b2:	1b60      	subs	r0, r4, r5
   343b4:	d103      	bne.n	343be <strcasecmp+0x3a>
   343b6:	3701      	adds	r7, #1
   343b8:	3601      	adds	r6, #1
   343ba:	2d00      	cmp	r5, #0
   343bc:	d1e5      	bne.n	3438a <strcasecmp+0x6>
   343be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000343c0 <strcat>:
   343c0:	0002      	movs	r2, r0
   343c2:	b510      	push	{r4, lr}
   343c4:	7813      	ldrb	r3, [r2, #0]
   343c6:	2b00      	cmp	r3, #0
   343c8:	d105      	bne.n	343d6 <strcat+0x16>
   343ca:	5ccc      	ldrb	r4, [r1, r3]
   343cc:	54d4      	strb	r4, [r2, r3]
   343ce:	3301      	adds	r3, #1
   343d0:	2c00      	cmp	r4, #0
   343d2:	d1fa      	bne.n	343ca <strcat+0xa>
   343d4:	bd10      	pop	{r4, pc}
   343d6:	3201      	adds	r2, #1
   343d8:	e7f4      	b.n	343c4 <strcat+0x4>

000343da <strcmp>:
   343da:	7802      	ldrb	r2, [r0, #0]
   343dc:	780b      	ldrb	r3, [r1, #0]
   343de:	2a00      	cmp	r2, #0
   343e0:	d003      	beq.n	343ea <strcmp+0x10>
   343e2:	3001      	adds	r0, #1
   343e4:	3101      	adds	r1, #1
   343e6:	429a      	cmp	r2, r3
   343e8:	d0f7      	beq.n	343da <strcmp>
   343ea:	1ad0      	subs	r0, r2, r3
   343ec:	4770      	bx	lr

000343ee <strcpy>:
   343ee:	1c03      	adds	r3, r0, #0
   343f0:	780a      	ldrb	r2, [r1, #0]
   343f2:	3101      	adds	r1, #1
   343f4:	701a      	strb	r2, [r3, #0]
   343f6:	3301      	adds	r3, #1
   343f8:	2a00      	cmp	r2, #0
   343fa:	d1f9      	bne.n	343f0 <strcpy+0x2>
   343fc:	4770      	bx	lr
	...

00034400 <strdup>:
   34400:	b510      	push	{r4, lr}
   34402:	4b03      	ldr	r3, [pc, #12]	; (34410 <strdup+0x10>)
   34404:	0001      	movs	r1, r0
   34406:	6818      	ldr	r0, [r3, #0]
   34408:	f000 f804 	bl	34414 <_strdup_r>
   3440c:	bd10      	pop	{r4, pc}
   3440e:	46c0      	nop			; (mov r8, r8)
   34410:	200000e8 	.word	0x200000e8

00034414 <_strdup_r>:
   34414:	b570      	push	{r4, r5, r6, lr}
   34416:	0005      	movs	r5, r0
   34418:	0008      	movs	r0, r1
   3441a:	000e      	movs	r6, r1
   3441c:	f000 f80d 	bl	3443a <strlen>
   34420:	1c44      	adds	r4, r0, #1
   34422:	0021      	movs	r1, r4
   34424:	0028      	movs	r0, r5
   34426:	f7ff fe7f 	bl	34128 <_malloc_r>
   3442a:	1e05      	subs	r5, r0, #0
   3442c:	d003      	beq.n	34436 <_strdup_r+0x22>
   3442e:	0022      	movs	r2, r4
   34430:	0031      	movs	r1, r6
   34432:	f7ff fe0b 	bl	3404c <memcpy>
   34436:	0028      	movs	r0, r5
   34438:	bd70      	pop	{r4, r5, r6, pc}

0003443a <strlen>:
   3443a:	2300      	movs	r3, #0
   3443c:	5cc2      	ldrb	r2, [r0, r3]
   3443e:	3301      	adds	r3, #1
   34440:	2a00      	cmp	r2, #0
   34442:	d1fb      	bne.n	3443c <strlen+0x2>
   34444:	1e58      	subs	r0, r3, #1
   34446:	4770      	bx	lr

00034448 <strncmp>:
   34448:	2300      	movs	r3, #0
   3444a:	b530      	push	{r4, r5, lr}
   3444c:	429a      	cmp	r2, r3
   3444e:	d00a      	beq.n	34466 <strncmp+0x1e>
   34450:	3a01      	subs	r2, #1
   34452:	5cc4      	ldrb	r4, [r0, r3]
   34454:	5ccd      	ldrb	r5, [r1, r3]
   34456:	42ac      	cmp	r4, r5
   34458:	d104      	bne.n	34464 <strncmp+0x1c>
   3445a:	429a      	cmp	r2, r3
   3445c:	d002      	beq.n	34464 <strncmp+0x1c>
   3445e:	3301      	adds	r3, #1
   34460:	2c00      	cmp	r4, #0
   34462:	d1f6      	bne.n	34452 <strncmp+0xa>
   34464:	1b63      	subs	r3, r4, r5
   34466:	0018      	movs	r0, r3
   34468:	bd30      	pop	{r4, r5, pc}

0003446a <strncpy>:
   3446a:	b570      	push	{r4, r5, r6, lr}
   3446c:	0004      	movs	r4, r0
   3446e:	2a00      	cmp	r2, #0
   34470:	d100      	bne.n	34474 <strncpy+0xa>
   34472:	bd70      	pop	{r4, r5, r6, pc}
   34474:	780d      	ldrb	r5, [r1, #0]
   34476:	1e56      	subs	r6, r2, #1
   34478:	1c63      	adds	r3, r4, #1
   3447a:	7025      	strb	r5, [r4, #0]
   3447c:	3101      	adds	r1, #1
   3447e:	2d00      	cmp	r5, #0
   34480:	d105      	bne.n	3448e <strncpy+0x24>
   34482:	18a4      	adds	r4, r4, r2
   34484:	429c      	cmp	r4, r3
   34486:	d0f4      	beq.n	34472 <strncpy+0x8>
   34488:	701d      	strb	r5, [r3, #0]
   3448a:	3301      	adds	r3, #1
   3448c:	e7fa      	b.n	34484 <strncpy+0x1a>
   3448e:	001c      	movs	r4, r3
   34490:	0032      	movs	r2, r6
   34492:	e7ec      	b.n	3446e <strncpy+0x4>

00034494 <strrchr>:
   34494:	b570      	push	{r4, r5, r6, lr}
   34496:	000d      	movs	r5, r1
   34498:	2400      	movs	r4, #0
   3449a:	2900      	cmp	r1, #0
   3449c:	d105      	bne.n	344aa <strrchr+0x16>
   3449e:	f000 ff19 	bl	352d4 <strchr>
   344a2:	0004      	movs	r4, r0
   344a4:	e006      	b.n	344b4 <strrchr+0x20>
   344a6:	001c      	movs	r4, r3
   344a8:	1c58      	adds	r0, r3, #1
   344aa:	0029      	movs	r1, r5
   344ac:	f000 ff12 	bl	352d4 <strchr>
   344b0:	1e03      	subs	r3, r0, #0
   344b2:	d1f8      	bne.n	344a6 <strrchr+0x12>
   344b4:	0020      	movs	r0, r4
   344b6:	bd70      	pop	{r4, r5, r6, pc}

000344b8 <strstr>:
   344b8:	b510      	push	{r4, lr}
   344ba:	0002      	movs	r2, r0
   344bc:	7800      	ldrb	r0, [r0, #0]
   344be:	2800      	cmp	r0, #0
   344c0:	d104      	bne.n	344cc <strstr+0x14>
   344c2:	7809      	ldrb	r1, [r1, #0]
   344c4:	2900      	cmp	r1, #0
   344c6:	d00d      	beq.n	344e4 <strstr+0x2c>
   344c8:	bd10      	pop	{r4, pc}
   344ca:	3201      	adds	r2, #1
   344cc:	7810      	ldrb	r0, [r2, #0]
   344ce:	2800      	cmp	r0, #0
   344d0:	d0fa      	beq.n	344c8 <strstr+0x10>
   344d2:	2300      	movs	r3, #0
   344d4:	5cc8      	ldrb	r0, [r1, r3]
   344d6:	2800      	cmp	r0, #0
   344d8:	d004      	beq.n	344e4 <strstr+0x2c>
   344da:	5cd4      	ldrb	r4, [r2, r3]
   344dc:	4284      	cmp	r4, r0
   344de:	d1f4      	bne.n	344ca <strstr+0x12>
   344e0:	3301      	adds	r3, #1
   344e2:	e7f7      	b.n	344d4 <strstr+0x1c>
   344e4:	0010      	movs	r0, r2
   344e6:	e7ef      	b.n	344c8 <strstr+0x10>

000344e8 <_strtol_l.isra.0>:
   344e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   344ea:	001f      	movs	r7, r3
   344ec:	000e      	movs	r6, r1
   344ee:	b087      	sub	sp, #28
   344f0:	9005      	str	r0, [sp, #20]
   344f2:	9103      	str	r1, [sp, #12]
   344f4:	9202      	str	r2, [sp, #8]
   344f6:	980c      	ldr	r0, [sp, #48]	; 0x30
   344f8:	7834      	ldrb	r4, [r6, #0]
   344fa:	f000 fb20 	bl	34b3e <__locale_ctype_ptr_l>
   344fe:	2208      	movs	r2, #8
   34500:	1900      	adds	r0, r0, r4
   34502:	7843      	ldrb	r3, [r0, #1]
   34504:	1c75      	adds	r5, r6, #1
   34506:	4013      	ands	r3, r2
   34508:	d10c      	bne.n	34524 <_strtol_l.isra.0+0x3c>
   3450a:	2c2d      	cmp	r4, #45	; 0x2d
   3450c:	d10c      	bne.n	34528 <_strtol_l.isra.0+0x40>
   3450e:	3301      	adds	r3, #1
   34510:	782c      	ldrb	r4, [r5, #0]
   34512:	9301      	str	r3, [sp, #4]
   34514:	1cb5      	adds	r5, r6, #2
   34516:	2f00      	cmp	r7, #0
   34518:	d00c      	beq.n	34534 <_strtol_l.isra.0+0x4c>
   3451a:	2f10      	cmp	r7, #16
   3451c:	d114      	bne.n	34548 <_strtol_l.isra.0+0x60>
   3451e:	2c30      	cmp	r4, #48	; 0x30
   34520:	d00a      	beq.n	34538 <_strtol_l.isra.0+0x50>
   34522:	e011      	b.n	34548 <_strtol_l.isra.0+0x60>
   34524:	002e      	movs	r6, r5
   34526:	e7e6      	b.n	344f6 <_strtol_l.isra.0+0xe>
   34528:	9301      	str	r3, [sp, #4]
   3452a:	2c2b      	cmp	r4, #43	; 0x2b
   3452c:	d1f3      	bne.n	34516 <_strtol_l.isra.0+0x2e>
   3452e:	782c      	ldrb	r4, [r5, #0]
   34530:	1cb5      	adds	r5, r6, #2
   34532:	e7f0      	b.n	34516 <_strtol_l.isra.0+0x2e>
   34534:	2c30      	cmp	r4, #48	; 0x30
   34536:	d12f      	bne.n	34598 <_strtol_l.isra.0+0xb0>
   34538:	2220      	movs	r2, #32
   3453a:	782b      	ldrb	r3, [r5, #0]
   3453c:	4393      	bics	r3, r2
   3453e:	2b58      	cmp	r3, #88	; 0x58
   34540:	d151      	bne.n	345e6 <_strtol_l.isra.0+0xfe>
   34542:	2710      	movs	r7, #16
   34544:	786c      	ldrb	r4, [r5, #1]
   34546:	3502      	adds	r5, #2
   34548:	9b01      	ldr	r3, [sp, #4]
   3454a:	4a29      	ldr	r2, [pc, #164]	; (345f0 <_strtol_l.isra.0+0x108>)
   3454c:	0039      	movs	r1, r7
   3454e:	189e      	adds	r6, r3, r2
   34550:	0030      	movs	r0, r6
   34552:	f7fd ffbf 	bl	324d4 <__aeabi_uidivmod>
   34556:	0030      	movs	r0, r6
   34558:	9104      	str	r1, [sp, #16]
   3455a:	0039      	movs	r1, r7
   3455c:	f7fd ff34 	bl	323c8 <__udivsi3>
   34560:	2101      	movs	r1, #1
   34562:	2300      	movs	r3, #0
   34564:	4249      	negs	r1, r1
   34566:	0002      	movs	r2, r0
   34568:	468c      	mov	ip, r1
   3456a:	0018      	movs	r0, r3
   3456c:	0021      	movs	r1, r4
   3456e:	3930      	subs	r1, #48	; 0x30
   34570:	2909      	cmp	r1, #9
   34572:	d813      	bhi.n	3459c <_strtol_l.isra.0+0xb4>
   34574:	000c      	movs	r4, r1
   34576:	42a7      	cmp	r7, r4
   34578:	dd1c      	ble.n	345b4 <_strtol_l.isra.0+0xcc>
   3457a:	1c59      	adds	r1, r3, #1
   3457c:	d009      	beq.n	34592 <_strtol_l.isra.0+0xaa>
   3457e:	4663      	mov	r3, ip
   34580:	4282      	cmp	r2, r0
   34582:	d306      	bcc.n	34592 <_strtol_l.isra.0+0xaa>
   34584:	d102      	bne.n	3458c <_strtol_l.isra.0+0xa4>
   34586:	9904      	ldr	r1, [sp, #16]
   34588:	42a1      	cmp	r1, r4
   3458a:	db02      	blt.n	34592 <_strtol_l.isra.0+0xaa>
   3458c:	2301      	movs	r3, #1
   3458e:	4378      	muls	r0, r7
   34590:	1820      	adds	r0, r4, r0
   34592:	782c      	ldrb	r4, [r5, #0]
   34594:	3501      	adds	r5, #1
   34596:	e7e9      	b.n	3456c <_strtol_l.isra.0+0x84>
   34598:	270a      	movs	r7, #10
   3459a:	e7d5      	b.n	34548 <_strtol_l.isra.0+0x60>
   3459c:	0021      	movs	r1, r4
   3459e:	3941      	subs	r1, #65	; 0x41
   345a0:	2919      	cmp	r1, #25
   345a2:	d801      	bhi.n	345a8 <_strtol_l.isra.0+0xc0>
   345a4:	3c37      	subs	r4, #55	; 0x37
   345a6:	e7e6      	b.n	34576 <_strtol_l.isra.0+0x8e>
   345a8:	0021      	movs	r1, r4
   345aa:	3961      	subs	r1, #97	; 0x61
   345ac:	2919      	cmp	r1, #25
   345ae:	d801      	bhi.n	345b4 <_strtol_l.isra.0+0xcc>
   345b0:	3c57      	subs	r4, #87	; 0x57
   345b2:	e7e0      	b.n	34576 <_strtol_l.isra.0+0x8e>
   345b4:	1c5a      	adds	r2, r3, #1
   345b6:	d108      	bne.n	345ca <_strtol_l.isra.0+0xe2>
   345b8:	9a05      	ldr	r2, [sp, #20]
   345ba:	3323      	adds	r3, #35	; 0x23
   345bc:	6013      	str	r3, [r2, #0]
   345be:	9b02      	ldr	r3, [sp, #8]
   345c0:	0030      	movs	r0, r6
   345c2:	2b00      	cmp	r3, #0
   345c4:	d10b      	bne.n	345de <_strtol_l.isra.0+0xf6>
   345c6:	b007      	add	sp, #28
   345c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   345ca:	9a01      	ldr	r2, [sp, #4]
   345cc:	2a00      	cmp	r2, #0
   345ce:	d000      	beq.n	345d2 <_strtol_l.isra.0+0xea>
   345d0:	4240      	negs	r0, r0
   345d2:	9a02      	ldr	r2, [sp, #8]
   345d4:	2a00      	cmp	r2, #0
   345d6:	d0f6      	beq.n	345c6 <_strtol_l.isra.0+0xde>
   345d8:	9a03      	ldr	r2, [sp, #12]
   345da:	2b00      	cmp	r3, #0
   345dc:	d000      	beq.n	345e0 <_strtol_l.isra.0+0xf8>
   345de:	1e6a      	subs	r2, r5, #1
   345e0:	9b02      	ldr	r3, [sp, #8]
   345e2:	601a      	str	r2, [r3, #0]
   345e4:	e7ef      	b.n	345c6 <_strtol_l.isra.0+0xde>
   345e6:	2430      	movs	r4, #48	; 0x30
   345e8:	2f00      	cmp	r7, #0
   345ea:	d1ad      	bne.n	34548 <_strtol_l.isra.0+0x60>
   345ec:	3708      	adds	r7, #8
   345ee:	e7ab      	b.n	34548 <_strtol_l.isra.0+0x60>
   345f0:	7fffffff 	.word	0x7fffffff

000345f4 <strtol>:
   345f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   345f6:	0013      	movs	r3, r2
   345f8:	4a06      	ldr	r2, [pc, #24]	; (34614 <strtol+0x20>)
   345fa:	0005      	movs	r5, r0
   345fc:	6810      	ldr	r0, [r2, #0]
   345fe:	6a04      	ldr	r4, [r0, #32]
   34600:	2c00      	cmp	r4, #0
   34602:	d100      	bne.n	34606 <strtol+0x12>
   34604:	4c04      	ldr	r4, [pc, #16]	; (34618 <strtol+0x24>)
   34606:	000a      	movs	r2, r1
   34608:	9400      	str	r4, [sp, #0]
   3460a:	0029      	movs	r1, r5
   3460c:	f7ff ff6c 	bl	344e8 <_strtol_l.isra.0>
   34610:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   34612:	46c0      	nop			; (mov r8, r8)
   34614:	200000e8 	.word	0x200000e8
   34618:	2000014c 	.word	0x2000014c

0003461c <_vsniprintf_r>:
   3461c:	b530      	push	{r4, r5, lr}
   3461e:	0014      	movs	r4, r2
   34620:	b09b      	sub	sp, #108	; 0x6c
   34622:	0005      	movs	r5, r0
   34624:	001a      	movs	r2, r3
   34626:	2c00      	cmp	r4, #0
   34628:	da05      	bge.n	34636 <_vsniprintf_r+0x1a>
   3462a:	238b      	movs	r3, #139	; 0x8b
   3462c:	6003      	str	r3, [r0, #0]
   3462e:	2001      	movs	r0, #1
   34630:	4240      	negs	r0, r0
   34632:	b01b      	add	sp, #108	; 0x6c
   34634:	bd30      	pop	{r4, r5, pc}
   34636:	2382      	movs	r3, #130	; 0x82
   34638:	4668      	mov	r0, sp
   3463a:	009b      	lsls	r3, r3, #2
   3463c:	8183      	strh	r3, [r0, #12]
   3463e:	2300      	movs	r3, #0
   34640:	9100      	str	r1, [sp, #0]
   34642:	9104      	str	r1, [sp, #16]
   34644:	429c      	cmp	r4, r3
   34646:	d000      	beq.n	3464a <_vsniprintf_r+0x2e>
   34648:	1e63      	subs	r3, r4, #1
   3464a:	9302      	str	r3, [sp, #8]
   3464c:	9305      	str	r3, [sp, #20]
   3464e:	2301      	movs	r3, #1
   34650:	4669      	mov	r1, sp
   34652:	425b      	negs	r3, r3
   34654:	81cb      	strh	r3, [r1, #14]
   34656:	0028      	movs	r0, r5
   34658:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   3465a:	f000 fb63 	bl	34d24 <_svfiprintf_r>
   3465e:	1c43      	adds	r3, r0, #1
   34660:	da01      	bge.n	34666 <_vsniprintf_r+0x4a>
   34662:	238b      	movs	r3, #139	; 0x8b
   34664:	602b      	str	r3, [r5, #0]
   34666:	2c00      	cmp	r4, #0
   34668:	d0e3      	beq.n	34632 <_vsniprintf_r+0x16>
   3466a:	2300      	movs	r3, #0
   3466c:	9a00      	ldr	r2, [sp, #0]
   3466e:	7013      	strb	r3, [r2, #0]
   34670:	e7df      	b.n	34632 <_vsniprintf_r+0x16>
	...

00034674 <vsniprintf>:
   34674:	b507      	push	{r0, r1, r2, lr}
   34676:	9300      	str	r3, [sp, #0]
   34678:	0013      	movs	r3, r2
   3467a:	000a      	movs	r2, r1
   3467c:	0001      	movs	r1, r0
   3467e:	4802      	ldr	r0, [pc, #8]	; (34688 <vsniprintf+0x14>)
   34680:	6800      	ldr	r0, [r0, #0]
   34682:	f7ff ffcb 	bl	3461c <_vsniprintf_r>
   34686:	bd0e      	pop	{r1, r2, r3, pc}
   34688:	200000e8 	.word	0x200000e8

0003468c <__swbuf_r>:
   3468c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3468e:	0005      	movs	r5, r0
   34690:	000e      	movs	r6, r1
   34692:	0014      	movs	r4, r2
   34694:	2800      	cmp	r0, #0
   34696:	d004      	beq.n	346a2 <__swbuf_r+0x16>
   34698:	6983      	ldr	r3, [r0, #24]
   3469a:	2b00      	cmp	r3, #0
   3469c:	d101      	bne.n	346a2 <__swbuf_r+0x16>
   3469e:	f000 f9b9 	bl	34a14 <__sinit>
   346a2:	4b22      	ldr	r3, [pc, #136]	; (3472c <__swbuf_r+0xa0>)
   346a4:	429c      	cmp	r4, r3
   346a6:	d12d      	bne.n	34704 <__swbuf_r+0x78>
   346a8:	686c      	ldr	r4, [r5, #4]
   346aa:	69a3      	ldr	r3, [r4, #24]
   346ac:	60a3      	str	r3, [r4, #8]
   346ae:	89a3      	ldrh	r3, [r4, #12]
   346b0:	071b      	lsls	r3, r3, #28
   346b2:	d531      	bpl.n	34718 <__swbuf_r+0x8c>
   346b4:	6923      	ldr	r3, [r4, #16]
   346b6:	2b00      	cmp	r3, #0
   346b8:	d02e      	beq.n	34718 <__swbuf_r+0x8c>
   346ba:	6823      	ldr	r3, [r4, #0]
   346bc:	6922      	ldr	r2, [r4, #16]
   346be:	b2f7      	uxtb	r7, r6
   346c0:	1a98      	subs	r0, r3, r2
   346c2:	6963      	ldr	r3, [r4, #20]
   346c4:	b2f6      	uxtb	r6, r6
   346c6:	4298      	cmp	r0, r3
   346c8:	db05      	blt.n	346d6 <__swbuf_r+0x4a>
   346ca:	0021      	movs	r1, r4
   346cc:	0028      	movs	r0, r5
   346ce:	f000 f933 	bl	34938 <_fflush_r>
   346d2:	2800      	cmp	r0, #0
   346d4:	d126      	bne.n	34724 <__swbuf_r+0x98>
   346d6:	68a3      	ldr	r3, [r4, #8]
   346d8:	3001      	adds	r0, #1
   346da:	3b01      	subs	r3, #1
   346dc:	60a3      	str	r3, [r4, #8]
   346de:	6823      	ldr	r3, [r4, #0]
   346e0:	1c5a      	adds	r2, r3, #1
   346e2:	6022      	str	r2, [r4, #0]
   346e4:	701f      	strb	r7, [r3, #0]
   346e6:	6963      	ldr	r3, [r4, #20]
   346e8:	4298      	cmp	r0, r3
   346ea:	d004      	beq.n	346f6 <__swbuf_r+0x6a>
   346ec:	89a3      	ldrh	r3, [r4, #12]
   346ee:	07db      	lsls	r3, r3, #31
   346f0:	d51a      	bpl.n	34728 <__swbuf_r+0x9c>
   346f2:	2e0a      	cmp	r6, #10
   346f4:	d118      	bne.n	34728 <__swbuf_r+0x9c>
   346f6:	0021      	movs	r1, r4
   346f8:	0028      	movs	r0, r5
   346fa:	f000 f91d 	bl	34938 <_fflush_r>
   346fe:	2800      	cmp	r0, #0
   34700:	d012      	beq.n	34728 <__swbuf_r+0x9c>
   34702:	e00f      	b.n	34724 <__swbuf_r+0x98>
   34704:	4b0a      	ldr	r3, [pc, #40]	; (34730 <__swbuf_r+0xa4>)
   34706:	429c      	cmp	r4, r3
   34708:	d101      	bne.n	3470e <__swbuf_r+0x82>
   3470a:	68ac      	ldr	r4, [r5, #8]
   3470c:	e7cd      	b.n	346aa <__swbuf_r+0x1e>
   3470e:	4b09      	ldr	r3, [pc, #36]	; (34734 <__swbuf_r+0xa8>)
   34710:	429c      	cmp	r4, r3
   34712:	d1ca      	bne.n	346aa <__swbuf_r+0x1e>
   34714:	68ec      	ldr	r4, [r5, #12]
   34716:	e7c8      	b.n	346aa <__swbuf_r+0x1e>
   34718:	0021      	movs	r1, r4
   3471a:	0028      	movs	r0, r5
   3471c:	f000 f80c 	bl	34738 <__swsetup_r>
   34720:	2800      	cmp	r0, #0
   34722:	d0ca      	beq.n	346ba <__swbuf_r+0x2e>
   34724:	2601      	movs	r6, #1
   34726:	4276      	negs	r6, r6
   34728:	0030      	movs	r0, r6
   3472a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3472c:	0003abac 	.word	0x0003abac
   34730:	0003abcc 	.word	0x0003abcc
   34734:	0003ab8c 	.word	0x0003ab8c

00034738 <__swsetup_r>:
   34738:	4b36      	ldr	r3, [pc, #216]	; (34814 <__swsetup_r+0xdc>)
   3473a:	b570      	push	{r4, r5, r6, lr}
   3473c:	681d      	ldr	r5, [r3, #0]
   3473e:	0006      	movs	r6, r0
   34740:	000c      	movs	r4, r1
   34742:	2d00      	cmp	r5, #0
   34744:	d005      	beq.n	34752 <__swsetup_r+0x1a>
   34746:	69ab      	ldr	r3, [r5, #24]
   34748:	2b00      	cmp	r3, #0
   3474a:	d102      	bne.n	34752 <__swsetup_r+0x1a>
   3474c:	0028      	movs	r0, r5
   3474e:	f000 f961 	bl	34a14 <__sinit>
   34752:	4b31      	ldr	r3, [pc, #196]	; (34818 <__swsetup_r+0xe0>)
   34754:	429c      	cmp	r4, r3
   34756:	d10f      	bne.n	34778 <__swsetup_r+0x40>
   34758:	686c      	ldr	r4, [r5, #4]
   3475a:	230c      	movs	r3, #12
   3475c:	5ee2      	ldrsh	r2, [r4, r3]
   3475e:	b293      	uxth	r3, r2
   34760:	0719      	lsls	r1, r3, #28
   34762:	d42d      	bmi.n	347c0 <__swsetup_r+0x88>
   34764:	06d9      	lsls	r1, r3, #27
   34766:	d411      	bmi.n	3478c <__swsetup_r+0x54>
   34768:	2309      	movs	r3, #9
   3476a:	2001      	movs	r0, #1
   3476c:	6033      	str	r3, [r6, #0]
   3476e:	3337      	adds	r3, #55	; 0x37
   34770:	4313      	orrs	r3, r2
   34772:	81a3      	strh	r3, [r4, #12]
   34774:	4240      	negs	r0, r0
   34776:	bd70      	pop	{r4, r5, r6, pc}
   34778:	4b28      	ldr	r3, [pc, #160]	; (3481c <__swsetup_r+0xe4>)
   3477a:	429c      	cmp	r4, r3
   3477c:	d101      	bne.n	34782 <__swsetup_r+0x4a>
   3477e:	68ac      	ldr	r4, [r5, #8]
   34780:	e7eb      	b.n	3475a <__swsetup_r+0x22>
   34782:	4b27      	ldr	r3, [pc, #156]	; (34820 <__swsetup_r+0xe8>)
   34784:	429c      	cmp	r4, r3
   34786:	d1e8      	bne.n	3475a <__swsetup_r+0x22>
   34788:	68ec      	ldr	r4, [r5, #12]
   3478a:	e7e6      	b.n	3475a <__swsetup_r+0x22>
   3478c:	075b      	lsls	r3, r3, #29
   3478e:	d513      	bpl.n	347b8 <__swsetup_r+0x80>
   34790:	6b61      	ldr	r1, [r4, #52]	; 0x34
   34792:	2900      	cmp	r1, #0
   34794:	d008      	beq.n	347a8 <__swsetup_r+0x70>
   34796:	0023      	movs	r3, r4
   34798:	3344      	adds	r3, #68	; 0x44
   3479a:	4299      	cmp	r1, r3
   3479c:	d002      	beq.n	347a4 <__swsetup_r+0x6c>
   3479e:	0030      	movs	r0, r6
   347a0:	f7ff fc78 	bl	34094 <_free_r>
   347a4:	2300      	movs	r3, #0
   347a6:	6363      	str	r3, [r4, #52]	; 0x34
   347a8:	2224      	movs	r2, #36	; 0x24
   347aa:	89a3      	ldrh	r3, [r4, #12]
   347ac:	4393      	bics	r3, r2
   347ae:	81a3      	strh	r3, [r4, #12]
   347b0:	2300      	movs	r3, #0
   347b2:	6063      	str	r3, [r4, #4]
   347b4:	6923      	ldr	r3, [r4, #16]
   347b6:	6023      	str	r3, [r4, #0]
   347b8:	2308      	movs	r3, #8
   347ba:	89a2      	ldrh	r2, [r4, #12]
   347bc:	4313      	orrs	r3, r2
   347be:	81a3      	strh	r3, [r4, #12]
   347c0:	6923      	ldr	r3, [r4, #16]
   347c2:	2b00      	cmp	r3, #0
   347c4:	d10b      	bne.n	347de <__swsetup_r+0xa6>
   347c6:	21a0      	movs	r1, #160	; 0xa0
   347c8:	2280      	movs	r2, #128	; 0x80
   347ca:	89a3      	ldrh	r3, [r4, #12]
   347cc:	0089      	lsls	r1, r1, #2
   347ce:	0092      	lsls	r2, r2, #2
   347d0:	400b      	ands	r3, r1
   347d2:	4293      	cmp	r3, r2
   347d4:	d003      	beq.n	347de <__swsetup_r+0xa6>
   347d6:	0021      	movs	r1, r4
   347d8:	0030      	movs	r0, r6
   347da:	f000 f9e9 	bl	34bb0 <__smakebuf_r>
   347de:	2301      	movs	r3, #1
   347e0:	89a2      	ldrh	r2, [r4, #12]
   347e2:	4013      	ands	r3, r2
   347e4:	d011      	beq.n	3480a <__swsetup_r+0xd2>
   347e6:	2300      	movs	r3, #0
   347e8:	60a3      	str	r3, [r4, #8]
   347ea:	6963      	ldr	r3, [r4, #20]
   347ec:	425b      	negs	r3, r3
   347ee:	61a3      	str	r3, [r4, #24]
   347f0:	2000      	movs	r0, #0
   347f2:	6923      	ldr	r3, [r4, #16]
   347f4:	4283      	cmp	r3, r0
   347f6:	d1be      	bne.n	34776 <__swsetup_r+0x3e>
   347f8:	230c      	movs	r3, #12
   347fa:	5ee2      	ldrsh	r2, [r4, r3]
   347fc:	0613      	lsls	r3, r2, #24
   347fe:	d5ba      	bpl.n	34776 <__swsetup_r+0x3e>
   34800:	2340      	movs	r3, #64	; 0x40
   34802:	4313      	orrs	r3, r2
   34804:	81a3      	strh	r3, [r4, #12]
   34806:	3801      	subs	r0, #1
   34808:	e7b5      	b.n	34776 <__swsetup_r+0x3e>
   3480a:	0792      	lsls	r2, r2, #30
   3480c:	d400      	bmi.n	34810 <__swsetup_r+0xd8>
   3480e:	6963      	ldr	r3, [r4, #20]
   34810:	60a3      	str	r3, [r4, #8]
   34812:	e7ed      	b.n	347f0 <__swsetup_r+0xb8>
   34814:	200000e8 	.word	0x200000e8
   34818:	0003abac 	.word	0x0003abac
   3481c:	0003abcc 	.word	0x0003abcc
   34820:	0003ab8c 	.word	0x0003ab8c

00034824 <__sflush_r>:
   34824:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   34826:	898a      	ldrh	r2, [r1, #12]
   34828:	0005      	movs	r5, r0
   3482a:	000c      	movs	r4, r1
   3482c:	0713      	lsls	r3, r2, #28
   3482e:	d460      	bmi.n	348f2 <__sflush_r+0xce>
   34830:	684b      	ldr	r3, [r1, #4]
   34832:	2b00      	cmp	r3, #0
   34834:	dc04      	bgt.n	34840 <__sflush_r+0x1c>
   34836:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   34838:	2b00      	cmp	r3, #0
   3483a:	dc01      	bgt.n	34840 <__sflush_r+0x1c>
   3483c:	2000      	movs	r0, #0
   3483e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   34840:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   34842:	2f00      	cmp	r7, #0
   34844:	d0fa      	beq.n	3483c <__sflush_r+0x18>
   34846:	2300      	movs	r3, #0
   34848:	682e      	ldr	r6, [r5, #0]
   3484a:	602b      	str	r3, [r5, #0]
   3484c:	2380      	movs	r3, #128	; 0x80
   3484e:	015b      	lsls	r3, r3, #5
   34850:	401a      	ands	r2, r3
   34852:	d034      	beq.n	348be <__sflush_r+0x9a>
   34854:	6d60      	ldr	r0, [r4, #84]	; 0x54
   34856:	89a3      	ldrh	r3, [r4, #12]
   34858:	075b      	lsls	r3, r3, #29
   3485a:	d506      	bpl.n	3486a <__sflush_r+0x46>
   3485c:	6863      	ldr	r3, [r4, #4]
   3485e:	1ac0      	subs	r0, r0, r3
   34860:	6b63      	ldr	r3, [r4, #52]	; 0x34
   34862:	2b00      	cmp	r3, #0
   34864:	d001      	beq.n	3486a <__sflush_r+0x46>
   34866:	6c23      	ldr	r3, [r4, #64]	; 0x40
   34868:	1ac0      	subs	r0, r0, r3
   3486a:	0002      	movs	r2, r0
   3486c:	6a21      	ldr	r1, [r4, #32]
   3486e:	2300      	movs	r3, #0
   34870:	0028      	movs	r0, r5
   34872:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   34874:	47b8      	blx	r7
   34876:	89a1      	ldrh	r1, [r4, #12]
   34878:	1c43      	adds	r3, r0, #1
   3487a:	d106      	bne.n	3488a <__sflush_r+0x66>
   3487c:	682b      	ldr	r3, [r5, #0]
   3487e:	2b1d      	cmp	r3, #29
   34880:	d831      	bhi.n	348e6 <__sflush_r+0xc2>
   34882:	4a2c      	ldr	r2, [pc, #176]	; (34934 <__sflush_r+0x110>)
   34884:	40da      	lsrs	r2, r3
   34886:	07d3      	lsls	r3, r2, #31
   34888:	d52d      	bpl.n	348e6 <__sflush_r+0xc2>
   3488a:	2300      	movs	r3, #0
   3488c:	6063      	str	r3, [r4, #4]
   3488e:	6923      	ldr	r3, [r4, #16]
   34890:	6023      	str	r3, [r4, #0]
   34892:	04cb      	lsls	r3, r1, #19
   34894:	d505      	bpl.n	348a2 <__sflush_r+0x7e>
   34896:	1c43      	adds	r3, r0, #1
   34898:	d102      	bne.n	348a0 <__sflush_r+0x7c>
   3489a:	682b      	ldr	r3, [r5, #0]
   3489c:	2b00      	cmp	r3, #0
   3489e:	d100      	bne.n	348a2 <__sflush_r+0x7e>
   348a0:	6560      	str	r0, [r4, #84]	; 0x54
   348a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
   348a4:	602e      	str	r6, [r5, #0]
   348a6:	2900      	cmp	r1, #0
   348a8:	d0c8      	beq.n	3483c <__sflush_r+0x18>
   348aa:	0023      	movs	r3, r4
   348ac:	3344      	adds	r3, #68	; 0x44
   348ae:	4299      	cmp	r1, r3
   348b0:	d002      	beq.n	348b8 <__sflush_r+0x94>
   348b2:	0028      	movs	r0, r5
   348b4:	f7ff fbee 	bl	34094 <_free_r>
   348b8:	2000      	movs	r0, #0
   348ba:	6360      	str	r0, [r4, #52]	; 0x34
   348bc:	e7bf      	b.n	3483e <__sflush_r+0x1a>
   348be:	2301      	movs	r3, #1
   348c0:	6a21      	ldr	r1, [r4, #32]
   348c2:	0028      	movs	r0, r5
   348c4:	47b8      	blx	r7
   348c6:	1c43      	adds	r3, r0, #1
   348c8:	d1c5      	bne.n	34856 <__sflush_r+0x32>
   348ca:	682b      	ldr	r3, [r5, #0]
   348cc:	2b00      	cmp	r3, #0
   348ce:	d0c2      	beq.n	34856 <__sflush_r+0x32>
   348d0:	2b1d      	cmp	r3, #29
   348d2:	d001      	beq.n	348d8 <__sflush_r+0xb4>
   348d4:	2b16      	cmp	r3, #22
   348d6:	d101      	bne.n	348dc <__sflush_r+0xb8>
   348d8:	602e      	str	r6, [r5, #0]
   348da:	e7af      	b.n	3483c <__sflush_r+0x18>
   348dc:	2340      	movs	r3, #64	; 0x40
   348de:	89a2      	ldrh	r2, [r4, #12]
   348e0:	4313      	orrs	r3, r2
   348e2:	81a3      	strh	r3, [r4, #12]
   348e4:	e7ab      	b.n	3483e <__sflush_r+0x1a>
   348e6:	2340      	movs	r3, #64	; 0x40
   348e8:	430b      	orrs	r3, r1
   348ea:	2001      	movs	r0, #1
   348ec:	81a3      	strh	r3, [r4, #12]
   348ee:	4240      	negs	r0, r0
   348f0:	e7a5      	b.n	3483e <__sflush_r+0x1a>
   348f2:	690f      	ldr	r7, [r1, #16]
   348f4:	2f00      	cmp	r7, #0
   348f6:	d0a1      	beq.n	3483c <__sflush_r+0x18>
   348f8:	680b      	ldr	r3, [r1, #0]
   348fa:	600f      	str	r7, [r1, #0]
   348fc:	1bdb      	subs	r3, r3, r7
   348fe:	9301      	str	r3, [sp, #4]
   34900:	2300      	movs	r3, #0
   34902:	0792      	lsls	r2, r2, #30
   34904:	d100      	bne.n	34908 <__sflush_r+0xe4>
   34906:	694b      	ldr	r3, [r1, #20]
   34908:	60a3      	str	r3, [r4, #8]
   3490a:	9b01      	ldr	r3, [sp, #4]
   3490c:	2b00      	cmp	r3, #0
   3490e:	dc00      	bgt.n	34912 <__sflush_r+0xee>
   34910:	e794      	b.n	3483c <__sflush_r+0x18>
   34912:	9b01      	ldr	r3, [sp, #4]
   34914:	003a      	movs	r2, r7
   34916:	6a21      	ldr	r1, [r4, #32]
   34918:	0028      	movs	r0, r5
   3491a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   3491c:	47b0      	blx	r6
   3491e:	2800      	cmp	r0, #0
   34920:	dc03      	bgt.n	3492a <__sflush_r+0x106>
   34922:	2340      	movs	r3, #64	; 0x40
   34924:	89a2      	ldrh	r2, [r4, #12]
   34926:	4313      	orrs	r3, r2
   34928:	e7df      	b.n	348ea <__sflush_r+0xc6>
   3492a:	9b01      	ldr	r3, [sp, #4]
   3492c:	183f      	adds	r7, r7, r0
   3492e:	1a1b      	subs	r3, r3, r0
   34930:	9301      	str	r3, [sp, #4]
   34932:	e7ea      	b.n	3490a <__sflush_r+0xe6>
   34934:	20400001 	.word	0x20400001

00034938 <_fflush_r>:
   34938:	690b      	ldr	r3, [r1, #16]
   3493a:	b570      	push	{r4, r5, r6, lr}
   3493c:	0005      	movs	r5, r0
   3493e:	000c      	movs	r4, r1
   34940:	2b00      	cmp	r3, #0
   34942:	d101      	bne.n	34948 <_fflush_r+0x10>
   34944:	2000      	movs	r0, #0
   34946:	bd70      	pop	{r4, r5, r6, pc}
   34948:	2800      	cmp	r0, #0
   3494a:	d004      	beq.n	34956 <_fflush_r+0x1e>
   3494c:	6983      	ldr	r3, [r0, #24]
   3494e:	2b00      	cmp	r3, #0
   34950:	d101      	bne.n	34956 <_fflush_r+0x1e>
   34952:	f000 f85f 	bl	34a14 <__sinit>
   34956:	4b0b      	ldr	r3, [pc, #44]	; (34984 <_fflush_r+0x4c>)
   34958:	429c      	cmp	r4, r3
   3495a:	d109      	bne.n	34970 <_fflush_r+0x38>
   3495c:	686c      	ldr	r4, [r5, #4]
   3495e:	220c      	movs	r2, #12
   34960:	5ea3      	ldrsh	r3, [r4, r2]
   34962:	2b00      	cmp	r3, #0
   34964:	d0ee      	beq.n	34944 <_fflush_r+0xc>
   34966:	0021      	movs	r1, r4
   34968:	0028      	movs	r0, r5
   3496a:	f7ff ff5b 	bl	34824 <__sflush_r>
   3496e:	e7ea      	b.n	34946 <_fflush_r+0xe>
   34970:	4b05      	ldr	r3, [pc, #20]	; (34988 <_fflush_r+0x50>)
   34972:	429c      	cmp	r4, r3
   34974:	d101      	bne.n	3497a <_fflush_r+0x42>
   34976:	68ac      	ldr	r4, [r5, #8]
   34978:	e7f1      	b.n	3495e <_fflush_r+0x26>
   3497a:	4b04      	ldr	r3, [pc, #16]	; (3498c <_fflush_r+0x54>)
   3497c:	429c      	cmp	r4, r3
   3497e:	d1ee      	bne.n	3495e <_fflush_r+0x26>
   34980:	68ec      	ldr	r4, [r5, #12]
   34982:	e7ec      	b.n	3495e <_fflush_r+0x26>
   34984:	0003abac 	.word	0x0003abac
   34988:	0003abcc 	.word	0x0003abcc
   3498c:	0003ab8c 	.word	0x0003ab8c

00034990 <_cleanup_r>:
   34990:	b510      	push	{r4, lr}
   34992:	4902      	ldr	r1, [pc, #8]	; (3499c <_cleanup_r+0xc>)
   34994:	f000 f8b2 	bl	34afc <_fwalk_reent>
   34998:	bd10      	pop	{r4, pc}
   3499a:	46c0      	nop			; (mov r8, r8)
   3499c:	00034939 	.word	0x00034939

000349a0 <std.isra.0>:
   349a0:	2300      	movs	r3, #0
   349a2:	b510      	push	{r4, lr}
   349a4:	0004      	movs	r4, r0
   349a6:	6003      	str	r3, [r0, #0]
   349a8:	6043      	str	r3, [r0, #4]
   349aa:	6083      	str	r3, [r0, #8]
   349ac:	8181      	strh	r1, [r0, #12]
   349ae:	6643      	str	r3, [r0, #100]	; 0x64
   349b0:	81c2      	strh	r2, [r0, #14]
   349b2:	6103      	str	r3, [r0, #16]
   349b4:	6143      	str	r3, [r0, #20]
   349b6:	6183      	str	r3, [r0, #24]
   349b8:	0019      	movs	r1, r3
   349ba:	2208      	movs	r2, #8
   349bc:	305c      	adds	r0, #92	; 0x5c
   349be:	f7ff fb60 	bl	34082 <memset>
   349c2:	4b05      	ldr	r3, [pc, #20]	; (349d8 <std.isra.0+0x38>)
   349c4:	6224      	str	r4, [r4, #32]
   349c6:	6263      	str	r3, [r4, #36]	; 0x24
   349c8:	4b04      	ldr	r3, [pc, #16]	; (349dc <std.isra.0+0x3c>)
   349ca:	62a3      	str	r3, [r4, #40]	; 0x28
   349cc:	4b04      	ldr	r3, [pc, #16]	; (349e0 <std.isra.0+0x40>)
   349ce:	62e3      	str	r3, [r4, #44]	; 0x2c
   349d0:	4b04      	ldr	r3, [pc, #16]	; (349e4 <std.isra.0+0x44>)
   349d2:	6323      	str	r3, [r4, #48]	; 0x30
   349d4:	bd10      	pop	{r4, pc}
   349d6:	46c0      	nop			; (mov r8, r8)
   349d8:	0003523d 	.word	0x0003523d
   349dc:	00035265 	.word	0x00035265
   349e0:	0003529d 	.word	0x0003529d
   349e4:	000352c9 	.word	0x000352c9

000349e8 <__sfmoreglue>:
   349e8:	b570      	push	{r4, r5, r6, lr}
   349ea:	2568      	movs	r5, #104	; 0x68
   349ec:	1e4a      	subs	r2, r1, #1
   349ee:	4355      	muls	r5, r2
   349f0:	000e      	movs	r6, r1
   349f2:	0029      	movs	r1, r5
   349f4:	3174      	adds	r1, #116	; 0x74
   349f6:	f7ff fb97 	bl	34128 <_malloc_r>
   349fa:	1e04      	subs	r4, r0, #0
   349fc:	d008      	beq.n	34a10 <__sfmoreglue+0x28>
   349fe:	2100      	movs	r1, #0
   34a00:	002a      	movs	r2, r5
   34a02:	6001      	str	r1, [r0, #0]
   34a04:	6046      	str	r6, [r0, #4]
   34a06:	300c      	adds	r0, #12
   34a08:	60a0      	str	r0, [r4, #8]
   34a0a:	3268      	adds	r2, #104	; 0x68
   34a0c:	f7ff fb39 	bl	34082 <memset>
   34a10:	0020      	movs	r0, r4
   34a12:	bd70      	pop	{r4, r5, r6, pc}

00034a14 <__sinit>:
   34a14:	6983      	ldr	r3, [r0, #24]
   34a16:	b513      	push	{r0, r1, r4, lr}
   34a18:	0004      	movs	r4, r0
   34a1a:	2b00      	cmp	r3, #0
   34a1c:	d128      	bne.n	34a70 <__sinit+0x5c>
   34a1e:	6483      	str	r3, [r0, #72]	; 0x48
   34a20:	64c3      	str	r3, [r0, #76]	; 0x4c
   34a22:	6503      	str	r3, [r0, #80]	; 0x50
   34a24:	4b13      	ldr	r3, [pc, #76]	; (34a74 <__sinit+0x60>)
   34a26:	4a14      	ldr	r2, [pc, #80]	; (34a78 <__sinit+0x64>)
   34a28:	681b      	ldr	r3, [r3, #0]
   34a2a:	6282      	str	r2, [r0, #40]	; 0x28
   34a2c:	9301      	str	r3, [sp, #4]
   34a2e:	4298      	cmp	r0, r3
   34a30:	d101      	bne.n	34a36 <__sinit+0x22>
   34a32:	2301      	movs	r3, #1
   34a34:	6183      	str	r3, [r0, #24]
   34a36:	0020      	movs	r0, r4
   34a38:	f000 f820 	bl	34a7c <__sfp>
   34a3c:	6060      	str	r0, [r4, #4]
   34a3e:	0020      	movs	r0, r4
   34a40:	f000 f81c 	bl	34a7c <__sfp>
   34a44:	60a0      	str	r0, [r4, #8]
   34a46:	0020      	movs	r0, r4
   34a48:	f000 f818 	bl	34a7c <__sfp>
   34a4c:	2200      	movs	r2, #0
   34a4e:	60e0      	str	r0, [r4, #12]
   34a50:	2104      	movs	r1, #4
   34a52:	6860      	ldr	r0, [r4, #4]
   34a54:	f7ff ffa4 	bl	349a0 <std.isra.0>
   34a58:	2201      	movs	r2, #1
   34a5a:	2109      	movs	r1, #9
   34a5c:	68a0      	ldr	r0, [r4, #8]
   34a5e:	f7ff ff9f 	bl	349a0 <std.isra.0>
   34a62:	2202      	movs	r2, #2
   34a64:	2112      	movs	r1, #18
   34a66:	68e0      	ldr	r0, [r4, #12]
   34a68:	f7ff ff9a 	bl	349a0 <std.isra.0>
   34a6c:	2301      	movs	r3, #1
   34a6e:	61a3      	str	r3, [r4, #24]
   34a70:	bd13      	pop	{r0, r1, r4, pc}
   34a72:	46c0      	nop			; (mov r8, r8)
   34a74:	0003ab88 	.word	0x0003ab88
   34a78:	00034991 	.word	0x00034991

00034a7c <__sfp>:
   34a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   34a7e:	4b1e      	ldr	r3, [pc, #120]	; (34af8 <__sfp+0x7c>)
   34a80:	0007      	movs	r7, r0
   34a82:	681e      	ldr	r6, [r3, #0]
   34a84:	69b3      	ldr	r3, [r6, #24]
   34a86:	2b00      	cmp	r3, #0
   34a88:	d102      	bne.n	34a90 <__sfp+0x14>
   34a8a:	0030      	movs	r0, r6
   34a8c:	f7ff ffc2 	bl	34a14 <__sinit>
   34a90:	3648      	adds	r6, #72	; 0x48
   34a92:	68b4      	ldr	r4, [r6, #8]
   34a94:	6873      	ldr	r3, [r6, #4]
   34a96:	3b01      	subs	r3, #1
   34a98:	d504      	bpl.n	34aa4 <__sfp+0x28>
   34a9a:	6833      	ldr	r3, [r6, #0]
   34a9c:	2b00      	cmp	r3, #0
   34a9e:	d007      	beq.n	34ab0 <__sfp+0x34>
   34aa0:	6836      	ldr	r6, [r6, #0]
   34aa2:	e7f6      	b.n	34a92 <__sfp+0x16>
   34aa4:	220c      	movs	r2, #12
   34aa6:	5ea5      	ldrsh	r5, [r4, r2]
   34aa8:	2d00      	cmp	r5, #0
   34aaa:	d00d      	beq.n	34ac8 <__sfp+0x4c>
   34aac:	3468      	adds	r4, #104	; 0x68
   34aae:	e7f2      	b.n	34a96 <__sfp+0x1a>
   34ab0:	2104      	movs	r1, #4
   34ab2:	0038      	movs	r0, r7
   34ab4:	f7ff ff98 	bl	349e8 <__sfmoreglue>
   34ab8:	6030      	str	r0, [r6, #0]
   34aba:	2800      	cmp	r0, #0
   34abc:	d1f0      	bne.n	34aa0 <__sfp+0x24>
   34abe:	230c      	movs	r3, #12
   34ac0:	0004      	movs	r4, r0
   34ac2:	603b      	str	r3, [r7, #0]
   34ac4:	0020      	movs	r0, r4
   34ac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   34ac8:	2301      	movs	r3, #1
   34aca:	0020      	movs	r0, r4
   34acc:	425b      	negs	r3, r3
   34ace:	81e3      	strh	r3, [r4, #14]
   34ad0:	3302      	adds	r3, #2
   34ad2:	81a3      	strh	r3, [r4, #12]
   34ad4:	6665      	str	r5, [r4, #100]	; 0x64
   34ad6:	6025      	str	r5, [r4, #0]
   34ad8:	60a5      	str	r5, [r4, #8]
   34ada:	6065      	str	r5, [r4, #4]
   34adc:	6125      	str	r5, [r4, #16]
   34ade:	6165      	str	r5, [r4, #20]
   34ae0:	61a5      	str	r5, [r4, #24]
   34ae2:	2208      	movs	r2, #8
   34ae4:	0029      	movs	r1, r5
   34ae6:	305c      	adds	r0, #92	; 0x5c
   34ae8:	f7ff facb 	bl	34082 <memset>
   34aec:	6365      	str	r5, [r4, #52]	; 0x34
   34aee:	63a5      	str	r5, [r4, #56]	; 0x38
   34af0:	64a5      	str	r5, [r4, #72]	; 0x48
   34af2:	64e5      	str	r5, [r4, #76]	; 0x4c
   34af4:	e7e6      	b.n	34ac4 <__sfp+0x48>
   34af6:	46c0      	nop			; (mov r8, r8)
   34af8:	0003ab88 	.word	0x0003ab88

00034afc <_fwalk_reent>:
   34afc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   34afe:	0004      	movs	r4, r0
   34b00:	0007      	movs	r7, r0
   34b02:	2600      	movs	r6, #0
   34b04:	9101      	str	r1, [sp, #4]
   34b06:	3448      	adds	r4, #72	; 0x48
   34b08:	2c00      	cmp	r4, #0
   34b0a:	d101      	bne.n	34b10 <_fwalk_reent+0x14>
   34b0c:	0030      	movs	r0, r6
   34b0e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   34b10:	6863      	ldr	r3, [r4, #4]
   34b12:	68a5      	ldr	r5, [r4, #8]
   34b14:	9300      	str	r3, [sp, #0]
   34b16:	9b00      	ldr	r3, [sp, #0]
   34b18:	3b01      	subs	r3, #1
   34b1a:	9300      	str	r3, [sp, #0]
   34b1c:	d501      	bpl.n	34b22 <_fwalk_reent+0x26>
   34b1e:	6824      	ldr	r4, [r4, #0]
   34b20:	e7f2      	b.n	34b08 <_fwalk_reent+0xc>
   34b22:	89ab      	ldrh	r3, [r5, #12]
   34b24:	2b01      	cmp	r3, #1
   34b26:	d908      	bls.n	34b3a <_fwalk_reent+0x3e>
   34b28:	220e      	movs	r2, #14
   34b2a:	5eab      	ldrsh	r3, [r5, r2]
   34b2c:	3301      	adds	r3, #1
   34b2e:	d004      	beq.n	34b3a <_fwalk_reent+0x3e>
   34b30:	0029      	movs	r1, r5
   34b32:	0038      	movs	r0, r7
   34b34:	9b01      	ldr	r3, [sp, #4]
   34b36:	4798      	blx	r3
   34b38:	4306      	orrs	r6, r0
   34b3a:	3568      	adds	r5, #104	; 0x68
   34b3c:	e7eb      	b.n	34b16 <_fwalk_reent+0x1a>

00034b3e <__locale_ctype_ptr_l>:
   34b3e:	30ec      	adds	r0, #236	; 0xec
   34b40:	6800      	ldr	r0, [r0, #0]
   34b42:	4770      	bx	lr

00034b44 <__locale_ctype_ptr>:
   34b44:	4b04      	ldr	r3, [pc, #16]	; (34b58 <__locale_ctype_ptr+0x14>)
   34b46:	681b      	ldr	r3, [r3, #0]
   34b48:	6a1b      	ldr	r3, [r3, #32]
   34b4a:	2b00      	cmp	r3, #0
   34b4c:	d100      	bne.n	34b50 <__locale_ctype_ptr+0xc>
   34b4e:	4b03      	ldr	r3, [pc, #12]	; (34b5c <__locale_ctype_ptr+0x18>)
   34b50:	33ec      	adds	r3, #236	; 0xec
   34b52:	6818      	ldr	r0, [r3, #0]
   34b54:	4770      	bx	lr
   34b56:	46c0      	nop			; (mov r8, r8)
   34b58:	200000e8 	.word	0x200000e8
   34b5c:	2000014c 	.word	0x2000014c

00034b60 <__swhatbuf_r>:
   34b60:	b570      	push	{r4, r5, r6, lr}
   34b62:	000e      	movs	r6, r1
   34b64:	001d      	movs	r5, r3
   34b66:	230e      	movs	r3, #14
   34b68:	5ec9      	ldrsh	r1, [r1, r3]
   34b6a:	b090      	sub	sp, #64	; 0x40
   34b6c:	0014      	movs	r4, r2
   34b6e:	2900      	cmp	r1, #0
   34b70:	da07      	bge.n	34b82 <__swhatbuf_r+0x22>
   34b72:	2300      	movs	r3, #0
   34b74:	602b      	str	r3, [r5, #0]
   34b76:	89b3      	ldrh	r3, [r6, #12]
   34b78:	061b      	lsls	r3, r3, #24
   34b7a:	d411      	bmi.n	34ba0 <__swhatbuf_r+0x40>
   34b7c:	2380      	movs	r3, #128	; 0x80
   34b7e:	00db      	lsls	r3, r3, #3
   34b80:	e00f      	b.n	34ba2 <__swhatbuf_r+0x42>
   34b82:	aa01      	add	r2, sp, #4
   34b84:	f000 fbe6 	bl	35354 <_fstat_r>
   34b88:	2800      	cmp	r0, #0
   34b8a:	dbf2      	blt.n	34b72 <__swhatbuf_r+0x12>
   34b8c:	22f0      	movs	r2, #240	; 0xf0
   34b8e:	9b02      	ldr	r3, [sp, #8]
   34b90:	0212      	lsls	r2, r2, #8
   34b92:	4013      	ands	r3, r2
   34b94:	4a05      	ldr	r2, [pc, #20]	; (34bac <__swhatbuf_r+0x4c>)
   34b96:	189b      	adds	r3, r3, r2
   34b98:	425a      	negs	r2, r3
   34b9a:	4153      	adcs	r3, r2
   34b9c:	602b      	str	r3, [r5, #0]
   34b9e:	e7ed      	b.n	34b7c <__swhatbuf_r+0x1c>
   34ba0:	2340      	movs	r3, #64	; 0x40
   34ba2:	2000      	movs	r0, #0
   34ba4:	6023      	str	r3, [r4, #0]
   34ba6:	b010      	add	sp, #64	; 0x40
   34ba8:	bd70      	pop	{r4, r5, r6, pc}
   34baa:	46c0      	nop			; (mov r8, r8)
   34bac:	ffffe000 	.word	0xffffe000

00034bb0 <__smakebuf_r>:
   34bb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   34bb2:	2602      	movs	r6, #2
   34bb4:	898b      	ldrh	r3, [r1, #12]
   34bb6:	0005      	movs	r5, r0
   34bb8:	000c      	movs	r4, r1
   34bba:	4233      	tst	r3, r6
   34bbc:	d006      	beq.n	34bcc <__smakebuf_r+0x1c>
   34bbe:	0023      	movs	r3, r4
   34bc0:	3347      	adds	r3, #71	; 0x47
   34bc2:	6023      	str	r3, [r4, #0]
   34bc4:	6123      	str	r3, [r4, #16]
   34bc6:	2301      	movs	r3, #1
   34bc8:	6163      	str	r3, [r4, #20]
   34bca:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   34bcc:	ab01      	add	r3, sp, #4
   34bce:	466a      	mov	r2, sp
   34bd0:	f7ff ffc6 	bl	34b60 <__swhatbuf_r>
   34bd4:	9900      	ldr	r1, [sp, #0]
   34bd6:	0007      	movs	r7, r0
   34bd8:	0028      	movs	r0, r5
   34bda:	f7ff faa5 	bl	34128 <_malloc_r>
   34bde:	2800      	cmp	r0, #0
   34be0:	d108      	bne.n	34bf4 <__smakebuf_r+0x44>
   34be2:	220c      	movs	r2, #12
   34be4:	5ea3      	ldrsh	r3, [r4, r2]
   34be6:	059a      	lsls	r2, r3, #22
   34be8:	d4ef      	bmi.n	34bca <__smakebuf_r+0x1a>
   34bea:	2203      	movs	r2, #3
   34bec:	4393      	bics	r3, r2
   34bee:	431e      	orrs	r6, r3
   34bf0:	81a6      	strh	r6, [r4, #12]
   34bf2:	e7e4      	b.n	34bbe <__smakebuf_r+0xe>
   34bf4:	4b0f      	ldr	r3, [pc, #60]	; (34c34 <__smakebuf_r+0x84>)
   34bf6:	62ab      	str	r3, [r5, #40]	; 0x28
   34bf8:	2380      	movs	r3, #128	; 0x80
   34bfa:	89a2      	ldrh	r2, [r4, #12]
   34bfc:	6020      	str	r0, [r4, #0]
   34bfe:	4313      	orrs	r3, r2
   34c00:	81a3      	strh	r3, [r4, #12]
   34c02:	9b00      	ldr	r3, [sp, #0]
   34c04:	6120      	str	r0, [r4, #16]
   34c06:	6163      	str	r3, [r4, #20]
   34c08:	9b01      	ldr	r3, [sp, #4]
   34c0a:	2b00      	cmp	r3, #0
   34c0c:	d00d      	beq.n	34c2a <__smakebuf_r+0x7a>
   34c0e:	230e      	movs	r3, #14
   34c10:	5ee1      	ldrsh	r1, [r4, r3]
   34c12:	0028      	movs	r0, r5
   34c14:	f000 fbb0 	bl	35378 <_isatty_r>
   34c18:	2800      	cmp	r0, #0
   34c1a:	d006      	beq.n	34c2a <__smakebuf_r+0x7a>
   34c1c:	2203      	movs	r2, #3
   34c1e:	89a3      	ldrh	r3, [r4, #12]
   34c20:	4393      	bics	r3, r2
   34c22:	001a      	movs	r2, r3
   34c24:	2301      	movs	r3, #1
   34c26:	4313      	orrs	r3, r2
   34c28:	81a3      	strh	r3, [r4, #12]
   34c2a:	89a0      	ldrh	r0, [r4, #12]
   34c2c:	4338      	orrs	r0, r7
   34c2e:	81a0      	strh	r0, [r4, #12]
   34c30:	e7cb      	b.n	34bca <__smakebuf_r+0x1a>
   34c32:	46c0      	nop			; (mov r8, r8)
   34c34:	00034991 	.word	0x00034991

00034c38 <__ascii_mbtowc>:
   34c38:	b082      	sub	sp, #8
   34c3a:	2900      	cmp	r1, #0
   34c3c:	d100      	bne.n	34c40 <__ascii_mbtowc+0x8>
   34c3e:	a901      	add	r1, sp, #4
   34c40:	1e10      	subs	r0, r2, #0
   34c42:	d006      	beq.n	34c52 <__ascii_mbtowc+0x1a>
   34c44:	2b00      	cmp	r3, #0
   34c46:	d006      	beq.n	34c56 <__ascii_mbtowc+0x1e>
   34c48:	7813      	ldrb	r3, [r2, #0]
   34c4a:	600b      	str	r3, [r1, #0]
   34c4c:	7810      	ldrb	r0, [r2, #0]
   34c4e:	1e43      	subs	r3, r0, #1
   34c50:	4198      	sbcs	r0, r3
   34c52:	b002      	add	sp, #8
   34c54:	4770      	bx	lr
   34c56:	2002      	movs	r0, #2
   34c58:	4240      	negs	r0, r0
   34c5a:	e7fa      	b.n	34c52 <__ascii_mbtowc+0x1a>

00034c5c <__malloc_lock>:
   34c5c:	4770      	bx	lr

00034c5e <__malloc_unlock>:
   34c5e:	4770      	bx	lr

00034c60 <__ssputs_r>:
   34c60:	b5f0      	push	{r4, r5, r6, r7, lr}
   34c62:	688e      	ldr	r6, [r1, #8]
   34c64:	b085      	sub	sp, #20
   34c66:	0007      	movs	r7, r0
   34c68:	000c      	movs	r4, r1
   34c6a:	9203      	str	r2, [sp, #12]
   34c6c:	9301      	str	r3, [sp, #4]
   34c6e:	429e      	cmp	r6, r3
   34c70:	d839      	bhi.n	34ce6 <__ssputs_r+0x86>
   34c72:	2390      	movs	r3, #144	; 0x90
   34c74:	898a      	ldrh	r2, [r1, #12]
   34c76:	00db      	lsls	r3, r3, #3
   34c78:	421a      	tst	r2, r3
   34c7a:	d034      	beq.n	34ce6 <__ssputs_r+0x86>
   34c7c:	2503      	movs	r5, #3
   34c7e:	6909      	ldr	r1, [r1, #16]
   34c80:	6823      	ldr	r3, [r4, #0]
   34c82:	1a5b      	subs	r3, r3, r1
   34c84:	9302      	str	r3, [sp, #8]
   34c86:	6963      	ldr	r3, [r4, #20]
   34c88:	9802      	ldr	r0, [sp, #8]
   34c8a:	435d      	muls	r5, r3
   34c8c:	0feb      	lsrs	r3, r5, #31
   34c8e:	195d      	adds	r5, r3, r5
   34c90:	9b01      	ldr	r3, [sp, #4]
   34c92:	106d      	asrs	r5, r5, #1
   34c94:	3301      	adds	r3, #1
   34c96:	181b      	adds	r3, r3, r0
   34c98:	42ab      	cmp	r3, r5
   34c9a:	d900      	bls.n	34c9e <__ssputs_r+0x3e>
   34c9c:	001d      	movs	r5, r3
   34c9e:	0553      	lsls	r3, r2, #21
   34ca0:	d532      	bpl.n	34d08 <__ssputs_r+0xa8>
   34ca2:	0029      	movs	r1, r5
   34ca4:	0038      	movs	r0, r7
   34ca6:	f7ff fa3f 	bl	34128 <_malloc_r>
   34caa:	1e06      	subs	r6, r0, #0
   34cac:	d109      	bne.n	34cc2 <__ssputs_r+0x62>
   34cae:	230c      	movs	r3, #12
   34cb0:	603b      	str	r3, [r7, #0]
   34cb2:	2340      	movs	r3, #64	; 0x40
   34cb4:	2001      	movs	r0, #1
   34cb6:	89a2      	ldrh	r2, [r4, #12]
   34cb8:	4240      	negs	r0, r0
   34cba:	4313      	orrs	r3, r2
   34cbc:	81a3      	strh	r3, [r4, #12]
   34cbe:	b005      	add	sp, #20
   34cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   34cc2:	9a02      	ldr	r2, [sp, #8]
   34cc4:	6921      	ldr	r1, [r4, #16]
   34cc6:	f7ff f9c1 	bl	3404c <memcpy>
   34cca:	89a3      	ldrh	r3, [r4, #12]
   34ccc:	4a14      	ldr	r2, [pc, #80]	; (34d20 <__ssputs_r+0xc0>)
   34cce:	401a      	ands	r2, r3
   34cd0:	2380      	movs	r3, #128	; 0x80
   34cd2:	4313      	orrs	r3, r2
   34cd4:	81a3      	strh	r3, [r4, #12]
   34cd6:	9b02      	ldr	r3, [sp, #8]
   34cd8:	6126      	str	r6, [r4, #16]
   34cda:	18f6      	adds	r6, r6, r3
   34cdc:	6026      	str	r6, [r4, #0]
   34cde:	6165      	str	r5, [r4, #20]
   34ce0:	9e01      	ldr	r6, [sp, #4]
   34ce2:	1aed      	subs	r5, r5, r3
   34ce4:	60a5      	str	r5, [r4, #8]
   34ce6:	9b01      	ldr	r3, [sp, #4]
   34ce8:	42b3      	cmp	r3, r6
   34cea:	d200      	bcs.n	34cee <__ssputs_r+0x8e>
   34cec:	001e      	movs	r6, r3
   34cee:	0032      	movs	r2, r6
   34cf0:	9903      	ldr	r1, [sp, #12]
   34cf2:	6820      	ldr	r0, [r4, #0]
   34cf4:	f7ff f9b3 	bl	3405e <memmove>
   34cf8:	68a3      	ldr	r3, [r4, #8]
   34cfa:	2000      	movs	r0, #0
   34cfc:	1b9b      	subs	r3, r3, r6
   34cfe:	60a3      	str	r3, [r4, #8]
   34d00:	6823      	ldr	r3, [r4, #0]
   34d02:	199e      	adds	r6, r3, r6
   34d04:	6026      	str	r6, [r4, #0]
   34d06:	e7da      	b.n	34cbe <__ssputs_r+0x5e>
   34d08:	002a      	movs	r2, r5
   34d0a:	0038      	movs	r0, r7
   34d0c:	f000 fb65 	bl	353da <_realloc_r>
   34d10:	1e06      	subs	r6, r0, #0
   34d12:	d1e0      	bne.n	34cd6 <__ssputs_r+0x76>
   34d14:	6921      	ldr	r1, [r4, #16]
   34d16:	0038      	movs	r0, r7
   34d18:	f7ff f9bc 	bl	34094 <_free_r>
   34d1c:	e7c7      	b.n	34cae <__ssputs_r+0x4e>
   34d1e:	46c0      	nop			; (mov r8, r8)
   34d20:	fffffb7f 	.word	0xfffffb7f

00034d24 <_svfiprintf_r>:
   34d24:	b5f0      	push	{r4, r5, r6, r7, lr}
   34d26:	b09f      	sub	sp, #124	; 0x7c
   34d28:	9002      	str	r0, [sp, #8]
   34d2a:	9305      	str	r3, [sp, #20]
   34d2c:	898b      	ldrh	r3, [r1, #12]
   34d2e:	000f      	movs	r7, r1
   34d30:	0016      	movs	r6, r2
   34d32:	061b      	lsls	r3, r3, #24
   34d34:	d511      	bpl.n	34d5a <_svfiprintf_r+0x36>
   34d36:	690b      	ldr	r3, [r1, #16]
   34d38:	2b00      	cmp	r3, #0
   34d3a:	d10e      	bne.n	34d5a <_svfiprintf_r+0x36>
   34d3c:	2140      	movs	r1, #64	; 0x40
   34d3e:	f7ff f9f3 	bl	34128 <_malloc_r>
   34d42:	6038      	str	r0, [r7, #0]
   34d44:	6138      	str	r0, [r7, #16]
   34d46:	2800      	cmp	r0, #0
   34d48:	d105      	bne.n	34d56 <_svfiprintf_r+0x32>
   34d4a:	230c      	movs	r3, #12
   34d4c:	9a02      	ldr	r2, [sp, #8]
   34d4e:	3801      	subs	r0, #1
   34d50:	6013      	str	r3, [r2, #0]
   34d52:	b01f      	add	sp, #124	; 0x7c
   34d54:	bdf0      	pop	{r4, r5, r6, r7, pc}
   34d56:	2340      	movs	r3, #64	; 0x40
   34d58:	617b      	str	r3, [r7, #20]
   34d5a:	2300      	movs	r3, #0
   34d5c:	ad06      	add	r5, sp, #24
   34d5e:	616b      	str	r3, [r5, #20]
   34d60:	3320      	adds	r3, #32
   34d62:	766b      	strb	r3, [r5, #25]
   34d64:	3310      	adds	r3, #16
   34d66:	76ab      	strb	r3, [r5, #26]
   34d68:	0034      	movs	r4, r6
   34d6a:	7823      	ldrb	r3, [r4, #0]
   34d6c:	2b00      	cmp	r3, #0
   34d6e:	d147      	bne.n	34e00 <_svfiprintf_r+0xdc>
   34d70:	1ba3      	subs	r3, r4, r6
   34d72:	9304      	str	r3, [sp, #16]
   34d74:	d00d      	beq.n	34d92 <_svfiprintf_r+0x6e>
   34d76:	1ba3      	subs	r3, r4, r6
   34d78:	0032      	movs	r2, r6
   34d7a:	0039      	movs	r1, r7
   34d7c:	9802      	ldr	r0, [sp, #8]
   34d7e:	f7ff ff6f 	bl	34c60 <__ssputs_r>
   34d82:	1c43      	adds	r3, r0, #1
   34d84:	d100      	bne.n	34d88 <_svfiprintf_r+0x64>
   34d86:	e0b5      	b.n	34ef4 <_svfiprintf_r+0x1d0>
   34d88:	696a      	ldr	r2, [r5, #20]
   34d8a:	9b04      	ldr	r3, [sp, #16]
   34d8c:	4694      	mov	ip, r2
   34d8e:	4463      	add	r3, ip
   34d90:	616b      	str	r3, [r5, #20]
   34d92:	7823      	ldrb	r3, [r4, #0]
   34d94:	2b00      	cmp	r3, #0
   34d96:	d100      	bne.n	34d9a <_svfiprintf_r+0x76>
   34d98:	e0ac      	b.n	34ef4 <_svfiprintf_r+0x1d0>
   34d9a:	2201      	movs	r2, #1
   34d9c:	2300      	movs	r3, #0
   34d9e:	4252      	negs	r2, r2
   34da0:	606a      	str	r2, [r5, #4]
   34da2:	a902      	add	r1, sp, #8
   34da4:	3254      	adds	r2, #84	; 0x54
   34da6:	1852      	adds	r2, r2, r1
   34da8:	3401      	adds	r4, #1
   34daa:	602b      	str	r3, [r5, #0]
   34dac:	60eb      	str	r3, [r5, #12]
   34dae:	60ab      	str	r3, [r5, #8]
   34db0:	7013      	strb	r3, [r2, #0]
   34db2:	65ab      	str	r3, [r5, #88]	; 0x58
   34db4:	4e58      	ldr	r6, [pc, #352]	; (34f18 <_svfiprintf_r+0x1f4>)
   34db6:	2205      	movs	r2, #5
   34db8:	7821      	ldrb	r1, [r4, #0]
   34dba:	0030      	movs	r0, r6
   34dbc:	f000 fb02 	bl	353c4 <memchr>
   34dc0:	1c62      	adds	r2, r4, #1
   34dc2:	2800      	cmp	r0, #0
   34dc4:	d120      	bne.n	34e08 <_svfiprintf_r+0xe4>
   34dc6:	6829      	ldr	r1, [r5, #0]
   34dc8:	06cb      	lsls	r3, r1, #27
   34dca:	d504      	bpl.n	34dd6 <_svfiprintf_r+0xb2>
   34dcc:	2353      	movs	r3, #83	; 0x53
   34dce:	ae02      	add	r6, sp, #8
   34dd0:	3020      	adds	r0, #32
   34dd2:	199b      	adds	r3, r3, r6
   34dd4:	7018      	strb	r0, [r3, #0]
   34dd6:	070b      	lsls	r3, r1, #28
   34dd8:	d504      	bpl.n	34de4 <_svfiprintf_r+0xc0>
   34dda:	2353      	movs	r3, #83	; 0x53
   34ddc:	202b      	movs	r0, #43	; 0x2b
   34dde:	ae02      	add	r6, sp, #8
   34de0:	199b      	adds	r3, r3, r6
   34de2:	7018      	strb	r0, [r3, #0]
   34de4:	7823      	ldrb	r3, [r4, #0]
   34de6:	2b2a      	cmp	r3, #42	; 0x2a
   34de8:	d016      	beq.n	34e18 <_svfiprintf_r+0xf4>
   34dea:	2000      	movs	r0, #0
   34dec:	210a      	movs	r1, #10
   34dee:	9b09      	ldr	r3, [sp, #36]	; 0x24
   34df0:	7822      	ldrb	r2, [r4, #0]
   34df2:	3a30      	subs	r2, #48	; 0x30
   34df4:	2a09      	cmp	r2, #9
   34df6:	d955      	bls.n	34ea4 <_svfiprintf_r+0x180>
   34df8:	2800      	cmp	r0, #0
   34dfa:	d015      	beq.n	34e28 <_svfiprintf_r+0x104>
   34dfc:	9309      	str	r3, [sp, #36]	; 0x24
   34dfe:	e013      	b.n	34e28 <_svfiprintf_r+0x104>
   34e00:	2b25      	cmp	r3, #37	; 0x25
   34e02:	d0b5      	beq.n	34d70 <_svfiprintf_r+0x4c>
   34e04:	3401      	adds	r4, #1
   34e06:	e7b0      	b.n	34d6a <_svfiprintf_r+0x46>
   34e08:	2301      	movs	r3, #1
   34e0a:	1b80      	subs	r0, r0, r6
   34e0c:	4083      	lsls	r3, r0
   34e0e:	6829      	ldr	r1, [r5, #0]
   34e10:	0014      	movs	r4, r2
   34e12:	430b      	orrs	r3, r1
   34e14:	602b      	str	r3, [r5, #0]
   34e16:	e7cd      	b.n	34db4 <_svfiprintf_r+0x90>
   34e18:	9b05      	ldr	r3, [sp, #20]
   34e1a:	1d18      	adds	r0, r3, #4
   34e1c:	681b      	ldr	r3, [r3, #0]
   34e1e:	9005      	str	r0, [sp, #20]
   34e20:	2b00      	cmp	r3, #0
   34e22:	db39      	blt.n	34e98 <_svfiprintf_r+0x174>
   34e24:	9309      	str	r3, [sp, #36]	; 0x24
   34e26:	0014      	movs	r4, r2
   34e28:	7823      	ldrb	r3, [r4, #0]
   34e2a:	2b2e      	cmp	r3, #46	; 0x2e
   34e2c:	d10b      	bne.n	34e46 <_svfiprintf_r+0x122>
   34e2e:	7863      	ldrb	r3, [r4, #1]
   34e30:	1c62      	adds	r2, r4, #1
   34e32:	2b2a      	cmp	r3, #42	; 0x2a
   34e34:	d13e      	bne.n	34eb4 <_svfiprintf_r+0x190>
   34e36:	9b05      	ldr	r3, [sp, #20]
   34e38:	3402      	adds	r4, #2
   34e3a:	1d1a      	adds	r2, r3, #4
   34e3c:	681b      	ldr	r3, [r3, #0]
   34e3e:	9205      	str	r2, [sp, #20]
   34e40:	2b00      	cmp	r3, #0
   34e42:	db34      	blt.n	34eae <_svfiprintf_r+0x18a>
   34e44:	9307      	str	r3, [sp, #28]
   34e46:	4e35      	ldr	r6, [pc, #212]	; (34f1c <_svfiprintf_r+0x1f8>)
   34e48:	7821      	ldrb	r1, [r4, #0]
   34e4a:	2203      	movs	r2, #3
   34e4c:	0030      	movs	r0, r6
   34e4e:	f000 fab9 	bl	353c4 <memchr>
   34e52:	2800      	cmp	r0, #0
   34e54:	d006      	beq.n	34e64 <_svfiprintf_r+0x140>
   34e56:	2340      	movs	r3, #64	; 0x40
   34e58:	1b80      	subs	r0, r0, r6
   34e5a:	4083      	lsls	r3, r0
   34e5c:	682a      	ldr	r2, [r5, #0]
   34e5e:	3401      	adds	r4, #1
   34e60:	4313      	orrs	r3, r2
   34e62:	602b      	str	r3, [r5, #0]
   34e64:	7821      	ldrb	r1, [r4, #0]
   34e66:	2206      	movs	r2, #6
   34e68:	482d      	ldr	r0, [pc, #180]	; (34f20 <_svfiprintf_r+0x1fc>)
   34e6a:	1c66      	adds	r6, r4, #1
   34e6c:	7629      	strb	r1, [r5, #24]
   34e6e:	f000 faa9 	bl	353c4 <memchr>
   34e72:	2800      	cmp	r0, #0
   34e74:	d046      	beq.n	34f04 <_svfiprintf_r+0x1e0>
   34e76:	4b2b      	ldr	r3, [pc, #172]	; (34f24 <_svfiprintf_r+0x200>)
   34e78:	2b00      	cmp	r3, #0
   34e7a:	d12f      	bne.n	34edc <_svfiprintf_r+0x1b8>
   34e7c:	6829      	ldr	r1, [r5, #0]
   34e7e:	9b05      	ldr	r3, [sp, #20]
   34e80:	2207      	movs	r2, #7
   34e82:	05c9      	lsls	r1, r1, #23
   34e84:	d528      	bpl.n	34ed8 <_svfiprintf_r+0x1b4>
   34e86:	189b      	adds	r3, r3, r2
   34e88:	4393      	bics	r3, r2
   34e8a:	3308      	adds	r3, #8
   34e8c:	9305      	str	r3, [sp, #20]
   34e8e:	696b      	ldr	r3, [r5, #20]
   34e90:	9a03      	ldr	r2, [sp, #12]
   34e92:	189b      	adds	r3, r3, r2
   34e94:	616b      	str	r3, [r5, #20]
   34e96:	e767      	b.n	34d68 <_svfiprintf_r+0x44>
   34e98:	425b      	negs	r3, r3
   34e9a:	60eb      	str	r3, [r5, #12]
   34e9c:	2302      	movs	r3, #2
   34e9e:	430b      	orrs	r3, r1
   34ea0:	602b      	str	r3, [r5, #0]
   34ea2:	e7c0      	b.n	34e26 <_svfiprintf_r+0x102>
   34ea4:	434b      	muls	r3, r1
   34ea6:	3401      	adds	r4, #1
   34ea8:	189b      	adds	r3, r3, r2
   34eaa:	2001      	movs	r0, #1
   34eac:	e7a0      	b.n	34df0 <_svfiprintf_r+0xcc>
   34eae:	2301      	movs	r3, #1
   34eb0:	425b      	negs	r3, r3
   34eb2:	e7c7      	b.n	34e44 <_svfiprintf_r+0x120>
   34eb4:	2300      	movs	r3, #0
   34eb6:	0014      	movs	r4, r2
   34eb8:	200a      	movs	r0, #10
   34eba:	001a      	movs	r2, r3
   34ebc:	606b      	str	r3, [r5, #4]
   34ebe:	7821      	ldrb	r1, [r4, #0]
   34ec0:	3930      	subs	r1, #48	; 0x30
   34ec2:	2909      	cmp	r1, #9
   34ec4:	d903      	bls.n	34ece <_svfiprintf_r+0x1aa>
   34ec6:	2b00      	cmp	r3, #0
   34ec8:	d0bd      	beq.n	34e46 <_svfiprintf_r+0x122>
   34eca:	9207      	str	r2, [sp, #28]
   34ecc:	e7bb      	b.n	34e46 <_svfiprintf_r+0x122>
   34ece:	4342      	muls	r2, r0
   34ed0:	3401      	adds	r4, #1
   34ed2:	1852      	adds	r2, r2, r1
   34ed4:	2301      	movs	r3, #1
   34ed6:	e7f2      	b.n	34ebe <_svfiprintf_r+0x19a>
   34ed8:	3307      	adds	r3, #7
   34eda:	e7d5      	b.n	34e88 <_svfiprintf_r+0x164>
   34edc:	ab05      	add	r3, sp, #20
   34ede:	9300      	str	r3, [sp, #0]
   34ee0:	003a      	movs	r2, r7
   34ee2:	4b11      	ldr	r3, [pc, #68]	; (34f28 <_svfiprintf_r+0x204>)
   34ee4:	0029      	movs	r1, r5
   34ee6:	9802      	ldr	r0, [sp, #8]
   34ee8:	e000      	b.n	34eec <_svfiprintf_r+0x1c8>
   34eea:	bf00      	nop
   34eec:	9003      	str	r0, [sp, #12]
   34eee:	9b03      	ldr	r3, [sp, #12]
   34ef0:	3301      	adds	r3, #1
   34ef2:	d1cc      	bne.n	34e8e <_svfiprintf_r+0x16a>
   34ef4:	89bb      	ldrh	r3, [r7, #12]
   34ef6:	980b      	ldr	r0, [sp, #44]	; 0x2c
   34ef8:	065b      	lsls	r3, r3, #25
   34efa:	d400      	bmi.n	34efe <_svfiprintf_r+0x1da>
   34efc:	e729      	b.n	34d52 <_svfiprintf_r+0x2e>
   34efe:	2001      	movs	r0, #1
   34f00:	4240      	negs	r0, r0
   34f02:	e726      	b.n	34d52 <_svfiprintf_r+0x2e>
   34f04:	ab05      	add	r3, sp, #20
   34f06:	9300      	str	r3, [sp, #0]
   34f08:	003a      	movs	r2, r7
   34f0a:	4b07      	ldr	r3, [pc, #28]	; (34f28 <_svfiprintf_r+0x204>)
   34f0c:	0029      	movs	r1, r5
   34f0e:	9802      	ldr	r0, [sp, #8]
   34f10:	f000 f87a 	bl	35008 <_printf_i>
   34f14:	e7ea      	b.n	34eec <_svfiprintf_r+0x1c8>
   34f16:	46c0      	nop			; (mov r8, r8)
   34f18:	0003abf6 	.word	0x0003abf6
   34f1c:	0003abfc 	.word	0x0003abfc
   34f20:	0003ac00 	.word	0x0003ac00
   34f24:	00000000 	.word	0x00000000
   34f28:	00034c61 	.word	0x00034c61

00034f2c <_printf_common>:
   34f2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   34f2e:	0015      	movs	r5, r2
   34f30:	9301      	str	r3, [sp, #4]
   34f32:	688a      	ldr	r2, [r1, #8]
   34f34:	690b      	ldr	r3, [r1, #16]
   34f36:	9000      	str	r0, [sp, #0]
   34f38:	000c      	movs	r4, r1
   34f3a:	4293      	cmp	r3, r2
   34f3c:	da00      	bge.n	34f40 <_printf_common+0x14>
   34f3e:	0013      	movs	r3, r2
   34f40:	0022      	movs	r2, r4
   34f42:	602b      	str	r3, [r5, #0]
   34f44:	3243      	adds	r2, #67	; 0x43
   34f46:	7812      	ldrb	r2, [r2, #0]
   34f48:	2a00      	cmp	r2, #0
   34f4a:	d001      	beq.n	34f50 <_printf_common+0x24>
   34f4c:	3301      	adds	r3, #1
   34f4e:	602b      	str	r3, [r5, #0]
   34f50:	6823      	ldr	r3, [r4, #0]
   34f52:	069b      	lsls	r3, r3, #26
   34f54:	d502      	bpl.n	34f5c <_printf_common+0x30>
   34f56:	682b      	ldr	r3, [r5, #0]
   34f58:	3302      	adds	r3, #2
   34f5a:	602b      	str	r3, [r5, #0]
   34f5c:	2706      	movs	r7, #6
   34f5e:	6823      	ldr	r3, [r4, #0]
   34f60:	401f      	ands	r7, r3
   34f62:	d027      	beq.n	34fb4 <_printf_common+0x88>
   34f64:	0023      	movs	r3, r4
   34f66:	3343      	adds	r3, #67	; 0x43
   34f68:	781b      	ldrb	r3, [r3, #0]
   34f6a:	1e5a      	subs	r2, r3, #1
   34f6c:	4193      	sbcs	r3, r2
   34f6e:	6822      	ldr	r2, [r4, #0]
   34f70:	0692      	lsls	r2, r2, #26
   34f72:	d430      	bmi.n	34fd6 <_printf_common+0xaa>
   34f74:	0022      	movs	r2, r4
   34f76:	9901      	ldr	r1, [sp, #4]
   34f78:	3243      	adds	r2, #67	; 0x43
   34f7a:	9800      	ldr	r0, [sp, #0]
   34f7c:	9e08      	ldr	r6, [sp, #32]
   34f7e:	47b0      	blx	r6
   34f80:	1c43      	adds	r3, r0, #1
   34f82:	d025      	beq.n	34fd0 <_printf_common+0xa4>
   34f84:	2306      	movs	r3, #6
   34f86:	6820      	ldr	r0, [r4, #0]
   34f88:	682a      	ldr	r2, [r5, #0]
   34f8a:	68e1      	ldr	r1, [r4, #12]
   34f8c:	4003      	ands	r3, r0
   34f8e:	2500      	movs	r5, #0
   34f90:	2b04      	cmp	r3, #4
   34f92:	d103      	bne.n	34f9c <_printf_common+0x70>
   34f94:	1a8d      	subs	r5, r1, r2
   34f96:	43eb      	mvns	r3, r5
   34f98:	17db      	asrs	r3, r3, #31
   34f9a:	401d      	ands	r5, r3
   34f9c:	68a3      	ldr	r3, [r4, #8]
   34f9e:	6922      	ldr	r2, [r4, #16]
   34fa0:	4293      	cmp	r3, r2
   34fa2:	dd01      	ble.n	34fa8 <_printf_common+0x7c>
   34fa4:	1a9b      	subs	r3, r3, r2
   34fa6:	18ed      	adds	r5, r5, r3
   34fa8:	2700      	movs	r7, #0
   34faa:	42bd      	cmp	r5, r7
   34fac:	d120      	bne.n	34ff0 <_printf_common+0xc4>
   34fae:	2000      	movs	r0, #0
   34fb0:	e010      	b.n	34fd4 <_printf_common+0xa8>
   34fb2:	3701      	adds	r7, #1
   34fb4:	68e3      	ldr	r3, [r4, #12]
   34fb6:	682a      	ldr	r2, [r5, #0]
   34fb8:	1a9b      	subs	r3, r3, r2
   34fba:	429f      	cmp	r7, r3
   34fbc:	dad2      	bge.n	34f64 <_printf_common+0x38>
   34fbe:	0022      	movs	r2, r4
   34fc0:	2301      	movs	r3, #1
   34fc2:	3219      	adds	r2, #25
   34fc4:	9901      	ldr	r1, [sp, #4]
   34fc6:	9800      	ldr	r0, [sp, #0]
   34fc8:	9e08      	ldr	r6, [sp, #32]
   34fca:	47b0      	blx	r6
   34fcc:	1c43      	adds	r3, r0, #1
   34fce:	d1f0      	bne.n	34fb2 <_printf_common+0x86>
   34fd0:	2001      	movs	r0, #1
   34fd2:	4240      	negs	r0, r0
   34fd4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   34fd6:	2030      	movs	r0, #48	; 0x30
   34fd8:	18e1      	adds	r1, r4, r3
   34fda:	3143      	adds	r1, #67	; 0x43
   34fdc:	7008      	strb	r0, [r1, #0]
   34fde:	0021      	movs	r1, r4
   34fe0:	1c5a      	adds	r2, r3, #1
   34fe2:	3145      	adds	r1, #69	; 0x45
   34fe4:	7809      	ldrb	r1, [r1, #0]
   34fe6:	18a2      	adds	r2, r4, r2
   34fe8:	3243      	adds	r2, #67	; 0x43
   34fea:	3302      	adds	r3, #2
   34fec:	7011      	strb	r1, [r2, #0]
   34fee:	e7c1      	b.n	34f74 <_printf_common+0x48>
   34ff0:	0022      	movs	r2, r4
   34ff2:	2301      	movs	r3, #1
   34ff4:	321a      	adds	r2, #26
   34ff6:	9901      	ldr	r1, [sp, #4]
   34ff8:	9800      	ldr	r0, [sp, #0]
   34ffa:	9e08      	ldr	r6, [sp, #32]
   34ffc:	47b0      	blx	r6
   34ffe:	1c43      	adds	r3, r0, #1
   35000:	d0e6      	beq.n	34fd0 <_printf_common+0xa4>
   35002:	3701      	adds	r7, #1
   35004:	e7d1      	b.n	34faa <_printf_common+0x7e>
	...

00035008 <_printf_i>:
   35008:	b5f0      	push	{r4, r5, r6, r7, lr}
   3500a:	b08b      	sub	sp, #44	; 0x2c
   3500c:	9206      	str	r2, [sp, #24]
   3500e:	000a      	movs	r2, r1
   35010:	3243      	adds	r2, #67	; 0x43
   35012:	9307      	str	r3, [sp, #28]
   35014:	9005      	str	r0, [sp, #20]
   35016:	9204      	str	r2, [sp, #16]
   35018:	7e0a      	ldrb	r2, [r1, #24]
   3501a:	000c      	movs	r4, r1
   3501c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   3501e:	2a6e      	cmp	r2, #110	; 0x6e
   35020:	d100      	bne.n	35024 <_printf_i+0x1c>
   35022:	e08f      	b.n	35144 <_printf_i+0x13c>
   35024:	d817      	bhi.n	35056 <_printf_i+0x4e>
   35026:	2a63      	cmp	r2, #99	; 0x63
   35028:	d02c      	beq.n	35084 <_printf_i+0x7c>
   3502a:	d808      	bhi.n	3503e <_printf_i+0x36>
   3502c:	2a00      	cmp	r2, #0
   3502e:	d100      	bne.n	35032 <_printf_i+0x2a>
   35030:	e099      	b.n	35166 <_printf_i+0x15e>
   35032:	2a58      	cmp	r2, #88	; 0x58
   35034:	d054      	beq.n	350e0 <_printf_i+0xd8>
   35036:	0026      	movs	r6, r4
   35038:	3642      	adds	r6, #66	; 0x42
   3503a:	7032      	strb	r2, [r6, #0]
   3503c:	e029      	b.n	35092 <_printf_i+0x8a>
   3503e:	2a64      	cmp	r2, #100	; 0x64
   35040:	d001      	beq.n	35046 <_printf_i+0x3e>
   35042:	2a69      	cmp	r2, #105	; 0x69
   35044:	d1f7      	bne.n	35036 <_printf_i+0x2e>
   35046:	6821      	ldr	r1, [r4, #0]
   35048:	681a      	ldr	r2, [r3, #0]
   3504a:	0608      	lsls	r0, r1, #24
   3504c:	d523      	bpl.n	35096 <_printf_i+0x8e>
   3504e:	1d11      	adds	r1, r2, #4
   35050:	6019      	str	r1, [r3, #0]
   35052:	6815      	ldr	r5, [r2, #0]
   35054:	e025      	b.n	350a2 <_printf_i+0x9a>
   35056:	2a73      	cmp	r2, #115	; 0x73
   35058:	d100      	bne.n	3505c <_printf_i+0x54>
   3505a:	e088      	b.n	3516e <_printf_i+0x166>
   3505c:	d808      	bhi.n	35070 <_printf_i+0x68>
   3505e:	2a6f      	cmp	r2, #111	; 0x6f
   35060:	d029      	beq.n	350b6 <_printf_i+0xae>
   35062:	2a70      	cmp	r2, #112	; 0x70
   35064:	d1e7      	bne.n	35036 <_printf_i+0x2e>
   35066:	2220      	movs	r2, #32
   35068:	6809      	ldr	r1, [r1, #0]
   3506a:	430a      	orrs	r2, r1
   3506c:	6022      	str	r2, [r4, #0]
   3506e:	e003      	b.n	35078 <_printf_i+0x70>
   35070:	2a75      	cmp	r2, #117	; 0x75
   35072:	d020      	beq.n	350b6 <_printf_i+0xae>
   35074:	2a78      	cmp	r2, #120	; 0x78
   35076:	d1de      	bne.n	35036 <_printf_i+0x2e>
   35078:	0022      	movs	r2, r4
   3507a:	2178      	movs	r1, #120	; 0x78
   3507c:	3245      	adds	r2, #69	; 0x45
   3507e:	7011      	strb	r1, [r2, #0]
   35080:	4a6c      	ldr	r2, [pc, #432]	; (35234 <_printf_i+0x22c>)
   35082:	e030      	b.n	350e6 <_printf_i+0xde>
   35084:	000e      	movs	r6, r1
   35086:	681a      	ldr	r2, [r3, #0]
   35088:	3642      	adds	r6, #66	; 0x42
   3508a:	1d11      	adds	r1, r2, #4
   3508c:	6019      	str	r1, [r3, #0]
   3508e:	6813      	ldr	r3, [r2, #0]
   35090:	7033      	strb	r3, [r6, #0]
   35092:	2301      	movs	r3, #1
   35094:	e079      	b.n	3518a <_printf_i+0x182>
   35096:	0649      	lsls	r1, r1, #25
   35098:	d5d9      	bpl.n	3504e <_printf_i+0x46>
   3509a:	1d11      	adds	r1, r2, #4
   3509c:	6019      	str	r1, [r3, #0]
   3509e:	2300      	movs	r3, #0
   350a0:	5ed5      	ldrsh	r5, [r2, r3]
   350a2:	2d00      	cmp	r5, #0
   350a4:	da03      	bge.n	350ae <_printf_i+0xa6>
   350a6:	232d      	movs	r3, #45	; 0x2d
   350a8:	9a04      	ldr	r2, [sp, #16]
   350aa:	426d      	negs	r5, r5
   350ac:	7013      	strb	r3, [r2, #0]
   350ae:	4b62      	ldr	r3, [pc, #392]	; (35238 <_printf_i+0x230>)
   350b0:	270a      	movs	r7, #10
   350b2:	9303      	str	r3, [sp, #12]
   350b4:	e02f      	b.n	35116 <_printf_i+0x10e>
   350b6:	6820      	ldr	r0, [r4, #0]
   350b8:	6819      	ldr	r1, [r3, #0]
   350ba:	0605      	lsls	r5, r0, #24
   350bc:	d503      	bpl.n	350c6 <_printf_i+0xbe>
   350be:	1d08      	adds	r0, r1, #4
   350c0:	6018      	str	r0, [r3, #0]
   350c2:	680d      	ldr	r5, [r1, #0]
   350c4:	e005      	b.n	350d2 <_printf_i+0xca>
   350c6:	0640      	lsls	r0, r0, #25
   350c8:	d5f9      	bpl.n	350be <_printf_i+0xb6>
   350ca:	680d      	ldr	r5, [r1, #0]
   350cc:	1d08      	adds	r0, r1, #4
   350ce:	6018      	str	r0, [r3, #0]
   350d0:	b2ad      	uxth	r5, r5
   350d2:	4b59      	ldr	r3, [pc, #356]	; (35238 <_printf_i+0x230>)
   350d4:	2708      	movs	r7, #8
   350d6:	9303      	str	r3, [sp, #12]
   350d8:	2a6f      	cmp	r2, #111	; 0x6f
   350da:	d018      	beq.n	3510e <_printf_i+0x106>
   350dc:	270a      	movs	r7, #10
   350de:	e016      	b.n	3510e <_printf_i+0x106>
   350e0:	3145      	adds	r1, #69	; 0x45
   350e2:	700a      	strb	r2, [r1, #0]
   350e4:	4a54      	ldr	r2, [pc, #336]	; (35238 <_printf_i+0x230>)
   350e6:	9203      	str	r2, [sp, #12]
   350e8:	681a      	ldr	r2, [r3, #0]
   350ea:	6821      	ldr	r1, [r4, #0]
   350ec:	1d10      	adds	r0, r2, #4
   350ee:	6018      	str	r0, [r3, #0]
   350f0:	6815      	ldr	r5, [r2, #0]
   350f2:	0608      	lsls	r0, r1, #24
   350f4:	d522      	bpl.n	3513c <_printf_i+0x134>
   350f6:	07cb      	lsls	r3, r1, #31
   350f8:	d502      	bpl.n	35100 <_printf_i+0xf8>
   350fa:	2320      	movs	r3, #32
   350fc:	4319      	orrs	r1, r3
   350fe:	6021      	str	r1, [r4, #0]
   35100:	2710      	movs	r7, #16
   35102:	2d00      	cmp	r5, #0
   35104:	d103      	bne.n	3510e <_printf_i+0x106>
   35106:	2320      	movs	r3, #32
   35108:	6822      	ldr	r2, [r4, #0]
   3510a:	439a      	bics	r2, r3
   3510c:	6022      	str	r2, [r4, #0]
   3510e:	0023      	movs	r3, r4
   35110:	2200      	movs	r2, #0
   35112:	3343      	adds	r3, #67	; 0x43
   35114:	701a      	strb	r2, [r3, #0]
   35116:	6863      	ldr	r3, [r4, #4]
   35118:	60a3      	str	r3, [r4, #8]
   3511a:	2b00      	cmp	r3, #0
   3511c:	db5c      	blt.n	351d8 <_printf_i+0x1d0>
   3511e:	2204      	movs	r2, #4
   35120:	6821      	ldr	r1, [r4, #0]
   35122:	4391      	bics	r1, r2
   35124:	6021      	str	r1, [r4, #0]
   35126:	2d00      	cmp	r5, #0
   35128:	d158      	bne.n	351dc <_printf_i+0x1d4>
   3512a:	9e04      	ldr	r6, [sp, #16]
   3512c:	2b00      	cmp	r3, #0
   3512e:	d064      	beq.n	351fa <_printf_i+0x1f2>
   35130:	0026      	movs	r6, r4
   35132:	9b03      	ldr	r3, [sp, #12]
   35134:	3642      	adds	r6, #66	; 0x42
   35136:	781b      	ldrb	r3, [r3, #0]
   35138:	7033      	strb	r3, [r6, #0]
   3513a:	e05e      	b.n	351fa <_printf_i+0x1f2>
   3513c:	0648      	lsls	r0, r1, #25
   3513e:	d5da      	bpl.n	350f6 <_printf_i+0xee>
   35140:	b2ad      	uxth	r5, r5
   35142:	e7d8      	b.n	350f6 <_printf_i+0xee>
   35144:	6809      	ldr	r1, [r1, #0]
   35146:	681a      	ldr	r2, [r3, #0]
   35148:	0608      	lsls	r0, r1, #24
   3514a:	d505      	bpl.n	35158 <_printf_i+0x150>
   3514c:	1d11      	adds	r1, r2, #4
   3514e:	6019      	str	r1, [r3, #0]
   35150:	6813      	ldr	r3, [r2, #0]
   35152:	6962      	ldr	r2, [r4, #20]
   35154:	601a      	str	r2, [r3, #0]
   35156:	e006      	b.n	35166 <_printf_i+0x15e>
   35158:	0649      	lsls	r1, r1, #25
   3515a:	d5f7      	bpl.n	3514c <_printf_i+0x144>
   3515c:	1d11      	adds	r1, r2, #4
   3515e:	6019      	str	r1, [r3, #0]
   35160:	6813      	ldr	r3, [r2, #0]
   35162:	8aa2      	ldrh	r2, [r4, #20]
   35164:	801a      	strh	r2, [r3, #0]
   35166:	2300      	movs	r3, #0
   35168:	9e04      	ldr	r6, [sp, #16]
   3516a:	6123      	str	r3, [r4, #16]
   3516c:	e054      	b.n	35218 <_printf_i+0x210>
   3516e:	681a      	ldr	r2, [r3, #0]
   35170:	1d11      	adds	r1, r2, #4
   35172:	6019      	str	r1, [r3, #0]
   35174:	6816      	ldr	r6, [r2, #0]
   35176:	2100      	movs	r1, #0
   35178:	6862      	ldr	r2, [r4, #4]
   3517a:	0030      	movs	r0, r6
   3517c:	f000 f922 	bl	353c4 <memchr>
   35180:	2800      	cmp	r0, #0
   35182:	d001      	beq.n	35188 <_printf_i+0x180>
   35184:	1b80      	subs	r0, r0, r6
   35186:	6060      	str	r0, [r4, #4]
   35188:	6863      	ldr	r3, [r4, #4]
   3518a:	6123      	str	r3, [r4, #16]
   3518c:	2300      	movs	r3, #0
   3518e:	9a04      	ldr	r2, [sp, #16]
   35190:	7013      	strb	r3, [r2, #0]
   35192:	e041      	b.n	35218 <_printf_i+0x210>
   35194:	6923      	ldr	r3, [r4, #16]
   35196:	0032      	movs	r2, r6
   35198:	9906      	ldr	r1, [sp, #24]
   3519a:	9805      	ldr	r0, [sp, #20]
   3519c:	9d07      	ldr	r5, [sp, #28]
   3519e:	47a8      	blx	r5
   351a0:	1c43      	adds	r3, r0, #1
   351a2:	d043      	beq.n	3522c <_printf_i+0x224>
   351a4:	6823      	ldr	r3, [r4, #0]
   351a6:	2500      	movs	r5, #0
   351a8:	079b      	lsls	r3, r3, #30
   351aa:	d40f      	bmi.n	351cc <_printf_i+0x1c4>
   351ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
   351ae:	68e0      	ldr	r0, [r4, #12]
   351b0:	4298      	cmp	r0, r3
   351b2:	da3d      	bge.n	35230 <_printf_i+0x228>
   351b4:	0018      	movs	r0, r3
   351b6:	e03b      	b.n	35230 <_printf_i+0x228>
   351b8:	0022      	movs	r2, r4
   351ba:	2301      	movs	r3, #1
   351bc:	3219      	adds	r2, #25
   351be:	9906      	ldr	r1, [sp, #24]
   351c0:	9805      	ldr	r0, [sp, #20]
   351c2:	9e07      	ldr	r6, [sp, #28]
   351c4:	47b0      	blx	r6
   351c6:	1c43      	adds	r3, r0, #1
   351c8:	d030      	beq.n	3522c <_printf_i+0x224>
   351ca:	3501      	adds	r5, #1
   351cc:	68e3      	ldr	r3, [r4, #12]
   351ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
   351d0:	1a9b      	subs	r3, r3, r2
   351d2:	429d      	cmp	r5, r3
   351d4:	dbf0      	blt.n	351b8 <_printf_i+0x1b0>
   351d6:	e7e9      	b.n	351ac <_printf_i+0x1a4>
   351d8:	2d00      	cmp	r5, #0
   351da:	d0a9      	beq.n	35130 <_printf_i+0x128>
   351dc:	9e04      	ldr	r6, [sp, #16]
   351de:	0028      	movs	r0, r5
   351e0:	0039      	movs	r1, r7
   351e2:	f7fd f977 	bl	324d4 <__aeabi_uidivmod>
   351e6:	9b03      	ldr	r3, [sp, #12]
   351e8:	3e01      	subs	r6, #1
   351ea:	5c5b      	ldrb	r3, [r3, r1]
   351ec:	0028      	movs	r0, r5
   351ee:	7033      	strb	r3, [r6, #0]
   351f0:	0039      	movs	r1, r7
   351f2:	f7fd f8e9 	bl	323c8 <__udivsi3>
   351f6:	1e05      	subs	r5, r0, #0
   351f8:	d1f1      	bne.n	351de <_printf_i+0x1d6>
   351fa:	2f08      	cmp	r7, #8
   351fc:	d109      	bne.n	35212 <_printf_i+0x20a>
   351fe:	6823      	ldr	r3, [r4, #0]
   35200:	07db      	lsls	r3, r3, #31
   35202:	d506      	bpl.n	35212 <_printf_i+0x20a>
   35204:	6863      	ldr	r3, [r4, #4]
   35206:	6922      	ldr	r2, [r4, #16]
   35208:	4293      	cmp	r3, r2
   3520a:	dc02      	bgt.n	35212 <_printf_i+0x20a>
   3520c:	2330      	movs	r3, #48	; 0x30
   3520e:	3e01      	subs	r6, #1
   35210:	7033      	strb	r3, [r6, #0]
   35212:	9b04      	ldr	r3, [sp, #16]
   35214:	1b9b      	subs	r3, r3, r6
   35216:	6123      	str	r3, [r4, #16]
   35218:	9b07      	ldr	r3, [sp, #28]
   3521a:	aa09      	add	r2, sp, #36	; 0x24
   3521c:	9300      	str	r3, [sp, #0]
   3521e:	0021      	movs	r1, r4
   35220:	9b06      	ldr	r3, [sp, #24]
   35222:	9805      	ldr	r0, [sp, #20]
   35224:	f7ff fe82 	bl	34f2c <_printf_common>
   35228:	1c43      	adds	r3, r0, #1
   3522a:	d1b3      	bne.n	35194 <_printf_i+0x18c>
   3522c:	2001      	movs	r0, #1
   3522e:	4240      	negs	r0, r0
   35230:	b00b      	add	sp, #44	; 0x2c
   35232:	bdf0      	pop	{r4, r5, r6, r7, pc}
   35234:	0003ac18 	.word	0x0003ac18
   35238:	0003ac07 	.word	0x0003ac07

0003523c <__sread>:
   3523c:	b570      	push	{r4, r5, r6, lr}
   3523e:	000c      	movs	r4, r1
   35240:	250e      	movs	r5, #14
   35242:	5f49      	ldrsh	r1, [r1, r5]
   35244:	f000 f8f0 	bl	35428 <_read_r>
   35248:	2800      	cmp	r0, #0
   3524a:	db03      	blt.n	35254 <__sread+0x18>
   3524c:	6d63      	ldr	r3, [r4, #84]	; 0x54
   3524e:	181b      	adds	r3, r3, r0
   35250:	6563      	str	r3, [r4, #84]	; 0x54
   35252:	bd70      	pop	{r4, r5, r6, pc}
   35254:	89a3      	ldrh	r3, [r4, #12]
   35256:	4a02      	ldr	r2, [pc, #8]	; (35260 <__sread+0x24>)
   35258:	4013      	ands	r3, r2
   3525a:	81a3      	strh	r3, [r4, #12]
   3525c:	e7f9      	b.n	35252 <__sread+0x16>
   3525e:	46c0      	nop			; (mov r8, r8)
   35260:	ffffefff 	.word	0xffffefff

00035264 <__swrite>:
   35264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   35266:	001f      	movs	r7, r3
   35268:	898b      	ldrh	r3, [r1, #12]
   3526a:	0005      	movs	r5, r0
   3526c:	000c      	movs	r4, r1
   3526e:	0016      	movs	r6, r2
   35270:	05db      	lsls	r3, r3, #23
   35272:	d505      	bpl.n	35280 <__swrite+0x1c>
   35274:	230e      	movs	r3, #14
   35276:	5ec9      	ldrsh	r1, [r1, r3]
   35278:	2200      	movs	r2, #0
   3527a:	2302      	movs	r3, #2
   3527c:	f000 f88e 	bl	3539c <_lseek_r>
   35280:	89a3      	ldrh	r3, [r4, #12]
   35282:	4a05      	ldr	r2, [pc, #20]	; (35298 <__swrite+0x34>)
   35284:	0028      	movs	r0, r5
   35286:	4013      	ands	r3, r2
   35288:	81a3      	strh	r3, [r4, #12]
   3528a:	0032      	movs	r2, r6
   3528c:	230e      	movs	r3, #14
   3528e:	5ee1      	ldrsh	r1, [r4, r3]
   35290:	003b      	movs	r3, r7
   35292:	f000 f839 	bl	35308 <_write_r>
   35296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   35298:	ffffefff 	.word	0xffffefff

0003529c <__sseek>:
   3529c:	b570      	push	{r4, r5, r6, lr}
   3529e:	000c      	movs	r4, r1
   352a0:	250e      	movs	r5, #14
   352a2:	5f49      	ldrsh	r1, [r1, r5]
   352a4:	f000 f87a 	bl	3539c <_lseek_r>
   352a8:	89a3      	ldrh	r3, [r4, #12]
   352aa:	1c42      	adds	r2, r0, #1
   352ac:	d103      	bne.n	352b6 <__sseek+0x1a>
   352ae:	4a05      	ldr	r2, [pc, #20]	; (352c4 <__sseek+0x28>)
   352b0:	4013      	ands	r3, r2
   352b2:	81a3      	strh	r3, [r4, #12]
   352b4:	bd70      	pop	{r4, r5, r6, pc}
   352b6:	2280      	movs	r2, #128	; 0x80
   352b8:	0152      	lsls	r2, r2, #5
   352ba:	4313      	orrs	r3, r2
   352bc:	81a3      	strh	r3, [r4, #12]
   352be:	6560      	str	r0, [r4, #84]	; 0x54
   352c0:	e7f8      	b.n	352b4 <__sseek+0x18>
   352c2:	46c0      	nop			; (mov r8, r8)
   352c4:	ffffefff 	.word	0xffffefff

000352c8 <__sclose>:
   352c8:	b510      	push	{r4, lr}
   352ca:	230e      	movs	r3, #14
   352cc:	5ec9      	ldrsh	r1, [r1, r3]
   352ce:	f000 f82f 	bl	35330 <_close_r>
   352d2:	bd10      	pop	{r4, pc}

000352d4 <strchr>:
   352d4:	b2c9      	uxtb	r1, r1
   352d6:	7803      	ldrb	r3, [r0, #0]
   352d8:	2b00      	cmp	r3, #0
   352da:	d004      	beq.n	352e6 <strchr+0x12>
   352dc:	4299      	cmp	r1, r3
   352de:	d100      	bne.n	352e2 <strchr+0xe>
   352e0:	4770      	bx	lr
   352e2:	3001      	adds	r0, #1
   352e4:	e7f7      	b.n	352d6 <strchr+0x2>
   352e6:	424b      	negs	r3, r1
   352e8:	4159      	adcs	r1, r3
   352ea:	4249      	negs	r1, r1
   352ec:	4008      	ands	r0, r1
   352ee:	e7f7      	b.n	352e0 <strchr+0xc>

000352f0 <__ascii_wctomb>:
   352f0:	1e0b      	subs	r3, r1, #0
   352f2:	d004      	beq.n	352fe <__ascii_wctomb+0xe>
   352f4:	2aff      	cmp	r2, #255	; 0xff
   352f6:	d904      	bls.n	35302 <__ascii_wctomb+0x12>
   352f8:	238a      	movs	r3, #138	; 0x8a
   352fa:	6003      	str	r3, [r0, #0]
   352fc:	3b8b      	subs	r3, #139	; 0x8b
   352fe:	0018      	movs	r0, r3
   35300:	4770      	bx	lr
   35302:	700a      	strb	r2, [r1, #0]
   35304:	2301      	movs	r3, #1
   35306:	e7fa      	b.n	352fe <__ascii_wctomb+0xe>

00035308 <_write_r>:
   35308:	b570      	push	{r4, r5, r6, lr}
   3530a:	0005      	movs	r5, r0
   3530c:	0008      	movs	r0, r1
   3530e:	0011      	movs	r1, r2
   35310:	2200      	movs	r2, #0
   35312:	4c06      	ldr	r4, [pc, #24]	; (3532c <_write_r+0x24>)
   35314:	6022      	str	r2, [r4, #0]
   35316:	001a      	movs	r2, r3
   35318:	f7f5 fbf0 	bl	2aafc <_write>
   3531c:	1c43      	adds	r3, r0, #1
   3531e:	d103      	bne.n	35328 <_write_r+0x20>
   35320:	6823      	ldr	r3, [r4, #0]
   35322:	2b00      	cmp	r3, #0
   35324:	d000      	beq.n	35328 <_write_r+0x20>
   35326:	602b      	str	r3, [r5, #0]
   35328:	bd70      	pop	{r4, r5, r6, pc}
   3532a:	46c0      	nop			; (mov r8, r8)
   3532c:	200055b0 	.word	0x200055b0

00035330 <_close_r>:
   35330:	2300      	movs	r3, #0
   35332:	b570      	push	{r4, r5, r6, lr}
   35334:	4c06      	ldr	r4, [pc, #24]	; (35350 <_close_r+0x20>)
   35336:	0005      	movs	r5, r0
   35338:	0008      	movs	r0, r1
   3533a:	6023      	str	r3, [r4, #0]
   3533c:	f7f5 fc32 	bl	2aba4 <_close>
   35340:	1c43      	adds	r3, r0, #1
   35342:	d103      	bne.n	3534c <_close_r+0x1c>
   35344:	6823      	ldr	r3, [r4, #0]
   35346:	2b00      	cmp	r3, #0
   35348:	d000      	beq.n	3534c <_close_r+0x1c>
   3534a:	602b      	str	r3, [r5, #0]
   3534c:	bd70      	pop	{r4, r5, r6, pc}
   3534e:	46c0      	nop			; (mov r8, r8)
   35350:	200055b0 	.word	0x200055b0

00035354 <_fstat_r>:
   35354:	2300      	movs	r3, #0
   35356:	b570      	push	{r4, r5, r6, lr}
   35358:	4c06      	ldr	r4, [pc, #24]	; (35374 <_fstat_r+0x20>)
   3535a:	0005      	movs	r5, r0
   3535c:	0008      	movs	r0, r1
   3535e:	0011      	movs	r1, r2
   35360:	6023      	str	r3, [r4, #0]
   35362:	f7f5 fc29 	bl	2abb8 <_fstat>
   35366:	1c43      	adds	r3, r0, #1
   35368:	d103      	bne.n	35372 <_fstat_r+0x1e>
   3536a:	6823      	ldr	r3, [r4, #0]
   3536c:	2b00      	cmp	r3, #0
   3536e:	d000      	beq.n	35372 <_fstat_r+0x1e>
   35370:	602b      	str	r3, [r5, #0]
   35372:	bd70      	pop	{r4, r5, r6, pc}
   35374:	200055b0 	.word	0x200055b0

00035378 <_isatty_r>:
   35378:	2300      	movs	r3, #0
   3537a:	b570      	push	{r4, r5, r6, lr}
   3537c:	4c06      	ldr	r4, [pc, #24]	; (35398 <_isatty_r+0x20>)
   3537e:	0005      	movs	r5, r0
   35380:	0008      	movs	r0, r1
   35382:	6023      	str	r3, [r4, #0]
   35384:	f7f5 fc26 	bl	2abd4 <_isatty>
   35388:	1c43      	adds	r3, r0, #1
   3538a:	d103      	bne.n	35394 <_isatty_r+0x1c>
   3538c:	6823      	ldr	r3, [r4, #0]
   3538e:	2b00      	cmp	r3, #0
   35390:	d000      	beq.n	35394 <_isatty_r+0x1c>
   35392:	602b      	str	r3, [r5, #0]
   35394:	bd70      	pop	{r4, r5, r6, pc}
   35396:	46c0      	nop			; (mov r8, r8)
   35398:	200055b0 	.word	0x200055b0

0003539c <_lseek_r>:
   3539c:	b570      	push	{r4, r5, r6, lr}
   3539e:	0005      	movs	r5, r0
   353a0:	0008      	movs	r0, r1
   353a2:	0011      	movs	r1, r2
   353a4:	2200      	movs	r2, #0
   353a6:	4c06      	ldr	r4, [pc, #24]	; (353c0 <_lseek_r+0x24>)
   353a8:	6022      	str	r2, [r4, #0]
   353aa:	001a      	movs	r2, r3
   353ac:	f7f5 fc1b 	bl	2abe6 <_lseek>
   353b0:	1c43      	adds	r3, r0, #1
   353b2:	d103      	bne.n	353bc <_lseek_r+0x20>
   353b4:	6823      	ldr	r3, [r4, #0]
   353b6:	2b00      	cmp	r3, #0
   353b8:	d000      	beq.n	353bc <_lseek_r+0x20>
   353ba:	602b      	str	r3, [r5, #0]
   353bc:	bd70      	pop	{r4, r5, r6, pc}
   353be:	46c0      	nop			; (mov r8, r8)
   353c0:	200055b0 	.word	0x200055b0

000353c4 <memchr>:
   353c4:	b2c9      	uxtb	r1, r1
   353c6:	1882      	adds	r2, r0, r2
   353c8:	4290      	cmp	r0, r2
   353ca:	d101      	bne.n	353d0 <memchr+0xc>
   353cc:	2000      	movs	r0, #0
   353ce:	4770      	bx	lr
   353d0:	7803      	ldrb	r3, [r0, #0]
   353d2:	428b      	cmp	r3, r1
   353d4:	d0fb      	beq.n	353ce <memchr+0xa>
   353d6:	3001      	adds	r0, #1
   353d8:	e7f6      	b.n	353c8 <memchr+0x4>

000353da <_realloc_r>:
   353da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   353dc:	0007      	movs	r7, r0
   353de:	000d      	movs	r5, r1
   353e0:	0016      	movs	r6, r2
   353e2:	2900      	cmp	r1, #0
   353e4:	d105      	bne.n	353f2 <_realloc_r+0x18>
   353e6:	0011      	movs	r1, r2
   353e8:	f7fe fe9e 	bl	34128 <_malloc_r>
   353ec:	0004      	movs	r4, r0
   353ee:	0020      	movs	r0, r4
   353f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   353f2:	2a00      	cmp	r2, #0
   353f4:	d103      	bne.n	353fe <_realloc_r+0x24>
   353f6:	f7fe fe4d 	bl	34094 <_free_r>
   353fa:	0034      	movs	r4, r6
   353fc:	e7f7      	b.n	353ee <_realloc_r+0x14>
   353fe:	f000 f827 	bl	35450 <_malloc_usable_size_r>
   35402:	002c      	movs	r4, r5
   35404:	4286      	cmp	r6, r0
   35406:	d9f2      	bls.n	353ee <_realloc_r+0x14>
   35408:	0031      	movs	r1, r6
   3540a:	0038      	movs	r0, r7
   3540c:	f7fe fe8c 	bl	34128 <_malloc_r>
   35410:	1e04      	subs	r4, r0, #0
   35412:	d0ec      	beq.n	353ee <_realloc_r+0x14>
   35414:	0029      	movs	r1, r5
   35416:	0032      	movs	r2, r6
   35418:	f7fe fe18 	bl	3404c <memcpy>
   3541c:	0029      	movs	r1, r5
   3541e:	0038      	movs	r0, r7
   35420:	f7fe fe38 	bl	34094 <_free_r>
   35424:	e7e3      	b.n	353ee <_realloc_r+0x14>
	...

00035428 <_read_r>:
   35428:	b570      	push	{r4, r5, r6, lr}
   3542a:	0005      	movs	r5, r0
   3542c:	0008      	movs	r0, r1
   3542e:	0011      	movs	r1, r2
   35430:	2200      	movs	r2, #0
   35432:	4c06      	ldr	r4, [pc, #24]	; (3544c <_read_r+0x24>)
   35434:	6022      	str	r2, [r4, #0]
   35436:	001a      	movs	r2, r3
   35438:	f7f5 fb36 	bl	2aaa8 <_read>
   3543c:	1c43      	adds	r3, r0, #1
   3543e:	d103      	bne.n	35448 <_read_r+0x20>
   35440:	6823      	ldr	r3, [r4, #0]
   35442:	2b00      	cmp	r3, #0
   35444:	d000      	beq.n	35448 <_read_r+0x20>
   35446:	602b      	str	r3, [r5, #0]
   35448:	bd70      	pop	{r4, r5, r6, pc}
   3544a:	46c0      	nop			; (mov r8, r8)
   3544c:	200055b0 	.word	0x200055b0

00035450 <_malloc_usable_size_r>:
   35450:	1f0b      	subs	r3, r1, #4
   35452:	681b      	ldr	r3, [r3, #0]
   35454:	1f18      	subs	r0, r3, #4
   35456:	2b00      	cmp	r3, #0
   35458:	da01      	bge.n	3545e <_malloc_usable_size_r+0xe>
   3545a:	580b      	ldr	r3, [r1, r0]
   3545c:	18c0      	adds	r0, r0, r3
   3545e:	4770      	bx	lr
   35460:	65657246 	.word	0x65657246
   35464:	534f5452 	.word	0x534f5452
   35468:	494c4320 	.word	0x494c4320
   3546c:	540a0d2e 	.word	0x540a0d2e
   35470:	20657079 	.word	0x20657079
   35474:	706c6548 	.word	0x706c6548
   35478:	206f7420 	.word	0x206f7420
   3547c:	77656976 	.word	0x77656976
   35480:	6c206120 	.word	0x6c206120
   35484:	20747369 	.word	0x20747369
   35488:	7220666f 	.word	0x7220666f
   3548c:	73696765 	.word	0x73696765
   35490:	65726574 	.word	0x65726574
   35494:	6f632064 	.word	0x6f632064
   35498:	6e616d6d 	.word	0x6e616d6d
   3549c:	0d2e7364 	.word	0x0d2e7364
   354a0:	0000000a 	.word	0x0000000a
   354a4:	00007766 	.word	0x00007766
   354a8:	203a7766 	.word	0x203a7766
   354ac:	6e776f44 	.word	0x6e776f44
   354b0:	64616f6c 	.word	0x64616f6c
   354b4:	66206120 	.word	0x66206120
   354b8:	20656c69 	.word	0x20656c69
   354bc:	20646e61 	.word	0x20646e61
   354c0:	66726570 	.word	0x66726570
   354c4:	206d726f 	.word	0x206d726f
   354c8:	46206e61 	.word	0x46206e61
   354cc:	70752057 	.word	0x70752057
   354d0:	65746164 	.word	0x65746164
   354d4:	00000a0d 	.word	0x00000a0d
   354d8:	65736572 	.word	0x65736572
   354dc:	00000074 	.word	0x00000074
   354e0:	65736572 	.word	0x65736572
   354e4:	52203a74 	.word	0x52203a74
   354e8:	74657365 	.word	0x74657365
   354ec:	68742073 	.word	0x68742073
   354f0:	65642065 	.word	0x65642065
   354f4:	65636976 	.word	0x65636976
   354f8:	00000a0d 	.word	0x00000a0d
   354fc:	0064656c 	.word	0x0064656c
   35500:	2064656c 	.word	0x2064656c
   35504:	79656b5b 	.word	0x79656b5b
   35508:	5d6d756e 	.word	0x5d6d756e
   3550c:	5b5d525b 	.word	0x5b5d525b
   35510:	425b5d47 	.word	0x425b5d47
   35514:	53203a5d 	.word	0x53203a5d
   35518:	20737465 	.word	0x20737465
   3551c:	20656874 	.word	0x20656874
   35520:	65766967 	.word	0x65766967
   35524:	454c206e 	.word	0x454c206e
   35528:	6f742044 	.word	0x6f742044
   3552c:	65687420 	.word	0x65687420
   35530:	76696720 	.word	0x76696720
   35534:	52206e65 	.word	0x52206e65
   35538:	422c472c 	.word	0x422c472c
   3553c:	6c617620 	.word	0x6c617620
   35540:	2e736575 	.word	0x2e736575
   35544:	00000a0d 	.word	0x00000a0d
   35548:	62746567 	.word	0x62746567
   3554c:	6f747475 	.word	0x6f747475
   35550:	0000006e 	.word	0x0000006e
   35554:	62746567 	.word	0x62746567
   35558:	6f747475 	.word	0x6f747475
   3555c:	50203a6e 	.word	0x50203a6e
   35560:	65636f72 	.word	0x65636f72
   35564:	73657373 	.word	0x73657373
   35568:	646e6120 	.word	0x646e6120
   3556c:	69727020 	.word	0x69727020
   35570:	2073746e 	.word	0x2073746e
   35574:	20656874 	.word	0x20656874
   35578:	4f464946 	.word	0x4f464946
   3557c:	74756220 	.word	0x74756220
   35580:	206e6f74 	.word	0x206e6f74
   35584:	66667562 	.word	0x66667562
   35588:	66207265 	.word	0x66207265
   3558c:	206d6f72 	.word	0x206d6f72
   35590:	20656874 	.word	0x20656874
   35594:	73656573 	.word	0x73656573
   35598:	0d2e7761 	.word	0x0d2e7761
   3559c:	0000000a 	.word	0x0000000a
   355a0:	00736c63 	.word	0x00736c63
   355a4:	3a736c63 	.word	0x3a736c63
   355a8:	656c4320 	.word	0x656c4320
   355ac:	20737261 	.word	0x20737261
   355b0:	20656874 	.word	0x20656874
   355b4:	6d726574 	.word	0x6d726574
   355b8:	6c616e69 	.word	0x6c616e69
   355bc:	72637320 	.word	0x72637320
   355c0:	0d6e6565 	.word	0x0d6e6565
   355c4:	0000000a 	.word	0x0000000a
   355c8:	00000a0d 	.word	0x00000a0d
   355cc:	0000616f 	.word	0x0000616f
   355d0:	325b6325 	.word	0x325b6325
   355d4:	003e0d4b 	.word	0x003e0d4b
   355d8:	00082008 	.word	0x00082008
   355dc:	325b6325 	.word	0x325b6325
   355e0:	0000004a 	.word	0x0000004a
   355e4:	64757453 	.word	0x64757453
   355e8:	73746e65 	.word	0x73746e65
   355ec:	206f7420 	.word	0x206f7420
   355f0:	6c6c6966 	.word	0x6c6c6966
   355f4:	74756f20 	.word	0x74756f20
   355f8:	00000021 	.word	0x00000021
   355fc:	74747542 	.word	0x74747542
   35600:	23206e6f 	.word	0x23206e6f
   35604:	69206425 	.word	0x69206425
   35608:	65722073 	.word	0x65722073
   3560c:	7361656c 	.word	0x7361656c
   35610:	0a0d6465 	.word	0x0a0d6465
   35614:	00000000 	.word	0x00000000
   35618:	74747542 	.word	0x74747542
   3561c:	23206e6f 	.word	0x23206e6f
   35620:	69206425 	.word	0x69206425
   35624:	72702073 	.word	0x72702073
   35628:	65737365 	.word	0x65737365
   3562c:	000a0d64 	.word	0x000a0d64

00035630 <xOTAUCommand>:
   35630:	000354a4 000354a8 00013e05 00000000     .T...T...>......

00035640 <xResetCommand>:
   35640:	000354d8 000354e0 00013e25 00000000     .T...T..%>......

00035650 <xNeotrellisTurnLEDCommand>:
   35650:	000354fc 00035500 00013e45 00000004     .T...U..E>......

00035660 <xNeotrellisProcessButtonCommand>:
   35660:	00035548 00035554 00013e71 00000000     HU..TU..q>......

00035670 <xClearScreen>:
   35670:	000355a0 000355a4 00013dbd 00000000     .U...U...=......
   35680:	35455345 2d203631 6e6f4320 6c6f7274     ESE516 - Control
   35690:	696e4920 6f432074 0a0d6564 00000000      Init Code......
   356a0:	4f525245 6e492052 61697469 697a696c     ERROR Initializi
   356b0:	4320676e 72746e6f 44206c6f 20617461     ng Control Data 
   356c0:	75657571 0d217365 0000000a 454d4147     queues!.....GAME
   356d0:	444e4520 6c502021 65736165 73657220      END! Please res
   356e0:	0a0d7465 00000000 746e6f43 206c6f72     et......Control 
   356f0:	65726854 203a6461 736e6f43 64656d75     Thread: Consumed
   35700:	6d616720 61702065 74656b63 000a0d21      game packet!...
   35710:	746e6f43 206c6f72 65726854 203a6461     Control Thread: 
   35720:	6c756f43 6f6e2064 65732074 6720646e     Could not send g
   35730:	20656d61 6b636170 0d217465 0000000a     ame packet!.....
   35740:	54204955 206b7361 72617453 21646574     UI Task Started!
   35750:	00000000                                ....

00035754 <main_mqtt_broker>:
   35754:	6b6f7262 682e7265 6d657669 6f632e71     broker.hivemq.co
   35764:	0000006d 64333025 00000000 72617473     m...%03d....star
   35774:	6f645f74 6f6c6e77 203a6461 20434d4d     t_download: MMC 
   35784:	726f7473 20656761 20746f6e 64616572     storage not read
   35794:	0a0d2e79 00000000 72617473 6f645f74     y.......start_do
   357a4:	6f6c6e77 203a6461 462d6957 73692069     wnload: Wi-Fi is
   357b4:	746f6e20 6e6f6320 7463656e 0d2e6465      not connected..
   357c4:	0000000a 72617473 6f645f74 6f6c6e77     ....start_downlo
   357d4:	203a6461 75716572 20747365 73207369     ad: request is s
   357e4:	20746e65 65726c61 2e796461 00000a0d     ent already.....
   357f4:	72617473 6f645f74 6f6c6e77 203a6461     start_download: 
   35804:	6e6e7572 20676e69 6e776f64 64616f6c     running download
   35814:	726c6120 79646165 000a0d2e 72617473      already....star
   35824:	6f645f74 6f6c6e77 203a6461 646e6573     t_download: send
   35834:	20676e69 50545448 71657220 74736575     ing HTTP request
   35844:	0d2e2e2e 0000000a 70747468 2f2f3a73     ........https://
   35854:	2e777777 73616573 6570752e 652e6e6e     www.seas.upenn.e
   35864:	7e2f7564 696a7577 492f687a 622e546f     du/~wujizh/IoT.b
   35874:	00006e69 726f7473 69665f65 705f656c     in..store_file_p
   35884:	656b6361 65203a74 7974706d 74616420     acket: empty dat
   35894:	0a0d2e61 00000000 726f7473 69665f65     a.......store_fi
   358a4:	705f656c 656b6361 66203a74 20656c69     le_packet: file 
   358b4:	656d616e 20736920 61766e69 2e64696c     name is invalid.
   358c4:	776f4420 616f6c6e 61632064 6c65636e      Download cancel
   358d4:	0d2e6465 0000000a 726f7473 69665f65     ed......store_fi
   358e4:	705f656c 656b6361 63203a74 74616572     le_packet: creat
   358f4:	20676e69 656c6966 73255b20 000a0d5d     ing file [%s]...
   35904:	726f7473 69665f65 705f656c 656b6361     store_file_packe
   35914:	66203a74 20656c69 61657263 6e6f6974     t: file creation
   35924:	72726520 2021726f 3a746572 0a0d6425      error! ret:%d..
   35934:	00000000 726f7473 69665f65 705f656c     ....store_file_p
   35944:	656b6361 66203a74 20656c69 74697277     acket: file writ
   35954:	72652065 2c726f72 776f6420 616f6c6e     e error, downloa
   35964:	61632064 6c65636e 0d2e6465 0000000a     d canceled......
   35974:	726f7473 69665f65 705f656c 656b6361     store_file_packe
   35984:	72203a74 69656365 5b646576 5d756c25     t: received[%lu]
   35994:	6966202c 7320656c 5b657a69 5d756c25     , file size[%lu]
   359a4:	00000a0d 726f7473 69665f65 705f656c     ....store_file_p
   359b4:	656b6361 66203a74 20656c69 6e776f64     acket: file down
   359c4:	64616f6c 73206465 65636375 75667373     loaded successfu
   359d4:	2e796c6c 00000a0d 70747468 696c635f     lly.....http_cli
   359e4:	5f746e65 6c6c6163 6b636162 5448203a     ent_callback: HT
   359f4:	63205054 6e65696c 6f732074 74656b63     TP client socket
   35a04:	6e6f6320 7463656e 0d2e6465 0000000a      connected......
   35a14:	70747468 696c635f 5f746e65 6c6c6163     http_client_call
   35a24:	6b636162 6572203a 73657571 6f632074     back: request co
   35a34:	656c706d 2e646574 00000a0d 70747468     mpleted.....http
   35a44:	696c635f 5f746e65 6c6c6163 6b636162     _client_callback
   35a54:	6572203a 76696563 72206465 6f707365     : received respo
   35a64:	2065736e 64207525 20617461 657a6973     nse %u data size
   35a74:	0d752520 0000000a 70747468 696c635f      %u.....http_cli
   35a84:	5f746e65 6c6c6163 6b636162 6964203a     ent_callback: di
   35a94:	6e6f6373 7463656e 206e6f69 73616572     sconnection reas
   35aa4:	253a6e6f 000a0d64 6f736572 5f65766c     on:%d...resolve_
   35ab4:	203a6263 49207325 64612050 73657264     cb: %s IP addres
   35ac4:	73692073 2e642520 252e6425 64252e64     s is %d.%d.%d.%d
   35ad4:	0a0d0a0d 00000000 69666977 3a62635f     ........wifi_cb:
   35ae4:	4d324d20 4649575f 4f435f49 43454e4e      M2M_WIFI_CONNEC
   35af4:	0d444554 0000000a 69666977 3a62635f     TED.....wifi_cb:
   35b04:	4d324d20 4649575f 49445f49 4e4f4353      M2M_WIFI_DISCON
   35b14:	5443454e 0a0d4445 00000000 396a777a     NECTED......zwj9
   35b24:	32303137 72655630 6e6f7a69 00000000     71020Verizon....
   35b34:	6e6e654b 646e4179 6172694b 00000000     KennyAndKira....
   35b44:	69666977 3a62635f 20504920 72646461     wifi_cb: IP addr
   35b54:	20737365 25207369 75252e75 2e75252e     ess is %u.%u.%u.
   35b64:	0a0d7525 00000000 6f727245 6f632072     %u......Error co
   35b74:	63656e6e 676e6974 206f7420 5454514d     nnecting to MQTT
   35b84:	6f724220 2172656b 00000a0d 74696e69      Broker!....init
   35b94:	6f74735f 65676172 6c70203a 65736165     _storage: please
   35ba4:	756c7020 6e612067 2f445320 20434d4d      plug an SD/MMC 
   35bb4:	64726163 206e6920 746f6c73 0d2e2e2e     card in slot....
   35bc4:	0000000a 74696e69 6f74735f 65676172     ....init_storage
   35bd4:	4453203a 72614320 6e692064 6c617473     : SD Card instal
   35be4:	6166206c 64656c69 000a0d2e 74696e69     l failed....init
   35bf4:	6f74735f 65676172 7274203a 6e752079     _storage: try un
   35c04:	67756c70 646e6120 2d657220 67756c70     plug and re-plug
   35c14:	65687420 72616320 0a0d2e64 00000000      the card.......
   35c24:	74696e69 6f74735f 65676172 6f6d203a     init_storage: mo
   35c34:	69746e75 5320676e 61632044 2e2e6472     unting SD card..
   35c44:	000a0d2e 74696e69 6f74735f 65676172     ....init_storage
   35c54:	4453203a 72616320 6f6d2064 20746e75     : SD card mount 
   35c64:	6c696166 20216465 73657228 29642520     failed! (res %d)
   35c74:	00000a0d 74696e69 6f74735f 65676172     ....init_storage
   35c84:	4453203a 72616320 6f6d2064 20746e75     : SD card mount 
   35c94:	0d2e4b4f 0000000a 666e6f63 72756769     OK......configur
   35ca4:	74685f65 635f7074 6e65696c 48203a74     e_http_client: H
   35cb4:	20505454 65696c63 6920746e 6974696e     TTP client initi
   35cc4:	7a696c61 6f697461 6166206e 64656c69     alization failed
   35cd4:	72282021 25207365 0a0d2964 00000000     ! (res %d)......
   35ce4:	25200a0d 00732a2e 74617473 003a7375     .. %.*s.status:.
   35cf4:	54530a0d 53555441 63655220 65766965     ..STATUS Receive
   35d04:	0a0d6425 00000000 65530a0d 7320746e     %d........Sent s
   35d14:	75746174 6f742073 6e6f6320 6c6f7274     tatus to control
   35d24:	000a0d21 6167227b 3a22656d 0000005b     !...{"game":[...
   35d34:	61470a0d 6d20656d 61737365 72206567     ..Game message r
   35d44:	69656365 21646576 00000a0d 732a2e25     eceived!....%.*s
   35d54:	00000000 61500a0d 64657372 6d6f4320     ......Parsed Com
   35d64:	646e616d 0000203a 002c6425 65530a0d     mand: ..%d,...Se
   35d74:	7020746e 2079616c 63206f74 72746e6f     nt play to contr
   35d84:	0d216c6f 0000000a 61470a0d 6d20656d     ol!.......Game m
   35d94:	61737365 72206567 69656365 20646576     essage received 
   35da4:	20747562 20746f6e 65646e75 6f747372     but not understo
   35db4:	0d21646f 0000000a 6f430a0d 63656e6e     od!.......Connec
   35dc4:	676e6974 206f7420 6b6f7242 2e2e7265     ting to Broker..
   35dd4:	0000002e 35455345 6f563631 6f6f646f     ....ESE516Voodoo
   35de4:	6967616d 00003263 646f6f76 616d6f6f     magic2..voodooma
   35df4:	32636967 00000000 5454514d 72452020     gic2....MQTT  Er
   35e04:	20726f72 4f4e202d 6f432054 63656e6e     ror - NOT Connec
   35e14:	20646574 62206f74 656b6f72 000a0d72     ted to broker...
   35e24:	5454514d 6e6f4320 7463656e 74206465     MQTT Connected t
   35e34:	7262206f 72656b6f 00000a0d 6e6e6f43     o broker....Conn
   35e44:	20746365 6c696166 206f7420 76726573     ect fail to serv
   35e54:	25287265 20212973 72746572 74692079     er(%s)! retry it
   35e64:	74756120 74616d6f 6c616369 0d2e796c      automatically..
   35e74:	0000000a 475f3150 5f454d41 646f6f56     ....P1_GAME_Vood
   35e84:	614d6f6f 5f636967 00003054 535f3150     ooMagic_T0..P1_S
   35e94:	73757461 6f6f565f 4d6f6f64 63696761     atus_VoodooMagic
   35ea4:	0030545f 5454514d 6e6f4320 7463656e     _T0.MQTT Connect
   35eb4:	0a0d6465 00000000 5454514d 6f726220     ed......MQTT bro
   35ec4:	2072656b 6c636564 20656e69 72756f79     ker decline your
   35ed4:	63636120 21737365 72726520 6320726f      access! error c
   35ee4:	2065646f 0a0d6425 00000000 5454514d     ode %d......MQTT
   35ef4:	73696420 6e6e6f63 65746365 000a0d64      disconnected...
   35f04:	5454514d 696e6920 6c616974 74617a69     MQTT initializat
   35f14:	206e6f69 6c696166 202e6465 6f727245     ion failed. Erro
   35f24:	6f632072 69206564 25282073 0a0d2964     r code is (%d)..
   35f34:	00000000 5454514d 67657220 65747369     ....MQTT registe
   35f44:	61632072 61626c6c 66206b63 656c6961     r callback faile
   35f54:	45202e64 726f7272 646f6320 73692065     d. Error code is
   35f64:	64252820 000a0d29 4941465b 72205d4c      (%d)...[FAIL] r
   35f74:	25207365 000a0d64 61647055 742e6574     es %d...Update.t
   35f84:	61207478 64656464 000a0d21 70553a30     xt added!...0:Up
   35f94:	65746164 7478742e 00000000 6e6e6f43     date.txt....Conn
   35fa4:	65746365 6f742064 54514d20 72422054     ected to MQTT Br
   35fb4:	72656b6f 000a0d21 00006425 00007d5d     oker!...%d..]}..
   35fc4:	00000a0d 475f3250 5f454d41 646f6f56     ....P2_GAME_Vood
   35fd4:	614d6f6f 5f636967 00003054 4f525245     ooMagic_T0..ERRO
   35fe4:	6e492052 61697469 697a696c 5720676e     R Initializing W
   35ff4:	20696669 61746144 65757120 21736575     ifi Data queues!
   36004:	00000a0d 35455345 2d203631 66695720     ....ESE516 - Wif
   36014:	6e492069 43207469 0d65646f 0000000a     i Init Code.....
   36024:	6e69616d 326d203a 69775f6d 695f6966     main: m2m_wifi_i
   36034:	2074696e 6c6c6163 72726520 2021726f     nit call error! 
   36044:	73657228 29642520 00000a0d 6e69616d     (res %d)....main
   36054:	6f63203a 63656e6e 676e6974 206f7420     : connecting to 
   36064:	69466957 20504120 2e2e7325 000a0d2e     WiFi AP %s......
   36074:	00014d2c 00014d38 00014d4a 00014da0     ,M..8M..JM...M..
   36084:	00014dc0                                .M..

00036088 <font5x7>:
   36088:	ff000805 00004b0c 3e000000 3e5b4f5b     .....K.....>[O[>
   36098:	6b4f6b3e 7c3e1c3e 3c181c3e 1c183c7e     >kOk>.>|>..<~<..
   360a8:	1c577d57 5e7f5e1c 3c18001c e7ff0018     W}W..^.^...<....
   360b8:	00ffe7c3 00182418 e7dbe7ff 3a4830ff     .....$.......0H:
   360c8:	29260e06 40262979 0705057f 25057f40     ..&)y)&@....@..%
   360d8:	e73c5a3f 3e7f5a3c 08081c1c 7f3e1c1c     ?Z<.<Z.>......>.
   360e8:	227f2214 005f5f14 09065f5f 007f017f     .".".__.__......
   360f8:	6a958966 60606060 ffa29460 040894a2     f..j`````.......
   36108:	1008047e 10207e20 1c2a0808 2a1c0808     ~... ~ ...*....*
   36118:	101e0808 0c101010 0c1e0c1e 383e3830     ............08>8
   36128:	3e0e0630 0000060e 00000000 00005f00     0..>........._..
   36138:	07000700 147f1400 2a24147f 23122a7f     ..........$*.*.#
   36148:	62640813 20564936 07080050 1c000003     ..db6IV P.......
   36158:	00004122 001c2241 1c7f1c2a 3e08082a     "A..A"..*...*..>
   36168:	80000808 08003070 08080808 60600000     ....p0........``
   36178:	08102000 513e0204 003e4549 00407f42     . ....>QIE>.B.@.
   36188:	49494972 49412146 1418334d 27107f12     rIIIF!AIM3.....'
   36198:	39454545 49494a3c 11214131 49360709     EEE9<JII1A!...6I
   361a8:	46364949 1e294949 00140000 34400000     II6FII).......@4
   361b8:	08000000 14412214 14141414 14224100     ....."A......A".
   361c8:	59010208 413e0609 7c4e595d 7c121112     ...Y..>A]YN|...|
   361d8:	4949497f 41413e36 417f2241 7f3e4141     .III6>AAA".AAA>.
   361e8:	41494949 0909097f 41413e01 087f7351     IIIA.....>AAQs..
   361f8:	007f0808 00417f41 3f414020 14087f01     ....A.A. @A?....
   36208:	407f4122 7f404040 7f021c02 1008047f     "A.@@@@.........
   36218:	41413e7f 097f3e41 3e060909 5e215141     .>AAA>.....>AQ!^
   36228:	2919097f 49492646 01033249 3f03017f     ...)F&III2.....?
   36238:	3f404040 2040201f 38403f1f 14633f40     @@@?. @ .?@8@?c.
   36248:	03631408 03047804 4d495961 417f0043     ..c..x..aYIMC..A
   36258:	04024141 00201008 7f414141 02010204     AA.... .AAA.....
   36268:	40404004 03004040 20000807 40785454     .@@@@@..... TTx@
   36278:	4444287f 44443838 44382844 387f2844     .(DD88DDD(8DD(.8
   36288:	18545454 097e0800 a4a41802 087f789c     TTT...~......x..
   36298:	00780404 00407d44 3d404020 28107f00     ..x.D}@. @@=...(
   362a8:	41000044 7c00407f 78047804 0404087c     D..A.@.|.x.x|...
   362b8:	44443878 18fc3844 18182424 fc182424     x8DDD8..$$..$$..
   362c8:	0404087c 54544808 04042454 3c24443f     |....HTTT$..?D$<
   362d8:	7c204040 2040201c 30403c1c 28443c40     @@ |. @ .<@0@<D(
   362e8:	4c442810 7c909090 4c546444 36080044     .(DL...|DdTLD..6
   362f8:	00000041 00000077 00083641 04020102     A...w...A6......
   36308:	23263c02 a11e3c26 3a1261a1 7a204040     .<&#&<...a.:@@ z
   36318:	55545438 55552159 54214179 21417854     8TTUY!UUyA!TTxA!
   36328:	40785455 79555420 521e0c40 55391272     UTx@ TUy@..Rr.9U
   36338:	39595555 59545454 54545539 45000058     UUY9TTTY9UTTX..E
   36348:	0200417c 00427d45 407c4501 292429f0     |A..E}B..E|@.)$)
   36358:	2528f0f0 547cf028 20004555 547c5454     ..(%(.|TUE. TT|T
   36368:	7f090a7c 49493249 48323249 32324848     |...I2III22HHH22
   36378:	3048484a 2141413a 40423a7a 9d007820     JHH0:AA!z:B@ x..
   36388:	397da0a0 39444444 4040403d ff243c3d     ..}9DDD9=@@@=<$.
   36398:	7e482424 2b664349 2b2ffc2f f62909ff     $$H~ICf+/./+..).
   363a8:	7e88c020 54200309 00417954 417d4400      ..~.. TTyA..D}A
   363b8:	4a484830 40403832 7a007a22 7d720a0a     0HHJ28@@"z.z..r}
   363c8:	7d31190d 2f292926 29292628 48302629     ..1}&))/(&)))&0H
   363d8:	3820404d 08080808 08080808 c8102f38     M@ 8........8/..
   363e8:	102fbaac 00fa3428 00007b00 142a1408     ../.(4...{....*.
   363f8:	2a142222 00aa0814 aaaa0055 aa55aa55     "".*....U...U.U.
   36408:	ff000000 10101000 141400ff 1000ff14     ................
   36418:	ff00ff10 10f01010 141414f0 141400fc     ................
   36428:	00ff00f7 ff00ff00 04f41414 171414fc     ................
   36438:	10101f10 141f101f 001f1414 f0101010     ................
   36448:	00000000 1010101f 10101f10 10f01010     ................
   36458:	ff000000 10101010 10101010 0010ff10     ................
   36468:	14ff0000 00ff0000 1f0000ff 00001710     ................
   36478:	14f404fc 17101714 04f41414 ff0000f4     ................
   36488:	1414f700 14141414 f700f714 17141414     ................
   36498:	1f101014 14141f10 1014f414 f010f010     ................
   364a8:	101f0000 0000001f 0000141f 0014fc00     ................
   364b8:	f010f000 10ff1010 141414ff 101014ff     ................
   364c8:	00001f10 10f00000 ffffffff f0f0f0ff     ................
   364d8:	fffff0f0 000000ff ffff0000 0f0f0f0f     ................
   364e8:	4444380f 2a7c4438 7e143e2a 06060202     .8DD8D|**>.~....
   364f8:	7e027e02 49556302 44386341 40043c44     .~.~.cUIAc8DD<.@
   36508:	201e207e 027e0206 e7a59902 2a1c99a5     ~ . ..~........*
   36518:	4c1c2a49 4c720172 4d4d4a30 78483030     I*.Lr.rL0JMM00Hx
   36528:	62bc3048 3e3d465a 00494949 0101017e     H0.bZF=>III.~...
   36538:	2a2a2a7e 44442a2a 4044445f 40444a51     ~*****DD_DD@QJD@
   36548:	514a4440 ff000040 80e00301 080000ff     @DJQ@...........
   36558:	086b6b08 24361236 090f0636 0000060f     .kk.6.6$6.......
   36568:	00001818 00101000 01ff4030 011f0001     ........0@......
   36578:	19001e01 0012171d 3c3c3c3c 00000000     ........<<<<....
   36588:	00000000                                ....

0003658c <font8x16>:
   3658c:	60201008 00003802 00000000 00000000     .. `.8..........
   3659c:	0000fe00 00000000 000e000e d0000000     ................
   365ac:	bed090be 1c000090 80c2ff62 120c0000     ........b.......
   365bc:	88b04c92 7c800006 c01cb262 00000000     .L.....|b.......
   365cc:	00000e0e e0000000 02020418 02000000     ................
   365dc:	e0180402 24000000 24187e18 80800000     .......$.~.$....
   365ec:	8080f080 00000080 00000000 80000000     ................
   365fc:	00808080 00000000 00000000 00000000     ................
   3660c:	06186080 04f80000 f80c32c2 04000000     .`.......2......
   3661c:	0000fe04 02000000 1c224282 02000000     .........B".....
   3662c:	dc222222 a0c00000 80fe8498 1e000080     """.............
   3663c:	c2221212 44f80000 c0222222 02000000     .."....D""".....
   3664c:	0a32c202 8c000006 8c522252 423c0000     ..2.....R"R...<B
   3665c:	f8264242 00000000 00003030 00000000     BB&.....00......
   3666c:	00003030 80800000 20204040 40400010     00......@@  ..@@
   3667c:	40404040 20100000 80404020 02000080     @@@@...  @@.....
   3668c:	1c224282 00000000 00000000 00000000     .B".............
   3669c:	00000500 00000000 00000000 07000000     ................
   366ac:	00070000 04000000 03040f04 02040000     ................
   366bc:	04040301 04030003 03050404 00000004     ................
   366cc:	00000000 03000000 10100806 10000000     ................
   366dc:	03060810 00000000 00000000 00000000     ................
   366ec:	00000700 00000000 00000e16 00000000     ................
	...
   36704:	00000606 02040000 00000001 03010000     ................
   36714:	01020404 04000000 04040704 07000000     ................
   36724:	04040404 04000000 03040404 00000000     ................
   36734:	00070000 04000000 03040404 02010000     ................
   36744:	03040404 00000000 00000007 03000000     ................
   36754:	03040404 04000000 01020404 00000000     ................
   36764:	00000606 00000000 00000e16 00000000     ................
   36774:	02020101 01010004 01010101 02040000     ................
   36784:	00010102 00000000 00000005 04f80000     ................
   36794:	84fa8a72 c0000078 c0380638 fe000000     r...x...8.8.....
   367a4:	dc222222 04f80000 02020202 02fe0000     """.............
   367b4:	f8040202 fe000000 22222222 fe000000     ........""""....
   367c4:	22222222 04f80000 e2220202 20fe0000     """"......".... 
   367d4:	fe202020 02000000 0202fe02 00000000        .............
   367e4:	fe020200 40fe0000 020408b0 fe000000     .......@........
   367f4:	00000000 0cfe0000 0c708070 0cfe00fe     ........p.p.....
   36804:	fe00c030 04f80000 f8040202 42fe0000     0..............B
   36814:	1c224242 04f80000 f8040202 fe000000     BB".............
   36824:	1ca24242 1c000000 80424222 02020000     BB......"BB.....
   36834:	0202fe02 00fe0002 fe000000 38060000     ...............8
   36844:	38c000c0 c03e0006 c0f00ef0 0600003e     ...8..>.....>...
   36854:	06986098 06000000 0618e018 02020000     .`..............
   36864:	060a32c2 00000000 020202fe 06000002     .2..............
   36874:	00806018 02020000 00fe0202 30400000     .`............@0
   36884:	40300c0c 00000000 00000000 02010000     ..0@............
   36894:	00040404 01060000 01010101 07000006     ................
   368a4:	03040404 02010000 04040404 04070000     ................
   368b4:	01020404 07000000 04040404 07000000     ................
   368c4:	00000000 02010000 07040404 00070000     ................
   368d4:	07000000 04000000 04040704 04000000     ................
   368e4:	03040404 00070000 04020100 07000000     ................
   368f4:	04040404 00070000 00000100 00070007     ................
   36904:	07030000 02010000 01020404 00070000     ................
   36914:	00000000 02010000 11120c04 07000010     ................
   36924:	06010000 04000000 03040404 00000000     ................
   36934:	00000700 04030000 03040404 00000000     ................
   36944:	00010601 07000000 07000000 06000000     ................
   36954:	06010001 00000000 00000700 05060000     ................
   36964:	04040404 00000000 1010101f 00000010     ................
   36974:	02010000 10100004 001f1010 00000000     ................
   36984:	00000000 08080000 08080808 00000000     ................
   36994:	00000402 e0000000 f0101010 fe000000     ................
   369a4:	e0101020 e0000000 10101010 e0000000      ...............
   369b4:	fe101010 e0000000 e0909090 20000000     ............... 
   369c4:	222222fc e0000002 f0101010 fe000000     ."""............
   369d4:	e0101020 10100000 000000f2 10000000      ...............
   369e4:	00f21010 fe000000 10204080 02000000     .........@ .....
   369f4:	0000fe02 20f00000 1020f010 f00000f0     ....... .. .....
   36a04:	e0101020 e0000000 e0101010 f0000000      ...............
   36a14:	e0101020 e0000000 f0101010 f0000000      ...............
   36a24:	70101020 60000000 20909090 20000000      ..p...`... ... 
   36a34:	2020fc20 f0000020 f0000000 70000000      .   ..........p
   36a44:	70800080 00f00000 00c030c0 300000f0     ...p.....0.....0
   36a54:	0030c0c0 30000000 708000c0 10000000     ..0....0...p....
   36a64:	30509010 80000000 02027e80 00000000     ..P0.....~......
   36a74:	0000fe00 02000000 80807e02 80000000     .........~......
   36a84:	00000080 00000080 00000000 00000000     ................
   36a94:	00000000 03000000 07020404 07000000     ................
   36aa4:	03040404 03000000 04040404 03000000     ................
   36ab4:	07020404 03000000 04040404 00000000     ................
   36ac4:	00000007 33000000 1f222424 07000000     .......3$$".....
   36ad4:	07000000 00000000 00040407 20200000     ..............  
   36ae4:	001f2020 07000000 04020100 00000000       ..............
   36af4:	04040700 00070000 00000700 07000007     ................
   36b04:	07000000 03000000 03040404 3f000000     ...............?
   36b14:	03040404 03000000 3f020404 07000000     ...........?....
   36b24:	00000000 02000000 03040404 00000000     ................
   36b34:	04040300 03000004 07020404 00000000     ................
   36b44:	00030403 06010000 06010001 06000001     ................
   36b54:	00060101 20200000 00030e31 06000000     ......  1.......
   36b64:	04040405 00000000 10101f00 00000000     ................
   36b74:	00000700 10000000 00001f10 00010000     ................
   36b84:	01010100 00000000 00000000 00000000     ................

00036b94 <sevensegment>:
   36b94:	0d2e100a 00001e01 00000000 00000000     ................
	...
   36bac:	fc780000 03030302 78fc0203 00000000     ..x........x....
   36bbc:	00000000 00007eff 83838302 78fc0283     .....~.........x
   36bcc:	83020000 02838383 ff7e78fc 80808000     .........x~.....
   36bdc:	7eff0080 8302fc78 02838383 fc780000     ...~x.........x.
   36bec:	83838302 00000283 03030200 02030303     ................
   36bfc:	fc7878fc 83838302 78fc0283 8302fc78     .xx........xx...
   36c0c:	02838383 000078fc 3c180000 0000183c     .....x.....<<...
   36c1c:	60000000 0060f0f0 00000000 00000000     ...`..`.........
   36c2c:	00000000 c0403f1e 40c0c0c0 00001e3f     .....?@....@?...
   36c3c:	00000000 7eff0000 c1413e1c 41c1c1c1     .......~.>A....A
   36c4c:	00000000 c1c1c141 1c3e41c1 01010000     ....A....A>.....
   36c5c:	01010101 00007eff c1c1c141 1c3e41c1     .....~..A....A>.
   36c6c:	c1413e1c 41c1c1c1 00001c3e 00000000     .>A....A>.......
   36c7c:	7eff0000 c1413e1c 41c1c1c1 00001c3e     ...~.>A....A>...
   36c8c:	c1c1c141 1c3e41c1 00000000 183c3c18     A....A>......<<.
   36c9c:	00000000                                ....

00036ca0 <fontlargenumber>:
   36ca0:	0b30300c c0002001 3e3e7cf8 00c0f8fc     .00.. ...|>>....
   36cb0:	00000000 fe78e080 000000fe f0000000     ......x.........
   36cc0:	3e3e3c7c 00e0fcfe 7c000000 fe3e3e3e     |<>>.......|>>>.
   36cd0:	0000c0f8 00000000 f8000000 0000fefe     ................
   36ce0:	fe000000 3e3e3efe 00003e3e 00000000     .....>>>>>......
   36cf0:	3efcf080 00fc3e3e 3e000000 3e3e3e3e     ...>>>.....>>>>>
   36d00:	fefe3e3e 00000000 3efef8c0 00e0fc7e     >>.........>~...
   36d10:	00000000 3e7efce0 00c0f8fe 00000000     ......~>........
   36d20:	e0c00000 000000c0 fff00000 0000000f     ................
   36d30:	f0fffff9 00000000 ff000307 000000ff     ................
   36d40:	01000000 00000000 00ffff00 00000000     ................
   36d50:	00000000 0000ffff 00000000 1fffe000     ................
   36d60:	0000ffff ff000000 000000ff 00000000     ................
   36d70:	e0000000 00003fff 00000000 00000000     .....?..........
   36d80:	00000000 037ffcc0 00000000 0000ffff     ................
   36d90:	00ffff00 fe000000 000003ff f0ffff00     ................
   36da0:	00000000 7f3f0000 0000003f ffff0000     ......?.?.......
   36db0:	ffe00000 ffff001f 00000000 ff000000     ................
   36dc0:	000000ff 00000000 e0000000 00011ffe     ................
   36dd0:	00000000 fffcf8f8 000000c7 c0000000     ................
   36de0:	00033ffe 0000ffff 3f000000 fc7e3e3f     .?.........??>~.
   36df0:	0000e0f8 ff000000 7cf080ff 00f0f87c     ...........||...
   36e00:	00000000 f8800000 000007ff 00000000     ................
   36e10:	f8ff9f01 00011ffe ff000000 0000c0ff     ................
   36e20:	ffffff80 00000000 00000000 00000000     ................
   36e30:	ffff0000 037ffcc0 ffff0000 00000000     ................
   36e40:	ff000000 000000ff 00000000 0ffee000     ................
   36e50:	00000001 00000000 01000000 00f8ff0f     ................
   36e60:	fff80000 e0e0e0e7 e0e0ffff 000000e0     ................
   36e70:	00000000 00feff07 ff000000 0003ffff     ................
   36e80:	ffff0100 00000000 0ffff000 00000000     ................
   36e90:	c0000000 03033ffc c0fcff1f 00000000     .....?..........
   36ea0:	3e3e1f0f ffff010f 00000000 80000000     ..>>............
   36eb0:	00000000 ff070000 000007ff 07fffc00     ................
   36ec0:	00000000 ff000000 000000ff e0000000     ................
   36ed0:	00000ffe 00000000 00000000 00000000     ................
   36ee0:	007fffc0 03030000 03030303 0303ffff     ................
   36ef0:	00000003 00000000 007fffc0 0f000000     ................
   36f00:	0080ffff 7fff8000 00000000 0003fffe     ................
   36f10:	00000000 ff000000 000080ff ffff8000     ................
	...
   36f28:	07fffc80 00000000 ffff0000 000000ff     ................
   36f38:	03000000 7c7c3f1f 00031f3f 00000000     .....?||?.......
   36f48:	7f7c7c7c 7c7c7c7f 7f000000 7c7c7c7f     |||..|||.....|||
   36f58:	007c7c7c 3f000000 7e7c7c7e 0000071f     |||....?~||~....
	...
   36f70:	00007f7f 1f000000 3e7c7c3e 0000071f     ........>||>....
   36f80:	00000000 7c7f1f03 00073f7c 00000000     .......||?......
   36f90:	00007f7f 00000000 01000000 7c7e3f1f     .............?~|
   36fa0:	011f3f7e 00000000 7e7c7c3e 00010f3f     ~?......>||~?...
   36fb0:	00000000 01000000 00000000 00000000     ................

00036fc0 <winner>:
   36fc0:	fe000000 000000fe fe000000 000000fe     ................
   36fd0:	00000000 00f8fe0e 7ee00000 00c0fe3e     ...........~>...
   36fe0:	3efc8000 fe000002 000000fe 0efefe00     ...>............
   36ff0:	0080e038 00fefe00 ff000000 000000ff     8...............
   37000:	07000000 3030181f 1f183030 00000007     ......0000......
   37010:	00000000 3f0f0000 000f3e38 3c1f0100     .......?8>.....<
   37020:	00033f38 3f000000 0000003f 003f3f00     8?.....??....??.
   37030:	1e030000 003f3f38 3b000000 0000003b     ....8??....;;...
	...

00037140 <loser>:
   37140:	c0000000 00000080 00000000 000000c0     ................
   37150:	00000000 0000c000 00000000 80000000     ................
   37160:	80800080 00008000 00000000 80408000     ..............@.
   37170:	00000080 00c08000 8040c000 00000000     ..........@.....
   37180:	86000000 0000003b 39000000 000000e6     ....;......9....
   37190:	00000000 0000ff00 00000000 01b23c00     .............<..
   371a0:	00000000 d2f00000 05000000 20180805     ............... 
   371b0:	00008060 10edab00 00180008 00000000     `...............
   371c0:	00000000 04000100 00020004 00000000     ................
   371d0:	00000000 00060600 00040202 03010000     ................
   371e0:	04060200 00010200 00000000 00000202     ................
   371f0:	00000102 04040200 02000406 00000000     ................
	...

000372c0 <Turns>:
   372c0:	20000000 00000080 00004040 00000000     ... ....@@......
	...
   37304:	02640601 00000001 8140422c 00286402     ..d.....,B@..d(.
   37314:	c0405300 00164000 004a0000 00000102     .S@..@....J.....
	...
   37380:	08000000 0ca8b404 00000804 00000040     ............@...
   37390:	0000a000 4000a000 80400000 80604040     .......@..@.@@`.
   373a0:	00000080 00000000 00000000 00000000     ................
	...
   373c4:	00090b00 00000000 0808100a 00000a00     ................
   373d4:	00001a00 0d080000 04000000 00000016     ................
	...

00037440 <WAIT>:
   37440:	20000000 00000080 00e03080 e0000000     ... .....0......
   37450:	00000010 40303080 00000000 00009000     .....00@........
   37460:	00301020 00301010 00000000 00000000      .0...0.........
	...
   37484:	50003405 17000002 00080040 0e700000     .4.P....@.....p.
   37494:	0904000d 00002802 00002e00 1d000000     .....(..........
	...
   375c0:	6f727245 6e692072 61697469 697a696c     Error initializi
   375d0:	4f20676e 2144454c 00000a0d 44454c4f     ng OLED!....OLED
   375e0:	72755420 2064656e 2166666f 00000a0d      Turned off!....
   375f0:	6f727245 6e692072 61697469 697a696c     Error initializi
   37600:	4f20676e 2044454c 636f6c63 0a0d216b     ng OLED clock!..
   37610:	00000000 44454c4f 6f6c6320 73206b63     ....OLED clock s
   37620:	0d217465 0000000a                       et!.....

00037628 <msgBaseGetHWID>:
   37628:	00000100                                ....

0003762c <msgNeopixelPin>:
   3762c:	0003010e                                ....

00037630 <msgNeopixelSpeed>:
   37630:	0001020e                                ....

00037634 <msgNeopixelBufLength>:
   37634:	3000030e                                ...0

00037638 <msgKeypadEnableInt>:
   37638:	00010210                                ....

0003763c <msgKeypadGetCount>:
   3763c:	00000410 6f727245 6e692072 61697469     ....Error initia
   3764c:	697a696c 5320676e 61736565 722f2177     lizing Seesaw!/r
   3765c:	00006e2f 6f727245 2f722f72 0000006e     /n..Error/r/n...
   3766c:	6e756f46 65532064 77617365 2f722f21     Found Seesaw!/r/
   3767c:	0000006e 6c756f43 6f6e2064 72772074     n...Could not wr
   3768c:	20657469 73656553 70207761 2f216e69     ite Seesaw pin!/
   3769c:	006e2f72 6c756f43 6f6e2064 65732074     r/n.Could not se
   376ac:	65732074 77617365 6f654e20 65786970     t seesaw Neopixe
   376bc:	7073206c 21646565 6e2f722f 00000000     l speed!/r/n....
   376cc:	6c756f43 6f6e2064 65732074 65732074     Could not set se
   376dc:	77617365 6f654e20 65786970 756e206c     esaw Neopixel nu
   376ec:	7265626d 20666f20 69766564 2f736563     mber of devices/
   376fc:	006e2f72 6f727245 65722072 6e696461     r/n.Error readin
   3770c:	65532067 77617365 756f6320 2173746e     g Seesaw counts!
   3771c:	6e2f722f 00000000 00001010 0000050e     /r/n............
   3772c:	6c756f43 6f6e2064 6e692074 61697469     Could not initia
   3773c:	657a696c 79654b20 21646170 6e2f722f     lize Keypad!/r/n
   3774c:	00000000 706c6568 00000000 65680a0d     ....help......he
   3775c:	0d3a706c 694c200a 20737473 206c6c61     lp:.. Lists all 
   3776c:	20656874 69676572 72657473 63206465     the registered c
   3777c:	616d6d6f 0d73646e 000a0d0a 6f636e49     ommands.....Inco
   3778c:	63657272 6f632074 6e616d6d 61702064     rrect command pa
   3779c:	656d6172 28726574 202e2973 746e4520     rameter(s).  Ent
   377ac:	22207265 706c6568 6f742022 65697620     er "help" to vie
   377bc:	20612077 7473696c 20666f20 69617661     w a list of avai
   377cc:	6c62616c 6f632065 6e616d6d 0d2e7364     lable commands..
   377dc:	000a0d0a 6d6d6f43 20646e61 20746f6e     ....Command not 
   377ec:	6f636572 73696e67 202e6465 746e4520     recognised.  Ent
   377fc:	27207265 706c6568 6f742027 65697620     er 'help' to vie
   3780c:	20612077 7473696c 20666f20 69617661     w a list of avai
   3781c:	6c62616c 6f632065 6e616d6d 0d2e7364     lable commands..
   3782c:	000a0d0a                                ....

00037830 <xHelpCommand>:
   37830:	00037750 00037758 00017d7d 00000000     Pw..Xw..}}......
   37840:	61725476 6e456563 656c6261 43525428     vTraceEnable(TRC
   37850:	4154535f 415f5452 54494157 534f485f     _START_AWAIT_HOS
   37860:	6e202954 6120746f 776f6c6c 69206465     T) not allowed i
   37870:	6e53206e 68737061 6d20746f 0065646f     n Snapshot mode.
   37880:	78656e55 74636570 61206465 6d756772     Unexpected argum
   37890:	20746e65 76206f74 63617254 616e4565     ent to vTraceEna
   378a0:	20656c62 616e7328 6f687370 6f6d2074     ble (snapshot mo
   378b0:	00296564 74437a54 00006c72 20746f4e     de).TzCtrl..Not 
   378c0:	756f6e65 54206867 204b5341 646e6168     enough TASK hand
   378d0:	2073656c 6e69202d 61657263 54206573     les - increase T
   378e0:	435f4352 4e5f4746 4b534154 206e6920     RC_CFG_NTASK in 
   378f0:	53637274 7370616e 43746f68 69666e6f     trcSnapshotConfi
   37900:	00682e67 20746f4e 756f6e65 49206867     g.h.Not enough I
   37910:	68205253 6c646e61 2d207365 636e6920     SR handles - inc
   37920:	73616572 52542065 46435f43 494e5f47     rease TRC_CFG_NI
   37930:	69205253 7274206e 616e5363 6f687370     SR in trcSnapsho
   37940:	6e6f4374 2e676966 00000068 20746f4e     tConfig.h...Not 
   37950:	756f6e65 53206867 50414d45 45524f48     enough SEMAPHORE
   37960:	6e616820 73656c64 69202d20 6572636e      handles - incre
   37970:	20657361 5f435254 5f474643 4d45534e     ase TRC_CFG_NSEM
   37980:	4f485041 69204552 7274206e 616e5363     APHORE in trcSna
   37990:	6f687370 6e6f4374 2e676966 00000068     pshotConfig.h...
   379a0:	20746f4e 756f6e65 4d206867 58455455     Not enough MUTEX
   379b0:	6e616820 73656c64 69202d20 6572636e      handles - incre
   379c0:	20657361 5f435254 5f474643 54554d4e     ase TRC_CFG_NMUT
   379d0:	69205845 7274206e 616e5363 6f687370     EX in trcSnapsho
   379e0:	6e6f4374 2e676966 00000068 20746f4e     tConfig.h...Not 
   379f0:	756f6e65 51206867 45554555 6e616820     enough QUEUE han
   37a00:	73656c64 69202d20 6572636e 20657361     dles - increase 
   37a10:	5f435254 5f474643 4555514e 69204555     TRC_CFG_NQUEUE i
   37a20:	7274206e 616e5363 6f687370 6e6f4374     n trcSnapshotCon
   37a30:	2e676966 00000068 20746f4e 756f6e65     fig.h...Not enou
   37a40:	54206867 52454d49 6e616820 73656c64     gh TIMER handles
   37a50:	69202d20 6572636e 20657361 5f435254      - increase TRC_
   37a60:	5f474643 4d49544e 69205245 7274206e     CFG_NTIMER in tr
   37a70:	616e5363 6f687370 6e6f4374 2e676966     cSnapshotConfig.
   37a80:	00000068 20746f4e 756f6e65 45206867     h...Not enough E
   37a90:	544e4556 554f5247 61682050 656c646e     VENTGROUP handle
   37aa0:	202d2073 72636e69 65736165 43525420     s - increase TRC
   37ab0:	4746435f 56454e5f 47544e45 50554f52     _CFG_NEVENTGROUP
   37ac0:	206e6920 53637274 7370616e 43746f68      in trcSnapshotC
   37ad0:	69666e6f 00682e67 20746f4e 756f6e65     onfig.h.Not enou
   37ae0:	53206867 41455254 4655424d 20524546     gh STREAMBUFFER 
   37af0:	646e6168 2073656c 6e69202d 61657263     handles - increa
   37b00:	54206573 435f4352 4e5f4746 45525453     se TRC_CFG_NSTRE
   37b10:	55424d41 52454646 206e6920 53637274     AMBUFFER in trcS
   37b20:	7370616e 43746f68 69666e6f 00682e67     napshotConfig.h.
   37b30:	20746f4e 756f6e65 4d206867 41535345     Not enough MESSA
   37b40:	55424547 52454646 6e616820 73656c64     GEBUFFER handles
   37b50:	69202d20 6572636e 20657361 5f435254      - increase TRC_
   37b60:	5f474643 53454d4e 45474153 46465542     CFG_NMESSAGEBUFF
   37b70:	69205245 7274206e 616e5363 6f687370     ER in trcSnapsho
   37b80:	6e6f4374 2e676966 00000068 547a7370     tConfig.h...pszT
   37b90:	65636172 45746547 726f7272 646e6148     raceGetErrorHand
   37ba0:	3a73656c 766e4920 64696c61 6a626f20     les: Invalid obj
   37bb0:	63746365 7373616c 00000021 000184a2     ectclass!.......
   37bc0:	0001849a 0001849e 00018492 00018496     ................
   37bd0:	000184a6 000184aa 000184ae 000184b2     ................
   37be0:	43415254 53415f45 54524553 6552203a     TRACE_ASSERT: Re
   37bf0:	64726f63 6e207265 6920746f 6974696e     corder not initi
   37c00:	7a696c61 202e6465 20657355 61725476     alized. Use vTra
   37c10:	6e456563 656c6261 69202928 6574736e     ceEnable() inste
   37c20:	00216461 61747328 70757472 00000029     ad!.(startup)...
   37c30:	43415254 53415f45 54524553 6552203a     TRACE_ASSERT: Re
   37c40:	64726f63 6e207265 6920746f 6974696e     corder not initi
   37c50:	7a696c61 202c6465 6c6c6163 72547620     alized, call vTr
   37c60:	45656361 6c62616e 20292865 73726966     aceEnable() firs
   37c70:	00002174 43415254 53415f45 54524553     t!..TRACE_ASSERT
   37c80:	5478203a 65636172 49746553 72505253     : xTraceSetISRPr
   37c90:	7265706f 73656974 6e49203a 696c6176     operties: Invali
   37ca0:	61762064 2065756c 20726f66 646e6168     d value for hand
   37cb0:	0000656c 43415254 53415f45 54524553     le..TRACE_ASSERT
   37cc0:	5478203a 65636172 49746553 72505253     : xTraceSetISRPr
   37cd0:	7265706f 73656974 616e203a 3d20656d     operties: name =
   37ce0:	554e203d 00004c4c 61725476 74536563     = NULL..vTraceSt
   37cf0:	4965726f 65425253 206e6967 6572202d     oreISRBegin - re
   37d00:	64726f63 62207265 21797375 65655320     corder busy! See
   37d10:	646f6320 6f632065 6e656d6d 00002e74      code comment...
   37d20:	43415254 53415f45 54524553 5476203a     TRACE_ASSERT: vT
   37d30:	65636172 726f7453 52534965 69676542     raceStoreISRBegi
   37d40:	49203a6e 6c61766e 49206469 68205253     n: Invalid ISR h
   37d50:	6c646e61 4e282065 294c4c55 00000000     andle (NULL)....
   37d60:	43415254 53415f45 54524553 5476203a     TRACE_ASSERT: vT
   37d70:	65636172 726f7453 52534965 69676542     raceStoreISRBegi
   37d80:	49203a6e 6c61766e 49206469 68205253     n: Invalid ISR h
   37d90:	6c646e61 3e282065 53494e20 00002952     andle (> NISR)..
   37da0:	206f6f54 796e616d 73656e20 20646574     Too many nested 
   37db0:	65746e69 70757272 00217374 61725476     interrupts!.vTra
   37dc0:	74536563 4965726f 6e455253 202d2064     ceStoreISREnd - 
   37dd0:	6f636572 72656472 73756220 53202179     recorder busy! S
   37de0:	63206565 2065646f 6d6d6f63 2e746e65     ee code comment.
   37df0:	00000000 616d6e55 65686374 61632064     ....Unmatched ca
   37e00:	74206c6c 5476206f 65636172 726f7453     ll to vTraceStor
   37e10:	52534965 20646e45 53496e28 74636152     eISREnd (nISRact
   37e20:	20657669 30203d3d 7865202c 74636570     ive == 0, expect
   37e30:	3e206465 00293020 43415254 53415f45     ed > 0).TRACE_AS
   37e40:	54524553 7277203a 49657469 3a38746e     SERT: writeInt8:
   37e50:	66756220 20726566 4e203d3d 004c4c55      buffer == NULL.
   37e60:	43415254 53415f45 54524553 7277203a     TRACE_ASSERT: wr
   37e70:	49657469 3631746e 7562203a 72656666     iteInt16: buffer
   37e80:	203d3d20 4c4c554e 00000000 43415254      == NULL....TRAC
   37e90:	53415f45 54524553 7277203a 49657469     E_ASSERT: writeI
   37ea0:	3233746e 7562203a 72656666 203d3d20     nt32: buffer == 
   37eb0:	4c4c554e 00000000 61725476 72506563     NULL....vTracePr
   37ec0:	46746e69 54202d20 6d206f6f 20796e61     intF - Too many 
   37ed0:	75677261 746e656d 6d202c73 31207861     arguments, max 1
   37ee0:	6c612035 65776f6c 00002164 61725476     5 allowed!..vTra
   37ef0:	72506563 46746e69 54202d20 6c206f6f     cePrintF - Too l
   37f00:	65677261 67726120 6e656d75 202c7374     arge arguments, 
   37f10:	2078616d 62203233 20657479 6f6c6c61     max 32 byte allo
   37f20:	21646577 00000000 43415254 53415f45     wed!....TRACE_AS
   37f30:	54524553 5476203a 65636172 69725056     SERT: vTraceVPri
   37f40:	3a46746e 726f6620 5374616d 3d207274     ntF: formatStr =
   37f50:	554e203d 00004c4c 43415254 53415f45     = NULL..TRACE_AS
   37f60:	54524553 5478203a 65636172 69676552     SERT: xTraceRegi
   37f70:	72657473 69727453 203a676e 6562616c     sterString: labe
   37f80:	3d3d206c 4c554e20 0000004c 43415254     l == NULL...TRAC
   37f90:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   37fa0:	74536563 5465726f 526b7361 79646165     ceStoreTaskReady
   37fb0:	6e49203a 696c6176 61762064 2065756c     : Invalid value 
   37fc0:	20726f66 646e6168 0000656c 6f636552     for handle..Reco
   37fd0:	72656472 73756220 202d2079 68676968     rder busy - high
   37fe0:	69727020 7469726f 53492079 73752052      priority ISR us
   37ff0:	20676e69 63737973 3f6c6c61 29312820     ing syscall? (1)
   38000:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
   38010:	7270203a 61725476 74536563 4c65726f     : prvTraceStoreL
   38020:	6f50776f 3a726577 766e4920 64696c61     owPower: Invalid
   38030:	616c6620 61762067 0065756c 43415254      flag value.TRAC
   38040:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   38050:	74536563 4b65726f 656e7265 6c61436c     ceStoreKernelCal
   38060:	65203a6c 65646f63 203d3e20 46467830     l: ecode >= 0xFF
   38070:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
   38080:	7270203a 61725476 74536563 4b65726f     : prvTraceStoreK
   38090:	656e7265 6c61436c 6f203a6c 63656a62     ernelCall: objec
   380a0:	616c4374 3e207373 5254203d 5f454341     tClass >= TRACE_
   380b0:	414c434e 53455353 00000000 43415254     NCLASSES....TRAC
   380c0:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   380d0:	74536563 4b65726f 656e7265 6c61436c     ceStoreKernelCal
   380e0:	49203a6c 6c61766e 76206469 65756c61     l: Invalid value
   380f0:	726f6620 6a626f20 4e746365 65626d75      for objectNumbe
   38100:	00000072 6f636552 72656472 73756220     r...Recorder bus
   38110:	202d2079 68676968 69727020 7469726f     y - high priorit
   38120:	53492079 73752052 20676e69 63737973     y ISR using sysc
   38130:	3f6c6c61 29322820 00000000 43415254     all? (2)....TRAC
   38140:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   38150:	74536563 4b65726f 656e7265 6c61436c     ceStoreKernelCal
   38160:	7469576c 72615068 203a6d61 63747665     lWithParam: evtc
   38170:	2065646f 30203d3e 00464678 43415254     ode >= 0xFF.TRAC
   38180:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   38190:	74536563 4b65726f 656e7265 6c61436c     ceStoreKernelCal
   381a0:	7469576c 72615068 203a6d61 656a626f     lWithParam: obje
   381b0:	6c437463 20737361 54203d3e 45434152     ctClass >= TRACE
   381c0:	4c434e5f 45535341 00000053 43415254     _NCLASSES...TRAC
   381d0:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   381e0:	74536563 4b65726f 656e7265 6c61436c     ceStoreKernelCal
   381f0:	7469576c 72615068 203a6d61 61766e49     lWithParam: Inva
   38200:	2064696c 756c6176 6f662065 626f2072     lid value for ob
   38210:	7463656a 626d754e 00007265 6f636552     jectNumber..Reco
   38220:	72656472 73756220 202d2079 68676968     rder busy - high
   38230:	69727020 7469726f 53492079 73752052      priority ISR us
   38240:	20676e69 63737973 3f6c6c61 29332820     ing syscall? (3)
   38250:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
   38260:	7270203a 61725476 65476563 72615074     : prvTraceGetPar
   38270:	203a6d61 61766e49 2064696c 756c6176     am: Invalid valu
   38280:	6f662065 61702072 5f6d6172 0078616d     e for param_max.
   38290:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   382a0:	61725476 74536563 4b65726f 656e7265     vTraceStoreKerne
   382b0:	6c61436c 7469576c 6d754e68 63697265     lCallWithNumeric
   382c0:	61726150 6c6e4f6d 49203a79 6c61766e     ParamOnly: Inval
   382d0:	76206469 65756c61 726f6620 74766520     id value for evt
   382e0:	65646f63 00000000 6f636552 72656472     code....Recorder
   382f0:	73756220 202d2079 68676968 69727020      busy - high pri
   38300:	7469726f 53492079 73752052 20676e69     ority ISR using 
   38310:	63737973 3f6c6c61 29342820 00000000     syscall? (4)....
   38320:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   38330:	61725476 74536563 5465726f 736b7361     vTraceStoreTasks
   38340:	63746977 49203a68 6c61766e 76206469     witch: Invalid v
   38350:	65756c61 726f6620 73617420 61685f6b     alue for task_ha
   38360:	656c646e 00000000 43415254 53415f45     ndle....TRACE_AS
   38370:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
   38380:	4f65726f 63656a62 6d614e74 436e4f65     oreObjectNameOnC
   38390:	65736f6c 6e657645 6f203a74 63656a62     loseEvent: objec
   383a0:	616c6374 3e207373 5254203d 5f454341     tclass >= TRACE_
   383b0:	414c434e 53455353 00000000 43415254     NCLASSES....TRAC
   383c0:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   383d0:	74536563 4f65726f 63656a62 6d614e74     ceStoreObjectNam
   383e0:	436e4f65 65736f6c 6e657645 49203a74     eOnCloseEvent: I
   383f0:	6c61766e 76206469 65756c61 726f6620     nvalid value for
   38400:	6e616820 00656c64 43415254 53415f45      handle.TRACE_AS
   38410:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
   38420:	4f65726f 63656a62 6f725074 74726570     oreObjectPropert
   38430:	4f736569 6f6c436e 76456573 3a746e65     iesOnCloseEvent:
   38440:	6a626f20 63746365 7373616c 203d3e20      objectclass >= 
   38450:	43415254 434e5f45 5353414c 00005345     TRACE_NCLASSES..
   38460:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   38470:	61725476 74536563 4f65726f 63656a62     vTraceStoreObjec
   38480:	6f725074 74726570 4f736569 6f6c436e     tPropertiesOnClo
   38490:	76456573 3a746e65 766e4920 64696c61     seEvent: Invalid
   384a0:	6c617620 66206575 6820726f 6c646e61      value for handl
   384b0:	00000065 43415254 53415f45 54524553     e...TRACE_ASSERT
   384c0:	7270203a 61725476 65536563 69725074     : prvTraceSetPri
   384d0:	7469726f 6f725079 74726570 6f203a79     orityProperty: o
   384e0:	63656a62 616c6374 3e207373 5254203d     bjectclass >= TR
   384f0:	5f454341 414c434e 53455353 00000000     ACE_NCLASSES....
   38500:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   38510:	61725476 65536563 69725074 7469726f     vTraceSetPriorit
   38520:	6f725079 74726570 49203a79 6c61766e     yProperty: Inval
   38530:	76206469 65756c61 726f6620 00646920     id value for id.
   38540:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   38550:	61725476 65476563 69725074 7469726f     vTraceGetPriorit
   38560:	6f725079 74726570 6f203a79 63656a62     yProperty: objec
   38570:	616c6374 3e207373 5254203d 5f454341     tclass >= TRACE_
   38580:	414c434e 53455353 00000000 43415254     NCLASSES....TRAC
   38590:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   385a0:	65476563 69725074 7469726f 6f725079     ceGetPriorityPro
   385b0:	74726570 49203a79 6c61766e 76206469     perty: Invalid v
   385c0:	65756c61 726f6620 00646920 43415254     alue for id.TRAC
   385d0:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   385e0:	65536563 6a624f74 53746365 65746174     ceSetObjectState
   385f0:	626f203a 7463656a 73616c63 3d3e2073     : objectclass >=
   38600:	41525420 4e5f4543 53414c43 00534553      TRACE_NCLASSES.
   38610:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   38620:	61725476 65536563 6a624f74 53746365     vTraceSetObjectS
   38630:	65746174 6e49203a 696c6176 61762064     tate: Invalid va
   38640:	2065756c 20726f66 00006469 43415254     lue for id..TRAC
   38650:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   38660:	65476563 6a624f74 53746365 65746174     ceGetObjectState
   38670:	626f203a 7463656a 73616c63 3d3e2073     : objectclass >=
   38680:	41525420 4e5f4543 53414c43 00534553      TRACE_NCLASSES.
   38690:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   386a0:	61725476 65476563 6a624f74 53746365     vTraceGetObjectS
   386b0:	65746174 6e49203a 696c6176 61762064     tate: Invalid va
   386c0:	2065756c 20726f66 00006469 43415254     lue for id..TRAC
   386d0:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   386e0:	65536563 73615474 736e496b 636e6174     ceSetTaskInstanc
   386f0:	6e694665 65687369 49203a64 6c61766e     eFinished: Inval
   38700:	76206469 65756c61 726f6620 6e616820     id value for han
   38710:	00656c64 63617254 65522065 64726f63     dle.Trace Record
   38720:	44207265 006f6d65 65747441 2074706d     er Demo.Attempt 
   38730:	69206f74 7865646e 74756f20 65646973     to index outside
   38740:	65766520 6220746e 65666675 00002172      event buffer!..
   38750:	43415254 53415f45 54524553 6975203a     TRACE_ASSERT: ui
   38760:	65646e49 4f664f78 63656a62 49203a74     IndexOfObject: I
   38770:	6c61766e 76206469 65756c61 726f6620     nvalid value for
   38780:	6a626f20 63746365 7373616c 00000000      objectclass....
   38790:	43415254 53415f45 54524553 6975203a     TRACE_ASSERT: ui
   387a0:	65646e49 4f664f78 63656a62 49203a74     IndexOfObject: I
   387b0:	6c61766e 76206469 65756c61 726f6620     nvalid value for
   387c0:	6a626f20 68746365 6c646e61 00000065      objecthandle...
   387d0:	656a624f 74207463 656c6261 6f6f6c20     Object table loo
   387e0:	2070756b 68746977 766e6920 64696c61     kup with invalid
   387f0:	6a626f20 20746365 646e6168 6f20656c      object handle o
   38800:	626f2072 7463656a 616c6320 00217373     r object class!.
   38810:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   38820:	61725476 65476563 6a624f74 48746365     vTraceGetObjectH
   38830:	6c646e61 49203a65 6c61766e 76206469     andle: Invalid v
   38840:	65756c61 726f6620 6a626f20 63746365     alue for objectc
   38850:	7373616c 00000000 43415254 53415f45     lass....TRACE_AS
   38860:	54524553 7270203a 61725476 72466563     SERT: prvTraceFr
   38870:	624f6565 7463656a 646e6148 203a656c     eeObjectHandle: 
   38880:	61766e49 2064696c 756c6176 6f662065     Invalid value fo
   38890:	626f2072 7463656a 73616c63 00000073     r objectclass...
   388a0:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   388b0:	61725476 72466563 624f6565 7463656a     vTraceFreeObject
   388c0:	646e6148 203a656c 61766e49 2064696c     Handle: Invalid 
   388d0:	756c6176 6f662065 61682072 656c646e     value for handle
   388e0:	00000000 65747441 2074706d 66206f74     ....Attempt to f
   388f0:	20656572 65726f6d 6e616820 73656c64     ree more handles
   38900:	61687420 6c61206e 61636f6c 21646574      than allocated!
   38910:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
   38920:	7270203a 61725476 65536563 6a624f74     : prvTraceSetObj
   38930:	4e746365 3a656d61 6d616e20 3d3d2065     ectName: name ==
   38940:	4c554e20 0000004c 656c6c49 206c6167      NULL...Illegal 
   38950:	656a626f 63207463 7373616c 206e6920     object class in 
   38960:	54767270 65636172 4f746553 63656a62     prvTraceSetObjec
   38970:	6d614e74 00000065 656c6c49 206c6167     tName...Illegal 
   38980:	646e6168 2820656c 69202930 7270206e     handle (0) in pr
   38990:	61725476 65536563 6a624f74 4e746365     vTraceSetObjectN
   389a0:	2e656d61 00000000 43415254 53415f45     ame.....TRACE_AS
   389b0:	54524553 7270203a 61725476 704f6563     SERT: prvTraceOp
   389c0:	79536e65 6c6f626d 616e203a 3d20656d     enSymbol: name =
   389d0:	554e203d 00004c4c 43415254 53415f45     = NULL..TRACE_AS
   389e0:	54524553 7270203a 65684376 61446b63     SERT: prvCheckDa
   389f0:	6f546174 764f6542 72777265 65747469     taToBeOverwritte
   38a00:	726f466e 746c754d 746e4569 76457972     nForMultiEntryEv
   38a10:	73746e65 6f6e203a 746e4566 73656972     ents: nofEntries
   38a20:	68436f54 206b6365 30203d3d 00000000     ToCheck == 0....
   38a30:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   38a40:	61725476 65476563 53544474 6e49203a     vTraceGetDTS: In
   38a50:	696c6176 61762064 2065756c 20726f66     valid value for 
   38a60:	61726170 616d5f6d 53544478 00000000     param_maxDTS....
   38a70:	20646142 61726170 616d5f6d 53544478     Bad param_maxDTS
   38a80:	206e6920 54767270 65636172 44746547      in prvTraceGetD
   38a90:	00005354 43415254 53415f45 54524553     TS..TRACE_ASSERT
   38aa0:	7270203a 61725476 6f4c6563 70756b6f     : prvTraceLookup
   38ab0:	626d7953 61546c6f 45656c62 7972746e     SymbolTableEntry
   38ac0:	616e203a 3d20656d 554e203d 00004c4c     : name == NULL..
   38ad0:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   38ae0:	61725476 6f4c6563 70756b6f 626d7953     vTraceLookupSymb
   38af0:	61546c6f 45656c62 7972746e 656c203a     olTableEntry: le
   38b00:	3d3d206e 00003020 43415254 53415f45     n == 0..TRACE_AS
   38b10:	54524553 7270203a 61725476 72436563     SERT: prvTraceCr
   38b20:	65746165 626d7953 61546c6f 45656c62     eateSymbolTableE
   38b30:	7972746e 616e203a 3d20656d 554e203d     ntry: name == NU
   38b40:	00004c4c 43415254 53415f45 54524553     LL..TRACE_ASSERT
   38b50:	7270203a 61725476 72436563 65746165     : prvTraceCreate
   38b60:	626d7953 61546c6f 45656c62 7972746e     SymbolTableEntry
   38b70:	656c203a 3d3d206e 00003020 626d7953     : len == 0..Symb
   38b80:	74206c6f 656c6261 6c756620 49202e6c     ol table full. I
   38b90:	6572636e 20657361 5f435254 5f474643     ncrease TRC_CFG_
   38ba0:	424d5953 545f4c4f 454c4241 5a49535f     SYMBOL_TABLE_SIZ
   38bb0:	6e692045 63727420 666e6f43 682e6769     E in trcConfig.h
   38bc0:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
   38bd0:	7270203a 61725476 65476563 65684374     : prvTraceGetChe
   38be0:	75736b63 70203a6d 656d616e 203d3d20     cksum: pname == 
   38bf0:	4c4c554e 00000000 43415254 53415f45     NULL....TRACE_AS
   38c00:	54524553 7270203a 61725476 65476563     SERT: prvTraceGe
   38c10:	65684374 75736b63 70203a6d 20637263     tChecksum: pcrc 
   38c20:	4e203d3d 004c4c55 43415254 53415f45     == NULL.TRACE_AS
   38c30:	54524553 7270203a 61725476 65476563     SERT: prvTraceGe
   38c40:	65684374 75736b63 70203a6d 676e656c     tChecksum: pleng
   38c50:	3d206874 554e203d 00004c4c 454c4449     th == NULL..IDLE
   38c60:	00000000 20726d54 00637653 0001d53c     ....Tmr Svc.<...
   38c70:	0001d53c 0001d53c 0001d5ca 0001d594     <...<...........
   38c80:	0001d5be 0001d53c 0001d53c 0001d5ca     ....<...<.......
   38c90:	0001d594                                ....

00038c94 <sd_mmc_trans_units>:
   38c94:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

00038cb0 <sd_trans_multipliers>:
   38cb0:	00000000 0000000a 0000000c 0000000d     ................
   38cc0:	0000000f 00000014 00000019 0000001e     ................
   38cd0:	00000023 00000028 0000002d 00000032     #...(...-...2...
   38ce0:	00000037 0000003c 00000046 00000050     7...<...F...P...

00038cf0 <mmc_trans_multipliers>:
   38cf0:	00000000 0000000a 0000000c 0000000d     ................
   38d00:	0000000f 00000014 0000001a 0000001e     ................
   38d10:	00000023 00000028 0000002d 00000034     #...(...-...4...
   38d20:	00000037 0000003c 00000046 00000050     7...<...F...P...
   38d30:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   38d40:	00005d64 61766e69 6564696c 636f6920     d]..invalide ioc
   38d50:	6320746c 000a646d 0000000d              lt cmd......

00038d5c <__FUNCTION__.17101>:
   38d5c:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
   38d6c:	50504128 4e492829 00294f46 776f6c53     (APP)(INFO).Slow
   38d7c:	20676e69 6e776f64 0a2e2e2e 00000000     ing down........
   38d8c:	0000000d 50504128 52452829 255b2952     ....(APP)(ERR)[%
   38d9c:	255b5d73 00005d64 46494828 69614629     s][%d]..(HIF)Fai
   38dac:	6f74206c 6b617720 74207075 63206568     l to wakup the c
   38dbc:	0a706968 00000000 66696828 49572029     hip.....(hif) WI
   38dcc:	485f4946 5f54534f 5f564352 4c525443     FI_HOST_RCV_CTRL
   38ddc:	6220315f 66207375 0a6c6961 00000000     _1 bus fail.....
   38dec:	66696828 64612029 73657264 75622073     (hif) address bu
   38dfc:	61662073 000a6c69 66696828 6f432029     s fail..(hif) Co
   38e0c:	70757272 20646574 6b636170 53207465     rrupted packet S
   38e1c:	20657a69 7525203d 204c3c20 7525203d     ize = %u <L = %u
   38e2c:	2047202c 7525203d 504f202c 25203d20     , G = %u, OP = %
   38e3c:	3e583230 0000000a 49464957 6c616320     02X>....WIFI cal
   38e4c:	6361626c 7369206b 746f6e20 67657220     lback is not reg
   38e5c:	65747369 0a646572 00000000 6b6f6353     istered.....Scok
   38e6c:	63207465 626c6c61 206b6361 6e207369     et callback is n
   38e7c:	7220746f 73696765 65726574 00000a64     ot registered...
   38e8c:	2061744f 6c6c6163 6b636162 20736920     Ota callback is 
   38e9c:	20746f6e 69676572 72657473 000a6465     not registered..
   38eac:	70797243 63206f74 626c6c61 206b6361     Crypto callback 
   38ebc:	6e207369 7220746f 73696765 65726574     is not registere
   38ecc:	00000a64 6d676953 61632061 61626c6c     d...Sigma callba
   38edc:	69206b63 6f6e2073 65722074 74736967     ck is not regist
   38eec:	64657265 0000000a 66696828 6e692029     ered....(hif) in
   38efc:	696c6176 72672064 2070756f 000a4449     valid group ID..
   38f0c:	66696828 6f682029 61207473 64207070     (hif) host app d
   38f1c:	276e6469 65732074 58522074 6e6f4420     idn't set RX Don
   38f2c:	253c2065 253c3e75 000a3e58 66696828     e <%u><%X>..(hif
   38f3c:	72572029 20676e6f 657a6953 0000000a     ) Wrong Size....
   38f4c:	66696828 61462029 2065736c 65746e69     (hif) False inte
   38f5c:	70757272 6c252074 00000078 66696828     rrupt %lx...(hif
   38f6c:	61462029 74206c69 6552206f 69206461     ) Fail to Read i
   38f7c:	7265746e 74707572 67657220 0000000a     nterrupt reg....
   38f8c:	46494828 61462029 74206c69 6168206f     (HIF) Fail to ha
   38f9c:	656c646e 746e6920 75727265 25207470     ndle interrupt %
   38fac:	72742064 67412079 2e6e6961 00000a2e     d try Again.....
   38fbc:	66696820 6365725f 65766965 6e49203a      hif_receive: In
   38fcc:	696c6176 72612064 656d7567 000a746e     valid argument..
   38fdc:	20505041 75716552 65747365 69532064     APP Requested Si
   38fec:	6920657a 616c2073 72656772 61687420     ze is larger tha
   38ffc:	6874206e 65722065 65766963 75622064     n the recived bu
   3900c:	72656666 7a697320 253c2065 253c3e75     ffer size <%u><%
   3901c:	0a3e756c 00000000 20505041 75716552     lu>.....APP Requ
   3902c:	65747365 64412064 73657264 65622073     ested Address be
   3903c:	646e6f79 65687420 63657220 64657669     yond the recived
   3904c:	66756220 20726566 72646461 20737365      buffer address 
   3905c:	20646e61 676e656c 000a6874 20705247     and length..GRp 
   3906c:	6425203f 0000000a 0002137c 0002134c     ? %d....|...L...
   3907c:	00021344 0002135c 00021354 00021374     D...\...T...t...
   3908c:	00021364 0002136c                       d...l...

00039094 <__FUNCTION__.17969>:
   39094:	5f666968 646e6573 00000000              hif_send....

000390a0 <__FUNCTION__.17979>:
   390a0:	5f666968 00727369                       hif_isr.

000390a8 <__FUNCTION__.17988>:
   390a8:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

000390b8 <__FUNCTION__.18000>:
   390b8:	5f666968 65636572 00657669              hif_receive.

000390c4 <__FUNCTION__.18016>:
   390c4:	5f666968 69676572 72657473 0062635f     hif_register_cb.
   390d4:	50504128 4e492829 00294f46 666e6f43     (APP)(INFO).Conf
   390e4:	7463696c 49206465 20222050 252e7525     licted IP " %u.%
   390f4:	75252e75 2075252e 000a2022 0000000d     u.%u.%u " ......
   39104:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   39114:	00005d64 20514552 20746f4e 69666564     d]..REQ Not defi
   39124:	2064656e 000a6425 41564e49 2044494c     ned %d..INVALID 
   39134:	4e494f50 0a524554 00000000 41564e49     POINTER.....INVA
   39144:	2044494c 44495353 0000000a 41564e49     LID SSID....INVA
   39154:	2044494c 000a4843 41564e49 2044494c     LID CH..INVALID 
   39164:	50434844 52455320 20524556 000a5049     DHCP SERVER IP..
   39174:	41564e49 2044494c 2059454b 45444e49     INVALID KEY INDE
   39184:	00000a58 41564e49 2044494c 2059454b     X...INVALID KEY 
   39194:	49525453 5320474e 0a455a49 00000000     STRING SIZE.....
   391a4:	41564e49 2044494c 2059454b 455a4953     INVALID KEY SIZE
   391b4:	0000000a 41564e49 2044494c 20415057     ....INVALID WPA 
   391c4:	2059454b 455a4953 0000000a 41564e49     KEY SIZE....INVA
   391d4:	2044494c 48545541 49544e45 49544143     LID AUTHENTICATI
   391e4:	4d204e4f 0a45444f 00000000 41564e49     ON MODE.....INVA
   391f4:	2044494c 6f206f4e 63732066 73206e61     LID No of scan s
   39204:	73746f6c 64252021 0000000a 41564e49     lots! %d....INVA
   39214:	2044494c 6e616373 6f6c7320 69742074     LID scan slot ti
   39224:	2021656d 000a6425 41564e49 2044494c     me! %d..INVALID 
   39234:	6f206f4e 72702066 2065626f 75716572     No of probe requ
   39244:	73747365 72657020 61637320 6c73206e     ests per scan sl
   39254:	2520746f 00000a64 41564e49 2044494c     ot %d...INVALID 
   39264:	49535352 72687420 6f687365 2520646c     RSSI threshold %
   39274:	000a2064 6d726946 65726177 72657620     d ..Firmware ver
   39284:	3a202020 2e752520 252e7525 76532075        : %u.%u.%u Sv
   39294:	7665726e 0a752520 00000000 6d726946     nrev %u.....Firm
   392a4:	65726177 69754220 2520646c 69542073     ware Build %s Ti
   392b4:	2520656d 00000a73 6d726946 65726177     me %s...Firmware
   392c4:	6e694d20 69726420 20726576 20726576      Min driver ver 
   392d4:	7525203a 2e75252e 000a7525 76697244     : %u.%u.%u..Driv
   392e4:	76207265 203a7265 252e7525 75252e75     er ver: %u.%u.%u
   392f4:	0000000a 353a3731 38343a39 00000000     ....17:59:48....
   39304:	2079614d 32203231 00313230 76697244     May 12 2021.Driv
   39314:	62207265 746c6975 20746120 25097325     er built at %s.%
   39324:	00000a73 6d73694d 68637461 72694620     s...Mismatch Fir
   39334:	7277616d 65562065 6f697372 00000a6e     mawre Version...
   39344:	2079654b 6e207369 7620746f 64696c61     Key is not valid
   39354:	0000000a 61766e49 2064696c 0a79654b     ....Invalid Key.
   39364:	00000000 44495353 4e454c20 564e4920     ....SSID LEN INV
   39374:	44494c41 0000000a 49204843 4c41564e     ALID....CH INVAL
   39384:	000a4449 61766e49 2064696c 20706557     ID..Invalid Wep 
   39394:	2079656b 65646e69 64252078 0000000a     key index %d....
   393a4:	61766e49 2064696c 20706557 2079656b     Invalid Wep key 
   393b4:	676e656c 25206874 00000a64 6f636e49     length %d...Inco
   393c4:	63657272 53502074 656b204b 656c2079     rrect PSK key le
   393d4:	6874676e 0000000a 65646e75 656e6966     ngth....undefine
   393e4:	65732064 79742063 000a6570 5f53505f     d sec type.._PS_
   393f4:	56524553 205f5245 6e207369 6420746f     SERVER_ is not d
   39404:	6e696665 000a6465 7473694c 63206e65     efined..Listen c
   39414:	6e6e6168 73206c65 6c756f68 6e6f2064     hannel should on
   39424:	6220796c 324d2065 49575f4d 435f4946     ly be M2M_WIFI_C
   39434:	2f315f48 31312f36 00000a20 45574f50     H_1/6/11 ...POWE
   39444:	41532052 25204556 00000a64 41564e49     R SAVE %d...INVA
   39454:	2044494c 414d4f44 4e204e49 0a454d41     LID DOMAIN NAME.
   39464:	00000000 474e5250 66754220 20726566     ....PRNG Buffer 
   39474:	65637865 64656465 78616d20 6d756d69     exceeded maximum
   39484:	7a697320 64252065 20726f20 4c4c554e      size %d or NULL
   39494:	66754220 0a726566 00000000               Buffer.....

000394a0 <__FUNCTION__.17951>:
   394a0:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

000394ac <__FUNCTION__.17980>:
   394ac:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

000394bc <__FUNCTION__.18011>:
   394bc:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
   394cc:	0063735f 50504128 52452829 255b2952     _sc.(APP)(ERR)[%
   394dc:	255b5d73 00005d64 20737542 6f727265     s][%d]..Bus erro
   394ec:	35282072 64252e29 786c2520 0000000a     r (5).%d %lx....
   394fc:	0000000d 6c696146 74206465 6177206f     ....Failed to wa
   3950c:	2070756b 20656874 70696863 0000000a     kup the chip....
   3951c:	50504128 4e492829 00294f46 76697244     (APP)(INFO).Driv
   3952c:	65567265 666e4972 30203a6f 38302578     erVerInfo: 0x%08
   3953c:	000a786c 6c696166 74206465 6564206f     lx..failed to de
   3954c:	696e692d 6c616974 0a657a69 00000000     -initialize.....

0003955c <__FUNCTION__.17808>:
   3955c:	70696863 6b61775f 00000065              chip_wake...

00039568 <__FUNCTION__.17857>:
   39568:	70696863 6965645f 0074696e 50504128     chip_deinit.(APP
   39578:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
   39588:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
   39598:	6e69206c 62207469 000a7375 0000000d     l init bus......
   395a8:	50504128 4e492829 00294f46 70696843     (APP)(INFO).Chip
   395b8:	20444920 0a786c25 00000000 6c696166      ID %lx.....fail
   395c8:	74206465 6e65206f 656c6261 746e6920     ed to enable int
   395d8:	75727265 2e737470 00000a2e 696d6e5b     errupts.....[nmi
   395e8:	6f747320 203a5d70 70696863 6965645f      stop]: chip_dei
   395f8:	2074696e 6c696166 0000000a 696d6e5b     nit fail....[nmi
   39608:	6f747320 203a5d70 20495053 73616c66      stop]: SPI flas
   39618:	69642068 6c626173 61662065 000a6c69     h disable fail..
   39628:	696d6e5b 6f747320 203a5d70 6c696166     [nmi stop]: fail
   39638:	696e6920 75622074 00000a73               init bus...

00039644 <__FUNCTION__.17855>:
   39644:	645f6d6e 695f7672 0074696e              nm_drv_init.

00039650 <__FUNCTION__.17862>:
   39650:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...

00039660 <crc7_syndrome_table>:
   39660:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
   39670:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
   39680:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
   39690:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
   396a0:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
   396b0:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
   396c0:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
   396d0:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
   396e0:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
   396f0:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
   39700:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
   39710:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
   39720:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
   39730:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
   39740:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
   39750:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
   39760:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   39770:	00005d64 696d6e5b 69707320 46203a5d     d]..[nmi spi]: F
   39780:	656c6961 6d632064 72772064 2c657469     ailed cmd write,
   39790:	73756220 72726520 2e2e726f 00000a2e      bus error......
   397a0:	0000000d 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   397b0:	656c6961 75622064 72652073 2e726f72     ailed bus error.
   397c0:	000a2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   397d0:	656c6961 61642064 72206174 6f707365     ailed data respo
   397e0:	2065736e 64616572 7825202c 20782520     nse read, %x %x 
   397f0:	000a7825 696d6e5b 69707320 46203a5d     %x..[nmi spi]: F
   39800:	656c6961 6d632064 65722064 6e6f7073     ailed cmd respon
   39810:	72206573 2c646165 73756220 72726520     se read, bus err
   39820:	2e2e726f 00000a2e 696d6e5b 69707320     or......[nmi spi
   39830:	73203a5d 62206970 65666675 69732072     ]: spi buffer si
   39840:	7420657a 73206f6f 6c6c616d 64252820     ze too small (%d
   39850:	25282029 000a2964 696d6e5b 69707320     ) (%d)..[nmi spi
   39860:	46203a5d 656c6961 6d632064 65722064     ]: Failed cmd re
   39870:	6e6f7073 202c6573 20646d63 32302528     sponse, cmd (%02
   39880:	202c2978 70736572 30252820 0a297832     x), resp (%02x).
   39890:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   398a0:	656c6961 6d632064 74732064 20657461     ailed cmd state 
   398b0:	70736572 65736e6f 61747320 28206574     response state (
   398c0:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
   398d0:	45203a5d 726f7272 6164202c 72206174     ]: Error, data r
   398e0:	20646165 70736572 65736e6f 30252820     ead response (%0
   398f0:	0a297832 00000000 696d6e5b 69707320     2x).....[nmi spi
   39900:	62203a5d 65666675 766f2072 75727265     ]: buffer overru
   39910:	6877206e 72206e65 69646165 6420676e     n when reading d
   39920:	2e617461 0000000a 696d6e5b 69707320     ata.....[nmi spi
   39930:	62203a5d 65666675 766f2072 75727265     ]: buffer overru
   39940:	6877206e 72206e65 69646165 6320676e     n when reading c
   39950:	0a2e6372 00000000 696d6e5b 69707320     rc......[nmi spi
   39960:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   39970:	6b636f6c 61657220 62202c64 65207375     lock read, bus e
   39980:	726f7272 0a2e2e2e 00000000 696d6e5b     rror........[nmi
   39990:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   399a0:	62206174 6b636f6c 63726320 61657220     ta block crc rea
   399b0:	62202c64 65207375 726f7272 0a2e2e2e     d, bus error....
   399c0:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   399d0:	656c6961 61642064 72206174 6f707365     ailed data respo
   399e0:	2065736e 64616572 7562202c 72652073     nse read, bus er
   399f0:	2e726f72 000a2e2e 696d6e5b 69707320     ror.....[nmi spi
   39a00:	46203a5d 656c6961 61642064 72206174     ]: Failed data r
   39a10:	6f707365 2065736e 64616572 282e2e2e     esponse read...(
   39a20:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
   39a30:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   39a40:	6b636f6c 646d6320 69727720 202c6574     lock cmd write, 
   39a50:	20737562 6f727265 2e2e2e72 0000000a     bus error.......
   39a60:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   39a70:	61642064 62206174 6b636f6c 69727720     d data block wri
   39a80:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
   39a90:	0000000a 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   39aa0:	656c6961 61642064 62206174 6b636f6c     ailed data block
   39ab0:	63726320 69727720 202c6574 20737562      crc write, bus 
   39ac0:	6f727265 2e2e2e72 0000000a 696d6e5b     error.......[nmi
   39ad0:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   39ae0:	77202c64 65746972 67657220 30252820     d, write reg (%0
   39af0:	2e297838 000a2e2e 65736552 6e612074     8x).....Reset an
   39b00:	65722064 20797274 25206425 2520786c     d retry %d %lx %
   39b10:	000a786c 696d6e5b 69707320 46203a5d     lx..[nmi spi]: F
   39b20:	656c6961 6d632064 77202c64 65746972     ailed cmd, write
   39b30:	6f6c6220 28206b63 78383025 2e2e2e29      block (%08x)...
   39b40:	0000000a 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   39b50:	656c6961 6c622064 206b636f 61746164     ailed block data
   39b60:	69727720 2e2e6574 00000a2e 65736552      write......Rese
   39b70:	6e612074 65722064 20797274 25206425     t and retry %d %
   39b80:	2520786c 00000a64 696d6e5b 69707320     lx %d...[nmi spi
   39b90:	46203a5d 656c6961 6d632064 72202c64     ]: Failed cmd, r
   39ba0:	20646165 20676572 38302528 2e2e2978     ead reg (%08x)..
   39bb0:	00000a2e 65736552 6e612074 65722064     ....Reset and re
   39bc0:	20797274 25206425 000a786c 696d6e5b     try %d %lx..[nmi
   39bd0:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   39be0:	72202c64 20646165 636f6c62 2528206b     d, read block (%
   39bf0:	29783830 0a2e2e2e 00000000 696d6e5b     08x)........[nmi
   39c00:	69707320 46203a5d 656c6961 6e692064      spi]: Failed in
   39c10:	6e726574 72206c61 20646165 746f7270     ternal read prot
   39c20:	6c6f636f 74697720 52432068 6e6f2043     ocol with CRC on
   39c30:	6572202c 69727974 7720676e 20687469     , retyring with 
   39c40:	20435243 2e66666f 000a2e2e 696d6e5b     CRC off.....[nmi
   39c50:	69707320 46203a5d 656c6961 6e692064      spi]: Failed in
   39c60:	6e726574 72206c61 20646165 746f7270     ternal read prot
   39c70:	6c6f636f 0a2e2e2e 00000000 696d6e5b     ocol........[nmi
   39c80:	69707320 46203a5d 656c6961 6e692064      spi]: Failed in
   39c90:	6e726574 77206c61 65746972 6f727020     ternal write pro
   39ca0:	6f636f74 6572206c 2e2e2e67 0000000a     tocol reg.......
   39cb0:	696d6e5b 69707320 46203a5d 206c6961     [nmi spi]: Fail 
   39cc0:	20646d63 64616572 69686320 64692070     cmd read chip id
   39cd0:	0a2e2e2e 00000000 00022fa4 00022fa4     ........./.../..
   39ce0:	00023034 00022ef8 00022f3e 00022f60     40......>/..`/..
   39cf0:	00022fe6 00022fe6 000230a0 00022ecc     ./.../...0......
   39d00:	000230fa 000230fa 000230fa 000230fa     .0...0...0...0..
   39d10:	00022f82 00023504 00023504 0002358c     ./...5...5...5..
   39d20:	00023468 000234aa 000234c8 00023542     h4...4...4..B5..
   39d30:	00023542 000235ee 00023440 0002363e     B5...5..@4..>6..
   39d40:	0002363e 0002363e 0002363e 000234e6     >6..>6..>6...4..

00039d50 <__FUNCTION__.17130>:
   39d50:	5f697073 00646d63                       spi_cmd.

00039d58 <__FUNCTION__.17137>:
   39d58:	5f697073 61746164 7073725f 00000000     spi_data_rsp....

00039d68 <__FUNCTION__.17146>:
   39d68:	5f697073 5f646d63 00707372              spi_cmd_rsp.

00039d74 <__FUNCTION__.17179>:
   39d74:	5f697073 5f646d63 706d6f63 6574656c     spi_cmd_complete
   39d84:	00000000                                ....

00039d88 <__FUNCTION__.17225>:
   39d88:	5f697073 61746164 6972775f 00006574     spi_data_write..

00039d98 <__FUNCTION__.17237>:
   39d98:	5f697073 74697277 65725f65 00000067     spi_write_reg...

00039da8 <__FUNCTION__.17248>:
   39da8:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

00039db8 <__FUNCTION__.17260>:
   39db8:	5f697073 64616572 6765725f 00000000     spi_read_reg....

00039dc8 <__FUNCTION__.17271>:
   39dc8:	735f6d6e 725f6970 00646165              nm_spi_read.

00039dd4 <__FUNCTION__.17292>:
   39dd4:	735f6d6e 695f6970 0074696e 50504128     nm_spi_init.(APP
   39de4:	4e492829 00294f46 52524528 75432952     )(INFO).(ERRR)Cu
   39df4:	6e657272 253c2074 000a3e64 0000000d     rrent <%d>......
   39e04:	6b636f53 25207465 65732064 6f697373     Socket %d sessio
   39e14:	4449206e 25203d20 000a0d64 6b636f53     n ID = %d...Sock
   39e24:	206f7420 656c6564 3c206574 0a3e6425      to delete <%d>.
   39e34:	00000000 50504128 52452829 255b2952     ....(APP)(ERR)[%
   39e44:	255b5d73 00005d64 20494e53 65637845     s][%d]..SNI Exce
   39e54:	20736465 2078614d 676e654c 000a6874     eds Max Length..
   39e64:	6e6b6e55 206e776f 204c5353 6b636f53     Unknown SSL Sock
   39e74:	4f207465 6f697470 6425206e 0000000a     et Option %d....
   39e84:	20746f4e 204c5353 6b636f53 000a7465     Not SSL Socket..
   39e94:	2f445322 20434d4d 64726143 6f6c5320     "SD/MMC Card Slo
   39ea4:	22302074 00000000                       t 0"....

00039eac <lun_desc>:
   39eac:	0001ef09 0001ef61 0001efad 0001eff9     ....a...........
   39ebc:	0001f029 0001f0ad 0001f13d 00039e94     ).......=.......
   39ecc:	42000800 42000c00 42001000 42001400     ...B...B...B...B
   39edc:	42001800 42001c00 0c0b0a09 00000e0d     ...B...B........
   39eec:	00028f22 00028f9c 00028f9c 00028f40     "...........@...
   39efc:	00028f3a 00028f46 00028f28 00028f4c     :...F...(...L...
   39f0c:	00028f82 00029184 000291d4 000291d4     ................
   39f1c:	000291d0 00029176 00029196 00029166     ....v.......f...
   39f2c:	000291a8 000291ba 00029222 00029250     ........"...P...
   39f3c:	00029250 0002924c 0002921c 00029228     P...L.......(...
   39f4c:	00029216 0002922e 00029234              ........4...

00039f58 <tcc_modules>:
   39f58:	42002000 42002400 42002800              . .B.$.B.(.B

00039f64 <_tcc_gclk_ids>:
   39f64:	001b1a1a                                ....

00039f68 <_tcc_apbcmasks>:
   39f68:	00000100 00000200 00000400              ............

00039f74 <_tcc_maxs>:
   39f74:	00ffffff 00ffffff 0000ffff              ............

00039f80 <_tcc_cc_nums>:
   39f80:	00020204                                ....

00039f84 <_tcc_ow_nums>:
   39f84:	00020408                                ....

00039f88 <_tcc_intflag>:
   39f88:	00000001 00000002 00000004 00000008     ................
   39f98:	00001000 00002000 00004000 00008000     ..... ...@......
   39fa8:	00010000 00020000 00040000 00080000     ................

00039fb8 <LfnOfs>:
   39fb8:	07050301 12100e09 1c181614 0000001e     ................
   39fc8:	3c3a2a22 7f7c3f3e 00000000 3d3b2c2b     "*:<>?|.....+,;=
   39fd8:	00005d5b 4d90feeb 534f4453 00302e35     [].....MSDOS5.0.
   39fe8:	4e204f4e 20454d41 46202020 32335441     NO NAME    FAT32
   39ff8:	00202020 4e204f4e 20454d41 46202020        .NO NAME    F
   3a008:	20205441 00202020                       AT     .

0003a010 <excvt.4558>:
   3a010:	b6909a80 808fb78e d8d4d3d2 8f8eded7     ................
   3a020:	e2929290 ebeae399 9d9a9959 9f9e9d9c     ........Y.......
   3a030:	e9e0d6b5 a7a6a5a5 abaaa9a8 afae21ac     .............!..
   3a040:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
   3a050:	c3c2c1c0 c7c7c5c4 cbcac9c8 cfcecdcc     ................
   3a060:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
   3a070:	e3e2e1e0 e7e6e5e5 ebeae9e7 efeeeded     ................
   3a080:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................

0003a090 <Tbl>:
   3a090:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
   3a0a0:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
   3a0b0:	00e600c9 00f400c6 00f200f6 00f900fb     ................
   3a0c0:	00d600ff 00f800dc 00d800a3 019200d7     ................
   3a0d0:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
   3a0e0:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
   3a0f0:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
   3a100:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
   3a110:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
   3a120:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
   3a130:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
   3a140:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
   3a150:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
   3a160:	00da00de 00d900db 00dd00fd 00b400af     ................
   3a170:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
   3a180:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

0003a190 <tbl_lower.4308>:
   3a190:	00620061 00640063 00660065 00680067     a.b.c.d.e.f.g.h.
   3a1a0:	006a0069 006c006b 006e006d 0070006f     i.j.k.l.m.n.o.p.
   3a1b0:	00720071 00740073 00760075 00780077     q.r.s.t.u.v.w.x.
   3a1c0:	007a0079 00a200a1 00a500a3 00af00ac     y.z.............
   3a1d0:	00e100e0 00e300e2 00e500e4 00e700e6     ................
   3a1e0:	00e900e8 00eb00ea 00ed00ec 00ef00ee     ................
   3a1f0:	00f100f0 00f300f2 00f500f4 00f800f6     ................
   3a200:	00fa00f9 00fc00fb 00fe00fd 010100ff     ................
   3a210:	01050103 01090107 010d010b 0111010f     ................
   3a220:	01150113 01190117 011d011b 0121011f     ..............!.
   3a230:	01250123 01290127 012d012b 0131012f     #.%.'.).+.-./.1.
   3a240:	01350133 013a0137 013e013c 01420140     3.5.7.:.<.>.@.B.
   3a250:	01460144 014b0148 014f014d 01530151     D.F.H.K.M.O.Q.S.
   3a260:	01570155 015b0159 015f015d 01630161     U.W.Y.[.]._.a.c.
   3a270:	01670165 016b0169 016f016d 01730171     e.g.i.k.m.o.q.s.
   3a280:	01770175 017c017a 0192017e 03b203b1     u.w.z.|.~.......
   3a290:	03b403b3 03b603b5 03b803b7 03ba03b9     ................
   3a2a0:	03bc03bb 03be03bd 03c003bf 03c303c1     ................
   3a2b0:	03c503c4 03c703c6 03c903c8 043003ca     ..............0.
   3a2c0:	04320431 04340433 04360435 04380437     1.2.3.4.5.6.7.8.
   3a2d0:	043a0439 043c043b 043e043d 0440043f     9.:.;.<.=.>.?.@.
   3a2e0:	04420441 04440443 04460445 04480447     A.B.C.D.E.F.G.H.
   3a2f0:	044a0449 044c044b 044e044d 0451044f     I.J.K.L.M.N.O.Q.
   3a300:	04530452 04550454 04570456 04590458     R.S.T.U.V.W.X.Y.
   3a310:	045b045a 045e045c 2170045f 21722171     Z.[.\.^._.p!q!r!
   3a320:	21742173 21762175 21782177 217a2179     s!t!u!v!w!x!y!z!
   3a330:	217c217b 217e217d ff41217f ff43ff42     {!|!}!~!.!A.B.C.
   3a340:	ff45ff44 ff47ff46 ff49ff48 ff4bff4a     D.E.F.G.H.I.J.K.
   3a350:	ff4dff4c ff4fff4e ff51ff50 ff53ff52     L.M.N.O.P.Q.R.S.
   3a360:	ff55ff54 ff57ff56 ff59ff58 0000ff5a     T.U.V.W.X.Y.Z...

0003a370 <tbl_upper.4309>:
   3a370:	00420041 00440043 00460045 00480047     A.B.C.D.E.F.G.H.
   3a380:	004a0049 004c004b 004e004d 0050004f     I.J.K.L.M.N.O.P.
   3a390:	00520051 00540053 00560055 00580057     Q.R.S.T.U.V.W.X.
   3a3a0:	005a0059 ffe00021 ffe5ffe1 ffe3ffe2     Y.Z.!...........
   3a3b0:	00c100c0 00c300c2 00c500c4 00c700c6     ................
   3a3c0:	00c900c8 00cb00ca 00cd00cc 00cf00ce     ................
   3a3d0:	00d100d0 00d300d2 00d500d4 00d800d6     ................
   3a3e0:	00da00d9 00dc00db 00de00dd 01000178     ............x...
   3a3f0:	01040102 01080106 010c010a 0110010e     ................
   3a400:	01140112 01180116 011c011a 0120011e     .............. .
   3a410:	01240122 01280126 012c012a 0130012e     ".$.&.(.*.,...0.
   3a420:	01340132 01390136 013d013b 0141013f     2.4.6.9.;.=.?.A.
   3a430:	01450143 014a0147 014e014c 01520150     C.E.G.J.L.N.P.R.
   3a440:	01560154 015a0158 015e015c 01620160     T.V.X.Z.\.^.`.b.
   3a450:	01660164 016a0168 016e016c 01720170     d.f.h.j.l.n.p.r.
   3a460:	01760174 017b0179 0191017d 03920391     t.v.y.{.}.......
   3a470:	03940393 03960395 03980397 039a0399     ................
   3a480:	039c039b 039e039d 03a0039f 03a303a1     ................
   3a490:	03a503a4 03a703a6 03a903a8 041003aa     ................
   3a4a0:	04120411 04140413 04160415 04180417     ................
   3a4b0:	041a0419 041c041b 041e041d 0420041f     .............. .
   3a4c0:	04220421 04240423 04260425 04280427     !.".#.$.%.&.'.(.
   3a4d0:	042a0429 042c042b 042e042d 0401042f     ).*.+.,.-.../...
   3a4e0:	04030402 04050404 04070406 04090408     ................
   3a4f0:	040b040a 040e040c 2160040f 21622161     ..........`!a!b!
   3a500:	21642163 21662165 21682167 216a2169     c!d!e!f!g!h!i!j!
   3a510:	216c216b 216e216d ff21216f ff23ff22     k!l!m!n!o!!.".#.
   3a520:	ff25ff24 ff27ff26 ff29ff28 ff2bff2a     $.%.&.'.(.).*.+.
   3a530:	ff2dff2c ff2fff2e ff31ff30 ff33ff32     ,.-.../.0.1.2.3.
   3a540:	ff35ff34 ff37ff36 ff39ff38 0000ff3a     4.5.6.7.8.9.:...
   3a550:	0002e536 0002e536 0002e536 0002e3c4     6...6...6.......
   3a560:	0002e536 0002e4ae 0002e536 0002e536     6.......6...6...
   3a570:	0002e536 0002e536 0002e536 0002e536     6...6...6...6...
   3a580:	0002e536 0002e528 4354514d 00000000     6...(...MQTC....
   3a590:	00000004 00000000 00000000 00000000     ................
   3a5a0:	0001003c 5754514d 00000000 00000000     <...MQTW........
	...
   3a5e0:	4354514d 00000000 00000004 00000000     MQTC............
	...
   3a5f8:	0001003c 5754514d 00000000 00000000     <...MQTW........
	...
   3a638:	5454514d 00000000 7349514d 00007064     MQTT....MQIsdp..
   3a648:	656d7461 2e312f6c 00322e30 70747468     atmel/1.0.2.http
   3a658:	002f2f3a 70747468 2f2f3a73 00000000     ://.https://....
   3a668:	20544547 00000000 54534f50 00000020     GET ....POST ...
   3a678:	454c4544 00204554 20545550 00000000     DELETE .PUT ....
   3a688:	4954504f 20534e4f 00000000 44414548     OPTIONS ....HEAD
   3a698:	00000020 54544820 2e312f50 000a0d31      ... HTTP/1.1...
   3a6a8:	72657355 6567412d 203a746e 00000000     User-Agent: ....
   3a6b8:	00000a0d 74736f48 0000203a 6e6e6f43     ....Host: ..Conn
   3a6c8:	69746365 203a6e6f 7065654b 696c412d     ection: Keep-Ali
   3a6d8:	0a0d6576 00000000 65636341 452d7470     ve......Accept-E
   3a6e8:	646f636e 3a676e69 000a0d20 65636341     ncoding: ...Acce
   3a6f8:	432d7470 73726168 203a7465 2d667475     pt-Charset: utf-
   3a708:	000a0d38 6e617254 72656673 636e452d     8...Transfer-Enc
   3a718:	6e69646f 63203a67 6b6e7568 0a0d6465     oding: chunked..
   3a728:	00000000 00007525 746e6f43 2d746e65     ....%u..Content-
   3a738:	676e654c 203a6874 00000000 33323130     Length: ....0123
   3a748:	37363534 62613938 66656463 6e617254     456789abcdefTran
   3a758:	72656673 636e452d 6e69646f 00203a67     sfer-Encoding: .
   3a768:	6e6e6f43 69746365 203a6e6f 00000000     Connection: ....
   3a778:	50545448 0000002f 00000d31 0003062a     HTTP/...1...*...
   3a788:	00030624 0003061e 00030618 00030630     $...........0...
   3a798:	00030612 00030630 0003060c 00030606     ....0...........
   3a7a8:	00030630 00030600 00030600 000305fa     0...............
   3a7b8:	000305f4 000305ee 42002000 42002400     ......... .B.$.B
   3a7c8:	42002800 0a0d0a0d 2d2d2d2d 4553452d     .(.B....-----ESE
   3a7d8:	20363135 6e69614d 6f725020 6d617267     516 Main Program
   3a7e8:	2d2d2d2d 000a0d2d 0a0d0a0d 74696e49     -----.......Init
   3a7f8:	696c6169 4820657a 2e2e2e57 00000a0d     ialize HW.......
   3a808:	6f727245 6e692072 61697469 697a696c     Error initializi
   3a818:	4920676e 44204332 65766972 0a0d2172     ng I2C Driver!..
   3a828:	00000000 74696e49 696c6169 2064657a     ....Initialized 
   3a838:	20433249 76697244 0d217265 0000000a     I2C Driver!.....
   3a848:	6f727245 6e692072 61697469 697a696c     Error initializi
   3a858:	5320676e 61736565 0a0d2177 00000000     ng Seesaw!......
   3a868:	74696e49 696c6169 2064657a 73656553     Initialized Sees
   3a878:	0d217761 0000000a 6f727245 6e692072     aw!.....Error in
   3a888:	61697469 697a696c 4f20676e 2044454c     itializing OLED 
   3a898:	76697244 0d217265 0000000a 74696e49     Driver!.....Init
   3a8a8:	696c6169 2064657a 44454c4f 69724420     ialized OLED Dri
   3a8b8:	21726576 00000a0d 70616548 66656220     ver!....Heap bef
   3a8c8:	2065726f 72617473 676e6974 73617420     ore starting tas
   3a8d8:	203a736b 0a0d6425 00000000 5f494c43     ks: %d......CLI_
   3a8e8:	4b534154 00000000 3a525245 494c4320     TASK....ERR: CLI
   3a8f8:	73617420 6f63206b 20646c75 20746f6e      task could not 
   3a908:	69206562 6974696e 7a696c61 0d216465     be initialized!.
   3a918:	0000000a 70616548 74666120 73207265     ....Heap after s
   3a928:	74726174 20676e69 3a494c43 0d642520     tarting CLI: %d.
   3a938:	0000000a 49464957 5341545f 0000004b     ....WIFI_TASK...
   3a948:	3a525245 46495720 61742049 63206b73     ERR: WIFI task c
   3a958:	646c756f 746f6e20 20656220 74696e69     ould not be init
   3a968:	696c6169 2164657a 00000a0d 70616548     ialized!....Heap
   3a978:	74666120 73207265 74726174 20676e69      after starting 
   3a988:	49464957 6425203a 00000a0d 54204955     WIFI: %d....UI T
   3a998:	006b7361 3a525245 20495520 6b736174     ask.ERR: UI task
   3a9a8:	756f6320 6e20646c 6220746f 6e692065      could not be in
   3a9b8:	61697469 657a696c 0a0d2164 00000000     itialized!......
   3a9c8:	70616548 74666120 73207265 74726174     Heap after start
   3a9d8:	20676e69 54204955 3a6b7361 0d642520     ing UI Task: %d.
   3a9e8:	0000000a 746e6f43 206c6f72 6b736154     ....Control Task
   3a9f8:	00000000 3a525245 6e6f4320 6c6f7274     ....ERR: Control
   3aa08:	73617420 6f63206b 20646c75 20746f6e      task could not 
   3aa18:	69206562 6974696e 7a696c61 0d216465     be initialized!.
   3aa28:	0000000a 70616548 74666120 73207265     ....Heap after s
   3aa38:	74726174 20676e69 746e6f43 206c6f72     tarting Control 
   3aa48:	6b736154 6425203a 00000a0d 6867694c     Task: %d....Ligh
   3aa58:	61542074 00006b73 3a525245 67694c20     t Task..ERR: Lig
   3aa68:	74207468 206b7361 6c756f63 6f6e2064     ht task could no
   3aa78:	65622074 696e6920 6c616974 64657a69     t be initialized
   3aa88:	000a0d21 70616548 74666120 73207265     !...Heap after s
   3aa98:	74726174 20676e69 6867694c 61542074     tarting Light Ta
   3aaa8:	203a6b73 0a0d6425 00000000 6f727245     sk: %d......Erro
   3aab8:	6e6f2072 6d656d20 2079726f 6f6c6c61     r on memory allo
   3aac8:	69746163 6f206e6f 5246206e 54524545     cation on FREERT
   3aad8:	0d21534f 0000000a 6f727245 6e6f2072     OS!.....Error on
   3aae8:	61747320 6f206b63 66726576 20776f6c      stack overflow 
   3aaf8:	46206e6f 52454552 21534f54 00000a0d     on FREERTOS!....
   3ab08:	00032f20 00032f02 00032ebc 00032dda      /.../.......-..
   3ab18:	00032ebc 00032ef4 00032ebc 00032dda     .............-..
   3ab28:	00032f02 00032f02 00032ef4 00032dda     ./.../.......-..
   3ab38:	00032dd2 00032dd2 00032dd2 00033138     .-...-...-..81..
   3ab48:	00033580 00033440 00033440 0003343c     .5..@4..@4..<4..
   3ab58:	00033558 00033558 0003354a 0003343c     X5..X5..J5..<4..
   3ab68:	00033558 0003354a 00033558 0003343c     X5..J5..X5..<4..
   3ab78:	00033560 00033560 00033560 00033764     `5..`5..`5..d7..

0003ab88 <_global_impure_ptr>:
   3ab88:	200000ec                                ... 

0003ab8c <__sf_fake_stderr>:
	...

0003abac <__sf_fake_stdin>:
	...

0003abcc <__sf_fake_stdout>:
	...
   3abec:	4f500043 00584953 2d23002e 00202b30     C.POSIX...#-0+ .
   3abfc:	004c6c68 45676665 30004746 34333231     hlL.efgEFG.01234
   3ac0c:	38373635 43424139 00464544 33323130     56789ABCDEF.0123
   3ac1c:	37363534 62613938 66656463 20200000              456789abcdef.

0003ac29 <_ctype_>:
   3ac29:	20202000 20202020 28282020 20282828     .         ((((( 
   3ac39:	20202020 20202020 20202020 20202020                     
   3ac49:	10108820 10101010 10101010 10101010      ...............
   3ac59:	04040410 04040404 10040404 10101010     ................
   3ac69:	41411010 41414141 01010101 01010101     ..AAAAAA........
   3ac79:	01010101 01010101 01010101 10101010     ................
   3ac89:	42421010 42424242 02020202 02020202     ..BBBBBB........
   3ac99:	02020202 02020202 02020202 10101010     ................
   3aca9:	00000020 00000000 00000000 00000000      ...............
	...

0003ad2c <_init>:
   3ad2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3ad2e:	46c0      	nop			; (mov r8, r8)
   3ad30:	bcf8      	pop	{r3, r4, r5, r6, r7}
   3ad32:	bc08      	pop	{r3}
   3ad34:	469e      	mov	lr, r3
   3ad36:	4770      	bx	lr

0003ad38 <__init_array_start>:
   3ad38:	000120dd 	.word	0x000120dd

0003ad3c <_fini>:
   3ad3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3ad3e:	46c0      	nop			; (mov r8, r8)
   3ad40:	bcf8      	pop	{r3, r4, r5, r6, r7}
   3ad42:	bc08      	pop	{r3}
   3ad44:	469e      	mov	lr, r3
   3ad46:	4770      	bx	lr

0003ad48 <__fini_array_start>:
   3ad48:	000120b5 	.word	0x000120b5
