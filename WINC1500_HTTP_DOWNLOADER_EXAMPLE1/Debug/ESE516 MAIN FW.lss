
ESE516 MAIN FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00019d70  00012000  00012000  00002000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000002b0  20000000  0002bd70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000052e4  200002b0  0002c020  000202b0  2**4
                  ALLOC
  3 .stack        00002004  20005594  00031304  000202b0  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000202b0  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000202d8  2**0
                  CONTENTS, READONLY
  6 .debug_info   001312b9  00000000  00000000  00020331  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000141a8  00000000  00000000  001515ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00032594  00000000  00000000  00165792  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00002758  00000000  00000000  00197d26  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000034f8  00000000  00000000  0019a47e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000418d6  00000000  00000000  0019d976  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0005b186  00000000  00000000  001df24c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000bc7c4  00000000  00000000  0023a3d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000079cc  00000000  00000000  002f6b98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00012000 <exception_table>:
   12000:	98 75 00 20 3d f9 01 00 21 f9 01 00 21 f9 01 00     .u. =...!...!...
	...
   1202c:	05 67 01 00 00 00 00 00 00 00 00 00 e1 67 01 00     .g...........g..
   1203c:	25 68 01 00 21 f9 01 00 21 f9 01 00 21 f9 01 00     %h..!...!...!...
   1204c:	19 da 01 00 99 d6 01 00 21 f9 01 00 bd 27 01 00     ........!....'..
   1205c:	21 f9 01 00 71 28 01 00 41 de 01 00 51 de 01 00     !...q(..A...Q...
   1206c:	61 de 01 00 71 de 01 00 81 de 01 00 91 de 01 00     a...q...........
   1207c:	f1 f8 01 00 01 f9 01 00 11 f9 01 00 05 52 01 00     .............R..
   1208c:	15 52 01 00 25 52 01 00 00 00 00 00 00 00 00 00     .R..%R..........
   1209c:	51 26 01 00 21 f9 01 00 15 27 01 00 21 f9 01 00     Q&..!....'..!...
   120ac:	21 f9 01 00 00 00 00 00                             !.......

000120b4 <__do_global_dtors_aux>:
   120b4:	b510      	push	{r4, lr}
   120b6:	4c06      	ldr	r4, [pc, #24]	; (120d0 <__do_global_dtors_aux+0x1c>)
   120b8:	7823      	ldrb	r3, [r4, #0]
   120ba:	2b00      	cmp	r3, #0
   120bc:	d107      	bne.n	120ce <__do_global_dtors_aux+0x1a>
   120be:	4b05      	ldr	r3, [pc, #20]	; (120d4 <__do_global_dtors_aux+0x20>)
   120c0:	2b00      	cmp	r3, #0
   120c2:	d002      	beq.n	120ca <__do_global_dtors_aux+0x16>
   120c4:	4804      	ldr	r0, [pc, #16]	; (120d8 <__do_global_dtors_aux+0x24>)
   120c6:	e000      	b.n	120ca <__do_global_dtors_aux+0x16>
   120c8:	bf00      	nop
   120ca:	2301      	movs	r3, #1
   120cc:	7023      	strb	r3, [r4, #0]
   120ce:	bd10      	pop	{r4, pc}
   120d0:	200002b0 	.word	0x200002b0
   120d4:	00000000 	.word	0x00000000
   120d8:	0002bd70 	.word	0x0002bd70

000120dc <frame_dummy>:
   120dc:	4b08      	ldr	r3, [pc, #32]	; (12100 <frame_dummy+0x24>)
   120de:	b510      	push	{r4, lr}
   120e0:	2b00      	cmp	r3, #0
   120e2:	d003      	beq.n	120ec <frame_dummy+0x10>
   120e4:	4907      	ldr	r1, [pc, #28]	; (12104 <frame_dummy+0x28>)
   120e6:	4808      	ldr	r0, [pc, #32]	; (12108 <frame_dummy+0x2c>)
   120e8:	e000      	b.n	120ec <frame_dummy+0x10>
   120ea:	bf00      	nop
   120ec:	4807      	ldr	r0, [pc, #28]	; (1210c <frame_dummy+0x30>)
   120ee:	6803      	ldr	r3, [r0, #0]
   120f0:	2b00      	cmp	r3, #0
   120f2:	d100      	bne.n	120f6 <frame_dummy+0x1a>
   120f4:	bd10      	pop	{r4, pc}
   120f6:	4b06      	ldr	r3, [pc, #24]	; (12110 <frame_dummy+0x34>)
   120f8:	2b00      	cmp	r3, #0
   120fa:	d0fb      	beq.n	120f4 <frame_dummy+0x18>
   120fc:	4798      	blx	r3
   120fe:	e7f9      	b.n	120f4 <frame_dummy+0x18>
   12100:	00000000 	.word	0x00000000
   12104:	200002b4 	.word	0x200002b4
   12108:	0002bd70 	.word	0x0002bd70
   1210c:	0002bd70 	.word	0x0002bd70
   12110:	00000000 	.word	0x00000000

00012114 <ssd1306_write_command>:
 * \param command the command to write
 */


void ssd1306_write_command(uint8_t command)
{
   12114:	b500      	push	{lr}
   12116:	b083      	sub	sp, #12
	//Send 0 command byte
	uint8_t data[2];
	data[0] = 0x00;
   12118:	aa01      	add	r2, sp, #4
   1211a:	2300      	movs	r3, #0
   1211c:	7013      	strb	r3, [r2, #0]
	data[1] = command;
   1211e:	7050      	strb	r0, [r2, #1]
	i2cOled.address = SSD1306_I2C_ADDRESS;
   12120:	4806      	ldr	r0, [pc, #24]	; (1213c <ssd1306_write_command+0x28>)
   12122:	213c      	movs	r1, #60	; 0x3c
   12124:	7001      	strb	r1, [r0, #0]
	i2cOled.msgOut = &data;
   12126:	6042      	str	r2, [r0, #4]
	i2cOled.lenOut = sizeof(data);
   12128:	2202      	movs	r2, #2
   1212a:	81c2      	strh	r2, [r0, #14]
	i2cOled.msgIn = 0;
   1212c:	6083      	str	r3, [r0, #8]
	i2cOled.lenIn = 0;
   1212e:	8183      	strh	r3, [r0, #12]
	
	I2cWriteDataWait(&i2cOled, 100);
   12130:	3128      	adds	r1, #40	; 0x28
   12132:	4b03      	ldr	r3, [pc, #12]	; (12140 <ssd1306_write_command+0x2c>)
   12134:	4798      	blx	r3
}
   12136:	b003      	add	sp, #12
   12138:	bd00      	pop	{pc}
   1213a:	46c0      	nop			; (mov r8, r8)
   1213c:	20004170 	.word	0x20004170
   12140:	00014551 	.word	0x00014551

00012144 <ssd1306_init>:
{
   12144:	b510      	push	{r4, lr}
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFF); //0xAE
   12146:	20ae      	movs	r0, #174	; 0xae
   12148:	4c19      	ldr	r4, [pc, #100]	; (121b0 <ssd1306_init+0x6c>)
   1214a:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO); //0XD4
   1214c:	20d5      	movs	r0, #213	; 0xd5
   1214e:	47a0      	blx	r4
	ssd1306_write_command(0x80);
   12150:	2080      	movs	r0, #128	; 0x80
   12152:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO); //0XA8
   12154:	20a8      	movs	r0, #168	; 0xa8
   12156:	47a0      	blx	r4
	ssd1306_write_command(0x3F); //2F
   12158:	203f      	movs	r0, #63	; 0x3f
   1215a:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET); //D3
   1215c:	20d3      	movs	r0, #211	; 0xd3
   1215e:	47a0      	blx	r4
	ssd1306_write_command(0x00);
   12160:	2000      	movs	r0, #0
   12162:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));	
   12164:	2040      	movs	r0, #64	; 0x40
   12166:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0); //A1
   12168:	20a1      	movs	r0, #161	; 0xa1
   1216a:	47a0      	blx	r4
	ssd1306_write_command(0XC8);
   1216c:	20c8      	movs	r0, #200	; 0xc8
   1216e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING); //8D
   12170:	208d      	movs	r0, #141	; 0x8d
   12172:	47a0      	blx	r4
	ssd1306_write_command(0x14);
   12174:	2014      	movs	r0, #20
   12176:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY); //A6
   12178:	20a6      	movs	r0, #166	; 0xa6
   1217a:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON); //0xA4
   1217c:	20a4      	movs	r0, #164	; 0xa4
   1217e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL0_SEG0| 0x1);
   12180:	20a1      	movs	r0, #161	; 0xa1
   12182:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
   12184:	20c8      	movs	r0, #200	; 0xc8
   12186:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
   12188:	20da      	movs	r0, #218	; 0xda
   1218a:	47a0      	blx	r4
	ssd1306_write_command(0x12);
   1218c:	2012      	movs	r0, #18
   1218e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
   12190:	2081      	movs	r0, #129	; 0x81
   12192:	47a0      	blx	r4
	ssd1306_write_command(0x8F);
   12194:	208f      	movs	r0, #143	; 0x8f
   12196:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
   12198:	20d9      	movs	r0, #217	; 0xd9
   1219a:	47a0      	blx	r4
	ssd1306_write_command(0xF1);
   1219c:	20f1      	movs	r0, #241	; 0xf1
   1219e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
   121a0:	20db      	movs	r0, #219	; 0xdb
   121a2:	47a0      	blx	r4
	ssd1306_write_command(0x40);
   121a4:	2040      	movs	r0, #64	; 0x40
   121a6:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
   121a8:	20af      	movs	r0, #175	; 0xaf
   121aa:	47a0      	blx	r4
}
   121ac:	bd10      	pop	{r4, pc}
   121ae:	46c0      	nop			; (mov r8, r8)
   121b0:	00012115 	.word	0x00012115

000121b4 <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
   121b4:	b500      	push	{lr}
   121b6:	b083      	sub	sp, #12
	uint8_t datum[2];
	datum[0] = 0x40;
   121b8:	ab01      	add	r3, sp, #4
   121ba:	2240      	movs	r2, #64	; 0x40
   121bc:	701a      	strb	r2, [r3, #0]
	datum[1] = data;
   121be:	7058      	strb	r0, [r3, #1]
	i2cOled.address = SSD1306_I2C_ADDRESS;
   121c0:	4806      	ldr	r0, [pc, #24]	; (121dc <ssd1306_write_data+0x28>)
   121c2:	3a04      	subs	r2, #4
   121c4:	7002      	strb	r2, [r0, #0]
	i2cOled.msgOut = &datum;
   121c6:	6043      	str	r3, [r0, #4]
	i2cOled.lenOut = sizeof(datum);
   121c8:	2302      	movs	r3, #2
   121ca:	81c3      	strh	r3, [r0, #14]
	i2cOled.msgIn = 0;
   121cc:	2300      	movs	r3, #0
   121ce:	6083      	str	r3, [r0, #8]
	i2cOled.lenIn = 0;
   121d0:	8183      	strh	r3, [r0, #12]
	
	I2cWriteDataWait(&i2cOled, 100);
   121d2:	2164      	movs	r1, #100	; 0x64
   121d4:	4b02      	ldr	r3, [pc, #8]	; (121e0 <ssd1306_write_data+0x2c>)
   121d6:	4798      	blx	r3
}
   121d8:	b003      	add	sp, #12
   121da:	bd00      	pop	{pc}
   121dc:	20004170 	.word	0x20004170
   121e0:	00014551 	.word	0x00014551

000121e4 <gfx_mono_set_framebuffer>:
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
	fbpointer = framebuffer;
   121e4:	4b01      	ldr	r3, [pc, #4]	; (121ec <gfx_mono_set_framebuffer+0x8>)
   121e6:	6018      	str	r0, [r3, #0]
}
   121e8:	4770      	bx	lr
   121ea:	46c0      	nop			; (mov r8, r8)
   121ec:	200002cc 	.word	0x200002cc

000121f0 <gfx_mono_framebuffer_put_byte>:
	gfx_mono_framebuffer_put_byte(0, 0, 0xFF);
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
   121f0:	b510      	push	{r4, lr}
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
   121f2:	4b04      	ldr	r3, [pc, #16]	; (12204 <gfx_mono_framebuffer_put_byte+0x14>)
   121f4:	681c      	ldr	r4, [r3, #0]
   121f6:	0103      	lsls	r3, r0, #4
   121f8:	1818      	adds	r0, r3, r0
   121fa:	0080      	lsls	r0, r0, #2
   121fc:	1820      	adds	r0, r4, r0
   121fe:	5442      	strb	r2, [r0, r1]
}
   12200:	bd10      	pop	{r4, pc}
   12202:	46c0      	nop			; (mov r8, r8)
   12204:	200002cc 	.word	0x200002cc

00012208 <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
   12208:	4b03      	ldr	r3, [pc, #12]	; (12218 <gfx_mono_framebuffer_get_byte+0x10>)
   1220a:	681a      	ldr	r2, [r3, #0]
   1220c:	0103      	lsls	r3, r0, #4
   1220e:	1818      	adds	r0, r3, r0
   12210:	0080      	lsls	r0, r0, #2
   12212:	1810      	adds	r0, r2, r0
   12214:	5c40      	ldrb	r0, [r0, r1]
}
   12216:	4770      	bx	lr
   12218:	200002cc 	.word	0x200002cc

0001221c <gfx_mono_generic_draw_vertical_line>:
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_vertical_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
   1221c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1221e:	46ce      	mov	lr, r9
   12220:	b500      	push	{lr}
   12222:	b082      	sub	sp, #8
   12224:	9001      	str	r0, [sp, #4]
   12226:	001e      	movs	r6, r3
	if (length == 0) {
   12228:	2a00      	cmp	r2, #0
   1222a:	d031      	beq.n	12290 <gfx_mono_generic_draw_vertical_line+0x74>
		return;
	}

	gfx_coord_t y2 = y + length - 1;
   1222c:	1e4b      	subs	r3, r1, #1
   1222e:	18d2      	adds	r2, r2, r3
   12230:	b2d2      	uxtb	r2, r2

	if (y == y2) {
   12232:	4291      	cmp	r1, r2
   12234:	d030      	beq.n	12298 <gfx_mono_generic_draw_vertical_line+0x7c>
   12236:	1c13      	adds	r3, r2, #0
   12238:	2a1f      	cmp	r2, #31
   1223a:	d900      	bls.n	1223e <gfx_mono_generic_draw_vertical_line+0x22>
   1223c:	231f      	movs	r3, #31
   1223e:	b2db      	uxtb	r3, r3

	if (y2 >= GFX_MONO_LCD_HEIGHT - 1) {
		y2 = GFX_MONO_LCD_HEIGHT - 1;
	}

	gfx_coord_t y1page = y / 8;
   12240:	08cc      	lsrs	r4, r1, #3
	gfx_coord_t y2page = y2 / 8;
   12242:	08df      	lsrs	r7, r3, #3

	uint8_t y1bitpos = y & 0x07;
   12244:	2207      	movs	r2, #7
	uint8_t y2bitpos = y2 & 0x07;

	uint8_t y1pixelmask = 0xFF << y1bitpos;
   12246:	4011      	ands	r1, r2
   12248:	20ff      	movs	r0, #255	; 0xff
   1224a:	0005      	movs	r5, r0
   1224c:	408d      	lsls	r5, r1
   1224e:	b2e9      	uxtb	r1, r5
	uint8_t y2pixelmask = 0xFF >> (7 - y2bitpos);
   12250:	4013      	ands	r3, r2
   12252:	1ad3      	subs	r3, r2, r3
   12254:	4118      	asrs	r0, r3
   12256:	b2c3      	uxtb	r3, r0
   12258:	4699      	mov	r9, r3

	/* The pixels are on the same page; combine masks */
	if (y1page == y2page) {
   1225a:	42bc      	cmp	r4, r7
   1225c:	d020      	beq.n	122a0 <gfx_mono_generic_draw_vertical_line+0x84>
		uint8_t pixelmask = y1pixelmask & y2pixelmask;
		gfx_mono_mask_byte(y1page, x, pixelmask, color);
	} else {
		gfx_mono_mask_byte(y1page, x, y1pixelmask, color);
   1225e:	0033      	movs	r3, r6
   12260:	000a      	movs	r2, r1
   12262:	9901      	ldr	r1, [sp, #4]
   12264:	0020      	movs	r0, r4
   12266:	4d12      	ldr	r5, [pc, #72]	; (122b0 <gfx_mono_generic_draw_vertical_line+0x94>)
   12268:	47a8      	blx	r5

		while (++y1page < y2page) {
   1226a:	3401      	adds	r4, #1
   1226c:	42a7      	cmp	r7, r4
   1226e:	d909      	bls.n	12284 <gfx_mono_generic_draw_vertical_line+0x68>
			gfx_mono_mask_byte(y1page, x, 0xFF, color);
   12270:	4d0f      	ldr	r5, [pc, #60]	; (122b0 <gfx_mono_generic_draw_vertical_line+0x94>)
   12272:	0033      	movs	r3, r6
   12274:	22ff      	movs	r2, #255	; 0xff
   12276:	9901      	ldr	r1, [sp, #4]
   12278:	0020      	movs	r0, r4
   1227a:	47a8      	blx	r5
		while (++y1page < y2page) {
   1227c:	3401      	adds	r4, #1
   1227e:	b2e4      	uxtb	r4, r4
   12280:	42a7      	cmp	r7, r4
   12282:	d8f6      	bhi.n	12272 <gfx_mono_generic_draw_vertical_line+0x56>
		}

		gfx_mono_mask_byte(y2page, x, y2pixelmask, color);
   12284:	0033      	movs	r3, r6
   12286:	464a      	mov	r2, r9
   12288:	9901      	ldr	r1, [sp, #4]
   1228a:	0038      	movs	r0, r7
   1228c:	4c08      	ldr	r4, [pc, #32]	; (122b0 <gfx_mono_generic_draw_vertical_line+0x94>)
   1228e:	47a0      	blx	r4
	}
}
   12290:	b002      	add	sp, #8
   12292:	bc04      	pop	{r2}
   12294:	4691      	mov	r9, r2
   12296:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gfx_mono_draw_pixel(x, y, color);
   12298:	0032      	movs	r2, r6
   1229a:	4b06      	ldr	r3, [pc, #24]	; (122b4 <gfx_mono_generic_draw_vertical_line+0x98>)
   1229c:	4798      	blx	r3
		return;
   1229e:	e7f7      	b.n	12290 <gfx_mono_generic_draw_vertical_line+0x74>
		gfx_mono_mask_byte(y1page, x, pixelmask, color);
   122a0:	001a      	movs	r2, r3
   122a2:	400a      	ands	r2, r1
   122a4:	0033      	movs	r3, r6
   122a6:	9901      	ldr	r1, [sp, #4]
   122a8:	0020      	movs	r0, r4
   122aa:	4c01      	ldr	r4, [pc, #4]	; (122b0 <gfx_mono_generic_draw_vertical_line+0x94>)
   122ac:	47a0      	blx	r4
   122ae:	e7ef      	b.n	12290 <gfx_mono_generic_draw_vertical_line+0x74>
   122b0:	0001260d 	.word	0x0001260d
   122b4:	000125a5 	.word	0x000125a5

000122b8 <gfx_mono_generic_draw_line>:
 * \param[in]  color       Pixel operation of the line.
 */
void gfx_mono_generic_draw_line(gfx_coord_t x1, gfx_coord_t y1,
		gfx_coord_t x2, gfx_coord_t y2,
		enum gfx_mono_color color)
{
   122b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   122ba:	46de      	mov	lr, fp
   122bc:	4657      	mov	r7, sl
   122be:	464e      	mov	r6, r9
   122c0:	4645      	mov	r5, r8
   122c2:	b5e0      	push	{r5, r6, r7, lr}
   122c4:	b085      	sub	sp, #20
   122c6:	0004      	movs	r4, r0
   122c8:	000d      	movs	r5, r1
   122ca:	a90e      	add	r1, sp, #56	; 0x38
   122cc:	7809      	ldrb	r1, [r1, #0]
   122ce:	9101      	str	r1, [sp, #4]
	int8_t dx;
	int8_t dy;
	int8_t e;

	/* swap x1,y1  with x2,y2 */
	if (x1 > x2) {
   122d0:	4290      	cmp	r0, r2
   122d2:	d904      	bls.n	122de <gfx_mono_generic_draw_line+0x26>
   122d4:	0029      	movs	r1, r5
		dx = x1;
		x1 = x2;
		x2 = dx;
		dy = y1;
		y1 = y2;
   122d6:	001d      	movs	r5, r3
		y2 = dy;
   122d8:	000b      	movs	r3, r1
		x1 = x2;
   122da:	0014      	movs	r4, r2
		x2 = dx;
   122dc:	0002      	movs	r2, r0
	}

	dx = x2 - x1;
   122de:	1b12      	subs	r2, r2, r4
   122e0:	b2d2      	uxtb	r2, r2
   122e2:	b251      	sxtb	r1, r2
	dy = y2 - y1;
   122e4:	1b5b      	subs	r3, r3, r5
   122e6:	b2db      	uxtb	r3, r3
   122e8:	b258      	sxtb	r0, r3

	if (dx < 0) {
		xinc = -1;
		dx = -dx;
	} else {
		xinc = 1;
   122ea:	2601      	movs	r6, #1
   122ec:	46b2      	mov	sl, r6
	if (dx < 0) {
   122ee:	2900      	cmp	r1, #0
   122f0:	db13      	blt.n	1231a <gfx_mono_generic_draw_line+0x62>

	if (dy < 0) {
		yinc = -1;
		dy = -dy;
	} else {
		yinc = 1;
   122f2:	2201      	movs	r2, #1
   122f4:	4693      	mov	fp, r2
	if (dy < 0) {
   122f6:	2800      	cmp	r0, #0
   122f8:	db15      	blt.n	12326 <gfx_mono_generic_draw_line+0x6e>
	}

	if (dx > dy) {
   122fa:	4281      	cmp	r1, r0
   122fc:	dd2e      	ble.n	1235c <gfx_mono_generic_draw_line+0xa4>
		e = dy - dx;
   122fe:	b2c3      	uxtb	r3, r0
   12300:	4699      	mov	r9, r3
   12302:	b2cb      	uxtb	r3, r1
   12304:	9303      	str	r3, [sp, #12]
   12306:	464a      	mov	r2, r9
   12308:	1ad6      	subs	r6, r2, r3
   1230a:	b276      	sxtb	r6, r6
		for (i = 0; i <= dx; i++) {
   1230c:	9102      	str	r1, [sp, #8]
   1230e:	2900      	cmp	r1, #0
   12310:	db47      	blt.n	123a2 <gfx_mono_generic_draw_line+0xea>
   12312:	2700      	movs	r7, #0
			gfx_mono_draw_pixel(x, y, color);
   12314:	4b26      	ldr	r3, [pc, #152]	; (123b0 <gfx_mono_generic_draw_line+0xf8>)
   12316:	4698      	mov	r8, r3
   12318:	e014      	b.n	12344 <gfx_mono_generic_draw_line+0x8c>
		dx = -dx;
   1231a:	4252      	negs	r2, r2
   1231c:	b251      	sxtb	r1, r2
		xinc = -1;
   1231e:	2201      	movs	r2, #1
   12320:	4252      	negs	r2, r2
   12322:	4692      	mov	sl, r2
   12324:	e7e5      	b.n	122f2 <gfx_mono_generic_draw_line+0x3a>
		dy = -dy;
   12326:	425b      	negs	r3, r3
   12328:	b258      	sxtb	r0, r3
		yinc = -1;
   1232a:	2301      	movs	r3, #1
   1232c:	425b      	negs	r3, r3
   1232e:	469b      	mov	fp, r3
   12330:	e7e3      	b.n	122fa <gfx_mono_generic_draw_line+0x42>
			if (e >= 0) {
				e -= dx;
				y += yinc;
			}

			e += dy;
   12332:	444e      	add	r6, r9
   12334:	b276      	sxtb	r6, r6
   12336:	4454      	add	r4, sl
   12338:	b2e4      	uxtb	r4, r4
		for (i = 0; i <= dx; i++) {
   1233a:	3701      	adds	r7, #1
   1233c:	b2ff      	uxtb	r7, r7
   1233e:	9b02      	ldr	r3, [sp, #8]
   12340:	429f      	cmp	r7, r3
   12342:	dc2e      	bgt.n	123a2 <gfx_mono_generic_draw_line+0xea>
			gfx_mono_draw_pixel(x, y, color);
   12344:	9a01      	ldr	r2, [sp, #4]
   12346:	0029      	movs	r1, r5
   12348:	0020      	movs	r0, r4
   1234a:	47c0      	blx	r8
			if (e >= 0) {
   1234c:	2e00      	cmp	r6, #0
   1234e:	dbf0      	blt.n	12332 <gfx_mono_generic_draw_line+0x7a>
				e -= dx;
   12350:	9b03      	ldr	r3, [sp, #12]
   12352:	1af6      	subs	r6, r6, r3
   12354:	b276      	sxtb	r6, r6
				y += yinc;
   12356:	445d      	add	r5, fp
   12358:	b2ed      	uxtb	r5, r5
   1235a:	e7ea      	b.n	12332 <gfx_mono_generic_draw_line+0x7a>
			x += xinc;
		}
	} else {
		e = dx - dy;
   1235c:	b2cb      	uxtb	r3, r1
   1235e:	4698      	mov	r8, r3
   12360:	b2c3      	uxtb	r3, r0
   12362:	9303      	str	r3, [sp, #12]
   12364:	4642      	mov	r2, r8
   12366:	1ad6      	subs	r6, r2, r3
   12368:	b276      	sxtb	r6, r6
		for (i = 0; i <= dy; i++) {
   1236a:	9002      	str	r0, [sp, #8]
   1236c:	2800      	cmp	r0, #0
   1236e:	db18      	blt.n	123a2 <gfx_mono_generic_draw_line+0xea>
   12370:	2700      	movs	r7, #0
			gfx_mono_draw_pixel(x, y, color);
   12372:	4b0f      	ldr	r3, [pc, #60]	; (123b0 <gfx_mono_generic_draw_line+0xf8>)
   12374:	4699      	mov	r9, r3
   12376:	e008      	b.n	1238a <gfx_mono_generic_draw_line+0xd2>
			if (e >= 0) {
				e -= dy;
				x += xinc;
			}

			e += dx;
   12378:	4446      	add	r6, r8
   1237a:	b276      	sxtb	r6, r6
   1237c:	445d      	add	r5, fp
   1237e:	b2ed      	uxtb	r5, r5
		for (i = 0; i <= dy; i++) {
   12380:	3701      	adds	r7, #1
   12382:	b2ff      	uxtb	r7, r7
   12384:	9b02      	ldr	r3, [sp, #8]
   12386:	429f      	cmp	r7, r3
   12388:	dc0b      	bgt.n	123a2 <gfx_mono_generic_draw_line+0xea>
			gfx_mono_draw_pixel(x, y, color);
   1238a:	9a01      	ldr	r2, [sp, #4]
   1238c:	0029      	movs	r1, r5
   1238e:	0020      	movs	r0, r4
   12390:	47c8      	blx	r9
			if (e >= 0) {
   12392:	2e00      	cmp	r6, #0
   12394:	dbf0      	blt.n	12378 <gfx_mono_generic_draw_line+0xc0>
				e -= dy;
   12396:	9b03      	ldr	r3, [sp, #12]
   12398:	1af6      	subs	r6, r6, r3
   1239a:	b276      	sxtb	r6, r6
				x += xinc;
   1239c:	4454      	add	r4, sl
   1239e:	b2e4      	uxtb	r4, r4
   123a0:	e7ea      	b.n	12378 <gfx_mono_generic_draw_line+0xc0>
			y += yinc;
		}
	}
}
   123a2:	b005      	add	sp, #20
   123a4:	bc3c      	pop	{r2, r3, r4, r5}
   123a6:	4690      	mov	r8, r2
   123a8:	4699      	mov	r9, r3
   123aa:	46a2      	mov	sl, r4
   123ac:	46ab      	mov	fp, r5
   123ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   123b0:	000125a5 	.word	0x000125a5

000123b4 <gfx_mono_generic_draw_filled_circle>:
 * \param[in]  quadrant_mask Bitmask indicating which quadrants to draw.
 */
void gfx_mono_generic_draw_filled_circle(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t radius, enum gfx_mono_color color,
		uint8_t quadrant_mask)
{
   123b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   123b6:	46de      	mov	lr, fp
   123b8:	4657      	mov	r7, sl
   123ba:	464e      	mov	r6, r9
   123bc:	4645      	mov	r5, r8
   123be:	b5e0      	push	{r5, r6, r7, lr}
   123c0:	b089      	sub	sp, #36	; 0x24
   123c2:	9103      	str	r1, [sp, #12]
   123c4:	0016      	movs	r6, r2
   123c6:	9301      	str	r3, [sp, #4]
   123c8:	ab12      	add	r3, sp, #72	; 0x48
   123ca:	781b      	ldrb	r3, [r3, #0]
	gfx_coord_t offset_x;
	gfx_coord_t offset_y;
	int16_t error;

	/* Draw only a pixel if radius is zero. */
	if (radius == 0) {
   123cc:	2a00      	cmp	r2, #0
   123ce:	d015      	beq.n	123fc <gfx_mono_generic_draw_filled_circle+0x48>
	}

	/* Set up start iterators. */
	offset_x = 0;
	offset_y = radius;
	error = 3 - 2 * radius;
   123d0:	0054      	lsls	r4, r2, #1
   123d2:	2203      	movs	r2, #3
   123d4:	1b14      	subs	r4, r2, r4
   123d6:	9a03      	ldr	r2, [sp, #12]
   123d8:	4691      	mov	r9, r2
   123da:	4680      	mov	r8, r0
   123dc:	2701      	movs	r7, #1

	/* Iterate offset_x from 0 to radius. */
	while (offset_x <= offset_y) {
		/* Draw vertical lines tracking each quadrant. */
		if (quadrant_mask & GFX_QUADRANT0) {
   123de:	2203      	movs	r2, #3
   123e0:	401a      	ands	r2, r3
   123e2:	9204      	str	r2, [sp, #16]
					y - offset_x, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x + offset_x,
					y - offset_y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT1) {
   123e4:	220c      	movs	r2, #12
   123e6:	401a      	ands	r2, r3
   123e8:	9205      	str	r2, [sp, #20]
					y - offset_x, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x - offset_x,
					y - offset_y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT2) {
   123ea:	2230      	movs	r2, #48	; 0x30
   123ec:	401a      	ands	r2, r3
   123ee:	9206      	str	r2, [sp, #24]
					y, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x - offset_x,
					y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT3) {
   123f0:	223f      	movs	r2, #63	; 0x3f
   123f2:	4393      	bics	r3, r2
   123f4:	9307      	str	r3, [sp, #28]
   123f6:	46a2      	mov	sl, r4
   123f8:	0004      	movs	r4, r0
   123fa:	e057      	b.n	124ac <gfx_mono_generic_draw_filled_circle+0xf8>
		gfx_mono_draw_pixel(x, y, color);
   123fc:	9a01      	ldr	r2, [sp, #4]
   123fe:	4b3f      	ldr	r3, [pc, #252]	; (124fc <gfx_mono_generic_draw_filled_circle+0x148>)
   12400:	4798      	blx	r3
		}

		/* Next X. */
		++offset_x;
	}
}
   12402:	b009      	add	sp, #36	; 0x24
   12404:	bc3c      	pop	{r2, r3, r4, r5}
   12406:	4690      	mov	r8, r2
   12408:	4699      	mov	r9, r3
   1240a:	46a2      	mov	sl, r4
   1240c:	46ab      	mov	fp, r5
   1240e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			gfx_mono_draw_vertical_line(x + offset_y,
   12410:	4643      	mov	r3, r8
   12412:	1998      	adds	r0, r3, r6
   12414:	b2c0      	uxtb	r0, r0
   12416:	9b01      	ldr	r3, [sp, #4]
   12418:	003a      	movs	r2, r7
   1241a:	4649      	mov	r1, r9
   1241c:	4d38      	ldr	r5, [pc, #224]	; (12500 <gfx_mono_generic_draw_filled_circle+0x14c>)
   1241e:	47a8      	blx	r5
			gfx_mono_draw_vertical_line(x + offset_x,
   12420:	1c72      	adds	r2, r6, #1
   12422:	b2d2      	uxtb	r2, r2
   12424:	9903      	ldr	r1, [sp, #12]
   12426:	1b89      	subs	r1, r1, r6
   12428:	b2c9      	uxtb	r1, r1
   1242a:	4640      	mov	r0, r8
   1242c:	3801      	subs	r0, #1
   1242e:	1838      	adds	r0, r7, r0
   12430:	b2c0      	uxtb	r0, r0
   12432:	9b01      	ldr	r3, [sp, #4]
   12434:	4d32      	ldr	r5, [pc, #200]	; (12500 <gfx_mono_generic_draw_filled_circle+0x14c>)
   12436:	47a8      	blx	r5
   12438:	e03e      	b.n	124b8 <gfx_mono_generic_draw_filled_circle+0x104>
			gfx_mono_draw_vertical_line(x - offset_y,
   1243a:	4643      	mov	r3, r8
   1243c:	1b98      	subs	r0, r3, r6
   1243e:	b2c0      	uxtb	r0, r0
   12440:	9b01      	ldr	r3, [sp, #4]
   12442:	003a      	movs	r2, r7
   12444:	4649      	mov	r1, r9
   12446:	4d2e      	ldr	r5, [pc, #184]	; (12500 <gfx_mono_generic_draw_filled_circle+0x14c>)
   12448:	47a8      	blx	r5
			gfx_mono_draw_vertical_line(x - offset_x,
   1244a:	1c72      	adds	r2, r6, #1
   1244c:	b2d2      	uxtb	r2, r2
   1244e:	9903      	ldr	r1, [sp, #12]
   12450:	1b89      	subs	r1, r1, r6
   12452:	b2c9      	uxtb	r1, r1
   12454:	9b01      	ldr	r3, [sp, #4]
   12456:	0020      	movs	r0, r4
   12458:	4d29      	ldr	r5, [pc, #164]	; (12500 <gfx_mono_generic_draw_filled_circle+0x14c>)
   1245a:	47a8      	blx	r5
   1245c:	e02f      	b.n	124be <gfx_mono_generic_draw_filled_circle+0x10a>
			gfx_mono_draw_vertical_line(x - offset_y,
   1245e:	4643      	mov	r3, r8
   12460:	1b98      	subs	r0, r3, r6
   12462:	b2c0      	uxtb	r0, r0
   12464:	9b01      	ldr	r3, [sp, #4]
   12466:	003a      	movs	r2, r7
   12468:	9903      	ldr	r1, [sp, #12]
   1246a:	4d25      	ldr	r5, [pc, #148]	; (12500 <gfx_mono_generic_draw_filled_circle+0x14c>)
   1246c:	47a8      	blx	r5
			gfx_mono_draw_vertical_line(x - offset_x,
   1246e:	1c72      	adds	r2, r6, #1
   12470:	b2d2      	uxtb	r2, r2
   12472:	9b01      	ldr	r3, [sp, #4]
   12474:	9903      	ldr	r1, [sp, #12]
   12476:	0020      	movs	r0, r4
   12478:	47a8      	blx	r5
   1247a:	e023      	b.n	124c4 <gfx_mono_generic_draw_filled_circle+0x110>
		if (error < 0) {
   1247c:	4653      	mov	r3, sl
   1247e:	2b00      	cmp	r3, #0
   12480:	db35      	blt.n	124ee <gfx_mono_generic_draw_filled_circle+0x13a>
			error += (((offset_x - offset_y) << 2) + 10);
   12482:	9b02      	ldr	r3, [sp, #8]
   12484:	1b9d      	subs	r5, r3, r6
   12486:	00ad      	lsls	r5, r5, #2
   12488:	4653      	mov	r3, sl
   1248a:	330a      	adds	r3, #10
   1248c:	18ed      	adds	r5, r5, r3
   1248e:	b22b      	sxth	r3, r5
   12490:	469a      	mov	sl, r3
			--offset_y;
   12492:	3e01      	subs	r6, #1
   12494:	b2f6      	uxtb	r6, r6
   12496:	1c7b      	adds	r3, r7, #1
   12498:	b2db      	uxtb	r3, r3
   1249a:	3c01      	subs	r4, #1
   1249c:	b2e4      	uxtb	r4, r4
   1249e:	464a      	mov	r2, r9
   124a0:	3a01      	subs	r2, #1
   124a2:	b2d2      	uxtb	r2, r2
   124a4:	4691      	mov	r9, r2
	while (offset_x <= offset_y) {
   124a6:	42be      	cmp	r6, r7
   124a8:	d3ab      	bcc.n	12402 <gfx_mono_generic_draw_filled_circle+0x4e>
   124aa:	001f      	movs	r7, r3
   124ac:	1e7d      	subs	r5, r7, #1
   124ae:	b2eb      	uxtb	r3, r5
   124b0:	9302      	str	r3, [sp, #8]
		if (quadrant_mask & GFX_QUADRANT0) {
   124b2:	9b04      	ldr	r3, [sp, #16]
   124b4:	2b00      	cmp	r3, #0
   124b6:	d1ab      	bne.n	12410 <gfx_mono_generic_draw_filled_circle+0x5c>
		if (quadrant_mask & GFX_QUADRANT1) {
   124b8:	9b05      	ldr	r3, [sp, #20]
   124ba:	2b00      	cmp	r3, #0
   124bc:	d1bd      	bne.n	1243a <gfx_mono_generic_draw_filled_circle+0x86>
		if (quadrant_mask & GFX_QUADRANT2) {
   124be:	9b06      	ldr	r3, [sp, #24]
   124c0:	2b00      	cmp	r3, #0
   124c2:	d1cc      	bne.n	1245e <gfx_mono_generic_draw_filled_circle+0xaa>
		if (quadrant_mask & GFX_QUADRANT3) {
   124c4:	9b07      	ldr	r3, [sp, #28]
   124c6:	2b00      	cmp	r3, #0
   124c8:	d0d8      	beq.n	1247c <gfx_mono_generic_draw_filled_circle+0xc8>
			gfx_mono_draw_vertical_line(x + offset_y,
   124ca:	4643      	mov	r3, r8
   124cc:	1998      	adds	r0, r3, r6
   124ce:	b2c0      	uxtb	r0, r0
   124d0:	9b01      	ldr	r3, [sp, #4]
   124d2:	003a      	movs	r2, r7
   124d4:	9903      	ldr	r1, [sp, #12]
   124d6:	4d0a      	ldr	r5, [pc, #40]	; (12500 <gfx_mono_generic_draw_filled_circle+0x14c>)
   124d8:	47a8      	blx	r5
			gfx_mono_draw_vertical_line(x + offset_x,
   124da:	1c72      	adds	r2, r6, #1
   124dc:	b2d2      	uxtb	r2, r2
   124de:	4640      	mov	r0, r8
   124e0:	3801      	subs	r0, #1
   124e2:	1838      	adds	r0, r7, r0
   124e4:	b2c0      	uxtb	r0, r0
   124e6:	9b01      	ldr	r3, [sp, #4]
   124e8:	9903      	ldr	r1, [sp, #12]
   124ea:	47a8      	blx	r5
   124ec:	e7c6      	b.n	1247c <gfx_mono_generic_draw_filled_circle+0xc8>
			error += ((offset_x << 2) + 6);
   124ee:	3306      	adds	r3, #6
   124f0:	9a02      	ldr	r2, [sp, #8]
   124f2:	0095      	lsls	r5, r2, #2
   124f4:	195d      	adds	r5, r3, r5
   124f6:	b22b      	sxth	r3, r5
   124f8:	469a      	mov	sl, r3
   124fa:	e7cc      	b.n	12496 <gfx_mono_generic_draw_filled_circle+0xe2>
   124fc:	000125a5 	.word	0x000125a5
   12500:	0001221d 	.word	0x0001221d

00012504 <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
   12504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12506:	0004      	movs	r4, r0
   12508:	000f      	movs	r7, r1
   1250a:	0015      	movs	r5, r2
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
   1250c:	2b00      	cmp	r3, #0
   1250e:	d103      	bne.n	12518 <gfx_mono_ssd1306_put_byte+0x14>
   12510:	4b0d      	ldr	r3, [pc, #52]	; (12548 <gfx_mono_ssd1306_put_byte+0x44>)
   12512:	4798      	blx	r3
   12514:	42a8      	cmp	r0, r5
   12516:	d015      	beq.n	12544 <gfx_mono_ssd1306_put_byte+0x40>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
   12518:	002a      	movs	r2, r5
   1251a:	0039      	movs	r1, r7
   1251c:	0020      	movs	r0, r4
   1251e:	4b0b      	ldr	r3, [pc, #44]	; (1254c <gfx_mono_ssd1306_put_byte+0x48>)
   12520:	4798      	blx	r3
 * \param address the page address
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
   12522:	260f      	movs	r6, #15
   12524:	4034      	ands	r4, r6
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
   12526:	20b0      	movs	r0, #176	; 0xb0
   12528:	4320      	orrs	r0, r4
   1252a:	4c09      	ldr	r4, [pc, #36]	; (12550 <gfx_mono_ssd1306_put_byte+0x4c>)
   1252c:	47a0      	blx	r4
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4));
   1252e:	0678      	lsls	r0, r7, #25
   12530:	0f40      	lsrs	r0, r0, #29
   12532:	2310      	movs	r3, #16
   12534:	4318      	orrs	r0, r3
   12536:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
   12538:	0030      	movs	r0, r6
   1253a:	4038      	ands	r0, r7
   1253c:	47a0      	blx	r4
#endif

	ssd1306_set_page_address(page);
	ssd1306_set_column_address(column);

	ssd1306_write_data(data);
   1253e:	0028      	movs	r0, r5
   12540:	4b04      	ldr	r3, [pc, #16]	; (12554 <gfx_mono_ssd1306_put_byte+0x50>)
   12542:	4798      	blx	r3
}
   12544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12546:	46c0      	nop			; (mov r8, r8)
   12548:	00012209 	.word	0x00012209
   1254c:	000121f1 	.word	0x000121f1
   12550:	00012115 	.word	0x00012115
   12554:	000121b5 	.word	0x000121b5

00012558 <gfx_mono_ssd1306_init>:
{
   12558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	gfx_mono_set_framebuffer(framebuffer);
   1255a:	480d      	ldr	r0, [pc, #52]	; (12590 <gfx_mono_ssd1306_init+0x38>)
   1255c:	4b0d      	ldr	r3, [pc, #52]	; (12594 <gfx_mono_ssd1306_init+0x3c>)
   1255e:	4798      	blx	r3
	ssd1306_init();
   12560:	4b0d      	ldr	r3, [pc, #52]	; (12598 <gfx_mono_ssd1306_init+0x40>)
   12562:	4798      	blx	r3
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
	// Make sure address is 6 bits
	address &= 0x3F;
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
   12564:	2040      	movs	r0, #64	; 0x40
   12566:	4b0d      	ldr	r3, [pc, #52]	; (1259c <gfx_mono_ssd1306_init+0x44>)
   12568:	4798      	blx	r3
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
   1256a:	2500      	movs	r5, #0
{
   1256c:	2600      	movs	r6, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
   1256e:	4f0c      	ldr	r7, [pc, #48]	; (125a0 <gfx_mono_ssd1306_init+0x48>)
{
   12570:	0034      	movs	r4, r6
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
   12572:	2301      	movs	r3, #1
   12574:	0032      	movs	r2, r6
   12576:	0021      	movs	r1, r4
   12578:	0028      	movs	r0, r5
   1257a:	47b8      	blx	r7
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
   1257c:	3401      	adds	r4, #1
   1257e:	b2e4      	uxtb	r4, r4
   12580:	2c44      	cmp	r4, #68	; 0x44
   12582:	d1f6      	bne.n	12572 <gfx_mono_ssd1306_init+0x1a>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
   12584:	3501      	adds	r5, #1
   12586:	b2ed      	uxtb	r5, r5
   12588:	2d04      	cmp	r5, #4
   1258a:	d1f1      	bne.n	12570 <gfx_mono_ssd1306_init+0x18>
}
   1258c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1258e:	46c0      	nop			; (mov r8, r8)
   12590:	200002d0 	.word	0x200002d0
   12594:	000121e5 	.word	0x000121e5
   12598:	00012145 	.word	0x00012145
   1259c:	00012115 	.word	0x00012115
   125a0:	00012505 	.word	0x00012505

000125a4 <gfx_mono_ssd1306_draw_pixel>:
{
   125a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   125a6:	46c6      	mov	lr, r8
   125a8:	b500      	push	{lr}
   125aa:	0004      	movs	r4, r0
   125ac:	0015      	movs	r5, r2
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
   125ae:	2843      	cmp	r0, #67	; 0x43
   125b0:	d801      	bhi.n	125b6 <gfx_mono_ssd1306_draw_pixel+0x12>
   125b2:	291f      	cmp	r1, #31
   125b4:	d902      	bls.n	125bc <gfx_mono_ssd1306_draw_pixel+0x18>
}
   125b6:	bc04      	pop	{r2}
   125b8:	4690      	mov	r8, r2
   125ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
   125bc:	08cf      	lsrs	r7, r1, #3
	pixel_mask = (1 << (y - (page * 8)));
   125be:	00fb      	lsls	r3, r7, #3
   125c0:	1ac9      	subs	r1, r1, r3
   125c2:	2601      	movs	r6, #1
   125c4:	408e      	lsls	r6, r1
   125c6:	b2f3      	uxtb	r3, r6
   125c8:	4698      	mov	r8, r3
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
   125ca:	0001      	movs	r1, r0
   125cc:	0038      	movs	r0, r7
   125ce:	4b0d      	ldr	r3, [pc, #52]	; (12604 <gfx_mono_ssd1306_draw_pixel+0x60>)
   125d0:	4798      	blx	r3
   125d2:	0002      	movs	r2, r0
	switch (color) {
   125d4:	2d01      	cmp	r5, #1
   125d6:	d009      	beq.n	125ec <gfx_mono_ssd1306_draw_pixel+0x48>
   125d8:	2d00      	cmp	r5, #0
   125da:	d00b      	beq.n	125f4 <gfx_mono_ssd1306_draw_pixel+0x50>
   125dc:	2d02      	cmp	r5, #2
   125de:	d00c      	beq.n	125fa <gfx_mono_ssd1306_draw_pixel+0x56>
	gfx_mono_put_byte(page, x, pixel_value);
   125e0:	2300      	movs	r3, #0
   125e2:	0021      	movs	r1, r4
   125e4:	0038      	movs	r0, r7
   125e6:	4c08      	ldr	r4, [pc, #32]	; (12608 <gfx_mono_ssd1306_draw_pixel+0x64>)
   125e8:	47a0      	blx	r4
   125ea:	e7e4      	b.n	125b6 <gfx_mono_ssd1306_draw_pixel+0x12>
		pixel_value |= pixel_mask;
   125ec:	4643      	mov	r3, r8
   125ee:	4303      	orrs	r3, r0
   125f0:	b2da      	uxtb	r2, r3
		break;
   125f2:	e7f5      	b.n	125e0 <gfx_mono_ssd1306_draw_pixel+0x3c>
		pixel_value &= ~pixel_mask;
   125f4:	43b0      	bics	r0, r6
   125f6:	b2c2      	uxtb	r2, r0
		break;
   125f8:	e7f2      	b.n	125e0 <gfx_mono_ssd1306_draw_pixel+0x3c>
		pixel_value ^= pixel_mask;
   125fa:	4643      	mov	r3, r8
   125fc:	4043      	eors	r3, r0
   125fe:	b2da      	uxtb	r2, r3
		break;
   12600:	e7ee      	b.n	125e0 <gfx_mono_ssd1306_draw_pixel+0x3c>
   12602:	46c0      	nop			; (mov r8, r8)
   12604:	00012209 	.word	0x00012209
   12608:	00012505 	.word	0x00012505

0001260c <gfx_mono_ssd1306_mask_byte>:
	gfx_mono_ssd1306_mask_byte(0,0,0xAA,GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_ssd1306_mask_byte(gfx_coord_t page, gfx_coord_t column,
		gfx_mono_color_t pixel_mask, gfx_mono_color_t color)
{
   1260c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1260e:	0004      	movs	r4, r0
   12610:	000d      	movs	r5, r1
   12612:	0017      	movs	r7, r2
   12614:	001e      	movs	r6, r3
	return gfx_mono_framebuffer_get_byte(page, column);
   12616:	4b0c      	ldr	r3, [pc, #48]	; (12648 <gfx_mono_ssd1306_mask_byte+0x3c>)
   12618:	4798      	blx	r3
   1261a:	0002      	movs	r2, r0
	gfx_mono_color_t temp = gfx_mono_get_byte(page, column);

	switch (color) {
   1261c:	2e01      	cmp	r6, #1
   1261e:	d009      	beq.n	12634 <gfx_mono_ssd1306_mask_byte+0x28>
   12620:	2e00      	cmp	r6, #0
   12622:	d00a      	beq.n	1263a <gfx_mono_ssd1306_mask_byte+0x2e>
   12624:	2e02      	cmp	r6, #2
   12626:	d00b      	beq.n	12640 <gfx_mono_ssd1306_mask_byte+0x34>

	default:
		break;
	}

	gfx_mono_put_byte(page, column, temp);
   12628:	2300      	movs	r3, #0
   1262a:	0029      	movs	r1, r5
   1262c:	0020      	movs	r0, r4
   1262e:	4c07      	ldr	r4, [pc, #28]	; (1264c <gfx_mono_ssd1306_mask_byte+0x40>)
   12630:	47a0      	blx	r4
}
   12632:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		temp |= pixel_mask;
   12634:	4338      	orrs	r0, r7
   12636:	b2c2      	uxtb	r2, r0
		break;
   12638:	e7f6      	b.n	12628 <gfx_mono_ssd1306_mask_byte+0x1c>
		temp &= ~pixel_mask;
   1263a:	43b8      	bics	r0, r7
   1263c:	b2c2      	uxtb	r2, r0
		break;
   1263e:	e7f3      	b.n	12628 <gfx_mono_ssd1306_mask_byte+0x1c>
		temp ^= pixel_mask;
   12640:	4078      	eors	r0, r7
   12642:	b2c2      	uxtb	r2, r0
		break;
   12644:	e7f0      	b.n	12628 <gfx_mono_ssd1306_mask_byte+0x1c>
   12646:	46c0      	nop			; (mov r8, r8)
   12648:	00012209 	.word	0x00012209
   1264c:	00012505 	.word	0x00012505

00012650 <ADC_Handler>:
	}
}

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
   12650:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
   12652:	4b2f      	ldr	r3, [pc, #188]	; (12710 <ADC_Handler+0xc0>)
   12654:	681d      	ldr	r5, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
   12656:	682b      	ldr	r3, [r5, #0]
   12658:	7e1a      	ldrb	r2, [r3, #24]
   1265a:	7ddc      	ldrb	r4, [r3, #23]
   1265c:	4014      	ands	r4, r2
	if (flags & ADC_INTFLAG_RESRDY) {
   1265e:	07e2      	lsls	r2, r4, #31
   12660:	d416      	bmi.n	12690 <ADC_Handler+0x40>
	if (flags & ADC_INTFLAG_WINMON) {
   12662:	0763      	lsls	r3, r4, #29
   12664:	d508      	bpl.n	12678 <ADC_Handler+0x28>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
   12666:	2304      	movs	r3, #4
   12668:	682a      	ldr	r2, [r5, #0]
   1266a:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   1266c:	7eeb      	ldrb	r3, [r5, #27]
   1266e:	079b      	lsls	r3, r3, #30
   12670:	d502      	bpl.n	12678 <ADC_Handler+0x28>
   12672:	7eab      	ldrb	r3, [r5, #26]
   12674:	079b      	lsls	r3, r3, #30
   12676:	d442      	bmi.n	126fe <ADC_Handler+0xae>
	if (flags & ADC_INTFLAG_OVERRUN) {
   12678:	07a3      	lsls	r3, r4, #30
   1267a:	d508      	bpl.n	1268e <ADC_Handler+0x3e>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
   1267c:	2302      	movs	r3, #2
   1267e:	682a      	ldr	r2, [r5, #0]
   12680:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   12682:	7eeb      	ldrb	r3, [r5, #27]
   12684:	075b      	lsls	r3, r3, #29
   12686:	d502      	bpl.n	1268e <ADC_Handler+0x3e>
   12688:	7eab      	ldrb	r3, [r5, #26]
   1268a:	075b      	lsls	r3, r3, #29
   1268c:	d43b      	bmi.n	12706 <ADC_Handler+0xb6>
	_adc_interrupt_handler(0);
}
   1268e:	bd70      	pop	{r4, r5, r6, pc}
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
   12690:	2201      	movs	r2, #1
   12692:	761a      	strb	r2, [r3, #24]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
   12694:	682a      	ldr	r2, [r5, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   12696:	7e53      	ldrb	r3, [r2, #25]
		while (adc_is_syncing(module)) {
   12698:	b25b      	sxtb	r3, r3
   1269a:	2b00      	cmp	r3, #0
   1269c:	dbfb      	blt.n	12696 <ADC_Handler+0x46>
		*(module->job_buffer++) = module->hw->RESULT.reg;
   1269e:	6969      	ldr	r1, [r5, #20]
   126a0:	1c8b      	adds	r3, r1, #2
   126a2:	616b      	str	r3, [r5, #20]
   126a4:	8b53      	ldrh	r3, [r2, #26]
   126a6:	b29b      	uxth	r3, r3
   126a8:	800b      	strh	r3, [r1, #0]
		if (--module->remaining_conversions > 0) {
   126aa:	8b2b      	ldrh	r3, [r5, #24]
   126ac:	3b01      	subs	r3, #1
   126ae:	b29b      	uxth	r3, r3
   126b0:	832b      	strh	r3, [r5, #24]
   126b2:	2b00      	cmp	r3, #0
   126b4:	d011      	beq.n	126da <ADC_Handler+0x8a>
			if (module->software_trigger == true) {
   126b6:	7f6b      	ldrb	r3, [r5, #29]
   126b8:	2b00      	cmp	r3, #0
   126ba:	d0d2      	beq.n	12662 <ADC_Handler+0x12>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   126bc:	682a      	ldr	r2, [r5, #0]
   126be:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
   126c0:	b25b      	sxtb	r3, r3
   126c2:	2b00      	cmp	r3, #0
   126c4:	dbfb      	blt.n	126be <ADC_Handler+0x6e>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
   126c6:	7b13      	ldrb	r3, [r2, #12]
   126c8:	2102      	movs	r1, #2
   126ca:	430b      	orrs	r3, r1
   126cc:	7313      	strb	r3, [r2, #12]
	Adc *const adc_module = module_inst->hw;
   126ce:	682a      	ldr	r2, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   126d0:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
   126d2:	b25b      	sxtb	r3, r3
   126d4:	2b00      	cmp	r3, #0
   126d6:	dbfb      	blt.n	126d0 <ADC_Handler+0x80>
   126d8:	e7c3      	b.n	12662 <ADC_Handler+0x12>
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
   126da:	2301      	movs	r3, #1
   126dc:	682a      	ldr	r2, [r5, #0]
   126de:	7593      	strb	r3, [r2, #22]
			if (module->job_status == STATUS_BUSY) {
   126e0:	7f2b      	ldrb	r3, [r5, #28]
   126e2:	2b05      	cmp	r3, #5
   126e4:	d1bd      	bne.n	12662 <ADC_Handler+0x12>
				module->job_status = STATUS_OK;
   126e6:	2300      	movs	r3, #0
   126e8:	772b      	strb	r3, [r5, #28]
				if ((module->enabled_callback_mask &
   126ea:	7eeb      	ldrb	r3, [r5, #27]
   126ec:	07db      	lsls	r3, r3, #31
   126ee:	d5b8      	bpl.n	12662 <ADC_Handler+0x12>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
   126f0:	7eab      	ldrb	r3, [r5, #26]
   126f2:	07db      	lsls	r3, r3, #31
   126f4:	d5b5      	bpl.n	12662 <ADC_Handler+0x12>
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
   126f6:	0028      	movs	r0, r5
   126f8:	68ab      	ldr	r3, [r5, #8]
   126fa:	4798      	blx	r3
   126fc:	e7b1      	b.n	12662 <ADC_Handler+0x12>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
   126fe:	0028      	movs	r0, r5
   12700:	68eb      	ldr	r3, [r5, #12]
   12702:	4798      	blx	r3
   12704:	e7b8      	b.n	12678 <ADC_Handler+0x28>
			(module->callback[ADC_CALLBACK_ERROR])(module);
   12706:	692b      	ldr	r3, [r5, #16]
   12708:	0028      	movs	r0, r5
   1270a:	4798      	blx	r3
}
   1270c:	e7bf      	b.n	1268e <ADC_Handler+0x3e>
   1270e:	46c0      	nop			; (mov r8, r8)
   12710:	20004184 	.word	0x20004184

00012714 <DAC_Handler>:
	}
}

/** Handler for the DAC hardware module interrupt. */
void DAC_Handler(void)
{
   12714:	b570      	push	{r4, r5, r6, lr}
	struct dac_module *module = _dac_instances[instance];
   12716:	4b27      	ldr	r3, [pc, #156]	; (127b4 <DAC_Handler+0xa0>)
   12718:	681c      	ldr	r4, [r3, #0]
	Dac *const dac_hw = module->hw;
   1271a:	6825      	ldr	r5, [r4, #0]
	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_UNDERRUN) {
   1271c:	79ab      	ldrb	r3, [r5, #6]
   1271e:	07db      	lsls	r3, r3, #31
   12720:	d507      	bpl.n	12732 <DAC_Handler+0x1e>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_UNDERRUN;
   12722:	2301      	movs	r3, #1
   12724:	71ab      	strb	r3, [r5, #6]
		if ((module->callback) &&
   12726:	0023      	movs	r3, r4
   12728:	3314      	adds	r3, #20
   1272a:	d002      	beq.n	12732 <DAC_Handler+0x1e>
   1272c:	7c63      	ldrb	r3, [r4, #17]
   1272e:	2b00      	cmp	r3, #0
   12730:	d131      	bne.n	12796 <DAC_Handler+0x82>
	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_EMPTY) {
   12732:	79ab      	ldrb	r3, [r5, #6]
   12734:	079b      	lsls	r3, r3, #30
   12736:	d538      	bpl.n	127aa <DAC_Handler+0x96>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   12738:	2302      	movs	r3, #2
   1273a:	71ab      	strb	r3, [r5, #6]
		if (module->remaining_conversions) {
   1273c:	89a3      	ldrh	r3, [r4, #12]
   1273e:	b29b      	uxth	r3, r3
   12740:	2b00      	cmp	r3, #0
   12742:	d02c      	beq.n	1279e <DAC_Handler+0x8a>
				module->job_buffer[module->transferred_conversions++];
   12744:	89e3      	ldrh	r3, [r4, #14]
   12746:	b29b      	uxth	r3, r3
   12748:	1c5a      	adds	r2, r3, #1
   1274a:	b292      	uxth	r2, r2
   1274c:	81e2      	strh	r2, [r4, #14]
   1274e:	005b      	lsls	r3, r3, #1
   12750:	68a2      	ldr	r2, [r4, #8]
   12752:	4694      	mov	ip, r2
   12754:	4463      	add	r3, ip
   12756:	881b      	ldrh	r3, [r3, #0]
   12758:	b29b      	uxth	r3, r3
			dac_hw->DATABUF.reg =
   1275a:	81ab      	strh	r3, [r5, #12]
			module->remaining_conversions --;
   1275c:	89a3      	ldrh	r3, [r4, #12]
   1275e:	3b01      	subs	r3, #1
   12760:	b29b      	uxth	r3, r3
   12762:	81a3      	strh	r3, [r4, #12]
			if (module->remaining_conversions == 0) {
   12764:	89a3      	ldrh	r3, [r4, #12]
   12766:	b29b      	uxth	r3, r3
   12768:	2b00      	cmp	r3, #0
   1276a:	d118      	bne.n	1279e <DAC_Handler+0x8a>
				module->job_status = STATUS_OK;
   1276c:	2200      	movs	r2, #0
   1276e:	3320      	adds	r3, #32
   12770:	54e2      	strb	r2, [r4, r3]
				dac_hw->INTENCLR.reg = DAC_INTENCLR_EMPTY;
   12772:	3b1e      	subs	r3, #30
   12774:	712b      	strb	r3, [r5, #4]
				dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   12776:	71ab      	strb	r3, [r5, #6]
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   12778:	2180      	movs	r1, #128	; 0x80
   1277a:	0489      	lsls	r1, r1, #18
   1277c:	337e      	adds	r3, #126	; 0x7e
   1277e:	4a0e      	ldr	r2, [pc, #56]	; (127b8 <DAC_Handler+0xa4>)
   12780:	50d1      	str	r1, [r2, r3]
				if ((module->callback) &&
   12782:	0023      	movs	r3, r4
   12784:	3314      	adds	r3, #20
   12786:	d010      	beq.n	127aa <DAC_Handler+0x96>
   12788:	7ca3      	ldrb	r3, [r4, #18]
   1278a:	2b00      	cmp	r3, #0
   1278c:	d00a      	beq.n	127a4 <DAC_Handler+0x90>
					module->callback[DAC_CALLBACK_TRANSFER_COMPLETE](0);
   1278e:	2000      	movs	r0, #0
   12790:	69e3      	ldr	r3, [r4, #28]
   12792:	4798      	blx	r3
   12794:	e006      	b.n	127a4 <DAC_Handler+0x90>
			module->callback[DAC_CALLBACK_DATA_UNDERRUN](0);
   12796:	2000      	movs	r0, #0
   12798:	69a3      	ldr	r3, [r4, #24]
   1279a:	4798      	blx	r3
   1279c:	e7c9      	b.n	12732 <DAC_Handler+0x1e>
		if ((module->callback) &&
   1279e:	0023      	movs	r3, r4
   127a0:	3314      	adds	r3, #20
   127a2:	d002      	beq.n	127aa <DAC_Handler+0x96>
   127a4:	7c23      	ldrb	r3, [r4, #16]
   127a6:	2b00      	cmp	r3, #0
   127a8:	d100      	bne.n	127ac <DAC_Handler+0x98>
	_dac_interrupt_handler(0);
}
   127aa:	bd70      	pop	{r4, r5, r6, pc}
			module->callback[DAC_CALLBACK_DATA_EMPTY](0);
   127ac:	6963      	ldr	r3, [r4, #20]
   127ae:	2000      	movs	r0, #0
   127b0:	4798      	blx	r3
}
   127b2:	e7fa      	b.n	127aa <DAC_Handler+0x96>
   127b4:	20004188 	.word	0x20004188
   127b8:	e000e100 	.word	0xe000e100

000127bc <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
   127bc:	b510      	push	{r4, lr}
	cpu_irq_enter_critical();
   127be:	4b26      	ldr	r3, [pc, #152]	; (12858 <DMAC_Handler+0x9c>)
   127c0:	4798      	blx	r3
	uint32_t total_size;

	system_interrupt_enter_critical_section();

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
   127c2:	4926      	ldr	r1, [pc, #152]	; (1285c <DMAC_Handler+0xa0>)
   127c4:	8c0b      	ldrh	r3, [r1, #32]
   127c6:	220f      	movs	r2, #15

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
   127c8:	4013      	ands	r3, r2
   127ca:	009b      	lsls	r3, r3, #2
   127cc:	4824      	ldr	r0, [pc, #144]	; (12860 <DMAC_Handler+0xa4>)
   127ce:	5818      	ldr	r0, [r3, r0]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
   127d0:	7803      	ldrb	r3, [r0, #0]
   127d2:	401a      	ands	r2, r3
   127d4:	233f      	movs	r3, #63	; 0x3f
   127d6:	54ca      	strb	r2, [r1, r3]
	isr = DMAC->CHINTFLAG.reg;
   127d8:	330f      	adds	r3, #15
   127da:	5cca      	ldrb	r2, [r1, r3]
   127dc:	b2d2      	uxtb	r2, r2

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
   127de:	7803      	ldrb	r3, [r0, #0]
   127e0:	011b      	lsls	r3, r3, #4
   127e2:	4920      	ldr	r1, [pc, #128]	; (12864 <DMAC_Handler+0xa8>)
   127e4:	18c9      	adds	r1, r1, r3
   127e6:	8849      	ldrh	r1, [r1, #2]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
   127e8:	4c1f      	ldr	r4, [pc, #124]	; (12868 <DMAC_Handler+0xac>)
   127ea:	18e3      	adds	r3, r4, r3
   127ec:	885b      	ldrh	r3, [r3, #2]
	resource->transfered_size = total_size - write_size;
   127ee:	1acb      	subs	r3, r1, r3
   127f0:	6143      	str	r3, [r0, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
   127f2:	07d3      	lsls	r3, r2, #31
   127f4:	d50f      	bpl.n	12816 <DMAC_Handler+0x5a>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
   127f6:	2101      	movs	r1, #1
   127f8:	234e      	movs	r3, #78	; 0x4e
   127fa:	4a18      	ldr	r2, [pc, #96]	; (1285c <DMAC_Handler+0xa0>)
   127fc:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
   127fe:	3b3e      	subs	r3, #62	; 0x3e
   12800:	7443      	strb	r3, [r0, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   12802:	7c03      	ldrb	r3, [r0, #16]
   12804:	07db      	lsls	r3, r3, #31
   12806:	d503      	bpl.n	12810 <DMAC_Handler+0x54>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
   12808:	6843      	ldr	r3, [r0, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   1280a:	2b00      	cmp	r3, #0
   1280c:	d000      	beq.n	12810 <DMAC_Handler+0x54>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
   1280e:	4798      	blx	r3
	cpu_irq_leave_critical();
   12810:	4b16      	ldr	r3, [pc, #88]	; (1286c <DMAC_Handler+0xb0>)
   12812:	4798      	blx	r3
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
		}
	}

	system_interrupt_leave_critical_section();
}
   12814:	bd10      	pop	{r4, pc}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
   12816:	0793      	lsls	r3, r2, #30
   12818:	d50d      	bpl.n	12836 <DMAC_Handler+0x7a>
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
   1281a:	2102      	movs	r1, #2
   1281c:	234e      	movs	r3, #78	; 0x4e
   1281e:	4a0f      	ldr	r2, [pc, #60]	; (1285c <DMAC_Handler+0xa0>)
   12820:	54d1      	strb	r1, [r2, r3]
		resource->job_status = STATUS_OK;
   12822:	2300      	movs	r3, #0
   12824:	7443      	strb	r3, [r0, #17]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   12826:	7c03      	ldrb	r3, [r0, #16]
   12828:	079b      	lsls	r3, r3, #30
   1282a:	d5f1      	bpl.n	12810 <DMAC_Handler+0x54>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
   1282c:	6883      	ldr	r3, [r0, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   1282e:	2b00      	cmp	r3, #0
   12830:	d0ee      	beq.n	12810 <DMAC_Handler+0x54>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
   12832:	4798      	blx	r3
   12834:	e7ec      	b.n	12810 <DMAC_Handler+0x54>
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
   12836:	0753      	lsls	r3, r2, #29
   12838:	d5ea      	bpl.n	12810 <DMAC_Handler+0x54>
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
   1283a:	2104      	movs	r1, #4
   1283c:	234e      	movs	r3, #78	; 0x4e
   1283e:	4a07      	ldr	r2, [pc, #28]	; (1285c <DMAC_Handler+0xa0>)
   12840:	54d1      	strb	r1, [r2, r3]
		resource->job_status = STATUS_SUSPEND;
   12842:	3b48      	subs	r3, #72	; 0x48
   12844:	7443      	strb	r3, [r0, #17]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   12846:	7c03      	ldrb	r3, [r0, #16]
   12848:	075b      	lsls	r3, r3, #29
   1284a:	d5e1      	bpl.n	12810 <DMAC_Handler+0x54>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
   1284c:	68c3      	ldr	r3, [r0, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   1284e:	2b00      	cmp	r3, #0
   12850:	d0de      	beq.n	12810 <DMAC_Handler+0x54>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
   12852:	4798      	blx	r3
   12854:	e7dc      	b.n	12810 <DMAC_Handler+0x54>
   12856:	46c0      	nop			; (mov r8, r8)
   12858:	0001d585 	.word	0x0001d585
   1285c:	41004800 	.word	0x41004800
   12860:	200003e0 	.word	0x200003e0
   12864:	20004190 	.word	0x20004190
   12868:	20000400 	.word	0x20000400
   1286c:	0001d5c5 	.word	0x0001d5c5

00012870 <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
   12870:	b510      	push	{r4, lr}
	struct events_hook *current_hook = _events_inst.hook_list;
   12872:	4b0b      	ldr	r3, [pc, #44]	; (128a0 <EVSYS_Handler+0x30>)
   12874:	691c      	ldr	r4, [r3, #16]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
   12876:	490b      	ldr	r1, [pc, #44]	; (128a4 <EVSYS_Handler+0x34>)
   12878:	698a      	ldr	r2, [r1, #24]
	_events_inst.interrupt_flag_buffer |= flag;
   1287a:	6898      	ldr	r0, [r3, #8]
   1287c:	4302      	orrs	r2, r0
   1287e:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
   12880:	4b09      	ldr	r3, [pc, #36]	; (128a8 <EVSYS_Handler+0x38>)
   12882:	618b      	str	r3, [r1, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
   12884:	2c00      	cmp	r4, #0
   12886:	d005      	beq.n	12894 <EVSYS_Handler+0x24>
		current_hook->hook_func(current_hook->resource);
   12888:	6820      	ldr	r0, [r4, #0]
   1288a:	6863      	ldr	r3, [r4, #4]
   1288c:	4798      	blx	r3
		current_hook = current_hook->next;
   1288e:	68a4      	ldr	r4, [r4, #8]
	while (current_hook != NULL) {
   12890:	2c00      	cmp	r4, #0
   12892:	d1f9      	bne.n	12888 <EVSYS_Handler+0x18>
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
   12894:	4b02      	ldr	r3, [pc, #8]	; (128a0 <EVSYS_Handler+0x30>)
   12896:	68d9      	ldr	r1, [r3, #12]
	_events_inst.interrupt_flag_buffer &= ~flag;
   12898:	689a      	ldr	r2, [r3, #8]
   1289a:	438a      	bics	r2, r1
   1289c:	609a      	str	r2, [r3, #8]
}
   1289e:	bd10      	pop	{r4, pc}
   128a0:	20000000 	.word	0x20000000
   128a4:	42000400 	.word	0x42000400
   128a8:	0f0fffff 	.word	0x0f0fffff

000128ac <_system_events_init>:
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
   128ac:	4a06      	ldr	r2, [pc, #24]	; (128c8 <_system_events_init+0x1c>)
   128ae:	6a13      	ldr	r3, [r2, #32]
   128b0:	2102      	movs	r1, #2
   128b2:	430b      	orrs	r3, r1
   128b4:	6213      	str	r3, [r2, #32]
{
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_EVSYS);

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRL.reg = EVSYS_CTRL_SWRST;
   128b6:	2201      	movs	r2, #1
   128b8:	4b04      	ldr	r3, [pc, #16]	; (128cc <_system_events_init+0x20>)
   128ba:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRL.reg & EVSYS_CTRL_SWRST) {
   128bc:	0019      	movs	r1, r3
   128be:	780b      	ldrb	r3, [r1, #0]
   128c0:	4213      	tst	r3, r2
   128c2:	d1fc      	bne.n	128be <_system_events_init+0x12>
	}
}
   128c4:	4770      	bx	lr
   128c6:	46c0      	nop			; (mov r8, r8)
   128c8:	40000400 	.word	0x40000400
   128cc:	42000400 	.word	0x42000400

000128d0 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   128d0:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   128d2:	2207      	movs	r2, #7
   128d4:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
   128d6:	421a      	tst	r2, r3
   128d8:	d1fc      	bne.n	128d4 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
   128da:	4770      	bx	lr

000128dc <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
   128dc:	b570      	push	{r4, r5, r6, lr}
   128de:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   128e0:	6806      	ldr	r6, [r0, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   128e2:	6832      	ldr	r2, [r6, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
   128e4:	8b45      	ldrh	r5, [r0, #26]
	buffer_index -= module->buffer_remaining;
   128e6:	8b83      	ldrh	r3, [r0, #28]
   128e8:	1aed      	subs	r5, r5, r3
   128ea:	b2ad      	uxth	r5, r5

	module->buffer_remaining--;
   128ec:	8b83      	ldrh	r3, [r0, #28]
   128ee:	3b01      	subs	r3, #1
   128f0:	b29b      	uxth	r3, r3
   128f2:	8383      	strh	r3, [r0, #28]

	if (sclsm_flag) {
   128f4:	0113      	lsls	r3, r2, #4
   128f6:	d51d      	bpl.n	12934 <_i2c_master_read+0x58>
		if (module->send_nack && module->buffer_remaining == 1) {
   128f8:	7ac3      	ldrb	r3, [r0, #11]
   128fa:	2b00      	cmp	r3, #0
   128fc:	d003      	beq.n	12906 <_i2c_master_read+0x2a>
   128fe:	8b83      	ldrh	r3, [r0, #28]
   12900:	b29b      	uxth	r3, r3
   12902:	2b01      	cmp	r3, #1
   12904:	d010      	beq.n	12928 <_i2c_master_read+0x4c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		}
	}

	if (module->buffer_remaining == 0) {
   12906:	8ba3      	ldrh	r3, [r4, #28]
   12908:	b29b      	uxth	r3, r3
   1290a:	2b00      	cmp	r3, #0
   1290c:	d102      	bne.n	12914 <_i2c_master_read+0x38>
		if (module->send_stop) {
   1290e:	7aa3      	ldrb	r3, [r4, #10]
   12910:	2b00      	cmp	r3, #0
   12912:	d11c      	bne.n	1294e <_i2c_master_read+0x72>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
   12914:	0020      	movs	r0, r4
   12916:	4b12      	ldr	r3, [pc, #72]	; (12960 <_i2c_master_read+0x84>)
   12918:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
   1291a:	6a23      	ldr	r3, [r4, #32]
   1291c:	195d      	adds	r5, r3, r5
   1291e:	2328      	movs	r3, #40	; 0x28
   12920:	5cf3      	ldrb	r3, [r6, r3]
   12922:	b2db      	uxtb	r3, r3
   12924:	702b      	strb	r3, [r5, #0]
}
   12926:	bd70      	pop	{r4, r5, r6, pc}
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   12928:	6872      	ldr	r2, [r6, #4]
   1292a:	2380      	movs	r3, #128	; 0x80
   1292c:	02db      	lsls	r3, r3, #11
   1292e:	4313      	orrs	r3, r2
   12930:	6073      	str	r3, [r6, #4]
   12932:	e7e8      	b.n	12906 <_i2c_master_read+0x2a>
		if (module->send_nack && module->buffer_remaining == 0) {
   12934:	7ac3      	ldrb	r3, [r0, #11]
   12936:	2b00      	cmp	r3, #0
   12938:	d0e5      	beq.n	12906 <_i2c_master_read+0x2a>
   1293a:	8b83      	ldrh	r3, [r0, #28]
   1293c:	b29b      	uxth	r3, r3
   1293e:	2b00      	cmp	r3, #0
   12940:	d1e1      	bne.n	12906 <_i2c_master_read+0x2a>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   12942:	6872      	ldr	r2, [r6, #4]
   12944:	2380      	movs	r3, #128	; 0x80
   12946:	02db      	lsls	r3, r3, #11
   12948:	4313      	orrs	r3, r2
   1294a:	6073      	str	r3, [r6, #4]
   1294c:	e7db      	b.n	12906 <_i2c_master_read+0x2a>
			_i2c_master_wait_for_sync(module);
   1294e:	0020      	movs	r0, r4
   12950:	4b03      	ldr	r3, [pc, #12]	; (12960 <_i2c_master_read+0x84>)
   12952:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   12954:	6872      	ldr	r2, [r6, #4]
   12956:	23c0      	movs	r3, #192	; 0xc0
   12958:	029b      	lsls	r3, r3, #10
   1295a:	4313      	orrs	r3, r2
   1295c:	6073      	str	r3, [r6, #4]
   1295e:	e7d9      	b.n	12914 <_i2c_master_read+0x38>
   12960:	000128d1 	.word	0x000128d1

00012964 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
   12964:	b570      	push	{r4, r5, r6, lr}
   12966:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   12968:	6805      	ldr	r5, [r0, #0]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
   1296a:	8b6b      	ldrh	r3, [r5, #26]
   1296c:	075b      	lsls	r3, r3, #29
   1296e:	d503      	bpl.n	12978 <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
   12970:	221e      	movs	r2, #30
   12972:	2325      	movs	r3, #37	; 0x25
   12974:	54c2      	strb	r2, [r0, r3]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
   12976:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length;
   12978:	8b46      	ldrh	r6, [r0, #26]
	buffer_index -= module->buffer_remaining;
   1297a:	8b83      	ldrh	r3, [r0, #28]
   1297c:	1af6      	subs	r6, r6, r3
   1297e:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
   12980:	8b83      	ldrh	r3, [r0, #28]
   12982:	3b01      	subs	r3, #1
   12984:	b29b      	uxth	r3, r3
   12986:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
   12988:	4b04      	ldr	r3, [pc, #16]	; (1299c <_i2c_master_write+0x38>)
   1298a:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
   1298c:	6a23      	ldr	r3, [r4, #32]
   1298e:	199e      	adds	r6, r3, r6
   12990:	7833      	ldrb	r3, [r6, #0]
   12992:	b2db      	uxtb	r3, r3
   12994:	2228      	movs	r2, #40	; 0x28
   12996:	54ab      	strb	r3, [r5, r2]
   12998:	e7ed      	b.n	12976 <_i2c_master_write+0x12>
   1299a:	46c0      	nop			; (mov r8, r8)
   1299c:	000128d1 	.word	0x000128d1

000129a0 <_i2c_master_write_packet>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   129a0:	b570      	push	{r4, r5, r6, lr}
   129a2:	0005      	movs	r5, r0
   129a4:	000c      	movs	r4, r1
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   129a6:	6806      	ldr	r6, [r0, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
   129a8:	7a4b      	ldrb	r3, [r1, #9]
   129aa:	2b00      	cmp	r3, #0
   129ac:	d11a      	bne.n	129e4 <_i2c_master_write_packet+0x44>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   129ae:	6873      	ldr	r3, [r6, #4]
   129b0:	4a13      	ldr	r2, [pc, #76]	; (12a00 <_i2c_master_write_packet+0x60>)
   129b2:	4013      	ands	r3, r2
   129b4:	6073      	str	r3, [r6, #4]

	/* Save packet to software module */
	module->buffer             = packet->data;
   129b6:	6863      	ldr	r3, [r4, #4]
   129b8:	622b      	str	r3, [r5, #32]
	module->buffer_remaining   = packet->data_length;
   129ba:	8863      	ldrh	r3, [r4, #2]
   129bc:	83ab      	strh	r3, [r5, #28]
	module->transfer_direction = I2C_TRANSFER_WRITE;
   129be:	2200      	movs	r2, #0
   129c0:	2324      	movs	r3, #36	; 0x24
   129c2:	54ea      	strb	r2, [r5, r3]
	module->status             = STATUS_BUSY;
   129c4:	3205      	adds	r2, #5
   129c6:	3301      	adds	r3, #1
   129c8:	54ea      	strb	r2, [r5, r3]

	/* Enable interrupts */
	i2c_module->INTENSET.reg =
   129ca:	3b22      	subs	r3, #34	; 0x22
   129cc:	75b3      	strb	r3, [r6, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

	/* Set address and direction bit, will send start command on bus */
	if (packet->ten_bit_address) {
   129ce:	7a23      	ldrb	r3, [r4, #8]
   129d0:	2b00      	cmp	r3, #0
   129d2:	d10b      	bne.n	129ec <_i2c_master_write_packet+0x4c>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   129d4:	8823      	ldrh	r3, [r4, #0]
   129d6:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   129d8:	7a62      	ldrb	r2, [r4, #9]
   129da:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   129dc:	4313      	orrs	r3, r2
   129de:	6273      	str	r3, [r6, #36]	; 0x24
	}

	return STATUS_OK;
}
   129e0:	2000      	movs	r0, #0
   129e2:	bd70      	pop	{r4, r5, r6, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   129e4:	7a89      	ldrb	r1, [r1, #10]
   129e6:	4b07      	ldr	r3, [pc, #28]	; (12a04 <_i2c_master_write_packet+0x64>)
   129e8:	4798      	blx	r3
   129ea:	e7e0      	b.n	129ae <_i2c_master_write_packet+0xe>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   129ec:	8823      	ldrh	r3, [r4, #0]
   129ee:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   129f0:	7a62      	ldrb	r2, [r4, #9]
   129f2:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   129f4:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   129f6:	2280      	movs	r2, #128	; 0x80
   129f8:	0212      	lsls	r2, r2, #8
   129fa:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   129fc:	6273      	str	r3, [r6, #36]	; 0x24
   129fe:	e7ef      	b.n	129e0 <_i2c_master_write_packet+0x40>
   12a00:	fffbffff 	.word	0xfffbffff
   12a04:	00015181 	.word	0x00015181

00012a08 <_i2c_master_read_packet>:
{
   12a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12a0a:	0005      	movs	r5, r0
   12a0c:	000c      	movs	r4, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   12a0e:	6806      	ldr	r6, [r0, #0]
	module->buffer             = packet->data;
   12a10:	684b      	ldr	r3, [r1, #4]
   12a12:	6203      	str	r3, [r0, #32]
	module->buffer_remaining   = packet->data_length;
   12a14:	884b      	ldrh	r3, [r1, #2]
   12a16:	8383      	strh	r3, [r0, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
   12a18:	2201      	movs	r2, #1
   12a1a:	2324      	movs	r3, #36	; 0x24
   12a1c:	54c2      	strb	r2, [r0, r3]
	module->status             = STATUS_BUSY;
   12a1e:	3204      	adds	r2, #4
   12a20:	3301      	adds	r3, #1
   12a22:	54c2      	strb	r2, [r0, r3]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   12a24:	6837      	ldr	r7, [r6, #0]
   12a26:	013f      	lsls	r7, r7, #4
   12a28:	0fff      	lsrs	r7, r7, #31
	if (packet->high_speed) {
   12a2a:	7a4b      	ldrb	r3, [r1, #9]
   12a2c:	2b00      	cmp	r3, #0
   12a2e:	d117      	bne.n	12a60 <_i2c_master_read_packet+0x58>
	if ((sclsm_flag) && (packet->data_length == 1)) {
   12a30:	2f00      	cmp	r7, #0
   12a32:	d002      	beq.n	12a3a <_i2c_master_read_packet+0x32>
   12a34:	8863      	ldrh	r3, [r4, #2]
   12a36:	2b01      	cmp	r3, #1
   12a38:	d016      	beq.n	12a68 <_i2c_master_read_packet+0x60>
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   12a3a:	6873      	ldr	r3, [r6, #4]
   12a3c:	4a20      	ldr	r2, [pc, #128]	; (12ac0 <_i2c_master_read_packet+0xb8>)
   12a3e:	4013      	ands	r3, r2
   12a40:	6073      	str	r3, [r6, #4]
	if (packet->ten_bit_address) {
   12a42:	7a23      	ldrb	r3, [r4, #8]
   12a44:	2b00      	cmp	r3, #0
   12a46:	d115      	bne.n	12a74 <_i2c_master_read_packet+0x6c>
		i2c_module->INTENSET.reg =
   12a48:	2303      	movs	r3, #3
   12a4a:	75b3      	strb	r3, [r6, #22]
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   12a4c:	8823      	ldrh	r3, [r4, #0]
   12a4e:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   12a50:	7a62      	ldrb	r2, [r4, #9]
   12a52:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   12a54:	4313      	orrs	r3, r2
   12a56:	2201      	movs	r2, #1
   12a58:	4313      	orrs	r3, r2
   12a5a:	6273      	str	r3, [r6, #36]	; 0x24
	return STATUS_OK;
   12a5c:	2000      	movs	r0, #0
}
   12a5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   12a60:	7a89      	ldrb	r1, [r1, #10]
   12a62:	4b18      	ldr	r3, [pc, #96]	; (12ac4 <_i2c_master_read_packet+0xbc>)
   12a64:	4798      	blx	r3
   12a66:	e7e3      	b.n	12a30 <_i2c_master_read_packet+0x28>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   12a68:	6872      	ldr	r2, [r6, #4]
   12a6a:	2380      	movs	r3, #128	; 0x80
   12a6c:	02db      	lsls	r3, r3, #11
   12a6e:	4313      	orrs	r3, r2
   12a70:	6073      	str	r3, [r6, #4]
   12a72:	e7e6      	b.n	12a42 <_i2c_master_read_packet+0x3a>
		i2c_module->ADDR.reg = (packet->address << 1) |
   12a74:	8823      	ldrh	r3, [r4, #0]
   12a76:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   12a78:	7a62      	ldrb	r2, [r4, #9]
   12a7a:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
   12a7c:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   12a7e:	2280      	movs	r2, #128	; 0x80
   12a80:	0212      	lsls	r2, r2, #8
   12a82:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
   12a84:	6273      	str	r3, [r6, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
   12a86:	0028      	movs	r0, r5
   12a88:	4b0f      	ldr	r3, [pc, #60]	; (12ac8 <_i2c_master_read_packet+0xc0>)
   12a8a:	4798      	blx	r3
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   12a8c:	6873      	ldr	r3, [r6, #4]
   12a8e:	4a0c      	ldr	r2, [pc, #48]	; (12ac0 <_i2c_master_read_packet+0xb8>)
   12a90:	4013      	ands	r3, r2
   12a92:	6073      	str	r3, [r6, #4]
		if (tmp_status == STATUS_OK) {
   12a94:	2800      	cmp	r0, #0
   12a96:	d1e2      	bne.n	12a5e <_i2c_master_read_packet+0x56>
			tmp_status = _i2c_master_address_response(module);
   12a98:	0028      	movs	r0, r5
   12a9a:	4b0c      	ldr	r3, [pc, #48]	; (12acc <_i2c_master_read_packet+0xc4>)
   12a9c:	4798      	blx	r3
		if (tmp_status == STATUS_OK) {
   12a9e:	2800      	cmp	r0, #0
   12aa0:	d1dd      	bne.n	12a5e <_i2c_master_read_packet+0x56>
			i2c_module->INTENSET.reg =
   12aa2:	2303      	movs	r3, #3
   12aa4:	75b3      	strb	r3, [r6, #22]
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   12aa6:	8823      	ldrh	r3, [r4, #0]
   12aa8:	0a1b      	lsrs	r3, r3, #8
   12aaa:	2278      	movs	r2, #120	; 0x78
   12aac:	4313      	orrs	r3, r2
   12aae:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   12ab0:	7a62      	ldrb	r2, [r4, #9]
   12ab2:	0392      	lsls	r2, r2, #14
   12ab4:	2101      	movs	r1, #1
   12ab6:	430a      	orrs	r2, r1
   12ab8:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   12aba:	6273      	str	r3, [r6, #36]	; 0x24
   12abc:	e7cf      	b.n	12a5e <_i2c_master_read_packet+0x56>
   12abe:	46c0      	nop			; (mov r8, r8)
   12ac0:	fffbffff 	.word	0xfffbffff
   12ac4:	00015181 	.word	0x00015181
   12ac8:	00015155 	.word	0x00015155
   12acc:	00015125 	.word	0x00015125

00012ad0 <i2c_master_register_callback>:
	module->callbacks[callback_type] = callback;
   12ad0:	1c93      	adds	r3, r2, #2
   12ad2:	009b      	lsls	r3, r3, #2
   12ad4:	18c3      	adds	r3, r0, r3
   12ad6:	6059      	str	r1, [r3, #4]
	module->registered_callback |= (1 << callback_type);
   12ad8:	7e03      	ldrb	r3, [r0, #24]
   12ada:	2101      	movs	r1, #1
   12adc:	4091      	lsls	r1, r2
   12ade:	430b      	orrs	r3, r1
   12ae0:	b2db      	uxtb	r3, r3
   12ae2:	7603      	strb	r3, [r0, #24]
}
   12ae4:	4770      	bx	lr
	...

00012ae8 <i2c_master_read_packet_job>:
{
   12ae8:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
   12aea:	8b83      	ldrh	r3, [r0, #28]
   12aec:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
   12aee:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
   12af0:	2b00      	cmp	r3, #0
   12af2:	d001      	beq.n	12af8 <i2c_master_read_packet_job+0x10>
}
   12af4:	0010      	movs	r0, r2
   12af6:	bd10      	pop	{r4, pc}
	module->send_stop = true;
   12af8:	3301      	adds	r3, #1
   12afa:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
   12afc:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
   12afe:	4b02      	ldr	r3, [pc, #8]	; (12b08 <i2c_master_read_packet_job+0x20>)
   12b00:	4798      	blx	r3
   12b02:	0002      	movs	r2, r0
   12b04:	e7f6      	b.n	12af4 <i2c_master_read_packet_job+0xc>
   12b06:	46c0      	nop			; (mov r8, r8)
   12b08:	00012a09 	.word	0x00012a09

00012b0c <i2c_master_write_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_write_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   12b0c:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
   12b0e:	8b83      	ldrh	r3, [r0, #28]
   12b10:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
   12b12:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
   12b14:	2b00      	cmp	r3, #0
   12b16:	d001      	beq.n	12b1c <i2c_master_write_packet_job+0x10>
	/* Make sure we send STOP at end*/
	module->send_stop = true;
	module->send_nack = true;
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
}
   12b18:	0010      	movs	r0, r2
   12b1a:	bd10      	pop	{r4, pc}
	module->send_stop = true;
   12b1c:	3301      	adds	r3, #1
   12b1e:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
   12b20:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_write_packet(module, packet);
   12b22:	4b02      	ldr	r3, [pc, #8]	; (12b2c <i2c_master_write_packet_job+0x20>)
   12b24:	4798      	blx	r3
   12b26:	0002      	movs	r2, r0
   12b28:	e7f6      	b.n	12b18 <i2c_master_write_packet_job+0xc>
   12b2a:	46c0      	nop			; (mov r8, r8)
   12b2c:	000129a1 	.word	0x000129a1

00012b30 <i2c_master_write_packet_job_no_stop>:
 * \retval STATUS_BUSY  If module is currently busy with another
 */
enum status_code i2c_master_write_packet_job_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   12b30:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
   12b32:	8b83      	ldrh	r3, [r0, #28]
   12b34:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
   12b36:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
   12b38:	2b00      	cmp	r3, #0
   12b3a:	d001      	beq.n	12b40 <i2c_master_write_packet_job_no_stop+0x10>
	/* Do not send stop condition when done */
	module->send_stop = false;
	module->send_nack = true;
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
}
   12b3c:	0010      	movs	r0, r2
   12b3e:	bd10      	pop	{r4, pc}
	module->send_stop = false;
   12b40:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
   12b42:	3301      	adds	r3, #1
   12b44:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_write_packet(module, packet);
   12b46:	4b02      	ldr	r3, [pc, #8]	; (12b50 <i2c_master_write_packet_job_no_stop+0x20>)
   12b48:	4798      	blx	r3
   12b4a:	0002      	movs	r2, r0
   12b4c:	e7f6      	b.n	12b3c <i2c_master_write_packet_job_no_stop+0xc>
   12b4e:	46c0      	nop			; (mov r8, r8)
   12b50:	000129a1 	.word	0x000129a1

00012b54 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
   12b54:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
   12b56:	0080      	lsls	r0, r0, #2
   12b58:	4b75      	ldr	r3, [pc, #468]	; (12d30 <_i2c_master_interrupt_handler+0x1dc>)
   12b5a:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   12b5c:	6825      	ldr	r5, [r4, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   12b5e:	682b      	ldr	r3, [r5, #0]
   12b60:	011b      	lsls	r3, r3, #4
   12b62:	0fda      	lsrs	r2, r3, #31

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
   12b64:	7e63      	ldrb	r3, [r4, #25]
	callback_mask &= module->registered_callback;
   12b66:	7e26      	ldrb	r6, [r4, #24]
   12b68:	401e      	ands	r6, r3

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
   12b6a:	8b63      	ldrh	r3, [r4, #26]
   12b6c:	b29b      	uxth	r3, r3
   12b6e:	2b00      	cmp	r3, #0
   12b70:	d103      	bne.n	12b7a <_i2c_master_interrupt_handler+0x26>
   12b72:	8ba3      	ldrh	r3, [r4, #28]
   12b74:	b29b      	uxth	r3, r3
   12b76:	2b00      	cmp	r3, #0
   12b78:	d123      	bne.n	12bc2 <_i2c_master_interrupt_handler+0x6e>
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   12b7a:	8b63      	ldrh	r3, [r4, #26]
   12b7c:	b29b      	uxth	r3, r3
   12b7e:	2b00      	cmp	r3, #0
   12b80:	d008      	beq.n	12b94 <_i2c_master_interrupt_handler+0x40>
   12b82:	8ba3      	ldrh	r3, [r4, #28]
   12b84:	b29b      	uxth	r3, r3
   12b86:	2b00      	cmp	r3, #0
   12b88:	d104      	bne.n	12b94 <_i2c_master_interrupt_handler+0x40>
			(module->status == STATUS_BUSY) &&
   12b8a:	3325      	adds	r3, #37	; 0x25
   12b8c:	5ce3      	ldrb	r3, [r4, r3]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   12b8e:	2b05      	cmp	r3, #5
   12b90:	d100      	bne.n	12b94 <_i2c_master_interrupt_handler+0x40>
   12b92:	e06d      	b.n	12c70 <_i2c_master_interrupt_handler+0x11c>
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
   12b94:	8b63      	ldrh	r3, [r4, #26]
   12b96:	b29b      	uxth	r3, r3
   12b98:	2b00      	cmp	r3, #0
   12b9a:	d024      	beq.n	12be6 <_i2c_master_interrupt_handler+0x92>
   12b9c:	8ba3      	ldrh	r3, [r4, #28]
   12b9e:	b29b      	uxth	r3, r3
   12ba0:	2b00      	cmp	r3, #0
   12ba2:	d020      	beq.n	12be6 <_i2c_master_interrupt_handler+0x92>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
   12ba4:	8b6b      	ldrh	r3, [r5, #26]
   12ba6:	069b      	lsls	r3, r3, #26
   12ba8:	d500      	bpl.n	12bac <_i2c_master_interrupt_handler+0x58>
   12baa:	e081      	b.n	12cb0 <_i2c_master_interrupt_handler+0x15c>
   12bac:	2a00      	cmp	r2, #0
   12bae:	d004      	beq.n	12bba <_i2c_master_interrupt_handler+0x66>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
   12bb0:	8ba3      	ldrh	r3, [r4, #28]
   12bb2:	b29b      	uxth	r3, r3
   12bb4:	2b01      	cmp	r3, #1
   12bb6:	d100      	bne.n	12bba <_i2c_master_interrupt_handler+0x66>
   12bb8:	e07a      	b.n	12cb0 <_i2c_master_interrupt_handler+0x15c>
			module->status = STATUS_ERR_PACKET_COLLISION;
   12bba:	2241      	movs	r2, #65	; 0x41
   12bbc:	2325      	movs	r3, #37	; 0x25
   12bbe:	54e2      	strb	r2, [r4, r3]
   12bc0:	e011      	b.n	12be6 <_i2c_master_interrupt_handler+0x92>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
   12bc2:	7e2b      	ldrb	r3, [r5, #24]
   12bc4:	07db      	lsls	r3, r3, #31
   12bc6:	d507      	bpl.n	12bd8 <_i2c_master_interrupt_handler+0x84>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   12bc8:	2301      	movs	r3, #1
   12bca:	762b      	strb	r3, [r5, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   12bcc:	8b6b      	ldrh	r3, [r5, #26]
   12bce:	079b      	lsls	r3, r3, #30
   12bd0:	d52e      	bpl.n	12c30 <_i2c_master_interrupt_handler+0xdc>
			module->status = STATUS_ERR_PACKET_COLLISION;
   12bd2:	2241      	movs	r2, #65	; 0x41
   12bd4:	2325      	movs	r3, #37	; 0x25
   12bd6:	54e2      	strb	r2, [r4, r3]
	module->buffer_length = module->buffer_remaining;
   12bd8:	8ba3      	ldrh	r3, [r4, #28]
   12bda:	b29b      	uxth	r3, r3
   12bdc:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
   12bde:	2325      	movs	r3, #37	; 0x25
   12be0:	5ce3      	ldrb	r3, [r4, r3]
   12be2:	2b05      	cmp	r3, #5
   12be4:	d038      	beq.n	12c58 <_i2c_master_interrupt_handler+0x104>
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   12be6:	8b63      	ldrh	r3, [r4, #26]
   12be8:	b29b      	uxth	r3, r3
   12bea:	2b00      	cmp	r3, #0
   12bec:	d007      	beq.n	12bfe <_i2c_master_interrupt_handler+0xaa>
   12bee:	8ba3      	ldrh	r3, [r4, #28]
   12bf0:	b29b      	uxth	r3, r3
   12bf2:	2b00      	cmp	r3, #0
   12bf4:	d103      	bne.n	12bfe <_i2c_master_interrupt_handler+0xaa>
			(module->status == STATUS_BUSY) &&
   12bf6:	3325      	adds	r3, #37	; 0x25
   12bf8:	5ce3      	ldrb	r3, [r4, r3]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   12bfa:	2b05      	cmp	r3, #5
   12bfc:	d064      	beq.n	12cc8 <_i2c_master_interrupt_handler+0x174>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
   12bfe:	2325      	movs	r3, #37	; 0x25
   12c00:	5ce3      	ldrb	r3, [r4, r3]
   12c02:	2b05      	cmp	r3, #5
   12c04:	d013      	beq.n	12c2e <_i2c_master_interrupt_handler+0xda>
   12c06:	2325      	movs	r3, #37	; 0x25
   12c08:	5ce3      	ldrb	r3, [r4, r3]
   12c0a:	2b00      	cmp	r3, #0
   12c0c:	d00f      	beq.n	12c2e <_i2c_master_interrupt_handler+0xda>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
   12c0e:	2303      	movs	r3, #3
   12c10:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
   12c12:	2300      	movs	r3, #0
   12c14:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
   12c16:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
   12c18:	3325      	adds	r3, #37	; 0x25
   12c1a:	5ce3      	ldrb	r3, [r4, r3]
   12c1c:	2b41      	cmp	r3, #65	; 0x41
   12c1e:	d003      	beq.n	12c28 <_i2c_master_interrupt_handler+0xd4>
   12c20:	7aa3      	ldrb	r3, [r4, #10]
   12c22:	2b00      	cmp	r3, #0
   12c24:	d000      	beq.n	12c28 <_i2c_master_interrupt_handler+0xd4>
   12c26:	e075      	b.n	12d14 <_i2c_master_interrupt_handler+0x1c0>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
   12c28:	0773      	lsls	r3, r6, #29
   12c2a:	d500      	bpl.n	12c2e <_i2c_master_interrupt_handler+0xda>
   12c2c:	e07b      	b.n	12d26 <_i2c_master_interrupt_handler+0x1d2>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
		}
	}
}
   12c2e:	bd70      	pop	{r4, r5, r6, pc}
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   12c30:	8b6b      	ldrh	r3, [r5, #26]
   12c32:	075b      	lsls	r3, r3, #29
   12c34:	d5d0      	bpl.n	12bd8 <_i2c_master_interrupt_handler+0x84>
			module->status           = STATUS_ERR_BAD_ADDRESS;
   12c36:	2218      	movs	r2, #24
   12c38:	2325      	movs	r3, #37	; 0x25
   12c3a:	54e2      	strb	r2, [r4, r3]
			module->buffer_remaining = 0;
   12c3c:	2300      	movs	r3, #0
   12c3e:	83a3      	strh	r3, [r4, #28]
			if (module->send_stop) {
   12c40:	7aa3      	ldrb	r3, [r4, #10]
   12c42:	2b00      	cmp	r3, #0
   12c44:	d0c8      	beq.n	12bd8 <_i2c_master_interrupt_handler+0x84>
				_i2c_master_wait_for_sync(module);
   12c46:	0020      	movs	r0, r4
   12c48:	4b3a      	ldr	r3, [pc, #232]	; (12d34 <_i2c_master_interrupt_handler+0x1e0>)
   12c4a:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   12c4c:	686a      	ldr	r2, [r5, #4]
   12c4e:	23c0      	movs	r3, #192	; 0xc0
   12c50:	029b      	lsls	r3, r3, #10
   12c52:	4313      	orrs	r3, r2
   12c54:	606b      	str	r3, [r5, #4]
   12c56:	e7bf      	b.n	12bd8 <_i2c_master_interrupt_handler+0x84>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   12c58:	331f      	adds	r3, #31
   12c5a:	5ce3      	ldrb	r3, [r4, r3]
   12c5c:	2b00      	cmp	r3, #0
   12c5e:	d003      	beq.n	12c68 <_i2c_master_interrupt_handler+0x114>
			_i2c_master_read(module);
   12c60:	0020      	movs	r0, r4
   12c62:	4b35      	ldr	r3, [pc, #212]	; (12d38 <_i2c_master_interrupt_handler+0x1e4>)
   12c64:	4798      	blx	r3
   12c66:	e7be      	b.n	12be6 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_write(module);
   12c68:	0020      	movs	r0, r4
   12c6a:	4b34      	ldr	r3, [pc, #208]	; (12d3c <_i2c_master_interrupt_handler+0x1e8>)
   12c6c:	4798      	blx	r3
   12c6e:	e7ba      	b.n	12be6 <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
   12c70:	331f      	adds	r3, #31
   12c72:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
   12c74:	2b00      	cmp	r3, #0
   12c76:	d000      	beq.n	12c7a <_i2c_master_interrupt_handler+0x126>
   12c78:	e78c      	b.n	12b94 <_i2c_master_interrupt_handler+0x40>
		i2c_module->INTENCLR.reg =
   12c7a:	3303      	adds	r3, #3
   12c7c:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
   12c7e:	2300      	movs	r3, #0
   12c80:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
   12c82:	3325      	adds	r3, #37	; 0x25
   12c84:	2200      	movs	r2, #0
   12c86:	54e2      	strb	r2, [r4, r3]
		if (module->send_stop) {
   12c88:	7aa3      	ldrb	r3, [r4, #10]
   12c8a:	2b00      	cmp	r3, #0
   12c8c:	d107      	bne.n	12c9e <_i2c_master_interrupt_handler+0x14a>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
   12c8e:	2301      	movs	r3, #1
   12c90:	762b      	strb	r3, [r5, #24]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
   12c92:	07f3      	lsls	r3, r6, #31
   12c94:	d5a7      	bpl.n	12be6 <_i2c_master_interrupt_handler+0x92>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   12c96:	68e3      	ldr	r3, [r4, #12]
   12c98:	0020      	movs	r0, r4
   12c9a:	4798      	blx	r3
   12c9c:	e7a3      	b.n	12be6 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_wait_for_sync(module);
   12c9e:	0020      	movs	r0, r4
   12ca0:	4b24      	ldr	r3, [pc, #144]	; (12d34 <_i2c_master_interrupt_handler+0x1e0>)
   12ca2:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   12ca4:	686a      	ldr	r2, [r5, #4]
   12ca6:	23c0      	movs	r3, #192	; 0xc0
   12ca8:	029b      	lsls	r3, r3, #10
   12caa:	4313      	orrs	r3, r2
   12cac:	606b      	str	r3, [r5, #4]
   12cae:	e7f0      	b.n	12c92 <_i2c_master_interrupt_handler+0x13e>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   12cb0:	2324      	movs	r3, #36	; 0x24
   12cb2:	5ce3      	ldrb	r3, [r4, r3]
   12cb4:	2b00      	cmp	r3, #0
   12cb6:	d103      	bne.n	12cc0 <_i2c_master_interrupt_handler+0x16c>
			_i2c_master_write(module);
   12cb8:	0020      	movs	r0, r4
   12cba:	4b20      	ldr	r3, [pc, #128]	; (12d3c <_i2c_master_interrupt_handler+0x1e8>)
   12cbc:	4798      	blx	r3
   12cbe:	e792      	b.n	12be6 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_read(module);
   12cc0:	0020      	movs	r0, r4
   12cc2:	4b1d      	ldr	r3, [pc, #116]	; (12d38 <_i2c_master_interrupt_handler+0x1e4>)
   12cc4:	4798      	blx	r3
   12cc6:	e78e      	b.n	12be6 <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
   12cc8:	331f      	adds	r3, #31
   12cca:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
   12ccc:	2b01      	cmp	r3, #1
   12cce:	d196      	bne.n	12bfe <_i2c_master_interrupt_handler+0xaa>
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   12cd0:	7e2b      	ldrb	r3, [r5, #24]
   12cd2:	079b      	lsls	r3, r3, #30
   12cd4:	d501      	bpl.n	12cda <_i2c_master_interrupt_handler+0x186>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   12cd6:	2302      	movs	r3, #2
   12cd8:	762b      	strb	r3, [r5, #24]
		i2c_module->INTENCLR.reg =
   12cda:	2303      	movs	r3, #3
   12cdc:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
   12cde:	2300      	movs	r3, #0
   12ce0:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
   12ce2:	3325      	adds	r3, #37	; 0x25
   12ce4:	2200      	movs	r2, #0
   12ce6:	54e2      	strb	r2, [r4, r3]
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
   12ce8:	07b3      	lsls	r3, r6, #30
   12cea:	d503      	bpl.n	12cf4 <_i2c_master_interrupt_handler+0x1a0>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
   12cec:	2324      	movs	r3, #36	; 0x24
   12cee:	5ce3      	ldrb	r3, [r4, r3]
   12cf0:	2b01      	cmp	r3, #1
   12cf2:	d00b      	beq.n	12d0c <_i2c_master_interrupt_handler+0x1b8>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
   12cf4:	07f3      	lsls	r3, r6, #31
   12cf6:	d400      	bmi.n	12cfa <_i2c_master_interrupt_handler+0x1a6>
   12cf8:	e781      	b.n	12bfe <_i2c_master_interrupt_handler+0xaa>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
   12cfa:	2324      	movs	r3, #36	; 0x24
   12cfc:	5ce3      	ldrb	r3, [r4, r3]
   12cfe:	2b00      	cmp	r3, #0
   12d00:	d000      	beq.n	12d04 <_i2c_master_interrupt_handler+0x1b0>
   12d02:	e77c      	b.n	12bfe <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   12d04:	68e3      	ldr	r3, [r4, #12]
   12d06:	0020      	movs	r0, r4
   12d08:	4798      	blx	r3
   12d0a:	e778      	b.n	12bfe <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
   12d0c:	6923      	ldr	r3, [r4, #16]
   12d0e:	0020      	movs	r0, r4
   12d10:	4798      	blx	r3
   12d12:	e774      	b.n	12bfe <_i2c_master_interrupt_handler+0xaa>
			_i2c_master_wait_for_sync(module);
   12d14:	0020      	movs	r0, r4
   12d16:	4b07      	ldr	r3, [pc, #28]	; (12d34 <_i2c_master_interrupt_handler+0x1e0>)
   12d18:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
   12d1a:	686a      	ldr	r2, [r5, #4]
   12d1c:	23e0      	movs	r3, #224	; 0xe0
   12d1e:	02db      	lsls	r3, r3, #11
   12d20:	4313      	orrs	r3, r2
   12d22:	606b      	str	r3, [r5, #4]
   12d24:	e780      	b.n	12c28 <_i2c_master_interrupt_handler+0xd4>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
   12d26:	6963      	ldr	r3, [r4, #20]
   12d28:	0020      	movs	r0, r4
   12d2a:	4798      	blx	r3
}
   12d2c:	e77f      	b.n	12c2e <_i2c_master_interrupt_handler+0xda>
   12d2e:	46c0      	nop			; (mov r8, r8)
   12d30:	20005508 	.word	0x20005508
   12d34:	000128d1 	.word	0x000128d1
   12d38:	000128dd 	.word	0x000128dd
   12d3c:	00012965 	.word	0x00012965

00012d40 <CLI_ResetDevice>:
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
   12d40:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   12d44:	4a02      	ldr	r2, [pc, #8]	; (12d50 <CLI_ResetDevice+0x10>)
   12d46:	4b03      	ldr	r3, [pc, #12]	; (12d54 <CLI_ResetDevice+0x14>)
   12d48:	60da      	str	r2, [r3, #12]
   12d4a:	f3bf 8f4f 	dsb	sy
   12d4e:	e7fe      	b.n	12d4e <CLI_ResetDevice+0xe>
   12d50:	05fa0004 	.word	0x05fa0004
   12d54:	e000ed00 	.word	0xe000ed00

00012d58 <xCliClearTerminalScreen>:
//THIS COMMAND USES vt100 TERMINAL COMMANDS TO CLEAR THE SCREEN ON A TERMINAL PROGRAM LIKE TERA TERM
//SEE http://www.csie.ntu.edu.tw/~r92094/c++/VT100.html for more info
//CLI SPECIFIC COMMANDS
static char bufCli[CLI_MSG_LEN];
BaseType_t xCliClearTerminalScreen( char *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString )
{
   12d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12d5a:	0006      	movs	r6, r0
   12d5c:	000f      	movs	r7, r1
	char clearScreen = ASCII_ESC;
	snprintf(bufCli, CLI_MSG_LEN - 1, "%c[2J", clearScreen);
   12d5e:	4d06      	ldr	r5, [pc, #24]	; (12d78 <xCliClearTerminalScreen+0x20>)
   12d60:	231b      	movs	r3, #27
   12d62:	4a06      	ldr	r2, [pc, #24]	; (12d7c <xCliClearTerminalScreen+0x24>)
   12d64:	210f      	movs	r1, #15
   12d66:	0028      	movs	r0, r5
   12d68:	4c05      	ldr	r4, [pc, #20]	; (12d80 <xCliClearTerminalScreen+0x28>)
   12d6a:	47a0      	blx	r4
	snprintf(pcWriteBuffer, xWriteBufferLen, bufCli);
   12d6c:	002a      	movs	r2, r5
   12d6e:	0039      	movs	r1, r7
   12d70:	0030      	movs	r0, r6
   12d72:	47a0      	blx	r4
	return pdFALSE;
}
   12d74:	2000      	movs	r0, #0
   12d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12d78:	20000450 	.word	0x20000450
   12d7c:	000272c0 	.word	0x000272c0
   12d80:	00025f69 	.word	0x00025f69

00012d84 <CLI_NeotrellisSetLed>:
* @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
				for more information on how to use the FreeRTOS CLI.

*****************************************************************************/
BaseType_t CLI_NeotrellisSetLed( int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString )
{
   12d84:	b510      	push	{r4, lr}
	snprintf(pcWriteBuffer,xWriteBufferLen, "Students to fill out!");
   12d86:	4a02      	ldr	r2, [pc, #8]	; (12d90 <CLI_NeotrellisSetLed+0xc>)
   12d88:	4b02      	ldr	r3, [pc, #8]	; (12d94 <CLI_NeotrellisSetLed+0x10>)
   12d8a:	4798      	blx	r3
	//How do you get parameters? Checl link in comments!
	//Check that the input is sanitized: Key between 0-15, RGB between 0-255. Print if there is an error!
	//return pdFalse to tell the FreeRTOS CLI your call is done and does not need to call again.
	//This function expects 4 arguments inside pcCommandString: key, R, G, B.
	return pdFALSE;
}
   12d8c:	2000      	movs	r0, #0
   12d8e:	bd10      	pop	{r4, pc}
   12d90:	00027124 	.word	0x00027124
   12d94:	00025f69 	.word	0x00025f69

00012d98 <CLI_OTAU>:
{
   12d98:	b510      	push	{r4, lr}
	WifiHandlerSetState(WIFI_DOWNLOAD_INIT);
   12d9a:	2002      	movs	r0, #2
   12d9c:	4b01      	ldr	r3, [pc, #4]	; (12da4 <CLI_OTAU+0xc>)
   12d9e:	4798      	blx	r3
}
   12da0:	2000      	movs	r0, #0
   12da2:	bd10      	pop	{r4, pc}
   12da4:	000141ed 	.word	0x000141ed

00012da8 <CLI_NeotrellProcessButtonBuffer>:
* @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
				for more information on how to use the FreeRTOS CLI.

*****************************************************************************/
BaseType_t CLI_NeotrellProcessButtonBuffer( int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString )
{
   12da8:	b570      	push	{r4, r5, r6, lr}
   12daa:	b090      	sub	sp, #64	; 0x40
   12dac:	0004      	movs	r4, r0
   12dae:	000d      	movs	r5, r1
	//snprintf(pcWriteBuffer,xWriteBufferLen, "count: %d\num_req_eve:%d\t\n",count,num_req_eve);
	//Print to pcWriteBuffer in order.
	//If the string is too long to print, print what you can.
	//The function you write will be useful in the future.
	uint8_t buffer[64];
	uint8_t count = SeesawGetKeypadCount();
   12db0:	4b21      	ldr	r3, [pc, #132]	; (12e38 <CLI_NeotrellProcessButtonBuffer+0x90>)
   12db2:	4798      	blx	r3
		return pdTRUE;
	}
	else
	{
	pcWriteBuffer = 0;
		return pdFALSE;
   12db4:	2300      	movs	r3, #0
	if(count >= 1)
   12db6:	2800      	cmp	r0, #0
   12db8:	d102      	bne.n	12dc0 <CLI_NeotrellProcessButtonBuffer+0x18>
	}
}
   12dba:	0018      	movs	r0, r3
   12dbc:	b010      	add	sp, #64	; 0x40
   12dbe:	bd70      	pop	{r4, r5, r6, pc}
	int32_t res = SeesawReadKeypad(buffer,1);
   12dc0:	2101      	movs	r1, #1
   12dc2:	4668      	mov	r0, sp
   12dc4:	4b1d      	ldr	r3, [pc, #116]	; (12e3c <CLI_NeotrellProcessButtonBuffer+0x94>)
   12dc6:	4798      	blx	r3
		return pdTRUE;
   12dc8:	2301      	movs	r3, #1
	if(res==0)
   12dca:	2800      	cmp	r0, #0
   12dcc:	d1f5      	bne.n	12dba <CLI_NeotrellProcessButtonBuffer+0x12>
			press = buffer[0] & 0x3;
   12dce:	466b      	mov	r3, sp
   12dd0:	781b      	ldrb	r3, [r3, #0]
   12dd2:	2203      	movs	r2, #3
   12dd4:	401a      	ands	r2, r3
			pos =  buffer[0]>>2;
   12dd6:	089b      	lsrs	r3, r3, #2
			int num = NEO_TRELLIS_SEESAW_KEY(pos);
   12dd8:	08d8      	lsrs	r0, r3, #3
   12dda:	0080      	lsls	r0, r0, #2
   12ddc:	2107      	movs	r1, #7
   12dde:	400b      	ands	r3, r1
   12de0:	18c0      	adds	r0, r0, r3
			if(press == 0x2){
   12de2:	2a02      	cmp	r2, #2
   12de4:	d015      	beq.n	12e12 <CLI_NeotrellProcessButtonBuffer+0x6a>
		return pdTRUE;
   12de6:	2301      	movs	r3, #1
			else if(press == 0x3){
   12de8:	2a03      	cmp	r2, #3
   12dea:	d1e6      	bne.n	12dba <CLI_NeotrellProcessButtonBuffer+0x12>
				snprintf( pcWriteBuffer, xWriteBufferLen, "Button #%d is pressed\r\n",NEO_TRELLIS_SEESAW_KEY(num));
   12dec:	17c1      	asrs	r1, r0, #31
   12dee:	3204      	adds	r2, #4
   12df0:	0013      	movs	r3, r2
   12df2:	400b      	ands	r3, r1
   12df4:	181b      	adds	r3, r3, r0
   12df6:	10db      	asrs	r3, r3, #3
   12df8:	009b      	lsls	r3, r3, #2
   12dfa:	0f49      	lsrs	r1, r1, #29
   12dfc:	1840      	adds	r0, r0, r1
   12dfe:	4010      	ands	r0, r2
   12e00:	1a40      	subs	r0, r0, r1
   12e02:	181b      	adds	r3, r3, r0
   12e04:	4a0e      	ldr	r2, [pc, #56]	; (12e40 <CLI_NeotrellProcessButtonBuffer+0x98>)
   12e06:	0029      	movs	r1, r5
   12e08:	0020      	movs	r0, r4
   12e0a:	4c0e      	ldr	r4, [pc, #56]	; (12e44 <CLI_NeotrellProcessButtonBuffer+0x9c>)
   12e0c:	47a0      	blx	r4
		return pdTRUE;
   12e0e:	2301      	movs	r3, #1
   12e10:	e7d3      	b.n	12dba <CLI_NeotrellProcessButtonBuffer+0x12>
				snprintf( pcWriteBuffer, xWriteBufferLen, "Button #%d is released\r\n",NEO_TRELLIS_SEESAW_KEY(num));
   12e12:	17c6      	asrs	r6, r0, #31
   12e14:	000b      	movs	r3, r1
   12e16:	4033      	ands	r3, r6
   12e18:	181b      	adds	r3, r3, r0
   12e1a:	10db      	asrs	r3, r3, #3
   12e1c:	009a      	lsls	r2, r3, #2
   12e1e:	0f76      	lsrs	r6, r6, #29
   12e20:	1983      	adds	r3, r0, r6
   12e22:	400b      	ands	r3, r1
   12e24:	1b9b      	subs	r3, r3, r6
   12e26:	18d3      	adds	r3, r2, r3
   12e28:	4a07      	ldr	r2, [pc, #28]	; (12e48 <CLI_NeotrellProcessButtonBuffer+0xa0>)
   12e2a:	0029      	movs	r1, r5
   12e2c:	0020      	movs	r0, r4
   12e2e:	4c05      	ldr	r4, [pc, #20]	; (12e44 <CLI_NeotrellProcessButtonBuffer+0x9c>)
   12e30:	47a0      	blx	r4
		return pdTRUE;
   12e32:	2301      	movs	r3, #1
   12e34:	e7c1      	b.n	12dba <CLI_NeotrellProcessButtonBuffer+0x12>
   12e36:	46c0      	nop			; (mov r8, r8)
   12e38:	00014ad1 	.word	0x00014ad1
   12e3c:	00014b21 	.word	0x00014b21
   12e40:	0002710c 	.word	0x0002710c
   12e44:	00025f69 	.word	0x00025f69
   12e48:	000270f0 	.word	0x000270f0

00012e4c <vCommandConsoleTask>:
{
   12e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   12e4e:	46c6      	mov	lr, r8
   12e50:	b500      	push	{lr}
   12e52:	b082      	sub	sp, #8
FreeRTOS_CLIRegisterCommand( &xOTAUCommand);
   12e54:	4857      	ldr	r0, [pc, #348]	; (12fb4 <vCommandConsoleTask+0x168>)
   12e56:	4c58      	ldr	r4, [pc, #352]	; (12fb8 <vCommandConsoleTask+0x16c>)
   12e58:	47a0      	blx	r4
FreeRTOS_CLIRegisterCommand( &xClearScreen );
   12e5a:	4858      	ldr	r0, [pc, #352]	; (12fbc <vCommandConsoleTask+0x170>)
   12e5c:	47a0      	blx	r4
FreeRTOS_CLIRegisterCommand( &xResetCommand );
   12e5e:	4858      	ldr	r0, [pc, #352]	; (12fc0 <vCommandConsoleTask+0x174>)
   12e60:	47a0      	blx	r4
FreeRTOS_CLIRegisterCommand( &xNeotrellisTurnLEDCommand );
   12e62:	4858      	ldr	r0, [pc, #352]	; (12fc4 <vCommandConsoleTask+0x178>)
   12e64:	47a0      	blx	r4
FreeRTOS_CLIRegisterCommand( &xNeotrellisProcessButtonCommand );
   12e66:	4858      	ldr	r0, [pc, #352]	; (12fc8 <vCommandConsoleTask+0x17c>)
   12e68:	47a0      	blx	r4
    SerialConsoleWriteString( pcWelcomeMessage);
   12e6a:	4858      	ldr	r0, [pc, #352]	; (12fcc <vCommandConsoleTask+0x180>)
   12e6c:	4b58      	ldr	r3, [pc, #352]	; (12fd0 <vCommandConsoleTask+0x184>)
   12e6e:	4798      	blx	r3
uint8_t cRxedChar[2], cInputIndex = 0;
   12e70:	2400      	movs	r4, #0
        int recv = SerialConsoleReadCharacter(&cRxedChar);
   12e72:	4f58      	ldr	r7, [pc, #352]	; (12fd4 <vCommandConsoleTask+0x188>)
            SerialConsoleWriteString("\r\n");
   12e74:	4b56      	ldr	r3, [pc, #344]	; (12fd0 <vCommandConsoleTask+0x184>)
   12e76:	4698      	mov	r8, r3
   12e78:	e026      	b.n	12ec8 <vCommandConsoleTask+0x7c>
			vTaskDelay( CLI_TASK_DELAY);
   12e7a:	3097      	adds	r0, #151	; 0x97
   12e7c:	4b56      	ldr	r3, [pc, #344]	; (12fd8 <vCommandConsoleTask+0x18c>)
   12e7e:	4798      	blx	r3
   12e80:	e022      	b.n	12ec8 <vCommandConsoleTask+0x7c>
            SerialConsoleWriteString("\r\n");
   12e82:	4856      	ldr	r0, [pc, #344]	; (12fdc <vCommandConsoleTask+0x190>)
   12e84:	47c0      	blx	r8
			isEscapeCode = false; pcEscapeCodePos = 0;
   12e86:	2400      	movs	r4, #0
   12e88:	4b55      	ldr	r3, [pc, #340]	; (12fe0 <vCommandConsoleTask+0x194>)
   12e8a:	701c      	strb	r4, [r3, #0]
   12e8c:	4b55      	ldr	r3, [pc, #340]	; (12fe4 <vCommandConsoleTask+0x198>)
   12e8e:	701c      	strb	r4, [r3, #0]
			strncpy(pcLastCommand, pcInputString, MAX_INPUT_LENGTH_CLI-1);
   12e90:	4d55      	ldr	r5, [pc, #340]	; (12fe8 <vCommandConsoleTask+0x19c>)
   12e92:	220e      	movs	r2, #14
   12e94:	4955      	ldr	r1, [pc, #340]	; (12fec <vCommandConsoleTask+0x1a0>)
   12e96:	0028      	movs	r0, r5
   12e98:	4b55      	ldr	r3, [pc, #340]	; (12ff0 <vCommandConsoleTask+0x1a4>)
   12e9a:	4798      	blx	r3
			pcLastCommand[MAX_INPUT_LENGTH_CLI-1] = 0;	//Ensure null termination
   12e9c:	73ac      	strb	r4, [r5, #14]
                xMoreDataToFollow = FreeRTOS_CLIProcessCommand
   12e9e:	4c55      	ldr	r4, [pc, #340]	; (12ff4 <vCommandConsoleTask+0x1a8>)
   12ea0:	4e55      	ldr	r6, [pc, #340]	; (12ff8 <vCommandConsoleTask+0x1ac>)
   12ea2:	2232      	movs	r2, #50	; 0x32
   12ea4:	0021      	movs	r1, r4
   12ea6:	4851      	ldr	r0, [pc, #324]	; (12fec <vCommandConsoleTask+0x1a0>)
   12ea8:	47b0      	blx	r6
   12eaa:	0005      	movs	r5, r0
				pcOutputString[MAX_OUTPUT_LENGTH_CLI - 1] = 0;
   12eac:	2200      	movs	r2, #0
   12eae:	2331      	movs	r3, #49	; 0x31
   12eb0:	54e2      	strb	r2, [r4, r3]
                SerialConsoleWriteString(pcOutputString);
   12eb2:	0020      	movs	r0, r4
   12eb4:	4b46      	ldr	r3, [pc, #280]	; (12fd0 <vCommandConsoleTask+0x184>)
   12eb6:	4798      	blx	r3
            } while( xMoreDataToFollow != pdFALSE );
   12eb8:	2d00      	cmp	r5, #0
   12eba:	d1f2      	bne.n	12ea2 <vCommandConsoleTask+0x56>
            memset( pcInputString, 0x00, MAX_INPUT_LENGTH_CLI );
   12ebc:	220f      	movs	r2, #15
   12ebe:	2100      	movs	r1, #0
   12ec0:	484a      	ldr	r0, [pc, #296]	; (12fec <vCommandConsoleTask+0x1a0>)
   12ec2:	4b4e      	ldr	r3, [pc, #312]	; (12ffc <vCommandConsoleTask+0x1b0>)
   12ec4:	4798      	blx	r3
            cInputIndex = 0;
   12ec6:	2400      	movs	r4, #0
        int recv = SerialConsoleReadCharacter(&cRxedChar);
   12ec8:	a801      	add	r0, sp, #4
   12eca:	47b8      	blx	r7
		if(recv == -1) //If no characters in the buffer, thread goes to sleep for a while
   12ecc:	1c43      	adds	r3, r0, #1
   12ece:	d0d4      	beq.n	12e7a <vCommandConsoleTask+0x2e>
		}else if( cRxedChar[0] == '\n' || cRxedChar[0] == '\r'  )
   12ed0:	ab01      	add	r3, sp, #4
   12ed2:	781b      	ldrb	r3, [r3, #0]
   12ed4:	2b0a      	cmp	r3, #10
   12ed6:	d0d4      	beq.n	12e82 <vCommandConsoleTask+0x36>
   12ed8:	2b0d      	cmp	r3, #13
   12eda:	d0d2      	beq.n	12e82 <vCommandConsoleTask+0x36>
			if (true == isEscapeCode) {
   12edc:	4a40      	ldr	r2, [pc, #256]	; (12fe0 <vCommandConsoleTask+0x194>)
   12ede:	7812      	ldrb	r2, [r2, #0]
   12ee0:	2a00      	cmp	r2, #0
   12ee2:	d03f      	beq.n	12f64 <vCommandConsoleTask+0x118>
				if(pcEscapeCodePos < CLI_PC_ESCAPE_CODE_SIZE) {
   12ee4:	4a3f      	ldr	r2, [pc, #252]	; (12fe4 <vCommandConsoleTask+0x198>)
   12ee6:	7812      	ldrb	r2, [r2, #0]
   12ee8:	2a03      	cmp	r2, #3
   12eea:	d813      	bhi.n	12f14 <vCommandConsoleTask+0xc8>
					pcEscapeCodes[pcEscapeCodePos++] = cRxedChar[0];
   12eec:	1c51      	adds	r1, r2, #1
   12eee:	b2c9      	uxtb	r1, r1
   12ef0:	483c      	ldr	r0, [pc, #240]	; (12fe4 <vCommandConsoleTask+0x198>)
   12ef2:	7001      	strb	r1, [r0, #0]
   12ef4:	4842      	ldr	r0, [pc, #264]	; (13000 <vCommandConsoleTask+0x1b4>)
   12ef6:	5483      	strb	r3, [r0, r2]
				if (pcEscapeCodePos >= CLI_PC_MIN_ESCAPE_CODE_SIZE) {
   12ef8:	2901      	cmp	r1, #1
   12efa:	d9e5      	bls.n	12ec8 <vCommandConsoleTask+0x7c>
					if(strcasecmp(pcEscapeCodes, "oa"))	{
   12efc:	4941      	ldr	r1, [pc, #260]	; (13004 <vCommandConsoleTask+0x1b8>)
   12efe:	4840      	ldr	r0, [pc, #256]	; (13000 <vCommandConsoleTask+0x1b4>)
   12f00:	4b41      	ldr	r3, [pc, #260]	; (13008 <vCommandConsoleTask+0x1bc>)
   12f02:	4798      	blx	r3
   12f04:	2800      	cmp	r0, #0
   12f06:	d10b      	bne.n	12f20 <vCommandConsoleTask+0xd4>
					isEscapeCode = false; pcEscapeCodePos = 0;
   12f08:	2300      	movs	r3, #0
   12f0a:	4a35      	ldr	r2, [pc, #212]	; (12fe0 <vCommandConsoleTask+0x194>)
   12f0c:	7013      	strb	r3, [r2, #0]
   12f0e:	4a35      	ldr	r2, [pc, #212]	; (12fe4 <vCommandConsoleTask+0x198>)
   12f10:	7013      	strb	r3, [r2, #0]
   12f12:	e7d9      	b.n	12ec8 <vCommandConsoleTask+0x7c>
					isEscapeCode = false; pcEscapeCodePos = 0;
   12f14:	2300      	movs	r3, #0
   12f16:	4a32      	ldr	r2, [pc, #200]	; (12fe0 <vCommandConsoleTask+0x194>)
   12f18:	7013      	strb	r3, [r2, #0]
   12f1a:	4a32      	ldr	r2, [pc, #200]	; (12fe4 <vCommandConsoleTask+0x198>)
   12f1c:	7013      	strb	r3, [r2, #0]
   12f1e:	e7d3      	b.n	12ec8 <vCommandConsoleTask+0x7c>
                            sprintf(pcInputString, "%c[2K\r>", 27);
   12f20:	4c32      	ldr	r4, [pc, #200]	; (12fec <vCommandConsoleTask+0x1a0>)
   12f22:	221b      	movs	r2, #27
   12f24:	4939      	ldr	r1, [pc, #228]	; (1300c <vCommandConsoleTask+0x1c0>)
   12f26:	0020      	movs	r0, r4
   12f28:	4b39      	ldr	r3, [pc, #228]	; (13010 <vCommandConsoleTask+0x1c4>)
   12f2a:	4798      	blx	r3
				            SerialConsoleWriteString(pcInputString);
   12f2c:	0020      	movs	r0, r4
   12f2e:	4b28      	ldr	r3, [pc, #160]	; (12fd0 <vCommandConsoleTask+0x184>)
   12f30:	4798      	blx	r3
                            memset( pcInputString, 0x00, MAX_INPUT_LENGTH_CLI );
   12f32:	220f      	movs	r2, #15
   12f34:	2100      	movs	r1, #0
   12f36:	0020      	movs	r0, r4
   12f38:	4b30      	ldr	r3, [pc, #192]	; (12ffc <vCommandConsoleTask+0x1b0>)
   12f3a:	4798      	blx	r3
						strncpy(pcInputString, pcLastCommand, MAX_INPUT_LENGTH_CLI - 1); 	
   12f3c:	220e      	movs	r2, #14
   12f3e:	492a      	ldr	r1, [pc, #168]	; (12fe8 <vCommandConsoleTask+0x19c>)
   12f40:	0020      	movs	r0, r4
   12f42:	4b2b      	ldr	r3, [pc, #172]	; (12ff0 <vCommandConsoleTask+0x1a4>)
   12f44:	4798      	blx	r3
                        cInputIndex = (strlen(pcInputString) < MAX_INPUT_LENGTH_CLI - 1) ? strlen(pcLastCommand) : MAX_INPUT_LENGTH_CLI - 1;
   12f46:	0020      	movs	r0, r4
   12f48:	4b32      	ldr	r3, [pc, #200]	; (13014 <vCommandConsoleTask+0x1c8>)
   12f4a:	4798      	blx	r3
   12f4c:	240e      	movs	r4, #14
   12f4e:	280d      	cmp	r0, #13
   12f50:	d803      	bhi.n	12f5a <vCommandConsoleTask+0x10e>
   12f52:	4825      	ldr	r0, [pc, #148]	; (12fe8 <vCommandConsoleTask+0x19c>)
   12f54:	4b2f      	ldr	r3, [pc, #188]	; (13014 <vCommandConsoleTask+0x1c8>)
   12f56:	4798      	blx	r3
   12f58:	0004      	movs	r4, r0
   12f5a:	b2e4      	uxtb	r4, r4
						SerialConsoleWriteString(pcInputString);
   12f5c:	4823      	ldr	r0, [pc, #140]	; (12fec <vCommandConsoleTask+0x1a0>)
   12f5e:	4b1c      	ldr	r3, [pc, #112]	; (12fd0 <vCommandConsoleTask+0x184>)
   12f60:	4798      	blx	r3
   12f62:	e7d1      	b.n	12f08 <vCommandConsoleTask+0xbc>
            else if( cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE )
   12f64:	2b08      	cmp	r3, #8
   12f66:	d00f      	beq.n	12f88 <vCommandConsoleTask+0x13c>
   12f68:	2b7f      	cmp	r3, #127	; 0x7f
   12f6a:	d00d      	beq.n	12f88 <vCommandConsoleTask+0x13c>
			else if( cRxedChar[0] == ASCII_ESC) {
   12f6c:	2b1b      	cmp	r3, #27
   12f6e:	d019      	beq.n	12fa4 <vCommandConsoleTask+0x158>
                if( cInputIndex < MAX_INPUT_LENGTH_CLI )
   12f70:	2c0e      	cmp	r4, #14
   12f72:	d803      	bhi.n	12f7c <vCommandConsoleTask+0x130>
                    pcInputString[ cInputIndex ] = cRxedChar[0];
   12f74:	4a1d      	ldr	r2, [pc, #116]	; (12fec <vCommandConsoleTask+0x1a0>)
   12f76:	5513      	strb	r3, [r2, r4]
                    cInputIndex++;
   12f78:	3401      	adds	r4, #1
   12f7a:	b2e4      	uxtb	r4, r4
					cRxedChar[1] = 0;
   12f7c:	a801      	add	r0, sp, #4
   12f7e:	2300      	movs	r3, #0
   12f80:	7043      	strb	r3, [r0, #1]
					SerialConsoleWriteString(&cRxedChar[0]);
   12f82:	4b13      	ldr	r3, [pc, #76]	; (12fd0 <vCommandConsoleTask+0x184>)
   12f84:	4798      	blx	r3
   12f86:	e79f      	b.n	12ec8 <vCommandConsoleTask+0x7c>
				char erase[4] = {0x08, 0x20, 0x08, 0x00};
   12f88:	4b23      	ldr	r3, [pc, #140]	; (13018 <vCommandConsoleTask+0x1cc>)
   12f8a:	681b      	ldr	r3, [r3, #0]
   12f8c:	9300      	str	r3, [sp, #0]
				SerialConsoleWriteString(erase);
   12f8e:	4668      	mov	r0, sp
   12f90:	4b0f      	ldr	r3, [pc, #60]	; (12fd0 <vCommandConsoleTask+0x184>)
   12f92:	4798      	blx	r3
                if( cInputIndex > 0 )
   12f94:	2c00      	cmp	r4, #0
   12f96:	d097      	beq.n	12ec8 <vCommandConsoleTask+0x7c>
                    cInputIndex--;
   12f98:	3c01      	subs	r4, #1
   12f9a:	b2e4      	uxtb	r4, r4
                    pcInputString[ cInputIndex ] = 0;
   12f9c:	2200      	movs	r2, #0
   12f9e:	4b13      	ldr	r3, [pc, #76]	; (12fec <vCommandConsoleTask+0x1a0>)
   12fa0:	551a      	strb	r2, [r3, r4]
            {
   12fa2:	e791      	b.n	12ec8 <vCommandConsoleTask+0x7c>
				isEscapeCode = true; //Next characters will be code arguments
   12fa4:	2201      	movs	r2, #1
   12fa6:	4b0e      	ldr	r3, [pc, #56]	; (12fe0 <vCommandConsoleTask+0x194>)
   12fa8:	701a      	strb	r2, [r3, #0]
				pcEscapeCodePos = 0;
   12faa:	2200      	movs	r2, #0
   12fac:	4b0d      	ldr	r3, [pc, #52]	; (12fe4 <vCommandConsoleTask+0x198>)
   12fae:	701a      	strb	r2, [r3, #0]
   12fb0:	e78a      	b.n	12ec8 <vCommandConsoleTask+0x7c>
   12fb2:	46c0      	nop			; (mov r8, r8)
   12fb4:	000272e8 	.word	0x000272e8
   12fb8:	0001526d 	.word	0x0001526d
   12fbc:	000272b0 	.word	0x000272b0
   12fc0:	000272f8 	.word	0x000272f8
   12fc4:	000272d8 	.word	0x000272d8
   12fc8:	000272c8 	.word	0x000272c8
   12fcc:	00027260 	.word	0x00027260
   12fd0:	0001904d 	.word	0x0001904d
   12fd4:	000190d1 	.word	0x000190d1
   12fd8:	000181d5 	.word	0x000181d5
   12fdc:	00027bfc 	.word	0x00027bfc
   12fe0:	20000460 	.word	0x20000460
   12fe4:	20000461 	.word	0x20000461
   12fe8:	20000478 	.word	0x20000478
   12fec:	20000468 	.word	0x20000468
   12ff0:	000260f7 	.word	0x000260f7
   12ff4:	20000488 	.word	0x20000488
   12ff8:	000152b1 	.word	0x000152b1
   12ffc:	00025d0f 	.word	0x00025d0f
   13000:	20000464 	.word	0x20000464
   13004:	000272a4 	.word	0x000272a4
   13008:	00026011 	.word	0x00026011
   1300c:	000272a8 	.word	0x000272a8
   13010:	00025fcd 	.word	0x00025fcd
   13014:	000260c7 	.word	0x000260c7
   13018:	000270ec 	.word	0x000270ec

0001301c <vControlHandlerTask>:
* @param[in]	Parameters passed when task is initialized. In this case we can ignore them!
* @return		Should not return! This is a task defining function.
* @note         
*****************************************************************************/
void vControlHandlerTask( void *pvParameters )
{
   1301c:	b570      	push	{r4, r5, r6, lr}
   1301e:	b086      	sub	sp, #24
	SerialConsoleWriteString("ESE516 - Control Init Code\r\n");
   13020:	4848      	ldr	r0, [pc, #288]	; (13144 <vControlHandlerTask+0x128>)
   13022:	4b49      	ldr	r3, [pc, #292]	; (13148 <vControlHandlerTask+0x12c>)
   13024:	4798      	blx	r3

	//Initialize Queues
	xQueueGameBufferIn = xQueueCreate( 2, sizeof( struct GameDataPacket ) );
   13026:	2200      	movs	r2, #0
   13028:	2114      	movs	r1, #20
   1302a:	2002      	movs	r0, #2
   1302c:	4c47      	ldr	r4, [pc, #284]	; (1314c <vControlHandlerTask+0x130>)
   1302e:	47a0      	blx	r4
   13030:	4d47      	ldr	r5, [pc, #284]	; (13150 <vControlHandlerTask+0x134>)
   13032:	6028      	str	r0, [r5, #0]
	xQueueRgbColorBuffer = xQueueCreate( 2, sizeof( struct RgbColorPacket ) );
   13034:	2200      	movs	r2, #0
   13036:	2103      	movs	r1, #3
   13038:	2002      	movs	r0, #2
   1303a:	47a0      	blx	r4
   1303c:	4b45      	ldr	r3, [pc, #276]	; (13154 <vControlHandlerTask+0x138>)
   1303e:	6018      	str	r0, [r3, #0]
	xQueueStatusBuffer  = xQueueCreate( 5, sizeof( uint8_t ) );
   13040:	2200      	movs	r2, #0
   13042:	2101      	movs	r1, #1
   13044:	2005      	movs	r0, #5
   13046:	47a0      	blx	r4
   13048:	4b43      	ldr	r3, [pc, #268]	; (13158 <vControlHandlerTask+0x13c>)
   1304a:	6018      	str	r0, [r3, #0]

	if(xQueueGameBufferIn == NULL || xQueueRgbColorBuffer == NULL || xQueueStatusBuffer==NULL){
   1304c:	682b      	ldr	r3, [r5, #0]
   1304e:	2b00      	cmp	r3, #0
   13050:	d00c      	beq.n	1306c <vControlHandlerTask+0x50>
   13052:	4b40      	ldr	r3, [pc, #256]	; (13154 <vControlHandlerTask+0x138>)
   13054:	681b      	ldr	r3, [r3, #0]
   13056:	2b00      	cmp	r3, #0
   13058:	d008      	beq.n	1306c <vControlHandlerTask+0x50>
   1305a:	2800      	cmp	r0, #0
   1305c:	d006      	beq.n	1306c <vControlHandlerTask+0x50>
		SerialConsoleWriteString("ERROR Initializing Control Data queues!\r\n");
	}
	controlState = CONTROL_WAIT_FOR_STATUS; //Initial state
   1305e:	2200      	movs	r2, #0
   13060:	4b3e      	ldr	r3, [pc, #248]	; (1315c <vControlHandlerTask+0x140>)
   13062:	701a      	strb	r2, [r3, #0]
	
	uint8_t gamestatus;
	while(1)
	{
		switch(controlState)
   13064:	001c      	movs	r4, r3
// 					controlState = CONTROL_WAIT_FOR_STATUS;
// 					break;
// 				}
				//do the task
				struct GameDataPacket gamePacketIn;
				if(pdPASS == xQueueReceive( xQueueGameBufferIn , &gamePacketIn, 10 ))
   13066:	4e3a      	ldr	r6, [pc, #232]	; (13150 <vControlHandlerTask+0x134>)
   13068:	4d3d      	ldr	r5, [pc, #244]	; (13160 <vControlHandlerTask+0x144>)
   1306a:	e015      	b.n	13098 <vControlHandlerTask+0x7c>
		SerialConsoleWriteString("ERROR Initializing Control Data queues!\r\n");
   1306c:	483d      	ldr	r0, [pc, #244]	; (13164 <vControlHandlerTask+0x148>)
   1306e:	4b36      	ldr	r3, [pc, #216]	; (13148 <vControlHandlerTask+0x12c>)
   13070:	4798      	blx	r3
   13072:	e7f4      	b.n	1305e <vControlHandlerTask+0x42>
				if (pdPASS == xQueueReceive( xQueueStatusBuffer , &gamestatus, 10 ))
   13074:	4b38      	ldr	r3, [pc, #224]	; (13158 <vControlHandlerTask+0x13c>)
   13076:	6818      	ldr	r0, [r3, #0]
   13078:	220a      	movs	r2, #10
   1307a:	2117      	movs	r1, #23
   1307c:	4469      	add	r1, sp
   1307e:	4b38      	ldr	r3, [pc, #224]	; (13160 <vControlHandlerTask+0x144>)
   13080:	4798      	blx	r3
   13082:	2801      	cmp	r0, #1
   13084:	d015      	beq.n	130b2 <vControlHandlerTask+0x96>
				if(pdPASS == xQueueReceive( xQueueGameBufferIn , &gamePacketIn, 10 ))
   13086:	220a      	movs	r2, #10
   13088:	4669      	mov	r1, sp
   1308a:	6830      	ldr	r0, [r6, #0]
   1308c:	47a8      	blx	r5
   1308e:	2801      	cmp	r0, #1
   13090:	d039      	beq.n	13106 <vControlHandlerTask+0xea>
			}
			
			default:
				controlState = CONTROL_WAIT_FOR_STATUS;
		}
	vTaskDelay(5);
   13092:	2005      	movs	r0, #5
   13094:	4b34      	ldr	r3, [pc, #208]	; (13168 <vControlHandlerTask+0x14c>)
   13096:	4798      	blx	r3
		switch(controlState)
   13098:	7823      	ldrb	r3, [r4, #0]
   1309a:	2b01      	cmp	r3, #1
   1309c:	d0f3      	beq.n	13086 <vControlHandlerTask+0x6a>
   1309e:	2b00      	cmp	r3, #0
   130a0:	d0e8      	beq.n	13074 <vControlHandlerTask+0x58>
   130a2:	2b02      	cmp	r3, #2
   130a4:	d03b      	beq.n	1311e <vControlHandlerTask+0x102>
   130a6:	2b03      	cmp	r3, #3
   130a8:	d0f3      	beq.n	13092 <vControlHandlerTask+0x76>
				controlState = CONTROL_WAIT_FOR_STATUS;
   130aa:	2200      	movs	r2, #0
   130ac:	4b2b      	ldr	r3, [pc, #172]	; (1315c <vControlHandlerTask+0x140>)
   130ae:	701a      	strb	r2, [r3, #0]
   130b0:	e7ef      	b.n	13092 <vControlHandlerTask+0x76>
					switch (gamestatus){
   130b2:	2317      	movs	r3, #23
   130b4:	446b      	add	r3, sp
   130b6:	781b      	ldrb	r3, [r3, #0]
   130b8:	2b02      	cmp	r3, #2
   130ba:	d014      	beq.n	130e6 <vControlHandlerTask+0xca>
   130bc:	b2da      	uxtb	r2, r3
   130be:	2a02      	cmp	r2, #2
   130c0:	d909      	bls.n	130d6 <vControlHandlerTask+0xba>
   130c2:	2b03      	cmp	r3, #3
   130c4:	d015      	beq.n	130f2 <vControlHandlerTask+0xd6>
   130c6:	2b04      	cmp	r3, #4
   130c8:	d119      	bne.n	130fe <vControlHandlerTask+0xe2>
							MicroOLEDdrawWinner();
   130ca:	4b28      	ldr	r3, [pc, #160]	; (1316c <vControlHandlerTask+0x150>)
   130cc:	4798      	blx	r3
							controlState = CONTROL_END_GAME;
   130ce:	2203      	movs	r2, #3
   130d0:	4b22      	ldr	r3, [pc, #136]	; (1315c <vControlHandlerTask+0x140>)
   130d2:	701a      	strb	r2, [r3, #0]
							break;
   130d4:	e7d7      	b.n	13086 <vControlHandlerTask+0x6a>
					switch (gamestatus){
   130d6:	2b01      	cmp	r3, #1
   130d8:	d111      	bne.n	130fe <vControlHandlerTask+0xe2>
								MicroOLEDdrawWait();
   130da:	4b25      	ldr	r3, [pc, #148]	; (13170 <vControlHandlerTask+0x154>)
   130dc:	4798      	blx	r3
								controlState = CONTROL_WAIT_FOR_STATUS;
   130de:	2200      	movs	r2, #0
   130e0:	4b1e      	ldr	r3, [pc, #120]	; (1315c <vControlHandlerTask+0x140>)
   130e2:	701a      	strb	r2, [r3, #0]
							break;							
   130e4:	e7cf      	b.n	13086 <vControlHandlerTask+0x6a>
								MicroOLEDdrawWait();
   130e6:	4b22      	ldr	r3, [pc, #136]	; (13170 <vControlHandlerTask+0x154>)
   130e8:	4798      	blx	r3
								controlState = CONTROL_WAIT_FOR_GAME;
   130ea:	2201      	movs	r2, #1
   130ec:	4b1b      	ldr	r3, [pc, #108]	; (1315c <vControlHandlerTask+0x140>)
   130ee:	701a      	strb	r2, [r3, #0]
							break;
   130f0:	e7c9      	b.n	13086 <vControlHandlerTask+0x6a>
							MicroOLEDdrawLoser();
   130f2:	4b20      	ldr	r3, [pc, #128]	; (13174 <vControlHandlerTask+0x158>)
   130f4:	4798      	blx	r3
							controlState = CONTROL_END_GAME;
   130f6:	2203      	movs	r2, #3
   130f8:	4b18      	ldr	r3, [pc, #96]	; (1315c <vControlHandlerTask+0x140>)
   130fa:	701a      	strb	r2, [r3, #0]
							break;
   130fc:	e7c3      	b.n	13086 <vControlHandlerTask+0x6a>
							controlState = CONTROL_WAIT_FOR_STATUS;		
   130fe:	2200      	movs	r2, #0
   13100:	4b16      	ldr	r3, [pc, #88]	; (1315c <vControlHandlerTask+0x140>)
   13102:	701a      	strb	r2, [r3, #0]
						break;
   13104:	e7bf      	b.n	13086 <vControlHandlerTask+0x6a>
					LogMessage(LOG_DEBUG_LVL, "Control Thread: Consumed game packet!\r\n");
   13106:	491c      	ldr	r1, [pc, #112]	; (13178 <vControlHandlerTask+0x15c>)
   13108:	4b1c      	ldr	r3, [pc, #112]	; (1317c <vControlHandlerTask+0x160>)
   1310a:	4798      	blx	r3
					MicroOLEDdrawTurns();
   1310c:	4b1c      	ldr	r3, [pc, #112]	; (13180 <vControlHandlerTask+0x164>)
   1310e:	4798      	blx	r3
					UiOrderShowMoves(&gamePacketIn);
   13110:	4668      	mov	r0, sp
   13112:	4b1c      	ldr	r3, [pc, #112]	; (13184 <vControlHandlerTask+0x168>)
   13114:	4798      	blx	r3
					controlState = CONTROL_PLAYING_MOVE;
   13116:	2202      	movs	r2, #2
   13118:	4b10      	ldr	r3, [pc, #64]	; (1315c <vControlHandlerTask+0x140>)
   1311a:	701a      	strb	r2, [r3, #0]
   1311c:	e7b9      	b.n	13092 <vControlHandlerTask+0x76>
				if(UiPlayIsDone() == true)
   1311e:	4b1a      	ldr	r3, [pc, #104]	; (13188 <vControlHandlerTask+0x16c>)
   13120:	4798      	blx	r3
   13122:	2800      	cmp	r0, #0
   13124:	d0b5      	beq.n	13092 <vControlHandlerTask+0x76>
					if( pdTRUE != WifiAddGameDataToQueue(UiGetGamePacketOut()))
   13126:	4b19      	ldr	r3, [pc, #100]	; (1318c <vControlHandlerTask+0x170>)
   13128:	4798      	blx	r3
   1312a:	4b19      	ldr	r3, [pc, #100]	; (13190 <vControlHandlerTask+0x174>)
   1312c:	4798      	blx	r3
   1312e:	2801      	cmp	r0, #1
   13130:	d003      	beq.n	1313a <vControlHandlerTask+0x11e>
						LogMessage(LOG_DEBUG_LVL, "Control Thread: Could not send game packet!\r\n");
   13132:	4918      	ldr	r1, [pc, #96]	; (13194 <vControlHandlerTask+0x178>)
   13134:	2001      	movs	r0, #1
   13136:	4b11      	ldr	r3, [pc, #68]	; (1317c <vControlHandlerTask+0x160>)
   13138:	4798      	blx	r3
					controlState = CONTROL_WAIT_FOR_STATUS;
   1313a:	2200      	movs	r2, #0
   1313c:	4b07      	ldr	r3, [pc, #28]	; (1315c <vControlHandlerTask+0x140>)
   1313e:	701a      	strb	r2, [r3, #0]
   13140:	e7a7      	b.n	13092 <vControlHandlerTask+0x76>
   13142:	46c0      	nop			; (mov r8, r8)
   13144:	00027308 	.word	0x00027308
   13148:	0001904d 	.word	0x0001904d
   1314c:	00016c0d 	.word	0x00016c0d
   13150:	200004bc 	.word	0x200004bc
   13154:	200004c0 	.word	0x200004c0
   13158:	200004c4 	.word	0x200004c4
   1315c:	200041f0 	.word	0x200041f0
   13160:	000173e5 	.word	0x000173e5
   13164:	00027328 	.word	0x00027328
   13168:	000181d5 	.word	0x000181d5
   1316c:	00014a81 	.word	0x00014a81
   13170:	00014abd 	.word	0x00014abd
   13174:	00014a95 	.word	0x00014a95
   13178:	00027354 	.word	0x00027354
   1317c:	000190fd 	.word	0x000190fd
   13180:	00014aa9 	.word	0x00014aa9
   13184:	00013469 	.word	0x00013469
   13188:	00013495 	.word	0x00013495
   1318c:	000134a1 	.word	0x000134a1
   13190:	00014219 	.word	0x00014219
   13194:	0002737c 	.word	0x0002737c

00013198 <ControlAddGameData>:
* @return		Returns pdTrue if data can be added to queue, 0 if queue is full
* @note         

*****************************************************************************/
int ControlAddGameData(struct GameDataPacket *gameIn)
{
   13198:	b510      	push	{r4, lr}
   1319a:	0001      	movs	r1, r0
	int error = xQueueSend(xQueueGameBufferIn , gameIn, ( TickType_t ) 10);
   1319c:	4b03      	ldr	r3, [pc, #12]	; (131ac <ControlAddGameData+0x14>)
   1319e:	6818      	ldr	r0, [r3, #0]
   131a0:	2300      	movs	r3, #0
   131a2:	220a      	movs	r2, #10
   131a4:	4c02      	ldr	r4, [pc, #8]	; (131b0 <ControlAddGameData+0x18>)
   131a6:	47a0      	blx	r4
	return error;
}
   131a8:	bd10      	pop	{r4, pc}
   131aa:	46c0      	nop			; (mov r8, r8)
   131ac:	200004bc 	.word	0x200004bc
   131b0:	00016d49 	.word	0x00016d49

000131b4 <ControlAddStatusDataToQueue>:
* @return		Returns pdTrue if data can be added to queue, pdFalse if queue is full
* @note

*****************************************************************************/
int ControlAddStatusDataToQueue(uint8_t *statusdada)
{
   131b4:	b510      	push	{r4, lr}
   131b6:	0001      	movs	r1, r0
	int error = xQueueSend(xQueueStatusBuffer , statusdada, ( TickType_t ) 10);
   131b8:	4b03      	ldr	r3, [pc, #12]	; (131c8 <ControlAddStatusDataToQueue+0x14>)
   131ba:	6818      	ldr	r0, [r3, #0]
   131bc:	2300      	movs	r3, #0
   131be:	220a      	movs	r2, #10
   131c0:	4c02      	ldr	r4, [pc, #8]	; (131cc <ControlAddStatusDataToQueue+0x18>)
   131c2:	47a0      	blx	r4
	return error;
   131c4:	bd10      	pop	{r4, pc}
   131c6:	46c0      	nop			; (mov r8, r8)
   131c8:	200004c4 	.word	0x200004c4
   131cc:	00016d49 	.word	0x00016d49

000131d0 <vLightReadTask>:




void vLightReadTask( void *pvParameters )
{
   131d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   131d2:	46ce      	mov	lr, r9
   131d4:	4647      	mov	r7, r8
   131d6:	b580      	push	{r7, lr}
   131d8:	b083      	sub	sp, #12

/* The input and output buffers are declared static to keep them off the stack. */
	uint32_t lightdata = 0;
   131da:	2300      	movs	r3, #0
   131dc:	9301      	str	r3, [sp, #4]
	VEML_Reset();
   131de:	4b10      	ldr	r3, [pc, #64]	; (13220 <vLightReadTask+0x50>)
   131e0:	4798      	blx	r3
	delay_ms(100);
   131e2:	2064      	movs	r0, #100	; 0x64
   131e4:	4b0f      	ldr	r3, [pc, #60]	; (13224 <vLightReadTask+0x54>)
   131e6:	4798      	blx	r3
    /* Send a welcome message to the user knows they are connected. */
	VEML_Power_On();
   131e8:	4b0f      	ldr	r3, [pc, #60]	; (13228 <vLightReadTask+0x58>)
   131ea:	4798      	blx	r3
    {
//		VEML_Power_On();
		// After starting sensor, wait 200ms to collect data
// 		vTaskDelay();
//		taskENTER_CRITICAL();
		VEML_ReadALSData(&lightdata);
   131ec:	4b0f      	ldr	r3, [pc, #60]	; (1322c <vLightReadTask+0x5c>)
   131ee:	4699      	mov	r9, r3
//		taskEXIT_CRITICAL();
		uint8_t R = lightdata/10;
   131f0:	4f0f      	ldr	r7, [pc, #60]	; (13230 <vLightReadTask+0x60>)
		uint8_t G = lightdata/20;
		uint8_t B = 255 - lightdata/10;
		UIChangeColors(R,G,B);
   131f2:	4b10      	ldr	r3, [pc, #64]	; (13234 <vLightReadTask+0x64>)
   131f4:	4698      	mov	r8, r3
		VEML_ReadALSData(&lightdata);
   131f6:	a801      	add	r0, sp, #4
   131f8:	47c8      	blx	r9
		uint8_t R = lightdata/10;
   131fa:	9e01      	ldr	r6, [sp, #4]
   131fc:	210a      	movs	r1, #10
   131fe:	0030      	movs	r0, r6
   13200:	47b8      	blx	r7
   13202:	b2c4      	uxtb	r4, r0
		uint8_t B = 255 - lightdata/10;
   13204:	43e5      	mvns	r5, r4
		UIChangeColors(R,G,B);
   13206:	b2ed      	uxtb	r5, r5
		uint8_t G = lightdata/20;
   13208:	2114      	movs	r1, #20
   1320a:	0030      	movs	r0, r6
   1320c:	47b8      	blx	r7
		UIChangeColors(R,G,B);
   1320e:	b2c1      	uxtb	r1, r0
   13210:	002a      	movs	r2, r5
   13212:	0020      	movs	r0, r4
   13214:	47c0      	blx	r8
// 		VEML_Read_Power_Saving(&powersaving);
// 		snprintf(sensormsg, 15, "Power saving:%d\r\n", powersaving);
// 		SerialConsoleWriteString(sensormsg);
//		VEML_Power_Off();

		vTaskDelay(4000);
   13216:	20fa      	movs	r0, #250	; 0xfa
   13218:	0100      	lsls	r0, r0, #4
   1321a:	4b07      	ldr	r3, [pc, #28]	; (13238 <vLightReadTask+0x68>)
   1321c:	4798      	blx	r3
   1321e:	e7ea      	b.n	131f6 <vLightReadTask+0x26>
   13220:	00014729 	.word	0x00014729
   13224:	0001a131 	.word	0x0001a131
   13228:	00014779 	.word	0x00014779
   1322c:	00014799 	.word	0x00014799
   13230:	00024055 	.word	0x00024055
   13234:	000134a9 	.word	0x000134a9
   13238:	000181d5 	.word	0x000181d5

0001323c <vUiHandlerTask>:
* @param[in]	Parameters passed when task is initialized. In this case we can ignore them!
* @return		Should not return! This is a task defining function.
* @note         
*****************************************************************************/
void vUiHandlerTask( void *pvParameters )
{
   1323c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1323e:	46de      	mov	lr, fp
   13240:	4657      	mov	r7, sl
   13242:	464e      	mov	r6, r9
   13244:	4645      	mov	r5, r8
   13246:	b5e0      	push	{r5, r6, r7, lr}
   13248:	b083      	sub	sp, #12
//Do initialization code here
SerialConsoleWriteString("UI Task Started!");
   1324a:	4872      	ldr	r0, [pc, #456]	; (13414 <vUiHandlerTask+0x1d8>)
   1324c:	4b72      	ldr	r3, [pc, #456]	; (13418 <vUiHandlerTask+0x1dc>)
   1324e:	4798      	blx	r3
uiState = UI_STATE_IGNORE_PRESSES; //Initial state
   13250:	2401      	movs	r4, #1
   13252:	4b72      	ldr	r3, [pc, #456]	; (1341c <vUiHandlerTask+0x1e0>)
   13254:	701c      	strb	r4, [r3, #0]

//Graphics Test - Remove if not using
gfx_mono_init();
   13256:	4b72      	ldr	r3, [pc, #456]	; (13420 <vUiHandlerTask+0x1e4>)
   13258:	4798      	blx	r3
gfx_mono_draw_line(1, 1, 62, 46, GFX_PIXEL_SET);
   1325a:	9400      	str	r4, [sp, #0]
   1325c:	232e      	movs	r3, #46	; 0x2e
   1325e:	223e      	movs	r2, #62	; 0x3e
   13260:	2101      	movs	r1, #1
   13262:	2001      	movs	r0, #1
   13264:	4c6f      	ldr	r4, [pc, #444]	; (13424 <vUiHandlerTask+0x1e8>)
   13266:	47a0      	blx	r4
// Draw a filled circle with all quadrant drawn
gfx_mono_draw_filled_circle(36, 20, 20, GFX_PIXEL_SET, GFX_WHOLE);
   13268:	23ff      	movs	r3, #255	; 0xff
   1326a:	9300      	str	r3, [sp, #0]
   1326c:	3bfe      	subs	r3, #254	; 0xfe
   1326e:	2214      	movs	r2, #20
   13270:	2114      	movs	r1, #20
   13272:	2024      	movs	r0, #36	; 0x24
   13274:	4c6c      	ldr	r4, [pc, #432]	; (13428 <vUiHandlerTask+0x1ec>)
   13276:	47a0      	blx	r4


//Here we start the loop for the UI State Machine
while(1)
{
	switch(uiState)
   13278:	4b68      	ldr	r3, [pc, #416]	; (1341c <vUiHandlerTask+0x1e0>)
   1327a:	469b      	mov	fp, r3
   1327c:	e00d      	b.n	1329a <vUiHandlerTask+0x5e>
			//keysToPress = 1; //Set as an example to 1. STUDENTS should change this to the number of key presses needed.
			memset(gamePacketOut.game,0xff, sizeof(gamePacketOut.game)); //Erase gamePacketOut to an initial state
			playIsDone = false; //Set play to false
			uint8_t presses = SeesawGetKeypadCount();
			if(presses >= BUTTON_PRESSES_MAX) presses = BUTTON_PRESSES_MAX;
			if(presses != 0) SeesawReadKeypad(buttons,presses); //Empty Seesaw buffer just in case it has latent presses on it!
   1327e:	486b      	ldr	r0, [pc, #428]	; (1342c <vUiHandlerTask+0x1f0>)
   13280:	4b6b      	ldr	r3, [pc, #428]	; (13430 <vUiHandlerTask+0x1f4>)
   13282:	4798      	blx	r3
   13284:	e025      	b.n	132d2 <vUiHandlerTask+0x96>
			memset(buttons, 0, BUTTON_PRESSES_MAX);
			//STUDENTS: Make this function show the moves of the gamePacketIn.
			//You can use a static delay to show each move but a quicker delay as the message gets longer might be more fun!
			//After you finish showing the move should go to state UI_STATE_HANDLE_BUTTONS
			
			for (int i =0; i < GAME_SIZE;i++)
   13286:	2400      	movs	r4, #0
			{
				//quit if it reaches the end of the move
				if (gamePacketIn.game[i]==0xff)
				{
					keysToPress = i+1;
   13288:	3401      	adds	r4, #1
   1328a:	4b6a      	ldr	r3, [pc, #424]	; (13434 <vUiHandlerTask+0x1f8>)
   1328c:	701c      	strb	r4, [r3, #0]
// 			SeesawOrderLedUpdate();
// 			vTaskDelay(1000);
// 			SeesawSetLed(15,0,0,0); //Turn button 15 off
// 			SeesawOrderLedUpdate();
// 			vTaskDelay(1000);
			uiState = UI_STATE_HANDLE_BUTTONS;
   1328e:	2200      	movs	r2, #0
   13290:	4b62      	ldr	r3, [pc, #392]	; (1341c <vUiHandlerTask+0x1e0>)
   13292:	701a      	strb	r2, [r3, #0]
			uiState = UI_STATE_HANDLE_BUTTONS;
		break;
	}

	//After execution, you can put a thread to sleep for some time.
	vTaskDelay(50);
   13294:	2032      	movs	r0, #50	; 0x32
   13296:	4b68      	ldr	r3, [pc, #416]	; (13438 <vUiHandlerTask+0x1fc>)
   13298:	4798      	blx	r3
	switch(uiState)
   1329a:	465b      	mov	r3, fp
   1329c:	781b      	ldrb	r3, [r3, #0]
   1329e:	2b01      	cmp	r3, #1
   132a0:	d0f8      	beq.n	13294 <vUiHandlerTask+0x58>
   132a2:	2b00      	cmp	r3, #0
   132a4:	d05d      	beq.n	13362 <vUiHandlerTask+0x126>
   132a6:	2b02      	cmp	r3, #2
   132a8:	d000      	beq.n	132ac <vUiHandlerTask+0x70>
   132aa:	e0ae      	b.n	1340a <vUiHandlerTask+0x1ce>
			pressedKeys = 0; //Set number of keys pressed by player to 0.
   132ac:	2400      	movs	r4, #0
   132ae:	4b63      	ldr	r3, [pc, #396]	; (1343c <vUiHandlerTask+0x200>)
   132b0:	701c      	strb	r4, [r3, #0]
			memset(gamePacketOut.game,0xff, sizeof(gamePacketOut.game)); //Erase gamePacketOut to an initial state
   132b2:	2214      	movs	r2, #20
   132b4:	21ff      	movs	r1, #255	; 0xff
   132b6:	4862      	ldr	r0, [pc, #392]	; (13440 <vUiHandlerTask+0x204>)
   132b8:	4b62      	ldr	r3, [pc, #392]	; (13444 <vUiHandlerTask+0x208>)
   132ba:	4798      	blx	r3
			playIsDone = false; //Set play to false
   132bc:	4b62      	ldr	r3, [pc, #392]	; (13448 <vUiHandlerTask+0x20c>)
   132be:	701c      	strb	r4, [r3, #0]
			uint8_t presses = SeesawGetKeypadCount();
   132c0:	4b62      	ldr	r3, [pc, #392]	; (1344c <vUiHandlerTask+0x210>)
   132c2:	4798      	blx	r3
   132c4:	1c01      	adds	r1, r0, #0
   132c6:	2810      	cmp	r0, #16
   132c8:	d900      	bls.n	132cc <vUiHandlerTask+0x90>
   132ca:	2110      	movs	r1, #16
   132cc:	b2c9      	uxtb	r1, r1
			if(presses != 0) SeesawReadKeypad(buttons,presses); //Empty Seesaw buffer just in case it has latent presses on it!
   132ce:	2900      	cmp	r1, #0
   132d0:	d1d5      	bne.n	1327e <vUiHandlerTask+0x42>
			memset(buttons, 0, BUTTON_PRESSES_MAX);
   132d2:	2210      	movs	r2, #16
   132d4:	2100      	movs	r1, #0
   132d6:	4855      	ldr	r0, [pc, #340]	; (1342c <vUiHandlerTask+0x1f0>)
   132d8:	4b5a      	ldr	r3, [pc, #360]	; (13444 <vUiHandlerTask+0x208>)
   132da:	4798      	blx	r3
				if (gamePacketIn.game[i]==0xff)
   132dc:	4b5c      	ldr	r3, [pc, #368]	; (13450 <vUiHandlerTask+0x214>)
   132de:	781c      	ldrb	r4, [r3, #0]
   132e0:	2cff      	cmp	r4, #255	; 0xff
   132e2:	d0d0      	beq.n	13286 <vUiHandlerTask+0x4a>
				SeesawSetLed(keyToShow, red, green, blue); //Turn button 1 on
   132e4:	4b5b      	ldr	r3, [pc, #364]	; (13454 <vUiHandlerTask+0x218>)
   132e6:	7819      	ldrb	r1, [r3, #0]
   132e8:	b2c9      	uxtb	r1, r1
   132ea:	4b5b      	ldr	r3, [pc, #364]	; (13458 <vUiHandlerTask+0x21c>)
   132ec:	781a      	ldrb	r2, [r3, #0]
   132ee:	b2d2      	uxtb	r2, r2
   132f0:	4b5a      	ldr	r3, [pc, #360]	; (1345c <vUiHandlerTask+0x220>)
   132f2:	781b      	ldrb	r3, [r3, #0]
   132f4:	b2db      	uxtb	r3, r3
   132f6:	0020      	movs	r0, r4
   132f8:	4e59      	ldr	r6, [pc, #356]	; (13460 <vUiHandlerTask+0x224>)
   132fa:	47b0      	blx	r6
				SeesawOrderLedUpdate();
   132fc:	4d59      	ldr	r5, [pc, #356]	; (13464 <vUiHandlerTask+0x228>)
   132fe:	47a8      	blx	r5
				vTaskDelay(1000);			
   13300:	20fa      	movs	r0, #250	; 0xfa
   13302:	0080      	lsls	r0, r0, #2
   13304:	4b4c      	ldr	r3, [pc, #304]	; (13438 <vUiHandlerTask+0x1fc>)
   13306:	4798      	blx	r3
				SeesawSetLed(keyToShow, 0, 0, 0); //Turn button 1 on
   13308:	2300      	movs	r3, #0
   1330a:	2200      	movs	r2, #0
   1330c:	2100      	movs	r1, #0
   1330e:	0020      	movs	r0, r4
   13310:	47b0      	blx	r6
				SeesawOrderLedUpdate();
   13312:	47a8      	blx	r5
			for (int i =0; i < GAME_SIZE;i++)
   13314:	2401      	movs	r4, #1
				if (gamePacketIn.game[i]==0xff)
   13316:	4b4e      	ldr	r3, [pc, #312]	; (13450 <vUiHandlerTask+0x214>)
   13318:	469a      	mov	sl, r3
				SeesawSetLed(keyToShow, red, green, blue); //Turn button 1 on
   1331a:	4b4e      	ldr	r3, [pc, #312]	; (13454 <vUiHandlerTask+0x218>)
   1331c:	4698      	mov	r8, r3
   1331e:	4b4e      	ldr	r3, [pc, #312]	; (13458 <vUiHandlerTask+0x21c>)
   13320:	4699      	mov	r9, r3
				if (gamePacketIn.game[i]==0xff)
   13322:	4653      	mov	r3, sl
   13324:	5d1d      	ldrb	r5, [r3, r4]
   13326:	2dff      	cmp	r5, #255	; 0xff
   13328:	d0ae      	beq.n	13288 <vUiHandlerTask+0x4c>
				SeesawSetLed(keyToShow, red, green, blue); //Turn button 1 on
   1332a:	4643      	mov	r3, r8
   1332c:	7819      	ldrb	r1, [r3, #0]
   1332e:	b2c9      	uxtb	r1, r1
   13330:	464b      	mov	r3, r9
   13332:	781a      	ldrb	r2, [r3, #0]
   13334:	b2d2      	uxtb	r2, r2
   13336:	4b49      	ldr	r3, [pc, #292]	; (1345c <vUiHandlerTask+0x220>)
   13338:	781b      	ldrb	r3, [r3, #0]
   1333a:	b2db      	uxtb	r3, r3
   1333c:	0028      	movs	r0, r5
   1333e:	4f48      	ldr	r7, [pc, #288]	; (13460 <vUiHandlerTask+0x224>)
   13340:	47b8      	blx	r7
				SeesawOrderLedUpdate();
   13342:	4e48      	ldr	r6, [pc, #288]	; (13464 <vUiHandlerTask+0x228>)
   13344:	47b0      	blx	r6
				vTaskDelay(1000);			
   13346:	20fa      	movs	r0, #250	; 0xfa
   13348:	0080      	lsls	r0, r0, #2
   1334a:	4b3b      	ldr	r3, [pc, #236]	; (13438 <vUiHandlerTask+0x1fc>)
   1334c:	4798      	blx	r3
				SeesawSetLed(keyToShow, 0, 0, 0); //Turn button 1 on
   1334e:	2300      	movs	r3, #0
   13350:	2200      	movs	r2, #0
   13352:	2100      	movs	r1, #0
   13354:	0028      	movs	r0, r5
   13356:	47b8      	blx	r7
				SeesawOrderLedUpdate();
   13358:	47b0      	blx	r6
			for (int i =0; i < GAME_SIZE;i++)
   1335a:	3401      	adds	r4, #1
   1335c:	2c14      	cmp	r4, #20
   1335e:	d1e0      	bne.n	13322 <vUiHandlerTask+0xe6>
   13360:	e795      	b.n	1328e <vUiHandlerTask+0x52>
		uint8_t numPresses = SeesawGetKeypadCount();
   13362:	4b3a      	ldr	r3, [pc, #232]	; (1344c <vUiHandlerTask+0x210>)
   13364:	4798      	blx	r3
   13366:	0004      	movs	r4, r0
		memset(buttons, 0, BUTTON_PRESSES_MAX);
   13368:	2210      	movs	r2, #16
   1336a:	2100      	movs	r1, #0
   1336c:	482f      	ldr	r0, [pc, #188]	; (1342c <vUiHandlerTask+0x1f0>)
   1336e:	4b35      	ldr	r3, [pc, #212]	; (13444 <vUiHandlerTask+0x208>)
   13370:	4798      	blx	r3
   13372:	1c26      	adds	r6, r4, #0
   13374:	2c10      	cmp	r4, #16
   13376:	d900      	bls.n	1337a <vUiHandlerTask+0x13e>
   13378:	2610      	movs	r6, #16
   1337a:	b2f6      	uxtb	r6, r6
		if(numPresses != 0 && ERROR_NONE == SeesawReadKeypad(buttons, numPresses))
   1337c:	2e00      	cmp	r6, #0
   1337e:	d10d      	bne.n	1339c <vUiHandlerTask+0x160>
		if(pressedKeys >= keysToPress || pressedKeys >= GAME_SIZE)
   13380:	4b2e      	ldr	r3, [pc, #184]	; (1343c <vUiHandlerTask+0x200>)
   13382:	781b      	ldrb	r3, [r3, #0]
   13384:	4a2b      	ldr	r2, [pc, #172]	; (13434 <vUiHandlerTask+0x1f8>)
   13386:	7812      	ldrb	r2, [r2, #0]
   13388:	429a      	cmp	r2, r3
   1338a:	d901      	bls.n	13390 <vUiHandlerTask+0x154>
   1338c:	2b13      	cmp	r3, #19
   1338e:	d981      	bls.n	13294 <vUiHandlerTask+0x58>
			playIsDone = true;
   13390:	2301      	movs	r3, #1
   13392:	4a2d      	ldr	r2, [pc, #180]	; (13448 <vUiHandlerTask+0x20c>)
   13394:	7013      	strb	r3, [r2, #0]
			uiState = UI_STATE_IGNORE_PRESSES;
   13396:	4a21      	ldr	r2, [pc, #132]	; (1341c <vUiHandlerTask+0x1e0>)
   13398:	7013      	strb	r3, [r2, #0]
   1339a:	e77b      	b.n	13294 <vUiHandlerTask+0x58>
		if(numPresses != 0 && ERROR_NONE == SeesawReadKeypad(buttons, numPresses))
   1339c:	0031      	movs	r1, r6
   1339e:	4823      	ldr	r0, [pc, #140]	; (1342c <vUiHandlerTask+0x1f0>)
   133a0:	4b23      	ldr	r3, [pc, #140]	; (13430 <vUiHandlerTask+0x1f4>)
   133a2:	4798      	blx	r3
   133a4:	2800      	cmp	r0, #0
   133a6:	d1eb      	bne.n	13380 <vUiHandlerTask+0x144>
			for (int iter = 0; iter < numPresses; iter++)
   133a8:	2e00      	cmp	r6, #0
   133aa:	dd2b      	ble.n	13404 <vUiHandlerTask+0x1c8>
   133ac:	4d1f      	ldr	r5, [pc, #124]	; (1342c <vUiHandlerTask+0x1f0>)
   133ae:	1976      	adds	r6, r6, r5
				uint8_t keynum = NEO_TRELLIS_SEESAW_KEY((buttons[iter] & 0xFD) >> 2);
   133b0:	2307      	movs	r3, #7
   133b2:	4698      	mov	r8, r3
   133b4:	e00e      	b.n	133d4 <vUiHandlerTask+0x198>
					SeesawSetLed(keynum, red, green, blue);
   133b6:	4b27      	ldr	r3, [pc, #156]	; (13454 <vUiHandlerTask+0x218>)
   133b8:	7819      	ldrb	r1, [r3, #0]
   133ba:	b2c9      	uxtb	r1, r1
   133bc:	4b26      	ldr	r3, [pc, #152]	; (13458 <vUiHandlerTask+0x21c>)
   133be:	781a      	ldrb	r2, [r3, #0]
   133c0:	b2d2      	uxtb	r2, r2
   133c2:	4b26      	ldr	r3, [pc, #152]	; (1345c <vUiHandlerTask+0x220>)
   133c4:	781b      	ldrb	r3, [r3, #0]
   133c6:	b2db      	uxtb	r3, r3
   133c8:	0020      	movs	r0, r4
   133ca:	4c25      	ldr	r4, [pc, #148]	; (13460 <vUiHandlerTask+0x224>)
   133cc:	47a0      	blx	r4
   133ce:	3501      	adds	r5, #1
			for (int iter = 0; iter < numPresses; iter++)
   133d0:	42ae      	cmp	r6, r5
   133d2:	d017      	beq.n	13404 <vUiHandlerTask+0x1c8>
				uint8_t keynum = NEO_TRELLIS_SEESAW_KEY((buttons[iter] & 0xFD) >> 2);
   133d4:	782b      	ldrb	r3, [r5, #0]
   133d6:	089a      	lsrs	r2, r3, #2
   133d8:	08d4      	lsrs	r4, r2, #3
   133da:	00a4      	lsls	r4, r4, #2
   133dc:	4641      	mov	r1, r8
   133de:	400a      	ands	r2, r1
   133e0:	18a4      	adds	r4, r4, r2
				if(actionButton == 0x03) 
   133e2:	43db      	mvns	r3, r3
   133e4:	079b      	lsls	r3, r3, #30
   133e6:	d0e6      	beq.n	133b6 <vUiHandlerTask+0x17a>
					SeesawSetLed(keynum, 0, 0, 0);
   133e8:	2300      	movs	r3, #0
   133ea:	2200      	movs	r2, #0
   133ec:	2100      	movs	r1, #0
   133ee:	0020      	movs	r0, r4
   133f0:	4f1b      	ldr	r7, [pc, #108]	; (13460 <vUiHandlerTask+0x224>)
   133f2:	47b8      	blx	r7
					gamePacketOut.game[pressedKeys] = keynum;
   133f4:	4b11      	ldr	r3, [pc, #68]	; (1343c <vUiHandlerTask+0x200>)
   133f6:	781b      	ldrb	r3, [r3, #0]
   133f8:	4a11      	ldr	r2, [pc, #68]	; (13440 <vUiHandlerTask+0x204>)
   133fa:	54d4      	strb	r4, [r2, r3]
					pressedKeys++;
   133fc:	3301      	adds	r3, #1
   133fe:	4a0f      	ldr	r2, [pc, #60]	; (1343c <vUiHandlerTask+0x200>)
   13400:	7013      	strb	r3, [r2, #0]
   13402:	e7e4      	b.n	133ce <vUiHandlerTask+0x192>
			SeesawOrderLedUpdate();
   13404:	4b17      	ldr	r3, [pc, #92]	; (13464 <vUiHandlerTask+0x228>)
   13406:	4798      	blx	r3
   13408:	e7ba      	b.n	13380 <vUiHandlerTask+0x144>
			uiState = UI_STATE_HANDLE_BUTTONS;
   1340a:	2200      	movs	r2, #0
   1340c:	4b03      	ldr	r3, [pc, #12]	; (1341c <vUiHandlerTask+0x1e0>)
   1340e:	701a      	strb	r2, [r3, #0]
		break;
   13410:	e740      	b.n	13294 <vUiHandlerTask+0x58>
   13412:	46c0      	nop			; (mov r8, r8)
   13414:	000273ac 	.word	0x000273ac
   13418:	0001904d 	.word	0x0001904d
   1341c:	2000422c 	.word	0x2000422c
   13420:	00012559 	.word	0x00012559
   13424:	000122b9 	.word	0x000122b9
   13428:	000123b5 	.word	0x000123b5
   1342c:	2000421c 	.word	0x2000421c
   13430:	00014b21 	.word	0x00014b21
   13434:	200004c8 	.word	0x200004c8
   13438:	000181d5 	.word	0x000181d5
   1343c:	200004ca 	.word	0x200004ca
   13440:	200041f4 	.word	0x200041f4
   13444:	00025d0f 	.word	0x00025d0f
   13448:	200004c9 	.word	0x200004c9
   1344c:	00014ad1 	.word	0x00014ad1
   13450:	20004208 	.word	0x20004208
   13454:	200004cb 	.word	0x200004cb
   13458:	20000015 	.word	0x20000015
   1345c:	20000014 	.word	0x20000014
   13460:	00014bbd 	.word	0x00014bbd
   13464:	00014bf5 	.word	0x00014bf5

00013468 <UiOrderShowMoves>:


/******************************************************************************
* Functions
******************************************************************************/
void UiOrderShowMoves(struct GameDataPacket *packetIn){
   13468:	b510      	push	{r4, lr}
   1346a:	0001      	movs	r1, r0
	memcpy(&gamePacketIn, packetIn, sizeof(gamePacketIn));
   1346c:	2214      	movs	r2, #20
   1346e:	4805      	ldr	r0, [pc, #20]	; (13484 <UiOrderShowMoves+0x1c>)
   13470:	4b05      	ldr	r3, [pc, #20]	; (13488 <UiOrderShowMoves+0x20>)
   13472:	4798      	blx	r3
	uiState = UI_STATE_SHOW_MOVES;
   13474:	2202      	movs	r2, #2
   13476:	4b05      	ldr	r3, [pc, #20]	; (1348c <UiOrderShowMoves+0x24>)
   13478:	701a      	strb	r2, [r3, #0]
	playIsDone = false; //Set play to false
   1347a:	2200      	movs	r2, #0
   1347c:	4b04      	ldr	r3, [pc, #16]	; (13490 <UiOrderShowMoves+0x28>)
   1347e:	701a      	strb	r2, [r3, #0]
}
   13480:	bd10      	pop	{r4, pc}
   13482:	46c0      	nop			; (mov r8, r8)
   13484:	20004208 	.word	0x20004208
   13488:	00025cd9 	.word	0x00025cd9
   1348c:	2000422c 	.word	0x2000422c
   13490:	200004c9 	.word	0x200004c9

00013494 <UiPlayIsDone>:


bool UiPlayIsDone(void)
{
	return playIsDone;
   13494:	4b01      	ldr	r3, [pc, #4]	; (1349c <UiPlayIsDone+0x8>)
   13496:	7818      	ldrb	r0, [r3, #0]
}
   13498:	4770      	bx	lr
   1349a:	46c0      	nop			; (mov r8, r8)
   1349c:	200004c9 	.word	0x200004c9

000134a0 <UiGetGamePacketOut>:

struct GameDataPacket *UiGetGamePacketOut(void)
{
	return &gamePacketOut;
}
   134a0:	4800      	ldr	r0, [pc, #0]	; (134a4 <UiGetGamePacketOut+0x4>)
   134a2:	4770      	bx	lr
   134a4:	200041f4 	.word	0x200041f4

000134a8 <UIChangeColors>:
* @note         

*****************************************************************************/
void UIChangeColors(uint8_t r, uint8_t g, uint8_t b)
{
	red = r;
   134a8:	4b03      	ldr	r3, [pc, #12]	; (134b8 <UIChangeColors+0x10>)
   134aa:	7018      	strb	r0, [r3, #0]
	green = g;
   134ac:	4b03      	ldr	r3, [pc, #12]	; (134bc <UIChangeColors+0x14>)
   134ae:	7019      	strb	r1, [r3, #0]
	blue = b;
   134b0:	4b03      	ldr	r3, [pc, #12]	; (134c0 <UIChangeColors+0x18>)
   134b2:	701a      	strb	r2, [r3, #0]
   134b4:	4770      	bx	lr
   134b6:	46c0      	nop			; (mov r8, r8)
   134b8:	200004cb 	.word	0x200004cb
   134bc:	20000015 	.word	0x20000015
   134c0:	20000014 	.word	0x20000014

000134c4 <add_state>:
 * \brief Add state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void add_state(download_state mask)
{
	down_state |= mask;
   134c4:	4b02      	ldr	r3, [pc, #8]	; (134d0 <add_state+0xc>)
   134c6:	781a      	ldrb	r2, [r3, #0]
   134c8:	4310      	orrs	r0, r2
   134ca:	7018      	strb	r0, [r3, #0]
}
   134cc:	4770      	bx	lr
   134ce:	46c0      	nop			; (mov r8, r8)
   134d0:	200004cd 	.word	0x200004cd

000134d4 <extint_detection_callback>:

volatile bool isPressed = false;
void extint_detection_callback(void)
{
	//Publish some data after a button press and release. Note: just an example! This is not the most elegant way of doing this!
	temperature++;
   134d4:	4b06      	ldr	r3, [pc, #24]	; (134f0 <extint_detection_callback+0x1c>)
   134d6:	681a      	ldr	r2, [r3, #0]
   134d8:	3201      	adds	r2, #1
   134da:	601a      	str	r2, [r3, #0]
	if (temperature > 40) temperature = 1;
   134dc:	681b      	ldr	r3, [r3, #0]
   134de:	2b28      	cmp	r3, #40	; 0x28
   134e0:	d902      	bls.n	134e8 <extint_detection_callback+0x14>
   134e2:	2201      	movs	r2, #1
   134e4:	4b02      	ldr	r3, [pc, #8]	; (134f0 <extint_detection_callback+0x1c>)
   134e6:	601a      	str	r2, [r3, #0]
	//snprintf(mqtt_msg, 63, "{\"d\":{\"temp\":%d}}", temperature);imuDataVar
	isPressed = true;
   134e8:	2201      	movs	r2, #1
   134ea:	4b02      	ldr	r3, [pc, #8]	; (134f4 <extint_detection_callback+0x20>)
   134ec:	701a      	strb	r2, [r3, #0]
	
}
   134ee:	4770      	bx	lr
   134f0:	2000009c 	.word	0x2000009c
   134f4:	200004f8 	.word	0x200004f8

000134f8 <SubscribeHandlerStatusTopic>:
{
   134f8:	b530      	push	{r4, r5, lr}
   134fa:	b083      	sub	sp, #12
   134fc:	0004      	movs	r4, r0
	LogMessage(LOG_DEBUG_LVL,"\r\n %.*s",msgData->topicName->lenstring.len,msgData->topicName->lenstring.data);
   134fe:	6842      	ldr	r2, [r0, #4]
   13500:	6893      	ldr	r3, [r2, #8]
   13502:	6852      	ldr	r2, [r2, #4]
   13504:	4910      	ldr	r1, [pc, #64]	; (13548 <SubscribeHandlerStatusTopic+0x50>)
   13506:	2001      	movs	r0, #1
   13508:	4d10      	ldr	r5, [pc, #64]	; (1354c <SubscribeHandlerStatusTopic+0x54>)
   1350a:	47a8      	blx	r5
	if (strncmp(msgData->message->payload, "status:", 7)== 0)
   1350c:	6823      	ldr	r3, [r4, #0]
   1350e:	689c      	ldr	r4, [r3, #8]
   13510:	2207      	movs	r2, #7
   13512:	490f      	ldr	r1, [pc, #60]	; (13550 <SubscribeHandlerStatusTopic+0x58>)
   13514:	0020      	movs	r0, r4
   13516:	4b0f      	ldr	r3, [pc, #60]	; (13554 <SubscribeHandlerStatusTopic+0x5c>)
   13518:	4798      	blx	r3
   1351a:	2800      	cmp	r0, #0
   1351c:	d001      	beq.n	13522 <SubscribeHandlerStatusTopic+0x2a>
}
   1351e:	b003      	add	sp, #12
   13520:	bd30      	pop	{r4, r5, pc}
		status = p[0]-'0';
   13522:	79e2      	ldrb	r2, [r4, #7]
   13524:	3a30      	subs	r2, #48	; 0x30
   13526:	b2d2      	uxtb	r2, r2
   13528:	466b      	mov	r3, sp
   1352a:	1ddc      	adds	r4, r3, #7
   1352c:	71da      	strb	r2, [r3, #7]
	LogMessage(LOG_DEBUG_LVL,"\r\nSTATUS Receive%d\r\n", status);
   1352e:	490a      	ldr	r1, [pc, #40]	; (13558 <SubscribeHandlerStatusTopic+0x60>)
   13530:	3001      	adds	r0, #1
   13532:	4b06      	ldr	r3, [pc, #24]	; (1354c <SubscribeHandlerStatusTopic+0x54>)
   13534:	4798      	blx	r3
	if(pdTRUE == ControlAddStatusDataToQueue(&status))
   13536:	0020      	movs	r0, r4
   13538:	4b08      	ldr	r3, [pc, #32]	; (1355c <SubscribeHandlerStatusTopic+0x64>)
   1353a:	4798      	blx	r3
   1353c:	2801      	cmp	r0, #1
   1353e:	d1ee      	bne.n	1351e <SubscribeHandlerStatusTopic+0x26>
		LogMessage(LOG_DEBUG_LVL,"\r\nSent status to control!\r\n");
   13540:	4907      	ldr	r1, [pc, #28]	; (13560 <SubscribeHandlerStatusTopic+0x68>)
   13542:	4b02      	ldr	r3, [pc, #8]	; (1354c <SubscribeHandlerStatusTopic+0x54>)
   13544:	4798      	blx	r3
}
   13546:	e7ea      	b.n	1351e <SubscribeHandlerStatusTopic+0x26>
   13548:	00027468 	.word	0x00027468
   1354c:	000190fd 	.word	0x000190fd
   13550:	00027470 	.word	0x00027470
   13554:	000260d5 	.word	0x000260d5
   13558:	00027478 	.word	0x00027478
   1355c:	000131b5 	.word	0x000131b5
   13560:	00027490 	.word	0x00027490

00013564 <SubscribeHandlerGameTopic>:
{
   13564:	b5f0      	push	{r4, r5, r6, r7, lr}
   13566:	b087      	sub	sp, #28
   13568:	0004      	movs	r4, r0
	memset(game.game, 0xff, sizeof(game.game));
   1356a:	2214      	movs	r2, #20
   1356c:	21ff      	movs	r1, #255	; 0xff
   1356e:	a801      	add	r0, sp, #4
   13570:	4b2f      	ldr	r3, [pc, #188]	; (13630 <SubscribeHandlerGameTopic+0xcc>)
   13572:	4798      	blx	r3
	if (strncmp(msgData->message->payload, "{\"game\":[", 9) == 0)
   13574:	6823      	ldr	r3, [r4, #0]
   13576:	6898      	ldr	r0, [r3, #8]
   13578:	2209      	movs	r2, #9
   1357a:	492e      	ldr	r1, [pc, #184]	; (13634 <SubscribeHandlerGameTopic+0xd0>)
   1357c:	4b2e      	ldr	r3, [pc, #184]	; (13638 <SubscribeHandlerGameTopic+0xd4>)
   1357e:	4798      	blx	r3
   13580:	2800      	cmp	r0, #0
   13582:	d143      	bne.n	1360c <SubscribeHandlerGameTopic+0xa8>
		LogMessage(LOG_DEBUG_LVL,"\r\nGame message received!\r\n");
   13584:	492d      	ldr	r1, [pc, #180]	; (1363c <SubscribeHandlerGameTopic+0xd8>)
   13586:	3001      	adds	r0, #1
   13588:	4d2d      	ldr	r5, [pc, #180]	; (13640 <SubscribeHandlerGameTopic+0xdc>)
   1358a:	47a8      	blx	r5
		LogMessage(LOG_DEBUG_LVL,"\r\n %.*s",msgData->topicName->lenstring.len,msgData->topicName->lenstring.data);
   1358c:	6862      	ldr	r2, [r4, #4]
   1358e:	6893      	ldr	r3, [r2, #8]
   13590:	6852      	ldr	r2, [r2, #4]
   13592:	492c      	ldr	r1, [pc, #176]	; (13644 <SubscribeHandlerGameTopic+0xe0>)
   13594:	2001      	movs	r0, #1
   13596:	47a8      	blx	r5
		LogMessage(LOG_DEBUG_LVL,"%.*s",msgData->message->payloadlen,(char *)msgData->message->payload);
   13598:	6822      	ldr	r2, [r4, #0]
   1359a:	6893      	ldr	r3, [r2, #8]
   1359c:	68d2      	ldr	r2, [r2, #12]
   1359e:	492a      	ldr	r1, [pc, #168]	; (13648 <SubscribeHandlerGameTopic+0xe4>)
   135a0:	2001      	movs	r0, #1
   135a2:	47a8      	blx	r5
		char *p = &msgData->message->payload[9];
   135a4:	6823      	ldr	r3, [r4, #0]
   135a6:	689b      	ldr	r3, [r3, #8]
   135a8:	0018      	movs	r0, r3
   135aa:	3009      	adds	r0, #9
   135ac:	9000      	str	r0, [sp, #0]
		while (nb < GAME_SIZE && *p) {
   135ae:	7a5b      	ldrb	r3, [r3, #9]
   135b0:	2b00      	cmp	r3, #0
   135b2:	d013      	beq.n	135dc <SubscribeHandlerGameTopic+0x78>
   135b4:	ac01      	add	r4, sp, #4
   135b6:	2517      	movs	r5, #23
   135b8:	446d      	add	r5, sp
			game.game[nb++] = strtol(p, &p, 10);
   135ba:	4e24      	ldr	r6, [pc, #144]	; (1364c <SubscribeHandlerGameTopic+0xe8>)
   135bc:	220a      	movs	r2, #10
   135be:	4669      	mov	r1, sp
   135c0:	47b0      	blx	r6
   135c2:	7020      	strb	r0, [r4, #0]
			if (*p != ',')
   135c4:	9b00      	ldr	r3, [sp, #0]
   135c6:	781a      	ldrb	r2, [r3, #0]
   135c8:	2a2c      	cmp	r2, #44	; 0x2c
   135ca:	d107      	bne.n	135dc <SubscribeHandlerGameTopic+0x78>
			p++; /* skip, */
   135cc:	1c58      	adds	r0, r3, #1
   135ce:	9000      	str	r0, [sp, #0]
		while (nb < GAME_SIZE && *p) {
   135d0:	42ac      	cmp	r4, r5
   135d2:	d003      	beq.n	135dc <SubscribeHandlerGameTopic+0x78>
   135d4:	3401      	adds	r4, #1
   135d6:	785b      	ldrb	r3, [r3, #1]
   135d8:	2b00      	cmp	r3, #0
   135da:	d1ef      	bne.n	135bc <SubscribeHandlerGameTopic+0x58>
		LogMessage(LOG_DEBUG_LVL,"\r\nParsed Command: ");
   135dc:	491c      	ldr	r1, [pc, #112]	; (13650 <SubscribeHandlerGameTopic+0xec>)
   135de:	2001      	movs	r0, #1
   135e0:	4b17      	ldr	r3, [pc, #92]	; (13640 <SubscribeHandlerGameTopic+0xdc>)
   135e2:	4798      	blx	r3
   135e4:	ac01      	add	r4, sp, #4
   135e6:	af06      	add	r7, sp, #24
			LogMessage(LOG_DEBUG_LVL,"%d,", game.game[i]);
   135e8:	4e1a      	ldr	r6, [pc, #104]	; (13654 <SubscribeHandlerGameTopic+0xf0>)
   135ea:	4d15      	ldr	r5, [pc, #84]	; (13640 <SubscribeHandlerGameTopic+0xdc>)
   135ec:	7822      	ldrb	r2, [r4, #0]
   135ee:	0031      	movs	r1, r6
   135f0:	2001      	movs	r0, #1
   135f2:	47a8      	blx	r5
   135f4:	3401      	adds	r4, #1
		for(int i = 0; i < GAME_SIZE; i++)
   135f6:	42a7      	cmp	r7, r4
   135f8:	d1f8      	bne.n	135ec <SubscribeHandlerGameTopic+0x88>
		if(pdTRUE == ControlAddGameData(&game))
   135fa:	a801      	add	r0, sp, #4
   135fc:	4b16      	ldr	r3, [pc, #88]	; (13658 <SubscribeHandlerGameTopic+0xf4>)
   135fe:	4798      	blx	r3
   13600:	2801      	cmp	r0, #1
   13602:	d113      	bne.n	1362c <SubscribeHandlerGameTopic+0xc8>
			LogMessage(LOG_DEBUG_LVL,"\r\nSent play to control!\r\n");
   13604:	4915      	ldr	r1, [pc, #84]	; (1365c <SubscribeHandlerGameTopic+0xf8>)
   13606:	4b0e      	ldr	r3, [pc, #56]	; (13640 <SubscribeHandlerGameTopic+0xdc>)
   13608:	4798      	blx	r3
   1360a:	e00f      	b.n	1362c <SubscribeHandlerGameTopic+0xc8>
		LogMessage(LOG_DEBUG_LVL,"\r\nGame message received but not understood!\r\n");
   1360c:	4914      	ldr	r1, [pc, #80]	; (13660 <SubscribeHandlerGameTopic+0xfc>)
   1360e:	2001      	movs	r0, #1
   13610:	4d0b      	ldr	r5, [pc, #44]	; (13640 <SubscribeHandlerGameTopic+0xdc>)
   13612:	47a8      	blx	r5
		LogMessage(LOG_DEBUG_LVL,"\r\n %.*s",msgData->topicName->lenstring.len,msgData->topicName->lenstring.data);
   13614:	6862      	ldr	r2, [r4, #4]
   13616:	6893      	ldr	r3, [r2, #8]
   13618:	6852      	ldr	r2, [r2, #4]
   1361a:	490a      	ldr	r1, [pc, #40]	; (13644 <SubscribeHandlerGameTopic+0xe0>)
   1361c:	2001      	movs	r0, #1
   1361e:	47a8      	blx	r5
		LogMessage(LOG_DEBUG_LVL,"%.*s",msgData->message->payloadlen,(char *)msgData->message->payload);
   13620:	6822      	ldr	r2, [r4, #0]
   13622:	6893      	ldr	r3, [r2, #8]
   13624:	68d2      	ldr	r2, [r2, #12]
   13626:	4908      	ldr	r1, [pc, #32]	; (13648 <SubscribeHandlerGameTopic+0xe4>)
   13628:	2001      	movs	r0, #1
   1362a:	47a8      	blx	r5
}
   1362c:	b007      	add	sp, #28
   1362e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13630:	00025d0f 	.word	0x00025d0f
   13634:	000273d4 	.word	0x000273d4
   13638:	000260d5 	.word	0x000260d5
   1363c:	000273e0 	.word	0x000273e0
   13640:	000190fd 	.word	0x000190fd
   13644:	00027468 	.word	0x00027468
   13648:	000273fc 	.word	0x000273fc
   1364c:	00026281 	.word	0x00026281
   13650:	00027404 	.word	0x00027404
   13654:	00027418 	.word	0x00027418
   13658:	00013199 	.word	0x00013199
   1365c:	0002741c 	.word	0x0002741c
   13660:	00027438 	.word	0x00027438

00013664 <socket_resolve_handler>:
{
   13664:	b510      	push	{r4, lr}
	mqtt_socket_resolve_handler(doamin_name, server_ip);
   13666:	4b01      	ldr	r3, [pc, #4]	; (1366c <socket_resolve_handler+0x8>)
   13668:	4798      	blx	r3
}
   1366a:	bd10      	pop	{r4, pc}
   1366c:	000221cd 	.word	0x000221cd

00013670 <socket_event_handler>:
{
   13670:	b510      	push	{r4, lr}
	mqtt_socket_event_handler(sock, msg_type, msg_data);
   13672:	4b01      	ldr	r3, [pc, #4]	; (13678 <socket_event_handler+0x8>)
   13674:	4798      	blx	r3
}
   13676:	bd10      	pop	{r4, pc}
   13678:	000221c1 	.word	0x000221c1

0001367c <start_download>:
{
   1367c:	b510      	push	{r4, lr}
   1367e:	b082      	sub	sp, #8
	return ((down_state & mask) != 0);
   13680:	4b15      	ldr	r3, [pc, #84]	; (136d8 <start_download+0x5c>)
   13682:	781b      	ldrb	r3, [r3, #0]
	if (!is_state_set(STORAGE_READY)) {
   13684:	07da      	lsls	r2, r3, #31
   13686:	d512      	bpl.n	136ae <start_download+0x32>
	if (!is_state_set(WIFI_CONNECTED)) {
   13688:	079a      	lsls	r2, r3, #30
   1368a:	d515      	bpl.n	136b8 <start_download+0x3c>
	if (is_state_set(GET_REQUESTED)) {
   1368c:	075a      	lsls	r2, r3, #29
   1368e:	d418      	bmi.n	136c2 <start_download+0x46>
	if (is_state_set(DOWNLOADING)) {
   13690:	071b      	lsls	r3, r3, #28
   13692:	d41b      	bmi.n	136cc <start_download+0x50>
	LogMessage(LOG_DEBUG_LVL,"start_download: sending HTTP request...\r\n");
   13694:	4911      	ldr	r1, [pc, #68]	; (136dc <start_download+0x60>)
   13696:	2001      	movs	r0, #1
   13698:	4b11      	ldr	r3, [pc, #68]	; (136e0 <start_download+0x64>)
   1369a:	4798      	blx	r3
	http_client_send_request(&http_client_module_inst, MAIN_HTTP_FILE_URL, HTTP_METHOD_GET, NULL, NULL);
   1369c:	2300      	movs	r3, #0
   1369e:	9300      	str	r3, [sp, #0]
   136a0:	2201      	movs	r2, #1
   136a2:	4910      	ldr	r1, [pc, #64]	; (136e4 <start_download+0x68>)
   136a4:	4810      	ldr	r0, [pc, #64]	; (136e8 <start_download+0x6c>)
   136a6:	4c11      	ldr	r4, [pc, #68]	; (136ec <start_download+0x70>)
   136a8:	47a0      	blx	r4
}
   136aa:	b002      	add	sp, #8
   136ac:	bd10      	pop	{r4, pc}
		LogMessage(LOG_DEBUG_LVL,"start_download: MMC storage not ready.\r\n");
   136ae:	4910      	ldr	r1, [pc, #64]	; (136f0 <start_download+0x74>)
   136b0:	2001      	movs	r0, #1
   136b2:	4b0b      	ldr	r3, [pc, #44]	; (136e0 <start_download+0x64>)
   136b4:	4798      	blx	r3
		return;
   136b6:	e7f8      	b.n	136aa <start_download+0x2e>
		LogMessage(LOG_DEBUG_LVL,"start_download: Wi-Fi is not connected.\r\n");
   136b8:	490e      	ldr	r1, [pc, #56]	; (136f4 <start_download+0x78>)
   136ba:	2001      	movs	r0, #1
   136bc:	4b08      	ldr	r3, [pc, #32]	; (136e0 <start_download+0x64>)
   136be:	4798      	blx	r3
		return;
   136c0:	e7f3      	b.n	136aa <start_download+0x2e>
		LogMessage(LOG_DEBUG_LVL,"start_download: request is sent already.\r\n");
   136c2:	490d      	ldr	r1, [pc, #52]	; (136f8 <start_download+0x7c>)
   136c4:	2001      	movs	r0, #1
   136c6:	4b06      	ldr	r3, [pc, #24]	; (136e0 <start_download+0x64>)
   136c8:	4798      	blx	r3
		return;
   136ca:	e7ee      	b.n	136aa <start_download+0x2e>
		LogMessage(LOG_DEBUG_LVL,"start_download: running download already.\r\n");
   136cc:	490b      	ldr	r1, [pc, #44]	; (136fc <start_download+0x80>)
   136ce:	2001      	movs	r0, #1
   136d0:	4b03      	ldr	r3, [pc, #12]	; (136e0 <start_download+0x64>)
   136d2:	4798      	blx	r3
		return;
   136d4:	e7e9      	b.n	136aa <start_download+0x2e>
   136d6:	46c0      	nop			; (mov r8, r8)
   136d8:	200004cd 	.word	0x200004cd
   136dc:	00027820 	.word	0x00027820
   136e0:	000190fd 	.word	0x000190fd
   136e4:	0002784c 	.word	0x0002784c
   136e8:	20004288 	.word	0x20004288
   136ec:	000232f1 	.word	0x000232f1
   136f0:	00027770 	.word	0x00027770
   136f4:	0002779c 	.word	0x0002779c
   136f8:	000277c8 	.word	0x000277c8
   136fc:	000277f4 	.word	0x000277f4

00013700 <configure_mqtt>:
{
   13700:	b500      	push	{lr}
   13702:	b087      	sub	sp, #28
	mqtt_get_config_defaults(&mqtt_conf);
   13704:	4668      	mov	r0, sp
   13706:	4b13      	ldr	r3, [pc, #76]	; (13754 <configure_mqtt+0x54>)
   13708:	4798      	blx	r3
	mqtt_conf.read_buffer = mqtt_read_buffer;
   1370a:	4b13      	ldr	r3, [pc, #76]	; (13758 <configure_mqtt+0x58>)
   1370c:	9302      	str	r3, [sp, #8]
	mqtt_conf.read_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   1370e:	2380      	movs	r3, #128	; 0x80
   13710:	009b      	lsls	r3, r3, #2
   13712:	9303      	str	r3, [sp, #12]
	mqtt_conf.send_buffer = mqtt_send_buffer;
   13714:	4a11      	ldr	r2, [pc, #68]	; (1375c <configure_mqtt+0x5c>)
   13716:	9204      	str	r2, [sp, #16]
	mqtt_conf.send_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   13718:	9305      	str	r3, [sp, #20]
	mqtt_conf.port = CLOUDMQTT_PORT;
   1371a:	4b11      	ldr	r3, [pc, #68]	; (13760 <configure_mqtt+0x60>)
   1371c:	466a      	mov	r2, sp
   1371e:	8013      	strh	r3, [r2, #0]
	mqtt_conf.keep_alive = 6000;
   13720:	4b10      	ldr	r3, [pc, #64]	; (13764 <configure_mqtt+0x64>)
   13722:	8093      	strh	r3, [r2, #4]
	result = mqtt_init(&mqtt_inst, &mqtt_conf);
   13724:	4669      	mov	r1, sp
   13726:	4810      	ldr	r0, [pc, #64]	; (13768 <configure_mqtt+0x68>)
   13728:	4b10      	ldr	r3, [pc, #64]	; (1376c <configure_mqtt+0x6c>)
   1372a:	4798      	blx	r3
   1372c:	1e02      	subs	r2, r0, #0
	if (result < 0) {
   1372e:	db07      	blt.n	13740 <configure_mqtt+0x40>
	result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
   13730:	490f      	ldr	r1, [pc, #60]	; (13770 <configure_mqtt+0x70>)
   13732:	480d      	ldr	r0, [pc, #52]	; (13768 <configure_mqtt+0x68>)
   13734:	4b0f      	ldr	r3, [pc, #60]	; (13774 <configure_mqtt+0x74>)
   13736:	4798      	blx	r3
   13738:	1e02      	subs	r2, r0, #0
	if (result < 0) {
   1373a:	db06      	blt.n	1374a <configure_mqtt+0x4a>
}
   1373c:	b007      	add	sp, #28
   1373e:	bd00      	pop	{pc}
		LogMessage(LOG_DEBUG_LVL,"MQTT initialization failed. Error code is (%d)\r\n", result);
   13740:	490d      	ldr	r1, [pc, #52]	; (13778 <configure_mqtt+0x78>)
   13742:	2001      	movs	r0, #1
   13744:	4b0d      	ldr	r3, [pc, #52]	; (1377c <configure_mqtt+0x7c>)
   13746:	4798      	blx	r3
   13748:	e7fe      	b.n	13748 <configure_mqtt+0x48>
		LogMessage(LOG_DEBUG_LVL,"MQTT register callback failed. Error code is (%d)\r\n", result);
   1374a:	490d      	ldr	r1, [pc, #52]	; (13780 <configure_mqtt+0x80>)
   1374c:	2001      	movs	r0, #1
   1374e:	4b0b      	ldr	r3, [pc, #44]	; (1377c <configure_mqtt+0x7c>)
   13750:	4798      	blx	r3
   13752:	e7fe      	b.n	13752 <configure_mqtt+0x52>
   13754:	00022195 	.word	0x00022195
   13758:	20000534 	.word	0x20000534
   1375c:	20000734 	.word	0x20000734
   13760:	0000075b 	.word	0x0000075b
   13764:	00001770 	.word	0x00001770
   13768:	200004fc 	.word	0x200004fc
   1376c:	000220e1 	.word	0x000220e1
   13770:	00013785 	.word	0x00013785
   13774:	000221b1 	.word	0x000221b1
   13778:	000274ac 	.word	0x000274ac
   1377c:	000190fd 	.word	0x000190fd
   13780:	000274e0 	.word	0x000274e0

00013784 <mqtt_callback>:
{
   13784:	b530      	push	{r4, r5, lr}
   13786:	b087      	sub	sp, #28
   13788:	0004      	movs	r4, r0
	switch (type) {
   1378a:	2901      	cmp	r1, #1
   1378c:	d030      	beq.n	137f0 <mqtt_callback+0x6c>
   1378e:	2905      	cmp	r1, #5
   13790:	d044      	beq.n	1381c <mqtt_callback+0x98>
   13792:	2900      	cmp	r1, #0
   13794:	d001      	beq.n	1379a <mqtt_callback+0x16>
}
   13796:	b007      	add	sp, #28
   13798:	bd30      	pop	{r4, r5, pc}
		if (data->sock_connected.result >= 0) {
   1379a:	6813      	ldr	r3, [r2, #0]
   1379c:	2b00      	cmp	r3, #0
   1379e:	db1c      	blt.n	137da <mqtt_callback+0x56>
			LogMessage(LOG_DEBUG_LVL,"\r\nConnecting to Broker...");
   137a0:	4921      	ldr	r1, [pc, #132]	; (13828 <mqtt_callback+0xa4>)
   137a2:	2001      	movs	r0, #1
   137a4:	4b21      	ldr	r3, [pc, #132]	; (1382c <mqtt_callback+0xa8>)
   137a6:	4798      	blx	r3
			if(0 != mqtt_connect_broker(module_inst, 1, CLOUDMQTT_USER_ID, CLOUDMQTT_USER_PASSWORD, CLOUDMQTT_USER_ID, NULL, NULL, 0, 0, 0))
   137a8:	4a21      	ldr	r2, [pc, #132]	; (13830 <mqtt_callback+0xac>)
   137aa:	2300      	movs	r3, #0
   137ac:	9305      	str	r3, [sp, #20]
   137ae:	9304      	str	r3, [sp, #16]
   137b0:	9303      	str	r3, [sp, #12]
   137b2:	9302      	str	r3, [sp, #8]
   137b4:	9301      	str	r3, [sp, #4]
   137b6:	9200      	str	r2, [sp, #0]
   137b8:	4b1e      	ldr	r3, [pc, #120]	; (13834 <mqtt_callback+0xb0>)
   137ba:	2101      	movs	r1, #1
   137bc:	0020      	movs	r0, r4
   137be:	4c1e      	ldr	r4, [pc, #120]	; (13838 <mqtt_callback+0xb4>)
   137c0:	47a0      	blx	r4
   137c2:	2800      	cmp	r0, #0
   137c4:	d004      	beq.n	137d0 <mqtt_callback+0x4c>
				LogMessage(LOG_DEBUG_LVL,"MQTT  Error - NOT Connected to broker\r\n");
   137c6:	491d      	ldr	r1, [pc, #116]	; (1383c <mqtt_callback+0xb8>)
   137c8:	2001      	movs	r0, #1
   137ca:	4b18      	ldr	r3, [pc, #96]	; (1382c <mqtt_callback+0xa8>)
   137cc:	4798      	blx	r3
   137ce:	e7e2      	b.n	13796 <mqtt_callback+0x12>
				LogMessage(LOG_DEBUG_LVL,"MQTT Connected to broker\r\n");
   137d0:	491b      	ldr	r1, [pc, #108]	; (13840 <mqtt_callback+0xbc>)
   137d2:	2001      	movs	r0, #1
   137d4:	4b15      	ldr	r3, [pc, #84]	; (1382c <mqtt_callback+0xa8>)
   137d6:	4798      	blx	r3
   137d8:	e7dd      	b.n	13796 <mqtt_callback+0x12>
			LogMessage(LOG_DEBUG_LVL,"Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
   137da:	4d1a      	ldr	r5, [pc, #104]	; (13844 <mqtt_callback+0xc0>)
   137dc:	002a      	movs	r2, r5
   137de:	491a      	ldr	r1, [pc, #104]	; (13848 <mqtt_callback+0xc4>)
   137e0:	2001      	movs	r0, #1
   137e2:	4b12      	ldr	r3, [pc, #72]	; (1382c <mqtt_callback+0xa8>)
   137e4:	4798      	blx	r3
			mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
   137e6:	0029      	movs	r1, r5
   137e8:	0020      	movs	r0, r4
   137ea:	4b18      	ldr	r3, [pc, #96]	; (1384c <mqtt_callback+0xc8>)
   137ec:	4798      	blx	r3
   137ee:	e7d2      	b.n	13796 <mqtt_callback+0x12>
		if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
   137f0:	7812      	ldrb	r2, [r2, #0]
   137f2:	2a00      	cmp	r2, #0
   137f4:	d10d      	bne.n	13812 <mqtt_callback+0x8e>
			mqtt_subscribe(module_inst, GAME_TOPIC_IN, 0, SubscribeHandlerGameTopic);
   137f6:	4b16      	ldr	r3, [pc, #88]	; (13850 <mqtt_callback+0xcc>)
   137f8:	4916      	ldr	r1, [pc, #88]	; (13854 <mqtt_callback+0xd0>)
   137fa:	4d17      	ldr	r5, [pc, #92]	; (13858 <mqtt_callback+0xd4>)
   137fc:	47a8      	blx	r5
			mqtt_subscribe(module_inst, STATUS_TOPIC, 0, SubscribeHandlerStatusTopic);
   137fe:	4b17      	ldr	r3, [pc, #92]	; (1385c <mqtt_callback+0xd8>)
   13800:	2200      	movs	r2, #0
   13802:	4917      	ldr	r1, [pc, #92]	; (13860 <mqtt_callback+0xdc>)
   13804:	0020      	movs	r0, r4
   13806:	47a8      	blx	r5
			LogMessage(LOG_DEBUG_LVL,"MQTT Connected\r\n");
   13808:	4916      	ldr	r1, [pc, #88]	; (13864 <mqtt_callback+0xe0>)
   1380a:	2001      	movs	r0, #1
   1380c:	4b07      	ldr	r3, [pc, #28]	; (1382c <mqtt_callback+0xa8>)
   1380e:	4798      	blx	r3
   13810:	e7c1      	b.n	13796 <mqtt_callback+0x12>
			LogMessage(LOG_DEBUG_LVL,"MQTT broker decline your access! error code %d\r\n", data->connected.result);
   13812:	4915      	ldr	r1, [pc, #84]	; (13868 <mqtt_callback+0xe4>)
   13814:	2001      	movs	r0, #1
   13816:	4b05      	ldr	r3, [pc, #20]	; (1382c <mqtt_callback+0xa8>)
   13818:	4798      	blx	r3
   1381a:	e7bc      	b.n	13796 <mqtt_callback+0x12>
		LogMessage(LOG_DEBUG_LVL,"MQTT disconnected\r\n");
   1381c:	4913      	ldr	r1, [pc, #76]	; (1386c <mqtt_callback+0xe8>)
   1381e:	2001      	movs	r0, #1
   13820:	4b02      	ldr	r3, [pc, #8]	; (1382c <mqtt_callback+0xa8>)
   13822:	4798      	blx	r3
}
   13824:	e7b7      	b.n	13796 <mqtt_callback+0x12>
   13826:	46c0      	nop			; (mov r8, r8)
   13828:	000275f8 	.word	0x000275f8
   1382c:	000190fd 	.word	0x000190fd
   13830:	00027628 	.word	0x00027628
   13834:	00027614 	.word	0x00027614
   13838:	00022205 	.word	0x00022205
   1383c:	00027638 	.word	0x00027638
   13840:	00027660 	.word	0x00027660
   13844:	000275e4 	.word	0x000275e4
   13848:	0002767c 	.word	0x0002767c
   1384c:	000221d9 	.word	0x000221d9
   13850:	00013565 	.word	0x00013565
   13854:	000276b4 	.word	0x000276b4
   13858:	00022309 	.word	0x00022309
   1385c:	000134f9 	.word	0x000134f9
   13860:	000276cc 	.word	0x000276cc
   13864:	000276e4 	.word	0x000276e4
   13868:	000276f8 	.word	0x000276f8
   1386c:	0002772c 	.word	0x0002772c

00013870 <resolve_cb>:
{
   13870:	b570      	push	{r4, r5, r6, lr}
   13872:	b084      	sub	sp, #16
   13874:	0005      	movs	r5, r0
   13876:	000c      	movs	r4, r1
	LogMessage(LOG_DEBUG_LVL,"resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
   13878:	22ff      	movs	r2, #255	; 0xff
   1387a:	0013      	movs	r3, r2
   1387c:	400b      	ands	r3, r1
			(int)IPV4_BYTE(u32ServerIP, 2), (int)IPV4_BYTE(u32ServerIP, 3));
   1387e:	0e09      	lsrs	r1, r1, #24
	LogMessage(LOG_DEBUG_LVL,"resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
   13880:	9102      	str	r1, [sp, #8]
			(int)IPV4_BYTE(u32ServerIP, 2), (int)IPV4_BYTE(u32ServerIP, 3));
   13882:	0c21      	lsrs	r1, r4, #16
	LogMessage(LOG_DEBUG_LVL,"resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
   13884:	4011      	ands	r1, r2
   13886:	9101      	str	r1, [sp, #4]
			(int)IPV4_BYTE(u32ServerIP, 0), (int)IPV4_BYTE(u32ServerIP, 1),
   13888:	0a21      	lsrs	r1, r4, #8
	LogMessage(LOG_DEBUG_LVL,"resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
   1388a:	400a      	ands	r2, r1
   1388c:	9200      	str	r2, [sp, #0]
   1388e:	0002      	movs	r2, r0
   13890:	4904      	ldr	r1, [pc, #16]	; (138a4 <resolve_cb+0x34>)
   13892:	2001      	movs	r0, #1
   13894:	4e04      	ldr	r6, [pc, #16]	; (138a8 <resolve_cb+0x38>)
   13896:	47b0      	blx	r6
	http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
   13898:	0021      	movs	r1, r4
   1389a:	0028      	movs	r0, r5
   1389c:	4b03      	ldr	r3, [pc, #12]	; (138ac <resolve_cb+0x3c>)
   1389e:	4798      	blx	r3
}
   138a0:	b004      	add	sp, #16
   138a2:	bd70      	pop	{r4, r5, r6, pc}
   138a4:	00027740 	.word	0x00027740
   138a8:	000190fd 	.word	0x000190fd
   138ac:	00022dc1 	.word	0x00022dc1

000138b0 <socket_cb>:
{
   138b0:	b510      	push	{r4, lr}
	http_client_socket_event_handler(sock, u8Msg, pvMsg);
   138b2:	4b01      	ldr	r3, [pc, #4]	; (138b8 <socket_cb+0x8>)
   138b4:	4798      	blx	r3
}
   138b6:	bd10      	pop	{r4, pc}
   138b8:	000239ed 	.word	0x000239ed

000138bc <store_file_packet>:
{
   138bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   138be:	46d6      	mov	lr, sl
   138c0:	b500      	push	{lr}
   138c2:	b09a      	sub	sp, #104	; 0x68
   138c4:	9001      	str	r0, [sp, #4]
   138c6:	9102      	str	r1, [sp, #8]
	if ((data == NULL) || (length < 1)) {
   138c8:	2800      	cmp	r0, #0
   138ca:	d00d      	beq.n	138e8 <store_file_packet+0x2c>
   138cc:	2900      	cmp	r1, #0
   138ce:	d00b      	beq.n	138e8 <store_file_packet+0x2c>
	return ((down_state & mask) != 0);
   138d0:	4b87      	ldr	r3, [pc, #540]	; (13af0 <store_file_packet+0x234>)
   138d2:	781b      	ldrb	r3, [r3, #0]
	if (!is_state_set(DOWNLOADING)) {
   138d4:	071b      	lsls	r3, r3, #28
   138d6:	d500      	bpl.n	138da <store_file_packet+0x1e>
   138d8:	e0c5      	b.n	13a66 <store_file_packet+0x1aa>
		save_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   138da:	4b86      	ldr	r3, [pc, #536]	; (13af4 <store_file_packet+0x238>)
   138dc:	2230      	movs	r2, #48	; 0x30
   138de:	701a      	strb	r2, [r3, #0]
		save_file_name[1] = ':';
   138e0:	320a      	adds	r2, #10
   138e2:	705a      	strb	r2, [r3, #1]
   138e4:	4c84      	ldr	r4, [pc, #528]	; (13af8 <store_file_packet+0x23c>)
   138e6:	e008      	b.n	138fa <store_file_packet+0x3e>
		LogMessage(LOG_DEBUG_LVL,"store_file_packet: empty data.\r\n");
   138e8:	4984      	ldr	r1, [pc, #528]	; (13afc <store_file_packet+0x240>)
   138ea:	2001      	movs	r0, #1
   138ec:	4b84      	ldr	r3, [pc, #528]	; (13b00 <store_file_packet+0x244>)
   138ee:	4798      	blx	r3
}
   138f0:	b01a      	add	sp, #104	; 0x68
   138f2:	bc04      	pop	{r2}
   138f4:	4692      	mov	sl, r2
   138f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			cp--;
   138f8:	0004      	movs	r4, r0
   138fa:	1e60      	subs	r0, r4, #1
		while (*cp != '/') {
   138fc:	7803      	ldrb	r3, [r0, #0]
   138fe:	2b2f      	cmp	r3, #47	; 0x2f
   13900:	d1fa      	bne.n	138f8 <store_file_packet+0x3c>
		if (strlen(cp) > 1) {
   13902:	4b80      	ldr	r3, [pc, #512]	; (13b04 <store_file_packet+0x248>)
   13904:	4798      	blx	r3
   13906:	2801      	cmp	r0, #1
   13908:	d800      	bhi.n	1390c <store_file_packet+0x50>
   1390a:	e0c1      	b.n	13a90 <store_file_packet+0x1d4>
			strcpy(&save_file_name[2], cp);
   1390c:	4f79      	ldr	r7, [pc, #484]	; (13af4 <store_file_packet+0x238>)
   1390e:	1cb8      	adds	r0, r7, #2
   13910:	0021      	movs	r1, r4
   13912:	4b7d      	ldr	r3, [pc, #500]	; (13b08 <store_file_packet+0x24c>)
   13914:	4798      	blx	r3
	char name[MAIN_MAX_FILE_NAME_LENGTH + 1] = {0};
   13916:	2241      	movs	r2, #65	; 0x41
   13918:	2100      	movs	r1, #0
   1391a:	a809      	add	r0, sp, #36	; 0x24
   1391c:	4c7b      	ldr	r4, [pc, #492]	; (13b0c <store_file_packet+0x250>)
   1391e:	47a0      	blx	r4
	char ext[MAIN_MAX_FILE_EXT_LENGTH + 1] = {0};
   13920:	2209      	movs	r2, #9
   13922:	2100      	movs	r1, #0
   13924:	a806      	add	r0, sp, #24
   13926:	47a0      	blx	r4
	char numbering[NUMBRING_MAX + 1] = {0};
   13928:	2300      	movs	r3, #0
   1392a:	9305      	str	r3, [sp, #20]
	FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
   1392c:	4c78      	ldr	r4, [pc, #480]	; (13b10 <store_file_packet+0x254>)
   1392e:	2200      	movs	r2, #0
   13930:	0039      	movs	r1, r7
   13932:	0020      	movs	r0, r4
   13934:	4b77      	ldr	r3, [pc, #476]	; (13b14 <store_file_packet+0x258>)
   13936:	4798      	blx	r3
   13938:	0007      	movs	r7, r0
	f_close(&file_object);
   1393a:	0020      	movs	r0, r4
   1393c:	4b76      	ldr	r3, [pc, #472]	; (13b18 <store_file_packet+0x25c>)
   1393e:	4798      	blx	r3
	if (!is_exist_file(fp, file_path_name)) {
   13940:	2f00      	cmp	r7, #0
   13942:	d17d      	bne.n	13a40 <store_file_packet+0x184>
	else if (strlen(file_path_name) > MAIN_MAX_FILE_NAME_LENGTH) {
   13944:	486b      	ldr	r0, [pc, #428]	; (13af4 <store_file_packet+0x238>)
   13946:	4b6f      	ldr	r3, [pc, #444]	; (13b04 <store_file_packet+0x248>)
   13948:	4798      	blx	r3
   1394a:	2840      	cmp	r0, #64	; 0x40
   1394c:	d878      	bhi.n	13a40 <store_file_packet+0x184>
	p = strrchr(file_path_name, '.');
   1394e:	212e      	movs	r1, #46	; 0x2e
   13950:	4868      	ldr	r0, [pc, #416]	; (13af4 <store_file_packet+0x238>)
   13952:	4b72      	ldr	r3, [pc, #456]	; (13b1c <store_file_packet+0x260>)
   13954:	4798      	blx	r3
   13956:	1e04      	subs	r4, r0, #0
	if (p != NULL) {
   13958:	d03b      	beq.n	139d2 <store_file_packet+0x116>
		ext_len = strlen(p);
   1395a:	4b6a      	ldr	r3, [pc, #424]	; (13b04 <store_file_packet+0x248>)
   1395c:	4798      	blx	r3
   1395e:	0007      	movs	r7, r0
   13960:	b286      	uxth	r6, r0
		if (ext_len < MAIN_MAX_FILE_EXT_LENGTH) {
   13962:	2e07      	cmp	r6, #7
   13964:	d821      	bhi.n	139aa <store_file_packet+0xee>
			strcpy(ext, p);
   13966:	0021      	movs	r1, r4
   13968:	a806      	add	r0, sp, #24
   1396a:	4b67      	ldr	r3, [pc, #412]	; (13b08 <store_file_packet+0x24c>)
   1396c:	4798      	blx	r3
			if (strlen(file_path_name) - ext_len > MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE) {
   1396e:	4861      	ldr	r0, [pc, #388]	; (13af4 <store_file_packet+0x238>)
   13970:	4b64      	ldr	r3, [pc, #400]	; (13b04 <store_file_packet+0x248>)
   13972:	4798      	blx	r3
   13974:	043f      	lsls	r7, r7, #16
   13976:	0c3f      	lsrs	r7, r7, #16
   13978:	1bc7      	subs	r7, r0, r7
   1397a:	2f3c      	cmp	r7, #60	; 0x3c
   1397c:	d90a      	bls.n	13994 <store_file_packet+0xd8>
				name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE - ext_len;
   1397e:	273c      	movs	r7, #60	; 0x3c
   13980:	1bbf      	subs	r7, r7, r6
   13982:	b2bf      	uxth	r7, r7
				strncpy(name, file_path_name, name_len);
   13984:	003a      	movs	r2, r7
   13986:	495b      	ldr	r1, [pc, #364]	; (13af4 <store_file_packet+0x238>)
   13988:	a809      	add	r0, sp, #36	; 0x24
   1398a:	4b65      	ldr	r3, [pc, #404]	; (13b20 <store_file_packet+0x264>)
   1398c:	4798      	blx	r3
			valid_ext = true;
   1398e:	2301      	movs	r3, #1
   13990:	469a      	mov	sl, r3
   13992:	e012      	b.n	139ba <store_file_packet+0xfe>
				name_len = (p - file_path_name);
   13994:	4957      	ldr	r1, [pc, #348]	; (13af4 <store_file_packet+0x238>)
   13996:	1a64      	subs	r4, r4, r1
   13998:	b2a7      	uxth	r7, r4
				strncpy(name, file_path_name, name_len);
   1399a:	0424      	lsls	r4, r4, #16
   1399c:	0c22      	lsrs	r2, r4, #16
   1399e:	a809      	add	r0, sp, #36	; 0x24
   139a0:	4b5f      	ldr	r3, [pc, #380]	; (13b20 <store_file_packet+0x264>)
   139a2:	4798      	blx	r3
			valid_ext = true;
   139a4:	2301      	movs	r3, #1
   139a6:	469a      	mov	sl, r3
   139a8:	e007      	b.n	139ba <store_file_packet+0xfe>
			strncpy(name, file_path_name, name_len);
   139aa:	223c      	movs	r2, #60	; 0x3c
   139ac:	4951      	ldr	r1, [pc, #324]	; (13af4 <store_file_packet+0x238>)
   139ae:	a809      	add	r0, sp, #36	; 0x24
   139b0:	4b5b      	ldr	r3, [pc, #364]	; (13b20 <store_file_packet+0x264>)
   139b2:	4798      	blx	r3
	bool valid_ext = false;
   139b4:	2300      	movs	r3, #0
   139b6:	469a      	mov	sl, r3
			name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   139b8:	273c      	movs	r7, #60	; 0x3c
	name[name_len++] = '-';
   139ba:	1c7c      	adds	r4, r7, #1
   139bc:	b2a4      	uxth	r4, r4
   139be:	222d      	movs	r2, #45	; 0x2d
   139c0:	ab09      	add	r3, sp, #36	; 0x24
   139c2:	55da      	strb	r2, [r3, r7]
   139c4:	2601      	movs	r6, #1
			strcpy(&name[name_len + NUMBRING_MAX], ext);
   139c6:	1ce3      	adds	r3, r4, #3
   139c8:	aa09      	add	r2, sp, #36	; 0x24
   139ca:	4694      	mov	ip, r2
   139cc:	4463      	add	r3, ip
   139ce:	9303      	str	r3, [sp, #12]
   139d0:	e019      	b.n	13a06 <store_file_packet+0x14a>
		strncpy(name, file_path_name, name_len);
   139d2:	223c      	movs	r2, #60	; 0x3c
   139d4:	4947      	ldr	r1, [pc, #284]	; (13af4 <store_file_packet+0x238>)
   139d6:	a809      	add	r0, sp, #36	; 0x24
   139d8:	4b51      	ldr	r3, [pc, #324]	; (13b20 <store_file_packet+0x264>)
   139da:	4798      	blx	r3
	bool valid_ext = false;
   139dc:	2300      	movs	r3, #0
   139de:	469a      	mov	sl, r3
		name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   139e0:	273c      	movs	r7, #60	; 0x3c
   139e2:	e7ea      	b.n	139ba <store_file_packet+0xfe>
	FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
   139e4:	4f4a      	ldr	r7, [pc, #296]	; (13b10 <store_file_packet+0x254>)
   139e6:	2200      	movs	r2, #0
   139e8:	a909      	add	r1, sp, #36	; 0x24
   139ea:	0038      	movs	r0, r7
   139ec:	4b49      	ldr	r3, [pc, #292]	; (13b14 <store_file_packet+0x258>)
   139ee:	4798      	blx	r3
   139f0:	0005      	movs	r5, r0
	f_close(&file_object);
   139f2:	0038      	movs	r0, r7
   139f4:	4b48      	ldr	r3, [pc, #288]	; (13b18 <store_file_packet+0x25c>)
   139f6:	4798      	blx	r3
		if (!is_exist_file(fp, name)) {
   139f8:	2d00      	cmp	r5, #0
   139fa:	d117      	bne.n	13a2c <store_file_packet+0x170>
   139fc:	3601      	adds	r6, #1
	for (i = 1; i < count; i++) {
   139fe:	4b49      	ldr	r3, [pc, #292]	; (13b24 <store_file_packet+0x268>)
   13a00:	b2b2      	uxth	r2, r6
   13a02:	429a      	cmp	r2, r3
   13a04:	d81c      	bhi.n	13a40 <store_file_packet+0x184>
		sprintf(numbering, MAIN_ZERO_FMT(NUMBRING_MAX), i);
   13a06:	0032      	movs	r2, r6
   13a08:	4947      	ldr	r1, [pc, #284]	; (13b28 <store_file_packet+0x26c>)
   13a0a:	a805      	add	r0, sp, #20
   13a0c:	4b47      	ldr	r3, [pc, #284]	; (13b2c <store_file_packet+0x270>)
   13a0e:	4798      	blx	r3
		strncpy(&name[name_len], numbering, NUMBRING_MAX);
   13a10:	ab09      	add	r3, sp, #36	; 0x24
   13a12:	1918      	adds	r0, r3, r4
   13a14:	2203      	movs	r2, #3
   13a16:	a905      	add	r1, sp, #20
   13a18:	4b41      	ldr	r3, [pc, #260]	; (13b20 <store_file_packet+0x264>)
   13a1a:	4798      	blx	r3
		if (valid_ext) {
   13a1c:	4653      	mov	r3, sl
   13a1e:	2b00      	cmp	r3, #0
   13a20:	d0e0      	beq.n	139e4 <store_file_packet+0x128>
			strcpy(&name[name_len + NUMBRING_MAX], ext);
   13a22:	a906      	add	r1, sp, #24
   13a24:	9803      	ldr	r0, [sp, #12]
   13a26:	4b38      	ldr	r3, [pc, #224]	; (13b08 <store_file_packet+0x24c>)
   13a28:	4798      	blx	r3
   13a2a:	e7db      	b.n	139e4 <store_file_packet+0x128>
			memset(file_path_name, 0, max_len);
   13a2c:	4c31      	ldr	r4, [pc, #196]	; (13af4 <store_file_packet+0x238>)
   13a2e:	2240      	movs	r2, #64	; 0x40
   13a30:	2100      	movs	r1, #0
   13a32:	0020      	movs	r0, r4
   13a34:	4b35      	ldr	r3, [pc, #212]	; (13b0c <store_file_packet+0x250>)
   13a36:	4798      	blx	r3
			strcpy(file_path_name, name);
   13a38:	a909      	add	r1, sp, #36	; 0x24
   13a3a:	0020      	movs	r0, r4
   13a3c:	4b32      	ldr	r3, [pc, #200]	; (13b08 <store_file_packet+0x24c>)
   13a3e:	4798      	blx	r3
		LogMessage(LOG_DEBUG_LVL,"store_file_packet: creating file [%s]\r\n", save_file_name);
   13a40:	4c2c      	ldr	r4, [pc, #176]	; (13af4 <store_file_packet+0x238>)
   13a42:	0022      	movs	r2, r4
   13a44:	493a      	ldr	r1, [pc, #232]	; (13b30 <store_file_packet+0x274>)
   13a46:	2001      	movs	r0, #1
   13a48:	4b2d      	ldr	r3, [pc, #180]	; (13b00 <store_file_packet+0x244>)
   13a4a:	4798      	blx	r3
		ret = f_open(&file_object, (char const *)save_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   13a4c:	220a      	movs	r2, #10
   13a4e:	0021      	movs	r1, r4
   13a50:	482f      	ldr	r0, [pc, #188]	; (13b10 <store_file_packet+0x254>)
   13a52:	4b30      	ldr	r3, [pc, #192]	; (13b14 <store_file_packet+0x258>)
   13a54:	4798      	blx	r3
		if (ret != FR_OK) {
   13a56:	2800      	cmp	r0, #0
   13a58:	d122      	bne.n	13aa0 <store_file_packet+0x1e4>
		received_file_size = 0;
   13a5a:	2200      	movs	r2, #0
   13a5c:	4b35      	ldr	r3, [pc, #212]	; (13b34 <store_file_packet+0x278>)
   13a5e:	601a      	str	r2, [r3, #0]
		add_state(DOWNLOADING);
   13a60:	2008      	movs	r0, #8
   13a62:	4b35      	ldr	r3, [pc, #212]	; (13b38 <store_file_packet+0x27c>)
   13a64:	4798      	blx	r3
		UINT wsize = 0;
   13a66:	2300      	movs	r3, #0
   13a68:	9309      	str	r3, [sp, #36]	; 0x24
		ret = f_write(&file_object, (const void *)data, length, &wsize);
   13a6a:	ab09      	add	r3, sp, #36	; 0x24
   13a6c:	9a02      	ldr	r2, [sp, #8]
   13a6e:	9901      	ldr	r1, [sp, #4]
   13a70:	4827      	ldr	r0, [pc, #156]	; (13b10 <store_file_packet+0x254>)
   13a72:	4c32      	ldr	r4, [pc, #200]	; (13b3c <store_file_packet+0x280>)
   13a74:	47a0      	blx	r4
		if (ret != FR_OK) {
   13a76:	2800      	cmp	r0, #0
   13a78:	d018      	beq.n	13aac <store_file_packet+0x1f0>
			f_close(&file_object);
   13a7a:	4825      	ldr	r0, [pc, #148]	; (13b10 <store_file_packet+0x254>)
   13a7c:	4b26      	ldr	r3, [pc, #152]	; (13b18 <store_file_packet+0x25c>)
   13a7e:	4798      	blx	r3
			add_state(CANCELED);
   13a80:	2020      	movs	r0, #32
   13a82:	4b2d      	ldr	r3, [pc, #180]	; (13b38 <store_file_packet+0x27c>)
   13a84:	4798      	blx	r3
			LogMessage(LOG_DEBUG_LVL,"store_file_packet: file write error, download canceled.\r\n");
   13a86:	492e      	ldr	r1, [pc, #184]	; (13b40 <store_file_packet+0x284>)
   13a88:	2001      	movs	r0, #1
   13a8a:	4b1d      	ldr	r3, [pc, #116]	; (13b00 <store_file_packet+0x244>)
   13a8c:	4798      	blx	r3
			return;
   13a8e:	e72f      	b.n	138f0 <store_file_packet+0x34>
			LogMessage(LOG_DEBUG_LVL,"store_file_packet: file name is invalid. Download canceled.\r\n");
   13a90:	492c      	ldr	r1, [pc, #176]	; (13b44 <store_file_packet+0x288>)
   13a92:	2001      	movs	r0, #1
   13a94:	4b1a      	ldr	r3, [pc, #104]	; (13b00 <store_file_packet+0x244>)
   13a96:	4798      	blx	r3
			add_state(CANCELED);
   13a98:	2020      	movs	r0, #32
   13a9a:	4b27      	ldr	r3, [pc, #156]	; (13b38 <store_file_packet+0x27c>)
   13a9c:	4798      	blx	r3
			return;
   13a9e:	e727      	b.n	138f0 <store_file_packet+0x34>
			LogMessage(LOG_DEBUG_LVL,"store_file_packet: file creation error! ret:%d\r\n", ret);
   13aa0:	0002      	movs	r2, r0
   13aa2:	4929      	ldr	r1, [pc, #164]	; (13b48 <store_file_packet+0x28c>)
   13aa4:	2001      	movs	r0, #1
   13aa6:	4b16      	ldr	r3, [pc, #88]	; (13b00 <store_file_packet+0x244>)
   13aa8:	4798      	blx	r3
			return;
   13aaa:	e721      	b.n	138f0 <store_file_packet+0x34>
		received_file_size += wsize;
   13aac:	4c21      	ldr	r4, [pc, #132]	; (13b34 <store_file_packet+0x278>)
   13aae:	6823      	ldr	r3, [r4, #0]
   13ab0:	9909      	ldr	r1, [sp, #36]	; 0x24
   13ab2:	468c      	mov	ip, r1
   13ab4:	4463      	add	r3, ip
   13ab6:	001a      	movs	r2, r3
   13ab8:	6023      	str	r3, [r4, #0]
		LogMessage(LOG_DEBUG_LVL,"store_file_packet: received[%lu], file size[%lu]\r\n", (unsigned long)received_file_size, (unsigned long)http_file_size);
   13aba:	4d24      	ldr	r5, [pc, #144]	; (13b4c <store_file_packet+0x290>)
   13abc:	682b      	ldr	r3, [r5, #0]
   13abe:	4924      	ldr	r1, [pc, #144]	; (13b50 <store_file_packet+0x294>)
   13ac0:	2001      	movs	r0, #1
   13ac2:	4e0f      	ldr	r6, [pc, #60]	; (13b00 <store_file_packet+0x244>)
   13ac4:	47b0      	blx	r6
		if (received_file_size >= http_file_size) {
   13ac6:	6822      	ldr	r2, [r4, #0]
   13ac8:	682b      	ldr	r3, [r5, #0]
   13aca:	429a      	cmp	r2, r3
   13acc:	d200      	bcs.n	13ad0 <store_file_packet+0x214>
   13ace:	e70f      	b.n	138f0 <store_file_packet+0x34>
			f_close(&file_object);
   13ad0:	480f      	ldr	r0, [pc, #60]	; (13b10 <store_file_packet+0x254>)
   13ad2:	4b11      	ldr	r3, [pc, #68]	; (13b18 <store_file_packet+0x25c>)
   13ad4:	4798      	blx	r3
			LogMessage(LOG_DEBUG_LVL,"store_file_packet: file downloaded successfully.\r\n");
   13ad6:	491f      	ldr	r1, [pc, #124]	; (13b54 <store_file_packet+0x298>)
   13ad8:	2001      	movs	r0, #1
   13ada:	4b09      	ldr	r3, [pc, #36]	; (13b00 <store_file_packet+0x244>)
   13adc:	4798      	blx	r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
   13ade:	2280      	movs	r2, #128	; 0x80
   13ae0:	0412      	lsls	r2, r2, #16
   13ae2:	4b1d      	ldr	r3, [pc, #116]	; (13b58 <store_file_packet+0x29c>)
   13ae4:	615a      	str	r2, [r3, #20]
			add_state(COMPLETED);
   13ae6:	2010      	movs	r0, #16
   13ae8:	4b13      	ldr	r3, [pc, #76]	; (13b38 <store_file_packet+0x27c>)
   13aea:	4798      	blx	r3
			return;
   13aec:	e700      	b.n	138f0 <store_file_packet+0x34>
   13aee:	46c0      	nop			; (mov r8, r8)
   13af0:	200004cd 	.word	0x200004cd
   13af4:	20000058 	.word	0x20000058
   13af8:	00027876 	.word	0x00027876
   13afc:	00027878 	.word	0x00027878
   13b00:	000190fd 	.word	0x000190fd
   13b04:	000260c7 	.word	0x000260c7
   13b08:	0002607b 	.word	0x0002607b
   13b0c:	00025d0f 	.word	0x00025d0f
   13b10:	200004d0 	.word	0x200004d0
   13b14:	00021141 	.word	0x00021141
   13b18:	0002158d 	.word	0x0002158d
   13b1c:	00026121 	.word	0x00026121
   13b20:	000260f7 	.word	0x000260f7
   13b24:	000003e7 	.word	0x000003e7
   13b28:	0002789c 	.word	0x0002789c
   13b2c:	00025fcd 	.word	0x00025fcd
   13b30:	000278a4 	.word	0x000278a4
   13b34:	20000934 	.word	0x20000934
   13b38:	000134c5 	.word	0x000134c5
   13b3c:	000212c9 	.word	0x000212c9
   13b40:	00027940 	.word	0x00027940
   13b44:	000278cc 	.word	0x000278cc
   13b48:	0002790c 	.word	0x0002790c
   13b4c:	200004f4 	.word	0x200004f4
   13b50:	0002797c 	.word	0x0002797c
   13b54:	000279b0 	.word	0x000279b0
   13b58:	41004400 	.word	0x41004400

00013b5c <http_client_callback>:
{
   13b5c:	b570      	push	{r4, r5, r6, lr}
   13b5e:	0014      	movs	r4, r2
	switch (type) {
   13b60:	2904      	cmp	r1, #4
   13b62:	d807      	bhi.n	13b74 <http_client_callback+0x18>
   13b64:	0089      	lsls	r1, r1, #2
   13b66:	4b2d      	ldr	r3, [pc, #180]	; (13c1c <http_client_callback+0xc0>)
   13b68:	585b      	ldr	r3, [r3, r1]
   13b6a:	469f      	mov	pc, r3
		LogMessage(LOG_DEBUG_LVL,"http_client_callback: HTTP client socket connected.\r\n");
   13b6c:	492c      	ldr	r1, [pc, #176]	; (13c20 <http_client_callback+0xc4>)
   13b6e:	2001      	movs	r0, #1
   13b70:	4b2c      	ldr	r3, [pc, #176]	; (13c24 <http_client_callback+0xc8>)
   13b72:	4798      	blx	r3
}
   13b74:	bd70      	pop	{r4, r5, r6, pc}
		LogMessage(LOG_DEBUG_LVL,"http_client_callback: request completed.\r\n");
   13b76:	492c      	ldr	r1, [pc, #176]	; (13c28 <http_client_callback+0xcc>)
   13b78:	2001      	movs	r0, #1
   13b7a:	4b2a      	ldr	r3, [pc, #168]	; (13c24 <http_client_callback+0xc8>)
   13b7c:	4798      	blx	r3
		add_state(GET_REQUESTED);
   13b7e:	2004      	movs	r0, #4
   13b80:	4b2a      	ldr	r3, [pc, #168]	; (13c2c <http_client_callback+0xd0>)
   13b82:	4798      	blx	r3
		break;
   13b84:	e7f6      	b.n	13b74 <http_client_callback+0x18>
		LogMessage(LOG_DEBUG_LVL,"http_client_callback: received response %u data size %u\r\n",
   13b86:	8812      	ldrh	r2, [r2, #0]
   13b88:	6863      	ldr	r3, [r4, #4]
   13b8a:	4929      	ldr	r1, [pc, #164]	; (13c30 <http_client_callback+0xd4>)
   13b8c:	2001      	movs	r0, #1
   13b8e:	4d25      	ldr	r5, [pc, #148]	; (13c24 <http_client_callback+0xc8>)
   13b90:	47a8      	blx	r5
		if ((unsigned int)data->recv_response.response_code == 200) {
   13b92:	8823      	ldrh	r3, [r4, #0]
   13b94:	2bc8      	cmp	r3, #200	; 0xc8
   13b96:	d110      	bne.n	13bba <http_client_callback+0x5e>
			http_file_size = data->recv_response.content_length;
   13b98:	6861      	ldr	r1, [r4, #4]
   13b9a:	4b26      	ldr	r3, [pc, #152]	; (13c34 <http_client_callback+0xd8>)
   13b9c:	6019      	str	r1, [r3, #0]
			received_file_size = 0;
   13b9e:	2200      	movs	r2, #0
   13ba0:	4b25      	ldr	r3, [pc, #148]	; (13c38 <http_client_callback+0xdc>)
   13ba2:	601a      	str	r2, [r3, #0]
		if (data->recv_response.content_length <= MAIN_BUFFER_MAX_SIZE) {
   13ba4:	2380      	movs	r3, #128	; 0x80
   13ba6:	009b      	lsls	r3, r3, #2
   13ba8:	4299      	cmp	r1, r3
   13baa:	d8e3      	bhi.n	13b74 <http_client_callback+0x18>
			store_file_packet(data->recv_response.content, data->recv_response.content_length);
   13bac:	68a0      	ldr	r0, [r4, #8]
   13bae:	4b23      	ldr	r3, [pc, #140]	; (13c3c <http_client_callback+0xe0>)
   13bb0:	4798      	blx	r3
			add_state(COMPLETED);
   13bb2:	2010      	movs	r0, #16
   13bb4:	4b1d      	ldr	r3, [pc, #116]	; (13c2c <http_client_callback+0xd0>)
   13bb6:	4798      	blx	r3
   13bb8:	e7dc      	b.n	13b74 <http_client_callback+0x18>
			add_state(CANCELED);
   13bba:	2020      	movs	r0, #32
   13bbc:	4b1b      	ldr	r3, [pc, #108]	; (13c2c <http_client_callback+0xd0>)
   13bbe:	4798      	blx	r3
			return;
   13bc0:	e7d8      	b.n	13b74 <http_client_callback+0x18>
		store_file_packet(data->recv_chunked_data.data, data->recv_chunked_data.length);
   13bc2:	6811      	ldr	r1, [r2, #0]
   13bc4:	6850      	ldr	r0, [r2, #4]
   13bc6:	4b1d      	ldr	r3, [pc, #116]	; (13c3c <http_client_callback+0xe0>)
   13bc8:	4798      	blx	r3
		if (data->recv_chunked_data.is_complete) {
   13bca:	7a23      	ldrb	r3, [r4, #8]
   13bcc:	2b00      	cmp	r3, #0
   13bce:	d0d1      	beq.n	13b74 <http_client_callback+0x18>
			add_state(COMPLETED);
   13bd0:	2010      	movs	r0, #16
   13bd2:	4b16      	ldr	r3, [pc, #88]	; (13c2c <http_client_callback+0xd0>)
   13bd4:	4798      	blx	r3
   13bd6:	e7cd      	b.n	13b74 <http_client_callback+0x18>
		LogMessage(LOG_DEBUG_LVL,"http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
   13bd8:	6812      	ldr	r2, [r2, #0]
   13bda:	4919      	ldr	r1, [pc, #100]	; (13c40 <http_client_callback+0xe4>)
   13bdc:	2001      	movs	r0, #1
   13bde:	4b11      	ldr	r3, [pc, #68]	; (13c24 <http_client_callback+0xc8>)
   13be0:	4798      	blx	r3
		if (data->disconnected.reason == -EAGAIN) {
   13be2:	6823      	ldr	r3, [r4, #0]
   13be4:	330b      	adds	r3, #11
   13be6:	d1c5      	bne.n	13b74 <http_client_callback+0x18>
	return ((down_state & mask) != 0);
   13be8:	4b16      	ldr	r3, [pc, #88]	; (13c44 <http_client_callback+0xe8>)
   13bea:	781b      	ldrb	r3, [r3, #0]
			if (is_state_set(DOWNLOADING)) {
   13bec:	071b      	lsls	r3, r3, #28
   13bee:	d406      	bmi.n	13bfe <http_client_callback+0xa2>
	return ((down_state & mask) != 0);
   13bf0:	4b14      	ldr	r3, [pc, #80]	; (13c44 <http_client_callback+0xe8>)
   13bf2:	781b      	ldrb	r3, [r3, #0]
			if (is_state_set(GET_REQUESTED)) {
   13bf4:	075a      	lsls	r2, r3, #29
   13bf6:	d40b      	bmi.n	13c10 <http_client_callback+0xb4>
			start_download();
   13bf8:	4b13      	ldr	r3, [pc, #76]	; (13c48 <http_client_callback+0xec>)
   13bfa:	4798      	blx	r3
   13bfc:	e7ba      	b.n	13b74 <http_client_callback+0x18>
				f_close(&file_object);
   13bfe:	4813      	ldr	r0, [pc, #76]	; (13c4c <http_client_callback+0xf0>)
   13c00:	4b13      	ldr	r3, [pc, #76]	; (13c50 <http_client_callback+0xf4>)
   13c02:	4798      	blx	r3
	down_state &= ~mask;
   13c04:	4a0f      	ldr	r2, [pc, #60]	; (13c44 <http_client_callback+0xe8>)
   13c06:	7813      	ldrb	r3, [r2, #0]
   13c08:	2108      	movs	r1, #8
   13c0a:	438b      	bics	r3, r1
   13c0c:	7013      	strb	r3, [r2, #0]
   13c0e:	e7ef      	b.n	13bf0 <http_client_callback+0x94>
   13c10:	2204      	movs	r2, #4
   13c12:	4393      	bics	r3, r2
   13c14:	4a0b      	ldr	r2, [pc, #44]	; (13c44 <http_client_callback+0xe8>)
   13c16:	7013      	strb	r3, [r2, #0]
   13c18:	e7ee      	b.n	13bf8 <http_client_callback+0x9c>
   13c1a:	46c0      	nop			; (mov r8, r8)
   13c1c:	000273c0 	.word	0x000273c0
   13c20:	00027514 	.word	0x00027514
   13c24:	000190fd 	.word	0x000190fd
   13c28:	0002754c 	.word	0x0002754c
   13c2c:	000134c5 	.word	0x000134c5
   13c30:	00027578 	.word	0x00027578
   13c34:	200004f4 	.word	0x200004f4
   13c38:	20000934 	.word	0x20000934
   13c3c:	000138bd 	.word	0x000138bd
   13c40:	000275b4 	.word	0x000275b4
   13c44:	200004cd 	.word	0x200004cd
   13c48:	0001367d 	.word	0x0001367d
   13c4c:	200004d0 	.word	0x200004d0
   13c50:	0002158d 	.word	0x0002158d

00013c54 <wifi_cb>:
{
   13c54:	b510      	push	{r4, lr}
   13c56:	b082      	sub	sp, #8
	switch (u8MsgType) {
   13c58:	282c      	cmp	r0, #44	; 0x2c
   13c5a:	d003      	beq.n	13c64 <wifi_cb+0x10>
   13c5c:	2832      	cmp	r0, #50	; 0x32
   13c5e:	d037      	beq.n	13cd0 <wifi_cb+0x7c>
}
   13c60:	b002      	add	sp, #8
   13c62:	bd10      	pop	{r4, pc}
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
   13c64:	780b      	ldrb	r3, [r1, #0]
   13c66:	2b01      	cmp	r3, #1
   13c68:	d01d      	beq.n	13ca6 <wifi_cb+0x52>
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
   13c6a:	2b00      	cmp	r3, #0
   13c6c:	d1f8      	bne.n	13c60 <wifi_cb+0xc>
			LogMessage(LOG_DEBUG_LVL,"wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
   13c6e:	4928      	ldr	r1, [pc, #160]	; (13d10 <wifi_cb+0xbc>)
   13c70:	2001      	movs	r0, #1
   13c72:	4b28      	ldr	r3, [pc, #160]	; (13d14 <wifi_cb+0xc0>)
   13c74:	4798      	blx	r3
	down_state &= ~mask;
   13c76:	4a28      	ldr	r2, [pc, #160]	; (13d18 <wifi_cb+0xc4>)
   13c78:	7813      	ldrb	r3, [r2, #0]
   13c7a:	2102      	movs	r1, #2
   13c7c:	438b      	bics	r3, r1
   13c7e:	7013      	strb	r3, [r2, #0]
			if (is_state_set(DOWNLOADING)) {
   13c80:	071b      	lsls	r3, r3, #28
   13c82:	d417      	bmi.n	13cb4 <wifi_cb+0x60>
	return ((down_state & mask) != 0);
   13c84:	4b24      	ldr	r3, [pc, #144]	; (13d18 <wifi_cb+0xc4>)
   13c86:	781b      	ldrb	r3, [r3, #0]
			if (is_state_set(GET_REQUESTED)) {
   13c88:	075a      	lsls	r2, r3, #29
   13c8a:	d41c      	bmi.n	13cc6 <wifi_cb+0x72>
			mqtt_disconnect(&mqtt_inst, 1);
   13c8c:	2101      	movs	r1, #1
   13c8e:	4823      	ldr	r0, [pc, #140]	; (13d1c <wifi_cb+0xc8>)
   13c90:	4b23      	ldr	r3, [pc, #140]	; (13d20 <wifi_cb+0xcc>)
   13c92:	4798      	blx	r3
			m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
   13c94:	23ff      	movs	r3, #255	; 0xff
   13c96:	9300      	str	r3, [sp, #0]
   13c98:	4b22      	ldr	r3, [pc, #136]	; (13d24 <wifi_cb+0xd0>)
   13c9a:	2202      	movs	r2, #2
   13c9c:	210d      	movs	r1, #13
   13c9e:	4822      	ldr	r0, [pc, #136]	; (13d28 <wifi_cb+0xd4>)
   13ca0:	4c22      	ldr	r4, [pc, #136]	; (13d2c <wifi_cb+0xd8>)
   13ca2:	47a0      	blx	r4
   13ca4:	e7dc      	b.n	13c60 <wifi_cb+0xc>
			LogMessage(LOG_DEBUG_LVL,"wifi_cb: M2M_WIFI_CONNECTED\r\n");
   13ca6:	4922      	ldr	r1, [pc, #136]	; (13d30 <wifi_cb+0xdc>)
   13ca8:	2001      	movs	r0, #1
   13caa:	4b1a      	ldr	r3, [pc, #104]	; (13d14 <wifi_cb+0xc0>)
   13cac:	4798      	blx	r3
			m2m_wifi_request_dhcp_client();
   13cae:	4b21      	ldr	r3, [pc, #132]	; (13d34 <wifi_cb+0xe0>)
   13cb0:	4798      	blx	r3
   13cb2:	e7d5      	b.n	13c60 <wifi_cb+0xc>
				f_close(&file_object);
   13cb4:	4820      	ldr	r0, [pc, #128]	; (13d38 <wifi_cb+0xe4>)
   13cb6:	4b21      	ldr	r3, [pc, #132]	; (13d3c <wifi_cb+0xe8>)
   13cb8:	4798      	blx	r3
	down_state &= ~mask;
   13cba:	4a17      	ldr	r2, [pc, #92]	; (13d18 <wifi_cb+0xc4>)
   13cbc:	7813      	ldrb	r3, [r2, #0]
   13cbe:	2108      	movs	r1, #8
   13cc0:	438b      	bics	r3, r1
   13cc2:	7013      	strb	r3, [r2, #0]
   13cc4:	e7de      	b.n	13c84 <wifi_cb+0x30>
   13cc6:	2204      	movs	r2, #4
   13cc8:	4393      	bics	r3, r2
   13cca:	4a13      	ldr	r2, [pc, #76]	; (13d18 <wifi_cb+0xc4>)
   13ccc:	7013      	strb	r3, [r2, #0]
   13cce:	e7dd      	b.n	13c8c <wifi_cb+0x38>
		LogMessage(LOG_DEBUG_LVL,"wifi_cb: IP address is %u.%u.%u.%u\r\n",
   13cd0:	784b      	ldrb	r3, [r1, #1]
   13cd2:	780a      	ldrb	r2, [r1, #0]
   13cd4:	78c8      	ldrb	r0, [r1, #3]
   13cd6:	9001      	str	r0, [sp, #4]
   13cd8:	7889      	ldrb	r1, [r1, #2]
   13cda:	9100      	str	r1, [sp, #0]
   13cdc:	4918      	ldr	r1, [pc, #96]	; (13d40 <wifi_cb+0xec>)
   13cde:	2001      	movs	r0, #1
   13ce0:	4c0c      	ldr	r4, [pc, #48]	; (13d14 <wifi_cb+0xc0>)
   13ce2:	47a0      	blx	r4
		add_state(WIFI_CONNECTED);
   13ce4:	2002      	movs	r0, #2
   13ce6:	4b17      	ldr	r3, [pc, #92]	; (13d44 <wifi_cb+0xf0>)
   13ce8:	4798      	blx	r3
		if(do_download_flag == 1)
   13cea:	4b17      	ldr	r3, [pc, #92]	; (13d48 <wifi_cb+0xf4>)
   13cec:	781b      	ldrb	r3, [r3, #0]
   13cee:	2b01      	cmp	r3, #1
   13cf0:	d00a      	beq.n	13d08 <wifi_cb+0xb4>
		if (mqtt_connect(&mqtt_inst, main_mqtt_broker))
   13cf2:	4916      	ldr	r1, [pc, #88]	; (13d4c <wifi_cb+0xf8>)
   13cf4:	4809      	ldr	r0, [pc, #36]	; (13d1c <wifi_cb+0xc8>)
   13cf6:	4b16      	ldr	r3, [pc, #88]	; (13d50 <wifi_cb+0xfc>)
   13cf8:	4798      	blx	r3
   13cfa:	2800      	cmp	r0, #0
   13cfc:	d0b0      	beq.n	13c60 <wifi_cb+0xc>
			LogMessage(LOG_DEBUG_LVL,"Error connecting to MQTT Broker!\r\n");
   13cfe:	4915      	ldr	r1, [pc, #84]	; (13d54 <wifi_cb+0x100>)
   13d00:	2001      	movs	r0, #1
   13d02:	4b04      	ldr	r3, [pc, #16]	; (13d14 <wifi_cb+0xc0>)
   13d04:	4798      	blx	r3
}
   13d06:	e7ab      	b.n	13c60 <wifi_cb+0xc>
			start_download();
   13d08:	4b13      	ldr	r3, [pc, #76]	; (13d58 <wifi_cb+0x104>)
   13d0a:	4798      	blx	r3
   13d0c:	e7a8      	b.n	13c60 <wifi_cb+0xc>
   13d0e:	46c0      	nop			; (mov r8, r8)
   13d10:	00027b50 	.word	0x00027b50
   13d14:	000190fd 	.word	0x000190fd
   13d18:	200004cd 	.word	0x200004cd
   13d1c:	200004fc 	.word	0x200004fc
   13d20:	0002229d 	.word	0x0002229d
   13d24:	00027b74 	.word	0x00027b74
   13d28:	00027b88 	.word	0x00027b88
   13d2c:	0001b42d 	.word	0x0001b42d
   13d30:	00027b30 	.word	0x00027b30
   13d34:	0001b449 	.word	0x0001b449
   13d38:	200004d0 	.word	0x200004d0
   13d3c:	0002158d 	.word	0x0002158d
   13d40:	00027b98 	.word	0x00027b98
   13d44:	000134c5 	.word	0x000134c5
   13d48:	200004cc 	.word	0x200004cc
   13d4c:	000275e4 	.word	0x000275e4
   13d50:	000221d9 	.word	0x000221d9
   13d54:	00027bc0 	.word	0x00027bc0
   13d58:	0001367d 	.word	0x0001367d

00013d5c <configure_extint_channel>:
{
   13d5c:	b510      	push	{r4, lr}
   13d5e:	b084      	sub	sp, #16
    extint_chan_get_config_defaults(&config_extint_chan);
   13d60:	ac01      	add	r4, sp, #4
   13d62:	0020      	movs	r0, r4
   13d64:	4b07      	ldr	r3, [pc, #28]	; (13d84 <configure_extint_channel+0x28>)
   13d66:	4798      	blx	r3
    config_extint_chan.gpio_pin           = BUTTON_0_EIC_PIN;
   13d68:	2337      	movs	r3, #55	; 0x37
   13d6a:	9301      	str	r3, [sp, #4]
    config_extint_chan.gpio_pin_mux       = BUTTON_0_EIC_MUX;
   13d6c:	2300      	movs	r3, #0
   13d6e:	6063      	str	r3, [r4, #4]
    config_extint_chan.gpio_pin_pull      = EXTINT_PULL_UP;
   13d70:	3301      	adds	r3, #1
   13d72:	7223      	strb	r3, [r4, #8]
    config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   13d74:	3301      	adds	r3, #1
   13d76:	72e3      	strb	r3, [r4, #11]
    extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
   13d78:	0021      	movs	r1, r4
   13d7a:	2007      	movs	r0, #7
   13d7c:	4b02      	ldr	r3, [pc, #8]	; (13d88 <configure_extint_channel+0x2c>)
   13d7e:	4798      	blx	r3
}
   13d80:	b004      	add	sp, #16
   13d82:	bd10      	pop	{r4, pc}
   13d84:	0001d771 	.word	0x0001d771
   13d88:	0001d785 	.word	0x0001d785

00013d8c <configure_extint_callbacks>:
{
   13d8c:	b510      	push	{r4, lr}
    extint_register_callback(extint_detection_callback,
   13d8e:	2200      	movs	r2, #0
   13d90:	2107      	movs	r1, #7
   13d92:	4804      	ldr	r0, [pc, #16]	; (13da4 <configure_extint_callbacks+0x18>)
   13d94:	4b04      	ldr	r3, [pc, #16]	; (13da8 <configure_extint_callbacks+0x1c>)
   13d96:	4798      	blx	r3
    extint_chan_enable_callback(BUTTON_0_EIC_LINE,
   13d98:	2100      	movs	r1, #0
   13d9a:	2007      	movs	r0, #7
   13d9c:	4b03      	ldr	r3, [pc, #12]	; (13dac <configure_extint_callbacks+0x20>)
   13d9e:	4798      	blx	r3
}
   13da0:	bd10      	pop	{r4, pc}
   13da2:	46c0      	nop			; (mov r8, r8)
   13da4:	000134d5 	.word	0x000134d5
   13da8:	0001d62d 	.word	0x0001d62d
   13dac:	0001d659 	.word	0x0001d659

00013db0 <vWifiTask>:
 * Application entry point.
 *
 * \return program return value.
 */
void vWifiTask( void *pvParameters )
{
   13db0:	b5f0      	push	{r4, r5, r6, r7, lr}
   13db2:	46c6      	mov	lr, r8
   13db4:	b500      	push	{lr}
   13db6:	b092      	sub	sp, #72	; 0x48
	tstrWifiInitParam param;
	int8_t ret;
	vTaskDelay(100);
   13db8:	2064      	movs	r0, #100	; 0x64
   13dba:	4bc8      	ldr	r3, [pc, #800]	; (140dc <vWifiTask+0x32c>)
   13dbc:	4798      	blx	r3
	down_state = NOT_READY;
   13dbe:	2200      	movs	r2, #0
   13dc0:	4bc7      	ldr	r3, [pc, #796]	; (140e0 <vWifiTask+0x330>)
   13dc2:	701a      	strb	r2, [r3, #0]
	init_state();
	//Create buffers to send data
	xQueueWifiState = xQueueCreate( 5, sizeof( uint32_t ) );
   13dc4:	2104      	movs	r1, #4
   13dc6:	2005      	movs	r0, #5
   13dc8:	4dc6      	ldr	r5, [pc, #792]	; (140e4 <vWifiTask+0x334>)
   13dca:	47a8      	blx	r5
   13dcc:	4cc6      	ldr	r4, [pc, #792]	; (140e8 <vWifiTask+0x338>)
   13dce:	6020      	str	r0, [r4, #0]
	xQueueGameBuffer = xQueueCreate( 2, sizeof( struct GameDataPacket ) );
   13dd0:	2200      	movs	r2, #0
   13dd2:	2114      	movs	r1, #20
   13dd4:	2002      	movs	r0, #2
   13dd6:	47a8      	blx	r5
   13dd8:	4bc4      	ldr	r3, [pc, #784]	; (140ec <vWifiTask+0x33c>)
   13dda:	6018      	str	r0, [r3, #0]

	if(xQueueWifiState == NULL || xQueueGameBuffer == NULL)
   13ddc:	6823      	ldr	r3, [r4, #0]
   13dde:	2b00      	cmp	r3, #0
   13de0:	d040      	beq.n	13e64 <vWifiTask+0xb4>
   13de2:	2800      	cmp	r0, #0
   13de4:	d03e      	beq.n	13e64 <vWifiTask+0xb4>
	{
		SerialConsoleWriteString("ERROR Initializing Wifi Data queues!\r\n");
	}

	SerialConsoleWriteString("ESE516 - Wifi Init Code\r\n");
   13de6:	48c2      	ldr	r0, [pc, #776]	; (140f0 <vWifiTask+0x340>)
   13de8:	4bc2      	ldr	r3, [pc, #776]	; (140f4 <vWifiTask+0x344>)
   13dea:	4798      	blx	r3
	sw_timer_get_config_defaults(&swt_conf);
   13dec:	ac05      	add	r4, sp, #20
   13dee:	0020      	movs	r0, r4
   13df0:	4bc1      	ldr	r3, [pc, #772]	; (140f8 <vWifiTask+0x348>)
   13df2:	4798      	blx	r3
	sw_timer_init(&swt_module_inst, &swt_conf);
   13df4:	4dc1      	ldr	r5, [pc, #772]	; (140fc <vWifiTask+0x34c>)
   13df6:	0021      	movs	r1, r4
   13df8:	0028      	movs	r0, r5
   13dfa:	4bc1      	ldr	r3, [pc, #772]	; (14100 <vWifiTask+0x350>)
   13dfc:	4798      	blx	r3
	sw_timer_enable(&swt_module_inst);
   13dfe:	0028      	movs	r0, r5
   13e00:	4bc0      	ldr	r3, [pc, #768]	; (14104 <vWifiTask+0x354>)
   13e02:	4798      	blx	r3
	http_client_get_config_defaults(&httpc_conf);
   13e04:	0020      	movs	r0, r4
   13e06:	4bc0      	ldr	r3, [pc, #768]	; (14108 <vWifiTask+0x358>)
   13e08:	4798      	blx	r3
	httpc_conf.recv_buffer_size = MAIN_BUFFER_MAX_SIZE;
   13e0a:	2380      	movs	r3, #128	; 0x80
   13e0c:	009b      	lsls	r3, r3, #2
   13e0e:	6123      	str	r3, [r4, #16]
	httpc_conf.timer_inst = &swt_module_inst;
   13e10:	6065      	str	r5, [r4, #4]
	httpc_conf.port = 443;
   13e12:	23bc      	movs	r3, #188	; 0xbc
   13e14:	33ff      	adds	r3, #255	; 0xff
   13e16:	8023      	strh	r3, [r4, #0]
	httpc_conf.tls = 1;
   13e18:	3bbb      	subs	r3, #187	; 0xbb
   13e1a:	3bff      	subs	r3, #255	; 0xff
   13e1c:	70a3      	strb	r3, [r4, #2]
	ret = http_client_init(&http_client_module_inst, &httpc_conf);
   13e1e:	0021      	movs	r1, r4
   13e20:	48ba      	ldr	r0, [pc, #744]	; (1410c <vWifiTask+0x35c>)
   13e22:	4bbb      	ldr	r3, [pc, #748]	; (14110 <vWifiTask+0x360>)
   13e24:	4798      	blx	r3
   13e26:	1e02      	subs	r2, r0, #0
	if (ret < 0) {
   13e28:	db20      	blt.n	13e6c <vWifiTask+0xbc>
	http_client_register_callback(&http_client_module_inst, http_client_callback);
   13e2a:	49ba      	ldr	r1, [pc, #744]	; (14114 <vWifiTask+0x364>)
   13e2c:	48b7      	ldr	r0, [pc, #732]	; (1410c <vWifiTask+0x35c>)
   13e2e:	4bba      	ldr	r3, [pc, #744]	; (14118 <vWifiTask+0x368>)
   13e30:	4798      	blx	r3

	/* Initialize the HTTP client service. */
	configure_http_client();

	/* Initialize the MQTT service. */
	configure_mqtt();
   13e32:	4bba      	ldr	r3, [pc, #744]	; (1411c <vWifiTask+0x36c>)
   13e34:	4798      	blx	r3

	/* Initialize SD/MMC storage. */
	//init_storage();

	/*Initialize BUTTON 0 as an external interrupt*/
	configure_extint_channel();
   13e36:	4bba      	ldr	r3, [pc, #744]	; (14120 <vWifiTask+0x370>)
   13e38:	4798      	blx	r3
	configure_extint_callbacks();
   13e3a:	4bba      	ldr	r3, [pc, #744]	; (14124 <vWifiTask+0x374>)
   13e3c:	4798      	blx	r3

	
	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
   13e3e:	2218      	movs	r2, #24
   13e40:	2100      	movs	r1, #0
   13e42:	a80c      	add	r0, sp, #48	; 0x30
   13e44:	4bb8      	ldr	r3, [pc, #736]	; (14128 <vWifiTask+0x378>)
   13e46:	4798      	blx	r3

	nm_bsp_init();
   13e48:	4bb8      	ldr	r3, [pc, #736]	; (1412c <vWifiTask+0x37c>)
   13e4a:	4798      	blx	r3

	/* Initialize Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = wifi_cb;
   13e4c:	4bb8      	ldr	r3, [pc, #736]	; (14130 <vWifiTask+0x380>)
   13e4e:	930c      	str	r3, [sp, #48]	; 0x30
	ret = m2m_wifi_init(&param);
   13e50:	a80c      	add	r0, sp, #48	; 0x30
   13e52:	4bb8      	ldr	r3, [pc, #736]	; (14134 <vWifiTask+0x384>)
   13e54:	4798      	blx	r3
   13e56:	1e02      	subs	r2, r0, #0
	if (M2M_SUCCESS != ret) {
   13e58:	d00d      	beq.n	13e76 <vWifiTask+0xc6>
		LogMessage(LOG_DEBUG_LVL,"main: m2m_wifi_init call error! (res %d)\r\n", ret);
   13e5a:	49b7      	ldr	r1, [pc, #732]	; (14138 <vWifiTask+0x388>)
   13e5c:	2001      	movs	r0, #1
   13e5e:	4bb7      	ldr	r3, [pc, #732]	; (1413c <vWifiTask+0x38c>)
   13e60:	4798      	blx	r3
   13e62:	e7fe      	b.n	13e62 <vWifiTask+0xb2>
		SerialConsoleWriteString("ERROR Initializing Wifi Data queues!\r\n");
   13e64:	48b6      	ldr	r0, [pc, #728]	; (14140 <vWifiTask+0x390>)
   13e66:	4ba3      	ldr	r3, [pc, #652]	; (140f4 <vWifiTask+0x344>)
   13e68:	4798      	blx	r3
   13e6a:	e7bc      	b.n	13de6 <vWifiTask+0x36>
		LogMessage(LOG_DEBUG_LVL,"configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
   13e6c:	49b5      	ldr	r1, [pc, #724]	; (14144 <vWifiTask+0x394>)
   13e6e:	2001      	movs	r0, #1
   13e70:	4bb2      	ldr	r3, [pc, #712]	; (1413c <vWifiTask+0x38c>)
   13e72:	4798      	blx	r3
   13e74:	e7fe      	b.n	13e74 <vWifiTask+0xc4>
		while (1) {
				}
		}

	LogMessage(LOG_DEBUG_LVL,"main: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
   13e76:	4cb4      	ldr	r4, [pc, #720]	; (14148 <vWifiTask+0x398>)
   13e78:	0022      	movs	r2, r4
   13e7a:	49b4      	ldr	r1, [pc, #720]	; (1414c <vWifiTask+0x39c>)
   13e7c:	2001      	movs	r0, #1
   13e7e:	4baf      	ldr	r3, [pc, #700]	; (1413c <vWifiTask+0x38c>)
   13e80:	4798      	blx	r3
	
	//Re-enable socket for MQTT Transfer
	socketInit();
   13e82:	4bb3      	ldr	r3, [pc, #716]	; (14150 <vWifiTask+0x3a0>)
   13e84:	4798      	blx	r3
	registerSocketCallback(socket_event_handler, socket_resolve_handler);
   13e86:	49b3      	ldr	r1, [pc, #716]	; (14154 <vWifiTask+0x3a4>)
   13e88:	48b3      	ldr	r0, [pc, #716]	; (14158 <vWifiTask+0x3a8>)
   13e8a:	4bb4      	ldr	r3, [pc, #720]	; (1415c <vWifiTask+0x3ac>)
   13e8c:	4798      	blx	r3

	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   13e8e:	23ff      	movs	r3, #255	; 0xff
   13e90:	9300      	str	r3, [sp, #0]
   13e92:	4bb3      	ldr	r3, [pc, #716]	; (14160 <vWifiTask+0x3b0>)
   13e94:	2202      	movs	r2, #2
   13e96:	210d      	movs	r1, #13
   13e98:	0020      	movs	r0, r4
   13e9a:	4cb2      	ldr	r4, [pc, #712]	; (14164 <vWifiTask+0x3b4>)
   13e9c:	47a0      	blx	r4
	return ((down_state & mask) != 0);
   13e9e:	4b90      	ldr	r3, [pc, #576]	; (140e0 <vWifiTask+0x330>)
   13ea0:	781b      	ldrb	r3, [r3, #0]

	while (!(is_state_set(WIFI_CONNECTED)))
   13ea2:	079b      	lsls	r3, r3, #30
   13ea4:	d40a      	bmi.n	13ebc <vWifiTask+0x10c>
	{
			/* Handle pending events from network controller. */
		m2m_wifi_handle_events(NULL);
   13ea6:	4eb0      	ldr	r6, [pc, #704]	; (14168 <vWifiTask+0x3b8>)
		/* Checks the timer timeout. */
		sw_timer_task(&swt_module_inst);
   13ea8:	4d94      	ldr	r5, [pc, #592]	; (140fc <vWifiTask+0x34c>)
   13eaa:	4cb0      	ldr	r4, [pc, #704]	; (1416c <vWifiTask+0x3bc>)
		m2m_wifi_handle_events(NULL);
   13eac:	2000      	movs	r0, #0
   13eae:	47b0      	blx	r6
		sw_timer_task(&swt_module_inst);
   13eb0:	0028      	movs	r0, r5
   13eb2:	47a0      	blx	r4
	return ((down_state & mask) != 0);
   13eb4:	4b8a      	ldr	r3, [pc, #552]	; (140e0 <vWifiTask+0x330>)
   13eb6:	781b      	ldrb	r3, [r3, #0]
	while (!(is_state_set(WIFI_CONNECTED)))
   13eb8:	079b      	lsls	r3, r3, #30
   13eba:	d5f7      	bpl.n	13eac <vWifiTask+0xfc>
	}

	vTaskDelay(1000);
   13ebc:	20fa      	movs	r0, #250	; 0xfa
   13ebe:	0080      	lsls	r0, r0, #2
   13ec0:	4b86      	ldr	r3, [pc, #536]	; (140dc <vWifiTask+0x32c>)
   13ec2:	4798      	blx	r3
	
	wifiStateMachine = WIFI_MQTT_HANDLE;
   13ec4:	2201      	movs	r2, #1
   13ec6:	4baa      	ldr	r3, [pc, #680]	; (14170 <vWifiTask+0x3c0>)
   13ec8:	701a      	strb	r2, [r3, #0]
	while (1) {

	switch(wifiStateMachine)
   13eca:	001e      	movs	r6, r3
	m2m_wifi_handle_events(NULL);
   13ecc:	4ba6      	ldr	r3, [pc, #664]	; (14168 <vWifiTask+0x3b8>)
   13ece:	4698      	mov	r8, r3
   13ed0:	e026      	b.n	13f20 <vWifiTask+0x170>
	switch(wifiStateMachine)
   13ed2:	2b00      	cmp	r3, #0
   13ed4:	d000      	beq.n	13ed8 <vWifiTask+0x128>
   13ed6:	e0f8      	b.n	140ca <vWifiTask+0x31a>
	socketDeinit();
   13ed8:	4ba6      	ldr	r3, [pc, #664]	; (14174 <vWifiTask+0x3c4>)
   13eda:	4798      	blx	r3
	configure_mqtt();
   13edc:	4b8f      	ldr	r3, [pc, #572]	; (1411c <vWifiTask+0x36c>)
   13ede:	4798      	blx	r3
	registerSocketCallback(socket_event_handler, socket_resolve_handler);
   13ee0:	499c      	ldr	r1, [pc, #624]	; (14154 <vWifiTask+0x3a4>)
   13ee2:	489d      	ldr	r0, [pc, #628]	; (14158 <vWifiTask+0x3a8>)
   13ee4:	4b9d      	ldr	r3, [pc, #628]	; (1415c <vWifiTask+0x3ac>)
   13ee6:	4798      	blx	r3
	socketInit();
   13ee8:	4b99      	ldr	r3, [pc, #612]	; (14150 <vWifiTask+0x3a0>)
   13eea:	4798      	blx	r3
	if(!(mqtt_inst.isConnected))
   13eec:	2334      	movs	r3, #52	; 0x34
   13eee:	4aa2      	ldr	r2, [pc, #648]	; (14178 <vWifiTask+0x3c8>)
   13ef0:	5cd3      	ldrb	r3, [r2, r3]
   13ef2:	2b00      	cmp	r3, #0
   13ef4:	d052      	beq.n	13f9c <vWifiTask+0x1ec>
		LogMessage(LOG_DEBUG_LVL,"Connected to MQTT Broker!\r\n");
   13ef6:	49a1      	ldr	r1, [pc, #644]	; (1417c <vWifiTask+0x3cc>)
   13ef8:	2001      	movs	r0, #1
   13efa:	4b90      	ldr	r3, [pc, #576]	; (1413c <vWifiTask+0x38c>)
   13efc:	4798      	blx	r3
	wifiStateMachine = WIFI_MQTT_HANDLE;
   13efe:	2201      	movs	r2, #1
   13f00:	4b9b      	ldr	r3, [pc, #620]	; (14170 <vWifiTask+0x3c0>)
   13f02:	701a      	strb	r2, [r3, #0]
			wifiStateMachine = WIFI_MQTT_INIT;
			break;
		}
	}
	//Check if a new state was called
	uint8_t DataToReceive = 0;
   13f04:	a905      	add	r1, sp, #20
   13f06:	2300      	movs	r3, #0
   13f08:	700b      	strb	r3, [r1, #0]
	if (pdPASS == xQueueReceive( xQueueWifiState, &DataToReceive, 0 ))
   13f0a:	4b77      	ldr	r3, [pc, #476]	; (140e8 <vWifiTask+0x338>)
   13f0c:	6818      	ldr	r0, [r3, #0]
   13f0e:	2200      	movs	r2, #0
   13f10:	4b9b      	ldr	r3, [pc, #620]	; (14180 <vWifiTask+0x3d0>)
   13f12:	4798      	blx	r3
   13f14:	2801      	cmp	r0, #1
   13f16:	d100      	bne.n	13f1a <vWifiTask+0x16a>
   13f18:	e0db      	b.n	140d2 <vWifiTask+0x322>
	{
		wifiStateMachine = DataToReceive; // Update new state
	}
	
	vTaskDelay(100);	
   13f1a:	2064      	movs	r0, #100	; 0x64
   13f1c:	4b6f      	ldr	r3, [pc, #444]	; (140dc <vWifiTask+0x32c>)
   13f1e:	4798      	blx	r3
	switch(wifiStateMachine)
   13f20:	7833      	ldrb	r3, [r6, #0]
   13f22:	2b01      	cmp	r3, #1
   13f24:	d04b      	beq.n	13fbe <vWifiTask+0x20e>
   13f26:	b25a      	sxtb	r2, r3
   13f28:	2a01      	cmp	r2, #1
   13f2a:	ddd2      	ble.n	13ed2 <vWifiTask+0x122>
   13f2c:	2b02      	cmp	r3, #2
   13f2e:	d100      	bne.n	13f32 <vWifiTask+0x182>
   13f30:	e09c      	b.n	1406c <vWifiTask+0x2bc>
   13f32:	2b03      	cmp	r3, #3
   13f34:	d000      	beq.n	13f38 <vWifiTask+0x188>
   13f36:	e0c8      	b.n	140ca <vWifiTask+0x31a>
	return ((down_state & mask) != 0);
   13f38:	4b69      	ldr	r3, [pc, #420]	; (140e0 <vWifiTask+0x330>)
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   13f3a:	781b      	ldrb	r3, [r3, #0]
   13f3c:	2230      	movs	r2, #48	; 0x30
   13f3e:	421a      	tst	r2, r3
   13f40:	d10b      	bne.n	13f5a <vWifiTask+0x1aa>
		m2m_wifi_handle_events(NULL);
   13f42:	4d89      	ldr	r5, [pc, #548]	; (14168 <vWifiTask+0x3b8>)
		sw_timer_task(&swt_module_inst);
   13f44:	4c6d      	ldr	r4, [pc, #436]	; (140fc <vWifiTask+0x34c>)
   13f46:	4f89      	ldr	r7, [pc, #548]	; (1416c <vWifiTask+0x3bc>)
		m2m_wifi_handle_events(NULL);
   13f48:	2000      	movs	r0, #0
   13f4a:	47a8      	blx	r5
		sw_timer_task(&swt_module_inst);
   13f4c:	0020      	movs	r0, r4
   13f4e:	47b8      	blx	r7
	return ((down_state & mask) != 0);
   13f50:	4b63      	ldr	r3, [pc, #396]	; (140e0 <vWifiTask+0x330>)
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   13f52:	781b      	ldrb	r3, [r3, #0]
   13f54:	2230      	movs	r2, #48	; 0x30
   13f56:	421a      	tst	r2, r3
   13f58:	d0f6      	beq.n	13f48 <vWifiTask+0x198>
	socketDeinit();
   13f5a:	4b86      	ldr	r3, [pc, #536]	; (14174 <vWifiTask+0x3c4>)
   13f5c:	4798      	blx	r3
	vTaskDelay(1000);
   13f5e:	20fa      	movs	r0, #250	; 0xfa
   13f60:	0080      	lsls	r0, r0, #2
   13f62:	4b5e      	ldr	r3, [pc, #376]	; (140dc <vWifiTask+0x32c>)
   13f64:	4798      	blx	r3
	do_download_flag = false;
   13f66:	2200      	movs	r2, #0
   13f68:	4b86      	ldr	r3, [pc, #536]	; (14184 <vWifiTask+0x3d4>)
   13f6a:	701a      	strb	r2, [r3, #0]
	char test_file_name[] = "0:Update.txt";
   13f6c:	a905      	add	r1, sp, #20
   13f6e:	4b86      	ldr	r3, [pc, #536]	; (14188 <vWifiTask+0x3d8>)
   13f70:	000a      	movs	r2, r1
   13f72:	cb31      	ldmia	r3!, {r0, r4, r5}
   13f74:	c231      	stmia	r2!, {r0, r4, r5}
   13f76:	781b      	ldrb	r3, [r3, #0]
   13f78:	7013      	strb	r3, [r2, #0]
	FRESULT res = f_open(&file_object,
   13f7a:	220a      	movs	r2, #10
   13f7c:	4883      	ldr	r0, [pc, #524]	; (1418c <vWifiTask+0x3dc>)
   13f7e:	4b84      	ldr	r3, [pc, #528]	; (14190 <vWifiTask+0x3e0>)
   13f80:	4798      	blx	r3
	if (res != FR_OK)
   13f82:	2800      	cmp	r0, #0
   13f84:	d000      	beq.n	13f88 <vWifiTask+0x1d8>
   13f86:	e09a      	b.n	140be <vWifiTask+0x30e>
		SerialConsoleWriteString("Update.txt added!\r\n");
   13f88:	4882      	ldr	r0, [pc, #520]	; (14194 <vWifiTask+0x3e4>)
   13f8a:	4b5a      	ldr	r3, [pc, #360]	; (140f4 <vWifiTask+0x344>)
   13f8c:	4798      	blx	r3
	f_close(&file_object);
   13f8e:	487f      	ldr	r0, [pc, #508]	; (1418c <vWifiTask+0x3dc>)
   13f90:	4b81      	ldr	r3, [pc, #516]	; (14198 <vWifiTask+0x3e8>)
   13f92:	4798      	blx	r3
	wifiStateMachine = WIFI_MQTT_INIT;	
   13f94:	2200      	movs	r2, #0
   13f96:	4b76      	ldr	r3, [pc, #472]	; (14170 <vWifiTask+0x3c0>)
   13f98:	701a      	strb	r2, [r3, #0]
   13f9a:	e7b3      	b.n	13f04 <vWifiTask+0x154>
		if (mqtt_connect(&mqtt_inst, main_mqtt_broker))
   13f9c:	497f      	ldr	r1, [pc, #508]	; (1419c <vWifiTask+0x3ec>)
   13f9e:	0010      	movs	r0, r2
   13fa0:	4b7f      	ldr	r3, [pc, #508]	; (141a0 <vWifiTask+0x3f0>)
   13fa2:	4798      	blx	r3
   13fa4:	2800      	cmp	r0, #0
   13fa6:	d105      	bne.n	13fb4 <vWifiTask+0x204>
	if(mqtt_inst.isConnected)
   13fa8:	2334      	movs	r3, #52	; 0x34
   13faa:	4a73      	ldr	r2, [pc, #460]	; (14178 <vWifiTask+0x3c8>)
   13fac:	5cd3      	ldrb	r3, [r2, r3]
   13fae:	2b00      	cmp	r3, #0
   13fb0:	d0a5      	beq.n	13efe <vWifiTask+0x14e>
   13fb2:	e7a0      	b.n	13ef6 <vWifiTask+0x146>
			LogMessage(LOG_DEBUG_LVL,"Error connecting to MQTT Broker!\r\n");
   13fb4:	497b      	ldr	r1, [pc, #492]	; (141a4 <vWifiTask+0x3f4>)
   13fb6:	2001      	movs	r0, #1
   13fb8:	4b60      	ldr	r3, [pc, #384]	; (1413c <vWifiTask+0x38c>)
   13fba:	4798      	blx	r3
   13fbc:	e7f4      	b.n	13fa8 <vWifiTask+0x1f8>
	m2m_wifi_handle_events(NULL);
   13fbe:	2000      	movs	r0, #0
   13fc0:	47c0      	blx	r8
	sw_timer_task(&swt_module_inst);
   13fc2:	484e      	ldr	r0, [pc, #312]	; (140fc <vWifiTask+0x34c>)
   13fc4:	4b69      	ldr	r3, [pc, #420]	; (1416c <vWifiTask+0x3bc>)
   13fc6:	4798      	blx	r3
	if  (pdPASS == xQueueReceive( xQueueGameBuffer , &gamePacket, 0 ))
   13fc8:	4b48      	ldr	r3, [pc, #288]	; (140ec <vWifiTask+0x33c>)
   13fca:	6818      	ldr	r0, [r3, #0]
   13fcc:	2200      	movs	r2, #0
   13fce:	a905      	add	r1, sp, #20
   13fd0:	4b6b      	ldr	r3, [pc, #428]	; (14180 <vWifiTask+0x3d0>)
   13fd2:	4798      	blx	r3
   13fd4:	2801      	cmp	r0, #1
   13fd6:	d009      	beq.n	13fec <vWifiTask+0x23c>
	if(mqtt_inst.isConnected)
   13fd8:	2334      	movs	r3, #52	; 0x34
   13fda:	4a67      	ldr	r2, [pc, #412]	; (14178 <vWifiTask+0x3c8>)
   13fdc:	5cd3      	ldrb	r3, [r2, r3]
   13fde:	2b00      	cmp	r3, #0
   13fe0:	d090      	beq.n	13f04 <vWifiTask+0x154>
	mqtt_yield(&mqtt_inst, 100);	
   13fe2:	2164      	movs	r1, #100	; 0x64
   13fe4:	0010      	movs	r0, r2
   13fe6:	4b70      	ldr	r3, [pc, #448]	; (141a8 <vWifiTask+0x3f8>)
   13fe8:	4798      	blx	r3
   13fea:	e78b      	b.n	13f04 <vWifiTask+0x154>
		snprintf(mqtt_msg, 63, "{\"game\":[");
   13fec:	4a6f      	ldr	r2, [pc, #444]	; (141ac <vWifiTask+0x3fc>)
   13fee:	4b70      	ldr	r3, [pc, #448]	; (141b0 <vWifiTask+0x400>)
   13ff0:	cb03      	ldmia	r3!, {r0, r1}
   13ff2:	c203      	stmia	r2!, {r0, r1}
   13ff4:	881b      	ldrh	r3, [r3, #0]
   13ff6:	8013      	strh	r3, [r2, #0]
				if(gamePacket.game[iter] != 0xFF)
   13ff8:	ab05      	add	r3, sp, #20
   13ffa:	781f      	ldrb	r7, [r3, #0]
   13ffc:	2fff      	cmp	r7, #255	; 0xff
   13ffe:	d018      	beq.n	14032 <vWifiTask+0x282>
   14000:	2400      	movs	r4, #0
					snprintf(numGame, 3, "%d", gamePacket.game[iter]);
   14002:	4d6c      	ldr	r5, [pc, #432]	; (141b4 <vWifiTask+0x404>)
   14004:	e005      	b.n	14012 <vWifiTask+0x262>
						snprintf(numGame, 5, ",");
   14006:	a903      	add	r1, sp, #12
   14008:	232c      	movs	r3, #44	; 0x2c
   1400a:	800b      	strh	r3, [r1, #0]
						strcat(mqtt_msg, numGame);
   1400c:	4867      	ldr	r0, [pc, #412]	; (141ac <vWifiTask+0x3fc>)
   1400e:	4b6a      	ldr	r3, [pc, #424]	; (141b8 <vWifiTask+0x408>)
   14010:	4798      	blx	r3
					snprintf(numGame, 3, "%d", gamePacket.game[iter]);
   14012:	003b      	movs	r3, r7
   14014:	4a69      	ldr	r2, [pc, #420]	; (141bc <vWifiTask+0x40c>)
   14016:	2103      	movs	r1, #3
   14018:	a803      	add	r0, sp, #12
   1401a:	47a8      	blx	r5
					strcat(mqtt_msg, numGame);
   1401c:	a903      	add	r1, sp, #12
   1401e:	4863      	ldr	r0, [pc, #396]	; (141ac <vWifiTask+0x3fc>)
   14020:	4b65      	ldr	r3, [pc, #404]	; (141b8 <vWifiTask+0x408>)
   14022:	4798      	blx	r3
					if(gamePacket.game[iter+1] != 0xFF && iter+1 <GAME_SIZE)
   14024:	3401      	adds	r4, #1
   14026:	ab05      	add	r3, sp, #20
   14028:	5ce7      	ldrb	r7, [r4, r3]
   1402a:	2fff      	cmp	r7, #255	; 0xff
   1402c:	d001      	beq.n	14032 <vWifiTask+0x282>
   1402e:	2c14      	cmp	r4, #20
   14030:	d1e9      	bne.n	14006 <vWifiTask+0x256>
		strcat(mqtt_msg, "]}");
   14032:	4c5e      	ldr	r4, [pc, #376]	; (141ac <vWifiTask+0x3fc>)
   14034:	0020      	movs	r0, r4
   14036:	4f62      	ldr	r7, [pc, #392]	; (141c0 <vWifiTask+0x410>)
   14038:	47b8      	blx	r7
   1403a:	1820      	adds	r0, r4, r0
   1403c:	2203      	movs	r2, #3
   1403e:	4961      	ldr	r1, [pc, #388]	; (141c4 <vWifiTask+0x414>)
   14040:	4b61      	ldr	r3, [pc, #388]	; (141c8 <vWifiTask+0x418>)
   14042:	4798      	blx	r3
		LogMessage(LOG_DEBUG_LVL,mqtt_msg);LogMessage(LOG_DEBUG_LVL,"\r\n");
   14044:	0021      	movs	r1, r4
   14046:	2001      	movs	r0, #1
   14048:	4d3c      	ldr	r5, [pc, #240]	; (1413c <vWifiTask+0x38c>)
   1404a:	47a8      	blx	r5
   1404c:	495f      	ldr	r1, [pc, #380]	; (141cc <vWifiTask+0x41c>)
   1404e:	2001      	movs	r0, #1
   14050:	47a8      	blx	r5
		mqtt_publish(&mqtt_inst, GAME_TOPIC_OUT, mqtt_msg, strlen(mqtt_msg), 1, 0);
   14052:	0020      	movs	r0, r4
   14054:	47b8      	blx	r7
   14056:	0003      	movs	r3, r0
   14058:	2200      	movs	r2, #0
   1405a:	9201      	str	r2, [sp, #4]
   1405c:	3201      	adds	r2, #1
   1405e:	9200      	str	r2, [sp, #0]
   14060:	0022      	movs	r2, r4
   14062:	495b      	ldr	r1, [pc, #364]	; (141d0 <vWifiTask+0x420>)
   14064:	4844      	ldr	r0, [pc, #272]	; (14178 <vWifiTask+0x3c8>)
   14066:	4c5b      	ldr	r4, [pc, #364]	; (141d4 <vWifiTask+0x424>)
   14068:	47a0      	blx	r4
   1406a:	e7b5      	b.n	13fd8 <vWifiTask+0x228>
	if(mqtt_disconnect(&mqtt_inst, main_mqtt_broker))
   1406c:	494b      	ldr	r1, [pc, #300]	; (1419c <vWifiTask+0x3ec>)
   1406e:	4842      	ldr	r0, [pc, #264]	; (14178 <vWifiTask+0x3c8>)
   14070:	4b59      	ldr	r3, [pc, #356]	; (141d8 <vWifiTask+0x428>)
   14072:	4798      	blx	r3
   14074:	2800      	cmp	r0, #0
   14076:	d11d      	bne.n	140b4 <vWifiTask+0x304>
	while((mqtt_inst.isConnected))
   14078:	2334      	movs	r3, #52	; 0x34
   1407a:	4a3f      	ldr	r2, [pc, #252]	; (14178 <vWifiTask+0x3c8>)
   1407c:	5cd3      	ldrb	r3, [r2, r3]
   1407e:	2b00      	cmp	r3, #0
   14080:	d007      	beq.n	14092 <vWifiTask+0x2e2>
		m2m_wifi_handle_events(NULL);
   14082:	4d39      	ldr	r5, [pc, #228]	; (14168 <vWifiTask+0x3b8>)
	while((mqtt_inst.isConnected))
   14084:	0017      	movs	r7, r2
   14086:	2434      	movs	r4, #52	; 0x34
		m2m_wifi_handle_events(NULL);
   14088:	2000      	movs	r0, #0
   1408a:	47a8      	blx	r5
	while((mqtt_inst.isConnected))
   1408c:	5d3b      	ldrb	r3, [r7, r4]
   1408e:	2b00      	cmp	r3, #0
   14090:	d1fa      	bne.n	14088 <vWifiTask+0x2d8>
	socketDeinit();
   14092:	4b38      	ldr	r3, [pc, #224]	; (14174 <vWifiTask+0x3c4>)
   14094:	4798      	blx	r3
	do_download_flag = true;
   14096:	2201      	movs	r2, #1
   14098:	4b3a      	ldr	r3, [pc, #232]	; (14184 <vWifiTask+0x3d4>)
   1409a:	701a      	strb	r2, [r3, #0]
	registerSocketCallback(socket_cb, resolve_cb);
   1409c:	494f      	ldr	r1, [pc, #316]	; (141dc <vWifiTask+0x42c>)
   1409e:	4850      	ldr	r0, [pc, #320]	; (141e0 <vWifiTask+0x430>)
   140a0:	4b2e      	ldr	r3, [pc, #184]	; (1415c <vWifiTask+0x3ac>)
   140a2:	4798      	blx	r3
	socketInit();
   140a4:	4b2a      	ldr	r3, [pc, #168]	; (14150 <vWifiTask+0x3a0>)
   140a6:	4798      	blx	r3
	start_download();
   140a8:	4b4e      	ldr	r3, [pc, #312]	; (141e4 <vWifiTask+0x434>)
   140aa:	4798      	blx	r3
	wifiStateMachine = WIFI_DOWNLOAD_HANDLE;
   140ac:	2203      	movs	r2, #3
   140ae:	4b30      	ldr	r3, [pc, #192]	; (14170 <vWifiTask+0x3c0>)
   140b0:	701a      	strb	r2, [r3, #0]
   140b2:	e727      	b.n	13f04 <vWifiTask+0x154>
		LogMessage(LOG_DEBUG_LVL,"Error connecting to MQTT Broker!\r\n");
   140b4:	493b      	ldr	r1, [pc, #236]	; (141a4 <vWifiTask+0x3f4>)
   140b6:	2001      	movs	r0, #1
   140b8:	4b20      	ldr	r3, [pc, #128]	; (1413c <vWifiTask+0x38c>)
   140ba:	4798      	blx	r3
   140bc:	e7dc      	b.n	14078 <vWifiTask+0x2c8>
		LogMessage(LOG_INFO_LVL ,"[FAIL] res %d\r\n", res);
   140be:	0002      	movs	r2, r0
   140c0:	4949      	ldr	r1, [pc, #292]	; (141e8 <vWifiTask+0x438>)
   140c2:	2000      	movs	r0, #0
   140c4:	4b1d      	ldr	r3, [pc, #116]	; (1413c <vWifiTask+0x38c>)
   140c6:	4798      	blx	r3
   140c8:	e761      	b.n	13f8e <vWifiTask+0x1de>
			wifiStateMachine = WIFI_MQTT_INIT;
   140ca:	2200      	movs	r2, #0
   140cc:	4b28      	ldr	r3, [pc, #160]	; (14170 <vWifiTask+0x3c0>)
   140ce:	701a      	strb	r2, [r3, #0]
			break;
   140d0:	e718      	b.n	13f04 <vWifiTask+0x154>
		wifiStateMachine = DataToReceive; // Update new state
   140d2:	ab05      	add	r3, sp, #20
   140d4:	781a      	ldrb	r2, [r3, #0]
   140d6:	4b26      	ldr	r3, [pc, #152]	; (14170 <vWifiTask+0x3c0>)
   140d8:	701a      	strb	r2, [r3, #0]
   140da:	e71e      	b.n	13f1a <vWifiTask+0x16a>
   140dc:	000181d5 	.word	0x000181d5
   140e0:	200004cd 	.word	0x200004cd
   140e4:	00016c0d 	.word	0x00016c0d
   140e8:	20000940 	.word	0x20000940
   140ec:	2000093c 	.word	0x2000093c
   140f0:	00027a0c 	.word	0x00027a0c
   140f4:	0001904d 	.word	0x0001904d
   140f8:	00023c35 	.word	0x00023c35
   140fc:	20004230 	.word	0x20004230
   14100:	00023c41 	.word	0x00023c41
   14104:	00023ced 	.word	0x00023ced
   14108:	00022c4d 	.word	0x00022c4d
   1410c:	20004288 	.word	0x20004288
   14110:	00022c75 	.word	0x00022c75
   14114:	00013b5d 	.word	0x00013b5d
   14118:	00022d29 	.word	0x00022d29
   1411c:	00013701 	.word	0x00013701
   14120:	00013d5d 	.word	0x00013d5d
   14124:	00013d8d 	.word	0x00013d8d
   14128:	00025d0f 	.word	0x00025d0f
   1412c:	0001a171 	.word	0x0001a171
   14130:	00013c55 	.word	0x00013c55
   14134:	0001b089 	.word	0x0001b089
   14138:	00027a70 	.word	0x00027a70
   1413c:	000190fd 	.word	0x000190fd
   14140:	000279e4 	.word	0x000279e4
   14144:	00027a28 	.word	0x00027a28
   14148:	00027b88 	.word	0x00027b88
   1414c:	00027a9c 	.word	0x00027a9c
   14150:	0001cef9 	.word	0x0001cef9
   14154:	00013665 	.word	0x00013665
   14158:	00013671 	.word	0x00013671
   1415c:	0001cf79 	.word	0x0001cf79
   14160:	00027b74 	.word	0x00027b74
   14164:	0001b42d 	.word	0x0001b42d
   14168:	0001b1b5 	.word	0x0001b1b5
   1416c:	00023d75 	.word	0x00023d75
   14170:	20000938 	.word	0x20000938
   14174:	0001cf3d 	.word	0x0001cf3d
   14178:	200004fc 	.word	0x200004fc
   1417c:	00027ac0 	.word	0x00027ac0
   14180:	000173e5 	.word	0x000173e5
   14184:	200004cc 	.word	0x200004cc
   14188:	00027b20 	.word	0x00027b20
   1418c:	200004d0 	.word	0x200004d0
   14190:	00021141 	.word	0x00021141
   14194:	00027b0c 	.word	0x00027b0c
   14198:	0002158d 	.word	0x0002158d
   1419c:	000275e4 	.word	0x000275e4
   141a0:	000221d9 	.word	0x000221d9
   141a4:	00027bc0 	.word	0x00027bc0
   141a8:	0002232d 	.word	0x0002232d
   141ac:	20000018 	.word	0x20000018
   141b0:	000273d4 	.word	0x000273d4
   141b4:	00025f69 	.word	0x00025f69
   141b8:	0002604d 	.word	0x0002604d
   141bc:	00027adc 	.word	0x00027adc
   141c0:	000260c7 	.word	0x000260c7
   141c4:	00027ae0 	.word	0x00027ae0
   141c8:	00025cd9 	.word	0x00025cd9
   141cc:	00027bfc 	.word	0x00027bfc
   141d0:	00027ae4 	.word	0x00027ae4
   141d4:	000222cd 	.word	0x000222cd
   141d8:	0002229d 	.word	0x0002229d
   141dc:	00013871 	.word	0x00013871
   141e0:	000138b1 	.word	0x000138b1
   141e4:	0001367d 	.word	0x0001367d
   141e8:	00027afc 	.word	0x00027afc

000141ec <WifiHandlerSetState>:
	return 0;
}


void WifiHandlerSetState(uint8_t state)
{
   141ec:	b510      	push	{r4, lr}
   141ee:	b082      	sub	sp, #8
   141f0:	466b      	mov	r3, sp
   141f2:	71d8      	strb	r0, [r3, #7]
	if( state <= WIFI_DOWNLOAD_HANDLE){
   141f4:	2803      	cmp	r0, #3
   141f6:	d901      	bls.n	141fc <WifiHandlerSetState+0x10>
		xQueueSend( xQueueWifiState, &state, ( TickType_t ) 10 );
	}
}
   141f8:	b002      	add	sp, #8
   141fa:	bd10      	pop	{r4, pc}
		xQueueSend( xQueueWifiState, &state, ( TickType_t ) 10 );
   141fc:	4b04      	ldr	r3, [pc, #16]	; (14210 <WifiHandlerSetState+0x24>)
   141fe:	6818      	ldr	r0, [r3, #0]
   14200:	2300      	movs	r3, #0
   14202:	220a      	movs	r2, #10
   14204:	4669      	mov	r1, sp
   14206:	3107      	adds	r1, #7
   14208:	4c02      	ldr	r4, [pc, #8]	; (14214 <WifiHandlerSetState+0x28>)
   1420a:	47a0      	blx	r4
}
   1420c:	e7f4      	b.n	141f8 <WifiHandlerSetState+0xc>
   1420e:	46c0      	nop			; (mov r8, r8)
   14210:	20000940 	.word	0x20000940
   14214:	00016d49 	.word	0x00016d49

00014218 <WifiAddGameDataToQueue>:
* @return		Returns pdTrue if data can be added to queue, pdFalse if queue is full
* @note         

*****************************************************************************/
int WifiAddGameDataToQueue(struct GameDataPacket *game)
{
   14218:	b510      	push	{r4, lr}
   1421a:	0001      	movs	r1, r0
	int error = xQueueSend(xQueueGameBuffer , game, ( TickType_t ) 10);
   1421c:	4b03      	ldr	r3, [pc, #12]	; (1422c <WifiAddGameDataToQueue+0x14>)
   1421e:	6818      	ldr	r0, [r3, #0]
   14220:	2300      	movs	r3, #0
   14222:	220a      	movs	r2, #10
   14224:	4c02      	ldr	r4, [pc, #8]	; (14230 <WifiAddGameDataToQueue+0x18>)
   14226:	47a0      	blx	r4
	return error;
   14228:	bd10      	pop	{r4, pc}
   1422a:	46c0      	nop			; (mov r8, r8)
   1422c:	2000093c 	.word	0x2000093c
   14230:	00016d49 	.word	0x00016d49

00014234 <I2cSensorsTxComplete>:
				and is currently waiting for a notification that it has finished.
 * @param[in]   i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
 * @return      This function is a callback, and it is registered as such when we send an I2C transmission on this I2C bus.
 * @note        
 *****************************************************************************/
void I2cSensorsTxComplete(struct i2c_master_module *const module){
   14234:	b510      	push	{r4, lr}
   14236:	b082      	sub	sp, #8
	
	I2cSensorBusState.i2cState = I2C_BUS_READY;
	I2cSensorBusState.rxDoneFlag = true;			
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   14238:	2400      	movs	r4, #0
   1423a:	9401      	str	r4, [sp, #4]
	
	xSemaphoreGiveFromISR( sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken );
   1423c:	4b07      	ldr	r3, [pc, #28]	; (1425c <I2cSensorsTxComplete+0x28>)
   1423e:	6818      	ldr	r0, [r3, #0]
   14240:	a901      	add	r1, sp, #4
   14242:	4b07      	ldr	r3, [pc, #28]	; (14260 <I2cSensorsTxComplete+0x2c>)
   14244:	4798      	blx	r3
	sensorTransmitError = false;
   14246:	4b07      	ldr	r3, [pc, #28]	; (14264 <I2cSensorsTxComplete+0x30>)
   14248:	701c      	strb	r4, [r3, #0]
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
   1424a:	9b01      	ldr	r3, [sp, #4]
   1424c:	2b00      	cmp	r3, #0
   1424e:	d003      	beq.n	14258 <I2cSensorsTxComplete+0x24>
   14250:	2280      	movs	r2, #128	; 0x80
   14252:	0552      	lsls	r2, r2, #21
   14254:	4b04      	ldr	r3, [pc, #16]	; (14268 <I2cSensorsTxComplete+0x34>)
   14256:	601a      	str	r2, [r3, #0]
}
   14258:	b002      	add	sp, #8
   1425a:	bd10      	pop	{r4, pc}
   1425c:	2000439c 	.word	0x2000439c
   14260:	000173d5 	.word	0x000173d5
   14264:	20000944 	.word	0x20000944
   14268:	e000ed04 	.word	0xe000ed04

0001426c <I2cSensorsRxComplete>:
					and is currently waiting for a notification that it has finished.
 * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
 * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
 * @note        
 *****************************************************************************/
void I2cSensorsRxComplete(struct i2c_master_module *const module){
   1426c:	b510      	push	{r4, lr}
   1426e:	b082      	sub	sp, #8
	
	I2cSensorBusState.i2cState = I2C_BUS_READY;
	I2cSensorBusState.rxDoneFlag = true;
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   14270:	2400      	movs	r4, #0
   14272:	9401      	str	r4, [sp, #4]
	
	xSemaphoreGiveFromISR( sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken );
   14274:	4b07      	ldr	r3, [pc, #28]	; (14294 <I2cSensorsRxComplete+0x28>)
   14276:	6818      	ldr	r0, [r3, #0]
   14278:	a901      	add	r1, sp, #4
   1427a:	4b07      	ldr	r3, [pc, #28]	; (14298 <I2cSensorsRxComplete+0x2c>)
   1427c:	4798      	blx	r3
	sensorTransmitError = false;
   1427e:	4b07      	ldr	r3, [pc, #28]	; (1429c <I2cSensorsRxComplete+0x30>)
   14280:	701c      	strb	r4, [r3, #0]
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
   14282:	9b01      	ldr	r3, [sp, #4]
   14284:	2b00      	cmp	r3, #0
   14286:	d003      	beq.n	14290 <I2cSensorsRxComplete+0x24>
   14288:	2280      	movs	r2, #128	; 0x80
   1428a:	0552      	lsls	r2, r2, #21
   1428c:	4b04      	ldr	r3, [pc, #16]	; (142a0 <I2cSensorsRxComplete+0x34>)
   1428e:	601a      	str	r2, [r3, #0]
}
   14290:	b002      	add	sp, #8
   14292:	bd10      	pop	{r4, pc}
   14294:	2000439c 	.word	0x2000439c
   14298:	000173d5 	.word	0x000173d5
   1429c:	20000944 	.word	0x20000944
   142a0:	e000ed04 	.word	0xe000ed04

000142a4 <I2cSensorsError>:
					and is currently waiting for a notification that it has finished.
 * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
 * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
 * @note        
 *****************************************************************************/
void I2cSensorsError(struct i2c_master_module *const module){
   142a4:	b510      	push	{r4, lr}
   142a6:	b082      	sub	sp, #8
	
	I2cSensorBusState.i2cState = I2C_BUS_READY;
	I2cSensorBusState.txDoneFlag = true;
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   142a8:	2400      	movs	r4, #0
   142aa:	9401      	str	r4, [sp, #4]
	
	xSemaphoreGiveFromISR( sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken );
   142ac:	4b07      	ldr	r3, [pc, #28]	; (142cc <I2cSensorsError+0x28>)
   142ae:	6818      	ldr	r0, [r3, #0]
   142b0:	a901      	add	r1, sp, #4
   142b2:	4b07      	ldr	r3, [pc, #28]	; (142d0 <I2cSensorsError+0x2c>)
   142b4:	4798      	blx	r3
	sensorTransmitError = false;
   142b6:	4b07      	ldr	r3, [pc, #28]	; (142d4 <I2cSensorsError+0x30>)
   142b8:	701c      	strb	r4, [r3, #0]
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
   142ba:	9b01      	ldr	r3, [sp, #4]
   142bc:	2b00      	cmp	r3, #0
   142be:	d003      	beq.n	142c8 <I2cSensorsError+0x24>
   142c0:	2280      	movs	r2, #128	; 0x80
   142c2:	0552      	lsls	r2, r2, #21
   142c4:	4b04      	ldr	r3, [pc, #16]	; (142d8 <I2cSensorsError+0x34>)
   142c6:	601a      	str	r2, [r3, #0]
}
   142c8:	b002      	add	sp, #8
   142ca:	bd10      	pop	{r4, pc}
   142cc:	2000439c 	.word	0x2000439c
   142d0:	000173d5 	.word	0x000173d5
   142d4:	20000944 	.word	0x20000944
   142d8:	e000ed04 	.word	0xe000ed04

000142dc <I2cDriverRegisterSensorBusCallbacks>:



void I2cDriverRegisterSensorBusCallbacks(void)
{
   142dc:	b570      	push	{r4, r5, r6, lr}
	/* Register callback function. */
	i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsTxComplete,I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   142de:	4c0c      	ldr	r4, [pc, #48]	; (14310 <I2cDriverRegisterSensorBusCallbacks+0x34>)
   142e0:	2200      	movs	r2, #0
   142e2:	490c      	ldr	r1, [pc, #48]	; (14314 <I2cDriverRegisterSensorBusCallbacks+0x38>)
   142e4:	0020      	movs	r0, r4
   142e6:	4d0c      	ldr	r5, [pc, #48]	; (14318 <I2cDriverRegisterSensorBusCallbacks+0x3c>)
   142e8:	47a8      	blx	r5
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
   142ea:	7e63      	ldrb	r3, [r4, #25]
   142ec:	2201      	movs	r2, #1
   142ee:	4313      	orrs	r3, r2
   142f0:	7663      	strb	r3, [r4, #25]
	i2c_master_enable_callback(&i2cSensorBusInstance,I2C_MASTER_CALLBACK_WRITE_COMPLETE);
	
	i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsRxComplete, I2C_MASTER_CALLBACK_READ_COMPLETE);
   142f2:	490a      	ldr	r1, [pc, #40]	; (1431c <I2cDriverRegisterSensorBusCallbacks+0x40>)
   142f4:	0020      	movs	r0, r4
   142f6:	47a8      	blx	r5
   142f8:	7e63      	ldrb	r3, [r4, #25]
   142fa:	2202      	movs	r2, #2
   142fc:	4313      	orrs	r3, r2
   142fe:	7663      	strb	r3, [r4, #25]
	i2c_master_enable_callback(&i2cSensorBusInstance,I2C_MASTER_CALLBACK_READ_COMPLETE);
	
	i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsError,I2C_MASTER_CALLBACK_ERROR);
   14300:	4907      	ldr	r1, [pc, #28]	; (14320 <I2cDriverRegisterSensorBusCallbacks+0x44>)
   14302:	0020      	movs	r0, r4
   14304:	47a8      	blx	r5
   14306:	7e63      	ldrb	r3, [r4, #25]
   14308:	2204      	movs	r2, #4
   1430a:	4313      	orrs	r3, r2
   1430c:	7663      	strb	r3, [r4, #25]
	i2c_master_enable_callback(&i2cSensorBusInstance,I2C_MASTER_CALLBACK_ERROR);
}
   1430e:	bd70      	pop	{r4, r5, r6, pc}
   14310:	20004374 	.word	0x20004374
   14314:	00014235 	.word	0x00014235
   14318:	00012ad1 	.word	0x00012ad1
   1431c:	0001426d 	.word	0x0001426d
   14320:	000142a5 	.word	0x000142a5

00014324 <I2cInitializeDriver>:
 * @fn			int32_t I2cInitializeDriver(void)
 * @brief       Function call to initialize the I2C driver\
 * @details     This function must be called from an RTOS thread if using RTOS, and must be called before any I2C call
 * @note        
 *****************************************************************************/
 int32_t I2cInitializeDriver(void){
   14324:	b570      	push	{r4, r5, r6, lr}
   14326:	b08e      	sub	sp, #56	; 0x38
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
   14328:	ab01      	add	r3, sp, #4
   1432a:	2264      	movs	r2, #100	; 0x64
   1432c:	9201      	str	r2, [sp, #4]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
   1432e:	4a33      	ldr	r2, [pc, #204]	; (143fc <I2cInitializeDriver+0xd8>)
   14330:	9202      	str	r2, [sp, #8]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
   14332:	2200      	movs	r2, #0
   14334:	9203      	str	r2, [sp, #12]
#endif
	config->generator_source = GCLK_GENERATOR_0;
   14336:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
   14338:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
   1433a:	2180      	movs	r1, #128	; 0x80
   1433c:	0389      	lsls	r1, r1, #14
   1433e:	9105      	str	r1, [sp, #20]
	config->buffer_timeout   = 65535;
	config->unknown_bus_state_timeout = 65535;
   14340:	2101      	movs	r1, #1
   14342:	4249      	negs	r1, r1
   14344:	8299      	strh	r1, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
   14346:	3125      	adds	r1, #37	; 0x25
   14348:	545a      	strb	r2, [r3, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
   1434a:	920b      	str	r2, [sp, #44]	; 0x2c
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
   1434c:	3108      	adds	r1, #8
   1434e:	545a      	strb	r2, [r3, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
   14350:	3101      	adds	r1, #1
   14352:	545a      	strb	r2, [r3, r1]
	config->master_scl_low_extend_timeout  = false;
   14354:	3101      	adds	r1, #1
   14356:	545a      	strb	r2, [r3, r1]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
   14358:	32d7      	adds	r2, #215	; 0xd7
   1435a:	861a      	strh	r2, [r3, #48]	; 0x30
	config_i2c_master.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0;
   1435c:	4a28      	ldr	r2, [pc, #160]	; (14400 <I2cInitializeDriver+0xdc>)
   1435e:	9208      	str	r2, [sp, #32]
	config_i2c_master.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
   14360:	4a28      	ldr	r2, [pc, #160]	; (14404 <I2cInitializeDriver+0xe0>)
   14362:	9209      	str	r2, [sp, #36]	; 0x24
	config_i2c_master.buffer_timeout = 1000;
   14364:	22fa      	movs	r2, #250	; 0xfa
   14366:	0092      	lsls	r2, r2, #2
   14368:	82da      	strh	r2, [r3, #22]
   1436a:	2403      	movs	r4, #3
		errCodeAsf = i2c_master_init(&i2cSensorBusInstance, SERCOM0, &config_i2c_master);
   1436c:	4d26      	ldr	r5, [pc, #152]	; (14408 <I2cInitializeDriver+0xe4>)
   1436e:	4e27      	ldr	r6, [pc, #156]	; (1440c <I2cInitializeDriver+0xe8>)
   14370:	aa01      	add	r2, sp, #4
   14372:	4927      	ldr	r1, [pc, #156]	; (14410 <I2cInitializeDriver+0xec>)
   14374:	0028      	movs	r0, r5
   14376:	47b0      	blx	r6
		if(STATUS_OK == errCodeAsf){
   14378:	2800      	cmp	r0, #0
   1437a:	d006      	beq.n	1438a <I2cInitializeDriver+0x66>
			i2c_master_reset(&i2cSensorBusInstance);
   1437c:	4822      	ldr	r0, [pc, #136]	; (14408 <I2cInitializeDriver+0xe4>)
   1437e:	4b25      	ldr	r3, [pc, #148]	; (14414 <I2cInitializeDriver+0xf0>)
   14380:	4798      	blx	r3
   14382:	3c01      	subs	r4, #1
   14384:	b2e4      	uxtb	r4, r4
	for(uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--){
   14386:	2c00      	cmp	r4, #0
   14388:	d1f2      	bne.n	14370 <I2cInitializeDriver+0x4c>
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1438a:	4b1f      	ldr	r3, [pc, #124]	; (14408 <I2cInitializeDriver+0xe4>)
   1438c:	681c      	ldr	r4, [r3, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   1438e:	2207      	movs	r2, #7
   14390:	69e3      	ldr	r3, [r4, #28]
	while (i2c_master_is_syncing(module)) {
   14392:	421a      	tst	r2, r3
   14394:	d1fc      	bne.n	14390 <I2cInitializeDriver+0x6c>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
   14396:	6823      	ldr	r3, [r4, #0]
   14398:	2202      	movs	r2, #2
   1439a:	4313      	orrs	r3, r2
   1439c:	6023      	str	r3, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1439e:	4d1a      	ldr	r5, [pc, #104]	; (14408 <I2cInitializeDriver+0xe4>)
   143a0:	6828      	ldr	r0, [r5, #0]
   143a2:	4b1d      	ldr	r3, [pc, #116]	; (14418 <I2cInitializeDriver+0xf4>)
   143a4:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   143a6:	231f      	movs	r3, #31
   143a8:	4018      	ands	r0, r3
   143aa:	3b1e      	subs	r3, #30
   143ac:	4083      	lsls	r3, r0
   143ae:	4a1b      	ldr	r2, [pc, #108]	; (1441c <I2cInitializeDriver+0xf8>)
   143b0:	6013      	str	r3, [r2, #0]
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
   143b2:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
   143b4:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   143b6:	2110      	movs	r1, #16
   143b8:	8b62      	ldrh	r2, [r4, #26]
   143ba:	420a      	tst	r2, r1
   143bc:	d104      	bne.n	143c8 <I2cInitializeDriver+0xa4>
		timeout_counter++;
   143be:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
   143c0:	4283      	cmp	r3, r0
   143c2:	d3f9      	bcc.n	143b8 <I2cInitializeDriver+0x94>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
   143c4:	2310      	movs	r3, #16
   143c6:	8363      	strh	r3, [r4, #26]


	error = I2cDriverConfigureSensorBus();
	if(STATUS_OK != error) goto exit;
	
	I2cDriverRegisterSensorBusCallbacks();
   143c8:	4b15      	ldr	r3, [pc, #84]	; (14420 <I2cInitializeDriver+0xfc>)
   143ca:	4798      	blx	r3
	
		
	sensorI2cMutexHandle = xSemaphoreCreateMutex();
   143cc:	2001      	movs	r0, #1
   143ce:	4b15      	ldr	r3, [pc, #84]	; (14424 <I2cInitializeDriver+0x100>)
   143d0:	4798      	blx	r3
   143d2:	4c15      	ldr	r4, [pc, #84]	; (14428 <I2cInitializeDriver+0x104>)
   143d4:	6020      	str	r0, [r4, #0]
	
	sensorI2cSemaphoreHandle = xSemaphoreCreateBinary();
   143d6:	2203      	movs	r2, #3
   143d8:	2100      	movs	r1, #0
   143da:	2001      	movs	r0, #1
   143dc:	4b13      	ldr	r3, [pc, #76]	; (1442c <I2cInitializeDriver+0x108>)
   143de:	4798      	blx	r3
   143e0:	4b13      	ldr	r3, [pc, #76]	; (14430 <I2cInitializeDriver+0x10c>)
   143e2:	6018      	str	r0, [r3, #0]
	//xSemaphoreGive(sensorI2cSemaphoreHandle);

	
	if(NULL == sensorI2cMutexHandle || NULL == sensorI2cSemaphoreHandle){
   143e4:	6823      	ldr	r3, [r4, #0]
   143e6:	2b00      	cmp	r3, #0
   143e8:	d004      	beq.n	143f4 <I2cInitializeDriver+0xd0>
	error = I2cDriverConfigureSensorBus();
   143ea:	2300      	movs	r3, #0
	if(NULL == sensorI2cMutexHandle || NULL == sensorI2cSemaphoreHandle){
   143ec:	2800      	cmp	r0, #0
   143ee:	d102      	bne.n	143f6 <I2cInitializeDriver+0xd2>
		error = STATUS_SUSPEND;	//Could not initialize mutex!
   143f0:	3306      	adds	r3, #6
   143f2:	e000      	b.n	143f6 <I2cInitializeDriver+0xd2>
   143f4:	2306      	movs	r3, #6
		goto exit;
	}

	exit:
	return error;		
}
   143f6:	0018      	movs	r0, r3
   143f8:	b00e      	add	sp, #56	; 0x38
   143fa:	bd70      	pop	{r4, r5, r6, pc}
   143fc:	00000d48 	.word	0x00000d48
   14400:	00080002 	.word	0x00080002
   14404:	00090002 	.word	0x00090002
   14408:	20004374 	.word	0x20004374
   1440c:	00014db5 	.word	0x00014db5
   14410:	42000800 	.word	0x42000800
   14414:	000150ad 	.word	0x000150ad
   14418:	0001de11 	.word	0x0001de11
   1441c:	e000e100 	.word	0xe000e100
   14420:	000142dd 	.word	0x000142dd
   14424:	00017071 	.word	0x00017071
   14428:	20004370 	.word	0x20004370
   1442c:	00016c0d 	.word	0x00016c0d
   14430:	2000439c 	.word	0x2000439c

00014434 <I2cWriteData>:
 * @param[in]   data Pointer to I2C data structure which has all the information needed to send an I2C message
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note        
 *****************************************************************************/

int32_t I2cWriteData(I2C_Data *data){
   14434:	b510      	push	{r4, lr}
	I2C_Bus_State * busI2cState;
	struct i2c_master_packet *writePacket = NULL;
	struct i2c_master_packet *readPacket = NULL;
	
	//Check parameters
	if(data == NULL || data->msgOut == NULL){
   14436:	2800      	cmp	r0, #0
   14438:	d012      	beq.n	14460 <I2cWriteData+0x2c>
   1443a:	6843      	ldr	r3, [r0, #4]
   1443c:	2b00      	cmp	r3, #0
   1443e:	d012      	beq.n	14466 <I2cWriteData+0x32>
		error = ERR_INVALID_ARG;
		goto exit;
	}

	//Prepare to write
	sensorPacketWrite.address = data->address;
   14440:	490a      	ldr	r1, [pc, #40]	; (1446c <I2cWriteData+0x38>)
   14442:	7802      	ldrb	r2, [r0, #0]
   14444:	800a      	strh	r2, [r1, #0]
	sensorPacketWrite.data = (uint8_t*) data->msgOut;
   14446:	604b      	str	r3, [r1, #4]
	sensorPacketWrite.data_length = data->lenOut;
   14448:	89c3      	ldrh	r3, [r0, #14]
   1444a:	804b      	strh	r3, [r1, #2]
	
	//Write

	hwError = i2c_master_write_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   1444c:	4808      	ldr	r0, [pc, #32]	; (14470 <I2cWriteData+0x3c>)
   1444e:	4b09      	ldr	r3, [pc, #36]	; (14474 <I2cWriteData+0x40>)
   14450:	4798      	blx	r3
	int32_t error = ERROR_NONE;
   14452:	2300      	movs	r3, #0
	
	if(STATUS_OK != hwError)
   14454:	2800      	cmp	r0, #0
   14456:	d101      	bne.n	1445c <I2cWriteData+0x28>
		goto exit;
	}
	
	exit:
	return error;
}
   14458:	0018      	movs	r0, r3
   1445a:	bd10      	pop	{r4, pc}
		error = ERROR_IO;
   1445c:	3b06      	subs	r3, #6
   1445e:	e7fb      	b.n	14458 <I2cWriteData+0x24>
		error = ERR_INVALID_ARG;
   14460:	2308      	movs	r3, #8
   14462:	425b      	negs	r3, r3
   14464:	e7f8      	b.n	14458 <I2cWriteData+0x24>
   14466:	2308      	movs	r3, #8
   14468:	425b      	negs	r3, r3
   1446a:	e7f5      	b.n	14458 <I2cWriteData+0x24>
   1446c:	200043a0 	.word	0x200043a0
   14470:	20004374 	.word	0x20004374
   14474:	00012b0d 	.word	0x00012b0d

00014478 <I2cWriteData_No_Stop>:
 * @param[in]   data Pointer to I2C data structure which has all the information needed to send an I2C message
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note        
 *****************************************************************************/

int32_t I2cWriteData_No_Stop(I2C_Data *data){
   14478:	b510      	push	{r4, lr}
	I2C_Bus_State * busI2cState;
	struct i2c_master_packet *writePacket = NULL;
	struct i2c_master_packet *readPacket = NULL;
	
	//Check parameters
	if(data == NULL || data->msgOut == NULL){
   1447a:	2800      	cmp	r0, #0
   1447c:	d012      	beq.n	144a4 <I2cWriteData_No_Stop+0x2c>
   1447e:	6843      	ldr	r3, [r0, #4]
   14480:	2b00      	cmp	r3, #0
   14482:	d012      	beq.n	144aa <I2cWriteData_No_Stop+0x32>
		error = ERR_INVALID_ARG;
		goto exit;
	}

	//Prepare to write
	sensorPacketWrite.address = data->address;
   14484:	490a      	ldr	r1, [pc, #40]	; (144b0 <I2cWriteData_No_Stop+0x38>)
   14486:	7802      	ldrb	r2, [r0, #0]
   14488:	800a      	strh	r2, [r1, #0]
	sensorPacketWrite.data = (uint8_t*) data->msgOut;
   1448a:	604b      	str	r3, [r1, #4]
	sensorPacketWrite.data_length = data->lenOut;
   1448c:	89c3      	ldrh	r3, [r0, #14]
   1448e:	804b      	strh	r3, [r1, #2]
	
	//Write

	hwError = i2c_master_write_packet_job_no_stop(&i2cSensorBusInstance, &sensorPacketWrite);
   14490:	4808      	ldr	r0, [pc, #32]	; (144b4 <I2cWriteData_No_Stop+0x3c>)
   14492:	4b09      	ldr	r3, [pc, #36]	; (144b8 <I2cWriteData_No_Stop+0x40>)
   14494:	4798      	blx	r3
	int32_t error = ERROR_NONE;
   14496:	2300      	movs	r3, #0
	
	if(STATUS_OK != hwError)
   14498:	2800      	cmp	r0, #0
   1449a:	d101      	bne.n	144a0 <I2cWriteData_No_Stop+0x28>
		goto exit;
	}
	
	exit:
	return error;
}
   1449c:	0018      	movs	r0, r3
   1449e:	bd10      	pop	{r4, pc}
		error = ERROR_IO;
   144a0:	3b06      	subs	r3, #6
   144a2:	e7fb      	b.n	1449c <I2cWriteData_No_Stop+0x24>
		error = ERR_INVALID_ARG;
   144a4:	2308      	movs	r3, #8
   144a6:	425b      	negs	r3, r3
   144a8:	e7f8      	b.n	1449c <I2cWriteData_No_Stop+0x24>
   144aa:	2308      	movs	r3, #8
   144ac:	425b      	negs	r3, r3
   144ae:	e7f5      	b.n	1449c <I2cWriteData_No_Stop+0x24>
   144b0:	200043a0 	.word	0x200043a0
   144b4:	20004374 	.word	0x20004374
   144b8:	00012b31 	.word	0x00012b31

000144bc <I2cReadData>:
 * @details     
 * @param[in]   data Pointer to I2C data structure which has all the information needed to send an I2C message
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note        
 *****************************************************************************/
int32_t I2cReadData(I2C_Data *data){
   144bc:	b510      	push	{r4, lr}
	struct i2c_master_packet *writePacket = NULL;
	struct i2c_master_packet *readPacket = NULL;
	
	
	//Check parameters
	if(data == NULL || data->msgOut == NULL){
   144be:	2800      	cmp	r0, #0
   144c0:	d013      	beq.n	144ea <I2cReadData+0x2e>
   144c2:	6843      	ldr	r3, [r0, #4]
   144c4:	2b00      	cmp	r3, #0
   144c6:	d013      	beq.n	144f0 <I2cReadData+0x34>
		error = ERR_INVALID_ARG;
		goto exit;
	}

	//Prepare to read
	sensorPacketWrite.address = data->address;
   144c8:	490b      	ldr	r1, [pc, #44]	; (144f8 <I2cReadData+0x3c>)
   144ca:	7803      	ldrb	r3, [r0, #0]
   144cc:	800b      	strh	r3, [r1, #0]
	sensorPacketWrite.data = data->msgIn;
   144ce:	6883      	ldr	r3, [r0, #8]
   144d0:	604b      	str	r3, [r1, #4]
	sensorPacketWrite.data_length = data->lenIn;
   144d2:	8983      	ldrh	r3, [r0, #12]
   144d4:	804b      	strh	r3, [r1, #2]
	
	//Read

	hwError = i2c_master_read_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   144d6:	4809      	ldr	r0, [pc, #36]	; (144fc <I2cReadData+0x40>)
   144d8:	4b09      	ldr	r3, [pc, #36]	; (14500 <I2cReadData+0x44>)
   144da:	4798      	blx	r3
	int32_t error = ERROR_NONE;
   144dc:	2300      	movs	r3, #0
	
	if(STATUS_OK != hwError)
   144de:	2800      	cmp	r0, #0
   144e0:	d101      	bne.n	144e6 <I2cReadData+0x2a>
		goto exit;
	}
	
	exit:
	return error;
}
   144e2:	0018      	movs	r0, r3
   144e4:	bd10      	pop	{r4, pc}
		error = ERROR_IO;
   144e6:	3b06      	subs	r3, #6
   144e8:	e7fb      	b.n	144e2 <I2cReadData+0x26>
		error = ERR_INVALID_ARG;
   144ea:	2308      	movs	r3, #8
   144ec:	425b      	negs	r3, r3
   144ee:	e7f8      	b.n	144e2 <I2cReadData+0x26>
   144f0:	2308      	movs	r3, #8
   144f2:	425b      	negs	r3, r3
   144f4:	e7f5      	b.n	144e2 <I2cReadData+0x26>
   144f6:	46c0      	nop			; (mov r8, r8)
   144f8:	200043a0 	.word	0x200043a0
   144fc:	20004374 	.word	0x20004374
   14500:	00012ae9 	.word	0x00012ae9

00014504 <I2cFreeMutex>:
 * @details     
 * @param[out]   bus Enum that represents the bus in which we are interested to free the mutex of.
 * @return      Returns (ERROR_NONE) if the bus is ready, (ERROR_NOT_INITIALIZED) if it is busy.
 * @note        STUDENTS TO FILL OUT!
 *****************************************************************************/
int32_t I2cFreeMutex(void){
   14504:	b510      	push	{r4, lr}
	
	int32_t error = ERROR_NONE;
	if(pdTRUE != xSemaphoreGive(sensorI2cMutexHandle))
   14506:	4b07      	ldr	r3, [pc, #28]	; (14524 <I2cFreeMutex+0x20>)
   14508:	6818      	ldr	r0, [r3, #0]
   1450a:	2300      	movs	r3, #0
   1450c:	2200      	movs	r2, #0
   1450e:	2100      	movs	r1, #0
   14510:	4c05      	ldr	r4, [pc, #20]	; (14528 <I2cFreeMutex+0x24>)
   14512:	47a0      	blx	r4
	int32_t error = ERROR_NONE;
   14514:	2300      	movs	r3, #0
	if(pdTRUE != xSemaphoreGive(sensorI2cMutexHandle))
   14516:	2801      	cmp	r0, #1
   14518:	d101      	bne.n	1451e <I2cFreeMutex+0x1a>
	{
		error = ERROR_NOT_INITIALIZED;
	}
	return error;
}
   1451a:	0018      	movs	r0, r3
   1451c:	bd10      	pop	{r4, pc}
		error = ERROR_NOT_INITIALIZED;
   1451e:	3b14      	subs	r3, #20
   14520:	e7fb      	b.n	1451a <I2cFreeMutex+0x16>
   14522:	46c0      	nop			; (mov r8, r8)
   14524:	20004370 	.word	0x20004370
   14528:	00016d49 	.word	0x00016d49

0001452c <I2cGetMutex>:
 * @details     
 * @param[in]   waitTime Time to wait for the mutex to be freed.
 * @return      Returns (ERROR_NONE) if we got the mutex, (ERROR_NOT_READY) if we time out before we got it
 * @note        
 *****************************************************************************/
int32_t I2cGetMutex(TickType_t waitTime){
   1452c:	b510      	push	{r4, lr}
   1452e:	0001      	movs	r1, r0
	
	int32_t error = ERROR_NONE;
	if(pdTRUE != xSemaphoreTake(sensorI2cMutexHandle, waitTime))
   14530:	4b05      	ldr	r3, [pc, #20]	; (14548 <I2cGetMutex+0x1c>)
   14532:	6818      	ldr	r0, [r3, #0]
   14534:	4b05      	ldr	r3, [pc, #20]	; (1454c <I2cGetMutex+0x20>)
   14536:	4798      	blx	r3
	int32_t error = ERROR_NONE;
   14538:	2300      	movs	r3, #0
	if(pdTRUE != xSemaphoreTake(sensorI2cMutexHandle, waitTime))
   1453a:	2801      	cmp	r0, #1
   1453c:	d101      	bne.n	14542 <I2cGetMutex+0x16>
	{
		error = ERROR_NOT_READY;
	}
	return error;
}
   1453e:	0018      	movs	r0, r3
   14540:	bd10      	pop	{r4, pc}
		error = ERROR_NOT_READY;
   14542:	3b1d      	subs	r3, #29
   14544:	e7fb      	b.n	1453e <I2cGetMutex+0x12>
   14546:	46c0      	nop			; (mov r8, r8)
   14548:	20004370 	.word	0x20004370
   1454c:	000176f1 	.word	0x000176f1

00014550 <I2cWriteDataWait>:
				the delay an I2C device needs to make a measurement.
 * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
 * @return      Returns an error message in case of error.
 * @note        
 *****************************************************************************/
int32_t I2cWriteDataWait(I2C_Data *data, const TickType_t xMaxBlockTime){
   14550:	b570      	push	{r4, r5, r6, lr}
   14552:	0005      	movs	r5, r0
   14554:	000c      	movs	r4, r1
SemaphoreHandle_t semHandle = NULL;


//---0. Get Mutex
error = 0; //Students to fill out
error = I2cGetMutex(xMaxBlockTime);
   14556:	0008      	movs	r0, r1
   14558:	4b0f      	ldr	r3, [pc, #60]	; (14598 <I2cWriteDataWait+0x48>)
   1455a:	4798      	blx	r3
if(ERROR_NONE != error) goto exit;
   1455c:	2800      	cmp	r0, #0
   1455e:	d000      	beq.n	14562 <I2cWriteDataWait+0x12>
exitError0:
error = I2cFreeMutex();

return error;

}
   14560:	bd70      	pop	{r4, r5, r6, pc}
	*handle = sensorI2cSemaphoreHandle;
   14562:	4b0e      	ldr	r3, [pc, #56]	; (1459c <I2cWriteDataWait+0x4c>)
   14564:	681e      	ldr	r6, [r3, #0]
error = I2cWriteData(data);
   14566:	0028      	movs	r0, r5
   14568:	4b0d      	ldr	r3, [pc, #52]	; (145a0 <I2cWriteDataWait+0x50>)
   1456a:	4798      	blx	r3
if (ERROR_NONE != error){
   1456c:	2800      	cmp	r0, #0
   1456e:	d105      	bne.n	1457c <I2cWriteDataWait+0x2c>
if( xSemaphoreTake( semHandle, xMaxBlockTime ) == pdTRUE ){
   14570:	0021      	movs	r1, r4
   14572:	0030      	movs	r0, r6
   14574:	4b0b      	ldr	r3, [pc, #44]	; (145a4 <I2cWriteDataWait+0x54>)
   14576:	4798      	blx	r3
   14578:	2801      	cmp	r0, #1
   1457a:	d002      	beq.n	14582 <I2cWriteDataWait+0x32>
error = I2cFreeMutex();
   1457c:	4b0a      	ldr	r3, [pc, #40]	; (145a8 <I2cWriteDataWait+0x58>)
   1457e:	4798      	blx	r3
return error;
   14580:	e7ee      	b.n	14560 <I2cWriteDataWait+0x10>
	 return sensorTransmitError;
   14582:	4b0a      	ldr	r3, [pc, #40]	; (145ac <I2cWriteDataWait+0x5c>)
	if(I2cGetTaskErrorStatus()){
   14584:	781b      	ldrb	r3, [r3, #0]
   14586:	2b00      	cmp	r3, #0
   14588:	d003      	beq.n	14592 <I2cWriteDataWait+0x42>
	sensorTransmitError = value;
   1458a:	2200      	movs	r2, #0
   1458c:	4b07      	ldr	r3, [pc, #28]	; (145ac <I2cWriteDataWait+0x5c>)
   1458e:	701a      	strb	r2, [r3, #0]
   14590:	e7f4      	b.n	1457c <I2cWriteDataWait+0x2c>
error = I2cFreeMutex();
   14592:	4b05      	ldr	r3, [pc, #20]	; (145a8 <I2cWriteDataWait+0x58>)
   14594:	4798      	blx	r3
   14596:	e7e3      	b.n	14560 <I2cWriteDataWait+0x10>
   14598:	0001452d 	.word	0x0001452d
   1459c:	2000439c 	.word	0x2000439c
   145a0:	00014435 	.word	0x00014435
   145a4:	000176f1 	.word	0x000176f1
   145a8:	00014505 	.word	0x00014505
   145ac:	20000944 	.word	0x20000944

000145b0 <I2cReadDataWait>:
 * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note        THIS IS THE FREERTOS VERSION! DO NOT Declare #define USE_FREERTOS if you wish to use the baremetal version!      
				students to fill!
 *****************************************************************************/
int32_t I2cReadDataWait(I2C_Data *data, const TickType_t delay, const TickType_t xMaxBlockTime){
   145b0:	b570      	push	{r4, r5, r6, lr}
   145b2:	0005      	movs	r5, r0
   145b4:	0014      	movs	r4, r2
	

	//---0. Get Mutex
	//STUDENTS FILL
	error = 0;
	error = I2cGetMutex(xMaxBlockTime);
   145b6:	0010      	movs	r0, r2
   145b8:	4b18      	ldr	r3, [pc, #96]	; (1461c <I2cReadDataWait+0x6c>)
   145ba:	4798      	blx	r3
	if(ERROR_NONE != error) goto exit;
   145bc:	2800      	cmp	r0, #0
   145be:	d000      	beq.n	145c2 <I2cReadDataWait+0x12>
	error = I2cFreeMutex();

	return error;

	
}
   145c0:	bd70      	pop	{r4, r5, r6, pc}
	*handle = sensorI2cSemaphoreHandle;
   145c2:	4b17      	ldr	r3, [pc, #92]	; (14620 <I2cReadDataWait+0x70>)
   145c4:	681e      	ldr	r6, [r3, #0]
	error = I2cWriteData(data);
   145c6:	0028      	movs	r0, r5
   145c8:	4b16      	ldr	r3, [pc, #88]	; (14624 <I2cReadDataWait+0x74>)
   145ca:	4798      	blx	r3
	if (ERROR_NONE != error){
   145cc:	2800      	cmp	r0, #0
   145ce:	d105      	bne.n	145dc <I2cReadDataWait+0x2c>
	if( xSemaphoreTake( semHandle, xMaxBlockTime ) == pdTRUE ){
   145d0:	0021      	movs	r1, r4
   145d2:	0030      	movs	r0, r6
   145d4:	4b14      	ldr	r3, [pc, #80]	; (14628 <I2cReadDataWait+0x78>)
   145d6:	4798      	blx	r3
   145d8:	2801      	cmp	r0, #1
   145da:	d002      	beq.n	145e2 <I2cReadDataWait+0x32>
	error = I2cFreeMutex();
   145dc:	4b13      	ldr	r3, [pc, #76]	; (1462c <I2cReadDataWait+0x7c>)
   145de:	4798      	blx	r3
	return error;
   145e0:	e7ee      	b.n	145c0 <I2cReadDataWait+0x10>
	 return sensorTransmitError;
   145e2:	4b13      	ldr	r3, [pc, #76]	; (14630 <I2cReadDataWait+0x80>)
		if(I2cGetTaskErrorStatus()){
   145e4:	781b      	ldrb	r3, [r3, #0]
   145e6:	2b00      	cmp	r3, #0
   145e8:	d003      	beq.n	145f2 <I2cReadDataWait+0x42>
	sensorTransmitError = value;
   145ea:	2200      	movs	r2, #0
   145ec:	4b10      	ldr	r3, [pc, #64]	; (14630 <I2cReadDataWait+0x80>)
   145ee:	701a      	strb	r2, [r3, #0]
   145f0:	e7f4      	b.n	145dc <I2cReadDataWait+0x2c>
	error = I2cReadData(data);
   145f2:	0028      	movs	r0, r5
   145f4:	4b0f      	ldr	r3, [pc, #60]	; (14634 <I2cReadDataWait+0x84>)
   145f6:	4798      	blx	r3
	if( xSemaphoreTake( semHandle, xMaxBlockTime ) == pdTRUE ){
   145f8:	0021      	movs	r1, r4
   145fa:	0030      	movs	r0, r6
   145fc:	4b0a      	ldr	r3, [pc, #40]	; (14628 <I2cReadDataWait+0x78>)
   145fe:	4798      	blx	r3
   14600:	2801      	cmp	r0, #1
   14602:	d1eb      	bne.n	145dc <I2cReadDataWait+0x2c>
	 return sensorTransmitError;
   14604:	4b0a      	ldr	r3, [pc, #40]	; (14630 <I2cReadDataWait+0x80>)
		if(I2cGetTaskErrorStatus()){
   14606:	781b      	ldrb	r3, [r3, #0]
   14608:	2b00      	cmp	r3, #0
   1460a:	d003      	beq.n	14614 <I2cReadDataWait+0x64>
	sensorTransmitError = value;
   1460c:	2200      	movs	r2, #0
   1460e:	4b08      	ldr	r3, [pc, #32]	; (14630 <I2cReadDataWait+0x80>)
   14610:	701a      	strb	r2, [r3, #0]
   14612:	e7e3      	b.n	145dc <I2cReadDataWait+0x2c>
	error = I2cFreeMutex();
   14614:	4b05      	ldr	r3, [pc, #20]	; (1462c <I2cReadDataWait+0x7c>)
   14616:	4798      	blx	r3
   14618:	e7d2      	b.n	145c0 <I2cReadDataWait+0x10>
   1461a:	46c0      	nop			; (mov r8, r8)
   1461c:	0001452d 	.word	0x0001452d
   14620:	2000439c 	.word	0x2000439c
   14624:	00014435 	.word	0x00014435
   14628:	000176f1 	.word	0x000176f1
   1462c:	00014505 	.word	0x00014505
   14630:	20000944 	.word	0x20000944
   14634:	000144bd 	.word	0x000144bd

00014638 <I2cReadDataWait_NoStop>:
 * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note        THIS IS THE FREERTOS VERSION! DO NOT Declare #define USE_FREERTOS if you wish to use the baremetal version!      
				students to fill!
 *****************************************************************************/
int32_t I2cReadDataWait_NoStop(I2C_Data *data, const TickType_t delay, const TickType_t xMaxBlockTime){
   14638:	b570      	push	{r4, r5, r6, lr}
   1463a:	0005      	movs	r5, r0
   1463c:	0014      	movs	r4, r2
	

	//---0. Get Mutex
	//STUDENTS FILL
	error = 0;
	error = I2cGetMutex(xMaxBlockTime);
   1463e:	0010      	movs	r0, r2
   14640:	4b18      	ldr	r3, [pc, #96]	; (146a4 <I2cReadDataWait_NoStop+0x6c>)
   14642:	4798      	blx	r3
	if(ERROR_NONE != error) goto exit;
   14644:	2800      	cmp	r0, #0
   14646:	d000      	beq.n	1464a <I2cReadDataWait_NoStop+0x12>
	error = I2cFreeMutex();

	return error;

	
}
   14648:	bd70      	pop	{r4, r5, r6, pc}
	*handle = sensorI2cSemaphoreHandle;
   1464a:	4b17      	ldr	r3, [pc, #92]	; (146a8 <I2cReadDataWait_NoStop+0x70>)
   1464c:	681e      	ldr	r6, [r3, #0]
	error = I2cWriteData_No_Stop(data);
   1464e:	0028      	movs	r0, r5
   14650:	4b16      	ldr	r3, [pc, #88]	; (146ac <I2cReadDataWait_NoStop+0x74>)
   14652:	4798      	blx	r3
	if (ERROR_NONE != error){
   14654:	2800      	cmp	r0, #0
   14656:	d105      	bne.n	14664 <I2cReadDataWait_NoStop+0x2c>
	if( xSemaphoreTake( semHandle, xMaxBlockTime ) == pdTRUE ){
   14658:	0021      	movs	r1, r4
   1465a:	0030      	movs	r0, r6
   1465c:	4b14      	ldr	r3, [pc, #80]	; (146b0 <I2cReadDataWait_NoStop+0x78>)
   1465e:	4798      	blx	r3
   14660:	2801      	cmp	r0, #1
   14662:	d002      	beq.n	1466a <I2cReadDataWait_NoStop+0x32>
	error = I2cFreeMutex();
   14664:	4b13      	ldr	r3, [pc, #76]	; (146b4 <I2cReadDataWait_NoStop+0x7c>)
   14666:	4798      	blx	r3
	return error;
   14668:	e7ee      	b.n	14648 <I2cReadDataWait_NoStop+0x10>
	 return sensorTransmitError;
   1466a:	4b13      	ldr	r3, [pc, #76]	; (146b8 <I2cReadDataWait_NoStop+0x80>)
		if(I2cGetTaskErrorStatus()){
   1466c:	781b      	ldrb	r3, [r3, #0]
   1466e:	2b00      	cmp	r3, #0
   14670:	d003      	beq.n	1467a <I2cReadDataWait_NoStop+0x42>
	sensorTransmitError = value;
   14672:	2200      	movs	r2, #0
   14674:	4b10      	ldr	r3, [pc, #64]	; (146b8 <I2cReadDataWait_NoStop+0x80>)
   14676:	701a      	strb	r2, [r3, #0]
   14678:	e7f4      	b.n	14664 <I2cReadDataWait_NoStop+0x2c>
	error = I2cReadData(data);
   1467a:	0028      	movs	r0, r5
   1467c:	4b0f      	ldr	r3, [pc, #60]	; (146bc <I2cReadDataWait_NoStop+0x84>)
   1467e:	4798      	blx	r3
	if( xSemaphoreTake( semHandle, xMaxBlockTime ) == pdTRUE ){
   14680:	0021      	movs	r1, r4
   14682:	0030      	movs	r0, r6
   14684:	4b0a      	ldr	r3, [pc, #40]	; (146b0 <I2cReadDataWait_NoStop+0x78>)
   14686:	4798      	blx	r3
   14688:	2801      	cmp	r0, #1
   1468a:	d1eb      	bne.n	14664 <I2cReadDataWait_NoStop+0x2c>
	 return sensorTransmitError;
   1468c:	4b0a      	ldr	r3, [pc, #40]	; (146b8 <I2cReadDataWait_NoStop+0x80>)
		if(I2cGetTaskErrorStatus()){
   1468e:	781b      	ldrb	r3, [r3, #0]
   14690:	2b00      	cmp	r3, #0
   14692:	d003      	beq.n	1469c <I2cReadDataWait_NoStop+0x64>
	sensorTransmitError = value;
   14694:	2200      	movs	r2, #0
   14696:	4b08      	ldr	r3, [pc, #32]	; (146b8 <I2cReadDataWait_NoStop+0x80>)
   14698:	701a      	strb	r2, [r3, #0]
   1469a:	e7e3      	b.n	14664 <I2cReadDataWait_NoStop+0x2c>
	error = I2cFreeMutex();
   1469c:	4b05      	ldr	r3, [pc, #20]	; (146b4 <I2cReadDataWait_NoStop+0x7c>)
   1469e:	4798      	blx	r3
   146a0:	e7d2      	b.n	14648 <I2cReadDataWait_NoStop+0x10>
   146a2:	46c0      	nop			; (mov r8, r8)
   146a4:	0001452d 	.word	0x0001452d
   146a8:	2000439c 	.word	0x2000439c
   146ac:	00014479 	.word	0x00014479
   146b0:	000176f1 	.word	0x000176f1
   146b4:	00014505 	.word	0x00014505
   146b8:	20000944 	.word	0x20000944
   146bc:	000144bd 	.word	0x000144bd

000146c0 <platform_write>:
* @return		STATUS_OK if ok
* @note         
*****************************************************************************/

static int32_t platform_write(uint8_t reg, uint8_t *bufp,uint16_t len)
{
   146c0:	b570      	push	{r4, r5, r6, lr}
   146c2:	0015      	movs	r5, r2
	int32_t error = ERROR_NONE;
	light_data.address = VEML6030_I2C_ADDR_L;
   146c4:	4c07      	ldr	r4, [pc, #28]	; (146e4 <platform_write+0x24>)
   146c6:	2310      	movs	r3, #16
   146c8:	7023      	strb	r3, [r4, #0]
	msgOutlight[0] = reg;
   146ca:	4e07      	ldr	r6, [pc, #28]	; (146e8 <platform_write+0x28>)
   146cc:	7030      	strb	r0, [r6, #0]
	memcpy (msgOutlight+1, bufp, len);
   146ce:	1c70      	adds	r0, r6, #1
   146d0:	4b06      	ldr	r3, [pc, #24]	; (146ec <platform_write+0x2c>)
   146d2:	4798      	blx	r3
	light_data.lenOut = len +1;
   146d4:	3501      	adds	r5, #1
   146d6:	81e5      	strh	r5, [r4, #14]
	light_data.msgOut = &msgOutlight;
   146d8:	6066      	str	r6, [r4, #4]
	error = I2cWriteDataWait(&light_data,100);
   146da:	2164      	movs	r1, #100	; 0x64
   146dc:	0020      	movs	r0, r4
   146de:	4b04      	ldr	r3, [pc, #16]	; (146f0 <platform_write+0x30>)
   146e0:	4798      	blx	r3
	return error;
}
   146e2:	bd70      	pop	{r4, r5, r6, pc}
   146e4:	200043ac 	.word	0x200043ac
   146e8:	200043c0 	.word	0x200043c0
   146ec:	00025cd9 	.word	0x00025cd9
   146f0:	00014551 	.word	0x00014551

000146f4 <platform_read>:
* @param[in]	uint16_t len: number of bytes to send (the register address is not counted)
* @return		STATUS_OK if ok
* @note
*****************************************************************************/
static  int32_t platform_read(uint8_t reg, uint8_t *bufp, uint16_t len)
{
   146f4:	b510      	push	{r4, lr}
	int32_t error = ERROR_NONE;
	light_data.address = VEML6030_I2C_ADDR_L;
   146f6:	4b09      	ldr	r3, [pc, #36]	; (1471c <platform_read+0x28>)
   146f8:	2410      	movs	r4, #16
   146fa:	701c      	strb	r4, [r3, #0]
	msgOutlight[0] = reg;
   146fc:	4c08      	ldr	r4, [pc, #32]	; (14720 <platform_read+0x2c>)
   146fe:	7020      	strb	r0, [r4, #0]
	msgOutlight[1] = 0;
   14700:	2000      	movs	r0, #0
   14702:	7060      	strb	r0, [r4, #1]
	light_data.lenOut = 1;
   14704:	3001      	adds	r0, #1
   14706:	81d8      	strh	r0, [r3, #14]
	light_data.msgOut = &msgOutlight;
   14708:	605c      	str	r4, [r3, #4]
	light_data.lenIn = len;
   1470a:	819a      	strh	r2, [r3, #12]
	light_data.msgIn = bufp;
   1470c:	6099      	str	r1, [r3, #8]
	error = I2cReadDataWait_NoStop(&light_data, 5, 100);
   1470e:	2264      	movs	r2, #100	; 0x64
   14710:	2105      	movs	r1, #5
   14712:	0018      	movs	r0, r3
   14714:	4b03      	ldr	r3, [pc, #12]	; (14724 <platform_read+0x30>)
   14716:	4798      	blx	r3
	return error;
   14718:	bd10      	pop	{r4, pc}
   1471a:	46c0      	nop			; (mov r8, r8)
   1471c:	200043ac 	.word	0x200043ac
   14720:	200043c0 	.word	0x200043c0
   14724:	00014639 	.word	0x00014639

00014728 <VEML_Reset>:
{
   14728:	b570      	push	{r4, r5, r6, lr}
	msgOutlightbuffer[0] = 0x00;
   1472a:	4c11      	ldr	r4, [pc, #68]	; (14770 <VEML_Reset+0x48>)
   1472c:	2300      	movs	r3, #0
   1472e:	7023      	strb	r3, [r4, #0]
	msgOutlightbuffer[1] = 0x00;
   14730:	7063      	strb	r3, [r4, #1]
	error = platform_write(ALS_CONF, msgOutlightbuffer,VemlWriteByteLen);
   14732:	2202      	movs	r2, #2
   14734:	0021      	movs	r1, r4
   14736:	2000      	movs	r0, #0
   14738:	4d0e      	ldr	r5, [pc, #56]	; (14774 <VEML_Reset+0x4c>)
   1473a:	47a8      	blx	r5
	error = platform_write(ALS_WH, msgOutlightbuffer,VemlWriteByteLen);
   1473c:	2202      	movs	r2, #2
   1473e:	0021      	movs	r1, r4
   14740:	2001      	movs	r0, #1
   14742:	47a8      	blx	r5
	error = platform_write(ALS_WL, msgOutlightbuffer,VemlWriteByteLen);
   14744:	2202      	movs	r2, #2
   14746:	0021      	movs	r1, r4
   14748:	2002      	movs	r0, #2
   1474a:	47a8      	blx	r5
	error = platform_write(POWER_SAVING, msgOutlightbuffer,VemlWriteByteLen);
   1474c:	2202      	movs	r2, #2
   1474e:	0021      	movs	r1, r4
   14750:	2003      	movs	r0, #3
   14752:	47a8      	blx	r5
	error = platform_write(ALS, msgOutlightbuffer,VemlWriteByteLen);
   14754:	2202      	movs	r2, #2
   14756:	0021      	movs	r1, r4
   14758:	2004      	movs	r0, #4
   1475a:	47a8      	blx	r5
	error = platform_write(WHITE, msgOutlightbuffer,VemlWriteByteLen);
   1475c:	2202      	movs	r2, #2
   1475e:	0021      	movs	r1, r4
   14760:	2005      	movs	r0, #5
   14762:	47a8      	blx	r5
	error = platform_write(ALS_INT, msgOutlightbuffer,VemlWriteByteLen);
   14764:	2202      	movs	r2, #2
   14766:	0021      	movs	r1, r4
   14768:	2006      	movs	r0, #6
   1476a:	47a8      	blx	r5
}
   1476c:	bd70      	pop	{r4, r5, r6, pc}
   1476e:	46c0      	nop			; (mov r8, r8)
   14770:	200043cc 	.word	0x200043cc
   14774:	000146c1 	.word	0x000146c1

00014778 <VEML_Power_On>:
{
   14778:	b510      	push	{r4, lr}
	msgOutlightbuffer[0] = 0x00;
   1477a:	4905      	ldr	r1, [pc, #20]	; (14790 <VEML_Power_On+0x18>)
   1477c:	2300      	movs	r3, #0
   1477e:	700b      	strb	r3, [r1, #0]
	msgOutlightbuffer[1] = 0x08;
   14780:	3308      	adds	r3, #8
   14782:	704b      	strb	r3, [r1, #1]
	error = platform_write(ALS_CONF, msgOutlightbuffer,VemlWriteByteLen);
   14784:	2202      	movs	r2, #2
   14786:	2000      	movs	r0, #0
   14788:	4b02      	ldr	r3, [pc, #8]	; (14794 <VEML_Power_On+0x1c>)
   1478a:	4798      	blx	r3
}
   1478c:	bd10      	pop	{r4, pc}
   1478e:	46c0      	nop			; (mov r8, r8)
   14790:	200043cc 	.word	0x200043cc
   14794:	000146c1 	.word	0x000146c1

00014798 <VEML_ReadALSData>:
{
   14798:	b570      	push	{r4, r5, r6, lr}
   1479a:	0005      	movs	r5, r0
	error = platform_read(ALS, msgInlightbuffer,VemlReadByteLen);
   1479c:	4c05      	ldr	r4, [pc, #20]	; (147b4 <VEML_ReadALSData+0x1c>)
   1479e:	2202      	movs	r2, #2
   147a0:	0021      	movs	r1, r4
   147a2:	2004      	movs	r0, #4
   147a4:	4b04      	ldr	r3, [pc, #16]	; (147b8 <VEML_ReadALSData+0x20>)
   147a6:	4798      	blx	r3
	*readdata = (uint32_t)msgInlightbuffer[0] | ((uint32_t)msgInlightbuffer[1] <<8);
   147a8:	7863      	ldrb	r3, [r4, #1]
   147aa:	021b      	lsls	r3, r3, #8
   147ac:	7822      	ldrb	r2, [r4, #0]
   147ae:	4313      	orrs	r3, r2
   147b0:	602b      	str	r3, [r5, #0]
}
   147b2:	bd70      	pop	{r4, r5, r6, pc}
   147b4:	200043bc 	.word	0x200043bc
   147b8:	000146f5 	.word	0x000146f5

000147bc <MicroOLEDcommand>:
	For I2C  we use the write functions
	defined in hardware.cpp to send the data.
*/

int MicroOLEDcommand(uint8_t c)
{
   147bc:	b500      	push	{lr}
   147be:	b083      	sub	sp, #12
	// Write to our address, make sure it knows we're sending a
	// command:
	uint8_t msg[2]={I2C_COMMAND,c};
   147c0:	ab01      	add	r3, sp, #4
   147c2:	2200      	movs	r2, #0
   147c4:	701a      	strb	r2, [r3, #0]
   147c6:	7058      	strb	r0, [r3, #1]
	OLEDData.address = OLED_I2C_ADDRESS_SA0_1;
   147c8:	4805      	ldr	r0, [pc, #20]	; (147e0 <MicroOLEDcommand+0x24>)
   147ca:	213d      	movs	r1, #61	; 0x3d
   147cc:	7001      	strb	r1, [r0, #0]
	OLEDData.msgOut = &msg;
   147ce:	6043      	str	r3, [r0, #4]
	OLEDData.lenOut = sizeof(msg);
   147d0:	2302      	movs	r3, #2
   147d2:	81c3      	strh	r3, [r0, #14]
	OLEDData.lenIn = 0;
   147d4:	8182      	strh	r2, [r0, #12]
	int error = I2cWriteDataWait(&OLEDData, 100);
   147d6:	3127      	adds	r1, #39	; 0x27
   147d8:	4b02      	ldr	r3, [pc, #8]	; (147e4 <MicroOLEDcommand+0x28>)
   147da:	4798      	blx	r3
	return error;

}
   147dc:	b003      	add	sp, #12
   147de:	bd00      	pop	{pc}
   147e0:	200043d0 	.word	0x200043d0
   147e4:	00014551 	.word	0x00014551

000147e8 <MicroOLEDdata>:
	For SPI we set the DC and CS pins here, and call spiTransfer(byte)
	to send the data. For I2C and Parallel we use the write functions
	defined in hardware.cpp to send the data.
*/
int MicroOLEDdata(uint8_t c)
{
   147e8:	b500      	push	{lr}
   147ea:	b083      	sub	sp, #12
	uint8_t msg[2]={I2C_DATA,c};
   147ec:	ab01      	add	r3, sp, #4
   147ee:	2240      	movs	r2, #64	; 0x40
   147f0:	701a      	strb	r2, [r3, #0]
   147f2:	7058      	strb	r0, [r3, #1]
	OLEDData.address = OLED_I2C_ADDRESS_SA0_1;
   147f4:	4806      	ldr	r0, [pc, #24]	; (14810 <MicroOLEDdata+0x28>)
   147f6:	3a03      	subs	r2, #3
   147f8:	7002      	strb	r2, [r0, #0]
	OLEDData.msgOut = &msg;
   147fa:	6043      	str	r3, [r0, #4]
	OLEDData.lenOut = sizeof(msg);
   147fc:	2302      	movs	r3, #2
   147fe:	81c3      	strh	r3, [r0, #14]
	OLEDData.lenIn = 0;
   14800:	2300      	movs	r3, #0
   14802:	8183      	strh	r3, [r0, #12]
	int error = I2cWriteDataWait(&OLEDData, 100);
   14804:	2164      	movs	r1, #100	; 0x64
   14806:	4b03      	ldr	r3, [pc, #12]	; (14814 <MicroOLEDdata+0x2c>)
   14808:	4798      	blx	r3
	return error;
	
}
   1480a:	b003      	add	sp, #12
   1480c:	bd00      	pop	{pc}
   1480e:	46c0      	nop			; (mov r8, r8)
   14810:	200043d0 	.word	0x200043d0
   14814:	00014551 	.word	0x00014551

00014818 <MicroOLEDsetPageAddress>:

/** \brief Set SSD1306 page address.
    Send page address command and address to the SSD1306 OLED controller.
*/
void MicroOLEDsetPageAddress(uint8_t add)
{
   14818:	b510      	push	{r4, lr}
	add = 0xb0 | add;
   1481a:	23b0      	movs	r3, #176	; 0xb0
	MicroOLEDcommand(add);
   1481c:	4318      	orrs	r0, r3
   1481e:	4b01      	ldr	r3, [pc, #4]	; (14824 <MicroOLEDsetPageAddress+0xc>)
   14820:	4798      	blx	r3
	return;
}
   14822:	bd10      	pop	{r4, pc}
   14824:	000147bd 	.word	0x000147bd

00014828 <MicroOLEDsetColumnAddress>:

/** \brief Set SSD1306 column address.
    Send column address command and address to the SSD1306 OLED controller.
*/
void MicroOLEDsetColumnAddress(uint8_t add)
{
   14828:	b570      	push	{r4, r5, r6, lr}
   1482a:	0005      	movs	r5, r0
	MicroOLEDcommand((0x10 | (add >> 4)) + 0x02);
   1482c:	0900      	lsrs	r0, r0, #4
   1482e:	2310      	movs	r3, #16
   14830:	4318      	orrs	r0, r3
   14832:	3002      	adds	r0, #2
   14834:	b2c0      	uxtb	r0, r0
   14836:	4c03      	ldr	r4, [pc, #12]	; (14844 <MicroOLEDsetColumnAddress+0x1c>)
   14838:	47a0      	blx	r4
	MicroOLEDcommand((0x0f & add));
   1483a:	200f      	movs	r0, #15
   1483c:	4028      	ands	r0, r5
   1483e:	47a0      	blx	r4
	return;
}
   14840:	bd70      	pop	{r4, r5, r6, pc}
   14842:	46c0      	nop			; (mov r8, r8)
   14844:	000147bd 	.word	0x000147bd

00014848 <MicroOLEDdisplay>:
{
   14848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1484a:	46ce      	mov	lr, r9
   1484c:	4647      	mov	r7, r8
   1484e:	b580      	push	{r7, lr}
   14850:	4d0e      	ldr	r5, [pc, #56]	; (1488c <MicroOLEDdisplay+0x44>)
   14852:	3540      	adds	r5, #64	; 0x40
	for (i = 0; i < 6; i++)
   14854:	2700      	movs	r7, #0
		MicroOLEDsetPageAddress(i);
   14856:	4b0e      	ldr	r3, [pc, #56]	; (14890 <MicroOLEDdisplay+0x48>)
   14858:	4699      	mov	r9, r3
		MicroOLEDsetColumnAddress(0);
   1485a:	4b0e      	ldr	r3, [pc, #56]	; (14894 <MicroOLEDdisplay+0x4c>)
   1485c:	4698      	mov	r8, r3
			error= MicroOLEDdata(screenmemory[i * 0x40 + j]);
   1485e:	4e0e      	ldr	r6, [pc, #56]	; (14898 <MicroOLEDdisplay+0x50>)
		MicroOLEDsetPageAddress(i);
   14860:	0038      	movs	r0, r7
   14862:	47c8      	blx	r9
		MicroOLEDsetColumnAddress(0);
   14864:	2000      	movs	r0, #0
   14866:	47c0      	blx	r8
   14868:	002c      	movs	r4, r5
   1486a:	3c40      	subs	r4, #64	; 0x40
			error= MicroOLEDdata(screenmemory[i * 0x40 + j]);
   1486c:	7820      	ldrb	r0, [r4, #0]
   1486e:	47b0      	blx	r6
			if (ERROR_NONE != error){
   14870:	2800      	cmp	r0, #0
   14872:	d107      	bne.n	14884 <MicroOLEDdisplay+0x3c>
   14874:	3401      	adds	r4, #1
		for (j = 0; j < 0x40; j++)
   14876:	42ac      	cmp	r4, r5
   14878:	d1f8      	bne.n	1486c <MicroOLEDdisplay+0x24>
	for (i = 0; i < 6; i++)
   1487a:	3701      	adds	r7, #1
   1487c:	b2ff      	uxtb	r7, r7
   1487e:	3540      	adds	r5, #64	; 0x40
   14880:	2f06      	cmp	r7, #6
   14882:	d1ed      	bne.n	14860 <MicroOLEDdisplay+0x18>
}
   14884:	bc0c      	pop	{r2, r3}
   14886:	4690      	mov	r8, r2
   14888:	4699      	mov	r9, r3
   1488a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1488c:	20000948 	.word	0x20000948
   14890:	00014819 	.word	0x00014819
   14894:	00014829 	.word	0x00014829
   14898:	000147e9 	.word	0x000147e9

0001489c <MicroOLEDclear>:
{
   1489c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1489e:	46ce      	mov	lr, r9
   148a0:	4647      	mov	r7, r8
   148a2:	b580      	push	{r7, lr}
   148a4:	b0a1      	sub	sp, #132	; 0x84
	if (mode == ALL)
   148a6:	2801      	cmp	r0, #1
   148a8:	d00d      	beq.n	148c6 <MicroOLEDclear+0x2a>
		memset(screenmemory, 0, sizeof(screenmemory)); // (64 x 48) / 8 = 384
   148aa:	22c0      	movs	r2, #192	; 0xc0
   148ac:	0052      	lsls	r2, r2, #1
   148ae:	2100      	movs	r1, #0
   148b0:	4812      	ldr	r0, [pc, #72]	; (148fc <MicroOLEDclear+0x60>)
   148b2:	4b13      	ldr	r3, [pc, #76]	; (14900 <MicroOLEDclear+0x64>)
   148b4:	4798      	blx	r3
		MicroOLEDdisplay();
   148b6:	4b13      	ldr	r3, [pc, #76]	; (14904 <MicroOLEDclear+0x68>)
   148b8:	4798      	blx	r3
int error = NULL;
   148ba:	2000      	movs	r0, #0
}
   148bc:	b021      	add	sp, #132	; 0x84
   148be:	bc0c      	pop	{r2, r3}
   148c0:	4690      	mov	r8, r2
   148c2:	4699      	mov	r9, r3
   148c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   148c6:	2600      	movs	r6, #0
			MicroOLEDsetPageAddress(i);
   148c8:	4b0f      	ldr	r3, [pc, #60]	; (14908 <MicroOLEDclear+0x6c>)
   148ca:	4699      	mov	r9, r3
			MicroOLEDsetColumnAddress(0);
   148cc:	4b0f      	ldr	r3, [pc, #60]	; (1490c <MicroOLEDclear+0x70>)
   148ce:	4698      	mov	r8, r3
			memset(zeros, 0, 0x80);
   148d0:	4f0b      	ldr	r7, [pc, #44]	; (14900 <MicroOLEDclear+0x64>)
			MicroOLEDsetPageAddress(i);
   148d2:	b2f0      	uxtb	r0, r6
   148d4:	47c8      	blx	r9
			MicroOLEDsetColumnAddress(0);
   148d6:	2000      	movs	r0, #0
   148d8:	47c0      	blx	r8
			memset(zeros, 0, 0x80);
   148da:	2280      	movs	r2, #128	; 0x80
   148dc:	2100      	movs	r1, #0
   148de:	4668      	mov	r0, sp
   148e0:	47b8      	blx	r7
   148e2:	2480      	movs	r4, #128	; 0x80
				error= MicroOLEDdata(0);
   148e4:	4d0a      	ldr	r5, [pc, #40]	; (14910 <MicroOLEDclear+0x74>)
   148e6:	2000      	movs	r0, #0
   148e8:	47a8      	blx	r5
				if (ERROR_NONE != error){
   148ea:	2800      	cmp	r0, #0
   148ec:	d1e6      	bne.n	148bc <MicroOLEDclear+0x20>
   148ee:	3c01      	subs	r4, #1
			for (int j = 0; j < 0x80; j++)
   148f0:	2c00      	cmp	r4, #0
   148f2:	d1f8      	bne.n	148e6 <MicroOLEDclear+0x4a>
		for (int i = 0; i < 8; i++)
   148f4:	3601      	adds	r6, #1
   148f6:	2e08      	cmp	r6, #8
   148f8:	d1eb      	bne.n	148d2 <MicroOLEDclear+0x36>
   148fa:	e7df      	b.n	148bc <MicroOLEDclear+0x20>
   148fc:	20000948 	.word	0x20000948
   14900:	00025d0f 	.word	0x00025d0f
   14904:	00014849 	.word	0x00014849
   14908:	00014819 	.word	0x00014819
   1490c:	00014829 	.word	0x00014829
   14910:	000147e9 	.word	0x000147e9

00014914 <MicroOLEDsetFontType>:
    Set the current font type number, ie changing to different fonts base on the type provided.
*/
uint8_t MicroOLEDsetFontType(uint8_t type)
{
    if ((type >= MAXFONTS) || (fontsPointer[type] == NULL))
        return false;
   14914:	2300      	movs	r3, #0
    if ((type >= MAXFONTS) || (fontsPointer[type] == NULL))
   14916:	2804      	cmp	r0, #4
   14918:	d81a      	bhi.n	14950 <MicroOLEDsetFontType+0x3c>
   1491a:	0083      	lsls	r3, r0, #2
   1491c:	4a0e      	ldr	r2, [pc, #56]	; (14958 <MicroOLEDsetFontType+0x44>)
   1491e:	589b      	ldr	r3, [r3, r2]
   14920:	2b00      	cmp	r3, #0
   14922:	d017      	beq.n	14954 <MicroOLEDsetFontType+0x40>

	fontType = type;
   14924:	4a0d      	ldr	r2, [pc, #52]	; (1495c <MicroOLEDsetFontType+0x48>)
   14926:	7010      	strb	r0, [r2, #0]
	fontWidth = *(fontsPointer[fontType] + 0);
   14928:	4a0d      	ldr	r2, [pc, #52]	; (14960 <MicroOLEDsetFontType+0x4c>)
   1492a:	7819      	ldrb	r1, [r3, #0]
   1492c:	7011      	strb	r1, [r2, #0]
	fontHeight = *(fontsPointer[fontType] + 1);
   1492e:	4a0d      	ldr	r2, [pc, #52]	; (14964 <MicroOLEDsetFontType+0x50>)
   14930:	7919      	ldrb	r1, [r3, #4]
   14932:	7011      	strb	r1, [r2, #0]
	fontStartChar = *(fontsPointer[fontType] + 2);
   14934:	4a0c      	ldr	r2, [pc, #48]	; (14968 <MicroOLEDsetFontType+0x54>)
   14936:	7a19      	ldrb	r1, [r3, #8]
   14938:	7011      	strb	r1, [r2, #0]
	fontTotalChar = *(fontsPointer[fontType] + 3);
   1493a:	4a0c      	ldr	r2, [pc, #48]	; (1496c <MicroOLEDsetFontType+0x58>)
   1493c:	7b19      	ldrb	r1, [r3, #12]
   1493e:	7011      	strb	r1, [r2, #0]
	fontMapWidth = (*(fontsPointer[fontType] + 4) * 100) + *(fontsPointer[fontType] + 5); // two bytes values into integer 16
   14940:	2264      	movs	r2, #100	; 0x64
   14942:	6919      	ldr	r1, [r3, #16]
   14944:	434a      	muls	r2, r1
   14946:	695b      	ldr	r3, [r3, #20]
   14948:	189b      	adds	r3, r3, r2
   1494a:	4a09      	ldr	r2, [pc, #36]	; (14970 <MicroOLEDsetFontType+0x5c>)
   1494c:	8013      	strh	r3, [r2, #0]
	return true;
   1494e:	2301      	movs	r3, #1
}
   14950:	0018      	movs	r0, r3
   14952:	4770      	bx	lr
        return false;
   14954:	2300      	movs	r3, #0
   14956:	e7fb      	b.n	14950 <MicroOLEDsetFontType+0x3c>
   14958:	200000a0 	.word	0x200000a0
   1495c:	200041e1 	.word	0x200041e1
   14960:	200041e3 	.word	0x200041e3
   14964:	200041e2 	.word	0x200041e2
   14968:	200041e0 	.word	0x200041e0
   1496c:	200041ee 	.word	0x200041ee
   14970:	200041e6 	.word	0x200041e6

00014974 <InitializeOLEDdriver>:
{
   14974:	b510      	push	{r4, lr}
	MicroOLEDsetFontType(0);
   14976:	2000      	movs	r0, #0
   14978:	4b29      	ldr	r3, [pc, #164]	; (14a20 <InitializeOLEDdriver+0xac>)
   1497a:	4798      	blx	r3
/** \brief Set color.
    Set the current draw's color. Only WHITE and BLACK available.
*/
void MicroOLEDsetColor(uint8_t color)
{
	foreColor = color;
   1497c:	2201      	movs	r2, #1
   1497e:	4b29      	ldr	r3, [pc, #164]	; (14a24 <InitializeOLEDdriver+0xb0>)
   14980:	701a      	strb	r2, [r3, #0]
	drawMode = mode;
   14982:	2300      	movs	r3, #0
   14984:	4a28      	ldr	r2, [pc, #160]	; (14a28 <InitializeOLEDdriver+0xb4>)
   14986:	7013      	strb	r3, [r2, #0]
	cursorX = x;
   14988:	4a28      	ldr	r2, [pc, #160]	; (14a2c <InitializeOLEDdriver+0xb8>)
   1498a:	7013      	strb	r3, [r2, #0]
	cursorY = y;
   1498c:	4a28      	ldr	r2, [pc, #160]	; (14a30 <InitializeOLEDdriver+0xbc>)
   1498e:	7013      	strb	r3, [r2, #0]
	int error = MicroOLEDcommand(DISPLAYOFF); // 0xAE
   14990:	20ae      	movs	r0, #174	; 0xae
   14992:	4b28      	ldr	r3, [pc, #160]	; (14a34 <InitializeOLEDdriver+0xc0>)
   14994:	4798      	blx	r3
	if(ERROR_NONE != error)
   14996:	2800      	cmp	r0, #0
   14998:	d039      	beq.n	14a0e <InitializeOLEDdriver+0x9a>
		SerialConsoleWriteString("Error initializing OLED!\r\n");
   1499a:	4827      	ldr	r0, [pc, #156]	; (14a38 <InitializeOLEDdriver+0xc4>)
   1499c:	4b27      	ldr	r3, [pc, #156]	; (14a3c <InitializeOLEDdriver+0xc8>)
   1499e:	4798      	blx	r3
	error = MicroOLEDcommand(SETDISPLAYCLOCKDIV); // 0xD5
   149a0:	20d5      	movs	r0, #213	; 0xd5
   149a2:	4b24      	ldr	r3, [pc, #144]	; (14a34 <InitializeOLEDdriver+0xc0>)
   149a4:	4798      	blx	r3
	if(ERROR_NONE != error)
   149a6:	2800      	cmp	r0, #0
   149a8:	d135      	bne.n	14a16 <InitializeOLEDdriver+0xa2>
		SerialConsoleWriteString("OLED clock set!\r\n");
   149aa:	4825      	ldr	r0, [pc, #148]	; (14a40 <InitializeOLEDdriver+0xcc>)
   149ac:	4b23      	ldr	r3, [pc, #140]	; (14a3c <InitializeOLEDdriver+0xc8>)
   149ae:	4798      	blx	r3
	MicroOLEDcommand(0x80);				 // the suggested ratio 0x80
   149b0:	2080      	movs	r0, #128	; 0x80
   149b2:	4c20      	ldr	r4, [pc, #128]	; (14a34 <InitializeOLEDdriver+0xc0>)
   149b4:	47a0      	blx	r4
	MicroOLEDcommand(SETMULTIPLEX); // 0xA8
   149b6:	20a8      	movs	r0, #168	; 0xa8
   149b8:	47a0      	blx	r4
	MicroOLEDcommand(0x2F);
   149ba:	202f      	movs	r0, #47	; 0x2f
   149bc:	47a0      	blx	r4
	MicroOLEDcommand(SETDISPLAYOFFSET); // 0xD3
   149be:	20d3      	movs	r0, #211	; 0xd3
   149c0:	47a0      	blx	r4
	MicroOLEDcommand(0x0);			   // no offset
   149c2:	2000      	movs	r0, #0
   149c4:	47a0      	blx	r4
	MicroOLEDcommand(SETSTARTLINE | 0x0); // line #0
   149c6:	2040      	movs	r0, #64	; 0x40
   149c8:	47a0      	blx	r4
	MicroOLEDcommand(CHARGEPUMP); // enable charge pump
   149ca:	208d      	movs	r0, #141	; 0x8d
   149cc:	47a0      	blx	r4
	MicroOLEDcommand(0x14);
   149ce:	2014      	movs	r0, #20
   149d0:	47a0      	blx	r4
	MicroOLEDcommand(NORMALDISPLAY);		 // 0xA6
   149d2:	20a6      	movs	r0, #166	; 0xa6
   149d4:	47a0      	blx	r4
	MicroOLEDcommand(DISPLAYALLONRESUME); // 0xA4
   149d6:	20a4      	movs	r0, #164	; 0xa4
   149d8:	47a0      	blx	r4
	MicroOLEDcommand(SEGREMAP | 0x1);
   149da:	20a1      	movs	r0, #161	; 0xa1
   149dc:	47a0      	blx	r4
	MicroOLEDcommand(COMSCANDEC);
   149de:	20c8      	movs	r0, #200	; 0xc8
   149e0:	47a0      	blx	r4
	MicroOLEDcommand(SETCOMPINS); // 0xDA
   149e2:	20da      	movs	r0, #218	; 0xda
   149e4:	47a0      	blx	r4
	MicroOLEDcommand(0x12);
   149e6:	2012      	movs	r0, #18
   149e8:	47a0      	blx	r4
	MicroOLEDcommand(SETCONTRAST); // 0x81
   149ea:	2081      	movs	r0, #129	; 0x81
   149ec:	47a0      	blx	r4
	MicroOLEDcommand(0x8F);
   149ee:	208f      	movs	r0, #143	; 0x8f
   149f0:	47a0      	blx	r4
	MicroOLEDcommand(SETPRECHARGE); // 0xd9
   149f2:	20d9      	movs	r0, #217	; 0xd9
   149f4:	47a0      	blx	r4
	MicroOLEDcommand(0xF1);
   149f6:	20f1      	movs	r0, #241	; 0xf1
   149f8:	47a0      	blx	r4
	MicroOLEDcommand(SETVCOMDESELECT); // 0xDB
   149fa:	20db      	movs	r0, #219	; 0xdb
   149fc:	47a0      	blx	r4
	MicroOLEDcommand(0x40);
   149fe:	2040      	movs	r0, #64	; 0x40
   14a00:	47a0      	blx	r4
	MicroOLEDcommand(DISPLAYON); //--turn on oled panel
   14a02:	20af      	movs	r0, #175	; 0xaf
   14a04:	47a0      	blx	r4
	error = MicroOLEDclear(!ALL);			// Erase hardware memory inside the OLED controller to avoid random data in memory.
   14a06:	2000      	movs	r0, #0
   14a08:	4b0e      	ldr	r3, [pc, #56]	; (14a44 <InitializeOLEDdriver+0xd0>)
   14a0a:	4798      	blx	r3
}
   14a0c:	bd10      	pop	{r4, pc}
		SerialConsoleWriteString("OLED Turned off!\r\n");
   14a0e:	480e      	ldr	r0, [pc, #56]	; (14a48 <InitializeOLEDdriver+0xd4>)
   14a10:	4b0a      	ldr	r3, [pc, #40]	; (14a3c <InitializeOLEDdriver+0xc8>)
   14a12:	4798      	blx	r3
   14a14:	e7c4      	b.n	149a0 <InitializeOLEDdriver+0x2c>
		SerialConsoleWriteString("Error initializing OLED clock!\r\n");
   14a16:	480d      	ldr	r0, [pc, #52]	; (14a4c <InitializeOLEDdriver+0xd8>)
   14a18:	4b08      	ldr	r3, [pc, #32]	; (14a3c <InitializeOLEDdriver+0xc8>)
   14a1a:	4798      	blx	r3
   14a1c:	e7c8      	b.n	149b0 <InitializeOLEDdriver+0x3c>
   14a1e:	46c0      	nop			; (mov r8, r8)
   14a20:	00014915 	.word	0x00014915
   14a24:	200041e8 	.word	0x200041e8
   14a28:	200041ed 	.word	0x200041ed
   14a2c:	200041e4 	.word	0x200041e4
   14a30:	200041e9 	.word	0x200041e9
   14a34:	000147bd 	.word	0x000147bd
   14a38:	00027be4 	.word	0x00027be4
   14a3c:	0001904d 	.word	0x0001904d
   14a40:	00027c38 	.word	0x00027c38
   14a44:	0001489d 	.word	0x0001489d
   14a48:	00027c00 	.word	0x00027c00
   14a4c:	00027c14 	.word	0x00027c14

00014a50 <MicroOLEDdrawBitmap>:

	return 1;
}

void MicroOLEDdrawBitmap(uint8_t *bitArray)
{
   14a50:	b510      	push	{r4, lr}
   14a52:	0004      	movs	r4, r0
	MicroOLEDclear(!ALL);
   14a54:	2000      	movs	r0, #0
   14a56:	4b07      	ldr	r3, [pc, #28]	; (14a74 <MicroOLEDdrawBitmap+0x24>)
   14a58:	4798      	blx	r3
	for (int i = 0; i < (LCDWIDTH * LCDHEIGHT / 8); i++)
   14a5a:	2300      	movs	r3, #0
	screenmemory[i] = bitArray[i];
   14a5c:	4806      	ldr	r0, [pc, #24]	; (14a78 <MicroOLEDdrawBitmap+0x28>)
	for (int i = 0; i < (LCDWIDTH * LCDHEIGHT / 8); i++)
   14a5e:	21c0      	movs	r1, #192	; 0xc0
   14a60:	0049      	lsls	r1, r1, #1
	screenmemory[i] = bitArray[i];
   14a62:	5ce2      	ldrb	r2, [r4, r3]
   14a64:	541a      	strb	r2, [r3, r0]
	for (int i = 0; i < (LCDWIDTH * LCDHEIGHT / 8); i++)
   14a66:	3301      	adds	r3, #1
   14a68:	428b      	cmp	r3, r1
   14a6a:	d1fa      	bne.n	14a62 <MicroOLEDdrawBitmap+0x12>
	MicroOLEDdisplay();
   14a6c:	4b03      	ldr	r3, [pc, #12]	; (14a7c <MicroOLEDdrawBitmap+0x2c>)
   14a6e:	4798      	blx	r3
}
   14a70:	bd10      	pop	{r4, pc}
   14a72:	46c0      	nop			; (mov r8, r8)
   14a74:	0001489d 	.word	0x0001489d
   14a78:	20000948 	.word	0x20000948
   14a7c:	00014849 	.word	0x00014849

00014a80 <MicroOLEDdrawWinner>:

void MicroOLEDdrawWinner(){
   14a80:	b510      	push	{r4, lr}
	MicroOLEDdrawBitmap(winner);
   14a82:	4802      	ldr	r0, [pc, #8]	; (14a8c <MicroOLEDdrawWinner+0xc>)
   14a84:	4b02      	ldr	r3, [pc, #8]	; (14a90 <MicroOLEDdrawWinner+0x10>)
   14a86:	4798      	blx	r3
	
}
   14a88:	bd10      	pop	{r4, pc}
   14a8a:	46c0      	nop			; (mov r8, r8)
   14a8c:	00029004 	.word	0x00029004
   14a90:	00014a51 	.word	0x00014a51

00014a94 <MicroOLEDdrawLoser>:

void MicroOLEDdrawLoser(){
   14a94:	b510      	push	{r4, lr}
	MicroOLEDdrawBitmap(loser);
   14a96:	4802      	ldr	r0, [pc, #8]	; (14aa0 <MicroOLEDdrawLoser+0xc>)
   14a98:	4b02      	ldr	r3, [pc, #8]	; (14aa4 <MicroOLEDdrawLoser+0x10>)
   14a9a:	4798      	blx	r3
}
   14a9c:	bd10      	pop	{r4, pc}
   14a9e:	46c0      	nop			; (mov r8, r8)
   14aa0:	00028d78 	.word	0x00028d78
   14aa4:	00014a51 	.word	0x00014a51

00014aa8 <MicroOLEDdrawTurns>:

void MicroOLEDdrawTurns(){
   14aa8:	b510      	push	{r4, lr}
	MicroOLEDdrawBitmap(Turns);
   14aaa:	4802      	ldr	r0, [pc, #8]	; (14ab4 <MicroOLEDdrawTurns+0xc>)
   14aac:	4b02      	ldr	r3, [pc, #8]	; (14ab8 <MicroOLEDdrawTurns+0x10>)
   14aae:	4798      	blx	r3
}
   14ab0:	bd10      	pop	{r4, pc}
   14ab2:	46c0      	nop			; (mov r8, r8)
   14ab4:	00027c4c 	.word	0x00027c4c
   14ab8:	00014a51 	.word	0x00014a51

00014abc <MicroOLEDdrawWait>:

void MicroOLEDdrawWait(){
   14abc:	b510      	push	{r4, lr}
	MicroOLEDdrawBitmap(WAIT);
   14abe:	4802      	ldr	r0, [pc, #8]	; (14ac8 <MicroOLEDdrawWait+0xc>)
   14ac0:	4b02      	ldr	r3, [pc, #8]	; (14acc <MicroOLEDdrawWait+0x10>)
   14ac2:	4798      	blx	r3
   14ac4:	bd10      	pop	{r4, pc}
   14ac6:	46c0      	nop			; (mov r8, r8)
   14ac8:	00027dcc 	.word	0x00027dcc
   14acc:	00014a51 	.word	0x00014a51

00014ad0 <SeesawGetKeypadCount>:
* @details 	Assumes Seesaw is already initialized
                				
* @return		Returns the number of events in the buffer. Use SeesawReadKeypad to read these events.
* @note         
*****************************************************************************/
uint8_t SeesawGetKeypadCount(void) {
   14ad0:	b500      	push	{lr}
   14ad2:	b083      	sub	sp, #12
	uint8_t count = 0;
   14ad4:	466b      	mov	r3, sp
   14ad6:	2200      	movs	r2, #0
   14ad8:	71da      	strb	r2, [r3, #7]
   14ada:	3307      	adds	r3, #7
	seesawData.address = NEO_TRELLIS_ADDR;
   14adc:	480b      	ldr	r0, [pc, #44]	; (14b0c <SeesawGetKeypadCount+0x3c>)
   14ade:	322e      	adds	r2, #46	; 0x2e
   14ae0:	7002      	strb	r2, [r0, #0]
	seesawData.msgOut = &msgKeypadGetCount;
   14ae2:	4a0b      	ldr	r2, [pc, #44]	; (14b10 <SeesawGetKeypadCount+0x40>)
   14ae4:	6042      	str	r2, [r0, #4]
	seesawData.lenOut = sizeof(msgKeypadGetCount);
   14ae6:	2202      	movs	r2, #2
   14ae8:	81c2      	strh	r2, [r0, #14]
	seesawData.msgIn = &count;
   14aea:	6083      	str	r3, [r0, #8]
	seesawData.lenIn = 1;
   14aec:	2301      	movs	r3, #1
   14aee:	8183      	strh	r3, [r0, #12]

	int error = I2cReadDataWait(&seesawData, 0, 100);
   14af0:	3262      	adds	r2, #98	; 0x62
   14af2:	2100      	movs	r1, #0
   14af4:	4b07      	ldr	r3, [pc, #28]	; (14b14 <SeesawGetKeypadCount+0x44>)
   14af6:	4798      	blx	r3

	if(ERROR_NONE != error)
   14af8:	2800      	cmp	r0, #0
   14afa:	d103      	bne.n	14b04 <SeesawGetKeypadCount+0x34>
	{
		SerialConsoleWriteString("Error reading Seesaw counts!/r/n");
	}
	return count;
   14afc:	466b      	mov	r3, sp
   14afe:	79d8      	ldrb	r0, [r3, #7]
}
   14b00:	b003      	add	sp, #12
   14b02:	bd00      	pop	{pc}
		SerialConsoleWriteString("Error reading Seesaw counts!/r/n");
   14b04:	4804      	ldr	r0, [pc, #16]	; (14b18 <SeesawGetKeypadCount+0x48>)
   14b06:	4b05      	ldr	r3, [pc, #20]	; (14b1c <SeesawGetKeypadCount+0x4c>)
   14b08:	4798      	blx	r3
   14b0a:	e7f7      	b.n	14afc <SeesawGetKeypadCount+0x2c>
   14b0c:	200043e0 	.word	0x200043e0
   14b10:	0002929c 	.word	0x0002929c
   14b14:	000145b1 	.word	0x000145b1
   14b18:	00029270 	.word	0x00029270
   14b1c:	0001904d 	.word	0x0001904d

00014b20 <SeesawReadKeypad>:
                				
* @return		Returns zero if no I2C errors occurred. Other number in case of error
* @note         Use SeesawGetKeypadCount to know how many events are in buffer.
*****************************************************************************/
int32_t SeesawReadKeypad(uint8_t *buffer, uint8_t count)
	{
   14b20:	b510      	push	{r4, lr}
   14b22:	b082      	sub	sp, #8
	if (count == 0) return ERROR_NONE;
   14b24:	2300      	movs	r3, #0
   14b26:	2900      	cmp	r1, #0
   14b28:	d102      	bne.n	14b30 <SeesawReadKeypad+0x10>
	if(ERROR_NONE != error)
	{
		SerialConsoleWriteString("Error reading Seesaw counts!/r/n");
	}
	return error;
}
   14b2a:	0018      	movs	r0, r3
   14b2c:	b002      	add	sp, #8
   14b2e:	bd10      	pop	{r4, pc}
	uint8_t cmd[] = {SEESAW_KEYPAD_BASE, SEESAW_KEYPAD_FIFO};
   14b30:	aa01      	add	r2, sp, #4
   14b32:	4b0c      	ldr	r3, [pc, #48]	; (14b64 <SeesawReadKeypad+0x44>)
   14b34:	881b      	ldrh	r3, [r3, #0]
   14b36:	8013      	strh	r3, [r2, #0]
	seesawData.address = NEO_TRELLIS_ADDR;
   14b38:	4b0b      	ldr	r3, [pc, #44]	; (14b68 <SeesawReadKeypad+0x48>)
   14b3a:	242e      	movs	r4, #46	; 0x2e
   14b3c:	701c      	strb	r4, [r3, #0]
	seesawData.msgOut = &cmd;
   14b3e:	605a      	str	r2, [r3, #4]
	seesawData.lenOut = sizeof(cmd);
   14b40:	2202      	movs	r2, #2
   14b42:	81da      	strh	r2, [r3, #14]
	seesawData.msgIn = buffer;
   14b44:	6098      	str	r0, [r3, #8]
	seesawData.lenIn = count;
   14b46:	8199      	strh	r1, [r3, #12]
	int error = I2cReadDataWait(&seesawData, 0, 100);
   14b48:	3262      	adds	r2, #98	; 0x62
   14b4a:	2100      	movs	r1, #0
   14b4c:	0018      	movs	r0, r3
   14b4e:	4b07      	ldr	r3, [pc, #28]	; (14b6c <SeesawReadKeypad+0x4c>)
   14b50:	4798      	blx	r3
   14b52:	0004      	movs	r4, r0
	return error;
   14b54:	1e03      	subs	r3, r0, #0
	if(ERROR_NONE != error)
   14b56:	d0e8      	beq.n	14b2a <SeesawReadKeypad+0xa>
		SerialConsoleWriteString("Error reading Seesaw counts!/r/n");
   14b58:	4805      	ldr	r0, [pc, #20]	; (14b70 <SeesawReadKeypad+0x50>)
   14b5a:	4b06      	ldr	r3, [pc, #24]	; (14b74 <SeesawReadKeypad+0x54>)
   14b5c:	4798      	blx	r3
	return error;
   14b5e:	0023      	movs	r3, r4
   14b60:	e7e3      	b.n	14b2a <SeesawReadKeypad+0xa>
   14b62:	46c0      	nop			; (mov r8, r8)
   14b64:	00029184 	.word	0x00029184
   14b68:	200043e0 	.word	0x200043e0
   14b6c:	000145b1 	.word	0x000145b1
   14b70:	00029270 	.word	0x00029270
   14b74:	0001904d 	.word	0x0001904d

00014b78 <SeesawActivateKey>:
                				
* @return		Returns zero if no I2C errors occurred. Other number in case of error
* @note         
*****************************************************************************/
int32_t SeesawActivateKey(uint8_t key, uint8_t edge, bool enable)
	{
   14b78:	b510      	push	{r4, lr}
   14b7a:	b082      	sub	sp, #8
	union keyState ks;
	ks.bit.STATE = enable;
   14b7c:	2401      	movs	r4, #1
	ks.bit.ACTIVE = (1 << edge);
   14b7e:	0023      	movs	r3, r4
   14b80:	408b      	lsls	r3, r1
   14b82:	210f      	movs	r1, #15
   14b84:	4019      	ands	r1, r3
   14b86:	0049      	lsls	r1, r1, #1
   14b88:	2301      	movs	r3, #1
   14b8a:	401a      	ands	r2, r3
   14b8c:	430a      	orrs	r2, r1
	uint8_t cmd[] = {SEESAW_KEYPAD_BASE, SEESAW_KEYPAD_EVENT, key, ks.reg};
   14b8e:	ab01      	add	r3, sp, #4
   14b90:	2110      	movs	r1, #16
   14b92:	7019      	strb	r1, [r3, #0]
   14b94:	705c      	strb	r4, [r3, #1]
   14b96:	7098      	strb	r0, [r3, #2]
   14b98:	70da      	strb	r2, [r3, #3]

	seesawData.address = NEO_TRELLIS_ADDR;
   14b9a:	4806      	ldr	r0, [pc, #24]	; (14bb4 <SeesawActivateKey+0x3c>)
   14b9c:	222e      	movs	r2, #46	; 0x2e
   14b9e:	7002      	strb	r2, [r0, #0]
	seesawData.msgOut = &cmd;
   14ba0:	6043      	str	r3, [r0, #4]
	seesawData.lenOut = sizeof(cmd);
   14ba2:	2304      	movs	r3, #4
   14ba4:	81c3      	strh	r3, [r0, #14]
	seesawData.lenIn = 0;
   14ba6:	2300      	movs	r3, #0
   14ba8:	8183      	strh	r3, [r0, #12]
	int32_t error = I2cWriteDataWait(&seesawData, 100);
   14baa:	3154      	adds	r1, #84	; 0x54
   14bac:	4b02      	ldr	r3, [pc, #8]	; (14bb8 <SeesawActivateKey+0x40>)
   14bae:	4798      	blx	r3
	return error;
}
   14bb0:	b002      	add	sp, #8
   14bb2:	bd10      	pop	{r4, pc}
   14bb4:	200043e0 	.word	0x200043e0
   14bb8:	00014551 	.word	0x00014551

00014bbc <SeesawSetLed>:
* @return		Returns zero if no I2C errors occurred. Other number in case of error
* @note         Note that the LEDs wont turn on until you send a "SeesawOrderLedUpdate" command.
	FOR ESE516 Board, please do not turn ALL the LEDs to maximum brightness (255,255,255)!
*****************************************************************************/
int32_t SeesawSetLed(uint8_t key, uint8_t red, uint8_t green, uint8_t blue)
{
   14bbc:	b530      	push	{r4, r5, lr}
   14bbe:	b083      	sub	sp, #12
	uint8_t write_buffer1[7] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_BUF, 0, 0, green,red, blue};
   14bc0:	240e      	movs	r4, #14
   14bc2:	466d      	mov	r5, sp
   14bc4:	702c      	strb	r4, [r5, #0]
   14bc6:	3c0a      	subs	r4, #10
   14bc8:	706c      	strb	r4, [r5, #1]
   14bca:	712a      	strb	r2, [r5, #4]
   14bcc:	7169      	strb	r1, [r5, #5]
   14bce:	71ab      	strb	r3, [r5, #6]
	uint8_t orderBuffer[2] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_SHOW};

	uint16_t offset = 3 * key; //RGB LED
   14bd0:	0043      	lsls	r3, r0, #1
   14bd2:	18c0      	adds	r0, r0, r3
	write_buffer1[2] = (offset >> 8);
   14bd4:	0a03      	lsrs	r3, r0, #8
   14bd6:	70ab      	strb	r3, [r5, #2]
	write_buffer1[3] = (offset);
   14bd8:	70e8      	strb	r0, [r5, #3]

	seesawData.msgOut = &write_buffer1;
   14bda:	4804      	ldr	r0, [pc, #16]	; (14bec <SeesawSetLed+0x30>)
   14bdc:	6045      	str	r5, [r0, #4]
	seesawData.lenOut = sizeof(write_buffer1);
   14bde:	2307      	movs	r3, #7
   14be0:	81c3      	strh	r3, [r0, #14]
	int error = I2cWriteDataWait(&seesawData, 100);
   14be2:	2164      	movs	r1, #100	; 0x64
   14be4:	4b02      	ldr	r3, [pc, #8]	; (14bf0 <SeesawSetLed+0x34>)
   14be6:	4798      	blx	r3
	return error;

}
   14be8:	b003      	add	sp, #12
   14bea:	bd30      	pop	{r4, r5, pc}
   14bec:	200043e0 	.word	0x200043e0
   14bf0:	00014551 	.word	0x00014551

00014bf4 <SeesawOrderLedUpdate>:
* @return		Returns zero if no I2C errors occurred. Other number in case of error
* @note         Use "SeesawSetLed" to send LED Data. The data will not be use to update the display until this function has been called!

*****************************************************************************/
int32_t SeesawOrderLedUpdate(void)
{
   14bf4:	b500      	push	{lr}
   14bf6:	b083      	sub	sp, #12
	uint8_t orderBuffer[2] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_SHOW};
   14bf8:	ab01      	add	r3, sp, #4
   14bfa:	4a06      	ldr	r2, [pc, #24]	; (14c14 <SeesawOrderLedUpdate+0x20>)
   14bfc:	8892      	ldrh	r2, [r2, #4]
   14bfe:	801a      	strh	r2, [r3, #0]

	seesawData.msgOut = &orderBuffer;
   14c00:	4805      	ldr	r0, [pc, #20]	; (14c18 <SeesawOrderLedUpdate+0x24>)
   14c02:	6043      	str	r3, [r0, #4]
	seesawData.lenOut = sizeof(orderBuffer);
   14c04:	2302      	movs	r3, #2
   14c06:	81c3      	strh	r3, [r0, #14]
	int error = I2cWriteDataWait(&seesawData, 100);
   14c08:	2164      	movs	r1, #100	; 0x64
   14c0a:	4b04      	ldr	r3, [pc, #16]	; (14c1c <SeesawOrderLedUpdate+0x28>)
   14c0c:	4798      	blx	r3
	return error;
}
   14c0e:	b003      	add	sp, #12
   14c10:	bd00      	pop	{pc}
   14c12:	46c0      	nop			; (mov r8, r8)
   14c14:	00029184 	.word	0x00029184
   14c18:	200043e0 	.word	0x200043e0
   14c1c:	00014551 	.word	0x00014551

00014c20 <InitializeSeesaw>:
{
   14c20:	b5f0      	push	{r4, r5, r6, r7, lr}
   14c22:	46ce      	mov	lr, r9
   14c24:	b500      	push	{lr}
   14c26:	b084      	sub	sp, #16
	seesawData.address = NEO_TRELLIS_ADDR;
   14c28:	484b      	ldr	r0, [pc, #300]	; (14d58 <InitializeSeesaw+0x138>)
   14c2a:	232e      	movs	r3, #46	; 0x2e
   14c2c:	7003      	strb	r3, [r0, #0]
	seesawData.msgOut = &msgBaseGetHWID;
   14c2e:	4b4b      	ldr	r3, [pc, #300]	; (14d5c <InitializeSeesaw+0x13c>)
   14c30:	6043      	str	r3, [r0, #4]
	seesawData.lenOut = sizeof(msgBaseGetHWID);
   14c32:	2302      	movs	r3, #2
   14c34:	81c3      	strh	r3, [r0, #14]
	seesawData.msgIn = &readData;
   14c36:	ab03      	add	r3, sp, #12
   14c38:	6083      	str	r3, [r0, #8]
	seesawData.lenIn = 1;
   14c3a:	2301      	movs	r3, #1
   14c3c:	8183      	strh	r3, [r0, #12]
	int error = I2cReadDataWait(&seesawData, 0, 100);
   14c3e:	2264      	movs	r2, #100	; 0x64
   14c40:	2100      	movs	r1, #0
   14c42:	4b47      	ldr	r3, [pc, #284]	; (14d60 <InitializeSeesaw+0x140>)
   14c44:	4798      	blx	r3
	if(ERROR_NONE != error)
   14c46:	2800      	cmp	r0, #0
   14c48:	d149      	bne.n	14cde <InitializeSeesaw+0xbe>
		if(readData[0] != SEESAW_HW_ID_CODE )
   14c4a:	ab03      	add	r3, sp, #12
   14c4c:	781b      	ldrb	r3, [r3, #0]
   14c4e:	2b55      	cmp	r3, #85	; 0x55
   14c50:	d049      	beq.n	14ce6 <InitializeSeesaw+0xc6>
			SerialConsoleWriteString("Error/r/n");
   14c52:	4844      	ldr	r0, [pc, #272]	; (14d64 <InitializeSeesaw+0x144>)
   14c54:	4b44      	ldr	r3, [pc, #272]	; (14d68 <InitializeSeesaw+0x148>)
   14c56:	4798      	blx	r3
	seesawData.msgOut = &msgNeopixelPin;
   14c58:	483f      	ldr	r0, [pc, #252]	; (14d58 <InitializeSeesaw+0x138>)
   14c5a:	4b44      	ldr	r3, [pc, #272]	; (14d6c <InitializeSeesaw+0x14c>)
   14c5c:	6043      	str	r3, [r0, #4]
	seesawData.lenOut = sizeof(msgNeopixelPin);
   14c5e:	2303      	movs	r3, #3
   14c60:	81c3      	strh	r3, [r0, #14]
	error = I2cWriteDataWait(&seesawData, 100);
   14c62:	2164      	movs	r1, #100	; 0x64
   14c64:	4b42      	ldr	r3, [pc, #264]	; (14d70 <InitializeSeesaw+0x150>)
   14c66:	4798      	blx	r3
	if(ERROR_NONE != error)
   14c68:	2800      	cmp	r0, #0
   14c6a:	d140      	bne.n	14cee <InitializeSeesaw+0xce>
	seesawData.msgOut = &msgNeopixelSpeed;
   14c6c:	483a      	ldr	r0, [pc, #232]	; (14d58 <InitializeSeesaw+0x138>)
   14c6e:	4b41      	ldr	r3, [pc, #260]	; (14d74 <InitializeSeesaw+0x154>)
   14c70:	6043      	str	r3, [r0, #4]
	seesawData.lenOut = sizeof(msgNeopixelSpeed);
   14c72:	2303      	movs	r3, #3
   14c74:	81c3      	strh	r3, [r0, #14]
	error = I2cWriteDataWait(&seesawData, 100);
   14c76:	2164      	movs	r1, #100	; 0x64
   14c78:	4b3d      	ldr	r3, [pc, #244]	; (14d70 <InitializeSeesaw+0x150>)
   14c7a:	4798      	blx	r3
	if(ERROR_NONE != error)
   14c7c:	2800      	cmp	r0, #0
   14c7e:	d13a      	bne.n	14cf6 <InitializeSeesaw+0xd6>
	seesawData.msgOut = &msgNeopixelBufLength;
   14c80:	4835      	ldr	r0, [pc, #212]	; (14d58 <InitializeSeesaw+0x138>)
   14c82:	4b3d      	ldr	r3, [pc, #244]	; (14d78 <InitializeSeesaw+0x158>)
   14c84:	6043      	str	r3, [r0, #4]
	seesawData.lenOut = sizeof(msgNeopixelBufLength);
   14c86:	2304      	movs	r3, #4
   14c88:	81c3      	strh	r3, [r0, #14]
	error = I2cWriteDataWait(&seesawData, 100);
   14c8a:	2164      	movs	r1, #100	; 0x64
   14c8c:	4b38      	ldr	r3, [pc, #224]	; (14d70 <InitializeSeesaw+0x150>)
   14c8e:	4798      	blx	r3
   14c90:	9001      	str	r0, [sp, #4]
	if(ERROR_NONE != error)
   14c92:	2800      	cmp	r0, #0
   14c94:	d133      	bne.n	14cfe <InitializeSeesaw+0xde>
}


static void SeesawTurnOnLedTest(void)
{
	SeesawSetLed(15, 255, 255, 255);
   14c96:	23ff      	movs	r3, #255	; 0xff
   14c98:	22ff      	movs	r2, #255	; 0xff
   14c9a:	21ff      	movs	r1, #255	; 0xff
   14c9c:	200f      	movs	r0, #15
   14c9e:	4e37      	ldr	r6, [pc, #220]	; (14d7c <InitializeSeesaw+0x15c>)
   14ca0:	47b0      	blx	r6
	SeesawOrderLedUpdate();
   14ca2:	4c37      	ldr	r4, [pc, #220]	; (14d80 <InitializeSeesaw+0x160>)
   14ca4:	47a0      	blx	r4
	vTaskDelay(400);
   14ca6:	20c8      	movs	r0, #200	; 0xc8
   14ca8:	0040      	lsls	r0, r0, #1
   14caa:	4b36      	ldr	r3, [pc, #216]	; (14d84 <InitializeSeesaw+0x164>)
   14cac:	4798      	blx	r3

	SeesawSetLed(15, 0, 0, 0);
   14cae:	2300      	movs	r3, #0
   14cb0:	2200      	movs	r2, #0
   14cb2:	2100      	movs	r1, #0
   14cb4:	200f      	movs	r0, #15
   14cb6:	47b0      	blx	r6
	SeesawOrderLedUpdate();
   14cb8:	47a0      	blx	r4
	seesawData.address = NEO_TRELLIS_ADDR;
   14cba:	4827      	ldr	r0, [pc, #156]	; (14d58 <InitializeSeesaw+0x138>)
   14cbc:	232e      	movs	r3, #46	; 0x2e
   14cbe:	7003      	strb	r3, [r0, #0]
	seesawData.msgOut = &msgKeypadEnableInt;
   14cc0:	4b31      	ldr	r3, [pc, #196]	; (14d88 <InitializeSeesaw+0x168>)
   14cc2:	6043      	str	r3, [r0, #4]
	seesawData.lenOut = sizeof(msgKeypadEnableInt);
   14cc4:	2303      	movs	r3, #3
   14cc6:	81c3      	strh	r3, [r0, #14]
	seesawData.lenIn = 0;
   14cc8:	2300      	movs	r3, #0
   14cca:	8183      	strh	r3, [r0, #12]
	int32_t error = I2cWriteDataWait(&seesawData, 100);
   14ccc:	2164      	movs	r1, #100	; 0x64
   14cce:	4b28      	ldr	r3, [pc, #160]	; (14d70 <InitializeSeesaw+0x150>)
   14cd0:	4798      	blx	r3
	if(ERROR_NONE != error)
   14cd2:	2800      	cmp	r0, #0
   14cd4:	d117      	bne.n	14d06 <InitializeSeesaw+0xe6>
{
   14cd6:	2600      	movs	r6, #0
		error = SeesawActivateKey(NEO_TRELLIS_KEY(i), SEESAW_KEYPAD_EDGE_RISING, true);
   14cd8:	2703      	movs	r7, #3
   14cda:	4d2c      	ldr	r5, [pc, #176]	; (14d8c <InitializeSeesaw+0x16c>)
   14cdc:	e01a      	b.n	14d14 <InitializeSeesaw+0xf4>
		SerialConsoleWriteString("Error initializing Seesaw!/r/n");
   14cde:	482c      	ldr	r0, [pc, #176]	; (14d90 <InitializeSeesaw+0x170>)
   14ce0:	4b21      	ldr	r3, [pc, #132]	; (14d68 <InitializeSeesaw+0x148>)
   14ce2:	4798      	blx	r3
   14ce4:	e7b8      	b.n	14c58 <InitializeSeesaw+0x38>
		SerialConsoleWriteString("Found Seesaw!/r/n");
   14ce6:	482b      	ldr	r0, [pc, #172]	; (14d94 <InitializeSeesaw+0x174>)
   14ce8:	4b1f      	ldr	r3, [pc, #124]	; (14d68 <InitializeSeesaw+0x148>)
   14cea:	4798      	blx	r3
   14cec:	e7b4      	b.n	14c58 <InitializeSeesaw+0x38>
		SerialConsoleWriteString("Could not write Seesaw pin!/r/n");
   14cee:	482a      	ldr	r0, [pc, #168]	; (14d98 <InitializeSeesaw+0x178>)
   14cf0:	4b1d      	ldr	r3, [pc, #116]	; (14d68 <InitializeSeesaw+0x148>)
   14cf2:	4798      	blx	r3
   14cf4:	e7ba      	b.n	14c6c <InitializeSeesaw+0x4c>
		SerialConsoleWriteString("Could not set seesaw Neopixel speed!/r/n");
   14cf6:	4829      	ldr	r0, [pc, #164]	; (14d9c <InitializeSeesaw+0x17c>)
   14cf8:	4b1b      	ldr	r3, [pc, #108]	; (14d68 <InitializeSeesaw+0x148>)
   14cfa:	4798      	blx	r3
   14cfc:	e7c0      	b.n	14c80 <InitializeSeesaw+0x60>
		SerialConsoleWriteString("Could not set seesaw Neopixel number of devices/r/n");
   14cfe:	4828      	ldr	r0, [pc, #160]	; (14da0 <InitializeSeesaw+0x180>)
   14d00:	4b19      	ldr	r3, [pc, #100]	; (14d68 <InitializeSeesaw+0x148>)
   14d02:	4798      	blx	r3
   14d04:	e7c7      	b.n	14c96 <InitializeSeesaw+0x76>
		SerialConsoleWriteString("Could not initialize Keypad!/r/n");
   14d06:	4827      	ldr	r0, [pc, #156]	; (14da4 <InitializeSeesaw+0x184>)
   14d08:	4b17      	ldr	r3, [pc, #92]	; (14d68 <InitializeSeesaw+0x148>)
   14d0a:	4798      	blx	r3
   14d0c:	e7e3      	b.n	14cd6 <InitializeSeesaw+0xb6>
	for(int i=0; i<16; i++){
   14d0e:	3601      	adds	r6, #1
   14d10:	2e10      	cmp	r6, #16
   14d12:	d01b      	beq.n	14d4c <InitializeSeesaw+0x12c>
		error = SeesawActivateKey(NEO_TRELLIS_KEY(i), SEESAW_KEYPAD_EDGE_RISING, true);
   14d14:	17f2      	asrs	r2, r6, #31
   14d16:	003c      	movs	r4, r7
   14d18:	4014      	ands	r4, r2
   14d1a:	19a4      	adds	r4, r4, r6
   14d1c:	10a4      	asrs	r4, r4, #2
   14d1e:	00e4      	lsls	r4, r4, #3
   14d20:	0f92      	lsrs	r2, r2, #30
   14d22:	18b3      	adds	r3, r6, r2
   14d24:	403b      	ands	r3, r7
   14d26:	1a9b      	subs	r3, r3, r2
   14d28:	18e4      	adds	r4, r4, r3
   14d2a:	b2e4      	uxtb	r4, r4
   14d2c:	2201      	movs	r2, #1
   14d2e:	0039      	movs	r1, r7
   14d30:	0020      	movs	r0, r4
   14d32:	47a8      	blx	r5
   14d34:	4681      	mov	r9, r0
		error |= SeesawActivateKey(NEO_TRELLIS_KEY(i), SEESAW_KEYPAD_EDGE_FALLING, true);
   14d36:	2201      	movs	r2, #1
   14d38:	2102      	movs	r1, #2
   14d3a:	0020      	movs	r0, r4
   14d3c:	47a8      	blx	r5
   14d3e:	464b      	mov	r3, r9
   14d40:	4303      	orrs	r3, r0
		if(ERROR_NONE != error)
   14d42:	d0e4      	beq.n	14d0e <InitializeSeesaw+0xee>
			SerialConsoleWriteString("Could not initialize Keypad!/r/n");
   14d44:	4817      	ldr	r0, [pc, #92]	; (14da4 <InitializeSeesaw+0x184>)
   14d46:	4b08      	ldr	r3, [pc, #32]	; (14d68 <InitializeSeesaw+0x148>)
   14d48:	4798      	blx	r3
   14d4a:	e7e0      	b.n	14d0e <InitializeSeesaw+0xee>
}
   14d4c:	9801      	ldr	r0, [sp, #4]
   14d4e:	b004      	add	sp, #16
   14d50:	bc04      	pop	{r2}
   14d52:	4691      	mov	r9, r2
   14d54:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14d56:	46c0      	nop			; (mov r8, r8)
   14d58:	200043e0 	.word	0x200043e0
   14d5c:	00029294 	.word	0x00029294
   14d60:	000145b1 	.word	0x000145b1
   14d64:	000291ac 	.word	0x000291ac
   14d68:	0001904d 	.word	0x0001904d
   14d6c:	000292a4 	.word	0x000292a4
   14d70:	00014551 	.word	0x00014551
   14d74:	000292a8 	.word	0x000292a8
   14d78:	000292a0 	.word	0x000292a0
   14d7c:	00014bbd 	.word	0x00014bbd
   14d80:	00014bf5 	.word	0x00014bf5
   14d84:	000181d5 	.word	0x000181d5
   14d88:	00029298 	.word	0x00029298
   14d8c:	00014b79 	.word	0x00014b79
   14d90:	0002918c 	.word	0x0002918c
   14d94:	000291b8 	.word	0x000291b8
   14d98:	000291cc 	.word	0x000291cc
   14d9c:	000291ec 	.word	0x000291ec
   14da0:	00029218 	.word	0x00029218
   14da4:	0002924c 	.word	0x0002924c

00014da8 <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   14da8:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   14daa:	2207      	movs	r2, #7
   14dac:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
   14dae:	421a      	tst	r2, r3
   14db0:	d1fc      	bne.n	14dac <_i2c_master_wait_for_sync+0x4>
}
   14db2:	4770      	bx	lr

00014db4 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
   14db4:	b5f0      	push	{r4, r5, r6, r7, lr}
   14db6:	46d6      	mov	lr, sl
   14db8:	464f      	mov	r7, r9
   14dba:	4646      	mov	r6, r8
   14dbc:	b5c0      	push	{r6, r7, lr}
   14dbe:	b08a      	sub	sp, #40	; 0x28
   14dc0:	0006      	movs	r6, r0
   14dc2:	000f      	movs	r7, r1
   14dc4:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
   14dc6:	6031      	str	r1, [r6, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   14dc8:	0008      	movs	r0, r1
   14dca:	4ba0      	ldr	r3, [pc, #640]	; (1504c <i2c_master_init+0x298>)
   14dcc:	4798      	blx	r3
   14dce:	4aa0      	ldr	r2, [pc, #640]	; (15050 <i2c_master_init+0x29c>)
   14dd0:	6a11      	ldr	r1, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   14dd2:	1c85      	adds	r5, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   14dd4:	2301      	movs	r3, #1
   14dd6:	40ab      	lsls	r3, r5
   14dd8:	430b      	orrs	r3, r1
   14dda:	6213      	str	r3, [r2, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
   14ddc:	a909      	add	r1, sp, #36	; 0x24
   14dde:	7b23      	ldrb	r3, [r4, #12]
   14de0:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   14de2:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   14de4:	b2c5      	uxtb	r5, r0
   14de6:	0028      	movs	r0, r5
   14de8:	4b9a      	ldr	r3, [pc, #616]	; (15054 <i2c_master_init+0x2a0>)
   14dea:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   14dec:	0028      	movs	r0, r5
   14dee:	4b9a      	ldr	r3, [pc, #616]	; (15058 <i2c_master_init+0x2a4>)
   14df0:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   14df2:	7b20      	ldrb	r0, [r4, #12]
   14df4:	2100      	movs	r1, #0
   14df6:	4b99      	ldr	r3, [pc, #612]	; (1505c <i2c_master_init+0x2a8>)
   14df8:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
   14dfa:	683b      	ldr	r3, [r7, #0]
		return STATUS_ERR_DENIED;
   14dfc:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
   14dfe:	079b      	lsls	r3, r3, #30
   14e00:	d505      	bpl.n	14e0e <i2c_master_init+0x5a>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
   14e02:	b00a      	add	sp, #40	; 0x28
   14e04:	bc1c      	pop	{r2, r3, r4}
   14e06:	4690      	mov	r8, r2
   14e08:	4699      	mov	r9, r3
   14e0a:	46a2      	mov	sl, r4
   14e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
   14e0e:	683b      	ldr	r3, [r7, #0]
		return STATUS_BUSY;
   14e10:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
   14e12:	07db      	lsls	r3, r3, #31
   14e14:	d4f5      	bmi.n	14e02 <i2c_master_init+0x4e>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   14e16:	6830      	ldr	r0, [r6, #0]
   14e18:	4b8c      	ldr	r3, [pc, #560]	; (1504c <i2c_master_init+0x298>)
   14e1a:	4699      	mov	r9, r3
   14e1c:	4798      	blx	r3
   14e1e:	0005      	movs	r5, r0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
   14e20:	498f      	ldr	r1, [pc, #572]	; (15060 <i2c_master_init+0x2ac>)
   14e22:	4b90      	ldr	r3, [pc, #576]	; (15064 <i2c_master_init+0x2b0>)
   14e24:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   14e26:	00ad      	lsls	r5, r5, #2
   14e28:	4b8f      	ldr	r3, [pc, #572]	; (15068 <i2c_master_init+0x2b4>)
   14e2a:	50ee      	str	r6, [r5, r3]
	module->registered_callback = 0;
   14e2c:	2300      	movs	r3, #0
   14e2e:	7633      	strb	r3, [r6, #24]
	module->enabled_callback = 0;
   14e30:	7673      	strb	r3, [r6, #25]
	module->buffer_length = 0;
   14e32:	2500      	movs	r5, #0
   14e34:	8373      	strh	r3, [r6, #26]
	module->buffer_remaining = 0;
   14e36:	83b3      	strh	r3, [r6, #28]
	module->status = STATUS_OK;
   14e38:	2225      	movs	r2, #37	; 0x25
   14e3a:	54b5      	strb	r5, [r6, r2]
	module->buffer = NULL;
   14e3c:	6233      	str	r3, [r6, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
   14e3e:	3314      	adds	r3, #20
   14e40:	603b      	str	r3, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   14e42:	6833      	ldr	r3, [r6, #0]
   14e44:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
   14e46:	0018      	movs	r0, r3
   14e48:	47c8      	blx	r9
   14e4a:	4681      	mov	r9, r0
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
   14e4c:	2380      	movs	r3, #128	; 0x80
   14e4e:	aa08      	add	r2, sp, #32
   14e50:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   14e52:	7055      	strb	r5, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   14e54:	2301      	movs	r3, #1
   14e56:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
   14e58:	70d5      	strb	r5, [r2, #3]
	uint32_t pad0 = config->pinmux_pad0;
   14e5a:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
   14e5c:	6a27      	ldr	r7, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
   14e5e:	2800      	cmp	r0, #0
   14e60:	d100      	bne.n	14e64 <i2c_master_init+0xb0>
   14e62:	e0af      	b.n	14fc4 <i2c_master_init+0x210>
	pin_conf.mux_position = pad0 & 0xFFFF;
   14e64:	ab08      	add	r3, sp, #32
   14e66:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   14e68:	2302      	movs	r3, #2
   14e6a:	aa08      	add	r2, sp, #32
   14e6c:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
   14e6e:	0c00      	lsrs	r0, r0, #16
   14e70:	b2c0      	uxtb	r0, r0
   14e72:	0011      	movs	r1, r2
   14e74:	4b7d      	ldr	r3, [pc, #500]	; (1506c <i2c_master_init+0x2b8>)
   14e76:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
   14e78:	2f00      	cmp	r7, #0
   14e7a:	d100      	bne.n	14e7e <i2c_master_init+0xca>
   14e7c:	e0a7      	b.n	14fce <i2c_master_init+0x21a>
	pin_conf.mux_position = pad1 & 0xFFFF;
   14e7e:	ab08      	add	r3, sp, #32
   14e80:	701f      	strb	r7, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   14e82:	2302      	movs	r3, #2
   14e84:	aa08      	add	r2, sp, #32
   14e86:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
   14e88:	0c3f      	lsrs	r7, r7, #16
   14e8a:	b2f8      	uxtb	r0, r7
   14e8c:	0011      	movs	r1, r2
   14e8e:	4b77      	ldr	r3, [pc, #476]	; (1506c <i2c_master_init+0x2b8>)
   14e90:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
   14e92:	8aa3      	ldrh	r3, [r4, #20]
   14e94:	80f3      	strh	r3, [r6, #6]
	module->buffer_timeout = config->buffer_timeout;
   14e96:	8ae3      	ldrh	r3, [r4, #22]
   14e98:	8133      	strh	r3, [r6, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
   14e9a:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
   14e9c:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
   14e9e:	2b00      	cmp	r3, #0
   14ea0:	d104      	bne.n	14eac <i2c_master_init+0xf8>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   14ea2:	4b73      	ldr	r3, [pc, #460]	; (15070 <i2c_master_init+0x2bc>)
   14ea4:	789b      	ldrb	r3, [r3, #2]
   14ea6:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
   14ea8:	0fdb      	lsrs	r3, r3, #31
   14eaa:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
   14eac:	68a1      	ldr	r1, [r4, #8]
   14eae:	6923      	ldr	r3, [r4, #16]
   14eb0:	430b      	orrs	r3, r1
   14eb2:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
   14eb4:	2224      	movs	r2, #36	; 0x24
   14eb6:	5ca2      	ldrb	r2, [r4, r2]
   14eb8:	2a00      	cmp	r2, #0
   14eba:	d002      	beq.n	14ec2 <i2c_master_init+0x10e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
   14ebc:	2280      	movs	r2, #128	; 0x80
   14ebe:	05d2      	lsls	r2, r2, #23
   14ec0:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
   14ec2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   14ec4:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
   14ec6:	222c      	movs	r2, #44	; 0x2c
   14ec8:	5ca2      	ldrb	r2, [r4, r2]
   14eca:	2a00      	cmp	r2, #0
   14ecc:	d103      	bne.n	14ed6 <i2c_master_init+0x122>
   14ece:	2280      	movs	r2, #128	; 0x80
   14ed0:	0492      	lsls	r2, r2, #18
   14ed2:	4291      	cmp	r1, r2
   14ed4:	d102      	bne.n	14edc <i2c_master_init+0x128>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
   14ed6:	2280      	movs	r2, #128	; 0x80
   14ed8:	0512      	lsls	r2, r2, #20
   14eda:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
   14edc:	222d      	movs	r2, #45	; 0x2d
   14ede:	5ca2      	ldrb	r2, [r4, r2]
   14ee0:	2a00      	cmp	r2, #0
   14ee2:	d002      	beq.n	14eea <i2c_master_init+0x136>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
   14ee4:	2280      	movs	r2, #128	; 0x80
   14ee6:	0412      	lsls	r2, r2, #16
   14ee8:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
   14eea:	222e      	movs	r2, #46	; 0x2e
   14eec:	5ca2      	ldrb	r2, [r4, r2]
   14eee:	2a00      	cmp	r2, #0
   14ef0:	d002      	beq.n	14ef8 <i2c_master_init+0x144>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
   14ef2:	2280      	movs	r2, #128	; 0x80
   14ef4:	03d2      	lsls	r2, r2, #15
   14ef6:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
   14ef8:	4642      	mov	r2, r8
   14efa:	6812      	ldr	r2, [r2, #0]
   14efc:	4313      	orrs	r3, r2
   14efe:	4642      	mov	r2, r8
   14f00:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
   14f02:	2380      	movs	r3, #128	; 0x80
   14f04:	005b      	lsls	r3, r3, #1
   14f06:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
   14f08:	4648      	mov	r0, r9
   14f0a:	3014      	adds	r0, #20
   14f0c:	b2c0      	uxtb	r0, r0
   14f0e:	4b59      	ldr	r3, [pc, #356]	; (15074 <i2c_master_init+0x2c0>)
   14f10:	4798      	blx	r3
   14f12:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
   14f14:	23fa      	movs	r3, #250	; 0xfa
   14f16:	009b      	lsls	r3, r3, #2
   14f18:	6822      	ldr	r2, [r4, #0]
   14f1a:	435a      	muls	r2, r3
   14f1c:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
   14f1e:	6863      	ldr	r3, [r4, #4]
   14f20:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
   14f22:	4d55      	ldr	r5, [pc, #340]	; (15078 <i2c_master_init+0x2c4>)
   14f24:	47a8      	blx	r5
   14f26:	9000      	str	r0, [sp, #0]
   14f28:	9101      	str	r1, [sp, #4]
   14f2a:	464b      	mov	r3, r9
   14f2c:	0058      	lsls	r0, r3, #1
   14f2e:	47a8      	blx	r5
   14f30:	9002      	str	r0, [sp, #8]
   14f32:	9103      	str	r1, [sp, #12]
   14f34:	8e20      	ldrh	r0, [r4, #48]	; 0x30
   14f36:	47a8      	blx	r5
   14f38:	9004      	str	r0, [sp, #16]
   14f3a:	9105      	str	r1, [sp, #20]
   14f3c:	4f4f      	ldr	r7, [pc, #316]	; (1507c <i2c_master_init+0x2c8>)
   14f3e:	4a50      	ldr	r2, [pc, #320]	; (15080 <i2c_master_init+0x2cc>)
   14f40:	4b50      	ldr	r3, [pc, #320]	; (15084 <i2c_master_init+0x2d0>)
   14f42:	9800      	ldr	r0, [sp, #0]
   14f44:	9901      	ldr	r1, [sp, #4]
   14f46:	47b8      	blx	r7
   14f48:	0002      	movs	r2, r0
   14f4a:	000b      	movs	r3, r1
   14f4c:	9804      	ldr	r0, [sp, #16]
   14f4e:	9905      	ldr	r1, [sp, #20]
   14f50:	47b8      	blx	r7
   14f52:	4e4d      	ldr	r6, [pc, #308]	; (15088 <i2c_master_init+0x2d4>)
   14f54:	2200      	movs	r2, #0
   14f56:	4b4d      	ldr	r3, [pc, #308]	; (1508c <i2c_master_init+0x2d8>)
   14f58:	47b0      	blx	r6
   14f5a:	9004      	str	r0, [sp, #16]
   14f5c:	9105      	str	r1, [sp, #20]
   14f5e:	4648      	mov	r0, r9
   14f60:	47a8      	blx	r5
   14f62:	0002      	movs	r2, r0
   14f64:	000b      	movs	r3, r1
   14f66:	9804      	ldr	r0, [sp, #16]
   14f68:	9905      	ldr	r1, [sp, #20]
   14f6a:	47b8      	blx	r7
   14f6c:	0002      	movs	r2, r0
   14f6e:	000b      	movs	r3, r1
   14f70:	4d47      	ldr	r5, [pc, #284]	; (15090 <i2c_master_init+0x2dc>)
   14f72:	9800      	ldr	r0, [sp, #0]
   14f74:	9901      	ldr	r1, [sp, #4]
   14f76:	47a8      	blx	r5
   14f78:	9a02      	ldr	r2, [sp, #8]
   14f7a:	9b03      	ldr	r3, [sp, #12]
   14f7c:	47b0      	blx	r6
   14f7e:	2200      	movs	r2, #0
   14f80:	4b44      	ldr	r3, [pc, #272]	; (15094 <i2c_master_init+0x2e0>)
   14f82:	47a8      	blx	r5
   14f84:	9a02      	ldr	r2, [sp, #8]
   14f86:	9b03      	ldr	r3, [sp, #12]
   14f88:	4d43      	ldr	r5, [pc, #268]	; (15098 <i2c_master_init+0x2e4>)
   14f8a:	47a8      	blx	r5
   14f8c:	4b43      	ldr	r3, [pc, #268]	; (1509c <i2c_master_init+0x2e8>)
   14f8e:	4798      	blx	r3
   14f90:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
   14f92:	2380      	movs	r3, #128	; 0x80
   14f94:	049b      	lsls	r3, r3, #18
   14f96:	68a2      	ldr	r2, [r4, #8]
   14f98:	429a      	cmp	r2, r3
   14f9a:	d01e      	beq.n	14fda <i2c_master_init+0x226>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
   14f9c:	0003      	movs	r3, r0
   14f9e:	2040      	movs	r0, #64	; 0x40
   14fa0:	2dff      	cmp	r5, #255	; 0xff
   14fa2:	d900      	bls.n	14fa6 <i2c_master_init+0x1f2>
   14fa4:	e72d      	b.n	14e02 <i2c_master_init+0x4e>
	int32_t tmp_baudlow_hs = 0;
   14fa6:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
   14fa8:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   14faa:	25ff      	movs	r5, #255	; 0xff
   14fac:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   14fae:	0624      	lsls	r4, r4, #24
   14fb0:	4325      	orrs	r5, r4
   14fb2:	0400      	lsls	r0, r0, #16
   14fb4:	23ff      	movs	r3, #255	; 0xff
   14fb6:	041b      	lsls	r3, r3, #16
   14fb8:	4018      	ands	r0, r3
   14fba:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   14fbc:	4643      	mov	r3, r8
   14fbe:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
   14fc0:	2000      	movs	r0, #0
   14fc2:	e71e      	b.n	14e02 <i2c_master_init+0x4e>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
   14fc4:	2100      	movs	r1, #0
   14fc6:	4640      	mov	r0, r8
   14fc8:	4b35      	ldr	r3, [pc, #212]	; (150a0 <i2c_master_init+0x2ec>)
   14fca:	4798      	blx	r3
   14fcc:	e74a      	b.n	14e64 <i2c_master_init+0xb0>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
   14fce:	2101      	movs	r1, #1
   14fd0:	4640      	mov	r0, r8
   14fd2:	4b33      	ldr	r3, [pc, #204]	; (150a0 <i2c_master_init+0x2ec>)
   14fd4:	4798      	blx	r3
   14fd6:	0007      	movs	r7, r0
   14fd8:	e751      	b.n	14e7e <i2c_master_init+0xca>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
   14fda:	26fa      	movs	r6, #250	; 0xfa
   14fdc:	00b6      	lsls	r6, r6, #2
   14fde:	4653      	mov	r3, sl
   14fe0:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
   14fe2:	9800      	ldr	r0, [sp, #0]
   14fe4:	9901      	ldr	r1, [sp, #4]
   14fe6:	0002      	movs	r2, r0
   14fe8:	000b      	movs	r3, r1
   14fea:	4c27      	ldr	r4, [pc, #156]	; (15088 <i2c_master_init+0x2d4>)
   14fec:	47a0      	blx	r4
   14fee:	9000      	str	r0, [sp, #0]
   14ff0:	9101      	str	r1, [sp, #4]
   14ff2:	0030      	movs	r0, r6
   14ff4:	4b20      	ldr	r3, [pc, #128]	; (15078 <i2c_master_init+0x2c4>)
   14ff6:	4798      	blx	r3
   14ff8:	2200      	movs	r2, #0
   14ffa:	4b2a      	ldr	r3, [pc, #168]	; (150a4 <i2c_master_init+0x2f0>)
   14ffc:	47b8      	blx	r7
   14ffe:	0002      	movs	r2, r0
   15000:	000b      	movs	r3, r1
   15002:	9800      	ldr	r0, [sp, #0]
   15004:	9901      	ldr	r1, [sp, #4]
   15006:	4c24      	ldr	r4, [pc, #144]	; (15098 <i2c_master_init+0x2e4>)
   15008:	47a0      	blx	r4
   1500a:	2200      	movs	r2, #0
   1500c:	4b21      	ldr	r3, [pc, #132]	; (15094 <i2c_master_init+0x2e0>)
   1500e:	4c20      	ldr	r4, [pc, #128]	; (15090 <i2c_master_init+0x2dc>)
   15010:	47a0      	blx	r4
   15012:	4b22      	ldr	r3, [pc, #136]	; (1509c <i2c_master_init+0x2e8>)
   15014:	4798      	blx	r3
   15016:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
   15018:	d00c      	beq.n	15034 <i2c_master_init+0x280>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
   1501a:	0031      	movs	r1, r6
   1501c:	9807      	ldr	r0, [sp, #28]
   1501e:	4b22      	ldr	r3, [pc, #136]	; (150a8 <i2c_master_init+0x2f4>)
   15020:	4798      	blx	r3
   15022:	3802      	subs	r0, #2
   15024:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
   15026:	002b      	movs	r3, r5
   15028:	2dff      	cmp	r5, #255	; 0xff
   1502a:	d80c      	bhi.n	15046 <i2c_master_init+0x292>
   1502c:	28ff      	cmp	r0, #255	; 0xff
   1502e:	d9bc      	bls.n	14faa <i2c_master_init+0x1f6>
   15030:	2040      	movs	r0, #64	; 0x40
   15032:	e6e6      	b.n	14e02 <i2c_master_init+0x4e>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
   15034:	0071      	lsls	r1, r6, #1
   15036:	1e48      	subs	r0, r1, #1
   15038:	9b07      	ldr	r3, [sp, #28]
   1503a:	469c      	mov	ip, r3
   1503c:	4460      	add	r0, ip
   1503e:	4b1a      	ldr	r3, [pc, #104]	; (150a8 <i2c_master_init+0x2f4>)
   15040:	4798      	blx	r3
   15042:	3801      	subs	r0, #1
   15044:	e7ef      	b.n	15026 <i2c_master_init+0x272>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
   15046:	2040      	movs	r0, #64	; 0x40
   15048:	e6db      	b.n	14e02 <i2c_master_init+0x4e>
   1504a:	46c0      	nop			; (mov r8, r8)
   1504c:	0001dd99 	.word	0x0001dd99
   15050:	40000400 	.word	0x40000400
   15054:	0001f139 	.word	0x0001f139
   15058:	0001f0ad 	.word	0x0001f0ad
   1505c:	0001dbd5 	.word	0x0001dbd5
   15060:	00012b55 	.word	0x00012b55
   15064:	0001ddd5 	.word	0x0001ddd5
   15068:	20005508 	.word	0x20005508
   1506c:	0001f261 	.word	0x0001f261
   15070:	41002000 	.word	0x41002000
   15074:	0001f155 	.word	0x0001f155
   15078:	00025bb1 	.word	0x00025bb1
   1507c:	0002501d 	.word	0x0002501d
   15080:	e826d695 	.word	0xe826d695
   15084:	3e112e0b 	.word	0x3e112e0b
   15088:	00024395 	.word	0x00024395
   1508c:	40240000 	.word	0x40240000
   15090:	0002551d 	.word	0x0002551d
   15094:	3ff00000 	.word	0x3ff00000
   15098:	000249b5 	.word	0x000249b5
   1509c:	00025b49 	.word	0x00025b49
   150a0:	0001dc21 	.word	0x0001dc21
   150a4:	40080000 	.word	0x40080000
   150a8:	00024055 	.word	0x00024055

000150ac <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
   150ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   150ae:	46ce      	mov	lr, r9
   150b0:	4647      	mov	r7, r8
   150b2:	b580      	push	{r7, lr}
   150b4:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   150b6:	6803      	ldr	r3, [r0, #0]
   150b8:	4699      	mov	r9, r3

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   150ba:	4e14      	ldr	r6, [pc, #80]	; (1510c <i2c_master_reset+0x60>)
   150bc:	47b0      	blx	r6
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   150be:	6825      	ldr	r5, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   150c0:	0028      	movs	r0, r5
   150c2:	4b13      	ldr	r3, [pc, #76]	; (15110 <i2c_master_reset+0x64>)
   150c4:	4698      	mov	r8, r3
   150c6:	4798      	blx	r3
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   150c8:	231f      	movs	r3, #31
   150ca:	4018      	ands	r0, r3
   150cc:	2701      	movs	r7, #1
   150ce:	0039      	movs	r1, r7
   150d0:	4081      	lsls	r1, r0
   150d2:	3361      	adds	r3, #97	; 0x61
   150d4:	4a0f      	ldr	r2, [pc, #60]	; (15114 <i2c_master_reset+0x68>)
   150d6:	50d1      	str	r1, [r2, r3]
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   150d8:	0020      	movs	r0, r4
   150da:	47b0      	blx	r6

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
   150dc:	2383      	movs	r3, #131	; 0x83
   150de:	752b      	strb	r3, [r5, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
   150e0:	762b      	strb	r3, [r5, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
   150e2:	682b      	ldr	r3, [r5, #0]
   150e4:	2202      	movs	r2, #2
   150e6:	4393      	bics	r3, r2
   150e8:	602b      	str	r3, [r5, #0]
	cpu_irq_enter_critical();
   150ea:	4b0b      	ldr	r3, [pc, #44]	; (15118 <i2c_master_reset+0x6c>)
   150ec:	4798      	blx	r3
	i2c_master_disable(module);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Clear all pending interrupts */
	system_interrupt_enter_critical_section();
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
   150ee:	6820      	ldr	r0, [r4, #0]
   150f0:	47c0      	blx	r8
   150f2:	4b0a      	ldr	r3, [pc, #40]	; (1511c <i2c_master_reset+0x70>)
   150f4:	4798      	blx	r3
	cpu_irq_leave_critical();
   150f6:	4b0a      	ldr	r3, [pc, #40]	; (15120 <i2c_master_reset+0x74>)
   150f8:	4798      	blx	r3
	system_interrupt_leave_critical_section();
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   150fa:	0020      	movs	r0, r4
   150fc:	47b0      	blx	r6

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
   150fe:	464b      	mov	r3, r9
   15100:	601f      	str	r7, [r3, #0]
}
   15102:	bc0c      	pop	{r2, r3}
   15104:	4690      	mov	r8, r2
   15106:	4699      	mov	r9, r3
   15108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1510a:	46c0      	nop			; (mov r8, r8)
   1510c:	00014da9 	.word	0x00014da9
   15110:	0001de11 	.word	0x0001de11
   15114:	e000e100 	.word	0xe000e100
   15118:	0001d585 	.word	0x0001d585
   1511c:	0001f189 	.word	0x0001f189
   15120:	0001d5c5 	.word	0x0001d5c5

00015124 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   15124:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   15126:	7e1a      	ldrb	r2, [r3, #24]
   15128:	0792      	lsls	r2, r2, #30
   1512a:	d507      	bpl.n	1513c <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   1512c:	2202      	movs	r2, #2
   1512e:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   15130:	8b5b      	ldrh	r3, [r3, #26]
   15132:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
   15134:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
   15136:	17db      	asrs	r3, r3, #31
   15138:	4018      	ands	r0, r3
}
   1513a:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   1513c:	8b5a      	ldrh	r2, [r3, #26]
   1513e:	0752      	lsls	r2, r2, #29
   15140:	d506      	bpl.n	15150 <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   15142:	6859      	ldr	r1, [r3, #4]
   15144:	22c0      	movs	r2, #192	; 0xc0
   15146:	0292      	lsls	r2, r2, #10
   15148:	430a      	orrs	r2, r1
   1514a:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
   1514c:	2018      	movs	r0, #24
   1514e:	e7f4      	b.n	1513a <_i2c_master_address_response+0x16>
	return STATUS_OK;
   15150:	2000      	movs	r0, #0
   15152:	e7f2      	b.n	1513a <_i2c_master_address_response+0x16>

00015154 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
   15154:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   15156:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
   15158:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   1515a:	2401      	movs	r4, #1
   1515c:	2502      	movs	r5, #2
   1515e:	7e11      	ldrb	r1, [r2, #24]
   15160:	4221      	tst	r1, r4
   15162:	d10b      	bne.n	1517c <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
   15164:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   15166:	4229      	tst	r1, r5
   15168:	d106      	bne.n	15178 <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
   1516a:	3301      	adds	r3, #1
   1516c:	b29b      	uxth	r3, r3
   1516e:	8901      	ldrh	r1, [r0, #8]
   15170:	4299      	cmp	r1, r3
   15172:	d8f4      	bhi.n	1515e <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
   15174:	2012      	movs	r0, #18
   15176:	e002      	b.n	1517e <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
   15178:	2000      	movs	r0, #0
   1517a:	e000      	b.n	1517e <_i2c_master_wait_for_bus+0x2a>
   1517c:	2000      	movs	r0, #0
}
   1517e:	bd30      	pop	{r4, r5, pc}

00015180 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
   15180:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   15182:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   15184:	6862      	ldr	r2, [r4, #4]
   15186:	2380      	movs	r3, #128	; 0x80
   15188:	02db      	lsls	r3, r3, #11
   1518a:	4313      	orrs	r3, r2
   1518c:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
   1518e:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
   15190:	4b02      	ldr	r3, [pc, #8]	; (1519c <_i2c_master_send_hs_master_code+0x1c>)
   15192:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   15194:	2301      	movs	r3, #1
   15196:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
   15198:	bd10      	pop	{r4, pc}
   1519a:	46c0      	nop			; (mov r8, r8)
   1519c:	00015155 	.word	0x00015155

000151a0 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
   151a0:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
   151a2:	0080      	lsls	r0, r0, #2
   151a4:	4b16      	ldr	r3, [pc, #88]	; (15200 <_tc_interrupt_handler+0x60>)
   151a6:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   151a8:	6823      	ldr	r3, [r4, #0]
   151aa:	7b9d      	ldrb	r5, [r3, #14]
   151ac:	7e22      	ldrb	r2, [r4, #24]
   151ae:	7e63      	ldrb	r3, [r4, #25]
   151b0:	4013      	ands	r3, r2
   151b2:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
   151b4:	07eb      	lsls	r3, r5, #31
   151b6:	d406      	bmi.n	151c6 <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
   151b8:	07ab      	lsls	r3, r5, #30
   151ba:	d40b      	bmi.n	151d4 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
   151bc:	06eb      	lsls	r3, r5, #27
   151be:	d410      	bmi.n	151e2 <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
   151c0:	06ab      	lsls	r3, r5, #26
   151c2:	d415      	bmi.n	151f0 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
   151c4:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
   151c6:	0020      	movs	r0, r4
   151c8:	68a3      	ldr	r3, [r4, #8]
   151ca:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
   151cc:	2301      	movs	r3, #1
   151ce:	6822      	ldr	r2, [r4, #0]
   151d0:	7393      	strb	r3, [r2, #14]
   151d2:	e7f1      	b.n	151b8 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
   151d4:	0020      	movs	r0, r4
   151d6:	68e3      	ldr	r3, [r4, #12]
   151d8:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
   151da:	2302      	movs	r3, #2
   151dc:	6822      	ldr	r2, [r4, #0]
   151de:	7393      	strb	r3, [r2, #14]
   151e0:	e7ec      	b.n	151bc <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
   151e2:	0020      	movs	r0, r4
   151e4:	6923      	ldr	r3, [r4, #16]
   151e6:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
   151e8:	2310      	movs	r3, #16
   151ea:	6822      	ldr	r2, [r4, #0]
   151ec:	7393      	strb	r3, [r2, #14]
   151ee:	e7e7      	b.n	151c0 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
   151f0:	0020      	movs	r0, r4
   151f2:	6963      	ldr	r3, [r4, #20]
   151f4:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
   151f6:	6823      	ldr	r3, [r4, #0]
   151f8:	2220      	movs	r2, #32
   151fa:	739a      	strb	r2, [r3, #14]
}
   151fc:	e7e2      	b.n	151c4 <_tc_interrupt_handler+0x24>
   151fe:	46c0      	nop			; (mov r8, r8)
   15200:	200043f0 	.word	0x200043f0

00015204 <TC3_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
   15204:	b510      	push	{r4, lr}
   15206:	2000      	movs	r0, #0
   15208:	4b01      	ldr	r3, [pc, #4]	; (15210 <TC3_Handler+0xc>)
   1520a:	4798      	blx	r3
   1520c:	bd10      	pop	{r4, pc}
   1520e:	46c0      	nop			; (mov r8, r8)
   15210:	000151a1 	.word	0x000151a1

00015214 <TC4_Handler>:
   15214:	b510      	push	{r4, lr}
   15216:	2001      	movs	r0, #1
   15218:	4b01      	ldr	r3, [pc, #4]	; (15220 <TC4_Handler+0xc>)
   1521a:	4798      	blx	r3
   1521c:	bd10      	pop	{r4, pc}
   1521e:	46c0      	nop			; (mov r8, r8)
   15220:	000151a1 	.word	0x000151a1

00015224 <TC5_Handler>:
   15224:	b510      	push	{r4, lr}
   15226:	2002      	movs	r0, #2
   15228:	4b01      	ldr	r3, [pc, #4]	; (15230 <TC5_Handler+0xc>)
   1522a:	4798      	blx	r3
   1522c:	bd10      	pop	{r4, pc}
   1522e:	46c0      	nop			; (mov r8, r8)
   15230:	000151a1 	.word	0x000151a1

00015234 <prvHelpCommand>:
	return pcReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
   15234:	b570      	push	{r4, r5, r6, lr}
   15236:	000a      	movs	r2, r1
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
   15238:	4b09      	ldr	r3, [pc, #36]	; (15260 <prvHelpCommand+0x2c>)
   1523a:	681b      	ldr	r3, [r3, #0]
   1523c:	2b00      	cmp	r3, #0
   1523e:	d00a      	beq.n	15256 <prvHelpCommand+0x22>
		pxCommand = &xRegisteredCommands;
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
   15240:	4c07      	ldr	r4, [pc, #28]	; (15260 <prvHelpCommand+0x2c>)
   15242:	6825      	ldr	r5, [r4, #0]
   15244:	682b      	ldr	r3, [r5, #0]
   15246:	6859      	ldr	r1, [r3, #4]
   15248:	4b06      	ldr	r3, [pc, #24]	; (15264 <prvHelpCommand+0x30>)
   1524a:	4798      	blx	r3
	pxCommand = pxCommand->pxNext;
   1524c:	6868      	ldr	r0, [r5, #4]
   1524e:	6020      	str	r0, [r4, #0]

	if( pxCommand == NULL )
   15250:	1e43      	subs	r3, r0, #1
   15252:	4198      	sbcs	r0, r3
	{
		xReturn = pdTRUE;
	}

	return xReturn;
}
   15254:	bd70      	pop	{r4, r5, r6, pc}
		pxCommand = &xRegisteredCommands;
   15256:	4904      	ldr	r1, [pc, #16]	; (15268 <prvHelpCommand+0x34>)
   15258:	4b01      	ldr	r3, [pc, #4]	; (15260 <prvHelpCommand+0x2c>)
   1525a:	6019      	str	r1, [r3, #0]
   1525c:	e7f0      	b.n	15240 <prvHelpCommand+0xc>
   1525e:	46c0      	nop			; (mov r8, r8)
   15260:	20000acc 	.word	0x20000acc
   15264:	000260f7 	.word	0x000260f7
   15268:	200000b8 	.word	0x200000b8

0001526c <FreeRTOS_CLIRegisterCommand>:
{
   1526c:	b570      	push	{r4, r5, r6, lr}
   1526e:	1e05      	subs	r5, r0, #0
	configASSERT( pxCommandToRegister );
   15270:	d006      	beq.n	15280 <FreeRTOS_CLIRegisterCommand+0x14>
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
   15272:	2008      	movs	r0, #8
   15274:	4b0a      	ldr	r3, [pc, #40]	; (152a0 <FreeRTOS_CLIRegisterCommand+0x34>)
   15276:	4798      	blx	r3
   15278:	1e04      	subs	r4, r0, #0
	configASSERT( pxNewListItem );
   1527a:	d103      	bne.n	15284 <FreeRTOS_CLIRegisterCommand+0x18>
   1527c:	b672      	cpsid	i
   1527e:	e7fe      	b.n	1527e <FreeRTOS_CLIRegisterCommand+0x12>
	configASSERT( pxCommandToRegister );
   15280:	b672      	cpsid	i
   15282:	e7fe      	b.n	15282 <FreeRTOS_CLIRegisterCommand+0x16>
		taskENTER_CRITICAL();
   15284:	4b07      	ldr	r3, [pc, #28]	; (152a4 <FreeRTOS_CLIRegisterCommand+0x38>)
   15286:	4798      	blx	r3
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
   15288:	6025      	str	r5, [r4, #0]
			pxNewListItem->pxNext = NULL;
   1528a:	2300      	movs	r3, #0
   1528c:	6063      	str	r3, [r4, #4]
			pxLastCommandInList->pxNext = pxNewListItem;
   1528e:	4b06      	ldr	r3, [pc, #24]	; (152a8 <FreeRTOS_CLIRegisterCommand+0x3c>)
   15290:	681a      	ldr	r2, [r3, #0]
   15292:	6054      	str	r4, [r2, #4]
			pxLastCommandInList = pxNewListItem;
   15294:	601c      	str	r4, [r3, #0]
		taskEXIT_CRITICAL();
   15296:	4b05      	ldr	r3, [pc, #20]	; (152ac <FreeRTOS_CLIRegisterCommand+0x40>)
   15298:	4798      	blx	r3
}
   1529a:	2001      	movs	r0, #1
   1529c:	bd70      	pop	{r4, r5, r6, pc}
   1529e:	46c0      	nop			; (mov r8, r8)
   152a0:	00016855 	.word	0x00016855
   152a4:	00016791 	.word	0x00016791
   152a8:	200000b4 	.word	0x200000b4
   152ac:	000167a9 	.word	0x000167a9

000152b0 <FreeRTOS_CLIProcessCommand>:
{
   152b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   152b2:	46de      	mov	lr, fp
   152b4:	4657      	mov	r7, sl
   152b6:	464e      	mov	r6, r9
   152b8:	4645      	mov	r5, r8
   152ba:	b5e0      	push	{r5, r6, r7, lr}
   152bc:	b083      	sub	sp, #12
   152be:	0006      	movs	r6, r0
   152c0:	9100      	str	r1, [sp, #0]
   152c2:	9201      	str	r2, [sp, #4]
	if( pxCommand == NULL )
   152c4:	4b39      	ldr	r3, [pc, #228]	; (153ac <FreeRTOS_CLIProcessCommand+0xfc>)
   152c6:	681b      	ldr	r3, [r3, #0]
   152c8:	2b00      	cmp	r3, #0
   152ca:	d011      	beq.n	152f0 <FreeRTOS_CLIProcessCommand+0x40>
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
   152cc:	681b      	ldr	r3, [r3, #0]
   152ce:	689b      	ldr	r3, [r3, #8]
   152d0:	0032      	movs	r2, r6
   152d2:	9901      	ldr	r1, [sp, #4]
   152d4:	9800      	ldr	r0, [sp, #0]
   152d6:	4798      	blx	r3
		if( xReturn == pdFALSE )
   152d8:	2800      	cmp	r0, #0
   152da:	d102      	bne.n	152e2 <FreeRTOS_CLIProcessCommand+0x32>
			pxCommand = NULL;
   152dc:	2200      	movs	r2, #0
   152de:	4b33      	ldr	r3, [pc, #204]	; (153ac <FreeRTOS_CLIProcessCommand+0xfc>)
   152e0:	601a      	str	r2, [r3, #0]
}
   152e2:	b003      	add	sp, #12
   152e4:	bc3c      	pop	{r2, r3, r4, r5}
   152e6:	4690      	mov	r8, r2
   152e8:	4699      	mov	r9, r3
   152ea:	46a2      	mov	sl, r4
   152ec:	46ab      	mov	fp, r5
   152ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   152f0:	4c2f      	ldr	r4, [pc, #188]	; (153b0 <FreeRTOS_CLIProcessCommand+0x100>)
   152f2:	4b2e      	ldr	r3, [pc, #184]	; (153ac <FreeRTOS_CLIProcessCommand+0xfc>)
   152f4:	601c      	str	r4, [r3, #0]
			xCommandStringLength = strlen( pcRegisteredCommandString );
   152f6:	4b2f      	ldr	r3, [pc, #188]	; (153b4 <FreeRTOS_CLIProcessCommand+0x104>)
   152f8:	4699      	mov	r9, r3
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
   152fa:	2320      	movs	r3, #32
   152fc:	4698      	mov	r8, r3
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
   152fe:	4b2e      	ldr	r3, [pc, #184]	; (153b8 <FreeRTOS_CLIProcessCommand+0x108>)
   15300:	469b      	mov	fp, r3
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   15302:	4b2a      	ldr	r3, [pc, #168]	; (153ac <FreeRTOS_CLIProcessCommand+0xfc>)
   15304:	469a      	mov	sl, r3
   15306:	e00a      	b.n	1531e <FreeRTOS_CLIProcessCommand+0x6e>
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
   15308:	0002      	movs	r2, r0
   1530a:	0029      	movs	r1, r5
   1530c:	0030      	movs	r0, r6
   1530e:	47d8      	blx	fp
   15310:	2800      	cmp	r0, #0
   15312:	d00d      	beq.n	15330 <FreeRTOS_CLIProcessCommand+0x80>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   15314:	6864      	ldr	r4, [r4, #4]
   15316:	4653      	mov	r3, sl
   15318:	601c      	str	r4, [r3, #0]
   1531a:	2c00      	cmp	r4, #0
   1531c:	d03e      	beq.n	1539c <FreeRTOS_CLIProcessCommand+0xec>
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
   1531e:	6827      	ldr	r7, [r4, #0]
   15320:	683d      	ldr	r5, [r7, #0]
			xCommandStringLength = strlen( pcRegisteredCommandString );
   15322:	0028      	movs	r0, r5
   15324:	47c8      	blx	r9
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
   15326:	5c33      	ldrb	r3, [r6, r0]
   15328:	4642      	mov	r2, r8
   1532a:	4393      	bics	r3, r2
   1532c:	d1f2      	bne.n	15314 <FreeRTOS_CLIProcessCommand+0x64>
   1532e:	e7eb      	b.n	15308 <FreeRTOS_CLIProcessCommand+0x58>
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
   15330:	7b3f      	ldrb	r7, [r7, #12]
   15332:	b27f      	sxtb	r7, r7
   15334:	2f00      	cmp	r7, #0
   15336:	db2d      	blt.n	15394 <FreeRTOS_CLIProcessCommand+0xe4>
{
int8_t cParameters = 0;
BaseType_t xLastCharacterWasSpace = pdFALSE;

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
   15338:	7833      	ldrb	r3, [r6, #0]
   1533a:	2b00      	cmp	r3, #0
   1533c:	d028      	beq.n	15390 <FreeRTOS_CLIProcessCommand+0xe0>
   1533e:	0032      	movs	r2, r6
   15340:	2500      	movs	r5, #0
   15342:	2100      	movs	r1, #0
	{
		if( ( *pcCommandString ) == ' ' )
		{
			if( xLastCharacterWasSpace != pdTRUE )
   15344:	2401      	movs	r4, #1
   15346:	e008      	b.n	1535a <FreeRTOS_CLIProcessCommand+0xaa>
   15348:	2901      	cmp	r1, #1
   1534a:	d00a      	beq.n	15362 <FreeRTOS_CLIProcessCommand+0xb2>
			{
				cParameters++;
   1534c:	3501      	adds	r5, #1
   1534e:	b26d      	sxtb	r5, r5
				xLastCharacterWasSpace = pdTRUE;
   15350:	0021      	movs	r1, r4
		else
		{
			xLastCharacterWasSpace = pdFALSE;
		}

		pcCommandString++;
   15352:	3201      	adds	r2, #1
	while( *pcCommandString != 0x00 )
   15354:	7813      	ldrb	r3, [r2, #0]
   15356:	2b00      	cmp	r3, #0
   15358:	d005      	beq.n	15366 <FreeRTOS_CLIProcessCommand+0xb6>
		if( ( *pcCommandString ) == ' ' )
   1535a:	2b20      	cmp	r3, #32
   1535c:	d0f4      	beq.n	15348 <FreeRTOS_CLIProcessCommand+0x98>
			xLastCharacterWasSpace = pdFALSE;
   1535e:	0001      	movs	r1, r0
   15360:	e7f7      	b.n	15352 <FreeRTOS_CLIProcessCommand+0xa2>
			if( xLastCharacterWasSpace != pdTRUE )
   15362:	0021      	movs	r1, r4
   15364:	e7f5      	b.n	15352 <FreeRTOS_CLIProcessCommand+0xa2>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
   15366:	2901      	cmp	r1, #1
   15368:	d00f      	beq.n	1538a <FreeRTOS_CLIProcessCommand+0xda>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
   1536a:	4b10      	ldr	r3, [pc, #64]	; (153ac <FreeRTOS_CLIProcessCommand+0xfc>)
   1536c:	681b      	ldr	r3, [r3, #0]
   1536e:	2b00      	cmp	r3, #0
   15370:	d014      	beq.n	1539c <FreeRTOS_CLIProcessCommand+0xec>
   15372:	42af      	cmp	r7, r5
   15374:	d0aa      	beq.n	152cc <FreeRTOS_CLIProcessCommand+0x1c>
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   15376:	9a01      	ldr	r2, [sp, #4]
   15378:	4910      	ldr	r1, [pc, #64]	; (153bc <FreeRTOS_CLIProcessCommand+0x10c>)
   1537a:	9800      	ldr	r0, [sp, #0]
   1537c:	4b10      	ldr	r3, [pc, #64]	; (153c0 <FreeRTOS_CLIProcessCommand+0x110>)
   1537e:	4798      	blx	r3
		pxCommand = NULL;
   15380:	2200      	movs	r2, #0
   15382:	4b0a      	ldr	r3, [pc, #40]	; (153ac <FreeRTOS_CLIProcessCommand+0xfc>)
   15384:	601a      	str	r2, [r3, #0]
   15386:	2000      	movs	r0, #0
   15388:	e7ab      	b.n	152e2 <FreeRTOS_CLIProcessCommand+0x32>
	{
		cParameters--;
   1538a:	3d01      	subs	r5, #1
   1538c:	b26d      	sxtb	r5, r5
   1538e:	e7ec      	b.n	1536a <FreeRTOS_CLIProcessCommand+0xba>
	while( *pcCommandString != 0x00 )
   15390:	2500      	movs	r5, #0
   15392:	e7ea      	b.n	1536a <FreeRTOS_CLIProcessCommand+0xba>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
   15394:	4b05      	ldr	r3, [pc, #20]	; (153ac <FreeRTOS_CLIProcessCommand+0xfc>)
   15396:	681b      	ldr	r3, [r3, #0]
   15398:	2b00      	cmp	r3, #0
   1539a:	d197      	bne.n	152cc <FreeRTOS_CLIProcessCommand+0x1c>
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   1539c:	9a01      	ldr	r2, [sp, #4]
   1539e:	4909      	ldr	r1, [pc, #36]	; (153c4 <FreeRTOS_CLIProcessCommand+0x114>)
   153a0:	9800      	ldr	r0, [sp, #0]
   153a2:	4b07      	ldr	r3, [pc, #28]	; (153c0 <FreeRTOS_CLIProcessCommand+0x110>)
   153a4:	4798      	blx	r3
		xReturn = pdFALSE;
   153a6:	2000      	movs	r0, #0
	return xReturn;
   153a8:	e79b      	b.n	152e2 <FreeRTOS_CLIProcessCommand+0x32>
   153aa:	46c0      	nop			; (mov r8, r8)
   153ac:	20000ac8 	.word	0x20000ac8
   153b0:	200000b8 	.word	0x200000b8
   153b4:	000260c7 	.word	0x000260c7
   153b8:	000260d5 	.word	0x000260d5
   153bc:	000292ac 	.word	0x000292ac
   153c0:	000260f7 	.word	0x000260f7
   153c4:	00029304 	.word	0x00029304

000153c8 <prvTraceGetQueueType>:
	return (uint32_t)uxQueueGetQueueNumber(handle);
}
#endif /* (TRC_CFG_FREERTOS_VERSION < TRC_FREERTOS_VERSION_8_X) */

uint8_t prvTraceGetQueueType(void* handle)
{
   153c8:	b510      	push	{r4, lr}
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType(handle);
   153ca:	4b01      	ldr	r3, [pc, #4]	; (153d0 <prvTraceGetQueueType+0x8>)
   153cc:	4798      	blx	r3
}
   153ce:	bd10      	pop	{r4, pc}
   153d0:	00017a49 	.word	0x00017a49

000153d4 <prvTraceGetTaskNumberLow16>:

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* handle)
{
   153d4:	b510      	push	{r4, lr}
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
   153d6:	4b02      	ldr	r3, [pc, #8]	; (153e0 <prvTraceGetTaskNumberLow16+0xc>)
   153d8:	4798      	blx	r3
   153da:	b280      	uxth	r0, r0
}
   153dc:	bd10      	pop	{r4, pc}
   153de:	46c0      	nop			; (mov r8, r8)
   153e0:	000186d1 	.word	0x000186d1

000153e4 <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* handle)
{
   153e4:	b510      	push	{r4, lr}
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(handle));
   153e6:	4b02      	ldr	r3, [pc, #8]	; (153f0 <prvTraceGetTaskNumberHigh16+0xc>)
   153e8:	4798      	blx	r3
   153ea:	0c00      	lsrs	r0, r0, #16
}
   153ec:	bd10      	pop	{r4, pc}
   153ee:	46c0      	nop			; (mov r8, r8)
   153f0:	000186d1 	.word	0x000186d1

000153f4 <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* handle, uint16_t value)
{
   153f4:	b570      	push	{r4, r5, r6, lr}
   153f6:	0004      	movs	r4, r0
   153f8:	000d      	movs	r5, r1
	vTaskSetTaskNumber(handle, TRACE_SET_LOW16(uxTaskGetTaskNumber(handle), value));
   153fa:	4b04      	ldr	r3, [pc, #16]	; (1540c <prvTraceSetTaskNumberLow16+0x18>)
   153fc:	4798      	blx	r3
   153fe:	0c01      	lsrs	r1, r0, #16
   15400:	0409      	lsls	r1, r1, #16
   15402:	4329      	orrs	r1, r5
   15404:	0020      	movs	r0, r4
   15406:	4b02      	ldr	r3, [pc, #8]	; (15410 <prvTraceSetTaskNumberLow16+0x1c>)
   15408:	4798      	blx	r3
}
   1540a:	bd70      	pop	{r4, r5, r6, pc}
   1540c:	000186d1 	.word	0x000186d1
   15410:	000186dd 	.word	0x000186dd

00015414 <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* handle, uint16_t value)
{
   15414:	b570      	push	{r4, r5, r6, lr}
   15416:	0004      	movs	r4, r0
   15418:	000d      	movs	r5, r1
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
   1541a:	4b05      	ldr	r3, [pc, #20]	; (15430 <prvTraceSetTaskNumberHigh16+0x1c>)
   1541c:	4798      	blx	r3
   1541e:	0401      	lsls	r1, r0, #16
   15420:	0c09      	lsrs	r1, r1, #16
   15422:	042d      	lsls	r5, r5, #16
   15424:	4329      	orrs	r1, r5
   15426:	0020      	movs	r0, r4
   15428:	4b02      	ldr	r3, [pc, #8]	; (15434 <prvTraceSetTaskNumberHigh16+0x20>)
   1542a:	4798      	blx	r3
}
   1542c:	bd70      	pop	{r4, r5, r6, pc}
   1542e:	46c0      	nop			; (mov r8, r8)
   15430:	000186d1 	.word	0x000186d1
   15434:	000186dd 	.word	0x000186dd

00015438 <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* handle)
{
   15438:	b510      	push	{r4, lr}
	return (uint32_t)uxQueueGetQueueNumber(handle);
   1543a:	4b02      	ldr	r3, [pc, #8]	; (15444 <prvTraceGetQueueNumberLow16+0xc>)
   1543c:	4798      	blx	r3
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(handle));
   1543e:	b280      	uxth	r0, r0
}
   15440:	bd10      	pop	{r4, pc}
   15442:	46c0      	nop			; (mov r8, r8)
   15444:	00017a41 	.word	0x00017a41

00015448 <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* handle)
{
   15448:	b510      	push	{r4, lr}
	return (uint32_t)uxQueueGetQueueNumber(handle);
   1544a:	4b02      	ldr	r3, [pc, #8]	; (15454 <prvTraceGetQueueNumberHigh16+0xc>)
   1544c:	4798      	blx	r3
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(handle));
   1544e:	0c00      	lsrs	r0, r0, #16
}
   15450:	bd10      	pop	{r4, pc}
   15452:	46c0      	nop			; (mov r8, r8)
   15454:	00017a41 	.word	0x00017a41

00015458 <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* handle, uint16_t value)
{
   15458:	b570      	push	{r4, r5, r6, lr}
   1545a:	0004      	movs	r4, r0
   1545c:	000d      	movs	r5, r1
	return (uint32_t)uxQueueGetQueueNumber(handle);
   1545e:	4b04      	ldr	r3, [pc, #16]	; (15470 <prvTraceSetQueueNumberLow16+0x18>)
   15460:	4798      	blx	r3
	vQueueSetQueueNumber(handle, TRACE_SET_LOW16(prvTraceGetQueueNumber(handle), value));
   15462:	0c01      	lsrs	r1, r0, #16
   15464:	0409      	lsls	r1, r1, #16
   15466:	4329      	orrs	r1, r5
   15468:	0020      	movs	r0, r4
   1546a:	4b02      	ldr	r3, [pc, #8]	; (15474 <prvTraceSetQueueNumberLow16+0x1c>)
   1546c:	4798      	blx	r3
}
   1546e:	bd70      	pop	{r4, r5, r6, pc}
   15470:	00017a41 	.word	0x00017a41
   15474:	00017a45 	.word	0x00017a45

00015478 <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* handle, uint16_t value)
{
   15478:	b570      	push	{r4, r5, r6, lr}
   1547a:	0004      	movs	r4, r0
   1547c:	000d      	movs	r5, r1
	return (uint32_t)uxQueueGetQueueNumber(handle);
   1547e:	4b05      	ldr	r3, [pc, #20]	; (15494 <prvTraceSetQueueNumberHigh16+0x1c>)
   15480:	4798      	blx	r3
	vQueueSetQueueNumber(handle, TRACE_SET_HIGH16(prvTraceGetQueueNumber(handle), value));
   15482:	0401      	lsls	r1, r0, #16
   15484:	0c09      	lsrs	r1, r1, #16
   15486:	042d      	lsls	r5, r5, #16
   15488:	4329      	orrs	r1, r5
   1548a:	0020      	movs	r0, r4
   1548c:	4b02      	ldr	r3, [pc, #8]	; (15498 <prvTraceSetQueueNumberHigh16+0x20>)
   1548e:	4798      	blx	r3
}
   15490:	bd70      	pop	{r4, r5, r6, pc}
   15492:	46c0      	nop			; (mov r8, r8)
   15494:	00017a41 	.word	0x00017a41
   15498:	00017a45 	.word	0x00017a45

0001549c <prvAddTaskToStackMonitor>:
	int foundEmptySlot = 0;

	// find an empty slot
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
	{
		if (tasksInStackMonitor[i].tcb == NULL)
   1549c:	4b0d      	ldr	r3, [pc, #52]	; (154d4 <prvAddTaskToStackMonitor+0x38>)
   1549e:	681b      	ldr	r3, [r3, #0]
   154a0:	2b00      	cmp	r3, #0
   154a2:	d00d      	beq.n	154c0 <prvAddTaskToStackMonitor+0x24>
   154a4:	2301      	movs	r3, #1
   154a6:	490b      	ldr	r1, [pc, #44]	; (154d4 <prvAddTaskToStackMonitor+0x38>)
   154a8:	00da      	lsls	r2, r3, #3
   154aa:	5852      	ldr	r2, [r2, r1]
   154ac:	2a00      	cmp	r2, #0
   154ae:	d008      	beq.n	154c2 <prvAddTaskToStackMonitor+0x26>
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
   154b0:	3301      	adds	r3, #1
   154b2:	2b0a      	cmp	r3, #10
   154b4:	d1f8      	bne.n	154a8 <prvAddTaskToStackMonitor+0xc>
		}
	}

	if (foundEmptySlot == 0)
	{
		tasksNotIncluded++;
   154b6:	4a08      	ldr	r2, [pc, #32]	; (154d8 <prvAddTaskToStackMonitor+0x3c>)
   154b8:	6813      	ldr	r3, [r2, #0]
   154ba:	3301      	adds	r3, #1
   154bc:	6013      	str	r3, [r2, #0]
	}
}
   154be:	4770      	bx	lr
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
   154c0:	2300      	movs	r3, #0
			tasksInStackMonitor[i].tcb = task;
   154c2:	4a04      	ldr	r2, [pc, #16]	; (154d4 <prvAddTaskToStackMonitor+0x38>)
   154c4:	00db      	lsls	r3, r3, #3
   154c6:	5098      	str	r0, [r3, r2]
			tasksInStackMonitor[i].uiPreviousLowMark = 0xFFFFFFFF;
   154c8:	18d3      	adds	r3, r2, r3
   154ca:	2201      	movs	r2, #1
   154cc:	4252      	negs	r2, r2
   154ce:	605a      	str	r2, [r3, #4]
   154d0:	e7f5      	b.n	154be <prvAddTaskToStackMonitor+0x22>
   154d2:	46c0      	nop			; (mov r8, r8)
   154d4:	20000ad8 	.word	0x20000ad8
   154d8:	20000b28 	.word	0x20000b28

000154dc <prvReportStackUsage>:
		}
	}
}

void prvReportStackUsage()
{
   154dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   154de:	46ce      	mov	lr, r9
   154e0:	4647      	mov	r7, r8
   154e2:	b580      	push	{r7, lr}
	static int i = 0;	/* Static index used to loop over the monitored tasks */
	int count = 0;		/* The number of generated reports */
	int initial = i;	/* Used to make sure we break if we are back at the inital value */
   154e4:	4b1d      	ldr	r3, [pc, #116]	; (1555c <prvReportStackUsage+0x80>)
   154e6:	681b      	ldr	r3, [r3, #0]
   154e8:	4699      	mov	r9, r3
	int count = 0;		/* The number of generated reports */
   154ea:	2400      	movs	r4, #0
	
	do
	{
		/* Check the current spot */
		if (tasksInStackMonitor[i].tcb != NULL)
   154ec:	4e1c      	ldr	r6, [pc, #112]	; (15560 <prvReportStackUsage+0x84>)
   154ee:	4d1b      	ldr	r5, [pc, #108]	; (1555c <prvReportStackUsage+0x80>)
		{
			/* Get the amount of unused stack */
			uint32_t unusedStackSpace = uxTaskGetStackHighWaterMark((TaskType)tasksInStackMonitor[i].tcb);
   154f0:	4b1c      	ldr	r3, [pc, #112]	; (15564 <prvReportStackUsage+0x88>)
   154f2:	4698      	mov	r8, r3
   154f4:	e01b      	b.n	1552e <prvReportStackUsage+0x52>
			/* Store for later use */
			if (tasksInStackMonitor[i].uiPreviousLowMark > unusedStackSpace)
				tasksInStackMonitor[i].uiPreviousLowMark = unusedStackSpace;

#if TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT
			prvTraceStoreKernelCallWithParam(TRACE_UNUSED_STACK, TRACE_CLASS_TASK, TRACE_GET_TASK_NUMBER(tasksInStackMonitor[i].tcb), tasksInStackMonitor[i].uiPreviousLowMark);
   154f6:	4f1a      	ldr	r7, [pc, #104]	; (15560 <prvReportStackUsage+0x84>)
   154f8:	00db      	lsls	r3, r3, #3
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
   154fa:	59d8      	ldr	r0, [r3, r7]
   154fc:	4b1a      	ldr	r3, [pc, #104]	; (15568 <prvReportStackUsage+0x8c>)
   154fe:	4798      	blx	r3
			prvTraceStoreKernelCallWithParam(TRACE_UNUSED_STACK, TRACE_CLASS_TASK, TRACE_GET_TASK_NUMBER(tasksInStackMonitor[i].tcb), tasksInStackMonitor[i].uiPreviousLowMark);
   15500:	4b16      	ldr	r3, [pc, #88]	; (1555c <prvReportStackUsage+0x80>)
   15502:	681b      	ldr	r3, [r3, #0]
   15504:	00db      	lsls	r3, r3, #3
   15506:	18fb      	adds	r3, r7, r3
   15508:	685b      	ldr	r3, [r3, #4]
   1550a:	22ff      	movs	r2, #255	; 0xff
   1550c:	4002      	ands	r2, r0
   1550e:	2103      	movs	r1, #3
   15510:	20ea      	movs	r0, #234	; 0xea
   15512:	4f16      	ldr	r7, [pc, #88]	; (1556c <prvReportStackUsage+0x90>)
   15514:	47b8      	blx	r7
#else /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */
			prvTraceStoreEvent2(PSF_EVENT_UNUSED_STACK, (uint32_t)tasksInStackMonitor[i].tcb, tasksInStackMonitor[i].uiPreviousLowMark);
#endif /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */

			count++;
   15516:	3401      	adds	r4, #1
		}

		i = (i + 1) % TRC_CFG_STACK_MONITOR_MAX_TASKS; // Move i beyond this task
   15518:	4f10      	ldr	r7, [pc, #64]	; (1555c <prvReportStackUsage+0x80>)
   1551a:	683b      	ldr	r3, [r7, #0]
   1551c:	1c58      	adds	r0, r3, #1
   1551e:	210a      	movs	r1, #10
   15520:	4b13      	ldr	r3, [pc, #76]	; (15570 <prvReportStackUsage+0x94>)
   15522:	4798      	blx	r3
   15524:	6039      	str	r1, [r7, #0]
	} while (count < TRC_CFG_STACK_MONITOR_MAX_REPORTS && i != initial);
   15526:	2c00      	cmp	r4, #0
   15528:	dc13      	bgt.n	15552 <prvReportStackUsage+0x76>
   1552a:	4589      	cmp	r9, r1
   1552c:	d011      	beq.n	15552 <prvReportStackUsage+0x76>
		if (tasksInStackMonitor[i].tcb != NULL)
   1552e:	682b      	ldr	r3, [r5, #0]
   15530:	00db      	lsls	r3, r3, #3
   15532:	5998      	ldr	r0, [r3, r6]
   15534:	2800      	cmp	r0, #0
   15536:	d0ef      	beq.n	15518 <prvReportStackUsage+0x3c>
			uint32_t unusedStackSpace = uxTaskGetStackHighWaterMark((TaskType)tasksInStackMonitor[i].tcb);
   15538:	47c0      	blx	r8
			if (tasksInStackMonitor[i].uiPreviousLowMark > unusedStackSpace)
   1553a:	4b08      	ldr	r3, [pc, #32]	; (1555c <prvReportStackUsage+0x80>)
   1553c:	681b      	ldr	r3, [r3, #0]
   1553e:	00d9      	lsls	r1, r3, #3
   15540:	4a07      	ldr	r2, [pc, #28]	; (15560 <prvReportStackUsage+0x84>)
   15542:	1852      	adds	r2, r2, r1
   15544:	6852      	ldr	r2, [r2, #4]
   15546:	4290      	cmp	r0, r2
   15548:	d2d5      	bcs.n	154f6 <prvReportStackUsage+0x1a>
				tasksInStackMonitor[i].uiPreviousLowMark = unusedStackSpace;
   1554a:	4a05      	ldr	r2, [pc, #20]	; (15560 <prvReportStackUsage+0x84>)
   1554c:	1852      	adds	r2, r2, r1
   1554e:	6050      	str	r0, [r2, #4]
   15550:	e7d1      	b.n	154f6 <prvReportStackUsage+0x1a>
}
   15552:	bc0c      	pop	{r2, r3}
   15554:	4690      	mov	r8, r2
   15556:	4699      	mov	r9, r3
   15558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1555a:	46c0      	nop			; (mov r8, r8)
   1555c:	20000ad4 	.word	0x20000ad4
   15560:	20000ad8 	.word	0x20000ad8
   15564:	000186e5 	.word	0x000186e5
   15568:	000186d1 	.word	0x000186d1
   1556c:	000162e1 	.word	0x000162e1
   15570:	00024335 	.word	0x00024335

00015574 <TzCtrl>:
* interface (assuming TRC_STREAM_PORT_USE_INTERNAL_BUFFER == 1) and for
* receiving commands from Tracealyzer. Also does some diagnostics.
******************************************************************************/
#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
static portTASK_FUNCTION(TzCtrl, pvParameters)
{
   15574:	b570      	push	{r4, r5, r6, lr}
	(void)pvParameters;

	while (1)
	{
		if (xTraceIsRecordingEnabled())
   15576:	4d05      	ldr	r5, [pc, #20]	; (1558c <TzCtrl+0x18>)
		{
			prvReportStackUsage();
   15578:	4e05      	ldr	r6, [pc, #20]	; (15590 <TzCtrl+0x1c>)
		}

		vTaskDelay(TRC_CFG_CTRL_TASK_DELAY);
   1557a:	4c06      	ldr	r4, [pc, #24]	; (15594 <TzCtrl+0x20>)
   1557c:	e001      	b.n	15582 <TzCtrl+0xe>
   1557e:	2004      	movs	r0, #4
   15580:	47a0      	blx	r4
		if (xTraceIsRecordingEnabled())
   15582:	47a8      	blx	r5
   15584:	2800      	cmp	r0, #0
   15586:	d0fa      	beq.n	1557e <TzCtrl+0xa>
			prvReportStackUsage();
   15588:	47b0      	blx	r6
   1558a:	e7f8      	b.n	1557e <TzCtrl+0xa>
   1558c:	000157fd 	.word	0x000157fd
   15590:	000154dd 	.word	0x000154dd
   15594:	000181d5 	.word	0x000181d5

00015598 <prvTraceGetCurrentTaskHandle>:
{
   15598:	b510      	push	{r4, lr}
	return xTaskGetCurrentTaskHandle();
   1559a:	4b01      	ldr	r3, [pc, #4]	; (155a0 <prvTraceGetCurrentTaskHandle+0x8>)
   1559c:	4798      	blx	r3
}
   1559e:	bd10      	pop	{r4, pc}
   155a0:	00018711 	.word	0x00018711

000155a4 <vTraceEnable>:
{
   155a4:	b510      	push	{r4, lr}
   155a6:	b082      	sub	sp, #8
   155a8:	0004      	movs	r4, r0
	prvTraceInitTraceData();
   155aa:	4b12      	ldr	r3, [pc, #72]	; (155f4 <vTraceEnable+0x50>)
   155ac:	4798      	blx	r3
	if (startOption == TRC_START)
   155ae:	2c01      	cmp	r4, #1
   155b0:	d009      	beq.n	155c6 <vTraceEnable+0x22>
	else if (startOption == TRC_START_AWAIT_HOST)
   155b2:	2c02      	cmp	r4, #2
   155b4:	d00a      	beq.n	155cc <vTraceEnable+0x28>
	else if (startOption != TRC_INIT)
   155b6:	2c00      	cmp	r4, #0
   155b8:	d10c      	bne.n	155d4 <vTraceEnable+0x30>
	if (HandleTzCtrl == NULL)
   155ba:	4b0f      	ldr	r3, [pc, #60]	; (155f8 <vTraceEnable+0x54>)
   155bc:	681b      	ldr	r3, [r3, #0]
   155be:	2b00      	cmp	r3, #0
   155c0:	d00c      	beq.n	155dc <vTraceEnable+0x38>
}
   155c2:	b002      	add	sp, #8
   155c4:	bd10      	pop	{r4, pc}
		vTraceStart();
   155c6:	4b0d      	ldr	r3, [pc, #52]	; (155fc <vTraceEnable+0x58>)
   155c8:	4798      	blx	r3
   155ca:	e7f6      	b.n	155ba <vTraceEnable+0x16>
		prvTraceError("vTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
   155cc:	480c      	ldr	r0, [pc, #48]	; (15600 <vTraceEnable+0x5c>)
   155ce:	4b0d      	ldr	r3, [pc, #52]	; (15604 <vTraceEnable+0x60>)
   155d0:	4798      	blx	r3
   155d2:	e7f2      	b.n	155ba <vTraceEnable+0x16>
		prvTraceError("Unexpected argument to vTraceEnable (snapshot mode)");
   155d4:	480c      	ldr	r0, [pc, #48]	; (15608 <vTraceEnable+0x64>)
   155d6:	4b0b      	ldr	r3, [pc, #44]	; (15604 <vTraceEnable+0x60>)
   155d8:	4798      	blx	r3
   155da:	e7ee      	b.n	155ba <vTraceEnable+0x16>
		xTaskCreate(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, &HandleTzCtrl);
   155dc:	4b06      	ldr	r3, [pc, #24]	; (155f8 <vTraceEnable+0x54>)
   155de:	9301      	str	r3, [sp, #4]
   155e0:	2304      	movs	r3, #4
   155e2:	9300      	str	r3, [sp, #0]
   155e4:	2300      	movs	r3, #0
   155e6:	22c8      	movs	r2, #200	; 0xc8
   155e8:	4908      	ldr	r1, [pc, #32]	; (1560c <vTraceEnable+0x68>)
   155ea:	4809      	ldr	r0, [pc, #36]	; (15610 <vTraceEnable+0x6c>)
   155ec:	4c09      	ldr	r4, [pc, #36]	; (15614 <vTraceEnable+0x70>)
   155ee:	47a0      	blx	r4
}
   155f0:	e7e7      	b.n	155c2 <vTraceEnable+0x1e>
   155f2:	46c0      	nop			; (mov r8, r8)
   155f4:	00015811 	.word	0x00015811
   155f8:	20000ad0 	.word	0x20000ad0
   155fc:	000165f5 	.word	0x000165f5
   15600:	000296c0 	.word	0x000296c0
   15604:	000159e9 	.word	0x000159e9
   15608:	00029700 	.word	0x00029700
   1560c:	00029734 	.word	0x00029734
   15610:	00015575 	.word	0x00015575
   15614:	00017be5 	.word	0x00017be5

00015618 <vTraceInitObjectPropertyTable>:
}
#endif

/* Initialization of the object property table */
void vTraceInitObjectPropertyTable()
{
   15618:	b510      	push	{r4, lr}
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
   1561a:	4b2f      	ldr	r3, [pc, #188]	; (156d8 <vTraceInitObjectPropertyTable+0xc0>)
   1561c:	681b      	ldr	r3, [r3, #0]
   1561e:	2209      	movs	r2, #9
   15620:	65da      	str	r2, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
   15622:	3201      	adds	r2, #1
   15624:	2164      	movs	r1, #100	; 0x64
   15626:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = TRC_CFG_NSEMAPHORE;
   15628:	3101      	adds	r1, #1
   1562a:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = TRC_CFG_NMUTEX;
   1562c:	3101      	adds	r1, #1
   1562e:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
   15630:	3205      	adds	r2, #5
   15632:	3101      	adds	r1, #1
   15634:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
   15636:	3962      	subs	r1, #98	; 0x62
   15638:	2068      	movs	r0, #104	; 0x68
   1563a:	5419      	strb	r1, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
   1563c:	3001      	adds	r0, #1
   1563e:	5419      	strb	r1, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
   15640:	3001      	adds	r0, #1
   15642:	5419      	strb	r1, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
   15644:	3001      	adds	r0, #1
   15646:	5419      	strb	r1, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
   15648:	3001      	adds	r0, #1
   1564a:	5419      	strb	r1, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
   1564c:	316b      	adds	r1, #107	; 0x6b
   1564e:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = TRC_CFG_NAME_LEN_SEMAPHORE;
   15650:	3101      	adds	r1, #1
   15652:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = TRC_CFG_NAME_LEN_MUTEX;
   15654:	3101      	adds	r1, #1
   15656:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
   15658:	3101      	adds	r1, #1
   1565a:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
   1565c:	3101      	adds	r1, #1
   1565e:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = TRC_CFG_NAME_LEN_TIMER;
   15660:	3101      	adds	r1, #1
   15662:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = TRC_CFG_NAME_LEN_EVENTGROUP;
   15664:	3101      	adds	r1, #1
   15666:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
   15668:	3101      	adds	r1, #1
   1566a:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
   1566c:	3101      	adds	r1, #1
   1566e:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
   15670:	3968      	subs	r1, #104	; 0x68
   15672:	326d      	adds	r2, #109	; 0x6d
   15674:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
   15676:	3201      	adds	r2, #1
   15678:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
   1567a:	3201      	adds	r2, #1
   1567c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
   1567e:	3a6b      	subs	r2, #107	; 0x6b
   15680:	3013      	adds	r0, #19
   15682:	541a      	strb	r2, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
   15684:	2411      	movs	r4, #17
   15686:	3001      	adds	r0, #1
   15688:	541c      	strb	r4, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
   1568a:	3001      	adds	r0, #1
   1568c:	5419      	strb	r1, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
   1568e:	3172      	adds	r1, #114	; 0x72
   15690:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
   15692:	3101      	adds	r1, #1
   15694:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
   15696:	3101      	adds	r1, #1
   15698:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
   1569a:	2100      	movs	r1, #0
   1569c:	3275      	adds	r2, #117	; 0x75
   1569e:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
   156a0:	31a0      	adds	r1, #160	; 0xa0
   156a2:	3202      	adds	r2, #2
   156a4:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
   156a6:	31a0      	adds	r1, #160	; 0xa0
   156a8:	3202      	adds	r2, #2
   156aa:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
   156ac:	31a0      	adds	r1, #160	; 0xa0
   156ae:	3202      	adds	r2, #2
   156b0:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
   156b2:	490a      	ldr	r1, [pc, #40]	; (156dc <vTraceInitObjectPropertyTable+0xc4>)
   156b4:	3202      	adds	r2, #2
   156b6:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
   156b8:	4909      	ldr	r1, [pc, #36]	; (156e0 <vTraceInitObjectPropertyTable+0xc8>)
   156ba:	3202      	adds	r2, #2
   156bc:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
   156be:	4909      	ldr	r1, [pc, #36]	; (156e4 <vTraceInitObjectPropertyTable+0xcc>)
   156c0:	3202      	adds	r2, #2
   156c2:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
   156c4:	4908      	ldr	r1, [pc, #32]	; (156e8 <vTraceInitObjectPropertyTable+0xd0>)
   156c6:	3202      	adds	r2, #2
   156c8:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
   156ca:	315f      	adds	r1, #95	; 0x5f
   156cc:	3202      	adds	r2, #2
   156ce:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
   156d0:	4a06      	ldr	r2, [pc, #24]	; (156ec <vTraceInitObjectPropertyTable+0xd4>)
   156d2:	661a      	str	r2, [r3, #96]	; 0x60
}
   156d4:	bd10      	pop	{r4, pc}
   156d6:	46c0      	nop			; (mov r8, r8)
   156d8:	20000b2c 	.word	0x20000b2c
   156dc:	000002fd 	.word	0x000002fd
   156e0:	00000352 	.word	0x00000352
   156e4:	000003a2 	.word	0x000003a2
   156e8:	00000401 	.word	0x00000401
   156ec:	000004bf 	.word	0x000004bf

000156f0 <vTraceInitObjectHandleStack>:

/* Initialization of the handle mechanism, see e.g, prvTraceGetObjectHandle */
void vTraceInitObjectHandleStack()
{
	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
   156f0:	4b17      	ldr	r3, [pc, #92]	; (15750 <vTraceInitObjectHandleStack+0x60>)
   156f2:	2200      	movs	r2, #0
   156f4:	825a      	strh	r2, [r3, #18]
   156f6:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
   156f8:	320a      	adds	r2, #10
   156fa:	829a      	strh	r2, [r3, #20]
   156fc:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
   156fe:	320a      	adds	r2, #10
   15700:	82da      	strh	r2, [r3, #22]
   15702:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
   15704:	320a      	adds	r2, #10
   15706:	831a      	strh	r2, [r3, #24]
   15708:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
   1570a:	320f      	adds	r2, #15
   1570c:	835a      	strh	r2, [r3, #26]
   1570e:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
   15710:	3205      	adds	r2, #5
   15712:	839a      	strh	r2, [r3, #28]
   15714:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
   15716:	3205      	adds	r2, #5
   15718:	83da      	strh	r2, [r3, #30]
   1571a:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
   1571c:	3205      	adds	r2, #5
   1571e:	841a      	strh	r2, [r3, #32]
   15720:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
   15722:	3205      	adds	r2, #5
   15724:	845a      	strh	r2, [r3, #34]	; 0x22
   15726:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
   15728:	3a38      	subs	r2, #56	; 0x38
   1572a:	849a      	strh	r2, [r3, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
   1572c:	320a      	adds	r2, #10
   1572e:	84da      	strh	r2, [r3, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
   15730:	320a      	adds	r2, #10
   15732:	851a      	strh	r2, [r3, #40]	; 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
   15734:	320f      	adds	r2, #15
   15736:	855a      	strh	r2, [r3, #42]	; 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
   15738:	3205      	adds	r2, #5
   1573a:	859a      	strh	r2, [r3, #44]	; 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
   1573c:	3205      	adds	r2, #5
   1573e:	85da      	strh	r2, [r3, #46]	; 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
   15740:	3205      	adds	r2, #5
   15742:	861a      	strh	r2, [r3, #48]	; 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
   15744:	3205      	adds	r2, #5
   15746:	865a      	strh	r2, [r3, #50]	; 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
   15748:	3205      	adds	r2, #5
   1574a:	869a      	strh	r2, [r3, #52]	; 0x34
}
   1574c:	4770      	bx	lr
   1574e:	46c0      	nop			; (mov r8, r8)
   15750:	20000b48 	.word	0x20000b48

00015754 <pszTraceGetErrorNotEnoughHandles>:

/* Returns the "Not enough handles" error message for this object class */
const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
	switch(objectclass)
   15754:	2808      	cmp	r0, #8
   15756:	d813      	bhi.n	15780 <pszTraceGetErrorNotEnoughHandles+0x2c>
   15758:	0080      	lsls	r0, r0, #2
   1575a:	4b0b      	ldr	r3, [pc, #44]	; (15788 <pszTraceGetErrorNotEnoughHandles+0x34>)
   1575c:	581b      	ldr	r3, [r3, r0]
   1575e:	469f      	mov	pc, r3
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase TRC_CFG_NISR in trcSnapshotConfig.h";
   15760:	480a      	ldr	r0, [pc, #40]	; (1578c <pszTraceGetErrorNotEnoughHandles+0x38>)
   15762:	e010      	b.n	15786 <pszTraceGetErrorNotEnoughHandles+0x32>
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase TRC_CFG_NSEMAPHORE in trcSnapshotConfig.h";
   15764:	480a      	ldr	r0, [pc, #40]	; (15790 <pszTraceGetErrorNotEnoughHandles+0x3c>)
   15766:	e00e      	b.n	15786 <pszTraceGetErrorNotEnoughHandles+0x32>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase TRC_CFG_NMUTEX in trcSnapshotConfig.h";
   15768:	480a      	ldr	r0, [pc, #40]	; (15794 <pszTraceGetErrorNotEnoughHandles+0x40>)
   1576a:	e00c      	b.n	15786 <pszTraceGetErrorNotEnoughHandles+0x32>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase TRC_CFG_NQUEUE in trcSnapshotConfig.h";
   1576c:	480a      	ldr	r0, [pc, #40]	; (15798 <pszTraceGetErrorNotEnoughHandles+0x44>)
   1576e:	e00a      	b.n	15786 <pszTraceGetErrorNotEnoughHandles+0x32>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase TRC_CFG_NTIMER in trcSnapshotConfig.h";
   15770:	480a      	ldr	r0, [pc, #40]	; (1579c <pszTraceGetErrorNotEnoughHandles+0x48>)
   15772:	e008      	b.n	15786 <pszTraceGetErrorNotEnoughHandles+0x32>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase TRC_CFG_NEVENTGROUP in trcSnapshotConfig.h";
   15774:	480a      	ldr	r0, [pc, #40]	; (157a0 <pszTraceGetErrorNotEnoughHandles+0x4c>)
   15776:	e006      	b.n	15786 <pszTraceGetErrorNotEnoughHandles+0x32>
	case TRACE_CLASS_STREAMBUFFER:
		return "Not enough STREAMBUFFER handles - increase TRC_CFG_NSTREAMBUFFER in trcSnapshotConfig.h";
   15778:	480a      	ldr	r0, [pc, #40]	; (157a4 <pszTraceGetErrorNotEnoughHandles+0x50>)
   1577a:	e004      	b.n	15786 <pszTraceGetErrorNotEnoughHandles+0x32>
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
   1577c:	480a      	ldr	r0, [pc, #40]	; (157a8 <pszTraceGetErrorNotEnoughHandles+0x54>)
   1577e:	e002      	b.n	15786 <pszTraceGetErrorNotEnoughHandles+0x32>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
   15780:	480a      	ldr	r0, [pc, #40]	; (157ac <pszTraceGetErrorNotEnoughHandles+0x58>)
   15782:	e000      	b.n	15786 <pszTraceGetErrorNotEnoughHandles+0x32>
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
   15784:	480a      	ldr	r0, [pc, #40]	; (157b0 <pszTraceGetErrorNotEnoughHandles+0x5c>)
	}
}
   15786:	4770      	bx	lr
   15788:	0002939c 	.word	0x0002939c
   1578c:	00029408 	.word	0x00029408
   15790:	00029450 	.word	0x00029450
   15794:	000294a4 	.word	0x000294a4
   15798:	000294f0 	.word	0x000294f0
   1579c:	0002953c 	.word	0x0002953c
   157a0:	00029588 	.word	0x00029588
   157a4:	000295dc 	.word	0x000295dc
   157a8:	00029634 	.word	0x00029634
   157ac:	00029690 	.word	0x00029690
   157b0:	000293c0 	.word	0x000293c0

000157b4 <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
   157b4:	b510      	push	{r4, lr}
	uint32_t i;
	for (i = 0; i < maxLength; i++)
   157b6:	2a00      	cmp	r2, #0
   157b8:	d00d      	beq.n	157d6 <prvStrncpy+0x22>
	{
		dst[i] = src[i];
   157ba:	780b      	ldrb	r3, [r1, #0]
   157bc:	7003      	strb	r3, [r0, #0]
		if (src[i] == 0)
   157be:	780b      	ldrb	r3, [r1, #0]
   157c0:	2b00      	cmp	r3, #0
   157c2:	d008      	beq.n	157d6 <prvStrncpy+0x22>
   157c4:	2300      	movs	r3, #0
	for (i = 0; i < maxLength; i++)
   157c6:	3301      	adds	r3, #1
   157c8:	429a      	cmp	r2, r3
   157ca:	d004      	beq.n	157d6 <prvStrncpy+0x22>
		dst[i] = src[i];
   157cc:	5ccc      	ldrb	r4, [r1, r3]
   157ce:	54c4      	strb	r4, [r0, r3]
		if (src[i] == 0)
   157d0:	5ccc      	ldrb	r4, [r1, r3]
   157d2:	2c00      	cmp	r4, #0
   157d4:	d1f7      	bne.n	157c6 <prvStrncpy+0x12>
			break;
	}
}
   157d6:	bd10      	pop	{r4, pc}

000157d8 <vTraceStop>:
{
   157d8:	b510      	push	{r4, lr}
	if (RecorderDataPtr != NULL)
   157da:	4b06      	ldr	r3, [pc, #24]	; (157f4 <vTraceStop+0x1c>)
   157dc:	681b      	ldr	r3, [r3, #0]
   157de:	2b00      	cmp	r3, #0
   157e0:	d001      	beq.n	157e6 <vTraceStop+0xe>
		RecorderDataPtr->recorderActive = 0;
   157e2:	2200      	movs	r2, #0
   157e4:	631a      	str	r2, [r3, #48]	; 0x30
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
   157e6:	4b04      	ldr	r3, [pc, #16]	; (157f8 <vTraceStop+0x20>)
   157e8:	681b      	ldr	r3, [r3, #0]
   157ea:	2b00      	cmp	r3, #0
   157ec:	d000      	beq.n	157f0 <vTraceStop+0x18>
		(*vTraceStopHookPtr)();			/* An application call-back function. */
   157ee:	4798      	blx	r3
}
   157f0:	bd10      	pop	{r4, pc}
   157f2:	46c0      	nop			; (mov r8, r8)
   157f4:	20000b2c 	.word	0x20000b2c
   157f8:	20000bf4 	.word	0x20000bf4

000157fc <xTraceIsRecordingEnabled>:
	if (RecorderDataPtr != NULL)
   157fc:	4b03      	ldr	r3, [pc, #12]	; (1580c <xTraceIsRecordingEnabled+0x10>)
   157fe:	681b      	ldr	r3, [r3, #0]
   15800:	2b00      	cmp	r3, #0
   15802:	d001      	beq.n	15808 <xTraceIsRecordingEnabled+0xc>
		return (int)RecorderDataPtr->recorderActive;
   15804:	6b18      	ldr	r0, [r3, #48]	; 0x30
}
   15806:	4770      	bx	lr
   15808:	2000      	movs	r0, #0
   1580a:	e7fc      	b.n	15806 <xTraceIsRecordingEnabled+0xa>
   1580c:	20000b2c 	.word	0x20000b2c

00015810 <prvTraceInitTraceData>:
{	
   15810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15812:	46de      	mov	lr, fp
   15814:	4657      	mov	r7, sl
   15816:	464e      	mov	r6, r9
   15818:	4645      	mov	r5, r8
   1581a:	b5e0      	push	{r5, r6, r7, lr}
	if (RecorderDataPtr == NULL)
   1581c:	4b51      	ldr	r3, [pc, #324]	; (15964 <prvTraceInitTraceData+0x154>)
   1581e:	681b      	ldr	r3, [r3, #0]
   15820:	2b00      	cmp	r3, #0
   15822:	d100      	bne.n	15826 <prvTraceInitTraceData+0x16>
   15824:	e099      	b.n	1595a <prvTraceInitTraceData+0x14a>
		if (RecorderDataPtr->startmarker0 == 1)
   15826:	781b      	ldrb	r3, [r3, #0]
   15828:	2b01      	cmp	r3, #1
   1582a:	d100      	bne.n	1582e <prvTraceInitTraceData+0x1e>
   1582c:	e08f      	b.n	1594e <prvTraceInitTraceData+0x13e>
	init_hwtc_count = TRC_HWTC_COUNT;
   1582e:	4b4e      	ldr	r3, [pc, #312]	; (15968 <prvTraceInitTraceData+0x158>)
   15830:	681a      	ldr	r2, [r3, #0]
   15832:	4b4e      	ldr	r3, [pc, #312]	; (1596c <prvTraceInitTraceData+0x15c>)
   15834:	601a      	str	r2, [r3, #0]
	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
   15836:	4c4b      	ldr	r4, [pc, #300]	; (15964 <prvTraceInitTraceData+0x154>)
   15838:	25bd      	movs	r5, #189	; 0xbd
   1583a:	012d      	lsls	r5, r5, #4
   1583c:	002a      	movs	r2, r5
   1583e:	2100      	movs	r1, #0
   15840:	6820      	ldr	r0, [r4, #0]
   15842:	4b4b      	ldr	r3, [pc, #300]	; (15970 <prvTraceInitTraceData+0x160>)
   15844:	4798      	blx	r3
	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
   15846:	6823      	ldr	r3, [r4, #0]
   15848:	4a4a      	ldr	r2, [pc, #296]	; (15974 <prvTraceInitTraceData+0x164>)
   1584a:	819a      	strh	r2, [r3, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
   1584c:	2205      	movs	r2, #5
   1584e:	739a      	strb	r2, [r3, #14]
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
   15850:	2200      	movs	r2, #0
   15852:	73da      	strb	r2, [r3, #15]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
   15854:	611d      	str	r5, [r3, #16]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
   15856:	2196      	movs	r1, #150	; 0x96
   15858:	0049      	lsls	r1, r1, #1
   1585a:	6199      	str	r1, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t) 0xF0F0F0F0;
   1585c:	4946      	ldr	r1, [pc, #280]	; (15978 <prvTraceInitTraceData+0x168>)
   1585e:	6559      	str	r1, [r3, #84]	; 0x54
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
   15860:	659a      	str	r2, [r3, #88]	; 0x58
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
   15862:	635a      	str	r2, [r3, #52]	; 0x34
	vTraceInitObjectPropertyTable();
   15864:	4b45      	ldr	r3, [pc, #276]	; (1597c <prvTraceInitTraceData+0x16c>)
   15866:	4798      	blx	r3
	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
   15868:	6820      	ldr	r0, [r4, #0]
   1586a:	4a45      	ldr	r2, [pc, #276]	; (15980 <prvTraceInitTraceData+0x170>)
   1586c:	4b45      	ldr	r3, [pc, #276]	; (15984 <prvTraceInitTraceData+0x174>)
   1586e:	50c2      	str	r2, [r0, r3]
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
   15870:	22c8      	movs	r2, #200	; 0xc8
   15872:	3304      	adds	r3, #4
   15874:	50c2      	str	r2, [r0, r3]
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
   15876:	4b44      	ldr	r3, [pc, #272]	; (15988 <prvTraceInitTraceData+0x178>)
   15878:	3ac7      	subs	r2, #199	; 0xc7
   1587a:	50c2      	str	r2, [r0, r3]
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
   1587c:	4a43      	ldr	r2, [pc, #268]	; (1598c <prvTraceInitTraceData+0x17c>)
   1587e:	3355      	adds	r3, #85	; 0x55
   15880:	33ff      	adds	r3, #255	; 0xff
   15882:	50c2      	str	r2, [r0, r3]
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
   15884:	4b42      	ldr	r3, [pc, #264]	; (15990 <prvTraceInitTraceData+0x180>)
   15886:	469c      	mov	ip, r3
   15888:	4460      	add	r0, ip
   1588a:	2250      	movs	r2, #80	; 0x50
   1588c:	4941      	ldr	r1, [pc, #260]	; (15994 <prvTraceInitTraceData+0x184>)
   1588e:	4b42      	ldr	r3, [pc, #264]	; (15998 <prvTraceInitTraceData+0x188>)
   15890:	4798      	blx	r3
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
   15892:	6823      	ldr	r3, [r4, #0]
   15894:	4941      	ldr	r1, [pc, #260]	; (1599c <prvTraceInitTraceData+0x18c>)
   15896:	4a42      	ldr	r2, [pc, #264]	; (159a0 <prvTraceInitTraceData+0x190>)
   15898:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->endmarker0 = 0x0A;
   1589a:	210a      	movs	r1, #10
   1589c:	4a41      	ldr	r2, [pc, #260]	; (159a4 <prvTraceInitTraceData+0x194>)
   1589e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker1 = 0x0B;
   158a0:	3101      	adds	r1, #1
   158a2:	4a41      	ldr	r2, [pc, #260]	; (159a8 <prvTraceInitTraceData+0x198>)
   158a4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker2 = 0x0C;
   158a6:	3101      	adds	r1, #1
   158a8:	4a40      	ldr	r2, [pc, #256]	; (159ac <prvTraceInitTraceData+0x19c>)
   158aa:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker3 = 0x0D;
   158ac:	3101      	adds	r1, #1
   158ae:	4a40      	ldr	r2, [pc, #256]	; (159b0 <prvTraceInitTraceData+0x1a0>)
   158b0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker4 = 0x71;
   158b2:	4a40      	ldr	r2, [pc, #256]	; (159b4 <prvTraceInitTraceData+0x1a4>)
   158b4:	3164      	adds	r1, #100	; 0x64
   158b6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker5 = 0x72;
   158b8:	2572      	movs	r5, #114	; 0x72
   158ba:	4a3f      	ldr	r2, [pc, #252]	; (159b8 <prvTraceInitTraceData+0x1a8>)
   158bc:	549d      	strb	r5, [r3, r2]
	RecorderDataPtr->endmarker6 = 0x73;
   158be:	2673      	movs	r6, #115	; 0x73
   158c0:	4a3e      	ldr	r2, [pc, #248]	; (159bc <prvTraceInitTraceData+0x1ac>)
   158c2:	549e      	strb	r6, [r3, r2]
	RecorderDataPtr->endmarker7 = 0x74;
   158c4:	2774      	movs	r7, #116	; 0x74
   158c6:	4a3e      	ldr	r2, [pc, #248]	; (159c0 <prvTraceInitTraceData+0x1b0>)
   158c8:	549f      	strb	r7, [r3, r2]
	RecorderDataPtr->endmarker8 = 0xF1;
   158ca:	22f1      	movs	r2, #241	; 0xf1
   158cc:	4690      	mov	r8, r2
   158ce:	4a3d      	ldr	r2, [pc, #244]	; (159c4 <prvTraceInitTraceData+0x1b4>)
   158d0:	4641      	mov	r1, r8
   158d2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker9 = 0xF2;
   158d4:	22f2      	movs	r2, #242	; 0xf2
   158d6:	4691      	mov	r9, r2
   158d8:	4a3b      	ldr	r2, [pc, #236]	; (159c8 <prvTraceInitTraceData+0x1b8>)
   158da:	4649      	mov	r1, r9
   158dc:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker10 = 0xF3;
   158de:	22f3      	movs	r2, #243	; 0xf3
   158e0:	4692      	mov	sl, r2
   158e2:	4a3a      	ldr	r2, [pc, #232]	; (159cc <prvTraceInitTraceData+0x1bc>)
   158e4:	4651      	mov	r1, sl
   158e6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker11 = 0xF4;
   158e8:	22f4      	movs	r2, #244	; 0xf4
   158ea:	4693      	mov	fp, r2
   158ec:	4a38      	ldr	r2, [pc, #224]	; (159d0 <prvTraceInitTraceData+0x1c0>)
   158ee:	4659      	mov	r1, fp
   158f0:	5499      	strb	r1, [r3, r2]
	vTraceInitObjectHandleStack();
   158f2:	4b38      	ldr	r3, [pc, #224]	; (159d4 <prvTraceInitTraceData+0x1c4>)
   158f4:	4798      	blx	r3
	RecorderDataPtr->startmarker11 = 0xF4;
   158f6:	6823      	ldr	r3, [r4, #0]
   158f8:	465a      	mov	r2, fp
   158fa:	72da      	strb	r2, [r3, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
   158fc:	4652      	mov	r2, sl
   158fe:	729a      	strb	r2, [r3, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
   15900:	464a      	mov	r2, r9
   15902:	725a      	strb	r2, [r3, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
   15904:	4642      	mov	r2, r8
   15906:	721a      	strb	r2, [r3, #8]
	RecorderDataPtr->startmarker7 = 0x74;
   15908:	71df      	strb	r7, [r3, #7]
	RecorderDataPtr->startmarker6 = 0x73;
   1590a:	719e      	strb	r6, [r3, #6]
	RecorderDataPtr->startmarker5 = 0x72;
   1590c:	715d      	strb	r5, [r3, #5]
	RecorderDataPtr->startmarker4 = 0x71;
   1590e:	2271      	movs	r2, #113	; 0x71
   15910:	711a      	strb	r2, [r3, #4]
	RecorderDataPtr->startmarker3 = 0x04;
   15912:	2204      	movs	r2, #4
   15914:	70da      	strb	r2, [r3, #3]
	RecorderDataPtr->startmarker2 = 0x03;
   15916:	2303      	movs	r3, #3
   15918:	6822      	ldr	r2, [r4, #0]
   1591a:	7093      	strb	r3, [r2, #2]
	RecorderDataPtr->startmarker1 = 0x02;	
   1591c:	3b01      	subs	r3, #1
   1591e:	6822      	ldr	r2, [r4, #0]
   15920:	7053      	strb	r3, [r2, #1]
	RecorderDataPtr->startmarker0 = 0x01; 
   15922:	6823      	ldr	r3, [r4, #0]
   15924:	2201      	movs	r2, #1
   15926:	701a      	strb	r2, [r3, #0]
	if (traceErrorMessage != NULL)
   15928:	4b2b      	ldr	r3, [pc, #172]	; (159d8 <prvTraceInitTraceData+0x1c8>)
   1592a:	6819      	ldr	r1, [r3, #0]
   1592c:	2900      	cmp	r1, #0
   1592e:	d00e      	beq.n	1594e <prvTraceInitTraceData+0x13e>
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   15930:	4c0c      	ldr	r4, [pc, #48]	; (15964 <prvTraceInitTraceData+0x154>)
   15932:	6823      	ldr	r3, [r4, #0]
   15934:	4a16      	ldr	r2, [pc, #88]	; (15990 <prvTraceInitTraceData+0x180>)
   15936:	4694      	mov	ip, r2
   15938:	4463      	add	r3, ip
   1593a:	0018      	movs	r0, r3
   1593c:	2250      	movs	r2, #80	; 0x50
   1593e:	4b16      	ldr	r3, [pc, #88]	; (15998 <prvTraceInitTraceData+0x188>)
   15940:	4798      	blx	r3
		RecorderDataPtr->internalErrorOccured = 1;
   15942:	6822      	ldr	r2, [r4, #0]
   15944:	2101      	movs	r1, #1
   15946:	4b25      	ldr	r3, [pc, #148]	; (159dc <prvTraceInitTraceData+0x1cc>)
   15948:	50d1      	str	r1, [r2, r3]
		vTraceStop();
   1594a:	4b25      	ldr	r3, [pc, #148]	; (159e0 <prvTraceInitTraceData+0x1d0>)
   1594c:	4798      	blx	r3
}
   1594e:	bc3c      	pop	{r2, r3, r4, r5}
   15950:	4690      	mov	r8, r2
   15952:	4699      	mov	r9, r3
   15954:	46a2      	mov	sl, r4
   15956:	46ab      	mov	fp, r5
   15958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	RecorderDataPtr = &RecorderData;
   1595a:	4a22      	ldr	r2, [pc, #136]	; (159e4 <prvTraceInitTraceData+0x1d4>)
   1595c:	4b01      	ldr	r3, [pc, #4]	; (15964 <prvTraceInitTraceData+0x154>)
   1595e:	601a      	str	r2, [r3, #0]
   15960:	e765      	b.n	1582e <prvTraceInitTraceData+0x1e>
   15962:	46c0      	nop			; (mov r8, r8)
   15964:	20000b2c 	.word	0x20000b2c
   15968:	e000e018 	.word	0xe000e018
   1596c:	20004fcc 	.word	0x20004fcc
   15970:	00025d0f 	.word	0x00025d0f
   15974:	00001aa1 	.word	0x00001aa1
   15978:	f0f0f0f0 	.word	0xf0f0f0f0
   1597c:	00015619 	.word	0x00015619
   15980:	f1f1f1f1 	.word	0xf1f1f1f1
   15984:	0000055c 	.word	0x0000055c
   15988:	00000564 	.word	0x00000564
   1598c:	f2f2f2f2 	.word	0xf2f2f2f2
   15990:	000006bc 	.word	0x000006bc
   15994:	00029908 	.word	0x00029908
   15998:	000157b5 	.word	0x000157b5
   1599c:	f3f3f3f3 	.word	0xf3f3f3f3
   159a0:	0000070c 	.word	0x0000070c
   159a4:	00000bc4 	.word	0x00000bc4
   159a8:	00000bc5 	.word	0x00000bc5
   159ac:	00000bc6 	.word	0x00000bc6
   159b0:	00000bc7 	.word	0x00000bc7
   159b4:	00000bc8 	.word	0x00000bc8
   159b8:	00000bc9 	.word	0x00000bc9
   159bc:	00000bca 	.word	0x00000bca
   159c0:	00000bcb 	.word	0x00000bcb
   159c4:	00000bcc 	.word	0x00000bcc
   159c8:	00000bcd 	.word	0x00000bcd
   159cc:	00000bce 	.word	0x00000bce
   159d0:	00000bcf 	.word	0x00000bcf
   159d4:	000156f1 	.word	0x000156f1
   159d8:	20000be4 	.word	0x20000be4
   159dc:	000006b4 	.word	0x000006b4
   159e0:	000157d9 	.word	0x000157d9
   159e4:	200043fc 	.word	0x200043fc

000159e8 <prvTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
   159e8:	b510      	push	{r4, lr}
   159ea:	0004      	movs	r4, r0
	/* Stop the recorder */
	if (RecorderDataPtr != NULL)
   159ec:	4b0e      	ldr	r3, [pc, #56]	; (15a28 <prvTraceError+0x40>)
   159ee:	681b      	ldr	r3, [r3, #0]
   159f0:	2b00      	cmp	r3, #0
   159f2:	d001      	beq.n	159f8 <prvTraceError+0x10>
	{
		vTraceStop();
   159f4:	4b0d      	ldr	r3, [pc, #52]	; (15a2c <prvTraceError+0x44>)
   159f6:	4798      	blx	r3
	}

	/* If first error only... */
	if (traceErrorMessage == NULL)
   159f8:	4b0d      	ldr	r3, [pc, #52]	; (15a30 <prvTraceError+0x48>)
   159fa:	681b      	ldr	r3, [r3, #0]
   159fc:	2b00      	cmp	r3, #0
   159fe:	d000      	beq.n	15a02 <prvTraceError+0x1a>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
			RecorderDataPtr->internalErrorOccured = 1;
		}
	}
}
   15a00:	bd10      	pop	{r4, pc}
		traceErrorMessage = (char*)(intptr_t) msg;
   15a02:	4b0b      	ldr	r3, [pc, #44]	; (15a30 <prvTraceError+0x48>)
   15a04:	601c      	str	r4, [r3, #0]
		if (RecorderDataPtr != NULL)
   15a06:	4b08      	ldr	r3, [pc, #32]	; (15a28 <prvTraceError+0x40>)
   15a08:	6818      	ldr	r0, [r3, #0]
   15a0a:	2800      	cmp	r0, #0
   15a0c:	d0f8      	beq.n	15a00 <prvTraceError+0x18>
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   15a0e:	4b09      	ldr	r3, [pc, #36]	; (15a34 <prvTraceError+0x4c>)
   15a10:	469c      	mov	ip, r3
   15a12:	4460      	add	r0, ip
   15a14:	2250      	movs	r2, #80	; 0x50
   15a16:	0021      	movs	r1, r4
   15a18:	4b07      	ldr	r3, [pc, #28]	; (15a38 <prvTraceError+0x50>)
   15a1a:	4798      	blx	r3
			RecorderDataPtr->internalErrorOccured = 1;
   15a1c:	4b02      	ldr	r3, [pc, #8]	; (15a28 <prvTraceError+0x40>)
   15a1e:	681a      	ldr	r2, [r3, #0]
   15a20:	2101      	movs	r1, #1
   15a22:	4b06      	ldr	r3, [pc, #24]	; (15a3c <prvTraceError+0x54>)
   15a24:	50d1      	str	r1, [r2, r3]
}
   15a26:	e7eb      	b.n	15a00 <prvTraceError+0x18>
   15a28:	20000b2c 	.word	0x20000b2c
   15a2c:	000157d9 	.word	0x000157d9
   15a30:	20000be4 	.word	0x20000be4
   15a34:	000006bc 	.word	0x000006bc
   15a38:	000157b5 	.word	0x000157b5
   15a3c:	000006b4 	.word	0x000006b4

00015a40 <prvTraceNextFreeEventBufferSlot>:
{
   15a40:	b510      	push	{r4, lr}
	if (! RecorderDataPtr->recorderActive)
   15a42:	4b0c      	ldr	r3, [pc, #48]	; (15a74 <prvTraceNextFreeEventBufferSlot+0x34>)
   15a44:	6818      	ldr	r0, [r3, #0]
   15a46:	6b03      	ldr	r3, [r0, #48]	; 0x30
   15a48:	2b00      	cmp	r3, #0
   15a4a:	d010      	beq.n	15a6e <prvTraceNextFreeEventBufferSlot+0x2e>
	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   15a4c:	69c3      	ldr	r3, [r0, #28]
   15a4e:	222c      	movs	r2, #44	; 0x2c
   15a50:	32ff      	adds	r2, #255	; 0xff
   15a52:	4293      	cmp	r3, r2
   15a54:	d806      	bhi.n	15a64 <prvTraceNextFreeEventBufferSlot+0x24>
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
   15a56:	009b      	lsls	r3, r3, #2
   15a58:	22e2      	movs	r2, #226	; 0xe2
   15a5a:	00d2      	lsls	r2, r2, #3
   15a5c:	4694      	mov	ip, r2
   15a5e:	4463      	add	r3, ip
   15a60:	18c0      	adds	r0, r0, r3
}
   15a62:	bd10      	pop	{r4, pc}
		prvTraceError("Attempt to index outside event buffer!");
   15a64:	4804      	ldr	r0, [pc, #16]	; (15a78 <prvTraceNextFreeEventBufferSlot+0x38>)
   15a66:	4b05      	ldr	r3, [pc, #20]	; (15a7c <prvTraceNextFreeEventBufferSlot+0x3c>)
   15a68:	4798      	blx	r3
		return NULL;
   15a6a:	2000      	movs	r0, #0
   15a6c:	e7f9      	b.n	15a62 <prvTraceNextFreeEventBufferSlot+0x22>
		return NULL;
   15a6e:	2000      	movs	r0, #0
   15a70:	e7f7      	b.n	15a62 <prvTraceNextFreeEventBufferSlot+0x22>
   15a72:	46c0      	nop			; (mov r8, r8)
   15a74:	20000b2c 	.word	0x20000b2c
   15a78:	0002991c 	.word	0x0002991c
   15a7c:	000159e9 	.word	0x000159e9

00015a80 <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
   15a80:	b5f0      	push	{r4, r5, r6, r7, lr}
   15a82:	46c6      	mov	lr, r8
   15a84:	b500      	push	{lr}
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
	unsigned int e = 0;

	TRACE_ASSERT(nofEntriesToCheck != 0, 
   15a86:	2800      	cmp	r0, #0
   15a88:	d006      	beq.n	15a98 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x18>
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
   15a8a:	0007      	movs	r7, r0
   15a8c:	2500      	movs	r5, #0
   15a8e:	2800      	cmp	r0, #0
   15a90:	d005      	beq.n	15a9e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x1e>
	{
		e = RecorderDataPtr->nextFreeIndex + i;
   15a92:	4b25      	ldr	r3, [pc, #148]	; (15b28 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xa8>)
   15a94:	4698      	mov	r8, r3
   15a96:	e00a      	b.n	15aae <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x2e>
	TRACE_ASSERT(nofEntriesToCheck != 0, 
   15a98:	4824      	ldr	r0, [pc, #144]	; (15b2c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xac>)
   15a9a:	4b25      	ldr	r3, [pc, #148]	; (15b30 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb0>)
   15a9c:	4798      	blx	r3
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
			}
		}
		i++;
	}
}
   15a9e:	bc04      	pop	{r2}
   15aa0:	4690      	mov	r8, r2
   15aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
   15aa4:	2a01      	cmp	r2, #1
   15aa6:	d021      	beq.n	15aec <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x6c>
		i++;
   15aa8:	3501      	adds	r5, #1
	while (i < nofEntriesToCheck)
   15aaa:	42bd      	cmp	r5, r7
   15aac:	d2f7      	bcs.n	15a9e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x1e>
		e = RecorderDataPtr->nextFreeIndex + i;
   15aae:	4643      	mov	r3, r8
   15ab0:	681c      	ldr	r4, [r3, #0]
   15ab2:	69e3      	ldr	r3, [r4, #28]
   15ab4:	18eb      	adds	r3, r5, r3
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
   15ab6:	009e      	lsls	r6, r3, #2
   15ab8:	19a2      	adds	r2, r4, r6
   15aba:	21e2      	movs	r1, #226	; 0xe2
   15abc:	00c9      	lsls	r1, r1, #3
   15abe:	468c      	mov	ip, r1
   15ac0:	4462      	add	r2, ip
   15ac2:	7812      	ldrb	r2, [r2, #0]
   15ac4:	0011      	movs	r1, r2
   15ac6:	3167      	adds	r1, #103	; 0x67
   15ac8:	b2c9      	uxtb	r1, r1
   15aca:	290e      	cmp	r1, #14
   15acc:	d8ea      	bhi.n	15aa4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x24>
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
   15ace:	3268      	adds	r2, #104	; 0x68
   15ad0:	b2d2      	uxtb	r2, r2
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
   15ad2:	18d3      	adds	r3, r2, r3
   15ad4:	69a1      	ldr	r1, [r4, #24]
   15ad6:	428b      	cmp	r3, r1
   15ad8:	d2e6      	bcs.n	15aa8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
   15ada:	3201      	adds	r2, #1
   15adc:	0092      	lsls	r2, r2, #2
   15ade:	4663      	mov	r3, ip
   15ae0:	18f0      	adds	r0, r6, r3
   15ae2:	1820      	adds	r0, r4, r0
   15ae4:	2100      	movs	r1, #0
   15ae6:	4b13      	ldr	r3, [pc, #76]	; (15b34 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>)
   15ae8:	4798      	blx	r3
   15aea:	e7dd      	b.n	15aa8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
			if ((e + 1) < RecorderDataPtr->maxEvents)
   15aec:	3301      	adds	r3, #1
   15aee:	69a2      	ldr	r2, [r4, #24]
   15af0:	4293      	cmp	r3, r2
   15af2:	d208      	bcs.n	15b06 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x86>
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
   15af4:	23e2      	movs	r3, #226	; 0xe2
   15af6:	00db      	lsls	r3, r3, #3
   15af8:	18f0      	adds	r0, r6, r3
   15afa:	1820      	adds	r0, r4, r0
   15afc:	2208      	movs	r2, #8
   15afe:	2100      	movs	r1, #0
   15b00:	4b0c      	ldr	r3, [pc, #48]	; (15b34 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>)
   15b02:	4798      	blx	r3
   15b04:	e7d0      	b.n	15aa8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
   15b06:	23e2      	movs	r3, #226	; 0xe2
   15b08:	00db      	lsls	r3, r3, #3
   15b0a:	18e0      	adds	r0, r4, r3
   15b0c:	2204      	movs	r2, #4
   15b0e:	2100      	movs	r1, #0
   15b10:	4b08      	ldr	r3, [pc, #32]	; (15b34 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>)
   15b12:	4798      	blx	r3
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
   15b14:	23e2      	movs	r3, #226	; 0xe2
   15b16:	00db      	lsls	r3, r3, #3
   15b18:	18f0      	adds	r0, r6, r3
   15b1a:	1820      	adds	r0, r4, r0
   15b1c:	2204      	movs	r2, #4
   15b1e:	2100      	movs	r1, #0
   15b20:	4b04      	ldr	r3, [pc, #16]	; (15b34 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>)
   15b22:	4798      	blx	r3
   15b24:	e7c0      	b.n	15aa8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
   15b26:	46c0      	nop			; (mov r8, r8)
   15b28:	20000b2c 	.word	0x20000b2c
   15b2c:	0002973c 	.word	0x0002973c
   15b30:	000159e9 	.word	0x000159e9
   15b34:	00025d0f 	.word	0x00025d0f

00015b38 <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
   15b38:	b510      	push	{r4, lr}
	if (RecorderDataPtr->recorderActive == 0)
   15b3a:	4b0b      	ldr	r3, [pc, #44]	; (15b68 <prvTraceUpdateCounters+0x30>)
   15b3c:	681b      	ldr	r3, [r3, #0]
   15b3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   15b40:	2a00      	cmp	r2, #0
   15b42:	d010      	beq.n	15b66 <prvTraceUpdateCounters+0x2e>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
   15b44:	695a      	ldr	r2, [r3, #20]
   15b46:	3201      	adds	r2, #1
   15b48:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
   15b4a:	69da      	ldr	r2, [r3, #28]
   15b4c:	3201      	adds	r2, #1
   15b4e:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   15b50:	212c      	movs	r1, #44	; 0x2c
   15b52:	31ff      	adds	r1, #255	; 0xff
   15b54:	428a      	cmp	r2, r1
   15b56:	d903      	bls.n	15b60 <prvTraceUpdateCounters+0x28>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
   15b58:	2201      	movs	r2, #1
   15b5a:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
   15b5c:	2200      	movs	r2, #0
   15b5e:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
   15b60:	2001      	movs	r0, #1
   15b62:	4b02      	ldr	r3, [pc, #8]	; (15b6c <prvTraceUpdateCounters+0x34>)
   15b64:	4798      	blx	r3
#endif
}
   15b66:	bd10      	pop	{r4, pc}
   15b68:	20000b2c 	.word	0x20000b2c
   15b6c:	00015a81 	.word	0x00015a81

00015b70 <prvTraceGetParam>:
{
   15b70:	b570      	push	{r4, r5, r6, lr}
   15b72:	0004      	movs	r4, r0
   15b74:	000d      	movs	r5, r1
	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
   15b76:	28ff      	cmp	r0, #255	; 0xff
   15b78:	d002      	beq.n	15b80 <prvTraceGetParam+0x10>
   15b7a:	4b0d      	ldr	r3, [pc, #52]	; (15bb0 <prvTraceGetParam+0x40>)
   15b7c:	4298      	cmp	r0, r3
   15b7e:	d103      	bne.n	15b88 <prvTraceGetParam+0x18>
	if (param <= param_max)
   15b80:	42ac      	cmp	r4, r5
   15b82:	d305      	bcc.n	15b90 <prvTraceGetParam+0x20>
}
   15b84:	0028      	movs	r0, r5
   15b86:	bd70      	pop	{r4, r5, r6, pc}
	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
   15b88:	480a      	ldr	r0, [pc, #40]	; (15bb4 <prvTraceGetParam+0x44>)
   15b8a:	4b0b      	ldr	r3, [pc, #44]	; (15bb8 <prvTraceGetParam+0x48>)
   15b8c:	4798      	blx	r3
   15b8e:	e7f9      	b.n	15b84 <prvTraceGetParam+0x14>
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
   15b90:	4b0a      	ldr	r3, [pc, #40]	; (15bbc <prvTraceGetParam+0x4c>)
   15b92:	4798      	blx	r3
		if (xps != NULL)
   15b94:	2800      	cmp	r0, #0
   15b96:	d009      	beq.n	15bac <prvTraceGetParam+0x3c>
			xps->type = DIV_XPS;
   15b98:	2301      	movs	r3, #1
   15b9a:	7003      	strb	r3, [r0, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
   15b9c:	002b      	movs	r3, r5
   15b9e:	43a3      	bics	r3, r4
   15ba0:	0a1a      	lsrs	r2, r3, #8
   15ba2:	7042      	strb	r2, [r0, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
   15ba4:	0c1b      	lsrs	r3, r3, #16
   15ba6:	8043      	strh	r3, [r0, #2]
			prvTraceUpdateCounters();
   15ba8:	4b05      	ldr	r3, [pc, #20]	; (15bc0 <prvTraceGetParam+0x50>)
   15baa:	4798      	blx	r3
		return param & param_max;
   15bac:	4025      	ands	r5, r4
   15bae:	e7e9      	b.n	15b84 <prvTraceGetParam+0x14>
   15bb0:	0000ffff 	.word	0x0000ffff
   15bb4:	00029840 	.word	0x00029840
   15bb8:	000159e9 	.word	0x000159e9
   15bbc:	00015a41 	.word	0x00015a41
   15bc0:	00015b39 	.word	0x00015b39

00015bc4 <uiIndexOfObject>:
{
   15bc4:	b510      	push	{r4, lr}
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   15bc6:	2908      	cmp	r1, #8
   15bc8:	d814      	bhi.n	15bf4 <uiIndexOfObject+0x30>
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
   15bca:	2800      	cmp	r0, #0
   15bcc:	d017      	beq.n	15bfe <uiIndexOfObject+0x3a>
   15bce:	4b0e      	ldr	r3, [pc, #56]	; (15c08 <uiIndexOfObject+0x44>)
   15bd0:	681a      	ldr	r2, [r3, #0]
   15bd2:	1853      	adds	r3, r2, r1
   15bd4:	3364      	adds	r3, #100	; 0x64
   15bd6:	781b      	ldrb	r3, [r3, #0]
   15bd8:	4283      	cmp	r3, r0
   15bda:	d310      	bcc.n	15bfe <uiIndexOfObject+0x3a>
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   15bdc:	1853      	adds	r3, r2, r1
   15bde:	337c      	adds	r3, #124	; 0x7c
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   15be0:	781b      	ldrb	r3, [r3, #0]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   15be2:	3801      	subs	r0, #1
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   15be4:	4358      	muls	r0, r3
   15be6:	3140      	adds	r1, #64	; 0x40
   15be8:	0049      	lsls	r1, r1, #1
   15bea:	1851      	adds	r1, r2, r1
   15bec:	890b      	ldrh	r3, [r1, #8]
   15bee:	18c0      	adds	r0, r0, r3
   15bf0:	b280      	uxth	r0, r0
   15bf2:	e008      	b.n	15c06 <uiIndexOfObject+0x42>
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   15bf4:	4805      	ldr	r0, [pc, #20]	; (15c0c <uiIndexOfObject+0x48>)
   15bf6:	4b06      	ldr	r3, [pc, #24]	; (15c10 <uiIndexOfObject+0x4c>)
   15bf8:	4798      	blx	r3
   15bfa:	2000      	movs	r0, #0
   15bfc:	e003      	b.n	15c06 <uiIndexOfObject+0x42>
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
   15bfe:	4805      	ldr	r0, [pc, #20]	; (15c14 <uiIndexOfObject+0x50>)
   15c00:	4b03      	ldr	r3, [pc, #12]	; (15c10 <uiIndexOfObject+0x4c>)
   15c02:	4798      	blx	r3
   15c04:	2000      	movs	r0, #0
}
   15c06:	bd10      	pop	{r4, pc}
   15c08:	20000b2c 	.word	0x20000b2c
   15c0c:	00029ed0 	.word	0x00029ed0
   15c10:	000159e9 	.word	0x000159e9
   15c14:	00029f10 	.word	0x00029f10

00015c18 <prvMarkObjectAsUsed>:
{
   15c18:	b510      	push	{r4, lr}
   15c1a:	000b      	movs	r3, r1
	uint16_t idx = uiIndexOfObject(handle, objectclass);
   15c1c:	0001      	movs	r1, r0
   15c1e:	0018      	movs	r0, r3
   15c20:	4b04      	ldr	r3, [pc, #16]	; (15c34 <prvMarkObjectAsUsed+0x1c>)
   15c22:	4798      	blx	r3
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
   15c24:	4b04      	ldr	r3, [pc, #16]	; (15c38 <prvMarkObjectAsUsed+0x20>)
   15c26:	681b      	ldr	r3, [r3, #0]
   15c28:	1818      	adds	r0, r3, r0
   15c2a:	309c      	adds	r0, #156	; 0x9c
   15c2c:	2301      	movs	r3, #1
   15c2e:	7003      	strb	r3, [r0, #0]
}
   15c30:	bd10      	pop	{r4, pc}
   15c32:	46c0      	nop			; (mov r8, r8)
   15c34:	00015bc5 	.word	0x00015bc5
   15c38:	20000b2c 	.word	0x20000b2c

00015c3c <prvTraceSetPriorityProperty>:
{
   15c3c:	b570      	push	{r4, r5, r6, lr}
   15c3e:	0004      	movs	r4, r0
   15c40:	0008      	movs	r0, r1
   15c42:	0015      	movs	r5, r2
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   15c44:	2c08      	cmp	r4, #8
   15c46:	d813      	bhi.n	15c70 <prvTraceSetPriorityProperty+0x34>
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   15c48:	4b0d      	ldr	r3, [pc, #52]	; (15c80 <prvTraceSetPriorityProperty+0x44>)
   15c4a:	681b      	ldr	r3, [r3, #0]
   15c4c:	191b      	adds	r3, r3, r4
   15c4e:	3364      	adds	r3, #100	; 0x64
   15c50:	781b      	ldrb	r3, [r3, #0]
   15c52:	428b      	cmp	r3, r1
   15c54:	d310      	bcc.n	15c78 <prvTraceSetPriorityProperty+0x3c>
	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
   15c56:	0021      	movs	r1, r4
   15c58:	4b0a      	ldr	r3, [pc, #40]	; (15c84 <prvTraceSetPriorityProperty+0x48>)
   15c5a:	4798      	blx	r3
   15c5c:	4b08      	ldr	r3, [pc, #32]	; (15c80 <prvTraceSetPriorityProperty+0x44>)
   15c5e:	681b      	ldr	r3, [r3, #0]
   15c60:	191c      	adds	r4, r3, r4
   15c62:	3470      	adds	r4, #112	; 0x70
   15c64:	7822      	ldrb	r2, [r4, #0]
   15c66:	181b      	adds	r3, r3, r0
   15c68:	189b      	adds	r3, r3, r2
   15c6a:	339d      	adds	r3, #157	; 0x9d
   15c6c:	701d      	strb	r5, [r3, #0]
}
   15c6e:	bd70      	pop	{r4, r5, r6, pc}
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   15c70:	4805      	ldr	r0, [pc, #20]	; (15c88 <prvTraceSetPriorityProperty+0x4c>)
   15c72:	4b06      	ldr	r3, [pc, #24]	; (15c8c <prvTraceSetPriorityProperty+0x50>)
   15c74:	4798      	blx	r3
   15c76:	e7fa      	b.n	15c6e <prvTraceSetPriorityProperty+0x32>
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   15c78:	4805      	ldr	r0, [pc, #20]	; (15c90 <prvTraceSetPriorityProperty+0x54>)
   15c7a:	4b04      	ldr	r3, [pc, #16]	; (15c8c <prvTraceSetPriorityProperty+0x50>)
   15c7c:	4798      	blx	r3
   15c7e:	e7f6      	b.n	15c6e <prvTraceSetPriorityProperty+0x32>
   15c80:	20000b2c 	.word	0x20000b2c
   15c84:	00015bc5 	.word	0x00015bc5
   15c88:	00029a58 	.word	0x00029a58
   15c8c:	000159e9 	.word	0x000159e9
   15c90:	00029aa4 	.word	0x00029aa4

00015c94 <prvTraceGetPriorityProperty>:
{
   15c94:	b510      	push	{r4, lr}
   15c96:	0004      	movs	r4, r0
   15c98:	0008      	movs	r0, r1
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   15c9a:	2c08      	cmp	r4, #8
   15c9c:	d813      	bhi.n	15cc6 <prvTraceGetPriorityProperty+0x32>
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   15c9e:	4b0f      	ldr	r3, [pc, #60]	; (15cdc <prvTraceGetPriorityProperty+0x48>)
   15ca0:	681b      	ldr	r3, [r3, #0]
   15ca2:	191b      	adds	r3, r3, r4
   15ca4:	3364      	adds	r3, #100	; 0x64
   15ca6:	781b      	ldrb	r3, [r3, #0]
   15ca8:	428b      	cmp	r3, r1
   15caa:	d311      	bcc.n	15cd0 <prvTraceGetPriorityProperty+0x3c>
	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
   15cac:	0021      	movs	r1, r4
   15cae:	4b0c      	ldr	r3, [pc, #48]	; (15ce0 <prvTraceGetPriorityProperty+0x4c>)
   15cb0:	4798      	blx	r3
   15cb2:	4b0a      	ldr	r3, [pc, #40]	; (15cdc <prvTraceGetPriorityProperty+0x48>)
   15cb4:	681b      	ldr	r3, [r3, #0]
   15cb6:	191c      	adds	r4, r3, r4
   15cb8:	3470      	adds	r4, #112	; 0x70
   15cba:	7822      	ldrb	r2, [r4, #0]
   15cbc:	181b      	adds	r3, r3, r0
   15cbe:	189b      	adds	r3, r3, r2
   15cc0:	339d      	adds	r3, #157	; 0x9d
   15cc2:	7818      	ldrb	r0, [r3, #0]
}
   15cc4:	bd10      	pop	{r4, pc}
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   15cc6:	4807      	ldr	r0, [pc, #28]	; (15ce4 <prvTraceGetPriorityProperty+0x50>)
   15cc8:	4b07      	ldr	r3, [pc, #28]	; (15ce8 <prvTraceGetPriorityProperty+0x54>)
   15cca:	4798      	blx	r3
   15ccc:	2000      	movs	r0, #0
   15cce:	e7f9      	b.n	15cc4 <prvTraceGetPriorityProperty+0x30>
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   15cd0:	4806      	ldr	r0, [pc, #24]	; (15cec <prvTraceGetPriorityProperty+0x58>)
   15cd2:	4b05      	ldr	r3, [pc, #20]	; (15ce8 <prvTraceGetPriorityProperty+0x54>)
   15cd4:	4798      	blx	r3
   15cd6:	2000      	movs	r0, #0
   15cd8:	e7f4      	b.n	15cc4 <prvTraceGetPriorityProperty+0x30>
   15cda:	46c0      	nop			; (mov r8, r8)
   15cdc:	20000b2c 	.word	0x20000b2c
   15ce0:	00015bc5 	.word	0x00015bc5
   15ce4:	0002987c 	.word	0x0002987c
   15ce8:	000159e9 	.word	0x000159e9
   15cec:	000298c8 	.word	0x000298c8

00015cf0 <prvTraceSetObjectState>:
{
   15cf0:	b570      	push	{r4, r5, r6, lr}
   15cf2:	0004      	movs	r4, r0
   15cf4:	0008      	movs	r0, r1
   15cf6:	0015      	movs	r5, r2
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   15cf8:	2c08      	cmp	r4, #8
   15cfa:	d813      	bhi.n	15d24 <prvTraceSetObjectState+0x34>
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   15cfc:	4b0d      	ldr	r3, [pc, #52]	; (15d34 <prvTraceSetObjectState+0x44>)
   15cfe:	681b      	ldr	r3, [r3, #0]
   15d00:	191b      	adds	r3, r3, r4
   15d02:	3364      	adds	r3, #100	; 0x64
   15d04:	781b      	ldrb	r3, [r3, #0]
   15d06:	428b      	cmp	r3, r1
   15d08:	d310      	bcc.n	15d2c <prvTraceSetObjectState+0x3c>
	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
   15d0a:	0021      	movs	r1, r4
   15d0c:	4b0a      	ldr	r3, [pc, #40]	; (15d38 <prvTraceSetObjectState+0x48>)
   15d0e:	4798      	blx	r3
   15d10:	4b08      	ldr	r3, [pc, #32]	; (15d34 <prvTraceSetObjectState+0x44>)
   15d12:	681b      	ldr	r3, [r3, #0]
   15d14:	191c      	adds	r4, r3, r4
   15d16:	3470      	adds	r4, #112	; 0x70
   15d18:	7822      	ldrb	r2, [r4, #0]
   15d1a:	181b      	adds	r3, r3, r0
   15d1c:	189b      	adds	r3, r3, r2
   15d1e:	339c      	adds	r3, #156	; 0x9c
   15d20:	701d      	strb	r5, [r3, #0]
}
   15d22:	bd70      	pop	{r4, r5, r6, pc}
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   15d24:	4805      	ldr	r0, [pc, #20]	; (15d3c <prvTraceSetObjectState+0x4c>)
   15d26:	4b06      	ldr	r3, [pc, #24]	; (15d40 <prvTraceSetObjectState+0x50>)
   15d28:	4798      	blx	r3
   15d2a:	e7fa      	b.n	15d22 <prvTraceSetObjectState+0x32>
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   15d2c:	4805      	ldr	r0, [pc, #20]	; (15d44 <prvTraceSetObjectState+0x54>)
   15d2e:	4b04      	ldr	r3, [pc, #16]	; (15d40 <prvTraceSetObjectState+0x50>)
   15d30:	4798      	blx	r3
   15d32:	e7f6      	b.n	15d22 <prvTraceSetObjectState+0x32>
   15d34:	20000b2c 	.word	0x20000b2c
   15d38:	00015bc5 	.word	0x00015bc5
   15d3c:	000299d8 	.word	0x000299d8
   15d40:	000159e9 	.word	0x000159e9
   15d44:	00029a1c 	.word	0x00029a1c

00015d48 <prvTraceSetTaskInstanceFinished>:
{
   15d48:	b510      	push	{r4, lr}
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
   15d4a:	4b0b      	ldr	r3, [pc, #44]	; (15d78 <prvTraceSetTaskInstanceFinished+0x30>)
   15d4c:	681a      	ldr	r2, [r3, #0]
   15d4e:	2367      	movs	r3, #103	; 0x67
   15d50:	5cd3      	ldrb	r3, [r2, r3]
   15d52:	4283      	cmp	r3, r0
   15d54:	d30c      	bcc.n	15d70 <prvTraceSetTaskInstanceFinished+0x28>
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
   15d56:	2103      	movs	r1, #3
   15d58:	4b08      	ldr	r3, [pc, #32]	; (15d7c <prvTraceSetTaskInstanceFinished+0x34>)
   15d5a:	4798      	blx	r3
   15d5c:	4b06      	ldr	r3, [pc, #24]	; (15d78 <prvTraceSetTaskInstanceFinished+0x30>)
   15d5e:	681b      	ldr	r3, [r3, #0]
   15d60:	2273      	movs	r2, #115	; 0x73
   15d62:	5c9a      	ldrb	r2, [r3, r2]
   15d64:	181b      	adds	r3, r3, r0
   15d66:	189b      	adds	r3, r3, r2
   15d68:	339c      	adds	r3, #156	; 0x9c
   15d6a:	2200      	movs	r2, #0
   15d6c:	701a      	strb	r2, [r3, #0]
}
   15d6e:	bd10      	pop	{r4, pc}
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
   15d70:	4803      	ldr	r0, [pc, #12]	; (15d80 <prvTraceSetTaskInstanceFinished+0x38>)
   15d72:	4b04      	ldr	r3, [pc, #16]	; (15d84 <prvTraceSetTaskInstanceFinished+0x3c>)
   15d74:	4798      	blx	r3
   15d76:	e7fa      	b.n	15d6e <prvTraceSetTaskInstanceFinished+0x26>
   15d78:	20000b2c 	.word	0x20000b2c
   15d7c:	00015bc5 	.word	0x00015bc5
   15d80:	00029ae4 	.word	0x00029ae4
   15d84:	000159e9 	.word	0x000159e9

00015d88 <prvTraceGetObjectHandle>:
{
   15d88:	b570      	push	{r4, r5, r6, lr}
	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
   15d8a:	4b2d      	ldr	r3, [pc, #180]	; (15e40 <prvTraceGetObjectHandle+0xb8>)
   15d8c:	681b      	ldr	r3, [r3, #0]
   15d8e:	2b00      	cmp	r3, #0
   15d90:	d046      	beq.n	15e20 <prvTraceGetObjectHandle+0x98>
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   15d92:	2808      	cmp	r0, #8
   15d94:	d849      	bhi.n	15e2a <prvTraceGetObjectHandle+0xa2>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   15d96:	f3ef 8410 	mrs	r4, PRIMASK

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   15d9a:	2301      	movs	r3, #1
   15d9c:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
   15da0:	4a28      	ldr	r2, [pc, #160]	; (15e44 <prvTraceGetObjectHandle+0xbc>)
   15da2:	6813      	ldr	r3, [r2, #0]
   15da4:	3301      	adds	r3, #1
   15da6:	6013      	str	r3, [r2, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
   15da8:	4a27      	ldr	r2, [pc, #156]	; (15e48 <prvTraceGetObjectHandle+0xc0>)
   15daa:	0043      	lsls	r3, r0, #1
   15dac:	5a9b      	ldrh	r3, [r3, r2]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
   15dae:	18d2      	adds	r2, r2, r3
   15db0:	3248      	adds	r2, #72	; 0x48
   15db2:	7812      	ldrb	r2, [r2, #0]
   15db4:	2a00      	cmp	r2, #0
   15db6:	d10a      	bne.n	15dce <prvTraceGetObjectHandle+0x46>
		objectHandleStacks.objectHandles[indexOfHandle] =
   15db8:	4923      	ldr	r1, [pc, #140]	; (15e48 <prvTraceGetObjectHandle+0xc0>)
   15dba:	18cd      	adds	r5, r1, r3
   15dbc:	3548      	adds	r5, #72	; 0x48
			(traceHandle)(1 + indexOfHandle -
   15dbe:	1c5a      	adds	r2, r3, #1
			objectHandleStacks.lowestIndexOfClass[objectclass]);
   15dc0:	0006      	movs	r6, r0
   15dc2:	3608      	adds	r6, #8
   15dc4:	0076      	lsls	r6, r6, #1
   15dc6:	1989      	adds	r1, r1, r6
			(traceHandle)(1 + indexOfHandle -
   15dc8:	8849      	ldrh	r1, [r1, #2]
   15dca:	1a52      	subs	r2, r2, r1
		objectHandleStacks.objectHandles[indexOfHandle] =
   15dcc:	702a      	strb	r2, [r5, #0]
		> objectHandleStacks.highestIndexOfClass[objectclass])
   15dce:	0001      	movs	r1, r0
   15dd0:	3110      	adds	r1, #16
   15dd2:	0049      	lsls	r1, r1, #1
   15dd4:	4a1c      	ldr	r2, [pc, #112]	; (15e48 <prvTraceGetObjectHandle+0xc0>)
   15dd6:	1852      	adds	r2, r2, r1
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
   15dd8:	8892      	ldrh	r2, [r2, #4]
   15dda:	429a      	cmp	r2, r3
   15ddc:	d32a      	bcc.n	15e34 <prvTraceGetObjectHandle+0xac>
	handle = objectHandleStacks.objectHandles[indexOfHandle];
   15dde:	491a      	ldr	r1, [pc, #104]	; (15e48 <prvTraceGetObjectHandle+0xc0>)
   15de0:	18ca      	adds	r2, r1, r3
   15de2:	3248      	adds	r2, #72	; 0x48
   15de4:	7812      	ldrb	r2, [r2, #0]
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
   15de6:	3301      	adds	r3, #1
   15de8:	b29b      	uxth	r3, r3
   15dea:	0045      	lsls	r5, r0, #1
   15dec:	526b      	strh	r3, [r5, r1]
			objectHandleStacks.lowestIndexOfClass[objectclass];
   15dee:	0005      	movs	r5, r0
   15df0:	3508      	adds	r5, #8
   15df2:	006d      	lsls	r5, r5, #1
   15df4:	194d      	adds	r5, r1, r5
   15df6:	886d      	ldrh	r5, [r5, #2]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
   15df8:	1b5b      	subs	r3, r3, r5
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
   15dfa:	0005      	movs	r5, r0
   15dfc:	3518      	adds	r5, #24
   15dfe:	006d      	lsls	r5, r5, #1
   15e00:	1949      	adds	r1, r1, r5
   15e02:	88c9      	ldrh	r1, [r1, #6]
		if (hndCount >
   15e04:	428b      	cmp	r3, r1
   15e06:	dd03      	ble.n	15e10 <prvTraceGetObjectHandle+0x88>
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   15e08:	490f      	ldr	r1, [pc, #60]	; (15e48 <prvTraceGetObjectHandle+0xc0>)
   15e0a:	1948      	adds	r0, r1, r5
				(traceHandle)hndCount;
   15e0c:	b2db      	uxtb	r3, r3
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   15e0e:	80c3      	strh	r3, [r0, #6]
	trcCRITICAL_SECTION_END();
   15e10:	490c      	ldr	r1, [pc, #48]	; (15e44 <prvTraceGetObjectHandle+0xbc>)
   15e12:	680b      	ldr	r3, [r1, #0]
   15e14:	3b01      	subs	r3, #1
   15e16:	600b      	str	r3, [r1, #0]
   15e18:	f384 8810 	msr	PRIMASK, r4
}
   15e1c:	0010      	movs	r0, r2
   15e1e:	bd70      	pop	{r4, r5, r6, pc}
	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
   15e20:	480a      	ldr	r0, [pc, #40]	; (15e4c <prvTraceGetObjectHandle+0xc4>)
   15e22:	4b0b      	ldr	r3, [pc, #44]	; (15e50 <prvTraceGetObjectHandle+0xc8>)
   15e24:	4798      	blx	r3
   15e26:	2200      	movs	r2, #0
   15e28:	e7f8      	b.n	15e1c <prvTraceGetObjectHandle+0x94>
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   15e2a:	480a      	ldr	r0, [pc, #40]	; (15e54 <prvTraceGetObjectHandle+0xcc>)
   15e2c:	4b08      	ldr	r3, [pc, #32]	; (15e50 <prvTraceGetObjectHandle+0xc8>)
   15e2e:	4798      	blx	r3
   15e30:	2200      	movs	r2, #0
   15e32:	e7f3      	b.n	15e1c <prvTraceGetObjectHandle+0x94>
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   15e34:	4b08      	ldr	r3, [pc, #32]	; (15e58 <prvTraceGetObjectHandle+0xd0>)
   15e36:	4798      	blx	r3
   15e38:	4b05      	ldr	r3, [pc, #20]	; (15e50 <prvTraceGetObjectHandle+0xc8>)
   15e3a:	4798      	blx	r3
		handle = 0;
   15e3c:	2200      	movs	r2, #0
   15e3e:	e7e7      	b.n	15e10 <prvTraceGetObjectHandle+0x88>
   15e40:	20000b2c 	.word	0x20000b2c
   15e44:	20000bdc 	.word	0x20000bdc
   15e48:	20000b48 	.word	0x20000b48
   15e4c:	00029fd4 	.word	0x00029fd4
   15e50:	000159e9 	.word	0x000159e9
   15e54:	000297f8 	.word	0x000297f8
   15e58:	00015755 	.word	0x00015755

00015e5c <prvTraceSetObjectName>:
{
   15e5c:	b570      	push	{r4, r5, r6, lr}
   15e5e:	0004      	movs	r4, r0
   15e60:	0008      	movs	r0, r1
   15e62:	1e15      	subs	r5, r2, #0
	TRACE_ASSERT(name != NULL, "prvTraceSetObjectName: name == NULL", TRC_UNUSED);
   15e64:	d012      	beq.n	15e8c <prvTraceSetObjectName+0x30>
	if (objectclass >= TRACE_NCLASSES)
   15e66:	2c08      	cmp	r4, #8
   15e68:	d814      	bhi.n	15e94 <prvTraceSetObjectName+0x38>
	if (handle == 0)
   15e6a:	2900      	cmp	r1, #0
   15e6c:	d016      	beq.n	15e9c <prvTraceSetObjectName+0x40>
	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
   15e6e:	4b16      	ldr	r3, [pc, #88]	; (15ec8 <prvTraceSetObjectName+0x6c>)
   15e70:	681b      	ldr	r3, [r3, #0]
   15e72:	191b      	adds	r3, r3, r4
   15e74:	3364      	adds	r3, #100	; 0x64
   15e76:	781b      	ldrb	r3, [r3, #0]
   15e78:	428b      	cmp	r3, r1
   15e7a:	d313      	bcc.n	15ea4 <prvTraceSetObjectName+0x48>
		idx = uiIndexOfObject(handle, objectclass);
   15e7c:	0021      	movs	r1, r4
   15e7e:	4b13      	ldr	r3, [pc, #76]	; (15ecc <prvTraceSetObjectName+0x70>)
   15e80:	4798      	blx	r3
		if (traceErrorMessage == NULL)
   15e82:	4b13      	ldr	r3, [pc, #76]	; (15ed0 <prvTraceSetObjectName+0x74>)
   15e84:	681b      	ldr	r3, [r3, #0]
   15e86:	2b00      	cmp	r3, #0
   15e88:	d012      	beq.n	15eb0 <prvTraceSetObjectName+0x54>
}
   15e8a:	bd70      	pop	{r4, r5, r6, pc}
	TRACE_ASSERT(name != NULL, "prvTraceSetObjectName: name == NULL", TRC_UNUSED);
   15e8c:	4811      	ldr	r0, [pc, #68]	; (15ed4 <prvTraceSetObjectName+0x78>)
   15e8e:	4b12      	ldr	r3, [pc, #72]	; (15ed8 <prvTraceSetObjectName+0x7c>)
   15e90:	4798      	blx	r3
   15e92:	e7fa      	b.n	15e8a <prvTraceSetObjectName+0x2e>
		prvTraceError("Illegal object class in prvTraceSetObjectName");
   15e94:	4811      	ldr	r0, [pc, #68]	; (15edc <prvTraceSetObjectName+0x80>)
   15e96:	4b10      	ldr	r3, [pc, #64]	; (15ed8 <prvTraceSetObjectName+0x7c>)
   15e98:	4798      	blx	r3
		return;
   15e9a:	e7f6      	b.n	15e8a <prvTraceSetObjectName+0x2e>
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
   15e9c:	4810      	ldr	r0, [pc, #64]	; (15ee0 <prvTraceSetObjectName+0x84>)
   15e9e:	4b0e      	ldr	r3, [pc, #56]	; (15ed8 <prvTraceSetObjectName+0x7c>)
   15ea0:	4798      	blx	r3
		return;
   15ea2:	e7f2      	b.n	15e8a <prvTraceSetObjectName+0x2e>
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   15ea4:	0020      	movs	r0, r4
   15ea6:	4b0f      	ldr	r3, [pc, #60]	; (15ee4 <prvTraceSetObjectName+0x88>)
   15ea8:	4798      	blx	r3
   15eaa:	4b0b      	ldr	r3, [pc, #44]	; (15ed8 <prvTraceSetObjectName+0x7c>)
   15eac:	4798      	blx	r3
   15eae:	e7ec      	b.n	15e8a <prvTraceSetObjectName+0x2e>
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   15eb0:	4b05      	ldr	r3, [pc, #20]	; (15ec8 <prvTraceSetObjectName+0x6c>)
   15eb2:	681b      	ldr	r3, [r3, #0]
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
   15eb4:	191c      	adds	r4, r3, r4
   15eb6:	3470      	adds	r4, #112	; 0x70
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   15eb8:	7822      	ldrb	r2, [r4, #0]
   15eba:	309c      	adds	r0, #156	; 0x9c
   15ebc:	1818      	adds	r0, r3, r0
   15ebe:	0029      	movs	r1, r5
   15ec0:	4b09      	ldr	r3, [pc, #36]	; (15ee8 <prvTraceSetObjectName+0x8c>)
   15ec2:	4798      	blx	r3
   15ec4:	e7e1      	b.n	15e8a <prvTraceSetObjectName+0x2e>
   15ec6:	46c0      	nop			; (mov r8, r8)
   15ec8:	20000b2c 	.word	0x20000b2c
   15ecc:	00015bc5 	.word	0x00015bc5
   15ed0:	20000be4 	.word	0x20000be4
   15ed4:	00029944 	.word	0x00029944
   15ed8:	000159e9 	.word	0x000159e9
   15edc:	00029978 	.word	0x00029978
   15ee0:	000299a8 	.word	0x000299a8
   15ee4:	00015755 	.word	0x00015755
   15ee8:	000157b5 	.word	0x000157b5

00015eec <prvTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
   15eec:	b570      	push	{r4, r5, r6, lr}
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
	uint32_t diff_scaled = 0;
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
   15eee:	4b1e      	ldr	r3, [pc, #120]	; (15f68 <prvTracePortGetTimeStamp+0x7c>)
   15ef0:	681b      	ldr	r3, [r3, #0]
   15ef2:	2b01      	cmp	r3, #1
   15ef4:	d02b      	beq.n	15f4e <prvTracePortGetTimeStamp+0x62>
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
#elif (TRC_HWTC_TYPE == TRC_OS_TIMER_DECR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR)
	/* Convert decreasing tick count into increasing tick count */
	hwtc_count = (TRC_HWTC_PERIOD) - (TRC_HWTC_COUNT);
   15ef6:	4b1d      	ldr	r3, [pc, #116]	; (15f6c <prvTracePortGetTimeStamp+0x80>)
   15ef8:	6819      	ldr	r1, [r3, #0]
   15efa:	4b1d      	ldr	r3, [pc, #116]	; (15f70 <prvTracePortGetTimeStamp+0x84>)
   15efc:	681b      	ldr	r3, [r3, #0]
   15efe:	3101      	adds	r1, #1
   15f00:	1ac9      	subs	r1, r1, r3
	}
#endif

#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)
	/* Timestamping is based on a timer that wraps at TRC_HWTC_PERIOD */
	if (last_traceTickCount - uiTraceTickCount - 1 < 0x80000000)
   15f02:	4b1c      	ldr	r3, [pc, #112]	; (15f74 <prvTracePortGetTimeStamp+0x88>)
   15f04:	681b      	ldr	r3, [r3, #0]
   15f06:	4a1c      	ldr	r2, [pc, #112]	; (15f78 <prvTracePortGetTimeStamp+0x8c>)
   15f08:	6814      	ldr	r4, [r2, #0]
   15f0a:	43e2      	mvns	r2, r4
   15f0c:	42da      	cmn	r2, r3
   15f0e:	d424      	bmi.n	15f5a <prvTracePortGetTimeStamp+0x6e>
		traceTickCount = uiTraceTickCount;
	}

	/* Check for overflow. May occur if the update of uiTraceTickCount has been
	delayed due to disabled interrupts. */
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
   15f10:	4a1a      	ldr	r2, [pc, #104]	; (15f7c <prvTracePortGetTimeStamp+0x90>)
   15f12:	6814      	ldr	r4, [r2, #0]
	{
		/* A trace tick has occurred but not been executed by the kernel, so we compensate manually. */
		traceTickCount++;
   15f14:	42a1      	cmp	r1, r4
   15f16:	41a4      	sbcs	r4, r4
   15f18:	4264      	negs	r4, r4
   15f1a:	191c      	adds	r4, r3, r4
	}

	/* Check if the return address is OK, then we perform the calculation. */
	if (pTimestamp)
   15f1c:	2800      	cmp	r0, #0
   15f1e:	d01f      	beq.n	15f60 <prvTracePortGetTimeStamp+0x74>
	{
		/* Get timestamp from trace ticks. Scale down the period to avoid unwanted overflows. */
		last_timestamp = traceTickCount * ((TRC_HWTC_PERIOD) / (TRC_HWTC_DIVISOR));
   15f20:	4d12      	ldr	r5, [pc, #72]	; (15f6c <prvTracePortGetTimeStamp+0x80>)
   15f22:	682b      	ldr	r3, [r5, #0]
   15f24:	3301      	adds	r3, #1
   15f26:	089b      	lsrs	r3, r3, #2
   15f28:	4363      	muls	r3, r4
   15f2a:	001a      	movs	r2, r3
   15f2c:	4e14      	ldr	r6, [pc, #80]	; (15f80 <prvTracePortGetTimeStamp+0x94>)
   15f2e:	6033      	str	r3, [r6, #0]
		/* Increase timestamp by (hwtc_count + "lost hardware ticks from scaling down period") / TRC_HWTC_DIVISOR. */
		last_timestamp += (hwtc_count + traceTickCount * ((TRC_HWTC_PERIOD) % (TRC_HWTC_DIVISOR))) / (TRC_HWTC_DIVISOR);
   15f30:	682d      	ldr	r5, [r5, #0]
   15f32:	3501      	adds	r5, #1
   15f34:	2303      	movs	r3, #3
   15f36:	402b      	ands	r3, r5
   15f38:	4363      	muls	r3, r4
   15f3a:	185b      	adds	r3, r3, r1
   15f3c:	089b      	lsrs	r3, r3, #2
   15f3e:	189b      	adds	r3, r3, r2
   15f40:	6033      	str	r3, [r6, #0]
	}
	/* Store the previous value */
	last_traceTickCount = traceTickCount;
   15f42:	4a0c      	ldr	r2, [pc, #48]	; (15f74 <prvTracePortGetTimeStamp+0x88>)
   15f44:	6014      	str	r4, [r2, #0]
	last_timestamp += diff_scaled;
#endif /*(TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
		*pTimestamp = last_timestamp;
   15f46:	6003      	str	r3, [r0, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
   15f48:	4b0c      	ldr	r3, [pc, #48]	; (15f7c <prvTracePortGetTimeStamp+0x90>)
   15f4a:	6019      	str	r1, [r3, #0]
}
   15f4c:	bd70      	pop	{r4, r5, r6, pc}
		if (pTimestamp)
   15f4e:	2800      	cmp	r0, #0
   15f50:	d0fc      	beq.n	15f4c <prvTracePortGetTimeStamp+0x60>
			*pTimestamp = last_timestamp;
   15f52:	4b0b      	ldr	r3, [pc, #44]	; (15f80 <prvTracePortGetTimeStamp+0x94>)
   15f54:	681b      	ldr	r3, [r3, #0]
   15f56:	6003      	str	r3, [r0, #0]
   15f58:	e7f8      	b.n	15f4c <prvTracePortGetTimeStamp+0x60>
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
   15f5a:	42a3      	cmp	r3, r4
   15f5c:	d1de      	bne.n	15f1c <prvTracePortGetTimeStamp+0x30>
   15f5e:	e7d7      	b.n	15f10 <prvTracePortGetTimeStamp+0x24>
	last_traceTickCount = traceTickCount;
   15f60:	4b04      	ldr	r3, [pc, #16]	; (15f74 <prvTracePortGetTimeStamp+0x88>)
   15f62:	601c      	str	r4, [r3, #0]
   15f64:	e7f0      	b.n	15f48 <prvTracePortGetTimeStamp+0x5c>
   15f66:	46c0      	nop			; (mov r8, r8)
   15f68:	20000be8 	.word	0x20000be8
   15f6c:	e000e014 	.word	0xe000e014
   15f70:	e000e018 	.word	0xe000e018
   15f74:	20000b44 	.word	0x20000b44
   15f78:	20000bf0 	.word	0x20000bf0
   15f7c:	20000b3c 	.word	0x20000b3c
   15f80:	20000b40 	.word	0x20000b40

00015f84 <prvTraceGetDTS>:
{
   15f84:	b5f0      	push	{r4, r5, r6, r7, lr}
   15f86:	b083      	sub	sp, #12
   15f88:	0005      	movs	r5, r0
	uint32_t timestamp = 0;
   15f8a:	2300      	movs	r3, #0
   15f8c:	9301      	str	r3, [sp, #4]
	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
   15f8e:	28ff      	cmp	r0, #255	; 0xff
   15f90:	d002      	beq.n	15f98 <prvTraceGetDTS+0x14>
   15f92:	4b39      	ldr	r3, [pc, #228]	; (16078 <prvTraceGetDTS+0xf4>)
   15f94:	4298      	cmp	r0, r3
   15f96:	d135      	bne.n	16004 <prvTraceGetDTS+0x80>
	if (RecorderDataPtr->frequency == 0)
   15f98:	4b38      	ldr	r3, [pc, #224]	; (1607c <prvTraceGetDTS+0xf8>)
   15f9a:	681c      	ldr	r4, [r3, #0]
   15f9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   15f9e:	2b00      	cmp	r3, #0
   15fa0:	d105      	bne.n	15fae <prvTraceGetDTS+0x2a>
		if (timestampFrequency != 0)
   15fa2:	4b37      	ldr	r3, [pc, #220]	; (16080 <prvTraceGetDTS+0xfc>)
   15fa4:	681b      	ldr	r3, [r3, #0]
   15fa6:	2b00      	cmp	r3, #0
   15fa8:	d031      	beq.n	1600e <prvTraceGetDTS+0x8a>
			RecorderDataPtr->frequency = timestampFrequency / (TRC_HWTC_DIVISOR);
   15faa:	089b      	lsrs	r3, r3, #2
   15fac:	6263      	str	r3, [r4, #36]	; 0x24
	prvTracePortGetTimeStamp(&timestamp);	
   15fae:	a801      	add	r0, sp, #4
   15fb0:	4b34      	ldr	r3, [pc, #208]	; (16084 <prvTraceGetDTS+0x100>)
   15fb2:	4798      	blx	r3
	dts = timestamp - old_timestamp;
   15fb4:	9b01      	ldr	r3, [sp, #4]
   15fb6:	4a34      	ldr	r2, [pc, #208]	; (16088 <prvTraceGetDTS+0x104>)
   15fb8:	6811      	ldr	r1, [r2, #0]
   15fba:	1a5c      	subs	r4, r3, r1
	old_timestamp = timestamp;
   15fbc:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->frequency > 0)
   15fbe:	4a2f      	ldr	r2, [pc, #188]	; (1607c <prvTraceGetDTS+0xf8>)
   15fc0:	6816      	ldr	r6, [r2, #0]
   15fc2:	6a77      	ldr	r7, [r6, #36]	; 0x24
   15fc4:	2f00      	cmp	r7, #0
   15fc6:	d032      	beq.n	1602e <prvTraceGetDTS+0xaa>
		if (dts > RecorderDataPtr->frequency)
   15fc8:	42bc      	cmp	r4, r7
   15fca:	d92c      	bls.n	16026 <prvTraceGetDTS+0xa2>
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
   15fcc:	0039      	movs	r1, r7
   15fce:	0020      	movs	r0, r4
   15fd0:	4b2e      	ldr	r3, [pc, #184]	; (1608c <prvTraceGetDTS+0x108>)
   15fd2:	4798      	blx	r3
   15fd4:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   15fd6:	469c      	mov	ip, r3
   15fd8:	4460      	add	r0, ip
   15fda:	62f0      	str	r0, [r6, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
   15fdc:	0039      	movs	r1, r7
   15fde:	0020      	movs	r0, r4
   15fe0:	4b2b      	ldr	r3, [pc, #172]	; (16090 <prvTraceGetDTS+0x10c>)
   15fe2:	4798      	blx	r3
   15fe4:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   15fe6:	469c      	mov	ip, r3
   15fe8:	4461      	add	r1, ip
   15fea:	62b1      	str	r1, [r6, #40]	; 0x28
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
   15fec:	4b23      	ldr	r3, [pc, #140]	; (1607c <prvTraceGetDTS+0xf8>)
   15fee:	681b      	ldr	r3, [r3, #0]
   15ff0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   15ff2:	6a59      	ldr	r1, [r3, #36]	; 0x24
   15ff4:	428a      	cmp	r2, r1
   15ff6:	d31b      	bcc.n	16030 <prvTraceGetDTS+0xac>
			RecorderDataPtr->absTimeLastEventSecond++;
   15ff8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   15ffa:	3001      	adds	r0, #1
   15ffc:	62d8      	str	r0, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
   15ffe:	1a52      	subs	r2, r2, r1
   16000:	629a      	str	r2, [r3, #40]	; 0x28
   16002:	e015      	b.n	16030 <prvTraceGetDTS+0xac>
	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
   16004:	4823      	ldr	r0, [pc, #140]	; (16094 <prvTraceGetDTS+0x110>)
   16006:	4b24      	ldr	r3, [pc, #144]	; (16098 <prvTraceGetDTS+0x114>)
   16008:	4798      	blx	r3
   1600a:	2000      	movs	r0, #0
   1600c:	e014      	b.n	16038 <prvTraceGetDTS+0xb4>
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
   1600e:	4b23      	ldr	r3, [pc, #140]	; (1609c <prvTraceGetDTS+0x118>)
   16010:	681a      	ldr	r2, [r3, #0]
   16012:	4b23      	ldr	r3, [pc, #140]	; (160a0 <prvTraceGetDTS+0x11c>)
   16014:	681b      	ldr	r3, [r3, #0]
   16016:	429a      	cmp	r2, r3
   16018:	d0c9      	beq.n	15fae <prvTraceGetDTS+0x2a>
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
   1601a:	2000      	movs	r0, #0
   1601c:	4b21      	ldr	r3, [pc, #132]	; (160a4 <prvTraceGetDTS+0x120>)
   1601e:	4798      	blx	r3
   16020:	0880      	lsrs	r0, r0, #2
   16022:	6260      	str	r0, [r4, #36]	; 0x24
   16024:	e7c3      	b.n	15fae <prvTraceGetDTS+0x2a>
			RecorderDataPtr->absTimeLastEvent += dts;
   16026:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   16028:	191b      	adds	r3, r3, r4
   1602a:	62b3      	str	r3, [r6, #40]	; 0x28
   1602c:	e7de      	b.n	15fec <prvTraceGetDTS+0x68>
		RecorderDataPtr->absTimeLastEvent = timestamp;
   1602e:	62b3      	str	r3, [r6, #40]	; 0x28
	if (dts > param_maxDTS)
   16030:	42ac      	cmp	r4, r5
   16032:	d803      	bhi.n	1603c <prvTraceGetDTS+0xb8>
	return (uint16_t)dts & param_maxDTS;
   16034:	0020      	movs	r0, r4
   16036:	4028      	ands	r0, r5
}
   16038:	b003      	add	sp, #12
   1603a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
   1603c:	4b1a      	ldr	r3, [pc, #104]	; (160a8 <prvTraceGetDTS+0x124>)
   1603e:	4798      	blx	r3
		if (xts != NULL)
   16040:	2800      	cmp	r0, #0
   16042:	d0f7      	beq.n	16034 <prvTraceGetDTS+0xb0>
			if (param_maxDTS == 0xFFFF)
   16044:	4b0c      	ldr	r3, [pc, #48]	; (16078 <prvTraceGetDTS+0xf4>)
   16046:	429d      	cmp	r5, r3
   16048:	d007      	beq.n	1605a <prvTraceGetDTS+0xd6>
			else if (param_maxDTS == 0xFF)
   1604a:	2dff      	cmp	r5, #255	; 0xff
   1604c:	d00c      	beq.n	16068 <prvTraceGetDTS+0xe4>
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
   1604e:	4817      	ldr	r0, [pc, #92]	; (160ac <prvTraceGetDTS+0x128>)
   16050:	4b11      	ldr	r3, [pc, #68]	; (16098 <prvTraceGetDTS+0x114>)
   16052:	4798      	blx	r3
			prvTraceUpdateCounters();
   16054:	4b16      	ldr	r3, [pc, #88]	; (160b0 <prvTraceGetDTS+0x12c>)
   16056:	4798      	blx	r3
   16058:	e7ec      	b.n	16034 <prvTraceGetDTS+0xb0>
				xts->type = XTS16;
   1605a:	23a9      	movs	r3, #169	; 0xa9
   1605c:	7003      	strb	r3, [r0, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
   1605e:	0c23      	lsrs	r3, r4, #16
   16060:	8043      	strh	r3, [r0, #2]
				xts->xts_8 = 0;
   16062:	2300      	movs	r3, #0
   16064:	7043      	strb	r3, [r0, #1]
   16066:	e7f5      	b.n	16054 <prvTraceGetDTS+0xd0>
				xts->type = XTS8;
   16068:	23a8      	movs	r3, #168	; 0xa8
   1606a:	7003      	strb	r3, [r0, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
   1606c:	0a23      	lsrs	r3, r4, #8
   1606e:	8043      	strh	r3, [r0, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
   16070:	0e23      	lsrs	r3, r4, #24
   16072:	7043      	strb	r3, [r0, #1]
   16074:	e7ee      	b.n	16054 <prvTraceGetDTS+0xd0>
   16076:	46c0      	nop			; (mov r8, r8)
   16078:	0000ffff 	.word	0x0000ffff
   1607c:	20000b2c 	.word	0x20000b2c
   16080:	20000be0 	.word	0x20000be0
   16084:	00015eed 	.word	0x00015eed
   16088:	20000bd8 	.word	0x20000bd8
   1608c:	00024055 	.word	0x00024055
   16090:	00024161 	.word	0x00024161
   16094:	00029794 	.word	0x00029794
   16098:	000159e9 	.word	0x000159e9
   1609c:	e000e018 	.word	0xe000e018
   160a0:	20004fcc 	.word	0x20004fcc
   160a4:	0001f021 	.word	0x0001f021
   160a8:	00015a41 	.word	0x00015a41
   160ac:	000297d4 	.word	0x000297d4
   160b0:	00015b39 	.word	0x00015b39

000160b4 <prvTraceStoreTaskReady>:
{
   160b4:	b570      	push	{r4, r5, r6, lr}
   160b6:	1e04      	subs	r4, r0, #0
	if (handle == 0)
   160b8:	d01d      	beq.n	160f6 <prvTraceStoreTaskReady+0x42>
	if (! readyEventsEnabled)
   160ba:	4b1b      	ldr	r3, [pc, #108]	; (16128 <prvTraceStoreTaskReady+0x74>)
   160bc:	681b      	ldr	r3, [r3, #0]
   160be:	2b00      	cmp	r3, #0
   160c0:	d019      	beq.n	160f6 <prvTraceStoreTaskReady+0x42>
	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);
   160c2:	280f      	cmp	r0, #15
   160c4:	d818      	bhi.n	160f8 <prvTraceStoreTaskReady+0x44>
	if (recorder_busy)
   160c6:	4b19      	ldr	r3, [pc, #100]	; (1612c <prvTraceStoreTaskReady+0x78>)
   160c8:	681b      	ldr	r3, [r3, #0]
   160ca:	2b00      	cmp	r3, #0
   160cc:	d118      	bne.n	16100 <prvTraceStoreTaskReady+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   160ce:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   160d2:	2301      	movs	r3, #1
   160d4:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
   160d8:	4a14      	ldr	r2, [pc, #80]	; (1612c <prvTraceStoreTaskReady+0x78>)
   160da:	6813      	ldr	r3, [r2, #0]
   160dc:	3301      	adds	r3, #1
   160de:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
   160e0:	4b13      	ldr	r3, [pc, #76]	; (16130 <prvTraceStoreTaskReady+0x7c>)
   160e2:	681b      	ldr	r3, [r3, #0]
   160e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   160e6:	2b00      	cmp	r3, #0
   160e8:	d10e      	bne.n	16108 <prvTraceStoreTaskReady+0x54>
	trcCRITICAL_SECTION_END();
   160ea:	4a10      	ldr	r2, [pc, #64]	; (1612c <prvTraceStoreTaskReady+0x78>)
   160ec:	6813      	ldr	r3, [r2, #0]
   160ee:	3b01      	subs	r3, #1
   160f0:	6013      	str	r3, [r2, #0]
   160f2:	f385 8810 	msr	PRIMASK, r5
}
   160f6:	bd70      	pop	{r4, r5, r6, pc}
	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);
   160f8:	480e      	ldr	r0, [pc, #56]	; (16134 <prvTraceStoreTaskReady+0x80>)
   160fa:	4b0f      	ldr	r3, [pc, #60]	; (16138 <prvTraceStoreTaskReady+0x84>)
   160fc:	4798      	blx	r3
   160fe:	e7fa      	b.n	160f6 <prvTraceStoreTaskReady+0x42>
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
   16100:	480e      	ldr	r0, [pc, #56]	; (1613c <prvTraceStoreTaskReady+0x88>)
   16102:	4b0d      	ldr	r3, [pc, #52]	; (16138 <prvTraceStoreTaskReady+0x84>)
   16104:	4798      	blx	r3
		return;
   16106:	e7f6      	b.n	160f6 <prvTraceStoreTaskReady+0x42>
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   16108:	480d      	ldr	r0, [pc, #52]	; (16140 <prvTraceStoreTaskReady+0x8c>)
   1610a:	4b0e      	ldr	r3, [pc, #56]	; (16144 <prvTraceStoreTaskReady+0x90>)
   1610c:	4798      	blx	r3
   1610e:	0006      	movs	r6, r0
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
   16110:	4b0d      	ldr	r3, [pc, #52]	; (16148 <prvTraceStoreTaskReady+0x94>)
   16112:	4798      	blx	r3
		if (tr != NULL)
   16114:	2800      	cmp	r0, #0
   16116:	d0e8      	beq.n	160ea <prvTraceStoreTaskReady+0x36>
			tr->type = DIV_TASK_READY;
   16118:	2302      	movs	r3, #2
   1611a:	7003      	strb	r3, [r0, #0]
			tr->dts = dts3;
   1611c:	8046      	strh	r6, [r0, #2]
			tr->objHandle = hnd8;
   1611e:	7044      	strb	r4, [r0, #1]
			prvTraceUpdateCounters();
   16120:	4b0a      	ldr	r3, [pc, #40]	; (1614c <prvTraceStoreTaskReady+0x98>)
   16122:	4798      	blx	r3
   16124:	e7e1      	b.n	160ea <prvTraceStoreTaskReady+0x36>
   16126:	46c0      	nop			; (mov r8, r8)
   16128:	200000cc 	.word	0x200000cc
   1612c:	20000bdc 	.word	0x20000bdc
   16130:	20000b2c 	.word	0x20000b2c
   16134:	00029dd4 	.word	0x00029dd4
   16138:	000159e9 	.word	0x000159e9
   1613c:	00029e14 	.word	0x00029e14
   16140:	0000ffff 	.word	0x0000ffff
   16144:	00015f85 	.word	0x00015f85
   16148:	00015a41 	.word	0x00015a41
   1614c:	00015b39 	.word	0x00015b39

00016150 <vTraceStoreMemMangEvent>:
{
   16150:	b5f0      	push	{r4, r5, r6, r7, lr}
   16152:	b083      	sub	sp, #12
   16154:	9000      	str	r0, [sp, #0]
   16156:	000c      	movs	r4, r1
	if (RecorderDataPtr == NULL)
   16158:	4b28      	ldr	r3, [pc, #160]	; (161fc <vTraceStoreMemMangEvent+0xac>)
   1615a:	681b      	ldr	r3, [r3, #0]
   1615c:	2b00      	cmp	r3, #0
   1615e:	d01d      	beq.n	1619c <vTraceStoreMemMangEvent+0x4c>
		size = (uint32_t)(- signed_size);
   16160:	17d3      	asrs	r3, r2, #31
   16162:	18d6      	adds	r6, r2, r3
   16164:	405e      	eors	r6, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   16166:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1616a:	2301      	movs	r3, #1
   1616c:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
   16170:	4923      	ldr	r1, [pc, #140]	; (16200 <vTraceStoreMemMangEvent+0xb0>)
   16172:	680b      	ldr	r3, [r1, #0]
   16174:	3301      	adds	r3, #1
   16176:	600b      	str	r3, [r1, #0]
	if (address != 0)
   16178:	2c00      	cmp	r4, #0
   1617a:	d004      	beq.n	16186 <vTraceStoreMemMangEvent+0x36>
		heapMemUsage += (uint32_t)signed_size;
   1617c:	4b21      	ldr	r3, [pc, #132]	; (16204 <vTraceStoreMemMangEvent+0xb4>)
   1617e:	6819      	ldr	r1, [r3, #0]
   16180:	468c      	mov	ip, r1
   16182:	4462      	add	r2, ip
   16184:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive)
   16186:	4b1d      	ldr	r3, [pc, #116]	; (161fc <vTraceStoreMemMangEvent+0xac>)
   16188:	681b      	ldr	r3, [r3, #0]
   1618a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1618c:	2b00      	cmp	r3, #0
   1618e:	d107      	bne.n	161a0 <vTraceStoreMemMangEvent+0x50>
	trcCRITICAL_SECTION_END();
   16190:	4a1b      	ldr	r2, [pc, #108]	; (16200 <vTraceStoreMemMangEvent+0xb0>)
   16192:	6813      	ldr	r3, [r2, #0]
   16194:	3b01      	subs	r3, #1
   16196:	6013      	str	r3, [r2, #0]
   16198:	f385 8810 	msr	PRIMASK, r5
}
   1619c:	b003      	add	sp, #12
   1619e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
   161a0:	20ff      	movs	r0, #255	; 0xff
   161a2:	4b19      	ldr	r3, [pc, #100]	; (16208 <vTraceStoreMemMangEvent+0xb8>)
   161a4:	4798      	blx	r3
   161a6:	9001      	str	r0, [sp, #4]
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
   161a8:	0031      	movs	r1, r6
   161aa:	4818      	ldr	r0, [pc, #96]	; (1620c <vTraceStoreMemMangEvent+0xbc>)
   161ac:	4b18      	ldr	r3, [pc, #96]	; (16210 <vTraceStoreMemMangEvent+0xc0>)
   161ae:	4798      	blx	r3
   161b0:	0006      	movs	r6, r0
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
   161b2:	4b18      	ldr	r3, [pc, #96]	; (16214 <vTraceStoreMemMangEvent+0xc4>)
   161b4:	4798      	blx	r3
   161b6:	1e07      	subs	r7, r0, #0
		if (ms != NULL)
   161b8:	d0ea      	beq.n	16190 <vTraceStoreMemMangEvent+0x40>
			ms->dts = dts1;
   161ba:	466b      	mov	r3, sp
   161bc:	791b      	ldrb	r3, [r3, #4]
   161be:	7043      	strb	r3, [r0, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
   161c0:	2300      	movs	r3, #0
   161c2:	7003      	strb	r3, [r0, #0]
			ms->size = size_low;
   161c4:	8046      	strh	r6, [r0, #2]
			prvTraceUpdateCounters();
   161c6:	4b14      	ldr	r3, [pc, #80]	; (16218 <vTraceStoreMemMangEvent+0xc8>)
   161c8:	4798      	blx	r3
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
   161ca:	0021      	movs	r1, r4
   161cc:	480f      	ldr	r0, [pc, #60]	; (1620c <vTraceStoreMemMangEvent+0xbc>)
   161ce:	4b10      	ldr	r3, [pc, #64]	; (16210 <vTraceStoreMemMangEvent+0xc0>)
   161d0:	4798      	blx	r3
   161d2:	0006      	movs	r6, r0
			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
   161d4:	4b0f      	ldr	r3, [pc, #60]	; (16214 <vTraceStoreMemMangEvent+0xc4>)
   161d6:	4798      	blx	r3
			if (ma != NULL)
   161d8:	2800      	cmp	r0, #0
   161da:	d0d9      	beq.n	16190 <vTraceStoreMemMangEvent+0x40>
				ma->addr_low = addr_low;
   161dc:	8046      	strh	r6, [r0, #2]
				ma->addr_high = addr_high;
   161de:	2300      	movs	r3, #0
   161e0:	7043      	strb	r3, [r0, #1]
				ma->type = (uint8_t) (ecode  + 1); /* Note this! */
   161e2:	466b      	mov	r3, sp
   161e4:	781c      	ldrb	r4, [r3, #0]
   161e6:	1c63      	adds	r3, r4, #1
   161e8:	7003      	strb	r3, [r0, #0]
				ms->type = (uint8_t) ecode;
   161ea:	703c      	strb	r4, [r7, #0]
				prvTraceUpdateCounters();					
   161ec:	4b0a      	ldr	r3, [pc, #40]	; (16218 <vTraceStoreMemMangEvent+0xc8>)
   161ee:	4798      	blx	r3
				RecorderDataPtr->heapMemUsage = heapMemUsage;
   161f0:	4b02      	ldr	r3, [pc, #8]	; (161fc <vTraceStoreMemMangEvent+0xac>)
   161f2:	681b      	ldr	r3, [r3, #0]
   161f4:	4a03      	ldr	r2, [pc, #12]	; (16204 <vTraceStoreMemMangEvent+0xb4>)
   161f6:	6812      	ldr	r2, [r2, #0]
   161f8:	651a      	str	r2, [r3, #80]	; 0x50
   161fa:	e7c9      	b.n	16190 <vTraceStoreMemMangEvent+0x40>
   161fc:	20000b2c 	.word	0x20000b2c
   16200:	20000bdc 	.word	0x20000bdc
   16204:	20000b34 	.word	0x20000b34
   16208:	00015f85 	.word	0x00015f85
   1620c:	0000ffff 	.word	0x0000ffff
   16210:	00015b71 	.word	0x00015b71
   16214:	00015a41 	.word	0x00015a41
   16218:	00015b39 	.word	0x00015b39

0001621c <prvTraceStoreKernelCall>:
{
   1621c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1621e:	0005      	movs	r5, r0
   16220:	0014      	movs	r4, r2
	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
   16222:	28fe      	cmp	r0, #254	; 0xfe
   16224:	d825      	bhi.n	16272 <prvTraceStoreKernelCall+0x56>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   16226:	2908      	cmp	r1, #8
   16228:	d827      	bhi.n	1627a <prvTraceStoreKernelCall+0x5e>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);
   1622a:	4b21      	ldr	r3, [pc, #132]	; (162b0 <prvTraceStoreKernelCall+0x94>)
   1622c:	681b      	ldr	r3, [r3, #0]
   1622e:	1859      	adds	r1, r3, r1
   16230:	3164      	adds	r1, #100	; 0x64
   16232:	780b      	ldrb	r3, [r1, #0]
   16234:	4293      	cmp	r3, r2
   16236:	d324      	bcc.n	16282 <prvTraceStoreKernelCall+0x66>
	if (recorder_busy)
   16238:	4b1e      	ldr	r3, [pc, #120]	; (162b4 <prvTraceStoreKernelCall+0x98>)
   1623a:	681b      	ldr	r3, [r3, #0]
   1623c:	2b00      	cmp	r3, #0
   1623e:	d124      	bne.n	1628a <prvTraceStoreKernelCall+0x6e>
	if (handle_of_last_logged_task == 0)
   16240:	4b1d      	ldr	r3, [pc, #116]	; (162b8 <prvTraceStoreKernelCall+0x9c>)
   16242:	781b      	ldrb	r3, [r3, #0]
   16244:	2b00      	cmp	r3, #0
   16246:	d013      	beq.n	16270 <prvTraceStoreKernelCall+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   16248:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1624c:	2301      	movs	r3, #1
   1624e:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
   16252:	4a18      	ldr	r2, [pc, #96]	; (162b4 <prvTraceStoreKernelCall+0x98>)
   16254:	6813      	ldr	r3, [r2, #0]
   16256:	3301      	adds	r3, #1
   16258:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive)
   1625a:	4b15      	ldr	r3, [pc, #84]	; (162b0 <prvTraceStoreKernelCall+0x94>)
   1625c:	681b      	ldr	r3, [r3, #0]
   1625e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   16260:	2b00      	cmp	r3, #0
   16262:	d116      	bne.n	16292 <prvTraceStoreKernelCall+0x76>
	trcCRITICAL_SECTION_END();
   16264:	4a13      	ldr	r2, [pc, #76]	; (162b4 <prvTraceStoreKernelCall+0x98>)
   16266:	6813      	ldr	r3, [r2, #0]
   16268:	3b01      	subs	r3, #1
   1626a:	6013      	str	r3, [r2, #0]
   1626c:	f386 8810 	msr	PRIMASK, r6
}
   16270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
   16272:	4812      	ldr	r0, [pc, #72]	; (162bc <prvTraceStoreKernelCall+0xa0>)
   16274:	4b12      	ldr	r3, [pc, #72]	; (162c0 <prvTraceStoreKernelCall+0xa4>)
   16276:	4798      	blx	r3
   16278:	e7fa      	b.n	16270 <prvTraceStoreKernelCall+0x54>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   1627a:	4812      	ldr	r0, [pc, #72]	; (162c4 <prvTraceStoreKernelCall+0xa8>)
   1627c:	4b10      	ldr	r3, [pc, #64]	; (162c0 <prvTraceStoreKernelCall+0xa4>)
   1627e:	4798      	blx	r3
   16280:	e7f6      	b.n	16270 <prvTraceStoreKernelCall+0x54>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);
   16282:	4811      	ldr	r0, [pc, #68]	; (162c8 <prvTraceStoreKernelCall+0xac>)
   16284:	4b0e      	ldr	r3, [pc, #56]	; (162c0 <prvTraceStoreKernelCall+0xa4>)
   16286:	4798      	blx	r3
   16288:	e7f2      	b.n	16270 <prvTraceStoreKernelCall+0x54>
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
   1628a:	4810      	ldr	r0, [pc, #64]	; (162cc <prvTraceStoreKernelCall+0xb0>)
   1628c:	4b0c      	ldr	r3, [pc, #48]	; (162c0 <prvTraceStoreKernelCall+0xa4>)
   1628e:	4798      	blx	r3
		return;
   16290:	e7ee      	b.n	16270 <prvTraceStoreKernelCall+0x54>
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
   16292:	480f      	ldr	r0, [pc, #60]	; (162d0 <prvTraceStoreKernelCall+0xb4>)
   16294:	4b0f      	ldr	r3, [pc, #60]	; (162d4 <prvTraceStoreKernelCall+0xb8>)
   16296:	4798      	blx	r3
   16298:	0007      	movs	r7, r0
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
   1629a:	4b0f      	ldr	r3, [pc, #60]	; (162d8 <prvTraceStoreKernelCall+0xbc>)
   1629c:	4798      	blx	r3
		if (kse != NULL)
   1629e:	2800      	cmp	r0, #0
   162a0:	d0e0      	beq.n	16264 <prvTraceStoreKernelCall+0x48>
			kse->dts = dts1;
   162a2:	8047      	strh	r7, [r0, #2]
			kse->type = (uint8_t)ecode;
   162a4:	7005      	strb	r5, [r0, #0]
			kse->objHandle = hnd8;
   162a6:	7044      	strb	r4, [r0, #1]
			prvTraceUpdateCounters();
   162a8:	4b0c      	ldr	r3, [pc, #48]	; (162dc <prvTraceStoreKernelCall+0xc0>)
   162aa:	4798      	blx	r3
   162ac:	e7da      	b.n	16264 <prvTraceStoreKernelCall+0x48>
   162ae:	46c0      	nop			; (mov r8, r8)
   162b0:	20000b2c 	.word	0x20000b2c
   162b4:	20000bdc 	.word	0x20000bdc
   162b8:	20000b30 	.word	0x20000b30
   162bc:	00029b2c 	.word	0x00029b2c
   162c0:	000159e9 	.word	0x000159e9
   162c4:	00029b64 	.word	0x00029b64
   162c8:	00029bac 	.word	0x00029bac
   162cc:	00029bf4 	.word	0x00029bf4
   162d0:	0000ffff 	.word	0x0000ffff
   162d4:	00015f85 	.word	0x00015f85
   162d8:	00015a41 	.word	0x00015a41
   162dc:	00015b39 	.word	0x00015b39

000162e0 <prvTraceStoreKernelCallWithParam>:
{
   162e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   162e2:	46c6      	mov	lr, r8
   162e4:	b500      	push	{lr}
   162e6:	0006      	movs	r6, r0
   162e8:	0014      	movs	r4, r2
   162ea:	001d      	movs	r5, r3
	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
   162ec:	28fe      	cmp	r0, #254	; 0xfe
   162ee:	d827      	bhi.n	16340 <prvTraceStoreKernelCallWithParam+0x60>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   162f0:	2908      	cmp	r1, #8
   162f2:	d829      	bhi.n	16348 <prvTraceStoreKernelCallWithParam+0x68>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);
   162f4:	4b24      	ldr	r3, [pc, #144]	; (16388 <prvTraceStoreKernelCallWithParam+0xa8>)
   162f6:	681b      	ldr	r3, [r3, #0]
   162f8:	1859      	adds	r1, r3, r1
   162fa:	3164      	adds	r1, #100	; 0x64
   162fc:	780b      	ldrb	r3, [r1, #0]
   162fe:	4293      	cmp	r3, r2
   16300:	d326      	bcc.n	16350 <prvTraceStoreKernelCallWithParam+0x70>
	if (recorder_busy)
   16302:	4b22      	ldr	r3, [pc, #136]	; (1638c <prvTraceStoreKernelCallWithParam+0xac>)
   16304:	681b      	ldr	r3, [r3, #0]
   16306:	2b00      	cmp	r3, #0
   16308:	d126      	bne.n	16358 <prvTraceStoreKernelCallWithParam+0x78>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1630a:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1630e:	2301      	movs	r3, #1
   16310:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
   16314:	4a1d      	ldr	r2, [pc, #116]	; (1638c <prvTraceStoreKernelCallWithParam+0xac>)
   16316:	6813      	ldr	r3, [r2, #0]
   16318:	3301      	adds	r3, #1
   1631a:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
   1631c:	4b1a      	ldr	r3, [pc, #104]	; (16388 <prvTraceStoreKernelCallWithParam+0xa8>)
   1631e:	681b      	ldr	r3, [r3, #0]
   16320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   16322:	2b00      	cmp	r3, #0
   16324:	d003      	beq.n	1632e <prvTraceStoreKernelCallWithParam+0x4e>
   16326:	4b1a      	ldr	r3, [pc, #104]	; (16390 <prvTraceStoreKernelCallWithParam+0xb0>)
   16328:	781b      	ldrb	r3, [r3, #0]
   1632a:	2b00      	cmp	r3, #0
   1632c:	d118      	bne.n	16360 <prvTraceStoreKernelCallWithParam+0x80>
	trcCRITICAL_SECTION_END();
   1632e:	4a17      	ldr	r2, [pc, #92]	; (1638c <prvTraceStoreKernelCallWithParam+0xac>)
   16330:	6813      	ldr	r3, [r2, #0]
   16332:	3b01      	subs	r3, #1
   16334:	6013      	str	r3, [r2, #0]
   16336:	f388 8810 	msr	PRIMASK, r8
}
   1633a:	bc04      	pop	{r2}
   1633c:	4690      	mov	r8, r2
   1633e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
   16340:	4814      	ldr	r0, [pc, #80]	; (16394 <prvTraceStoreKernelCallWithParam+0xb4>)
   16342:	4b15      	ldr	r3, [pc, #84]	; (16398 <prvTraceStoreKernelCallWithParam+0xb8>)
   16344:	4798      	blx	r3
   16346:	e7f8      	b.n	1633a <prvTraceStoreKernelCallWithParam+0x5a>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   16348:	4814      	ldr	r0, [pc, #80]	; (1639c <prvTraceStoreKernelCallWithParam+0xbc>)
   1634a:	4b13      	ldr	r3, [pc, #76]	; (16398 <prvTraceStoreKernelCallWithParam+0xb8>)
   1634c:	4798      	blx	r3
   1634e:	e7f4      	b.n	1633a <prvTraceStoreKernelCallWithParam+0x5a>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);
   16350:	4813      	ldr	r0, [pc, #76]	; (163a0 <prvTraceStoreKernelCallWithParam+0xc0>)
   16352:	4b11      	ldr	r3, [pc, #68]	; (16398 <prvTraceStoreKernelCallWithParam+0xb8>)
   16354:	4798      	blx	r3
   16356:	e7f0      	b.n	1633a <prvTraceStoreKernelCallWithParam+0x5a>
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
   16358:	4812      	ldr	r0, [pc, #72]	; (163a4 <prvTraceStoreKernelCallWithParam+0xc4>)
   1635a:	4b0f      	ldr	r3, [pc, #60]	; (16398 <prvTraceStoreKernelCallWithParam+0xb8>)
   1635c:	4798      	blx	r3
		return;
   1635e:	e7ec      	b.n	1633a <prvTraceStoreKernelCallWithParam+0x5a>
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
   16360:	20ff      	movs	r0, #255	; 0xff
   16362:	4b11      	ldr	r3, [pc, #68]	; (163a8 <prvTraceStoreKernelCallWithParam+0xc8>)
   16364:	4798      	blx	r3
   16366:	0007      	movs	r7, r0
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
   16368:	0029      	movs	r1, r5
   1636a:	20ff      	movs	r0, #255	; 0xff
   1636c:	4b0f      	ldr	r3, [pc, #60]	; (163ac <prvTraceStoreKernelCallWithParam+0xcc>)
   1636e:	4798      	blx	r3
   16370:	0005      	movs	r5, r0
		kse = (KernelCallWithParamAndHandle*) prvTraceNextFreeEventBufferSlot();
   16372:	4b0f      	ldr	r3, [pc, #60]	; (163b0 <prvTraceStoreKernelCallWithParam+0xd0>)
   16374:	4798      	blx	r3
		if (kse != NULL)
   16376:	2800      	cmp	r0, #0
   16378:	d0d9      	beq.n	1632e <prvTraceStoreKernelCallWithParam+0x4e>
			kse->dts = dts2;
   1637a:	70c7      	strb	r7, [r0, #3]
			kse->type = (uint8_t)evtcode;
   1637c:	7006      	strb	r6, [r0, #0]
			kse->objHandle = hnd8;
   1637e:	7044      	strb	r4, [r0, #1]
			kse->param = p8;
   16380:	7085      	strb	r5, [r0, #2]
			prvTraceUpdateCounters();
   16382:	4b0c      	ldr	r3, [pc, #48]	; (163b4 <prvTraceStoreKernelCallWithParam+0xd4>)
   16384:	4798      	blx	r3
   16386:	e7d2      	b.n	1632e <prvTraceStoreKernelCallWithParam+0x4e>
   16388:	20000b2c 	.word	0x20000b2c
   1638c:	20000bdc 	.word	0x20000bdc
   16390:	20000b30 	.word	0x20000b30
   16394:	00029cbc 	.word	0x00029cbc
   16398:	000159e9 	.word	0x000159e9
   1639c:	00029cfc 	.word	0x00029cfc
   163a0:	00029d4c 	.word	0x00029d4c
   163a4:	00029d9c 	.word	0x00029d9c
   163a8:	00015f85 	.word	0x00015f85
   163ac:	00015b71 	.word	0x00015b71
   163b0:	00015a41 	.word	0x00015a41
   163b4:	00015b39 	.word	0x00015b39

000163b8 <prvTraceStoreKernelCallWithNumericParamOnly>:
{
   163b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   163ba:	0004      	movs	r4, r0
   163bc:	000d      	movs	r5, r1
	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
   163be:	28fe      	cmp	r0, #254	; 0xfe
   163c0:	d81c      	bhi.n	163fc <prvTraceStoreKernelCallWithNumericParamOnly+0x44>
	if (recorder_busy)
   163c2:	4b1c      	ldr	r3, [pc, #112]	; (16434 <prvTraceStoreKernelCallWithNumericParamOnly+0x7c>)
   163c4:	681b      	ldr	r3, [r3, #0]
   163c6:	2b00      	cmp	r3, #0
   163c8:	d11c      	bne.n	16404 <prvTraceStoreKernelCallWithNumericParamOnly+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   163ca:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   163ce:	2301      	movs	r3, #1
   163d0:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
   163d4:	4a17      	ldr	r2, [pc, #92]	; (16434 <prvTraceStoreKernelCallWithNumericParamOnly+0x7c>)
   163d6:	6813      	ldr	r3, [r2, #0]
   163d8:	3301      	adds	r3, #1
   163da:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
   163dc:	4b16      	ldr	r3, [pc, #88]	; (16438 <prvTraceStoreKernelCallWithNumericParamOnly+0x80>)
   163de:	681b      	ldr	r3, [r3, #0]
   163e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   163e2:	2b00      	cmp	r3, #0
   163e4:	d003      	beq.n	163ee <prvTraceStoreKernelCallWithNumericParamOnly+0x36>
   163e6:	4b15      	ldr	r3, [pc, #84]	; (1643c <prvTraceStoreKernelCallWithNumericParamOnly+0x84>)
   163e8:	781b      	ldrb	r3, [r3, #0]
   163ea:	2b00      	cmp	r3, #0
   163ec:	d10e      	bne.n	1640c <prvTraceStoreKernelCallWithNumericParamOnly+0x54>
	trcCRITICAL_SECTION_END();
   163ee:	4a11      	ldr	r2, [pc, #68]	; (16434 <prvTraceStoreKernelCallWithNumericParamOnly+0x7c>)
   163f0:	6813      	ldr	r3, [r2, #0]
   163f2:	3b01      	subs	r3, #1
   163f4:	6013      	str	r3, [r2, #0]
   163f6:	f386 8810 	msr	PRIMASK, r6
}
   163fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
   163fc:	4810      	ldr	r0, [pc, #64]	; (16440 <prvTraceStoreKernelCallWithNumericParamOnly+0x88>)
   163fe:	4b11      	ldr	r3, [pc, #68]	; (16444 <prvTraceStoreKernelCallWithNumericParamOnly+0x8c>)
   16400:	4798      	blx	r3
   16402:	e7fa      	b.n	163fa <prvTraceStoreKernelCallWithNumericParamOnly+0x42>
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
   16404:	4810      	ldr	r0, [pc, #64]	; (16448 <prvTraceStoreKernelCallWithNumericParamOnly+0x90>)
   16406:	4b0f      	ldr	r3, [pc, #60]	; (16444 <prvTraceStoreKernelCallWithNumericParamOnly+0x8c>)
   16408:	4798      	blx	r3
		return;
   1640a:	e7f6      	b.n	163fa <prvTraceStoreKernelCallWithNumericParamOnly+0x42>
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
   1640c:	20ff      	movs	r0, #255	; 0xff
   1640e:	4b0f      	ldr	r3, [pc, #60]	; (1644c <prvTraceStoreKernelCallWithNumericParamOnly+0x94>)
   16410:	4798      	blx	r3
   16412:	0007      	movs	r7, r0
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
   16414:	0029      	movs	r1, r5
   16416:	480e      	ldr	r0, [pc, #56]	; (16450 <prvTraceStoreKernelCallWithNumericParamOnly+0x98>)
   16418:	4b0e      	ldr	r3, [pc, #56]	; (16454 <prvTraceStoreKernelCallWithNumericParamOnly+0x9c>)
   1641a:	4798      	blx	r3
   1641c:	0005      	movs	r5, r0
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
   1641e:	4b0e      	ldr	r3, [pc, #56]	; (16458 <prvTraceStoreKernelCallWithNumericParamOnly+0xa0>)
   16420:	4798      	blx	r3
		if (kse != NULL)
   16422:	2800      	cmp	r0, #0
   16424:	d0e3      	beq.n	163ee <prvTraceStoreKernelCallWithNumericParamOnly+0x36>
			kse->dts = dts6;
   16426:	7047      	strb	r7, [r0, #1]
			kse->type = (uint8_t)evtcode;
   16428:	7004      	strb	r4, [r0, #0]
			kse->param = restParam;
   1642a:	8045      	strh	r5, [r0, #2]
			prvTraceUpdateCounters();
   1642c:	4b0b      	ldr	r3, [pc, #44]	; (1645c <prvTraceStoreKernelCallWithNumericParamOnly+0xa4>)
   1642e:	4798      	blx	r3
   16430:	e7dd      	b.n	163ee <prvTraceStoreKernelCallWithNumericParamOnly+0x36>
   16432:	46c0      	nop			; (mov r8, r8)
   16434:	20000bdc 	.word	0x20000bdc
   16438:	20000b2c 	.word	0x20000b2c
   1643c:	20000b30 	.word	0x20000b30
   16440:	00029c2c 	.word	0x00029c2c
   16444:	000159e9 	.word	0x000159e9
   16448:	00029c84 	.word	0x00029c84
   1644c:	00015f85 	.word	0x00015f85
   16450:	0000ffff 	.word	0x0000ffff
   16454:	00015b71 	.word	0x00015b71
   16458:	00015a41 	.word	0x00015a41
   1645c:	00015b39 	.word	0x00015b39

00016460 <prvTraceStoreTaskswitch>:
{
   16460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16462:	0004      	movs	r4, r0
	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
   16464:	280f      	cmp	r0, #15
   16466:	d818      	bhi.n	1649a <prvTraceStoreTaskswitch+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   16468:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1646c:	2301      	movs	r3, #1
   1646e:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
   16472:	4a26      	ldr	r2, [pc, #152]	; (1650c <prvTraceStoreTaskswitch+0xac>)
   16474:	6813      	ldr	r3, [r2, #0]
   16476:	3301      	adds	r3, #1
   16478:	6013      	str	r3, [r2, #0]
	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
   1647a:	4b25      	ldr	r3, [pc, #148]	; (16510 <prvTraceStoreTaskswitch+0xb0>)
   1647c:	781b      	ldrb	r3, [r3, #0]
   1647e:	4283      	cmp	r3, r0
   16480:	d004      	beq.n	1648c <prvTraceStoreTaskswitch+0x2c>
   16482:	4b24      	ldr	r3, [pc, #144]	; (16514 <prvTraceStoreTaskswitch+0xb4>)
   16484:	681b      	ldr	r3, [r3, #0]
   16486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   16488:	2b00      	cmp	r3, #0
   1648a:	d10a      	bne.n	164a2 <prvTraceStoreTaskswitch+0x42>
	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
   1648c:	4a1f      	ldr	r2, [pc, #124]	; (1650c <prvTraceStoreTaskswitch+0xac>)
   1648e:	6813      	ldr	r3, [r2, #0]
   16490:	3b01      	subs	r3, #1
   16492:	6013      	str	r3, [r2, #0]
   16494:	f385 8810 	msr	PRIMASK, r5
}
   16498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
   1649a:	481f      	ldr	r0, [pc, #124]	; (16518 <prvTraceStoreTaskswitch+0xb8>)
   1649c:	4b1f      	ldr	r3, [pc, #124]	; (1651c <prvTraceStoreTaskswitch+0xbc>)
   1649e:	4798      	blx	r3
   164a0:	e7fa      	b.n	16498 <prvTraceStoreTaskswitch+0x38>
		isPendingContextSwitch = 0;
   164a2:	2200      	movs	r2, #0
   164a4:	4b1e      	ldr	r3, [pc, #120]	; (16520 <prvTraceStoreTaskswitch+0xc0>)
   164a6:	601a      	str	r2, [r3, #0]
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   164a8:	481e      	ldr	r0, [pc, #120]	; (16524 <prvTraceStoreTaskswitch+0xc4>)
   164aa:	4b1f      	ldr	r3, [pc, #124]	; (16528 <prvTraceStoreTaskswitch+0xc8>)
   164ac:	4798      	blx	r3
   164ae:	0007      	movs	r7, r0
		handle_of_last_logged_task = task_handle;
   164b0:	4b17      	ldr	r3, [pc, #92]	; (16510 <prvTraceStoreTaskswitch+0xb0>)
   164b2:	701c      	strb	r4, [r3, #0]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
   164b4:	4b1d      	ldr	r3, [pc, #116]	; (1652c <prvTraceStoreTaskswitch+0xcc>)
   164b6:	4798      	blx	r3
   164b8:	1e06      	subs	r6, r0, #0
		if (ts != NULL)
   164ba:	d0e7      	beq.n	1648c <prvTraceStoreTaskswitch+0x2c>
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
   164bc:	4b14      	ldr	r3, [pc, #80]	; (16510 <prvTraceStoreTaskswitch+0xb0>)
   164be:	7818      	ldrb	r0, [r3, #0]
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   164c0:	4b14      	ldr	r3, [pc, #80]	; (16514 <prvTraceStoreTaskswitch+0xb4>)
   164c2:	681a      	ldr	r2, [r3, #0]
   164c4:	2367      	movs	r3, #103	; 0x67
   164c6:	5cd3      	ldrb	r3, [r2, r3]
   164c8:	4283      	cmp	r3, r0
   164ca:	d30f      	bcc.n	164ec <prvTraceStoreTaskswitch+0x8c>
	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
   164cc:	2103      	movs	r1, #3
   164ce:	4b18      	ldr	r3, [pc, #96]	; (16530 <prvTraceStoreTaskswitch+0xd0>)
   164d0:	4798      	blx	r3
   164d2:	4b10      	ldr	r3, [pc, #64]	; (16514 <prvTraceStoreTaskswitch+0xb4>)
   164d4:	681b      	ldr	r3, [r3, #0]
   164d6:	2273      	movs	r2, #115	; 0x73
   164d8:	5c9a      	ldrb	r2, [r3, r2]
   164da:	181b      	adds	r3, r3, r0
   164dc:	189b      	adds	r3, r3, r2
   164de:	339c      	adds	r3, #156	; 0x9c
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
   164e0:	781b      	ldrb	r3, [r3, #0]
   164e2:	2b01      	cmp	r3, #1
   164e4:	d105      	bne.n	164f2 <prvTraceStoreTaskswitch+0x92>
				ts->type = TS_TASK_RESUME;
   164e6:	3306      	adds	r3, #6
   164e8:	7033      	strb	r3, [r6, #0]
   164ea:	e004      	b.n	164f6 <prvTraceStoreTaskswitch+0x96>
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   164ec:	4811      	ldr	r0, [pc, #68]	; (16534 <prvTraceStoreTaskswitch+0xd4>)
   164ee:	4b0b      	ldr	r3, [pc, #44]	; (1651c <prvTraceStoreTaskswitch+0xbc>)
   164f0:	4798      	blx	r3
				ts->type = TS_TASK_BEGIN;
   164f2:	2306      	movs	r3, #6
   164f4:	7033      	strb	r3, [r6, #0]
			ts->dts = dts3;
   164f6:	8077      	strh	r7, [r6, #2]
			ts->objHandle = hnd8;
   164f8:	7074      	strb	r4, [r6, #1]
			prvTraceSetObjectState(TRACE_CLASS_TASK,
   164fa:	4b05      	ldr	r3, [pc, #20]	; (16510 <prvTraceStoreTaskswitch+0xb0>)
   164fc:	7819      	ldrb	r1, [r3, #0]
   164fe:	2201      	movs	r2, #1
   16500:	2003      	movs	r0, #3
   16502:	4b0d      	ldr	r3, [pc, #52]	; (16538 <prvTraceStoreTaskswitch+0xd8>)
   16504:	4798      	blx	r3
			prvTraceUpdateCounters();
   16506:	4b0d      	ldr	r3, [pc, #52]	; (1653c <prvTraceStoreTaskswitch+0xdc>)
   16508:	4798      	blx	r3
   1650a:	e7bf      	b.n	1648c <prvTraceStoreTaskswitch+0x2c>
   1650c:	20000bdc 	.word	0x20000bdc
   16510:	20000b30 	.word	0x20000b30
   16514:	20000b2c 	.word	0x20000b2c
   16518:	00029e4c 	.word	0x00029e4c
   1651c:	000159e9 	.word	0x000159e9
   16520:	20000b38 	.word	0x20000b38
   16524:	0000ffff 	.word	0x0000ffff
   16528:	00015f85 	.word	0x00015f85
   1652c:	00015a41 	.word	0x00015a41
   16530:	00015bc5 	.word	0x00015bc5
   16534:	00029e94 	.word	0x00029e94
   16538:	00015cf1 	.word	0x00015cf1
   1653c:	00015b39 	.word	0x00015b39

00016540 <uiTraceStart>:
{
   16540:	b570      	push	{r4, r5, r6, lr}
	if (RecorderDataPtr == NULL)
   16542:	4b20      	ldr	r3, [pc, #128]	; (165c4 <uiTraceStart+0x84>)
   16544:	681b      	ldr	r3, [r3, #0]
   16546:	2b00      	cmp	r3, #0
   16548:	d00a      	beq.n	16560 <uiTraceStart+0x20>
	if (RecorderDataPtr->recorderActive == 1)
   1654a:	6b18      	ldr	r0, [r3, #48]	; 0x30
   1654c:	2801      	cmp	r0, #1
   1654e:	d006      	beq.n	1655e <uiTraceStart+0x1e>
	if (traceErrorMessage == NULL)
   16550:	4b1d      	ldr	r3, [pc, #116]	; (165c8 <uiTraceStart+0x88>)
   16552:	681b      	ldr	r3, [r3, #0]
   16554:	2b00      	cmp	r3, #0
   16556:	d008      	beq.n	1656a <uiTraceStart+0x2a>
	return RecorderDataPtr->recorderActive;
   16558:	4b1a      	ldr	r3, [pc, #104]	; (165c4 <uiTraceStart+0x84>)
   1655a:	681b      	ldr	r3, [r3, #0]
   1655c:	6b18      	ldr	r0, [r3, #48]	; 0x30
}
   1655e:	bd70      	pop	{r4, r5, r6, pc}
		TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized. Use vTraceEnable() instead!", 0);
   16560:	481a      	ldr	r0, [pc, #104]	; (165cc <uiTraceStart+0x8c>)
   16562:	4b1b      	ldr	r3, [pc, #108]	; (165d0 <uiTraceStart+0x90>)
   16564:	4798      	blx	r3
   16566:	2000      	movs	r0, #0
   16568:	e7f9      	b.n	1655e <uiTraceStart+0x1e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1656a:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1656e:	2201      	movs	r2, #1
   16570:	f382 8810 	msr	PRIMASK, r2
		trcCRITICAL_SECTION_BEGIN();
   16574:	4917      	ldr	r1, [pc, #92]	; (165d4 <uiTraceStart+0x94>)
   16576:	680b      	ldr	r3, [r1, #0]
   16578:	3301      	adds	r3, #1
   1657a:	600b      	str	r3, [r1, #0]
		RecorderDataPtr->recorderActive = 1;
   1657c:	4b11      	ldr	r3, [pc, #68]	; (165c4 <uiTraceStart+0x84>)
   1657e:	681b      	ldr	r3, [r3, #0]
   16580:	631a      	str	r2, [r3, #48]	; 0x30
		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
   16582:	4b15      	ldr	r3, [pc, #84]	; (165d8 <uiTraceStart+0x98>)
   16584:	4798      	blx	r3
   16586:	4b15      	ldr	r3, [pc, #84]	; (165dc <uiTraceStart+0x9c>)
   16588:	4798      	blx	r3
   1658a:	b2c4      	uxtb	r4, r0
		if (handle == 0)
   1658c:	2c00      	cmp	r4, #0
   1658e:	d009      	beq.n	165a4 <uiTraceStart+0x64>
		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
   16590:	0020      	movs	r0, r4
   16592:	4b13      	ldr	r3, [pc, #76]	; (165e0 <uiTraceStart+0xa0>)
   16594:	4798      	blx	r3
		trcCRITICAL_SECTION_END();
   16596:	4a0f      	ldr	r2, [pc, #60]	; (165d4 <uiTraceStart+0x94>)
   16598:	6813      	ldr	r3, [r2, #0]
   1659a:	3b01      	subs	r3, #1
   1659c:	6013      	str	r3, [r2, #0]
   1659e:	f385 8810 	msr	PRIMASK, r5
   165a2:	e7d9      	b.n	16558 <uiTraceStart+0x18>
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
   165a4:	2003      	movs	r0, #3
   165a6:	4b0f      	ldr	r3, [pc, #60]	; (165e4 <uiTraceStart+0xa4>)
   165a8:	4798      	blx	r3
   165aa:	0006      	movs	r6, r0
   165ac:	0004      	movs	r4, r0
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
   165ae:	4a0e      	ldr	r2, [pc, #56]	; (165e8 <uiTraceStart+0xa8>)
   165b0:	0001      	movs	r1, r0
   165b2:	2003      	movs	r0, #3
   165b4:	4b0d      	ldr	r3, [pc, #52]	; (165ec <uiTraceStart+0xac>)
   165b6:	4798      	blx	r3
			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
   165b8:	2200      	movs	r2, #0
   165ba:	0031      	movs	r1, r6
   165bc:	2003      	movs	r0, #3
   165be:	4b0c      	ldr	r3, [pc, #48]	; (165f0 <uiTraceStart+0xb0>)
   165c0:	4798      	blx	r3
   165c2:	e7e5      	b.n	16590 <uiTraceStart+0x50>
   165c4:	20000b2c 	.word	0x20000b2c
   165c8:	20000be4 	.word	0x20000be4
   165cc:	00029f50 	.word	0x00029f50
   165d0:	000159e9 	.word	0x000159e9
   165d4:	20000bdc 	.word	0x20000bdc
   165d8:	00015599 	.word	0x00015599
   165dc:	000153d5 	.word	0x000153d5
   165e0:	00016461 	.word	0x00016461
   165e4:	00015d89 	.word	0x00015d89
   165e8:	00029f94 	.word	0x00029f94
   165ec:	00015e5d 	.word	0x00015e5d
   165f0:	00015c3d 	.word	0x00015c3d

000165f4 <vTraceStart>:
{
   165f4:	b510      	push	{r4, lr}
	(void)uiTraceStart();
   165f6:	4b01      	ldr	r3, [pc, #4]	; (165fc <vTraceStart+0x8>)
   165f8:	4798      	blx	r3
}
   165fa:	bd10      	pop	{r4, pc}
   165fc:	00016541 	.word	0x00016541

00016600 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   16600:	0003      	movs	r3, r0
   16602:	3308      	adds	r3, #8
   16604:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   16606:	2201      	movs	r2, #1
   16608:	4252      	negs	r2, r2
   1660a:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1660c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1660e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   16610:	2300      	movs	r3, #0
   16612:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
   16614:	4770      	bx	lr

00016616 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   16616:	2300      	movs	r3, #0
   16618:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
   1661a:	4770      	bx	lr

0001661c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
   1661c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   1661e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   16620:	689a      	ldr	r2, [r3, #8]
   16622:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
   16624:	689a      	ldr	r2, [r3, #8]
   16626:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
   16628:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   1662a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   1662c:	6803      	ldr	r3, [r0, #0]
   1662e:	3301      	adds	r3, #1
   16630:	6003      	str	r3, [r0, #0]
}
   16632:	4770      	bx	lr

00016634 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   16634:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   16636:	680c      	ldr	r4, [r1, #0]
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   16638:	0002      	movs	r2, r0
   1663a:	3208      	adds	r2, #8
	if( xValueOfInsertion == portMAX_DELAY )
   1663c:	1c63      	adds	r3, r4, #1
   1663e:	d102      	bne.n	16646 <vListInsert+0x12>
		pxIterator = pxList->xListEnd.pxPrevious;
   16640:	6902      	ldr	r2, [r0, #16]
   16642:	e004      	b.n	1664e <vListInsert+0x1a>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   16644:	001a      	movs	r2, r3
   16646:	6853      	ldr	r3, [r2, #4]
   16648:	681d      	ldr	r5, [r3, #0]
   1664a:	42ac      	cmp	r4, r5
   1664c:	d2fa      	bcs.n	16644 <vListInsert+0x10>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   1664e:	6853      	ldr	r3, [r2, #4]
   16650:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   16652:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   16654:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
   16656:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   16658:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   1665a:	6803      	ldr	r3, [r0, #0]
   1665c:	3301      	adds	r3, #1
   1665e:	6003      	str	r3, [r0, #0]
}
   16660:	bd30      	pop	{r4, r5, pc}

00016662 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
   16662:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   16664:	6842      	ldr	r2, [r0, #4]
   16666:	6881      	ldr	r1, [r0, #8]
   16668:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   1666a:	6882      	ldr	r2, [r0, #8]
   1666c:	6841      	ldr	r1, [r0, #4]
   1666e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   16670:	685a      	ldr	r2, [r3, #4]
   16672:	4290      	cmp	r0, r2
   16674:	d006      	beq.n	16684 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
   16676:	2200      	movs	r2, #0
   16678:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   1667a:	681a      	ldr	r2, [r3, #0]
   1667c:	3a01      	subs	r2, #1
   1667e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   16680:	6818      	ldr	r0, [r3, #0]
}
   16682:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   16684:	6882      	ldr	r2, [r0, #8]
   16686:	605a      	str	r2, [r3, #4]
   16688:	e7f5      	b.n	16676 <uxListRemove+0x14>
	...

0001668c <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   1668c:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
   1668e:	2300      	movs	r3, #0
   16690:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   16692:	4b06      	ldr	r3, [pc, #24]	; (166ac <prvTaskExitError+0x20>)
   16694:	681b      	ldr	r3, [r3, #0]
   16696:	3301      	adds	r3, #1
   16698:	d001      	beq.n	1669e <prvTaskExitError+0x12>
   1669a:	b672      	cpsid	i
   1669c:	e7fe      	b.n	1669c <prvTaskExitError+0x10>
	portDISABLE_INTERRUPTS();
   1669e:	b672      	cpsid	i
	while( ulDummy == 0 )
   166a0:	9b01      	ldr	r3, [sp, #4]
   166a2:	2b00      	cmp	r3, #0
   166a4:	d0fc      	beq.n	166a0 <prvTaskExitError+0x14>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
   166a6:	b002      	add	sp, #8
   166a8:	4770      	bx	lr
   166aa:	46c0      	nop			; (mov r8, r8)
   166ac:	200000d0 	.word	0x200000d0

000166b0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
   166b0:	4a0b      	ldr	r2, [pc, #44]	; (166e0 <pxCurrentTCBConst2>)
   166b2:	6813      	ldr	r3, [r2, #0]
   166b4:	6818      	ldr	r0, [r3, #0]
   166b6:	3020      	adds	r0, #32
   166b8:	f380 8809 	msr	PSP, r0
   166bc:	2002      	movs	r0, #2
   166be:	f380 8814 	msr	CONTROL, r0
   166c2:	f3bf 8f6f 	isb	sy
   166c6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
   166c8:	46ae      	mov	lr, r5
   166ca:	bc08      	pop	{r3}
   166cc:	bc04      	pop	{r2}
   166ce:	b662      	cpsie	i
   166d0:	4718      	bx	r3
   166d2:	46c0      	nop			; (mov r8, r8)
   166d4:	46c0      	nop			; (mov r8, r8)
   166d6:	46c0      	nop			; (mov r8, r8)
   166d8:	46c0      	nop			; (mov r8, r8)
   166da:	46c0      	nop			; (mov r8, r8)
   166dc:	46c0      	nop			; (mov r8, r8)
   166de:	46c0      	nop			; (mov r8, r8)

000166e0 <pxCurrentTCBConst2>:
   166e0:	20003ae0 	.word	0x20003ae0

000166e4 <pxPortInitialiseStack>:
{
   166e4:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   166e6:	1f03      	subs	r3, r0, #4
   166e8:	2480      	movs	r4, #128	; 0x80
   166ea:	0464      	lsls	r4, r4, #17
   166ec:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
   166ee:	3b04      	subs	r3, #4
   166f0:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   166f2:	3b04      	subs	r3, #4
   166f4:	4902      	ldr	r1, [pc, #8]	; (16700 <pxPortInitialiseStack+0x1c>)
   166f6:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   166f8:	3b14      	subs	r3, #20
   166fa:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
   166fc:	3840      	subs	r0, #64	; 0x40
}
   166fe:	bd10      	pop	{r4, pc}
   16700:	0001668d 	.word	0x0001668d

00016704 <SVC_Handler>:
}
   16704:	4770      	bx	lr
	...

00016708 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
   16708:	b570      	push	{r4, r5, r6, lr}
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
   1670a:	4b13      	ldr	r3, [pc, #76]	; (16758 <xPortStartScheduler+0x50>)
   1670c:	6819      	ldr	r1, [r3, #0]
   1670e:	22ff      	movs	r2, #255	; 0xff
   16710:	0412      	lsls	r2, r2, #16
   16712:	430a      	orrs	r2, r1
   16714:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
   16716:	6819      	ldr	r1, [r3, #0]
   16718:	22ff      	movs	r2, #255	; 0xff
   1671a:	0612      	lsls	r2, r2, #24
   1671c:	430a      	orrs	r2, r1
   1671e:	601a      	str	r2, [r3, #0]
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
   16720:	4d0e      	ldr	r5, [pc, #56]	; (1675c <xPortStartScheduler+0x54>)
   16722:	2400      	movs	r4, #0
   16724:	602c      	str	r4, [r5, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
   16726:	4b0e      	ldr	r3, [pc, #56]	; (16760 <xPortStartScheduler+0x58>)
   16728:	601c      	str	r4, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
   1672a:	2000      	movs	r0, #0
   1672c:	4b0d      	ldr	r3, [pc, #52]	; (16764 <xPortStartScheduler+0x5c>)
   1672e:	4798      	blx	r3
   16730:	21fa      	movs	r1, #250	; 0xfa
   16732:	0089      	lsls	r1, r1, #2
   16734:	4b0c      	ldr	r3, [pc, #48]	; (16768 <xPortStartScheduler+0x60>)
   16736:	4798      	blx	r3
   16738:	3801      	subs	r0, #1
   1673a:	4b0c      	ldr	r3, [pc, #48]	; (1676c <xPortStartScheduler+0x64>)
   1673c:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
   1673e:	2307      	movs	r3, #7
   16740:	602b      	str	r3, [r5, #0]
	uxCriticalNesting = 0;
   16742:	4b0b      	ldr	r3, [pc, #44]	; (16770 <xPortStartScheduler+0x68>)
   16744:	601c      	str	r4, [r3, #0]
	vPortStartFirstTask();
   16746:	4b0b      	ldr	r3, [pc, #44]	; (16774 <xPortStartScheduler+0x6c>)
   16748:	4798      	blx	r3
	vTaskSwitchContext();
   1674a:	4b0b      	ldr	r3, [pc, #44]	; (16778 <xPortStartScheduler+0x70>)
   1674c:	4798      	blx	r3
	prvTaskExitError();
   1674e:	4b0b      	ldr	r3, [pc, #44]	; (1677c <xPortStartScheduler+0x74>)
   16750:	4798      	blx	r3
}
   16752:	2000      	movs	r0, #0
   16754:	bd70      	pop	{r4, r5, r6, pc}
   16756:	46c0      	nop			; (mov r8, r8)
   16758:	e000ed20 	.word	0xe000ed20
   1675c:	e000e010 	.word	0xe000e010
   16760:	e000e018 	.word	0xe000e018
   16764:	0001f021 	.word	0x0001f021
   16768:	00024055 	.word	0x00024055
   1676c:	e000e014 	.word	0xe000e014
   16770:	200000d0 	.word	0x200000d0
   16774:	000166b1 	.word	0x000166b1
   16778:	00018275 	.word	0x00018275
   1677c:	0001668d 	.word	0x0001668d

00016780 <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
   16780:	2280      	movs	r2, #128	; 0x80
   16782:	0552      	lsls	r2, r2, #21
   16784:	4b01      	ldr	r3, [pc, #4]	; (1678c <vPortYield+0xc>)
   16786:	601a      	str	r2, [r3, #0]
}
   16788:	4770      	bx	lr
   1678a:	46c0      	nop			; (mov r8, r8)
   1678c:	e000ed04 	.word	0xe000ed04

00016790 <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
   16790:	b672      	cpsid	i
    uxCriticalNesting++;
   16792:	4a04      	ldr	r2, [pc, #16]	; (167a4 <vPortEnterCritical+0x14>)
   16794:	6813      	ldr	r3, [r2, #0]
   16796:	3301      	adds	r3, #1
   16798:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" ::: "memory" );
   1679a:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   1679e:	f3bf 8f6f 	isb	sy
}
   167a2:	4770      	bx	lr
   167a4:	200000d0 	.word	0x200000d0

000167a8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
   167a8:	4b06      	ldr	r3, [pc, #24]	; (167c4 <vPortExitCritical+0x1c>)
   167aa:	681b      	ldr	r3, [r3, #0]
   167ac:	2b00      	cmp	r3, #0
   167ae:	d101      	bne.n	167b4 <vPortExitCritical+0xc>
   167b0:	b672      	cpsid	i
   167b2:	e7fe      	b.n	167b2 <vPortExitCritical+0xa>
    uxCriticalNesting--;
   167b4:	3b01      	subs	r3, #1
   167b6:	4a03      	ldr	r2, [pc, #12]	; (167c4 <vPortExitCritical+0x1c>)
   167b8:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
   167ba:	2b00      	cmp	r3, #0
   167bc:	d100      	bne.n	167c0 <vPortExitCritical+0x18>
        portENABLE_INTERRUPTS();
   167be:	b662      	cpsie	i
}
   167c0:	4770      	bx	lr
   167c2:	46c0      	nop			; (mov r8, r8)
   167c4:	200000d0 	.word	0x200000d0

000167c8 <ulSetInterruptMaskFromISR>:
	__asm volatile(
   167c8:	f3ef 8010 	mrs	r0, PRIMASK
   167cc:	b672      	cpsid	i
   167ce:	4770      	bx	lr

000167d0 <vClearInterruptMaskFromISR>:
	__asm volatile(
   167d0:	f380 8810 	msr	PRIMASK, r0
   167d4:	4770      	bx	lr
	...

000167e0 <PendSV_Handler>:
	__asm volatile
   167e0:	f3ef 8009 	mrs	r0, PSP
   167e4:	4b0e      	ldr	r3, [pc, #56]	; (16820 <pxCurrentTCBConst>)
   167e6:	681a      	ldr	r2, [r3, #0]
   167e8:	3820      	subs	r0, #32
   167ea:	6010      	str	r0, [r2, #0]
   167ec:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   167ee:	4644      	mov	r4, r8
   167f0:	464d      	mov	r5, r9
   167f2:	4656      	mov	r6, sl
   167f4:	465f      	mov	r7, fp
   167f6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   167f8:	b508      	push	{r3, lr}
   167fa:	b672      	cpsid	i
   167fc:	f001 fd3a 	bl	18274 <vTaskSwitchContext>
   16800:	b662      	cpsie	i
   16802:	bc0c      	pop	{r2, r3}
   16804:	6811      	ldr	r1, [r2, #0]
   16806:	6808      	ldr	r0, [r1, #0]
   16808:	3010      	adds	r0, #16
   1680a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1680c:	46a0      	mov	r8, r4
   1680e:	46a9      	mov	r9, r5
   16810:	46b2      	mov	sl, r6
   16812:	46bb      	mov	fp, r7
   16814:	f380 8809 	msr	PSP, r0
   16818:	3820      	subs	r0, #32
   1681a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1681c:	4718      	bx	r3
   1681e:	46c0      	nop			; (mov r8, r8)

00016820 <pxCurrentTCBConst>:
   16820:	20003ae0 	.word	0x20003ae0

00016824 <SysTick_Handler>:
{
   16824:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
   16826:	4b07      	ldr	r3, [pc, #28]	; (16844 <SysTick_Handler+0x20>)
   16828:	4798      	blx	r3
   1682a:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
   1682c:	4b06      	ldr	r3, [pc, #24]	; (16848 <SysTick_Handler+0x24>)
   1682e:	4798      	blx	r3
   16830:	2800      	cmp	r0, #0
   16832:	d003      	beq.n	1683c <SysTick_Handler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
   16834:	2280      	movs	r2, #128	; 0x80
   16836:	0552      	lsls	r2, r2, #21
   16838:	4b04      	ldr	r3, [pc, #16]	; (1684c <SysTick_Handler+0x28>)
   1683a:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
   1683c:	0020      	movs	r0, r4
   1683e:	4b04      	ldr	r3, [pc, #16]	; (16850 <SysTick_Handler+0x2c>)
   16840:	4798      	blx	r3
}
   16842:	bd10      	pop	{r4, pc}
   16844:	000167c9 	.word	0x000167c9
   16848:	00017f1d 	.word	0x00017f1d
   1684c:	e000ed04 	.word	0xe000ed04
   16850:	000167d1 	.word	0x000167d1

00016854 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   16854:	b570      	push	{r4, r5, r6, lr}
   16856:	0004      	movs	r4, r0
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   16858:	0743      	lsls	r3, r0, #29
   1685a:	d002      	beq.n	16862 <pvPortMalloc+0xe>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   1685c:	2307      	movs	r3, #7
   1685e:	439c      	bics	r4, r3
   16860:	3408      	adds	r4, #8
		}
	}
	#endif

	vTaskSuspendAll();
   16862:	4b18      	ldr	r3, [pc, #96]	; (168c4 <pvPortMalloc+0x70>)
   16864:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
   16866:	4b18      	ldr	r3, [pc, #96]	; (168c8 <pvPortMalloc+0x74>)
   16868:	681b      	ldr	r3, [r3, #0]
   1686a:	2b00      	cmp	r3, #0
   1686c:	d017      	beq.n	1689e <pvPortMalloc+0x4a>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   1686e:	4b17      	ldr	r3, [pc, #92]	; (168cc <pvPortMalloc+0x78>)
   16870:	681a      	ldr	r2, [r3, #0]
   16872:	18a3      	adds	r3, r4, r2
   16874:	4916      	ldr	r1, [pc, #88]	; (168d0 <pvPortMalloc+0x7c>)
   16876:	428b      	cmp	r3, r1
   16878:	d818      	bhi.n	168ac <pvPortMalloc+0x58>
   1687a:	429a      	cmp	r2, r3
   1687c:	d216      	bcs.n	168ac <pvPortMalloc+0x58>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
   1687e:	4912      	ldr	r1, [pc, #72]	; (168c8 <pvPortMalloc+0x74>)
   16880:	680d      	ldr	r5, [r1, #0]
   16882:	18ad      	adds	r5, r5, r2
			xNextFreeByte += xWantedSize;
   16884:	4a11      	ldr	r2, [pc, #68]	; (168cc <pvPortMalloc+0x78>)
   16886:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
   16888:	2d00      	cmp	r5, #0
   1688a:	d00f      	beq.n	168ac <pvPortMalloc+0x58>
   1688c:	0022      	movs	r2, r4
   1688e:	0029      	movs	r1, r5
   16890:	2094      	movs	r0, #148	; 0x94
   16892:	4b10      	ldr	r3, [pc, #64]	; (168d4 <pvPortMalloc+0x80>)
   16894:	4798      	blx	r3
	}
	( void ) xTaskResumeAll();
   16896:	4b10      	ldr	r3, [pc, #64]	; (168d8 <pvPortMalloc+0x84>)
   16898:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
   1689a:	0028      	movs	r0, r5
   1689c:	bd70      	pop	{r4, r5, r6, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
   1689e:	2207      	movs	r2, #7
   168a0:	4b0e      	ldr	r3, [pc, #56]	; (168dc <pvPortMalloc+0x88>)
   168a2:	3308      	adds	r3, #8
   168a4:	4393      	bics	r3, r2
   168a6:	4a08      	ldr	r2, [pc, #32]	; (168c8 <pvPortMalloc+0x74>)
   168a8:	6013      	str	r3, [r2, #0]
   168aa:	e7e0      	b.n	1686e <pvPortMalloc+0x1a>
		traceMALLOC( pvReturn, xWantedSize );
   168ac:	0022      	movs	r2, r4
   168ae:	2100      	movs	r1, #0
   168b0:	20e8      	movs	r0, #232	; 0xe8
   168b2:	4b08      	ldr	r3, [pc, #32]	; (168d4 <pvPortMalloc+0x80>)
   168b4:	4798      	blx	r3
	( void ) xTaskResumeAll();
   168b6:	4b08      	ldr	r3, [pc, #32]	; (168d8 <pvPortMalloc+0x84>)
   168b8:	4798      	blx	r3
			vApplicationMallocFailedHook();
   168ba:	4b09      	ldr	r3, [pc, #36]	; (168e0 <pvPortMalloc+0x8c>)
   168bc:	4798      	blx	r3
   168be:	2500      	movs	r5, #0
	return pvReturn;
   168c0:	e7eb      	b.n	1689a <pvPortMalloc+0x46>
   168c2:	46c0      	nop			; (mov r8, r8)
   168c4:	00017f01 	.word	0x00017f01
   168c8:	20000bf8 	.word	0x20000bf8
   168cc:	20003adc 	.word	0x20003adc
   168d0:	00002ed7 	.word	0x00002ed7
   168d4:	00016151 	.word	0x00016151
   168d8:	000180a9 	.word	0x000180a9
   168dc:	20000bfc 	.word	0x20000bfc
   168e0:	0002402d 	.word	0x0002402d

000168e4 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
   168e4:	2800      	cmp	r0, #0
   168e6:	d001      	beq.n	168ec <vPortFree+0x8>
   168e8:	b672      	cpsid	i
   168ea:	e7fe      	b.n	168ea <vPortFree+0x6>
}
   168ec:	4770      	bx	lr
	...

000168f0 <xPortGetFreeHeapSize>:
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
   168f0:	4b02      	ldr	r3, [pc, #8]	; (168fc <xPortGetFreeHeapSize+0xc>)
   168f2:	681b      	ldr	r3, [r3, #0]
   168f4:	4802      	ldr	r0, [pc, #8]	; (16900 <xPortGetFreeHeapSize+0x10>)
   168f6:	1ac0      	subs	r0, r0, r3
}
   168f8:	4770      	bx	lr
   168fa:	46c0      	nop			; (mov r8, r8)
   168fc:	20003adc 	.word	0x20003adc
   16900:	00002ed8 	.word	0x00002ed8

00016904 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   16904:	b510      	push	{r4, lr}
   16906:	0004      	movs	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
   16908:	4b03      	ldr	r3, [pc, #12]	; (16918 <prvIsQueueEmpty+0x14>)
   1690a:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   1690c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
   1690e:	4b03      	ldr	r3, [pc, #12]	; (1691c <prvIsQueueEmpty+0x18>)
   16910:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   16912:	4260      	negs	r0, r4
   16914:	4160      	adcs	r0, r4

	return xReturn;
}
   16916:	bd10      	pop	{r4, pc}
   16918:	00016791 	.word	0x00016791
   1691c:	000167a9 	.word	0x000167a9

00016920 <prvCopyDataToQueue>:
{
   16920:	b570      	push	{r4, r5, r6, lr}
   16922:	0004      	movs	r4, r0
   16924:	0016      	movs	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   16926:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   16928:	6c02      	ldr	r2, [r0, #64]	; 0x40
   1692a:	2a00      	cmp	r2, #0
   1692c:	d10b      	bne.n	16946 <prvCopyDataToQueue+0x26>
BaseType_t xReturn = pdFALSE;
   1692e:	2000      	movs	r0, #0
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   16930:	6823      	ldr	r3, [r4, #0]
   16932:	4283      	cmp	r3, r0
   16934:	d104      	bne.n	16940 <prvCopyDataToQueue+0x20>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   16936:	6860      	ldr	r0, [r4, #4]
   16938:	4b16      	ldr	r3, [pc, #88]	; (16994 <prvCopyDataToQueue+0x74>)
   1693a:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
   1693c:	2300      	movs	r3, #0
   1693e:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   16940:	3501      	adds	r5, #1
   16942:	63a5      	str	r5, [r4, #56]	; 0x38
}
   16944:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
   16946:	2e00      	cmp	r6, #0
   16948:	d10e      	bne.n	16968 <prvCopyDataToQueue+0x48>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
   1694a:	6880      	ldr	r0, [r0, #8]
   1694c:	4b12      	ldr	r3, [pc, #72]	; (16998 <prvCopyDataToQueue+0x78>)
   1694e:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   16950:	68a3      	ldr	r3, [r4, #8]
   16952:	6c22      	ldr	r2, [r4, #64]	; 0x40
   16954:	4694      	mov	ip, r2
   16956:	4463      	add	r3, ip
   16958:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
   1695a:	2000      	movs	r0, #0
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1695c:	6862      	ldr	r2, [r4, #4]
   1695e:	4293      	cmp	r3, r2
   16960:	d3ee      	bcc.n	16940 <prvCopyDataToQueue+0x20>
			pxQueue->pcWriteTo = pxQueue->pcHead;
   16962:	6823      	ldr	r3, [r4, #0]
   16964:	60a3      	str	r3, [r4, #8]
   16966:	e7eb      	b.n	16940 <prvCopyDataToQueue+0x20>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   16968:	68c0      	ldr	r0, [r0, #12]
   1696a:	4b0b      	ldr	r3, [pc, #44]	; (16998 <prvCopyDataToQueue+0x78>)
   1696c:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
   1696e:	6c23      	ldr	r3, [r4, #64]	; 0x40
   16970:	425b      	negs	r3, r3
   16972:	68e2      	ldr	r2, [r4, #12]
   16974:	18d2      	adds	r2, r2, r3
   16976:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   16978:	6821      	ldr	r1, [r4, #0]
   1697a:	428a      	cmp	r2, r1
   1697c:	d203      	bcs.n	16986 <prvCopyDataToQueue+0x66>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   1697e:	6862      	ldr	r2, [r4, #4]
   16980:	4694      	mov	ip, r2
   16982:	4463      	add	r3, ip
   16984:	60e3      	str	r3, [r4, #12]
BaseType_t xReturn = pdFALSE;
   16986:	2000      	movs	r0, #0
		if( xPosition == queueOVERWRITE )
   16988:	2e02      	cmp	r6, #2
   1698a:	d1d9      	bne.n	16940 <prvCopyDataToQueue+0x20>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1698c:	4285      	cmp	r5, r0
   1698e:	d0d7      	beq.n	16940 <prvCopyDataToQueue+0x20>
				--uxMessagesWaiting;
   16990:	3d01      	subs	r5, #1
   16992:	e7d5      	b.n	16940 <prvCopyDataToQueue+0x20>
   16994:	00018855 	.word	0x00018855
   16998:	00025cd9 	.word	0x00025cd9

0001699c <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
   1699c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1699e:	46ce      	mov	lr, r9
   169a0:	4647      	mov	r7, r8
   169a2:	b580      	push	{r7, lr}
   169a4:	b083      	sub	sp, #12
   169a6:	9001      	str	r0, [sp, #4]
   169a8:	9100      	str	r1, [sp, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
   169aa:	6c84      	ldr	r4, [r0, #72]	; 0x48
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
   169ac:	2c00      	cmp	r4, #0
   169ae:	d005      	beq.n	169bc <prvNotifyQueueSetContainer+0x20>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
   169b0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   169b2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   169b4:	429a      	cmp	r2, r3
   169b6:	d303      	bcc.n	169c0 <prvNotifyQueueSetContainer+0x24>
   169b8:	b672      	cpsid	i
   169ba:	e7fe      	b.n	169ba <prvNotifyQueueSetContainer+0x1e>
		configASSERT( pxQueueSetContainer );
   169bc:	b672      	cpsid	i
   169be:	e7fe      	b.n	169be <prvNotifyQueueSetContainer+0x22>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
   169c0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	BaseType_t xReturn = pdFALSE;
   169c2:	2600      	movs	r6, #0
		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
   169c4:	4293      	cmp	r3, r2
   169c6:	d805      	bhi.n	169d4 <prvNotifyQueueSetContainer+0x38>
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
   169c8:	0030      	movs	r0, r6
   169ca:	b003      	add	sp, #12
   169cc:	bc0c      	pop	{r2, r3}
   169ce:	4690      	mov	r8, r2
   169d0:	4699      	mov	r9, r3
   169d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
   169d4:	2345      	movs	r3, #69	; 0x45
   169d6:	5ce5      	ldrb	r5, [r4, r3]
   169d8:	b26d      	sxtb	r5, r5
			traceQUEUE_SEND( pxQueueSetContainer );
   169da:	4b2c      	ldr	r3, [pc, #176]	; (16a8c <prvNotifyQueueSetContainer+0xf0>)
   169dc:	4798      	blx	r3
   169de:	4b2c      	ldr	r3, [pc, #176]	; (16a90 <prvNotifyQueueSetContainer+0xf4>)
   169e0:	4798      	blx	r3
   169e2:	4b2c      	ldr	r3, [pc, #176]	; (16a94 <prvNotifyQueueSetContainer+0xf8>)
   169e4:	881b      	ldrh	r3, [r3, #0]
   169e6:	4203      	tst	r3, r0
   169e8:	d01e      	beq.n	16a28 <prvNotifyQueueSetContainer+0x8c>
   169ea:	0020      	movs	r0, r4
   169ec:	4b2a      	ldr	r3, [pc, #168]	; (16a98 <prvNotifyQueueSetContainer+0xfc>)
   169ee:	4798      	blx	r3
   169f0:	4b28      	ldr	r3, [pc, #160]	; (16a94 <prvNotifyQueueSetContainer+0xf8>)
   169f2:	881b      	ldrh	r3, [r3, #0]
   169f4:	4203      	tst	r3, r0
   169f6:	d017      	beq.n	16a28 <prvNotifyQueueSetContainer+0x8c>
   169f8:	3625      	adds	r6, #37	; 0x25
   169fa:	9b00      	ldr	r3, [sp, #0]
   169fc:	2b00      	cmp	r3, #0
   169fe:	d106      	bne.n	16a0e <prvNotifyQueueSetContainer+0x72>
   16a00:	0020      	movs	r0, r4
   16a02:	4b26      	ldr	r3, [pc, #152]	; (16a9c <prvNotifyQueueSetContainer+0x100>)
   16a04:	4798      	blx	r3
   16a06:	4b26      	ldr	r3, [pc, #152]	; (16aa0 <prvNotifyQueueSetContainer+0x104>)
   16a08:	5c1e      	ldrb	r6, [r3, r0]
   16a0a:	3620      	adds	r6, #32
   16a0c:	b2f6      	uxtb	r6, r6
   16a0e:	0020      	movs	r0, r4
   16a10:	4b22      	ldr	r3, [pc, #136]	; (16a9c <prvNotifyQueueSetContainer+0x100>)
   16a12:	4798      	blx	r3
   16a14:	4b22      	ldr	r3, [pc, #136]	; (16aa0 <prvNotifyQueueSetContainer+0x104>)
   16a16:	5c1f      	ldrb	r7, [r3, r0]
   16a18:	0020      	movs	r0, r4
   16a1a:	4b22      	ldr	r3, [pc, #136]	; (16aa4 <prvNotifyQueueSetContainer+0x108>)
   16a1c:	4798      	blx	r3
   16a1e:	b2c2      	uxtb	r2, r0
   16a20:	0039      	movs	r1, r7
   16a22:	0030      	movs	r0, r6
   16a24:	4b20      	ldr	r3, [pc, #128]	; (16aa8 <prvNotifyQueueSetContainer+0x10c>)
   16a26:	4798      	blx	r3
   16a28:	0020      	movs	r0, r4
   16a2a:	4f1c      	ldr	r7, [pc, #112]	; (16a9c <prvNotifyQueueSetContainer+0x100>)
   16a2c:	47b8      	blx	r7
   16a2e:	4e1c      	ldr	r6, [pc, #112]	; (16aa0 <prvNotifyQueueSetContainer+0x104>)
   16a30:	5c33      	ldrb	r3, [r6, r0]
   16a32:	4698      	mov	r8, r3
   16a34:	0020      	movs	r0, r4
   16a36:	4b1b      	ldr	r3, [pc, #108]	; (16aa4 <prvNotifyQueueSetContainer+0x108>)
   16a38:	4798      	blx	r3
   16a3a:	b2c3      	uxtb	r3, r0
   16a3c:	4699      	mov	r9, r3
   16a3e:	0020      	movs	r0, r4
   16a40:	47b8      	blx	r7
   16a42:	5c33      	ldrb	r3, [r6, r0]
   16a44:	2b02      	cmp	r3, #2
   16a46:	d019      	beq.n	16a7c <prvNotifyQueueSetContainer+0xe0>
   16a48:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   16a4a:	3201      	adds	r2, #1
   16a4c:	b2d2      	uxtb	r2, r2
   16a4e:	4649      	mov	r1, r9
   16a50:	4640      	mov	r0, r8
   16a52:	4b16      	ldr	r3, [pc, #88]	; (16aac <prvNotifyQueueSetContainer+0x110>)
   16a54:	4798      	blx	r3
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
   16a56:	9a00      	ldr	r2, [sp, #0]
   16a58:	a901      	add	r1, sp, #4
   16a5a:	0020      	movs	r0, r4
   16a5c:	4b14      	ldr	r3, [pc, #80]	; (16ab0 <prvNotifyQueueSetContainer+0x114>)
   16a5e:	4798      	blx	r3
   16a60:	0006      	movs	r6, r0
			if( cTxLock == queueUNLOCKED )
   16a62:	1c6b      	adds	r3, r5, #1
   16a64:	d10c      	bne.n	16a80 <prvNotifyQueueSetContainer+0xe4>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
   16a66:	6a63      	ldr	r3, [r4, #36]	; 0x24
   16a68:	2b00      	cmp	r3, #0
   16a6a:	d0ad      	beq.n	169c8 <prvNotifyQueueSetContainer+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
   16a6c:	0020      	movs	r0, r4
   16a6e:	3024      	adds	r0, #36	; 0x24
   16a70:	4b10      	ldr	r3, [pc, #64]	; (16ab4 <prvNotifyQueueSetContainer+0x118>)
   16a72:	4798      	blx	r3
   16a74:	2800      	cmp	r0, #0
   16a76:	d0a7      	beq.n	169c8 <prvNotifyQueueSetContainer+0x2c>
						xReturn = pdTRUE;
   16a78:	2601      	movs	r6, #1
   16a7a:	e7a5      	b.n	169c8 <prvNotifyQueueSetContainer+0x2c>
			traceQUEUE_SEND( pxQueueSetContainer );
   16a7c:	2200      	movs	r2, #0
   16a7e:	e7e6      	b.n	16a4e <prvNotifyQueueSetContainer+0xb2>
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
   16a80:	3501      	adds	r5, #1
   16a82:	b26d      	sxtb	r5, r5
   16a84:	2345      	movs	r3, #69	; 0x45
   16a86:	54e5      	strb	r5, [r4, r3]
   16a88:	e79e      	b.n	169c8 <prvNotifyQueueSetContainer+0x2c>
   16a8a:	46c0      	nop			; (mov r8, r8)
   16a8c:	00015599 	.word	0x00015599
   16a90:	000153e5 	.word	0x000153e5
   16a94:	200000c8 	.word	0x200000c8
   16a98:	00015449 	.word	0x00015449
   16a9c:	000153c9 	.word	0x000153c9
   16aa0:	200000c0 	.word	0x200000c0
   16aa4:	00015439 	.word	0x00015439
   16aa8:	0001621d 	.word	0x0001621d
   16aac:	00015cf1 	.word	0x00015cf1
   16ab0:	00016921 	.word	0x00016921
   16ab4:	00018559 	.word	0x00018559

00016ab8 <prvCopyDataFromQueue>:
{
   16ab8:	b510      	push	{r4, lr}
   16aba:	000c      	movs	r4, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   16abc:	6c02      	ldr	r2, [r0, #64]	; 0x40
   16abe:	2a00      	cmp	r2, #0
   16ac0:	d00b      	beq.n	16ada <prvCopyDataFromQueue+0x22>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
   16ac2:	68c3      	ldr	r3, [r0, #12]
   16ac4:	189b      	adds	r3, r3, r2
   16ac6:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   16ac8:	6841      	ldr	r1, [r0, #4]
   16aca:	428b      	cmp	r3, r1
   16acc:	d301      	bcc.n	16ad2 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
   16ace:	6803      	ldr	r3, [r0, #0]
   16ad0:	60c3      	str	r3, [r0, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
   16ad2:	68c1      	ldr	r1, [r0, #12]
   16ad4:	0020      	movs	r0, r4
   16ad6:	4b01      	ldr	r3, [pc, #4]	; (16adc <prvCopyDataFromQueue+0x24>)
   16ad8:	4798      	blx	r3
}
   16ada:	bd10      	pop	{r4, pc}
   16adc:	00025cd9 	.word	0x00025cd9

00016ae0 <prvUnlockQueue>:
{
   16ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16ae2:	0007      	movs	r7, r0
	taskENTER_CRITICAL();
   16ae4:	4b25      	ldr	r3, [pc, #148]	; (16b7c <prvUnlockQueue+0x9c>)
   16ae6:	4798      	blx	r3
		int8_t cTxLock = pxQueue->cTxLock;
   16ae8:	2345      	movs	r3, #69	; 0x45
   16aea:	5cfc      	ldrb	r4, [r7, r3]
   16aec:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
   16aee:	2c00      	cmp	r4, #0
   16af0:	dd1c      	ble.n	16b2c <prvUnlockQueue+0x4c>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   16af2:	4e23      	ldr	r6, [pc, #140]	; (16b80 <prvUnlockQueue+0xa0>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   16af4:	4d23      	ldr	r5, [pc, #140]	; (16b84 <prvUnlockQueue+0xa4>)
   16af6:	e00b      	b.n	16b10 <prvUnlockQueue+0x30>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   16af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16afa:	2b00      	cmp	r3, #0
   16afc:	d016      	beq.n	16b2c <prvUnlockQueue+0x4c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   16afe:	0038      	movs	r0, r7
   16b00:	3024      	adds	r0, #36	; 0x24
   16b02:	47a8      	blx	r5
   16b04:	2800      	cmp	r0, #0
   16b06:	d10e      	bne.n	16b26 <prvUnlockQueue+0x46>
   16b08:	3c01      	subs	r4, #1
   16b0a:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
   16b0c:	2c00      	cmp	r4, #0
   16b0e:	d00d      	beq.n	16b2c <prvUnlockQueue+0x4c>
				if( pxQueue->pxQueueSetContainer != NULL )
   16b10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   16b12:	2b00      	cmp	r3, #0
   16b14:	d0f0      	beq.n	16af8 <prvUnlockQueue+0x18>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   16b16:	2100      	movs	r1, #0
   16b18:	0038      	movs	r0, r7
   16b1a:	47b0      	blx	r6
   16b1c:	2800      	cmp	r0, #0
   16b1e:	d0f3      	beq.n	16b08 <prvUnlockQueue+0x28>
						vTaskMissedYield();
   16b20:	4b19      	ldr	r3, [pc, #100]	; (16b88 <prvUnlockQueue+0xa8>)
   16b22:	4798      	blx	r3
   16b24:	e7f0      	b.n	16b08 <prvUnlockQueue+0x28>
							vTaskMissedYield();
   16b26:	4b18      	ldr	r3, [pc, #96]	; (16b88 <prvUnlockQueue+0xa8>)
   16b28:	4798      	blx	r3
   16b2a:	e7ed      	b.n	16b08 <prvUnlockQueue+0x28>
		pxQueue->cTxLock = queueUNLOCKED;
   16b2c:	22ff      	movs	r2, #255	; 0xff
   16b2e:	2345      	movs	r3, #69	; 0x45
   16b30:	54fa      	strb	r2, [r7, r3]
	taskEXIT_CRITICAL();
   16b32:	4b16      	ldr	r3, [pc, #88]	; (16b8c <prvUnlockQueue+0xac>)
   16b34:	4798      	blx	r3
	taskENTER_CRITICAL();
   16b36:	4b11      	ldr	r3, [pc, #68]	; (16b7c <prvUnlockQueue+0x9c>)
   16b38:	4798      	blx	r3
		int8_t cRxLock = pxQueue->cRxLock;
   16b3a:	2344      	movs	r3, #68	; 0x44
   16b3c:	5cfc      	ldrb	r4, [r7, r3]
   16b3e:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
   16b40:	2c00      	cmp	r4, #0
   16b42:	dd14      	ble.n	16b6e <prvUnlockQueue+0x8e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   16b44:	693b      	ldr	r3, [r7, #16]
   16b46:	2b00      	cmp	r3, #0
   16b48:	d011      	beq.n	16b6e <prvUnlockQueue+0x8e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   16b4a:	003d      	movs	r5, r7
   16b4c:	3510      	adds	r5, #16
   16b4e:	4e0d      	ldr	r6, [pc, #52]	; (16b84 <prvUnlockQueue+0xa4>)
   16b50:	e006      	b.n	16b60 <prvUnlockQueue+0x80>
   16b52:	3c01      	subs	r4, #1
   16b54:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
   16b56:	2c00      	cmp	r4, #0
   16b58:	d009      	beq.n	16b6e <prvUnlockQueue+0x8e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   16b5a:	693b      	ldr	r3, [r7, #16]
   16b5c:	2b00      	cmp	r3, #0
   16b5e:	d006      	beq.n	16b6e <prvUnlockQueue+0x8e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   16b60:	0028      	movs	r0, r5
   16b62:	47b0      	blx	r6
   16b64:	2800      	cmp	r0, #0
   16b66:	d0f4      	beq.n	16b52 <prvUnlockQueue+0x72>
					vTaskMissedYield();
   16b68:	4b07      	ldr	r3, [pc, #28]	; (16b88 <prvUnlockQueue+0xa8>)
   16b6a:	4798      	blx	r3
   16b6c:	e7f1      	b.n	16b52 <prvUnlockQueue+0x72>
		pxQueue->cRxLock = queueUNLOCKED;
   16b6e:	22ff      	movs	r2, #255	; 0xff
   16b70:	2344      	movs	r3, #68	; 0x44
   16b72:	54fa      	strb	r2, [r7, r3]
	taskEXIT_CRITICAL();
   16b74:	4b05      	ldr	r3, [pc, #20]	; (16b8c <prvUnlockQueue+0xac>)
   16b76:	4798      	blx	r3
}
   16b78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16b7a:	46c0      	nop			; (mov r8, r8)
   16b7c:	00016791 	.word	0x00016791
   16b80:	0001699d 	.word	0x0001699d
   16b84:	00018559 	.word	0x00018559
   16b88:	000186c5 	.word	0x000186c5
   16b8c:	000167a9 	.word	0x000167a9

00016b90 <xQueueGenericReset>:
{
   16b90:	b570      	push	{r4, r5, r6, lr}
   16b92:	0004      	movs	r4, r0
   16b94:	000d      	movs	r5, r1
	configASSERT( pxQueue );
   16b96:	2800      	cmp	r0, #0
   16b98:	d021      	beq.n	16bde <xQueueGenericReset+0x4e>
	taskENTER_CRITICAL();
   16b9a:	4b17      	ldr	r3, [pc, #92]	; (16bf8 <xQueueGenericReset+0x68>)
   16b9c:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   16b9e:	6822      	ldr	r2, [r4, #0]
   16ba0:	6c21      	ldr	r1, [r4, #64]	; 0x40
   16ba2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   16ba4:	434b      	muls	r3, r1
   16ba6:	18d0      	adds	r0, r2, r3
   16ba8:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   16baa:	2000      	movs	r0, #0
   16bac:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   16bae:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
   16bb0:	1a5b      	subs	r3, r3, r1
   16bb2:	18d3      	adds	r3, r2, r3
   16bb4:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
   16bb6:	23ff      	movs	r3, #255	; 0xff
   16bb8:	2244      	movs	r2, #68	; 0x44
   16bba:	54a3      	strb	r3, [r4, r2]
		pxQueue->cTxLock = queueUNLOCKED;
   16bbc:	3201      	adds	r2, #1
   16bbe:	54a3      	strb	r3, [r4, r2]
		if( xNewQueue == pdFALSE )
   16bc0:	2d00      	cmp	r5, #0
   16bc2:	d111      	bne.n	16be8 <xQueueGenericReset+0x58>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   16bc4:	6923      	ldr	r3, [r4, #16]
   16bc6:	2b00      	cmp	r3, #0
   16bc8:	d005      	beq.n	16bd6 <xQueueGenericReset+0x46>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   16bca:	0020      	movs	r0, r4
   16bcc:	3010      	adds	r0, #16
   16bce:	4b0b      	ldr	r3, [pc, #44]	; (16bfc <xQueueGenericReset+0x6c>)
   16bd0:	4798      	blx	r3
   16bd2:	2800      	cmp	r0, #0
   16bd4:	d105      	bne.n	16be2 <xQueueGenericReset+0x52>
	taskEXIT_CRITICAL();
   16bd6:	4b0a      	ldr	r3, [pc, #40]	; (16c00 <xQueueGenericReset+0x70>)
   16bd8:	4798      	blx	r3
}
   16bda:	2001      	movs	r0, #1
   16bdc:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxQueue );
   16bde:	b672      	cpsid	i
   16be0:	e7fe      	b.n	16be0 <xQueueGenericReset+0x50>
					queueYIELD_IF_USING_PREEMPTION();
   16be2:	4b08      	ldr	r3, [pc, #32]	; (16c04 <xQueueGenericReset+0x74>)
   16be4:	4798      	blx	r3
   16be6:	e7f6      	b.n	16bd6 <xQueueGenericReset+0x46>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   16be8:	0020      	movs	r0, r4
   16bea:	3010      	adds	r0, #16
   16bec:	4d06      	ldr	r5, [pc, #24]	; (16c08 <xQueueGenericReset+0x78>)
   16bee:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   16bf0:	0020      	movs	r0, r4
   16bf2:	3024      	adds	r0, #36	; 0x24
   16bf4:	47a8      	blx	r5
   16bf6:	e7ee      	b.n	16bd6 <xQueueGenericReset+0x46>
   16bf8:	00016791 	.word	0x00016791
   16bfc:	00018559 	.word	0x00018559
   16c00:	000167a9 	.word	0x000167a9
   16c04:	00016781 	.word	0x00016781
   16c08:	00016601 	.word	0x00016601

00016c0c <xQueueGenericCreate>:
	{
   16c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16c0e:	0006      	movs	r6, r0
   16c10:	000d      	movs	r5, r1
   16c12:	0017      	movs	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
   16c14:	2800      	cmp	r0, #0
   16c16:	d101      	bne.n	16c1c <xQueueGenericCreate+0x10>
   16c18:	b672      	cpsid	i
   16c1a:	e7fe      	b.n	16c1a <xQueueGenericCreate+0xe>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   16c1c:	0008      	movs	r0, r1
   16c1e:	4370      	muls	r0, r6
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
   16c20:	3054      	adds	r0, #84	; 0x54
   16c22:	4b38      	ldr	r3, [pc, #224]	; (16d04 <xQueueGenericCreate+0xf8>)
   16c24:	4798      	blx	r3
   16c26:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
   16c28:	d05b      	beq.n	16ce2 <xQueueGenericCreate+0xd6>
	if( uxItemSize == ( UBaseType_t ) 0 )
   16c2a:	2d00      	cmp	r5, #0
   16c2c:	d13b      	bne.n	16ca6 <xQueueGenericCreate+0x9a>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
   16c2e:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
   16c30:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
   16c32:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   16c34:	2101      	movs	r1, #1
   16c36:	0020      	movs	r0, r4
   16c38:	4b33      	ldr	r3, [pc, #204]	; (16d08 <xQueueGenericCreate+0xfc>)
   16c3a:	4798      	blx	r3
		pxNewQueue->ucQueueType = ucQueueType;
   16c3c:	2350      	movs	r3, #80	; 0x50
   16c3e:	54e7      	strb	r7, [r4, r3]
		pxNewQueue->pxQueueSetContainer = NULL;
   16c40:	2300      	movs	r3, #0
   16c42:	64a3      	str	r3, [r4, #72]	; 0x48
	traceQUEUE_CREATE( pxNewQueue );
   16c44:	0020      	movs	r0, r4
   16c46:	4e31      	ldr	r6, [pc, #196]	; (16d0c <xQueueGenericCreate+0x100>)
   16c48:	47b0      	blx	r6
   16c4a:	4d31      	ldr	r5, [pc, #196]	; (16d10 <xQueueGenericCreate+0x104>)
   16c4c:	5c28      	ldrb	r0, [r5, r0]
   16c4e:	4b31      	ldr	r3, [pc, #196]	; (16d14 <xQueueGenericCreate+0x108>)
   16c50:	4798      	blx	r3
   16c52:	b281      	uxth	r1, r0
   16c54:	0020      	movs	r0, r4
   16c56:	4b30      	ldr	r3, [pc, #192]	; (16d18 <xQueueGenericCreate+0x10c>)
   16c58:	4798      	blx	r3
   16c5a:	4b30      	ldr	r3, [pc, #192]	; (16d1c <xQueueGenericCreate+0x110>)
   16c5c:	8819      	ldrh	r1, [r3, #0]
   16c5e:	0020      	movs	r0, r4
   16c60:	4b2f      	ldr	r3, [pc, #188]	; (16d20 <xQueueGenericCreate+0x114>)
   16c62:	4798      	blx	r3
   16c64:	0020      	movs	r0, r4
   16c66:	47b0      	blx	r6
   16c68:	5c2d      	ldrb	r5, [r5, r0]
   16c6a:	0020      	movs	r0, r4
   16c6c:	4b2d      	ldr	r3, [pc, #180]	; (16d24 <xQueueGenericCreate+0x118>)
   16c6e:	4798      	blx	r3
   16c70:	b2c1      	uxtb	r1, r0
   16c72:	0028      	movs	r0, r5
   16c74:	4b2c      	ldr	r3, [pc, #176]	; (16d28 <xQueueGenericCreate+0x11c>)
   16c76:	4798      	blx	r3
   16c78:	4b2c      	ldr	r3, [pc, #176]	; (16d2c <xQueueGenericCreate+0x120>)
   16c7a:	4798      	blx	r3
   16c7c:	4b2c      	ldr	r3, [pc, #176]	; (16d30 <xQueueGenericCreate+0x124>)
   16c7e:	4798      	blx	r3
   16c80:	4b2c      	ldr	r3, [pc, #176]	; (16d34 <xQueueGenericCreate+0x128>)
   16c82:	881b      	ldrh	r3, [r3, #0]
   16c84:	4203      	tst	r3, r0
   16c86:	d112      	bne.n	16cae <xQueueGenericCreate+0xa2>
   16c88:	0020      	movs	r0, r4
   16c8a:	4b20      	ldr	r3, [pc, #128]	; (16d0c <xQueueGenericCreate+0x100>)
   16c8c:	4798      	blx	r3
   16c8e:	4b20      	ldr	r3, [pc, #128]	; (16d10 <xQueueGenericCreate+0x104>)
   16c90:	5c1d      	ldrb	r5, [r3, r0]
   16c92:	0020      	movs	r0, r4
   16c94:	4b23      	ldr	r3, [pc, #140]	; (16d24 <xQueueGenericCreate+0x118>)
   16c96:	4798      	blx	r3
   16c98:	b2c1      	uxtb	r1, r0
   16c9a:	2200      	movs	r2, #0
   16c9c:	0028      	movs	r0, r5
   16c9e:	4b26      	ldr	r3, [pc, #152]	; (16d38 <xQueueGenericCreate+0x12c>)
   16ca0:	4798      	blx	r3
	}
   16ca2:	0020      	movs	r0, r4
   16ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
   16ca6:	0003      	movs	r3, r0
   16ca8:	3354      	adds	r3, #84	; 0x54
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
   16caa:	6003      	str	r3, [r0, #0]
   16cac:	e7c0      	b.n	16c30 <xQueueGenericCreate+0x24>
	traceQUEUE_CREATE( pxNewQueue );
   16cae:	0020      	movs	r0, r4
   16cb0:	4b22      	ldr	r3, [pc, #136]	; (16d3c <xQueueGenericCreate+0x130>)
   16cb2:	4798      	blx	r3
   16cb4:	4b1f      	ldr	r3, [pc, #124]	; (16d34 <xQueueGenericCreate+0x128>)
   16cb6:	881b      	ldrh	r3, [r3, #0]
   16cb8:	4203      	tst	r3, r0
   16cba:	d0e5      	beq.n	16c88 <xQueueGenericCreate+0x7c>
   16cbc:	0020      	movs	r0, r4
   16cbe:	4f13      	ldr	r7, [pc, #76]	; (16d0c <xQueueGenericCreate+0x100>)
   16cc0:	47b8      	blx	r7
   16cc2:	4e13      	ldr	r6, [pc, #76]	; (16d10 <xQueueGenericCreate+0x104>)
   16cc4:	5c35      	ldrb	r5, [r6, r0]
   16cc6:	3518      	adds	r5, #24
   16cc8:	b2ed      	uxtb	r5, r5
   16cca:	0020      	movs	r0, r4
   16ccc:	47b8      	blx	r7
   16cce:	5c36      	ldrb	r6, [r6, r0]
   16cd0:	0020      	movs	r0, r4
   16cd2:	4b14      	ldr	r3, [pc, #80]	; (16d24 <xQueueGenericCreate+0x118>)
   16cd4:	4798      	blx	r3
   16cd6:	b2c2      	uxtb	r2, r0
   16cd8:	0031      	movs	r1, r6
   16cda:	0028      	movs	r0, r5
   16cdc:	4b18      	ldr	r3, [pc, #96]	; (16d40 <xQueueGenericCreate+0x134>)
   16cde:	4798      	blx	r3
   16ce0:	e7d2      	b.n	16c88 <xQueueGenericCreate+0x7c>
			traceQUEUE_CREATE_FAILED( ucQueueType );
   16ce2:	4b12      	ldr	r3, [pc, #72]	; (16d2c <xQueueGenericCreate+0x120>)
   16ce4:	4798      	blx	r3
   16ce6:	4b12      	ldr	r3, [pc, #72]	; (16d30 <xQueueGenericCreate+0x124>)
   16ce8:	4798      	blx	r3
   16cea:	4b12      	ldr	r3, [pc, #72]	; (16d34 <xQueueGenericCreate+0x128>)
   16cec:	881b      	ldrh	r3, [r3, #0]
   16cee:	4203      	tst	r3, r0
   16cf0:	d0d7      	beq.n	16ca2 <xQueueGenericCreate+0x96>
   16cf2:	4b07      	ldr	r3, [pc, #28]	; (16d10 <xQueueGenericCreate+0x104>)
   16cf4:	5dd8      	ldrb	r0, [r3, r7]
   16cf6:	3040      	adds	r0, #64	; 0x40
   16cf8:	b2c0      	uxtb	r0, r0
   16cfa:	2100      	movs	r1, #0
   16cfc:	4b11      	ldr	r3, [pc, #68]	; (16d44 <xQueueGenericCreate+0x138>)
   16cfe:	4798      	blx	r3
   16d00:	e7cf      	b.n	16ca2 <xQueueGenericCreate+0x96>
   16d02:	46c0      	nop			; (mov r8, r8)
   16d04:	00016855 	.word	0x00016855
   16d08:	00016b91 	.word	0x00016b91
   16d0c:	000153c9 	.word	0x000153c9
   16d10:	200000c0 	.word	0x200000c0
   16d14:	00015d89 	.word	0x00015d89
   16d18:	00015459 	.word	0x00015459
   16d1c:	200000c6 	.word	0x200000c6
   16d20:	00015479 	.word	0x00015479
   16d24:	00015439 	.word	0x00015439
   16d28:	00015c19 	.word	0x00015c19
   16d2c:	00015599 	.word	0x00015599
   16d30:	000153e5 	.word	0x000153e5
   16d34:	200000c8 	.word	0x200000c8
   16d38:	00015cf1 	.word	0x00015cf1
   16d3c:	00015449 	.word	0x00015449
   16d40:	0001621d 	.word	0x0001621d
   16d44:	000163b9 	.word	0x000163b9

00016d48 <xQueueGenericSend>:
{
   16d48:	b5f0      	push	{r4, r5, r6, r7, lr}
   16d4a:	46ce      	mov	lr, r9
   16d4c:	4647      	mov	r7, r8
   16d4e:	b580      	push	{r7, lr}
   16d50:	b085      	sub	sp, #20
   16d52:	0004      	movs	r4, r0
   16d54:	9100      	str	r1, [sp, #0]
   16d56:	9201      	str	r2, [sp, #4]
   16d58:	001d      	movs	r5, r3
	configASSERT( pxQueue );
   16d5a:	2800      	cmp	r0, #0
   16d5c:	d00d      	beq.n	16d7a <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   16d5e:	9b00      	ldr	r3, [sp, #0]
   16d60:	2b00      	cmp	r3, #0
   16d62:	d00c      	beq.n	16d7e <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   16d64:	2d02      	cmp	r5, #2
   16d66:	d00f      	beq.n	16d88 <xQueueGenericSend+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   16d68:	4bab      	ldr	r3, [pc, #684]	; (17018 <xQueueGenericSend+0x2d0>)
   16d6a:	4798      	blx	r3
   16d6c:	2800      	cmp	r0, #0
   16d6e:	d110      	bne.n	16d92 <xQueueGenericSend+0x4a>
   16d70:	9b01      	ldr	r3, [sp, #4]
   16d72:	2b00      	cmp	r3, #0
   16d74:	d010      	beq.n	16d98 <xQueueGenericSend+0x50>
   16d76:	b672      	cpsid	i
   16d78:	e7fe      	b.n	16d78 <xQueueGenericSend+0x30>
	configASSERT( pxQueue );
   16d7a:	b672      	cpsid	i
   16d7c:	e7fe      	b.n	16d7c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   16d7e:	6c03      	ldr	r3, [r0, #64]	; 0x40
   16d80:	2b00      	cmp	r3, #0
   16d82:	d0ef      	beq.n	16d64 <xQueueGenericSend+0x1c>
   16d84:	b672      	cpsid	i
   16d86:	e7fe      	b.n	16d86 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   16d88:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   16d8a:	2b01      	cmp	r3, #1
   16d8c:	d0ec      	beq.n	16d68 <xQueueGenericSend+0x20>
   16d8e:	b672      	cpsid	i
   16d90:	e7fe      	b.n	16d90 <xQueueGenericSend+0x48>
   16d92:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
   16d94:	4ea1      	ldr	r6, [pc, #644]	; (1701c <xQueueGenericSend+0x2d4>)
   16d96:	e0bc      	b.n	16f12 <xQueueGenericSend+0x1ca>
   16d98:	2700      	movs	r7, #0
   16d9a:	e7fb      	b.n	16d94 <xQueueGenericSend+0x4c>
				traceQUEUE_SEND( pxQueue );
   16d9c:	4ba0      	ldr	r3, [pc, #640]	; (17020 <xQueueGenericSend+0x2d8>)
   16d9e:	4798      	blx	r3
   16da0:	4ba0      	ldr	r3, [pc, #640]	; (17024 <xQueueGenericSend+0x2dc>)
   16da2:	4798      	blx	r3
   16da4:	4ba0      	ldr	r3, [pc, #640]	; (17028 <xQueueGenericSend+0x2e0>)
   16da6:	881b      	ldrh	r3, [r3, #0]
   16da8:	4203      	tst	r3, r0
   16daa:	d01d      	beq.n	16de8 <xQueueGenericSend+0xa0>
   16dac:	0020      	movs	r0, r4
   16dae:	4b9f      	ldr	r3, [pc, #636]	; (1702c <xQueueGenericSend+0x2e4>)
   16db0:	4798      	blx	r3
   16db2:	4b9d      	ldr	r3, [pc, #628]	; (17028 <xQueueGenericSend+0x2e0>)
   16db4:	881b      	ldrh	r3, [r3, #0]
   16db6:	4203      	tst	r3, r0
   16db8:	d016      	beq.n	16de8 <xQueueGenericSend+0xa0>
   16dba:	2725      	movs	r7, #37	; 0x25
   16dbc:	2d00      	cmp	r5, #0
   16dbe:	d106      	bne.n	16dce <xQueueGenericSend+0x86>
   16dc0:	0020      	movs	r0, r4
   16dc2:	4b9b      	ldr	r3, [pc, #620]	; (17030 <xQueueGenericSend+0x2e8>)
   16dc4:	4798      	blx	r3
   16dc6:	4b9b      	ldr	r3, [pc, #620]	; (17034 <xQueueGenericSend+0x2ec>)
   16dc8:	5c1f      	ldrb	r7, [r3, r0]
   16dca:	3720      	adds	r7, #32
   16dcc:	b2ff      	uxtb	r7, r7
   16dce:	0020      	movs	r0, r4
   16dd0:	4b97      	ldr	r3, [pc, #604]	; (17030 <xQueueGenericSend+0x2e8>)
   16dd2:	4798      	blx	r3
   16dd4:	4b97      	ldr	r3, [pc, #604]	; (17034 <xQueueGenericSend+0x2ec>)
   16dd6:	5c1e      	ldrb	r6, [r3, r0]
   16dd8:	0020      	movs	r0, r4
   16dda:	4b97      	ldr	r3, [pc, #604]	; (17038 <xQueueGenericSend+0x2f0>)
   16ddc:	4798      	blx	r3
   16dde:	b2c2      	uxtb	r2, r0
   16de0:	0031      	movs	r1, r6
   16de2:	0038      	movs	r0, r7
   16de4:	4b95      	ldr	r3, [pc, #596]	; (1703c <xQueueGenericSend+0x2f4>)
   16de6:	4798      	blx	r3
   16de8:	0020      	movs	r0, r4
   16dea:	4e91      	ldr	r6, [pc, #580]	; (17030 <xQueueGenericSend+0x2e8>)
   16dec:	47b0      	blx	r6
   16dee:	4f91      	ldr	r7, [pc, #580]	; (17034 <xQueueGenericSend+0x2ec>)
   16df0:	5c3b      	ldrb	r3, [r7, r0]
   16df2:	4698      	mov	r8, r3
   16df4:	0020      	movs	r0, r4
   16df6:	4b90      	ldr	r3, [pc, #576]	; (17038 <xQueueGenericSend+0x2f0>)
   16df8:	4798      	blx	r3
   16dfa:	b2c3      	uxtb	r3, r0
   16dfc:	4699      	mov	r9, r3
   16dfe:	0020      	movs	r0, r4
   16e00:	47b0      	blx	r6
   16e02:	5c3b      	ldrb	r3, [r7, r0]
   16e04:	2b02      	cmp	r3, #2
   16e06:	d01f      	beq.n	16e48 <xQueueGenericSend+0x100>
   16e08:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   16e0a:	3201      	adds	r2, #1
   16e0c:	b2d2      	uxtb	r2, r2
   16e0e:	4649      	mov	r1, r9
   16e10:	4640      	mov	r0, r8
   16e12:	4b8b      	ldr	r3, [pc, #556]	; (17040 <xQueueGenericSend+0x2f8>)
   16e14:	4798      	blx	r3
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   16e16:	002a      	movs	r2, r5
   16e18:	9900      	ldr	r1, [sp, #0]
   16e1a:	0020      	movs	r0, r4
   16e1c:	4b89      	ldr	r3, [pc, #548]	; (17044 <xQueueGenericSend+0x2fc>)
   16e1e:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
   16e20:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   16e22:	2b00      	cmp	r3, #0
   16e24:	d012      	beq.n	16e4c <xQueueGenericSend+0x104>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   16e26:	0029      	movs	r1, r5
   16e28:	0020      	movs	r0, r4
   16e2a:	4b87      	ldr	r3, [pc, #540]	; (17048 <xQueueGenericSend+0x300>)
   16e2c:	4798      	blx	r3
   16e2e:	2800      	cmp	r0, #0
   16e30:	d001      	beq.n	16e36 <xQueueGenericSend+0xee>
							queueYIELD_IF_USING_PREEMPTION();
   16e32:	4b86      	ldr	r3, [pc, #536]	; (1704c <xQueueGenericSend+0x304>)
   16e34:	4798      	blx	r3
				taskEXIT_CRITICAL();
   16e36:	4b86      	ldr	r3, [pc, #536]	; (17050 <xQueueGenericSend+0x308>)
   16e38:	4798      	blx	r3
				return pdPASS;
   16e3a:	2301      	movs	r3, #1
}
   16e3c:	0018      	movs	r0, r3
   16e3e:	b005      	add	sp, #20
   16e40:	bc0c      	pop	{r2, r3}
   16e42:	4690      	mov	r8, r2
   16e44:	4699      	mov	r9, r3
   16e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
				traceQUEUE_SEND( pxQueue );
   16e48:	2200      	movs	r2, #0
   16e4a:	e7e0      	b.n	16e0e <xQueueGenericSend+0xc6>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   16e4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   16e4e:	2b00      	cmp	r3, #0
   16e50:	d008      	beq.n	16e64 <xQueueGenericSend+0x11c>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   16e52:	0020      	movs	r0, r4
   16e54:	3024      	adds	r0, #36	; 0x24
   16e56:	4b7f      	ldr	r3, [pc, #508]	; (17054 <xQueueGenericSend+0x30c>)
   16e58:	4798      	blx	r3
   16e5a:	2800      	cmp	r0, #0
   16e5c:	d0eb      	beq.n	16e36 <xQueueGenericSend+0xee>
								queueYIELD_IF_USING_PREEMPTION();
   16e5e:	4b7b      	ldr	r3, [pc, #492]	; (1704c <xQueueGenericSend+0x304>)
   16e60:	4798      	blx	r3
   16e62:	e7e8      	b.n	16e36 <xQueueGenericSend+0xee>
						else if( xYieldRequired != pdFALSE )
   16e64:	2800      	cmp	r0, #0
   16e66:	d0e6      	beq.n	16e36 <xQueueGenericSend+0xee>
							queueYIELD_IF_USING_PREEMPTION();
   16e68:	4b78      	ldr	r3, [pc, #480]	; (1704c <xQueueGenericSend+0x304>)
   16e6a:	4798      	blx	r3
   16e6c:	e7e3      	b.n	16e36 <xQueueGenericSend+0xee>
					taskEXIT_CRITICAL();
   16e6e:	4b78      	ldr	r3, [pc, #480]	; (17050 <xQueueGenericSend+0x308>)
   16e70:	4798      	blx	r3
					traceQUEUE_SEND_FAILED( pxQueue );
   16e72:	4b6b      	ldr	r3, [pc, #428]	; (17020 <xQueueGenericSend+0x2d8>)
   16e74:	4798      	blx	r3
   16e76:	4b6b      	ldr	r3, [pc, #428]	; (17024 <xQueueGenericSend+0x2dc>)
   16e78:	4798      	blx	r3
   16e7a:	4b6b      	ldr	r3, [pc, #428]	; (17028 <xQueueGenericSend+0x2e0>)
   16e7c:	881a      	ldrh	r2, [r3, #0]
					return errQUEUE_FULL;
   16e7e:	2300      	movs	r3, #0
					traceQUEUE_SEND_FAILED( pxQueue );
   16e80:	4202      	tst	r2, r0
   16e82:	d0db      	beq.n	16e3c <xQueueGenericSend+0xf4>
   16e84:	0020      	movs	r0, r4
   16e86:	4b69      	ldr	r3, [pc, #420]	; (1702c <xQueueGenericSend+0x2e4>)
   16e88:	4798      	blx	r3
   16e8a:	4b67      	ldr	r3, [pc, #412]	; (17028 <xQueueGenericSend+0x2e0>)
   16e8c:	881a      	ldrh	r2, [r3, #0]
					return errQUEUE_FULL;
   16e8e:	2300      	movs	r3, #0
					traceQUEUE_SEND_FAILED( pxQueue );
   16e90:	4202      	tst	r2, r0
   16e92:	d0d3      	beq.n	16e3c <xQueueGenericSend+0xf4>
   16e94:	264d      	movs	r6, #77	; 0x4d
   16e96:	2d00      	cmp	r5, #0
   16e98:	d106      	bne.n	16ea8 <xQueueGenericSend+0x160>
   16e9a:	0020      	movs	r0, r4
   16e9c:	4b64      	ldr	r3, [pc, #400]	; (17030 <xQueueGenericSend+0x2e8>)
   16e9e:	4798      	blx	r3
   16ea0:	4b64      	ldr	r3, [pc, #400]	; (17034 <xQueueGenericSend+0x2ec>)
   16ea2:	5c1e      	ldrb	r6, [r3, r0]
   16ea4:	3648      	adds	r6, #72	; 0x48
   16ea6:	b2f6      	uxtb	r6, r6
   16ea8:	0020      	movs	r0, r4
   16eaa:	4b61      	ldr	r3, [pc, #388]	; (17030 <xQueueGenericSend+0x2e8>)
   16eac:	4798      	blx	r3
   16eae:	4b61      	ldr	r3, [pc, #388]	; (17034 <xQueueGenericSend+0x2ec>)
   16eb0:	5c1d      	ldrb	r5, [r3, r0]
   16eb2:	0020      	movs	r0, r4
   16eb4:	4b60      	ldr	r3, [pc, #384]	; (17038 <xQueueGenericSend+0x2f0>)
   16eb6:	4798      	blx	r3
   16eb8:	b2c2      	uxtb	r2, r0
   16eba:	0029      	movs	r1, r5
   16ebc:	0030      	movs	r0, r6
   16ebe:	4b5f      	ldr	r3, [pc, #380]	; (1703c <xQueueGenericSend+0x2f4>)
   16ec0:	4798      	blx	r3
					return errQUEUE_FULL;
   16ec2:	2300      	movs	r3, #0
   16ec4:	e7ba      	b.n	16e3c <xQueueGenericSend+0xf4>
		prvLockQueue( pxQueue );
   16ec6:	4b62      	ldr	r3, [pc, #392]	; (17050 <xQueueGenericSend+0x308>)
   16ec8:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   16eca:	a901      	add	r1, sp, #4
   16ecc:	a802      	add	r0, sp, #8
   16ece:	4b62      	ldr	r3, [pc, #392]	; (17058 <xQueueGenericSend+0x310>)
   16ed0:	4798      	blx	r3
   16ed2:	2800      	cmp	r0, #0
   16ed4:	d16e      	bne.n	16fb4 <xQueueGenericSend+0x26c>
	taskENTER_CRITICAL();
   16ed6:	4b51      	ldr	r3, [pc, #324]	; (1701c <xQueueGenericSend+0x2d4>)
   16ed8:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   16eda:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   16edc:	4699      	mov	r9, r3
   16ede:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
   16ee0:	4b5b      	ldr	r3, [pc, #364]	; (17050 <xQueueGenericSend+0x308>)
   16ee2:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   16ee4:	45b9      	cmp	r9, r7
   16ee6:	d15f      	bne.n	16fa8 <xQueueGenericSend+0x260>
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
   16ee8:	4b4d      	ldr	r3, [pc, #308]	; (17020 <xQueueGenericSend+0x2d8>)
   16eea:	4798      	blx	r3
   16eec:	4b4d      	ldr	r3, [pc, #308]	; (17024 <xQueueGenericSend+0x2dc>)
   16eee:	4798      	blx	r3
   16ef0:	4b4d      	ldr	r3, [pc, #308]	; (17028 <xQueueGenericSend+0x2e0>)
   16ef2:	881b      	ldrh	r3, [r3, #0]
   16ef4:	4203      	tst	r3, r0
   16ef6:	d134      	bne.n	16f62 <xQueueGenericSend+0x21a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   16ef8:	0020      	movs	r0, r4
   16efa:	3010      	adds	r0, #16
   16efc:	9901      	ldr	r1, [sp, #4]
   16efe:	4b57      	ldr	r3, [pc, #348]	; (1705c <xQueueGenericSend+0x314>)
   16f00:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   16f02:	0020      	movs	r0, r4
   16f04:	4b56      	ldr	r3, [pc, #344]	; (17060 <xQueueGenericSend+0x318>)
   16f06:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   16f08:	4b56      	ldr	r3, [pc, #344]	; (17064 <xQueueGenericSend+0x31c>)
   16f0a:	4798      	blx	r3
   16f0c:	2800      	cmp	r0, #0
   16f0e:	d048      	beq.n	16fa2 <xQueueGenericSend+0x25a>
   16f10:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
   16f12:	47b0      	blx	r6
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   16f14:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   16f16:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   16f18:	4293      	cmp	r3, r2
   16f1a:	d200      	bcs.n	16f1e <xQueueGenericSend+0x1d6>
   16f1c:	e73e      	b.n	16d9c <xQueueGenericSend+0x54>
   16f1e:	2d02      	cmp	r5, #2
   16f20:	d100      	bne.n	16f24 <xQueueGenericSend+0x1dc>
   16f22:	e73b      	b.n	16d9c <xQueueGenericSend+0x54>
				if( xTicksToWait == ( TickType_t ) 0 )
   16f24:	9b01      	ldr	r3, [sp, #4]
   16f26:	2b00      	cmp	r3, #0
   16f28:	d0a1      	beq.n	16e6e <xQueueGenericSend+0x126>
				else if( xEntryTimeSet == pdFALSE )
   16f2a:	2f00      	cmp	r7, #0
   16f2c:	d102      	bne.n	16f34 <xQueueGenericSend+0x1ec>
					vTaskInternalSetTimeOutState( &xTimeOut );
   16f2e:	a802      	add	r0, sp, #8
   16f30:	4b4d      	ldr	r3, [pc, #308]	; (17068 <xQueueGenericSend+0x320>)
   16f32:	4798      	blx	r3
		taskEXIT_CRITICAL();
   16f34:	4b46      	ldr	r3, [pc, #280]	; (17050 <xQueueGenericSend+0x308>)
   16f36:	4798      	blx	r3
		vTaskSuspendAll();
   16f38:	4b4c      	ldr	r3, [pc, #304]	; (1706c <xQueueGenericSend+0x324>)
   16f3a:	4798      	blx	r3
		prvLockQueue( pxQueue );
   16f3c:	4b37      	ldr	r3, [pc, #220]	; (1701c <xQueueGenericSend+0x2d4>)
   16f3e:	4798      	blx	r3
   16f40:	2344      	movs	r3, #68	; 0x44
   16f42:	5ce3      	ldrb	r3, [r4, r3]
   16f44:	b25b      	sxtb	r3, r3
   16f46:	3301      	adds	r3, #1
   16f48:	d102      	bne.n	16f50 <xQueueGenericSend+0x208>
   16f4a:	2200      	movs	r2, #0
   16f4c:	2344      	movs	r3, #68	; 0x44
   16f4e:	54e2      	strb	r2, [r4, r3]
   16f50:	2345      	movs	r3, #69	; 0x45
   16f52:	5ce3      	ldrb	r3, [r4, r3]
   16f54:	b25b      	sxtb	r3, r3
   16f56:	3301      	adds	r3, #1
   16f58:	d1b5      	bne.n	16ec6 <xQueueGenericSend+0x17e>
   16f5a:	2200      	movs	r2, #0
   16f5c:	2345      	movs	r3, #69	; 0x45
   16f5e:	54e2      	strb	r2, [r4, r3]
   16f60:	e7b1      	b.n	16ec6 <xQueueGenericSend+0x17e>
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
   16f62:	0020      	movs	r0, r4
   16f64:	4b31      	ldr	r3, [pc, #196]	; (1702c <xQueueGenericSend+0x2e4>)
   16f66:	4798      	blx	r3
   16f68:	4b2f      	ldr	r3, [pc, #188]	; (17028 <xQueueGenericSend+0x2e0>)
   16f6a:	881b      	ldrh	r3, [r3, #0]
   16f6c:	4203      	tst	r3, r0
   16f6e:	d0c3      	beq.n	16ef8 <xQueueGenericSend+0x1b0>
   16f70:	2775      	movs	r7, #117	; 0x75
   16f72:	2d00      	cmp	r5, #0
   16f74:	d106      	bne.n	16f84 <xQueueGenericSend+0x23c>
   16f76:	0020      	movs	r0, r4
   16f78:	4b2d      	ldr	r3, [pc, #180]	; (17030 <xQueueGenericSend+0x2e8>)
   16f7a:	4798      	blx	r3
   16f7c:	4b2d      	ldr	r3, [pc, #180]	; (17034 <xQueueGenericSend+0x2ec>)
   16f7e:	5c1f      	ldrb	r7, [r3, r0]
   16f80:	3770      	adds	r7, #112	; 0x70
   16f82:	b2ff      	uxtb	r7, r7
   16f84:	0020      	movs	r0, r4
   16f86:	4b2a      	ldr	r3, [pc, #168]	; (17030 <xQueueGenericSend+0x2e8>)
   16f88:	4798      	blx	r3
   16f8a:	4b2a      	ldr	r3, [pc, #168]	; (17034 <xQueueGenericSend+0x2ec>)
   16f8c:	5c1b      	ldrb	r3, [r3, r0]
   16f8e:	4699      	mov	r9, r3
   16f90:	0020      	movs	r0, r4
   16f92:	4b29      	ldr	r3, [pc, #164]	; (17038 <xQueueGenericSend+0x2f0>)
   16f94:	4798      	blx	r3
   16f96:	b2c2      	uxtb	r2, r0
   16f98:	4649      	mov	r1, r9
   16f9a:	0038      	movs	r0, r7
   16f9c:	4b27      	ldr	r3, [pc, #156]	; (1703c <xQueueGenericSend+0x2f4>)
   16f9e:	4798      	blx	r3
   16fa0:	e7aa      	b.n	16ef8 <xQueueGenericSend+0x1b0>
					portYIELD_WITHIN_API();
   16fa2:	4b2a      	ldr	r3, [pc, #168]	; (1704c <xQueueGenericSend+0x304>)
   16fa4:	4798      	blx	r3
   16fa6:	e7b3      	b.n	16f10 <xQueueGenericSend+0x1c8>
				prvUnlockQueue( pxQueue );
   16fa8:	0020      	movs	r0, r4
   16faa:	4b2d      	ldr	r3, [pc, #180]	; (17060 <xQueueGenericSend+0x318>)
   16fac:	4798      	blx	r3
				( void ) xTaskResumeAll();
   16fae:	4b2d      	ldr	r3, [pc, #180]	; (17064 <xQueueGenericSend+0x31c>)
   16fb0:	4798      	blx	r3
   16fb2:	e7ad      	b.n	16f10 <xQueueGenericSend+0x1c8>
			prvUnlockQueue( pxQueue );
   16fb4:	0020      	movs	r0, r4
   16fb6:	4b2a      	ldr	r3, [pc, #168]	; (17060 <xQueueGenericSend+0x318>)
   16fb8:	4798      	blx	r3
			( void ) xTaskResumeAll();
   16fba:	4b2a      	ldr	r3, [pc, #168]	; (17064 <xQueueGenericSend+0x31c>)
   16fbc:	4798      	blx	r3
			traceQUEUE_SEND_FAILED( pxQueue );
   16fbe:	4b18      	ldr	r3, [pc, #96]	; (17020 <xQueueGenericSend+0x2d8>)
   16fc0:	4798      	blx	r3
   16fc2:	4b18      	ldr	r3, [pc, #96]	; (17024 <xQueueGenericSend+0x2dc>)
   16fc4:	4798      	blx	r3
   16fc6:	4b18      	ldr	r3, [pc, #96]	; (17028 <xQueueGenericSend+0x2e0>)
   16fc8:	881a      	ldrh	r2, [r3, #0]
			return errQUEUE_FULL;
   16fca:	2300      	movs	r3, #0
			traceQUEUE_SEND_FAILED( pxQueue );
   16fcc:	4202      	tst	r2, r0
   16fce:	d100      	bne.n	16fd2 <xQueueGenericSend+0x28a>
   16fd0:	e734      	b.n	16e3c <xQueueGenericSend+0xf4>
   16fd2:	0020      	movs	r0, r4
   16fd4:	4b15      	ldr	r3, [pc, #84]	; (1702c <xQueueGenericSend+0x2e4>)
   16fd6:	4798      	blx	r3
   16fd8:	4b13      	ldr	r3, [pc, #76]	; (17028 <xQueueGenericSend+0x2e0>)
   16fda:	881a      	ldrh	r2, [r3, #0]
			return errQUEUE_FULL;
   16fdc:	2300      	movs	r3, #0
			traceQUEUE_SEND_FAILED( pxQueue );
   16fde:	4202      	tst	r2, r0
   16fe0:	d100      	bne.n	16fe4 <xQueueGenericSend+0x29c>
   16fe2:	e72b      	b.n	16e3c <xQueueGenericSend+0xf4>
   16fe4:	264d      	movs	r6, #77	; 0x4d
   16fe6:	2d00      	cmp	r5, #0
   16fe8:	d106      	bne.n	16ff8 <xQueueGenericSend+0x2b0>
   16fea:	0020      	movs	r0, r4
   16fec:	4b10      	ldr	r3, [pc, #64]	; (17030 <xQueueGenericSend+0x2e8>)
   16fee:	4798      	blx	r3
   16ff0:	4b10      	ldr	r3, [pc, #64]	; (17034 <xQueueGenericSend+0x2ec>)
   16ff2:	5c1e      	ldrb	r6, [r3, r0]
   16ff4:	3648      	adds	r6, #72	; 0x48
   16ff6:	b2f6      	uxtb	r6, r6
   16ff8:	0020      	movs	r0, r4
   16ffa:	4b0d      	ldr	r3, [pc, #52]	; (17030 <xQueueGenericSend+0x2e8>)
   16ffc:	4798      	blx	r3
   16ffe:	4b0d      	ldr	r3, [pc, #52]	; (17034 <xQueueGenericSend+0x2ec>)
   17000:	5c1d      	ldrb	r5, [r3, r0]
   17002:	0020      	movs	r0, r4
   17004:	4b0c      	ldr	r3, [pc, #48]	; (17038 <xQueueGenericSend+0x2f0>)
   17006:	4798      	blx	r3
   17008:	b2c2      	uxtb	r2, r0
   1700a:	0029      	movs	r1, r5
   1700c:	0030      	movs	r0, r6
   1700e:	4b0b      	ldr	r3, [pc, #44]	; (1703c <xQueueGenericSend+0x2f4>)
   17010:	4798      	blx	r3
			return errQUEUE_FULL;
   17012:	2300      	movs	r3, #0
   17014:	e712      	b.n	16e3c <xQueueGenericSend+0xf4>
   17016:	46c0      	nop			; (mov r8, r8)
   17018:	0001871d 	.word	0x0001871d
   1701c:	00016791 	.word	0x00016791
   17020:	00015599 	.word	0x00015599
   17024:	000153e5 	.word	0x000153e5
   17028:	200000c8 	.word	0x200000c8
   1702c:	00015449 	.word	0x00015449
   17030:	000153c9 	.word	0x000153c9
   17034:	200000c0 	.word	0x200000c0
   17038:	00015439 	.word	0x00015439
   1703c:	0001621d 	.word	0x0001621d
   17040:	00015cf1 	.word	0x00015cf1
   17044:	00016921 	.word	0x00016921
   17048:	0001699d 	.word	0x0001699d
   1704c:	00016781 	.word	0x00016781
   17050:	000167a9 	.word	0x000167a9
   17054:	00018559 	.word	0x00018559
   17058:	00018655 	.word	0x00018655
   1705c:	00018491 	.word	0x00018491
   17060:	00016ae1 	.word	0x00016ae1
   17064:	000180a9 	.word	0x000180a9
   17068:	0001863d 	.word	0x0001863d
   1706c:	00017f01 	.word	0x00017f01

00017070 <xQueueCreateMutex>:
	{
   17070:	b570      	push	{r4, r5, r6, lr}
   17072:	0002      	movs	r2, r0
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
   17074:	2100      	movs	r1, #0
   17076:	2001      	movs	r0, #1
   17078:	4b06      	ldr	r3, [pc, #24]	; (17094 <xQueueCreateMutex+0x24>)
   1707a:	4798      	blx	r3
   1707c:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
   1707e:	d007      	beq.n	17090 <xQueueCreateMutex+0x20>
			pxNewQueue->pxMutexHolder = NULL;
   17080:	2300      	movs	r3, #0
   17082:	6043      	str	r3, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
   17084:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
   17086:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
   17088:	2200      	movs	r2, #0
   1708a:	2100      	movs	r1, #0
   1708c:	4d02      	ldr	r5, [pc, #8]	; (17098 <xQueueCreateMutex+0x28>)
   1708e:	47a8      	blx	r5
	}
   17090:	0020      	movs	r0, r4
   17092:	bd70      	pop	{r4, r5, r6, pc}
   17094:	00016c0d 	.word	0x00016c0d
   17098:	00016d49 	.word	0x00016d49

0001709c <xQueueGenericSendFromISR>:
{
   1709c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1709e:	46de      	mov	lr, fp
   170a0:	4647      	mov	r7, r8
   170a2:	b580      	push	{r7, lr}
   170a4:	b083      	sub	sp, #12
   170a6:	0004      	movs	r4, r0
   170a8:	9101      	str	r1, [sp, #4]
   170aa:	0016      	movs	r6, r2
   170ac:	001f      	movs	r7, r3
	configASSERT( pxQueue );
   170ae:	2800      	cmp	r0, #0
   170b0:	d02d      	beq.n	1710e <xQueueGenericSendFromISR+0x72>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   170b2:	9b01      	ldr	r3, [sp, #4]
   170b4:	2b00      	cmp	r3, #0
   170b6:	d02c      	beq.n	17112 <xQueueGenericSendFromISR+0x76>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   170b8:	2f02      	cmp	r7, #2
   170ba:	d02f      	beq.n	1711c <xQueueGenericSendFromISR+0x80>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   170bc:	4b59      	ldr	r3, [pc, #356]	; (17224 <xQueueGenericSendFromISR+0x188>)
   170be:	4798      	blx	r3
   170c0:	9000      	str	r0, [sp, #0]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   170c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   170c4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   170c6:	429a      	cmp	r2, r3
   170c8:	d85a      	bhi.n	17180 <xQueueGenericSendFromISR+0xe4>
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   170ca:	0020      	movs	r0, r4
   170cc:	4b56      	ldr	r3, [pc, #344]	; (17228 <xQueueGenericSendFromISR+0x18c>)
   170ce:	4798      	blx	r3
   170d0:	4b56      	ldr	r3, [pc, #344]	; (1722c <xQueueGenericSendFromISR+0x190>)
   170d2:	881b      	ldrh	r3, [r3, #0]
			xReturn = errQUEUE_FULL;
   170d4:	2500      	movs	r5, #0
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   170d6:	4203      	tst	r3, r0
   170d8:	d100      	bne.n	170dc <xQueueGenericSendFromISR+0x40>
   170da:	e09a      	b.n	17212 <xQueueGenericSendFromISR+0x176>
   170dc:	355d      	adds	r5, #93	; 0x5d
   170de:	2f00      	cmp	r7, #0
   170e0:	d106      	bne.n	170f0 <xQueueGenericSendFromISR+0x54>
   170e2:	0020      	movs	r0, r4
   170e4:	4b52      	ldr	r3, [pc, #328]	; (17230 <xQueueGenericSendFromISR+0x194>)
   170e6:	4798      	blx	r3
   170e8:	4b52      	ldr	r3, [pc, #328]	; (17234 <xQueueGenericSendFromISR+0x198>)
   170ea:	5c1d      	ldrb	r5, [r3, r0]
   170ec:	3558      	adds	r5, #88	; 0x58
   170ee:	b2ed      	uxtb	r5, r5
   170f0:	0020      	movs	r0, r4
   170f2:	4b4f      	ldr	r3, [pc, #316]	; (17230 <xQueueGenericSendFromISR+0x194>)
   170f4:	4798      	blx	r3
   170f6:	4b4f      	ldr	r3, [pc, #316]	; (17234 <xQueueGenericSendFromISR+0x198>)
   170f8:	5c1f      	ldrb	r7, [r3, r0]
   170fa:	0020      	movs	r0, r4
   170fc:	4b4e      	ldr	r3, [pc, #312]	; (17238 <xQueueGenericSendFromISR+0x19c>)
   170fe:	4798      	blx	r3
   17100:	b2c2      	uxtb	r2, r0
   17102:	0039      	movs	r1, r7
   17104:	0028      	movs	r0, r5
   17106:	4b4d      	ldr	r3, [pc, #308]	; (1723c <xQueueGenericSendFromISR+0x1a0>)
   17108:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   1710a:	2500      	movs	r5, #0
   1710c:	e081      	b.n	17212 <xQueueGenericSendFromISR+0x176>
	configASSERT( pxQueue );
   1710e:	b672      	cpsid	i
   17110:	e7fe      	b.n	17110 <xQueueGenericSendFromISR+0x74>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   17112:	6c03      	ldr	r3, [r0, #64]	; 0x40
   17114:	2b00      	cmp	r3, #0
   17116:	d0cf      	beq.n	170b8 <xQueueGenericSendFromISR+0x1c>
   17118:	b672      	cpsid	i
   1711a:	e7fe      	b.n	1711a <xQueueGenericSendFromISR+0x7e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1711c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1711e:	2b01      	cmp	r3, #1
   17120:	d027      	beq.n	17172 <xQueueGenericSendFromISR+0xd6>
   17122:	b672      	cpsid	i
   17124:	e7fe      	b.n	17124 <xQueueGenericSendFromISR+0x88>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   17126:	6a63      	ldr	r3, [r4, #36]	; 0x24
			xReturn = pdPASS;
   17128:	2501      	movs	r5, #1
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1712a:	2b00      	cmp	r3, #0
   1712c:	d071      	beq.n	17212 <xQueueGenericSendFromISR+0x176>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1712e:	0020      	movs	r0, r4
   17130:	3024      	adds	r0, #36	; 0x24
   17132:	4b43      	ldr	r3, [pc, #268]	; (17240 <xQueueGenericSendFromISR+0x1a4>)
   17134:	4798      	blx	r3
   17136:	2800      	cmp	r0, #0
   17138:	d06b      	beq.n	17212 <xQueueGenericSendFromISR+0x176>
								if( pxHigherPriorityTaskWoken != NULL )
   1713a:	2e00      	cmp	r6, #0
   1713c:	d00a      	beq.n	17154 <xQueueGenericSendFromISR+0xb8>
									*pxHigherPriorityTaskWoken = pdTRUE;
   1713e:	2301      	movs	r3, #1
   17140:	6033      	str	r3, [r6, #0]
   17142:	e066      	b.n	17212 <xQueueGenericSendFromISR+0x176>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   17144:	3501      	adds	r5, #1
   17146:	b26d      	sxtb	r5, r5
   17148:	2345      	movs	r3, #69	; 0x45
   1714a:	54e5      	strb	r5, [r4, r3]
			xReturn = pdPASS;
   1714c:	2501      	movs	r5, #1
   1714e:	e060      	b.n	17212 <xQueueGenericSendFromISR+0x176>
   17150:	2501      	movs	r5, #1
   17152:	e05e      	b.n	17212 <xQueueGenericSendFromISR+0x176>
   17154:	2501      	movs	r5, #1
   17156:	e05c      	b.n	17212 <xQueueGenericSendFromISR+0x176>
			const int8_t cTxLock = pxQueue->cTxLock;
   17158:	2345      	movs	r3, #69	; 0x45
   1715a:	5ce5      	ldrb	r5, [r4, r3]
   1715c:	b26d      	sxtb	r5, r5
			traceQUEUE_SEND_FROM_ISR( pxQueue );
   1715e:	0020      	movs	r0, r4
   17160:	4b31      	ldr	r3, [pc, #196]	; (17228 <xQueueGenericSendFromISR+0x18c>)
   17162:	4798      	blx	r3
   17164:	4b31      	ldr	r3, [pc, #196]	; (1722c <xQueueGenericSendFromISR+0x190>)
   17166:	881b      	ldrh	r3, [r3, #0]
   17168:	4203      	tst	r3, r0
   1716a:	d02d      	beq.n	171c8 <xQueueGenericSendFromISR+0x12c>
   1716c:	2335      	movs	r3, #53	; 0x35
   1716e:	4698      	mov	r8, r3
   17170:	e01c      	b.n	171ac <xQueueGenericSendFromISR+0x110>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   17172:	4b2c      	ldr	r3, [pc, #176]	; (17224 <xQueueGenericSendFromISR+0x188>)
   17174:	4798      	blx	r3
   17176:	9000      	str	r0, [sp, #0]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   17178:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1717a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   1717c:	429a      	cmp	r2, r3
   1717e:	d9eb      	bls.n	17158 <xQueueGenericSendFromISR+0xbc>
			const int8_t cTxLock = pxQueue->cTxLock;
   17180:	2345      	movs	r3, #69	; 0x45
   17182:	5ce5      	ldrb	r5, [r4, r3]
   17184:	b26d      	sxtb	r5, r5
			traceQUEUE_SEND_FROM_ISR( pxQueue );
   17186:	0020      	movs	r0, r4
   17188:	4b27      	ldr	r3, [pc, #156]	; (17228 <xQueueGenericSendFromISR+0x18c>)
   1718a:	4798      	blx	r3
   1718c:	4b27      	ldr	r3, [pc, #156]	; (1722c <xQueueGenericSendFromISR+0x190>)
   1718e:	881b      	ldrh	r3, [r3, #0]
   17190:	4203      	tst	r3, r0
   17192:	d019      	beq.n	171c8 <xQueueGenericSendFromISR+0x12c>
   17194:	2335      	movs	r3, #53	; 0x35
   17196:	4698      	mov	r8, r3
   17198:	2f00      	cmp	r7, #0
   1719a:	d107      	bne.n	171ac <xQueueGenericSendFromISR+0x110>
   1719c:	0020      	movs	r0, r4
   1719e:	4b24      	ldr	r3, [pc, #144]	; (17230 <xQueueGenericSendFromISR+0x194>)
   171a0:	4798      	blx	r3
   171a2:	4b24      	ldr	r3, [pc, #144]	; (17234 <xQueueGenericSendFromISR+0x198>)
   171a4:	5c1b      	ldrb	r3, [r3, r0]
   171a6:	3330      	adds	r3, #48	; 0x30
   171a8:	b2db      	uxtb	r3, r3
   171aa:	4698      	mov	r8, r3
   171ac:	0020      	movs	r0, r4
   171ae:	4b20      	ldr	r3, [pc, #128]	; (17230 <xQueueGenericSendFromISR+0x194>)
   171b0:	4798      	blx	r3
   171b2:	4b20      	ldr	r3, [pc, #128]	; (17234 <xQueueGenericSendFromISR+0x198>)
   171b4:	5c1b      	ldrb	r3, [r3, r0]
   171b6:	469b      	mov	fp, r3
   171b8:	0020      	movs	r0, r4
   171ba:	4b1f      	ldr	r3, [pc, #124]	; (17238 <xQueueGenericSendFromISR+0x19c>)
   171bc:	4798      	blx	r3
   171be:	b2c2      	uxtb	r2, r0
   171c0:	4659      	mov	r1, fp
   171c2:	4640      	mov	r0, r8
   171c4:	4b1d      	ldr	r3, [pc, #116]	; (1723c <xQueueGenericSendFromISR+0x1a0>)
   171c6:	4798      	blx	r3
   171c8:	0020      	movs	r0, r4
   171ca:	4b19      	ldr	r3, [pc, #100]	; (17230 <xQueueGenericSendFromISR+0x194>)
   171cc:	4798      	blx	r3
   171ce:	4b19      	ldr	r3, [pc, #100]	; (17234 <xQueueGenericSendFromISR+0x198>)
   171d0:	5c1b      	ldrb	r3, [r3, r0]
   171d2:	4698      	mov	r8, r3
   171d4:	0020      	movs	r0, r4
   171d6:	4b18      	ldr	r3, [pc, #96]	; (17238 <xQueueGenericSendFromISR+0x19c>)
   171d8:	4798      	blx	r3
   171da:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   171dc:	3201      	adds	r2, #1
   171de:	b2d2      	uxtb	r2, r2
   171e0:	b2c1      	uxtb	r1, r0
   171e2:	4640      	mov	r0, r8
   171e4:	4b17      	ldr	r3, [pc, #92]	; (17244 <xQueueGenericSendFromISR+0x1a8>)
   171e6:	4798      	blx	r3
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   171e8:	003a      	movs	r2, r7
   171ea:	9901      	ldr	r1, [sp, #4]
   171ec:	0020      	movs	r0, r4
   171ee:	4b16      	ldr	r3, [pc, #88]	; (17248 <xQueueGenericSendFromISR+0x1ac>)
   171f0:	4798      	blx	r3
			if( cTxLock == queueUNLOCKED )
   171f2:	1c6b      	adds	r3, r5, #1
   171f4:	d1a6      	bne.n	17144 <xQueueGenericSendFromISR+0xa8>
					if( pxQueue->pxQueueSetContainer != NULL )
   171f6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   171f8:	2b00      	cmp	r3, #0
   171fa:	d094      	beq.n	17126 <xQueueGenericSendFromISR+0x8a>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   171fc:	0039      	movs	r1, r7
   171fe:	0020      	movs	r0, r4
   17200:	4b12      	ldr	r3, [pc, #72]	; (1724c <xQueueGenericSendFromISR+0x1b0>)
   17202:	4798      	blx	r3
			xReturn = pdPASS;
   17204:	3502      	adds	r5, #2
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   17206:	2800      	cmp	r0, #0
   17208:	d003      	beq.n	17212 <xQueueGenericSendFromISR+0x176>
							if( pxHigherPriorityTaskWoken != NULL )
   1720a:	2e00      	cmp	r6, #0
   1720c:	d0a0      	beq.n	17150 <xQueueGenericSendFromISR+0xb4>
								*pxHigherPriorityTaskWoken = pdTRUE;
   1720e:	2301      	movs	r3, #1
   17210:	6033      	str	r3, [r6, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   17212:	9800      	ldr	r0, [sp, #0]
   17214:	4b0e      	ldr	r3, [pc, #56]	; (17250 <xQueueGenericSendFromISR+0x1b4>)
   17216:	4798      	blx	r3
}
   17218:	0028      	movs	r0, r5
   1721a:	b003      	add	sp, #12
   1721c:	bc0c      	pop	{r2, r3}
   1721e:	4690      	mov	r8, r2
   17220:	469b      	mov	fp, r3
   17222:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17224:	000167c9 	.word	0x000167c9
   17228:	00015449 	.word	0x00015449
   1722c:	200000c8 	.word	0x200000c8
   17230:	000153c9 	.word	0x000153c9
   17234:	200000c0 	.word	0x200000c0
   17238:	00015439 	.word	0x00015439
   1723c:	0001621d 	.word	0x0001621d
   17240:	00018559 	.word	0x00018559
   17244:	00015cf1 	.word	0x00015cf1
   17248:	00016921 	.word	0x00016921
   1724c:	0001699d 	.word	0x0001699d
   17250:	000167d1 	.word	0x000167d1

00017254 <MyWrapper>:
{
   17254:	b5f0      	push	{r4, r5, r6, r7, lr}
   17256:	46d6      	mov	lr, sl
   17258:	4647      	mov	r7, r8
   1725a:	b580      	push	{r7, lr}
   1725c:	b083      	sub	sp, #12
   1725e:	0004      	movs	r4, r0
   17260:	000f      	movs	r7, r1
   17262:	0016      	movs	r6, r2
	configASSERT( pxQueue );
   17264:	2800      	cmp	r0, #0
   17266:	d004      	beq.n	17272 <MyWrapper+0x1e>
	configASSERT( pxQueue->uxItemSize == 0 );
   17268:	6c03      	ldr	r3, [r0, #64]	; 0x40
   1726a:	2b00      	cmp	r3, #0
   1726c:	d003      	beq.n	17276 <MyWrapper+0x22>
   1726e:	b672      	cpsid	i
   17270:	e7fe      	b.n	17270 <MyWrapper+0x1c>
	configASSERT( pxQueue );
   17272:	b672      	cpsid	i
   17274:	e7fe      	b.n	17274 <MyWrapper+0x20>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
   17276:	6803      	ldr	r3, [r0, #0]
   17278:	2b00      	cmp	r3, #0
   1727a:	d055      	beq.n	17328 <MyWrapper+0xd4>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   1727c:	4b4a      	ldr	r3, [pc, #296]	; (173a8 <MyWrapper+0x154>)
   1727e:	4798      	blx	r3
   17280:	9001      	str	r0, [sp, #4]
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   17282:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   17284:	4698      	mov	r8, r3
		if( uxMessagesWaiting < pxQueue->uxLength )
   17286:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   17288:	4598      	cmp	r8, r3
   1728a:	d267      	bcs.n	1735c <MyWrapper+0x108>
			const int8_t cTxLock = pxQueue->cTxLock;
   1728c:	2345      	movs	r3, #69	; 0x45
   1728e:	5ce5      	ldrb	r5, [r4, r3]
   17290:	b26d      	sxtb	r5, r5
			traceQUEUE_SEND_FROM_ISR( pxQueue );
   17292:	0020      	movs	r0, r4
   17294:	4b45      	ldr	r3, [pc, #276]	; (173ac <MyWrapper+0x158>)
   17296:	4798      	blx	r3
   17298:	4b45      	ldr	r3, [pc, #276]	; (173b0 <MyWrapper+0x15c>)
   1729a:	881b      	ldrh	r3, [r3, #0]
   1729c:	4203      	tst	r3, r0
   1729e:	d018      	beq.n	172d2 <MyWrapper+0x7e>
   172a0:	2335      	movs	r3, #53	; 0x35
   172a2:	469a      	mov	sl, r3
   172a4:	2e00      	cmp	r6, #0
   172a6:	d107      	bne.n	172b8 <MyWrapper+0x64>
   172a8:	0020      	movs	r0, r4
   172aa:	4b42      	ldr	r3, [pc, #264]	; (173b4 <MyWrapper+0x160>)
   172ac:	4798      	blx	r3
   172ae:	4b42      	ldr	r3, [pc, #264]	; (173b8 <MyWrapper+0x164>)
   172b0:	5c1b      	ldrb	r3, [r3, r0]
   172b2:	3330      	adds	r3, #48	; 0x30
   172b4:	b2db      	uxtb	r3, r3
   172b6:	469a      	mov	sl, r3
   172b8:	0020      	movs	r0, r4
   172ba:	4b3e      	ldr	r3, [pc, #248]	; (173b4 <MyWrapper+0x160>)
   172bc:	4798      	blx	r3
   172be:	4b3e      	ldr	r3, [pc, #248]	; (173b8 <MyWrapper+0x164>)
   172c0:	5c1e      	ldrb	r6, [r3, r0]
   172c2:	0020      	movs	r0, r4
   172c4:	4b3d      	ldr	r3, [pc, #244]	; (173bc <MyWrapper+0x168>)
   172c6:	4798      	blx	r3
   172c8:	b2c2      	uxtb	r2, r0
   172ca:	0031      	movs	r1, r6
   172cc:	4650      	mov	r0, sl
   172ce:	4b3c      	ldr	r3, [pc, #240]	; (173c0 <MyWrapper+0x16c>)
   172d0:	4798      	blx	r3
   172d2:	0020      	movs	r0, r4
   172d4:	4b37      	ldr	r3, [pc, #220]	; (173b4 <MyWrapper+0x160>)
   172d6:	4798      	blx	r3
   172d8:	4b37      	ldr	r3, [pc, #220]	; (173b8 <MyWrapper+0x164>)
   172da:	5c1e      	ldrb	r6, [r3, r0]
   172dc:	0020      	movs	r0, r4
   172de:	4b37      	ldr	r3, [pc, #220]	; (173bc <MyWrapper+0x168>)
   172e0:	4798      	blx	r3
   172e2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   172e4:	3201      	adds	r2, #1
   172e6:	b2d2      	uxtb	r2, r2
   172e8:	b2c1      	uxtb	r1, r0
   172ea:	0030      	movs	r0, r6
   172ec:	4b35      	ldr	r3, [pc, #212]	; (173c4 <MyWrapper+0x170>)
   172ee:	4798      	blx	r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   172f0:	4643      	mov	r3, r8
   172f2:	3301      	adds	r3, #1
   172f4:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
   172f6:	1c6b      	adds	r3, r5, #1
   172f8:	d12a      	bne.n	17350 <MyWrapper+0xfc>
					if( pxQueue->pxQueueSetContainer != NULL )
   172fa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   172fc:	2b00      	cmp	r3, #0
   172fe:	d018      	beq.n	17332 <MyWrapper+0xde>
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   17300:	2100      	movs	r1, #0
   17302:	0020      	movs	r0, r4
   17304:	4b30      	ldr	r3, [pc, #192]	; (173c8 <MyWrapper+0x174>)
   17306:	4798      	blx	r3
			xReturn = pdPASS;
   17308:	3502      	adds	r5, #2
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   1730a:	2800      	cmp	r0, #0
   1730c:	d003      	beq.n	17316 <MyWrapper+0xc2>
							if( pxHigherPriorityTaskWoken != NULL )
   1730e:	2f00      	cmp	r7, #0
   17310:	d045      	beq.n	1739e <MyWrapper+0x14a>
								*pxHigherPriorityTaskWoken = pdTRUE;
   17312:	2301      	movs	r3, #1
   17314:	603b      	str	r3, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   17316:	9801      	ldr	r0, [sp, #4]
   17318:	4b2c      	ldr	r3, [pc, #176]	; (173cc <MyWrapper+0x178>)
   1731a:	4798      	blx	r3
}
   1731c:	0028      	movs	r0, r5
   1731e:	b003      	add	sp, #12
   17320:	bc0c      	pop	{r2, r3}
   17322:	4690      	mov	r8, r2
   17324:	469a      	mov	sl, r3
   17326:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
   17328:	6843      	ldr	r3, [r0, #4]
   1732a:	2b00      	cmp	r3, #0
   1732c:	d0a6      	beq.n	1727c <MyWrapper+0x28>
   1732e:	b672      	cpsid	i
   17330:	e7fe      	b.n	17330 <MyWrapper+0xdc>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   17332:	6a63      	ldr	r3, [r4, #36]	; 0x24
			xReturn = pdPASS;
   17334:	2501      	movs	r5, #1
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   17336:	2b00      	cmp	r3, #0
   17338:	d0ed      	beq.n	17316 <MyWrapper+0xc2>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1733a:	0020      	movs	r0, r4
   1733c:	3024      	adds	r0, #36	; 0x24
   1733e:	4b24      	ldr	r3, [pc, #144]	; (173d0 <MyWrapper+0x17c>)
   17340:	4798      	blx	r3
   17342:	2800      	cmp	r0, #0
   17344:	d0e7      	beq.n	17316 <MyWrapper+0xc2>
								if( pxHigherPriorityTaskWoken != NULL )
   17346:	2f00      	cmp	r7, #0
   17348:	d02b      	beq.n	173a2 <MyWrapper+0x14e>
									*pxHigherPriorityTaskWoken = pdTRUE;
   1734a:	2301      	movs	r3, #1
   1734c:	603b      	str	r3, [r7, #0]
   1734e:	e7e2      	b.n	17316 <MyWrapper+0xc2>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   17350:	3501      	adds	r5, #1
   17352:	b26d      	sxtb	r5, r5
   17354:	2345      	movs	r3, #69	; 0x45
   17356:	54e5      	strb	r5, [r4, r3]
			xReturn = pdPASS;
   17358:	2501      	movs	r5, #1
   1735a:	e7dc      	b.n	17316 <MyWrapper+0xc2>
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   1735c:	0020      	movs	r0, r4
   1735e:	4b13      	ldr	r3, [pc, #76]	; (173ac <MyWrapper+0x158>)
   17360:	4798      	blx	r3
   17362:	4b13      	ldr	r3, [pc, #76]	; (173b0 <MyWrapper+0x15c>)
   17364:	881b      	ldrh	r3, [r3, #0]
			xReturn = errQUEUE_FULL;
   17366:	2500      	movs	r5, #0
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   17368:	4203      	tst	r3, r0
   1736a:	d0d4      	beq.n	17316 <MyWrapper+0xc2>
   1736c:	355d      	adds	r5, #93	; 0x5d
   1736e:	2e00      	cmp	r6, #0
   17370:	d106      	bne.n	17380 <MyWrapper+0x12c>
   17372:	0020      	movs	r0, r4
   17374:	4b0f      	ldr	r3, [pc, #60]	; (173b4 <MyWrapper+0x160>)
   17376:	4798      	blx	r3
   17378:	4b0f      	ldr	r3, [pc, #60]	; (173b8 <MyWrapper+0x164>)
   1737a:	5c1d      	ldrb	r5, [r3, r0]
   1737c:	3558      	adds	r5, #88	; 0x58
   1737e:	b2ed      	uxtb	r5, r5
   17380:	0020      	movs	r0, r4
   17382:	4b0c      	ldr	r3, [pc, #48]	; (173b4 <MyWrapper+0x160>)
   17384:	4798      	blx	r3
   17386:	4b0c      	ldr	r3, [pc, #48]	; (173b8 <MyWrapper+0x164>)
   17388:	5c1f      	ldrb	r7, [r3, r0]
   1738a:	0020      	movs	r0, r4
   1738c:	4b0b      	ldr	r3, [pc, #44]	; (173bc <MyWrapper+0x168>)
   1738e:	4798      	blx	r3
   17390:	b2c2      	uxtb	r2, r0
   17392:	0039      	movs	r1, r7
   17394:	0028      	movs	r0, r5
   17396:	4b0a      	ldr	r3, [pc, #40]	; (173c0 <MyWrapper+0x16c>)
   17398:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   1739a:	2500      	movs	r5, #0
   1739c:	e7bb      	b.n	17316 <MyWrapper+0xc2>
			xReturn = pdPASS;
   1739e:	2501      	movs	r5, #1
   173a0:	e7b9      	b.n	17316 <MyWrapper+0xc2>
   173a2:	2501      	movs	r5, #1
   173a4:	e7b7      	b.n	17316 <MyWrapper+0xc2>
   173a6:	46c0      	nop			; (mov r8, r8)
   173a8:	000167c9 	.word	0x000167c9
   173ac:	00015449 	.word	0x00015449
   173b0:	200000c8 	.word	0x200000c8
   173b4:	000153c9 	.word	0x000153c9
   173b8:	200000c0 	.word	0x200000c0
   173bc:	00015439 	.word	0x00015439
   173c0:	0001621d 	.word	0x0001621d
   173c4:	00015cf1 	.word	0x00015cf1
   173c8:	0001699d 	.word	0x0001699d
   173cc:	000167d1 	.word	0x000167d1
   173d0:	00018559 	.word	0x00018559

000173d4 <xQueueGiveFromISR>:
BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
   173d4:	b510      	push	{r4, lr}
   173d6:	2200      	movs	r2, #0
   173d8:	4b01      	ldr	r3, [pc, #4]	; (173e0 <xQueueGiveFromISR+0xc>)
   173da:	4798      	blx	r3
   173dc:	bd10      	pop	{r4, pc}
   173de:	46c0      	nop			; (mov r8, r8)
   173e0:	00017255 	.word	0x00017255

000173e4 <xQueueReceive>:
{
   173e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   173e6:	46ce      	mov	lr, r9
   173e8:	4647      	mov	r7, r8
   173ea:	b580      	push	{r7, lr}
   173ec:	b085      	sub	sp, #20
   173ee:	1e04      	subs	r4, r0, #0
   173f0:	9100      	str	r1, [sp, #0]
   173f2:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
   173f4:	d00b      	beq.n	1740e <xQueueReceive+0x2a>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   173f6:	9b00      	ldr	r3, [sp, #0]
   173f8:	2b00      	cmp	r3, #0
   173fa:	d00a      	beq.n	17412 <xQueueReceive+0x2e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   173fc:	4ba4      	ldr	r3, [pc, #656]	; (17690 <xQueueReceive+0x2ac>)
   173fe:	4798      	blx	r3
   17400:	2800      	cmp	r0, #0
   17402:	d10b      	bne.n	1741c <xQueueReceive+0x38>
   17404:	9b01      	ldr	r3, [sp, #4]
   17406:	2b00      	cmp	r3, #0
   17408:	d00c      	beq.n	17424 <xQueueReceive+0x40>
   1740a:	b672      	cpsid	i
   1740c:	e7fe      	b.n	1740c <xQueueReceive+0x28>
	configASSERT( ( pxQueue ) );
   1740e:	b672      	cpsid	i
   17410:	e7fe      	b.n	17410 <xQueueReceive+0x2c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   17412:	6c03      	ldr	r3, [r0, #64]	; 0x40
   17414:	2b00      	cmp	r3, #0
   17416:	d0f1      	beq.n	173fc <xQueueReceive+0x18>
   17418:	b672      	cpsid	i
   1741a:	e7fe      	b.n	1741a <xQueueReceive+0x36>
   1741c:	2500      	movs	r5, #0
		taskENTER_CRITICAL();
   1741e:	4b9d      	ldr	r3, [pc, #628]	; (17694 <xQueueReceive+0x2b0>)
   17420:	4698      	mov	r8, r3
   17422:	e0b4      	b.n	1758e <xQueueReceive+0x1aa>
   17424:	2500      	movs	r5, #0
   17426:	e7fa      	b.n	1741e <xQueueReceive+0x3a>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
   17428:	9900      	ldr	r1, [sp, #0]
   1742a:	0020      	movs	r0, r4
   1742c:	4b9a      	ldr	r3, [pc, #616]	; (17698 <xQueueReceive+0x2b4>)
   1742e:	4798      	blx	r3
				traceQUEUE_RECEIVE( pxQueue );
   17430:	4b9a      	ldr	r3, [pc, #616]	; (1769c <xQueueReceive+0x2b8>)
   17432:	4798      	blx	r3
   17434:	4b9a      	ldr	r3, [pc, #616]	; (176a0 <xQueueReceive+0x2bc>)
   17436:	4798      	blx	r3
   17438:	4b9a      	ldr	r3, [pc, #616]	; (176a4 <xQueueReceive+0x2c0>)
   1743a:	881b      	ldrh	r3, [r3, #0]
   1743c:	4203      	tst	r3, r0
   1743e:	d019      	beq.n	17474 <xQueueReceive+0x90>
   17440:	0020      	movs	r0, r4
   17442:	4b99      	ldr	r3, [pc, #612]	; (176a8 <xQueueReceive+0x2c4>)
   17444:	4798      	blx	r3
   17446:	4b97      	ldr	r3, [pc, #604]	; (176a4 <xQueueReceive+0x2c0>)
   17448:	881b      	ldrh	r3, [r3, #0]
   1744a:	4203      	tst	r3, r0
   1744c:	d012      	beq.n	17474 <xQueueReceive+0x90>
   1744e:	0020      	movs	r0, r4
   17450:	4b96      	ldr	r3, [pc, #600]	; (176ac <xQueueReceive+0x2c8>)
   17452:	4698      	mov	r8, r3
   17454:	4798      	blx	r3
   17456:	4f96      	ldr	r7, [pc, #600]	; (176b0 <xQueueReceive+0x2cc>)
   17458:	5c3d      	ldrb	r5, [r7, r0]
   1745a:	3528      	adds	r5, #40	; 0x28
   1745c:	b2ed      	uxtb	r5, r5
   1745e:	0020      	movs	r0, r4
   17460:	47c0      	blx	r8
   17462:	5c3f      	ldrb	r7, [r7, r0]
   17464:	0020      	movs	r0, r4
   17466:	4b93      	ldr	r3, [pc, #588]	; (176b4 <xQueueReceive+0x2d0>)
   17468:	4798      	blx	r3
   1746a:	b2c2      	uxtb	r2, r0
   1746c:	0039      	movs	r1, r7
   1746e:	0028      	movs	r0, r5
   17470:	4b91      	ldr	r3, [pc, #580]	; (176b8 <xQueueReceive+0x2d4>)
   17472:	4798      	blx	r3
   17474:	0020      	movs	r0, r4
   17476:	4f8d      	ldr	r7, [pc, #564]	; (176ac <xQueueReceive+0x2c8>)
   17478:	47b8      	blx	r7
   1747a:	4d8d      	ldr	r5, [pc, #564]	; (176b0 <xQueueReceive+0x2cc>)
   1747c:	5c2b      	ldrb	r3, [r5, r0]
   1747e:	4699      	mov	r9, r3
   17480:	0020      	movs	r0, r4
   17482:	4b8c      	ldr	r3, [pc, #560]	; (176b4 <xQueueReceive+0x2d0>)
   17484:	4798      	blx	r3
   17486:	b2c3      	uxtb	r3, r0
   17488:	4698      	mov	r8, r3
   1748a:	0020      	movs	r0, r4
   1748c:	47b8      	blx	r7
   1748e:	5c2b      	ldrb	r3, [r5, r0]
   17490:	2b02      	cmp	r3, #2
   17492:	d11e      	bne.n	174d2 <xQueueReceive+0xee>
   17494:	4b81      	ldr	r3, [pc, #516]	; (1769c <xQueueReceive+0x2b8>)
   17496:	4798      	blx	r3
   17498:	4b88      	ldr	r3, [pc, #544]	; (176bc <xQueueReceive+0x2d8>)
   1749a:	4798      	blx	r3
   1749c:	b2c2      	uxtb	r2, r0
   1749e:	4641      	mov	r1, r8
   174a0:	4648      	mov	r0, r9
   174a2:	4b87      	ldr	r3, [pc, #540]	; (176c0 <xQueueReceive+0x2dc>)
   174a4:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
   174a6:	3e01      	subs	r6, #1
   174a8:	63a6      	str	r6, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   174aa:	6923      	ldr	r3, [r4, #16]
   174ac:	2b00      	cmp	r3, #0
   174ae:	d007      	beq.n	174c0 <xQueueReceive+0xdc>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   174b0:	0020      	movs	r0, r4
   174b2:	3010      	adds	r0, #16
   174b4:	4b83      	ldr	r3, [pc, #524]	; (176c4 <xQueueReceive+0x2e0>)
   174b6:	4798      	blx	r3
   174b8:	2800      	cmp	r0, #0
   174ba:	d001      	beq.n	174c0 <xQueueReceive+0xdc>
						queueYIELD_IF_USING_PREEMPTION();
   174bc:	4b82      	ldr	r3, [pc, #520]	; (176c8 <xQueueReceive+0x2e4>)
   174be:	4798      	blx	r3
				taskEXIT_CRITICAL();
   174c0:	4b82      	ldr	r3, [pc, #520]	; (176cc <xQueueReceive+0x2e8>)
   174c2:	4798      	blx	r3
				return pdPASS;
   174c4:	2301      	movs	r3, #1
}
   174c6:	0018      	movs	r0, r3
   174c8:	b005      	add	sp, #20
   174ca:	bc0c      	pop	{r2, r3}
   174cc:	4690      	mov	r8, r2
   174ce:	4699      	mov	r9, r3
   174d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
				traceQUEUE_RECEIVE( pxQueue );
   174d2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   174d4:	3a01      	subs	r2, #1
   174d6:	b2d2      	uxtb	r2, r2
   174d8:	e7e1      	b.n	1749e <xQueueReceive+0xba>
					taskEXIT_CRITICAL();
   174da:	4b7c      	ldr	r3, [pc, #496]	; (176cc <xQueueReceive+0x2e8>)
   174dc:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   174de:	4b6f      	ldr	r3, [pc, #444]	; (1769c <xQueueReceive+0x2b8>)
   174e0:	4798      	blx	r3
   174e2:	4b6f      	ldr	r3, [pc, #444]	; (176a0 <xQueueReceive+0x2bc>)
   174e4:	4798      	blx	r3
   174e6:	4b6f      	ldr	r3, [pc, #444]	; (176a4 <xQueueReceive+0x2c0>)
   174e8:	881a      	ldrh	r2, [r3, #0]
					return errQUEUE_EMPTY;
   174ea:	2300      	movs	r3, #0
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   174ec:	4202      	tst	r2, r0
   174ee:	d0ea      	beq.n	174c6 <xQueueReceive+0xe2>
   174f0:	0020      	movs	r0, r4
   174f2:	4b6d      	ldr	r3, [pc, #436]	; (176a8 <xQueueReceive+0x2c4>)
   174f4:	4798      	blx	r3
   174f6:	4b6b      	ldr	r3, [pc, #428]	; (176a4 <xQueueReceive+0x2c0>)
   174f8:	881a      	ldrh	r2, [r3, #0]
					return errQUEUE_EMPTY;
   174fa:	2300      	movs	r3, #0
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   174fc:	4202      	tst	r2, r0
   174fe:	d0e2      	beq.n	174c6 <xQueueReceive+0xe2>
   17500:	0020      	movs	r0, r4
   17502:	4f6a      	ldr	r7, [pc, #424]	; (176ac <xQueueReceive+0x2c8>)
   17504:	47b8      	blx	r7
   17506:	4e6a      	ldr	r6, [pc, #424]	; (176b0 <xQueueReceive+0x2cc>)
   17508:	5c35      	ldrb	r5, [r6, r0]
   1750a:	3550      	adds	r5, #80	; 0x50
   1750c:	b2ed      	uxtb	r5, r5
   1750e:	0020      	movs	r0, r4
   17510:	47b8      	blx	r7
   17512:	5c36      	ldrb	r6, [r6, r0]
   17514:	0020      	movs	r0, r4
   17516:	4b67      	ldr	r3, [pc, #412]	; (176b4 <xQueueReceive+0x2d0>)
   17518:	4798      	blx	r3
   1751a:	b2c2      	uxtb	r2, r0
   1751c:	0031      	movs	r1, r6
   1751e:	0028      	movs	r0, r5
   17520:	4b65      	ldr	r3, [pc, #404]	; (176b8 <xQueueReceive+0x2d4>)
   17522:	4798      	blx	r3
					return errQUEUE_EMPTY;
   17524:	2300      	movs	r3, #0
   17526:	e7ce      	b.n	174c6 <xQueueReceive+0xe2>
					vTaskInternalSetTimeOutState( &xTimeOut );
   17528:	a802      	add	r0, sp, #8
   1752a:	4b69      	ldr	r3, [pc, #420]	; (176d0 <xQueueReceive+0x2ec>)
   1752c:	4798      	blx	r3
   1752e:	e038      	b.n	175a2 <xQueueReceive+0x1be>
		prvLockQueue( pxQueue );
   17530:	2200      	movs	r2, #0
   17532:	2344      	movs	r3, #68	; 0x44
   17534:	54e2      	strb	r2, [r4, r3]
   17536:	e03f      	b.n	175b8 <xQueueReceive+0x1d4>
   17538:	2200      	movs	r2, #0
   1753a:	2345      	movs	r3, #69	; 0x45
   1753c:	54e2      	strb	r2, [r4, r3]
   1753e:	e040      	b.n	175c2 <xQueueReceive+0x1de>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   17540:	0020      	movs	r0, r4
   17542:	4b59      	ldr	r3, [pc, #356]	; (176a8 <xQueueReceive+0x2c4>)
   17544:	4798      	blx	r3
   17546:	4b57      	ldr	r3, [pc, #348]	; (176a4 <xQueueReceive+0x2c0>)
   17548:	881b      	ldrh	r3, [r3, #0]
   1754a:	4203      	tst	r3, r0
   1754c:	d04e      	beq.n	175ec <xQueueReceive+0x208>
   1754e:	0020      	movs	r0, r4
   17550:	4f56      	ldr	r7, [pc, #344]	; (176ac <xQueueReceive+0x2c8>)
   17552:	47b8      	blx	r7
   17554:	4e56      	ldr	r6, [pc, #344]	; (176b0 <xQueueReceive+0x2cc>)
   17556:	5c35      	ldrb	r5, [r6, r0]
   17558:	3568      	adds	r5, #104	; 0x68
   1755a:	b2ed      	uxtb	r5, r5
   1755c:	0020      	movs	r0, r4
   1755e:	47b8      	blx	r7
   17560:	5c36      	ldrb	r6, [r6, r0]
   17562:	0020      	movs	r0, r4
   17564:	4b53      	ldr	r3, [pc, #332]	; (176b4 <xQueueReceive+0x2d0>)
   17566:	4798      	blx	r3
   17568:	b2c2      	uxtb	r2, r0
   1756a:	0031      	movs	r1, r6
   1756c:	0028      	movs	r0, r5
   1756e:	4b52      	ldr	r3, [pc, #328]	; (176b8 <xQueueReceive+0x2d4>)
   17570:	4798      	blx	r3
   17572:	e03b      	b.n	175ec <xQueueReceive+0x208>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   17574:	0020      	movs	r0, r4
   17576:	3024      	adds	r0, #36	; 0x24
   17578:	9901      	ldr	r1, [sp, #4]
   1757a:	4b56      	ldr	r3, [pc, #344]	; (176d4 <xQueueReceive+0x2f0>)
   1757c:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   1757e:	0020      	movs	r0, r4
   17580:	4b55      	ldr	r3, [pc, #340]	; (176d8 <xQueueReceive+0x2f4>)
   17582:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   17584:	4b55      	ldr	r3, [pc, #340]	; (176dc <xQueueReceive+0x2f8>)
   17586:	4798      	blx	r3
   17588:	2800      	cmp	r0, #0
   1758a:	d046      	beq.n	1761a <xQueueReceive+0x236>
   1758c:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
   1758e:	47c0      	blx	r8
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   17590:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   17592:	2e00      	cmp	r6, #0
   17594:	d000      	beq.n	17598 <xQueueReceive+0x1b4>
   17596:	e747      	b.n	17428 <xQueueReceive+0x44>
				if( xTicksToWait == ( TickType_t ) 0 )
   17598:	9b01      	ldr	r3, [sp, #4]
   1759a:	2b00      	cmp	r3, #0
   1759c:	d09d      	beq.n	174da <xQueueReceive+0xf6>
				else if( xEntryTimeSet == pdFALSE )
   1759e:	2d00      	cmp	r5, #0
   175a0:	d0c2      	beq.n	17528 <xQueueReceive+0x144>
		taskEXIT_CRITICAL();
   175a2:	4b4a      	ldr	r3, [pc, #296]	; (176cc <xQueueReceive+0x2e8>)
   175a4:	4798      	blx	r3
		vTaskSuspendAll();
   175a6:	4b4e      	ldr	r3, [pc, #312]	; (176e0 <xQueueReceive+0x2fc>)
   175a8:	4798      	blx	r3
		prvLockQueue( pxQueue );
   175aa:	4b3a      	ldr	r3, [pc, #232]	; (17694 <xQueueReceive+0x2b0>)
   175ac:	4798      	blx	r3
   175ae:	2344      	movs	r3, #68	; 0x44
   175b0:	5ce3      	ldrb	r3, [r4, r3]
   175b2:	b25b      	sxtb	r3, r3
   175b4:	3301      	adds	r3, #1
   175b6:	d0bb      	beq.n	17530 <xQueueReceive+0x14c>
   175b8:	2345      	movs	r3, #69	; 0x45
   175ba:	5ce3      	ldrb	r3, [r4, r3]
   175bc:	b25b      	sxtb	r3, r3
   175be:	3301      	adds	r3, #1
   175c0:	d0ba      	beq.n	17538 <xQueueReceive+0x154>
   175c2:	4b42      	ldr	r3, [pc, #264]	; (176cc <xQueueReceive+0x2e8>)
   175c4:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   175c6:	a901      	add	r1, sp, #4
   175c8:	a802      	add	r0, sp, #8
   175ca:	4b46      	ldr	r3, [pc, #280]	; (176e4 <xQueueReceive+0x300>)
   175cc:	4798      	blx	r3
   175ce:	2800      	cmp	r0, #0
   175d0:	d12c      	bne.n	1762c <xQueueReceive+0x248>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   175d2:	0020      	movs	r0, r4
   175d4:	4b44      	ldr	r3, [pc, #272]	; (176e8 <xQueueReceive+0x304>)
   175d6:	4798      	blx	r3
   175d8:	2800      	cmp	r0, #0
   175da:	d021      	beq.n	17620 <xQueueReceive+0x23c>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   175dc:	4b2f      	ldr	r3, [pc, #188]	; (1769c <xQueueReceive+0x2b8>)
   175de:	4798      	blx	r3
   175e0:	4b2f      	ldr	r3, [pc, #188]	; (176a0 <xQueueReceive+0x2bc>)
   175e2:	4798      	blx	r3
   175e4:	4b2f      	ldr	r3, [pc, #188]	; (176a4 <xQueueReceive+0x2c0>)
   175e6:	881b      	ldrh	r3, [r3, #0]
   175e8:	4203      	tst	r3, r0
   175ea:	d1a9      	bne.n	17540 <xQueueReceive+0x15c>
   175ec:	0020      	movs	r0, r4
   175ee:	4b2f      	ldr	r3, [pc, #188]	; (176ac <xQueueReceive+0x2c8>)
   175f0:	4798      	blx	r3
   175f2:	4b2f      	ldr	r3, [pc, #188]	; (176b0 <xQueueReceive+0x2cc>)
   175f4:	5c1b      	ldrb	r3, [r3, r0]
   175f6:	2b02      	cmp	r3, #2
   175f8:	d0bc      	beq.n	17574 <xQueueReceive+0x190>
   175fa:	4b28      	ldr	r3, [pc, #160]	; (1769c <xQueueReceive+0x2b8>)
   175fc:	4798      	blx	r3
   175fe:	4b28      	ldr	r3, [pc, #160]	; (176a0 <xQueueReceive+0x2bc>)
   17600:	4798      	blx	r3
   17602:	4b28      	ldr	r3, [pc, #160]	; (176a4 <xQueueReceive+0x2c0>)
   17604:	881b      	ldrh	r3, [r3, #0]
   17606:	4203      	tst	r3, r0
   17608:	d0b4      	beq.n	17574 <xQueueReceive+0x190>
   1760a:	4b24      	ldr	r3, [pc, #144]	; (1769c <xQueueReceive+0x2b8>)
   1760c:	4798      	blx	r3
   1760e:	4b2b      	ldr	r3, [pc, #172]	; (176bc <xQueueReceive+0x2d8>)
   17610:	4798      	blx	r3
   17612:	b2c0      	uxtb	r0, r0
   17614:	4b35      	ldr	r3, [pc, #212]	; (176ec <xQueueReceive+0x308>)
   17616:	4798      	blx	r3
   17618:	e7ac      	b.n	17574 <xQueueReceive+0x190>
					portYIELD_WITHIN_API();
   1761a:	4b2b      	ldr	r3, [pc, #172]	; (176c8 <xQueueReceive+0x2e4>)
   1761c:	4798      	blx	r3
   1761e:	e7b5      	b.n	1758c <xQueueReceive+0x1a8>
				prvUnlockQueue( pxQueue );
   17620:	0020      	movs	r0, r4
   17622:	4b2d      	ldr	r3, [pc, #180]	; (176d8 <xQueueReceive+0x2f4>)
   17624:	4798      	blx	r3
				( void ) xTaskResumeAll();
   17626:	4b2d      	ldr	r3, [pc, #180]	; (176dc <xQueueReceive+0x2f8>)
   17628:	4798      	blx	r3
   1762a:	e7af      	b.n	1758c <xQueueReceive+0x1a8>
			prvUnlockQueue( pxQueue );
   1762c:	0020      	movs	r0, r4
   1762e:	4b2a      	ldr	r3, [pc, #168]	; (176d8 <xQueueReceive+0x2f4>)
   17630:	4798      	blx	r3
			( void ) xTaskResumeAll();
   17632:	4b2a      	ldr	r3, [pc, #168]	; (176dc <xQueueReceive+0x2f8>)
   17634:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   17636:	0020      	movs	r0, r4
   17638:	4b2b      	ldr	r3, [pc, #172]	; (176e8 <xQueueReceive+0x304>)
   1763a:	4798      	blx	r3
   1763c:	2800      	cmp	r0, #0
   1763e:	d0a5      	beq.n	1758c <xQueueReceive+0x1a8>
				traceQUEUE_RECEIVE_FAILED( pxQueue );
   17640:	4b16      	ldr	r3, [pc, #88]	; (1769c <xQueueReceive+0x2b8>)
   17642:	4798      	blx	r3
   17644:	4b16      	ldr	r3, [pc, #88]	; (176a0 <xQueueReceive+0x2bc>)
   17646:	4798      	blx	r3
   17648:	4b16      	ldr	r3, [pc, #88]	; (176a4 <xQueueReceive+0x2c0>)
   1764a:	881a      	ldrh	r2, [r3, #0]
				return errQUEUE_EMPTY;
   1764c:	2300      	movs	r3, #0
				traceQUEUE_RECEIVE_FAILED( pxQueue );
   1764e:	4202      	tst	r2, r0
   17650:	d100      	bne.n	17654 <xQueueReceive+0x270>
   17652:	e738      	b.n	174c6 <xQueueReceive+0xe2>
   17654:	0020      	movs	r0, r4
   17656:	4b14      	ldr	r3, [pc, #80]	; (176a8 <xQueueReceive+0x2c4>)
   17658:	4798      	blx	r3
   1765a:	4b12      	ldr	r3, [pc, #72]	; (176a4 <xQueueReceive+0x2c0>)
   1765c:	881a      	ldrh	r2, [r3, #0]
				return errQUEUE_EMPTY;
   1765e:	2300      	movs	r3, #0
				traceQUEUE_RECEIVE_FAILED( pxQueue );
   17660:	4202      	tst	r2, r0
   17662:	d100      	bne.n	17666 <xQueueReceive+0x282>
   17664:	e72f      	b.n	174c6 <xQueueReceive+0xe2>
   17666:	0020      	movs	r0, r4
   17668:	4f10      	ldr	r7, [pc, #64]	; (176ac <xQueueReceive+0x2c8>)
   1766a:	47b8      	blx	r7
   1766c:	4e10      	ldr	r6, [pc, #64]	; (176b0 <xQueueReceive+0x2cc>)
   1766e:	5c35      	ldrb	r5, [r6, r0]
   17670:	3550      	adds	r5, #80	; 0x50
   17672:	b2ed      	uxtb	r5, r5
   17674:	0020      	movs	r0, r4
   17676:	47b8      	blx	r7
   17678:	5c36      	ldrb	r6, [r6, r0]
   1767a:	0020      	movs	r0, r4
   1767c:	4b0d      	ldr	r3, [pc, #52]	; (176b4 <xQueueReceive+0x2d0>)
   1767e:	4798      	blx	r3
   17680:	b2c2      	uxtb	r2, r0
   17682:	0031      	movs	r1, r6
   17684:	0028      	movs	r0, r5
   17686:	4b0c      	ldr	r3, [pc, #48]	; (176b8 <xQueueReceive+0x2d4>)
   17688:	4798      	blx	r3
				return errQUEUE_EMPTY;
   1768a:	2300      	movs	r3, #0
   1768c:	e71b      	b.n	174c6 <xQueueReceive+0xe2>
   1768e:	46c0      	nop			; (mov r8, r8)
   17690:	0001871d 	.word	0x0001871d
   17694:	00016791 	.word	0x00016791
   17698:	00016ab9 	.word	0x00016ab9
   1769c:	00015599 	.word	0x00015599
   176a0:	000153e5 	.word	0x000153e5
   176a4:	200000c8 	.word	0x200000c8
   176a8:	00015449 	.word	0x00015449
   176ac:	000153c9 	.word	0x000153c9
   176b0:	200000c0 	.word	0x200000c0
   176b4:	00015439 	.word	0x00015439
   176b8:	0001621d 	.word	0x0001621d
   176bc:	000153d5 	.word	0x000153d5
   176c0:	00015cf1 	.word	0x00015cf1
   176c4:	00018559 	.word	0x00018559
   176c8:	00016781 	.word	0x00016781
   176cc:	000167a9 	.word	0x000167a9
   176d0:	0001863d 	.word	0x0001863d
   176d4:	00018491 	.word	0x00018491
   176d8:	00016ae1 	.word	0x00016ae1
   176dc:	000180a9 	.word	0x000180a9
   176e0:	00017f01 	.word	0x00017f01
   176e4:	00018655 	.word	0x00018655
   176e8:	00016905 	.word	0x00016905
   176ec:	00015d49 	.word	0x00015d49

000176f0 <xQueueSemaphoreTake>:
{
   176f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   176f2:	46ce      	mov	lr, r9
   176f4:	4647      	mov	r7, r8
   176f6:	b580      	push	{r7, lr}
   176f8:	b085      	sub	sp, #20
   176fa:	1e04      	subs	r4, r0, #0
   176fc:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
   176fe:	d004      	beq.n	1770a <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
   17700:	6c03      	ldr	r3, [r0, #64]	; 0x40
   17702:	2b00      	cmp	r3, #0
   17704:	d003      	beq.n	1770e <xQueueSemaphoreTake+0x1e>
   17706:	b672      	cpsid	i
   17708:	e7fe      	b.n	17708 <xQueueSemaphoreTake+0x18>
	configASSERT( ( pxQueue ) );
   1770a:	b672      	cpsid	i
   1770c:	e7fe      	b.n	1770c <xQueueSemaphoreTake+0x1c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1770e:	4bb2      	ldr	r3, [pc, #712]	; (179d8 <xQueueSemaphoreTake+0x2e8>)
   17710:	4798      	blx	r3
   17712:	2800      	cmp	r0, #0
   17714:	d104      	bne.n	17720 <xQueueSemaphoreTake+0x30>
   17716:	9b01      	ldr	r3, [sp, #4]
   17718:	2b00      	cmp	r3, #0
   1771a:	d006      	beq.n	1772a <xQueueSemaphoreTake+0x3a>
   1771c:	b672      	cpsid	i
   1771e:	e7fe      	b.n	1771e <xQueueSemaphoreTake+0x2e>
   17720:	2500      	movs	r5, #0
   17722:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
   17724:	4bad      	ldr	r3, [pc, #692]	; (179dc <xQueueSemaphoreTake+0x2ec>)
   17726:	4698      	mov	r8, r3
   17728:	e0bd      	b.n	178a6 <xQueueSemaphoreTake+0x1b6>
   1772a:	2500      	movs	r5, #0
   1772c:	2700      	movs	r7, #0
   1772e:	e7f9      	b.n	17724 <xQueueSemaphoreTake+0x34>
				traceQUEUE_RECEIVE( pxQueue );
   17730:	4bab      	ldr	r3, [pc, #684]	; (179e0 <xQueueSemaphoreTake+0x2f0>)
   17732:	4798      	blx	r3
   17734:	4bab      	ldr	r3, [pc, #684]	; (179e4 <xQueueSemaphoreTake+0x2f4>)
   17736:	4798      	blx	r3
   17738:	4bab      	ldr	r3, [pc, #684]	; (179e8 <xQueueSemaphoreTake+0x2f8>)
   1773a:	881b      	ldrh	r3, [r3, #0]
   1773c:	4203      	tst	r3, r0
   1773e:	d019      	beq.n	17774 <xQueueSemaphoreTake+0x84>
   17740:	0020      	movs	r0, r4
   17742:	4baa      	ldr	r3, [pc, #680]	; (179ec <xQueueSemaphoreTake+0x2fc>)
   17744:	4798      	blx	r3
   17746:	4ba8      	ldr	r3, [pc, #672]	; (179e8 <xQueueSemaphoreTake+0x2f8>)
   17748:	881b      	ldrh	r3, [r3, #0]
   1774a:	4203      	tst	r3, r0
   1774c:	d012      	beq.n	17774 <xQueueSemaphoreTake+0x84>
   1774e:	0020      	movs	r0, r4
   17750:	4ba7      	ldr	r3, [pc, #668]	; (179f0 <xQueueSemaphoreTake+0x300>)
   17752:	4698      	mov	r8, r3
   17754:	4798      	blx	r3
   17756:	4fa7      	ldr	r7, [pc, #668]	; (179f4 <xQueueSemaphoreTake+0x304>)
   17758:	5c3d      	ldrb	r5, [r7, r0]
   1775a:	3528      	adds	r5, #40	; 0x28
   1775c:	b2ed      	uxtb	r5, r5
   1775e:	0020      	movs	r0, r4
   17760:	47c0      	blx	r8
   17762:	5c3f      	ldrb	r7, [r7, r0]
   17764:	0020      	movs	r0, r4
   17766:	4ba4      	ldr	r3, [pc, #656]	; (179f8 <xQueueSemaphoreTake+0x308>)
   17768:	4798      	blx	r3
   1776a:	b2c2      	uxtb	r2, r0
   1776c:	0039      	movs	r1, r7
   1776e:	0028      	movs	r0, r5
   17770:	4ba2      	ldr	r3, [pc, #648]	; (179fc <xQueueSemaphoreTake+0x30c>)
   17772:	4798      	blx	r3
   17774:	0020      	movs	r0, r4
   17776:	4f9e      	ldr	r7, [pc, #632]	; (179f0 <xQueueSemaphoreTake+0x300>)
   17778:	47b8      	blx	r7
   1777a:	4d9e      	ldr	r5, [pc, #632]	; (179f4 <xQueueSemaphoreTake+0x304>)
   1777c:	5c2b      	ldrb	r3, [r5, r0]
   1777e:	4699      	mov	r9, r3
   17780:	0020      	movs	r0, r4
   17782:	4b9d      	ldr	r3, [pc, #628]	; (179f8 <xQueueSemaphoreTake+0x308>)
   17784:	4798      	blx	r3
   17786:	b2c3      	uxtb	r3, r0
   17788:	4698      	mov	r8, r3
   1778a:	0020      	movs	r0, r4
   1778c:	47b8      	blx	r7
   1778e:	5c2b      	ldrb	r3, [r5, r0]
   17790:	2b02      	cmp	r3, #2
   17792:	d124      	bne.n	177de <xQueueSemaphoreTake+0xee>
   17794:	4b92      	ldr	r3, [pc, #584]	; (179e0 <xQueueSemaphoreTake+0x2f0>)
   17796:	4798      	blx	r3
   17798:	4b99      	ldr	r3, [pc, #612]	; (17a00 <xQueueSemaphoreTake+0x310>)
   1779a:	4798      	blx	r3
   1779c:	b2c2      	uxtb	r2, r0
   1779e:	4641      	mov	r1, r8
   177a0:	4648      	mov	r0, r9
   177a2:	4b98      	ldr	r3, [pc, #608]	; (17a04 <xQueueSemaphoreTake+0x314>)
   177a4:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
   177a6:	3e01      	subs	r6, #1
   177a8:	63a6      	str	r6, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   177aa:	6823      	ldr	r3, [r4, #0]
   177ac:	2b00      	cmp	r3, #0
   177ae:	d102      	bne.n	177b6 <xQueueSemaphoreTake+0xc6>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
   177b0:	4b95      	ldr	r3, [pc, #596]	; (17a08 <xQueueSemaphoreTake+0x318>)
   177b2:	4798      	blx	r3
   177b4:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   177b6:	6923      	ldr	r3, [r4, #16]
   177b8:	2b00      	cmp	r3, #0
   177ba:	d007      	beq.n	177cc <xQueueSemaphoreTake+0xdc>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   177bc:	0020      	movs	r0, r4
   177be:	3010      	adds	r0, #16
   177c0:	4b92      	ldr	r3, [pc, #584]	; (17a0c <xQueueSemaphoreTake+0x31c>)
   177c2:	4798      	blx	r3
   177c4:	2800      	cmp	r0, #0
   177c6:	d001      	beq.n	177cc <xQueueSemaphoreTake+0xdc>
						queueYIELD_IF_USING_PREEMPTION();
   177c8:	4b91      	ldr	r3, [pc, #580]	; (17a10 <xQueueSemaphoreTake+0x320>)
   177ca:	4798      	blx	r3
				taskEXIT_CRITICAL();
   177cc:	4b91      	ldr	r3, [pc, #580]	; (17a14 <xQueueSemaphoreTake+0x324>)
   177ce:	4798      	blx	r3
				return pdPASS;
   177d0:	2501      	movs	r5, #1
}
   177d2:	0028      	movs	r0, r5
   177d4:	b005      	add	sp, #20
   177d6:	bc0c      	pop	{r2, r3}
   177d8:	4690      	mov	r8, r2
   177da:	4699      	mov	r9, r3
   177dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
				traceQUEUE_RECEIVE( pxQueue );
   177de:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   177e0:	3a01      	subs	r2, #1
   177e2:	b2d2      	uxtb	r2, r2
   177e4:	e7db      	b.n	1779e <xQueueSemaphoreTake+0xae>
						configASSERT( xInheritanceOccurred == pdFALSE );
   177e6:	2d00      	cmp	r5, #0
   177e8:	d001      	beq.n	177ee <xQueueSemaphoreTake+0xfe>
   177ea:	b672      	cpsid	i
   177ec:	e7fe      	b.n	177ec <xQueueSemaphoreTake+0xfc>
					taskEXIT_CRITICAL();
   177ee:	4b89      	ldr	r3, [pc, #548]	; (17a14 <xQueueSemaphoreTake+0x324>)
   177f0:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   177f2:	4b7b      	ldr	r3, [pc, #492]	; (179e0 <xQueueSemaphoreTake+0x2f0>)
   177f4:	4798      	blx	r3
   177f6:	4b7b      	ldr	r3, [pc, #492]	; (179e4 <xQueueSemaphoreTake+0x2f4>)
   177f8:	4798      	blx	r3
   177fa:	4b7b      	ldr	r3, [pc, #492]	; (179e8 <xQueueSemaphoreTake+0x2f8>)
   177fc:	881b      	ldrh	r3, [r3, #0]
   177fe:	4203      	tst	r3, r0
   17800:	d0e7      	beq.n	177d2 <xQueueSemaphoreTake+0xe2>
   17802:	0020      	movs	r0, r4
   17804:	4b79      	ldr	r3, [pc, #484]	; (179ec <xQueueSemaphoreTake+0x2fc>)
   17806:	4798      	blx	r3
   17808:	4b77      	ldr	r3, [pc, #476]	; (179e8 <xQueueSemaphoreTake+0x2f8>)
   1780a:	881b      	ldrh	r3, [r3, #0]
   1780c:	4203      	tst	r3, r0
   1780e:	d0e0      	beq.n	177d2 <xQueueSemaphoreTake+0xe2>
   17810:	0020      	movs	r0, r4
   17812:	4b77      	ldr	r3, [pc, #476]	; (179f0 <xQueueSemaphoreTake+0x300>)
   17814:	4698      	mov	r8, r3
   17816:	4798      	blx	r3
   17818:	4f76      	ldr	r7, [pc, #472]	; (179f4 <xQueueSemaphoreTake+0x304>)
   1781a:	5c3e      	ldrb	r6, [r7, r0]
   1781c:	3650      	adds	r6, #80	; 0x50
   1781e:	b2f6      	uxtb	r6, r6
   17820:	0020      	movs	r0, r4
   17822:	47c0      	blx	r8
   17824:	5c3f      	ldrb	r7, [r7, r0]
   17826:	0020      	movs	r0, r4
   17828:	4b73      	ldr	r3, [pc, #460]	; (179f8 <xQueueSemaphoreTake+0x308>)
   1782a:	4798      	blx	r3
   1782c:	b2c2      	uxtb	r2, r0
   1782e:	0039      	movs	r1, r7
   17830:	0030      	movs	r0, r6
   17832:	4b72      	ldr	r3, [pc, #456]	; (179fc <xQueueSemaphoreTake+0x30c>)
   17834:	4798      	blx	r3
   17836:	e7cc      	b.n	177d2 <xQueueSemaphoreTake+0xe2>
					vTaskInternalSetTimeOutState( &xTimeOut );
   17838:	a802      	add	r0, sp, #8
   1783a:	4b77      	ldr	r3, [pc, #476]	; (17a18 <xQueueSemaphoreTake+0x328>)
   1783c:	4798      	blx	r3
   1783e:	e03c      	b.n	178ba <xQueueSemaphoreTake+0x1ca>
		prvLockQueue( pxQueue );
   17840:	2200      	movs	r2, #0
   17842:	2344      	movs	r3, #68	; 0x44
   17844:	54e2      	strb	r2, [r4, r3]
   17846:	e043      	b.n	178d0 <xQueueSemaphoreTake+0x1e0>
   17848:	2200      	movs	r2, #0
   1784a:	2345      	movs	r3, #69	; 0x45
   1784c:	54e2      	strb	r2, [r4, r3]
   1784e:	e044      	b.n	178da <xQueueSemaphoreTake+0x1ea>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   17850:	0020      	movs	r0, r4
   17852:	4b66      	ldr	r3, [pc, #408]	; (179ec <xQueueSemaphoreTake+0x2fc>)
   17854:	4798      	blx	r3
   17856:	4b64      	ldr	r3, [pc, #400]	; (179e8 <xQueueSemaphoreTake+0x2f8>)
   17858:	881b      	ldrh	r3, [r3, #0]
   1785a:	4203      	tst	r3, r0
   1785c:	d052      	beq.n	17904 <xQueueSemaphoreTake+0x214>
   1785e:	0020      	movs	r0, r4
   17860:	4b63      	ldr	r3, [pc, #396]	; (179f0 <xQueueSemaphoreTake+0x300>)
   17862:	4699      	mov	r9, r3
   17864:	4798      	blx	r3
   17866:	4f63      	ldr	r7, [pc, #396]	; (179f4 <xQueueSemaphoreTake+0x304>)
   17868:	5c3e      	ldrb	r6, [r7, r0]
   1786a:	3668      	adds	r6, #104	; 0x68
   1786c:	b2f6      	uxtb	r6, r6
   1786e:	0020      	movs	r0, r4
   17870:	47c8      	blx	r9
   17872:	5c3f      	ldrb	r7, [r7, r0]
   17874:	0020      	movs	r0, r4
   17876:	4b60      	ldr	r3, [pc, #384]	; (179f8 <xQueueSemaphoreTake+0x308>)
   17878:	4798      	blx	r3
   1787a:	b2c2      	uxtb	r2, r0
   1787c:	0039      	movs	r1, r7
   1787e:	0030      	movs	r0, r6
   17880:	4b5e      	ldr	r3, [pc, #376]	; (179fc <xQueueSemaphoreTake+0x30c>)
   17882:	4798      	blx	r3
   17884:	e03e      	b.n	17904 <xQueueSemaphoreTake+0x214>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   17886:	6823      	ldr	r3, [r4, #0]
   17888:	2b00      	cmp	r3, #0
   1788a:	d052      	beq.n	17932 <xQueueSemaphoreTake+0x242>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1788c:	0020      	movs	r0, r4
   1788e:	3024      	adds	r0, #36	; 0x24
   17890:	9901      	ldr	r1, [sp, #4]
   17892:	4b62      	ldr	r3, [pc, #392]	; (17a1c <xQueueSemaphoreTake+0x32c>)
   17894:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   17896:	0020      	movs	r0, r4
   17898:	4b61      	ldr	r3, [pc, #388]	; (17a20 <xQueueSemaphoreTake+0x330>)
   1789a:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1789c:	4b61      	ldr	r3, [pc, #388]	; (17a24 <xQueueSemaphoreTake+0x334>)
   1789e:	4798      	blx	r3
   178a0:	2800      	cmp	r0, #0
   178a2:	d04f      	beq.n	17944 <xQueueSemaphoreTake+0x254>
   178a4:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
   178a6:	47c0      	blx	r8
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
   178a8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
   178aa:	2e00      	cmp	r6, #0
   178ac:	d000      	beq.n	178b0 <xQueueSemaphoreTake+0x1c0>
   178ae:	e73f      	b.n	17730 <xQueueSemaphoreTake+0x40>
				if( xTicksToWait == ( TickType_t ) 0 )
   178b0:	9b01      	ldr	r3, [sp, #4]
   178b2:	2b00      	cmp	r3, #0
   178b4:	d097      	beq.n	177e6 <xQueueSemaphoreTake+0xf6>
				else if( xEntryTimeSet == pdFALSE )
   178b6:	2f00      	cmp	r7, #0
   178b8:	d0be      	beq.n	17838 <xQueueSemaphoreTake+0x148>
		taskEXIT_CRITICAL();
   178ba:	4b56      	ldr	r3, [pc, #344]	; (17a14 <xQueueSemaphoreTake+0x324>)
   178bc:	4798      	blx	r3
		vTaskSuspendAll();
   178be:	4b5a      	ldr	r3, [pc, #360]	; (17a28 <xQueueSemaphoreTake+0x338>)
   178c0:	4798      	blx	r3
		prvLockQueue( pxQueue );
   178c2:	4b46      	ldr	r3, [pc, #280]	; (179dc <xQueueSemaphoreTake+0x2ec>)
   178c4:	4798      	blx	r3
   178c6:	2344      	movs	r3, #68	; 0x44
   178c8:	5ce3      	ldrb	r3, [r4, r3]
   178ca:	b25b      	sxtb	r3, r3
   178cc:	3301      	adds	r3, #1
   178ce:	d0b7      	beq.n	17840 <xQueueSemaphoreTake+0x150>
   178d0:	2345      	movs	r3, #69	; 0x45
   178d2:	5ce3      	ldrb	r3, [r4, r3]
   178d4:	b25b      	sxtb	r3, r3
   178d6:	3301      	adds	r3, #1
   178d8:	d0b6      	beq.n	17848 <xQueueSemaphoreTake+0x158>
   178da:	4b4e      	ldr	r3, [pc, #312]	; (17a14 <xQueueSemaphoreTake+0x324>)
   178dc:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   178de:	a901      	add	r1, sp, #4
   178e0:	a802      	add	r0, sp, #8
   178e2:	4b52      	ldr	r3, [pc, #328]	; (17a2c <xQueueSemaphoreTake+0x33c>)
   178e4:	4798      	blx	r3
   178e6:	2800      	cmp	r0, #0
   178e8:	d135      	bne.n	17956 <xQueueSemaphoreTake+0x266>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   178ea:	0020      	movs	r0, r4
   178ec:	4b50      	ldr	r3, [pc, #320]	; (17a30 <xQueueSemaphoreTake+0x340>)
   178ee:	4798      	blx	r3
   178f0:	2800      	cmp	r0, #0
   178f2:	d02a      	beq.n	1794a <xQueueSemaphoreTake+0x25a>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   178f4:	4b3a      	ldr	r3, [pc, #232]	; (179e0 <xQueueSemaphoreTake+0x2f0>)
   178f6:	4798      	blx	r3
   178f8:	4b3a      	ldr	r3, [pc, #232]	; (179e4 <xQueueSemaphoreTake+0x2f4>)
   178fa:	4798      	blx	r3
   178fc:	4b3a      	ldr	r3, [pc, #232]	; (179e8 <xQueueSemaphoreTake+0x2f8>)
   178fe:	881b      	ldrh	r3, [r3, #0]
   17900:	4203      	tst	r3, r0
   17902:	d1a5      	bne.n	17850 <xQueueSemaphoreTake+0x160>
   17904:	0020      	movs	r0, r4
   17906:	4b3a      	ldr	r3, [pc, #232]	; (179f0 <xQueueSemaphoreTake+0x300>)
   17908:	4798      	blx	r3
   1790a:	4b3a      	ldr	r3, [pc, #232]	; (179f4 <xQueueSemaphoreTake+0x304>)
   1790c:	5c1b      	ldrb	r3, [r3, r0]
   1790e:	2b02      	cmp	r3, #2
   17910:	d0b9      	beq.n	17886 <xQueueSemaphoreTake+0x196>
   17912:	4b33      	ldr	r3, [pc, #204]	; (179e0 <xQueueSemaphoreTake+0x2f0>)
   17914:	4798      	blx	r3
   17916:	4b33      	ldr	r3, [pc, #204]	; (179e4 <xQueueSemaphoreTake+0x2f4>)
   17918:	4798      	blx	r3
   1791a:	4b33      	ldr	r3, [pc, #204]	; (179e8 <xQueueSemaphoreTake+0x2f8>)
   1791c:	881b      	ldrh	r3, [r3, #0]
   1791e:	4203      	tst	r3, r0
   17920:	d0b1      	beq.n	17886 <xQueueSemaphoreTake+0x196>
   17922:	4b2f      	ldr	r3, [pc, #188]	; (179e0 <xQueueSemaphoreTake+0x2f0>)
   17924:	4798      	blx	r3
   17926:	4b36      	ldr	r3, [pc, #216]	; (17a00 <xQueueSemaphoreTake+0x310>)
   17928:	4798      	blx	r3
   1792a:	b2c0      	uxtb	r0, r0
   1792c:	4b41      	ldr	r3, [pc, #260]	; (17a34 <xQueueSemaphoreTake+0x344>)
   1792e:	4798      	blx	r3
   17930:	e7a9      	b.n	17886 <xQueueSemaphoreTake+0x196>
						taskENTER_CRITICAL();
   17932:	4b2a      	ldr	r3, [pc, #168]	; (179dc <xQueueSemaphoreTake+0x2ec>)
   17934:	4798      	blx	r3
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   17936:	6860      	ldr	r0, [r4, #4]
   17938:	4b3f      	ldr	r3, [pc, #252]	; (17a38 <xQueueSemaphoreTake+0x348>)
   1793a:	4798      	blx	r3
   1793c:	0005      	movs	r5, r0
						taskEXIT_CRITICAL();
   1793e:	4b35      	ldr	r3, [pc, #212]	; (17a14 <xQueueSemaphoreTake+0x324>)
   17940:	4798      	blx	r3
   17942:	e7a3      	b.n	1788c <xQueueSemaphoreTake+0x19c>
					portYIELD_WITHIN_API();
   17944:	4b32      	ldr	r3, [pc, #200]	; (17a10 <xQueueSemaphoreTake+0x320>)
   17946:	4798      	blx	r3
   17948:	e7ac      	b.n	178a4 <xQueueSemaphoreTake+0x1b4>
				prvUnlockQueue( pxQueue );
   1794a:	0020      	movs	r0, r4
   1794c:	4b34      	ldr	r3, [pc, #208]	; (17a20 <xQueueSemaphoreTake+0x330>)
   1794e:	4798      	blx	r3
				( void ) xTaskResumeAll();
   17950:	4b34      	ldr	r3, [pc, #208]	; (17a24 <xQueueSemaphoreTake+0x334>)
   17952:	4798      	blx	r3
   17954:	e7a6      	b.n	178a4 <xQueueSemaphoreTake+0x1b4>
			prvUnlockQueue( pxQueue );
   17956:	0020      	movs	r0, r4
   17958:	4b31      	ldr	r3, [pc, #196]	; (17a20 <xQueueSemaphoreTake+0x330>)
   1795a:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1795c:	4b31      	ldr	r3, [pc, #196]	; (17a24 <xQueueSemaphoreTake+0x334>)
   1795e:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   17960:	0020      	movs	r0, r4
   17962:	4b33      	ldr	r3, [pc, #204]	; (17a30 <xQueueSemaphoreTake+0x340>)
   17964:	4798      	blx	r3
   17966:	2800      	cmp	r0, #0
   17968:	d09c      	beq.n	178a4 <xQueueSemaphoreTake+0x1b4>
					if( xInheritanceOccurred != pdFALSE )
   1796a:	2d00      	cmp	r5, #0
   1796c:	d00e      	beq.n	1798c <xQueueSemaphoreTake+0x29c>
						taskENTER_CRITICAL();
   1796e:	4b1b      	ldr	r3, [pc, #108]	; (179dc <xQueueSemaphoreTake+0x2ec>)
   17970:	4798      	blx	r3
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
   17972:	6a63      	ldr	r3, [r4, #36]	; 0x24
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
   17974:	2100      	movs	r1, #0
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
   17976:	2b00      	cmp	r3, #0
   17978:	d003      	beq.n	17982 <xQueueSemaphoreTake+0x292>
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
   1797a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1797c:	681b      	ldr	r3, [r3, #0]
   1797e:	3105      	adds	r1, #5
   17980:	1ac9      	subs	r1, r1, r3
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
   17982:	6860      	ldr	r0, [r4, #4]
   17984:	4b2d      	ldr	r3, [pc, #180]	; (17a3c <xQueueSemaphoreTake+0x34c>)
   17986:	4798      	blx	r3
						taskEXIT_CRITICAL();
   17988:	4b22      	ldr	r3, [pc, #136]	; (17a14 <xQueueSemaphoreTake+0x324>)
   1798a:	4798      	blx	r3
				traceQUEUE_RECEIVE_FAILED( pxQueue );
   1798c:	4b14      	ldr	r3, [pc, #80]	; (179e0 <xQueueSemaphoreTake+0x2f0>)
   1798e:	4798      	blx	r3
   17990:	4b14      	ldr	r3, [pc, #80]	; (179e4 <xQueueSemaphoreTake+0x2f4>)
   17992:	4798      	blx	r3
   17994:	4b14      	ldr	r3, [pc, #80]	; (179e8 <xQueueSemaphoreTake+0x2f8>)
   17996:	881b      	ldrh	r3, [r3, #0]
				return errQUEUE_EMPTY;
   17998:	2500      	movs	r5, #0
				traceQUEUE_RECEIVE_FAILED( pxQueue );
   1799a:	4203      	tst	r3, r0
   1799c:	d100      	bne.n	179a0 <xQueueSemaphoreTake+0x2b0>
   1799e:	e718      	b.n	177d2 <xQueueSemaphoreTake+0xe2>
   179a0:	0020      	movs	r0, r4
   179a2:	4b12      	ldr	r3, [pc, #72]	; (179ec <xQueueSemaphoreTake+0x2fc>)
   179a4:	4798      	blx	r3
   179a6:	4b10      	ldr	r3, [pc, #64]	; (179e8 <xQueueSemaphoreTake+0x2f8>)
   179a8:	881b      	ldrh	r3, [r3, #0]
   179aa:	4203      	tst	r3, r0
   179ac:	d100      	bne.n	179b0 <xQueueSemaphoreTake+0x2c0>
   179ae:	e710      	b.n	177d2 <xQueueSemaphoreTake+0xe2>
   179b0:	0020      	movs	r0, r4
   179b2:	4f0f      	ldr	r7, [pc, #60]	; (179f0 <xQueueSemaphoreTake+0x300>)
   179b4:	47b8      	blx	r7
   179b6:	4e0f      	ldr	r6, [pc, #60]	; (179f4 <xQueueSemaphoreTake+0x304>)
   179b8:	5c35      	ldrb	r5, [r6, r0]
   179ba:	3550      	adds	r5, #80	; 0x50
   179bc:	b2ed      	uxtb	r5, r5
   179be:	0020      	movs	r0, r4
   179c0:	47b8      	blx	r7
   179c2:	5c36      	ldrb	r6, [r6, r0]
   179c4:	0020      	movs	r0, r4
   179c6:	4b0c      	ldr	r3, [pc, #48]	; (179f8 <xQueueSemaphoreTake+0x308>)
   179c8:	4798      	blx	r3
   179ca:	b2c2      	uxtb	r2, r0
   179cc:	0031      	movs	r1, r6
   179ce:	0028      	movs	r0, r5
   179d0:	4b0a      	ldr	r3, [pc, #40]	; (179fc <xQueueSemaphoreTake+0x30c>)
   179d2:	4798      	blx	r3
				return errQUEUE_EMPTY;
   179d4:	2500      	movs	r5, #0
   179d6:	e6fc      	b.n	177d2 <xQueueSemaphoreTake+0xe2>
   179d8:	0001871d 	.word	0x0001871d
   179dc:	00016791 	.word	0x00016791
   179e0:	00015599 	.word	0x00015599
   179e4:	000153e5 	.word	0x000153e5
   179e8:	200000c8 	.word	0x200000c8
   179ec:	00015449 	.word	0x00015449
   179f0:	000153c9 	.word	0x000153c9
   179f4:	200000c0 	.word	0x200000c0
   179f8:	00015439 	.word	0x00015439
   179fc:	0001621d 	.word	0x0001621d
   17a00:	000153d5 	.word	0x000153d5
   17a04:	00015cf1 	.word	0x00015cf1
   17a08:	00018a4d 	.word	0x00018a4d
   17a0c:	00018559 	.word	0x00018559
   17a10:	00016781 	.word	0x00016781
   17a14:	000167a9 	.word	0x000167a9
   17a18:	0001863d 	.word	0x0001863d
   17a1c:	00018491 	.word	0x00018491
   17a20:	00016ae1 	.word	0x00016ae1
   17a24:	000180a9 	.word	0x000180a9
   17a28:	00017f01 	.word	0x00017f01
   17a2c:	00018655 	.word	0x00018655
   17a30:	00016905 	.word	0x00016905
   17a34:	00015d49 	.word	0x00015d49
   17a38:	0001873d 	.word	0x0001873d
   17a3c:	00018949 	.word	0x00018949

00017a40 <uxQueueGetQueueNumber>:
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
   17a40:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
	}
   17a42:	4770      	bx	lr

00017a44 <vQueueSetQueueNumber>:
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
   17a44:	64c1      	str	r1, [r0, #76]	; 0x4c
	}
   17a46:	4770      	bx	lr

00017a48 <ucQueueGetQueueType>:
		return ( ( Queue_t * ) xQueue )->ucQueueType;
   17a48:	2350      	movs	r3, #80	; 0x50
   17a4a:	5cc0      	ldrb	r0, [r0, r3]
	}
   17a4c:	4770      	bx	lr
	...

00017a50 <vQueueWaitForMessageRestricted>:
	{
   17a50:	b570      	push	{r4, r5, r6, lr}
   17a52:	0004      	movs	r4, r0
   17a54:	000d      	movs	r5, r1
   17a56:	0016      	movs	r6, r2
		prvLockQueue( pxQueue );
   17a58:	4b11      	ldr	r3, [pc, #68]	; (17aa0 <vQueueWaitForMessageRestricted+0x50>)
   17a5a:	4798      	blx	r3
   17a5c:	2344      	movs	r3, #68	; 0x44
   17a5e:	5ce3      	ldrb	r3, [r4, r3]
   17a60:	b25b      	sxtb	r3, r3
   17a62:	3301      	adds	r3, #1
   17a64:	d00d      	beq.n	17a82 <vQueueWaitForMessageRestricted+0x32>
   17a66:	2345      	movs	r3, #69	; 0x45
   17a68:	5ce3      	ldrb	r3, [r4, r3]
   17a6a:	b25b      	sxtb	r3, r3
   17a6c:	3301      	adds	r3, #1
   17a6e:	d00c      	beq.n	17a8a <vQueueWaitForMessageRestricted+0x3a>
   17a70:	4b0c      	ldr	r3, [pc, #48]	; (17aa4 <vQueueWaitForMessageRestricted+0x54>)
   17a72:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   17a74:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   17a76:	2b00      	cmp	r3, #0
   17a78:	d00b      	beq.n	17a92 <vQueueWaitForMessageRestricted+0x42>
		prvUnlockQueue( pxQueue );
   17a7a:	0020      	movs	r0, r4
   17a7c:	4b0a      	ldr	r3, [pc, #40]	; (17aa8 <vQueueWaitForMessageRestricted+0x58>)
   17a7e:	4798      	blx	r3
	}
   17a80:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
   17a82:	2200      	movs	r2, #0
   17a84:	2344      	movs	r3, #68	; 0x44
   17a86:	54e2      	strb	r2, [r4, r3]
   17a88:	e7ed      	b.n	17a66 <vQueueWaitForMessageRestricted+0x16>
   17a8a:	2200      	movs	r2, #0
   17a8c:	2345      	movs	r3, #69	; 0x45
   17a8e:	54e2      	strb	r2, [r4, r3]
   17a90:	e7ee      	b.n	17a70 <vQueueWaitForMessageRestricted+0x20>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
   17a92:	0020      	movs	r0, r4
   17a94:	3024      	adds	r0, #36	; 0x24
   17a96:	0032      	movs	r2, r6
   17a98:	0029      	movs	r1, r5
   17a9a:	4b04      	ldr	r3, [pc, #16]	; (17aac <vQueueWaitForMessageRestricted+0x5c>)
   17a9c:	4798      	blx	r3
   17a9e:	e7ec      	b.n	17a7a <vQueueWaitForMessageRestricted+0x2a>
   17aa0:	00016791 	.word	0x00016791
   17aa4:	000167a9 	.word	0x000167a9
   17aa8:	00016ae1 	.word	0x00016ae1
   17aac:	000184bd 	.word	0x000184bd

00017ab0 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   17ab0:	4b08      	ldr	r3, [pc, #32]	; (17ad4 <prvResetNextTaskUnblockTime+0x24>)
   17ab2:	681b      	ldr	r3, [r3, #0]
   17ab4:	681b      	ldr	r3, [r3, #0]
   17ab6:	2b00      	cmp	r3, #0
   17ab8:	d007      	beq.n	17aca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   17aba:	4b06      	ldr	r3, [pc, #24]	; (17ad4 <prvResetNextTaskUnblockTime+0x24>)
   17abc:	681b      	ldr	r3, [r3, #0]
   17abe:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   17ac0:	68db      	ldr	r3, [r3, #12]
   17ac2:	685a      	ldr	r2, [r3, #4]
   17ac4:	4b04      	ldr	r3, [pc, #16]	; (17ad8 <prvResetNextTaskUnblockTime+0x28>)
   17ac6:	601a      	str	r2, [r3, #0]
	}
}
   17ac8:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
   17aca:	2201      	movs	r2, #1
   17acc:	4252      	negs	r2, r2
   17ace:	4b02      	ldr	r3, [pc, #8]	; (17ad8 <prvResetNextTaskUnblockTime+0x28>)
   17ad0:	601a      	str	r2, [r3, #0]
   17ad2:	e7f9      	b.n	17ac8 <prvResetNextTaskUnblockTime+0x18>
   17ad4:	20003ae4 	.word	0x20003ae4
   17ad8:	20003b94 	.word	0x20003b94

00017adc <prvIdleTask>:
{
   17adc:	b5f0      	push	{r4, r5, r6, r7, lr}
   17ade:	46d6      	mov	lr, sl
   17ae0:	464f      	mov	r7, r9
   17ae2:	4646      	mov	r6, r8
   17ae4:	b5c0      	push	{r6, r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   17ae6:	4b14      	ldr	r3, [pc, #80]	; (17b38 <prvIdleTask+0x5c>)
   17ae8:	4699      	mov	r9, r3
			taskENTER_CRITICAL();
   17aea:	4b14      	ldr	r3, [pc, #80]	; (17b3c <prvIdleTask+0x60>)
   17aec:	4698      	mov	r8, r3
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   17aee:	4f14      	ldr	r7, [pc, #80]	; (17b40 <prvIdleTask+0x64>)
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   17af0:	4b14      	ldr	r3, [pc, #80]	; (17b44 <prvIdleTask+0x68>)
   17af2:	469a      	mov	sl, r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   17af4:	464b      	mov	r3, r9
   17af6:	681b      	ldr	r3, [r3, #0]
   17af8:	2b00      	cmp	r3, #0
   17afa:	d016      	beq.n	17b2a <prvIdleTask+0x4e>
			taskENTER_CRITICAL();
   17afc:	47c0      	blx	r8
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   17afe:	68fb      	ldr	r3, [r7, #12]
   17b00:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   17b02:	1d28      	adds	r0, r5, #4
   17b04:	47d0      	blx	sl
				--uxCurrentNumberOfTasks;
   17b06:	4a10      	ldr	r2, [pc, #64]	; (17b48 <prvIdleTask+0x6c>)
   17b08:	6813      	ldr	r3, [r2, #0]
   17b0a:	3b01      	subs	r3, #1
   17b0c:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
   17b0e:	4c0a      	ldr	r4, [pc, #40]	; (17b38 <prvIdleTask+0x5c>)
   17b10:	6823      	ldr	r3, [r4, #0]
   17b12:	3b01      	subs	r3, #1
   17b14:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
   17b16:	4b0d      	ldr	r3, [pc, #52]	; (17b4c <prvIdleTask+0x70>)
   17b18:	4798      	blx	r3
			vPortFree( pxTCB->pxStack );
   17b1a:	6b28      	ldr	r0, [r5, #48]	; 0x30
   17b1c:	4e0c      	ldr	r6, [pc, #48]	; (17b50 <prvIdleTask+0x74>)
   17b1e:	47b0      	blx	r6
			vPortFree( pxTCB );
   17b20:	0028      	movs	r0, r5
   17b22:	47b0      	blx	r6
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   17b24:	6823      	ldr	r3, [r4, #0]
   17b26:	2b00      	cmp	r3, #0
   17b28:	d1e8      	bne.n	17afc <prvIdleTask+0x20>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   17b2a:	4b0a      	ldr	r3, [pc, #40]	; (17b54 <prvIdleTask+0x78>)
   17b2c:	681b      	ldr	r3, [r3, #0]
   17b2e:	2b01      	cmp	r3, #1
   17b30:	d9e0      	bls.n	17af4 <prvIdleTask+0x18>
				taskYIELD();
   17b32:	4b09      	ldr	r3, [pc, #36]	; (17b58 <prvIdleTask+0x7c>)
   17b34:	4798      	blx	r3
   17b36:	e7dd      	b.n	17af4 <prvIdleTask+0x18>
   17b38:	20003b54 	.word	0x20003b54
   17b3c:	00016791 	.word	0x00016791
   17b40:	20003bc8 	.word	0x20003bc8
   17b44:	00016663 	.word	0x00016663
   17b48:	20003b50 	.word	0x20003b50
   17b4c:	000167a9 	.word	0x000167a9
   17b50:	000168e5 	.word	0x000168e5
   17b54:	20003aec 	.word	0x20003aec
   17b58:	00016781 	.word	0x00016781

00017b5c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
   17b5c:	b570      	push	{r4, r5, r6, lr}
   17b5e:	0004      	movs	r4, r0
   17b60:	000d      	movs	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
   17b62:	4b17      	ldr	r3, [pc, #92]	; (17bc0 <prvAddCurrentTaskToDelayedList+0x64>)
   17b64:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   17b66:	4b17      	ldr	r3, [pc, #92]	; (17bc4 <prvAddCurrentTaskToDelayedList+0x68>)
   17b68:	6818      	ldr	r0, [r3, #0]
   17b6a:	3004      	adds	r0, #4
   17b6c:	4b16      	ldr	r3, [pc, #88]	; (17bc8 <prvAddCurrentTaskToDelayedList+0x6c>)
   17b6e:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   17b70:	1c63      	adds	r3, r4, #1
   17b72:	d013      	beq.n	17b9c <prvAddCurrentTaskToDelayedList+0x40>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
   17b74:	1934      	adds	r4, r6, r4

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   17b76:	4b13      	ldr	r3, [pc, #76]	; (17bc4 <prvAddCurrentTaskToDelayedList+0x68>)
   17b78:	681b      	ldr	r3, [r3, #0]
   17b7a:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
   17b7c:	42a6      	cmp	r6, r4
   17b7e:	d816      	bhi.n	17bae <prvAddCurrentTaskToDelayedList+0x52>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   17b80:	4b12      	ldr	r3, [pc, #72]	; (17bcc <prvAddCurrentTaskToDelayedList+0x70>)
   17b82:	6818      	ldr	r0, [r3, #0]
   17b84:	4b0f      	ldr	r3, [pc, #60]	; (17bc4 <prvAddCurrentTaskToDelayedList+0x68>)
   17b86:	6819      	ldr	r1, [r3, #0]
   17b88:	3104      	adds	r1, #4
   17b8a:	4b11      	ldr	r3, [pc, #68]	; (17bd0 <prvAddCurrentTaskToDelayedList+0x74>)
   17b8c:	4798      	blx	r3

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
   17b8e:	4b11      	ldr	r3, [pc, #68]	; (17bd4 <prvAddCurrentTaskToDelayedList+0x78>)
   17b90:	681b      	ldr	r3, [r3, #0]
   17b92:	429c      	cmp	r4, r3
   17b94:	d212      	bcs.n	17bbc <prvAddCurrentTaskToDelayedList+0x60>
				{
					xNextTaskUnblockTime = xTimeToWake;
   17b96:	4b0f      	ldr	r3, [pc, #60]	; (17bd4 <prvAddCurrentTaskToDelayedList+0x78>)
   17b98:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
   17b9a:	e00f      	b.n	17bbc <prvAddCurrentTaskToDelayedList+0x60>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   17b9c:	2d00      	cmp	r5, #0
   17b9e:	d0e9      	beq.n	17b74 <prvAddCurrentTaskToDelayedList+0x18>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   17ba0:	4b08      	ldr	r3, [pc, #32]	; (17bc4 <prvAddCurrentTaskToDelayedList+0x68>)
   17ba2:	6819      	ldr	r1, [r3, #0]
   17ba4:	3104      	adds	r1, #4
   17ba6:	480c      	ldr	r0, [pc, #48]	; (17bd8 <prvAddCurrentTaskToDelayedList+0x7c>)
   17ba8:	4b0c      	ldr	r3, [pc, #48]	; (17bdc <prvAddCurrentTaskToDelayedList+0x80>)
   17baa:	4798      	blx	r3
   17bac:	e006      	b.n	17bbc <prvAddCurrentTaskToDelayedList+0x60>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   17bae:	4b0c      	ldr	r3, [pc, #48]	; (17be0 <prvAddCurrentTaskToDelayedList+0x84>)
   17bb0:	6818      	ldr	r0, [r3, #0]
   17bb2:	4b04      	ldr	r3, [pc, #16]	; (17bc4 <prvAddCurrentTaskToDelayedList+0x68>)
   17bb4:	6819      	ldr	r1, [r3, #0]
   17bb6:	3104      	adds	r1, #4
   17bb8:	4b05      	ldr	r3, [pc, #20]	; (17bd0 <prvAddCurrentTaskToDelayedList+0x74>)
   17bba:	4798      	blx	r3
}
   17bbc:	bd70      	pop	{r4, r5, r6, pc}
   17bbe:	46c0      	nop			; (mov r8, r8)
   17bc0:	20003bdc 	.word	0x20003bdc
   17bc4:	20003ae0 	.word	0x20003ae0
   17bc8:	00016663 	.word	0x00016663
   17bcc:	20003ae4 	.word	0x20003ae4
   17bd0:	00016635 	.word	0x00016635
   17bd4:	20003b94 	.word	0x20003b94
   17bd8:	20003bb4 	.word	0x20003bb4
   17bdc:	0001661d 	.word	0x0001661d
   17be0:	20003ae8 	.word	0x20003ae8

00017be4 <xTaskCreate>:
	{
   17be4:	b5f0      	push	{r4, r5, r6, r7, lr}
   17be6:	46c6      	mov	lr, r8
   17be8:	b500      	push	{lr}
   17bea:	b084      	sub	sp, #16
   17bec:	9001      	str	r0, [sp, #4]
   17bee:	000d      	movs	r5, r1
   17bf0:	9302      	str	r3, [sp, #8]
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   17bf2:	0097      	lsls	r7, r2, #2
   17bf4:	0038      	movs	r0, r7
   17bf6:	4b82      	ldr	r3, [pc, #520]	; (17e00 <xTaskCreate+0x21c>)
   17bf8:	4798      	blx	r3
   17bfa:	1e06      	subs	r6, r0, #0
			if( pxStack != NULL )
   17bfc:	d100      	bne.n	17c00 <xTaskCreate+0x1c>
   17bfe:	e0b9      	b.n	17d74 <xTaskCreate+0x190>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
   17c00:	2054      	movs	r0, #84	; 0x54
   17c02:	4b7f      	ldr	r3, [pc, #508]	; (17e00 <xTaskCreate+0x21c>)
   17c04:	4798      	blx	r3
   17c06:	1e04      	subs	r4, r0, #0
				if( pxNewTCB != NULL )
   17c08:	d100      	bne.n	17c0c <xTaskCreate+0x28>
   17c0a:	e0b0      	b.n	17d6e <xTaskCreate+0x18a>
					pxNewTCB->pxStack = pxStack;
   17c0c:	6306      	str	r6, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
   17c0e:	003a      	movs	r2, r7
   17c10:	21a5      	movs	r1, #165	; 0xa5
   17c12:	0030      	movs	r0, r6
   17c14:	4b7b      	ldr	r3, [pc, #492]	; (17e04 <xTaskCreate+0x220>)
   17c16:	4798      	blx	r3
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
   17c18:	1f3a      	subs	r2, r7, #4
   17c1a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   17c1c:	469c      	mov	ip, r3
   17c1e:	4462      	add	r2, ip
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
   17c20:	2307      	movs	r3, #7
   17c22:	439a      	bics	r2, r3
   17c24:	4690      	mov	r8, r2
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   17c26:	782a      	ldrb	r2, [r5, #0]
   17c28:	332d      	adds	r3, #45	; 0x2d
   17c2a:	54e2      	strb	r2, [r4, r3]
		if( pcName[ x ] == 0x00 )
   17c2c:	782b      	ldrb	r3, [r5, #0]
   17c2e:	2b00      	cmp	r3, #0
   17c30:	d00d      	beq.n	17c4e <xTaskCreate+0x6a>
   17c32:	3501      	adds	r5, #1
   17c34:	0023      	movs	r3, r4
   17c36:	3335      	adds	r3, #53	; 0x35
   17c38:	0020      	movs	r0, r4
   17c3a:	303c      	adds	r0, #60	; 0x3c
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   17c3c:	782a      	ldrb	r2, [r5, #0]
   17c3e:	701a      	strb	r2, [r3, #0]
		if( pcName[ x ] == 0x00 )
   17c40:	782a      	ldrb	r2, [r5, #0]
   17c42:	2a00      	cmp	r2, #0
   17c44:	d003      	beq.n	17c4e <xTaskCreate+0x6a>
   17c46:	3501      	adds	r5, #1
   17c48:	3301      	adds	r3, #1
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   17c4a:	4283      	cmp	r3, r0
   17c4c:	d1f6      	bne.n	17c3c <xTaskCreate+0x58>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   17c4e:	2200      	movs	r2, #0
   17c50:	233b      	movs	r3, #59	; 0x3b
   17c52:	54e2      	strb	r2, [r4, r3]
   17c54:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   17c56:	2f04      	cmp	r7, #4
   17c58:	d900      	bls.n	17c5c <xTaskCreate+0x78>
   17c5a:	2704      	movs	r7, #4
	pxNewTCB->uxPriority = uxPriority;
   17c5c:	62e7      	str	r7, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
   17c5e:	6467      	str	r7, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
   17c60:	2600      	movs	r6, #0
   17c62:	64a6      	str	r6, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   17c64:	1d23      	adds	r3, r4, #4
   17c66:	9303      	str	r3, [sp, #12]
   17c68:	0018      	movs	r0, r3
   17c6a:	4d67      	ldr	r5, [pc, #412]	; (17e08 <xTaskCreate+0x224>)
   17c6c:	47a8      	blx	r5
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
   17c6e:	0020      	movs	r0, r4
   17c70:	3018      	adds	r0, #24
   17c72:	47a8      	blx	r5
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
   17c74:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   17c76:	2305      	movs	r3, #5
   17c78:	1bdb      	subs	r3, r3, r7
   17c7a:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
   17c7c:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
   17c7e:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   17c80:	2350      	movs	r3, #80	; 0x50
   17c82:	54e6      	strb	r6, [r4, r3]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   17c84:	9a02      	ldr	r2, [sp, #8]
   17c86:	9901      	ldr	r1, [sp, #4]
   17c88:	4640      	mov	r0, r8
   17c8a:	4b60      	ldr	r3, [pc, #384]	; (17e0c <xTaskCreate+0x228>)
   17c8c:	4798      	blx	r3
   17c8e:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
   17c90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   17c92:	2b00      	cmp	r3, #0
   17c94:	d000      	beq.n	17c98 <xTaskCreate+0xb4>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   17c96:	601c      	str	r4, [r3, #0]
	taskENTER_CRITICAL();
   17c98:	4b5d      	ldr	r3, [pc, #372]	; (17e10 <xTaskCreate+0x22c>)
   17c9a:	4798      	blx	r3
		uxCurrentNumberOfTasks++;
   17c9c:	4a5d      	ldr	r2, [pc, #372]	; (17e14 <xTaskCreate+0x230>)
   17c9e:	6813      	ldr	r3, [r2, #0]
   17ca0:	3301      	adds	r3, #1
   17ca2:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
   17ca4:	4b5c      	ldr	r3, [pc, #368]	; (17e18 <xTaskCreate+0x234>)
   17ca6:	681b      	ldr	r3, [r3, #0]
   17ca8:	2b00      	cmp	r3, #0
   17caa:	d066      	beq.n	17d7a <xTaskCreate+0x196>
			if( xSchedulerRunning == pdFALSE )
   17cac:	4b5b      	ldr	r3, [pc, #364]	; (17e1c <xTaskCreate+0x238>)
   17cae:	681b      	ldr	r3, [r3, #0]
   17cb0:	2b00      	cmp	r3, #0
   17cb2:	d107      	bne.n	17cc4 <xTaskCreate+0xe0>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
   17cb4:	4b58      	ldr	r3, [pc, #352]	; (17e18 <xTaskCreate+0x234>)
   17cb6:	681b      	ldr	r3, [r3, #0]
   17cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   17cba:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   17cbc:	4293      	cmp	r3, r2
   17cbe:	d801      	bhi.n	17cc4 <xTaskCreate+0xe0>
					pxCurrentTCB = pxNewTCB;
   17cc0:	4b55      	ldr	r3, [pc, #340]	; (17e18 <xTaskCreate+0x234>)
   17cc2:	601c      	str	r4, [r3, #0]
		uxTaskNumber++;
   17cc4:	4a56      	ldr	r2, [pc, #344]	; (17e20 <xTaskCreate+0x23c>)
   17cc6:	6813      	ldr	r3, [r2, #0]
   17cc8:	3301      	adds	r3, #1
   17cca:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
   17ccc:	63e3      	str	r3, [r4, #60]	; 0x3c
		traceTASK_CREATE( pxNewTCB );
   17cce:	2003      	movs	r0, #3
   17cd0:	4b54      	ldr	r3, [pc, #336]	; (17e24 <xTaskCreate+0x240>)
   17cd2:	4798      	blx	r3
   17cd4:	b281      	uxth	r1, r0
   17cd6:	0020      	movs	r0, r4
   17cd8:	4b53      	ldr	r3, [pc, #332]	; (17e28 <xTaskCreate+0x244>)
   17cda:	4798      	blx	r3
   17cdc:	4b53      	ldr	r3, [pc, #332]	; (17e2c <xTaskCreate+0x248>)
   17cde:	8819      	ldrh	r1, [r3, #0]
   17ce0:	0020      	movs	r0, r4
   17ce2:	4b53      	ldr	r3, [pc, #332]	; (17e30 <xTaskCreate+0x24c>)
   17ce4:	4798      	blx	r3
   17ce6:	0020      	movs	r0, r4
   17ce8:	4e52      	ldr	r6, [pc, #328]	; (17e34 <xTaskCreate+0x250>)
   17cea:	47b0      	blx	r6
   17cec:	0022      	movs	r2, r4
   17cee:	3234      	adds	r2, #52	; 0x34
   17cf0:	b2c1      	uxtb	r1, r0
   17cf2:	2003      	movs	r0, #3
   17cf4:	4b50      	ldr	r3, [pc, #320]	; (17e38 <xTaskCreate+0x254>)
   17cf6:	4798      	blx	r3
   17cf8:	0020      	movs	r0, r4
   17cfa:	47b0      	blx	r6
   17cfc:	232c      	movs	r3, #44	; 0x2c
   17cfe:	18e3      	adds	r3, r4, r3
   17d00:	781a      	ldrb	r2, [r3, #0]
   17d02:	b2c1      	uxtb	r1, r0
   17d04:	2003      	movs	r0, #3
   17d06:	4b4d      	ldr	r3, [pc, #308]	; (17e3c <xTaskCreate+0x258>)
   17d08:	4798      	blx	r3
   17d0a:	4b4d      	ldr	r3, [pc, #308]	; (17e40 <xTaskCreate+0x25c>)
   17d0c:	4798      	blx	r3
   17d0e:	4b4d      	ldr	r3, [pc, #308]	; (17e44 <xTaskCreate+0x260>)
   17d10:	4798      	blx	r3
   17d12:	4b4d      	ldr	r3, [pc, #308]	; (17e48 <xTaskCreate+0x264>)
   17d14:	881b      	ldrh	r3, [r3, #0]
   17d16:	4203      	tst	r3, r0
   17d18:	d157      	bne.n	17dca <xTaskCreate+0x1e6>
   17d1a:	0020      	movs	r0, r4
   17d1c:	4b4b      	ldr	r3, [pc, #300]	; (17e4c <xTaskCreate+0x268>)
   17d1e:	4798      	blx	r3
		prvAddTaskToReadyList( pxNewTCB );
   17d20:	0020      	movs	r0, r4
   17d22:	4b48      	ldr	r3, [pc, #288]	; (17e44 <xTaskCreate+0x260>)
   17d24:	4798      	blx	r3
   17d26:	4b48      	ldr	r3, [pc, #288]	; (17e48 <xTaskCreate+0x264>)
   17d28:	881b      	ldrh	r3, [r3, #0]
   17d2a:	4203      	tst	r3, r0
   17d2c:	d15d      	bne.n	17dea <xTaskCreate+0x206>
   17d2e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   17d30:	4a47      	ldr	r2, [pc, #284]	; (17e50 <xTaskCreate+0x26c>)
   17d32:	6812      	ldr	r2, [r2, #0]
   17d34:	4293      	cmp	r3, r2
   17d36:	d901      	bls.n	17d3c <xTaskCreate+0x158>
   17d38:	4a45      	ldr	r2, [pc, #276]	; (17e50 <xTaskCreate+0x26c>)
   17d3a:	6013      	str	r3, [r2, #0]
   17d3c:	0098      	lsls	r0, r3, #2
   17d3e:	18c0      	adds	r0, r0, r3
   17d40:	0080      	lsls	r0, r0, #2
   17d42:	4b44      	ldr	r3, [pc, #272]	; (17e54 <xTaskCreate+0x270>)
   17d44:	1818      	adds	r0, r3, r0
   17d46:	9903      	ldr	r1, [sp, #12]
   17d48:	4b43      	ldr	r3, [pc, #268]	; (17e58 <xTaskCreate+0x274>)
   17d4a:	4798      	blx	r3
	taskEXIT_CRITICAL();
   17d4c:	4b43      	ldr	r3, [pc, #268]	; (17e5c <xTaskCreate+0x278>)
   17d4e:	4798      	blx	r3
	if( xSchedulerRunning != pdFALSE )
   17d50:	4b32      	ldr	r3, [pc, #200]	; (17e1c <xTaskCreate+0x238>)
   17d52:	681b      	ldr	r3, [r3, #0]
			xReturn = pdPASS;
   17d54:	2001      	movs	r0, #1
	if( xSchedulerRunning != pdFALSE )
   17d56:	2b00      	cmp	r3, #0
   17d58:	d005      	beq.n	17d66 <xTaskCreate+0x182>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
   17d5a:	4b2f      	ldr	r3, [pc, #188]	; (17e18 <xTaskCreate+0x234>)
   17d5c:	681b      	ldr	r3, [r3, #0]
   17d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   17d60:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   17d62:	429a      	cmp	r2, r3
   17d64:	d348      	bcc.n	17df8 <xTaskCreate+0x214>
	}
   17d66:	b004      	add	sp, #16
   17d68:	bc04      	pop	{r2}
   17d6a:	4690      	mov	r8, r2
   17d6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
					vPortFree( pxStack );
   17d6e:	0030      	movs	r0, r6
   17d70:	4b3b      	ldr	r3, [pc, #236]	; (17e60 <xTaskCreate+0x27c>)
   17d72:	4798      	blx	r3
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   17d74:	2001      	movs	r0, #1
   17d76:	4240      	negs	r0, r0
   17d78:	e7f5      	b.n	17d66 <xTaskCreate+0x182>
			pxCurrentTCB = pxNewTCB;
   17d7a:	4b27      	ldr	r3, [pc, #156]	; (17e18 <xTaskCreate+0x234>)
   17d7c:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   17d7e:	6813      	ldr	r3, [r2, #0]
   17d80:	2b01      	cmp	r3, #1
   17d82:	d19f      	bne.n	17cc4 <xTaskCreate+0xe0>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   17d84:	4f33      	ldr	r7, [pc, #204]	; (17e54 <xTaskCreate+0x270>)
   17d86:	0038      	movs	r0, r7
   17d88:	4e36      	ldr	r6, [pc, #216]	; (17e64 <xTaskCreate+0x280>)
   17d8a:	47b0      	blx	r6
   17d8c:	0038      	movs	r0, r7
   17d8e:	3014      	adds	r0, #20
   17d90:	47b0      	blx	r6
   17d92:	0038      	movs	r0, r7
   17d94:	3028      	adds	r0, #40	; 0x28
   17d96:	47b0      	blx	r6
   17d98:	0038      	movs	r0, r7
   17d9a:	303c      	adds	r0, #60	; 0x3c
   17d9c:	47b0      	blx	r6
   17d9e:	0038      	movs	r0, r7
   17da0:	3050      	adds	r0, #80	; 0x50
   17da2:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList1 );
   17da4:	4b30      	ldr	r3, [pc, #192]	; (17e68 <xTaskCreate+0x284>)
   17da6:	4698      	mov	r8, r3
   17da8:	0018      	movs	r0, r3
   17daa:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
   17dac:	4f2f      	ldr	r7, [pc, #188]	; (17e6c <xTaskCreate+0x288>)
   17dae:	0038      	movs	r0, r7
   17db0:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
   17db2:	482f      	ldr	r0, [pc, #188]	; (17e70 <xTaskCreate+0x28c>)
   17db4:	47b0      	blx	r6
		vListInitialise( &xTasksWaitingTermination );
   17db6:	482f      	ldr	r0, [pc, #188]	; (17e74 <xTaskCreate+0x290>)
   17db8:	47b0      	blx	r6
		vListInitialise( &xSuspendedTaskList );
   17dba:	482f      	ldr	r0, [pc, #188]	; (17e78 <xTaskCreate+0x294>)
   17dbc:	47b0      	blx	r6
	pxDelayedTaskList = &xDelayedTaskList1;
   17dbe:	4b2f      	ldr	r3, [pc, #188]	; (17e7c <xTaskCreate+0x298>)
   17dc0:	4642      	mov	r2, r8
   17dc2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   17dc4:	4b2e      	ldr	r3, [pc, #184]	; (17e80 <xTaskCreate+0x29c>)
   17dc6:	601f      	str	r7, [r3, #0]
   17dc8:	e77c      	b.n	17cc4 <xTaskCreate+0xe0>
		traceTASK_CREATE( pxNewTCB );
   17dca:	0020      	movs	r0, r4
   17dcc:	4b1d      	ldr	r3, [pc, #116]	; (17e44 <xTaskCreate+0x260>)
   17dce:	4798      	blx	r3
   17dd0:	4b1d      	ldr	r3, [pc, #116]	; (17e48 <xTaskCreate+0x264>)
   17dd2:	881b      	ldrh	r3, [r3, #0]
   17dd4:	4203      	tst	r3, r0
   17dd6:	d0a0      	beq.n	17d1a <xTaskCreate+0x136>
   17dd8:	0020      	movs	r0, r4
   17dda:	4b16      	ldr	r3, [pc, #88]	; (17e34 <xTaskCreate+0x250>)
   17ddc:	4798      	blx	r3
   17dde:	b2c2      	uxtb	r2, r0
   17de0:	2103      	movs	r1, #3
   17de2:	201b      	movs	r0, #27
   17de4:	4b27      	ldr	r3, [pc, #156]	; (17e84 <xTaskCreate+0x2a0>)
   17de6:	4798      	blx	r3
   17de8:	e797      	b.n	17d1a <xTaskCreate+0x136>
		prvAddTaskToReadyList( pxNewTCB );
   17dea:	0020      	movs	r0, r4
   17dec:	4b11      	ldr	r3, [pc, #68]	; (17e34 <xTaskCreate+0x250>)
   17dee:	4798      	blx	r3
   17df0:	b2c0      	uxtb	r0, r0
   17df2:	4b25      	ldr	r3, [pc, #148]	; (17e88 <xTaskCreate+0x2a4>)
   17df4:	4798      	blx	r3
   17df6:	e79a      	b.n	17d2e <xTaskCreate+0x14a>
			taskYIELD_IF_USING_PREEMPTION();
   17df8:	4b24      	ldr	r3, [pc, #144]	; (17e8c <xTaskCreate+0x2a8>)
   17dfa:	4798      	blx	r3
			xReturn = pdPASS;
   17dfc:	2001      	movs	r0, #1
   17dfe:	e7b2      	b.n	17d66 <xTaskCreate+0x182>
   17e00:	00016855 	.word	0x00016855
   17e04:	00025d0f 	.word	0x00025d0f
   17e08:	00016617 	.word	0x00016617
   17e0c:	000166e5 	.word	0x000166e5
   17e10:	00016791 	.word	0x00016791
   17e14:	20003b50 	.word	0x20003b50
   17e18:	20003ae0 	.word	0x20003ae0
   17e1c:	20003bb0 	.word	0x20003bb0
   17e20:	20003b60 	.word	0x20003b60
   17e24:	00015d89 	.word	0x00015d89
   17e28:	000153f5 	.word	0x000153f5
   17e2c:	200000c6 	.word	0x200000c6
   17e30:	00015415 	.word	0x00015415
   17e34:	000153d5 	.word	0x000153d5
   17e38:	00015e5d 	.word	0x00015e5d
   17e3c:	00015c3d 	.word	0x00015c3d
   17e40:	00015599 	.word	0x00015599
   17e44:	000153e5 	.word	0x000153e5
   17e48:	200000c8 	.word	0x200000c8
   17e4c:	0001549d 	.word	0x0001549d
   17e50:	20003b64 	.word	0x20003b64
   17e54:	20003aec 	.word	0x20003aec
   17e58:	0001661d 	.word	0x0001661d
   17e5c:	000167a9 	.word	0x000167a9
   17e60:	000168e5 	.word	0x000168e5
   17e64:	00016601 	.word	0x00016601
   17e68:	20003b68 	.word	0x20003b68
   17e6c:	20003b7c 	.word	0x20003b7c
   17e70:	20003b9c 	.word	0x20003b9c
   17e74:	20003bc8 	.word	0x20003bc8
   17e78:	20003bb4 	.word	0x20003bb4
   17e7c:	20003ae4 	.word	0x20003ae4
   17e80:	20003ae8 	.word	0x20003ae8
   17e84:	0001621d 	.word	0x0001621d
   17e88:	000160b5 	.word	0x000160b5
   17e8c:	00016781 	.word	0x00016781

00017e90 <vTaskStartScheduler>:
{
   17e90:	b510      	push	{r4, lr}
   17e92:	b082      	sub	sp, #8
		xReturn = xTaskCreate(	prvIdleTask,
   17e94:	4b11      	ldr	r3, [pc, #68]	; (17edc <vTaskStartScheduler+0x4c>)
   17e96:	9301      	str	r3, [sp, #4]
   17e98:	2300      	movs	r3, #0
   17e9a:	9300      	str	r3, [sp, #0]
   17e9c:	2264      	movs	r2, #100	; 0x64
   17e9e:	4910      	ldr	r1, [pc, #64]	; (17ee0 <vTaskStartScheduler+0x50>)
   17ea0:	4810      	ldr	r0, [pc, #64]	; (17ee4 <vTaskStartScheduler+0x54>)
   17ea2:	4c11      	ldr	r4, [pc, #68]	; (17ee8 <vTaskStartScheduler+0x58>)
   17ea4:	47a0      	blx	r4
		if( xReturn == pdPASS )
   17ea6:	2801      	cmp	r0, #1
   17ea8:	d003      	beq.n	17eb2 <vTaskStartScheduler+0x22>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   17eaa:	1c43      	adds	r3, r0, #1
   17eac:	d013      	beq.n	17ed6 <vTaskStartScheduler+0x46>
}
   17eae:	b002      	add	sp, #8
   17eb0:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
   17eb2:	4b0e      	ldr	r3, [pc, #56]	; (17eec <vTaskStartScheduler+0x5c>)
   17eb4:	4798      	blx	r3
	if( xReturn == pdPASS )
   17eb6:	2801      	cmp	r0, #1
   17eb8:	d1f7      	bne.n	17eaa <vTaskStartScheduler+0x1a>
		portDISABLE_INTERRUPTS();
   17eba:	b672      	cpsid	i
		xNextTaskUnblockTime = portMAX_DELAY;
   17ebc:	2201      	movs	r2, #1
   17ebe:	4252      	negs	r2, r2
   17ec0:	4b0b      	ldr	r3, [pc, #44]	; (17ef0 <vTaskStartScheduler+0x60>)
   17ec2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
   17ec4:	3202      	adds	r2, #2
   17ec6:	4b0b      	ldr	r3, [pc, #44]	; (17ef4 <vTaskStartScheduler+0x64>)
   17ec8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
   17eca:	2200      	movs	r2, #0
   17ecc:	4b0a      	ldr	r3, [pc, #40]	; (17ef8 <vTaskStartScheduler+0x68>)
   17ece:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
   17ed0:	4b0a      	ldr	r3, [pc, #40]	; (17efc <vTaskStartScheduler+0x6c>)
   17ed2:	4798      	blx	r3
   17ed4:	e7eb      	b.n	17eae <vTaskStartScheduler+0x1e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   17ed6:	b672      	cpsid	i
   17ed8:	e7fe      	b.n	17ed8 <vTaskStartScheduler+0x48>
   17eda:	46c0      	nop			; (mov r8, r8)
   17edc:	20003b90 	.word	0x20003b90
   17ee0:	0002a018 	.word	0x0002a018
   17ee4:	00017add 	.word	0x00017add
   17ee8:	00017be5 	.word	0x00017be5
   17eec:	00018b11 	.word	0x00018b11
   17ef0:	20003b94 	.word	0x20003b94
   17ef4:	20003bb0 	.word	0x20003bb0
   17ef8:	20003bdc 	.word	0x20003bdc
   17efc:	00016709 	.word	0x00016709

00017f00 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
   17f00:	4a02      	ldr	r2, [pc, #8]	; (17f0c <vTaskSuspendAll+0xc>)
   17f02:	6813      	ldr	r3, [r2, #0]
   17f04:	3301      	adds	r3, #1
   17f06:	6013      	str	r3, [r2, #0]
}
   17f08:	4770      	bx	lr
   17f0a:	46c0      	nop			; (mov r8, r8)
   17f0c:	20003b5c 	.word	0x20003b5c

00017f10 <xTaskGetTickCount>:
		xTicks = xTickCount;
   17f10:	4b01      	ldr	r3, [pc, #4]	; (17f18 <xTaskGetTickCount+0x8>)
   17f12:	6818      	ldr	r0, [r3, #0]
}
   17f14:	4770      	bx	lr
   17f16:	46c0      	nop			; (mov r8, r8)
   17f18:	20003bdc 	.word	0x20003bdc

00017f1c <xTaskIncrementTick>:
{
   17f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
   17f1e:	b083      	sub	sp, #12
	traceTASK_INCREMENT_TICK( xTickCount );
   17f20:	4b4c      	ldr	r3, [pc, #304]	; (18054 <xTaskIncrementTick+0x138>)
   17f22:	681b      	ldr	r3, [r3, #0]
   17f24:	2b01      	cmp	r3, #1
   17f26:	d003      	beq.n	17f30 <xTaskIncrementTick+0x14>
   17f28:	4b4b      	ldr	r3, [pc, #300]	; (18058 <xTaskIncrementTick+0x13c>)
   17f2a:	681b      	ldr	r3, [r3, #0]
   17f2c:	2b00      	cmp	r3, #0
   17f2e:	d106      	bne.n	17f3e <xTaskIncrementTick+0x22>
   17f30:	4a4a      	ldr	r2, [pc, #296]	; (1805c <xTaskIncrementTick+0x140>)
   17f32:	6813      	ldr	r3, [r2, #0]
   17f34:	3301      	adds	r3, #1
   17f36:	6013      	str	r3, [r2, #0]
   17f38:	2000      	movs	r0, #0
   17f3a:	4b49      	ldr	r3, [pc, #292]	; (18060 <xTaskIncrementTick+0x144>)
   17f3c:	4798      	blx	r3
   17f3e:	4b45      	ldr	r3, [pc, #276]	; (18054 <xTaskIncrementTick+0x138>)
   17f40:	681b      	ldr	r3, [r3, #0]
   17f42:	2b00      	cmp	r3, #0
   17f44:	d010      	beq.n	17f68 <xTaskIncrementTick+0x4c>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   17f46:	4b43      	ldr	r3, [pc, #268]	; (18054 <xTaskIncrementTick+0x138>)
   17f48:	681b      	ldr	r3, [r3, #0]
   17f4a:	2b00      	cmp	r3, #0
   17f4c:	d175      	bne.n	1803a <xTaskIncrementTick+0x11e>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
   17f4e:	4b45      	ldr	r3, [pc, #276]	; (18064 <xTaskIncrementTick+0x148>)
   17f50:	681e      	ldr	r6, [r3, #0]
   17f52:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
   17f54:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
   17f56:	2e00      	cmp	r6, #0
   17f58:	d119      	bne.n	17f8e <xTaskIncrementTick+0x72>
			taskSWITCH_DELAYED_LISTS();
   17f5a:	4b43      	ldr	r3, [pc, #268]	; (18068 <xTaskIncrementTick+0x14c>)
   17f5c:	681b      	ldr	r3, [r3, #0]
   17f5e:	681b      	ldr	r3, [r3, #0]
   17f60:	2b00      	cmp	r3, #0
   17f62:	d008      	beq.n	17f76 <xTaskIncrementTick+0x5a>
   17f64:	b672      	cpsid	i
   17f66:	e7fe      	b.n	17f66 <xTaskIncrementTick+0x4a>
	traceTASK_INCREMENT_TICK( xTickCount );
   17f68:	4b3e      	ldr	r3, [pc, #248]	; (18064 <xTaskIncrementTick+0x148>)
   17f6a:	6819      	ldr	r1, [r3, #0]
   17f6c:	3101      	adds	r1, #1
   17f6e:	2003      	movs	r0, #3
   17f70:	4b3e      	ldr	r3, [pc, #248]	; (1806c <xTaskIncrementTick+0x150>)
   17f72:	4798      	blx	r3
   17f74:	e7e7      	b.n	17f46 <xTaskIncrementTick+0x2a>
			taskSWITCH_DELAYED_LISTS();
   17f76:	4a3c      	ldr	r2, [pc, #240]	; (18068 <xTaskIncrementTick+0x14c>)
   17f78:	6811      	ldr	r1, [r2, #0]
   17f7a:	4b3d      	ldr	r3, [pc, #244]	; (18070 <xTaskIncrementTick+0x154>)
   17f7c:	6818      	ldr	r0, [r3, #0]
   17f7e:	6010      	str	r0, [r2, #0]
   17f80:	6019      	str	r1, [r3, #0]
   17f82:	4a3c      	ldr	r2, [pc, #240]	; (18074 <xTaskIncrementTick+0x158>)
   17f84:	6813      	ldr	r3, [r2, #0]
   17f86:	3301      	adds	r3, #1
   17f88:	6013      	str	r3, [r2, #0]
   17f8a:	4b3b      	ldr	r3, [pc, #236]	; (18078 <xTaskIncrementTick+0x15c>)
   17f8c:	4798      	blx	r3
		if( xConstTickCount >= xNextTaskUnblockTime )
   17f8e:	4b3b      	ldr	r3, [pc, #236]	; (1807c <xTaskIncrementTick+0x160>)
   17f90:	681b      	ldr	r3, [r3, #0]
BaseType_t xSwitchRequired = pdFALSE;
   17f92:	2500      	movs	r5, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
   17f94:	429e      	cmp	r6, r3
   17f96:	d33a      	bcc.n	1800e <xTaskIncrementTick+0xf2>
   17f98:	2500      	movs	r5, #0
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   17f9a:	4f33      	ldr	r7, [pc, #204]	; (18068 <xTaskIncrementTick+0x14c>)
   17f9c:	683b      	ldr	r3, [r7, #0]
   17f9e:	681b      	ldr	r3, [r3, #0]
   17fa0:	2b00      	cmp	r3, #0
   17fa2:	d030      	beq.n	18006 <xTaskIncrementTick+0xea>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   17fa4:	4b30      	ldr	r3, [pc, #192]	; (18068 <xTaskIncrementTick+0x14c>)
   17fa6:	681b      	ldr	r3, [r3, #0]
   17fa8:	68db      	ldr	r3, [r3, #12]
   17faa:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
   17fac:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
   17fae:	429e      	cmp	r6, r3
   17fb0:	d339      	bcc.n	18026 <xTaskIncrementTick+0x10a>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   17fb2:	1d23      	adds	r3, r4, #4
   17fb4:	9301      	str	r3, [sp, #4]
   17fb6:	0018      	movs	r0, r3
   17fb8:	4b31      	ldr	r3, [pc, #196]	; (18080 <xTaskIncrementTick+0x164>)
   17fba:	4798      	blx	r3
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   17fbc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   17fbe:	2b00      	cmp	r3, #0
   17fc0:	d003      	beq.n	17fca <xTaskIncrementTick+0xae>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   17fc2:	0020      	movs	r0, r4
   17fc4:	3018      	adds	r0, #24
   17fc6:	4b2e      	ldr	r3, [pc, #184]	; (18080 <xTaskIncrementTick+0x164>)
   17fc8:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   17fca:	0020      	movs	r0, r4
   17fcc:	4b2d      	ldr	r3, [pc, #180]	; (18084 <xTaskIncrementTick+0x168>)
   17fce:	4798      	blx	r3
   17fd0:	4b2d      	ldr	r3, [pc, #180]	; (18088 <xTaskIncrementTick+0x16c>)
   17fd2:	881b      	ldrh	r3, [r3, #0]
   17fd4:	4203      	tst	r3, r0
   17fd6:	d129      	bne.n	1802c <xTaskIncrementTick+0x110>
   17fd8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   17fda:	4a2c      	ldr	r2, [pc, #176]	; (1808c <xTaskIncrementTick+0x170>)
   17fdc:	6812      	ldr	r2, [r2, #0]
   17fde:	4293      	cmp	r3, r2
   17fe0:	d901      	bls.n	17fe6 <xTaskIncrementTick+0xca>
   17fe2:	4a2a      	ldr	r2, [pc, #168]	; (1808c <xTaskIncrementTick+0x170>)
   17fe4:	6013      	str	r3, [r2, #0]
   17fe6:	0098      	lsls	r0, r3, #2
   17fe8:	18c0      	adds	r0, r0, r3
   17fea:	0080      	lsls	r0, r0, #2
   17fec:	4b28      	ldr	r3, [pc, #160]	; (18090 <xTaskIncrementTick+0x174>)
   17fee:	1818      	adds	r0, r3, r0
   17ff0:	9901      	ldr	r1, [sp, #4]
   17ff2:	4b28      	ldr	r3, [pc, #160]	; (18094 <xTaskIncrementTick+0x178>)
   17ff4:	4798      	blx	r3
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   17ff6:	4b28      	ldr	r3, [pc, #160]	; (18098 <xTaskIncrementTick+0x17c>)
   17ff8:	681b      	ldr	r3, [r3, #0]
   17ffa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   17ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   17ffe:	429a      	cmp	r2, r3
   18000:	d3cc      	bcc.n	17f9c <xTaskIncrementTick+0x80>
							xSwitchRequired = pdTRUE;
   18002:	2501      	movs	r5, #1
   18004:	e7ca      	b.n	17f9c <xTaskIncrementTick+0x80>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   18006:	2201      	movs	r2, #1
   18008:	4252      	negs	r2, r2
   1800a:	4b1c      	ldr	r3, [pc, #112]	; (1807c <xTaskIncrementTick+0x160>)
   1800c:	601a      	str	r2, [r3, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
   1800e:	4b22      	ldr	r3, [pc, #136]	; (18098 <xTaskIncrementTick+0x17c>)
   18010:	681b      	ldr	r3, [r3, #0]
   18012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   18014:	0093      	lsls	r3, r2, #2
   18016:	189b      	adds	r3, r3, r2
   18018:	009b      	lsls	r3, r3, #2
   1801a:	4a1d      	ldr	r2, [pc, #116]	; (18090 <xTaskIncrementTick+0x174>)
   1801c:	589b      	ldr	r3, [r3, r2]
   1801e:	2b01      	cmp	r3, #1
   18020:	d910      	bls.n	18044 <xTaskIncrementTick+0x128>
				xSwitchRequired = pdTRUE;
   18022:	2501      	movs	r5, #1
   18024:	e00e      	b.n	18044 <xTaskIncrementTick+0x128>
						xNextTaskUnblockTime = xItemValue;
   18026:	4a15      	ldr	r2, [pc, #84]	; (1807c <xTaskIncrementTick+0x160>)
   18028:	6013      	str	r3, [r2, #0]
						break;
   1802a:	e7f0      	b.n	1800e <xTaskIncrementTick+0xf2>
					prvAddTaskToReadyList( pxTCB );
   1802c:	0020      	movs	r0, r4
   1802e:	4b1b      	ldr	r3, [pc, #108]	; (1809c <xTaskIncrementTick+0x180>)
   18030:	4798      	blx	r3
   18032:	b2c0      	uxtb	r0, r0
   18034:	4b1a      	ldr	r3, [pc, #104]	; (180a0 <xTaskIncrementTick+0x184>)
   18036:	4798      	blx	r3
   18038:	e7ce      	b.n	17fd8 <xTaskIncrementTick+0xbc>
		++uxPendedTicks;
   1803a:	4a07      	ldr	r2, [pc, #28]	; (18058 <xTaskIncrementTick+0x13c>)
   1803c:	6813      	ldr	r3, [r2, #0]
   1803e:	3301      	adds	r3, #1
   18040:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
   18042:	2500      	movs	r5, #0
		if( xYieldPending != pdFALSE )
   18044:	4b17      	ldr	r3, [pc, #92]	; (180a4 <xTaskIncrementTick+0x188>)
   18046:	681b      	ldr	r3, [r3, #0]
   18048:	2b00      	cmp	r3, #0
   1804a:	d000      	beq.n	1804e <xTaskIncrementTick+0x132>
			xSwitchRequired = pdTRUE;
   1804c:	2501      	movs	r5, #1
}
   1804e:	0028      	movs	r0, r5
   18050:	b003      	add	sp, #12
   18052:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18054:	20003b5c 	.word	0x20003b5c
   18058:	20003b58 	.word	0x20003b58
   1805c:	20000bf0 	.word	0x20000bf0
   18060:	00015eed 	.word	0x00015eed
   18064:	20003bdc 	.word	0x20003bdc
   18068:	20003ae4 	.word	0x20003ae4
   1806c:	000163b9 	.word	0x000163b9
   18070:	20003ae8 	.word	0x20003ae8
   18074:	20003b98 	.word	0x20003b98
   18078:	00017ab1 	.word	0x00017ab1
   1807c:	20003b94 	.word	0x20003b94
   18080:	00016663 	.word	0x00016663
   18084:	000153e5 	.word	0x000153e5
   18088:	200000c8 	.word	0x200000c8
   1808c:	20003b64 	.word	0x20003b64
   18090:	20003aec 	.word	0x20003aec
   18094:	0001661d 	.word	0x0001661d
   18098:	20003ae0 	.word	0x20003ae0
   1809c:	000153d5 	.word	0x000153d5
   180a0:	000160b5 	.word	0x000160b5
   180a4:	20003be0 	.word	0x20003be0

000180a8 <xTaskResumeAll>:
{
   180a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
   180aa:	4b37      	ldr	r3, [pc, #220]	; (18188 <xTaskResumeAll+0xe0>)
   180ac:	681b      	ldr	r3, [r3, #0]
   180ae:	2b00      	cmp	r3, #0
   180b0:	d101      	bne.n	180b6 <xTaskResumeAll+0xe>
   180b2:	b672      	cpsid	i
   180b4:	e7fe      	b.n	180b4 <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
   180b6:	4b35      	ldr	r3, [pc, #212]	; (1818c <xTaskResumeAll+0xe4>)
   180b8:	4798      	blx	r3
		--uxSchedulerSuspended;
   180ba:	4b33      	ldr	r3, [pc, #204]	; (18188 <xTaskResumeAll+0xe0>)
   180bc:	681a      	ldr	r2, [r3, #0]
   180be:	3a01      	subs	r2, #1
   180c0:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   180c2:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
   180c4:	2400      	movs	r4, #0
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   180c6:	2b00      	cmp	r3, #0
   180c8:	d103      	bne.n	180d2 <xTaskResumeAll+0x2a>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   180ca:	4b31      	ldr	r3, [pc, #196]	; (18190 <xTaskResumeAll+0xe8>)
   180cc:	681b      	ldr	r3, [r3, #0]
   180ce:	2b00      	cmp	r3, #0
   180d0:	d136      	bne.n	18140 <xTaskResumeAll+0x98>
	taskEXIT_CRITICAL();
   180d2:	4b30      	ldr	r3, [pc, #192]	; (18194 <xTaskResumeAll+0xec>)
   180d4:	4798      	blx	r3
}
   180d6:	0020      	movs	r0, r4
   180d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					prvAddTaskToReadyList( pxTCB );
   180da:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   180dc:	4a2e      	ldr	r2, [pc, #184]	; (18198 <xTaskResumeAll+0xf0>)
   180de:	6812      	ldr	r2, [r2, #0]
   180e0:	4293      	cmp	r3, r2
   180e2:	d901      	bls.n	180e8 <xTaskResumeAll+0x40>
   180e4:	4a2c      	ldr	r2, [pc, #176]	; (18198 <xTaskResumeAll+0xf0>)
   180e6:	6013      	str	r3, [r2, #0]
   180e8:	0098      	lsls	r0, r3, #2
   180ea:	18c0      	adds	r0, r0, r3
   180ec:	0080      	lsls	r0, r0, #2
   180ee:	4b2b      	ldr	r3, [pc, #172]	; (1819c <xTaskResumeAll+0xf4>)
   180f0:	1818      	adds	r0, r3, r0
   180f2:	0031      	movs	r1, r6
   180f4:	4b2a      	ldr	r3, [pc, #168]	; (181a0 <xTaskResumeAll+0xf8>)
   180f6:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   180f8:	4b2a      	ldr	r3, [pc, #168]	; (181a4 <xTaskResumeAll+0xfc>)
   180fa:	681b      	ldr	r3, [r3, #0]
   180fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   180fe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   18100:	429a      	cmp	r2, r3
   18102:	d302      	bcc.n	1810a <xTaskResumeAll+0x62>
						xYieldPending = pdTRUE;
   18104:	2201      	movs	r2, #1
   18106:	4b28      	ldr	r3, [pc, #160]	; (181a8 <xTaskResumeAll+0x100>)
   18108:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1810a:	682b      	ldr	r3, [r5, #0]
   1810c:	2b00      	cmp	r3, #0
   1810e:	d01a      	beq.n	18146 <xTaskResumeAll+0x9e>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   18110:	68fb      	ldr	r3, [r7, #12]
   18112:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   18114:	0020      	movs	r0, r4
   18116:	3018      	adds	r0, #24
   18118:	4b24      	ldr	r3, [pc, #144]	; (181ac <xTaskResumeAll+0x104>)
   1811a:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1811c:	1d26      	adds	r6, r4, #4
   1811e:	0030      	movs	r0, r6
   18120:	4b22      	ldr	r3, [pc, #136]	; (181ac <xTaskResumeAll+0x104>)
   18122:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   18124:	0020      	movs	r0, r4
   18126:	4b22      	ldr	r3, [pc, #136]	; (181b0 <xTaskResumeAll+0x108>)
   18128:	4798      	blx	r3
   1812a:	4b22      	ldr	r3, [pc, #136]	; (181b4 <xTaskResumeAll+0x10c>)
   1812c:	881b      	ldrh	r3, [r3, #0]
   1812e:	4203      	tst	r3, r0
   18130:	d0d3      	beq.n	180da <xTaskResumeAll+0x32>
   18132:	0020      	movs	r0, r4
   18134:	4b20      	ldr	r3, [pc, #128]	; (181b8 <xTaskResumeAll+0x110>)
   18136:	4798      	blx	r3
   18138:	b2c0      	uxtb	r0, r0
   1813a:	4b20      	ldr	r3, [pc, #128]	; (181bc <xTaskResumeAll+0x114>)
   1813c:	4798      	blx	r3
   1813e:	e7cc      	b.n	180da <xTaskResumeAll+0x32>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   18140:	4d1f      	ldr	r5, [pc, #124]	; (181c0 <xTaskResumeAll+0x118>)
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   18142:	002f      	movs	r7, r5
   18144:	e7e1      	b.n	1810a <xTaskResumeAll+0x62>
				if( pxTCB != NULL )
   18146:	2c00      	cmp	r4, #0
   18148:	d001      	beq.n	1814e <xTaskResumeAll+0xa6>
					prvResetNextTaskUnblockTime();
   1814a:	4b1e      	ldr	r3, [pc, #120]	; (181c4 <xTaskResumeAll+0x11c>)
   1814c:	4798      	blx	r3
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
   1814e:	4b1e      	ldr	r3, [pc, #120]	; (181c8 <xTaskResumeAll+0x120>)
   18150:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
   18152:	2c00      	cmp	r4, #0
   18154:	d00e      	beq.n	18174 <xTaskResumeAll+0xcc>
							if( xTaskIncrementTick() != pdFALSE )
   18156:	4f1d      	ldr	r7, [pc, #116]	; (181cc <xTaskResumeAll+0x124>)
								xYieldPending = pdTRUE;
   18158:	4e13      	ldr	r6, [pc, #76]	; (181a8 <xTaskResumeAll+0x100>)
   1815a:	2501      	movs	r5, #1
   1815c:	e002      	b.n	18164 <xTaskResumeAll+0xbc>
							--uxPendedCounts;
   1815e:	3c01      	subs	r4, #1
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
   18160:	2c00      	cmp	r4, #0
   18162:	d004      	beq.n	1816e <xTaskResumeAll+0xc6>
							if( xTaskIncrementTick() != pdFALSE )
   18164:	47b8      	blx	r7
   18166:	2800      	cmp	r0, #0
   18168:	d0f9      	beq.n	1815e <xTaskResumeAll+0xb6>
								xYieldPending = pdTRUE;
   1816a:	6035      	str	r5, [r6, #0]
   1816c:	e7f7      	b.n	1815e <xTaskResumeAll+0xb6>
						uxPendedTicks = 0;
   1816e:	2200      	movs	r2, #0
   18170:	4b15      	ldr	r3, [pc, #84]	; (181c8 <xTaskResumeAll+0x120>)
   18172:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
   18174:	4b0c      	ldr	r3, [pc, #48]	; (181a8 <xTaskResumeAll+0x100>)
   18176:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
   18178:	2400      	movs	r4, #0
				if( xYieldPending != pdFALSE )
   1817a:	2b00      	cmp	r3, #0
   1817c:	d0a9      	beq.n	180d2 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
   1817e:	4b14      	ldr	r3, [pc, #80]	; (181d0 <xTaskResumeAll+0x128>)
   18180:	4798      	blx	r3
						xAlreadyYielded = pdTRUE;
   18182:	3401      	adds	r4, #1
   18184:	e7a5      	b.n	180d2 <xTaskResumeAll+0x2a>
   18186:	46c0      	nop			; (mov r8, r8)
   18188:	20003b5c 	.word	0x20003b5c
   1818c:	00016791 	.word	0x00016791
   18190:	20003b50 	.word	0x20003b50
   18194:	000167a9 	.word	0x000167a9
   18198:	20003b64 	.word	0x20003b64
   1819c:	20003aec 	.word	0x20003aec
   181a0:	0001661d 	.word	0x0001661d
   181a4:	20003ae0 	.word	0x20003ae0
   181a8:	20003be0 	.word	0x20003be0
   181ac:	00016663 	.word	0x00016663
   181b0:	000153e5 	.word	0x000153e5
   181b4:	200000c8 	.word	0x200000c8
   181b8:	000153d5 	.word	0x000153d5
   181bc:	000160b5 	.word	0x000160b5
   181c0:	20003b9c 	.word	0x20003b9c
   181c4:	00017ab1 	.word	0x00017ab1
   181c8:	20003b58 	.word	0x20003b58
   181cc:	00017f1d 	.word	0x00017f1d
   181d0:	00016781 	.word	0x00016781

000181d4 <vTaskDelay>:
	{
   181d4:	b510      	push	{r4, lr}
   181d6:	1e04      	subs	r4, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
   181d8:	d031      	beq.n	1823e <vTaskDelay+0x6a>
			configASSERT( uxSchedulerSuspended == 0 );
   181da:	4b1a      	ldr	r3, [pc, #104]	; (18244 <vTaskDelay+0x70>)
   181dc:	681b      	ldr	r3, [r3, #0]
   181de:	2b00      	cmp	r3, #0
   181e0:	d001      	beq.n	181e6 <vTaskDelay+0x12>
   181e2:	b672      	cpsid	i
   181e4:	e7fe      	b.n	181e4 <vTaskDelay+0x10>
			vTaskSuspendAll();
   181e6:	4b18      	ldr	r3, [pc, #96]	; (18248 <vTaskDelay+0x74>)
   181e8:	4798      	blx	r3
				traceTASK_DELAY();
   181ea:	4b18      	ldr	r3, [pc, #96]	; (1824c <vTaskDelay+0x78>)
   181ec:	6818      	ldr	r0, [r3, #0]
   181ee:	4b18      	ldr	r3, [pc, #96]	; (18250 <vTaskDelay+0x7c>)
   181f0:	4798      	blx	r3
   181f2:	4b18      	ldr	r3, [pc, #96]	; (18254 <vTaskDelay+0x80>)
   181f4:	881b      	ldrh	r3, [r3, #0]
   181f6:	4203      	tst	r3, r0
   181f8:	d00a      	beq.n	18210 <vTaskDelay+0x3c>
   181fa:	0021      	movs	r1, r4
   181fc:	2089      	movs	r0, #137	; 0x89
   181fe:	4b16      	ldr	r3, [pc, #88]	; (18258 <vTaskDelay+0x84>)
   18200:	4798      	blx	r3
   18202:	4b12      	ldr	r3, [pc, #72]	; (1824c <vTaskDelay+0x78>)
   18204:	6818      	ldr	r0, [r3, #0]
   18206:	4b15      	ldr	r3, [pc, #84]	; (1825c <vTaskDelay+0x88>)
   18208:	4798      	blx	r3
   1820a:	b2c0      	uxtb	r0, r0
   1820c:	4b14      	ldr	r3, [pc, #80]	; (18260 <vTaskDelay+0x8c>)
   1820e:	4798      	blx	r3
   18210:	4b14      	ldr	r3, [pc, #80]	; (18264 <vTaskDelay+0x90>)
   18212:	4798      	blx	r3
   18214:	4b0e      	ldr	r3, [pc, #56]	; (18250 <vTaskDelay+0x7c>)
   18216:	4798      	blx	r3
   18218:	4b0e      	ldr	r3, [pc, #56]	; (18254 <vTaskDelay+0x80>)
   1821a:	881b      	ldrh	r3, [r3, #0]
   1821c:	4203      	tst	r3, r0
   1821e:	d006      	beq.n	1822e <vTaskDelay+0x5a>
   18220:	4b10      	ldr	r3, [pc, #64]	; (18264 <vTaskDelay+0x90>)
   18222:	4798      	blx	r3
   18224:	4b0d      	ldr	r3, [pc, #52]	; (1825c <vTaskDelay+0x88>)
   18226:	4798      	blx	r3
   18228:	b2c0      	uxtb	r0, r0
   1822a:	4b0d      	ldr	r3, [pc, #52]	; (18260 <vTaskDelay+0x8c>)
   1822c:	4798      	blx	r3
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
   1822e:	2100      	movs	r1, #0
   18230:	0020      	movs	r0, r4
   18232:	4b0d      	ldr	r3, [pc, #52]	; (18268 <vTaskDelay+0x94>)
   18234:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
   18236:	4b0d      	ldr	r3, [pc, #52]	; (1826c <vTaskDelay+0x98>)
   18238:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
   1823a:	2800      	cmp	r0, #0
   1823c:	d101      	bne.n	18242 <vTaskDelay+0x6e>
			portYIELD_WITHIN_API();
   1823e:	4b0c      	ldr	r3, [pc, #48]	; (18270 <vTaskDelay+0x9c>)
   18240:	4798      	blx	r3
	}
   18242:	bd10      	pop	{r4, pc}
   18244:	20003b5c 	.word	0x20003b5c
   18248:	00017f01 	.word	0x00017f01
   1824c:	20003ae0 	.word	0x20003ae0
   18250:	000153e5 	.word	0x000153e5
   18254:	200000c8 	.word	0x200000c8
   18258:	000163b9 	.word	0x000163b9
   1825c:	000153d5 	.word	0x000153d5
   18260:	00015d49 	.word	0x00015d49
   18264:	00015599 	.word	0x00015599
   18268:	00017b5d 	.word	0x00017b5d
   1826c:	000180a9 	.word	0x000180a9
   18270:	00016781 	.word	0x00016781

00018274 <vTaskSwitchContext>:
{
   18274:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   18276:	4b33      	ldr	r3, [pc, #204]	; (18344 <vTaskSwitchContext+0xd0>)
   18278:	681b      	ldr	r3, [r3, #0]
   1827a:	2b00      	cmp	r3, #0
   1827c:	d125      	bne.n	182ca <vTaskSwitchContext+0x56>
		xYieldPending = pdFALSE;
   1827e:	2200      	movs	r2, #0
   18280:	4b31      	ldr	r3, [pc, #196]	; (18348 <vTaskSwitchContext+0xd4>)
   18282:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
   18284:	4b31      	ldr	r3, [pc, #196]	; (1834c <vTaskSwitchContext+0xd8>)
   18286:	681a      	ldr	r2, [r3, #0]
   18288:	681b      	ldr	r3, [r3, #0]
   1828a:	6812      	ldr	r2, [r2, #0]
   1828c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1828e:	429a      	cmp	r2, r3
   18290:	d805      	bhi.n	1829e <vTaskSwitchContext+0x2a>
   18292:	4b2e      	ldr	r3, [pc, #184]	; (1834c <vTaskSwitchContext+0xd8>)
   18294:	6818      	ldr	r0, [r3, #0]
   18296:	6819      	ldr	r1, [r3, #0]
   18298:	3134      	adds	r1, #52	; 0x34
   1829a:	4b2d      	ldr	r3, [pc, #180]	; (18350 <vTaskSwitchContext+0xdc>)
   1829c:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
   1829e:	4b2d      	ldr	r3, [pc, #180]	; (18354 <vTaskSwitchContext+0xe0>)
   182a0:	681b      	ldr	r3, [r3, #0]
   182a2:	009a      	lsls	r2, r3, #2
   182a4:	18d2      	adds	r2, r2, r3
   182a6:	0092      	lsls	r2, r2, #2
   182a8:	492b      	ldr	r1, [pc, #172]	; (18358 <vTaskSwitchContext+0xe4>)
   182aa:	5852      	ldr	r2, [r2, r1]
   182ac:	2a00      	cmp	r2, #0
   182ae:	d110      	bne.n	182d2 <vTaskSwitchContext+0x5e>
   182b0:	2b00      	cmp	r3, #0
   182b2:	d008      	beq.n	182c6 <vTaskSwitchContext+0x52>
   182b4:	3b01      	subs	r3, #1
   182b6:	009a      	lsls	r2, r3, #2
   182b8:	18d2      	adds	r2, r2, r3
   182ba:	0092      	lsls	r2, r2, #2
   182bc:	5852      	ldr	r2, [r2, r1]
   182be:	2a00      	cmp	r2, #0
   182c0:	d107      	bne.n	182d2 <vTaskSwitchContext+0x5e>
   182c2:	2b00      	cmp	r3, #0
   182c4:	d1f6      	bne.n	182b4 <vTaskSwitchContext+0x40>
   182c6:	b672      	cpsid	i
   182c8:	e7fe      	b.n	182c8 <vTaskSwitchContext+0x54>
		xYieldPending = pdTRUE;
   182ca:	2201      	movs	r2, #1
   182cc:	4b1e      	ldr	r3, [pc, #120]	; (18348 <vTaskSwitchContext+0xd4>)
   182ce:	601a      	str	r2, [r3, #0]
}
   182d0:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
   182d2:	4821      	ldr	r0, [pc, #132]	; (18358 <vTaskSwitchContext+0xe4>)
   182d4:	009a      	lsls	r2, r3, #2
   182d6:	18d1      	adds	r1, r2, r3
   182d8:	0089      	lsls	r1, r1, #2
   182da:	1841      	adds	r1, r0, r1
   182dc:	684c      	ldr	r4, [r1, #4]
   182de:	6864      	ldr	r4, [r4, #4]
   182e0:	604c      	str	r4, [r1, #4]
   182e2:	18d2      	adds	r2, r2, r3
   182e4:	0092      	lsls	r2, r2, #2
   182e6:	3208      	adds	r2, #8
   182e8:	1882      	adds	r2, r0, r2
   182ea:	4294      	cmp	r4, r2
   182ec:	d019      	beq.n	18322 <vTaskSwitchContext+0xae>
   182ee:	009a      	lsls	r2, r3, #2
   182f0:	18d2      	adds	r2, r2, r3
   182f2:	0092      	lsls	r2, r2, #2
   182f4:	4918      	ldr	r1, [pc, #96]	; (18358 <vTaskSwitchContext+0xe4>)
   182f6:	188a      	adds	r2, r1, r2
   182f8:	6852      	ldr	r2, [r2, #4]
   182fa:	68d1      	ldr	r1, [r2, #12]
   182fc:	4a13      	ldr	r2, [pc, #76]	; (1834c <vTaskSwitchContext+0xd8>)
   182fe:	6011      	str	r1, [r2, #0]
   18300:	4a14      	ldr	r2, [pc, #80]	; (18354 <vTaskSwitchContext+0xe0>)
   18302:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
   18304:	2201      	movs	r2, #1
   18306:	4b15      	ldr	r3, [pc, #84]	; (1835c <vTaskSwitchContext+0xe8>)
   18308:	601a      	str	r2, [r3, #0]
   1830a:	4b15      	ldr	r3, [pc, #84]	; (18360 <vTaskSwitchContext+0xec>)
   1830c:	4798      	blx	r3
   1830e:	4b15      	ldr	r3, [pc, #84]	; (18364 <vTaskSwitchContext+0xf0>)
   18310:	4798      	blx	r3
   18312:	4b15      	ldr	r3, [pc, #84]	; (18368 <vTaskSwitchContext+0xf4>)
   18314:	881b      	ldrh	r3, [r3, #0]
   18316:	4203      	tst	r3, r0
   18318:	d10b      	bne.n	18332 <vTaskSwitchContext+0xbe>
   1831a:	2202      	movs	r2, #2
   1831c:	4b0f      	ldr	r3, [pc, #60]	; (1835c <vTaskSwitchContext+0xe8>)
   1831e:	601a      	str	r2, [r3, #0]
}
   18320:	e7d6      	b.n	182d0 <vTaskSwitchContext+0x5c>
		taskSELECT_HIGHEST_PRIORITY_TASK();
   18322:	6860      	ldr	r0, [r4, #4]
   18324:	009a      	lsls	r2, r3, #2
   18326:	18d2      	adds	r2, r2, r3
   18328:	0092      	lsls	r2, r2, #2
   1832a:	490b      	ldr	r1, [pc, #44]	; (18358 <vTaskSwitchContext+0xe4>)
   1832c:	188a      	adds	r2, r1, r2
   1832e:	6050      	str	r0, [r2, #4]
   18330:	e7dd      	b.n	182ee <vTaskSwitchContext+0x7a>
		traceTASK_SWITCHED_IN();
   18332:	4b0b      	ldr	r3, [pc, #44]	; (18360 <vTaskSwitchContext+0xec>)
   18334:	4798      	blx	r3
   18336:	4b0d      	ldr	r3, [pc, #52]	; (1836c <vTaskSwitchContext+0xf8>)
   18338:	4798      	blx	r3
   1833a:	b2c0      	uxtb	r0, r0
   1833c:	4b0c      	ldr	r3, [pc, #48]	; (18370 <vTaskSwitchContext+0xfc>)
   1833e:	4798      	blx	r3
   18340:	e7eb      	b.n	1831a <vTaskSwitchContext+0xa6>
   18342:	46c0      	nop			; (mov r8, r8)
   18344:	20003b5c 	.word	0x20003b5c
   18348:	20003be0 	.word	0x20003be0
   1834c:	20003ae0 	.word	0x20003ae0
   18350:	00024041 	.word	0x00024041
   18354:	20003b64 	.word	0x20003b64
   18358:	20003aec 	.word	0x20003aec
   1835c:	20000bec 	.word	0x20000bec
   18360:	00015599 	.word	0x00015599
   18364:	000153e5 	.word	0x000153e5
   18368:	200000c8 	.word	0x200000c8
   1836c:	000153d5 	.word	0x000153d5
   18370:	00016461 	.word	0x00016461

00018374 <vTaskSuspend>:
	{
   18374:	b570      	push	{r4, r5, r6, lr}
   18376:	0005      	movs	r5, r0
		taskENTER_CRITICAL();
   18378:	4b33      	ldr	r3, [pc, #204]	; (18448 <vTaskSuspend+0xd4>)
   1837a:	4798      	blx	r3
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
   1837c:	1e2c      	subs	r4, r5, #0
   1837e:	d02b      	beq.n	183d8 <vTaskSuspend+0x64>
			traceTASK_SUSPEND( pxTCB );
   18380:	4b32      	ldr	r3, [pc, #200]	; (1844c <vTaskSuspend+0xd8>)
   18382:	4798      	blx	r3
   18384:	4b32      	ldr	r3, [pc, #200]	; (18450 <vTaskSuspend+0xdc>)
   18386:	4798      	blx	r3
   18388:	4b32      	ldr	r3, [pc, #200]	; (18454 <vTaskSuspend+0xe0>)
   1838a:	881b      	ldrh	r3, [r3, #0]
   1838c:	4203      	tst	r3, r0
   1838e:	d126      	bne.n	183de <vTaskSuspend+0x6a>
   18390:	0020      	movs	r0, r4
   18392:	4b31      	ldr	r3, [pc, #196]	; (18458 <vTaskSuspend+0xe4>)
   18394:	4798      	blx	r3
   18396:	b2c0      	uxtb	r0, r0
   18398:	4b30      	ldr	r3, [pc, #192]	; (1845c <vTaskSuspend+0xe8>)
   1839a:	4798      	blx	r3
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1839c:	1d25      	adds	r5, r4, #4
   1839e:	0028      	movs	r0, r5
   183a0:	4b2f      	ldr	r3, [pc, #188]	; (18460 <vTaskSuspend+0xec>)
   183a2:	4798      	blx	r3
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   183a4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   183a6:	2b00      	cmp	r3, #0
   183a8:	d003      	beq.n	183b2 <vTaskSuspend+0x3e>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   183aa:	0020      	movs	r0, r4
   183ac:	3018      	adds	r0, #24
   183ae:	4b2c      	ldr	r3, [pc, #176]	; (18460 <vTaskSuspend+0xec>)
   183b0:	4798      	blx	r3
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
   183b2:	0029      	movs	r1, r5
   183b4:	482b      	ldr	r0, [pc, #172]	; (18464 <vTaskSuspend+0xf0>)
   183b6:	4b2c      	ldr	r3, [pc, #176]	; (18468 <vTaskSuspend+0xf4>)
   183b8:	4798      	blx	r3
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
   183ba:	2350      	movs	r3, #80	; 0x50
   183bc:	5ce3      	ldrb	r3, [r4, r3]
   183be:	2b01      	cmp	r3, #1
   183c0:	d01d      	beq.n	183fe <vTaskSuspend+0x8a>
		taskEXIT_CRITICAL();
   183c2:	4b2a      	ldr	r3, [pc, #168]	; (1846c <vTaskSuspend+0xf8>)
   183c4:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
   183c6:	4b2a      	ldr	r3, [pc, #168]	; (18470 <vTaskSuspend+0xfc>)
   183c8:	681b      	ldr	r3, [r3, #0]
   183ca:	2b00      	cmp	r3, #0
   183cc:	d11b      	bne.n	18406 <vTaskSuspend+0x92>
		if( pxTCB == pxCurrentTCB )
   183ce:	4b29      	ldr	r3, [pc, #164]	; (18474 <vTaskSuspend+0x100>)
   183d0:	681b      	ldr	r3, [r3, #0]
   183d2:	429c      	cmp	r4, r3
   183d4:	d01e      	beq.n	18414 <vTaskSuspend+0xa0>
	}
   183d6:	bd70      	pop	{r4, r5, r6, pc}
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
   183d8:	4b26      	ldr	r3, [pc, #152]	; (18474 <vTaskSuspend+0x100>)
   183da:	681c      	ldr	r4, [r3, #0]
   183dc:	e7d0      	b.n	18380 <vTaskSuspend+0xc>
			traceTASK_SUSPEND( pxTCB );
   183de:	0020      	movs	r0, r4
   183e0:	4b1b      	ldr	r3, [pc, #108]	; (18450 <vTaskSuspend+0xdc>)
   183e2:	4798      	blx	r3
   183e4:	4b1b      	ldr	r3, [pc, #108]	; (18454 <vTaskSuspend+0xe0>)
   183e6:	881b      	ldrh	r3, [r3, #0]
   183e8:	4203      	tst	r3, r0
   183ea:	d0d1      	beq.n	18390 <vTaskSuspend+0x1c>
   183ec:	0020      	movs	r0, r4
   183ee:	4b1a      	ldr	r3, [pc, #104]	; (18458 <vTaskSuspend+0xe4>)
   183f0:	4798      	blx	r3
   183f2:	b2c2      	uxtb	r2, r0
   183f4:	2103      	movs	r1, #3
   183f6:	208a      	movs	r0, #138	; 0x8a
   183f8:	4b1f      	ldr	r3, [pc, #124]	; (18478 <vTaskSuspend+0x104>)
   183fa:	4798      	blx	r3
   183fc:	e7c8      	b.n	18390 <vTaskSuspend+0x1c>
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   183fe:	2200      	movs	r2, #0
   18400:	334f      	adds	r3, #79	; 0x4f
   18402:	54e2      	strb	r2, [r4, r3]
   18404:	e7dd      	b.n	183c2 <vTaskSuspend+0x4e>
			taskENTER_CRITICAL();
   18406:	4b10      	ldr	r3, [pc, #64]	; (18448 <vTaskSuspend+0xd4>)
   18408:	4798      	blx	r3
				prvResetNextTaskUnblockTime();
   1840a:	4b1c      	ldr	r3, [pc, #112]	; (1847c <vTaskSuspend+0x108>)
   1840c:	4798      	blx	r3
			taskEXIT_CRITICAL();
   1840e:	4b17      	ldr	r3, [pc, #92]	; (1846c <vTaskSuspend+0xf8>)
   18410:	4798      	blx	r3
   18412:	e7dc      	b.n	183ce <vTaskSuspend+0x5a>
			if( xSchedulerRunning != pdFALSE )
   18414:	4b16      	ldr	r3, [pc, #88]	; (18470 <vTaskSuspend+0xfc>)
   18416:	681b      	ldr	r3, [r3, #0]
   18418:	2b00      	cmp	r3, #0
   1841a:	d008      	beq.n	1842e <vTaskSuspend+0xba>
				configASSERT( uxSchedulerSuspended == 0 );
   1841c:	4b18      	ldr	r3, [pc, #96]	; (18480 <vTaskSuspend+0x10c>)
   1841e:	681b      	ldr	r3, [r3, #0]
   18420:	2b00      	cmp	r3, #0
   18422:	d001      	beq.n	18428 <vTaskSuspend+0xb4>
   18424:	b672      	cpsid	i
   18426:	e7fe      	b.n	18426 <vTaskSuspend+0xb2>
				portYIELD_WITHIN_API();
   18428:	4b16      	ldr	r3, [pc, #88]	; (18484 <vTaskSuspend+0x110>)
   1842a:	4798      	blx	r3
   1842c:	e7d3      	b.n	183d6 <vTaskSuspend+0x62>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
   1842e:	4b0d      	ldr	r3, [pc, #52]	; (18464 <vTaskSuspend+0xf0>)
   18430:	681a      	ldr	r2, [r3, #0]
   18432:	4b15      	ldr	r3, [pc, #84]	; (18488 <vTaskSuspend+0x114>)
   18434:	681b      	ldr	r3, [r3, #0]
   18436:	429a      	cmp	r2, r3
   18438:	d002      	beq.n	18440 <vTaskSuspend+0xcc>
					vTaskSwitchContext();
   1843a:	4b14      	ldr	r3, [pc, #80]	; (1848c <vTaskSuspend+0x118>)
   1843c:	4798      	blx	r3
	}
   1843e:	e7ca      	b.n	183d6 <vTaskSuspend+0x62>
					pxCurrentTCB = NULL;
   18440:	2200      	movs	r2, #0
   18442:	4b0c      	ldr	r3, [pc, #48]	; (18474 <vTaskSuspend+0x100>)
   18444:	601a      	str	r2, [r3, #0]
   18446:	e7c6      	b.n	183d6 <vTaskSuspend+0x62>
   18448:	00016791 	.word	0x00016791
   1844c:	00015599 	.word	0x00015599
   18450:	000153e5 	.word	0x000153e5
   18454:	200000c8 	.word	0x200000c8
   18458:	000153d5 	.word	0x000153d5
   1845c:	00015d49 	.word	0x00015d49
   18460:	00016663 	.word	0x00016663
   18464:	20003bb4 	.word	0x20003bb4
   18468:	0001661d 	.word	0x0001661d
   1846c:	000167a9 	.word	0x000167a9
   18470:	20003bb0 	.word	0x20003bb0
   18474:	20003ae0 	.word	0x20003ae0
   18478:	0001621d 	.word	0x0001621d
   1847c:	00017ab1 	.word	0x00017ab1
   18480:	20003b5c 	.word	0x20003b5c
   18484:	00016781 	.word	0x00016781
   18488:	20003b50 	.word	0x20003b50
   1848c:	00018275 	.word	0x00018275

00018490 <vTaskPlaceOnEventList>:
{
   18490:	b510      	push	{r4, lr}
   18492:	000c      	movs	r4, r1
	configASSERT( pxEventList );
   18494:	2800      	cmp	r0, #0
   18496:	d101      	bne.n	1849c <vTaskPlaceOnEventList+0xc>
   18498:	b672      	cpsid	i
   1849a:	e7fe      	b.n	1849a <vTaskPlaceOnEventList+0xa>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1849c:	4b04      	ldr	r3, [pc, #16]	; (184b0 <vTaskPlaceOnEventList+0x20>)
   1849e:	6819      	ldr	r1, [r3, #0]
   184a0:	3118      	adds	r1, #24
   184a2:	4b04      	ldr	r3, [pc, #16]	; (184b4 <vTaskPlaceOnEventList+0x24>)
   184a4:	4798      	blx	r3
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   184a6:	2101      	movs	r1, #1
   184a8:	0020      	movs	r0, r4
   184aa:	4b03      	ldr	r3, [pc, #12]	; (184b8 <vTaskPlaceOnEventList+0x28>)
   184ac:	4798      	blx	r3
}
   184ae:	bd10      	pop	{r4, pc}
   184b0:	20003ae0 	.word	0x20003ae0
   184b4:	00016635 	.word	0x00016635
   184b8:	00017b5d 	.word	0x00017b5d

000184bc <vTaskPlaceOnEventListRestricted>:
	{
   184bc:	b570      	push	{r4, r5, r6, lr}
   184be:	000c      	movs	r4, r1
   184c0:	0015      	movs	r5, r2
		configASSERT( pxEventList );
   184c2:	2800      	cmp	r0, #0
   184c4:	d031      	beq.n	1852a <vTaskPlaceOnEventListRestricted+0x6e>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   184c6:	4b1a      	ldr	r3, [pc, #104]	; (18530 <vTaskPlaceOnEventListRestricted+0x74>)
   184c8:	6819      	ldr	r1, [r3, #0]
   184ca:	3118      	adds	r1, #24
   184cc:	4b19      	ldr	r3, [pc, #100]	; (18534 <vTaskPlaceOnEventListRestricted+0x78>)
   184ce:	4798      	blx	r3
		if( xWaitIndefinitely != pdFALSE )
   184d0:	2d00      	cmp	r5, #0
   184d2:	d001      	beq.n	184d8 <vTaskPlaceOnEventListRestricted+0x1c>
			xTicksToWait = portMAX_DELAY;
   184d4:	2401      	movs	r4, #1
   184d6:	4264      	negs	r4, r4
		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
   184d8:	4b15      	ldr	r3, [pc, #84]	; (18530 <vTaskPlaceOnEventListRestricted+0x74>)
   184da:	6818      	ldr	r0, [r3, #0]
   184dc:	4b16      	ldr	r3, [pc, #88]	; (18538 <vTaskPlaceOnEventListRestricted+0x7c>)
   184de:	4798      	blx	r3
   184e0:	4b16      	ldr	r3, [pc, #88]	; (1853c <vTaskPlaceOnEventListRestricted+0x80>)
   184e2:	881b      	ldrh	r3, [r3, #0]
   184e4:	4203      	tst	r3, r0
   184e6:	d00c      	beq.n	18502 <vTaskPlaceOnEventListRestricted+0x46>
   184e8:	4b15      	ldr	r3, [pc, #84]	; (18540 <vTaskPlaceOnEventListRestricted+0x84>)
   184ea:	6819      	ldr	r1, [r3, #0]
   184ec:	1861      	adds	r1, r4, r1
   184ee:	2088      	movs	r0, #136	; 0x88
   184f0:	4b14      	ldr	r3, [pc, #80]	; (18544 <vTaskPlaceOnEventListRestricted+0x88>)
   184f2:	4798      	blx	r3
   184f4:	4b0e      	ldr	r3, [pc, #56]	; (18530 <vTaskPlaceOnEventListRestricted+0x74>)
   184f6:	6818      	ldr	r0, [r3, #0]
   184f8:	4b13      	ldr	r3, [pc, #76]	; (18548 <vTaskPlaceOnEventListRestricted+0x8c>)
   184fa:	4798      	blx	r3
   184fc:	b2c0      	uxtb	r0, r0
   184fe:	4b13      	ldr	r3, [pc, #76]	; (1854c <vTaskPlaceOnEventListRestricted+0x90>)
   18500:	4798      	blx	r3
   18502:	4b13      	ldr	r3, [pc, #76]	; (18550 <vTaskPlaceOnEventListRestricted+0x94>)
   18504:	4798      	blx	r3
   18506:	4b0c      	ldr	r3, [pc, #48]	; (18538 <vTaskPlaceOnEventListRestricted+0x7c>)
   18508:	4798      	blx	r3
   1850a:	4b0c      	ldr	r3, [pc, #48]	; (1853c <vTaskPlaceOnEventListRestricted+0x80>)
   1850c:	881b      	ldrh	r3, [r3, #0]
   1850e:	4203      	tst	r3, r0
   18510:	d006      	beq.n	18520 <vTaskPlaceOnEventListRestricted+0x64>
   18512:	4b0f      	ldr	r3, [pc, #60]	; (18550 <vTaskPlaceOnEventListRestricted+0x94>)
   18514:	4798      	blx	r3
   18516:	4b0c      	ldr	r3, [pc, #48]	; (18548 <vTaskPlaceOnEventListRestricted+0x8c>)
   18518:	4798      	blx	r3
   1851a:	b2c0      	uxtb	r0, r0
   1851c:	4b0b      	ldr	r3, [pc, #44]	; (1854c <vTaskPlaceOnEventListRestricted+0x90>)
   1851e:	4798      	blx	r3
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
   18520:	0029      	movs	r1, r5
   18522:	0020      	movs	r0, r4
   18524:	4b0b      	ldr	r3, [pc, #44]	; (18554 <vTaskPlaceOnEventListRestricted+0x98>)
   18526:	4798      	blx	r3
	}
   18528:	bd70      	pop	{r4, r5, r6, pc}
		configASSERT( pxEventList );
   1852a:	b672      	cpsid	i
   1852c:	e7fe      	b.n	1852c <vTaskPlaceOnEventListRestricted+0x70>
   1852e:	46c0      	nop			; (mov r8, r8)
   18530:	20003ae0 	.word	0x20003ae0
   18534:	0001661d 	.word	0x0001661d
   18538:	000153e5 	.word	0x000153e5
   1853c:	200000c8 	.word	0x200000c8
   18540:	20003bdc 	.word	0x20003bdc
   18544:	000163b9 	.word	0x000163b9
   18548:	000153d5 	.word	0x000153d5
   1854c:	00015d49 	.word	0x00015d49
   18550:	00015599 	.word	0x00015599
   18554:	00017b5d 	.word	0x00017b5d

00018558 <xTaskRemoveFromEventList>:
{
   18558:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   1855a:	68c3      	ldr	r3, [r0, #12]
   1855c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
   1855e:	2c00      	cmp	r4, #0
   18560:	d02e      	beq.n	185c0 <xTaskRemoveFromEventList+0x68>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   18562:	0025      	movs	r5, r4
   18564:	3518      	adds	r5, #24
   18566:	0028      	movs	r0, r5
   18568:	4b1c      	ldr	r3, [pc, #112]	; (185dc <xTaskRemoveFromEventList+0x84>)
   1856a:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1856c:	4b1c      	ldr	r3, [pc, #112]	; (185e0 <xTaskRemoveFromEventList+0x88>)
   1856e:	681b      	ldr	r3, [r3, #0]
   18570:	2b00      	cmp	r3, #0
   18572:	d12e      	bne.n	185d2 <xTaskRemoveFromEventList+0x7a>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   18574:	1d25      	adds	r5, r4, #4
   18576:	0028      	movs	r0, r5
   18578:	4b18      	ldr	r3, [pc, #96]	; (185dc <xTaskRemoveFromEventList+0x84>)
   1857a:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
   1857c:	0020      	movs	r0, r4
   1857e:	4b19      	ldr	r3, [pc, #100]	; (185e4 <xTaskRemoveFromEventList+0x8c>)
   18580:	4798      	blx	r3
   18582:	4b19      	ldr	r3, [pc, #100]	; (185e8 <xTaskRemoveFromEventList+0x90>)
   18584:	881b      	ldrh	r3, [r3, #0]
   18586:	4203      	tst	r3, r0
   18588:	d11c      	bne.n	185c4 <xTaskRemoveFromEventList+0x6c>
   1858a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1858c:	4a17      	ldr	r2, [pc, #92]	; (185ec <xTaskRemoveFromEventList+0x94>)
   1858e:	6812      	ldr	r2, [r2, #0]
   18590:	4293      	cmp	r3, r2
   18592:	d901      	bls.n	18598 <xTaskRemoveFromEventList+0x40>
   18594:	4a15      	ldr	r2, [pc, #84]	; (185ec <xTaskRemoveFromEventList+0x94>)
   18596:	6013      	str	r3, [r2, #0]
   18598:	0098      	lsls	r0, r3, #2
   1859a:	18c0      	adds	r0, r0, r3
   1859c:	0080      	lsls	r0, r0, #2
   1859e:	4b14      	ldr	r3, [pc, #80]	; (185f0 <xTaskRemoveFromEventList+0x98>)
   185a0:	1818      	adds	r0, r3, r0
   185a2:	0029      	movs	r1, r5
   185a4:	4b13      	ldr	r3, [pc, #76]	; (185f4 <xTaskRemoveFromEventList+0x9c>)
   185a6:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   185a8:	4b13      	ldr	r3, [pc, #76]	; (185f8 <xTaskRemoveFromEventList+0xa0>)
   185aa:	681b      	ldr	r3, [r3, #0]
   185ac:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   185ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		xReturn = pdFALSE;
   185b0:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   185b2:	429a      	cmp	r2, r3
   185b4:	d903      	bls.n	185be <xTaskRemoveFromEventList+0x66>
		xYieldPending = pdTRUE;
   185b6:	2201      	movs	r2, #1
   185b8:	4b10      	ldr	r3, [pc, #64]	; (185fc <xTaskRemoveFromEventList+0xa4>)
   185ba:	601a      	str	r2, [r3, #0]
		xReturn = pdTRUE;
   185bc:	3001      	adds	r0, #1
}
   185be:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxUnblockedTCB );
   185c0:	b672      	cpsid	i
   185c2:	e7fe      	b.n	185c2 <xTaskRemoveFromEventList+0x6a>
		prvAddTaskToReadyList( pxUnblockedTCB );
   185c4:	0020      	movs	r0, r4
   185c6:	4b0e      	ldr	r3, [pc, #56]	; (18600 <xTaskRemoveFromEventList+0xa8>)
   185c8:	4798      	blx	r3
   185ca:	b2c0      	uxtb	r0, r0
   185cc:	4b0d      	ldr	r3, [pc, #52]	; (18604 <xTaskRemoveFromEventList+0xac>)
   185ce:	4798      	blx	r3
   185d0:	e7db      	b.n	1858a <xTaskRemoveFromEventList+0x32>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   185d2:	0029      	movs	r1, r5
   185d4:	480c      	ldr	r0, [pc, #48]	; (18608 <xTaskRemoveFromEventList+0xb0>)
   185d6:	4b07      	ldr	r3, [pc, #28]	; (185f4 <xTaskRemoveFromEventList+0x9c>)
   185d8:	4798      	blx	r3
   185da:	e7e5      	b.n	185a8 <xTaskRemoveFromEventList+0x50>
   185dc:	00016663 	.word	0x00016663
   185e0:	20003b5c 	.word	0x20003b5c
   185e4:	000153e5 	.word	0x000153e5
   185e8:	200000c8 	.word	0x200000c8
   185ec:	20003b64 	.word	0x20003b64
   185f0:	20003aec 	.word	0x20003aec
   185f4:	0001661d 	.word	0x0001661d
   185f8:	20003ae0 	.word	0x20003ae0
   185fc:	20003be0 	.word	0x20003be0
   18600:	000153d5 	.word	0x000153d5
   18604:	000160b5 	.word	0x000160b5
   18608:	20003b9c 	.word	0x20003b9c

0001860c <vTaskSetTimeOutState>:
{
   1860c:	b510      	push	{r4, lr}
   1860e:	1e04      	subs	r4, r0, #0
	configASSERT( pxTimeOut );
   18610:	d101      	bne.n	18616 <vTaskSetTimeOutState+0xa>
   18612:	b672      	cpsid	i
   18614:	e7fe      	b.n	18614 <vTaskSetTimeOutState+0x8>
	taskENTER_CRITICAL();
   18616:	4b05      	ldr	r3, [pc, #20]	; (1862c <vTaskSetTimeOutState+0x20>)
   18618:	4798      	blx	r3
		pxTimeOut->xOverflowCount = xNumOfOverflows;
   1861a:	4b05      	ldr	r3, [pc, #20]	; (18630 <vTaskSetTimeOutState+0x24>)
   1861c:	681b      	ldr	r3, [r3, #0]
   1861e:	6023      	str	r3, [r4, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
   18620:	4b04      	ldr	r3, [pc, #16]	; (18634 <vTaskSetTimeOutState+0x28>)
   18622:	681b      	ldr	r3, [r3, #0]
   18624:	6063      	str	r3, [r4, #4]
	taskEXIT_CRITICAL();
   18626:	4b04      	ldr	r3, [pc, #16]	; (18638 <vTaskSetTimeOutState+0x2c>)
   18628:	4798      	blx	r3
}
   1862a:	bd10      	pop	{r4, pc}
   1862c:	00016791 	.word	0x00016791
   18630:	20003b98 	.word	0x20003b98
   18634:	20003bdc 	.word	0x20003bdc
   18638:	000167a9 	.word	0x000167a9

0001863c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   1863c:	4b03      	ldr	r3, [pc, #12]	; (1864c <vTaskInternalSetTimeOutState+0x10>)
   1863e:	681b      	ldr	r3, [r3, #0]
   18640:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   18642:	4b03      	ldr	r3, [pc, #12]	; (18650 <vTaskInternalSetTimeOutState+0x14>)
   18644:	681b      	ldr	r3, [r3, #0]
   18646:	6043      	str	r3, [r0, #4]
}
   18648:	4770      	bx	lr
   1864a:	46c0      	nop			; (mov r8, r8)
   1864c:	20003b98 	.word	0x20003b98
   18650:	20003bdc 	.word	0x20003bdc

00018654 <xTaskCheckForTimeOut>:
{
   18654:	b570      	push	{r4, r5, r6, lr}
   18656:	0006      	movs	r6, r0
   18658:	000d      	movs	r5, r1
	configASSERT( pxTimeOut );
   1865a:	2800      	cmp	r0, #0
   1865c:	d01b      	beq.n	18696 <xTaskCheckForTimeOut+0x42>
	configASSERT( pxTicksToWait );
   1865e:	2900      	cmp	r1, #0
   18660:	d01b      	beq.n	1869a <xTaskCheckForTimeOut+0x46>
	taskENTER_CRITICAL();
   18662:	4b13      	ldr	r3, [pc, #76]	; (186b0 <xTaskCheckForTimeOut+0x5c>)
   18664:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
   18666:	4b13      	ldr	r3, [pc, #76]	; (186b4 <xTaskCheckForTimeOut+0x60>)
   18668:	681a      	ldr	r2, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   1866a:	6871      	ldr	r1, [r6, #4]
			if( *pxTicksToWait == portMAX_DELAY )
   1866c:	682b      	ldr	r3, [r5, #0]
   1866e:	1c58      	adds	r0, r3, #1
   18670:	d01c      	beq.n	186ac <xTaskCheckForTimeOut+0x58>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   18672:	4811      	ldr	r0, [pc, #68]	; (186b8 <xTaskCheckForTimeOut+0x64>)
   18674:	6800      	ldr	r0, [r0, #0]
   18676:	6834      	ldr	r4, [r6, #0]
   18678:	4284      	cmp	r4, r0
   1867a:	d002      	beq.n	18682 <xTaskCheckForTimeOut+0x2e>
			xReturn = pdTRUE;
   1867c:	2401      	movs	r4, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   1867e:	428a      	cmp	r2, r1
   18680:	d205      	bcs.n	1868e <xTaskCheckForTimeOut+0x3a>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   18682:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
   18684:	429a      	cmp	r2, r3
   18686:	d30a      	bcc.n	1869e <xTaskCheckForTimeOut+0x4a>
			*pxTicksToWait = 0;
   18688:	2300      	movs	r3, #0
   1868a:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
   1868c:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
   1868e:	4b0b      	ldr	r3, [pc, #44]	; (186bc <xTaskCheckForTimeOut+0x68>)
   18690:	4798      	blx	r3
}
   18692:	0020      	movs	r0, r4
   18694:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxTimeOut );
   18696:	b672      	cpsid	i
   18698:	e7fe      	b.n	18698 <xTaskCheckForTimeOut+0x44>
	configASSERT( pxTicksToWait );
   1869a:	b672      	cpsid	i
   1869c:	e7fe      	b.n	1869c <xTaskCheckForTimeOut+0x48>
			*pxTicksToWait -= xElapsedTime;
   1869e:	1a9b      	subs	r3, r3, r2
   186a0:	602b      	str	r3, [r5, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
   186a2:	0030      	movs	r0, r6
   186a4:	4b06      	ldr	r3, [pc, #24]	; (186c0 <xTaskCheckForTimeOut+0x6c>)
   186a6:	4798      	blx	r3
			xReturn = pdFALSE;
   186a8:	2400      	movs	r4, #0
   186aa:	e7f0      	b.n	1868e <xTaskCheckForTimeOut+0x3a>
				xReturn = pdFALSE;
   186ac:	2400      	movs	r4, #0
   186ae:	e7ee      	b.n	1868e <xTaskCheckForTimeOut+0x3a>
   186b0:	00016791 	.word	0x00016791
   186b4:	20003bdc 	.word	0x20003bdc
   186b8:	20003b98 	.word	0x20003b98
   186bc:	000167a9 	.word	0x000167a9
   186c0:	0001863d 	.word	0x0001863d

000186c4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
   186c4:	2201      	movs	r2, #1
   186c6:	4b01      	ldr	r3, [pc, #4]	; (186cc <vTaskMissedYield+0x8>)
   186c8:	601a      	str	r2, [r3, #0]
}
   186ca:	4770      	bx	lr
   186cc:	20003be0 	.word	0x20003be0

000186d0 <uxTaskGetTaskNumber>:
		if( xTask != NULL )
   186d0:	2800      	cmp	r0, #0
   186d2:	d001      	beq.n	186d8 <uxTaskGetTaskNumber+0x8>
			uxReturn = pxTCB->uxTaskNumber;
   186d4:	6c00      	ldr	r0, [r0, #64]	; 0x40
	}
   186d6:	4770      	bx	lr
			uxReturn = 0U;
   186d8:	2000      	movs	r0, #0
		return uxReturn;
   186da:	e7fc      	b.n	186d6 <uxTaskGetTaskNumber+0x6>

000186dc <vTaskSetTaskNumber>:
		if( xTask != NULL )
   186dc:	2800      	cmp	r0, #0
   186de:	d000      	beq.n	186e2 <vTaskSetTaskNumber+0x6>
			pxTCB->uxTaskNumber = uxHandle;
   186e0:	6401      	str	r1, [r0, #64]	; 0x40
	}
   186e2:	4770      	bx	lr

000186e4 <uxTaskGetStackHighWaterMark>:
		pxTCB = prvGetTCBFromHandle( xTask );
   186e4:	1e03      	subs	r3, r0, #0
   186e6:	d00b      	beq.n	18700 <uxTaskGetStackHighWaterMark+0x1c>
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
   186e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
   186ea:	7813      	ldrb	r3, [r2, #0]
   186ec:	2ba5      	cmp	r3, #165	; 0xa5
   186ee:	d10a      	bne.n	18706 <uxTaskGetStackHighWaterMark+0x22>
   186f0:	2000      	movs	r0, #0
			ulCount++;
   186f2:	3001      	adds	r0, #1
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
   186f4:	5c13      	ldrb	r3, [r2, r0]
   186f6:	2ba5      	cmp	r3, #165	; 0xa5
   186f8:	d0fb      	beq.n	186f2 <uxTaskGetStackHighWaterMark+0xe>
		return uxReturn;
   186fa:	0380      	lsls	r0, r0, #14
   186fc:	0c00      	lsrs	r0, r0, #16
	}
   186fe:	4770      	bx	lr
		pxTCB = prvGetTCBFromHandle( xTask );
   18700:	4b02      	ldr	r3, [pc, #8]	; (1870c <uxTaskGetStackHighWaterMark+0x28>)
   18702:	681b      	ldr	r3, [r3, #0]
   18704:	e7f0      	b.n	186e8 <uxTaskGetStackHighWaterMark+0x4>
	uint32_t ulCount = 0U;
   18706:	2000      	movs	r0, #0
   18708:	e7f7      	b.n	186fa <uxTaskGetStackHighWaterMark+0x16>
   1870a:	46c0      	nop			; (mov r8, r8)
   1870c:	20003ae0 	.word	0x20003ae0

00018710 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
   18710:	4b01      	ldr	r3, [pc, #4]	; (18718 <xTaskGetCurrentTaskHandle+0x8>)
   18712:	6818      	ldr	r0, [r3, #0]
	}
   18714:	4770      	bx	lr
   18716:	46c0      	nop			; (mov r8, r8)
   18718:	20003ae0 	.word	0x20003ae0

0001871c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
   1871c:	4b05      	ldr	r3, [pc, #20]	; (18734 <xTaskGetSchedulerState+0x18>)
   1871e:	681b      	ldr	r3, [r3, #0]
			xReturn = taskSCHEDULER_NOT_STARTED;
   18720:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
   18722:	2b00      	cmp	r3, #0
   18724:	d004      	beq.n	18730 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   18726:	4b04      	ldr	r3, [pc, #16]	; (18738 <xTaskGetSchedulerState+0x1c>)
   18728:	6818      	ldr	r0, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
   1872a:	4243      	negs	r3, r0
   1872c:	4158      	adcs	r0, r3
   1872e:	0040      	lsls	r0, r0, #1
	}
   18730:	4770      	bx	lr
   18732:	46c0      	nop			; (mov r8, r8)
   18734:	20003bb0 	.word	0x20003bb0
   18738:	20003b5c 	.word	0x20003b5c

0001873c <xTaskPriorityInherit>:
	{
   1873c:	b570      	push	{r4, r5, r6, lr}
   1873e:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
   18740:	d100      	bne.n	18744 <xTaskPriorityInherit+0x8>
   18742:	e06d      	b.n	18820 <xTaskPriorityInherit+0xe4>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
   18744:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   18746:	4b37      	ldr	r3, [pc, #220]	; (18824 <xTaskPriorityInherit+0xe8>)
   18748:	681b      	ldr	r3, [r3, #0]
   1874a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1874c:	429a      	cmp	r2, r3
   1874e:	d25f      	bcs.n	18810 <xTaskPriorityInherit+0xd4>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   18750:	6983      	ldr	r3, [r0, #24]
   18752:	2b00      	cmp	r3, #0
   18754:	db05      	blt.n	18762 <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   18756:	4b33      	ldr	r3, [pc, #204]	; (18824 <xTaskPriorityInherit+0xe8>)
   18758:	681b      	ldr	r3, [r3, #0]
   1875a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   1875c:	2305      	movs	r3, #5
   1875e:	1a5b      	subs	r3, r3, r1
   18760:	6183      	str	r3, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
   18762:	0093      	lsls	r3, r2, #2
   18764:	189b      	adds	r3, r3, r2
   18766:	009b      	lsls	r3, r3, #2
   18768:	4a2f      	ldr	r2, [pc, #188]	; (18828 <xTaskPriorityInherit+0xec>)
   1876a:	18d3      	adds	r3, r2, r3
   1876c:	6962      	ldr	r2, [r4, #20]
   1876e:	429a      	cmp	r2, r3
   18770:	d028      	beq.n	187c4 <xTaskPriorityInherit+0x88>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   18772:	4b2c      	ldr	r3, [pc, #176]	; (18824 <xTaskPriorityInherit+0xe8>)
   18774:	681b      	ldr	r3, [r3, #0]
   18776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   18778:	62e3      	str	r3, [r4, #44]	; 0x2c
				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
   1877a:	0020      	movs	r0, r4
   1877c:	4b2b      	ldr	r3, [pc, #172]	; (1882c <xTaskPriorityInherit+0xf0>)
   1877e:	4798      	blx	r3
   18780:	0003      	movs	r3, r0
   18782:	4a2b      	ldr	r2, [pc, #172]	; (18830 <xTaskPriorityInherit+0xf4>)
   18784:	8812      	ldrh	r2, [r2, #0]
				xReturn = pdTRUE;
   18786:	2001      	movs	r0, #1
				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
   18788:	421a      	tst	r2, r3
   1878a:	d048      	beq.n	1881e <xTaskPriorityInherit+0xe2>
   1878c:	0020      	movs	r0, r4
   1878e:	4d29      	ldr	r5, [pc, #164]	; (18834 <xTaskPriorityInherit+0xf8>)
   18790:	47a8      	blx	r5
   18792:	0006      	movs	r6, r0
   18794:	0020      	movs	r0, r4
   18796:	47a8      	blx	r5
   18798:	b2c1      	uxtb	r1, r0
   1879a:	2003      	movs	r0, #3
   1879c:	4b26      	ldr	r3, [pc, #152]	; (18838 <xTaskPriorityInherit+0xfc>)
   1879e:	4798      	blx	r3
   187a0:	0003      	movs	r3, r0
   187a2:	b2f2      	uxtb	r2, r6
   187a4:	2103      	movs	r1, #3
   187a6:	208e      	movs	r0, #142	; 0x8e
   187a8:	4e24      	ldr	r6, [pc, #144]	; (1883c <xTaskPriorityInherit+0x100>)
   187aa:	47b0      	blx	r6
   187ac:	0020      	movs	r0, r4
   187ae:	47a8      	blx	r5
   187b0:	4b1c      	ldr	r3, [pc, #112]	; (18824 <xTaskPriorityInherit+0xe8>)
   187b2:	681b      	ldr	r3, [r3, #0]
   187b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   187b6:	b2d2      	uxtb	r2, r2
   187b8:	b2c1      	uxtb	r1, r0
   187ba:	2003      	movs	r0, #3
   187bc:	4b20      	ldr	r3, [pc, #128]	; (18840 <xTaskPriorityInherit+0x104>)
   187be:	4798      	blx	r3
				xReturn = pdTRUE;
   187c0:	2001      	movs	r0, #1
   187c2:	e02c      	b.n	1881e <xTaskPriorityInherit+0xe2>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   187c4:	1d25      	adds	r5, r4, #4
   187c6:	0028      	movs	r0, r5
   187c8:	4b1e      	ldr	r3, [pc, #120]	; (18844 <xTaskPriorityInherit+0x108>)
   187ca:	4798      	blx	r3
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   187cc:	4b15      	ldr	r3, [pc, #84]	; (18824 <xTaskPriorityInherit+0xe8>)
   187ce:	681b      	ldr	r3, [r3, #0]
   187d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   187d2:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
   187d4:	0020      	movs	r0, r4
   187d6:	4b15      	ldr	r3, [pc, #84]	; (1882c <xTaskPriorityInherit+0xf0>)
   187d8:	4798      	blx	r3
   187da:	4b15      	ldr	r3, [pc, #84]	; (18830 <xTaskPriorityInherit+0xf4>)
   187dc:	881b      	ldrh	r3, [r3, #0]
   187de:	4203      	tst	r3, r0
   187e0:	d10f      	bne.n	18802 <xTaskPriorityInherit+0xc6>
   187e2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   187e4:	4a18      	ldr	r2, [pc, #96]	; (18848 <xTaskPriorityInherit+0x10c>)
   187e6:	6812      	ldr	r2, [r2, #0]
   187e8:	4293      	cmp	r3, r2
   187ea:	d901      	bls.n	187f0 <xTaskPriorityInherit+0xb4>
   187ec:	4a16      	ldr	r2, [pc, #88]	; (18848 <xTaskPriorityInherit+0x10c>)
   187ee:	6013      	str	r3, [r2, #0]
   187f0:	0098      	lsls	r0, r3, #2
   187f2:	18c0      	adds	r0, r0, r3
   187f4:	0080      	lsls	r0, r0, #2
   187f6:	4b0c      	ldr	r3, [pc, #48]	; (18828 <xTaskPriorityInherit+0xec>)
   187f8:	1818      	adds	r0, r3, r0
   187fa:	0029      	movs	r1, r5
   187fc:	4b13      	ldr	r3, [pc, #76]	; (1884c <xTaskPriorityInherit+0x110>)
   187fe:	4798      	blx	r3
   18800:	e7bb      	b.n	1877a <xTaskPriorityInherit+0x3e>
   18802:	0020      	movs	r0, r4
   18804:	4b0b      	ldr	r3, [pc, #44]	; (18834 <xTaskPriorityInherit+0xf8>)
   18806:	4798      	blx	r3
   18808:	b2c0      	uxtb	r0, r0
   1880a:	4b11      	ldr	r3, [pc, #68]	; (18850 <xTaskPriorityInherit+0x114>)
   1880c:	4798      	blx	r3
   1880e:	e7e8      	b.n	187e2 <xTaskPriorityInherit+0xa6>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
   18810:	4b04      	ldr	r3, [pc, #16]	; (18824 <xTaskPriorityInherit+0xe8>)
   18812:	681b      	ldr	r3, [r3, #0]
   18814:	6c40      	ldr	r0, [r0, #68]	; 0x44
   18816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   18818:	4298      	cmp	r0, r3
   1881a:	4180      	sbcs	r0, r0
   1881c:	4240      	negs	r0, r0
	}
   1881e:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xReturn = pdFALSE;
   18820:	2000      	movs	r0, #0
   18822:	e7fc      	b.n	1881e <xTaskPriorityInherit+0xe2>
   18824:	20003ae0 	.word	0x20003ae0
   18828:	20003aec 	.word	0x20003aec
   1882c:	000153e5 	.word	0x000153e5
   18830:	200000c8 	.word	0x200000c8
   18834:	000153d5 	.word	0x000153d5
   18838:	00015c95 	.word	0x00015c95
   1883c:	000162e1 	.word	0x000162e1
   18840:	00015c3d 	.word	0x00015c3d
   18844:	00016663 	.word	0x00016663
   18848:	20003b64 	.word	0x20003b64
   1884c:	0001661d 	.word	0x0001661d
   18850:	000160b5 	.word	0x000160b5

00018854 <xTaskPriorityDisinherit>:
	{
   18854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18856:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
   18858:	d05a      	beq.n	18910 <xTaskPriorityDisinherit+0xbc>
			configASSERT( pxTCB == pxCurrentTCB );
   1885a:	4b2f      	ldr	r3, [pc, #188]	; (18918 <xTaskPriorityDisinherit+0xc4>)
   1885c:	681b      	ldr	r3, [r3, #0]
   1885e:	4298      	cmp	r0, r3
   18860:	d001      	beq.n	18866 <xTaskPriorityDisinherit+0x12>
   18862:	b672      	cpsid	i
   18864:	e7fe      	b.n	18864 <xTaskPriorityDisinherit+0x10>
			configASSERT( pxTCB->uxMutexesHeld );
   18866:	6c83      	ldr	r3, [r0, #72]	; 0x48
   18868:	2b00      	cmp	r3, #0
   1886a:	d101      	bne.n	18870 <xTaskPriorityDisinherit+0x1c>
   1886c:	b672      	cpsid	i
   1886e:	e7fe      	b.n	1886e <xTaskPriorityDisinherit+0x1a>
			( pxTCB->uxMutexesHeld )--;
   18870:	3b01      	subs	r3, #1
   18872:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   18874:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   18876:	6c41      	ldr	r1, [r0, #68]	; 0x44
   18878:	428a      	cmp	r2, r1
   1887a:	d04b      	beq.n	18914 <xTaskPriorityDisinherit+0xc0>
	BaseType_t xReturn = pdFALSE;
   1887c:	2000      	movs	r0, #0
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
   1887e:	2b00      	cmp	r3, #0
   18880:	d145      	bne.n	1890e <xTaskPriorityDisinherit+0xba>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   18882:	1d25      	adds	r5, r4, #4
   18884:	0028      	movs	r0, r5
   18886:	4b25      	ldr	r3, [pc, #148]	; (1891c <xTaskPriorityDisinherit+0xc8>)
   18888:	4798      	blx	r3
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   1888a:	0020      	movs	r0, r4
   1888c:	4b24      	ldr	r3, [pc, #144]	; (18920 <xTaskPriorityDisinherit+0xcc>)
   1888e:	4798      	blx	r3
   18890:	4b24      	ldr	r3, [pc, #144]	; (18924 <xTaskPriorityDisinherit+0xd0>)
   18892:	881b      	ldrh	r3, [r3, #0]
   18894:	4203      	tst	r3, r0
   18896:	d018      	beq.n	188ca <xTaskPriorityDisinherit+0x76>
   18898:	0020      	movs	r0, r4
   1889a:	4e23      	ldr	r6, [pc, #140]	; (18928 <xTaskPriorityDisinherit+0xd4>)
   1889c:	47b0      	blx	r6
   1889e:	0007      	movs	r7, r0
   188a0:	0020      	movs	r0, r4
   188a2:	47b0      	blx	r6
   188a4:	b2c1      	uxtb	r1, r0
   188a6:	2003      	movs	r0, #3
   188a8:	4b20      	ldr	r3, [pc, #128]	; (1892c <xTaskPriorityDisinherit+0xd8>)
   188aa:	4798      	blx	r3
   188ac:	0003      	movs	r3, r0
   188ae:	b2fa      	uxtb	r2, r7
   188b0:	2103      	movs	r1, #3
   188b2:	208f      	movs	r0, #143	; 0x8f
   188b4:	4f1e      	ldr	r7, [pc, #120]	; (18930 <xTaskPriorityDisinherit+0xdc>)
   188b6:	47b8      	blx	r7
   188b8:	0020      	movs	r0, r4
   188ba:	47b0      	blx	r6
   188bc:	2344      	movs	r3, #68	; 0x44
   188be:	18e3      	adds	r3, r4, r3
   188c0:	781a      	ldrb	r2, [r3, #0]
   188c2:	b2c1      	uxtb	r1, r0
   188c4:	2003      	movs	r0, #3
   188c6:	4b1b      	ldr	r3, [pc, #108]	; (18934 <xTaskPriorityDisinherit+0xe0>)
   188c8:	4798      	blx	r3
					pxTCB->uxPriority = pxTCB->uxBasePriority;
   188ca:	6c62      	ldr	r2, [r4, #68]	; 0x44
   188cc:	62e2      	str	r2, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   188ce:	2305      	movs	r3, #5
   188d0:	1a9b      	subs	r3, r3, r2
   188d2:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
   188d4:	0020      	movs	r0, r4
   188d6:	4b12      	ldr	r3, [pc, #72]	; (18920 <xTaskPriorityDisinherit+0xcc>)
   188d8:	4798      	blx	r3
   188da:	4b12      	ldr	r3, [pc, #72]	; (18924 <xTaskPriorityDisinherit+0xd0>)
   188dc:	881b      	ldrh	r3, [r3, #0]
   188de:	4203      	tst	r3, r0
   188e0:	d005      	beq.n	188ee <xTaskPriorityDisinherit+0x9a>
   188e2:	0020      	movs	r0, r4
   188e4:	4b10      	ldr	r3, [pc, #64]	; (18928 <xTaskPriorityDisinherit+0xd4>)
   188e6:	4798      	blx	r3
   188e8:	b2c0      	uxtb	r0, r0
   188ea:	4b13      	ldr	r3, [pc, #76]	; (18938 <xTaskPriorityDisinherit+0xe4>)
   188ec:	4798      	blx	r3
   188ee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   188f0:	4a12      	ldr	r2, [pc, #72]	; (1893c <xTaskPriorityDisinherit+0xe8>)
   188f2:	6812      	ldr	r2, [r2, #0]
   188f4:	4293      	cmp	r3, r2
   188f6:	d901      	bls.n	188fc <xTaskPriorityDisinherit+0xa8>
   188f8:	4a10      	ldr	r2, [pc, #64]	; (1893c <xTaskPriorityDisinherit+0xe8>)
   188fa:	6013      	str	r3, [r2, #0]
   188fc:	0098      	lsls	r0, r3, #2
   188fe:	18c0      	adds	r0, r0, r3
   18900:	0080      	lsls	r0, r0, #2
   18902:	4b0f      	ldr	r3, [pc, #60]	; (18940 <xTaskPriorityDisinherit+0xec>)
   18904:	1818      	adds	r0, r3, r0
   18906:	0029      	movs	r1, r5
   18908:	4b0e      	ldr	r3, [pc, #56]	; (18944 <xTaskPriorityDisinherit+0xf0>)
   1890a:	4798      	blx	r3
					xReturn = pdTRUE;
   1890c:	2001      	movs	r0, #1
	}
   1890e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	BaseType_t xReturn = pdFALSE;
   18910:	2000      	movs	r0, #0
   18912:	e7fc      	b.n	1890e <xTaskPriorityDisinherit+0xba>
   18914:	2000      	movs	r0, #0
   18916:	e7fa      	b.n	1890e <xTaskPriorityDisinherit+0xba>
   18918:	20003ae0 	.word	0x20003ae0
   1891c:	00016663 	.word	0x00016663
   18920:	000153e5 	.word	0x000153e5
   18924:	200000c8 	.word	0x200000c8
   18928:	000153d5 	.word	0x000153d5
   1892c:	00015c95 	.word	0x00015c95
   18930:	000162e1 	.word	0x000162e1
   18934:	00015c3d 	.word	0x00015c3d
   18938:	000160b5 	.word	0x000160b5
   1893c:	20003b64 	.word	0x20003b64
   18940:	20003aec 	.word	0x20003aec
   18944:	0001661d 	.word	0x0001661d

00018948 <vTaskPriorityDisinheritAfterTimeout>:
	{
   18948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1894a:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
   1894c:	d00d      	beq.n	1896a <vTaskPriorityDisinheritAfterTimeout+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
   1894e:	6c83      	ldr	r3, [r0, #72]	; 0x48
   18950:	2b00      	cmp	r3, #0
   18952:	d101      	bne.n	18958 <vTaskPriorityDisinheritAfterTimeout+0x10>
   18954:	b672      	cpsid	i
   18956:	e7fe      	b.n	18956 <vTaskPriorityDisinheritAfterTimeout+0xe>
   18958:	6c45      	ldr	r5, [r0, #68]	; 0x44
   1895a:	428d      	cmp	r5, r1
   1895c:	d200      	bcs.n	18960 <vTaskPriorityDisinheritAfterTimeout+0x18>
   1895e:	000d      	movs	r5, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
   18960:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   18962:	42aa      	cmp	r2, r5
   18964:	d001      	beq.n	1896a <vTaskPriorityDisinheritAfterTimeout+0x22>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
   18966:	2b01      	cmp	r3, #1
   18968:	d000      	beq.n	1896c <vTaskPriorityDisinheritAfterTimeout+0x24>
	}
   1896a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					configASSERT( pxTCB != pxCurrentTCB );
   1896c:	4b2b      	ldr	r3, [pc, #172]	; (18a1c <vTaskPriorityDisinheritAfterTimeout+0xd4>)
   1896e:	681b      	ldr	r3, [r3, #0]
   18970:	429c      	cmp	r4, r3
   18972:	d101      	bne.n	18978 <vTaskPriorityDisinheritAfterTimeout+0x30>
   18974:	b672      	cpsid	i
   18976:	e7fe      	b.n	18976 <vTaskPriorityDisinheritAfterTimeout+0x2e>
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   18978:	0020      	movs	r0, r4
   1897a:	4b29      	ldr	r3, [pc, #164]	; (18a20 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
   1897c:	4798      	blx	r3
   1897e:	4b29      	ldr	r3, [pc, #164]	; (18a24 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
   18980:	881b      	ldrh	r3, [r3, #0]
   18982:	4203      	tst	r3, r0
   18984:	d018      	beq.n	189b8 <vTaskPriorityDisinheritAfterTimeout+0x70>
   18986:	0020      	movs	r0, r4
   18988:	4e27      	ldr	r6, [pc, #156]	; (18a28 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
   1898a:	47b0      	blx	r6
   1898c:	0007      	movs	r7, r0
   1898e:	0020      	movs	r0, r4
   18990:	47b0      	blx	r6
   18992:	b2c1      	uxtb	r1, r0
   18994:	2003      	movs	r0, #3
   18996:	4b25      	ldr	r3, [pc, #148]	; (18a2c <vTaskPriorityDisinheritAfterTimeout+0xe4>)
   18998:	4798      	blx	r3
   1899a:	0003      	movs	r3, r0
   1899c:	b2fa      	uxtb	r2, r7
   1899e:	2103      	movs	r1, #3
   189a0:	208f      	movs	r0, #143	; 0x8f
   189a2:	4f23      	ldr	r7, [pc, #140]	; (18a30 <vTaskPriorityDisinheritAfterTimeout+0xe8>)
   189a4:	47b8      	blx	r7
   189a6:	0020      	movs	r0, r4
   189a8:	47b0      	blx	r6
   189aa:	2344      	movs	r3, #68	; 0x44
   189ac:	18e3      	adds	r3, r4, r3
   189ae:	781a      	ldrb	r2, [r3, #0]
   189b0:	b2c1      	uxtb	r1, r0
   189b2:	2003      	movs	r0, #3
   189b4:	4b1f      	ldr	r3, [pc, #124]	; (18a34 <vTaskPriorityDisinheritAfterTimeout+0xec>)
   189b6:	4798      	blx	r3
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
   189b8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
					pxTCB->uxPriority = uxPriorityToUse;
   189ba:	62e5      	str	r5, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   189bc:	69a3      	ldr	r3, [r4, #24]
   189be:	2b00      	cmp	r3, #0
   189c0:	db02      	blt.n	189c8 <vTaskPriorityDisinheritAfterTimeout+0x80>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   189c2:	2205      	movs	r2, #5
   189c4:	1b55      	subs	r5, r2, r5
   189c6:	61a5      	str	r5, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
   189c8:	008b      	lsls	r3, r1, #2
   189ca:	185b      	adds	r3, r3, r1
   189cc:	009b      	lsls	r3, r3, #2
   189ce:	4a1a      	ldr	r2, [pc, #104]	; (18a38 <vTaskPriorityDisinheritAfterTimeout+0xf0>)
   189d0:	18d3      	adds	r3, r2, r3
   189d2:	6962      	ldr	r2, [r4, #20]
   189d4:	429a      	cmp	r2, r3
   189d6:	d1c8      	bne.n	1896a <vTaskPriorityDisinheritAfterTimeout+0x22>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   189d8:	1d25      	adds	r5, r4, #4
   189da:	0028      	movs	r0, r5
   189dc:	4b17      	ldr	r3, [pc, #92]	; (18a3c <vTaskPriorityDisinheritAfterTimeout+0xf4>)
   189de:	4798      	blx	r3
						prvAddTaskToReadyList( pxTCB );
   189e0:	0020      	movs	r0, r4
   189e2:	4b0f      	ldr	r3, [pc, #60]	; (18a20 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
   189e4:	4798      	blx	r3
   189e6:	4b0f      	ldr	r3, [pc, #60]	; (18a24 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
   189e8:	881b      	ldrh	r3, [r3, #0]
   189ea:	4203      	tst	r3, r0
   189ec:	d005      	beq.n	189fa <vTaskPriorityDisinheritAfterTimeout+0xb2>
   189ee:	0020      	movs	r0, r4
   189f0:	4b0d      	ldr	r3, [pc, #52]	; (18a28 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
   189f2:	4798      	blx	r3
   189f4:	b2c0      	uxtb	r0, r0
   189f6:	4b12      	ldr	r3, [pc, #72]	; (18a40 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
   189f8:	4798      	blx	r3
   189fa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   189fc:	4a11      	ldr	r2, [pc, #68]	; (18a44 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
   189fe:	6812      	ldr	r2, [r2, #0]
   18a00:	4293      	cmp	r3, r2
   18a02:	d901      	bls.n	18a08 <vTaskPriorityDisinheritAfterTimeout+0xc0>
   18a04:	4a0f      	ldr	r2, [pc, #60]	; (18a44 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
   18a06:	6013      	str	r3, [r2, #0]
   18a08:	0098      	lsls	r0, r3, #2
   18a0a:	18c0      	adds	r0, r0, r3
   18a0c:	0080      	lsls	r0, r0, #2
   18a0e:	4b0a      	ldr	r3, [pc, #40]	; (18a38 <vTaskPriorityDisinheritAfterTimeout+0xf0>)
   18a10:	1818      	adds	r0, r3, r0
   18a12:	0029      	movs	r1, r5
   18a14:	4b0c      	ldr	r3, [pc, #48]	; (18a48 <vTaskPriorityDisinheritAfterTimeout+0x100>)
   18a16:	4798      	blx	r3
	}
   18a18:	e7a7      	b.n	1896a <vTaskPriorityDisinheritAfterTimeout+0x22>
   18a1a:	46c0      	nop			; (mov r8, r8)
   18a1c:	20003ae0 	.word	0x20003ae0
   18a20:	000153e5 	.word	0x000153e5
   18a24:	200000c8 	.word	0x200000c8
   18a28:	000153d5 	.word	0x000153d5
   18a2c:	00015c95 	.word	0x00015c95
   18a30:	000162e1 	.word	0x000162e1
   18a34:	00015c3d 	.word	0x00015c3d
   18a38:	20003aec 	.word	0x20003aec
   18a3c:	00016663 	.word	0x00016663
   18a40:	000160b5 	.word	0x000160b5
   18a44:	20003b64 	.word	0x20003b64
   18a48:	0001661d 	.word	0x0001661d

00018a4c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
   18a4c:	4b05      	ldr	r3, [pc, #20]	; (18a64 <pvTaskIncrementMutexHeldCount+0x18>)
   18a4e:	681b      	ldr	r3, [r3, #0]
   18a50:	2b00      	cmp	r3, #0
   18a52:	d004      	beq.n	18a5e <pvTaskIncrementMutexHeldCount+0x12>
			( pxCurrentTCB->uxMutexesHeld )++;
   18a54:	4b03      	ldr	r3, [pc, #12]	; (18a64 <pvTaskIncrementMutexHeldCount+0x18>)
   18a56:	681a      	ldr	r2, [r3, #0]
   18a58:	6c93      	ldr	r3, [r2, #72]	; 0x48
   18a5a:	3301      	adds	r3, #1
   18a5c:	6493      	str	r3, [r2, #72]	; 0x48
		return pxCurrentTCB;
   18a5e:	4b01      	ldr	r3, [pc, #4]	; (18a64 <pvTaskIncrementMutexHeldCount+0x18>)
   18a60:	6818      	ldr	r0, [r3, #0]
	}
   18a62:	4770      	bx	lr
   18a64:	20003ae0 	.word	0x20003ae0

00018a68 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   18a68:	b510      	push	{r4, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   18a6a:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   18a6c:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
   18a6e:	4291      	cmp	r1, r2
   18a70:	d80b      	bhi.n	18a8a <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   18a72:	1ad2      	subs	r2, r2, r3
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   18a74:	2401      	movs	r4, #1
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   18a76:	6983      	ldr	r3, [r0, #24]
   18a78:	429a      	cmp	r2, r3
   18a7a:	d211      	bcs.n	18aa0 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   18a7c:	1d01      	adds	r1, r0, #4
   18a7e:	4b09      	ldr	r3, [pc, #36]	; (18aa4 <prvInsertTimerInActiveList+0x3c>)
   18a80:	6818      	ldr	r0, [r3, #0]
   18a82:	4b09      	ldr	r3, [pc, #36]	; (18aa8 <prvInsertTimerInActiveList+0x40>)
   18a84:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
   18a86:	2400      	movs	r4, #0
   18a88:	e00a      	b.n	18aa0 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   18a8a:	429a      	cmp	r2, r3
   18a8c:	d202      	bcs.n	18a94 <prvInsertTimerInActiveList+0x2c>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   18a8e:	2401      	movs	r4, #1
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   18a90:	4299      	cmp	r1, r3
   18a92:	d205      	bcs.n	18aa0 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   18a94:	1d01      	adds	r1, r0, #4
   18a96:	4b05      	ldr	r3, [pc, #20]	; (18aac <prvInsertTimerInActiveList+0x44>)
   18a98:	6818      	ldr	r0, [r3, #0]
   18a9a:	4b03      	ldr	r3, [pc, #12]	; (18aa8 <prvInsertTimerInActiveList+0x40>)
   18a9c:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
   18a9e:	2400      	movs	r4, #0
		}
	}

	return xProcessTimerNow;
}
   18aa0:	0020      	movs	r0, r4
   18aa2:	bd10      	pop	{r4, pc}
   18aa4:	20003be8 	.word	0x20003be8
   18aa8:	00016635 	.word	0x00016635
   18aac:	20003be4 	.word	0x20003be4

00018ab0 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   18ab0:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   18ab2:	4b0e      	ldr	r3, [pc, #56]	; (18aec <prvCheckForValidListAndQueue+0x3c>)
   18ab4:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   18ab6:	4b0e      	ldr	r3, [pc, #56]	; (18af0 <prvCheckForValidListAndQueue+0x40>)
   18ab8:	681b      	ldr	r3, [r3, #0]
   18aba:	2b00      	cmp	r3, #0
   18abc:	d002      	beq.n	18ac4 <prvCheckForValidListAndQueue+0x14>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   18abe:	4b0d      	ldr	r3, [pc, #52]	; (18af4 <prvCheckForValidListAndQueue+0x44>)
   18ac0:	4798      	blx	r3
}
   18ac2:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
   18ac4:	4d0c      	ldr	r5, [pc, #48]	; (18af8 <prvCheckForValidListAndQueue+0x48>)
   18ac6:	0028      	movs	r0, r5
   18ac8:	4e0c      	ldr	r6, [pc, #48]	; (18afc <prvCheckForValidListAndQueue+0x4c>)
   18aca:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
   18acc:	4c0c      	ldr	r4, [pc, #48]	; (18b00 <prvCheckForValidListAndQueue+0x50>)
   18ace:	0020      	movs	r0, r4
   18ad0:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
   18ad2:	4b0c      	ldr	r3, [pc, #48]	; (18b04 <prvCheckForValidListAndQueue+0x54>)
   18ad4:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   18ad6:	4b0c      	ldr	r3, [pc, #48]	; (18b08 <prvCheckForValidListAndQueue+0x58>)
   18ad8:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   18ada:	2200      	movs	r2, #0
   18adc:	210c      	movs	r1, #12
   18ade:	2005      	movs	r0, #5
   18ae0:	4b0a      	ldr	r3, [pc, #40]	; (18b0c <prvCheckForValidListAndQueue+0x5c>)
   18ae2:	4798      	blx	r3
   18ae4:	4b02      	ldr	r3, [pc, #8]	; (18af0 <prvCheckForValidListAndQueue+0x40>)
   18ae6:	6018      	str	r0, [r3, #0]
   18ae8:	e7e9      	b.n	18abe <prvCheckForValidListAndQueue+0xe>
   18aea:	46c0      	nop			; (mov r8, r8)
   18aec:	00016791 	.word	0x00016791
   18af0:	20003c18 	.word	0x20003c18
   18af4:	000167a9 	.word	0x000167a9
   18af8:	20003bec 	.word	0x20003bec
   18afc:	00016601 	.word	0x00016601
   18b00:	20003c00 	.word	0x20003c00
   18b04:	20003be4 	.word	0x20003be4
   18b08:	20003be8 	.word	0x20003be8
   18b0c:	00016c0d 	.word	0x00016c0d

00018b10 <xTimerCreateTimerTask>:
{
   18b10:	b510      	push	{r4, lr}
   18b12:	b082      	sub	sp, #8
	prvCheckForValidListAndQueue();
   18b14:	4b0a      	ldr	r3, [pc, #40]	; (18b40 <xTimerCreateTimerTask+0x30>)
   18b16:	4798      	blx	r3
	if( xTimerQueue != NULL )
   18b18:	4b0a      	ldr	r3, [pc, #40]	; (18b44 <xTimerCreateTimerTask+0x34>)
   18b1a:	681b      	ldr	r3, [r3, #0]
   18b1c:	2b00      	cmp	r3, #0
   18b1e:	d00d      	beq.n	18b3c <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate(	prvTimerTask,
   18b20:	4b09      	ldr	r3, [pc, #36]	; (18b48 <xTimerCreateTimerTask+0x38>)
   18b22:	9301      	str	r3, [sp, #4]
   18b24:	2302      	movs	r3, #2
   18b26:	9300      	str	r3, [sp, #0]
   18b28:	2300      	movs	r3, #0
   18b2a:	2280      	movs	r2, #128	; 0x80
   18b2c:	4907      	ldr	r1, [pc, #28]	; (18b4c <xTimerCreateTimerTask+0x3c>)
   18b2e:	4808      	ldr	r0, [pc, #32]	; (18b50 <xTimerCreateTimerTask+0x40>)
   18b30:	4c08      	ldr	r4, [pc, #32]	; (18b54 <xTimerCreateTimerTask+0x44>)
   18b32:	47a0      	blx	r4
	configASSERT( xReturn );
   18b34:	2800      	cmp	r0, #0
   18b36:	d001      	beq.n	18b3c <xTimerCreateTimerTask+0x2c>
}
   18b38:	b002      	add	sp, #8
   18b3a:	bd10      	pop	{r4, pc}
	configASSERT( xReturn );
   18b3c:	b672      	cpsid	i
   18b3e:	e7fe      	b.n	18b3e <xTimerCreateTimerTask+0x2e>
   18b40:	00018ab1 	.word	0x00018ab1
   18b44:	20003c18 	.word	0x20003c18
   18b48:	20003c1c 	.word	0x20003c1c
   18b4c:	0002a048 	.word	0x0002a048
   18b50:	00018c7d 	.word	0x00018c7d
   18b54:	00017be5 	.word	0x00017be5

00018b58 <xTimerGenericCommand>:
{
   18b58:	b530      	push	{r4, r5, lr}
   18b5a:	b085      	sub	sp, #20
   18b5c:	0004      	movs	r4, r0
   18b5e:	001d      	movs	r5, r3
	configASSERT( xTimer );
   18b60:	2800      	cmp	r0, #0
   18b62:	d014      	beq.n	18b8e <xTimerGenericCommand+0x36>
	if( xTimerQueue != NULL )
   18b64:	4b13      	ldr	r3, [pc, #76]	; (18bb4 <xTimerGenericCommand+0x5c>)
   18b66:	6818      	ldr	r0, [r3, #0]
   18b68:	2800      	cmp	r0, #0
   18b6a:	d021      	beq.n	18bb0 <xTimerGenericCommand+0x58>
		xMessage.xMessageID = xCommandID;
   18b6c:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   18b6e:	9202      	str	r2, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
   18b70:	9403      	str	r4, [sp, #12]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   18b72:	2905      	cmp	r1, #5
   18b74:	dc15      	bgt.n	18ba2 <xTimerGenericCommand+0x4a>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   18b76:	4b10      	ldr	r3, [pc, #64]	; (18bb8 <xTimerGenericCommand+0x60>)
   18b78:	4798      	blx	r3
   18b7a:	2802      	cmp	r0, #2
   18b7c:	d009      	beq.n	18b92 <xTimerGenericCommand+0x3a>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   18b7e:	4b0d      	ldr	r3, [pc, #52]	; (18bb4 <xTimerGenericCommand+0x5c>)
   18b80:	6818      	ldr	r0, [r3, #0]
   18b82:	2300      	movs	r3, #0
   18b84:	2200      	movs	r2, #0
   18b86:	a901      	add	r1, sp, #4
   18b88:	4c0c      	ldr	r4, [pc, #48]	; (18bbc <xTimerGenericCommand+0x64>)
   18b8a:	47a0      	blx	r4
   18b8c:	e00e      	b.n	18bac <xTimerGenericCommand+0x54>
	configASSERT( xTimer );
   18b8e:	b672      	cpsid	i
   18b90:	e7fe      	b.n	18b90 <xTimerGenericCommand+0x38>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   18b92:	4b08      	ldr	r3, [pc, #32]	; (18bb4 <xTimerGenericCommand+0x5c>)
   18b94:	6818      	ldr	r0, [r3, #0]
   18b96:	2300      	movs	r3, #0
   18b98:	9a08      	ldr	r2, [sp, #32]
   18b9a:	a901      	add	r1, sp, #4
   18b9c:	4c07      	ldr	r4, [pc, #28]	; (18bbc <xTimerGenericCommand+0x64>)
   18b9e:	47a0      	blx	r4
   18ba0:	e004      	b.n	18bac <xTimerGenericCommand+0x54>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   18ba2:	2300      	movs	r3, #0
   18ba4:	002a      	movs	r2, r5
   18ba6:	a901      	add	r1, sp, #4
   18ba8:	4c05      	ldr	r4, [pc, #20]	; (18bc0 <xTimerGenericCommand+0x68>)
   18baa:	47a0      	blx	r4
}
   18bac:	b005      	add	sp, #20
   18bae:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
   18bb0:	2000      	movs	r0, #0
	return xReturn;
   18bb2:	e7fb      	b.n	18bac <xTimerGenericCommand+0x54>
   18bb4:	20003c18 	.word	0x20003c18
   18bb8:	0001871d 	.word	0x0001871d
   18bbc:	00016d49 	.word	0x00016d49
   18bc0:	0001709d 	.word	0x0001709d

00018bc4 <prvSampleTimeNow>:
{
   18bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
   18bc6:	46d6      	mov	lr, sl
   18bc8:	464f      	mov	r7, r9
   18bca:	4646      	mov	r6, r8
   18bcc:	b5c0      	push	{r6, r7, lr}
   18bce:	b082      	sub	sp, #8
   18bd0:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
   18bd2:	4b23      	ldr	r3, [pc, #140]	; (18c60 <prvSampleTimeNow+0x9c>)
   18bd4:	4798      	blx	r3
   18bd6:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
   18bd8:	4b22      	ldr	r3, [pc, #136]	; (18c64 <prvSampleTimeNow+0xa0>)
   18bda:	681b      	ldr	r3, [r3, #0]
   18bdc:	4298      	cmp	r0, r3
   18bde:	d317      	bcc.n	18c10 <prvSampleTimeNow+0x4c>
		*pxTimerListsWereSwitched = pdFALSE;
   18be0:	2300      	movs	r3, #0
   18be2:	4642      	mov	r2, r8
   18be4:	6013      	str	r3, [r2, #0]
	xLastTime = xTimeNow;
   18be6:	4b1f      	ldr	r3, [pc, #124]	; (18c64 <prvSampleTimeNow+0xa0>)
   18be8:	4652      	mov	r2, sl
   18bea:	601a      	str	r2, [r3, #0]
}
   18bec:	4650      	mov	r0, sl
   18bee:	b002      	add	sp, #8
   18bf0:	bc1c      	pop	{r2, r3, r4}
   18bf2:	4690      	mov	r8, r2
   18bf4:	4699      	mov	r9, r3
   18bf6:	46a2      	mov	sl, r4
   18bf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   18bfa:	2300      	movs	r3, #0
   18bfc:	9300      	str	r3, [sp, #0]
   18bfe:	003a      	movs	r2, r7
   18c00:	2100      	movs	r1, #0
   18c02:	0020      	movs	r0, r4
   18c04:	4c18      	ldr	r4, [pc, #96]	; (18c68 <prvSampleTimeNow+0xa4>)
   18c06:	47a0      	blx	r4
				configASSERT( xResult );
   18c08:	2800      	cmp	r0, #0
   18c0a:	d104      	bne.n	18c16 <prvSampleTimeNow+0x52>
   18c0c:	b672      	cpsid	i
   18c0e:	e7fe      	b.n	18c0e <prvSampleTimeNow+0x4a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   18c10:	4d16      	ldr	r5, [pc, #88]	; (18c6c <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   18c12:	4b17      	ldr	r3, [pc, #92]	; (18c70 <prvSampleTimeNow+0xac>)
   18c14:	4699      	mov	r9, r3
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   18c16:	682b      	ldr	r3, [r5, #0]
   18c18:	681a      	ldr	r2, [r3, #0]
   18c1a:	2a00      	cmp	r2, #0
   18c1c:	d017      	beq.n	18c4e <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   18c1e:	68db      	ldr	r3, [r3, #12]
   18c20:	681f      	ldr	r7, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   18c22:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   18c24:	1d26      	adds	r6, r4, #4
   18c26:	0030      	movs	r0, r6
   18c28:	47c8      	blx	r9
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   18c2a:	0020      	movs	r0, r4
   18c2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   18c2e:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   18c30:	69e3      	ldr	r3, [r4, #28]
   18c32:	2b01      	cmp	r3, #1
   18c34:	d1ef      	bne.n	18c16 <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   18c36:	69a3      	ldr	r3, [r4, #24]
   18c38:	18fb      	adds	r3, r7, r3
			if( xReloadTime > xNextExpireTime )
   18c3a:	429f      	cmp	r7, r3
   18c3c:	d2dd      	bcs.n	18bfa <prvSampleTimeNow+0x36>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   18c3e:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   18c40:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   18c42:	4b0a      	ldr	r3, [pc, #40]	; (18c6c <prvSampleTimeNow+0xa8>)
   18c44:	6818      	ldr	r0, [r3, #0]
   18c46:	0031      	movs	r1, r6
   18c48:	4b0a      	ldr	r3, [pc, #40]	; (18c74 <prvSampleTimeNow+0xb0>)
   18c4a:	4798      	blx	r3
   18c4c:	e7e3      	b.n	18c16 <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
   18c4e:	4a0a      	ldr	r2, [pc, #40]	; (18c78 <prvSampleTimeNow+0xb4>)
   18c50:	4906      	ldr	r1, [pc, #24]	; (18c6c <prvSampleTimeNow+0xa8>)
   18c52:	6810      	ldr	r0, [r2, #0]
   18c54:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
   18c56:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
   18c58:	2301      	movs	r3, #1
   18c5a:	4642      	mov	r2, r8
   18c5c:	6013      	str	r3, [r2, #0]
   18c5e:	e7c2      	b.n	18be6 <prvSampleTimeNow+0x22>
   18c60:	00017f11 	.word	0x00017f11
   18c64:	20003c14 	.word	0x20003c14
   18c68:	00018b59 	.word	0x00018b59
   18c6c:	20003be4 	.word	0x20003be4
   18c70:	00016663 	.word	0x00016663
   18c74:	00016635 	.word	0x00016635
   18c78:	20003be8 	.word	0x20003be8

00018c7c <prvTimerTask>:
{
   18c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
   18c7e:	b089      	sub	sp, #36	; 0x24
		vApplicationDaemonTaskStartupHook();
   18c80:	4b53      	ldr	r3, [pc, #332]	; (18dd0 <prvTimerTask+0x154>)
   18c82:	4798      	blx	r3
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   18c84:	4f53      	ldr	r7, [pc, #332]	; (18dd4 <prvTimerTask+0x158>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   18c86:	4b54      	ldr	r3, [pc, #336]	; (18dd8 <prvTimerTask+0x15c>)
   18c88:	681b      	ldr	r3, [r3, #0]
   18c8a:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   18c8c:	2a00      	cmp	r2, #0
   18c8e:	d00e      	beq.n	18cae <prvTimerTask+0x32>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   18c90:	68db      	ldr	r3, [r3, #12]
   18c92:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
   18c94:	4b51      	ldr	r3, [pc, #324]	; (18ddc <prvTimerTask+0x160>)
   18c96:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   18c98:	a805      	add	r0, sp, #20
   18c9a:	4b51      	ldr	r3, [pc, #324]	; (18de0 <prvTimerTask+0x164>)
   18c9c:	4798      	blx	r3
   18c9e:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
   18ca0:	9b05      	ldr	r3, [sp, #20]
   18ca2:	2b00      	cmp	r3, #0
   18ca4:	d15f      	bne.n	18d66 <prvTimerTask+0xea>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   18ca6:	4284      	cmp	r4, r0
   18ca8:	d936      	bls.n	18d18 <prvTimerTask+0x9c>
   18caa:	2200      	movs	r2, #0
   18cac:	e00f      	b.n	18cce <prvTimerTask+0x52>
	vTaskSuspendAll();
   18cae:	4b4b      	ldr	r3, [pc, #300]	; (18ddc <prvTimerTask+0x160>)
   18cb0:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   18cb2:	a805      	add	r0, sp, #20
   18cb4:	4b4a      	ldr	r3, [pc, #296]	; (18de0 <prvTimerTask+0x164>)
   18cb6:	4798      	blx	r3
   18cb8:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
   18cba:	9b05      	ldr	r3, [sp, #20]
   18cbc:	2b00      	cmp	r3, #0
   18cbe:	d152      	bne.n	18d66 <prvTimerTask+0xea>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
   18cc0:	4b48      	ldr	r3, [pc, #288]	; (18de4 <prvTimerTask+0x168>)
   18cc2:	681b      	ldr	r3, [r3, #0]
   18cc4:	681b      	ldr	r3, [r3, #0]
   18cc6:	425a      	negs	r2, r3
   18cc8:	415a      	adcs	r2, r3
   18cca:	b2d2      	uxtb	r2, r2
   18ccc:	2400      	movs	r4, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
   18cce:	1b61      	subs	r1, r4, r5
   18cd0:	4b45      	ldr	r3, [pc, #276]	; (18de8 <prvTimerTask+0x16c>)
   18cd2:	6818      	ldr	r0, [r3, #0]
   18cd4:	4b45      	ldr	r3, [pc, #276]	; (18dec <prvTimerTask+0x170>)
   18cd6:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   18cd8:	4b45      	ldr	r3, [pc, #276]	; (18df0 <prvTimerTask+0x174>)
   18cda:	4798      	blx	r3
   18cdc:	2800      	cmp	r0, #0
   18cde:	d03f      	beq.n	18d60 <prvTimerTask+0xe4>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   18ce0:	4d41      	ldr	r5, [pc, #260]	; (18de8 <prvTimerTask+0x16c>)
   18ce2:	4c44      	ldr	r4, [pc, #272]	; (18df4 <prvTimerTask+0x178>)
   18ce4:	2200      	movs	r2, #0
   18ce6:	a905      	add	r1, sp, #20
   18ce8:	6828      	ldr	r0, [r5, #0]
   18cea:	47a0      	blx	r4
   18cec:	2800      	cmp	r0, #0
   18cee:	d0ca      	beq.n	18c86 <prvTimerTask+0xa>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   18cf0:	9b05      	ldr	r3, [sp, #20]
   18cf2:	9303      	str	r3, [sp, #12]
   18cf4:	2b00      	cmp	r3, #0
   18cf6:	dbf5      	blt.n	18ce4 <prvTimerTask+0x68>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   18cf8:	9e07      	ldr	r6, [sp, #28]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
   18cfa:	6973      	ldr	r3, [r6, #20]
   18cfc:	2b00      	cmp	r3, #0
   18cfe:	d001      	beq.n	18d04 <prvTimerTask+0x88>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   18d00:	1d30      	adds	r0, r6, #4
   18d02:	47b8      	blx	r7
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   18d04:	a804      	add	r0, sp, #16
   18d06:	4b36      	ldr	r3, [pc, #216]	; (18de0 <prvTimerTask+0x164>)
   18d08:	4798      	blx	r3
			switch( xMessage.xMessageID )
   18d0a:	9b05      	ldr	r3, [sp, #20]
   18d0c:	2b09      	cmp	r3, #9
   18d0e:	d8e9      	bhi.n	18ce4 <prvTimerTask+0x68>
   18d10:	009b      	lsls	r3, r3, #2
   18d12:	4a39      	ldr	r2, [pc, #228]	; (18df8 <prvTimerTask+0x17c>)
   18d14:	58d3      	ldr	r3, [r2, r3]
   18d16:	469f      	mov	pc, r3
				( void ) xTaskResumeAll();
   18d18:	4b35      	ldr	r3, [pc, #212]	; (18df0 <prvTimerTask+0x174>)
   18d1a:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   18d1c:	4b2e      	ldr	r3, [pc, #184]	; (18dd8 <prvTimerTask+0x15c>)
   18d1e:	681b      	ldr	r3, [r3, #0]
   18d20:	68db      	ldr	r3, [r3, #12]
   18d22:	68de      	ldr	r6, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   18d24:	1d30      	adds	r0, r6, #4
   18d26:	4b2b      	ldr	r3, [pc, #172]	; (18dd4 <prvTimerTask+0x158>)
   18d28:	4798      	blx	r3
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   18d2a:	69f3      	ldr	r3, [r6, #28]
   18d2c:	2b01      	cmp	r3, #1
   18d2e:	d003      	beq.n	18d38 <prvTimerTask+0xbc>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   18d30:	6a73      	ldr	r3, [r6, #36]	; 0x24
   18d32:	0030      	movs	r0, r6
   18d34:	4798      	blx	r3
   18d36:	e7d3      	b.n	18ce0 <prvTimerTask+0x64>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
   18d38:	69b3      	ldr	r3, [r6, #24]
   18d3a:	18e1      	adds	r1, r4, r3
   18d3c:	0023      	movs	r3, r4
   18d3e:	002a      	movs	r2, r5
   18d40:	0030      	movs	r0, r6
   18d42:	4d2e      	ldr	r5, [pc, #184]	; (18dfc <prvTimerTask+0x180>)
   18d44:	47a8      	blx	r5
   18d46:	2800      	cmp	r0, #0
   18d48:	d0f2      	beq.n	18d30 <prvTimerTask+0xb4>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   18d4a:	2300      	movs	r3, #0
   18d4c:	9300      	str	r3, [sp, #0]
   18d4e:	0022      	movs	r2, r4
   18d50:	2100      	movs	r1, #0
   18d52:	0030      	movs	r0, r6
   18d54:	4c2a      	ldr	r4, [pc, #168]	; (18e00 <prvTimerTask+0x184>)
   18d56:	47a0      	blx	r4
			configASSERT( xResult );
   18d58:	2800      	cmp	r0, #0
   18d5a:	d1e9      	bne.n	18d30 <prvTimerTask+0xb4>
   18d5c:	b672      	cpsid	i
   18d5e:	e7fe      	b.n	18d5e <prvTimerTask+0xe2>
					portYIELD_WITHIN_API();
   18d60:	4b28      	ldr	r3, [pc, #160]	; (18e04 <prvTimerTask+0x188>)
   18d62:	4798      	blx	r3
   18d64:	e7bc      	b.n	18ce0 <prvTimerTask+0x64>
			( void ) xTaskResumeAll();
   18d66:	4b22      	ldr	r3, [pc, #136]	; (18df0 <prvTimerTask+0x174>)
   18d68:	4798      	blx	r3
   18d6a:	e7b9      	b.n	18ce0 <prvTimerTask+0x64>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
   18d6c:	9b06      	ldr	r3, [sp, #24]
   18d6e:	69b2      	ldr	r2, [r6, #24]
   18d70:	4694      	mov	ip, r2
   18d72:	4463      	add	r3, ip
   18d74:	0019      	movs	r1, r3
   18d76:	9b06      	ldr	r3, [sp, #24]
   18d78:	0002      	movs	r2, r0
   18d7a:	0030      	movs	r0, r6
   18d7c:	4c1f      	ldr	r4, [pc, #124]	; (18dfc <prvTimerTask+0x180>)
   18d7e:	47a0      	blx	r4
   18d80:	2800      	cmp	r0, #0
   18d82:	d0ae      	beq.n	18ce2 <prvTimerTask+0x66>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   18d84:	0030      	movs	r0, r6
   18d86:	6a73      	ldr	r3, [r6, #36]	; 0x24
   18d88:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   18d8a:	69f3      	ldr	r3, [r6, #28]
   18d8c:	2b01      	cmp	r3, #1
   18d8e:	d1a8      	bne.n	18ce2 <prvTimerTask+0x66>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   18d90:	9b06      	ldr	r3, [sp, #24]
   18d92:	69b1      	ldr	r1, [r6, #24]
   18d94:	468c      	mov	ip, r1
   18d96:	4463      	add	r3, ip
   18d98:	001a      	movs	r2, r3
   18d9a:	2300      	movs	r3, #0
   18d9c:	9300      	str	r3, [sp, #0]
   18d9e:	2100      	movs	r1, #0
   18da0:	0030      	movs	r0, r6
   18da2:	4c17      	ldr	r4, [pc, #92]	; (18e00 <prvTimerTask+0x184>)
   18da4:	47a0      	blx	r4
							configASSERT( xResult );
   18da6:	2800      	cmp	r0, #0
   18da8:	d19b      	bne.n	18ce2 <prvTimerTask+0x66>
   18daa:	b672      	cpsid	i
   18dac:	e7fe      	b.n	18dac <prvTimerTask+0x130>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   18dae:	9906      	ldr	r1, [sp, #24]
   18db0:	61b1      	str	r1, [r6, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   18db2:	2900      	cmp	r1, #0
   18db4:	d006      	beq.n	18dc4 <prvTimerTask+0x148>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   18db6:	1841      	adds	r1, r0, r1
   18db8:	0003      	movs	r3, r0
   18dba:	0002      	movs	r2, r0
   18dbc:	0030      	movs	r0, r6
   18dbe:	4c0f      	ldr	r4, [pc, #60]	; (18dfc <prvTimerTask+0x180>)
   18dc0:	47a0      	blx	r4
   18dc2:	e78e      	b.n	18ce2 <prvTimerTask+0x66>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   18dc4:	b672      	cpsid	i
   18dc6:	e7fe      	b.n	18dc6 <prvTimerTask+0x14a>
						vPortFree( pxTimer );
   18dc8:	0030      	movs	r0, r6
   18dca:	4b0f      	ldr	r3, [pc, #60]	; (18e08 <prvTimerTask+0x18c>)
   18dcc:	4798      	blx	r3
   18dce:	e788      	b.n	18ce2 <prvTimerTask+0x66>
   18dd0:	00023df5 	.word	0x00023df5
   18dd4:	00016663 	.word	0x00016663
   18dd8:	20003be4 	.word	0x20003be4
   18ddc:	00017f01 	.word	0x00017f01
   18de0:	00018bc5 	.word	0x00018bc5
   18de4:	20003be8 	.word	0x20003be8
   18de8:	20003c18 	.word	0x20003c18
   18dec:	00017a51 	.word	0x00017a51
   18df0:	000180a9 	.word	0x000180a9
   18df4:	000173e5 	.word	0x000173e5
   18df8:	0002a020 	.word	0x0002a020
   18dfc:	00018a69 	.word	0x00018a69
   18e00:	00018b59 	.word	0x00018b59
   18e04:	00016781 	.word	0x00016781
   18e08:	000168e5 	.word	0x000168e5

00018e0c <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
   18e0c:	b510      	push	{r4, lr}
   18e0e:	0004      	movs	r4, r0
	 //assert(cbuf);

	 if(cbuf->full)
   18e10:	7c03      	ldrb	r3, [r0, #16]
   18e12:	2b00      	cmp	r3, #0
   18e14:	d005      	beq.n	18e22 <advance_pointer+0x16>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   18e16:	6883      	ldr	r3, [r0, #8]
   18e18:	1c58      	adds	r0, r3, #1
   18e1a:	68e1      	ldr	r1, [r4, #12]
   18e1c:	4b07      	ldr	r3, [pc, #28]	; (18e3c <advance_pointer+0x30>)
   18e1e:	4798      	blx	r3
   18e20:	60a1      	str	r1, [r4, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
   18e22:	6863      	ldr	r3, [r4, #4]
   18e24:	1c58      	adds	r0, r3, #1
   18e26:	68e1      	ldr	r1, [r4, #12]
   18e28:	4b04      	ldr	r3, [pc, #16]	; (18e3c <advance_pointer+0x30>)
   18e2a:	4798      	blx	r3
   18e2c:	6061      	str	r1, [r4, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
   18e2e:	68a3      	ldr	r3, [r4, #8]
   18e30:	1a59      	subs	r1, r3, r1
   18e32:	424a      	negs	r2, r1
   18e34:	414a      	adcs	r2, r1
   18e36:	7422      	strb	r2, [r4, #16]
 }
   18e38:	bd10      	pop	{r4, pc}
   18e3a:	46c0      	nop			; (mov r8, r8)
   18e3c:	00024161 	.word	0x00024161

00018e40 <circular_buf_init>:
 }

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
   18e40:	b570      	push	{r4, r5, r6, lr}
   18e42:	0005      	movs	r5, r0
   18e44:	000c      	movs	r4, r1
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
   18e46:	2014      	movs	r0, #20
   18e48:	4b04      	ldr	r3, [pc, #16]	; (18e5c <circular_buf_init+0x1c>)
   18e4a:	4798      	blx	r3
	 //assert(cbuf);

	 cbuf->buffer = buffer;
   18e4c:	6005      	str	r5, [r0, #0]
	 cbuf->max = size;
   18e4e:	60c4      	str	r4, [r0, #12]

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
	// assert(cbuf);

	 cbuf->head = 0;
   18e50:	2300      	movs	r3, #0
   18e52:	6043      	str	r3, [r0, #4]
	 cbuf->tail = 0;
   18e54:	6083      	str	r3, [r0, #8]
	 cbuf->full = false;
   18e56:	7403      	strb	r3, [r0, #16]
 }
   18e58:	bd70      	pop	{r4, r5, r6, pc}
   18e5a:	46c0      	nop			; (mov r8, r8)
   18e5c:	00025cb1 	.word	0x00025cb1

00018e60 <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
   18e60:	b510      	push	{r4, lr}
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
   18e62:	6803      	ldr	r3, [r0, #0]
   18e64:	6842      	ldr	r2, [r0, #4]
   18e66:	5499      	strb	r1, [r3, r2]

	 advance_pointer(cbuf);
   18e68:	4b01      	ldr	r3, [pc, #4]	; (18e70 <circular_buf_put+0x10>)
   18e6a:	4798      	blx	r3
 }
   18e6c:	bd10      	pop	{r4, pc}
   18e6e:	46c0      	nop			; (mov r8, r8)
   18e70:	00018e0d 	.word	0x00018e0d

00018e74 <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
   18e74:	7c02      	ldrb	r2, [r0, #16]
   18e76:	2300      	movs	r3, #0
   18e78:	2a00      	cmp	r2, #0
   18e7a:	d105      	bne.n	18e88 <circular_buf_empty+0x14>
   18e7c:	6843      	ldr	r3, [r0, #4]
   18e7e:	6880      	ldr	r0, [r0, #8]
   18e80:	1a1b      	subs	r3, r3, r0
   18e82:	4258      	negs	r0, r3
   18e84:	4143      	adcs	r3, r0
   18e86:	b2db      	uxtb	r3, r3
   18e88:	0018      	movs	r0, r3
 }
   18e8a:	4770      	bx	lr

00018e8c <circular_buf_get>:
 {
   18e8c:	b570      	push	{r4, r5, r6, lr}
   18e8e:	0004      	movs	r4, r0
   18e90:	000d      	movs	r5, r1
	 if(!circular_buf_empty(cbuf))
   18e92:	4b0a      	ldr	r3, [pc, #40]	; (18ebc <circular_buf_get+0x30>)
   18e94:	4798      	blx	r3
   18e96:	2800      	cmp	r0, #0
   18e98:	d10d      	bne.n	18eb6 <circular_buf_get+0x2a>
		 *data = cbuf->buffer[cbuf->tail];
   18e9a:	6823      	ldr	r3, [r4, #0]
   18e9c:	68a2      	ldr	r2, [r4, #8]
   18e9e:	5c9b      	ldrb	r3, [r3, r2]
   18ea0:	702b      	strb	r3, [r5, #0]
	 cbuf->full = false;
   18ea2:	2300      	movs	r3, #0
   18ea4:	7423      	strb	r3, [r4, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   18ea6:	68a3      	ldr	r3, [r4, #8]
   18ea8:	1c58      	adds	r0, r3, #1
   18eaa:	68e1      	ldr	r1, [r4, #12]
   18eac:	4b04      	ldr	r3, [pc, #16]	; (18ec0 <circular_buf_get+0x34>)
   18eae:	4798      	blx	r3
   18eb0:	60a1      	str	r1, [r4, #8]
		 r = 0;
   18eb2:	2000      	movs	r0, #0
 }
   18eb4:	bd70      	pop	{r4, r5, r6, pc}
	 int r = -1;
   18eb6:	2001      	movs	r0, #1
   18eb8:	4240      	negs	r0, r0
	 return r;
   18eba:	e7fb      	b.n	18eb4 <circular_buf_get+0x28>
   18ebc:	00018e75 	.word	0x00018e75
   18ec0:	00024161 	.word	0x00024161

00018ec4 <usart_read_callback>:
* @fn			void usart_read_callback(struct usart_module *const usart_module)
* @brief		Callback called when the system finishes receives all the bytes requested from a UART read job
* @note
*****************************************************************************/
void usart_read_callback(struct usart_module *const usart_module)
{
   18ec4:	b510      	push	{r4, lr}

	circular_buf_put(cbufRx, (uint8_t) latestRx); //Add the latest read character into the RX circular Buffer
   18ec6:	4c06      	ldr	r4, [pc, #24]	; (18ee0 <usart_read_callback+0x1c>)
   18ec8:	7821      	ldrb	r1, [r4, #0]
   18eca:	4b06      	ldr	r3, [pc, #24]	; (18ee4 <usart_read_callback+0x20>)
   18ecc:	6818      	ldr	r0, [r3, #0]
   18ece:	4b06      	ldr	r3, [pc, #24]	; (18ee8 <usart_read_callback+0x24>)
   18ed0:	4798      	blx	r3
	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Order the MCU to keep reading
   18ed2:	2201      	movs	r2, #1
   18ed4:	0021      	movs	r1, r4
   18ed6:	4805      	ldr	r0, [pc, #20]	; (18eec <usart_read_callback+0x28>)
   18ed8:	4b05      	ldr	r3, [pc, #20]	; (18ef0 <usart_read_callback+0x2c>)
   18eda:	4798      	blx	r3
	
}
   18edc:	bd10      	pop	{r4, pc}
   18ede:	46c0      	nop			; (mov r8, r8)
   18ee0:	20005088 	.word	0x20005088
   18ee4:	20005084 	.word	0x20005084
   18ee8:	00018e61 	.word	0x00018e61
   18eec:	20005050 	.word	0x20005050
   18ef0:	0001e99d 	.word	0x0001e99d

00018ef4 <usart_write_callback>:
* @fn			void usart_write_callback(struct usart_module *const usart_module)
* @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
* @note
*****************************************************************************/
void usart_write_callback(struct usart_module *const usart_module)
{
   18ef4:	b510      	push	{r4, lr}
	if(circular_buf_get(cbufTx, (uint8_t*) &latestTx) != -1) //Only continue if there are more characters to send
   18ef6:	4b06      	ldr	r3, [pc, #24]	; (18f10 <usart_write_callback+0x1c>)
   18ef8:	6818      	ldr	r0, [r3, #0]
   18efa:	4906      	ldr	r1, [pc, #24]	; (18f14 <usart_write_callback+0x20>)
   18efc:	4b06      	ldr	r3, [pc, #24]	; (18f18 <usart_write_callback+0x24>)
   18efe:	4798      	blx	r3
   18f00:	1c43      	adds	r3, r0, #1
   18f02:	d004      	beq.n	18f0e <usart_write_callback+0x1a>
	{
		usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
   18f04:	2201      	movs	r2, #1
   18f06:	4903      	ldr	r1, [pc, #12]	; (18f14 <usart_write_callback+0x20>)
   18f08:	4804      	ldr	r0, [pc, #16]	; (18f1c <usart_write_callback+0x28>)
   18f0a:	4b05      	ldr	r3, [pc, #20]	; (18f20 <usart_write_callback+0x2c>)
   18f0c:	4798      	blx	r3
	}
	
}
   18f0e:	bd10      	pop	{r4, pc}
   18f10:	20005390 	.word	0x20005390
   18f14:	2000538c 	.word	0x2000538c
   18f18:	00018e8d 	.word	0x00018e8d
   18f1c:	20005050 	.word	0x20005050
   18f20:	0001e97d 	.word	0x0001e97d

00018f24 <InitializeSerialConsole>:
{
   18f24:	b530      	push	{r4, r5, lr}
   18f26:	b091      	sub	sp, #68	; 0x44
	cbufRx = circular_buf_init((uint8_t*)rxCharacterBuffer, RX_BUFFER_SIZE);
   18f28:	2180      	movs	r1, #128	; 0x80
   18f2a:	0049      	lsls	r1, r1, #1
   18f2c:	4836      	ldr	r0, [pc, #216]	; (19008 <InitializeSerialConsole+0xe4>)
   18f2e:	4c37      	ldr	r4, [pc, #220]	; (1900c <InitializeSerialConsole+0xe8>)
   18f30:	47a0      	blx	r4
   18f32:	4b37      	ldr	r3, [pc, #220]	; (19010 <InitializeSerialConsole+0xec>)
   18f34:	6018      	str	r0, [r3, #0]
	cbufTx = circular_buf_init((uint8_t*)txCharacterBuffer, TX_BUFFER_SIZE);
   18f36:	2180      	movs	r1, #128	; 0x80
   18f38:	0089      	lsls	r1, r1, #2
   18f3a:	4836      	ldr	r0, [pc, #216]	; (19014 <InitializeSerialConsole+0xf0>)
   18f3c:	47a0      	blx	r4
   18f3e:	4b36      	ldr	r3, [pc, #216]	; (19018 <InitializeSerialConsole+0xf4>)
   18f40:	6018      	str	r0, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
   18f42:	2380      	movs	r3, #128	; 0x80
   18f44:	05db      	lsls	r3, r3, #23
   18f46:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   18f48:	2300      	movs	r3, #0
   18f4a:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
   18f4c:	22ff      	movs	r2, #255	; 0xff
   18f4e:	4669      	mov	r1, sp
   18f50:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
   18f52:	2200      	movs	r2, #0
   18f54:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   18f56:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
   18f58:	2101      	movs	r1, #1
   18f5a:	2024      	movs	r0, #36	; 0x24
   18f5c:	466c      	mov	r4, sp
   18f5e:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
   18f60:	3001      	adds	r0, #1
   18f62:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
   18f64:	3125      	adds	r1, #37	; 0x25
   18f66:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
   18f68:	3101      	adds	r1, #1
   18f6a:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
   18f6c:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
   18f6e:	3105      	adds	r1, #5
   18f70:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
   18f72:	3101      	adds	r1, #1
   18f74:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   18f76:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   18f78:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
   18f7a:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
   18f7c:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
   18f7e:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
   18f80:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
   18f82:	2313      	movs	r3, #19
   18f84:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
   18f86:	7762      	strb	r2, [r4, #29]
	config_usart.baudrate    = 115200;
   18f88:	23e1      	movs	r3, #225	; 0xe1
   18f8a:	025b      	lsls	r3, r3, #9
   18f8c:	9308      	str	r3, [sp, #32]
	config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
   18f8e:	23c4      	movs	r3, #196	; 0xc4
   18f90:	039b      	lsls	r3, r3, #14
   18f92:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
   18f94:	2301      	movs	r3, #1
   18f96:	425b      	negs	r3, r3
   18f98:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
   18f9a:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
   18f9c:	4b1f      	ldr	r3, [pc, #124]	; (1901c <InitializeSerialConsole+0xf8>)
   18f9e:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
   18fa0:	4b1f      	ldr	r3, [pc, #124]	; (19020 <InitializeSerialConsole+0xfc>)
   18fa2:	930f      	str	r3, [sp, #60]	; 0x3c
	while (usart_init(&usart_instance,
   18fa4:	4d1f      	ldr	r5, [pc, #124]	; (19024 <InitializeSerialConsole+0x100>)
   18fa6:	4c20      	ldr	r4, [pc, #128]	; (19028 <InitializeSerialConsole+0x104>)
   18fa8:	466a      	mov	r2, sp
   18faa:	4920      	ldr	r1, [pc, #128]	; (1902c <InitializeSerialConsole+0x108>)
   18fac:	0028      	movs	r0, r5
   18fae:	47a0      	blx	r4
   18fb0:	2800      	cmp	r0, #0
   18fb2:	d1f9      	bne.n	18fa8 <InitializeSerialConsole+0x84>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   18fb4:	4d1b      	ldr	r5, [pc, #108]	; (19024 <InitializeSerialConsole+0x100>)
   18fb6:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   18fb8:	0020      	movs	r0, r4
   18fba:	4b1d      	ldr	r3, [pc, #116]	; (19030 <InitializeSerialConsole+0x10c>)
   18fbc:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   18fbe:	231f      	movs	r3, #31
   18fc0:	4018      	ands	r0, r3
   18fc2:	3b1e      	subs	r3, #30
   18fc4:	4083      	lsls	r3, r0
   18fc6:	4a1b      	ldr	r2, [pc, #108]	; (19034 <InitializeSerialConsole+0x110>)
   18fc8:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
   18fca:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
   18fcc:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
   18fce:	2b00      	cmp	r3, #0
   18fd0:	d1fc      	bne.n	18fcc <InitializeSerialConsole+0xa8>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   18fd2:	6823      	ldr	r3, [r4, #0]
   18fd4:	2202      	movs	r2, #2
   18fd6:	4313      	orrs	r3, r2
   18fd8:	6023      	str	r3, [r4, #0]
	usart_register_callback(&usart_instance,
   18fda:	4c12      	ldr	r4, [pc, #72]	; (19024 <InitializeSerialConsole+0x100>)
   18fdc:	2200      	movs	r2, #0
   18fde:	4916      	ldr	r1, [pc, #88]	; (19038 <InitializeSerialConsole+0x114>)
   18fe0:	0020      	movs	r0, r4
   18fe2:	4d16      	ldr	r5, [pc, #88]	; (1903c <InitializeSerialConsole+0x118>)
   18fe4:	47a8      	blx	r5
	usart_register_callback(&usart_instance,
   18fe6:	2201      	movs	r2, #1
   18fe8:	4915      	ldr	r1, [pc, #84]	; (19040 <InitializeSerialConsole+0x11c>)
   18fea:	0020      	movs	r0, r4
   18fec:	47a8      	blx	r5
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
   18fee:	2231      	movs	r2, #49	; 0x31
   18ff0:	5ca3      	ldrb	r3, [r4, r2]
   18ff2:	2103      	movs	r1, #3
   18ff4:	430b      	orrs	r3, r1
   18ff6:	54a3      	strb	r3, [r4, r2]
	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Kicks off constant reading of characters
   18ff8:	3a30      	subs	r2, #48	; 0x30
   18ffa:	4912      	ldr	r1, [pc, #72]	; (19044 <InitializeSerialConsole+0x120>)
   18ffc:	0020      	movs	r0, r4
   18ffe:	4b12      	ldr	r3, [pc, #72]	; (19048 <InitializeSerialConsole+0x124>)
   19000:	4798      	blx	r3
}
   19002:	b011      	add	sp, #68	; 0x44
   19004:	bd30      	pop	{r4, r5, pc}
   19006:	46c0      	nop			; (mov r8, r8)
   19008:	2000528c 	.word	0x2000528c
   1900c:	00018e41 	.word	0x00018e41
   19010:	20005084 	.word	0x20005084
   19014:	2000508c 	.word	0x2000508c
   19018:	20005390 	.word	0x20005390
   1901c:	002a0003 	.word	0x002a0003
   19020:	002b0003 	.word	0x002b0003
   19024:	20005050 	.word	0x20005050
   19028:	0001e595 	.word	0x0001e595
   1902c:	42001800 	.word	0x42001800
   19030:	0001de11 	.word	0x0001de11
   19034:	e000e100 	.word	0xe000e100
   19038:	00018ef5 	.word	0x00018ef5
   1903c:	0001e965 	.word	0x0001e965
   19040:	00018ec5 	.word	0x00018ec5
   19044:	20005088 	.word	0x20005088
   19048:	0001e99d 	.word	0x0001e99d

0001904c <SerialConsoleWriteString>:
{
   1904c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1904e:	46c6      	mov	lr, r8
   19050:	b500      	push	{lr}
   19052:	0005      	movs	r5, r0
vTaskSuspendAll();
   19054:	4b14      	ldr	r3, [pc, #80]	; (190a8 <SerialConsoleWriteString+0x5c>)
   19056:	4798      	blx	r3
   19058:	2400      	movs	r4, #0
 	if(string != NULL)
   1905a:	2d00      	cmp	r5, #0
   1905c:	d012      	beq.n	19084 <SerialConsoleWriteString+0x38>
		for (size_t iter = 0; iter < strlen(string); iter++)
   1905e:	4e13      	ldr	r6, [pc, #76]	; (190ac <SerialConsoleWriteString+0x60>)
			circular_buf_put(cbufTx, string[iter]);
   19060:	4f13      	ldr	r7, [pc, #76]	; (190b0 <SerialConsoleWriteString+0x64>)
   19062:	4b14      	ldr	r3, [pc, #80]	; (190b4 <SerialConsoleWriteString+0x68>)
   19064:	4698      	mov	r8, r3
   19066:	e003      	b.n	19070 <SerialConsoleWriteString+0x24>
   19068:	5d29      	ldrb	r1, [r5, r4]
   1906a:	6838      	ldr	r0, [r7, #0]
   1906c:	47c0      	blx	r8
		for (size_t iter = 0; iter < strlen(string); iter++)
   1906e:	3401      	adds	r4, #1
   19070:	0028      	movs	r0, r5
   19072:	47b0      	blx	r6
   19074:	4284      	cmp	r4, r0
   19076:	d3f7      	bcc.n	19068 <SerialConsoleWriteString+0x1c>
		if(usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK)
   19078:	2101      	movs	r1, #1
   1907a:	480f      	ldr	r0, [pc, #60]	; (190b8 <SerialConsoleWriteString+0x6c>)
   1907c:	4b0f      	ldr	r3, [pc, #60]	; (190bc <SerialConsoleWriteString+0x70>)
   1907e:	4798      	blx	r3
   19080:	2800      	cmp	r0, #0
   19082:	d004      	beq.n	1908e <SerialConsoleWriteString+0x42>
xTaskResumeAll();
   19084:	4b0e      	ldr	r3, [pc, #56]	; (190c0 <SerialConsoleWriteString+0x74>)
   19086:	4798      	blx	r3
}
   19088:	bc04      	pop	{r2}
   1908a:	4690      	mov	r8, r2
   1908c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			circular_buf_get(cbufTx, (uint8_t*) &latestTx); //Perform only if the SERCOM TX is free (not busy)
   1908e:	4c0d      	ldr	r4, [pc, #52]	; (190c4 <SerialConsoleWriteString+0x78>)
   19090:	4b07      	ldr	r3, [pc, #28]	; (190b0 <SerialConsoleWriteString+0x64>)
   19092:	6818      	ldr	r0, [r3, #0]
   19094:	0021      	movs	r1, r4
   19096:	4b0c      	ldr	r3, [pc, #48]	; (190c8 <SerialConsoleWriteString+0x7c>)
   19098:	4798      	blx	r3
			usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
   1909a:	2201      	movs	r2, #1
   1909c:	0021      	movs	r1, r4
   1909e:	4806      	ldr	r0, [pc, #24]	; (190b8 <SerialConsoleWriteString+0x6c>)
   190a0:	4b0a      	ldr	r3, [pc, #40]	; (190cc <SerialConsoleWriteString+0x80>)
   190a2:	4798      	blx	r3
   190a4:	e7ee      	b.n	19084 <SerialConsoleWriteString+0x38>
   190a6:	46c0      	nop			; (mov r8, r8)
   190a8:	00017f01 	.word	0x00017f01
   190ac:	000260c7 	.word	0x000260c7
   190b0:	20005390 	.word	0x20005390
   190b4:	00018e61 	.word	0x00018e61
   190b8:	20005050 	.word	0x20005050
   190bc:	0001e9bd 	.word	0x0001e9bd
   190c0:	000180a9 	.word	0x000180a9
   190c4:	2000538c 	.word	0x2000538c
   190c8:	00018e8d 	.word	0x00018e8d
   190cc:	0001e97d 	.word	0x0001e97d

000190d0 <SerialConsoleReadCharacter>:
{
   190d0:	b510      	push	{r4, lr}
   190d2:	0004      	movs	r4, r0
	vTaskSuspendAll();
   190d4:	4b05      	ldr	r3, [pc, #20]	; (190ec <SerialConsoleReadCharacter+0x1c>)
   190d6:	4798      	blx	r3
	int a = circular_buf_get(cbufRx, (uint8_t*) rxChar);
   190d8:	4b05      	ldr	r3, [pc, #20]	; (190f0 <SerialConsoleReadCharacter+0x20>)
   190da:	6818      	ldr	r0, [r3, #0]
   190dc:	0021      	movs	r1, r4
   190de:	4b05      	ldr	r3, [pc, #20]	; (190f4 <SerialConsoleReadCharacter+0x24>)
   190e0:	4798      	blx	r3
   190e2:	0004      	movs	r4, r0
	xTaskResumeAll();
   190e4:	4b04      	ldr	r3, [pc, #16]	; (190f8 <SerialConsoleReadCharacter+0x28>)
   190e6:	4798      	blx	r3
}
   190e8:	0020      	movs	r0, r4
   190ea:	bd10      	pop	{r4, pc}
   190ec:	00017f01 	.word	0x00017f01
   190f0:	20005084 	.word	0x20005084
   190f4:	00018e8d 	.word	0x00018e8d
   190f8:	000180a9 	.word	0x000180a9

000190fc <LogMessage>:
{
   190fc:	b40e      	push	{r1, r2, r3}
   190fe:	b530      	push	{r4, r5, lr}
   19100:	b082      	sub	sp, #8
return currentDebugLevel;
   19102:	4b0a      	ldr	r3, [pc, #40]	; (1912c <LogMessage+0x30>)
if(getLogLevel() <= level){
   19104:	781b      	ldrb	r3, [r3, #0]
   19106:	4283      	cmp	r3, r0
   19108:	d904      	bls.n	19114 <LogMessage+0x18>
};
   1910a:	b002      	add	sp, #8
   1910c:	bc30      	pop	{r4, r5}
   1910e:	bc08      	pop	{r3}
   19110:	b003      	add	sp, #12
   19112:	4718      	bx	r3
	va_start(ap, format);
   19114:	ab06      	add	r3, sp, #24
   19116:	9301      	str	r3, [sp, #4]
	vsnprintf(debugBuffer, 127, format, ap);
   19118:	4c05      	ldr	r4, [pc, #20]	; (19130 <LogMessage+0x34>)
   1911a:	9a05      	ldr	r2, [sp, #20]
   1911c:	217f      	movs	r1, #127	; 0x7f
   1911e:	0020      	movs	r0, r4
   19120:	4d04      	ldr	r5, [pc, #16]	; (19134 <LogMessage+0x38>)
   19122:	47a8      	blx	r5
	SerialConsoleWriteString(debugBuffer);
   19124:	0020      	movs	r0, r4
   19126:	4b04      	ldr	r3, [pc, #16]	; (19138 <LogMessage+0x3c>)
   19128:	4798      	blx	r3
};
   1912a:	e7ee      	b.n	1910a <LogMessage+0xe>
   1912c:	20003c20 	.word	0x20003c20
   19130:	20004fd0 	.word	0x20004fd0
   19134:	00026301 	.word	0x00026301
   19138:	0001904d 	.word	0x0001904d

0001913c <LogMessageDebug>:
{
   1913c:	b40f      	push	{r0, r1, r2, r3}
   1913e:	b510      	push	{r4, lr}
LogMessage(LOG_DEBUG_LVL, format);
   19140:	9902      	ldr	r1, [sp, #8]
   19142:	2001      	movs	r0, #1
   19144:	4b02      	ldr	r3, [pc, #8]	; (19150 <LogMessageDebug+0x14>)
   19146:	4798      	blx	r3
};
   19148:	bc10      	pop	{r4}
   1914a:	bc08      	pop	{r3}
   1914c:	b004      	add	sp, #16
   1914e:	4718      	bx	r3
   19150:	000190fd 	.word	0x000190fd

00019154 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
   19154:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   19156:	4b06      	ldr	r3, [pc, #24]	; (19170 <sd_mmc_configure_slot+0x1c>)
   19158:	6819      	ldr	r1, [r3, #0]
   1915a:	7f8b      	ldrb	r3, [r1, #30]
   1915c:	1e5a      	subs	r2, r3, #1
   1915e:	4193      	sbcs	r3, r2
   19160:	b2db      	uxtb	r3, r3
   19162:	7b4a      	ldrb	r2, [r1, #13]
   19164:	6809      	ldr	r1, [r1, #0]
   19166:	4803      	ldr	r0, [pc, #12]	; (19174 <sd_mmc_configure_slot+0x20>)
   19168:	7800      	ldrb	r0, [r0, #0]
   1916a:	4c03      	ldr	r4, [pc, #12]	; (19178 <sd_mmc_configure_slot+0x24>)
   1916c:	47a0      	blx	r4
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
}
   1916e:	bd10      	pop	{r4, pc}
   19170:	20003c24 	.word	0x20003c24
   19174:	20003c4c 	.word	0x20003c4c
   19178:	00019cdd 	.word	0x00019cdd

0001917c <sd_mmc_select_slot>:
{
   1917c:	b510      	push	{r4, lr}
		return SD_MMC_ERR_SLOT;
   1917e:	2304      	movs	r3, #4
	if (slot >= SD_MMC_MEM_CNT) {
   19180:	2800      	cmp	r0, #0
   19182:	d001      	beq.n	19188 <sd_mmc_select_slot+0xc>
}
   19184:	0018      	movs	r0, r3
   19186:	bd10      	pop	{r4, pc}
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
   19188:	4b0e      	ldr	r3, [pc, #56]	; (191c4 <sd_mmc_select_slot+0x48>)
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
   1918a:	7a9b      	ldrb	r3, [r3, #10]
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
   1918c:	3b03      	subs	r3, #3
   1918e:	2b01      	cmp	r3, #1
   19190:	d90d      	bls.n	191ae <sd_mmc_select_slot+0x32>
	sd_mmc_slot_sel = slot;
   19192:	2200      	movs	r2, #0
   19194:	4b0c      	ldr	r3, [pc, #48]	; (191c8 <sd_mmc_select_slot+0x4c>)
   19196:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
   19198:	4c0a      	ldr	r4, [pc, #40]	; (191c4 <sd_mmc_select_slot+0x48>)
   1919a:	4b0c      	ldr	r3, [pc, #48]	; (191cc <sd_mmc_select_slot+0x50>)
   1919c:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
   1919e:	4b0c      	ldr	r3, [pc, #48]	; (191d0 <sd_mmc_select_slot+0x54>)
   191a0:	4798      	blx	r3
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
   191a2:	7aa3      	ldrb	r3, [r4, #10]
   191a4:	3b02      	subs	r3, #2
   191a6:	4258      	negs	r0, r3
   191a8:	4143      	adcs	r3, r0
   191aa:	b2db      	uxtb	r3, r3
   191ac:	e7ea      	b.n	19184 <sd_mmc_select_slot+0x8>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
   191ae:	4b05      	ldr	r3, [pc, #20]	; (191c4 <sd_mmc_select_slot+0x48>)
   191b0:	2202      	movs	r2, #2
   191b2:	729a      	strb	r2, [r3, #10]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
   191b4:	4a07      	ldr	r2, [pc, #28]	; (191d4 <sd_mmc_select_slot+0x58>)
   191b6:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
   191b8:	2201      	movs	r2, #1
   191ba:	735a      	strb	r2, [r3, #13]
		sd_mmc_cards[slot].high_speed = 0;
   191bc:	2200      	movs	r2, #0
   191be:	779a      	strb	r2, [r3, #30]
   191c0:	e7e7      	b.n	19192 <sd_mmc_select_slot+0x16>
   191c2:	46c0      	nop			; (mov r8, r8)
   191c4:	20003c28 	.word	0x20003c28
   191c8:	20003c4c 	.word	0x20003c4c
   191cc:	20003c24 	.word	0x20003c24
   191d0:	00019155 	.word	0x00019155
   191d4:	00061a80 	.word	0x00061a80

000191d8 <sd_mmc_cmd13>:
{
   191d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   191da:	4d09      	ldr	r5, [pc, #36]	; (19200 <sd_mmc_cmd13+0x28>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
   191dc:	4f09      	ldr	r7, [pc, #36]	; (19204 <sd_mmc_cmd13+0x2c>)
			if (!(driver_get_response() & 0xFF)) {
   191de:	4e0a      	ldr	r6, [pc, #40]	; (19208 <sd_mmc_cmd13+0x30>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
   191e0:	2100      	movs	r1, #0
   191e2:	480a      	ldr	r0, [pc, #40]	; (1920c <sd_mmc_cmd13+0x34>)
   191e4:	47b8      	blx	r7
   191e6:	1e04      	subs	r4, r0, #0
   191e8:	d007      	beq.n	191fa <sd_mmc_cmd13+0x22>
			if (!(driver_get_response() & 0xFF)) {
   191ea:	47b0      	blx	r6
   191ec:	23ff      	movs	r3, #255	; 0xff
   191ee:	4203      	tst	r3, r0
   191f0:	d003      	beq.n	191fa <sd_mmc_cmd13+0x22>
   191f2:	3d01      	subs	r5, #1
		if (nec_timeout-- == 0) {
   191f4:	2d00      	cmp	r5, #0
   191f6:	d1f3      	bne.n	191e0 <sd_mmc_cmd13+0x8>
			return false;
   191f8:	2400      	movs	r4, #0
}
   191fa:	0020      	movs	r0, r4
   191fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   191fe:	46c0      	nop			; (mov r8, r8)
   19200:	00030d41 	.word	0x00030d41
   19204:	00019f21 	.word	0x00019f21
   19208:	00019f39 	.word	0x00019f39
   1920c:	00001b0d 	.word	0x00001b0d

00019210 <sd_mmc_cmd9_spi>:
{
   19210:	b510      	push	{r4, lr}
   19212:	b082      	sub	sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
   19214:	4b0c      	ldr	r3, [pc, #48]	; (19248 <sd_mmc_cmd9_spi+0x38>)
   19216:	681b      	ldr	r3, [r3, #0]
   19218:	8919      	ldrh	r1, [r3, #8]
   1921a:	0409      	lsls	r1, r1, #16
   1921c:	2301      	movs	r3, #1
   1921e:	9300      	str	r3, [sp, #0]
   19220:	2210      	movs	r2, #16
   19222:	480a      	ldr	r0, [pc, #40]	; (1924c <sd_mmc_cmd9_spi+0x3c>)
   19224:	4c0a      	ldr	r4, [pc, #40]	; (19250 <sd_mmc_cmd9_spi+0x40>)
   19226:	47a0      	blx	r4
   19228:	2800      	cmp	r0, #0
   1922a:	d101      	bne.n	19230 <sd_mmc_cmd9_spi+0x20>
}
   1922c:	b002      	add	sp, #8
   1922e:	bd10      	pop	{r4, pc}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
   19230:	4b05      	ldr	r3, [pc, #20]	; (19248 <sd_mmc_cmd9_spi+0x38>)
   19232:	6818      	ldr	r0, [r3, #0]
   19234:	300e      	adds	r0, #14
   19236:	2101      	movs	r1, #1
   19238:	4b06      	ldr	r3, [pc, #24]	; (19254 <sd_mmc_cmd9_spi+0x44>)
   1923a:	4798      	blx	r3
   1923c:	2800      	cmp	r0, #0
   1923e:	d0f5      	beq.n	1922c <sd_mmc_cmd9_spi+0x1c>
	return driver_wait_end_of_read_blocks();
   19240:	4b05      	ldr	r3, [pc, #20]	; (19258 <sd_mmc_cmd9_spi+0x48>)
   19242:	4798      	blx	r3
   19244:	e7f2      	b.n	1922c <sd_mmc_cmd9_spi+0x1c>
   19246:	46c0      	nop			; (mov r8, r8)
   19248:	20003c24 	.word	0x20003c24
   1924c:	00081109 	.word	0x00081109
   19250:	00019d91 	.word	0x00019d91
   19254:	00019fbd 	.word	0x00019fbd
   19258:	0001a049 	.word	0x0001a049

0001925c <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
   1925c:	b510      	push	{r4, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
   1925e:	4b04      	ldr	r3, [pc, #16]	; (19270 <sd_mmc_deselect_slot+0x14>)
   19260:	781b      	ldrb	r3, [r3, #0]
   19262:	2b00      	cmp	r3, #0
   19264:	d000      	beq.n	19268 <sd_mmc_deselect_slot+0xc>
		driver_deselect_device(sd_mmc_slot_sel);
	}
}
   19266:	bd10      	pop	{r4, pc}
		driver_deselect_device(sd_mmc_slot_sel);
   19268:	2000      	movs	r0, #0
   1926a:	4b02      	ldr	r3, [pc, #8]	; (19274 <sd_mmc_deselect_slot+0x18>)
   1926c:	4798      	blx	r3
}
   1926e:	e7fa      	b.n	19266 <sd_mmc_deselect_slot+0xa>
   19270:	20003c4c 	.word	0x20003c4c
   19274:	00019d31 	.word	0x00019d31

00019278 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
   19278:	b5f0      	push	{r4, r5, r6, r7, lr}
   1927a:	46c6      	mov	lr, r8
   1927c:	b500      	push	{lr}
   1927e:	b088      	sub	sp, #32
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
   19280:	4bcb      	ldr	r3, [pc, #812]	; (195b0 <sd_mmc_check+0x338>)
   19282:	4798      	blx	r3
   19284:	0004      	movs	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
   19286:	2801      	cmp	r0, #1
   19288:	d006      	beq.n	19298 <sd_mmc_check+0x20>
		sd_mmc_deselect_slot();
   1928a:	4bca      	ldr	r3, [pc, #808]	; (195b4 <sd_mmc_check+0x33c>)
   1928c:	4798      	blx	r3
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
   1928e:	0020      	movs	r0, r4
   19290:	b008      	add	sp, #32
   19292:	bc04      	pop	{r2}
   19294:	4690      	mov	r8, r2
   19296:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_card->type = CARD_TYPE_SD;
   19298:	4bc7      	ldr	r3, [pc, #796]	; (195b8 <sd_mmc_check+0x340>)
   1929a:	681b      	ldr	r3, [r3, #0]
   1929c:	2201      	movs	r2, #1
   1929e:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
   192a0:	2200      	movs	r2, #0
   192a2:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
   192a4:	811a      	strh	r2, [r3, #8]
	driver_send_clock();
   192a6:	4bc5      	ldr	r3, [pc, #788]	; (195bc <sd_mmc_check+0x344>)
   192a8:	4798      	blx	r3
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   192aa:	2100      	movs	r1, #0
   192ac:	2088      	movs	r0, #136	; 0x88
   192ae:	0140      	lsls	r0, r0, #5
   192b0:	4bc3      	ldr	r3, [pc, #780]	; (195c0 <sd_mmc_check+0x348>)
   192b2:	4798      	blx	r3
   192b4:	2800      	cmp	r0, #0
   192b6:	d107      	bne.n	192c8 <sd_mmc_check+0x50>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
   192b8:	4bbf      	ldr	r3, [pc, #764]	; (195b8 <sd_mmc_check+0x340>)
   192ba:	681b      	ldr	r3, [r3, #0]
   192bc:	2203      	movs	r2, #3
   192be:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
   192c0:	4bbc      	ldr	r3, [pc, #752]	; (195b4 <sd_mmc_check+0x33c>)
   192c2:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
   192c4:	2403      	movs	r4, #3
   192c6:	e7e2      	b.n	1928e <sd_mmc_check+0x16>
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
   192c8:	21d5      	movs	r1, #213	; 0xd5
   192ca:	0049      	lsls	r1, r1, #1
   192cc:	48bd      	ldr	r0, [pc, #756]	; (195c4 <sd_mmc_check+0x34c>)
   192ce:	4bbc      	ldr	r3, [pc, #752]	; (195c0 <sd_mmc_check+0x348>)
   192d0:	4798      	blx	r3
	*v2 = 0;
   192d2:	2600      	movs	r6, #0
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
   192d4:	2800      	cmp	r0, #0
   192d6:	d125      	bne.n	19324 <sd_mmc_check+0xac>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   192d8:	4bb7      	ldr	r3, [pc, #732]	; (195b8 <sd_mmc_check+0x340>)
   192da:	681b      	ldr	r3, [r3, #0]
   192dc:	7adb      	ldrb	r3, [r3, #11]
   192de:	07db      	lsls	r3, r3, #31
   192e0:	d500      	bpl.n	192e4 <sd_mmc_check+0x6c>
   192e2:	e1eb      	b.n	196bc <sd_mmc_check+0x444>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   192e4:	4bb4      	ldr	r3, [pc, #720]	; (195b8 <sd_mmc_check+0x340>)
   192e6:	681b      	ldr	r3, [r3, #0]
   192e8:	7ada      	ldrb	r2, [r3, #11]
   192ea:	2309      	movs	r3, #9
   192ec:	4013      	ands	r3, r2
   192ee:	2b01      	cmp	r3, #1
   192f0:	d10f      	bne.n	19312 <sd_mmc_check+0x9a>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   192f2:	2180      	movs	r1, #128	; 0x80
   192f4:	0089      	lsls	r1, r1, #2
   192f6:	48b4      	ldr	r0, [pc, #720]	; (195c8 <sd_mmc_check+0x350>)
   192f8:	4bb1      	ldr	r3, [pc, #708]	; (195c0 <sd_mmc_check+0x348>)
   192fa:	4798      	blx	r3
   192fc:	2800      	cmp	r0, #0
   192fe:	d0db      	beq.n	192b8 <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   19300:	4bad      	ldr	r3, [pc, #692]	; (195b8 <sd_mmc_check+0x340>)
   19302:	681b      	ldr	r3, [r3, #0]
   19304:	7adb      	ldrb	r3, [r3, #11]
   19306:	07db      	lsls	r3, r3, #31
   19308:	d503      	bpl.n	19312 <sd_mmc_check+0x9a>
		if (!sd_mmc_cmd13()) {
   1930a:	4bb0      	ldr	r3, [pc, #704]	; (195cc <sd_mmc_check+0x354>)
   1930c:	4798      	blx	r3
   1930e:	2800      	cmp	r0, #0
   19310:	d0d2      	beq.n	192b8 <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
   19312:	4baf      	ldr	r3, [pc, #700]	; (195d0 <sd_mmc_check+0x358>)
   19314:	4798      	blx	r3
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
   19316:	4ba8      	ldr	r3, [pc, #672]	; (195b8 <sd_mmc_check+0x340>)
   19318:	681b      	ldr	r3, [r3, #0]
   1931a:	2200      	movs	r2, #0
   1931c:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
   1931e:	4ba5      	ldr	r3, [pc, #660]	; (195b4 <sd_mmc_check+0x33c>)
   19320:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
   19322:	e7b4      	b.n	1928e <sd_mmc_check+0x16>
	resp = driver_get_response();
   19324:	4bab      	ldr	r3, [pc, #684]	; (195d4 <sd_mmc_check+0x35c>)
   19326:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
   19328:	1c43      	adds	r3, r0, #1
   1932a:	d100      	bne.n	1932e <sd_mmc_check+0xb6>
   1932c:	e1c4      	b.n	196b8 <sd_mmc_check+0x440>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
   1932e:	0500      	lsls	r0, r0, #20
   19330:	0d00      	lsrs	r0, r0, #20
   19332:	23d5      	movs	r3, #213	; 0xd5
   19334:	005b      	lsls	r3, r3, #1
	*v2 = 1;
   19336:	3601      	adds	r6, #1
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
   19338:	4298      	cmp	r0, r3
   1933a:	d1bd      	bne.n	192b8 <sd_mmc_check+0x40>
   1933c:	e7cc      	b.n	192d8 <sd_mmc_check+0x60>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   1933e:	2100      	movs	r1, #0
   19340:	48a5      	ldr	r0, [pc, #660]	; (195d8 <sd_mmc_check+0x360>)
   19342:	4b9f      	ldr	r3, [pc, #636]	; (195c0 <sd_mmc_check+0x348>)
   19344:	4798      	blx	r3
   19346:	2800      	cmp	r0, #0
   19348:	d119      	bne.n	1937e <sd_mmc_check+0x106>
			sd_mmc_card->type = CARD_TYPE_MMC;
   1934a:	4b9b      	ldr	r3, [pc, #620]	; (195b8 <sd_mmc_check+0x340>)
   1934c:	681b      	ldr	r3, [r3, #0]
   1934e:	2202      	movs	r2, #2
   19350:	72da      	strb	r2, [r3, #11]
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   19352:	2100      	movs	r1, #0
   19354:	2088      	movs	r0, #136	; 0x88
   19356:	0140      	lsls	r0, r0, #5
   19358:	4b99      	ldr	r3, [pc, #612]	; (195c0 <sd_mmc_check+0x348>)
   1935a:	4798      	blx	r3
   1935c:	2800      	cmp	r0, #0
   1935e:	d0ab      	beq.n	192b8 <sd_mmc_check+0x40>
   19360:	4d9e      	ldr	r5, [pc, #632]	; (195dc <sd_mmc_check+0x364>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
   19362:	4f97      	ldr	r7, [pc, #604]	; (195c0 <sd_mmc_check+0x348>)
		resp = driver_get_response();
   19364:	4e9b      	ldr	r6, [pc, #620]	; (195d4 <sd_mmc_check+0x35c>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
   19366:	2100      	movs	r1, #0
   19368:	489d      	ldr	r0, [pc, #628]	; (195e0 <sd_mmc_check+0x368>)
   1936a:	47b8      	blx	r7
   1936c:	2800      	cmp	r0, #0
   1936e:	d0a3      	beq.n	192b8 <sd_mmc_check+0x40>
		resp = driver_get_response();
   19370:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
   19372:	07c3      	lsls	r3, r0, #31
   19374:	d57d      	bpl.n	19472 <sd_mmc_check+0x1fa>
   19376:	3d01      	subs	r5, #1
		if (retry-- == 0) {
   19378:	2d00      	cmp	r5, #0
   1937a:	d1f4      	bne.n	19366 <sd_mmc_check+0xee>
   1937c:	e79c      	b.n	192b8 <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_CCS) != 0) {
   1937e:	4b95      	ldr	r3, [pc, #596]	; (195d4 <sd_mmc_check+0x35c>)
   19380:	4798      	blx	r3
   19382:	0043      	lsls	r3, r0, #1
   19384:	d505      	bpl.n	19392 <sd_mmc_check+0x11a>
		sd_mmc_card->type |= CARD_TYPE_HC;
   19386:	4b8c      	ldr	r3, [pc, #560]	; (195b8 <sd_mmc_check+0x340>)
   19388:	681a      	ldr	r2, [r3, #0]
   1938a:	7ad3      	ldrb	r3, [r2, #11]
   1938c:	2108      	movs	r1, #8
   1938e:	430b      	orrs	r3, r1
   19390:	72d3      	strb	r3, [r2, #11]
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   19392:	2100      	movs	r1, #0
   19394:	4893      	ldr	r0, [pc, #588]	; (195e4 <sd_mmc_check+0x36c>)
   19396:	4b8a      	ldr	r3, [pc, #552]	; (195c0 <sd_mmc_check+0x348>)
   19398:	4798      	blx	r3
   1939a:	2800      	cmp	r0, #0
   1939c:	d08c      	beq.n	192b8 <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1939e:	4b86      	ldr	r3, [pc, #536]	; (195b8 <sd_mmc_check+0x340>)
   193a0:	681b      	ldr	r3, [r3, #0]
   193a2:	7adb      	ldrb	r3, [r3, #11]
   193a4:	07da      	lsls	r2, r3, #31
   193a6:	d400      	bmi.n	193aa <sd_mmc_check+0x132>
   193a8:	e1a4      	b.n	196f4 <sd_mmc_check+0x47c>
		if (!sd_mmc_cmd9_spi()) {
   193aa:	4b8f      	ldr	r3, [pc, #572]	; (195e8 <sd_mmc_check+0x370>)
   193ac:	4798      	blx	r3
   193ae:	2800      	cmp	r0, #0
   193b0:	d082      	beq.n	192b8 <sd_mmc_check+0x40>
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   193b2:	4b81      	ldr	r3, [pc, #516]	; (195b8 <sd_mmc_check+0x340>)
   193b4:	681a      	ldr	r2, [r3, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   193b6:	7c53      	ldrb	r3, [r2, #17]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   193b8:	2107      	movs	r1, #7
   193ba:	4019      	ands	r1, r3
   193bc:	0089      	lsls	r1, r1, #2
	sd_mmc_card->clock = unit * mul * 1000;
   193be:	488b      	ldr	r0, [pc, #556]	; (195ec <sd_mmc_check+0x374>)
   193c0:	5808      	ldr	r0, [r1, r0]
   193c2:	21fa      	movs	r1, #250	; 0xfa
   193c4:	0089      	lsls	r1, r1, #2
   193c6:	4341      	muls	r1, r0
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
   193c8:	065b      	lsls	r3, r3, #25
   193ca:	0f1b      	lsrs	r3, r3, #28
   193cc:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
   193ce:	4888      	ldr	r0, [pc, #544]	; (195f0 <sd_mmc_check+0x378>)
   193d0:	581b      	ldr	r3, [r3, r0]
   193d2:	434b      	muls	r3, r1
   193d4:	6013      	str	r3, [r2, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
   193d6:	7b93      	ldrb	r3, [r2, #14]
   193d8:	099b      	lsrs	r3, r3, #6
   193da:	d000      	beq.n	193de <sd_mmc_check+0x166>
   193dc:	e13c      	b.n	19658 <sd_mmc_check+0x3e0>
   193de:	7d91      	ldrb	r1, [r2, #22]
   193e0:	1189      	asrs	r1, r1, #6
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   193e2:	7d53      	ldrb	r3, [r2, #21]
   193e4:	009b      	lsls	r3, r3, #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   193e6:	7d10      	ldrb	r0, [r2, #20]
   193e8:	0280      	lsls	r0, r0, #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   193ea:	4303      	orrs	r3, r0
   193ec:	430b      	orrs	r3, r1
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   193ee:	7e10      	ldrb	r0, [r2, #24]
   193f0:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   193f2:	7dd1      	ldrb	r1, [r2, #23]
   193f4:	0049      	lsls	r1, r1, #1
   193f6:	4308      	orrs	r0, r1
	}
	value &=  ((uint32_t)1 << size) - 1;
   193f8:	051b      	lsls	r3, r3, #20
   193fa:	0d1b      	lsrs	r3, r3, #20
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   193fc:	3301      	adds	r3, #1
   193fe:	2107      	movs	r1, #7
   19400:	4001      	ands	r1, r0
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   19402:	3102      	adds	r1, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   19404:	408b      	lsls	r3, r1
   19406:	7cd0      	ldrb	r0, [r2, #19]
   19408:	210f      	movs	r1, #15
   1940a:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
   1940c:	408b      	lsls	r3, r1
				/ 1024;
   1940e:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   19410:	6053      	str	r3, [r2, #4]
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
   19412:	8911      	ldrh	r1, [r2, #8]
   19414:	0409      	lsls	r1, r1, #16
   19416:	4877      	ldr	r0, [pc, #476]	; (195f4 <sd_mmc_check+0x37c>)
   19418:	4b69      	ldr	r3, [pc, #420]	; (195c0 <sd_mmc_check+0x348>)
   1941a:	4798      	blx	r3
   1941c:	2800      	cmp	r0, #0
   1941e:	d100      	bne.n	19422 <sd_mmc_check+0x1aa>
   19420:	e74a      	b.n	192b8 <sd_mmc_check+0x40>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
   19422:	2301      	movs	r3, #1
   19424:	9300      	str	r3, [sp, #0]
   19426:	2208      	movs	r2, #8
   19428:	2100      	movs	r1, #0
   1942a:	4873      	ldr	r0, [pc, #460]	; (195f8 <sd_mmc_check+0x380>)
   1942c:	4d73      	ldr	r5, [pc, #460]	; (195fc <sd_mmc_check+0x384>)
   1942e:	47a8      	blx	r5
   19430:	2800      	cmp	r0, #0
   19432:	d100      	bne.n	19436 <sd_mmc_check+0x1be>
   19434:	e740      	b.n	192b8 <sd_mmc_check+0x40>
	if (!driver_start_read_blocks(scr, 1)) {
   19436:	2101      	movs	r1, #1
   19438:	a806      	add	r0, sp, #24
   1943a:	4b71      	ldr	r3, [pc, #452]	; (19600 <sd_mmc_check+0x388>)
   1943c:	4798      	blx	r3
   1943e:	2800      	cmp	r0, #0
   19440:	d100      	bne.n	19444 <sd_mmc_check+0x1cc>
   19442:	e739      	b.n	192b8 <sd_mmc_check+0x40>
	if (!driver_wait_end_of_read_blocks()) {
   19444:	4b6f      	ldr	r3, [pc, #444]	; (19604 <sd_mmc_check+0x38c>)
   19446:	4798      	blx	r3
   19448:	2800      	cmp	r0, #0
   1944a:	d100      	bne.n	1944e <sd_mmc_check+0x1d6>
   1944c:	e734      	b.n	192b8 <sd_mmc_check+0x40>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   1944e:	ab06      	add	r3, sp, #24
	switch (SD_SCR_SD_SPEC(scr)) {
   19450:	781b      	ldrb	r3, [r3, #0]
   19452:	220f      	movs	r2, #15
   19454:	4013      	ands	r3, r2
   19456:	2b01      	cmp	r3, #1
   19458:	d100      	bne.n	1945c <sd_mmc_check+0x1e4>
   1945a:	e119      	b.n	19690 <sd_mmc_check+0x418>
   1945c:	2b00      	cmp	r3, #0
   1945e:	d100      	bne.n	19462 <sd_mmc_check+0x1ea>
   19460:	e109      	b.n	19676 <sd_mmc_check+0x3fe>
   19462:	2b02      	cmp	r3, #2
   19464:	d100      	bne.n	19468 <sd_mmc_check+0x1f0>
   19466:	e118      	b.n	1969a <sd_mmc_check+0x422>
		sd_mmc_card->version = CARD_VER_SD_1_0;
   19468:	4b53      	ldr	r3, [pc, #332]	; (195b8 <sd_mmc_check+0x340>)
   1946a:	681b      	ldr	r3, [r3, #0]
   1946c:	2210      	movs	r2, #16
   1946e:	731a      	strb	r2, [r3, #12]
   19470:	e105      	b.n	1967e <sd_mmc_check+0x406>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   19472:	2100      	movs	r1, #0
   19474:	4858      	ldr	r0, [pc, #352]	; (195d8 <sd_mmc_check+0x360>)
   19476:	4b52      	ldr	r3, [pc, #328]	; (195c0 <sd_mmc_check+0x348>)
   19478:	4798      	blx	r3
   1947a:	2800      	cmp	r0, #0
   1947c:	d100      	bne.n	19480 <sd_mmc_check+0x208>
   1947e:	e71b      	b.n	192b8 <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
   19480:	4b54      	ldr	r3, [pc, #336]	; (195d4 <sd_mmc_check+0x35c>)
   19482:	4798      	blx	r3
   19484:	23c0      	movs	r3, #192	; 0xc0
   19486:	05db      	lsls	r3, r3, #23
   19488:	4018      	ands	r0, r3
   1948a:	2380      	movs	r3, #128	; 0x80
   1948c:	05db      	lsls	r3, r3, #23
   1948e:	4298      	cmp	r0, r3
   19490:	d105      	bne.n	1949e <sd_mmc_check+0x226>
		sd_mmc_card->type |= CARD_TYPE_HC;
   19492:	4b49      	ldr	r3, [pc, #292]	; (195b8 <sd_mmc_check+0x340>)
   19494:	681a      	ldr	r2, [r3, #0]
   19496:	7ad1      	ldrb	r1, [r2, #11]
   19498:	2308      	movs	r3, #8
   1949a:	430b      	orrs	r3, r1
   1949c:	72d3      	strb	r3, [r2, #11]
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   1949e:	2100      	movs	r1, #0
   194a0:	4850      	ldr	r0, [pc, #320]	; (195e4 <sd_mmc_check+0x36c>)
   194a2:	4b47      	ldr	r3, [pc, #284]	; (195c0 <sd_mmc_check+0x348>)
   194a4:	4798      	blx	r3
   194a6:	2800      	cmp	r0, #0
   194a8:	d100      	bne.n	194ac <sd_mmc_check+0x234>
   194aa:	e705      	b.n	192b8 <sd_mmc_check+0x40>
	if (!sd_mmc_cmd9_spi()) {
   194ac:	4b4e      	ldr	r3, [pc, #312]	; (195e8 <sd_mmc_check+0x370>)
   194ae:	4798      	blx	r3
   194b0:	2800      	cmp	r0, #0
   194b2:	d100      	bne.n	194b6 <sd_mmc_check+0x23e>
   194b4:	e700      	b.n	192b8 <sd_mmc_check+0x40>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
   194b6:	4b40      	ldr	r3, [pc, #256]	; (195b8 <sd_mmc_check+0x340>)
   194b8:	681a      	ldr	r2, [r3, #0]
   194ba:	7b93      	ldrb	r3, [r2, #14]
	value &=  ((uint32_t)1 << size) - 1;
   194bc:	069b      	lsls	r3, r3, #26
   194be:	0f1b      	lsrs	r3, r3, #28
   194c0:	2b02      	cmp	r3, #2
   194c2:	d100      	bne.n	194c6 <sd_mmc_check+0x24e>
   194c4:	e0a8      	b.n	19618 <sd_mmc_check+0x3a0>
   194c6:	d907      	bls.n	194d8 <sd_mmc_check+0x260>
   194c8:	2b03      	cmp	r3, #3
   194ca:	d100      	bne.n	194ce <sd_mmc_check+0x256>
   194cc:	e0a7      	b.n	1961e <sd_mmc_check+0x3a6>
   194ce:	2b04      	cmp	r3, #4
   194d0:	d104      	bne.n	194dc <sd_mmc_check+0x264>
		sd_mmc_card->version = CARD_VER_MMC_4;
   194d2:	2340      	movs	r3, #64	; 0x40
   194d4:	7313      	strb	r3, [r2, #12]
   194d6:	e003      	b.n	194e0 <sd_mmc_check+0x268>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
   194d8:	2b01      	cmp	r3, #1
   194da:	d066      	beq.n	195aa <sd_mmc_check+0x332>
		sd_mmc_card->version = CARD_VER_MMC_1_2;
   194dc:	2312      	movs	r3, #18
   194de:	7313      	strb	r3, [r2, #12]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   194e0:	7c53      	ldrb	r3, [r2, #17]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
   194e2:	0659      	lsls	r1, r3, #25
   194e4:	0f09      	lsrs	r1, r1, #28
   194e6:	0089      	lsls	r1, r1, #2
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   194e8:	2007      	movs	r0, #7
   194ea:	4003      	ands	r3, r0
   194ec:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
   194ee:	483f      	ldr	r0, [pc, #252]	; (195ec <sd_mmc_check+0x374>)
   194f0:	5818      	ldr	r0, [r3, r0]
   194f2:	23fa      	movs	r3, #250	; 0xfa
   194f4:	009b      	lsls	r3, r3, #2
   194f6:	4343      	muls	r3, r0
   194f8:	4843      	ldr	r0, [pc, #268]	; (19608 <sd_mmc_check+0x390>)
   194fa:	5809      	ldr	r1, [r1, r0]
   194fc:	434b      	muls	r3, r1
   194fe:	6013      	str	r3, [r2, #0]
   19500:	7d91      	ldrb	r1, [r2, #22]
   19502:	1189      	asrs	r1, r1, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   19504:	7d53      	ldrb	r3, [r2, #21]
   19506:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   19508:	7d10      	ldrb	r0, [r2, #20]
   1950a:	0280      	lsls	r0, r0, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   1950c:	4303      	orrs	r3, r0
   1950e:	430b      	orrs	r3, r1
	value &=  ((uint32_t)1 << size) - 1;
   19510:	051b      	lsls	r3, r3, #20
   19512:	0d1b      	lsrs	r3, r3, #20
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
   19514:	493d      	ldr	r1, [pc, #244]	; (1960c <sd_mmc_check+0x394>)
   19516:	428b      	cmp	r3, r1
   19518:	d00f      	beq.n	1953a <sd_mmc_check+0x2c2>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   1951a:	7e10      	ldrb	r0, [r2, #24]
   1951c:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   1951e:	7dd1      	ldrb	r1, [r2, #23]
   19520:	0049      	lsls	r1, r1, #1
   19522:	4301      	orrs	r1, r0
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   19524:	3301      	adds	r3, #1
	value &=  ((uint32_t)1 << size) - 1;
   19526:	2007      	movs	r0, #7
   19528:	4001      	ands	r1, r0
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   1952a:	3102      	adds	r1, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   1952c:	408b      	lsls	r3, r1
   1952e:	7cd1      	ldrb	r1, [r2, #19]
   19530:	3008      	adds	r0, #8
   19532:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
   19534:	408b      	lsls	r3, r1
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   19536:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   19538:	6053      	str	r3, [r2, #4]
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
   1953a:	7b13      	ldrb	r3, [r2, #12]
   1953c:	2b3f      	cmp	r3, #63	; 0x3f
   1953e:	d97b      	bls.n	19638 <sd_mmc_check+0x3c0>
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
   19540:	2100      	movs	r1, #0
   19542:	9100      	str	r1, [sp, #0]
   19544:	2301      	movs	r3, #1
   19546:	2280      	movs	r2, #128	; 0x80
   19548:	0092      	lsls	r2, r2, #2
   1954a:	4831      	ldr	r0, [pc, #196]	; (19610 <sd_mmc_check+0x398>)
   1954c:	4d2b      	ldr	r5, [pc, #172]	; (195fc <sd_mmc_check+0x384>)
   1954e:	47a8      	blx	r5
   19550:	2800      	cmp	r0, #0
   19552:	d100      	bne.n	19556 <sd_mmc_check+0x2de>
   19554:	e6b0      	b.n	192b8 <sd_mmc_check+0x40>
   19556:	2500      	movs	r5, #0
		if (!driver_read_word(&ext_csd)) {
   19558:	4e2e      	ldr	r6, [pc, #184]	; (19614 <sd_mmc_check+0x39c>)
   1955a:	a805      	add	r0, sp, #20
   1955c:	47b0      	blx	r6
   1955e:	2800      	cmp	r0, #0
   19560:	d100      	bne.n	19564 <sd_mmc_check+0x2ec>
   19562:	e6a9      	b.n	192b8 <sd_mmc_check+0x40>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   19564:	3501      	adds	r5, #1
   19566:	b2ad      	uxth	r5, r5
   19568:	2d32      	cmp	r5, #50	; 0x32
   1956a:	d1f6      	bne.n	1955a <sd_mmc_check+0x2e2>
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
   1956c:	4b12      	ldr	r3, [pc, #72]	; (195b8 <sd_mmc_check+0x340>)
   1956e:	6819      	ldr	r1, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   19570:	7d8a      	ldrb	r2, [r1, #22]
   19572:	1192      	asrs	r2, r2, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   19574:	7d4b      	ldrb	r3, [r1, #21]
   19576:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   19578:	7d09      	ldrb	r1, [r1, #20]
   1957a:	0289      	lsls	r1, r1, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   1957c:	430b      	orrs	r3, r1
   1957e:	4313      	orrs	r3, r2
	value &=  ((uint32_t)1 << size) - 1;
   19580:	051b      	lsls	r3, r3, #20
   19582:	0d1b      	lsrs	r3, r3, #20
   19584:	4a21      	ldr	r2, [pc, #132]	; (1960c <sd_mmc_check+0x394>)
   19586:	4293      	cmp	r3, r2
   19588:	d154      	bne.n	19634 <sd_mmc_check+0x3bc>
			if (!driver_read_word(&sec_count)) {
   1958a:	4e22      	ldr	r6, [pc, #136]	; (19614 <sd_mmc_check+0x39c>)
   1958c:	a806      	add	r0, sp, #24
   1958e:	47b0      	blx	r6
   19590:	2800      	cmp	r0, #0
   19592:	d100      	bne.n	19596 <sd_mmc_check+0x31e>
   19594:	e690      	b.n	192b8 <sd_mmc_check+0x40>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   19596:	3501      	adds	r5, #1
   19598:	b2ad      	uxth	r5, r5
   1959a:	2d35      	cmp	r5, #53	; 0x35
   1959c:	d9f6      	bls.n	1958c <sd_mmc_check+0x314>
		sd_mmc_card->capacity = sec_count / 2;
   1959e:	4b06      	ldr	r3, [pc, #24]	; (195b8 <sd_mmc_check+0x340>)
   195a0:	681a      	ldr	r2, [r3, #0]
   195a2:	9b06      	ldr	r3, [sp, #24]
   195a4:	085b      	lsrs	r3, r3, #1
   195a6:	6053      	str	r3, [r2, #4]
   195a8:	e044      	b.n	19634 <sd_mmc_check+0x3bc>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
   195aa:	2314      	movs	r3, #20
   195ac:	7313      	strb	r3, [r2, #12]
   195ae:	e797      	b.n	194e0 <sd_mmc_check+0x268>
   195b0:	0001917d 	.word	0x0001917d
   195b4:	0001925d 	.word	0x0001925d
   195b8:	20003c24 	.word	0x20003c24
   195bc:	00019d59 	.word	0x00019d59
   195c0:	00019f21 	.word	0x00019f21
   195c4:	00005508 	.word	0x00005508
   195c8:	00001110 	.word	0x00001110
   195cc:	000191d9 	.word	0x000191d9
   195d0:	00019155 	.word	0x00019155
   195d4:	00019f39 	.word	0x00019f39
   195d8:	0000053a 	.word	0x0000053a
   195dc:	00001bef 	.word	0x00001bef
   195e0:	00001101 	.word	0x00001101
   195e4:	0000113b 	.word	0x0000113b
   195e8:	00019211 	.word	0x00019211
   195ec:	0002a090 	.word	0x0002a090
   195f0:	0002a0ac 	.word	0x0002a0ac
   195f4:	00001137 	.word	0x00001137
   195f8:	00081133 	.word	0x00081133
   195fc:	00019d91 	.word	0x00019d91
   19600:	00019fbd 	.word	0x00019fbd
   19604:	0001a049 	.word	0x0001a049
   19608:	0002a050 	.word	0x0002a050
   1960c:	00000fff 	.word	0x00000fff
   19610:	00081108 	.word	0x00081108
   19614:	00019f45 	.word	0x00019f45
		sd_mmc_card->version = CARD_VER_MMC_2_2;
   19618:	2322      	movs	r3, #34	; 0x22
   1961a:	7313      	strb	r3, [r2, #12]
   1961c:	e760      	b.n	194e0 <sd_mmc_check+0x268>
		sd_mmc_card->version = CARD_VER_MMC_3;
   1961e:	2330      	movs	r3, #48	; 0x30
   19620:	7313      	strb	r3, [r2, #12]
   19622:	e75d      	b.n	194e0 <sd_mmc_check+0x268>
		if (!driver_read_word(&sec_count)) {
   19624:	a806      	add	r0, sp, #24
   19626:	4b36      	ldr	r3, [pc, #216]	; (19700 <sd_mmc_check+0x488>)
   19628:	4798      	blx	r3
   1962a:	2800      	cmp	r0, #0
   1962c:	d100      	bne.n	19630 <sd_mmc_check+0x3b8>
   1962e:	e643      	b.n	192b8 <sd_mmc_check+0x40>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   19630:	3501      	adds	r5, #1
   19632:	b2ad      	uxth	r5, r5
   19634:	2d7f      	cmp	r5, #127	; 0x7f
   19636:	d9f5      	bls.n	19624 <sd_mmc_check+0x3ac>
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   19638:	2180      	movs	r1, #128	; 0x80
   1963a:	0089      	lsls	r1, r1, #2
   1963c:	4831      	ldr	r0, [pc, #196]	; (19704 <sd_mmc_check+0x48c>)
   1963e:	4b32      	ldr	r3, [pc, #200]	; (19708 <sd_mmc_check+0x490>)
   19640:	4798      	blx	r3
   19642:	2800      	cmp	r0, #0
   19644:	d100      	bne.n	19648 <sd_mmc_check+0x3d0>
   19646:	e637      	b.n	192b8 <sd_mmc_check+0x40>
	if (!sd_mmc_cmd13()) {
   19648:	4b30      	ldr	r3, [pc, #192]	; (1970c <sd_mmc_check+0x494>)
   1964a:	4798      	blx	r3
   1964c:	2800      	cmp	r0, #0
   1964e:	d100      	bne.n	19652 <sd_mmc_check+0x3da>
   19650:	e632      	b.n	192b8 <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
   19652:	4b2f      	ldr	r3, [pc, #188]	; (19710 <sd_mmc_check+0x498>)
   19654:	4798      	blx	r3
   19656:	e65e      	b.n	19316 <sd_mmc_check+0x9e>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   19658:	7dd0      	ldrb	r0, [r2, #23]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   1965a:	7d93      	ldrb	r3, [r2, #22]
   1965c:	021b      	lsls	r3, r3, #8
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   1965e:	7d51      	ldrb	r1, [r2, #21]
   19660:	0409      	lsls	r1, r1, #16
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   19662:	430b      	orrs	r3, r1
   19664:	4303      	orrs	r3, r0
	value &=  ((uint32_t)1 << size) - 1;
   19666:	029b      	lsls	r3, r3, #10
				* 512;
   19668:	085b      	lsrs	r3, r3, #1
   1966a:	2180      	movs	r1, #128	; 0x80
   1966c:	0089      	lsls	r1, r1, #2
   1966e:	468c      	mov	ip, r1
   19670:	4463      	add	r3, ip
		sd_mmc_card->capacity =
   19672:	6053      	str	r3, [r2, #4]
   19674:	e6cd      	b.n	19412 <sd_mmc_check+0x19a>
		sd_mmc_card->version = CARD_VER_SD_1_0;
   19676:	4b27      	ldr	r3, [pc, #156]	; (19714 <sd_mmc_check+0x49c>)
   19678:	681b      	ldr	r3, [r3, #0]
   1967a:	2210      	movs	r2, #16
   1967c:	731a      	strb	r2, [r3, #12]
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   1967e:	4b25      	ldr	r3, [pc, #148]	; (19714 <sd_mmc_check+0x49c>)
   19680:	681b      	ldr	r3, [r3, #0]
   19682:	7adb      	ldrb	r3, [r3, #11]
   19684:	2209      	movs	r2, #9
   19686:	4013      	ands	r3, r2
   19688:	2b01      	cmp	r3, #1
   1968a:	d000      	beq.n	1968e <sd_mmc_check+0x416>
   1968c:	e638      	b.n	19300 <sd_mmc_check+0x88>
   1968e:	e630      	b.n	192f2 <sd_mmc_check+0x7a>
		sd_mmc_card->version = CARD_VER_SD_1_10;
   19690:	4b20      	ldr	r3, [pc, #128]	; (19714 <sd_mmc_check+0x49c>)
   19692:	681b      	ldr	r3, [r3, #0]
   19694:	221a      	movs	r2, #26
   19696:	731a      	strb	r2, [r3, #12]
   19698:	e7f1      	b.n	1967e <sd_mmc_check+0x406>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   1969a:	ab06      	add	r3, sp, #24
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
   1969c:	789b      	ldrb	r3, [r3, #2]
   1969e:	09db      	lsrs	r3, r3, #7
   196a0:	2b01      	cmp	r3, #1
   196a2:	d104      	bne.n	196ae <sd_mmc_check+0x436>
			sd_mmc_card->version = CARD_VER_SD_3_0;
   196a4:	4b1b      	ldr	r3, [pc, #108]	; (19714 <sd_mmc_check+0x49c>)
   196a6:	681b      	ldr	r3, [r3, #0]
   196a8:	2230      	movs	r2, #48	; 0x30
   196aa:	731a      	strb	r2, [r3, #12]
   196ac:	e7e7      	b.n	1967e <sd_mmc_check+0x406>
			sd_mmc_card->version = CARD_VER_SD_2_0;
   196ae:	4b19      	ldr	r3, [pc, #100]	; (19714 <sd_mmc_check+0x49c>)
   196b0:	681b      	ldr	r3, [r3, #0]
   196b2:	2220      	movs	r2, #32
   196b4:	731a      	strb	r2, [r3, #12]
   196b6:	e7e2      	b.n	1967e <sd_mmc_check+0x406>
	*v2 = 0;
   196b8:	2600      	movs	r6, #0
   196ba:	e60d      	b.n	192d8 <sd_mmc_check+0x60>
   196bc:	1e73      	subs	r3, r6, #1
   196be:	419e      	sbcs	r6, r3
   196c0:	07b3      	lsls	r3, r6, #30
   196c2:	9303      	str	r3, [sp, #12]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   196c4:	4d14      	ldr	r5, [pc, #80]	; (19718 <sd_mmc_check+0x4a0>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
   196c6:	4f10      	ldr	r7, [pc, #64]	; (19708 <sd_mmc_check+0x490>)
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
   196c8:	46b8      	mov	r8, r7
		resp = driver_get_response();
   196ca:	4e14      	ldr	r6, [pc, #80]	; (1971c <sd_mmc_check+0x4a4>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
   196cc:	2100      	movs	r1, #0
   196ce:	4814      	ldr	r0, [pc, #80]	; (19720 <sd_mmc_check+0x4a8>)
   196d0:	47b8      	blx	r7
   196d2:	2800      	cmp	r0, #0
   196d4:	d100      	bne.n	196d8 <sd_mmc_check+0x460>
   196d6:	e638      	b.n	1934a <sd_mmc_check+0xd2>
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
   196d8:	9903      	ldr	r1, [sp, #12]
   196da:	4812      	ldr	r0, [pc, #72]	; (19724 <sd_mmc_check+0x4ac>)
   196dc:	47c0      	blx	r8
   196de:	2800      	cmp	r0, #0
   196e0:	d100      	bne.n	196e4 <sd_mmc_check+0x46c>
   196e2:	e632      	b.n	1934a <sd_mmc_check+0xd2>
		resp = driver_get_response();
   196e4:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
   196e6:	07c3      	lsls	r3, r0, #31
   196e8:	d400      	bmi.n	196ec <sd_mmc_check+0x474>
   196ea:	e628      	b.n	1933e <sd_mmc_check+0xc6>
   196ec:	3d01      	subs	r5, #1
		if (retry-- == 0) {
   196ee:	2d00      	cmp	r5, #0
   196f0:	d1ec      	bne.n	196cc <sd_mmc_check+0x454>
   196f2:	e62a      	b.n	1934a <sd_mmc_check+0xd2>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   196f4:	2209      	movs	r2, #9
   196f6:	4013      	ands	r3, r2
   196f8:	2b01      	cmp	r3, #1
   196fa:	d000      	beq.n	196fe <sd_mmc_check+0x486>
   196fc:	e609      	b.n	19312 <sd_mmc_check+0x9a>
   196fe:	e5f8      	b.n	192f2 <sd_mmc_check+0x7a>
   19700:	00019f45 	.word	0x00019f45
   19704:	00001110 	.word	0x00001110
   19708:	00019f21 	.word	0x00019f21
   1970c:	000191d9 	.word	0x000191d9
   19710:	00019155 	.word	0x00019155
   19714:	20003c24 	.word	0x20003c24
   19718:	00001bef 	.word	0x00001bef
   1971c:	00019f39 	.word	0x00019f39
   19720:	00001137 	.word	0x00001137
   19724:	00001129 	.word	0x00001129

00019728 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
   19728:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   1972a:	4b06      	ldr	r3, [pc, #24]	; (19744 <sd_mmc_get_type+0x1c>)
   1972c:	4798      	blx	r3
		return CARD_TYPE_UNKNOWN;
   1972e:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   19730:	2800      	cmp	r0, #0
   19732:	d001      	beq.n	19738 <sd_mmc_get_type+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
   19734:	0018      	movs	r0, r3
   19736:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
   19738:	4b03      	ldr	r3, [pc, #12]	; (19748 <sd_mmc_get_type+0x20>)
   1973a:	4798      	blx	r3
	return sd_mmc_card->type;
   1973c:	4b03      	ldr	r3, [pc, #12]	; (1974c <sd_mmc_get_type+0x24>)
   1973e:	681b      	ldr	r3, [r3, #0]
   19740:	7adb      	ldrb	r3, [r3, #11]
   19742:	e7f7      	b.n	19734 <sd_mmc_get_type+0xc>
   19744:	0001917d 	.word	0x0001917d
   19748:	0001925d 	.word	0x0001925d
   1974c:	20003c24 	.word	0x20003c24

00019750 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
   19750:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   19752:	4b06      	ldr	r3, [pc, #24]	; (1976c <sd_mmc_get_capacity+0x1c>)
   19754:	4798      	blx	r3
		return 0;
   19756:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   19758:	2800      	cmp	r0, #0
   1975a:	d001      	beq.n	19760 <sd_mmc_get_capacity+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
   1975c:	0018      	movs	r0, r3
   1975e:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
   19760:	4b03      	ldr	r3, [pc, #12]	; (19770 <sd_mmc_get_capacity+0x20>)
   19762:	4798      	blx	r3
	return sd_mmc_card->capacity;
   19764:	4b03      	ldr	r3, [pc, #12]	; (19774 <sd_mmc_get_capacity+0x24>)
   19766:	681b      	ldr	r3, [r3, #0]
   19768:	685b      	ldr	r3, [r3, #4]
   1976a:	e7f7      	b.n	1975c <sd_mmc_get_capacity+0xc>
   1976c:	0001917d 	.word	0x0001917d
   19770:	0001925d 	.word	0x0001925d
   19774:	20003c24 	.word	0x20003c24

00019778 <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
   19778:	2000      	movs	r0, #0
   1977a:	4770      	bx	lr

0001977c <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   1977c:	b570      	push	{r4, r5, r6, lr}
   1977e:	b082      	sub	sp, #8
   19780:	000e      	movs	r6, r1
   19782:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   19784:	4b16      	ldr	r3, [pc, #88]	; (197e0 <sd_mmc_init_read_blocks+0x64>)
   19786:	4798      	blx	r3
   19788:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
   1978a:	d002      	beq.n	19792 <sd_mmc_init_read_blocks+0x16>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
   1978c:	0020      	movs	r0, r4
   1978e:	b002      	add	sp, #8
   19790:	bd70      	pop	{r4, r5, r6, pc}
	if (!sd_mmc_cmd13()) {
   19792:	4b14      	ldr	r3, [pc, #80]	; (197e4 <sd_mmc_init_read_blocks+0x68>)
   19794:	4798      	blx	r3
   19796:	2800      	cmp	r0, #0
   19798:	d017      	beq.n	197ca <sd_mmc_init_read_blocks+0x4e>
	if (nb_block > 1) {
   1979a:	2d01      	cmp	r5, #1
   1979c:	d919      	bls.n	197d2 <sd_mmc_init_read_blocks+0x56>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
   1979e:	4812      	ldr	r0, [pc, #72]	; (197e8 <sd_mmc_init_read_blocks+0x6c>)
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   197a0:	4b12      	ldr	r3, [pc, #72]	; (197ec <sd_mmc_init_read_blocks+0x70>)
   197a2:	681b      	ldr	r3, [r3, #0]
   197a4:	7adb      	ldrb	r3, [r3, #11]
   197a6:	071b      	lsls	r3, r3, #28
   197a8:	d400      	bmi.n	197ac <sd_mmc_init_read_blocks+0x30>
		arg = (start * SD_MMC_BLOCK_SIZE);
   197aa:	0276      	lsls	r6, r6, #9
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   197ac:	2301      	movs	r3, #1
   197ae:	9300      	str	r3, [sp, #0]
   197b0:	002b      	movs	r3, r5
   197b2:	2280      	movs	r2, #128	; 0x80
   197b4:	0092      	lsls	r2, r2, #2
   197b6:	0031      	movs	r1, r6
   197b8:	4e0d      	ldr	r6, [pc, #52]	; (197f0 <sd_mmc_init_read_blocks+0x74>)
   197ba:	47b0      	blx	r6
   197bc:	2800      	cmp	r0, #0
   197be:	d00a      	beq.n	197d6 <sd_mmc_init_read_blocks+0x5a>
	sd_mmc_nb_block_remaining = nb_block;
   197c0:	4b0c      	ldr	r3, [pc, #48]	; (197f4 <sd_mmc_init_read_blocks+0x78>)
   197c2:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   197c4:	4b0c      	ldr	r3, [pc, #48]	; (197f8 <sd_mmc_init_read_blocks+0x7c>)
   197c6:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
   197c8:	e7e0      	b.n	1978c <sd_mmc_init_read_blocks+0x10>
		sd_mmc_deselect_slot();
   197ca:	4b0c      	ldr	r3, [pc, #48]	; (197fc <sd_mmc_init_read_blocks+0x80>)
   197cc:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   197ce:	3405      	adds	r4, #5
   197d0:	e7dc      	b.n	1978c <sd_mmc_init_read_blocks+0x10>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
   197d2:	480b      	ldr	r0, [pc, #44]	; (19800 <sd_mmc_init_read_blocks+0x84>)
   197d4:	e7e4      	b.n	197a0 <sd_mmc_init_read_blocks+0x24>
		sd_mmc_deselect_slot();
   197d6:	4b09      	ldr	r3, [pc, #36]	; (197fc <sd_mmc_init_read_blocks+0x80>)
   197d8:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   197da:	2405      	movs	r4, #5
   197dc:	e7d6      	b.n	1978c <sd_mmc_init_read_blocks+0x10>
   197de:	46c0      	nop			; (mov r8, r8)
   197e0:	0001917d 	.word	0x0001917d
   197e4:	000191d9 	.word	0x000191d9
   197e8:	00101112 	.word	0x00101112
   197ec:	20003c24 	.word	0x20003c24
   197f0:	00019d91 	.word	0x00019d91
   197f4:	20003c48 	.word	0x20003c48
   197f8:	20003c4a 	.word	0x20003c4a
   197fc:	0001925d 	.word	0x0001925d
   19800:	00081111 	.word	0x00081111

00019804 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
   19804:	b510      	push	{r4, lr}
   19806:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
   19808:	4b07      	ldr	r3, [pc, #28]	; (19828 <sd_mmc_start_read_blocks+0x24>)
   1980a:	4798      	blx	r3
   1980c:	2800      	cmp	r0, #0
   1980e:	d104      	bne.n	1981a <sd_mmc_start_read_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
   19810:	2200      	movs	r2, #0
   19812:	4b06      	ldr	r3, [pc, #24]	; (1982c <sd_mmc_start_read_blocks+0x28>)
   19814:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   19816:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
   19818:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
   1981a:	4a04      	ldr	r2, [pc, #16]	; (1982c <sd_mmc_start_read_blocks+0x28>)
   1981c:	8813      	ldrh	r3, [r2, #0]
   1981e:	1b1c      	subs	r4, r3, r4
   19820:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
   19822:	2000      	movs	r0, #0
   19824:	e7f8      	b.n	19818 <sd_mmc_start_read_blocks+0x14>
   19826:	46c0      	nop			; (mov r8, r8)
   19828:	00019fbd 	.word	0x00019fbd
   1982c:	20003c48 	.word	0x20003c48

00019830 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
   19830:	b510      	push	{r4, lr}
   19832:	0004      	movs	r4, r0
	if (!driver_wait_end_of_read_blocks()) {
   19834:	4b14      	ldr	r3, [pc, #80]	; (19888 <sd_mmc_wait_end_of_read_blocks+0x58>)
   19836:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   19838:	2305      	movs	r3, #5
	if (!driver_wait_end_of_read_blocks()) {
   1983a:	2800      	cmp	r0, #0
   1983c:	d101      	bne.n	19842 <sd_mmc_wait_end_of_read_blocks+0x12>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
   1983e:	0018      	movs	r0, r3
   19840:	bd10      	pop	{r4, pc}
	if (abort) {
   19842:	2c00      	cmp	r4, #0
   19844:	d010      	beq.n	19868 <sd_mmc_wait_end_of_read_blocks+0x38>
		sd_mmc_nb_block_remaining = 0;
   19846:	2200      	movs	r2, #0
   19848:	4b10      	ldr	r3, [pc, #64]	; (1988c <sd_mmc_wait_end_of_read_blocks+0x5c>)
   1984a:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
   1984c:	4b10      	ldr	r3, [pc, #64]	; (19890 <sd_mmc_wait_end_of_read_blocks+0x60>)
   1984e:	881b      	ldrh	r3, [r3, #0]
   19850:	2b01      	cmp	r3, #1
   19852:	d00f      	beq.n	19874 <sd_mmc_wait_end_of_read_blocks+0x44>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
   19854:	2100      	movs	r1, #0
   19856:	480f      	ldr	r0, [pc, #60]	; (19894 <sd_mmc_wait_end_of_read_blocks+0x64>)
   19858:	4b0f      	ldr	r3, [pc, #60]	; (19898 <sd_mmc_wait_end_of_read_blocks+0x68>)
   1985a:	4798      	blx	r3
   1985c:	2800      	cmp	r0, #0
   1985e:	d00d      	beq.n	1987c <sd_mmc_wait_end_of_read_blocks+0x4c>
	sd_mmc_deselect_slot();
   19860:	4b0e      	ldr	r3, [pc, #56]	; (1989c <sd_mmc_wait_end_of_read_blocks+0x6c>)
   19862:	4798      	blx	r3
	return SD_MMC_OK;
   19864:	2300      	movs	r3, #0
   19866:	e7ea      	b.n	1983e <sd_mmc_wait_end_of_read_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
   19868:	4b08      	ldr	r3, [pc, #32]	; (1988c <sd_mmc_wait_end_of_read_blocks+0x5c>)
   1986a:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
   1986c:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
   1986e:	2a00      	cmp	r2, #0
   19870:	d0ec      	beq.n	1984c <sd_mmc_wait_end_of_read_blocks+0x1c>
   19872:	e7e4      	b.n	1983e <sd_mmc_wait_end_of_read_blocks+0xe>
		sd_mmc_deselect_slot();
   19874:	4b09      	ldr	r3, [pc, #36]	; (1989c <sd_mmc_wait_end_of_read_blocks+0x6c>)
   19876:	4798      	blx	r3
		return SD_MMC_OK;
   19878:	2300      	movs	r3, #0
   1987a:	e7e0      	b.n	1983e <sd_mmc_wait_end_of_read_blocks+0xe>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
   1987c:	2100      	movs	r1, #0
   1987e:	4805      	ldr	r0, [pc, #20]	; (19894 <sd_mmc_wait_end_of_read_blocks+0x64>)
   19880:	4b05      	ldr	r3, [pc, #20]	; (19898 <sd_mmc_wait_end_of_read_blocks+0x68>)
   19882:	4798      	blx	r3
   19884:	e7ec      	b.n	19860 <sd_mmc_wait_end_of_read_blocks+0x30>
   19886:	46c0      	nop			; (mov r8, r8)
   19888:	0001a049 	.word	0x0001a049
   1988c:	20003c48 	.word	0x20003c48
   19890:	20003c4a 	.word	0x20003c4a
   19894:	0000310c 	.word	0x0000310c
   19898:	00019f21 	.word	0x00019f21
   1989c:	0001925d 	.word	0x0001925d

000198a0 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   198a0:	b570      	push	{r4, r5, r6, lr}
   198a2:	b082      	sub	sp, #8
   198a4:	000e      	movs	r6, r1
   198a6:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   198a8:	4b11      	ldr	r3, [pc, #68]	; (198f0 <sd_mmc_init_write_blocks+0x50>)
   198aa:	4798      	blx	r3
   198ac:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
   198ae:	d116      	bne.n	198de <sd_mmc_init_write_blocks+0x3e>
	if (sd_mmc_is_write_protected(slot)) {
		sd_mmc_deselect_slot();
		return SD_MMC_ERR_WP;
	}

	if (nb_block > 1) {
   198b0:	2d01      	cmp	r5, #1
   198b2:	d917      	bls.n	198e4 <sd_mmc_init_write_blocks+0x44>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
   198b4:	480f      	ldr	r0, [pc, #60]	; (198f4 <sd_mmc_init_write_blocks+0x54>)
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   198b6:	4b10      	ldr	r3, [pc, #64]	; (198f8 <sd_mmc_init_write_blocks+0x58>)
   198b8:	681b      	ldr	r3, [r3, #0]
   198ba:	7adb      	ldrb	r3, [r3, #11]
   198bc:	071b      	lsls	r3, r3, #28
   198be:	d400      	bmi.n	198c2 <sd_mmc_init_write_blocks+0x22>
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   198c0:	0276      	lsls	r6, r6, #9
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   198c2:	2301      	movs	r3, #1
   198c4:	9300      	str	r3, [sp, #0]
   198c6:	002b      	movs	r3, r5
   198c8:	2280      	movs	r2, #128	; 0x80
   198ca:	0092      	lsls	r2, r2, #2
   198cc:	0031      	movs	r1, r6
   198ce:	4e0b      	ldr	r6, [pc, #44]	; (198fc <sd_mmc_init_write_blocks+0x5c>)
   198d0:	47b0      	blx	r6
   198d2:	2800      	cmp	r0, #0
   198d4:	d008      	beq.n	198e8 <sd_mmc_init_write_blocks+0x48>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   198d6:	4b0a      	ldr	r3, [pc, #40]	; (19900 <sd_mmc_init_write_blocks+0x60>)
   198d8:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   198da:	4b0a      	ldr	r3, [pc, #40]	; (19904 <sd_mmc_init_write_blocks+0x64>)
   198dc:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
}
   198de:	0020      	movs	r0, r4
   198e0:	b002      	add	sp, #8
   198e2:	bd70      	pop	{r4, r5, r6, pc}
		cmd = SDMMC_CMD24_WRITE_BLOCK;
   198e4:	4808      	ldr	r0, [pc, #32]	; (19908 <sd_mmc_init_write_blocks+0x68>)
   198e6:	e7e6      	b.n	198b6 <sd_mmc_init_write_blocks+0x16>
		sd_mmc_deselect_slot();
   198e8:	4b08      	ldr	r3, [pc, #32]	; (1990c <sd_mmc_init_write_blocks+0x6c>)
   198ea:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   198ec:	2405      	movs	r4, #5
   198ee:	e7f6      	b.n	198de <sd_mmc_init_write_blocks+0x3e>
   198f0:	0001917d 	.word	0x0001917d
   198f4:	00109119 	.word	0x00109119
   198f8:	20003c24 	.word	0x20003c24
   198fc:	00019d91 	.word	0x00019d91
   19900:	20003c48 	.word	0x20003c48
   19904:	20003c4a 	.word	0x20003c4a
   19908:	00089118 	.word	0x00089118
   1990c:	0001925d 	.word	0x0001925d

00019910 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
   19910:	b510      	push	{r4, lr}
   19912:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
   19914:	4b07      	ldr	r3, [pc, #28]	; (19934 <sd_mmc_start_write_blocks+0x24>)
   19916:	4798      	blx	r3
   19918:	2800      	cmp	r0, #0
   1991a:	d104      	bne.n	19926 <sd_mmc_start_write_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
   1991c:	2200      	movs	r2, #0
   1991e:	4b06      	ldr	r3, [pc, #24]	; (19938 <sd_mmc_start_write_blocks+0x28>)
   19920:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   19922:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
   19924:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
   19926:	4a04      	ldr	r2, [pc, #16]	; (19938 <sd_mmc_start_write_blocks+0x28>)
   19928:	8813      	ldrh	r3, [r2, #0]
   1992a:	1b1c      	subs	r4, r3, r4
   1992c:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
   1992e:	2000      	movs	r0, #0
   19930:	e7f8      	b.n	19924 <sd_mmc_start_write_blocks+0x14>
   19932:	46c0      	nop			; (mov r8, r8)
   19934:	0001a04d 	.word	0x0001a04d
   19938:	20003c48 	.word	0x20003c48

0001993c <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
   1993c:	b510      	push	{r4, lr}
   1993e:	0004      	movs	r4, r0
	if (!driver_wait_end_of_write_blocks()) {
   19940:	4b0e      	ldr	r3, [pc, #56]	; (1997c <sd_mmc_wait_end_of_write_blocks+0x40>)
   19942:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   19944:	2305      	movs	r3, #5
	if (!driver_wait_end_of_write_blocks()) {
   19946:	2800      	cmp	r0, #0
   19948:	d101      	bne.n	1994e <sd_mmc_wait_end_of_write_blocks+0x12>
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
   1994a:	0018      	movs	r0, r3
   1994c:	bd10      	pop	{r4, pc}
	if (abort) {
   1994e:	2c00      	cmp	r4, #0
   19950:	d00a      	beq.n	19968 <sd_mmc_wait_end_of_write_blocks+0x2c>
		sd_mmc_nb_block_remaining = 0;
   19952:	2200      	movs	r2, #0
   19954:	4b0a      	ldr	r3, [pc, #40]	; (19980 <sd_mmc_wait_end_of_write_blocks+0x44>)
   19956:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
   19958:	4b0a      	ldr	r3, [pc, #40]	; (19984 <sd_mmc_wait_end_of_write_blocks+0x48>)
   1995a:	881b      	ldrh	r3, [r3, #0]
   1995c:	2b01      	cmp	r3, #1
   1995e:	d009      	beq.n	19974 <sd_mmc_wait_end_of_write_blocks+0x38>
	sd_mmc_deselect_slot();
   19960:	4b09      	ldr	r3, [pc, #36]	; (19988 <sd_mmc_wait_end_of_write_blocks+0x4c>)
   19962:	4798      	blx	r3
	return SD_MMC_OK;
   19964:	2300      	movs	r3, #0
   19966:	e7f0      	b.n	1994a <sd_mmc_wait_end_of_write_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
   19968:	4b05      	ldr	r3, [pc, #20]	; (19980 <sd_mmc_wait_end_of_write_blocks+0x44>)
   1996a:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
   1996c:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
   1996e:	2a00      	cmp	r2, #0
   19970:	d0f2      	beq.n	19958 <sd_mmc_wait_end_of_write_blocks+0x1c>
   19972:	e7ea      	b.n	1994a <sd_mmc_wait_end_of_write_blocks+0xe>
		sd_mmc_deselect_slot();
   19974:	4b04      	ldr	r3, [pc, #16]	; (19988 <sd_mmc_wait_end_of_write_blocks+0x4c>)
   19976:	4798      	blx	r3
		return SD_MMC_OK;
   19978:	2300      	movs	r3, #0
   1997a:	e7e6      	b.n	1994a <sd_mmc_wait_end_of_write_blocks+0xe>
   1997c:	0001a0cd 	.word	0x0001a0cd
   19980:	20003c48 	.word	0x20003c48
   19984:	20003c4a 	.word	0x20003c4a
   19988:	0001925d 	.word	0x0001925d

0001998c <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
   1998c:	b510      	push	{r4, lr}
   1998e:	0004      	movs	r4, r0
	switch (sd_mmc_check(slot))
   19990:	4b0f      	ldr	r3, [pc, #60]	; (199d0 <sd_mmc_test_unit_ready+0x44>)
   19992:	4798      	blx	r3
   19994:	2801      	cmp	r0, #1
   19996:	d019      	beq.n	199cc <sd_mmc_test_unit_ready+0x40>
   19998:	2800      	cmp	r0, #0
   1999a:	d003      	beq.n	199a4 <sd_mmc_test_unit_ready+0x18>
   1999c:	2802      	cmp	r0, #2
   1999e:	d010      	beq.n	199c2 <sd_mmc_test_unit_ready+0x36>
	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
   199a0:	2001      	movs	r0, #1
	}
}
   199a2:	bd10      	pop	{r4, pc}
		if (sd_mmc_ejected[slot]) {
   199a4:	4b0b      	ldr	r3, [pc, #44]	; (199d4 <sd_mmc_test_unit_ready+0x48>)
   199a6:	5d1b      	ldrb	r3, [r3, r4]
			return CTRL_NO_PRESENT;
   199a8:	2002      	movs	r0, #2
		if (sd_mmc_ejected[slot]) {
   199aa:	2b00      	cmp	r3, #0
   199ac:	d1f9      	bne.n	199a2 <sd_mmc_test_unit_ready+0x16>
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
   199ae:	0020      	movs	r0, r4
   199b0:	4b09      	ldr	r3, [pc, #36]	; (199d8 <sd_mmc_test_unit_ready+0x4c>)
   199b2:	4798      	blx	r3
   199b4:	0003      	movs	r3, r0
   199b6:	2003      	movs	r0, #3
   199b8:	4018      	ands	r0, r3
		return CTRL_NO_PRESENT;
   199ba:	4243      	negs	r3, r0
   199bc:	4158      	adcs	r0, r3
   199be:	0040      	lsls	r0, r0, #1
   199c0:	e7ef      	b.n	199a2 <sd_mmc_test_unit_ready+0x16>
		sd_mmc_ejected[slot] = false;
   199c2:	2200      	movs	r2, #0
   199c4:	4b03      	ldr	r3, [pc, #12]	; (199d4 <sd_mmc_test_unit_ready+0x48>)
   199c6:	551a      	strb	r2, [r3, r4]
		return CTRL_NO_PRESENT;
   199c8:	2002      	movs	r0, #2
   199ca:	e7ea      	b.n	199a2 <sd_mmc_test_unit_ready+0x16>
		return CTRL_BUSY;
   199cc:	2003      	movs	r0, #3
   199ce:	e7e8      	b.n	199a2 <sd_mmc_test_unit_ready+0x16>
   199d0:	00019279 	.word	0x00019279
   199d4:	20003c50 	.word	0x20003c50
   199d8:	00019729 	.word	0x00019729

000199dc <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
   199dc:	b510      	push	{r4, lr}
	return sd_mmc_test_unit_ready(0);
   199de:	2000      	movs	r0, #0
   199e0:	4b01      	ldr	r3, [pc, #4]	; (199e8 <sd_mmc_test_unit_ready_0+0xc>)
   199e2:	4798      	blx	r3
}
   199e4:	bd10      	pop	{r4, pc}
   199e6:	46c0      	nop			; (mov r8, r8)
   199e8:	0001998d 	.word	0x0001998d

000199ec <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
   199ec:	b570      	push	{r4, r5, r6, lr}
   199ee:	0004      	movs	r4, r0
   199f0:	000d      	movs	r5, r1
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
   199f2:	4b04      	ldr	r3, [pc, #16]	; (19a04 <sd_mmc_read_capacity+0x18>)
   199f4:	4798      	blx	r3
   199f6:	0040      	lsls	r0, r0, #1
   199f8:	3801      	subs	r0, #1
   199fa:	6028      	str	r0, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
   199fc:	0020      	movs	r0, r4
   199fe:	4b02      	ldr	r3, [pc, #8]	; (19a08 <sd_mmc_read_capacity+0x1c>)
   19a00:	4798      	blx	r3
}
   19a02:	bd70      	pop	{r4, r5, r6, pc}
   19a04:	00019751 	.word	0x00019751
   19a08:	0001998d 	.word	0x0001998d

00019a0c <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
   19a0c:	b510      	push	{r4, lr}
   19a0e:	0001      	movs	r1, r0
	return sd_mmc_read_capacity(0, nb_sector);
   19a10:	2000      	movs	r0, #0
   19a12:	4b01      	ldr	r3, [pc, #4]	; (19a18 <sd_mmc_read_capacity_0+0xc>)
   19a14:	4798      	blx	r3
}
   19a16:	bd10      	pop	{r4, pc}
   19a18:	000199ed 	.word	0x000199ed

00019a1c <sd_mmc_wr_protect_0>:
{
	return sd_mmc_is_write_protected(slot);
}

bool sd_mmc_wr_protect_0(void)
{
   19a1c:	b510      	push	{r4, lr}
	return sd_mmc_is_write_protected(slot);
   19a1e:	2000      	movs	r0, #0
   19a20:	4b01      	ldr	r3, [pc, #4]	; (19a28 <sd_mmc_wr_protect_0+0xc>)
   19a22:	4798      	blx	r3
	return sd_mmc_wr_protect(0);
}
   19a24:	bd10      	pop	{r4, pc}
   19a26:	46c0      	nop			; (mov r8, r8)
   19a28:	00019779 	.word	0x00019779

00019a2c <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
   19a2c:	b510      	push	{r4, lr}
   19a2e:	0014      	movs	r4, r2
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
   19a30:	2201      	movs	r2, #1
   19a32:	4b0c      	ldr	r3, [pc, #48]	; (19a64 <sd_mmc_mem_2_ram+0x38>)
   19a34:	4798      	blx	r3
   19a36:	2800      	cmp	r0, #0
   19a38:	d004      	beq.n	19a44 <sd_mmc_mem_2_ram+0x18>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
   19a3a:	3802      	subs	r0, #2
   19a3c:	4243      	negs	r3, r0
   19a3e:	4158      	adcs	r0, r3
   19a40:	3001      	adds	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
   19a42:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
   19a44:	2101      	movs	r1, #1
   19a46:	0020      	movs	r0, r4
   19a48:	4b07      	ldr	r3, [pc, #28]	; (19a68 <sd_mmc_mem_2_ram+0x3c>)
   19a4a:	4798      	blx	r3
   19a4c:	0003      	movs	r3, r0
		return CTRL_FAIL;
   19a4e:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
   19a50:	2b00      	cmp	r3, #0
   19a52:	d1f6      	bne.n	19a42 <sd_mmc_mem_2_ram+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
   19a54:	2000      	movs	r0, #0
   19a56:	4b05      	ldr	r3, [pc, #20]	; (19a6c <sd_mmc_mem_2_ram+0x40>)
   19a58:	4798      	blx	r3
   19a5a:	1e43      	subs	r3, r0, #1
   19a5c:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
   19a5e:	b2c0      	uxtb	r0, r0
   19a60:	e7ef      	b.n	19a42 <sd_mmc_mem_2_ram+0x16>
   19a62:	46c0      	nop			; (mov r8, r8)
   19a64:	0001977d 	.word	0x0001977d
   19a68:	00019805 	.word	0x00019805
   19a6c:	00019831 	.word	0x00019831

00019a70 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
   19a70:	b510      	push	{r4, lr}
   19a72:	000a      	movs	r2, r1
	return sd_mmc_mem_2_ram(0, addr, ram);
   19a74:	0001      	movs	r1, r0
   19a76:	2000      	movs	r0, #0
   19a78:	4b01      	ldr	r3, [pc, #4]	; (19a80 <sd_mmc_mem_2_ram_0+0x10>)
   19a7a:	4798      	blx	r3
}
   19a7c:	bd10      	pop	{r4, pc}
   19a7e:	46c0      	nop			; (mov r8, r8)
   19a80:	00019a2d 	.word	0x00019a2d

00019a84 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
   19a84:	b510      	push	{r4, lr}
   19a86:	0014      	movs	r4, r2
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
   19a88:	2201      	movs	r2, #1
   19a8a:	4b0c      	ldr	r3, [pc, #48]	; (19abc <sd_mmc_ram_2_mem+0x38>)
   19a8c:	4798      	blx	r3
   19a8e:	2800      	cmp	r0, #0
   19a90:	d004      	beq.n	19a9c <sd_mmc_ram_2_mem+0x18>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
   19a92:	3802      	subs	r0, #2
   19a94:	4243      	negs	r3, r0
   19a96:	4158      	adcs	r0, r3
   19a98:	3001      	adds	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
   19a9a:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
   19a9c:	2101      	movs	r1, #1
   19a9e:	0020      	movs	r0, r4
   19aa0:	4b07      	ldr	r3, [pc, #28]	; (19ac0 <sd_mmc_ram_2_mem+0x3c>)
   19aa2:	4798      	blx	r3
   19aa4:	0003      	movs	r3, r0
		return CTRL_FAIL;
   19aa6:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
   19aa8:	2b00      	cmp	r3, #0
   19aaa:	d1f6      	bne.n	19a9a <sd_mmc_ram_2_mem+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
   19aac:	2000      	movs	r0, #0
   19aae:	4b05      	ldr	r3, [pc, #20]	; (19ac4 <sd_mmc_ram_2_mem+0x40>)
   19ab0:	4798      	blx	r3
   19ab2:	1e43      	subs	r3, r0, #1
   19ab4:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
   19ab6:	b2c0      	uxtb	r0, r0
   19ab8:	e7ef      	b.n	19a9a <sd_mmc_ram_2_mem+0x16>
   19aba:	46c0      	nop			; (mov r8, r8)
   19abc:	000198a1 	.word	0x000198a1
   19ac0:	00019911 	.word	0x00019911
   19ac4:	0001993d 	.word	0x0001993d

00019ac8 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
   19ac8:	b510      	push	{r4, lr}
   19aca:	000a      	movs	r2, r1
	return sd_mmc_ram_2_mem(0, addr, ram);
   19acc:	0001      	movs	r1, r0
   19ace:	2000      	movs	r0, #0
   19ad0:	4b01      	ldr	r3, [pc, #4]	; (19ad8 <sd_mmc_ram_2_mem_0+0x10>)
   19ad2:	4798      	blx	r3
}
   19ad4:	bd10      	pop	{r4, pc}
   19ad6:	46c0      	nop			; (mov r8, r8)
   19ad8:	00019a85 	.word	0x00019a85

00019adc <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
   19adc:	b500      	push	{lr}
   19ade:	b083      	sub	sp, #12
	uint8_t dummy = 0xFF;
   19ae0:	466b      	mov	r3, sp
   19ae2:	1dd9      	adds	r1, r3, #7
   19ae4:	23ff      	movs	r3, #255	; 0xff
   19ae6:	700b      	strb	r3, [r1, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
   19ae8:	2201      	movs	r2, #1
   19aea:	480b      	ldr	r0, [pc, #44]	; (19b18 <sd_mmc_spi_start_write_block+0x3c>)
   19aec:	4b0b      	ldr	r3, [pc, #44]	; (19b1c <sd_mmc_spi_start_write_block+0x40>)
   19aee:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
   19af0:	4b0b      	ldr	r3, [pc, #44]	; (19b20 <sd_mmc_spi_start_write_block+0x44>)
   19af2:	881b      	ldrh	r3, [r3, #0]
   19af4:	2b01      	cmp	r3, #1
   19af6:	d00a      	beq.n	19b0e <sd_mmc_spi_start_write_block+0x32>
		token = SPI_TOKEN_SINGLE_WRITE;
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
   19af8:	22fc      	movs	r2, #252	; 0xfc
   19afa:	466b      	mov	r3, sp
   19afc:	719a      	strb	r2, [r3, #6]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
   19afe:	2201      	movs	r2, #1
   19b00:	466b      	mov	r3, sp
   19b02:	1d99      	adds	r1, r3, #6
   19b04:	4804      	ldr	r0, [pc, #16]	; (19b18 <sd_mmc_spi_start_write_block+0x3c>)
   19b06:	4b05      	ldr	r3, [pc, #20]	; (19b1c <sd_mmc_spi_start_write_block+0x40>)
   19b08:	4798      	blx	r3
}
   19b0a:	b003      	add	sp, #12
   19b0c:	bd00      	pop	{pc}
		token = SPI_TOKEN_SINGLE_WRITE;
   19b0e:	22fe      	movs	r2, #254	; 0xfe
   19b10:	466b      	mov	r3, sp
   19b12:	719a      	strb	r2, [r3, #6]
   19b14:	e7f3      	b.n	19afe <sd_mmc_spi_start_write_block+0x22>
   19b16:	46c0      	nop			; (mov r8, r8)
   19b18:	20003c54 	.word	0x20003c54
   19b1c:	0001e2f9 	.word	0x0001e2f9
   19b20:	20003c98 	.word	0x20003c98

00019b24 <sd_mmc_spi_wait_busy>:
{
   19b24:	b5f0      	push	{r4, r5, r6, r7, lr}
   19b26:	b083      	sub	sp, #12
	uint8_t line = 0xFF;
   19b28:	466b      	mov	r3, sp
   19b2a:	1ddc      	adds	r4, r3, #7
   19b2c:	23ff      	movs	r3, #255	; 0xff
   19b2e:	7023      	strb	r3, [r4, #0]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   19b30:	4e12      	ldr	r6, [pc, #72]	; (19b7c <sd_mmc_spi_wait_busy+0x58>)
   19b32:	2201      	movs	r2, #1
   19b34:	0021      	movs	r1, r4
   19b36:	0030      	movs	r0, r6
   19b38:	4d11      	ldr	r5, [pc, #68]	; (19b80 <sd_mmc_spi_wait_busy+0x5c>)
   19b3a:	47a8      	blx	r5
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   19b3c:	23ff      	movs	r3, #255	; 0xff
   19b3e:	2201      	movs	r2, #1
   19b40:	0021      	movs	r1, r4
   19b42:	0030      	movs	r0, r6
   19b44:	47a8      	blx	r5
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   19b46:	23ff      	movs	r3, #255	; 0xff
   19b48:	2201      	movs	r2, #1
   19b4a:	0021      	movs	r1, r4
   19b4c:	0030      	movs	r0, r6
   19b4e:	47a8      	blx	r5
   19b50:	4c0c      	ldr	r4, [pc, #48]	; (19b84 <sd_mmc_spi_wait_busy+0x60>)
	} while (line != 0xFF);
   19b52:	466b      	mov	r3, sp
   19b54:	1ddd      	adds	r5, r3, #7
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   19b56:	4e09      	ldr	r6, [pc, #36]	; (19b7c <sd_mmc_spi_wait_busy+0x58>)
   19b58:	4f09      	ldr	r7, [pc, #36]	; (19b80 <sd_mmc_spi_wait_busy+0x5c>)
	} while (line != 0xFF);
   19b5a:	782b      	ldrb	r3, [r5, #0]
   19b5c:	2bff      	cmp	r3, #255	; 0xff
   19b5e:	d009      	beq.n	19b74 <sd_mmc_spi_wait_busy+0x50>
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   19b60:	23ff      	movs	r3, #255	; 0xff
   19b62:	2201      	movs	r2, #1
   19b64:	0029      	movs	r1, r5
   19b66:	0030      	movs	r0, r6
   19b68:	47b8      	blx	r7
   19b6a:	3c01      	subs	r4, #1
		if (!(nec_timeout--)) {
   19b6c:	2c00      	cmp	r4, #0
   19b6e:	d1f4      	bne.n	19b5a <sd_mmc_spi_wait_busy+0x36>
			return false;
   19b70:	2000      	movs	r0, #0
   19b72:	e000      	b.n	19b76 <sd_mmc_spi_wait_busy+0x52>
	return true;
   19b74:	2001      	movs	r0, #1
}
   19b76:	b003      	add	sp, #12
   19b78:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19b7a:	46c0      	nop			; (mov r8, r8)
   19b7c:	20003c54 	.word	0x20003c54
   19b80:	0001e131 	.word	0x0001e131
   19b84:	00030d40 	.word	0x00030d40

00019b88 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
   19b88:	b570      	push	{r4, r5, r6, lr}
   19b8a:	b082      	sub	sp, #8
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
   19b8c:	4b14      	ldr	r3, [pc, #80]	; (19be0 <sd_mmc_spi_stop_multiwrite_block+0x58>)
   19b8e:	881c      	ldrh	r4, [r3, #0]
   19b90:	2c01      	cmp	r4, #1
   19b92:	d023      	beq.n	19bdc <sd_mmc_spi_stop_multiwrite_block+0x54>
		return true; // Single block write
	}
	if (sd_mmc_spi_nb_block >
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
   19b94:	4b13      	ldr	r3, [pc, #76]	; (19be4 <sd_mmc_spi_stop_multiwrite_block+0x5c>)
   19b96:	8819      	ldrh	r1, [r3, #0]
   19b98:	4b13      	ldr	r3, [pc, #76]	; (19be8 <sd_mmc_spi_stop_multiwrite_block+0x60>)
   19b9a:	6818      	ldr	r0, [r3, #0]
   19b9c:	4b13      	ldr	r3, [pc, #76]	; (19bec <sd_mmc_spi_stop_multiwrite_block+0x64>)
   19b9e:	4798      	blx	r3
		return true; // It is not the End of multi write
   19ba0:	2301      	movs	r3, #1
	if (sd_mmc_spi_nb_block >
   19ba2:	4284      	cmp	r4, r0
   19ba4:	d902      	bls.n	19bac <sd_mmc_spi_stop_multiwrite_block+0x24>
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
	}
	return true;
}
   19ba6:	0018      	movs	r0, r3
   19ba8:	b002      	add	sp, #8
   19baa:	bd70      	pop	{r4, r5, r6, pc}
	value = 0xFF;
   19bac:	466b      	mov	r3, sp
   19bae:	1ddc      	adds	r4, r3, #7
   19bb0:	23ff      	movs	r3, #255	; 0xff
   19bb2:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   19bb4:	4e0e      	ldr	r6, [pc, #56]	; (19bf0 <sd_mmc_spi_stop_multiwrite_block+0x68>)
   19bb6:	2201      	movs	r2, #1
   19bb8:	0021      	movs	r1, r4
   19bba:	0030      	movs	r0, r6
   19bbc:	4d0d      	ldr	r5, [pc, #52]	; (19bf4 <sd_mmc_spi_stop_multiwrite_block+0x6c>)
   19bbe:	47a8      	blx	r5
	value = SPI_TOKEN_STOP_TRAN;
   19bc0:	23fd      	movs	r3, #253	; 0xfd
   19bc2:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   19bc4:	2201      	movs	r2, #1
   19bc6:	0021      	movs	r1, r4
   19bc8:	0030      	movs	r0, r6
   19bca:	47a8      	blx	r5
	if (!sd_mmc_spi_wait_busy()) {
   19bcc:	4b0a      	ldr	r3, [pc, #40]	; (19bf8 <sd_mmc_spi_stop_multiwrite_block+0x70>)
   19bce:	4798      	blx	r3
   19bd0:	1e03      	subs	r3, r0, #0
   19bd2:	d1e8      	bne.n	19ba6 <sd_mmc_spi_stop_multiwrite_block+0x1e>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   19bd4:	2105      	movs	r1, #5
   19bd6:	4a09      	ldr	r2, [pc, #36]	; (19bfc <sd_mmc_spi_stop_multiwrite_block+0x74>)
   19bd8:	7011      	strb	r1, [r2, #0]
		return false;
   19bda:	e7e4      	b.n	19ba6 <sd_mmc_spi_stop_multiwrite_block+0x1e>
		return true; // Single block write
   19bdc:	2301      	movs	r3, #1
   19bde:	e7e2      	b.n	19ba6 <sd_mmc_spi_stop_multiwrite_block+0x1e>
   19be0:	20003c98 	.word	0x20003c98
   19be4:	20003c90 	.word	0x20003c90
   19be8:	20003ca0 	.word	0x20003ca0
   19bec:	00024055 	.word	0x00024055
   19bf0:	20003c54 	.word	0x20003c54
   19bf4:	0001e2f9 	.word	0x0001e2f9
   19bf8:	00019b25 	.word	0x00019b25
   19bfc:	20003c97 	.word	0x20003c97

00019c00 <sd_mmc_spi_start_read_block>:
{
   19c00:	b5f0      	push	{r4, r5, r6, r7, lr}
   19c02:	b083      	sub	sp, #12
	token = 0;
   19c04:	2200      	movs	r2, #0
   19c06:	466b      	mov	r3, sp
   19c08:	71da      	strb	r2, [r3, #7]
   19c0a:	4c14      	ldr	r4, [pc, #80]	; (19c5c <sd_mmc_spi_start_read_block+0x5c>)
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
   19c0c:	466b      	mov	r3, sp
   19c0e:	1ddd      	adds	r5, r3, #7
   19c10:	4e13      	ldr	r6, [pc, #76]	; (19c60 <sd_mmc_spi_start_read_block+0x60>)
   19c12:	4f14      	ldr	r7, [pc, #80]	; (19c64 <sd_mmc_spi_start_read_block+0x64>)
   19c14:	23ff      	movs	r3, #255	; 0xff
   19c16:	2201      	movs	r2, #1
   19c18:	0029      	movs	r1, r5
   19c1a:	0030      	movs	r0, r6
   19c1c:	47b8      	blx	r7
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
   19c1e:	782b      	ldrb	r3, [r5, #0]
   19c20:	220f      	movs	r2, #15
   19c22:	0019      	movs	r1, r3
   19c24:	4391      	bics	r1, r2
   19c26:	1e0a      	subs	r2, r1, #0
   19c28:	d009      	beq.n	19c3e <sd_mmc_spi_start_read_block+0x3e>
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
   19c2a:	2bfe      	cmp	r3, #254	; 0xfe
   19c2c:	d013      	beq.n	19c56 <sd_mmc_spi_start_read_block+0x56>
   19c2e:	3c01      	subs	r4, #1
		if (i-- == 0) {
   19c30:	2c00      	cmp	r4, #0
   19c32:	d1ef      	bne.n	19c14 <sd_mmc_spi_start_read_block+0x14>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
   19c34:	2204      	movs	r2, #4
   19c36:	4b0c      	ldr	r3, [pc, #48]	; (19c68 <sd_mmc_spi_start_read_block+0x68>)
   19c38:	701a      	strb	r2, [r3, #0]
			return false;
   19c3a:	2000      	movs	r0, #0
   19c3c:	e00c      	b.n	19c58 <sd_mmc_spi_start_read_block+0x58>
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
   19c3e:	075b      	lsls	r3, r3, #29
   19c40:	d004      	beq.n	19c4c <sd_mmc_spi_start_read_block+0x4c>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
   19c42:	3207      	adds	r2, #7
   19c44:	4b08      	ldr	r3, [pc, #32]	; (19c68 <sd_mmc_spi_start_read_block+0x68>)
   19c46:	701a      	strb	r2, [r3, #0]
			return false;
   19c48:	2000      	movs	r0, #0
   19c4a:	e005      	b.n	19c58 <sd_mmc_spi_start_read_block+0x58>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
   19c4c:	220b      	movs	r2, #11
   19c4e:	4b06      	ldr	r3, [pc, #24]	; (19c68 <sd_mmc_spi_start_read_block+0x68>)
   19c50:	701a      	strb	r2, [r3, #0]
			return false;
   19c52:	2000      	movs	r0, #0
   19c54:	e000      	b.n	19c58 <sd_mmc_spi_start_read_block+0x58>
	return true;
   19c56:	2001      	movs	r0, #1
}
   19c58:	b003      	add	sp, #12
   19c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19c5c:	0007a120 	.word	0x0007a120
   19c60:	20003c54 	.word	0x20003c54
   19c64:	0001e131 	.word	0x0001e131
   19c68:	20003c97 	.word	0x20003c97

00019c6c <sd_mmc_spi_stop_write_block>:
{
   19c6c:	b530      	push	{r4, r5, lr}
   19c6e:	b083      	sub	sp, #12
	crc = 0xFFFF; /// CRC is disabled in SPI mode
   19c70:	a901      	add	r1, sp, #4
   19c72:	2301      	movs	r3, #1
   19c74:	425b      	negs	r3, r3
   19c76:	800b      	strh	r3, [r1, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
   19c78:	4d14      	ldr	r5, [pc, #80]	; (19ccc <sd_mmc_spi_stop_write_block+0x60>)
   19c7a:	2202      	movs	r2, #2
   19c7c:	0028      	movs	r0, r5
   19c7e:	4b14      	ldr	r3, [pc, #80]	; (19cd0 <sd_mmc_spi_stop_write_block+0x64>)
   19c80:	4798      	blx	r3
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
   19c82:	466b      	mov	r3, sp
   19c84:	1ddc      	adds	r4, r3, #7
   19c86:	23ff      	movs	r3, #255	; 0xff
   19c88:	2201      	movs	r2, #1
   19c8a:	0021      	movs	r1, r4
   19c8c:	0028      	movs	r0, r5
   19c8e:	4d11      	ldr	r5, [pc, #68]	; (19cd4 <sd_mmc_spi_stop_write_block+0x68>)
   19c90:	47a8      	blx	r5
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
   19c92:	7822      	ldrb	r2, [r4, #0]
   19c94:	2311      	movs	r3, #17
   19c96:	4013      	ands	r3, r2
   19c98:	2b01      	cmp	r3, #1
   19c9a:	d005      	beq.n	19ca8 <sd_mmc_spi_stop_write_block+0x3c>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   19c9c:	2201      	movs	r2, #1
   19c9e:	4b0e      	ldr	r3, [pc, #56]	; (19cd8 <sd_mmc_spi_stop_write_block+0x6c>)
   19ca0:	701a      	strb	r2, [r3, #0]
		return false;
   19ca2:	2000      	movs	r0, #0
}
   19ca4:	b003      	add	sp, #12
   19ca6:	bd30      	pop	{r4, r5, pc}
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
   19ca8:	231e      	movs	r3, #30
   19caa:	401a      	ands	r2, r3
   19cac:	2a04      	cmp	r2, #4
   19cae:	d00b      	beq.n	19cc8 <sd_mmc_spi_stop_write_block+0x5c>
   19cb0:	2a0a      	cmp	r2, #10
   19cb2:	d104      	bne.n	19cbe <sd_mmc_spi_stop_write_block+0x52>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
   19cb4:	3a02      	subs	r2, #2
   19cb6:	4b08      	ldr	r3, [pc, #32]	; (19cd8 <sd_mmc_spi_stop_write_block+0x6c>)
   19cb8:	701a      	strb	r2, [r3, #0]
		return false;
   19cba:	2000      	movs	r0, #0
   19cbc:	e7f2      	b.n	19ca4 <sd_mmc_spi_stop_write_block+0x38>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
   19cbe:	220a      	movs	r2, #10
   19cc0:	4b05      	ldr	r3, [pc, #20]	; (19cd8 <sd_mmc_spi_stop_write_block+0x6c>)
   19cc2:	701a      	strb	r2, [r3, #0]
		return false;
   19cc4:	2000      	movs	r0, #0
   19cc6:	e7ed      	b.n	19ca4 <sd_mmc_spi_stop_write_block+0x38>
	return true;
   19cc8:	2001      	movs	r0, #1
   19cca:	e7eb      	b.n	19ca4 <sd_mmc_spi_stop_write_block+0x38>
   19ccc:	20003c54 	.word	0x20003c54
   19cd0:	0001e2f9 	.word	0x0001e2f9
   19cd4:	0001e131 	.word	0x0001e131
   19cd8:	20003c97 	.word	0x20003c97

00019cdc <sd_mmc_spi_select_device>:
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
}

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
   19cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19cde:	0007      	movs	r7, r0
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   19ce0:	2200      	movs	r2, #0
   19ce2:	4b0d      	ldr	r3, [pc, #52]	; (19d18 <sd_mmc_spi_select_device+0x3c>)
   19ce4:	701a      	strb	r2, [r3, #0]
   19ce6:	000c      	movs	r4, r1
   19ce8:	4b0c      	ldr	r3, [pc, #48]	; (19d1c <sd_mmc_spi_select_device+0x40>)
   19cea:	4299      	cmp	r1, r3
   19cec:	d900      	bls.n	19cf0 <sd_mmc_spi_select_device+0x14>
   19cee:	001c      	movs	r4, r3
#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
		clock = SD_MMC_SPI_MAX_CLOCK;
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   19cf0:	4d0b      	ldr	r5, [pc, #44]	; (19d20 <sd_mmc_spi_select_device+0x44>)
   19cf2:	4e0c      	ldr	r6, [pc, #48]	; (19d24 <sd_mmc_spi_select_device+0x48>)
   19cf4:	e001      	b.n	19cfa <sd_mmc_spi_select_device+0x1e>
		clock -= clock / 8;
   19cf6:	08e3      	lsrs	r3, r4, #3
   19cf8:	1ae4      	subs	r4, r4, r3
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   19cfa:	0021      	movs	r1, r4
   19cfc:	0028      	movs	r0, r5
   19cfe:	47b0      	blx	r6
   19d00:	2817      	cmp	r0, #23
   19d02:	d0f8      	beq.n	19cf6 <sd_mmc_spi_select_device+0x1a>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
   19d04:	0079      	lsls	r1, r7, #1
   19d06:	19cf      	adds	r7, r1, r7
   19d08:	4907      	ldr	r1, [pc, #28]	; (19d28 <sd_mmc_spi_select_device+0x4c>)
   19d0a:	19c9      	adds	r1, r1, r7
   19d0c:	2201      	movs	r2, #1
   19d0e:	4804      	ldr	r0, [pc, #16]	; (19d20 <sd_mmc_spi_select_device+0x44>)
   19d10:	4b06      	ldr	r3, [pc, #24]	; (19d2c <sd_mmc_spi_select_device+0x50>)
   19d12:	4798      	blx	r3
}
   19d14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19d16:	46c0      	nop			; (mov r8, r8)
   19d18:	20003c97 	.word	0x20003c97
   19d1c:	00989680 	.word	0x00989680
   19d20:	20003c54 	.word	0x20003c54
   19d24:	0001dea1 	.word	0x0001dea1
   19d28:	20003c94 	.word	0x20003c94
   19d2c:	0001e205 	.word	0x0001e205

00019d30 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
   19d30:	b510      	push	{r4, lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   19d32:	2200      	movs	r2, #0
   19d34:	4b04      	ldr	r3, [pc, #16]	; (19d48 <sd_mmc_spi_deselect_device+0x18>)
   19d36:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
   19d38:	0041      	lsls	r1, r0, #1
   19d3a:	1808      	adds	r0, r1, r0
   19d3c:	4903      	ldr	r1, [pc, #12]	; (19d4c <sd_mmc_spi_deselect_device+0x1c>)
   19d3e:	1809      	adds	r1, r1, r0
   19d40:	4803      	ldr	r0, [pc, #12]	; (19d50 <sd_mmc_spi_deselect_device+0x20>)
   19d42:	4b04      	ldr	r3, [pc, #16]	; (19d54 <sd_mmc_spi_deselect_device+0x24>)
   19d44:	4798      	blx	r3
}
   19d46:	bd10      	pop	{r4, pc}
   19d48:	20003c97 	.word	0x20003c97
   19d4c:	20003c94 	.word	0x20003c94
   19d50:	20003c54 	.word	0x20003c54
   19d54:	0001e205 	.word	0x0001e205

00019d58 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
   19d58:	b570      	push	{r4, r5, r6, lr}
   19d5a:	b082      	sub	sp, #8
	uint8_t i;
	uint8_t dummy = 0xFF;
   19d5c:	22ff      	movs	r2, #255	; 0xff
   19d5e:	466b      	mov	r3, sp
   19d60:	71da      	strb	r2, [r3, #7]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   19d62:	2200      	movs	r2, #0
   19d64:	4b07      	ldr	r3, [pc, #28]	; (19d84 <sd_mmc_spi_send_clock+0x2c>)
   19d66:	701a      	strb	r2, [r3, #0]
   19d68:	240a      	movs	r4, #10
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
   19d6a:	4e07      	ldr	r6, [pc, #28]	; (19d88 <sd_mmc_spi_send_clock+0x30>)
   19d6c:	4d07      	ldr	r5, [pc, #28]	; (19d8c <sd_mmc_spi_send_clock+0x34>)
   19d6e:	2201      	movs	r2, #1
   19d70:	466b      	mov	r3, sp
   19d72:	1dd9      	adds	r1, r3, #7
   19d74:	0030      	movs	r0, r6
   19d76:	47a8      	blx	r5
   19d78:	3c01      	subs	r4, #1
   19d7a:	b2e4      	uxtb	r4, r4
	for (i = 0; i < 10; i++) {
   19d7c:	2c00      	cmp	r4, #0
   19d7e:	d1f6      	bne.n	19d6e <sd_mmc_spi_send_clock+0x16>
	}
}
   19d80:	b002      	add	sp, #8
   19d82:	bd70      	pop	{r4, r5, r6, pc}
   19d84:	20003c97 	.word	0x20003c97
   19d88:	20003c54 	.word	0x20003c54
   19d8c:	0001e2f9 	.word	0x0001e2f9

00019d90 <sd_mmc_spi_adtc_start>:
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
}

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
   19d90:	b5f0      	push	{r4, r5, r6, r7, lr}
   19d92:	46c6      	mov	lr, r8
   19d94:	b500      	push	{lr}
   19d96:	b086      	sub	sp, #24
   19d98:	4680      	mov	r8, r0
   19d9a:	9200      	str	r2, [sp, #0]
   19d9c:	9301      	str	r3, [sp, #4]
	uint8_t dummy = 0xFF;
   19d9e:	22ff      	movs	r2, #255	; 0xff
   19da0:	230f      	movs	r3, #15
   19da2:	a802      	add	r0, sp, #8
   19da4:	4684      	mov	ip, r0
   19da6:	4463      	add	r3, ip
   19da8:	701a      	strb	r2, [r3, #0]
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   19daa:	2200      	movs	r2, #0
   19dac:	4b53      	ldr	r3, [pc, #332]	; (19efc <sd_mmc_spi_adtc_start+0x16c>)
   19dae:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
   19db0:	ab04      	add	r3, sp, #16
   19db2:	323f      	adds	r2, #63	; 0x3f
   19db4:	4640      	mov	r0, r8
   19db6:	4002      	ands	r2, r0
   19db8:	2040      	movs	r0, #64	; 0x40
   19dba:	4302      	orrs	r2, r0
   19dbc:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
   19dbe:	0e0a      	lsrs	r2, r1, #24
   19dc0:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
   19dc2:	0c0a      	lsrs	r2, r1, #16
   19dc4:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
   19dc6:	0a0a      	lsrs	r2, r1, #8
   19dc8:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
   19dca:	7119      	strb	r1, [r3, #4]
   19dcc:	2700      	movs	r7, #0
	crc = 0;
   19dce:	2300      	movs	r3, #0
		value = *buf++;
   19dd0:	a904      	add	r1, sp, #16
   19dd2:	2208      	movs	r2, #8
				crc ^= 0x09;
   19dd4:	2409      	movs	r4, #9
   19dd6:	e011      	b.n	19dfc <sd_mmc_spi_adtc_start+0x6c>
			value <<= 1;
   19dd8:	0076      	lsls	r6, r6, #1
   19dda:	b2f6      	uxtb	r6, r6
   19ddc:	3801      	subs	r0, #1
   19dde:	b2c0      	uxtb	r0, r0
		for (i = 0; i < 8; i++) {
   19de0:	2800      	cmp	r0, #0
   19de2:	d008      	beq.n	19df6 <sd_mmc_spi_adtc_start+0x66>
			crc <<= 1;
   19de4:	005b      	lsls	r3, r3, #1
   19de6:	b2db      	uxtb	r3, r3
			if ((value & 0x80) ^ (crc & 0x80)) {
   19de8:	001d      	movs	r5, r3
   19dea:	4075      	eors	r5, r6
   19dec:	062d      	lsls	r5, r5, #24
   19dee:	d5f3      	bpl.n	19dd8 <sd_mmc_spi_adtc_start+0x48>
				crc ^= 0x09;
   19df0:	4063      	eors	r3, r4
   19df2:	b2db      	uxtb	r3, r3
   19df4:	e7f0      	b.n	19dd8 <sd_mmc_spi_adtc_start+0x48>
   19df6:	3701      	adds	r7, #1
	while (size--) {
   19df8:	2f05      	cmp	r7, #5
   19dfa:	d002      	beq.n	19e02 <sd_mmc_spi_adtc_start+0x72>
		value = *buf++;
   19dfc:	5c7e      	ldrb	r6, [r7, r1]
   19dfe:	0010      	movs	r0, r2
   19e00:	e7f0      	b.n	19de4 <sd_mmc_spi_adtc_start+0x54>
	crc = (crc << 1) | 1;
   19e02:	005b      	lsls	r3, r3, #1
   19e04:	2201      	movs	r2, #1
   19e06:	4313      	orrs	r3, r2
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
   19e08:	ac04      	add	r4, sp, #16
   19e0a:	7163      	strb	r3, [r4, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
   19e0c:	4e3c      	ldr	r6, [pc, #240]	; (19f00 <sd_mmc_spi_adtc_start+0x170>)
   19e0e:	2201      	movs	r2, #1
   19e10:	210f      	movs	r1, #15
   19e12:	ab02      	add	r3, sp, #8
   19e14:	469c      	mov	ip, r3
   19e16:	4461      	add	r1, ip
   19e18:	0030      	movs	r0, r6
   19e1a:	4f3a      	ldr	r7, [pc, #232]	; (19f04 <sd_mmc_spi_adtc_start+0x174>)
   19e1c:	47b8      	blx	r7
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
   19e1e:	2206      	movs	r2, #6
   19e20:	0021      	movs	r1, r4
   19e22:	0030      	movs	r0, r6
   19e24:	47b8      	blx	r7

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
   19e26:	ab02      	add	r3, sp, #8
   19e28:	1dd9      	adds	r1, r3, #7
   19e2a:	23ff      	movs	r3, #255	; 0xff
   19e2c:	700b      	strb	r3, [r1, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   19e2e:	2201      	movs	r2, #1
   19e30:	0030      	movs	r0, r6
   19e32:	4e35      	ldr	r6, [pc, #212]	; (19f08 <sd_mmc_spi_adtc_start+0x178>)
   19e34:	47b0      	blx	r6
   19e36:	2407      	movs	r4, #7
			dummy2);
	ncr_timeout = 7;
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   19e38:	ab02      	add	r3, sp, #8
   19e3a:	1dde      	adds	r6, r3, #7
   19e3c:	4f30      	ldr	r7, [pc, #192]	; (19f00 <sd_mmc_spi_adtc_start+0x170>)
   19e3e:	4d32      	ldr	r5, [pc, #200]	; (19f08 <sd_mmc_spi_adtc_start+0x178>)
   19e40:	23ff      	movs	r3, #255	; 0xff
   19e42:	2201      	movs	r2, #1
   19e44:	0031      	movs	r1, r6
   19e46:	0038      	movs	r0, r7
   19e48:	47a8      	blx	r5
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
   19e4a:	7833      	ldrb	r3, [r6, #0]
   19e4c:	b25a      	sxtb	r2, r3
   19e4e:	2a00      	cmp	r2, #0
   19e50:	da0b      	bge.n	19e6a <sd_mmc_spi_adtc_start+0xda>
   19e52:	3c01      	subs	r4, #1
   19e54:	b2e4      	uxtb	r4, r4
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
   19e56:	2c00      	cmp	r4, #0
   19e58:	d1f2      	bne.n	19e40 <sd_mmc_spi_adtc_start+0xb0>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
   19e5a:	2202      	movs	r2, #2
   19e5c:	4b27      	ldr	r3, [pc, #156]	; (19efc <sd_mmc_spi_adtc_start+0x16c>)
   19e5e:	701a      	strb	r2, [r3, #0]
			return false;
   19e60:	2000      	movs	r0, #0

	sd_mmc_spi_block_size = block_size;
	sd_mmc_spi_nb_block = nb_block;
	sd_mmc_spi_transfert_pos = 0;
	return true; // Command complete
}
   19e62:	b006      	add	sp, #24
   19e64:	bc04      	pop	{r2}
   19e66:	4690      	mov	r8, r2
   19e68:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_spi_response_32 = r1;
   19e6a:	4a28      	ldr	r2, [pc, #160]	; (19f0c <sd_mmc_spi_adtc_start+0x17c>)
   19e6c:	6013      	str	r3, [r2, #0]
	if (r1 & R1_SPI_COM_CRC) {
   19e6e:	071a      	lsls	r2, r3, #28
   19e70:	d41a      	bmi.n	19ea8 <sd_mmc_spi_adtc_start+0x118>
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
   19e72:	075a      	lsls	r2, r3, #29
   19e74:	d41d      	bmi.n	19eb2 <sd_mmc_spi_adtc_start+0x122>
	if (r1 & ~R1_SPI_IDLE) {
   19e76:	2201      	movs	r2, #1
   19e78:	4393      	bics	r3, r2
   19e7a:	d11f      	bne.n	19ebc <sd_mmc_spi_adtc_start+0x12c>
	if (cmd & SDMMC_RESP_BUSY) {
   19e7c:	4643      	mov	r3, r8
   19e7e:	049b      	lsls	r3, r3, #18
   19e80:	d420      	bmi.n	19ec4 <sd_mmc_spi_adtc_start+0x134>
	if (cmd & SDMMC_RESP_8) {
   19e82:	4643      	mov	r3, r8
   19e84:	059b      	lsls	r3, r3, #22
   19e86:	d425      	bmi.n	19ed4 <sd_mmc_spi_adtc_start+0x144>
	if (cmd & SDMMC_RESP_32) {
   19e88:	4643      	mov	r3, r8
   19e8a:	055b      	lsls	r3, r3, #21
   19e8c:	d42b      	bmi.n	19ee6 <sd_mmc_spi_adtc_start+0x156>
	sd_mmc_spi_block_size = block_size;
   19e8e:	4b20      	ldr	r3, [pc, #128]	; (19f10 <sd_mmc_spi_adtc_start+0x180>)
   19e90:	466a      	mov	r2, sp
   19e92:	8812      	ldrh	r2, [r2, #0]
   19e94:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
   19e96:	4b1f      	ldr	r3, [pc, #124]	; (19f14 <sd_mmc_spi_adtc_start+0x184>)
   19e98:	466a      	mov	r2, sp
   19e9a:	8892      	ldrh	r2, [r2, #4]
   19e9c:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
   19e9e:	2200      	movs	r2, #0
   19ea0:	4b1d      	ldr	r3, [pc, #116]	; (19f18 <sd_mmc_spi_adtc_start+0x188>)
   19ea2:	601a      	str	r2, [r3, #0]
	return true; // Command complete
   19ea4:	2001      	movs	r0, #1
   19ea6:	e7dc      	b.n	19e62 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
   19ea8:	2206      	movs	r2, #6
   19eaa:	4b14      	ldr	r3, [pc, #80]	; (19efc <sd_mmc_spi_adtc_start+0x16c>)
   19eac:	701a      	strb	r2, [r3, #0]
		return false;
   19eae:	2000      	movs	r0, #0
   19eb0:	e7d7      	b.n	19e62 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
   19eb2:	2209      	movs	r2, #9
   19eb4:	4b11      	ldr	r3, [pc, #68]	; (19efc <sd_mmc_spi_adtc_start+0x16c>)
   19eb6:	701a      	strb	r2, [r3, #0]
		return false;
   19eb8:	2000      	movs	r0, #0
   19eba:	e7d2      	b.n	19e62 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   19ebc:	4b0f      	ldr	r3, [pc, #60]	; (19efc <sd_mmc_spi_adtc_start+0x16c>)
   19ebe:	701a      	strb	r2, [r3, #0]
		return false;
   19ec0:	2000      	movs	r0, #0
   19ec2:	e7ce      	b.n	19e62 <sd_mmc_spi_adtc_start+0xd2>
		if (!sd_mmc_spi_wait_busy()) {
   19ec4:	4b15      	ldr	r3, [pc, #84]	; (19f1c <sd_mmc_spi_adtc_start+0x18c>)
   19ec6:	4798      	blx	r3
   19ec8:	2800      	cmp	r0, #0
   19eca:	d1da      	bne.n	19e82 <sd_mmc_spi_adtc_start+0xf2>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
   19ecc:	2203      	movs	r2, #3
   19ece:	4b0b      	ldr	r3, [pc, #44]	; (19efc <sd_mmc_spi_adtc_start+0x16c>)
   19ed0:	701a      	strb	r2, [r3, #0]
			return false;
   19ed2:	e7c6      	b.n	19e62 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_response_32 = 0;
   19ed4:	490d      	ldr	r1, [pc, #52]	; (19f0c <sd_mmc_spi_adtc_start+0x17c>)
   19ed6:	2300      	movs	r3, #0
   19ed8:	600b      	str	r3, [r1, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
   19eda:	33ff      	adds	r3, #255	; 0xff
   19edc:	2201      	movs	r2, #1
   19ede:	4808      	ldr	r0, [pc, #32]	; (19f00 <sd_mmc_spi_adtc_start+0x170>)
   19ee0:	4e09      	ldr	r6, [pc, #36]	; (19f08 <sd_mmc_spi_adtc_start+0x178>)
   19ee2:	47b0      	blx	r6
   19ee4:	e7d0      	b.n	19e88 <sd_mmc_spi_adtc_start+0xf8>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
   19ee6:	4e09      	ldr	r6, [pc, #36]	; (19f0c <sd_mmc_spi_adtc_start+0x17c>)
   19ee8:	23ff      	movs	r3, #255	; 0xff
   19eea:	2204      	movs	r2, #4
   19eec:	0031      	movs	r1, r6
   19eee:	4804      	ldr	r0, [pc, #16]	; (19f00 <sd_mmc_spi_adtc_start+0x170>)
   19ef0:	4f05      	ldr	r7, [pc, #20]	; (19f08 <sd_mmc_spi_adtc_start+0x178>)
   19ef2:	47b8      	blx	r7
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
   19ef4:	6833      	ldr	r3, [r6, #0]
   19ef6:	ba1b      	rev	r3, r3
   19ef8:	6033      	str	r3, [r6, #0]
   19efa:	e7c8      	b.n	19e8e <sd_mmc_spi_adtc_start+0xfe>
   19efc:	20003c97 	.word	0x20003c97
   19f00:	20003c54 	.word	0x20003c54
   19f04:	0001e2f9 	.word	0x0001e2f9
   19f08:	0001e131 	.word	0x0001e131
   19f0c:	20003c9c 	.word	0x20003c9c
   19f10:	20003c90 	.word	0x20003c90
   19f14:	20003c98 	.word	0x20003c98
   19f18:	20003ca0 	.word	0x20003ca0
   19f1c:	00019b25 	.word	0x00019b25

00019f20 <sd_mmc_spi_send_cmd>:
{
   19f20:	b510      	push	{r4, lr}
   19f22:	b082      	sub	sp, #8
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
   19f24:	2300      	movs	r3, #0
   19f26:	9300      	str	r3, [sp, #0]
   19f28:	2200      	movs	r2, #0
   19f2a:	4c02      	ldr	r4, [pc, #8]	; (19f34 <sd_mmc_spi_send_cmd+0x14>)
   19f2c:	47a0      	blx	r4
}
   19f2e:	b002      	add	sp, #8
   19f30:	bd10      	pop	{r4, pc}
   19f32:	46c0      	nop			; (mov r8, r8)
   19f34:	00019d91 	.word	0x00019d91

00019f38 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
	return sd_mmc_spi_response_32;
   19f38:	4b01      	ldr	r3, [pc, #4]	; (19f40 <sd_mmc_spi_get_response+0x8>)
   19f3a:	6818      	ldr	r0, [r3, #0]
}
   19f3c:	4770      	bx	lr
   19f3e:	46c0      	nop			; (mov r8, r8)
   19f40:	20003c9c 	.word	0x20003c9c

00019f44 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
   19f44:	b510      	push	{r4, lr}
   19f46:	b084      	sub	sp, #16
   19f48:	9001      	str	r0, [sp, #4]
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   19f4a:	2200      	movs	r2, #0
   19f4c:	4b14      	ldr	r3, [pc, #80]	; (19fa0 <sd_mmc_spi_read_word+0x5c>)
   19f4e:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   19f50:	4b14      	ldr	r3, [pc, #80]	; (19fa4 <sd_mmc_spi_read_word+0x60>)
   19f52:	8819      	ldrh	r1, [r3, #0]
   19f54:	4b14      	ldr	r3, [pc, #80]	; (19fa8 <sd_mmc_spi_read_word+0x64>)
   19f56:	6818      	ldr	r0, [r3, #0]
   19f58:	4b14      	ldr	r3, [pc, #80]	; (19fac <sd_mmc_spi_read_word+0x68>)
   19f5a:	4798      	blx	r3
   19f5c:	2900      	cmp	r1, #0
   19f5e:	d103      	bne.n	19f68 <sd_mmc_spi_read_word+0x24>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
   19f60:	4b13      	ldr	r3, [pc, #76]	; (19fb0 <sd_mmc_spi_read_word+0x6c>)
   19f62:	4798      	blx	r3
   19f64:	2800      	cmp	r0, #0
   19f66:	d010      	beq.n	19f8a <sd_mmc_spi_read_word+0x46>
			return false;
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
   19f68:	23ff      	movs	r3, #255	; 0xff
   19f6a:	2204      	movs	r2, #4
   19f6c:	a901      	add	r1, sp, #4
   19f6e:	4811      	ldr	r0, [pc, #68]	; (19fb4 <sd_mmc_spi_read_word+0x70>)
   19f70:	4c11      	ldr	r4, [pc, #68]	; (19fb8 <sd_mmc_spi_read_word+0x74>)
   19f72:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
	sd_mmc_spi_transfert_pos += 4;
   19f74:	4b0c      	ldr	r3, [pc, #48]	; (19fa8 <sd_mmc_spi_read_word+0x64>)
   19f76:	681a      	ldr	r2, [r3, #0]
   19f78:	1d10      	adds	r0, r2, #4
   19f7a:	6018      	str	r0, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   19f7c:	4b09      	ldr	r3, [pc, #36]	; (19fa4 <sd_mmc_spi_read_word+0x60>)
   19f7e:	8819      	ldrh	r1, [r3, #0]
   19f80:	4b0a      	ldr	r3, [pc, #40]	; (19fac <sd_mmc_spi_read_word+0x68>)
   19f82:	4798      	blx	r3
		// End of block
		sd_mmc_spi_stop_read_block();
	}
	return true;
   19f84:	2001      	movs	r0, #1
	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   19f86:	2900      	cmp	r1, #0
   19f88:	d001      	beq.n	19f8e <sd_mmc_spi_read_word+0x4a>
}
   19f8a:	b004      	add	sp, #16
   19f8c:	bd10      	pop	{r4, pc}
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
   19f8e:	23ff      	movs	r3, #255	; 0xff
   19f90:	2202      	movs	r2, #2
   19f92:	a903      	add	r1, sp, #12
   19f94:	4807      	ldr	r0, [pc, #28]	; (19fb4 <sd_mmc_spi_read_word+0x70>)
   19f96:	4c08      	ldr	r4, [pc, #32]	; (19fb8 <sd_mmc_spi_read_word+0x74>)
   19f98:	47a0      	blx	r4
	return true;
   19f9a:	2001      	movs	r0, #1
   19f9c:	e7f5      	b.n	19f8a <sd_mmc_spi_read_word+0x46>
   19f9e:	46c0      	nop			; (mov r8, r8)
   19fa0:	20003c97 	.word	0x20003c97
   19fa4:	20003c90 	.word	0x20003c90
   19fa8:	20003ca0 	.word	0x20003ca0
   19fac:	00024161 	.word	0x00024161
   19fb0:	00019c01 	.word	0x00019c01
   19fb4:	20003c54 	.word	0x20003c54
   19fb8:	0001e131 	.word	0x0001e131

00019fbc <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
   19fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
   19fbe:	46de      	mov	lr, fp
   19fc0:	4657      	mov	r7, sl
   19fc2:	4646      	mov	r6, r8
   19fc4:	b5c0      	push	{r6, r7, lr}
   19fc6:	b082      	sub	sp, #8
   19fc8:	4683      	mov	fp, r0
	uint32_t pos;
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   19fca:	2200      	movs	r2, #0
   19fcc:	4b17      	ldr	r3, [pc, #92]	; (1a02c <sd_mmc_spi_start_read_blocks+0x70>)
   19fce:	701a      	strb	r2, [r3, #0]
	pos = 0;
	while (nb_block--) {
   19fd0:	1e4c      	subs	r4, r1, #1
   19fd2:	b2a4      	uxth	r4, r4
   19fd4:	2900      	cmp	r1, #0
   19fd6:	d026      	beq.n	1a026 <sd_mmc_spi_start_read_blocks+0x6a>
   19fd8:	2600      	movs	r6, #0
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
   19fda:	4b15      	ldr	r3, [pc, #84]	; (1a030 <sd_mmc_spi_start_read_blocks+0x74>)
   19fdc:	469a      	mov	sl, r3
			return false;
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
   19fde:	4f15      	ldr	r7, [pc, #84]	; (1a034 <sd_mmc_spi_start_read_blocks+0x78>)
		if (!sd_mmc_spi_start_read_block()) {
   19fe0:	47d0      	blx	sl
   19fe2:	4680      	mov	r8, r0
   19fe4:	2800      	cmp	r0, #0
   19fe6:	d017      	beq.n	1a018 <sd_mmc_spi_start_read_blocks+0x5c>
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
   19fe8:	883a      	ldrh	r2, [r7, #0]
   19fea:	465b      	mov	r3, fp
   19fec:	1999      	adds	r1, r3, r6
   19fee:	23ff      	movs	r3, #255	; 0xff
   19ff0:	4811      	ldr	r0, [pc, #68]	; (1a038 <sd_mmc_spi_start_read_blocks+0x7c>)
   19ff2:	4d12      	ldr	r5, [pc, #72]	; (1a03c <sd_mmc_spi_start_read_blocks+0x80>)
   19ff4:	47a8      	blx	r5
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
   19ff6:	883b      	ldrh	r3, [r7, #0]
   19ff8:	18f6      	adds	r6, r6, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   19ffa:	4a11      	ldr	r2, [pc, #68]	; (1a040 <sd_mmc_spi_start_read_blocks+0x84>)
   19ffc:	6811      	ldr	r1, [r2, #0]
   19ffe:	468c      	mov	ip, r1
   1a000:	4463      	add	r3, ip
   1a002:	6013      	str	r3, [r2, #0]
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
   1a004:	23ff      	movs	r3, #255	; 0xff
   1a006:	2202      	movs	r2, #2
   1a008:	a901      	add	r1, sp, #4
   1a00a:	480b      	ldr	r0, [pc, #44]	; (1a038 <sd_mmc_spi_start_read_blocks+0x7c>)
   1a00c:	47a8      	blx	r5
	while (nb_block--) {
   1a00e:	3c01      	subs	r4, #1
   1a010:	b2a4      	uxth	r4, r4
   1a012:	4b0c      	ldr	r3, [pc, #48]	; (1a044 <sd_mmc_spi_start_read_blocks+0x88>)
   1a014:	429c      	cmp	r4, r3
   1a016:	d1e3      	bne.n	19fe0 <sd_mmc_spi_start_read_blocks+0x24>

		sd_mmc_spi_stop_read_block();
	}
	return true;
}
   1a018:	4640      	mov	r0, r8
   1a01a:	b002      	add	sp, #8
   1a01c:	bc1c      	pop	{r2, r3, r4}
   1a01e:	4690      	mov	r8, r2
   1a020:	469a      	mov	sl, r3
   1a022:	46a3      	mov	fp, r4
   1a024:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return true;
   1a026:	2301      	movs	r3, #1
   1a028:	4698      	mov	r8, r3
   1a02a:	e7f5      	b.n	1a018 <sd_mmc_spi_start_read_blocks+0x5c>
   1a02c:	20003c97 	.word	0x20003c97
   1a030:	00019c01 	.word	0x00019c01
   1a034:	20003c90 	.word	0x20003c90
   1a038:	20003c54 	.word	0x20003c54
   1a03c:	0001e131 	.word	0x0001e131
   1a040:	20003ca0 	.word	0x20003ca0
   1a044:	0000ffff 	.word	0x0000ffff

0001a048 <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
	return true;
}
   1a048:	2001      	movs	r0, #1
   1a04a:	4770      	bx	lr

0001a04c <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
   1a04c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a04e:	46c6      	mov	lr, r8
   1a050:	b500      	push	{lr}
   1a052:	4680      	mov	r8, r0
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1a054:	2200      	movs	r2, #0
   1a056:	4b15      	ldr	r3, [pc, #84]	; (1a0ac <sd_mmc_spi_start_write_blocks+0x60>)
   1a058:	701a      	strb	r2, [r3, #0]
	pos = 0;
   1a05a:	2500      	movs	r5, #0
	while (nb_block--) {
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
   1a05c:	4f14      	ldr	r7, [pc, #80]	; (1a0b0 <sd_mmc_spi_start_write_blocks+0x64>)

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
   1a05e:	4e15      	ldr	r6, [pc, #84]	; (1a0b4 <sd_mmc_spi_start_write_blocks+0x68>)
	while (nb_block--) {
   1a060:	e000      	b.n	1a064 <sd_mmc_spi_start_write_blocks+0x18>
{
   1a062:	0021      	movs	r1, r4
	while (nb_block--) {
   1a064:	1e4c      	subs	r4, r1, #1
   1a066:	b2a4      	uxth	r4, r4
   1a068:	2900      	cmp	r1, #0
   1a06a:	d01b      	beq.n	1a0a4 <sd_mmc_spi_start_write_blocks+0x58>
		sd_mmc_spi_start_write_block();
   1a06c:	47b8      	blx	r7
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
   1a06e:	8832      	ldrh	r2, [r6, #0]
   1a070:	4643      	mov	r3, r8
   1a072:	1959      	adds	r1, r3, r5
   1a074:	4810      	ldr	r0, [pc, #64]	; (1a0b8 <sd_mmc_spi_start_write_blocks+0x6c>)
   1a076:	4b11      	ldr	r3, [pc, #68]	; (1a0bc <sd_mmc_spi_start_write_blocks+0x70>)
   1a078:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
   1a07a:	8833      	ldrh	r3, [r6, #0]
   1a07c:	18ed      	adds	r5, r5, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   1a07e:	4a10      	ldr	r2, [pc, #64]	; (1a0c0 <sd_mmc_spi_start_write_blocks+0x74>)
   1a080:	6811      	ldr	r1, [r2, #0]
   1a082:	468c      	mov	ip, r1
   1a084:	4463      	add	r3, ip
   1a086:	6013      	str	r3, [r2, #0]

		if (!sd_mmc_spi_stop_write_block()) {
   1a088:	4b0e      	ldr	r3, [pc, #56]	; (1a0c4 <sd_mmc_spi_start_write_blocks+0x78>)
   1a08a:	4798      	blx	r3
   1a08c:	2800      	cmp	r0, #0
   1a08e:	d00a      	beq.n	1a0a6 <sd_mmc_spi_start_write_blocks+0x5a>
			return false;
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
   1a090:	2c00      	cmp	r4, #0
   1a092:	d0e6      	beq.n	1a062 <sd_mmc_spi_start_write_blocks+0x16>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
   1a094:	4b0c      	ldr	r3, [pc, #48]	; (1a0c8 <sd_mmc_spi_start_write_blocks+0x7c>)
   1a096:	4798      	blx	r3
   1a098:	2800      	cmp	r0, #0
   1a09a:	d1e2      	bne.n	1a062 <sd_mmc_spi_start_write_blocks+0x16>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   1a09c:	2205      	movs	r2, #5
   1a09e:	4b03      	ldr	r3, [pc, #12]	; (1a0ac <sd_mmc_spi_start_write_blocks+0x60>)
   1a0a0:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
   1a0a2:	e000      	b.n	1a0a6 <sd_mmc_spi_start_write_blocks+0x5a>
			}
		}
	}
	return true;
   1a0a4:	2001      	movs	r0, #1
}
   1a0a6:	bc04      	pop	{r2}
   1a0a8:	4690      	mov	r8, r2
   1a0aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a0ac:	20003c97 	.word	0x20003c97
   1a0b0:	00019add 	.word	0x00019add
   1a0b4:	20003c90 	.word	0x20003c90
   1a0b8:	20003c54 	.word	0x20003c54
   1a0bc:	0001e2f9 	.word	0x0001e2f9
   1a0c0:	20003ca0 	.word	0x20003ca0
   1a0c4:	00019c6d 	.word	0x00019c6d
   1a0c8:	00019b25 	.word	0x00019b25

0001a0cc <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
   1a0cc:	b510      	push	{r4, lr}
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
   1a0ce:	4b05      	ldr	r3, [pc, #20]	; (1a0e4 <sd_mmc_spi_wait_end_of_write_blocks+0x18>)
   1a0d0:	4798      	blx	r3
   1a0d2:	2800      	cmp	r0, #0
   1a0d4:	d103      	bne.n	1a0de <sd_mmc_spi_wait_end_of_write_blocks+0x12>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   1a0d6:	2205      	movs	r2, #5
   1a0d8:	4b03      	ldr	r3, [pc, #12]	; (1a0e8 <sd_mmc_spi_wait_end_of_write_blocks+0x1c>)
   1a0da:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
	}
	return sd_mmc_spi_stop_multiwrite_block();
}
   1a0dc:	bd10      	pop	{r4, pc}
	return sd_mmc_spi_stop_multiwrite_block();
   1a0de:	4b03      	ldr	r3, [pc, #12]	; (1a0ec <sd_mmc_spi_wait_end_of_write_blocks+0x20>)
   1a0e0:	4798      	blx	r3
   1a0e2:	e7fb      	b.n	1a0dc <sd_mmc_spi_wait_end_of_write_blocks+0x10>
   1a0e4:	00019b25 	.word	0x00019b25
   1a0e8:	20003c97 	.word	0x20003c97
   1a0ec:	00019b89 	.word	0x00019b89

0001a0f0 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
   1a0f0:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
   1a0f2:	2000      	movs	r0, #0
   1a0f4:	4b08      	ldr	r3, [pc, #32]	; (1a118 <delay_init+0x28>)
   1a0f6:	4798      	blx	r3
   1a0f8:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
   1a0fa:	4c08      	ldr	r4, [pc, #32]	; (1a11c <delay_init+0x2c>)
   1a0fc:	21fa      	movs	r1, #250	; 0xfa
   1a0fe:	0089      	lsls	r1, r1, #2
   1a100:	47a0      	blx	r4
   1a102:	4b07      	ldr	r3, [pc, #28]	; (1a120 <delay_init+0x30>)
   1a104:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
   1a106:	4907      	ldr	r1, [pc, #28]	; (1a124 <delay_init+0x34>)
   1a108:	0028      	movs	r0, r5
   1a10a:	47a0      	blx	r4
   1a10c:	4b06      	ldr	r3, [pc, #24]	; (1a128 <delay_init+0x38>)
   1a10e:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
   1a110:	2205      	movs	r2, #5
   1a112:	4b06      	ldr	r3, [pc, #24]	; (1a12c <delay_init+0x3c>)
   1a114:	601a      	str	r2, [r3, #0]
}
   1a116:	bd70      	pop	{r4, r5, r6, pc}
   1a118:	0001f021 	.word	0x0001f021
   1a11c:	00024055 	.word	0x00024055
   1a120:	200000d4 	.word	0x200000d4
   1a124:	000f4240 	.word	0x000f4240
   1a128:	200000d8 	.word	0x200000d8
   1a12c:	e000e010 	.word	0xe000e010

0001a130 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
   1a130:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
   1a132:	4b08      	ldr	r3, [pc, #32]	; (1a154 <delay_cycles_ms+0x24>)
   1a134:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
   1a136:	4a08      	ldr	r2, [pc, #32]	; (1a158 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
   1a138:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
   1a13a:	2180      	movs	r1, #128	; 0x80
   1a13c:	0249      	lsls	r1, r1, #9
	while (n--) {
   1a13e:	3801      	subs	r0, #1
   1a140:	d307      	bcc.n	1a152 <delay_cycles_ms+0x22>
	if (n > 0) {
   1a142:	2c00      	cmp	r4, #0
   1a144:	d0fb      	beq.n	1a13e <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
   1a146:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
   1a148:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
   1a14a:	6813      	ldr	r3, [r2, #0]
   1a14c:	420b      	tst	r3, r1
   1a14e:	d0fc      	beq.n	1a14a <delay_cycles_ms+0x1a>
   1a150:	e7f5      	b.n	1a13e <delay_cycles_ms+0xe>
	}
}
   1a152:	bd30      	pop	{r4, r5, pc}
   1a154:	200000d4 	.word	0x200000d4
   1a158:	e000e010 	.word	0xe000e010

0001a15c <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
   1a15c:	b510      	push	{r4, lr}
	if (gpfIsr) {
   1a15e:	4b03      	ldr	r3, [pc, #12]	; (1a16c <chip_isr+0x10>)
   1a160:	681b      	ldr	r3, [r3, #0]
   1a162:	2b00      	cmp	r3, #0
   1a164:	d000      	beq.n	1a168 <chip_isr+0xc>
		gpfIsr();
   1a166:	4798      	blx	r3
	}
}
   1a168:	bd10      	pop	{r4, pc}
   1a16a:	46c0      	nop			; (mov r8, r8)
   1a16c:	20003ca4 	.word	0x20003ca4

0001a170 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
   1a170:	b570      	push	{r4, r5, r6, lr}
   1a172:	b082      	sub	sp, #8
	gpfIsr = NULL;
   1a174:	2300      	movs	r3, #0
   1a176:	4a15      	ldr	r2, [pc, #84]	; (1a1cc <nm_bsp_init+0x5c>)
   1a178:	6013      	str	r3, [r2, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   1a17a:	ac01      	add	r4, sp, #4
   1a17c:	2501      	movs	r5, #1
   1a17e:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
   1a180:	70a3      	strb	r3, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   1a182:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
   1a184:	0021      	movs	r1, r4
   1a186:	201b      	movs	r0, #27
   1a188:	4e11      	ldr	r6, [pc, #68]	; (1a1d0 <nm_bsp_init+0x60>)
   1a18a:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
   1a18c:	0021      	movs	r1, r4
   1a18e:	201c      	movs	r0, #28
   1a190:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
   1a192:	0021      	movs	r1, r4
   1a194:	2028      	movs	r0, #40	; 0x28
   1a196:	47b0      	blx	r6
		port_base->OUTCLR.reg = pin_mask;
   1a198:	4b0e      	ldr	r3, [pc, #56]	; (1a1d4 <nm_bsp_init+0x64>)
   1a19a:	2280      	movs	r2, #128	; 0x80
   1a19c:	0552      	lsls	r2, r2, #21
   1a19e:	615a      	str	r2, [r3, #20]
   1a1a0:	2280      	movs	r2, #128	; 0x80
   1a1a2:	0512      	lsls	r2, r2, #20
   1a1a4:	615a      	str	r2, [r3, #20]

	/* Initialize chip IOs. */
	init_chip_pins();

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
   1a1a6:	4b0c      	ldr	r3, [pc, #48]	; (1a1d8 <nm_bsp_init+0x68>)
   1a1a8:	681b      	ldr	r3, [r3, #0]
   1a1aa:	421d      	tst	r5, r3
   1a1ac:	d003      	beq.n	1a1b6 <nm_bsp_init+0x46>
   1a1ae:	4b0a      	ldr	r3, [pc, #40]	; (1a1d8 <nm_bsp_init+0x68>)
   1a1b0:	681b      	ldr	r3, [r3, #0]
   1a1b2:	079b      	lsls	r3, r3, #30
   1a1b4:	d401      	bmi.n	1a1ba <nm_bsp_init+0x4a>
	    delay_init();
   1a1b6:	4b09      	ldr	r3, [pc, #36]	; (1a1dc <nm_bsp_init+0x6c>)
   1a1b8:	4798      	blx	r3
	cpu_irq_enable();
   1a1ba:	2201      	movs	r2, #1
   1a1bc:	4b08      	ldr	r3, [pc, #32]	; (1a1e0 <nm_bsp_init+0x70>)
   1a1be:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   1a1c0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   1a1c4:	b662      	cpsie	i
    }

	system_interrupt_enable_global();

	return M2M_SUCCESS;
}
   1a1c6:	2000      	movs	r0, #0
   1a1c8:	b002      	add	sp, #8
   1a1ca:	bd70      	pop	{r4, r5, r6, pc}
   1a1cc:	20003ca4 	.word	0x20003ca4
   1a1d0:	0001d7fd 	.word	0x0001d7fd
   1a1d4:	41004400 	.word	0x41004400
   1a1d8:	e000e010 	.word	0xe000e010
   1a1dc:	0001a0f1 	.word	0x0001a0f1
   1a1e0:	200000de 	.word	0x200000de

0001a1e4 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
   1a1e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a1e6:	4c07      	ldr	r4, [pc, #28]	; (1a204 <nm_bsp_reset+0x20>)
   1a1e8:	2780      	movs	r7, #128	; 0x80
   1a1ea:	057f      	lsls	r7, r7, #21
   1a1ec:	6167      	str	r7, [r4, #20]
   1a1ee:	2580      	movs	r5, #128	; 0x80
   1a1f0:	052d      	lsls	r5, r5, #20
   1a1f2:	6165      	str	r5, [r4, #20]
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
#ifdef __FREERTOS__
	vTaskDelay(u32TimeMsec);
   1a1f4:	2001      	movs	r0, #1
   1a1f6:	4e04      	ldr	r6, [pc, #16]	; (1a208 <nm_bsp_reset+0x24>)
   1a1f8:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
   1a1fa:	61a7      	str	r7, [r4, #24]
   1a1fc:	200a      	movs	r0, #10
   1a1fe:	47b0      	blx	r6
   1a200:	61a5      	str	r5, [r4, #24]
}
   1a202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a204:	41004400 	.word	0x41004400
   1a208:	000181d5 	.word	0x000181d5

0001a20c <nm_bsp_sleep>:
{
   1a20c:	b510      	push	{r4, lr}
	vTaskDelay(u32TimeMsec);
   1a20e:	4b01      	ldr	r3, [pc, #4]	; (1a214 <nm_bsp_sleep+0x8>)
   1a210:	4798      	blx	r3
	while (u32TimeMsec--) {
		delay_ms(1);
	}
	
#endif
}
   1a212:	bd10      	pop	{r4, pc}
   1a214:	000181d5 	.word	0x000181d5

0001a218 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
   1a218:	b510      	push	{r4, lr}
   1a21a:	b084      	sub	sp, #16
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
   1a21c:	4b0e      	ldr	r3, [pc, #56]	; (1a258 <nm_bsp_register_isr+0x40>)
   1a21e:	6018      	str	r0, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
   1a220:	ac01      	add	r4, sp, #4
   1a222:	0020      	movs	r0, r4
   1a224:	4b0d      	ldr	r3, [pc, #52]	; (1a25c <nm_bsp_register_isr+0x44>)
   1a226:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
   1a228:	2329      	movs	r3, #41	; 0x29
   1a22a:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
   1a22c:	2300      	movs	r3, #0
   1a22e:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   1a230:	3301      	adds	r3, #1
   1a232:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   1a234:	3301      	adds	r3, #1
   1a236:	72e3      	strb	r3, [r4, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
   1a238:	0021      	movs	r1, r4
   1a23a:	2009      	movs	r0, #9
   1a23c:	4b08      	ldr	r3, [pc, #32]	; (1a260 <nm_bsp_register_isr+0x48>)
   1a23e:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
   1a240:	2200      	movs	r2, #0
   1a242:	2109      	movs	r1, #9
   1a244:	4807      	ldr	r0, [pc, #28]	; (1a264 <nm_bsp_register_isr+0x4c>)
   1a246:	4b08      	ldr	r3, [pc, #32]	; (1a268 <nm_bsp_register_isr+0x50>)
   1a248:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   1a24a:	2100      	movs	r1, #0
   1a24c:	2009      	movs	r0, #9
   1a24e:	4b07      	ldr	r3, [pc, #28]	; (1a26c <nm_bsp_register_isr+0x54>)
   1a250:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
   1a252:	b004      	add	sp, #16
   1a254:	bd10      	pop	{r4, pc}
   1a256:	46c0      	nop			; (mov r8, r8)
   1a258:	20003ca4 	.word	0x20003ca4
   1a25c:	0001d771 	.word	0x0001d771
   1a260:	0001d785 	.word	0x0001d785
   1a264:	0001a15d 	.word	0x0001a15d
   1a268:	0001d62d 	.word	0x0001d62d
   1a26c:	0001d659 	.word	0x0001d659

0001a270 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
   1a270:	b510      	push	{r4, lr}
	if (u8Enable) {
   1a272:	2800      	cmp	r0, #0
   1a274:	d104      	bne.n	1a280 <nm_bsp_interrupt_ctrl+0x10>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
   1a276:	2100      	movs	r1, #0
   1a278:	2009      	movs	r0, #9
   1a27a:	4b04      	ldr	r3, [pc, #16]	; (1a28c <nm_bsp_interrupt_ctrl+0x1c>)
   1a27c:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
   1a27e:	bd10      	pop	{r4, pc}
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   1a280:	2100      	movs	r1, #0
   1a282:	2009      	movs	r0, #9
   1a284:	4b02      	ldr	r3, [pc, #8]	; (1a290 <nm_bsp_interrupt_ctrl+0x20>)
   1a286:	4798      	blx	r3
   1a288:	e7f9      	b.n	1a27e <nm_bsp_interrupt_ctrl+0xe>
   1a28a:	46c0      	nop			; (mov r8, r8)
   1a28c:	0001d679 	.word	0x0001d679
   1a290:	0001d659 	.word	0x0001d659

0001a294 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
   1a294:	b530      	push	{r4, r5, lr}
   1a296:	b091      	sub	sp, #68	; 0x44
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
   1a298:	4c30      	ldr	r4, [pc, #192]	; (1a35c <nm_bus_init+0xc8>)
   1a29a:	230e      	movs	r3, #14
   1a29c:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
   1a29e:	2300      	movs	r3, #0
   1a2a0:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
   1a2a2:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
   1a2a4:	a901      	add	r1, sp, #4
   1a2a6:	2201      	movs	r2, #1
   1a2a8:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
   1a2aa:	708b      	strb	r3, [r1, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   1a2ac:	700a      	strb	r2, [r1, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
   1a2ae:	200e      	movs	r0, #14
   1a2b0:	4b2b      	ldr	r3, [pc, #172]	; (1a360 <nm_bus_init+0xcc>)
   1a2b2:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   1a2b4:	7822      	ldrb	r2, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
   1a2b6:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
   1a2b8:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
   1a2ba:	2900      	cmp	r1, #0
   1a2bc:	d104      	bne.n	1a2c8 <nm_bus_init+0x34>
		return &(ports[port_index]->Group[group_index]);
   1a2be:	0953      	lsrs	r3, r2, #5
   1a2c0:	01db      	lsls	r3, r3, #7
   1a2c2:	4928      	ldr	r1, [pc, #160]	; (1a364 <nm_bus_init+0xd0>)
   1a2c4:	468c      	mov	ip, r1
   1a2c6:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1a2c8:	211f      	movs	r1, #31
   1a2ca:	4011      	ands	r1, r2
   1a2cc:	2201      	movs	r2, #1
   1a2ce:	0010      	movs	r0, r2
   1a2d0:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
   1a2d2:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
   1a2d4:	ac02      	add	r4, sp, #8
   1a2d6:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   1a2d8:	2300      	movs	r3, #0
   1a2da:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   1a2dc:	9304      	str	r3, [sp, #16]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   1a2de:	21c0      	movs	r1, #192	; 0xc0
   1a2e0:	0389      	lsls	r1, r1, #14
   1a2e2:	9105      	str	r1, [sp, #20]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   1a2e4:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
   1a2e6:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
   1a2e8:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
   1a2ea:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
   1a2ec:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
   1a2ee:	3223      	adds	r2, #35	; 0x23
   1a2f0:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   1a2f2:	3a18      	subs	r2, #24
   1a2f4:	2100      	movs	r1, #0
   1a2f6:	a808      	add	r0, sp, #32
   1a2f8:	4b1b      	ldr	r3, [pc, #108]	; (1a368 <nm_bus_init+0xd4>)
   1a2fa:	4798      	blx	r3
	spi_attach_slave(&slave_inst, &slave_config);

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
   1a2fc:	4b1b      	ldr	r3, [pc, #108]	; (1a36c <nm_bus_init+0xd8>)
   1a2fe:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
   1a300:	4b1b      	ldr	r3, [pc, #108]	; (1a370 <nm_bus_init+0xdc>)
   1a302:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
   1a304:	2301      	movs	r3, #1
   1a306:	425b      	negs	r3, r3
   1a308:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
   1a30a:	4b1a      	ldr	r3, [pc, #104]	; (1a374 <nm_bus_init+0xe0>)
   1a30c:	6363      	str	r3, [r4, #52]	; 0x34
	config.master_slave_select_enable = false;
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
   1a30e:	4b1a      	ldr	r3, [pc, #104]	; (1a378 <nm_bus_init+0xe4>)
   1a310:	61a3      	str	r3, [r4, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
   1a312:	0022      	movs	r2, r4
   1a314:	4919      	ldr	r1, [pc, #100]	; (1a37c <nm_bus_init+0xe8>)
   1a316:	481a      	ldr	r0, [pc, #104]	; (1a380 <nm_bus_init+0xec>)
   1a318:	4b1a      	ldr	r3, [pc, #104]	; (1a384 <nm_bus_init+0xf0>)
   1a31a:	4798      	blx	r3
   1a31c:	2800      	cmp	r0, #0
   1a31e:	d11a      	bne.n	1a356 <nm_bus_init+0xc2>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1a320:	4d17      	ldr	r5, [pc, #92]	; (1a380 <nm_bus_init+0xec>)
   1a322:	682c      	ldr	r4, [r5, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1a324:	0020      	movs	r0, r4
   1a326:	4b18      	ldr	r3, [pc, #96]	; (1a388 <nm_bus_init+0xf4>)
   1a328:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1a32a:	231f      	movs	r3, #31
   1a32c:	4018      	ands	r0, r3
   1a32e:	3b1e      	subs	r3, #30
   1a330:	4083      	lsls	r3, r0
   1a332:	4a16      	ldr	r2, [pc, #88]	; (1a38c <nm_bus_init+0xf8>)
   1a334:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1a336:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
   1a338:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
   1a33a:	2b00      	cmp	r3, #0
   1a33c:	d1fc      	bne.n	1a338 <nm_bus_init+0xa4>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   1a33e:	6823      	ldr	r3, [r4, #0]
   1a340:	2202      	movs	r2, #2
   1a342:	4313      	orrs	r3, r2
   1a344:	6023      	str	r3, [r4, #0]
	}

	/* Enable the SPI master. */
	spi_enable(&master);

	nm_bsp_reset();
   1a346:	4b12      	ldr	r3, [pc, #72]	; (1a390 <nm_bus_init+0xfc>)
   1a348:	4798      	blx	r3
	nm_bsp_sleep(1);
   1a34a:	2001      	movs	r0, #1
   1a34c:	4b11      	ldr	r3, [pc, #68]	; (1a394 <nm_bus_init+0x100>)
   1a34e:	4798      	blx	r3
#endif
	return result;
   1a350:	2000      	movs	r0, #0
}
   1a352:	b011      	add	sp, #68	; 0x44
   1a354:	bd30      	pop	{r4, r5, pc}
		return M2M_ERR_BUS_FAIL;
   1a356:	2006      	movs	r0, #6
   1a358:	4240      	negs	r0, r0
   1a35a:	e7fa      	b.n	1a352 <nm_bus_init+0xbe>
   1a35c:	20005394 	.word	0x20005394
   1a360:	0001d7fd 	.word	0x0001d7fd
   1a364:	41004400 	.word	0x41004400
   1a368:	00025d0f 	.word	0x00025d0f
   1a36c:	000c0002 	.word	0x000c0002
   1a370:	000d0002 	.word	0x000d0002
   1a374:	000f0002 	.word	0x000f0002
   1a378:	00124f80 	.word	0x00124f80
   1a37c:	42001000 	.word	0x42001000
   1a380:	20005398 	.word	0x20005398
   1a384:	0001df59 	.word	0x0001df59
   1a388:	0001de11 	.word	0x0001de11
   1a38c:	e000e100 	.word	0xe000e100
   1a390:	0001a1e5 	.word	0x0001a1e5
   1a394:	0001a20d 	.word	0x0001a20d

0001a398 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
   1a398:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a39a:	46de      	mov	lr, fp
   1a39c:	4657      	mov	r7, sl
   1a39e:	464e      	mov	r6, r9
   1a3a0:	4645      	mov	r5, r8
   1a3a2:	b5e0      	push	{r5, r6, r7, lr}
   1a3a4:	b083      	sub	sp, #12
	sint8 s8Ret = 0;
	switch(u8Cmd)
   1a3a6:	2803      	cmp	r0, #3
   1a3a8:	d000      	beq.n	1a3ac <nm_bus_ioctl+0x14>
   1a3aa:	e075      	b.n	1a498 <nm_bus_ioctl+0x100>
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
   1a3ac:	680e      	ldr	r6, [r1, #0]
   1a3ae:	684d      	ldr	r5, [r1, #4]
   1a3b0:	890c      	ldrh	r4, [r1, #8]
	uint8 u8Dummy = 0xFF;
   1a3b2:	22ff      	movs	r2, #255	; 0xff
   1a3b4:	466b      	mov	r3, sp
   1a3b6:	71da      	strb	r2, [r3, #7]
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
   1a3b8:	2d00      	cmp	r5, #0
   1a3ba:	d027      	beq.n	1a40c <nm_bus_ioctl+0x74>
   1a3bc:	2c00      	cmp	r4, #0
   1a3be:	d065      	beq.n	1a48c <nm_bus_ioctl+0xf4>
	if (pu8Mosi == NULL) {
   1a3c0:	2e00      	cmp	r6, #0
   1a3c2:	d100      	bne.n	1a3c6 <nm_bus_ioctl+0x2e>
   1a3c4:	e075      	b.n	1a4b2 <nm_bus_ioctl+0x11a>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
   1a3c6:	2300      	movs	r3, #0
   1a3c8:	4698      	mov	r8, r3
   1a3ca:	2300      	movs	r3, #0
   1a3cc:	469b      	mov	fp, r3
	spi_select_slave(&master, &slave_inst, true);
   1a3ce:	2201      	movs	r2, #1
   1a3d0:	493a      	ldr	r1, [pc, #232]	; (1a4bc <nm_bus_ioctl+0x124>)
   1a3d2:	483b      	ldr	r0, [pc, #236]	; (1a4c0 <nm_bus_ioctl+0x128>)
   1a3d4:	4b3b      	ldr	r3, [pc, #236]	; (1a4c4 <nm_bus_ioctl+0x12c>)
   1a3d6:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1a3d8:	4b39      	ldr	r3, [pc, #228]	; (1a4c0 <nm_bus_ioctl+0x128>)
   1a3da:	469a      	mov	sl, r3
		while (!spi_is_ready_to_write(&master))
   1a3dc:	2701      	movs	r7, #1
		while (!spi_is_ready_to_read(&master))
   1a3de:	2204      	movs	r2, #4
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   1a3e0:	4699      	mov	r9, r3
			pu8Miso++;
   1a3e2:	4659      	mov	r1, fp
   1a3e4:	424b      	negs	r3, r1
   1a3e6:	4159      	adcs	r1, r3
   1a3e8:	468b      	mov	fp, r1
		txd_data = *pu8Mosi;
   1a3ea:	7830      	ldrb	r0, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1a3ec:	4653      	mov	r3, sl
   1a3ee:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   1a3f0:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_write(&master))
   1a3f2:	4239      	tst	r1, r7
   1a3f4:	d0fc      	beq.n	1a3f0 <nm_bus_ioctl+0x58>
   1a3f6:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
   1a3f8:	4239      	tst	r1, r7
   1a3fa:	d0fc      	beq.n	1a3f6 <nm_bus_ioctl+0x5e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   1a3fc:	6298      	str	r0, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   1a3fe:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_read(&master))
   1a400:	4211      	tst	r1, r2
   1a402:	d0fc      	beq.n	1a3fe <nm_bus_ioctl+0x66>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   1a404:	4649      	mov	r1, r9
   1a406:	7989      	ldrb	r1, [r1, #6]
   1a408:	468c      	mov	ip, r1
   1a40a:	e011      	b.n	1a430 <nm_bus_ioctl+0x98>
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
   1a40c:	2e00      	cmp	r6, #0
   1a40e:	d03a      	beq.n	1a486 <nm_bus_ioctl+0xee>
   1a410:	2c00      	cmp	r4, #0
   1a412:	d03e      	beq.n	1a492 <nm_bus_ioctl+0xfa>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
   1a414:	2300      	movs	r3, #0
   1a416:	4698      	mov	r8, r3
		u8SkipMiso = 1;
   1a418:	3301      	adds	r3, #1
   1a41a:	469b      	mov	fp, r3
		pu8Miso = &u8Dummy;
   1a41c:	466b      	mov	r3, sp
   1a41e:	1ddd      	adds	r5, r3, #7
   1a420:	e7d5      	b.n	1a3ce <nm_bus_ioctl+0x36>
   1a422:	4660      	mov	r0, ip
   1a424:	2801      	cmp	r0, #1
   1a426:	d00d      	beq.n	1a444 <nm_bus_ioctl+0xac>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
   1a428:	6a98      	ldr	r0, [r3, #40]	; 0x28
   1a42a:	b2c0      	uxtb	r0, r0
		while (spi_read(&master, &rxd_data) != STATUS_OK)
   1a42c:	2900      	cmp	r1, #0
   1a42e:	d00d      	beq.n	1a44c <nm_bus_ioctl+0xb4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   1a430:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
   1a432:	4211      	tst	r1, r2
   1a434:	d0fc      	beq.n	1a430 <nm_bus_ioctl+0x98>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   1a436:	8b58      	ldrh	r0, [r3, #26]
	enum status_code retval = STATUS_OK;
   1a438:	2100      	movs	r1, #0
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   1a43a:	4210      	tst	r0, r2
   1a43c:	d0f1      	beq.n	1a422 <nm_bus_ioctl+0x8a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   1a43e:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
   1a440:	311e      	adds	r1, #30
   1a442:	e7ee      	b.n	1a422 <nm_bus_ioctl+0x8a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   1a444:	6a98      	ldr	r0, [r3, #40]	; 0x28
   1a446:	05c0      	lsls	r0, r0, #23
   1a448:	0dc0      	lsrs	r0, r0, #23
   1a44a:	e7ef      	b.n	1a42c <nm_bus_ioctl+0x94>
		*pu8Miso = rxd_data;
   1a44c:	7028      	strb	r0, [r5, #0]
		u16Sz--;
   1a44e:	3c01      	subs	r4, #1
   1a450:	b2a4      	uxth	r4, r4
			pu8Miso++;
   1a452:	445d      	add	r5, fp
			pu8Mosi++;
   1a454:	4643      	mov	r3, r8
   1a456:	4259      	negs	r1, r3
   1a458:	414b      	adcs	r3, r1
   1a45a:	18f6      	adds	r6, r6, r3
	while (u16Sz) {
   1a45c:	2c00      	cmp	r4, #0
   1a45e:	d1c4      	bne.n	1a3ea <nm_bus_ioctl+0x52>
	SercomSpi *const spi_module = &(module->hw->SPI);
   1a460:	4b17      	ldr	r3, [pc, #92]	; (1a4c0 <nm_bus_ioctl+0x128>)
   1a462:	6819      	ldr	r1, [r3, #0]
	while (!spi_is_write_complete(&master))
   1a464:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   1a466:	7e0b      	ldrb	r3, [r1, #24]
   1a468:	4213      	tst	r3, r2
   1a46a:	d0fc      	beq.n	1a466 <nm_bus_ioctl+0xce>
	spi_select_slave(&master, &slave_inst, false);
   1a46c:	2200      	movs	r2, #0
   1a46e:	4913      	ldr	r1, [pc, #76]	; (1a4bc <nm_bus_ioctl+0x124>)
   1a470:	4813      	ldr	r0, [pc, #76]	; (1a4c0 <nm_bus_ioctl+0x128>)
   1a472:	4b14      	ldr	r3, [pc, #80]	; (1a4c4 <nm_bus_ioctl+0x12c>)
   1a474:	4798      	blx	r3
	return M2M_SUCCESS;
   1a476:	2000      	movs	r0, #0
			M2M_ERR("invalide ioclt cmd\n");
			break;
	}

	return s8Ret;
}
   1a478:	b003      	add	sp, #12
   1a47a:	bc3c      	pop	{r2, r3, r4, r5}
   1a47c:	4690      	mov	r8, r2
   1a47e:	4699      	mov	r9, r3
   1a480:	46a2      	mov	sl, r4
   1a482:	46ab      	mov	fp, r5
   1a484:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return M2M_ERR_INVALID_ARG;
   1a486:	200f      	movs	r0, #15
   1a488:	4240      	negs	r0, r0
   1a48a:	e7f5      	b.n	1a478 <nm_bus_ioctl+0xe0>
   1a48c:	200f      	movs	r0, #15
   1a48e:	4240      	negs	r0, r0
   1a490:	e7f2      	b.n	1a478 <nm_bus_ioctl+0xe0>
   1a492:	200f      	movs	r0, #15
   1a494:	4240      	negs	r0, r0
		break;
   1a496:	e7ef      	b.n	1a478 <nm_bus_ioctl+0xe0>
			M2M_ERR("invalide ioclt cmd\n");
   1a498:	2283      	movs	r2, #131	; 0x83
   1a49a:	0052      	lsls	r2, r2, #1
   1a49c:	490a      	ldr	r1, [pc, #40]	; (1a4c8 <nm_bus_ioctl+0x130>)
   1a49e:	480b      	ldr	r0, [pc, #44]	; (1a4cc <nm_bus_ioctl+0x134>)
   1a4a0:	4c0b      	ldr	r4, [pc, #44]	; (1a4d0 <nm_bus_ioctl+0x138>)
   1a4a2:	47a0      	blx	r4
   1a4a4:	480b      	ldr	r0, [pc, #44]	; (1a4d4 <nm_bus_ioctl+0x13c>)
   1a4a6:	47a0      	blx	r4
   1a4a8:	480b      	ldr	r0, [pc, #44]	; (1a4d8 <nm_bus_ioctl+0x140>)
   1a4aa:	47a0      	blx	r4
			s8Ret = -1;
   1a4ac:	2001      	movs	r0, #1
   1a4ae:	4240      	negs	r0, r0
	return s8Ret;
   1a4b0:	e7e2      	b.n	1a478 <nm_bus_ioctl+0xe0>
		u8SkipMosi = 1;
   1a4b2:	2301      	movs	r3, #1
   1a4b4:	4698      	mov	r8, r3
		pu8Mosi = &u8Dummy;
   1a4b6:	466b      	mov	r3, sp
   1a4b8:	1dde      	adds	r6, r3, #7
   1a4ba:	e786      	b.n	1a3ca <nm_bus_ioctl+0x32>
   1a4bc:	20005394 	.word	0x20005394
   1a4c0:	20005398 	.word	0x20005398
   1a4c4:	0001e205 	.word	0x0001e205
   1a4c8:	0002a0ec 	.word	0x0002a0ec
   1a4cc:	0002a0fc 	.word	0x0002a0fc
   1a4d0:	0001913d 	.word	0x0001913d
   1a4d4:	0002a110 	.word	0x0002a110
   1a4d8:	0002a124 	.word	0x0002a124

0001a4dc <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
   1a4dc:	b530      	push	{r4, r5, lr}
   1a4de:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
   1a4e0:	ab01      	add	r3, sp, #4
   1a4e2:	2200      	movs	r2, #0
   1a4e4:	701a      	strb	r2, [r3, #0]
	config->powersave  = false;
   1a4e6:	709a      	strb	r2, [r3, #2]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
   1a4e8:	705a      	strb	r2, [r3, #1]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1a4ea:	4d13      	ldr	r5, [pc, #76]	; (1a538 <nm_bus_deinit+0x5c>)
   1a4ec:	682c      	ldr	r4, [r5, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   1a4ee:	0020      	movs	r0, r4
   1a4f0:	4b12      	ldr	r3, [pc, #72]	; (1a53c <nm_bus_deinit+0x60>)
   1a4f2:	4798      	blx	r3
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1a4f4:	231f      	movs	r3, #31
   1a4f6:	4018      	ands	r0, r3
   1a4f8:	3b1e      	subs	r3, #30
   1a4fa:	4083      	lsls	r3, r0
   1a4fc:	2280      	movs	r2, #128	; 0x80
   1a4fe:	4910      	ldr	r1, [pc, #64]	; (1a540 <nm_bus_deinit+0x64>)
   1a500:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1a502:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
   1a504:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
   1a506:	2b00      	cmp	r3, #0
   1a508:	d1fc      	bne.n	1a504 <nm_bus_deinit+0x28>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   1a50a:	338f      	adds	r3, #143	; 0x8f
   1a50c:	7523      	strb	r3, [r4, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   1a50e:	7623      	strb	r3, [r4, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   1a510:	6823      	ldr	r3, [r4, #0]
   1a512:	2202      	movs	r2, #2
   1a514:	4393      	bics	r3, r2
   1a516:	6023      	str	r3, [r4, #0]
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
   1a518:	a901      	add	r1, sp, #4
   1a51a:	200c      	movs	r0, #12
   1a51c:	4c09      	ldr	r4, [pc, #36]	; (1a544 <nm_bus_deinit+0x68>)
   1a51e:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
   1a520:	a901      	add	r1, sp, #4
   1a522:	200f      	movs	r0, #15
   1a524:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
   1a526:	a901      	add	r1, sp, #4
   1a528:	200d      	movs	r0, #13
   1a52a:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
   1a52c:	a901      	add	r1, sp, #4
   1a52e:	200e      	movs	r0, #14
   1a530:	47a0      	blx	r4
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
}
   1a532:	2000      	movs	r0, #0
   1a534:	b003      	add	sp, #12
   1a536:	bd30      	pop	{r4, r5, pc}
   1a538:	20005398 	.word	0x20005398
   1a53c:	0001de11 	.word	0x0001de11
   1a540:	e000e100 	.word	0xe000e100
   1a544:	0001d7fd 	.word	0x0001d7fd

0001a548 <m2m_memcpy>:
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
   1a548:	2a00      	cmp	r2, #0
   1a54a:	d006      	beq.n	1a55a <m2m_memcpy+0x12>
   1a54c:	1882      	adds	r2, r0, r2
	do
	{
		*pDst = *pSrc;
   1a54e:	780b      	ldrb	r3, [r1, #0]
   1a550:	7003      	strb	r3, [r0, #0]
		pDst++;
   1a552:	3001      	adds	r0, #1
		pSrc++;
   1a554:	3101      	adds	r1, #1
	}while(--sz);
   1a556:	4290      	cmp	r0, r2
   1a558:	d1f9      	bne.n	1a54e <m2m_memcpy+0x6>
}
   1a55a:	4770      	bx	lr

0001a55c <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
   1a55c:	2a00      	cmp	r2, #0
   1a55e:	d004      	beq.n	1a56a <m2m_memset+0xe>
   1a560:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
   1a562:	7001      	strb	r1, [r0, #0]
		pBuf++;
   1a564:	3001      	adds	r0, #1
	}while(--sz);
   1a566:	4290      	cmp	r0, r2
   1a568:	d1fb      	bne.n	1a562 <m2m_memset+0x6>
}
   1a56a:	4770      	bx	lr

0001a56c <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
   1a56c:	0003      	movs	r3, r0
	uint16	u16StrLen = 0;
	while(*pcStr)
   1a56e:	7802      	ldrb	r2, [r0, #0]
   1a570:	2a00      	cmp	r2, #0
   1a572:	d007      	beq.n	1a584 <m2m_strlen+0x18>
   1a574:	2000      	movs	r0, #0
	{
		u16StrLen ++;
   1a576:	3001      	adds	r0, #1
   1a578:	b280      	uxth	r0, r0
		pcStr++;
   1a57a:	3301      	adds	r3, #1
	while(*pcStr)
   1a57c:	781a      	ldrb	r2, [r3, #0]
   1a57e:	2a00      	cmp	r2, #0
   1a580:	d1f9      	bne.n	1a576 <m2m_strlen+0xa>
	}
	return u16StrLen;
}
   1a582:	4770      	bx	lr
	uint16	u16StrLen = 0;
   1a584:	2000      	movs	r0, #0
   1a586:	e7fc      	b.n	1a582 <m2m_strlen+0x16>

0001a588 <isr>:
extern void os_hook_isr(void);
#endif

static void isr(void)
{
	gstrHifCxt.u8Interrupt++;
   1a588:	4a02      	ldr	r2, [pc, #8]	; (1a594 <isr+0xc>)
   1a58a:	78d3      	ldrb	r3, [r2, #3]
   1a58c:	3301      	adds	r3, #1
   1a58e:	b2db      	uxtb	r3, r3
   1a590:	70d3      	strb	r3, [r2, #3]
	nm_bsp_interrupt_ctrl(0);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
   1a592:	4770      	bx	lr
   1a594:	200053d4 	.word	0x200053d4

0001a598 <m2m_hif_cb>:
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{


}
   1a598:	4770      	bx	lr
	...

0001a59c <hif_set_rx_done>:
{
   1a59c:	b500      	push	{lr}
   1a59e:	b083      	sub	sp, #12
	gstrHifCxt.u8HifRXDone = 0;
   1a5a0:	2200      	movs	r2, #0
   1a5a2:	4b0a      	ldr	r3, [pc, #40]	; (1a5cc <hif_set_rx_done+0x30>)
   1a5a4:	709a      	strb	r2, [r3, #2]
	nm_bsp_interrupt_ctrl(1);
   1a5a6:	2001      	movs	r0, #1
   1a5a8:	4b09      	ldr	r3, [pc, #36]	; (1a5d0 <hif_set_rx_done+0x34>)
   1a5aa:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
   1a5ac:	a901      	add	r1, sp, #4
   1a5ae:	4809      	ldr	r0, [pc, #36]	; (1a5d4 <hif_set_rx_done+0x38>)
   1a5b0:	4b09      	ldr	r3, [pc, #36]	; (1a5d8 <hif_set_rx_done+0x3c>)
   1a5b2:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
   1a5b4:	2800      	cmp	r0, #0
   1a5b6:	d001      	beq.n	1a5bc <hif_set_rx_done+0x20>
}
   1a5b8:	b003      	add	sp, #12
   1a5ba:	bd00      	pop	{pc}
	reg |= NBIT1;
   1a5bc:	2102      	movs	r1, #2
   1a5be:	9b01      	ldr	r3, [sp, #4]
   1a5c0:	4319      	orrs	r1, r3
   1a5c2:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   1a5c4:	4803      	ldr	r0, [pc, #12]	; (1a5d4 <hif_set_rx_done+0x38>)
   1a5c6:	4b05      	ldr	r3, [pc, #20]	; (1a5dc <hif_set_rx_done+0x40>)
   1a5c8:	4798      	blx	r3
   1a5ca:	e7f5      	b.n	1a5b8 <hif_set_rx_done+0x1c>
   1a5cc:	200053d4 	.word	0x200053d4
   1a5d0:	0001a271 	.word	0x0001a271
   1a5d4:	00001070 	.word	0x00001070
   1a5d8:	0001b919 	.word	0x0001b919
   1a5dc:	0001b925 	.word	0x0001b925

0001a5e0 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
   1a5e0:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	if(gstrHifCxt.u8HifRXDone)
   1a5e2:	4b0c      	ldr	r3, [pc, #48]	; (1a614 <hif_chip_wake+0x34>)
   1a5e4:	789b      	ldrb	r3, [r3, #2]
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
   1a5e6:	2000      	movs	r0, #0
	if(gstrHifCxt.u8HifRXDone)
   1a5e8:	2b00      	cmp	r3, #0
   1a5ea:	d10d      	bne.n	1a608 <hif_chip_wake+0x28>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
   1a5ec:	4b09      	ldr	r3, [pc, #36]	; (1a614 <hif_chip_wake+0x34>)
   1a5ee:	785b      	ldrb	r3, [r3, #1]
   1a5f0:	2b00      	cmp	r3, #0
   1a5f2:	d103      	bne.n	1a5fc <hif_chip_wake+0x1c>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   1a5f4:	4b07      	ldr	r3, [pc, #28]	; (1a614 <hif_chip_wake+0x34>)
   1a5f6:	781b      	ldrb	r3, [r3, #0]
   1a5f8:	2b00      	cmp	r3, #0
   1a5fa:	d106      	bne.n	1a60a <hif_chip_wake+0x2a>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
   1a5fc:	4a05      	ldr	r2, [pc, #20]	; (1a614 <hif_chip_wake+0x34>)
   1a5fe:	7853      	ldrb	r3, [r2, #1]
   1a600:	3301      	adds	r3, #1
   1a602:	b2db      	uxtb	r3, r3
   1a604:	7053      	strb	r3, [r2, #1]
   1a606:	2000      	movs	r0, #0
ERR1:
	return ret;
}
   1a608:	bd10      	pop	{r4, pc}
			ret = chip_wake();
   1a60a:	4b03      	ldr	r3, [pc, #12]	; (1a618 <hif_chip_wake+0x38>)
   1a60c:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
   1a60e:	2800      	cmp	r0, #0
   1a610:	d0f4      	beq.n	1a5fc <hif_chip_wake+0x1c>
   1a612:	e7f9      	b.n	1a608 <hif_chip_wake+0x28>
   1a614:	200053d4 	.word	0x200053d4
   1a618:	0001b619 	.word	0x0001b619

0001a61c <hif_chip_sleep_sc>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
	if(gstrHifCxt.u8ChipSleep >= 1)
   1a61c:	4b05      	ldr	r3, [pc, #20]	; (1a634 <hif_chip_sleep_sc+0x18>)
   1a61e:	785b      	ldrb	r3, [r3, #1]
   1a620:	2b00      	cmp	r3, #0
   1a622:	d004      	beq.n	1a62e <hif_chip_sleep_sc+0x12>
	{
		gstrHifCxt.u8ChipSleep--;
   1a624:	4a03      	ldr	r2, [pc, #12]	; (1a634 <hif_chip_sleep_sc+0x18>)
   1a626:	7853      	ldrb	r3, [r2, #1]
   1a628:	3b01      	subs	r3, #1
   1a62a:	b2db      	uxtb	r3, r3
   1a62c:	7053      	strb	r3, [r2, #1]
	}
	return M2M_SUCCESS;
}
   1a62e:	2000      	movs	r0, #0
   1a630:	4770      	bx	lr
   1a632:	46c0      	nop			; (mov r8, r8)
   1a634:	200053d4 	.word	0x200053d4

0001a638 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
   1a638:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;

	if(gstrHifCxt.u8ChipSleep >= 1)
   1a63a:	4b0b      	ldr	r3, [pc, #44]	; (1a668 <hif_chip_sleep+0x30>)
   1a63c:	785b      	ldrb	r3, [r3, #1]
   1a63e:	2b00      	cmp	r3, #0
   1a640:	d004      	beq.n	1a64c <hif_chip_sleep+0x14>
	{
		gstrHifCxt.u8ChipSleep--;
   1a642:	4a09      	ldr	r2, [pc, #36]	; (1a668 <hif_chip_sleep+0x30>)
   1a644:	7853      	ldrb	r3, [r2, #1]
   1a646:	3b01      	subs	r3, #1
   1a648:	b2db      	uxtb	r3, r3
   1a64a:	7053      	strb	r3, [r2, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
   1a64c:	4b06      	ldr	r3, [pc, #24]	; (1a668 <hif_chip_sleep+0x30>)
   1a64e:	785b      	ldrb	r3, [r3, #1]
	sint8 ret = M2M_SUCCESS;
   1a650:	2000      	movs	r0, #0
	if(gstrHifCxt.u8ChipSleep == 0)
   1a652:	2b00      	cmp	r3, #0
   1a654:	d103      	bne.n	1a65e <hif_chip_sleep+0x26>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   1a656:	4b04      	ldr	r3, [pc, #16]	; (1a668 <hif_chip_sleep+0x30>)
   1a658:	781b      	ldrb	r3, [r3, #0]
   1a65a:	2b00      	cmp	r3, #0
   1a65c:	d100      	bne.n	1a660 <hif_chip_sleep+0x28>
		{
		}
	}
ERR1:
	return ret;
}
   1a65e:	bd10      	pop	{r4, pc}
			ret = chip_sleep();
   1a660:	4b02      	ldr	r3, [pc, #8]	; (1a66c <hif_chip_sleep+0x34>)
   1a662:	4798      	blx	r3
   1a664:	e7fb      	b.n	1a65e <hif_chip_sleep+0x26>
   1a666:	46c0      	nop			; (mov r8, r8)
   1a668:	200053d4 	.word	0x200053d4
   1a66c:	0001b5b1 	.word	0x0001b5b1

0001a670 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
   1a670:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a672:	46de      	mov	lr, fp
   1a674:	4657      	mov	r7, sl
   1a676:	b580      	push	{r7, lr}
   1a678:	b089      	sub	sp, #36	; 0x24
   1a67a:	4683      	mov	fp, r0
   1a67c:	468a      	mov	sl, r1
   1a67e:	9201      	str	r2, [sp, #4]
   1a680:	9300      	str	r3, [sp, #0]
   1a682:	ab10      	add	r3, sp, #64	; 0x40
   1a684:	cb80      	ldmia	r3!, {r7}
   1a686:	881e      	ldrh	r6, [r3, #0]
   1a688:	ab12      	add	r3, sp, #72	; 0x48
   1a68a:	881d      	ldrh	r5, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
   1a68c:	227f      	movs	r2, #127	; 0x7f
   1a68e:	400a      	ands	r2, r1
   1a690:	ab07      	add	r3, sp, #28
   1a692:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
   1a694:	7018      	strb	r0, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
   1a696:	2208      	movs	r2, #8
   1a698:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
   1a69a:	2f00      	cmp	r7, #0
   1a69c:	d03d      	beq.n	1a71a <hif_send+0xaa>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
   1a69e:	885a      	ldrh	r2, [r3, #2]
   1a6a0:	1992      	adds	r2, r2, r6
   1a6a2:	18aa      	adds	r2, r5, r2
   1a6a4:	b292      	uxth	r2, r2
   1a6a6:	805a      	strh	r2, [r3, #2]
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
	}
	ret = hif_chip_wake();
   1a6a8:	4b68      	ldr	r3, [pc, #416]	; (1a84c <hif_send+0x1dc>)
   1a6aa:	4798      	blx	r3
   1a6ac:	1e04      	subs	r4, r0, #0
	if(ret == M2M_SUCCESS)
   1a6ae:	d000      	beq.n	1a6b2 <hif_send+0x42>
   1a6b0:	e0c0      	b.n	1a834 <hif_send+0x1c4>
	{
		volatile uint32 reg, dma_addr = 0;
   1a6b2:	2300      	movs	r3, #0
   1a6b4:	9305      	str	r3, [sp, #20]
		volatile uint16 cnt = 0;
   1a6b6:	aa02      	add	r2, sp, #8
   1a6b8:	80d3      	strh	r3, [r2, #6]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
   1a6ba:	9304      	str	r3, [sp, #16]
		reg |= (uint32)u8Gid;
   1a6bc:	9b04      	ldr	r3, [sp, #16]
   1a6be:	465a      	mov	r2, fp
   1a6c0:	431a      	orrs	r2, r3
   1a6c2:	9204      	str	r2, [sp, #16]
		reg |= ((uint32)u8Opcode<<8);
   1a6c4:	9a04      	ldr	r2, [sp, #16]
   1a6c6:	4653      	mov	r3, sl
   1a6c8:	021b      	lsls	r3, r3, #8
   1a6ca:	4313      	orrs	r3, r2
   1a6cc:	9304      	str	r3, [sp, #16]
		reg |= ((uint32)strHif.u16Length<<16);
   1a6ce:	ab07      	add	r3, sp, #28
   1a6d0:	885b      	ldrh	r3, [r3, #2]
   1a6d2:	9a04      	ldr	r2, [sp, #16]
   1a6d4:	041b      	lsls	r3, r3, #16
   1a6d6:	4313      	orrs	r3, r2
   1a6d8:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(NMI_STATE_REG,reg);
   1a6da:	9904      	ldr	r1, [sp, #16]
   1a6dc:	485c      	ldr	r0, [pc, #368]	; (1a850 <hif_send+0x1e0>)
   1a6de:	4b5d      	ldr	r3, [pc, #372]	; (1a854 <hif_send+0x1e4>)
   1a6e0:	4798      	blx	r3
   1a6e2:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
   1a6e4:	d156      	bne.n	1a794 <hif_send+0x124>

		reg = 0UL;
   1a6e6:	2300      	movs	r3, #0
   1a6e8:	9304      	str	r3, [sp, #16]
		reg |= NBIT1;
   1a6ea:	9b04      	ldr	r3, [sp, #16]
   1a6ec:	2202      	movs	r2, #2
   1a6ee:	4313      	orrs	r3, r2
   1a6f0:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
   1a6f2:	9904      	ldr	r1, [sp, #16]
   1a6f4:	4858      	ldr	r0, [pc, #352]	; (1a858 <hif_send+0x1e8>)
   1a6f6:	4b57      	ldr	r3, [pc, #348]	; (1a854 <hif_send+0x1e4>)
   1a6f8:	4798      	blx	r3
   1a6fa:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
   1a6fc:	d14a      	bne.n	1a794 <hif_send+0x124>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
   1a6fe:	2200      	movs	r2, #0
   1a700:	9205      	str	r2, [sp, #20]
		
		for(cnt = 0; cnt < 1000; cnt ++)
   1a702:	ab02      	add	r3, sp, #8
   1a704:	80da      	strh	r2, [r3, #6]
   1a706:	3306      	adds	r3, #6
   1a708:	881b      	ldrh	r3, [r3, #0]
   1a70a:	b29b      	uxth	r3, r3
   1a70c:	4a53      	ldr	r2, [pc, #332]	; (1a85c <hif_send+0x1ec>)
   1a70e:	4293      	cmp	r3, r2
   1a710:	d848      	bhi.n	1a7a4 <hif_send+0x134>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
   1a712:	4c53      	ldr	r4, [pc, #332]	; (1a860 <hif_send+0x1f0>)
			 */
			if(cnt >= 500) {
				if(cnt < 501) {
					M2M_INFO("Slowing down...\n");
				}
				nm_bsp_sleep(1);
   1a714:	4b53      	ldr	r3, [pc, #332]	; (1a864 <hif_send+0x1f4>)
   1a716:	469a      	mov	sl, r3
   1a718:	e017      	b.n	1a74a <hif_send+0xda>
		strHif.u16Length += u16CtrlBufSize;
   1a71a:	ab07      	add	r3, sp, #28
   1a71c:	885a      	ldrh	r2, [r3, #2]
   1a71e:	9900      	ldr	r1, [sp, #0]
   1a720:	468c      	mov	ip, r1
   1a722:	4462      	add	r2, ip
   1a724:	b292      	uxth	r2, r2
   1a726:	805a      	strh	r2, [r3, #2]
   1a728:	e7be      	b.n	1a6a8 <hif_send+0x38>
				nm_bsp_sleep(1);
   1a72a:	2001      	movs	r0, #1
   1a72c:	47d0      	blx	sl
			}
			if (!(reg & NBIT1))
   1a72e:	9b04      	ldr	r3, [sp, #16]
   1a730:	079b      	lsls	r3, r3, #30
   1a732:	d527      	bpl.n	1a784 <hif_send+0x114>
		for(cnt = 0; cnt < 1000; cnt ++)
   1a734:	ab02      	add	r3, sp, #8
   1a736:	88da      	ldrh	r2, [r3, #6]
   1a738:	3201      	adds	r2, #1
   1a73a:	b292      	uxth	r2, r2
   1a73c:	80da      	strh	r2, [r3, #6]
   1a73e:	3306      	adds	r3, #6
   1a740:	881b      	ldrh	r3, [r3, #0]
   1a742:	b29b      	uxth	r3, r3
   1a744:	4a45      	ldr	r2, [pc, #276]	; (1a85c <hif_send+0x1ec>)
   1a746:	4293      	cmp	r3, r2
   1a748:	d82c      	bhi.n	1a7a4 <hif_send+0x134>
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
   1a74a:	a904      	add	r1, sp, #16
   1a74c:	4842      	ldr	r0, [pc, #264]	; (1a858 <hif_send+0x1e8>)
   1a74e:	47a0      	blx	r4
			if(ret != M2M_SUCCESS) break;
   1a750:	2800      	cmp	r0, #0
   1a752:	d127      	bne.n	1a7a4 <hif_send+0x134>
			if(cnt >= 500) {
   1a754:	ab02      	add	r3, sp, #8
   1a756:	3306      	adds	r3, #6
   1a758:	881b      	ldrh	r3, [r3, #0]
   1a75a:	b29b      	uxth	r3, r3
   1a75c:	22f4      	movs	r2, #244	; 0xf4
   1a75e:	32ff      	adds	r2, #255	; 0xff
   1a760:	4293      	cmp	r3, r2
   1a762:	d9e4      	bls.n	1a72e <hif_send+0xbe>
				if(cnt < 501) {
   1a764:	ab02      	add	r3, sp, #8
   1a766:	3306      	adds	r3, #6
   1a768:	881b      	ldrh	r3, [r3, #0]
   1a76a:	b29b      	uxth	r3, r3
   1a76c:	3201      	adds	r2, #1
   1a76e:	4293      	cmp	r3, r2
   1a770:	d8db      	bhi.n	1a72a <hif_send+0xba>
					M2M_INFO("Slowing down...\n");
   1a772:	483d      	ldr	r0, [pc, #244]	; (1a868 <hif_send+0x1f8>)
   1a774:	4b3d      	ldr	r3, [pc, #244]	; (1a86c <hif_send+0x1fc>)
   1a776:	469b      	mov	fp, r3
   1a778:	4798      	blx	r3
   1a77a:	483d      	ldr	r0, [pc, #244]	; (1a870 <hif_send+0x200>)
   1a77c:	47d8      	blx	fp
   1a77e:	483d      	ldr	r0, [pc, #244]	; (1a874 <hif_send+0x204>)
   1a780:	47d8      	blx	fp
   1a782:	e7d2      	b.n	1a72a <hif_send+0xba>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
   1a784:	a905      	add	r1, sp, #20
   1a786:	483c      	ldr	r0, [pc, #240]	; (1a878 <hif_send+0x208>)
   1a788:	4b35      	ldr	r3, [pc, #212]	; (1a860 <hif_send+0x1f0>)
   1a78a:	4798      	blx	r3
   1a78c:	1e04      	subs	r4, r0, #0
				if(ret != M2M_SUCCESS) {
   1a78e:	d009      	beq.n	1a7a4 <hif_send+0x134>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
   1a790:	2300      	movs	r3, #0
   1a792:	9305      	str	r3, [sp, #20]
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
	return ret;
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
   1a794:	4b39      	ldr	r3, [pc, #228]	; (1a87c <hif_send+0x20c>)
   1a796:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
}
   1a798:	0020      	movs	r0, r4
   1a79a:	b009      	add	sp, #36	; 0x24
   1a79c:	bc0c      	pop	{r2, r3}
   1a79e:	4692      	mov	sl, r2
   1a7a0:	469b      	mov	fp, r3
   1a7a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (dma_addr != 0)
   1a7a4:	9b05      	ldr	r3, [sp, #20]
   1a7a6:	2b00      	cmp	r3, #0
   1a7a8:	d03f      	beq.n	1a82a <hif_send+0x1ba>
			u32CurrAddr = dma_addr;
   1a7aa:	9b05      	ldr	r3, [sp, #20]
   1a7ac:	9306      	str	r3, [sp, #24]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
   1a7ae:	a907      	add	r1, sp, #28
   1a7b0:	884b      	ldrh	r3, [r1, #2]
   1a7b2:	b29b      	uxth	r3, r3
   1a7b4:	804b      	strh	r3, [r1, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
   1a7b6:	9806      	ldr	r0, [sp, #24]
   1a7b8:	2208      	movs	r2, #8
   1a7ba:	4b31      	ldr	r3, [pc, #196]	; (1a880 <hif_send+0x210>)
   1a7bc:	4798      	blx	r3
   1a7be:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
   1a7c0:	d1e8      	bne.n	1a794 <hif_send+0x124>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
   1a7c2:	9b06      	ldr	r3, [sp, #24]
   1a7c4:	3308      	adds	r3, #8
   1a7c6:	9306      	str	r3, [sp, #24]
			if(pu8CtrlBuf != NULL)
   1a7c8:	9b01      	ldr	r3, [sp, #4]
   1a7ca:	2b00      	cmp	r3, #0
   1a7cc:	d00b      	beq.n	1a7e6 <hif_send+0x176>
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
   1a7ce:	9806      	ldr	r0, [sp, #24]
   1a7d0:	9a00      	ldr	r2, [sp, #0]
   1a7d2:	0019      	movs	r1, r3
   1a7d4:	4b2a      	ldr	r3, [pc, #168]	; (1a880 <hif_send+0x210>)
   1a7d6:	4798      	blx	r3
   1a7d8:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
   1a7da:	d1db      	bne.n	1a794 <hif_send+0x124>
				u32CurrAddr += u16CtrlBufSize;
   1a7dc:	9b06      	ldr	r3, [sp, #24]
   1a7de:	9a00      	ldr	r2, [sp, #0]
   1a7e0:	4694      	mov	ip, r2
   1a7e2:	4463      	add	r3, ip
   1a7e4:	9306      	str	r3, [sp, #24]
			if(pu8DataBuf != NULL)
   1a7e6:	2f00      	cmp	r7, #0
   1a7e8:	d00e      	beq.n	1a808 <hif_send+0x198>
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
   1a7ea:	9b06      	ldr	r3, [sp, #24]
   1a7ec:	9a00      	ldr	r2, [sp, #0]
   1a7ee:	1aad      	subs	r5, r5, r2
   1a7f0:	18ed      	adds	r5, r5, r3
   1a7f2:	9506      	str	r5, [sp, #24]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
   1a7f4:	9806      	ldr	r0, [sp, #24]
   1a7f6:	0032      	movs	r2, r6
   1a7f8:	0039      	movs	r1, r7
   1a7fa:	4b21      	ldr	r3, [pc, #132]	; (1a880 <hif_send+0x210>)
   1a7fc:	4798      	blx	r3
   1a7fe:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
   1a800:	d1c8      	bne.n	1a794 <hif_send+0x124>
				u32CurrAddr += u16DataSize;
   1a802:	9b06      	ldr	r3, [sp, #24]
   1a804:	18f3      	adds	r3, r6, r3
   1a806:	9306      	str	r3, [sp, #24]
			reg = dma_addr << 2;
   1a808:	9b05      	ldr	r3, [sp, #20]
   1a80a:	009b      	lsls	r3, r3, #2
   1a80c:	9304      	str	r3, [sp, #16]
			reg |= NBIT1;
   1a80e:	9b04      	ldr	r3, [sp, #16]
   1a810:	2202      	movs	r2, #2
   1a812:	4313      	orrs	r3, r2
   1a814:	9304      	str	r3, [sp, #16]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
   1a816:	9904      	ldr	r1, [sp, #16]
   1a818:	481a      	ldr	r0, [pc, #104]	; (1a884 <hif_send+0x214>)
   1a81a:	4b0e      	ldr	r3, [pc, #56]	; (1a854 <hif_send+0x1e4>)
   1a81c:	4798      	blx	r3
   1a81e:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
   1a820:	d1b8      	bne.n	1a794 <hif_send+0x124>
 	ret = hif_chip_sleep();
   1a822:	4b19      	ldr	r3, [pc, #100]	; (1a888 <hif_send+0x218>)
   1a824:	4798      	blx	r3
   1a826:	0004      	movs	r4, r0
	return ret;
   1a828:	e7b6      	b.n	1a798 <hif_send+0x128>
			ret = hif_chip_sleep();
   1a82a:	4b17      	ldr	r3, [pc, #92]	; (1a888 <hif_send+0x218>)
   1a82c:	4798      	blx	r3
			ret = M2M_ERR_MEM_ALLOC;
   1a82e:	2403      	movs	r4, #3
   1a830:	4264      	negs	r4, r4
			goto ERR2;
   1a832:	e7b1      	b.n	1a798 <hif_send+0x128>
		M2M_ERR("(HIF)Fail to wakup the chip\n");
   1a834:	2298      	movs	r2, #152	; 0x98
   1a836:	32ff      	adds	r2, #255	; 0xff
   1a838:	4914      	ldr	r1, [pc, #80]	; (1a88c <hif_send+0x21c>)
   1a83a:	4815      	ldr	r0, [pc, #84]	; (1a890 <hif_send+0x220>)
   1a83c:	4d0b      	ldr	r5, [pc, #44]	; (1a86c <hif_send+0x1fc>)
   1a83e:	47a8      	blx	r5
   1a840:	4814      	ldr	r0, [pc, #80]	; (1a894 <hif_send+0x224>)
   1a842:	47a8      	blx	r5
   1a844:	480b      	ldr	r0, [pc, #44]	; (1a874 <hif_send+0x204>)
   1a846:	47a8      	blx	r5
		goto ERR2;
   1a848:	e7a6      	b.n	1a798 <hif_send+0x128>
   1a84a:	46c0      	nop			; (mov r8, r8)
   1a84c:	0001a5e1 	.word	0x0001a5e1
   1a850:	0000108c 	.word	0x0000108c
   1a854:	0001b925 	.word	0x0001b925
   1a858:	00001078 	.word	0x00001078
   1a85c:	000003e7 	.word	0x000003e7
   1a860:	0001b919 	.word	0x0001b919
   1a864:	0001a20d 	.word	0x0001a20d
   1a868:	0002a438 	.word	0x0002a438
   1a86c:	0001913d 	.word	0x0001913d
   1a870:	0002a444 	.word	0x0002a444
   1a874:	0002a124 	.word	0x0002a124
   1a878:	00150400 	.word	0x00150400
   1a87c:	0001a61d 	.word	0x0001a61d
   1a880:	0001b999 	.word	0x0001b999
   1a884:	0000106c 	.word	0x0000106c
   1a888:	0001a639 	.word	0x0001a639
   1a88c:	0002a148 	.word	0x0002a148
   1a890:	0002a0fc 	.word	0x0002a0fc
   1a894:	0002a458 	.word	0x0002a458

0001a898 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
   1a898:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a89a:	46ce      	mov	lr, r9
   1a89c:	4647      	mov	r7, r8
   1a89e:	b580      	push	{r7, lr}
   1a8a0:	b087      	sub	sp, #28
	sint8 ret = M2M_SUCCESS;	
	
	gstrHifCxt.u8Yield = 0;
   1a8a2:	2200      	movs	r2, #0
   1a8a4:	4bc8      	ldr	r3, [pc, #800]	; (1abc8 <hif_handle_isr+0x330>)
   1a8a6:	711a      	strb	r2, [r3, #4]
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   1a8a8:	4699      	mov	r9, r3
   1a8aa:	4698      	mov	r8, r3
   1a8ac:	e07c      	b.n	1a9a8 <hif_handle_isr+0x110>
				gstrHifCxt.u32RxAddr = address;
   1a8ae:	4bc6      	ldr	r3, [pc, #792]	; (1abc8 <hif_handle_isr+0x330>)
   1a8b0:	9a05      	ldr	r2, [sp, #20]
   1a8b2:	609a      	str	r2, [r3, #8]
				gstrHifCxt.u32RxSize = size;
   1a8b4:	60df      	str	r7, [r3, #12]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
   1a8b6:	ad04      	add	r5, sp, #16
   1a8b8:	2204      	movs	r2, #4
   1a8ba:	0029      	movs	r1, r5
   1a8bc:	9805      	ldr	r0, [sp, #20]
   1a8be:	4bc3      	ldr	r3, [pc, #780]	; (1abcc <hif_handle_isr+0x334>)
   1a8c0:	4798      	blx	r3
   1a8c2:	0004      	movs	r4, r0
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
   1a8c4:	886b      	ldrh	r3, [r5, #2]
   1a8c6:	b29b      	uxth	r3, r3
   1a8c8:	806b      	strh	r3, [r5, #2]
				if(M2M_SUCCESS != ret)
   1a8ca:	2800      	cmp	r0, #0
   1a8cc:	d132      	bne.n	1a934 <hif_handle_isr+0x9c>
				if(strHif.u16Length != size)
   1a8ce:	ab04      	add	r3, sp, #16
   1a8d0:	885b      	ldrh	r3, [r3, #2]
   1a8d2:	b29b      	uxth	r3, r3
   1a8d4:	429f      	cmp	r7, r3
   1a8d6:	d004      	beq.n	1a8e2 <hif_handle_isr+0x4a>
					if((size - strHif.u16Length) > 4)
   1a8d8:	ab04      	add	r3, sp, #16
   1a8da:	885b      	ldrh	r3, [r3, #2]
   1a8dc:	1afb      	subs	r3, r7, r3
   1a8de:	2b04      	cmp	r3, #4
   1a8e0:	dc36      	bgt.n	1a950 <hif_handle_isr+0xb8>
				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
   1a8e2:	ab04      	add	r3, sp, #16
   1a8e4:	781b      	ldrb	r3, [r3, #0]
   1a8e6:	2b01      	cmp	r3, #1
   1a8e8:	d04a      	beq.n	1a980 <hif_handle_isr+0xe8>
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
   1a8ea:	ab04      	add	r3, sp, #16
   1a8ec:	781b      	ldrb	r3, [r3, #0]
   1a8ee:	2b02      	cmp	r3, #2
   1a8f0:	d076      	beq.n	1a9e0 <hif_handle_isr+0x148>
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
   1a8f2:	ab04      	add	r3, sp, #16
   1a8f4:	781b      	ldrb	r3, [r3, #0]
   1a8f6:	2b04      	cmp	r3, #4
   1a8f8:	d100      	bne.n	1a8fc <hif_handle_isr+0x64>
   1a8fa:	e08c      	b.n	1aa16 <hif_handle_isr+0x17e>
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
   1a8fc:	ab04      	add	r3, sp, #16
   1a8fe:	781b      	ldrb	r3, [r3, #0]
   1a900:	2b06      	cmp	r3, #6
   1a902:	d100      	bne.n	1a906 <hif_handle_isr+0x6e>
   1a904:	e0a2      	b.n	1aa4c <hif_handle_isr+0x1b4>
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
   1a906:	ab04      	add	r3, sp, #16
   1a908:	781b      	ldrb	r3, [r3, #0]
   1a90a:	2b07      	cmp	r3, #7
   1a90c:	d100      	bne.n	1a910 <hif_handle_isr+0x78>
   1a90e:	e0b8      	b.n	1aa82 <hif_handle_isr+0x1ea>
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
   1a910:	ab04      	add	r3, sp, #16
   1a912:	781b      	ldrb	r3, [r3, #0]
   1a914:	2b05      	cmp	r3, #5
   1a916:	d100      	bne.n	1a91a <hif_handle_isr+0x82>
   1a918:	e0cd      	b.n	1aab6 <hif_handle_isr+0x21e>
					M2M_ERR("(hif) invalid group ID\n");
   1a91a:	2284      	movs	r2, #132	; 0x84
   1a91c:	0092      	lsls	r2, r2, #2
   1a91e:	49ac      	ldr	r1, [pc, #688]	; (1abd0 <hif_handle_isr+0x338>)
   1a920:	48ac      	ldr	r0, [pc, #688]	; (1abd4 <hif_handle_isr+0x33c>)
   1a922:	4cad      	ldr	r4, [pc, #692]	; (1abd8 <hif_handle_isr+0x340>)
   1a924:	47a0      	blx	r4
   1a926:	48ad      	ldr	r0, [pc, #692]	; (1abdc <hif_handle_isr+0x344>)
   1a928:	47a0      	blx	r4
   1a92a:	48ad      	ldr	r0, [pc, #692]	; (1abe0 <hif_handle_isr+0x348>)
   1a92c:	47a0      	blx	r4
					ret = M2M_ERR_BUS_FAIL;
   1a92e:	2406      	movs	r4, #6
   1a930:	4264      	negs	r4, r4
   1a932:	e106      	b.n	1ab42 <hif_handle_isr+0x2aa>
					M2M_ERR("(hif) address bus fail\n");
   1a934:	22e9      	movs	r2, #233	; 0xe9
   1a936:	0052      	lsls	r2, r2, #1
   1a938:	49a5      	ldr	r1, [pc, #660]	; (1abd0 <hif_handle_isr+0x338>)
   1a93a:	48a6      	ldr	r0, [pc, #664]	; (1abd4 <hif_handle_isr+0x33c>)
   1a93c:	4da6      	ldr	r5, [pc, #664]	; (1abd8 <hif_handle_isr+0x340>)
   1a93e:	47a8      	blx	r5
   1a940:	48a8      	ldr	r0, [pc, #672]	; (1abe4 <hif_handle_isr+0x34c>)
   1a942:	47a8      	blx	r5
   1a944:	48a6      	ldr	r0, [pc, #664]	; (1abe0 <hif_handle_isr+0x348>)
   1a946:	47a8      	blx	r5
					nm_bsp_interrupt_ctrl(1);
   1a948:	2001      	movs	r0, #1
   1a94a:	4ba7      	ldr	r3, [pc, #668]	; (1abe8 <hif_handle_isr+0x350>)
   1a94c:	4798      	blx	r3
   1a94e:	e0f8      	b.n	1ab42 <hif_handle_isr+0x2aa>
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
   1a950:	22dc      	movs	r2, #220	; 0xdc
   1a952:	32ff      	adds	r2, #255	; 0xff
   1a954:	499e      	ldr	r1, [pc, #632]	; (1abd0 <hif_handle_isr+0x338>)
   1a956:	489f      	ldr	r0, [pc, #636]	; (1abd4 <hif_handle_isr+0x33c>)
   1a958:	4c9f      	ldr	r4, [pc, #636]	; (1abd8 <hif_handle_isr+0x340>)
   1a95a:	47a0      	blx	r4
   1a95c:	a904      	add	r1, sp, #16
   1a95e:	884a      	ldrh	r2, [r1, #2]
   1a960:	b292      	uxth	r2, r2
   1a962:	780b      	ldrb	r3, [r1, #0]
   1a964:	b2db      	uxtb	r3, r3
   1a966:	7849      	ldrb	r1, [r1, #1]
   1a968:	9100      	str	r1, [sp, #0]
   1a96a:	0039      	movs	r1, r7
   1a96c:	489f      	ldr	r0, [pc, #636]	; (1abec <hif_handle_isr+0x354>)
   1a96e:	47a0      	blx	r4
   1a970:	489b      	ldr	r0, [pc, #620]	; (1abe0 <hif_handle_isr+0x348>)
   1a972:	47a0      	blx	r4
						nm_bsp_interrupt_ctrl(1);
   1a974:	2001      	movs	r0, #1
   1a976:	4b9c      	ldr	r3, [pc, #624]	; (1abe8 <hif_handle_isr+0x350>)
   1a978:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
   1a97a:	2406      	movs	r4, #6
   1a97c:	4264      	negs	r4, r4
   1a97e:	e0e0      	b.n	1ab42 <hif_handle_isr+0x2aa>
					if(gstrHifCxt.pfWifiCb)
   1a980:	4b91      	ldr	r3, [pc, #580]	; (1abc8 <hif_handle_isr+0x330>)
   1a982:	691b      	ldr	r3, [r3, #16]
   1a984:	2b00      	cmp	r3, #0
   1a986:	d020      	beq.n	1a9ca <hif_handle_isr+0x132>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   1a988:	4b8f      	ldr	r3, [pc, #572]	; (1abc8 <hif_handle_isr+0x330>)
   1a98a:	691b      	ldr	r3, [r3, #16]
   1a98c:	aa04      	add	r2, sp, #16
   1a98e:	7850      	ldrb	r0, [r2, #1]
   1a990:	b2c0      	uxtb	r0, r0
   1a992:	8851      	ldrh	r1, [r2, #2]
   1a994:	9a05      	ldr	r2, [sp, #20]
   1a996:	3208      	adds	r2, #8
   1a998:	3908      	subs	r1, #8
   1a99a:	b289      	uxth	r1, r1
   1a99c:	4798      	blx	r3
				if(gstrHifCxt.u8HifRXDone)
   1a99e:	4b8a      	ldr	r3, [pc, #552]	; (1abc8 <hif_handle_isr+0x330>)
   1a9a0:	789b      	ldrb	r3, [r3, #2]
   1a9a2:	2b00      	cmp	r3, #0
   1a9a4:	d000      	beq.n	1a9a8 <hif_handle_isr+0x110>
   1a9a6:	e097      	b.n	1aad8 <hif_handle_isr+0x240>
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   1a9a8:	464b      	mov	r3, r9
   1a9aa:	78db      	ldrb	r3, [r3, #3]
   1a9ac:	2b00      	cmp	r3, #0
   1a9ae:	d100      	bne.n	1a9b2 <hif_handle_isr+0x11a>
   1a9b0:	e103      	b.n	1abba <hif_handle_isr+0x322>
   1a9b2:	4643      	mov	r3, r8
   1a9b4:	791b      	ldrb	r3, [r3, #4]
   1a9b6:	2b00      	cmp	r3, #0
   1a9b8:	d000      	beq.n	1a9bc <hif_handle_isr+0x124>
   1a9ba:	e0fe      	b.n	1abba <hif_handle_isr+0x322>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
   1a9bc:	4a82      	ldr	r2, [pc, #520]	; (1abc8 <hif_handle_isr+0x330>)
   1a9be:	78d3      	ldrb	r3, [r2, #3]
   1a9c0:	3b01      	subs	r3, #1
   1a9c2:	b2db      	uxtb	r3, r3
   1a9c4:	70d3      	strb	r3, [r2, #3]
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
   1a9c6:	4e8a      	ldr	r6, [pc, #552]	; (1abf0 <hif_handle_isr+0x358>)
   1a9c8:	e0c5      	b.n	1ab56 <hif_handle_isr+0x2be>
						M2M_ERR("WIFI callback is not registered\n");
   1a9ca:	22e8      	movs	r2, #232	; 0xe8
   1a9cc:	32ff      	adds	r2, #255	; 0xff
   1a9ce:	4980      	ldr	r1, [pc, #512]	; (1abd0 <hif_handle_isr+0x338>)
   1a9d0:	4880      	ldr	r0, [pc, #512]	; (1abd4 <hif_handle_isr+0x33c>)
   1a9d2:	4c81      	ldr	r4, [pc, #516]	; (1abd8 <hif_handle_isr+0x340>)
   1a9d4:	47a0      	blx	r4
   1a9d6:	4887      	ldr	r0, [pc, #540]	; (1abf4 <hif_handle_isr+0x35c>)
   1a9d8:	47a0      	blx	r4
   1a9da:	4881      	ldr	r0, [pc, #516]	; (1abe0 <hif_handle_isr+0x348>)
   1a9dc:	47a0      	blx	r4
   1a9de:	e7de      	b.n	1a99e <hif_handle_isr+0x106>
					if(gstrHifCxt.pfIpCb)
   1a9e0:	4b79      	ldr	r3, [pc, #484]	; (1abc8 <hif_handle_isr+0x330>)
   1a9e2:	695b      	ldr	r3, [r3, #20]
   1a9e4:	2b00      	cmp	r3, #0
   1a9e6:	d00b      	beq.n	1aa00 <hif_handle_isr+0x168>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   1a9e8:	4b77      	ldr	r3, [pc, #476]	; (1abc8 <hif_handle_isr+0x330>)
   1a9ea:	695b      	ldr	r3, [r3, #20]
   1a9ec:	aa04      	add	r2, sp, #16
   1a9ee:	7850      	ldrb	r0, [r2, #1]
   1a9f0:	b2c0      	uxtb	r0, r0
   1a9f2:	8851      	ldrh	r1, [r2, #2]
   1a9f4:	9a05      	ldr	r2, [sp, #20]
   1a9f6:	3208      	adds	r2, #8
   1a9f8:	3908      	subs	r1, #8
   1a9fa:	b289      	uxth	r1, r1
   1a9fc:	4798      	blx	r3
   1a9fe:	e7ce      	b.n	1a99e <hif_handle_isr+0x106>
						M2M_ERR("Scoket callback is not registered\n");
   1aa00:	22f0      	movs	r2, #240	; 0xf0
   1aa02:	32ff      	adds	r2, #255	; 0xff
   1aa04:	4972      	ldr	r1, [pc, #456]	; (1abd0 <hif_handle_isr+0x338>)
   1aa06:	4873      	ldr	r0, [pc, #460]	; (1abd4 <hif_handle_isr+0x33c>)
   1aa08:	4c73      	ldr	r4, [pc, #460]	; (1abd8 <hif_handle_isr+0x340>)
   1aa0a:	47a0      	blx	r4
   1aa0c:	487a      	ldr	r0, [pc, #488]	; (1abf8 <hif_handle_isr+0x360>)
   1aa0e:	47a0      	blx	r4
   1aa10:	4873      	ldr	r0, [pc, #460]	; (1abe0 <hif_handle_isr+0x348>)
   1aa12:	47a0      	blx	r4
   1aa14:	e7c3      	b.n	1a99e <hif_handle_isr+0x106>
					if(gstrHifCxt.pfOtaCb)
   1aa16:	4b6c      	ldr	r3, [pc, #432]	; (1abc8 <hif_handle_isr+0x330>)
   1aa18:	699b      	ldr	r3, [r3, #24]
   1aa1a:	2b00      	cmp	r3, #0
   1aa1c:	d00b      	beq.n	1aa36 <hif_handle_isr+0x19e>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   1aa1e:	4b6a      	ldr	r3, [pc, #424]	; (1abc8 <hif_handle_isr+0x330>)
   1aa20:	699b      	ldr	r3, [r3, #24]
   1aa22:	aa04      	add	r2, sp, #16
   1aa24:	7850      	ldrb	r0, [r2, #1]
   1aa26:	b2c0      	uxtb	r0, r0
   1aa28:	8851      	ldrh	r1, [r2, #2]
   1aa2a:	9a05      	ldr	r2, [sp, #20]
   1aa2c:	3208      	adds	r2, #8
   1aa2e:	3908      	subs	r1, #8
   1aa30:	b289      	uxth	r1, r1
   1aa32:	4798      	blx	r3
   1aa34:	e7b3      	b.n	1a99e <hif_handle_isr+0x106>
						M2M_ERR("Ota callback is not registered\n");
   1aa36:	22f8      	movs	r2, #248	; 0xf8
   1aa38:	32ff      	adds	r2, #255	; 0xff
   1aa3a:	4965      	ldr	r1, [pc, #404]	; (1abd0 <hif_handle_isr+0x338>)
   1aa3c:	4865      	ldr	r0, [pc, #404]	; (1abd4 <hif_handle_isr+0x33c>)
   1aa3e:	4c66      	ldr	r4, [pc, #408]	; (1abd8 <hif_handle_isr+0x340>)
   1aa40:	47a0      	blx	r4
   1aa42:	486e      	ldr	r0, [pc, #440]	; (1abfc <hif_handle_isr+0x364>)
   1aa44:	47a0      	blx	r4
   1aa46:	4866      	ldr	r0, [pc, #408]	; (1abe0 <hif_handle_isr+0x348>)
   1aa48:	47a0      	blx	r4
   1aa4a:	e7a8      	b.n	1a99e <hif_handle_isr+0x106>
					if(gstrHifCxt.pfCryptoCb)
   1aa4c:	4b5e      	ldr	r3, [pc, #376]	; (1abc8 <hif_handle_isr+0x330>)
   1aa4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1aa50:	2b00      	cmp	r3, #0
   1aa52:	d00b      	beq.n	1aa6c <hif_handle_isr+0x1d4>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   1aa54:	4b5c      	ldr	r3, [pc, #368]	; (1abc8 <hif_handle_isr+0x330>)
   1aa56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1aa58:	aa04      	add	r2, sp, #16
   1aa5a:	7850      	ldrb	r0, [r2, #1]
   1aa5c:	b2c0      	uxtb	r0, r0
   1aa5e:	8851      	ldrh	r1, [r2, #2]
   1aa60:	9a05      	ldr	r2, [sp, #20]
   1aa62:	3208      	adds	r2, #8
   1aa64:	3908      	subs	r1, #8
   1aa66:	b289      	uxth	r1, r1
   1aa68:	4798      	blx	r3
   1aa6a:	e798      	b.n	1a99e <hif_handle_isr+0x106>
						M2M_ERR("Crypto callback is not registered\n");
   1aa6c:	2280      	movs	r2, #128	; 0x80
   1aa6e:	0092      	lsls	r2, r2, #2
   1aa70:	4957      	ldr	r1, [pc, #348]	; (1abd0 <hif_handle_isr+0x338>)
   1aa72:	4858      	ldr	r0, [pc, #352]	; (1abd4 <hif_handle_isr+0x33c>)
   1aa74:	4c58      	ldr	r4, [pc, #352]	; (1abd8 <hif_handle_isr+0x340>)
   1aa76:	47a0      	blx	r4
   1aa78:	4861      	ldr	r0, [pc, #388]	; (1ac00 <hif_handle_isr+0x368>)
   1aa7a:	47a0      	blx	r4
   1aa7c:	4858      	ldr	r0, [pc, #352]	; (1abe0 <hif_handle_isr+0x348>)
   1aa7e:	47a0      	blx	r4
   1aa80:	e78d      	b.n	1a99e <hif_handle_isr+0x106>
					if(gstrHifCxt.pfSigmaCb)
   1aa82:	4b51      	ldr	r3, [pc, #324]	; (1abc8 <hif_handle_isr+0x330>)
   1aa84:	69db      	ldr	r3, [r3, #28]
   1aa86:	2b00      	cmp	r3, #0
   1aa88:	d00b      	beq.n	1aaa2 <hif_handle_isr+0x20a>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   1aa8a:	4b4f      	ldr	r3, [pc, #316]	; (1abc8 <hif_handle_isr+0x330>)
   1aa8c:	69db      	ldr	r3, [r3, #28]
   1aa8e:	aa04      	add	r2, sp, #16
   1aa90:	7850      	ldrb	r0, [r2, #1]
   1aa92:	b2c0      	uxtb	r0, r0
   1aa94:	8851      	ldrh	r1, [r2, #2]
   1aa96:	9a05      	ldr	r2, [sp, #20]
   1aa98:	3208      	adds	r2, #8
   1aa9a:	3908      	subs	r1, #8
   1aa9c:	b289      	uxth	r1, r1
   1aa9e:	4798      	blx	r3
   1aaa0:	e77d      	b.n	1a99e <hif_handle_isr+0x106>
						M2M_ERR("Sigma callback is not registered\n");
   1aaa2:	4a58      	ldr	r2, [pc, #352]	; (1ac04 <hif_handle_isr+0x36c>)
   1aaa4:	494a      	ldr	r1, [pc, #296]	; (1abd0 <hif_handle_isr+0x338>)
   1aaa6:	484b      	ldr	r0, [pc, #300]	; (1abd4 <hif_handle_isr+0x33c>)
   1aaa8:	4c4b      	ldr	r4, [pc, #300]	; (1abd8 <hif_handle_isr+0x340>)
   1aaaa:	47a0      	blx	r4
   1aaac:	4856      	ldr	r0, [pc, #344]	; (1ac08 <hif_handle_isr+0x370>)
   1aaae:	47a0      	blx	r4
   1aab0:	484b      	ldr	r0, [pc, #300]	; (1abe0 <hif_handle_isr+0x348>)
   1aab2:	47a0      	blx	r4
   1aab4:	e773      	b.n	1a99e <hif_handle_isr+0x106>
				    if(gstrHifCxt.pfSslCb)
   1aab6:	4b44      	ldr	r3, [pc, #272]	; (1abc8 <hif_handle_isr+0x330>)
   1aab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1aaba:	2b00      	cmp	r3, #0
   1aabc:	d100      	bne.n	1aac0 <hif_handle_isr+0x228>
   1aabe:	e76e      	b.n	1a99e <hif_handle_isr+0x106>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   1aac0:	4b41      	ldr	r3, [pc, #260]	; (1abc8 <hif_handle_isr+0x330>)
   1aac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1aac4:	aa04      	add	r2, sp, #16
   1aac6:	7850      	ldrb	r0, [r2, #1]
   1aac8:	b2c0      	uxtb	r0, r0
   1aaca:	8851      	ldrh	r1, [r2, #2]
   1aacc:	9a05      	ldr	r2, [sp, #20]
   1aace:	3208      	adds	r2, #8
   1aad0:	3908      	subs	r1, #8
   1aad2:	b289      	uxth	r1, r1
   1aad4:	4798      	blx	r3
   1aad6:	e762      	b.n	1a99e <hif_handle_isr+0x106>
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
   1aad8:	4a4c      	ldr	r2, [pc, #304]	; (1ac0c <hif_handle_isr+0x374>)
   1aada:	493d      	ldr	r1, [pc, #244]	; (1abd0 <hif_handle_isr+0x338>)
   1aadc:	483d      	ldr	r0, [pc, #244]	; (1abd4 <hif_handle_isr+0x33c>)
   1aade:	4c3e      	ldr	r4, [pc, #248]	; (1abd8 <hif_handle_isr+0x340>)
   1aae0:	47a0      	blx	r4
   1aae2:	ab04      	add	r3, sp, #16
   1aae4:	7819      	ldrb	r1, [r3, #0]
   1aae6:	b2c9      	uxtb	r1, r1
   1aae8:	785a      	ldrb	r2, [r3, #1]
   1aaea:	b2d2      	uxtb	r2, r2
   1aaec:	4848      	ldr	r0, [pc, #288]	; (1ac10 <hif_handle_isr+0x378>)
   1aaee:	47a0      	blx	r4
   1aaf0:	483b      	ldr	r0, [pc, #236]	; (1abe0 <hif_handle_isr+0x348>)
   1aaf2:	47a0      	blx	r4
					ret = hif_set_rx_done();
   1aaf4:	4b47      	ldr	r3, [pc, #284]	; (1ac14 <hif_handle_isr+0x37c>)
   1aaf6:	4798      	blx	r3
   1aaf8:	1e04      	subs	r4, r0, #0
					if(ret != M2M_SUCCESS) goto ERR1;
   1aafa:	d122      	bne.n	1ab42 <hif_handle_isr+0x2aa>
   1aafc:	e754      	b.n	1a9a8 <hif_handle_isr+0x110>
				M2M_ERR("(hif) Wrong Size\n");
   1aafe:	4a46      	ldr	r2, [pc, #280]	; (1ac18 <hif_handle_isr+0x380>)
   1ab00:	4933      	ldr	r1, [pc, #204]	; (1abd0 <hif_handle_isr+0x338>)
   1ab02:	4834      	ldr	r0, [pc, #208]	; (1abd4 <hif_handle_isr+0x33c>)
   1ab04:	4c34      	ldr	r4, [pc, #208]	; (1abd8 <hif_handle_isr+0x340>)
   1ab06:	47a0      	blx	r4
   1ab08:	4844      	ldr	r0, [pc, #272]	; (1ac1c <hif_handle_isr+0x384>)
   1ab0a:	47a0      	blx	r4
   1ab0c:	4834      	ldr	r0, [pc, #208]	; (1abe0 <hif_handle_isr+0x348>)
   1ab0e:	47a0      	blx	r4
				ret = M2M_ERR_RCV;
   1ab10:	2402      	movs	r4, #2
   1ab12:	4264      	negs	r4, r4
   1ab14:	e015      	b.n	1ab42 <hif_handle_isr+0x2aa>
			M2M_ERR("(hif) False interrupt %lx",reg);
   1ab16:	4a42      	ldr	r2, [pc, #264]	; (1ac20 <hif_handle_isr+0x388>)
   1ab18:	492d      	ldr	r1, [pc, #180]	; (1abd0 <hif_handle_isr+0x338>)
   1ab1a:	482e      	ldr	r0, [pc, #184]	; (1abd4 <hif_handle_isr+0x33c>)
   1ab1c:	4c2e      	ldr	r4, [pc, #184]	; (1abd8 <hif_handle_isr+0x340>)
   1ab1e:	47a0      	blx	r4
   1ab20:	9903      	ldr	r1, [sp, #12]
   1ab22:	4840      	ldr	r0, [pc, #256]	; (1ac24 <hif_handle_isr+0x38c>)
   1ab24:	47a0      	blx	r4
   1ab26:	482e      	ldr	r0, [pc, #184]	; (1abe0 <hif_handle_isr+0x348>)
   1ab28:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
   1ab2a:	240c      	movs	r4, #12
   1ab2c:	4264      	negs	r4, r4
   1ab2e:	e008      	b.n	1ab42 <hif_handle_isr+0x2aa>
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
   1ab30:	4a3d      	ldr	r2, [pc, #244]	; (1ac28 <hif_handle_isr+0x390>)
   1ab32:	4927      	ldr	r1, [pc, #156]	; (1abd0 <hif_handle_isr+0x338>)
   1ab34:	4827      	ldr	r0, [pc, #156]	; (1abd4 <hif_handle_isr+0x33c>)
   1ab36:	4d28      	ldr	r5, [pc, #160]	; (1abd8 <hif_handle_isr+0x340>)
   1ab38:	47a8      	blx	r5
   1ab3a:	483c      	ldr	r0, [pc, #240]	; (1ac2c <hif_handle_isr+0x394>)
   1ab3c:	47a8      	blx	r5
   1ab3e:	4828      	ldr	r0, [pc, #160]	; (1abe0 <hif_handle_isr+0x348>)
   1ab40:	47a8      	blx	r5
			if(ret == M2M_SUCCESS) {
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
   1ab42:	4a3b      	ldr	r2, [pc, #236]	; (1ac30 <hif_handle_isr+0x398>)
   1ab44:	493b      	ldr	r1, [pc, #236]	; (1ac34 <hif_handle_isr+0x39c>)
   1ab46:	4823      	ldr	r0, [pc, #140]	; (1abd4 <hif_handle_isr+0x33c>)
   1ab48:	4d23      	ldr	r5, [pc, #140]	; (1abd8 <hif_handle_isr+0x340>)
   1ab4a:	47a8      	blx	r5
   1ab4c:	0021      	movs	r1, r4
   1ab4e:	483a      	ldr	r0, [pc, #232]	; (1ac38 <hif_handle_isr+0x3a0>)
   1ab50:	47a8      	blx	r5
   1ab52:	4823      	ldr	r0, [pc, #140]	; (1abe0 <hif_handle_isr+0x348>)
   1ab54:	47a8      	blx	r5
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
   1ab56:	a903      	add	r1, sp, #12
   1ab58:	4838      	ldr	r0, [pc, #224]	; (1ac3c <hif_handle_isr+0x3a4>)
   1ab5a:	47b0      	blx	r6
   1ab5c:	1e04      	subs	r4, r0, #0
	if(M2M_SUCCESS == ret)
   1ab5e:	d1e7      	bne.n	1ab30 <hif_handle_isr+0x298>
		if(reg & 0x1)	/* New interrupt has been received */
   1ab60:	9b03      	ldr	r3, [sp, #12]
   1ab62:	07db      	lsls	r3, r3, #31
   1ab64:	d5d7      	bpl.n	1ab16 <hif_handle_isr+0x27e>
			nm_bsp_interrupt_ctrl(0);
   1ab66:	2000      	movs	r0, #0
   1ab68:	4b1f      	ldr	r3, [pc, #124]	; (1abe8 <hif_handle_isr+0x350>)
   1ab6a:	4798      	blx	r3
			reg &= ~NBIT0;
   1ab6c:	2301      	movs	r3, #1
   1ab6e:	9903      	ldr	r1, [sp, #12]
   1ab70:	4399      	bics	r1, r3
   1ab72:	9103      	str	r1, [sp, #12]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   1ab74:	4831      	ldr	r0, [pc, #196]	; (1ac3c <hif_handle_isr+0x3a4>)
   1ab76:	4b32      	ldr	r3, [pc, #200]	; (1ac40 <hif_handle_isr+0x3a8>)
   1ab78:	4798      	blx	r3
   1ab7a:	1e04      	subs	r4, r0, #0
			if(ret != M2M_SUCCESS)goto ERR1;
   1ab7c:	d1e1      	bne.n	1ab42 <hif_handle_isr+0x2aa>
			gstrHifCxt.u8HifRXDone = 1;
   1ab7e:	2201      	movs	r2, #1
   1ab80:	4b11      	ldr	r3, [pc, #68]	; (1abc8 <hif_handle_isr+0x330>)
   1ab82:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
   1ab84:	9b03      	ldr	r3, [sp, #12]
   1ab86:	049f      	lsls	r7, r3, #18
   1ab88:	0d3f      	lsrs	r7, r7, #20
			if (size > 0) {
   1ab8a:	d0b8      	beq.n	1aafe <hif_handle_isr+0x266>
				uint32 address = 0;
   1ab8c:	2300      	movs	r3, #0
   1ab8e:	9305      	str	r3, [sp, #20]
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
   1ab90:	a905      	add	r1, sp, #20
   1ab92:	482c      	ldr	r0, [pc, #176]	; (1ac44 <hif_handle_isr+0x3ac>)
   1ab94:	4b16      	ldr	r3, [pc, #88]	; (1abf0 <hif_handle_isr+0x358>)
   1ab96:	4798      	blx	r3
   1ab98:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret)
   1ab9a:	d100      	bne.n	1ab9e <hif_handle_isr+0x306>
   1ab9c:	e687      	b.n	1a8ae <hif_handle_isr+0x16>
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
   1ab9e:	22e4      	movs	r2, #228	; 0xe4
   1aba0:	0052      	lsls	r2, r2, #1
   1aba2:	490b      	ldr	r1, [pc, #44]	; (1abd0 <hif_handle_isr+0x338>)
   1aba4:	480b      	ldr	r0, [pc, #44]	; (1abd4 <hif_handle_isr+0x33c>)
   1aba6:	4d0c      	ldr	r5, [pc, #48]	; (1abd8 <hif_handle_isr+0x340>)
   1aba8:	47a8      	blx	r5
   1abaa:	4827      	ldr	r0, [pc, #156]	; (1ac48 <hif_handle_isr+0x3b0>)
   1abac:	47a8      	blx	r5
   1abae:	480c      	ldr	r0, [pc, #48]	; (1abe0 <hif_handle_isr+0x348>)
   1abb0:	47a8      	blx	r5
					nm_bsp_interrupt_ctrl(1);
   1abb2:	2001      	movs	r0, #1
   1abb4:	4b0c      	ldr	r3, [pc, #48]	; (1abe8 <hif_handle_isr+0x350>)
   1abb6:	4798      	blx	r3
   1abb8:	e7c3      	b.n	1ab42 <hif_handle_isr+0x2aa>
			}
		}
	}

	return ret;
}
   1abba:	2000      	movs	r0, #0
   1abbc:	b007      	add	sp, #28
   1abbe:	bc0c      	pop	{r2, r3}
   1abc0:	4690      	mov	r8, r2
   1abc2:	4699      	mov	r9, r3
   1abc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1abc6:	46c0      	nop			; (mov r8, r8)
   1abc8:	200053d4 	.word	0x200053d4
   1abcc:	0001b931 	.word	0x0001b931
   1abd0:	0002a154 	.word	0x0002a154
   1abd4:	0002a0fc 	.word	0x0002a0fc
   1abd8:	0001913d 	.word	0x0001913d
   1abdc:	0002a2b8 	.word	0x0002a2b8
   1abe0:	0002a124 	.word	0x0002a124
   1abe4:	0002a1b0 	.word	0x0002a1b0
   1abe8:	0001a271 	.word	0x0001a271
   1abec:	0002a1c8 	.word	0x0002a1c8
   1abf0:	0001b919 	.word	0x0001b919
   1abf4:	0002a208 	.word	0x0002a208
   1abf8:	0002a22c 	.word	0x0002a22c
   1abfc:	0002a250 	.word	0x0002a250
   1ac00:	0002a270 	.word	0x0002a270
   1ac04:	00000207 	.word	0x00000207
   1ac08:	0002a294 	.word	0x0002a294
   1ac0c:	00000216 	.word	0x00000216
   1ac10:	0002a2d0 	.word	0x0002a2d0
   1ac14:	0001a59d 	.word	0x0001a59d
   1ac18:	0000021d 	.word	0x0000021d
   1ac1c:	0002a2fc 	.word	0x0002a2fc
   1ac20:	00000225 	.word	0x00000225
   1ac24:	0002a310 	.word	0x0002a310
   1ac28:	0000022e 	.word	0x0000022e
   1ac2c:	0002a32c 	.word	0x0002a32c
   1ac30:	00000257 	.word	0x00000257
   1ac34:	0002a15c 	.word	0x0002a15c
   1ac38:	0002a350 	.word	0x0002a350
   1ac3c:	00001070 	.word	0x00001070
   1ac40:	0001b925 	.word	0x0001b925
   1ac44:	00001084 	.word	0x00001084
   1ac48:	0002a188 	.word	0x0002a188

0001ac4c <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
   1ac4c:	b570      	push	{r4, r5, r6, lr}
   1ac4e:	0014      	movs	r4, r2
   1ac50:	001d      	movs	r5, r3
	sint8 ret = M2M_SUCCESS;
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
   1ac52:	2800      	cmp	r0, #0
   1ac54:	d003      	beq.n	1ac5e <hif_receive+0x12>
   1ac56:	2900      	cmp	r1, #0
   1ac58:	d001      	beq.n	1ac5e <hif_receive+0x12>
   1ac5a:	2a00      	cmp	r2, #0
   1ac5c:	d111      	bne.n	1ac82 <hif_receive+0x36>
	{
		if(isDone)
   1ac5e:	2d00      	cmp	r5, #0
   1ac60:	d002      	beq.n	1ac68 <hif_receive+0x1c>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
   1ac62:	4b25      	ldr	r3, [pc, #148]	; (1acf8 <hif_receive+0xac>)
   1ac64:	4798      	blx	r3
		ret = hif_set_rx_done();
	}

ERR1:
	return ret;
}
   1ac66:	bd70      	pop	{r4, r5, r6, pc}
			M2M_ERR(" hif_receive: Invalid argument\n");
   1ac68:	229e      	movs	r2, #158	; 0x9e
   1ac6a:	0092      	lsls	r2, r2, #2
   1ac6c:	4923      	ldr	r1, [pc, #140]	; (1acfc <hif_receive+0xb0>)
   1ac6e:	4824      	ldr	r0, [pc, #144]	; (1ad00 <hif_receive+0xb4>)
   1ac70:	4c24      	ldr	r4, [pc, #144]	; (1ad04 <hif_receive+0xb8>)
   1ac72:	47a0      	blx	r4
   1ac74:	4824      	ldr	r0, [pc, #144]	; (1ad08 <hif_receive+0xbc>)
   1ac76:	47a0      	blx	r4
   1ac78:	4824      	ldr	r0, [pc, #144]	; (1ad0c <hif_receive+0xc0>)
   1ac7a:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
   1ac7c:	200c      	movs	r0, #12
   1ac7e:	4240      	negs	r0, r0
   1ac80:	e7f1      	b.n	1ac66 <hif_receive+0x1a>
	if(u16Sz > gstrHifCxt.u32RxSize)
   1ac82:	4b23      	ldr	r3, [pc, #140]	; (1ad10 <hif_receive+0xc4>)
   1ac84:	68db      	ldr	r3, [r3, #12]
   1ac86:	429a      	cmp	r2, r3
   1ac88:	d81a      	bhi.n	1acc0 <hif_receive+0x74>
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
   1ac8a:	4b21      	ldr	r3, [pc, #132]	; (1ad10 <hif_receive+0xc4>)
   1ac8c:	689b      	ldr	r3, [r3, #8]
   1ac8e:	4298      	cmp	r0, r3
   1ac90:	d326      	bcc.n	1ace0 <hif_receive+0x94>
   1ac92:	1886      	adds	r6, r0, r2
   1ac94:	4a1e      	ldr	r2, [pc, #120]	; (1ad10 <hif_receive+0xc4>)
   1ac96:	6893      	ldr	r3, [r2, #8]
   1ac98:	68d2      	ldr	r2, [r2, #12]
   1ac9a:	189b      	adds	r3, r3, r2
   1ac9c:	429e      	cmp	r6, r3
   1ac9e:	d81f      	bhi.n	1ace0 <hif_receive+0x94>
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
   1aca0:	0022      	movs	r2, r4
   1aca2:	4b1c      	ldr	r3, [pc, #112]	; (1ad14 <hif_receive+0xc8>)
   1aca4:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
   1aca6:	2800      	cmp	r0, #0
   1aca8:	d1dd      	bne.n	1ac66 <hif_receive+0x1a>
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
   1acaa:	4a19      	ldr	r2, [pc, #100]	; (1ad10 <hif_receive+0xc4>)
   1acac:	6893      	ldr	r3, [r2, #8]
   1acae:	68d2      	ldr	r2, [r2, #12]
   1acb0:	189b      	adds	r3, r3, r2
   1acb2:	429e      	cmp	r6, r3
   1acb4:	d001      	beq.n	1acba <hif_receive+0x6e>
   1acb6:	2d00      	cmp	r5, #0
   1acb8:	d0d5      	beq.n	1ac66 <hif_receive+0x1a>
		ret = hif_set_rx_done();
   1acba:	4b0f      	ldr	r3, [pc, #60]	; (1acf8 <hif_receive+0xac>)
   1acbc:	4798      	blx	r3
   1acbe:	e7d2      	b.n	1ac66 <hif_receive+0x1a>
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
   1acc0:	22a0      	movs	r2, #160	; 0xa0
   1acc2:	0092      	lsls	r2, r2, #2
   1acc4:	490d      	ldr	r1, [pc, #52]	; (1acfc <hif_receive+0xb0>)
   1acc6:	480e      	ldr	r0, [pc, #56]	; (1ad00 <hif_receive+0xb4>)
   1acc8:	4d0e      	ldr	r5, [pc, #56]	; (1ad04 <hif_receive+0xb8>)
   1acca:	47a8      	blx	r5
   1accc:	4b10      	ldr	r3, [pc, #64]	; (1ad10 <hif_receive+0xc4>)
   1acce:	68da      	ldr	r2, [r3, #12]
   1acd0:	0021      	movs	r1, r4
   1acd2:	4811      	ldr	r0, [pc, #68]	; (1ad18 <hif_receive+0xcc>)
   1acd4:	47a8      	blx	r5
   1acd6:	480d      	ldr	r0, [pc, #52]	; (1ad0c <hif_receive+0xc0>)
   1acd8:	47a8      	blx	r5
		ret = M2M_ERR_FAIL;
   1acda:	200c      	movs	r0, #12
   1acdc:	4240      	negs	r0, r0
		goto ERR1;
   1acde:	e7c2      	b.n	1ac66 <hif_receive+0x1a>
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
   1ace0:	4a0e      	ldr	r2, [pc, #56]	; (1ad1c <hif_receive+0xd0>)
   1ace2:	4906      	ldr	r1, [pc, #24]	; (1acfc <hif_receive+0xb0>)
   1ace4:	4806      	ldr	r0, [pc, #24]	; (1ad00 <hif_receive+0xb4>)
   1ace6:	4c07      	ldr	r4, [pc, #28]	; (1ad04 <hif_receive+0xb8>)
   1ace8:	47a0      	blx	r4
   1acea:	480d      	ldr	r0, [pc, #52]	; (1ad20 <hif_receive+0xd4>)
   1acec:	47a0      	blx	r4
   1acee:	4807      	ldr	r0, [pc, #28]	; (1ad0c <hif_receive+0xc0>)
   1acf0:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
   1acf2:	200c      	movs	r0, #12
   1acf4:	4240      	negs	r0, r0
		goto ERR1;
   1acf6:	e7b6      	b.n	1ac66 <hif_receive+0x1a>
   1acf8:	0001a59d 	.word	0x0001a59d
   1acfc:	0002a16c 	.word	0x0002a16c
   1ad00:	0002a0fc 	.word	0x0002a0fc
   1ad04:	0001913d 	.word	0x0001913d
   1ad08:	0002a380 	.word	0x0002a380
   1ad0c:	0002a124 	.word	0x0002a124
   1ad10:	200053d4 	.word	0x200053d4
   1ad14:	0001b931 	.word	0x0001b931
   1ad18:	0002a3a0 	.word	0x0002a3a0
   1ad1c:	00000286 	.word	0x00000286
   1ad20:	0002a3e8 	.word	0x0002a3e8

0001ad24 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
   1ad24:	b570      	push	{r4, r5, r6, lr}
   1ad26:	0004      	movs	r4, r0
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
   1ad28:	2807      	cmp	r0, #7
   1ad2a:	d81f      	bhi.n	1ad6c <hif_register_cb+0x48>
   1ad2c:	0083      	lsls	r3, r0, #2
   1ad2e:	4a16      	ldr	r2, [pc, #88]	; (1ad88 <hif_register_cb+0x64>)
   1ad30:	58d3      	ldr	r3, [r2, r3]
   1ad32:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
   1ad34:	4b15      	ldr	r3, [pc, #84]	; (1ad8c <hif_register_cb+0x68>)
   1ad36:	6159      	str	r1, [r3, #20]
	sint8 ret = M2M_SUCCESS;
   1ad38:	2000      	movs	r0, #0
			M2M_ERR("GRp ? %d\n",u8Grp);
			ret = M2M_ERR_FAIL;
			break;
	}
	return ret;
}
   1ad3a:	bd70      	pop	{r4, r5, r6, pc}
			gstrHifCxt.pfWifiCb = fn;
   1ad3c:	4b13      	ldr	r3, [pc, #76]	; (1ad8c <hif_register_cb+0x68>)
   1ad3e:	6119      	str	r1, [r3, #16]
	sint8 ret = M2M_SUCCESS;
   1ad40:	2000      	movs	r0, #0
			break;
   1ad42:	e7fa      	b.n	1ad3a <hif_register_cb+0x16>
			gstrHifCxt.pfOtaCb = fn;
   1ad44:	4b11      	ldr	r3, [pc, #68]	; (1ad8c <hif_register_cb+0x68>)
   1ad46:	6199      	str	r1, [r3, #24]
	sint8 ret = M2M_SUCCESS;
   1ad48:	2000      	movs	r0, #0
			break;
   1ad4a:	e7f6      	b.n	1ad3a <hif_register_cb+0x16>
			gstrHifCxt.pfHifCb = fn;
   1ad4c:	4b0f      	ldr	r3, [pc, #60]	; (1ad8c <hif_register_cb+0x68>)
   1ad4e:	6219      	str	r1, [r3, #32]
	sint8 ret = M2M_SUCCESS;
   1ad50:	2000      	movs	r0, #0
			break;
   1ad52:	e7f2      	b.n	1ad3a <hif_register_cb+0x16>
			gstrHifCxt.pfCryptoCb = fn;
   1ad54:	4b0d      	ldr	r3, [pc, #52]	; (1ad8c <hif_register_cb+0x68>)
   1ad56:	6259      	str	r1, [r3, #36]	; 0x24
	sint8 ret = M2M_SUCCESS;
   1ad58:	2000      	movs	r0, #0
			break;
   1ad5a:	e7ee      	b.n	1ad3a <hif_register_cb+0x16>
			gstrHifCxt.pfSigmaCb = fn;
   1ad5c:	4b0b      	ldr	r3, [pc, #44]	; (1ad8c <hif_register_cb+0x68>)
   1ad5e:	61d9      	str	r1, [r3, #28]
	sint8 ret = M2M_SUCCESS;
   1ad60:	2000      	movs	r0, #0
			break;
   1ad62:	e7ea      	b.n	1ad3a <hif_register_cb+0x16>
			gstrHifCxt.pfSslCb = fn;
   1ad64:	4b09      	ldr	r3, [pc, #36]	; (1ad8c <hif_register_cb+0x68>)
   1ad66:	6299      	str	r1, [r3, #40]	; 0x28
	sint8 ret = M2M_SUCCESS;
   1ad68:	2000      	movs	r0, #0
			break;
   1ad6a:	e7e6      	b.n	1ad3a <hif_register_cb+0x16>
			M2M_ERR("GRp ? %d\n",u8Grp);
   1ad6c:	4a08      	ldr	r2, [pc, #32]	; (1ad90 <hif_register_cb+0x6c>)
   1ad6e:	4909      	ldr	r1, [pc, #36]	; (1ad94 <hif_register_cb+0x70>)
   1ad70:	4809      	ldr	r0, [pc, #36]	; (1ad98 <hif_register_cb+0x74>)
   1ad72:	4d0a      	ldr	r5, [pc, #40]	; (1ad9c <hif_register_cb+0x78>)
   1ad74:	47a8      	blx	r5
   1ad76:	0021      	movs	r1, r4
   1ad78:	4809      	ldr	r0, [pc, #36]	; (1ada0 <hif_register_cb+0x7c>)
   1ad7a:	47a8      	blx	r5
   1ad7c:	4809      	ldr	r0, [pc, #36]	; (1ada4 <hif_register_cb+0x80>)
   1ad7e:	47a8      	blx	r5
			ret = M2M_ERR_FAIL;
   1ad80:	200c      	movs	r0, #12
   1ad82:	4240      	negs	r0, r0
			break;
   1ad84:	e7d9      	b.n	1ad3a <hif_register_cb+0x16>
   1ad86:	46c0      	nop			; (mov r8, r8)
   1ad88:	0002a128 	.word	0x0002a128
   1ad8c:	200053d4 	.word	0x200053d4
   1ad90:	000002be 	.word	0x000002be
   1ad94:	0002a178 	.word	0x0002a178
   1ad98:	0002a0fc 	.word	0x0002a0fc
   1ad9c:	0001913d 	.word	0x0001913d
   1ada0:	0002a42c 	.word	0x0002a42c
   1ada4:	0002a124 	.word	0x0002a124

0001ada8 <hif_init>:
{
   1ada8:	b510      	push	{r4, lr}
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
   1adaa:	222c      	movs	r2, #44	; 0x2c
   1adac:	2100      	movs	r1, #0
   1adae:	4806      	ldr	r0, [pc, #24]	; (1adc8 <hif_init+0x20>)
   1adb0:	4b06      	ldr	r3, [pc, #24]	; (1adcc <hif_init+0x24>)
   1adb2:	4798      	blx	r3
	nm_bsp_register_isr(isr);
   1adb4:	4806      	ldr	r0, [pc, #24]	; (1add0 <hif_init+0x28>)
   1adb6:	4b07      	ldr	r3, [pc, #28]	; (1add4 <hif_init+0x2c>)
   1adb8:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
   1adba:	4907      	ldr	r1, [pc, #28]	; (1add8 <hif_init+0x30>)
   1adbc:	2003      	movs	r0, #3
   1adbe:	4b07      	ldr	r3, [pc, #28]	; (1addc <hif_init+0x34>)
   1adc0:	4798      	blx	r3
}
   1adc2:	2000      	movs	r0, #0
   1adc4:	bd10      	pop	{r4, pc}
   1adc6:	46c0      	nop			; (mov r8, r8)
   1adc8:	200053d4 	.word	0x200053d4
   1adcc:	0001a55d 	.word	0x0001a55d
   1add0:	0001a589 	.word	0x0001a589
   1add4:	0001a219 	.word	0x0001a219
   1add8:	0001a599 	.word	0x0001a599
   1addc:	0001ad25 	.word	0x0001ad25

0001ade0 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
   1ade0:	b530      	push	{r4, r5, lr}
   1ade2:	b09f      	sub	sp, #124	; 0x7c
   1ade4:	0004      	movs	r4, r0
   1ade6:	0015      	movs	r5, r2
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
   1ade8:	282c      	cmp	r0, #44	; 0x2c
   1adea:	d02e      	beq.n	1ae4a <m2m_wifi_cb+0x6a>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
   1adec:	281b      	cmp	r0, #27
   1adee:	d03c      	beq.n	1ae6a <m2m_wifi_cb+0x8a>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
   1adf0:	2806      	cmp	r0, #6
   1adf2:	d04a      	beq.n	1ae8a <m2m_wifi_cb+0xaa>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
   1adf4:	280e      	cmp	r0, #14
   1adf6:	d026      	beq.n	1ae46 <m2m_wifi_cb+0x66>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
   1adf8:	2832      	cmp	r0, #50	; 0x32
   1adfa:	d056      	beq.n	1aeaa <m2m_wifi_cb+0xca>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
   1adfc:	282f      	cmp	r0, #47	; 0x2f
   1adfe:	d064      	beq.n	1aeca <m2m_wifi_cb+0xea>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
   1ae00:	2834      	cmp	r0, #52	; 0x34
   1ae02:	d100      	bne.n	1ae06 <m2m_wifi_cb+0x26>
   1ae04:	e076      	b.n	1aef4 <m2m_wifi_cb+0x114>
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
   1ae06:	2811      	cmp	r0, #17
   1ae08:	d100      	bne.n	1ae0c <m2m_wifi_cb+0x2c>
   1ae0a:	e094      	b.n	1af36 <m2m_wifi_cb+0x156>
			gu8ChNum = strState.u8NumofCh;
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
   1ae0c:	2813      	cmp	r0, #19
   1ae0e:	d100      	bne.n	1ae12 <m2m_wifi_cb+0x32>
   1ae10:	e0aa      	b.n	1af68 <m2m_wifi_cb+0x188>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
   1ae12:	2804      	cmp	r0, #4
   1ae14:	d100      	bne.n	1ae18 <m2m_wifi_cb+0x38>
   1ae16:	e0b9      	b.n	1af8c <m2m_wifi_cb+0x1ac>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
   1ae18:	2865      	cmp	r0, #101	; 0x65
   1ae1a:	d100      	bne.n	1ae1e <m2m_wifi_cb+0x3e>
   1ae1c:	e0c8      	b.n	1afb0 <m2m_wifi_cb+0x1d0>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
   1ae1e:	2809      	cmp	r0, #9
   1ae20:	d100      	bne.n	1ae24 <m2m_wifi_cb+0x44>
   1ae22:	e0d7      	b.n	1afd4 <m2m_wifi_cb+0x1f4>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
   1ae24:	282a      	cmp	r0, #42	; 0x2a
   1ae26:	d100      	bne.n	1ae2a <m2m_wifi_cb+0x4a>
   1ae28:	e0e6      	b.n	1aff8 <m2m_wifi_cb+0x218>
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
   1ae2a:	2820      	cmp	r0, #32
   1ae2c:	d100      	bne.n	1ae30 <m2m_wifi_cb+0x50>
   1ae2e:	e0f5      	b.n	1b01c <m2m_wifi_cb+0x23c>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
   1ae30:	2224      	movs	r2, #36	; 0x24
   1ae32:	32ff      	adds	r2, #255	; 0xff
   1ae34:	4988      	ldr	r1, [pc, #544]	; (1b058 <m2m_wifi_cb+0x278>)
   1ae36:	4889      	ldr	r0, [pc, #548]	; (1b05c <m2m_wifi_cb+0x27c>)
   1ae38:	4d89      	ldr	r5, [pc, #548]	; (1b060 <m2m_wifi_cb+0x280>)
   1ae3a:	47a8      	blx	r5
   1ae3c:	0021      	movs	r1, r4
   1ae3e:	4889      	ldr	r0, [pc, #548]	; (1b064 <m2m_wifi_cb+0x284>)
   1ae40:	47a8      	blx	r5
   1ae42:	4889      	ldr	r0, [pc, #548]	; (1b068 <m2m_wifi_cb+0x288>)
   1ae44:	47a8      	blx	r5
	}
}
   1ae46:	b01f      	add	sp, #124	; 0x7c
   1ae48:	bd30      	pop	{r4, r5, pc}
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
   1ae4a:	2300      	movs	r3, #0
   1ae4c:	2204      	movs	r2, #4
   1ae4e:	a903      	add	r1, sp, #12
   1ae50:	0028      	movs	r0, r5
   1ae52:	4c86      	ldr	r4, [pc, #536]	; (1b06c <m2m_wifi_cb+0x28c>)
   1ae54:	47a0      	blx	r4
   1ae56:	2800      	cmp	r0, #0
   1ae58:	d1f5      	bne.n	1ae46 <m2m_wifi_cb+0x66>
			if (gpfAppWifiCb)
   1ae5a:	4b85      	ldr	r3, [pc, #532]	; (1b070 <m2m_wifi_cb+0x290>)
   1ae5c:	681b      	ldr	r3, [r3, #0]
   1ae5e:	2b00      	cmp	r3, #0
   1ae60:	d0f1      	beq.n	1ae46 <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
   1ae62:	a903      	add	r1, sp, #12
   1ae64:	302c      	adds	r0, #44	; 0x2c
   1ae66:	4798      	blx	r3
   1ae68:	e7ed      	b.n	1ae46 <m2m_wifi_cb+0x66>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
   1ae6a:	2300      	movs	r3, #0
   1ae6c:	2208      	movs	r2, #8
   1ae6e:	a903      	add	r1, sp, #12
   1ae70:	0028      	movs	r0, r5
   1ae72:	4c7e      	ldr	r4, [pc, #504]	; (1b06c <m2m_wifi_cb+0x28c>)
   1ae74:	47a0      	blx	r4
   1ae76:	2800      	cmp	r0, #0
   1ae78:	d1e5      	bne.n	1ae46 <m2m_wifi_cb+0x66>
			if (gpfAppWifiCb)
   1ae7a:	4b7d      	ldr	r3, [pc, #500]	; (1b070 <m2m_wifi_cb+0x290>)
   1ae7c:	681b      	ldr	r3, [r3, #0]
   1ae7e:	2b00      	cmp	r3, #0
   1ae80:	d0e1      	beq.n	1ae46 <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
   1ae82:	a903      	add	r1, sp, #12
   1ae84:	301b      	adds	r0, #27
   1ae86:	4798      	blx	r3
   1ae88:	e7dd      	b.n	1ae46 <m2m_wifi_cb+0x66>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
   1ae8a:	2301      	movs	r3, #1
   1ae8c:	2230      	movs	r2, #48	; 0x30
   1ae8e:	a903      	add	r1, sp, #12
   1ae90:	0028      	movs	r0, r5
   1ae92:	4c76      	ldr	r4, [pc, #472]	; (1b06c <m2m_wifi_cb+0x28c>)
   1ae94:	47a0      	blx	r4
   1ae96:	2800      	cmp	r0, #0
   1ae98:	d1d5      	bne.n	1ae46 <m2m_wifi_cb+0x66>
			if(gpfAppWifiCb)
   1ae9a:	4b75      	ldr	r3, [pc, #468]	; (1b070 <m2m_wifi_cb+0x290>)
   1ae9c:	681b      	ldr	r3, [r3, #0]
   1ae9e:	2b00      	cmp	r3, #0
   1aea0:	d0d1      	beq.n	1ae46 <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
   1aea2:	a903      	add	r1, sp, #12
   1aea4:	3006      	adds	r0, #6
   1aea6:	4798      	blx	r3
   1aea8:	e7cd      	b.n	1ae46 <m2m_wifi_cb+0x66>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
   1aeaa:	2300      	movs	r3, #0
   1aeac:	2218      	movs	r2, #24
   1aeae:	a903      	add	r1, sp, #12
   1aeb0:	0028      	movs	r0, r5
   1aeb2:	4c6e      	ldr	r4, [pc, #440]	; (1b06c <m2m_wifi_cb+0x28c>)
   1aeb4:	47a0      	blx	r4
   1aeb6:	2800      	cmp	r0, #0
   1aeb8:	d1c5      	bne.n	1ae46 <m2m_wifi_cb+0x66>
			if (gpfAppWifiCb)
   1aeba:	4b6d      	ldr	r3, [pc, #436]	; (1b070 <m2m_wifi_cb+0x290>)
   1aebc:	681b      	ldr	r3, [r3, #0]
   1aebe:	2b00      	cmp	r3, #0
   1aec0:	d0c1      	beq.n	1ae46 <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
   1aec2:	a903      	add	r1, sp, #12
   1aec4:	3032      	adds	r0, #50	; 0x32
   1aec6:	4798      	blx	r3
   1aec8:	e7bd      	b.n	1ae46 <m2m_wifi_cb+0x66>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
   1aeca:	2264      	movs	r2, #100	; 0x64
   1aecc:	2100      	movs	r1, #0
   1aece:	a803      	add	r0, sp, #12
   1aed0:	4b68      	ldr	r3, [pc, #416]	; (1b074 <m2m_wifi_cb+0x294>)
   1aed2:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
   1aed4:	2300      	movs	r3, #0
   1aed6:	2264      	movs	r2, #100	; 0x64
   1aed8:	a903      	add	r1, sp, #12
   1aeda:	0028      	movs	r0, r5
   1aedc:	4c63      	ldr	r4, [pc, #396]	; (1b06c <m2m_wifi_cb+0x28c>)
   1aede:	47a0      	blx	r4
   1aee0:	2800      	cmp	r0, #0
   1aee2:	d1b0      	bne.n	1ae46 <m2m_wifi_cb+0x66>
			if (gpfAppWifiCb)
   1aee4:	4b62      	ldr	r3, [pc, #392]	; (1b070 <m2m_wifi_cb+0x290>)
   1aee6:	681b      	ldr	r3, [r3, #0]
   1aee8:	2b00      	cmp	r3, #0
   1aeea:	d0ac      	beq.n	1ae46 <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
   1aeec:	a903      	add	r1, sp, #12
   1aeee:	302f      	adds	r0, #47	; 0x2f
   1aef0:	4798      	blx	r3
   1aef2:	e7a8      	b.n	1ae46 <m2m_wifi_cb+0x66>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
   1aef4:	2300      	movs	r3, #0
   1aef6:	2204      	movs	r2, #4
   1aef8:	a903      	add	r1, sp, #12
   1aefa:	0028      	movs	r0, r5
   1aefc:	4c5b      	ldr	r4, [pc, #364]	; (1b06c <m2m_wifi_cb+0x28c>)
   1aefe:	47a0      	blx	r4
   1af00:	2800      	cmp	r0, #0
   1af02:	d1a0      	bne.n	1ae46 <m2m_wifi_cb+0x66>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
   1af04:	485c      	ldr	r0, [pc, #368]	; (1b078 <m2m_wifi_cb+0x298>)
   1af06:	4d56      	ldr	r5, [pc, #344]	; (1b060 <m2m_wifi_cb+0x280>)
   1af08:	47a8      	blx	r5
   1af0a:	9c03      	ldr	r4, [sp, #12]
   1af0c:	0a23      	lsrs	r3, r4, #8
   1af0e:	20ff      	movs	r0, #255	; 0xff
   1af10:	4003      	ands	r3, r0
   1af12:	0c22      	lsrs	r2, r4, #16
   1af14:	4002      	ands	r2, r0
   1af16:	0e21      	lsrs	r1, r4, #24
   1af18:	4020      	ands	r0, r4
   1af1a:	9000      	str	r0, [sp, #0]
   1af1c:	4857      	ldr	r0, [pc, #348]	; (1b07c <m2m_wifi_cb+0x29c>)
   1af1e:	47a8      	blx	r5
   1af20:	4851      	ldr	r0, [pc, #324]	; (1b068 <m2m_wifi_cb+0x288>)
   1af22:	47a8      	blx	r5
			if (gpfAppWifiCb)
   1af24:	4b52      	ldr	r3, [pc, #328]	; (1b070 <m2m_wifi_cb+0x290>)
   1af26:	681b      	ldr	r3, [r3, #0]
   1af28:	2b00      	cmp	r3, #0
   1af2a:	d100      	bne.n	1af2e <m2m_wifi_cb+0x14e>
   1af2c:	e78b      	b.n	1ae46 <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
   1af2e:	2100      	movs	r1, #0
   1af30:	2034      	movs	r0, #52	; 0x34
   1af32:	4798      	blx	r3
   1af34:	e787      	b.n	1ae46 <m2m_wifi_cb+0x66>
		gu8scanInProgress = 0;
   1af36:	2200      	movs	r2, #0
   1af38:	4b51      	ldr	r3, [pc, #324]	; (1b080 <m2m_wifi_cb+0x2a0>)
   1af3a:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
   1af3c:	2300      	movs	r3, #0
   1af3e:	3204      	adds	r2, #4
   1af40:	a903      	add	r1, sp, #12
   1af42:	0028      	movs	r0, r5
   1af44:	4c49      	ldr	r4, [pc, #292]	; (1b06c <m2m_wifi_cb+0x28c>)
   1af46:	47a0      	blx	r4
   1af48:	2800      	cmp	r0, #0
   1af4a:	d000      	beq.n	1af4e <m2m_wifi_cb+0x16e>
   1af4c:	e77b      	b.n	1ae46 <m2m_wifi_cb+0x66>
			gu8ChNum = strState.u8NumofCh;
   1af4e:	ab03      	add	r3, sp, #12
   1af50:	781a      	ldrb	r2, [r3, #0]
   1af52:	4b4c      	ldr	r3, [pc, #304]	; (1b084 <m2m_wifi_cb+0x2a4>)
   1af54:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
   1af56:	4b46      	ldr	r3, [pc, #280]	; (1b070 <m2m_wifi_cb+0x290>)
   1af58:	681b      	ldr	r3, [r3, #0]
   1af5a:	2b00      	cmp	r3, #0
   1af5c:	d100      	bne.n	1af60 <m2m_wifi_cb+0x180>
   1af5e:	e772      	b.n	1ae46 <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
   1af60:	a903      	add	r1, sp, #12
   1af62:	3011      	adds	r0, #17
   1af64:	4798      	blx	r3
   1af66:	e76e      	b.n	1ae46 <m2m_wifi_cb+0x66>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
   1af68:	2300      	movs	r3, #0
   1af6a:	222c      	movs	r2, #44	; 0x2c
   1af6c:	a903      	add	r1, sp, #12
   1af6e:	0028      	movs	r0, r5
   1af70:	4c3e      	ldr	r4, [pc, #248]	; (1b06c <m2m_wifi_cb+0x28c>)
   1af72:	47a0      	blx	r4
   1af74:	2800      	cmp	r0, #0
   1af76:	d000      	beq.n	1af7a <m2m_wifi_cb+0x19a>
   1af78:	e765      	b.n	1ae46 <m2m_wifi_cb+0x66>
			if (gpfAppWifiCb)
   1af7a:	4b3d      	ldr	r3, [pc, #244]	; (1b070 <m2m_wifi_cb+0x290>)
   1af7c:	681b      	ldr	r3, [r3, #0]
   1af7e:	2b00      	cmp	r3, #0
   1af80:	d100      	bne.n	1af84 <m2m_wifi_cb+0x1a4>
   1af82:	e760      	b.n	1ae46 <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
   1af84:	a903      	add	r1, sp, #12
   1af86:	3013      	adds	r0, #19
   1af88:	4798      	blx	r3
   1af8a:	e75c      	b.n	1ae46 <m2m_wifi_cb+0x66>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   1af8c:	2300      	movs	r3, #0
   1af8e:	2204      	movs	r2, #4
   1af90:	a91c      	add	r1, sp, #112	; 0x70
   1af92:	0028      	movs	r0, r5
   1af94:	4c35      	ldr	r4, [pc, #212]	; (1b06c <m2m_wifi_cb+0x28c>)
   1af96:	47a0      	blx	r4
   1af98:	2800      	cmp	r0, #0
   1af9a:	d000      	beq.n	1af9e <m2m_wifi_cb+0x1be>
   1af9c:	e753      	b.n	1ae46 <m2m_wifi_cb+0x66>
			if (gpfAppWifiCb)
   1af9e:	4b34      	ldr	r3, [pc, #208]	; (1b070 <m2m_wifi_cb+0x290>)
   1afa0:	681b      	ldr	r3, [r3, #0]
   1afa2:	2b00      	cmp	r3, #0
   1afa4:	d100      	bne.n	1afa8 <m2m_wifi_cb+0x1c8>
   1afa6:	e74e      	b.n	1ae46 <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
   1afa8:	a91c      	add	r1, sp, #112	; 0x70
   1afaa:	3004      	adds	r0, #4
   1afac:	4798      	blx	r3
   1afae:	e74a      	b.n	1ae46 <m2m_wifi_cb+0x66>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   1afb0:	2300      	movs	r3, #0
   1afb2:	2204      	movs	r2, #4
   1afb4:	a91c      	add	r1, sp, #112	; 0x70
   1afb6:	0028      	movs	r0, r5
   1afb8:	4c2c      	ldr	r4, [pc, #176]	; (1b06c <m2m_wifi_cb+0x28c>)
   1afba:	47a0      	blx	r4
   1afbc:	2800      	cmp	r0, #0
   1afbe:	d000      	beq.n	1afc2 <m2m_wifi_cb+0x1e2>
   1afc0:	e741      	b.n	1ae46 <m2m_wifi_cb+0x66>
			if (gpfAppWifiCb)
   1afc2:	4b2b      	ldr	r3, [pc, #172]	; (1b070 <m2m_wifi_cb+0x290>)
   1afc4:	681b      	ldr	r3, [r3, #0]
   1afc6:	2b00      	cmp	r3, #0
   1afc8:	d100      	bne.n	1afcc <m2m_wifi_cb+0x1ec>
   1afca:	e73c      	b.n	1ae46 <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
   1afcc:	a91c      	add	r1, sp, #112	; 0x70
   1afce:	3065      	adds	r0, #101	; 0x65
   1afd0:	4798      	blx	r3
   1afd2:	e738      	b.n	1ae46 <m2m_wifi_cb+0x66>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
   1afd4:	2301      	movs	r3, #1
   1afd6:	2264      	movs	r2, #100	; 0x64
   1afd8:	a903      	add	r1, sp, #12
   1afda:	0028      	movs	r0, r5
   1afdc:	4c23      	ldr	r4, [pc, #140]	; (1b06c <m2m_wifi_cb+0x28c>)
   1afde:	47a0      	blx	r4
   1afe0:	2800      	cmp	r0, #0
   1afe2:	d000      	beq.n	1afe6 <m2m_wifi_cb+0x206>
   1afe4:	e72f      	b.n	1ae46 <m2m_wifi_cb+0x66>
			if(gpfAppWifiCb)
   1afe6:	4b22      	ldr	r3, [pc, #136]	; (1b070 <m2m_wifi_cb+0x290>)
   1afe8:	681b      	ldr	r3, [r3, #0]
   1afea:	2b00      	cmp	r3, #0
   1afec:	d100      	bne.n	1aff0 <m2m_wifi_cb+0x210>
   1afee:	e72a      	b.n	1ae46 <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
   1aff0:	a903      	add	r1, sp, #12
   1aff2:	3009      	adds	r0, #9
   1aff4:	4798      	blx	r3
   1aff6:	e726      	b.n	1ae46 <m2m_wifi_cb+0x66>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
   1aff8:	2301      	movs	r3, #1
   1affa:	2204      	movs	r2, #4
   1affc:	a903      	add	r1, sp, #12
   1affe:	0028      	movs	r0, r5
   1b000:	4c1a      	ldr	r4, [pc, #104]	; (1b06c <m2m_wifi_cb+0x28c>)
   1b002:	47a0      	blx	r4
   1b004:	2800      	cmp	r0, #0
   1b006:	d000      	beq.n	1b00a <m2m_wifi_cb+0x22a>
   1b008:	e71d      	b.n	1ae46 <m2m_wifi_cb+0x66>
			if(gpfAppWifiCb)
   1b00a:	4b19      	ldr	r3, [pc, #100]	; (1b070 <m2m_wifi_cb+0x290>)
   1b00c:	681b      	ldr	r3, [r3, #0]
   1b00e:	2b00      	cmp	r3, #0
   1b010:	d100      	bne.n	1b014 <m2m_wifi_cb+0x234>
   1b012:	e718      	b.n	1ae46 <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
   1b014:	a903      	add	r1, sp, #12
   1b016:	302a      	adds	r0, #42	; 0x2a
   1b018:	4798      	blx	r3
   1b01a:	e714      	b.n	1ae46 <m2m_wifi_cb+0x66>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
   1b01c:	2300      	movs	r3, #0
   1b01e:	2208      	movs	r2, #8
   1b020:	a903      	add	r1, sp, #12
   1b022:	0028      	movs	r0, r5
   1b024:	4c11      	ldr	r4, [pc, #68]	; (1b06c <m2m_wifi_cb+0x28c>)
   1b026:	47a0      	blx	r4
   1b028:	2800      	cmp	r0, #0
   1b02a:	d000      	beq.n	1b02e <m2m_wifi_cb+0x24e>
   1b02c:	e70b      	b.n	1ae46 <m2m_wifi_cb+0x66>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
   1b02e:	ab03      	add	r3, sp, #12
   1b030:	889a      	ldrh	r2, [r3, #4]
   1b032:	0028      	movs	r0, r5
   1b034:	3008      	adds	r0, #8
   1b036:	2301      	movs	r3, #1
   1b038:	9903      	ldr	r1, [sp, #12]
   1b03a:	4c0c      	ldr	r4, [pc, #48]	; (1b06c <m2m_wifi_cb+0x28c>)
   1b03c:	47a0      	blx	r4
   1b03e:	2800      	cmp	r0, #0
   1b040:	d000      	beq.n	1b044 <m2m_wifi_cb+0x264>
   1b042:	e700      	b.n	1ae46 <m2m_wifi_cb+0x66>
				if(gpfAppWifiCb)
   1b044:	4b0a      	ldr	r3, [pc, #40]	; (1b070 <m2m_wifi_cb+0x290>)
   1b046:	681b      	ldr	r3, [r3, #0]
   1b048:	2b00      	cmp	r3, #0
   1b04a:	d100      	bne.n	1b04e <m2m_wifi_cb+0x26e>
   1b04c:	e6fb      	b.n	1ae46 <m2m_wifi_cb+0x66>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
   1b04e:	a903      	add	r1, sp, #12
   1b050:	3020      	adds	r0, #32
   1b052:	4798      	blx	r3
   1b054:	e6f7      	b.n	1ae46 <m2m_wifi_cb+0x66>
   1b056:	46c0      	nop			; (mov r8, r8)
   1b058:	0002a478 	.word	0x0002a478
   1b05c:	0002a0fc 	.word	0x0002a0fc
   1b060:	0001913d 	.word	0x0001913d
   1b064:	0002a4c8 	.word	0x0002a4c8
   1b068:	0002a124 	.word	0x0002a124
   1b06c:	0001ac4d 	.word	0x0001ac4d
   1b070:	20003ca8 	.word	0x20003ca8
   1b074:	0001a55d 	.word	0x0001a55d
   1b078:	0002a438 	.word	0x0002a438
   1b07c:	0002a4a8 	.word	0x0002a4a8
   1b080:	20003cad 	.word	0x20003cad
   1b084:	20003cac 	.word	0x20003cac

0001b088 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
   1b088:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b08a:	b08f      	sub	sp, #60	; 0x3c
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
   1b08c:	2201      	movs	r2, #1
   1b08e:	230f      	movs	r3, #15
   1b090:	446b      	add	r3, sp
   1b092:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
   1b094:	2800      	cmp	r0, #0
   1b096:	d05f      	beq.n	1b158 <m2m_wifi_init+0xd0>
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
   1b098:	6802      	ldr	r2, [r0, #0]
   1b09a:	4b31      	ldr	r3, [pc, #196]	; (1b160 <m2m_wifi_init+0xd8>)
   1b09c:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
   1b09e:	2200      	movs	r2, #0
   1b0a0:	4b30      	ldr	r3, [pc, #192]	; (1b164 <m2m_wifi_init+0xdc>)
   1b0a2:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
   1b0a4:	200f      	movs	r0, #15
   1b0a6:	4468      	add	r0, sp
   1b0a8:	4b2f      	ldr	r3, [pc, #188]	; (1b168 <m2m_wifi_init+0xe0>)
   1b0aa:	4798      	blx	r3
   1b0ac:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   1b0ae:	d002      	beq.n	1b0b6 <m2m_wifi_init+0x2e>

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
   1b0b0:	0020      	movs	r0, r4
   1b0b2:	b00f      	add	sp, #60	; 0x3c
   1b0b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = hif_init(NULL);
   1b0b6:	2000      	movs	r0, #0
   1b0b8:	4b2c      	ldr	r3, [pc, #176]	; (1b16c <m2m_wifi_init+0xe4>)
   1b0ba:	4798      	blx	r3
   1b0bc:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   1b0be:	d147      	bne.n	1b150 <m2m_wifi_init+0xc8>
	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
   1b0c0:	492b      	ldr	r1, [pc, #172]	; (1b170 <m2m_wifi_init+0xe8>)
   1b0c2:	2001      	movs	r0, #1
   1b0c4:	4b2b      	ldr	r3, [pc, #172]	; (1b174 <m2m_wifi_init+0xec>)
   1b0c6:	4798      	blx	r3
	ret = nm_get_firmware_full_info(&strtmp);
   1b0c8:	ad04      	add	r5, sp, #16
   1b0ca:	0028      	movs	r0, r5
   1b0cc:	4b2a      	ldr	r3, [pc, #168]	; (1b178 <m2m_wifi_init+0xf0>)
   1b0ce:	4798      	blx	r3
   1b0d0:	0004      	movs	r4, r0
	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
   1b0d2:	4f2a      	ldr	r7, [pc, #168]	; (1b17c <m2m_wifi_init+0xf4>)
   1b0d4:	0038      	movs	r0, r7
   1b0d6:	4e2a      	ldr	r6, [pc, #168]	; (1b180 <m2m_wifi_init+0xf8>)
   1b0d8:	47b0      	blx	r6
   1b0da:	79ab      	ldrb	r3, [r5, #6]
   1b0dc:	796a      	ldrb	r2, [r5, #5]
   1b0de:	7929      	ldrb	r1, [r5, #4]
   1b0e0:	8c28      	ldrh	r0, [r5, #32]
   1b0e2:	9000      	str	r0, [sp, #0]
   1b0e4:	4827      	ldr	r0, [pc, #156]	; (1b184 <m2m_wifi_init+0xfc>)
   1b0e6:	47b0      	blx	r6
   1b0e8:	4827      	ldr	r0, [pc, #156]	; (1b188 <m2m_wifi_init+0x100>)
   1b0ea:	47b0      	blx	r6
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
   1b0ec:	0038      	movs	r0, r7
   1b0ee:	47b0      	blx	r6
   1b0f0:	2226      	movs	r2, #38	; 0x26
   1b0f2:	446a      	add	r2, sp
   1b0f4:	211a      	movs	r1, #26
   1b0f6:	4469      	add	r1, sp
   1b0f8:	4824      	ldr	r0, [pc, #144]	; (1b18c <m2m_wifi_init+0x104>)
   1b0fa:	47b0      	blx	r6
   1b0fc:	4822      	ldr	r0, [pc, #136]	; (1b188 <m2m_wifi_init+0x100>)
   1b0fe:	47b0      	blx	r6
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
   1b100:	0038      	movs	r0, r7
   1b102:	47b0      	blx	r6
   1b104:	7a6b      	ldrb	r3, [r5, #9]
   1b106:	7a2a      	ldrb	r2, [r5, #8]
   1b108:	79e9      	ldrb	r1, [r5, #7]
   1b10a:	4821      	ldr	r0, [pc, #132]	; (1b190 <m2m_wifi_init+0x108>)
   1b10c:	47b0      	blx	r6
   1b10e:	481e      	ldr	r0, [pc, #120]	; (1b188 <m2m_wifi_init+0x100>)
   1b110:	47b0      	blx	r6
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
   1b112:	0038      	movs	r0, r7
   1b114:	47b0      	blx	r6
   1b116:	2304      	movs	r3, #4
   1b118:	2205      	movs	r2, #5
   1b11a:	2113      	movs	r1, #19
   1b11c:	481d      	ldr	r0, [pc, #116]	; (1b194 <m2m_wifi_init+0x10c>)
   1b11e:	47b0      	blx	r6
   1b120:	4819      	ldr	r0, [pc, #100]	; (1b188 <m2m_wifi_init+0x100>)
   1b122:	47b0      	blx	r6
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
   1b124:	0038      	movs	r0, r7
   1b126:	47b0      	blx	r6
   1b128:	4a1b      	ldr	r2, [pc, #108]	; (1b198 <m2m_wifi_init+0x110>)
   1b12a:	491c      	ldr	r1, [pc, #112]	; (1b19c <m2m_wifi_init+0x114>)
   1b12c:	481c      	ldr	r0, [pc, #112]	; (1b1a0 <m2m_wifi_init+0x118>)
   1b12e:	47b0      	blx	r6
   1b130:	4815      	ldr	r0, [pc, #84]	; (1b188 <m2m_wifi_init+0x100>)
   1b132:	47b0      	blx	r6
	if(M2M_ERR_FW_VER_MISMATCH == ret)
   1b134:	0023      	movs	r3, r4
   1b136:	330d      	adds	r3, #13
   1b138:	d1ba      	bne.n	1b0b0 <m2m_wifi_init+0x28>
		M2M_ERR("Mismatch Firmawre Version\n");
   1b13a:	22e8      	movs	r2, #232	; 0xe8
   1b13c:	32ff      	adds	r2, #255	; 0xff
   1b13e:	4919      	ldr	r1, [pc, #100]	; (1b1a4 <m2m_wifi_init+0x11c>)
   1b140:	4819      	ldr	r0, [pc, #100]	; (1b1a8 <m2m_wifi_init+0x120>)
   1b142:	4d0f      	ldr	r5, [pc, #60]	; (1b180 <m2m_wifi_init+0xf8>)
   1b144:	47a8      	blx	r5
   1b146:	4819      	ldr	r0, [pc, #100]	; (1b1ac <m2m_wifi_init+0x124>)
   1b148:	47a8      	blx	r5
   1b14a:	480f      	ldr	r0, [pc, #60]	; (1b188 <m2m_wifi_init+0x100>)
   1b14c:	47a8      	blx	r5
   1b14e:	e7af      	b.n	1b0b0 <m2m_wifi_init+0x28>
	nm_drv_deinit(NULL);
   1b150:	2000      	movs	r0, #0
   1b152:	4b17      	ldr	r3, [pc, #92]	; (1b1b0 <m2m_wifi_init+0x128>)
   1b154:	4798      	blx	r3
   1b156:	e7ab      	b.n	1b0b0 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
   1b158:	240c      	movs	r4, #12
   1b15a:	4264      	negs	r4, r4
   1b15c:	e7a8      	b.n	1b0b0 <m2m_wifi_init+0x28>
   1b15e:	46c0      	nop			; (mov r8, r8)
   1b160:	20003ca8 	.word	0x20003ca8
   1b164:	20003cad 	.word	0x20003cad
   1b168:	0001bae5 	.word	0x0001bae5
   1b16c:	0001ada9 	.word	0x0001ada9
   1b170:	0001ade1 	.word	0x0001ade1
   1b174:	0001ad25 	.word	0x0001ad25
   1b178:	0001ba01 	.word	0x0001ba01
   1b17c:	0002a438 	.word	0x0002a438
   1b180:	0001913d 	.word	0x0001913d
   1b184:	0002a588 	.word	0x0002a588
   1b188:	0002a124 	.word	0x0002a124
   1b18c:	0002a5b0 	.word	0x0002a5b0
   1b190:	0002a5cc 	.word	0x0002a5cc
   1b194:	0002a5f0 	.word	0x0002a5f0
   1b198:	0002a608 	.word	0x0002a608
   1b19c:	0002a614 	.word	0x0002a614
   1b1a0:	0002a620 	.word	0x0002a620
   1b1a4:	0002a484 	.word	0x0002a484
   1b1a8:	0002a0fc 	.word	0x0002a0fc
   1b1ac:	0002a638 	.word	0x0002a638
   1b1b0:	0001bbad 	.word	0x0001bbad

0001b1b4 <m2m_wifi_handle_events>:
{
	hif_yield();
}

sint8 m2m_wifi_handle_events(void * arg)
{
   1b1b4:	b510      	push	{r4, lr}
	return hif_handle_isr();
   1b1b6:	4b01      	ldr	r3, [pc, #4]	; (1b1bc <m2m_wifi_handle_events+0x8>)
   1b1b8:	4798      	blx	r3
}
   1b1ba:	bd10      	pop	{r4, pc}
   1b1bc:	0001a899 	.word	0x0001a899

0001b1c0 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
   1b1c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b1c2:	46ce      	mov	lr, r9
   1b1c4:	4647      	mov	r7, r8
   1b1c6:	b580      	push	{r7, lr}
   1b1c8:	b0a3      	sub	sp, #140	; 0x8c
   1b1ca:	9005      	str	r0, [sp, #20]
   1b1cc:	000c      	movs	r4, r1
   1b1ce:	0015      	movs	r5, r2
   1b1d0:	001f      	movs	r7, r3
   1b1d2:	ab2a      	add	r3, sp, #168	; 0xa8
   1b1d4:	881b      	ldrh	r3, [r3, #0]
   1b1d6:	4699      	mov	r9, r3
   1b1d8:	ab2b      	add	r3, sp, #172	; 0xac
   1b1da:	781b      	ldrb	r3, [r3, #0]
   1b1dc:	4698      	mov	r8, r3
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
   1b1de:	2a01      	cmp	r2, #1
   1b1e0:	d003      	beq.n	1b1ea <m2m_wifi_connect_sc+0x2a>
	{
		if(pvAuthInfo == NULL)
   1b1e2:	2f00      	cmp	r7, #0
   1b1e4:	d03f      	beq.n	1b266 <m2m_wifi_connect_sc+0xa6>
		{
			M2M_ERR("Key is not valid\n");
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
   1b1e6:	2a02      	cmp	r2, #2
   1b1e8:	d049      	beq.n	1b27e <m2m_wifi_connect_sc+0xbe>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
   1b1ea:	1e63      	subs	r3, r4, #1
   1b1ec:	2b1f      	cmp	r3, #31
   1b1ee:	d900      	bls.n	1b1f2 <m2m_wifi_connect_sc+0x32>
   1b1f0:	e073      	b.n	1b2da <m2m_wifi_connect_sc+0x11a>
		M2M_ERR("SSID LEN INVALID\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
   1b1f2:	464b      	mov	r3, r9
   1b1f4:	3b01      	subs	r3, #1
   1b1f6:	b29b      	uxth	r3, r3
   1b1f8:	2b0d      	cmp	r3, #13
   1b1fa:	d903      	bls.n	1b204 <m2m_wifi_connect_sc+0x44>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
   1b1fc:	464b      	mov	r3, r9
   1b1fe:	2bff      	cmp	r3, #255	; 0xff
   1b200:	d000      	beq.n	1b204 <m2m_wifi_connect_sc+0x44>
   1b202:	e077      	b.n	1b2f4 <m2m_wifi_connect_sc+0x134>
			goto ERR1;
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
   1b204:	ae07      	add	r6, sp, #28
   1b206:	0022      	movs	r2, r4
   1b208:	9905      	ldr	r1, [sp, #20]
   1b20a:	205a      	movs	r0, #90	; 0x5a
   1b20c:	ab02      	add	r3, sp, #8
   1b20e:	469c      	mov	ip, r3
   1b210:	4460      	add	r0, ip
   1b212:	4b71      	ldr	r3, [pc, #452]	; (1b3d8 <m2m_wifi_connect_sc+0x218>)
   1b214:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
   1b216:	1934      	adds	r4, r6, r4
   1b218:	3446      	adds	r4, #70	; 0x46
   1b21a:	2300      	movs	r3, #0
   1b21c:	7023      	strb	r3, [r4, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
   1b21e:	3344      	adds	r3, #68	; 0x44
   1b220:	464a      	mov	r2, r9
   1b222:	52f2      	strh	r2, [r6, r3]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
   1b224:	4643      	mov	r3, r8
   1b226:	1e5a      	subs	r2, r3, #1
   1b228:	4193      	sbcs	r3, r2
   1b22a:	2267      	movs	r2, #103	; 0x67
   1b22c:	54b3      	strb	r3, [r6, r2]
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType		= u8SecType;
   1b22e:	2341      	movs	r3, #65	; 0x41
   1b230:	54f5      	strb	r5, [r6, r3]

	if(u8SecType == M2M_WIFI_SEC_WEP)
   1b232:	2d03      	cmp	r5, #3
   1b234:	d06a      	beq.n	1b30c <m2m_wifi_connect_sc+0x14c>
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
   1b236:	2d02      	cmp	r5, #2
   1b238:	d100      	bne.n	1b23c <m2m_wifi_connect_sc+0x7c>
   1b23a:	e0a2      	b.n	1b382 <m2m_wifi_connect_sc+0x1c2>
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
   1b23c:	2d04      	cmp	r5, #4
   1b23e:	d100      	bne.n	1b242 <m2m_wifi_connect_sc+0x82>
   1b240:	e0b8      	b.n	1b3b4 <m2m_wifi_connect_sc+0x1f4>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
   1b242:	2d01      	cmp	r5, #1
   1b244:	d000      	beq.n	1b248 <m2m_wifi_connect_sc+0x88>
   1b246:	e0bb      	b.n	1b3c0 <m2m_wifi_connect_sc+0x200>
		M2M_ERR("undefined sec type\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
   1b248:	2300      	movs	r3, #0
   1b24a:	9302      	str	r3, [sp, #8]
   1b24c:	9301      	str	r3, [sp, #4]
   1b24e:	9300      	str	r3, [sp, #0]
   1b250:	336c      	adds	r3, #108	; 0x6c
   1b252:	aa07      	add	r2, sp, #28
   1b254:	2128      	movs	r1, #40	; 0x28
   1b256:	2001      	movs	r0, #1
   1b258:	4c60      	ldr	r4, [pc, #384]	; (1b3dc <m2m_wifi_connect_sc+0x21c>)
   1b25a:	47a0      	blx	r4

ERR1:
	return ret;
}
   1b25c:	b023      	add	sp, #140	; 0x8c
   1b25e:	bc0c      	pop	{r2, r3}
   1b260:	4690      	mov	r8, r2
   1b262:	4699      	mov	r9, r3
   1b264:	bdf0      	pop	{r4, r5, r6, r7, pc}
			M2M_ERR("Key is not valid\n");
   1b266:	4a5e      	ldr	r2, [pc, #376]	; (1b3e0 <m2m_wifi_connect_sc+0x220>)
   1b268:	495e      	ldr	r1, [pc, #376]	; (1b3e4 <m2m_wifi_connect_sc+0x224>)
   1b26a:	485f      	ldr	r0, [pc, #380]	; (1b3e8 <m2m_wifi_connect_sc+0x228>)
   1b26c:	4c5f      	ldr	r4, [pc, #380]	; (1b3ec <m2m_wifi_connect_sc+0x22c>)
   1b26e:	47a0      	blx	r4
   1b270:	485f      	ldr	r0, [pc, #380]	; (1b3f0 <m2m_wifi_connect_sc+0x230>)
   1b272:	47a0      	blx	r4
   1b274:	485f      	ldr	r0, [pc, #380]	; (1b3f4 <m2m_wifi_connect_sc+0x234>)
   1b276:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
   1b278:	200c      	movs	r0, #12
   1b27a:	4240      	negs	r0, r0
			goto ERR1;
   1b27c:	e7ee      	b.n	1b25c <m2m_wifi_connect_sc+0x9c>
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
   1b27e:	0038      	movs	r0, r7
   1b280:	4b5d      	ldr	r3, [pc, #372]	; (1b3f8 <m2m_wifi_connect_sc+0x238>)
   1b282:	4798      	blx	r3
   1b284:	2840      	cmp	r0, #64	; 0x40
   1b286:	d1b0      	bne.n	1b1ea <m2m_wifi_connect_sc+0x2a>
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
   1b288:	783b      	ldrb	r3, [r7, #0]
   1b28a:	001a      	movs	r2, r3
   1b28c:	3a30      	subs	r2, #48	; 0x30
   1b28e:	2a36      	cmp	r2, #54	; 0x36
   1b290:	d817      	bhi.n	1b2c2 <m2m_wifi_connect_sc+0x102>
   1b292:	3a0a      	subs	r2, #10
   1b294:	2a06      	cmp	r2, #6
   1b296:	d914      	bls.n	1b2c2 <m2m_wifi_connect_sc+0x102>
   1b298:	3b47      	subs	r3, #71	; 0x47
   1b29a:	2b19      	cmp	r3, #25
   1b29c:	d911      	bls.n	1b2c2 <m2m_wifi_connect_sc+0x102>
   1b29e:	1c7a      	adds	r2, r7, #1
   1b2a0:	0038      	movs	r0, r7
   1b2a2:	3040      	adds	r0, #64	; 0x40
   1b2a4:	7813      	ldrb	r3, [r2, #0]
   1b2a6:	0019      	movs	r1, r3
   1b2a8:	3930      	subs	r1, #48	; 0x30
   1b2aa:	2936      	cmp	r1, #54	; 0x36
   1b2ac:	d809      	bhi.n	1b2c2 <m2m_wifi_connect_sc+0x102>
   1b2ae:	390a      	subs	r1, #10
   1b2b0:	2906      	cmp	r1, #6
   1b2b2:	d906      	bls.n	1b2c2 <m2m_wifi_connect_sc+0x102>
   1b2b4:	3b47      	subs	r3, #71	; 0x47
   1b2b6:	2b19      	cmp	r3, #25
   1b2b8:	d903      	bls.n	1b2c2 <m2m_wifi_connect_sc+0x102>
   1b2ba:	3201      	adds	r2, #1
			while(i < (M2M_MAX_PSK_LEN-1))
   1b2bc:	4282      	cmp	r2, r0
   1b2be:	d1f1      	bne.n	1b2a4 <m2m_wifi_connect_sc+0xe4>
   1b2c0:	e793      	b.n	1b1ea <m2m_wifi_connect_sc+0x2a>
					M2M_ERR("Invalid Key\n");
   1b2c2:	4a4e      	ldr	r2, [pc, #312]	; (1b3fc <m2m_wifi_connect_sc+0x23c>)
   1b2c4:	4947      	ldr	r1, [pc, #284]	; (1b3e4 <m2m_wifi_connect_sc+0x224>)
   1b2c6:	4848      	ldr	r0, [pc, #288]	; (1b3e8 <m2m_wifi_connect_sc+0x228>)
   1b2c8:	4c48      	ldr	r4, [pc, #288]	; (1b3ec <m2m_wifi_connect_sc+0x22c>)
   1b2ca:	47a0      	blx	r4
   1b2cc:	484c      	ldr	r0, [pc, #304]	; (1b400 <m2m_wifi_connect_sc+0x240>)
   1b2ce:	47a0      	blx	r4
   1b2d0:	4848      	ldr	r0, [pc, #288]	; (1b3f4 <m2m_wifi_connect_sc+0x234>)
   1b2d2:	47a0      	blx	r4
					ret = M2M_ERR_FAIL;
   1b2d4:	200c      	movs	r0, #12
   1b2d6:	4240      	negs	r0, r0
					goto ERR1;
   1b2d8:	e7c0      	b.n	1b25c <m2m_wifi_connect_sc+0x9c>
		M2M_ERR("SSID LEN INVALID\n");
   1b2da:	228c      	movs	r2, #140	; 0x8c
   1b2dc:	0092      	lsls	r2, r2, #2
   1b2de:	4941      	ldr	r1, [pc, #260]	; (1b3e4 <m2m_wifi_connect_sc+0x224>)
   1b2e0:	4841      	ldr	r0, [pc, #260]	; (1b3e8 <m2m_wifi_connect_sc+0x228>)
   1b2e2:	4c42      	ldr	r4, [pc, #264]	; (1b3ec <m2m_wifi_connect_sc+0x22c>)
   1b2e4:	47a0      	blx	r4
   1b2e6:	4847      	ldr	r0, [pc, #284]	; (1b404 <m2m_wifi_connect_sc+0x244>)
   1b2e8:	47a0      	blx	r4
   1b2ea:	4842      	ldr	r0, [pc, #264]	; (1b3f4 <m2m_wifi_connect_sc+0x234>)
   1b2ec:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
   1b2ee:	200c      	movs	r0, #12
   1b2f0:	4240      	negs	r0, r0
		goto ERR1;
   1b2f2:	e7b3      	b.n	1b25c <m2m_wifi_connect_sc+0x9c>
			M2M_ERR("CH INVALID\n");
   1b2f4:	4a44      	ldr	r2, [pc, #272]	; (1b408 <m2m_wifi_connect_sc+0x248>)
   1b2f6:	493b      	ldr	r1, [pc, #236]	; (1b3e4 <m2m_wifi_connect_sc+0x224>)
   1b2f8:	483b      	ldr	r0, [pc, #236]	; (1b3e8 <m2m_wifi_connect_sc+0x228>)
   1b2fa:	4c3c      	ldr	r4, [pc, #240]	; (1b3ec <m2m_wifi_connect_sc+0x22c>)
   1b2fc:	47a0      	blx	r4
   1b2fe:	4843      	ldr	r0, [pc, #268]	; (1b40c <m2m_wifi_connect_sc+0x24c>)
   1b300:	47a0      	blx	r4
   1b302:	483c      	ldr	r0, [pc, #240]	; (1b3f4 <m2m_wifi_connect_sc+0x234>)
   1b304:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
   1b306:	200c      	movs	r0, #12
   1b308:	4240      	negs	r0, r0
			goto ERR1;
   1b30a:	e7a7      	b.n	1b25c <m2m_wifi_connect_sc+0x9c>
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
   1b30c:	783b      	ldrb	r3, [r7, #0]
   1b30e:	3b01      	subs	r3, #1
   1b310:	b2db      	uxtb	r3, r3
   1b312:	aa07      	add	r2, sp, #28
   1b314:	7013      	strb	r3, [r2, #0]
		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
   1b316:	2b03      	cmp	r3, #3
   1b318:	d816      	bhi.n	1b348 <m2m_wifi_connect_sc+0x188>
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
   1b31a:	787a      	ldrb	r2, [r7, #1]
   1b31c:	1e51      	subs	r1, r2, #1
   1b31e:	ab07      	add	r3, sp, #28
   1b320:	7059      	strb	r1, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
   1b322:	2310      	movs	r3, #16
   1b324:	0011      	movs	r1, r2
   1b326:	4399      	bics	r1, r3
   1b328:	290b      	cmp	r1, #11
   1b32a:	d01c      	beq.n	1b366 <m2m_wifi_connect_sc+0x1a6>
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
   1b32c:	4a38      	ldr	r2, [pc, #224]	; (1b410 <m2m_wifi_connect_sc+0x250>)
   1b32e:	492d      	ldr	r1, [pc, #180]	; (1b3e4 <m2m_wifi_connect_sc+0x224>)
   1b330:	482d      	ldr	r0, [pc, #180]	; (1b3e8 <m2m_wifi_connect_sc+0x228>)
   1b332:	4c2e      	ldr	r4, [pc, #184]	; (1b3ec <m2m_wifi_connect_sc+0x22c>)
   1b334:	47a0      	blx	r4
   1b336:	ab07      	add	r3, sp, #28
   1b338:	7859      	ldrb	r1, [r3, #1]
   1b33a:	4836      	ldr	r0, [pc, #216]	; (1b414 <m2m_wifi_connect_sc+0x254>)
   1b33c:	47a0      	blx	r4
   1b33e:	482d      	ldr	r0, [pc, #180]	; (1b3f4 <m2m_wifi_connect_sc+0x234>)
   1b340:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
   1b342:	200c      	movs	r0, #12
   1b344:	4240      	negs	r0, r0
			goto ERR1;
   1b346:	e789      	b.n	1b25c <m2m_wifi_connect_sc+0x9c>
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
   1b348:	2294      	movs	r2, #148	; 0x94
   1b34a:	0092      	lsls	r2, r2, #2
   1b34c:	4925      	ldr	r1, [pc, #148]	; (1b3e4 <m2m_wifi_connect_sc+0x224>)
   1b34e:	4826      	ldr	r0, [pc, #152]	; (1b3e8 <m2m_wifi_connect_sc+0x228>)
   1b350:	4c26      	ldr	r4, [pc, #152]	; (1b3ec <m2m_wifi_connect_sc+0x22c>)
   1b352:	47a0      	blx	r4
   1b354:	ab07      	add	r3, sp, #28
   1b356:	7819      	ldrb	r1, [r3, #0]
   1b358:	482f      	ldr	r0, [pc, #188]	; (1b418 <m2m_wifi_connect_sc+0x258>)
   1b35a:	47a0      	blx	r4
   1b35c:	4825      	ldr	r0, [pc, #148]	; (1b3f4 <m2m_wifi_connect_sc+0x234>)
   1b35e:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
   1b360:	200c      	movs	r0, #12
   1b362:	4240      	negs	r0, r0
			goto ERR1;
   1b364:	e77a      	b.n	1b25c <m2m_wifi_connect_sc+0x9c>
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
   1b366:	1cb9      	adds	r1, r7, #2
   1b368:	2016      	movs	r0, #22
   1b36a:	ab02      	add	r3, sp, #8
   1b36c:	469c      	mov	ip, r3
   1b36e:	4460      	add	r0, ip
   1b370:	4b19      	ldr	r3, [pc, #100]	; (1b3d8 <m2m_wifi_connect_sc+0x218>)
   1b372:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
   1b374:	787b      	ldrb	r3, [r7, #1]
   1b376:	aa07      	add	r2, sp, #28
   1b378:	4694      	mov	ip, r2
   1b37a:	4463      	add	r3, ip
   1b37c:	2200      	movs	r2, #0
   1b37e:	709a      	strb	r2, [r3, #2]
   1b380:	e762      	b.n	1b248 <m2m_wifi_connect_sc+0x88>
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
   1b382:	0038      	movs	r0, r7
   1b384:	4b1c      	ldr	r3, [pc, #112]	; (1b3f8 <m2m_wifi_connect_sc+0x238>)
   1b386:	4798      	blx	r3
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
   1b388:	1e43      	subs	r3, r0, #1
   1b38a:	b29b      	uxth	r3, r3
   1b38c:	2b3f      	cmp	r3, #63	; 0x3f
   1b38e:	d805      	bhi.n	1b39c <m2m_wifi_connect_sc+0x1dc>
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
   1b390:	1c42      	adds	r2, r0, #1
   1b392:	0039      	movs	r1, r7
   1b394:	a807      	add	r0, sp, #28
   1b396:	4b10      	ldr	r3, [pc, #64]	; (1b3d8 <m2m_wifi_connect_sc+0x218>)
   1b398:	4798      	blx	r3
   1b39a:	e755      	b.n	1b248 <m2m_wifi_connect_sc+0x88>
			M2M_ERR("Incorrect PSK key length\n");
   1b39c:	4a1f      	ldr	r2, [pc, #124]	; (1b41c <m2m_wifi_connect_sc+0x25c>)
   1b39e:	4911      	ldr	r1, [pc, #68]	; (1b3e4 <m2m_wifi_connect_sc+0x224>)
   1b3a0:	4811      	ldr	r0, [pc, #68]	; (1b3e8 <m2m_wifi_connect_sc+0x228>)
   1b3a2:	4c12      	ldr	r4, [pc, #72]	; (1b3ec <m2m_wifi_connect_sc+0x22c>)
   1b3a4:	47a0      	blx	r4
   1b3a6:	481e      	ldr	r0, [pc, #120]	; (1b420 <m2m_wifi_connect_sc+0x260>)
   1b3a8:	47a0      	blx	r4
   1b3aa:	4812      	ldr	r0, [pc, #72]	; (1b3f4 <m2m_wifi_connect_sc+0x234>)
   1b3ac:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
   1b3ae:	200c      	movs	r0, #12
   1b3b0:	4240      	negs	r0, r0
			goto ERR1;
   1b3b2:	e753      	b.n	1b25c <m2m_wifi_connect_sc+0x9c>
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
   1b3b4:	223e      	movs	r2, #62	; 0x3e
   1b3b6:	0039      	movs	r1, r7
   1b3b8:	a807      	add	r0, sp, #28
   1b3ba:	4b07      	ldr	r3, [pc, #28]	; (1b3d8 <m2m_wifi_connect_sc+0x218>)
   1b3bc:	4798      	blx	r3
   1b3be:	e743      	b.n	1b248 <m2m_wifi_connect_sc+0x88>
		M2M_ERR("undefined sec type\n");
   1b3c0:	4a18      	ldr	r2, [pc, #96]	; (1b424 <m2m_wifi_connect_sc+0x264>)
   1b3c2:	4908      	ldr	r1, [pc, #32]	; (1b3e4 <m2m_wifi_connect_sc+0x224>)
   1b3c4:	4808      	ldr	r0, [pc, #32]	; (1b3e8 <m2m_wifi_connect_sc+0x228>)
   1b3c6:	4c09      	ldr	r4, [pc, #36]	; (1b3ec <m2m_wifi_connect_sc+0x22c>)
   1b3c8:	47a0      	blx	r4
   1b3ca:	4817      	ldr	r0, [pc, #92]	; (1b428 <m2m_wifi_connect_sc+0x268>)
   1b3cc:	47a0      	blx	r4
   1b3ce:	4809      	ldr	r0, [pc, #36]	; (1b3f4 <m2m_wifi_connect_sc+0x234>)
   1b3d0:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
   1b3d2:	200c      	movs	r0, #12
   1b3d4:	4240      	negs	r0, r0
		goto ERR1;
   1b3d6:	e741      	b.n	1b25c <m2m_wifi_connect_sc+0x9c>
   1b3d8:	0001a549 	.word	0x0001a549
   1b3dc:	0001a671 	.word	0x0001a671
   1b3e0:	0000021a 	.word	0x0000021a
   1b3e4:	0002a494 	.word	0x0002a494
   1b3e8:	0002a0fc 	.word	0x0002a0fc
   1b3ec:	0001913d 	.word	0x0001913d
   1b3f0:	0002a4dc 	.word	0x0002a4dc
   1b3f4:	0002a124 	.word	0x0002a124
   1b3f8:	0001a56d 	.word	0x0001a56d
   1b3fc:	00000226 	.word	0x00000226
   1b400:	0002a4f0 	.word	0x0002a4f0
   1b404:	0002a500 	.word	0x0002a500
   1b408:	00000239 	.word	0x00000239
   1b40c:	0002a514 	.word	0x0002a514
   1b410:	00000257 	.word	0x00000257
   1b414:	0002a53c 	.word	0x0002a53c
   1b418:	0002a520 	.word	0x0002a520
   1b41c:	00000266 	.word	0x00000266
   1b420:	0002a558 	.word	0x0002a558
   1b424:	00000276 	.word	0x00000276
   1b428:	0002a574 	.word	0x0002a574

0001b42c <m2m_wifi_connect>:
{
   1b42c:	b530      	push	{r4, r5, lr}
   1b42e:	b083      	sub	sp, #12
   1b430:	ac06      	add	r4, sp, #24
   1b432:	8824      	ldrh	r4, [r4, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
   1b434:	2500      	movs	r5, #0
   1b436:	9501      	str	r5, [sp, #4]
   1b438:	9400      	str	r4, [sp, #0]
   1b43a:	4c02      	ldr	r4, [pc, #8]	; (1b444 <m2m_wifi_connect+0x18>)
   1b43c:	47a0      	blx	r4
}
   1b43e:	b003      	add	sp, #12
   1b440:	bd30      	pop	{r4, r5, pc}
   1b442:	46c0      	nop			; (mov r8, r8)
   1b444:	0001b1c1 	.word	0x0001b1c1

0001b448 <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
   1b448:	2000      	movs	r0, #0
   1b44a:	4770      	bx	lr

0001b44c <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
   1b44c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b44e:	b083      	sub	sp, #12
#endif
#if defined CONF_WINC_XO_XTALGM2_DIS
	val32 |= rHAVE_XO_XTALGM2_DIS_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
   1b450:	2580      	movs	r5, #128	; 0x80
   1b452:	006d      	lsls	r5, r5, #1
   1b454:	4305      	orrs	r5, r0
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
   1b456:	24a5      	movs	r4, #165	; 0xa5
   1b458:	0164      	lsls	r4, r4, #5
   1b45a:	4f08      	ldr	r7, [pc, #32]	; (1b47c <chip_apply_conf+0x30>)
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
   1b45c:	4e08      	ldr	r6, [pc, #32]	; (1b480 <chip_apply_conf+0x34>)
		nm_write_reg(rNMI_GP_REG_1, val32);
   1b45e:	0029      	movs	r1, r5
   1b460:	0020      	movs	r0, r4
   1b462:	47b8      	blx	r7
			uint32 reg = 0;
   1b464:	2300      	movs	r3, #0
   1b466:	9301      	str	r3, [sp, #4]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
   1b468:	a901      	add	r1, sp, #4
   1b46a:	0020      	movs	r0, r4
   1b46c:	47b0      	blx	r6
			if(ret == M2M_SUCCESS) {
   1b46e:	2800      	cmp	r0, #0
   1b470:	d1f5      	bne.n	1b45e <chip_apply_conf+0x12>
				if(reg == val32)
   1b472:	9b01      	ldr	r3, [sp, #4]
   1b474:	429d      	cmp	r5, r3
   1b476:	d1f2      	bne.n	1b45e <chip_apply_conf+0x12>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
   1b478:	b003      	add	sp, #12
   1b47a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b47c:	0001b925 	.word	0x0001b925
   1b480:	0001b919 	.word	0x0001b919

0001b484 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
   1b484:	b500      	push	{lr}
   1b486:	b083      	sub	sp, #12
	uint32 reg = 0;
   1b488:	2300      	movs	r3, #0
   1b48a:	9301      	str	r3, [sp, #4]
	sint8 ret = M2M_SUCCESS;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
   1b48c:	a901      	add	r1, sp, #4
   1b48e:	4811      	ldr	r0, [pc, #68]	; (1b4d4 <enable_interrupts+0x50>)
   1b490:	4b11      	ldr	r3, [pc, #68]	; (1b4d8 <enable_interrupts+0x54>)
   1b492:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
   1b494:	2800      	cmp	r0, #0
   1b496:	d001      	beq.n	1b49c <enable_interrupts+0x18>
	reg |= ((uint32) 1 << 16);
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
}
   1b498:	b003      	add	sp, #12
   1b49a:	bd00      	pop	{pc}
	reg |= ((uint32) 1 << 8);
   1b49c:	2180      	movs	r1, #128	; 0x80
   1b49e:	0049      	lsls	r1, r1, #1
   1b4a0:	9b01      	ldr	r3, [sp, #4]
   1b4a2:	4319      	orrs	r1, r3
   1b4a4:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
   1b4a6:	480b      	ldr	r0, [pc, #44]	; (1b4d4 <enable_interrupts+0x50>)
   1b4a8:	4b0c      	ldr	r3, [pc, #48]	; (1b4dc <enable_interrupts+0x58>)
   1b4aa:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
   1b4ac:	2800      	cmp	r0, #0
   1b4ae:	d1f3      	bne.n	1b498 <enable_interrupts+0x14>
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
   1b4b0:	a901      	add	r1, sp, #4
   1b4b2:	20d0      	movs	r0, #208	; 0xd0
   1b4b4:	0140      	lsls	r0, r0, #5
   1b4b6:	4b08      	ldr	r3, [pc, #32]	; (1b4d8 <enable_interrupts+0x54>)
   1b4b8:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
   1b4ba:	2800      	cmp	r0, #0
   1b4bc:	d1ec      	bne.n	1b498 <enable_interrupts+0x14>
	reg |= ((uint32) 1 << 16);
   1b4be:	2180      	movs	r1, #128	; 0x80
   1b4c0:	0249      	lsls	r1, r1, #9
   1b4c2:	9b01      	ldr	r3, [sp, #4]
   1b4c4:	4319      	orrs	r1, r3
   1b4c6:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
   1b4c8:	20d0      	movs	r0, #208	; 0xd0
   1b4ca:	0140      	lsls	r0, r0, #5
   1b4cc:	4b03      	ldr	r3, [pc, #12]	; (1b4dc <enable_interrupts+0x58>)
   1b4ce:	4798      	blx	r3
   1b4d0:	e7e2      	b.n	1b498 <enable_interrupts+0x14>
   1b4d2:	46c0      	nop			; (mov r8, r8)
   1b4d4:	00001408 	.word	0x00001408
   1b4d8:	0001b919 	.word	0x0001b919
   1b4dc:	0001b925 	.word	0x0001b925

0001b4e0 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
   1b4e0:	b510      	push	{r4, lr}
   1b4e2:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
   1b4e4:	4b28      	ldr	r3, [pc, #160]	; (1b588 <nmi_get_chipid+0xa8>)
   1b4e6:	681c      	ldr	r4, [r3, #0]
   1b4e8:	2c00      	cmp	r4, #0
   1b4ea:	d004      	beq.n	1b4f6 <nmi_get_chipid+0x16>
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
#endif /* PROBE_FLASH */
	}
	return chipid;
   1b4ec:	4b26      	ldr	r3, [pc, #152]	; (1b588 <nmi_get_chipid+0xa8>)
   1b4ee:	681c      	ldr	r4, [r3, #0]
}
   1b4f0:	0020      	movs	r0, r4
   1b4f2:	b002      	add	sp, #8
   1b4f4:	bd10      	pop	{r4, pc}
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
   1b4f6:	0019      	movs	r1, r3
   1b4f8:	2080      	movs	r0, #128	; 0x80
   1b4fa:	0140      	lsls	r0, r0, #5
   1b4fc:	4b23      	ldr	r3, [pc, #140]	; (1b58c <nmi_get_chipid+0xac>)
   1b4fe:	4798      	blx	r3
   1b500:	2800      	cmp	r0, #0
   1b502:	d003      	beq.n	1b50c <nmi_get_chipid+0x2c>
			chipid = 0;
   1b504:	2200      	movs	r2, #0
   1b506:	4b20      	ldr	r3, [pc, #128]	; (1b588 <nmi_get_chipid+0xa8>)
   1b508:	601a      	str	r2, [r3, #0]
			return 0;
   1b50a:	e7f1      	b.n	1b4f0 <nmi_get_chipid+0x10>
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
   1b50c:	a901      	add	r1, sp, #4
   1b50e:	4820      	ldr	r0, [pc, #128]	; (1b590 <nmi_get_chipid+0xb0>)
   1b510:	4b1e      	ldr	r3, [pc, #120]	; (1b58c <nmi_get_chipid+0xac>)
   1b512:	4798      	blx	r3
   1b514:	2800      	cmp	r0, #0
   1b516:	d003      	beq.n	1b520 <nmi_get_chipid+0x40>
			chipid = 0;
   1b518:	2200      	movs	r2, #0
   1b51a:	4b1b      	ldr	r3, [pc, #108]	; (1b588 <nmi_get_chipid+0xa8>)
   1b51c:	601a      	str	r2, [r3, #0]
			return 0;
   1b51e:	e7e7      	b.n	1b4f0 <nmi_get_chipid+0x10>
		if (chipid == 0x1002a0)  {
   1b520:	4b19      	ldr	r3, [pc, #100]	; (1b588 <nmi_get_chipid+0xa8>)
   1b522:	681b      	ldr	r3, [r3, #0]
   1b524:	4a1b      	ldr	r2, [pc, #108]	; (1b594 <nmi_get_chipid+0xb4>)
   1b526:	4293      	cmp	r3, r2
   1b528:	d00e      	beq.n	1b548 <nmi_get_chipid+0x68>
		} else if(chipid == 0x1002b0) {
   1b52a:	4a1b      	ldr	r2, [pc, #108]	; (1b598 <nmi_get_chipid+0xb8>)
   1b52c:	4293      	cmp	r3, r2
   1b52e:	d012      	beq.n	1b556 <nmi_get_chipid+0x76>
		}else if(chipid == 0x1000F0) { 
   1b530:	4a1a      	ldr	r2, [pc, #104]	; (1b59c <nmi_get_chipid+0xbc>)
   1b532:	4293      	cmp	r3, r2
   1b534:	d01c      	beq.n	1b570 <nmi_get_chipid+0x90>
		chipid |= 0x050000;
   1b536:	4914      	ldr	r1, [pc, #80]	; (1b588 <nmi_get_chipid+0xa8>)
		chipid &= ~(0x0f0000);
   1b538:	4a19      	ldr	r2, [pc, #100]	; (1b5a0 <nmi_get_chipid+0xc0>)
   1b53a:	680b      	ldr	r3, [r1, #0]
   1b53c:	401a      	ands	r2, r3
		chipid |= 0x050000;
   1b53e:	23a0      	movs	r3, #160	; 0xa0
   1b540:	02db      	lsls	r3, r3, #11
   1b542:	4313      	orrs	r3, r2
   1b544:	600b      	str	r3, [r1, #0]
   1b546:	e7d1      	b.n	1b4ec <nmi_get_chipid+0xc>
			if (rfrevid == 0x1) { /* 1002A0 */
   1b548:	9b01      	ldr	r3, [sp, #4]
   1b54a:	2b01      	cmp	r3, #1
   1b54c:	d0f3      	beq.n	1b536 <nmi_get_chipid+0x56>
				chipid = 0x1002a1;
   1b54e:	4a15      	ldr	r2, [pc, #84]	; (1b5a4 <nmi_get_chipid+0xc4>)
   1b550:	4b0d      	ldr	r3, [pc, #52]	; (1b588 <nmi_get_chipid+0xa8>)
   1b552:	601a      	str	r2, [r3, #0]
   1b554:	e7ef      	b.n	1b536 <nmi_get_chipid+0x56>
			if(rfrevid == 3) { /* 1002B0 */
   1b556:	9b01      	ldr	r3, [sp, #4]
   1b558:	2b03      	cmp	r3, #3
   1b55a:	d0ec      	beq.n	1b536 <nmi_get_chipid+0x56>
			} else if(rfrevid == 4) { /* 1002B1 */
   1b55c:	2b04      	cmp	r3, #4
   1b55e:	d003      	beq.n	1b568 <nmi_get_chipid+0x88>
				chipid = 0x1002b2;
   1b560:	4a11      	ldr	r2, [pc, #68]	; (1b5a8 <nmi_get_chipid+0xc8>)
   1b562:	4b09      	ldr	r3, [pc, #36]	; (1b588 <nmi_get_chipid+0xa8>)
   1b564:	601a      	str	r2, [r3, #0]
   1b566:	e7e6      	b.n	1b536 <nmi_get_chipid+0x56>
				chipid = 0x1002b1;
   1b568:	4a10      	ldr	r2, [pc, #64]	; (1b5ac <nmi_get_chipid+0xcc>)
   1b56a:	4b07      	ldr	r3, [pc, #28]	; (1b588 <nmi_get_chipid+0xa8>)
   1b56c:	601a      	str	r2, [r3, #0]
   1b56e:	e7e2      	b.n	1b536 <nmi_get_chipid+0x56>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
   1b570:	4905      	ldr	r1, [pc, #20]	; (1b588 <nmi_get_chipid+0xa8>)
   1b572:	20ec      	movs	r0, #236	; 0xec
   1b574:	0380      	lsls	r0, r0, #14
   1b576:	4b05      	ldr	r3, [pc, #20]	; (1b58c <nmi_get_chipid+0xac>)
   1b578:	4798      	blx	r3
   1b57a:	2800      	cmp	r0, #0
   1b57c:	d0db      	beq.n	1b536 <nmi_get_chipid+0x56>
			chipid = 0;
   1b57e:	2200      	movs	r2, #0
   1b580:	4b01      	ldr	r3, [pc, #4]	; (1b588 <nmi_get_chipid+0xa8>)
   1b582:	601a      	str	r2, [r3, #0]
			return 0;
   1b584:	e7b4      	b.n	1b4f0 <nmi_get_chipid+0x10>
   1b586:	46c0      	nop			; (mov r8, r8)
   1b588:	20003cb0 	.word	0x20003cb0
   1b58c:	0001b919 	.word	0x0001b919
   1b590:	000013f4 	.word	0x000013f4
   1b594:	001002a0 	.word	0x001002a0
   1b598:	001002b0 	.word	0x001002b0
   1b59c:	001000f0 	.word	0x001000f0
   1b5a0:	fff0ffff 	.word	0xfff0ffff
   1b5a4:	001002a1 	.word	0x001002a1
   1b5a8:	001002b2 	.word	0x001002b2
   1b5ac:	001002b1 	.word	0x001002b1

0001b5b0 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
   1b5b0:	b530      	push	{r4, r5, lr}
   1b5b2:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   1b5b4:	4c16      	ldr	r4, [pc, #88]	; (1b610 <chip_sleep+0x60>)
		if(ret != M2M_SUCCESS) goto ERR1;
		if((reg & NBIT0) == 0) break;
   1b5b6:	2501      	movs	r5, #1
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   1b5b8:	a901      	add	r1, sp, #4
   1b5ba:	2010      	movs	r0, #16
   1b5bc:	47a0      	blx	r4
		if(ret != M2M_SUCCESS) goto ERR1;
   1b5be:	2800      	cmp	r0, #0
   1b5c0:	d11c      	bne.n	1b5fc <chip_sleep+0x4c>
		if((reg & NBIT0) == 0) break;
   1b5c2:	9b01      	ldr	r3, [sp, #4]
   1b5c4:	422b      	tst	r3, r5
   1b5c6:	d1f7      	bne.n	1b5b8 <chip_sleep+0x8>
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   1b5c8:	a901      	add	r1, sp, #4
   1b5ca:	3001      	adds	r0, #1
   1b5cc:	4b10      	ldr	r3, [pc, #64]	; (1b610 <chip_sleep+0x60>)
   1b5ce:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
   1b5d0:	2800      	cmp	r0, #0
   1b5d2:	d113      	bne.n	1b5fc <chip_sleep+0x4c>
	if(reg & NBIT1)
   1b5d4:	9901      	ldr	r1, [sp, #4]
   1b5d6:	078b      	lsls	r3, r1, #30
   1b5d8:	d507      	bpl.n	1b5ea <chip_sleep+0x3a>
	{
		reg &=~NBIT1;
   1b5da:	2302      	movs	r3, #2
   1b5dc:	4399      	bics	r1, r3
   1b5de:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
   1b5e0:	3001      	adds	r0, #1
   1b5e2:	4b0c      	ldr	r3, [pc, #48]	; (1b614 <chip_sleep+0x64>)
   1b5e4:	4798      	blx	r3
		if(ret != M2M_SUCCESS)goto ERR1;
   1b5e6:	2800      	cmp	r0, #0
   1b5e8:	d108      	bne.n	1b5fc <chip_sleep+0x4c>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   1b5ea:	a901      	add	r1, sp, #4
   1b5ec:	200b      	movs	r0, #11
   1b5ee:	4b08      	ldr	r3, [pc, #32]	; (1b610 <chip_sleep+0x60>)
   1b5f0:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
   1b5f2:	2800      	cmp	r0, #0
   1b5f4:	d102      	bne.n	1b5fc <chip_sleep+0x4c>
	if(reg & NBIT0)
   1b5f6:	9901      	ldr	r1, [sp, #4]
   1b5f8:	07cb      	lsls	r3, r1, #31
   1b5fa:	d401      	bmi.n	1b600 <chip_sleep+0x50>
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
}
   1b5fc:	b003      	add	sp, #12
   1b5fe:	bd30      	pop	{r4, r5, pc}
		reg &= ~NBIT0;
   1b600:	2301      	movs	r3, #1
   1b602:	4399      	bics	r1, r3
   1b604:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
   1b606:	300b      	adds	r0, #11
   1b608:	4b02      	ldr	r3, [pc, #8]	; (1b614 <chip_sleep+0x64>)
   1b60a:	4798      	blx	r3
   1b60c:	e7f6      	b.n	1b5fc <chip_sleep+0x4c>
   1b60e:	46c0      	nop			; (mov r8, r8)
   1b610:	0001b919 	.word	0x0001b919
   1b614:	0001b925 	.word	0x0001b925

0001b618 <chip_wake>:
sint8 chip_wake(void)
{
   1b618:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b61a:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
   1b61c:	2300      	movs	r3, #0
   1b61e:	9301      	str	r3, [sp, #4]
   1b620:	9300      	str	r3, [sp, #0]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   1b622:	a901      	add	r1, sp, #4
   1b624:	200b      	movs	r0, #11
   1b626:	4b27      	ldr	r3, [pc, #156]	; (1b6c4 <chip_wake+0xac>)
   1b628:	4798      	blx	r3
   1b62a:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   1b62c:	d12e      	bne.n	1b68c <chip_wake+0x74>
	
	if(!(reg & NBIT0))
   1b62e:	9901      	ldr	r1, [sp, #4]
   1b630:	07cb      	lsls	r3, r1, #31
   1b632:	d406      	bmi.n	1b642 <chip_wake+0x2a>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
   1b634:	2301      	movs	r3, #1
   1b636:	4319      	orrs	r1, r3
   1b638:	200b      	movs	r0, #11
   1b63a:	4b23      	ldr	r3, [pc, #140]	; (1b6c8 <chip_wake+0xb0>)
   1b63c:	4798      	blx	r3
   1b63e:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   1b640:	d124      	bne.n	1b68c <chip_wake+0x74>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   1b642:	a901      	add	r1, sp, #4
   1b644:	2001      	movs	r0, #1
   1b646:	4b1f      	ldr	r3, [pc, #124]	; (1b6c4 <chip_wake+0xac>)
   1b648:	4798      	blx	r3
   1b64a:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   1b64c:	d11e      	bne.n	1b68c <chip_wake+0x74>
	/* Set bit 1 */
	if(!(reg & NBIT1))
   1b64e:	9901      	ldr	r1, [sp, #4]
   1b650:	078b      	lsls	r3, r1, #30
   1b652:	d51e      	bpl.n	1b692 <chip_wake+0x7a>
{
   1b654:	2505      	movs	r5, #5
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
   1b656:	4f1b      	ldr	r7, [pc, #108]	; (1b6c4 <chip_wake+0xac>)
			goto _WAKE_EXIT;
		}
		if(clk_status_reg & NBIT2) {
			break;
		}
		nm_bsp_sleep(2);
   1b658:	4e1c      	ldr	r6, [pc, #112]	; (1b6cc <chip_wake+0xb4>)
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
   1b65a:	4669      	mov	r1, sp
   1b65c:	200f      	movs	r0, #15
   1b65e:	47b8      	blx	r7
   1b660:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) {
   1b662:	d11e      	bne.n	1b6a2 <chip_wake+0x8a>
		if(clk_status_reg & NBIT2) {
   1b664:	9b00      	ldr	r3, [sp, #0]
   1b666:	075b      	lsls	r3, r3, #29
   1b668:	d428      	bmi.n	1b6bc <chip_wake+0xa4>
		nm_bsp_sleep(2);
   1b66a:	2002      	movs	r0, #2
   1b66c:	47b0      	blx	r6
   1b66e:	3d01      	subs	r5, #1
		trials++;
		if(trials > WAKUP_TRAILS_TIMEOUT)
   1b670:	2d00      	cmp	r5, #0
   1b672:	d1f2      	bne.n	1b65a <chip_wake+0x42>
		{
			M2M_ERR("Failed to wakup the chip\n");
   1b674:	22ad      	movs	r2, #173	; 0xad
   1b676:	0052      	lsls	r2, r2, #1
   1b678:	4915      	ldr	r1, [pc, #84]	; (1b6d0 <chip_wake+0xb8>)
   1b67a:	4816      	ldr	r0, [pc, #88]	; (1b6d4 <chip_wake+0xbc>)
   1b67c:	4c16      	ldr	r4, [pc, #88]	; (1b6d8 <chip_wake+0xc0>)
   1b67e:	47a0      	blx	r4
   1b680:	4816      	ldr	r0, [pc, #88]	; (1b6dc <chip_wake+0xc4>)
   1b682:	47a0      	blx	r4
   1b684:	4816      	ldr	r0, [pc, #88]	; (1b6e0 <chip_wake+0xc8>)
   1b686:	47a0      	blx	r4
			ret = M2M_ERR_TIME_OUT;
   1b688:	2404      	movs	r4, #4
   1b68a:	4264      	negs	r4, r4
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
	
_WAKE_EXIT:
	return ret;
}
   1b68c:	0020      	movs	r0, r4
   1b68e:	b003      	add	sp, #12
   1b690:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
   1b692:	2302      	movs	r3, #2
   1b694:	4319      	orrs	r1, r3
   1b696:	2001      	movs	r0, #1
   1b698:	4b0b      	ldr	r3, [pc, #44]	; (1b6c8 <chip_wake+0xb0>)
   1b69a:	4798      	blx	r3
   1b69c:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   1b69e:	d0d9      	beq.n	1b654 <chip_wake+0x3c>
   1b6a0:	e7f4      	b.n	1b68c <chip_wake+0x74>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
   1b6a2:	22a8      	movs	r2, #168	; 0xa8
   1b6a4:	0052      	lsls	r2, r2, #1
   1b6a6:	490a      	ldr	r1, [pc, #40]	; (1b6d0 <chip_wake+0xb8>)
   1b6a8:	480a      	ldr	r0, [pc, #40]	; (1b6d4 <chip_wake+0xbc>)
   1b6aa:	4d0b      	ldr	r5, [pc, #44]	; (1b6d8 <chip_wake+0xc0>)
   1b6ac:	47a8      	blx	r5
   1b6ae:	9a00      	ldr	r2, [sp, #0]
   1b6b0:	0021      	movs	r1, r4
   1b6b2:	480c      	ldr	r0, [pc, #48]	; (1b6e4 <chip_wake+0xcc>)
   1b6b4:	47a8      	blx	r5
   1b6b6:	480a      	ldr	r0, [pc, #40]	; (1b6e0 <chip_wake+0xc8>)
   1b6b8:	47a8      	blx	r5
			goto _WAKE_EXIT;
   1b6ba:	e7e7      	b.n	1b68c <chip_wake+0x74>
	nm_bus_reset();
   1b6bc:	4b0a      	ldr	r3, [pc, #40]	; (1b6e8 <chip_wake+0xd0>)
   1b6be:	4798      	blx	r3
   1b6c0:	e7e4      	b.n	1b68c <chip_wake+0x74>
   1b6c2:	46c0      	nop			; (mov r8, r8)
   1b6c4:	0001b919 	.word	0x0001b919
   1b6c8:	0001b925 	.word	0x0001b925
   1b6cc:	0001a20d 	.word	0x0001a20d
   1b6d0:	0002a654 	.word	0x0002a654
   1b6d4:	0002a0fc 	.word	0x0002a0fc
   1b6d8:	0001913d 	.word	0x0001913d
   1b6dc:	0002a6a0 	.word	0x0002a6a0
   1b6e0:	0002a124 	.word	0x0002a124
   1b6e4:	0002a688 	.word	0x0002a688
   1b6e8:	0001b901 	.word	0x0001b901

0001b6ec <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
   1b6ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b6ee:	0007      	movs	r7, r0
				M2M_MIN_REQ_DRV_VERSION_PATCH_NO);


	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   1b6f0:	4d2c      	ldr	r5, [pc, #176]	; (1b7a4 <wait_for_bootrom+0xb8>)
   1b6f2:	4c2d      	ldr	r4, [pc, #180]	; (1b7a8 <wait_for_bootrom+0xbc>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
   1b6f4:	4e2d      	ldr	r6, [pc, #180]	; (1b7ac <wait_for_bootrom+0xc0>)
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   1b6f6:	0028      	movs	r0, r5
   1b6f8:	47a0      	blx	r4
		if (reg & 0x80000000) {
   1b6fa:	2800      	cmp	r0, #0
   1b6fc:	db02      	blt.n	1b704 <wait_for_bootrom+0x18>
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
   1b6fe:	2001      	movs	r0, #1
   1b700:	47b0      	blx	r6
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   1b702:	e7f8      	b.n	1b6f6 <wait_for_bootrom+0xa>
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
   1b704:	482a      	ldr	r0, [pc, #168]	; (1b7b0 <wait_for_bootrom+0xc4>)
   1b706:	4b28      	ldr	r3, [pc, #160]	; (1b7a8 <wait_for_bootrom+0xbc>)
   1b708:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
   1b70a:	07c3      	lsls	r3, r0, #31
   1b70c:	d409      	bmi.n	1b722 <wait_for_bootrom+0x36>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
   1b70e:	4e27      	ldr	r6, [pc, #156]	; (1b7ac <wait_for_bootrom+0xc0>)
			reg = nm_read_reg(BOOTROM_REG);
   1b710:	4c28      	ldr	r4, [pc, #160]	; (1b7b4 <wait_for_bootrom+0xc8>)
   1b712:	4d25      	ldr	r5, [pc, #148]	; (1b7a8 <wait_for_bootrom+0xbc>)
			nm_bsp_sleep(1);
   1b714:	2001      	movs	r0, #1
   1b716:	47b0      	blx	r6
			reg = nm_read_reg(BOOTROM_REG);
   1b718:	0020      	movs	r0, r4
   1b71a:	47a8      	blx	r5
		while(reg != M2M_FINISH_BOOT_ROM)
   1b71c:	4b26      	ldr	r3, [pc, #152]	; (1b7b8 <wait_for_bootrom+0xcc>)
   1b71e:	4298      	cmp	r0, r3
   1b720:	d1f8      	bne.n	1b714 <wait_for_bootrom+0x28>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
   1b722:	2f02      	cmp	r7, #2
   1b724:	d020      	beq.n	1b768 <wait_for_bootrom+0x7c>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
   1b726:	2f03      	cmp	r7, #3
   1b728:	d028      	beq.n	1b77c <wait_for_bootrom+0x90>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
   1b72a:	2f04      	cmp	r7, #4
   1b72c:	d02f      	beq.n	1b78e <wait_for_bootrom+0xa2>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   1b72e:	4923      	ldr	r1, [pc, #140]	; (1b7bc <wait_for_bootrom+0xd0>)
   1b730:	4823      	ldr	r0, [pc, #140]	; (1b7c0 <wait_for_bootrom+0xd4>)
   1b732:	4b24      	ldr	r3, [pc, #144]	; (1b7c4 <wait_for_bootrom+0xd8>)
   1b734:	4798      	blx	r3
	uint32 u32GpReg1 = 0;
   1b736:	2400      	movs	r4, #0
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
   1b738:	4b23      	ldr	r3, [pc, #140]	; (1b7c8 <wait_for_bootrom+0xdc>)
   1b73a:	4798      	blx	r3
   1b73c:	0500      	lsls	r0, r0, #20
   1b73e:	0d00      	lsrs	r0, r0, #20
   1b740:	4b22      	ldr	r3, [pc, #136]	; (1b7cc <wait_for_bootrom+0xe0>)
   1b742:	4298      	cmp	r0, r3
   1b744:	d829      	bhi.n	1b79a <wait_for_bootrom+0xae>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
	} else {
		chip_apply_conf(u32GpReg1);
   1b746:	0020      	movs	r0, r4
   1b748:	4b21      	ldr	r3, [pc, #132]	; (1b7d0 <wait_for_bootrom+0xe4>)
   1b74a:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
   1b74c:	4821      	ldr	r0, [pc, #132]	; (1b7d4 <wait_for_bootrom+0xe8>)
   1b74e:	4c22      	ldr	r4, [pc, #136]	; (1b7d8 <wait_for_bootrom+0xec>)
   1b750:	47a0      	blx	r4
   1b752:	491a      	ldr	r1, [pc, #104]	; (1b7bc <wait_for_bootrom+0xd0>)
   1b754:	4821      	ldr	r0, [pc, #132]	; (1b7dc <wait_for_bootrom+0xf0>)
   1b756:	47a0      	blx	r4
   1b758:	4821      	ldr	r0, [pc, #132]	; (1b7e0 <wait_for_bootrom+0xf4>)
   1b75a:	47a0      	blx	r4

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
   1b75c:	4921      	ldr	r1, [pc, #132]	; (1b7e4 <wait_for_bootrom+0xf8>)
   1b75e:	4815      	ldr	r0, [pc, #84]	; (1b7b4 <wait_for_bootrom+0xc8>)
   1b760:	4b18      	ldr	r3, [pc, #96]	; (1b7c4 <wait_for_bootrom+0xd8>)
   1b762:	4798      	blx	r3
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
   1b764:	2000      	movs	r0, #0
   1b766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   1b768:	491f      	ldr	r1, [pc, #124]	; (1b7e8 <wait_for_bootrom+0xfc>)
   1b76a:	4820      	ldr	r0, [pc, #128]	; (1b7ec <wait_for_bootrom+0x100>)
   1b76c:	4c15      	ldr	r4, [pc, #84]	; (1b7c4 <wait_for_bootrom+0xd8>)
   1b76e:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, NBIT20);
   1b770:	2180      	movs	r1, #128	; 0x80
   1b772:	0349      	lsls	r1, r1, #13
   1b774:	4812      	ldr	r0, [pc, #72]	; (1b7c0 <wait_for_bootrom+0xd4>)
   1b776:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
   1b778:	2400      	movs	r4, #0
   1b77a:	e7dd      	b.n	1b738 <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   1b77c:	491a      	ldr	r1, [pc, #104]	; (1b7e8 <wait_for_bootrom+0xfc>)
   1b77e:	481b      	ldr	r0, [pc, #108]	; (1b7ec <wait_for_bootrom+0x100>)
   1b780:	4c10      	ldr	r4, [pc, #64]	; (1b7c4 <wait_for_bootrom+0xd8>)
   1b782:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, 0);
   1b784:	2100      	movs	r1, #0
   1b786:	480e      	ldr	r0, [pc, #56]	; (1b7c0 <wait_for_bootrom+0xd4>)
   1b788:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
   1b78a:	2400      	movs	r4, #0
   1b78c:	e7d4      	b.n	1b738 <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   1b78e:	490b      	ldr	r1, [pc, #44]	; (1b7bc <wait_for_bootrom+0xd0>)
   1b790:	480b      	ldr	r0, [pc, #44]	; (1b7c0 <wait_for_bootrom+0xd4>)
   1b792:	4b0c      	ldr	r3, [pc, #48]	; (1b7c4 <wait_for_bootrom+0xd8>)
   1b794:	4798      	blx	r3
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
   1b796:	2480      	movs	r4, #128	; 0x80
   1b798:	e7ce      	b.n	1b738 <wait_for_bootrom+0x4c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
   1b79a:	2002      	movs	r0, #2
   1b79c:	4320      	orrs	r0, r4
   1b79e:	4b0c      	ldr	r3, [pc, #48]	; (1b7d0 <wait_for_bootrom+0xe4>)
   1b7a0:	4798      	blx	r3
   1b7a2:	e7d3      	b.n	1b74c <wait_for_bootrom+0x60>
   1b7a4:	00001014 	.word	0x00001014
   1b7a8:	0001b90d 	.word	0x0001b90d
   1b7ac:	0001a20d 	.word	0x0001a20d
   1b7b0:	000207bc 	.word	0x000207bc
   1b7b4:	000c000c 	.word	0x000c000c
   1b7b8:	10add09e 	.word	0x10add09e
   1b7bc:	13301354 	.word	0x13301354
   1b7c0:	0000108c 	.word	0x0000108c
   1b7c4:	0001b925 	.word	0x0001b925
   1b7c8:	0001b4e1 	.word	0x0001b4e1
   1b7cc:	0000039f 	.word	0x0000039f
   1b7d0:	0001b44d 	.word	0x0001b44d
   1b7d4:	0002a438 	.word	0x0002a438
   1b7d8:	0001913d 	.word	0x0001913d
   1b7dc:	0002a6bc 	.word	0x0002a6bc
   1b7e0:	0002a124 	.word	0x0002a124
   1b7e4:	ef522f61 	.word	0xef522f61
   1b7e8:	3c1cd57d 	.word	0x3c1cd57d
   1b7ec:	000207ac 	.word	0x000207ac

0001b7f0 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
   1b7f0:	b570      	push	{r4, r5, r6, lr}
   1b7f2:	b082      	sub	sp, #8
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
   1b7f4:	4b15      	ldr	r3, [pc, #84]	; (1b84c <wait_for_firmware_start+0x5c>)
   1b7f6:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
   1b7f8:	4b15      	ldr	r3, [pc, #84]	; (1b850 <wait_for_firmware_start+0x60>)
   1b7fa:	9300      	str	r3, [sp, #0]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
   1b7fc:	3802      	subs	r0, #2
   1b7fe:	2801      	cmp	r0, #1
   1b800:	d911      	bls.n	1b826 <wait_for_firmware_start+0x36>
{
   1b802:	2401      	movs	r4, #1
   1b804:	4264      	negs	r4, r4
   1b806:	2000      	movs	r0, #0
	}
	
	
	while (checkValue != reg)
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
   1b808:	4e12      	ldr	r6, [pc, #72]	; (1b854 <wait_for_firmware_start+0x64>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
   1b80a:	4d13      	ldr	r5, [pc, #76]	; (1b858 <wait_for_firmware_start+0x68>)
	while (checkValue != reg)
   1b80c:	9b00      	ldr	r3, [sp, #0]
   1b80e:	4298      	cmp	r0, r3
   1b810:	d00e      	beq.n	1b830 <wait_for_firmware_start+0x40>
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
   1b812:	2002      	movs	r0, #2
   1b814:	47b0      	blx	r6
		reg = nm_read_reg(regAddress);
   1b816:	9801      	ldr	r0, [sp, #4]
   1b818:	47a8      	blx	r5
   1b81a:	3c01      	subs	r4, #1
		if(++cnt >= u32Timeout)
   1b81c:	2c00      	cmp	r4, #0
   1b81e:	d1f5      	bne.n	1b80c <wait_for_firmware_start+0x1c>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
   1b820:	2005      	movs	r0, #5
   1b822:	4240      	negs	r0, r0
   1b824:	e009      	b.n	1b83a <wait_for_firmware_start+0x4a>
		regAddress = NMI_REV_REG;
   1b826:	4b0d      	ldr	r3, [pc, #52]	; (1b85c <wait_for_firmware_start+0x6c>)
   1b828:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
   1b82a:	4b0d      	ldr	r3, [pc, #52]	; (1b860 <wait_for_firmware_start+0x70>)
   1b82c:	9300      	str	r3, [sp, #0]
   1b82e:	e7e8      	b.n	1b802 <wait_for_firmware_start+0x12>
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
   1b830:	9a00      	ldr	r2, [sp, #0]
   1b832:	4b07      	ldr	r3, [pc, #28]	; (1b850 <wait_for_firmware_start+0x60>)
	sint8 ret = M2M_SUCCESS;
   1b834:	2000      	movs	r0, #0
	if(M2M_FINISH_INIT_STATE == checkValue)
   1b836:	429a      	cmp	r2, r3
   1b838:	d001      	beq.n	1b83e <wait_for_firmware_start+0x4e>
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
   1b83a:	b002      	add	sp, #8
   1b83c:	bd70      	pop	{r4, r5, r6, pc}
		nm_write_reg(NMI_STATE_REG, 0);
   1b83e:	2100      	movs	r1, #0
   1b840:	4802      	ldr	r0, [pc, #8]	; (1b84c <wait_for_firmware_start+0x5c>)
   1b842:	4b08      	ldr	r3, [pc, #32]	; (1b864 <wait_for_firmware_start+0x74>)
   1b844:	4798      	blx	r3
	sint8 ret = M2M_SUCCESS;
   1b846:	2000      	movs	r0, #0
   1b848:	e7f7      	b.n	1b83a <wait_for_firmware_start+0x4a>
   1b84a:	46c0      	nop			; (mov r8, r8)
   1b84c:	0000108c 	.word	0x0000108c
   1b850:	02532636 	.word	0x02532636
   1b854:	0001a20d 	.word	0x0001a20d
   1b858:	0001b90d 	.word	0x0001b90d
   1b85c:	000207ac 	.word	0x000207ac
   1b860:	d75dc1c3 	.word	0xd75dc1c3
   1b864:	0001b925 	.word	0x0001b925

0001b868 <chip_deinit>:

sint8 chip_deinit(void)
{
   1b868:	b530      	push	{r4, r5, lr}
   1b86a:	b083      	sub	sp, #12
	uint32 reg = 0;
   1b86c:	2300      	movs	r3, #0
   1b86e:	9301      	str	r3, [sp, #4]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
   1b870:	a901      	add	r1, sp, #4
   1b872:	20a0      	movs	r0, #160	; 0xa0
   1b874:	0140      	lsls	r0, r0, #5
   1b876:	4b12      	ldr	r3, [pc, #72]	; (1b8c0 <chip_deinit+0x58>)
   1b878:	4798      	blx	r3
   1b87a:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
   1b87c:	d113      	bne.n	1b8a6 <chip_deinit+0x3e>
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
	}
	reg &= ~(1 << 10);
   1b87e:	4911      	ldr	r1, [pc, #68]	; (1b8c4 <chip_deinit+0x5c>)
   1b880:	9b01      	ldr	r3, [sp, #4]
   1b882:	4019      	ands	r1, r3
   1b884:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
   1b886:	20a0      	movs	r0, #160	; 0xa0
   1b888:	0140      	lsls	r0, r0, #5
   1b88a:	4b0f      	ldr	r3, [pc, #60]	; (1b8c8 <chip_deinit+0x60>)
   1b88c:	4798      	blx	r3
   1b88e:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
   1b890:	d012      	beq.n	1b8b8 <chip_deinit+0x50>
		M2M_ERR("failed to de-initialize\n");
   1b892:	4a0e      	ldr	r2, [pc, #56]	; (1b8cc <chip_deinit+0x64>)
   1b894:	490e      	ldr	r1, [pc, #56]	; (1b8d0 <chip_deinit+0x68>)
   1b896:	480f      	ldr	r0, [pc, #60]	; (1b8d4 <chip_deinit+0x6c>)
   1b898:	4d0f      	ldr	r5, [pc, #60]	; (1b8d8 <chip_deinit+0x70>)
   1b89a:	47a8      	blx	r5
   1b89c:	480f      	ldr	r0, [pc, #60]	; (1b8dc <chip_deinit+0x74>)
   1b89e:	47a8      	blx	r5
   1b8a0:	480f      	ldr	r0, [pc, #60]	; (1b8e0 <chip_deinit+0x78>)
   1b8a2:	47a8      	blx	r5
		goto ERR1;
   1b8a4:	e008      	b.n	1b8b8 <chip_deinit+0x50>
		M2M_ERR("failed to de-initialize\n");
   1b8a6:	4a0f      	ldr	r2, [pc, #60]	; (1b8e4 <chip_deinit+0x7c>)
   1b8a8:	4909      	ldr	r1, [pc, #36]	; (1b8d0 <chip_deinit+0x68>)
   1b8aa:	480a      	ldr	r0, [pc, #40]	; (1b8d4 <chip_deinit+0x6c>)
   1b8ac:	4d0a      	ldr	r5, [pc, #40]	; (1b8d8 <chip_deinit+0x70>)
   1b8ae:	47a8      	blx	r5
   1b8b0:	480a      	ldr	r0, [pc, #40]	; (1b8dc <chip_deinit+0x74>)
   1b8b2:	47a8      	blx	r5
   1b8b4:	480a      	ldr	r0, [pc, #40]	; (1b8e0 <chip_deinit+0x78>)
   1b8b6:	47a8      	blx	r5
	}

ERR1:
	return ret;
}
   1b8b8:	0020      	movs	r0, r4
   1b8ba:	b003      	add	sp, #12
   1b8bc:	bd30      	pop	{r4, r5, pc}
   1b8be:	46c0      	nop			; (mov r8, r8)
   1b8c0:	0001b919 	.word	0x0001b919
   1b8c4:	fffffbff 	.word	0xfffffbff
   1b8c8:	0001b925 	.word	0x0001b925
   1b8cc:	00000207 	.word	0x00000207
   1b8d0:	0002a660 	.word	0x0002a660
   1b8d4:	0002a0fc 	.word	0x0002a0fc
   1b8d8:	0001913d 	.word	0x0001913d
   1b8dc:	0002a66c 	.word	0x0002a66c
   1b8e0:	0002a124 	.word	0x0002a124
   1b8e4:	00000201 	.word	0x00000201

0001b8e8 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
   1b8e8:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
   1b8ea:	4b01      	ldr	r3, [pc, #4]	; (1b8f0 <nm_bus_iface_init+0x8>)
   1b8ec:	4798      	blx	r3
	return ret;
}
   1b8ee:	bd10      	pop	{r4, pc}
   1b8f0:	0001a295 	.word	0x0001a295

0001b8f4 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
   1b8f4:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
   1b8f6:	4b01      	ldr	r3, [pc, #4]	; (1b8fc <nm_bus_iface_deinit+0x8>)
   1b8f8:	4798      	blx	r3

	return ret;
}
   1b8fa:	bd10      	pop	{r4, pc}
   1b8fc:	0001a4dd 	.word	0x0001a4dd

0001b900 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
   1b900:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
   1b902:	4b01      	ldr	r3, [pc, #4]	; (1b908 <nm_bus_reset+0x8>)
   1b904:	4798      	blx	r3
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
   1b906:	bd10      	pop	{r4, pc}
   1b908:	0001c639 	.word	0x0001c639

0001b90c <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
   1b90c:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
   1b90e:	4b01      	ldr	r3, [pc, #4]	; (1b914 <nm_read_reg+0x8>)
   1b910:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
   1b912:	bd10      	pop	{r4, pc}
   1b914:	0001c671 	.word	0x0001c671

0001b918 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   1b918:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
   1b91a:	4b01      	ldr	r3, [pc, #4]	; (1b920 <nm_read_reg_with_ret+0x8>)
   1b91c:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
   1b91e:	bd10      	pop	{r4, pc}
   1b920:	0001c685 	.word	0x0001c685

0001b924 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
   1b924:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
   1b926:	4b01      	ldr	r3, [pc, #4]	; (1b92c <nm_write_reg+0x8>)
   1b928:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
   1b92a:	bd10      	pop	{r4, pc}
   1b92c:	0001c69d 	.word	0x0001c69d

0001b930 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   1b930:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b932:	46d6      	mov	lr, sl
   1b934:	464f      	mov	r7, r9
   1b936:	4646      	mov	r6, r8
   1b938:	b5c0      	push	{r6, r7, lr}
   1b93a:	b082      	sub	sp, #8
   1b93c:	4680      	mov	r8, r0
   1b93e:	4689      	mov	r9, r1
   1b940:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   1b942:	4b13      	ldr	r3, [pc, #76]	; (1b990 <nm_read_block+0x60>)
   1b944:	881f      	ldrh	r7, [r3, #0]
   1b946:	3f08      	subs	r7, #8
   1b948:	b2bb      	uxth	r3, r7
   1b94a:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   1b94c:	001e      	movs	r6, r3
   1b94e:	0004      	movs	r4, r0
   1b950:	429a      	cmp	r2, r3
   1b952:	d91a      	bls.n	1b98a <nm_read_block+0x5a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
   1b954:	4b0f      	ldr	r3, [pc, #60]	; (1b994 <nm_read_block+0x64>)
   1b956:	469a      	mov	sl, r3
   1b958:	1a37      	subs	r7, r6, r0
   1b95a:	4643      	mov	r3, r8
   1b95c:	1ae1      	subs	r1, r4, r3
   1b95e:	4449      	add	r1, r9
   1b960:	9a01      	ldr	r2, [sp, #4]
   1b962:	0020      	movs	r0, r4
   1b964:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
   1b966:	2800      	cmp	r0, #0
   1b968:	d109      	bne.n	1b97e <nm_read_block+0x4e>
			u32Sz -= u16MaxTrxSz;
   1b96a:	1bad      	subs	r5, r5, r6
   1b96c:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
   1b96e:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
   1b970:	42b5      	cmp	r5, r6
   1b972:	d8f2      	bhi.n	1b95a <nm_read_block+0x2a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
   1b974:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   1b976:	4449      	add	r1, r9
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
   1b978:	0020      	movs	r0, r4
   1b97a:	4b06      	ldr	r3, [pc, #24]	; (1b994 <nm_read_block+0x64>)
   1b97c:	4798      	blx	r3
		}
	}

	return s8Ret;
}
   1b97e:	b002      	add	sp, #8
   1b980:	bc1c      	pop	{r2, r3, r4}
   1b982:	4690      	mov	r8, r2
   1b984:	4699      	mov	r9, r3
   1b986:	46a2      	mov	sl, r4
   1b988:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
   1b98a:	2100      	movs	r1, #0
   1b98c:	e7f2      	b.n	1b974 <nm_read_block+0x44>
   1b98e:	46c0      	nop			; (mov r8, r8)
   1b990:	200000dc 	.word	0x200000dc
   1b994:	0001c7c9 	.word	0x0001c7c9

0001b998 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   1b998:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b99a:	46d6      	mov	lr, sl
   1b99c:	464f      	mov	r7, r9
   1b99e:	4646      	mov	r6, r8
   1b9a0:	b5c0      	push	{r6, r7, lr}
   1b9a2:	b082      	sub	sp, #8
   1b9a4:	4680      	mov	r8, r0
   1b9a6:	4689      	mov	r9, r1
   1b9a8:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   1b9aa:	4b13      	ldr	r3, [pc, #76]	; (1b9f8 <nm_write_block+0x60>)
   1b9ac:	881f      	ldrh	r7, [r3, #0]
   1b9ae:	3f08      	subs	r7, #8
   1b9b0:	b2bb      	uxth	r3, r7
   1b9b2:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   1b9b4:	001e      	movs	r6, r3
   1b9b6:	0004      	movs	r4, r0
   1b9b8:	429a      	cmp	r2, r3
   1b9ba:	d91a      	bls.n	1b9f2 <nm_write_block+0x5a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
   1b9bc:	4b0f      	ldr	r3, [pc, #60]	; (1b9fc <nm_write_block+0x64>)
   1b9be:	469a      	mov	sl, r3
   1b9c0:	1a37      	subs	r7, r6, r0
   1b9c2:	4643      	mov	r3, r8
   1b9c4:	1ae1      	subs	r1, r4, r3
   1b9c6:	4449      	add	r1, r9
   1b9c8:	9a01      	ldr	r2, [sp, #4]
   1b9ca:	0020      	movs	r0, r4
   1b9cc:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
   1b9ce:	2800      	cmp	r0, #0
   1b9d0:	d109      	bne.n	1b9e6 <nm_write_block+0x4e>
			u32Sz -= u16MaxTrxSz;
   1b9d2:	1bad      	subs	r5, r5, r6
   1b9d4:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
   1b9d6:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
   1b9d8:	42b5      	cmp	r5, r6
   1b9da:	d8f2      	bhi.n	1b9c2 <nm_write_block+0x2a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
   1b9dc:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   1b9de:	4449      	add	r1, r9
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
   1b9e0:	0020      	movs	r0, r4
   1b9e2:	4b06      	ldr	r3, [pc, #24]	; (1b9fc <nm_write_block+0x64>)
   1b9e4:	4798      	blx	r3
		}
	}

	return s8Ret;
}
   1b9e6:	b002      	add	sp, #8
   1b9e8:	bc1c      	pop	{r2, r3, r4}
   1b9ea:	4690      	mov	r8, r2
   1b9ec:	4699      	mov	r9, r3
   1b9ee:	46a2      	mov	sl, r4
   1b9f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
   1b9f2:	2100      	movs	r1, #0
   1b9f4:	e7f2      	b.n	1b9dc <nm_write_block+0x44>
   1b9f6:	46c0      	nop			; (mov r8, r8)
   1b9f8:	200000dc 	.word	0x200000dc
   1b9fc:	0001c895 	.word	0x0001c895

0001ba00 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
   1ba00:	b570      	push	{r4, r5, r6, lr}
   1ba02:	b084      	sub	sp, #16
   1ba04:	0004      	movs	r4, r0
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
   1ba06:	2300      	movs	r3, #0
   1ba08:	9303      	str	r3, [sp, #12]
	sint8	ret = M2M_SUCCESS;
	tstrGpRegs strgp = {0};
   1ba0a:	2208      	movs	r2, #8
   1ba0c:	2100      	movs	r1, #0
   1ba0e:	a801      	add	r0, sp, #4
   1ba10:	4b2d      	ldr	r3, [pc, #180]	; (1bac8 <nm_get_firmware_full_info+0xc8>)
   1ba12:	4798      	blx	r3
	if (pstrRev != NULL)
   1ba14:	2c00      	cmp	r4, #0
   1ba16:	d044      	beq.n	1baa2 <nm_get_firmware_full_info+0xa2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
   1ba18:	2228      	movs	r2, #40	; 0x28
   1ba1a:	2100      	movs	r1, #0
   1ba1c:	0020      	movs	r0, r4
   1ba1e:	4b2b      	ldr	r3, [pc, #172]	; (1bacc <nm_get_firmware_full_info+0xcc>)
   1ba20:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
   1ba22:	a903      	add	r1, sp, #12
   1ba24:	482a      	ldr	r0, [pc, #168]	; (1bad0 <nm_get_firmware_full_info+0xd0>)
   1ba26:	4b2b      	ldr	r3, [pc, #172]	; (1bad4 <nm_get_firmware_full_info+0xd4>)
   1ba28:	4798      	blx	r3
		if(ret == M2M_SUCCESS)
   1ba2a:	2800      	cmp	r0, #0
   1ba2c:	d13a      	bne.n	1baa4 <nm_get_firmware_full_info+0xa4>
		{
			if(reg != 0)
   1ba2e:	9b03      	ldr	r3, [sp, #12]
   1ba30:	2b00      	cmp	r3, #0
   1ba32:	d039      	beq.n	1baa8 <nm_get_firmware_full_info+0xa8>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
   1ba34:	20c0      	movs	r0, #192	; 0xc0
   1ba36:	0280      	lsls	r0, r0, #10
   1ba38:	4318      	orrs	r0, r3
   1ba3a:	2208      	movs	r2, #8
   1ba3c:	a901      	add	r1, sp, #4
   1ba3e:	4b26      	ldr	r3, [pc, #152]	; (1bad8 <nm_get_firmware_full_info+0xd8>)
   1ba40:	4798      	blx	r3
				if(ret == M2M_SUCCESS)
   1ba42:	2800      	cmp	r0, #0
   1ba44:	d12e      	bne.n	1baa4 <nm_get_firmware_full_info+0xa4>
				{
					reg = strgp.u32Firmware_Ota_rev;
					reg &= 0x0000ffff;
   1ba46:	9b02      	ldr	r3, [sp, #8]
   1ba48:	0418      	lsls	r0, r3, #16
   1ba4a:	0c00      	lsrs	r0, r0, #16
   1ba4c:	9003      	str	r0, [sp, #12]
					if(reg != 0)
   1ba4e:	d02e      	beq.n	1baae <nm_get_firmware_full_info+0xae>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
   1ba50:	23c0      	movs	r3, #192	; 0xc0
   1ba52:	029b      	lsls	r3, r3, #10
   1ba54:	4318      	orrs	r0, r3
   1ba56:	2228      	movs	r2, #40	; 0x28
   1ba58:	0021      	movs	r1, r4
   1ba5a:	4b1f      	ldr	r3, [pc, #124]	; (1bad8 <nm_get_firmware_full_info+0xd8>)
   1ba5c:	4798      	blx	r3
						if(ret == M2M_SUCCESS)
   1ba5e:	2800      	cmp	r0, #0
   1ba60:	d120      	bne.n	1baa4 <nm_get_firmware_full_info+0xa4>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
   1ba62:	7921      	ldrb	r1, [r4, #4]
   1ba64:	0209      	lsls	r1, r1, #8
   1ba66:	79a2      	ldrb	r2, [r4, #6]
   1ba68:	230f      	movs	r3, #15
   1ba6a:	401a      	ands	r2, r3
   1ba6c:	430a      	orrs	r2, r1
   1ba6e:	7961      	ldrb	r1, [r4, #5]
   1ba70:	0109      	lsls	r1, r1, #4
   1ba72:	25ff      	movs	r5, #255	; 0xff
   1ba74:	4029      	ands	r1, r5
   1ba76:	430a      	orrs	r2, r1
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
   1ba78:	79e1      	ldrb	r1, [r4, #7]
   1ba7a:	0209      	lsls	r1, r1, #8
   1ba7c:	7a66      	ldrb	r6, [r4, #9]
   1ba7e:	4033      	ands	r3, r6
   1ba80:	430b      	orrs	r3, r1
   1ba82:	7a21      	ldrb	r1, [r4, #8]
   1ba84:	0109      	lsls	r1, r1, #4
   1ba86:	400d      	ands	r5, r1
   1ba88:	432b      	orrs	r3, r5
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
   1ba8a:	2a00      	cmp	r2, #0
   1ba8c:	d012      	beq.n	1bab4 <nm_get_firmware_full_info+0xb4>
   1ba8e:	2b00      	cmp	r3, #0
   1ba90:	d013      	beq.n	1baba <nm_get_firmware_full_info+0xba>
								ret = M2M_ERR_FAIL;
								goto EXIT;
							}
							if(curr_drv_ver <  min_req_drv_ver) {
   1ba92:	4912      	ldr	r1, [pc, #72]	; (1badc <nm_get_firmware_full_info+0xdc>)
   1ba94:	428b      	cmp	r3, r1
   1ba96:	d813      	bhi.n	1bac0 <nm_get_firmware_full_info+0xc0>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
								goto EXIT;
							}
							if(curr_drv_ver >  curr_firm_ver) {
   1ba98:	4b11      	ldr	r3, [pc, #68]	; (1bae0 <nm_get_firmware_full_info+0xe0>)
   1ba9a:	429a      	cmp	r2, r3
   1ba9c:	d802      	bhi.n	1baa4 <nm_get_firmware_full_info+0xa4>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
   1ba9e:	380d      	subs	r0, #13
   1baa0:	e000      	b.n	1baa4 <nm_get_firmware_full_info+0xa4>
	sint8	ret = M2M_SUCCESS;
   1baa2:	2000      	movs	r0, #0
			}
		}
	}
EXIT:
	return ret;
}
   1baa4:	b004      	add	sp, #16
   1baa6:	bd70      	pop	{r4, r5, r6, pc}
				ret = M2M_ERR_FAIL;
   1baa8:	200c      	movs	r0, #12
   1baaa:	4240      	negs	r0, r0
   1baac:	e7fa      	b.n	1baa4 <nm_get_firmware_full_info+0xa4>
						ret = M2M_ERR_FAIL;
   1baae:	200c      	movs	r0, #12
   1bab0:	4240      	negs	r0, r0
   1bab2:	e7f7      	b.n	1baa4 <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FAIL;
   1bab4:	200c      	movs	r0, #12
   1bab6:	4240      	negs	r0, r0
   1bab8:	e7f4      	b.n	1baa4 <nm_get_firmware_full_info+0xa4>
   1baba:	200c      	movs	r0, #12
   1babc:	4240      	negs	r0, r0
   1babe:	e7f1      	b.n	1baa4 <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FW_VER_MISMATCH;
   1bac0:	200d      	movs	r0, #13
   1bac2:	4240      	negs	r0, r0
   1bac4:	e7ee      	b.n	1baa4 <nm_get_firmware_full_info+0xa4>
   1bac6:	46c0      	nop			; (mov r8, r8)
   1bac8:	00025d0f 	.word	0x00025d0f
   1bacc:	0001a55d 	.word	0x0001a55d
   1bad0:	000c0008 	.word	0x000c0008
   1bad4:	0001b919 	.word	0x0001b919
   1bad8:	0001b931 	.word	0x0001b931
   1badc:	00001354 	.word	0x00001354
   1bae0:	00001353 	.word	0x00001353

0001bae4 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
   1bae4:	b570      	push	{r4, r5, r6, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;
	
	if(NULL != arg) {
   1bae6:	2800      	cmp	r0, #0
   1bae8:	d034      	beq.n	1bb54 <nm_drv_init+0x70>
		u8Mode = *((uint8 *)arg);
   1baea:	7805      	ldrb	r5, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
   1baec:	1e6b      	subs	r3, r5, #1
   1baee:	2b03      	cmp	r3, #3
   1baf0:	d900      	bls.n	1baf4 <nm_drv_init+0x10>
			u8Mode = M2M_WIFI_MODE_NORMAL;
   1baf2:	2501      	movs	r5, #1
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
	}
	
	ret = nm_bus_iface_init(NULL);
   1baf4:	2000      	movs	r0, #0
   1baf6:	4b1e      	ldr	r3, [pc, #120]	; (1bb70 <nm_drv_init+0x8c>)
   1baf8:	4798      	blx	r3
   1bafa:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
   1bafc:	d12c      	bne.n	1bb58 <nm_drv_init+0x74>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
   1bafe:	481d      	ldr	r0, [pc, #116]	; (1bb74 <nm_drv_init+0x90>)
   1bb00:	4c1d      	ldr	r4, [pc, #116]	; (1bb78 <nm_drv_init+0x94>)
   1bb02:	47a0      	blx	r4
   1bb04:	4b1d      	ldr	r3, [pc, #116]	; (1bb7c <nm_drv_init+0x98>)
   1bb06:	4798      	blx	r3
   1bb08:	0001      	movs	r1, r0
   1bb0a:	481d      	ldr	r0, [pc, #116]	; (1bb80 <nm_drv_init+0x9c>)
   1bb0c:	47a0      	blx	r4
   1bb0e:	481d      	ldr	r0, [pc, #116]	; (1bb84 <nm_drv_init+0xa0>)
   1bb10:	47a0      	blx	r4
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
   1bb12:	4b1d      	ldr	r3, [pc, #116]	; (1bb88 <nm_drv_init+0xa4>)
   1bb14:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
   1bb16:	0028      	movs	r0, r5
   1bb18:	4b1c      	ldr	r3, [pc, #112]	; (1bb8c <nm_drv_init+0xa8>)
   1bb1a:	4798      	blx	r3
   1bb1c:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
   1bb1e:	d115      	bne.n	1bb4c <nm_drv_init+0x68>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
   1bb20:	0028      	movs	r0, r5
   1bb22:	4b1b      	ldr	r3, [pc, #108]	; (1bb90 <nm_drv_init+0xac>)
   1bb24:	4798      	blx	r3
   1bb26:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
   1bb28:	d110      	bne.n	1bb4c <nm_drv_init+0x68>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
   1bb2a:	3d02      	subs	r5, #2
   1bb2c:	2d01      	cmp	r5, #1
   1bb2e:	d90f      	bls.n	1bb50 <nm_drv_init+0x6c>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
   1bb30:	4b18      	ldr	r3, [pc, #96]	; (1bb94 <nm_drv_init+0xb0>)
   1bb32:	4798      	blx	r3
   1bb34:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
   1bb36:	d00b      	beq.n	1bb50 <nm_drv_init+0x6c>
		M2M_ERR("failed to enable interrupts..\n");
   1bb38:	22a7      	movs	r2, #167	; 0xa7
   1bb3a:	0052      	lsls	r2, r2, #1
   1bb3c:	4916      	ldr	r1, [pc, #88]	; (1bb98 <nm_drv_init+0xb4>)
   1bb3e:	4817      	ldr	r0, [pc, #92]	; (1bb9c <nm_drv_init+0xb8>)
   1bb40:	4d0d      	ldr	r5, [pc, #52]	; (1bb78 <nm_drv_init+0x94>)
   1bb42:	47a8      	blx	r5
   1bb44:	4816      	ldr	r0, [pc, #88]	; (1bba0 <nm_drv_init+0xbc>)
   1bb46:	47a8      	blx	r5
   1bb48:	480e      	ldr	r0, [pc, #56]	; (1bb84 <nm_drv_init+0xa0>)
   1bb4a:	47a8      	blx	r5
		goto ERR2;
	}
	return ret;
ERR2:
	nm_bus_iface_deinit();
   1bb4c:	4b15      	ldr	r3, [pc, #84]	; (1bba4 <nm_drv_init+0xc0>)
   1bb4e:	4798      	blx	r3
ERR1:
	return ret;
}
   1bb50:	0020      	movs	r0, r4
   1bb52:	bd70      	pop	{r4, r5, r6, pc}
		u8Mode = M2M_WIFI_MODE_NORMAL;
   1bb54:	2501      	movs	r5, #1
   1bb56:	e7cd      	b.n	1baf4 <nm_drv_init+0x10>
		M2M_ERR("[nmi start]: fail init bus\n");
   1bb58:	2290      	movs	r2, #144	; 0x90
   1bb5a:	0052      	lsls	r2, r2, #1
   1bb5c:	490e      	ldr	r1, [pc, #56]	; (1bb98 <nm_drv_init+0xb4>)
   1bb5e:	480f      	ldr	r0, [pc, #60]	; (1bb9c <nm_drv_init+0xb8>)
   1bb60:	4d05      	ldr	r5, [pc, #20]	; (1bb78 <nm_drv_init+0x94>)
   1bb62:	47a8      	blx	r5
   1bb64:	4810      	ldr	r0, [pc, #64]	; (1bba8 <nm_drv_init+0xc4>)
   1bb66:	47a8      	blx	r5
   1bb68:	4806      	ldr	r0, [pc, #24]	; (1bb84 <nm_drv_init+0xa0>)
   1bb6a:	47a8      	blx	r5
		goto ERR1;
   1bb6c:	e7f0      	b.n	1bb50 <nm_drv_init+0x6c>
   1bb6e:	46c0      	nop			; (mov r8, r8)
   1bb70:	0001b8e9 	.word	0x0001b8e9
   1bb74:	0002a438 	.word	0x0002a438
   1bb78:	0001913d 	.word	0x0001913d
   1bb7c:	0001b4e1 	.word	0x0001b4e1
   1bb80:	0002a78c 	.word	0x0002a78c
   1bb84:	0002a124 	.word	0x0002a124
   1bb88:	0001c6b5 	.word	0x0001c6b5
   1bb8c:	0001b6ed 	.word	0x0001b6ed
   1bb90:	0001b7f1 	.word	0x0001b7f1
   1bb94:	0001b485 	.word	0x0001b485
   1bb98:	0002a6d4 	.word	0x0002a6d4
   1bb9c:	0002a0fc 	.word	0x0002a0fc
   1bba0:	0002a750 	.word	0x0002a750
   1bba4:	0001b8f5 	.word	0x0001b8f5
   1bba8:	0002a770 	.word	0x0002a770

0001bbac <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
   1bbac:	b570      	push	{r4, r5, r6, lr}
	sint8 ret;

	ret = chip_deinit();
   1bbae:	4b19      	ldr	r3, [pc, #100]	; (1bc14 <nm_drv_deinit+0x68>)
   1bbb0:	4798      	blx	r3
   1bbb2:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
   1bbb4:	d10b      	bne.n	1bbce <nm_drv_deinit+0x22>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
   1bbb6:	2000      	movs	r0, #0
   1bbb8:	4b17      	ldr	r3, [pc, #92]	; (1bc18 <nm_drv_deinit+0x6c>)
   1bbba:	4798      	blx	r3
   1bbbc:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
   1bbbe:	d112      	bne.n	1bbe6 <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
   1bbc0:	4b16      	ldr	r3, [pc, #88]	; (1bc1c <nm_drv_deinit+0x70>)
   1bbc2:	4798      	blx	r3
   1bbc4:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
   1bbc6:	d119      	bne.n	1bbfc <nm_drv_deinit+0x50>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
   1bbc8:	4b15      	ldr	r3, [pc, #84]	; (1bc20 <nm_drv_deinit+0x74>)
   1bbca:	4798      	blx	r3
   1bbcc:	e009      	b.n	1bbe2 <nm_drv_deinit+0x36>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
   1bbce:	2266      	movs	r2, #102	; 0x66
   1bbd0:	32ff      	adds	r2, #255	; 0xff
   1bbd2:	4914      	ldr	r1, [pc, #80]	; (1bc24 <nm_drv_deinit+0x78>)
   1bbd4:	4814      	ldr	r0, [pc, #80]	; (1bc28 <nm_drv_deinit+0x7c>)
   1bbd6:	4d15      	ldr	r5, [pc, #84]	; (1bc2c <nm_drv_deinit+0x80>)
   1bbd8:	47a8      	blx	r5
   1bbda:	4815      	ldr	r0, [pc, #84]	; (1bc30 <nm_drv_deinit+0x84>)
   1bbdc:	47a8      	blx	r5
   1bbde:	4815      	ldr	r0, [pc, #84]	; (1bc34 <nm_drv_deinit+0x88>)
   1bbe0:	47a8      	blx	r5
#endif

ERR1:
	return ret;
}
   1bbe2:	0020      	movs	r0, r4
   1bbe4:	bd70      	pop	{r4, r5, r6, pc}
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
   1bbe6:	22b6      	movs	r2, #182	; 0xb6
   1bbe8:	0052      	lsls	r2, r2, #1
   1bbea:	490e      	ldr	r1, [pc, #56]	; (1bc24 <nm_drv_deinit+0x78>)
   1bbec:	480e      	ldr	r0, [pc, #56]	; (1bc28 <nm_drv_deinit+0x7c>)
   1bbee:	4d0f      	ldr	r5, [pc, #60]	; (1bc2c <nm_drv_deinit+0x80>)
   1bbf0:	47a8      	blx	r5
   1bbf2:	4811      	ldr	r0, [pc, #68]	; (1bc38 <nm_drv_deinit+0x8c>)
   1bbf4:	47a8      	blx	r5
   1bbf6:	480f      	ldr	r0, [pc, #60]	; (1bc34 <nm_drv_deinit+0x88>)
   1bbf8:	47a8      	blx	r5
		goto ERR1;
   1bbfa:	e7f2      	b.n	1bbe2 <nm_drv_deinit+0x36>
		M2M_ERR("[nmi stop]: fail init bus\n");
   1bbfc:	22b9      	movs	r2, #185	; 0xb9
   1bbfe:	0052      	lsls	r2, r2, #1
   1bc00:	4908      	ldr	r1, [pc, #32]	; (1bc24 <nm_drv_deinit+0x78>)
   1bc02:	4809      	ldr	r0, [pc, #36]	; (1bc28 <nm_drv_deinit+0x7c>)
   1bc04:	4d09      	ldr	r5, [pc, #36]	; (1bc2c <nm_drv_deinit+0x80>)
   1bc06:	47a8      	blx	r5
   1bc08:	480c      	ldr	r0, [pc, #48]	; (1bc3c <nm_drv_deinit+0x90>)
   1bc0a:	47a8      	blx	r5
   1bc0c:	4809      	ldr	r0, [pc, #36]	; (1bc34 <nm_drv_deinit+0x88>)
   1bc0e:	47a8      	blx	r5
		goto ERR1;
   1bc10:	e7e7      	b.n	1bbe2 <nm_drv_deinit+0x36>
   1bc12:	46c0      	nop			; (mov r8, r8)
   1bc14:	0001b869 	.word	0x0001b869
   1bc18:	0001d409 	.word	0x0001d409
   1bc1c:	0001b8f5 	.word	0x0001b8f5
   1bc20:	0001c661 	.word	0x0001c661
   1bc24:	0002a6e0 	.word	0x0002a6e0
   1bc28:	0002a0fc 	.word	0x0002a0fc
   1bc2c:	0001913d 	.word	0x0001913d
   1bc30:	0002a6f0 	.word	0x0002a6f0
   1bc34:	0002a124 	.word	0x0002a124
   1bc38:	0002a710 	.word	0x0002a710
   1bc3c:	0002a734 	.word	0x0002a734

0001bc40 <nmi_spi_write>:
	spi.u16Sz = sz;
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
}

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
   1bc40:	b500      	push	{lr}
   1bc42:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
   1bc44:	ab01      	add	r3, sp, #4
   1bc46:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
   1bc48:	2200      	movs	r2, #0
   1bc4a:	9202      	str	r2, [sp, #8]
	spi.u16Sz = sz;
   1bc4c:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   1bc4e:	0019      	movs	r1, r3
   1bc50:	2003      	movs	r0, #3
   1bc52:	4b02      	ldr	r3, [pc, #8]	; (1bc5c <nmi_spi_write+0x1c>)
   1bc54:	4798      	blx	r3
}
   1bc56:	b005      	add	sp, #20
   1bc58:	bd00      	pop	{pc}
   1bc5a:	46c0      	nop			; (mov r8, r8)
   1bc5c:	0001a399 	.word	0x0001a399

0001bc60 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
   1bc60:	b570      	push	{r4, r5, r6, lr}
   1bc62:	b084      	sub	sp, #16
   1bc64:	ac08      	add	r4, sp, #32
   1bc66:	7825      	ldrb	r5, [r4, #0]
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
   1bc68:	ac01      	add	r4, sp, #4
   1bc6a:	7020      	strb	r0, [r4, #0]
	switch (cmd) {
   1bc6c:	303f      	adds	r0, #63	; 0x3f
   1bc6e:	b2c4      	uxtb	r4, r0
   1bc70:	2c0e      	cmp	r4, #14
   1bc72:	d900      	bls.n	1bc76 <spi_cmd+0x16>
   1bc74:	e082      	b.n	1bd7c <spi_cmd+0x11c>
   1bc76:	00a0      	lsls	r0, r4, #2
   1bc78:	4c4e      	ldr	r4, [pc, #312]	; (1bdb4 <spi_cmd+0x154>)
   1bc7a:	5820      	ldr	r0, [r4, r0]
   1bc7c:	4687      	mov	pc, r0
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
   1bc7e:	ab01      	add	r3, sp, #4
   1bc80:	0c0a      	lsrs	r2, r1, #16
   1bc82:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   1bc84:	0a0a      	lsrs	r2, r1, #8
   1bc86:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   1bc88:	70d9      	strb	r1, [r3, #3]
		len = 5;
   1bc8a:	2105      	movs	r1, #5
		result = N_FAIL;
		break;
	}

	if (result) {
		if (!gu8Crc_off)
   1bc8c:	4b4a      	ldr	r3, [pc, #296]	; (1bdb8 <spi_cmd+0x158>)
   1bc8e:	781b      	ldrb	r3, [r3, #0]
   1bc90:	2b00      	cmp	r3, #0
   1bc92:	d075      	beq.n	1bd80 <spi_cmd+0x120>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
		else
			len-=1;
   1bc94:	3901      	subs	r1, #1
   1bc96:	b2c9      	uxtb	r1, r1
   1bc98:	e081      	b.n	1bd9e <spi_cmd+0x13e>
		bc[1] = (uint8)(adr >> 8);
   1bc9a:	0a0b      	lsrs	r3, r1, #8
   1bc9c:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
   1bc9e:	2d00      	cmp	r5, #0
   1bca0:	d107      	bne.n	1bcb2 <spi_cmd+0x52>
		bc[1] = (uint8)(adr >> 8);
   1bca2:	aa01      	add	r2, sp, #4
   1bca4:	7053      	strb	r3, [r2, #1]
		bc[2] = (uint8)adr;
   1bca6:	ab01      	add	r3, sp, #4
   1bca8:	7099      	strb	r1, [r3, #2]
		bc[3] = 0x00;
   1bcaa:	2200      	movs	r2, #0
   1bcac:	70da      	strb	r2, [r3, #3]
		len = 5;
   1bcae:	2105      	movs	r1, #5
		break;
   1bcb0:	e7ec      	b.n	1bc8c <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
   1bcb2:	2280      	movs	r2, #128	; 0x80
   1bcb4:	4252      	negs	r2, r2
   1bcb6:	4313      	orrs	r3, r2
   1bcb8:	aa01      	add	r2, sp, #4
   1bcba:	7053      	strb	r3, [r2, #1]
   1bcbc:	e7f3      	b.n	1bca6 <spi_cmd+0x46>
		bc[1] = 0x00;
   1bcbe:	ab01      	add	r3, sp, #4
   1bcc0:	2200      	movs	r2, #0
   1bcc2:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   1bcc4:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   1bcc6:	70da      	strb	r2, [r3, #3]
		len = 5;
   1bcc8:	2105      	movs	r1, #5
		break;
   1bcca:	e7df      	b.n	1bc8c <spi_cmd+0x2c>
		bc[1] = 0x00;
   1bccc:	ab01      	add	r3, sp, #4
   1bcce:	2200      	movs	r2, #0
   1bcd0:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   1bcd2:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   1bcd4:	70da      	strb	r2, [r3, #3]
		len = 5;
   1bcd6:	2105      	movs	r1, #5
		break;
   1bcd8:	e7d8      	b.n	1bc8c <spi_cmd+0x2c>
		bc[1] = 0xff;
   1bcda:	ab01      	add	r3, sp, #4
   1bcdc:	22ff      	movs	r2, #255	; 0xff
   1bcde:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
   1bce0:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
   1bce2:	70da      	strb	r2, [r3, #3]
		len = 5;
   1bce4:	2105      	movs	r1, #5
		break;
   1bce6:	e7d1      	b.n	1bc8c <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
   1bce8:	aa01      	add	r2, sp, #4
   1bcea:	0c08      	lsrs	r0, r1, #16
   1bcec:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
   1bcee:	0a08      	lsrs	r0, r1, #8
   1bcf0:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
   1bcf2:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 8);
   1bcf4:	0a19      	lsrs	r1, r3, #8
   1bcf6:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz);
   1bcf8:	7153      	strb	r3, [r2, #5]
		len = 7;
   1bcfa:	2107      	movs	r1, #7
		break;
   1bcfc:	e7c6      	b.n	1bc8c <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
   1bcfe:	aa01      	add	r2, sp, #4
   1bd00:	0c08      	lsrs	r0, r1, #16
   1bd02:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
   1bd04:	0a08      	lsrs	r0, r1, #8
   1bd06:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
   1bd08:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 16);
   1bd0a:	0c19      	lsrs	r1, r3, #16
   1bd0c:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz >> 8);
   1bd0e:	0a19      	lsrs	r1, r3, #8
   1bd10:	7151      	strb	r1, [r2, #5]
		bc[6] = (uint8)(sz);
   1bd12:	7193      	strb	r3, [r2, #6]
		len = 8;
   1bd14:	2108      	movs	r1, #8
		break;
   1bd16:	e7b9      	b.n	1bc8c <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 8);
   1bd18:	0a0b      	lsrs	r3, r1, #8
   1bd1a:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
   1bd1c:	2d00      	cmp	r5, #0
   1bd1e:	d10c      	bne.n	1bd3a <spi_cmd+0xda>
		bc[1] = (uint8)(adr >> 8);
   1bd20:	a801      	add	r0, sp, #4
   1bd22:	7043      	strb	r3, [r0, #1]
		bc[2] = (uint8)(adr);
   1bd24:	ab01      	add	r3, sp, #4
   1bd26:	7099      	strb	r1, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
   1bd28:	0e11      	lsrs	r1, r2, #24
   1bd2a:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
   1bd2c:	0c11      	lsrs	r1, r2, #16
   1bd2e:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
   1bd30:	0a11      	lsrs	r1, r2, #8
   1bd32:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data);
   1bd34:	719a      	strb	r2, [r3, #6]
		len = 8;
   1bd36:	2108      	movs	r1, #8
		break;
   1bd38:	e7a8      	b.n	1bc8c <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
   1bd3a:	2080      	movs	r0, #128	; 0x80
   1bd3c:	4240      	negs	r0, r0
   1bd3e:	4303      	orrs	r3, r0
   1bd40:	a801      	add	r0, sp, #4
   1bd42:	7043      	strb	r3, [r0, #1]
   1bd44:	e7ee      	b.n	1bd24 <spi_cmd+0xc4>
		bc[1] = (uint8)(adr >> 16);
   1bd46:	ab01      	add	r3, sp, #4
   1bd48:	0c08      	lsrs	r0, r1, #16
   1bd4a:	7058      	strb	r0, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   1bd4c:	0a08      	lsrs	r0, r1, #8
   1bd4e:	7098      	strb	r0, [r3, #2]
		bc[3] = (uint8)(adr);
   1bd50:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
   1bd52:	0e11      	lsrs	r1, r2, #24
   1bd54:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
   1bd56:	0c11      	lsrs	r1, r2, #16
   1bd58:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
   1bd5a:	0a11      	lsrs	r1, r2, #8
   1bd5c:	7199      	strb	r1, [r3, #6]
		bc[7] = (uint8)(u32data);
   1bd5e:	71da      	strb	r2, [r3, #7]
		len = 9;
   1bd60:	2109      	movs	r1, #9
		break;
   1bd62:	e793      	b.n	1bc8c <spi_cmd+0x2c>

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   1bd64:	2290      	movs	r2, #144	; 0x90
   1bd66:	0052      	lsls	r2, r2, #1
   1bd68:	4914      	ldr	r1, [pc, #80]	; (1bdbc <spi_cmd+0x15c>)
   1bd6a:	4815      	ldr	r0, [pc, #84]	; (1bdc0 <spi_cmd+0x160>)
   1bd6c:	4c15      	ldr	r4, [pc, #84]	; (1bdc4 <spi_cmd+0x164>)
   1bd6e:	47a0      	blx	r4
   1bd70:	4815      	ldr	r0, [pc, #84]	; (1bdc8 <spi_cmd+0x168>)
   1bd72:	47a0      	blx	r4
   1bd74:	4815      	ldr	r0, [pc, #84]	; (1bdcc <spi_cmd+0x16c>)
   1bd76:	47a0      	blx	r4
			result = N_FAIL;
   1bd78:	2300      	movs	r3, #0
   1bd7a:	e017      	b.n	1bdac <spi_cmd+0x14c>
	switch (cmd) {
   1bd7c:	2300      	movs	r3, #0
   1bd7e:	e015      	b.n	1bdac <spi_cmd+0x14c>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
   1bd80:	1e4e      	subs	r6, r1, #1
   1bd82:	aa01      	add	r2, sp, #4
   1bd84:	1995      	adds	r5, r2, r6
   1bd86:	237f      	movs	r3, #127	; 0x7f
	return crc7_syndrome_table[(crc << 1) ^ data];
   1bd88:	4c11      	ldr	r4, [pc, #68]	; (1bdd0 <spi_cmd+0x170>)
   1bd8a:	005b      	lsls	r3, r3, #1
   1bd8c:	7810      	ldrb	r0, [r2, #0]
   1bd8e:	4043      	eors	r3, r0
   1bd90:	5ce3      	ldrb	r3, [r4, r3]
   1bd92:	3201      	adds	r2, #1
	while (len--)
   1bd94:	42aa      	cmp	r2, r5
   1bd96:	d1f8      	bne.n	1bd8a <spi_cmd+0x12a>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
   1bd98:	005b      	lsls	r3, r3, #1
   1bd9a:	aa01      	add	r2, sp, #4
   1bd9c:	5593      	strb	r3, [r2, r6]
		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
   1bd9e:	b289      	uxth	r1, r1
   1bda0:	a801      	add	r0, sp, #4
   1bda2:	4b0c      	ldr	r3, [pc, #48]	; (1bdd4 <spi_cmd+0x174>)
   1bda4:	4798      	blx	r3
   1bda6:	2301      	movs	r3, #1
   1bda8:	2800      	cmp	r0, #0
   1bdaa:	d1db      	bne.n	1bd64 <spi_cmd+0x104>
		}
	}

	return result;
}
   1bdac:	0018      	movs	r0, r3
   1bdae:	b004      	add	sp, #16
   1bdb0:	bd70      	pop	{r4, r5, r6, pc}
   1bdb2:	46c0      	nop			; (mov r8, r8)
   1bdb4:	0002a79c 	.word	0x0002a79c
   1bdb8:	20003cb4 	.word	0x20003cb4
   1bdbc:	0002a818 	.word	0x0002a818
   1bdc0:	0002a0fc 	.word	0x0002a0fc
   1bdc4:	0001913d 	.word	0x0001913d
   1bdc8:	0002ac1c 	.word	0x0002ac1c
   1bdcc:	0002a124 	.word	0x0002a124
   1bdd0:	0002a8a8 	.word	0x0002a8a8
   1bdd4:	0001bc41 	.word	0x0001bc41

0001bdd8 <nmi_spi_read>:
{
   1bdd8:	b500      	push	{lr}
   1bdda:	b085      	sub	sp, #20
	spi.pu8InBuf = NULL;
   1bddc:	ab01      	add	r3, sp, #4
   1bdde:	2200      	movs	r2, #0
   1bde0:	9201      	str	r2, [sp, #4]
	spi.pu8OutBuf = b;
   1bde2:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
   1bde4:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   1bde6:	0019      	movs	r1, r3
   1bde8:	2003      	movs	r0, #3
   1bdea:	4b02      	ldr	r3, [pc, #8]	; (1bdf4 <nmi_spi_read+0x1c>)
   1bdec:	4798      	blx	r3
}
   1bdee:	b005      	add	sp, #20
   1bdf0:	bd00      	pop	{pc}
   1bdf2:	46c0      	nop			; (mov r8, r8)
   1bdf4:	0001a399 	.word	0x0001a399

0001bdf8 <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
   1bdf8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bdfa:	46c6      	mov	lr, r8
   1bdfc:	b500      	push	{lr}
   1bdfe:	b082      	sub	sp, #8
   1be00:	0007      	movs	r7, r0
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   1be02:	28cf      	cmp	r0, #207	; 0xcf
   1be04:	d02b      	beq.n	1be5e <spi_cmd_rsp+0x66>
   1be06:	0003      	movs	r3, r0
   1be08:	333b      	adds	r3, #59	; 0x3b
   1be0a:	b2db      	uxtb	r3, r3
   1be0c:	2b01      	cmp	r3, #1
   1be0e:	d926      	bls.n	1be5e <spi_cmd_rsp+0x66>
{
   1be10:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   1be12:	466b      	mov	r3, sp
   1be14:	1dde      	adds	r6, r3, #7
   1be16:	4b24      	ldr	r3, [pc, #144]	; (1bea8 <spi_cmd_rsp+0xb0>)
   1be18:	4698      	mov	r8, r3
   1be1a:	2101      	movs	r1, #1
   1be1c:	0030      	movs	r0, r6
   1be1e:	47c0      	blx	r8
   1be20:	1e05      	subs	r5, r0, #0
   1be22:	d125      	bne.n	1be70 <spi_cmd_rsp+0x78>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
   1be24:	7833      	ldrb	r3, [r6, #0]
   1be26:	42bb      	cmp	r3, r7
   1be28:	d02e      	beq.n	1be88 <spi_cmd_rsp+0x90>
   1be2a:	3c01      	subs	r4, #1
   1be2c:	b2e4      	uxtb	r4, r4
   1be2e:	2c00      	cmp	r4, #0
   1be30:	d1f3      	bne.n	1be1a <spi_cmd_rsp+0x22>
   1be32:	340b      	adds	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   1be34:	466b      	mov	r3, sp
   1be36:	1dde      	adds	r6, r3, #7
   1be38:	4f1b      	ldr	r7, [pc, #108]	; (1bea8 <spi_cmd_rsp+0xb0>)
   1be3a:	2101      	movs	r1, #1
   1be3c:	0030      	movs	r0, r6
   1be3e:	47b8      	blx	r7
   1be40:	2800      	cmp	r0, #0
   1be42:	d123      	bne.n	1be8c <spi_cmd_rsp+0x94>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
   1be44:	7833      	ldrb	r3, [r6, #0]
   1be46:	2b00      	cmp	r3, #0
   1be48:	d02b      	beq.n	1bea2 <spi_cmd_rsp+0xaa>
   1be4a:	3c01      	subs	r4, #1
   1be4c:	b2e4      	uxtb	r4, r4
   1be4e:	2c00      	cmp	r4, #0
   1be50:	d1f3      	bne.n	1be3a <spi_cmd_rsp+0x42>
	sint8 result = N_OK;
   1be52:	2501      	movs	r5, #1

_fail_:

	return result;
}
   1be54:	0028      	movs	r0, r5
   1be56:	b002      	add	sp, #8
   1be58:	bc04      	pop	{r2}
   1be5a:	4690      	mov	r8, r2
   1be5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   1be5e:	2101      	movs	r1, #1
   1be60:	466b      	mov	r3, sp
   1be62:	1dd8      	adds	r0, r3, #7
   1be64:	4b10      	ldr	r3, [pc, #64]	; (1bea8 <spi_cmd_rsp+0xb0>)
   1be66:	4798      	blx	r3
			result = N_FAIL;
   1be68:	2500      	movs	r5, #0
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   1be6a:	2800      	cmp	r0, #0
   1be6c:	d0d0      	beq.n	1be10 <spi_cmd_rsp+0x18>
   1be6e:	e7f1      	b.n	1be54 <spi_cmd_rsp+0x5c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   1be70:	225c      	movs	r2, #92	; 0x5c
   1be72:	32ff      	adds	r2, #255	; 0xff
   1be74:	490d      	ldr	r1, [pc, #52]	; (1beac <spi_cmd_rsp+0xb4>)
   1be76:	480e      	ldr	r0, [pc, #56]	; (1beb0 <spi_cmd_rsp+0xb8>)
   1be78:	4c0e      	ldr	r4, [pc, #56]	; (1beb4 <spi_cmd_rsp+0xbc>)
   1be7a:	47a0      	blx	r4
   1be7c:	480e      	ldr	r0, [pc, #56]	; (1beb8 <spi_cmd_rsp+0xc0>)
   1be7e:	47a0      	blx	r4
   1be80:	480e      	ldr	r0, [pc, #56]	; (1bebc <spi_cmd_rsp+0xc4>)
   1be82:	47a0      	blx	r4
			result = N_FAIL;
   1be84:	2500      	movs	r5, #0
			goto _fail_;
   1be86:	e7e5      	b.n	1be54 <spi_cmd_rsp+0x5c>
   1be88:	240b      	movs	r4, #11
   1be8a:	e7d3      	b.n	1be34 <spi_cmd_rsp+0x3c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   1be8c:	226a      	movs	r2, #106	; 0x6a
   1be8e:	32ff      	adds	r2, #255	; 0xff
   1be90:	4906      	ldr	r1, [pc, #24]	; (1beac <spi_cmd_rsp+0xb4>)
   1be92:	4807      	ldr	r0, [pc, #28]	; (1beb0 <spi_cmd_rsp+0xb8>)
   1be94:	4c07      	ldr	r4, [pc, #28]	; (1beb4 <spi_cmd_rsp+0xbc>)
   1be96:	47a0      	blx	r4
   1be98:	4807      	ldr	r0, [pc, #28]	; (1beb8 <spi_cmd_rsp+0xc0>)
   1be9a:	47a0      	blx	r4
   1be9c:	4807      	ldr	r0, [pc, #28]	; (1bebc <spi_cmd_rsp+0xc4>)
   1be9e:	47a0      	blx	r4
			goto _fail_;
   1bea0:	e7d8      	b.n	1be54 <spi_cmd_rsp+0x5c>
	sint8 result = N_OK;
   1bea2:	2501      	movs	r5, #1
   1bea4:	e7d6      	b.n	1be54 <spi_cmd_rsp+0x5c>
   1bea6:	46c0      	nop			; (mov r8, r8)
   1bea8:	0001bdd9 	.word	0x0001bdd9
   1beac:	0002a830 	.word	0x0002a830
   1beb0:	0002a0fc 	.word	0x0002a0fc
   1beb4:	0001913d 	.word	0x0001913d
   1beb8:	0002ae18 	.word	0x0002ae18
   1bebc:	0002a124 	.word	0x0002a124

0001bec0 <spi_cmd_complete>:
#ifndef USE_OLD_SPI_SW
static int spi_cmd_complete(uint8_t cmd, uint32_t adr, uint8_t *b, uint32_t sz, uint8_t clockless)
{
   1bec0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bec2:	46de      	mov	lr, fp
   1bec4:	4657      	mov	r7, sl
   1bec6:	464e      	mov	r6, r9
   1bec8:	4645      	mov	r5, r8
   1beca:	b5e0      	push	{r5, r6, r7, lr}
   1becc:	b097      	sub	sp, #92	; 0x5c
   1bece:	0005      	movs	r5, r0
   1bed0:	4690      	mov	r8, r2
   1bed2:	9300      	str	r3, [sp, #0]
   1bed4:	ab20      	add	r3, sp, #128	; 0x80
   1bed6:	7818      	ldrb	r0, [r3, #0]
	uint32_t len2;
	uint8_t rsp;
	int len = 0;
	int result = N_OK;

	wb[0] = cmd;
   1bed8:	ab0e      	add	r3, sp, #56	; 0x38
   1beda:	701d      	strb	r5, [r3, #0]
	switch (cmd) {
   1bedc:	002b      	movs	r3, r5
   1bede:	333f      	adds	r3, #63	; 0x3f
   1bee0:	b2da      	uxtb	r2, r3
   1bee2:	2a0e      	cmp	r2, #14
   1bee4:	d900      	bls.n	1bee8 <spi_cmd_complete+0x28>
   1bee6:	e263      	b.n	1c3b0 <spi_cmd_complete+0x4f0>
   1bee8:	0093      	lsls	r3, r2, #2
   1beea:	4acc      	ldr	r2, [pc, #816]	; (1c21c <spi_cmd_complete+0x35c>)
   1beec:	58d3      	ldr	r3, [r2, r3]
   1beee:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		wb[1] = (uint8_t)(adr >> 16);
   1bef0:	ab0e      	add	r3, sp, #56	; 0x38
   1bef2:	0c0a      	lsrs	r2, r1, #16
   1bef4:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   1bef6:	0a0a      	lsrs	r2, r1, #8
   1bef8:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   1befa:	70d9      	strb	r1, [r3, #3]
		len = 5;
   1befc:	2305      	movs	r3, #5
   1befe:	4699      	mov	r9, r3

	if (result != N_OK) {
		return result;
	}

	if (!gu8Crc_off) {
   1bf00:	4bc7      	ldr	r3, [pc, #796]	; (1c220 <spi_cmd_complete+0x360>)
   1bf02:	781f      	ldrb	r7, [r3, #0]
   1bf04:	2f00      	cmp	r7, #0
   1bf06:	d100      	bne.n	1bf0a <spi_cmd_complete+0x4a>
   1bf08:	e254      	b.n	1c3b4 <spi_cmd_complete+0x4f4>
		wb[len-1] = (crc7(0x7f, (const uint8_t *)&wb[0], len-1)) << 1;
	} else {
		len -=1;
   1bf0a:	2301      	movs	r3, #1
   1bf0c:	425b      	negs	r3, r3
   1bf0e:	469c      	mov	ip, r3
   1bf10:	44e1      	add	r9, ip
   1bf12:	e263      	b.n	1c3dc <spi_cmd_complete+0x51c>
		wb[1] = (uint8_t)(adr >> 8);
   1bf14:	0a0b      	lsrs	r3, r1, #8
   1bf16:	b2db      	uxtb	r3, r3
		if(clockless == 1)  wb[1] |= (1 << 7);
   1bf18:	2801      	cmp	r0, #1
   1bf1a:	d008      	beq.n	1bf2e <spi_cmd_complete+0x6e>
		wb[1] = (uint8_t)(adr >> 8);
   1bf1c:	aa0e      	add	r2, sp, #56	; 0x38
   1bf1e:	7053      	strb	r3, [r2, #1]
		wb[2] = (uint8_t)adr;
   1bf20:	ab0e      	add	r3, sp, #56	; 0x38
   1bf22:	7099      	strb	r1, [r3, #2]
		wb[3] = 0x00;
   1bf24:	2200      	movs	r2, #0
   1bf26:	70da      	strb	r2, [r3, #3]
		len = 5;
   1bf28:	2305      	movs	r3, #5
   1bf2a:	4699      	mov	r9, r3
		break;
   1bf2c:	e7e8      	b.n	1bf00 <spi_cmd_complete+0x40>
		if(clockless == 1)  wb[1] |= (1 << 7);
   1bf2e:	2280      	movs	r2, #128	; 0x80
   1bf30:	4252      	negs	r2, r2
   1bf32:	4313      	orrs	r3, r2
   1bf34:	aa0e      	add	r2, sp, #56	; 0x38
   1bf36:	7053      	strb	r3, [r2, #1]
   1bf38:	e7f2      	b.n	1bf20 <spi_cmd_complete+0x60>
		wb[1] = 0x00;
   1bf3a:	ab0e      	add	r3, sp, #56	; 0x38
   1bf3c:	2200      	movs	r2, #0
   1bf3e:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   1bf40:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   1bf42:	70da      	strb	r2, [r3, #3]
		len = 5;
   1bf44:	2305      	movs	r3, #5
   1bf46:	4699      	mov	r9, r3
		break;
   1bf48:	e7da      	b.n	1bf00 <spi_cmd_complete+0x40>
		wb[1] = 0x00;
   1bf4a:	ab0e      	add	r3, sp, #56	; 0x38
   1bf4c:	2200      	movs	r2, #0
   1bf4e:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   1bf50:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   1bf52:	70da      	strb	r2, [r3, #3]
		len = 5;
   1bf54:	2305      	movs	r3, #5
   1bf56:	4699      	mov	r9, r3
		break;
   1bf58:	e7d2      	b.n	1bf00 <spi_cmd_complete+0x40>
		wb[1] = 0xff;
   1bf5a:	ab0e      	add	r3, sp, #56	; 0x38
   1bf5c:	22ff      	movs	r2, #255	; 0xff
   1bf5e:	705a      	strb	r2, [r3, #1]
		wb[2] = 0xff;
   1bf60:	709a      	strb	r2, [r3, #2]
		wb[3] = 0xff;
   1bf62:	70da      	strb	r2, [r3, #3]
		len = 5;
   1bf64:	2305      	movs	r3, #5
   1bf66:	4699      	mov	r9, r3
		break;
   1bf68:	e7ca      	b.n	1bf00 <spi_cmd_complete+0x40>
		wb[1] = (uint8_t)(adr >> 16);
   1bf6a:	ab0e      	add	r3, sp, #56	; 0x38
   1bf6c:	0c0a      	lsrs	r2, r1, #16
   1bf6e:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   1bf70:	0a0a      	lsrs	r2, r1, #8
   1bf72:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   1bf74:	70d9      	strb	r1, [r3, #3]
		wb[4] = (uint8_t)(sz >> 8);
   1bf76:	9900      	ldr	r1, [sp, #0]
   1bf78:	0a0a      	lsrs	r2, r1, #8
   1bf7a:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz);
   1bf7c:	7159      	strb	r1, [r3, #5]
		len = 7;
   1bf7e:	2307      	movs	r3, #7
   1bf80:	4699      	mov	r9, r3
		break;
   1bf82:	e7bd      	b.n	1bf00 <spi_cmd_complete+0x40>
		wb[1] = (uint8_t)(adr >> 16);
   1bf84:	ab0e      	add	r3, sp, #56	; 0x38
   1bf86:	0c0a      	lsrs	r2, r1, #16
   1bf88:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   1bf8a:	0a0a      	lsrs	r2, r1, #8
   1bf8c:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   1bf8e:	70d9      	strb	r1, [r3, #3]
		wb[4] = (uint8_t)(sz >> 16);
   1bf90:	9900      	ldr	r1, [sp, #0]
   1bf92:	0c0a      	lsrs	r2, r1, #16
   1bf94:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz >> 8);
   1bf96:	0a0a      	lsrs	r2, r1, #8
   1bf98:	715a      	strb	r2, [r3, #5]
		wb[6] = (uint8_t)(sz);
   1bf9a:	7199      	strb	r1, [r3, #6]
		len = 8;
   1bf9c:	2308      	movs	r3, #8
   1bf9e:	4699      	mov	r9, r3
		break;
   1bfa0:	e7ae      	b.n	1bf00 <spi_cmd_complete+0x40>
		wb[1] = (uint8_t)(adr >> 8);
   1bfa2:	0a0b      	lsrs	r3, r1, #8
   1bfa4:	b2db      	uxtb	r3, r3
		if(clockless == 1)  wb[1] |= (1 << 7);
   1bfa6:	2801      	cmp	r0, #1
   1bfa8:	d012      	beq.n	1bfd0 <spi_cmd_complete+0x110>
		wb[1] = (uint8_t)(adr >> 8);
   1bfaa:	aa0e      	add	r2, sp, #56	; 0x38
   1bfac:	7053      	strb	r3, [r2, #1]
		wb[2] = (uint8_t)(adr);
   1bfae:	ab0e      	add	r3, sp, #56	; 0x38
   1bfb0:	7099      	strb	r1, [r3, #2]
		wb[3] = b[3];
   1bfb2:	4642      	mov	r2, r8
   1bfb4:	78d2      	ldrb	r2, [r2, #3]
   1bfb6:	70da      	strb	r2, [r3, #3]
		wb[4] = b[2];
   1bfb8:	4642      	mov	r2, r8
   1bfba:	7892      	ldrb	r2, [r2, #2]
   1bfbc:	711a      	strb	r2, [r3, #4]
		wb[5] = b[1];
   1bfbe:	4642      	mov	r2, r8
   1bfc0:	7852      	ldrb	r2, [r2, #1]
   1bfc2:	715a      	strb	r2, [r3, #5]
		wb[6] = b[0];
   1bfc4:	4642      	mov	r2, r8
   1bfc6:	7812      	ldrb	r2, [r2, #0]
   1bfc8:	719a      	strb	r2, [r3, #6]
		len = 8;
   1bfca:	2308      	movs	r3, #8
   1bfcc:	4699      	mov	r9, r3
		break;
   1bfce:	e797      	b.n	1bf00 <spi_cmd_complete+0x40>
		if(clockless == 1)  wb[1] |= (1 << 7);
   1bfd0:	2280      	movs	r2, #128	; 0x80
   1bfd2:	4252      	negs	r2, r2
   1bfd4:	4313      	orrs	r3, r2
   1bfd6:	aa0e      	add	r2, sp, #56	; 0x38
   1bfd8:	7053      	strb	r3, [r2, #1]
   1bfda:	e7e8      	b.n	1bfae <spi_cmd_complete+0xee>
		wb[1] = (uint8_t)(adr >> 16);
   1bfdc:	ab0e      	add	r3, sp, #56	; 0x38
   1bfde:	0c0a      	lsrs	r2, r1, #16
   1bfe0:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   1bfe2:	0a0a      	lsrs	r2, r1, #8
   1bfe4:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)(adr);
   1bfe6:	70d9      	strb	r1, [r3, #3]
		wb[4] = b[3];
   1bfe8:	4642      	mov	r2, r8
   1bfea:	78d2      	ldrb	r2, [r2, #3]
   1bfec:	711a      	strb	r2, [r3, #4]
		wb[5] = b[2];
   1bfee:	4642      	mov	r2, r8
   1bff0:	7892      	ldrb	r2, [r2, #2]
   1bff2:	715a      	strb	r2, [r3, #5]
		wb[6] = b[1];
   1bff4:	4642      	mov	r2, r8
   1bff6:	7852      	ldrb	r2, [r2, #1]
   1bff8:	719a      	strb	r2, [r3, #6]
		wb[7] = b[0];
   1bffa:	4642      	mov	r2, r8
   1bffc:	7812      	ldrb	r2, [r2, #0]
   1bffe:	71da      	strb	r2, [r3, #7]
		len = 9;
   1c000:	2309      	movs	r3, #9
   1c002:	4699      	mov	r9, r3
		break;
   1c004:	e77c      	b.n	1bf00 <spi_cmd_complete+0x40>
#define NUM_DUMMY_BYTES (3)

	if ((cmd == CMD_RESET) ||
		(cmd == CMD_TERMINATE) ||
		(cmd == CMD_REPEAT)) {
			len2 = len + (NUM_SKIP_BYTES + NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   1c006:	464b      	mov	r3, r9
   1c008:	1d9e      	adds	r6, r3, #6
	} else {
		len2 = len + (NUM_RSP_BYTES + NUM_DUMMY_BYTES);
	}
#undef NUM_DUMMY_BYTES

	if(len2 > (sizeof(wb)/sizeof(wb[0]))) {
   1c00a:	2e20      	cmp	r6, #32
   1c00c:	d844      	bhi.n	1c098 <spi_cmd_complete+0x1d8>
			len2, (sizeof(wb)/sizeof(wb[0])));
		result = N_FAIL;
		return result;
	}
	/* zero spi write buffers. */
	for(wix = len; wix< len2; wix++) {
   1c00e:	464b      	mov	r3, r9
   1c010:	466a      	mov	r2, sp
   1c012:	71d3      	strb	r3, [r2, #7]
   1c014:	79d7      	ldrb	r7, [r2, #7]
   1c016:	42b7      	cmp	r7, r6
   1c018:	d207      	bcs.n	1c02a <spi_cmd_complete+0x16a>
   1c01a:	003b      	movs	r3, r7
		wb[wix] = 0;
   1c01c:	a90e      	add	r1, sp, #56	; 0x38
   1c01e:	2200      	movs	r2, #0
   1c020:	54ca      	strb	r2, [r1, r3]
	for(wix = len; wix< len2; wix++) {
   1c022:	3301      	adds	r3, #1
   1c024:	b2db      	uxtb	r3, r3
   1c026:	429e      	cmp	r6, r3
   1c028:	d8fa      	bhi.n	1c020 <spi_cmd_complete+0x160>
	spi.pu8InBuf = bin;
   1c02a:	ab0e      	add	r3, sp, #56	; 0x38
   1c02c:	9302      	str	r3, [sp, #8]
	spi.pu8OutBuf = bout;
   1c02e:	ab06      	add	r3, sp, #24
   1c030:	9303      	str	r3, [sp, #12]
	spi.u16Sz = sz;
   1c032:	ab02      	add	r3, sp, #8
   1c034:	811e      	strh	r6, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);	
   1c036:	0019      	movs	r1, r3
   1c038:	2003      	movs	r0, #3
   1c03a:	4b7a      	ldr	r3, [pc, #488]	; (1c224 <spi_cmd_complete+0x364>)
   1c03c:	4798      	blx	r3
	}
	rix = len;

	if (nmi_spi_rw(wb, rb, len2) != M2M_SUCCESS) {
   1c03e:	2800      	cmp	r0, #0
   1c040:	d138      	bne.n	1c0b4 <spi_cmd_complete+0x1f4>
#endif

	/**
	Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   1c042:	2dcf      	cmp	r5, #207	; 0xcf
   1c044:	d004      	beq.n	1c050 <spi_cmd_complete+0x190>
   1c046:	002b      	movs	r3, r5
   1c048:	333b      	adds	r3, #59	; 0x3b
   1c04a:	b2db      	uxtb	r3, r3
   1c04c:	2b01      	cmp	r3, #1
   1c04e:	d801      	bhi.n	1c054 <spi_cmd_complete+0x194>
		(cmd == CMD_TERMINATE) ||
		(cmd == CMD_REPEAT)) {
			rix++; /* skip 1 byte */
   1c050:	3701      	adds	r7, #1
   1c052:	b2ff      	uxtb	r7, r7
	}

	rsp = rb[rix++];
   1c054:	ab06      	add	r3, sp, #24
   1c056:	5ddb      	ldrb	r3, [r3, r7]
   1c058:	220f      	movs	r2, #15
   1c05a:	a902      	add	r1, sp, #8
   1c05c:	468c      	mov	ip, r1
   1c05e:	4462      	add	r2, ip
   1c060:	7013      	strb	r3, [r2, #0]


	if (rsp != cmd) {
   1c062:	429d      	cmp	r5, r3
   1c064:	d132      	bne.n	1c0cc <spi_cmd_complete+0x20c>
	}

	/**
	State response
	**/
	rsp = rb[rix++];
   1c066:	1cbc      	adds	r4, r7, #2
   1c068:	b2e4      	uxtb	r4, r4
	rsp = rb[rix++];
   1c06a:	1c7b      	adds	r3, r7, #1
	rsp = rb[rix++];
   1c06c:	b2db      	uxtb	r3, r3
   1c06e:	aa06      	add	r2, sp, #24
   1c070:	5cd0      	ldrb	r0, [r2, r3]
   1c072:	230f      	movs	r3, #15
   1c074:	aa02      	add	r2, sp, #8
   1c076:	4694      	mov	ip, r2
   1c078:	4463      	add	r3, ip
   1c07a:	7018      	strb	r0, [r3, #0]
	if (rsp != 0x00) {
   1c07c:	2800      	cmp	r0, #0
   1c07e:	d13c      	bne.n	1c0fa <spi_cmd_complete+0x23a>
		M2M_ERR("[nmi spi]: Failed cmd state response state (%02x)\n", rsp);
		result = N_FAIL;
		return result;
	}

	if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)
   1c080:	002b      	movs	r3, r5
   1c082:	333c      	adds	r3, #60	; 0x3c
   1c084:	22fb      	movs	r2, #251	; 0xfb
   1c086:	4213      	tst	r3, r2
   1c088:	d047      	beq.n	1c11a <spi_cmd_complete+0x25a>
		|| (cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   1c08a:	2308      	movs	r3, #8
   1c08c:	002a      	movs	r2, r5
   1c08e:	439a      	bics	r2, r3
   1c090:	2ac2      	cmp	r2, #194	; 0xc2
   1c092:	d042      	beq.n	1c11a <spi_cmd_complete+0x25a>
   1c094:	2001      	movs	r0, #1
   1c096:	e029      	b.n	1c0ec <spi_cmd_complete+0x22c>
		M2M_ERR("[nmi spi]: spi buffer size too small (%d) (%d)\n",
   1c098:	22f7      	movs	r2, #247	; 0xf7
   1c09a:	0052      	lsls	r2, r2, #1
   1c09c:	4962      	ldr	r1, [pc, #392]	; (1c228 <spi_cmd_complete+0x368>)
   1c09e:	4863      	ldr	r0, [pc, #396]	; (1c22c <spi_cmd_complete+0x36c>)
   1c0a0:	4c63      	ldr	r4, [pc, #396]	; (1c230 <spi_cmd_complete+0x370>)
   1c0a2:	47a0      	blx	r4
   1c0a4:	2220      	movs	r2, #32
   1c0a6:	0031      	movs	r1, r6
   1c0a8:	4862      	ldr	r0, [pc, #392]	; (1c234 <spi_cmd_complete+0x374>)
   1c0aa:	47a0      	blx	r4
   1c0ac:	4862      	ldr	r0, [pc, #392]	; (1c238 <spi_cmd_complete+0x378>)
   1c0ae:	47a0      	blx	r4
		return result;
   1c0b0:	2000      	movs	r0, #0
   1c0b2:	e01b      	b.n	1c0ec <spi_cmd_complete+0x22c>
		M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   1c0b4:	22fa      	movs	r2, #250	; 0xfa
   1c0b6:	32ff      	adds	r2, #255	; 0xff
   1c0b8:	495b      	ldr	r1, [pc, #364]	; (1c228 <spi_cmd_complete+0x368>)
   1c0ba:	485c      	ldr	r0, [pc, #368]	; (1c22c <spi_cmd_complete+0x36c>)
   1c0bc:	4c5c      	ldr	r4, [pc, #368]	; (1c230 <spi_cmd_complete+0x370>)
   1c0be:	47a0      	blx	r4
   1c0c0:	485e      	ldr	r0, [pc, #376]	; (1c23c <spi_cmd_complete+0x37c>)
   1c0c2:	47a0      	blx	r4
   1c0c4:	485c      	ldr	r0, [pc, #368]	; (1c238 <spi_cmd_complete+0x378>)
   1c0c6:	47a0      	blx	r4
		return result;
   1c0c8:	2000      	movs	r0, #0
   1c0ca:	e00f      	b.n	1c0ec <spi_cmd_complete+0x22c>
		M2M_ERR("[nmi spi]: Failed cmd response, cmd (%02x), resp (%02x)\n", cmd, rsp);
   1c0cc:	4a5c      	ldr	r2, [pc, #368]	; (1c240 <spi_cmd_complete+0x380>)
   1c0ce:	4956      	ldr	r1, [pc, #344]	; (1c228 <spi_cmd_complete+0x368>)
   1c0d0:	4856      	ldr	r0, [pc, #344]	; (1c22c <spi_cmd_complete+0x36c>)
   1c0d2:	4c57      	ldr	r4, [pc, #348]	; (1c230 <spi_cmd_complete+0x370>)
   1c0d4:	47a0      	blx	r4
   1c0d6:	230f      	movs	r3, #15
   1c0d8:	aa02      	add	r2, sp, #8
   1c0da:	4694      	mov	ip, r2
   1c0dc:	4463      	add	r3, ip
   1c0de:	781a      	ldrb	r2, [r3, #0]
   1c0e0:	0029      	movs	r1, r5
   1c0e2:	4858      	ldr	r0, [pc, #352]	; (1c244 <spi_cmd_complete+0x384>)
   1c0e4:	47a0      	blx	r4
   1c0e6:	4854      	ldr	r0, [pc, #336]	; (1c238 <spi_cmd_complete+0x378>)
   1c0e8:	47a0      	blx	r4
		return result;
   1c0ea:	2000      	movs	r0, #0
				}
			}
	}
_error_:
	return result;
}
   1c0ec:	b017      	add	sp, #92	; 0x5c
   1c0ee:	bc3c      	pop	{r2, r3, r4, r5}
   1c0f0:	4690      	mov	r8, r2
   1c0f2:	4699      	mov	r9, r3
   1c0f4:	46a2      	mov	sl, r4
   1c0f6:	46ab      	mov	fp, r5
   1c0f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		M2M_ERR("[nmi spi]: Failed cmd state response state (%02x)\n", rsp);
   1c0fa:	4a53      	ldr	r2, [pc, #332]	; (1c248 <spi_cmd_complete+0x388>)
   1c0fc:	494a      	ldr	r1, [pc, #296]	; (1c228 <spi_cmd_complete+0x368>)
   1c0fe:	484b      	ldr	r0, [pc, #300]	; (1c22c <spi_cmd_complete+0x36c>)
   1c100:	4c4b      	ldr	r4, [pc, #300]	; (1c230 <spi_cmd_complete+0x370>)
   1c102:	47a0      	blx	r4
   1c104:	230f      	movs	r3, #15
   1c106:	aa02      	add	r2, sp, #8
   1c108:	4694      	mov	ip, r2
   1c10a:	4463      	add	r3, ip
   1c10c:	7819      	ldrb	r1, [r3, #0]
   1c10e:	484f      	ldr	r0, [pc, #316]	; (1c24c <spi_cmd_complete+0x38c>)
   1c110:	47a0      	blx	r4
   1c112:	4849      	ldr	r0, [pc, #292]	; (1c238 <spi_cmd_complete+0x378>)
   1c114:	47a0      	blx	r4
		return result;
   1c116:	2000      	movs	r0, #0
   1c118:	e7e8      	b.n	1c0ec <spi_cmd_complete+0x22c>
   1c11a:	370d      	adds	r7, #13
   1c11c:	b2fb      	uxtb	r3, r7
   1c11e:	469a      	mov	sl, r3
	for(wix = len; wix< len2; wix++) {
   1c120:	2200      	movs	r2, #0
   1c122:	270a      	movs	r7, #10
					rsp = rb[rix++];
   1c124:	a906      	add	r1, sp, #24
   1c126:	e000      	b.n	1c12a <spi_cmd_complete+0x26a>
   1c128:	001c      	movs	r4, r3
				if(rix < len2) { 
   1c12a:	42a6      	cmp	r6, r4
   1c12c:	d956      	bls.n	1c1dc <spi_cmd_complete+0x31c>
					rsp = rb[rix++];
   1c12e:	1c63      	adds	r3, r4, #1
   1c130:	b2db      	uxtb	r3, r3
   1c132:	5d08      	ldrb	r0, [r1, r4]
				if (((rsp >> 4) & 0xf) == 0xf)
   1c134:	0902      	lsrs	r2, r0, #4
   1c136:	2a0f      	cmp	r2, #15
   1c138:	d06a      	beq.n	1c210 <spi_cmd_complete+0x350>
			} while (retry--);
   1c13a:	3f01      	subs	r7, #1
   1c13c:	2201      	movs	r2, #1
   1c13e:	4553      	cmp	r3, sl
   1c140:	d1f2      	bne.n	1c128 <spi_cmd_complete+0x268>
   1c142:	320e      	adds	r2, #14
   1c144:	a902      	add	r1, sp, #8
   1c146:	468c      	mov	ip, r1
   1c148:	4462      	add	r2, ip
   1c14a:	7010      	strb	r0, [r2, #0]
			if (retry <= 0) {
   1c14c:	2f00      	cmp	r7, #0
   1c14e:	dd47      	ble.n	1c1e0 <spi_cmd_complete+0x320>
			if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   1c150:	2dc4      	cmp	r5, #196	; 0xc4
   1c152:	d100      	bne.n	1c156 <spi_cmd_complete+0x296>
   1c154:	e080      	b.n	1c258 <spi_cmd_complete+0x398>
   1c156:	2dca      	cmp	r5, #202	; 0xca
   1c158:	d100      	bne.n	1c15c <spi_cmd_complete+0x29c>
   1c15a:	e07d      	b.n	1c258 <spi_cmd_complete+0x398>
			} else if((cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   1c15c:	2dc2      	cmp	r5, #194	; 0xc2
   1c15e:	d002      	beq.n	1c166 <spi_cmd_complete+0x2a6>
   1c160:	2001      	movs	r0, #1
   1c162:	2dc8      	cmp	r5, #200	; 0xc8
   1c164:	d1c2      	bne.n	1c0ec <spi_cmd_complete+0x22c>
				for(ix=0; (rix < len2) && (ix < sz);) {
   1c166:	429e      	cmp	r6, r3
   1c168:	d800      	bhi.n	1c16c <spi_cmd_complete+0x2ac>
   1c16a:	e0ac      	b.n	1c2c6 <spi_cmd_complete+0x406>
   1c16c:	9a00      	ldr	r2, [sp, #0]
   1c16e:	2a00      	cmp	r2, #0
   1c170:	d100      	bne.n	1c174 <spi_cmd_complete+0x2b4>
   1c172:	e11b      	b.n	1c3ac <spi_cmd_complete+0x4ec>
   1c174:	4442      	add	r2, r8
   1c176:	0014      	movs	r4, r2
   1c178:	4640      	mov	r0, r8
   1c17a:	2701      	movs	r7, #1
   1c17c:	1a3f      	subs	r7, r7, r0
					b[ix++] = rb[rix++];				
   1c17e:	a906      	add	r1, sp, #24
   1c180:	183d      	adds	r5, r7, r0
   1c182:	1c5a      	adds	r2, r3, #1
   1c184:	b2d2      	uxtb	r2, r2
   1c186:	5ccb      	ldrb	r3, [r1, r3]
   1c188:	7003      	strb	r3, [r0, #0]
				for(ix=0; (rix < len2) && (ix < sz);) {
   1c18a:	4296      	cmp	r6, r2
   1c18c:	d903      	bls.n	1c196 <spi_cmd_complete+0x2d6>
   1c18e:	3001      	adds	r0, #1
					b[ix++] = rb[rix++];				
   1c190:	0013      	movs	r3, r2
				for(ix=0; (rix < len2) && (ix < sz);) {
   1c192:	42a0      	cmp	r0, r4
   1c194:	d1f4      	bne.n	1c180 <spi_cmd_complete+0x2c0>
				sz -= ix;
   1c196:	002b      	movs	r3, r5
   1c198:	9a00      	ldr	r2, [sp, #0]
   1c19a:	1b54      	subs	r4, r2, r5
   1c19c:	2001      	movs	r0, #1
				if(sz > 0) {
   1c19e:	2c00      	cmp	r4, #0
   1c1a0:	d0a4      	beq.n	1c0ec <spi_cmd_complete+0x22c>
					if (sz <= (DATA_PKT_SZ-ix)) {
   1c1a2:	2680      	movs	r6, #128	; 0x80
   1c1a4:	01b6      	lsls	r6, r6, #6
   1c1a6:	1b76      	subs	r6, r6, r5
   1c1a8:	42b4      	cmp	r4, r6
   1c1aa:	d800      	bhi.n	1c1ae <spi_cmd_complete+0x2ee>
						nbytes = sz;
   1c1ac:	0026      	movs	r6, r4
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   1c1ae:	b2b1      	uxth	r1, r6
   1c1b0:	4443      	add	r3, r8
   1c1b2:	0018      	movs	r0, r3
   1c1b4:	4b26      	ldr	r3, [pc, #152]	; (1c250 <spi_cmd_complete+0x390>)
   1c1b6:	4798      	blx	r3
   1c1b8:	2800      	cmp	r0, #0
   1c1ba:	d000      	beq.n	1c1be <spi_cmd_complete+0x2fe>
   1c1bc:	e085      	b.n	1c2ca <spi_cmd_complete+0x40a>
					if (!gu8Crc_off) {
   1c1be:	4b18      	ldr	r3, [pc, #96]	; (1c220 <spi_cmd_complete+0x360>)
   1c1c0:	781b      	ldrb	r3, [r3, #0]
   1c1c2:	2b00      	cmp	r3, #0
   1c1c4:	d100      	bne.n	1c1c8 <spi_cmd_complete+0x308>
   1c1c6:	e08b      	b.n	1c2e0 <spi_cmd_complete+0x420>
					ix += nbytes;
   1c1c8:	46aa      	mov	sl, r5
   1c1ca:	44b2      	add	sl, r6
					sz -= nbytes;
   1c1cc:	1ba6      	subs	r6, r4, r6
				while(sz > 0) {
   1c1ce:	2001      	movs	r0, #1
   1c1d0:	2e00      	cmp	r6, #0
   1c1d2:	d100      	bne.n	1c1d6 <spi_cmd_complete+0x316>
   1c1d4:	e78a      	b.n	1c0ec <spi_cmd_complete+0x22c>
						if (nmi_spi_read(&rsp, 1) != M2M_SUCCESS) {
   1c1d6:	4f1e      	ldr	r7, [pc, #120]	; (1c250 <spi_cmd_complete+0x390>)
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   1c1d8:	46bb      	mov	fp, r7
   1c1da:	e0b5      	b.n	1c348 <spi_cmd_complete+0x488>
   1c1dc:	2a00      	cmp	r2, #0
   1c1de:	d111      	bne.n	1c204 <spi_cmd_complete+0x344>
				M2M_ERR("[nmi spi]: Error, data read response (%02x)\n", rsp);
   1c1e0:	2295      	movs	r2, #149	; 0x95
   1c1e2:	0092      	lsls	r2, r2, #2
   1c1e4:	4910      	ldr	r1, [pc, #64]	; (1c228 <spi_cmd_complete+0x368>)
   1c1e6:	4811      	ldr	r0, [pc, #68]	; (1c22c <spi_cmd_complete+0x36c>)
   1c1e8:	4c11      	ldr	r4, [pc, #68]	; (1c230 <spi_cmd_complete+0x370>)
   1c1ea:	47a0      	blx	r4
   1c1ec:	230f      	movs	r3, #15
   1c1ee:	aa02      	add	r2, sp, #8
   1c1f0:	4694      	mov	ip, r2
   1c1f2:	4463      	add	r3, ip
   1c1f4:	7819      	ldrb	r1, [r3, #0]
   1c1f6:	4817      	ldr	r0, [pc, #92]	; (1c254 <spi_cmd_complete+0x394>)
   1c1f8:	47a0      	blx	r4
   1c1fa:	480f      	ldr	r0, [pc, #60]	; (1c238 <spi_cmd_complete+0x378>)
   1c1fc:	47a0      	blx	r4
				return result;
   1c1fe:	2001      	movs	r0, #1
   1c200:	4240      	negs	r0, r0
   1c202:	e773      	b.n	1c0ec <spi_cmd_complete+0x22c>
   1c204:	230f      	movs	r3, #15
   1c206:	aa02      	add	r2, sp, #8
   1c208:	4694      	mov	ip, r2
   1c20a:	4463      	add	r3, ip
   1c20c:	7018      	strb	r0, [r3, #0]
   1c20e:	e7e7      	b.n	1c1e0 <spi_cmd_complete+0x320>
   1c210:	a902      	add	r1, sp, #8
   1c212:	468c      	mov	ip, r1
   1c214:	4462      	add	r2, ip
   1c216:	7010      	strb	r0, [r2, #0]
   1c218:	e798      	b.n	1c14c <spi_cmd_complete+0x28c>
   1c21a:	46c0      	nop			; (mov r8, r8)
   1c21c:	0002a7d8 	.word	0x0002a7d8
   1c220:	20003cb4 	.word	0x20003cb4
   1c224:	0001a399 	.word	0x0001a399
   1c228:	0002a83c 	.word	0x0002a83c
   1c22c:	0002a0fc 	.word	0x0002a0fc
   1c230:	0001913d 	.word	0x0001913d
   1c234:	0002ac48 	.word	0x0002ac48
   1c238:	0002a124 	.word	0x0002a124
   1c23c:	0002ac1c 	.word	0x0002ac1c
   1c240:	0000022f 	.word	0x0000022f
   1c244:	0002ac78 	.word	0x0002ac78
   1c248:	00000239 	.word	0x00000239
   1c24c:	0002acb4 	.word	0x0002acb4
   1c250:	0001bdd9 	.word	0x0001bdd9
   1c254:	0002ace8 	.word	0x0002ace8
				if((rix+3) < len2) { 
   1c258:	1cda      	adds	r2, r3, #3
   1c25a:	4296      	cmp	r6, r2
   1c25c:	d928      	bls.n	1c2b0 <spi_cmd_complete+0x3f0>
					b[0] = rb[rix++];
   1c25e:	aa06      	add	r2, sp, #24
   1c260:	5cd3      	ldrb	r3, [r2, r3]
   1c262:	4641      	mov	r1, r8
   1c264:	700b      	strb	r3, [r1, #0]
   1c266:	1ca3      	adds	r3, r4, #2
					b[1] = rb[rix++];
   1c268:	b2db      	uxtb	r3, r3
   1c26a:	5cd3      	ldrb	r3, [r2, r3]
   1c26c:	704b      	strb	r3, [r1, #1]
   1c26e:	1ce3      	adds	r3, r4, #3
					b[2] = rb[rix++];
   1c270:	b2db      	uxtb	r3, r3
   1c272:	5cd3      	ldrb	r3, [r2, r3]
   1c274:	708b      	strb	r3, [r1, #2]
   1c276:	1d23      	adds	r3, r4, #4
					b[3] = rb[rix++];
   1c278:	b2db      	uxtb	r3, r3
   1c27a:	5cd3      	ldrb	r3, [r2, r3]
   1c27c:	70cb      	strb	r3, [r1, #3]
				if (!gu8Crc_off) {						
   1c27e:	4b63      	ldr	r3, [pc, #396]	; (1c40c <spi_cmd_complete+0x54c>)
   1c280:	781b      	ldrb	r3, [r3, #0]
   1c282:	2001      	movs	r0, #1
   1c284:	2b00      	cmp	r3, #0
   1c286:	d000      	beq.n	1c28a <spi_cmd_complete+0x3ca>
   1c288:	e730      	b.n	1c0ec <spi_cmd_complete+0x22c>
					b[3] = rb[rix++];
   1c28a:	1d63      	adds	r3, r4, #5
					if((rix+1) < len2) { 
   1c28c:	b2db      	uxtb	r3, r3
   1c28e:	3301      	adds	r3, #1
   1c290:	2001      	movs	r0, #1
   1c292:	429e      	cmp	r6, r3
   1c294:	d900      	bls.n	1c298 <spi_cmd_complete+0x3d8>
   1c296:	e729      	b.n	1c0ec <spi_cmd_complete+0x22c>
						M2M_ERR("[nmi spi]: buffer overrun when reading crc.\n");
   1c298:	229c      	movs	r2, #156	; 0x9c
   1c29a:	0092      	lsls	r2, r2, #2
   1c29c:	495c      	ldr	r1, [pc, #368]	; (1c410 <spi_cmd_complete+0x550>)
   1c29e:	485d      	ldr	r0, [pc, #372]	; (1c414 <spi_cmd_complete+0x554>)
   1c2a0:	4c5d      	ldr	r4, [pc, #372]	; (1c418 <spi_cmd_complete+0x558>)
   1c2a2:	47a0      	blx	r4
   1c2a4:	485d      	ldr	r0, [pc, #372]	; (1c41c <spi_cmd_complete+0x55c>)
   1c2a6:	47a0      	blx	r4
   1c2a8:	485d      	ldr	r0, [pc, #372]	; (1c420 <spi_cmd_complete+0x560>)
   1c2aa:	47a0      	blx	r4
						return result;
   1c2ac:	2000      	movs	r0, #0
   1c2ae:	e71d      	b.n	1c0ec <spi_cmd_complete+0x22c>
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
   1c2b0:	4a5c      	ldr	r2, [pc, #368]	; (1c424 <spi_cmd_complete+0x564>)
   1c2b2:	4957      	ldr	r1, [pc, #348]	; (1c410 <spi_cmd_complete+0x550>)
   1c2b4:	4857      	ldr	r0, [pc, #348]	; (1c414 <spi_cmd_complete+0x554>)
   1c2b6:	4c58      	ldr	r4, [pc, #352]	; (1c418 <spi_cmd_complete+0x558>)
   1c2b8:	47a0      	blx	r4
   1c2ba:	485b      	ldr	r0, [pc, #364]	; (1c428 <spi_cmd_complete+0x568>)
   1c2bc:	47a0      	blx	r4
   1c2be:	4858      	ldr	r0, [pc, #352]	; (1c420 <spi_cmd_complete+0x560>)
   1c2c0:	47a0      	blx	r4
					return result;
   1c2c2:	2000      	movs	r0, #0
   1c2c4:	e712      	b.n	1c0ec <spi_cmd_complete+0x22c>
				for(ix=0; (rix < len2) && (ix < sz);) {
   1c2c6:	2500      	movs	r5, #0
   1c2c8:	e765      	b.n	1c196 <spi_cmd_complete+0x2d6>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   1c2ca:	4a58      	ldr	r2, [pc, #352]	; (1c42c <spi_cmd_complete+0x56c>)
   1c2cc:	4950      	ldr	r1, [pc, #320]	; (1c410 <spi_cmd_complete+0x550>)
   1c2ce:	4851      	ldr	r0, [pc, #324]	; (1c414 <spi_cmd_complete+0x554>)
   1c2d0:	4c51      	ldr	r4, [pc, #324]	; (1c418 <spi_cmd_complete+0x558>)
   1c2d2:	47a0      	blx	r4
   1c2d4:	4856      	ldr	r0, [pc, #344]	; (1c430 <spi_cmd_complete+0x570>)
   1c2d6:	47a0      	blx	r4
   1c2d8:	4851      	ldr	r0, [pc, #324]	; (1c420 <spi_cmd_complete+0x560>)
   1c2da:	47a0      	blx	r4
						goto _error_;
   1c2dc:	2000      	movs	r0, #0
   1c2de:	e705      	b.n	1c0ec <spi_cmd_complete+0x22c>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   1c2e0:	2102      	movs	r1, #2
   1c2e2:	a802      	add	r0, sp, #8
   1c2e4:	4b53      	ldr	r3, [pc, #332]	; (1c434 <spi_cmd_complete+0x574>)
   1c2e6:	4798      	blx	r3
   1c2e8:	2800      	cmp	r0, #0
   1c2ea:	d100      	bne.n	1c2ee <spi_cmd_complete+0x42e>
   1c2ec:	e76c      	b.n	1c1c8 <spi_cmd_complete+0x308>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   1c2ee:	22a6      	movs	r2, #166	; 0xa6
   1c2f0:	0092      	lsls	r2, r2, #2
   1c2f2:	4947      	ldr	r1, [pc, #284]	; (1c410 <spi_cmd_complete+0x550>)
   1c2f4:	4847      	ldr	r0, [pc, #284]	; (1c414 <spi_cmd_complete+0x554>)
   1c2f6:	4c48      	ldr	r4, [pc, #288]	; (1c418 <spi_cmd_complete+0x558>)
   1c2f8:	47a0      	blx	r4
   1c2fa:	484f      	ldr	r0, [pc, #316]	; (1c438 <spi_cmd_complete+0x578>)
   1c2fc:	47a0      	blx	r4
   1c2fe:	4848      	ldr	r0, [pc, #288]	; (1c420 <spi_cmd_complete+0x560>)
   1c300:	47a0      	blx	r4
							goto _error_;
   1c302:	e7eb      	b.n	1c2dc <spi_cmd_complete+0x41c>
   1c304:	9b00      	ldr	r3, [sp, #0]
   1c306:	4699      	mov	r9, r3
				for(ix=0; (rix < len2) && (ix < sz);) {
   1c308:	240b      	movs	r4, #11
						if (nmi_spi_read(&rsp, 1) != M2M_SUCCESS) {
   1c30a:	250f      	movs	r5, #15
   1c30c:	ab02      	add	r3, sp, #8
   1c30e:	469c      	mov	ip, r3
   1c310:	4465      	add	r5, ip
   1c312:	2101      	movs	r1, #1
   1c314:	0028      	movs	r0, r5
   1c316:	47b8      	blx	r7
   1c318:	2800      	cmp	r0, #0
   1c31a:	d11c      	bne.n	1c356 <spi_cmd_complete+0x496>
						if (((rsp >> 4) & 0xf) == 0xf)
   1c31c:	782b      	ldrb	r3, [r5, #0]
   1c31e:	091b      	lsrs	r3, r3, #4
   1c320:	2b0f      	cmp	r3, #15
   1c322:	d002      	beq.n	1c32a <spi_cmd_complete+0x46a>
   1c324:	3c01      	subs	r4, #1
					} while (retry--);
   1c326:	2c00      	cmp	r4, #0
   1c328:	d1f3      	bne.n	1c312 <spi_cmd_complete+0x452>
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   1c32a:	466b      	mov	r3, sp
   1c32c:	8819      	ldrh	r1, [r3, #0]
   1c32e:	4640      	mov	r0, r8
   1c330:	4450      	add	r0, sl
   1c332:	47d8      	blx	fp
   1c334:	2800      	cmp	r0, #0
   1c336:	d11a      	bne.n	1c36e <spi_cmd_complete+0x4ae>
					if (!gu8Crc_off) {
   1c338:	4b34      	ldr	r3, [pc, #208]	; (1c40c <spi_cmd_complete+0x54c>)
   1c33a:	781b      	ldrb	r3, [r3, #0]
   1c33c:	2b00      	cmp	r3, #0
   1c33e:	d022      	beq.n	1c386 <spi_cmd_complete+0x4c6>
					ix += nbytes;
   1c340:	44ca      	add	sl, r9
					sz -= nbytes;
   1c342:	9b00      	ldr	r3, [sp, #0]
   1c344:	1af6      	subs	r6, r6, r3
				while(sz > 0) {
   1c346:	d02f      	beq.n	1c3a8 <spi_cmd_complete+0x4e8>
   1c348:	9600      	str	r6, [sp, #0]
   1c34a:	2380      	movs	r3, #128	; 0x80
   1c34c:	019b      	lsls	r3, r3, #6
   1c34e:	429e      	cmp	r6, r3
   1c350:	d9d8      	bls.n	1c304 <spi_cmd_complete+0x444>
   1c352:	9300      	str	r3, [sp, #0]
   1c354:	e7d6      	b.n	1c304 <spi_cmd_complete+0x444>
							M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
   1c356:	22ae      	movs	r2, #174	; 0xae
   1c358:	0092      	lsls	r2, r2, #2
   1c35a:	492d      	ldr	r1, [pc, #180]	; (1c410 <spi_cmd_complete+0x550>)
   1c35c:	482d      	ldr	r0, [pc, #180]	; (1c414 <spi_cmd_complete+0x554>)
   1c35e:	4c2e      	ldr	r4, [pc, #184]	; (1c418 <spi_cmd_complete+0x558>)
   1c360:	47a0      	blx	r4
   1c362:	4836      	ldr	r0, [pc, #216]	; (1c43c <spi_cmd_complete+0x57c>)
   1c364:	47a0      	blx	r4
   1c366:	482e      	ldr	r0, [pc, #184]	; (1c420 <spi_cmd_complete+0x560>)
   1c368:	47a0      	blx	r4
   1c36a:	2000      	movs	r0, #0
   1c36c:	e6be      	b.n	1c0ec <spi_cmd_complete+0x22c>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   1c36e:	22b2      	movs	r2, #178	; 0xb2
   1c370:	0092      	lsls	r2, r2, #2
   1c372:	4927      	ldr	r1, [pc, #156]	; (1c410 <spi_cmd_complete+0x550>)
   1c374:	4827      	ldr	r0, [pc, #156]	; (1c414 <spi_cmd_complete+0x554>)
   1c376:	4c28      	ldr	r4, [pc, #160]	; (1c418 <spi_cmd_complete+0x558>)
   1c378:	47a0      	blx	r4
   1c37a:	482d      	ldr	r0, [pc, #180]	; (1c430 <spi_cmd_complete+0x570>)
   1c37c:	47a0      	blx	r4
   1c37e:	4828      	ldr	r0, [pc, #160]	; (1c420 <spi_cmd_complete+0x560>)
   1c380:	47a0      	blx	r4
						result = N_FAIL;
   1c382:	2000      	movs	r0, #0
						break;
   1c384:	e6b2      	b.n	1c0ec <spi_cmd_complete+0x22c>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   1c386:	2102      	movs	r1, #2
   1c388:	a802      	add	r0, sp, #8
   1c38a:	4b2a      	ldr	r3, [pc, #168]	; (1c434 <spi_cmd_complete+0x574>)
   1c38c:	4798      	blx	r3
   1c38e:	2800      	cmp	r0, #0
   1c390:	d0d6      	beq.n	1c340 <spi_cmd_complete+0x480>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   1c392:	4a2b      	ldr	r2, [pc, #172]	; (1c440 <spi_cmd_complete+0x580>)
   1c394:	491e      	ldr	r1, [pc, #120]	; (1c410 <spi_cmd_complete+0x550>)
   1c396:	481f      	ldr	r0, [pc, #124]	; (1c414 <spi_cmd_complete+0x554>)
   1c398:	4c1f      	ldr	r4, [pc, #124]	; (1c418 <spi_cmd_complete+0x558>)
   1c39a:	47a0      	blx	r4
   1c39c:	4826      	ldr	r0, [pc, #152]	; (1c438 <spi_cmd_complete+0x578>)
   1c39e:	47a0      	blx	r4
   1c3a0:	481f      	ldr	r0, [pc, #124]	; (1c420 <spi_cmd_complete+0x560>)
   1c3a2:	47a0      	blx	r4
							result = N_FAIL;
   1c3a4:	2000      	movs	r0, #0
							break;
   1c3a6:	e6a1      	b.n	1c0ec <spi_cmd_complete+0x22c>
   1c3a8:	2001      	movs	r0, #1
   1c3aa:	e69f      	b.n	1c0ec <spi_cmd_complete+0x22c>
				for(ix=0; (rix < len2) && (ix < sz);) {
   1c3ac:	2001      	movs	r0, #1
   1c3ae:	e69d      	b.n	1c0ec <spi_cmd_complete+0x22c>
		return result;
   1c3b0:	2000      	movs	r0, #0
   1c3b2:	e69b      	b.n	1c0ec <spi_cmd_complete+0x22c>
		wb[len-1] = (crc7(0x7f, (const uint8_t *)&wb[0], len-1)) << 1;
   1c3b4:	2301      	movs	r3, #1
   1c3b6:	425b      	negs	r3, r3
   1c3b8:	444b      	add	r3, r9
   1c3ba:	469c      	mov	ip, r3
   1c3bc:	001c      	movs	r4, r3
   1c3be:	2200      	movs	r2, #0
   1c3c0:	237f      	movs	r3, #127	; 0x7f
	return crc7_syndrome_table[(crc << 1) ^ data];
   1c3c2:	4e20      	ldr	r6, [pc, #128]	; (1c444 <spi_cmd_complete+0x584>)
		crc = crc7_byte(crc, *buffer++);
   1c3c4:	a90e      	add	r1, sp, #56	; 0x38
	return crc7_syndrome_table[(crc << 1) ^ data];
   1c3c6:	005b      	lsls	r3, r3, #1
   1c3c8:	5c50      	ldrb	r0, [r2, r1]
   1c3ca:	4043      	eors	r3, r0
   1c3cc:	5cf3      	ldrb	r3, [r6, r3]
   1c3ce:	3201      	adds	r2, #1
	while (len--)
   1c3d0:	42a2      	cmp	r2, r4
   1c3d2:	d1f8      	bne.n	1c3c6 <spi_cmd_complete+0x506>
		wb[len-1] = (crc7(0x7f, (const uint8_t *)&wb[0], len-1)) << 1;
   1c3d4:	005b      	lsls	r3, r3, #1
   1c3d6:	aa0e      	add	r2, sp, #56	; 0x38
   1c3d8:	4661      	mov	r1, ip
   1c3da:	5453      	strb	r3, [r2, r1]
	if ((cmd == CMD_RESET) ||
   1c3dc:	2dcf      	cmp	r5, #207	; 0xcf
   1c3de:	d100      	bne.n	1c3e2 <spi_cmd_complete+0x522>
   1c3e0:	e611      	b.n	1c006 <spi_cmd_complete+0x146>
   1c3e2:	002b      	movs	r3, r5
   1c3e4:	333b      	adds	r3, #59	; 0x3b
   1c3e6:	b2db      	uxtb	r3, r3
   1c3e8:	2b01      	cmp	r3, #1
   1c3ea:	d800      	bhi.n	1c3ee <spi_cmd_complete+0x52e>
   1c3ec:	e60b      	b.n	1c006 <spi_cmd_complete+0x146>
	} else if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   1c3ee:	2dc4      	cmp	r5, #196	; 0xc4
   1c3f0:	d004      	beq.n	1c3fc <spi_cmd_complete+0x53c>
		len2 = len + (NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   1c3f2:	464b      	mov	r3, r9
   1c3f4:	1d5e      	adds	r6, r3, #5
	} else if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   1c3f6:	2dca      	cmp	r5, #202	; 0xca
   1c3f8:	d000      	beq.n	1c3fc <spi_cmd_complete+0x53c>
   1c3fa:	e606      	b.n	1c00a <spi_cmd_complete+0x14a>
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   1c3fc:	464e      	mov	r6, r9
   1c3fe:	360a      	adds	r6, #10
		if (!gu8Crc_off) {
   1c400:	2f00      	cmp	r7, #0
   1c402:	d000      	beq.n	1c406 <spi_cmd_complete+0x546>
   1c404:	e601      	b.n	1c00a <spi_cmd_complete+0x14a>
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   1c406:	3602      	adds	r6, #2
   1c408:	e5ff      	b.n	1c00a <spi_cmd_complete+0x14a>
   1c40a:	46c0      	nop			; (mov r8, r8)
   1c40c:	20003cb4 	.word	0x20003cb4
   1c410:	0002a83c 	.word	0x0002a83c
   1c414:	0002a0fc 	.word	0x0002a0fc
   1c418:	0001913d 	.word	0x0001913d
   1c41c:	0002ad48 	.word	0x0002ad48
   1c420:	0002a124 	.word	0x0002a124
   1c424:	00000263 	.word	0x00000263
   1c428:	0002ad18 	.word	0x0002ad18
   1c42c:	0000028e 	.word	0x0000028e
   1c430:	0002ad78 	.word	0x0002ad78
   1c434:	0001bdd9 	.word	0x0001bdd9
   1c438:	0002adac 	.word	0x0002adac
   1c43c:	0002ade4 	.word	0x0002ade4
   1c440:	000002d2 	.word	0x000002d2
   1c444:	0002a8a8 	.word	0x0002a8a8

0001c448 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
   1c448:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c44a:	46de      	mov	lr, fp
   1c44c:	4657      	mov	r7, sl
   1c44e:	464e      	mov	r6, r9
   1c450:	4645      	mov	r5, r8
   1c452:	b5e0      	push	{r5, r6, r7, lr}
   1c454:	b087      	sub	sp, #28
   1c456:	9003      	str	r0, [sp, #12]
   1c458:	9105      	str	r1, [sp, #20]
   1c45a:	2830      	cmp	r0, #48	; 0x30
   1c45c:	d80e      	bhi.n	1c47c <spi_write_reg+0x34>
   1c45e:	4b27      	ldr	r3, [pc, #156]	; (1c4fc <spi_write_reg+0xb4>)
   1c460:	781b      	ldrb	r3, [r3, #0]
   1c462:	b2db      	uxtb	r3, r3
   1c464:	9304      	str	r3, [sp, #16]
   1c466:	2300      	movs	r3, #0
   1c468:	2230      	movs	r2, #48	; 0x30
   1c46a:	9903      	ldr	r1, [sp, #12]
   1c46c:	428a      	cmp	r2, r1
   1c46e:	415b      	adcs	r3, r3
   1c470:	b2db      	uxtb	r3, r3
   1c472:	469a      	mov	sl, r3
   1c474:	260a      	movs	r6, #10
		goto _FAIL_;
	}

#else

	result = spi_cmd_complete(cmd, addr, (uint8*)&u32data, 4, clockless);
   1c476:	4b22      	ldr	r3, [pc, #136]	; (1c500 <spi_write_reg+0xb8>)
   1c478:	469b      	mov	fp, r3
   1c47a:	e02b      	b.n	1c4d4 <spi_write_reg+0x8c>
   1c47c:	4b21      	ldr	r3, [pc, #132]	; (1c504 <spi_write_reg+0xbc>)
   1c47e:	781b      	ldrb	r3, [r3, #0]
   1c480:	e7ef      	b.n	1c462 <spi_write_reg+0x1a>
	if (result != N_OK) {
		M2M_ERR( "[nmi spi]: Failed cmd, write reg (%08x)...\n", addr);
   1c482:	4a21      	ldr	r2, [pc, #132]	; (1c508 <spi_write_reg+0xc0>)
   1c484:	4921      	ldr	r1, [pc, #132]	; (1c50c <spi_write_reg+0xc4>)
   1c486:	4822      	ldr	r0, [pc, #136]	; (1c510 <spi_write_reg+0xc8>)
   1c488:	4c22      	ldr	r4, [pc, #136]	; (1c514 <spi_write_reg+0xcc>)
   1c48a:	47a0      	blx	r4
   1c48c:	9703      	str	r7, [sp, #12]
   1c48e:	0039      	movs	r1, r7
   1c490:	4821      	ldr	r0, [pc, #132]	; (1c518 <spi_write_reg+0xd0>)
   1c492:	47a0      	blx	r4
   1c494:	4821      	ldr	r0, [pc, #132]	; (1c51c <spi_write_reg+0xd4>)
   1c496:	47a0      	blx	r4

#endif
_FAIL_:
	if(result != N_OK)
	{
		nm_bsp_sleep(1);
   1c498:	2001      	movs	r0, #1
   1c49a:	4f21      	ldr	r7, [pc, #132]	; (1c520 <spi_write_reg+0xd8>)
   1c49c:	47b8      	blx	r7
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   1c49e:	2300      	movs	r3, #0
   1c4a0:	9300      	str	r3, [sp, #0]
   1c4a2:	2200      	movs	r2, #0
   1c4a4:	2100      	movs	r1, #0
   1c4a6:	20cf      	movs	r0, #207	; 0xcf
   1c4a8:	4d1e      	ldr	r5, [pc, #120]	; (1c524 <spi_write_reg+0xdc>)
   1c4aa:	47a8      	blx	r5
		spi_cmd_rsp(CMD_RESET);
   1c4ac:	20cf      	movs	r0, #207	; 0xcf
   1c4ae:	4b1e      	ldr	r3, [pc, #120]	; (1c528 <spi_write_reg+0xe0>)
   1c4b0:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
   1c4b2:	22ea      	movs	r2, #234	; 0xea
   1c4b4:	0092      	lsls	r2, r2, #2
   1c4b6:	4915      	ldr	r1, [pc, #84]	; (1c50c <spi_write_reg+0xc4>)
   1c4b8:	4815      	ldr	r0, [pc, #84]	; (1c510 <spi_write_reg+0xc8>)
   1c4ba:	47a0      	blx	r4
   1c4bc:	9b05      	ldr	r3, [sp, #20]
   1c4be:	9a03      	ldr	r2, [sp, #12]
   1c4c0:	0031      	movs	r1, r6
   1c4c2:	481a      	ldr	r0, [pc, #104]	; (1c52c <spi_write_reg+0xe4>)
   1c4c4:	47a0      	blx	r4
   1c4c6:	4815      	ldr	r0, [pc, #84]	; (1c51c <spi_write_reg+0xd4>)
   1c4c8:	47a0      	blx	r4
		nm_bsp_sleep(1);
   1c4ca:	2001      	movs	r0, #1
   1c4cc:	47b8      	blx	r7
   1c4ce:	3e01      	subs	r6, #1
		retry--;
		if(retry) goto _RETRY_;
   1c4d0:	2e00      	cmp	r6, #0
   1c4d2:	d00b      	beq.n	1c4ec <spi_write_reg+0xa4>
	result = spi_cmd_complete(cmd, addr, (uint8*)&u32data, 4, clockless);
   1c4d4:	4653      	mov	r3, sl
   1c4d6:	9300      	str	r3, [sp, #0]
   1c4d8:	2304      	movs	r3, #4
   1c4da:	aa05      	add	r2, sp, #20
   1c4dc:	9f03      	ldr	r7, [sp, #12]
   1c4de:	0039      	movs	r1, r7
   1c4e0:	9804      	ldr	r0, [sp, #16]
   1c4e2:	47d8      	blx	fp
   1c4e4:	b243      	sxtb	r3, r0
   1c4e6:	4698      	mov	r8, r3
	if (result != N_OK) {
   1c4e8:	2b01      	cmp	r3, #1
   1c4ea:	d1ca      	bne.n	1c482 <spi_write_reg+0x3a>
	}

	return result;
}
   1c4ec:	4640      	mov	r0, r8
   1c4ee:	b007      	add	sp, #28
   1c4f0:	bc3c      	pop	{r2, r3, r4, r5}
   1c4f2:	4690      	mov	r8, r2
   1c4f4:	4699      	mov	r9, r3
   1c4f6:	46a2      	mov	sl, r4
   1c4f8:	46ab      	mov	fp, r5
   1c4fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c4fc:	0002a814 	.word	0x0002a814
   1c500:	0001bec1 	.word	0x0001bec1
   1c504:	0002a815 	.word	0x0002a815
   1c508:	0000039d 	.word	0x0000039d
   1c50c:	0002a860 	.word	0x0002a860
   1c510:	0002a0fc 	.word	0x0002a0fc
   1c514:	0001913d 	.word	0x0001913d
   1c518:	0002ae90 	.word	0x0002ae90
   1c51c:	0002a124 	.word	0x0002a124
   1c520:	0001a20d 	.word	0x0001a20d
   1c524:	0001bc61 	.word	0x0001bc61
   1c528:	0001bdf9 	.word	0x0001bdf9
   1c52c:	0002aebc 	.word	0x0002aebc

0001c530 <spi_read_reg>:

	return result;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
   1c530:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c532:	46de      	mov	lr, fp
   1c534:	4657      	mov	r7, sl
   1c536:	464e      	mov	r6, r9
   1c538:	4645      	mov	r5, r8
   1c53a:	b5e0      	push	{r5, r6, r7, lr}
   1c53c:	b089      	sub	sp, #36	; 0x24
   1c53e:	9003      	str	r0, [sp, #12]
   1c540:	468a      	mov	sl, r1
   1c542:	28ff      	cmp	r0, #255	; 0xff
   1c544:	d80e      	bhi.n	1c564 <spi_read_reg+0x34>
   1c546:	4b2e      	ldr	r3, [pc, #184]	; (1c600 <spi_read_reg+0xd0>)
   1c548:	781b      	ldrb	r3, [r3, #0]
   1c54a:	b2db      	uxtb	r3, r3
   1c54c:	9305      	str	r3, [sp, #20]
   1c54e:	2300      	movs	r3, #0
   1c550:	22ff      	movs	r2, #255	; 0xff
   1c552:	9903      	ldr	r1, [sp, #12]
   1c554:	428a      	cmp	r2, r1
   1c556:	415b      	adcs	r3, r3
   1c558:	b2db      	uxtb	r3, r3
   1c55a:	4698      	mov	r8, r3
   1c55c:	260a      	movs	r6, #10
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, (uint8*)&tmp[0], 4, clockless);
   1c55e:	4b29      	ldr	r3, [pc, #164]	; (1c604 <spi_read_reg+0xd4>)
   1c560:	469b      	mov	fp, r3
   1c562:	e029      	b.n	1c5b8 <spi_read_reg+0x88>
   1c564:	4b28      	ldr	r3, [pc, #160]	; (1c608 <spi_read_reg+0xd8>)
   1c566:	781b      	ldrb	r3, [r3, #0]
   1c568:	e7ef      	b.n	1c54a <spi_read_reg+0x1a>
	if (result != N_OK) {
		M2M_ERR( "[nmi spi]: Failed cmd, read reg (%08x)...\n", addr);
   1c56a:	4a28      	ldr	r2, [pc, #160]	; (1c60c <spi_read_reg+0xdc>)
   1c56c:	4928      	ldr	r1, [pc, #160]	; (1c610 <spi_read_reg+0xe0>)
   1c56e:	4829      	ldr	r0, [pc, #164]	; (1c614 <spi_read_reg+0xe4>)
   1c570:	4c29      	ldr	r4, [pc, #164]	; (1c618 <spi_read_reg+0xe8>)
   1c572:	47a0      	blx	r4
   1c574:	9703      	str	r7, [sp, #12]
   1c576:	0039      	movs	r1, r7
   1c578:	4828      	ldr	r0, [pc, #160]	; (1c61c <spi_read_reg+0xec>)
   1c57a:	47a0      	blx	r4
   1c57c:	4828      	ldr	r0, [pc, #160]	; (1c620 <spi_read_reg+0xf0>)
   1c57e:	47a0      	blx	r4
		
_FAIL_:
	if(result != N_OK)
	{
		
		nm_bsp_sleep(1);
   1c580:	2001      	movs	r0, #1
   1c582:	4f28      	ldr	r7, [pc, #160]	; (1c624 <spi_read_reg+0xf4>)
   1c584:	47b8      	blx	r7
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   1c586:	2300      	movs	r3, #0
   1c588:	9300      	str	r3, [sp, #0]
   1c58a:	2200      	movs	r2, #0
   1c58c:	2100      	movs	r1, #0
   1c58e:	20cf      	movs	r0, #207	; 0xcf
   1c590:	4d25      	ldr	r5, [pc, #148]	; (1c628 <spi_read_reg+0xf8>)
   1c592:	47a8      	blx	r5
		spi_cmd_rsp(CMD_RESET);
   1c594:	20cf      	movs	r0, #207	; 0xcf
   1c596:	4b25      	ldr	r3, [pc, #148]	; (1c62c <spi_read_reg+0xfc>)
   1c598:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
   1c59a:	4a25      	ldr	r2, [pc, #148]	; (1c630 <spi_read_reg+0x100>)
   1c59c:	491c      	ldr	r1, [pc, #112]	; (1c610 <spi_read_reg+0xe0>)
   1c59e:	481d      	ldr	r0, [pc, #116]	; (1c614 <spi_read_reg+0xe4>)
   1c5a0:	47a0      	blx	r4
   1c5a2:	9a03      	ldr	r2, [sp, #12]
   1c5a4:	0031      	movs	r1, r6
   1c5a6:	4823      	ldr	r0, [pc, #140]	; (1c634 <spi_read_reg+0x104>)
   1c5a8:	47a0      	blx	r4
   1c5aa:	481d      	ldr	r0, [pc, #116]	; (1c620 <spi_read_reg+0xf0>)
   1c5ac:	47a0      	blx	r4
		nm_bsp_sleep(1);
   1c5ae:	2001      	movs	r0, #1
   1c5b0:	47b8      	blx	r7
   1c5b2:	3e01      	subs	r6, #1
		retry--;
		if(retry) goto _RETRY_;
   1c5b4:	2e00      	cmp	r6, #0
   1c5b6:	d021      	beq.n	1c5fc <spi_read_reg+0xcc>
	result = spi_cmd_complete(cmd, addr, (uint8*)&tmp[0], 4, clockless);
   1c5b8:	4643      	mov	r3, r8
   1c5ba:	9300      	str	r3, [sp, #0]
   1c5bc:	2304      	movs	r3, #4
   1c5be:	aa07      	add	r2, sp, #28
   1c5c0:	9f03      	ldr	r7, [sp, #12]
   1c5c2:	0039      	movs	r1, r7
   1c5c4:	9805      	ldr	r0, [sp, #20]
   1c5c6:	47d8      	blx	fp
   1c5c8:	b243      	sxtb	r3, r0
   1c5ca:	9304      	str	r3, [sp, #16]
	if (result != N_OK) {
   1c5cc:	2b01      	cmp	r3, #1
   1c5ce:	d1cc      	bne.n	1c56a <spi_read_reg+0x3a>
   1c5d0:	9d04      	ldr	r5, [sp, #16]
		((uint32)tmp[1] << 8) |
   1c5d2:	aa07      	add	r2, sp, #28
   1c5d4:	7853      	ldrb	r3, [r2, #1]
   1c5d6:	021b      	lsls	r3, r3, #8
		((uint32)tmp[2] << 16) |
   1c5d8:	7891      	ldrb	r1, [r2, #2]
   1c5da:	0409      	lsls	r1, r1, #16
		((uint32)tmp[1] << 8) |
   1c5dc:	430b      	orrs	r3, r1
	*u32data = tmp[0] |
   1c5de:	7811      	ldrb	r1, [r2, #0]
		((uint32)tmp[1] << 8) |
   1c5e0:	430b      	orrs	r3, r1
		((uint32)tmp[3] << 24);
   1c5e2:	78d2      	ldrb	r2, [r2, #3]
   1c5e4:	0612      	lsls	r2, r2, #24
		((uint32)tmp[2] << 16) |
   1c5e6:	4313      	orrs	r3, r2
	*u32data = tmp[0] |
   1c5e8:	4652      	mov	r2, sl
   1c5ea:	6013      	str	r3, [r2, #0]
	}
		
	return result;
}
   1c5ec:	0028      	movs	r0, r5
   1c5ee:	b009      	add	sp, #36	; 0x24
   1c5f0:	bc3c      	pop	{r2, r3, r4, r5}
   1c5f2:	4690      	mov	r8, r2
   1c5f4:	4699      	mov	r9, r3
   1c5f6:	46a2      	mov	sl, r4
   1c5f8:	46ab      	mov	fp, r5
   1c5fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c5fc:	9d04      	ldr	r5, [sp, #16]
   1c5fe:	e7f5      	b.n	1c5ec <spi_read_reg+0xbc>
   1c600:	0002a816 	.word	0x0002a816
   1c604:	0001bec1 	.word	0x0001bec1
   1c608:	0002a817 	.word	0x0002a817
   1c60c:	00000423 	.word	0x00000423
   1c610:	0002a880 	.word	0x0002a880
   1c614:	0002a0fc 	.word	0x0002a0fc
   1c618:	0001913d 	.word	0x0001913d
   1c61c:	0002ae4c 	.word	0x0002ae4c
   1c620:	0002a124 	.word	0x0002a124
   1c624:	0001a20d 	.word	0x0001a20d
   1c628:	0001bc61 	.word	0x0001bc61
   1c62c:	0001bdf9 	.word	0x0001bdf9
   1c630:	00000435 	.word	0x00000435
   1c634:	0002ae78 	.word	0x0002ae78

0001c638 <nm_spi_reset>:
	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
}

sint8 nm_spi_reset(void)
{
   1c638:	b510      	push	{r4, lr}
   1c63a:	b082      	sub	sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
   1c63c:	2300      	movs	r3, #0
   1c63e:	9300      	str	r3, [sp, #0]
   1c640:	2200      	movs	r2, #0
   1c642:	2100      	movs	r1, #0
   1c644:	20cf      	movs	r0, #207	; 0xcf
   1c646:	4c04      	ldr	r4, [pc, #16]	; (1c658 <nm_spi_reset+0x20>)
   1c648:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
   1c64a:	20cf      	movs	r0, #207	; 0xcf
   1c64c:	4b03      	ldr	r3, [pc, #12]	; (1c65c <nm_spi_reset+0x24>)
   1c64e:	4798      	blx	r3
	return M2M_SUCCESS;
}
   1c650:	2000      	movs	r0, #0
   1c652:	b002      	add	sp, #8
   1c654:	bd10      	pop	{r4, pc}
   1c656:	46c0      	nop			; (mov r8, r8)
   1c658:	0001bc61 	.word	0x0001bc61
   1c65c:	0001bdf9 	.word	0x0001bdf9

0001c660 <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
   1c660:	2200      	movs	r2, #0
   1c662:	4b02      	ldr	r3, [pc, #8]	; (1c66c <nm_spi_deinit+0xc>)
   1c664:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
}
   1c666:	2000      	movs	r0, #0
   1c668:	4770      	bx	lr
   1c66a:	46c0      	nop			; (mov r8, r8)
   1c66c:	20003cb4 	.word	0x20003cb4

0001c670 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
   1c670:	b500      	push	{lr}
   1c672:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
   1c674:	a901      	add	r1, sp, #4
   1c676:	4b02      	ldr	r3, [pc, #8]	; (1c680 <nm_spi_read_reg+0x10>)
   1c678:	4798      	blx	r3

	return u32Val;
}
   1c67a:	9801      	ldr	r0, [sp, #4]
   1c67c:	b003      	add	sp, #12
   1c67e:	bd00      	pop	{pc}
   1c680:	0001c531 	.word	0x0001c531

0001c684 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   1c684:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
   1c686:	4b04      	ldr	r3, [pc, #16]	; (1c698 <nm_spi_read_reg_with_ret+0x14>)
   1c688:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   1c68a:	2300      	movs	r3, #0
   1c68c:	2801      	cmp	r0, #1
   1c68e:	d101      	bne.n	1c694 <nm_spi_read_reg_with_ret+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
   1c690:	0018      	movs	r0, r3
   1c692:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
   1c694:	3b06      	subs	r3, #6
   1c696:	e7fb      	b.n	1c690 <nm_spi_read_reg_with_ret+0xc>
   1c698:	0001c531 	.word	0x0001c531

0001c69c <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
   1c69c:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
   1c69e:	4b04      	ldr	r3, [pc, #16]	; (1c6b0 <nm_spi_write_reg+0x14>)
   1c6a0:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   1c6a2:	2300      	movs	r3, #0
   1c6a4:	2801      	cmp	r0, #1
   1c6a6:	d101      	bne.n	1c6ac <nm_spi_write_reg+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
   1c6a8:	0018      	movs	r0, r3
   1c6aa:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
   1c6ac:	3b06      	subs	r3, #6
   1c6ae:	e7fb      	b.n	1c6a8 <nm_spi_write_reg+0xc>
   1c6b0:	0001c449 	.word	0x0001c449

0001c6b4 <nm_spi_init>:
{
   1c6b4:	b530      	push	{r4, r5, lr}
   1c6b6:	b083      	sub	sp, #12
	uint32 reg = 0;
   1c6b8:	2300      	movs	r3, #0
   1c6ba:	9300      	str	r3, [sp, #0]
	gu8Crc_off = 0;
   1c6bc:	4a31      	ldr	r2, [pc, #196]	; (1c784 <nm_spi_init+0xd0>)
   1c6be:	7013      	strb	r3, [r2, #0]
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
   1c6c0:	4669      	mov	r1, sp
   1c6c2:	4831      	ldr	r0, [pc, #196]	; (1c788 <nm_spi_init+0xd4>)
   1c6c4:	4b31      	ldr	r3, [pc, #196]	; (1c78c <nm_spi_init+0xd8>)
   1c6c6:	4798      	blx	r3
   1c6c8:	2800      	cmp	r0, #0
   1c6ca:	d028      	beq.n	1c71e <nm_spi_init+0x6a>
	if(gu8Crc_off == 0)
   1c6cc:	4b2d      	ldr	r3, [pc, #180]	; (1c784 <nm_spi_init+0xd0>)
   1c6ce:	781b      	ldrb	r3, [r3, #0]
   1c6d0:	2b00      	cmp	r3, #0
   1c6d2:	d10d      	bne.n	1c6f0 <nm_spi_init+0x3c>
		reg &= ~0x70;
   1c6d4:	337c      	adds	r3, #124	; 0x7c
   1c6d6:	9900      	ldr	r1, [sp, #0]
   1c6d8:	4399      	bics	r1, r3
		reg |= (0x5 << 4);
   1c6da:	3b2c      	subs	r3, #44	; 0x2c
   1c6dc:	4319      	orrs	r1, r3
   1c6de:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
   1c6e0:	4829      	ldr	r0, [pc, #164]	; (1c788 <nm_spi_init+0xd4>)
   1c6e2:	4b2b      	ldr	r3, [pc, #172]	; (1c790 <nm_spi_init+0xdc>)
   1c6e4:	4798      	blx	r3
   1c6e6:	1e04      	subs	r4, r0, #0
   1c6e8:	d036      	beq.n	1c758 <nm_spi_init+0xa4>
		gu8Crc_off = 1;
   1c6ea:	2201      	movs	r2, #1
   1c6ec:	4b25      	ldr	r3, [pc, #148]	; (1c784 <nm_spi_init+0xd0>)
   1c6ee:	701a      	strb	r2, [r3, #0]
	if (!spi_read_reg(0x1000, &chipid)) {
   1c6f0:	a901      	add	r1, sp, #4
   1c6f2:	2080      	movs	r0, #128	; 0x80
   1c6f4:	0140      	lsls	r0, r0, #5
   1c6f6:	4b25      	ldr	r3, [pc, #148]	; (1c78c <nm_spi_init+0xd8>)
   1c6f8:	4798      	blx	r3
   1c6fa:	2800      	cmp	r0, #0
   1c6fc:	d036      	beq.n	1c76c <nm_spi_init+0xb8>
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
   1c6fe:	4c22      	ldr	r4, [pc, #136]	; (1c788 <nm_spi_init+0xd4>)
   1c700:	0020      	movs	r0, r4
   1c702:	4b24      	ldr	r3, [pc, #144]	; (1c794 <nm_spi_init+0xe0>)
   1c704:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
   1c706:	2370      	movs	r3, #112	; 0x70
   1c708:	0001      	movs	r1, r0
   1c70a:	4399      	bics	r1, r3
	case 8192: val32 |= (5 << 4); break;
   1c70c:	2050      	movs	r0, #80	; 0x50
   1c70e:	4301      	orrs	r1, r0
	nm_spi_write_reg(SPI_BASE+0x24, val32);
   1c710:	0020      	movs	r0, r4
   1c712:	4b21      	ldr	r3, [pc, #132]	; (1c798 <nm_spi_init+0xe4>)
   1c714:	4798      	blx	r3
	return M2M_SUCCESS;
   1c716:	2400      	movs	r4, #0
}
   1c718:	0020      	movs	r0, r4
   1c71a:	b003      	add	sp, #12
   1c71c:	bd30      	pop	{r4, r5, pc}
		gu8Crc_off = 1;
   1c71e:	2201      	movs	r2, #1
   1c720:	4b18      	ldr	r3, [pc, #96]	; (1c784 <nm_spi_init+0xd0>)
   1c722:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
   1c724:	2298      	movs	r2, #152	; 0x98
   1c726:	00d2      	lsls	r2, r2, #3
   1c728:	491c      	ldr	r1, [pc, #112]	; (1c79c <nm_spi_init+0xe8>)
   1c72a:	481d      	ldr	r0, [pc, #116]	; (1c7a0 <nm_spi_init+0xec>)
   1c72c:	4c1d      	ldr	r4, [pc, #116]	; (1c7a4 <nm_spi_init+0xf0>)
   1c72e:	47a0      	blx	r4
   1c730:	481d      	ldr	r0, [pc, #116]	; (1c7a8 <nm_spi_init+0xf4>)
   1c732:	47a0      	blx	r4
   1c734:	481d      	ldr	r0, [pc, #116]	; (1c7ac <nm_spi_init+0xf8>)
   1c736:	47a0      	blx	r4
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
   1c738:	4669      	mov	r1, sp
   1c73a:	4813      	ldr	r0, [pc, #76]	; (1c788 <nm_spi_init+0xd4>)
   1c73c:	4b13      	ldr	r3, [pc, #76]	; (1c78c <nm_spi_init+0xd8>)
   1c73e:	4798      	blx	r3
   1c740:	1e04      	subs	r4, r0, #0
   1c742:	d1c3      	bne.n	1c6cc <nm_spi_init+0x18>
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
   1c744:	4a1a      	ldr	r2, [pc, #104]	; (1c7b0 <nm_spi_init+0xfc>)
   1c746:	4915      	ldr	r1, [pc, #84]	; (1c79c <nm_spi_init+0xe8>)
   1c748:	4815      	ldr	r0, [pc, #84]	; (1c7a0 <nm_spi_init+0xec>)
   1c74a:	4d16      	ldr	r5, [pc, #88]	; (1c7a4 <nm_spi_init+0xf0>)
   1c74c:	47a8      	blx	r5
   1c74e:	4819      	ldr	r0, [pc, #100]	; (1c7b4 <nm_spi_init+0x100>)
   1c750:	47a8      	blx	r5
   1c752:	4816      	ldr	r0, [pc, #88]	; (1c7ac <nm_spi_init+0xf8>)
   1c754:	47a8      	blx	r5
			return 0;
   1c756:	e7df      	b.n	1c718 <nm_spi_init+0x64>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
   1c758:	4a17      	ldr	r2, [pc, #92]	; (1c7b8 <nm_spi_init+0x104>)
   1c75a:	4910      	ldr	r1, [pc, #64]	; (1c79c <nm_spi_init+0xe8>)
   1c75c:	4810      	ldr	r0, [pc, #64]	; (1c7a0 <nm_spi_init+0xec>)
   1c75e:	4d11      	ldr	r5, [pc, #68]	; (1c7a4 <nm_spi_init+0xf0>)
   1c760:	47a8      	blx	r5
   1c762:	4816      	ldr	r0, [pc, #88]	; (1c7bc <nm_spi_init+0x108>)
   1c764:	47a8      	blx	r5
   1c766:	4811      	ldr	r0, [pc, #68]	; (1c7ac <nm_spi_init+0xf8>)
   1c768:	47a8      	blx	r5
			return 0;
   1c76a:	e7d5      	b.n	1c718 <nm_spi_init+0x64>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
   1c76c:	4a14      	ldr	r2, [pc, #80]	; (1c7c0 <nm_spi_init+0x10c>)
   1c76e:	490b      	ldr	r1, [pc, #44]	; (1c79c <nm_spi_init+0xe8>)
   1c770:	480b      	ldr	r0, [pc, #44]	; (1c7a0 <nm_spi_init+0xec>)
   1c772:	4c0c      	ldr	r4, [pc, #48]	; (1c7a4 <nm_spi_init+0xf0>)
   1c774:	47a0      	blx	r4
   1c776:	4813      	ldr	r0, [pc, #76]	; (1c7c4 <nm_spi_init+0x110>)
   1c778:	47a0      	blx	r4
   1c77a:	480c      	ldr	r0, [pc, #48]	; (1c7ac <nm_spi_init+0xf8>)
   1c77c:	47a0      	blx	r4
		return M2M_ERR_BUS_FAIL;
   1c77e:	2406      	movs	r4, #6
   1c780:	4264      	negs	r4, r4
   1c782:	e7c9      	b.n	1c718 <nm_spi_init+0x64>
   1c784:	20003cb4 	.word	0x20003cb4
   1c788:	0000e824 	.word	0x0000e824
   1c78c:	0001c531 	.word	0x0001c531
   1c790:	0001c449 	.word	0x0001c449
   1c794:	0001c671 	.word	0x0001c671
   1c798:	0001c69d 	.word	0x0001c69d
   1c79c:	0002a89c 	.word	0x0002a89c
   1c7a0:	0002a0fc 	.word	0x0002a0fc
   1c7a4:	0001913d 	.word	0x0001913d
   1c7a8:	0002a9a8 	.word	0x0002a9a8
   1c7ac:	0002a124 	.word	0x0002a124
   1c7b0:	000004c3 	.word	0x000004c3
   1c7b4:	0002a9f8 	.word	0x0002a9f8
   1c7b8:	000004cd 	.word	0x000004cd
   1c7bc:	0002aa28 	.word	0x0002aa28
   1c7c0:	000004d7 	.word	0x000004d7
   1c7c4:	0002aa5c 	.word	0x0002aa5c

0001c7c8 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   1c7c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c7ca:	46de      	mov	lr, fp
   1c7cc:	464f      	mov	r7, r9
   1c7ce:	4646      	mov	r6, r8
   1c7d0:	b5c0      	push	{r6, r7, lr}
   1c7d2:	b086      	sub	sp, #24
   1c7d4:	9003      	str	r0, [sp, #12]
   1c7d6:	9105      	str	r1, [sp, #20]
   1c7d8:	9204      	str	r2, [sp, #16]
   1c7da:	250a      	movs	r5, #10
	result = spi_cmd_complete(cmd, addr, buf, size, 0);
   1c7dc:	4b21      	ldr	r3, [pc, #132]	; (1c864 <nm_spi_read_block+0x9c>)
   1c7de:	4698      	mov	r8, r3
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", addr);
   1c7e0:	002f      	movs	r7, r5
   1c7e2:	e029      	b.n	1c838 <nm_spi_read_block+0x70>
   1c7e4:	4a20      	ldr	r2, [pc, #128]	; (1c868 <nm_spi_read_block+0xa0>)
   1c7e6:	4921      	ldr	r1, [pc, #132]	; (1c86c <nm_spi_read_block+0xa4>)
   1c7e8:	4821      	ldr	r0, [pc, #132]	; (1c870 <nm_spi_read_block+0xa8>)
   1c7ea:	4c22      	ldr	r4, [pc, #136]	; (1c874 <nm_spi_read_block+0xac>)
   1c7ec:	47a0      	blx	r4
   1c7ee:	9503      	str	r5, [sp, #12]
   1c7f0:	0029      	movs	r1, r5
   1c7f2:	4821      	ldr	r0, [pc, #132]	; (1c878 <nm_spi_read_block+0xb0>)
   1c7f4:	47a0      	blx	r4
   1c7f6:	4d21      	ldr	r5, [pc, #132]	; (1c87c <nm_spi_read_block+0xb4>)
   1c7f8:	0028      	movs	r0, r5
   1c7fa:	47a0      	blx	r4
		nm_bsp_sleep(1);
   1c7fc:	2001      	movs	r0, #1
   1c7fe:	4920      	ldr	r1, [pc, #128]	; (1c880 <nm_spi_read_block+0xb8>)
   1c800:	4689      	mov	r9, r1
   1c802:	4788      	blx	r1
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   1c804:	2300      	movs	r3, #0
   1c806:	9300      	str	r3, [sp, #0]
   1c808:	2200      	movs	r2, #0
   1c80a:	2100      	movs	r1, #0
   1c80c:	20cf      	movs	r0, #207	; 0xcf
   1c80e:	4e1d      	ldr	r6, [pc, #116]	; (1c884 <nm_spi_read_block+0xbc>)
   1c810:	47b0      	blx	r6
		spi_cmd_rsp(CMD_RESET);
   1c812:	20cf      	movs	r0, #207	; 0xcf
   1c814:	4b1c      	ldr	r3, [pc, #112]	; (1c888 <nm_spi_read_block+0xc0>)
   1c816:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   1c818:	4a1c      	ldr	r2, [pc, #112]	; (1c88c <nm_spi_read_block+0xc4>)
   1c81a:	4914      	ldr	r1, [pc, #80]	; (1c86c <nm_spi_read_block+0xa4>)
   1c81c:	4814      	ldr	r0, [pc, #80]	; (1c870 <nm_spi_read_block+0xa8>)
   1c81e:	47a0      	blx	r4
   1c820:	9b04      	ldr	r3, [sp, #16]
   1c822:	9a03      	ldr	r2, [sp, #12]
   1c824:	0039      	movs	r1, r7
   1c826:	481a      	ldr	r0, [pc, #104]	; (1c890 <nm_spi_read_block+0xc8>)
   1c828:	47a0      	blx	r4
   1c82a:	0028      	movs	r0, r5
   1c82c:	47a0      	blx	r4
		nm_bsp_sleep(1);
   1c82e:	2001      	movs	r0, #1
   1c830:	47c8      	blx	r9
   1c832:	3f01      	subs	r7, #1
		if(retry) goto _RETRY_;
   1c834:	2f00      	cmp	r7, #0
   1c836:	d011      	beq.n	1c85c <nm_spi_read_block+0x94>
	result = spi_cmd_complete(cmd, addr, buf, size, 0);
   1c838:	2300      	movs	r3, #0
   1c83a:	9300      	str	r3, [sp, #0]
   1c83c:	9b04      	ldr	r3, [sp, #16]
   1c83e:	9a05      	ldr	r2, [sp, #20]
   1c840:	9d03      	ldr	r5, [sp, #12]
   1c842:	0029      	movs	r1, r5
   1c844:	20c8      	movs	r0, #200	; 0xc8
   1c846:	47c0      	blx	r8
	if (result != N_OK) {
   1c848:	b240      	sxtb	r0, r0
   1c84a:	2801      	cmp	r0, #1
   1c84c:	d1ca      	bne.n	1c7e4 <nm_spi_read_block+0x1c>
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   1c84e:	2000      	movs	r0, #0
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
   1c850:	b006      	add	sp, #24
   1c852:	bc1c      	pop	{r2, r3, r4}
   1c854:	4690      	mov	r8, r2
   1c856:	4699      	mov	r9, r3
   1c858:	46a3      	mov	fp, r4
   1c85a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
   1c85c:	2006      	movs	r0, #6
   1c85e:	4240      	negs	r0, r0
   1c860:	e7f6      	b.n	1c850 <nm_spi_read_block+0x88>
   1c862:	46c0      	nop			; (mov r8, r8)
   1c864:	0001bec1 	.word	0x0001bec1
   1c868:	00000472 	.word	0x00000472
   1c86c:	0002a890 	.word	0x0002a890
   1c870:	0002a0fc 	.word	0x0002a0fc
   1c874:	0001913d 	.word	0x0001913d
   1c878:	0002aa84 	.word	0x0002aa84
   1c87c:	0002a124 	.word	0x0002a124
   1c880:	0001a20d 	.word	0x0001a20d
   1c884:	0001bc61 	.word	0x0001bc61
   1c888:	0001bdf9 	.word	0x0001bdf9
   1c88c:	0000047d 	.word	0x0000047d
   1c890:	0002aab4 	.word	0x0002aab4

0001c894 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   1c894:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c896:	46de      	mov	lr, fp
   1c898:	4647      	mov	r7, r8
   1c89a:	b580      	push	{r7, lr}
   1c89c:	b089      	sub	sp, #36	; 0x24
   1c89e:	9004      	str	r0, [sp, #16]
   1c8a0:	468b      	mov	fp, r1
   1c8a2:	9203      	str	r2, [sp, #12]
   1c8a4:	230a      	movs	r3, #10
   1c8a6:	4698      	mov	r8, r3
   1c8a8:	2780      	movs	r7, #128	; 0x80
   1c8aa:	01bf      	lsls	r7, r7, #6
   1c8ac:	466b      	mov	r3, sp
   1c8ae:	82df      	strh	r7, [r3, #22]
   1c8b0:	e068      	b.n	1c984 <nm_spi_write_block+0xf0>
	uint8 cmd, order, crc[2] = {0};
   1c8b2:	2200      	movs	r2, #0
   1c8b4:	ab07      	add	r3, sp, #28
   1c8b6:	801a      	strh	r2, [r3, #0]
   1c8b8:	9c03      	ldr	r4, [sp, #12]
	ix = 0;
   1c8ba:	2500      	movs	r5, #0
   1c8bc:	e021      	b.n	1c902 <nm_spi_write_block+0x6e>
				order = 0x2;
   1c8be:	2300      	movs	r3, #0
   1c8c0:	42a7      	cmp	r7, r4
   1c8c2:	415b      	adcs	r3, r3
   1c8c4:	3302      	adds	r3, #2
		cmd |= order;
   1c8c6:	200b      	movs	r0, #11
   1c8c8:	aa04      	add	r2, sp, #16
   1c8ca:	4694      	mov	ip, r2
   1c8cc:	4460      	add	r0, ip
   1c8ce:	2210      	movs	r2, #16
   1c8d0:	4252      	negs	r2, r2
   1c8d2:	4313      	orrs	r3, r2
   1c8d4:	7003      	strb	r3, [r0, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
   1c8d6:	2101      	movs	r1, #1
   1c8d8:	4b65      	ldr	r3, [pc, #404]	; (1ca70 <nm_spi_write_block+0x1dc>)
   1c8da:	4798      	blx	r3
   1c8dc:	2800      	cmp	r0, #0
   1c8de:	d11d      	bne.n	1c91c <nm_spi_write_block+0x88>
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
   1c8e0:	465b      	mov	r3, fp
   1c8e2:	1958      	adds	r0, r3, r5
   1c8e4:	0031      	movs	r1, r6
   1c8e6:	4b62      	ldr	r3, [pc, #392]	; (1ca70 <nm_spi_write_block+0x1dc>)
   1c8e8:	4798      	blx	r3
   1c8ea:	2800      	cmp	r0, #0
   1c8ec:	d161      	bne.n	1c9b2 <nm_spi_write_block+0x11e>
		if (!gu8Crc_off) {
   1c8ee:	4b61      	ldr	r3, [pc, #388]	; (1ca74 <nm_spi_write_block+0x1e0>)
   1c8f0:	781b      	ldrb	r3, [r3, #0]
   1c8f2:	2b00      	cmp	r3, #0
   1c8f4:	d067      	beq.n	1c9c6 <nm_spi_write_block+0x132>
		ix += nbytes;
   1c8f6:	1975      	adds	r5, r6, r5
   1c8f8:	b22d      	sxth	r5, r5
		sz -= nbytes;
   1c8fa:	1ba4      	subs	r4, r4, r6
   1c8fc:	b2a4      	uxth	r4, r4
	} while (sz);
   1c8fe:	2c00      	cmp	r4, #0
   1c900:	d07d      	beq.n	1c9fe <nm_spi_write_block+0x16a>
   1c902:	1c26      	adds	r6, r4, #0
   1c904:	42bc      	cmp	r4, r7
   1c906:	d901      	bls.n	1c90c <nm_spi_write_block+0x78>
   1c908:	466b      	mov	r3, sp
   1c90a:	8ade      	ldrh	r6, [r3, #22]
   1c90c:	b2b6      	uxth	r6, r6
		if (ix == 0)  {
   1c90e:	2d00      	cmp	r5, #0
   1c910:	d1d5      	bne.n	1c8be <nm_spi_write_block+0x2a>
				order = 0x3;
   1c912:	2303      	movs	r3, #3
			if (sz <= DATA_PKT_SZ)
   1c914:	42bc      	cmp	r4, r7
   1c916:	d9d6      	bls.n	1c8c6 <nm_spi_write_block+0x32>
				order = 0x1;
   1c918:	3b02      	subs	r3, #2
   1c91a:	e7d4      	b.n	1c8c6 <nm_spi_write_block+0x32>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
   1c91c:	4a56      	ldr	r2, [pc, #344]	; (1ca78 <nm_spi_write_block+0x1e4>)
   1c91e:	4957      	ldr	r1, [pc, #348]	; (1ca7c <nm_spi_write_block+0x1e8>)
   1c920:	4857      	ldr	r0, [pc, #348]	; (1ca80 <nm_spi_write_block+0x1ec>)
   1c922:	4c58      	ldr	r4, [pc, #352]	; (1ca84 <nm_spi_write_block+0x1f0>)
   1c924:	47a0      	blx	r4
   1c926:	4858      	ldr	r0, [pc, #352]	; (1ca88 <nm_spi_write_block+0x1f4>)
   1c928:	47a0      	blx	r4
   1c92a:	4858      	ldr	r0, [pc, #352]	; (1ca8c <nm_spi_write_block+0x1f8>)
   1c92c:	47a0      	blx	r4
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   1c92e:	4a58      	ldr	r2, [pc, #352]	; (1ca90 <nm_spi_write_block+0x1fc>)
   1c930:	4958      	ldr	r1, [pc, #352]	; (1ca94 <nm_spi_write_block+0x200>)
   1c932:	4853      	ldr	r0, [pc, #332]	; (1ca80 <nm_spi_write_block+0x1ec>)
   1c934:	4c53      	ldr	r4, [pc, #332]	; (1ca84 <nm_spi_write_block+0x1f0>)
   1c936:	47a0      	blx	r4
   1c938:	4857      	ldr	r0, [pc, #348]	; (1ca98 <nm_spi_write_block+0x204>)
   1c93a:	47a0      	blx	r4
   1c93c:	4853      	ldr	r0, [pc, #332]	; (1ca8c <nm_spi_write_block+0x1f8>)
   1c93e:	47a0      	blx	r4
		nm_bsp_sleep(1);
   1c940:	2001      	movs	r0, #1
   1c942:	4d56      	ldr	r5, [pc, #344]	; (1ca9c <nm_spi_write_block+0x208>)
   1c944:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   1c946:	2300      	movs	r3, #0
   1c948:	9300      	str	r3, [sp, #0]
   1c94a:	2200      	movs	r2, #0
   1c94c:	2100      	movs	r1, #0
   1c94e:	20cf      	movs	r0, #207	; 0xcf
   1c950:	4c53      	ldr	r4, [pc, #332]	; (1caa0 <nm_spi_write_block+0x20c>)
   1c952:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   1c954:	20cf      	movs	r0, #207	; 0xcf
   1c956:	4b53      	ldr	r3, [pc, #332]	; (1caa4 <nm_spi_write_block+0x210>)
   1c958:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   1c95a:	4a53      	ldr	r2, [pc, #332]	; (1caa8 <nm_spi_write_block+0x214>)
   1c95c:	494d      	ldr	r1, [pc, #308]	; (1ca94 <nm_spi_write_block+0x200>)
   1c95e:	4848      	ldr	r0, [pc, #288]	; (1ca80 <nm_spi_write_block+0x1ec>)
   1c960:	4c48      	ldr	r4, [pc, #288]	; (1ca84 <nm_spi_write_block+0x1f0>)
   1c962:	47a0      	blx	r4
   1c964:	9b03      	ldr	r3, [sp, #12]
   1c966:	9a04      	ldr	r2, [sp, #16]
   1c968:	4641      	mov	r1, r8
   1c96a:	4850      	ldr	r0, [pc, #320]	; (1caac <nm_spi_write_block+0x218>)
   1c96c:	47a0      	blx	r4
   1c96e:	4847      	ldr	r0, [pc, #284]	; (1ca8c <nm_spi_write_block+0x1f8>)
   1c970:	47a0      	blx	r4
		nm_bsp_sleep(1);
   1c972:	2001      	movs	r0, #1
   1c974:	47a8      	blx	r5
   1c976:	2301      	movs	r3, #1
   1c978:	425b      	negs	r3, r3
   1c97a:	469c      	mov	ip, r3
   1c97c:	44e0      	add	r8, ip
		if(retry) goto _RETRY_;
   1c97e:	4643      	mov	r3, r8
   1c980:	2b00      	cmp	r3, #0
   1c982:	d06e      	beq.n	1ca62 <nm_spi_write_block+0x1ce>
	result = spi_cmd_complete(cmd, addr, NULL, size, 0);
   1c984:	2300      	movs	r3, #0
   1c986:	9300      	str	r3, [sp, #0]
   1c988:	9b03      	ldr	r3, [sp, #12]
   1c98a:	2200      	movs	r2, #0
   1c98c:	9d04      	ldr	r5, [sp, #16]
   1c98e:	0029      	movs	r1, r5
   1c990:	20c7      	movs	r0, #199	; 0xc7
   1c992:	4c47      	ldr	r4, [pc, #284]	; (1cab0 <nm_spi_write_block+0x21c>)
   1c994:	47a0      	blx	r4
	if (result != N_OK) {
   1c996:	b240      	sxtb	r0, r0
   1c998:	2801      	cmp	r0, #1
   1c99a:	d08a      	beq.n	1c8b2 <nm_spi_write_block+0x1e>
		M2M_ERR( "[nmi spi]: Failed cmd, write block (%08x)...\n", addr);
   1c99c:	4a45      	ldr	r2, [pc, #276]	; (1cab4 <nm_spi_write_block+0x220>)
   1c99e:	493d      	ldr	r1, [pc, #244]	; (1ca94 <nm_spi_write_block+0x200>)
   1c9a0:	4837      	ldr	r0, [pc, #220]	; (1ca80 <nm_spi_write_block+0x1ec>)
   1c9a2:	4c38      	ldr	r4, [pc, #224]	; (1ca84 <nm_spi_write_block+0x1f0>)
   1c9a4:	47a0      	blx	r4
   1c9a6:	0029      	movs	r1, r5
   1c9a8:	4843      	ldr	r0, [pc, #268]	; (1cab8 <nm_spi_write_block+0x224>)
   1c9aa:	47a0      	blx	r4
   1c9ac:	4837      	ldr	r0, [pc, #220]	; (1ca8c <nm_spi_write_block+0x1f8>)
   1c9ae:	47a0      	blx	r4
   1c9b0:	e7c6      	b.n	1c940 <nm_spi_write_block+0xac>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
   1c9b2:	4a42      	ldr	r2, [pc, #264]	; (1cabc <nm_spi_write_block+0x228>)
   1c9b4:	4931      	ldr	r1, [pc, #196]	; (1ca7c <nm_spi_write_block+0x1e8>)
   1c9b6:	4832      	ldr	r0, [pc, #200]	; (1ca80 <nm_spi_write_block+0x1ec>)
   1c9b8:	4c32      	ldr	r4, [pc, #200]	; (1ca84 <nm_spi_write_block+0x1f0>)
   1c9ba:	47a0      	blx	r4
   1c9bc:	4840      	ldr	r0, [pc, #256]	; (1cac0 <nm_spi_write_block+0x22c>)
   1c9be:	47a0      	blx	r4
   1c9c0:	4832      	ldr	r0, [pc, #200]	; (1ca8c <nm_spi_write_block+0x1f8>)
   1c9c2:	47a0      	blx	r4
   1c9c4:	e7b3      	b.n	1c92e <nm_spi_write_block+0x9a>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
   1c9c6:	2102      	movs	r1, #2
   1c9c8:	a807      	add	r0, sp, #28
   1c9ca:	4b29      	ldr	r3, [pc, #164]	; (1ca70 <nm_spi_write_block+0x1dc>)
   1c9cc:	4798      	blx	r3
   1c9ce:	2800      	cmp	r0, #0
   1c9d0:	d091      	beq.n	1c8f6 <nm_spi_write_block+0x62>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
   1c9d2:	22d7      	movs	r2, #215	; 0xd7
   1c9d4:	0092      	lsls	r2, r2, #2
   1c9d6:	4929      	ldr	r1, [pc, #164]	; (1ca7c <nm_spi_write_block+0x1e8>)
   1c9d8:	4829      	ldr	r0, [pc, #164]	; (1ca80 <nm_spi_write_block+0x1ec>)
   1c9da:	4c2a      	ldr	r4, [pc, #168]	; (1ca84 <nm_spi_write_block+0x1f0>)
   1c9dc:	47a0      	blx	r4
   1c9de:	4839      	ldr	r0, [pc, #228]	; (1cac4 <nm_spi_write_block+0x230>)
   1c9e0:	47a0      	blx	r4
   1c9e2:	482a      	ldr	r0, [pc, #168]	; (1ca8c <nm_spi_write_block+0x1f8>)
   1c9e4:	47a0      	blx	r4
   1c9e6:	e7a2      	b.n	1c92e <nm_spi_write_block+0x9a>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
   1c9e8:	229a      	movs	r2, #154	; 0x9a
   1c9ea:	0052      	lsls	r2, r2, #1
   1c9ec:	4936      	ldr	r1, [pc, #216]	; (1cac8 <nm_spi_write_block+0x234>)
   1c9ee:	4824      	ldr	r0, [pc, #144]	; (1ca80 <nm_spi_write_block+0x1ec>)
   1c9f0:	4c24      	ldr	r4, [pc, #144]	; (1ca84 <nm_spi_write_block+0x1f0>)
   1c9f2:	47a0      	blx	r4
   1c9f4:	4835      	ldr	r0, [pc, #212]	; (1cacc <nm_spi_write_block+0x238>)
   1c9f6:	47a0      	blx	r4
   1c9f8:	4824      	ldr	r0, [pc, #144]	; (1ca8c <nm_spi_write_block+0x1f8>)
   1c9fa:	47a0      	blx	r4
   1c9fc:	e025      	b.n	1ca4a <nm_spi_write_block+0x1b6>
    if (!gu8Crc_off)
   1c9fe:	4b1d      	ldr	r3, [pc, #116]	; (1ca74 <nm_spi_write_block+0x1e0>)
   1ca00:	781c      	ldrb	r4, [r3, #0]
		len = 3;
   1ca02:	1e63      	subs	r3, r4, #1
   1ca04:	419c      	sbcs	r4, r3
   1ca06:	3402      	adds	r4, #2
	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
   1ca08:	b2a1      	uxth	r1, r4
   1ca0a:	a807      	add	r0, sp, #28
   1ca0c:	4b30      	ldr	r3, [pc, #192]	; (1cad0 <nm_spi_write_block+0x23c>)
   1ca0e:	4798      	blx	r3
   1ca10:	2800      	cmp	r0, #0
   1ca12:	d1e9      	bne.n	1c9e8 <nm_spi_write_block+0x154>
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
   1ca14:	ab08      	add	r3, sp, #32
   1ca16:	191b      	adds	r3, r3, r4
   1ca18:	3b05      	subs	r3, #5
   1ca1a:	781b      	ldrb	r3, [r3, #0]
   1ca1c:	2b00      	cmp	r3, #0
   1ca1e:	d106      	bne.n	1ca2e <nm_spi_write_block+0x19a>
   1ca20:	ab08      	add	r3, sp, #32
   1ca22:	469c      	mov	ip, r3
   1ca24:	4464      	add	r4, ip
   1ca26:	3c06      	subs	r4, #6
   1ca28:	7823      	ldrb	r3, [r4, #0]
   1ca2a:	2bc3      	cmp	r3, #195	; 0xc3
   1ca2c:	d017      	beq.n	1ca5e <nm_spi_write_block+0x1ca>
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
   1ca2e:	223c      	movs	r2, #60	; 0x3c
   1ca30:	32ff      	adds	r2, #255	; 0xff
   1ca32:	4925      	ldr	r1, [pc, #148]	; (1cac8 <nm_spi_write_block+0x234>)
   1ca34:	4812      	ldr	r0, [pc, #72]	; (1ca80 <nm_spi_write_block+0x1ec>)
   1ca36:	4c13      	ldr	r4, [pc, #76]	; (1ca84 <nm_spi_write_block+0x1f0>)
   1ca38:	47a0      	blx	r4
   1ca3a:	a907      	add	r1, sp, #28
   1ca3c:	788b      	ldrb	r3, [r1, #2]
   1ca3e:	784a      	ldrb	r2, [r1, #1]
   1ca40:	7809      	ldrb	r1, [r1, #0]
   1ca42:	4824      	ldr	r0, [pc, #144]	; (1cad4 <nm_spi_write_block+0x240>)
   1ca44:	47a0      	blx	r4
   1ca46:	4811      	ldr	r0, [pc, #68]	; (1ca8c <nm_spi_write_block+0x1f8>)
   1ca48:	47a0      	blx	r4
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   1ca4a:	4a23      	ldr	r2, [pc, #140]	; (1cad8 <nm_spi_write_block+0x244>)
   1ca4c:	4911      	ldr	r1, [pc, #68]	; (1ca94 <nm_spi_write_block+0x200>)
   1ca4e:	480c      	ldr	r0, [pc, #48]	; (1ca80 <nm_spi_write_block+0x1ec>)
   1ca50:	4c0c      	ldr	r4, [pc, #48]	; (1ca84 <nm_spi_write_block+0x1f0>)
   1ca52:	47a0      	blx	r4
   1ca54:	4810      	ldr	r0, [pc, #64]	; (1ca98 <nm_spi_write_block+0x204>)
   1ca56:	47a0      	blx	r4
   1ca58:	480c      	ldr	r0, [pc, #48]	; (1ca8c <nm_spi_write_block+0x1f8>)
   1ca5a:	47a0      	blx	r4
   1ca5c:	e770      	b.n	1c940 <nm_spi_write_block+0xac>
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   1ca5e:	2000      	movs	r0, #0
   1ca60:	e001      	b.n	1ca66 <nm_spi_write_block+0x1d2>
	else s8Ret = M2M_ERR_BUS_FAIL;
   1ca62:	2006      	movs	r0, #6
   1ca64:	4240      	negs	r0, r0

	return s8Ret;
}
   1ca66:	b009      	add	sp, #36	; 0x24
   1ca68:	bc0c      	pop	{r2, r3}
   1ca6a:	4690      	mov	r8, r2
   1ca6c:	469b      	mov	fp, r3
   1ca6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ca70:	0001bc41 	.word	0x0001bc41
   1ca74:	20003cb4 	.word	0x20003cb4
   1ca78:	00000349 	.word	0x00000349
   1ca7c:	0002a850 	.word	0x0002a850
   1ca80:	0002a0fc 	.word	0x0002a0fc
   1ca84:	0001913d 	.word	0x0001913d
   1ca88:	0002ab00 	.word	0x0002ab00
   1ca8c:	0002a124 	.word	0x0002a124
   1ca90:	000003d9 	.word	0x000003d9
   1ca94:	0002a870 	.word	0x0002a870
   1ca98:	0002abf4 	.word	0x0002abf4
   1ca9c:	0001a20d 	.word	0x0001a20d
   1caa0:	0001bc61 	.word	0x0001bc61
   1caa4:	0001bdf9 	.word	0x0001bdf9
   1caa8:	000003eb 	.word	0x000003eb
   1caac:	0002aab4 	.word	0x0002aab4
   1cab0:	0001bec1 	.word	0x0001bec1
   1cab4:	000003cf 	.word	0x000003cf
   1cab8:	0002aad0 	.word	0x0002aad0
   1cabc:	00000352 	.word	0x00000352
   1cac0:	0002ab38 	.word	0x0002ab38
   1cac4:	0002ab6c 	.word	0x0002ab6c
   1cac8:	0002a820 	.word	0x0002a820
   1cacc:	0002aba4 	.word	0x0002aba4
   1cad0:	0001bdd9 	.word	0x0001bdd9
   1cad4:	0002abc4 	.word	0x0002abc4
   1cad8:	000003e1 	.word	0x000003e1

0001cadc <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
   1cadc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cade:	46de      	mov	lr, fp
   1cae0:	4657      	mov	r7, sl
   1cae2:	464e      	mov	r6, r9
   1cae4:	4645      	mov	r5, r8
   1cae6:	b5e0      	push	{r5, r6, r7, lr}
   1cae8:	b085      	sub	sp, #20
   1caea:	9001      	str	r0, [sp, #4]
   1caec:	000e      	movs	r6, r1
   1caee:	9202      	str	r2, [sp, #8]
   1caf0:	001d      	movs	r5, r3
   1caf2:	ab0e      	add	r3, sp, #56	; 0x38
   1caf4:	881c      	ldrh	r4, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
   1caf6:	2c00      	cmp	r4, #0
   1caf8:	d063      	beq.n	1cbc2 <Socket_ReadSocketData+0xe6>
   1cafa:	0103      	lsls	r3, r0, #4
   1cafc:	4934      	ldr	r1, [pc, #208]	; (1cbd0 <Socket_ReadSocketData+0xf4>)
   1cafe:	585b      	ldr	r3, [r3, r1]
   1cb00:	2b00      	cmp	r3, #0
   1cb02:	d05e      	beq.n	1cbc2 <Socket_ReadSocketData+0xe6>
   1cb04:	0101      	lsls	r1, r0, #4
   1cb06:	4b32      	ldr	r3, [pc, #200]	; (1cbd0 <Socket_ReadSocketData+0xf4>)
   1cb08:	185b      	adds	r3, r3, r1
   1cb0a:	889b      	ldrh	r3, [r3, #4]
   1cb0c:	b29b      	uxth	r3, r3
   1cb0e:	2b00      	cmp	r3, #0
   1cb10:	d057      	beq.n	1cbc2 <Socket_ReadSocketData+0xe6>
   1cb12:	4b2f      	ldr	r3, [pc, #188]	; (1cbd0 <Socket_ReadSocketData+0xf4>)
   1cb14:	185b      	adds	r3, r3, r1
   1cb16:	7a9b      	ldrb	r3, [r3, #10]
   1cb18:	2b01      	cmp	r3, #1
   1cb1a:	d152      	bne.n	1cbc2 <Socket_ReadSocketData+0xe6>
		uint32	u32Address = u32StartAddress;
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
   1cb1c:	80f4      	strh	r4, [r6, #6]
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
   1cb1e:	4b2c      	ldr	r3, [pc, #176]	; (1cbd0 <Socket_ReadSocketData+0xf4>)
   1cb20:	469b      	mov	fp, r3
   1cb22:	448b      	add	fp, r1
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);

				u16ReadCount -= u16Read;
				u32Address += u16Read;

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
   1cb24:	465b      	mov	r3, fp
   1cb26:	220a      	movs	r2, #10
   1cb28:	4690      	mov	r8, r2
   1cb2a:	44d8      	add	r8, fp
   1cb2c:	468a      	mov	sl, r1
   1cb2e:	9500      	str	r5, [sp, #0]
   1cb30:	9303      	str	r3, [sp, #12]
   1cb32:	e014      	b.n	1cb5e <Socket_ReadSocketData+0x82>
   1cb34:	0025      	movs	r5, r4
			u8SetRxDone = 1;
   1cb36:	2301      	movs	r3, #1
   1cb38:	e01b      	b.n	1cb72 <Socket_ReadSocketData+0x96>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   1cb3a:	3301      	adds	r3, #1
   1cb3c:	2200      	movs	r2, #0
   1cb3e:	2100      	movs	r1, #0
   1cb40:	2000      	movs	r0, #0
   1cb42:	4c24      	ldr	r4, [pc, #144]	; (1cbd4 <Socket_ReadSocketData+0xf8>)
   1cb44:	47a0      	blx	r4
   1cb46:	e03c      	b.n	1cbc2 <Socket_ReadSocketData+0xe6>
					break;
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
   1cb48:	4823      	ldr	r0, [pc, #140]	; (1cbd8 <Socket_ReadSocketData+0xfc>)
   1cb4a:	4d24      	ldr	r5, [pc, #144]	; (1cbdc <Socket_ReadSocketData+0x100>)
   1cb4c:	47a8      	blx	r5
   1cb4e:	0021      	movs	r1, r4
   1cb50:	4823      	ldr	r0, [pc, #140]	; (1cbe0 <Socket_ReadSocketData+0x104>)
   1cb52:	47a8      	blx	r5
   1cb54:	4823      	ldr	r0, [pc, #140]	; (1cbe4 <Socket_ReadSocketData+0x108>)
   1cb56:	47a8      	blx	r5
				break;
   1cb58:	e033      	b.n	1cbc2 <Socket_ReadSocketData+0xe6>
			}
		}while(u16ReadCount != 0);
   1cb5a:	2c00      	cmp	r4, #0
   1cb5c:	d031      	beq.n	1cbc2 <Socket_ReadSocketData+0xe6>
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
   1cb5e:	465b      	mov	r3, fp
   1cb60:	889b      	ldrh	r3, [r3, #4]
   1cb62:	1ae3      	subs	r3, r4, r3
			if(s16Diff > 0)
   1cb64:	b21b      	sxth	r3, r3
   1cb66:	2b00      	cmp	r3, #0
   1cb68:	dde4      	ble.n	1cb34 <Socket_ReadSocketData+0x58>
				u16Read		= gastrSockets[sock].u16UserBufferSize;
   1cb6a:	9b03      	ldr	r3, [sp, #12]
   1cb6c:	889d      	ldrh	r5, [r3, #4]
   1cb6e:	b2ad      	uxth	r5, r5
				u8SetRxDone = 0;
   1cb70:	2300      	movs	r3, #0
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
   1cb72:	4a17      	ldr	r2, [pc, #92]	; (1cbd0 <Socket_ReadSocketData+0xf4>)
   1cb74:	4651      	mov	r1, sl
   1cb76:	5889      	ldr	r1, [r1, r2]
   1cb78:	002a      	movs	r2, r5
   1cb7a:	9800      	ldr	r0, [sp, #0]
   1cb7c:	4f15      	ldr	r7, [pc, #84]	; (1cbd4 <Socket_ReadSocketData+0xf8>)
   1cb7e:	47b8      	blx	r7
   1cb80:	2800      	cmp	r0, #0
   1cb82:	d1e1      	bne.n	1cb48 <Socket_ReadSocketData+0x6c>
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
   1cb84:	4b12      	ldr	r3, [pc, #72]	; (1cbd0 <Socket_ReadSocketData+0xf4>)
   1cb86:	4652      	mov	r2, sl
   1cb88:	58d3      	ldr	r3, [r2, r3]
   1cb8a:	6033      	str	r3, [r6, #0]
				pstrRecv->s16BufferSize		= u16Read;
   1cb8c:	80b5      	strh	r5, [r6, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
   1cb8e:	88f3      	ldrh	r3, [r6, #6]
   1cb90:	1b5b      	subs	r3, r3, r5
   1cb92:	80f3      	strh	r3, [r6, #6]
				if (gpfAppSocketCb)
   1cb94:	4b14      	ldr	r3, [pc, #80]	; (1cbe8 <Socket_ReadSocketData+0x10c>)
   1cb96:	681b      	ldr	r3, [r3, #0]
   1cb98:	2b00      	cmp	r3, #0
   1cb9a:	d005      	beq.n	1cba8 <Socket_ReadSocketData+0xcc>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
   1cb9c:	4b12      	ldr	r3, [pc, #72]	; (1cbe8 <Socket_ReadSocketData+0x10c>)
   1cb9e:	681b      	ldr	r3, [r3, #0]
   1cba0:	0032      	movs	r2, r6
   1cba2:	9902      	ldr	r1, [sp, #8]
   1cba4:	9801      	ldr	r0, [sp, #4]
   1cba6:	4798      	blx	r3
				u16ReadCount -= u16Read;
   1cba8:	1b64      	subs	r4, r4, r5
   1cbaa:	b2a4      	uxth	r4, r4
				u32Address += u16Read;
   1cbac:	9b00      	ldr	r3, [sp, #0]
   1cbae:	469c      	mov	ip, r3
   1cbb0:	44ac      	add	ip, r5
   1cbb2:	4663      	mov	r3, ip
   1cbb4:	9300      	str	r3, [sp, #0]
				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
   1cbb6:	4643      	mov	r3, r8
   1cbb8:	781b      	ldrb	r3, [r3, #0]
   1cbba:	2b00      	cmp	r3, #0
   1cbbc:	d1cd      	bne.n	1cb5a <Socket_ReadSocketData+0x7e>
   1cbbe:	2c00      	cmp	r4, #0
   1cbc0:	d1bb      	bne.n	1cb3a <Socket_ReadSocketData+0x5e>
	}
}
   1cbc2:	b005      	add	sp, #20
   1cbc4:	bc3c      	pop	{r2, r3, r4, r5}
   1cbc6:	4690      	mov	r8, r2
   1cbc8:	4699      	mov	r9, r3
   1cbca:	46a2      	mov	sl, r4
   1cbcc:	46ab      	mov	fp, r5
   1cbce:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1cbd0:	20005404 	.word	0x20005404
   1cbd4:	0001ac4d 	.word	0x0001ac4d
   1cbd8:	0002a438 	.word	0x0002a438
   1cbdc:	0001913d 	.word	0x0001913d
   1cbe0:	0002aed8 	.word	0x0002aed8
   1cbe4:	0002a124 	.word	0x0002a124
   1cbe8:	200054b4 	.word	0x200054b4

0001cbec <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
   1cbec:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cbee:	46d6      	mov	lr, sl
   1cbf0:	464f      	mov	r7, r9
   1cbf2:	4646      	mov	r6, r8
   1cbf4:	b5c0      	push	{r6, r7, lr}
   1cbf6:	b09a      	sub	sp, #104	; 0x68
   1cbf8:	000d      	movs	r5, r1
   1cbfa:	0014      	movs	r4, r2
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
   1cbfc:	2841      	cmp	r0, #65	; 0x41
   1cbfe:	d039      	beq.n	1cc74 <m2m_ip_cb+0x88>
   1cc00:	2854      	cmp	r0, #84	; 0x54
   1cc02:	d037      	beq.n	1cc74 <m2m_ip_cb+0x88>
			strBind.status = strBindReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
   1cc04:	2842      	cmp	r0, #66	; 0x42
   1cc06:	d053      	beq.n	1ccb0 <m2m_ip_cb+0xc4>
			strListen.status = strListenReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
   1cc08:	2843      	cmp	r0, #67	; 0x43
   1cc0a:	d06a      	beq.n	1cce2 <m2m_ip_cb+0xf6>
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
   1cc0c:	2844      	cmp	r0, #68	; 0x44
   1cc0e:	d100      	bne.n	1cc12 <m2m_ip_cb+0x26>
   1cc10:	e0af      	b.n	1cd72 <m2m_ip_cb+0x186>
   1cc12:	284b      	cmp	r0, #75	; 0x4b
   1cc14:	d100      	bne.n	1cc18 <m2m_ip_cb+0x2c>
   1cc16:	e0ac      	b.n	1cd72 <m2m_ip_cb+0x186>
			}
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
   1cc18:	284a      	cmp	r0, #74	; 0x4a
   1cc1a:	d100      	bne.n	1cc1e <m2m_ip_cb+0x32>
   1cc1c:	e0cf      	b.n	1cdbe <m2m_ip_cb+0x1d2>
		{
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
   1cc1e:	2846      	cmp	r0, #70	; 0x46
   1cc20:	d100      	bne.n	1cc24 <m2m_ip_cb+0x38>
   1cc22:	e0e5      	b.n	1cdf0 <m2m_ip_cb+0x204>
   1cc24:	2848      	cmp	r0, #72	; 0x48
   1cc26:	d100      	bne.n	1cc2a <m2m_ip_cb+0x3e>
   1cc28:	e10e      	b.n	1ce48 <m2m_ip_cb+0x25c>
   1cc2a:	284d      	cmp	r0, #77	; 0x4d
   1cc2c:	d100      	bne.n	1cc30 <m2m_ip_cb+0x44>
   1cc2e:	e0dc      	b.n	1cdea <m2m_ip_cb+0x1fe>
						M2M_DBG("hif_receive Fail\n");
				}
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
   1cc30:	2845      	cmp	r0, #69	; 0x45
   1cc32:	d100      	bne.n	1cc36 <m2m_ip_cb+0x4a>
   1cc34:	e12c      	b.n	1ce90 <m2m_ip_cb+0x2a4>
   1cc36:	2847      	cmp	r0, #71	; 0x47
   1cc38:	d100      	bne.n	1cc3c <m2m_ip_cb+0x50>
   1cc3a:	e14d      	b.n	1ced8 <m2m_ip_cb+0x2ec>
	{
		SOCKET			sock;
		sint16			s16Rcvd;
		tstrSendReply	strReply;
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
   1cc3c:	2507      	movs	r5, #7
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
   1cc3e:	284c      	cmp	r0, #76	; 0x4c
   1cc40:	d100      	bne.n	1cc44 <m2m_ip_cb+0x58>
   1cc42:	e126      	b.n	1ce92 <m2m_ip_cb+0x2a6>
			{
				M2M_DBG("Discard send callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
			}
		}
	}
	else if(u8OpCode == SOCKET_CMD_PING)
   1cc44:	2852      	cmp	r0, #82	; 0x52
   1cc46:	d12d      	bne.n	1cca4 <m2m_ip_cb+0xb8>
	{
		tstrPingReply	strPingReply;
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
   1cc48:	2301      	movs	r3, #1
   1cc4a:	2214      	movs	r2, #20
   1cc4c:	a909      	add	r1, sp, #36	; 0x24
   1cc4e:	0020      	movs	r0, r4
   1cc50:	4ca2      	ldr	r4, [pc, #648]	; (1cedc <m2m_ip_cb+0x2f0>)
   1cc52:	47a0      	blx	r4
   1cc54:	2800      	cmp	r0, #0
   1cc56:	d125      	bne.n	1cca4 <m2m_ip_cb+0xb8>
		{
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
   1cc58:	4ba1      	ldr	r3, [pc, #644]	; (1cee0 <m2m_ip_cb+0x2f4>)
   1cc5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1cc5c:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
   1cc5e:	681b      	ldr	r3, [r3, #0]
   1cc60:	2b00      	cmp	r3, #0
   1cc62:	d01f      	beq.n	1cca4 <m2m_ip_cb+0xb8>
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
   1cc64:	4b9e      	ldr	r3, [pc, #632]	; (1cee0 <m2m_ip_cb+0x2f4>)
   1cc66:	681c      	ldr	r4, [r3, #0]
   1cc68:	ab09      	add	r3, sp, #36	; 0x24
   1cc6a:	7c1a      	ldrb	r2, [r3, #16]
   1cc6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1cc6e:	9809      	ldr	r0, [sp, #36]	; 0x24
   1cc70:	47a0      	blx	r4
			}
		}
	}
}
   1cc72:	e017      	b.n	1cca4 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
   1cc74:	2300      	movs	r3, #0
   1cc76:	2204      	movs	r2, #4
   1cc78:	a909      	add	r1, sp, #36	; 0x24
   1cc7a:	0020      	movs	r0, r4
   1cc7c:	4c97      	ldr	r4, [pc, #604]	; (1cedc <m2m_ip_cb+0x2f0>)
   1cc7e:	47a0      	blx	r4
   1cc80:	2800      	cmp	r0, #0
   1cc82:	d10f      	bne.n	1cca4 <m2m_ip_cb+0xb8>
			strBind.status = strBindReply.s8Status;
   1cc84:	ab09      	add	r3, sp, #36	; 0x24
   1cc86:	785a      	ldrb	r2, [r3, #1]
   1cc88:	ab05      	add	r3, sp, #20
   1cc8a:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   1cc8c:	4b95      	ldr	r3, [pc, #596]	; (1cee4 <m2m_ip_cb+0x2f8>)
   1cc8e:	681b      	ldr	r3, [r3, #0]
   1cc90:	2b00      	cmp	r3, #0
   1cc92:	d007      	beq.n	1cca4 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
   1cc94:	4b93      	ldr	r3, [pc, #588]	; (1cee4 <m2m_ip_cb+0x2f8>)
   1cc96:	681b      	ldr	r3, [r3, #0]
   1cc98:	aa09      	add	r2, sp, #36	; 0x24
   1cc9a:	2000      	movs	r0, #0
   1cc9c:	5610      	ldrsb	r0, [r2, r0]
   1cc9e:	aa05      	add	r2, sp, #20
   1cca0:	2101      	movs	r1, #1
   1cca2:	4798      	blx	r3
}
   1cca4:	b01a      	add	sp, #104	; 0x68
   1cca6:	bc1c      	pop	{r2, r3, r4}
   1cca8:	4690      	mov	r8, r2
   1ccaa:	4699      	mov	r9, r3
   1ccac:	46a2      	mov	sl, r4
   1ccae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
   1ccb0:	2300      	movs	r3, #0
   1ccb2:	2204      	movs	r2, #4
   1ccb4:	a909      	add	r1, sp, #36	; 0x24
   1ccb6:	0020      	movs	r0, r4
   1ccb8:	4c88      	ldr	r4, [pc, #544]	; (1cedc <m2m_ip_cb+0x2f0>)
   1ccba:	47a0      	blx	r4
   1ccbc:	2800      	cmp	r0, #0
   1ccbe:	d1f1      	bne.n	1cca4 <m2m_ip_cb+0xb8>
			strListen.status = strListenReply.s8Status;
   1ccc0:	ab09      	add	r3, sp, #36	; 0x24
   1ccc2:	785a      	ldrb	r2, [r3, #1]
   1ccc4:	ab05      	add	r3, sp, #20
   1ccc6:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   1ccc8:	4b86      	ldr	r3, [pc, #536]	; (1cee4 <m2m_ip_cb+0x2f8>)
   1ccca:	681b      	ldr	r3, [r3, #0]
   1cccc:	2b00      	cmp	r3, #0
   1ccce:	d0e9      	beq.n	1cca4 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
   1ccd0:	4b84      	ldr	r3, [pc, #528]	; (1cee4 <m2m_ip_cb+0x2f8>)
   1ccd2:	681b      	ldr	r3, [r3, #0]
   1ccd4:	aa09      	add	r2, sp, #36	; 0x24
   1ccd6:	2000      	movs	r0, #0
   1ccd8:	5610      	ldrsb	r0, [r2, r0]
   1ccda:	aa05      	add	r2, sp, #20
   1ccdc:	2102      	movs	r1, #2
   1ccde:	4798      	blx	r3
   1cce0:	e7e0      	b.n	1cca4 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
   1cce2:	2300      	movs	r3, #0
   1cce4:	220c      	movs	r2, #12
   1cce6:	a905      	add	r1, sp, #20
   1cce8:	0020      	movs	r0, r4
   1ccea:	4c7c      	ldr	r4, [pc, #496]	; (1cedc <m2m_ip_cb+0x2f0>)
   1ccec:	47a0      	blx	r4
   1ccee:	2800      	cmp	r0, #0
   1ccf0:	d1d8      	bne.n	1cca4 <m2m_ip_cb+0xb8>
			if(strAcceptReply.sConnectedSock >= 0)
   1ccf2:	ab05      	add	r3, sp, #20
   1ccf4:	2209      	movs	r2, #9
   1ccf6:	569a      	ldrsb	r2, [r3, r2]
   1ccf8:	2a00      	cmp	r2, #0
   1ccfa:	db24      	blt.n	1cd46 <m2m_ip_cb+0x15a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
   1ccfc:	0018      	movs	r0, r3
   1ccfe:	2108      	movs	r1, #8
   1cd00:	5659      	ldrsb	r1, [r3, r1]
   1cd02:	4b79      	ldr	r3, [pc, #484]	; (1cee8 <m2m_ip_cb+0x2fc>)
   1cd04:	0109      	lsls	r1, r1, #4
   1cd06:	1859      	adds	r1, r3, r1
   1cd08:	7ac9      	ldrb	r1, [r1, #11]
   1cd0a:	b2c9      	uxtb	r1, r1
   1cd0c:	0114      	lsls	r4, r2, #4
   1cd0e:	191b      	adds	r3, r3, r4
   1cd10:	72d9      	strb	r1, [r3, #11]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
   1cd12:	2101      	movs	r1, #1
   1cd14:	7299      	strb	r1, [r3, #10]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   1cd16:	8941      	ldrh	r1, [r0, #10]
   1cd18:	3908      	subs	r1, #8
   1cd1a:	b289      	uxth	r1, r1
   1cd1c:	8119      	strh	r1, [r3, #8]
				++gu16SessionID;
   1cd1e:	4973      	ldr	r1, [pc, #460]	; (1ceec <m2m_ip_cb+0x300>)
   1cd20:	880b      	ldrh	r3, [r1, #0]
   1cd22:	3301      	adds	r3, #1
   1cd24:	b29b      	uxth	r3, r3
   1cd26:	800b      	strh	r3, [r1, #0]
				if(gu16SessionID == 0)
   1cd28:	880b      	ldrh	r3, [r1, #0]
   1cd2a:	b29b      	uxth	r3, r3
   1cd2c:	2b00      	cmp	r3, #0
   1cd2e:	d103      	bne.n	1cd38 <m2m_ip_cb+0x14c>
					++gu16SessionID;
   1cd30:	880b      	ldrh	r3, [r1, #0]
   1cd32:	3301      	adds	r3, #1
   1cd34:	b29b      	uxth	r3, r3
   1cd36:	800b      	strh	r3, [r1, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
   1cd38:	4b6c      	ldr	r3, [pc, #432]	; (1ceec <m2m_ip_cb+0x300>)
   1cd3a:	8819      	ldrh	r1, [r3, #0]
   1cd3c:	b289      	uxth	r1, r1
   1cd3e:	0110      	lsls	r0, r2, #4
   1cd40:	4b69      	ldr	r3, [pc, #420]	; (1cee8 <m2m_ip_cb+0x2fc>)
   1cd42:	181b      	adds	r3, r3, r0
   1cd44:	80d9      	strh	r1, [r3, #6]
			strAccept.sock = strAcceptReply.sConnectedSock;
   1cd46:	ab09      	add	r3, sp, #36	; 0x24
   1cd48:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
   1cd4a:	2202      	movs	r2, #2
   1cd4c:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
   1cd4e:	aa05      	add	r2, sp, #20
   1cd50:	8851      	ldrh	r1, [r2, #2]
   1cd52:	80d9      	strh	r1, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
   1cd54:	9a06      	ldr	r2, [sp, #24]
   1cd56:	920b      	str	r2, [sp, #44]	; 0x2c
			if(gpfAppSocketCb)
   1cd58:	4b62      	ldr	r3, [pc, #392]	; (1cee4 <m2m_ip_cb+0x2f8>)
   1cd5a:	681b      	ldr	r3, [r3, #0]
   1cd5c:	2b00      	cmp	r3, #0
   1cd5e:	d0a1      	beq.n	1cca4 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
   1cd60:	4b60      	ldr	r3, [pc, #384]	; (1cee4 <m2m_ip_cb+0x2f8>)
   1cd62:	681b      	ldr	r3, [r3, #0]
   1cd64:	aa05      	add	r2, sp, #20
   1cd66:	2008      	movs	r0, #8
   1cd68:	5610      	ldrsb	r0, [r2, r0]
   1cd6a:	aa09      	add	r2, sp, #36	; 0x24
   1cd6c:	2104      	movs	r1, #4
   1cd6e:	4798      	blx	r3
   1cd70:	e798      	b.n	1cca4 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
   1cd72:	2300      	movs	r3, #0
   1cd74:	2204      	movs	r2, #4
   1cd76:	a909      	add	r1, sp, #36	; 0x24
   1cd78:	0020      	movs	r0, r4
   1cd7a:	4c58      	ldr	r4, [pc, #352]	; (1cedc <m2m_ip_cb+0x2f0>)
   1cd7c:	47a0      	blx	r4
   1cd7e:	2800      	cmp	r0, #0
   1cd80:	d000      	beq.n	1cd84 <m2m_ip_cb+0x198>
   1cd82:	e78f      	b.n	1cca4 <m2m_ip_cb+0xb8>
			strConnMsg.sock		= strConnectReply.sock;
   1cd84:	ab09      	add	r3, sp, #36	; 0x24
   1cd86:	2000      	movs	r0, #0
   1cd88:	5618      	ldrsb	r0, [r3, r0]
   1cd8a:	aa05      	add	r2, sp, #20
   1cd8c:	7010      	strb	r0, [r2, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
   1cd8e:	785b      	ldrb	r3, [r3, #1]
   1cd90:	b25b      	sxtb	r3, r3
   1cd92:	7053      	strb	r3, [r2, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
   1cd94:	2b00      	cmp	r3, #0
   1cd96:	d107      	bne.n	1cda8 <m2m_ip_cb+0x1bc>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   1cd98:	ab09      	add	r3, sp, #36	; 0x24
   1cd9a:	885b      	ldrh	r3, [r3, #2]
   1cd9c:	3b08      	subs	r3, #8
   1cd9e:	b29b      	uxth	r3, r3
   1cda0:	0101      	lsls	r1, r0, #4
   1cda2:	4a51      	ldr	r2, [pc, #324]	; (1cee8 <m2m_ip_cb+0x2fc>)
   1cda4:	1852      	adds	r2, r2, r1
   1cda6:	8113      	strh	r3, [r2, #8]
			if(gpfAppSocketCb)
   1cda8:	4b4e      	ldr	r3, [pc, #312]	; (1cee4 <m2m_ip_cb+0x2f8>)
   1cdaa:	681b      	ldr	r3, [r3, #0]
   1cdac:	2b00      	cmp	r3, #0
   1cdae:	d100      	bne.n	1cdb2 <m2m_ip_cb+0x1c6>
   1cdb0:	e778      	b.n	1cca4 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
   1cdb2:	4b4c      	ldr	r3, [pc, #304]	; (1cee4 <m2m_ip_cb+0x2f8>)
   1cdb4:	681b      	ldr	r3, [r3, #0]
   1cdb6:	aa05      	add	r2, sp, #20
   1cdb8:	2105      	movs	r1, #5
   1cdba:	4798      	blx	r3
	{
   1cdbc:	e772      	b.n	1cca4 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
   1cdbe:	2300      	movs	r3, #0
   1cdc0:	2244      	movs	r2, #68	; 0x44
   1cdc2:	a909      	add	r1, sp, #36	; 0x24
   1cdc4:	0020      	movs	r0, r4
   1cdc6:	4c45      	ldr	r4, [pc, #276]	; (1cedc <m2m_ip_cb+0x2f0>)
   1cdc8:	47a0      	blx	r4
   1cdca:	2800      	cmp	r0, #0
   1cdcc:	d000      	beq.n	1cdd0 <m2m_ip_cb+0x1e4>
   1cdce:	e769      	b.n	1cca4 <m2m_ip_cb+0xb8>
			if(gpfAppResolveCb)
   1cdd0:	4b47      	ldr	r3, [pc, #284]	; (1cef0 <m2m_ip_cb+0x304>)
   1cdd2:	681b      	ldr	r3, [r3, #0]
   1cdd4:	2b00      	cmp	r3, #0
   1cdd6:	d100      	bne.n	1cdda <m2m_ip_cb+0x1ee>
   1cdd8:	e764      	b.n	1cca4 <m2m_ip_cb+0xb8>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
   1cdda:	4b45      	ldr	r3, [pc, #276]	; (1cef0 <m2m_ip_cb+0x304>)
   1cddc:	681b      	ldr	r3, [r3, #0]
   1cdde:	9a19      	ldr	r2, [sp, #100]	; 0x64
   1cde0:	9203      	str	r2, [sp, #12]
   1cde2:	0011      	movs	r1, r2
   1cde4:	a809      	add	r0, sp, #36	; 0x24
   1cde6:	4798      	blx	r3
   1cde8:	e75c      	b.n	1cca4 <m2m_ip_cb+0xb8>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
   1cdea:	2306      	movs	r3, #6
   1cdec:	469a      	mov	sl, r3
   1cdee:	e001      	b.n	1cdf4 <m2m_ip_cb+0x208>
   1cdf0:	2306      	movs	r3, #6
   1cdf2:	469a      	mov	sl, r3
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
   1cdf4:	2300      	movs	r3, #0
   1cdf6:	2210      	movs	r2, #16
   1cdf8:	a905      	add	r1, sp, #20
   1cdfa:	0020      	movs	r0, r4
   1cdfc:	4f37      	ldr	r7, [pc, #220]	; (1cedc <m2m_ip_cb+0x2f0>)
   1cdfe:	47b8      	blx	r7
   1ce00:	2800      	cmp	r0, #0
   1ce02:	d000      	beq.n	1ce06 <m2m_ip_cb+0x21a>
   1ce04:	e74e      	b.n	1cca4 <m2m_ip_cb+0xb8>
			sock			= strRecvReply.sock;
   1ce06:	aa05      	add	r2, sp, #20
   1ce08:	200c      	movs	r0, #12
   1ce0a:	5610      	ldrsb	r0, [r2, r0]
			u16SessionID = strRecvReply.u16SessionID;
   1ce0c:	89d3      	ldrh	r3, [r2, #14]
			gastrSockets[sock].bIsRecvPending = 0;
   1ce0e:	0107      	lsls	r7, r0, #4
   1ce10:	4935      	ldr	r1, [pc, #212]	; (1cee8 <m2m_ip_cb+0x2fc>)
   1ce12:	19c9      	adds	r1, r1, r7
   1ce14:	2700      	movs	r7, #0
   1ce16:	730f      	strb	r7, [r1, #12]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
   1ce18:	2608      	movs	r6, #8
   1ce1a:	5f97      	ldrsh	r7, [r2, r6]
   1ce1c:	46b8      	mov	r8, r7
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
   1ce1e:	8957      	ldrh	r7, [r2, #10]
   1ce20:	46b9      	mov	r9, r7
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
   1ce22:	af09      	add	r7, sp, #36	; 0x24
   1ce24:	8856      	ldrh	r6, [r2, #2]
   1ce26:	817e      	strh	r6, [r7, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
   1ce28:	9a06      	ldr	r2, [sp, #24]
   1ce2a:	920c      	str	r2, [sp, #48]	; 0x30
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   1ce2c:	88ca      	ldrh	r2, [r1, #6]
   1ce2e:	b292      	uxth	r2, r2
   1ce30:	4293      	cmp	r3, r2
   1ce32:	d00c      	beq.n	1ce4e <m2m_ip_cb+0x262>
				if(u16ReadSize < u16BufferSize)
   1ce34:	2d10      	cmp	r5, #16
   1ce36:	d800      	bhi.n	1ce3a <m2m_ip_cb+0x24e>
   1ce38:	e734      	b.n	1cca4 <m2m_ip_cb+0xb8>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   1ce3a:	2301      	movs	r3, #1
   1ce3c:	2200      	movs	r2, #0
   1ce3e:	2100      	movs	r1, #0
   1ce40:	2000      	movs	r0, #0
   1ce42:	4c26      	ldr	r4, [pc, #152]	; (1cedc <m2m_ip_cb+0x2f0>)
   1ce44:	47a0      	blx	r4
	{
   1ce46:	e72d      	b.n	1cca4 <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
   1ce48:	2309      	movs	r3, #9
   1ce4a:	469a      	mov	sl, r3
   1ce4c:	e7d2      	b.n	1cdf4 <m2m_ip_cb+0x208>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
   1ce4e:	4643      	mov	r3, r8
   1ce50:	2b00      	cmp	r3, #0
   1ce52:	dd01      	ble.n	1ce58 <m2m_ip_cb+0x26c>
   1ce54:	45a8      	cmp	r8, r5
   1ce56:	db0f      	blt.n	1ce78 <m2m_ip_cb+0x28c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
   1ce58:	ab09      	add	r3, sp, #36	; 0x24
   1ce5a:	4642      	mov	r2, r8
   1ce5c:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
   1ce5e:	2300      	movs	r3, #0
   1ce60:	9309      	str	r3, [sp, #36]	; 0x24
					if(gpfAppSocketCb)
   1ce62:	4b20      	ldr	r3, [pc, #128]	; (1cee4 <m2m_ip_cb+0x2f8>)
   1ce64:	681b      	ldr	r3, [r3, #0]
   1ce66:	2b00      	cmp	r3, #0
   1ce68:	d100      	bne.n	1ce6c <m2m_ip_cb+0x280>
   1ce6a:	e71b      	b.n	1cca4 <m2m_ip_cb+0xb8>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
   1ce6c:	4b1d      	ldr	r3, [pc, #116]	; (1cee4 <m2m_ip_cb+0x2f8>)
   1ce6e:	681b      	ldr	r3, [r3, #0]
   1ce70:	aa09      	add	r2, sp, #36	; 0x24
   1ce72:	4651      	mov	r1, sl
   1ce74:	4798      	blx	r3
   1ce76:	e715      	b.n	1cca4 <m2m_ip_cb+0xb8>
					u32Address += u16DataOffset;
   1ce78:	0023      	movs	r3, r4
   1ce7a:	444b      	add	r3, r9
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
   1ce7c:	4642      	mov	r2, r8
   1ce7e:	4669      	mov	r1, sp
   1ce80:	818a      	strh	r2, [r1, #12]
   1ce82:	898a      	ldrh	r2, [r1, #12]
   1ce84:	9200      	str	r2, [sp, #0]
   1ce86:	4652      	mov	r2, sl
   1ce88:	0039      	movs	r1, r7
   1ce8a:	4c1a      	ldr	r4, [pc, #104]	; (1cef4 <m2m_ip_cb+0x308>)
   1ce8c:	47a0      	blx	r4
   1ce8e:	e709      	b.n	1cca4 <m2m_ip_cb+0xb8>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
   1ce90:	2507      	movs	r5, #7
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
   1ce92:	2300      	movs	r3, #0
   1ce94:	2208      	movs	r2, #8
   1ce96:	a909      	add	r1, sp, #36	; 0x24
   1ce98:	0020      	movs	r0, r4
   1ce9a:	4c10      	ldr	r4, [pc, #64]	; (1cedc <m2m_ip_cb+0x2f0>)
   1ce9c:	47a0      	blx	r4
   1ce9e:	2800      	cmp	r0, #0
   1cea0:	d000      	beq.n	1cea4 <m2m_ip_cb+0x2b8>
   1cea2:	e6ff      	b.n	1cca4 <m2m_ip_cb+0xb8>
			sock = strReply.sock;
   1cea4:	ab09      	add	r3, sp, #36	; 0x24
   1cea6:	2000      	movs	r0, #0
   1cea8:	5618      	ldrsb	r0, [r3, r0]
			u16SessionID = strReply.u16SessionID;
   1ceaa:	889a      	ldrh	r2, [r3, #4]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
   1ceac:	8859      	ldrh	r1, [r3, #2]
   1ceae:	ab05      	add	r3, sp, #20
   1ceb0:	8019      	strh	r1, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   1ceb2:	0101      	lsls	r1, r0, #4
   1ceb4:	4b0c      	ldr	r3, [pc, #48]	; (1cee8 <m2m_ip_cb+0x2fc>)
   1ceb6:	185b      	adds	r3, r3, r1
   1ceb8:	88db      	ldrh	r3, [r3, #6]
   1ceba:	b29b      	uxth	r3, r3
   1cebc:	429a      	cmp	r2, r3
   1cebe:	d000      	beq.n	1cec2 <m2m_ip_cb+0x2d6>
   1cec0:	e6f0      	b.n	1cca4 <m2m_ip_cb+0xb8>
				if(gpfAppSocketCb)
   1cec2:	4b08      	ldr	r3, [pc, #32]	; (1cee4 <m2m_ip_cb+0x2f8>)
   1cec4:	681b      	ldr	r3, [r3, #0]
   1cec6:	2b00      	cmp	r3, #0
   1cec8:	d100      	bne.n	1cecc <m2m_ip_cb+0x2e0>
   1ceca:	e6eb      	b.n	1cca4 <m2m_ip_cb+0xb8>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
   1cecc:	4b05      	ldr	r3, [pc, #20]	; (1cee4 <m2m_ip_cb+0x2f8>)
   1cece:	681b      	ldr	r3, [r3, #0]
   1ced0:	aa05      	add	r2, sp, #20
   1ced2:	0029      	movs	r1, r5
   1ced4:	4798      	blx	r3
	{
   1ced6:	e6e5      	b.n	1cca4 <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
   1ced8:	2508      	movs	r5, #8
   1ceda:	e7da      	b.n	1ce92 <m2m_ip_cb+0x2a6>
   1cedc:	0001ac4d 	.word	0x0001ac4d
   1cee0:	200054b8 	.word	0x200054b8
   1cee4:	200054b4 	.word	0x200054b4
   1cee8:	20005404 	.word	0x20005404
   1ceec:	20003cb6 	.word	0x20003cb6
   1cef0:	200054bc 	.word	0x200054bc
   1cef4:	0001cadd 	.word	0x0001cadd

0001cef8 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
   1cef8:	b510      	push	{r4, lr}
	if(gbSocketInit == 0)
   1cefa:	4b0a      	ldr	r3, [pc, #40]	; (1cf24 <socketInit+0x2c>)
   1cefc:	781b      	ldrb	r3, [r3, #0]
   1cefe:	2b00      	cmp	r3, #0
   1cf00:	d000      	beq.n	1cf04 <socketInit+0xc>
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
		gbSocketInit	= 1;
		gu16SessionID	= 0;
	}
}
   1cf02:	bd10      	pop	{r4, pc}
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   1cf04:	22b0      	movs	r2, #176	; 0xb0
   1cf06:	2100      	movs	r1, #0
   1cf08:	4807      	ldr	r0, [pc, #28]	; (1cf28 <socketInit+0x30>)
   1cf0a:	4b08      	ldr	r3, [pc, #32]	; (1cf2c <socketInit+0x34>)
   1cf0c:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
   1cf0e:	4908      	ldr	r1, [pc, #32]	; (1cf30 <socketInit+0x38>)
   1cf10:	2002      	movs	r0, #2
   1cf12:	4b08      	ldr	r3, [pc, #32]	; (1cf34 <socketInit+0x3c>)
   1cf14:	4798      	blx	r3
		gbSocketInit	= 1;
   1cf16:	2201      	movs	r2, #1
   1cf18:	4b02      	ldr	r3, [pc, #8]	; (1cf24 <socketInit+0x2c>)
   1cf1a:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
   1cf1c:	2200      	movs	r2, #0
   1cf1e:	4b06      	ldr	r3, [pc, #24]	; (1cf38 <socketInit+0x40>)
   1cf20:	801a      	strh	r2, [r3, #0]
}
   1cf22:	e7ee      	b.n	1cf02 <socketInit+0xa>
   1cf24:	20003cb5 	.word	0x20003cb5
   1cf28:	20005404 	.word	0x20005404
   1cf2c:	0001a55d 	.word	0x0001a55d
   1cf30:	0001cbed 	.word	0x0001cbed
   1cf34:	0001ad25 	.word	0x0001ad25
   1cf38:	20003cb6 	.word	0x20003cb6

0001cf3c <socketDeinit>:

Date
		27 Feb 2015
*********************************************************************/
void socketDeinit(void)
{	
   1cf3c:	b510      	push	{r4, lr}
	m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   1cf3e:	22b0      	movs	r2, #176	; 0xb0
   1cf40:	2100      	movs	r1, #0
   1cf42:	4807      	ldr	r0, [pc, #28]	; (1cf60 <socketDeinit+0x24>)
   1cf44:	4b07      	ldr	r3, [pc, #28]	; (1cf64 <socketDeinit+0x28>)
   1cf46:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_IP, NULL);
   1cf48:	2100      	movs	r1, #0
   1cf4a:	2002      	movs	r0, #2
   1cf4c:	4b06      	ldr	r3, [pc, #24]	; (1cf68 <socketDeinit+0x2c>)
   1cf4e:	4798      	blx	r3
	gpfAppSocketCb	= NULL;
   1cf50:	2300      	movs	r3, #0
   1cf52:	4a06      	ldr	r2, [pc, #24]	; (1cf6c <socketDeinit+0x30>)
   1cf54:	6013      	str	r3, [r2, #0]
	gpfAppResolveCb	= NULL;
   1cf56:	4a06      	ldr	r2, [pc, #24]	; (1cf70 <socketDeinit+0x34>)
   1cf58:	6013      	str	r3, [r2, #0]
	gbSocketInit	= 0;
   1cf5a:	4a06      	ldr	r2, [pc, #24]	; (1cf74 <socketDeinit+0x38>)
   1cf5c:	7013      	strb	r3, [r2, #0]
}
   1cf5e:	bd10      	pop	{r4, pc}
   1cf60:	20005404 	.word	0x20005404
   1cf64:	0001a55d 	.word	0x0001a55d
   1cf68:	0001ad25 	.word	0x0001ad25
   1cf6c:	200054b4 	.word	0x200054b4
   1cf70:	200054bc 	.word	0x200054bc
   1cf74:	20003cb5 	.word	0x20003cb5

0001cf78 <registerSocketCallback>:
Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
	gpfAppSocketCb = pfAppSocketCb;
   1cf78:	4b02      	ldr	r3, [pc, #8]	; (1cf84 <registerSocketCallback+0xc>)
   1cf7a:	6018      	str	r0, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
   1cf7c:	4b02      	ldr	r3, [pc, #8]	; (1cf88 <registerSocketCallback+0x10>)
   1cf7e:	6019      	str	r1, [r3, #0]
}
   1cf80:	4770      	bx	lr
   1cf82:	46c0      	nop			; (mov r8, r8)
   1cf84:	200054b4 	.word	0x200054b4
   1cf88:	200054bc 	.word	0x200054bc

0001cf8c <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
   1cf8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cf8e:	46d6      	mov	lr, sl
   1cf90:	4647      	mov	r7, r8
   1cf92:	b580      	push	{r7, lr}
   1cf94:	b089      	sub	sp, #36	; 0x24
   1cf96:	9205      	str	r2, [sp, #20]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
   1cf98:	2802      	cmp	r0, #2
   1cf9a:	d000      	beq.n	1cf9e <socket+0x12>
   1cf9c:	e09b      	b.n	1d0d6 <socket+0x14a>
	{
		if(u8Type == SOCK_STREAM)
   1cf9e:	2901      	cmp	r1, #1
   1cfa0:	d00a      	beq.n	1cfb8 <socket+0x2c>
					sock = (SOCKET)u8SockID;
					break;
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
   1cfa2:	2902      	cmp	r1, #2
   1cfa4:	d100      	bne.n	1cfa8 <socket+0x1c>
   1cfa6:	e06f      	b.n	1d088 <socket+0xfc>
	SOCKET					sock = -1;
   1cfa8:	2501      	movs	r5, #1
   1cfaa:	426d      	negs	r5, r5
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
			}
		}
	}
	return sock;
}
   1cfac:	0028      	movs	r0, r5
   1cfae:	b009      	add	sp, #36	; 0x24
   1cfb0:	bc0c      	pop	{r2, r3}
   1cfb2:	4690      	mov	r8, r2
   1cfb4:	469a      	mov	sl, r3
   1cfb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
				u8SockID	= u8NextTcpSock;
   1cfb8:	4c48      	ldr	r4, [pc, #288]	; (1d0dc <socket+0x150>)
   1cfba:	7827      	ldrb	r7, [r4, #0]
   1cfbc:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
   1cfbe:	7826      	ldrb	r6, [r4, #0]
   1cfc0:	b2f6      	uxtb	r6, r6
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
   1cfc2:	7820      	ldrb	r0, [r4, #0]
   1cfc4:	3001      	adds	r0, #1
   1cfc6:	3106      	adds	r1, #6
   1cfc8:	4b45      	ldr	r3, [pc, #276]	; (1d0e0 <socket+0x154>)
   1cfca:	4798      	blx	r3
   1cfcc:	b2c9      	uxtb	r1, r1
   1cfce:	7021      	strb	r1, [r4, #0]
				if(!pstrSock->bIsUsed)
   1cfd0:	0132      	lsls	r2, r6, #4
   1cfd2:	4b44      	ldr	r3, [pc, #272]	; (1d0e4 <socket+0x158>)
   1cfd4:	189b      	adds	r3, r3, r2
   1cfd6:	7a9b      	ldrb	r3, [r3, #10]
   1cfd8:	2506      	movs	r5, #6
   1cfda:	2b00      	cmp	r3, #0
   1cfdc:	d018      	beq.n	1d010 <socket+0x84>
				u8SockID	= u8NextTcpSock;
   1cfde:	4e3f      	ldr	r6, [pc, #252]	; (1d0dc <socket+0x150>)
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
   1cfe0:	4b3f      	ldr	r3, [pc, #252]	; (1d0e0 <socket+0x154>)
   1cfe2:	469a      	mov	sl, r3
				if(!pstrSock->bIsUsed)
   1cfe4:	4b3f      	ldr	r3, [pc, #252]	; (1d0e4 <socket+0x158>)
   1cfe6:	4698      	mov	r8, r3
				u8SockID	= u8NextTcpSock;
   1cfe8:	7837      	ldrb	r7, [r6, #0]
   1cfea:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
   1cfec:	7834      	ldrb	r4, [r6, #0]
   1cfee:	b2e4      	uxtb	r4, r4
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
   1cff0:	7830      	ldrb	r0, [r6, #0]
   1cff2:	3001      	adds	r0, #1
   1cff4:	2107      	movs	r1, #7
   1cff6:	47d0      	blx	sl
   1cff8:	b2c9      	uxtb	r1, r1
   1cffa:	7031      	strb	r1, [r6, #0]
				if(!pstrSock->bIsUsed)
   1cffc:	0123      	lsls	r3, r4, #4
   1cffe:	4443      	add	r3, r8
   1d000:	7a9b      	ldrb	r3, [r3, #10]
   1d002:	2b00      	cmp	r3, #0
   1d004:	d007      	beq.n	1d016 <socket+0x8a>
   1d006:	3d01      	subs	r5, #1
   1d008:	b2ed      	uxtb	r5, r5
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   1d00a:	2d00      	cmp	r5, #0
   1d00c:	d1ec      	bne.n	1cfe8 <socket+0x5c>
   1d00e:	e7cb      	b.n	1cfa8 <socket+0x1c>
				pstrSock	= &gastrSockets[u8NextTcpSock];
   1d010:	4b34      	ldr	r3, [pc, #208]	; (1d0e4 <socket+0x158>)
   1d012:	18d4      	adds	r4, r2, r3
   1d014:	e002      	b.n	1d01c <socket+0x90>
   1d016:	0124      	lsls	r4, r4, #4
   1d018:	4b32      	ldr	r3, [pc, #200]	; (1d0e4 <socket+0x158>)
   1d01a:	18e4      	adds	r4, r4, r3
					sock = (SOCKET)u8SockID;
   1d01c:	b27d      	sxtb	r5, r7
		if(sock >= 0)
   1d01e:	2d00      	cmp	r5, #0
   1d020:	dbc4      	blt.n	1cfac <socket+0x20>
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
   1d022:	2210      	movs	r2, #16
   1d024:	2100      	movs	r1, #0
   1d026:	0020      	movs	r0, r4
   1d028:	4b2f      	ldr	r3, [pc, #188]	; (1d0e8 <socket+0x15c>)
   1d02a:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
   1d02c:	2301      	movs	r3, #1
   1d02e:	72a3      	strb	r3, [r4, #10]
			++gu16SessionID;
   1d030:	4a2e      	ldr	r2, [pc, #184]	; (1d0ec <socket+0x160>)
   1d032:	8813      	ldrh	r3, [r2, #0]
   1d034:	3301      	adds	r3, #1
   1d036:	b29b      	uxth	r3, r3
   1d038:	8013      	strh	r3, [r2, #0]
			if(gu16SessionID == 0)
   1d03a:	8813      	ldrh	r3, [r2, #0]
   1d03c:	b29b      	uxth	r3, r3
   1d03e:	2b00      	cmp	r3, #0
   1d040:	d103      	bne.n	1d04a <socket+0xbe>
				++gu16SessionID;
   1d042:	8813      	ldrh	r3, [r2, #0]
   1d044:	3301      	adds	r3, #1
   1d046:	b29b      	uxth	r3, r3
   1d048:	8013      	strh	r3, [r2, #0]
			pstrSock->u16SessionID = gu16SessionID;
   1d04a:	4e28      	ldr	r6, [pc, #160]	; (1d0ec <socket+0x160>)
   1d04c:	8833      	ldrh	r3, [r6, #0]
   1d04e:	b29b      	uxth	r3, r3
   1d050:	80e3      	strh	r3, [r4, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
   1d052:	4827      	ldr	r0, [pc, #156]	; (1d0f0 <socket+0x164>)
   1d054:	4f27      	ldr	r7, [pc, #156]	; (1d0f4 <socket+0x168>)
   1d056:	47b8      	blx	r7
   1d058:	8832      	ldrh	r2, [r6, #0]
   1d05a:	b292      	uxth	r2, r2
   1d05c:	0029      	movs	r1, r5
   1d05e:	4826      	ldr	r0, [pc, #152]	; (1d0f8 <socket+0x16c>)
   1d060:	47b8      	blx	r7
   1d062:	4826      	ldr	r0, [pc, #152]	; (1d0fc <socket+0x170>)
   1d064:	47b8      	blx	r7
			if(u8Flags & SOCKET_FLAGS_SSL)
   1d066:	9b05      	ldr	r3, [sp, #20]
   1d068:	07db      	lsls	r3, r3, #31
   1d06a:	d59f      	bpl.n	1cfac <socket+0x20>
				strSSLCreate.sslSock = sock;
   1d06c:	aa07      	add	r2, sp, #28
   1d06e:	7015      	strb	r5, [r2, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
   1d070:	2321      	movs	r3, #33	; 0x21
   1d072:	72e3      	strb	r3, [r4, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
   1d074:	2300      	movs	r3, #0
   1d076:	9302      	str	r3, [sp, #8]
   1d078:	9301      	str	r3, [sp, #4]
   1d07a:	9300      	str	r3, [sp, #0]
   1d07c:	3304      	adds	r3, #4
   1d07e:	2150      	movs	r1, #80	; 0x50
   1d080:	2002      	movs	r0, #2
   1d082:	4c1f      	ldr	r4, [pc, #124]	; (1d100 <socket+0x174>)
   1d084:	47a0      	blx	r4
   1d086:	e791      	b.n	1cfac <socket+0x20>
				u8SockID		= u8NextUdpSock;
   1d088:	4b1e      	ldr	r3, [pc, #120]	; (1d104 <socket+0x178>)
   1d08a:	781d      	ldrb	r5, [r3, #0]
   1d08c:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
   1d08e:	781c      	ldrb	r4, [r3, #0]
   1d090:	0124      	lsls	r4, r4, #4
   1d092:	4a1d      	ldr	r2, [pc, #116]	; (1d108 <socket+0x17c>)
   1d094:	18a4      	adds	r4, r4, r2
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
   1d096:	7819      	ldrb	r1, [r3, #0]
   1d098:	3101      	adds	r1, #1
   1d09a:	2203      	movs	r2, #3
   1d09c:	400a      	ands	r2, r1
   1d09e:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   1d0a0:	7aa3      	ldrb	r3, [r4, #10]
   1d0a2:	2b00      	cmp	r3, #0
   1d0a4:	d014      	beq.n	1d0d0 <socket+0x144>
   1d0a6:	2203      	movs	r2, #3
				u8SockID		= u8NextUdpSock;
   1d0a8:	4916      	ldr	r1, [pc, #88]	; (1d104 <socket+0x178>)
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
   1d0aa:	4f17      	ldr	r7, [pc, #92]	; (1d108 <socket+0x17c>)
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
   1d0ac:	2003      	movs	r0, #3
				u8SockID		= u8NextUdpSock;
   1d0ae:	780d      	ldrb	r5, [r1, #0]
   1d0b0:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
   1d0b2:	780c      	ldrb	r4, [r1, #0]
   1d0b4:	0124      	lsls	r4, r4, #4
   1d0b6:	19e4      	adds	r4, r4, r7
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
   1d0b8:	780b      	ldrb	r3, [r1, #0]
   1d0ba:	3301      	adds	r3, #1
   1d0bc:	4003      	ands	r3, r0
   1d0be:	700b      	strb	r3, [r1, #0]
				if(!pstrSock->bIsUsed)
   1d0c0:	7aa3      	ldrb	r3, [r4, #10]
   1d0c2:	2b00      	cmp	r3, #0
   1d0c4:	d004      	beq.n	1d0d0 <socket+0x144>
   1d0c6:	3a01      	subs	r2, #1
   1d0c8:	b2d2      	uxtb	r2, r2
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   1d0ca:	2a00      	cmp	r2, #0
   1d0cc:	d1ef      	bne.n	1d0ae <socket+0x122>
   1d0ce:	e76b      	b.n	1cfa8 <socket+0x1c>
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
   1d0d0:	3507      	adds	r5, #7
   1d0d2:	b26d      	sxtb	r5, r5
					break;
   1d0d4:	e7a3      	b.n	1d01e <socket+0x92>
	SOCKET					sock = -1;
   1d0d6:	2501      	movs	r5, #1
   1d0d8:	426d      	negs	r5, r5
   1d0da:	e767      	b.n	1cfac <socket+0x20>
   1d0dc:	20003cb8 	.word	0x20003cb8
   1d0e0:	00024335 	.word	0x00024335
   1d0e4:	20005404 	.word	0x20005404
   1d0e8:	0001a55d 	.word	0x0001a55d
   1d0ec:	20003cb6 	.word	0x20003cb6
   1d0f0:	0002a438 	.word	0x0002a438
   1d0f4:	0001913d 	.word	0x0001913d
   1d0f8:	0002af04 	.word	0x0002af04
   1d0fc:	0002a124 	.word	0x0002a124
   1d100:	0001a671 	.word	0x0001a671
   1d104:	20003cb9 	.word	0x20003cb9
   1d108:	20005474 	.word	0x20005474

0001d10c <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
   1d10c:	b570      	push	{r4, r5, r6, lr}
   1d10e:	b088      	sub	sp, #32
   1d110:	1e04      	subs	r4, r0, #0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
   1d112:	db30      	blt.n	1d176 <connect+0x6a>
   1d114:	2900      	cmp	r1, #0
   1d116:	d031      	beq.n	1d17c <connect+0x70>
   1d118:	0100      	lsls	r0, r0, #4
   1d11a:	4b1d      	ldr	r3, [pc, #116]	; (1d190 <connect+0x84>)
   1d11c:	181b      	adds	r3, r3, r0
   1d11e:	7a9b      	ldrb	r3, [r3, #10]
   1d120:	2b01      	cmp	r3, #1
   1d122:	d12e      	bne.n	1d182 <connect+0x76>
   1d124:	2a00      	cmp	r2, #0
   1d126:	d02f      	beq.n	1d188 <connect+0x7c>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
   1d128:	4b19      	ldr	r3, [pc, #100]	; (1d190 <connect+0x84>)
   1d12a:	181b      	adds	r3, r3, r0
   1d12c:	7adb      	ldrb	r3, [r3, #11]
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
   1d12e:	2644      	movs	r6, #68	; 0x44
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
   1d130:	07db      	lsls	r3, r3, #31
   1d132:	d505      	bpl.n	1d140 <connect+0x34>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
   1d134:	4b16      	ldr	r3, [pc, #88]	; (1d190 <connect+0x84>)
   1d136:	181b      	adds	r3, r3, r0
   1d138:	7ada      	ldrb	r2, [r3, #11]
   1d13a:	ab05      	add	r3, sp, #20
   1d13c:	725a      	strb	r2, [r3, #9]
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
   1d13e:	3607      	adds	r6, #7
		}
		strConnect.sock = sock;
   1d140:	ad05      	add	r5, sp, #20
   1d142:	722c      	strb	r4, [r5, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
   1d144:	2208      	movs	r2, #8
   1d146:	0028      	movs	r0, r5
   1d148:	4b12      	ldr	r3, [pc, #72]	; (1d194 <connect+0x88>)
   1d14a:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
   1d14c:	0124      	lsls	r4, r4, #4
   1d14e:	4b10      	ldr	r3, [pc, #64]	; (1d190 <connect+0x84>)
   1d150:	191c      	adds	r4, r3, r4
   1d152:	88e3      	ldrh	r3, [r4, #6]
   1d154:	816b      	strh	r3, [r5, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
   1d156:	2300      	movs	r3, #0
   1d158:	9302      	str	r3, [sp, #8]
   1d15a:	9301      	str	r3, [sp, #4]
   1d15c:	9300      	str	r3, [sp, #0]
   1d15e:	330c      	adds	r3, #12
   1d160:	002a      	movs	r2, r5
   1d162:	0031      	movs	r1, r6
   1d164:	2002      	movs	r0, #2
   1d166:	4c0c      	ldr	r4, [pc, #48]	; (1d198 <connect+0x8c>)
   1d168:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
   1d16a:	2800      	cmp	r0, #0
   1d16c:	d001      	beq.n	1d172 <connect+0x66>
		{
			s8Ret = SOCK_ERR_INVALID;
   1d16e:	2009      	movs	r0, #9
   1d170:	4240      	negs	r0, r0
		}
	}
	return s8Ret;
}
   1d172:	b008      	add	sp, #32
   1d174:	bd70      	pop	{r4, r5, r6, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   1d176:	2006      	movs	r0, #6
   1d178:	4240      	negs	r0, r0
   1d17a:	e7fa      	b.n	1d172 <connect+0x66>
   1d17c:	2006      	movs	r0, #6
   1d17e:	4240      	negs	r0, r0
   1d180:	e7f7      	b.n	1d172 <connect+0x66>
   1d182:	2006      	movs	r0, #6
   1d184:	4240      	negs	r0, r0
   1d186:	e7f4      	b.n	1d172 <connect+0x66>
   1d188:	2006      	movs	r0, #6
   1d18a:	4240      	negs	r0, r0
   1d18c:	e7f1      	b.n	1d172 <connect+0x66>
   1d18e:	46c0      	nop			; (mov r8, r8)
   1d190:	20005404 	.word	0x20005404
   1d194:	0001a549 	.word	0x0001a549
   1d198:	0001a671 	.word	0x0001a671

0001d19c <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
   1d19c:	b530      	push	{r4, r5, lr}
   1d19e:	b089      	sub	sp, #36	; 0x24
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
   1d1a0:	2800      	cmp	r0, #0
   1d1a2:	db36      	blt.n	1d212 <send+0x76>
   1d1a4:	2900      	cmp	r1, #0
   1d1a6:	d037      	beq.n	1d218 <send+0x7c>
   1d1a8:	23af      	movs	r3, #175	; 0xaf
   1d1aa:	00db      	lsls	r3, r3, #3
   1d1ac:	429a      	cmp	r2, r3
   1d1ae:	d836      	bhi.n	1d21e <send+0x82>
   1d1b0:	0104      	lsls	r4, r0, #4
   1d1b2:	4b1e      	ldr	r3, [pc, #120]	; (1d22c <send+0x90>)
   1d1b4:	191b      	adds	r3, r3, r4
   1d1b6:	7a9b      	ldrb	r3, [r3, #10]
   1d1b8:	2b01      	cmp	r3, #1
   1d1ba:	d133      	bne.n	1d224 <send+0x88>
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;

		strSend.sock			= sock;
   1d1bc:	ab04      	add	r3, sp, #16
   1d1be:	7018      	strb	r0, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
   1d1c0:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
   1d1c2:	0025      	movs	r5, r4
   1d1c4:	4c19      	ldr	r4, [pc, #100]	; (1d22c <send+0x90>)
   1d1c6:	1964      	adds	r4, r4, r5
   1d1c8:	88e4      	ldrh	r4, [r4, #6]
   1d1ca:	819c      	strh	r4, [r3, #12]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
   1d1cc:	2550      	movs	r5, #80	; 0x50

		if(sock >= TCP_SOCK_MAX)
   1d1ce:	2806      	cmp	r0, #6
   1d1d0:	dd00      	ble.n	1d1d4 <send+0x38>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
   1d1d2:	3d0c      	subs	r5, #12
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   1d1d4:	0104      	lsls	r4, r0, #4
   1d1d6:	4b15      	ldr	r3, [pc, #84]	; (1d22c <send+0x90>)
   1d1d8:	191b      	adds	r3, r3, r4
   1d1da:	7adc      	ldrb	r4, [r3, #11]
		u8Cmd			= SOCKET_CMD_SEND;
   1d1dc:	2345      	movs	r3, #69	; 0x45
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   1d1de:	07e4      	lsls	r4, r4, #31
   1d1e0:	d505      	bpl.n	1d1ee <send+0x52>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
   1d1e2:	0100      	lsls	r0, r0, #4
   1d1e4:	4b11      	ldr	r3, [pc, #68]	; (1d22c <send+0x90>)
   1d1e6:	1818      	adds	r0, r3, r0
   1d1e8:	8905      	ldrh	r5, [r0, #8]
   1d1ea:	b2ad      	uxth	r5, r5
			u8Cmd			= SOCKET_CMD_SSL_SEND;
   1d1ec:	234c      	movs	r3, #76	; 0x4c
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
   1d1ee:	2080      	movs	r0, #128	; 0x80
   1d1f0:	4318      	orrs	r0, r3
   1d1f2:	9502      	str	r5, [sp, #8]
   1d1f4:	9201      	str	r2, [sp, #4]
   1d1f6:	9100      	str	r1, [sp, #0]
   1d1f8:	2310      	movs	r3, #16
   1d1fa:	aa04      	add	r2, sp, #16
   1d1fc:	0001      	movs	r1, r0
   1d1fe:	2002      	movs	r0, #2
   1d200:	4c0b      	ldr	r4, [pc, #44]	; (1d230 <send+0x94>)
   1d202:	47a0      	blx	r4
   1d204:	2300      	movs	r3, #0
		if(s16Ret != SOCK_ERR_NO_ERROR)
   1d206:	2800      	cmp	r0, #0
   1d208:	d000      	beq.n	1d20c <send+0x70>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
   1d20a:	3b0e      	subs	r3, #14
		}
	}
	return s16Ret;
}
   1d20c:	0018      	movs	r0, r3
   1d20e:	b009      	add	sp, #36	; 0x24
   1d210:	bd30      	pop	{r4, r5, pc}
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   1d212:	2306      	movs	r3, #6
   1d214:	425b      	negs	r3, r3
   1d216:	e7f9      	b.n	1d20c <send+0x70>
   1d218:	2306      	movs	r3, #6
   1d21a:	425b      	negs	r3, r3
   1d21c:	e7f6      	b.n	1d20c <send+0x70>
   1d21e:	2306      	movs	r3, #6
   1d220:	425b      	negs	r3, r3
   1d222:	e7f3      	b.n	1d20c <send+0x70>
   1d224:	2306      	movs	r3, #6
   1d226:	425b      	negs	r3, r3
   1d228:	e7f0      	b.n	1d20c <send+0x70>
   1d22a:	46c0      	nop			; (mov r8, r8)
   1d22c:	20005404 	.word	0x20005404
   1d230:	0001a671 	.word	0x0001a671

0001d234 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
   1d234:	b530      	push	{r4, r5, lr}
   1d236:	b087      	sub	sp, #28
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
   1d238:	2800      	cmp	r0, #0
   1d23a:	db34      	blt.n	1d2a6 <recv+0x72>
   1d23c:	2900      	cmp	r1, #0
   1d23e:	d035      	beq.n	1d2ac <recv+0x78>
   1d240:	2a00      	cmp	r2, #0
   1d242:	d036      	beq.n	1d2b2 <recv+0x7e>
   1d244:	0105      	lsls	r5, r0, #4
   1d246:	4c1e      	ldr	r4, [pc, #120]	; (1d2c0 <recv+0x8c>)
   1d248:	1964      	adds	r4, r4, r5
   1d24a:	7aa4      	ldrb	r4, [r4, #10]
   1d24c:	2c01      	cmp	r4, #1
   1d24e:	d133      	bne.n	1d2b8 <recv+0x84>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
   1d250:	4c1b      	ldr	r4, [pc, #108]	; (1d2c0 <recv+0x8c>)
   1d252:	5129      	str	r1, [r5, r4]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
   1d254:	1964      	adds	r4, r4, r5
   1d256:	80a2      	strh	r2, [r4, #4]

		if(!gastrSockets[sock].bIsRecvPending)
   1d258:	7b21      	ldrb	r1, [r4, #12]
		s16Ret = SOCK_ERR_NO_ERROR;
   1d25a:	2200      	movs	r2, #0
		if(!gastrSockets[sock].bIsRecvPending)
   1d25c:	2900      	cmp	r1, #0
   1d25e:	d11d      	bne.n	1d29c <recv+0x68>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;

			gastrSockets[sock].bIsRecvPending = 1;
   1d260:	2101      	movs	r1, #1
   1d262:	7321      	strb	r1, [r4, #12]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   1d264:	7ae2      	ldrb	r2, [r4, #11]
			uint8		u8Cmd = SOCKET_CMD_RECV;
   1d266:	3145      	adds	r1, #69	; 0x45
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   1d268:	07d2      	lsls	r2, r2, #31
   1d26a:	d500      	bpl.n	1d26e <recv+0x3a>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
   1d26c:	3107      	adds	r1, #7
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
   1d26e:	2b00      	cmp	r3, #0
   1d270:	d117      	bne.n	1d2a2 <recv+0x6e>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
   1d272:	3b01      	subs	r3, #1
   1d274:	9304      	str	r3, [sp, #16]
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
			strRecv.sock = sock;
   1d276:	aa04      	add	r2, sp, #16
   1d278:	7110      	strb	r0, [r2, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
   1d27a:	0100      	lsls	r0, r0, #4
   1d27c:	4b10      	ldr	r3, [pc, #64]	; (1d2c0 <recv+0x8c>)
   1d27e:	1818      	adds	r0, r3, r0
   1d280:	88c3      	ldrh	r3, [r0, #6]
   1d282:	80d3      	strh	r3, [r2, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
   1d284:	2300      	movs	r3, #0
   1d286:	9302      	str	r3, [sp, #8]
   1d288:	9301      	str	r3, [sp, #4]
   1d28a:	9300      	str	r3, [sp, #0]
   1d28c:	3308      	adds	r3, #8
   1d28e:	2002      	movs	r0, #2
   1d290:	4c0c      	ldr	r4, [pc, #48]	; (1d2c4 <recv+0x90>)
   1d292:	47a0      	blx	r4
   1d294:	2200      	movs	r2, #0
			if(s16Ret != SOCK_ERR_NO_ERROR)
   1d296:	2800      	cmp	r0, #0
   1d298:	d000      	beq.n	1d29c <recv+0x68>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
   1d29a:	3a0e      	subs	r2, #14
			}
		}
	}
	return s16Ret;
}
   1d29c:	0010      	movs	r0, r2
   1d29e:	b007      	add	sp, #28
   1d2a0:	bd30      	pop	{r4, r5, pc}
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
   1d2a2:	9304      	str	r3, [sp, #16]
   1d2a4:	e7e7      	b.n	1d276 <recv+0x42>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   1d2a6:	2206      	movs	r2, #6
   1d2a8:	4252      	negs	r2, r2
   1d2aa:	e7f7      	b.n	1d29c <recv+0x68>
   1d2ac:	2206      	movs	r2, #6
   1d2ae:	4252      	negs	r2, r2
   1d2b0:	e7f4      	b.n	1d29c <recv+0x68>
   1d2b2:	2206      	movs	r2, #6
   1d2b4:	4252      	negs	r2, r2
   1d2b6:	e7f1      	b.n	1d29c <recv+0x68>
   1d2b8:	2206      	movs	r2, #6
   1d2ba:	4252      	negs	r2, r2
   1d2bc:	e7ee      	b.n	1d29c <recv+0x68>
   1d2be:	46c0      	nop			; (mov r8, r8)
   1d2c0:	20005404 	.word	0x20005404
   1d2c4:	0001a671 	.word	0x0001a671

0001d2c8 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
   1d2c8:	b530      	push	{r4, r5, lr}
   1d2ca:	b087      	sub	sp, #28
   1d2cc:	0004      	movs	r4, r0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    M2M_INFO("Sock to delete <%d>\n", sock);
   1d2ce:	481d      	ldr	r0, [pc, #116]	; (1d344 <close+0x7c>)
   1d2d0:	4d1d      	ldr	r5, [pc, #116]	; (1d348 <close+0x80>)
   1d2d2:	47a8      	blx	r5
   1d2d4:	0021      	movs	r1, r4
   1d2d6:	481d      	ldr	r0, [pc, #116]	; (1d34c <close+0x84>)
   1d2d8:	47a8      	blx	r5
   1d2da:	481d      	ldr	r0, [pc, #116]	; (1d350 <close+0x88>)
   1d2dc:	47a8      	blx	r5
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
   1d2de:	2c00      	cmp	r4, #0
   1d2e0:	db2a      	blt.n	1d338 <close+0x70>
   1d2e2:	0122      	lsls	r2, r4, #4
   1d2e4:	4b1b      	ldr	r3, [pc, #108]	; (1d354 <close+0x8c>)
   1d2e6:	189b      	adds	r3, r3, r2
   1d2e8:	7a9b      	ldrb	r3, [r3, #10]
   1d2ea:	2b01      	cmp	r3, #1
   1d2ec:	d127      	bne.n	1d33e <close+0x76>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
   1d2ee:	a905      	add	r1, sp, #20
   1d2f0:	700c      	strb	r4, [r1, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
   1d2f2:	4b18      	ldr	r3, [pc, #96]	; (1d354 <close+0x8c>)
   1d2f4:	189b      	adds	r3, r3, r2
   1d2f6:	88da      	ldrh	r2, [r3, #6]
   1d2f8:	804a      	strh	r2, [r1, #2]
		
		gastrSockets[sock].bIsUsed = 0;
   1d2fa:	2200      	movs	r2, #0
   1d2fc:	729a      	strb	r2, [r3, #10]
		gastrSockets[sock].u16SessionID =0;
   1d2fe:	80da      	strh	r2, [r3, #6]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   1d300:	7adb      	ldrb	r3, [r3, #11]
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
   1d302:	2149      	movs	r1, #73	; 0x49
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   1d304:	07db      	lsls	r3, r3, #31
   1d306:	d500      	bpl.n	1d30a <close+0x42>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
   1d308:	3105      	adds	r1, #5
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
   1d30a:	2300      	movs	r3, #0
   1d30c:	9302      	str	r3, [sp, #8]
   1d30e:	9301      	str	r3, [sp, #4]
   1d310:	9300      	str	r3, [sp, #0]
   1d312:	3304      	adds	r3, #4
   1d314:	aa05      	add	r2, sp, #20
   1d316:	2002      	movs	r0, #2
   1d318:	4d0f      	ldr	r5, [pc, #60]	; (1d358 <close+0x90>)
   1d31a:	47a8      	blx	r5
   1d31c:	1e05      	subs	r5, r0, #0
		if(s8Ret != SOCK_ERR_NO_ERROR)
   1d31e:	d001      	beq.n	1d324 <close+0x5c>
		{
			s8Ret = SOCK_ERR_INVALID;
   1d320:	2509      	movs	r5, #9
   1d322:	426d      	negs	r5, r5
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
   1d324:	0124      	lsls	r4, r4, #4
   1d326:	480b      	ldr	r0, [pc, #44]	; (1d354 <close+0x8c>)
   1d328:	1820      	adds	r0, r4, r0
   1d32a:	2210      	movs	r2, #16
   1d32c:	2100      	movs	r1, #0
   1d32e:	4b0b      	ldr	r3, [pc, #44]	; (1d35c <close+0x94>)
   1d330:	4798      	blx	r3
	}
	return s8Ret;
}
   1d332:	0028      	movs	r0, r5
   1d334:	b007      	add	sp, #28
   1d336:	bd30      	pop	{r4, r5, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   1d338:	2506      	movs	r5, #6
   1d33a:	426d      	negs	r5, r5
   1d33c:	e7f9      	b.n	1d332 <close+0x6a>
   1d33e:	2506      	movs	r5, #6
   1d340:	426d      	negs	r5, r5
   1d342:	e7f6      	b.n	1d332 <close+0x6a>
   1d344:	0002a438 	.word	0x0002a438
   1d348:	0001913d 	.word	0x0001913d
   1d34c:	0002aeec 	.word	0x0002aeec
   1d350:	0002a124 	.word	0x0002a124
   1d354:	20005404 	.word	0x20005404
   1d358:	0001a671 	.word	0x0001a671
   1d35c:	0001a55d 	.word	0x0001a55d

0001d360 <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
   1d360:	b570      	push	{r4, r5, r6, lr}
   1d362:	b082      	sub	sp, #8
	uint8	tmp;
	uint32	u32IP = 0;
   1d364:	2300      	movs	r3, #0
   1d366:	9301      	str	r3, [sp, #4]
   1d368:	2600      	movs	r6, #0
	for(i = 0; i < 4; ++i)
	{
		j = 0;
		do
		{
			c = *pcIpAddr;
   1d36a:	2100      	movs	r1, #0
   1d36c:	7802      	ldrb	r2, [r0, #0]
   1d36e:	1c44      	adds	r4, r0, #1
   1d370:	3005      	adds	r0, #5
   1d372:	000b      	movs	r3, r1
   1d374:	e009      	b.n	1d38a <nmi_inet_addr+0x2a>
				au8IP[i] = tmp;
				tmp = 0;
			}
			else if(c >= '0' && c <= '9')
			{
				tmp = (tmp * 10) + (c - '0');
   1d376:	009d      	lsls	r5, r3, #2
   1d378:	195b      	adds	r3, r3, r5
   1d37a:	005b      	lsls	r3, r3, #1
   1d37c:	189b      	adds	r3, r3, r2
   1d37e:	b2db      	uxtb	r3, r3
			}
			else
			{
				return 0;
			}
			++pcIpAddr;
   1d380:	0022      	movs	r2, r4
   1d382:	3401      	adds	r4, #1
			if(j > 4)
   1d384:	42a0      	cmp	r0, r4
   1d386:	d00a      	beq.n	1d39e <nmi_inet_addr+0x3e>
			c = *pcIpAddr;
   1d388:	7812      	ldrb	r2, [r2, #0]
			if(c == '.' || c == 0)
   1d38a:	2a2e      	cmp	r2, #46	; 0x2e
   1d38c:	d00a      	beq.n	1d3a4 <nmi_inet_addr+0x44>
   1d38e:	2a00      	cmp	r2, #0
   1d390:	d00c      	beq.n	1d3ac <nmi_inet_addr+0x4c>
			else if(c >= '0' && c <= '9')
   1d392:	3a30      	subs	r2, #48	; 0x30
   1d394:	b2d2      	uxtb	r2, r2
   1d396:	2a09      	cmp	r2, #9
   1d398:	d9ed      	bls.n	1d376 <nmi_inet_addr+0x16>
				return 0;
   1d39a:	2000      	movs	r0, #0
   1d39c:	e000      	b.n	1d3a0 <nmi_inet_addr+0x40>
				return 0;
   1d39e:	2000      	movs	r0, #0
		} while(c != '.' && c != 0);
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
	return u32IP;
}
   1d3a0:	b002      	add	sp, #8
   1d3a2:	bd70      	pop	{r4, r5, r6, pc}
				au8IP[i] = tmp;
   1d3a4:	466a      	mov	r2, sp
   1d3a6:	54b3      	strb	r3, [r6, r2]
			++pcIpAddr;
   1d3a8:	0020      	movs	r0, r4
   1d3aa:	e002      	b.n	1d3b2 <nmi_inet_addr+0x52>
				au8IP[i] = tmp;
   1d3ac:	466a      	mov	r2, sp
   1d3ae:	54b3      	strb	r3, [r6, r2]
			++pcIpAddr;
   1d3b0:	0020      	movs	r0, r4
   1d3b2:	3601      	adds	r6, #1
	for(i = 0; i < 4; ++i)
   1d3b4:	2e04      	cmp	r6, #4
   1d3b6:	d1d9      	bne.n	1d36c <nmi_inet_addr+0xc>
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
   1d3b8:	2204      	movs	r2, #4
   1d3ba:	4669      	mov	r1, sp
   1d3bc:	a801      	add	r0, sp, #4
   1d3be:	4b02      	ldr	r3, [pc, #8]	; (1d3c8 <nmi_inet_addr+0x68>)
   1d3c0:	4798      	blx	r3
	return u32IP;
   1d3c2:	9801      	ldr	r0, [sp, #4]
   1d3c4:	e7ec      	b.n	1d3a0 <nmi_inet_addr+0x40>
   1d3c6:	46c0      	nop			; (mov r8, r8)
   1d3c8:	0001a549 	.word	0x0001a549

0001d3cc <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
   1d3cc:	b510      	push	{r4, lr}
   1d3ce:	b084      	sub	sp, #16
   1d3d0:	0004      	movs	r4, r0
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
   1d3d2:	4b0b      	ldr	r3, [pc, #44]	; (1d400 <gethostbyname+0x34>)
   1d3d4:	4798      	blx	r3
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
   1d3d6:	b2c3      	uxtb	r3, r0
   1d3d8:	2b40      	cmp	r3, #64	; 0x40
   1d3da:	d80d      	bhi.n	1d3f8 <gethostbyname+0x2c>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
   1d3dc:	23ff      	movs	r3, #255	; 0xff
   1d3de:	4003      	ands	r3, r0
   1d3e0:	3301      	adds	r3, #1
   1d3e2:	2200      	movs	r2, #0
   1d3e4:	9202      	str	r2, [sp, #8]
   1d3e6:	9201      	str	r2, [sp, #4]
   1d3e8:	9200      	str	r2, [sp, #0]
   1d3ea:	0022      	movs	r2, r4
   1d3ec:	214a      	movs	r1, #74	; 0x4a
   1d3ee:	2002      	movs	r0, #2
   1d3f0:	4c04      	ldr	r4, [pc, #16]	; (1d404 <gethostbyname+0x38>)
   1d3f2:	47a0      	blx	r4
	}
	return s8Err;
}
   1d3f4:	b004      	add	sp, #16
   1d3f6:	bd10      	pop	{r4, pc}
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
   1d3f8:	2006      	movs	r0, #6
   1d3fa:	4240      	negs	r0, r0
   1d3fc:	e7fa      	b.n	1d3f4 <gethostbyname+0x28>
   1d3fe:	46c0      	nop			; (mov r8, r8)
   1d400:	0001a56d 	.word	0x0001a56d
   1d404:	0001a671 	.word	0x0001a671

0001d408 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
   1d408:	b570      	push	{r4, r5, r6, lr}
   1d40a:	b082      	sub	sp, #8
   1d40c:	0004      	movs	r4, r0
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
   1d40e:	4b2a      	ldr	r3, [pc, #168]	; (1d4b8 <spi_flash_enable+0xb0>)
   1d410:	4798      	blx	r3
   1d412:	0500      	lsls	r0, r0, #20
   1d414:	0d00      	lsrs	r0, r0, #20
   1d416:	4b29      	ldr	r3, [pc, #164]	; (1d4bc <spi_flash_enable+0xb4>)
	sint8 s8Ret = M2M_SUCCESS;
   1d418:	2500      	movs	r5, #0
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
   1d41a:	4298      	cmp	r0, r3
   1d41c:	d802      	bhi.n	1d424 <spi_flash_enable+0x1c>
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
   1d41e:	0028      	movs	r0, r5
   1d420:	b002      	add	sp, #8
   1d422:	bd70      	pop	{r4, r5, r6, pc}
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
   1d424:	a901      	add	r1, sp, #4
   1d426:	4826      	ldr	r0, [pc, #152]	; (1d4c0 <spi_flash_enable+0xb8>)
   1d428:	4b26      	ldr	r3, [pc, #152]	; (1d4c4 <spi_flash_enable+0xbc>)
   1d42a:	4798      	blx	r3
   1d42c:	1e05      	subs	r5, r0, #0
		if(s8Ret != M2M_SUCCESS) {
   1d42e:	d1f6      	bne.n	1d41e <spi_flash_enable+0x16>
		u32Val &= ~((0x7777ul) << 12);
   1d430:	4b25      	ldr	r3, [pc, #148]	; (1d4c8 <spi_flash_enable+0xc0>)
   1d432:	9a01      	ldr	r2, [sp, #4]
   1d434:	4013      	ands	r3, r2
		u32Val |= ((0x1111ul) << 12);
   1d436:	4925      	ldr	r1, [pc, #148]	; (1d4cc <spi_flash_enable+0xc4>)
   1d438:	4319      	orrs	r1, r3
   1d43a:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
   1d43c:	4820      	ldr	r0, [pc, #128]	; (1d4c0 <spi_flash_enable+0xb8>)
   1d43e:	4b24      	ldr	r3, [pc, #144]	; (1d4d0 <spi_flash_enable+0xc8>)
   1d440:	4798      	blx	r3
		if(enable) {
   1d442:	2c00      	cmp	r4, #0
   1d444:	d020      	beq.n	1d488 <spi_flash_enable+0x80>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   1d446:	2100      	movs	r1, #0
   1d448:	4822      	ldr	r0, [pc, #136]	; (1d4d4 <spi_flash_enable+0xcc>)
   1d44a:	4c21      	ldr	r4, [pc, #132]	; (1d4d0 <spi_flash_enable+0xc8>)
   1d44c:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   1d44e:	21ab      	movs	r1, #171	; 0xab
   1d450:	4821      	ldr	r0, [pc, #132]	; (1d4d8 <spi_flash_enable+0xd0>)
   1d452:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   1d454:	2101      	movs	r1, #1
   1d456:	4821      	ldr	r0, [pc, #132]	; (1d4dc <spi_flash_enable+0xd4>)
   1d458:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   1d45a:	2100      	movs	r1, #0
   1d45c:	4820      	ldr	r0, [pc, #128]	; (1d4e0 <spi_flash_enable+0xd8>)
   1d45e:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
   1d460:	2181      	movs	r1, #129	; 0x81
   1d462:	4820      	ldr	r0, [pc, #128]	; (1d4e4 <spi_flash_enable+0xdc>)
   1d464:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   1d466:	4e20      	ldr	r6, [pc, #128]	; (1d4e8 <spi_flash_enable+0xe0>)
   1d468:	4c20      	ldr	r4, [pc, #128]	; (1d4ec <spi_flash_enable+0xe4>)
   1d46a:	0030      	movs	r0, r6
   1d46c:	47a0      	blx	r4
   1d46e:	2801      	cmp	r0, #1
   1d470:	d1fb      	bne.n	1d46a <spi_flash_enable+0x62>
		u32Val &= ~((0x7777ul) << 12);
   1d472:	4b15      	ldr	r3, [pc, #84]	; (1d4c8 <spi_flash_enable+0xc0>)
   1d474:	9a01      	ldr	r2, [sp, #4]
   1d476:	4013      	ands	r3, r2
		u32Val |= ((0x0010ul) << 12);
   1d478:	2180      	movs	r1, #128	; 0x80
   1d47a:	0249      	lsls	r1, r1, #9
   1d47c:	4319      	orrs	r1, r3
   1d47e:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
   1d480:	480f      	ldr	r0, [pc, #60]	; (1d4c0 <spi_flash_enable+0xb8>)
   1d482:	4b13      	ldr	r3, [pc, #76]	; (1d4d0 <spi_flash_enable+0xc8>)
   1d484:	4798      	blx	r3
   1d486:	e7ca      	b.n	1d41e <spi_flash_enable+0x16>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   1d488:	2100      	movs	r1, #0
   1d48a:	4812      	ldr	r0, [pc, #72]	; (1d4d4 <spi_flash_enable+0xcc>)
   1d48c:	4c10      	ldr	r4, [pc, #64]	; (1d4d0 <spi_flash_enable+0xc8>)
   1d48e:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   1d490:	21b9      	movs	r1, #185	; 0xb9
   1d492:	4811      	ldr	r0, [pc, #68]	; (1d4d8 <spi_flash_enable+0xd0>)
   1d494:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   1d496:	2101      	movs	r1, #1
   1d498:	4810      	ldr	r0, [pc, #64]	; (1d4dc <spi_flash_enable+0xd4>)
   1d49a:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   1d49c:	2100      	movs	r1, #0
   1d49e:	4810      	ldr	r0, [pc, #64]	; (1d4e0 <spi_flash_enable+0xd8>)
   1d4a0:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
   1d4a2:	2181      	movs	r1, #129	; 0x81
   1d4a4:	480f      	ldr	r0, [pc, #60]	; (1d4e4 <spi_flash_enable+0xdc>)
   1d4a6:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   1d4a8:	4e0f      	ldr	r6, [pc, #60]	; (1d4e8 <spi_flash_enable+0xe0>)
   1d4aa:	4c10      	ldr	r4, [pc, #64]	; (1d4ec <spi_flash_enable+0xe4>)
   1d4ac:	0030      	movs	r0, r6
   1d4ae:	47a0      	blx	r4
   1d4b0:	2801      	cmp	r0, #1
   1d4b2:	d1fb      	bne.n	1d4ac <spi_flash_enable+0xa4>
   1d4b4:	e7dd      	b.n	1d472 <spi_flash_enable+0x6a>
   1d4b6:	46c0      	nop			; (mov r8, r8)
   1d4b8:	0001b4e1 	.word	0x0001b4e1
   1d4bc:	0000039f 	.word	0x0000039f
   1d4c0:	00001410 	.word	0x00001410
   1d4c4:	0001b919 	.word	0x0001b919
   1d4c8:	f8888fff 	.word	0xf8888fff
   1d4cc:	01111000 	.word	0x01111000
   1d4d0:	0001b925 	.word	0x0001b925
   1d4d4:	00010208 	.word	0x00010208
   1d4d8:	0001020c 	.word	0x0001020c
   1d4dc:	00010214 	.word	0x00010214
   1d4e0:	0001021c 	.word	0x0001021c
   1d4e4:	00010204 	.word	0x00010204
   1d4e8:	00010218 	.word	0x00010218
   1d4ec:	0001b90d 	.word	0x0001b90d

0001d4f0 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
   1d4f0:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
   1d4f2:	2301      	movs	r3, #1
   1d4f4:	2800      	cmp	r0, #0
   1d4f6:	d001      	beq.n	1d4fc <mem_test_unit_ready+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
   1d4f8:	0018      	movs	r0, r3
   1d4fa:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
   1d4fc:	4b01      	ldr	r3, [pc, #4]	; (1d504 <mem_test_unit_ready+0x14>)
   1d4fe:	4798      	blx	r3
   1d500:	0003      	movs	r3, r0
   1d502:	e7f9      	b.n	1d4f8 <mem_test_unit_ready+0x8>
   1d504:	000199dd 	.word	0x000199dd

0001d508 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
   1d508:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
   1d50a:	2301      	movs	r3, #1
   1d50c:	2800      	cmp	r0, #0
   1d50e:	d001      	beq.n	1d514 <mem_read_capacity+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
   1d510:	0018      	movs	r0, r3
   1d512:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
   1d514:	0008      	movs	r0, r1
   1d516:	4b02      	ldr	r3, [pc, #8]	; (1d520 <mem_read_capacity+0x18>)
   1d518:	4798      	blx	r3
   1d51a:	0003      	movs	r3, r0
   1d51c:	e7f8      	b.n	1d510 <mem_read_capacity+0x8>
   1d51e:	46c0      	nop			; (mov r8, r8)
   1d520:	00019a0d 	.word	0x00019a0d

0001d524 <mem_sector_size>:

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
   1d524:	4243      	negs	r3, r0
   1d526:	4158      	adcs	r0, r3
   1d528:	b2c0      	uxtb	r0, r0
#endif

  Ctrl_access_unlock();

  return sector_size;
}
   1d52a:	4770      	bx	lr

0001d52c <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
   1d52c:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
   1d52e:	2301      	movs	r3, #1
   1d530:	2800      	cmp	r0, #0
   1d532:	d001      	beq.n	1d538 <mem_wr_protect+0xc>
#endif

  Ctrl_access_unlock();

  return wr_protect;
}
   1d534:	0018      	movs	r0, r3
   1d536:	bd10      	pop	{r4, pc}
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
   1d538:	4b01      	ldr	r3, [pc, #4]	; (1d540 <mem_wr_protect+0x14>)
   1d53a:	4798      	blx	r3
   1d53c:	0003      	movs	r3, r0
   1d53e:	e7f9      	b.n	1d534 <mem_wr_protect+0x8>
   1d540:	00019a1d 	.word	0x00019a1d

0001d544 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
   1d544:	b510      	push	{r4, lr}
   1d546:	000c      	movs	r4, r1
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
   1d548:	2301      	movs	r3, #1
   1d54a:	2800      	cmp	r0, #0
   1d54c:	d001      	beq.n	1d552 <memory_2_ram+0xe>
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
}
   1d54e:	0018      	movs	r0, r3
   1d550:	bd10      	pop	{r4, pc}
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
   1d552:	0011      	movs	r1, r2
   1d554:	0020      	movs	r0, r4
   1d556:	4b02      	ldr	r3, [pc, #8]	; (1d560 <memory_2_ram+0x1c>)
   1d558:	4798      	blx	r3
   1d55a:	0003      	movs	r3, r0
   1d55c:	e7f7      	b.n	1d54e <memory_2_ram+0xa>
   1d55e:	46c0      	nop			; (mov r8, r8)
   1d560:	00019a71 	.word	0x00019a71

0001d564 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
   1d564:	b510      	push	{r4, lr}
   1d566:	000c      	movs	r4, r1
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
   1d568:	2301      	movs	r3, #1
   1d56a:	2800      	cmp	r0, #0
   1d56c:	d001      	beq.n	1d572 <ram_2_memory+0xe>
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
}
   1d56e:	0018      	movs	r0, r3
   1d570:	bd10      	pop	{r4, pc}
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
   1d572:	0011      	movs	r1, r2
   1d574:	0020      	movs	r0, r4
   1d576:	4b02      	ldr	r3, [pc, #8]	; (1d580 <ram_2_memory+0x1c>)
   1d578:	4798      	blx	r3
   1d57a:	0003      	movs	r3, r0
   1d57c:	e7f7      	b.n	1d56e <ram_2_memory+0xa>
   1d57e:	46c0      	nop			; (mov r8, r8)
   1d580:	00019ac9 	.word	0x00019ac9

0001d584 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
   1d584:	4b0c      	ldr	r3, [pc, #48]	; (1d5b8 <cpu_irq_enter_critical+0x34>)
   1d586:	681b      	ldr	r3, [r3, #0]
   1d588:	2b00      	cmp	r3, #0
   1d58a:	d106      	bne.n	1d59a <cpu_irq_enter_critical+0x16>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1d58c:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
   1d590:	2b00      	cmp	r3, #0
   1d592:	d007      	beq.n	1d5a4 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   1d594:	2200      	movs	r2, #0
   1d596:	4b09      	ldr	r3, [pc, #36]	; (1d5bc <cpu_irq_enter_critical+0x38>)
   1d598:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   1d59a:	4a07      	ldr	r2, [pc, #28]	; (1d5b8 <cpu_irq_enter_critical+0x34>)
   1d59c:	6813      	ldr	r3, [r2, #0]
   1d59e:	3301      	adds	r3, #1
   1d5a0:	6013      	str	r3, [r2, #0]
}
   1d5a2:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
   1d5a4:	b672      	cpsid	i
   1d5a6:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   1d5aa:	2200      	movs	r2, #0
   1d5ac:	4b04      	ldr	r3, [pc, #16]	; (1d5c0 <cpu_irq_enter_critical+0x3c>)
   1d5ae:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   1d5b0:	3201      	adds	r2, #1
   1d5b2:	4b02      	ldr	r3, [pc, #8]	; (1d5bc <cpu_irq_enter_critical+0x38>)
   1d5b4:	701a      	strb	r2, [r3, #0]
   1d5b6:	e7f0      	b.n	1d59a <cpu_irq_enter_critical+0x16>
   1d5b8:	20003cbc 	.word	0x20003cbc
   1d5bc:	20003cc0 	.word	0x20003cc0
   1d5c0:	200000de 	.word	0x200000de

0001d5c4 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   1d5c4:	4b08      	ldr	r3, [pc, #32]	; (1d5e8 <cpu_irq_leave_critical+0x24>)
   1d5c6:	681a      	ldr	r2, [r3, #0]
   1d5c8:	3a01      	subs	r2, #1
   1d5ca:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   1d5cc:	681b      	ldr	r3, [r3, #0]
   1d5ce:	2b00      	cmp	r3, #0
   1d5d0:	d109      	bne.n	1d5e6 <cpu_irq_leave_critical+0x22>
   1d5d2:	4b06      	ldr	r3, [pc, #24]	; (1d5ec <cpu_irq_leave_critical+0x28>)
   1d5d4:	781b      	ldrb	r3, [r3, #0]
   1d5d6:	2b00      	cmp	r3, #0
   1d5d8:	d005      	beq.n	1d5e6 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
   1d5da:	2201      	movs	r2, #1
   1d5dc:	4b04      	ldr	r3, [pc, #16]	; (1d5f0 <cpu_irq_leave_critical+0x2c>)
   1d5de:	701a      	strb	r2, [r3, #0]
   1d5e0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   1d5e4:	b662      	cpsie	i
	}
}
   1d5e6:	4770      	bx	lr
   1d5e8:	20003cbc 	.word	0x20003cbc
   1d5ec:	20003cc0 	.word	0x20003cc0
   1d5f0:	200000de 	.word	0x200000de

0001d5f4 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
   1d5f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d5f6:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
   1d5f8:	ac01      	add	r4, sp, #4
   1d5fa:	2501      	movs	r5, #1
   1d5fc:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
   1d5fe:	2700      	movs	r7, #0
   1d600:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   1d602:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
   1d604:	0021      	movs	r1, r4
   1d606:	2017      	movs	r0, #23
   1d608:	4e06      	ldr	r6, [pc, #24]	; (1d624 <system_board_init+0x30>)
   1d60a:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
   1d60c:	2280      	movs	r2, #128	; 0x80
   1d60e:	0412      	lsls	r2, r2, #16
   1d610:	4b05      	ldr	r3, [pc, #20]	; (1d628 <system_board_init+0x34>)
   1d612:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
	
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   1d614:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
   1d616:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
   1d618:	0021      	movs	r1, r4
   1d61a:	2037      	movs	r0, #55	; 0x37
   1d61c:	47b0      	blx	r6
}
   1d61e:	b003      	add	sp, #12
   1d620:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d622:	46c0      	nop			; (mov r8, r8)
   1d624:	0001d7fd 	.word	0x0001d7fd
   1d628:	41004400 	.word	0x41004400

0001d62c <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   1d62c:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
   1d62e:	2a00      	cmp	r2, #0
   1d630:	d001      	beq.n	1d636 <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
   1d632:	0018      	movs	r0, r3
   1d634:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
   1d636:	008b      	lsls	r3, r1, #2
   1d638:	4a06      	ldr	r2, [pc, #24]	; (1d654 <extint_register_callback+0x28>)
   1d63a:	589b      	ldr	r3, [r3, r2]
   1d63c:	2b00      	cmp	r3, #0
   1d63e:	d003      	beq.n	1d648 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
   1d640:	4283      	cmp	r3, r0
   1d642:	d005      	beq.n	1d650 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
   1d644:	231d      	movs	r3, #29
   1d646:	e7f4      	b.n	1d632 <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
   1d648:	0089      	lsls	r1, r1, #2
   1d64a:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
   1d64c:	2300      	movs	r3, #0
   1d64e:	e7f0      	b.n	1d632 <extint_register_callback+0x6>
		return STATUS_OK;
   1d650:	2300      	movs	r3, #0
   1d652:	e7ee      	b.n	1d632 <extint_register_callback+0x6>
   1d654:	200054c4 	.word	0x200054c4

0001d658 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   1d658:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   1d65a:	2900      	cmp	r1, #0
   1d65c:	d001      	beq.n	1d662 <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
   1d65e:	0018      	movs	r0, r3
   1d660:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
   1d662:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
   1d664:	281f      	cmp	r0, #31
   1d666:	d800      	bhi.n	1d66a <extint_chan_enable_callback+0x12>
		return eics[eic_index];
   1d668:	4a02      	ldr	r2, [pc, #8]	; (1d674 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
   1d66a:	2301      	movs	r3, #1
   1d66c:	4083      	lsls	r3, r0
   1d66e:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
   1d670:	2300      	movs	r3, #0
   1d672:	e7f4      	b.n	1d65e <extint_chan_enable_callback+0x6>
   1d674:	40001800 	.word	0x40001800

0001d678 <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   1d678:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   1d67a:	2900      	cmp	r1, #0
   1d67c:	d001      	beq.n	1d682 <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
   1d67e:	0018      	movs	r0, r3
   1d680:	4770      	bx	lr
		return NULL;
   1d682:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
   1d684:	281f      	cmp	r0, #31
   1d686:	d800      	bhi.n	1d68a <extint_chan_disable_callback+0x12>
		return eics[eic_index];
   1d688:	4a02      	ldr	r2, [pc, #8]	; (1d694 <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
   1d68a:	2301      	movs	r3, #1
   1d68c:	4083      	lsls	r3, r0
   1d68e:	6093      	str	r3, [r2, #8]
	return STATUS_OK;
   1d690:	2300      	movs	r3, #0
   1d692:	e7f4      	b.n	1d67e <extint_chan_disable_callback+0x6>
   1d694:	40001800 	.word	0x40001800

0001d698 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
   1d698:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   1d69a:	2200      	movs	r2, #0
   1d69c:	4b10      	ldr	r3, [pc, #64]	; (1d6e0 <EIC_Handler+0x48>)
   1d69e:	701a      	strb	r2, [r3, #0]
   1d6a0:	2300      	movs	r3, #0
   1d6a2:	4910      	ldr	r1, [pc, #64]	; (1d6e4 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
   1d6a4:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
   1d6a6:	4e10      	ldr	r6, [pc, #64]	; (1d6e8 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   1d6a8:	4c0d      	ldr	r4, [pc, #52]	; (1d6e0 <EIC_Handler+0x48>)
   1d6aa:	e00a      	b.n	1d6c2 <EIC_Handler+0x2a>
		return eics[eic_index];
   1d6ac:	490d      	ldr	r1, [pc, #52]	; (1d6e4 <EIC_Handler+0x4c>)
   1d6ae:	e008      	b.n	1d6c2 <EIC_Handler+0x2a>
   1d6b0:	7823      	ldrb	r3, [r4, #0]
   1d6b2:	3301      	adds	r3, #1
   1d6b4:	b2db      	uxtb	r3, r3
   1d6b6:	7023      	strb	r3, [r4, #0]
   1d6b8:	2b0f      	cmp	r3, #15
   1d6ba:	d810      	bhi.n	1d6de <EIC_Handler+0x46>
		return NULL;
   1d6bc:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
   1d6be:	2b1f      	cmp	r3, #31
   1d6c0:	d9f4      	bls.n	1d6ac <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
   1d6c2:	0028      	movs	r0, r5
   1d6c4:	4018      	ands	r0, r3
   1d6c6:	2201      	movs	r2, #1
   1d6c8:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
   1d6ca:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
   1d6cc:	4210      	tst	r0, r2
   1d6ce:	d0ef      	beq.n	1d6b0 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
   1d6d0:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
   1d6d2:	009b      	lsls	r3, r3, #2
   1d6d4:	599b      	ldr	r3, [r3, r6]
   1d6d6:	2b00      	cmp	r3, #0
   1d6d8:	d0ea      	beq.n	1d6b0 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
   1d6da:	4798      	blx	r3
   1d6dc:	e7e8      	b.n	1d6b0 <EIC_Handler+0x18>
			}
		}
	}
}
   1d6de:	bd70      	pop	{r4, r5, r6, pc}
   1d6e0:	200054c0 	.word	0x200054c0
   1d6e4:	40001800 	.word	0x40001800
   1d6e8:	200054c4 	.word	0x200054c4

0001d6ec <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
   1d6ec:	4a04      	ldr	r2, [pc, #16]	; (1d700 <_extint_enable+0x14>)
   1d6ee:	7813      	ldrb	r3, [r2, #0]
   1d6f0:	2102      	movs	r1, #2
   1d6f2:	430b      	orrs	r3, r1
   1d6f4:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
   1d6f6:	7853      	ldrb	r3, [r2, #1]
   1d6f8:	b25b      	sxtb	r3, r3
   1d6fa:	2b00      	cmp	r3, #0
   1d6fc:	dbfb      	blt.n	1d6f6 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
   1d6fe:	4770      	bx	lr
   1d700:	40001800 	.word	0x40001800

0001d704 <_system_extint_init>:
{
   1d704:	b500      	push	{lr}
   1d706:	b083      	sub	sp, #12
			PM->APBAMASK.reg |= mask;
   1d708:	4a12      	ldr	r2, [pc, #72]	; (1d754 <_system_extint_init+0x50>)
   1d70a:	6993      	ldr	r3, [r2, #24]
   1d70c:	2140      	movs	r1, #64	; 0x40
   1d70e:	430b      	orrs	r3, r1
   1d710:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   1d712:	a901      	add	r1, sp, #4
   1d714:	2300      	movs	r3, #0
   1d716:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
   1d718:	2005      	movs	r0, #5
   1d71a:	4b0f      	ldr	r3, [pc, #60]	; (1d758 <_system_extint_init+0x54>)
   1d71c:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
   1d71e:	2005      	movs	r0, #5
   1d720:	4b0e      	ldr	r3, [pc, #56]	; (1d75c <_system_extint_init+0x58>)
   1d722:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
   1d724:	4a0e      	ldr	r2, [pc, #56]	; (1d760 <_system_extint_init+0x5c>)
   1d726:	7813      	ldrb	r3, [r2, #0]
   1d728:	2101      	movs	r1, #1
   1d72a:	430b      	orrs	r3, r1
   1d72c:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
   1d72e:	7853      	ldrb	r3, [r2, #1]
   1d730:	b25b      	sxtb	r3, r3
   1d732:	2b00      	cmp	r3, #0
   1d734:	dbfb      	blt.n	1d72e <_system_extint_init+0x2a>
   1d736:	4b0b      	ldr	r3, [pc, #44]	; (1d764 <_system_extint_init+0x60>)
   1d738:	0019      	movs	r1, r3
   1d73a:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
   1d73c:	2200      	movs	r2, #0
   1d73e:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   1d740:	4299      	cmp	r1, r3
   1d742:	d1fc      	bne.n	1d73e <_system_extint_init+0x3a>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1d744:	2210      	movs	r2, #16
   1d746:	4b08      	ldr	r3, [pc, #32]	; (1d768 <_system_extint_init+0x64>)
   1d748:	601a      	str	r2, [r3, #0]
	_extint_enable();
   1d74a:	4b08      	ldr	r3, [pc, #32]	; (1d76c <_system_extint_init+0x68>)
   1d74c:	4798      	blx	r3
}
   1d74e:	b003      	add	sp, #12
   1d750:	bd00      	pop	{pc}
   1d752:	46c0      	nop			; (mov r8, r8)
   1d754:	40000400 	.word	0x40000400
   1d758:	0001f139 	.word	0x0001f139
   1d75c:	0001f0ad 	.word	0x0001f0ad
   1d760:	40001800 	.word	0x40001800
   1d764:	200054c4 	.word	0x200054c4
   1d768:	e000e100 	.word	0xe000e100
   1d76c:	0001d6ed 	.word	0x0001d6ed

0001d770 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
   1d770:	2300      	movs	r3, #0
   1d772:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
   1d774:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
   1d776:	2201      	movs	r2, #1
   1d778:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
   1d77a:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
   1d77c:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
   1d77e:	3302      	adds	r3, #2
   1d780:	72c3      	strb	r3, [r0, #11]
}
   1d782:	4770      	bx	lr

0001d784 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
   1d784:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d786:	b083      	sub	sp, #12
   1d788:	0005      	movs	r5, r0
   1d78a:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   1d78c:	a901      	add	r1, sp, #4
   1d78e:	2300      	movs	r3, #0
   1d790:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
   1d792:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
   1d794:	7923      	ldrb	r3, [r4, #4]
   1d796:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
   1d798:	7a23      	ldrb	r3, [r4, #8]
   1d79a:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
   1d79c:	7820      	ldrb	r0, [r4, #0]
   1d79e:	4b15      	ldr	r3, [pc, #84]	; (1d7f4 <extint_chan_set_config+0x70>)
   1d7a0:	4798      	blx	r3
		return NULL;
   1d7a2:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
   1d7a4:	2d1f      	cmp	r5, #31
   1d7a6:	d800      	bhi.n	1d7aa <extint_chan_set_config+0x26>
		return eics[eic_index];
   1d7a8:	4813      	ldr	r0, [pc, #76]	; (1d7f8 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
   1d7aa:	2207      	movs	r2, #7
   1d7ac:	402a      	ands	r2, r5
   1d7ae:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
   1d7b0:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
   1d7b2:	7aa3      	ldrb	r3, [r4, #10]
   1d7b4:	2b00      	cmp	r3, #0
   1d7b6:	d001      	beq.n	1d7bc <extint_chan_set_config+0x38>
   1d7b8:	2308      	movs	r3, #8
   1d7ba:	431f      	orrs	r7, r3
   1d7bc:	08eb      	lsrs	r3, r5, #3
   1d7be:	009b      	lsls	r3, r3, #2
   1d7c0:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
   1d7c2:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   1d7c4:	260f      	movs	r6, #15
   1d7c6:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   1d7c8:	43b1      	bics	r1, r6
			(new_config << config_pos);
   1d7ca:	4097      	lsls	r7, r2
   1d7cc:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   1d7ce:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
   1d7d0:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
   1d7d2:	7a63      	ldrb	r3, [r4, #9]
   1d7d4:	2b00      	cmp	r3, #0
   1d7d6:	d106      	bne.n	1d7e6 <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
   1d7d8:	6943      	ldr	r3, [r0, #20]
   1d7da:	2201      	movs	r2, #1
   1d7dc:	40aa      	lsls	r2, r5
   1d7de:	4393      	bics	r3, r2
   1d7e0:	6143      	str	r3, [r0, #20]
	}
}
   1d7e2:	b003      	add	sp, #12
   1d7e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
   1d7e6:	6942      	ldr	r2, [r0, #20]
   1d7e8:	2301      	movs	r3, #1
   1d7ea:	40ab      	lsls	r3, r5
   1d7ec:	4313      	orrs	r3, r2
   1d7ee:	6143      	str	r3, [r0, #20]
   1d7f0:	e7f7      	b.n	1d7e2 <extint_chan_set_config+0x5e>
   1d7f2:	46c0      	nop			; (mov r8, r8)
   1d7f4:	0001f261 	.word	0x0001f261
   1d7f8:	40001800 	.word	0x40001800

0001d7fc <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
   1d7fc:	b500      	push	{lr}
   1d7fe:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
   1d800:	ab01      	add	r3, sp, #4
   1d802:	2280      	movs	r2, #128	; 0x80
   1d804:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
   1d806:	780a      	ldrb	r2, [r1, #0]
   1d808:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
   1d80a:	784a      	ldrb	r2, [r1, #1]
   1d80c:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
   1d80e:	788a      	ldrb	r2, [r1, #2]
   1d810:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   1d812:	0019      	movs	r1, r3
   1d814:	4b01      	ldr	r3, [pc, #4]	; (1d81c <port_pin_set_config+0x20>)
   1d816:	4798      	blx	r3
}
   1d818:	b003      	add	sp, #12
   1d81a:	bd00      	pop	{pc}
   1d81c:	0001f261 	.word	0x0001f261

0001d820 <rtc_calendar_enable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   1d820:	6801      	ldr	r1, [r0, #0]
   1d822:	2208      	movs	r2, #8
   1d824:	4b05      	ldr	r3, [pc, #20]	; (1d83c <rtc_calendar_enable+0x1c>)
   1d826:	601a      	str	r2, [r3, #0]
	Rtc *const rtc_module = module->hw;
   1d828:	6802      	ldr	r2, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
   1d82a:	7a93      	ldrb	r3, [r2, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
   1d82c:	b25b      	sxtb	r3, r3
   1d82e:	2b00      	cmp	r3, #0
   1d830:	dbfb      	blt.n	1d82a <rtc_calendar_enable+0xa>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
   1d832:	880b      	ldrh	r3, [r1, #0]
   1d834:	2202      	movs	r2, #2
   1d836:	4313      	orrs	r3, r2
   1d838:	800b      	strh	r3, [r1, #0]
}
   1d83a:	4770      	bx	lr
   1d83c:	e000e100 	.word	0xe000e100

0001d840 <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
   1d840:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   1d842:	6802      	ldr	r2, [r0, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1d844:	2408      	movs	r4, #8
   1d846:	2380      	movs	r3, #128	; 0x80
   1d848:	4907      	ldr	r1, [pc, #28]	; (1d868 <rtc_calendar_disable+0x28>)
   1d84a:	50cc      	str	r4, [r1, r3]
	Rtc *const rtc_module = module->hw;
   1d84c:	6801      	ldr	r1, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
   1d84e:	7a8b      	ldrb	r3, [r1, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
   1d850:	b25b      	sxtb	r3, r3
   1d852:	2b00      	cmp	r3, #0
   1d854:	dbfb      	blt.n	1d84e <rtc_calendar_disable+0xe>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
   1d856:	23c1      	movs	r3, #193	; 0xc1
   1d858:	7193      	strb	r3, [r2, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
   1d85a:	7213      	strb	r3, [r2, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
   1d85c:	8813      	ldrh	r3, [r2, #0]
   1d85e:	2102      	movs	r1, #2
   1d860:	438b      	bics	r3, r1
   1d862:	8013      	strh	r3, [r2, #0]
}
   1d864:	bd10      	pop	{r4, pc}
   1d866:	46c0      	nop			; (mov r8, r8)
   1d868:	e000e100 	.word	0xe000e100

0001d86c <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
   1d86c:	b570      	push	{r4, r5, r6, lr}
   1d86e:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   1d870:	6805      	ldr	r5, [r0, #0]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
   1d872:	4b07      	ldr	r3, [pc, #28]	; (1d890 <rtc_calendar_reset+0x24>)
   1d874:	4798      	blx	r3

#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
   1d876:	2300      	movs	r3, #0
   1d878:	8223      	strh	r3, [r4, #16]
	module->enabled_callback    = 0;
   1d87a:	8263      	strh	r3, [r4, #18]
	Rtc *const rtc_module = module->hw;
   1d87c:	6822      	ldr	r2, [r4, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
   1d87e:	7a93      	ldrb	r3, [r2, #10]
#endif

	while (rtc_calendar_is_syncing(module)) {
   1d880:	b25b      	sxtb	r3, r3
   1d882:	2b00      	cmp	r3, #0
   1d884:	dbfb      	blt.n	1d87e <rtc_calendar_reset+0x12>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
   1d886:	882b      	ldrh	r3, [r5, #0]
   1d888:	2201      	movs	r2, #1
   1d88a:	4313      	orrs	r3, r2
   1d88c:	802b      	strh	r3, [r5, #0]
}
   1d88e:	bd70      	pop	{r4, r5, r6, pc}
   1d890:	0001d841 	.word	0x0001d841

0001d894 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
   1d894:	b510      	push	{r4, lr}
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
   1d896:	88cb      	ldrh	r3, [r1, #6]
   1d898:	88c2      	ldrh	r2, [r0, #6]
   1d89a:	1a9a      	subs	r2, r3, r2
   1d89c:	0692      	lsls	r2, r2, #26
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
   1d89e:	794b      	ldrb	r3, [r1, #5]
   1d8a0:	059b      	lsls	r3, r3, #22

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
   1d8a2:	790c      	ldrb	r4, [r1, #4]
   1d8a4:	0464      	lsls	r4, r4, #17

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
   1d8a6:	4323      	orrs	r3, r4
   1d8a8:	788c      	ldrb	r4, [r1, #2]
   1d8aa:	0324      	lsls	r4, r4, #12
   1d8ac:	4323      	orrs	r3, r4
   1d8ae:	4313      	orrs	r3, r2

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
   1d8b0:	7902      	ldrb	r2, [r0, #4]
   1d8b2:	2a00      	cmp	r2, #0
   1d8b4:	d105      	bne.n	1d8c2 <rtc_calendar_time_to_register_value+0x2e>
   1d8b6:	78ca      	ldrb	r2, [r1, #3]
   1d8b8:	2a00      	cmp	r2, #0
   1d8ba:	d002      	beq.n	1d8c2 <rtc_calendar_time_to_register_value+0x2e>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
   1d8bc:	2280      	movs	r2, #128	; 0x80
   1d8be:	0252      	lsls	r2, r2, #9
   1d8c0:	4313      	orrs	r3, r2
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
   1d8c2:	7848      	ldrb	r0, [r1, #1]
   1d8c4:	0180      	lsls	r0, r0, #6

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
   1d8c6:	780a      	ldrb	r2, [r1, #0]
   1d8c8:	4310      	orrs	r0, r2
   1d8ca:	4318      	orrs	r0, r3

	return register_value;
}
   1d8cc:	bd10      	pop	{r4, pc}

0001d8ce <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
   1d8ce:	b510      	push	{r4, lr}
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   1d8d0:	0e8b      	lsrs	r3, r1, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
   1d8d2:	88c4      	ldrh	r4, [r0, #6]
   1d8d4:	191b      	adds	r3, r3, r4
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   1d8d6:	80d3      	strh	r3, [r2, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
   1d8d8:	018b      	lsls	r3, r1, #6
   1d8da:	0f1b      	lsrs	r3, r3, #28
   1d8dc:	7153      	strb	r3, [r2, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
   1d8de:	028b      	lsls	r3, r1, #10
   1d8e0:	0edb      	lsrs	r3, r3, #27
   1d8e2:	7113      	strb	r3, [r2, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
   1d8e4:	7903      	ldrb	r3, [r0, #4]
   1d8e6:	2b00      	cmp	r3, #0
   1d8e8:	d10c      	bne.n	1d904 <rtc_calendar_register_value_to_time+0x36>
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
   1d8ea:	040b      	lsls	r3, r1, #16
   1d8ec:	0f1b      	lsrs	r3, r3, #28
		time->hour = ((register_value &
   1d8ee:	7093      	strb	r3, [r2, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
   1d8f0:	03cb      	lsls	r3, r1, #15
   1d8f2:	0fdb      	lsrs	r3, r3, #31
   1d8f4:	70d3      	strb	r3, [r2, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
   1d8f6:	0988      	lsrs	r0, r1, #6
   1d8f8:	233f      	movs	r3, #63	; 0x3f
   1d8fa:	4018      	ands	r0, r3
   1d8fc:	7050      	strb	r0, [r2, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
   1d8fe:	4019      	ands	r1, r3
   1d900:	7011      	strb	r1, [r2, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
   1d902:	bd10      	pop	{r4, pc}
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
   1d904:	03cb      	lsls	r3, r1, #15
   1d906:	0edb      	lsrs	r3, r3, #27
   1d908:	7093      	strb	r3, [r2, #2]
   1d90a:	e7f4      	b.n	1d8f6 <rtc_calendar_register_value_to_time+0x28>

0001d90c <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
   1d90c:	b510      	push	{r4, lr}
   1d90e:	000a      	movs	r2, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   1d910:	6803      	ldr	r3, [r0, #0]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
   1d912:	7941      	ldrb	r1, [r0, #5]
   1d914:	2900      	cmp	r1, #0
   1d916:	d006      	beq.n	1d926 <rtc_calendar_get_time+0x1a>
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;

		while (rtc_calendar_is_syncing(module)) {
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
   1d918:	8859      	ldrh	r1, [r3, #2]
   1d91a:	0449      	lsls	r1, r1, #17
   1d91c:	d50b      	bpl.n	1d936 <rtc_calendar_get_time+0x2a>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
   1d91e:	6919      	ldr	r1, [r3, #16]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
   1d920:	4b0a      	ldr	r3, [pc, #40]	; (1d94c <rtc_calendar_get_time+0x40>)
   1d922:	4798      	blx	r3
}
   1d924:	bd10      	pop	{r4, pc}
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
   1d926:	490a      	ldr	r1, [pc, #40]	; (1d950 <rtc_calendar_get_time+0x44>)
   1d928:	8059      	strh	r1, [r3, #2]
	Rtc *const rtc_module = module->hw;
   1d92a:	6804      	ldr	r4, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
   1d92c:	7aa1      	ldrb	r1, [r4, #10]
		while (rtc_calendar_is_syncing(module)) {
   1d92e:	b249      	sxtb	r1, r1
   1d930:	2900      	cmp	r1, #0
   1d932:	dbfb      	blt.n	1d92c <rtc_calendar_get_time+0x20>
   1d934:	e7f3      	b.n	1d91e <rtc_calendar_get_time+0x12>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
   1d936:	8859      	ldrh	r1, [r3, #2]
   1d938:	24c0      	movs	r4, #192	; 0xc0
   1d93a:	0224      	lsls	r4, r4, #8
   1d93c:	4321      	orrs	r1, r4
   1d93e:	8059      	strh	r1, [r3, #2]
	Rtc *const rtc_module = module->hw;
   1d940:	6804      	ldr	r4, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
   1d942:	7aa1      	ldrb	r1, [r4, #10]
		while (rtc_calendar_is_syncing(module)) {
   1d944:	b249      	sxtb	r1, r1
   1d946:	2900      	cmp	r1, #0
   1d948:	dbfb      	blt.n	1d942 <rtc_calendar_get_time+0x36>
   1d94a:	e7e8      	b.n	1d91e <rtc_calendar_get_time+0x12>
   1d94c:	0001d8cf 	.word	0x0001d8cf
   1d950:	ffff8000 	.word	0xffff8000

0001d954 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
   1d954:	b570      	push	{r4, r5, r6, lr}
   1d956:	000d      	movs	r5, r1
   1d958:	0014      	movs	r4, r2

	Rtc *const rtc_module = module->hw;

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
		return STATUS_ERR_INVALID_ARG;
   1d95a:	2317      	movs	r3, #23
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
   1d95c:	2a01      	cmp	r2, #1
   1d95e:	d901      	bls.n	1d964 <rtc_calendar_set_alarm+0x10>

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;

	return STATUS_OK;
}
   1d960:	0018      	movs	r0, r3
   1d962:	bd70      	pop	{r4, r5, r6, pc}
	Rtc *const rtc_module = module->hw;
   1d964:	6806      	ldr	r6, [r0, #0]
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
   1d966:	4b06      	ldr	r3, [pc, #24]	; (1d980 <rtc_calendar_set_alarm+0x2c>)
   1d968:	4798      	blx	r3
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
   1d96a:	7ab3      	ldrb	r3, [r6, #10]
	while (rtc_calendar_is_syncing(module)) {
   1d96c:	b25b      	sxtb	r3, r3
   1d96e:	2b00      	cmp	r3, #0
   1d970:	dbfb      	blt.n	1d96a <rtc_calendar_set_alarm+0x16>
   1d972:	00e4      	lsls	r4, r4, #3
   1d974:	1934      	adds	r4, r6, r4
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
   1d976:	61a0      	str	r0, [r4, #24]
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
   1d978:	7a2b      	ldrb	r3, [r5, #8]
   1d97a:	7723      	strb	r3, [r4, #28]
	return STATUS_OK;
   1d97c:	2300      	movs	r3, #0
   1d97e:	e7ef      	b.n	1d960 <rtc_calendar_set_alarm+0xc>
   1d980:	0001d895 	.word	0x0001d895

0001d984 <rtc_calendar_init>:
{
   1d984:	b530      	push	{r4, r5, lr}
   1d986:	b083      	sub	sp, #12
   1d988:	0005      	movs	r5, r0
   1d98a:	0014      	movs	r4, r2
	module->hw = hw;
   1d98c:	6001      	str	r1, [r0, #0]
   1d98e:	4a1c      	ldr	r2, [pc, #112]	; (1da00 <rtc_calendar_init+0x7c>)
   1d990:	6993      	ldr	r3, [r2, #24]
   1d992:	2120      	movs	r1, #32
   1d994:	430b      	orrs	r3, r1
   1d996:	6193      	str	r3, [r2, #24]
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
   1d998:	a901      	add	r1, sp, #4
   1d99a:	2302      	movs	r3, #2
   1d99c:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
   1d99e:	2004      	movs	r0, #4
   1d9a0:	4b18      	ldr	r3, [pc, #96]	; (1da04 <rtc_calendar_init+0x80>)
   1d9a2:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
   1d9a4:	2004      	movs	r0, #4
   1d9a6:	4b18      	ldr	r3, [pc, #96]	; (1da08 <rtc_calendar_init+0x84>)
   1d9a8:	4798      	blx	r3
	rtc_calendar_reset(module);
   1d9aa:	0028      	movs	r0, r5
   1d9ac:	4b17      	ldr	r3, [pc, #92]	; (1da0c <rtc_calendar_init+0x88>)
   1d9ae:	4798      	blx	r3
	module->clock_24h           = config->clock_24h;
   1d9b0:	7923      	ldrb	r3, [r4, #4]
   1d9b2:	712b      	strb	r3, [r5, #4]
	module->continuously_update = config->continuously_update;
   1d9b4:	78e3      	ldrb	r3, [r4, #3]
   1d9b6:	716b      	strb	r3, [r5, #5]
	module->year_init_value     = config->year_init_value;
   1d9b8:	88e3      	ldrh	r3, [r4, #6]
   1d9ba:	80eb      	strh	r3, [r5, #6]
	_rtc_instance[0] = module;
   1d9bc:	4b14      	ldr	r3, [pc, #80]	; (1da10 <rtc_calendar_init+0x8c>)
   1d9be:	601d      	str	r5, [r3, #0]
	Rtc *const rtc_module = module->hw;
   1d9c0:	682a      	ldr	r2, [r5, #0]
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
   1d9c2:	8823      	ldrh	r3, [r4, #0]
	if (!(config->clock_24h)) {
   1d9c4:	7921      	ldrb	r1, [r4, #4]
   1d9c6:	2900      	cmp	r1, #0
   1d9c8:	d017      	beq.n	1d9fa <rtc_calendar_init+0x76>
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
   1d9ca:	2108      	movs	r1, #8
   1d9cc:	430b      	orrs	r3, r1
	if (config->clear_on_match) {
   1d9ce:	78a1      	ldrb	r1, [r4, #2]
   1d9d0:	2900      	cmp	r1, #0
   1d9d2:	d001      	beq.n	1d9d8 <rtc_calendar_init+0x54>
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
   1d9d4:	2180      	movs	r1, #128	; 0x80
   1d9d6:	430b      	orrs	r3, r1
	rtc_module->MODE2.CTRL.reg = tmp_reg;
   1d9d8:	8013      	strh	r3, [r2, #0]
	if (config->continuously_update) {
   1d9da:	78e3      	ldrb	r3, [r4, #3]
   1d9dc:	2b00      	cmp	r3, #0
   1d9de:	d004      	beq.n	1d9ea <rtc_calendar_init+0x66>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
   1d9e0:	8853      	ldrh	r3, [r2, #2]
   1d9e2:	2180      	movs	r1, #128	; 0x80
   1d9e4:	01c9      	lsls	r1, r1, #7
   1d9e6:	430b      	orrs	r3, r1
   1d9e8:	8053      	strh	r3, [r2, #2]
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
   1d9ea:	0021      	movs	r1, r4
   1d9ec:	3108      	adds	r1, #8
   1d9ee:	2200      	movs	r2, #0
   1d9f0:	0028      	movs	r0, r5
   1d9f2:	4b08      	ldr	r3, [pc, #32]	; (1da14 <rtc_calendar_init+0x90>)
   1d9f4:	4798      	blx	r3
}
   1d9f6:	b003      	add	sp, #12
   1d9f8:	bd30      	pop	{r4, r5, pc}
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
   1d9fa:	2148      	movs	r1, #72	; 0x48
   1d9fc:	430b      	orrs	r3, r1
   1d9fe:	e7e6      	b.n	1d9ce <rtc_calendar_init+0x4a>
   1da00:	40000400 	.word	0x40000400
   1da04:	0001f139 	.word	0x0001f139
   1da08:	0001f0ad 	.word	0x0001f0ad
   1da0c:	0001d86d 	.word	0x0001d86d
   1da10:	20005504 	.word	0x20005504
   1da14:	0001d955 	.word	0x0001d955

0001da18 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
   1da18:	b510      	push	{r4, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
   1da1a:	4b0f      	ldr	r3, [pc, #60]	; (1da58 <RTC_Handler+0x40>)
   1da1c:	681a      	ldr	r2, [r3, #0]
	Rtc *const rtc_module = module->hw;
   1da1e:	6814      	ldr	r4, [r2, #0]
	uint16_t callback_mask = module->enabled_callback;
   1da20:	8a51      	ldrh	r1, [r2, #18]
	callback_mask &= module->registered_callback;
   1da22:	8a13      	ldrh	r3, [r2, #16]
   1da24:	4019      	ands	r1, r3
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
   1da26:	7a20      	ldrb	r0, [r4, #8]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
   1da28:	79e3      	ldrb	r3, [r4, #7]
   1da2a:	4003      	ands	r3, r0
	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
   1da2c:	b258      	sxtb	r0, r3
   1da2e:	2800      	cmp	r0, #0
   1da30:	db06      	blt.n	1da40 <RTC_Handler+0x28>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
   1da32:	07db      	lsls	r3, r3, #31
   1da34:	d503      	bpl.n	1da3e <RTC_Handler+0x26>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
   1da36:	07cb      	lsls	r3, r1, #31
   1da38:	d40a      	bmi.n	1da50 <RTC_Handler+0x38>
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
   1da3a:	2301      	movs	r3, #1
   1da3c:	7223      	strb	r3, [r4, #8]
	_rtc_interrupt_handler(0);
}
   1da3e:	bd10      	pop	{r4, pc}
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
   1da40:	078b      	lsls	r3, r1, #30
   1da42:	d402      	bmi.n	1da4a <RTC_Handler+0x32>
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
   1da44:	2380      	movs	r3, #128	; 0x80
   1da46:	7223      	strb	r3, [r4, #8]
   1da48:	e7f9      	b.n	1da3e <RTC_Handler+0x26>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
   1da4a:	68d3      	ldr	r3, [r2, #12]
   1da4c:	4798      	blx	r3
   1da4e:	e7f9      	b.n	1da44 <RTC_Handler+0x2c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
   1da50:	6893      	ldr	r3, [r2, #8]
   1da52:	4798      	blx	r3
   1da54:	e7f1      	b.n	1da3a <RTC_Handler+0x22>
   1da56:	46c0      	nop			; (mov r8, r8)
   1da58:	20005504 	.word	0x20005504

0001da5c <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
   1da5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1da5e:	46de      	mov	lr, fp
   1da60:	4657      	mov	r7, sl
   1da62:	464e      	mov	r6, r9
   1da64:	4645      	mov	r5, r8
   1da66:	b5e0      	push	{r5, r6, r7, lr}
   1da68:	b087      	sub	sp, #28
   1da6a:	4680      	mov	r8, r0
   1da6c:	9104      	str	r1, [sp, #16]
   1da6e:	0016      	movs	r6, r2
   1da70:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
   1da72:	2200      	movs	r2, #0
   1da74:	2300      	movs	r3, #0
   1da76:	2100      	movs	r1, #0
   1da78:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
   1da7a:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
   1da7c:	2001      	movs	r0, #1
   1da7e:	0021      	movs	r1, r4
   1da80:	9600      	str	r6, [sp, #0]
   1da82:	9701      	str	r7, [sp, #4]
   1da84:	465c      	mov	r4, fp
   1da86:	9403      	str	r4, [sp, #12]
   1da88:	4644      	mov	r4, r8
   1da8a:	9405      	str	r4, [sp, #20]
   1da8c:	e013      	b.n	1dab6 <long_division+0x5a>
   1da8e:	2420      	movs	r4, #32
   1da90:	1a64      	subs	r4, r4, r1
   1da92:	0005      	movs	r5, r0
   1da94:	40e5      	lsrs	r5, r4
   1da96:	46a8      	mov	r8, r5
   1da98:	e014      	b.n	1dac4 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
   1da9a:	9c00      	ldr	r4, [sp, #0]
   1da9c:	9d01      	ldr	r5, [sp, #4]
   1da9e:	1b12      	subs	r2, r2, r4
   1daa0:	41ab      	sbcs	r3, r5
			q |= bit_shift;
   1daa2:	465c      	mov	r4, fp
   1daa4:	464d      	mov	r5, r9
   1daa6:	432c      	orrs	r4, r5
   1daa8:	46a3      	mov	fp, r4
   1daaa:	9c03      	ldr	r4, [sp, #12]
   1daac:	4645      	mov	r5, r8
   1daae:	432c      	orrs	r4, r5
   1dab0:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
   1dab2:	3901      	subs	r1, #1
   1dab4:	d325      	bcc.n	1db02 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
   1dab6:	2420      	movs	r4, #32
   1dab8:	4264      	negs	r4, r4
   1daba:	190c      	adds	r4, r1, r4
   1dabc:	d4e7      	bmi.n	1da8e <long_division+0x32>
   1dabe:	0005      	movs	r5, r0
   1dac0:	40a5      	lsls	r5, r4
   1dac2:	46a8      	mov	r8, r5
   1dac4:	0004      	movs	r4, r0
   1dac6:	408c      	lsls	r4, r1
   1dac8:	46a1      	mov	r9, r4
		r = r << 1;
   1daca:	1892      	adds	r2, r2, r2
   1dacc:	415b      	adcs	r3, r3
   1dace:	0014      	movs	r4, r2
   1dad0:	001d      	movs	r5, r3
		if (n & bit_shift) {
   1dad2:	9e05      	ldr	r6, [sp, #20]
   1dad4:	464f      	mov	r7, r9
   1dad6:	403e      	ands	r6, r7
   1dad8:	46b4      	mov	ip, r6
   1dada:	9e04      	ldr	r6, [sp, #16]
   1dadc:	4647      	mov	r7, r8
   1dade:	403e      	ands	r6, r7
   1dae0:	46b2      	mov	sl, r6
   1dae2:	4666      	mov	r6, ip
   1dae4:	4657      	mov	r7, sl
   1dae6:	433e      	orrs	r6, r7
   1dae8:	d003      	beq.n	1daf2 <long_division+0x96>
			r |= 0x01;
   1daea:	0006      	movs	r6, r0
   1daec:	4326      	orrs	r6, r4
   1daee:	0032      	movs	r2, r6
   1daf0:	002b      	movs	r3, r5
		if (r >= d) {
   1daf2:	9c00      	ldr	r4, [sp, #0]
   1daf4:	9d01      	ldr	r5, [sp, #4]
   1daf6:	429d      	cmp	r5, r3
   1daf8:	d8db      	bhi.n	1dab2 <long_division+0x56>
   1dafa:	d1ce      	bne.n	1da9a <long_division+0x3e>
   1dafc:	4294      	cmp	r4, r2
   1dafe:	d8d8      	bhi.n	1dab2 <long_division+0x56>
   1db00:	e7cb      	b.n	1da9a <long_division+0x3e>
   1db02:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
   1db04:	4658      	mov	r0, fp
   1db06:	0019      	movs	r1, r3
   1db08:	b007      	add	sp, #28
   1db0a:	bc3c      	pop	{r2, r3, r4, r5}
   1db0c:	4690      	mov	r8, r2
   1db0e:	4699      	mov	r9, r3
   1db10:	46a2      	mov	sl, r4
   1db12:	46ab      	mov	fp, r5
   1db14:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001db16 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
   1db16:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
   1db18:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   1db1a:	2340      	movs	r3, #64	; 0x40
   1db1c:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
   1db1e:	4281      	cmp	r1, r0
   1db20:	d202      	bcs.n	1db28 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
   1db22:	0018      	movs	r0, r3
   1db24:	bd10      	pop	{r4, pc}
		baud_calculated++;
   1db26:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
   1db28:	1a09      	subs	r1, r1, r0
		baud_calculated++;
   1db2a:	1c63      	adds	r3, r4, #1
   1db2c:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
   1db2e:	4288      	cmp	r0, r1
   1db30:	d9f9      	bls.n	1db26 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   1db32:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
   1db34:	2cff      	cmp	r4, #255	; 0xff
   1db36:	d8f4      	bhi.n	1db22 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
   1db38:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
   1db3a:	2300      	movs	r3, #0
   1db3c:	e7f1      	b.n	1db22 <_sercom_get_sync_baud_val+0xc>
	...

0001db40 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
   1db40:	b5f0      	push	{r4, r5, r6, r7, lr}
   1db42:	b083      	sub	sp, #12
   1db44:	000f      	movs	r7, r1
   1db46:	0016      	movs	r6, r2
   1db48:	aa08      	add	r2, sp, #32
   1db4a:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
   1db4c:	0004      	movs	r4, r0
   1db4e:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   1db50:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
   1db52:	42bc      	cmp	r4, r7
   1db54:	d902      	bls.n	1db5c <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
   1db56:	0010      	movs	r0, r2
   1db58:	b003      	add	sp, #12
   1db5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
   1db5c:	2b00      	cmp	r3, #0
   1db5e:	d114      	bne.n	1db8a <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
   1db60:	0002      	movs	r2, r0
   1db62:	0008      	movs	r0, r1
   1db64:	2100      	movs	r1, #0
   1db66:	4c19      	ldr	r4, [pc, #100]	; (1dbcc <_sercom_get_async_baud_val+0x8c>)
   1db68:	47a0      	blx	r4
   1db6a:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
   1db6c:	003a      	movs	r2, r7
   1db6e:	2300      	movs	r3, #0
   1db70:	2000      	movs	r0, #0
   1db72:	4c17      	ldr	r4, [pc, #92]	; (1dbd0 <_sercom_get_async_baud_val+0x90>)
   1db74:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
   1db76:	2200      	movs	r2, #0
   1db78:	2301      	movs	r3, #1
   1db7a:	1a12      	subs	r2, r2, r0
   1db7c:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
   1db7e:	0c12      	lsrs	r2, r2, #16
   1db80:	041b      	lsls	r3, r3, #16
   1db82:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
   1db84:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
   1db86:	2200      	movs	r2, #0
   1db88:	e7e5      	b.n	1db56 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
   1db8a:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
   1db8c:	2b01      	cmp	r3, #1
   1db8e:	d1f9      	bne.n	1db84 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
   1db90:	000a      	movs	r2, r1
   1db92:	2300      	movs	r3, #0
   1db94:	2100      	movs	r1, #0
   1db96:	4c0d      	ldr	r4, [pc, #52]	; (1dbcc <_sercom_get_async_baud_val+0x8c>)
   1db98:	47a0      	blx	r4
   1db9a:	0002      	movs	r2, r0
   1db9c:	000b      	movs	r3, r1
   1db9e:	9200      	str	r2, [sp, #0]
   1dba0:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
   1dba2:	0038      	movs	r0, r7
   1dba4:	2100      	movs	r1, #0
   1dba6:	4c0a      	ldr	r4, [pc, #40]	; (1dbd0 <_sercom_get_async_baud_val+0x90>)
   1dba8:	47a0      	blx	r4
   1dbaa:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
   1dbac:	2380      	movs	r3, #128	; 0x80
   1dbae:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   1dbb0:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
   1dbb2:	4298      	cmp	r0, r3
   1dbb4:	d8cf      	bhi.n	1db56 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
   1dbb6:	0f79      	lsrs	r1, r7, #29
   1dbb8:	00f8      	lsls	r0, r7, #3
   1dbba:	9a00      	ldr	r2, [sp, #0]
   1dbbc:	9b01      	ldr	r3, [sp, #4]
   1dbbe:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
   1dbc0:	00ea      	lsls	r2, r5, #3
   1dbc2:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
   1dbc4:	b2d2      	uxtb	r2, r2
   1dbc6:	0352      	lsls	r2, r2, #13
   1dbc8:	432a      	orrs	r2, r5
   1dbca:	e7db      	b.n	1db84 <_sercom_get_async_baud_val+0x44>
   1dbcc:	00024341 	.word	0x00024341
   1dbd0:	0001da5d 	.word	0x0001da5d

0001dbd4 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
   1dbd4:	b510      	push	{r4, lr}
   1dbd6:	b082      	sub	sp, #8
   1dbd8:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
   1dbda:	4b0e      	ldr	r3, [pc, #56]	; (1dc14 <sercom_set_gclk_generator+0x40>)
   1dbdc:	781b      	ldrb	r3, [r3, #0]
   1dbde:	2b00      	cmp	r3, #0
   1dbe0:	d007      	beq.n	1dbf2 <sercom_set_gclk_generator+0x1e>
   1dbe2:	2900      	cmp	r1, #0
   1dbe4:	d105      	bne.n	1dbf2 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
   1dbe6:	4b0b      	ldr	r3, [pc, #44]	; (1dc14 <sercom_set_gclk_generator+0x40>)
   1dbe8:	785b      	ldrb	r3, [r3, #1]
   1dbea:	4283      	cmp	r3, r0
   1dbec:	d010      	beq.n	1dc10 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
   1dbee:	201d      	movs	r0, #29
   1dbf0:	e00c      	b.n	1dc0c <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
   1dbf2:	a901      	add	r1, sp, #4
   1dbf4:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
   1dbf6:	2013      	movs	r0, #19
   1dbf8:	4b07      	ldr	r3, [pc, #28]	; (1dc18 <sercom_set_gclk_generator+0x44>)
   1dbfa:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
   1dbfc:	2013      	movs	r0, #19
   1dbfe:	4b07      	ldr	r3, [pc, #28]	; (1dc1c <sercom_set_gclk_generator+0x48>)
   1dc00:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
   1dc02:	4b04      	ldr	r3, [pc, #16]	; (1dc14 <sercom_set_gclk_generator+0x40>)
   1dc04:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
   1dc06:	2201      	movs	r2, #1
   1dc08:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
   1dc0a:	2000      	movs	r0, #0
}
   1dc0c:	b002      	add	sp, #8
   1dc0e:	bd10      	pop	{r4, pc}
		return STATUS_OK;
   1dc10:	2000      	movs	r0, #0
   1dc12:	e7fb      	b.n	1dc0c <sercom_set_gclk_generator+0x38>
   1dc14:	20003cc4 	.word	0x20003cc4
   1dc18:	0001f139 	.word	0x0001f139
   1dc1c:	0001f0ad 	.word	0x0001f0ad

0001dc20 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
   1dc20:	4b40      	ldr	r3, [pc, #256]	; (1dd24 <_sercom_get_default_pad+0x104>)
   1dc22:	4298      	cmp	r0, r3
   1dc24:	d031      	beq.n	1dc8a <_sercom_get_default_pad+0x6a>
   1dc26:	d90a      	bls.n	1dc3e <_sercom_get_default_pad+0x1e>
   1dc28:	4b3f      	ldr	r3, [pc, #252]	; (1dd28 <_sercom_get_default_pad+0x108>)
   1dc2a:	4298      	cmp	r0, r3
   1dc2c:	d04d      	beq.n	1dcca <_sercom_get_default_pad+0xaa>
   1dc2e:	4b3f      	ldr	r3, [pc, #252]	; (1dd2c <_sercom_get_default_pad+0x10c>)
   1dc30:	4298      	cmp	r0, r3
   1dc32:	d05a      	beq.n	1dcea <_sercom_get_default_pad+0xca>
   1dc34:	4b3e      	ldr	r3, [pc, #248]	; (1dd30 <_sercom_get_default_pad+0x110>)
   1dc36:	4298      	cmp	r0, r3
   1dc38:	d037      	beq.n	1dcaa <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
   1dc3a:	2000      	movs	r0, #0
}
   1dc3c:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
   1dc3e:	4b3d      	ldr	r3, [pc, #244]	; (1dd34 <_sercom_get_default_pad+0x114>)
   1dc40:	4298      	cmp	r0, r3
   1dc42:	d00c      	beq.n	1dc5e <_sercom_get_default_pad+0x3e>
   1dc44:	4b3c      	ldr	r3, [pc, #240]	; (1dd38 <_sercom_get_default_pad+0x118>)
   1dc46:	4298      	cmp	r0, r3
   1dc48:	d1f7      	bne.n	1dc3a <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   1dc4a:	2901      	cmp	r1, #1
   1dc4c:	d017      	beq.n	1dc7e <_sercom_get_default_pad+0x5e>
   1dc4e:	2900      	cmp	r1, #0
   1dc50:	d05d      	beq.n	1dd0e <_sercom_get_default_pad+0xee>
   1dc52:	2902      	cmp	r1, #2
   1dc54:	d015      	beq.n	1dc82 <_sercom_get_default_pad+0x62>
   1dc56:	2903      	cmp	r1, #3
   1dc58:	d015      	beq.n	1dc86 <_sercom_get_default_pad+0x66>
	return 0;
   1dc5a:	2000      	movs	r0, #0
   1dc5c:	e7ee      	b.n	1dc3c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   1dc5e:	2901      	cmp	r1, #1
   1dc60:	d007      	beq.n	1dc72 <_sercom_get_default_pad+0x52>
   1dc62:	2900      	cmp	r1, #0
   1dc64:	d051      	beq.n	1dd0a <_sercom_get_default_pad+0xea>
   1dc66:	2902      	cmp	r1, #2
   1dc68:	d005      	beq.n	1dc76 <_sercom_get_default_pad+0x56>
   1dc6a:	2903      	cmp	r1, #3
   1dc6c:	d005      	beq.n	1dc7a <_sercom_get_default_pad+0x5a>
	return 0;
   1dc6e:	2000      	movs	r0, #0
   1dc70:	e7e4      	b.n	1dc3c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   1dc72:	4832      	ldr	r0, [pc, #200]	; (1dd3c <_sercom_get_default_pad+0x11c>)
   1dc74:	e7e2      	b.n	1dc3c <_sercom_get_default_pad+0x1c>
   1dc76:	4832      	ldr	r0, [pc, #200]	; (1dd40 <_sercom_get_default_pad+0x120>)
   1dc78:	e7e0      	b.n	1dc3c <_sercom_get_default_pad+0x1c>
   1dc7a:	4832      	ldr	r0, [pc, #200]	; (1dd44 <_sercom_get_default_pad+0x124>)
   1dc7c:	e7de      	b.n	1dc3c <_sercom_get_default_pad+0x1c>
   1dc7e:	4832      	ldr	r0, [pc, #200]	; (1dd48 <_sercom_get_default_pad+0x128>)
   1dc80:	e7dc      	b.n	1dc3c <_sercom_get_default_pad+0x1c>
   1dc82:	4832      	ldr	r0, [pc, #200]	; (1dd4c <_sercom_get_default_pad+0x12c>)
   1dc84:	e7da      	b.n	1dc3c <_sercom_get_default_pad+0x1c>
   1dc86:	4832      	ldr	r0, [pc, #200]	; (1dd50 <_sercom_get_default_pad+0x130>)
   1dc88:	e7d8      	b.n	1dc3c <_sercom_get_default_pad+0x1c>
   1dc8a:	2901      	cmp	r1, #1
   1dc8c:	d007      	beq.n	1dc9e <_sercom_get_default_pad+0x7e>
   1dc8e:	2900      	cmp	r1, #0
   1dc90:	d03f      	beq.n	1dd12 <_sercom_get_default_pad+0xf2>
   1dc92:	2902      	cmp	r1, #2
   1dc94:	d005      	beq.n	1dca2 <_sercom_get_default_pad+0x82>
   1dc96:	2903      	cmp	r1, #3
   1dc98:	d005      	beq.n	1dca6 <_sercom_get_default_pad+0x86>
	return 0;
   1dc9a:	2000      	movs	r0, #0
   1dc9c:	e7ce      	b.n	1dc3c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   1dc9e:	482d      	ldr	r0, [pc, #180]	; (1dd54 <_sercom_get_default_pad+0x134>)
   1dca0:	e7cc      	b.n	1dc3c <_sercom_get_default_pad+0x1c>
   1dca2:	482d      	ldr	r0, [pc, #180]	; (1dd58 <_sercom_get_default_pad+0x138>)
   1dca4:	e7ca      	b.n	1dc3c <_sercom_get_default_pad+0x1c>
   1dca6:	482d      	ldr	r0, [pc, #180]	; (1dd5c <_sercom_get_default_pad+0x13c>)
   1dca8:	e7c8      	b.n	1dc3c <_sercom_get_default_pad+0x1c>
   1dcaa:	2901      	cmp	r1, #1
   1dcac:	d007      	beq.n	1dcbe <_sercom_get_default_pad+0x9e>
   1dcae:	2900      	cmp	r1, #0
   1dcb0:	d031      	beq.n	1dd16 <_sercom_get_default_pad+0xf6>
   1dcb2:	2902      	cmp	r1, #2
   1dcb4:	d005      	beq.n	1dcc2 <_sercom_get_default_pad+0xa2>
   1dcb6:	2903      	cmp	r1, #3
   1dcb8:	d005      	beq.n	1dcc6 <_sercom_get_default_pad+0xa6>
	return 0;
   1dcba:	2000      	movs	r0, #0
   1dcbc:	e7be      	b.n	1dc3c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   1dcbe:	4828      	ldr	r0, [pc, #160]	; (1dd60 <_sercom_get_default_pad+0x140>)
   1dcc0:	e7bc      	b.n	1dc3c <_sercom_get_default_pad+0x1c>
   1dcc2:	4828      	ldr	r0, [pc, #160]	; (1dd64 <_sercom_get_default_pad+0x144>)
   1dcc4:	e7ba      	b.n	1dc3c <_sercom_get_default_pad+0x1c>
   1dcc6:	4828      	ldr	r0, [pc, #160]	; (1dd68 <_sercom_get_default_pad+0x148>)
   1dcc8:	e7b8      	b.n	1dc3c <_sercom_get_default_pad+0x1c>
   1dcca:	2901      	cmp	r1, #1
   1dccc:	d007      	beq.n	1dcde <_sercom_get_default_pad+0xbe>
   1dcce:	2900      	cmp	r1, #0
   1dcd0:	d023      	beq.n	1dd1a <_sercom_get_default_pad+0xfa>
   1dcd2:	2902      	cmp	r1, #2
   1dcd4:	d005      	beq.n	1dce2 <_sercom_get_default_pad+0xc2>
   1dcd6:	2903      	cmp	r1, #3
   1dcd8:	d005      	beq.n	1dce6 <_sercom_get_default_pad+0xc6>
	return 0;
   1dcda:	2000      	movs	r0, #0
   1dcdc:	e7ae      	b.n	1dc3c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   1dcde:	4823      	ldr	r0, [pc, #140]	; (1dd6c <_sercom_get_default_pad+0x14c>)
   1dce0:	e7ac      	b.n	1dc3c <_sercom_get_default_pad+0x1c>
   1dce2:	4823      	ldr	r0, [pc, #140]	; (1dd70 <_sercom_get_default_pad+0x150>)
   1dce4:	e7aa      	b.n	1dc3c <_sercom_get_default_pad+0x1c>
   1dce6:	4823      	ldr	r0, [pc, #140]	; (1dd74 <_sercom_get_default_pad+0x154>)
   1dce8:	e7a8      	b.n	1dc3c <_sercom_get_default_pad+0x1c>
   1dcea:	2901      	cmp	r1, #1
   1dcec:	d007      	beq.n	1dcfe <_sercom_get_default_pad+0xde>
   1dcee:	2900      	cmp	r1, #0
   1dcf0:	d015      	beq.n	1dd1e <_sercom_get_default_pad+0xfe>
   1dcf2:	2902      	cmp	r1, #2
   1dcf4:	d005      	beq.n	1dd02 <_sercom_get_default_pad+0xe2>
   1dcf6:	2903      	cmp	r1, #3
   1dcf8:	d005      	beq.n	1dd06 <_sercom_get_default_pad+0xe6>
	return 0;
   1dcfa:	2000      	movs	r0, #0
   1dcfc:	e79e      	b.n	1dc3c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   1dcfe:	481e      	ldr	r0, [pc, #120]	; (1dd78 <_sercom_get_default_pad+0x158>)
   1dd00:	e79c      	b.n	1dc3c <_sercom_get_default_pad+0x1c>
   1dd02:	481e      	ldr	r0, [pc, #120]	; (1dd7c <_sercom_get_default_pad+0x15c>)
   1dd04:	e79a      	b.n	1dc3c <_sercom_get_default_pad+0x1c>
   1dd06:	481e      	ldr	r0, [pc, #120]	; (1dd80 <_sercom_get_default_pad+0x160>)
   1dd08:	e798      	b.n	1dc3c <_sercom_get_default_pad+0x1c>
   1dd0a:	481e      	ldr	r0, [pc, #120]	; (1dd84 <_sercom_get_default_pad+0x164>)
   1dd0c:	e796      	b.n	1dc3c <_sercom_get_default_pad+0x1c>
   1dd0e:	2003      	movs	r0, #3
   1dd10:	e794      	b.n	1dc3c <_sercom_get_default_pad+0x1c>
   1dd12:	481d      	ldr	r0, [pc, #116]	; (1dd88 <_sercom_get_default_pad+0x168>)
   1dd14:	e792      	b.n	1dc3c <_sercom_get_default_pad+0x1c>
   1dd16:	481d      	ldr	r0, [pc, #116]	; (1dd8c <_sercom_get_default_pad+0x16c>)
   1dd18:	e790      	b.n	1dc3c <_sercom_get_default_pad+0x1c>
   1dd1a:	481d      	ldr	r0, [pc, #116]	; (1dd90 <_sercom_get_default_pad+0x170>)
   1dd1c:	e78e      	b.n	1dc3c <_sercom_get_default_pad+0x1c>
   1dd1e:	481d      	ldr	r0, [pc, #116]	; (1dd94 <_sercom_get_default_pad+0x174>)
   1dd20:	e78c      	b.n	1dc3c <_sercom_get_default_pad+0x1c>
   1dd22:	46c0      	nop			; (mov r8, r8)
   1dd24:	42001000 	.word	0x42001000
   1dd28:	42001800 	.word	0x42001800
   1dd2c:	42001c00 	.word	0x42001c00
   1dd30:	42001400 	.word	0x42001400
   1dd34:	42000800 	.word	0x42000800
   1dd38:	42000c00 	.word	0x42000c00
   1dd3c:	00050003 	.word	0x00050003
   1dd40:	00060003 	.word	0x00060003
   1dd44:	00070003 	.word	0x00070003
   1dd48:	00010003 	.word	0x00010003
   1dd4c:	001e0003 	.word	0x001e0003
   1dd50:	001f0003 	.word	0x001f0003
   1dd54:	00090003 	.word	0x00090003
   1dd58:	000a0003 	.word	0x000a0003
   1dd5c:	000b0003 	.word	0x000b0003
   1dd60:	00110003 	.word	0x00110003
   1dd64:	00120003 	.word	0x00120003
   1dd68:	00130003 	.word	0x00130003
   1dd6c:	000d0003 	.word	0x000d0003
   1dd70:	000e0003 	.word	0x000e0003
   1dd74:	000f0003 	.word	0x000f0003
   1dd78:	00170003 	.word	0x00170003
   1dd7c:	00180003 	.word	0x00180003
   1dd80:	00190003 	.word	0x00190003
   1dd84:	00040003 	.word	0x00040003
   1dd88:	00080003 	.word	0x00080003
   1dd8c:	00100003 	.word	0x00100003
   1dd90:	000c0003 	.word	0x000c0003
   1dd94:	00160003 	.word	0x00160003

0001dd98 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
   1dd98:	b530      	push	{r4, r5, lr}
   1dd9a:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
   1dd9c:	4b0b      	ldr	r3, [pc, #44]	; (1ddcc <_sercom_get_sercom_inst_index+0x34>)
   1dd9e:	466a      	mov	r2, sp
   1dda0:	cb32      	ldmia	r3!, {r1, r4, r5}
   1dda2:	c232      	stmia	r2!, {r1, r4, r5}
   1dda4:	cb32      	ldmia	r3!, {r1, r4, r5}
   1dda6:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
   1dda8:	9b00      	ldr	r3, [sp, #0]
   1ddaa:	4283      	cmp	r3, r0
   1ddac:	d00b      	beq.n	1ddc6 <_sercom_get_sercom_inst_index+0x2e>
   1ddae:	2301      	movs	r3, #1
   1ddb0:	009a      	lsls	r2, r3, #2
   1ddb2:	4669      	mov	r1, sp
   1ddb4:	5852      	ldr	r2, [r2, r1]
   1ddb6:	4282      	cmp	r2, r0
   1ddb8:	d006      	beq.n	1ddc8 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   1ddba:	3301      	adds	r3, #1
   1ddbc:	2b06      	cmp	r3, #6
   1ddbe:	d1f7      	bne.n	1ddb0 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
   1ddc0:	2000      	movs	r0, #0
}
   1ddc2:	b007      	add	sp, #28
   1ddc4:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   1ddc6:	2300      	movs	r3, #0
			return i;
   1ddc8:	b2d8      	uxtb	r0, r3
   1ddca:	e7fa      	b.n	1ddc2 <_sercom_get_sercom_inst_index+0x2a>
   1ddcc:	0002af20 	.word	0x0002af20

0001ddd0 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
   1ddd0:	4770      	bx	lr
	...

0001ddd4 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
   1ddd4:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
   1ddd6:	4b0a      	ldr	r3, [pc, #40]	; (1de00 <_sercom_set_handler+0x2c>)
   1ddd8:	781b      	ldrb	r3, [r3, #0]
   1ddda:	2b00      	cmp	r3, #0
   1dddc:	d10c      	bne.n	1ddf8 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   1ddde:	4f09      	ldr	r7, [pc, #36]	; (1de04 <_sercom_set_handler+0x30>)
   1dde0:	4e09      	ldr	r6, [pc, #36]	; (1de08 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
   1dde2:	4d0a      	ldr	r5, [pc, #40]	; (1de0c <_sercom_set_handler+0x38>)
   1dde4:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   1dde6:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
   1dde8:	195a      	adds	r2, r3, r5
   1ddea:	6014      	str	r4, [r2, #0]
   1ddec:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   1ddee:	2b18      	cmp	r3, #24
   1ddf0:	d1f9      	bne.n	1dde6 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
   1ddf2:	2201      	movs	r2, #1
   1ddf4:	4b02      	ldr	r3, [pc, #8]	; (1de00 <_sercom_set_handler+0x2c>)
   1ddf6:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
   1ddf8:	0080      	lsls	r0, r0, #2
   1ddfa:	4b02      	ldr	r3, [pc, #8]	; (1de04 <_sercom_set_handler+0x30>)
   1ddfc:	50c1      	str	r1, [r0, r3]
}
   1ddfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1de00:	20003cc6 	.word	0x20003cc6
   1de04:	20003cc8 	.word	0x20003cc8
   1de08:	0001ddd1 	.word	0x0001ddd1
   1de0c:	20005508 	.word	0x20005508

0001de10 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
   1de10:	b500      	push	{lr}
   1de12:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
   1de14:	2309      	movs	r3, #9
   1de16:	466a      	mov	r2, sp
   1de18:	7013      	strb	r3, [r2, #0]
   1de1a:	3301      	adds	r3, #1
   1de1c:	7053      	strb	r3, [r2, #1]
   1de1e:	3301      	adds	r3, #1
   1de20:	7093      	strb	r3, [r2, #2]
   1de22:	3301      	adds	r3, #1
   1de24:	70d3      	strb	r3, [r2, #3]
   1de26:	3301      	adds	r3, #1
   1de28:	7113      	strb	r3, [r2, #4]
   1de2a:	3301      	adds	r3, #1
   1de2c:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
   1de2e:	4b03      	ldr	r3, [pc, #12]	; (1de3c <_sercom_get_interrupt_vector+0x2c>)
   1de30:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
   1de32:	466b      	mov	r3, sp
   1de34:	5618      	ldrsb	r0, [r3, r0]
}
   1de36:	b003      	add	sp, #12
   1de38:	bd00      	pop	{pc}
   1de3a:	46c0      	nop			; (mov r8, r8)
   1de3c:	0001dd99 	.word	0x0001dd99

0001de40 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
   1de40:	b510      	push	{r4, lr}
   1de42:	4b02      	ldr	r3, [pc, #8]	; (1de4c <SERCOM0_Handler+0xc>)
   1de44:	681b      	ldr	r3, [r3, #0]
   1de46:	2000      	movs	r0, #0
   1de48:	4798      	blx	r3
   1de4a:	bd10      	pop	{r4, pc}
   1de4c:	20003cc8 	.word	0x20003cc8

0001de50 <SERCOM1_Handler>:
   1de50:	b510      	push	{r4, lr}
   1de52:	4b02      	ldr	r3, [pc, #8]	; (1de5c <SERCOM1_Handler+0xc>)
   1de54:	685b      	ldr	r3, [r3, #4]
   1de56:	2001      	movs	r0, #1
   1de58:	4798      	blx	r3
   1de5a:	bd10      	pop	{r4, pc}
   1de5c:	20003cc8 	.word	0x20003cc8

0001de60 <SERCOM2_Handler>:
   1de60:	b510      	push	{r4, lr}
   1de62:	4b02      	ldr	r3, [pc, #8]	; (1de6c <SERCOM2_Handler+0xc>)
   1de64:	689b      	ldr	r3, [r3, #8]
   1de66:	2002      	movs	r0, #2
   1de68:	4798      	blx	r3
   1de6a:	bd10      	pop	{r4, pc}
   1de6c:	20003cc8 	.word	0x20003cc8

0001de70 <SERCOM3_Handler>:
   1de70:	b510      	push	{r4, lr}
   1de72:	4b02      	ldr	r3, [pc, #8]	; (1de7c <SERCOM3_Handler+0xc>)
   1de74:	68db      	ldr	r3, [r3, #12]
   1de76:	2003      	movs	r0, #3
   1de78:	4798      	blx	r3
   1de7a:	bd10      	pop	{r4, pc}
   1de7c:	20003cc8 	.word	0x20003cc8

0001de80 <SERCOM4_Handler>:
   1de80:	b510      	push	{r4, lr}
   1de82:	4b02      	ldr	r3, [pc, #8]	; (1de8c <SERCOM4_Handler+0xc>)
   1de84:	691b      	ldr	r3, [r3, #16]
   1de86:	2004      	movs	r0, #4
   1de88:	4798      	blx	r3
   1de8a:	bd10      	pop	{r4, pc}
   1de8c:	20003cc8 	.word	0x20003cc8

0001de90 <SERCOM5_Handler>:
   1de90:	b510      	push	{r4, lr}
   1de92:	4b02      	ldr	r3, [pc, #8]	; (1de9c <SERCOM5_Handler+0xc>)
   1de94:	695b      	ldr	r3, [r3, #20]
   1de96:	2005      	movs	r0, #5
   1de98:	4798      	blx	r3
   1de9a:	bd10      	pop	{r4, pc}
   1de9c:	20003cc8 	.word	0x20003cc8

0001dea0 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
   1dea0:	b570      	push	{r4, r5, r6, lr}
   1dea2:	b082      	sub	sp, #8
   1dea4:	0005      	movs	r5, r0
   1dea6:	000c      	movs	r4, r1
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
   1dea8:	2200      	movs	r2, #0
   1deaa:	466b      	mov	r3, sp
   1deac:	80da      	strh	r2, [r3, #6]

	SercomSpi *const spi_module = &(module->hw->SPI);
   1deae:	6806      	ldr	r6, [r0, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   1deb0:	0030      	movs	r0, r6
   1deb2:	4b24      	ldr	r3, [pc, #144]	; (1df44 <spi_set_baudrate+0xa4>)
   1deb4:	4798      	blx	r3
   1deb6:	231f      	movs	r3, #31
   1deb8:	4018      	ands	r0, r3
   1deba:	3b1e      	subs	r3, #30
   1debc:	4083      	lsls	r3, r0
   1debe:	2280      	movs	r2, #128	; 0x80
   1dec0:	4921      	ldr	r1, [pc, #132]	; (1df48 <spi_set_baudrate+0xa8>)
   1dec2:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1dec4:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
   1dec6:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
   1dec8:	2b00      	cmp	r3, #0
   1deca:	d1fc      	bne.n	1dec6 <spi_set_baudrate+0x26>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   1decc:	338f      	adds	r3, #143	; 0x8f
   1dece:	7533      	strb	r3, [r6, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   1ded0:	7633      	strb	r3, [r6, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   1ded2:	6833      	ldr	r3, [r6, #0]
   1ded4:	2202      	movs	r2, #2
   1ded6:	4393      	bics	r3, r2
   1ded8:	6033      	str	r3, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1deda:	6828      	ldr	r0, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
   1dedc:	69c3      	ldr	r3, [r0, #28]

	/* Disable the module */
	spi_disable(module);

	while (spi_is_syncing(module)) {
   1dede:	2b00      	cmp	r3, #0
   1dee0:	d1fc      	bne.n	1dedc <spi_set_baudrate+0x3c>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   1dee2:	4b1a      	ldr	r3, [pc, #104]	; (1df4c <spi_set_baudrate+0xac>)
   1dee4:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   1dee6:	3014      	adds	r0, #20
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   1dee8:	b2c0      	uxtb	r0, r0
   1deea:	4b19      	ldr	r3, [pc, #100]	; (1df50 <spi_set_baudrate+0xb0>)
   1deec:	4798      	blx	r3
   1deee:	0001      	movs	r1, r0

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
   1def0:	466b      	mov	r3, sp
   1def2:	1d9a      	adds	r2, r3, #6
   1def4:	0020      	movs	r0, r4
   1def6:	4b17      	ldr	r3, [pc, #92]	; (1df54 <spi_set_baudrate+0xb4>)
   1def8:	4798      	blx	r3
   1defa:	1e04      	subs	r4, r0, #0
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
   1defc:	d003      	beq.n	1df06 <spi_set_baudrate+0x66>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
   1defe:	2417      	movs	r4, #23
	while (spi_is_syncing(module)) {
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
}
   1df00:	0020      	movs	r0, r4
   1df02:	b002      	add	sp, #8
   1df04:	bd70      	pop	{r4, r5, r6, pc}
	spi_module->BAUD.reg = (uint8_t)baud;
   1df06:	466b      	mov	r3, sp
   1df08:	3306      	adds	r3, #6
   1df0a:	781b      	ldrb	r3, [r3, #0]
   1df0c:	7333      	strb	r3, [r6, #12]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1df0e:	682e      	ldr	r6, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
   1df10:	69f3      	ldr	r3, [r6, #28]
	while (spi_is_syncing(module)) {
   1df12:	2b00      	cmp	r3, #0
   1df14:	d1fc      	bne.n	1df10 <spi_set_baudrate+0x70>
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1df16:	0030      	movs	r0, r6
   1df18:	4b0a      	ldr	r3, [pc, #40]	; (1df44 <spi_set_baudrate+0xa4>)
   1df1a:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1df1c:	231f      	movs	r3, #31
   1df1e:	4018      	ands	r0, r3
   1df20:	3b1e      	subs	r3, #30
   1df22:	4083      	lsls	r3, r0
   1df24:	4a08      	ldr	r2, [pc, #32]	; (1df48 <spi_set_baudrate+0xa8>)
   1df26:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1df28:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
   1df2a:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
   1df2c:	2b00      	cmp	r3, #0
   1df2e:	d1fc      	bne.n	1df2a <spi_set_baudrate+0x8a>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   1df30:	6833      	ldr	r3, [r6, #0]
   1df32:	2202      	movs	r2, #2
   1df34:	4313      	orrs	r3, r2
   1df36:	6033      	str	r3, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1df38:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
   1df3a:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
   1df3c:	2b00      	cmp	r3, #0
   1df3e:	d1fc      	bne.n	1df3a <spi_set_baudrate+0x9a>
   1df40:	e7de      	b.n	1df00 <spi_set_baudrate+0x60>
   1df42:	46c0      	nop			; (mov r8, r8)
   1df44:	0001de11 	.word	0x0001de11
   1df48:	e000e100 	.word	0xe000e100
   1df4c:	0001dd99 	.word	0x0001dd99
   1df50:	0001f155 	.word	0x0001f155
   1df54:	0001db17 	.word	0x0001db17

0001df58 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
   1df58:	b5f0      	push	{r4, r5, r6, r7, lr}
   1df5a:	b08b      	sub	sp, #44	; 0x2c
   1df5c:	0005      	movs	r5, r0
   1df5e:	000c      	movs	r4, r1
   1df60:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   1df62:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
   1df64:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
   1df66:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
   1df68:	079b      	lsls	r3, r3, #30
   1df6a:	d501      	bpl.n	1df70 <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
   1df6c:	b00b      	add	sp, #44	; 0x2c
   1df6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
   1df70:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
   1df72:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
   1df74:	07db      	lsls	r3, r3, #31
   1df76:	d4f9      	bmi.n	1df6c <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   1df78:	0008      	movs	r0, r1
   1df7a:	4b60      	ldr	r3, [pc, #384]	; (1e0fc <spi_init+0x1a4>)
   1df7c:	4798      	blx	r3
			PM->APBCMASK.reg |= mask;
   1df7e:	4a60      	ldr	r2, [pc, #384]	; (1e100 <spi_init+0x1a8>)
   1df80:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   1df82:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   1df84:	2301      	movs	r3, #1
   1df86:	40bb      	lsls	r3, r7
   1df88:	430b      	orrs	r3, r1
   1df8a:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
   1df8c:	a909      	add	r1, sp, #36	; 0x24
   1df8e:	2724      	movs	r7, #36	; 0x24
   1df90:	5df3      	ldrb	r3, [r6, r7]
   1df92:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   1df94:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   1df96:	b2c3      	uxtb	r3, r0
   1df98:	9301      	str	r3, [sp, #4]
   1df9a:	0018      	movs	r0, r3
   1df9c:	4b59      	ldr	r3, [pc, #356]	; (1e104 <spi_init+0x1ac>)
   1df9e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   1dfa0:	9801      	ldr	r0, [sp, #4]
   1dfa2:	4b59      	ldr	r3, [pc, #356]	; (1e108 <spi_init+0x1b0>)
   1dfa4:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   1dfa6:	5df0      	ldrb	r0, [r6, r7]
   1dfa8:	2100      	movs	r1, #0
   1dfaa:	4b58      	ldr	r3, [pc, #352]	; (1e10c <spi_init+0x1b4>)
   1dfac:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
   1dfae:	7833      	ldrb	r3, [r6, #0]
   1dfb0:	2b01      	cmp	r3, #1
   1dfb2:	d038      	beq.n	1e026 <spi_init+0xce>
   1dfb4:	002b      	movs	r3, r5
   1dfb6:	330c      	adds	r3, #12
   1dfb8:	0029      	movs	r1, r5
   1dfba:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
   1dfbc:	2200      	movs	r2, #0
   1dfbe:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   1dfc0:	428b      	cmp	r3, r1
   1dfc2:	d1fc      	bne.n	1dfbe <spi_init+0x66>
	module->tx_buffer_ptr              = NULL;
   1dfc4:	2300      	movs	r3, #0
   1dfc6:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
   1dfc8:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
   1dfca:	2400      	movs	r4, #0
   1dfcc:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
   1dfce:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
   1dfd0:	3336      	adds	r3, #54	; 0x36
   1dfd2:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
   1dfd4:	3301      	adds	r3, #1
   1dfd6:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
   1dfd8:	3301      	adds	r3, #1
   1dfda:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
   1dfdc:	3b35      	subs	r3, #53	; 0x35
   1dfde:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
   1dfe0:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
   1dfe2:	6828      	ldr	r0, [r5, #0]
   1dfe4:	4b45      	ldr	r3, [pc, #276]	; (1e0fc <spi_init+0x1a4>)
   1dfe6:	4798      	blx	r3
   1dfe8:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
   1dfea:	4949      	ldr	r1, [pc, #292]	; (1e110 <spi_init+0x1b8>)
   1dfec:	4b49      	ldr	r3, [pc, #292]	; (1e114 <spi_init+0x1bc>)
   1dfee:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   1dff0:	00bf      	lsls	r7, r7, #2
   1dff2:	4b49      	ldr	r3, [pc, #292]	; (1e118 <spi_init+0x1c0>)
   1dff4:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1dff6:	682f      	ldr	r7, [r5, #0]
   1dff8:	ab04      	add	r3, sp, #16
   1dffa:	2280      	movs	r2, #128	; 0x80
   1dffc:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   1dffe:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   1e000:	3a7f      	subs	r2, #127	; 0x7f
   1e002:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   1e004:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
   1e006:	7833      	ldrb	r3, [r6, #0]
   1e008:	2b00      	cmp	r3, #0
   1e00a:	d102      	bne.n	1e012 <spi_init+0xba>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   1e00c:	2200      	movs	r2, #0
   1e00e:	ab04      	add	r3, sp, #16
   1e010:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
   1e012:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   1e014:	9305      	str	r3, [sp, #20]
   1e016:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   1e018:	9306      	str	r3, [sp, #24]
   1e01a:	6b33      	ldr	r3, [r6, #48]	; 0x30
   1e01c:	9307      	str	r3, [sp, #28]
   1e01e:	6b73      	ldr	r3, [r6, #52]	; 0x34
   1e020:	9308      	str	r3, [sp, #32]
   1e022:	2400      	movs	r4, #0
   1e024:	e00b      	b.n	1e03e <spi_init+0xe6>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
   1e026:	6823      	ldr	r3, [r4, #0]
   1e028:	220c      	movs	r2, #12
   1e02a:	4313      	orrs	r3, r2
   1e02c:	6023      	str	r3, [r4, #0]
   1e02e:	e7c1      	b.n	1dfb4 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   1e030:	0038      	movs	r0, r7
   1e032:	4b3a      	ldr	r3, [pc, #232]	; (1e11c <spi_init+0x1c4>)
   1e034:	4798      	blx	r3
   1e036:	e00a      	b.n	1e04e <spi_init+0xf6>
   1e038:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
   1e03a:	2c04      	cmp	r4, #4
   1e03c:	d010      	beq.n	1e060 <spi_init+0x108>
   1e03e:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
   1e040:	00a3      	lsls	r3, r4, #2
   1e042:	aa02      	add	r2, sp, #8
   1e044:	200c      	movs	r0, #12
   1e046:	1812      	adds	r2, r2, r0
   1e048:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
   1e04a:	2800      	cmp	r0, #0
   1e04c:	d0f0      	beq.n	1e030 <spi_init+0xd8>
		if (current_pinmux != PINMUX_UNUSED) {
   1e04e:	1c43      	adds	r3, r0, #1
   1e050:	d0f2      	beq.n	1e038 <spi_init+0xe0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   1e052:	a904      	add	r1, sp, #16
   1e054:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   1e056:	0c00      	lsrs	r0, r0, #16
   1e058:	b2c0      	uxtb	r0, r0
   1e05a:	4b31      	ldr	r3, [pc, #196]	; (1e120 <spi_init+0x1c8>)
   1e05c:	4798      	blx	r3
   1e05e:	e7eb      	b.n	1e038 <spi_init+0xe0>
	module->mode             = config->mode;
   1e060:	7833      	ldrb	r3, [r6, #0]
   1e062:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
   1e064:	7c33      	ldrb	r3, [r6, #16]
   1e066:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
   1e068:	7cb3      	ldrb	r3, [r6, #18]
   1e06a:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
   1e06c:	7d33      	ldrb	r3, [r6, #20]
   1e06e:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
   1e070:	2200      	movs	r2, #0
   1e072:	ab02      	add	r3, sp, #8
   1e074:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
   1e076:	7833      	ldrb	r3, [r6, #0]
   1e078:	2b01      	cmp	r3, #1
   1e07a:	d028      	beq.n	1e0ce <spi_init+0x176>
	ctrla |= config->transfer_mode;
   1e07c:	6873      	ldr	r3, [r6, #4]
   1e07e:	68b2      	ldr	r2, [r6, #8]
   1e080:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
   1e082:	68f2      	ldr	r2, [r6, #12]
   1e084:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
   1e086:	7c31      	ldrb	r1, [r6, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
   1e088:	7c72      	ldrb	r2, [r6, #17]
   1e08a:	2a00      	cmp	r2, #0
   1e08c:	d103      	bne.n	1e096 <spi_init+0x13e>
   1e08e:	4a25      	ldr	r2, [pc, #148]	; (1e124 <spi_init+0x1cc>)
   1e090:	7892      	ldrb	r2, [r2, #2]
   1e092:	0792      	lsls	r2, r2, #30
   1e094:	d501      	bpl.n	1e09a <spi_init+0x142>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
   1e096:	2280      	movs	r2, #128	; 0x80
   1e098:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
   1e09a:	7cb2      	ldrb	r2, [r6, #18]
   1e09c:	2a00      	cmp	r2, #0
   1e09e:	d002      	beq.n	1e0a6 <spi_init+0x14e>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
   1e0a0:	2280      	movs	r2, #128	; 0x80
   1e0a2:	0292      	lsls	r2, r2, #10
   1e0a4:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
   1e0a6:	7cf2      	ldrb	r2, [r6, #19]
   1e0a8:	2a00      	cmp	r2, #0
   1e0aa:	d002      	beq.n	1e0b2 <spi_init+0x15a>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
   1e0ac:	2280      	movs	r2, #128	; 0x80
   1e0ae:	0092      	lsls	r2, r2, #2
   1e0b0:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
   1e0b2:	7d32      	ldrb	r2, [r6, #20]
   1e0b4:	2a00      	cmp	r2, #0
   1e0b6:	d002      	beq.n	1e0be <spi_init+0x166>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
   1e0b8:	2280      	movs	r2, #128	; 0x80
   1e0ba:	0192      	lsls	r2, r2, #6
   1e0bc:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
   1e0be:	683a      	ldr	r2, [r7, #0]
   1e0c0:	4313      	orrs	r3, r2
   1e0c2:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
   1e0c4:	687b      	ldr	r3, [r7, #4]
   1e0c6:	430b      	orrs	r3, r1
   1e0c8:	607b      	str	r3, [r7, #4]
	return STATUS_OK;
   1e0ca:	2000      	movs	r0, #0
   1e0cc:	e74e      	b.n	1df6c <spi_init+0x14>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   1e0ce:	6828      	ldr	r0, [r5, #0]
   1e0d0:	4b0a      	ldr	r3, [pc, #40]	; (1e0fc <spi_init+0x1a4>)
   1e0d2:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   1e0d4:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   1e0d6:	b2c0      	uxtb	r0, r0
   1e0d8:	4b13      	ldr	r3, [pc, #76]	; (1e128 <spi_init+0x1d0>)
   1e0da:	4798      	blx	r3
   1e0dc:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
   1e0de:	ab02      	add	r3, sp, #8
   1e0e0:	1d9a      	adds	r2, r3, #6
   1e0e2:	69b0      	ldr	r0, [r6, #24]
   1e0e4:	4b11      	ldr	r3, [pc, #68]	; (1e12c <spi_init+0x1d4>)
   1e0e6:	4798      	blx	r3
   1e0e8:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
   1e0ea:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
   1e0ec:	2b00      	cmp	r3, #0
   1e0ee:	d000      	beq.n	1e0f2 <spi_init+0x19a>
   1e0f0:	e73c      	b.n	1df6c <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
   1e0f2:	ab02      	add	r3, sp, #8
   1e0f4:	3306      	adds	r3, #6
   1e0f6:	781b      	ldrb	r3, [r3, #0]
   1e0f8:	733b      	strb	r3, [r7, #12]
   1e0fa:	e7bf      	b.n	1e07c <spi_init+0x124>
   1e0fc:	0001dd99 	.word	0x0001dd99
   1e100:	40000400 	.word	0x40000400
   1e104:	0001f139 	.word	0x0001f139
   1e108:	0001f0ad 	.word	0x0001f0ad
   1e10c:	0001dbd5 	.word	0x0001dbd5
   1e110:	0001e3c5 	.word	0x0001e3c5
   1e114:	0001ddd5 	.word	0x0001ddd5
   1e118:	20005508 	.word	0x20005508
   1e11c:	0001dc21 	.word	0x0001dc21
   1e120:	0001f261 	.word	0x0001f261
   1e124:	41002000 	.word	0x41002000
   1e128:	0001f155 	.word	0x0001f155
   1e12c:	0001db17 	.word	0x0001db17

0001e130 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
   1e130:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e132:	46d6      	mov	lr, sl
   1e134:	4647      	mov	r7, r8
   1e136:	b580      	push	{r7, lr}
   1e138:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   1e13a:	2438      	movs	r4, #56	; 0x38
   1e13c:	5d05      	ldrb	r5, [r0, r4]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   1e13e:	3c33      	subs	r4, #51	; 0x33
	if (module->status == STATUS_BUSY) {
   1e140:	2d05      	cmp	r5, #5
   1e142:	d002      	beq.n	1e14a <spi_read_buffer_wait+0x1a>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
   1e144:	3412      	adds	r4, #18
	if (length == 0) {
   1e146:	2a00      	cmp	r2, #0
   1e148:	d105      	bne.n	1e156 <spi_read_buffer_wait+0x26>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
   1e14a:	0020      	movs	r0, r4
   1e14c:	b003      	add	sp, #12
   1e14e:	bc0c      	pop	{r2, r3}
   1e150:	4690      	mov	r8, r2
   1e152:	469a      	mov	sl, r3
   1e154:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
   1e156:	79c4      	ldrb	r4, [r0, #7]
   1e158:	2c00      	cmp	r4, #0
   1e15a:	d144      	bne.n	1e1e6 <spi_read_buffer_wait+0xb6>
		return STATUS_ERR_DENIED;
   1e15c:	341c      	adds	r4, #28
   1e15e:	e7f4      	b.n	1e14a <spi_read_buffer_wait+0x1a>
	SercomSpi *const spi_module = &(module->hw->SPI);
   1e160:	6805      	ldr	r5, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   1e162:	7e2c      	ldrb	r4, [r5, #24]
			while (!spi_is_ready_to_write(module)) {
   1e164:	423c      	tst	r4, r7
   1e166:	d0fc      	beq.n	1e162 <spi_read_buffer_wait+0x32>
   1e168:	7e2c      	ldrb	r4, [r5, #24]
	if (!spi_is_ready_to_write(module)) {
   1e16a:	423c      	tst	r4, r7
   1e16c:	d01a      	beq.n	1e1a4 <spi_read_buffer_wait+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   1e16e:	4644      	mov	r4, r8
   1e170:	62ac      	str	r4, [r5, #40]	; 0x28
   1e172:	e017      	b.n	1e1a4 <spi_read_buffer_wait+0x74>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   1e174:	7984      	ldrb	r4, [r0, #6]
   1e176:	2c01      	cmp	r4, #1
   1e178:	d026      	beq.n	1e1c8 <spi_read_buffer_wait+0x98>
		*rx_data = (uint8_t)spi_module->DATA.reg;
   1e17a:	6aad      	ldr	r5, [r5, #40]	; 0x28
   1e17c:	b2ec      	uxtb	r4, r5
   1e17e:	46a4      	mov	ip, r4
		if (retval != STATUS_OK) {
   1e180:	9c01      	ldr	r4, [sp, #4]
   1e182:	2c00      	cmp	r4, #0
   1e184:	d13a      	bne.n	1e1fc <spi_read_buffer_wait+0xcc>
		rx_data[rx_pos++] = received_data;
   1e186:	1c75      	adds	r5, r6, #1
   1e188:	b2ad      	uxth	r5, r5
   1e18a:	4664      	mov	r4, ip
   1e18c:	558c      	strb	r4, [r1, r6]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   1e18e:	7984      	ldrb	r4, [r0, #6]
   1e190:	2c01      	cmp	r4, #1
   1e192:	d01e      	beq.n	1e1d2 <spi_read_buffer_wait+0xa2>
		rx_data[rx_pos++] = received_data;
   1e194:	002e      	movs	r6, r5
	while (length--) {
   1e196:	3a01      	subs	r2, #1
   1e198:	b292      	uxth	r2, r2
   1e19a:	4552      	cmp	r2, sl
   1e19c:	d01f      	beq.n	1e1de <spi_read_buffer_wait+0xae>
		if (module->mode == SPI_MODE_MASTER) {
   1e19e:	7944      	ldrb	r4, [r0, #5]
   1e1a0:	2c01      	cmp	r4, #1
   1e1a2:	d0dd      	beq.n	1e160 <spi_read_buffer_wait+0x30>
	SercomSpi *const spi_module = &(module->hw->SPI);
   1e1a4:	6805      	ldr	r5, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   1e1a6:	7e2c      	ldrb	r4, [r5, #24]
		while (!spi_is_ready_to_read(module)) {
   1e1a8:	421c      	tst	r4, r3
   1e1aa:	d0fc      	beq.n	1e1a6 <spi_read_buffer_wait+0x76>
   1e1ac:	7e2c      	ldrb	r4, [r5, #24]
	if (!spi_is_ready_to_read(module)) {
   1e1ae:	421c      	tst	r4, r3
   1e1b0:	d017      	beq.n	1e1e2 <spi_read_buffer_wait+0xb2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   1e1b2:	8b6c      	ldrh	r4, [r5, #26]
   1e1b4:	46a4      	mov	ip, r4
	enum status_code retval = STATUS_OK;
   1e1b6:	2400      	movs	r4, #0
   1e1b8:	9401      	str	r4, [sp, #4]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   1e1ba:	4664      	mov	r4, ip
   1e1bc:	421c      	tst	r4, r3
   1e1be:	d0d9      	beq.n	1e174 <spi_read_buffer_wait+0x44>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   1e1c0:	836b      	strh	r3, [r5, #26]
		retval = STATUS_ERR_OVERFLOW;
   1e1c2:	241e      	movs	r4, #30
   1e1c4:	9401      	str	r4, [sp, #4]
   1e1c6:	e7d5      	b.n	1e174 <spi_read_buffer_wait+0x44>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   1e1c8:	6aac      	ldr	r4, [r5, #40]	; 0x28
   1e1ca:	05e4      	lsls	r4, r4, #23
   1e1cc:	0de4      	lsrs	r4, r4, #23
   1e1ce:	46a4      	mov	ip, r4
   1e1d0:	e7d6      	b.n	1e180 <spi_read_buffer_wait+0x50>
			rx_data[rx_pos++] = (received_data >> 8);
   1e1d2:	3602      	adds	r6, #2
   1e1d4:	b2b6      	uxth	r6, r6
   1e1d6:	4664      	mov	r4, ip
   1e1d8:	0a24      	lsrs	r4, r4, #8
   1e1da:	554c      	strb	r4, [r1, r5]
   1e1dc:	e7db      	b.n	1e196 <spi_read_buffer_wait+0x66>
   1e1de:	9c01      	ldr	r4, [sp, #4]
   1e1e0:	e7b3      	b.n	1e14a <spi_read_buffer_wait+0x1a>
		return STATUS_ERR_IO;
   1e1e2:	2410      	movs	r4, #16
   1e1e4:	e7b1      	b.n	1e14a <spi_read_buffer_wait+0x1a>
	while (length--) {
   1e1e6:	3a01      	subs	r2, #1
   1e1e8:	b292      	uxth	r2, r2
   1e1ea:	2600      	movs	r6, #0
			while (!spi_is_ready_to_write(module)) {
   1e1ec:	2701      	movs	r7, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   1e1ee:	05db      	lsls	r3, r3, #23
   1e1f0:	0ddb      	lsrs	r3, r3, #23
   1e1f2:	4698      	mov	r8, r3
		while (!spi_is_ready_to_read(module)) {
   1e1f4:	2304      	movs	r3, #4
	while (length--) {
   1e1f6:	4c02      	ldr	r4, [pc, #8]	; (1e200 <spi_read_buffer_wait+0xd0>)
   1e1f8:	46a2      	mov	sl, r4
   1e1fa:	e7d0      	b.n	1e19e <spi_read_buffer_wait+0x6e>
   1e1fc:	9c01      	ldr	r4, [sp, #4]
   1e1fe:	e7a4      	b.n	1e14a <spi_read_buffer_wait+0x1a>
   1e200:	0000ffff 	.word	0x0000ffff

0001e204 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
   1e204:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
   1e206:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
   1e208:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
   1e20a:	2c01      	cmp	r4, #1
   1e20c:	d001      	beq.n	1e212 <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
   1e20e:	0018      	movs	r0, r3
   1e210:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
   1e212:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
   1e214:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
   1e216:	2c00      	cmp	r4, #0
   1e218:	d1f9      	bne.n	1e20e <spi_select_slave+0xa>
		if (select) {
   1e21a:	2a00      	cmp	r2, #0
   1e21c:	d058      	beq.n	1e2d0 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
   1e21e:	784b      	ldrb	r3, [r1, #1]
   1e220:	2b00      	cmp	r3, #0
   1e222:	d044      	beq.n	1e2ae <spi_select_slave+0xaa>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   1e224:	6803      	ldr	r3, [r0, #0]
   1e226:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
   1e228:	07db      	lsls	r3, r3, #31
   1e22a:	d410      	bmi.n	1e24e <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
   1e22c:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
   1e22e:	09d1      	lsrs	r1, r2, #7
		return NULL;
   1e230:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
   1e232:	2900      	cmp	r1, #0
   1e234:	d104      	bne.n	1e240 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
   1e236:	0953      	lsrs	r3, r2, #5
   1e238:	01db      	lsls	r3, r3, #7
   1e23a:	492e      	ldr	r1, [pc, #184]	; (1e2f4 <spi_select_slave+0xf0>)
   1e23c:	468c      	mov	ip, r1
   1e23e:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1e240:	211f      	movs	r1, #31
   1e242:	4011      	ands	r1, r2
   1e244:	2201      	movs	r2, #1
   1e246:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
   1e248:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
   1e24a:	2305      	movs	r3, #5
   1e24c:	e7df      	b.n	1e20e <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
   1e24e:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
   1e250:	09d4      	lsrs	r4, r2, #7
		return NULL;
   1e252:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
   1e254:	2c00      	cmp	r4, #0
   1e256:	d104      	bne.n	1e262 <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
   1e258:	0953      	lsrs	r3, r2, #5
   1e25a:	01db      	lsls	r3, r3, #7
   1e25c:	4c25      	ldr	r4, [pc, #148]	; (1e2f4 <spi_select_slave+0xf0>)
   1e25e:	46a4      	mov	ip, r4
   1e260:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1e262:	241f      	movs	r4, #31
   1e264:	4014      	ands	r4, r2
   1e266:	2201      	movs	r2, #1
   1e268:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
   1e26a:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1e26c:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   1e26e:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
   1e270:	07d2      	lsls	r2, r2, #31
   1e272:	d501      	bpl.n	1e278 <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   1e274:	788a      	ldrb	r2, [r1, #2]
   1e276:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
   1e278:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
   1e27a:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
   1e27c:	2a00      	cmp	r2, #0
   1e27e:	d1c6      	bne.n	1e20e <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
   1e280:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
   1e282:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   1e284:	7e13      	ldrb	r3, [r2, #24]
   1e286:	420b      	tst	r3, r1
   1e288:	d0fc      	beq.n	1e284 <spi_select_slave+0x80>
   1e28a:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
   1e28c:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
   1e28e:	0749      	lsls	r1, r1, #29
   1e290:	d5bd      	bpl.n	1e20e <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   1e292:	8b53      	ldrh	r3, [r2, #26]
   1e294:	075b      	lsls	r3, r3, #29
   1e296:	d501      	bpl.n	1e29c <spi_select_slave+0x98>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   1e298:	2304      	movs	r3, #4
   1e29a:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   1e29c:	7983      	ldrb	r3, [r0, #6]
   1e29e:	2b01      	cmp	r3, #1
   1e2a0:	d002      	beq.n	1e2a8 <spi_select_slave+0xa4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
   1e2a2:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1e2a4:	2300      	movs	r3, #0
   1e2a6:	e7b2      	b.n	1e20e <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   1e2a8:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1e2aa:	2300      	movs	r3, #0
   1e2ac:	e7af      	b.n	1e20e <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
   1e2ae:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
   1e2b0:	09d1      	lsrs	r1, r2, #7
		return NULL;
   1e2b2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
   1e2b4:	2900      	cmp	r1, #0
   1e2b6:	d104      	bne.n	1e2c2 <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
   1e2b8:	0953      	lsrs	r3, r2, #5
   1e2ba:	01db      	lsls	r3, r3, #7
   1e2bc:	490d      	ldr	r1, [pc, #52]	; (1e2f4 <spi_select_slave+0xf0>)
   1e2be:	468c      	mov	ip, r1
   1e2c0:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1e2c2:	211f      	movs	r1, #31
   1e2c4:	4011      	ands	r1, r2
   1e2c6:	2201      	movs	r2, #1
   1e2c8:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
   1e2ca:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
   1e2cc:	2300      	movs	r3, #0
   1e2ce:	e79e      	b.n	1e20e <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
   1e2d0:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
   1e2d2:	09d1      	lsrs	r1, r2, #7
		return NULL;
   1e2d4:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
   1e2d6:	2900      	cmp	r1, #0
   1e2d8:	d104      	bne.n	1e2e4 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
   1e2da:	0953      	lsrs	r3, r2, #5
   1e2dc:	01db      	lsls	r3, r3, #7
   1e2de:	4905      	ldr	r1, [pc, #20]	; (1e2f4 <spi_select_slave+0xf0>)
   1e2e0:	468c      	mov	ip, r1
   1e2e2:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1e2e4:	211f      	movs	r1, #31
   1e2e6:	4011      	ands	r1, r2
   1e2e8:	2201      	movs	r2, #1
   1e2ea:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
   1e2ec:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
   1e2ee:	2300      	movs	r3, #0
   1e2f0:	e78d      	b.n	1e20e <spi_select_slave+0xa>
   1e2f2:	46c0      	nop			; (mov r8, r8)
   1e2f4:	41004400 	.word	0x41004400

0001e2f8 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
   1e2f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e2fa:	46de      	mov	lr, fp
   1e2fc:	4657      	mov	r7, sl
   1e2fe:	464e      	mov	r6, r9
   1e300:	4645      	mov	r5, r8
   1e302:	b5e0      	push	{r5, r6, r7, lr}
   1e304:	b083      	sub	sp, #12
   1e306:	468a      	mov	sl, r1
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   1e308:	2338      	movs	r3, #56	; 0x38
   1e30a:	5cc4      	ldrb	r4, [r0, r3]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   1e30c:	3b33      	subs	r3, #51	; 0x33
	if (module->status == STATUS_BUSY) {
   1e30e:	2c05      	cmp	r4, #5
   1e310:	d002      	beq.n	1e318 <spi_write_buffer_wait+0x20>
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
   1e312:	3312      	adds	r3, #18
	if (length == 0) {
   1e314:	2a00      	cmp	r2, #0
   1e316:	d14b      	bne.n	1e3b0 <spi_write_buffer_wait+0xb8>
			}
		}
	}
#  endif
	return STATUS_OK;
}
   1e318:	0018      	movs	r0, r3
   1e31a:	b003      	add	sp, #12
   1e31c:	bc3c      	pop	{r2, r3, r4, r5}
   1e31e:	4690      	mov	r8, r2
   1e320:	4699      	mov	r9, r3
   1e322:	46a2      	mov	sl, r4
   1e324:	46ab      	mov	fp, r5
   1e326:	bdf0      	pop	{r4, r5, r6, r7, pc}
			data_to_send |= (tx_data[tx_pos++] << 8);
   1e328:	3702      	adds	r7, #2
   1e32a:	b2bf      	uxth	r7, r7
   1e32c:	4641      	mov	r1, r8
   1e32e:	4653      	mov	r3, sl
   1e330:	5c59      	ldrb	r1, [r3, r1]
   1e332:	0209      	lsls	r1, r1, #8
   1e334:	465b      	mov	r3, fp
   1e336:	430b      	orrs	r3, r1
   1e338:	e018      	b.n	1e36c <spi_write_buffer_wait+0x74>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   1e33a:	7983      	ldrb	r3, [r0, #6]
   1e33c:	2b01      	cmp	r3, #1
   1e33e:	d02a      	beq.n	1e396 <spi_write_buffer_wait+0x9e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
   1e340:	6a93      	ldr	r3, [r2, #40]	; 0x28
	while (length--) {
   1e342:	3e01      	subs	r6, #1
   1e344:	b2b6      	uxth	r6, r6
   1e346:	4566      	cmp	r6, ip
   1e348:	d027      	beq.n	1e39a <spi_write_buffer_wait+0xa2>
	SercomSpi *const spi_module = &(module->hw->SPI);
   1e34a:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   1e34c:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(module)) {
   1e34e:	4223      	tst	r3, r4
   1e350:	d0fc      	beq.n	1e34c <spi_write_buffer_wait+0x54>
		uint16_t data_to_send = tx_data[tx_pos++];
   1e352:	1c7b      	adds	r3, r7, #1
   1e354:	b29b      	uxth	r3, r3
   1e356:	4698      	mov	r8, r3
   1e358:	4653      	mov	r3, sl
   1e35a:	5ddb      	ldrb	r3, [r3, r7]
   1e35c:	469b      	mov	fp, r3
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   1e35e:	7981      	ldrb	r1, [r0, #6]
   1e360:	2901      	cmp	r1, #1
   1e362:	d0e1      	beq.n	1e328 <spi_write_buffer_wait+0x30>
		uint16_t data_to_send = tx_data[tx_pos++];
   1e364:	4669      	mov	r1, sp
   1e366:	80cb      	strh	r3, [r1, #6]
   1e368:	88cb      	ldrh	r3, [r1, #6]
   1e36a:	4647      	mov	r7, r8
   1e36c:	7e11      	ldrb	r1, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
   1e36e:	4221      	tst	r1, r4
   1e370:	d002      	beq.n	1e378 <spi_write_buffer_wait+0x80>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   1e372:	05db      	lsls	r3, r3, #23
   1e374:	0ddb      	lsrs	r3, r3, #23
   1e376:	6293      	str	r3, [r2, #40]	; 0x28
		if (module->receiver_enabled) {
   1e378:	79c3      	ldrb	r3, [r0, #7]
   1e37a:	2b00      	cmp	r3, #0
   1e37c:	d0e1      	beq.n	1e342 <spi_write_buffer_wait+0x4a>
	SercomSpi *const spi_module = &(module->hw->SPI);
   1e37e:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   1e380:	7e13      	ldrb	r3, [r2, #24]
			while (!spi_is_ready_to_read(module)) {
   1e382:	422b      	tst	r3, r5
   1e384:	d0fc      	beq.n	1e380 <spi_write_buffer_wait+0x88>
   1e386:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
   1e388:	422b      	tst	r3, r5
   1e38a:	d0da      	beq.n	1e342 <spi_write_buffer_wait+0x4a>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   1e38c:	8b53      	ldrh	r3, [r2, #26]
   1e38e:	422b      	tst	r3, r5
   1e390:	d0d3      	beq.n	1e33a <spi_write_buffer_wait+0x42>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   1e392:	8355      	strh	r5, [r2, #26]
   1e394:	e7d1      	b.n	1e33a <spi_write_buffer_wait+0x42>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   1e396:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1e398:	e7d3      	b.n	1e342 <spi_write_buffer_wait+0x4a>
	if (module->mode == SPI_MODE_MASTER) {
   1e39a:	7942      	ldrb	r2, [r0, #5]
	return STATUS_OK;
   1e39c:	2300      	movs	r3, #0
	if (module->mode == SPI_MODE_MASTER) {
   1e39e:	2a01      	cmp	r2, #1
   1e3a0:	d1ba      	bne.n	1e318 <spi_write_buffer_wait+0x20>
	SercomSpi *const spi_module = &(module->hw->SPI);
   1e3a2:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
   1e3a4:	3201      	adds	r2, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   1e3a6:	7e0b      	ldrb	r3, [r1, #24]
   1e3a8:	4213      	tst	r3, r2
   1e3aa:	d0fc      	beq.n	1e3a6 <spi_write_buffer_wait+0xae>
	return STATUS_OK;
   1e3ac:	2300      	movs	r3, #0
   1e3ae:	e7b3      	b.n	1e318 <spi_write_buffer_wait+0x20>
	while (length--) {
   1e3b0:	3a01      	subs	r2, #1
   1e3b2:	b296      	uxth	r6, r2
   1e3b4:	2700      	movs	r7, #0
		while (!spi_is_ready_to_write(module)) {
   1e3b6:	2401      	movs	r4, #1
			while (!spi_is_ready_to_read(module)) {
   1e3b8:	2504      	movs	r5, #4
	while (length--) {
   1e3ba:	4b01      	ldr	r3, [pc, #4]	; (1e3c0 <spi_write_buffer_wait+0xc8>)
   1e3bc:	469c      	mov	ip, r3
   1e3be:	e7c4      	b.n	1e34a <spi_write_buffer_wait+0x52>
   1e3c0:	0000ffff 	.word	0x0000ffff

0001e3c4 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
   1e3c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
   1e3c6:	0080      	lsls	r0, r0, #2
   1e3c8:	4b70      	ldr	r3, [pc, #448]	; (1e58c <_spi_interrupt_handler+0x1c8>)
   1e3ca:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   1e3cc:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
   1e3ce:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
   1e3d0:	5ce7      	ldrb	r7, [r4, r3]
   1e3d2:	2236      	movs	r2, #54	; 0x36
   1e3d4:	5ca2      	ldrb	r2, [r4, r2]
   1e3d6:	4017      	ands	r7, r2

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
   1e3d8:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
   1e3da:	7db5      	ldrb	r5, [r6, #22]
   1e3dc:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
   1e3de:	07eb      	lsls	r3, r5, #31
   1e3e0:	d502      	bpl.n	1e3e8 <_spi_interrupt_handler+0x24>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   1e3e2:	7963      	ldrb	r3, [r4, #5]
   1e3e4:	2b01      	cmp	r3, #1
   1e3e6:	d01e      	beq.n	1e426 <_spi_interrupt_handler+0x62>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
   1e3e8:	076b      	lsls	r3, r5, #29
   1e3ea:	d511      	bpl.n	1e410 <_spi_interrupt_handler+0x4c>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   1e3ec:	8b73      	ldrh	r3, [r6, #26]
   1e3ee:	075b      	lsls	r3, r3, #29
   1e3f0:	d55a      	bpl.n	1e4a8 <_spi_interrupt_handler+0xe4>
			if (module->dir != SPI_DIRECTION_WRITE) {
   1e3f2:	7a63      	ldrb	r3, [r4, #9]
   1e3f4:	2b01      	cmp	r3, #1
   1e3f6:	d008      	beq.n	1e40a <_spi_interrupt_handler+0x46>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
   1e3f8:	221e      	movs	r2, #30
   1e3fa:	2338      	movs	r3, #56	; 0x38
   1e3fc:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
   1e3fe:	3b35      	subs	r3, #53	; 0x35
   1e400:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
   1e402:	3302      	adds	r3, #2
   1e404:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
   1e406:	073b      	lsls	r3, r7, #28
   1e408:	d44a      	bmi.n	1e4a0 <_spi_interrupt_handler+0xdc>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
   1e40a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   1e40c:	2304      	movs	r3, #4
   1e40e:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
   1e410:	07ab      	lsls	r3, r5, #30
   1e412:	d503      	bpl.n	1e41c <_spi_interrupt_handler+0x58>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   1e414:	7963      	ldrb	r3, [r4, #5]
   1e416:	2b01      	cmp	r3, #1
   1e418:	d100      	bne.n	1e41c <_spi_interrupt_handler+0x58>
   1e41a:	e097      	b.n	1e54c <_spi_interrupt_handler+0x188>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
   1e41c:	b26d      	sxtb	r5, r5
   1e41e:	2d00      	cmp	r5, #0
   1e420:	da00      	bge.n	1e424 <_spi_interrupt_handler+0x60>
   1e422:	e0a9      	b.n	1e578 <_spi_interrupt_handler+0x1b4>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
   1e424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(module->dir == SPI_DIRECTION_READ)) {
   1e426:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
   1e428:	2b00      	cmp	r3, #0
   1e42a:	d022      	beq.n	1e472 <_spi_interrupt_handler+0xae>
			(module->dir != SPI_DIRECTION_READ))
   1e42c:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
   1e42e:	2b00      	cmp	r3, #0
   1e430:	d0da      	beq.n	1e3e8 <_spi_interrupt_handler+0x24>
	SercomSpi *const spi_hw = &(module->hw->SPI);
   1e432:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
   1e434:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   1e436:	7813      	ldrb	r3, [r2, #0]
   1e438:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
   1e43a:	1c50      	adds	r0, r2, #1
   1e43c:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   1e43e:	79a0      	ldrb	r0, [r4, #6]
   1e440:	2801      	cmp	r0, #1
   1e442:	d027      	beq.n	1e494 <_spi_interrupt_handler+0xd0>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
   1e444:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
   1e446:	05db      	lsls	r3, r3, #23
   1e448:	0ddb      	lsrs	r3, r3, #23
   1e44a:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
   1e44c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   1e44e:	3b01      	subs	r3, #1
   1e450:	b29b      	uxth	r3, r3
   1e452:	86a3      	strh	r3, [r4, #52]	; 0x34
			if (module->remaining_tx_buffer_length == 0) {
   1e454:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   1e456:	b29b      	uxth	r3, r3
   1e458:	2b00      	cmp	r3, #0
   1e45a:	d1c5      	bne.n	1e3e8 <_spi_interrupt_handler+0x24>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   1e45c:	3301      	adds	r3, #1
   1e45e:	7533      	strb	r3, [r6, #20]
				if (module->dir == SPI_DIRECTION_WRITE &&
   1e460:	7a63      	ldrb	r3, [r4, #9]
   1e462:	2b01      	cmp	r3, #1
   1e464:	d1c0      	bne.n	1e3e8 <_spi_interrupt_handler+0x24>
   1e466:	79e3      	ldrb	r3, [r4, #7]
   1e468:	2b00      	cmp	r3, #0
   1e46a:	d1bd      	bne.n	1e3e8 <_spi_interrupt_handler+0x24>
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
   1e46c:	3302      	adds	r3, #2
   1e46e:	75b3      	strb	r3, [r6, #22]
   1e470:	e7ba      	b.n	1e3e8 <_spi_interrupt_handler+0x24>
	spi_hw->DATA.reg = dummy_write;
   1e472:	4b47      	ldr	r3, [pc, #284]	; (1e590 <_spi_interrupt_handler+0x1cc>)
   1e474:	881b      	ldrh	r3, [r3, #0]
   1e476:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
   1e478:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   1e47a:	3b01      	subs	r3, #1
   1e47c:	b29b      	uxth	r3, r3
   1e47e:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
   1e480:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   1e482:	b29b      	uxth	r3, r3
   1e484:	2b00      	cmp	r3, #0
   1e486:	d101      	bne.n	1e48c <_spi_interrupt_handler+0xc8>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   1e488:	3301      	adds	r3, #1
   1e48a:	7533      	strb	r3, [r6, #20]
		if (0
   1e48c:	7963      	ldrb	r3, [r4, #5]
   1e48e:	2b01      	cmp	r3, #1
   1e490:	d0cc      	beq.n	1e42c <_spi_interrupt_handler+0x68>
   1e492:	e7a9      	b.n	1e3e8 <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
   1e494:	7850      	ldrb	r0, [r2, #1]
   1e496:	0200      	lsls	r0, r0, #8
   1e498:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
   1e49a:	3202      	adds	r2, #2
   1e49c:	62e2      	str	r2, [r4, #44]	; 0x2c
   1e49e:	e7d2      	b.n	1e446 <_spi_interrupt_handler+0x82>
					(module->callback[SPI_CALLBACK_ERROR])(module);
   1e4a0:	0020      	movs	r0, r4
   1e4a2:	69a3      	ldr	r3, [r4, #24]
   1e4a4:	4798      	blx	r3
   1e4a6:	e7b0      	b.n	1e40a <_spi_interrupt_handler+0x46>
			if (module->dir == SPI_DIRECTION_WRITE) {
   1e4a8:	7a63      	ldrb	r3, [r4, #9]
   1e4aa:	2b01      	cmp	r3, #1
   1e4ac:	d028      	beq.n	1e500 <_spi_interrupt_handler+0x13c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
   1e4ae:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
   1e4b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1e4b2:	05db      	lsls	r3, r3, #23
   1e4b4:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
   1e4b6:	b2da      	uxtb	r2, r3
   1e4b8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   1e4ba:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
   1e4bc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   1e4be:	1c51      	adds	r1, r2, #1
   1e4c0:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   1e4c2:	79a1      	ldrb	r1, [r4, #6]
   1e4c4:	2901      	cmp	r1, #1
   1e4c6:	d034      	beq.n	1e532 <_spi_interrupt_handler+0x16e>
	module->remaining_rx_buffer_length--;
   1e4c8:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   1e4ca:	3b01      	subs	r3, #1
   1e4cc:	b29b      	uxth	r3, r3
   1e4ce:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
   1e4d0:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   1e4d2:	b29b      	uxth	r3, r3
   1e4d4:	2b00      	cmp	r3, #0
   1e4d6:	d000      	beq.n	1e4da <_spi_interrupt_handler+0x116>
   1e4d8:	e79a      	b.n	1e410 <_spi_interrupt_handler+0x4c>
					module->status = STATUS_OK;
   1e4da:	2200      	movs	r2, #0
   1e4dc:	3338      	adds	r3, #56	; 0x38
   1e4de:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   1e4e0:	3b34      	subs	r3, #52	; 0x34
   1e4e2:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
   1e4e4:	7a63      	ldrb	r3, [r4, #9]
   1e4e6:	2b02      	cmp	r3, #2
   1e4e8:	d029      	beq.n	1e53e <_spi_interrupt_handler+0x17a>
					} else if (module->dir == SPI_DIRECTION_READ) {
   1e4ea:	7a63      	ldrb	r3, [r4, #9]
   1e4ec:	2b00      	cmp	r3, #0
   1e4ee:	d000      	beq.n	1e4f2 <_spi_interrupt_handler+0x12e>
   1e4f0:	e78e      	b.n	1e410 <_spi_interrupt_handler+0x4c>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
   1e4f2:	07bb      	lsls	r3, r7, #30
   1e4f4:	d400      	bmi.n	1e4f8 <_spi_interrupt_handler+0x134>
   1e4f6:	e78b      	b.n	1e410 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
   1e4f8:	0020      	movs	r0, r4
   1e4fa:	6923      	ldr	r3, [r4, #16]
   1e4fc:	4798      	blx	r3
   1e4fe:	e787      	b.n	1e410 <_spi_interrupt_handler+0x4c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
   1e500:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
   1e502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
   1e504:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   1e506:	3b01      	subs	r3, #1
   1e508:	b29b      	uxth	r3, r3
   1e50a:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
   1e50c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   1e50e:	b29b      	uxth	r3, r3
   1e510:	2b00      	cmp	r3, #0
   1e512:	d000      	beq.n	1e516 <_spi_interrupt_handler+0x152>
   1e514:	e77c      	b.n	1e410 <_spi_interrupt_handler+0x4c>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   1e516:	3304      	adds	r3, #4
   1e518:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
   1e51a:	2200      	movs	r2, #0
   1e51c:	3334      	adds	r3, #52	; 0x34
   1e51e:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
   1e520:	3b35      	subs	r3, #53	; 0x35
   1e522:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
   1e524:	07fb      	lsls	r3, r7, #31
   1e526:	d400      	bmi.n	1e52a <_spi_interrupt_handler+0x166>
   1e528:	e772      	b.n	1e410 <_spi_interrupt_handler+0x4c>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
   1e52a:	0020      	movs	r0, r4
   1e52c:	68e3      	ldr	r3, [r4, #12]
   1e52e:	4798      	blx	r3
   1e530:	e76e      	b.n	1e410 <_spi_interrupt_handler+0x4c>
		*(module->rx_buffer_ptr) = (received_data >> 8);
   1e532:	0a1b      	lsrs	r3, r3, #8
   1e534:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
   1e536:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1e538:	3301      	adds	r3, #1
   1e53a:	62a3      	str	r3, [r4, #40]	; 0x28
   1e53c:	e7c4      	b.n	1e4c8 <_spi_interrupt_handler+0x104>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
   1e53e:	077b      	lsls	r3, r7, #29
   1e540:	d400      	bmi.n	1e544 <_spi_interrupt_handler+0x180>
   1e542:	e765      	b.n	1e410 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
   1e544:	0020      	movs	r0, r4
   1e546:	6963      	ldr	r3, [r4, #20]
   1e548:	4798      	blx	r3
   1e54a:	e761      	b.n	1e410 <_spi_interrupt_handler+0x4c>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   1e54c:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
   1e54e:	2b01      	cmp	r3, #1
   1e550:	d000      	beq.n	1e554 <_spi_interrupt_handler+0x190>
   1e552:	e763      	b.n	1e41c <_spi_interrupt_handler+0x58>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   1e554:	79e3      	ldrb	r3, [r4, #7]
   1e556:	2b00      	cmp	r3, #0
   1e558:	d000      	beq.n	1e55c <_spi_interrupt_handler+0x198>
   1e55a:	e75f      	b.n	1e41c <_spi_interrupt_handler+0x58>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
   1e55c:	3302      	adds	r3, #2
   1e55e:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
   1e560:	3301      	adds	r3, #1
   1e562:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
   1e564:	2200      	movs	r2, #0
   1e566:	3335      	adds	r3, #53	; 0x35
   1e568:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
   1e56a:	07fb      	lsls	r3, r7, #31
   1e56c:	d400      	bmi.n	1e570 <_spi_interrupt_handler+0x1ac>
   1e56e:	e755      	b.n	1e41c <_spi_interrupt_handler+0x58>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
   1e570:	0020      	movs	r0, r4
   1e572:	68e3      	ldr	r3, [r4, #12]
   1e574:	4798      	blx	r3
   1e576:	e751      	b.n	1e41c <_spi_interrupt_handler+0x58>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   1e578:	2380      	movs	r3, #128	; 0x80
   1e57a:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   1e57c:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
   1e57e:	067b      	lsls	r3, r7, #25
   1e580:	d400      	bmi.n	1e584 <_spi_interrupt_handler+0x1c0>
   1e582:	e74f      	b.n	1e424 <_spi_interrupt_handler+0x60>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
   1e584:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1e586:	0020      	movs	r0, r4
   1e588:	4798      	blx	r3
}
   1e58a:	e74b      	b.n	1e424 <_spi_interrupt_handler+0x60>
   1e58c:	20005508 	.word	0x20005508
   1e590:	20005520 	.word	0x20005520

0001e594 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
   1e594:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e596:	46de      	mov	lr, fp
   1e598:	4657      	mov	r7, sl
   1e59a:	464e      	mov	r6, r9
   1e59c:	4645      	mov	r5, r8
   1e59e:	b5e0      	push	{r5, r6, r7, lr}
   1e5a0:	b091      	sub	sp, #68	; 0x44
   1e5a2:	0005      	movs	r5, r0
   1e5a4:	000c      	movs	r4, r1
   1e5a6:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
   1e5a8:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   1e5aa:	0008      	movs	r0, r1
   1e5ac:	4bbc      	ldr	r3, [pc, #752]	; (1e8a0 <usart_init+0x30c>)
   1e5ae:	4798      	blx	r3
   1e5b0:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   1e5b2:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
   1e5b4:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   1e5b6:	07db      	lsls	r3, r3, #31
   1e5b8:	d506      	bpl.n	1e5c8 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
   1e5ba:	b011      	add	sp, #68	; 0x44
   1e5bc:	bc3c      	pop	{r2, r3, r4, r5}
   1e5be:	4690      	mov	r8, r2
   1e5c0:	4699      	mov	r9, r3
   1e5c2:	46a2      	mov	sl, r4
   1e5c4:	46ab      	mov	fp, r5
   1e5c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   1e5c8:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
   1e5ca:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   1e5cc:	079b      	lsls	r3, r3, #30
   1e5ce:	d4f4      	bmi.n	1e5ba <usart_init+0x26>
   1e5d0:	49b4      	ldr	r1, [pc, #720]	; (1e8a4 <usart_init+0x310>)
   1e5d2:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   1e5d4:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   1e5d6:	2301      	movs	r3, #1
   1e5d8:	40bb      	lsls	r3, r7
   1e5da:	4303      	orrs	r3, r0
   1e5dc:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
   1e5de:	a90f      	add	r1, sp, #60	; 0x3c
   1e5e0:	272d      	movs	r7, #45	; 0x2d
   1e5e2:	5df3      	ldrb	r3, [r6, r7]
   1e5e4:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   1e5e6:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   1e5e8:	b2d3      	uxtb	r3, r2
   1e5ea:	9302      	str	r3, [sp, #8]
   1e5ec:	0018      	movs	r0, r3
   1e5ee:	4bae      	ldr	r3, [pc, #696]	; (1e8a8 <usart_init+0x314>)
   1e5f0:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   1e5f2:	9802      	ldr	r0, [sp, #8]
   1e5f4:	4bad      	ldr	r3, [pc, #692]	; (1e8ac <usart_init+0x318>)
   1e5f6:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   1e5f8:	5df0      	ldrb	r0, [r6, r7]
   1e5fa:	2100      	movs	r1, #0
   1e5fc:	4bac      	ldr	r3, [pc, #688]	; (1e8b0 <usart_init+0x31c>)
   1e5fe:	4798      	blx	r3
	module->character_size = config->character_size;
   1e600:	7af3      	ldrb	r3, [r6, #11]
   1e602:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
   1e604:	2324      	movs	r3, #36	; 0x24
   1e606:	5cf3      	ldrb	r3, [r6, r3]
   1e608:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
   1e60a:	2325      	movs	r3, #37	; 0x25
   1e60c:	5cf3      	ldrb	r3, [r6, r3]
   1e60e:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
   1e610:	7ef3      	ldrb	r3, [r6, #27]
   1e612:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
   1e614:	7f33      	ldrb	r3, [r6, #28]
   1e616:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
   1e618:	682b      	ldr	r3, [r5, #0]
   1e61a:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   1e61c:	0018      	movs	r0, r3
   1e61e:	4ba0      	ldr	r3, [pc, #640]	; (1e8a0 <usart_init+0x30c>)
   1e620:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   1e622:	3014      	adds	r0, #20
	uint16_t baud  = 0;
   1e624:	2200      	movs	r2, #0
   1e626:	230e      	movs	r3, #14
   1e628:	a906      	add	r1, sp, #24
   1e62a:	468c      	mov	ip, r1
   1e62c:	4463      	add	r3, ip
   1e62e:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
   1e630:	8a32      	ldrh	r2, [r6, #16]
   1e632:	9202      	str	r2, [sp, #8]
   1e634:	2380      	movs	r3, #128	; 0x80
   1e636:	01db      	lsls	r3, r3, #7
   1e638:	429a      	cmp	r2, r3
   1e63a:	d100      	bne.n	1e63e <usart_init+0xaa>
   1e63c:	e09e      	b.n	1e77c <usart_init+0x1e8>
   1e63e:	d90f      	bls.n	1e660 <usart_init+0xcc>
   1e640:	23c0      	movs	r3, #192	; 0xc0
   1e642:	01db      	lsls	r3, r3, #7
   1e644:	9a02      	ldr	r2, [sp, #8]
   1e646:	429a      	cmp	r2, r3
   1e648:	d100      	bne.n	1e64c <usart_init+0xb8>
   1e64a:	e092      	b.n	1e772 <usart_init+0x1de>
   1e64c:	2380      	movs	r3, #128	; 0x80
   1e64e:	021b      	lsls	r3, r3, #8
   1e650:	429a      	cmp	r2, r3
   1e652:	d000      	beq.n	1e656 <usart_init+0xc2>
   1e654:	e11f      	b.n	1e896 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
   1e656:	2303      	movs	r3, #3
   1e658:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   1e65a:	2300      	movs	r3, #0
   1e65c:	9307      	str	r3, [sp, #28]
   1e65e:	e008      	b.n	1e672 <usart_init+0xde>
	switch (config->sample_rate) {
   1e660:	2380      	movs	r3, #128	; 0x80
   1e662:	019b      	lsls	r3, r3, #6
   1e664:	429a      	cmp	r2, r3
   1e666:	d000      	beq.n	1e66a <usart_init+0xd6>
   1e668:	e115      	b.n	1e896 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   1e66a:	2310      	movs	r3, #16
   1e66c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   1e66e:	3b0f      	subs	r3, #15
   1e670:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
   1e672:	6833      	ldr	r3, [r6, #0]
   1e674:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
   1e676:	68f3      	ldr	r3, [r6, #12]
   1e678:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
   1e67a:	6973      	ldr	r3, [r6, #20]
   1e67c:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   1e67e:	7e33      	ldrb	r3, [r6, #24]
   1e680:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   1e682:	2326      	movs	r3, #38	; 0x26
   1e684:	5cf3      	ldrb	r3, [r6, r3]
   1e686:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
   1e688:	6873      	ldr	r3, [r6, #4]
   1e68a:	4699      	mov	r9, r3
	switch (transfer_mode)
   1e68c:	2b00      	cmp	r3, #0
   1e68e:	d100      	bne.n	1e692 <usart_init+0xfe>
   1e690:	e0a0      	b.n	1e7d4 <usart_init+0x240>
   1e692:	2380      	movs	r3, #128	; 0x80
   1e694:	055b      	lsls	r3, r3, #21
   1e696:	4599      	cmp	r9, r3
   1e698:	d100      	bne.n	1e69c <usart_init+0x108>
   1e69a:	e084      	b.n	1e7a6 <usart_init+0x212>
	if(config->encoding_format_enable) {
   1e69c:	7e73      	ldrb	r3, [r6, #25]
   1e69e:	2b00      	cmp	r3, #0
   1e6a0:	d002      	beq.n	1e6a8 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
   1e6a2:	7eb3      	ldrb	r3, [r6, #26]
   1e6a4:	4642      	mov	r2, r8
   1e6a6:	7393      	strb	r3, [r2, #14]
	SercomUsart *const usart_hw = &(module->hw->USART);
   1e6a8:	682a      	ldr	r2, [r5, #0]
   1e6aa:	9f02      	ldr	r7, [sp, #8]
	return (usart_hw->SYNCBUSY.reg);
   1e6ac:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
   1e6ae:	2b00      	cmp	r3, #0
   1e6b0:	d1fc      	bne.n	1e6ac <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
   1e6b2:	330e      	adds	r3, #14
   1e6b4:	aa06      	add	r2, sp, #24
   1e6b6:	4694      	mov	ip, r2
   1e6b8:	4463      	add	r3, ip
   1e6ba:	881b      	ldrh	r3, [r3, #0]
   1e6bc:	4642      	mov	r2, r8
   1e6be:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
   1e6c0:	9b05      	ldr	r3, [sp, #20]
   1e6c2:	9a03      	ldr	r2, [sp, #12]
   1e6c4:	4313      	orrs	r3, r2
   1e6c6:	9a04      	ldr	r2, [sp, #16]
   1e6c8:	4313      	orrs	r3, r2
   1e6ca:	464a      	mov	r2, r9
   1e6cc:	4313      	orrs	r3, r2
   1e6ce:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   1e6d0:	465b      	mov	r3, fp
   1e6d2:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
   1e6d4:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   1e6d6:	4653      	mov	r3, sl
   1e6d8:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
   1e6da:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
   1e6dc:	2327      	movs	r3, #39	; 0x27
   1e6de:	5cf3      	ldrb	r3, [r6, r3]
   1e6e0:	2b00      	cmp	r3, #0
   1e6e2:	d101      	bne.n	1e6e8 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
   1e6e4:	3304      	adds	r3, #4
   1e6e6:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   1e6e8:	7e73      	ldrb	r3, [r6, #25]
   1e6ea:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   1e6ec:	7f32      	ldrb	r2, [r6, #28]
   1e6ee:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   1e6f0:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   1e6f2:	7f72      	ldrb	r2, [r6, #29]
   1e6f4:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   1e6f6:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   1e6f8:	2224      	movs	r2, #36	; 0x24
   1e6fa:	5cb2      	ldrb	r2, [r6, r2]
   1e6fc:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   1e6fe:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
   1e700:	2225      	movs	r2, #37	; 0x25
   1e702:	5cb2      	ldrb	r2, [r6, r2]
   1e704:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   1e706:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
   1e708:	7ab1      	ldrb	r1, [r6, #10]
   1e70a:	7af2      	ldrb	r2, [r6, #11]
   1e70c:	4311      	orrs	r1, r2
   1e70e:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
   1e710:	8933      	ldrh	r3, [r6, #8]
   1e712:	2bff      	cmp	r3, #255	; 0xff
   1e714:	d100      	bne.n	1e718 <usart_init+0x184>
   1e716:	e081      	b.n	1e81c <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
   1e718:	2280      	movs	r2, #128	; 0x80
   1e71a:	0452      	lsls	r2, r2, #17
   1e71c:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
   1e71e:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
   1e720:	232c      	movs	r3, #44	; 0x2c
   1e722:	5cf3      	ldrb	r3, [r6, r3]
   1e724:	2b00      	cmp	r3, #0
   1e726:	d103      	bne.n	1e730 <usart_init+0x19c>
   1e728:	4b62      	ldr	r3, [pc, #392]	; (1e8b4 <usart_init+0x320>)
   1e72a:	789b      	ldrb	r3, [r3, #2]
   1e72c:	079b      	lsls	r3, r3, #30
   1e72e:	d501      	bpl.n	1e734 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
   1e730:	2380      	movs	r3, #128	; 0x80
   1e732:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
   1e734:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
   1e736:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
   1e738:	2b00      	cmp	r3, #0
   1e73a:	d1fc      	bne.n	1e736 <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
   1e73c:	4643      	mov	r3, r8
   1e73e:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   1e740:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
   1e742:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
   1e744:	2b00      	cmp	r3, #0
   1e746:	d1fc      	bne.n	1e742 <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
   1e748:	4643      	mov	r3, r8
   1e74a:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   1e74c:	ab0e      	add	r3, sp, #56	; 0x38
   1e74e:	2280      	movs	r2, #128	; 0x80
   1e750:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   1e752:	2200      	movs	r2, #0
   1e754:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
   1e756:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   1e758:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
   1e75a:	6b33      	ldr	r3, [r6, #48]	; 0x30
   1e75c:	930a      	str	r3, [sp, #40]	; 0x28
   1e75e:	6b73      	ldr	r3, [r6, #52]	; 0x34
   1e760:	930b      	str	r3, [sp, #44]	; 0x2c
   1e762:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   1e764:	930c      	str	r3, [sp, #48]	; 0x30
   1e766:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
   1e768:	9302      	str	r3, [sp, #8]
   1e76a:	930d      	str	r3, [sp, #52]	; 0x34
   1e76c:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
   1e76e:	ae0a      	add	r6, sp, #40	; 0x28
   1e770:	e063      	b.n	1e83a <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   1e772:	2308      	movs	r3, #8
   1e774:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   1e776:	3b07      	subs	r3, #7
   1e778:	9307      	str	r3, [sp, #28]
   1e77a:	e77a      	b.n	1e672 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
   1e77c:	6833      	ldr	r3, [r6, #0]
   1e77e:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
   1e780:	68f3      	ldr	r3, [r6, #12]
   1e782:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
   1e784:	6973      	ldr	r3, [r6, #20]
   1e786:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   1e788:	7e33      	ldrb	r3, [r6, #24]
   1e78a:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   1e78c:	2326      	movs	r3, #38	; 0x26
   1e78e:	5cf3      	ldrb	r3, [r6, r3]
   1e790:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
   1e792:	6873      	ldr	r3, [r6, #4]
   1e794:	4699      	mov	r9, r3
	switch (transfer_mode)
   1e796:	2b00      	cmp	r3, #0
   1e798:	d018      	beq.n	1e7cc <usart_init+0x238>
   1e79a:	2380      	movs	r3, #128	; 0x80
   1e79c:	055b      	lsls	r3, r3, #21
   1e79e:	4599      	cmp	r9, r3
   1e7a0:	d001      	beq.n	1e7a6 <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
   1e7a2:	2000      	movs	r0, #0
   1e7a4:	e025      	b.n	1e7f2 <usart_init+0x25e>
			if (!config->use_external_clock) {
   1e7a6:	2327      	movs	r3, #39	; 0x27
   1e7a8:	5cf3      	ldrb	r3, [r6, r3]
   1e7aa:	2b00      	cmp	r3, #0
   1e7ac:	d000      	beq.n	1e7b0 <usart_init+0x21c>
   1e7ae:	e775      	b.n	1e69c <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
   1e7b0:	6a33      	ldr	r3, [r6, #32]
   1e7b2:	001f      	movs	r7, r3
   1e7b4:	b2c0      	uxtb	r0, r0
   1e7b6:	4b40      	ldr	r3, [pc, #256]	; (1e8b8 <usart_init+0x324>)
   1e7b8:	4798      	blx	r3
   1e7ba:	0001      	movs	r1, r0
   1e7bc:	220e      	movs	r2, #14
   1e7be:	ab06      	add	r3, sp, #24
   1e7c0:	469c      	mov	ip, r3
   1e7c2:	4462      	add	r2, ip
   1e7c4:	0038      	movs	r0, r7
   1e7c6:	4b3d      	ldr	r3, [pc, #244]	; (1e8bc <usart_init+0x328>)
   1e7c8:	4798      	blx	r3
   1e7ca:	e012      	b.n	1e7f2 <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   1e7cc:	2308      	movs	r3, #8
   1e7ce:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   1e7d0:	2300      	movs	r3, #0
   1e7d2:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
   1e7d4:	2327      	movs	r3, #39	; 0x27
   1e7d6:	5cf3      	ldrb	r3, [r6, r3]
   1e7d8:	2b00      	cmp	r3, #0
   1e7da:	d00e      	beq.n	1e7fa <usart_init+0x266>
				status_code =
   1e7dc:	9b06      	ldr	r3, [sp, #24]
   1e7de:	9300      	str	r3, [sp, #0]
   1e7e0:	9b07      	ldr	r3, [sp, #28]
   1e7e2:	220e      	movs	r2, #14
   1e7e4:	a906      	add	r1, sp, #24
   1e7e6:	468c      	mov	ip, r1
   1e7e8:	4462      	add	r2, ip
   1e7ea:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   1e7ec:	6a30      	ldr	r0, [r6, #32]
   1e7ee:	4f34      	ldr	r7, [pc, #208]	; (1e8c0 <usart_init+0x32c>)
   1e7f0:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
   1e7f2:	2800      	cmp	r0, #0
   1e7f4:	d000      	beq.n	1e7f8 <usart_init+0x264>
   1e7f6:	e6e0      	b.n	1e5ba <usart_init+0x26>
   1e7f8:	e750      	b.n	1e69c <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
   1e7fa:	6a33      	ldr	r3, [r6, #32]
   1e7fc:	001f      	movs	r7, r3
   1e7fe:	b2c0      	uxtb	r0, r0
   1e800:	4b2d      	ldr	r3, [pc, #180]	; (1e8b8 <usart_init+0x324>)
   1e802:	4798      	blx	r3
   1e804:	0001      	movs	r1, r0
				status_code =
   1e806:	9b06      	ldr	r3, [sp, #24]
   1e808:	9300      	str	r3, [sp, #0]
   1e80a:	9b07      	ldr	r3, [sp, #28]
   1e80c:	220e      	movs	r2, #14
   1e80e:	a806      	add	r0, sp, #24
   1e810:	4684      	mov	ip, r0
   1e812:	4462      	add	r2, ip
   1e814:	0038      	movs	r0, r7
   1e816:	4f2a      	ldr	r7, [pc, #168]	; (1e8c0 <usart_init+0x32c>)
   1e818:	47b8      	blx	r7
   1e81a:	e7ea      	b.n	1e7f2 <usart_init+0x25e>
		if(config->lin_slave_enable) {
   1e81c:	7ef3      	ldrb	r3, [r6, #27]
   1e81e:	2b00      	cmp	r3, #0
   1e820:	d100      	bne.n	1e824 <usart_init+0x290>
   1e822:	e77d      	b.n	1e720 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
   1e824:	2380      	movs	r3, #128	; 0x80
   1e826:	04db      	lsls	r3, r3, #19
   1e828:	431f      	orrs	r7, r3
   1e82a:	e779      	b.n	1e720 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   1e82c:	0020      	movs	r0, r4
   1e82e:	4b25      	ldr	r3, [pc, #148]	; (1e8c4 <usart_init+0x330>)
   1e830:	4798      	blx	r3
   1e832:	e007      	b.n	1e844 <usart_init+0x2b0>
   1e834:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
   1e836:	2f04      	cmp	r7, #4
   1e838:	d00d      	beq.n	1e856 <usart_init+0x2c2>
   1e83a:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
   1e83c:	00bb      	lsls	r3, r7, #2
   1e83e:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
   1e840:	2800      	cmp	r0, #0
   1e842:	d0f3      	beq.n	1e82c <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
   1e844:	1c43      	adds	r3, r0, #1
   1e846:	d0f5      	beq.n	1e834 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   1e848:	a90e      	add	r1, sp, #56	; 0x38
   1e84a:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   1e84c:	0c00      	lsrs	r0, r0, #16
   1e84e:	b2c0      	uxtb	r0, r0
   1e850:	4b1d      	ldr	r3, [pc, #116]	; (1e8c8 <usart_init+0x334>)
   1e852:	4798      	blx	r3
   1e854:	e7ee      	b.n	1e834 <usart_init+0x2a0>
		module->callback[i]            = NULL;
   1e856:	2300      	movs	r3, #0
   1e858:	60eb      	str	r3, [r5, #12]
   1e85a:	612b      	str	r3, [r5, #16]
   1e85c:	616b      	str	r3, [r5, #20]
   1e85e:	61ab      	str	r3, [r5, #24]
   1e860:	61eb      	str	r3, [r5, #28]
   1e862:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
   1e864:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
   1e866:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
   1e868:	2200      	movs	r2, #0
   1e86a:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
   1e86c:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
   1e86e:	3330      	adds	r3, #48	; 0x30
   1e870:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
   1e872:	3301      	adds	r3, #1
   1e874:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
   1e876:	3301      	adds	r3, #1
   1e878:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
   1e87a:	3301      	adds	r3, #1
   1e87c:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   1e87e:	6828      	ldr	r0, [r5, #0]
   1e880:	4b07      	ldr	r3, [pc, #28]	; (1e8a0 <usart_init+0x30c>)
   1e882:	4798      	blx	r3
   1e884:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   1e886:	4911      	ldr	r1, [pc, #68]	; (1e8cc <usart_init+0x338>)
   1e888:	4b11      	ldr	r3, [pc, #68]	; (1e8d0 <usart_init+0x33c>)
   1e88a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   1e88c:	00a4      	lsls	r4, r4, #2
   1e88e:	4b11      	ldr	r3, [pc, #68]	; (1e8d4 <usart_init+0x340>)
   1e890:	50e5      	str	r5, [r4, r3]
	return status_code;
   1e892:	2000      	movs	r0, #0
   1e894:	e691      	b.n	1e5ba <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   1e896:	2310      	movs	r3, #16
   1e898:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   1e89a:	2300      	movs	r3, #0
   1e89c:	9307      	str	r3, [sp, #28]
   1e89e:	e6e8      	b.n	1e672 <usart_init+0xde>
   1e8a0:	0001dd99 	.word	0x0001dd99
   1e8a4:	40000400 	.word	0x40000400
   1e8a8:	0001f139 	.word	0x0001f139
   1e8ac:	0001f0ad 	.word	0x0001f0ad
   1e8b0:	0001dbd5 	.word	0x0001dbd5
   1e8b4:	41002000 	.word	0x41002000
   1e8b8:	0001f155 	.word	0x0001f155
   1e8bc:	0001db17 	.word	0x0001db17
   1e8c0:	0001db41 	.word	0x0001db41
   1e8c4:	0001dc21 	.word	0x0001dc21
   1e8c8:	0001f261 	.word	0x0001f261
   1e8cc:	0001e9d9 	.word	0x0001e9d9
   1e8d0:	0001ddd5 	.word	0x0001ddd5
   1e8d4:	20005508 	.word	0x20005508

0001e8d8 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   1e8d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e8da:	0006      	movs	r6, r0
   1e8dc:	000c      	movs	r4, r1
   1e8de:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   1e8e0:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
   1e8e2:	4b0a      	ldr	r3, [pc, #40]	; (1e90c <_usart_write_buffer+0x34>)
   1e8e4:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
   1e8e6:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
   1e8e8:	b29b      	uxth	r3, r3
   1e8ea:	2b00      	cmp	r3, #0
   1e8ec:	d003      	beq.n	1e8f6 <_usart_write_buffer+0x1e>
	cpu_irq_leave_critical();
   1e8ee:	4b08      	ldr	r3, [pc, #32]	; (1e910 <_usart_write_buffer+0x38>)
   1e8f0:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
   1e8f2:	2005      	movs	r0, #5

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;

	return STATUS_OK;
}
   1e8f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_tx_buffer_length = length;
   1e8f6:	85f5      	strh	r5, [r6, #46]	; 0x2e
   1e8f8:	4b05      	ldr	r3, [pc, #20]	; (1e910 <_usart_write_buffer+0x38>)
   1e8fa:	4798      	blx	r3
	module->tx_buffer_ptr              = tx_data;
   1e8fc:	62b4      	str	r4, [r6, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
   1e8fe:	2205      	movs	r2, #5
   1e900:	2333      	movs	r3, #51	; 0x33
   1e902:	54f2      	strb	r2, [r6, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
   1e904:	3b32      	subs	r3, #50	; 0x32
   1e906:	75bb      	strb	r3, [r7, #22]
	return STATUS_OK;
   1e908:	2000      	movs	r0, #0
   1e90a:	e7f3      	b.n	1e8f4 <_usart_write_buffer+0x1c>
   1e90c:	0001d585 	.word	0x0001d585
   1e910:	0001d5c5 	.word	0x0001d5c5

0001e914 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   1e914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e916:	0004      	movs	r4, r0
   1e918:	000d      	movs	r5, r1
   1e91a:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   1e91c:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
   1e91e:	4b0f      	ldr	r3, [pc, #60]	; (1e95c <_usart_read_buffer+0x48>)
   1e920:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
   1e922:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   1e924:	b29b      	uxth	r3, r3
   1e926:	2b00      	cmp	r3, #0
   1e928:	d003      	beq.n	1e932 <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
   1e92a:	4b0d      	ldr	r3, [pc, #52]	; (1e960 <_usart_read_buffer+0x4c>)
   1e92c:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
   1e92e:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
   1e930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
   1e932:	85a6      	strh	r6, [r4, #44]	; 0x2c
   1e934:	4b0a      	ldr	r3, [pc, #40]	; (1e960 <_usart_read_buffer+0x4c>)
   1e936:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
   1e938:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
   1e93a:	2205      	movs	r2, #5
   1e93c:	2332      	movs	r3, #50	; 0x32
   1e93e:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
   1e940:	3b2e      	subs	r3, #46	; 0x2e
   1e942:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
   1e944:	7a23      	ldrb	r3, [r4, #8]
   1e946:	2b00      	cmp	r3, #0
   1e948:	d001      	beq.n	1e94e <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
   1e94a:	2320      	movs	r3, #32
   1e94c:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
   1e94e:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
   1e950:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
   1e952:	2b00      	cmp	r3, #0
   1e954:	d0ec      	beq.n	1e930 <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
   1e956:	2308      	movs	r3, #8
   1e958:	75bb      	strb	r3, [r7, #22]
   1e95a:	e7e9      	b.n	1e930 <_usart_read_buffer+0x1c>
   1e95c:	0001d585 	.word	0x0001d585
   1e960:	0001d5c5 	.word	0x0001d5c5

0001e964 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   1e964:	1c93      	adds	r3, r2, #2
   1e966:	009b      	lsls	r3, r3, #2
   1e968:	18c3      	adds	r3, r0, r3
   1e96a:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
   1e96c:	2130      	movs	r1, #48	; 0x30
   1e96e:	2301      	movs	r3, #1
   1e970:	4093      	lsls	r3, r2
   1e972:	001a      	movs	r2, r3
   1e974:	5c43      	ldrb	r3, [r0, r1]
   1e976:	4313      	orrs	r3, r2
   1e978:	5443      	strb	r3, [r0, r1]
}
   1e97a:	4770      	bx	lr

0001e97c <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   1e97c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
   1e97e:	2317      	movs	r3, #23
	if (length == 0) {
   1e980:	2a00      	cmp	r2, #0
   1e982:	d101      	bne.n	1e988 <usart_write_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
}
   1e984:	0018      	movs	r0, r3
   1e986:	bd10      	pop	{r4, pc}
	if (!(module->transmitter_enabled)) {
   1e988:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
   1e98a:	3305      	adds	r3, #5
	if (!(module->transmitter_enabled)) {
   1e98c:	2c00      	cmp	r4, #0
   1e98e:	d0f9      	beq.n	1e984 <usart_write_buffer_job+0x8>
	return _usart_write_buffer(module, tx_data, length);
   1e990:	4b01      	ldr	r3, [pc, #4]	; (1e998 <usart_write_buffer_job+0x1c>)
   1e992:	4798      	blx	r3
   1e994:	0003      	movs	r3, r0
   1e996:	e7f5      	b.n	1e984 <usart_write_buffer_job+0x8>
   1e998:	0001e8d9 	.word	0x0001e8d9

0001e99c <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   1e99c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
   1e99e:	2317      	movs	r3, #23
	if (length == 0) {
   1e9a0:	2a00      	cmp	r2, #0
   1e9a2:	d101      	bne.n	1e9a8 <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
   1e9a4:	0018      	movs	r0, r3
   1e9a6:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
   1e9a8:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
   1e9aa:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
   1e9ac:	2c00      	cmp	r4, #0
   1e9ae:	d0f9      	beq.n	1e9a4 <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
   1e9b0:	4b01      	ldr	r3, [pc, #4]	; (1e9b8 <usart_read_buffer_job+0x1c>)
   1e9b2:	4798      	blx	r3
   1e9b4:	0003      	movs	r3, r0
   1e9b6:	e7f5      	b.n	1e9a4 <usart_read_buffer_job+0x8>
   1e9b8:	0001e915 	.word	0x0001e915

0001e9bc <usart_get_job_status>:
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
   1e9bc:	2900      	cmp	r1, #0
   1e9be:	d003      	beq.n	1e9c8 <usart_get_job_status+0xc>
   1e9c0:	2901      	cmp	r1, #1
   1e9c2:	d005      	beq.n	1e9d0 <usart_get_job_status+0x14>
	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
			break;

	default:
			status_code = STATUS_ERR_INVALID_ARG;
   1e9c4:	2017      	movs	r0, #23
   1e9c6:	e002      	b.n	1e9ce <usart_get_job_status+0x12>
			status_code = module->rx_status;
   1e9c8:	2332      	movs	r3, #50	; 0x32
   1e9ca:	5cc0      	ldrb	r0, [r0, r3]
   1e9cc:	b2c0      	uxtb	r0, r0
			break;
	}

	return status_code;
}
   1e9ce:	4770      	bx	lr
			status_code = module->tx_status;
   1e9d0:	2333      	movs	r3, #51	; 0x33
   1e9d2:	5cc0      	ldrb	r0, [r0, r3]
   1e9d4:	b2c0      	uxtb	r0, r0
			break;
   1e9d6:	e7fa      	b.n	1e9ce <usart_get_job_status+0x12>

0001e9d8 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
   1e9d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
   1e9da:	0080      	lsls	r0, r0, #2
   1e9dc:	4b62      	ldr	r3, [pc, #392]	; (1eb68 <_usart_interrupt_handler+0x190>)
   1e9de:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
   1e9e0:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
   1e9e2:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
   1e9e4:	2b00      	cmp	r3, #0
   1e9e6:	d1fc      	bne.n	1e9e2 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
   1e9e8:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
   1e9ea:	7da6      	ldrb	r6, [r4, #22]
   1e9ec:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
   1e9ee:	2330      	movs	r3, #48	; 0x30
   1e9f0:	5ceb      	ldrb	r3, [r5, r3]
   1e9f2:	2231      	movs	r2, #49	; 0x31
   1e9f4:	5caf      	ldrb	r7, [r5, r2]
   1e9f6:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
   1e9f8:	07f3      	lsls	r3, r6, #31
   1e9fa:	d522      	bpl.n	1ea42 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
   1e9fc:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
   1e9fe:	b29b      	uxth	r3, r3
   1ea00:	2b00      	cmp	r3, #0
   1ea02:	d01c      	beq.n	1ea3e <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   1ea04:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   1ea06:	7813      	ldrb	r3, [r2, #0]
   1ea08:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
   1ea0a:	1c51      	adds	r1, r2, #1
   1ea0c:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   1ea0e:	7969      	ldrb	r1, [r5, #5]
   1ea10:	2901      	cmp	r1, #1
   1ea12:	d00e      	beq.n	1ea32 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   1ea14:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
   1ea16:	05db      	lsls	r3, r3, #23
   1ea18:	0ddb      	lsrs	r3, r3, #23
   1ea1a:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
   1ea1c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
   1ea1e:	3b01      	subs	r3, #1
   1ea20:	b29b      	uxth	r3, r3
   1ea22:	85eb      	strh	r3, [r5, #46]	; 0x2e
   1ea24:	2b00      	cmp	r3, #0
   1ea26:	d10c      	bne.n	1ea42 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   1ea28:	3301      	adds	r3, #1
   1ea2a:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
   1ea2c:	3301      	adds	r3, #1
   1ea2e:	75a3      	strb	r3, [r4, #22]
   1ea30:	e007      	b.n	1ea42 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
   1ea32:	7851      	ldrb	r1, [r2, #1]
   1ea34:	0209      	lsls	r1, r1, #8
   1ea36:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
   1ea38:	3202      	adds	r2, #2
   1ea3a:	62aa      	str	r2, [r5, #40]	; 0x28
   1ea3c:	e7eb      	b.n	1ea16 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   1ea3e:	2301      	movs	r3, #1
   1ea40:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
   1ea42:	07b3      	lsls	r3, r6, #30
   1ea44:	d506      	bpl.n	1ea54 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
   1ea46:	2302      	movs	r3, #2
   1ea48:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
   1ea4a:	2200      	movs	r2, #0
   1ea4c:	3331      	adds	r3, #49	; 0x31
   1ea4e:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
   1ea50:	07fb      	lsls	r3, r7, #31
   1ea52:	d41a      	bmi.n	1ea8a <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
   1ea54:	0773      	lsls	r3, r6, #29
   1ea56:	d565      	bpl.n	1eb24 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
   1ea58:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
   1ea5a:	b29b      	uxth	r3, r3
   1ea5c:	2b00      	cmp	r3, #0
   1ea5e:	d05f      	beq.n	1eb20 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   1ea60:	8b63      	ldrh	r3, [r4, #26]
   1ea62:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
   1ea64:	071a      	lsls	r2, r3, #28
   1ea66:	d414      	bmi.n	1ea92 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   1ea68:	223f      	movs	r2, #63	; 0x3f
   1ea6a:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
   1ea6c:	2b00      	cmp	r3, #0
   1ea6e:	d034      	beq.n	1eada <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
   1ea70:	079a      	lsls	r2, r3, #30
   1ea72:	d511      	bpl.n	1ea98 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
   1ea74:	221a      	movs	r2, #26
   1ea76:	2332      	movs	r3, #50	; 0x32
   1ea78:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   1ea7a:	3b30      	subs	r3, #48	; 0x30
   1ea7c:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
   1ea7e:	077b      	lsls	r3, r7, #29
   1ea80:	d550      	bpl.n	1eb24 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
   1ea82:	0028      	movs	r0, r5
   1ea84:	696b      	ldr	r3, [r5, #20]
   1ea86:	4798      	blx	r3
   1ea88:	e04c      	b.n	1eb24 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
   1ea8a:	0028      	movs	r0, r5
   1ea8c:	68eb      	ldr	r3, [r5, #12]
   1ea8e:	4798      	blx	r3
   1ea90:	e7e0      	b.n	1ea54 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
   1ea92:	2237      	movs	r2, #55	; 0x37
   1ea94:	4013      	ands	r3, r2
   1ea96:	e7e9      	b.n	1ea6c <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   1ea98:	075a      	lsls	r2, r3, #29
   1ea9a:	d505      	bpl.n	1eaa8 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
   1ea9c:	221e      	movs	r2, #30
   1ea9e:	2332      	movs	r3, #50	; 0x32
   1eaa0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   1eaa2:	3b2e      	subs	r3, #46	; 0x2e
   1eaa4:	8363      	strh	r3, [r4, #26]
   1eaa6:	e7ea      	b.n	1ea7e <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
   1eaa8:	07da      	lsls	r2, r3, #31
   1eaaa:	d505      	bpl.n	1eab8 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
   1eaac:	2213      	movs	r2, #19
   1eaae:	2332      	movs	r3, #50	; 0x32
   1eab0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   1eab2:	3b31      	subs	r3, #49	; 0x31
   1eab4:	8363      	strh	r3, [r4, #26]
   1eab6:	e7e2      	b.n	1ea7e <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
   1eab8:	06da      	lsls	r2, r3, #27
   1eaba:	d505      	bpl.n	1eac8 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
   1eabc:	2242      	movs	r2, #66	; 0x42
   1eabe:	2332      	movs	r3, #50	; 0x32
   1eac0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   1eac2:	3b22      	subs	r3, #34	; 0x22
   1eac4:	8363      	strh	r3, [r4, #26]
   1eac6:	e7da      	b.n	1ea7e <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
   1eac8:	2220      	movs	r2, #32
   1eaca:	421a      	tst	r2, r3
   1eacc:	d0d7      	beq.n	1ea7e <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
   1eace:	3221      	adds	r2, #33	; 0x21
   1ead0:	2332      	movs	r3, #50	; 0x32
   1ead2:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   1ead4:	3b12      	subs	r3, #18
   1ead6:	8363      	strh	r3, [r4, #26]
   1ead8:	e7d1      	b.n	1ea7e <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   1eada:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   1eadc:	05db      	lsls	r3, r3, #23
   1eade:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
   1eae0:	b2da      	uxtb	r2, r3
   1eae2:	6a69      	ldr	r1, [r5, #36]	; 0x24
   1eae4:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
   1eae6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   1eae8:	1c51      	adds	r1, r2, #1
   1eaea:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   1eaec:	7969      	ldrb	r1, [r5, #5]
   1eaee:	2901      	cmp	r1, #1
   1eaf0:	d010      	beq.n	1eb14 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
   1eaf2:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
   1eaf4:	3b01      	subs	r3, #1
   1eaf6:	b29b      	uxth	r3, r3
   1eaf8:	85ab      	strh	r3, [r5, #44]	; 0x2c
   1eafa:	2b00      	cmp	r3, #0
   1eafc:	d112      	bne.n	1eb24 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   1eafe:	3304      	adds	r3, #4
   1eb00:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
   1eb02:	2200      	movs	r2, #0
   1eb04:	332e      	adds	r3, #46	; 0x2e
   1eb06:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
   1eb08:	07bb      	lsls	r3, r7, #30
   1eb0a:	d50b      	bpl.n	1eb24 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
   1eb0c:	0028      	movs	r0, r5
   1eb0e:	692b      	ldr	r3, [r5, #16]
   1eb10:	4798      	blx	r3
   1eb12:	e007      	b.n	1eb24 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
   1eb14:	0a1b      	lsrs	r3, r3, #8
   1eb16:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
   1eb18:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1eb1a:	3301      	adds	r3, #1
   1eb1c:	626b      	str	r3, [r5, #36]	; 0x24
   1eb1e:	e7e8      	b.n	1eaf2 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   1eb20:	2304      	movs	r3, #4
   1eb22:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
   1eb24:	06f3      	lsls	r3, r6, #27
   1eb26:	d504      	bpl.n	1eb32 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
   1eb28:	2310      	movs	r3, #16
   1eb2a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
   1eb2c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
   1eb2e:	06fb      	lsls	r3, r7, #27
   1eb30:	d40e      	bmi.n	1eb50 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
   1eb32:	06b3      	lsls	r3, r6, #26
   1eb34:	d504      	bpl.n	1eb40 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
   1eb36:	2320      	movs	r3, #32
   1eb38:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
   1eb3a:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
   1eb3c:	073b      	lsls	r3, r7, #28
   1eb3e:	d40b      	bmi.n	1eb58 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
   1eb40:	0733      	lsls	r3, r6, #28
   1eb42:	d504      	bpl.n	1eb4e <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
   1eb44:	2308      	movs	r3, #8
   1eb46:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
   1eb48:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
   1eb4a:	06bb      	lsls	r3, r7, #26
   1eb4c:	d408      	bmi.n	1eb60 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
   1eb4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
   1eb50:	0028      	movs	r0, r5
   1eb52:	69eb      	ldr	r3, [r5, #28]
   1eb54:	4798      	blx	r3
   1eb56:	e7ec      	b.n	1eb32 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
   1eb58:	0028      	movs	r0, r5
   1eb5a:	69ab      	ldr	r3, [r5, #24]
   1eb5c:	4798      	blx	r3
   1eb5e:	e7ef      	b.n	1eb40 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
   1eb60:	6a2b      	ldr	r3, [r5, #32]
   1eb62:	0028      	movs	r0, r5
   1eb64:	4798      	blx	r3
}
   1eb66:	e7f2      	b.n	1eb4e <_usart_interrupt_handler+0x176>
   1eb68:	20005508 	.word	0x20005508

0001eb6c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   1eb6c:	b510      	push	{r4, lr}
	switch (clock_source) {
   1eb6e:	2808      	cmp	r0, #8
   1eb70:	d803      	bhi.n	1eb7a <system_clock_source_get_hz+0xe>
   1eb72:	0080      	lsls	r0, r0, #2
   1eb74:	4b1c      	ldr	r3, [pc, #112]	; (1ebe8 <system_clock_source_get_hz+0x7c>)
   1eb76:	581b      	ldr	r3, [r3, r0]
   1eb78:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
   1eb7a:	2000      	movs	r0, #0
   1eb7c:	e032      	b.n	1ebe4 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
   1eb7e:	4b1b      	ldr	r3, [pc, #108]	; (1ebec <system_clock_source_get_hz+0x80>)
   1eb80:	6918      	ldr	r0, [r3, #16]
   1eb82:	e02f      	b.n	1ebe4 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
   1eb84:	4b1a      	ldr	r3, [pc, #104]	; (1ebf0 <system_clock_source_get_hz+0x84>)
   1eb86:	6a1b      	ldr	r3, [r3, #32]
   1eb88:	059b      	lsls	r3, r3, #22
   1eb8a:	0f9b      	lsrs	r3, r3, #30
   1eb8c:	4819      	ldr	r0, [pc, #100]	; (1ebf4 <system_clock_source_get_hz+0x88>)
   1eb8e:	40d8      	lsrs	r0, r3
   1eb90:	e028      	b.n	1ebe4 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
   1eb92:	4b16      	ldr	r3, [pc, #88]	; (1ebec <system_clock_source_get_hz+0x80>)
   1eb94:	6958      	ldr	r0, [r3, #20]
   1eb96:	e025      	b.n	1ebe4 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   1eb98:	4b14      	ldr	r3, [pc, #80]	; (1ebec <system_clock_source_get_hz+0x80>)
   1eb9a:	681b      	ldr	r3, [r3, #0]
			return 0;
   1eb9c:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   1eb9e:	079b      	lsls	r3, r3, #30
   1eba0:	d520      	bpl.n	1ebe4 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   1eba2:	4913      	ldr	r1, [pc, #76]	; (1ebf0 <system_clock_source_get_hz+0x84>)
   1eba4:	2210      	movs	r2, #16
   1eba6:	68cb      	ldr	r3, [r1, #12]
   1eba8:	421a      	tst	r2, r3
   1ebaa:	d0fc      	beq.n	1eba6 <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
   1ebac:	4b0f      	ldr	r3, [pc, #60]	; (1ebec <system_clock_source_get_hz+0x80>)
   1ebae:	681a      	ldr	r2, [r3, #0]
   1ebb0:	2324      	movs	r3, #36	; 0x24
   1ebb2:	4013      	ands	r3, r2
   1ebb4:	2b04      	cmp	r3, #4
   1ebb6:	d001      	beq.n	1ebbc <system_clock_source_get_hz+0x50>
			return 48000000UL;
   1ebb8:	480f      	ldr	r0, [pc, #60]	; (1ebf8 <system_clock_source_get_hz+0x8c>)
   1ebba:	e013      	b.n	1ebe4 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   1ebbc:	2000      	movs	r0, #0
   1ebbe:	4b0f      	ldr	r3, [pc, #60]	; (1ebfc <system_clock_source_get_hz+0x90>)
   1ebc0:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
   1ebc2:	4b0a      	ldr	r3, [pc, #40]	; (1ebec <system_clock_source_get_hz+0x80>)
   1ebc4:	689b      	ldr	r3, [r3, #8]
   1ebc6:	041b      	lsls	r3, r3, #16
   1ebc8:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   1ebca:	4358      	muls	r0, r3
   1ebcc:	e00a      	b.n	1ebe4 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   1ebce:	2350      	movs	r3, #80	; 0x50
   1ebd0:	4a07      	ldr	r2, [pc, #28]	; (1ebf0 <system_clock_source_get_hz+0x84>)
   1ebd2:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
   1ebd4:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   1ebd6:	075b      	lsls	r3, r3, #29
   1ebd8:	d504      	bpl.n	1ebe4 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
   1ebda:	4b04      	ldr	r3, [pc, #16]	; (1ebec <system_clock_source_get_hz+0x80>)
   1ebdc:	68d8      	ldr	r0, [r3, #12]
   1ebde:	e001      	b.n	1ebe4 <system_clock_source_get_hz+0x78>
		return 32768UL;
   1ebe0:	2080      	movs	r0, #128	; 0x80
   1ebe2:	0200      	lsls	r0, r0, #8
	}
}
   1ebe4:	bd10      	pop	{r4, pc}
   1ebe6:	46c0      	nop			; (mov r8, r8)
   1ebe8:	0002af38 	.word	0x0002af38
   1ebec:	20003ce0 	.word	0x20003ce0
   1ebf0:	40000800 	.word	0x40000800
   1ebf4:	007a1200 	.word	0x007a1200
   1ebf8:	02dc6c00 	.word	0x02dc6c00
   1ebfc:	0001f155 	.word	0x0001f155

0001ec00 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
   1ec00:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
   1ec02:	490c      	ldr	r1, [pc, #48]	; (1ec34 <system_clock_source_osc8m_set_config+0x34>)
   1ec04:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
   1ec06:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
   1ec08:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
   1ec0a:	7840      	ldrb	r0, [r0, #1]
   1ec0c:	2201      	movs	r2, #1
   1ec0e:	4010      	ands	r0, r2
   1ec10:	0180      	lsls	r0, r0, #6
   1ec12:	2640      	movs	r6, #64	; 0x40
   1ec14:	43b3      	bics	r3, r6
   1ec16:	4303      	orrs	r3, r0
   1ec18:	402a      	ands	r2, r5
   1ec1a:	01d2      	lsls	r2, r2, #7
   1ec1c:	2080      	movs	r0, #128	; 0x80
   1ec1e:	4383      	bics	r3, r0
   1ec20:	4313      	orrs	r3, r2
   1ec22:	2203      	movs	r2, #3
   1ec24:	4022      	ands	r2, r4
   1ec26:	0212      	lsls	r2, r2, #8
   1ec28:	4803      	ldr	r0, [pc, #12]	; (1ec38 <system_clock_source_osc8m_set_config+0x38>)
   1ec2a:	4003      	ands	r3, r0
   1ec2c:	4313      	orrs	r3, r2
   1ec2e:	620b      	str	r3, [r1, #32]
}
   1ec30:	bd70      	pop	{r4, r5, r6, pc}
   1ec32:	46c0      	nop			; (mov r8, r8)
   1ec34:	40000800 	.word	0x40000800
   1ec38:	fffffcff 	.word	0xfffffcff

0001ec3c <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
   1ec3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ec3e:	0005      	movs	r5, r0

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
   1ec40:	68c4      	ldr	r4, [r0, #12]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
   1ec42:	7d03      	ldrb	r3, [r0, #20]
   1ec44:	2b01      	cmp	r3, #1
   1ec46:	d03b      	beq.n	1ecc0 <system_clock_source_dpll_set_config+0x84>
		refclk = refclk / (2 * (config->reference_divider + 1));
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
   1ec48:	68ab      	ldr	r3, [r5, #8]
   1ec4a:	0118      	lsls	r0, r3, #4
   1ec4c:	0021      	movs	r1, r4
   1ec4e:	4b20      	ldr	r3, [pc, #128]	; (1ecd0 <system_clock_source_dpll_set_config+0x94>)
   1ec50:	4798      	blx	r3
	tmpldrfrac = tmpldr & 0x0f;
   1ec52:	220f      	movs	r2, #15
   1ec54:	4002      	ands	r2, r0
	tmpldr = (tmpldr >> 4) - 1;
   1ec56:	0903      	lsrs	r3, r0, #4

	SYSCTRL->DPLLCTRLA.reg =
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   1ec58:	782e      	ldrb	r6, [r5, #0]
   1ec5a:	01f6      	lsls	r6, r6, #7
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);
   1ec5c:	7869      	ldrb	r1, [r5, #1]
   1ec5e:	0189      	lsls	r1, r1, #6
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   1ec60:	430e      	orrs	r6, r1
   1ec62:	b2f6      	uxtb	r6, r6
	SYSCTRL->DPLLCTRLA.reg =
   1ec64:	491b      	ldr	r1, [pc, #108]	; (1ecd4 <system_clock_source_dpll_set_config+0x98>)
   1ec66:	2744      	movs	r7, #68	; 0x44
   1ec68:	55ce      	strb	r6, [r1, r7]

	SYSCTRL->DPLLRATIO.reg =
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   1ec6a:	0416      	lsls	r6, r2, #16
	tmpldr = (tmpldr >> 4) - 1;
   1ec6c:	3b01      	subs	r3, #1
			SYSCTRL_DPLLRATIO_LDR(tmpldr);
   1ec6e:	051b      	lsls	r3, r3, #20
   1ec70:	0d1b      	lsrs	r3, r3, #20
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   1ec72:	4333      	orrs	r3, r6
	SYSCTRL->DPLLRATIO.reg =
   1ec74:	648b      	str	r3, [r1, #72]	; 0x48

	SYSCTRL->DPLLCTRLB.reg =
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   1ec76:	78ab      	ldrb	r3, [r5, #2]
   1ec78:	031b      	lsls	r3, r3, #12
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   1ec7a:	78ee      	ldrb	r6, [r5, #3]
   1ec7c:	00f6      	lsls	r6, r6, #3
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   1ec7e:	4333      	orrs	r3, r6
   1ec80:	792e      	ldrb	r6, [r5, #4]
   1ec82:	00b6      	lsls	r6, r6, #2
   1ec84:	4333      	orrs	r3, r6
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);
   1ec86:	7caf      	ldrb	r7, [r5, #18]
   1ec88:	2603      	movs	r6, #3
   1ec8a:	403e      	ands	r6, r7
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   1ec8c:	4333      	orrs	r3, r6
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   1ec8e:	8a2e      	ldrh	r6, [r5, #16]
   1ec90:	0436      	lsls	r6, r6, #16
   1ec92:	4f11      	ldr	r7, [pc, #68]	; (1ecd8 <system_clock_source_dpll_set_config+0x9c>)
   1ec94:	403e      	ands	r6, r7
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   1ec96:	4333      	orrs	r3, r6
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   1ec98:	7cee      	ldrb	r6, [r5, #19]
   1ec9a:	0236      	lsls	r6, r6, #8
   1ec9c:	27e0      	movs	r7, #224	; 0xe0
   1ec9e:	00ff      	lsls	r7, r7, #3
   1eca0:	403e      	ands	r6, r7
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   1eca2:	4333      	orrs	r3, r6
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   1eca4:	7d2e      	ldrb	r6, [r5, #20]
   1eca6:	0136      	lsls	r6, r6, #4
   1eca8:	2530      	movs	r5, #48	; 0x30
   1ecaa:	4035      	ands	r5, r6
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   1ecac:	432b      	orrs	r3, r5
	SYSCTRL->DPLLCTRLB.reg =
   1ecae:	64cb      	str	r3, [r1, #76]	; 0x4c

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
   1ecb0:	230f      	movs	r3, #15
   1ecb2:	4398      	bics	r0, r3
   1ecb4:	1880      	adds	r0, r0, r2
   1ecb6:	4344      	muls	r4, r0
   1ecb8:	0924      	lsrs	r4, r4, #4
	_system_clock_inst.dpll.frequency =
   1ecba:	4b08      	ldr	r3, [pc, #32]	; (1ecdc <system_clock_source_dpll_set_config+0xa0>)
   1ecbc:	60dc      	str	r4, [r3, #12]
}
   1ecbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		refclk = refclk / (2 * (config->reference_divider + 1));
   1ecc0:	8a01      	ldrh	r1, [r0, #16]
   1ecc2:	3101      	adds	r1, #1
   1ecc4:	0049      	lsls	r1, r1, #1
   1ecc6:	0020      	movs	r0, r4
   1ecc8:	4b01      	ldr	r3, [pc, #4]	; (1ecd0 <system_clock_source_dpll_set_config+0x94>)
   1ecca:	4798      	blx	r3
   1eccc:	0004      	movs	r4, r0
   1ecce:	e7bb      	b.n	1ec48 <system_clock_source_dpll_set_config+0xc>
   1ecd0:	00024055 	.word	0x00024055
   1ecd4:	40000800 	.word	0x40000800
   1ecd8:	07ff0000 	.word	0x07ff0000
   1ecdc:	20003ce0 	.word	0x20003ce0

0001ece0 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
   1ece0:	2808      	cmp	r0, #8
   1ece2:	d803      	bhi.n	1ecec <system_clock_source_enable+0xc>
   1ece4:	0080      	lsls	r0, r0, #2
   1ece6:	4b25      	ldr	r3, [pc, #148]	; (1ed7c <system_clock_source_enable+0x9c>)
   1ece8:	581b      	ldr	r3, [r3, r0]
   1ecea:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   1ecec:	2017      	movs	r0, #23
   1ecee:	e044      	b.n	1ed7a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
   1ecf0:	4a23      	ldr	r2, [pc, #140]	; (1ed80 <system_clock_source_enable+0xa0>)
   1ecf2:	6a13      	ldr	r3, [r2, #32]
   1ecf4:	2102      	movs	r1, #2
   1ecf6:	430b      	orrs	r3, r1
   1ecf8:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
   1ecfa:	2000      	movs	r0, #0
   1ecfc:	e03d      	b.n	1ed7a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
   1ecfe:	4a20      	ldr	r2, [pc, #128]	; (1ed80 <system_clock_source_enable+0xa0>)
   1ed00:	6993      	ldr	r3, [r2, #24]
   1ed02:	2102      	movs	r1, #2
   1ed04:	430b      	orrs	r3, r1
   1ed06:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
   1ed08:	2000      	movs	r0, #0
		break;
   1ed0a:	e036      	b.n	1ed7a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
   1ed0c:	4a1c      	ldr	r2, [pc, #112]	; (1ed80 <system_clock_source_enable+0xa0>)
   1ed0e:	8a13      	ldrh	r3, [r2, #16]
   1ed10:	2102      	movs	r1, #2
   1ed12:	430b      	orrs	r3, r1
   1ed14:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
   1ed16:	2000      	movs	r0, #0
		break;
   1ed18:	e02f      	b.n	1ed7a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
   1ed1a:	4a19      	ldr	r2, [pc, #100]	; (1ed80 <system_clock_source_enable+0xa0>)
   1ed1c:	8a93      	ldrh	r3, [r2, #20]
   1ed1e:	2102      	movs	r1, #2
   1ed20:	430b      	orrs	r3, r1
   1ed22:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
   1ed24:	2000      	movs	r0, #0
		break;
   1ed26:	e028      	b.n	1ed7a <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   1ed28:	4916      	ldr	r1, [pc, #88]	; (1ed84 <system_clock_source_enable+0xa4>)
   1ed2a:	680b      	ldr	r3, [r1, #0]
   1ed2c:	2202      	movs	r2, #2
   1ed2e:	4313      	orrs	r3, r2
   1ed30:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
   1ed32:	4b13      	ldr	r3, [pc, #76]	; (1ed80 <system_clock_source_enable+0xa0>)
   1ed34:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   1ed36:	0019      	movs	r1, r3
   1ed38:	320e      	adds	r2, #14
   1ed3a:	68cb      	ldr	r3, [r1, #12]
   1ed3c:	421a      	tst	r2, r3
   1ed3e:	d0fc      	beq.n	1ed3a <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   1ed40:	4a10      	ldr	r2, [pc, #64]	; (1ed84 <system_clock_source_enable+0xa4>)
   1ed42:	6891      	ldr	r1, [r2, #8]
   1ed44:	4b0e      	ldr	r3, [pc, #56]	; (1ed80 <system_clock_source_enable+0xa0>)
   1ed46:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   1ed48:	6852      	ldr	r2, [r2, #4]
   1ed4a:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
   1ed4c:	2200      	movs	r2, #0
   1ed4e:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   1ed50:	0019      	movs	r1, r3
   1ed52:	3210      	adds	r2, #16
   1ed54:	68cb      	ldr	r3, [r1, #12]
   1ed56:	421a      	tst	r2, r3
   1ed58:	d0fc      	beq.n	1ed54 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   1ed5a:	4b0a      	ldr	r3, [pc, #40]	; (1ed84 <system_clock_source_enable+0xa4>)
   1ed5c:	681b      	ldr	r3, [r3, #0]
   1ed5e:	b29b      	uxth	r3, r3
   1ed60:	4a07      	ldr	r2, [pc, #28]	; (1ed80 <system_clock_source_enable+0xa0>)
   1ed62:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
   1ed64:	2000      	movs	r0, #0
   1ed66:	e008      	b.n	1ed7a <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
   1ed68:	4905      	ldr	r1, [pc, #20]	; (1ed80 <system_clock_source_enable+0xa0>)
   1ed6a:	2244      	movs	r2, #68	; 0x44
   1ed6c:	5c8b      	ldrb	r3, [r1, r2]
   1ed6e:	2002      	movs	r0, #2
   1ed70:	4303      	orrs	r3, r0
   1ed72:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
   1ed74:	2000      	movs	r0, #0
		break;
   1ed76:	e000      	b.n	1ed7a <system_clock_source_enable+0x9a>
		return STATUS_OK;
   1ed78:	2000      	movs	r0, #0
}
   1ed7a:	4770      	bx	lr
   1ed7c:	0002af5c 	.word	0x0002af5c
   1ed80:	40000800 	.word	0x40000800
   1ed84:	20003ce0 	.word	0x20003ce0

0001ed88 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
   1ed88:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ed8a:	46de      	mov	lr, fp
   1ed8c:	4657      	mov	r7, sl
   1ed8e:	464e      	mov	r6, r9
   1ed90:	4645      	mov	r5, r8
   1ed92:	b5e0      	push	{r5, r6, r7, lr}
   1ed94:	b08d      	sub	sp, #52	; 0x34
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
   1ed96:	22c2      	movs	r2, #194	; 0xc2
   1ed98:	00d2      	lsls	r2, r2, #3
   1ed9a:	4b4c      	ldr	r3, [pc, #304]	; (1eecc <system_clock_init+0x144>)
   1ed9c:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   1ed9e:	4a4c      	ldr	r2, [pc, #304]	; (1eed0 <system_clock_init+0x148>)
   1eda0:	6853      	ldr	r3, [r2, #4]
   1eda2:	211e      	movs	r1, #30
   1eda4:	438b      	bics	r3, r1
   1eda6:	3918      	subs	r1, #24
   1eda8:	430b      	orrs	r3, r1
   1edaa:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_3;
   1edac:	2203      	movs	r2, #3
   1edae:	ab01      	add	r3, sp, #4
   1edb0:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   1edb2:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
   1edb4:	4d47      	ldr	r5, [pc, #284]	; (1eed4 <system_clock_init+0x14c>)
   1edb6:	b2e0      	uxtb	r0, r4
   1edb8:	a901      	add	r1, sp, #4
   1edba:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   1edbc:	3401      	adds	r4, #1
   1edbe:	2c25      	cmp	r4, #37	; 0x25
   1edc0:	d1f9      	bne.n	1edb6 <system_clock_init+0x2e>
	config->run_in_standby  = false;
   1edc2:	a80b      	add	r0, sp, #44	; 0x2c
   1edc4:	2500      	movs	r5, #0
   1edc6:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
   1edc8:	2601      	movs	r6, #1
   1edca:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
   1edcc:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
   1edce:	4b42      	ldr	r3, [pc, #264]	; (1eed8 <system_clock_init+0x150>)
   1edd0:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
   1edd2:	2006      	movs	r0, #6
   1edd4:	4b41      	ldr	r3, [pc, #260]	; (1eedc <system_clock_init+0x154>)
   1edd6:	4699      	mov	r9, r3
   1edd8:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   1edda:	4b41      	ldr	r3, [pc, #260]	; (1eee0 <system_clock_init+0x158>)
   1eddc:	4798      	blx	r3
	config->high_when_disabled = false;
   1edde:	ac01      	add	r4, sp, #4
   1ede0:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
   1ede2:	2306      	movs	r3, #6
   1ede4:	469a      	mov	sl, r3
   1ede6:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
   1ede8:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
   1edea:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   1edec:	2308      	movs	r3, #8
   1edee:	6063      	str	r3, [r4, #4]
   1edf0:	0021      	movs	r1, r4
   1edf2:	2001      	movs	r0, #1
   1edf4:	4b3b      	ldr	r3, [pc, #236]	; (1eee4 <system_clock_init+0x15c>)
   1edf6:	4698      	mov	r8, r3
   1edf8:	4798      	blx	r3
   1edfa:	2001      	movs	r0, #1
   1edfc:	4f3a      	ldr	r7, [pc, #232]	; (1eee8 <system_clock_init+0x160>)
   1edfe:	47b8      	blx	r7
	config->division_factor    = 1;
   1ee00:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
   1ee02:	7065      	strb	r5, [r4, #1]
	config->output_enable      = false;
   1ee04:	7265      	strb	r5, [r4, #9]
   1ee06:	2303      	movs	r3, #3
   1ee08:	469b      	mov	fp, r3
   1ee0a:	7023      	strb	r3, [r4, #0]
   1ee0c:	7226      	strb	r6, [r4, #8]
   1ee0e:	0021      	movs	r1, r4
   1ee10:	2002      	movs	r0, #2
   1ee12:	47c0      	blx	r8
   1ee14:	2002      	movs	r0, #2
   1ee16:	47b8      	blx	r7
	config->high_when_disabled = false;
   1ee18:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
   1ee1a:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
   1ee1c:	7265      	strb	r5, [r4, #9]
   1ee1e:	465b      	mov	r3, fp
   1ee20:	7023      	strb	r3, [r4, #0]
   1ee22:	2320      	movs	r3, #32
   1ee24:	6063      	str	r3, [r4, #4]
   1ee26:	0021      	movs	r1, r4
   1ee28:	2004      	movs	r0, #4
   1ee2a:	47c0      	blx	r8
   1ee2c:	2004      	movs	r0, #4
   1ee2e:	47b8      	blx	r7
	config->division_factor    = 1;
   1ee30:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
   1ee32:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
   1ee34:	4653      	mov	r3, sl
   1ee36:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
   1ee38:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
   1ee3a:	7265      	strb	r5, [r4, #9]
   1ee3c:	0021      	movs	r1, r4
   1ee3e:	2005      	movs	r0, #5
   1ee40:	47c0      	blx	r8
   1ee42:	2005      	movs	r0, #5
   1ee44:	47b8      	blx	r7
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL32K, &dpll_gclk_chan_conf);
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL32K);
	}

	if (CONF_CLOCK_DPLL_REFERENCE_CLOCK == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_GCLK) {
		dpll_gclk_chan_conf.source_generator = CONF_CLOCK_DPLL_REFERENCE_GCLK_GENERATOR;
   1ee46:	a90a      	add	r1, sp, #40	; 0x28
   1ee48:	700e      	strb	r6, [r1, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL, &dpll_gclk_chan_conf);
   1ee4a:	2001      	movs	r0, #1
   1ee4c:	4b21      	ldr	r3, [pc, #132]	; (1eed4 <system_clock_init+0x14c>)
   1ee4e:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL);
   1ee50:	2001      	movs	r0, #1
   1ee52:	4b26      	ldr	r3, [pc, #152]	; (1eeec <system_clock_init+0x164>)
   1ee54:	4798      	blx	r3
	config->run_in_standby      = false;
   1ee56:	a804      	add	r0, sp, #16
   1ee58:	7045      	strb	r5, [r0, #1]
	config->lock_bypass         = false;
   1ee5a:	7085      	strb	r5, [r0, #2]
	config->wake_up_fast        = false;
   1ee5c:	70c5      	strb	r5, [r0, #3]
	config->low_power_enable    = false;
   1ee5e:	7105      	strb	r5, [r0, #4]
	config->output_frequency    = 48000000;
   1ee60:	4b23      	ldr	r3, [pc, #140]	; (1eef0 <system_clock_init+0x168>)
   1ee62:	6083      	str	r3, [r0, #8]
	config->reference_divider   = 1;
   1ee64:	8206      	strh	r6, [r0, #16]
	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
   1ee66:	74c5      	strb	r5, [r0, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
   1ee68:	7485      	strb	r5, [r0, #18]
	}

	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);

	dpll_config.on_demand        = false;
   1ee6a:	7005      	strb	r5, [r0, #0]
	dpll_config.low_power_enable = CONF_CLOCK_DPLL_LOW_POWER_ENABLE;

	dpll_config.filter           = CONF_CLOCK_DPLL_FILTER;
	dpll_config.lock_time        = CONF_CLOCK_DPLL_LOCK_TIME;

	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
   1ee6c:	2302      	movs	r3, #2
   1ee6e:	7503      	strb	r3, [r0, #20]
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
   1ee70:	4b20      	ldr	r3, [pc, #128]	; (1eef4 <system_clock_init+0x16c>)
   1ee72:	60c3      	str	r3, [r0, #12]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;

	system_clock_source_dpll_set_config(&dpll_config);
   1ee74:	4b20      	ldr	r3, [pc, #128]	; (1eef8 <system_clock_init+0x170>)
   1ee76:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
   1ee78:	2008      	movs	r0, #8
   1ee7a:	47c8      	blx	r9
		return ((SYSCTRL->DPLLSTATUS.reg &
   1ee7c:	4813      	ldr	r0, [pc, #76]	; (1eecc <system_clock_init+0x144>)
   1ee7e:	2150      	movs	r1, #80	; 0x50
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
   1ee80:	2203      	movs	r2, #3
		return ((SYSCTRL->DPLLSTATUS.reg &
   1ee82:	5c43      	ldrb	r3, [r0, r1]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
   1ee84:	4013      	ands	r3, r2
   1ee86:	2b03      	cmp	r3, #3
   1ee88:	d1fb      	bne.n	1ee82 <system_clock_init+0xfa>
	if (CONF_CLOCK_DPLL_ON_DEMAND) {
		SYSCTRL->DPLLCTRLA.bit.ONDEMAND = 1;
   1ee8a:	4910      	ldr	r1, [pc, #64]	; (1eecc <system_clock_init+0x144>)
   1ee8c:	2244      	movs	r2, #68	; 0x44
   1ee8e:	5c88      	ldrb	r0, [r1, r2]
   1ee90:	3b83      	subs	r3, #131	; 0x83
   1ee92:	4303      	orrs	r3, r0
   1ee94:	548b      	strb	r3, [r1, r2]
	PM->CPUSEL.reg = (uint32_t)divider;
   1ee96:	4a19      	ldr	r2, [pc, #100]	; (1eefc <system_clock_init+0x174>)
   1ee98:	2300      	movs	r3, #0
   1ee9a:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
   1ee9c:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
   1ee9e:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
   1eea0:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
   1eea2:	a901      	add	r1, sp, #4
   1eea4:	2201      	movs	r2, #1
   1eea6:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
   1eea8:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
   1eeaa:	720b      	strb	r3, [r1, #8]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   1eeac:	3308      	adds	r3, #8
   1eeae:	700b      	strb	r3, [r1, #0]
   1eeb0:	724a      	strb	r2, [r1, #9]
   1eeb2:	2000      	movs	r0, #0
   1eeb4:	4b0b      	ldr	r3, [pc, #44]	; (1eee4 <system_clock_init+0x15c>)
   1eeb6:	4798      	blx	r3
   1eeb8:	2000      	movs	r0, #0
   1eeba:	4b0b      	ldr	r3, [pc, #44]	; (1eee8 <system_clock_init+0x160>)
   1eebc:	4798      	blx	r3
#endif
}
   1eebe:	b00d      	add	sp, #52	; 0x34
   1eec0:	bc3c      	pop	{r2, r3, r4, r5}
   1eec2:	4690      	mov	r8, r2
   1eec4:	4699      	mov	r9, r3
   1eec6:	46a2      	mov	sl, r4
   1eec8:	46ab      	mov	fp, r5
   1eeca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1eecc:	40000800 	.word	0x40000800
   1eed0:	41004000 	.word	0x41004000
   1eed4:	0001f139 	.word	0x0001f139
   1eed8:	0001ec01 	.word	0x0001ec01
   1eedc:	0001ece1 	.word	0x0001ece1
   1eee0:	0001ef01 	.word	0x0001ef01
   1eee4:	0001ef25 	.word	0x0001ef25
   1eee8:	0001efdd 	.word	0x0001efdd
   1eeec:	0001f0ad 	.word	0x0001f0ad
   1eef0:	02dc6c00 	.word	0x02dc6c00
   1eef4:	000f4240 	.word	0x000f4240
   1eef8:	0001ec3d 	.word	0x0001ec3d
   1eefc:	40000400 	.word	0x40000400

0001ef00 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
   1ef00:	4a06      	ldr	r2, [pc, #24]	; (1ef1c <system_gclk_init+0x1c>)
   1ef02:	6993      	ldr	r3, [r2, #24]
   1ef04:	2108      	movs	r1, #8
   1ef06:	430b      	orrs	r3, r1
   1ef08:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
   1ef0a:	2201      	movs	r2, #1
   1ef0c:	4b04      	ldr	r3, [pc, #16]	; (1ef20 <system_gclk_init+0x20>)
   1ef0e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
   1ef10:	0019      	movs	r1, r3
   1ef12:	780b      	ldrb	r3, [r1, #0]
   1ef14:	4213      	tst	r3, r2
   1ef16:	d1fc      	bne.n	1ef12 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
   1ef18:	4770      	bx	lr
   1ef1a:	46c0      	nop			; (mov r8, r8)
   1ef1c:	40000400 	.word	0x40000400
   1ef20:	40000c00 	.word	0x40000c00

0001ef24 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   1ef24:	b570      	push	{r4, r5, r6, lr}
   1ef26:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
   1ef28:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
   1ef2a:	780d      	ldrb	r5, [r1, #0]
   1ef2c:	022d      	lsls	r5, r5, #8
   1ef2e:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   1ef30:	784b      	ldrb	r3, [r1, #1]
   1ef32:	2b00      	cmp	r3, #0
   1ef34:	d002      	beq.n	1ef3c <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   1ef36:	2380      	movs	r3, #128	; 0x80
   1ef38:	02db      	lsls	r3, r3, #11
   1ef3a:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   1ef3c:	7a4b      	ldrb	r3, [r1, #9]
   1ef3e:	2b00      	cmp	r3, #0
   1ef40:	d002      	beq.n	1ef48 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   1ef42:	2380      	movs	r3, #128	; 0x80
   1ef44:	031b      	lsls	r3, r3, #12
   1ef46:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   1ef48:	6848      	ldr	r0, [r1, #4]
   1ef4a:	2801      	cmp	r0, #1
   1ef4c:	d910      	bls.n	1ef70 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   1ef4e:	1e43      	subs	r3, r0, #1
   1ef50:	4218      	tst	r0, r3
   1ef52:	d134      	bne.n	1efbe <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   1ef54:	2802      	cmp	r0, #2
   1ef56:	d930      	bls.n	1efba <system_gclk_gen_set_config+0x96>
   1ef58:	2302      	movs	r3, #2
   1ef5a:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
   1ef5c:	3201      	adds	r2, #1
						mask <<= 1) {
   1ef5e:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
   1ef60:	4298      	cmp	r0, r3
   1ef62:	d8fb      	bhi.n	1ef5c <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
   1ef64:	0212      	lsls	r2, r2, #8
   1ef66:	4332      	orrs	r2, r6
   1ef68:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   1ef6a:	2380      	movs	r3, #128	; 0x80
   1ef6c:	035b      	lsls	r3, r3, #13
   1ef6e:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   1ef70:	7a0b      	ldrb	r3, [r1, #8]
   1ef72:	2b00      	cmp	r3, #0
   1ef74:	d002      	beq.n	1ef7c <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   1ef76:	2380      	movs	r3, #128	; 0x80
   1ef78:	039b      	lsls	r3, r3, #14
   1ef7a:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   1ef7c:	4a13      	ldr	r2, [pc, #76]	; (1efcc <system_gclk_gen_set_config+0xa8>)
   1ef7e:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
   1ef80:	b25b      	sxtb	r3, r3
   1ef82:	2b00      	cmp	r3, #0
   1ef84:	dbfb      	blt.n	1ef7e <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
   1ef86:	4b12      	ldr	r3, [pc, #72]	; (1efd0 <system_gclk_gen_set_config+0xac>)
   1ef88:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   1ef8a:	4b12      	ldr	r3, [pc, #72]	; (1efd4 <system_gclk_gen_set_config+0xb0>)
   1ef8c:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   1ef8e:	4a0f      	ldr	r2, [pc, #60]	; (1efcc <system_gclk_gen_set_config+0xa8>)
   1ef90:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
   1ef92:	b25b      	sxtb	r3, r3
   1ef94:	2b00      	cmp	r3, #0
   1ef96:	dbfb      	blt.n	1ef90 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
   1ef98:	4b0c      	ldr	r3, [pc, #48]	; (1efcc <system_gclk_gen_set_config+0xa8>)
   1ef9a:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   1ef9c:	001a      	movs	r2, r3
   1ef9e:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
   1efa0:	b25b      	sxtb	r3, r3
   1efa2:	2b00      	cmp	r3, #0
   1efa4:	dbfb      	blt.n	1ef9e <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
   1efa6:	4a09      	ldr	r2, [pc, #36]	; (1efcc <system_gclk_gen_set_config+0xa8>)
   1efa8:	6853      	ldr	r3, [r2, #4]
   1efaa:	2180      	movs	r1, #128	; 0x80
   1efac:	0249      	lsls	r1, r1, #9
   1efae:	400b      	ands	r3, r1
   1efb0:	431d      	orrs	r5, r3
   1efb2:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
   1efb4:	4b08      	ldr	r3, [pc, #32]	; (1efd8 <system_gclk_gen_set_config+0xb4>)
   1efb6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
   1efb8:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
   1efba:	2200      	movs	r2, #0
   1efbc:	e7d2      	b.n	1ef64 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
   1efbe:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
   1efc0:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   1efc2:	2380      	movs	r3, #128	; 0x80
   1efc4:	029b      	lsls	r3, r3, #10
   1efc6:	431d      	orrs	r5, r3
   1efc8:	e7d2      	b.n	1ef70 <system_gclk_gen_set_config+0x4c>
   1efca:	46c0      	nop			; (mov r8, r8)
   1efcc:	40000c00 	.word	0x40000c00
   1efd0:	0001d585 	.word	0x0001d585
   1efd4:	40000c08 	.word	0x40000c08
   1efd8:	0001d5c5 	.word	0x0001d5c5

0001efdc <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   1efdc:	b510      	push	{r4, lr}
   1efde:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   1efe0:	4a0b      	ldr	r2, [pc, #44]	; (1f010 <system_gclk_gen_enable+0x34>)
   1efe2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
   1efe4:	b25b      	sxtb	r3, r3
   1efe6:	2b00      	cmp	r3, #0
   1efe8:	dbfb      	blt.n	1efe2 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
   1efea:	4b0a      	ldr	r3, [pc, #40]	; (1f014 <system_gclk_gen_enable+0x38>)
   1efec:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   1efee:	4b0a      	ldr	r3, [pc, #40]	; (1f018 <system_gclk_gen_enable+0x3c>)
   1eff0:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   1eff2:	4a07      	ldr	r2, [pc, #28]	; (1f010 <system_gclk_gen_enable+0x34>)
   1eff4:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
   1eff6:	b25b      	sxtb	r3, r3
   1eff8:	2b00      	cmp	r3, #0
   1effa:	dbfb      	blt.n	1eff4 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
   1effc:	4a04      	ldr	r2, [pc, #16]	; (1f010 <system_gclk_gen_enable+0x34>)
   1effe:	6851      	ldr	r1, [r2, #4]
   1f000:	2380      	movs	r3, #128	; 0x80
   1f002:	025b      	lsls	r3, r3, #9
   1f004:	430b      	orrs	r3, r1
   1f006:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
   1f008:	4b04      	ldr	r3, [pc, #16]	; (1f01c <system_gclk_gen_enable+0x40>)
   1f00a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
   1f00c:	bd10      	pop	{r4, pc}
   1f00e:	46c0      	nop			; (mov r8, r8)
   1f010:	40000c00 	.word	0x40000c00
   1f014:	0001d585 	.word	0x0001d585
   1f018:	40000c04 	.word	0x40000c04
   1f01c:	0001d5c5 	.word	0x0001d5c5

0001f020 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   1f020:	b570      	push	{r4, r5, r6, lr}
   1f022:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   1f024:	4a1a      	ldr	r2, [pc, #104]	; (1f090 <system_gclk_gen_get_hz+0x70>)
   1f026:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
   1f028:	b25b      	sxtb	r3, r3
   1f02a:	2b00      	cmp	r3, #0
   1f02c:	dbfb      	blt.n	1f026 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
   1f02e:	4b19      	ldr	r3, [pc, #100]	; (1f094 <system_gclk_gen_get_hz+0x74>)
   1f030:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   1f032:	4b19      	ldr	r3, [pc, #100]	; (1f098 <system_gclk_gen_get_hz+0x78>)
   1f034:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   1f036:	4a16      	ldr	r2, [pc, #88]	; (1f090 <system_gclk_gen_get_hz+0x70>)
   1f038:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
   1f03a:	b25b      	sxtb	r3, r3
   1f03c:	2b00      	cmp	r3, #0
   1f03e:	dbfb      	blt.n	1f038 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   1f040:	4e13      	ldr	r6, [pc, #76]	; (1f090 <system_gclk_gen_get_hz+0x70>)
   1f042:	6870      	ldr	r0, [r6, #4]
   1f044:	04c0      	lsls	r0, r0, #19
   1f046:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
   1f048:	4b14      	ldr	r3, [pc, #80]	; (1f09c <system_gclk_gen_get_hz+0x7c>)
   1f04a:	4798      	blx	r3
   1f04c:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   1f04e:	4b12      	ldr	r3, [pc, #72]	; (1f098 <system_gclk_gen_get_hz+0x78>)
   1f050:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   1f052:	6876      	ldr	r6, [r6, #4]
   1f054:	02f6      	lsls	r6, r6, #11
   1f056:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   1f058:	4b11      	ldr	r3, [pc, #68]	; (1f0a0 <system_gclk_gen_get_hz+0x80>)
   1f05a:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   1f05c:	4a0c      	ldr	r2, [pc, #48]	; (1f090 <system_gclk_gen_get_hz+0x70>)
   1f05e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
   1f060:	b25b      	sxtb	r3, r3
   1f062:	2b00      	cmp	r3, #0
   1f064:	dbfb      	blt.n	1f05e <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
   1f066:	4b0a      	ldr	r3, [pc, #40]	; (1f090 <system_gclk_gen_get_hz+0x70>)
   1f068:	689c      	ldr	r4, [r3, #8]
   1f06a:	0224      	lsls	r4, r4, #8
   1f06c:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
   1f06e:	4b0d      	ldr	r3, [pc, #52]	; (1f0a4 <system_gclk_gen_get_hz+0x84>)
   1f070:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   1f072:	2e00      	cmp	r6, #0
   1f074:	d107      	bne.n	1f086 <system_gclk_gen_get_hz+0x66>
   1f076:	2c01      	cmp	r4, #1
   1f078:	d907      	bls.n	1f08a <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
   1f07a:	0021      	movs	r1, r4
   1f07c:	0028      	movs	r0, r5
   1f07e:	4b0a      	ldr	r3, [pc, #40]	; (1f0a8 <system_gclk_gen_get_hz+0x88>)
   1f080:	4798      	blx	r3
   1f082:	0005      	movs	r5, r0
   1f084:	e001      	b.n	1f08a <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
   1f086:	3401      	adds	r4, #1
   1f088:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
   1f08a:	0028      	movs	r0, r5
   1f08c:	bd70      	pop	{r4, r5, r6, pc}
   1f08e:	46c0      	nop			; (mov r8, r8)
   1f090:	40000c00 	.word	0x40000c00
   1f094:	0001d585 	.word	0x0001d585
   1f098:	40000c04 	.word	0x40000c04
   1f09c:	0001eb6d 	.word	0x0001eb6d
   1f0a0:	40000c08 	.word	0x40000c08
   1f0a4:	0001d5c5 	.word	0x0001d5c5
   1f0a8:	00024055 	.word	0x00024055

0001f0ac <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   1f0ac:	b510      	push	{r4, lr}
   1f0ae:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
   1f0b0:	4b06      	ldr	r3, [pc, #24]	; (1f0cc <system_gclk_chan_enable+0x20>)
   1f0b2:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   1f0b4:	4b06      	ldr	r3, [pc, #24]	; (1f0d0 <system_gclk_chan_enable+0x24>)
   1f0b6:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   1f0b8:	4a06      	ldr	r2, [pc, #24]	; (1f0d4 <system_gclk_chan_enable+0x28>)
   1f0ba:	8853      	ldrh	r3, [r2, #2]
   1f0bc:	2180      	movs	r1, #128	; 0x80
   1f0be:	01c9      	lsls	r1, r1, #7
   1f0c0:	430b      	orrs	r3, r1
   1f0c2:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
   1f0c4:	4b04      	ldr	r3, [pc, #16]	; (1f0d8 <system_gclk_chan_enable+0x2c>)
   1f0c6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
   1f0c8:	bd10      	pop	{r4, pc}
   1f0ca:	46c0      	nop			; (mov r8, r8)
   1f0cc:	0001d585 	.word	0x0001d585
   1f0d0:	40000c02 	.word	0x40000c02
   1f0d4:	40000c00 	.word	0x40000c00
   1f0d8:	0001d5c5 	.word	0x0001d5c5

0001f0dc <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   1f0dc:	b510      	push	{r4, lr}
   1f0de:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
   1f0e0:	4b0f      	ldr	r3, [pc, #60]	; (1f120 <system_gclk_chan_disable+0x44>)
   1f0e2:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   1f0e4:	4b0f      	ldr	r3, [pc, #60]	; (1f124 <system_gclk_chan_disable+0x48>)
   1f0e6:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   1f0e8:	4a0f      	ldr	r2, [pc, #60]	; (1f128 <system_gclk_chan_disable+0x4c>)
   1f0ea:	8853      	ldrh	r3, [r2, #2]
   1f0ec:	051b      	lsls	r3, r3, #20
   1f0ee:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
   1f0f0:	8853      	ldrh	r3, [r2, #2]
   1f0f2:	490e      	ldr	r1, [pc, #56]	; (1f12c <system_gclk_chan_disable+0x50>)
   1f0f4:	400b      	ands	r3, r1
   1f0f6:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   1f0f8:	8853      	ldrh	r3, [r2, #2]
   1f0fa:	490d      	ldr	r1, [pc, #52]	; (1f130 <system_gclk_chan_disable+0x54>)
   1f0fc:	400b      	ands	r3, r1
   1f0fe:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   1f100:	0011      	movs	r1, r2
   1f102:	2280      	movs	r2, #128	; 0x80
   1f104:	01d2      	lsls	r2, r2, #7
   1f106:	884b      	ldrh	r3, [r1, #2]
   1f108:	4213      	tst	r3, r2
   1f10a:	d1fc      	bne.n	1f106 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
   1f10c:	4906      	ldr	r1, [pc, #24]	; (1f128 <system_gclk_chan_disable+0x4c>)
   1f10e:	884a      	ldrh	r2, [r1, #2]
   1f110:	0203      	lsls	r3, r0, #8
   1f112:	4806      	ldr	r0, [pc, #24]	; (1f12c <system_gclk_chan_disable+0x50>)
   1f114:	4002      	ands	r2, r0
   1f116:	4313      	orrs	r3, r2
   1f118:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
   1f11a:	4b06      	ldr	r3, [pc, #24]	; (1f134 <system_gclk_chan_disable+0x58>)
   1f11c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
   1f11e:	bd10      	pop	{r4, pc}
   1f120:	0001d585 	.word	0x0001d585
   1f124:	40000c02 	.word	0x40000c02
   1f128:	40000c00 	.word	0x40000c00
   1f12c:	fffff0ff 	.word	0xfffff0ff
   1f130:	ffffbfff 	.word	0xffffbfff
   1f134:	0001d5c5 	.word	0x0001d5c5

0001f138 <system_gclk_chan_set_config>:
{
   1f138:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   1f13a:	780c      	ldrb	r4, [r1, #0]
   1f13c:	0224      	lsls	r4, r4, #8
   1f13e:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
   1f140:	4b02      	ldr	r3, [pc, #8]	; (1f14c <system_gclk_chan_set_config+0x14>)
   1f142:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
   1f144:	b2a4      	uxth	r4, r4
   1f146:	4b02      	ldr	r3, [pc, #8]	; (1f150 <system_gclk_chan_set_config+0x18>)
   1f148:	805c      	strh	r4, [r3, #2]
}
   1f14a:	bd10      	pop	{r4, pc}
   1f14c:	0001f0dd 	.word	0x0001f0dd
   1f150:	40000c00 	.word	0x40000c00

0001f154 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   1f154:	b510      	push	{r4, lr}
   1f156:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
   1f158:	4b06      	ldr	r3, [pc, #24]	; (1f174 <system_gclk_chan_get_hz+0x20>)
   1f15a:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   1f15c:	4b06      	ldr	r3, [pc, #24]	; (1f178 <system_gclk_chan_get_hz+0x24>)
   1f15e:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
   1f160:	4b06      	ldr	r3, [pc, #24]	; (1f17c <system_gclk_chan_get_hz+0x28>)
   1f162:	885c      	ldrh	r4, [r3, #2]
   1f164:	0524      	lsls	r4, r4, #20
   1f166:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
   1f168:	4b05      	ldr	r3, [pc, #20]	; (1f180 <system_gclk_chan_get_hz+0x2c>)
   1f16a:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   1f16c:	0020      	movs	r0, r4
   1f16e:	4b05      	ldr	r3, [pc, #20]	; (1f184 <system_gclk_chan_get_hz+0x30>)
   1f170:	4798      	blx	r3
}
   1f172:	bd10      	pop	{r4, pc}
   1f174:	0001d585 	.word	0x0001d585
   1f178:	40000c02 	.word	0x40000c02
   1f17c:	40000c00 	.word	0x40000c00
   1f180:	0001d5c5 	.word	0x0001d5c5
   1f184:	0001f021 	.word	0x0001f021

0001f188 <system_interrupt_clear_pending>:
enum status_code system_interrupt_clear_pending(
		const enum system_interrupt_vector vector)
{
	enum status_code status = STATUS_OK;

	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
   1f188:	2800      	cmp	r0, #0
   1f18a:	db08      	blt.n	1f19e <system_interrupt_clear_pending+0x16>
		NVIC->ICPR[0] = (1 << vector);
   1f18c:	2301      	movs	r3, #1
   1f18e:	4083      	lsls	r3, r0
   1f190:	22c0      	movs	r2, #192	; 0xc0
   1f192:	0052      	lsls	r2, r2, #1
   1f194:	4906      	ldr	r1, [pc, #24]	; (1f1b0 <system_interrupt_clear_pending+0x28>)
   1f196:	508b      	str	r3, [r1, r2]
	enum status_code status = STATUS_OK;
   1f198:	2300      	movs	r3, #0
		Assert(false);
		status = STATUS_ERR_INVALID_ARG;
	}

	return status;
}
   1f19a:	0018      	movs	r0, r3
   1f19c:	4770      	bx	lr
		status = STATUS_ERR_INVALID_ARG;
   1f19e:	2317      	movs	r3, #23
	} else if (vector == SYSTEM_INTERRUPT_SYSTICK) {
   1f1a0:	1c42      	adds	r2, r0, #1
   1f1a2:	d1fa      	bne.n	1f19a <system_interrupt_clear_pending+0x12>
		SCB->ICSR = SCB_ICSR_PENDSTCLR_Msk;
   1f1a4:	2280      	movs	r2, #128	; 0x80
   1f1a6:	0492      	lsls	r2, r2, #18
   1f1a8:	4b02      	ldr	r3, [pc, #8]	; (1f1b4 <system_interrupt_clear_pending+0x2c>)
   1f1aa:	605a      	str	r2, [r3, #4]
	enum status_code status = STATUS_OK;
   1f1ac:	2300      	movs	r3, #0
   1f1ae:	e7f4      	b.n	1f19a <system_interrupt_clear_pending+0x12>
   1f1b0:	e000e100 	.word	0xe000e100
   1f1b4:	e000ed00 	.word	0xe000ed00

0001f1b8 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   1f1b8:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   1f1ba:	78d3      	ldrb	r3, [r2, #3]
   1f1bc:	2b00      	cmp	r3, #0
   1f1be:	d135      	bne.n	1f22c <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   1f1c0:	7813      	ldrb	r3, [r2, #0]
   1f1c2:	2b80      	cmp	r3, #128	; 0x80
   1f1c4:	d029      	beq.n	1f21a <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   1f1c6:	061b      	lsls	r3, r3, #24
   1f1c8:	2480      	movs	r4, #128	; 0x80
   1f1ca:	0264      	lsls	r4, r4, #9
   1f1cc:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   1f1ce:	7854      	ldrb	r4, [r2, #1]
   1f1d0:	2502      	movs	r5, #2
   1f1d2:	43ac      	bics	r4, r5
   1f1d4:	d106      	bne.n	1f1e4 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   1f1d6:	7894      	ldrb	r4, [r2, #2]
   1f1d8:	2c00      	cmp	r4, #0
   1f1da:	d120      	bne.n	1f21e <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
   1f1dc:	2480      	movs	r4, #128	; 0x80
   1f1de:	02a4      	lsls	r4, r4, #10
   1f1e0:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   1f1e2:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   1f1e4:	7854      	ldrb	r4, [r2, #1]
   1f1e6:	3c01      	subs	r4, #1
   1f1e8:	2c01      	cmp	r4, #1
   1f1ea:	d91c      	bls.n	1f226 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   1f1ec:	040d      	lsls	r5, r1, #16
   1f1ee:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   1f1f0:	24a0      	movs	r4, #160	; 0xa0
   1f1f2:	05e4      	lsls	r4, r4, #23
   1f1f4:	432c      	orrs	r4, r5
   1f1f6:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   1f1f8:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
   1f1fa:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   1f1fc:	24d0      	movs	r4, #208	; 0xd0
   1f1fe:	0624      	lsls	r4, r4, #24
   1f200:	432c      	orrs	r4, r5
   1f202:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   1f204:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   1f206:	78d4      	ldrb	r4, [r2, #3]
   1f208:	2c00      	cmp	r4, #0
   1f20a:	d122      	bne.n	1f252 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   1f20c:	035b      	lsls	r3, r3, #13
   1f20e:	d51c      	bpl.n	1f24a <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   1f210:	7893      	ldrb	r3, [r2, #2]
   1f212:	2b01      	cmp	r3, #1
   1f214:	d01e      	beq.n	1f254 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
   1f216:	6141      	str	r1, [r0, #20]
   1f218:	e017      	b.n	1f24a <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
   1f21a:	2300      	movs	r3, #0
   1f21c:	e7d7      	b.n	1f1ce <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   1f21e:	24c0      	movs	r4, #192	; 0xc0
   1f220:	02e4      	lsls	r4, r4, #11
   1f222:	4323      	orrs	r3, r4
   1f224:	e7dd      	b.n	1f1e2 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   1f226:	4c0d      	ldr	r4, [pc, #52]	; (1f25c <_system_pinmux_config+0xa4>)
   1f228:	4023      	ands	r3, r4
   1f22a:	e7df      	b.n	1f1ec <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
   1f22c:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   1f22e:	040c      	lsls	r4, r1, #16
   1f230:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   1f232:	23a0      	movs	r3, #160	; 0xa0
   1f234:	05db      	lsls	r3, r3, #23
   1f236:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   1f238:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
   1f23a:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   1f23c:	23d0      	movs	r3, #208	; 0xd0
   1f23e:	061b      	lsls	r3, r3, #24
   1f240:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   1f242:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
   1f244:	78d3      	ldrb	r3, [r2, #3]
   1f246:	2b00      	cmp	r3, #0
   1f248:	d103      	bne.n	1f252 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   1f24a:	7853      	ldrb	r3, [r2, #1]
   1f24c:	3b01      	subs	r3, #1
   1f24e:	2b01      	cmp	r3, #1
   1f250:	d902      	bls.n	1f258 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
   1f252:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
   1f254:	6181      	str	r1, [r0, #24]
   1f256:	e7f8      	b.n	1f24a <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
   1f258:	6081      	str	r1, [r0, #8]
}
   1f25a:	e7fa      	b.n	1f252 <_system_pinmux_config+0x9a>
   1f25c:	fffbffff 	.word	0xfffbffff

0001f260 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   1f260:	b510      	push	{r4, lr}
   1f262:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
   1f264:	09c1      	lsrs	r1, r0, #7
		return NULL;
   1f266:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
   1f268:	2900      	cmp	r1, #0
   1f26a:	d104      	bne.n	1f276 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
   1f26c:	0943      	lsrs	r3, r0, #5
   1f26e:	01db      	lsls	r3, r3, #7
   1f270:	4905      	ldr	r1, [pc, #20]	; (1f288 <system_pinmux_pin_set_config+0x28>)
   1f272:	468c      	mov	ip, r1
   1f274:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   1f276:	241f      	movs	r4, #31
   1f278:	4020      	ands	r0, r4
   1f27a:	2101      	movs	r1, #1
   1f27c:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
   1f27e:	0018      	movs	r0, r3
   1f280:	4b02      	ldr	r3, [pc, #8]	; (1f28c <system_pinmux_pin_set_config+0x2c>)
   1f282:	4798      	blx	r3
}
   1f284:	bd10      	pop	{r4, pc}
   1f286:	46c0      	nop			; (mov r8, r8)
   1f288:	41004400 	.word	0x41004400
   1f28c:	0001f1b9 	.word	0x0001f1b9

0001f290 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
   1f290:	4770      	bx	lr
	...

0001f294 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   1f294:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   1f296:	4b05      	ldr	r3, [pc, #20]	; (1f2ac <system_init+0x18>)
   1f298:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   1f29a:	4b05      	ldr	r3, [pc, #20]	; (1f2b0 <system_init+0x1c>)
   1f29c:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   1f29e:	4b05      	ldr	r3, [pc, #20]	; (1f2b4 <system_init+0x20>)
   1f2a0:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   1f2a2:	4b05      	ldr	r3, [pc, #20]	; (1f2b8 <system_init+0x24>)
   1f2a4:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   1f2a6:	4b05      	ldr	r3, [pc, #20]	; (1f2bc <system_init+0x28>)
   1f2a8:	4798      	blx	r3
}
   1f2aa:	bd10      	pop	{r4, pc}
   1f2ac:	0001ed89 	.word	0x0001ed89
   1f2b0:	0001d5f5 	.word	0x0001d5f5
   1f2b4:	000128ad 	.word	0x000128ad
   1f2b8:	0001d705 	.word	0x0001d705
   1f2bc:	0001f291 	.word	0x0001f291

0001f2c0 <_tcc_get_inst_index>:
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if (hw == tcc_modules[i]) {
   1f2c0:	4b09      	ldr	r3, [pc, #36]	; (1f2e8 <_tcc_get_inst_index+0x28>)
   1f2c2:	4298      	cmp	r0, r3
   1f2c4:	d00c      	beq.n	1f2e0 <_tcc_get_inst_index+0x20>
   1f2c6:	4b09      	ldr	r3, [pc, #36]	; (1f2ec <_tcc_get_inst_index+0x2c>)
   1f2c8:	4298      	cmp	r0, r3
   1f2ca:	d007      	beq.n	1f2dc <_tcc_get_inst_index+0x1c>
   1f2cc:	4a08      	ldr	r2, [pc, #32]	; (1f2f0 <_tcc_get_inst_index+0x30>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
   1f2ce:	2300      	movs	r3, #0
		if (hw == tcc_modules[i]) {
   1f2d0:	4290      	cmp	r0, r2
   1f2d2:	d001      	beq.n	1f2d8 <_tcc_get_inst_index+0x18>
}
   1f2d4:	0018      	movs	r0, r3
   1f2d6:	4770      	bx	lr
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   1f2d8:	3302      	adds	r3, #2
   1f2da:	e002      	b.n	1f2e2 <_tcc_get_inst_index+0x22>
   1f2dc:	2301      	movs	r3, #1
   1f2de:	e000      	b.n	1f2e2 <_tcc_get_inst_index+0x22>
   1f2e0:	2300      	movs	r3, #0
			return i;
   1f2e2:	b2db      	uxtb	r3, r3
   1f2e4:	e7f6      	b.n	1f2d4 <_tcc_get_inst_index+0x14>
   1f2e6:	46c0      	nop			; (mov r8, r8)
   1f2e8:	42002000 	.word	0x42002000
   1f2ec:	42002400 	.word	0x42002400
   1f2f0:	42002800 	.word	0x42002800

0001f2f4 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
   1f2f4:	b510      	push	{r4, lr}
   1f2f6:	0004      	movs	r4, r0
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   1f2f8:	0008      	movs	r0, r1
   1f2fa:	4b4f      	ldr	r3, [pc, #316]	; (1f438 <tcc_get_config_defaults+0x144>)
   1f2fc:	4798      	blx	r3

	/* Base counter defaults */
	config->counter.count                  = 0;
   1f2fe:	2300      	movs	r3, #0
   1f300:	6023      	str	r3, [r4, #0]

	config->counter.period                 = _tcc_maxs[module_index];
   1f302:	0080      	lsls	r0, r0, #2
   1f304:	4a4d      	ldr	r2, [pc, #308]	; (1f43c <tcc_get_config_defaults+0x148>)
   1f306:	5882      	ldr	r2, [r0, r2]
   1f308:	6062      	str	r2, [r4, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
   1f30a:	72a3      	strb	r3, [r4, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
   1f30c:	72e3      	strb	r3, [r4, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
   1f30e:	7323      	strb	r3, [r4, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
   1f310:	7263      	strb	r3, [r4, #9]
	config->counter.oneshot                = false;
   1f312:	7223      	strb	r3, [r4, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   1f314:	61e3      	str	r3, [r4, #28]
   1f316:	6223      	str	r3, [r4, #32]
   1f318:	6263      	str	r3, [r4, #36]	; 0x24
   1f31a:	62a3      	str	r3, [r4, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   1f31c:	7523      	strb	r3, [r4, #20]
   1f31e:	7563      	strb	r3, [r4, #21]
   1f320:	75a3      	strb	r3, [r4, #22]
   1f322:	75e3      	strb	r3, [r4, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
   1f324:	7623      	strb	r3, [r4, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
   1f326:	7663      	strb	r3, [r4, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   1f328:	7423      	strb	r3, [r4, #16]
   1f32a:	7463      	strb	r3, [r4, #17]
   1f32c:	74a3      	strb	r3, [r4, #18]
   1f32e:	74e3      	strb	r3, [r4, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
   1f330:	222c      	movs	r2, #44	; 0x2c
   1f332:	54a3      	strb	r3, [r4, r2]
   1f334:	3201      	adds	r2, #1
   1f336:	54a3      	strb	r3, [r4, r2]
   1f338:	3201      	adds	r2, #1
   1f33a:	54a3      	strb	r3, [r4, r2]
   1f33c:	3201      	adds	r2, #1
   1f33e:	54a3      	strb	r3, [r4, r2]
   1f340:	3201      	adds	r2, #1
   1f342:	54a3      	strb	r3, [r4, r2]
   1f344:	3201      	adds	r2, #1
   1f346:	54a3      	strb	r3, [r4, r2]
   1f348:	3201      	adds	r2, #1
   1f34a:	54a3      	strb	r3, [r4, r2]
   1f34c:	3201      	adds	r2, #1
   1f34e:	54a3      	strb	r3, [r4, r2]
   1f350:	3201      	adds	r2, #1
   1f352:	54a3      	strb	r3, [r4, r2]
   1f354:	3201      	adds	r2, #1
   1f356:	54a3      	strb	r3, [r4, r2]
   1f358:	3201      	adds	r2, #1
   1f35a:	54a3      	strb	r3, [r4, r2]
   1f35c:	3201      	adds	r2, #1
   1f35e:	54a3      	strb	r3, [r4, r2]
   1f360:	3201      	adds	r2, #1
   1f362:	54a3      	strb	r3, [r4, r2]
   1f364:	3201      	adds	r2, #1
   1f366:	54a3      	strb	r3, [r4, r2]
   1f368:	3201      	adds	r2, #1
   1f36a:	54a3      	strb	r3, [r4, r2]
   1f36c:	3201      	adds	r2, #1
   1f36e:	54a3      	strb	r3, [r4, r2]
   1f370:	3201      	adds	r2, #1
   1f372:	54a3      	strb	r3, [r4, r2]
   1f374:	3201      	adds	r2, #1
   1f376:	54a3      	strb	r3, [r4, r2]
   1f378:	3201      	adds	r2, #1
   1f37a:	54a3      	strb	r3, [r4, r2]
   1f37c:	3201      	adds	r2, #1
   1f37e:	54a3      	strb	r3, [r4, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
   1f380:	3201      	adds	r2, #1
   1f382:	54a3      	strb	r3, [r4, r2]
   1f384:	3201      	adds	r2, #1
   1f386:	54a3      	strb	r3, [r4, r2]
   1f388:	3201      	adds	r2, #1
   1f38a:	54a3      	strb	r3, [r4, r2]
   1f38c:	3201      	adds	r2, #1
   1f38e:	54a3      	strb	r3, [r4, r2]
   1f390:	3201      	adds	r2, #1
   1f392:	54a3      	strb	r3, [r4, r2]
   1f394:	3201      	adds	r2, #1
   1f396:	54a3      	strb	r3, [r4, r2]
   1f398:	3201      	adds	r2, #1
   1f39a:	54a3      	strb	r3, [r4, r2]
   1f39c:	3201      	adds	r2, #1
   1f39e:	54a3      	strb	r3, [r4, r2]
   1f3a0:	3201      	adds	r2, #1
   1f3a2:	54a3      	strb	r3, [r4, r2]
   1f3a4:	3201      	adds	r2, #1
   1f3a6:	54a3      	strb	r3, [r4, r2]
   1f3a8:	3201      	adds	r2, #1
   1f3aa:	54a3      	strb	r3, [r4, r2]
   1f3ac:	3201      	adds	r2, #1
   1f3ae:	54a3      	strb	r3, [r4, r2]
   1f3b0:	3201      	adds	r2, #1
   1f3b2:	54a3      	strb	r3, [r4, r2]
   1f3b4:	3201      	adds	r2, #1
   1f3b6:	54a3      	strb	r3, [r4, r2]
   1f3b8:	3201      	adds	r2, #1
   1f3ba:	54a3      	strb	r3, [r4, r2]
   1f3bc:	3201      	adds	r2, #1
   1f3be:	54a3      	strb	r3, [r4, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
   1f3c0:	3201      	adds	r2, #1
   1f3c2:	54a3      	strb	r3, [r4, r2]
   1f3c4:	3201      	adds	r2, #1
   1f3c6:	54a3      	strb	r3, [r4, r2]
   1f3c8:	3201      	adds	r2, #1
   1f3ca:	54a3      	strb	r3, [r4, r2]
   1f3cc:	3201      	adds	r2, #1
   1f3ce:	54a3      	strb	r3, [r4, r2]
   1f3d0:	3201      	adds	r2, #1
   1f3d2:	54a3      	strb	r3, [r4, r2]
   1f3d4:	3201      	adds	r2, #1
   1f3d6:	54a3      	strb	r3, [r4, r2]
   1f3d8:	3201      	adds	r2, #1
   1f3da:	54a3      	strb	r3, [r4, r2]
   1f3dc:	3201      	adds	r2, #1
   1f3de:	54a3      	strb	r3, [r4, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
   1f3e0:	3241      	adds	r2, #65	; 0x41
   1f3e2:	54a3      	strb	r3, [r4, r2]
   1f3e4:	65a3      	str	r3, [r4, #88]	; 0x58
   1f3e6:	67a3      	str	r3, [r4, #120]	; 0x78
   1f3e8:	3201      	adds	r2, #1
   1f3ea:	54a3      	strb	r3, [r4, r2]
   1f3ec:	65e3      	str	r3, [r4, #92]	; 0x5c
   1f3ee:	67e3      	str	r3, [r4, #124]	; 0x7c
   1f3f0:	3201      	adds	r2, #1
   1f3f2:	54a3      	strb	r3, [r4, r2]
   1f3f4:	6623      	str	r3, [r4, #96]	; 0x60
   1f3f6:	3a1a      	subs	r2, #26
   1f3f8:	50a3      	str	r3, [r4, r2]
   1f3fa:	321b      	adds	r2, #27
   1f3fc:	54a3      	strb	r3, [r4, r2]
   1f3fe:	6663      	str	r3, [r4, #100]	; 0x64
   1f400:	3a17      	subs	r2, #23
   1f402:	50a3      	str	r3, [r4, r2]
   1f404:	3218      	adds	r2, #24
   1f406:	54a3      	strb	r3, [r4, r2]
   1f408:	66a3      	str	r3, [r4, #104]	; 0x68
   1f40a:	3a14      	subs	r2, #20
   1f40c:	50a3      	str	r3, [r4, r2]
   1f40e:	3215      	adds	r2, #21
   1f410:	54a3      	strb	r3, [r4, r2]
   1f412:	66e3      	str	r3, [r4, #108]	; 0x6c
   1f414:	3a11      	subs	r2, #17
   1f416:	50a3      	str	r3, [r4, r2]
   1f418:	3212      	adds	r2, #18
   1f41a:	54a3      	strb	r3, [r4, r2]
   1f41c:	6723      	str	r3, [r4, #112]	; 0x70
   1f41e:	3a0e      	subs	r2, #14
   1f420:	50a3      	str	r3, [r4, r2]
   1f422:	320f      	adds	r2, #15
   1f424:	54a3      	strb	r3, [r4, r2]
   1f426:	6763      	str	r3, [r4, #116]	; 0x74
   1f428:	3a0b      	subs	r2, #11
   1f42a:	50a3      	str	r3, [r4, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
   1f42c:	2101      	movs	r1, #1
   1f42e:	320c      	adds	r2, #12
   1f430:	54a1      	strb	r1, [r4, r2]
	config->run_in_standby            = false;
   1f432:	3201      	adds	r2, #1
   1f434:	54a3      	strb	r3, [r4, r2]
}
   1f436:	bd10      	pop	{r4, pc}
   1f438:	0001f2c1 	.word	0x0001f2c1
   1f43c:	0002af94 	.word	0x0002af94

0001f440 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
   1f440:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f442:	46de      	mov	lr, fp
   1f444:	4657      	mov	r7, sl
   1f446:	464e      	mov	r6, r9
   1f448:	4645      	mov	r5, r8
   1f44a:	b5e0      	push	{r5, r6, r7, lr}
   1f44c:	b091      	sub	sp, #68	; 0x44
   1f44e:	9001      	str	r0, [sp, #4]
   1f450:	000c      	movs	r4, r1
   1f452:	0015      	movs	r5, r2
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   1f454:	0008      	movs	r0, r1
   1f456:	4bc3      	ldr	r3, [pc, #780]	; (1f764 <tcc_init+0x324>)
   1f458:	4798      	blx	r3
   1f45a:	0003      	movs	r3, r0

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
   1f45c:	0001      	movs	r1, r0
			PM->APBCMASK.reg |= mask;
   1f45e:	48c2      	ldr	r0, [pc, #776]	; (1f768 <tcc_init+0x328>)
   1f460:	6a02      	ldr	r2, [r0, #32]
   1f462:	009e      	lsls	r6, r3, #2
   1f464:	4fc1      	ldr	r7, [pc, #772]	; (1f76c <tcc_init+0x32c>)
   1f466:	59f7      	ldr	r7, [r6, r7]
   1f468:	433a      	orrs	r2, r7
   1f46a:	6202      	str	r2, [r0, #32]
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
   1f46c:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
   1f46e:	201c      	movs	r0, #28
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
   1f470:	0792      	lsls	r2, r2, #30
   1f472:	d506      	bpl.n	1f482 <tcc_init+0x42>
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
}
   1f474:	b011      	add	sp, #68	; 0x44
   1f476:	bc3c      	pop	{r2, r3, r4, r5}
   1f478:	4690      	mov	r8, r2
   1f47a:	4699      	mov	r9, r3
   1f47c:	46a2      	mov	sl, r4
   1f47e:	46ab      	mov	fp, r5
   1f480:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
   1f482:	6822      	ldr	r2, [r4, #0]
   1f484:	2701      	movs	r7, #1
   1f486:	4017      	ands	r7, r2
   1f488:	d1f4      	bne.n	1f474 <tcc_init+0x34>
	uint32_t count_max  = _tcc_maxs[module_index];
   1f48a:	48b9      	ldr	r0, [pc, #740]	; (1f770 <tcc_init+0x330>)
   1f48c:	5832      	ldr	r2, [r6, r0]
		return STATUS_ERR_INVALID_ARG;
   1f48e:	2017      	movs	r0, #23
	if ((config->counter.count > count_max)
   1f490:	682e      	ldr	r6, [r5, #0]
   1f492:	42b2      	cmp	r2, r6
   1f494:	d3ee      	bcc.n	1f474 <tcc_init+0x34>
		|| (config->counter.period > count_max)
   1f496:	686e      	ldr	r6, [r5, #4]
   1f498:	42b2      	cmp	r2, r6
   1f49a:	d3eb      	bcc.n	1f474 <tcc_init+0x34>
		if ((config->compare.match[i] > count_max)
   1f49c:	69e8      	ldr	r0, [r5, #28]
   1f49e:	4282      	cmp	r2, r0
   1f4a0:	d200      	bcs.n	1f4a4 <tcc_init+0x64>
   1f4a2:	e1b9      	b.n	1f818 <tcc_init+0x3d8>
   1f4a4:	6a28      	ldr	r0, [r5, #32]
   1f4a6:	4282      	cmp	r2, r0
   1f4a8:	d200      	bcs.n	1f4ac <tcc_init+0x6c>
   1f4aa:	e1b7      	b.n	1f81c <tcc_init+0x3dc>
   1f4ac:	6a68      	ldr	r0, [r5, #36]	; 0x24
   1f4ae:	4282      	cmp	r2, r0
   1f4b0:	d200      	bcs.n	1f4b4 <tcc_init+0x74>
   1f4b2:	e1b5      	b.n	1f820 <tcc_init+0x3e0>
   1f4b4:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   1f4b6:	4282      	cmp	r2, r0
   1f4b8:	d200      	bcs.n	1f4bc <tcc_init+0x7c>
   1f4ba:	e1b3      	b.n	1f824 <tcc_init+0x3e4>
   1f4bc:	2298      	movs	r2, #152	; 0x98
   1f4be:	4694      	mov	ip, r2
   1f4c0:	44ac      	add	ip, r5
   1f4c2:	4662      	mov	r2, ip
   1f4c4:	9208      	str	r2, [sp, #32]
   1f4c6:	2000      	movs	r0, #0
   1f4c8:	e003      	b.n	1f4d2 <tcc_init+0x92>
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   1f4ca:	3001      	adds	r0, #1
   1f4cc:	3201      	adds	r2, #1
   1f4ce:	2808      	cmp	r0, #8
   1f4d0:	d008      	beq.n	1f4e4 <tcc_init+0xa4>
		if (!config->pins.enable_wave_out_pin[i]) {
   1f4d2:	7816      	ldrb	r6, [r2, #0]
   1f4d4:	2e00      	cmp	r6, #0
   1f4d6:	d0f8      	beq.n	1f4ca <tcc_init+0x8a>
		if (i >= _tcc_ow_nums[module_index]) {
   1f4d8:	4ea6      	ldr	r6, [pc, #664]	; (1f774 <tcc_init+0x334>)
   1f4da:	5c76      	ldrb	r6, [r6, r1]
   1f4dc:	4286      	cmp	r6, r0
   1f4de:	dcf4      	bgt.n	1f4ca <tcc_init+0x8a>
			return STATUS_ERR_INVALID_ARG;
   1f4e0:	2017      	movs	r0, #23
   1f4e2:	e7c7      	b.n	1f474 <tcc_init+0x34>
   1f4e4:	2200      	movs	r2, #0
   1f4e6:	9202      	str	r2, [sp, #8]
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
   1f4e8:	2080      	movs	r0, #128	; 0x80
   1f4ea:	0440      	lsls	r0, r0, #17
   1f4ec:	4684      	mov	ip, r0
   1f4ee:	e002      	b.n	1f4f6 <tcc_init+0xb6>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   1f4f0:	3201      	adds	r2, #1
   1f4f2:	2a04      	cmp	r2, #4
   1f4f4:	d00e      	beq.n	1f514 <tcc_init+0xd4>
		if (config->capture.channel_function[i] ==
   1f4f6:	18a8      	adds	r0, r5, r2
   1f4f8:	7c00      	ldrb	r0, [r0, #16]
   1f4fa:	2801      	cmp	r0, #1
   1f4fc:	d1f8      	bne.n	1f4f0 <tcc_init+0xb0>
			if (i > _tcc_cc_nums[module_index]) {
   1f4fe:	489e      	ldr	r0, [pc, #632]	; (1f778 <tcc_init+0x338>)
   1f500:	5c40      	ldrb	r0, [r0, r1]
   1f502:	4290      	cmp	r0, r2
   1f504:	da00      	bge.n	1f508 <tcc_init+0xc8>
   1f506:	e18f      	b.n	1f828 <tcc_init+0x3e8>
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
   1f508:	4660      	mov	r0, ip
   1f50a:	4090      	lsls	r0, r2
   1f50c:	9e02      	ldr	r6, [sp, #8]
   1f50e:	4306      	orrs	r6, r0
   1f510:	9602      	str	r6, [sp, #8]
   1f512:	e7ed      	b.n	1f4f0 <tcc_init+0xb0>
	if (config->run_in_standby) {
   1f514:	329d      	adds	r2, #157	; 0x9d
   1f516:	5caa      	ldrb	r2, [r5, r2]
   1f518:	2a00      	cmp	r2, #0
   1f51a:	d004      	beq.n	1f526 <tcc_init+0xe6>
		ctrla |= TCC_CTRLA_RUNSTDBY;
   1f51c:	2280      	movs	r2, #128	; 0x80
   1f51e:	0112      	lsls	r2, r2, #4
   1f520:	9902      	ldr	r1, [sp, #8]
   1f522:	4311      	orrs	r1, r2
   1f524:	9102      	str	r1, [sp, #8]
	if (config->counter.oneshot) {
   1f526:	7a2a      	ldrb	r2, [r5, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
   1f528:	1e51      	subs	r1, r2, #1
   1f52a:	418a      	sbcs	r2, r1
   1f52c:	0092      	lsls	r2, r2, #2
   1f52e:	9206      	str	r2, [sp, #24]
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
   1f530:	7a6a      	ldrb	r2, [r5, #9]
   1f532:	2a01      	cmp	r2, #1
   1f534:	d022      	beq.n	1f57c <tcc_init+0x13c>
	uint8_t cc_num = _tcc_cc_nums[module_index];
   1f536:	4a90      	ldr	r2, [pc, #576]	; (1f778 <tcc_init+0x338>)
   1f538:	5cd2      	ldrb	r2, [r2, r3]
   1f53a:	0011      	movs	r1, r2
   1f53c:	9205      	str	r2, [sp, #20]
		if (cfg->capture_channel >= cc_num) {
   1f53e:	2235      	movs	r2, #53	; 0x35
   1f540:	5caa      	ldrb	r2, [r5, r2]
   1f542:	428a      	cmp	r2, r1
   1f544:	d300      	bcc.n	1f548 <tcc_init+0x108>
   1f546:	e179      	b.n	1f83c <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
   1f548:	212c      	movs	r1, #44	; 0x2c
   1f54a:	5c69      	ldrb	r1, [r5, r1]
   1f54c:	290f      	cmp	r1, #15
   1f54e:	d900      	bls.n	1f552 <tcc_init+0x112>
   1f550:	e174      	b.n	1f83c <tcc_init+0x3fc>
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
   1f552:	7b28      	ldrb	r0, [r5, #12]
   1f554:	900a      	str	r0, [sp, #40]	; 0x28
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
   1f556:	7ae8      	ldrb	r0, [r5, #11]
   1f558:	900b      	str	r0, [sp, #44]	; 0x2c
   1f55a:	202d      	movs	r0, #45	; 0x2d
   1f55c:	4682      	mov	sl, r0
   1f55e:	44aa      	add	sl, r5
   1f560:	2000      	movs	r0, #0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
   1f562:	9704      	str	r7, [sp, #16]
		value_buffer[i] = fault;
   1f564:	ae0e      	add	r6, sp, #56	; 0x38
   1f566:	9607      	str	r6, [sp, #28]
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
   1f568:	26c0      	movs	r6, #192	; 0xc0
   1f56a:	0136      	lsls	r6, r6, #4
   1f56c:	46b1      	mov	r9, r6
   1f56e:	4684      	mov	ip, r0
   1f570:	46a0      	mov	r8, r4
   1f572:	0028      	movs	r0, r5
   1f574:	4655      	mov	r5, sl
   1f576:	9309      	str	r3, [sp, #36]	; 0x24
   1f578:	4682      	mov	sl, r0
   1f57a:	e035      	b.n	1f5e8 <tcc_init+0x1a8>
		ctrlb |= TCC_CTRLBSET_DIR;
   1f57c:	9906      	ldr	r1, [sp, #24]
   1f57e:	4311      	orrs	r1, r2
   1f580:	9106      	str	r1, [sp, #24]
   1f582:	e7d8      	b.n	1f536 <tcc_init+0xf6>
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
   1f584:	0292      	lsls	r2, r2, #10
   1f586:	464f      	mov	r7, r9
   1f588:	403a      	ands	r2, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   1f58a:	430a      	orrs	r2, r1
				| TCC_FCTRLA_SRC(cfg->source)
   1f58c:	7919      	ldrb	r1, [r3, #4]
   1f58e:	468b      	mov	fp, r1
   1f590:	2103      	movs	r1, #3
   1f592:	465f      	mov	r7, fp
   1f594:	4039      	ands	r1, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   1f596:	430a      	orrs	r2, r1
   1f598:	4316      	orrs	r6, r2
				| TCC_FCTRLA_BLANK(cfg->blanking)
   1f59a:	795a      	ldrb	r2, [r3, #5]
   1f59c:	0152      	lsls	r2, r2, #5
   1f59e:	2160      	movs	r1, #96	; 0x60
   1f5a0:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   1f5a2:	4332      	orrs	r2, r6
				| TCC_FCTRLA_HALT(cfg->halt_action)
   1f5a4:	7999      	ldrb	r1, [r3, #6]
   1f5a6:	0209      	lsls	r1, r1, #8
   1f5a8:	26c0      	movs	r6, #192	; 0xc0
   1f5aa:	00b6      	lsls	r6, r6, #2
   1f5ac:	400e      	ands	r6, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   1f5ae:	4316      	orrs	r6, r2
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
   1f5b0:	79da      	ldrb	r2, [r3, #7]
   1f5b2:	0312      	lsls	r2, r2, #12
   1f5b4:	21e0      	movs	r1, #224	; 0xe0
   1f5b6:	01c9      	lsls	r1, r1, #7
   1f5b8:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   1f5ba:	4316      	orrs	r6, r2
   1f5bc:	4334      	orrs	r4, r6
   1f5be:	9a03      	ldr	r2, [sp, #12]
   1f5c0:	4314      	orrs	r4, r2
   1f5c2:	4320      	orrs	r0, r4
		value_buffer[i] = fault;
   1f5c4:	4662      	mov	r2, ip
   1f5c6:	9907      	ldr	r1, [sp, #28]
   1f5c8:	5050      	str	r0, [r2, r1]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   1f5ca:	2a04      	cmp	r2, #4
   1f5cc:	d02a      	beq.n	1f624 <tcc_init+0x1e4>
		if (cfg->capture_channel >= cc_num) {
   1f5ce:	7c9a      	ldrb	r2, [r3, #18]
   1f5d0:	9905      	ldr	r1, [sp, #20]
   1f5d2:	4291      	cmp	r1, r2
   1f5d4:	d800      	bhi.n	1f5d8 <tcc_init+0x198>
   1f5d6:	e131      	b.n	1f83c <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
   1f5d8:	7a59      	ldrb	r1, [r3, #9]
   1f5da:	350a      	adds	r5, #10
   1f5dc:	2304      	movs	r3, #4
   1f5de:	469b      	mov	fp, r3
   1f5e0:	44dc      	add	ip, fp
   1f5e2:	290f      	cmp	r1, #15
   1f5e4:	d900      	bls.n	1f5e8 <tcc_init+0x1a8>
   1f5e6:	e129      	b.n	1f83c <tcc_init+0x3fc>
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   1f5e8:	0609      	lsls	r1, r1, #24
   1f5ea:	23f0      	movs	r3, #240	; 0xf0
   1f5ec:	051b      	lsls	r3, r3, #20
   1f5ee:	4019      	ands	r1, r3
   1f5f0:	002b      	movs	r3, r5
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
   1f5f2:	782e      	ldrb	r6, [r5, #0]
   1f5f4:	0436      	lsls	r6, r6, #16
   1f5f6:	20ff      	movs	r0, #255	; 0xff
   1f5f8:	0400      	lsls	r0, r0, #16
   1f5fa:	4006      	ands	r6, r0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
   1f5fc:	7868      	ldrb	r0, [r5, #1]
   1f5fe:	2480      	movs	r4, #128	; 0x80
   1f600:	2800      	cmp	r0, #0
   1f602:	d100      	bne.n	1f606 <tcc_init+0x1c6>
   1f604:	9c04      	ldr	r4, [sp, #16]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
   1f606:	7898      	ldrb	r0, [r3, #2]
   1f608:	2708      	movs	r7, #8
   1f60a:	9703      	str	r7, [sp, #12]
   1f60c:	2800      	cmp	r0, #0
   1f60e:	d101      	bne.n	1f614 <tcc_init+0x1d4>
   1f610:	9804      	ldr	r0, [sp, #16]
   1f612:	9003      	str	r0, [sp, #12]
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
   1f614:	78d8      	ldrb	r0, [r3, #3]
   1f616:	4683      	mov	fp, r0
   1f618:	2010      	movs	r0, #16
   1f61a:	465f      	mov	r7, fp
   1f61c:	2f00      	cmp	r7, #0
   1f61e:	d1b1      	bne.n	1f584 <tcc_init+0x144>
   1f620:	9804      	ldr	r0, [sp, #16]
   1f622:	e7af      	b.n	1f584 <tcc_init+0x144>
   1f624:	4644      	mov	r4, r8
   1f626:	4655      	mov	r5, sl
   1f628:	9b09      	ldr	r3, [sp, #36]	; 0x24
	uint8_t ow_num = _tcc_ow_nums[module_index];
   1f62a:	4a52      	ldr	r2, [pc, #328]	; (1f774 <tcc_init+0x334>)
   1f62c:	5cd2      	ldrb	r2, [r2, r3]
   1f62e:	4691      	mov	r9, r2
   1f630:	4651      	mov	r1, sl
   1f632:	3150      	adds	r1, #80	; 0x50
   1f634:	4650      	mov	r0, sl
   1f636:	3041      	adds	r0, #65	; 0x41
	drvctrl = 0;
   1f638:	2700      	movs	r7, #0
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   1f63a:	2200      	movs	r2, #0
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
   1f63c:	2601      	movs	r6, #1
   1f63e:	46b2      	mov	sl, r6
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
   1f640:	2602      	movs	r6, #2
   1f642:	36ff      	adds	r6, #255	; 0xff
   1f644:	46b3      	mov	fp, r6
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
   1f646:	2680      	movs	r6, #128	; 0x80
   1f648:	0276      	lsls	r6, r6, #9
   1f64a:	46b0      	mov	r8, r6
   1f64c:	46a4      	mov	ip, r4
   1f64e:	001c      	movs	r4, r3
   1f650:	464b      	mov	r3, r9
   1f652:	e00f      	b.n	1f674 <tcc_init+0x234>
		if (config->wave_ext.non_recoverable_fault[i].output !=
   1f654:	7806      	ldrb	r6, [r0, #0]
   1f656:	2e00      	cmp	r6, #0
   1f658:	d007      	beq.n	1f66a <tcc_init+0x22a>
			if (i >= ow_num) {
   1f65a:	4293      	cmp	r3, r2
   1f65c:	d800      	bhi.n	1f660 <tcc_init+0x220>
   1f65e:	e0e7      	b.n	1f830 <tcc_init+0x3f0>
			if (config->wave_ext.non_recoverable_fault[i].output ==
   1f660:	2e02      	cmp	r6, #2
   1f662:	d014      	beq.n	1f68e <tcc_init+0x24e>
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
   1f664:	4656      	mov	r6, sl
   1f666:	4096      	lsls	r6, r2
   1f668:	4337      	orrs	r7, r6
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   1f66a:	3201      	adds	r2, #1
   1f66c:	3101      	adds	r1, #1
   1f66e:	3002      	adds	r0, #2
   1f670:	2a08      	cmp	r2, #8
   1f672:	d010      	beq.n	1f696 <tcc_init+0x256>
		if (config->wave_ext.invert[i]) {
   1f674:	780e      	ldrb	r6, [r1, #0]
   1f676:	2e00      	cmp	r6, #0
   1f678:	d0ec      	beq.n	1f654 <tcc_init+0x214>
			if (i >= ow_num) {
   1f67a:	4293      	cmp	r3, r2
   1f67c:	d800      	bhi.n	1f680 <tcc_init+0x240>
   1f67e:	e0d5      	b.n	1f82c <tcc_init+0x3ec>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
   1f680:	4646      	mov	r6, r8
   1f682:	4096      	lsls	r6, r2
   1f684:	4337      	orrs	r7, r6
		if (config->wave_ext.non_recoverable_fault[i].output !=
   1f686:	7806      	ldrb	r6, [r0, #0]
   1f688:	2e00      	cmp	r6, #0
   1f68a:	d1e9      	bne.n	1f660 <tcc_init+0x220>
   1f68c:	e7ed      	b.n	1f66a <tcc_init+0x22a>
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
   1f68e:	465e      	mov	r6, fp
   1f690:	4096      	lsls	r6, r2
   1f692:	4337      	orrs	r7, r6
   1f694:	e7e9      	b.n	1f66a <tcc_init+0x22a>
   1f696:	4699      	mov	r9, r3
   1f698:	0023      	movs	r3, r4
   1f69a:	4664      	mov	r4, ip
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   1f69c:	7e6a      	ldrb	r2, [r5, #25]
   1f69e:	0112      	lsls	r2, r2, #4
   1f6a0:	2130      	movs	r1, #48	; 0x30
   1f6a2:	4011      	ands	r1, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
   1f6a4:	7e28      	ldrb	r0, [r5, #24]
   1f6a6:	2207      	movs	r2, #7
   1f6a8:	4002      	ands	r2, r0
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   1f6aa:	4311      	orrs	r1, r2
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   1f6ac:	2200      	movs	r2, #0
			wave |= (TCC_WAVE_POL0 << n);
   1f6ae:	2080      	movs	r0, #128	; 0x80
   1f6b0:	0240      	lsls	r0, r0, #9
   1f6b2:	000e      	movs	r6, r1
   1f6b4:	e002      	b.n	1f6bc <tcc_init+0x27c>
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   1f6b6:	3201      	adds	r2, #1
   1f6b8:	2a04      	cmp	r2, #4
   1f6ba:	d00b      	beq.n	1f6d4 <tcc_init+0x294>
		if (wav_cfg->wave_polarity[n]) {
   1f6bc:	18a9      	adds	r1, r5, r2
   1f6be:	7d09      	ldrb	r1, [r1, #20]
   1f6c0:	2900      	cmp	r1, #0
   1f6c2:	d0f8      	beq.n	1f6b6 <tcc_init+0x276>
			if (n >= cc_num) {
   1f6c4:	9905      	ldr	r1, [sp, #20]
   1f6c6:	4291      	cmp	r1, r2
   1f6c8:	dc00      	bgt.n	1f6cc <tcc_init+0x28c>
   1f6ca:	e0b3      	b.n	1f834 <tcc_init+0x3f4>
			wave |= (TCC_WAVE_POL0 << n);
   1f6cc:	0001      	movs	r1, r0
   1f6ce:	4091      	lsls	r1, r2
   1f6d0:	430e      	orrs	r6, r1
   1f6d2:	e7f0      	b.n	1f6b6 <tcc_init+0x276>
   1f6d4:	46b2      	mov	sl, r6
   1f6d6:	9801      	ldr	r0, [sp, #4]
   1f6d8:	0002      	movs	r2, r0
   1f6da:	3204      	adds	r2, #4
   1f6dc:	3034      	adds	r0, #52	; 0x34
		module_inst->callback[i] = NULL;
   1f6de:	2100      	movs	r1, #0
   1f6e0:	c202      	stmia	r2!, {r1}
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   1f6e2:	4282      	cmp	r2, r0
   1f6e4:	d1fc      	bne.n	1f6e0 <tcc_init+0x2a0>
	module_inst->register_callback_mask = 0;
   1f6e6:	2200      	movs	r2, #0
   1f6e8:	9801      	ldr	r0, [sp, #4]
   1f6ea:	6342      	str	r2, [r0, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
   1f6ec:	6382      	str	r2, [r0, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
   1f6ee:	0099      	lsls	r1, r3, #2
   1f6f0:	4a22      	ldr	r2, [pc, #136]	; (1f77c <tcc_init+0x33c>)
   1f6f2:	5088      	str	r0, [r1, r2]
	module_inst->hw = hw;
   1f6f4:	6004      	str	r4, [r0, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
   1f6f6:	22a0      	movs	r2, #160	; 0xa0
   1f6f8:	5ca9      	ldrb	r1, [r5, r2]
   1f6fa:	3a64      	subs	r2, #100	; 0x64
   1f6fc:	5481      	strb	r1, [r0, r2]
	gclk_chan_config.source_generator = config->counter.clock_source;
   1f6fe:	a90d      	add	r1, sp, #52	; 0x34
   1f700:	7aaa      	ldrb	r2, [r5, #10]
   1f702:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
   1f704:	4a1e      	ldr	r2, [pc, #120]	; (1f780 <tcc_init+0x340>)
   1f706:	5cd6      	ldrb	r6, [r2, r3]
   1f708:	0030      	movs	r0, r6
   1f70a:	4b1e      	ldr	r3, [pc, #120]	; (1f784 <tcc_init+0x344>)
   1f70c:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
   1f70e:	0030      	movs	r0, r6
   1f710:	4b1d      	ldr	r3, [pc, #116]	; (1f788 <tcc_init+0x348>)
   1f712:	4798      	blx	r3
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   1f714:	464b      	mov	r3, r9
   1f716:	2b00      	cmp	r3, #0
   1f718:	dd3c      	ble.n	1f794 <tcc_init+0x354>
   1f71a:	002e      	movs	r6, r5
   1f71c:	3658      	adds	r6, #88	; 0x58
   1f71e:	3398      	adds	r3, #152	; 0x98
   1f720:	4698      	mov	r8, r3
   1f722:	44a8      	add	r8, r5
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   1f724:	2301      	movs	r3, #1
   1f726:	4699      	mov	r9, r3
		system_pinmux_pin_set_config(
   1f728:	46ab      	mov	fp, r5
   1f72a:	4645      	mov	r5, r8
   1f72c:	46a0      	mov	r8, r4
   1f72e:	9c08      	ldr	r4, [sp, #32]
   1f730:	e003      	b.n	1f73a <tcc_init+0x2fa>
   1f732:	3401      	adds	r4, #1
   1f734:	3604      	adds	r6, #4
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   1f736:	42ac      	cmp	r4, r5
   1f738:	d02a      	beq.n	1f790 <tcc_init+0x350>
		if (!config->pins.enable_wave_out_pin[i]) {
   1f73a:	7823      	ldrb	r3, [r4, #0]
   1f73c:	2b00      	cmp	r3, #0
   1f73e:	d0f8      	beq.n	1f732 <tcc_init+0x2f2>
   1f740:	ab0c      	add	r3, sp, #48	; 0x30
   1f742:	464a      	mov	r2, r9
   1f744:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   1f746:	2300      	movs	r3, #0
   1f748:	aa0c      	add	r2, sp, #48	; 0x30
   1f74a:	70d3      	strb	r3, [r2, #3]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
   1f74c:	0013      	movs	r3, r2
   1f74e:	2220      	movs	r2, #32
   1f750:	18b2      	adds	r2, r6, r2
   1f752:	7812      	ldrb	r2, [r2, #0]
   1f754:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
   1f756:	464a      	mov	r2, r9
   1f758:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
   1f75a:	7830      	ldrb	r0, [r6, #0]
   1f75c:	0019      	movs	r1, r3
   1f75e:	4b0b      	ldr	r3, [pc, #44]	; (1f78c <tcc_init+0x34c>)
   1f760:	4798      	blx	r3
   1f762:	e7e6      	b.n	1f732 <tcc_init+0x2f2>
   1f764:	0001f2c1 	.word	0x0001f2c1
   1f768:	40000400 	.word	0x40000400
   1f76c:	0002af80 	.word	0x0002af80
   1f770:	0002af94 	.word	0x0002af94
   1f774:	0002afa0 	.word	0x0002afa0
   1f778:	0002af8c 	.word	0x0002af8c
   1f77c:	20005524 	.word	0x20005524
   1f780:	0002af90 	.word	0x0002af90
   1f784:	0001f139 	.word	0x0001f139
   1f788:	0001f0ad 	.word	0x0001f0ad
   1f78c:	0001f261 	.word	0x0001f261
   1f790:	4644      	mov	r4, r8
   1f792:	465d      	mov	r5, fp
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
   1f794:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1f796:	031b      	lsls	r3, r3, #12
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
   1f798:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1f79a:	0212      	lsls	r2, r2, #8
   1f79c:	4313      	orrs	r3, r2
   1f79e:	9a02      	ldr	r2, [sp, #8]
   1f7a0:	4313      	orrs	r3, r2
	hw->CTRLA.reg = ctrla;
   1f7a2:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   1f7a4:	2204      	movs	r2, #4
   1f7a6:	68a3      	ldr	r3, [r4, #8]
   1f7a8:	421a      	tst	r2, r3
   1f7aa:	d1fc      	bne.n	1f7a6 <tcc_init+0x366>
	hw->CTRLBCLR.reg = 0xFF;
   1f7ac:	23ff      	movs	r3, #255	; 0xff
   1f7ae:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   1f7b0:	2204      	movs	r2, #4
   1f7b2:	68a3      	ldr	r3, [r4, #8]
   1f7b4:	421a      	tst	r2, r3
   1f7b6:	d1fc      	bne.n	1f7b2 <tcc_init+0x372>
	hw->CTRLBSET.reg = ctrlb;
   1f7b8:	466b      	mov	r3, sp
   1f7ba:	7e1b      	ldrb	r3, [r3, #24]
   1f7bc:	7163      	strb	r3, [r4, #5]
	hw->FCTRLA.reg = faults[0];
   1f7be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1f7c0:	60e3      	str	r3, [r4, #12]
	hw->FCTRLB.reg = faults[1];
   1f7c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1f7c4:	6123      	str	r3, [r4, #16]
	hw->DRVCTRL.reg = drvctrl;
   1f7c6:	61a7      	str	r7, [r4, #24]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
   1f7c8:	4a1d      	ldr	r2, [pc, #116]	; (1f840 <tcc_init+0x400>)
   1f7ca:	68a3      	ldr	r3, [r4, #8]
   1f7cc:	4213      	tst	r3, r2
   1f7ce:	d1fc      	bne.n	1f7ca <tcc_init+0x38a>
	hw->WAVE.reg = waves[0];
   1f7d0:	4653      	mov	r3, sl
   1f7d2:	63e3      	str	r3, [r4, #60]	; 0x3c
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
   1f7d4:	2210      	movs	r2, #16
   1f7d6:	68a3      	ldr	r3, [r4, #8]
   1f7d8:	421a      	tst	r2, r3
   1f7da:	d1fc      	bne.n	1f7d6 <tcc_init+0x396>
	hw->COUNT.reg = config->counter.count;
   1f7dc:	682b      	ldr	r3, [r5, #0]
   1f7de:	6363      	str	r3, [r4, #52]	; 0x34
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
   1f7e0:	4a18      	ldr	r2, [pc, #96]	; (1f844 <tcc_init+0x404>)
   1f7e2:	68a3      	ldr	r3, [r4, #8]
   1f7e4:	4213      	tst	r3, r2
   1f7e6:	d1fc      	bne.n	1f7e2 <tcc_init+0x3a2>
	hw->PER.reg = (config->counter.period);
   1f7e8:	686b      	ldr	r3, [r5, #4]
   1f7ea:	6423      	str	r3, [r4, #64]	; 0x40
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   1f7ec:	9805      	ldr	r0, [sp, #20]
   1f7ee:	2800      	cmp	r0, #0
   1f7f0:	dd22      	ble.n	1f838 <tcc_init+0x3f8>
   1f7f2:	351c      	adds	r5, #28
   1f7f4:	2100      	movs	r1, #0
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
   1f7f6:	4e14      	ldr	r6, [pc, #80]	; (1f848 <tcc_init+0x408>)
   1f7f8:	0032      	movs	r2, r6
   1f7fa:	408a      	lsls	r2, r1
		while (hw->SYNCBUSY.reg & (
   1f7fc:	68a3      	ldr	r3, [r4, #8]
   1f7fe:	421a      	tst	r2, r3
   1f800:	d1fc      	bne.n	1f7fc <tcc_init+0x3bc>
		hw->CC[i].reg = (config->compare.match[i]);
   1f802:	cd04      	ldmia	r5!, {r2}
   1f804:	000b      	movs	r3, r1
   1f806:	3310      	adds	r3, #16
   1f808:	009b      	lsls	r3, r3, #2
   1f80a:	18e3      	adds	r3, r4, r3
   1f80c:	605a      	str	r2, [r3, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   1f80e:	3101      	adds	r1, #1
   1f810:	4288      	cmp	r0, r1
   1f812:	dcf1      	bgt.n	1f7f8 <tcc_init+0x3b8>
	return STATUS_OK;
   1f814:	2000      	movs	r0, #0
   1f816:	e62d      	b.n	1f474 <tcc_init+0x34>
			return STATUS_ERR_INVALID_ARG;
   1f818:	2017      	movs	r0, #23
   1f81a:	e62b      	b.n	1f474 <tcc_init+0x34>
   1f81c:	2017      	movs	r0, #23
   1f81e:	e629      	b.n	1f474 <tcc_init+0x34>
   1f820:	2017      	movs	r0, #23
   1f822:	e627      	b.n	1f474 <tcc_init+0x34>
   1f824:	2017      	movs	r0, #23
   1f826:	e625      	b.n	1f474 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
   1f828:	2017      	movs	r0, #23
   1f82a:	e623      	b.n	1f474 <tcc_init+0x34>
			if (i >= ow_num) {
   1f82c:	2017      	movs	r0, #23
   1f82e:	e621      	b.n	1f474 <tcc_init+0x34>
			if (i >= ow_num) {
   1f830:	2017      	movs	r0, #23
   1f832:	e61f      	b.n	1f474 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
   1f834:	2017      	movs	r0, #23
   1f836:	e61d      	b.n	1f474 <tcc_init+0x34>
	return STATUS_OK;
   1f838:	2000      	movs	r0, #0
   1f83a:	e61b      	b.n	1f474 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
   1f83c:	2017      	movs	r0, #23
   1f83e:	e619      	b.n	1f474 <tcc_init+0x34>
   1f840:	00020040 	.word	0x00020040
   1f844:	00040080 	.word	0x00040080
   1f848:	00080100 	.word	0x00080100

0001f84c <tcc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   1f84c:	0092      	lsls	r2, r2, #2
   1f84e:	1883      	adds	r3, r0, r2
   1f850:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
   1f852:	4b03      	ldr	r3, [pc, #12]	; (1f860 <tcc_register_callback+0x14>)
   1f854:	58d3      	ldr	r3, [r2, r3]
   1f856:	6b42      	ldr	r2, [r0, #52]	; 0x34
   1f858:	4313      	orrs	r3, r2
   1f85a:	6343      	str	r3, [r0, #52]	; 0x34

	return STATUS_OK;
}
   1f85c:	2000      	movs	r0, #0
   1f85e:	4770      	bx	lr
   1f860:	0002afa4 	.word	0x0002afa4

0001f864 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
   1f864:	b570      	push	{r4, r5, r6, lr}
   1f866:	0004      	movs	r4, r0
   1f868:	000d      	movs	r5, r1
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
   1f86a:	6800      	ldr	r0, [r0, #0]
   1f86c:	4b09      	ldr	r3, [pc, #36]	; (1f894 <tcc_enable_callback+0x30>)
   1f86e:	4798      	blx	r3
	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
   1f870:	4b09      	ldr	r3, [pc, #36]	; (1f898 <tcc_enable_callback+0x34>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1f872:	5c1b      	ldrb	r3, [r3, r0]
   1f874:	221f      	movs	r2, #31
   1f876:	401a      	ands	r2, r3
   1f878:	2301      	movs	r3, #1
   1f87a:	4093      	lsls	r3, r2
   1f87c:	4a07      	ldr	r2, [pc, #28]	; (1f89c <tcc_enable_callback+0x38>)
   1f87e:	6013      	str	r3, [r2, #0]

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
   1f880:	00ad      	lsls	r5, r5, #2
   1f882:	4b07      	ldr	r3, [pc, #28]	; (1f8a0 <tcc_enable_callback+0x3c>)
   1f884:	58ea      	ldr	r2, [r5, r3]
   1f886:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1f888:	4313      	orrs	r3, r2
   1f88a:	63a3      	str	r3, [r4, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
   1f88c:	6823      	ldr	r3, [r4, #0]
   1f88e:	629a      	str	r2, [r3, #40]	; 0x28
}
   1f890:	bd70      	pop	{r4, r5, r6, pc}
   1f892:	46c0      	nop			; (mov r8, r8)
   1f894:	0001f2c1 	.word	0x0001f2c1
   1f898:	0002afd4 	.word	0x0002afd4
   1f89c:	e000e100 	.word	0xe000e100
   1f8a0:	0002afa4 	.word	0x0002afa4

0001f8a4 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
   1f8a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f8a6:	46c6      	mov	lr, r8
   1f8a8:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
   1f8aa:	0080      	lsls	r0, r0, #2
   1f8ac:	4b0e      	ldr	r3, [pc, #56]	; (1f8e8 <_tcc_interrupt_handler+0x44>)
   1f8ae:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   1f8b0:	683b      	ldr	r3, [r7, #0]
   1f8b2:	6ade      	ldr	r6, [r3, #44]	; 0x2c
   1f8b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1f8b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1f8b8:	4013      	ands	r3, r2
   1f8ba:	401e      	ands	r6, r3
   1f8bc:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
   1f8be:	4b0b      	ldr	r3, [pc, #44]	; (1f8ec <_tcc_interrupt_handler+0x48>)
   1f8c0:	4698      	mov	r8, r3
   1f8c2:	e002      	b.n	1f8ca <_tcc_interrupt_handler+0x26>
   1f8c4:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   1f8c6:	2c30      	cmp	r4, #48	; 0x30
   1f8c8:	d00a      	beq.n	1f8e0 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
   1f8ca:	4643      	mov	r3, r8
   1f8cc:	58e5      	ldr	r5, [r4, r3]
   1f8ce:	4235      	tst	r5, r6
   1f8d0:	d0f8      	beq.n	1f8c4 <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
   1f8d2:	193b      	adds	r3, r7, r4
   1f8d4:	685b      	ldr	r3, [r3, #4]
   1f8d6:	0038      	movs	r0, r7
   1f8d8:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
   1f8da:	683b      	ldr	r3, [r7, #0]
   1f8dc:	62dd      	str	r5, [r3, #44]	; 0x2c
   1f8de:	e7f1      	b.n	1f8c4 <_tcc_interrupt_handler+0x20>
		}
	}
}
   1f8e0:	bc04      	pop	{r2}
   1f8e2:	4690      	mov	r8, r2
   1f8e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f8e6:	46c0      	nop			; (mov r8, r8)
   1f8e8:	20005524 	.word	0x20005524
   1f8ec:	0002afa4 	.word	0x0002afa4

0001f8f0 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
   1f8f0:	b510      	push	{r4, lr}
   1f8f2:	2000      	movs	r0, #0
   1f8f4:	4b01      	ldr	r3, [pc, #4]	; (1f8fc <TCC0_Handler+0xc>)
   1f8f6:	4798      	blx	r3
   1f8f8:	bd10      	pop	{r4, pc}
   1f8fa:	46c0      	nop			; (mov r8, r8)
   1f8fc:	0001f8a5 	.word	0x0001f8a5

0001f900 <TCC1_Handler>:
   1f900:	b510      	push	{r4, lr}
   1f902:	2001      	movs	r0, #1
   1f904:	4b01      	ldr	r3, [pc, #4]	; (1f90c <TCC1_Handler+0xc>)
   1f906:	4798      	blx	r3
   1f908:	bd10      	pop	{r4, pc}
   1f90a:	46c0      	nop			; (mov r8, r8)
   1f90c:	0001f8a5 	.word	0x0001f8a5

0001f910 <TCC2_Handler>:
   1f910:	b510      	push	{r4, lr}
   1f912:	2002      	movs	r0, #2
   1f914:	4b01      	ldr	r3, [pc, #4]	; (1f91c <TCC2_Handler+0xc>)
   1f916:	4798      	blx	r3
   1f918:	bd10      	pop	{r4, pc}
   1f91a:	46c0      	nop			; (mov r8, r8)
   1f91c:	0001f8a5 	.word	0x0001f8a5

0001f920 <Dummy_Handler>:
 */
void HardFault_HandlerC(unsigned long *hardfault_args);

void Dummy_Handler(void)
{
  __asm volatile (
   1f920:	2004      	movs	r0, #4
   1f922:	4671      	mov	r1, lr
   1f924:	4208      	tst	r0, r1
   1f926:	d002      	beq.n	1f92e <_MSP>
   1f928:	f3ef 8009 	mrs	r0, PSP
   1f92c:	e001      	b.n	1f932 <_HALT>

0001f92e <_MSP>:
   1f92e:	f3ef 8008 	mrs	r0, MSP

0001f932 <_HALT>:
   1f932:	6941      	ldr	r1, [r0, #20]
   1f934:	e074      	b.n	1fa20 <HardFault_HandlerC>
   1f936:	be00      	bkpt	0x0000
  "_HALT:              \n"
  " ldr r1,[r0,#20]  \n"
  " b HardFault_HandlerC \n"
  " bkpt #0          \n"
  );
}
   1f938:	4770      	bx	lr
	...

0001f93c <Reset_Handler>:
{
   1f93c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
   1f93e:	4a2a      	ldr	r2, [pc, #168]	; (1f9e8 <Reset_Handler+0xac>)
   1f940:	4b2a      	ldr	r3, [pc, #168]	; (1f9ec <Reset_Handler+0xb0>)
   1f942:	429a      	cmp	r2, r3
   1f944:	d011      	beq.n	1f96a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
   1f946:	001a      	movs	r2, r3
   1f948:	4b29      	ldr	r3, [pc, #164]	; (1f9f0 <Reset_Handler+0xb4>)
   1f94a:	429a      	cmp	r2, r3
   1f94c:	d20d      	bcs.n	1f96a <Reset_Handler+0x2e>
   1f94e:	4a29      	ldr	r2, [pc, #164]	; (1f9f4 <Reset_Handler+0xb8>)
   1f950:	3303      	adds	r3, #3
   1f952:	1a9b      	subs	r3, r3, r2
   1f954:	089b      	lsrs	r3, r3, #2
   1f956:	3301      	adds	r3, #1
   1f958:	009b      	lsls	r3, r3, #2
   1f95a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
   1f95c:	4823      	ldr	r0, [pc, #140]	; (1f9ec <Reset_Handler+0xb0>)
   1f95e:	4922      	ldr	r1, [pc, #136]	; (1f9e8 <Reset_Handler+0xac>)
   1f960:	588c      	ldr	r4, [r1, r2]
   1f962:	5084      	str	r4, [r0, r2]
   1f964:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
   1f966:	429a      	cmp	r2, r3
   1f968:	d1fa      	bne.n	1f960 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
   1f96a:	4a23      	ldr	r2, [pc, #140]	; (1f9f8 <Reset_Handler+0xbc>)
   1f96c:	4b23      	ldr	r3, [pc, #140]	; (1f9fc <Reset_Handler+0xc0>)
   1f96e:	429a      	cmp	r2, r3
   1f970:	d20a      	bcs.n	1f988 <Reset_Handler+0x4c>
   1f972:	43d3      	mvns	r3, r2
   1f974:	4921      	ldr	r1, [pc, #132]	; (1f9fc <Reset_Handler+0xc0>)
   1f976:	185b      	adds	r3, r3, r1
   1f978:	2103      	movs	r1, #3
   1f97a:	438b      	bics	r3, r1
   1f97c:	3304      	adds	r3, #4
   1f97e:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
   1f980:	2100      	movs	r1, #0
   1f982:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
   1f984:	4293      	cmp	r3, r2
   1f986:	d1fc      	bne.n	1f982 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   1f988:	4a1d      	ldr	r2, [pc, #116]	; (1fa00 <Reset_Handler+0xc4>)
   1f98a:	21ff      	movs	r1, #255	; 0xff
   1f98c:	4b1d      	ldr	r3, [pc, #116]	; (1fa04 <Reset_Handler+0xc8>)
   1f98e:	438b      	bics	r3, r1
   1f990:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
   1f992:	39fd      	subs	r1, #253	; 0xfd
   1f994:	2390      	movs	r3, #144	; 0x90
   1f996:	005b      	lsls	r3, r3, #1
   1f998:	4a1b      	ldr	r2, [pc, #108]	; (1fa08 <Reset_Handler+0xcc>)
   1f99a:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   1f99c:	4a1b      	ldr	r2, [pc, #108]	; (1fa0c <Reset_Handler+0xd0>)
   1f99e:	78d3      	ldrb	r3, [r2, #3]
   1f9a0:	2503      	movs	r5, #3
   1f9a2:	43ab      	bics	r3, r5
   1f9a4:	2402      	movs	r4, #2
   1f9a6:	4323      	orrs	r3, r4
   1f9a8:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   1f9aa:	78d3      	ldrb	r3, [r2, #3]
   1f9ac:	270c      	movs	r7, #12
   1f9ae:	43bb      	bics	r3, r7
   1f9b0:	2608      	movs	r6, #8
   1f9b2:	4333      	orrs	r3, r6
   1f9b4:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
   1f9b6:	4b16      	ldr	r3, [pc, #88]	; (1fa10 <Reset_Handler+0xd4>)
   1f9b8:	7b98      	ldrb	r0, [r3, #14]
   1f9ba:	2230      	movs	r2, #48	; 0x30
   1f9bc:	4390      	bics	r0, r2
   1f9be:	2220      	movs	r2, #32
   1f9c0:	4310      	orrs	r0, r2
   1f9c2:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
   1f9c4:	7b99      	ldrb	r1, [r3, #14]
   1f9c6:	43b9      	bics	r1, r7
   1f9c8:	4331      	orrs	r1, r6
   1f9ca:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
   1f9cc:	7b9a      	ldrb	r2, [r3, #14]
   1f9ce:	43aa      	bics	r2, r5
   1f9d0:	4322      	orrs	r2, r4
   1f9d2:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
   1f9d4:	4a0f      	ldr	r2, [pc, #60]	; (1fa14 <Reset_Handler+0xd8>)
   1f9d6:	6853      	ldr	r3, [r2, #4]
   1f9d8:	2180      	movs	r1, #128	; 0x80
   1f9da:	430b      	orrs	r3, r1
   1f9dc:	6053      	str	r3, [r2, #4]
        __libc_init_array();
   1f9de:	4b0e      	ldr	r3, [pc, #56]	; (1fa18 <Reset_Handler+0xdc>)
   1f9e0:	4798      	blx	r3
        main();
   1f9e2:	4b0e      	ldr	r3, [pc, #56]	; (1fa1c <Reset_Handler+0xe0>)
   1f9e4:	4798      	blx	r3
   1f9e6:	e7fe      	b.n	1f9e6 <Reset_Handler+0xaa>
   1f9e8:	0002bd70 	.word	0x0002bd70
   1f9ec:	20000000 	.word	0x20000000
   1f9f0:	200002b0 	.word	0x200002b0
   1f9f4:	20000004 	.word	0x20000004
   1f9f8:	200002b0 	.word	0x200002b0
   1f9fc:	20005594 	.word	0x20005594
   1fa00:	e000ed00 	.word	0xe000ed00
   1fa04:	00012000 	.word	0x00012000
   1fa08:	41007000 	.word	0x41007000
   1fa0c:	41005000 	.word	0x41005000
   1fa10:	41004800 	.word	0x41004800
   1fa14:	41004000 	.word	0x41004000
   1fa18:	00025c69 	.word	0x00025c69
   1fa1c:	00023dcd 	.word	0x00023dcd

0001fa20 <HardFault_HandlerC>:

void HardFault_HandlerC(unsigned long *hardfault_args) {
   1fa20:	b08e      	sub	sp, #56	; 0x38
	volatile unsigned long _DFSR ;
	volatile unsigned long _AFSR ;
	volatile unsigned long _BFAR ;
	volatile unsigned long _MMAR ;
	
	stacked_r0  = ((unsigned long)hardfault_args[0]) ;
   1fa22:	6803      	ldr	r3, [r0, #0]
   1fa24:	930d      	str	r3, [sp, #52]	; 0x34
	stacked_r1  = ((unsigned long)hardfault_args[1]) ;
   1fa26:	6843      	ldr	r3, [r0, #4]
   1fa28:	930c      	str	r3, [sp, #48]	; 0x30
	stacked_r2  = ((unsigned long)hardfault_args[2]) ;
   1fa2a:	6883      	ldr	r3, [r0, #8]
   1fa2c:	930b      	str	r3, [sp, #44]	; 0x2c
	stacked_r3  = ((unsigned long)hardfault_args[3]) ;
   1fa2e:	68c3      	ldr	r3, [r0, #12]
   1fa30:	930a      	str	r3, [sp, #40]	; 0x28
	stacked_r12 = ((unsigned long)hardfault_args[4]) ;
   1fa32:	6903      	ldr	r3, [r0, #16]
   1fa34:	9309      	str	r3, [sp, #36]	; 0x24
	stacked_lr  = ((unsigned long)hardfault_args[5]) ;
   1fa36:	6943      	ldr	r3, [r0, #20]
   1fa38:	9308      	str	r3, [sp, #32]
	stacked_pc  = ((unsigned long)hardfault_args[6]) ;
   1fa3a:	6983      	ldr	r3, [r0, #24]
   1fa3c:	9307      	str	r3, [sp, #28]
	stacked_psr = ((unsigned long)hardfault_args[7]) ;
   1fa3e:	69c3      	ldr	r3, [r0, #28]
   1fa40:	9306      	str	r3, [sp, #24]
	
	// Configurable Fault Status Register
	// Consists of MMSR, BFSR and UFSR
	_CFSR = (*((volatile unsigned long *)(0xE000ED28))) ;
   1fa42:	4b0a      	ldr	r3, [pc, #40]	; (1fa6c <HardFault_HandlerC+0x4c>)
   1fa44:	681b      	ldr	r3, [r3, #0]
   1fa46:	9305      	str	r3, [sp, #20]
	
	// Hard Fault Status Register
	_HFSR = (*((volatile unsigned long *)(0xE000ED2C))) ;
   1fa48:	4b09      	ldr	r3, [pc, #36]	; (1fa70 <HardFault_HandlerC+0x50>)
   1fa4a:	681b      	ldr	r3, [r3, #0]
   1fa4c:	9304      	str	r3, [sp, #16]
	
	// Debug Fault Status Register
	_DFSR = (*((volatile unsigned long *)(0xE000ED30))) ;
   1fa4e:	4b09      	ldr	r3, [pc, #36]	; (1fa74 <HardFault_HandlerC+0x54>)
   1fa50:	681b      	ldr	r3, [r3, #0]
   1fa52:	9303      	str	r3, [sp, #12]
	
	// Auxiliary Fault Status Register
	_AFSR = (*((volatile unsigned long *)(0xE000ED3C))) ;
   1fa54:	4b08      	ldr	r3, [pc, #32]	; (1fa78 <HardFault_HandlerC+0x58>)
   1fa56:	681b      	ldr	r3, [r3, #0]
   1fa58:	9302      	str	r3, [sp, #8]
	
	// Read the Fault Address Registers. These may not contain valid values.
	// Check BFARVALID/MMARVALID to see if they are valid values
	// MemManage Fault Address Register
	_MMAR = (*((volatile unsigned long *)(0xE000ED34))) ;
   1fa5a:	4b08      	ldr	r3, [pc, #32]	; (1fa7c <HardFault_HandlerC+0x5c>)
   1fa5c:	681b      	ldr	r3, [r3, #0]
   1fa5e:	9300      	str	r3, [sp, #0]
	// Bus Fault Address Register
	_BFAR = (*((volatile unsigned long *)(0xE000ED38))) ;
   1fa60:	4b07      	ldr	r3, [pc, #28]	; (1fa80 <HardFault_HandlerC+0x60>)
   1fa62:	681b      	ldr	r3, [r3, #0]
   1fa64:	9301      	str	r3, [sp, #4]
	
	__asm("BKPT #0\n") ; // Break into the debugger
   1fa66:	be00      	bkpt	0x0000
	#pragma GCC diagnostic pop
   1fa68:	b00e      	add	sp, #56	; 0x38
   1fa6a:	4770      	bx	lr
   1fa6c:	e000ed28 	.word	0xe000ed28
   1fa70:	e000ed2c 	.word	0xe000ed2c
   1fa74:	e000ed30 	.word	0xe000ed30
   1fa78:	e000ed3c 	.word	0xe000ed3c
   1fa7c:	e000ed34 	.word	0xe000ed34
   1fa80:	e000ed38 	.word	0xe000ed38

0001fa84 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   1fa84:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fa86:	46c6      	mov	lr, r8
   1fa88:	b500      	push	{lr}
   1fa8a:	000c      	movs	r4, r1
   1fa8c:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   1fa8e:	2800      	cmp	r0, #0
   1fa90:	d10f      	bne.n	1fab2 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
   1fa92:	2a00      	cmp	r2, #0
   1fa94:	dd11      	ble.n	1faba <_read+0x36>
   1fa96:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   1fa98:	4e09      	ldr	r6, [pc, #36]	; (1fac0 <_read+0x3c>)
   1fa9a:	4d0a      	ldr	r5, [pc, #40]	; (1fac4 <_read+0x40>)
   1fa9c:	6830      	ldr	r0, [r6, #0]
   1fa9e:	0021      	movs	r1, r4
   1faa0:	682b      	ldr	r3, [r5, #0]
   1faa2:	4798      	blx	r3
		ptr++;
   1faa4:	3401      	adds	r4, #1
	for (; len > 0; --len) {
   1faa6:	42bc      	cmp	r4, r7
   1faa8:	d1f8      	bne.n	1fa9c <_read+0x18>
		nChars++;
	}
	return nChars;
}
   1faaa:	4640      	mov	r0, r8
   1faac:	bc04      	pop	{r2}
   1faae:	4690      	mov	r8, r2
   1fab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
   1fab2:	2301      	movs	r3, #1
   1fab4:	425b      	negs	r3, r3
   1fab6:	4698      	mov	r8, r3
   1fab8:	e7f7      	b.n	1faaa <_read+0x26>
	for (; len > 0; --len) {
   1faba:	4680      	mov	r8, r0
   1fabc:	e7f5      	b.n	1faaa <_read+0x26>
   1fabe:	46c0      	nop			; (mov r8, r8)
   1fac0:	20005538 	.word	0x20005538
   1fac4:	20005530 	.word	0x20005530

0001fac8 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
   1fac8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1faca:	46c6      	mov	lr, r8
   1facc:	b500      	push	{lr}
   1face:	000e      	movs	r6, r1
   1fad0:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   1fad2:	3801      	subs	r0, #1
   1fad4:	2802      	cmp	r0, #2
   1fad6:	d810      	bhi.n	1fafa <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
   1fad8:	2a00      	cmp	r2, #0
   1fada:	d011      	beq.n	1fb00 <_write+0x38>
   1fadc:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
   1fade:	4b0c      	ldr	r3, [pc, #48]	; (1fb10 <_write+0x48>)
   1fae0:	4698      	mov	r8, r3
   1fae2:	4f0c      	ldr	r7, [pc, #48]	; (1fb14 <_write+0x4c>)
   1fae4:	4643      	mov	r3, r8
   1fae6:	6818      	ldr	r0, [r3, #0]
   1fae8:	5d31      	ldrb	r1, [r6, r4]
   1faea:	683b      	ldr	r3, [r7, #0]
   1faec:	4798      	blx	r3
   1faee:	2800      	cmp	r0, #0
   1faf0:	db08      	blt.n	1fb04 <_write+0x3c>
			return -1;
		}
		++nChars;
   1faf2:	3401      	adds	r4, #1
	for (; len != 0; --len) {
   1faf4:	42a5      	cmp	r5, r4
   1faf6:	d1f5      	bne.n	1fae4 <_write+0x1c>
   1faf8:	e006      	b.n	1fb08 <_write+0x40>
		return -1;
   1fafa:	2401      	movs	r4, #1
   1fafc:	4264      	negs	r4, r4
   1fafe:	e003      	b.n	1fb08 <_write+0x40>
	for (; len != 0; --len) {
   1fb00:	0014      	movs	r4, r2
   1fb02:	e001      	b.n	1fb08 <_write+0x40>
			return -1;
   1fb04:	2401      	movs	r4, #1
   1fb06:	4264      	negs	r4, r4
	}
	return nChars;
}
   1fb08:	0020      	movs	r0, r4
   1fb0a:	bc04      	pop	{r2}
   1fb0c:	4690      	mov	r8, r2
   1fb0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1fb10:	20005538 	.word	0x20005538
   1fb14:	20005534 	.word	0x20005534

0001fb18 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   1fb18:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   1fb1a:	4a06      	ldr	r2, [pc, #24]	; (1fb34 <_sbrk+0x1c>)
   1fb1c:	6812      	ldr	r2, [r2, #0]
   1fb1e:	2a00      	cmp	r2, #0
   1fb20:	d004      	beq.n	1fb2c <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   1fb22:	4a04      	ldr	r2, [pc, #16]	; (1fb34 <_sbrk+0x1c>)
   1fb24:	6810      	ldr	r0, [r2, #0]

	heap += incr;
   1fb26:	18c3      	adds	r3, r0, r3
   1fb28:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
   1fb2a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   1fb2c:	4902      	ldr	r1, [pc, #8]	; (1fb38 <_sbrk+0x20>)
   1fb2e:	4a01      	ldr	r2, [pc, #4]	; (1fb34 <_sbrk+0x1c>)
   1fb30:	6011      	str	r1, [r2, #0]
   1fb32:	e7f6      	b.n	1fb22 <_sbrk+0xa>
   1fb34:	20003cf8 	.word	0x20003cf8
   1fb38:	20007598 	.word	0x20007598

0001fb3c <_close>:
}

extern int _close(int file)
{
	return -1;
}
   1fb3c:	2001      	movs	r0, #1
   1fb3e:	4240      	negs	r0, r0
   1fb40:	4770      	bx	lr

0001fb42 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   1fb42:	2380      	movs	r3, #128	; 0x80
   1fb44:	019b      	lsls	r3, r3, #6
   1fb46:	604b      	str	r3, [r1, #4]

	return 0;
}
   1fb48:	2000      	movs	r0, #0
   1fb4a:	4770      	bx	lr

0001fb4c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   1fb4c:	2001      	movs	r0, #1
   1fb4e:	4770      	bx	lr

0001fb50 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   1fb50:	2000      	movs	r0, #0
   1fb52:	4770      	bx	lr

0001fb54 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
   1fb54:	b530      	push	{r4, r5, lr}
   1fb56:	b087      	sub	sp, #28
   1fb58:	0004      	movs	r4, r0
	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
   1fb5a:	aa01      	add	r2, sp, #4
   1fb5c:	23a0      	movs	r3, #160	; 0xa0
   1fb5e:	011b      	lsls	r3, r3, #4
   1fb60:	8013      	strh	r3, [r2, #0]
	config->clear_on_match      = false;
   1fb62:	2300      	movs	r3, #0
   1fb64:	7093      	strb	r3, [r2, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
   1fb66:	70d3      	strb	r3, [r2, #3]
#endif
	config->clock_24h           = false;
	config->year_init_value     = 2000;
   1fb68:	21fa      	movs	r1, #250	; 0xfa
   1fb6a:	00c9      	lsls	r1, r1, #3
   1fb6c:	80d1      	strh	r1, [r2, #6]
	config_rtc_calendar.clock_24h     = true;
   1fb6e:	2101      	movs	r1, #1
   1fb70:	7111      	strb	r1, [r2, #4]
	config_rtc_calendar.alarm[0].time = init_time;
   1fb72:	2004      	movs	r0, #4
   1fb74:	7210      	strb	r0, [r2, #8]
   1fb76:	7253      	strb	r3, [r2, #9]
   1fb78:	7293      	strb	r3, [r2, #10]
   1fb7a:	72d3      	strb	r3, [r2, #11]
   1fb7c:	7311      	strb	r1, [r2, #12]
   1fb7e:	7351      	strb	r1, [r2, #13]
   1fb80:	4b14      	ldr	r3, [pc, #80]	; (1fbd4 <disk_initialize+0x80>)
   1fb82:	81d3      	strh	r3, [r2, #14]
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   1fb84:	2306      	movs	r3, #6
   1fb86:	7413      	strb	r3, [r2, #16]
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
   1fb88:	4d13      	ldr	r5, [pc, #76]	; (1fbd8 <disk_initialize+0x84>)
   1fb8a:	4914      	ldr	r1, [pc, #80]	; (1fbdc <disk_initialize+0x88>)
   1fb8c:	0028      	movs	r0, r5
   1fb8e:	4b14      	ldr	r3, [pc, #80]	; (1fbe0 <disk_initialize+0x8c>)
   1fb90:	4798      	blx	r3
	rtc_calendar_enable(&rtc_instance);
   1fb92:	0028      	movs	r0, r5
   1fb94:	4b13      	ldr	r3, [pc, #76]	; (1fbe4 <disk_initialize+0x90>)
   1fb96:	4798      	blx	r3
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
   1fb98:	2001      	movs	r0, #1
	if (drv > MAX_LUN) {
   1fb9a:	2c01      	cmp	r4, #1
   1fb9c:	d901      	bls.n	1fba2 <disk_initialize+0x4e>
		return STA_PROTECT;
	}

	/* The memory should already be initialized */
	return 0;
}
   1fb9e:	b007      	add	sp, #28
   1fba0:	bd30      	pop	{r4, r5, pc}
		mem_status = mem_test_unit_ready(drv);
   1fba2:	0020      	movs	r0, r4
   1fba4:	4b10      	ldr	r3, [pc, #64]	; (1fbe8 <disk_initialize+0x94>)
   1fba6:	4798      	blx	r3
   1fba8:	0003      	movs	r3, r0
		if (CTRL_BUSY != mem_status) {
   1fbaa:	2803      	cmp	r0, #3
   1fbac:	d106      	bne.n	1fbbc <disk_initialize+0x68>
		mem_status = mem_test_unit_ready(drv);
   1fbae:	0020      	movs	r0, r4
   1fbb0:	4b0d      	ldr	r3, [pc, #52]	; (1fbe8 <disk_initialize+0x94>)
   1fbb2:	4798      	blx	r3
   1fbb4:	0003      	movs	r3, r0
		return STA_NOINIT;
   1fbb6:	2001      	movs	r0, #1
		if (CTRL_BUSY != mem_status) {
   1fbb8:	2b03      	cmp	r3, #3
   1fbba:	d0f0      	beq.n	1fb9e <disk_initialize+0x4a>
	if (mem_status != CTRL_GOOD) {
   1fbbc:	2b00      	cmp	r3, #0
   1fbbe:	d106      	bne.n	1fbce <disk_initialize+0x7a>
	if (mem_wr_protect(drv)) {
   1fbc0:	0020      	movs	r0, r4
   1fbc2:	4b0a      	ldr	r3, [pc, #40]	; (1fbec <disk_initialize+0x98>)
   1fbc4:	4798      	blx	r3
	return 0;
   1fbc6:	1e43      	subs	r3, r0, #1
   1fbc8:	4198      	sbcs	r0, r3
   1fbca:	0080      	lsls	r0, r0, #2
   1fbcc:	e7e7      	b.n	1fb9e <disk_initialize+0x4a>
		return STA_NOINIT;
   1fbce:	2001      	movs	r0, #1
   1fbd0:	e7e5      	b.n	1fb9e <disk_initialize+0x4a>
   1fbd2:	46c0      	nop			; (mov r8, r8)
   1fbd4:	000007de 	.word	0x000007de
   1fbd8:	2000553c 	.word	0x2000553c
   1fbdc:	40001400 	.word	0x40001400
   1fbe0:	0001d985 	.word	0x0001d985
   1fbe4:	0001d821 	.word	0x0001d821
   1fbe8:	0001d4f1 	.word	0x0001d4f1
   1fbec:	0001d52d 	.word	0x0001d52d

0001fbf0 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
   1fbf0:	b510      	push	{r4, lr}
	switch (mem_test_unit_ready(drv)) {
   1fbf2:	4b05      	ldr	r3, [pc, #20]	; (1fc08 <disk_status+0x18>)
   1fbf4:	4798      	blx	r3
   1fbf6:	1e03      	subs	r3, r0, #0
   1fbf8:	d004      	beq.n	1fc04 <disk_status+0x14>
	case CTRL_GOOD:
		return 0;
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
   1fbfa:	2003      	movs	r0, #3
	switch (mem_test_unit_ready(drv)) {
   1fbfc:	2b02      	cmp	r3, #2
   1fbfe:	d000      	beq.n	1fc02 <disk_status+0x12>
	default:
		return STA_NOINIT;
   1fc00:	3802      	subs	r0, #2
	}
}
   1fc02:	bd10      	pop	{r4, pc}
		return 0;
   1fc04:	2000      	movs	r0, #0
   1fc06:	e7fc      	b.n	1fc02 <disk_status+0x12>
   1fc08:	0001d4f1 	.word	0x0001d4f1

0001fc0c <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
   1fc0c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fc0e:	46de      	mov	lr, fp
   1fc10:	464f      	mov	r7, r9
   1fc12:	4646      	mov	r6, r8
   1fc14:	b5c0      	push	{r6, r7, lr}
   1fc16:	b084      	sub	sp, #16
   1fc18:	9001      	str	r0, [sp, #4]
   1fc1a:	000d      	movs	r5, r1
   1fc1c:	0014      	movs	r4, r2
   1fc1e:	001f      	movs	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   1fc20:	4b18      	ldr	r3, [pc, #96]	; (1fc84 <disk_read+0x78>)
   1fc22:	4798      	blx	r3
   1fc24:	0006      	movs	r6, r0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
   1fc26:	2001      	movs	r0, #1
	if (uc_sector_size == 0) {
   1fc28:	2e00      	cmp	r6, #0
   1fc2a:	d105      	bne.n	1fc38 <disk_read+0x2c>
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
   1fc2c:	b004      	add	sp, #16
   1fc2e:	bc1c      	pop	{r2, r3, r4}
   1fc30:	4690      	mov	r8, r2
   1fc32:	4699      	mov	r9, r3
   1fc34:	46a3      	mov	fp, r4
   1fc36:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
   1fc38:	a903      	add	r1, sp, #12
   1fc3a:	9801      	ldr	r0, [sp, #4]
   1fc3c:	4b12      	ldr	r3, [pc, #72]	; (1fc88 <disk_read+0x7c>)
   1fc3e:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   1fc40:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
   1fc42:	0032      	movs	r2, r6
   1fc44:	437a      	muls	r2, r7
   1fc46:	1912      	adds	r2, r2, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
   1fc48:	9b03      	ldr	r3, [sp, #12]
   1fc4a:	3301      	adds	r3, #1
   1fc4c:	4373      	muls	r3, r6
		return RES_PARERR;
   1fc4e:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
   1fc50:	429a      	cmp	r2, r3
   1fc52:	d8eb      	bhi.n	1fc2c <disk_read+0x20>
	for (i = 0; i < count; i++) {
   1fc54:	2f00      	cmp	r7, #0
   1fc56:	d011      	beq.n	1fc7c <disk_read+0x70>
   1fc58:	0273      	lsls	r3, r6, #9
   1fc5a:	4698      	mov	r8, r3
   1fc5c:	1c7b      	adds	r3, r7, #1
   1fc5e:	469b      	mov	fp, r3
   1fc60:	2701      	movs	r7, #1
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   1fc62:	4e0a      	ldr	r6, [pc, #40]	; (1fc8c <disk_read+0x80>)
   1fc64:	002a      	movs	r2, r5
   1fc66:	0021      	movs	r1, r4
   1fc68:	9801      	ldr	r0, [sp, #4]
   1fc6a:	47b0      	blx	r6
   1fc6c:	2800      	cmp	r0, #0
   1fc6e:	d107      	bne.n	1fc80 <disk_read+0x74>
   1fc70:	3701      	adds	r7, #1
   1fc72:	444c      	add	r4, r9
   1fc74:	4445      	add	r5, r8
	for (i = 0; i < count; i++) {
   1fc76:	455f      	cmp	r7, fp
   1fc78:	d1f4      	bne.n	1fc64 <disk_read+0x58>
   1fc7a:	e7d7      	b.n	1fc2c <disk_read+0x20>
	return RES_OK;
   1fc7c:	2000      	movs	r0, #0
   1fc7e:	e7d5      	b.n	1fc2c <disk_read+0x20>
			return RES_ERROR;
   1fc80:	2001      	movs	r0, #1
   1fc82:	e7d3      	b.n	1fc2c <disk_read+0x20>
   1fc84:	0001d525 	.word	0x0001d525
   1fc88:	0001d509 	.word	0x0001d509
   1fc8c:	0001d545 	.word	0x0001d545

0001fc90 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
   1fc90:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fc92:	46de      	mov	lr, fp
   1fc94:	464f      	mov	r7, r9
   1fc96:	4646      	mov	r6, r8
   1fc98:	b5c0      	push	{r6, r7, lr}
   1fc9a:	b084      	sub	sp, #16
   1fc9c:	9001      	str	r0, [sp, #4]
   1fc9e:	000d      	movs	r5, r1
   1fca0:	0014      	movs	r4, r2
   1fca2:	001f      	movs	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   1fca4:	4b18      	ldr	r3, [pc, #96]	; (1fd08 <disk_write+0x78>)
   1fca6:	4798      	blx	r3
   1fca8:	0006      	movs	r6, r0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
   1fcaa:	2001      	movs	r0, #1
	if (uc_sector_size == 0) {
   1fcac:	2e00      	cmp	r6, #0
   1fcae:	d105      	bne.n	1fcbc <disk_write+0x2c>
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
   1fcb0:	b004      	add	sp, #16
   1fcb2:	bc1c      	pop	{r2, r3, r4}
   1fcb4:	4690      	mov	r8, r2
   1fcb6:	4699      	mov	r9, r3
   1fcb8:	46a3      	mov	fp, r4
   1fcba:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
   1fcbc:	a903      	add	r1, sp, #12
   1fcbe:	9801      	ldr	r0, [sp, #4]
   1fcc0:	4b12      	ldr	r3, [pc, #72]	; (1fd0c <disk_write+0x7c>)
   1fcc2:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   1fcc4:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
   1fcc6:	0032      	movs	r2, r6
   1fcc8:	437a      	muls	r2, r7
   1fcca:	1912      	adds	r2, r2, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
   1fccc:	9b03      	ldr	r3, [sp, #12]
   1fcce:	3301      	adds	r3, #1
   1fcd0:	4373      	muls	r3, r6
		return RES_PARERR;
   1fcd2:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
   1fcd4:	429a      	cmp	r2, r3
   1fcd6:	d8eb      	bhi.n	1fcb0 <disk_write+0x20>
	for (i = 0; i < count; i++) {
   1fcd8:	2f00      	cmp	r7, #0
   1fcda:	d011      	beq.n	1fd00 <disk_write+0x70>
   1fcdc:	0273      	lsls	r3, r6, #9
   1fcde:	4698      	mov	r8, r3
   1fce0:	1c7b      	adds	r3, r7, #1
   1fce2:	469b      	mov	fp, r3
   1fce4:	2701      	movs	r7, #1
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   1fce6:	4e0a      	ldr	r6, [pc, #40]	; (1fd10 <disk_write+0x80>)
   1fce8:	002a      	movs	r2, r5
   1fcea:	0021      	movs	r1, r4
   1fcec:	9801      	ldr	r0, [sp, #4]
   1fcee:	47b0      	blx	r6
   1fcf0:	2800      	cmp	r0, #0
   1fcf2:	d107      	bne.n	1fd04 <disk_write+0x74>
   1fcf4:	3701      	adds	r7, #1
   1fcf6:	444c      	add	r4, r9
   1fcf8:	4445      	add	r5, r8
	for (i = 0; i < count; i++) {
   1fcfa:	455f      	cmp	r7, fp
   1fcfc:	d1f4      	bne.n	1fce8 <disk_write+0x58>
   1fcfe:	e7d7      	b.n	1fcb0 <disk_write+0x20>
	return RES_OK;
   1fd00:	2000      	movs	r0, #0
   1fd02:	e7d5      	b.n	1fcb0 <disk_write+0x20>
			return RES_ERROR;
   1fd04:	2001      	movs	r0, #1
   1fd06:	e7d3      	b.n	1fcb0 <disk_write+0x20>
   1fd08:	0001d525 	.word	0x0001d525
   1fd0c:	0001d509 	.word	0x0001d509
   1fd10:	0001d565 	.word	0x0001d565

0001fd14 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
   1fd14:	b510      	push	{r4, lr}
   1fd16:	b082      	sub	sp, #8
   1fd18:	0014      	movs	r4, r2
	DRESULT res = RES_PARERR;

	switch (ctrl) {
   1fd1a:	2901      	cmp	r1, #1
   1fd1c:	d00b      	beq.n	1fd36 <disk_ioctl+0x22>
   1fd1e:	2900      	cmp	r1, #0
   1fd20:	d020      	beq.n	1fd64 <disk_ioctl+0x50>
   1fd22:	2902      	cmp	r1, #2
   1fd24:	d00f      	beq.n	1fd46 <disk_ioctl+0x32>
			res = RES_NOTRDY;
		}
		break;

	default:
		res = RES_PARERR;
   1fd26:	2004      	movs	r0, #4
	switch (ctrl) {
   1fd28:	2903      	cmp	r1, #3
   1fd2a:	d102      	bne.n	1fd32 <disk_ioctl+0x1e>
		*(DWORD *)buff = 1;
   1fd2c:	2301      	movs	r3, #1
   1fd2e:	6013      	str	r3, [r2, #0]
		res = RES_OK;
   1fd30:	2000      	movs	r0, #0
	}

	return res;
}
   1fd32:	b002      	add	sp, #8
   1fd34:	bd10      	pop	{r4, pc}
		mem_read_capacity(drv, &ul_last_sector_num);
   1fd36:	a901      	add	r1, sp, #4
   1fd38:	4b0e      	ldr	r3, [pc, #56]	; (1fd74 <disk_ioctl+0x60>)
   1fd3a:	4798      	blx	r3
		*(DWORD *)buff = ul_last_sector_num + 1;
   1fd3c:	9b01      	ldr	r3, [sp, #4]
   1fd3e:	3301      	adds	r3, #1
   1fd40:	6023      	str	r3, [r4, #0]
		res = RES_OK;
   1fd42:	2000      	movs	r0, #0
	break;
   1fd44:	e7f5      	b.n	1fd32 <disk_ioctl+0x1e>
		uint8_t uc_sector_size = mem_sector_size(drv);
   1fd46:	4b0c      	ldr	r3, [pc, #48]	; (1fd78 <disk_ioctl+0x64>)
   1fd48:	4798      	blx	r3
		if ((uc_sector_size != SECTOR_SIZE_512) &&
   1fd4a:	1e43      	subs	r3, r0, #1
   1fd4c:	b2db      	uxtb	r3, r3
   1fd4e:	2b01      	cmp	r3, #1
   1fd50:	d904      	bls.n	1fd5c <disk_ioctl+0x48>
				(uc_sector_size != SECTOR_SIZE_1024) &&
   1fd52:	1f03      	subs	r3, r0, #4
   1fd54:	22fb      	movs	r2, #251	; 0xfb
			return RES_ERROR;
   1fd56:	2001      	movs	r0, #1
				(uc_sector_size != SECTOR_SIZE_1024) &&
   1fd58:	4213      	tst	r3, r2
   1fd5a:	d1ea      	bne.n	1fd32 <disk_ioctl+0x1e>
		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
   1fd5c:	2300      	movs	r3, #0
   1fd5e:	7023      	strb	r3, [r4, #0]
		res = RES_OK;
   1fd60:	2000      	movs	r0, #0
	break;
   1fd62:	e7e6      	b.n	1fd32 <disk_ioctl+0x1e>
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
   1fd64:	4b05      	ldr	r3, [pc, #20]	; (1fd7c <disk_ioctl+0x68>)
   1fd66:	4798      	blx	r3
   1fd68:	2800      	cmp	r0, #0
   1fd6a:	d001      	beq.n	1fd70 <disk_ioctl+0x5c>
			res = RES_NOTRDY;
   1fd6c:	2003      	movs	r0, #3
   1fd6e:	e7e0      	b.n	1fd32 <disk_ioctl+0x1e>
			res = RES_OK;
   1fd70:	2000      	movs	r0, #0
   1fd72:	e7de      	b.n	1fd32 <disk_ioctl+0x1e>
   1fd74:	0001d509 	.word	0x0001d509
   1fd78:	0001d525 	.word	0x0001d525
   1fd7c:	0001d4f1 	.word	0x0001d4f1

0001fd80 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
   1fd80:	b500      	push	{lr}
   1fd82:	b083      	sub	sp, #12
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
   1fd84:	4669      	mov	r1, sp
   1fd86:	480f      	ldr	r0, [pc, #60]	; (1fdc4 <get_fattime+0x44>)
   1fd88:	4b0f      	ldr	r3, [pc, #60]	; (1fdc8 <get_fattime+0x48>)
   1fd8a:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
			| (current_time.month << 21)
   1fd8c:	466b      	mov	r3, sp
   1fd8e:	7958      	ldrb	r0, [r3, #5]
   1fd90:	0540      	lsls	r0, r0, #21
			| (current_time.day << 16)
   1fd92:	791b      	ldrb	r3, [r3, #4]
   1fd94:	041b      	lsls	r3, r3, #16
			| (current_time.hour << 11)
			| (current_time.minute << 5)
			| ((current_time.second >> 1) << 0);
   1fd96:	4318      	orrs	r0, r3
			| (current_time.hour << 11)
   1fd98:	466b      	mov	r3, sp
   1fd9a:	789b      	ldrb	r3, [r3, #2]
   1fd9c:	02db      	lsls	r3, r3, #11
			| ((current_time.second >> 1) << 0);
   1fd9e:	4318      	orrs	r0, r3
			| (current_time.minute << 5)
   1fda0:	466b      	mov	r3, sp
   1fda2:	785b      	ldrb	r3, [r3, #1]
   1fda4:	015b      	lsls	r3, r3, #5
			| ((current_time.second >> 1) << 0);
   1fda6:	4318      	orrs	r0, r3
   1fda8:	466b      	mov	r3, sp
   1fdaa:	781b      	ldrb	r3, [r3, #0]
   1fdac:	085b      	lsrs	r3, r3, #1
   1fdae:	4318      	orrs	r0, r3
	ul_time = ((current_time.year - 1980) << 25)
   1fdb0:	466b      	mov	r3, sp
   1fdb2:	88db      	ldrh	r3, [r3, #6]
   1fdb4:	4a05      	ldr	r2, [pc, #20]	; (1fdcc <get_fattime+0x4c>)
   1fdb6:	4694      	mov	ip, r2
   1fdb8:	4463      	add	r3, ip
   1fdba:	065b      	lsls	r3, r3, #25
			| ((current_time.second >> 1) << 0);
   1fdbc:	4318      	orrs	r0, r3

	return ul_time;
}
   1fdbe:	b003      	add	sp, #12
   1fdc0:	bd00      	pop	{pc}
   1fdc2:	46c0      	nop			; (mov r8, r8)
   1fdc4:	2000553c 	.word	0x2000553c
   1fdc8:	0001d90d 	.word	0x0001d90d
   1fdcc:	fffff844 	.word	0xfffff844

0001fdd0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
   1fdd0:	b510      	push	{r4, lr}
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
   1fdd2:	2a00      	cmp	r2, #0
   1fdd4:	d005      	beq.n	1fde2 <mem_cpy+0x12>
   1fdd6:	2300      	movs	r3, #0
		*d++ = *s++;
   1fdd8:	5ccc      	ldrb	r4, [r1, r3]
   1fdda:	54c4      	strb	r4, [r0, r3]
   1fddc:	3301      	adds	r3, #1
	while (cnt--)
   1fdde:	4293      	cmp	r3, r2
   1fde0:	d1fa      	bne.n	1fdd8 <mem_cpy+0x8>
}
   1fde2:	bd10      	pop	{r4, pc}

0001fde4 <mem_set>:
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
   1fde4:	2a00      	cmp	r2, #0
   1fde6:	d005      	beq.n	1fdf4 <mem_set+0x10>
   1fde8:	0003      	movs	r3, r0
   1fdea:	1882      	adds	r2, r0, r2
		*d++ = (BYTE)val;
   1fdec:	7019      	strb	r1, [r3, #0]
   1fdee:	3301      	adds	r3, #1
	while (cnt--)
   1fdf0:	4293      	cmp	r3, r2
   1fdf2:	d1fb      	bne.n	1fdec <mem_set+0x8>
}
   1fdf4:	4770      	bx	lr

0001fdf6 <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
   1fdf6:	0002      	movs	r2, r0
	clst -= 2;
   1fdf8:	3902      	subs	r1, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   1fdfa:	6983      	ldr	r3, [r0, #24]
   1fdfc:	3b02      	subs	r3, #2
   1fdfe:	2000      	movs	r0, #0
   1fe00:	4299      	cmp	r1, r3
   1fe02:	d203      	bcs.n	1fe0c <clust2sect+0x16>
	return clst * fs->csize + fs->database;
   1fe04:	7890      	ldrb	r0, [r2, #2]
   1fe06:	4341      	muls	r1, r0
   1fe08:	6a90      	ldr	r0, [r2, #40]	; 0x28
   1fe0a:	1808      	adds	r0, r1, r0
}
   1fe0c:	4770      	bx	lr

0001fe0e <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
   1fe0e:	0002      	movs	r2, r0
   1fe10:	0001      	movs	r1, r0
   1fe12:	310b      	adds	r1, #11
	BYTE sum = 0;
   1fe14:	2000      	movs	r0, #0
	UINT n = 11;

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
   1fe16:	0843      	lsrs	r3, r0, #1
   1fe18:	01c0      	lsls	r0, r0, #7
   1fe1a:	4303      	orrs	r3, r0
   1fe1c:	7810      	ldrb	r0, [r2, #0]
   1fe1e:	1818      	adds	r0, r3, r0
   1fe20:	b2c0      	uxtb	r0, r0
   1fe22:	3201      	adds	r2, #1
   1fe24:	428a      	cmp	r2, r1
   1fe26:	d1f6      	bne.n	1fe16 <sum_sfn+0x8>
	return sum;
}
   1fe28:	4770      	bx	lr
	...

0001fe2c <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
   1fe2c:	b510      	push	{r4, lr}
	if (!fs || !fs->fs_type || fs->id != id)
   1fe2e:	2800      	cmp	r0, #0
   1fe30:	d010      	beq.n	1fe54 <validate+0x28>
   1fe32:	7802      	ldrb	r2, [r0, #0]
		return FR_INVALID_OBJECT;
   1fe34:	2309      	movs	r3, #9
	if (!fs || !fs->fs_type || fs->id != id)
   1fe36:	2a00      	cmp	r2, #0
   1fe38:	d101      	bne.n	1fe3e <validate+0x12>

	if (disk_status(fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
}
   1fe3a:	0018      	movs	r0, r3
   1fe3c:	bd10      	pop	{r4, pc}
	if (!fs || !fs->fs_type || fs->id != id)
   1fe3e:	88c2      	ldrh	r2, [r0, #6]
   1fe40:	428a      	cmp	r2, r1
   1fe42:	d1fa      	bne.n	1fe3a <validate+0xe>
	if (disk_status(fs->drv) & STA_NOINIT)
   1fe44:	7840      	ldrb	r0, [r0, #1]
   1fe46:	4b04      	ldr	r3, [pc, #16]	; (1fe58 <validate+0x2c>)
   1fe48:	4798      	blx	r3
		return FR_NOT_READY;
   1fe4a:	2303      	movs	r3, #3
	return FR_OK;
   1fe4c:	07c0      	lsls	r0, r0, #31
   1fe4e:	17c0      	asrs	r0, r0, #31
   1fe50:	4003      	ands	r3, r0
   1fe52:	e7f2      	b.n	1fe3a <validate+0xe>
		return FR_INVALID_OBJECT;
   1fe54:	2309      	movs	r3, #9
   1fe56:	e7f0      	b.n	1fe3a <validate+0xe>
   1fe58:	0001fbf1 	.word	0x0001fbf1

0001fe5c <check_fs>:
{
   1fe5c:	b570      	push	{r4, r5, r6, lr}
   1fe5e:	0004      	movs	r4, r0
   1fe60:	000a      	movs	r2, r1
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   1fe62:	0001      	movs	r1, r0
   1fe64:	3130      	adds	r1, #48	; 0x30
   1fe66:	7840      	ldrb	r0, [r0, #1]
   1fe68:	2301      	movs	r3, #1
   1fe6a:	4d1f      	ldr	r5, [pc, #124]	; (1fee8 <check_fs+0x8c>)
   1fe6c:	47a8      	blx	r5
		return 3;
   1fe6e:	2303      	movs	r3, #3
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   1fe70:	2800      	cmp	r0, #0
   1fe72:	d001      	beq.n	1fe78 <check_fs+0x1c>
}
   1fe74:	0018      	movs	r0, r3
   1fe76:	bd70      	pop	{r4, r5, r6, pc}
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
   1fe78:	4b1c      	ldr	r3, [pc, #112]	; (1feec <check_fs+0x90>)
   1fe7a:	5ce3      	ldrb	r3, [r4, r3]
   1fe7c:	021b      	lsls	r3, r3, #8
   1fe7e:	4a1c      	ldr	r2, [pc, #112]	; (1fef0 <check_fs+0x94>)
   1fe80:	5ca2      	ldrb	r2, [r4, r2]
   1fe82:	431a      	orrs	r2, r3
   1fe84:	491b      	ldr	r1, [pc, #108]	; (1fef4 <check_fs+0x98>)
   1fe86:	b212      	sxth	r2, r2
		return 2;
   1fe88:	2302      	movs	r3, #2
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
   1fe8a:	428a      	cmp	r2, r1
   1fe8c:	d1f2      	bne.n	1fe74 <check_fs+0x18>
	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
   1fe8e:	3367      	adds	r3, #103	; 0x67
   1fe90:	5ce3      	ldrb	r3, [r4, r3]
   1fe92:	061b      	lsls	r3, r3, #24
   1fe94:	2268      	movs	r2, #104	; 0x68
   1fe96:	5ca2      	ldrb	r2, [r4, r2]
   1fe98:	0412      	lsls	r2, r2, #16
   1fe9a:	4313      	orrs	r3, r2
   1fe9c:	2266      	movs	r2, #102	; 0x66
   1fe9e:	5ca2      	ldrb	r2, [r4, r2]
   1fea0:	4313      	orrs	r3, r2
   1fea2:	2267      	movs	r2, #103	; 0x67
   1fea4:	5ca2      	ldrb	r2, [r4, r2]
   1fea6:	0212      	lsls	r2, r2, #8
   1fea8:	4313      	orrs	r3, r2
   1feaa:	021b      	lsls	r3, r3, #8
   1feac:	0a1b      	lsrs	r3, r3, #8
   1feae:	4a12      	ldr	r2, [pc, #72]	; (1fef8 <check_fs+0x9c>)
   1feb0:	4293      	cmp	r3, r2
   1feb2:	d016      	beq.n	1fee2 <check_fs+0x86>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
   1feb4:	2385      	movs	r3, #133	; 0x85
   1feb6:	5ce3      	ldrb	r3, [r4, r3]
   1feb8:	061b      	lsls	r3, r3, #24
   1feba:	2284      	movs	r2, #132	; 0x84
   1febc:	5ca2      	ldrb	r2, [r4, r2]
   1febe:	0412      	lsls	r2, r2, #16
   1fec0:	4313      	orrs	r3, r2
   1fec2:	2282      	movs	r2, #130	; 0x82
   1fec4:	5ca2      	ldrb	r2, [r4, r2]
   1fec6:	4313      	orrs	r3, r2
   1fec8:	2283      	movs	r2, #131	; 0x83
   1feca:	5ca2      	ldrb	r2, [r4, r2]
   1fecc:	0212      	lsls	r2, r2, #8
   1fece:	4313      	orrs	r3, r2
   1fed0:	021b      	lsls	r3, r3, #8
   1fed2:	0a1b      	lsrs	r3, r3, #8
   1fed4:	4a09      	ldr	r2, [pc, #36]	; (1fefc <check_fs+0xa0>)
   1fed6:	4694      	mov	ip, r2
   1fed8:	4463      	add	r3, ip
   1feda:	1e58      	subs	r0, r3, #1
   1fedc:	4183      	sbcs	r3, r0
		return 3;
   1fede:	b2db      	uxtb	r3, r3
   1fee0:	e7c8      	b.n	1fe74 <check_fs+0x18>
		return 0;
   1fee2:	2300      	movs	r3, #0
   1fee4:	e7c6      	b.n	1fe74 <check_fs+0x18>
   1fee6:	46c0      	nop			; (mov r8, r8)
   1fee8:	0001fc0d 	.word	0x0001fc0d
   1feec:	0000022f 	.word	0x0000022f
   1fef0:	0000022e 	.word	0x0000022e
   1fef4:	ffffaa55 	.word	0xffffaa55
   1fef8:	00544146 	.word	0x00544146
   1fefc:	ffabbeba 	.word	0xffabbeba

0001ff00 <chk_mounted>:
{
   1ff00:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ff02:	46d6      	mov	lr, sl
   1ff04:	464f      	mov	r7, r9
   1ff06:	4646      	mov	r6, r8
   1ff08:	b5c0      	push	{r6, r7, lr}
   1ff0a:	0015      	movs	r5, r2
	const TCHAR *p = *path;
   1ff0c:	6803      	ldr	r3, [r0, #0]
	vol = p[0] - '0';					/* Is there a drive number? */
   1ff0e:	781c      	ldrb	r4, [r3, #0]
   1ff10:	3c30      	subs	r4, #48	; 0x30
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
   1ff12:	2c09      	cmp	r4, #9
   1ff14:	d80e      	bhi.n	1ff34 <chk_mounted+0x34>
   1ff16:	785a      	ldrb	r2, [r3, #1]
   1ff18:	2a3a      	cmp	r2, #58	; 0x3a
   1ff1a:	d001      	beq.n	1ff20 <chk_mounted+0x20>
   1ff1c:	2400      	movs	r4, #0
   1ff1e:	e00a      	b.n	1ff36 <chk_mounted+0x36>
		p += 2; *path = p;				/* Return pointer to the path name */
   1ff20:	3302      	adds	r3, #2
   1ff22:	6003      	str	r3, [r0, #0]
		return FR_INVALID_DRIVE;
   1ff24:	200b      	movs	r0, #11
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
   1ff26:	2c07      	cmp	r4, #7
   1ff28:	d905      	bls.n	1ff36 <chk_mounted+0x36>
}
   1ff2a:	bc1c      	pop	{r2, r3, r4}
   1ff2c:	4690      	mov	r8, r2
   1ff2e:	4699      	mov	r9, r3
   1ff30:	46a2      	mov	sl, r4
   1ff32:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ff34:	2400      	movs	r4, #0
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
   1ff36:	00a3      	lsls	r3, r4, #2
   1ff38:	4ac5      	ldr	r2, [pc, #788]	; (20250 <chk_mounted+0x350>)
   1ff3a:	589e      	ldr	r6, [r3, r2]
   1ff3c:	600e      	str	r6, [r1, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
   1ff3e:	2e00      	cmp	r6, #0
   1ff40:	d100      	bne.n	1ff44 <chk_mounted+0x44>
   1ff42:	e0e8      	b.n	20116 <chk_mounted+0x216>
	if (fs->fs_type) {					/* If the logical drive has been mounted */
   1ff44:	7833      	ldrb	r3, [r6, #0]
   1ff46:	2b00      	cmp	r3, #0
   1ff48:	d00d      	beq.n	1ff66 <chk_mounted+0x66>
		stat = disk_status(fs->drv);
   1ff4a:	7870      	ldrb	r0, [r6, #1]
   1ff4c:	4bc1      	ldr	r3, [pc, #772]	; (20254 <chk_mounted+0x354>)
   1ff4e:	4798      	blx	r3
   1ff50:	0003      	movs	r3, r0
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
   1ff52:	07c2      	lsls	r2, r0, #31
   1ff54:	d407      	bmi.n	1ff66 <chk_mounted+0x66>
			return FR_OK;				/* The file system object is valid */
   1ff56:	2000      	movs	r0, #0
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
   1ff58:	2d00      	cmp	r5, #0
   1ff5a:	d0e6      	beq.n	1ff2a <chk_mounted+0x2a>
   1ff5c:	075b      	lsls	r3, r3, #29
   1ff5e:	d400      	bmi.n	1ff62 <chk_mounted+0x62>
   1ff60:	e0db      	b.n	2011a <chk_mounted+0x21a>
				return FR_WRITE_PROTECTED;
   1ff62:	300a      	adds	r0, #10
   1ff64:	e7e1      	b.n	1ff2a <chk_mounted+0x2a>
	fs->fs_type = 0;					/* Clear the file system object */
   1ff66:	2300      	movs	r3, #0
   1ff68:	7033      	strb	r3, [r6, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
   1ff6a:	b2e0      	uxtb	r0, r4
   1ff6c:	7070      	strb	r0, [r6, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
   1ff6e:	4bba      	ldr	r3, [pc, #744]	; (20258 <chk_mounted+0x358>)
   1ff70:	4798      	blx	r3
   1ff72:	0003      	movs	r3, r0
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
   1ff74:	2003      	movs	r0, #3
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
   1ff76:	07da      	lsls	r2, r3, #31
   1ff78:	d4d7      	bmi.n	1ff2a <chk_mounted+0x2a>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
   1ff7a:	2d00      	cmp	r5, #0
   1ff7c:	d002      	beq.n	1ff84 <chk_mounted+0x84>
		return FR_WRITE_PROTECTED;
   1ff7e:	3007      	adds	r0, #7
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
   1ff80:	075b      	lsls	r3, r3, #29
   1ff82:	d4d2      	bmi.n	1ff2a <chk_mounted+0x2a>
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
   1ff84:	2100      	movs	r1, #0
   1ff86:	0030      	movs	r0, r6
   1ff88:	4bb4      	ldr	r3, [pc, #720]	; (2025c <chk_mounted+0x35c>)
   1ff8a:	4798      	blx	r3
   1ff8c:	0003      	movs	r3, r0
   1ff8e:	2400      	movs	r4, #0
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
   1ff90:	2801      	cmp	r0, #1
   1ff92:	d100      	bne.n	1ff96 <chk_mounted+0x96>
   1ff94:	e09a      	b.n	200cc <chk_mounted+0x1cc>
	if (fmt == 3) return FR_DISK_ERR;
   1ff96:	2b03      	cmp	r3, #3
   1ff98:	d100      	bne.n	1ff9c <chk_mounted+0x9c>
   1ff9a:	e0c0      	b.n	2011e <chk_mounted+0x21e>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
   1ff9c:	200d      	movs	r0, #13
   1ff9e:	2b00      	cmp	r3, #0
   1ffa0:	d1c3      	bne.n	1ff2a <chk_mounted+0x2a>
	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
   1ffa2:	333c      	adds	r3, #60	; 0x3c
   1ffa4:	5cf2      	ldrb	r2, [r6, r3]
   1ffa6:	0212      	lsls	r2, r2, #8
   1ffa8:	3b01      	subs	r3, #1
   1ffaa:	5cf3      	ldrb	r3, [r6, r3]
   1ffac:	4313      	orrs	r3, r2
   1ffae:	2280      	movs	r2, #128	; 0x80
   1ffb0:	0092      	lsls	r2, r2, #2
   1ffb2:	b21b      	sxth	r3, r3
   1ffb4:	4293      	cmp	r3, r2
   1ffb6:	d1b8      	bne.n	1ff2a <chk_mounted+0x2a>
	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
   1ffb8:	2347      	movs	r3, #71	; 0x47
   1ffba:	5cf3      	ldrb	r3, [r6, r3]
   1ffbc:	021b      	lsls	r3, r3, #8
   1ffbe:	3abb      	subs	r2, #187	; 0xbb
   1ffc0:	3aff      	subs	r2, #255	; 0xff
   1ffc2:	5cb5      	ldrb	r5, [r6, r2]
   1ffc4:	431d      	orrs	r5, r3
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
   1ffc6:	d10d      	bne.n	1ffe4 <chk_mounted+0xe4>
   1ffc8:	2357      	movs	r3, #87	; 0x57
   1ffca:	5cf5      	ldrb	r5, [r6, r3]
   1ffcc:	062d      	lsls	r5, r5, #24
   1ffce:	3b01      	subs	r3, #1
   1ffd0:	5cf3      	ldrb	r3, [r6, r3]
   1ffd2:	041b      	lsls	r3, r3, #16
   1ffd4:	431d      	orrs	r5, r3
   1ffd6:	2354      	movs	r3, #84	; 0x54
   1ffd8:	5cf3      	ldrb	r3, [r6, r3]
   1ffda:	431d      	orrs	r5, r3
   1ffdc:	2355      	movs	r3, #85	; 0x55
   1ffde:	5cf3      	ldrb	r3, [r6, r3]
   1ffe0:	021b      	lsls	r3, r3, #8
   1ffe2:	431d      	orrs	r5, r3
	fs->fsize = fasize;
   1ffe4:	61f5      	str	r5, [r6, #28]
	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
   1ffe6:	2340      	movs	r3, #64	; 0x40
   1ffe8:	5cf2      	ldrb	r2, [r6, r3]
   1ffea:	70f2      	strb	r2, [r6, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
   1ffec:	1e53      	subs	r3, r2, #1
   1ffee:	200d      	movs	r0, #13
   1fff0:	2b01      	cmp	r3, #1
   1fff2:	d89a      	bhi.n	1ff2a <chk_mounted+0x2a>
	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
   1fff4:	233d      	movs	r3, #61	; 0x3d
   1fff6:	5cf1      	ldrb	r1, [r6, r3]
   1fff8:	70b1      	strb	r1, [r6, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
   1fffa:	2900      	cmp	r1, #0
   1fffc:	d095      	beq.n	1ff2a <chk_mounted+0x2a>
   1fffe:	1e4b      	subs	r3, r1, #1
   20000:	4219      	tst	r1, r3
   20002:	d192      	bne.n	1ff2a <chk_mounted+0x2a>
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
   20004:	2342      	movs	r3, #66	; 0x42
   20006:	5cf3      	ldrb	r3, [r6, r3]
   20008:	021b      	lsls	r3, r3, #8
   2000a:	3034      	adds	r0, #52	; 0x34
   2000c:	5c30      	ldrb	r0, [r6, r0]
   2000e:	4318      	orrs	r0, r3
   20010:	4680      	mov	r8, r0
   20012:	8130      	strh	r0, [r6, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
   20014:	200d      	movs	r0, #13
   20016:	4643      	mov	r3, r8
   20018:	071b      	lsls	r3, r3, #28
   2001a:	d000      	beq.n	2001e <chk_mounted+0x11e>
   2001c:	e785      	b.n	1ff2a <chk_mounted+0x2a>
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
   2001e:	2344      	movs	r3, #68	; 0x44
   20020:	5cf3      	ldrb	r3, [r6, r3]
   20022:	021b      	lsls	r3, r3, #8
   20024:	3036      	adds	r0, #54	; 0x36
   20026:	5c30      	ldrb	r0, [r6, r0]
   20028:	4303      	orrs	r3, r0
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
   2002a:	d10d      	bne.n	20048 <chk_mounted+0x148>
   2002c:	3353      	adds	r3, #83	; 0x53
   2002e:	5cf3      	ldrb	r3, [r6, r3]
   20030:	061b      	lsls	r3, r3, #24
   20032:	2052      	movs	r0, #82	; 0x52
   20034:	5c30      	ldrb	r0, [r6, r0]
   20036:	0400      	lsls	r0, r0, #16
   20038:	4303      	orrs	r3, r0
   2003a:	2050      	movs	r0, #80	; 0x50
   2003c:	5c30      	ldrb	r0, [r6, r0]
   2003e:	4303      	orrs	r3, r0
   20040:	2051      	movs	r0, #81	; 0x51
   20042:	5c30      	ldrb	r0, [r6, r0]
   20044:	0200      	lsls	r0, r0, #8
   20046:	4303      	orrs	r3, r0
	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
   20048:	203f      	movs	r0, #63	; 0x3f
   2004a:	5c30      	ldrb	r0, [r6, r0]
   2004c:	0200      	lsls	r0, r0, #8
   2004e:	273e      	movs	r7, #62	; 0x3e
   20050:	5df7      	ldrb	r7, [r6, r7]
   20052:	4307      	orrs	r7, r0
   20054:	46ba      	mov	sl, r7
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
   20056:	200d      	movs	r0, #13
   20058:	2f00      	cmp	r7, #0
   2005a:	d100      	bne.n	2005e <chk_mounted+0x15e>
   2005c:	e765      	b.n	1ff2a <chk_mounted+0x2a>
	fasize *= b;										/* Number of sectors for FAT area */
   2005e:	436a      	muls	r2, r5
   20060:	4691      	mov	r9, r2
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
   20062:	4642      	mov	r2, r8
   20064:	0917      	lsrs	r7, r2, #4
   20066:	4457      	add	r7, sl
   20068:	444f      	add	r7, r9
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
   2006a:	42bb      	cmp	r3, r7
   2006c:	d200      	bcs.n	20070 <chk_mounted+0x170>
   2006e:	e75c      	b.n	1ff2a <chk_mounted+0x2a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
   20070:	1bd8      	subs	r0, r3, r7
   20072:	4b7b      	ldr	r3, [pc, #492]	; (20260 <chk_mounted+0x360>)
   20074:	4798      	blx	r3
   20076:	0003      	movs	r3, r0
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
   20078:	200d      	movs	r0, #13
   2007a:	2b00      	cmp	r3, #0
   2007c:	d100      	bne.n	20080 <chk_mounted+0x180>
   2007e:	e754      	b.n	1ff2a <chk_mounted+0x2a>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
   20080:	4a78      	ldr	r2, [pc, #480]	; (20264 <chk_mounted+0x364>)
	fmt = FS_FAT12;
   20082:	429a      	cmp	r2, r3
   20084:	4192      	sbcs	r2, r2
   20086:	4252      	negs	r2, r2
   20088:	3201      	adds	r2, #1
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
   2008a:	4977      	ldr	r1, [pc, #476]	; (20268 <chk_mounted+0x368>)
   2008c:	428b      	cmp	r3, r1
   2008e:	d848      	bhi.n	20122 <chk_mounted+0x222>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   20090:	3302      	adds	r3, #2
   20092:	61b3      	str	r3, [r6, #24]
	fs->database = bsect + sysect;						/* Data start sector */
   20094:	19e7      	adds	r7, r4, r7
   20096:	62b7      	str	r7, [r6, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   20098:	4454      	add	r4, sl
   2009a:	6234      	str	r4, [r6, #32]
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
   2009c:	200d      	movs	r0, #13
   2009e:	4641      	mov	r1, r8
   200a0:	2900      	cmp	r1, #0
   200a2:	d100      	bne.n	200a6 <chk_mounted+0x1a6>
   200a4:	e741      	b.n	1ff2a <chk_mounted+0x2a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
   200a6:	444c      	add	r4, r9
   200a8:	6274      	str	r4, [r6, #36]	; 0x24
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   200aa:	2a02      	cmp	r2, #2
   200ac:	d12c      	bne.n	20108 <chk_mounted+0x208>
   200ae:	005b      	lsls	r3, r3, #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   200b0:	496e      	ldr	r1, [pc, #440]	; (2026c <chk_mounted+0x36c>)
   200b2:	468c      	mov	ip, r1
   200b4:	4463      	add	r3, ip
   200b6:	0a5b      	lsrs	r3, r3, #9
		return FR_NO_FILESYSTEM;
   200b8:	200d      	movs	r0, #13
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   200ba:	429d      	cmp	r5, r3
   200bc:	d200      	bcs.n	200c0 <chk_mounted+0x1c0>
   200be:	e734      	b.n	1ff2a <chk_mounted+0x2a>
	fs->free_clust = 0xFFFFFFFF;
   200c0:	2301      	movs	r3, #1
   200c2:	425b      	negs	r3, r3
   200c4:	6133      	str	r3, [r6, #16]
	fs->last_clust = 0;
   200c6:	2300      	movs	r3, #0
   200c8:	60f3      	str	r3, [r6, #12]
   200ca:	e0b6      	b.n	2023a <chk_mounted+0x33a>
		if (tbl[4]) {						/* Is the partition existing? */
   200cc:	33f2      	adds	r3, #242	; 0xf2
   200ce:	33ff      	adds	r3, #255	; 0xff
   200d0:	5cf3      	ldrb	r3, [r6, r3]
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
   200d2:	200d      	movs	r0, #13
		if (tbl[4]) {						/* Is the partition existing? */
   200d4:	2b00      	cmp	r3, #0
   200d6:	d100      	bne.n	200da <chk_mounted+0x1da>
   200d8:	e727      	b.n	1ff2a <chk_mounted+0x2a>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
   200da:	23fa      	movs	r3, #250	; 0xfa
   200dc:	33ff      	adds	r3, #255	; 0xff
   200de:	5cf4      	ldrb	r4, [r6, r3]
   200e0:	0624      	lsls	r4, r4, #24
   200e2:	3b01      	subs	r3, #1
   200e4:	5cf3      	ldrb	r3, [r6, r3]
   200e6:	041b      	lsls	r3, r3, #16
   200e8:	431c      	orrs	r4, r3
   200ea:	23fb      	movs	r3, #251	; 0xfb
   200ec:	005b      	lsls	r3, r3, #1
   200ee:	5cf3      	ldrb	r3, [r6, r3]
   200f0:	431c      	orrs	r4, r3
   200f2:	23f8      	movs	r3, #248	; 0xf8
   200f4:	33ff      	adds	r3, #255	; 0xff
   200f6:	5cf2      	ldrb	r2, [r6, r3]
   200f8:	0212      	lsls	r2, r2, #8
   200fa:	4314      	orrs	r4, r2
			fmt = check_fs(fs, bsect);		/* Check the partition */
   200fc:	0021      	movs	r1, r4
   200fe:	0030      	movs	r0, r6
   20100:	4b56      	ldr	r3, [pc, #344]	; (2025c <chk_mounted+0x35c>)
   20102:	4798      	blx	r3
   20104:	0003      	movs	r3, r0
   20106:	e746      	b.n	1ff96 <chk_mounted+0x96>
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   20108:	2103      	movs	r1, #3
   2010a:	4359      	muls	r1, r3
   2010c:	0849      	lsrs	r1, r1, #1
   2010e:	2001      	movs	r0, #1
   20110:	4003      	ands	r3, r0
   20112:	18cb      	adds	r3, r1, r3
   20114:	e7cc      	b.n	200b0 <chk_mounted+0x1b0>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
   20116:	200c      	movs	r0, #12
   20118:	e707      	b.n	1ff2a <chk_mounted+0x2a>
			return FR_OK;				/* The file system object is valid */
   2011a:	2000      	movs	r0, #0
   2011c:	e705      	b.n	1ff2a <chk_mounted+0x2a>
	if (fmt == 3) return FR_DISK_ERR;
   2011e:	2001      	movs	r0, #1
   20120:	e703      	b.n	1ff2a <chk_mounted+0x2a>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   20122:	3302      	adds	r3, #2
   20124:	61b3      	str	r3, [r6, #24]
	fs->database = bsect + sysect;						/* Data start sector */
   20126:	19e7      	adds	r7, r4, r7
   20128:	62b7      	str	r7, [r6, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   2012a:	4652      	mov	r2, sl
   2012c:	18a2      	adds	r2, r4, r2
   2012e:	6232      	str	r2, [r6, #32]
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
   20130:	200d      	movs	r0, #13
   20132:	4642      	mov	r2, r8
   20134:	2a00      	cmp	r2, #0
   20136:	d000      	beq.n	2013a <chk_mounted+0x23a>
   20138:	e6f7      	b.n	1ff2a <chk_mounted+0x2a>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
   2013a:	225f      	movs	r2, #95	; 0x5f
   2013c:	5cb2      	ldrb	r2, [r6, r2]
   2013e:	0612      	lsls	r2, r2, #24
   20140:	215e      	movs	r1, #94	; 0x5e
   20142:	5c71      	ldrb	r1, [r6, r1]
   20144:	0409      	lsls	r1, r1, #16
   20146:	430a      	orrs	r2, r1
   20148:	215c      	movs	r1, #92	; 0x5c
   2014a:	5c71      	ldrb	r1, [r6, r1]
   2014c:	430a      	orrs	r2, r1
   2014e:	215d      	movs	r1, #93	; 0x5d
   20150:	5c71      	ldrb	r1, [r6, r1]
   20152:	0209      	lsls	r1, r1, #8
   20154:	430a      	orrs	r2, r1
   20156:	6272      	str	r2, [r6, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
   20158:	009b      	lsls	r3, r3, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   2015a:	4a44      	ldr	r2, [pc, #272]	; (2026c <chk_mounted+0x36c>)
   2015c:	4694      	mov	ip, r2
   2015e:	4463      	add	r3, ip
   20160:	0a5b      	lsrs	r3, r3, #9
		return FR_NO_FILESYSTEM;
   20162:	200d      	movs	r0, #13
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   20164:	429d      	cmp	r5, r3
   20166:	d200      	bcs.n	2016a <chk_mounted+0x26a>
   20168:	e6df      	b.n	1ff2a <chk_mounted+0x2a>
	fs->free_clust = 0xFFFFFFFF;
   2016a:	2301      	movs	r3, #1
   2016c:	425b      	negs	r3, r3
   2016e:	6133      	str	r3, [r6, #16]
	fs->last_clust = 0;
   20170:	2300      	movs	r3, #0
   20172:	60f3      	str	r3, [r6, #12]
	 	fs->fsi_flag = 0;
   20174:	7173      	strb	r3, [r6, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
   20176:	3361      	adds	r3, #97	; 0x61
   20178:	5cf3      	ldrb	r3, [r6, r3]
   2017a:	021b      	lsls	r3, r3, #8
   2017c:	2260      	movs	r2, #96	; 0x60
   2017e:	5cb2      	ldrb	r2, [r6, r2]
   20180:	431a      	orrs	r2, r3
   20182:	1912      	adds	r2, r2, r4
   20184:	6172      	str	r2, [r6, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   20186:	0031      	movs	r1, r6
   20188:	3130      	adds	r1, #48	; 0x30
   2018a:	7870      	ldrb	r0, [r6, #1]
   2018c:	2301      	movs	r3, #1
   2018e:	4c38      	ldr	r4, [pc, #224]	; (20270 <chk_mounted+0x370>)
   20190:	47a0      	blx	r4
   20192:	2203      	movs	r2, #3
   20194:	2800      	cmp	r0, #0
   20196:	d150      	bne.n	2023a <chk_mounted+0x33a>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   20198:	4b36      	ldr	r3, [pc, #216]	; (20274 <chk_mounted+0x374>)
   2019a:	5cf2      	ldrb	r2, [r6, r3]
   2019c:	0212      	lsls	r2, r2, #8
   2019e:	4b36      	ldr	r3, [pc, #216]	; (20278 <chk_mounted+0x378>)
   201a0:	5cf3      	ldrb	r3, [r6, r3]
   201a2:	4313      	orrs	r3, r2
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   201a4:	4935      	ldr	r1, [pc, #212]	; (2027c <chk_mounted+0x37c>)
   201a6:	b21b      	sxth	r3, r3
   201a8:	2203      	movs	r2, #3
   201aa:	428b      	cmp	r3, r1
   201ac:	d145      	bne.n	2023a <chk_mounted+0x33a>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   201ae:	2333      	movs	r3, #51	; 0x33
   201b0:	5cf3      	ldrb	r3, [r6, r3]
   201b2:	061b      	lsls	r3, r3, #24
   201b4:	322f      	adds	r2, #47	; 0x2f
   201b6:	5cb2      	ldrb	r2, [r6, r2]
   201b8:	0412      	lsls	r2, r2, #16
   201ba:	4313      	orrs	r3, r2
   201bc:	2230      	movs	r2, #48	; 0x30
   201be:	5cb2      	ldrb	r2, [r6, r2]
   201c0:	4313      	orrs	r3, r2
   201c2:	2231      	movs	r2, #49	; 0x31
   201c4:	5cb2      	ldrb	r2, [r6, r2]
   201c6:	0212      	lsls	r2, r2, #8
   201c8:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   201ca:	492d      	ldr	r1, [pc, #180]	; (20280 <chk_mounted+0x380>)
   201cc:	2203      	movs	r2, #3
   201ce:	428b      	cmp	r3, r1
   201d0:	d133      	bne.n	2023a <chk_mounted+0x33a>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
   201d2:	4b2c      	ldr	r3, [pc, #176]	; (20284 <chk_mounted+0x384>)
   201d4:	5cf3      	ldrb	r3, [r6, r3]
   201d6:	061b      	lsls	r3, r3, #24
   201d8:	4a2b      	ldr	r2, [pc, #172]	; (20288 <chk_mounted+0x388>)
   201da:	5cb2      	ldrb	r2, [r6, r2]
   201dc:	0412      	lsls	r2, r2, #16
   201de:	4313      	orrs	r3, r2
   201e0:	2285      	movs	r2, #133	; 0x85
   201e2:	0092      	lsls	r2, r2, #2
   201e4:	5cb2      	ldrb	r2, [r6, r2]
   201e6:	4313      	orrs	r3, r2
   201e8:	4a28      	ldr	r2, [pc, #160]	; (2028c <chk_mounted+0x38c>)
   201ea:	5cb2      	ldrb	r2, [r6, r2]
   201ec:	0212      	lsls	r2, r2, #8
   201ee:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   201f0:	4927      	ldr	r1, [pc, #156]	; (20290 <chk_mounted+0x390>)
   201f2:	2203      	movs	r2, #3
   201f4:	428b      	cmp	r3, r1
   201f6:	d120      	bne.n	2023a <chk_mounted+0x33a>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
   201f8:	4b26      	ldr	r3, [pc, #152]	; (20294 <chk_mounted+0x394>)
   201fa:	5cf3      	ldrb	r3, [r6, r3]
   201fc:	061b      	lsls	r3, r3, #24
   201fe:	4a26      	ldr	r2, [pc, #152]	; (20298 <chk_mounted+0x398>)
   20200:	5cb2      	ldrb	r2, [r6, r2]
   20202:	0412      	lsls	r2, r2, #16
   20204:	4313      	orrs	r3, r2
   20206:	2287      	movs	r2, #135	; 0x87
   20208:	0092      	lsls	r2, r2, #2
   2020a:	5cb2      	ldrb	r2, [r6, r2]
   2020c:	4313      	orrs	r3, r2
   2020e:	4a23      	ldr	r2, [pc, #140]	; (2029c <chk_mounted+0x39c>)
   20210:	5cb2      	ldrb	r2, [r6, r2]
   20212:	0212      	lsls	r2, r2, #8
   20214:	4313      	orrs	r3, r2
   20216:	60f3      	str	r3, [r6, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
   20218:	4b21      	ldr	r3, [pc, #132]	; (202a0 <chk_mounted+0x3a0>)
   2021a:	5cf3      	ldrb	r3, [r6, r3]
   2021c:	061b      	lsls	r3, r3, #24
   2021e:	4a21      	ldr	r2, [pc, #132]	; (202a4 <chk_mounted+0x3a4>)
   20220:	5cb2      	ldrb	r2, [r6, r2]
   20222:	0412      	lsls	r2, r2, #16
   20224:	4313      	orrs	r3, r2
   20226:	2286      	movs	r2, #134	; 0x86
   20228:	0092      	lsls	r2, r2, #2
   2022a:	5cb2      	ldrb	r2, [r6, r2]
   2022c:	4313      	orrs	r3, r2
   2022e:	4a1e      	ldr	r2, [pc, #120]	; (202a8 <chk_mounted+0x3a8>)
   20230:	5cb2      	ldrb	r2, [r6, r2]
   20232:	0212      	lsls	r2, r2, #8
   20234:	4313      	orrs	r3, r2
   20236:	6133      	str	r3, [r6, #16]
   20238:	2203      	movs	r2, #3
	fs->fs_type = fmt;		/* FAT sub-type */
   2023a:	7032      	strb	r2, [r6, #0]
	fs->id = ++Fsid;		/* File system mount ID */
   2023c:	4a1b      	ldr	r2, [pc, #108]	; (202ac <chk_mounted+0x3ac>)
   2023e:	8813      	ldrh	r3, [r2, #0]
   20240:	3301      	adds	r3, #1
   20242:	b29b      	uxth	r3, r3
   20244:	8013      	strh	r3, [r2, #0]
   20246:	80f3      	strh	r3, [r6, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
   20248:	2000      	movs	r0, #0
   2024a:	62f0      	str	r0, [r6, #44]	; 0x2c
	fs->wflag = 0;
   2024c:	7130      	strb	r0, [r6, #4]
	return FR_OK;
   2024e:	e66c      	b.n	1ff2a <chk_mounted+0x2a>
   20250:	20003cfc 	.word	0x20003cfc
   20254:	0001fbf1 	.word	0x0001fbf1
   20258:	0001fb55 	.word	0x0001fb55
   2025c:	0001fe5d 	.word	0x0001fe5d
   20260:	00024055 	.word	0x00024055
   20264:	00000ff5 	.word	0x00000ff5
   20268:	0000fff5 	.word	0x0000fff5
   2026c:	000001ff 	.word	0x000001ff
   20270:	0001fc0d 	.word	0x0001fc0d
   20274:	0000022f 	.word	0x0000022f
   20278:	0000022e 	.word	0x0000022e
   2027c:	ffffaa55 	.word	0xffffaa55
   20280:	41615252 	.word	0x41615252
   20284:	00000217 	.word	0x00000217
   20288:	00000216 	.word	0x00000216
   2028c:	00000215 	.word	0x00000215
   20290:	61417272 	.word	0x61417272
   20294:	0000021f 	.word	0x0000021f
   20298:	0000021e 	.word	0x0000021e
   2029c:	0000021d 	.word	0x0000021d
   202a0:	0000021b 	.word	0x0000021b
   202a4:	0000021a 	.word	0x0000021a
   202a8:	00000219 	.word	0x00000219
   202ac:	20003d1c 	.word	0x20003d1c

000202b0 <move_window>:
{
   202b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   202b2:	46ce      	mov	lr, r9
   202b4:	b500      	push	{lr}
   202b6:	b082      	sub	sp, #8
   202b8:	0004      	movs	r4, r0
   202ba:	000f      	movs	r7, r1
	wsect = fs->winsect;
   202bc:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
   202be:	428d      	cmp	r5, r1
   202c0:	d03f      	beq.n	20342 <move_window+0x92>
		if (fs->wflag) {	/* Write back dirty window if needed */
   202c2:	7903      	ldrb	r3, [r0, #4]
   202c4:	2b00      	cmp	r3, #0
   202c6:	d107      	bne.n	202d8 <move_window+0x28>
	return FR_OK;
   202c8:	2300      	movs	r3, #0
		if (sector) {
   202ca:	2f00      	cmp	r7, #0
   202cc:	d12c      	bne.n	20328 <move_window+0x78>
}
   202ce:	0018      	movs	r0, r3
   202d0:	b002      	add	sp, #8
   202d2:	bc04      	pop	{r2}
   202d4:	4691      	mov	r9, r2
   202d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   202d8:	2330      	movs	r3, #48	; 0x30
   202da:	469c      	mov	ip, r3
   202dc:	4484      	add	ip, r0
   202de:	4663      	mov	r3, ip
   202e0:	4661      	mov	r1, ip
   202e2:	9301      	str	r3, [sp, #4]
   202e4:	7840      	ldrb	r0, [r0, #1]
   202e6:	2301      	movs	r3, #1
   202e8:	002a      	movs	r2, r5
   202ea:	4e17      	ldr	r6, [pc, #92]	; (20348 <move_window+0x98>)
   202ec:	47b0      	blx	r6
				return FR_DISK_ERR;
   202ee:	2301      	movs	r3, #1
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   202f0:	2800      	cmp	r0, #0
   202f2:	d1ec      	bne.n	202ce <move_window+0x1e>
			fs->wflag = 0;
   202f4:	2300      	movs	r3, #0
   202f6:	7123      	strb	r3, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   202f8:	6a23      	ldr	r3, [r4, #32]
   202fa:	69e2      	ldr	r2, [r4, #28]
   202fc:	4694      	mov	ip, r2
   202fe:	4463      	add	r3, ip
   20300:	429d      	cmp	r5, r3
   20302:	d2e1      	bcs.n	202c8 <move_window+0x18>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   20304:	78e6      	ldrb	r6, [r4, #3]
   20306:	2e01      	cmp	r6, #1
   20308:	d9de      	bls.n	202c8 <move_window+0x18>
					disk_write(fs->drv, fs->win, wsect, 1);
   2030a:	4b0f      	ldr	r3, [pc, #60]	; (20348 <move_window+0x98>)
   2030c:	4699      	mov	r9, r3
					wsect += fs->fsize;
   2030e:	69e3      	ldr	r3, [r4, #28]
   20310:	469c      	mov	ip, r3
   20312:	4465      	add	r5, ip
					disk_write(fs->drv, fs->win, wsect, 1);
   20314:	7860      	ldrb	r0, [r4, #1]
   20316:	2301      	movs	r3, #1
   20318:	002a      	movs	r2, r5
   2031a:	9901      	ldr	r1, [sp, #4]
   2031c:	47c8      	blx	r9
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   2031e:	3e01      	subs	r6, #1
   20320:	b2f6      	uxtb	r6, r6
   20322:	2e01      	cmp	r6, #1
   20324:	d1f3      	bne.n	2030e <move_window+0x5e>
   20326:	e7cf      	b.n	202c8 <move_window+0x18>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   20328:	0021      	movs	r1, r4
   2032a:	3130      	adds	r1, #48	; 0x30
   2032c:	7860      	ldrb	r0, [r4, #1]
   2032e:	3301      	adds	r3, #1
   20330:	003a      	movs	r2, r7
   20332:	4d06      	ldr	r5, [pc, #24]	; (2034c <move_window+0x9c>)
   20334:	47a8      	blx	r5
				return FR_DISK_ERR;
   20336:	2301      	movs	r3, #1
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   20338:	2800      	cmp	r0, #0
   2033a:	d1c8      	bne.n	202ce <move_window+0x1e>
			fs->winsect = sector;
   2033c:	62e7      	str	r7, [r4, #44]	; 0x2c
	return FR_OK;
   2033e:	2300      	movs	r3, #0
   20340:	e7c5      	b.n	202ce <move_window+0x1e>
   20342:	2300      	movs	r3, #0
   20344:	e7c3      	b.n	202ce <move_window+0x1e>
   20346:	46c0      	nop			; (mov r8, r8)
   20348:	0001fc91 	.word	0x0001fc91
   2034c:	0001fc0d 	.word	0x0001fc0d

00020350 <get_fat>:
{
   20350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20352:	0005      	movs	r5, r0
   20354:	000c      	movs	r4, r1
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   20356:	2901      	cmp	r1, #1
   20358:	d974      	bls.n	20444 <get_fat+0xf4>
		return 1;
   2035a:	2001      	movs	r0, #1
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   2035c:	69ab      	ldr	r3, [r5, #24]
   2035e:	4299      	cmp	r1, r3
   20360:	d271      	bcs.n	20446 <get_fat+0xf6>
	switch (fs->fs_type) {
   20362:	782b      	ldrb	r3, [r5, #0]
   20364:	2b02      	cmp	r3, #2
   20366:	d034      	beq.n	203d2 <get_fat+0x82>
   20368:	2b03      	cmp	r3, #3
   2036a:	d049      	beq.n	20400 <get_fat+0xb0>
   2036c:	2b01      	cmp	r3, #1
   2036e:	d002      	beq.n	20376 <get_fat+0x26>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   20370:	2001      	movs	r0, #1
   20372:	4240      	negs	r0, r0
   20374:	e067      	b.n	20446 <get_fat+0xf6>
		bc = (UINT)clst; bc += bc / 2;
   20376:	084e      	lsrs	r6, r1, #1
   20378:	1876      	adds	r6, r6, r1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2037a:	0a71      	lsrs	r1, r6, #9
   2037c:	6a2b      	ldr	r3, [r5, #32]
   2037e:	469c      	mov	ip, r3
   20380:	4461      	add	r1, ip
   20382:	0028      	movs	r0, r5
   20384:	4b30      	ldr	r3, [pc, #192]	; (20448 <get_fat+0xf8>)
   20386:	4798      	blx	r3
   20388:	2800      	cmp	r0, #0
   2038a:	d002      	beq.n	20392 <get_fat+0x42>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   2038c:	2001      	movs	r0, #1
   2038e:	4240      	negs	r0, r0
   20390:	e059      	b.n	20446 <get_fat+0xf6>
		wc = fs->win[bc % SS(fs)]; bc++;
   20392:	05f3      	lsls	r3, r6, #23
   20394:	0ddb      	lsrs	r3, r3, #23
   20396:	18eb      	adds	r3, r5, r3
   20398:	3330      	adds	r3, #48	; 0x30
   2039a:	781f      	ldrb	r7, [r3, #0]
   2039c:	3601      	adds	r6, #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2039e:	0a71      	lsrs	r1, r6, #9
   203a0:	6a2b      	ldr	r3, [r5, #32]
   203a2:	469c      	mov	ip, r3
   203a4:	4461      	add	r1, ip
   203a6:	0028      	movs	r0, r5
   203a8:	4b27      	ldr	r3, [pc, #156]	; (20448 <get_fat+0xf8>)
   203aa:	4798      	blx	r3
   203ac:	2800      	cmp	r0, #0
   203ae:	d002      	beq.n	203b6 <get_fat+0x66>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   203b0:	2001      	movs	r0, #1
   203b2:	4240      	negs	r0, r0
   203b4:	e047      	b.n	20446 <get_fat+0xf6>
		wc |= fs->win[bc % SS(fs)] << 8;
   203b6:	05f6      	lsls	r6, r6, #23
   203b8:	0df6      	lsrs	r6, r6, #23
   203ba:	19ad      	adds	r5, r5, r6
   203bc:	3530      	adds	r5, #48	; 0x30
   203be:	7828      	ldrb	r0, [r5, #0]
   203c0:	0200      	lsls	r0, r0, #8
   203c2:	4338      	orrs	r0, r7
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
   203c4:	07e3      	lsls	r3, r4, #31
   203c6:	d501      	bpl.n	203cc <get_fat+0x7c>
   203c8:	0900      	lsrs	r0, r0, #4
   203ca:	e03c      	b.n	20446 <get_fat+0xf6>
   203cc:	0500      	lsls	r0, r0, #20
   203ce:	0d00      	lsrs	r0, r0, #20
   203d0:	e039      	b.n	20446 <get_fat+0xf6>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   203d2:	0a09      	lsrs	r1, r1, #8
   203d4:	6a2b      	ldr	r3, [r5, #32]
   203d6:	469c      	mov	ip, r3
   203d8:	4461      	add	r1, ip
   203da:	0028      	movs	r0, r5
   203dc:	4b1a      	ldr	r3, [pc, #104]	; (20448 <get_fat+0xf8>)
   203de:	4798      	blx	r3
   203e0:	2800      	cmp	r0, #0
   203e2:	d002      	beq.n	203ea <get_fat+0x9a>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   203e4:	2001      	movs	r0, #1
   203e6:	4240      	negs	r0, r0
   203e8:	e02d      	b.n	20446 <get_fat+0xf6>
		p = &fs->win[clst * 2 % SS(fs)];
   203ea:	0064      	lsls	r4, r4, #1
   203ec:	23ff      	movs	r3, #255	; 0xff
   203ee:	005b      	lsls	r3, r3, #1
   203f0:	401c      	ands	r4, r3
		return LD_WORD(p);
   203f2:	192d      	adds	r5, r5, r4
   203f4:	3530      	adds	r5, #48	; 0x30
   203f6:	786b      	ldrb	r3, [r5, #1]
   203f8:	021b      	lsls	r3, r3, #8
   203fa:	7828      	ldrb	r0, [r5, #0]
   203fc:	4318      	orrs	r0, r3
   203fe:	e022      	b.n	20446 <get_fat+0xf6>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   20400:	09c9      	lsrs	r1, r1, #7
   20402:	6a2b      	ldr	r3, [r5, #32]
   20404:	469c      	mov	ip, r3
   20406:	4461      	add	r1, ip
   20408:	0028      	movs	r0, r5
   2040a:	4b0f      	ldr	r3, [pc, #60]	; (20448 <get_fat+0xf8>)
   2040c:	4798      	blx	r3
   2040e:	2800      	cmp	r0, #0
   20410:	d002      	beq.n	20418 <get_fat+0xc8>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   20412:	2001      	movs	r0, #1
   20414:	4240      	negs	r0, r0
   20416:	e016      	b.n	20446 <get_fat+0xf6>
		p = &fs->win[clst * 4 % SS(fs)];
   20418:	00a4      	lsls	r4, r4, #2
   2041a:	23fe      	movs	r3, #254	; 0xfe
   2041c:	005b      	lsls	r3, r3, #1
   2041e:	401c      	ands	r4, r3
   20420:	0023      	movs	r3, r4
   20422:	3330      	adds	r3, #48	; 0x30
   20424:	18eb      	adds	r3, r5, r3
		return LD_DWORD(p) & 0x0FFFFFFF;
   20426:	78d8      	ldrb	r0, [r3, #3]
   20428:	0600      	lsls	r0, r0, #24
   2042a:	789a      	ldrb	r2, [r3, #2]
   2042c:	0412      	lsls	r2, r2, #16
   2042e:	4310      	orrs	r0, r2
   20430:	192c      	adds	r4, r5, r4
   20432:	3430      	adds	r4, #48	; 0x30
   20434:	7822      	ldrb	r2, [r4, #0]
   20436:	4310      	orrs	r0, r2
   20438:	785b      	ldrb	r3, [r3, #1]
   2043a:	021b      	lsls	r3, r3, #8
   2043c:	4318      	orrs	r0, r3
   2043e:	0100      	lsls	r0, r0, #4
   20440:	0900      	lsrs	r0, r0, #4
   20442:	e000      	b.n	20446 <get_fat+0xf6>
		return 1;
   20444:	2001      	movs	r0, #1
}
   20446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20448:	000202b1 	.word	0x000202b1

0002044c <dir_sdi>:
{
   2044c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2044e:	0004      	movs	r4, r0
   20450:	000d      	movs	r5, r1
	dj->index = idx;
   20452:	80e1      	strh	r1, [r4, #6]
	clst = dj->sclust;
   20454:	6881      	ldr	r1, [r0, #8]
		return FR_INT_ERR;
   20456:	2002      	movs	r0, #2
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
   20458:	2901      	cmp	r1, #1
   2045a:	d003      	beq.n	20464 <dir_sdi+0x18>
   2045c:	6823      	ldr	r3, [r4, #0]
   2045e:	699a      	ldr	r2, [r3, #24]
   20460:	4291      	cmp	r1, r2
   20462:	d300      	bcc.n	20466 <dir_sdi+0x1a>
}
   20464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
   20466:	2900      	cmp	r1, #0
   20468:	d119      	bne.n	2049e <dir_sdi+0x52>
   2046a:	781a      	ldrb	r2, [r3, #0]
   2046c:	2a03      	cmp	r2, #3
   2046e:	d013      	beq.n	20498 <dir_sdi+0x4c>
		dj->clust = clst;
   20470:	2200      	movs	r2, #0
   20472:	60e2      	str	r2, [r4, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
   20474:	891a      	ldrh	r2, [r3, #8]
			return FR_INT_ERR;
   20476:	2002      	movs	r0, #2
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
   20478:	42aa      	cmp	r2, r5
   2047a:	d9f3      	bls.n	20464 <dir_sdi+0x18>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   2047c:	092a      	lsrs	r2, r5, #4
   2047e:	b292      	uxth	r2, r2
   20480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   20482:	189b      	adds	r3, r3, r2
   20484:	6123      	str	r3, [r4, #16]
	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
   20486:	6823      	ldr	r3, [r4, #0]
   20488:	3330      	adds	r3, #48	; 0x30
   2048a:	220f      	movs	r2, #15
   2048c:	4015      	ands	r5, r2
   2048e:	016d      	lsls	r5, r5, #5
   20490:	195d      	adds	r5, r3, r5
   20492:	6165      	str	r5, [r4, #20]
	return FR_OK;	/* Seek succeeded */
   20494:	2000      	movs	r0, #0
   20496:	e7e5      	b.n	20464 <dir_sdi+0x18>
		clst = dj->fs->dirbase;
   20498:	6a59      	ldr	r1, [r3, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
   2049a:	2900      	cmp	r1, #0
   2049c:	d0e8      	beq.n	20470 <dir_sdi+0x24>
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
   2049e:	789e      	ldrb	r6, [r3, #2]
   204a0:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
   204a2:	42b5      	cmp	r5, r6
   204a4:	d313      	bcc.n	204ce <dir_sdi+0x82>
   204a6:	1bad      	subs	r5, r5, r6
   204a8:	b2ad      	uxth	r5, r5
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
   204aa:	4f10      	ldr	r7, [pc, #64]	; (204ec <dir_sdi+0xa0>)
   204ac:	e000      	b.n	204b0 <dir_sdi+0x64>
   204ae:	001d      	movs	r5, r3
   204b0:	6820      	ldr	r0, [r4, #0]
   204b2:	47b8      	blx	r7
   204b4:	0001      	movs	r1, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   204b6:	1c43      	adds	r3, r0, #1
   204b8:	d012      	beq.n	204e0 <dir_sdi+0x94>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
   204ba:	2801      	cmp	r0, #1
   204bc:	d912      	bls.n	204e4 <dir_sdi+0x98>
   204be:	6823      	ldr	r3, [r4, #0]
   204c0:	699b      	ldr	r3, [r3, #24]
   204c2:	4298      	cmp	r0, r3
   204c4:	d210      	bcs.n	204e8 <dir_sdi+0x9c>
   204c6:	1bab      	subs	r3, r5, r6
   204c8:	b29b      	uxth	r3, r3
		while (idx >= ic) {	/* Follow cluster chain */
   204ca:	42b5      	cmp	r5, r6
   204cc:	d2ef      	bcs.n	204ae <dir_sdi+0x62>
		dj->clust = clst;
   204ce:	60e1      	str	r1, [r4, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   204d0:	6820      	ldr	r0, [r4, #0]
   204d2:	4b07      	ldr	r3, [pc, #28]	; (204f0 <dir_sdi+0xa4>)
   204d4:	4798      	blx	r3
   204d6:	092b      	lsrs	r3, r5, #4
   204d8:	b29b      	uxth	r3, r3
   204da:	1818      	adds	r0, r3, r0
   204dc:	6120      	str	r0, [r4, #16]
   204de:	e7d2      	b.n	20486 <dir_sdi+0x3a>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   204e0:	2001      	movs	r0, #1
   204e2:	e7bf      	b.n	20464 <dir_sdi+0x18>
				return FR_INT_ERR;
   204e4:	2002      	movs	r0, #2
   204e6:	e7bd      	b.n	20464 <dir_sdi+0x18>
   204e8:	2002      	movs	r0, #2
   204ea:	e7bb      	b.n	20464 <dir_sdi+0x18>
   204ec:	00020351 	.word	0x00020351
   204f0:	0001fdf7 	.word	0x0001fdf7

000204f4 <put_fat>:
{
   204f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   204f6:	46c6      	mov	lr, r8
   204f8:	b500      	push	{lr}
   204fa:	0007      	movs	r7, r0
   204fc:	000c      	movs	r4, r1
   204fe:	0016      	movs	r6, r2
		res = FR_INT_ERR;
   20500:	2502      	movs	r5, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   20502:	2901      	cmp	r1, #1
   20504:	d902      	bls.n	2050c <put_fat+0x18>
   20506:	6983      	ldr	r3, [r0, #24]
   20508:	4299      	cmp	r1, r3
   2050a:	d303      	bcc.n	20514 <put_fat+0x20>
}
   2050c:	0028      	movs	r0, r5
   2050e:	bc04      	pop	{r2}
   20510:	4690      	mov	r8, r2
   20512:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (fs->fs_type) {
   20514:	7803      	ldrb	r3, [r0, #0]
   20516:	2b02      	cmp	r3, #2
   20518:	d053      	beq.n	205c2 <put_fat+0xce>
   2051a:	2b03      	cmp	r3, #3
   2051c:	d063      	beq.n	205e6 <put_fat+0xf2>
			res = FR_INT_ERR;
   2051e:	2502      	movs	r5, #2
		switch (fs->fs_type) {
   20520:	2b01      	cmp	r3, #1
   20522:	d002      	beq.n	2052a <put_fat+0x36>
		fs->wflag = 1;
   20524:	2301      	movs	r3, #1
   20526:	713b      	strb	r3, [r7, #4]
   20528:	e7f0      	b.n	2050c <put_fat+0x18>
			bc = clst; bc += bc / 2;
   2052a:	084b      	lsrs	r3, r1, #1
   2052c:	4698      	mov	r8, r3
   2052e:	4488      	add	r8, r1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   20530:	4643      	mov	r3, r8
   20532:	0a59      	lsrs	r1, r3, #9
   20534:	6a03      	ldr	r3, [r0, #32]
   20536:	469c      	mov	ip, r3
   20538:	4461      	add	r1, ip
   2053a:	4b3b      	ldr	r3, [pc, #236]	; (20628 <put_fat+0x134>)
   2053c:	4798      	blx	r3
   2053e:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
   20540:	d1f0      	bne.n	20524 <put_fat+0x30>
			p = &fs->win[bc % SS(fs)];
   20542:	4643      	mov	r3, r8
   20544:	05db      	lsls	r3, r3, #23
   20546:	0ddb      	lsrs	r3, r3, #23
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   20548:	07e2      	lsls	r2, r4, #31
   2054a:	d51f      	bpl.n	2058c <put_fat+0x98>
   2054c:	18fb      	adds	r3, r7, r3
   2054e:	3330      	adds	r3, #48	; 0x30
   20550:	7819      	ldrb	r1, [r3, #0]
   20552:	220f      	movs	r2, #15
   20554:	400a      	ands	r2, r1
   20556:	0131      	lsls	r1, r6, #4
   20558:	20ff      	movs	r0, #255	; 0xff
   2055a:	0100      	lsls	r0, r0, #4
   2055c:	4001      	ands	r1, r0
   2055e:	430a      	orrs	r2, r1
   20560:	701a      	strb	r2, [r3, #0]
			bc++;
   20562:	4644      	mov	r4, r8
   20564:	3401      	adds	r4, #1
			fs->wflag = 1;
   20566:	2301      	movs	r3, #1
   20568:	713b      	strb	r3, [r7, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   2056a:	0a61      	lsrs	r1, r4, #9
   2056c:	6a3b      	ldr	r3, [r7, #32]
   2056e:	469c      	mov	ip, r3
   20570:	4461      	add	r1, ip
   20572:	0038      	movs	r0, r7
   20574:	4b2c      	ldr	r3, [pc, #176]	; (20628 <put_fat+0x134>)
   20576:	4798      	blx	r3
			if (res != FR_OK) break;
   20578:	2800      	cmp	r0, #0
   2057a:	d151      	bne.n	20620 <put_fat+0x12c>
			p = &fs->win[bc % SS(fs)];
   2057c:	05e4      	lsls	r4, r4, #23
   2057e:	0de4      	lsrs	r4, r4, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
   20580:	0936      	lsrs	r6, r6, #4
   20582:	b2f6      	uxtb	r6, r6
   20584:	193c      	adds	r4, r7, r4
   20586:	3430      	adds	r4, #48	; 0x30
   20588:	7026      	strb	r6, [r4, #0]
			break;
   2058a:	e7cb      	b.n	20524 <put_fat+0x30>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   2058c:	18fb      	adds	r3, r7, r3
   2058e:	3330      	adds	r3, #48	; 0x30
   20590:	701e      	strb	r6, [r3, #0]
			bc++;
   20592:	4644      	mov	r4, r8
   20594:	3401      	adds	r4, #1
			fs->wflag = 1;
   20596:	2301      	movs	r3, #1
   20598:	713b      	strb	r3, [r7, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   2059a:	0a61      	lsrs	r1, r4, #9
   2059c:	6a3b      	ldr	r3, [r7, #32]
   2059e:	469c      	mov	ip, r3
   205a0:	4461      	add	r1, ip
   205a2:	0038      	movs	r0, r7
   205a4:	4b20      	ldr	r3, [pc, #128]	; (20628 <put_fat+0x134>)
   205a6:	4798      	blx	r3
			if (res != FR_OK) break;
   205a8:	2800      	cmp	r0, #0
   205aa:	d13b      	bne.n	20624 <put_fat+0x130>
			p = &fs->win[bc % SS(fs)];
   205ac:	05e4      	lsls	r4, r4, #23
   205ae:	0de4      	lsrs	r4, r4, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
   205b0:	193b      	adds	r3, r7, r4
   205b2:	3330      	adds	r3, #48	; 0x30
   205b4:	781b      	ldrb	r3, [r3, #0]
   205b6:	220f      	movs	r2, #15
   205b8:	4393      	bics	r3, r2
   205ba:	0536      	lsls	r6, r6, #20
   205bc:	0f36      	lsrs	r6, r6, #28
   205be:	431e      	orrs	r6, r3
   205c0:	e7e0      	b.n	20584 <put_fat+0x90>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
   205c2:	0a09      	lsrs	r1, r1, #8
   205c4:	6a03      	ldr	r3, [r0, #32]
   205c6:	469c      	mov	ip, r3
   205c8:	4461      	add	r1, ip
   205ca:	4b17      	ldr	r3, [pc, #92]	; (20628 <put_fat+0x134>)
   205cc:	4798      	blx	r3
   205ce:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
   205d0:	d1a8      	bne.n	20524 <put_fat+0x30>
			p = &fs->win[clst * 2 % SS(fs)];
   205d2:	0063      	lsls	r3, r4, #1
   205d4:	24ff      	movs	r4, #255	; 0xff
   205d6:	0064      	lsls	r4, r4, #1
   205d8:	4023      	ands	r3, r4
			ST_WORD(p, (WORD)val);
   205da:	18fb      	adds	r3, r7, r3
   205dc:	3330      	adds	r3, #48	; 0x30
   205de:	701e      	strb	r6, [r3, #0]
   205e0:	0a36      	lsrs	r6, r6, #8
   205e2:	705e      	strb	r6, [r3, #1]
			break;
   205e4:	e79e      	b.n	20524 <put_fat+0x30>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
   205e6:	09c9      	lsrs	r1, r1, #7
   205e8:	6a03      	ldr	r3, [r0, #32]
   205ea:	469c      	mov	ip, r3
   205ec:	4461      	add	r1, ip
   205ee:	4b0e      	ldr	r3, [pc, #56]	; (20628 <put_fat+0x134>)
   205f0:	4798      	blx	r3
   205f2:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
   205f4:	d196      	bne.n	20524 <put_fat+0x30>
			p = &fs->win[clst * 4 % SS(fs)];
   205f6:	00a4      	lsls	r4, r4, #2
   205f8:	23fe      	movs	r3, #254	; 0xfe
   205fa:	005b      	lsls	r3, r3, #1
   205fc:	401c      	ands	r4, r3
   205fe:	0022      	movs	r2, r4
   20600:	3230      	adds	r2, #48	; 0x30
   20602:	18ba      	adds	r2, r7, r2
			val |= LD_DWORD(p) & 0xF0000000;
   20604:	78d3      	ldrb	r3, [r2, #3]
   20606:	193c      	adds	r4, r7, r4
   20608:	3430      	adds	r4, #48	; 0x30
   2060a:	091b      	lsrs	r3, r3, #4
   2060c:	071b      	lsls	r3, r3, #28
   2060e:	431e      	orrs	r6, r3
			ST_DWORD(p, val);
   20610:	7026      	strb	r6, [r4, #0]
   20612:	0a33      	lsrs	r3, r6, #8
   20614:	7053      	strb	r3, [r2, #1]
   20616:	0c33      	lsrs	r3, r6, #16
   20618:	7093      	strb	r3, [r2, #2]
   2061a:	0e36      	lsrs	r6, r6, #24
   2061c:	70d6      	strb	r6, [r2, #3]
			break;
   2061e:	e781      	b.n	20524 <put_fat+0x30>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   20620:	0005      	movs	r5, r0
   20622:	e77f      	b.n	20524 <put_fat+0x30>
   20624:	0005      	movs	r5, r0
   20626:	e77d      	b.n	20524 <put_fat+0x30>
   20628:	000202b1 	.word	0x000202b1

0002062c <create_chain>:
{
   2062c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2062e:	46c6      	mov	lr, r8
   20630:	b500      	push	{lr}
   20632:	0005      	movs	r5, r0
   20634:	4688      	mov	r8, r1
	if (clst == 0) {		/* Create a new chain */
   20636:	2900      	cmp	r1, #0
   20638:	d107      	bne.n	2064a <create_chain+0x1e>
		scl = fs->last_clust;			/* Get suggested start point */
   2063a:	68c6      	ldr	r6, [r0, #12]
		if (!scl || scl >= fs->n_fatent) scl = 1;
   2063c:	2e00      	cmp	r6, #0
   2063e:	d00d      	beq.n	2065c <create_chain+0x30>
   20640:	6983      	ldr	r3, [r0, #24]
   20642:	429e      	cmp	r6, r3
   20644:	d30b      	bcc.n	2065e <create_chain+0x32>
   20646:	2601      	movs	r6, #1
   20648:	e009      	b.n	2065e <create_chain+0x32>
		cs = get_fat(fs, clst);			/* Check the cluster status */
   2064a:	4b26      	ldr	r3, [pc, #152]	; (206e4 <create_chain+0xb8>)
   2064c:	4798      	blx	r3
		if (cs < 2) return 1;			/* It is an invalid cluster */
   2064e:	2801      	cmp	r0, #1
   20650:	d93d      	bls.n	206ce <create_chain+0xa2>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   20652:	69ab      	ldr	r3, [r5, #24]
		scl = clst;
   20654:	4646      	mov	r6, r8
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   20656:	4298      	cmp	r0, r3
   20658:	d201      	bcs.n	2065e <create_chain+0x32>
   2065a:	e03d      	b.n	206d8 <create_chain+0xac>
		if (!scl || scl >= fs->n_fatent) scl = 1;
   2065c:	2601      	movs	r6, #1
	ncl = scl;				/* Start cluster */
   2065e:	0034      	movs	r4, r6
		cs = get_fat(fs, ncl);			/* Get the cluster status */
   20660:	4f20      	ldr	r7, [pc, #128]	; (206e4 <create_chain+0xb8>)
   20662:	e00a      	b.n	2067a <create_chain+0x4e>
   20664:	0021      	movs	r1, r4
   20666:	0028      	movs	r0, r5
   20668:	47b8      	blx	r7
		if (cs == 0) break;				/* Found a free cluster */
   2066a:	2800      	cmp	r0, #0
   2066c:	d00d      	beq.n	2068a <create_chain+0x5e>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
   2066e:	1c43      	adds	r3, r0, #1
   20670:	d032      	beq.n	206d8 <create_chain+0xac>
   20672:	2801      	cmp	r0, #1
   20674:	d030      	beq.n	206d8 <create_chain+0xac>
		if (ncl == scl) return 0;		/* No free cluster */
   20676:	42b4      	cmp	r4, r6
   20678:	d02d      	beq.n	206d6 <create_chain+0xaa>
		ncl++;							/* Next cluster */
   2067a:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
   2067c:	69ab      	ldr	r3, [r5, #24]
   2067e:	429c      	cmp	r4, r3
   20680:	d3f0      	bcc.n	20664 <create_chain+0x38>
			if (ncl > scl) return 0;	/* No free cluster */
   20682:	2e01      	cmp	r6, #1
   20684:	d925      	bls.n	206d2 <create_chain+0xa6>
			ncl = 2;
   20686:	2402      	movs	r4, #2
   20688:	e7ec      	b.n	20664 <create_chain+0x38>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
   2068a:	4a17      	ldr	r2, [pc, #92]	; (206e8 <create_chain+0xbc>)
   2068c:	0021      	movs	r1, r4
   2068e:	0028      	movs	r0, r5
   20690:	4b16      	ldr	r3, [pc, #88]	; (206ec <create_chain+0xc0>)
   20692:	4798      	blx	r3
	if (res == FR_OK && clst != 0) {
   20694:	2800      	cmp	r0, #0
   20696:	d113      	bne.n	206c0 <create_chain+0x94>
   20698:	4643      	mov	r3, r8
   2069a:	2b00      	cmp	r3, #0
   2069c:	d109      	bne.n	206b2 <create_chain+0x86>
		fs->last_clust = ncl;			/* Update FSINFO */
   2069e:	60ec      	str	r4, [r5, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
   206a0:	692b      	ldr	r3, [r5, #16]
   206a2:	1c5a      	adds	r2, r3, #1
   206a4:	d01b      	beq.n	206de <create_chain+0xb2>
			fs->free_clust--;
   206a6:	3b01      	subs	r3, #1
   206a8:	612b      	str	r3, [r5, #16]
			fs->fsi_flag = 1;
   206aa:	2301      	movs	r3, #1
   206ac:	716b      	strb	r3, [r5, #5]
   206ae:	0020      	movs	r0, r4
   206b0:	e012      	b.n	206d8 <create_chain+0xac>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
   206b2:	0022      	movs	r2, r4
   206b4:	4641      	mov	r1, r8
   206b6:	0028      	movs	r0, r5
   206b8:	4b0c      	ldr	r3, [pc, #48]	; (206ec <create_chain+0xc0>)
   206ba:	4798      	blx	r3
	if (res == FR_OK) {
   206bc:	2800      	cmp	r0, #0
   206be:	d0ee      	beq.n	2069e <create_chain+0x72>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
   206c0:	3801      	subs	r0, #1
   206c2:	4242      	negs	r2, r0
   206c4:	4142      	adcs	r2, r0
   206c6:	4250      	negs	r0, r2
   206c8:	2301      	movs	r3, #1
   206ca:	4318      	orrs	r0, r3
   206cc:	e004      	b.n	206d8 <create_chain+0xac>
		if (cs < 2) return 1;			/* It is an invalid cluster */
   206ce:	2001      	movs	r0, #1
   206d0:	e002      	b.n	206d8 <create_chain+0xac>
			if (ncl > scl) return 0;	/* No free cluster */
   206d2:	2000      	movs	r0, #0
   206d4:	e000      	b.n	206d8 <create_chain+0xac>
		if (ncl == scl) return 0;		/* No free cluster */
   206d6:	2000      	movs	r0, #0
}
   206d8:	bc04      	pop	{r2}
   206da:	4690      	mov	r8, r2
   206dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   206de:	0020      	movs	r0, r4
   206e0:	e7fa      	b.n	206d8 <create_chain+0xac>
   206e2:	46c0      	nop			; (mov r8, r8)
   206e4:	00020351 	.word	0x00020351
   206e8:	0fffffff 	.word	0x0fffffff
   206ec:	000204f5 	.word	0x000204f5

000206f0 <remove_chain>:
{
   206f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   206f2:	46ce      	mov	lr, r9
   206f4:	4647      	mov	r7, r8
   206f6:	b580      	push	{r7, lr}
   206f8:	0004      	movs	r4, r0
   206fa:	000d      	movs	r5, r1
		res = FR_INT_ERR;
   206fc:	2002      	movs	r0, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   206fe:	2901      	cmp	r1, #1
   20700:	d902      	bls.n	20708 <remove_chain+0x18>
   20702:	69a3      	ldr	r3, [r4, #24]
   20704:	4299      	cmp	r1, r3
   20706:	d303      	bcc.n	20710 <remove_chain+0x20>
}
   20708:	bc0c      	pop	{r2, r3}
   2070a:	4690      	mov	r8, r2
   2070c:	4699      	mov	r9, r3
   2070e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			nxt = get_fat(fs, clst);			/* Get cluster status */
   20710:	4f13      	ldr	r7, [pc, #76]	; (20760 <remove_chain+0x70>)
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
   20712:	4b14      	ldr	r3, [pc, #80]	; (20764 <remove_chain+0x74>)
   20714:	4698      	mov	r8, r3
				fs->fsi_flag = 1;
   20716:	2301      	movs	r3, #1
   20718:	4699      	mov	r9, r3
   2071a:	e003      	b.n	20724 <remove_chain+0x34>
   2071c:	0035      	movs	r5, r6
		while (clst < fs->n_fatent) {			/* Not a last link? */
   2071e:	69a3      	ldr	r3, [r4, #24]
   20720:	42b3      	cmp	r3, r6
   20722:	d9f1      	bls.n	20708 <remove_chain+0x18>
			nxt = get_fat(fs, clst);			/* Get cluster status */
   20724:	0029      	movs	r1, r5
   20726:	0020      	movs	r0, r4
   20728:	47b8      	blx	r7
   2072a:	1e06      	subs	r6, r0, #0
			if (nxt == 0) break;				/* Empty cluster? */
   2072c:	d011      	beq.n	20752 <remove_chain+0x62>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
   2072e:	2801      	cmp	r0, #1
   20730:	d011      	beq.n	20756 <remove_chain+0x66>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
   20732:	1c43      	adds	r3, r0, #1
   20734:	d011      	beq.n	2075a <remove_chain+0x6a>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
   20736:	2200      	movs	r2, #0
   20738:	0029      	movs	r1, r5
   2073a:	0020      	movs	r0, r4
   2073c:	47c0      	blx	r8
			if (res != FR_OK) break;
   2073e:	2800      	cmp	r0, #0
   20740:	d1e2      	bne.n	20708 <remove_chain+0x18>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
   20742:	6923      	ldr	r3, [r4, #16]
   20744:	1c5a      	adds	r2, r3, #1
   20746:	d0e9      	beq.n	2071c <remove_chain+0x2c>
				fs->free_clust++;
   20748:	3301      	adds	r3, #1
   2074a:	6123      	str	r3, [r4, #16]
				fs->fsi_flag = 1;
   2074c:	464b      	mov	r3, r9
   2074e:	7163      	strb	r3, [r4, #5]
   20750:	e7e4      	b.n	2071c <remove_chain+0x2c>
   20752:	2000      	movs	r0, #0
   20754:	e7d8      	b.n	20708 <remove_chain+0x18>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
   20756:	2002      	movs	r0, #2
   20758:	e7d6      	b.n	20708 <remove_chain+0x18>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
   2075a:	2001      	movs	r0, #1
   2075c:	e7d4      	b.n	20708 <remove_chain+0x18>
   2075e:	46c0      	nop			; (mov r8, r8)
   20760:	00020351 	.word	0x00020351
   20764:	000204f5 	.word	0x000204f5

00020768 <dir_next>:
{
   20768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2076a:	46d6      	mov	lr, sl
   2076c:	4647      	mov	r7, r8
   2076e:	b580      	push	{r7, lr}
   20770:	0006      	movs	r6, r0
   20772:	000d      	movs	r5, r1
	i = dj->index + 1;
   20774:	88c4      	ldrh	r4, [r0, #6]
   20776:	3401      	adds	r4, #1
   20778:	b2a4      	uxth	r4, r4
		return FR_NO_FILE;
   2077a:	2004      	movs	r0, #4
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   2077c:	2c00      	cmp	r4, #0
   2077e:	d103      	bne.n	20788 <dir_next+0x20>
}
   20780:	bc0c      	pop	{r2, r3}
   20782:	4690      	mov	r8, r2
   20784:	469a      	mov	sl, r3
   20786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   20788:	6933      	ldr	r3, [r6, #16]
   2078a:	2b00      	cmp	r3, #0
   2078c:	d0f8      	beq.n	20780 <dir_next+0x18>
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
   2078e:	270f      	movs	r7, #15
   20790:	4027      	ands	r7, r4
   20792:	d10f      	bne.n	207b4 <dir_next+0x4c>
		dj->sect++;					/* Next sector */
   20794:	3301      	adds	r3, #1
   20796:	6133      	str	r3, [r6, #16]
		if (dj->clust == 0) {	/* Static table */
   20798:	68f1      	ldr	r1, [r6, #12]
   2079a:	2900      	cmp	r1, #0
   2079c:	d104      	bne.n	207a8 <dir_next+0x40>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
   2079e:	6833      	ldr	r3, [r6, #0]
   207a0:	891b      	ldrh	r3, [r3, #8]
   207a2:	42a3      	cmp	r3, r4
   207a4:	d9ec      	bls.n	20780 <dir_next+0x18>
   207a6:	e005      	b.n	207b4 <dir_next+0x4c>
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
   207a8:	6830      	ldr	r0, [r6, #0]
   207aa:	7883      	ldrb	r3, [r0, #2]
   207ac:	3b01      	subs	r3, #1
   207ae:	0922      	lsrs	r2, r4, #4
   207b0:	421a      	tst	r2, r3
   207b2:	d007      	beq.n	207c4 <dir_next+0x5c>
	dj->index = i;
   207b4:	80f4      	strh	r4, [r6, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
   207b6:	6833      	ldr	r3, [r6, #0]
   207b8:	3330      	adds	r3, #48	; 0x30
   207ba:	017f      	lsls	r7, r7, #5
   207bc:	19df      	adds	r7, r3, r7
   207be:	6177      	str	r7, [r6, #20]
	return FR_OK;
   207c0:	2000      	movs	r0, #0
   207c2:	e7dd      	b.n	20780 <dir_next+0x18>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
   207c4:	4b2c      	ldr	r3, [pc, #176]	; (20878 <dir_next+0x110>)
   207c6:	4798      	blx	r3
   207c8:	4680      	mov	r8, r0
				if (clst <= 1) return FR_INT_ERR;
   207ca:	2002      	movs	r0, #2
   207cc:	4643      	mov	r3, r8
   207ce:	2b01      	cmp	r3, #1
   207d0:	d9d6      	bls.n	20780 <dir_next+0x18>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   207d2:	3301      	adds	r3, #1
   207d4:	d04b      	beq.n	2086e <dir_next+0x106>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
   207d6:	6833      	ldr	r3, [r6, #0]
   207d8:	699a      	ldr	r2, [r3, #24]
   207da:	4590      	cmp	r8, r2
   207dc:	d33f      	bcc.n	2085e <dir_next+0xf6>
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
   207de:	3002      	adds	r0, #2
   207e0:	2d00      	cmp	r5, #0
   207e2:	d0cd      	beq.n	20780 <dir_next+0x18>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
   207e4:	68f1      	ldr	r1, [r6, #12]
   207e6:	0018      	movs	r0, r3
   207e8:	4b24      	ldr	r3, [pc, #144]	; (2087c <dir_next+0x114>)
   207ea:	4798      	blx	r3
   207ec:	4680      	mov	r8, r0
					if (clst == 0) return FR_DENIED;			/* No free cluster */
   207ee:	2007      	movs	r0, #7
   207f0:	4643      	mov	r3, r8
   207f2:	2b00      	cmp	r3, #0
   207f4:	d0c4      	beq.n	20780 <dir_next+0x18>
					if (clst == 1) return FR_INT_ERR;
   207f6:	3805      	subs	r0, #5
   207f8:	2b01      	cmp	r3, #1
   207fa:	d0c1      	beq.n	20780 <dir_next+0x18>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   207fc:	3801      	subs	r0, #1
   207fe:	3301      	adds	r3, #1
   20800:	d0be      	beq.n	20780 <dir_next+0x18>
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
   20802:	2100      	movs	r1, #0
   20804:	6830      	ldr	r0, [r6, #0]
   20806:	4b1e      	ldr	r3, [pc, #120]	; (20880 <dir_next+0x118>)
   20808:	4798      	blx	r3
   2080a:	0003      	movs	r3, r0
   2080c:	2001      	movs	r0, #1
   2080e:	2b00      	cmp	r3, #0
   20810:	d1b6      	bne.n	20780 <dir_next+0x18>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
   20812:	6830      	ldr	r0, [r6, #0]
   20814:	3030      	adds	r0, #48	; 0x30
   20816:	2280      	movs	r2, #128	; 0x80
   20818:	0092      	lsls	r2, r2, #2
   2081a:	2100      	movs	r1, #0
   2081c:	4b19      	ldr	r3, [pc, #100]	; (20884 <dir_next+0x11c>)
   2081e:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
   20820:	6835      	ldr	r5, [r6, #0]
   20822:	4641      	mov	r1, r8
   20824:	0028      	movs	r0, r5
   20826:	4b18      	ldr	r3, [pc, #96]	; (20888 <dir_next+0x120>)
   20828:	4798      	blx	r3
   2082a:	62e8      	str	r0, [r5, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   2082c:	2500      	movs	r5, #0
						dj->fs->wflag = 1;
   2082e:	2301      	movs	r3, #1
   20830:	469a      	mov	sl, r3
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   20832:	6833      	ldr	r3, [r6, #0]
   20834:	789a      	ldrb	r2, [r3, #2]
   20836:	42aa      	cmp	r2, r5
   20838:	d90e      	bls.n	20858 <dir_next+0xf0>
						dj->fs->wflag = 1;
   2083a:	4652      	mov	r2, sl
   2083c:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
   2083e:	2100      	movs	r1, #0
   20840:	6830      	ldr	r0, [r6, #0]
   20842:	4b0f      	ldr	r3, [pc, #60]	; (20880 <dir_next+0x118>)
   20844:	4798      	blx	r3
   20846:	2800      	cmp	r0, #0
   20848:	d113      	bne.n	20872 <dir_next+0x10a>
						dj->fs->winsect++;
   2084a:	6832      	ldr	r2, [r6, #0]
   2084c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   2084e:	3301      	adds	r3, #1
   20850:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   20852:	3501      	adds	r5, #1
   20854:	b2ed      	uxtb	r5, r5
   20856:	e7ec      	b.n	20832 <dir_next+0xca>
					dj->fs->winsect -= c;						/* Rewind window address */
   20858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2085a:	1b52      	subs	r2, r2, r5
   2085c:	62da      	str	r2, [r3, #44]	; 0x2c
				dj->clust = clst;				/* Initialize data for new cluster */
   2085e:	4643      	mov	r3, r8
   20860:	60f3      	str	r3, [r6, #12]
				dj->sect = clust2sect(dj->fs, clst);
   20862:	4641      	mov	r1, r8
   20864:	6830      	ldr	r0, [r6, #0]
   20866:	4b08      	ldr	r3, [pc, #32]	; (20888 <dir_next+0x120>)
   20868:	4798      	blx	r3
   2086a:	6130      	str	r0, [r6, #16]
   2086c:	e7a2      	b.n	207b4 <dir_next+0x4c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   2086e:	2001      	movs	r0, #1
   20870:	e786      	b.n	20780 <dir_next+0x18>
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
   20872:	2001      	movs	r0, #1
   20874:	e784      	b.n	20780 <dir_next+0x18>
   20876:	46c0      	nop			; (mov r8, r8)
   20878:	00020351 	.word	0x00020351
   2087c:	0002062d 	.word	0x0002062d
   20880:	000202b1 	.word	0x000202b1
   20884:	0001fde5 	.word	0x0001fde5
   20888:	0001fdf7 	.word	0x0001fdf7

0002088c <dir_find>:
{
   2088c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2088e:	46de      	mov	lr, fp
   20890:	4657      	mov	r7, sl
   20892:	464e      	mov	r6, r9
   20894:	4645      	mov	r5, r8
   20896:	b5e0      	push	{r5, r6, r7, lr}
   20898:	b083      	sub	sp, #12
   2089a:	0005      	movs	r5, r0
	res = dir_sdi(dj, 0);			/* Rewind directory object */
   2089c:	2100      	movs	r1, #0
   2089e:	4b5a      	ldr	r3, [pc, #360]	; (20a08 <dir_find+0x17c>)
   208a0:	4798      	blx	r3
   208a2:	1e07      	subs	r7, r0, #0
	if (res != FR_OK) return res;
   208a4:	d000      	beq.n	208a8 <dir_find+0x1c>
   208a6:	e09e      	b.n	209e6 <dir_find+0x15a>
   208a8:	23ff      	movs	r3, #255	; 0xff
   208aa:	4699      	mov	r9, r3
   208ac:	469a      	mov	sl, r3
		res = move_window(dj->fs, dj->sect);
   208ae:	4b57      	ldr	r3, [pc, #348]	; (20a0c <dir_find+0x180>)
   208b0:	469b      	mov	fp, r3
   208b2:	e01b      	b.n	208ec <dir_find+0x60>
			if (a == AM_LFN) {			/* An LFN entry is found */
   208b4:	2b0f      	cmp	r3, #15
   208b6:	d030      	beq.n	2091a <dir_find+0x8e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   208b8:	4653      	mov	r3, sl
   208ba:	2b00      	cmp	r3, #0
   208bc:	d105      	bne.n	208ca <dir_find+0x3e>
   208be:	0020      	movs	r0, r4
   208c0:	4b53      	ldr	r3, [pc, #332]	; (20a10 <dir_find+0x184>)
   208c2:	4798      	blx	r3
   208c4:	4581      	cmp	r9, r0
   208c6:	d100      	bne.n	208ca <dir_find+0x3e>
   208c8:	e08d      	b.n	209e6 <dir_find+0x15a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   208ca:	2301      	movs	r3, #1
   208cc:	425b      	negs	r3, r3
   208ce:	842b      	strh	r3, [r5, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   208d0:	69a8      	ldr	r0, [r5, #24]
   208d2:	7ac3      	ldrb	r3, [r0, #11]
   208d4:	07db      	lsls	r3, r3, #31
   208d6:	d400      	bmi.n	208da <dir_find+0x4e>
   208d8:	e07d      	b.n	209d6 <dir_find+0x14a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   208da:	23ff      	movs	r3, #255	; 0xff
   208dc:	469a      	mov	sl, r3
		res = dir_next(dj, 0);		/* Next entry */
   208de:	2100      	movs	r1, #0
   208e0:	0028      	movs	r0, r5
   208e2:	4b4c      	ldr	r3, [pc, #304]	; (20a14 <dir_find+0x188>)
   208e4:	4798      	blx	r3
   208e6:	1e07      	subs	r7, r0, #0
	} while (res == FR_OK);
   208e8:	d000      	beq.n	208ec <dir_find+0x60>
   208ea:	e07c      	b.n	209e6 <dir_find+0x15a>
		res = move_window(dj->fs, dj->sect);
   208ec:	6929      	ldr	r1, [r5, #16]
   208ee:	6828      	ldr	r0, [r5, #0]
   208f0:	47d8      	blx	fp
   208f2:	1e07      	subs	r7, r0, #0
		if (res != FR_OK) break;
   208f4:	d177      	bne.n	209e6 <dir_find+0x15a>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
   208f6:	696c      	ldr	r4, [r5, #20]
		c = dir[DIR_Name];
   208f8:	7826      	ldrb	r6, [r4, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   208fa:	2e00      	cmp	r6, #0
   208fc:	d100      	bne.n	20900 <dir_find+0x74>
   208fe:	e080      	b.n	20a02 <dir_find+0x176>
		a = dir[DIR_Attr] & AM_MASK;
   20900:	7ae2      	ldrb	r2, [r4, #11]
   20902:	233f      	movs	r3, #63	; 0x3f
   20904:	4013      	ands	r3, r2
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   20906:	2ee5      	cmp	r6, #229	; 0xe5
   20908:	d100      	bne.n	2090c <dir_find+0x80>
   2090a:	e077      	b.n	209fc <dir_find+0x170>
   2090c:	0712      	lsls	r2, r2, #28
   2090e:	d5d1      	bpl.n	208b4 <dir_find+0x28>
   20910:	2b0f      	cmp	r3, #15
   20912:	d002      	beq.n	2091a <dir_find+0x8e>
			ord = 0xFF;
   20914:	23ff      	movs	r3, #255	; 0xff
   20916:	469a      	mov	sl, r3
   20918:	e7e1      	b.n	208de <dir_find+0x52>
				if (dj->lfn) {
   2091a:	69ef      	ldr	r7, [r5, #28]
   2091c:	2f00      	cmp	r7, #0
   2091e:	d0de      	beq.n	208de <dir_find+0x52>
					if (c & LLE) {		/* Is it start of LFN sequence? */
   20920:	0673      	lsls	r3, r6, #25
   20922:	d518      	bpl.n	20956 <dir_find+0xca>
						sum = dir[LDIR_Chksum];
   20924:	7b63      	ldrb	r3, [r4, #13]
   20926:	4699      	mov	r9, r3
						c &= ~LLE; ord = c;	/* LFN start order */
   20928:	2340      	movs	r3, #64	; 0x40
   2092a:	439e      	bics	r6, r3
						dj->lfn_idx = dj->index;
   2092c:	88eb      	ldrh	r3, [r5, #6]
   2092e:	842b      	strh	r3, [r5, #32]
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   20930:	7b63      	ldrb	r3, [r4, #13]
   20932:	9300      	str	r3, [sp, #0]
   20934:	22ff      	movs	r2, #255	; 0xff
   20936:	4692      	mov	sl, r2
   20938:	454b      	cmp	r3, r9
   2093a:	d1d0      	bne.n	208de <dir_find+0x52>
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
   2093c:	7823      	ldrb	r3, [r4, #0]
   2093e:	3abf      	subs	r2, #191	; 0xbf
   20940:	4393      	bics	r3, r2
   20942:	3b01      	subs	r3, #1
   20944:	005a      	lsls	r2, r3, #1
   20946:	18d2      	adds	r2, r2, r3
   20948:	0092      	lsls	r2, r2, #2
   2094a:	4692      	mov	sl, r2
   2094c:	449a      	add	sl, r3
	s = 0; wc = 1;
   2094e:	2201      	movs	r2, #1
   20950:	2300      	movs	r3, #0
   20952:	4699      	mov	r9, r3
   20954:	e01d      	b.n	20992 <dir_find+0x106>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   20956:	45b2      	cmp	sl, r6
   20958:	d0ea      	beq.n	20930 <dir_find+0xa4>
   2095a:	23ff      	movs	r3, #255	; 0xff
   2095c:	469a      	mov	sl, r3
   2095e:	e7be      	b.n	208de <dir_find+0x52>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
   20960:	4b2d      	ldr	r3, [pc, #180]	; (20a18 <dir_find+0x18c>)
   20962:	4798      	blx	r3
   20964:	9001      	str	r0, [sp, #4]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
   20966:	4653      	mov	r3, sl
   20968:	2bfe      	cmp	r3, #254	; 0xfe
   2096a:	d81f      	bhi.n	209ac <dir_find+0x120>
   2096c:	2301      	movs	r3, #1
   2096e:	4453      	add	r3, sl
   20970:	4698      	mov	r8, r3
   20972:	4653      	mov	r3, sl
   20974:	005b      	lsls	r3, r3, #1
   20976:	5bd8      	ldrh	r0, [r3, r7]
   20978:	4b27      	ldr	r3, [pc, #156]	; (20a18 <dir_find+0x18c>)
   2097a:	4798      	blx	r3
   2097c:	0002      	movs	r2, r0
   2097e:	9b01      	ldr	r3, [sp, #4]
   20980:	4283      	cmp	r3, r0
   20982:	d113      	bne.n	209ac <dir_find+0x120>
   20984:	46c2      	mov	sl, r8
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
   20986:	2301      	movs	r3, #1
   20988:	469c      	mov	ip, r3
   2098a:	44e1      	add	r9, ip
   2098c:	464b      	mov	r3, r9
   2098e:	2b0d      	cmp	r3, #13
   20990:	d011      	beq.n	209b6 <dir_find+0x12a>
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
   20992:	4b22      	ldr	r3, [pc, #136]	; (20a1c <dir_find+0x190>)
   20994:	4649      	mov	r1, r9
   20996:	5cc9      	ldrb	r1, [r1, r3]
   20998:	1863      	adds	r3, r4, r1
   2099a:	785b      	ldrb	r3, [r3, #1]
   2099c:	021b      	lsls	r3, r3, #8
   2099e:	5c60      	ldrb	r0, [r4, r1]
   209a0:	4318      	orrs	r0, r3
		if (wc) {	/* Last char has not been processed */
   209a2:	2a00      	cmp	r2, #0
   209a4:	d1dc      	bne.n	20960 <dir_find+0xd4>
			if (uc != 0xFFFF) return 0;	/* Check filler */
   209a6:	4b1e      	ldr	r3, [pc, #120]	; (20a20 <dir_find+0x194>)
   209a8:	4298      	cmp	r0, r3
   209aa:	d0ec      	beq.n	20986 <dir_find+0xfa>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   209ac:	9b00      	ldr	r3, [sp, #0]
   209ae:	4699      	mov	r9, r3
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   209b0:	23ff      	movs	r3, #255	; 0xff
   209b2:	469a      	mov	sl, r3
   209b4:	e793      	b.n	208de <dir_find+0x52>
	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
   209b6:	7823      	ldrb	r3, [r4, #0]
   209b8:	065b      	lsls	r3, r3, #25
   209ba:	d506      	bpl.n	209ca <dir_find+0x13e>
   209bc:	2a00      	cmp	r2, #0
   209be:	d004      	beq.n	209ca <dir_find+0x13e>
   209c0:	4653      	mov	r3, sl
   209c2:	005b      	lsls	r3, r3, #1
   209c4:	5bdb      	ldrh	r3, [r3, r7]
   209c6:	2b00      	cmp	r3, #0
   209c8:	d1f0      	bne.n	209ac <dir_find+0x120>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   209ca:	3e01      	subs	r6, #1
   209cc:	b2f3      	uxtb	r3, r6
   209ce:	469a      	mov	sl, r3
   209d0:	9b00      	ldr	r3, [sp, #0]
   209d2:	4699      	mov	r9, r3
   209d4:	e783      	b.n	208de <dir_find+0x52>
   209d6:	2300      	movs	r3, #0
	while (cnt-- && (r = *d++ - *s++) == 0) ;
   209d8:	5ce1      	ldrb	r1, [r4, r3]
   209da:	5cc2      	ldrb	r2, [r0, r3]
   209dc:	4291      	cmp	r1, r2
   209de:	d10a      	bne.n	209f6 <dir_find+0x16a>
   209e0:	3301      	adds	r3, #1
   209e2:	2b0b      	cmp	r3, #11
   209e4:	d1f8      	bne.n	209d8 <dir_find+0x14c>
}
   209e6:	0038      	movs	r0, r7
   209e8:	b003      	add	sp, #12
   209ea:	bc3c      	pop	{r2, r3, r4, r5}
   209ec:	4690      	mov	r8, r2
   209ee:	4699      	mov	r9, r3
   209f0:	46a2      	mov	sl, r4
   209f2:	46ab      	mov	fp, r5
   209f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   209f6:	23ff      	movs	r3, #255	; 0xff
   209f8:	469a      	mov	sl, r3
   209fa:	e770      	b.n	208de <dir_find+0x52>
			ord = 0xFF;
   209fc:	23ff      	movs	r3, #255	; 0xff
   209fe:	469a      	mov	sl, r3
   20a00:	e76d      	b.n	208de <dir_find+0x52>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   20a02:	2704      	movs	r7, #4
   20a04:	e7ef      	b.n	209e6 <dir_find+0x15a>
   20a06:	46c0      	nop			; (mov r8, r8)
   20a08:	0002044d 	.word	0x0002044d
   20a0c:	000202b1 	.word	0x000202b1
   20a10:	0001fe0f 	.word	0x0001fe0f
   20a14:	00020769 	.word	0x00020769
   20a18:	000215ed 	.word	0x000215ed
   20a1c:	0002afd8 	.word	0x0002afd8
   20a20:	0000ffff 	.word	0x0000ffff

00020a24 <dir_register>:
{
   20a24:	b5f0      	push	{r4, r5, r6, r7, lr}
   20a26:	46de      	mov	lr, fp
   20a28:	4657      	mov	r7, sl
   20a2a:	464e      	mov	r6, r9
   20a2c:	4645      	mov	r5, r8
   20a2e:	b5e0      	push	{r5, r6, r7, lr}
   20a30:	b089      	sub	sp, #36	; 0x24
   20a32:	0004      	movs	r4, r0
	fn = dj->fn; lfn = dj->lfn;
   20a34:	6987      	ldr	r7, [r0, #24]
   20a36:	69c3      	ldr	r3, [r0, #28]
   20a38:	469a      	mov	sl, r3
	mem_cpy(sn, fn, 12);
   20a3a:	ad05      	add	r5, sp, #20
   20a3c:	220c      	movs	r2, #12
   20a3e:	0039      	movs	r1, r7
   20a40:	0028      	movs	r0, r5
   20a42:	4ba7      	ldr	r3, [pc, #668]	; (20ce0 <dir_register+0x2bc>)
   20a44:	4798      	blx	r3
	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
   20a46:	7aeb      	ldrb	r3, [r5, #11]
   20a48:	07db      	lsls	r3, r3, #31
   20a4a:	d400      	bmi.n	20a4e <dir_register+0x2a>
   20a4c:	e070      	b.n	20b30 <dir_register+0x10c>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
   20a4e:	2300      	movs	r3, #0
   20a50:	72fb      	strb	r3, [r7, #11]
   20a52:	61e3      	str	r3, [r4, #28]
	mem_cpy(dst, src, 11);
   20a54:	220b      	movs	r2, #11
   20a56:	a905      	add	r1, sp, #20
   20a58:	0038      	movs	r0, r7
   20a5a:	4ba1      	ldr	r3, [pc, #644]	; (20ce0 <dir_register+0x2bc>)
   20a5c:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
   20a5e:	2301      	movs	r3, #1
		ns[i--] = c;
   20a60:	ad03      	add	r5, sp, #12
   20a62:	001e      	movs	r6, r3
   20a64:	46a0      	mov	r8, r4
   20a66:	e049      	b.n	20afc <dir_register+0xd8>
   20a68:	3801      	subs	r0, #1
   20a6a:	1829      	adds	r1, r5, r0
   20a6c:	704a      	strb	r2, [r1, #1]
		seq /= 16;
   20a6e:	091b      	lsrs	r3, r3, #4
   20a70:	b29b      	uxth	r3, r3
	} while (seq);
   20a72:	2b00      	cmp	r3, #0
   20a74:	d007      	beq.n	20a86 <dir_register+0x62>
		c = (seq % 16) + '0';
   20a76:	0021      	movs	r1, r4
   20a78:	4019      	ands	r1, r3
   20a7a:	000a      	movs	r2, r1
   20a7c:	3230      	adds	r2, #48	; 0x30
		if (c > '9') c += 7;
   20a7e:	2a39      	cmp	r2, #57	; 0x39
   20a80:	d9f2      	bls.n	20a68 <dir_register+0x44>
   20a82:	3207      	adds	r2, #7
   20a84:	e7f0      	b.n	20a68 <dir_register+0x44>
	ns[i] = '~';
   20a86:	337e      	adds	r3, #126	; 0x7e
   20a88:	542b      	strb	r3, [r5, r0]
	for (j = 0; j < i && dst[j] != ' '; j++) {
   20a8a:	2800      	cmp	r0, #0
   20a8c:	d00a      	beq.n	20aa4 <dir_register+0x80>
   20a8e:	783b      	ldrb	r3, [r7, #0]
   20a90:	2b20      	cmp	r3, #32
   20a92:	d009      	beq.n	20aa8 <dir_register+0x84>
   20a94:	2300      	movs	r3, #0
   20a96:	3301      	adds	r3, #1
   20a98:	4298      	cmp	r0, r3
   20a9a:	d007      	beq.n	20aac <dir_register+0x88>
   20a9c:	5cfa      	ldrb	r2, [r7, r3]
   20a9e:	2a20      	cmp	r2, #32
   20aa0:	d1f9      	bne.n	20a96 <dir_register+0x72>
   20aa2:	e009      	b.n	20ab8 <dir_register+0x94>
   20aa4:	0003      	movs	r3, r0
   20aa6:	e007      	b.n	20ab8 <dir_register+0x94>
   20aa8:	2300      	movs	r3, #0
   20aaa:	e005      	b.n	20ab8 <dir_register+0x94>
   20aac:	0003      	movs	r3, r0
   20aae:	e003      	b.n	20ab8 <dir_register+0x94>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   20ab0:	54fa      	strb	r2, [r7, r3]
   20ab2:	3301      	adds	r3, #1
	} while (j < 8);
   20ab4:	2b07      	cmp	r3, #7
   20ab6:	d805      	bhi.n	20ac4 <dir_register+0xa0>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   20ab8:	2220      	movs	r2, #32
   20aba:	2807      	cmp	r0, #7
   20abc:	d8f8      	bhi.n	20ab0 <dir_register+0x8c>
   20abe:	5c2a      	ldrb	r2, [r5, r0]
   20ac0:	3001      	adds	r0, #1
   20ac2:	e7f5      	b.n	20ab0 <dir_register+0x8c>
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
   20ac4:	4640      	mov	r0, r8
   20ac6:	4b87      	ldr	r3, [pc, #540]	; (20ce4 <dir_register+0x2c0>)
   20ac8:	4798      	blx	r3
			if (res != FR_OK) break;
   20aca:	2800      	cmp	r0, #0
   20acc:	d11c      	bne.n	20b08 <dir_register+0xe4>
		for (n = 1; n < 100; n++) {
   20ace:	3601      	adds	r6, #1
   20ad0:	b2b6      	uxth	r6, r6
   20ad2:	2e64      	cmp	r6, #100	; 0x64
   20ad4:	d015      	beq.n	20b02 <dir_register+0xde>
	mem_cpy(dst, src, 11);
   20ad6:	220b      	movs	r2, #11
   20ad8:	a905      	add	r1, sp, #20
   20ada:	0038      	movs	r0, r7
   20adc:	4b80      	ldr	r3, [pc, #512]	; (20ce0 <dir_register+0x2bc>)
   20ade:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
   20ae0:	0033      	movs	r3, r6
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
   20ae2:	2e05      	cmp	r6, #5
   20ae4:	d90a      	bls.n	20afc <dir_register+0xd8>
   20ae6:	4651      	mov	r1, sl
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
   20ae8:	085a      	lsrs	r2, r3, #1
   20aea:	03db      	lsls	r3, r3, #15
   20aec:	4313      	orrs	r3, r2
   20aee:	880a      	ldrh	r2, [r1, #0]
   20af0:	189b      	adds	r3, r3, r2
   20af2:	b29b      	uxth	r3, r3
   20af4:	3102      	adds	r1, #2
   20af6:	880a      	ldrh	r2, [r1, #0]
   20af8:	2a00      	cmp	r2, #0
   20afa:	d1f5      	bne.n	20ae8 <dir_register+0xc4>
		for (n = 1; n < 100; n++) {
   20afc:	2007      	movs	r0, #7
		c = (seq % 16) + '0';
   20afe:	240f      	movs	r4, #15
   20b00:	e7b9      	b.n	20a76 <dir_register+0x52>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
   20b02:	2307      	movs	r3, #7
   20b04:	4698      	mov	r8, r3
   20b06:	e006      	b.n	20b16 <dir_register+0xf2>
   20b08:	4644      	mov	r4, r8
   20b0a:	4680      	mov	r8, r0
   20b0c:	2e64      	cmp	r6, #100	; 0x64
   20b0e:	d100      	bne.n	20b12 <dir_register+0xee>
   20b10:	e0a5      	b.n	20c5e <dir_register+0x23a>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
   20b12:	2804      	cmp	r0, #4
   20b14:	d007      	beq.n	20b26 <dir_register+0x102>
}
   20b16:	4640      	mov	r0, r8
   20b18:	b009      	add	sp, #36	; 0x24
   20b1a:	bc3c      	pop	{r2, r3, r4, r5}
   20b1c:	4690      	mov	r8, r2
   20b1e:	4699      	mov	r9, r3
   20b20:	46a2      	mov	sl, r4
   20b22:	46ab      	mov	fp, r5
   20b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
		fn[NS] = sn[NS]; dj->lfn = lfn;
   20b26:	ab05      	add	r3, sp, #20
   20b28:	7adb      	ldrb	r3, [r3, #11]
   20b2a:	72fb      	strb	r3, [r7, #11]
   20b2c:	4653      	mov	r3, sl
   20b2e:	61e3      	str	r3, [r4, #28]
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
   20b30:	ab05      	add	r3, sp, #20
   20b32:	7adb      	ldrb	r3, [r3, #11]
		ne = 1;
   20b34:	2201      	movs	r2, #1
   20b36:	4693      	mov	fp, r2
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
   20b38:	079b      	lsls	r3, r3, #30
   20b3a:	d511      	bpl.n	20b60 <dir_register+0x13c>
		for (ne = 0; lfn[ne]; ne++) ;
   20b3c:	4653      	mov	r3, sl
   20b3e:	881b      	ldrh	r3, [r3, #0]
   20b40:	2b00      	cmp	r3, #0
   20b42:	d01b      	beq.n	20b7c <dir_register+0x158>
   20b44:	2000      	movs	r0, #0
   20b46:	4652      	mov	r2, sl
   20b48:	3001      	adds	r0, #1
   20b4a:	b280      	uxth	r0, r0
   20b4c:	0043      	lsls	r3, r0, #1
   20b4e:	5a9b      	ldrh	r3, [r3, r2]
   20b50:	2b00      	cmp	r3, #0
   20b52:	d1f9      	bne.n	20b48 <dir_register+0x124>
		ne = (ne + 25) / 13;
   20b54:	3019      	adds	r0, #25
   20b56:	210d      	movs	r1, #13
   20b58:	4b63      	ldr	r3, [pc, #396]	; (20ce8 <dir_register+0x2c4>)
   20b5a:	4798      	blx	r3
   20b5c:	b283      	uxth	r3, r0
   20b5e:	469b      	mov	fp, r3
	res = dir_sdi(dj, 0);
   20b60:	2100      	movs	r1, #0
   20b62:	0020      	movs	r0, r4
   20b64:	4b61      	ldr	r3, [pc, #388]	; (20cec <dir_register+0x2c8>)
   20b66:	4798      	blx	r3
   20b68:	4680      	mov	r8, r0
	if (res != FR_OK) return res;
   20b6a:	2800      	cmp	r0, #0
   20b6c:	d1d3      	bne.n	20b16 <dir_register+0xf2>
   20b6e:	4682      	mov	sl, r0
   20b70:	2500      	movs	r5, #0
		res = move_window(dj->fs, dj->sect);
   20b72:	4f5f      	ldr	r7, [pc, #380]	; (20cf0 <dir_register+0x2cc>)
			n = 0;					/* Not a blank entry. Restart to search */
   20b74:	2600      	movs	r6, #0
		res = dir_next(dj, 1);		/* Next entry with table stretch */
   20b76:	4b5f      	ldr	r3, [pc, #380]	; (20cf4 <dir_register+0x2d0>)
   20b78:	4699      	mov	r9, r3
   20b7a:	e00b      	b.n	20b94 <dir_register+0x170>
		for (ne = 0; lfn[ne]; ne++) ;
   20b7c:	2000      	movs	r0, #0
   20b7e:	e7e9      	b.n	20b54 <dir_register+0x130>
			if (++n == ne) break;	/* A contiguous entry that required count is found */
   20b80:	1c6b      	adds	r3, r5, #1
   20b82:	b29b      	uxth	r3, r3
   20b84:	459b      	cmp	fp, r3
   20b86:	d06d      	beq.n	20c64 <dir_register+0x240>
   20b88:	001d      	movs	r5, r3
		res = dir_next(dj, 1);		/* Next entry with table stretch */
   20b8a:	2101      	movs	r1, #1
   20b8c:	0020      	movs	r0, r4
   20b8e:	47c8      	blx	r9
	} while (res == FR_OK);
   20b90:	2800      	cmp	r0, #0
   20b92:	d112      	bne.n	20bba <dir_register+0x196>
		res = move_window(dj->fs, dj->sect);
   20b94:	6921      	ldr	r1, [r4, #16]
   20b96:	6820      	ldr	r0, [r4, #0]
   20b98:	47b8      	blx	r7
		if (res != FR_OK) break;
   20b9a:	2800      	cmp	r0, #0
   20b9c:	d000      	beq.n	20ba0 <dir_register+0x17c>
   20b9e:	e098      	b.n	20cd2 <dir_register+0x2ae>
		c = *dj->dir;				/* Check the entry status */
   20ba0:	6963      	ldr	r3, [r4, #20]
   20ba2:	781b      	ldrb	r3, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
   20ba4:	2be5      	cmp	r3, #229	; 0xe5
   20ba6:	d001      	beq.n	20bac <dir_register+0x188>
   20ba8:	2b00      	cmp	r3, #0
   20baa:	d104      	bne.n	20bb6 <dir_register+0x192>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
   20bac:	2d00      	cmp	r5, #0
   20bae:	d1e7      	bne.n	20b80 <dir_register+0x15c>
   20bb0:	88e3      	ldrh	r3, [r4, #6]
   20bb2:	469a      	mov	sl, r3
   20bb4:	e7e4      	b.n	20b80 <dir_register+0x15c>
			n = 0;					/* Not a blank entry. Restart to search */
   20bb6:	0035      	movs	r5, r6
   20bb8:	e7e7      	b.n	20b8a <dir_register+0x166>
   20bba:	4680      	mov	r8, r0
   20bbc:	e7ab      	b.n	20b16 <dir_register+0xf2>
		res = dir_sdi(dj, is);
   20bbe:	4651      	mov	r1, sl
   20bc0:	0020      	movs	r0, r4
   20bc2:	4b4a      	ldr	r3, [pc, #296]	; (20cec <dir_register+0x2c8>)
   20bc4:	4798      	blx	r3
   20bc6:	4680      	mov	r8, r0
		if (res == FR_OK) {
   20bc8:	2800      	cmp	r0, #0
   20bca:	d1a4      	bne.n	20b16 <dir_register+0xf2>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
   20bcc:	69a0      	ldr	r0, [r4, #24]
   20bce:	4b4a      	ldr	r3, [pc, #296]	; (20cf8 <dir_register+0x2d4>)
   20bd0:	4798      	blx	r3
   20bd2:	9001      	str	r0, [sp, #4]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   20bd4:	46a8      	mov	r8, r5
   20bd6:	e01f      	b.n	20c18 <dir_register+0x1f4>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   20bd8:	0022      	movs	r2, r4
   20bda:	e067      	b.n	20cac <dir_register+0x288>
   20bdc:	465e      	mov	r6, fp
   20bde:	4664      	mov	r4, ip
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
   20be0:	4946      	ldr	r1, [pc, #280]	; (20cfc <dir_register+0x2d8>)
   20be2:	428b      	cmp	r3, r1
   20be4:	d003      	beq.n	20bee <dir_register+0x1ca>
   20be6:	0052      	lsls	r2, r2, #1
   20be8:	5b93      	ldrh	r3, [r2, r6]
   20bea:	2b00      	cmp	r3, #0
   20bec:	d103      	bne.n	20bf6 <dir_register+0x1d2>
   20bee:	2340      	movs	r3, #64	; 0x40
   20bf0:	464a      	mov	r2, r9
   20bf2:	431a      	orrs	r2, r3
   20bf4:	4691      	mov	r9, r2
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
   20bf6:	464b      	mov	r3, r9
   20bf8:	7003      	strb	r3, [r0, #0]
				dj->fs->wflag = 1;
   20bfa:	2301      	movs	r3, #1
   20bfc:	6822      	ldr	r2, [r4, #0]
   20bfe:	7113      	strb	r3, [r2, #4]
				res = dir_next(dj, 0);	/* Next entry */
   20c00:	2100      	movs	r1, #0
   20c02:	0020      	movs	r0, r4
   20c04:	4b3b      	ldr	r3, [pc, #236]	; (20cf4 <dir_register+0x2d0>)
   20c06:	4798      	blx	r3
			} while (res == FR_OK && --ne);
   20c08:	2800      	cmp	r0, #0
   20c0a:	d166      	bne.n	20cda <dir_register+0x2b6>
   20c0c:	4645      	mov	r5, r8
   20c0e:	3d01      	subs	r5, #1
   20c10:	b2ab      	uxth	r3, r5
   20c12:	4698      	mov	r8, r3
   20c14:	2b00      	cmp	r3, #0
   20c16:	d027      	beq.n	20c68 <dir_register+0x244>
				res = move_window(dj->fs, dj->sect);
   20c18:	6921      	ldr	r1, [r4, #16]
   20c1a:	6820      	ldr	r0, [r4, #0]
   20c1c:	4b34      	ldr	r3, [pc, #208]	; (20cf0 <dir_register+0x2cc>)
   20c1e:	4798      	blx	r3
				if (res != FR_OK) break;
   20c20:	2800      	cmp	r0, #0
   20c22:	d158      	bne.n	20cd6 <dir_register+0x2b2>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
   20c24:	69e6      	ldr	r6, [r4, #28]
   20c26:	6960      	ldr	r0, [r4, #20]
   20c28:	4643      	mov	r3, r8
   20c2a:	466a      	mov	r2, sp
   20c2c:	70d3      	strb	r3, [r2, #3]
   20c2e:	78d3      	ldrb	r3, [r2, #3]
   20c30:	4699      	mov	r9, r3
	dir[LDIR_Chksum] = sum;			/* Set check sum */
   20c32:	7913      	ldrb	r3, [r2, #4]
   20c34:	7343      	strb	r3, [r0, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
   20c36:	230f      	movs	r3, #15
   20c38:	72c3      	strb	r3, [r0, #11]
	dir[LDIR_Type] = 0;
   20c3a:	2300      	movs	r3, #0
   20c3c:	7303      	strb	r3, [r0, #12]
	ST_WORD(dir+LDIR_FstClusLO, 0);
   20c3e:	7683      	strb	r3, [r0, #26]
   20c40:	76c3      	strb	r3, [r0, #27]
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
   20c42:	464b      	mov	r3, r9
   20c44:	3b01      	subs	r3, #1
   20c46:	005a      	lsls	r2, r3, #1
   20c48:	18d2      	adds	r2, r2, r3
   20c4a:	0092      	lsls	r2, r2, #2
   20c4c:	18d2      	adds	r2, r2, r3
   20c4e:	492c      	ldr	r1, [pc, #176]	; (20d00 <dir_register+0x2dc>)
   20c50:	000d      	movs	r5, r1
   20c52:	350d      	adds	r5, #13
	s = wc = 0;
   20c54:	2300      	movs	r3, #0
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   20c56:	4f29      	ldr	r7, [pc, #164]	; (20cfc <dir_register+0x2d8>)
   20c58:	46b3      	mov	fp, r6
   20c5a:	46a4      	mov	ip, r4
   20c5c:	e029      	b.n	20cb2 <dir_register+0x28e>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
   20c5e:	2307      	movs	r3, #7
   20c60:	4698      	mov	r8, r3
   20c62:	e758      	b.n	20b16 <dir_register+0xf2>
	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
   20c64:	2b01      	cmp	r3, #1
   20c66:	d8aa      	bhi.n	20bbe <dir_register+0x19a>
		res = move_window(dj->fs, dj->sect);
   20c68:	6921      	ldr	r1, [r4, #16]
   20c6a:	6820      	ldr	r0, [r4, #0]
   20c6c:	4b20      	ldr	r3, [pc, #128]	; (20cf0 <dir_register+0x2cc>)
   20c6e:	4798      	blx	r3
   20c70:	4680      	mov	r8, r0
		if (res == FR_OK) {
   20c72:	2800      	cmp	r0, #0
   20c74:	d000      	beq.n	20c78 <dir_register+0x254>
   20c76:	e74e      	b.n	20b16 <dir_register+0xf2>
			dir = dj->dir;
   20c78:	6965      	ldr	r5, [r4, #20]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
   20c7a:	2220      	movs	r2, #32
   20c7c:	2100      	movs	r1, #0
   20c7e:	0028      	movs	r0, r5
   20c80:	4b20      	ldr	r3, [pc, #128]	; (20d04 <dir_register+0x2e0>)
   20c82:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
   20c84:	220b      	movs	r2, #11
   20c86:	69a1      	ldr	r1, [r4, #24]
   20c88:	0028      	movs	r0, r5
   20c8a:	4b15      	ldr	r3, [pc, #84]	; (20ce0 <dir_register+0x2bc>)
   20c8c:	4798      	blx	r3
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
   20c8e:	69a3      	ldr	r3, [r4, #24]
   20c90:	7ada      	ldrb	r2, [r3, #11]
   20c92:	2318      	movs	r3, #24
   20c94:	4013      	ands	r3, r2
   20c96:	732b      	strb	r3, [r5, #12]
			dj->fs->wflag = 1;
   20c98:	6823      	ldr	r3, [r4, #0]
   20c9a:	2201      	movs	r2, #1
   20c9c:	711a      	strb	r2, [r3, #4]
   20c9e:	e73a      	b.n	20b16 <dir_register+0xf2>
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   20ca0:	780c      	ldrb	r4, [r1, #0]
   20ca2:	26ff      	movs	r6, #255	; 0xff
   20ca4:	5506      	strb	r6, [r0, r4]
   20ca6:	1904      	adds	r4, r0, r4
   20ca8:	26ff      	movs	r6, #255	; 0xff
   20caa:	7066      	strb	r6, [r4, #1]
   20cac:	3101      	adds	r1, #1
	} while (++s < 13);
   20cae:	42a9      	cmp	r1, r5
   20cb0:	d094      	beq.n	20bdc <dir_register+0x1b8>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   20cb2:	42bb      	cmp	r3, r7
   20cb4:	d0f4      	beq.n	20ca0 <dir_register+0x27c>
   20cb6:	1c54      	adds	r4, r2, #1
   20cb8:	0052      	lsls	r2, r2, #1
   20cba:	465b      	mov	r3, fp
   20cbc:	5ad3      	ldrh	r3, [r2, r3]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   20cbe:	780a      	ldrb	r2, [r1, #0]
   20cc0:	5483      	strb	r3, [r0, r2]
   20cc2:	1882      	adds	r2, r0, r2
   20cc4:	0a1e      	lsrs	r6, r3, #8
   20cc6:	7056      	strb	r6, [r2, #1]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   20cc8:	2b00      	cmp	r3, #0
   20cca:	d185      	bne.n	20bd8 <dir_register+0x1b4>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   20ccc:	0022      	movs	r2, r4
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   20cce:	003b      	movs	r3, r7
   20cd0:	e7ec      	b.n	20cac <dir_register+0x288>
   20cd2:	4680      	mov	r8, r0
   20cd4:	e71f      	b.n	20b16 <dir_register+0xf2>
   20cd6:	4680      	mov	r8, r0
   20cd8:	e71d      	b.n	20b16 <dir_register+0xf2>
   20cda:	4680      	mov	r8, r0
   20cdc:	e71b      	b.n	20b16 <dir_register+0xf2>
   20cde:	46c0      	nop			; (mov r8, r8)
   20ce0:	0001fdd1 	.word	0x0001fdd1
   20ce4:	0002088d 	.word	0x0002088d
   20ce8:	00024169 	.word	0x00024169
   20cec:	0002044d 	.word	0x0002044d
   20cf0:	000202b1 	.word	0x000202b1
   20cf4:	00020769 	.word	0x00020769
   20cf8:	0001fe0f 	.word	0x0001fe0f
   20cfc:	0000ffff 	.word	0x0000ffff
   20d00:	0002afd8 	.word	0x0002afd8
   20d04:	0001fde5 	.word	0x0001fde5

00020d08 <sync>:
{
   20d08:	b570      	push	{r4, r5, r6, lr}
   20d0a:	0004      	movs	r4, r0
	res = move_window(fs, 0);
   20d0c:	2100      	movs	r1, #0
   20d0e:	4b2c      	ldr	r3, [pc, #176]	; (20dc0 <sync+0xb8>)
   20d10:	4798      	blx	r3
	if (res == FR_OK) {
   20d12:	2800      	cmp	r0, #0
   20d14:	d10a      	bne.n	20d2c <sync+0x24>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
   20d16:	7823      	ldrb	r3, [r4, #0]
   20d18:	2b03      	cmp	r3, #3
   20d1a:	d008      	beq.n	20d2e <sync+0x26>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
   20d1c:	7860      	ldrb	r0, [r4, #1]
   20d1e:	2200      	movs	r2, #0
   20d20:	2100      	movs	r1, #0
   20d22:	4b28      	ldr	r3, [pc, #160]	; (20dc4 <sync+0xbc>)
   20d24:	4798      	blx	r3
   20d26:	1e43      	subs	r3, r0, #1
   20d28:	4198      	sbcs	r0, r3
	res = move_window(fs, 0);
   20d2a:	b2c0      	uxtb	r0, r0
}
   20d2c:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
   20d2e:	7963      	ldrb	r3, [r4, #5]
   20d30:	2b00      	cmp	r3, #0
   20d32:	d0f3      	beq.n	20d1c <sync+0x14>
			fs->winsect = 0;
   20d34:	2600      	movs	r6, #0
   20d36:	62e6      	str	r6, [r4, #44]	; 0x2c
			mem_set(fs->win, 0, 512);
   20d38:	0025      	movs	r5, r4
   20d3a:	3530      	adds	r5, #48	; 0x30
   20d3c:	2280      	movs	r2, #128	; 0x80
   20d3e:	0092      	lsls	r2, r2, #2
   20d40:	2100      	movs	r1, #0
   20d42:	0028      	movs	r0, r5
   20d44:	4b20      	ldr	r3, [pc, #128]	; (20dc8 <sync+0xc0>)
   20d46:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
   20d48:	2255      	movs	r2, #85	; 0x55
   20d4a:	4b20      	ldr	r3, [pc, #128]	; (20dcc <sync+0xc4>)
   20d4c:	54e2      	strb	r2, [r4, r3]
   20d4e:	3255      	adds	r2, #85	; 0x55
   20d50:	4b1f      	ldr	r3, [pc, #124]	; (20dd0 <sync+0xc8>)
   20d52:	54e2      	strb	r2, [r4, r3]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
   20d54:	3bde      	subs	r3, #222	; 0xde
   20d56:	3bff      	subs	r3, #255	; 0xff
   20d58:	3a7a      	subs	r2, #122	; 0x7a
   20d5a:	54a3      	strb	r3, [r4, r2]
   20d5c:	3201      	adds	r2, #1
   20d5e:	54a3      	strb	r3, [r4, r2]
   20d60:	330f      	adds	r3, #15
   20d62:	3201      	adds	r2, #1
   20d64:	54a3      	strb	r3, [r4, r2]
   20d66:	320f      	adds	r2, #15
   20d68:	2133      	movs	r1, #51	; 0x33
   20d6a:	5462      	strb	r2, [r4, r1]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
   20d6c:	313f      	adds	r1, #63	; 0x3f
   20d6e:	2085      	movs	r0, #133	; 0x85
   20d70:	0080      	lsls	r0, r0, #2
   20d72:	5421      	strb	r1, [r4, r0]
   20d74:	4817      	ldr	r0, [pc, #92]	; (20dd4 <sync+0xcc>)
   20d76:	5421      	strb	r1, [r4, r0]
   20d78:	4917      	ldr	r1, [pc, #92]	; (20dd8 <sync+0xd0>)
   20d7a:	5462      	strb	r2, [r4, r1]
   20d7c:	4a17      	ldr	r2, [pc, #92]	; (20ddc <sync+0xd4>)
   20d7e:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
   20d80:	6923      	ldr	r3, [r4, #16]
   20d82:	3201      	adds	r2, #1
   20d84:	54a3      	strb	r3, [r4, r2]
   20d86:	0a19      	lsrs	r1, r3, #8
   20d88:	4a15      	ldr	r2, [pc, #84]	; (20de0 <sync+0xd8>)
   20d8a:	54a1      	strb	r1, [r4, r2]
   20d8c:	0c19      	lsrs	r1, r3, #16
   20d8e:	4a15      	ldr	r2, [pc, #84]	; (20de4 <sync+0xdc>)
   20d90:	54a1      	strb	r1, [r4, r2]
   20d92:	0e1b      	lsrs	r3, r3, #24
   20d94:	4a14      	ldr	r2, [pc, #80]	; (20de8 <sync+0xe0>)
   20d96:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
   20d98:	68e3      	ldr	r3, [r4, #12]
   20d9a:	3201      	adds	r2, #1
   20d9c:	54a3      	strb	r3, [r4, r2]
   20d9e:	0a19      	lsrs	r1, r3, #8
   20da0:	4a12      	ldr	r2, [pc, #72]	; (20dec <sync+0xe4>)
   20da2:	54a1      	strb	r1, [r4, r2]
   20da4:	0c19      	lsrs	r1, r3, #16
   20da6:	4a12      	ldr	r2, [pc, #72]	; (20df0 <sync+0xe8>)
   20da8:	54a1      	strb	r1, [r4, r2]
   20daa:	0e1b      	lsrs	r3, r3, #24
   20dac:	4a11      	ldr	r2, [pc, #68]	; (20df4 <sync+0xec>)
   20dae:	54a3      	strb	r3, [r4, r2]
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
   20db0:	7860      	ldrb	r0, [r4, #1]
   20db2:	2301      	movs	r3, #1
   20db4:	6962      	ldr	r2, [r4, #20]
   20db6:	0029      	movs	r1, r5
   20db8:	4d0f      	ldr	r5, [pc, #60]	; (20df8 <sync+0xf0>)
   20dba:	47a8      	blx	r5
			fs->fsi_flag = 0;
   20dbc:	7166      	strb	r6, [r4, #5]
   20dbe:	e7ad      	b.n	20d1c <sync+0x14>
   20dc0:	000202b1 	.word	0x000202b1
   20dc4:	0001fd15 	.word	0x0001fd15
   20dc8:	0001fde5 	.word	0x0001fde5
   20dcc:	0000022e 	.word	0x0000022e
   20dd0:	0000022f 	.word	0x0000022f
   20dd4:	00000215 	.word	0x00000215
   20dd8:	00000216 	.word	0x00000216
   20ddc:	00000217 	.word	0x00000217
   20de0:	00000219 	.word	0x00000219
   20de4:	0000021a 	.word	0x0000021a
   20de8:	0000021b 	.word	0x0000021b
   20dec:	0000021d 	.word	0x0000021d
   20df0:	0000021e 	.word	0x0000021e
   20df4:	0000021f 	.word	0x0000021f
   20df8:	0001fc91 	.word	0x0001fc91

00020dfc <follow_path>:
{
   20dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
   20dfe:	46de      	mov	lr, fp
   20e00:	4657      	mov	r7, sl
   20e02:	464e      	mov	r6, r9
   20e04:	4645      	mov	r5, r8
   20e06:	b5e0      	push	{r5, r6, r7, lr}
   20e08:	b083      	sub	sp, #12
   20e0a:	4682      	mov	sl, r0
   20e0c:	000d      	movs	r5, r1
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
   20e0e:	780b      	ldrb	r3, [r1, #0]
   20e10:	2b2f      	cmp	r3, #47	; 0x2f
   20e12:	d00f      	beq.n	20e34 <follow_path+0x38>
   20e14:	2b5c      	cmp	r3, #92	; 0x5c
   20e16:	d00d      	beq.n	20e34 <follow_path+0x38>
	dj->sclust = 0;						/* Start from the root dir */
   20e18:	2300      	movs	r3, #0
   20e1a:	4652      	mov	r2, sl
   20e1c:	6093      	str	r3, [r2, #8]
	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
   20e1e:	782b      	ldrb	r3, [r5, #0]
   20e20:	4657      	mov	r7, sl
   20e22:	2b1f      	cmp	r3, #31
   20e24:	d809      	bhi.n	20e3a <follow_path+0x3e>
		res = dir_sdi(dj, 0);
   20e26:	2100      	movs	r1, #0
   20e28:	4650      	mov	r0, sl
   20e2a:	4bb2      	ldr	r3, [pc, #712]	; (210f4 <follow_path+0x2f8>)
   20e2c:	4798      	blx	r3
		dj->dir = 0;
   20e2e:	2300      	movs	r3, #0
   20e30:	617b      	str	r3, [r7, #20]
   20e32:	e13a      	b.n	210aa <follow_path+0x2ae>
		path++;
   20e34:	3501      	adds	r5, #1
   20e36:	e7ef      	b.n	20e18 <follow_path+0x1c>
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
   20e38:	3501      	adds	r5, #1
   20e3a:	7828      	ldrb	r0, [r5, #0]
   20e3c:	282f      	cmp	r0, #47	; 0x2f
   20e3e:	d0fb      	beq.n	20e38 <follow_path+0x3c>
   20e40:	285c      	cmp	r0, #92	; 0x5c
   20e42:	d0f9      	beq.n	20e38 <follow_path+0x3c>
	lfn = dj->lfn;
   20e44:	69fb      	ldr	r3, [r7, #28]
   20e46:	469a      	mov	sl, r3
		w = p[si++];					/* Get a character */
   20e48:	b280      	uxth	r0, r0
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
   20e4a:	281f      	cmp	r0, #31
   20e4c:	d800      	bhi.n	20e50 <follow_path+0x54>
   20e4e:	e13b      	b.n	210c8 <follow_path+0x2cc>
   20e50:	282f      	cmp	r0, #47	; 0x2f
   20e52:	d100      	bne.n	20e56 <follow_path+0x5a>
   20e54:	e13b      	b.n	210ce <follow_path+0x2d2>
   20e56:	285c      	cmp	r0, #92	; 0x5c
   20e58:	d100      	bne.n	20e5c <follow_path+0x60>
   20e5a:	e13b      	b.n	210d4 <follow_path+0x2d8>
   20e5c:	1c6e      	adds	r6, r5, #1
   20e5e:	2401      	movs	r4, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
   20e60:	2380      	movs	r3, #128	; 0x80
   20e62:	005b      	lsls	r3, r3, #1
   20e64:	4698      	mov	r8, r3
   20e66:	46bb      	mov	fp, r7
   20e68:	002b      	movs	r3, r5
   20e6a:	0025      	movs	r5, r4
   20e6c:	0034      	movs	r4, r6
   20e6e:	4656      	mov	r6, sl
   20e70:	4699      	mov	r9, r3
   20e72:	e011      	b.n	20e98 <follow_path+0x9c>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
   20e74:	2b00      	cmp	r3, #0
   20e76:	d135      	bne.n	20ee4 <follow_path+0xe8>
		lfn[di++] = w;					/* Store the Unicode char */
   20e78:	8030      	strh	r0, [r6, #0]
		w = p[si++];					/* Get a character */
   20e7a:	1c6b      	adds	r3, r5, #1
   20e7c:	7820      	ldrb	r0, [r4, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
   20e7e:	281f      	cmp	r0, #31
   20e80:	d91e      	bls.n	20ec0 <follow_path+0xc4>
   20e82:	282f      	cmp	r0, #47	; 0x2f
   20e84:	d100      	bne.n	20e88 <follow_path+0x8c>
   20e86:	e128      	b.n	210da <follow_path+0x2de>
   20e88:	285c      	cmp	r0, #92	; 0x5c
   20e8a:	d100      	bne.n	20e8e <follow_path+0x92>
   20e8c:	e142      	b.n	21114 <follow_path+0x318>
   20e8e:	3602      	adds	r6, #2
   20e90:	3401      	adds	r4, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
   20e92:	4543      	cmp	r3, r8
   20e94:	d026      	beq.n	20ee4 <follow_path+0xe8>
		w = p[si++];					/* Get a character */
   20e96:	001d      	movs	r5, r3
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
   20e98:	2101      	movs	r1, #1
   20e9a:	4b97      	ldr	r3, [pc, #604]	; (210f8 <follow_path+0x2fc>)
   20e9c:	4798      	blx	r3
   20e9e:	1e01      	subs	r1, r0, #0
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
   20ea0:	d020      	beq.n	20ee4 <follow_path+0xe8>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
   20ea2:	287f      	cmp	r0, #127	; 0x7f
   20ea4:	d8e8      	bhi.n	20e78 <follow_path+0x7c>
	while (*str && *str != chr) str++;
   20ea6:	2822      	cmp	r0, #34	; 0x22
   20ea8:	d100      	bne.n	20eac <follow_path+0xb0>
   20eaa:	e0fd      	b.n	210a8 <follow_path+0x2ac>
   20eac:	232a      	movs	r3, #42	; 0x2a
   20eae:	4a93      	ldr	r2, [pc, #588]	; (210fc <follow_path+0x300>)
   20eb0:	b29f      	uxth	r7, r3
   20eb2:	428f      	cmp	r7, r1
   20eb4:	d0de      	beq.n	20e74 <follow_path+0x78>
   20eb6:	3201      	adds	r2, #1
   20eb8:	7813      	ldrb	r3, [r2, #0]
   20eba:	2b00      	cmp	r3, #0
   20ebc:	d1f8      	bne.n	20eb0 <follow_path+0xb4>
   20ebe:	e7db      	b.n	20e78 <follow_path+0x7c>
   20ec0:	002c      	movs	r4, r5
   20ec2:	465f      	mov	r7, fp
   20ec4:	464d      	mov	r5, r9
	*path = &p[si];						/* Return pointer to the next segment */
   20ec6:	18ed      	adds	r5, r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   20ec8:	2604      	movs	r6, #4
   20eca:	e10b      	b.n	210e4 <follow_path+0x2e8>
		di--;
   20ecc:	3c01      	subs	r4, #1
   20ece:	3b02      	subs	r3, #2
	while (di) {						/* Strip trailing spaces and dots */
   20ed0:	2c00      	cmp	r4, #0
   20ed2:	d100      	bne.n	20ed6 <follow_path+0xda>
   20ed4:	e0e8      	b.n	210a8 <follow_path+0x2ac>
		w = lfn[di-1];
   20ed6:	881a      	ldrh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
   20ed8:	2a20      	cmp	r2, #32
   20eda:	d0f7      	beq.n	20ecc <follow_path+0xd0>
   20edc:	2a2e      	cmp	r2, #46	; 0x2e
   20ede:	d0f5      	beq.n	20ecc <follow_path+0xd0>
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
   20ee0:	2c00      	cmp	r4, #0
   20ee2:	d101      	bne.n	20ee8 <follow_path+0xec>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
   20ee4:	2006      	movs	r0, #6
	return res;
   20ee6:	e0e0      	b.n	210aa <follow_path+0x2ae>
	lfn[di] = 0;						/* LFN is created */
   20ee8:	0063      	lsls	r3, r4, #1
   20eea:	4698      	mov	r8, r3
   20eec:	2300      	movs	r3, #0
   20eee:	4652      	mov	r2, sl
   20ef0:	4641      	mov	r1, r8
   20ef2:	5253      	strh	r3, [r2, r1]
	mem_set(dj->fn, ' ', 11);
   20ef4:	220b      	movs	r2, #11
   20ef6:	2120      	movs	r1, #32
   20ef8:	69b8      	ldr	r0, [r7, #24]
   20efa:	4b81      	ldr	r3, [pc, #516]	; (21100 <follow_path+0x304>)
   20efc:	4798      	blx	r3
   20efe:	4652      	mov	r2, sl
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
   20f00:	2300      	movs	r3, #0
   20f02:	e001      	b.n	20f08 <follow_path+0x10c>
   20f04:	3301      	adds	r3, #1
   20f06:	3202      	adds	r2, #2
   20f08:	8811      	ldrh	r1, [r2, #0]
   20f0a:	2920      	cmp	r1, #32
   20f0c:	d0fa      	beq.n	20f04 <follow_path+0x108>
   20f0e:	292e      	cmp	r1, #46	; 0x2e
   20f10:	d0f8      	beq.n	20f04 <follow_path+0x108>
	if (si) cf |= NS_LOSS | NS_LFN;
   20f12:	2b00      	cmp	r3, #0
   20f14:	d001      	beq.n	20f1a <follow_path+0x11e>
   20f16:	2203      	movs	r2, #3
   20f18:	4316      	orrs	r6, r2
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
   20f1a:	4652      	mov	r2, sl
   20f1c:	4442      	add	r2, r8
   20f1e:	3a02      	subs	r2, #2
   20f20:	8812      	ldrh	r2, [r2, #0]
   20f22:	2a2e      	cmp	r2, #46	; 0x2e
   20f24:	d009      	beq.n	20f3a <follow_path+0x13e>
   20f26:	4642      	mov	r2, r8
   20f28:	3a04      	subs	r2, #4
   20f2a:	4452      	add	r2, sl
   20f2c:	3c01      	subs	r4, #1
   20f2e:	2c00      	cmp	r4, #0
   20f30:	d003      	beq.n	20f3a <follow_path+0x13e>
   20f32:	3a02      	subs	r2, #2
   20f34:	8851      	ldrh	r1, [r2, #2]
   20f36:	292e      	cmp	r1, #46	; 0x2e
   20f38:	d1f8      	bne.n	20f2c <follow_path+0x130>
		dj->fn[i++] = (BYTE)w;
   20f3a:	2208      	movs	r2, #8
   20f3c:	9201      	str	r2, [sp, #4]
   20f3e:	2200      	movs	r2, #0
   20f40:	4693      	mov	fp, r2
   20f42:	4691      	mov	r9, r2
   20f44:	46a0      	mov	r8, r4
   20f46:	e006      	b.n	20f56 <follow_path+0x15a>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
   20f48:	4544      	cmp	r4, r8
   20f4a:	d100      	bne.n	20f4e <follow_path+0x152>
   20f4c:	e0e6      	b.n	2111c <follow_path+0x320>
			cf |= NS_LOSS | NS_LFN; continue;
   20f4e:	2303      	movs	r3, #3
   20f50:	431e      	orrs	r6, r3
   20f52:	b2f6      	uxtb	r6, r6
		w = lfn[si++];					/* Get an LFN char */
   20f54:	0023      	movs	r3, r4
   20f56:	1c5c      	adds	r4, r3, #1
   20f58:	005b      	lsls	r3, r3, #1
   20f5a:	4652      	mov	r2, sl
   20f5c:	5a98      	ldrh	r0, [r3, r2]
		if (!w) break;					/* Break on end of the LFN */
   20f5e:	2800      	cmp	r0, #0
   20f60:	d02c      	beq.n	20fbc <follow_path+0x1c0>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
   20f62:	2820      	cmp	r0, #32
   20f64:	d0f3      	beq.n	20f4e <follow_path+0x152>
   20f66:	282e      	cmp	r0, #46	; 0x2e
   20f68:	d0ee      	beq.n	20f48 <follow_path+0x14c>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
   20f6a:	9b01      	ldr	r3, [sp, #4]
   20f6c:	459b      	cmp	fp, r3
   20f6e:	d219      	bcs.n	20fa4 <follow_path+0x1a8>
   20f70:	4544      	cmp	r4, r8
   20f72:	d100      	bne.n	20f76 <follow_path+0x17a>
   20f74:	e0d2      	b.n	2111c <follow_path+0x320>
		if (w >= 0x80) {				/* Non ASCII char */
   20f76:	287f      	cmp	r0, #127	; 0x7f
   20f78:	d85e      	bhi.n	21038 <follow_path+0x23c>
	while (*str && *str != chr) str++;
   20f7a:	282b      	cmp	r0, #43	; 0x2b
   20f7c:	d06e      	beq.n	2105c <follow_path+0x260>
   20f7e:	232c      	movs	r3, #44	; 0x2c
   20f80:	4a60      	ldr	r2, [pc, #384]	; (21104 <follow_path+0x308>)
   20f82:	b299      	uxth	r1, r3
   20f84:	4281      	cmp	r1, r0
   20f86:	d067      	beq.n	21058 <follow_path+0x25c>
   20f88:	3201      	adds	r2, #1
   20f8a:	7813      	ldrb	r3, [r2, #0]
   20f8c:	2b00      	cmp	r3, #0
   20f8e:	d1f8      	bne.n	20f82 <follow_path+0x186>
				if (IsUpper(w)) {		/* ASCII large capital */
   20f90:	0003      	movs	r3, r0
   20f92:	3b41      	subs	r3, #65	; 0x41
   20f94:	b29b      	uxth	r3, r3
   20f96:	2b19      	cmp	r3, #25
   20f98:	d86c      	bhi.n	21074 <follow_path+0x278>
					b |= 2;
   20f9a:	2302      	movs	r3, #2
   20f9c:	464a      	mov	r2, r9
   20f9e:	431a      	orrs	r2, r3
   20fa0:	4691      	mov	r9, r2
   20fa2:	e05f      	b.n	21064 <follow_path+0x268>
			if (ni == 11) {				/* Long extension */
   20fa4:	9b01      	ldr	r3, [sp, #4]
   20fa6:	2b0b      	cmp	r3, #11
   20fa8:	d03b      	beq.n	21022 <follow_path+0x226>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
   20faa:	4544      	cmp	r4, r8
   20fac:	d100      	bne.n	20fb0 <follow_path+0x1b4>
   20fae:	e0b9      	b.n	21124 <follow_path+0x328>
   20fb0:	2303      	movs	r3, #3
   20fb2:	431e      	orrs	r6, r3
   20fb4:	b2f6      	uxtb	r6, r6
			if (si > di) break;			/* No extension */
   20fb6:	4544      	cmp	r4, r8
   20fb8:	d800      	bhi.n	20fbc <follow_path+0x1c0>
   20fba:	e0b3      	b.n	21124 <follow_path+0x328>
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
   20fbc:	69bb      	ldr	r3, [r7, #24]
   20fbe:	781a      	ldrb	r2, [r3, #0]
   20fc0:	2ae5      	cmp	r2, #229	; 0xe5
   20fc2:	d036      	beq.n	21032 <follow_path+0x236>
	if (ni == 8) b <<= 2;
   20fc4:	9b01      	ldr	r3, [sp, #4]
   20fc6:	2b08      	cmp	r3, #8
   20fc8:	d060      	beq.n	2108c <follow_path+0x290>
   20fca:	230c      	movs	r3, #12
   20fcc:	464a      	mov	r2, r9
   20fce:	4013      	ands	r3, r2
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
   20fd0:	2b0c      	cmp	r3, #12
   20fd2:	d060      	beq.n	21096 <follow_path+0x29a>
   20fd4:	43d2      	mvns	r2, r2
   20fd6:	0792      	lsls	r2, r2, #30
   20fd8:	d05d      	beq.n	21096 <follow_path+0x29a>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
   20fda:	07b2      	lsls	r2, r6, #30
   20fdc:	d406      	bmi.n	20fec <follow_path+0x1f0>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
   20fde:	2203      	movs	r2, #3
   20fe0:	4649      	mov	r1, r9
   20fe2:	400a      	ands	r2, r1
   20fe4:	2a01      	cmp	r2, #1
   20fe6:	d059      	beq.n	2109c <follow_path+0x2a0>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
   20fe8:	2b04      	cmp	r3, #4
   20fea:	d05a      	beq.n	210a2 <follow_path+0x2a6>
	dj->fn[NS] = cf;	/* SFN is created */
   20fec:	69bb      	ldr	r3, [r7, #24]
   20fee:	72de      	strb	r6, [r3, #11]
			res = dir_find(dj);				/* Find it */
   20ff0:	0038      	movs	r0, r7
   20ff2:	4b45      	ldr	r3, [pc, #276]	; (21108 <follow_path+0x30c>)
   20ff4:	4798      	blx	r3
			ns = *(dj->fn+NS);
   20ff6:	69bb      	ldr	r3, [r7, #24]
   20ff8:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
   20ffa:	2800      	cmp	r0, #0
   20ffc:	d15c      	bne.n	210b8 <follow_path+0x2bc>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   20ffe:	075b      	lsls	r3, r3, #29
   21000:	d453      	bmi.n	210aa <follow_path+0x2ae>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
   21002:	697a      	ldr	r2, [r7, #20]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
   21004:	7ad3      	ldrb	r3, [r2, #11]
   21006:	06db      	lsls	r3, r3, #27
   21008:	d55c      	bpl.n	210c4 <follow_path+0x2c8>
			dj->sclust = LD_CLUST(dir);
   2100a:	7d51      	ldrb	r1, [r2, #21]
   2100c:	0209      	lsls	r1, r1, #8
   2100e:	7d13      	ldrb	r3, [r2, #20]
   21010:	430b      	orrs	r3, r1
   21012:	041b      	lsls	r3, r3, #16
   21014:	7ed1      	ldrb	r1, [r2, #27]
   21016:	0209      	lsls	r1, r1, #8
   21018:	7e92      	ldrb	r2, [r2, #26]
   2101a:	430a      	orrs	r2, r1
   2101c:	4313      	orrs	r3, r2
   2101e:	60bb      	str	r3, [r7, #8]
			res = create_name(dj, &path);	/* Get a segment */
   21020:	e70b      	b.n	20e3a <follow_path+0x3e>
				cf |= NS_LOSS | NS_LFN; break;
   21022:	2303      	movs	r3, #3
   21024:	431e      	orrs	r6, r3
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
   21026:	69bb      	ldr	r3, [r7, #24]
   21028:	781a      	ldrb	r2, [r3, #0]
   2102a:	2ae5      	cmp	r2, #229	; 0xe5
   2102c:	d1cd      	bne.n	20fca <follow_path+0x1ce>
   2102e:	220b      	movs	r2, #11
   21030:	9201      	str	r2, [sp, #4]
   21032:	2205      	movs	r2, #5
   21034:	701a      	strb	r2, [r3, #0]
   21036:	e7c5      	b.n	20fc4 <follow_path+0x1c8>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
   21038:	2100      	movs	r1, #0
   2103a:	4b2f      	ldr	r3, [pc, #188]	; (210f8 <follow_path+0x2fc>)
   2103c:	4798      	blx	r3
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
   2103e:	2800      	cmp	r0, #0
   21040:	d100      	bne.n	21044 <follow_path+0x248>
   21042:	e079      	b.n	21138 <follow_path+0x33c>
   21044:	4b31      	ldr	r3, [pc, #196]	; (2110c <follow_path+0x310>)
   21046:	469c      	mov	ip, r3
   21048:	4460      	add	r0, ip
   2104a:	3880      	subs	r0, #128	; 0x80
   2104c:	7800      	ldrb	r0, [r0, #0]
			cf |= NS_LFN;				/* Force create LFN entry */
   2104e:	2302      	movs	r3, #2
   21050:	431e      	orrs	r6, r3
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
   21052:	2800      	cmp	r0, #0
   21054:	d002      	beq.n	2105c <follow_path+0x260>
   21056:	e790      	b.n	20f7a <follow_path+0x17e>
   21058:	2b00      	cmp	r3, #0
   2105a:	d099      	beq.n	20f90 <follow_path+0x194>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
   2105c:	2303      	movs	r3, #3
   2105e:	431e      	orrs	r6, r3
   21060:	b2f6      	uxtb	r6, r6
   21062:	205f      	movs	r0, #95	; 0x5f
		dj->fn[i++] = (BYTE)w;
   21064:	69bb      	ldr	r3, [r7, #24]
   21066:	465a      	mov	r2, fp
   21068:	5498      	strb	r0, [r3, r2]
		w = lfn[si++];					/* Get an LFN char */
   2106a:	0023      	movs	r3, r4
		dj->fn[i++] = (BYTE)w;
   2106c:	2201      	movs	r2, #1
   2106e:	4694      	mov	ip, r2
   21070:	44e3      	add	fp, ip
   21072:	e770      	b.n	20f56 <follow_path+0x15a>
					if (IsLower(w)) {	/* ASCII small capital */
   21074:	0003      	movs	r3, r0
   21076:	3b61      	subs	r3, #97	; 0x61
   21078:	b29b      	uxth	r3, r3
   2107a:	2b19      	cmp	r3, #25
   2107c:	d8f2      	bhi.n	21064 <follow_path+0x268>
						b |= 1; w -= 0x20;
   2107e:	2301      	movs	r3, #1
   21080:	464a      	mov	r2, r9
   21082:	431a      	orrs	r2, r3
   21084:	4691      	mov	r9, r2
   21086:	3820      	subs	r0, #32
   21088:	b280      	uxth	r0, r0
   2108a:	e7eb      	b.n	21064 <follow_path+0x268>
	if (ni == 8) b <<= 2;
   2108c:	464b      	mov	r3, r9
   2108e:	009b      	lsls	r3, r3, #2
   21090:	b2db      	uxtb	r3, r3
   21092:	4699      	mov	r9, r3
   21094:	e799      	b.n	20fca <follow_path+0x1ce>
		cf |= NS_LFN;
   21096:	2202      	movs	r2, #2
   21098:	4316      	orrs	r6, r2
   2109a:	e79e      	b.n	20fda <follow_path+0x1de>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
   2109c:	320f      	adds	r2, #15
   2109e:	4316      	orrs	r6, r2
   210a0:	e7a2      	b.n	20fe8 <follow_path+0x1ec>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
   210a2:	3304      	adds	r3, #4
   210a4:	431e      	orrs	r6, r3
   210a6:	e7a1      	b.n	20fec <follow_path+0x1f0>
   210a8:	2006      	movs	r0, #6
}
   210aa:	b003      	add	sp, #12
   210ac:	bc3c      	pop	{r2, r3, r4, r5}
   210ae:	4690      	mov	r8, r2
   210b0:	4699      	mov	r9, r3
   210b2:	46a2      	mov	sl, r4
   210b4:	46ab      	mov	fp, r5
   210b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   210b8:	2804      	cmp	r0, #4
   210ba:	d1f6      	bne.n	210aa <follow_path+0x2ae>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
   210bc:	075b      	lsls	r3, r3, #29
   210be:	d4f4      	bmi.n	210aa <follow_path+0x2ae>
   210c0:	3001      	adds	r0, #1
   210c2:	e7f2      	b.n	210aa <follow_path+0x2ae>
				res = FR_NO_PATH; break;
   210c4:	2005      	movs	r0, #5
   210c6:	e7f0      	b.n	210aa <follow_path+0x2ae>
		w = p[si++];					/* Get a character */
   210c8:	2301      	movs	r3, #1
	si = di = 0;
   210ca:	2400      	movs	r4, #0
   210cc:	e6fb      	b.n	20ec6 <follow_path+0xca>
		w = p[si++];					/* Get a character */
   210ce:	2301      	movs	r3, #1
	si = di = 0;
   210d0:	2400      	movs	r4, #0
   210d2:	e005      	b.n	210e0 <follow_path+0x2e4>
		w = p[si++];					/* Get a character */
   210d4:	2301      	movs	r3, #1
	si = di = 0;
   210d6:	2400      	movs	r4, #0
   210d8:	e002      	b.n	210e0 <follow_path+0x2e4>
   210da:	002c      	movs	r4, r5
   210dc:	465f      	mov	r7, fp
   210de:	464d      	mov	r5, r9
	*path = &p[si];						/* Return pointer to the next segment */
   210e0:	18ed      	adds	r5, r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   210e2:	2600      	movs	r6, #0
	while (di) {						/* Strip trailing spaces and dots */
   210e4:	2c00      	cmp	r4, #0
   210e6:	d0df      	beq.n	210a8 <follow_path+0x2ac>
   210e8:	4b09      	ldr	r3, [pc, #36]	; (21110 <follow_path+0x314>)
   210ea:	18e3      	adds	r3, r4, r3
   210ec:	005b      	lsls	r3, r3, #1
   210ee:	4453      	add	r3, sl
   210f0:	e6f1      	b.n	20ed6 <follow_path+0xda>
   210f2:	46c0      	nop			; (mov r8, r8)
   210f4:	0002044d 	.word	0x0002044d
   210f8:	000215a5 	.word	0x000215a5
   210fc:	0002b069 	.word	0x0002b069
   21100:	0001fde5 	.word	0x0001fde5
   21104:	0002b075 	.word	0x0002b075
   21108:	0002088d 	.word	0x0002088d
   2110c:	0002afe8 	.word	0x0002afe8
   21110:	7fffffff 	.word	0x7fffffff
   21114:	002c      	movs	r4, r5
   21116:	465f      	mov	r7, fp
   21118:	464d      	mov	r5, r9
   2111a:	e7e1      	b.n	210e0 <follow_path+0x2e4>
			if (ni == 11) {				/* Long extension */
   2111c:	9b01      	ldr	r3, [sp, #4]
   2111e:	2b0b      	cmp	r3, #11
   21120:	d100      	bne.n	21124 <follow_path+0x328>
   21122:	e77e      	b.n	21022 <follow_path+0x226>
			b <<= 2; continue;
   21124:	464b      	mov	r3, r9
   21126:	009b      	lsls	r3, r3, #2
   21128:	b2db      	uxtb	r3, r3
   2112a:	4699      	mov	r9, r3
   2112c:	4643      	mov	r3, r8
			si = di; i = 8; ni = 11;	/* Enter extension section */
   2112e:	220b      	movs	r2, #11
   21130:	9201      	str	r2, [sp, #4]
   21132:	3a03      	subs	r2, #3
   21134:	4693      	mov	fp, r2
   21136:	e70e      	b.n	20f56 <follow_path+0x15a>
			cf |= NS_LFN;				/* Force create LFN entry */
   21138:	2302      	movs	r3, #2
   2113a:	431e      	orrs	r6, r3
   2113c:	e78e      	b.n	2105c <follow_path+0x260>
   2113e:	46c0      	nop			; (mov r8, r8)

00021140 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
   21140:	b5f0      	push	{r4, r5, r6, r7, lr}
   21142:	46c6      	mov	lr, r8
   21144:	b500      	push	{lr}
   21146:	4c59      	ldr	r4, [pc, #356]	; (212ac <f_open+0x16c>)
   21148:	44a5      	add	sp, r4
   2114a:	0005      	movs	r5, r0
   2114c:	9101      	str	r1, [sp, #4]
   2114e:	0017      	movs	r7, r2
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
   21150:	2300      	movs	r3, #0
   21152:	6003      	str	r3, [r0, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
   21154:	261f      	movs	r6, #31
   21156:	4016      	ands	r6, r2
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
   21158:	221e      	movs	r2, #30
   2115a:	403a      	ands	r2, r7
   2115c:	a985      	add	r1, sp, #532	; 0x214
   2115e:	a801      	add	r0, sp, #4
   21160:	4b53      	ldr	r3, [pc, #332]	; (212b0 <f_open+0x170>)
   21162:	4798      	blx	r3
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
   21164:	ab82      	add	r3, sp, #520	; 0x208
   21166:	938b      	str	r3, [sp, #556]	; 0x22c
   21168:	ab02      	add	r3, sp, #8
   2116a:	938c      	str	r3, [sp, #560]	; 0x230
	if (res == FR_OK)
   2116c:	2800      	cmp	r0, #0
   2116e:	d006      	beq.n	2117e <f_open+0x3e>
		res = follow_path(&dj, path);	/* Follow the file path */
	dir = dj.dir;
   21170:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   21172:	231c      	movs	r3, #28
   21174:	423b      	tst	r3, r7
   21176:	d145      	bne.n	21204 <f_open+0xc4>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
   21178:	2800      	cmp	r0, #0
   2117a:	d13d      	bne.n	211f8 <f_open+0xb8>
   2117c:	e00c      	b.n	21198 <f_open+0x58>
		res = follow_path(&dj, path);	/* Follow the file path */
   2117e:	9901      	ldr	r1, [sp, #4]
   21180:	a885      	add	r0, sp, #532	; 0x214
   21182:	4b4c      	ldr	r3, [pc, #304]	; (212b4 <f_open+0x174>)
   21184:	4798      	blx	r3
	dir = dj.dir;
   21186:	9c8a      	ldr	r4, [sp, #552]	; 0x228
	if (res == FR_OK) {
   21188:	2800      	cmp	r0, #0
   2118a:	d1f2      	bne.n	21172 <f_open+0x32>
		if (!dir)	/* Current dir itself */
   2118c:	2c00      	cmp	r4, #0
   2118e:	d100      	bne.n	21192 <f_open+0x52>
   21190:	e086      	b.n	212a0 <f_open+0x160>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   21192:	231c      	movs	r3, #28
   21194:	423b      	tst	r3, r7
   21196:	d146      	bne.n	21226 <f_open+0xe6>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
   21198:	7ae3      	ldrb	r3, [r4, #11]
				res = FR_NO_FILE;
   2119a:	2004      	movs	r0, #4
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
   2119c:	06da      	lsls	r2, r3, #27
   2119e:	d42b      	bmi.n	211f8 <f_open+0xb8>
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
   211a0:	07ba      	lsls	r2, r7, #30
   211a2:	d502      	bpl.n	211aa <f_open+0x6a>
					res = FR_DENIED;
   211a4:	3003      	adds	r0, #3
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
   211a6:	07db      	lsls	r3, r3, #31
   211a8:	d426      	bmi.n	211f8 <f_open+0xb8>
			}
		}
	}
	if (res == FR_OK) {
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
   211aa:	073b      	lsls	r3, r7, #28
   211ac:	d501      	bpl.n	211b2 <f_open+0x72>
			mode |= FA__WRITTEN;
   211ae:	2320      	movs	r3, #32
   211b0:	431e      	orrs	r6, r3
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
   211b2:	9b85      	ldr	r3, [sp, #532]	; 0x214
   211b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   211b6:	61eb      	str	r3, [r5, #28]
		fp->dir_ptr = dir;
   211b8:	622c      	str	r4, [r5, #32]
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
		fp->flag = mode;					/* File access mode */
   211ba:	71ae      	strb	r6, [r5, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
   211bc:	7d62      	ldrb	r2, [r4, #21]
   211be:	0212      	lsls	r2, r2, #8
   211c0:	7d23      	ldrb	r3, [r4, #20]
   211c2:	4313      	orrs	r3, r2
   211c4:	041b      	lsls	r3, r3, #16
   211c6:	7ee1      	ldrb	r1, [r4, #27]
   211c8:	0209      	lsls	r1, r1, #8
   211ca:	7ea2      	ldrb	r2, [r4, #26]
   211cc:	430a      	orrs	r2, r1
   211ce:	4313      	orrs	r3, r2
   211d0:	612b      	str	r3, [r5, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
   211d2:	7fe3      	ldrb	r3, [r4, #31]
   211d4:	061b      	lsls	r3, r3, #24
   211d6:	7fa2      	ldrb	r2, [r4, #30]
   211d8:	0412      	lsls	r2, r2, #16
   211da:	4313      	orrs	r3, r2
   211dc:	7f22      	ldrb	r2, [r4, #28]
   211de:	4313      	orrs	r3, r2
   211e0:	7f62      	ldrb	r2, [r4, #29]
   211e2:	0212      	lsls	r2, r2, #8
   211e4:	4313      	orrs	r3, r2
   211e6:	60eb      	str	r3, [r5, #12]
		fp->fptr = 0;						/* File pointer */
   211e8:	2300      	movs	r3, #0
   211ea:	60ab      	str	r3, [r5, #8]
		fp->dsect = 0;
   211ec:	61ab      	str	r3, [r5, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
   211ee:	9b85      	ldr	r3, [sp, #532]	; 0x214
   211f0:	602b      	str	r3, [r5, #0]
   211f2:	88db      	ldrh	r3, [r3, #6]
   211f4:	80ab      	strh	r3, [r5, #4]
   211f6:	2000      	movs	r0, #0
	}

	LEAVE_FF(dj.fs, res);
}
   211f8:	238e      	movs	r3, #142	; 0x8e
   211fa:	009b      	lsls	r3, r3, #2
   211fc:	449d      	add	sp, r3
   211fe:	bc04      	pop	{r2}
   21200:	4690      	mov	r8, r2
   21202:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
   21204:	2804      	cmp	r0, #4
   21206:	d005      	beq.n	21214 <f_open+0xd4>
			mode |= FA_CREATE_ALWAYS;		/* File is created */
   21208:	2308      	movs	r3, #8
   2120a:	431e      	orrs	r6, r3
			dir = dj.dir;					/* New entry */
   2120c:	9c8a      	ldr	r4, [sp, #552]	; 0x228
	if (res == FR_OK) {
   2120e:	2800      	cmp	r0, #0
   21210:	d0d3      	beq.n	211ba <f_open+0x7a>
   21212:	e7f1      	b.n	211f8 <f_open+0xb8>
				res = dir_register(&dj);
   21214:	a885      	add	r0, sp, #532	; 0x214
   21216:	4b28      	ldr	r3, [pc, #160]	; (212b8 <f_open+0x178>)
   21218:	4798      	blx	r3
			mode |= FA_CREATE_ALWAYS;		/* File is created */
   2121a:	2308      	movs	r3, #8
   2121c:	431e      	orrs	r6, r3
			dir = dj.dir;					/* New entry */
   2121e:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
   21220:	2800      	cmp	r0, #0
   21222:	d008      	beq.n	21236 <f_open+0xf6>
   21224:	e7e8      	b.n	211f8 <f_open+0xb8>
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   21226:	7ae3      	ldrb	r3, [r4, #11]
   21228:	2211      	movs	r2, #17
				res = FR_DENIED;
   2122a:	2007      	movs	r0, #7
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   2122c:	421a      	tst	r2, r3
   2122e:	d1e3      	bne.n	211f8 <f_open+0xb8>
					res = FR_EXIST;
   21230:	3001      	adds	r0, #1
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
   21232:	077b      	lsls	r3, r7, #29
   21234:	d4e0      	bmi.n	211f8 <f_open+0xb8>
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
   21236:	0733      	lsls	r3, r6, #28
   21238:	d5bb      	bpl.n	211b2 <f_open+0x72>
			dw = get_fattime();					/* Created time */
   2123a:	4b20      	ldr	r3, [pc, #128]	; (212bc <f_open+0x17c>)
   2123c:	4798      	blx	r3
			ST_DWORD(dir+DIR_CrtTime, dw);
   2123e:	73a0      	strb	r0, [r4, #14]
   21240:	0a03      	lsrs	r3, r0, #8
   21242:	73e3      	strb	r3, [r4, #15]
   21244:	0c03      	lsrs	r3, r0, #16
   21246:	7423      	strb	r3, [r4, #16]
   21248:	0e00      	lsrs	r0, r0, #24
   2124a:	7460      	strb	r0, [r4, #17]
			dir[DIR_Attr] = 0;					/* Reset attribute */
   2124c:	2300      	movs	r3, #0
   2124e:	72e3      	strb	r3, [r4, #11]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
   21250:	7723      	strb	r3, [r4, #28]
   21252:	7763      	strb	r3, [r4, #29]
   21254:	77a3      	strb	r3, [r4, #30]
   21256:	77e3      	strb	r3, [r4, #31]
			cl = LD_CLUST(dir);					/* Get start cluster */
   21258:	7d62      	ldrb	r2, [r4, #21]
   2125a:	0212      	lsls	r2, r2, #8
   2125c:	7d27      	ldrb	r7, [r4, #20]
   2125e:	4317      	orrs	r7, r2
   21260:	043f      	lsls	r7, r7, #16
   21262:	7ee1      	ldrb	r1, [r4, #27]
   21264:	0209      	lsls	r1, r1, #8
   21266:	7ea2      	ldrb	r2, [r4, #26]
   21268:	430a      	orrs	r2, r1
   2126a:	4317      	orrs	r7, r2
			ST_CLUST(dir, 0);					/* cluster = 0 */
   2126c:	76a3      	strb	r3, [r4, #26]
   2126e:	76e3      	strb	r3, [r4, #27]
   21270:	7523      	strb	r3, [r4, #20]
   21272:	7563      	strb	r3, [r4, #21]
			dj.fs->wflag = 1;
   21274:	9885      	ldr	r0, [sp, #532]	; 0x214
   21276:	3301      	adds	r3, #1
   21278:	7103      	strb	r3, [r0, #4]
			if (cl) {							/* Remove the cluster chain if exist */
   2127a:	2f00      	cmp	r7, #0
   2127c:	d097      	beq.n	211ae <f_open+0x6e>
				dw = dj.fs->winsect;
   2127e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   21280:	4698      	mov	r8, r3
				res = remove_chain(dj.fs, cl);
   21282:	0039      	movs	r1, r7
   21284:	4b0e      	ldr	r3, [pc, #56]	; (212c0 <f_open+0x180>)
   21286:	4798      	blx	r3
				if (res == FR_OK) {
   21288:	2800      	cmp	r0, #0
   2128a:	d1b5      	bne.n	211f8 <f_open+0xb8>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
   2128c:	9885      	ldr	r0, [sp, #532]	; 0x214
   2128e:	3f01      	subs	r7, #1
   21290:	60c7      	str	r7, [r0, #12]
					res = move_window(dj.fs, dw);
   21292:	4641      	mov	r1, r8
   21294:	4b0b      	ldr	r3, [pc, #44]	; (212c4 <f_open+0x184>)
   21296:	4798      	blx	r3
	if (res == FR_OK) {
   21298:	2800      	cmp	r0, #0
   2129a:	d100      	bne.n	2129e <f_open+0x15e>
   2129c:	e787      	b.n	211ae <f_open+0x6e>
   2129e:	e7ab      	b.n	211f8 <f_open+0xb8>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   212a0:	231c      	movs	r3, #28
			res = FR_INVALID_NAME;
   212a2:	2006      	movs	r0, #6
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   212a4:	423b      	tst	r3, r7
   212a6:	d0b2      	beq.n	2120e <f_open+0xce>
			res = FR_INVALID_NAME;
   212a8:	2006      	movs	r0, #6
   212aa:	e7ad      	b.n	21208 <f_open+0xc8>
   212ac:	fffffdc8 	.word	0xfffffdc8
   212b0:	0001ff01 	.word	0x0001ff01
   212b4:	00020dfd 	.word	0x00020dfd
   212b8:	00020a25 	.word	0x00020a25
   212bc:	0001fd81 	.word	0x0001fd81
   212c0:	000206f1 	.word	0x000206f1
   212c4:	000202b1 	.word	0x000202b1

000212c8 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
   212c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   212ca:	46de      	mov	lr, fp
   212cc:	4657      	mov	r7, sl
   212ce:	464e      	mov	r6, r9
   212d0:	4645      	mov	r5, r8
   212d2:	b5e0      	push	{r5, r6, r7, lr}
   212d4:	b083      	sub	sp, #12
   212d6:	0004      	movs	r4, r0
   212d8:	000d      	movs	r5, r1
   212da:	0016      	movs	r6, r2
   212dc:	4699      	mov	r9, r3
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
   212de:	2300      	movs	r3, #0
   212e0:	464a      	mov	r2, r9
   212e2:	6013      	str	r3, [r2, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
   212e4:	8881      	ldrh	r1, [r0, #4]
   212e6:	6800      	ldr	r0, [r0, #0]
   212e8:	4b7f      	ldr	r3, [pc, #508]	; (214e8 <f_write+0x220>)
   212ea:	4798      	blx	r3
   212ec:	9000      	str	r0, [sp, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   212ee:	2800      	cmp	r0, #0
   212f0:	d000      	beq.n	212f4 <f_write+0x2c>
   212f2:	e0f1      	b.n	214d8 <f_write+0x210>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
   212f4:	79a3      	ldrb	r3, [r4, #6]
   212f6:	b25a      	sxtb	r2, r3
   212f8:	2a00      	cmp	r2, #0
   212fa:	da00      	bge.n	212fe <f_write+0x36>
   212fc:	e0ea      	b.n	214d4 <f_write+0x20c>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
   212fe:	079b      	lsls	r3, r3, #30
   21300:	d402      	bmi.n	21308 <f_write+0x40>
		LEAVE_FF(fp->fs, FR_DENIED);
   21302:	2307      	movs	r3, #7
   21304:	9300      	str	r3, [sp, #0]
   21306:	e0e7      	b.n	214d8 <f_write+0x210>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
   21308:	68e3      	ldr	r3, [r4, #12]
   2130a:	199a      	adds	r2, r3, r6
   2130c:	4293      	cmp	r3, r2
   2130e:	d810      	bhi.n	21332 <f_write+0x6a>

	for ( ;  btw;							/* Repeat until all data written */
   21310:	2e00      	cmp	r6, #0
   21312:	d00e      	beq.n	21332 <f_write+0x6a>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
   21314:	002f      	movs	r7, r5
   21316:	e07b      	b.n	21410 <f_write+0x148>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
   21318:	2100      	movs	r1, #0
   2131a:	4b74      	ldr	r3, [pc, #464]	; (214ec <f_write+0x224>)
   2131c:	4798      	blx	r3
   2131e:	0003      	movs	r3, r0
   21320:	6120      	str	r0, [r4, #16]
   21322:	e003      	b.n	2132c <f_write+0x64>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
   21324:	6961      	ldr	r1, [r4, #20]
   21326:	4b71      	ldr	r3, [pc, #452]	; (214ec <f_write+0x224>)
   21328:	4798      	blx	r3
   2132a:	0003      	movs	r3, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   2132c:	2b00      	cmp	r3, #0
   2132e:	d000      	beq.n	21332 <f_write+0x6a>
   21330:	e080      	b.n	21434 <f_write+0x16c>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
   21332:	68a3      	ldr	r3, [r4, #8]
   21334:	68e2      	ldr	r2, [r4, #12]
   21336:	4293      	cmp	r3, r2
   21338:	d900      	bls.n	2133c <f_write+0x74>
   2133a:	60e3      	str	r3, [r4, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
   2133c:	79a3      	ldrb	r3, [r4, #6]
   2133e:	2220      	movs	r2, #32
   21340:	4313      	orrs	r3, r2
   21342:	71a3      	strb	r3, [r4, #6]

	LEAVE_FF(fp->fs, FR_OK);
   21344:	e0c8      	b.n	214d8 <f_write+0x210>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   21346:	79a2      	ldrb	r2, [r4, #6]
   21348:	3b81      	subs	r3, #129	; 0x81
   2134a:	4313      	orrs	r3, r2
   2134c:	71a3      	strb	r3, [r4, #6]
   2134e:	2302      	movs	r3, #2
   21350:	9300      	str	r3, [sp, #0]
   21352:	e0c1      	b.n	214d8 <f_write+0x210>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   21354:	79a2      	ldrb	r2, [r4, #6]
   21356:	3b7f      	subs	r3, #127	; 0x7f
   21358:	4313      	orrs	r3, r2
   2135a:	71a3      	strb	r3, [r4, #6]
   2135c:	2301      	movs	r3, #1
   2135e:	9300      	str	r3, [sp, #0]
   21360:	e0ba      	b.n	214d8 <f_write+0x210>
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
   21362:	2100      	movs	r1, #0
   21364:	4b62      	ldr	r3, [pc, #392]	; (214f0 <f_write+0x228>)
   21366:	4798      	blx	r3
   21368:	2800      	cmp	r0, #0
   2136a:	d06d      	beq.n	21448 <f_write+0x180>
				ABORT(fp->fs, FR_DISK_ERR);
   2136c:	79a2      	ldrb	r2, [r4, #6]
   2136e:	2380      	movs	r3, #128	; 0x80
   21370:	425b      	negs	r3, r3
   21372:	4313      	orrs	r3, r2
   21374:	71a3      	strb	r3, [r4, #6]
   21376:	2301      	movs	r3, #1
   21378:	9300      	str	r3, [sp, #0]
   2137a:	e0ad      	b.n	214d8 <f_write+0x210>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   2137c:	79a2      	ldrb	r2, [r4, #6]
   2137e:	2380      	movs	r3, #128	; 0x80
   21380:	425b      	negs	r3, r3
   21382:	4313      	orrs	r3, r2
   21384:	71a3      	strb	r3, [r4, #6]
   21386:	2302      	movs	r3, #2
   21388:	9300      	str	r3, [sp, #0]
   2138a:	e0a5      	b.n	214d8 <f_write+0x210>
					ABORT(fp->fs, FR_DISK_ERR);
   2138c:	79a2      	ldrb	r2, [r4, #6]
   2138e:	2380      	movs	r3, #128	; 0x80
   21390:	425b      	negs	r3, r3
   21392:	4313      	orrs	r3, r2
   21394:	71a3      	strb	r3, [r4, #6]
   21396:	2301      	movs	r3, #1
   21398:	9300      	str	r3, [sp, #0]
   2139a:	e09d      	b.n	214d8 <f_write+0x210>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
   2139c:	0240      	lsls	r0, r0, #9
   2139e:	1839      	adds	r1, r7, r0
   213a0:	3330      	adds	r3, #48	; 0x30
   213a2:	0018      	movs	r0, r3
   213a4:	2280      	movs	r2, #128	; 0x80
   213a6:	0092      	lsls	r2, r2, #2
   213a8:	4b52      	ldr	r3, [pc, #328]	; (214f4 <f_write+0x22c>)
   213aa:	4798      	blx	r3
					fp->fs->wflag = 0;
   213ac:	2300      	movs	r3, #0
   213ae:	6822      	ldr	r2, [r4, #0]
   213b0:	7113      	strb	r3, [r2, #4]
   213b2:	e072      	b.n	2149a <f_write+0x1d2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
   213b4:	68a3      	ldr	r3, [r4, #8]
   213b6:	68e2      	ldr	r2, [r4, #12]
   213b8:	4293      	cmp	r3, r2
   213ba:	d271      	bcs.n	214a0 <f_write+0x1d8>
			fp->dsect = sect;
   213bc:	4643      	mov	r3, r8
   213be:	61a3      	str	r3, [r4, #24]
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
   213c0:	68a3      	ldr	r3, [r4, #8]
   213c2:	05dd      	lsls	r5, r3, #23
   213c4:	0ded      	lsrs	r5, r5, #23
   213c6:	2380      	movs	r3, #128	; 0x80
   213c8:	009b      	lsls	r3, r3, #2
   213ca:	1b5d      	subs	r5, r3, r5
   213cc:	42b5      	cmp	r5, r6
   213ce:	d900      	bls.n	213d2 <f_write+0x10a>
   213d0:	0035      	movs	r5, r6
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
   213d2:	69a1      	ldr	r1, [r4, #24]
   213d4:	6820      	ldr	r0, [r4, #0]
   213d6:	4b46      	ldr	r3, [pc, #280]	; (214f0 <f_write+0x228>)
   213d8:	4798      	blx	r3
   213da:	2800      	cmp	r0, #0
   213dc:	d172      	bne.n	214c4 <f_write+0x1fc>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
   213de:	68a3      	ldr	r3, [r4, #8]
   213e0:	05d8      	lsls	r0, r3, #23
   213e2:	0dc0      	lsrs	r0, r0, #23
   213e4:	3030      	adds	r0, #48	; 0x30
   213e6:	6823      	ldr	r3, [r4, #0]
   213e8:	469c      	mov	ip, r3
   213ea:	4460      	add	r0, ip
   213ec:	002a      	movs	r2, r5
   213ee:	0039      	movs	r1, r7
   213f0:	4b40      	ldr	r3, [pc, #256]	; (214f4 <f_write+0x22c>)
   213f2:	4798      	blx	r3
		fp->fs->wflag = 1;
   213f4:	2301      	movs	r3, #1
   213f6:	6822      	ldr	r2, [r4, #0]
   213f8:	7113      	strb	r3, [r2, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
   213fa:	197f      	adds	r7, r7, r5
   213fc:	68a3      	ldr	r3, [r4, #8]
   213fe:	195b      	adds	r3, r3, r5
   21400:	60a3      	str	r3, [r4, #8]
   21402:	464b      	mov	r3, r9
   21404:	681b      	ldr	r3, [r3, #0]
   21406:	195b      	adds	r3, r3, r5
   21408:	464a      	mov	r2, r9
   2140a:	6013      	str	r3, [r2, #0]
   2140c:	1b76      	subs	r6, r6, r5
	for ( ;  btw;							/* Repeat until all data written */
   2140e:	d090      	beq.n	21332 <f_write+0x6a>
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
   21410:	68a3      	ldr	r3, [r4, #8]
   21412:	05da      	lsls	r2, r3, #23
   21414:	d1d4      	bne.n	213c0 <f_write+0xf8>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
   21416:	6820      	ldr	r0, [r4, #0]
   21418:	7882      	ldrb	r2, [r0, #2]
   2141a:	3a01      	subs	r2, #1
   2141c:	0a5d      	lsrs	r5, r3, #9
   2141e:	4015      	ands	r5, r2
   21420:	b2ed      	uxtb	r5, r5
			if (!csect) {					/* On the cluster boundary? */
   21422:	2d00      	cmp	r5, #0
   21424:	d10b      	bne.n	2143e <f_write+0x176>
				if (fp->fptr == 0) {		/* On the top of the file? */
   21426:	2b00      	cmp	r3, #0
   21428:	d000      	beq.n	2142c <f_write+0x164>
   2142a:	e77b      	b.n	21324 <f_write+0x5c>
					clst = fp->sclust;		/* Follow from the origin */
   2142c:	6923      	ldr	r3, [r4, #16]
					if (clst == 0)			/* When no cluster is allocated, */
   2142e:	2b00      	cmp	r3, #0
   21430:	d100      	bne.n	21434 <f_write+0x16c>
   21432:	e771      	b.n	21318 <f_write+0x50>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   21434:	2b01      	cmp	r3, #1
   21436:	d086      	beq.n	21346 <f_write+0x7e>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   21438:	1c5a      	adds	r2, r3, #1
   2143a:	d08b      	beq.n	21354 <f_write+0x8c>
				fp->clust = clst;			/* Update current cluster */
   2143c:	6163      	str	r3, [r4, #20]
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
   2143e:	6820      	ldr	r0, [r4, #0]
   21440:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   21442:	69a2      	ldr	r2, [r4, #24]
   21444:	4293      	cmp	r3, r2
   21446:	d08c      	beq.n	21362 <f_write+0x9a>
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
   21448:	6823      	ldr	r3, [r4, #0]
   2144a:	469a      	mov	sl, r3
   2144c:	6961      	ldr	r1, [r4, #20]
   2144e:	0018      	movs	r0, r3
   21450:	4b29      	ldr	r3, [pc, #164]	; (214f8 <f_write+0x230>)
   21452:	4798      	blx	r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   21454:	2800      	cmp	r0, #0
   21456:	d091      	beq.n	2137c <f_write+0xb4>
			sect += csect;
   21458:	4680      	mov	r8, r0
   2145a:	44a8      	add	r8, r5
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
   2145c:	0a73      	lsrs	r3, r6, #9
   2145e:	469b      	mov	fp, r3
			if (cc) {						/* Write maximum contiguous sectors directly */
   21460:	d0a8      	beq.n	213b4 <f_write+0xec>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
   21462:	4653      	mov	r3, sl
   21464:	789b      	ldrb	r3, [r3, #2]
   21466:	465a      	mov	r2, fp
   21468:	18aa      	adds	r2, r5, r2
   2146a:	429a      	cmp	r2, r3
   2146c:	d901      	bls.n	21472 <f_write+0x1aa>
					cc = fp->fs->csize - csect;
   2146e:	1b5b      	subs	r3, r3, r5
   21470:	469b      	mov	fp, r3
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
   21472:	465b      	mov	r3, fp
   21474:	466a      	mov	r2, sp
   21476:	71d3      	strb	r3, [r2, #7]
   21478:	79d3      	ldrb	r3, [r2, #7]
   2147a:	4652      	mov	r2, sl
   2147c:	7850      	ldrb	r0, [r2, #1]
   2147e:	4642      	mov	r2, r8
   21480:	0039      	movs	r1, r7
   21482:	4d1e      	ldr	r5, [pc, #120]	; (214fc <f_write+0x234>)
   21484:	47a8      	blx	r5
   21486:	2800      	cmp	r0, #0
   21488:	d000      	beq.n	2148c <f_write+0x1c4>
   2148a:	e77f      	b.n	2138c <f_write+0xc4>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
   2148c:	6823      	ldr	r3, [r4, #0]
   2148e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   21490:	4641      	mov	r1, r8
   21492:	1a50      	subs	r0, r2, r1
   21494:	4583      	cmp	fp, r0
   21496:	d900      	bls.n	2149a <f_write+0x1d2>
   21498:	e780      	b.n	2139c <f_write+0xd4>
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
   2149a:	465b      	mov	r3, fp
   2149c:	025d      	lsls	r5, r3, #9
				continue;
   2149e:	e7ac      	b.n	213fa <f_write+0x132>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
   214a0:	2100      	movs	r1, #0
   214a2:	4650      	mov	r0, sl
   214a4:	4b12      	ldr	r3, [pc, #72]	; (214f0 <f_write+0x228>)
   214a6:	4798      	blx	r3
   214a8:	2800      	cmp	r0, #0
   214aa:	d103      	bne.n	214b4 <f_write+0x1ec>
				fp->fs->winsect = sect;
   214ac:	6823      	ldr	r3, [r4, #0]
   214ae:	4642      	mov	r2, r8
   214b0:	62da      	str	r2, [r3, #44]	; 0x2c
   214b2:	e783      	b.n	213bc <f_write+0xf4>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
   214b4:	79a2      	ldrb	r2, [r4, #6]
   214b6:	2380      	movs	r3, #128	; 0x80
   214b8:	425b      	negs	r3, r3
   214ba:	4313      	orrs	r3, r2
   214bc:	71a3      	strb	r3, [r4, #6]
   214be:	2301      	movs	r3, #1
   214c0:	9300      	str	r3, [sp, #0]
   214c2:	e009      	b.n	214d8 <f_write+0x210>
			ABORT(fp->fs, FR_DISK_ERR);
   214c4:	79a2      	ldrb	r2, [r4, #6]
   214c6:	2380      	movs	r3, #128	; 0x80
   214c8:	425b      	negs	r3, r3
   214ca:	4313      	orrs	r3, r2
   214cc:	71a3      	strb	r3, [r4, #6]
   214ce:	2301      	movs	r3, #1
   214d0:	9300      	str	r3, [sp, #0]
   214d2:	e001      	b.n	214d8 <f_write+0x210>
		LEAVE_FF(fp->fs, FR_INT_ERR);
   214d4:	2302      	movs	r3, #2
   214d6:	9300      	str	r3, [sp, #0]
}
   214d8:	9800      	ldr	r0, [sp, #0]
   214da:	b003      	add	sp, #12
   214dc:	bc3c      	pop	{r2, r3, r4, r5}
   214de:	4690      	mov	r8, r2
   214e0:	4699      	mov	r9, r3
   214e2:	46a2      	mov	sl, r4
   214e4:	46ab      	mov	fp, r5
   214e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   214e8:	0001fe2d 	.word	0x0001fe2d
   214ec:	0002062d 	.word	0x0002062d
   214f0:	000202b1 	.word	0x000202b1
   214f4:	0001fdd1 	.word	0x0001fdd1
   214f8:	0001fdf7 	.word	0x0001fdf7
   214fc:	0001fc91 	.word	0x0001fc91

00021500 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
   21500:	b570      	push	{r4, r5, r6, lr}
   21502:	0004      	movs	r4, r0
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
   21504:	8881      	ldrh	r1, [r0, #4]
   21506:	6800      	ldr	r0, [r0, #0]
   21508:	4b1c      	ldr	r3, [pc, #112]	; (2157c <f_sync+0x7c>)
   2150a:	4798      	blx	r3
	if (res == FR_OK) {
   2150c:	2800      	cmp	r0, #0
   2150e:	d102      	bne.n	21516 <f_sync+0x16>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
   21510:	79a3      	ldrb	r3, [r4, #6]
   21512:	069b      	lsls	r3, r3, #26
   21514:	d400      	bmi.n	21518 <f_sync+0x18>
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
   21516:	bd70      	pop	{r4, r5, r6, pc}
			res = move_window(fp->fs, fp->dir_sect);
   21518:	69e1      	ldr	r1, [r4, #28]
   2151a:	6820      	ldr	r0, [r4, #0]
   2151c:	4b18      	ldr	r3, [pc, #96]	; (21580 <f_sync+0x80>)
   2151e:	4798      	blx	r3
			if (res == FR_OK) {
   21520:	2800      	cmp	r0, #0
   21522:	d1f8      	bne.n	21516 <f_sync+0x16>
				dir = fp->dir_ptr;
   21524:	6a25      	ldr	r5, [r4, #32]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
   21526:	7aeb      	ldrb	r3, [r5, #11]
   21528:	2220      	movs	r2, #32
   2152a:	4313      	orrs	r3, r2
   2152c:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
   2152e:	7b23      	ldrb	r3, [r4, #12]
   21530:	772b      	strb	r3, [r5, #28]
   21532:	89a3      	ldrh	r3, [r4, #12]
   21534:	0a1b      	lsrs	r3, r3, #8
   21536:	776b      	strb	r3, [r5, #29]
   21538:	89e3      	ldrh	r3, [r4, #14]
   2153a:	77ab      	strb	r3, [r5, #30]
   2153c:	7be3      	ldrb	r3, [r4, #15]
   2153e:	77eb      	strb	r3, [r5, #31]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
   21540:	7c23      	ldrb	r3, [r4, #16]
   21542:	76ab      	strb	r3, [r5, #26]
   21544:	8a23      	ldrh	r3, [r4, #16]
   21546:	0a1b      	lsrs	r3, r3, #8
   21548:	76eb      	strb	r3, [r5, #27]
   2154a:	8a63      	ldrh	r3, [r4, #18]
   2154c:	752b      	strb	r3, [r5, #20]
   2154e:	8a63      	ldrh	r3, [r4, #18]
   21550:	0a1b      	lsrs	r3, r3, #8
   21552:	756b      	strb	r3, [r5, #21]
				tim = get_fattime();						/* Update updated time */
   21554:	4b0b      	ldr	r3, [pc, #44]	; (21584 <f_sync+0x84>)
   21556:	4798      	blx	r3
				ST_DWORD(dir+DIR_WrtTime, tim);
   21558:	75a8      	strb	r0, [r5, #22]
   2155a:	0a03      	lsrs	r3, r0, #8
   2155c:	75eb      	strb	r3, [r5, #23]
   2155e:	0c03      	lsrs	r3, r0, #16
   21560:	762b      	strb	r3, [r5, #24]
   21562:	0e00      	lsrs	r0, r0, #24
   21564:	7668      	strb	r0, [r5, #25]
				fp->flag &= ~FA__WRITTEN;
   21566:	79a3      	ldrb	r3, [r4, #6]
   21568:	2220      	movs	r2, #32
   2156a:	4393      	bics	r3, r2
   2156c:	71a3      	strb	r3, [r4, #6]
				fp->fs->wflag = 1;
   2156e:	2301      	movs	r3, #1
   21570:	6822      	ldr	r2, [r4, #0]
   21572:	7113      	strb	r3, [r2, #4]
				res = sync(fp->fs);
   21574:	6820      	ldr	r0, [r4, #0]
   21576:	4b04      	ldr	r3, [pc, #16]	; (21588 <f_sync+0x88>)
   21578:	4798      	blx	r3
   2157a:	e7cc      	b.n	21516 <f_sync+0x16>
   2157c:	0001fe2d 	.word	0x0001fe2d
   21580:	000202b1 	.word	0x000202b1
   21584:	0001fd81 	.word	0x0001fd81
   21588:	00020d09 	.word	0x00020d09

0002158c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
   2158c:	b510      	push	{r4, lr}
   2158e:	0004      	movs	r4, r0
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
   21590:	4b03      	ldr	r3, [pc, #12]	; (215a0 <f_close+0x14>)
   21592:	4798      	blx	r3
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
   21594:	2800      	cmp	r0, #0
   21596:	d101      	bne.n	2159c <f_close+0x10>
   21598:	2300      	movs	r3, #0
   2159a:	6023      	str	r3, [r4, #0]
	return res;
#endif
}
   2159c:	bd10      	pop	{r4, pc}
   2159e:	46c0      	nop			; (mov r8, r8)
   215a0:	00021501 	.word	0x00021501

000215a4 <ff_convert>:
{
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
		c = src;
   215a4:	0003      	movs	r3, r0
	if (src < 0x80) {	/* ASCII */
   215a6:	287f      	cmp	r0, #127	; 0x7f
   215a8:	d911      	bls.n	215ce <ff_convert+0x2a>

	} else {
		if (dir) {		/* OEMCP to Unicode */
   215aa:	2900      	cmp	r1, #0
   215ac:	d111      	bne.n	215d2 <ff_convert+0x2e>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
				if (src == Tbl[c]) break;
   215ae:	28c7      	cmp	r0, #199	; 0xc7
   215b0:	d017      	beq.n	215e2 <ff_convert+0x3e>
   215b2:	4a0d      	ldr	r2, [pc, #52]	; (215e8 <ff_convert+0x44>)
   215b4:	3202      	adds	r2, #2
			for (c = 0; c < 0x80; c++) {
   215b6:	2301      	movs	r3, #1
				if (src == Tbl[c]) break;
   215b8:	8811      	ldrh	r1, [r2, #0]
   215ba:	4281      	cmp	r1, r0
   215bc:	d004      	beq.n	215c8 <ff_convert+0x24>
			for (c = 0; c < 0x80; c++) {
   215be:	3301      	adds	r3, #1
   215c0:	b29b      	uxth	r3, r3
   215c2:	3202      	adds	r2, #2
   215c4:	2b80      	cmp	r3, #128	; 0x80
   215c6:	d1f7      	bne.n	215b8 <ff_convert+0x14>
			}
			c = (c + 0x80) & 0xFF;
   215c8:	3380      	adds	r3, #128	; 0x80
   215ca:	20ff      	movs	r0, #255	; 0xff
   215cc:	4003      	ands	r3, r0
		}
	}

	return c;
}
   215ce:	0018      	movs	r0, r3
   215d0:	4770      	bx	lr
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
   215d2:	2300      	movs	r3, #0
   215d4:	28ff      	cmp	r0, #255	; 0xff
   215d6:	d8fa      	bhi.n	215ce <ff_convert+0x2a>
   215d8:	3880      	subs	r0, #128	; 0x80
   215da:	0040      	lsls	r0, r0, #1
   215dc:	4b02      	ldr	r3, [pc, #8]	; (215e8 <ff_convert+0x44>)
   215de:	5ac3      	ldrh	r3, [r0, r3]
   215e0:	e7f5      	b.n	215ce <ff_convert+0x2a>
				if (src == Tbl[c]) break;
   215e2:	2300      	movs	r3, #0
   215e4:	e7f0      	b.n	215c8 <ff_convert+0x24>
   215e6:	46c0      	nop			; (mov r8, r8)
   215e8:	0002b07c 	.word	0x0002b07c

000215ec <ff_wtoupper>:
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
   215ec:	2861      	cmp	r0, #97	; 0x61
   215ee:	d014      	beq.n	2161a <ff_wtoupper+0x2e>
   215f0:	4b0b      	ldr	r3, [pc, #44]	; (21620 <ff_wtoupper+0x34>)
   215f2:	3304      	adds	r3, #4
   215f4:	2101      	movs	r1, #1
   215f6:	2262      	movs	r2, #98	; 0x62
   215f8:	4290      	cmp	r0, r2
   215fa:	d007      	beq.n	2160c <ff_wtoupper+0x20>
   215fc:	3101      	adds	r1, #1
   215fe:	3302      	adds	r3, #2
   21600:	1e9a      	subs	r2, r3, #2
   21602:	8812      	ldrh	r2, [r2, #0]
   21604:	2a00      	cmp	r2, #0
   21606:	d1f7      	bne.n	215f8 <ff_wtoupper+0xc>

	return tbl_lower[i] ? tbl_upper[i] : chr;
   21608:	0003      	movs	r3, r0
   2160a:	e004      	b.n	21616 <ff_wtoupper+0x2a>
   2160c:	1e03      	subs	r3, r0, #0
   2160e:	d002      	beq.n	21616 <ff_wtoupper+0x2a>
   21610:	0049      	lsls	r1, r1, #1
   21612:	4b04      	ldr	r3, [pc, #16]	; (21624 <ff_wtoupper+0x38>)
   21614:	5acb      	ldrh	r3, [r1, r3]
}
   21616:	0018      	movs	r0, r3
   21618:	4770      	bx	lr
	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
   2161a:	2100      	movs	r1, #0
   2161c:	e7f8      	b.n	21610 <ff_wtoupper+0x24>
   2161e:	46c0      	nop			; (mov r8, r8)
   21620:	0002b17c 	.word	0x0002b17c
   21624:	0002b35c 	.word	0x0002b35c

00021628 <sendPacket>:
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
}


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
   21628:	b5f0      	push	{r4, r5, r6, r7, lr}
   2162a:	46de      	mov	lr, fp
   2162c:	4657      	mov	r7, sl
   2162e:	464e      	mov	r6, r9
   21630:	4645      	mov	r5, r8
   21632:	b5e0      	push	{r5, r6, r7, lr}
   21634:	b083      	sub	sp, #12
   21636:	0007      	movs	r7, r0
   21638:	4688      	mov	r8, r1
   2163a:	9201      	str	r2, [sp, #4]
    int rc = FAILURE, 
        sent = 0;
    
    while (sent < length && !TimerIsExpired(timer))
   2163c:	2400      	movs	r4, #0
   2163e:	2900      	cmp	r1, #0
   21640:	dd18      	ble.n	21674 <sendPacket+0x4c>
   21642:	4b15      	ldr	r3, [pc, #84]	; (21698 <sendPacket+0x70>)
   21644:	469a      	mov	sl, r3
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
   21646:	4b15      	ldr	r3, [pc, #84]	; (2169c <sendPacket+0x74>)
   21648:	469b      	mov	fp, r3
    while (sent < length && !TimerIsExpired(timer))
   2164a:	9801      	ldr	r0, [sp, #4]
   2164c:	47d0      	blx	sl
   2164e:	2800      	cmp	r0, #0
   21650:	d110      	bne.n	21674 <sendPacket+0x4c>
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
   21652:	6d3e      	ldr	r6, [r7, #80]	; 0x50
   21654:	68f3      	ldr	r3, [r6, #12]
   21656:	4699      	mov	r9, r3
   21658:	693b      	ldr	r3, [r7, #16]
   2165a:	191d      	adds	r5, r3, r4
   2165c:	9801      	ldr	r0, [sp, #4]
   2165e:	47d8      	blx	fp
   21660:	0003      	movs	r3, r0
   21662:	4642      	mov	r2, r8
   21664:	0029      	movs	r1, r5
   21666:	0030      	movs	r0, r6
   21668:	47c8      	blx	r9
        if (rc < 0)  // there was an error writing the data
   2166a:	2800      	cmp	r0, #0
   2166c:	db02      	blt.n	21674 <sendPacket+0x4c>
            break;
        sent += rc;
   2166e:	1824      	adds	r4, r4, r0
    while (sent < length && !TimerIsExpired(timer))
   21670:	45a0      	cmp	r8, r4
   21672:	dcea      	bgt.n	2164a <sendPacket+0x22>
    }
    if (sent == length)
   21674:	45a0      	cmp	r8, r4
   21676:	d10c      	bne.n	21692 <sendPacket+0x6a>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
   21678:	69b9      	ldr	r1, [r7, #24]
   2167a:	0038      	movs	r0, r7
   2167c:	3054      	adds	r0, #84	; 0x54
   2167e:	4b08      	ldr	r3, [pc, #32]	; (216a0 <sendPacket+0x78>)
   21680:	4798      	blx	r3
        rc = SUCCESS;
   21682:	2000      	movs	r0, #0
    }
    else
        rc = FAILURE;
    return rc;
}
   21684:	b003      	add	sp, #12
   21686:	bc3c      	pop	{r2, r3, r4, r5}
   21688:	4690      	mov	r8, r2
   2168a:	4699      	mov	r9, r3
   2168c:	46a2      	mov	sl, r4
   2168e:	46ab      	mov	fp, r5
   21690:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rc = FAILURE;
   21692:	2001      	movs	r0, #1
   21694:	4240      	negs	r0, r0
    return rc;
   21696:	e7f5      	b.n	21684 <sendPacket+0x5c>
   21698:	00021f95 	.word	0x00021f95
   2169c:	00021fd1 	.word	0x00021fd1
   216a0:	00021fbd 	.word	0x00021fbd

000216a4 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
   216a4:	b510      	push	{r4, lr}
    int i;
    c->ipstack = network;
   216a6:	6501      	str	r1, [r0, #80]	; 0x50
    
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
        c->messageHandlers[i].topicFilter = 0;
   216a8:	2100      	movs	r1, #0
   216aa:	6241      	str	r1, [r0, #36]	; 0x24
   216ac:	62c1      	str	r1, [r0, #44]	; 0x2c
   216ae:	6341      	str	r1, [r0, #52]	; 0x34
   216b0:	63c1      	str	r1, [r0, #60]	; 0x3c
   216b2:	6441      	str	r1, [r0, #68]	; 0x44
    c->command_timeout_ms = command_timeout_ms;
   216b4:	6042      	str	r2, [r0, #4]
    c->buf = sendbuf;
   216b6:	6103      	str	r3, [r0, #16]
    c->buf_size = sendbuf_size;
   216b8:	9b02      	ldr	r3, [sp, #8]
   216ba:	6083      	str	r3, [r0, #8]
    c->readbuf = readbuf;
   216bc:	9b03      	ldr	r3, [sp, #12]
   216be:	6143      	str	r3, [r0, #20]
    c->readbuf_size = readbuf_size;
   216c0:	9b04      	ldr	r3, [sp, #16]
   216c2:	60c3      	str	r3, [r0, #12]
    c->isconnected = 0;
   216c4:	6201      	str	r1, [r0, #32]
    c->ping_outstanding = 0;
   216c6:	7701      	strb	r1, [r0, #28]
    c->defaultMessageHandler = NULL;
   216c8:	64c1      	str	r1, [r0, #76]	; 0x4c
	c->next_packetid = 1;
   216ca:	2301      	movs	r3, #1
   216cc:	6003      	str	r3, [r0, #0]
    TimerInit(&c->ping_timer);
   216ce:	3054      	adds	r0, #84	; 0x54
   216d0:	4b01      	ldr	r3, [pc, #4]	; (216d8 <MQTTClientInit+0x34>)
   216d2:	4798      	blx	r3
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
   216d4:	bd10      	pop	{r4, pc}
   216d6:	46c0      	nop			; (mov r8, r8)
   216d8:	00021fe5 	.word	0x00021fe5

000216dc <deliverMessage>:
    return (curn == curn_end) && (*curf == '\0');
}


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
   216dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   216de:	46de      	mov	lr, fp
   216e0:	4657      	mov	r7, sl
   216e2:	464e      	mov	r6, r9
   216e4:	4645      	mov	r5, r8
   216e6:	b5e0      	push	{r5, r6, r7, lr}
   216e8:	b085      	sub	sp, #20
   216ea:	4682      	mov	sl, r0
   216ec:	000f      	movs	r7, r1
   216ee:	4691      	mov	r9, r2
   216f0:	0004      	movs	r4, r0
   216f2:	3424      	adds	r4, #36	; 0x24
   216f4:	234c      	movs	r3, #76	; 0x4c
   216f6:	4453      	add	r3, sl
   216f8:	4698      	mov	r8, r3
    int i;
    int rc = FAILURE;
   216fa:	2301      	movs	r3, #1
   216fc:	425b      	negs	r3, r3
   216fe:	9301      	str	r3, [sp, #4]
   21700:	e056      	b.n	217b0 <deliverMessage+0xd4>

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
   21702:	6821      	ldr	r1, [r4, #0]
    char* curn = topicName->lenstring.data;
   21704:	68bb      	ldr	r3, [r7, #8]
    char* curn_end = curn + topicName->lenstring.len;
   21706:	687a      	ldr	r2, [r7, #4]
   21708:	189e      	adds	r6, r3, r2
    while (*curf && curn < curn_end)
   2170a:	780a      	ldrb	r2, [r1, #0]
   2170c:	2a00      	cmp	r2, #0
   2170e:	d04a      	beq.n	217a6 <deliverMessage+0xca>
   21710:	42b3      	cmp	r3, r6
   21712:	d24a      	bcs.n	217aa <deliverMessage+0xce>
   21714:	3101      	adds	r1, #1
   21716:	1e70      	subs	r0, r6, #1
   21718:	e008      	b.n	2172c <deliverMessage+0x50>
        if (*curn == '/' && *curf != '/')
   2171a:	2a2f      	cmp	r2, #47	; 0x2f
   2171c:	d10f      	bne.n	2173e <deliverMessage+0x62>
        curn++;
   2171e:	3301      	adds	r3, #1
    while (*curf && curn < curn_end)
   21720:	780a      	ldrb	r2, [r1, #0]
   21722:	2a00      	cmp	r2, #0
   21724:	d03f      	beq.n	217a6 <deliverMessage+0xca>
   21726:	429e      	cmp	r6, r3
   21728:	d93f      	bls.n	217aa <deliverMessage+0xce>
   2172a:	3101      	adds	r1, #1
        if (*curn == '/' && *curf != '/')
   2172c:	781d      	ldrb	r5, [r3, #0]
   2172e:	2d2f      	cmp	r5, #47	; 0x2f
   21730:	d0f3      	beq.n	2171a <deliverMessage+0x3e>
        if (*curf != '+' && *curf != '#' && *curf != *curn)
   21732:	2a2b      	cmp	r2, #43	; 0x2b
   21734:	d008      	beq.n	21748 <deliverMessage+0x6c>
   21736:	2a23      	cmp	r2, #35	; 0x23
   21738:	d013      	beq.n	21762 <deliverMessage+0x86>
   2173a:	4295      	cmp	r5, r2
   2173c:	d0ef      	beq.n	2171e <deliverMessage+0x42>
    return (curn == curn_end) && (*curf == '\0');
   2173e:	429e      	cmp	r6, r3
   21740:	d133      	bne.n	217aa <deliverMessage+0xce>
   21742:	2a00      	cmp	r2, #0
   21744:	d03d      	beq.n	217c2 <deliverMessage+0xe6>
   21746:	e030      	b.n	217aa <deliverMessage+0xce>
            char* nextpos = curn + 1;
   21748:	1c5d      	adds	r5, r3, #1
            while (nextpos < curn_end && *nextpos != '/')
   2174a:	42ae      	cmp	r6, r5
   2174c:	d927      	bls.n	2179e <deliverMessage+0xc2>
   2174e:	785a      	ldrb	r2, [r3, #1]
   21750:	2a2f      	cmp	r2, #47	; 0x2f
   21752:	d01f      	beq.n	21794 <deliverMessage+0xb8>
                nextpos = ++curn + 1;
   21754:	3301      	adds	r3, #1
            while (nextpos < curn_end && *nextpos != '/')
   21756:	4283      	cmp	r3, r0
   21758:	d0e1      	beq.n	2171e <deliverMessage+0x42>
   2175a:	785a      	ldrb	r2, [r3, #1]
   2175c:	2a2f      	cmp	r2, #47	; 0x2f
   2175e:	d1f9      	bne.n	21754 <deliverMessage+0x78>
   21760:	e7dd      	b.n	2171e <deliverMessage+0x42>
            curn = curn_end - 1;    // skip until end of string
   21762:	1e73      	subs	r3, r6, #1
   21764:	e7db      	b.n	2171e <deliverMessage+0x42>
                rc = SUCCESS;
            }
        }
    }
    
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
   21766:	9b01      	ldr	r3, [sp, #4]
   21768:	3301      	adds	r3, #1
   2176a:	d007      	beq.n	2177c <deliverMessage+0xa0>
        c->defaultMessageHandler(&md);
        rc = SUCCESS;
    }   
    
    return rc;
}
   2176c:	9801      	ldr	r0, [sp, #4]
   2176e:	b005      	add	sp, #20
   21770:	bc3c      	pop	{r2, r3, r4, r5}
   21772:	4690      	mov	r8, r2
   21774:	4699      	mov	r9, r3
   21776:	46a2      	mov	sl, r4
   21778:	46ab      	mov	fp, r5
   2177a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
   2177c:	4653      	mov	r3, sl
   2177e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   21780:	2b00      	cmp	r3, #0
   21782:	d0f3      	beq.n	2176c <deliverMessage+0x90>
    md->topicName = aTopicName;
   21784:	9703      	str	r7, [sp, #12]
    md->message = aMessage;
   21786:	464a      	mov	r2, r9
   21788:	9202      	str	r2, [sp, #8]
        c->defaultMessageHandler(&md);
   2178a:	a802      	add	r0, sp, #8
   2178c:	4798      	blx	r3
        rc = SUCCESS;
   2178e:	2300      	movs	r3, #0
   21790:	9301      	str	r3, [sp, #4]
    return rc;
   21792:	e7eb      	b.n	2176c <deliverMessage+0x90>
    while (*curf && curn < curn_end)
   21794:	780a      	ldrb	r2, [r1, #0]
   21796:	2a00      	cmp	r2, #0
   21798:	d007      	beq.n	217aa <deliverMessage+0xce>
        curn++;
   2179a:	002b      	movs	r3, r5
   2179c:	e7c5      	b.n	2172a <deliverMessage+0x4e>
   2179e:	3301      	adds	r3, #1
    while (*curf && curn < curn_end)
   217a0:	780a      	ldrb	r2, [r1, #0]
   217a2:	2a00      	cmp	r2, #0
   217a4:	d101      	bne.n	217aa <deliverMessage+0xce>
    return (curn == curn_end) && (*curf == '\0');
   217a6:	429e      	cmp	r6, r3
   217a8:	d00b      	beq.n	217c2 <deliverMessage+0xe6>
   217aa:	3408      	adds	r4, #8
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   217ac:	4544      	cmp	r4, r8
   217ae:	d0da      	beq.n	21766 <deliverMessage+0x8a>
   217b0:	46a3      	mov	fp, r4
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   217b2:	6821      	ldr	r1, [r4, #0]
   217b4:	2900      	cmp	r1, #0
   217b6:	d0f8      	beq.n	217aa <deliverMessage+0xce>
   217b8:	0038      	movs	r0, r7
   217ba:	4b08      	ldr	r3, [pc, #32]	; (217dc <deliverMessage+0x100>)
   217bc:	4798      	blx	r3
   217be:	2800      	cmp	r0, #0
   217c0:	d09f      	beq.n	21702 <deliverMessage+0x26>
            if (c->messageHandlers[i].fp != NULL)
   217c2:	465b      	mov	r3, fp
   217c4:	685b      	ldr	r3, [r3, #4]
   217c6:	2b00      	cmp	r3, #0
   217c8:	d0ef      	beq.n	217aa <deliverMessage+0xce>
    md->topicName = aTopicName;
   217ca:	9703      	str	r7, [sp, #12]
    md->message = aMessage;
   217cc:	464a      	mov	r2, r9
   217ce:	9202      	str	r2, [sp, #8]
                c->messageHandlers[i].fp(&md);
   217d0:	a802      	add	r0, sp, #8
   217d2:	4798      	blx	r3
                rc = SUCCESS;
   217d4:	2300      	movs	r3, #0
   217d6:	9301      	str	r3, [sp, #4]
   217d8:	e7e7      	b.n	217aa <deliverMessage+0xce>
   217da:	46c0      	nop			; (mov r8, r8)
   217dc:	000228c1 	.word	0x000228c1

000217e0 <keepalive>:


int keepalive(MQTTClient* c)
{
   217e0:	b510      	push	{r4, lr}
   217e2:	b084      	sub	sp, #16
   217e4:	0004      	movs	r4, r0
    int rc = FAILURE;

    if (c->keepAliveInterval == 0)
    {
        rc = SUCCESS;
   217e6:	2000      	movs	r0, #0
    if (c->keepAliveInterval == 0)
   217e8:	69a3      	ldr	r3, [r4, #24]
   217ea:	2b00      	cmp	r3, #0
   217ec:	d101      	bne.n	217f2 <keepalive+0x12>
        }
    }

exit:
    return rc;
}
   217ee:	b004      	add	sp, #16
   217f0:	bd10      	pop	{r4, pc}
    if (TimerIsExpired(&c->ping_timer))
   217f2:	0020      	movs	r0, r4
   217f4:	3054      	adds	r0, #84	; 0x54
   217f6:	4b14      	ldr	r3, [pc, #80]	; (21848 <keepalive+0x68>)
   217f8:	4798      	blx	r3
   217fa:	2800      	cmp	r0, #0
   217fc:	d01d      	beq.n	2183a <keepalive+0x5a>
        if (!c->ping_outstanding)
   217fe:	7f23      	ldrb	r3, [r4, #28]
   21800:	2b00      	cmp	r3, #0
   21802:	d11d      	bne.n	21840 <keepalive+0x60>
            TimerInit(&timer);
   21804:	a801      	add	r0, sp, #4
   21806:	4b11      	ldr	r3, [pc, #68]	; (2184c <keepalive+0x6c>)
   21808:	4798      	blx	r3
            TimerCountdownMS(&timer, 1000);
   2180a:	21fa      	movs	r1, #250	; 0xfa
   2180c:	0089      	lsls	r1, r1, #2
   2180e:	a801      	add	r0, sp, #4
   21810:	4b0f      	ldr	r3, [pc, #60]	; (21850 <keepalive+0x70>)
   21812:	4798      	blx	r3
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
   21814:	68a1      	ldr	r1, [r4, #8]
   21816:	6920      	ldr	r0, [r4, #16]
   21818:	4b0e      	ldr	r3, [pc, #56]	; (21854 <keepalive+0x74>)
   2181a:	4798      	blx	r3
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESS) // send the ping packet
   2181c:	2800      	cmp	r0, #0
   2181e:	dd09      	ble.n	21834 <keepalive+0x54>
   21820:	aa01      	add	r2, sp, #4
   21822:	0001      	movs	r1, r0
   21824:	0020      	movs	r0, r4
   21826:	4b0c      	ldr	r3, [pc, #48]	; (21858 <keepalive+0x78>)
   21828:	4798      	blx	r3
   2182a:	2800      	cmp	r0, #0
   2182c:	d1df      	bne.n	217ee <keepalive+0xe>
                c->ping_outstanding = 1;
   2182e:	2301      	movs	r3, #1
   21830:	7723      	strb	r3, [r4, #28]
   21832:	e7dc      	b.n	217ee <keepalive+0xe>
    int rc = FAILURE;
   21834:	2001      	movs	r0, #1
   21836:	4240      	negs	r0, r0
   21838:	e7d9      	b.n	217ee <keepalive+0xe>
   2183a:	2001      	movs	r0, #1
   2183c:	4240      	negs	r0, r0
   2183e:	e7d6      	b.n	217ee <keepalive+0xe>
   21840:	2001      	movs	r0, #1
   21842:	4240      	negs	r0, r0
    return rc;
   21844:	e7d3      	b.n	217ee <keepalive+0xe>
   21846:	46c0      	nop			; (mov r8, r8)
   21848:	00021f95 	.word	0x00021f95
   2184c:	00021fe5 	.word	0x00021fe5
   21850:	00021fad 	.word	0x00021fad
   21854:	000225a9 	.word	0x000225a9
   21858:	00021629 	.word	0x00021629

0002185c <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
   2185c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2185e:	46de      	mov	lr, fp
   21860:	464f      	mov	r7, r9
   21862:	4646      	mov	r6, r8
   21864:	b5c0      	push	{r6, r7, lr}
   21866:	b090      	sub	sp, #64	; 0x40
   21868:	0004      	movs	r4, r0
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
   2186a:	6d05      	ldr	r5, [r0, #80]	; 0x50
   2186c:	68ae      	ldr	r6, [r5, #8]
   2186e:	6947      	ldr	r7, [r0, #20]
   21870:	9107      	str	r1, [sp, #28]
   21872:	0008      	movs	r0, r1
   21874:	4b65      	ldr	r3, [pc, #404]	; (21a0c <cycle+0x1b0>)
   21876:	4798      	blx	r3
   21878:	0003      	movs	r3, r0
   2187a:	2201      	movs	r2, #1
   2187c:	0039      	movs	r1, r7
   2187e:	0028      	movs	r0, r5
   21880:	47b0      	blx	r6
   21882:	0005      	movs	r5, r0
   21884:	2801      	cmp	r0, #1
   21886:	d000      	beq.n	2188a <cycle+0x2e>
   21888:	e0bd      	b.n	21a06 <cycle+0x1aa>
    decodePacket(c, &rem_len, TimerLeftMS(timer));
   2188a:	9807      	ldr	r0, [sp, #28]
   2188c:	4b5f      	ldr	r3, [pc, #380]	; (21a0c <cycle+0x1b0>)
   2188e:	4798      	blx	r3
   21890:	9006      	str	r0, [sp, #24]
   21892:	2604      	movs	r6, #4
    *value = 0;
   21894:	2700      	movs	r7, #0
        *value += (i & 127) * multiplier;
   21896:	237f      	movs	r3, #127	; 0x7f
   21898:	469b      	mov	fp, r3
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
   2189a:	6d20      	ldr	r0, [r4, #80]	; 0x50
   2189c:	6883      	ldr	r3, [r0, #8]
   2189e:	4698      	mov	r8, r3
   218a0:	9b06      	ldr	r3, [sp, #24]
   218a2:	2201      	movs	r2, #1
   218a4:	a90c      	add	r1, sp, #48	; 0x30
   218a6:	47c0      	blx	r8
        if (rc != 1)
   218a8:	2801      	cmp	r0, #1
   218aa:	d10e      	bne.n	218ca <cycle+0x6e>
        *value += (i & 127) * multiplier;
   218ac:	ab02      	add	r3, sp, #8
   218ae:	2228      	movs	r2, #40	; 0x28
   218b0:	189b      	adds	r3, r3, r2
   218b2:	781b      	ldrb	r3, [r3, #0]
   218b4:	465a      	mov	r2, fp
   218b6:	401a      	ands	r2, r3
   218b8:	436a      	muls	r2, r5
   218ba:	18bf      	adds	r7, r7, r2
        multiplier *= 128;
   218bc:	01ed      	lsls	r5, r5, #7
    } while ((i & 128) != 0);
   218be:	b25b      	sxtb	r3, r3
   218c0:	2b00      	cmp	r3, #0
   218c2:	da02      	bge.n	218ca <cycle+0x6e>
   218c4:	3e01      	subs	r6, #1
        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   218c6:	2e00      	cmp	r6, #0
   218c8:	d1e7      	bne.n	2189a <cycle+0x3e>
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
   218ca:	6963      	ldr	r3, [r4, #20]
   218cc:	1c58      	adds	r0, r3, #1
   218ce:	0039      	movs	r1, r7
   218d0:	4b4f      	ldr	r3, [pc, #316]	; (21a10 <cycle+0x1b4>)
   218d2:	4798      	blx	r3
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
   218d4:	2f00      	cmp	r7, #0
   218d6:	dd10      	ble.n	218fa <cycle+0x9e>
   218d8:	6d26      	ldr	r6, [r4, #80]	; 0x50
   218da:	68b3      	ldr	r3, [r6, #8]
   218dc:	4699      	mov	r9, r3
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
   218de:	3001      	adds	r0, #1
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
   218e0:	6963      	ldr	r3, [r4, #20]
   218e2:	181d      	adds	r5, r3, r0
   218e4:	9807      	ldr	r0, [sp, #28]
   218e6:	4b49      	ldr	r3, [pc, #292]	; (21a0c <cycle+0x1b0>)
   218e8:	4798      	blx	r3
   218ea:	0003      	movs	r3, r0
   218ec:	003a      	movs	r2, r7
   218ee:	0029      	movs	r1, r5
   218f0:	0030      	movs	r0, r6
   218f2:	47c8      	blx	r9
   218f4:	42b8      	cmp	r0, r7
   218f6:	d000      	beq.n	218fa <cycle+0x9e>
   218f8:	e085      	b.n	21a06 <cycle+0x1aa>
    header.byte = c->readbuf[0];
   218fa:	6963      	ldr	r3, [r4, #20]
   218fc:	781d      	ldrb	r5, [r3, #0]
   218fe:	092d      	lsrs	r5, r5, #4
    unsigned short packet_type = readPacket(c, timer);
    
    int len = 0,
        rc = SUCCESS;

    switch (packet_type)
   21900:	2d05      	cmp	r5, #5
   21902:	d051      	beq.n	219a8 <cycle+0x14c>
   21904:	2d0d      	cmp	r5, #13
   21906:	d06e      	beq.n	219e6 <cycle+0x18a>
        rc = SUCCESS;
   21908:	2600      	movs	r6, #0
    switch (packet_type)
   2190a:	2d03      	cmp	r5, #3
   2190c:	d16e      	bne.n	219ec <cycle+0x190>
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   2190e:	68e2      	ldr	r2, [r4, #12]
   21910:	9204      	str	r2, [sp, #16]
   21912:	9303      	str	r3, [sp, #12]
   21914:	ab0f      	add	r3, sp, #60	; 0x3c
   21916:	9302      	str	r3, [sp, #8]
   21918:	ab0e      	add	r3, sp, #56	; 0x38
   2191a:	9301      	str	r3, [sp, #4]
   2191c:	ab09      	add	r3, sp, #36	; 0x24
   2191e:	9300      	str	r3, [sp, #0]
   21920:	ab0d      	add	r3, sp, #52	; 0x34
   21922:	2229      	movs	r2, #41	; 0x29
   21924:	a902      	add	r1, sp, #8
   21926:	468c      	mov	ip, r1
   21928:	4462      	add	r2, ip
   2192a:	a908      	add	r1, sp, #32
   2192c:	202a      	movs	r0, #42	; 0x2a
   2192e:	4460      	add	r0, ip
   21930:	4e38      	ldr	r6, [pc, #224]	; (21a14 <cycle+0x1b8>)
   21932:	47b0      	blx	r6
        rc = SUCCESS;
   21934:	2600      	movs	r6, #0
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   21936:	2801      	cmp	r0, #1
   21938:	d15b      	bne.n	219f2 <cycle+0x196>
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
                goto exit;
            msg.qos = (enum QoS)intQoS;
   2193a:	ae0c      	add	r6, sp, #48	; 0x30
   2193c:	ab02      	add	r3, sp, #8
   2193e:	7e1b      	ldrb	r3, [r3, #24]
   21940:	7033      	strb	r3, [r6, #0]
            deliverMessage(c, &topicName, &msg);
   21942:	0032      	movs	r2, r6
   21944:	a909      	add	r1, sp, #36	; 0x24
   21946:	0020      	movs	r0, r4
   21948:	4b33      	ldr	r3, [pc, #204]	; (21a18 <cycle+0x1bc>)
   2194a:	4798      	blx	r3
            if (msg.qos != QOS0)
   2194c:	7833      	ldrb	r3, [r6, #0]
   2194e:	2b00      	cmp	r3, #0
   21950:	d028      	beq.n	219a4 <cycle+0x148>
            {
                if (msg.qos == QOS1)
   21952:	2b01      	cmp	r3, #1
   21954:	d004      	beq.n	21960 <cycle+0x104>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
                else if (msg.qos == QOS2)
   21956:	2b02      	cmp	r3, #2
   21958:	d016      	beq.n	21988 <cycle+0x12c>
   2195a:	2601      	movs	r6, #1
   2195c:	4276      	negs	r6, r6
   2195e:	e048      	b.n	219f2 <cycle+0x196>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
   21960:	ab0c      	add	r3, sp, #48	; 0x30
   21962:	889b      	ldrh	r3, [r3, #4]
   21964:	9300      	str	r3, [sp, #0]
   21966:	2300      	movs	r3, #0
   21968:	2204      	movs	r2, #4
   2196a:	68a1      	ldr	r1, [r4, #8]
   2196c:	6920      	ldr	r0, [r4, #16]
   2196e:	4e2b      	ldr	r6, [pc, #172]	; (21a1c <cycle+0x1c0>)
   21970:	47b0      	blx	r6
   21972:	0001      	movs	r1, r0
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
                if (len <= 0)
   21974:	2900      	cmp	r1, #0
   21976:	dd12      	ble.n	2199e <cycle+0x142>
                    rc = FAILURE;
                else
                    rc = sendPacket(c, len, timer);
   21978:	9a07      	ldr	r2, [sp, #28]
   2197a:	0020      	movs	r0, r4
   2197c:	4b28      	ldr	r3, [pc, #160]	; (21a20 <cycle+0x1c4>)
   2197e:	4798      	blx	r3
   21980:	0006      	movs	r6, r0
                if (rc == FAILURE)
   21982:	1c43      	adds	r3, r0, #1
   21984:	d132      	bne.n	219ec <cycle+0x190>
   21986:	e034      	b.n	219f2 <cycle+0x196>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
   21988:	ab0c      	add	r3, sp, #48	; 0x30
   2198a:	889b      	ldrh	r3, [r3, #4]
   2198c:	9300      	str	r3, [sp, #0]
   2198e:	2300      	movs	r3, #0
   21990:	2205      	movs	r2, #5
   21992:	68a1      	ldr	r1, [r4, #8]
   21994:	6920      	ldr	r0, [r4, #16]
   21996:	4e21      	ldr	r6, [pc, #132]	; (21a1c <cycle+0x1c0>)
   21998:	47b0      	blx	r6
   2199a:	0001      	movs	r1, r0
   2199c:	e7ea      	b.n	21974 <cycle+0x118>
   2199e:	2601      	movs	r6, #1
   219a0:	4276      	negs	r6, r6
   219a2:	e026      	b.n	219f2 <cycle+0x196>
        rc = SUCCESS;
   219a4:	2600      	movs	r6, #0
   219a6:	e021      	b.n	219ec <cycle+0x190>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   219a8:	68e2      	ldr	r2, [r4, #12]
   219aa:	9200      	str	r2, [sp, #0]
   219ac:	aa0c      	add	r2, sp, #48	; 0x30
   219ae:	a908      	add	r1, sp, #32
   219b0:	a809      	add	r0, sp, #36	; 0x24
   219b2:	4e1c      	ldr	r6, [pc, #112]	; (21a24 <cycle+0x1c8>)
   219b4:	47b0      	blx	r6
   219b6:	2801      	cmp	r0, #1
   219b8:	d002      	beq.n	219c0 <cycle+0x164>
   219ba:	2601      	movs	r6, #1
   219bc:	4276      	negs	r6, r6
   219be:	e01b      	b.n	219f8 <cycle+0x19c>
                rc = FAILURE;
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
   219c0:	ab0c      	add	r3, sp, #48	; 0x30
   219c2:	881b      	ldrh	r3, [r3, #0]
   219c4:	9300      	str	r3, [sp, #0]
   219c6:	2300      	movs	r3, #0
   219c8:	2206      	movs	r2, #6
   219ca:	68a1      	ldr	r1, [r4, #8]
   219cc:	6920      	ldr	r0, [r4, #16]
   219ce:	4e13      	ldr	r6, [pc, #76]	; (21a1c <cycle+0x1c0>)
   219d0:	47b0      	blx	r6
   219d2:	2800      	cmp	r0, #0
   219d4:	ddf1      	ble.n	219ba <cycle+0x15e>
                rc = FAILURE;
            else if ((rc = sendPacket(c, len, timer)) != SUCCESS) // send the PUBREL packet
   219d6:	9a07      	ldr	r2, [sp, #28]
   219d8:	0001      	movs	r1, r0
   219da:	0020      	movs	r0, r4
   219dc:	4b10      	ldr	r3, [pc, #64]	; (21a20 <cycle+0x1c4>)
   219de:	4798      	blx	r3
   219e0:	1e06      	subs	r6, r0, #0
   219e2:	d1ea      	bne.n	219ba <cycle+0x15e>
   219e4:	e002      	b.n	219ec <cycle+0x190>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
   219e6:	2300      	movs	r3, #0
   219e8:	7723      	strb	r3, [r4, #28]
        rc = SUCCESS;
   219ea:	2600      	movs	r6, #0
            break;
    }
    keepalive(c);
   219ec:	0020      	movs	r0, r4
   219ee:	4b0e      	ldr	r3, [pc, #56]	; (21a28 <cycle+0x1cc>)
   219f0:	4798      	blx	r3
exit:
    if (rc == SUCCESS)
   219f2:	2e00      	cmp	r6, #0
   219f4:	d100      	bne.n	219f8 <cycle+0x19c>
   219f6:	002e      	movs	r6, r5
        rc = packet_type;
    return rc;
}
   219f8:	0030      	movs	r0, r6
   219fa:	b010      	add	sp, #64	; 0x40
   219fc:	bc1c      	pop	{r2, r3, r4}
   219fe:	4690      	mov	r8, r2
   21a00:	4699      	mov	r9, r3
   21a02:	46a3      	mov	fp, r4
   21a04:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21a06:	4d09      	ldr	r5, [pc, #36]	; (21a2c <cycle+0x1d0>)
        rc = SUCCESS;
   21a08:	2600      	movs	r6, #0
   21a0a:	e7ef      	b.n	219ec <cycle+0x190>
   21a0c:	00021fd1 	.word	0x00021fd1
   21a10:	000226c1 	.word	0x000226c1
   21a14:	000225b9 	.word	0x000225b9
   21a18:	000216dd 	.word	0x000216dd
   21a1c:	000229f5 	.word	0x000229f5
   21a20:	00021629 	.word	0x00021629
   21a24:	00022651 	.word	0x00022651
   21a28:	000217e1 	.word	0x000217e1
   21a2c:	0000ffff 	.word	0x0000ffff

00021a30 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
   21a30:	b570      	push	{r4, r5, r6, lr}
   21a32:	b084      	sub	sp, #16
   21a34:	0005      	movs	r5, r0
   21a36:	000c      	movs	r4, r1
    int rc = SUCCESS;
    Timer timer;

    TimerInit(&timer);
   21a38:	a801      	add	r0, sp, #4
   21a3a:	4b0a      	ldr	r3, [pc, #40]	; (21a64 <MQTTYield+0x34>)
   21a3c:	4798      	blx	r3
    TimerCountdownMS(&timer, timeout_ms);
   21a3e:	0021      	movs	r1, r4
   21a40:	a801      	add	r0, sp, #4
   21a42:	4b09      	ldr	r3, [pc, #36]	; (21a68 <MQTTYield+0x38>)
   21a44:	4798      	blx	r3

	do
    {
        if (cycle(c, &timer) == FAILURE)
   21a46:	4c09      	ldr	r4, [pc, #36]	; (21a6c <MQTTYield+0x3c>)
        {
            rc = FAILURE;
            break;
        }
	} while (!TimerIsExpired(&timer));
   21a48:	4e09      	ldr	r6, [pc, #36]	; (21a70 <MQTTYield+0x40>)
        if (cycle(c, &timer) == FAILURE)
   21a4a:	a901      	add	r1, sp, #4
   21a4c:	0028      	movs	r0, r5
   21a4e:	47a0      	blx	r4
   21a50:	1c43      	adds	r3, r0, #1
   21a52:	d004      	beq.n	21a5e <MQTTYield+0x2e>
	} while (!TimerIsExpired(&timer));
   21a54:	a801      	add	r0, sp, #4
   21a56:	47b0      	blx	r6
   21a58:	2800      	cmp	r0, #0
   21a5a:	d0f6      	beq.n	21a4a <MQTTYield+0x1a>
    int rc = SUCCESS;
   21a5c:	2000      	movs	r0, #0
        
    return rc;
}
   21a5e:	b004      	add	sp, #16
   21a60:	bd70      	pop	{r4, r5, r6, pc}
   21a62:	46c0      	nop			; (mov r8, r8)
   21a64:	00021fe5 	.word	0x00021fe5
   21a68:	00021fad 	.word	0x00021fad
   21a6c:	0002185d 	.word	0x0002185d
   21a70:	00021f95 	.word	0x00021f95

00021a74 <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
   21a74:	b5f0      	push	{r4, r5, r6, r7, lr}
   21a76:	b083      	sub	sp, #12
   21a78:	9001      	str	r0, [sp, #4]
   21a7a:	000e      	movs	r6, r1
   21a7c:	9200      	str	r2, [sp, #0]
    int rc = FAILURE;
   21a7e:	2401      	movs	r4, #1
   21a80:	4264      	negs	r4, r4
    
    do
    {
        if (TimerIsExpired(timer))
   21a82:	4f08      	ldr	r7, [pc, #32]	; (21aa4 <waitfor+0x30>)
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);  
   21a84:	4d08      	ldr	r5, [pc, #32]	; (21aa8 <waitfor+0x34>)
        if (TimerIsExpired(timer))
   21a86:	9800      	ldr	r0, [sp, #0]
   21a88:	47b8      	blx	r7
   21a8a:	2800      	cmp	r0, #0
   21a8c:	d106      	bne.n	21a9c <waitfor+0x28>
    while ((rc = cycle(c, timer)) != packet_type);  
   21a8e:	9900      	ldr	r1, [sp, #0]
   21a90:	9801      	ldr	r0, [sp, #4]
   21a92:	47a8      	blx	r5
   21a94:	0004      	movs	r4, r0
   21a96:	42b0      	cmp	r0, r6
   21a98:	d1f5      	bne.n	21a86 <waitfor+0x12>
   21a9a:	0034      	movs	r4, r6
    
    return rc;
}
   21a9c:	0020      	movs	r0, r4
   21a9e:	b003      	add	sp, #12
   21aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21aa2:	46c0      	nop			; (mov r8, r8)
   21aa4:	00021f95 	.word	0x00021f95
   21aa8:	0002185d 	.word	0x0002185d

00021aac <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
   21aac:	b530      	push	{r4, r5, lr}
   21aae:	b09b      	sub	sp, #108	; 0x6c
   21ab0:	0004      	movs	r4, r0
   21ab2:	000d      	movs	r5, r1
    Timer connect_timer;
    int rc = FAILURE;
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
   21ab4:	2258      	movs	r2, #88	; 0x58
   21ab6:	4928      	ldr	r1, [pc, #160]	; (21b58 <MQTTConnect+0xac>)
   21ab8:	a801      	add	r0, sp, #4
   21aba:	4b28      	ldr	r3, [pc, #160]	; (21b5c <MQTTConnect+0xb0>)
   21abc:	4798      	blx	r3
    int len = 0;

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
   21abe:	6a23      	ldr	r3, [r4, #32]
   21ac0:	2b00      	cmp	r3, #0
   21ac2:	d13f      	bne.n	21b44 <MQTTConnect+0x98>
		goto exit;
    
    TimerInit(&connect_timer);
   21ac4:	a817      	add	r0, sp, #92	; 0x5c
   21ac6:	4b26      	ldr	r3, [pc, #152]	; (21b60 <MQTTConnect+0xb4>)
   21ac8:	4798      	blx	r3
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
   21aca:	6861      	ldr	r1, [r4, #4]
   21acc:	a817      	add	r0, sp, #92	; 0x5c
   21ace:	4b25      	ldr	r3, [pc, #148]	; (21b64 <MQTTConnect+0xb8>)
   21ad0:	4798      	blx	r3

    if (options == 0)
   21ad2:	2d00      	cmp	r5, #0
   21ad4:	d015      	beq.n	21b02 <MQTTConnect+0x56>
        options = &default_options; /* set default options if none were supplied */
    
    c->keepAliveInterval = options->keepAliveInterval;
   21ad6:	8b29      	ldrh	r1, [r5, #24]
   21ad8:	61a1      	str	r1, [r4, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
   21ada:	0020      	movs	r0, r4
   21adc:	3054      	adds	r0, #84	; 0x54
   21ade:	4b22      	ldr	r3, [pc, #136]	; (21b68 <MQTTConnect+0xbc>)
   21ae0:	4798      	blx	r3
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
   21ae2:	002a      	movs	r2, r5
   21ae4:	68a1      	ldr	r1, [r4, #8]
   21ae6:	6920      	ldr	r0, [r4, #16]
   21ae8:	4b20      	ldr	r3, [pc, #128]	; (21b6c <MQTTConnect+0xc0>)
   21aea:	4798      	blx	r3
   21aec:	2800      	cmp	r0, #0
   21aee:	dd2c      	ble.n	21b4a <MQTTConnect+0x9e>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESS)  // send the connect packet
   21af0:	aa17      	add	r2, sp, #92	; 0x5c
   21af2:	0001      	movs	r1, r0
   21af4:	0020      	movs	r0, r4
   21af6:	4b1e      	ldr	r3, [pc, #120]	; (21b70 <MQTTConnect+0xc4>)
   21af8:	4798      	blx	r3
   21afa:	2800      	cmp	r0, #0
   21afc:	d003      	beq.n	21b06 <MQTTConnect+0x5a>
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
}
   21afe:	b01b      	add	sp, #108	; 0x6c
   21b00:	bd30      	pop	{r4, r5, pc}
        options = &default_options; /* set default options if none were supplied */
   21b02:	ad01      	add	r5, sp, #4
   21b04:	e7e7      	b.n	21ad6 <MQTTConnect+0x2a>
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
   21b06:	aa17      	add	r2, sp, #92	; 0x5c
   21b08:	2102      	movs	r1, #2
   21b0a:	0020      	movs	r0, r4
   21b0c:	4b19      	ldr	r3, [pc, #100]	; (21b74 <MQTTConnect+0xc8>)
   21b0e:	4798      	blx	r3
   21b10:	2802      	cmp	r0, #2
   21b12:	d11d      	bne.n	21b50 <MQTTConnect+0xa4>
        unsigned char connack_rc = 255;
   21b14:	466b      	mov	r3, sp
   21b16:	1c99      	adds	r1, r3, #2
   21b18:	23ff      	movs	r3, #255	; 0xff
   21b1a:	700b      	strb	r3, [r1, #0]
        unsigned char sessionPresent = 0;
   21b1c:	466b      	mov	r3, sp
   21b1e:	1cd8      	adds	r0, r3, #3
   21b20:	2300      	movs	r3, #0
   21b22:	7003      	strb	r3, [r0, #0]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
   21b24:	68e3      	ldr	r3, [r4, #12]
   21b26:	6962      	ldr	r2, [r4, #20]
   21b28:	4d13      	ldr	r5, [pc, #76]	; (21b78 <MQTTConnect+0xcc>)
   21b2a:	47a8      	blx	r5
   21b2c:	2801      	cmp	r0, #1
   21b2e:	d002      	beq.n	21b36 <MQTTConnect+0x8a>
            rc = FAILURE;
   21b30:	2001      	movs	r0, #1
   21b32:	4240      	negs	r0, r0
   21b34:	e7e3      	b.n	21afe <MQTTConnect+0x52>
            rc = connack_rc;
   21b36:	466b      	mov	r3, sp
   21b38:	7898      	ldrb	r0, [r3, #2]
    if (rc == SUCCESS)
   21b3a:	2800      	cmp	r0, #0
   21b3c:	d1df      	bne.n	21afe <MQTTConnect+0x52>
        c->isconnected = 1;
   21b3e:	2301      	movs	r3, #1
   21b40:	6223      	str	r3, [r4, #32]
    return rc;
   21b42:	e7dc      	b.n	21afe <MQTTConnect+0x52>
    int rc = FAILURE;
   21b44:	2001      	movs	r0, #1
   21b46:	4240      	negs	r0, r0
   21b48:	e7d9      	b.n	21afe <MQTTConnect+0x52>
   21b4a:	2001      	movs	r0, #1
   21b4c:	4240      	negs	r0, r0
   21b4e:	e7d6      	b.n	21afe <MQTTConnect+0x52>
        rc = FAILURE;
   21b50:	2001      	movs	r0, #1
   21b52:	4240      	negs	r0, r0
   21b54:	e7d3      	b.n	21afe <MQTTConnect+0x52>
   21b56:	46c0      	nop			; (mov r8, r8)
   21b58:	0002b53c 	.word	0x0002b53c
   21b5c:	00025cd9 	.word	0x00025cd9
   21b60:	00021fe5 	.word	0x00021fe5
   21b64:	00021fad 	.word	0x00021fad
   21b68:	00021fbd 	.word	0x00021fbd
   21b6c:	000223c5 	.word	0x000223c5
   21b70:	00021629 	.word	0x00021629
   21b74:	00021a75 	.word	0x00021a75
   21b78:	0002250d 	.word	0x0002250d

00021b7c <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler msgHandler)
{ 
   21b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
   21b7e:	b091      	sub	sp, #68	; 0x44
   21b80:	0004      	movs	r4, r0
   21b82:	000f      	movs	r7, r1
   21b84:	9305      	str	r3, [sp, #20]
    int rc = FAILURE;  
    Timer timer;
    int len = 0;
    MQTTString topic = MQTTString_initializer;
   21b86:	2300      	movs	r3, #0
   21b88:	930b      	str	r3, [sp, #44]	; 0x2c
   21b8a:	930c      	str	r3, [sp, #48]	; 0x30
	int Qoss = (int) qos;
   21b8c:	9209      	str	r2, [sp, #36]	; 0x24
    topic.cstring = (char *)topicFilter;
   21b8e:	910a      	str	r1, [sp, #40]	; 0x28
    
#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   21b90:	6a03      	ldr	r3, [r0, #32]
   21b92:	2b00      	cmp	r3, #0
   21b94:	d05c      	beq.n	21c50 <MQTTSubscribe+0xd4>
		goto exit;

    TimerInit(&timer);
   21b96:	a80d      	add	r0, sp, #52	; 0x34
   21b98:	4b32      	ldr	r3, [pc, #200]	; (21c64 <MQTTSubscribe+0xe8>)
   21b9a:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   21b9c:	6861      	ldr	r1, [r4, #4]
   21b9e:	a80d      	add	r0, sp, #52	; 0x34
   21ba0:	4b31      	ldr	r3, [pc, #196]	; (21c68 <MQTTSubscribe+0xec>)
   21ba2:	4798      	blx	r3
    
	len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&Qoss);
   21ba4:	6920      	ldr	r0, [r4, #16]
   21ba6:	68a1      	ldr	r1, [r4, #8]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   21ba8:	6823      	ldr	r3, [r4, #0]
   21baa:	4a30      	ldr	r2, [pc, #192]	; (21c6c <MQTTSubscribe+0xf0>)
   21bac:	4293      	cmp	r3, r2
   21bae:	d017      	beq.n	21be0 <MQTTSubscribe+0x64>
   21bb0:	3301      	adds	r3, #1
   21bb2:	6023      	str	r3, [r4, #0]
	len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&Qoss);
   21bb4:	b29b      	uxth	r3, r3
   21bb6:	aa09      	add	r2, sp, #36	; 0x24
   21bb8:	9202      	str	r2, [sp, #8]
   21bba:	aa0a      	add	r2, sp, #40	; 0x28
   21bbc:	9201      	str	r2, [sp, #4]
   21bbe:	2201      	movs	r2, #1
   21bc0:	9200      	str	r2, [sp, #0]
   21bc2:	2200      	movs	r2, #0
   21bc4:	4e2a      	ldr	r6, [pc, #168]	; (21c70 <MQTTSubscribe+0xf4>)
   21bc6:	47b0      	blx	r6
 //   len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, qos);
    if (len <= 0)
   21bc8:	2800      	cmp	r0, #0
   21bca:	dd44      	ble.n	21c56 <MQTTSubscribe+0xda>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   21bcc:	aa0d      	add	r2, sp, #52	; 0x34
   21bce:	0001      	movs	r1, r0
   21bd0:	0020      	movs	r0, r4
   21bd2:	4b28      	ldr	r3, [pc, #160]	; (21c74 <MQTTSubscribe+0xf8>)
   21bd4:	4798      	blx	r3
   21bd6:	1e06      	subs	r6, r0, #0
   21bd8:	d004      	beq.n	21be4 <MQTTSubscribe+0x68>
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
}
   21bda:	0030      	movs	r0, r6
   21bdc:	b011      	add	sp, #68	; 0x44
   21bde:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   21be0:	2301      	movs	r3, #1
   21be2:	e7e6      	b.n	21bb2 <MQTTSubscribe+0x36>
    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback 
   21be4:	aa0d      	add	r2, sp, #52	; 0x34
   21be6:	2109      	movs	r1, #9
   21be8:	0020      	movs	r0, r4
   21bea:	4b23      	ldr	r3, [pc, #140]	; (21c78 <MQTTSubscribe+0xfc>)
   21bec:	4798      	blx	r3
   21bee:	2809      	cmp	r0, #9
   21bf0:	d134      	bne.n	21c5c <MQTTSubscribe+0xe0>
        int count = 0, grantedQoS = -1;
   21bf2:	2300      	movs	r3, #0
   21bf4:	9307      	str	r3, [sp, #28]
   21bf6:	3b01      	subs	r3, #1
   21bf8:	9308      	str	r3, [sp, #32]
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
   21bfa:	68e3      	ldr	r3, [r4, #12]
   21bfc:	9301      	str	r3, [sp, #4]
   21bfe:	6963      	ldr	r3, [r4, #20]
   21c00:	9300      	str	r3, [sp, #0]
   21c02:	ab08      	add	r3, sp, #32
   21c04:	aa07      	add	r2, sp, #28
   21c06:	2101      	movs	r1, #1
   21c08:	3009      	adds	r0, #9
   21c0a:	ad02      	add	r5, sp, #8
   21c0c:	46ac      	mov	ip, r5
   21c0e:	4460      	add	r0, ip
   21c10:	4d1a      	ldr	r5, [pc, #104]	; (21c7c <MQTTSubscribe+0x100>)
   21c12:	47a8      	blx	r5
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   21c14:	0031      	movs	r1, r6
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
   21c16:	2801      	cmp	r0, #1
   21c18:	d00e      	beq.n	21c38 <MQTTSubscribe+0xbc>
                if (c->messageHandlers[i].topicFilter == 0)
   21c1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   21c1c:	2b00      	cmp	r3, #0
   21c1e:	d010      	beq.n	21c42 <MQTTSubscribe+0xc6>
   21c20:	0022      	movs	r2, r4
   21c22:	322c      	adds	r2, #44	; 0x2c
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   21c24:	2301      	movs	r3, #1
                if (c->messageHandlers[i].topicFilter == 0)
   21c26:	6810      	ldr	r0, [r2, #0]
   21c28:	2800      	cmp	r0, #0
   21c2a:	d00b      	beq.n	21c44 <MQTTSubscribe+0xc8>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   21c2c:	3301      	adds	r3, #1
   21c2e:	3208      	adds	r2, #8
   21c30:	2b05      	cmp	r3, #5
   21c32:	d1f8      	bne.n	21c26 <MQTTSubscribe+0xaa>
   21c34:	000e      	movs	r6, r1
   21c36:	e7d0      	b.n	21bda <MQTTSubscribe+0x5e>
            rc = grantedQoS; // 0, 1, 2 or 0x80 
   21c38:	9908      	ldr	r1, [sp, #32]
        if (rc != 0x80)
   21c3a:	2980      	cmp	r1, #128	; 0x80
   21c3c:	d1ed      	bne.n	21c1a <MQTTSubscribe+0x9e>
   21c3e:	000e      	movs	r6, r1
   21c40:	e7cb      	b.n	21bda <MQTTSubscribe+0x5e>
                if (c->messageHandlers[i].topicFilter == 0)
   21c42:	0033      	movs	r3, r6
   21c44:	00db      	lsls	r3, r3, #3
   21c46:	18e4      	adds	r4, r4, r3
                    c->messageHandlers[i].topicFilter = topicFilter;
   21c48:	6267      	str	r7, [r4, #36]	; 0x24
                    c->messageHandlers[i].fp = msgHandler;
   21c4a:	9b05      	ldr	r3, [sp, #20]
   21c4c:	62a3      	str	r3, [r4, #40]	; 0x28
                    break;
   21c4e:	e7c4      	b.n	21bda <MQTTSubscribe+0x5e>
    int rc = FAILURE;  
   21c50:	2601      	movs	r6, #1
   21c52:	4276      	negs	r6, r6
   21c54:	e7c1      	b.n	21bda <MQTTSubscribe+0x5e>
   21c56:	2601      	movs	r6, #1
   21c58:	4276      	negs	r6, r6
   21c5a:	e7be      	b.n	21bda <MQTTSubscribe+0x5e>
        rc = FAILURE;
   21c5c:	2601      	movs	r6, #1
   21c5e:	4276      	negs	r6, r6
    return rc;
   21c60:	e7bb      	b.n	21bda <MQTTSubscribe+0x5e>
   21c62:	46c0      	nop			; (mov r8, r8)
   21c64:	00021fe5 	.word	0x00021fe5
   21c68:	00021fad 	.word	0x00021fad
   21c6c:	0000ffff 	.word	0x0000ffff
   21c70:	00022a8d 	.word	0x00022a8d
   21c74:	00021629 	.word	0x00021629
   21c78:	00021a75 	.word	0x00021a75
   21c7c:	00022b41 	.word	0x00022b41

00021c80 <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
   21c80:	b5f0      	push	{r4, r5, r6, r7, lr}
   21c82:	b091      	sub	sp, #68	; 0x44
   21c84:	0005      	movs	r5, r0
   21c86:	0014      	movs	r4, r2
    int rc = FAILURE;
    Timer timer;   
    MQTTString topic = MQTTString_initializer;
   21c88:	2300      	movs	r3, #0
   21c8a:	930b      	str	r3, [sp, #44]	; 0x2c
   21c8c:	930c      	str	r3, [sp, #48]	; 0x30
    topic.cstring = (char *)topicName;
   21c8e:	910a      	str	r1, [sp, #40]	; 0x28
    int len = 0;

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   21c90:	6a03      	ldr	r3, [r0, #32]
   21c92:	2b00      	cmp	r3, #0
   21c94:	d062      	beq.n	21d5c <MQTTPublish+0xdc>
		goto exit;

    TimerInit(&timer);
   21c96:	a80d      	add	r0, sp, #52	; 0x34
   21c98:	4b36      	ldr	r3, [pc, #216]	; (21d74 <MQTTPublish+0xf4>)
   21c9a:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   21c9c:	6869      	ldr	r1, [r5, #4]
   21c9e:	a80d      	add	r0, sp, #52	; 0x34
   21ca0:	4b35      	ldr	r3, [pc, #212]	; (21d78 <MQTTPublish+0xf8>)
   21ca2:	4798      	blx	r3

    if (message->qos == QOS1 || message->qos == QOS2)
   21ca4:	7823      	ldrb	r3, [r4, #0]
   21ca6:	3b01      	subs	r3, #1
   21ca8:	2b01      	cmp	r3, #1
   21caa:	d921      	bls.n	21cf0 <MQTTPublish+0x70>
        message->id = getNextPacketId(c);
    
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   21cac:	7823      	ldrb	r3, [r4, #0]
   21cae:	68e2      	ldr	r2, [r4, #12]
   21cb0:	9206      	str	r2, [sp, #24]
   21cb2:	68a2      	ldr	r2, [r4, #8]
   21cb4:	9205      	str	r2, [sp, #20]
   21cb6:	aa0a      	add	r2, sp, #40	; 0x28
   21cb8:	a902      	add	r1, sp, #8
   21cba:	cac1      	ldmia	r2!, {r0, r6, r7}
   21cbc:	c1c1      	stmia	r1!, {r0, r6, r7}
   21cbe:	88a2      	ldrh	r2, [r4, #4]
   21cc0:	9201      	str	r2, [sp, #4]
   21cc2:	7862      	ldrb	r2, [r4, #1]
   21cc4:	9200      	str	r2, [sp, #0]
   21cc6:	2200      	movs	r2, #0
   21cc8:	68a9      	ldr	r1, [r5, #8]
   21cca:	6928      	ldr	r0, [r5, #16]
   21ccc:	4e2b      	ldr	r6, [pc, #172]	; (21d7c <MQTTPublish+0xfc>)
   21cce:	47b0      	blx	r6
              topic, (unsigned char*)message->payload, message->payloadlen);
    if (len <= 0)
   21cd0:	2800      	cmp	r0, #0
   21cd2:	dd46      	ble.n	21d62 <MQTTPublish+0xe2>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   21cd4:	aa0d      	add	r2, sp, #52	; 0x34
   21cd6:	0001      	movs	r1, r0
   21cd8:	0028      	movs	r0, r5
   21cda:	4b29      	ldr	r3, [pc, #164]	; (21d80 <MQTTPublish+0x100>)
   21cdc:	4798      	blx	r3
   21cde:	2800      	cmp	r0, #0
   21ce0:	d104      	bne.n	21cec <MQTTPublish+0x6c>
        goto exit; // there was a problem
    
    if (message->qos == QOS1)
   21ce2:	7823      	ldrb	r3, [r4, #0]
   21ce4:	2b01      	cmp	r3, #1
   21ce6:	d00d      	beq.n	21d04 <MQTTPublish+0x84>
                rc = FAILURE;
        }
        else
            rc = FAILURE;
    }
    else if (message->qos == QOS2)
   21ce8:	2b02      	cmp	r3, #2
   21cea:	d021      	beq.n	21d30 <MQTTPublish+0xb0>
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
}
   21cec:	b011      	add	sp, #68	; 0x44
   21cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   21cf0:	682b      	ldr	r3, [r5, #0]
   21cf2:	4a24      	ldr	r2, [pc, #144]	; (21d84 <MQTTPublish+0x104>)
   21cf4:	4293      	cmp	r3, r2
   21cf6:	d003      	beq.n	21d00 <MQTTPublish+0x80>
   21cf8:	3301      	adds	r3, #1
   21cfa:	602b      	str	r3, [r5, #0]
        message->id = getNextPacketId(c);
   21cfc:	80a3      	strh	r3, [r4, #4]
   21cfe:	e7d5      	b.n	21cac <MQTTPublish+0x2c>
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   21d00:	2301      	movs	r3, #1
   21d02:	e7fa      	b.n	21cfa <MQTTPublish+0x7a>
        if (waitfor(c, PUBACK, &timer) == PUBACK)
   21d04:	aa0d      	add	r2, sp, #52	; 0x34
   21d06:	2104      	movs	r1, #4
   21d08:	0028      	movs	r0, r5
   21d0a:	4b1f      	ldr	r3, [pc, #124]	; (21d88 <MQTTPublish+0x108>)
   21d0c:	4798      	blx	r3
   21d0e:	2804      	cmp	r0, #4
   21d10:	d12a      	bne.n	21d68 <MQTTPublish+0xe8>
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   21d12:	696b      	ldr	r3, [r5, #20]
   21d14:	68ea      	ldr	r2, [r5, #12]
   21d16:	9200      	str	r2, [sp, #0]
   21d18:	2226      	movs	r2, #38	; 0x26
   21d1a:	446a      	add	r2, sp
   21d1c:	a909      	add	r1, sp, #36	; 0x24
   21d1e:	3021      	adds	r0, #33	; 0x21
   21d20:	4468      	add	r0, sp
   21d22:	4c1a      	ldr	r4, [pc, #104]	; (21d8c <MQTTPublish+0x10c>)
   21d24:	47a0      	blx	r4
   21d26:	3801      	subs	r0, #1
   21d28:	1e43      	subs	r3, r0, #1
   21d2a:	4198      	sbcs	r0, r3
   21d2c:	4240      	negs	r0, r0
   21d2e:	e7dd      	b.n	21cec <MQTTPublish+0x6c>
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
   21d30:	aa0d      	add	r2, sp, #52	; 0x34
   21d32:	2107      	movs	r1, #7
   21d34:	0028      	movs	r0, r5
   21d36:	4b14      	ldr	r3, [pc, #80]	; (21d88 <MQTTPublish+0x108>)
   21d38:	4798      	blx	r3
   21d3a:	2807      	cmp	r0, #7
   21d3c:	d117      	bne.n	21d6e <MQTTPublish+0xee>
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   21d3e:	696b      	ldr	r3, [r5, #20]
   21d40:	68ea      	ldr	r2, [r5, #12]
   21d42:	9200      	str	r2, [sp, #0]
   21d44:	2226      	movs	r2, #38	; 0x26
   21d46:	446a      	add	r2, sp
   21d48:	a909      	add	r1, sp, #36	; 0x24
   21d4a:	301e      	adds	r0, #30
   21d4c:	4468      	add	r0, sp
   21d4e:	4c0f      	ldr	r4, [pc, #60]	; (21d8c <MQTTPublish+0x10c>)
   21d50:	47a0      	blx	r4
   21d52:	3801      	subs	r0, #1
   21d54:	1e43      	subs	r3, r0, #1
   21d56:	4198      	sbcs	r0, r3
   21d58:	4240      	negs	r0, r0
   21d5a:	e7c7      	b.n	21cec <MQTTPublish+0x6c>
    int rc = FAILURE;
   21d5c:	2001      	movs	r0, #1
   21d5e:	4240      	negs	r0, r0
   21d60:	e7c4      	b.n	21cec <MQTTPublish+0x6c>
   21d62:	2001      	movs	r0, #1
   21d64:	4240      	negs	r0, r0
   21d66:	e7c1      	b.n	21cec <MQTTPublish+0x6c>
            rc = FAILURE;
   21d68:	2001      	movs	r0, #1
   21d6a:	4240      	negs	r0, r0
   21d6c:	e7be      	b.n	21cec <MQTTPublish+0x6c>
            rc = FAILURE;
   21d6e:	2001      	movs	r0, #1
   21d70:	4240      	negs	r0, r0
    return rc;
   21d72:	e7bb      	b.n	21cec <MQTTPublish+0x6c>
   21d74:	00021fe5 	.word	0x00021fe5
   21d78:	00021fad 	.word	0x00021fad
   21d7c:	0002292d 	.word	0x0002292d
   21d80:	00021629 	.word	0x00021629
   21d84:	0000ffff 	.word	0x0000ffff
   21d88:	00021a75 	.word	0x00021a75
   21d8c:	00022651 	.word	0x00022651

00021d90 <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{  
   21d90:	b510      	push	{r4, lr}
   21d92:	b084      	sub	sp, #16
   21d94:	0004      	movs	r4, r0
    int len = 0;

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
   21d96:	a801      	add	r0, sp, #4
   21d98:	4b0b      	ldr	r3, [pc, #44]	; (21dc8 <MQTTDisconnect+0x38>)
   21d9a:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   21d9c:	6861      	ldr	r1, [r4, #4]
   21d9e:	a801      	add	r0, sp, #4
   21da0:	4b0a      	ldr	r3, [pc, #40]	; (21dcc <MQTTDisconnect+0x3c>)
   21da2:	4798      	blx	r3

	len = MQTTSerialize_disconnect(c->buf, c->buf_size);
   21da4:	68a1      	ldr	r1, [r4, #8]
   21da6:	6920      	ldr	r0, [r4, #16]
   21da8:	4b09      	ldr	r3, [pc, #36]	; (21dd0 <MQTTDisconnect+0x40>)
   21daa:	4798      	blx	r3
    if (len > 0)
   21dac:	2800      	cmp	r0, #0
   21dae:	dd08      	ble.n	21dc2 <MQTTDisconnect+0x32>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
   21db0:	aa01      	add	r2, sp, #4
   21db2:	0001      	movs	r1, r0
   21db4:	0020      	movs	r0, r4
   21db6:	4b07      	ldr	r3, [pc, #28]	; (21dd4 <MQTTDisconnect+0x44>)
   21db8:	4798      	blx	r3
        
    c->isconnected = 0;
   21dba:	2300      	movs	r3, #0
   21dbc:	6223      	str	r3, [r4, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
}
   21dbe:	b004      	add	sp, #16
   21dc0:	bd10      	pop	{r4, pc}
    int rc = FAILURE;
   21dc2:	2001      	movs	r0, #1
   21dc4:	4240      	negs	r0, r0
   21dc6:	e7f8      	b.n	21dba <MQTTDisconnect+0x2a>
   21dc8:	00021fe5 	.word	0x00021fe5
   21dcc:	00021fad 	.word	0x00021fad
   21dd0:	00022599 	.word	0x00022599
   21dd4:	00021629 	.word	0x00021629

00021dd8 <WINC1500_disconnect>:
  //return gu32MQTTBrokerSendLen;
  return len;
}


static void WINC1500_disconnect(Network* n) {
   21dd8:	b510      	push	{r4, lr}
   21dda:	0004      	movs	r4, r0
	close(n->socket);
   21ddc:	2000      	movs	r0, #0
   21dde:	5620      	ldrsb	r0, [r4, r0]
   21de0:	4b04      	ldr	r3, [pc, #16]	; (21df4 <WINC1500_disconnect+0x1c>)
   21de2:	4798      	blx	r3
	n->socket=-1;
   21de4:	2301      	movs	r3, #1
   21de6:	425b      	negs	r3, r3
   21de8:	6023      	str	r3, [r4, #0]
	gbMQTTBrokerConnected=false;
   21dea:	2200      	movs	r2, #0
   21dec:	4b02      	ldr	r3, [pc, #8]	; (21df8 <WINC1500_disconnect+0x20>)
   21dee:	701a      	strb	r2, [r3, #0]
}
   21df0:	bd10      	pop	{r4, pc}
   21df2:	46c0      	nop			; (mov r8, r8)
   21df4:	0001d2c9 	.word	0x0001d2c9
   21df8:	20003d1e 	.word	0x20003d1e

00021dfc <WINC1500_write>:
static int WINC1500_write(Network* n, unsigned char* buffer, int len, int timeout_ms) {
   21dfc:	b570      	push	{r4, r5, r6, lr}
   21dfe:	0016      	movs	r6, r2
  gbMQTTBrokerSendDone=false;
   21e00:	2200      	movs	r2, #0
   21e02:	4b0d      	ldr	r3, [pc, #52]	; (21e38 <WINC1500_write+0x3c>)
   21e04:	701a      	strb	r2, [r3, #0]
  if (SOCK_ERR_NO_ERROR!=send(n->socket,buffer,len,0)){
   21e06:	b2b2      	uxth	r2, r6
   21e08:	7800      	ldrb	r0, [r0, #0]
   21e0a:	b240      	sxtb	r0, r0
   21e0c:	2300      	movs	r3, #0
   21e0e:	4c0b      	ldr	r4, [pc, #44]	; (21e3c <WINC1500_write+0x40>)
   21e10:	47a0      	blx	r4
   21e12:	2800      	cmp	r0, #0
   21e14:	d10c      	bne.n	21e30 <WINC1500_write+0x34>
  while (false==gbMQTTBrokerSendDone){
   21e16:	4b08      	ldr	r3, [pc, #32]	; (21e38 <WINC1500_write+0x3c>)
   21e18:	781b      	ldrb	r3, [r3, #0]
   21e1a:	2b00      	cmp	r3, #0
   21e1c:	d106      	bne.n	21e2c <WINC1500_write+0x30>
	  m2m_wifi_handle_events(NULL);
   21e1e:	4d08      	ldr	r5, [pc, #32]	; (21e40 <WINC1500_write+0x44>)
  while (false==gbMQTTBrokerSendDone){
   21e20:	4c05      	ldr	r4, [pc, #20]	; (21e38 <WINC1500_write+0x3c>)
	  m2m_wifi_handle_events(NULL);
   21e22:	2000      	movs	r0, #0
   21e24:	47a8      	blx	r5
  while (false==gbMQTTBrokerSendDone){
   21e26:	7823      	ldrb	r3, [r4, #0]
   21e28:	2b00      	cmp	r3, #0
   21e2a:	d0fa      	beq.n	21e22 <WINC1500_write+0x26>
}
   21e2c:	0030      	movs	r0, r6
   21e2e:	bd70      	pop	{r4, r5, r6, pc}
	  return -1;
   21e30:	2601      	movs	r6, #1
   21e32:	4276      	negs	r6, r6
   21e34:	e7fa      	b.n	21e2c <WINC1500_write+0x30>
   21e36:	46c0      	nop			; (mov r8, r8)
   21e38:	20003d21 	.word	0x20003d21
   21e3c:	0001d19d 	.word	0x0001d19d
   21e40:	0001b1b5 	.word	0x0001b1b5

00021e44 <WINC1500_read>:
static int WINC1500_read(Network* n, unsigned char* buffer, int len, int timeout_ms) { 
   21e44:	b5f0      	push	{r4, r5, r6, r7, lr}
   21e46:	b083      	sub	sp, #12
   21e48:	9101      	str	r1, [sp, #4]
   21e4a:	0014      	movs	r4, r2
  if(0==timeout_ms) timeout_ms=10;
   21e4c:	2b00      	cmp	r3, #0
   21e4e:	d100      	bne.n	21e52 <WINC1500_read+0xe>
   21e50:	330a      	adds	r3, #10
  if(0==gu32MQTTRxFIFOLen){ //no data in internal FIFO
   21e52:	4a22      	ldr	r2, [pc, #136]	; (21edc <WINC1500_read+0x98>)
   21e54:	6812      	ldr	r2, [r2, #0]
   21e56:	2a00      	cmp	r2, #0
   21e58:	d013      	beq.n	21e82 <WINC1500_read+0x3e>
  if(len>(int)gu32MQTTRxFIFOLen){
   21e5a:	4b20      	ldr	r3, [pc, #128]	; (21edc <WINC1500_read+0x98>)
   21e5c:	681d      	ldr	r5, [r3, #0]
   21e5e:	42a5      	cmp	r5, r4
   21e60:	db39      	blt.n	21ed6 <WINC1500_read+0x92>
  memcpy((void*)buffer, (const void*)&gcMQTTRxFIFO[gu32MQTTRxFIFOPtr],len);
   21e62:	4e1f      	ldr	r6, [pc, #124]	; (21ee0 <WINC1500_read+0x9c>)
   21e64:	6837      	ldr	r7, [r6, #0]
   21e66:	491f      	ldr	r1, [pc, #124]	; (21ee4 <WINC1500_read+0xa0>)
   21e68:	19c9      	adds	r1, r1, r7
   21e6a:	0022      	movs	r2, r4
   21e6c:	9801      	ldr	r0, [sp, #4]
   21e6e:	4b1e      	ldr	r3, [pc, #120]	; (21ee8 <WINC1500_read+0xa4>)
   21e70:	4798      	blx	r3
  gu32MQTTRxFIFOLen-=len;
   21e72:	1b2d      	subs	r5, r5, r4
   21e74:	4b19      	ldr	r3, [pc, #100]	; (21edc <WINC1500_read+0x98>)
   21e76:	601d      	str	r5, [r3, #0]
  gu32MQTTRxFIFOPtr+=len;
   21e78:	193f      	adds	r7, r7, r4
   21e7a:	6037      	str	r7, [r6, #0]
  return len;
   21e7c:	0020      	movs	r0, r4
}
   21e7e:	b003      	add	sp, #12
   21e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  gbMQTTBrokerRecvDone=false;
   21e82:	2100      	movs	r1, #0
   21e84:	4a19      	ldr	r2, [pc, #100]	; (21eec <WINC1500_read+0xa8>)
   21e86:	7011      	strb	r1, [r2, #0]
	  if (SOCK_ERR_NO_ERROR!=recv(n->socket,gcMQTTRxFIFO,MQTT_RX_POOL_SIZE,timeout_ms)){
   21e88:	7800      	ldrb	r0, [r0, #0]
   21e8a:	b240      	sxtb	r0, r0
   21e8c:	2280      	movs	r2, #128	; 0x80
   21e8e:	0052      	lsls	r2, r2, #1
   21e90:	4914      	ldr	r1, [pc, #80]	; (21ee4 <WINC1500_read+0xa0>)
   21e92:	4d17      	ldr	r5, [pc, #92]	; (21ef0 <WINC1500_read+0xac>)
   21e94:	47a8      	blx	r5
   21e96:	2800      	cmp	r0, #0
   21e98:	d11a      	bne.n	21ed0 <WINC1500_read+0x8c>
	  while (false==gbMQTTBrokerRecvDone){
   21e9a:	4b14      	ldr	r3, [pc, #80]	; (21eec <WINC1500_read+0xa8>)
   21e9c:	781b      	ldrb	r3, [r3, #0]
   21e9e:	2b00      	cmp	r3, #0
   21ea0:	d106      	bne.n	21eb0 <WINC1500_read+0x6c>
		  m2m_wifi_handle_events(NULL);
   21ea2:	4f14      	ldr	r7, [pc, #80]	; (21ef4 <WINC1500_read+0xb0>)
	  while (false==gbMQTTBrokerRecvDone){
   21ea4:	4d11      	ldr	r5, [pc, #68]	; (21eec <WINC1500_read+0xa8>)
		  m2m_wifi_handle_events(NULL);
   21ea6:	2000      	movs	r0, #0
   21ea8:	47b8      	blx	r7
	  while (false==gbMQTTBrokerRecvDone){
   21eaa:	782b      	ldrb	r3, [r5, #0]
   21eac:	2b00      	cmp	r3, #0
   21eae:	d0fa      	beq.n	21ea6 <WINC1500_read+0x62>
	  if(gi32MQTTBrokerRxLen>0){ //data recieved form network
   21eb0:	4b11      	ldr	r3, [pc, #68]	; (21ef8 <WINC1500_read+0xb4>)
   21eb2:	6818      	ldr	r0, [r3, #0]
   21eb4:	2800      	cmp	r0, #0
   21eb6:	dd05      	ble.n	21ec4 <WINC1500_read+0x80>
		gu32MQTTRxFIFOLen=gi32MQTTBrokerRxLen;
   21eb8:	4b08      	ldr	r3, [pc, #32]	; (21edc <WINC1500_read+0x98>)
   21eba:	6018      	str	r0, [r3, #0]
		gu32MQTTRxFIFOPtr=0;
   21ebc:	2200      	movs	r2, #0
   21ebe:	4b08      	ldr	r3, [pc, #32]	; (21ee0 <WINC1500_read+0x9c>)
   21ec0:	601a      	str	r2, [r3, #0]
   21ec2:	e7ca      	b.n	21e5a <WINC1500_read+0x16>
		  gu32MQTTRxFIFOLen=0;
   21ec4:	2300      	movs	r3, #0
   21ec6:	4a05      	ldr	r2, [pc, #20]	; (21edc <WINC1500_read+0x98>)
   21ec8:	6013      	str	r3, [r2, #0]
		  gu32MQTTRxFIFOPtr=0;
   21eca:	4a05      	ldr	r2, [pc, #20]	; (21ee0 <WINC1500_read+0x9c>)
   21ecc:	6013      	str	r3, [r2, #0]
		  return gi32MQTTBrokerRxLen; //this corresponds to the error code.
   21ece:	e7d6      	b.n	21e7e <WINC1500_read+0x3a>
		  return -1;
   21ed0:	2001      	movs	r0, #1
   21ed2:	4240      	negs	r0, r0
   21ed4:	e7d3      	b.n	21e7e <WINC1500_read+0x3a>
	  return -1;
   21ed6:	2001      	movs	r0, #1
   21ed8:	4240      	negs	r0, r0
   21eda:	e7d0      	b.n	21e7e <WINC1500_read+0x3a>
   21edc:	20003e30 	.word	0x20003e30
   21ee0:	20003e34 	.word	0x20003e34
   21ee4:	20003d24 	.word	0x20003d24
   21ee8:	00025cd9 	.word	0x00025cd9
   21eec:	20003d20 	.word	0x20003d20
   21ef0:	0001d235 	.word	0x0001d235
   21ef4:	0001b1b5 	.word	0x0001b1b5
   21ef8:	20003e28 	.word	0x20003e28

00021efc <dnsResolveCallback>:
{
   21efc:	b510      	push	{r4, lr}
   21efe:	0002      	movs	r2, r0
   21f00:	000c      	movs	r4, r1
	if((gbMQTTBrokerIpresolved == false) && (!strcmp((const char *)gpcHostAddr, (const char *)hostName)))
   21f02:	4b08      	ldr	r3, [pc, #32]	; (21f24 <dnsResolveCallback+0x28>)
   21f04:	781b      	ldrb	r3, [r3, #0]
   21f06:	2b00      	cmp	r3, #0
   21f08:	d10b      	bne.n	21f22 <dnsResolveCallback+0x26>
   21f0a:	4b07      	ldr	r3, [pc, #28]	; (21f28 <dnsResolveCallback+0x2c>)
   21f0c:	6818      	ldr	r0, [r3, #0]
   21f0e:	0011      	movs	r1, r2
   21f10:	4b06      	ldr	r3, [pc, #24]	; (21f2c <dnsResolveCallback+0x30>)
   21f12:	4798      	blx	r3
   21f14:	2800      	cmp	r0, #0
   21f16:	d104      	bne.n	21f22 <dnsResolveCallback+0x26>
		gi32MQTTBrokerIp = hostIp;
   21f18:	4b05      	ldr	r3, [pc, #20]	; (21f30 <dnsResolveCallback+0x34>)
   21f1a:	601c      	str	r4, [r3, #0]
		gbMQTTBrokerIpresolved = true;
   21f1c:	2201      	movs	r2, #1
   21f1e:	4b01      	ldr	r3, [pc, #4]	; (21f24 <dnsResolveCallback+0x28>)
   21f20:	701a      	strb	r2, [r3, #0]
}
   21f22:	bd10      	pop	{r4, pc}
   21f24:	20003d1f 	.word	0x20003d1f
   21f28:	20003e2c 	.word	0x20003e2c
   21f2c:	00026067 	.word	0x00026067
   21f30:	20003e24 	.word	0x20003e24

00021f34 <tcpClientSocketEventHandler>:
{
   21f34:	b530      	push	{r4, r5, lr}
   21f36:	4b12      	ldr	r3, [pc, #72]	; (21f80 <tcpClientSocketEventHandler+0x4c>)
   21f38:	24af      	movs	r4, #175	; 0xaf
   21f3a:	00a4      	lsls	r4, r4, #2
   21f3c:	191d      	adds	r5, r3, r4
   21f3e:	e002      	b.n	21f46 <tcpClientSocketEventHandler+0x12>
   21f40:	3364      	adds	r3, #100	; 0x64
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   21f42:	42ab      	cmp	r3, r5
   21f44:	d00b      	beq.n	21f5e <tcpClientSocketEventHandler+0x2a>
		if(mqttClientPool[cIdx].mqtt_instance != NULL)
   21f46:	6e1c      	ldr	r4, [r3, #96]	; 0x60
   21f48:	2c00      	cmp	r4, #0
   21f4a:	d0f9      	beq.n	21f40 <tcpClientSocketEventHandler+0xc>
			if(mqttInstance->network.socket == sock)
   21f4c:	6a24      	ldr	r4, [r4, #32]
   21f4e:	4284      	cmp	r4, r0
   21f50:	d1f6      	bne.n	21f40 <tcpClientSocketEventHandler+0xc>
		switch (u8Msg) {
   21f52:	2906      	cmp	r1, #6
   21f54:	d00c      	beq.n	21f70 <tcpClientSocketEventHandler+0x3c>
   21f56:	2907      	cmp	r1, #7
   21f58:	d006      	beq.n	21f68 <tcpClientSocketEventHandler+0x34>
   21f5a:	2905      	cmp	r1, #5
   21f5c:	d000      	beq.n	21f60 <tcpClientSocketEventHandler+0x2c>
}
   21f5e:	bd30      	pop	{r4, r5, pc}
				gbMQTTBrokerConnected=true;
   21f60:	2201      	movs	r2, #1
   21f62:	4b08      	ldr	r3, [pc, #32]	; (21f84 <tcpClientSocketEventHandler+0x50>)
   21f64:	701a      	strb	r2, [r3, #0]
			break;
   21f66:	e7fa      	b.n	21f5e <tcpClientSocketEventHandler+0x2a>
				gbMQTTBrokerSendDone=true;
   21f68:	2201      	movs	r2, #1
   21f6a:	4b07      	ldr	r3, [pc, #28]	; (21f88 <tcpClientSocketEventHandler+0x54>)
   21f6c:	701a      	strb	r2, [r3, #0]
			break;
   21f6e:	e7f6      	b.n	21f5e <tcpClientSocketEventHandler+0x2a>
				gi32MQTTBrokerRxLen = pstrRx->s16BufferSize;
   21f70:	2304      	movs	r3, #4
   21f72:	5ed2      	ldrsh	r2, [r2, r3]
   21f74:	4b05      	ldr	r3, [pc, #20]	; (21f8c <tcpClientSocketEventHandler+0x58>)
   21f76:	601a      	str	r2, [r3, #0]
				gbMQTTBrokerRecvDone=true;
   21f78:	2201      	movs	r2, #1
   21f7a:	4b05      	ldr	r3, [pc, #20]	; (21f90 <tcpClientSocketEventHandler+0x5c>)
   21f7c:	701a      	strb	r2, [r3, #0]
}
   21f7e:	e7ee      	b.n	21f5e <tcpClientSocketEventHandler+0x2a>
   21f80:	20003e38 	.word	0x20003e38
   21f84:	20003d1e 	.word	0x20003d1e
   21f88:	20003d21 	.word	0x20003d21
   21f8c:	20003e28 	.word	0x20003e28
   21f90:	20003d20 	.word	0x20003d20

00021f94 <TimerIsExpired>:
char TimerIsExpired(Timer* timer) {
   21f94:	b510      	push	{r4, lr}
   21f96:	0001      	movs	r1, r0
	return xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait) == pdTRUE;
   21f98:	3004      	adds	r0, #4
   21f9a:	4b03      	ldr	r3, [pc, #12]	; (21fa8 <TimerIsExpired+0x14>)
   21f9c:	4798      	blx	r3
   21f9e:	3801      	subs	r0, #1
   21fa0:	4243      	negs	r3, r0
   21fa2:	4158      	adcs	r0, r3
   21fa4:	b2c0      	uxtb	r0, r0
}
   21fa6:	bd10      	pop	{r4, pc}
   21fa8:	00018655 	.word	0x00018655

00021fac <TimerCountdownMS>:
void TimerCountdownMS(Timer* timer, unsigned int timeout_ms) {
   21fac:	b510      	push	{r4, lr}
	timer->xTicksToWait = timeout_ms / portTICK_PERIOD_MS; /* convert milliseconds to ticks */
   21fae:	c002      	stmia	r0!, {r1}
	vTaskSetTimeOutState(&timer->xTimeOut); /* Record the time at which this function was entered. */
   21fb0:	4b01      	ldr	r3, [pc, #4]	; (21fb8 <TimerCountdownMS+0xc>)
   21fb2:	4798      	blx	r3
}
   21fb4:	bd10      	pop	{r4, pc}
   21fb6:	46c0      	nop			; (mov r8, r8)
   21fb8:	0001860d 	.word	0x0001860d

00021fbc <TimerCountdown>:
void TimerCountdown(Timer* timer, unsigned int timeout) {
   21fbc:	b510      	push	{r4, lr}
	TimerCountdownMS(timer, timeout * 1000);
   21fbe:	23fa      	movs	r3, #250	; 0xfa
   21fc0:	009b      	lsls	r3, r3, #2
   21fc2:	4359      	muls	r1, r3
	timer->xTicksToWait = timeout_ms / portTICK_PERIOD_MS; /* convert milliseconds to ticks */
   21fc4:	c002      	stmia	r0!, {r1}
	vTaskSetTimeOutState(&timer->xTimeOut); /* Record the time at which this function was entered. */
   21fc6:	4b01      	ldr	r3, [pc, #4]	; (21fcc <TimerCountdown+0x10>)
   21fc8:	4798      	blx	r3
}
   21fca:	bd10      	pop	{r4, pc}
   21fcc:	0001860d 	.word	0x0001860d

00021fd0 <TimerLeftMS>:
int TimerLeftMS(Timer* timer) {
   21fd0:	b510      	push	{r4, lr}
   21fd2:	0004      	movs	r4, r0
	xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait); /* updates xTicksToWait to the number left */
   21fd4:	3004      	adds	r0, #4
   21fd6:	0021      	movs	r1, r4
   21fd8:	4b01      	ldr	r3, [pc, #4]	; (21fe0 <TimerLeftMS+0x10>)
   21fda:	4798      	blx	r3
	return (timer->xTicksToWait < 0) ? 0 : (timer->xTicksToWait * portTICK_PERIOD_MS);
   21fdc:	6820      	ldr	r0, [r4, #0]
}
   21fde:	bd10      	pop	{r4, pc}
   21fe0:	00018655 	.word	0x00018655

00021fe4 <TimerInit>:
void TimerInit(Timer* timer) {
   21fe4:	b510      	push	{r4, lr}
	timer->xTicksToWait = 0;
   21fe6:	2300      	movs	r3, #0
   21fe8:	c008      	stmia	r0!, {r3}
	memset(&timer->xTimeOut, '\0', sizeof(timer->xTimeOut));
   21fea:	2208      	movs	r2, #8
   21fec:	2100      	movs	r1, #0
   21fee:	4b01      	ldr	r3, [pc, #4]	; (21ff4 <TimerInit+0x10>)
   21ff0:	4798      	blx	r3
}
   21ff2:	bd10      	pop	{r4, pc}
   21ff4:	00025d0f 	.word	0x00025d0f

00021ff8 <NetworkInit>:


void NetworkInit(Network* n) {
	n->socket = -1;
   21ff8:	2301      	movs	r3, #1
   21ffa:	425b      	negs	r3, r3
   21ffc:	6003      	str	r3, [r0, #0]
	n->mqttread = WINC1500_read;
   21ffe:	4b03      	ldr	r3, [pc, #12]	; (2200c <NetworkInit+0x14>)
   22000:	6083      	str	r3, [r0, #8]
	n->mqttwrite = WINC1500_write;
   22002:	4b03      	ldr	r3, [pc, #12]	; (22010 <NetworkInit+0x18>)
   22004:	60c3      	str	r3, [r0, #12]
	n->disconnect = WINC1500_disconnect;
   22006:	4b03      	ldr	r3, [pc, #12]	; (22014 <NetworkInit+0x1c>)
   22008:	6103      	str	r3, [r0, #16]
}
   2200a:	4770      	bx	lr
   2200c:	00021e45 	.word	0x00021e45
   22010:	00021dfd 	.word	0x00021dfd
   22014:	00021dd9 	.word	0x00021dd9

00022018 <ConnectNetwork>:

int ConnectNetwork(Network* n, char* addr, int port, int TLSFlag){
   22018:	b5f0      	push	{r4, r5, r6, r7, lr}
   2201a:	b087      	sub	sp, #28
   2201c:	0006      	movs	r6, r0
   2201e:	0015      	movs	r5, r2
   22020:	9301      	str	r3, [sp, #4]

  //Resolve Server URL.
  gbMQTTBrokerIpresolved = false;
   22022:	4c25      	ldr	r4, [pc, #148]	; (220b8 <ConnectNetwork+0xa0>)
   22024:	2300      	movs	r3, #0
   22026:	7023      	strb	r3, [r4, #0]
  gpcHostAddr = addr;
   22028:	4b24      	ldr	r3, [pc, #144]	; (220bc <ConnectNetwork+0xa4>)
   2202a:	6019      	str	r1, [r3, #0]
  gethostbyname((uint8*)addr);
   2202c:	0008      	movs	r0, r1
   2202e:	4b24      	ldr	r3, [pc, #144]	; (220c0 <ConnectNetwork+0xa8>)
   22030:	4798      	blx	r3
 
  //wait for resolver callback
  while (false==gbMQTTBrokerIpresolved){
   22032:	7823      	ldrb	r3, [r4, #0]
   22034:	2b00      	cmp	r3, #0
   22036:	d106      	bne.n	22046 <ConnectNetwork+0x2e>
	  m2m_wifi_handle_events(NULL);
   22038:	4f22      	ldr	r7, [pc, #136]	; (220c4 <ConnectNetwork+0xac>)
  while (false==gbMQTTBrokerIpresolved){
   2203a:	4c1f      	ldr	r4, [pc, #124]	; (220b8 <ConnectNetwork+0xa0>)
	  m2m_wifi_handle_events(NULL);
   2203c:	2000      	movs	r0, #0
   2203e:	47b8      	blx	r7
  while (false==gbMQTTBrokerIpresolved){
   22040:	7823      	ldrb	r3, [r4, #0]
   22042:	2b00      	cmp	r3, #0
   22044:	d0fa      	beq.n	2203c <ConnectNetwork+0x24>
  }
  
  n->hostIP = gi32MQTTBrokerIp;
   22046:	4b20      	ldr	r3, [pc, #128]	; (220c8 <ConnectNetwork+0xb0>)
   22048:	681a      	ldr	r2, [r3, #0]
   2204a:	6072      	str	r2, [r6, #4]
  
  //connect to socket
  struct sockaddr_in addr_in;
  addr_in.sin_family = AF_INET;
   2204c:	2302      	movs	r3, #2
   2204e:	a902      	add	r1, sp, #8
   22050:	800b      	strh	r3, [r1, #0]
  addr_in.sin_port = _htons(port);
   22052:	022b      	lsls	r3, r5, #8
   22054:	491d      	ldr	r1, [pc, #116]	; (220cc <ConnectNetwork+0xb4>)
   22056:	400b      	ands	r3, r1
   22058:	b2ad      	uxth	r5, r5
   2205a:	0a2d      	lsrs	r5, r5, #8
   2205c:	431d      	orrs	r5, r3
   2205e:	ab02      	add	r3, sp, #8
   22060:	805d      	strh	r5, [r3, #2]
  addr_in.sin_addr.s_addr = gi32MQTTBrokerIp;
   22062:	9203      	str	r2, [sp, #12]

  /* Create secure socket */ 
  if(n->socket < 0)
   22064:	6833      	ldr	r3, [r6, #0]
   22066:	2b00      	cmp	r3, #0
   22068:	db16      	blt.n	22098 <ConnectNetwork+0x80>
	n->socket = socket(AF_INET, SOCK_STREAM, TLSFlag);
  
  /* Check if socket was created successfully */
  if (n->socket == -1) {
   2206a:	6830      	ldr	r0, [r6, #0]
   2206c:	1c43      	adds	r3, r0, #1
   2206e:	d01b      	beq.n	220a8 <ConnectNetwork+0x90>
   close(n->socket);
   return SOCK_ERR_INVALID;
  }
  
  /* If success, connect to socket */
  if (connect(n->socket, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
   22070:	b240      	sxtb	r0, r0
   22072:	2210      	movs	r2, #16
   22074:	a902      	add	r1, sp, #8
   22076:	4b16      	ldr	r3, [pc, #88]	; (220d0 <ConnectNetwork+0xb8>)
   22078:	4798      	blx	r3
   2207a:	2800      	cmp	r0, #0
   2207c:	d119      	bne.n	220b2 <ConnectNetwork+0x9a>
   printf("ERROR >> connect error.\r\n");
   #endif
   return SOCK_ERR_INVALID;
  }
  
  gbMQTTBrokerConnected = false;
   2207e:	2200      	movs	r2, #0
   22080:	4b14      	ldr	r3, [pc, #80]	; (220d4 <ConnectNetwork+0xbc>)
   22082:	701a      	strb	r2, [r3, #0]
  
  /*wait for SOCKET_MSG_CONNECT event */
  while(false==gbMQTTBrokerConnected){
    m2m_wifi_handle_events(NULL);
   22084:	4d0f      	ldr	r5, [pc, #60]	; (220c4 <ConnectNetwork+0xac>)
  while(false==gbMQTTBrokerConnected){
   22086:	001c      	movs	r4, r3
    m2m_wifi_handle_events(NULL);
   22088:	2000      	movs	r0, #0
   2208a:	47a8      	blx	r5
  while(false==gbMQTTBrokerConnected){
   2208c:	7823      	ldrb	r3, [r4, #0]
   2208e:	2b00      	cmp	r3, #0
   22090:	d0fa      	beq.n	22088 <ConnectNetwork+0x70>
  
  /* Success */
  #ifdef MQTT_PLATFORM_DBG
  printf("INFO >> ConnectNetwork successful\r\n");
  #endif
  return SOCK_ERR_NO_ERROR;
   22092:	2000      	movs	r0, #0
   22094:	b007      	add	sp, #28
   22096:	bdf0      	pop	{r4, r5, r6, r7, pc}
	n->socket = socket(AF_INET, SOCK_STREAM, TLSFlag);
   22098:	466b      	mov	r3, sp
   2209a:	791a      	ldrb	r2, [r3, #4]
   2209c:	2101      	movs	r1, #1
   2209e:	2002      	movs	r0, #2
   220a0:	4b0d      	ldr	r3, [pc, #52]	; (220d8 <ConnectNetwork+0xc0>)
   220a2:	4798      	blx	r3
   220a4:	6030      	str	r0, [r6, #0]
   220a6:	e7e0      	b.n	2206a <ConnectNetwork+0x52>
   close(n->socket);
   220a8:	4b0c      	ldr	r3, [pc, #48]	; (220dc <ConnectNetwork+0xc4>)
   220aa:	4798      	blx	r3
   return SOCK_ERR_INVALID;
   220ac:	2009      	movs	r0, #9
   220ae:	4240      	negs	r0, r0
   220b0:	e7f0      	b.n	22094 <ConnectNetwork+0x7c>
   return SOCK_ERR_INVALID;
   220b2:	2009      	movs	r0, #9
   220b4:	4240      	negs	r0, r0
   220b6:	e7ed      	b.n	22094 <ConnectNetwork+0x7c>
   220b8:	20003d1f 	.word	0x20003d1f
   220bc:	20003e2c 	.word	0x20003e2c
   220c0:	0001d3cd 	.word	0x0001d3cd
   220c4:	0001b1b5 	.word	0x0001b1b5
   220c8:	20003e24 	.word	0x20003e24
   220cc:	00ffff00 	.word	0x00ffff00
   220d0:	0001d10d 	.word	0x0001d10d
   220d4:	20003d1e 	.word	0x20003d1e
   220d8:	0001cf8d 	.word	0x0001cf8d
   220dc:	0001d2c9 	.word	0x0001d2c9

000220e0 <mqtt_init>:
		}
	}
}

int mqtt_init(struct mqtt_module *module, struct mqtt_config *config)
{
   220e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   220e2:	b085      	sub	sp, #20
   220e4:	0006      	movs	r6, r0
   220e6:	000d      	movs	r5, r1
	unsigned int timeout_ms;
	
	if(NULL == module || NULL == config || NULL == config->send_buffer || NULL == config->read_buffer)
   220e8:	2800      	cmp	r0, #0
   220ea:	d03c      	beq.n	22166 <mqtt_init+0x86>
   220ec:	2900      	cmp	r1, #0
   220ee:	d03d      	beq.n	2216c <mqtt_init+0x8c>
   220f0:	690b      	ldr	r3, [r1, #16]
   220f2:	2b00      	cmp	r3, #0
   220f4:	d03d      	beq.n	22172 <mqtt_init+0x92>
   220f6:	688b      	ldr	r3, [r1, #8]
   220f8:	2b00      	cmp	r3, #0
   220fa:	d03d      	beq.n	22178 <mqtt_init+0x98>
		return FAILURE;
		
	timeout_ms = config->keep_alive * 1000;
   220fc:	888b      	ldrh	r3, [r1, #4]
   220fe:	27fa      	movs	r7, #250	; 0xfa
   22100:	00bf      	lsls	r7, r7, #2
   22102:	435f      	muls	r7, r3
	NetworkInit(&(module->network));
   22104:	0004      	movs	r4, r0
   22106:	3420      	adds	r4, #32
   22108:	0020      	movs	r0, r4
   2210a:	4b1e      	ldr	r3, [pc, #120]	; (22184 <mqtt_init+0xa4>)
   2210c:	4798      	blx	r3
	memcpy((void *)&(module->config), config, sizeof(struct mqtt_config));
   2210e:	1d30      	adds	r0, r6, #4
   22110:	2218      	movs	r2, #24
   22112:	0029      	movs	r1, r5
   22114:	4b1c      	ldr	r3, [pc, #112]	; (22188 <mqtt_init+0xa8>)
   22116:	4798      	blx	r3
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   22118:	4b1c      	ldr	r3, [pc, #112]	; (2218c <mqtt_init+0xac>)
   2211a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   2211c:	2b00      	cmp	r3, #0
   2211e:	d01a      	beq.n	22156 <mqtt_init+0x76>
   22120:	4b1a      	ldr	r3, [pc, #104]	; (2218c <mqtt_init+0xac>)
   22122:	33c4      	adds	r3, #196	; 0xc4
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   22124:	2201      	movs	r2, #1
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   22126:	6819      	ldr	r1, [r3, #0]
   22128:	2900      	cmp	r1, #0
   2212a:	d015      	beq.n	22158 <mqtt_init+0x78>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2212c:	3201      	adds	r2, #1
   2212e:	3364      	adds	r3, #100	; 0x64
   22130:	2a07      	cmp	r2, #7
   22132:	d1f8      	bne.n	22126 <mqtt_init+0x46>
	allocateClient(module);
	
	if(module->client)
   22134:	69f0      	ldr	r0, [r6, #28]
   22136:	2800      	cmp	r0, #0
   22138:	d021      	beq.n	2217e <mqtt_init+0x9e>
	{
		MQTTClientInit(module->client, &(module->network), timeout_ms, config->send_buffer, config->send_buffer_size, config->read_buffer, config->read_buffer_size);
   2213a:	692b      	ldr	r3, [r5, #16]
   2213c:	68ea      	ldr	r2, [r5, #12]
   2213e:	9202      	str	r2, [sp, #8]
   22140:	68aa      	ldr	r2, [r5, #8]
   22142:	9201      	str	r2, [sp, #4]
   22144:	696a      	ldr	r2, [r5, #20]
   22146:	9200      	str	r2, [sp, #0]
   22148:	003a      	movs	r2, r7
   2214a:	0021      	movs	r1, r4
   2214c:	4c10      	ldr	r4, [pc, #64]	; (22190 <mqtt_init+0xb0>)
   2214e:	47a0      	blx	r4
		return SUCCESS;
   22150:	2000      	movs	r0, #0
	}
	else
		return FAILURE;
}
   22152:	b005      	add	sp, #20
   22154:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   22156:	2200      	movs	r2, #0
			mqttClientPool[cIdx].mqtt_instance = module;
   22158:	2364      	movs	r3, #100	; 0x64
   2215a:	4353      	muls	r3, r2
   2215c:	4a0b      	ldr	r2, [pc, #44]	; (2218c <mqtt_init+0xac>)
   2215e:	18d2      	adds	r2, r2, r3
   22160:	6616      	str	r6, [r2, #96]	; 0x60
			module->client = &(mqttClientPool[cIdx].client);
   22162:	61f2      	str	r2, [r6, #28]
   22164:	e7e6      	b.n	22134 <mqtt_init+0x54>
		return FAILURE;
   22166:	2001      	movs	r0, #1
   22168:	4240      	negs	r0, r0
   2216a:	e7f2      	b.n	22152 <mqtt_init+0x72>
   2216c:	2001      	movs	r0, #1
   2216e:	4240      	negs	r0, r0
   22170:	e7ef      	b.n	22152 <mqtt_init+0x72>
   22172:	2001      	movs	r0, #1
   22174:	4240      	negs	r0, r0
   22176:	e7ec      	b.n	22152 <mqtt_init+0x72>
   22178:	2001      	movs	r0, #1
   2217a:	4240      	negs	r0, r0
   2217c:	e7e9      	b.n	22152 <mqtt_init+0x72>
		return FAILURE;
   2217e:	2001      	movs	r0, #1
   22180:	4240      	negs	r0, r0
   22182:	e7e6      	b.n	22152 <mqtt_init+0x72>
   22184:	00021ff9 	.word	0x00021ff9
   22188:	00025cd9 	.word	0x00025cd9
   2218c:	20003e38 	.word	0x20003e38
   22190:	000216a5 	.word	0x000216a5

00022194 <mqtt_get_config_defaults>:
		return FAILURE;
}

void mqtt_get_config_defaults(struct mqtt_config *const config)
{
	config->port = 1883;
   22194:	4b05      	ldr	r3, [pc, #20]	; (221ac <mqtt_get_config_defaults+0x18>)
   22196:	8003      	strh	r3, [r0, #0]
	config->tls = 0;
   22198:	2300      	movs	r3, #0
   2219a:	7083      	strb	r3, [r0, #2]
	config->keep_alive = 60;
   2219c:	223c      	movs	r2, #60	; 0x3c
   2219e:	8082      	strh	r2, [r0, #4]
	/* Below configuration must be initialized by Application */
	config->read_buffer = NULL;
   221a0:	6083      	str	r3, [r0, #8]
	config->send_buffer = NULL;
   221a2:	6103      	str	r3, [r0, #16]
	config->read_buffer_size = 0;
   221a4:	60c3      	str	r3, [r0, #12]
	config->send_buffer_size = 0;
   221a6:	6143      	str	r3, [r0, #20]
}
   221a8:	4770      	bx	lr
   221aa:	46c0      	nop			; (mov r8, r8)
   221ac:	0000075b 	.word	0x0000075b

000221b0 <mqtt_register_callback>:

int mqtt_register_callback(struct mqtt_module *module, mqtt_callback_t callback)
{
	if(module)
   221b0:	2800      	cmp	r0, #0
   221b2:	d002      	beq.n	221ba <mqtt_register_callback+0xa>
	{
		module->callback = callback;
   221b4:	6001      	str	r1, [r0, #0]
		return SUCCESS;
   221b6:	2000      	movs	r0, #0
	}
	else
		return FAILURE;
}
   221b8:	4770      	bx	lr
		return FAILURE;
   221ba:	2001      	movs	r0, #1
   221bc:	4240      	negs	r0, r0
   221be:	e7fb      	b.n	221b8 <mqtt_register_callback+0x8>

000221c0 <mqtt_socket_event_handler>:
	module->callback = NULL;
	return SUCCESS;
}

void mqtt_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   221c0:	b510      	push	{r4, lr}
	tcpClientSocketEventHandler(sock, msg_type, msg_data);
   221c2:	4b01      	ldr	r3, [pc, #4]	; (221c8 <mqtt_socket_event_handler+0x8>)
   221c4:	4798      	blx	r3
}
   221c6:	bd10      	pop	{r4, pc}
   221c8:	00021f35 	.word	0x00021f35

000221cc <mqtt_socket_resolve_handler>:

void mqtt_socket_resolve_handler(uint8_t *domain_name, uint32_t server_ip)
{
   221cc:	b510      	push	{r4, lr}
	dnsResolveCallback(domain_name, server_ip);
   221ce:	4b01      	ldr	r3, [pc, #4]	; (221d4 <mqtt_socket_resolve_handler+0x8>)
   221d0:	4798      	blx	r3
}
   221d2:	bd10      	pop	{r4, pc}
   221d4:	00021efd 	.word	0x00021efd

000221d8 <mqtt_connect>:

int mqtt_connect(struct mqtt_module *module, const char *host)
{
   221d8:	b530      	push	{r4, r5, lr}
   221da:	b083      	sub	sp, #12
   221dc:	0004      	movs	r4, r0
	union mqtt_data connResult;
	connResult.sock_connected.result = ConnectNetwork(&(module->network), (char *)host, module->config.port, module->config.tls);
   221de:	7983      	ldrb	r3, [r0, #6]
   221e0:	8882      	ldrh	r2, [r0, #4]
   221e2:	3020      	adds	r0, #32
   221e4:	4d06      	ldr	r5, [pc, #24]	; (22200 <mqtt_connect+0x28>)
   221e6:	47a8      	blx	r5
   221e8:	9001      	str	r0, [sp, #4]
	if(module->callback)
   221ea:	6823      	ldr	r3, [r4, #0]
   221ec:	2b00      	cmp	r3, #0
   221ee:	d003      	beq.n	221f8 <mqtt_connect+0x20>
		module->callback(module, MQTT_CALLBACK_SOCK_CONNECTED, &connResult);
   221f0:	aa01      	add	r2, sp, #4
   221f2:	2100      	movs	r1, #0
   221f4:	0020      	movs	r0, r4
   221f6:	4798      	blx	r3
	return connResult.sock_connected.result;
}
   221f8:	9801      	ldr	r0, [sp, #4]
   221fa:	b003      	add	sp, #12
   221fc:	bd30      	pop	{r4, r5, pc}
   221fe:	46c0      	nop			; (mov r8, r8)
   22200:	00022019 	.word	0x00022019

00022204 <mqtt_connect_broker>:

int mqtt_connect_broker(struct mqtt_module *const module, uint8_t clean_session, const char *id, const char *password, const char *client_id, const char *will_topic, const char *will_msg, uint32_t will_msg_len, uint8_t will_qos, uint8_t will_retain)
{
   22204:	b5f0      	push	{r4, r5, r6, r7, lr}
   22206:	46de      	mov	lr, fp
   22208:	4657      	mov	r7, sl
   2220a:	464e      	mov	r6, r9
   2220c:	b5c0      	push	{r6, r7, lr}
   2220e:	b098      	sub	sp, #96	; 0x60
   22210:	0005      	movs	r5, r0
   22212:	4689      	mov	r9, r1
   22214:	4693      	mov	fp, r2
   22216:	469a      	mov	sl, r3
   22218:	ab24      	add	r3, sp, #144	; 0x90
   2221a:	781f      	ldrb	r7, [r3, #0]
   2221c:	ab25      	add	r3, sp, #148	; 0x94
   2221e:	781e      	ldrb	r6, [r3, #0]
	// Will Message length is not used by Paho MQTT. 
	int rc;
	union mqtt_data connBrokerResult;
	MQTTPacket_connectData connectData = MQTTPacket_connectData_initializer;
   22220:	ac01      	add	r4, sp, #4
   22222:	2258      	movs	r2, #88	; 0x58
   22224:	491a      	ldr	r1, [pc, #104]	; (22290 <mqtt_connect_broker+0x8c>)
   22226:	0020      	movs	r0, r4
   22228:	4b1a      	ldr	r3, [pc, #104]	; (22294 <mqtt_connect_broker+0x90>)
   2222a:	4798      	blx	r3
		
	connectData.MQTTVersion = 4; //use protocol version 3.1.1
	connectData.clientID.cstring = (char *)client_id;
   2222c:	9b20      	ldr	r3, [sp, #128]	; 0x80
   2222e:	60e3      	str	r3, [r4, #12]
	connectData.username.cstring = (char *)id;
   22230:	465b      	mov	r3, fp
   22232:	6423      	str	r3, [r4, #64]	; 0x40
	connectData.password.cstring = (char *)password;
   22234:	4653      	mov	r3, sl
   22236:	64e3      	str	r3, [r4, #76]	; 0x4c
	connectData.cleansession = clean_session;
   22238:	464b      	mov	r3, r9
   2223a:	76a3      	strb	r3, [r4, #26]
	connectData.will.topicName.cstring = (char *)will_topic;
   2223c:	9b21      	ldr	r3, [sp, #132]	; 0x84
   2223e:	6263      	str	r3, [r4, #36]	; 0x24
	connectData.will.message.cstring = (char *)will_msg;
   22240:	9b22      	ldr	r3, [sp, #136]	; 0x88
   22242:	6323      	str	r3, [r4, #48]	; 0x30
	connectData.will.retained = will_retain;
   22244:	233c      	movs	r3, #60	; 0x3c
   22246:	54e6      	strb	r6, [r4, r3]
	connectData.will.qos = will_qos;
   22248:	3301      	adds	r3, #1
   2224a:	54e7      	strb	r7, [r4, r3]
	
	if(will_topic && will_msg)
   2224c:	9b21      	ldr	r3, [sp, #132]	; 0x84
   2224e:	2b00      	cmp	r3, #0
   22250:	d005      	beq.n	2225e <mqtt_connect_broker+0x5a>
   22252:	9b22      	ldr	r3, [sp, #136]	; 0x88
   22254:	2b00      	cmp	r3, #0
   22256:	d002      	beq.n	2225e <mqtt_connect_broker+0x5a>
		connectData.willFlag = 1;
   22258:	2201      	movs	r2, #1
   2225a:	ab01      	add	r3, sp, #4
   2225c:	76da      	strb	r2, [r3, #27]
		
	rc = MQTTConnect(module->client, &connectData);
   2225e:	a901      	add	r1, sp, #4
   22260:	69e8      	ldr	r0, [r5, #28]
   22262:	4b0d      	ldr	r3, [pc, #52]	; (22298 <mqtt_connect_broker+0x94>)
   22264:	4798      	blx	r3
   22266:	0004      	movs	r4, r0
	
	connBrokerResult.connected.result = rc;
   22268:	ab17      	add	r3, sp, #92	; 0x5c
   2226a:	7018      	strb	r0, [r3, #0]
	if(module->callback)
   2226c:	682b      	ldr	r3, [r5, #0]
   2226e:	2b00      	cmp	r3, #0
   22270:	d003      	beq.n	2227a <mqtt_connect_broker+0x76>
		module->callback(module, MQTT_CALLBACK_CONNECTED, &connBrokerResult);
   22272:	aa17      	add	r2, sp, #92	; 0x5c
   22274:	2101      	movs	r1, #1
   22276:	0028      	movs	r0, r5
   22278:	4798      	blx	r3
	
	module->isConnected = true;
   2227a:	2201      	movs	r2, #1
   2227c:	2334      	movs	r3, #52	; 0x34
   2227e:	54ea      	strb	r2, [r5, r3]
	return rc;
}
   22280:	0020      	movs	r0, r4
   22282:	b018      	add	sp, #96	; 0x60
   22284:	bc1c      	pop	{r2, r3, r4}
   22286:	4691      	mov	r9, r2
   22288:	469a      	mov	sl, r3
   2228a:	46a3      	mov	fp, r4
   2228c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2228e:	46c0      	nop			; (mov r8, r8)
   22290:	0002b594 	.word	0x0002b594
   22294:	00025cd9 	.word	0x00025cd9
   22298:	00021aad 	.word	0x00021aad

0002229c <mqtt_disconnect>:

int mqtt_disconnect(struct mqtt_module *const module, int force_close)
{
   2229c:	b530      	push	{r4, r5, lr}
   2229e:	b083      	sub	sp, #12
   222a0:	0004      	movs	r4, r0
	//force_close is not used by Paho MQTT
	int rc;
	union mqtt_data disconnectResult;
	
	rc = MQTTDisconnect(module->client);
   222a2:	69c0      	ldr	r0, [r0, #28]
   222a4:	4b08      	ldr	r3, [pc, #32]	; (222c8 <mqtt_disconnect+0x2c>)
   222a6:	4798      	blx	r3
   222a8:	0005      	movs	r5, r0
	
	disconnectResult.disconnected.reason = rc;
   222aa:	9001      	str	r0, [sp, #4]
	
	if(module->callback)
   222ac:	6823      	ldr	r3, [r4, #0]
   222ae:	2b00      	cmp	r3, #0
   222b0:	d003      	beq.n	222ba <mqtt_disconnect+0x1e>
		module->callback(module, MQTT_CALLBACK_DISCONNECTED, &disconnectResult);
   222b2:	aa01      	add	r2, sp, #4
   222b4:	2105      	movs	r1, #5
   222b6:	0020      	movs	r0, r4
   222b8:	4798      	blx	r3
	
	module->isConnected = false;
   222ba:	2200      	movs	r2, #0
   222bc:	2334      	movs	r3, #52	; 0x34
   222be:	54e2      	strb	r2, [r4, r3]
	return rc;
}
   222c0:	0028      	movs	r0, r5
   222c2:	b003      	add	sp, #12
   222c4:	bd30      	pop	{r4, r5, pc}
   222c6:	46c0      	nop			; (mov r8, r8)
   222c8:	00021d91 	.word	0x00021d91

000222cc <mqtt_publish>:

int mqtt_publish(struct mqtt_module *const module, const char *topic, const char *msg, uint32_t msg_len, uint8_t qos, uint8_t retain)
{
   222cc:	b570      	push	{r4, r5, r6, lr}
   222ce:	b084      	sub	sp, #16
   222d0:	0004      	movs	r4, r0
   222d2:	a808      	add	r0, sp, #32
   222d4:	7805      	ldrb	r5, [r0, #0]
   222d6:	a809      	add	r0, sp, #36	; 0x24
   222d8:	7800      	ldrb	r0, [r0, #0]
	int rc;
	MQTTMessage mqttMsg;	
	
	mqttMsg.qos = qos;
   222da:	466e      	mov	r6, sp
   222dc:	7035      	strb	r5, [r6, #0]
	mqttMsg.payload = (char *)msg;
   222de:	9202      	str	r2, [sp, #8]
	mqttMsg.payloadlen = (size_t)msg_len;
   222e0:	9303      	str	r3, [sp, #12]
	mqttMsg.retained = retain;
   222e2:	7070      	strb	r0, [r6, #1]
	
	rc = MQTTPublish(module->client, topic, &mqttMsg);
   222e4:	466a      	mov	r2, sp
   222e6:	69e0      	ldr	r0, [r4, #28]
   222e8:	4b06      	ldr	r3, [pc, #24]	; (22304 <mqtt_publish+0x38>)
   222ea:	4798      	blx	r3
   222ec:	0005      	movs	r5, r0
	
	if(module->callback)
   222ee:	6823      	ldr	r3, [r4, #0]
   222f0:	2b00      	cmp	r3, #0
   222f2:	d003      	beq.n	222fc <mqtt_publish+0x30>
		module->callback(module, MQTT_CALLBACK_PUBLISHED, NULL);
   222f4:	2200      	movs	r2, #0
   222f6:	2102      	movs	r1, #2
   222f8:	0020      	movs	r0, r4
   222fa:	4798      	blx	r3
	
	return rc;
}
   222fc:	0028      	movs	r0, r5
   222fe:	b004      	add	sp, #16
   22300:	bd70      	pop	{r4, r5, r6, pc}
   22302:	46c0      	nop			; (mov r8, r8)
   22304:	00021c81 	.word	0x00021c81

00022308 <mqtt_subscribe>:

int mqtt_subscribe(struct mqtt_module *module, const char *topic, uint8_t qos, messageHandler msgHandler)
{
   22308:	b570      	push	{r4, r5, r6, lr}
   2230a:	0004      	movs	r4, r0
	int rc;
	
	rc = MQTTSubscribe(module->client, topic, qos, msgHandler);
   2230c:	69c0      	ldr	r0, [r0, #28]
   2230e:	4d06      	ldr	r5, [pc, #24]	; (22328 <mqtt_subscribe+0x20>)
   22310:	47a8      	blx	r5
   22312:	0005      	movs	r5, r0
	
	if(module->callback)
   22314:	6823      	ldr	r3, [r4, #0]
   22316:	2b00      	cmp	r3, #0
   22318:	d003      	beq.n	22322 <mqtt_subscribe+0x1a>
		module->callback(module, MQTT_CALLBACK_SUBSCRIBED, NULL);	
   2231a:	2200      	movs	r2, #0
   2231c:	2103      	movs	r1, #3
   2231e:	0020      	movs	r0, r4
   22320:	4798      	blx	r3
	
	return rc;
}
   22322:	0028      	movs	r0, r5
   22324:	bd70      	pop	{r4, r5, r6, pc}
   22326:	46c0      	nop			; (mov r8, r8)
   22328:	00021b7d 	.word	0x00021b7d

0002232c <mqtt_yield>:
	
	return rc;
}

int mqtt_yield(struct mqtt_module *module, int timeout_ms)
{
   2232c:	b510      	push	{r4, lr}
	return MQTTYield(module->client, timeout_ms);
   2232e:	69c0      	ldr	r0, [r0, #28]
   22330:	4b01      	ldr	r3, [pc, #4]	; (22338 <mqtt_yield+0xc>)
   22332:	4798      	blx	r3
   22334:	bd10      	pop	{r4, pc}
   22336:	46c0      	nop			; (mov r8, r8)
   22338:	00021a31 	.word	0x00021a31

0002233c <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
   2233c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2233e:	0004      	movs	r4, r0
	int len = 0;

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
   22340:	7a03      	ldrb	r3, [r0, #8]
   22342:	2b03      	cmp	r3, #3
   22344:	d024      	beq.n	22390 <MQTTSerialize_connectLength+0x54>
	int len = 0;
   22346:	2600      	movs	r6, #0
		len = 12; /* variable depending on MQTT or MQIsdp */
	else if (options->MQTTVersion == 4)
   22348:	2b04      	cmp	r3, #4
   2234a:	d01f      	beq.n	2238c <MQTTSerialize_connectLength+0x50>
		len = 10;

	len += MQTTstrlen(options->clientID)+2;
   2234c:	68e0      	ldr	r0, [r4, #12]
   2234e:	6921      	ldr	r1, [r4, #16]
   22350:	6962      	ldr	r2, [r4, #20]
   22352:	4b1b      	ldr	r3, [pc, #108]	; (223c0 <MQTTSerialize_connectLength+0x84>)
   22354:	4798      	blx	r3
   22356:	1c85      	adds	r5, r0, #2
   22358:	19ad      	adds	r5, r5, r6
	if (options->willFlag)
   2235a:	7ee3      	ldrb	r3, [r4, #27]
   2235c:	2b00      	cmp	r3, #0
   2235e:	d119      	bne.n	22394 <MQTTSerialize_connectLength+0x58>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
	if (options->username.cstring || options->username.lenstring.data)
   22360:	6c23      	ldr	r3, [r4, #64]	; 0x40
   22362:	2b00      	cmp	r3, #0
   22364:	d024      	beq.n	223b0 <MQTTSerialize_connectLength+0x74>
		len += MQTTstrlen(options->username)+2;
   22366:	6c20      	ldr	r0, [r4, #64]	; 0x40
   22368:	6c61      	ldr	r1, [r4, #68]	; 0x44
   2236a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2236c:	4b14      	ldr	r3, [pc, #80]	; (223c0 <MQTTSerialize_connectLength+0x84>)
   2236e:	4798      	blx	r3
   22370:	3002      	adds	r0, #2
   22372:	182d      	adds	r5, r5, r0
	if (options->password.cstring || options->password.lenstring.data)
   22374:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   22376:	2b00      	cmp	r3, #0
   22378:	d01e      	beq.n	223b8 <MQTTSerialize_connectLength+0x7c>
		len += MQTTstrlen(options->password)+2;
   2237a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   2237c:	6d21      	ldr	r1, [r4, #80]	; 0x50
   2237e:	6d62      	ldr	r2, [r4, #84]	; 0x54
   22380:	4b0f      	ldr	r3, [pc, #60]	; (223c0 <MQTTSerialize_connectLength+0x84>)
   22382:	4798      	blx	r3
   22384:	3002      	adds	r0, #2
   22386:	182d      	adds	r5, r5, r0

	FUNC_EXIT_RC(len);
	return len;
}
   22388:	0028      	movs	r0, r5
   2238a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		len = 10;
   2238c:	360a      	adds	r6, #10
   2238e:	e7dd      	b.n	2234c <MQTTSerialize_connectLength+0x10>
		len = 12; /* variable depending on MQTT or MQIsdp */
   22390:	260c      	movs	r6, #12
   22392:	e7db      	b.n	2234c <MQTTSerialize_connectLength+0x10>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
   22394:	6a60      	ldr	r0, [r4, #36]	; 0x24
   22396:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   22398:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   2239a:	4f09      	ldr	r7, [pc, #36]	; (223c0 <MQTTSerialize_connectLength+0x84>)
   2239c:	47b8      	blx	r7
   2239e:	0006      	movs	r6, r0
   223a0:	6b20      	ldr	r0, [r4, #48]	; 0x30
   223a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
   223a4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   223a6:	47b8      	blx	r7
   223a8:	1836      	adds	r6, r6, r0
   223aa:	3604      	adds	r6, #4
   223ac:	19ad      	adds	r5, r5, r6
   223ae:	e7d7      	b.n	22360 <MQTTSerialize_connectLength+0x24>
	if (options->username.cstring || options->username.lenstring.data)
   223b0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   223b2:	2b00      	cmp	r3, #0
   223b4:	d1d7      	bne.n	22366 <MQTTSerialize_connectLength+0x2a>
   223b6:	e7dd      	b.n	22374 <MQTTSerialize_connectLength+0x38>
	if (options->password.cstring || options->password.lenstring.data)
   223b8:	6d63      	ldr	r3, [r4, #84]	; 0x54
   223ba:	2b00      	cmp	r3, #0
   223bc:	d1dd      	bne.n	2237a <MQTTSerialize_connectLength+0x3e>
   223be:	e7e3      	b.n	22388 <MQTTSerialize_connectLength+0x4c>
   223c0:	000228a5 	.word	0x000228a5

000223c4 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
   223c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   223c6:	b083      	sub	sp, #12
   223c8:	0006      	movs	r6, r0
   223ca:	000f      	movs	r7, r1
   223cc:	0015      	movs	r5, r2
	unsigned char *ptr = buf;
   223ce:	9001      	str	r0, [sp, #4]
	MQTTConnectFlags flags = {0};
	int len = 0;
	int rc = -1;

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
   223d0:	0010      	movs	r0, r2
   223d2:	4b45      	ldr	r3, [pc, #276]	; (224e8 <MQTTSerialize_connect+0x124>)
   223d4:	4798      	blx	r3
   223d6:	0004      	movs	r4, r0
   223d8:	4b44      	ldr	r3, [pc, #272]	; (224ec <MQTTSerialize_connect+0x128>)
   223da:	4798      	blx	r3
   223dc:	42b8      	cmp	r0, r7
   223de:	dd00      	ble.n	223e2 <MQTTSerialize_connect+0x1e>
   223e0:	e07f      	b.n	224e2 <MQTTSerialize_connect+0x11e>
		goto exit;
	}

	header.byte = 0;
	header.bits.type = CONNECT;
	writeChar(&ptr, header.byte); /* write header */
   223e2:	2110      	movs	r1, #16
   223e4:	a801      	add	r0, sp, #4
   223e6:	4b42      	ldr	r3, [pc, #264]	; (224f0 <MQTTSerialize_connect+0x12c>)
   223e8:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
   223ea:	0021      	movs	r1, r4
   223ec:	9801      	ldr	r0, [sp, #4]
   223ee:	4b41      	ldr	r3, [pc, #260]	; (224f4 <MQTTSerialize_connect+0x130>)
   223f0:	4798      	blx	r3
   223f2:	9b01      	ldr	r3, [sp, #4]
   223f4:	469c      	mov	ip, r3
   223f6:	4460      	add	r0, ip
   223f8:	9001      	str	r0, [sp, #4]

	if (options->MQTTVersion == 4)
   223fa:	7a2b      	ldrb	r3, [r5, #8]
   223fc:	2b04      	cmp	r3, #4
   223fe:	d045      	beq.n	2248c <MQTTSerialize_connect+0xc8>
		writeCString(&ptr, "MQTT");
		writeChar(&ptr, (char) 4);
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
   22400:	493d      	ldr	r1, [pc, #244]	; (224f8 <MQTTSerialize_connect+0x134>)
   22402:	a801      	add	r0, sp, #4
   22404:	4b3d      	ldr	r3, [pc, #244]	; (224fc <MQTTSerialize_connect+0x138>)
   22406:	4798      	blx	r3
		writeChar(&ptr, (char) 3);
   22408:	2103      	movs	r1, #3
   2240a:	a801      	add	r0, sp, #4
   2240c:	4b38      	ldr	r3, [pc, #224]	; (224f0 <MQTTSerialize_connect+0x12c>)
   2240e:	4798      	blx	r3
	}

	flags.all = 0;
	flags.bits.cleansession = options->cleansession;
   22410:	7ea9      	ldrb	r1, [r5, #26]
   22412:	2301      	movs	r3, #1
   22414:	4019      	ands	r1, r3
	flags.bits.will = (options->willFlag) ? 1 : 0;
   22416:	7eea      	ldrb	r2, [r5, #27]
   22418:	1e50      	subs	r0, r2, #1
   2241a:	4182      	sbcs	r2, r0
   2241c:	b2d2      	uxtb	r2, r2
   2241e:	4013      	ands	r3, r2
   22420:	009b      	lsls	r3, r3, #2
   22422:	0049      	lsls	r1, r1, #1
	if (flags.bits.will)
   22424:	4319      	orrs	r1, r3
   22426:	2b00      	cmp	r3, #0
   22428:	d00b      	beq.n	22442 <MQTTSerialize_connect+0x7e>
	{
		flags.bits.willQoS = options->will.qos;
   2242a:	233d      	movs	r3, #61	; 0x3d
   2242c:	5cea      	ldrb	r2, [r5, r3]
   2242e:	3b3a      	subs	r3, #58	; 0x3a
   22430:	4013      	ands	r3, r2
   22432:	00db      	lsls	r3, r3, #3
		flags.bits.willRetain = options->will.retained;
   22434:	223c      	movs	r2, #60	; 0x3c
   22436:	5ca8      	ldrb	r0, [r5, r2]
   22438:	3a3b      	subs	r2, #59	; 0x3b
   2243a:	4002      	ands	r2, r0
   2243c:	0152      	lsls	r2, r2, #5
   2243e:	4319      	orrs	r1, r3
   22440:	4311      	orrs	r1, r2
	}

	if (options->username.cstring || options->username.lenstring.data)
   22442:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   22444:	2b00      	cmp	r3, #0
   22446:	d02a      	beq.n	2249e <MQTTSerialize_connect+0xda>
		flags.bits.username = 1;
   22448:	2380      	movs	r3, #128	; 0x80
   2244a:	4319      	orrs	r1, r3
	if (options->password.cstring || options->password.lenstring.data)
   2244c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
   2244e:	2b00      	cmp	r3, #0
   22450:	d029      	beq.n	224a6 <MQTTSerialize_connect+0xe2>
		flags.bits.password = 1;
   22452:	2340      	movs	r3, #64	; 0x40
   22454:	4319      	orrs	r1, r3

	writeChar(&ptr, flags.all);
   22456:	b2cc      	uxtb	r4, r1
   22458:	0021      	movs	r1, r4
   2245a:	a801      	add	r0, sp, #4
   2245c:	4b24      	ldr	r3, [pc, #144]	; (224f0 <MQTTSerialize_connect+0x12c>)
   2245e:	4798      	blx	r3
	writeInt(&ptr, options->keepAliveInterval);
   22460:	8b29      	ldrh	r1, [r5, #24]
   22462:	a801      	add	r0, sp, #4
   22464:	4b26      	ldr	r3, [pc, #152]	; (22500 <MQTTSerialize_connect+0x13c>)
   22466:	4798      	blx	r3
	writeMQTTString(&ptr, options->clientID);
   22468:	68e9      	ldr	r1, [r5, #12]
   2246a:	692a      	ldr	r2, [r5, #16]
   2246c:	696b      	ldr	r3, [r5, #20]
   2246e:	a801      	add	r0, sp, #4
   22470:	4f24      	ldr	r7, [pc, #144]	; (22504 <MQTTSerialize_connect+0x140>)
   22472:	47b8      	blx	r7
	if (options->willFlag)
   22474:	7eeb      	ldrb	r3, [r5, #27]
   22476:	2b00      	cmp	r3, #0
   22478:	d119      	bne.n	224ae <MQTTSerialize_connect+0xea>
	{
		writeMQTTString(&ptr, options->will.topicName);
		writeMQTTString(&ptr, options->will.message);
	}
	if (flags.bits.username)
   2247a:	b263      	sxtb	r3, r4
   2247c:	2b00      	cmp	r3, #0
   2247e:	db22      	blt.n	224c6 <MQTTSerialize_connect+0x102>
		writeMQTTString(&ptr, options->username);
	if (flags.bits.password)
   22480:	0663      	lsls	r3, r4, #25
   22482:	d427      	bmi.n	224d4 <MQTTSerialize_connect+0x110>
		writeMQTTString(&ptr, options->password);

	rc = ptr - buf;
   22484:	9b01      	ldr	r3, [sp, #4]
   22486:	1b98      	subs	r0, r3, r6

	exit: FUNC_EXIT_RC(rc);
	return rc;
}
   22488:	b003      	add	sp, #12
   2248a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		writeCString(&ptr, "MQTT");
   2248c:	491e      	ldr	r1, [pc, #120]	; (22508 <MQTTSerialize_connect+0x144>)
   2248e:	a801      	add	r0, sp, #4
   22490:	4b1a      	ldr	r3, [pc, #104]	; (224fc <MQTTSerialize_connect+0x138>)
   22492:	4798      	blx	r3
		writeChar(&ptr, (char) 4);
   22494:	2104      	movs	r1, #4
   22496:	a801      	add	r0, sp, #4
   22498:	4b15      	ldr	r3, [pc, #84]	; (224f0 <MQTTSerialize_connect+0x12c>)
   2249a:	4798      	blx	r3
   2249c:	e7b8      	b.n	22410 <MQTTSerialize_connect+0x4c>
	if (options->username.cstring || options->username.lenstring.data)
   2249e:	6cab      	ldr	r3, [r5, #72]	; 0x48
   224a0:	2b00      	cmp	r3, #0
   224a2:	d1d1      	bne.n	22448 <MQTTSerialize_connect+0x84>
   224a4:	e7d2      	b.n	2244c <MQTTSerialize_connect+0x88>
	if (options->password.cstring || options->password.lenstring.data)
   224a6:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   224a8:	2b00      	cmp	r3, #0
   224aa:	d1d2      	bne.n	22452 <MQTTSerialize_connect+0x8e>
   224ac:	e7d3      	b.n	22456 <MQTTSerialize_connect+0x92>
		writeMQTTString(&ptr, options->will.topicName);
   224ae:	6a69      	ldr	r1, [r5, #36]	; 0x24
   224b0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   224b2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   224b4:	a801      	add	r0, sp, #4
   224b6:	4f13      	ldr	r7, [pc, #76]	; (22504 <MQTTSerialize_connect+0x140>)
   224b8:	47b8      	blx	r7
		writeMQTTString(&ptr, options->will.message);
   224ba:	6b29      	ldr	r1, [r5, #48]	; 0x30
   224bc:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   224be:	6bab      	ldr	r3, [r5, #56]	; 0x38
   224c0:	a801      	add	r0, sp, #4
   224c2:	47b8      	blx	r7
   224c4:	e7d9      	b.n	2247a <MQTTSerialize_connect+0xb6>
		writeMQTTString(&ptr, options->username);
   224c6:	6c29      	ldr	r1, [r5, #64]	; 0x40
   224c8:	6c6a      	ldr	r2, [r5, #68]	; 0x44
   224ca:	6cab      	ldr	r3, [r5, #72]	; 0x48
   224cc:	a801      	add	r0, sp, #4
   224ce:	4f0d      	ldr	r7, [pc, #52]	; (22504 <MQTTSerialize_connect+0x140>)
   224d0:	47b8      	blx	r7
   224d2:	e7d5      	b.n	22480 <MQTTSerialize_connect+0xbc>
		writeMQTTString(&ptr, options->password);
   224d4:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
   224d6:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   224d8:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   224da:	a801      	add	r0, sp, #4
   224dc:	4c09      	ldr	r4, [pc, #36]	; (22504 <MQTTSerialize_connect+0x140>)
   224de:	47a0      	blx	r4
   224e0:	e7d0      	b.n	22484 <MQTTSerialize_connect+0xc0>
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   224e2:	2002      	movs	r0, #2
   224e4:	4240      	negs	r0, r0
	return rc;
   224e6:	e7cf      	b.n	22488 <MQTTSerialize_connect+0xc4>
   224e8:	0002233d 	.word	0x0002233d
   224ec:	00022749 	.word	0x00022749
   224f0:	000227ab 	.word	0x000227ab
   224f4:	000226c1 	.word	0x000226c1
   224f8:	0002b5f4 	.word	0x0002b5f4
   224fc:	000227e1 	.word	0x000227e1
   22500:	000227b7 	.word	0x000227b7
   22504:	00022819 	.word	0x00022819
   22508:	0002b5ec 	.word	0x0002b5ec

0002250c <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
   2250c:	b570      	push	{r4, r5, r6, lr}
   2250e:	b082      	sub	sp, #8
   22510:	0005      	movs	r5, r0
   22512:	000c      	movs	r4, r1
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
   22514:	9201      	str	r2, [sp, #4]
	int rc = 0;
	int mylen;
	MQTTConnackFlags flags = {0};

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   22516:	a801      	add	r0, sp, #4
   22518:	4b0e      	ldr	r3, [pc, #56]	; (22554 <MQTTDeserialize_connack+0x48>)
   2251a:	4798      	blx	r3
	if (header.bits.type != CONNACK)
   2251c:	23f0      	movs	r3, #240	; 0xf0
   2251e:	4003      	ands	r3, r0
	int rc = 0;
   22520:	2000      	movs	r0, #0
	if (header.bits.type != CONNACK)
   22522:	2b20      	cmp	r3, #32
   22524:	d001      	beq.n	2252a <MQTTDeserialize_connack+0x1e>

	rc = 1;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   22526:	b002      	add	sp, #8
   22528:	bd70      	pop	{r4, r5, r6, pc}
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   2252a:	4669      	mov	r1, sp
   2252c:	9801      	ldr	r0, [sp, #4]
   2252e:	4b0a      	ldr	r3, [pc, #40]	; (22558 <MQTTDeserialize_connack+0x4c>)
   22530:	4798      	blx	r3
   22532:	9b01      	ldr	r3, [sp, #4]
   22534:	181b      	adds	r3, r3, r0
   22536:	9301      	str	r3, [sp, #4]
	if (enddata - curdata < 2)
   22538:	9b00      	ldr	r3, [sp, #0]
   2253a:	2b01      	cmp	r3, #1
   2253c:	ddf3      	ble.n	22526 <MQTTDeserialize_connack+0x1a>
	flags.all = readChar(&curdata);
   2253e:	a801      	add	r0, sp, #4
   22540:	4e04      	ldr	r6, [pc, #16]	; (22554 <MQTTDeserialize_connack+0x48>)
   22542:	47b0      	blx	r6
	*sessionPresent = flags.bits.sessionpresent;
   22544:	0600      	lsls	r0, r0, #24
   22546:	0fc0      	lsrs	r0, r0, #31
   22548:	7028      	strb	r0, [r5, #0]
	*connack_rc = readChar(&curdata);
   2254a:	a801      	add	r0, sp, #4
   2254c:	47b0      	blx	r6
   2254e:	7020      	strb	r0, [r4, #0]
	rc = 1;
   22550:	2001      	movs	r0, #1
   22552:	e7e8      	b.n	22526 <MQTTDeserialize_connack+0x1a>
   22554:	0002279f 	.word	0x0002279f
   22558:	00022771 	.word	0x00022771

0002255c <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
   2255c:	b510      	push	{r4, lr}
   2255e:	b082      	sub	sp, #8
   22560:	0004      	movs	r4, r0
	MQTTHeader header = {0};
	int rc = -1;
	unsigned char *ptr = buf;
   22562:	9001      	str	r0, [sp, #4]

	FUNC_ENTRY;
	if (buflen < 2)
   22564:	2901      	cmp	r1, #1
   22566:	dd0f      	ble.n	22588 <MQTTSerialize_zero+0x2c>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}
	header.byte = 0;
	header.bits.type = packettype;
   22568:	210f      	movs	r1, #15
   2256a:	4011      	ands	r1, r2
	writeChar(&ptr, header.byte); /* write header */
   2256c:	0109      	lsls	r1, r1, #4
   2256e:	a801      	add	r0, sp, #4
   22570:	4b07      	ldr	r3, [pc, #28]	; (22590 <MQTTSerialize_zero+0x34>)
   22572:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
   22574:	2100      	movs	r1, #0
   22576:	9801      	ldr	r0, [sp, #4]
   22578:	4b06      	ldr	r3, [pc, #24]	; (22594 <MQTTSerialize_zero+0x38>)
   2257a:	4798      	blx	r3
   2257c:	9b01      	ldr	r3, [sp, #4]
   2257e:	469c      	mov	ip, r3
   22580:	4460      	add	r0, ip
	rc = ptr - buf;
   22582:	1b00      	subs	r0, r0, r4
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   22584:	b002      	add	sp, #8
   22586:	bd10      	pop	{r4, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   22588:	2002      	movs	r0, #2
   2258a:	4240      	negs	r0, r0
	return rc;
   2258c:	e7fa      	b.n	22584 <MQTTSerialize_zero+0x28>
   2258e:	46c0      	nop			; (mov r8, r8)
   22590:	000227ab 	.word	0x000227ab
   22594:	000226c1 	.word	0x000226c1

00022598 <MQTTSerialize_disconnect>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
   22598:	b510      	push	{r4, lr}
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
   2259a:	220e      	movs	r2, #14
   2259c:	4b01      	ldr	r3, [pc, #4]	; (225a4 <MQTTSerialize_disconnect+0xc>)
   2259e:	4798      	blx	r3
}
   225a0:	bd10      	pop	{r4, pc}
   225a2:	46c0      	nop			; (mov r8, r8)
   225a4:	0002255d 	.word	0x0002255d

000225a8 <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
   225a8:	b510      	push	{r4, lr}
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
   225aa:	220c      	movs	r2, #12
   225ac:	4b01      	ldr	r3, [pc, #4]	; (225b4 <MQTTSerialize_pingreq+0xc>)
   225ae:	4798      	blx	r3
}
   225b0:	bd10      	pop	{r4, pc}
   225b2:	46c0      	nop			; (mov r8, r8)
   225b4:	0002255d 	.word	0x0002255d

000225b8 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
   225b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   225ba:	b085      	sub	sp, #20
   225bc:	0005      	movs	r5, r0
   225be:	000e      	movs	r6, r1
   225c0:	0014      	movs	r4, r2
   225c2:	9301      	str	r3, [sp, #4]
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
   225c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   225c6:	9303      	str	r3, [sp, #12]
	unsigned char* enddata = NULL;
	int rc = 0;
	int mylen = 0;
   225c8:	2300      	movs	r3, #0
   225ca:	9302      	str	r3, [sp, #8]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   225cc:	a803      	add	r0, sp, #12
   225ce:	4b1c      	ldr	r3, [pc, #112]	; (22640 <MQTTDeserialize_publish+0x88>)
   225d0:	4798      	blx	r3
   225d2:	0003      	movs	r3, r0
	if (header.bits.type != PUBLISH)
   225d4:	22f0      	movs	r2, #240	; 0xf0
   225d6:	4010      	ands	r0, r2
	int rc = 0;
   225d8:	2700      	movs	r7, #0
	if (header.bits.type != PUBLISH)
   225da:	2830      	cmp	r0, #48	; 0x30
   225dc:	d002      	beq.n	225e4 <MQTTDeserialize_publish+0x2c>
	*payload = curdata;
	rc = 1;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   225de:	0038      	movs	r0, r7
   225e0:	b005      	add	sp, #20
   225e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*dup = header.bits.dup;
   225e4:	071a      	lsls	r2, r3, #28
   225e6:	0fd2      	lsrs	r2, r2, #31
   225e8:	702a      	strb	r2, [r5, #0]
	*qos = header.bits.qos;
   225ea:	075a      	lsls	r2, r3, #29
   225ec:	0f92      	lsrs	r2, r2, #30
   225ee:	6032      	str	r2, [r6, #0]
	*retained = header.bits.retain;
   225f0:	07db      	lsls	r3, r3, #31
   225f2:	0fdb      	lsrs	r3, r3, #31
   225f4:	7023      	strb	r3, [r4, #0]
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   225f6:	a902      	add	r1, sp, #8
   225f8:	9803      	ldr	r0, [sp, #12]
   225fa:	4b12      	ldr	r3, [pc, #72]	; (22644 <MQTTDeserialize_publish+0x8c>)
   225fc:	4798      	blx	r3
   225fe:	0007      	movs	r7, r0
   22600:	9b03      	ldr	r3, [sp, #12]
   22602:	181c      	adds	r4, r3, r0
   22604:	9403      	str	r4, [sp, #12]
	enddata = curdata + mylen;
   22606:	9b02      	ldr	r3, [sp, #8]
   22608:	469c      	mov	ip, r3
   2260a:	4464      	add	r4, ip
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   2260c:	0022      	movs	r2, r4
   2260e:	a903      	add	r1, sp, #12
   22610:	980a      	ldr	r0, [sp, #40]	; 0x28
   22612:	4b0d      	ldr	r3, [pc, #52]	; (22648 <MQTTDeserialize_publish+0x90>)
   22614:	4798      	blx	r3
   22616:	2800      	cmp	r0, #0
   22618:	d0e1      	beq.n	225de <MQTTDeserialize_publish+0x26>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
   2261a:	9b03      	ldr	r3, [sp, #12]
   2261c:	1ae3      	subs	r3, r4, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   2261e:	d4de      	bmi.n	225de <MQTTDeserialize_publish+0x26>
	if (*qos > 0)
   22620:	6833      	ldr	r3, [r6, #0]
   22622:	2b00      	cmp	r3, #0
   22624:	dd04      	ble.n	22630 <MQTTDeserialize_publish+0x78>
		*packetid = readInt(&curdata);
   22626:	a803      	add	r0, sp, #12
   22628:	4b08      	ldr	r3, [pc, #32]	; (2264c <MQTTDeserialize_publish+0x94>)
   2262a:	4798      	blx	r3
   2262c:	9b01      	ldr	r3, [sp, #4]
   2262e:	8018      	strh	r0, [r3, #0]
	*payloadlen = enddata - curdata;
   22630:	9b03      	ldr	r3, [sp, #12]
   22632:	1ae4      	subs	r4, r4, r3
   22634:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   22636:	6014      	str	r4, [r2, #0]
	*payload = curdata;
   22638:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2263a:	6013      	str	r3, [r2, #0]
	rc = 1;
   2263c:	2701      	movs	r7, #1
   2263e:	e7ce      	b.n	225de <MQTTDeserialize_publish+0x26>
   22640:	0002279f 	.word	0x0002279f
   22644:	00022771 	.word	0x00022771
   22648:	00022865 	.word	0x00022865
   2264c:	0002278d 	.word	0x0002278d

00022650 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
   22650:	b570      	push	{r4, r5, r6, lr}
   22652:	b082      	sub	sp, #8
   22654:	0005      	movs	r5, r0
   22656:	000e      	movs	r6, r1
   22658:	0014      	movs	r4, r2
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
   2265a:	9301      	str	r3, [sp, #4]
	unsigned char* enddata = NULL;
	int rc = 0;
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   2265c:	a801      	add	r0, sp, #4
   2265e:	4b0c      	ldr	r3, [pc, #48]	; (22690 <MQTTDeserialize_ack+0x40>)
   22660:	4798      	blx	r3
	*dup = header.bits.dup;
   22662:	0703      	lsls	r3, r0, #28
   22664:	0fdb      	lsrs	r3, r3, #31
   22666:	7033      	strb	r3, [r6, #0]
	*packettype = header.bits.type;
   22668:	0600      	lsls	r0, r0, #24
   2266a:	0f00      	lsrs	r0, r0, #28
   2266c:	7028      	strb	r0, [r5, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   2266e:	4669      	mov	r1, sp
   22670:	9801      	ldr	r0, [sp, #4]
   22672:	4b08      	ldr	r3, [pc, #32]	; (22694 <MQTTDeserialize_ack+0x44>)
   22674:	4798      	blx	r3
   22676:	9b01      	ldr	r3, [sp, #4]
   22678:	181b      	adds	r3, r3, r0
   2267a:	9301      	str	r3, [sp, #4]
	enddata = curdata + mylen;

	if (enddata - curdata < 2)
   2267c:	9b00      	ldr	r3, [sp, #0]
   2267e:	2b01      	cmp	r3, #1
   22680:	dd04      	ble.n	2268c <MQTTDeserialize_ack+0x3c>
		goto exit;
	*packetid = readInt(&curdata);
   22682:	a801      	add	r0, sp, #4
   22684:	4b04      	ldr	r3, [pc, #16]	; (22698 <MQTTDeserialize_ack+0x48>)
   22686:	4798      	blx	r3
   22688:	8020      	strh	r0, [r4, #0]

	rc = 1;
   2268a:	2001      	movs	r0, #1
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   2268c:	b002      	add	sp, #8
   2268e:	bd70      	pop	{r4, r5, r6, pc}
   22690:	0002279f 	.word	0x0002279f
   22694:	00022771 	.word	0x00022771
   22698:	0002278d 	.word	0x0002278d

0002269c <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
   2269c:	b530      	push	{r4, r5, lr}
	int i;

	for (i = 0; i < count; ++i)
   2269e:	2900      	cmp	r1, #0
   226a0:	dd0a      	ble.n	226b8 <bufchar+0x1c>
   226a2:	4b06      	ldr	r3, [pc, #24]	; (226bc <bufchar+0x20>)
   226a4:	681b      	ldr	r3, [r3, #0]
   226a6:	185d      	adds	r5, r3, r1
   226a8:	002c      	movs	r4, r5
		*c = *bufptr++;
   226aa:	781a      	ldrb	r2, [r3, #0]
   226ac:	7002      	strb	r2, [r0, #0]
   226ae:	3301      	adds	r3, #1
	for (i = 0; i < count; ++i)
   226b0:	42a3      	cmp	r3, r4
   226b2:	d1fa      	bne.n	226aa <bufchar+0xe>
   226b4:	4b01      	ldr	r3, [pc, #4]	; (226bc <bufchar+0x20>)
   226b6:	601d      	str	r5, [r3, #0]
	return count;
}
   226b8:	0008      	movs	r0, r1
   226ba:	bd30      	pop	{r4, r5, pc}
   226bc:	200040f4 	.word	0x200040f4

000226c0 <MQTTPacket_encode>:
{
   226c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   226c2:	b083      	sub	sp, #12
   226c4:	2500      	movs	r5, #0
		char d = length % 128;
   226c6:	267f      	movs	r6, #127	; 0x7f
			d |= 0x80;
   226c8:	2780      	movs	r7, #128	; 0x80
   226ca:	427f      	negs	r7, r7
   226cc:	9501      	str	r5, [sp, #4]
		char d = length % 128;
   226ce:	17ca      	asrs	r2, r1, #31
   226d0:	0e54      	lsrs	r4, r2, #25
   226d2:	190b      	adds	r3, r1, r4
   226d4:	4033      	ands	r3, r6
   226d6:	1b1b      	subs	r3, r3, r4
   226d8:	b2db      	uxtb	r3, r3
		length /= 128;
   226da:	4032      	ands	r2, r6
   226dc:	1851      	adds	r1, r2, r1
   226de:	11c9      	asrs	r1, r1, #7
		if (length > 0)
   226e0:	2900      	cmp	r1, #0
   226e2:	dd03      	ble.n	226ec <MQTTPacket_encode+0x2c>
			d |= 0x80;
   226e4:	433b      	orrs	r3, r7
		buf[rc++] = d;
   226e6:	5543      	strb	r3, [r0, r5]
   226e8:	3501      	adds	r5, #1
   226ea:	e7ef      	b.n	226cc <MQTTPacket_encode+0xc>
   226ec:	5543      	strb	r3, [r0, r5]
   226ee:	9801      	ldr	r0, [sp, #4]
   226f0:	3001      	adds	r0, #1
}
   226f2:	b003      	add	sp, #12
   226f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000226f6 <MQTTPacket_decode>:
{
   226f6:	b5f0      	push	{r4, r5, r6, r7, lr}
   226f8:	46ce      	mov	lr, r9
   226fa:	4647      	mov	r7, r8
   226fc:	b580      	push	{r7, lr}
   226fe:	b083      	sub	sp, #12
   22700:	4680      	mov	r8, r0
   22702:	000f      	movs	r7, r1
	*value = 0;
   22704:	2300      	movs	r3, #0
   22706:	600b      	str	r3, [r1, #0]
		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   22708:	2401      	movs	r4, #1
	int multiplier = 1;
   2270a:	2601      	movs	r6, #1
		rc = (*getcharfn)(&c, 1);
   2270c:	466b      	mov	r3, sp
   2270e:	1ddd      	adds	r5, r3, #7
		*value += (c & 127) * multiplier;
   22710:	237f      	movs	r3, #127	; 0x7f
   22712:	4699      	mov	r9, r3
		rc = (*getcharfn)(&c, 1);
   22714:	2101      	movs	r1, #1
   22716:	0028      	movs	r0, r5
   22718:	47c0      	blx	r8
		if (rc != 1)
   2271a:	2801      	cmp	r0, #1
   2271c:	d10e      	bne.n	2273c <MQTTPacket_decode+0x46>
		*value += (c & 127) * multiplier;
   2271e:	782b      	ldrb	r3, [r5, #0]
   22720:	464a      	mov	r2, r9
   22722:	401a      	ands	r2, r3
   22724:	4372      	muls	r2, r6
   22726:	6839      	ldr	r1, [r7, #0]
   22728:	468c      	mov	ip, r1
   2272a:	4462      	add	r2, ip
   2272c:	603a      	str	r2, [r7, #0]
		multiplier *= 128;
   2272e:	01f6      	lsls	r6, r6, #7
	} while ((c & 128) != 0);
   22730:	b25b      	sxtb	r3, r3
   22732:	2b00      	cmp	r3, #0
   22734:	da02      	bge.n	2273c <MQTTPacket_decode+0x46>
		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   22736:	3401      	adds	r4, #1
   22738:	2c05      	cmp	r4, #5
   2273a:	d1eb      	bne.n	22714 <MQTTPacket_decode+0x1e>
}
   2273c:	0020      	movs	r0, r4
   2273e:	b003      	add	sp, #12
   22740:	bc0c      	pop	{r2, r3}
   22742:	4690      	mov	r8, r2
   22744:	4699      	mov	r9, r3
   22746:	bdf0      	pop	{r4, r5, r6, r7, pc}

00022748 <MQTTPacket_len>:
{
   22748:	0003      	movs	r3, r0
	rem_len += 1; /* header byte */
   2274a:	1c42      	adds	r2, r0, #1
		rem_len += 1;
   2274c:	3002      	adds	r0, #2
	if (rem_len < 128)
   2274e:	2a7f      	cmp	r2, #127	; 0x7f
   22750:	dd07      	ble.n	22762 <MQTTPacket_len+0x1a>
	else if (rem_len < 16384)
   22752:	4905      	ldr	r1, [pc, #20]	; (22768 <MQTTPacket_len+0x20>)
		rem_len += 2;
   22754:	1cd8      	adds	r0, r3, #3
	else if (rem_len < 16384)
   22756:	428a      	cmp	r2, r1
   22758:	dd03      	ble.n	22762 <MQTTPacket_len+0x1a>
	else if (rem_len < 2097151)
   2275a:	4904      	ldr	r1, [pc, #16]	; (2276c <MQTTPacket_len+0x24>)
		rem_len += 4;
   2275c:	1d58      	adds	r0, r3, #5
	else if (rem_len < 2097151)
   2275e:	428a      	cmp	r2, r1
   22760:	dd00      	ble.n	22764 <MQTTPacket_len+0x1c>
}
   22762:	4770      	bx	lr
		rem_len += 3;
   22764:	1d18      	adds	r0, r3, #4
   22766:	e7fc      	b.n	22762 <MQTTPacket_len+0x1a>
   22768:	00003fff 	.word	0x00003fff
   2276c:	001ffffe 	.word	0x001ffffe

00022770 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
   22770:	b510      	push	{r4, lr}
	bufptr = buf;
   22772:	4b03      	ldr	r3, [pc, #12]	; (22780 <MQTTPacket_decodeBuf+0x10>)
   22774:	6018      	str	r0, [r3, #0]
	return MQTTPacket_decode(bufchar, value);
   22776:	4803      	ldr	r0, [pc, #12]	; (22784 <MQTTPacket_decodeBuf+0x14>)
   22778:	4b03      	ldr	r3, [pc, #12]	; (22788 <MQTTPacket_decodeBuf+0x18>)
   2277a:	4798      	blx	r3
}
   2277c:	bd10      	pop	{r4, pc}
   2277e:	46c0      	nop			; (mov r8, r8)
   22780:	200040f4 	.word	0x200040f4
   22784:	0002269d 	.word	0x0002269d
   22788:	000226f7 	.word	0x000226f7

0002278c <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
   2278c:	0001      	movs	r1, r0
	unsigned char* ptr = *pptr;
   2278e:	6802      	ldr	r2, [r0, #0]
	int len = 256*(*ptr) + (*(ptr+1));
   22790:	7813      	ldrb	r3, [r2, #0]
   22792:	021b      	lsls	r3, r3, #8
   22794:	7850      	ldrb	r0, [r2, #1]
   22796:	1818      	adds	r0, r3, r0
	*pptr += 2;
   22798:	3202      	adds	r2, #2
   2279a:	600a      	str	r2, [r1, #0]
	return len;
}
   2279c:	4770      	bx	lr

0002279e <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
   2279e:	0002      	movs	r2, r0
	char c = **pptr;
   227a0:	6803      	ldr	r3, [r0, #0]
   227a2:	7818      	ldrb	r0, [r3, #0]
	(*pptr)++;
   227a4:	3301      	adds	r3, #1
   227a6:	6013      	str	r3, [r2, #0]
	return c;
}
   227a8:	4770      	bx	lr

000227aa <writeChar>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
	**pptr = c;
   227aa:	6803      	ldr	r3, [r0, #0]
   227ac:	7019      	strb	r1, [r3, #0]
	(*pptr)++;
   227ae:	6803      	ldr	r3, [r0, #0]
   227b0:	3301      	adds	r3, #1
   227b2:	6003      	str	r3, [r0, #0]
}
   227b4:	4770      	bx	lr

000227b6 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
   227b6:	b530      	push	{r4, r5, lr}
	**pptr = (unsigned char)(anInt / 256);
   227b8:	17ca      	asrs	r2, r1, #31
   227ba:	23ff      	movs	r3, #255	; 0xff
   227bc:	001c      	movs	r4, r3
   227be:	4014      	ands	r4, r2
   227c0:	1864      	adds	r4, r4, r1
   227c2:	1224      	asrs	r4, r4, #8
   227c4:	6805      	ldr	r5, [r0, #0]
   227c6:	702c      	strb	r4, [r5, #0]
	(*pptr)++;
   227c8:	6804      	ldr	r4, [r0, #0]
   227ca:	1c65      	adds	r5, r4, #1
   227cc:	6005      	str	r5, [r0, #0]
	**pptr = (unsigned char)(anInt % 256);
   227ce:	0e12      	lsrs	r2, r2, #24
   227d0:	1889      	adds	r1, r1, r2
   227d2:	400b      	ands	r3, r1
   227d4:	1a9b      	subs	r3, r3, r2
   227d6:	7063      	strb	r3, [r4, #1]
	(*pptr)++;
   227d8:	6803      	ldr	r3, [r0, #0]
   227da:	3301      	adds	r3, #1
   227dc:	6003      	str	r3, [r0, #0]
}
   227de:	bd30      	pop	{r4, r5, pc}

000227e0 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
   227e0:	b570      	push	{r4, r5, r6, lr}
   227e2:	0004      	movs	r4, r0
   227e4:	000e      	movs	r6, r1
	int len = strlen(string);
   227e6:	0008      	movs	r0, r1
   227e8:	4b08      	ldr	r3, [pc, #32]	; (2280c <writeCString+0x2c>)
   227ea:	4798      	blx	r3
   227ec:	0005      	movs	r5, r0
	writeInt(pptr, len);
   227ee:	0001      	movs	r1, r0
   227f0:	0020      	movs	r0, r4
   227f2:	4b07      	ldr	r3, [pc, #28]	; (22810 <writeCString+0x30>)
   227f4:	4798      	blx	r3
	memcpy(*pptr, string, len);
   227f6:	002a      	movs	r2, r5
   227f8:	0031      	movs	r1, r6
   227fa:	6820      	ldr	r0, [r4, #0]
   227fc:	4b05      	ldr	r3, [pc, #20]	; (22814 <writeCString+0x34>)
   227fe:	4798      	blx	r3
	*pptr += len;
   22800:	6823      	ldr	r3, [r4, #0]
   22802:	469c      	mov	ip, r3
   22804:	4465      	add	r5, ip
   22806:	6025      	str	r5, [r4, #0]
}
   22808:	bd70      	pop	{r4, r5, r6, pc}
   2280a:	46c0      	nop			; (mov r8, r8)
   2280c:	000260c7 	.word	0x000260c7
   22810:	000227b7 	.word	0x000227b7
   22814:	00025cd9 	.word	0x00025cd9

00022818 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
   22818:	b530      	push	{r4, r5, lr}
   2281a:	b085      	sub	sp, #20
   2281c:	0005      	movs	r5, r0
   2281e:	9101      	str	r1, [sp, #4]
   22820:	9303      	str	r3, [sp, #12]
   22822:	1e14      	subs	r4, r2, #0
	if (mqttstring.lenstring.len > 0)
   22824:	dc06      	bgt.n	22834 <writeMQTTString+0x1c>
   22826:	9901      	ldr	r1, [sp, #4]
	{
		writeInt(pptr, mqttstring.lenstring.len);
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
		*pptr += mqttstring.lenstring.len;
	}
	else if (mqttstring.cstring)
   22828:	2900      	cmp	r1, #0
   2282a:	d010      	beq.n	2284e <writeMQTTString+0x36>
		writeCString(pptr, mqttstring.cstring);
   2282c:	4b0a      	ldr	r3, [pc, #40]	; (22858 <writeMQTTString+0x40>)
   2282e:	4798      	blx	r3
	else
		writeInt(pptr, 0);
}
   22830:	b005      	add	sp, #20
   22832:	bd30      	pop	{r4, r5, pc}
		writeInt(pptr, mqttstring.lenstring.len);
   22834:	0011      	movs	r1, r2
   22836:	4b09      	ldr	r3, [pc, #36]	; (2285c <writeMQTTString+0x44>)
   22838:	4798      	blx	r3
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
   2283a:	0022      	movs	r2, r4
   2283c:	9903      	ldr	r1, [sp, #12]
   2283e:	6828      	ldr	r0, [r5, #0]
   22840:	4b07      	ldr	r3, [pc, #28]	; (22860 <writeMQTTString+0x48>)
   22842:	4798      	blx	r3
		*pptr += mqttstring.lenstring.len;
   22844:	682b      	ldr	r3, [r5, #0]
   22846:	469c      	mov	ip, r3
   22848:	4464      	add	r4, ip
   2284a:	602c      	str	r4, [r5, #0]
   2284c:	e7f0      	b.n	22830 <writeMQTTString+0x18>
		writeInt(pptr, 0);
   2284e:	2100      	movs	r1, #0
   22850:	4b02      	ldr	r3, [pc, #8]	; (2285c <writeMQTTString+0x44>)
   22852:	4798      	blx	r3
}
   22854:	e7ec      	b.n	22830 <writeMQTTString+0x18>
   22856:	46c0      	nop			; (mov r8, r8)
   22858:	000227e1 	.word	0x000227e1
   2285c:	000227b7 	.word	0x000227b7
   22860:	00025cd9 	.word	0x00025cd9

00022864 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
   22864:	b570      	push	{r4, r5, r6, lr}
   22866:	0005      	movs	r5, r0
   22868:	000c      	movs	r4, r1
   2286a:	0016      	movs	r6, r2
	int rc = 0;

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
   2286c:	680b      	ldr	r3, [r1, #0]
   2286e:	1ad3      	subs	r3, r2, r3
   22870:	2b01      	cmp	r3, #1
   22872:	dd12      	ble.n	2289a <readMQTTLenString+0x36>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
   22874:	0008      	movs	r0, r1
   22876:	4b0a      	ldr	r3, [pc, #40]	; (228a0 <readMQTTLenString+0x3c>)
   22878:	4798      	blx	r3
   2287a:	6068      	str	r0, [r5, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
   2287c:	6822      	ldr	r2, [r4, #0]
   2287e:	1811      	adds	r1, r2, r0
	int rc = 0;
   22880:	2300      	movs	r3, #0
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
   22882:	428e      	cmp	r6, r1
   22884:	d305      	bcc.n	22892 <readMQTTLenString+0x2e>
		{
			mqttstring->lenstring.data = (char*)*pptr;
   22886:	60aa      	str	r2, [r5, #8]
			*pptr += mqttstring->lenstring.len;
   22888:	6823      	ldr	r3, [r4, #0]
   2288a:	469c      	mov	ip, r3
   2288c:	4460      	add	r0, ip
   2288e:	6020      	str	r0, [r4, #0]
			rc = 1;
   22890:	2301      	movs	r3, #1
		}
	}
	mqttstring->cstring = NULL;
   22892:	2200      	movs	r2, #0
   22894:	602a      	str	r2, [r5, #0]
	FUNC_EXIT_RC(rc);
	return rc;
}
   22896:	0018      	movs	r0, r3
   22898:	bd70      	pop	{r4, r5, r6, pc}
	int rc = 0;
   2289a:	2300      	movs	r3, #0
   2289c:	e7f9      	b.n	22892 <readMQTTLenString+0x2e>
   2289e:	46c0      	nop			; (mov r8, r8)
   228a0:	0002278d 	.word	0x0002278d

000228a4 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
   228a4:	b500      	push	{lr}
   228a6:	b085      	sub	sp, #20
   228a8:	9102      	str	r1, [sp, #8]
	int rc = 0;

	if (mqttstring.cstring)
   228aa:	2800      	cmp	r0, #0
   228ac:	d003      	beq.n	228b6 <MQTTstrlen+0x12>
		rc = strlen(mqttstring.cstring);
   228ae:	4b03      	ldr	r3, [pc, #12]	; (228bc <MQTTstrlen+0x18>)
   228b0:	4798      	blx	r3
	else
		rc = mqttstring.lenstring.len;
	return rc;
}
   228b2:	b005      	add	sp, #20
   228b4:	bd00      	pop	{pc}
		rc = mqttstring.lenstring.len;
   228b6:	9802      	ldr	r0, [sp, #8]
	return rc;
   228b8:	e7fb      	b.n	228b2 <MQTTstrlen+0xe>
   228ba:	46c0      	nop			; (mov r8, r8)
   228bc:	000260c7 	.word	0x000260c7

000228c0 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
   228c0:	b570      	push	{r4, r5, r6, lr}
   228c2:	000d      	movs	r5, r1
	int alen = 0,
		blen = 0;
	char *aptr;
	
	if (a->cstring)
   228c4:	6806      	ldr	r6, [r0, #0]
   228c6:	2e00      	cmp	r6, #0
   228c8:	d00b      	beq.n	228e2 <MQTTPacket_equals+0x22>
	{
		aptr = a->cstring;
		alen = strlen(a->cstring);
   228ca:	0030      	movs	r0, r6
   228cc:	4b0b      	ldr	r3, [pc, #44]	; (228fc <MQTTPacket_equals+0x3c>)
   228ce:	4798      	blx	r3
   228d0:	0004      	movs	r4, r0
	else
	{
		aptr = a->lenstring.data;
		alen = a->lenstring.len;
	}
	blen = strlen(bptr);
   228d2:	0028      	movs	r0, r5
   228d4:	4b09      	ldr	r3, [pc, #36]	; (228fc <MQTTPacket_equals+0x3c>)
   228d6:	4798      	blx	r3
   228d8:	2300      	movs	r3, #0
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
   228da:	4284      	cmp	r4, r0
   228dc:	d004      	beq.n	228e8 <MQTTPacket_equals+0x28>
}
   228de:	0018      	movs	r0, r3
   228e0:	bd70      	pop	{r4, r5, r6, pc}
		aptr = a->lenstring.data;
   228e2:	6886      	ldr	r6, [r0, #8]
		alen = a->lenstring.len;
   228e4:	6844      	ldr	r4, [r0, #4]
   228e6:	e7f4      	b.n	228d2 <MQTTPacket_equals+0x12>
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
   228e8:	0022      	movs	r2, r4
   228ea:	0029      	movs	r1, r5
   228ec:	0030      	movs	r0, r6
   228ee:	4b04      	ldr	r3, [pc, #16]	; (22900 <MQTTPacket_equals+0x40>)
   228f0:	4798      	blx	r3
   228f2:	4243      	negs	r3, r0
   228f4:	4143      	adcs	r3, r0
   228f6:	b2db      	uxtb	r3, r3
   228f8:	e7f1      	b.n	228de <MQTTPacket_equals+0x1e>
   228fa:	46c0      	nop			; (mov r8, r8)
   228fc:	000260c7 	.word	0x000260c7
   22900:	000260d5 	.word	0x000260d5

00022904 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
   22904:	b510      	push	{r4, lr}
   22906:	b084      	sub	sp, #16
   22908:	0004      	movs	r4, r0
	int len = 0;

	len += 2 + MQTTstrlen(topicName) + payloadlen;
   2290a:	0008      	movs	r0, r1
   2290c:	0011      	movs	r1, r2
   2290e:	001a      	movs	r2, r3
   22910:	4b05      	ldr	r3, [pc, #20]	; (22928 <MQTTSerialize_publishLength+0x24>)
   22912:	4798      	blx	r3
   22914:	3002      	adds	r0, #2
   22916:	9b06      	ldr	r3, [sp, #24]
   22918:	469c      	mov	ip, r3
   2291a:	4460      	add	r0, ip
	if (qos > 0)
   2291c:	2c00      	cmp	r4, #0
   2291e:	dd00      	ble.n	22922 <MQTTSerialize_publishLength+0x1e>
		len += 2; /* packetid */
   22920:	3002      	adds	r0, #2
	return len;
}
   22922:	b004      	add	sp, #16
   22924:	bd10      	pop	{r4, pc}
   22926:	46c0      	nop			; (mov r8, r8)
   22928:	000228a5 	.word	0x000228a5

0002292c <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
   2292c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2292e:	46de      	mov	lr, fp
   22930:	4657      	mov	r7, sl
   22932:	464e      	mov	r6, r9
   22934:	b5c0      	push	{r6, r7, lr}
   22936:	b084      	sub	sp, #16
   22938:	0007      	movs	r7, r0
   2293a:	468b      	mov	fp, r1
   2293c:	4692      	mov	sl, r2
   2293e:	001e      	movs	r6, r3
   22940:	ab0c      	add	r3, sp, #48	; 0x30
   22942:	781b      	ldrb	r3, [r3, #0]
   22944:	4699      	mov	r9, r3
   22946:	ab0d      	add	r3, sp, #52	; 0x34
   22948:	881c      	ldrh	r4, [r3, #0]
	unsigned char *ptr = buf;
   2294a:	9003      	str	r0, [sp, #12]
	MQTTHeader header = {0};
	int rem_len = 0;
	int rc = 0;

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
   2294c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2294e:	9300      	str	r3, [sp, #0]
   22950:	990e      	ldr	r1, [sp, #56]	; 0x38
   22952:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   22954:	9b10      	ldr	r3, [sp, #64]	; 0x40
   22956:	0030      	movs	r0, r6
   22958:	4d1f      	ldr	r5, [pc, #124]	; (229d8 <MQTTSerialize_publish+0xac>)
   2295a:	47a8      	blx	r5
   2295c:	0005      	movs	r5, r0
   2295e:	4b1f      	ldr	r3, [pc, #124]	; (229dc <MQTTSerialize_publish+0xb0>)
   22960:	4798      	blx	r3
   22962:	4558      	cmp	r0, fp
   22964:	dc34      	bgt.n	229d0 <MQTTSerialize_publish+0xa4>
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}

	header.bits.type = PUBLISH;
	header.bits.dup = dup;
   22966:	2201      	movs	r2, #1
   22968:	4653      	mov	r3, sl
   2296a:	4013      	ands	r3, r2
   2296c:	00db      	lsls	r3, r3, #3
	header.bits.qos = qos;
   2296e:	2103      	movs	r1, #3
   22970:	4031      	ands	r1, r6
   22972:	0048      	lsls	r0, r1, #1
   22974:	2130      	movs	r1, #48	; 0x30
   22976:	4319      	orrs	r1, r3
   22978:	4301      	orrs	r1, r0
	header.bits.retain = retained;
   2297a:	464b      	mov	r3, r9
   2297c:	4013      	ands	r3, r2
   2297e:	4391      	bics	r1, r2
	writeChar(&ptr, header.byte); /* write header */
   22980:	4319      	orrs	r1, r3
   22982:	a803      	add	r0, sp, #12
   22984:	4b16      	ldr	r3, [pc, #88]	; (229e0 <MQTTSerialize_publish+0xb4>)
   22986:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   22988:	0029      	movs	r1, r5
   2298a:	9803      	ldr	r0, [sp, #12]
   2298c:	4b15      	ldr	r3, [pc, #84]	; (229e4 <MQTTSerialize_publish+0xb8>)
   2298e:	4798      	blx	r3
   22990:	9b03      	ldr	r3, [sp, #12]
   22992:	469c      	mov	ip, r3
   22994:	4460      	add	r0, ip
   22996:	9003      	str	r0, [sp, #12]

	writeMQTTString(&ptr, topicName);
   22998:	990e      	ldr	r1, [sp, #56]	; 0x38
   2299a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2299c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2299e:	a803      	add	r0, sp, #12
   229a0:	4d11      	ldr	r5, [pc, #68]	; (229e8 <MQTTSerialize_publish+0xbc>)
   229a2:	47a8      	blx	r5

	if (qos > 0)
   229a4:	2e00      	cmp	r6, #0
   229a6:	dd03      	ble.n	229b0 <MQTTSerialize_publish+0x84>
		writeInt(&ptr, packetid);
   229a8:	0021      	movs	r1, r4
   229aa:	a803      	add	r0, sp, #12
   229ac:	4b0f      	ldr	r3, [pc, #60]	; (229ec <MQTTSerialize_publish+0xc0>)
   229ae:	4798      	blx	r3

	memcpy(ptr, payload, payloadlen);
   229b0:	9a12      	ldr	r2, [sp, #72]	; 0x48
   229b2:	9911      	ldr	r1, [sp, #68]	; 0x44
   229b4:	9803      	ldr	r0, [sp, #12]
   229b6:	4b0e      	ldr	r3, [pc, #56]	; (229f0 <MQTTSerialize_publish+0xc4>)
   229b8:	4798      	blx	r3
	ptr += payloadlen;
   229ba:	9b03      	ldr	r3, [sp, #12]
   229bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
   229be:	4694      	mov	ip, r2
   229c0:	4463      	add	r3, ip

	rc = ptr - buf;
   229c2:	1bd8      	subs	r0, r3, r7

exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   229c4:	b004      	add	sp, #16
   229c6:	bc1c      	pop	{r2, r3, r4}
   229c8:	4691      	mov	r9, r2
   229ca:	469a      	mov	sl, r3
   229cc:	46a3      	mov	fp, r4
   229ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   229d0:	2002      	movs	r0, #2
   229d2:	4240      	negs	r0, r0
	return rc;
   229d4:	e7f6      	b.n	229c4 <MQTTSerialize_publish+0x98>
   229d6:	46c0      	nop			; (mov r8, r8)
   229d8:	00022905 	.word	0x00022905
   229dc:	00022749 	.word	0x00022749
   229e0:	000227ab 	.word	0x000227ab
   229e4:	000226c1 	.word	0x000226c1
   229e8:	00022819 	.word	0x00022819
   229ec:	000227b7 	.word	0x000227b7
   229f0:	00025cd9 	.word	0x00025cd9

000229f4 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
   229f4:	b530      	push	{r4, r5, lr}
   229f6:	b083      	sub	sp, #12
   229f8:	0004      	movs	r4, r0
   229fa:	a806      	add	r0, sp, #24
   229fc:	8805      	ldrh	r5, [r0, #0]
	MQTTHeader header = {0};
	int rc = 0;
	unsigned char *ptr = buf;
   229fe:	9401      	str	r4, [sp, #4]

	FUNC_ENTRY;
	if (buflen < 4)
   22a00:	2903      	cmp	r1, #3
   22a02:	dd1e      	ble.n	22a42 <MQTTSerialize_ack+0x4e>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}
	header.bits.type = packettype;
   22a04:	210f      	movs	r1, #15
   22a06:	4011      	ands	r1, r2
	header.bits.dup = dup;
   22a08:	2001      	movs	r0, #1
   22a0a:	4003      	ands	r3, r0
   22a0c:	00db      	lsls	r3, r3, #3
   22a0e:	0109      	lsls	r1, r1, #4
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
   22a10:	3a06      	subs	r2, #6
   22a12:	4250      	negs	r0, r2
   22a14:	4142      	adcs	r2, r0
   22a16:	0052      	lsls	r2, r2, #1
   22a18:	4319      	orrs	r1, r3
	writeChar(&ptr, header.byte); /* write header */
   22a1a:	4311      	orrs	r1, r2
   22a1c:	a801      	add	r0, sp, #4
   22a1e:	4b0a      	ldr	r3, [pc, #40]	; (22a48 <MQTTSerialize_ack+0x54>)
   22a20:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
   22a22:	2102      	movs	r1, #2
   22a24:	9801      	ldr	r0, [sp, #4]
   22a26:	4b09      	ldr	r3, [pc, #36]	; (22a4c <MQTTSerialize_ack+0x58>)
   22a28:	4798      	blx	r3
   22a2a:	9b01      	ldr	r3, [sp, #4]
   22a2c:	469c      	mov	ip, r3
   22a2e:	4460      	add	r0, ip
   22a30:	9001      	str	r0, [sp, #4]
	writeInt(&ptr, packetid);
   22a32:	0029      	movs	r1, r5
   22a34:	a801      	add	r0, sp, #4
   22a36:	4b06      	ldr	r3, [pc, #24]	; (22a50 <MQTTSerialize_ack+0x5c>)
   22a38:	4798      	blx	r3
	rc = ptr - buf;
   22a3a:	9b01      	ldr	r3, [sp, #4]
   22a3c:	1b18      	subs	r0, r3, r4
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   22a3e:	b003      	add	sp, #12
   22a40:	bd30      	pop	{r4, r5, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   22a42:	2002      	movs	r0, #2
   22a44:	4240      	negs	r0, r0
	return rc;
   22a46:	e7fa      	b.n	22a3e <MQTTSerialize_ack+0x4a>
   22a48:	000227ab 	.word	0x000227ab
   22a4c:	000226c1 	.word	0x000226c1
   22a50:	000227b7 	.word	0x000227b7

00022a54 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
   22a54:	b5f0      	push	{r4, r5, r6, r7, lr}
   22a56:	46c6      	mov	lr, r8
   22a58:	b500      	push	{lr}
   22a5a:	1e07      	subs	r7, r0, #0
	int i;
	int len = 2; /* packetid */

	for (i = 0; i < count; ++i)
   22a5c:	dd12      	ble.n	22a84 <MQTTSerialize_subscribeLength+0x30>
   22a5e:	000c      	movs	r4, r1
   22a60:	2602      	movs	r6, #2
   22a62:	2500      	movs	r5, #0
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
   22a64:	4b08      	ldr	r3, [pc, #32]	; (22a88 <MQTTSerialize_subscribeLength+0x34>)
   22a66:	4698      	mov	r8, r3
   22a68:	6820      	ldr	r0, [r4, #0]
   22a6a:	6861      	ldr	r1, [r4, #4]
   22a6c:	68a2      	ldr	r2, [r4, #8]
   22a6e:	47c0      	blx	r8
   22a70:	3003      	adds	r0, #3
   22a72:	1836      	adds	r6, r6, r0
	for (i = 0; i < count; ++i)
   22a74:	3501      	adds	r5, #1
   22a76:	340c      	adds	r4, #12
   22a78:	42af      	cmp	r7, r5
   22a7a:	d1f5      	bne.n	22a68 <MQTTSerialize_subscribeLength+0x14>
	return len;
}
   22a7c:	0030      	movs	r0, r6
   22a7e:	bc04      	pop	{r2}
   22a80:	4690      	mov	r8, r2
   22a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
	int len = 2; /* packetid */
   22a84:	2602      	movs	r6, #2
	return len;
   22a86:	e7f9      	b.n	22a7c <MQTTSerialize_subscribeLength+0x28>
   22a88:	000228a5 	.word	0x000228a5

00022a8c <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
   22a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   22a8e:	46d6      	mov	lr, sl
   22a90:	464f      	mov	r7, r9
   22a92:	4646      	mov	r6, r8
   22a94:	b5c0      	push	{r6, r7, lr}
   22a96:	b084      	sub	sp, #16
   22a98:	4682      	mov	sl, r0
   22a9a:	000e      	movs	r6, r1
   22a9c:	0015      	movs	r5, r2
   22a9e:	9301      	str	r3, [sp, #4]
   22aa0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	unsigned char *ptr = buf;
   22aa2:	9003      	str	r0, [sp, #12]
	int rem_len = 0;
	int rc = 0;
	int i = 0;

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
   22aa4:	990d      	ldr	r1, [sp, #52]	; 0x34
   22aa6:	0038      	movs	r0, r7
   22aa8:	4b1f      	ldr	r3, [pc, #124]	; (22b28 <MQTTSerialize_subscribe+0x9c>)
   22aaa:	4798      	blx	r3
   22aac:	0004      	movs	r4, r0
   22aae:	4b1f      	ldr	r3, [pc, #124]	; (22b2c <MQTTSerialize_subscribe+0xa0>)
   22ab0:	4798      	blx	r3
   22ab2:	42b0      	cmp	r0, r6
   22ab4:	dc34      	bgt.n	22b20 <MQTTSerialize_subscribe+0x94>
		goto exit;
	}

	header.byte = 0;
	header.bits.type = SUBSCRIBE;
	header.bits.dup = dup;
   22ab6:	2101      	movs	r1, #1
   22ab8:	4029      	ands	r1, r5
   22aba:	00ca      	lsls	r2, r1, #3
	header.bits.qos = 1;
   22abc:	2180      	movs	r1, #128	; 0x80
   22abe:	4311      	orrs	r1, r2
	writeChar(&ptr, header.byte); /* write header */
   22ac0:	2302      	movs	r3, #2
   22ac2:	4319      	orrs	r1, r3
   22ac4:	a803      	add	r0, sp, #12
   22ac6:	4b1a      	ldr	r3, [pc, #104]	; (22b30 <MQTTSerialize_subscribe+0xa4>)
   22ac8:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   22aca:	0021      	movs	r1, r4
   22acc:	9803      	ldr	r0, [sp, #12]
   22ace:	4b19      	ldr	r3, [pc, #100]	; (22b34 <MQTTSerialize_subscribe+0xa8>)
   22ad0:	4798      	blx	r3
   22ad2:	9a03      	ldr	r2, [sp, #12]
   22ad4:	4694      	mov	ip, r2
   22ad6:	4460      	add	r0, ip
   22ad8:	9003      	str	r0, [sp, #12]

	writeInt(&ptr, packetid);
   22ada:	9901      	ldr	r1, [sp, #4]
   22adc:	a803      	add	r0, sp, #12
   22ade:	4b16      	ldr	r3, [pc, #88]	; (22b38 <MQTTSerialize_subscribe+0xac>)
   22ae0:	4798      	blx	r3

	for (i = 0; i < count; ++i)
   22ae2:	2f00      	cmp	r7, #0
   22ae4:	dd13      	ble.n	22b0e <MQTTSerialize_subscribe+0x82>
   22ae6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   22ae8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   22aea:	2500      	movs	r5, #0
	{
		writeMQTTString(&ptr, topicFilters[i]);
   22aec:	4b13      	ldr	r3, [pc, #76]	; (22b3c <MQTTSerialize_subscribe+0xb0>)
   22aee:	4699      	mov	r9, r3
		writeChar(&ptr, requestedQoSs[i]);
   22af0:	4b0f      	ldr	r3, [pc, #60]	; (22b30 <MQTTSerialize_subscribe+0xa4>)
   22af2:	4698      	mov	r8, r3
		writeMQTTString(&ptr, topicFilters[i]);
   22af4:	6821      	ldr	r1, [r4, #0]
   22af6:	6862      	ldr	r2, [r4, #4]
   22af8:	68a3      	ldr	r3, [r4, #8]
   22afa:	a803      	add	r0, sp, #12
   22afc:	47c8      	blx	r9
		writeChar(&ptr, requestedQoSs[i]);
   22afe:	ce02      	ldmia	r6!, {r1}
   22b00:	b2c9      	uxtb	r1, r1
   22b02:	a803      	add	r0, sp, #12
   22b04:	47c0      	blx	r8
	for (i = 0; i < count; ++i)
   22b06:	3501      	adds	r5, #1
   22b08:	340c      	adds	r4, #12
   22b0a:	42af      	cmp	r7, r5
   22b0c:	d1f2      	bne.n	22af4 <MQTTSerialize_subscribe+0x68>
	}

	rc = ptr - buf;
   22b0e:	9b03      	ldr	r3, [sp, #12]
   22b10:	4652      	mov	r2, sl
   22b12:	1a98      	subs	r0, r3, r2
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   22b14:	b004      	add	sp, #16
   22b16:	bc1c      	pop	{r2, r3, r4}
   22b18:	4690      	mov	r8, r2
   22b1a:	4699      	mov	r9, r3
   22b1c:	46a2      	mov	sl, r4
   22b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   22b20:	2002      	movs	r0, #2
   22b22:	4240      	negs	r0, r0
	return rc;
   22b24:	e7f6      	b.n	22b14 <MQTTSerialize_subscribe+0x88>
   22b26:	46c0      	nop			; (mov r8, r8)
   22b28:	00022a55 	.word	0x00022a55
   22b2c:	00022749 	.word	0x00022749
   22b30:	000227ab 	.word	0x000227ab
   22b34:	000226c1 	.word	0x000226c1
   22b38:	000227b7 	.word	0x000227b7
   22b3c:	00022819 	.word	0x00022819

00022b40 <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
   22b40:	b5f0      	push	{r4, r5, r6, r7, lr}
   22b42:	46ce      	mov	lr, r9
   22b44:	4647      	mov	r7, r8
   22b46:	b580      	push	{r7, lr}
   22b48:	b083      	sub	sp, #12
   22b4a:	0004      	movs	r4, r0
   22b4c:	000e      	movs	r6, r1
   22b4e:	0015      	movs	r5, r2
   22b50:	001f      	movs	r7, r3
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
   22b52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   22b54:	9301      	str	r3, [sp, #4]
	unsigned char* enddata = NULL;
	int rc = 0;
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   22b56:	a801      	add	r0, sp, #4
   22b58:	4b1e      	ldr	r3, [pc, #120]	; (22bd4 <MQTTDeserialize_suback+0x94>)
   22b5a:	4798      	blx	r3
	if (header.bits.type != SUBACK)
   22b5c:	23f0      	movs	r3, #240	; 0xf0
   22b5e:	4003      	ands	r3, r0
	int rc = 0;
   22b60:	2000      	movs	r0, #0
	if (header.bits.type != SUBACK)
   22b62:	2b90      	cmp	r3, #144	; 0x90
   22b64:	d004      	beq.n	22b70 <MQTTDeserialize_suback+0x30>

	rc = 1;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   22b66:	b003      	add	sp, #12
   22b68:	bc0c      	pop	{r2, r3}
   22b6a:	4690      	mov	r8, r2
   22b6c:	4699      	mov	r9, r3
   22b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   22b70:	4669      	mov	r1, sp
   22b72:	9801      	ldr	r0, [sp, #4]
   22b74:	4b18      	ldr	r3, [pc, #96]	; (22bd8 <MQTTDeserialize_suback+0x98>)
   22b76:	4798      	blx	r3
   22b78:	9b01      	ldr	r3, [sp, #4]
   22b7a:	181b      	adds	r3, r3, r0
   22b7c:	9301      	str	r3, [sp, #4]
	enddata = curdata + mylen;
   22b7e:	9a00      	ldr	r2, [sp, #0]
	if (enddata - curdata < 2)
   22b80:	2a01      	cmp	r2, #1
   22b82:	ddf0      	ble.n	22b66 <MQTTDeserialize_suback+0x26>
	enddata = curdata + mylen;
   22b84:	4698      	mov	r8, r3
   22b86:	4490      	add	r8, r2
	*packetid = readInt(&curdata);
   22b88:	a801      	add	r0, sp, #4
   22b8a:	4b14      	ldr	r3, [pc, #80]	; (22bdc <MQTTDeserialize_suback+0x9c>)
   22b8c:	4798      	blx	r3
   22b8e:	8020      	strh	r0, [r4, #0]
	*count = 0;
   22b90:	2300      	movs	r3, #0
   22b92:	602b      	str	r3, [r5, #0]
	while (curdata < enddata)
   22b94:	9b01      	ldr	r3, [sp, #4]
   22b96:	4598      	cmp	r8, r3
   22b98:	d916      	bls.n	22bc8 <MQTTDeserialize_suback+0x88>
		if (*count > maxcount)
   22b9a:	2e00      	cmp	r6, #0
   22b9c:	db16      	blt.n	22bcc <MQTTDeserialize_suback+0x8c>
   22b9e:	2300      	movs	r3, #0
		grantedQoSs[(*count)++] = readChar(&curdata);
   22ba0:	4a0c      	ldr	r2, [pc, #48]	; (22bd4 <MQTTDeserialize_suback+0x94>)
   22ba2:	4691      	mov	r9, r2
   22ba4:	1c5a      	adds	r2, r3, #1
   22ba6:	602a      	str	r2, [r5, #0]
   22ba8:	009b      	lsls	r3, r3, #2
   22baa:	18fc      	adds	r4, r7, r3
   22bac:	a801      	add	r0, sp, #4
   22bae:	47c8      	blx	r9
   22bb0:	6020      	str	r0, [r4, #0]
	while (curdata < enddata)
   22bb2:	9b01      	ldr	r3, [sp, #4]
   22bb4:	4598      	cmp	r8, r3
   22bb6:	d905      	bls.n	22bc4 <MQTTDeserialize_suback+0x84>
		if (*count > maxcount)
   22bb8:	682b      	ldr	r3, [r5, #0]
   22bba:	42b3      	cmp	r3, r6
   22bbc:	ddf2      	ble.n	22ba4 <MQTTDeserialize_suback+0x64>
			rc = -1;
   22bbe:	2001      	movs	r0, #1
   22bc0:	4240      	negs	r0, r0
	return rc;
   22bc2:	e7d0      	b.n	22b66 <MQTTDeserialize_suback+0x26>
	rc = 1;
   22bc4:	2001      	movs	r0, #1
   22bc6:	e7ce      	b.n	22b66 <MQTTDeserialize_suback+0x26>
   22bc8:	2001      	movs	r0, #1
   22bca:	e7cc      	b.n	22b66 <MQTTDeserialize_suback+0x26>
			rc = -1;
   22bcc:	2001      	movs	r0, #1
   22bce:	4240      	negs	r0, r0
   22bd0:	e7c9      	b.n	22b66 <MQTTDeserialize_suback+0x26>
   22bd2:	46c0      	nop			; (mov r8, r8)
   22bd4:	0002279f 	.word	0x0002279f
   22bd8:	00022771 	.word	0x00022771
   22bdc:	0002278d 	.word	0x0002278d

00022be0 <_http_client_send_wait>:
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
	}
}

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
   22be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22be2:	0004      	movs	r4, r0
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
	
	module->sending = 1;
   22be4:	2041      	movs	r0, #65	; 0x41
   22be6:	5c23      	ldrb	r3, [r4, r0]
   22be8:	2501      	movs	r5, #1
   22bea:	432b      	orrs	r3, r5
   22bec:	5423      	strb	r3, [r4, r0]

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
   22bee:	b292      	uxth	r2, r2
   22bf0:	2000      	movs	r0, #0
   22bf2:	5620      	ldrsb	r0, [r4, r0]
   22bf4:	2300      	movs	r3, #0
   22bf6:	4d12      	ldr	r5, [pc, #72]	; (22c40 <_http_client_send_wait+0x60>)
   22bf8:	47a8      	blx	r5
   22bfa:	2800      	cmp	r0, #0
   22bfc:	db16      	blt.n	22c2c <_http_client_send_wait+0x4c>
		module->sending = 0;
		return result;
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   22bfe:	2341      	movs	r3, #65	; 0x41
   22c00:	5ce3      	ldrb	r3, [r4, r3]
   22c02:	07db      	lsls	r3, r3, #31
   22c04:	d518      	bpl.n	22c38 <_http_client_send_wait+0x58>
   22c06:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
		m2m_wifi_handle_events(NULL);
		sw_timer_task(module->config.timer_inst);
	}

	return 0;
   22c08:	2000      	movs	r0, #0
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   22c0a:	2b02      	cmp	r3, #2
   22c0c:	d917      	bls.n	22c3e <_http_client_send_wait+0x5e>
		m2m_wifi_handle_events(NULL);
   22c0e:	4f0d      	ldr	r7, [pc, #52]	; (22c44 <_http_client_send_wait+0x64>)
		sw_timer_task(module->config.timer_inst);
   22c10:	4e0d      	ldr	r6, [pc, #52]	; (22c48 <_http_client_send_wait+0x68>)
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   22c12:	2541      	movs	r5, #65	; 0x41
		m2m_wifi_handle_events(NULL);
   22c14:	2000      	movs	r0, #0
   22c16:	47b8      	blx	r7
		sw_timer_task(module->config.timer_inst);
   22c18:	6d60      	ldr	r0, [r4, #84]	; 0x54
   22c1a:	47b0      	blx	r6
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   22c1c:	5d63      	ldrb	r3, [r4, r5]
   22c1e:	07db      	lsls	r3, r3, #31
   22c20:	d50c      	bpl.n	22c3c <_http_client_send_wait+0x5c>
   22c22:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   22c24:	2b02      	cmp	r3, #2
   22c26:	d8f5      	bhi.n	22c14 <_http_client_send_wait+0x34>
	return 0;
   22c28:	2000      	movs	r0, #0
   22c2a:	e008      	b.n	22c3e <_http_client_send_wait+0x5e>
		module->sending = 0;
   22c2c:	2241      	movs	r2, #65	; 0x41
   22c2e:	5ca3      	ldrb	r3, [r4, r2]
   22c30:	2101      	movs	r1, #1
   22c32:	438b      	bics	r3, r1
   22c34:	54a3      	strb	r3, [r4, r2]
		return result;
   22c36:	e002      	b.n	22c3e <_http_client_send_wait+0x5e>
	return 0;
   22c38:	2000      	movs	r0, #0
   22c3a:	e000      	b.n	22c3e <_http_client_send_wait+0x5e>
   22c3c:	2000      	movs	r0, #0
}
   22c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22c40:	0001d19d 	.word	0x0001d19d
   22c44:	0001b1b5 	.word	0x0001b1b5
   22c48:	00023d75 	.word	0x00023d75

00022c4c <http_client_get_config_defaults>:
	config->port = 80;
   22c4c:	2350      	movs	r3, #80	; 0x50
   22c4e:	8003      	strh	r3, [r0, #0]
	config->tls = 0;
   22c50:	2300      	movs	r3, #0
   22c52:	7083      	strb	r3, [r0, #2]
	config->timeout = 20000;
   22c54:	4a05      	ldr	r2, [pc, #20]	; (22c6c <http_client_get_config_defaults+0x20>)
   22c56:	8102      	strh	r2, [r0, #8]
	config->timer_inst = NULL;
   22c58:	6043      	str	r3, [r0, #4]
	config->recv_buffer = NULL;
   22c5a:	60c3      	str	r3, [r0, #12]
	config->recv_buffer_size = 256;
   22c5c:	3301      	adds	r3, #1
   22c5e:	33ff      	adds	r3, #255	; 0xff
   22c60:	6103      	str	r3, [r0, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
   22c62:	3bae      	subs	r3, #174	; 0xae
   22c64:	6143      	str	r3, [r0, #20]
	config->user_agent = DEFAULT_USER_AGENT;
   22c66:	4b02      	ldr	r3, [pc, #8]	; (22c70 <http_client_get_config_defaults+0x24>)
   22c68:	6183      	str	r3, [r0, #24]
}
   22c6a:	4770      	bx	lr
   22c6c:	00004e20 	.word	0x00004e20
   22c70:	0002b7c4 	.word	0x0002b7c4

00022c74 <http_client_init>:
{
   22c74:	b570      	push	{r4, r5, r6, lr}
   22c76:	0004      	movs	r4, r0
   22c78:	000d      	movs	r5, r1
	if (module == NULL || config == NULL) {
   22c7a:	2800      	cmp	r0, #0
   22c7c:	d038      	beq.n	22cf0 <http_client_init+0x7c>
   22c7e:	2900      	cmp	r1, #0
   22c80:	d039      	beq.n	22cf6 <http_client_init+0x82>
	if (config->recv_buffer_size == 0) {
   22c82:	690b      	ldr	r3, [r1, #16]
   22c84:	2b00      	cmp	r3, #0
   22c86:	d039      	beq.n	22cfc <http_client_init+0x88>
	if (config->timer_inst == NULL) {
   22c88:	684b      	ldr	r3, [r1, #4]
   22c8a:	2b00      	cmp	r3, #0
   22c8c:	d039      	beq.n	22d02 <http_client_init+0x8e>
	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
   22c8e:	694b      	ldr	r3, [r1, #20]
   22c90:	2b51      	cmp	r3, #81	; 0x51
   22c92:	d939      	bls.n	22d08 <http_client_init+0x94>
	memset(module, 0, sizeof(struct http_client_module));
   22c94:	22e8      	movs	r2, #232	; 0xe8
   22c96:	2100      	movs	r1, #0
   22c98:	4b1e      	ldr	r3, [pc, #120]	; (22d14 <http_client_init+0xa0>)
   22c9a:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
   22c9c:	0020      	movs	r0, r4
   22c9e:	3050      	adds	r0, #80	; 0x50
   22ca0:	221c      	movs	r2, #28
   22ca2:	0029      	movs	r1, r5
   22ca4:	4b1c      	ldr	r3, [pc, #112]	; (22d18 <http_client_init+0xa4>)
   22ca6:	4798      	blx	r3
	if (module->config.recv_buffer == NULL) {
   22ca8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   22caa:	2b00      	cmp	r3, #0
   22cac:	d008      	beq.n	22cc0 <http_client_init+0x4c>
	if (config->timeout > 0) {
   22cae:	892b      	ldrh	r3, [r5, #8]
   22cb0:	2b00      	cmp	r3, #0
   22cb2:	d111      	bne.n	22cd8 <http_client_init+0x64>
	module->req.state = STATE_INIT;
   22cb4:	2300      	movs	r3, #0
   22cb6:	66e3      	str	r3, [r4, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   22cb8:	22d8      	movs	r2, #216	; 0xd8
   22cba:	50a3      	str	r3, [r4, r2]
	return 0;
   22cbc:	2000      	movs	r0, #0
}
   22cbe:	bd70      	pop	{r4, r5, r6, pc}
		module->config.recv_buffer = malloc(config->recv_buffer_size);
   22cc0:	6928      	ldr	r0, [r5, #16]
   22cc2:	4b16      	ldr	r3, [pc, #88]	; (22d1c <http_client_init+0xa8>)
   22cc4:	4798      	blx	r3
   22cc6:	65e0      	str	r0, [r4, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
   22cc8:	2800      	cmp	r0, #0
   22cca:	d020      	beq.n	22d0e <http_client_init+0x9a>
		module->alloc_buffer = 1;
   22ccc:	2241      	movs	r2, #65	; 0x41
   22cce:	5ca3      	ldrb	r3, [r4, r2]
   22cd0:	2104      	movs	r1, #4
   22cd2:	430b      	orrs	r3, r1
   22cd4:	54a3      	strb	r3, [r4, r2]
   22cd6:	e7ea      	b.n	22cae <http_client_init+0x3a>
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
   22cd8:	6868      	ldr	r0, [r5, #4]
   22cda:	2300      	movs	r3, #0
   22cdc:	0022      	movs	r2, r4
   22cde:	4910      	ldr	r1, [pc, #64]	; (22d20 <http_client_init+0xac>)
   22ce0:	4d10      	ldr	r5, [pc, #64]	; (22d24 <http_client_init+0xb0>)
   22ce2:	47a8      	blx	r5
   22ce4:	64a0      	str	r0, [r4, #72]	; 0x48
		if (module->timer_id < 0) {
   22ce6:	2800      	cmp	r0, #0
   22ce8:	dae4      	bge.n	22cb4 <http_client_init+0x40>
			return -ENOSPC;
   22cea:	201c      	movs	r0, #28
   22cec:	4240      	negs	r0, r0
   22cee:	e7e6      	b.n	22cbe <http_client_init+0x4a>
		return -EINVAL;
   22cf0:	2016      	movs	r0, #22
   22cf2:	4240      	negs	r0, r0
   22cf4:	e7e3      	b.n	22cbe <http_client_init+0x4a>
   22cf6:	2016      	movs	r0, #22
   22cf8:	4240      	negs	r0, r0
   22cfa:	e7e0      	b.n	22cbe <http_client_init+0x4a>
		return -EINVAL;
   22cfc:	2016      	movs	r0, #22
   22cfe:	4240      	negs	r0, r0
   22d00:	e7dd      	b.n	22cbe <http_client_init+0x4a>
		return -EINVAL;
   22d02:	2016      	movs	r0, #22
   22d04:	4240      	negs	r0, r0
   22d06:	e7da      	b.n	22cbe <http_client_init+0x4a>
		return -EINVAL;
   22d08:	2016      	movs	r0, #22
   22d0a:	4240      	negs	r0, r0
   22d0c:	e7d7      	b.n	22cbe <http_client_init+0x4a>
			return -ENOMEM;
   22d0e:	200c      	movs	r0, #12
   22d10:	4240      	negs	r0, r0
   22d12:	e7d4      	b.n	22cbe <http_client_init+0x4a>
   22d14:	00025d0f 	.word	0x00025d0f
   22d18:	00025cd9 	.word	0x00025cd9
   22d1c:	00025cb1 	.word	0x00025cb1
   22d20:	00022e39 	.word	0x00022e39
   22d24:	00023d01 	.word	0x00023d01

00022d28 <http_client_register_callback>:
	if (module == NULL) {
   22d28:	2800      	cmp	r0, #0
   22d2a:	d002      	beq.n	22d32 <http_client_register_callback+0xa>
	module->cb = callback;
   22d2c:	64c1      	str	r1, [r0, #76]	; 0x4c
	return 0;
   22d2e:	2000      	movs	r0, #0
}
   22d30:	4770      	bx	lr
		return -EINVAL;
   22d32:	2016      	movs	r0, #22
   22d34:	4240      	negs	r0, r0
   22d36:	e7fb      	b.n	22d30 <http_client_register_callback+0x8>

00022d38 <_http_client_clear_conn>:
{
   22d38:	b5f0      	push	{r4, r5, r6, r7, lr}
   22d3a:	b085      	sub	sp, #20
   22d3c:	0004      	movs	r4, r0
   22d3e:	000e      	movs	r6, r1
	if (module->req.entity.close) {
   22d40:	23c0      	movs	r3, #192	; 0xc0
   22d42:	58c3      	ldr	r3, [r0, r3]
   22d44:	2b00      	cmp	r3, #0
   22d46:	d002      	beq.n	22d4e <_http_client_clear_conn+0x16>
		module->req.entity.close(module->req.entity.priv_data);
   22d48:	22c4      	movs	r2, #196	; 0xc4
   22d4a:	5880      	ldr	r0, [r0, r2]
   22d4c:	4798      	blx	r3
	memset(&module->req.entity, 0, sizeof(struct http_entity));
   22d4e:	0020      	movs	r0, r4
   22d50:	30b0      	adds	r0, #176	; 0xb0
   22d52:	2218      	movs	r2, #24
   22d54:	2100      	movs	r1, #0
   22d56:	4b17      	ldr	r3, [pc, #92]	; (22db4 <_http_client_clear_conn+0x7c>)
   22d58:	4798      	blx	r3
	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
   22d5a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   22d5c:	2b00      	cmp	r3, #0
   22d5e:	d124      	bne.n	22daa <_http_client_clear_conn+0x72>
	module_ref_inst[module->sock] = NULL;
   22d60:	2300      	movs	r3, #0
   22d62:	56e3      	ldrsb	r3, [r4, r3]
   22d64:	009b      	lsls	r3, r3, #2
   22d66:	2500      	movs	r5, #0
   22d68:	4a13      	ldr	r2, [pc, #76]	; (22db8 <_http_client_clear_conn+0x80>)
   22d6a:	509d      	str	r5, [r3, r2]
	memset(&module->req, 0, sizeof(struct http_client_req));
   22d6c:	0020      	movs	r0, r4
   22d6e:	306c      	adds	r0, #108	; 0x6c
   22d70:	226c      	movs	r2, #108	; 0x6c
   22d72:	2100      	movs	r1, #0
   22d74:	4f0f      	ldr	r7, [pc, #60]	; (22db4 <_http_client_clear_conn+0x7c>)
   22d76:	47b8      	blx	r7
	memset(&module->resp, 0, sizeof(struct http_client_resp));
   22d78:	0020      	movs	r0, r4
   22d7a:	30d8      	adds	r0, #216	; 0xd8
   22d7c:	2210      	movs	r2, #16
   22d7e:	2100      	movs	r1, #0
   22d80:	47b8      	blx	r7
	module->req.state = STATE_INIT;
   22d82:	66e5      	str	r5, [r4, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   22d84:	23d8      	movs	r3, #216	; 0xd8
   22d86:	50e5      	str	r5, [r4, r3]
	module->sending = 0;
   22d88:	2241      	movs	r2, #65	; 0x41
   22d8a:	5ca3      	ldrb	r3, [r4, r2]
	module->permanent = 0;
   22d8c:	2101      	movs	r1, #1
   22d8e:	438b      	bics	r3, r1
   22d90:	3101      	adds	r1, #1
   22d92:	438b      	bics	r3, r1
   22d94:	54a3      	strb	r3, [r4, r2]
	data.disconnected.reason = reason;
   22d96:	9601      	str	r6, [sp, #4]
	if (module->cb) {
   22d98:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   22d9a:	2b00      	cmp	r3, #0
   22d9c:	d003      	beq.n	22da6 <_http_client_clear_conn+0x6e>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
   22d9e:	aa01      	add	r2, sp, #4
   22da0:	3102      	adds	r1, #2
   22da2:	0020      	movs	r0, r4
   22da4:	4798      	blx	r3
}
   22da6:	b005      	add	sp, #20
   22da8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		close(module->sock);
   22daa:	2000      	movs	r0, #0
   22dac:	5620      	ldrsb	r0, [r4, r0]
   22dae:	4b03      	ldr	r3, [pc, #12]	; (22dbc <_http_client_clear_conn+0x84>)
   22db0:	4798      	blx	r3
   22db2:	e7d5      	b.n	22d60 <_http_client_clear_conn+0x28>
   22db4:	00025d0f 	.word	0x00025d0f
   22db8:	200040f8 	.word	0x200040f8
   22dbc:	0001d2c9 	.word	0x0001d2c9

00022dc0 <http_client_socket_resolve_handler>:
{
   22dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
   22dc2:	b087      	sub	sp, #28
   22dc4:	9000      	str	r0, [sp, #0]
   22dc6:	9101      	str	r1, [sp, #4]
   22dc8:	4c17      	ldr	r4, [pc, #92]	; (22e28 <http_client_socket_resolve_handler+0x68>)
   22dca:	0026      	movs	r6, r4
   22dcc:	361c      	adds	r6, #28
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
   22dce:	4f17      	ldr	r7, [pc, #92]	; (22e2c <http_client_socket_resolve_handler+0x6c>)
   22dd0:	e015      	b.n	22dfe <http_client_socket_resolve_handler+0x3e>
				addr_in.sin_family = AF_INET;
   22dd2:	2302      	movs	r3, #2
   22dd4:	aa02      	add	r2, sp, #8
   22dd6:	8013      	strh	r3, [r2, #0]
				addr_in.sin_port = _htons(module->config.port);
   22dd8:	334e      	adds	r3, #78	; 0x4e
   22dda:	5aeb      	ldrh	r3, [r5, r3]
   22ddc:	021a      	lsls	r2, r3, #8
   22dde:	0a1b      	lsrs	r3, r3, #8
   22de0:	4313      	orrs	r3, r2
   22de2:	aa02      	add	r2, sp, #8
   22de4:	8053      	strh	r3, [r2, #2]
				addr_in.sin_addr.s_addr = server_ip;
   22de6:	9b01      	ldr	r3, [sp, #4]
   22de8:	9303      	str	r3, [sp, #12]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   22dea:	2000      	movs	r0, #0
   22dec:	5628      	ldrsb	r0, [r5, r0]
   22dee:	2210      	movs	r2, #16
   22df0:	a902      	add	r1, sp, #8
   22df2:	4b0f      	ldr	r3, [pc, #60]	; (22e30 <http_client_socket_resolve_handler+0x70>)
   22df4:	4798      	blx	r3
				return;
   22df6:	e015      	b.n	22e24 <http_client_socket_resolve_handler+0x64>
   22df8:	3404      	adds	r4, #4
	for (i = 0; i < TCP_SOCK_MAX; i++) {
   22dfa:	42b4      	cmp	r4, r6
   22dfc:	d012      	beq.n	22e24 <http_client_socket_resolve_handler+0x64>
		if (module_ref_inst[i] != NULL) {
   22dfe:	6825      	ldr	r5, [r4, #0]
   22e00:	2d00      	cmp	r5, #0
   22e02:	d0f9      	beq.n	22df8 <http_client_socket_resolve_handler+0x38>
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
   22e04:	1c69      	adds	r1, r5, #1
   22e06:	9800      	ldr	r0, [sp, #0]
   22e08:	47b8      	blx	r7
   22e0a:	2800      	cmp	r0, #0
   22e0c:	d1f4      	bne.n	22df8 <http_client_socket_resolve_handler+0x38>
   22e0e:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
   22e10:	2b01      	cmp	r3, #1
   22e12:	d1f1      	bne.n	22df8 <http_client_socket_resolve_handler+0x38>
				if (server_ip == 0) { /* Host was not found or was not reachable. */ 
   22e14:	9b01      	ldr	r3, [sp, #4]
   22e16:	2b00      	cmp	r3, #0
   22e18:	d1db      	bne.n	22dd2 <http_client_socket_resolve_handler+0x12>
					_http_client_clear_conn(module, -EHOSTUNREACH);
   22e1a:	2176      	movs	r1, #118	; 0x76
   22e1c:	4249      	negs	r1, r1
   22e1e:	0028      	movs	r0, r5
   22e20:	4b04      	ldr	r3, [pc, #16]	; (22e34 <http_client_socket_resolve_handler+0x74>)
   22e22:	4798      	blx	r3
}
   22e24:	b007      	add	sp, #28
   22e26:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22e28:	200040f8 	.word	0x200040f8
   22e2c:	00026067 	.word	0x00026067
   22e30:	0001d10d 	.word	0x0001d10d
   22e34:	00022d39 	.word	0x00022d39

00022e38 <http_client_timer_callback>:
{
   22e38:	b510      	push	{r4, lr}
	if (module_inst == NULL) {
   22e3a:	2a00      	cmp	r2, #0
   22e3c:	d004      	beq.n	22e48 <http_client_timer_callback+0x10>
	_http_client_clear_conn(module_inst, -ETIME);
   22e3e:	213e      	movs	r1, #62	; 0x3e
   22e40:	4249      	negs	r1, r1
   22e42:	0010      	movs	r0, r2
   22e44:	4b01      	ldr	r3, [pc, #4]	; (22e4c <http_client_timer_callback+0x14>)
   22e46:	4798      	blx	r3
}
   22e48:	bd10      	pop	{r4, pc}
   22e4a:	46c0      	nop			; (mov r8, r8)
   22e4c:	00022d39 	.word	0x00022d39

00022e50 <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
   22e50:	b5f0      	push	{r4, r5, r6, r7, lr}
   22e52:	46de      	mov	lr, fp
   22e54:	4657      	mov	r7, sl
   22e56:	b580      	push	{r7, lr}
   22e58:	b095      	sub	sp, #84	; 0x54
   22e5a:	af02      	add	r7, sp, #8
   22e5c:	0004      	movs	r4, r0
   22e5e:	46eb      	mov	fp, sp
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
   22e60:	2310      	movs	r3, #16
   22e62:	2208      	movs	r2, #8
   22e64:	18ba      	adds	r2, r7, r2
   22e66:	18d2      	adds	r2, r2, r3
   22e68:	4bb1      	ldr	r3, [pc, #708]	; (23130 <_http_client_request+0x2e0>)
   22e6a:	cb23      	ldmia	r3!, {r0, r1, r5}
   22e6c:	c223      	stmia	r2!, {r0, r1, r5}
   22e6e:	681b      	ldr	r3, [r3, #0]
   22e70:	6013      	str	r3, [r2, #0]
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
   22e72:	6e62      	ldr	r2, [r4, #100]	; 0x64
   22e74:	1dd3      	adds	r3, r2, #7
   22e76:	08db      	lsrs	r3, r3, #3
   22e78:	00db      	lsls	r3, r3, #3
   22e7a:	4669      	mov	r1, sp
   22e7c:	1acb      	subs	r3, r1, r3
   22e7e:	469d      	mov	sp, r3
   22e80:	ae02      	add	r6, sp, #8

	if (module == NULL) {
   22e82:	2c00      	cmp	r4, #0
   22e84:	d100      	bne.n	22e88 <_http_client_request+0x38>
   22e86:	e1f0      	b.n	2326a <_http_client_request+0x41a>
		return;
	}

	if (module->sending != 0) {
   22e88:	2341      	movs	r3, #65	; 0x41
   22e8a:	5ce3      	ldrb	r3, [r4, r3]
   22e8c:	07db      	lsls	r3, r3, #31
   22e8e:	d500      	bpl.n	22e92 <_http_client_request+0x42>
   22e90:	e1eb      	b.n	2326a <_http_client_request+0x41a>
		return;
	}

	entity = &module->req.entity;

	switch (module->req.state) {
   22e92:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   22e94:	2b03      	cmp	r3, #3
   22e96:	d004      	beq.n	22ea2 <_http_client_request+0x52>
   22e98:	2b04      	cmp	r3, #4
   22e9a:	d100      	bne.n	22e9e <_http_client_request+0x4e>
   22e9c:	e120      	b.n	230e0 <_http_client_request+0x290>
   22e9e:	46dd      	mov	sp, fp
   22ea0:	e1e4      	b.n	2326c <_http_client_request+0x41c>
	case STATE_REQ_SEND_HEADER:
		/* Initializing variables. */
		module->req.content_length = 0;
   22ea2:	2300      	movs	r3, #0
   22ea4:	21cc      	movs	r1, #204	; 0xcc
   22ea6:	5063      	str	r3, [r4, r1]
		module->req.sent_length = 0;
   22ea8:	3104      	adds	r1, #4
   22eaa:	5063      	str	r3, [r4, r1]

		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
   22eac:	9400      	str	r4, [sp, #0]
   22eae:	4ba1      	ldr	r3, [pc, #644]	; (23134 <_http_client_request+0x2e4>)
   22eb0:	0031      	movs	r1, r6
   22eb2:	202c      	movs	r0, #44	; 0x2c
   22eb4:	2508      	movs	r5, #8
   22eb6:	46ac      	mov	ip, r5
   22eb8:	44bc      	add	ip, r7
   22eba:	4460      	add	r0, ip
   22ebc:	4d9e      	ldr	r5, [pc, #632]	; (23138 <_http_client_request+0x2e8>)
   22ebe:	47a8      	blx	r5
		/* Write Method. */
		if (module->req.method == HTTP_METHOD_GET) {
   22ec0:	23c8      	movs	r3, #200	; 0xc8
   22ec2:	5ce3      	ldrb	r3, [r4, r3]
   22ec4:	2b01      	cmp	r3, #1
   22ec6:	d100      	bne.n	22eca <_http_client_request+0x7a>
   22ec8:	e0a9      	b.n	2301e <_http_client_request+0x1ce>
			stream_writer_send_buffer(&writer, "GET ", 4);
		} else if (module->req.method == HTTP_METHOD_POST) {
   22eca:	2b02      	cmp	r3, #2
   22ecc:	d100      	bne.n	22ed0 <_http_client_request+0x80>
   22ece:	e0af      	b.n	23030 <_http_client_request+0x1e0>
			stream_writer_send_buffer(&writer, "POST ", 5);
		} else if (module->req.method == HTTP_METHOD_DELETE) {
   22ed0:	2b03      	cmp	r3, #3
   22ed2:	d100      	bne.n	22ed6 <_http_client_request+0x86>
   22ed4:	e0b5      	b.n	23042 <_http_client_request+0x1f2>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
		} else if (module->req.method == HTTP_METHOD_PUT) {
   22ed6:	2b04      	cmp	r3, #4
   22ed8:	d100      	bne.n	22edc <_http_client_request+0x8c>
   22eda:	e0bb      	b.n	23054 <_http_client_request+0x204>
			stream_writer_send_buffer(&writer, "PUT ", 4);
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
   22edc:	2b05      	cmp	r3, #5
   22ede:	d100      	bne.n	22ee2 <_http_client_request+0x92>
   22ee0:	e0c1      	b.n	23066 <_http_client_request+0x216>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
		} else if (module->req.method == HTTP_METHOD_HEAD) {
   22ee2:	2b06      	cmp	r3, #6
   22ee4:	d100      	bne.n	22ee8 <_http_client_request+0x98>
   22ee6:	e0c7      	b.n	23078 <_http_client_request+0x228>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
		}

		/* Write URI. */
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
   22ee8:	0025      	movs	r5, r4
   22eea:	3570      	adds	r5, #112	; 0x70
   22eec:	0028      	movs	r0, r5
   22eee:	4b93      	ldr	r3, [pc, #588]	; (2313c <_http_client_request+0x2ec>)
   22ef0:	469a      	mov	sl, r3
   22ef2:	4798      	blx	r3
   22ef4:	0002      	movs	r2, r0
   22ef6:	0029      	movs	r1, r5
   22ef8:	232c      	movs	r3, #44	; 0x2c
   22efa:	2008      	movs	r0, #8
   22efc:	1838      	adds	r0, r7, r0
   22efe:	18c0      	adds	r0, r0, r3
   22f00:	4d8f      	ldr	r5, [pc, #572]	; (23140 <_http_client_request+0x2f0>)
   22f02:	47a8      	blx	r5

		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
   22f04:	220b      	movs	r2, #11
   22f06:	498f      	ldr	r1, [pc, #572]	; (23144 <_http_client_request+0x2f4>)
   22f08:	232c      	movs	r3, #44	; 0x2c
   22f0a:	2008      	movs	r0, #8
   22f0c:	1838      	adds	r0, r7, r0
   22f0e:	18c0      	adds	r0, r0, r3
   22f10:	47a8      	blx	r5

		/* Write HTTP headers. */
		/* Default value. */
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
   22f12:	220c      	movs	r2, #12
   22f14:	498c      	ldr	r1, [pc, #560]	; (23148 <_http_client_request+0x2f8>)
   22f16:	232c      	movs	r3, #44	; 0x2c
   22f18:	2008      	movs	r0, #8
   22f1a:	1838      	adds	r0, r7, r0
   22f1c:	18c0      	adds	r0, r0, r3
   22f1e:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
   22f20:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   22f22:	607b      	str	r3, [r7, #4]
   22f24:	0018      	movs	r0, r3
   22f26:	47d0      	blx	sl
   22f28:	0002      	movs	r2, r0
   22f2a:	6879      	ldr	r1, [r7, #4]
   22f2c:	232c      	movs	r3, #44	; 0x2c
   22f2e:	2008      	movs	r0, #8
   22f30:	1838      	adds	r0, r7, r0
   22f32:	18c0      	adds	r0, r0, r3
   22f34:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   22f36:	2202      	movs	r2, #2
   22f38:	4984      	ldr	r1, [pc, #528]	; (2314c <_http_client_request+0x2fc>)
   22f3a:	232c      	movs	r3, #44	; 0x2c
   22f3c:	2008      	movs	r0, #8
   22f3e:	1838      	adds	r0, r7, r0
   22f40:	18c0      	adds	r0, r0, r3
   22f42:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
   22f44:	2206      	movs	r2, #6
   22f46:	4982      	ldr	r1, [pc, #520]	; (23150 <_http_client_request+0x300>)
   22f48:	232c      	movs	r3, #44	; 0x2c
   22f4a:	2008      	movs	r0, #8
   22f4c:	1838      	adds	r0, r7, r0
   22f4e:	18c0      	adds	r0, r0, r3
   22f50:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
   22f52:	1c63      	adds	r3, r4, #1
   22f54:	607b      	str	r3, [r7, #4]
   22f56:	0018      	movs	r0, r3
   22f58:	47d0      	blx	sl
   22f5a:	0002      	movs	r2, r0
   22f5c:	6879      	ldr	r1, [r7, #4]
   22f5e:	232c      	movs	r3, #44	; 0x2c
   22f60:	2008      	movs	r0, #8
   22f62:	1838      	adds	r0, r7, r0
   22f64:	18c0      	adds	r0, r0, r3
   22f66:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   22f68:	2202      	movs	r2, #2
   22f6a:	4978      	ldr	r1, [pc, #480]	; (2314c <_http_client_request+0x2fc>)
   22f6c:	232c      	movs	r3, #44	; 0x2c
   22f6e:	2008      	movs	r0, #8
   22f70:	1838      	adds	r0, r7, r0
   22f72:	18c0      	adds	r0, r0, r3
   22f74:	47a8      	blx	r5
		/* It supported persistent connection. */
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
   22f76:	2218      	movs	r2, #24
   22f78:	4976      	ldr	r1, [pc, #472]	; (23154 <_http_client_request+0x304>)
   22f7a:	232c      	movs	r3, #44	; 0x2c
   22f7c:	2008      	movs	r0, #8
   22f7e:	1838      	adds	r0, r7, r0
   22f80:	18c0      	adds	r0, r0, r3
   22f82:	47a8      	blx	r5
		/* Notify supported encoding type and character set. */
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
   22f84:	2213      	movs	r2, #19
   22f86:	4974      	ldr	r1, [pc, #464]	; (23158 <_http_client_request+0x308>)
   22f88:	232c      	movs	r3, #44	; 0x2c
   22f8a:	2008      	movs	r0, #8
   22f8c:	1838      	adds	r0, r7, r0
   22f8e:	18c0      	adds	r0, r0, r3
   22f90:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
   22f92:	2217      	movs	r2, #23
   22f94:	4971      	ldr	r1, [pc, #452]	; (2315c <_http_client_request+0x30c>)
   22f96:	232c      	movs	r3, #44	; 0x2c
   22f98:	2008      	movs	r0, #8
   22f9a:	1838      	adds	r0, r7, r0
   22f9c:	18c0      	adds	r0, r0, r3
   22f9e:	47a8      	blx	r5

		if (entity->read != NULL) {
   22fa0:	0023      	movs	r3, r4
   22fa2:	33b0      	adds	r3, #176	; 0xb0
   22fa4:	68db      	ldr	r3, [r3, #12]
   22fa6:	2b00      	cmp	r3, #0
   22fa8:	d07b      	beq.n	230a2 <_http_client_request+0x252>
			/* HTTP Entity is exist. */
			if (entity->is_chunked) {
   22faa:	23b0      	movs	r3, #176	; 0xb0
   22fac:	5ce3      	ldrb	r3, [r4, r3]
   22fae:	2b00      	cmp	r3, #0
   22fb0:	d16b      	bne.n	2308a <_http_client_request+0x23a>
				/* Chunked mode. */
				module->req.content_length = -1;
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
			} else if(entity->get_contents_length) {
   22fb2:	0023      	movs	r3, r4
   22fb4:	33b0      	adds	r3, #176	; 0xb0
   22fb6:	689b      	ldr	r3, [r3, #8]
   22fb8:	2b00      	cmp	r3, #0
   22fba:	d072      	beq.n	230a2 <_http_client_request+0x252>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
   22fbc:	0022      	movs	r2, r4
   22fbe:	32b0      	adds	r2, #176	; 0xb0
   22fc0:	6950      	ldr	r0, [r2, #20]
   22fc2:	4798      	blx	r3
   22fc4:	23cc      	movs	r3, #204	; 0xcc
   22fc6:	50e0      	str	r0, [r4, r3]
				if (module->req.content_length < 0) {
   22fc8:	2800      	cmp	r0, #0
   22fca:	da00      	bge.n	22fce <_http_client_request+0x17e>
   22fcc:	e0ac      	b.n	23128 <_http_client_request+0x2d8>
					/* Error was occurred. */
					/* Does not send any entity. */
					module->req.content_length = 0;
				} else {
					sprintf(length, "%u", (unsigned int)module->req.content_length);
   22fce:	0002      	movs	r2, r0
   22fd0:	4963      	ldr	r1, [pc, #396]	; (23160 <_http_client_request+0x310>)
   22fd2:	2320      	movs	r3, #32
   22fd4:	2008      	movs	r0, #8
   22fd6:	1838      	adds	r0, r7, r0
   22fd8:	18c0      	adds	r0, r0, r3
   22fda:	4b62      	ldr	r3, [pc, #392]	; (23164 <_http_client_request+0x314>)
   22fdc:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
   22fde:	2210      	movs	r2, #16
   22fe0:	4961      	ldr	r1, [pc, #388]	; (23168 <_http_client_request+0x318>)
   22fe2:	232c      	movs	r3, #44	; 0x2c
   22fe4:	2008      	movs	r0, #8
   22fe6:	1838      	adds	r0, r7, r0
   22fe8:	18c0      	adds	r0, r0, r3
   22fea:	4d55      	ldr	r5, [pc, #340]	; (23140 <_http_client_request+0x2f0>)
   22fec:	47a8      	blx	r5
					stream_writer_send_buffer(&writer, length, strlen(length));
   22fee:	2320      	movs	r3, #32
   22ff0:	2208      	movs	r2, #8
   22ff2:	18ba      	adds	r2, r7, r2
   22ff4:	18d0      	adds	r0, r2, r3
   22ff6:	4b51      	ldr	r3, [pc, #324]	; (2313c <_http_client_request+0x2ec>)
   22ff8:	4798      	blx	r3
   22ffa:	0002      	movs	r2, r0
   22ffc:	2320      	movs	r3, #32
   22ffe:	2108      	movs	r1, #8
   23000:	1879      	adds	r1, r7, r1
   23002:	18c9      	adds	r1, r1, r3
   23004:	330c      	adds	r3, #12
   23006:	2008      	movs	r0, #8
   23008:	1838      	adds	r0, r7, r0
   2300a:	18c0      	adds	r0, r0, r3
   2300c:	47a8      	blx	r5
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   2300e:	2202      	movs	r2, #2
   23010:	494e      	ldr	r1, [pc, #312]	; (2314c <_http_client_request+0x2fc>)
   23012:	232c      	movs	r3, #44	; 0x2c
   23014:	2008      	movs	r0, #8
   23016:	1838      	adds	r0, r7, r0
   23018:	18c0      	adds	r0, r0, r3
   2301a:	47a8      	blx	r5
   2301c:	e041      	b.n	230a2 <_http_client_request+0x252>
			stream_writer_send_buffer(&writer, "GET ", 4);
   2301e:	2204      	movs	r2, #4
   23020:	4952      	ldr	r1, [pc, #328]	; (2316c <_http_client_request+0x31c>)
   23022:	332b      	adds	r3, #43	; 0x2b
   23024:	2008      	movs	r0, #8
   23026:	1838      	adds	r0, r7, r0
   23028:	18c0      	adds	r0, r0, r3
   2302a:	4b45      	ldr	r3, [pc, #276]	; (23140 <_http_client_request+0x2f0>)
   2302c:	4798      	blx	r3
   2302e:	e75b      	b.n	22ee8 <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "POST ", 5);
   23030:	2205      	movs	r2, #5
   23032:	494f      	ldr	r1, [pc, #316]	; (23170 <_http_client_request+0x320>)
   23034:	332a      	adds	r3, #42	; 0x2a
   23036:	2008      	movs	r0, #8
   23038:	1838      	adds	r0, r7, r0
   2303a:	18c0      	adds	r0, r0, r3
   2303c:	4b40      	ldr	r3, [pc, #256]	; (23140 <_http_client_request+0x2f0>)
   2303e:	4798      	blx	r3
   23040:	e752      	b.n	22ee8 <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
   23042:	2207      	movs	r2, #7
   23044:	494b      	ldr	r1, [pc, #300]	; (23174 <_http_client_request+0x324>)
   23046:	3329      	adds	r3, #41	; 0x29
   23048:	2008      	movs	r0, #8
   2304a:	1838      	adds	r0, r7, r0
   2304c:	18c0      	adds	r0, r0, r3
   2304e:	4b3c      	ldr	r3, [pc, #240]	; (23140 <_http_client_request+0x2f0>)
   23050:	4798      	blx	r3
   23052:	e749      	b.n	22ee8 <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "PUT ", 4);
   23054:	2204      	movs	r2, #4
   23056:	4948      	ldr	r1, [pc, #288]	; (23178 <_http_client_request+0x328>)
   23058:	3328      	adds	r3, #40	; 0x28
   2305a:	2008      	movs	r0, #8
   2305c:	1838      	adds	r0, r7, r0
   2305e:	18c0      	adds	r0, r0, r3
   23060:	4b37      	ldr	r3, [pc, #220]	; (23140 <_http_client_request+0x2f0>)
   23062:	4798      	blx	r3
   23064:	e740      	b.n	22ee8 <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
   23066:	2208      	movs	r2, #8
   23068:	4944      	ldr	r1, [pc, #272]	; (2317c <_http_client_request+0x32c>)
   2306a:	3327      	adds	r3, #39	; 0x27
   2306c:	2008      	movs	r0, #8
   2306e:	1838      	adds	r0, r7, r0
   23070:	18c0      	adds	r0, r0, r3
   23072:	4b33      	ldr	r3, [pc, #204]	; (23140 <_http_client_request+0x2f0>)
   23074:	4798      	blx	r3
   23076:	e737      	b.n	22ee8 <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
   23078:	2205      	movs	r2, #5
   2307a:	4941      	ldr	r1, [pc, #260]	; (23180 <_http_client_request+0x330>)
   2307c:	3326      	adds	r3, #38	; 0x26
   2307e:	2008      	movs	r0, #8
   23080:	1838      	adds	r0, r7, r0
   23082:	18c0      	adds	r0, r0, r3
   23084:	4b2e      	ldr	r3, [pc, #184]	; (23140 <_http_client_request+0x2f0>)
   23086:	4798      	blx	r3
   23088:	e72e      	b.n	22ee8 <_http_client_request+0x98>
				module->req.content_length = -1;
   2308a:	2201      	movs	r2, #1
   2308c:	4252      	negs	r2, r2
   2308e:	23cc      	movs	r3, #204	; 0xcc
   23090:	50e2      	str	r2, [r4, r3]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
   23092:	321d      	adds	r2, #29
   23094:	493b      	ldr	r1, [pc, #236]	; (23184 <_http_client_request+0x334>)
   23096:	3ba0      	subs	r3, #160	; 0xa0
   23098:	2008      	movs	r0, #8
   2309a:	1838      	adds	r0, r7, r0
   2309c:	18c0      	adds	r0, r0, r3
   2309e:	4b28      	ldr	r3, [pc, #160]	; (23140 <_http_client_request+0x2f0>)
   230a0:	4798      	blx	r3
				}
			}
		}
		if (module->req.ext_header != NULL ) {
   230a2:	23d4      	movs	r3, #212	; 0xd4
   230a4:	58e5      	ldr	r5, [r4, r3]
   230a6:	2d00      	cmp	r5, #0
   230a8:	d00a      	beq.n	230c0 <_http_client_request+0x270>
			stream_writer_send_buffer(&writer,
   230aa:	0028      	movs	r0, r5
   230ac:	4b23      	ldr	r3, [pc, #140]	; (2313c <_http_client_request+0x2ec>)
   230ae:	4798      	blx	r3
   230b0:	0002      	movs	r2, r0
   230b2:	0029      	movs	r1, r5
   230b4:	232c      	movs	r3, #44	; 0x2c
   230b6:	2008      	movs	r0, #8
   230b8:	1838      	adds	r0, r7, r0
   230ba:	18c0      	adds	r0, r0, r3
   230bc:	4b20      	ldr	r3, [pc, #128]	; (23140 <_http_client_request+0x2f0>)
   230be:	4798      	blx	r3
				module->req.ext_header,
				strlen(module->req.ext_header));
		}

		//See the module->header
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   230c0:	2202      	movs	r2, #2
   230c2:	4922      	ldr	r1, [pc, #136]	; (2314c <_http_client_request+0x2fc>)
   230c4:	232c      	movs	r3, #44	; 0x2c
   230c6:	2008      	movs	r0, #8
   230c8:	1838      	adds	r0, r7, r0
   230ca:	18c0      	adds	r0, r0, r3
   230cc:	4b1c      	ldr	r3, [pc, #112]	; (23140 <_http_client_request+0x2f0>)
   230ce:	4798      	blx	r3
		stream_writer_send_remain(&writer);
   230d0:	232c      	movs	r3, #44	; 0x2c
   230d2:	2208      	movs	r2, #8
   230d4:	18ba      	adds	r2, r7, r2
   230d6:	18d0      	adds	r0, r2, r3
   230d8:	4b2b      	ldr	r3, [pc, #172]	; (23188 <_http_client_request+0x338>)
   230da:	4798      	blx	r3

		module->req.state = STATE_REQ_SEND_ENTITY;
   230dc:	2304      	movs	r3, #4
   230de:	66e3      	str	r3, [r4, #108]	; 0x6c
		/* Send first part of entity. */
	case STATE_REQ_SEND_ENTITY:
		if (module->req.content_length < 0 && entity->read) {
   230e0:	23cc      	movs	r3, #204	; 0xcc
   230e2:	58e2      	ldr	r2, [r4, r3]
   230e4:	2a00      	cmp	r2, #0
   230e6:	db51      	blt.n	2318c <_http_client_request+0x33c>
				if (module->cb) {
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
				}
				break;
			}
		} else if (module->req.content_length > 0 && entity->read) {
   230e8:	dc00      	bgt.n	230ec <_http_client_request+0x29c>
   230ea:	e0f0      	b.n	232ce <_http_client_request+0x47e>
   230ec:	0023      	movs	r3, r4
   230ee:	33b0      	adds	r3, #176	; 0xb0
   230f0:	68dd      	ldr	r5, [r3, #12]
   230f2:	2d00      	cmp	r5, #0
   230f4:	d100      	bne.n	230f8 <_http_client_request+0x2a8>
   230f6:	e0ea      	b.n	232ce <_http_client_request+0x47e>
			/* Send entity. */
			if (module->req.sent_length >= module->req.content_length) {
   230f8:	23d0      	movs	r3, #208	; 0xd0
   230fa:	58e3      	ldr	r3, [r4, r3]
   230fc:	429a      	cmp	r2, r3
   230fe:	dd00      	ble.n	23102 <_http_client_request+0x2b2>
   23100:	e0ba      	b.n	23278 <_http_client_request+0x428>
				/* Complete to send the buffer. */
				if (module->req.entity.close) {
   23102:	23c0      	movs	r3, #192	; 0xc0
   23104:	58e3      	ldr	r3, [r4, r3]
   23106:	2b00      	cmp	r3, #0
   23108:	d002      	beq.n	23110 <_http_client_request+0x2c0>
					module->req.entity.close(module->req.entity.priv_data);
   2310a:	22c4      	movs	r2, #196	; 0xc4
   2310c:	58a0      	ldr	r0, [r4, r2]
   2310e:	4798      	blx	r3
				}
				module->req.state = STATE_SOCK_CONNECTED;
   23110:	2302      	movs	r3, #2
   23112:	66e3      	str	r3, [r4, #108]	; 0x6c
				if (module->cb) {
   23114:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   23116:	2b00      	cmp	r3, #0
   23118:	d100      	bne.n	2311c <_http_client_request+0x2cc>
   2311a:	e6c0      	b.n	22e9e <_http_client_request+0x4e>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   2311c:	220c      	movs	r2, #12
   2311e:	18ba      	adds	r2, r7, r2
   23120:	2101      	movs	r1, #1
   23122:	0020      	movs	r0, r4
   23124:	4798      	blx	r3
   23126:	e6ba      	b.n	22e9e <_http_client_request+0x4e>
					module->req.content_length = 0;
   23128:	2200      	movs	r2, #0
   2312a:	50e2      	str	r2, [r4, r3]
   2312c:	e7b9      	b.n	230a2 <_http_client_request+0x252>
   2312e:	46c0      	nop			; (mov r8, r8)
   23130:	0002b6ac 	.word	0x0002b6ac
   23134:	00022be1 	.word	0x00022be1
   23138:	00023bad 	.word	0x00023bad
   2313c:	000260c7 	.word	0x000260c7
   23140:	00023c01 	.word	0x00023c01
   23144:	0002b720 	.word	0x0002b720
   23148:	0002b72c 	.word	0x0002b72c
   2314c:	00027bfc 	.word	0x00027bfc
   23150:	0002b73c 	.word	0x0002b73c
   23154:	0002b744 	.word	0x0002b744
   23158:	0002b760 	.word	0x0002b760
   2315c:	0002b774 	.word	0x0002b774
   23160:	0002b7ac 	.word	0x0002b7ac
   23164:	00025fcd 	.word	0x00025fcd
   23168:	0002b7b0 	.word	0x0002b7b0
   2316c:	0002b6ec 	.word	0x0002b6ec
   23170:	0002b6f4 	.word	0x0002b6f4
   23174:	0002b6fc 	.word	0x0002b6fc
   23178:	0002b704 	.word	0x0002b704
   2317c:	0002b70c 	.word	0x0002b70c
   23180:	0002b718 	.word	0x0002b718
   23184:	0002b78c 	.word	0x0002b78c
   23188:	00023bbd 	.word	0x00023bbd
		if (module->req.content_length < 0 && entity->read) {
   2318c:	0023      	movs	r3, r4
   2318e:	33b0      	adds	r3, #176	; 0xb0
   23190:	68dd      	ldr	r5, [r3, #12]
   23192:	2d00      	cmp	r5, #0
   23194:	d100      	bne.n	23198 <_http_client_request+0x348>
   23196:	e09a      	b.n	232ce <_http_client_request+0x47e>
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   23198:	23d0      	movs	r3, #208	; 0xd0
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   2319a:	58e3      	ldr	r3, [r4, r3]
   2319c:	6e62      	ldr	r2, [r4, #100]	; 0x64
   2319e:	3a07      	subs	r2, #7
   231a0:	1d71      	adds	r1, r6, #5
   231a2:	0020      	movs	r0, r4
   231a4:	30b0      	adds	r0, #176	; 0xb0
   231a6:	6940      	ldr	r0, [r0, #20]
   231a8:	47a8      	blx	r5
   231aa:	0005      	movs	r5, r0
   231ac:	43c3      	mvns	r3, r0
   231ae:	17db      	asrs	r3, r3, #31
   231b0:	401d      	ands	r5, r3
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
   231b2:	220a      	movs	r2, #10
   231b4:	7132      	strb	r2, [r6, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
   231b6:	210d      	movs	r1, #13
   231b8:	70f1      	strb	r1, [r6, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
   231ba:	1973      	adds	r3, r6, r5
   231bc:	7159      	strb	r1, [r3, #5]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
   231be:	719a      	strb	r2, [r3, #6]
				*ptr = CH_LUT[size % 16];
   231c0:	230f      	movs	r3, #15
   231c2:	402b      	ands	r3, r5
   231c4:	3206      	adds	r2, #6
   231c6:	3905      	subs	r1, #5
   231c8:	468c      	mov	ip, r1
   231ca:	44bc      	add	ip, r7
   231cc:	4462      	add	r2, ip
   231ce:	5cd3      	ldrb	r3, [r2, r3]
   231d0:	70b3      	strb	r3, [r6, #2]
				ptr = buffer + 2;
   231d2:	1cb1      	adds	r1, r6, #2
			if (size >= 0x10) {
   231d4:	2d0f      	cmp	r5, #15
   231d6:	dd0d      	ble.n	231f4 <_http_client_request+0x3a4>
				ptr = buffer + 1;
   231d8:	1c71      	adds	r1, r6, #1
				*ptr = CH_LUT[(size / 0x10) % 16];
   231da:	17eb      	asrs	r3, r5, #31
   231dc:	220f      	movs	r2, #15
   231de:	4013      	ands	r3, r2
   231e0:	195b      	adds	r3, r3, r5
   231e2:	111b      	asrs	r3, r3, #4
   231e4:	4013      	ands	r3, r2
   231e6:	3201      	adds	r2, #1
   231e8:	2008      	movs	r0, #8
   231ea:	4684      	mov	ip, r0
   231ec:	44bc      	add	ip, r7
   231ee:	4462      	add	r2, ip
   231f0:	5cd3      	ldrb	r3, [r2, r3]
   231f2:	7073      	strb	r3, [r6, #1]
			if (size >= 0x100) {
   231f4:	2dff      	cmp	r5, #255	; 0xff
   231f6:	dd0d      	ble.n	23214 <_http_client_request+0x3c4>
				*ptr = CH_LUT[(size / 0x100) % 16];
   231f8:	17ea      	asrs	r2, r5, #31
   231fa:	23ff      	movs	r3, #255	; 0xff
   231fc:	4013      	ands	r3, r2
   231fe:	195b      	adds	r3, r3, r5
   23200:	051b      	lsls	r3, r3, #20
   23202:	0f1b      	lsrs	r3, r3, #28
   23204:	2210      	movs	r2, #16
   23206:	2108      	movs	r1, #8
   23208:	468c      	mov	ip, r1
   2320a:	44bc      	add	ip, r7
   2320c:	4462      	add	r2, ip
   2320e:	5cd3      	ldrb	r3, [r2, r3]
   23210:	7033      	strb	r3, [r6, #0]
				ptr = buffer;
   23212:	0031      	movs	r1, r6
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
   23214:	1cca      	adds	r2, r1, #3
   23216:	1b92      	subs	r2, r2, r6
   23218:	1d2b      	adds	r3, r5, #4
   2321a:	18d2      	adds	r2, r2, r3
   2321c:	b292      	uxth	r2, r2
   2321e:	2000      	movs	r0, #0
   23220:	5620      	ldrsb	r0, [r4, r0]
   23222:	2300      	movs	r3, #0
   23224:	4e30      	ldr	r6, [pc, #192]	; (232e8 <_http_client_request+0x498>)
   23226:	47b0      	blx	r6
   23228:	2800      	cmp	r0, #0
   2322a:	db19      	blt.n	23260 <_http_client_request+0x410>
			module->req.sent_length += size;
   2322c:	22d0      	movs	r2, #208	; 0xd0
   2322e:	58a3      	ldr	r3, [r4, r2]
   23230:	195b      	adds	r3, r3, r5
   23232:	50a3      	str	r3, [r4, r2]
			if(size == 0) {
   23234:	2d00      	cmp	r5, #0
   23236:	d000      	beq.n	2323a <_http_client_request+0x3ea>
   23238:	e631      	b.n	22e9e <_http_client_request+0x4e>
				if (module->req.entity.close) {
   2323a:	23c0      	movs	r3, #192	; 0xc0
   2323c:	58e3      	ldr	r3, [r4, r3]
   2323e:	2b00      	cmp	r3, #0
   23240:	d002      	beq.n	23248 <_http_client_request+0x3f8>
					module->req.entity.close(module->req.entity.priv_data);
   23242:	3a0c      	subs	r2, #12
   23244:	58a0      	ldr	r0, [r4, r2]
   23246:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   23248:	2302      	movs	r3, #2
   2324a:	66e3      	str	r3, [r4, #108]	; 0x6c
				if (module->cb) {
   2324c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   2324e:	2b00      	cmp	r3, #0
   23250:	d100      	bne.n	23254 <_http_client_request+0x404>
   23252:	e624      	b.n	22e9e <_http_client_request+0x4e>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   23254:	220c      	movs	r2, #12
   23256:	18ba      	adds	r2, r7, r2
   23258:	2101      	movs	r1, #1
   2325a:	0020      	movs	r0, r4
   2325c:	4798      	blx	r3
   2325e:	e61e      	b.n	22e9e <_http_client_request+0x4e>
				_http_client_clear_conn(module, -EIO);
   23260:	2105      	movs	r1, #5
   23262:	4249      	negs	r1, r1
   23264:	0020      	movs	r0, r4
   23266:	4b21      	ldr	r3, [pc, #132]	; (232ec <_http_client_request+0x49c>)
   23268:	4798      	blx	r3
   2326a:	46dd      	mov	sp, fp
		break;
	default:
		/* Invalid status. */
		break;
	}
}
   2326c:	46bd      	mov	sp, r7
   2326e:	b013      	add	sp, #76	; 0x4c
   23270:	bc0c      	pop	{r2, r3}
   23272:	4692      	mov	sl, r2
   23274:	469b      	mov	fp, r3
   23276:	bdf0      	pop	{r4, r5, r6, r7, pc}
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
   23278:	0022      	movs	r2, r4
   2327a:	32b0      	adds	r2, #176	; 0xb0
   2327c:	6950      	ldr	r0, [r2, #20]
   2327e:	6e62      	ldr	r2, [r4, #100]	; 0x64
   23280:	0031      	movs	r1, r6
   23282:	47a8      	blx	r5
			if (size < 0) {
   23284:	2800      	cmp	r0, #0
   23286:	db16      	blt.n	232b6 <_http_client_request+0x466>
				if (size > module->req.content_length - module->req.sent_length) {
   23288:	23cc      	movs	r3, #204	; 0xcc
   2328a:	58e5      	ldr	r5, [r4, r3]
   2328c:	3304      	adds	r3, #4
   2328e:	58e3      	ldr	r3, [r4, r3]
   23290:	1aed      	subs	r5, r5, r3
   23292:	4285      	cmp	r5, r0
   23294:	dd00      	ble.n	23298 <_http_client_request+0x448>
   23296:	0005      	movs	r5, r0
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
   23298:	b2aa      	uxth	r2, r5
   2329a:	2000      	movs	r0, #0
   2329c:	5620      	ldrsb	r0, [r4, r0]
   2329e:	2300      	movs	r3, #0
   232a0:	0031      	movs	r1, r6
   232a2:	4e11      	ldr	r6, [pc, #68]	; (232e8 <_http_client_request+0x498>)
   232a4:	47b0      	blx	r6
   232a6:	2800      	cmp	r0, #0
   232a8:	db0b      	blt.n	232c2 <_http_client_request+0x472>
				module->req.sent_length += size;
   232aa:	23d0      	movs	r3, #208	; 0xd0
   232ac:	58e2      	ldr	r2, [r4, r3]
   232ae:	4694      	mov	ip, r2
   232b0:	4465      	add	r5, ip
   232b2:	50e5      	str	r5, [r4, r3]
   232b4:	e5f3      	b.n	22e9e <_http_client_request+0x4e>
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
   232b6:	2105      	movs	r1, #5
   232b8:	4249      	negs	r1, r1
   232ba:	0020      	movs	r0, r4
   232bc:	4b0b      	ldr	r3, [pc, #44]	; (232ec <_http_client_request+0x49c>)
   232be:	4798      	blx	r3
   232c0:	e5ed      	b.n	22e9e <_http_client_request+0x4e>
					_http_client_clear_conn(module, -EIO);
   232c2:	2105      	movs	r1, #5
   232c4:	4249      	negs	r1, r1
   232c6:	0020      	movs	r0, r4
   232c8:	4b08      	ldr	r3, [pc, #32]	; (232ec <_http_client_request+0x49c>)
   232ca:	4798      	blx	r3
					return;
   232cc:	e7cd      	b.n	2326a <_http_client_request+0x41a>
			module->req.state = STATE_SOCK_CONNECTED;
   232ce:	2302      	movs	r3, #2
   232d0:	66e3      	str	r3, [r4, #108]	; 0x6c
			if (module->cb) {
   232d2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   232d4:	2b00      	cmp	r3, #0
   232d6:	d100      	bne.n	232da <_http_client_request+0x48a>
   232d8:	e5e1      	b.n	22e9e <_http_client_request+0x4e>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   232da:	220c      	movs	r2, #12
   232dc:	18ba      	adds	r2, r7, r2
   232de:	2101      	movs	r1, #1
   232e0:	0020      	movs	r0, r4
   232e2:	4798      	blx	r3
   232e4:	e5db      	b.n	22e9e <_http_client_request+0x4e>
   232e6:	46c0      	nop			; (mov r8, r8)
   232e8:	0001d19d 	.word	0x0001d19d
   232ec:	00022d39 	.word	0x00022d39

000232f0 <http_client_send_request>:
{
   232f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   232f2:	46d6      	mov	lr, sl
   232f4:	b500      	push	{lr}
   232f6:	b088      	sub	sp, #32
   232f8:	0004      	movs	r4, r0
   232fa:	000f      	movs	r7, r1
   232fc:	4692      	mov	sl, r2
   232fe:	9303      	str	r3, [sp, #12]
	if (module == NULL) {
   23300:	2800      	cmp	r0, #0
   23302:	d100      	bne.n	23306 <http_client_send_request+0x16>
   23304:	e0d3      	b.n	234ae <http_client_send_request+0x1be>
	if (module->req.state > STATE_SOCK_CONNECTED) {
   23306:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   23308:	2b02      	cmp	r3, #2
   2330a:	d900      	bls.n	2330e <http_client_send_request+0x1e>
   2330c:	e0d3      	b.n	234b6 <http_client_send_request+0x1c6>
	if (!strncmp(url, "http://", 7)) {
   2330e:	2207      	movs	r2, #7
   23310:	4981      	ldr	r1, [pc, #516]	; (23518 <http_client_send_request+0x228>)
   23312:	0038      	movs	r0, r7
   23314:	4b81      	ldr	r3, [pc, #516]	; (2351c <http_client_send_request+0x22c>)
   23316:	4798      	blx	r3
		i = 7;
   23318:	2607      	movs	r6, #7
	if (!strncmp(url, "http://", 7)) {
   2331a:	2800      	cmp	r0, #0
   2331c:	d007      	beq.n	2332e <http_client_send_request+0x3e>
	} else if (!strncmp(url, "https://", 8)) {
   2331e:	2208      	movs	r2, #8
   23320:	497f      	ldr	r1, [pc, #508]	; (23520 <http_client_send_request+0x230>)
   23322:	0038      	movs	r0, r7
   23324:	4b7d      	ldr	r3, [pc, #500]	; (2351c <http_client_send_request+0x22c>)
   23326:	4798      	blx	r3
		i = 8;
   23328:	4246      	negs	r6, r0
   2332a:	4146      	adcs	r6, r0
   2332c:	00f6      	lsls	r6, r6, #3
	reconnect = strncmp(module->host, url + i, strlen(module->host));
   2332e:	1c63      	adds	r3, r4, #1
   23330:	19bd      	adds	r5, r7, r6
   23332:	9302      	str	r3, [sp, #8]
   23334:	0018      	movs	r0, r3
   23336:	4b7b      	ldr	r3, [pc, #492]	; (23524 <http_client_send_request+0x234>)
   23338:	4798      	blx	r3
   2333a:	0002      	movs	r2, r0
   2333c:	0029      	movs	r1, r5
   2333e:	9802      	ldr	r0, [sp, #8]
   23340:	4b76      	ldr	r3, [pc, #472]	; (2351c <http_client_send_request+0x22c>)
   23342:	4798      	blx	r3
   23344:	9001      	str	r0, [sp, #4]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
   23346:	782b      	ldrb	r3, [r5, #0]
   23348:	2b00      	cmp	r3, #0
   2334a:	d052      	beq.n	233f2 <http_client_send_request+0x102>
   2334c:	2b2f      	cmp	r3, #47	; 0x2f
   2334e:	d052      	beq.n	233f6 <http_client_send_request+0x106>
   23350:	1c71      	adds	r1, r6, #1
   23352:	1879      	adds	r1, r7, r1
   23354:	2200      	movs	r2, #0
		module->host[j++] = url[i];
   23356:	3201      	adds	r2, #1
   23358:	54a3      	strb	r3, [r4, r2]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
   2335a:	000d      	movs	r5, r1
   2335c:	780b      	ldrb	r3, [r1, #0]
   2335e:	2b00      	cmp	r3, #0
   23360:	d002      	beq.n	23368 <http_client_send_request+0x78>
   23362:	3101      	adds	r1, #1
   23364:	2b2f      	cmp	r3, #47	; 0x2f
   23366:	d1f6      	bne.n	23356 <http_client_send_request+0x66>
	module->host[j] = '\0';
   23368:	18a2      	adds	r2, r4, r2
   2336a:	2300      	movs	r3, #0
   2336c:	7053      	strb	r3, [r2, #1]
	if (strlen(module->host) == 0) {
   2336e:	7863      	ldrb	r3, [r4, #1]
   23370:	2b00      	cmp	r3, #0
   23372:	d100      	bne.n	23376 <http_client_send_request+0x86>
   23374:	e0a3      	b.n	234be <http_client_send_request+0x1ce>
	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
   23376:	0028      	movs	r0, r5
   23378:	4b6a      	ldr	r3, [pc, #424]	; (23524 <http_client_send_request+0x234>)
   2337a:	4798      	blx	r3
   2337c:	283f      	cmp	r0, #63	; 0x3f
   2337e:	d900      	bls.n	23382 <http_client_send_request+0x92>
   23380:	e0a1      	b.n	234c6 <http_client_send_request+0x1d6>
	if (module->req.ext_header != NULL) {
   23382:	23d4      	movs	r3, #212	; 0xd4
   23384:	58e0      	ldr	r0, [r4, r3]
   23386:	2800      	cmp	r0, #0
   23388:	d001      	beq.n	2338e <http_client_send_request+0x9e>
		free(module->req.ext_header);
   2338a:	4b67      	ldr	r3, [pc, #412]	; (23528 <http_client_send_request+0x238>)
   2338c:	4798      	blx	r3
	if (ext_header != NULL) {
   2338e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   23390:	2b00      	cmp	r3, #0
   23392:	d032      	beq.n	233fa <http_client_send_request+0x10a>
		module->req.ext_header = strdup(ext_header);
   23394:	0018      	movs	r0, r3
   23396:	4b65      	ldr	r3, [pc, #404]	; (2352c <http_client_send_request+0x23c>)
   23398:	4798      	blx	r3
   2339a:	23d4      	movs	r3, #212	; 0xd4
   2339c:	50e0      	str	r0, [r4, r3]
		if (module->req.ext_header == NULL) {
   2339e:	2800      	cmp	r0, #0
   233a0:	d100      	bne.n	233a4 <http_client_send_request+0xb4>
   233a2:	e094      	b.n	234ce <http_client_send_request+0x1de>
	module->sending = 0;
   233a4:	2241      	movs	r2, #65	; 0x41
   233a6:	5ca3      	ldrb	r3, [r4, r2]
   233a8:	2101      	movs	r1, #1
   233aa:	438b      	bics	r3, r1
   233ac:	54a3      	strb	r3, [r4, r2]
	module->recved_size = 0;
   233ae:	2300      	movs	r3, #0
   233b0:	6463      	str	r3, [r4, #68]	; 0x44
	if (uri[0] == '/') {
   233b2:	782b      	ldrb	r3, [r5, #0]
   233b4:	2b2f      	cmp	r3, #47	; 0x2f
   233b6:	d024      	beq.n	23402 <http_client_send_request+0x112>
		module->req.uri[0] = '/';
   233b8:	222f      	movs	r2, #47	; 0x2f
   233ba:	2370      	movs	r3, #112	; 0x70
   233bc:	54e2      	strb	r2, [r4, r3]
		if (uri[0] != 0) {
   233be:	782b      	ldrb	r3, [r5, #0]
   233c0:	2b00      	cmp	r3, #0
   233c2:	d124      	bne.n	2340e <http_client_send_request+0x11e>
	if (entity != NULL) {
   233c4:	9b03      	ldr	r3, [sp, #12]
   233c6:	2b00      	cmp	r3, #0
   233c8:	d027      	beq.n	2341a <http_client_send_request+0x12a>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
   233ca:	0020      	movs	r0, r4
   233cc:	30b0      	adds	r0, #176	; 0xb0
   233ce:	2218      	movs	r2, #24
   233d0:	0019      	movs	r1, r3
   233d2:	4b57      	ldr	r3, [pc, #348]	; (23530 <http_client_send_request+0x240>)
   233d4:	4798      	blx	r3
	module->req.method = method;
   233d6:	23c8      	movs	r3, #200	; 0xc8
   233d8:	4652      	mov	r2, sl
   233da:	54e2      	strb	r2, [r4, r3]
	switch (module->req.state) {
   233dc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   233de:	2b01      	cmp	r3, #1
   233e0:	d022      	beq.n	23428 <http_client_send_request+0x138>
   233e2:	2b00      	cmp	r3, #0
   233e4:	d027      	beq.n	23436 <http_client_send_request+0x146>
   233e6:	2b02      	cmp	r3, #2
   233e8:	d03a      	beq.n	23460 <http_client_send_request+0x170>
		return -EAGAIN;
   233ea:	230b      	movs	r3, #11
   233ec:	425b      	negs	r3, r3
   233ee:	9301      	str	r3, [sp, #4]
   233f0:	e08d      	b.n	2350e <http_client_send_request+0x21e>
	int i = 0, j = 0, reconnect = 0;
   233f2:	2200      	movs	r2, #0
   233f4:	e7b8      	b.n	23368 <http_client_send_request+0x78>
   233f6:	2200      	movs	r2, #0
   233f8:	e7b6      	b.n	23368 <http_client_send_request+0x78>
		module->req.ext_header = NULL;
   233fa:	2200      	movs	r2, #0
   233fc:	23d4      	movs	r3, #212	; 0xd4
   233fe:	50e2      	str	r2, [r4, r3]
   23400:	e7d0      	b.n	233a4 <http_client_send_request+0xb4>
		strcpy(module->req.uri, uri);
   23402:	0020      	movs	r0, r4
   23404:	3070      	adds	r0, #112	; 0x70
   23406:	0029      	movs	r1, r5
   23408:	4b4a      	ldr	r3, [pc, #296]	; (23534 <http_client_send_request+0x244>)
   2340a:	4798      	blx	r3
   2340c:	e7da      	b.n	233c4 <http_client_send_request+0xd4>
			strcpy(module->req.uri + 1, uri);
   2340e:	0029      	movs	r1, r5
   23410:	0020      	movs	r0, r4
   23412:	3071      	adds	r0, #113	; 0x71
   23414:	4b47      	ldr	r3, [pc, #284]	; (23534 <http_client_send_request+0x244>)
   23416:	4798      	blx	r3
   23418:	e7d4      	b.n	233c4 <http_client_send_request+0xd4>
		memset(&module->req.entity, 0, sizeof(struct http_entity));
   2341a:	0020      	movs	r0, r4
   2341c:	30b0      	adds	r0, #176	; 0xb0
   2341e:	2218      	movs	r2, #24
   23420:	2100      	movs	r1, #0
   23422:	4b45      	ldr	r3, [pc, #276]	; (23538 <http_client_send_request+0x248>)
   23424:	4798      	blx	r3
   23426:	e7d6      	b.n	233d6 <http_client_send_request+0xe6>
		if (!reconnect) {
   23428:	9b01      	ldr	r3, [sp, #4]
   2342a:	2b00      	cmp	r3, #0
   2342c:	d06f      	beq.n	2350e <http_client_send_request+0x21e>
			_http_client_clear_conn(module, 0);
   2342e:	2100      	movs	r1, #0
   23430:	0020      	movs	r0, r4
   23432:	4b42      	ldr	r3, [pc, #264]	; (2353c <http_client_send_request+0x24c>)
   23434:	4798      	blx	r3
		if (module->config.tls) {
   23436:	2352      	movs	r3, #82	; 0x52
   23438:	5ce2      	ldrb	r2, [r4, r3]
   2343a:	1e53      	subs	r3, r2, #1
   2343c:	419a      	sbcs	r2, r3
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
   2343e:	b2d2      	uxtb	r2, r2
   23440:	2101      	movs	r1, #1
   23442:	2002      	movs	r0, #2
   23444:	4b3e      	ldr	r3, [pc, #248]	; (23540 <http_client_send_request+0x250>)
   23446:	4798      	blx	r3
   23448:	7020      	strb	r0, [r4, #0]
		if (module->sock >= 0) {
   2344a:	2800      	cmp	r0, #0
   2344c:	db43      	blt.n	234d6 <http_client_send_request+0x1e6>
			module_ref_inst[module->sock] = module;
   2344e:	0080      	lsls	r0, r0, #2
   23450:	4b3c      	ldr	r3, [pc, #240]	; (23544 <http_client_send_request+0x254>)
   23452:	50c4      	str	r4, [r0, r3]
   23454:	9d02      	ldr	r5, [sp, #8]
	uint32_t isv6 = 0;
   23456:	2100      	movs	r1, #0
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
   23458:	2620      	movs	r6, #32
			isv6 = 1;
   2345a:	2001      	movs	r0, #1
		} else if ((ch & 0x30) != 0x30) {
   2345c:	2730      	movs	r7, #48	; 0x30
   2345e:	e00c      	b.n	2347a <http_client_send_request+0x18a>
		if (!reconnect) {
   23460:	9b01      	ldr	r3, [sp, #4]
   23462:	2b00      	cmp	r3, #0
   23464:	d1e3      	bne.n	2342e <http_client_send_request+0x13e>
			module->req.state = STATE_REQ_SEND_HEADER;
   23466:	3303      	adds	r3, #3
   23468:	66e3      	str	r3, [r4, #108]	; 0x6c
			_http_client_request(module);
   2346a:	0020      	movs	r0, r4
   2346c:	4b36      	ldr	r3, [pc, #216]	; (23548 <http_client_send_request+0x258>)
   2346e:	4798      	blx	r3
			break;
   23470:	e04d      	b.n	2350e <http_client_send_request+0x21e>
			if (isv6) {
   23472:	2900      	cmp	r1, #0
   23474:	d001      	beq.n	2347a <http_client_send_request+0x18a>
   23476:	e012      	b.n	2349e <http_client_send_request+0x1ae>
			isv6 = 1;
   23478:	0001      	movs	r1, r0
	while (*host != '\0') {
   2347a:	782a      	ldrb	r2, [r5, #0]
   2347c:	2a00      	cmp	r2, #0
   2347e:	d02e      	beq.n	234de <http_client_send_request+0x1ee>
		ch = *host++;
   23480:	3501      	adds	r5, #1
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
   23482:	0013      	movs	r3, r2
   23484:	43b3      	bics	r3, r6
   23486:	3b41      	subs	r3, #65	; 0x41
   23488:	2b05      	cmp	r3, #5
   2348a:	d9f5      	bls.n	23478 <http_client_send_request+0x188>
   2348c:	2a3a      	cmp	r2, #58	; 0x3a
   2348e:	d00a      	beq.n	234a6 <http_client_send_request+0x1b6>
   23490:	2a2f      	cmp	r2, #47	; 0x2f
   23492:	d00a      	beq.n	234aa <http_client_send_request+0x1ba>
		} else if (ch == '.') {
   23494:	2a2e      	cmp	r2, #46	; 0x2e
   23496:	d0ec      	beq.n	23472 <http_client_send_request+0x182>
		} else if ((ch & 0x30) != 0x30) {
   23498:	403a      	ands	r2, r7
   2349a:	2a30      	cmp	r2, #48	; 0x30
   2349c:	d0ed      	beq.n	2347a <http_client_send_request+0x18a>
				gethostbyname((uint8*)module->host);
   2349e:	9802      	ldr	r0, [sp, #8]
   234a0:	4b2a      	ldr	r3, [pc, #168]	; (2354c <http_client_send_request+0x25c>)
   234a2:	4798      	blx	r3
   234a4:	e02f      	b.n	23506 <http_client_send_request+0x216>
			isv6 = 1;
   234a6:	0001      	movs	r1, r0
   234a8:	e7e7      	b.n	2347a <http_client_send_request+0x18a>
   234aa:	0001      	movs	r1, r0
   234ac:	e7e5      	b.n	2347a <http_client_send_request+0x18a>
		return -EINVAL;
   234ae:	2316      	movs	r3, #22
   234b0:	425b      	negs	r3, r3
   234b2:	9301      	str	r3, [sp, #4]
   234b4:	e02b      	b.n	2350e <http_client_send_request+0x21e>
		return -EBUSY;
   234b6:	2310      	movs	r3, #16
   234b8:	425b      	negs	r3, r3
   234ba:	9301      	str	r3, [sp, #4]
   234bc:	e027      	b.n	2350e <http_client_send_request+0x21e>
		return -EINVAL;
   234be:	2316      	movs	r3, #22
   234c0:	425b      	negs	r3, r3
   234c2:	9301      	str	r3, [sp, #4]
   234c4:	e023      	b.n	2350e <http_client_send_request+0x21e>
		return -ENAMETOOLONG;
   234c6:	235b      	movs	r3, #91	; 0x5b
   234c8:	425b      	negs	r3, r3
   234ca:	9301      	str	r3, [sp, #4]
   234cc:	e01f      	b.n	2350e <http_client_send_request+0x21e>
			return -ENOMEM;
   234ce:	230c      	movs	r3, #12
   234d0:	425b      	negs	r3, r3
   234d2:	9301      	str	r3, [sp, #4]
   234d4:	e01b      	b.n	2350e <http_client_send_request+0x21e>
			return -ENOSPC;
   234d6:	231c      	movs	r3, #28
   234d8:	425b      	negs	r3, r3
   234da:	9301      	str	r3, [sp, #4]
   234dc:	e017      	b.n	2350e <http_client_send_request+0x21e>
				addr_in.sin_family = AF_INET;
   234de:	2302      	movs	r3, #2
   234e0:	aa04      	add	r2, sp, #16
   234e2:	8013      	strh	r3, [r2, #0]
				addr_in.sin_port = _htons(module->config.port);
   234e4:	334e      	adds	r3, #78	; 0x4e
   234e6:	5ae3      	ldrh	r3, [r4, r3]
   234e8:	021a      	lsls	r2, r3, #8
   234ea:	0a1b      	lsrs	r3, r3, #8
   234ec:	4313      	orrs	r3, r2
   234ee:	aa04      	add	r2, sp, #16
   234f0:	8053      	strh	r3, [r2, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
   234f2:	9802      	ldr	r0, [sp, #8]
   234f4:	4b16      	ldr	r3, [pc, #88]	; (23550 <http_client_send_request+0x260>)
   234f6:	4798      	blx	r3
   234f8:	9005      	str	r0, [sp, #20]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   234fa:	2000      	movs	r0, #0
   234fc:	5620      	ldrsb	r0, [r4, r0]
   234fe:	2210      	movs	r2, #16
   23500:	a904      	add	r1, sp, #16
   23502:	4b14      	ldr	r3, [pc, #80]	; (23554 <http_client_send_request+0x264>)
   23504:	4798      	blx	r3
			module->req.state = STATE_TRY_SOCK_CONNECT;
   23506:	2301      	movs	r3, #1
   23508:	66e3      	str	r3, [r4, #108]	; 0x6c
	return 0;
   2350a:	2300      	movs	r3, #0
   2350c:	9301      	str	r3, [sp, #4]
}
   2350e:	9801      	ldr	r0, [sp, #4]
   23510:	b008      	add	sp, #32
   23512:	bc04      	pop	{r2}
   23514:	4692      	mov	sl, r2
   23516:	bdf0      	pop	{r4, r5, r6, r7, pc}
   23518:	0002b7d0 	.word	0x0002b7d0
   2351c:	000260d5 	.word	0x000260d5
   23520:	0002b7d8 	.word	0x0002b7d8
   23524:	000260c7 	.word	0x000260c7
   23528:	00025cc5 	.word	0x00025cc5
   2352c:	0002608d 	.word	0x0002608d
   23530:	00025cd9 	.word	0x00025cd9
   23534:	0002607b 	.word	0x0002607b
   23538:	00025d0f 	.word	0x00025d0f
   2353c:	00022d39 	.word	0x00022d39
   23540:	0001cf8d 	.word	0x0001cf8d
   23544:	200040f8 	.word	0x200040f8
   23548:	00022e51 	.word	0x00022e51
   2354c:	0001d3cd 	.word	0x0001d3cd
   23550:	0001d361 	.word	0x0001d361
   23554:	0001d10d 	.word	0x0001d10d

00023558 <_http_client_recv_packet>:

void _http_client_recv_packet(struct http_client_module *const module)
{
   23558:	b510      	push	{r4, lr}
	if (module == NULL) {
   2355a:	2800      	cmp	r0, #0
   2355c:	d00d      	beq.n	2357a <_http_client_recv_packet+0x22>
		return;
	}
	
	if (module->recved_size >= module->config.recv_buffer_size) {
   2355e:	6c41      	ldr	r1, [r0, #68]	; 0x44
   23560:	6e02      	ldr	r2, [r0, #96]	; 0x60
   23562:	4291      	cmp	r1, r2
   23564:	d20a      	bcs.n	2357c <_http_client_recv_packet+0x24>
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
   23566:	1a52      	subs	r2, r2, r1
   23568:	b292      	uxth	r2, r2
		module->config.recv_buffer + module->recved_size,
   2356a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   2356c:	469c      	mov	ip, r3
   2356e:	4461      	add	r1, ip
	recv(module->sock,
   23570:	7800      	ldrb	r0, [r0, #0]
   23572:	b240      	sxtb	r0, r0
   23574:	2300      	movs	r3, #0
   23576:	4c04      	ldr	r4, [pc, #16]	; (23588 <_http_client_recv_packet+0x30>)
   23578:	47a0      	blx	r4
		module->config.recv_buffer_size - module->recved_size, 0);
}
   2357a:	bd10      	pop	{r4, pc}
		_http_client_clear_conn(module, -EOVERFLOW);
   2357c:	218b      	movs	r1, #139	; 0x8b
   2357e:	4249      	negs	r1, r1
   23580:	4b02      	ldr	r3, [pc, #8]	; (2358c <_http_client_recv_packet+0x34>)
   23582:	4798      	blx	r3
		return;
   23584:	e7f9      	b.n	2357a <_http_client_recv_packet+0x22>
   23586:	46c0      	nop			; (mov r8, r8)
   23588:	0001d235 	.word	0x0001d235
   2358c:	00022d39 	.word	0x00022d39

00023590 <_http_client_move_buffer>:

	return 0;
}

void _http_client_move_buffer(struct http_client_module *const module, char *base)
{
   23590:	b570      	push	{r4, r5, r6, lr}
   23592:	0005      	movs	r5, r0
	char *buffer = module->config.recv_buffer;
   23594:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
	int remain = (int)module->recved_size - (int)base + (int)buffer;
   23596:	6c6b      	ldr	r3, [r5, #68]	; 0x44
   23598:	1a5c      	subs	r4, r3, r1
   2359a:	1904      	adds	r4, r0, r4

	if (remain > 0) {
   2359c:	2c00      	cmp	r4, #0
   2359e:	dc02      	bgt.n	235a6 <_http_client_move_buffer+0x16>
		memmove(buffer, base, remain);
		module->recved_size = remain;
	} else {
		module->recved_size = 0;
   235a0:	2300      	movs	r3, #0
   235a2:	646b      	str	r3, [r5, #68]	; 0x44
	}
}
   235a4:	bd70      	pop	{r4, r5, r6, pc}
		memmove(buffer, base, remain);
   235a6:	0022      	movs	r2, r4
   235a8:	4b01      	ldr	r3, [pc, #4]	; (235b0 <_http_client_move_buffer+0x20>)
   235aa:	4798      	blx	r3
		module->recved_size = remain;
   235ac:	646c      	str	r4, [r5, #68]	; 0x44
   235ae:	e7f9      	b.n	235a4 <_http_client_move_buffer+0x14>
   235b0:	00025ceb 	.word	0x00025ceb

000235b4 <_http_client_handle_header>:
{
   235b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   235b6:	46ce      	mov	lr, r9
   235b8:	b500      	push	{lr}
   235ba:	b084      	sub	sp, #16
   235bc:	0007      	movs	r7, r0
	for (ptr = module->config.recv_buffer ; ; ) {
   235be:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
		ptr_line_end = strstr(ptr, new_line);
   235c0:	4b62      	ldr	r3, [pc, #392]	; (2374c <_http_client_handle_header+0x198>)
   235c2:	4699      	mov	r9, r3
   235c4:	e049      	b.n	2365a <_http_client_handle_header+0xa6>
			_http_client_move_buffer(module, ptr);
   235c6:	0021      	movs	r1, r4
   235c8:	0038      	movs	r0, r7
   235ca:	4b61      	ldr	r3, [pc, #388]	; (23750 <_http_client_handle_header+0x19c>)
   235cc:	4798      	blx	r3
			return 0;
   235ce:	2600      	movs	r6, #0
}
   235d0:	0030      	movs	r0, r6
   235d2:	b004      	add	sp, #16
   235d4:	bc04      	pop	{r2}
   235d6:	4691      	mov	r9, r2
   235d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			_http_client_move_buffer(module, ptr + strlen(new_line));
   235da:	1ca1      	adds	r1, r4, #2
   235dc:	0038      	movs	r0, r7
   235de:	4b5c      	ldr	r3, [pc, #368]	; (23750 <_http_client_handle_header+0x19c>)
   235e0:	4798      	blx	r3
			if (module->cb && module->resp.response_code) {
   235e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   235e4:	2b00      	cmp	r3, #0
   235e6:	d00a      	beq.n	235fe <_http_client_handle_header+0x4a>
   235e8:	22e4      	movs	r2, #228	; 0xe4
   235ea:	5ab9      	ldrh	r1, [r7, r2]
   235ec:	2900      	cmp	r1, #0
   235ee:	d006      	beq.n	235fe <_http_client_handle_header+0x4a>
				if (module->resp.content_length < 0) {
   235f0:	3a08      	subs	r2, #8
   235f2:	58b8      	ldr	r0, [r7, r2]
   235f4:	2800      	cmp	r0, #0
   235f6:	db07      	blt.n	23608 <_http_client_handle_header+0x54>
				} else if (module->resp.content_length > (int)module->config.recv_buffer_size) {
   235f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   235fa:	4290      	cmp	r0, r2
   235fc:	dc10      	bgt.n	23620 <_http_client_handle_header+0x6c>
			module->resp.state = STATE_PARSE_ENTITY;
   235fe:	2201      	movs	r2, #1
   23600:	23d8      	movs	r3, #216	; 0xd8
   23602:	50fa      	str	r2, [r7, r3]
			return 1;
   23604:	2601      	movs	r6, #1
   23606:	e7e3      	b.n	235d0 <_http_client_handle_header+0x1c>
					data.recv_response.response_code = module->resp.response_code;
   23608:	aa01      	add	r2, sp, #4
   2360a:	8011      	strh	r1, [r2, #0]
					data.recv_response.is_chunked = 1;
   2360c:	2101      	movs	r1, #1
   2360e:	7091      	strb	r1, [r2, #2]
					module->resp.read_length = 0;
   23610:	2100      	movs	r1, #0
   23612:	20e0      	movs	r0, #224	; 0xe0
   23614:	5039      	str	r1, [r7, r0]
					data.recv_response.content = NULL;
   23616:	6091      	str	r1, [r2, #8]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   23618:	3102      	adds	r1, #2
   2361a:	0038      	movs	r0, r7
   2361c:	4798      	blx	r3
   2361e:	e7ee      	b.n	235fe <_http_client_handle_header+0x4a>
					data.recv_response.response_code = module->resp.response_code;
   23620:	aa01      	add	r2, sp, #4
   23622:	8011      	strh	r1, [r2, #0]
					data.recv_response.content_length = module->resp.content_length;
   23624:	6050      	str	r0, [r2, #4]
					data.recv_response.content = NULL;
   23626:	2100      	movs	r1, #0
   23628:	6091      	str	r1, [r2, #8]
					module->resp.read_length = 0;
   2362a:	20e0      	movs	r0, #224	; 0xe0
   2362c:	5039      	str	r1, [r7, r0]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   2362e:	3102      	adds	r1, #2
   23630:	0038      	movs	r0, r7
   23632:	4798      	blx	r3
   23634:	e7e3      	b.n	235fe <_http_client_handle_header+0x4a>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
   23636:	0020      	movs	r0, r4
   23638:	3010      	adds	r0, #16
   2363a:	4b46      	ldr	r3, [pc, #280]	; (23754 <_http_client_handle_header+0x1a0>)
   2363c:	4798      	blx	r3
   2363e:	23dc      	movs	r3, #220	; 0xdc
   23640:	50f8      	str	r0, [r7, r3]
   23642:	e009      	b.n	23658 <_http_client_handle_header+0xa4>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   23644:	3201      	adds	r2, #1
   23646:	4295      	cmp	r5, r2
   23648:	d006      	beq.n	23658 <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
   2364a:	7813      	ldrb	r3, [r2, #0]
   2364c:	2b20      	cmp	r3, #32
   2364e:	d12b      	bne.n	236a8 <_http_client_handle_header+0xf4>
   23650:	e7f8      	b.n	23644 <_http_client_handle_header+0x90>
					module->req.content_length = -1;
   23652:	3a21      	subs	r2, #33	; 0x21
   23654:	3389      	adds	r3, #137	; 0x89
   23656:	50fa      	str	r2, [r7, r3]
		ptr = ptr_line_end + strlen(new_line);
   23658:	1cac      	adds	r4, r5, #2
		ptr_line_end = strstr(ptr, new_line);
   2365a:	493f      	ldr	r1, [pc, #252]	; (23758 <_http_client_handle_header+0x1a4>)
   2365c:	0020      	movs	r0, r4
   2365e:	47c8      	blx	r9
   23660:	1e05      	subs	r5, r0, #0
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
   23662:	d0b0      	beq.n	235c6 <_http_client_handle_header+0x12>
   23664:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   23666:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   23668:	4694      	mov	ip, r2
   2366a:	4463      	add	r3, ip
   2366c:	4298      	cmp	r0, r3
   2366e:	d2aa      	bcs.n	235c6 <_http_client_handle_header+0x12>
		if (!strncmp(ptr, new_line, strlen(new_line))) {
   23670:	2202      	movs	r2, #2
   23672:	4939      	ldr	r1, [pc, #228]	; (23758 <_http_client_handle_header+0x1a4>)
   23674:	0020      	movs	r0, r4
   23676:	4b39      	ldr	r3, [pc, #228]	; (2375c <_http_client_handle_header+0x1a8>)
   23678:	4798      	blx	r3
   2367a:	2800      	cmp	r0, #0
   2367c:	d0ad      	beq.n	235da <_http_client_handle_header+0x26>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
   2367e:	2210      	movs	r2, #16
   23680:	4937      	ldr	r1, [pc, #220]	; (23760 <_http_client_handle_header+0x1ac>)
   23682:	0020      	movs	r0, r4
   23684:	4b35      	ldr	r3, [pc, #212]	; (2375c <_http_client_handle_header+0x1a8>)
   23686:	4798      	blx	r3
   23688:	2800      	cmp	r0, #0
   2368a:	d0d4      	beq.n	23636 <_http_client_handle_header+0x82>
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
   2368c:	2213      	movs	r2, #19
   2368e:	4935      	ldr	r1, [pc, #212]	; (23764 <_http_client_handle_header+0x1b0>)
   23690:	0020      	movs	r0, r4
   23692:	4b32      	ldr	r3, [pc, #200]	; (2375c <_http_client_handle_header+0x1a8>)
   23694:	4798      	blx	r3
   23696:	1e06      	subs	r6, r0, #0
   23698:	d110      	bne.n	236bc <_http_client_handle_header+0x108>
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
   2369a:	0022      	movs	r2, r4
   2369c:	3213      	adds	r2, #19
			for (; ptr_line_end > type_ptr; type_ptr++) {
   2369e:	4295      	cmp	r5, r2
   236a0:	d9da      	bls.n	23658 <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
   236a2:	7ce3      	ldrb	r3, [r4, #19]
   236a4:	2b20      	cmp	r3, #32
   236a6:	d0cd      	beq.n	23644 <_http_client_handle_header+0x90>
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
   236a8:	2220      	movs	r2, #32
   236aa:	4393      	bics	r3, r2
   236ac:	2b43      	cmp	r3, #67	; 0x43
   236ae:	d0d0      	beq.n	23652 <_http_client_handle_header+0x9e>
					_http_client_clear_conn(module, -ENOTSUP);
   236b0:	2186      	movs	r1, #134	; 0x86
   236b2:	4249      	negs	r1, r1
   236b4:	0038      	movs	r0, r7
   236b6:	4b2c      	ldr	r3, [pc, #176]	; (23768 <_http_client_handle_header+0x1b4>)
   236b8:	4798      	blx	r3
					return 0;
   236ba:	e789      	b.n	235d0 <_http_client_handle_header+0x1c>
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
   236bc:	220c      	movs	r2, #12
   236be:	492b      	ldr	r1, [pc, #172]	; (2376c <_http_client_handle_header+0x1b8>)
   236c0:	0020      	movs	r0, r4
   236c2:	4b26      	ldr	r3, [pc, #152]	; (2375c <_http_client_handle_header+0x1a8>)
   236c4:	4798      	blx	r3
   236c6:	2800      	cmp	r0, #0
   236c8:	d11d      	bne.n	23706 <_http_client_handle_header+0x152>
			char *type_ptr = ptr + strlen("Connection: ");
   236ca:	0022      	movs	r2, r4
   236cc:	320c      	adds	r2, #12
			for (; ptr_line_end > type_ptr; type_ptr++) {
   236ce:	4295      	cmp	r5, r2
   236d0:	d9c2      	bls.n	23658 <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
   236d2:	7b23      	ldrb	r3, [r4, #12]
   236d4:	2b20      	cmp	r3, #32
   236d6:	d009      	beq.n	236ec <_http_client_handle_header+0x138>
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
   236d8:	2220      	movs	r2, #32
   236da:	4393      	bics	r3, r2
   236dc:	2b4b      	cmp	r3, #75	; 0x4b
   236de:	d00c      	beq.n	236fa <_http_client_handle_header+0x146>
					module->permanent = 0;
   236e0:	2241      	movs	r2, #65	; 0x41
   236e2:	5cbb      	ldrb	r3, [r7, r2]
   236e4:	2102      	movs	r1, #2
   236e6:	438b      	bics	r3, r1
   236e8:	54bb      	strb	r3, [r7, r2]
   236ea:	e7b5      	b.n	23658 <_http_client_handle_header+0xa4>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   236ec:	3201      	adds	r2, #1
   236ee:	4295      	cmp	r5, r2
   236f0:	d0b2      	beq.n	23658 <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
   236f2:	7813      	ldrb	r3, [r2, #0]
   236f4:	2b20      	cmp	r3, #32
   236f6:	d1ef      	bne.n	236d8 <_http_client_handle_header+0x124>
   236f8:	e7f8      	b.n	236ec <_http_client_handle_header+0x138>
					module->permanent = 1;
   236fa:	3221      	adds	r2, #33	; 0x21
   236fc:	5cbb      	ldrb	r3, [r7, r2]
   236fe:	2102      	movs	r1, #2
   23700:	430b      	orrs	r3, r1
   23702:	54bb      	strb	r3, [r7, r2]
   23704:	e7a8      	b.n	23658 <_http_client_handle_header+0xa4>
		} else if (!strncmp(ptr, "HTTP/", 5)) {
   23706:	2205      	movs	r2, #5
   23708:	4919      	ldr	r1, [pc, #100]	; (23770 <_http_client_handle_header+0x1bc>)
   2370a:	0020      	movs	r0, r4
   2370c:	4b13      	ldr	r3, [pc, #76]	; (2375c <_http_client_handle_header+0x1a8>)
   2370e:	4798      	blx	r3
   23710:	2800      	cmp	r0, #0
   23712:	d1a1      	bne.n	23658 <_http_client_handle_header+0xa4>
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
   23714:	0020      	movs	r0, r4
   23716:	3009      	adds	r0, #9
   23718:	4b0e      	ldr	r3, [pc, #56]	; (23754 <_http_client_handle_header+0x1a0>)
   2371a:	4798      	blx	r3
   2371c:	23e4      	movs	r3, #228	; 0xe4
   2371e:	52f8      	strh	r0, [r7, r3]
			module->resp.content_length = 0;
   23720:	2200      	movs	r2, #0
   23722:	3b08      	subs	r3, #8
   23724:	50fa      	str	r2, [r7, r3]
			if (ptr [5] > '1' || ptr[7] > '0') {
   23726:	7963      	ldrb	r3, [r4, #5]
   23728:	2b31      	cmp	r3, #49	; 0x31
   2372a:	d802      	bhi.n	23732 <_http_client_handle_header+0x17e>
   2372c:	79e3      	ldrb	r3, [r4, #7]
   2372e:	2b30      	cmp	r3, #48	; 0x30
   23730:	d905      	bls.n	2373e <_http_client_handle_header+0x18a>
				module->permanent = 1;
   23732:	2241      	movs	r2, #65	; 0x41
   23734:	5cbb      	ldrb	r3, [r7, r2]
   23736:	2102      	movs	r1, #2
   23738:	430b      	orrs	r3, r1
   2373a:	54bb      	strb	r3, [r7, r2]
   2373c:	e78c      	b.n	23658 <_http_client_handle_header+0xa4>
				module->permanent = 0;
   2373e:	2241      	movs	r2, #65	; 0x41
   23740:	5cbb      	ldrb	r3, [r7, r2]
   23742:	2102      	movs	r1, #2
   23744:	438b      	bics	r3, r1
   23746:	54bb      	strb	r3, [r7, r2]
   23748:	e786      	b.n	23658 <_http_client_handle_header+0xa4>
   2374a:	46c0      	nop			; (mov r8, r8)
   2374c:	00026145 	.word	0x00026145
   23750:	00023591 	.word	0x00023591
   23754:	00025c5d 	.word	0x00025c5d
   23758:	00027bfc 	.word	0x00027bfc
   2375c:	000260d5 	.word	0x000260d5
   23760:	0002b7b0 	.word	0x0002b7b0
   23764:	0002b6c0 	.word	0x0002b6c0
   23768:	00022d39 	.word	0x00022d39
   2376c:	0002b6d4 	.word	0x0002b6d4
   23770:	0002b6e4 	.word	0x0002b6e4

00023774 <_http_client_handle_entity>:
{
   23774:	b5f0      	push	{r4, r5, r6, r7, lr}
   23776:	46ce      	mov	lr, r9
   23778:	b500      	push	{lr}
   2377a:	b086      	sub	sp, #24
   2377c:	0004      	movs	r4, r0
	char *buffer = module->config.recv_buffer;
   2377e:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
   23780:	23dc      	movs	r3, #220	; 0xdc
   23782:	58c3      	ldr	r3, [r0, r3]
   23784:	2b00      	cmp	r3, #0
   23786:	db69      	blt.n	2385c <_http_client_handle_entity+0xe8>
   23788:	6e02      	ldr	r2, [r0, #96]	; 0x60
   2378a:	4293      	cmp	r3, r2
   2378c:	dc2b      	bgt.n	237e6 <_http_client_handle_entity+0x72>
	return 0;
   2378e:	2000      	movs	r0, #0
		if ((int)module->recved_size >= module->resp.content_length) {
   23790:	6c62      	ldr	r2, [r4, #68]	; 0x44
   23792:	4293      	cmp	r3, r2
   23794:	dc4e      	bgt.n	23834 <_http_client_handle_entity+0xc0>
			if (module->cb && module->resp.response_code) {
   23796:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
   23798:	2e00      	cmp	r6, #0
   2379a:	d003      	beq.n	237a4 <_http_client_handle_entity+0x30>
   2379c:	22e4      	movs	r2, #228	; 0xe4
   2379e:	5aa1      	ldrh	r1, [r4, r2]
   237a0:	2900      	cmp	r1, #0
   237a2:	d10e      	bne.n	237c2 <_http_client_handle_entity+0x4e>
			module->resp.state = STATE_PARSE_HEADER;
   237a4:	2300      	movs	r3, #0
   237a6:	22d8      	movs	r2, #216	; 0xd8
   237a8:	50a3      	str	r3, [r4, r2]
			module->resp.response_code = 0;
   237aa:	320c      	adds	r2, #12
   237ac:	52a3      	strh	r3, [r4, r2]
			if (module->permanent == 0) {
   237ae:	3341      	adds	r3, #65	; 0x41
   237b0:	5ce3      	ldrb	r3, [r4, r3]
   237b2:	079b      	lsls	r3, r3, #30
   237b4:	d40f      	bmi.n	237d6 <_http_client_handle_entity+0x62>
				_http_client_clear_conn(module, 0);
   237b6:	2100      	movs	r1, #0
   237b8:	0020      	movs	r0, r4
   237ba:	4b71      	ldr	r3, [pc, #452]	; (23980 <_http_client_handle_entity+0x20c>)
   237bc:	4798      	blx	r3
	return 0;
   237be:	2000      	movs	r0, #0
   237c0:	e038      	b.n	23834 <_http_client_handle_entity+0xc0>
				data.recv_response.response_code = module->resp.response_code;
   237c2:	aa03      	add	r2, sp, #12
   237c4:	8011      	strh	r1, [r2, #0]
				data.recv_response.is_chunked = 0;
   237c6:	2100      	movs	r1, #0
   237c8:	7091      	strb	r1, [r2, #2]
				data.recv_response.content_length = module->resp.content_length;
   237ca:	6053      	str	r3, [r2, #4]
				data.recv_response.content = buffer;
   237cc:	6095      	str	r5, [r2, #8]
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   237ce:	3102      	adds	r1, #2
   237d0:	0020      	movs	r0, r4
   237d2:	47b0      	blx	r6
   237d4:	e7e6      	b.n	237a4 <_http_client_handle_entity+0x30>
				_http_client_move_buffer(module, buffer + module->resp.content_length);
   237d6:	23dc      	movs	r3, #220	; 0xdc
   237d8:	58e1      	ldr	r1, [r4, r3]
   237da:	1869      	adds	r1, r5, r1
   237dc:	0020      	movs	r0, r4
   237de:	4b69      	ldr	r3, [pc, #420]	; (23984 <_http_client_handle_entity+0x210>)
   237e0:	4798      	blx	r3
				return module->recved_size;
   237e2:	6c60      	ldr	r0, [r4, #68]	; 0x44
   237e4:	e026      	b.n	23834 <_http_client_handle_entity+0xc0>
			data.recv_chunked_data.length = module->recved_size;
   237e6:	6c42      	ldr	r2, [r0, #68]	; 0x44
   237e8:	9203      	str	r2, [sp, #12]
			data.recv_chunked_data.data = buffer;
   237ea:	9504      	str	r5, [sp, #16]
			module->resp.read_length += (int)module->recved_size;
   237ec:	21e0      	movs	r1, #224	; 0xe0
   237ee:	5840      	ldr	r0, [r0, r1]
   237f0:	4684      	mov	ip, r0
   237f2:	4462      	add	r2, ip
   237f4:	5062      	str	r2, [r4, r1]
			if (module->resp.content_length <= module->resp.read_length) {
   237f6:	4293      	cmp	r3, r2
   237f8:	dc20      	bgt.n	2383c <_http_client_handle_entity+0xc8>
				module->resp.state = STATE_PARSE_HEADER;
   237fa:	2300      	movs	r3, #0
   237fc:	22d8      	movs	r2, #216	; 0xd8
   237fe:	50a3      	str	r3, [r4, r2]
				module->resp.response_code = 0;
   23800:	320c      	adds	r2, #12
   23802:	52a3      	strh	r3, [r4, r2]
				data.recv_chunked_data.is_complete = 1;
   23804:	3ae3      	subs	r2, #227	; 0xe3
   23806:	ab03      	add	r3, sp, #12
   23808:	721a      	strb	r2, [r3, #8]
			if (module->cb) {
   2380a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   2380c:	2b00      	cmp	r3, #0
   2380e:	d007      	beq.n	23820 <_http_client_handle_entity+0xac>
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   23810:	ae03      	add	r6, sp, #12
   23812:	0032      	movs	r2, r6
   23814:	2103      	movs	r1, #3
   23816:	0020      	movs	r0, r4
   23818:	4798      	blx	r3
			if (data.recv_chunked_data.is_complete == 1) {
   2381a:	7a33      	ldrb	r3, [r6, #8]
   2381c:	2b01      	cmp	r3, #1
   2381e:	d103      	bne.n	23828 <_http_client_handle_entity+0xb4>
				if (module->permanent == 0) {
   23820:	2341      	movs	r3, #65	; 0x41
   23822:	5ce3      	ldrb	r3, [r4, r3]
   23824:	079b      	lsls	r3, r3, #30
   23826:	d510      	bpl.n	2384a <_http_client_handle_entity+0xd6>
			_http_client_move_buffer(module, buffer + module->recved_size);
   23828:	6c63      	ldr	r3, [r4, #68]	; 0x44
   2382a:	18e9      	adds	r1, r5, r3
   2382c:	0020      	movs	r0, r4
   2382e:	4b55      	ldr	r3, [pc, #340]	; (23984 <_http_client_handle_entity+0x210>)
   23830:	4798      	blx	r3
	return 0;
   23832:	2000      	movs	r0, #0
}
   23834:	b006      	add	sp, #24
   23836:	bc04      	pop	{r2}
   23838:	4691      	mov	r9, r2
   2383a:	bdf0      	pop	{r4, r5, r6, r7, pc}
				data.recv_chunked_data.is_complete = 0;
   2383c:	2200      	movs	r2, #0
   2383e:	ab03      	add	r3, sp, #12
   23840:	721a      	strb	r2, [r3, #8]
			if (module->cb) {
   23842:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   23844:	2b00      	cmp	r3, #0
   23846:	d0ef      	beq.n	23828 <_http_client_handle_entity+0xb4>
   23848:	e7e2      	b.n	23810 <_http_client_handle_entity+0x9c>
					printf("1\r\n");
   2384a:	484f      	ldr	r0, [pc, #316]	; (23988 <_http_client_handle_entity+0x214>)
   2384c:	4b4f      	ldr	r3, [pc, #316]	; (2398c <_http_client_handle_entity+0x218>)
   2384e:	4798      	blx	r3
					_http_client_clear_conn(module, 0);
   23850:	2100      	movs	r1, #0
   23852:	0020      	movs	r0, r4
   23854:	4b4a      	ldr	r3, [pc, #296]	; (23980 <_http_client_handle_entity+0x20c>)
   23856:	4798      	blx	r3
					return 0;
   23858:	2000      	movs	r0, #0
   2385a:	e7eb      	b.n	23834 <_http_client_handle_entity+0xc0>
	int length = (int)module->recved_size;
   2385c:	6c47      	ldr	r7, [r0, #68]	; 0x44
	int extension = 0;
   2385e:	2300      	movs	r3, #0
   23860:	4699      	mov	r9, r3
		if (module->resp.read_length >= 0) {
   23862:	26e0      	movs	r6, #224	; 0xe0
   23864:	e00a      	b.n	2387c <_http_client_handle_entity+0x108>
				if (module->permanent == 0) {
   23866:	2341      	movs	r3, #65	; 0x41
   23868:	5ce3      	ldrb	r3, [r4, r3]
   2386a:	079b      	lsls	r3, r3, #30
   2386c:	d51b      	bpl.n	238a6 <_http_client_handle_entity+0x132>
				_http_client_move_buffer(module, buffer + 2);
   2386e:	1ca9      	adds	r1, r5, #2
   23870:	0020      	movs	r0, r4
   23872:	4b44      	ldr	r3, [pc, #272]	; (23984 <_http_client_handle_entity+0x210>)
   23874:	4798      	blx	r3
	} while(module->recved_size > 0);
   23876:	6c63      	ldr	r3, [r4, #68]	; 0x44
   23878:	2b00      	cmp	r3, #0
   2387a:	d073      	beq.n	23964 <_http_client_handle_entity+0x1f0>
		if (module->resp.read_length >= 0) {
   2387c:	59a3      	ldr	r3, [r4, r6]
   2387e:	2b00      	cmp	r3, #0
   23880:	db30      	blt.n	238e4 <_http_client_handle_entity+0x170>
			if (module->resp.read_length == 0) {
   23882:	d116      	bne.n	238b2 <_http_client_handle_entity+0x13e>
				module->resp.state = STATE_PARSE_HEADER;
   23884:	22d8      	movs	r2, #216	; 0xd8
   23886:	50a3      	str	r3, [r4, r2]
				module->resp.response_code = 0;
   23888:	320c      	adds	r2, #12
   2388a:	52a3      	strh	r3, [r4, r2]
				data.recv_chunked_data.is_complete = 1;
   2388c:	3ae3      	subs	r2, #227	; 0xe3
   2388e:	4669      	mov	r1, sp
   23890:	720a      	strb	r2, [r1, #8]
				data.recv_chunked_data.length = 0;
   23892:	9300      	str	r3, [sp, #0]
				data.recv_chunked_data.data = NULL;
   23894:	9301      	str	r3, [sp, #4]
				if (module->cb) {
   23896:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   23898:	2b00      	cmp	r3, #0
   2389a:	d0e4      	beq.n	23866 <_http_client_handle_entity+0xf2>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   2389c:	466a      	mov	r2, sp
   2389e:	2103      	movs	r1, #3
   238a0:	0020      	movs	r0, r4
   238a2:	4798      	blx	r3
   238a4:	e7df      	b.n	23866 <_http_client_handle_entity+0xf2>
					_http_client_clear_conn(module, 0);
   238a6:	2100      	movs	r1, #0
   238a8:	0020      	movs	r0, r4
   238aa:	4b35      	ldr	r3, [pc, #212]	; (23980 <_http_client_handle_entity+0x20c>)
   238ac:	4798      	blx	r3
	return 0;
   238ae:	2000      	movs	r0, #0
   238b0:	e7c0      	b.n	23834 <_http_client_handle_entity+0xc0>
			} else if (module->resp.read_length <= length) {
   238b2:	42bb      	cmp	r3, r7
   238b4:	dcdf      	bgt.n	23876 <_http_client_handle_entity+0x102>
				data.recv_chunked_data.length = module->resp.read_length;
   238b6:	9300      	str	r3, [sp, #0]
				data.recv_chunked_data.data = buffer;
   238b8:	9501      	str	r5, [sp, #4]
				data.recv_chunked_data.is_complete = 0;
   238ba:	2300      	movs	r3, #0
   238bc:	466a      	mov	r2, sp
   238be:	7213      	strb	r3, [r2, #8]
				if (module->cb) {
   238c0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   238c2:	2b00      	cmp	r3, #0
   238c4:	d002      	beq.n	238cc <_http_client_handle_entity+0x158>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   238c6:	2103      	movs	r1, #3
   238c8:	0020      	movs	r0, r4
   238ca:	4798      	blx	r3
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
   238cc:	59a3      	ldr	r3, [r4, r6]
   238ce:	1c99      	adds	r1, r3, #2
   238d0:	1869      	adds	r1, r5, r1
   238d2:	0020      	movs	r0, r4
   238d4:	4b2b      	ldr	r3, [pc, #172]	; (23984 <_http_client_handle_entity+0x210>)
   238d6:	4798      	blx	r3
				length = (int)module->recved_size;
   238d8:	6c67      	ldr	r7, [r4, #68]	; 0x44
				buffer = module->config.recv_buffer;
   238da:	6de5      	ldr	r5, [r4, #92]	; 0x5c
				module->resp.read_length = -1;
   238dc:	2301      	movs	r3, #1
   238de:	425b      	negs	r3, r3
   238e0:	51a3      	str	r3, [r4, r6]
   238e2:	e7c8      	b.n	23876 <_http_client_handle_entity+0x102>
			module->resp.read_length = 0;
   238e4:	2300      	movs	r3, #0
   238e6:	51a3      	str	r3, [r4, r6]
			for (; length > 0; buffer++, length--) {
   238e8:	2f00      	cmp	r7, #0
   238ea:	dd04      	ble.n	238f6 <_http_client_handle_entity+0x182>
				if (*buffer == '\n') {
   238ec:	782b      	ldrb	r3, [r5, #0]
   238ee:	2b0a      	cmp	r3, #10
   238f0:	d11c      	bne.n	2392c <_http_client_handle_entity+0x1b8>
					buffer++;
   238f2:	3501      	adds	r5, #1
					length--;
   238f4:	3f01      	subs	r7, #1
			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
   238f6:	59a3      	ldr	r3, [r4, r6]
   238f8:	6e22      	ldr	r2, [r4, #96]	; 0x60
   238fa:	4293      	cmp	r3, r2
   238fc:	dc39      	bgt.n	23972 <_http_client_handle_entity+0x1fe>
			if (length  == 0) {
   238fe:	2f00      	cmp	r7, #0
   23900:	d1b9      	bne.n	23876 <_http_client_handle_entity+0x102>
				module->resp.read_length = -1;
   23902:	2201      	movs	r2, #1
   23904:	4252      	negs	r2, r2
   23906:	23e0      	movs	r3, #224	; 0xe0
   23908:	50e2      	str	r2, [r4, r3]
   2390a:	e7d0      	b.n	238ae <_http_client_handle_entity+0x13a>
				} else if (*buffer >= 'a' && *buffer <= 'f') {
   2390c:	001a      	movs	r2, r3
   2390e:	3a61      	subs	r2, #97	; 0x61
   23910:	2a05      	cmp	r2, #5
   23912:	d818      	bhi.n	23946 <_http_client_handle_entity+0x1d2>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
   23914:	59a2      	ldr	r2, [r4, r6]
   23916:	0112      	lsls	r2, r2, #4
   23918:	18d3      	adds	r3, r2, r3
   2391a:	3b61      	subs	r3, #97	; 0x61
   2391c:	51a3      	str	r3, [r4, r6]
			for (; length > 0; buffer++, length--) {
   2391e:	3501      	adds	r5, #1
   23920:	3f01      	subs	r7, #1
   23922:	2f00      	cmp	r7, #0
   23924:	d020      	beq.n	23968 <_http_client_handle_entity+0x1f4>
				if (*buffer == '\n') {
   23926:	782b      	ldrb	r3, [r5, #0]
   23928:	2b0a      	cmp	r3, #10
   2392a:	d0e2      	beq.n	238f2 <_http_client_handle_entity+0x17e>
				if (extension != 0) {
   2392c:	464a      	mov	r2, r9
   2392e:	2a00      	cmp	r2, #0
   23930:	d1f5      	bne.n	2391e <_http_client_handle_entity+0x1aa>
				if (*buffer >= '0' && *buffer <= '9') {
   23932:	001a      	movs	r2, r3
   23934:	3a30      	subs	r2, #48	; 0x30
   23936:	2a09      	cmp	r2, #9
   23938:	d8e8      	bhi.n	2390c <_http_client_handle_entity+0x198>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - '0';
   2393a:	59a2      	ldr	r2, [r4, r6]
   2393c:	0112      	lsls	r2, r2, #4
   2393e:	18d3      	adds	r3, r2, r3
   23940:	3b30      	subs	r3, #48	; 0x30
   23942:	51a3      	str	r3, [r4, r6]
   23944:	e7eb      	b.n	2391e <_http_client_handle_entity+0x1aa>
				} else if (*buffer >= 'A' && *buffer <= 'F') {
   23946:	001a      	movs	r2, r3
   23948:	3a41      	subs	r2, #65	; 0x41
   2394a:	2a05      	cmp	r2, #5
   2394c:	d805      	bhi.n	2395a <_http_client_handle_entity+0x1e6>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'A';
   2394e:	59a2      	ldr	r2, [r4, r6]
   23950:	0112      	lsls	r2, r2, #4
   23952:	18d3      	adds	r3, r2, r3
   23954:	3b41      	subs	r3, #65	; 0x41
   23956:	51a3      	str	r3, [r4, r6]
   23958:	e7e1      	b.n	2391e <_http_client_handle_entity+0x1aa>
				} else if (*buffer == ';') {
   2395a:	3b3b      	subs	r3, #59	; 0x3b
   2395c:	425a      	negs	r2, r3
   2395e:	415a      	adcs	r2, r3
   23960:	4691      	mov	r9, r2
   23962:	e7dc      	b.n	2391e <_http_client_handle_entity+0x1aa>
	return 0;
   23964:	2000      	movs	r0, #0
   23966:	e765      	b.n	23834 <_http_client_handle_entity+0xc0>
			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
   23968:	23e0      	movs	r3, #224	; 0xe0
   2396a:	58e3      	ldr	r3, [r4, r3]
   2396c:	6e22      	ldr	r2, [r4, #96]	; 0x60
   2396e:	4293      	cmp	r3, r2
   23970:	ddc7      	ble.n	23902 <_http_client_handle_entity+0x18e>
				_http_client_clear_conn(module, -EOVERFLOW);
   23972:	218b      	movs	r1, #139	; 0x8b
   23974:	4249      	negs	r1, r1
   23976:	0020      	movs	r0, r4
   23978:	4b01      	ldr	r3, [pc, #4]	; (23980 <_http_client_handle_entity+0x20c>)
   2397a:	4798      	blx	r3
   2397c:	e797      	b.n	238ae <_http_client_handle_entity+0x13a>
   2397e:	46c0      	nop			; (mov r8, r8)
   23980:	00022d39 	.word	0x00022d39
   23984:	00023591 	.word	0x00023591
   23988:	0002b6bc 	.word	0x0002b6bc
   2398c:	00025f31 	.word	0x00025f31

00023990 <_http_client_handle_response>:
{
   23990:	b510      	push	{r4, lr}
	switch(module->resp.state) {
   23992:	23d8      	movs	r3, #216	; 0xd8
   23994:	58c3      	ldr	r3, [r0, r3]
   23996:	2b00      	cmp	r3, #0
   23998:	d003      	beq.n	239a2 <_http_client_handle_response+0x12>
   2399a:	2b01      	cmp	r3, #1
   2399c:	d004      	beq.n	239a8 <_http_client_handle_response+0x18>
	return 0;
   2399e:	2000      	movs	r0, #0
   239a0:	e001      	b.n	239a6 <_http_client_handle_response+0x16>
		return _http_client_handle_header(module);
   239a2:	4b03      	ldr	r3, [pc, #12]	; (239b0 <_http_client_handle_response+0x20>)
   239a4:	4798      	blx	r3
}
   239a6:	bd10      	pop	{r4, pc}
		return _http_client_handle_entity(module);
   239a8:	4b02      	ldr	r3, [pc, #8]	; (239b4 <_http_client_handle_response+0x24>)
   239aa:	4798      	blx	r3
   239ac:	e7fb      	b.n	239a6 <_http_client_handle_response+0x16>
   239ae:	46c0      	nop			; (mov r8, r8)
   239b0:	000235b5 	.word	0x000235b5
   239b4:	00023775 	.word	0x00023775

000239b8 <_http_client_recved_packet>:
{
   239b8:	b570      	push	{r4, r5, r6, lr}
   239ba:	0004      	movs	r4, r0
	module->recved_size += read_len;
   239bc:	6c43      	ldr	r3, [r0, #68]	; 0x44
   239be:	469c      	mov	ip, r3
   239c0:	4461      	add	r1, ip
   239c2:	6441      	str	r1, [r0, #68]	; 0x44
	if (module->config.timeout > 0) {
   239c4:	2358      	movs	r3, #88	; 0x58
   239c6:	5ac3      	ldrh	r3, [r0, r3]
   239c8:	2b00      	cmp	r3, #0
   239ca:	d105      	bne.n	239d8 <_http_client_recved_packet+0x20>
	while(_http_client_handle_response(module) != 0);
   239cc:	4d05      	ldr	r5, [pc, #20]	; (239e4 <_http_client_recved_packet+0x2c>)
   239ce:	0020      	movs	r0, r4
   239d0:	47a8      	blx	r5
   239d2:	2800      	cmp	r0, #0
   239d4:	d1fb      	bne.n	239ce <_http_client_recved_packet+0x16>
}
   239d6:	bd70      	pop	{r4, r5, r6, pc}
		sw_timer_disable_callback(module->config.timer_inst, module->timer_id);
   239d8:	6c81      	ldr	r1, [r0, #72]	; 0x48
   239da:	6d40      	ldr	r0, [r0, #84]	; 0x54
   239dc:	4b02      	ldr	r3, [pc, #8]	; (239e8 <_http_client_recved_packet+0x30>)
   239de:	4798      	blx	r3
   239e0:	e7f4      	b.n	239cc <_http_client_recved_packet+0x14>
   239e2:	46c0      	nop			; (mov r8, r8)
   239e4:	00023991 	.word	0x00023991
   239e8:	00023d65 	.word	0x00023d65

000239ec <http_client_socket_event_handler>:
{
   239ec:	b510      	push	{r4, lr}
   239ee:	b084      	sub	sp, #16
	struct http_client_module *module = module_ref_inst[sock];
   239f0:	0080      	lsls	r0, r0, #2
   239f2:	4b65      	ldr	r3, [pc, #404]	; (23b88 <http_client_socket_event_handler+0x19c>)
   239f4:	58c4      	ldr	r4, [r0, r3]
	if (module == NULL) {
   239f6:	2c00      	cmp	r4, #0
   239f8:	d006      	beq.n	23a08 <http_client_socket_event_handler+0x1c>
	switch (msg_type) {
   239fa:	2906      	cmp	r1, #6
   239fc:	d051      	beq.n	23aa2 <http_client_socket_event_handler+0xb6>
   239fe:	2907      	cmp	r1, #7
   23a00:	d100      	bne.n	23a04 <http_client_socket_event_handler+0x18>
   23a02:	e08a      	b.n	23b1a <http_client_socket_event_handler+0x12e>
   23a04:	2905      	cmp	r1, #5
   23a06:	d001      	beq.n	23a0c <http_client_socket_event_handler+0x20>
}
   23a08:	b004      	add	sp, #16
   23a0a:	bd10      	pop	{r4, pc}
    	data.sock_connected.result = msg_connect->s8Error;
   23a0c:	2301      	movs	r3, #1
   23a0e:	56d3      	ldrsb	r3, [r2, r3]
   23a10:	1e1a      	subs	r2, r3, #0
   23a12:	9301      	str	r3, [sp, #4]
    	if (msg_connect->s8Error < 0) {
   23a14:	db15      	blt.n	23a42 <http_client_socket_event_handler+0x56>
			if (module->cb != NULL) {
   23a16:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   23a18:	2b00      	cmp	r3, #0
   23a1a:	d003      	beq.n	23a24 <http_client_socket_event_handler+0x38>
				module->cb(module, HTTP_CLIENT_CALLBACK_SOCK_CONNECTED, &data);
   23a1c:	aa01      	add	r2, sp, #4
   23a1e:	2100      	movs	r1, #0
   23a20:	0020      	movs	r0, r4
   23a22:	4798      	blx	r3
			module->req.state = STATE_REQ_SEND_HEADER;
   23a24:	2303      	movs	r3, #3
   23a26:	66e3      	str	r3, [r4, #108]	; 0x6c
			sw_timer_enable_callback(module->config.timer_inst, module->timer_id, module->config.timeout);
   23a28:	3355      	adds	r3, #85	; 0x55
   23a2a:	5ae2      	ldrh	r2, [r4, r3]
   23a2c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   23a2e:	6d60      	ldr	r0, [r4, #84]	; 0x54
   23a30:	4b56      	ldr	r3, [pc, #344]	; (23b8c <http_client_socket_event_handler+0x1a0>)
   23a32:	4798      	blx	r3
    		_http_client_recv_packet(module);
   23a34:	0020      	movs	r0, r4
   23a36:	4b56      	ldr	r3, [pc, #344]	; (23b90 <http_client_socket_event_handler+0x1a4>)
   23a38:	4798      	blx	r3
			_http_client_request(module);
   23a3a:	0020      	movs	r0, r4
   23a3c:	4b55      	ldr	r3, [pc, #340]	; (23b94 <http_client_socket_event_handler+0x1a8>)
   23a3e:	4798      	blx	r3
   23a40:	e7e2      	b.n	23a08 <http_client_socket_event_handler+0x1c>
	switch (err) {
   23a42:	330e      	adds	r3, #14
   23a44:	b2d9      	uxtb	r1, r3
   23a46:	290e      	cmp	r1, #14
   23a48:	d81e      	bhi.n	23a88 <http_client_socket_event_handler+0x9c>
   23a4a:	008b      	lsls	r3, r1, #2
   23a4c:	4952      	ldr	r1, [pc, #328]	; (23b98 <http_client_socket_event_handler+0x1ac>)
   23a4e:	58cb      	ldr	r3, [r1, r3]
   23a50:	469f      	mov	pc, r3
			return -ENOENT;
   23a52:	2102      	movs	r1, #2
   23a54:	4249      	negs	r1, r1
   23a56:	e01d      	b.n	23a94 <http_client_socket_event_handler+0xa8>
			return -EADDRINUSE;
   23a58:	2170      	movs	r1, #112	; 0x70
   23a5a:	4249      	negs	r1, r1
   23a5c:	e01a      	b.n	23a94 <http_client_socket_event_handler+0xa8>
			return -ENOMEM;
   23a5e:	210c      	movs	r1, #12
   23a60:	4249      	negs	r1, r1
   23a62:	e017      	b.n	23a94 <http_client_socket_event_handler+0xa8>
			return -EINVAL;
   23a64:	2116      	movs	r1, #22
   23a66:	4249      	negs	r1, r1
   23a68:	e014      	b.n	23a94 <http_client_socket_event_handler+0xa8>
			return -ENOMEM;
   23a6a:	210c      	movs	r1, #12
   23a6c:	4249      	negs	r1, r1
   23a6e:	e011      	b.n	23a94 <http_client_socket_event_handler+0xa8>
			return -EDESTADDRREQ;
   23a70:	2179      	movs	r1, #121	; 0x79
   23a72:	4249      	negs	r1, r1
   23a74:	e00e      	b.n	23a94 <http_client_socket_event_handler+0xa8>
			return -ECONNRESET;
   23a76:	2168      	movs	r1, #104	; 0x68
   23a78:	4249      	negs	r1, r1
   23a7a:	e00b      	b.n	23a94 <http_client_socket_event_handler+0xa8>
			return -EAGAIN;
   23a7c:	210b      	movs	r1, #11
   23a7e:	4249      	negs	r1, r1
   23a80:	e008      	b.n	23a94 <http_client_socket_event_handler+0xa8>
			return -EBUSY; /* HW error occurred. Retry it*/
   23a82:	2110      	movs	r1, #16
   23a84:	4249      	negs	r1, r1
   23a86:	e005      	b.n	23a94 <http_client_socket_event_handler+0xa8>
			if (err < 0) {
   23a88:	2a00      	cmp	r2, #0
   23a8a:	db07      	blt.n	23a9c <http_client_socket_event_handler+0xb0>
			return 0;
   23a8c:	2100      	movs	r1, #0
   23a8e:	e001      	b.n	23a94 <http_client_socket_event_handler+0xa8>
			return -EIO;
   23a90:	2105      	movs	r1, #5
   23a92:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
   23a94:	0020      	movs	r0, r4
   23a96:	4b41      	ldr	r3, [pc, #260]	; (23b9c <http_client_socket_event_handler+0x1b0>)
   23a98:	4798      	blx	r3
   23a9a:	e7b5      	b.n	23a08 <http_client_socket_event_handler+0x1c>
				return -EIO;
   23a9c:	2105      	movs	r1, #5
   23a9e:	4249      	negs	r1, r1
   23aa0:	e7f8      	b.n	23a94 <http_client_socket_event_handler+0xa8>
    	if (msg_recv->s16BufferSize > 0) {
   23aa2:	2304      	movs	r3, #4
   23aa4:	5ed1      	ldrsh	r1, [r2, r3]
   23aa6:	2900      	cmp	r1, #0
   23aa8:	dd06      	ble.n	23ab8 <http_client_socket_event_handler+0xcc>
    		_http_client_recved_packet(module, msg_recv->s16BufferSize);
   23aaa:	0020      	movs	r0, r4
   23aac:	4b3c      	ldr	r3, [pc, #240]	; (23ba0 <http_client_socket_event_handler+0x1b4>)
   23aae:	4798      	blx	r3
		_http_client_recv_packet(module);
   23ab0:	0020      	movs	r0, r4
   23ab2:	4b37      	ldr	r3, [pc, #220]	; (23b90 <http_client_socket_event_handler+0x1a4>)
   23ab4:	4798      	blx	r3
		break;
   23ab6:	e7a7      	b.n	23a08 <http_client_socket_event_handler+0x1c>
	switch (err) {
   23ab8:	000b      	movs	r3, r1
   23aba:	330e      	adds	r3, #14
   23abc:	b29a      	uxth	r2, r3
   23abe:	2a0e      	cmp	r2, #14
   23ac0:	d81e      	bhi.n	23b00 <http_client_socket_event_handler+0x114>
   23ac2:	0093      	lsls	r3, r2, #2
   23ac4:	4a37      	ldr	r2, [pc, #220]	; (23ba4 <http_client_socket_event_handler+0x1b8>)
   23ac6:	58d3      	ldr	r3, [r2, r3]
   23ac8:	469f      	mov	pc, r3
			return -ENOENT;
   23aca:	2102      	movs	r1, #2
   23acc:	4249      	negs	r1, r1
   23ace:	e01d      	b.n	23b0c <http_client_socket_event_handler+0x120>
			return -EADDRINUSE;
   23ad0:	2170      	movs	r1, #112	; 0x70
   23ad2:	4249      	negs	r1, r1
   23ad4:	e01a      	b.n	23b0c <http_client_socket_event_handler+0x120>
			return -ENOMEM;
   23ad6:	210c      	movs	r1, #12
   23ad8:	4249      	negs	r1, r1
   23ada:	e017      	b.n	23b0c <http_client_socket_event_handler+0x120>
			return -EINVAL;
   23adc:	2116      	movs	r1, #22
   23ade:	4249      	negs	r1, r1
   23ae0:	e014      	b.n	23b0c <http_client_socket_event_handler+0x120>
			return -ENOMEM;
   23ae2:	210c      	movs	r1, #12
   23ae4:	4249      	negs	r1, r1
   23ae6:	e011      	b.n	23b0c <http_client_socket_event_handler+0x120>
			return -EDESTADDRREQ;
   23ae8:	2179      	movs	r1, #121	; 0x79
   23aea:	4249      	negs	r1, r1
   23aec:	e00e      	b.n	23b0c <http_client_socket_event_handler+0x120>
			return -ECONNRESET;
   23aee:	2168      	movs	r1, #104	; 0x68
   23af0:	4249      	negs	r1, r1
   23af2:	e00b      	b.n	23b0c <http_client_socket_event_handler+0x120>
			return -EAGAIN;
   23af4:	210b      	movs	r1, #11
   23af6:	4249      	negs	r1, r1
   23af8:	e008      	b.n	23b0c <http_client_socket_event_handler+0x120>
			return -EBUSY; /* HW error occurred. Retry it*/
   23afa:	2110      	movs	r1, #16
   23afc:	4249      	negs	r1, r1
   23afe:	e005      	b.n	23b0c <http_client_socket_event_handler+0x120>
			if (err < 0) {
   23b00:	2900      	cmp	r1, #0
   23b02:	db07      	blt.n	23b14 <http_client_socket_event_handler+0x128>
			return 0;
   23b04:	2100      	movs	r1, #0
   23b06:	e001      	b.n	23b0c <http_client_socket_event_handler+0x120>
			return -EIO;
   23b08:	2105      	movs	r1, #5
   23b0a:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_recv->s16BufferSize));
   23b0c:	0020      	movs	r0, r4
   23b0e:	4b23      	ldr	r3, [pc, #140]	; (23b9c <http_client_socket_event_handler+0x1b0>)
   23b10:	4798      	blx	r3
   23b12:	e7cd      	b.n	23ab0 <http_client_socket_event_handler+0xc4>
				return -EIO;
   23b14:	2105      	movs	r1, #5
   23b16:	4249      	negs	r1, r1
   23b18:	e7f8      	b.n	23b0c <http_client_socket_event_handler+0x120>
		send_ret = *(int16_t*)msg_data;
   23b1a:	2300      	movs	r3, #0
   23b1c:	5ed3      	ldrsh	r3, [r2, r3]
		if (send_ret < 0) {
   23b1e:	2b00      	cmp	r3, #0
   23b20:	db08      	blt.n	23b34 <http_client_socket_event_handler+0x148>
    		_http_client_request(module);
   23b22:	0020      	movs	r0, r4
   23b24:	4b1b      	ldr	r3, [pc, #108]	; (23b94 <http_client_socket_event_handler+0x1a8>)
   23b26:	4798      	blx	r3
		module->sending = 0;
   23b28:	2241      	movs	r2, #65	; 0x41
   23b2a:	5ca3      	ldrb	r3, [r4, r2]
   23b2c:	2101      	movs	r1, #1
   23b2e:	438b      	bics	r3, r1
   23b30:	54a3      	strb	r3, [r4, r2]
    	break;
   23b32:	e769      	b.n	23a08 <http_client_socket_event_handler+0x1c>
	switch (err) {
   23b34:	330e      	adds	r3, #14
   23b36:	b29a      	uxth	r2, r3
   23b38:	2a0d      	cmp	r2, #13
   23b3a:	d81e      	bhi.n	23b7a <http_client_socket_event_handler+0x18e>
   23b3c:	0093      	lsls	r3, r2, #2
   23b3e:	4a1a      	ldr	r2, [pc, #104]	; (23ba8 <http_client_socket_event_handler+0x1bc>)
   23b40:	58d3      	ldr	r3, [r2, r3]
   23b42:	469f      	mov	pc, r3
			return -ENOENT;
   23b44:	2102      	movs	r1, #2
   23b46:	4249      	negs	r1, r1
   23b48:	e019      	b.n	23b7e <http_client_socket_event_handler+0x192>
			return -EADDRINUSE;
   23b4a:	2170      	movs	r1, #112	; 0x70
   23b4c:	4249      	negs	r1, r1
   23b4e:	e016      	b.n	23b7e <http_client_socket_event_handler+0x192>
			return -ENOMEM;
   23b50:	210c      	movs	r1, #12
   23b52:	4249      	negs	r1, r1
   23b54:	e013      	b.n	23b7e <http_client_socket_event_handler+0x192>
			return -EINVAL;
   23b56:	2116      	movs	r1, #22
   23b58:	4249      	negs	r1, r1
   23b5a:	e010      	b.n	23b7e <http_client_socket_event_handler+0x192>
			return -ENOMEM;
   23b5c:	210c      	movs	r1, #12
   23b5e:	4249      	negs	r1, r1
   23b60:	e00d      	b.n	23b7e <http_client_socket_event_handler+0x192>
			return -EDESTADDRREQ;
   23b62:	2179      	movs	r1, #121	; 0x79
   23b64:	4249      	negs	r1, r1
   23b66:	e00a      	b.n	23b7e <http_client_socket_event_handler+0x192>
			return -ECONNRESET;
   23b68:	2168      	movs	r1, #104	; 0x68
   23b6a:	4249      	negs	r1, r1
   23b6c:	e007      	b.n	23b7e <http_client_socket_event_handler+0x192>
			return -EAGAIN;
   23b6e:	210b      	movs	r1, #11
   23b70:	4249      	negs	r1, r1
   23b72:	e004      	b.n	23b7e <http_client_socket_event_handler+0x192>
			return -EBUSY; /* HW error occurred. Retry it*/
   23b74:	2110      	movs	r1, #16
   23b76:	4249      	negs	r1, r1
   23b78:	e001      	b.n	23b7e <http_client_socket_event_handler+0x192>
			return -EIO;
   23b7a:	2105      	movs	r1, #5
   23b7c:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(send_ret));
   23b7e:	0020      	movs	r0, r4
   23b80:	4b06      	ldr	r3, [pc, #24]	; (23b9c <http_client_socket_event_handler+0x1b0>)
   23b82:	4798      	blx	r3
   23b84:	e7d0      	b.n	23b28 <http_client_socket_event_handler+0x13c>
   23b86:	46c0      	nop			; (mov r8, r8)
   23b88:	200040f8 	.word	0x200040f8
   23b8c:	00023d39 	.word	0x00023d39
   23b90:	00023559 	.word	0x00023559
   23b94:	00022e51 	.word	0x00022e51
   23b98:	0002b5fc 	.word	0x0002b5fc
   23b9c:	00022d39 	.word	0x00022d39
   23ba0:	000239b9 	.word	0x000239b9
   23ba4:	0002b638 	.word	0x0002b638
   23ba8:	0002b674 	.word	0x0002b674

00023bac <stream_writer_init>:
#include <string.h>
#include "iot/stream_writer.h"

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
	writer->max_size = max_length;
   23bac:	6002      	str	r2, [r0, #0]
	writer->buffer = buffer;
   23bae:	6101      	str	r1, [r0, #16]
	writer->written = 0;
   23bb0:	2200      	movs	r2, #0
   23bb2:	6042      	str	r2, [r0, #4]
	writer->write_func = func;
   23bb4:	6083      	str	r3, [r0, #8]
	writer->priv_data = priv_data;
   23bb6:	9b00      	ldr	r3, [sp, #0]
   23bb8:	60c3      	str	r3, [r0, #12]
}
   23bba:	4770      	bx	lr

00023bbc <stream_writer_send_remain>:
		stream_writer_send_8(writer, *buffer);
	}
}

void stream_writer_send_remain(struct stream_writer * writer)
{
   23bbc:	b510      	push	{r4, lr}
   23bbe:	0004      	movs	r4, r0
	if(writer->written > 0) {
   23bc0:	6842      	ldr	r2, [r0, #4]
   23bc2:	2a00      	cmp	r2, #0
   23bc4:	d100      	bne.n	23bc8 <stream_writer_send_remain+0xc>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
		writer->written = 0;
	}
}
   23bc6:	bd10      	pop	{r4, pc}
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
   23bc8:	6901      	ldr	r1, [r0, #16]
   23bca:	68c0      	ldr	r0, [r0, #12]
   23bcc:	68a3      	ldr	r3, [r4, #8]
   23bce:	4798      	blx	r3
		writer->written = 0;
   23bd0:	2300      	movs	r3, #0
   23bd2:	6063      	str	r3, [r4, #4]
}
   23bd4:	e7f7      	b.n	23bc6 <stream_writer_send_remain+0xa>
	...

00023bd8 <stream_writer_send_8>:
{
   23bd8:	b570      	push	{r4, r5, r6, lr}
   23bda:	0004      	movs	r4, r0
   23bdc:	000d      	movs	r5, r1
	int remain = writer->max_size - writer->written;
   23bde:	6803      	ldr	r3, [r0, #0]
   23be0:	6842      	ldr	r2, [r0, #4]
   23be2:	1a9b      	subs	r3, r3, r2
	if (remain < 1) {
   23be4:	2b00      	cmp	r3, #0
   23be6:	dd05      	ble.n	23bf4 <stream_writer_send_8+0x1c>
	writer->buffer[writer->written++] = (char)value;
   23be8:	6922      	ldr	r2, [r4, #16]
   23bea:	6863      	ldr	r3, [r4, #4]
   23bec:	1c59      	adds	r1, r3, #1
   23bee:	6061      	str	r1, [r4, #4]
   23bf0:	54d5      	strb	r5, [r2, r3]
}
   23bf2:	bd70      	pop	{r4, r5, r6, pc}
		stream_writer_send_remain(writer);
   23bf4:	4b01      	ldr	r3, [pc, #4]	; (23bfc <stream_writer_send_8+0x24>)
   23bf6:	4798      	blx	r3
   23bf8:	e7f6      	b.n	23be8 <stream_writer_send_8+0x10>
   23bfa:	46c0      	nop			; (mov r8, r8)
   23bfc:	00023bbd 	.word	0x00023bbd

00023c00 <stream_writer_send_buffer>:
{
   23c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23c02:	0006      	movs	r6, r0
   23c04:	000c      	movs	r4, r1
	for (; length > 0; length--, buffer++) {
   23c06:	2a00      	cmp	r2, #0
   23c08:	d008      	beq.n	23c1c <stream_writer_send_buffer+0x1c>
   23c0a:	188d      	adds	r5, r1, r2
		stream_writer_send_8(writer, *buffer);
   23c0c:	4f04      	ldr	r7, [pc, #16]	; (23c20 <stream_writer_send_buffer+0x20>)
   23c0e:	2100      	movs	r1, #0
   23c10:	5661      	ldrsb	r1, [r4, r1]
   23c12:	0030      	movs	r0, r6
   23c14:	47b8      	blx	r7
	for (; length > 0; length--, buffer++) {
   23c16:	3401      	adds	r4, #1
   23c18:	42a5      	cmp	r5, r4
   23c1a:	d1f8      	bne.n	23c0e <stream_writer_send_buffer+0xe>
}
   23c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23c1e:	46c0      	nop			; (mov r8, r8)
   23c20:	00023bd9 	.word	0x00023bd9

00023c24 <sw_timer_tcc_callback>:
 * \param[in] module Instance of the TCC.
 */
#if (SAMD21)
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
	sw_timer_tick++;
   23c24:	4a02      	ldr	r2, [pc, #8]	; (23c30 <sw_timer_tcc_callback+0xc>)
   23c26:	6813      	ldr	r3, [r2, #0]
   23c28:	3301      	adds	r3, #1
   23c2a:	6013      	str	r3, [r2, #0]
}
   23c2c:	4770      	bx	lr
   23c2e:	46c0      	nop			; (mov r8, r8)
   23c30:	20004114 	.word	0x20004114

00023c34 <sw_timer_get_config_defaults>:

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
	Assert(config);

	config->accuracy = 100;
   23c34:	2364      	movs	r3, #100	; 0x64
   23c36:	8043      	strh	r3, [r0, #2]
	config->tcc_dev = 0;
   23c38:	2300      	movs	r3, #0
   23c3a:	7003      	strb	r3, [r0, #0]
	config->tcc_callback_channel = 0;
   23c3c:	7043      	strb	r3, [r0, #1]
}
   23c3e:	4770      	bx	lr

00023c40 <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
   23c40:	b5f0      	push	{r4, r5, r6, r7, lr}
   23c42:	46c6      	mov	lr, r8
   23c44:	b500      	push	{lr}
   23c46:	b0ac      	sub	sp, #176	; 0xb0
   23c48:	000d      	movs	r5, r1
#if (SAMD21)
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
   23c4a:	466e      	mov	r6, sp
   23c4c:	4b1d      	ldr	r3, [pc, #116]	; (23cc4 <sw_timer_init+0x84>)
   23c4e:	466a      	mov	r2, sp
   23c50:	cb92      	ldmia	r3!, {r1, r4, r7}
   23c52:	c292      	stmia	r2!, {r1, r4, r7}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
   23c54:	886b      	ldrh	r3, [r5, #2]
   23c56:	6543      	str	r3, [r0, #84]	; 0x54
#if (SAMD21)
	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
   23c58:	3014      	adds	r0, #20
   23c5a:	0004      	movs	r4, r0
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
   23c5c:	782b      	ldrb	r3, [r5, #0]
   23c5e:	009b      	lsls	r3, r3, #2
   23c60:	5999      	ldr	r1, [r3, r6]
   23c62:	0017      	movs	r7, r2
   23c64:	0010      	movs	r0, r2
   23c66:	4b18      	ldr	r3, [pc, #96]	; (23cc8 <sw_timer_init+0x88>)
   23c68:	4798      	blx	r3
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
   23c6a:	2000      	movs	r0, #0
   23c6c:	4b17      	ldr	r3, [pc, #92]	; (23ccc <sw_timer_init+0x8c>)
   23c6e:	4798      	blx	r3
   23c70:	4b17      	ldr	r3, [pc, #92]	; (23cd0 <sw_timer_init+0x90>)
   23c72:	7a1b      	ldrb	r3, [r3, #8]
   23c74:	b2db      	uxtb	r3, r3
   23c76:	40d8      	lsrs	r0, r3
   23c78:	4680      	mov	r8, r0
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
   23c7a:	8869      	ldrh	r1, [r5, #2]
   23c7c:	20fa      	movs	r0, #250	; 0xfa
   23c7e:	0200      	lsls	r0, r0, #8
   23c80:	4b14      	ldr	r3, [pc, #80]	; (23cd4 <sw_timer_init+0x94>)
   23c82:	4798      	blx	r3
   23c84:	0001      	movs	r1, r0
   23c86:	4640      	mov	r0, r8
   23c88:	4b13      	ldr	r3, [pc, #76]	; (23cd8 <sw_timer_init+0x98>)
   23c8a:	4798      	blx	r3
   23c8c:	6078      	str	r0, [r7, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
   23c8e:	2305      	movs	r3, #5
   23c90:	72fb      	strb	r3, [r7, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
   23c92:	782b      	ldrb	r3, [r5, #0]
   23c94:	009b      	lsls	r3, r3, #2
   23c96:	5999      	ldr	r1, [r3, r6]
   23c98:	003a      	movs	r2, r7
   23c9a:	0020      	movs	r0, r4
   23c9c:	4b0f      	ldr	r3, [pc, #60]	; (23cdc <sw_timer_init+0x9c>)
   23c9e:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   23ca0:	786a      	ldrb	r2, [r5, #1]
   23ca2:	3208      	adds	r2, #8
   23ca4:	b2d2      	uxtb	r2, r2
   23ca6:	490e      	ldr	r1, [pc, #56]	; (23ce0 <sw_timer_init+0xa0>)
   23ca8:	0020      	movs	r0, r4
   23caa:	4b0e      	ldr	r3, [pc, #56]	; (23ce4 <sw_timer_init+0xa4>)
   23cac:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   23cae:	7869      	ldrb	r1, [r5, #1]
   23cb0:	3108      	adds	r1, #8
   23cb2:	b2c9      	uxtb	r1, r1
   23cb4:	0020      	movs	r0, r4
   23cb6:	4b0c      	ldr	r3, [pc, #48]	; (23ce8 <sw_timer_init+0xa8>)
   23cb8:	4798      	blx	r3

	ul_previous_time = rtt_read_timer_value(RTT);
	while (ul_previous_time == rtt_read_timer_value(RTT)) {
	}
#endif
}
   23cba:	b02c      	add	sp, #176	; 0xb0
   23cbc:	bc04      	pop	{r2}
   23cbe:	4690      	mov	r8, r2
   23cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   23cc2:	46c0      	nop			; (mov r8, r8)
   23cc4:	0002b7e4 	.word	0x0002b7e4
   23cc8:	0001f2f5 	.word	0x0001f2f5
   23ccc:	0001f021 	.word	0x0001f021
   23cd0:	40000400 	.word	0x40000400
   23cd4:	00024169 	.word	0x00024169
   23cd8:	00024055 	.word	0x00024055
   23cdc:	0001f441 	.word	0x0001f441
   23ce0:	00023c25 	.word	0x00023c25
   23ce4:	0001f84d 	.word	0x0001f84d
   23ce8:	0001f865 	.word	0x0001f865

00023cec <sw_timer_enable>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
   23cec:	6942      	ldr	r2, [r0, #20]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
   23cee:	2102      	movs	r1, #2
   23cf0:	6893      	ldr	r3, [r2, #8]
   23cf2:	4219      	tst	r1, r3
   23cf4:	d1fc      	bne.n	23cf0 <sw_timer_enable+0x4>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
   23cf6:	6813      	ldr	r3, [r2, #0]
   23cf8:	2102      	movs	r1, #2
   23cfa:	430b      	orrs	r3, r1
   23cfc:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 0);
	NVIC_EnableIRQ(RTT_IRQn);
	rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
#endif
}
   23cfe:	4770      	bx	lr

00023d00 <sw_timer_register_callback>:
#endif
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
		sw_timer_callback_t callback, void *context, uint32_t period)
{
   23d00:	b570      	push	{r4, r5, r6, lr}
   23d02:	0004      	movs	r4, r0
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used == 0) {
   23d04:	7805      	ldrb	r5, [r0, #0]
   23d06:	07e8      	lsls	r0, r5, #31
   23d08:	d502      	bpl.n	23d10 <sw_timer_register_callback+0x10>
			handler->period = period / module_inst->accuracy;
			handler->used = 1;
			return index;
		}
	}
	return -1;
   23d0a:	2001      	movs	r0, #1
   23d0c:	4240      	negs	r0, r0
}
   23d0e:	bd70      	pop	{r4, r5, r6, pc}
			handler->callback = callback;
   23d10:	6061      	str	r1, [r4, #4]
			handler->callback_enable = 0;
   23d12:	0029      	movs	r1, r5
   23d14:	2002      	movs	r0, #2
   23d16:	4381      	bics	r1, r0
   23d18:	7021      	strb	r1, [r4, #0]
			handler->context = context;
   23d1a:	60a2      	str	r2, [r4, #8]
			handler->period = period / module_inst->accuracy;
   23d1c:	6d61      	ldr	r1, [r4, #84]	; 0x54
   23d1e:	0018      	movs	r0, r3
   23d20:	4b04      	ldr	r3, [pc, #16]	; (23d34 <sw_timer_register_callback+0x34>)
   23d22:	4798      	blx	r3
   23d24:	60e0      	str	r0, [r4, #12]
			handler->used = 1;
   23d26:	7823      	ldrb	r3, [r4, #0]
   23d28:	2201      	movs	r2, #1
   23d2a:	4313      	orrs	r3, r2
   23d2c:	7023      	strb	r3, [r4, #0]
			return index;
   23d2e:	2000      	movs	r0, #0
   23d30:	e7ed      	b.n	23d0e <sw_timer_register_callback+0xe>
   23d32:	46c0      	nop			; (mov r8, r8)
   23d34:	00024055 	.word	0x00024055

00023d38 <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
   23d38:	b570      	push	{r4, r5, r6, lr}
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->callback_enable = 1;
   23d3a:	008b      	lsls	r3, r1, #2
   23d3c:	185d      	adds	r5, r3, r1
   23d3e:	00ad      	lsls	r5, r5, #2
   23d40:	5c29      	ldrb	r1, [r5, r0]
   23d42:	2602      	movs	r6, #2
   23d44:	4331      	orrs	r1, r6
   23d46:	5429      	strb	r1, [r5, r0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
   23d48:	1944      	adds	r4, r0, r5
   23d4a:	6d41      	ldr	r1, [r0, #84]	; 0x54
   23d4c:	0010      	movs	r0, r2
   23d4e:	4b03      	ldr	r3, [pc, #12]	; (23d5c <sw_timer_enable_callback+0x24>)
   23d50:	4798      	blx	r3
   23d52:	4b03      	ldr	r3, [pc, #12]	; (23d60 <sw_timer_enable_callback+0x28>)
   23d54:	681b      	ldr	r3, [r3, #0]
   23d56:	18c0      	adds	r0, r0, r3
   23d58:	6120      	str	r0, [r4, #16]
}
   23d5a:	bd70      	pop	{r4, r5, r6, pc}
   23d5c:	00024055 	.word	0x00024055
   23d60:	20004114 	.word	0x20004114

00023d64 <sw_timer_disable_callback>:
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->callback_enable = 0;
   23d64:	008b      	lsls	r3, r1, #2
   23d66:	1859      	adds	r1, r3, r1
   23d68:	0089      	lsls	r1, r1, #2
   23d6a:	5c0b      	ldrb	r3, [r1, r0]
   23d6c:	2202      	movs	r2, #2
   23d6e:	4393      	bics	r3, r2
   23d70:	540b      	strb	r3, [r1, r0]
}
   23d72:	4770      	bx	lr

00023d74 <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
   23d74:	b570      	push	{r4, r5, r6, lr}
   23d76:	0004      	movs	r4, r0
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
   23d78:	7803      	ldrb	r3, [r0, #0]
   23d7a:	07db      	lsls	r3, r3, #31
   23d7c:	d507      	bpl.n	23d8e <sw_timer_task+0x1a>
   23d7e:	7803      	ldrb	r3, [r0, #0]
   23d80:	079b      	lsls	r3, r3, #30
   23d82:	d504      	bpl.n	23d8e <sw_timer_task+0x1a>
			handler = &module_inst->handler[index];
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
   23d84:	4b10      	ldr	r3, [pc, #64]	; (23dc8 <sw_timer_task+0x54>)
   23d86:	681a      	ldr	r2, [r3, #0]
   23d88:	6903      	ldr	r3, [r0, #16]
   23d8a:	1a9b      	subs	r3, r3, r2
   23d8c:	d400      	bmi.n	23d90 <sw_timer_task+0x1c>
				/* Leave critical section. */
				handler->busy = 0;
			}
		}
	}
}
   23d8e:	bd70      	pop	{r4, r5, r6, pc}
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
   23d90:	7803      	ldrb	r3, [r0, #0]
   23d92:	075b      	lsls	r3, r3, #29
   23d94:	d4fb      	bmi.n	23d8e <sw_timer_task+0x1a>
				handler->busy = 1;
   23d96:	7803      	ldrb	r3, [r0, #0]
   23d98:	2104      	movs	r1, #4
   23d9a:	430b      	orrs	r3, r1
   23d9c:	7003      	strb	r3, [r0, #0]
				if (handler->period > 0) {
   23d9e:	68c3      	ldr	r3, [r0, #12]
   23da0:	2b00      	cmp	r3, #0
   23da2:	d00b      	beq.n	23dbc <sw_timer_task+0x48>
					handler->expire_time = sw_timer_tick + handler->period;
   23da4:	18d2      	adds	r2, r2, r3
   23da6:	6102      	str	r2, [r0, #16]
				handler->callback(module_inst, index, handler->context, handler->period);
   23da8:	68a2      	ldr	r2, [r4, #8]
   23daa:	2100      	movs	r1, #0
   23dac:	0020      	movs	r0, r4
   23dae:	6865      	ldr	r5, [r4, #4]
   23db0:	47a8      	blx	r5
				handler->busy = 0;
   23db2:	7823      	ldrb	r3, [r4, #0]
   23db4:	2204      	movs	r2, #4
   23db6:	4393      	bics	r3, r2
   23db8:	7023      	strb	r3, [r4, #0]
}
   23dba:	e7e8      	b.n	23d8e <sw_timer_task+0x1a>
					handler->callback_enable = 0;
   23dbc:	7802      	ldrb	r2, [r0, #0]
   23dbe:	2102      	movs	r1, #2
   23dc0:	438a      	bics	r2, r1
   23dc2:	7002      	strb	r2, [r0, #0]
   23dc4:	e7f0      	b.n	23da8 <sw_timer_task+0x34>
   23dc6:	46c0      	nop			; (mov r8, r8)
   23dc8:	20004114 	.word	0x20004114

00023dcc <main>:
 * Application entry point.
 *
 * \return program return value.
 */
int main(void)
{
   23dcc:	b510      	push	{r4, lr}
	/* Initialize the board. */
	system_init();
   23dce:	4b05      	ldr	r3, [pc, #20]	; (23de4 <main+0x18>)
   23dd0:	4798      	blx	r3

	/* Initialize the UART console. */
	InitializeSerialConsole();
   23dd2:	4b05      	ldr	r3, [pc, #20]	; (23de8 <main+0x1c>)
   23dd4:	4798      	blx	r3

	//Initialize trace capabilities
	 vTraceEnable(TRC_START);
   23dd6:	2001      	movs	r0, #1
   23dd8:	4b04      	ldr	r3, [pc, #16]	; (23dec <main+0x20>)
   23dda:	4798      	blx	r3
    // Start FreeRTOS scheduler
    vTaskStartScheduler();
   23ddc:	4b04      	ldr	r3, [pc, #16]	; (23df0 <main+0x24>)
   23dde:	4798      	blx	r3

	return 0; //Will not get here
}
   23de0:	2000      	movs	r0, #0
   23de2:	bd10      	pop	{r4, pc}
   23de4:	0001f295 	.word	0x0001f295
   23de8:	00018f25 	.word	0x00018f25
   23dec:	000155a5 	.word	0x000155a5
   23df0:	00017e91 	.word	0x00017e91

00023df4 <vApplicationDaemonTaskStartupHook>:
*					here will be called before other tasks are initilized.
* @param[in]        None
* @return           None
*****************************************************************************/
void vApplicationDaemonTaskStartupHook(void)
{
   23df4:	b530      	push	{r4, r5, lr}
   23df6:	b083      	sub	sp, #12
	SerialConsoleWriteString("\r\n\r\n-----ESE516 Main Program-----\r\n");
   23df8:	4861      	ldr	r0, [pc, #388]	; (23f80 <vApplicationDaemonTaskStartupHook+0x18c>)
   23dfa:	4c62      	ldr	r4, [pc, #392]	; (23f84 <vApplicationDaemonTaskStartupHook+0x190>)
   23dfc:	47a0      	blx	r4

	//Initialize HW that needs FreeRTOS Initialization
	SerialConsoleWriteString("\r\n\r\nInitialize HW...\r\n");
   23dfe:	4862      	ldr	r0, [pc, #392]	; (23f88 <vApplicationDaemonTaskStartupHook+0x194>)
   23e00:	47a0      	blx	r4
	if (I2cInitializeDriver() != STATUS_OK)
   23e02:	4b62      	ldr	r3, [pc, #392]	; (23f8c <vApplicationDaemonTaskStartupHook+0x198>)
   23e04:	4798      	blx	r3
   23e06:	2800      	cmp	r0, #0
   23e08:	d100      	bne.n	23e0c <vApplicationDaemonTaskStartupHook+0x18>
   23e0a:	e0ad      	b.n	23f68 <vApplicationDaemonTaskStartupHook+0x174>
	{
		SerialConsoleWriteString("Error initializing I2C Driver!\r\n");
   23e0c:	4860      	ldr	r0, [pc, #384]	; (23f90 <vApplicationDaemonTaskStartupHook+0x19c>)
   23e0e:	4b5d      	ldr	r3, [pc, #372]	; (23f84 <vApplicationDaemonTaskStartupHook+0x190>)
   23e10:	4798      	blx	r3
	else
	{
		SerialConsoleWriteString("Initialized I2C Driver!\r\n");
	}

	if(0 != InitializeSeesaw())
   23e12:	4b60      	ldr	r3, [pc, #384]	; (23f94 <vApplicationDaemonTaskStartupHook+0x1a0>)
   23e14:	4798      	blx	r3
   23e16:	2800      	cmp	r0, #0
   23e18:	d100      	bne.n	23e1c <vApplicationDaemonTaskStartupHook+0x28>
   23e1a:	e0a9      	b.n	23f70 <vApplicationDaemonTaskStartupHook+0x17c>
	{
		SerialConsoleWriteString("Error initializing Seesaw!\r\n");
   23e1c:	485e      	ldr	r0, [pc, #376]	; (23f98 <vApplicationDaemonTaskStartupHook+0x1a4>)
   23e1e:	4b59      	ldr	r3, [pc, #356]	; (23f84 <vApplicationDaemonTaskStartupHook+0x190>)
   23e20:	4798      	blx	r3
	{
		SerialConsoleWriteString("Initialized Seesaw!\r\n");
	}
	
	//initialize OLED
	if (InitializeOLEDdriver() != STATUS_OK)
   23e22:	4b5e      	ldr	r3, [pc, #376]	; (23f9c <vApplicationDaemonTaskStartupHook+0x1a8>)
   23e24:	4798      	blx	r3
   23e26:	2800      	cmp	r0, #0
   23e28:	d000      	beq.n	23e2c <vApplicationDaemonTaskStartupHook+0x38>
   23e2a:	e0a5      	b.n	23f78 <vApplicationDaemonTaskStartupHook+0x184>
	{
		SerialConsoleWriteString("Error initializing OLED Driver!\r\n");
	}
	else
	{
		SerialConsoleWriteString("Initialized OLED Driver!\r\n");
   23e2c:	485c      	ldr	r0, [pc, #368]	; (23fa0 <vApplicationDaemonTaskStartupHook+0x1ac>)
   23e2e:	4b55      	ldr	r3, [pc, #340]	; (23f84 <vApplicationDaemonTaskStartupHook+0x190>)
   23e30:	4798      	blx	r3
* @return           None
*****************************************************************************/
static void StartTasks(void)
{

	snprintf(bufferPrint, 64, "Heap before starting tasks: %d\r\n", xPortGetFreeHeapSize());
   23e32:	4b5c      	ldr	r3, [pc, #368]	; (23fa4 <vApplicationDaemonTaskStartupHook+0x1b0>)
   23e34:	4798      	blx	r3
   23e36:	0003      	movs	r3, r0
   23e38:	4c5b      	ldr	r4, [pc, #364]	; (23fa8 <vApplicationDaemonTaskStartupHook+0x1b4>)
   23e3a:	4a5c      	ldr	r2, [pc, #368]	; (23fac <vApplicationDaemonTaskStartupHook+0x1b8>)
   23e3c:	2140      	movs	r1, #64	; 0x40
   23e3e:	0020      	movs	r0, r4
   23e40:	4d5b      	ldr	r5, [pc, #364]	; (23fb0 <vApplicationDaemonTaskStartupHook+0x1bc>)
   23e42:	47a8      	blx	r5
	SerialConsoleWriteString(bufferPrint);
   23e44:	0020      	movs	r0, r4
   23e46:	4b4f      	ldr	r3, [pc, #316]	; (23f84 <vApplicationDaemonTaskStartupHook+0x190>)
   23e48:	4798      	blx	r3

	//Initialize Tasks here

	if (xTaskCreate(vCommandConsoleTask, "CLI_TASK", CLI_TASK_SIZE, NULL, CLI_PRIORITY, &cliTaskHandle) != pdPASS) {
   23e4a:	4b5a      	ldr	r3, [pc, #360]	; (23fb4 <vApplicationDaemonTaskStartupHook+0x1c0>)
   23e4c:	9301      	str	r3, [sp, #4]
   23e4e:	2304      	movs	r3, #4
   23e50:	9300      	str	r3, [sp, #0]
   23e52:	2300      	movs	r3, #0
   23e54:	22c8      	movs	r2, #200	; 0xc8
   23e56:	4958      	ldr	r1, [pc, #352]	; (23fb8 <vApplicationDaemonTaskStartupHook+0x1c4>)
   23e58:	4858      	ldr	r0, [pc, #352]	; (23fbc <vApplicationDaemonTaskStartupHook+0x1c8>)
   23e5a:	4c59      	ldr	r4, [pc, #356]	; (23fc0 <vApplicationDaemonTaskStartupHook+0x1cc>)
   23e5c:	47a0      	blx	r4
   23e5e:	2801      	cmp	r0, #1
   23e60:	d002      	beq.n	23e68 <vApplicationDaemonTaskStartupHook+0x74>
		SerialConsoleWriteString("ERR: CLI task could not be initialized!\r\n");
   23e62:	4858      	ldr	r0, [pc, #352]	; (23fc4 <vApplicationDaemonTaskStartupHook+0x1d0>)
   23e64:	4b47      	ldr	r3, [pc, #284]	; (23f84 <vApplicationDaemonTaskStartupHook+0x190>)
   23e66:	4798      	blx	r3
	}

	snprintf(bufferPrint, 64, "Heap after starting CLI: %d\r\n", xPortGetFreeHeapSize());
   23e68:	4b4e      	ldr	r3, [pc, #312]	; (23fa4 <vApplicationDaemonTaskStartupHook+0x1b0>)
   23e6a:	4798      	blx	r3
   23e6c:	0003      	movs	r3, r0
   23e6e:	4c4e      	ldr	r4, [pc, #312]	; (23fa8 <vApplicationDaemonTaskStartupHook+0x1b4>)
   23e70:	4a55      	ldr	r2, [pc, #340]	; (23fc8 <vApplicationDaemonTaskStartupHook+0x1d4>)
   23e72:	2140      	movs	r1, #64	; 0x40
   23e74:	0020      	movs	r0, r4
   23e76:	4d4e      	ldr	r5, [pc, #312]	; (23fb0 <vApplicationDaemonTaskStartupHook+0x1bc>)
   23e78:	47a8      	blx	r5
	SerialConsoleWriteString(bufferPrint);
   23e7a:	0020      	movs	r0, r4
   23e7c:	4b41      	ldr	r3, [pc, #260]	; (23f84 <vApplicationDaemonTaskStartupHook+0x190>)
   23e7e:	4798      	blx	r3


	if (xTaskCreate(vWifiTask, "WIFI_TASK", WIFI_TASK_SIZE, NULL, WIFI_PRIORITY, &wifiTaskHandle) != pdPASS) {
   23e80:	4b52      	ldr	r3, [pc, #328]	; (23fcc <vApplicationDaemonTaskStartupHook+0x1d8>)
   23e82:	9301      	str	r3, [sp, #4]
   23e84:	2303      	movs	r3, #3
   23e86:	9300      	str	r3, [sp, #0]
   23e88:	2300      	movs	r3, #0
   23e8a:	22fa      	movs	r2, #250	; 0xfa
   23e8c:	0092      	lsls	r2, r2, #2
   23e8e:	4950      	ldr	r1, [pc, #320]	; (23fd0 <vApplicationDaemonTaskStartupHook+0x1dc>)
   23e90:	4850      	ldr	r0, [pc, #320]	; (23fd4 <vApplicationDaemonTaskStartupHook+0x1e0>)
   23e92:	4c4b      	ldr	r4, [pc, #300]	; (23fc0 <vApplicationDaemonTaskStartupHook+0x1cc>)
   23e94:	47a0      	blx	r4
   23e96:	2801      	cmp	r0, #1
   23e98:	d002      	beq.n	23ea0 <vApplicationDaemonTaskStartupHook+0xac>
		SerialConsoleWriteString("ERR: WIFI task could not be initialized!\r\n");
   23e9a:	484f      	ldr	r0, [pc, #316]	; (23fd8 <vApplicationDaemonTaskStartupHook+0x1e4>)
   23e9c:	4b39      	ldr	r3, [pc, #228]	; (23f84 <vApplicationDaemonTaskStartupHook+0x190>)
   23e9e:	4798      	blx	r3
	}
	snprintf(bufferPrint, 64, "Heap after starting WIFI: %d\r\n", xPortGetFreeHeapSize());
   23ea0:	4b40      	ldr	r3, [pc, #256]	; (23fa4 <vApplicationDaemonTaskStartupHook+0x1b0>)
   23ea2:	4798      	blx	r3
   23ea4:	0003      	movs	r3, r0
   23ea6:	4c40      	ldr	r4, [pc, #256]	; (23fa8 <vApplicationDaemonTaskStartupHook+0x1b4>)
   23ea8:	4a4c      	ldr	r2, [pc, #304]	; (23fdc <vApplicationDaemonTaskStartupHook+0x1e8>)
   23eaa:	2140      	movs	r1, #64	; 0x40
   23eac:	0020      	movs	r0, r4
   23eae:	4d40      	ldr	r5, [pc, #256]	; (23fb0 <vApplicationDaemonTaskStartupHook+0x1bc>)
   23eb0:	47a8      	blx	r5
	SerialConsoleWriteString(bufferPrint);
   23eb2:	0020      	movs	r0, r4
   23eb4:	4b33      	ldr	r3, [pc, #204]	; (23f84 <vApplicationDaemonTaskStartupHook+0x190>)
   23eb6:	4798      	blx	r3


	if(xTaskCreate(vUiHandlerTask, "UI Task", UI_TASK_SIZE, NULL, UI_TASK_PRIORITY, &uiTaskHandle) != pdPASS) {
   23eb8:	4b49      	ldr	r3, [pc, #292]	; (23fe0 <vApplicationDaemonTaskStartupHook+0x1ec>)
   23eba:	9301      	str	r3, [sp, #4]
   23ebc:	2303      	movs	r3, #3
   23ebe:	9300      	str	r3, [sp, #0]
   23ec0:	2300      	movs	r3, #0
   23ec2:	22cd      	movs	r2, #205	; 0xcd
   23ec4:	0052      	lsls	r2, r2, #1
   23ec6:	4947      	ldr	r1, [pc, #284]	; (23fe4 <vApplicationDaemonTaskStartupHook+0x1f0>)
   23ec8:	4847      	ldr	r0, [pc, #284]	; (23fe8 <vApplicationDaemonTaskStartupHook+0x1f4>)
   23eca:	4c3d      	ldr	r4, [pc, #244]	; (23fc0 <vApplicationDaemonTaskStartupHook+0x1cc>)
   23ecc:	47a0      	blx	r4
   23ece:	2801      	cmp	r0, #1
   23ed0:	d002      	beq.n	23ed8 <vApplicationDaemonTaskStartupHook+0xe4>
		SerialConsoleWriteString("ERR: UI task could not be initialized!\r\n");
   23ed2:	4846      	ldr	r0, [pc, #280]	; (23fec <vApplicationDaemonTaskStartupHook+0x1f8>)
   23ed4:	4b2b      	ldr	r3, [pc, #172]	; (23f84 <vApplicationDaemonTaskStartupHook+0x190>)
   23ed6:	4798      	blx	r3
	}

	snprintf(bufferPrint, 64, "Heap after starting UI Task: %d\r\n", xPortGetFreeHeapSize());
   23ed8:	4b32      	ldr	r3, [pc, #200]	; (23fa4 <vApplicationDaemonTaskStartupHook+0x1b0>)
   23eda:	4798      	blx	r3
   23edc:	0003      	movs	r3, r0
   23ede:	4c32      	ldr	r4, [pc, #200]	; (23fa8 <vApplicationDaemonTaskStartupHook+0x1b4>)
   23ee0:	4a43      	ldr	r2, [pc, #268]	; (23ff0 <vApplicationDaemonTaskStartupHook+0x1fc>)
   23ee2:	2140      	movs	r1, #64	; 0x40
   23ee4:	0020      	movs	r0, r4
   23ee6:	4d32      	ldr	r5, [pc, #200]	; (23fb0 <vApplicationDaemonTaskStartupHook+0x1bc>)
   23ee8:	47a8      	blx	r5
	SerialConsoleWriteString(bufferPrint);
   23eea:	0020      	movs	r0, r4
   23eec:	4b25      	ldr	r3, [pc, #148]	; (23f84 <vApplicationDaemonTaskStartupHook+0x190>)
   23eee:	4798      	blx	r3

	if(xTaskCreate(vControlHandlerTask, "Control Task", CONTROL_TASK_SIZE, NULL, CONTROL_TASK_PRIORITY, &controlTaskHandle) != pdPASS) {
   23ef0:	4b40      	ldr	r3, [pc, #256]	; (23ff4 <vApplicationDaemonTaskStartupHook+0x200>)
   23ef2:	9301      	str	r3, [sp, #4]
   23ef4:	2304      	movs	r3, #4
   23ef6:	9300      	str	r3, [sp, #0]
   23ef8:	2300      	movs	r3, #0
   23efa:	2280      	movs	r2, #128	; 0x80
   23efc:	0052      	lsls	r2, r2, #1
   23efe:	493e      	ldr	r1, [pc, #248]	; (23ff8 <vApplicationDaemonTaskStartupHook+0x204>)
   23f00:	483e      	ldr	r0, [pc, #248]	; (23ffc <vApplicationDaemonTaskStartupHook+0x208>)
   23f02:	4c2f      	ldr	r4, [pc, #188]	; (23fc0 <vApplicationDaemonTaskStartupHook+0x1cc>)
   23f04:	47a0      	blx	r4
   23f06:	2801      	cmp	r0, #1
   23f08:	d002      	beq.n	23f10 <vApplicationDaemonTaskStartupHook+0x11c>
		SerialConsoleWriteString("ERR: Control task could not be initialized!\r\n");
   23f0a:	483d      	ldr	r0, [pc, #244]	; (24000 <vApplicationDaemonTaskStartupHook+0x20c>)
   23f0c:	4b1d      	ldr	r3, [pc, #116]	; (23f84 <vApplicationDaemonTaskStartupHook+0x190>)
   23f0e:	4798      	blx	r3
	}
	snprintf(bufferPrint, 64, "Heap after starting Control Task: %d\r\n", xPortGetFreeHeapSize());
   23f10:	4b24      	ldr	r3, [pc, #144]	; (23fa4 <vApplicationDaemonTaskStartupHook+0x1b0>)
   23f12:	4798      	blx	r3
   23f14:	0003      	movs	r3, r0
   23f16:	4c24      	ldr	r4, [pc, #144]	; (23fa8 <vApplicationDaemonTaskStartupHook+0x1b4>)
   23f18:	4a3a      	ldr	r2, [pc, #232]	; (24004 <vApplicationDaemonTaskStartupHook+0x210>)
   23f1a:	2140      	movs	r1, #64	; 0x40
   23f1c:	0020      	movs	r0, r4
   23f1e:	4d24      	ldr	r5, [pc, #144]	; (23fb0 <vApplicationDaemonTaskStartupHook+0x1bc>)
   23f20:	47a8      	blx	r5
	SerialConsoleWriteString(bufferPrint);
   23f22:	0020      	movs	r0, r4
   23f24:	4b17      	ldr	r3, [pc, #92]	; (23f84 <vApplicationDaemonTaskStartupHook+0x190>)
   23f26:	4798      	blx	r3

	if(xTaskCreate(vLightReadTask, "Light Task", LIGHT_TASK_SIZE, NULL, LIGHTSENSOR_PRIORITY, &lightTaskHandle) != pdPASS) {
   23f28:	4b37      	ldr	r3, [pc, #220]	; (24008 <vApplicationDaemonTaskStartupHook+0x214>)
   23f2a:	9301      	str	r3, [sp, #4]
   23f2c:	2301      	movs	r3, #1
   23f2e:	9300      	str	r3, [sp, #0]
   23f30:	2300      	movs	r3, #0
   23f32:	22c8      	movs	r2, #200	; 0xc8
   23f34:	4935      	ldr	r1, [pc, #212]	; (2400c <vApplicationDaemonTaskStartupHook+0x218>)
   23f36:	4836      	ldr	r0, [pc, #216]	; (24010 <vApplicationDaemonTaskStartupHook+0x21c>)
   23f38:	4c21      	ldr	r4, [pc, #132]	; (23fc0 <vApplicationDaemonTaskStartupHook+0x1cc>)
   23f3a:	47a0      	blx	r4
   23f3c:	2801      	cmp	r0, #1
   23f3e:	d002      	beq.n	23f46 <vApplicationDaemonTaskStartupHook+0x152>
		SerialConsoleWriteString("ERR: Light task could not be initialized!\r\n");
   23f40:	4834      	ldr	r0, [pc, #208]	; (24014 <vApplicationDaemonTaskStartupHook+0x220>)
   23f42:	4b10      	ldr	r3, [pc, #64]	; (23f84 <vApplicationDaemonTaskStartupHook+0x190>)
   23f44:	4798      	blx	r3
	}
	snprintf(bufferPrint, 64, "Heap after starting Light Task: %d\r\n", xPortGetFreeHeapSize());
   23f46:	4b17      	ldr	r3, [pc, #92]	; (23fa4 <vApplicationDaemonTaskStartupHook+0x1b0>)
   23f48:	4798      	blx	r3
   23f4a:	0003      	movs	r3, r0
   23f4c:	4c16      	ldr	r4, [pc, #88]	; (23fa8 <vApplicationDaemonTaskStartupHook+0x1b4>)
   23f4e:	4a32      	ldr	r2, [pc, #200]	; (24018 <vApplicationDaemonTaskStartupHook+0x224>)
   23f50:	2140      	movs	r1, #64	; 0x40
   23f52:	0020      	movs	r0, r4
   23f54:	4d16      	ldr	r5, [pc, #88]	; (23fb0 <vApplicationDaemonTaskStartupHook+0x1bc>)
   23f56:	47a8      	blx	r5
	SerialConsoleWriteString(bufferPrint);
   23f58:	0020      	movs	r0, r4
   23f5a:	4b0a      	ldr	r3, [pc, #40]	; (23f84 <vApplicationDaemonTaskStartupHook+0x190>)
   23f5c:	4798      	blx	r3
	vTaskSuspend(daemonTaskHandle);
   23f5e:	2000      	movs	r0, #0
   23f60:	4b2e      	ldr	r3, [pc, #184]	; (2401c <vApplicationDaemonTaskStartupHook+0x228>)
   23f62:	4798      	blx	r3
}
   23f64:	b003      	add	sp, #12
   23f66:	bd30      	pop	{r4, r5, pc}
		SerialConsoleWriteString("Initialized I2C Driver!\r\n");
   23f68:	482d      	ldr	r0, [pc, #180]	; (24020 <vApplicationDaemonTaskStartupHook+0x22c>)
   23f6a:	4b06      	ldr	r3, [pc, #24]	; (23f84 <vApplicationDaemonTaskStartupHook+0x190>)
   23f6c:	4798      	blx	r3
   23f6e:	e750      	b.n	23e12 <vApplicationDaemonTaskStartupHook+0x1e>
		SerialConsoleWriteString("Initialized Seesaw!\r\n");
   23f70:	482c      	ldr	r0, [pc, #176]	; (24024 <vApplicationDaemonTaskStartupHook+0x230>)
   23f72:	4b04      	ldr	r3, [pc, #16]	; (23f84 <vApplicationDaemonTaskStartupHook+0x190>)
   23f74:	4798      	blx	r3
   23f76:	e754      	b.n	23e22 <vApplicationDaemonTaskStartupHook+0x2e>
		SerialConsoleWriteString("Error initializing OLED Driver!\r\n");
   23f78:	482b      	ldr	r0, [pc, #172]	; (24028 <vApplicationDaemonTaskStartupHook+0x234>)
   23f7a:	4b02      	ldr	r3, [pc, #8]	; (23f84 <vApplicationDaemonTaskStartupHook+0x190>)
   23f7c:	4798      	blx	r3
   23f7e:	e758      	b.n	23e32 <vApplicationDaemonTaskStartupHook+0x3e>
   23f80:	0002b7f0 	.word	0x0002b7f0
   23f84:	0001904d 	.word	0x0001904d
   23f88:	0002b814 	.word	0x0002b814
   23f8c:	00014325 	.word	0x00014325
   23f90:	0002b82c 	.word	0x0002b82c
   23f94:	00014c21 	.word	0x00014c21
   23f98:	0002b86c 	.word	0x0002b86c
   23f9c:	00014975 	.word	0x00014975
   23fa0:	0002b8c8 	.word	0x0002b8c8
   23fa4:	000168f1 	.word	0x000168f1
   23fa8:	20005550 	.word	0x20005550
   23fac:	0002b8e4 	.word	0x0002b8e4
   23fb0:	00025f69 	.word	0x00025f69
   23fb4:	20004118 	.word	0x20004118
   23fb8:	0002b908 	.word	0x0002b908
   23fbc:	00012e4d 	.word	0x00012e4d
   23fc0:	00017be5 	.word	0x00017be5
   23fc4:	0002b914 	.word	0x0002b914
   23fc8:	0002b940 	.word	0x0002b940
   23fcc:	20004128 	.word	0x20004128
   23fd0:	0002b960 	.word	0x0002b960
   23fd4:	00013db1 	.word	0x00013db1
   23fd8:	0002b96c 	.word	0x0002b96c
   23fdc:	0002b998 	.word	0x0002b998
   23fe0:	20004124 	.word	0x20004124
   23fe4:	0002b9b8 	.word	0x0002b9b8
   23fe8:	0001323d 	.word	0x0001323d
   23fec:	0002b9c0 	.word	0x0002b9c0
   23ff0:	0002b9ec 	.word	0x0002b9ec
   23ff4:	2000411c 	.word	0x2000411c
   23ff8:	0002ba10 	.word	0x0002ba10
   23ffc:	0001301d 	.word	0x0001301d
   24000:	0002ba20 	.word	0x0002ba20
   24004:	0002ba50 	.word	0x0002ba50
   24008:	20004120 	.word	0x20004120
   2400c:	0002ba78 	.word	0x0002ba78
   24010:	000131d1 	.word	0x000131d1
   24014:	0002ba84 	.word	0x0002ba84
   24018:	0002bab0 	.word	0x0002bab0
   2401c:	00018375 	.word	0x00018375
   24020:	0002b850 	.word	0x0002b850
   24024:	0002b88c 	.word	0x0002b88c
   24028:	0002b8a4 	.word	0x0002b8a4

0002402c <vApplicationMallocFailedHook>:
	//stdio_serial_init(GetUsartModule(), EDBG_CDC_MODULE, &usart_conf);
	//usart_enable(&cdc_uart_module);
}

void vApplicationMallocFailedHook(void)
{
   2402c:	b510      	push	{r4, lr}
	SerialConsoleWriteString("Error on memory allocation on FREERTOS!\r\n");
   2402e:	4802      	ldr	r0, [pc, #8]	; (24038 <vApplicationMallocFailedHook+0xc>)
   24030:	4b02      	ldr	r3, [pc, #8]	; (2403c <vApplicationMallocFailedHook+0x10>)
   24032:	4798      	blx	r3
   24034:	e7fe      	b.n	24034 <vApplicationMallocFailedHook+0x8>
   24036:	46c0      	nop			; (mov r8, r8)
   24038:	0002bad8 	.word	0x0002bad8
   2403c:	0001904d 	.word	0x0001904d

00024040 <vApplicationStackOverflowHook>:
	while(1);
}

void vApplicationStackOverflowHook(void)
{
   24040:	b510      	push	{r4, lr}
	SerialConsoleWriteString("Error on stack overflow on FREERTOS!\r\n");
   24042:	4802      	ldr	r0, [pc, #8]	; (2404c <vApplicationStackOverflowHook+0xc>)
   24044:	4b02      	ldr	r3, [pc, #8]	; (24050 <vApplicationStackOverflowHook+0x10>)
   24046:	4798      	blx	r3
   24048:	e7fe      	b.n	24048 <vApplicationStackOverflowHook+0x8>
   2404a:	46c0      	nop			; (mov r8, r8)
   2404c:	0002bb04 	.word	0x0002bb04
   24050:	0001904d 	.word	0x0001904d

00024054 <__udivsi3>:
   24054:	2200      	movs	r2, #0
   24056:	0843      	lsrs	r3, r0, #1
   24058:	428b      	cmp	r3, r1
   2405a:	d374      	bcc.n	24146 <__udivsi3+0xf2>
   2405c:	0903      	lsrs	r3, r0, #4
   2405e:	428b      	cmp	r3, r1
   24060:	d35f      	bcc.n	24122 <__udivsi3+0xce>
   24062:	0a03      	lsrs	r3, r0, #8
   24064:	428b      	cmp	r3, r1
   24066:	d344      	bcc.n	240f2 <__udivsi3+0x9e>
   24068:	0b03      	lsrs	r3, r0, #12
   2406a:	428b      	cmp	r3, r1
   2406c:	d328      	bcc.n	240c0 <__udivsi3+0x6c>
   2406e:	0c03      	lsrs	r3, r0, #16
   24070:	428b      	cmp	r3, r1
   24072:	d30d      	bcc.n	24090 <__udivsi3+0x3c>
   24074:	22ff      	movs	r2, #255	; 0xff
   24076:	0209      	lsls	r1, r1, #8
   24078:	ba12      	rev	r2, r2
   2407a:	0c03      	lsrs	r3, r0, #16
   2407c:	428b      	cmp	r3, r1
   2407e:	d302      	bcc.n	24086 <__udivsi3+0x32>
   24080:	1212      	asrs	r2, r2, #8
   24082:	0209      	lsls	r1, r1, #8
   24084:	d065      	beq.n	24152 <__udivsi3+0xfe>
   24086:	0b03      	lsrs	r3, r0, #12
   24088:	428b      	cmp	r3, r1
   2408a:	d319      	bcc.n	240c0 <__udivsi3+0x6c>
   2408c:	e000      	b.n	24090 <__udivsi3+0x3c>
   2408e:	0a09      	lsrs	r1, r1, #8
   24090:	0bc3      	lsrs	r3, r0, #15
   24092:	428b      	cmp	r3, r1
   24094:	d301      	bcc.n	2409a <__udivsi3+0x46>
   24096:	03cb      	lsls	r3, r1, #15
   24098:	1ac0      	subs	r0, r0, r3
   2409a:	4152      	adcs	r2, r2
   2409c:	0b83      	lsrs	r3, r0, #14
   2409e:	428b      	cmp	r3, r1
   240a0:	d301      	bcc.n	240a6 <__udivsi3+0x52>
   240a2:	038b      	lsls	r3, r1, #14
   240a4:	1ac0      	subs	r0, r0, r3
   240a6:	4152      	adcs	r2, r2
   240a8:	0b43      	lsrs	r3, r0, #13
   240aa:	428b      	cmp	r3, r1
   240ac:	d301      	bcc.n	240b2 <__udivsi3+0x5e>
   240ae:	034b      	lsls	r3, r1, #13
   240b0:	1ac0      	subs	r0, r0, r3
   240b2:	4152      	adcs	r2, r2
   240b4:	0b03      	lsrs	r3, r0, #12
   240b6:	428b      	cmp	r3, r1
   240b8:	d301      	bcc.n	240be <__udivsi3+0x6a>
   240ba:	030b      	lsls	r3, r1, #12
   240bc:	1ac0      	subs	r0, r0, r3
   240be:	4152      	adcs	r2, r2
   240c0:	0ac3      	lsrs	r3, r0, #11
   240c2:	428b      	cmp	r3, r1
   240c4:	d301      	bcc.n	240ca <__udivsi3+0x76>
   240c6:	02cb      	lsls	r3, r1, #11
   240c8:	1ac0      	subs	r0, r0, r3
   240ca:	4152      	adcs	r2, r2
   240cc:	0a83      	lsrs	r3, r0, #10
   240ce:	428b      	cmp	r3, r1
   240d0:	d301      	bcc.n	240d6 <__udivsi3+0x82>
   240d2:	028b      	lsls	r3, r1, #10
   240d4:	1ac0      	subs	r0, r0, r3
   240d6:	4152      	adcs	r2, r2
   240d8:	0a43      	lsrs	r3, r0, #9
   240da:	428b      	cmp	r3, r1
   240dc:	d301      	bcc.n	240e2 <__udivsi3+0x8e>
   240de:	024b      	lsls	r3, r1, #9
   240e0:	1ac0      	subs	r0, r0, r3
   240e2:	4152      	adcs	r2, r2
   240e4:	0a03      	lsrs	r3, r0, #8
   240e6:	428b      	cmp	r3, r1
   240e8:	d301      	bcc.n	240ee <__udivsi3+0x9a>
   240ea:	020b      	lsls	r3, r1, #8
   240ec:	1ac0      	subs	r0, r0, r3
   240ee:	4152      	adcs	r2, r2
   240f0:	d2cd      	bcs.n	2408e <__udivsi3+0x3a>
   240f2:	09c3      	lsrs	r3, r0, #7
   240f4:	428b      	cmp	r3, r1
   240f6:	d301      	bcc.n	240fc <__udivsi3+0xa8>
   240f8:	01cb      	lsls	r3, r1, #7
   240fa:	1ac0      	subs	r0, r0, r3
   240fc:	4152      	adcs	r2, r2
   240fe:	0983      	lsrs	r3, r0, #6
   24100:	428b      	cmp	r3, r1
   24102:	d301      	bcc.n	24108 <__udivsi3+0xb4>
   24104:	018b      	lsls	r3, r1, #6
   24106:	1ac0      	subs	r0, r0, r3
   24108:	4152      	adcs	r2, r2
   2410a:	0943      	lsrs	r3, r0, #5
   2410c:	428b      	cmp	r3, r1
   2410e:	d301      	bcc.n	24114 <__udivsi3+0xc0>
   24110:	014b      	lsls	r3, r1, #5
   24112:	1ac0      	subs	r0, r0, r3
   24114:	4152      	adcs	r2, r2
   24116:	0903      	lsrs	r3, r0, #4
   24118:	428b      	cmp	r3, r1
   2411a:	d301      	bcc.n	24120 <__udivsi3+0xcc>
   2411c:	010b      	lsls	r3, r1, #4
   2411e:	1ac0      	subs	r0, r0, r3
   24120:	4152      	adcs	r2, r2
   24122:	08c3      	lsrs	r3, r0, #3
   24124:	428b      	cmp	r3, r1
   24126:	d301      	bcc.n	2412c <__udivsi3+0xd8>
   24128:	00cb      	lsls	r3, r1, #3
   2412a:	1ac0      	subs	r0, r0, r3
   2412c:	4152      	adcs	r2, r2
   2412e:	0883      	lsrs	r3, r0, #2
   24130:	428b      	cmp	r3, r1
   24132:	d301      	bcc.n	24138 <__udivsi3+0xe4>
   24134:	008b      	lsls	r3, r1, #2
   24136:	1ac0      	subs	r0, r0, r3
   24138:	4152      	adcs	r2, r2
   2413a:	0843      	lsrs	r3, r0, #1
   2413c:	428b      	cmp	r3, r1
   2413e:	d301      	bcc.n	24144 <__udivsi3+0xf0>
   24140:	004b      	lsls	r3, r1, #1
   24142:	1ac0      	subs	r0, r0, r3
   24144:	4152      	adcs	r2, r2
   24146:	1a41      	subs	r1, r0, r1
   24148:	d200      	bcs.n	2414c <__udivsi3+0xf8>
   2414a:	4601      	mov	r1, r0
   2414c:	4152      	adcs	r2, r2
   2414e:	4610      	mov	r0, r2
   24150:	4770      	bx	lr
   24152:	e7ff      	b.n	24154 <__udivsi3+0x100>
   24154:	b501      	push	{r0, lr}
   24156:	2000      	movs	r0, #0
   24158:	f000 f8f0 	bl	2433c <__aeabi_idiv0>
   2415c:	bd02      	pop	{r1, pc}
   2415e:	46c0      	nop			; (mov r8, r8)

00024160 <__aeabi_uidivmod>:
   24160:	2900      	cmp	r1, #0
   24162:	d0f7      	beq.n	24154 <__udivsi3+0x100>
   24164:	e776      	b.n	24054 <__udivsi3>
   24166:	4770      	bx	lr

00024168 <__divsi3>:
   24168:	4603      	mov	r3, r0
   2416a:	430b      	orrs	r3, r1
   2416c:	d47f      	bmi.n	2426e <__divsi3+0x106>
   2416e:	2200      	movs	r2, #0
   24170:	0843      	lsrs	r3, r0, #1
   24172:	428b      	cmp	r3, r1
   24174:	d374      	bcc.n	24260 <__divsi3+0xf8>
   24176:	0903      	lsrs	r3, r0, #4
   24178:	428b      	cmp	r3, r1
   2417a:	d35f      	bcc.n	2423c <__divsi3+0xd4>
   2417c:	0a03      	lsrs	r3, r0, #8
   2417e:	428b      	cmp	r3, r1
   24180:	d344      	bcc.n	2420c <__divsi3+0xa4>
   24182:	0b03      	lsrs	r3, r0, #12
   24184:	428b      	cmp	r3, r1
   24186:	d328      	bcc.n	241da <__divsi3+0x72>
   24188:	0c03      	lsrs	r3, r0, #16
   2418a:	428b      	cmp	r3, r1
   2418c:	d30d      	bcc.n	241aa <__divsi3+0x42>
   2418e:	22ff      	movs	r2, #255	; 0xff
   24190:	0209      	lsls	r1, r1, #8
   24192:	ba12      	rev	r2, r2
   24194:	0c03      	lsrs	r3, r0, #16
   24196:	428b      	cmp	r3, r1
   24198:	d302      	bcc.n	241a0 <__divsi3+0x38>
   2419a:	1212      	asrs	r2, r2, #8
   2419c:	0209      	lsls	r1, r1, #8
   2419e:	d065      	beq.n	2426c <__divsi3+0x104>
   241a0:	0b03      	lsrs	r3, r0, #12
   241a2:	428b      	cmp	r3, r1
   241a4:	d319      	bcc.n	241da <__divsi3+0x72>
   241a6:	e000      	b.n	241aa <__divsi3+0x42>
   241a8:	0a09      	lsrs	r1, r1, #8
   241aa:	0bc3      	lsrs	r3, r0, #15
   241ac:	428b      	cmp	r3, r1
   241ae:	d301      	bcc.n	241b4 <__divsi3+0x4c>
   241b0:	03cb      	lsls	r3, r1, #15
   241b2:	1ac0      	subs	r0, r0, r3
   241b4:	4152      	adcs	r2, r2
   241b6:	0b83      	lsrs	r3, r0, #14
   241b8:	428b      	cmp	r3, r1
   241ba:	d301      	bcc.n	241c0 <__divsi3+0x58>
   241bc:	038b      	lsls	r3, r1, #14
   241be:	1ac0      	subs	r0, r0, r3
   241c0:	4152      	adcs	r2, r2
   241c2:	0b43      	lsrs	r3, r0, #13
   241c4:	428b      	cmp	r3, r1
   241c6:	d301      	bcc.n	241cc <__divsi3+0x64>
   241c8:	034b      	lsls	r3, r1, #13
   241ca:	1ac0      	subs	r0, r0, r3
   241cc:	4152      	adcs	r2, r2
   241ce:	0b03      	lsrs	r3, r0, #12
   241d0:	428b      	cmp	r3, r1
   241d2:	d301      	bcc.n	241d8 <__divsi3+0x70>
   241d4:	030b      	lsls	r3, r1, #12
   241d6:	1ac0      	subs	r0, r0, r3
   241d8:	4152      	adcs	r2, r2
   241da:	0ac3      	lsrs	r3, r0, #11
   241dc:	428b      	cmp	r3, r1
   241de:	d301      	bcc.n	241e4 <__divsi3+0x7c>
   241e0:	02cb      	lsls	r3, r1, #11
   241e2:	1ac0      	subs	r0, r0, r3
   241e4:	4152      	adcs	r2, r2
   241e6:	0a83      	lsrs	r3, r0, #10
   241e8:	428b      	cmp	r3, r1
   241ea:	d301      	bcc.n	241f0 <__divsi3+0x88>
   241ec:	028b      	lsls	r3, r1, #10
   241ee:	1ac0      	subs	r0, r0, r3
   241f0:	4152      	adcs	r2, r2
   241f2:	0a43      	lsrs	r3, r0, #9
   241f4:	428b      	cmp	r3, r1
   241f6:	d301      	bcc.n	241fc <__divsi3+0x94>
   241f8:	024b      	lsls	r3, r1, #9
   241fa:	1ac0      	subs	r0, r0, r3
   241fc:	4152      	adcs	r2, r2
   241fe:	0a03      	lsrs	r3, r0, #8
   24200:	428b      	cmp	r3, r1
   24202:	d301      	bcc.n	24208 <__divsi3+0xa0>
   24204:	020b      	lsls	r3, r1, #8
   24206:	1ac0      	subs	r0, r0, r3
   24208:	4152      	adcs	r2, r2
   2420a:	d2cd      	bcs.n	241a8 <__divsi3+0x40>
   2420c:	09c3      	lsrs	r3, r0, #7
   2420e:	428b      	cmp	r3, r1
   24210:	d301      	bcc.n	24216 <__divsi3+0xae>
   24212:	01cb      	lsls	r3, r1, #7
   24214:	1ac0      	subs	r0, r0, r3
   24216:	4152      	adcs	r2, r2
   24218:	0983      	lsrs	r3, r0, #6
   2421a:	428b      	cmp	r3, r1
   2421c:	d301      	bcc.n	24222 <__divsi3+0xba>
   2421e:	018b      	lsls	r3, r1, #6
   24220:	1ac0      	subs	r0, r0, r3
   24222:	4152      	adcs	r2, r2
   24224:	0943      	lsrs	r3, r0, #5
   24226:	428b      	cmp	r3, r1
   24228:	d301      	bcc.n	2422e <__divsi3+0xc6>
   2422a:	014b      	lsls	r3, r1, #5
   2422c:	1ac0      	subs	r0, r0, r3
   2422e:	4152      	adcs	r2, r2
   24230:	0903      	lsrs	r3, r0, #4
   24232:	428b      	cmp	r3, r1
   24234:	d301      	bcc.n	2423a <__divsi3+0xd2>
   24236:	010b      	lsls	r3, r1, #4
   24238:	1ac0      	subs	r0, r0, r3
   2423a:	4152      	adcs	r2, r2
   2423c:	08c3      	lsrs	r3, r0, #3
   2423e:	428b      	cmp	r3, r1
   24240:	d301      	bcc.n	24246 <__divsi3+0xde>
   24242:	00cb      	lsls	r3, r1, #3
   24244:	1ac0      	subs	r0, r0, r3
   24246:	4152      	adcs	r2, r2
   24248:	0883      	lsrs	r3, r0, #2
   2424a:	428b      	cmp	r3, r1
   2424c:	d301      	bcc.n	24252 <__divsi3+0xea>
   2424e:	008b      	lsls	r3, r1, #2
   24250:	1ac0      	subs	r0, r0, r3
   24252:	4152      	adcs	r2, r2
   24254:	0843      	lsrs	r3, r0, #1
   24256:	428b      	cmp	r3, r1
   24258:	d301      	bcc.n	2425e <__divsi3+0xf6>
   2425a:	004b      	lsls	r3, r1, #1
   2425c:	1ac0      	subs	r0, r0, r3
   2425e:	4152      	adcs	r2, r2
   24260:	1a41      	subs	r1, r0, r1
   24262:	d200      	bcs.n	24266 <__divsi3+0xfe>
   24264:	4601      	mov	r1, r0
   24266:	4152      	adcs	r2, r2
   24268:	4610      	mov	r0, r2
   2426a:	4770      	bx	lr
   2426c:	e05d      	b.n	2432a <__divsi3+0x1c2>
   2426e:	0fca      	lsrs	r2, r1, #31
   24270:	d000      	beq.n	24274 <__divsi3+0x10c>
   24272:	4249      	negs	r1, r1
   24274:	1003      	asrs	r3, r0, #32
   24276:	d300      	bcc.n	2427a <__divsi3+0x112>
   24278:	4240      	negs	r0, r0
   2427a:	4053      	eors	r3, r2
   2427c:	2200      	movs	r2, #0
   2427e:	469c      	mov	ip, r3
   24280:	0903      	lsrs	r3, r0, #4
   24282:	428b      	cmp	r3, r1
   24284:	d32d      	bcc.n	242e2 <__divsi3+0x17a>
   24286:	0a03      	lsrs	r3, r0, #8
   24288:	428b      	cmp	r3, r1
   2428a:	d312      	bcc.n	242b2 <__divsi3+0x14a>
   2428c:	22fc      	movs	r2, #252	; 0xfc
   2428e:	0189      	lsls	r1, r1, #6
   24290:	ba12      	rev	r2, r2
   24292:	0a03      	lsrs	r3, r0, #8
   24294:	428b      	cmp	r3, r1
   24296:	d30c      	bcc.n	242b2 <__divsi3+0x14a>
   24298:	0189      	lsls	r1, r1, #6
   2429a:	1192      	asrs	r2, r2, #6
   2429c:	428b      	cmp	r3, r1
   2429e:	d308      	bcc.n	242b2 <__divsi3+0x14a>
   242a0:	0189      	lsls	r1, r1, #6
   242a2:	1192      	asrs	r2, r2, #6
   242a4:	428b      	cmp	r3, r1
   242a6:	d304      	bcc.n	242b2 <__divsi3+0x14a>
   242a8:	0189      	lsls	r1, r1, #6
   242aa:	d03a      	beq.n	24322 <__divsi3+0x1ba>
   242ac:	1192      	asrs	r2, r2, #6
   242ae:	e000      	b.n	242b2 <__divsi3+0x14a>
   242b0:	0989      	lsrs	r1, r1, #6
   242b2:	09c3      	lsrs	r3, r0, #7
   242b4:	428b      	cmp	r3, r1
   242b6:	d301      	bcc.n	242bc <__divsi3+0x154>
   242b8:	01cb      	lsls	r3, r1, #7
   242ba:	1ac0      	subs	r0, r0, r3
   242bc:	4152      	adcs	r2, r2
   242be:	0983      	lsrs	r3, r0, #6
   242c0:	428b      	cmp	r3, r1
   242c2:	d301      	bcc.n	242c8 <__divsi3+0x160>
   242c4:	018b      	lsls	r3, r1, #6
   242c6:	1ac0      	subs	r0, r0, r3
   242c8:	4152      	adcs	r2, r2
   242ca:	0943      	lsrs	r3, r0, #5
   242cc:	428b      	cmp	r3, r1
   242ce:	d301      	bcc.n	242d4 <__divsi3+0x16c>
   242d0:	014b      	lsls	r3, r1, #5
   242d2:	1ac0      	subs	r0, r0, r3
   242d4:	4152      	adcs	r2, r2
   242d6:	0903      	lsrs	r3, r0, #4
   242d8:	428b      	cmp	r3, r1
   242da:	d301      	bcc.n	242e0 <__divsi3+0x178>
   242dc:	010b      	lsls	r3, r1, #4
   242de:	1ac0      	subs	r0, r0, r3
   242e0:	4152      	adcs	r2, r2
   242e2:	08c3      	lsrs	r3, r0, #3
   242e4:	428b      	cmp	r3, r1
   242e6:	d301      	bcc.n	242ec <__divsi3+0x184>
   242e8:	00cb      	lsls	r3, r1, #3
   242ea:	1ac0      	subs	r0, r0, r3
   242ec:	4152      	adcs	r2, r2
   242ee:	0883      	lsrs	r3, r0, #2
   242f0:	428b      	cmp	r3, r1
   242f2:	d301      	bcc.n	242f8 <__divsi3+0x190>
   242f4:	008b      	lsls	r3, r1, #2
   242f6:	1ac0      	subs	r0, r0, r3
   242f8:	4152      	adcs	r2, r2
   242fa:	d2d9      	bcs.n	242b0 <__divsi3+0x148>
   242fc:	0843      	lsrs	r3, r0, #1
   242fe:	428b      	cmp	r3, r1
   24300:	d301      	bcc.n	24306 <__divsi3+0x19e>
   24302:	004b      	lsls	r3, r1, #1
   24304:	1ac0      	subs	r0, r0, r3
   24306:	4152      	adcs	r2, r2
   24308:	1a41      	subs	r1, r0, r1
   2430a:	d200      	bcs.n	2430e <__divsi3+0x1a6>
   2430c:	4601      	mov	r1, r0
   2430e:	4663      	mov	r3, ip
   24310:	4152      	adcs	r2, r2
   24312:	105b      	asrs	r3, r3, #1
   24314:	4610      	mov	r0, r2
   24316:	d301      	bcc.n	2431c <__divsi3+0x1b4>
   24318:	4240      	negs	r0, r0
   2431a:	2b00      	cmp	r3, #0
   2431c:	d500      	bpl.n	24320 <__divsi3+0x1b8>
   2431e:	4249      	negs	r1, r1
   24320:	4770      	bx	lr
   24322:	4663      	mov	r3, ip
   24324:	105b      	asrs	r3, r3, #1
   24326:	d300      	bcc.n	2432a <__divsi3+0x1c2>
   24328:	4240      	negs	r0, r0
   2432a:	b501      	push	{r0, lr}
   2432c:	2000      	movs	r0, #0
   2432e:	f000 f805 	bl	2433c <__aeabi_idiv0>
   24332:	bd02      	pop	{r1, pc}

00024334 <__aeabi_idivmod>:
   24334:	2900      	cmp	r1, #0
   24336:	d0f8      	beq.n	2432a <__divsi3+0x1c2>
   24338:	e716      	b.n	24168 <__divsi3>
   2433a:	4770      	bx	lr

0002433c <__aeabi_idiv0>:
   2433c:	4770      	bx	lr
   2433e:	46c0      	nop			; (mov r8, r8)

00024340 <__aeabi_lmul>:
   24340:	b5f0      	push	{r4, r5, r6, r7, lr}
   24342:	46ce      	mov	lr, r9
   24344:	4647      	mov	r7, r8
   24346:	0415      	lsls	r5, r2, #16
   24348:	0c2d      	lsrs	r5, r5, #16
   2434a:	002e      	movs	r6, r5
   2434c:	b580      	push	{r7, lr}
   2434e:	0407      	lsls	r7, r0, #16
   24350:	0c14      	lsrs	r4, r2, #16
   24352:	0c3f      	lsrs	r7, r7, #16
   24354:	4699      	mov	r9, r3
   24356:	0c03      	lsrs	r3, r0, #16
   24358:	437e      	muls	r6, r7
   2435a:	435d      	muls	r5, r3
   2435c:	4367      	muls	r7, r4
   2435e:	4363      	muls	r3, r4
   24360:	197f      	adds	r7, r7, r5
   24362:	0c34      	lsrs	r4, r6, #16
   24364:	19e4      	adds	r4, r4, r7
   24366:	469c      	mov	ip, r3
   24368:	42a5      	cmp	r5, r4
   2436a:	d903      	bls.n	24374 <__aeabi_lmul+0x34>
   2436c:	2380      	movs	r3, #128	; 0x80
   2436e:	025b      	lsls	r3, r3, #9
   24370:	4698      	mov	r8, r3
   24372:	44c4      	add	ip, r8
   24374:	464b      	mov	r3, r9
   24376:	4351      	muls	r1, r2
   24378:	4343      	muls	r3, r0
   2437a:	0436      	lsls	r6, r6, #16
   2437c:	0c36      	lsrs	r6, r6, #16
   2437e:	0c25      	lsrs	r5, r4, #16
   24380:	0424      	lsls	r4, r4, #16
   24382:	4465      	add	r5, ip
   24384:	19a4      	adds	r4, r4, r6
   24386:	1859      	adds	r1, r3, r1
   24388:	1949      	adds	r1, r1, r5
   2438a:	0020      	movs	r0, r4
   2438c:	bc0c      	pop	{r2, r3}
   2438e:	4690      	mov	r8, r2
   24390:	4699      	mov	r9, r3
   24392:	bdf0      	pop	{r4, r5, r6, r7, pc}

00024394 <__aeabi_dadd>:
   24394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24396:	4645      	mov	r5, r8
   24398:	46de      	mov	lr, fp
   2439a:	4657      	mov	r7, sl
   2439c:	464e      	mov	r6, r9
   2439e:	030c      	lsls	r4, r1, #12
   243a0:	b5e0      	push	{r5, r6, r7, lr}
   243a2:	004e      	lsls	r6, r1, #1
   243a4:	0fc9      	lsrs	r1, r1, #31
   243a6:	4688      	mov	r8, r1
   243a8:	000d      	movs	r5, r1
   243aa:	0a61      	lsrs	r1, r4, #9
   243ac:	0f44      	lsrs	r4, r0, #29
   243ae:	430c      	orrs	r4, r1
   243b0:	00c7      	lsls	r7, r0, #3
   243b2:	0319      	lsls	r1, r3, #12
   243b4:	0058      	lsls	r0, r3, #1
   243b6:	0fdb      	lsrs	r3, r3, #31
   243b8:	469b      	mov	fp, r3
   243ba:	0a4b      	lsrs	r3, r1, #9
   243bc:	0f51      	lsrs	r1, r2, #29
   243be:	430b      	orrs	r3, r1
   243c0:	0d76      	lsrs	r6, r6, #21
   243c2:	0d40      	lsrs	r0, r0, #21
   243c4:	0019      	movs	r1, r3
   243c6:	00d2      	lsls	r2, r2, #3
   243c8:	45d8      	cmp	r8, fp
   243ca:	d100      	bne.n	243ce <__aeabi_dadd+0x3a>
   243cc:	e0ae      	b.n	2452c <__aeabi_dadd+0x198>
   243ce:	1a35      	subs	r5, r6, r0
   243d0:	2d00      	cmp	r5, #0
   243d2:	dc00      	bgt.n	243d6 <__aeabi_dadd+0x42>
   243d4:	e0f6      	b.n	245c4 <__aeabi_dadd+0x230>
   243d6:	2800      	cmp	r0, #0
   243d8:	d10f      	bne.n	243fa <__aeabi_dadd+0x66>
   243da:	4313      	orrs	r3, r2
   243dc:	d100      	bne.n	243e0 <__aeabi_dadd+0x4c>
   243de:	e0db      	b.n	24598 <__aeabi_dadd+0x204>
   243e0:	1e6b      	subs	r3, r5, #1
   243e2:	2b00      	cmp	r3, #0
   243e4:	d000      	beq.n	243e8 <__aeabi_dadd+0x54>
   243e6:	e137      	b.n	24658 <__aeabi_dadd+0x2c4>
   243e8:	1aba      	subs	r2, r7, r2
   243ea:	4297      	cmp	r7, r2
   243ec:	41bf      	sbcs	r7, r7
   243ee:	1a64      	subs	r4, r4, r1
   243f0:	427f      	negs	r7, r7
   243f2:	1be4      	subs	r4, r4, r7
   243f4:	2601      	movs	r6, #1
   243f6:	0017      	movs	r7, r2
   243f8:	e024      	b.n	24444 <__aeabi_dadd+0xb0>
   243fa:	4bc6      	ldr	r3, [pc, #792]	; (24714 <__aeabi_dadd+0x380>)
   243fc:	429e      	cmp	r6, r3
   243fe:	d04d      	beq.n	2449c <__aeabi_dadd+0x108>
   24400:	2380      	movs	r3, #128	; 0x80
   24402:	041b      	lsls	r3, r3, #16
   24404:	4319      	orrs	r1, r3
   24406:	2d38      	cmp	r5, #56	; 0x38
   24408:	dd00      	ble.n	2440c <__aeabi_dadd+0x78>
   2440a:	e107      	b.n	2461c <__aeabi_dadd+0x288>
   2440c:	2d1f      	cmp	r5, #31
   2440e:	dd00      	ble.n	24412 <__aeabi_dadd+0x7e>
   24410:	e138      	b.n	24684 <__aeabi_dadd+0x2f0>
   24412:	2020      	movs	r0, #32
   24414:	1b43      	subs	r3, r0, r5
   24416:	469a      	mov	sl, r3
   24418:	000b      	movs	r3, r1
   2441a:	4650      	mov	r0, sl
   2441c:	4083      	lsls	r3, r0
   2441e:	4699      	mov	r9, r3
   24420:	0013      	movs	r3, r2
   24422:	4648      	mov	r0, r9
   24424:	40eb      	lsrs	r3, r5
   24426:	4318      	orrs	r0, r3
   24428:	0003      	movs	r3, r0
   2442a:	4650      	mov	r0, sl
   2442c:	4082      	lsls	r2, r0
   2442e:	1e50      	subs	r0, r2, #1
   24430:	4182      	sbcs	r2, r0
   24432:	40e9      	lsrs	r1, r5
   24434:	431a      	orrs	r2, r3
   24436:	1aba      	subs	r2, r7, r2
   24438:	1a61      	subs	r1, r4, r1
   2443a:	4297      	cmp	r7, r2
   2443c:	41a4      	sbcs	r4, r4
   2443e:	0017      	movs	r7, r2
   24440:	4264      	negs	r4, r4
   24442:	1b0c      	subs	r4, r1, r4
   24444:	0223      	lsls	r3, r4, #8
   24446:	d562      	bpl.n	2450e <__aeabi_dadd+0x17a>
   24448:	0264      	lsls	r4, r4, #9
   2444a:	0a65      	lsrs	r5, r4, #9
   2444c:	2d00      	cmp	r5, #0
   2444e:	d100      	bne.n	24452 <__aeabi_dadd+0xbe>
   24450:	e0df      	b.n	24612 <__aeabi_dadd+0x27e>
   24452:	0028      	movs	r0, r5
   24454:	f001 fbe4 	bl	25c20 <__clzsi2>
   24458:	0003      	movs	r3, r0
   2445a:	3b08      	subs	r3, #8
   2445c:	2b1f      	cmp	r3, #31
   2445e:	dd00      	ble.n	24462 <__aeabi_dadd+0xce>
   24460:	e0d2      	b.n	24608 <__aeabi_dadd+0x274>
   24462:	2220      	movs	r2, #32
   24464:	003c      	movs	r4, r7
   24466:	1ad2      	subs	r2, r2, r3
   24468:	409d      	lsls	r5, r3
   2446a:	40d4      	lsrs	r4, r2
   2446c:	409f      	lsls	r7, r3
   2446e:	4325      	orrs	r5, r4
   24470:	429e      	cmp	r6, r3
   24472:	dd00      	ble.n	24476 <__aeabi_dadd+0xe2>
   24474:	e0c4      	b.n	24600 <__aeabi_dadd+0x26c>
   24476:	1b9e      	subs	r6, r3, r6
   24478:	1c73      	adds	r3, r6, #1
   2447a:	2b1f      	cmp	r3, #31
   2447c:	dd00      	ble.n	24480 <__aeabi_dadd+0xec>
   2447e:	e0f1      	b.n	24664 <__aeabi_dadd+0x2d0>
   24480:	2220      	movs	r2, #32
   24482:	0038      	movs	r0, r7
   24484:	0029      	movs	r1, r5
   24486:	1ad2      	subs	r2, r2, r3
   24488:	40d8      	lsrs	r0, r3
   2448a:	4091      	lsls	r1, r2
   2448c:	4097      	lsls	r7, r2
   2448e:	002c      	movs	r4, r5
   24490:	4301      	orrs	r1, r0
   24492:	1e78      	subs	r0, r7, #1
   24494:	4187      	sbcs	r7, r0
   24496:	40dc      	lsrs	r4, r3
   24498:	2600      	movs	r6, #0
   2449a:	430f      	orrs	r7, r1
   2449c:	077b      	lsls	r3, r7, #29
   2449e:	d009      	beq.n	244b4 <__aeabi_dadd+0x120>
   244a0:	230f      	movs	r3, #15
   244a2:	403b      	ands	r3, r7
   244a4:	2b04      	cmp	r3, #4
   244a6:	d005      	beq.n	244b4 <__aeabi_dadd+0x120>
   244a8:	1d3b      	adds	r3, r7, #4
   244aa:	42bb      	cmp	r3, r7
   244ac:	41bf      	sbcs	r7, r7
   244ae:	427f      	negs	r7, r7
   244b0:	19e4      	adds	r4, r4, r7
   244b2:	001f      	movs	r7, r3
   244b4:	0223      	lsls	r3, r4, #8
   244b6:	d52c      	bpl.n	24512 <__aeabi_dadd+0x17e>
   244b8:	4b96      	ldr	r3, [pc, #600]	; (24714 <__aeabi_dadd+0x380>)
   244ba:	3601      	adds	r6, #1
   244bc:	429e      	cmp	r6, r3
   244be:	d100      	bne.n	244c2 <__aeabi_dadd+0x12e>
   244c0:	e09a      	b.n	245f8 <__aeabi_dadd+0x264>
   244c2:	4645      	mov	r5, r8
   244c4:	4b94      	ldr	r3, [pc, #592]	; (24718 <__aeabi_dadd+0x384>)
   244c6:	08ff      	lsrs	r7, r7, #3
   244c8:	401c      	ands	r4, r3
   244ca:	0760      	lsls	r0, r4, #29
   244cc:	0576      	lsls	r6, r6, #21
   244ce:	0264      	lsls	r4, r4, #9
   244d0:	4307      	orrs	r7, r0
   244d2:	0b24      	lsrs	r4, r4, #12
   244d4:	0d76      	lsrs	r6, r6, #21
   244d6:	2100      	movs	r1, #0
   244d8:	0324      	lsls	r4, r4, #12
   244da:	0b23      	lsrs	r3, r4, #12
   244dc:	0d0c      	lsrs	r4, r1, #20
   244de:	4a8f      	ldr	r2, [pc, #572]	; (2471c <__aeabi_dadd+0x388>)
   244e0:	0524      	lsls	r4, r4, #20
   244e2:	431c      	orrs	r4, r3
   244e4:	4014      	ands	r4, r2
   244e6:	0533      	lsls	r3, r6, #20
   244e8:	4323      	orrs	r3, r4
   244ea:	005b      	lsls	r3, r3, #1
   244ec:	07ed      	lsls	r5, r5, #31
   244ee:	085b      	lsrs	r3, r3, #1
   244f0:	432b      	orrs	r3, r5
   244f2:	0038      	movs	r0, r7
   244f4:	0019      	movs	r1, r3
   244f6:	bc3c      	pop	{r2, r3, r4, r5}
   244f8:	4690      	mov	r8, r2
   244fa:	4699      	mov	r9, r3
   244fc:	46a2      	mov	sl, r4
   244fe:	46ab      	mov	fp, r5
   24500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24502:	4664      	mov	r4, ip
   24504:	4304      	orrs	r4, r0
   24506:	d100      	bne.n	2450a <__aeabi_dadd+0x176>
   24508:	e211      	b.n	2492e <__aeabi_dadd+0x59a>
   2450a:	0004      	movs	r4, r0
   2450c:	4667      	mov	r7, ip
   2450e:	077b      	lsls	r3, r7, #29
   24510:	d1c6      	bne.n	244a0 <__aeabi_dadd+0x10c>
   24512:	4645      	mov	r5, r8
   24514:	0760      	lsls	r0, r4, #29
   24516:	08ff      	lsrs	r7, r7, #3
   24518:	4307      	orrs	r7, r0
   2451a:	08e4      	lsrs	r4, r4, #3
   2451c:	4b7d      	ldr	r3, [pc, #500]	; (24714 <__aeabi_dadd+0x380>)
   2451e:	429e      	cmp	r6, r3
   24520:	d030      	beq.n	24584 <__aeabi_dadd+0x1f0>
   24522:	0324      	lsls	r4, r4, #12
   24524:	0576      	lsls	r6, r6, #21
   24526:	0b24      	lsrs	r4, r4, #12
   24528:	0d76      	lsrs	r6, r6, #21
   2452a:	e7d4      	b.n	244d6 <__aeabi_dadd+0x142>
   2452c:	1a33      	subs	r3, r6, r0
   2452e:	469a      	mov	sl, r3
   24530:	2b00      	cmp	r3, #0
   24532:	dd78      	ble.n	24626 <__aeabi_dadd+0x292>
   24534:	2800      	cmp	r0, #0
   24536:	d031      	beq.n	2459c <__aeabi_dadd+0x208>
   24538:	4876      	ldr	r0, [pc, #472]	; (24714 <__aeabi_dadd+0x380>)
   2453a:	4286      	cmp	r6, r0
   2453c:	d0ae      	beq.n	2449c <__aeabi_dadd+0x108>
   2453e:	2080      	movs	r0, #128	; 0x80
   24540:	0400      	lsls	r0, r0, #16
   24542:	4301      	orrs	r1, r0
   24544:	4653      	mov	r3, sl
   24546:	2b38      	cmp	r3, #56	; 0x38
   24548:	dc00      	bgt.n	2454c <__aeabi_dadd+0x1b8>
   2454a:	e0e9      	b.n	24720 <__aeabi_dadd+0x38c>
   2454c:	430a      	orrs	r2, r1
   2454e:	1e51      	subs	r1, r2, #1
   24550:	418a      	sbcs	r2, r1
   24552:	2100      	movs	r1, #0
   24554:	19d2      	adds	r2, r2, r7
   24556:	42ba      	cmp	r2, r7
   24558:	41bf      	sbcs	r7, r7
   2455a:	1909      	adds	r1, r1, r4
   2455c:	427c      	negs	r4, r7
   2455e:	0017      	movs	r7, r2
   24560:	190c      	adds	r4, r1, r4
   24562:	0223      	lsls	r3, r4, #8
   24564:	d5d3      	bpl.n	2450e <__aeabi_dadd+0x17a>
   24566:	4b6b      	ldr	r3, [pc, #428]	; (24714 <__aeabi_dadd+0x380>)
   24568:	3601      	adds	r6, #1
   2456a:	429e      	cmp	r6, r3
   2456c:	d100      	bne.n	24570 <__aeabi_dadd+0x1dc>
   2456e:	e13a      	b.n	247e6 <__aeabi_dadd+0x452>
   24570:	2001      	movs	r0, #1
   24572:	4b69      	ldr	r3, [pc, #420]	; (24718 <__aeabi_dadd+0x384>)
   24574:	401c      	ands	r4, r3
   24576:	087b      	lsrs	r3, r7, #1
   24578:	4007      	ands	r7, r0
   2457a:	431f      	orrs	r7, r3
   2457c:	07e0      	lsls	r0, r4, #31
   2457e:	4307      	orrs	r7, r0
   24580:	0864      	lsrs	r4, r4, #1
   24582:	e78b      	b.n	2449c <__aeabi_dadd+0x108>
   24584:	0023      	movs	r3, r4
   24586:	433b      	orrs	r3, r7
   24588:	d100      	bne.n	2458c <__aeabi_dadd+0x1f8>
   2458a:	e1cb      	b.n	24924 <__aeabi_dadd+0x590>
   2458c:	2280      	movs	r2, #128	; 0x80
   2458e:	0312      	lsls	r2, r2, #12
   24590:	4314      	orrs	r4, r2
   24592:	0324      	lsls	r4, r4, #12
   24594:	0b24      	lsrs	r4, r4, #12
   24596:	e79e      	b.n	244d6 <__aeabi_dadd+0x142>
   24598:	002e      	movs	r6, r5
   2459a:	e77f      	b.n	2449c <__aeabi_dadd+0x108>
   2459c:	0008      	movs	r0, r1
   2459e:	4310      	orrs	r0, r2
   245a0:	d100      	bne.n	245a4 <__aeabi_dadd+0x210>
   245a2:	e0b4      	b.n	2470e <__aeabi_dadd+0x37a>
   245a4:	1e58      	subs	r0, r3, #1
   245a6:	2800      	cmp	r0, #0
   245a8:	d000      	beq.n	245ac <__aeabi_dadd+0x218>
   245aa:	e0de      	b.n	2476a <__aeabi_dadd+0x3d6>
   245ac:	18ba      	adds	r2, r7, r2
   245ae:	42ba      	cmp	r2, r7
   245b0:	419b      	sbcs	r3, r3
   245b2:	1864      	adds	r4, r4, r1
   245b4:	425b      	negs	r3, r3
   245b6:	18e4      	adds	r4, r4, r3
   245b8:	0017      	movs	r7, r2
   245ba:	2601      	movs	r6, #1
   245bc:	0223      	lsls	r3, r4, #8
   245be:	d5a6      	bpl.n	2450e <__aeabi_dadd+0x17a>
   245c0:	2602      	movs	r6, #2
   245c2:	e7d5      	b.n	24570 <__aeabi_dadd+0x1dc>
   245c4:	2d00      	cmp	r5, #0
   245c6:	d16e      	bne.n	246a6 <__aeabi_dadd+0x312>
   245c8:	1c70      	adds	r0, r6, #1
   245ca:	0540      	lsls	r0, r0, #21
   245cc:	0d40      	lsrs	r0, r0, #21
   245ce:	2801      	cmp	r0, #1
   245d0:	dc00      	bgt.n	245d4 <__aeabi_dadd+0x240>
   245d2:	e0f9      	b.n	247c8 <__aeabi_dadd+0x434>
   245d4:	1ab8      	subs	r0, r7, r2
   245d6:	4684      	mov	ip, r0
   245d8:	4287      	cmp	r7, r0
   245da:	4180      	sbcs	r0, r0
   245dc:	1ae5      	subs	r5, r4, r3
   245de:	4240      	negs	r0, r0
   245e0:	1a2d      	subs	r5, r5, r0
   245e2:	0228      	lsls	r0, r5, #8
   245e4:	d400      	bmi.n	245e8 <__aeabi_dadd+0x254>
   245e6:	e089      	b.n	246fc <__aeabi_dadd+0x368>
   245e8:	1bd7      	subs	r7, r2, r7
   245ea:	42ba      	cmp	r2, r7
   245ec:	4192      	sbcs	r2, r2
   245ee:	1b1c      	subs	r4, r3, r4
   245f0:	4252      	negs	r2, r2
   245f2:	1aa5      	subs	r5, r4, r2
   245f4:	46d8      	mov	r8, fp
   245f6:	e729      	b.n	2444c <__aeabi_dadd+0xb8>
   245f8:	4645      	mov	r5, r8
   245fa:	2400      	movs	r4, #0
   245fc:	2700      	movs	r7, #0
   245fe:	e76a      	b.n	244d6 <__aeabi_dadd+0x142>
   24600:	4c45      	ldr	r4, [pc, #276]	; (24718 <__aeabi_dadd+0x384>)
   24602:	1af6      	subs	r6, r6, r3
   24604:	402c      	ands	r4, r5
   24606:	e749      	b.n	2449c <__aeabi_dadd+0x108>
   24608:	003d      	movs	r5, r7
   2460a:	3828      	subs	r0, #40	; 0x28
   2460c:	4085      	lsls	r5, r0
   2460e:	2700      	movs	r7, #0
   24610:	e72e      	b.n	24470 <__aeabi_dadd+0xdc>
   24612:	0038      	movs	r0, r7
   24614:	f001 fb04 	bl	25c20 <__clzsi2>
   24618:	3020      	adds	r0, #32
   2461a:	e71d      	b.n	24458 <__aeabi_dadd+0xc4>
   2461c:	430a      	orrs	r2, r1
   2461e:	1e51      	subs	r1, r2, #1
   24620:	418a      	sbcs	r2, r1
   24622:	2100      	movs	r1, #0
   24624:	e707      	b.n	24436 <__aeabi_dadd+0xa2>
   24626:	2b00      	cmp	r3, #0
   24628:	d000      	beq.n	2462c <__aeabi_dadd+0x298>
   2462a:	e0f3      	b.n	24814 <__aeabi_dadd+0x480>
   2462c:	1c70      	adds	r0, r6, #1
   2462e:	0543      	lsls	r3, r0, #21
   24630:	0d5b      	lsrs	r3, r3, #21
   24632:	2b01      	cmp	r3, #1
   24634:	dc00      	bgt.n	24638 <__aeabi_dadd+0x2a4>
   24636:	e0ad      	b.n	24794 <__aeabi_dadd+0x400>
   24638:	4b36      	ldr	r3, [pc, #216]	; (24714 <__aeabi_dadd+0x380>)
   2463a:	4298      	cmp	r0, r3
   2463c:	d100      	bne.n	24640 <__aeabi_dadd+0x2ac>
   2463e:	e0d1      	b.n	247e4 <__aeabi_dadd+0x450>
   24640:	18ba      	adds	r2, r7, r2
   24642:	42ba      	cmp	r2, r7
   24644:	41bf      	sbcs	r7, r7
   24646:	1864      	adds	r4, r4, r1
   24648:	427f      	negs	r7, r7
   2464a:	19e4      	adds	r4, r4, r7
   2464c:	07e7      	lsls	r7, r4, #31
   2464e:	0852      	lsrs	r2, r2, #1
   24650:	4317      	orrs	r7, r2
   24652:	0864      	lsrs	r4, r4, #1
   24654:	0006      	movs	r6, r0
   24656:	e721      	b.n	2449c <__aeabi_dadd+0x108>
   24658:	482e      	ldr	r0, [pc, #184]	; (24714 <__aeabi_dadd+0x380>)
   2465a:	4285      	cmp	r5, r0
   2465c:	d100      	bne.n	24660 <__aeabi_dadd+0x2cc>
   2465e:	e093      	b.n	24788 <__aeabi_dadd+0x3f4>
   24660:	001d      	movs	r5, r3
   24662:	e6d0      	b.n	24406 <__aeabi_dadd+0x72>
   24664:	0029      	movs	r1, r5
   24666:	3e1f      	subs	r6, #31
   24668:	40f1      	lsrs	r1, r6
   2466a:	2b20      	cmp	r3, #32
   2466c:	d100      	bne.n	24670 <__aeabi_dadd+0x2dc>
   2466e:	e08d      	b.n	2478c <__aeabi_dadd+0x3f8>
   24670:	2240      	movs	r2, #64	; 0x40
   24672:	1ad3      	subs	r3, r2, r3
   24674:	409d      	lsls	r5, r3
   24676:	432f      	orrs	r7, r5
   24678:	1e7d      	subs	r5, r7, #1
   2467a:	41af      	sbcs	r7, r5
   2467c:	2400      	movs	r4, #0
   2467e:	430f      	orrs	r7, r1
   24680:	2600      	movs	r6, #0
   24682:	e744      	b.n	2450e <__aeabi_dadd+0x17a>
   24684:	002b      	movs	r3, r5
   24686:	0008      	movs	r0, r1
   24688:	3b20      	subs	r3, #32
   2468a:	40d8      	lsrs	r0, r3
   2468c:	0003      	movs	r3, r0
   2468e:	2d20      	cmp	r5, #32
   24690:	d100      	bne.n	24694 <__aeabi_dadd+0x300>
   24692:	e07d      	b.n	24790 <__aeabi_dadd+0x3fc>
   24694:	2040      	movs	r0, #64	; 0x40
   24696:	1b45      	subs	r5, r0, r5
   24698:	40a9      	lsls	r1, r5
   2469a:	430a      	orrs	r2, r1
   2469c:	1e51      	subs	r1, r2, #1
   2469e:	418a      	sbcs	r2, r1
   246a0:	2100      	movs	r1, #0
   246a2:	431a      	orrs	r2, r3
   246a4:	e6c7      	b.n	24436 <__aeabi_dadd+0xa2>
   246a6:	2e00      	cmp	r6, #0
   246a8:	d050      	beq.n	2474c <__aeabi_dadd+0x3b8>
   246aa:	4e1a      	ldr	r6, [pc, #104]	; (24714 <__aeabi_dadd+0x380>)
   246ac:	42b0      	cmp	r0, r6
   246ae:	d057      	beq.n	24760 <__aeabi_dadd+0x3cc>
   246b0:	2680      	movs	r6, #128	; 0x80
   246b2:	426b      	negs	r3, r5
   246b4:	4699      	mov	r9, r3
   246b6:	0436      	lsls	r6, r6, #16
   246b8:	4334      	orrs	r4, r6
   246ba:	464b      	mov	r3, r9
   246bc:	2b38      	cmp	r3, #56	; 0x38
   246be:	dd00      	ble.n	246c2 <__aeabi_dadd+0x32e>
   246c0:	e0d6      	b.n	24870 <__aeabi_dadd+0x4dc>
   246c2:	2b1f      	cmp	r3, #31
   246c4:	dd00      	ble.n	246c8 <__aeabi_dadd+0x334>
   246c6:	e135      	b.n	24934 <__aeabi_dadd+0x5a0>
   246c8:	2620      	movs	r6, #32
   246ca:	1af5      	subs	r5, r6, r3
   246cc:	0026      	movs	r6, r4
   246ce:	40ae      	lsls	r6, r5
   246d0:	46b2      	mov	sl, r6
   246d2:	003e      	movs	r6, r7
   246d4:	40de      	lsrs	r6, r3
   246d6:	46ac      	mov	ip, r5
   246d8:	0035      	movs	r5, r6
   246da:	4656      	mov	r6, sl
   246dc:	432e      	orrs	r6, r5
   246de:	4665      	mov	r5, ip
   246e0:	40af      	lsls	r7, r5
   246e2:	1e7d      	subs	r5, r7, #1
   246e4:	41af      	sbcs	r7, r5
   246e6:	40dc      	lsrs	r4, r3
   246e8:	4337      	orrs	r7, r6
   246ea:	1bd7      	subs	r7, r2, r7
   246ec:	42ba      	cmp	r2, r7
   246ee:	4192      	sbcs	r2, r2
   246f0:	1b0c      	subs	r4, r1, r4
   246f2:	4252      	negs	r2, r2
   246f4:	1aa4      	subs	r4, r4, r2
   246f6:	0006      	movs	r6, r0
   246f8:	46d8      	mov	r8, fp
   246fa:	e6a3      	b.n	24444 <__aeabi_dadd+0xb0>
   246fc:	4664      	mov	r4, ip
   246fe:	4667      	mov	r7, ip
   24700:	432c      	orrs	r4, r5
   24702:	d000      	beq.n	24706 <__aeabi_dadd+0x372>
   24704:	e6a2      	b.n	2444c <__aeabi_dadd+0xb8>
   24706:	2500      	movs	r5, #0
   24708:	2600      	movs	r6, #0
   2470a:	2700      	movs	r7, #0
   2470c:	e706      	b.n	2451c <__aeabi_dadd+0x188>
   2470e:	001e      	movs	r6, r3
   24710:	e6c4      	b.n	2449c <__aeabi_dadd+0x108>
   24712:	46c0      	nop			; (mov r8, r8)
   24714:	000007ff 	.word	0x000007ff
   24718:	ff7fffff 	.word	0xff7fffff
   2471c:	800fffff 	.word	0x800fffff
   24720:	2b1f      	cmp	r3, #31
   24722:	dc63      	bgt.n	247ec <__aeabi_dadd+0x458>
   24724:	2020      	movs	r0, #32
   24726:	1ac3      	subs	r3, r0, r3
   24728:	0008      	movs	r0, r1
   2472a:	4098      	lsls	r0, r3
   2472c:	469c      	mov	ip, r3
   2472e:	4683      	mov	fp, r0
   24730:	4653      	mov	r3, sl
   24732:	0010      	movs	r0, r2
   24734:	40d8      	lsrs	r0, r3
   24736:	0003      	movs	r3, r0
   24738:	4658      	mov	r0, fp
   2473a:	4318      	orrs	r0, r3
   2473c:	4663      	mov	r3, ip
   2473e:	409a      	lsls	r2, r3
   24740:	1e53      	subs	r3, r2, #1
   24742:	419a      	sbcs	r2, r3
   24744:	4653      	mov	r3, sl
   24746:	4302      	orrs	r2, r0
   24748:	40d9      	lsrs	r1, r3
   2474a:	e703      	b.n	24554 <__aeabi_dadd+0x1c0>
   2474c:	0026      	movs	r6, r4
   2474e:	433e      	orrs	r6, r7
   24750:	d006      	beq.n	24760 <__aeabi_dadd+0x3cc>
   24752:	43eb      	mvns	r3, r5
   24754:	4699      	mov	r9, r3
   24756:	2b00      	cmp	r3, #0
   24758:	d0c7      	beq.n	246ea <__aeabi_dadd+0x356>
   2475a:	4e94      	ldr	r6, [pc, #592]	; (249ac <__aeabi_dadd+0x618>)
   2475c:	42b0      	cmp	r0, r6
   2475e:	d1ac      	bne.n	246ba <__aeabi_dadd+0x326>
   24760:	000c      	movs	r4, r1
   24762:	0017      	movs	r7, r2
   24764:	0006      	movs	r6, r0
   24766:	46d8      	mov	r8, fp
   24768:	e698      	b.n	2449c <__aeabi_dadd+0x108>
   2476a:	4b90      	ldr	r3, [pc, #576]	; (249ac <__aeabi_dadd+0x618>)
   2476c:	459a      	cmp	sl, r3
   2476e:	d00b      	beq.n	24788 <__aeabi_dadd+0x3f4>
   24770:	4682      	mov	sl, r0
   24772:	e6e7      	b.n	24544 <__aeabi_dadd+0x1b0>
   24774:	2800      	cmp	r0, #0
   24776:	d000      	beq.n	2477a <__aeabi_dadd+0x3e6>
   24778:	e09e      	b.n	248b8 <__aeabi_dadd+0x524>
   2477a:	0018      	movs	r0, r3
   2477c:	4310      	orrs	r0, r2
   2477e:	d100      	bne.n	24782 <__aeabi_dadd+0x3ee>
   24780:	e0e9      	b.n	24956 <__aeabi_dadd+0x5c2>
   24782:	001c      	movs	r4, r3
   24784:	0017      	movs	r7, r2
   24786:	46d8      	mov	r8, fp
   24788:	4e88      	ldr	r6, [pc, #544]	; (249ac <__aeabi_dadd+0x618>)
   2478a:	e687      	b.n	2449c <__aeabi_dadd+0x108>
   2478c:	2500      	movs	r5, #0
   2478e:	e772      	b.n	24676 <__aeabi_dadd+0x2e2>
   24790:	2100      	movs	r1, #0
   24792:	e782      	b.n	2469a <__aeabi_dadd+0x306>
   24794:	0023      	movs	r3, r4
   24796:	433b      	orrs	r3, r7
   24798:	2e00      	cmp	r6, #0
   2479a:	d000      	beq.n	2479e <__aeabi_dadd+0x40a>
   2479c:	e0ab      	b.n	248f6 <__aeabi_dadd+0x562>
   2479e:	2b00      	cmp	r3, #0
   247a0:	d100      	bne.n	247a4 <__aeabi_dadd+0x410>
   247a2:	e0e7      	b.n	24974 <__aeabi_dadd+0x5e0>
   247a4:	000b      	movs	r3, r1
   247a6:	4313      	orrs	r3, r2
   247a8:	d100      	bne.n	247ac <__aeabi_dadd+0x418>
   247aa:	e677      	b.n	2449c <__aeabi_dadd+0x108>
   247ac:	18ba      	adds	r2, r7, r2
   247ae:	42ba      	cmp	r2, r7
   247b0:	41bf      	sbcs	r7, r7
   247b2:	1864      	adds	r4, r4, r1
   247b4:	427f      	negs	r7, r7
   247b6:	19e4      	adds	r4, r4, r7
   247b8:	0223      	lsls	r3, r4, #8
   247ba:	d400      	bmi.n	247be <__aeabi_dadd+0x42a>
   247bc:	e0f2      	b.n	249a4 <__aeabi_dadd+0x610>
   247be:	4b7c      	ldr	r3, [pc, #496]	; (249b0 <__aeabi_dadd+0x61c>)
   247c0:	0017      	movs	r7, r2
   247c2:	401c      	ands	r4, r3
   247c4:	0006      	movs	r6, r0
   247c6:	e669      	b.n	2449c <__aeabi_dadd+0x108>
   247c8:	0020      	movs	r0, r4
   247ca:	4338      	orrs	r0, r7
   247cc:	2e00      	cmp	r6, #0
   247ce:	d1d1      	bne.n	24774 <__aeabi_dadd+0x3e0>
   247d0:	2800      	cmp	r0, #0
   247d2:	d15b      	bne.n	2488c <__aeabi_dadd+0x4f8>
   247d4:	001c      	movs	r4, r3
   247d6:	4314      	orrs	r4, r2
   247d8:	d100      	bne.n	247dc <__aeabi_dadd+0x448>
   247da:	e0a8      	b.n	2492e <__aeabi_dadd+0x59a>
   247dc:	001c      	movs	r4, r3
   247de:	0017      	movs	r7, r2
   247e0:	46d8      	mov	r8, fp
   247e2:	e65b      	b.n	2449c <__aeabi_dadd+0x108>
   247e4:	0006      	movs	r6, r0
   247e6:	2400      	movs	r4, #0
   247e8:	2700      	movs	r7, #0
   247ea:	e697      	b.n	2451c <__aeabi_dadd+0x188>
   247ec:	4650      	mov	r0, sl
   247ee:	000b      	movs	r3, r1
   247f0:	3820      	subs	r0, #32
   247f2:	40c3      	lsrs	r3, r0
   247f4:	4699      	mov	r9, r3
   247f6:	4653      	mov	r3, sl
   247f8:	2b20      	cmp	r3, #32
   247fa:	d100      	bne.n	247fe <__aeabi_dadd+0x46a>
   247fc:	e095      	b.n	2492a <__aeabi_dadd+0x596>
   247fe:	2340      	movs	r3, #64	; 0x40
   24800:	4650      	mov	r0, sl
   24802:	1a1b      	subs	r3, r3, r0
   24804:	4099      	lsls	r1, r3
   24806:	430a      	orrs	r2, r1
   24808:	1e51      	subs	r1, r2, #1
   2480a:	418a      	sbcs	r2, r1
   2480c:	464b      	mov	r3, r9
   2480e:	2100      	movs	r1, #0
   24810:	431a      	orrs	r2, r3
   24812:	e69f      	b.n	24554 <__aeabi_dadd+0x1c0>
   24814:	2e00      	cmp	r6, #0
   24816:	d130      	bne.n	2487a <__aeabi_dadd+0x4e6>
   24818:	0026      	movs	r6, r4
   2481a:	433e      	orrs	r6, r7
   2481c:	d067      	beq.n	248ee <__aeabi_dadd+0x55a>
   2481e:	43db      	mvns	r3, r3
   24820:	469a      	mov	sl, r3
   24822:	2b00      	cmp	r3, #0
   24824:	d01c      	beq.n	24860 <__aeabi_dadd+0x4cc>
   24826:	4e61      	ldr	r6, [pc, #388]	; (249ac <__aeabi_dadd+0x618>)
   24828:	42b0      	cmp	r0, r6
   2482a:	d060      	beq.n	248ee <__aeabi_dadd+0x55a>
   2482c:	4653      	mov	r3, sl
   2482e:	2b38      	cmp	r3, #56	; 0x38
   24830:	dd00      	ble.n	24834 <__aeabi_dadd+0x4a0>
   24832:	e096      	b.n	24962 <__aeabi_dadd+0x5ce>
   24834:	2b1f      	cmp	r3, #31
   24836:	dd00      	ble.n	2483a <__aeabi_dadd+0x4a6>
   24838:	e09f      	b.n	2497a <__aeabi_dadd+0x5e6>
   2483a:	2620      	movs	r6, #32
   2483c:	1af3      	subs	r3, r6, r3
   2483e:	0026      	movs	r6, r4
   24840:	409e      	lsls	r6, r3
   24842:	469c      	mov	ip, r3
   24844:	46b3      	mov	fp, r6
   24846:	4653      	mov	r3, sl
   24848:	003e      	movs	r6, r7
   2484a:	40de      	lsrs	r6, r3
   2484c:	0033      	movs	r3, r6
   2484e:	465e      	mov	r6, fp
   24850:	431e      	orrs	r6, r3
   24852:	4663      	mov	r3, ip
   24854:	409f      	lsls	r7, r3
   24856:	1e7b      	subs	r3, r7, #1
   24858:	419f      	sbcs	r7, r3
   2485a:	4653      	mov	r3, sl
   2485c:	40dc      	lsrs	r4, r3
   2485e:	4337      	orrs	r7, r6
   24860:	18bf      	adds	r7, r7, r2
   24862:	4297      	cmp	r7, r2
   24864:	4192      	sbcs	r2, r2
   24866:	1864      	adds	r4, r4, r1
   24868:	4252      	negs	r2, r2
   2486a:	18a4      	adds	r4, r4, r2
   2486c:	0006      	movs	r6, r0
   2486e:	e678      	b.n	24562 <__aeabi_dadd+0x1ce>
   24870:	4327      	orrs	r7, r4
   24872:	1e7c      	subs	r4, r7, #1
   24874:	41a7      	sbcs	r7, r4
   24876:	2400      	movs	r4, #0
   24878:	e737      	b.n	246ea <__aeabi_dadd+0x356>
   2487a:	4e4c      	ldr	r6, [pc, #304]	; (249ac <__aeabi_dadd+0x618>)
   2487c:	42b0      	cmp	r0, r6
   2487e:	d036      	beq.n	248ee <__aeabi_dadd+0x55a>
   24880:	2680      	movs	r6, #128	; 0x80
   24882:	425b      	negs	r3, r3
   24884:	0436      	lsls	r6, r6, #16
   24886:	469a      	mov	sl, r3
   24888:	4334      	orrs	r4, r6
   2488a:	e7cf      	b.n	2482c <__aeabi_dadd+0x498>
   2488c:	0018      	movs	r0, r3
   2488e:	4310      	orrs	r0, r2
   24890:	d100      	bne.n	24894 <__aeabi_dadd+0x500>
   24892:	e603      	b.n	2449c <__aeabi_dadd+0x108>
   24894:	1ab8      	subs	r0, r7, r2
   24896:	4684      	mov	ip, r0
   24898:	4567      	cmp	r7, ip
   2489a:	41ad      	sbcs	r5, r5
   2489c:	1ae0      	subs	r0, r4, r3
   2489e:	426d      	negs	r5, r5
   248a0:	1b40      	subs	r0, r0, r5
   248a2:	0205      	lsls	r5, r0, #8
   248a4:	d400      	bmi.n	248a8 <__aeabi_dadd+0x514>
   248a6:	e62c      	b.n	24502 <__aeabi_dadd+0x16e>
   248a8:	1bd7      	subs	r7, r2, r7
   248aa:	42ba      	cmp	r2, r7
   248ac:	4192      	sbcs	r2, r2
   248ae:	1b1c      	subs	r4, r3, r4
   248b0:	4252      	negs	r2, r2
   248b2:	1aa4      	subs	r4, r4, r2
   248b4:	46d8      	mov	r8, fp
   248b6:	e5f1      	b.n	2449c <__aeabi_dadd+0x108>
   248b8:	0018      	movs	r0, r3
   248ba:	4310      	orrs	r0, r2
   248bc:	d100      	bne.n	248c0 <__aeabi_dadd+0x52c>
   248be:	e763      	b.n	24788 <__aeabi_dadd+0x3f4>
   248c0:	08f8      	lsrs	r0, r7, #3
   248c2:	0767      	lsls	r7, r4, #29
   248c4:	4307      	orrs	r7, r0
   248c6:	2080      	movs	r0, #128	; 0x80
   248c8:	08e4      	lsrs	r4, r4, #3
   248ca:	0300      	lsls	r0, r0, #12
   248cc:	4204      	tst	r4, r0
   248ce:	d008      	beq.n	248e2 <__aeabi_dadd+0x54e>
   248d0:	08dd      	lsrs	r5, r3, #3
   248d2:	4205      	tst	r5, r0
   248d4:	d105      	bne.n	248e2 <__aeabi_dadd+0x54e>
   248d6:	08d2      	lsrs	r2, r2, #3
   248d8:	0759      	lsls	r1, r3, #29
   248da:	4311      	orrs	r1, r2
   248dc:	000f      	movs	r7, r1
   248de:	002c      	movs	r4, r5
   248e0:	46d8      	mov	r8, fp
   248e2:	0f7b      	lsrs	r3, r7, #29
   248e4:	00e4      	lsls	r4, r4, #3
   248e6:	431c      	orrs	r4, r3
   248e8:	00ff      	lsls	r7, r7, #3
   248ea:	4e30      	ldr	r6, [pc, #192]	; (249ac <__aeabi_dadd+0x618>)
   248ec:	e5d6      	b.n	2449c <__aeabi_dadd+0x108>
   248ee:	000c      	movs	r4, r1
   248f0:	0017      	movs	r7, r2
   248f2:	0006      	movs	r6, r0
   248f4:	e5d2      	b.n	2449c <__aeabi_dadd+0x108>
   248f6:	2b00      	cmp	r3, #0
   248f8:	d038      	beq.n	2496c <__aeabi_dadd+0x5d8>
   248fa:	000b      	movs	r3, r1
   248fc:	4313      	orrs	r3, r2
   248fe:	d100      	bne.n	24902 <__aeabi_dadd+0x56e>
   24900:	e742      	b.n	24788 <__aeabi_dadd+0x3f4>
   24902:	08f8      	lsrs	r0, r7, #3
   24904:	0767      	lsls	r7, r4, #29
   24906:	4307      	orrs	r7, r0
   24908:	2080      	movs	r0, #128	; 0x80
   2490a:	08e4      	lsrs	r4, r4, #3
   2490c:	0300      	lsls	r0, r0, #12
   2490e:	4204      	tst	r4, r0
   24910:	d0e7      	beq.n	248e2 <__aeabi_dadd+0x54e>
   24912:	08cb      	lsrs	r3, r1, #3
   24914:	4203      	tst	r3, r0
   24916:	d1e4      	bne.n	248e2 <__aeabi_dadd+0x54e>
   24918:	08d2      	lsrs	r2, r2, #3
   2491a:	0749      	lsls	r1, r1, #29
   2491c:	4311      	orrs	r1, r2
   2491e:	000f      	movs	r7, r1
   24920:	001c      	movs	r4, r3
   24922:	e7de      	b.n	248e2 <__aeabi_dadd+0x54e>
   24924:	2700      	movs	r7, #0
   24926:	2400      	movs	r4, #0
   24928:	e5d5      	b.n	244d6 <__aeabi_dadd+0x142>
   2492a:	2100      	movs	r1, #0
   2492c:	e76b      	b.n	24806 <__aeabi_dadd+0x472>
   2492e:	2500      	movs	r5, #0
   24930:	2700      	movs	r7, #0
   24932:	e5f3      	b.n	2451c <__aeabi_dadd+0x188>
   24934:	464e      	mov	r6, r9
   24936:	0025      	movs	r5, r4
   24938:	3e20      	subs	r6, #32
   2493a:	40f5      	lsrs	r5, r6
   2493c:	464b      	mov	r3, r9
   2493e:	002e      	movs	r6, r5
   24940:	2b20      	cmp	r3, #32
   24942:	d02d      	beq.n	249a0 <__aeabi_dadd+0x60c>
   24944:	2540      	movs	r5, #64	; 0x40
   24946:	1aed      	subs	r5, r5, r3
   24948:	40ac      	lsls	r4, r5
   2494a:	4327      	orrs	r7, r4
   2494c:	1e7c      	subs	r4, r7, #1
   2494e:	41a7      	sbcs	r7, r4
   24950:	2400      	movs	r4, #0
   24952:	4337      	orrs	r7, r6
   24954:	e6c9      	b.n	246ea <__aeabi_dadd+0x356>
   24956:	2480      	movs	r4, #128	; 0x80
   24958:	2500      	movs	r5, #0
   2495a:	0324      	lsls	r4, r4, #12
   2495c:	4e13      	ldr	r6, [pc, #76]	; (249ac <__aeabi_dadd+0x618>)
   2495e:	2700      	movs	r7, #0
   24960:	e5dc      	b.n	2451c <__aeabi_dadd+0x188>
   24962:	4327      	orrs	r7, r4
   24964:	1e7c      	subs	r4, r7, #1
   24966:	41a7      	sbcs	r7, r4
   24968:	2400      	movs	r4, #0
   2496a:	e779      	b.n	24860 <__aeabi_dadd+0x4cc>
   2496c:	000c      	movs	r4, r1
   2496e:	0017      	movs	r7, r2
   24970:	4e0e      	ldr	r6, [pc, #56]	; (249ac <__aeabi_dadd+0x618>)
   24972:	e593      	b.n	2449c <__aeabi_dadd+0x108>
   24974:	000c      	movs	r4, r1
   24976:	0017      	movs	r7, r2
   24978:	e590      	b.n	2449c <__aeabi_dadd+0x108>
   2497a:	4656      	mov	r6, sl
   2497c:	0023      	movs	r3, r4
   2497e:	3e20      	subs	r6, #32
   24980:	40f3      	lsrs	r3, r6
   24982:	4699      	mov	r9, r3
   24984:	4653      	mov	r3, sl
   24986:	2b20      	cmp	r3, #32
   24988:	d00e      	beq.n	249a8 <__aeabi_dadd+0x614>
   2498a:	2340      	movs	r3, #64	; 0x40
   2498c:	4656      	mov	r6, sl
   2498e:	1b9b      	subs	r3, r3, r6
   24990:	409c      	lsls	r4, r3
   24992:	4327      	orrs	r7, r4
   24994:	1e7c      	subs	r4, r7, #1
   24996:	41a7      	sbcs	r7, r4
   24998:	464b      	mov	r3, r9
   2499a:	2400      	movs	r4, #0
   2499c:	431f      	orrs	r7, r3
   2499e:	e75f      	b.n	24860 <__aeabi_dadd+0x4cc>
   249a0:	2400      	movs	r4, #0
   249a2:	e7d2      	b.n	2494a <__aeabi_dadd+0x5b6>
   249a4:	0017      	movs	r7, r2
   249a6:	e5b2      	b.n	2450e <__aeabi_dadd+0x17a>
   249a8:	2400      	movs	r4, #0
   249aa:	e7f2      	b.n	24992 <__aeabi_dadd+0x5fe>
   249ac:	000007ff 	.word	0x000007ff
   249b0:	ff7fffff 	.word	0xff7fffff

000249b4 <__aeabi_ddiv>:
   249b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   249b6:	4657      	mov	r7, sl
   249b8:	4645      	mov	r5, r8
   249ba:	46de      	mov	lr, fp
   249bc:	464e      	mov	r6, r9
   249be:	b5e0      	push	{r5, r6, r7, lr}
   249c0:	004c      	lsls	r4, r1, #1
   249c2:	030e      	lsls	r6, r1, #12
   249c4:	b087      	sub	sp, #28
   249c6:	4683      	mov	fp, r0
   249c8:	4692      	mov	sl, r2
   249ca:	001d      	movs	r5, r3
   249cc:	4680      	mov	r8, r0
   249ce:	0b36      	lsrs	r6, r6, #12
   249d0:	0d64      	lsrs	r4, r4, #21
   249d2:	0fcf      	lsrs	r7, r1, #31
   249d4:	2c00      	cmp	r4, #0
   249d6:	d04f      	beq.n	24a78 <__aeabi_ddiv+0xc4>
   249d8:	4b6f      	ldr	r3, [pc, #444]	; (24b98 <__aeabi_ddiv+0x1e4>)
   249da:	429c      	cmp	r4, r3
   249dc:	d035      	beq.n	24a4a <__aeabi_ddiv+0x96>
   249de:	2380      	movs	r3, #128	; 0x80
   249e0:	0f42      	lsrs	r2, r0, #29
   249e2:	041b      	lsls	r3, r3, #16
   249e4:	00f6      	lsls	r6, r6, #3
   249e6:	4313      	orrs	r3, r2
   249e8:	4333      	orrs	r3, r6
   249ea:	4699      	mov	r9, r3
   249ec:	00c3      	lsls	r3, r0, #3
   249ee:	4698      	mov	r8, r3
   249f0:	4b6a      	ldr	r3, [pc, #424]	; (24b9c <__aeabi_ddiv+0x1e8>)
   249f2:	2600      	movs	r6, #0
   249f4:	469c      	mov	ip, r3
   249f6:	2300      	movs	r3, #0
   249f8:	4464      	add	r4, ip
   249fa:	9303      	str	r3, [sp, #12]
   249fc:	032b      	lsls	r3, r5, #12
   249fe:	0b1b      	lsrs	r3, r3, #12
   24a00:	469b      	mov	fp, r3
   24a02:	006b      	lsls	r3, r5, #1
   24a04:	0fed      	lsrs	r5, r5, #31
   24a06:	4650      	mov	r0, sl
   24a08:	0d5b      	lsrs	r3, r3, #21
   24a0a:	9501      	str	r5, [sp, #4]
   24a0c:	d05e      	beq.n	24acc <__aeabi_ddiv+0x118>
   24a0e:	4a62      	ldr	r2, [pc, #392]	; (24b98 <__aeabi_ddiv+0x1e4>)
   24a10:	4293      	cmp	r3, r2
   24a12:	d053      	beq.n	24abc <__aeabi_ddiv+0x108>
   24a14:	465a      	mov	r2, fp
   24a16:	00d1      	lsls	r1, r2, #3
   24a18:	2280      	movs	r2, #128	; 0x80
   24a1a:	0f40      	lsrs	r0, r0, #29
   24a1c:	0412      	lsls	r2, r2, #16
   24a1e:	4302      	orrs	r2, r0
   24a20:	430a      	orrs	r2, r1
   24a22:	4693      	mov	fp, r2
   24a24:	4652      	mov	r2, sl
   24a26:	00d1      	lsls	r1, r2, #3
   24a28:	4a5c      	ldr	r2, [pc, #368]	; (24b9c <__aeabi_ddiv+0x1e8>)
   24a2a:	4694      	mov	ip, r2
   24a2c:	2200      	movs	r2, #0
   24a2e:	4463      	add	r3, ip
   24a30:	0038      	movs	r0, r7
   24a32:	4068      	eors	r0, r5
   24a34:	4684      	mov	ip, r0
   24a36:	9002      	str	r0, [sp, #8]
   24a38:	1ae4      	subs	r4, r4, r3
   24a3a:	4316      	orrs	r6, r2
   24a3c:	2e0f      	cmp	r6, #15
   24a3e:	d900      	bls.n	24a42 <__aeabi_ddiv+0x8e>
   24a40:	e0b4      	b.n	24bac <__aeabi_ddiv+0x1f8>
   24a42:	4b57      	ldr	r3, [pc, #348]	; (24ba0 <__aeabi_ddiv+0x1ec>)
   24a44:	00b6      	lsls	r6, r6, #2
   24a46:	599b      	ldr	r3, [r3, r6]
   24a48:	469f      	mov	pc, r3
   24a4a:	0003      	movs	r3, r0
   24a4c:	4333      	orrs	r3, r6
   24a4e:	4699      	mov	r9, r3
   24a50:	d16c      	bne.n	24b2c <__aeabi_ddiv+0x178>
   24a52:	2300      	movs	r3, #0
   24a54:	4698      	mov	r8, r3
   24a56:	3302      	adds	r3, #2
   24a58:	2608      	movs	r6, #8
   24a5a:	9303      	str	r3, [sp, #12]
   24a5c:	e7ce      	b.n	249fc <__aeabi_ddiv+0x48>
   24a5e:	46cb      	mov	fp, r9
   24a60:	4641      	mov	r1, r8
   24a62:	9a03      	ldr	r2, [sp, #12]
   24a64:	9701      	str	r7, [sp, #4]
   24a66:	2a02      	cmp	r2, #2
   24a68:	d165      	bne.n	24b36 <__aeabi_ddiv+0x182>
   24a6a:	9b01      	ldr	r3, [sp, #4]
   24a6c:	4c4a      	ldr	r4, [pc, #296]	; (24b98 <__aeabi_ddiv+0x1e4>)
   24a6e:	469c      	mov	ip, r3
   24a70:	2300      	movs	r3, #0
   24a72:	2200      	movs	r2, #0
   24a74:	4698      	mov	r8, r3
   24a76:	e06b      	b.n	24b50 <__aeabi_ddiv+0x19c>
   24a78:	0003      	movs	r3, r0
   24a7a:	4333      	orrs	r3, r6
   24a7c:	4699      	mov	r9, r3
   24a7e:	d04e      	beq.n	24b1e <__aeabi_ddiv+0x16a>
   24a80:	2e00      	cmp	r6, #0
   24a82:	d100      	bne.n	24a86 <__aeabi_ddiv+0xd2>
   24a84:	e1bc      	b.n	24e00 <__aeabi_ddiv+0x44c>
   24a86:	0030      	movs	r0, r6
   24a88:	f001 f8ca 	bl	25c20 <__clzsi2>
   24a8c:	0003      	movs	r3, r0
   24a8e:	3b0b      	subs	r3, #11
   24a90:	2b1c      	cmp	r3, #28
   24a92:	dd00      	ble.n	24a96 <__aeabi_ddiv+0xe2>
   24a94:	e1ac      	b.n	24df0 <__aeabi_ddiv+0x43c>
   24a96:	221d      	movs	r2, #29
   24a98:	1ad3      	subs	r3, r2, r3
   24a9a:	465a      	mov	r2, fp
   24a9c:	0001      	movs	r1, r0
   24a9e:	40da      	lsrs	r2, r3
   24aa0:	3908      	subs	r1, #8
   24aa2:	408e      	lsls	r6, r1
   24aa4:	0013      	movs	r3, r2
   24aa6:	4333      	orrs	r3, r6
   24aa8:	4699      	mov	r9, r3
   24aaa:	465b      	mov	r3, fp
   24aac:	408b      	lsls	r3, r1
   24aae:	4698      	mov	r8, r3
   24ab0:	2300      	movs	r3, #0
   24ab2:	4c3c      	ldr	r4, [pc, #240]	; (24ba4 <__aeabi_ddiv+0x1f0>)
   24ab4:	2600      	movs	r6, #0
   24ab6:	1a24      	subs	r4, r4, r0
   24ab8:	9303      	str	r3, [sp, #12]
   24aba:	e79f      	b.n	249fc <__aeabi_ddiv+0x48>
   24abc:	4651      	mov	r1, sl
   24abe:	465a      	mov	r2, fp
   24ac0:	4311      	orrs	r1, r2
   24ac2:	d129      	bne.n	24b18 <__aeabi_ddiv+0x164>
   24ac4:	2200      	movs	r2, #0
   24ac6:	4693      	mov	fp, r2
   24ac8:	3202      	adds	r2, #2
   24aca:	e7b1      	b.n	24a30 <__aeabi_ddiv+0x7c>
   24acc:	4659      	mov	r1, fp
   24ace:	4301      	orrs	r1, r0
   24ad0:	d01e      	beq.n	24b10 <__aeabi_ddiv+0x15c>
   24ad2:	465b      	mov	r3, fp
   24ad4:	2b00      	cmp	r3, #0
   24ad6:	d100      	bne.n	24ada <__aeabi_ddiv+0x126>
   24ad8:	e19e      	b.n	24e18 <__aeabi_ddiv+0x464>
   24ada:	4658      	mov	r0, fp
   24adc:	f001 f8a0 	bl	25c20 <__clzsi2>
   24ae0:	0003      	movs	r3, r0
   24ae2:	3b0b      	subs	r3, #11
   24ae4:	2b1c      	cmp	r3, #28
   24ae6:	dd00      	ble.n	24aea <__aeabi_ddiv+0x136>
   24ae8:	e18f      	b.n	24e0a <__aeabi_ddiv+0x456>
   24aea:	0002      	movs	r2, r0
   24aec:	4659      	mov	r1, fp
   24aee:	3a08      	subs	r2, #8
   24af0:	4091      	lsls	r1, r2
   24af2:	468b      	mov	fp, r1
   24af4:	211d      	movs	r1, #29
   24af6:	1acb      	subs	r3, r1, r3
   24af8:	4651      	mov	r1, sl
   24afa:	40d9      	lsrs	r1, r3
   24afc:	000b      	movs	r3, r1
   24afe:	4659      	mov	r1, fp
   24b00:	430b      	orrs	r3, r1
   24b02:	4651      	mov	r1, sl
   24b04:	469b      	mov	fp, r3
   24b06:	4091      	lsls	r1, r2
   24b08:	4b26      	ldr	r3, [pc, #152]	; (24ba4 <__aeabi_ddiv+0x1f0>)
   24b0a:	2200      	movs	r2, #0
   24b0c:	1a1b      	subs	r3, r3, r0
   24b0e:	e78f      	b.n	24a30 <__aeabi_ddiv+0x7c>
   24b10:	2300      	movs	r3, #0
   24b12:	2201      	movs	r2, #1
   24b14:	469b      	mov	fp, r3
   24b16:	e78b      	b.n	24a30 <__aeabi_ddiv+0x7c>
   24b18:	4651      	mov	r1, sl
   24b1a:	2203      	movs	r2, #3
   24b1c:	e788      	b.n	24a30 <__aeabi_ddiv+0x7c>
   24b1e:	2300      	movs	r3, #0
   24b20:	4698      	mov	r8, r3
   24b22:	3301      	adds	r3, #1
   24b24:	2604      	movs	r6, #4
   24b26:	2400      	movs	r4, #0
   24b28:	9303      	str	r3, [sp, #12]
   24b2a:	e767      	b.n	249fc <__aeabi_ddiv+0x48>
   24b2c:	2303      	movs	r3, #3
   24b2e:	46b1      	mov	r9, r6
   24b30:	9303      	str	r3, [sp, #12]
   24b32:	260c      	movs	r6, #12
   24b34:	e762      	b.n	249fc <__aeabi_ddiv+0x48>
   24b36:	2a03      	cmp	r2, #3
   24b38:	d100      	bne.n	24b3c <__aeabi_ddiv+0x188>
   24b3a:	e25c      	b.n	24ff6 <__aeabi_ddiv+0x642>
   24b3c:	9b01      	ldr	r3, [sp, #4]
   24b3e:	2a01      	cmp	r2, #1
   24b40:	d000      	beq.n	24b44 <__aeabi_ddiv+0x190>
   24b42:	e1e4      	b.n	24f0e <__aeabi_ddiv+0x55a>
   24b44:	4013      	ands	r3, r2
   24b46:	469c      	mov	ip, r3
   24b48:	2300      	movs	r3, #0
   24b4a:	2400      	movs	r4, #0
   24b4c:	2200      	movs	r2, #0
   24b4e:	4698      	mov	r8, r3
   24b50:	2100      	movs	r1, #0
   24b52:	0312      	lsls	r2, r2, #12
   24b54:	0b13      	lsrs	r3, r2, #12
   24b56:	0d0a      	lsrs	r2, r1, #20
   24b58:	0512      	lsls	r2, r2, #20
   24b5a:	431a      	orrs	r2, r3
   24b5c:	0523      	lsls	r3, r4, #20
   24b5e:	4c12      	ldr	r4, [pc, #72]	; (24ba8 <__aeabi_ddiv+0x1f4>)
   24b60:	4640      	mov	r0, r8
   24b62:	4022      	ands	r2, r4
   24b64:	4313      	orrs	r3, r2
   24b66:	4662      	mov	r2, ip
   24b68:	005b      	lsls	r3, r3, #1
   24b6a:	07d2      	lsls	r2, r2, #31
   24b6c:	085b      	lsrs	r3, r3, #1
   24b6e:	4313      	orrs	r3, r2
   24b70:	0019      	movs	r1, r3
   24b72:	b007      	add	sp, #28
   24b74:	bc3c      	pop	{r2, r3, r4, r5}
   24b76:	4690      	mov	r8, r2
   24b78:	4699      	mov	r9, r3
   24b7a:	46a2      	mov	sl, r4
   24b7c:	46ab      	mov	fp, r5
   24b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   24b80:	2300      	movs	r3, #0
   24b82:	2280      	movs	r2, #128	; 0x80
   24b84:	469c      	mov	ip, r3
   24b86:	0312      	lsls	r2, r2, #12
   24b88:	4698      	mov	r8, r3
   24b8a:	4c03      	ldr	r4, [pc, #12]	; (24b98 <__aeabi_ddiv+0x1e4>)
   24b8c:	e7e0      	b.n	24b50 <__aeabi_ddiv+0x19c>
   24b8e:	2300      	movs	r3, #0
   24b90:	4c01      	ldr	r4, [pc, #4]	; (24b98 <__aeabi_ddiv+0x1e4>)
   24b92:	2200      	movs	r2, #0
   24b94:	4698      	mov	r8, r3
   24b96:	e7db      	b.n	24b50 <__aeabi_ddiv+0x19c>
   24b98:	000007ff 	.word	0x000007ff
   24b9c:	fffffc01 	.word	0xfffffc01
   24ba0:	0002bb2c 	.word	0x0002bb2c
   24ba4:	fffffc0d 	.word	0xfffffc0d
   24ba8:	800fffff 	.word	0x800fffff
   24bac:	45d9      	cmp	r9, fp
   24bae:	d900      	bls.n	24bb2 <__aeabi_ddiv+0x1fe>
   24bb0:	e139      	b.n	24e26 <__aeabi_ddiv+0x472>
   24bb2:	d100      	bne.n	24bb6 <__aeabi_ddiv+0x202>
   24bb4:	e134      	b.n	24e20 <__aeabi_ddiv+0x46c>
   24bb6:	2300      	movs	r3, #0
   24bb8:	4646      	mov	r6, r8
   24bba:	464d      	mov	r5, r9
   24bbc:	469a      	mov	sl, r3
   24bbe:	3c01      	subs	r4, #1
   24bc0:	465b      	mov	r3, fp
   24bc2:	0e0a      	lsrs	r2, r1, #24
   24bc4:	021b      	lsls	r3, r3, #8
   24bc6:	431a      	orrs	r2, r3
   24bc8:	020b      	lsls	r3, r1, #8
   24bca:	0c17      	lsrs	r7, r2, #16
   24bcc:	9303      	str	r3, [sp, #12]
   24bce:	0413      	lsls	r3, r2, #16
   24bd0:	0c1b      	lsrs	r3, r3, #16
   24bd2:	0039      	movs	r1, r7
   24bd4:	0028      	movs	r0, r5
   24bd6:	4690      	mov	r8, r2
   24bd8:	9301      	str	r3, [sp, #4]
   24bda:	f7ff fa3b 	bl	24054 <__udivsi3>
   24bde:	0002      	movs	r2, r0
   24be0:	9b01      	ldr	r3, [sp, #4]
   24be2:	4683      	mov	fp, r0
   24be4:	435a      	muls	r2, r3
   24be6:	0028      	movs	r0, r5
   24be8:	0039      	movs	r1, r7
   24bea:	4691      	mov	r9, r2
   24bec:	f7ff fab8 	bl	24160 <__aeabi_uidivmod>
   24bf0:	0c35      	lsrs	r5, r6, #16
   24bf2:	0409      	lsls	r1, r1, #16
   24bf4:	430d      	orrs	r5, r1
   24bf6:	45a9      	cmp	r9, r5
   24bf8:	d90d      	bls.n	24c16 <__aeabi_ddiv+0x262>
   24bfa:	465b      	mov	r3, fp
   24bfc:	4445      	add	r5, r8
   24bfe:	3b01      	subs	r3, #1
   24c00:	45a8      	cmp	r8, r5
   24c02:	d900      	bls.n	24c06 <__aeabi_ddiv+0x252>
   24c04:	e13a      	b.n	24e7c <__aeabi_ddiv+0x4c8>
   24c06:	45a9      	cmp	r9, r5
   24c08:	d800      	bhi.n	24c0c <__aeabi_ddiv+0x258>
   24c0a:	e137      	b.n	24e7c <__aeabi_ddiv+0x4c8>
   24c0c:	2302      	movs	r3, #2
   24c0e:	425b      	negs	r3, r3
   24c10:	469c      	mov	ip, r3
   24c12:	4445      	add	r5, r8
   24c14:	44e3      	add	fp, ip
   24c16:	464b      	mov	r3, r9
   24c18:	1aeb      	subs	r3, r5, r3
   24c1a:	0039      	movs	r1, r7
   24c1c:	0018      	movs	r0, r3
   24c1e:	9304      	str	r3, [sp, #16]
   24c20:	f7ff fa18 	bl	24054 <__udivsi3>
   24c24:	9b01      	ldr	r3, [sp, #4]
   24c26:	0005      	movs	r5, r0
   24c28:	4343      	muls	r3, r0
   24c2a:	0039      	movs	r1, r7
   24c2c:	9804      	ldr	r0, [sp, #16]
   24c2e:	4699      	mov	r9, r3
   24c30:	f7ff fa96 	bl	24160 <__aeabi_uidivmod>
   24c34:	0433      	lsls	r3, r6, #16
   24c36:	0409      	lsls	r1, r1, #16
   24c38:	0c1b      	lsrs	r3, r3, #16
   24c3a:	430b      	orrs	r3, r1
   24c3c:	4599      	cmp	r9, r3
   24c3e:	d909      	bls.n	24c54 <__aeabi_ddiv+0x2a0>
   24c40:	4443      	add	r3, r8
   24c42:	1e6a      	subs	r2, r5, #1
   24c44:	4598      	cmp	r8, r3
   24c46:	d900      	bls.n	24c4a <__aeabi_ddiv+0x296>
   24c48:	e11a      	b.n	24e80 <__aeabi_ddiv+0x4cc>
   24c4a:	4599      	cmp	r9, r3
   24c4c:	d800      	bhi.n	24c50 <__aeabi_ddiv+0x29c>
   24c4e:	e117      	b.n	24e80 <__aeabi_ddiv+0x4cc>
   24c50:	3d02      	subs	r5, #2
   24c52:	4443      	add	r3, r8
   24c54:	464a      	mov	r2, r9
   24c56:	1a9b      	subs	r3, r3, r2
   24c58:	465a      	mov	r2, fp
   24c5a:	0412      	lsls	r2, r2, #16
   24c5c:	432a      	orrs	r2, r5
   24c5e:	9903      	ldr	r1, [sp, #12]
   24c60:	4693      	mov	fp, r2
   24c62:	0c10      	lsrs	r0, r2, #16
   24c64:	0c0a      	lsrs	r2, r1, #16
   24c66:	4691      	mov	r9, r2
   24c68:	0409      	lsls	r1, r1, #16
   24c6a:	465a      	mov	r2, fp
   24c6c:	0c09      	lsrs	r1, r1, #16
   24c6e:	464e      	mov	r6, r9
   24c70:	000d      	movs	r5, r1
   24c72:	0412      	lsls	r2, r2, #16
   24c74:	0c12      	lsrs	r2, r2, #16
   24c76:	4345      	muls	r5, r0
   24c78:	9105      	str	r1, [sp, #20]
   24c7a:	4351      	muls	r1, r2
   24c7c:	4372      	muls	r2, r6
   24c7e:	4370      	muls	r0, r6
   24c80:	1952      	adds	r2, r2, r5
   24c82:	0c0e      	lsrs	r6, r1, #16
   24c84:	18b2      	adds	r2, r6, r2
   24c86:	4295      	cmp	r5, r2
   24c88:	d903      	bls.n	24c92 <__aeabi_ddiv+0x2de>
   24c8a:	2580      	movs	r5, #128	; 0x80
   24c8c:	026d      	lsls	r5, r5, #9
   24c8e:	46ac      	mov	ip, r5
   24c90:	4460      	add	r0, ip
   24c92:	0c15      	lsrs	r5, r2, #16
   24c94:	0409      	lsls	r1, r1, #16
   24c96:	0412      	lsls	r2, r2, #16
   24c98:	0c09      	lsrs	r1, r1, #16
   24c9a:	1828      	adds	r0, r5, r0
   24c9c:	1852      	adds	r2, r2, r1
   24c9e:	4283      	cmp	r3, r0
   24ca0:	d200      	bcs.n	24ca4 <__aeabi_ddiv+0x2f0>
   24ca2:	e0ce      	b.n	24e42 <__aeabi_ddiv+0x48e>
   24ca4:	d100      	bne.n	24ca8 <__aeabi_ddiv+0x2f4>
   24ca6:	e0c8      	b.n	24e3a <__aeabi_ddiv+0x486>
   24ca8:	1a1d      	subs	r5, r3, r0
   24caa:	4653      	mov	r3, sl
   24cac:	1a9e      	subs	r6, r3, r2
   24cae:	45b2      	cmp	sl, r6
   24cb0:	4192      	sbcs	r2, r2
   24cb2:	4252      	negs	r2, r2
   24cb4:	1aab      	subs	r3, r5, r2
   24cb6:	469a      	mov	sl, r3
   24cb8:	4598      	cmp	r8, r3
   24cba:	d100      	bne.n	24cbe <__aeabi_ddiv+0x30a>
   24cbc:	e117      	b.n	24eee <__aeabi_ddiv+0x53a>
   24cbe:	0039      	movs	r1, r7
   24cc0:	0018      	movs	r0, r3
   24cc2:	f7ff f9c7 	bl	24054 <__udivsi3>
   24cc6:	9b01      	ldr	r3, [sp, #4]
   24cc8:	0005      	movs	r5, r0
   24cca:	4343      	muls	r3, r0
   24ccc:	0039      	movs	r1, r7
   24cce:	4650      	mov	r0, sl
   24cd0:	9304      	str	r3, [sp, #16]
   24cd2:	f7ff fa45 	bl	24160 <__aeabi_uidivmod>
   24cd6:	9804      	ldr	r0, [sp, #16]
   24cd8:	040b      	lsls	r3, r1, #16
   24cda:	0c31      	lsrs	r1, r6, #16
   24cdc:	4319      	orrs	r1, r3
   24cde:	4288      	cmp	r0, r1
   24ce0:	d909      	bls.n	24cf6 <__aeabi_ddiv+0x342>
   24ce2:	4441      	add	r1, r8
   24ce4:	1e6b      	subs	r3, r5, #1
   24ce6:	4588      	cmp	r8, r1
   24ce8:	d900      	bls.n	24cec <__aeabi_ddiv+0x338>
   24cea:	e107      	b.n	24efc <__aeabi_ddiv+0x548>
   24cec:	4288      	cmp	r0, r1
   24cee:	d800      	bhi.n	24cf2 <__aeabi_ddiv+0x33e>
   24cf0:	e104      	b.n	24efc <__aeabi_ddiv+0x548>
   24cf2:	3d02      	subs	r5, #2
   24cf4:	4441      	add	r1, r8
   24cf6:	9b04      	ldr	r3, [sp, #16]
   24cf8:	1acb      	subs	r3, r1, r3
   24cfa:	0018      	movs	r0, r3
   24cfc:	0039      	movs	r1, r7
   24cfe:	9304      	str	r3, [sp, #16]
   24d00:	f7ff f9a8 	bl	24054 <__udivsi3>
   24d04:	9b01      	ldr	r3, [sp, #4]
   24d06:	4682      	mov	sl, r0
   24d08:	4343      	muls	r3, r0
   24d0a:	0039      	movs	r1, r7
   24d0c:	9804      	ldr	r0, [sp, #16]
   24d0e:	9301      	str	r3, [sp, #4]
   24d10:	f7ff fa26 	bl	24160 <__aeabi_uidivmod>
   24d14:	9801      	ldr	r0, [sp, #4]
   24d16:	040b      	lsls	r3, r1, #16
   24d18:	0431      	lsls	r1, r6, #16
   24d1a:	0c09      	lsrs	r1, r1, #16
   24d1c:	4319      	orrs	r1, r3
   24d1e:	4288      	cmp	r0, r1
   24d20:	d90d      	bls.n	24d3e <__aeabi_ddiv+0x38a>
   24d22:	4653      	mov	r3, sl
   24d24:	4441      	add	r1, r8
   24d26:	3b01      	subs	r3, #1
   24d28:	4588      	cmp	r8, r1
   24d2a:	d900      	bls.n	24d2e <__aeabi_ddiv+0x37a>
   24d2c:	e0e8      	b.n	24f00 <__aeabi_ddiv+0x54c>
   24d2e:	4288      	cmp	r0, r1
   24d30:	d800      	bhi.n	24d34 <__aeabi_ddiv+0x380>
   24d32:	e0e5      	b.n	24f00 <__aeabi_ddiv+0x54c>
   24d34:	2302      	movs	r3, #2
   24d36:	425b      	negs	r3, r3
   24d38:	469c      	mov	ip, r3
   24d3a:	4441      	add	r1, r8
   24d3c:	44e2      	add	sl, ip
   24d3e:	9b01      	ldr	r3, [sp, #4]
   24d40:	042d      	lsls	r5, r5, #16
   24d42:	1ace      	subs	r6, r1, r3
   24d44:	4651      	mov	r1, sl
   24d46:	4329      	orrs	r1, r5
   24d48:	9d05      	ldr	r5, [sp, #20]
   24d4a:	464f      	mov	r7, r9
   24d4c:	002a      	movs	r2, r5
   24d4e:	040b      	lsls	r3, r1, #16
   24d50:	0c08      	lsrs	r0, r1, #16
   24d52:	0c1b      	lsrs	r3, r3, #16
   24d54:	435a      	muls	r2, r3
   24d56:	4345      	muls	r5, r0
   24d58:	437b      	muls	r3, r7
   24d5a:	4378      	muls	r0, r7
   24d5c:	195b      	adds	r3, r3, r5
   24d5e:	0c17      	lsrs	r7, r2, #16
   24d60:	18fb      	adds	r3, r7, r3
   24d62:	429d      	cmp	r5, r3
   24d64:	d903      	bls.n	24d6e <__aeabi_ddiv+0x3ba>
   24d66:	2580      	movs	r5, #128	; 0x80
   24d68:	026d      	lsls	r5, r5, #9
   24d6a:	46ac      	mov	ip, r5
   24d6c:	4460      	add	r0, ip
   24d6e:	0c1d      	lsrs	r5, r3, #16
   24d70:	0412      	lsls	r2, r2, #16
   24d72:	041b      	lsls	r3, r3, #16
   24d74:	0c12      	lsrs	r2, r2, #16
   24d76:	1828      	adds	r0, r5, r0
   24d78:	189b      	adds	r3, r3, r2
   24d7a:	4286      	cmp	r6, r0
   24d7c:	d200      	bcs.n	24d80 <__aeabi_ddiv+0x3cc>
   24d7e:	e093      	b.n	24ea8 <__aeabi_ddiv+0x4f4>
   24d80:	d100      	bne.n	24d84 <__aeabi_ddiv+0x3d0>
   24d82:	e08e      	b.n	24ea2 <__aeabi_ddiv+0x4ee>
   24d84:	2301      	movs	r3, #1
   24d86:	4319      	orrs	r1, r3
   24d88:	4ba0      	ldr	r3, [pc, #640]	; (2500c <__aeabi_ddiv+0x658>)
   24d8a:	18e3      	adds	r3, r4, r3
   24d8c:	2b00      	cmp	r3, #0
   24d8e:	dc00      	bgt.n	24d92 <__aeabi_ddiv+0x3de>
   24d90:	e099      	b.n	24ec6 <__aeabi_ddiv+0x512>
   24d92:	074a      	lsls	r2, r1, #29
   24d94:	d000      	beq.n	24d98 <__aeabi_ddiv+0x3e4>
   24d96:	e09e      	b.n	24ed6 <__aeabi_ddiv+0x522>
   24d98:	465a      	mov	r2, fp
   24d9a:	01d2      	lsls	r2, r2, #7
   24d9c:	d506      	bpl.n	24dac <__aeabi_ddiv+0x3f8>
   24d9e:	465a      	mov	r2, fp
   24da0:	4b9b      	ldr	r3, [pc, #620]	; (25010 <__aeabi_ddiv+0x65c>)
   24da2:	401a      	ands	r2, r3
   24da4:	2380      	movs	r3, #128	; 0x80
   24da6:	4693      	mov	fp, r2
   24da8:	00db      	lsls	r3, r3, #3
   24daa:	18e3      	adds	r3, r4, r3
   24dac:	4a99      	ldr	r2, [pc, #612]	; (25014 <__aeabi_ddiv+0x660>)
   24dae:	4293      	cmp	r3, r2
   24db0:	dd68      	ble.n	24e84 <__aeabi_ddiv+0x4d0>
   24db2:	2301      	movs	r3, #1
   24db4:	9a02      	ldr	r2, [sp, #8]
   24db6:	4c98      	ldr	r4, [pc, #608]	; (25018 <__aeabi_ddiv+0x664>)
   24db8:	401a      	ands	r2, r3
   24dba:	2300      	movs	r3, #0
   24dbc:	4694      	mov	ip, r2
   24dbe:	4698      	mov	r8, r3
   24dc0:	2200      	movs	r2, #0
   24dc2:	e6c5      	b.n	24b50 <__aeabi_ddiv+0x19c>
   24dc4:	2280      	movs	r2, #128	; 0x80
   24dc6:	464b      	mov	r3, r9
   24dc8:	0312      	lsls	r2, r2, #12
   24dca:	4213      	tst	r3, r2
   24dcc:	d00a      	beq.n	24de4 <__aeabi_ddiv+0x430>
   24dce:	465b      	mov	r3, fp
   24dd0:	4213      	tst	r3, r2
   24dd2:	d106      	bne.n	24de2 <__aeabi_ddiv+0x42e>
   24dd4:	431a      	orrs	r2, r3
   24dd6:	0312      	lsls	r2, r2, #12
   24dd8:	0b12      	lsrs	r2, r2, #12
   24dda:	46ac      	mov	ip, r5
   24ddc:	4688      	mov	r8, r1
   24dde:	4c8e      	ldr	r4, [pc, #568]	; (25018 <__aeabi_ddiv+0x664>)
   24de0:	e6b6      	b.n	24b50 <__aeabi_ddiv+0x19c>
   24de2:	464b      	mov	r3, r9
   24de4:	431a      	orrs	r2, r3
   24de6:	0312      	lsls	r2, r2, #12
   24de8:	0b12      	lsrs	r2, r2, #12
   24dea:	46bc      	mov	ip, r7
   24dec:	4c8a      	ldr	r4, [pc, #552]	; (25018 <__aeabi_ddiv+0x664>)
   24dee:	e6af      	b.n	24b50 <__aeabi_ddiv+0x19c>
   24df0:	0003      	movs	r3, r0
   24df2:	465a      	mov	r2, fp
   24df4:	3b28      	subs	r3, #40	; 0x28
   24df6:	409a      	lsls	r2, r3
   24df8:	2300      	movs	r3, #0
   24dfa:	4691      	mov	r9, r2
   24dfc:	4698      	mov	r8, r3
   24dfe:	e657      	b.n	24ab0 <__aeabi_ddiv+0xfc>
   24e00:	4658      	mov	r0, fp
   24e02:	f000 ff0d 	bl	25c20 <__clzsi2>
   24e06:	3020      	adds	r0, #32
   24e08:	e640      	b.n	24a8c <__aeabi_ddiv+0xd8>
   24e0a:	0003      	movs	r3, r0
   24e0c:	4652      	mov	r2, sl
   24e0e:	3b28      	subs	r3, #40	; 0x28
   24e10:	409a      	lsls	r2, r3
   24e12:	2100      	movs	r1, #0
   24e14:	4693      	mov	fp, r2
   24e16:	e677      	b.n	24b08 <__aeabi_ddiv+0x154>
   24e18:	f000 ff02 	bl	25c20 <__clzsi2>
   24e1c:	3020      	adds	r0, #32
   24e1e:	e65f      	b.n	24ae0 <__aeabi_ddiv+0x12c>
   24e20:	4588      	cmp	r8, r1
   24e22:	d200      	bcs.n	24e26 <__aeabi_ddiv+0x472>
   24e24:	e6c7      	b.n	24bb6 <__aeabi_ddiv+0x202>
   24e26:	464b      	mov	r3, r9
   24e28:	07de      	lsls	r6, r3, #31
   24e2a:	085d      	lsrs	r5, r3, #1
   24e2c:	4643      	mov	r3, r8
   24e2e:	085b      	lsrs	r3, r3, #1
   24e30:	431e      	orrs	r6, r3
   24e32:	4643      	mov	r3, r8
   24e34:	07db      	lsls	r3, r3, #31
   24e36:	469a      	mov	sl, r3
   24e38:	e6c2      	b.n	24bc0 <__aeabi_ddiv+0x20c>
   24e3a:	2500      	movs	r5, #0
   24e3c:	4592      	cmp	sl, r2
   24e3e:	d300      	bcc.n	24e42 <__aeabi_ddiv+0x48e>
   24e40:	e733      	b.n	24caa <__aeabi_ddiv+0x2f6>
   24e42:	9e03      	ldr	r6, [sp, #12]
   24e44:	4659      	mov	r1, fp
   24e46:	46b4      	mov	ip, r6
   24e48:	44e2      	add	sl, ip
   24e4a:	45b2      	cmp	sl, r6
   24e4c:	41ad      	sbcs	r5, r5
   24e4e:	426d      	negs	r5, r5
   24e50:	4445      	add	r5, r8
   24e52:	18eb      	adds	r3, r5, r3
   24e54:	3901      	subs	r1, #1
   24e56:	4598      	cmp	r8, r3
   24e58:	d207      	bcs.n	24e6a <__aeabi_ddiv+0x4b6>
   24e5a:	4298      	cmp	r0, r3
   24e5c:	d900      	bls.n	24e60 <__aeabi_ddiv+0x4ac>
   24e5e:	e07f      	b.n	24f60 <__aeabi_ddiv+0x5ac>
   24e60:	d100      	bne.n	24e64 <__aeabi_ddiv+0x4b0>
   24e62:	e0bc      	b.n	24fde <__aeabi_ddiv+0x62a>
   24e64:	1a1d      	subs	r5, r3, r0
   24e66:	468b      	mov	fp, r1
   24e68:	e71f      	b.n	24caa <__aeabi_ddiv+0x2f6>
   24e6a:	4598      	cmp	r8, r3
   24e6c:	d1fa      	bne.n	24e64 <__aeabi_ddiv+0x4b0>
   24e6e:	9d03      	ldr	r5, [sp, #12]
   24e70:	4555      	cmp	r5, sl
   24e72:	d9f2      	bls.n	24e5a <__aeabi_ddiv+0x4a6>
   24e74:	4643      	mov	r3, r8
   24e76:	468b      	mov	fp, r1
   24e78:	1a1d      	subs	r5, r3, r0
   24e7a:	e716      	b.n	24caa <__aeabi_ddiv+0x2f6>
   24e7c:	469b      	mov	fp, r3
   24e7e:	e6ca      	b.n	24c16 <__aeabi_ddiv+0x262>
   24e80:	0015      	movs	r5, r2
   24e82:	e6e7      	b.n	24c54 <__aeabi_ddiv+0x2a0>
   24e84:	465a      	mov	r2, fp
   24e86:	08c9      	lsrs	r1, r1, #3
   24e88:	0752      	lsls	r2, r2, #29
   24e8a:	430a      	orrs	r2, r1
   24e8c:	055b      	lsls	r3, r3, #21
   24e8e:	4690      	mov	r8, r2
   24e90:	0d5c      	lsrs	r4, r3, #21
   24e92:	465a      	mov	r2, fp
   24e94:	2301      	movs	r3, #1
   24e96:	9902      	ldr	r1, [sp, #8]
   24e98:	0252      	lsls	r2, r2, #9
   24e9a:	4019      	ands	r1, r3
   24e9c:	0b12      	lsrs	r2, r2, #12
   24e9e:	468c      	mov	ip, r1
   24ea0:	e656      	b.n	24b50 <__aeabi_ddiv+0x19c>
   24ea2:	2b00      	cmp	r3, #0
   24ea4:	d100      	bne.n	24ea8 <__aeabi_ddiv+0x4f4>
   24ea6:	e76f      	b.n	24d88 <__aeabi_ddiv+0x3d4>
   24ea8:	4446      	add	r6, r8
   24eaa:	1e4a      	subs	r2, r1, #1
   24eac:	45b0      	cmp	r8, r6
   24eae:	d929      	bls.n	24f04 <__aeabi_ddiv+0x550>
   24eb0:	0011      	movs	r1, r2
   24eb2:	4286      	cmp	r6, r0
   24eb4:	d000      	beq.n	24eb8 <__aeabi_ddiv+0x504>
   24eb6:	e765      	b.n	24d84 <__aeabi_ddiv+0x3d0>
   24eb8:	9a03      	ldr	r2, [sp, #12]
   24eba:	4293      	cmp	r3, r2
   24ebc:	d000      	beq.n	24ec0 <__aeabi_ddiv+0x50c>
   24ebe:	e761      	b.n	24d84 <__aeabi_ddiv+0x3d0>
   24ec0:	e762      	b.n	24d88 <__aeabi_ddiv+0x3d4>
   24ec2:	2101      	movs	r1, #1
   24ec4:	4249      	negs	r1, r1
   24ec6:	2001      	movs	r0, #1
   24ec8:	1ac2      	subs	r2, r0, r3
   24eca:	2a38      	cmp	r2, #56	; 0x38
   24ecc:	dd21      	ble.n	24f12 <__aeabi_ddiv+0x55e>
   24ece:	9b02      	ldr	r3, [sp, #8]
   24ed0:	4003      	ands	r3, r0
   24ed2:	469c      	mov	ip, r3
   24ed4:	e638      	b.n	24b48 <__aeabi_ddiv+0x194>
   24ed6:	220f      	movs	r2, #15
   24ed8:	400a      	ands	r2, r1
   24eda:	2a04      	cmp	r2, #4
   24edc:	d100      	bne.n	24ee0 <__aeabi_ddiv+0x52c>
   24ede:	e75b      	b.n	24d98 <__aeabi_ddiv+0x3e4>
   24ee0:	000a      	movs	r2, r1
   24ee2:	1d11      	adds	r1, r2, #4
   24ee4:	4291      	cmp	r1, r2
   24ee6:	4192      	sbcs	r2, r2
   24ee8:	4252      	negs	r2, r2
   24eea:	4493      	add	fp, r2
   24eec:	e754      	b.n	24d98 <__aeabi_ddiv+0x3e4>
   24eee:	4b47      	ldr	r3, [pc, #284]	; (2500c <__aeabi_ddiv+0x658>)
   24ef0:	18e3      	adds	r3, r4, r3
   24ef2:	2b00      	cmp	r3, #0
   24ef4:	dde5      	ble.n	24ec2 <__aeabi_ddiv+0x50e>
   24ef6:	2201      	movs	r2, #1
   24ef8:	4252      	negs	r2, r2
   24efa:	e7f2      	b.n	24ee2 <__aeabi_ddiv+0x52e>
   24efc:	001d      	movs	r5, r3
   24efe:	e6fa      	b.n	24cf6 <__aeabi_ddiv+0x342>
   24f00:	469a      	mov	sl, r3
   24f02:	e71c      	b.n	24d3e <__aeabi_ddiv+0x38a>
   24f04:	42b0      	cmp	r0, r6
   24f06:	d839      	bhi.n	24f7c <__aeabi_ddiv+0x5c8>
   24f08:	d06e      	beq.n	24fe8 <__aeabi_ddiv+0x634>
   24f0a:	0011      	movs	r1, r2
   24f0c:	e73a      	b.n	24d84 <__aeabi_ddiv+0x3d0>
   24f0e:	9302      	str	r3, [sp, #8]
   24f10:	e73a      	b.n	24d88 <__aeabi_ddiv+0x3d4>
   24f12:	2a1f      	cmp	r2, #31
   24f14:	dc3c      	bgt.n	24f90 <__aeabi_ddiv+0x5dc>
   24f16:	2320      	movs	r3, #32
   24f18:	1a9b      	subs	r3, r3, r2
   24f1a:	000c      	movs	r4, r1
   24f1c:	4658      	mov	r0, fp
   24f1e:	4099      	lsls	r1, r3
   24f20:	4098      	lsls	r0, r3
   24f22:	1e4b      	subs	r3, r1, #1
   24f24:	4199      	sbcs	r1, r3
   24f26:	465b      	mov	r3, fp
   24f28:	40d4      	lsrs	r4, r2
   24f2a:	40d3      	lsrs	r3, r2
   24f2c:	4320      	orrs	r0, r4
   24f2e:	4308      	orrs	r0, r1
   24f30:	001a      	movs	r2, r3
   24f32:	0743      	lsls	r3, r0, #29
   24f34:	d009      	beq.n	24f4a <__aeabi_ddiv+0x596>
   24f36:	230f      	movs	r3, #15
   24f38:	4003      	ands	r3, r0
   24f3a:	2b04      	cmp	r3, #4
   24f3c:	d005      	beq.n	24f4a <__aeabi_ddiv+0x596>
   24f3e:	0001      	movs	r1, r0
   24f40:	1d08      	adds	r0, r1, #4
   24f42:	4288      	cmp	r0, r1
   24f44:	419b      	sbcs	r3, r3
   24f46:	425b      	negs	r3, r3
   24f48:	18d2      	adds	r2, r2, r3
   24f4a:	0213      	lsls	r3, r2, #8
   24f4c:	d53a      	bpl.n	24fc4 <__aeabi_ddiv+0x610>
   24f4e:	2301      	movs	r3, #1
   24f50:	9a02      	ldr	r2, [sp, #8]
   24f52:	2401      	movs	r4, #1
   24f54:	401a      	ands	r2, r3
   24f56:	2300      	movs	r3, #0
   24f58:	4694      	mov	ip, r2
   24f5a:	4698      	mov	r8, r3
   24f5c:	2200      	movs	r2, #0
   24f5e:	e5f7      	b.n	24b50 <__aeabi_ddiv+0x19c>
   24f60:	2102      	movs	r1, #2
   24f62:	4249      	negs	r1, r1
   24f64:	468c      	mov	ip, r1
   24f66:	9d03      	ldr	r5, [sp, #12]
   24f68:	44e3      	add	fp, ip
   24f6a:	46ac      	mov	ip, r5
   24f6c:	44e2      	add	sl, ip
   24f6e:	45aa      	cmp	sl, r5
   24f70:	41ad      	sbcs	r5, r5
   24f72:	426d      	negs	r5, r5
   24f74:	4445      	add	r5, r8
   24f76:	18ed      	adds	r5, r5, r3
   24f78:	1a2d      	subs	r5, r5, r0
   24f7a:	e696      	b.n	24caa <__aeabi_ddiv+0x2f6>
   24f7c:	1e8a      	subs	r2, r1, #2
   24f7e:	9903      	ldr	r1, [sp, #12]
   24f80:	004d      	lsls	r5, r1, #1
   24f82:	428d      	cmp	r5, r1
   24f84:	4189      	sbcs	r1, r1
   24f86:	4249      	negs	r1, r1
   24f88:	4441      	add	r1, r8
   24f8a:	1876      	adds	r6, r6, r1
   24f8c:	9503      	str	r5, [sp, #12]
   24f8e:	e78f      	b.n	24eb0 <__aeabi_ddiv+0x4fc>
   24f90:	201f      	movs	r0, #31
   24f92:	4240      	negs	r0, r0
   24f94:	1ac3      	subs	r3, r0, r3
   24f96:	4658      	mov	r0, fp
   24f98:	40d8      	lsrs	r0, r3
   24f9a:	0003      	movs	r3, r0
   24f9c:	2a20      	cmp	r2, #32
   24f9e:	d028      	beq.n	24ff2 <__aeabi_ddiv+0x63e>
   24fa0:	2040      	movs	r0, #64	; 0x40
   24fa2:	465d      	mov	r5, fp
   24fa4:	1a82      	subs	r2, r0, r2
   24fa6:	4095      	lsls	r5, r2
   24fa8:	4329      	orrs	r1, r5
   24faa:	1e4a      	subs	r2, r1, #1
   24fac:	4191      	sbcs	r1, r2
   24fae:	4319      	orrs	r1, r3
   24fb0:	2307      	movs	r3, #7
   24fb2:	2200      	movs	r2, #0
   24fb4:	400b      	ands	r3, r1
   24fb6:	d009      	beq.n	24fcc <__aeabi_ddiv+0x618>
   24fb8:	230f      	movs	r3, #15
   24fba:	2200      	movs	r2, #0
   24fbc:	400b      	ands	r3, r1
   24fbe:	0008      	movs	r0, r1
   24fc0:	2b04      	cmp	r3, #4
   24fc2:	d1bd      	bne.n	24f40 <__aeabi_ddiv+0x58c>
   24fc4:	0001      	movs	r1, r0
   24fc6:	0753      	lsls	r3, r2, #29
   24fc8:	0252      	lsls	r2, r2, #9
   24fca:	0b12      	lsrs	r2, r2, #12
   24fcc:	08c9      	lsrs	r1, r1, #3
   24fce:	4319      	orrs	r1, r3
   24fd0:	2301      	movs	r3, #1
   24fd2:	4688      	mov	r8, r1
   24fd4:	9902      	ldr	r1, [sp, #8]
   24fd6:	2400      	movs	r4, #0
   24fd8:	4019      	ands	r1, r3
   24fda:	468c      	mov	ip, r1
   24fdc:	e5b8      	b.n	24b50 <__aeabi_ddiv+0x19c>
   24fde:	4552      	cmp	r2, sl
   24fe0:	d8be      	bhi.n	24f60 <__aeabi_ddiv+0x5ac>
   24fe2:	468b      	mov	fp, r1
   24fe4:	2500      	movs	r5, #0
   24fe6:	e660      	b.n	24caa <__aeabi_ddiv+0x2f6>
   24fe8:	9d03      	ldr	r5, [sp, #12]
   24fea:	429d      	cmp	r5, r3
   24fec:	d3c6      	bcc.n	24f7c <__aeabi_ddiv+0x5c8>
   24fee:	0011      	movs	r1, r2
   24ff0:	e762      	b.n	24eb8 <__aeabi_ddiv+0x504>
   24ff2:	2500      	movs	r5, #0
   24ff4:	e7d8      	b.n	24fa8 <__aeabi_ddiv+0x5f4>
   24ff6:	2280      	movs	r2, #128	; 0x80
   24ff8:	465b      	mov	r3, fp
   24ffa:	0312      	lsls	r2, r2, #12
   24ffc:	431a      	orrs	r2, r3
   24ffe:	9b01      	ldr	r3, [sp, #4]
   25000:	0312      	lsls	r2, r2, #12
   25002:	0b12      	lsrs	r2, r2, #12
   25004:	469c      	mov	ip, r3
   25006:	4688      	mov	r8, r1
   25008:	4c03      	ldr	r4, [pc, #12]	; (25018 <__aeabi_ddiv+0x664>)
   2500a:	e5a1      	b.n	24b50 <__aeabi_ddiv+0x19c>
   2500c:	000003ff 	.word	0x000003ff
   25010:	feffffff 	.word	0xfeffffff
   25014:	000007fe 	.word	0x000007fe
   25018:	000007ff 	.word	0x000007ff

0002501c <__aeabi_dmul>:
   2501c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2501e:	4657      	mov	r7, sl
   25020:	4645      	mov	r5, r8
   25022:	46de      	mov	lr, fp
   25024:	464e      	mov	r6, r9
   25026:	b5e0      	push	{r5, r6, r7, lr}
   25028:	030c      	lsls	r4, r1, #12
   2502a:	4698      	mov	r8, r3
   2502c:	004e      	lsls	r6, r1, #1
   2502e:	0b23      	lsrs	r3, r4, #12
   25030:	b087      	sub	sp, #28
   25032:	0007      	movs	r7, r0
   25034:	4692      	mov	sl, r2
   25036:	469b      	mov	fp, r3
   25038:	0d76      	lsrs	r6, r6, #21
   2503a:	0fcd      	lsrs	r5, r1, #31
   2503c:	2e00      	cmp	r6, #0
   2503e:	d06b      	beq.n	25118 <__aeabi_dmul+0xfc>
   25040:	4b6d      	ldr	r3, [pc, #436]	; (251f8 <__aeabi_dmul+0x1dc>)
   25042:	429e      	cmp	r6, r3
   25044:	d035      	beq.n	250b2 <__aeabi_dmul+0x96>
   25046:	2480      	movs	r4, #128	; 0x80
   25048:	465b      	mov	r3, fp
   2504a:	0f42      	lsrs	r2, r0, #29
   2504c:	0424      	lsls	r4, r4, #16
   2504e:	00db      	lsls	r3, r3, #3
   25050:	4314      	orrs	r4, r2
   25052:	431c      	orrs	r4, r3
   25054:	00c3      	lsls	r3, r0, #3
   25056:	4699      	mov	r9, r3
   25058:	4b68      	ldr	r3, [pc, #416]	; (251fc <__aeabi_dmul+0x1e0>)
   2505a:	46a3      	mov	fp, r4
   2505c:	469c      	mov	ip, r3
   2505e:	2300      	movs	r3, #0
   25060:	2700      	movs	r7, #0
   25062:	4466      	add	r6, ip
   25064:	9302      	str	r3, [sp, #8]
   25066:	4643      	mov	r3, r8
   25068:	031c      	lsls	r4, r3, #12
   2506a:	005a      	lsls	r2, r3, #1
   2506c:	0fdb      	lsrs	r3, r3, #31
   2506e:	4650      	mov	r0, sl
   25070:	0b24      	lsrs	r4, r4, #12
   25072:	0d52      	lsrs	r2, r2, #21
   25074:	4698      	mov	r8, r3
   25076:	d100      	bne.n	2507a <__aeabi_dmul+0x5e>
   25078:	e076      	b.n	25168 <__aeabi_dmul+0x14c>
   2507a:	4b5f      	ldr	r3, [pc, #380]	; (251f8 <__aeabi_dmul+0x1dc>)
   2507c:	429a      	cmp	r2, r3
   2507e:	d06d      	beq.n	2515c <__aeabi_dmul+0x140>
   25080:	2380      	movs	r3, #128	; 0x80
   25082:	0f41      	lsrs	r1, r0, #29
   25084:	041b      	lsls	r3, r3, #16
   25086:	430b      	orrs	r3, r1
   25088:	495c      	ldr	r1, [pc, #368]	; (251fc <__aeabi_dmul+0x1e0>)
   2508a:	00e4      	lsls	r4, r4, #3
   2508c:	468c      	mov	ip, r1
   2508e:	431c      	orrs	r4, r3
   25090:	00c3      	lsls	r3, r0, #3
   25092:	2000      	movs	r0, #0
   25094:	4462      	add	r2, ip
   25096:	4641      	mov	r1, r8
   25098:	18b6      	adds	r6, r6, r2
   2509a:	4069      	eors	r1, r5
   2509c:	1c72      	adds	r2, r6, #1
   2509e:	9101      	str	r1, [sp, #4]
   250a0:	4694      	mov	ip, r2
   250a2:	4307      	orrs	r7, r0
   250a4:	2f0f      	cmp	r7, #15
   250a6:	d900      	bls.n	250aa <__aeabi_dmul+0x8e>
   250a8:	e0b0      	b.n	2520c <__aeabi_dmul+0x1f0>
   250aa:	4a55      	ldr	r2, [pc, #340]	; (25200 <__aeabi_dmul+0x1e4>)
   250ac:	00bf      	lsls	r7, r7, #2
   250ae:	59d2      	ldr	r2, [r2, r7]
   250b0:	4697      	mov	pc, r2
   250b2:	465b      	mov	r3, fp
   250b4:	4303      	orrs	r3, r0
   250b6:	4699      	mov	r9, r3
   250b8:	d000      	beq.n	250bc <__aeabi_dmul+0xa0>
   250ba:	e087      	b.n	251cc <__aeabi_dmul+0x1b0>
   250bc:	2300      	movs	r3, #0
   250be:	469b      	mov	fp, r3
   250c0:	3302      	adds	r3, #2
   250c2:	2708      	movs	r7, #8
   250c4:	9302      	str	r3, [sp, #8]
   250c6:	e7ce      	b.n	25066 <__aeabi_dmul+0x4a>
   250c8:	4642      	mov	r2, r8
   250ca:	9201      	str	r2, [sp, #4]
   250cc:	2802      	cmp	r0, #2
   250ce:	d067      	beq.n	251a0 <__aeabi_dmul+0x184>
   250d0:	2803      	cmp	r0, #3
   250d2:	d100      	bne.n	250d6 <__aeabi_dmul+0xba>
   250d4:	e20e      	b.n	254f4 <__aeabi_dmul+0x4d8>
   250d6:	2801      	cmp	r0, #1
   250d8:	d000      	beq.n	250dc <__aeabi_dmul+0xc0>
   250da:	e162      	b.n	253a2 <__aeabi_dmul+0x386>
   250dc:	2300      	movs	r3, #0
   250de:	2400      	movs	r4, #0
   250e0:	2200      	movs	r2, #0
   250e2:	4699      	mov	r9, r3
   250e4:	9901      	ldr	r1, [sp, #4]
   250e6:	4001      	ands	r1, r0
   250e8:	b2cd      	uxtb	r5, r1
   250ea:	2100      	movs	r1, #0
   250ec:	0312      	lsls	r2, r2, #12
   250ee:	0d0b      	lsrs	r3, r1, #20
   250f0:	0b12      	lsrs	r2, r2, #12
   250f2:	051b      	lsls	r3, r3, #20
   250f4:	4313      	orrs	r3, r2
   250f6:	4a43      	ldr	r2, [pc, #268]	; (25204 <__aeabi_dmul+0x1e8>)
   250f8:	0524      	lsls	r4, r4, #20
   250fa:	4013      	ands	r3, r2
   250fc:	431c      	orrs	r4, r3
   250fe:	0064      	lsls	r4, r4, #1
   25100:	07ed      	lsls	r5, r5, #31
   25102:	0864      	lsrs	r4, r4, #1
   25104:	432c      	orrs	r4, r5
   25106:	4648      	mov	r0, r9
   25108:	0021      	movs	r1, r4
   2510a:	b007      	add	sp, #28
   2510c:	bc3c      	pop	{r2, r3, r4, r5}
   2510e:	4690      	mov	r8, r2
   25110:	4699      	mov	r9, r3
   25112:	46a2      	mov	sl, r4
   25114:	46ab      	mov	fp, r5
   25116:	bdf0      	pop	{r4, r5, r6, r7, pc}
   25118:	4303      	orrs	r3, r0
   2511a:	4699      	mov	r9, r3
   2511c:	d04f      	beq.n	251be <__aeabi_dmul+0x1a2>
   2511e:	465b      	mov	r3, fp
   25120:	2b00      	cmp	r3, #0
   25122:	d100      	bne.n	25126 <__aeabi_dmul+0x10a>
   25124:	e189      	b.n	2543a <__aeabi_dmul+0x41e>
   25126:	4658      	mov	r0, fp
   25128:	f000 fd7a 	bl	25c20 <__clzsi2>
   2512c:	0003      	movs	r3, r0
   2512e:	3b0b      	subs	r3, #11
   25130:	2b1c      	cmp	r3, #28
   25132:	dd00      	ble.n	25136 <__aeabi_dmul+0x11a>
   25134:	e17a      	b.n	2542c <__aeabi_dmul+0x410>
   25136:	221d      	movs	r2, #29
   25138:	1ad3      	subs	r3, r2, r3
   2513a:	003a      	movs	r2, r7
   2513c:	0001      	movs	r1, r0
   2513e:	465c      	mov	r4, fp
   25140:	40da      	lsrs	r2, r3
   25142:	3908      	subs	r1, #8
   25144:	408c      	lsls	r4, r1
   25146:	0013      	movs	r3, r2
   25148:	408f      	lsls	r7, r1
   2514a:	4323      	orrs	r3, r4
   2514c:	469b      	mov	fp, r3
   2514e:	46b9      	mov	r9, r7
   25150:	2300      	movs	r3, #0
   25152:	4e2d      	ldr	r6, [pc, #180]	; (25208 <__aeabi_dmul+0x1ec>)
   25154:	2700      	movs	r7, #0
   25156:	1a36      	subs	r6, r6, r0
   25158:	9302      	str	r3, [sp, #8]
   2515a:	e784      	b.n	25066 <__aeabi_dmul+0x4a>
   2515c:	4653      	mov	r3, sl
   2515e:	4323      	orrs	r3, r4
   25160:	d12a      	bne.n	251b8 <__aeabi_dmul+0x19c>
   25162:	2400      	movs	r4, #0
   25164:	2002      	movs	r0, #2
   25166:	e796      	b.n	25096 <__aeabi_dmul+0x7a>
   25168:	4653      	mov	r3, sl
   2516a:	4323      	orrs	r3, r4
   2516c:	d020      	beq.n	251b0 <__aeabi_dmul+0x194>
   2516e:	2c00      	cmp	r4, #0
   25170:	d100      	bne.n	25174 <__aeabi_dmul+0x158>
   25172:	e157      	b.n	25424 <__aeabi_dmul+0x408>
   25174:	0020      	movs	r0, r4
   25176:	f000 fd53 	bl	25c20 <__clzsi2>
   2517a:	0003      	movs	r3, r0
   2517c:	3b0b      	subs	r3, #11
   2517e:	2b1c      	cmp	r3, #28
   25180:	dd00      	ble.n	25184 <__aeabi_dmul+0x168>
   25182:	e149      	b.n	25418 <__aeabi_dmul+0x3fc>
   25184:	211d      	movs	r1, #29
   25186:	1acb      	subs	r3, r1, r3
   25188:	4651      	mov	r1, sl
   2518a:	0002      	movs	r2, r0
   2518c:	40d9      	lsrs	r1, r3
   2518e:	4653      	mov	r3, sl
   25190:	3a08      	subs	r2, #8
   25192:	4094      	lsls	r4, r2
   25194:	4093      	lsls	r3, r2
   25196:	430c      	orrs	r4, r1
   25198:	4a1b      	ldr	r2, [pc, #108]	; (25208 <__aeabi_dmul+0x1ec>)
   2519a:	1a12      	subs	r2, r2, r0
   2519c:	2000      	movs	r0, #0
   2519e:	e77a      	b.n	25096 <__aeabi_dmul+0x7a>
   251a0:	2501      	movs	r5, #1
   251a2:	9b01      	ldr	r3, [sp, #4]
   251a4:	4c14      	ldr	r4, [pc, #80]	; (251f8 <__aeabi_dmul+0x1dc>)
   251a6:	401d      	ands	r5, r3
   251a8:	2300      	movs	r3, #0
   251aa:	2200      	movs	r2, #0
   251ac:	4699      	mov	r9, r3
   251ae:	e79c      	b.n	250ea <__aeabi_dmul+0xce>
   251b0:	2400      	movs	r4, #0
   251b2:	2200      	movs	r2, #0
   251b4:	2001      	movs	r0, #1
   251b6:	e76e      	b.n	25096 <__aeabi_dmul+0x7a>
   251b8:	4653      	mov	r3, sl
   251ba:	2003      	movs	r0, #3
   251bc:	e76b      	b.n	25096 <__aeabi_dmul+0x7a>
   251be:	2300      	movs	r3, #0
   251c0:	469b      	mov	fp, r3
   251c2:	3301      	adds	r3, #1
   251c4:	2704      	movs	r7, #4
   251c6:	2600      	movs	r6, #0
   251c8:	9302      	str	r3, [sp, #8]
   251ca:	e74c      	b.n	25066 <__aeabi_dmul+0x4a>
   251cc:	2303      	movs	r3, #3
   251ce:	4681      	mov	r9, r0
   251d0:	270c      	movs	r7, #12
   251d2:	9302      	str	r3, [sp, #8]
   251d4:	e747      	b.n	25066 <__aeabi_dmul+0x4a>
   251d6:	2280      	movs	r2, #128	; 0x80
   251d8:	2300      	movs	r3, #0
   251da:	2500      	movs	r5, #0
   251dc:	0312      	lsls	r2, r2, #12
   251de:	4699      	mov	r9, r3
   251e0:	4c05      	ldr	r4, [pc, #20]	; (251f8 <__aeabi_dmul+0x1dc>)
   251e2:	e782      	b.n	250ea <__aeabi_dmul+0xce>
   251e4:	465c      	mov	r4, fp
   251e6:	464b      	mov	r3, r9
   251e8:	9802      	ldr	r0, [sp, #8]
   251ea:	e76f      	b.n	250cc <__aeabi_dmul+0xb0>
   251ec:	465c      	mov	r4, fp
   251ee:	464b      	mov	r3, r9
   251f0:	9501      	str	r5, [sp, #4]
   251f2:	9802      	ldr	r0, [sp, #8]
   251f4:	e76a      	b.n	250cc <__aeabi_dmul+0xb0>
   251f6:	46c0      	nop			; (mov r8, r8)
   251f8:	000007ff 	.word	0x000007ff
   251fc:	fffffc01 	.word	0xfffffc01
   25200:	0002bb6c 	.word	0x0002bb6c
   25204:	800fffff 	.word	0x800fffff
   25208:	fffffc0d 	.word	0xfffffc0d
   2520c:	464a      	mov	r2, r9
   2520e:	4649      	mov	r1, r9
   25210:	0c17      	lsrs	r7, r2, #16
   25212:	0c1a      	lsrs	r2, r3, #16
   25214:	041b      	lsls	r3, r3, #16
   25216:	0c1b      	lsrs	r3, r3, #16
   25218:	0408      	lsls	r0, r1, #16
   2521a:	0019      	movs	r1, r3
   2521c:	0c00      	lsrs	r0, r0, #16
   2521e:	4341      	muls	r1, r0
   25220:	0015      	movs	r5, r2
   25222:	4688      	mov	r8, r1
   25224:	0019      	movs	r1, r3
   25226:	437d      	muls	r5, r7
   25228:	4379      	muls	r1, r7
   2522a:	9503      	str	r5, [sp, #12]
   2522c:	4689      	mov	r9, r1
   2522e:	0029      	movs	r1, r5
   25230:	0015      	movs	r5, r2
   25232:	4345      	muls	r5, r0
   25234:	444d      	add	r5, r9
   25236:	9502      	str	r5, [sp, #8]
   25238:	4645      	mov	r5, r8
   2523a:	0c2d      	lsrs	r5, r5, #16
   2523c:	46aa      	mov	sl, r5
   2523e:	9d02      	ldr	r5, [sp, #8]
   25240:	4455      	add	r5, sl
   25242:	45a9      	cmp	r9, r5
   25244:	d906      	bls.n	25254 <__aeabi_dmul+0x238>
   25246:	468a      	mov	sl, r1
   25248:	2180      	movs	r1, #128	; 0x80
   2524a:	0249      	lsls	r1, r1, #9
   2524c:	4689      	mov	r9, r1
   2524e:	44ca      	add	sl, r9
   25250:	4651      	mov	r1, sl
   25252:	9103      	str	r1, [sp, #12]
   25254:	0c29      	lsrs	r1, r5, #16
   25256:	9104      	str	r1, [sp, #16]
   25258:	4641      	mov	r1, r8
   2525a:	0409      	lsls	r1, r1, #16
   2525c:	042d      	lsls	r5, r5, #16
   2525e:	0c09      	lsrs	r1, r1, #16
   25260:	4688      	mov	r8, r1
   25262:	0029      	movs	r1, r5
   25264:	0c25      	lsrs	r5, r4, #16
   25266:	0424      	lsls	r4, r4, #16
   25268:	4441      	add	r1, r8
   2526a:	0c24      	lsrs	r4, r4, #16
   2526c:	9105      	str	r1, [sp, #20]
   2526e:	0021      	movs	r1, r4
   25270:	4341      	muls	r1, r0
   25272:	4688      	mov	r8, r1
   25274:	0021      	movs	r1, r4
   25276:	4379      	muls	r1, r7
   25278:	468a      	mov	sl, r1
   2527a:	4368      	muls	r0, r5
   2527c:	4641      	mov	r1, r8
   2527e:	4450      	add	r0, sl
   25280:	4681      	mov	r9, r0
   25282:	0c08      	lsrs	r0, r1, #16
   25284:	4448      	add	r0, r9
   25286:	436f      	muls	r7, r5
   25288:	4582      	cmp	sl, r0
   2528a:	d903      	bls.n	25294 <__aeabi_dmul+0x278>
   2528c:	2180      	movs	r1, #128	; 0x80
   2528e:	0249      	lsls	r1, r1, #9
   25290:	4689      	mov	r9, r1
   25292:	444f      	add	r7, r9
   25294:	0c01      	lsrs	r1, r0, #16
   25296:	4689      	mov	r9, r1
   25298:	0039      	movs	r1, r7
   2529a:	4449      	add	r1, r9
   2529c:	9102      	str	r1, [sp, #8]
   2529e:	4641      	mov	r1, r8
   252a0:	040f      	lsls	r7, r1, #16
   252a2:	9904      	ldr	r1, [sp, #16]
   252a4:	0c3f      	lsrs	r7, r7, #16
   252a6:	4688      	mov	r8, r1
   252a8:	0400      	lsls	r0, r0, #16
   252aa:	19c0      	adds	r0, r0, r7
   252ac:	4480      	add	r8, r0
   252ae:	4641      	mov	r1, r8
   252b0:	9104      	str	r1, [sp, #16]
   252b2:	4659      	mov	r1, fp
   252b4:	0c0f      	lsrs	r7, r1, #16
   252b6:	0409      	lsls	r1, r1, #16
   252b8:	0c09      	lsrs	r1, r1, #16
   252ba:	4688      	mov	r8, r1
   252bc:	4359      	muls	r1, r3
   252be:	468a      	mov	sl, r1
   252c0:	0039      	movs	r1, r7
   252c2:	4351      	muls	r1, r2
   252c4:	4689      	mov	r9, r1
   252c6:	4641      	mov	r1, r8
   252c8:	434a      	muls	r2, r1
   252ca:	4651      	mov	r1, sl
   252cc:	0c09      	lsrs	r1, r1, #16
   252ce:	468b      	mov	fp, r1
   252d0:	437b      	muls	r3, r7
   252d2:	18d2      	adds	r2, r2, r3
   252d4:	445a      	add	r2, fp
   252d6:	4293      	cmp	r3, r2
   252d8:	d903      	bls.n	252e2 <__aeabi_dmul+0x2c6>
   252da:	2380      	movs	r3, #128	; 0x80
   252dc:	025b      	lsls	r3, r3, #9
   252de:	469b      	mov	fp, r3
   252e0:	44d9      	add	r9, fp
   252e2:	4651      	mov	r1, sl
   252e4:	0409      	lsls	r1, r1, #16
   252e6:	0c09      	lsrs	r1, r1, #16
   252e8:	468a      	mov	sl, r1
   252ea:	4641      	mov	r1, r8
   252ec:	4361      	muls	r1, r4
   252ee:	437c      	muls	r4, r7
   252f0:	0c13      	lsrs	r3, r2, #16
   252f2:	0412      	lsls	r2, r2, #16
   252f4:	444b      	add	r3, r9
   252f6:	4452      	add	r2, sl
   252f8:	46a1      	mov	r9, r4
   252fa:	468a      	mov	sl, r1
   252fc:	003c      	movs	r4, r7
   252fe:	4641      	mov	r1, r8
   25300:	436c      	muls	r4, r5
   25302:	434d      	muls	r5, r1
   25304:	4651      	mov	r1, sl
   25306:	444d      	add	r5, r9
   25308:	0c0f      	lsrs	r7, r1, #16
   2530a:	197d      	adds	r5, r7, r5
   2530c:	45a9      	cmp	r9, r5
   2530e:	d903      	bls.n	25318 <__aeabi_dmul+0x2fc>
   25310:	2180      	movs	r1, #128	; 0x80
   25312:	0249      	lsls	r1, r1, #9
   25314:	4688      	mov	r8, r1
   25316:	4444      	add	r4, r8
   25318:	9f04      	ldr	r7, [sp, #16]
   2531a:	9903      	ldr	r1, [sp, #12]
   2531c:	46b8      	mov	r8, r7
   2531e:	4441      	add	r1, r8
   25320:	468b      	mov	fp, r1
   25322:	4583      	cmp	fp, r0
   25324:	4180      	sbcs	r0, r0
   25326:	4241      	negs	r1, r0
   25328:	4688      	mov	r8, r1
   2532a:	4651      	mov	r1, sl
   2532c:	0408      	lsls	r0, r1, #16
   2532e:	042f      	lsls	r7, r5, #16
   25330:	0c00      	lsrs	r0, r0, #16
   25332:	183f      	adds	r7, r7, r0
   25334:	4658      	mov	r0, fp
   25336:	9902      	ldr	r1, [sp, #8]
   25338:	1810      	adds	r0, r2, r0
   2533a:	4689      	mov	r9, r1
   2533c:	4290      	cmp	r0, r2
   2533e:	4192      	sbcs	r2, r2
   25340:	444f      	add	r7, r9
   25342:	46ba      	mov	sl, r7
   25344:	4252      	negs	r2, r2
   25346:	4699      	mov	r9, r3
   25348:	4693      	mov	fp, r2
   2534a:	44c2      	add	sl, r8
   2534c:	44d1      	add	r9, sl
   2534e:	44cb      	add	fp, r9
   25350:	428f      	cmp	r7, r1
   25352:	41bf      	sbcs	r7, r7
   25354:	45c2      	cmp	sl, r8
   25356:	4189      	sbcs	r1, r1
   25358:	4599      	cmp	r9, r3
   2535a:	419b      	sbcs	r3, r3
   2535c:	4593      	cmp	fp, r2
   2535e:	4192      	sbcs	r2, r2
   25360:	427f      	negs	r7, r7
   25362:	4249      	negs	r1, r1
   25364:	0c2d      	lsrs	r5, r5, #16
   25366:	4252      	negs	r2, r2
   25368:	430f      	orrs	r7, r1
   2536a:	425b      	negs	r3, r3
   2536c:	4313      	orrs	r3, r2
   2536e:	197f      	adds	r7, r7, r5
   25370:	18ff      	adds	r7, r7, r3
   25372:	465b      	mov	r3, fp
   25374:	193c      	adds	r4, r7, r4
   25376:	0ddb      	lsrs	r3, r3, #23
   25378:	9a05      	ldr	r2, [sp, #20]
   2537a:	0264      	lsls	r4, r4, #9
   2537c:	431c      	orrs	r4, r3
   2537e:	0243      	lsls	r3, r0, #9
   25380:	4313      	orrs	r3, r2
   25382:	1e5d      	subs	r5, r3, #1
   25384:	41ab      	sbcs	r3, r5
   25386:	465a      	mov	r2, fp
   25388:	0dc0      	lsrs	r0, r0, #23
   2538a:	4303      	orrs	r3, r0
   2538c:	0252      	lsls	r2, r2, #9
   2538e:	4313      	orrs	r3, r2
   25390:	01e2      	lsls	r2, r4, #7
   25392:	d556      	bpl.n	25442 <__aeabi_dmul+0x426>
   25394:	2001      	movs	r0, #1
   25396:	085a      	lsrs	r2, r3, #1
   25398:	4003      	ands	r3, r0
   2539a:	4313      	orrs	r3, r2
   2539c:	07e2      	lsls	r2, r4, #31
   2539e:	4313      	orrs	r3, r2
   253a0:	0864      	lsrs	r4, r4, #1
   253a2:	485a      	ldr	r0, [pc, #360]	; (2550c <__aeabi_dmul+0x4f0>)
   253a4:	4460      	add	r0, ip
   253a6:	2800      	cmp	r0, #0
   253a8:	dd4d      	ble.n	25446 <__aeabi_dmul+0x42a>
   253aa:	075a      	lsls	r2, r3, #29
   253ac:	d009      	beq.n	253c2 <__aeabi_dmul+0x3a6>
   253ae:	220f      	movs	r2, #15
   253b0:	401a      	ands	r2, r3
   253b2:	2a04      	cmp	r2, #4
   253b4:	d005      	beq.n	253c2 <__aeabi_dmul+0x3a6>
   253b6:	1d1a      	adds	r2, r3, #4
   253b8:	429a      	cmp	r2, r3
   253ba:	419b      	sbcs	r3, r3
   253bc:	425b      	negs	r3, r3
   253be:	18e4      	adds	r4, r4, r3
   253c0:	0013      	movs	r3, r2
   253c2:	01e2      	lsls	r2, r4, #7
   253c4:	d504      	bpl.n	253d0 <__aeabi_dmul+0x3b4>
   253c6:	2080      	movs	r0, #128	; 0x80
   253c8:	4a51      	ldr	r2, [pc, #324]	; (25510 <__aeabi_dmul+0x4f4>)
   253ca:	00c0      	lsls	r0, r0, #3
   253cc:	4014      	ands	r4, r2
   253ce:	4460      	add	r0, ip
   253d0:	4a50      	ldr	r2, [pc, #320]	; (25514 <__aeabi_dmul+0x4f8>)
   253d2:	4290      	cmp	r0, r2
   253d4:	dd00      	ble.n	253d8 <__aeabi_dmul+0x3bc>
   253d6:	e6e3      	b.n	251a0 <__aeabi_dmul+0x184>
   253d8:	2501      	movs	r5, #1
   253da:	08db      	lsrs	r3, r3, #3
   253dc:	0762      	lsls	r2, r4, #29
   253de:	431a      	orrs	r2, r3
   253e0:	0264      	lsls	r4, r4, #9
   253e2:	9b01      	ldr	r3, [sp, #4]
   253e4:	4691      	mov	r9, r2
   253e6:	0b22      	lsrs	r2, r4, #12
   253e8:	0544      	lsls	r4, r0, #21
   253ea:	0d64      	lsrs	r4, r4, #21
   253ec:	401d      	ands	r5, r3
   253ee:	e67c      	b.n	250ea <__aeabi_dmul+0xce>
   253f0:	2280      	movs	r2, #128	; 0x80
   253f2:	4659      	mov	r1, fp
   253f4:	0312      	lsls	r2, r2, #12
   253f6:	4211      	tst	r1, r2
   253f8:	d008      	beq.n	2540c <__aeabi_dmul+0x3f0>
   253fa:	4214      	tst	r4, r2
   253fc:	d106      	bne.n	2540c <__aeabi_dmul+0x3f0>
   253fe:	4322      	orrs	r2, r4
   25400:	0312      	lsls	r2, r2, #12
   25402:	0b12      	lsrs	r2, r2, #12
   25404:	4645      	mov	r5, r8
   25406:	4699      	mov	r9, r3
   25408:	4c43      	ldr	r4, [pc, #268]	; (25518 <__aeabi_dmul+0x4fc>)
   2540a:	e66e      	b.n	250ea <__aeabi_dmul+0xce>
   2540c:	465b      	mov	r3, fp
   2540e:	431a      	orrs	r2, r3
   25410:	0312      	lsls	r2, r2, #12
   25412:	0b12      	lsrs	r2, r2, #12
   25414:	4c40      	ldr	r4, [pc, #256]	; (25518 <__aeabi_dmul+0x4fc>)
   25416:	e668      	b.n	250ea <__aeabi_dmul+0xce>
   25418:	0003      	movs	r3, r0
   2541a:	4654      	mov	r4, sl
   2541c:	3b28      	subs	r3, #40	; 0x28
   2541e:	409c      	lsls	r4, r3
   25420:	2300      	movs	r3, #0
   25422:	e6b9      	b.n	25198 <__aeabi_dmul+0x17c>
   25424:	f000 fbfc 	bl	25c20 <__clzsi2>
   25428:	3020      	adds	r0, #32
   2542a:	e6a6      	b.n	2517a <__aeabi_dmul+0x15e>
   2542c:	0003      	movs	r3, r0
   2542e:	3b28      	subs	r3, #40	; 0x28
   25430:	409f      	lsls	r7, r3
   25432:	2300      	movs	r3, #0
   25434:	46bb      	mov	fp, r7
   25436:	4699      	mov	r9, r3
   25438:	e68a      	b.n	25150 <__aeabi_dmul+0x134>
   2543a:	f000 fbf1 	bl	25c20 <__clzsi2>
   2543e:	3020      	adds	r0, #32
   25440:	e674      	b.n	2512c <__aeabi_dmul+0x110>
   25442:	46b4      	mov	ip, r6
   25444:	e7ad      	b.n	253a2 <__aeabi_dmul+0x386>
   25446:	2501      	movs	r5, #1
   25448:	1a2a      	subs	r2, r5, r0
   2544a:	2a38      	cmp	r2, #56	; 0x38
   2544c:	dd06      	ble.n	2545c <__aeabi_dmul+0x440>
   2544e:	9b01      	ldr	r3, [sp, #4]
   25450:	2400      	movs	r4, #0
   25452:	401d      	ands	r5, r3
   25454:	2300      	movs	r3, #0
   25456:	2200      	movs	r2, #0
   25458:	4699      	mov	r9, r3
   2545a:	e646      	b.n	250ea <__aeabi_dmul+0xce>
   2545c:	2a1f      	cmp	r2, #31
   2545e:	dc21      	bgt.n	254a4 <__aeabi_dmul+0x488>
   25460:	2520      	movs	r5, #32
   25462:	0020      	movs	r0, r4
   25464:	1aad      	subs	r5, r5, r2
   25466:	001e      	movs	r6, r3
   25468:	40ab      	lsls	r3, r5
   2546a:	40a8      	lsls	r0, r5
   2546c:	40d6      	lsrs	r6, r2
   2546e:	1e5d      	subs	r5, r3, #1
   25470:	41ab      	sbcs	r3, r5
   25472:	4330      	orrs	r0, r6
   25474:	4318      	orrs	r0, r3
   25476:	40d4      	lsrs	r4, r2
   25478:	0743      	lsls	r3, r0, #29
   2547a:	d009      	beq.n	25490 <__aeabi_dmul+0x474>
   2547c:	230f      	movs	r3, #15
   2547e:	4003      	ands	r3, r0
   25480:	2b04      	cmp	r3, #4
   25482:	d005      	beq.n	25490 <__aeabi_dmul+0x474>
   25484:	0003      	movs	r3, r0
   25486:	1d18      	adds	r0, r3, #4
   25488:	4298      	cmp	r0, r3
   2548a:	419b      	sbcs	r3, r3
   2548c:	425b      	negs	r3, r3
   2548e:	18e4      	adds	r4, r4, r3
   25490:	0223      	lsls	r3, r4, #8
   25492:	d521      	bpl.n	254d8 <__aeabi_dmul+0x4bc>
   25494:	2501      	movs	r5, #1
   25496:	9b01      	ldr	r3, [sp, #4]
   25498:	2401      	movs	r4, #1
   2549a:	401d      	ands	r5, r3
   2549c:	2300      	movs	r3, #0
   2549e:	2200      	movs	r2, #0
   254a0:	4699      	mov	r9, r3
   254a2:	e622      	b.n	250ea <__aeabi_dmul+0xce>
   254a4:	251f      	movs	r5, #31
   254a6:	0021      	movs	r1, r4
   254a8:	426d      	negs	r5, r5
   254aa:	1a28      	subs	r0, r5, r0
   254ac:	40c1      	lsrs	r1, r0
   254ae:	0008      	movs	r0, r1
   254b0:	2a20      	cmp	r2, #32
   254b2:	d01d      	beq.n	254f0 <__aeabi_dmul+0x4d4>
   254b4:	355f      	adds	r5, #95	; 0x5f
   254b6:	1aaa      	subs	r2, r5, r2
   254b8:	4094      	lsls	r4, r2
   254ba:	4323      	orrs	r3, r4
   254bc:	1e5c      	subs	r4, r3, #1
   254be:	41a3      	sbcs	r3, r4
   254c0:	2507      	movs	r5, #7
   254c2:	4303      	orrs	r3, r0
   254c4:	401d      	ands	r5, r3
   254c6:	2200      	movs	r2, #0
   254c8:	2d00      	cmp	r5, #0
   254ca:	d009      	beq.n	254e0 <__aeabi_dmul+0x4c4>
   254cc:	220f      	movs	r2, #15
   254ce:	2400      	movs	r4, #0
   254d0:	401a      	ands	r2, r3
   254d2:	0018      	movs	r0, r3
   254d4:	2a04      	cmp	r2, #4
   254d6:	d1d6      	bne.n	25486 <__aeabi_dmul+0x46a>
   254d8:	0003      	movs	r3, r0
   254da:	0765      	lsls	r5, r4, #29
   254dc:	0264      	lsls	r4, r4, #9
   254de:	0b22      	lsrs	r2, r4, #12
   254e0:	08db      	lsrs	r3, r3, #3
   254e2:	432b      	orrs	r3, r5
   254e4:	2501      	movs	r5, #1
   254e6:	4699      	mov	r9, r3
   254e8:	9b01      	ldr	r3, [sp, #4]
   254ea:	2400      	movs	r4, #0
   254ec:	401d      	ands	r5, r3
   254ee:	e5fc      	b.n	250ea <__aeabi_dmul+0xce>
   254f0:	2400      	movs	r4, #0
   254f2:	e7e2      	b.n	254ba <__aeabi_dmul+0x49e>
   254f4:	2280      	movs	r2, #128	; 0x80
   254f6:	2501      	movs	r5, #1
   254f8:	0312      	lsls	r2, r2, #12
   254fa:	4322      	orrs	r2, r4
   254fc:	9901      	ldr	r1, [sp, #4]
   254fe:	0312      	lsls	r2, r2, #12
   25500:	0b12      	lsrs	r2, r2, #12
   25502:	400d      	ands	r5, r1
   25504:	4699      	mov	r9, r3
   25506:	4c04      	ldr	r4, [pc, #16]	; (25518 <__aeabi_dmul+0x4fc>)
   25508:	e5ef      	b.n	250ea <__aeabi_dmul+0xce>
   2550a:	46c0      	nop			; (mov r8, r8)
   2550c:	000003ff 	.word	0x000003ff
   25510:	feffffff 	.word	0xfeffffff
   25514:	000007fe 	.word	0x000007fe
   25518:	000007ff 	.word	0x000007ff

0002551c <__aeabi_dsub>:
   2551c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2551e:	4646      	mov	r6, r8
   25520:	46d6      	mov	lr, sl
   25522:	464f      	mov	r7, r9
   25524:	030c      	lsls	r4, r1, #12
   25526:	b5c0      	push	{r6, r7, lr}
   25528:	0fcd      	lsrs	r5, r1, #31
   2552a:	004e      	lsls	r6, r1, #1
   2552c:	0a61      	lsrs	r1, r4, #9
   2552e:	0f44      	lsrs	r4, r0, #29
   25530:	430c      	orrs	r4, r1
   25532:	00c1      	lsls	r1, r0, #3
   25534:	0058      	lsls	r0, r3, #1
   25536:	0d40      	lsrs	r0, r0, #21
   25538:	4684      	mov	ip, r0
   2553a:	468a      	mov	sl, r1
   2553c:	000f      	movs	r7, r1
   2553e:	0319      	lsls	r1, r3, #12
   25540:	0f50      	lsrs	r0, r2, #29
   25542:	0a49      	lsrs	r1, r1, #9
   25544:	4301      	orrs	r1, r0
   25546:	48c6      	ldr	r0, [pc, #792]	; (25860 <__aeabi_dsub+0x344>)
   25548:	0d76      	lsrs	r6, r6, #21
   2554a:	46a8      	mov	r8, r5
   2554c:	0fdb      	lsrs	r3, r3, #31
   2554e:	00d2      	lsls	r2, r2, #3
   25550:	4584      	cmp	ip, r0
   25552:	d100      	bne.n	25556 <__aeabi_dsub+0x3a>
   25554:	e0d8      	b.n	25708 <__aeabi_dsub+0x1ec>
   25556:	2001      	movs	r0, #1
   25558:	4043      	eors	r3, r0
   2555a:	42ab      	cmp	r3, r5
   2555c:	d100      	bne.n	25560 <__aeabi_dsub+0x44>
   2555e:	e0a6      	b.n	256ae <__aeabi_dsub+0x192>
   25560:	4660      	mov	r0, ip
   25562:	1a35      	subs	r5, r6, r0
   25564:	2d00      	cmp	r5, #0
   25566:	dc00      	bgt.n	2556a <__aeabi_dsub+0x4e>
   25568:	e105      	b.n	25776 <__aeabi_dsub+0x25a>
   2556a:	2800      	cmp	r0, #0
   2556c:	d110      	bne.n	25590 <__aeabi_dsub+0x74>
   2556e:	000b      	movs	r3, r1
   25570:	4313      	orrs	r3, r2
   25572:	d100      	bne.n	25576 <__aeabi_dsub+0x5a>
   25574:	e0d7      	b.n	25726 <__aeabi_dsub+0x20a>
   25576:	1e6b      	subs	r3, r5, #1
   25578:	2b00      	cmp	r3, #0
   2557a:	d000      	beq.n	2557e <__aeabi_dsub+0x62>
   2557c:	e14b      	b.n	25816 <__aeabi_dsub+0x2fa>
   2557e:	4653      	mov	r3, sl
   25580:	1a9f      	subs	r7, r3, r2
   25582:	45ba      	cmp	sl, r7
   25584:	4180      	sbcs	r0, r0
   25586:	1a64      	subs	r4, r4, r1
   25588:	4240      	negs	r0, r0
   2558a:	1a24      	subs	r4, r4, r0
   2558c:	2601      	movs	r6, #1
   2558e:	e01e      	b.n	255ce <__aeabi_dsub+0xb2>
   25590:	4bb3      	ldr	r3, [pc, #716]	; (25860 <__aeabi_dsub+0x344>)
   25592:	429e      	cmp	r6, r3
   25594:	d048      	beq.n	25628 <__aeabi_dsub+0x10c>
   25596:	2380      	movs	r3, #128	; 0x80
   25598:	041b      	lsls	r3, r3, #16
   2559a:	4319      	orrs	r1, r3
   2559c:	2d38      	cmp	r5, #56	; 0x38
   2559e:	dd00      	ble.n	255a2 <__aeabi_dsub+0x86>
   255a0:	e119      	b.n	257d6 <__aeabi_dsub+0x2ba>
   255a2:	2d1f      	cmp	r5, #31
   255a4:	dd00      	ble.n	255a8 <__aeabi_dsub+0x8c>
   255a6:	e14c      	b.n	25842 <__aeabi_dsub+0x326>
   255a8:	2320      	movs	r3, #32
   255aa:	000f      	movs	r7, r1
   255ac:	1b5b      	subs	r3, r3, r5
   255ae:	0010      	movs	r0, r2
   255b0:	409a      	lsls	r2, r3
   255b2:	409f      	lsls	r7, r3
   255b4:	40e8      	lsrs	r0, r5
   255b6:	1e53      	subs	r3, r2, #1
   255b8:	419a      	sbcs	r2, r3
   255ba:	40e9      	lsrs	r1, r5
   255bc:	4307      	orrs	r7, r0
   255be:	4317      	orrs	r7, r2
   255c0:	4653      	mov	r3, sl
   255c2:	1bdf      	subs	r7, r3, r7
   255c4:	1a61      	subs	r1, r4, r1
   255c6:	45ba      	cmp	sl, r7
   255c8:	41a4      	sbcs	r4, r4
   255ca:	4264      	negs	r4, r4
   255cc:	1b0c      	subs	r4, r1, r4
   255ce:	0223      	lsls	r3, r4, #8
   255d0:	d400      	bmi.n	255d4 <__aeabi_dsub+0xb8>
   255d2:	e0c5      	b.n	25760 <__aeabi_dsub+0x244>
   255d4:	0264      	lsls	r4, r4, #9
   255d6:	0a65      	lsrs	r5, r4, #9
   255d8:	2d00      	cmp	r5, #0
   255da:	d100      	bne.n	255de <__aeabi_dsub+0xc2>
   255dc:	e0f6      	b.n	257cc <__aeabi_dsub+0x2b0>
   255de:	0028      	movs	r0, r5
   255e0:	f000 fb1e 	bl	25c20 <__clzsi2>
   255e4:	0003      	movs	r3, r0
   255e6:	3b08      	subs	r3, #8
   255e8:	2b1f      	cmp	r3, #31
   255ea:	dd00      	ble.n	255ee <__aeabi_dsub+0xd2>
   255ec:	e0e9      	b.n	257c2 <__aeabi_dsub+0x2a6>
   255ee:	2220      	movs	r2, #32
   255f0:	003c      	movs	r4, r7
   255f2:	1ad2      	subs	r2, r2, r3
   255f4:	409d      	lsls	r5, r3
   255f6:	40d4      	lsrs	r4, r2
   255f8:	409f      	lsls	r7, r3
   255fa:	4325      	orrs	r5, r4
   255fc:	429e      	cmp	r6, r3
   255fe:	dd00      	ble.n	25602 <__aeabi_dsub+0xe6>
   25600:	e0db      	b.n	257ba <__aeabi_dsub+0x29e>
   25602:	1b9e      	subs	r6, r3, r6
   25604:	1c73      	adds	r3, r6, #1
   25606:	2b1f      	cmp	r3, #31
   25608:	dd00      	ble.n	2560c <__aeabi_dsub+0xf0>
   2560a:	e10a      	b.n	25822 <__aeabi_dsub+0x306>
   2560c:	2220      	movs	r2, #32
   2560e:	0038      	movs	r0, r7
   25610:	1ad2      	subs	r2, r2, r3
   25612:	0029      	movs	r1, r5
   25614:	4097      	lsls	r7, r2
   25616:	002c      	movs	r4, r5
   25618:	4091      	lsls	r1, r2
   2561a:	40d8      	lsrs	r0, r3
   2561c:	1e7a      	subs	r2, r7, #1
   2561e:	4197      	sbcs	r7, r2
   25620:	40dc      	lsrs	r4, r3
   25622:	2600      	movs	r6, #0
   25624:	4301      	orrs	r1, r0
   25626:	430f      	orrs	r7, r1
   25628:	077b      	lsls	r3, r7, #29
   2562a:	d009      	beq.n	25640 <__aeabi_dsub+0x124>
   2562c:	230f      	movs	r3, #15
   2562e:	403b      	ands	r3, r7
   25630:	2b04      	cmp	r3, #4
   25632:	d005      	beq.n	25640 <__aeabi_dsub+0x124>
   25634:	1d3b      	adds	r3, r7, #4
   25636:	42bb      	cmp	r3, r7
   25638:	41bf      	sbcs	r7, r7
   2563a:	427f      	negs	r7, r7
   2563c:	19e4      	adds	r4, r4, r7
   2563e:	001f      	movs	r7, r3
   25640:	0223      	lsls	r3, r4, #8
   25642:	d525      	bpl.n	25690 <__aeabi_dsub+0x174>
   25644:	4b86      	ldr	r3, [pc, #536]	; (25860 <__aeabi_dsub+0x344>)
   25646:	3601      	adds	r6, #1
   25648:	429e      	cmp	r6, r3
   2564a:	d100      	bne.n	2564e <__aeabi_dsub+0x132>
   2564c:	e0af      	b.n	257ae <__aeabi_dsub+0x292>
   2564e:	4b85      	ldr	r3, [pc, #532]	; (25864 <__aeabi_dsub+0x348>)
   25650:	2501      	movs	r5, #1
   25652:	401c      	ands	r4, r3
   25654:	4643      	mov	r3, r8
   25656:	0762      	lsls	r2, r4, #29
   25658:	08ff      	lsrs	r7, r7, #3
   2565a:	0264      	lsls	r4, r4, #9
   2565c:	0576      	lsls	r6, r6, #21
   2565e:	4317      	orrs	r7, r2
   25660:	0b24      	lsrs	r4, r4, #12
   25662:	0d76      	lsrs	r6, r6, #21
   25664:	401d      	ands	r5, r3
   25666:	2100      	movs	r1, #0
   25668:	0324      	lsls	r4, r4, #12
   2566a:	0b23      	lsrs	r3, r4, #12
   2566c:	0d0c      	lsrs	r4, r1, #20
   2566e:	4a7e      	ldr	r2, [pc, #504]	; (25868 <__aeabi_dsub+0x34c>)
   25670:	0524      	lsls	r4, r4, #20
   25672:	431c      	orrs	r4, r3
   25674:	4014      	ands	r4, r2
   25676:	0533      	lsls	r3, r6, #20
   25678:	4323      	orrs	r3, r4
   2567a:	005b      	lsls	r3, r3, #1
   2567c:	07ed      	lsls	r5, r5, #31
   2567e:	085b      	lsrs	r3, r3, #1
   25680:	432b      	orrs	r3, r5
   25682:	0038      	movs	r0, r7
   25684:	0019      	movs	r1, r3
   25686:	bc1c      	pop	{r2, r3, r4}
   25688:	4690      	mov	r8, r2
   2568a:	4699      	mov	r9, r3
   2568c:	46a2      	mov	sl, r4
   2568e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   25690:	2501      	movs	r5, #1
   25692:	4643      	mov	r3, r8
   25694:	0762      	lsls	r2, r4, #29
   25696:	08ff      	lsrs	r7, r7, #3
   25698:	4317      	orrs	r7, r2
   2569a:	08e4      	lsrs	r4, r4, #3
   2569c:	401d      	ands	r5, r3
   2569e:	4b70      	ldr	r3, [pc, #448]	; (25860 <__aeabi_dsub+0x344>)
   256a0:	429e      	cmp	r6, r3
   256a2:	d036      	beq.n	25712 <__aeabi_dsub+0x1f6>
   256a4:	0324      	lsls	r4, r4, #12
   256a6:	0576      	lsls	r6, r6, #21
   256a8:	0b24      	lsrs	r4, r4, #12
   256aa:	0d76      	lsrs	r6, r6, #21
   256ac:	e7db      	b.n	25666 <__aeabi_dsub+0x14a>
   256ae:	4663      	mov	r3, ip
   256b0:	1af3      	subs	r3, r6, r3
   256b2:	2b00      	cmp	r3, #0
   256b4:	dc00      	bgt.n	256b8 <__aeabi_dsub+0x19c>
   256b6:	e094      	b.n	257e2 <__aeabi_dsub+0x2c6>
   256b8:	4660      	mov	r0, ip
   256ba:	2800      	cmp	r0, #0
   256bc:	d035      	beq.n	2572a <__aeabi_dsub+0x20e>
   256be:	4868      	ldr	r0, [pc, #416]	; (25860 <__aeabi_dsub+0x344>)
   256c0:	4286      	cmp	r6, r0
   256c2:	d0b1      	beq.n	25628 <__aeabi_dsub+0x10c>
   256c4:	2780      	movs	r7, #128	; 0x80
   256c6:	043f      	lsls	r7, r7, #16
   256c8:	4339      	orrs	r1, r7
   256ca:	2b38      	cmp	r3, #56	; 0x38
   256cc:	dc00      	bgt.n	256d0 <__aeabi_dsub+0x1b4>
   256ce:	e0fd      	b.n	258cc <__aeabi_dsub+0x3b0>
   256d0:	430a      	orrs	r2, r1
   256d2:	0017      	movs	r7, r2
   256d4:	2100      	movs	r1, #0
   256d6:	1e7a      	subs	r2, r7, #1
   256d8:	4197      	sbcs	r7, r2
   256da:	4457      	add	r7, sl
   256dc:	4557      	cmp	r7, sl
   256de:	4180      	sbcs	r0, r0
   256e0:	1909      	adds	r1, r1, r4
   256e2:	4244      	negs	r4, r0
   256e4:	190c      	adds	r4, r1, r4
   256e6:	0223      	lsls	r3, r4, #8
   256e8:	d53a      	bpl.n	25760 <__aeabi_dsub+0x244>
   256ea:	4b5d      	ldr	r3, [pc, #372]	; (25860 <__aeabi_dsub+0x344>)
   256ec:	3601      	adds	r6, #1
   256ee:	429e      	cmp	r6, r3
   256f0:	d100      	bne.n	256f4 <__aeabi_dsub+0x1d8>
   256f2:	e14b      	b.n	2598c <__aeabi_dsub+0x470>
   256f4:	2201      	movs	r2, #1
   256f6:	4b5b      	ldr	r3, [pc, #364]	; (25864 <__aeabi_dsub+0x348>)
   256f8:	401c      	ands	r4, r3
   256fa:	087b      	lsrs	r3, r7, #1
   256fc:	4017      	ands	r7, r2
   256fe:	431f      	orrs	r7, r3
   25700:	07e2      	lsls	r2, r4, #31
   25702:	4317      	orrs	r7, r2
   25704:	0864      	lsrs	r4, r4, #1
   25706:	e78f      	b.n	25628 <__aeabi_dsub+0x10c>
   25708:	0008      	movs	r0, r1
   2570a:	4310      	orrs	r0, r2
   2570c:	d000      	beq.n	25710 <__aeabi_dsub+0x1f4>
   2570e:	e724      	b.n	2555a <__aeabi_dsub+0x3e>
   25710:	e721      	b.n	25556 <__aeabi_dsub+0x3a>
   25712:	0023      	movs	r3, r4
   25714:	433b      	orrs	r3, r7
   25716:	d100      	bne.n	2571a <__aeabi_dsub+0x1fe>
   25718:	e1b9      	b.n	25a8e <__aeabi_dsub+0x572>
   2571a:	2280      	movs	r2, #128	; 0x80
   2571c:	0312      	lsls	r2, r2, #12
   2571e:	4314      	orrs	r4, r2
   25720:	0324      	lsls	r4, r4, #12
   25722:	0b24      	lsrs	r4, r4, #12
   25724:	e79f      	b.n	25666 <__aeabi_dsub+0x14a>
   25726:	002e      	movs	r6, r5
   25728:	e77e      	b.n	25628 <__aeabi_dsub+0x10c>
   2572a:	0008      	movs	r0, r1
   2572c:	4310      	orrs	r0, r2
   2572e:	d100      	bne.n	25732 <__aeabi_dsub+0x216>
   25730:	e0ca      	b.n	258c8 <__aeabi_dsub+0x3ac>
   25732:	1e58      	subs	r0, r3, #1
   25734:	4684      	mov	ip, r0
   25736:	2800      	cmp	r0, #0
   25738:	d000      	beq.n	2573c <__aeabi_dsub+0x220>
   2573a:	e0e7      	b.n	2590c <__aeabi_dsub+0x3f0>
   2573c:	4452      	add	r2, sl
   2573e:	4552      	cmp	r2, sl
   25740:	4180      	sbcs	r0, r0
   25742:	1864      	adds	r4, r4, r1
   25744:	4240      	negs	r0, r0
   25746:	1824      	adds	r4, r4, r0
   25748:	0017      	movs	r7, r2
   2574a:	2601      	movs	r6, #1
   2574c:	0223      	lsls	r3, r4, #8
   2574e:	d507      	bpl.n	25760 <__aeabi_dsub+0x244>
   25750:	2602      	movs	r6, #2
   25752:	e7cf      	b.n	256f4 <__aeabi_dsub+0x1d8>
   25754:	4664      	mov	r4, ip
   25756:	432c      	orrs	r4, r5
   25758:	d100      	bne.n	2575c <__aeabi_dsub+0x240>
   2575a:	e1b3      	b.n	25ac4 <__aeabi_dsub+0x5a8>
   2575c:	002c      	movs	r4, r5
   2575e:	4667      	mov	r7, ip
   25760:	077b      	lsls	r3, r7, #29
   25762:	d000      	beq.n	25766 <__aeabi_dsub+0x24a>
   25764:	e762      	b.n	2562c <__aeabi_dsub+0x110>
   25766:	0763      	lsls	r3, r4, #29
   25768:	08ff      	lsrs	r7, r7, #3
   2576a:	431f      	orrs	r7, r3
   2576c:	2501      	movs	r5, #1
   2576e:	4643      	mov	r3, r8
   25770:	08e4      	lsrs	r4, r4, #3
   25772:	401d      	ands	r5, r3
   25774:	e793      	b.n	2569e <__aeabi_dsub+0x182>
   25776:	2d00      	cmp	r5, #0
   25778:	d178      	bne.n	2586c <__aeabi_dsub+0x350>
   2577a:	1c75      	adds	r5, r6, #1
   2577c:	056d      	lsls	r5, r5, #21
   2577e:	0d6d      	lsrs	r5, r5, #21
   25780:	2d01      	cmp	r5, #1
   25782:	dc00      	bgt.n	25786 <__aeabi_dsub+0x26a>
   25784:	e0f2      	b.n	2596c <__aeabi_dsub+0x450>
   25786:	4650      	mov	r0, sl
   25788:	1a80      	subs	r0, r0, r2
   2578a:	4582      	cmp	sl, r0
   2578c:	41bf      	sbcs	r7, r7
   2578e:	1a65      	subs	r5, r4, r1
   25790:	427f      	negs	r7, r7
   25792:	1bed      	subs	r5, r5, r7
   25794:	4684      	mov	ip, r0
   25796:	0228      	lsls	r0, r5, #8
   25798:	d400      	bmi.n	2579c <__aeabi_dsub+0x280>
   2579a:	e08c      	b.n	258b6 <__aeabi_dsub+0x39a>
   2579c:	4650      	mov	r0, sl
   2579e:	1a17      	subs	r7, r2, r0
   257a0:	42ba      	cmp	r2, r7
   257a2:	4192      	sbcs	r2, r2
   257a4:	1b0c      	subs	r4, r1, r4
   257a6:	4255      	negs	r5, r2
   257a8:	1b65      	subs	r5, r4, r5
   257aa:	4698      	mov	r8, r3
   257ac:	e714      	b.n	255d8 <__aeabi_dsub+0xbc>
   257ae:	2501      	movs	r5, #1
   257b0:	4643      	mov	r3, r8
   257b2:	2400      	movs	r4, #0
   257b4:	401d      	ands	r5, r3
   257b6:	2700      	movs	r7, #0
   257b8:	e755      	b.n	25666 <__aeabi_dsub+0x14a>
   257ba:	4c2a      	ldr	r4, [pc, #168]	; (25864 <__aeabi_dsub+0x348>)
   257bc:	1af6      	subs	r6, r6, r3
   257be:	402c      	ands	r4, r5
   257c0:	e732      	b.n	25628 <__aeabi_dsub+0x10c>
   257c2:	003d      	movs	r5, r7
   257c4:	3828      	subs	r0, #40	; 0x28
   257c6:	4085      	lsls	r5, r0
   257c8:	2700      	movs	r7, #0
   257ca:	e717      	b.n	255fc <__aeabi_dsub+0xe0>
   257cc:	0038      	movs	r0, r7
   257ce:	f000 fa27 	bl	25c20 <__clzsi2>
   257d2:	3020      	adds	r0, #32
   257d4:	e706      	b.n	255e4 <__aeabi_dsub+0xc8>
   257d6:	430a      	orrs	r2, r1
   257d8:	0017      	movs	r7, r2
   257da:	2100      	movs	r1, #0
   257dc:	1e7a      	subs	r2, r7, #1
   257de:	4197      	sbcs	r7, r2
   257e0:	e6ee      	b.n	255c0 <__aeabi_dsub+0xa4>
   257e2:	2b00      	cmp	r3, #0
   257e4:	d000      	beq.n	257e8 <__aeabi_dsub+0x2cc>
   257e6:	e0e5      	b.n	259b4 <__aeabi_dsub+0x498>
   257e8:	1c73      	adds	r3, r6, #1
   257ea:	469c      	mov	ip, r3
   257ec:	055b      	lsls	r3, r3, #21
   257ee:	0d5b      	lsrs	r3, r3, #21
   257f0:	2b01      	cmp	r3, #1
   257f2:	dc00      	bgt.n	257f6 <__aeabi_dsub+0x2da>
   257f4:	e09f      	b.n	25936 <__aeabi_dsub+0x41a>
   257f6:	4b1a      	ldr	r3, [pc, #104]	; (25860 <__aeabi_dsub+0x344>)
   257f8:	459c      	cmp	ip, r3
   257fa:	d100      	bne.n	257fe <__aeabi_dsub+0x2e2>
   257fc:	e0c5      	b.n	2598a <__aeabi_dsub+0x46e>
   257fe:	4452      	add	r2, sl
   25800:	4552      	cmp	r2, sl
   25802:	4180      	sbcs	r0, r0
   25804:	1864      	adds	r4, r4, r1
   25806:	4240      	negs	r0, r0
   25808:	1824      	adds	r4, r4, r0
   2580a:	07e7      	lsls	r7, r4, #31
   2580c:	0852      	lsrs	r2, r2, #1
   2580e:	4317      	orrs	r7, r2
   25810:	0864      	lsrs	r4, r4, #1
   25812:	4666      	mov	r6, ip
   25814:	e708      	b.n	25628 <__aeabi_dsub+0x10c>
   25816:	4812      	ldr	r0, [pc, #72]	; (25860 <__aeabi_dsub+0x344>)
   25818:	4285      	cmp	r5, r0
   2581a:	d100      	bne.n	2581e <__aeabi_dsub+0x302>
   2581c:	e085      	b.n	2592a <__aeabi_dsub+0x40e>
   2581e:	001d      	movs	r5, r3
   25820:	e6bc      	b.n	2559c <__aeabi_dsub+0x80>
   25822:	0029      	movs	r1, r5
   25824:	3e1f      	subs	r6, #31
   25826:	40f1      	lsrs	r1, r6
   25828:	2b20      	cmp	r3, #32
   2582a:	d100      	bne.n	2582e <__aeabi_dsub+0x312>
   2582c:	e07f      	b.n	2592e <__aeabi_dsub+0x412>
   2582e:	2240      	movs	r2, #64	; 0x40
   25830:	1ad3      	subs	r3, r2, r3
   25832:	409d      	lsls	r5, r3
   25834:	432f      	orrs	r7, r5
   25836:	1e7d      	subs	r5, r7, #1
   25838:	41af      	sbcs	r7, r5
   2583a:	2400      	movs	r4, #0
   2583c:	430f      	orrs	r7, r1
   2583e:	2600      	movs	r6, #0
   25840:	e78e      	b.n	25760 <__aeabi_dsub+0x244>
   25842:	002b      	movs	r3, r5
   25844:	000f      	movs	r7, r1
   25846:	3b20      	subs	r3, #32
   25848:	40df      	lsrs	r7, r3
   2584a:	2d20      	cmp	r5, #32
   2584c:	d071      	beq.n	25932 <__aeabi_dsub+0x416>
   2584e:	2340      	movs	r3, #64	; 0x40
   25850:	1b5d      	subs	r5, r3, r5
   25852:	40a9      	lsls	r1, r5
   25854:	430a      	orrs	r2, r1
   25856:	1e51      	subs	r1, r2, #1
   25858:	418a      	sbcs	r2, r1
   2585a:	2100      	movs	r1, #0
   2585c:	4317      	orrs	r7, r2
   2585e:	e6af      	b.n	255c0 <__aeabi_dsub+0xa4>
   25860:	000007ff 	.word	0x000007ff
   25864:	ff7fffff 	.word	0xff7fffff
   25868:	800fffff 	.word	0x800fffff
   2586c:	2e00      	cmp	r6, #0
   2586e:	d03e      	beq.n	258ee <__aeabi_dsub+0x3d2>
   25870:	4eb3      	ldr	r6, [pc, #716]	; (25b40 <__aeabi_dsub+0x624>)
   25872:	45b4      	cmp	ip, r6
   25874:	d045      	beq.n	25902 <__aeabi_dsub+0x3e6>
   25876:	2680      	movs	r6, #128	; 0x80
   25878:	0436      	lsls	r6, r6, #16
   2587a:	426d      	negs	r5, r5
   2587c:	4334      	orrs	r4, r6
   2587e:	2d38      	cmp	r5, #56	; 0x38
   25880:	dd00      	ble.n	25884 <__aeabi_dsub+0x368>
   25882:	e0a8      	b.n	259d6 <__aeabi_dsub+0x4ba>
   25884:	2d1f      	cmp	r5, #31
   25886:	dd00      	ble.n	2588a <__aeabi_dsub+0x36e>
   25888:	e11f      	b.n	25aca <__aeabi_dsub+0x5ae>
   2588a:	2620      	movs	r6, #32
   2588c:	0027      	movs	r7, r4
   2588e:	4650      	mov	r0, sl
   25890:	1b76      	subs	r6, r6, r5
   25892:	40b7      	lsls	r7, r6
   25894:	40e8      	lsrs	r0, r5
   25896:	4307      	orrs	r7, r0
   25898:	4650      	mov	r0, sl
   2589a:	40b0      	lsls	r0, r6
   2589c:	1e46      	subs	r6, r0, #1
   2589e:	41b0      	sbcs	r0, r6
   258a0:	40ec      	lsrs	r4, r5
   258a2:	4338      	orrs	r0, r7
   258a4:	1a17      	subs	r7, r2, r0
   258a6:	42ba      	cmp	r2, r7
   258a8:	4192      	sbcs	r2, r2
   258aa:	1b0c      	subs	r4, r1, r4
   258ac:	4252      	negs	r2, r2
   258ae:	1aa4      	subs	r4, r4, r2
   258b0:	4666      	mov	r6, ip
   258b2:	4698      	mov	r8, r3
   258b4:	e68b      	b.n	255ce <__aeabi_dsub+0xb2>
   258b6:	4664      	mov	r4, ip
   258b8:	4667      	mov	r7, ip
   258ba:	432c      	orrs	r4, r5
   258bc:	d000      	beq.n	258c0 <__aeabi_dsub+0x3a4>
   258be:	e68b      	b.n	255d8 <__aeabi_dsub+0xbc>
   258c0:	2500      	movs	r5, #0
   258c2:	2600      	movs	r6, #0
   258c4:	2700      	movs	r7, #0
   258c6:	e6ea      	b.n	2569e <__aeabi_dsub+0x182>
   258c8:	001e      	movs	r6, r3
   258ca:	e6ad      	b.n	25628 <__aeabi_dsub+0x10c>
   258cc:	2b1f      	cmp	r3, #31
   258ce:	dc60      	bgt.n	25992 <__aeabi_dsub+0x476>
   258d0:	2720      	movs	r7, #32
   258d2:	1af8      	subs	r0, r7, r3
   258d4:	000f      	movs	r7, r1
   258d6:	4684      	mov	ip, r0
   258d8:	4087      	lsls	r7, r0
   258da:	0010      	movs	r0, r2
   258dc:	40d8      	lsrs	r0, r3
   258de:	4307      	orrs	r7, r0
   258e0:	4660      	mov	r0, ip
   258e2:	4082      	lsls	r2, r0
   258e4:	1e50      	subs	r0, r2, #1
   258e6:	4182      	sbcs	r2, r0
   258e8:	40d9      	lsrs	r1, r3
   258ea:	4317      	orrs	r7, r2
   258ec:	e6f5      	b.n	256da <__aeabi_dsub+0x1be>
   258ee:	0026      	movs	r6, r4
   258f0:	4650      	mov	r0, sl
   258f2:	4306      	orrs	r6, r0
   258f4:	d005      	beq.n	25902 <__aeabi_dsub+0x3e6>
   258f6:	43ed      	mvns	r5, r5
   258f8:	2d00      	cmp	r5, #0
   258fa:	d0d3      	beq.n	258a4 <__aeabi_dsub+0x388>
   258fc:	4e90      	ldr	r6, [pc, #576]	; (25b40 <__aeabi_dsub+0x624>)
   258fe:	45b4      	cmp	ip, r6
   25900:	d1bd      	bne.n	2587e <__aeabi_dsub+0x362>
   25902:	000c      	movs	r4, r1
   25904:	0017      	movs	r7, r2
   25906:	4666      	mov	r6, ip
   25908:	4698      	mov	r8, r3
   2590a:	e68d      	b.n	25628 <__aeabi_dsub+0x10c>
   2590c:	488c      	ldr	r0, [pc, #560]	; (25b40 <__aeabi_dsub+0x624>)
   2590e:	4283      	cmp	r3, r0
   25910:	d00b      	beq.n	2592a <__aeabi_dsub+0x40e>
   25912:	4663      	mov	r3, ip
   25914:	e6d9      	b.n	256ca <__aeabi_dsub+0x1ae>
   25916:	2d00      	cmp	r5, #0
   25918:	d000      	beq.n	2591c <__aeabi_dsub+0x400>
   2591a:	e096      	b.n	25a4a <__aeabi_dsub+0x52e>
   2591c:	0008      	movs	r0, r1
   2591e:	4310      	orrs	r0, r2
   25920:	d100      	bne.n	25924 <__aeabi_dsub+0x408>
   25922:	e0e2      	b.n	25aea <__aeabi_dsub+0x5ce>
   25924:	000c      	movs	r4, r1
   25926:	0017      	movs	r7, r2
   25928:	4698      	mov	r8, r3
   2592a:	4e85      	ldr	r6, [pc, #532]	; (25b40 <__aeabi_dsub+0x624>)
   2592c:	e67c      	b.n	25628 <__aeabi_dsub+0x10c>
   2592e:	2500      	movs	r5, #0
   25930:	e780      	b.n	25834 <__aeabi_dsub+0x318>
   25932:	2100      	movs	r1, #0
   25934:	e78e      	b.n	25854 <__aeabi_dsub+0x338>
   25936:	0023      	movs	r3, r4
   25938:	4650      	mov	r0, sl
   2593a:	4303      	orrs	r3, r0
   2593c:	2e00      	cmp	r6, #0
   2593e:	d000      	beq.n	25942 <__aeabi_dsub+0x426>
   25940:	e0a8      	b.n	25a94 <__aeabi_dsub+0x578>
   25942:	2b00      	cmp	r3, #0
   25944:	d100      	bne.n	25948 <__aeabi_dsub+0x42c>
   25946:	e0de      	b.n	25b06 <__aeabi_dsub+0x5ea>
   25948:	000b      	movs	r3, r1
   2594a:	4313      	orrs	r3, r2
   2594c:	d100      	bne.n	25950 <__aeabi_dsub+0x434>
   2594e:	e66b      	b.n	25628 <__aeabi_dsub+0x10c>
   25950:	4452      	add	r2, sl
   25952:	4552      	cmp	r2, sl
   25954:	4180      	sbcs	r0, r0
   25956:	1864      	adds	r4, r4, r1
   25958:	4240      	negs	r0, r0
   2595a:	1824      	adds	r4, r4, r0
   2595c:	0017      	movs	r7, r2
   2595e:	0223      	lsls	r3, r4, #8
   25960:	d400      	bmi.n	25964 <__aeabi_dsub+0x448>
   25962:	e6fd      	b.n	25760 <__aeabi_dsub+0x244>
   25964:	4b77      	ldr	r3, [pc, #476]	; (25b44 <__aeabi_dsub+0x628>)
   25966:	4666      	mov	r6, ip
   25968:	401c      	ands	r4, r3
   2596a:	e65d      	b.n	25628 <__aeabi_dsub+0x10c>
   2596c:	0025      	movs	r5, r4
   2596e:	4650      	mov	r0, sl
   25970:	4305      	orrs	r5, r0
   25972:	2e00      	cmp	r6, #0
   25974:	d1cf      	bne.n	25916 <__aeabi_dsub+0x3fa>
   25976:	2d00      	cmp	r5, #0
   25978:	d14f      	bne.n	25a1a <__aeabi_dsub+0x4fe>
   2597a:	000c      	movs	r4, r1
   2597c:	4314      	orrs	r4, r2
   2597e:	d100      	bne.n	25982 <__aeabi_dsub+0x466>
   25980:	e0a0      	b.n	25ac4 <__aeabi_dsub+0x5a8>
   25982:	000c      	movs	r4, r1
   25984:	0017      	movs	r7, r2
   25986:	4698      	mov	r8, r3
   25988:	e64e      	b.n	25628 <__aeabi_dsub+0x10c>
   2598a:	4666      	mov	r6, ip
   2598c:	2400      	movs	r4, #0
   2598e:	2700      	movs	r7, #0
   25990:	e685      	b.n	2569e <__aeabi_dsub+0x182>
   25992:	001f      	movs	r7, r3
   25994:	0008      	movs	r0, r1
   25996:	3f20      	subs	r7, #32
   25998:	40f8      	lsrs	r0, r7
   2599a:	0007      	movs	r7, r0
   2599c:	2b20      	cmp	r3, #32
   2599e:	d100      	bne.n	259a2 <__aeabi_dsub+0x486>
   259a0:	e08e      	b.n	25ac0 <__aeabi_dsub+0x5a4>
   259a2:	2040      	movs	r0, #64	; 0x40
   259a4:	1ac3      	subs	r3, r0, r3
   259a6:	4099      	lsls	r1, r3
   259a8:	430a      	orrs	r2, r1
   259aa:	1e51      	subs	r1, r2, #1
   259ac:	418a      	sbcs	r2, r1
   259ae:	2100      	movs	r1, #0
   259b0:	4317      	orrs	r7, r2
   259b2:	e692      	b.n	256da <__aeabi_dsub+0x1be>
   259b4:	2e00      	cmp	r6, #0
   259b6:	d114      	bne.n	259e2 <__aeabi_dsub+0x4c6>
   259b8:	0026      	movs	r6, r4
   259ba:	4650      	mov	r0, sl
   259bc:	4306      	orrs	r6, r0
   259be:	d062      	beq.n	25a86 <__aeabi_dsub+0x56a>
   259c0:	43db      	mvns	r3, r3
   259c2:	2b00      	cmp	r3, #0
   259c4:	d15c      	bne.n	25a80 <__aeabi_dsub+0x564>
   259c6:	1887      	adds	r7, r0, r2
   259c8:	4297      	cmp	r7, r2
   259ca:	4192      	sbcs	r2, r2
   259cc:	1864      	adds	r4, r4, r1
   259ce:	4252      	negs	r2, r2
   259d0:	18a4      	adds	r4, r4, r2
   259d2:	4666      	mov	r6, ip
   259d4:	e687      	b.n	256e6 <__aeabi_dsub+0x1ca>
   259d6:	4650      	mov	r0, sl
   259d8:	4320      	orrs	r0, r4
   259da:	1e44      	subs	r4, r0, #1
   259dc:	41a0      	sbcs	r0, r4
   259de:	2400      	movs	r4, #0
   259e0:	e760      	b.n	258a4 <__aeabi_dsub+0x388>
   259e2:	4e57      	ldr	r6, [pc, #348]	; (25b40 <__aeabi_dsub+0x624>)
   259e4:	45b4      	cmp	ip, r6
   259e6:	d04e      	beq.n	25a86 <__aeabi_dsub+0x56a>
   259e8:	2680      	movs	r6, #128	; 0x80
   259ea:	0436      	lsls	r6, r6, #16
   259ec:	425b      	negs	r3, r3
   259ee:	4334      	orrs	r4, r6
   259f0:	2b38      	cmp	r3, #56	; 0x38
   259f2:	dd00      	ble.n	259f6 <__aeabi_dsub+0x4da>
   259f4:	e07f      	b.n	25af6 <__aeabi_dsub+0x5da>
   259f6:	2b1f      	cmp	r3, #31
   259f8:	dd00      	ble.n	259fc <__aeabi_dsub+0x4e0>
   259fa:	e08b      	b.n	25b14 <__aeabi_dsub+0x5f8>
   259fc:	2620      	movs	r6, #32
   259fe:	0027      	movs	r7, r4
   25a00:	4650      	mov	r0, sl
   25a02:	1af6      	subs	r6, r6, r3
   25a04:	40b7      	lsls	r7, r6
   25a06:	40d8      	lsrs	r0, r3
   25a08:	4307      	orrs	r7, r0
   25a0a:	4650      	mov	r0, sl
   25a0c:	40b0      	lsls	r0, r6
   25a0e:	1e46      	subs	r6, r0, #1
   25a10:	41b0      	sbcs	r0, r6
   25a12:	4307      	orrs	r7, r0
   25a14:	40dc      	lsrs	r4, r3
   25a16:	18bf      	adds	r7, r7, r2
   25a18:	e7d6      	b.n	259c8 <__aeabi_dsub+0x4ac>
   25a1a:	000d      	movs	r5, r1
   25a1c:	4315      	orrs	r5, r2
   25a1e:	d100      	bne.n	25a22 <__aeabi_dsub+0x506>
   25a20:	e602      	b.n	25628 <__aeabi_dsub+0x10c>
   25a22:	4650      	mov	r0, sl
   25a24:	1a80      	subs	r0, r0, r2
   25a26:	4582      	cmp	sl, r0
   25a28:	41bf      	sbcs	r7, r7
   25a2a:	1a65      	subs	r5, r4, r1
   25a2c:	427f      	negs	r7, r7
   25a2e:	1bed      	subs	r5, r5, r7
   25a30:	4684      	mov	ip, r0
   25a32:	0228      	lsls	r0, r5, #8
   25a34:	d400      	bmi.n	25a38 <__aeabi_dsub+0x51c>
   25a36:	e68d      	b.n	25754 <__aeabi_dsub+0x238>
   25a38:	4650      	mov	r0, sl
   25a3a:	1a17      	subs	r7, r2, r0
   25a3c:	42ba      	cmp	r2, r7
   25a3e:	4192      	sbcs	r2, r2
   25a40:	1b0c      	subs	r4, r1, r4
   25a42:	4252      	negs	r2, r2
   25a44:	1aa4      	subs	r4, r4, r2
   25a46:	4698      	mov	r8, r3
   25a48:	e5ee      	b.n	25628 <__aeabi_dsub+0x10c>
   25a4a:	000d      	movs	r5, r1
   25a4c:	4315      	orrs	r5, r2
   25a4e:	d100      	bne.n	25a52 <__aeabi_dsub+0x536>
   25a50:	e76b      	b.n	2592a <__aeabi_dsub+0x40e>
   25a52:	4650      	mov	r0, sl
   25a54:	0767      	lsls	r7, r4, #29
   25a56:	08c0      	lsrs	r0, r0, #3
   25a58:	4307      	orrs	r7, r0
   25a5a:	2080      	movs	r0, #128	; 0x80
   25a5c:	08e4      	lsrs	r4, r4, #3
   25a5e:	0300      	lsls	r0, r0, #12
   25a60:	4204      	tst	r4, r0
   25a62:	d007      	beq.n	25a74 <__aeabi_dsub+0x558>
   25a64:	08cd      	lsrs	r5, r1, #3
   25a66:	4205      	tst	r5, r0
   25a68:	d104      	bne.n	25a74 <__aeabi_dsub+0x558>
   25a6a:	002c      	movs	r4, r5
   25a6c:	4698      	mov	r8, r3
   25a6e:	08d7      	lsrs	r7, r2, #3
   25a70:	0749      	lsls	r1, r1, #29
   25a72:	430f      	orrs	r7, r1
   25a74:	0f7b      	lsrs	r3, r7, #29
   25a76:	00e4      	lsls	r4, r4, #3
   25a78:	431c      	orrs	r4, r3
   25a7a:	00ff      	lsls	r7, r7, #3
   25a7c:	4e30      	ldr	r6, [pc, #192]	; (25b40 <__aeabi_dsub+0x624>)
   25a7e:	e5d3      	b.n	25628 <__aeabi_dsub+0x10c>
   25a80:	4e2f      	ldr	r6, [pc, #188]	; (25b40 <__aeabi_dsub+0x624>)
   25a82:	45b4      	cmp	ip, r6
   25a84:	d1b4      	bne.n	259f0 <__aeabi_dsub+0x4d4>
   25a86:	000c      	movs	r4, r1
   25a88:	0017      	movs	r7, r2
   25a8a:	4666      	mov	r6, ip
   25a8c:	e5cc      	b.n	25628 <__aeabi_dsub+0x10c>
   25a8e:	2700      	movs	r7, #0
   25a90:	2400      	movs	r4, #0
   25a92:	e5e8      	b.n	25666 <__aeabi_dsub+0x14a>
   25a94:	2b00      	cmp	r3, #0
   25a96:	d039      	beq.n	25b0c <__aeabi_dsub+0x5f0>
   25a98:	000b      	movs	r3, r1
   25a9a:	4313      	orrs	r3, r2
   25a9c:	d100      	bne.n	25aa0 <__aeabi_dsub+0x584>
   25a9e:	e744      	b.n	2592a <__aeabi_dsub+0x40e>
   25aa0:	08c0      	lsrs	r0, r0, #3
   25aa2:	0767      	lsls	r7, r4, #29
   25aa4:	4307      	orrs	r7, r0
   25aa6:	2080      	movs	r0, #128	; 0x80
   25aa8:	08e4      	lsrs	r4, r4, #3
   25aaa:	0300      	lsls	r0, r0, #12
   25aac:	4204      	tst	r4, r0
   25aae:	d0e1      	beq.n	25a74 <__aeabi_dsub+0x558>
   25ab0:	08cb      	lsrs	r3, r1, #3
   25ab2:	4203      	tst	r3, r0
   25ab4:	d1de      	bne.n	25a74 <__aeabi_dsub+0x558>
   25ab6:	08d7      	lsrs	r7, r2, #3
   25ab8:	0749      	lsls	r1, r1, #29
   25aba:	430f      	orrs	r7, r1
   25abc:	001c      	movs	r4, r3
   25abe:	e7d9      	b.n	25a74 <__aeabi_dsub+0x558>
   25ac0:	2100      	movs	r1, #0
   25ac2:	e771      	b.n	259a8 <__aeabi_dsub+0x48c>
   25ac4:	2500      	movs	r5, #0
   25ac6:	2700      	movs	r7, #0
   25ac8:	e5e9      	b.n	2569e <__aeabi_dsub+0x182>
   25aca:	002e      	movs	r6, r5
   25acc:	0027      	movs	r7, r4
   25ace:	3e20      	subs	r6, #32
   25ad0:	40f7      	lsrs	r7, r6
   25ad2:	2d20      	cmp	r5, #32
   25ad4:	d02f      	beq.n	25b36 <__aeabi_dsub+0x61a>
   25ad6:	2640      	movs	r6, #64	; 0x40
   25ad8:	1b75      	subs	r5, r6, r5
   25ada:	40ac      	lsls	r4, r5
   25adc:	4650      	mov	r0, sl
   25ade:	4320      	orrs	r0, r4
   25ae0:	1e44      	subs	r4, r0, #1
   25ae2:	41a0      	sbcs	r0, r4
   25ae4:	2400      	movs	r4, #0
   25ae6:	4338      	orrs	r0, r7
   25ae8:	e6dc      	b.n	258a4 <__aeabi_dsub+0x388>
   25aea:	2480      	movs	r4, #128	; 0x80
   25aec:	2500      	movs	r5, #0
   25aee:	0324      	lsls	r4, r4, #12
   25af0:	4e13      	ldr	r6, [pc, #76]	; (25b40 <__aeabi_dsub+0x624>)
   25af2:	2700      	movs	r7, #0
   25af4:	e5d3      	b.n	2569e <__aeabi_dsub+0x182>
   25af6:	4650      	mov	r0, sl
   25af8:	4320      	orrs	r0, r4
   25afa:	0007      	movs	r7, r0
   25afc:	1e78      	subs	r0, r7, #1
   25afe:	4187      	sbcs	r7, r0
   25b00:	2400      	movs	r4, #0
   25b02:	18bf      	adds	r7, r7, r2
   25b04:	e760      	b.n	259c8 <__aeabi_dsub+0x4ac>
   25b06:	000c      	movs	r4, r1
   25b08:	0017      	movs	r7, r2
   25b0a:	e58d      	b.n	25628 <__aeabi_dsub+0x10c>
   25b0c:	000c      	movs	r4, r1
   25b0e:	0017      	movs	r7, r2
   25b10:	4e0b      	ldr	r6, [pc, #44]	; (25b40 <__aeabi_dsub+0x624>)
   25b12:	e589      	b.n	25628 <__aeabi_dsub+0x10c>
   25b14:	001e      	movs	r6, r3
   25b16:	0027      	movs	r7, r4
   25b18:	3e20      	subs	r6, #32
   25b1a:	40f7      	lsrs	r7, r6
   25b1c:	2b20      	cmp	r3, #32
   25b1e:	d00c      	beq.n	25b3a <__aeabi_dsub+0x61e>
   25b20:	2640      	movs	r6, #64	; 0x40
   25b22:	1af3      	subs	r3, r6, r3
   25b24:	409c      	lsls	r4, r3
   25b26:	4650      	mov	r0, sl
   25b28:	4320      	orrs	r0, r4
   25b2a:	1e44      	subs	r4, r0, #1
   25b2c:	41a0      	sbcs	r0, r4
   25b2e:	4307      	orrs	r7, r0
   25b30:	2400      	movs	r4, #0
   25b32:	18bf      	adds	r7, r7, r2
   25b34:	e748      	b.n	259c8 <__aeabi_dsub+0x4ac>
   25b36:	2400      	movs	r4, #0
   25b38:	e7d0      	b.n	25adc <__aeabi_dsub+0x5c0>
   25b3a:	2400      	movs	r4, #0
   25b3c:	e7f3      	b.n	25b26 <__aeabi_dsub+0x60a>
   25b3e:	46c0      	nop			; (mov r8, r8)
   25b40:	000007ff 	.word	0x000007ff
   25b44:	ff7fffff 	.word	0xff7fffff

00025b48 <__aeabi_d2iz>:
   25b48:	b530      	push	{r4, r5, lr}
   25b4a:	4d13      	ldr	r5, [pc, #76]	; (25b98 <__aeabi_d2iz+0x50>)
   25b4c:	030a      	lsls	r2, r1, #12
   25b4e:	004b      	lsls	r3, r1, #1
   25b50:	0b12      	lsrs	r2, r2, #12
   25b52:	0d5b      	lsrs	r3, r3, #21
   25b54:	0fc9      	lsrs	r1, r1, #31
   25b56:	2400      	movs	r4, #0
   25b58:	42ab      	cmp	r3, r5
   25b5a:	dd10      	ble.n	25b7e <__aeabi_d2iz+0x36>
   25b5c:	4c0f      	ldr	r4, [pc, #60]	; (25b9c <__aeabi_d2iz+0x54>)
   25b5e:	42a3      	cmp	r3, r4
   25b60:	dc0f      	bgt.n	25b82 <__aeabi_d2iz+0x3a>
   25b62:	2480      	movs	r4, #128	; 0x80
   25b64:	4d0e      	ldr	r5, [pc, #56]	; (25ba0 <__aeabi_d2iz+0x58>)
   25b66:	0364      	lsls	r4, r4, #13
   25b68:	4322      	orrs	r2, r4
   25b6a:	1aed      	subs	r5, r5, r3
   25b6c:	2d1f      	cmp	r5, #31
   25b6e:	dd0b      	ble.n	25b88 <__aeabi_d2iz+0x40>
   25b70:	480c      	ldr	r0, [pc, #48]	; (25ba4 <__aeabi_d2iz+0x5c>)
   25b72:	1ac3      	subs	r3, r0, r3
   25b74:	40da      	lsrs	r2, r3
   25b76:	4254      	negs	r4, r2
   25b78:	2900      	cmp	r1, #0
   25b7a:	d100      	bne.n	25b7e <__aeabi_d2iz+0x36>
   25b7c:	0014      	movs	r4, r2
   25b7e:	0020      	movs	r0, r4
   25b80:	bd30      	pop	{r4, r5, pc}
   25b82:	4b09      	ldr	r3, [pc, #36]	; (25ba8 <__aeabi_d2iz+0x60>)
   25b84:	18cc      	adds	r4, r1, r3
   25b86:	e7fa      	b.n	25b7e <__aeabi_d2iz+0x36>
   25b88:	4c08      	ldr	r4, [pc, #32]	; (25bac <__aeabi_d2iz+0x64>)
   25b8a:	40e8      	lsrs	r0, r5
   25b8c:	46a4      	mov	ip, r4
   25b8e:	4463      	add	r3, ip
   25b90:	409a      	lsls	r2, r3
   25b92:	4302      	orrs	r2, r0
   25b94:	e7ef      	b.n	25b76 <__aeabi_d2iz+0x2e>
   25b96:	46c0      	nop			; (mov r8, r8)
   25b98:	000003fe 	.word	0x000003fe
   25b9c:	0000041d 	.word	0x0000041d
   25ba0:	00000433 	.word	0x00000433
   25ba4:	00000413 	.word	0x00000413
   25ba8:	7fffffff 	.word	0x7fffffff
   25bac:	fffffbed 	.word	0xfffffbed

00025bb0 <__aeabi_ui2d>:
   25bb0:	b510      	push	{r4, lr}
   25bb2:	1e04      	subs	r4, r0, #0
   25bb4:	d028      	beq.n	25c08 <__aeabi_ui2d+0x58>
   25bb6:	f000 f833 	bl	25c20 <__clzsi2>
   25bba:	4b15      	ldr	r3, [pc, #84]	; (25c10 <__aeabi_ui2d+0x60>)
   25bbc:	4a15      	ldr	r2, [pc, #84]	; (25c14 <__aeabi_ui2d+0x64>)
   25bbe:	1a1b      	subs	r3, r3, r0
   25bc0:	1ad2      	subs	r2, r2, r3
   25bc2:	2a1f      	cmp	r2, #31
   25bc4:	dd15      	ble.n	25bf2 <__aeabi_ui2d+0x42>
   25bc6:	4a14      	ldr	r2, [pc, #80]	; (25c18 <__aeabi_ui2d+0x68>)
   25bc8:	1ad2      	subs	r2, r2, r3
   25bca:	4094      	lsls	r4, r2
   25bcc:	2200      	movs	r2, #0
   25bce:	0324      	lsls	r4, r4, #12
   25bd0:	055b      	lsls	r3, r3, #21
   25bd2:	0b24      	lsrs	r4, r4, #12
   25bd4:	0d5b      	lsrs	r3, r3, #21
   25bd6:	2100      	movs	r1, #0
   25bd8:	0010      	movs	r0, r2
   25bda:	0324      	lsls	r4, r4, #12
   25bdc:	0d0a      	lsrs	r2, r1, #20
   25bde:	0b24      	lsrs	r4, r4, #12
   25be0:	0512      	lsls	r2, r2, #20
   25be2:	4322      	orrs	r2, r4
   25be4:	4c0d      	ldr	r4, [pc, #52]	; (25c1c <__aeabi_ui2d+0x6c>)
   25be6:	051b      	lsls	r3, r3, #20
   25be8:	4022      	ands	r2, r4
   25bea:	4313      	orrs	r3, r2
   25bec:	005b      	lsls	r3, r3, #1
   25bee:	0859      	lsrs	r1, r3, #1
   25bf0:	bd10      	pop	{r4, pc}
   25bf2:	0021      	movs	r1, r4
   25bf4:	4091      	lsls	r1, r2
   25bf6:	000a      	movs	r2, r1
   25bf8:	210b      	movs	r1, #11
   25bfa:	1a08      	subs	r0, r1, r0
   25bfc:	40c4      	lsrs	r4, r0
   25bfe:	055b      	lsls	r3, r3, #21
   25c00:	0324      	lsls	r4, r4, #12
   25c02:	0b24      	lsrs	r4, r4, #12
   25c04:	0d5b      	lsrs	r3, r3, #21
   25c06:	e7e6      	b.n	25bd6 <__aeabi_ui2d+0x26>
   25c08:	2300      	movs	r3, #0
   25c0a:	2400      	movs	r4, #0
   25c0c:	2200      	movs	r2, #0
   25c0e:	e7e2      	b.n	25bd6 <__aeabi_ui2d+0x26>
   25c10:	0000041e 	.word	0x0000041e
   25c14:	00000433 	.word	0x00000433
   25c18:	00000413 	.word	0x00000413
   25c1c:	800fffff 	.word	0x800fffff

00025c20 <__clzsi2>:
   25c20:	211c      	movs	r1, #28
   25c22:	2301      	movs	r3, #1
   25c24:	041b      	lsls	r3, r3, #16
   25c26:	4298      	cmp	r0, r3
   25c28:	d301      	bcc.n	25c2e <__clzsi2+0xe>
   25c2a:	0c00      	lsrs	r0, r0, #16
   25c2c:	3910      	subs	r1, #16
   25c2e:	0a1b      	lsrs	r3, r3, #8
   25c30:	4298      	cmp	r0, r3
   25c32:	d301      	bcc.n	25c38 <__clzsi2+0x18>
   25c34:	0a00      	lsrs	r0, r0, #8
   25c36:	3908      	subs	r1, #8
   25c38:	091b      	lsrs	r3, r3, #4
   25c3a:	4298      	cmp	r0, r3
   25c3c:	d301      	bcc.n	25c42 <__clzsi2+0x22>
   25c3e:	0900      	lsrs	r0, r0, #4
   25c40:	3904      	subs	r1, #4
   25c42:	a202      	add	r2, pc, #8	; (adr r2, 25c4c <__clzsi2+0x2c>)
   25c44:	5c10      	ldrb	r0, [r2, r0]
   25c46:	1840      	adds	r0, r0, r1
   25c48:	4770      	bx	lr
   25c4a:	46c0      	nop			; (mov r8, r8)
   25c4c:	02020304 	.word	0x02020304
   25c50:	01010101 	.word	0x01010101
	...

00025c5c <atoi>:
   25c5c:	b510      	push	{r4, lr}
   25c5e:	220a      	movs	r2, #10
   25c60:	2100      	movs	r1, #0
   25c62:	f000 fb0d 	bl	26280 <strtol>
   25c66:	bd10      	pop	{r4, pc}

00025c68 <__libc_init_array>:
   25c68:	b570      	push	{r4, r5, r6, lr}
   25c6a:	2600      	movs	r6, #0
   25c6c:	4d0c      	ldr	r5, [pc, #48]	; (25ca0 <__libc_init_array+0x38>)
   25c6e:	4c0d      	ldr	r4, [pc, #52]	; (25ca4 <__libc_init_array+0x3c>)
   25c70:	1b64      	subs	r4, r4, r5
   25c72:	10a4      	asrs	r4, r4, #2
   25c74:	42a6      	cmp	r6, r4
   25c76:	d109      	bne.n	25c8c <__libc_init_array+0x24>
   25c78:	2600      	movs	r6, #0
   25c7a:	f006 f869 	bl	2bd50 <_init>
   25c7e:	4d0a      	ldr	r5, [pc, #40]	; (25ca8 <__libc_init_array+0x40>)
   25c80:	4c0a      	ldr	r4, [pc, #40]	; (25cac <__libc_init_array+0x44>)
   25c82:	1b64      	subs	r4, r4, r5
   25c84:	10a4      	asrs	r4, r4, #2
   25c86:	42a6      	cmp	r6, r4
   25c88:	d105      	bne.n	25c96 <__libc_init_array+0x2e>
   25c8a:	bd70      	pop	{r4, r5, r6, pc}
   25c8c:	00b3      	lsls	r3, r6, #2
   25c8e:	58eb      	ldr	r3, [r5, r3]
   25c90:	4798      	blx	r3
   25c92:	3601      	adds	r6, #1
   25c94:	e7ee      	b.n	25c74 <__libc_init_array+0xc>
   25c96:	00b3      	lsls	r3, r6, #2
   25c98:	58eb      	ldr	r3, [r5, r3]
   25c9a:	4798      	blx	r3
   25c9c:	3601      	adds	r6, #1
   25c9e:	e7f2      	b.n	25c86 <__libc_init_array+0x1e>
   25ca0:	0002bd5c 	.word	0x0002bd5c
   25ca4:	0002bd5c 	.word	0x0002bd5c
   25ca8:	0002bd5c 	.word	0x0002bd5c
   25cac:	0002bd60 	.word	0x0002bd60

00025cb0 <malloc>:
   25cb0:	b510      	push	{r4, lr}
   25cb2:	4b03      	ldr	r3, [pc, #12]	; (25cc0 <malloc+0x10>)
   25cb4:	0001      	movs	r1, r0
   25cb6:	6818      	ldr	r0, [r3, #0]
   25cb8:	f000 f87c 	bl	25db4 <_malloc_r>
   25cbc:	bd10      	pop	{r4, pc}
   25cbe:	46c0      	nop			; (mov r8, r8)
   25cc0:	200000e0 	.word	0x200000e0

00025cc4 <free>:
   25cc4:	b510      	push	{r4, lr}
   25cc6:	4b03      	ldr	r3, [pc, #12]	; (25cd4 <free+0x10>)
   25cc8:	0001      	movs	r1, r0
   25cca:	6818      	ldr	r0, [r3, #0]
   25ccc:	f000 f828 	bl	25d20 <_free_r>
   25cd0:	bd10      	pop	{r4, pc}
   25cd2:	46c0      	nop			; (mov r8, r8)
   25cd4:	200000e0 	.word	0x200000e0

00025cd8 <memcpy>:
   25cd8:	2300      	movs	r3, #0
   25cda:	b510      	push	{r4, lr}
   25cdc:	429a      	cmp	r2, r3
   25cde:	d100      	bne.n	25ce2 <memcpy+0xa>
   25ce0:	bd10      	pop	{r4, pc}
   25ce2:	5ccc      	ldrb	r4, [r1, r3]
   25ce4:	54c4      	strb	r4, [r0, r3]
   25ce6:	3301      	adds	r3, #1
   25ce8:	e7f8      	b.n	25cdc <memcpy+0x4>

00025cea <memmove>:
   25cea:	b510      	push	{r4, lr}
   25cec:	4288      	cmp	r0, r1
   25cee:	d902      	bls.n	25cf6 <memmove+0xc>
   25cf0:	188b      	adds	r3, r1, r2
   25cf2:	4298      	cmp	r0, r3
   25cf4:	d308      	bcc.n	25d08 <memmove+0x1e>
   25cf6:	2300      	movs	r3, #0
   25cf8:	429a      	cmp	r2, r3
   25cfa:	d007      	beq.n	25d0c <memmove+0x22>
   25cfc:	5ccc      	ldrb	r4, [r1, r3]
   25cfe:	54c4      	strb	r4, [r0, r3]
   25d00:	3301      	adds	r3, #1
   25d02:	e7f9      	b.n	25cf8 <memmove+0xe>
   25d04:	5c8b      	ldrb	r3, [r1, r2]
   25d06:	5483      	strb	r3, [r0, r2]
   25d08:	3a01      	subs	r2, #1
   25d0a:	d2fb      	bcs.n	25d04 <memmove+0x1a>
   25d0c:	bd10      	pop	{r4, pc}

00025d0e <memset>:
   25d0e:	0003      	movs	r3, r0
   25d10:	1882      	adds	r2, r0, r2
   25d12:	4293      	cmp	r3, r2
   25d14:	d100      	bne.n	25d18 <memset+0xa>
   25d16:	4770      	bx	lr
   25d18:	7019      	strb	r1, [r3, #0]
   25d1a:	3301      	adds	r3, #1
   25d1c:	e7f9      	b.n	25d12 <memset+0x4>
	...

00025d20 <_free_r>:
   25d20:	b570      	push	{r4, r5, r6, lr}
   25d22:	0005      	movs	r5, r0
   25d24:	2900      	cmp	r1, #0
   25d26:	d010      	beq.n	25d4a <_free_r+0x2a>
   25d28:	1f0c      	subs	r4, r1, #4
   25d2a:	6823      	ldr	r3, [r4, #0]
   25d2c:	2b00      	cmp	r3, #0
   25d2e:	da00      	bge.n	25d32 <_free_r+0x12>
   25d30:	18e4      	adds	r4, r4, r3
   25d32:	0028      	movs	r0, r5
   25d34:	f000 fdd8 	bl	268e8 <__malloc_lock>
   25d38:	4a1d      	ldr	r2, [pc, #116]	; (25db0 <_free_r+0x90>)
   25d3a:	6813      	ldr	r3, [r2, #0]
   25d3c:	2b00      	cmp	r3, #0
   25d3e:	d105      	bne.n	25d4c <_free_r+0x2c>
   25d40:	6063      	str	r3, [r4, #4]
   25d42:	6014      	str	r4, [r2, #0]
   25d44:	0028      	movs	r0, r5
   25d46:	f000 fdd0 	bl	268ea <__malloc_unlock>
   25d4a:	bd70      	pop	{r4, r5, r6, pc}
   25d4c:	42a3      	cmp	r3, r4
   25d4e:	d909      	bls.n	25d64 <_free_r+0x44>
   25d50:	6821      	ldr	r1, [r4, #0]
   25d52:	1860      	adds	r0, r4, r1
   25d54:	4283      	cmp	r3, r0
   25d56:	d1f3      	bne.n	25d40 <_free_r+0x20>
   25d58:	6818      	ldr	r0, [r3, #0]
   25d5a:	685b      	ldr	r3, [r3, #4]
   25d5c:	1841      	adds	r1, r0, r1
   25d5e:	6021      	str	r1, [r4, #0]
   25d60:	e7ee      	b.n	25d40 <_free_r+0x20>
   25d62:	0013      	movs	r3, r2
   25d64:	685a      	ldr	r2, [r3, #4]
   25d66:	2a00      	cmp	r2, #0
   25d68:	d001      	beq.n	25d6e <_free_r+0x4e>
   25d6a:	42a2      	cmp	r2, r4
   25d6c:	d9f9      	bls.n	25d62 <_free_r+0x42>
   25d6e:	6819      	ldr	r1, [r3, #0]
   25d70:	1858      	adds	r0, r3, r1
   25d72:	42a0      	cmp	r0, r4
   25d74:	d10b      	bne.n	25d8e <_free_r+0x6e>
   25d76:	6820      	ldr	r0, [r4, #0]
   25d78:	1809      	adds	r1, r1, r0
   25d7a:	1858      	adds	r0, r3, r1
   25d7c:	6019      	str	r1, [r3, #0]
   25d7e:	4282      	cmp	r2, r0
   25d80:	d1e0      	bne.n	25d44 <_free_r+0x24>
   25d82:	6810      	ldr	r0, [r2, #0]
   25d84:	6852      	ldr	r2, [r2, #4]
   25d86:	1841      	adds	r1, r0, r1
   25d88:	6019      	str	r1, [r3, #0]
   25d8a:	605a      	str	r2, [r3, #4]
   25d8c:	e7da      	b.n	25d44 <_free_r+0x24>
   25d8e:	42a0      	cmp	r0, r4
   25d90:	d902      	bls.n	25d98 <_free_r+0x78>
   25d92:	230c      	movs	r3, #12
   25d94:	602b      	str	r3, [r5, #0]
   25d96:	e7d5      	b.n	25d44 <_free_r+0x24>
   25d98:	6821      	ldr	r1, [r4, #0]
   25d9a:	1860      	adds	r0, r4, r1
   25d9c:	4282      	cmp	r2, r0
   25d9e:	d103      	bne.n	25da8 <_free_r+0x88>
   25da0:	6810      	ldr	r0, [r2, #0]
   25da2:	6852      	ldr	r2, [r2, #4]
   25da4:	1841      	adds	r1, r0, r1
   25da6:	6021      	str	r1, [r4, #0]
   25da8:	6062      	str	r2, [r4, #4]
   25daa:	605c      	str	r4, [r3, #4]
   25dac:	e7ca      	b.n	25d44 <_free_r+0x24>
   25dae:	46c0      	nop			; (mov r8, r8)
   25db0:	2000412c 	.word	0x2000412c

00025db4 <_malloc_r>:
   25db4:	2303      	movs	r3, #3
   25db6:	b570      	push	{r4, r5, r6, lr}
   25db8:	1ccd      	adds	r5, r1, #3
   25dba:	439d      	bics	r5, r3
   25dbc:	3508      	adds	r5, #8
   25dbe:	0006      	movs	r6, r0
   25dc0:	2d0c      	cmp	r5, #12
   25dc2:	d21e      	bcs.n	25e02 <_malloc_r+0x4e>
   25dc4:	250c      	movs	r5, #12
   25dc6:	42a9      	cmp	r1, r5
   25dc8:	d81d      	bhi.n	25e06 <_malloc_r+0x52>
   25dca:	0030      	movs	r0, r6
   25dcc:	f000 fd8c 	bl	268e8 <__malloc_lock>
   25dd0:	4a25      	ldr	r2, [pc, #148]	; (25e68 <_malloc_r+0xb4>)
   25dd2:	6814      	ldr	r4, [r2, #0]
   25dd4:	0021      	movs	r1, r4
   25dd6:	2900      	cmp	r1, #0
   25dd8:	d119      	bne.n	25e0e <_malloc_r+0x5a>
   25dda:	4c24      	ldr	r4, [pc, #144]	; (25e6c <_malloc_r+0xb8>)
   25ddc:	6823      	ldr	r3, [r4, #0]
   25dde:	2b00      	cmp	r3, #0
   25de0:	d103      	bne.n	25dea <_malloc_r+0x36>
   25de2:	0030      	movs	r0, r6
   25de4:	f000 f8ae 	bl	25f44 <_sbrk_r>
   25de8:	6020      	str	r0, [r4, #0]
   25dea:	0029      	movs	r1, r5
   25dec:	0030      	movs	r0, r6
   25dee:	f000 f8a9 	bl	25f44 <_sbrk_r>
   25df2:	1c43      	adds	r3, r0, #1
   25df4:	d12c      	bne.n	25e50 <_malloc_r+0x9c>
   25df6:	230c      	movs	r3, #12
   25df8:	0030      	movs	r0, r6
   25dfa:	6033      	str	r3, [r6, #0]
   25dfc:	f000 fd75 	bl	268ea <__malloc_unlock>
   25e00:	e003      	b.n	25e0a <_malloc_r+0x56>
   25e02:	2d00      	cmp	r5, #0
   25e04:	dadf      	bge.n	25dc6 <_malloc_r+0x12>
   25e06:	230c      	movs	r3, #12
   25e08:	6033      	str	r3, [r6, #0]
   25e0a:	2000      	movs	r0, #0
   25e0c:	bd70      	pop	{r4, r5, r6, pc}
   25e0e:	680b      	ldr	r3, [r1, #0]
   25e10:	1b5b      	subs	r3, r3, r5
   25e12:	d41a      	bmi.n	25e4a <_malloc_r+0x96>
   25e14:	2b0b      	cmp	r3, #11
   25e16:	d903      	bls.n	25e20 <_malloc_r+0x6c>
   25e18:	600b      	str	r3, [r1, #0]
   25e1a:	18cc      	adds	r4, r1, r3
   25e1c:	6025      	str	r5, [r4, #0]
   25e1e:	e003      	b.n	25e28 <_malloc_r+0x74>
   25e20:	428c      	cmp	r4, r1
   25e22:	d10e      	bne.n	25e42 <_malloc_r+0x8e>
   25e24:	6863      	ldr	r3, [r4, #4]
   25e26:	6013      	str	r3, [r2, #0]
   25e28:	0030      	movs	r0, r6
   25e2a:	f000 fd5e 	bl	268ea <__malloc_unlock>
   25e2e:	0020      	movs	r0, r4
   25e30:	2207      	movs	r2, #7
   25e32:	300b      	adds	r0, #11
   25e34:	1d23      	adds	r3, r4, #4
   25e36:	4390      	bics	r0, r2
   25e38:	1ac3      	subs	r3, r0, r3
   25e3a:	d0e7      	beq.n	25e0c <_malloc_r+0x58>
   25e3c:	425a      	negs	r2, r3
   25e3e:	50e2      	str	r2, [r4, r3]
   25e40:	e7e4      	b.n	25e0c <_malloc_r+0x58>
   25e42:	684b      	ldr	r3, [r1, #4]
   25e44:	6063      	str	r3, [r4, #4]
   25e46:	000c      	movs	r4, r1
   25e48:	e7ee      	b.n	25e28 <_malloc_r+0x74>
   25e4a:	000c      	movs	r4, r1
   25e4c:	6849      	ldr	r1, [r1, #4]
   25e4e:	e7c2      	b.n	25dd6 <_malloc_r+0x22>
   25e50:	2303      	movs	r3, #3
   25e52:	1cc4      	adds	r4, r0, #3
   25e54:	439c      	bics	r4, r3
   25e56:	42a0      	cmp	r0, r4
   25e58:	d0e0      	beq.n	25e1c <_malloc_r+0x68>
   25e5a:	1a21      	subs	r1, r4, r0
   25e5c:	0030      	movs	r0, r6
   25e5e:	f000 f871 	bl	25f44 <_sbrk_r>
   25e62:	1c43      	adds	r3, r0, #1
   25e64:	d1da      	bne.n	25e1c <_malloc_r+0x68>
   25e66:	e7c6      	b.n	25df6 <_malloc_r+0x42>
   25e68:	2000412c 	.word	0x2000412c
   25e6c:	20004130 	.word	0x20004130

00025e70 <_puts_r>:
   25e70:	b570      	push	{r4, r5, r6, lr}
   25e72:	0005      	movs	r5, r0
   25e74:	000e      	movs	r6, r1
   25e76:	2800      	cmp	r0, #0
   25e78:	d004      	beq.n	25e84 <_puts_r+0x14>
   25e7a:	6983      	ldr	r3, [r0, #24]
   25e7c:	2b00      	cmp	r3, #0
   25e7e:	d101      	bne.n	25e84 <_puts_r+0x14>
   25e80:	f000 fc0e 	bl	266a0 <__sinit>
   25e84:	69ab      	ldr	r3, [r5, #24]
   25e86:	68ac      	ldr	r4, [r5, #8]
   25e88:	2b00      	cmp	r3, #0
   25e8a:	d102      	bne.n	25e92 <_puts_r+0x22>
   25e8c:	0028      	movs	r0, r5
   25e8e:	f000 fc07 	bl	266a0 <__sinit>
   25e92:	4b24      	ldr	r3, [pc, #144]	; (25f24 <_puts_r+0xb4>)
   25e94:	429c      	cmp	r4, r3
   25e96:	d10f      	bne.n	25eb8 <_puts_r+0x48>
   25e98:	686c      	ldr	r4, [r5, #4]
   25e9a:	89a3      	ldrh	r3, [r4, #12]
   25e9c:	071b      	lsls	r3, r3, #28
   25e9e:	d502      	bpl.n	25ea6 <_puts_r+0x36>
   25ea0:	6923      	ldr	r3, [r4, #16]
   25ea2:	2b00      	cmp	r3, #0
   25ea4:	d120      	bne.n	25ee8 <_puts_r+0x78>
   25ea6:	0021      	movs	r1, r4
   25ea8:	0028      	movs	r0, r5
   25eaa:	f000 fa8b 	bl	263c4 <__swsetup_r>
   25eae:	2800      	cmp	r0, #0
   25eb0:	d01a      	beq.n	25ee8 <_puts_r+0x78>
   25eb2:	2001      	movs	r0, #1
   25eb4:	4240      	negs	r0, r0
   25eb6:	bd70      	pop	{r4, r5, r6, pc}
   25eb8:	4b1b      	ldr	r3, [pc, #108]	; (25f28 <_puts_r+0xb8>)
   25eba:	429c      	cmp	r4, r3
   25ebc:	d101      	bne.n	25ec2 <_puts_r+0x52>
   25ebe:	68ac      	ldr	r4, [r5, #8]
   25ec0:	e7eb      	b.n	25e9a <_puts_r+0x2a>
   25ec2:	4b1a      	ldr	r3, [pc, #104]	; (25f2c <_puts_r+0xbc>)
   25ec4:	429c      	cmp	r4, r3
   25ec6:	d1e8      	bne.n	25e9a <_puts_r+0x2a>
   25ec8:	68ec      	ldr	r4, [r5, #12]
   25eca:	e7e6      	b.n	25e9a <_puts_r+0x2a>
   25ecc:	3b01      	subs	r3, #1
   25ece:	3601      	adds	r6, #1
   25ed0:	60a3      	str	r3, [r4, #8]
   25ed2:	2b00      	cmp	r3, #0
   25ed4:	da04      	bge.n	25ee0 <_puts_r+0x70>
   25ed6:	69a2      	ldr	r2, [r4, #24]
   25ed8:	4293      	cmp	r3, r2
   25eda:	db16      	blt.n	25f0a <_puts_r+0x9a>
   25edc:	290a      	cmp	r1, #10
   25ede:	d014      	beq.n	25f0a <_puts_r+0x9a>
   25ee0:	6823      	ldr	r3, [r4, #0]
   25ee2:	1c5a      	adds	r2, r3, #1
   25ee4:	6022      	str	r2, [r4, #0]
   25ee6:	7019      	strb	r1, [r3, #0]
   25ee8:	7831      	ldrb	r1, [r6, #0]
   25eea:	68a3      	ldr	r3, [r4, #8]
   25eec:	2900      	cmp	r1, #0
   25eee:	d1ed      	bne.n	25ecc <_puts_r+0x5c>
   25ef0:	3b01      	subs	r3, #1
   25ef2:	60a3      	str	r3, [r4, #8]
   25ef4:	2b00      	cmp	r3, #0
   25ef6:	da0f      	bge.n	25f18 <_puts_r+0xa8>
   25ef8:	0022      	movs	r2, r4
   25efa:	310a      	adds	r1, #10
   25efc:	0028      	movs	r0, r5
   25efe:	f000 fa0b 	bl	26318 <__swbuf_r>
   25f02:	1c43      	adds	r3, r0, #1
   25f04:	d0d5      	beq.n	25eb2 <_puts_r+0x42>
   25f06:	200a      	movs	r0, #10
   25f08:	e7d5      	b.n	25eb6 <_puts_r+0x46>
   25f0a:	0022      	movs	r2, r4
   25f0c:	0028      	movs	r0, r5
   25f0e:	f000 fa03 	bl	26318 <__swbuf_r>
   25f12:	1c43      	adds	r3, r0, #1
   25f14:	d1e8      	bne.n	25ee8 <_puts_r+0x78>
   25f16:	e7cc      	b.n	25eb2 <_puts_r+0x42>
   25f18:	200a      	movs	r0, #10
   25f1a:	6823      	ldr	r3, [r4, #0]
   25f1c:	1c5a      	adds	r2, r3, #1
   25f1e:	6022      	str	r2, [r4, #0]
   25f20:	7018      	strb	r0, [r3, #0]
   25f22:	e7c8      	b.n	25eb6 <_puts_r+0x46>
   25f24:	0002bbd0 	.word	0x0002bbd0
   25f28:	0002bbf0 	.word	0x0002bbf0
   25f2c:	0002bbb0 	.word	0x0002bbb0

00025f30 <puts>:
   25f30:	b510      	push	{r4, lr}
   25f32:	4b03      	ldr	r3, [pc, #12]	; (25f40 <puts+0x10>)
   25f34:	0001      	movs	r1, r0
   25f36:	6818      	ldr	r0, [r3, #0]
   25f38:	f7ff ff9a 	bl	25e70 <_puts_r>
   25f3c:	bd10      	pop	{r4, pc}
   25f3e:	46c0      	nop			; (mov r8, r8)
   25f40:	200000e0 	.word	0x200000e0

00025f44 <_sbrk_r>:
   25f44:	2300      	movs	r3, #0
   25f46:	b570      	push	{r4, r5, r6, lr}
   25f48:	4c06      	ldr	r4, [pc, #24]	; (25f64 <_sbrk_r+0x20>)
   25f4a:	0005      	movs	r5, r0
   25f4c:	0008      	movs	r0, r1
   25f4e:	6023      	str	r3, [r4, #0]
   25f50:	f7f9 fde2 	bl	1fb18 <_sbrk>
   25f54:	1c43      	adds	r3, r0, #1
   25f56:	d103      	bne.n	25f60 <_sbrk_r+0x1c>
   25f58:	6823      	ldr	r3, [r4, #0]
   25f5a:	2b00      	cmp	r3, #0
   25f5c:	d000      	beq.n	25f60 <_sbrk_r+0x1c>
   25f5e:	602b      	str	r3, [r5, #0]
   25f60:	bd70      	pop	{r4, r5, r6, pc}
   25f62:	46c0      	nop			; (mov r8, r8)
   25f64:	20005590 	.word	0x20005590

00025f68 <sniprintf>:
   25f68:	b40c      	push	{r2, r3}
   25f6a:	b530      	push	{r4, r5, lr}
   25f6c:	4b16      	ldr	r3, [pc, #88]	; (25fc8 <sniprintf+0x60>)
   25f6e:	b09d      	sub	sp, #116	; 0x74
   25f70:	1e0c      	subs	r4, r1, #0
   25f72:	681d      	ldr	r5, [r3, #0]
   25f74:	da08      	bge.n	25f88 <sniprintf+0x20>
   25f76:	238b      	movs	r3, #139	; 0x8b
   25f78:	2001      	movs	r0, #1
   25f7a:	602b      	str	r3, [r5, #0]
   25f7c:	4240      	negs	r0, r0
   25f7e:	b01d      	add	sp, #116	; 0x74
   25f80:	bc30      	pop	{r4, r5}
   25f82:	bc08      	pop	{r3}
   25f84:	b002      	add	sp, #8
   25f86:	4718      	bx	r3
   25f88:	2382      	movs	r3, #130	; 0x82
   25f8a:	a902      	add	r1, sp, #8
   25f8c:	009b      	lsls	r3, r3, #2
   25f8e:	818b      	strh	r3, [r1, #12]
   25f90:	2300      	movs	r3, #0
   25f92:	9002      	str	r0, [sp, #8]
   25f94:	6108      	str	r0, [r1, #16]
   25f96:	429c      	cmp	r4, r3
   25f98:	d000      	beq.n	25f9c <sniprintf+0x34>
   25f9a:	1e63      	subs	r3, r4, #1
   25f9c:	608b      	str	r3, [r1, #8]
   25f9e:	614b      	str	r3, [r1, #20]
   25fa0:	2301      	movs	r3, #1
   25fa2:	425b      	negs	r3, r3
   25fa4:	81cb      	strh	r3, [r1, #14]
   25fa6:	9a20      	ldr	r2, [sp, #128]	; 0x80
   25fa8:	ab21      	add	r3, sp, #132	; 0x84
   25faa:	0028      	movs	r0, r5
   25fac:	9301      	str	r3, [sp, #4]
   25fae:	f000 fcff 	bl	269b0 <_svfiprintf_r>
   25fb2:	1c43      	adds	r3, r0, #1
   25fb4:	da01      	bge.n	25fba <sniprintf+0x52>
   25fb6:	238b      	movs	r3, #139	; 0x8b
   25fb8:	602b      	str	r3, [r5, #0]
   25fba:	2c00      	cmp	r4, #0
   25fbc:	d0df      	beq.n	25f7e <sniprintf+0x16>
   25fbe:	2300      	movs	r3, #0
   25fc0:	9a02      	ldr	r2, [sp, #8]
   25fc2:	7013      	strb	r3, [r2, #0]
   25fc4:	e7db      	b.n	25f7e <sniprintf+0x16>
   25fc6:	46c0      	nop			; (mov r8, r8)
   25fc8:	200000e0 	.word	0x200000e0

00025fcc <siprintf>:
   25fcc:	b40e      	push	{r1, r2, r3}
   25fce:	b510      	push	{r4, lr}
   25fd0:	b09d      	sub	sp, #116	; 0x74
   25fd2:	a902      	add	r1, sp, #8
   25fd4:	9002      	str	r0, [sp, #8]
   25fd6:	6108      	str	r0, [r1, #16]
   25fd8:	480b      	ldr	r0, [pc, #44]	; (26008 <siprintf+0x3c>)
   25fda:	2482      	movs	r4, #130	; 0x82
   25fdc:	6088      	str	r0, [r1, #8]
   25fde:	6148      	str	r0, [r1, #20]
   25fe0:	2001      	movs	r0, #1
   25fe2:	4240      	negs	r0, r0
   25fe4:	ab1f      	add	r3, sp, #124	; 0x7c
   25fe6:	81c8      	strh	r0, [r1, #14]
   25fe8:	4808      	ldr	r0, [pc, #32]	; (2600c <siprintf+0x40>)
   25fea:	cb04      	ldmia	r3!, {r2}
   25fec:	00a4      	lsls	r4, r4, #2
   25fee:	6800      	ldr	r0, [r0, #0]
   25ff0:	9301      	str	r3, [sp, #4]
   25ff2:	818c      	strh	r4, [r1, #12]
   25ff4:	f000 fcdc 	bl	269b0 <_svfiprintf_r>
   25ff8:	2300      	movs	r3, #0
   25ffa:	9a02      	ldr	r2, [sp, #8]
   25ffc:	7013      	strb	r3, [r2, #0]
   25ffe:	b01d      	add	sp, #116	; 0x74
   26000:	bc10      	pop	{r4}
   26002:	bc08      	pop	{r3}
   26004:	b003      	add	sp, #12
   26006:	4718      	bx	r3
   26008:	7fffffff 	.word	0x7fffffff
   2600c:	200000e0 	.word	0x200000e0

00026010 <strcasecmp>:
   26010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26012:	0007      	movs	r7, r0
   26014:	000e      	movs	r6, r1
   26016:	783c      	ldrb	r4, [r7, #0]
   26018:	f000 fbda 	bl	267d0 <__locale_ctype_ptr>
   2601c:	2203      	movs	r2, #3
   2601e:	1900      	adds	r0, r0, r4
   26020:	7843      	ldrb	r3, [r0, #1]
   26022:	4013      	ands	r3, r2
   26024:	2b01      	cmp	r3, #1
   26026:	d100      	bne.n	2602a <strcasecmp+0x1a>
   26028:	3420      	adds	r4, #32
   2602a:	7835      	ldrb	r5, [r6, #0]
   2602c:	f000 fbd0 	bl	267d0 <__locale_ctype_ptr>
   26030:	2203      	movs	r2, #3
   26032:	1940      	adds	r0, r0, r5
   26034:	7843      	ldrb	r3, [r0, #1]
   26036:	4013      	ands	r3, r2
   26038:	2b01      	cmp	r3, #1
   2603a:	d100      	bne.n	2603e <strcasecmp+0x2e>
   2603c:	3520      	adds	r5, #32
   2603e:	1b60      	subs	r0, r4, r5
   26040:	d103      	bne.n	2604a <strcasecmp+0x3a>
   26042:	3701      	adds	r7, #1
   26044:	3601      	adds	r6, #1
   26046:	2d00      	cmp	r5, #0
   26048:	d1e5      	bne.n	26016 <strcasecmp+0x6>
   2604a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002604c <strcat>:
   2604c:	0002      	movs	r2, r0
   2604e:	b510      	push	{r4, lr}
   26050:	7813      	ldrb	r3, [r2, #0]
   26052:	2b00      	cmp	r3, #0
   26054:	d105      	bne.n	26062 <strcat+0x16>
   26056:	5ccc      	ldrb	r4, [r1, r3]
   26058:	54d4      	strb	r4, [r2, r3]
   2605a:	3301      	adds	r3, #1
   2605c:	2c00      	cmp	r4, #0
   2605e:	d1fa      	bne.n	26056 <strcat+0xa>
   26060:	bd10      	pop	{r4, pc}
   26062:	3201      	adds	r2, #1
   26064:	e7f4      	b.n	26050 <strcat+0x4>

00026066 <strcmp>:
   26066:	7802      	ldrb	r2, [r0, #0]
   26068:	780b      	ldrb	r3, [r1, #0]
   2606a:	2a00      	cmp	r2, #0
   2606c:	d003      	beq.n	26076 <strcmp+0x10>
   2606e:	3001      	adds	r0, #1
   26070:	3101      	adds	r1, #1
   26072:	429a      	cmp	r2, r3
   26074:	d0f7      	beq.n	26066 <strcmp>
   26076:	1ad0      	subs	r0, r2, r3
   26078:	4770      	bx	lr

0002607a <strcpy>:
   2607a:	1c03      	adds	r3, r0, #0
   2607c:	780a      	ldrb	r2, [r1, #0]
   2607e:	3101      	adds	r1, #1
   26080:	701a      	strb	r2, [r3, #0]
   26082:	3301      	adds	r3, #1
   26084:	2a00      	cmp	r2, #0
   26086:	d1f9      	bne.n	2607c <strcpy+0x2>
   26088:	4770      	bx	lr
	...

0002608c <strdup>:
   2608c:	b510      	push	{r4, lr}
   2608e:	4b03      	ldr	r3, [pc, #12]	; (2609c <strdup+0x10>)
   26090:	0001      	movs	r1, r0
   26092:	6818      	ldr	r0, [r3, #0]
   26094:	f000 f804 	bl	260a0 <_strdup_r>
   26098:	bd10      	pop	{r4, pc}
   2609a:	46c0      	nop			; (mov r8, r8)
   2609c:	200000e0 	.word	0x200000e0

000260a0 <_strdup_r>:
   260a0:	b570      	push	{r4, r5, r6, lr}
   260a2:	0005      	movs	r5, r0
   260a4:	0008      	movs	r0, r1
   260a6:	000e      	movs	r6, r1
   260a8:	f000 f80d 	bl	260c6 <strlen>
   260ac:	1c44      	adds	r4, r0, #1
   260ae:	0021      	movs	r1, r4
   260b0:	0028      	movs	r0, r5
   260b2:	f7ff fe7f 	bl	25db4 <_malloc_r>
   260b6:	1e05      	subs	r5, r0, #0
   260b8:	d003      	beq.n	260c2 <_strdup_r+0x22>
   260ba:	0022      	movs	r2, r4
   260bc:	0031      	movs	r1, r6
   260be:	f7ff fe0b 	bl	25cd8 <memcpy>
   260c2:	0028      	movs	r0, r5
   260c4:	bd70      	pop	{r4, r5, r6, pc}

000260c6 <strlen>:
   260c6:	2300      	movs	r3, #0
   260c8:	5cc2      	ldrb	r2, [r0, r3]
   260ca:	3301      	adds	r3, #1
   260cc:	2a00      	cmp	r2, #0
   260ce:	d1fb      	bne.n	260c8 <strlen+0x2>
   260d0:	1e58      	subs	r0, r3, #1
   260d2:	4770      	bx	lr

000260d4 <strncmp>:
   260d4:	2300      	movs	r3, #0
   260d6:	b530      	push	{r4, r5, lr}
   260d8:	429a      	cmp	r2, r3
   260da:	d00a      	beq.n	260f2 <strncmp+0x1e>
   260dc:	3a01      	subs	r2, #1
   260de:	5cc4      	ldrb	r4, [r0, r3]
   260e0:	5ccd      	ldrb	r5, [r1, r3]
   260e2:	42ac      	cmp	r4, r5
   260e4:	d104      	bne.n	260f0 <strncmp+0x1c>
   260e6:	429a      	cmp	r2, r3
   260e8:	d002      	beq.n	260f0 <strncmp+0x1c>
   260ea:	3301      	adds	r3, #1
   260ec:	2c00      	cmp	r4, #0
   260ee:	d1f6      	bne.n	260de <strncmp+0xa>
   260f0:	1b63      	subs	r3, r4, r5
   260f2:	0018      	movs	r0, r3
   260f4:	bd30      	pop	{r4, r5, pc}

000260f6 <strncpy>:
   260f6:	b570      	push	{r4, r5, r6, lr}
   260f8:	0004      	movs	r4, r0
   260fa:	2a00      	cmp	r2, #0
   260fc:	d100      	bne.n	26100 <strncpy+0xa>
   260fe:	bd70      	pop	{r4, r5, r6, pc}
   26100:	780d      	ldrb	r5, [r1, #0]
   26102:	1e56      	subs	r6, r2, #1
   26104:	1c63      	adds	r3, r4, #1
   26106:	7025      	strb	r5, [r4, #0]
   26108:	3101      	adds	r1, #1
   2610a:	2d00      	cmp	r5, #0
   2610c:	d105      	bne.n	2611a <strncpy+0x24>
   2610e:	18a4      	adds	r4, r4, r2
   26110:	429c      	cmp	r4, r3
   26112:	d0f4      	beq.n	260fe <strncpy+0x8>
   26114:	701d      	strb	r5, [r3, #0]
   26116:	3301      	adds	r3, #1
   26118:	e7fa      	b.n	26110 <strncpy+0x1a>
   2611a:	001c      	movs	r4, r3
   2611c:	0032      	movs	r2, r6
   2611e:	e7ec      	b.n	260fa <strncpy+0x4>

00026120 <strrchr>:
   26120:	b570      	push	{r4, r5, r6, lr}
   26122:	000d      	movs	r5, r1
   26124:	2400      	movs	r4, #0
   26126:	2900      	cmp	r1, #0
   26128:	d105      	bne.n	26136 <strrchr+0x16>
   2612a:	f000 ff19 	bl	26f60 <strchr>
   2612e:	0004      	movs	r4, r0
   26130:	e006      	b.n	26140 <strrchr+0x20>
   26132:	001c      	movs	r4, r3
   26134:	1c58      	adds	r0, r3, #1
   26136:	0029      	movs	r1, r5
   26138:	f000 ff12 	bl	26f60 <strchr>
   2613c:	1e03      	subs	r3, r0, #0
   2613e:	d1f8      	bne.n	26132 <strrchr+0x12>
   26140:	0020      	movs	r0, r4
   26142:	bd70      	pop	{r4, r5, r6, pc}

00026144 <strstr>:
   26144:	b510      	push	{r4, lr}
   26146:	0002      	movs	r2, r0
   26148:	7800      	ldrb	r0, [r0, #0]
   2614a:	2800      	cmp	r0, #0
   2614c:	d104      	bne.n	26158 <strstr+0x14>
   2614e:	7809      	ldrb	r1, [r1, #0]
   26150:	2900      	cmp	r1, #0
   26152:	d00d      	beq.n	26170 <strstr+0x2c>
   26154:	bd10      	pop	{r4, pc}
   26156:	3201      	adds	r2, #1
   26158:	7810      	ldrb	r0, [r2, #0]
   2615a:	2800      	cmp	r0, #0
   2615c:	d0fa      	beq.n	26154 <strstr+0x10>
   2615e:	2300      	movs	r3, #0
   26160:	5cc8      	ldrb	r0, [r1, r3]
   26162:	2800      	cmp	r0, #0
   26164:	d004      	beq.n	26170 <strstr+0x2c>
   26166:	5cd4      	ldrb	r4, [r2, r3]
   26168:	4284      	cmp	r4, r0
   2616a:	d1f4      	bne.n	26156 <strstr+0x12>
   2616c:	3301      	adds	r3, #1
   2616e:	e7f7      	b.n	26160 <strstr+0x1c>
   26170:	0010      	movs	r0, r2
   26172:	e7ef      	b.n	26154 <strstr+0x10>

00026174 <_strtol_l.isra.0>:
   26174:	b5f0      	push	{r4, r5, r6, r7, lr}
   26176:	001f      	movs	r7, r3
   26178:	000e      	movs	r6, r1
   2617a:	b087      	sub	sp, #28
   2617c:	9005      	str	r0, [sp, #20]
   2617e:	9103      	str	r1, [sp, #12]
   26180:	9202      	str	r2, [sp, #8]
   26182:	980c      	ldr	r0, [sp, #48]	; 0x30
   26184:	7834      	ldrb	r4, [r6, #0]
   26186:	f000 fb20 	bl	267ca <__locale_ctype_ptr_l>
   2618a:	2208      	movs	r2, #8
   2618c:	1900      	adds	r0, r0, r4
   2618e:	7843      	ldrb	r3, [r0, #1]
   26190:	1c75      	adds	r5, r6, #1
   26192:	4013      	ands	r3, r2
   26194:	d10c      	bne.n	261b0 <_strtol_l.isra.0+0x3c>
   26196:	2c2d      	cmp	r4, #45	; 0x2d
   26198:	d10c      	bne.n	261b4 <_strtol_l.isra.0+0x40>
   2619a:	3301      	adds	r3, #1
   2619c:	782c      	ldrb	r4, [r5, #0]
   2619e:	9301      	str	r3, [sp, #4]
   261a0:	1cb5      	adds	r5, r6, #2
   261a2:	2f00      	cmp	r7, #0
   261a4:	d00c      	beq.n	261c0 <_strtol_l.isra.0+0x4c>
   261a6:	2f10      	cmp	r7, #16
   261a8:	d114      	bne.n	261d4 <_strtol_l.isra.0+0x60>
   261aa:	2c30      	cmp	r4, #48	; 0x30
   261ac:	d00a      	beq.n	261c4 <_strtol_l.isra.0+0x50>
   261ae:	e011      	b.n	261d4 <_strtol_l.isra.0+0x60>
   261b0:	002e      	movs	r6, r5
   261b2:	e7e6      	b.n	26182 <_strtol_l.isra.0+0xe>
   261b4:	9301      	str	r3, [sp, #4]
   261b6:	2c2b      	cmp	r4, #43	; 0x2b
   261b8:	d1f3      	bne.n	261a2 <_strtol_l.isra.0+0x2e>
   261ba:	782c      	ldrb	r4, [r5, #0]
   261bc:	1cb5      	adds	r5, r6, #2
   261be:	e7f0      	b.n	261a2 <_strtol_l.isra.0+0x2e>
   261c0:	2c30      	cmp	r4, #48	; 0x30
   261c2:	d12f      	bne.n	26224 <_strtol_l.isra.0+0xb0>
   261c4:	2220      	movs	r2, #32
   261c6:	782b      	ldrb	r3, [r5, #0]
   261c8:	4393      	bics	r3, r2
   261ca:	2b58      	cmp	r3, #88	; 0x58
   261cc:	d151      	bne.n	26272 <_strtol_l.isra.0+0xfe>
   261ce:	2710      	movs	r7, #16
   261d0:	786c      	ldrb	r4, [r5, #1]
   261d2:	3502      	adds	r5, #2
   261d4:	9b01      	ldr	r3, [sp, #4]
   261d6:	4a29      	ldr	r2, [pc, #164]	; (2627c <_strtol_l.isra.0+0x108>)
   261d8:	0039      	movs	r1, r7
   261da:	189e      	adds	r6, r3, r2
   261dc:	0030      	movs	r0, r6
   261de:	f7fd ffbf 	bl	24160 <__aeabi_uidivmod>
   261e2:	0030      	movs	r0, r6
   261e4:	9104      	str	r1, [sp, #16]
   261e6:	0039      	movs	r1, r7
   261e8:	f7fd ff34 	bl	24054 <__udivsi3>
   261ec:	2101      	movs	r1, #1
   261ee:	2300      	movs	r3, #0
   261f0:	4249      	negs	r1, r1
   261f2:	0002      	movs	r2, r0
   261f4:	468c      	mov	ip, r1
   261f6:	0018      	movs	r0, r3
   261f8:	0021      	movs	r1, r4
   261fa:	3930      	subs	r1, #48	; 0x30
   261fc:	2909      	cmp	r1, #9
   261fe:	d813      	bhi.n	26228 <_strtol_l.isra.0+0xb4>
   26200:	000c      	movs	r4, r1
   26202:	42a7      	cmp	r7, r4
   26204:	dd1c      	ble.n	26240 <_strtol_l.isra.0+0xcc>
   26206:	1c59      	adds	r1, r3, #1
   26208:	d009      	beq.n	2621e <_strtol_l.isra.0+0xaa>
   2620a:	4663      	mov	r3, ip
   2620c:	4282      	cmp	r2, r0
   2620e:	d306      	bcc.n	2621e <_strtol_l.isra.0+0xaa>
   26210:	d102      	bne.n	26218 <_strtol_l.isra.0+0xa4>
   26212:	9904      	ldr	r1, [sp, #16]
   26214:	42a1      	cmp	r1, r4
   26216:	db02      	blt.n	2621e <_strtol_l.isra.0+0xaa>
   26218:	2301      	movs	r3, #1
   2621a:	4378      	muls	r0, r7
   2621c:	1820      	adds	r0, r4, r0
   2621e:	782c      	ldrb	r4, [r5, #0]
   26220:	3501      	adds	r5, #1
   26222:	e7e9      	b.n	261f8 <_strtol_l.isra.0+0x84>
   26224:	270a      	movs	r7, #10
   26226:	e7d5      	b.n	261d4 <_strtol_l.isra.0+0x60>
   26228:	0021      	movs	r1, r4
   2622a:	3941      	subs	r1, #65	; 0x41
   2622c:	2919      	cmp	r1, #25
   2622e:	d801      	bhi.n	26234 <_strtol_l.isra.0+0xc0>
   26230:	3c37      	subs	r4, #55	; 0x37
   26232:	e7e6      	b.n	26202 <_strtol_l.isra.0+0x8e>
   26234:	0021      	movs	r1, r4
   26236:	3961      	subs	r1, #97	; 0x61
   26238:	2919      	cmp	r1, #25
   2623a:	d801      	bhi.n	26240 <_strtol_l.isra.0+0xcc>
   2623c:	3c57      	subs	r4, #87	; 0x57
   2623e:	e7e0      	b.n	26202 <_strtol_l.isra.0+0x8e>
   26240:	1c5a      	adds	r2, r3, #1
   26242:	d108      	bne.n	26256 <_strtol_l.isra.0+0xe2>
   26244:	9a05      	ldr	r2, [sp, #20]
   26246:	3323      	adds	r3, #35	; 0x23
   26248:	6013      	str	r3, [r2, #0]
   2624a:	9b02      	ldr	r3, [sp, #8]
   2624c:	0030      	movs	r0, r6
   2624e:	2b00      	cmp	r3, #0
   26250:	d10b      	bne.n	2626a <_strtol_l.isra.0+0xf6>
   26252:	b007      	add	sp, #28
   26254:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26256:	9a01      	ldr	r2, [sp, #4]
   26258:	2a00      	cmp	r2, #0
   2625a:	d000      	beq.n	2625e <_strtol_l.isra.0+0xea>
   2625c:	4240      	negs	r0, r0
   2625e:	9a02      	ldr	r2, [sp, #8]
   26260:	2a00      	cmp	r2, #0
   26262:	d0f6      	beq.n	26252 <_strtol_l.isra.0+0xde>
   26264:	9a03      	ldr	r2, [sp, #12]
   26266:	2b00      	cmp	r3, #0
   26268:	d000      	beq.n	2626c <_strtol_l.isra.0+0xf8>
   2626a:	1e6a      	subs	r2, r5, #1
   2626c:	9b02      	ldr	r3, [sp, #8]
   2626e:	601a      	str	r2, [r3, #0]
   26270:	e7ef      	b.n	26252 <_strtol_l.isra.0+0xde>
   26272:	2430      	movs	r4, #48	; 0x30
   26274:	2f00      	cmp	r7, #0
   26276:	d1ad      	bne.n	261d4 <_strtol_l.isra.0+0x60>
   26278:	3708      	adds	r7, #8
   2627a:	e7ab      	b.n	261d4 <_strtol_l.isra.0+0x60>
   2627c:	7fffffff 	.word	0x7fffffff

00026280 <strtol>:
   26280:	b537      	push	{r0, r1, r2, r4, r5, lr}
   26282:	0013      	movs	r3, r2
   26284:	4a06      	ldr	r2, [pc, #24]	; (262a0 <strtol+0x20>)
   26286:	0005      	movs	r5, r0
   26288:	6810      	ldr	r0, [r2, #0]
   2628a:	6a04      	ldr	r4, [r0, #32]
   2628c:	2c00      	cmp	r4, #0
   2628e:	d100      	bne.n	26292 <strtol+0x12>
   26290:	4c04      	ldr	r4, [pc, #16]	; (262a4 <strtol+0x24>)
   26292:	000a      	movs	r2, r1
   26294:	9400      	str	r4, [sp, #0]
   26296:	0029      	movs	r1, r5
   26298:	f7ff ff6c 	bl	26174 <_strtol_l.isra.0>
   2629c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   2629e:	46c0      	nop			; (mov r8, r8)
   262a0:	200000e0 	.word	0x200000e0
   262a4:	20000144 	.word	0x20000144

000262a8 <_vsniprintf_r>:
   262a8:	b530      	push	{r4, r5, lr}
   262aa:	0014      	movs	r4, r2
   262ac:	b09b      	sub	sp, #108	; 0x6c
   262ae:	0005      	movs	r5, r0
   262b0:	001a      	movs	r2, r3
   262b2:	2c00      	cmp	r4, #0
   262b4:	da05      	bge.n	262c2 <_vsniprintf_r+0x1a>
   262b6:	238b      	movs	r3, #139	; 0x8b
   262b8:	6003      	str	r3, [r0, #0]
   262ba:	2001      	movs	r0, #1
   262bc:	4240      	negs	r0, r0
   262be:	b01b      	add	sp, #108	; 0x6c
   262c0:	bd30      	pop	{r4, r5, pc}
   262c2:	2382      	movs	r3, #130	; 0x82
   262c4:	4668      	mov	r0, sp
   262c6:	009b      	lsls	r3, r3, #2
   262c8:	8183      	strh	r3, [r0, #12]
   262ca:	2300      	movs	r3, #0
   262cc:	9100      	str	r1, [sp, #0]
   262ce:	9104      	str	r1, [sp, #16]
   262d0:	429c      	cmp	r4, r3
   262d2:	d000      	beq.n	262d6 <_vsniprintf_r+0x2e>
   262d4:	1e63      	subs	r3, r4, #1
   262d6:	9302      	str	r3, [sp, #8]
   262d8:	9305      	str	r3, [sp, #20]
   262da:	2301      	movs	r3, #1
   262dc:	4669      	mov	r1, sp
   262de:	425b      	negs	r3, r3
   262e0:	81cb      	strh	r3, [r1, #14]
   262e2:	0028      	movs	r0, r5
   262e4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   262e6:	f000 fb63 	bl	269b0 <_svfiprintf_r>
   262ea:	1c43      	adds	r3, r0, #1
   262ec:	da01      	bge.n	262f2 <_vsniprintf_r+0x4a>
   262ee:	238b      	movs	r3, #139	; 0x8b
   262f0:	602b      	str	r3, [r5, #0]
   262f2:	2c00      	cmp	r4, #0
   262f4:	d0e3      	beq.n	262be <_vsniprintf_r+0x16>
   262f6:	2300      	movs	r3, #0
   262f8:	9a00      	ldr	r2, [sp, #0]
   262fa:	7013      	strb	r3, [r2, #0]
   262fc:	e7df      	b.n	262be <_vsniprintf_r+0x16>
	...

00026300 <vsniprintf>:
   26300:	b507      	push	{r0, r1, r2, lr}
   26302:	9300      	str	r3, [sp, #0]
   26304:	0013      	movs	r3, r2
   26306:	000a      	movs	r2, r1
   26308:	0001      	movs	r1, r0
   2630a:	4802      	ldr	r0, [pc, #8]	; (26314 <vsniprintf+0x14>)
   2630c:	6800      	ldr	r0, [r0, #0]
   2630e:	f7ff ffcb 	bl	262a8 <_vsniprintf_r>
   26312:	bd0e      	pop	{r1, r2, r3, pc}
   26314:	200000e0 	.word	0x200000e0

00026318 <__swbuf_r>:
   26318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2631a:	0005      	movs	r5, r0
   2631c:	000e      	movs	r6, r1
   2631e:	0014      	movs	r4, r2
   26320:	2800      	cmp	r0, #0
   26322:	d004      	beq.n	2632e <__swbuf_r+0x16>
   26324:	6983      	ldr	r3, [r0, #24]
   26326:	2b00      	cmp	r3, #0
   26328:	d101      	bne.n	2632e <__swbuf_r+0x16>
   2632a:	f000 f9b9 	bl	266a0 <__sinit>
   2632e:	4b22      	ldr	r3, [pc, #136]	; (263b8 <__swbuf_r+0xa0>)
   26330:	429c      	cmp	r4, r3
   26332:	d12d      	bne.n	26390 <__swbuf_r+0x78>
   26334:	686c      	ldr	r4, [r5, #4]
   26336:	69a3      	ldr	r3, [r4, #24]
   26338:	60a3      	str	r3, [r4, #8]
   2633a:	89a3      	ldrh	r3, [r4, #12]
   2633c:	071b      	lsls	r3, r3, #28
   2633e:	d531      	bpl.n	263a4 <__swbuf_r+0x8c>
   26340:	6923      	ldr	r3, [r4, #16]
   26342:	2b00      	cmp	r3, #0
   26344:	d02e      	beq.n	263a4 <__swbuf_r+0x8c>
   26346:	6823      	ldr	r3, [r4, #0]
   26348:	6922      	ldr	r2, [r4, #16]
   2634a:	b2f7      	uxtb	r7, r6
   2634c:	1a98      	subs	r0, r3, r2
   2634e:	6963      	ldr	r3, [r4, #20]
   26350:	b2f6      	uxtb	r6, r6
   26352:	4298      	cmp	r0, r3
   26354:	db05      	blt.n	26362 <__swbuf_r+0x4a>
   26356:	0021      	movs	r1, r4
   26358:	0028      	movs	r0, r5
   2635a:	f000 f933 	bl	265c4 <_fflush_r>
   2635e:	2800      	cmp	r0, #0
   26360:	d126      	bne.n	263b0 <__swbuf_r+0x98>
   26362:	68a3      	ldr	r3, [r4, #8]
   26364:	3001      	adds	r0, #1
   26366:	3b01      	subs	r3, #1
   26368:	60a3      	str	r3, [r4, #8]
   2636a:	6823      	ldr	r3, [r4, #0]
   2636c:	1c5a      	adds	r2, r3, #1
   2636e:	6022      	str	r2, [r4, #0]
   26370:	701f      	strb	r7, [r3, #0]
   26372:	6963      	ldr	r3, [r4, #20]
   26374:	4298      	cmp	r0, r3
   26376:	d004      	beq.n	26382 <__swbuf_r+0x6a>
   26378:	89a3      	ldrh	r3, [r4, #12]
   2637a:	07db      	lsls	r3, r3, #31
   2637c:	d51a      	bpl.n	263b4 <__swbuf_r+0x9c>
   2637e:	2e0a      	cmp	r6, #10
   26380:	d118      	bne.n	263b4 <__swbuf_r+0x9c>
   26382:	0021      	movs	r1, r4
   26384:	0028      	movs	r0, r5
   26386:	f000 f91d 	bl	265c4 <_fflush_r>
   2638a:	2800      	cmp	r0, #0
   2638c:	d012      	beq.n	263b4 <__swbuf_r+0x9c>
   2638e:	e00f      	b.n	263b0 <__swbuf_r+0x98>
   26390:	4b0a      	ldr	r3, [pc, #40]	; (263bc <__swbuf_r+0xa4>)
   26392:	429c      	cmp	r4, r3
   26394:	d101      	bne.n	2639a <__swbuf_r+0x82>
   26396:	68ac      	ldr	r4, [r5, #8]
   26398:	e7cd      	b.n	26336 <__swbuf_r+0x1e>
   2639a:	4b09      	ldr	r3, [pc, #36]	; (263c0 <__swbuf_r+0xa8>)
   2639c:	429c      	cmp	r4, r3
   2639e:	d1ca      	bne.n	26336 <__swbuf_r+0x1e>
   263a0:	68ec      	ldr	r4, [r5, #12]
   263a2:	e7c8      	b.n	26336 <__swbuf_r+0x1e>
   263a4:	0021      	movs	r1, r4
   263a6:	0028      	movs	r0, r5
   263a8:	f000 f80c 	bl	263c4 <__swsetup_r>
   263ac:	2800      	cmp	r0, #0
   263ae:	d0ca      	beq.n	26346 <__swbuf_r+0x2e>
   263b0:	2601      	movs	r6, #1
   263b2:	4276      	negs	r6, r6
   263b4:	0030      	movs	r0, r6
   263b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   263b8:	0002bbd0 	.word	0x0002bbd0
   263bc:	0002bbf0 	.word	0x0002bbf0
   263c0:	0002bbb0 	.word	0x0002bbb0

000263c4 <__swsetup_r>:
   263c4:	4b36      	ldr	r3, [pc, #216]	; (264a0 <__swsetup_r+0xdc>)
   263c6:	b570      	push	{r4, r5, r6, lr}
   263c8:	681d      	ldr	r5, [r3, #0]
   263ca:	0006      	movs	r6, r0
   263cc:	000c      	movs	r4, r1
   263ce:	2d00      	cmp	r5, #0
   263d0:	d005      	beq.n	263de <__swsetup_r+0x1a>
   263d2:	69ab      	ldr	r3, [r5, #24]
   263d4:	2b00      	cmp	r3, #0
   263d6:	d102      	bne.n	263de <__swsetup_r+0x1a>
   263d8:	0028      	movs	r0, r5
   263da:	f000 f961 	bl	266a0 <__sinit>
   263de:	4b31      	ldr	r3, [pc, #196]	; (264a4 <__swsetup_r+0xe0>)
   263e0:	429c      	cmp	r4, r3
   263e2:	d10f      	bne.n	26404 <__swsetup_r+0x40>
   263e4:	686c      	ldr	r4, [r5, #4]
   263e6:	230c      	movs	r3, #12
   263e8:	5ee2      	ldrsh	r2, [r4, r3]
   263ea:	b293      	uxth	r3, r2
   263ec:	0719      	lsls	r1, r3, #28
   263ee:	d42d      	bmi.n	2644c <__swsetup_r+0x88>
   263f0:	06d9      	lsls	r1, r3, #27
   263f2:	d411      	bmi.n	26418 <__swsetup_r+0x54>
   263f4:	2309      	movs	r3, #9
   263f6:	2001      	movs	r0, #1
   263f8:	6033      	str	r3, [r6, #0]
   263fa:	3337      	adds	r3, #55	; 0x37
   263fc:	4313      	orrs	r3, r2
   263fe:	81a3      	strh	r3, [r4, #12]
   26400:	4240      	negs	r0, r0
   26402:	bd70      	pop	{r4, r5, r6, pc}
   26404:	4b28      	ldr	r3, [pc, #160]	; (264a8 <__swsetup_r+0xe4>)
   26406:	429c      	cmp	r4, r3
   26408:	d101      	bne.n	2640e <__swsetup_r+0x4a>
   2640a:	68ac      	ldr	r4, [r5, #8]
   2640c:	e7eb      	b.n	263e6 <__swsetup_r+0x22>
   2640e:	4b27      	ldr	r3, [pc, #156]	; (264ac <__swsetup_r+0xe8>)
   26410:	429c      	cmp	r4, r3
   26412:	d1e8      	bne.n	263e6 <__swsetup_r+0x22>
   26414:	68ec      	ldr	r4, [r5, #12]
   26416:	e7e6      	b.n	263e6 <__swsetup_r+0x22>
   26418:	075b      	lsls	r3, r3, #29
   2641a:	d513      	bpl.n	26444 <__swsetup_r+0x80>
   2641c:	6b61      	ldr	r1, [r4, #52]	; 0x34
   2641e:	2900      	cmp	r1, #0
   26420:	d008      	beq.n	26434 <__swsetup_r+0x70>
   26422:	0023      	movs	r3, r4
   26424:	3344      	adds	r3, #68	; 0x44
   26426:	4299      	cmp	r1, r3
   26428:	d002      	beq.n	26430 <__swsetup_r+0x6c>
   2642a:	0030      	movs	r0, r6
   2642c:	f7ff fc78 	bl	25d20 <_free_r>
   26430:	2300      	movs	r3, #0
   26432:	6363      	str	r3, [r4, #52]	; 0x34
   26434:	2224      	movs	r2, #36	; 0x24
   26436:	89a3      	ldrh	r3, [r4, #12]
   26438:	4393      	bics	r3, r2
   2643a:	81a3      	strh	r3, [r4, #12]
   2643c:	2300      	movs	r3, #0
   2643e:	6063      	str	r3, [r4, #4]
   26440:	6923      	ldr	r3, [r4, #16]
   26442:	6023      	str	r3, [r4, #0]
   26444:	2308      	movs	r3, #8
   26446:	89a2      	ldrh	r2, [r4, #12]
   26448:	4313      	orrs	r3, r2
   2644a:	81a3      	strh	r3, [r4, #12]
   2644c:	6923      	ldr	r3, [r4, #16]
   2644e:	2b00      	cmp	r3, #0
   26450:	d10b      	bne.n	2646a <__swsetup_r+0xa6>
   26452:	21a0      	movs	r1, #160	; 0xa0
   26454:	2280      	movs	r2, #128	; 0x80
   26456:	89a3      	ldrh	r3, [r4, #12]
   26458:	0089      	lsls	r1, r1, #2
   2645a:	0092      	lsls	r2, r2, #2
   2645c:	400b      	ands	r3, r1
   2645e:	4293      	cmp	r3, r2
   26460:	d003      	beq.n	2646a <__swsetup_r+0xa6>
   26462:	0021      	movs	r1, r4
   26464:	0030      	movs	r0, r6
   26466:	f000 f9e9 	bl	2683c <__smakebuf_r>
   2646a:	2301      	movs	r3, #1
   2646c:	89a2      	ldrh	r2, [r4, #12]
   2646e:	4013      	ands	r3, r2
   26470:	d011      	beq.n	26496 <__swsetup_r+0xd2>
   26472:	2300      	movs	r3, #0
   26474:	60a3      	str	r3, [r4, #8]
   26476:	6963      	ldr	r3, [r4, #20]
   26478:	425b      	negs	r3, r3
   2647a:	61a3      	str	r3, [r4, #24]
   2647c:	2000      	movs	r0, #0
   2647e:	6923      	ldr	r3, [r4, #16]
   26480:	4283      	cmp	r3, r0
   26482:	d1be      	bne.n	26402 <__swsetup_r+0x3e>
   26484:	230c      	movs	r3, #12
   26486:	5ee2      	ldrsh	r2, [r4, r3]
   26488:	0613      	lsls	r3, r2, #24
   2648a:	d5ba      	bpl.n	26402 <__swsetup_r+0x3e>
   2648c:	2340      	movs	r3, #64	; 0x40
   2648e:	4313      	orrs	r3, r2
   26490:	81a3      	strh	r3, [r4, #12]
   26492:	3801      	subs	r0, #1
   26494:	e7b5      	b.n	26402 <__swsetup_r+0x3e>
   26496:	0792      	lsls	r2, r2, #30
   26498:	d400      	bmi.n	2649c <__swsetup_r+0xd8>
   2649a:	6963      	ldr	r3, [r4, #20]
   2649c:	60a3      	str	r3, [r4, #8]
   2649e:	e7ed      	b.n	2647c <__swsetup_r+0xb8>
   264a0:	200000e0 	.word	0x200000e0
   264a4:	0002bbd0 	.word	0x0002bbd0
   264a8:	0002bbf0 	.word	0x0002bbf0
   264ac:	0002bbb0 	.word	0x0002bbb0

000264b0 <__sflush_r>:
   264b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   264b2:	898a      	ldrh	r2, [r1, #12]
   264b4:	0005      	movs	r5, r0
   264b6:	000c      	movs	r4, r1
   264b8:	0713      	lsls	r3, r2, #28
   264ba:	d460      	bmi.n	2657e <__sflush_r+0xce>
   264bc:	684b      	ldr	r3, [r1, #4]
   264be:	2b00      	cmp	r3, #0
   264c0:	dc04      	bgt.n	264cc <__sflush_r+0x1c>
   264c2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   264c4:	2b00      	cmp	r3, #0
   264c6:	dc01      	bgt.n	264cc <__sflush_r+0x1c>
   264c8:	2000      	movs	r0, #0
   264ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   264cc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   264ce:	2f00      	cmp	r7, #0
   264d0:	d0fa      	beq.n	264c8 <__sflush_r+0x18>
   264d2:	2300      	movs	r3, #0
   264d4:	682e      	ldr	r6, [r5, #0]
   264d6:	602b      	str	r3, [r5, #0]
   264d8:	2380      	movs	r3, #128	; 0x80
   264da:	015b      	lsls	r3, r3, #5
   264dc:	401a      	ands	r2, r3
   264de:	d034      	beq.n	2654a <__sflush_r+0x9a>
   264e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
   264e2:	89a3      	ldrh	r3, [r4, #12]
   264e4:	075b      	lsls	r3, r3, #29
   264e6:	d506      	bpl.n	264f6 <__sflush_r+0x46>
   264e8:	6863      	ldr	r3, [r4, #4]
   264ea:	1ac0      	subs	r0, r0, r3
   264ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
   264ee:	2b00      	cmp	r3, #0
   264f0:	d001      	beq.n	264f6 <__sflush_r+0x46>
   264f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
   264f4:	1ac0      	subs	r0, r0, r3
   264f6:	0002      	movs	r2, r0
   264f8:	6a21      	ldr	r1, [r4, #32]
   264fa:	2300      	movs	r3, #0
   264fc:	0028      	movs	r0, r5
   264fe:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   26500:	47b8      	blx	r7
   26502:	89a1      	ldrh	r1, [r4, #12]
   26504:	1c43      	adds	r3, r0, #1
   26506:	d106      	bne.n	26516 <__sflush_r+0x66>
   26508:	682b      	ldr	r3, [r5, #0]
   2650a:	2b1d      	cmp	r3, #29
   2650c:	d831      	bhi.n	26572 <__sflush_r+0xc2>
   2650e:	4a2c      	ldr	r2, [pc, #176]	; (265c0 <__sflush_r+0x110>)
   26510:	40da      	lsrs	r2, r3
   26512:	07d3      	lsls	r3, r2, #31
   26514:	d52d      	bpl.n	26572 <__sflush_r+0xc2>
   26516:	2300      	movs	r3, #0
   26518:	6063      	str	r3, [r4, #4]
   2651a:	6923      	ldr	r3, [r4, #16]
   2651c:	6023      	str	r3, [r4, #0]
   2651e:	04cb      	lsls	r3, r1, #19
   26520:	d505      	bpl.n	2652e <__sflush_r+0x7e>
   26522:	1c43      	adds	r3, r0, #1
   26524:	d102      	bne.n	2652c <__sflush_r+0x7c>
   26526:	682b      	ldr	r3, [r5, #0]
   26528:	2b00      	cmp	r3, #0
   2652a:	d100      	bne.n	2652e <__sflush_r+0x7e>
   2652c:	6560      	str	r0, [r4, #84]	; 0x54
   2652e:	6b61      	ldr	r1, [r4, #52]	; 0x34
   26530:	602e      	str	r6, [r5, #0]
   26532:	2900      	cmp	r1, #0
   26534:	d0c8      	beq.n	264c8 <__sflush_r+0x18>
   26536:	0023      	movs	r3, r4
   26538:	3344      	adds	r3, #68	; 0x44
   2653a:	4299      	cmp	r1, r3
   2653c:	d002      	beq.n	26544 <__sflush_r+0x94>
   2653e:	0028      	movs	r0, r5
   26540:	f7ff fbee 	bl	25d20 <_free_r>
   26544:	2000      	movs	r0, #0
   26546:	6360      	str	r0, [r4, #52]	; 0x34
   26548:	e7bf      	b.n	264ca <__sflush_r+0x1a>
   2654a:	2301      	movs	r3, #1
   2654c:	6a21      	ldr	r1, [r4, #32]
   2654e:	0028      	movs	r0, r5
   26550:	47b8      	blx	r7
   26552:	1c43      	adds	r3, r0, #1
   26554:	d1c5      	bne.n	264e2 <__sflush_r+0x32>
   26556:	682b      	ldr	r3, [r5, #0]
   26558:	2b00      	cmp	r3, #0
   2655a:	d0c2      	beq.n	264e2 <__sflush_r+0x32>
   2655c:	2b1d      	cmp	r3, #29
   2655e:	d001      	beq.n	26564 <__sflush_r+0xb4>
   26560:	2b16      	cmp	r3, #22
   26562:	d101      	bne.n	26568 <__sflush_r+0xb8>
   26564:	602e      	str	r6, [r5, #0]
   26566:	e7af      	b.n	264c8 <__sflush_r+0x18>
   26568:	2340      	movs	r3, #64	; 0x40
   2656a:	89a2      	ldrh	r2, [r4, #12]
   2656c:	4313      	orrs	r3, r2
   2656e:	81a3      	strh	r3, [r4, #12]
   26570:	e7ab      	b.n	264ca <__sflush_r+0x1a>
   26572:	2340      	movs	r3, #64	; 0x40
   26574:	430b      	orrs	r3, r1
   26576:	2001      	movs	r0, #1
   26578:	81a3      	strh	r3, [r4, #12]
   2657a:	4240      	negs	r0, r0
   2657c:	e7a5      	b.n	264ca <__sflush_r+0x1a>
   2657e:	690f      	ldr	r7, [r1, #16]
   26580:	2f00      	cmp	r7, #0
   26582:	d0a1      	beq.n	264c8 <__sflush_r+0x18>
   26584:	680b      	ldr	r3, [r1, #0]
   26586:	600f      	str	r7, [r1, #0]
   26588:	1bdb      	subs	r3, r3, r7
   2658a:	9301      	str	r3, [sp, #4]
   2658c:	2300      	movs	r3, #0
   2658e:	0792      	lsls	r2, r2, #30
   26590:	d100      	bne.n	26594 <__sflush_r+0xe4>
   26592:	694b      	ldr	r3, [r1, #20]
   26594:	60a3      	str	r3, [r4, #8]
   26596:	9b01      	ldr	r3, [sp, #4]
   26598:	2b00      	cmp	r3, #0
   2659a:	dc00      	bgt.n	2659e <__sflush_r+0xee>
   2659c:	e794      	b.n	264c8 <__sflush_r+0x18>
   2659e:	9b01      	ldr	r3, [sp, #4]
   265a0:	003a      	movs	r2, r7
   265a2:	6a21      	ldr	r1, [r4, #32]
   265a4:	0028      	movs	r0, r5
   265a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   265a8:	47b0      	blx	r6
   265aa:	2800      	cmp	r0, #0
   265ac:	dc03      	bgt.n	265b6 <__sflush_r+0x106>
   265ae:	2340      	movs	r3, #64	; 0x40
   265b0:	89a2      	ldrh	r2, [r4, #12]
   265b2:	4313      	orrs	r3, r2
   265b4:	e7df      	b.n	26576 <__sflush_r+0xc6>
   265b6:	9b01      	ldr	r3, [sp, #4]
   265b8:	183f      	adds	r7, r7, r0
   265ba:	1a1b      	subs	r3, r3, r0
   265bc:	9301      	str	r3, [sp, #4]
   265be:	e7ea      	b.n	26596 <__sflush_r+0xe6>
   265c0:	20400001 	.word	0x20400001

000265c4 <_fflush_r>:
   265c4:	690b      	ldr	r3, [r1, #16]
   265c6:	b570      	push	{r4, r5, r6, lr}
   265c8:	0005      	movs	r5, r0
   265ca:	000c      	movs	r4, r1
   265cc:	2b00      	cmp	r3, #0
   265ce:	d101      	bne.n	265d4 <_fflush_r+0x10>
   265d0:	2000      	movs	r0, #0
   265d2:	bd70      	pop	{r4, r5, r6, pc}
   265d4:	2800      	cmp	r0, #0
   265d6:	d004      	beq.n	265e2 <_fflush_r+0x1e>
   265d8:	6983      	ldr	r3, [r0, #24]
   265da:	2b00      	cmp	r3, #0
   265dc:	d101      	bne.n	265e2 <_fflush_r+0x1e>
   265de:	f000 f85f 	bl	266a0 <__sinit>
   265e2:	4b0b      	ldr	r3, [pc, #44]	; (26610 <_fflush_r+0x4c>)
   265e4:	429c      	cmp	r4, r3
   265e6:	d109      	bne.n	265fc <_fflush_r+0x38>
   265e8:	686c      	ldr	r4, [r5, #4]
   265ea:	220c      	movs	r2, #12
   265ec:	5ea3      	ldrsh	r3, [r4, r2]
   265ee:	2b00      	cmp	r3, #0
   265f0:	d0ee      	beq.n	265d0 <_fflush_r+0xc>
   265f2:	0021      	movs	r1, r4
   265f4:	0028      	movs	r0, r5
   265f6:	f7ff ff5b 	bl	264b0 <__sflush_r>
   265fa:	e7ea      	b.n	265d2 <_fflush_r+0xe>
   265fc:	4b05      	ldr	r3, [pc, #20]	; (26614 <_fflush_r+0x50>)
   265fe:	429c      	cmp	r4, r3
   26600:	d101      	bne.n	26606 <_fflush_r+0x42>
   26602:	68ac      	ldr	r4, [r5, #8]
   26604:	e7f1      	b.n	265ea <_fflush_r+0x26>
   26606:	4b04      	ldr	r3, [pc, #16]	; (26618 <_fflush_r+0x54>)
   26608:	429c      	cmp	r4, r3
   2660a:	d1ee      	bne.n	265ea <_fflush_r+0x26>
   2660c:	68ec      	ldr	r4, [r5, #12]
   2660e:	e7ec      	b.n	265ea <_fflush_r+0x26>
   26610:	0002bbd0 	.word	0x0002bbd0
   26614:	0002bbf0 	.word	0x0002bbf0
   26618:	0002bbb0 	.word	0x0002bbb0

0002661c <_cleanup_r>:
   2661c:	b510      	push	{r4, lr}
   2661e:	4902      	ldr	r1, [pc, #8]	; (26628 <_cleanup_r+0xc>)
   26620:	f000 f8b2 	bl	26788 <_fwalk_reent>
   26624:	bd10      	pop	{r4, pc}
   26626:	46c0      	nop			; (mov r8, r8)
   26628:	000265c5 	.word	0x000265c5

0002662c <std.isra.0>:
   2662c:	2300      	movs	r3, #0
   2662e:	b510      	push	{r4, lr}
   26630:	0004      	movs	r4, r0
   26632:	6003      	str	r3, [r0, #0]
   26634:	6043      	str	r3, [r0, #4]
   26636:	6083      	str	r3, [r0, #8]
   26638:	8181      	strh	r1, [r0, #12]
   2663a:	6643      	str	r3, [r0, #100]	; 0x64
   2663c:	81c2      	strh	r2, [r0, #14]
   2663e:	6103      	str	r3, [r0, #16]
   26640:	6143      	str	r3, [r0, #20]
   26642:	6183      	str	r3, [r0, #24]
   26644:	0019      	movs	r1, r3
   26646:	2208      	movs	r2, #8
   26648:	305c      	adds	r0, #92	; 0x5c
   2664a:	f7ff fb60 	bl	25d0e <memset>
   2664e:	4b05      	ldr	r3, [pc, #20]	; (26664 <std.isra.0+0x38>)
   26650:	6224      	str	r4, [r4, #32]
   26652:	6263      	str	r3, [r4, #36]	; 0x24
   26654:	4b04      	ldr	r3, [pc, #16]	; (26668 <std.isra.0+0x3c>)
   26656:	62a3      	str	r3, [r4, #40]	; 0x28
   26658:	4b04      	ldr	r3, [pc, #16]	; (2666c <std.isra.0+0x40>)
   2665a:	62e3      	str	r3, [r4, #44]	; 0x2c
   2665c:	4b04      	ldr	r3, [pc, #16]	; (26670 <std.isra.0+0x44>)
   2665e:	6323      	str	r3, [r4, #48]	; 0x30
   26660:	bd10      	pop	{r4, pc}
   26662:	46c0      	nop			; (mov r8, r8)
   26664:	00026ec9 	.word	0x00026ec9
   26668:	00026ef1 	.word	0x00026ef1
   2666c:	00026f29 	.word	0x00026f29
   26670:	00026f55 	.word	0x00026f55

00026674 <__sfmoreglue>:
   26674:	b570      	push	{r4, r5, r6, lr}
   26676:	2568      	movs	r5, #104	; 0x68
   26678:	1e4a      	subs	r2, r1, #1
   2667a:	4355      	muls	r5, r2
   2667c:	000e      	movs	r6, r1
   2667e:	0029      	movs	r1, r5
   26680:	3174      	adds	r1, #116	; 0x74
   26682:	f7ff fb97 	bl	25db4 <_malloc_r>
   26686:	1e04      	subs	r4, r0, #0
   26688:	d008      	beq.n	2669c <__sfmoreglue+0x28>
   2668a:	2100      	movs	r1, #0
   2668c:	002a      	movs	r2, r5
   2668e:	6001      	str	r1, [r0, #0]
   26690:	6046      	str	r6, [r0, #4]
   26692:	300c      	adds	r0, #12
   26694:	60a0      	str	r0, [r4, #8]
   26696:	3268      	adds	r2, #104	; 0x68
   26698:	f7ff fb39 	bl	25d0e <memset>
   2669c:	0020      	movs	r0, r4
   2669e:	bd70      	pop	{r4, r5, r6, pc}

000266a0 <__sinit>:
   266a0:	6983      	ldr	r3, [r0, #24]
   266a2:	b513      	push	{r0, r1, r4, lr}
   266a4:	0004      	movs	r4, r0
   266a6:	2b00      	cmp	r3, #0
   266a8:	d128      	bne.n	266fc <__sinit+0x5c>
   266aa:	6483      	str	r3, [r0, #72]	; 0x48
   266ac:	64c3      	str	r3, [r0, #76]	; 0x4c
   266ae:	6503      	str	r3, [r0, #80]	; 0x50
   266b0:	4b13      	ldr	r3, [pc, #76]	; (26700 <__sinit+0x60>)
   266b2:	4a14      	ldr	r2, [pc, #80]	; (26704 <__sinit+0x64>)
   266b4:	681b      	ldr	r3, [r3, #0]
   266b6:	6282      	str	r2, [r0, #40]	; 0x28
   266b8:	9301      	str	r3, [sp, #4]
   266ba:	4298      	cmp	r0, r3
   266bc:	d101      	bne.n	266c2 <__sinit+0x22>
   266be:	2301      	movs	r3, #1
   266c0:	6183      	str	r3, [r0, #24]
   266c2:	0020      	movs	r0, r4
   266c4:	f000 f820 	bl	26708 <__sfp>
   266c8:	6060      	str	r0, [r4, #4]
   266ca:	0020      	movs	r0, r4
   266cc:	f000 f81c 	bl	26708 <__sfp>
   266d0:	60a0      	str	r0, [r4, #8]
   266d2:	0020      	movs	r0, r4
   266d4:	f000 f818 	bl	26708 <__sfp>
   266d8:	2200      	movs	r2, #0
   266da:	60e0      	str	r0, [r4, #12]
   266dc:	2104      	movs	r1, #4
   266de:	6860      	ldr	r0, [r4, #4]
   266e0:	f7ff ffa4 	bl	2662c <std.isra.0>
   266e4:	2201      	movs	r2, #1
   266e6:	2109      	movs	r1, #9
   266e8:	68a0      	ldr	r0, [r4, #8]
   266ea:	f7ff ff9f 	bl	2662c <std.isra.0>
   266ee:	2202      	movs	r2, #2
   266f0:	2112      	movs	r1, #18
   266f2:	68e0      	ldr	r0, [r4, #12]
   266f4:	f7ff ff9a 	bl	2662c <std.isra.0>
   266f8:	2301      	movs	r3, #1
   266fa:	61a3      	str	r3, [r4, #24]
   266fc:	bd13      	pop	{r0, r1, r4, pc}
   266fe:	46c0      	nop			; (mov r8, r8)
   26700:	0002bbac 	.word	0x0002bbac
   26704:	0002661d 	.word	0x0002661d

00026708 <__sfp>:
   26708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2670a:	4b1e      	ldr	r3, [pc, #120]	; (26784 <__sfp+0x7c>)
   2670c:	0007      	movs	r7, r0
   2670e:	681e      	ldr	r6, [r3, #0]
   26710:	69b3      	ldr	r3, [r6, #24]
   26712:	2b00      	cmp	r3, #0
   26714:	d102      	bne.n	2671c <__sfp+0x14>
   26716:	0030      	movs	r0, r6
   26718:	f7ff ffc2 	bl	266a0 <__sinit>
   2671c:	3648      	adds	r6, #72	; 0x48
   2671e:	68b4      	ldr	r4, [r6, #8]
   26720:	6873      	ldr	r3, [r6, #4]
   26722:	3b01      	subs	r3, #1
   26724:	d504      	bpl.n	26730 <__sfp+0x28>
   26726:	6833      	ldr	r3, [r6, #0]
   26728:	2b00      	cmp	r3, #0
   2672a:	d007      	beq.n	2673c <__sfp+0x34>
   2672c:	6836      	ldr	r6, [r6, #0]
   2672e:	e7f6      	b.n	2671e <__sfp+0x16>
   26730:	220c      	movs	r2, #12
   26732:	5ea5      	ldrsh	r5, [r4, r2]
   26734:	2d00      	cmp	r5, #0
   26736:	d00d      	beq.n	26754 <__sfp+0x4c>
   26738:	3468      	adds	r4, #104	; 0x68
   2673a:	e7f2      	b.n	26722 <__sfp+0x1a>
   2673c:	2104      	movs	r1, #4
   2673e:	0038      	movs	r0, r7
   26740:	f7ff ff98 	bl	26674 <__sfmoreglue>
   26744:	6030      	str	r0, [r6, #0]
   26746:	2800      	cmp	r0, #0
   26748:	d1f0      	bne.n	2672c <__sfp+0x24>
   2674a:	230c      	movs	r3, #12
   2674c:	0004      	movs	r4, r0
   2674e:	603b      	str	r3, [r7, #0]
   26750:	0020      	movs	r0, r4
   26752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26754:	2301      	movs	r3, #1
   26756:	0020      	movs	r0, r4
   26758:	425b      	negs	r3, r3
   2675a:	81e3      	strh	r3, [r4, #14]
   2675c:	3302      	adds	r3, #2
   2675e:	81a3      	strh	r3, [r4, #12]
   26760:	6665      	str	r5, [r4, #100]	; 0x64
   26762:	6025      	str	r5, [r4, #0]
   26764:	60a5      	str	r5, [r4, #8]
   26766:	6065      	str	r5, [r4, #4]
   26768:	6125      	str	r5, [r4, #16]
   2676a:	6165      	str	r5, [r4, #20]
   2676c:	61a5      	str	r5, [r4, #24]
   2676e:	2208      	movs	r2, #8
   26770:	0029      	movs	r1, r5
   26772:	305c      	adds	r0, #92	; 0x5c
   26774:	f7ff facb 	bl	25d0e <memset>
   26778:	6365      	str	r5, [r4, #52]	; 0x34
   2677a:	63a5      	str	r5, [r4, #56]	; 0x38
   2677c:	64a5      	str	r5, [r4, #72]	; 0x48
   2677e:	64e5      	str	r5, [r4, #76]	; 0x4c
   26780:	e7e6      	b.n	26750 <__sfp+0x48>
   26782:	46c0      	nop			; (mov r8, r8)
   26784:	0002bbac 	.word	0x0002bbac

00026788 <_fwalk_reent>:
   26788:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2678a:	0004      	movs	r4, r0
   2678c:	0007      	movs	r7, r0
   2678e:	2600      	movs	r6, #0
   26790:	9101      	str	r1, [sp, #4]
   26792:	3448      	adds	r4, #72	; 0x48
   26794:	2c00      	cmp	r4, #0
   26796:	d101      	bne.n	2679c <_fwalk_reent+0x14>
   26798:	0030      	movs	r0, r6
   2679a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   2679c:	6863      	ldr	r3, [r4, #4]
   2679e:	68a5      	ldr	r5, [r4, #8]
   267a0:	9300      	str	r3, [sp, #0]
   267a2:	9b00      	ldr	r3, [sp, #0]
   267a4:	3b01      	subs	r3, #1
   267a6:	9300      	str	r3, [sp, #0]
   267a8:	d501      	bpl.n	267ae <_fwalk_reent+0x26>
   267aa:	6824      	ldr	r4, [r4, #0]
   267ac:	e7f2      	b.n	26794 <_fwalk_reent+0xc>
   267ae:	89ab      	ldrh	r3, [r5, #12]
   267b0:	2b01      	cmp	r3, #1
   267b2:	d908      	bls.n	267c6 <_fwalk_reent+0x3e>
   267b4:	220e      	movs	r2, #14
   267b6:	5eab      	ldrsh	r3, [r5, r2]
   267b8:	3301      	adds	r3, #1
   267ba:	d004      	beq.n	267c6 <_fwalk_reent+0x3e>
   267bc:	0029      	movs	r1, r5
   267be:	0038      	movs	r0, r7
   267c0:	9b01      	ldr	r3, [sp, #4]
   267c2:	4798      	blx	r3
   267c4:	4306      	orrs	r6, r0
   267c6:	3568      	adds	r5, #104	; 0x68
   267c8:	e7eb      	b.n	267a2 <_fwalk_reent+0x1a>

000267ca <__locale_ctype_ptr_l>:
   267ca:	30ec      	adds	r0, #236	; 0xec
   267cc:	6800      	ldr	r0, [r0, #0]
   267ce:	4770      	bx	lr

000267d0 <__locale_ctype_ptr>:
   267d0:	4b04      	ldr	r3, [pc, #16]	; (267e4 <__locale_ctype_ptr+0x14>)
   267d2:	681b      	ldr	r3, [r3, #0]
   267d4:	6a1b      	ldr	r3, [r3, #32]
   267d6:	2b00      	cmp	r3, #0
   267d8:	d100      	bne.n	267dc <__locale_ctype_ptr+0xc>
   267da:	4b03      	ldr	r3, [pc, #12]	; (267e8 <__locale_ctype_ptr+0x18>)
   267dc:	33ec      	adds	r3, #236	; 0xec
   267de:	6818      	ldr	r0, [r3, #0]
   267e0:	4770      	bx	lr
   267e2:	46c0      	nop			; (mov r8, r8)
   267e4:	200000e0 	.word	0x200000e0
   267e8:	20000144 	.word	0x20000144

000267ec <__swhatbuf_r>:
   267ec:	b570      	push	{r4, r5, r6, lr}
   267ee:	000e      	movs	r6, r1
   267f0:	001d      	movs	r5, r3
   267f2:	230e      	movs	r3, #14
   267f4:	5ec9      	ldrsh	r1, [r1, r3]
   267f6:	b090      	sub	sp, #64	; 0x40
   267f8:	0014      	movs	r4, r2
   267fa:	2900      	cmp	r1, #0
   267fc:	da07      	bge.n	2680e <__swhatbuf_r+0x22>
   267fe:	2300      	movs	r3, #0
   26800:	602b      	str	r3, [r5, #0]
   26802:	89b3      	ldrh	r3, [r6, #12]
   26804:	061b      	lsls	r3, r3, #24
   26806:	d411      	bmi.n	2682c <__swhatbuf_r+0x40>
   26808:	2380      	movs	r3, #128	; 0x80
   2680a:	00db      	lsls	r3, r3, #3
   2680c:	e00f      	b.n	2682e <__swhatbuf_r+0x42>
   2680e:	aa01      	add	r2, sp, #4
   26810:	f000 fbe6 	bl	26fe0 <_fstat_r>
   26814:	2800      	cmp	r0, #0
   26816:	dbf2      	blt.n	267fe <__swhatbuf_r+0x12>
   26818:	22f0      	movs	r2, #240	; 0xf0
   2681a:	9b02      	ldr	r3, [sp, #8]
   2681c:	0212      	lsls	r2, r2, #8
   2681e:	4013      	ands	r3, r2
   26820:	4a05      	ldr	r2, [pc, #20]	; (26838 <__swhatbuf_r+0x4c>)
   26822:	189b      	adds	r3, r3, r2
   26824:	425a      	negs	r2, r3
   26826:	4153      	adcs	r3, r2
   26828:	602b      	str	r3, [r5, #0]
   2682a:	e7ed      	b.n	26808 <__swhatbuf_r+0x1c>
   2682c:	2340      	movs	r3, #64	; 0x40
   2682e:	2000      	movs	r0, #0
   26830:	6023      	str	r3, [r4, #0]
   26832:	b010      	add	sp, #64	; 0x40
   26834:	bd70      	pop	{r4, r5, r6, pc}
   26836:	46c0      	nop			; (mov r8, r8)
   26838:	ffffe000 	.word	0xffffe000

0002683c <__smakebuf_r>:
   2683c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2683e:	2602      	movs	r6, #2
   26840:	898b      	ldrh	r3, [r1, #12]
   26842:	0005      	movs	r5, r0
   26844:	000c      	movs	r4, r1
   26846:	4233      	tst	r3, r6
   26848:	d006      	beq.n	26858 <__smakebuf_r+0x1c>
   2684a:	0023      	movs	r3, r4
   2684c:	3347      	adds	r3, #71	; 0x47
   2684e:	6023      	str	r3, [r4, #0]
   26850:	6123      	str	r3, [r4, #16]
   26852:	2301      	movs	r3, #1
   26854:	6163      	str	r3, [r4, #20]
   26856:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   26858:	ab01      	add	r3, sp, #4
   2685a:	466a      	mov	r2, sp
   2685c:	f7ff ffc6 	bl	267ec <__swhatbuf_r>
   26860:	9900      	ldr	r1, [sp, #0]
   26862:	0007      	movs	r7, r0
   26864:	0028      	movs	r0, r5
   26866:	f7ff faa5 	bl	25db4 <_malloc_r>
   2686a:	2800      	cmp	r0, #0
   2686c:	d108      	bne.n	26880 <__smakebuf_r+0x44>
   2686e:	220c      	movs	r2, #12
   26870:	5ea3      	ldrsh	r3, [r4, r2]
   26872:	059a      	lsls	r2, r3, #22
   26874:	d4ef      	bmi.n	26856 <__smakebuf_r+0x1a>
   26876:	2203      	movs	r2, #3
   26878:	4393      	bics	r3, r2
   2687a:	431e      	orrs	r6, r3
   2687c:	81a6      	strh	r6, [r4, #12]
   2687e:	e7e4      	b.n	2684a <__smakebuf_r+0xe>
   26880:	4b0f      	ldr	r3, [pc, #60]	; (268c0 <__smakebuf_r+0x84>)
   26882:	62ab      	str	r3, [r5, #40]	; 0x28
   26884:	2380      	movs	r3, #128	; 0x80
   26886:	89a2      	ldrh	r2, [r4, #12]
   26888:	6020      	str	r0, [r4, #0]
   2688a:	4313      	orrs	r3, r2
   2688c:	81a3      	strh	r3, [r4, #12]
   2688e:	9b00      	ldr	r3, [sp, #0]
   26890:	6120      	str	r0, [r4, #16]
   26892:	6163      	str	r3, [r4, #20]
   26894:	9b01      	ldr	r3, [sp, #4]
   26896:	2b00      	cmp	r3, #0
   26898:	d00d      	beq.n	268b6 <__smakebuf_r+0x7a>
   2689a:	230e      	movs	r3, #14
   2689c:	5ee1      	ldrsh	r1, [r4, r3]
   2689e:	0028      	movs	r0, r5
   268a0:	f000 fbb0 	bl	27004 <_isatty_r>
   268a4:	2800      	cmp	r0, #0
   268a6:	d006      	beq.n	268b6 <__smakebuf_r+0x7a>
   268a8:	2203      	movs	r2, #3
   268aa:	89a3      	ldrh	r3, [r4, #12]
   268ac:	4393      	bics	r3, r2
   268ae:	001a      	movs	r2, r3
   268b0:	2301      	movs	r3, #1
   268b2:	4313      	orrs	r3, r2
   268b4:	81a3      	strh	r3, [r4, #12]
   268b6:	89a0      	ldrh	r0, [r4, #12]
   268b8:	4338      	orrs	r0, r7
   268ba:	81a0      	strh	r0, [r4, #12]
   268bc:	e7cb      	b.n	26856 <__smakebuf_r+0x1a>
   268be:	46c0      	nop			; (mov r8, r8)
   268c0:	0002661d 	.word	0x0002661d

000268c4 <__ascii_mbtowc>:
   268c4:	b082      	sub	sp, #8
   268c6:	2900      	cmp	r1, #0
   268c8:	d100      	bne.n	268cc <__ascii_mbtowc+0x8>
   268ca:	a901      	add	r1, sp, #4
   268cc:	1e10      	subs	r0, r2, #0
   268ce:	d006      	beq.n	268de <__ascii_mbtowc+0x1a>
   268d0:	2b00      	cmp	r3, #0
   268d2:	d006      	beq.n	268e2 <__ascii_mbtowc+0x1e>
   268d4:	7813      	ldrb	r3, [r2, #0]
   268d6:	600b      	str	r3, [r1, #0]
   268d8:	7810      	ldrb	r0, [r2, #0]
   268da:	1e43      	subs	r3, r0, #1
   268dc:	4198      	sbcs	r0, r3
   268de:	b002      	add	sp, #8
   268e0:	4770      	bx	lr
   268e2:	2002      	movs	r0, #2
   268e4:	4240      	negs	r0, r0
   268e6:	e7fa      	b.n	268de <__ascii_mbtowc+0x1a>

000268e8 <__malloc_lock>:
   268e8:	4770      	bx	lr

000268ea <__malloc_unlock>:
   268ea:	4770      	bx	lr

000268ec <__ssputs_r>:
   268ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   268ee:	688e      	ldr	r6, [r1, #8]
   268f0:	b085      	sub	sp, #20
   268f2:	0007      	movs	r7, r0
   268f4:	000c      	movs	r4, r1
   268f6:	9203      	str	r2, [sp, #12]
   268f8:	9301      	str	r3, [sp, #4]
   268fa:	429e      	cmp	r6, r3
   268fc:	d839      	bhi.n	26972 <__ssputs_r+0x86>
   268fe:	2390      	movs	r3, #144	; 0x90
   26900:	898a      	ldrh	r2, [r1, #12]
   26902:	00db      	lsls	r3, r3, #3
   26904:	421a      	tst	r2, r3
   26906:	d034      	beq.n	26972 <__ssputs_r+0x86>
   26908:	2503      	movs	r5, #3
   2690a:	6909      	ldr	r1, [r1, #16]
   2690c:	6823      	ldr	r3, [r4, #0]
   2690e:	1a5b      	subs	r3, r3, r1
   26910:	9302      	str	r3, [sp, #8]
   26912:	6963      	ldr	r3, [r4, #20]
   26914:	9802      	ldr	r0, [sp, #8]
   26916:	435d      	muls	r5, r3
   26918:	0feb      	lsrs	r3, r5, #31
   2691a:	195d      	adds	r5, r3, r5
   2691c:	9b01      	ldr	r3, [sp, #4]
   2691e:	106d      	asrs	r5, r5, #1
   26920:	3301      	adds	r3, #1
   26922:	181b      	adds	r3, r3, r0
   26924:	42ab      	cmp	r3, r5
   26926:	d900      	bls.n	2692a <__ssputs_r+0x3e>
   26928:	001d      	movs	r5, r3
   2692a:	0553      	lsls	r3, r2, #21
   2692c:	d532      	bpl.n	26994 <__ssputs_r+0xa8>
   2692e:	0029      	movs	r1, r5
   26930:	0038      	movs	r0, r7
   26932:	f7ff fa3f 	bl	25db4 <_malloc_r>
   26936:	1e06      	subs	r6, r0, #0
   26938:	d109      	bne.n	2694e <__ssputs_r+0x62>
   2693a:	230c      	movs	r3, #12
   2693c:	603b      	str	r3, [r7, #0]
   2693e:	2340      	movs	r3, #64	; 0x40
   26940:	2001      	movs	r0, #1
   26942:	89a2      	ldrh	r2, [r4, #12]
   26944:	4240      	negs	r0, r0
   26946:	4313      	orrs	r3, r2
   26948:	81a3      	strh	r3, [r4, #12]
   2694a:	b005      	add	sp, #20
   2694c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2694e:	9a02      	ldr	r2, [sp, #8]
   26950:	6921      	ldr	r1, [r4, #16]
   26952:	f7ff f9c1 	bl	25cd8 <memcpy>
   26956:	89a3      	ldrh	r3, [r4, #12]
   26958:	4a14      	ldr	r2, [pc, #80]	; (269ac <__ssputs_r+0xc0>)
   2695a:	401a      	ands	r2, r3
   2695c:	2380      	movs	r3, #128	; 0x80
   2695e:	4313      	orrs	r3, r2
   26960:	81a3      	strh	r3, [r4, #12]
   26962:	9b02      	ldr	r3, [sp, #8]
   26964:	6126      	str	r6, [r4, #16]
   26966:	18f6      	adds	r6, r6, r3
   26968:	6026      	str	r6, [r4, #0]
   2696a:	6165      	str	r5, [r4, #20]
   2696c:	9e01      	ldr	r6, [sp, #4]
   2696e:	1aed      	subs	r5, r5, r3
   26970:	60a5      	str	r5, [r4, #8]
   26972:	9b01      	ldr	r3, [sp, #4]
   26974:	42b3      	cmp	r3, r6
   26976:	d200      	bcs.n	2697a <__ssputs_r+0x8e>
   26978:	001e      	movs	r6, r3
   2697a:	0032      	movs	r2, r6
   2697c:	9903      	ldr	r1, [sp, #12]
   2697e:	6820      	ldr	r0, [r4, #0]
   26980:	f7ff f9b3 	bl	25cea <memmove>
   26984:	68a3      	ldr	r3, [r4, #8]
   26986:	2000      	movs	r0, #0
   26988:	1b9b      	subs	r3, r3, r6
   2698a:	60a3      	str	r3, [r4, #8]
   2698c:	6823      	ldr	r3, [r4, #0]
   2698e:	199e      	adds	r6, r3, r6
   26990:	6026      	str	r6, [r4, #0]
   26992:	e7da      	b.n	2694a <__ssputs_r+0x5e>
   26994:	002a      	movs	r2, r5
   26996:	0038      	movs	r0, r7
   26998:	f000 fb65 	bl	27066 <_realloc_r>
   2699c:	1e06      	subs	r6, r0, #0
   2699e:	d1e0      	bne.n	26962 <__ssputs_r+0x76>
   269a0:	6921      	ldr	r1, [r4, #16]
   269a2:	0038      	movs	r0, r7
   269a4:	f7ff f9bc 	bl	25d20 <_free_r>
   269a8:	e7c7      	b.n	2693a <__ssputs_r+0x4e>
   269aa:	46c0      	nop			; (mov r8, r8)
   269ac:	fffffb7f 	.word	0xfffffb7f

000269b0 <_svfiprintf_r>:
   269b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   269b2:	b09f      	sub	sp, #124	; 0x7c
   269b4:	9002      	str	r0, [sp, #8]
   269b6:	9305      	str	r3, [sp, #20]
   269b8:	898b      	ldrh	r3, [r1, #12]
   269ba:	000f      	movs	r7, r1
   269bc:	0016      	movs	r6, r2
   269be:	061b      	lsls	r3, r3, #24
   269c0:	d511      	bpl.n	269e6 <_svfiprintf_r+0x36>
   269c2:	690b      	ldr	r3, [r1, #16]
   269c4:	2b00      	cmp	r3, #0
   269c6:	d10e      	bne.n	269e6 <_svfiprintf_r+0x36>
   269c8:	2140      	movs	r1, #64	; 0x40
   269ca:	f7ff f9f3 	bl	25db4 <_malloc_r>
   269ce:	6038      	str	r0, [r7, #0]
   269d0:	6138      	str	r0, [r7, #16]
   269d2:	2800      	cmp	r0, #0
   269d4:	d105      	bne.n	269e2 <_svfiprintf_r+0x32>
   269d6:	230c      	movs	r3, #12
   269d8:	9a02      	ldr	r2, [sp, #8]
   269da:	3801      	subs	r0, #1
   269dc:	6013      	str	r3, [r2, #0]
   269de:	b01f      	add	sp, #124	; 0x7c
   269e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   269e2:	2340      	movs	r3, #64	; 0x40
   269e4:	617b      	str	r3, [r7, #20]
   269e6:	2300      	movs	r3, #0
   269e8:	ad06      	add	r5, sp, #24
   269ea:	616b      	str	r3, [r5, #20]
   269ec:	3320      	adds	r3, #32
   269ee:	766b      	strb	r3, [r5, #25]
   269f0:	3310      	adds	r3, #16
   269f2:	76ab      	strb	r3, [r5, #26]
   269f4:	0034      	movs	r4, r6
   269f6:	7823      	ldrb	r3, [r4, #0]
   269f8:	2b00      	cmp	r3, #0
   269fa:	d147      	bne.n	26a8c <_svfiprintf_r+0xdc>
   269fc:	1ba3      	subs	r3, r4, r6
   269fe:	9304      	str	r3, [sp, #16]
   26a00:	d00d      	beq.n	26a1e <_svfiprintf_r+0x6e>
   26a02:	1ba3      	subs	r3, r4, r6
   26a04:	0032      	movs	r2, r6
   26a06:	0039      	movs	r1, r7
   26a08:	9802      	ldr	r0, [sp, #8]
   26a0a:	f7ff ff6f 	bl	268ec <__ssputs_r>
   26a0e:	1c43      	adds	r3, r0, #1
   26a10:	d100      	bne.n	26a14 <_svfiprintf_r+0x64>
   26a12:	e0b5      	b.n	26b80 <_svfiprintf_r+0x1d0>
   26a14:	696a      	ldr	r2, [r5, #20]
   26a16:	9b04      	ldr	r3, [sp, #16]
   26a18:	4694      	mov	ip, r2
   26a1a:	4463      	add	r3, ip
   26a1c:	616b      	str	r3, [r5, #20]
   26a1e:	7823      	ldrb	r3, [r4, #0]
   26a20:	2b00      	cmp	r3, #0
   26a22:	d100      	bne.n	26a26 <_svfiprintf_r+0x76>
   26a24:	e0ac      	b.n	26b80 <_svfiprintf_r+0x1d0>
   26a26:	2201      	movs	r2, #1
   26a28:	2300      	movs	r3, #0
   26a2a:	4252      	negs	r2, r2
   26a2c:	606a      	str	r2, [r5, #4]
   26a2e:	a902      	add	r1, sp, #8
   26a30:	3254      	adds	r2, #84	; 0x54
   26a32:	1852      	adds	r2, r2, r1
   26a34:	3401      	adds	r4, #1
   26a36:	602b      	str	r3, [r5, #0]
   26a38:	60eb      	str	r3, [r5, #12]
   26a3a:	60ab      	str	r3, [r5, #8]
   26a3c:	7013      	strb	r3, [r2, #0]
   26a3e:	65ab      	str	r3, [r5, #88]	; 0x58
   26a40:	4e58      	ldr	r6, [pc, #352]	; (26ba4 <_svfiprintf_r+0x1f4>)
   26a42:	2205      	movs	r2, #5
   26a44:	7821      	ldrb	r1, [r4, #0]
   26a46:	0030      	movs	r0, r6
   26a48:	f000 fb02 	bl	27050 <memchr>
   26a4c:	1c62      	adds	r2, r4, #1
   26a4e:	2800      	cmp	r0, #0
   26a50:	d120      	bne.n	26a94 <_svfiprintf_r+0xe4>
   26a52:	6829      	ldr	r1, [r5, #0]
   26a54:	06cb      	lsls	r3, r1, #27
   26a56:	d504      	bpl.n	26a62 <_svfiprintf_r+0xb2>
   26a58:	2353      	movs	r3, #83	; 0x53
   26a5a:	ae02      	add	r6, sp, #8
   26a5c:	3020      	adds	r0, #32
   26a5e:	199b      	adds	r3, r3, r6
   26a60:	7018      	strb	r0, [r3, #0]
   26a62:	070b      	lsls	r3, r1, #28
   26a64:	d504      	bpl.n	26a70 <_svfiprintf_r+0xc0>
   26a66:	2353      	movs	r3, #83	; 0x53
   26a68:	202b      	movs	r0, #43	; 0x2b
   26a6a:	ae02      	add	r6, sp, #8
   26a6c:	199b      	adds	r3, r3, r6
   26a6e:	7018      	strb	r0, [r3, #0]
   26a70:	7823      	ldrb	r3, [r4, #0]
   26a72:	2b2a      	cmp	r3, #42	; 0x2a
   26a74:	d016      	beq.n	26aa4 <_svfiprintf_r+0xf4>
   26a76:	2000      	movs	r0, #0
   26a78:	210a      	movs	r1, #10
   26a7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   26a7c:	7822      	ldrb	r2, [r4, #0]
   26a7e:	3a30      	subs	r2, #48	; 0x30
   26a80:	2a09      	cmp	r2, #9
   26a82:	d955      	bls.n	26b30 <_svfiprintf_r+0x180>
   26a84:	2800      	cmp	r0, #0
   26a86:	d015      	beq.n	26ab4 <_svfiprintf_r+0x104>
   26a88:	9309      	str	r3, [sp, #36]	; 0x24
   26a8a:	e013      	b.n	26ab4 <_svfiprintf_r+0x104>
   26a8c:	2b25      	cmp	r3, #37	; 0x25
   26a8e:	d0b5      	beq.n	269fc <_svfiprintf_r+0x4c>
   26a90:	3401      	adds	r4, #1
   26a92:	e7b0      	b.n	269f6 <_svfiprintf_r+0x46>
   26a94:	2301      	movs	r3, #1
   26a96:	1b80      	subs	r0, r0, r6
   26a98:	4083      	lsls	r3, r0
   26a9a:	6829      	ldr	r1, [r5, #0]
   26a9c:	0014      	movs	r4, r2
   26a9e:	430b      	orrs	r3, r1
   26aa0:	602b      	str	r3, [r5, #0]
   26aa2:	e7cd      	b.n	26a40 <_svfiprintf_r+0x90>
   26aa4:	9b05      	ldr	r3, [sp, #20]
   26aa6:	1d18      	adds	r0, r3, #4
   26aa8:	681b      	ldr	r3, [r3, #0]
   26aaa:	9005      	str	r0, [sp, #20]
   26aac:	2b00      	cmp	r3, #0
   26aae:	db39      	blt.n	26b24 <_svfiprintf_r+0x174>
   26ab0:	9309      	str	r3, [sp, #36]	; 0x24
   26ab2:	0014      	movs	r4, r2
   26ab4:	7823      	ldrb	r3, [r4, #0]
   26ab6:	2b2e      	cmp	r3, #46	; 0x2e
   26ab8:	d10b      	bne.n	26ad2 <_svfiprintf_r+0x122>
   26aba:	7863      	ldrb	r3, [r4, #1]
   26abc:	1c62      	adds	r2, r4, #1
   26abe:	2b2a      	cmp	r3, #42	; 0x2a
   26ac0:	d13e      	bne.n	26b40 <_svfiprintf_r+0x190>
   26ac2:	9b05      	ldr	r3, [sp, #20]
   26ac4:	3402      	adds	r4, #2
   26ac6:	1d1a      	adds	r2, r3, #4
   26ac8:	681b      	ldr	r3, [r3, #0]
   26aca:	9205      	str	r2, [sp, #20]
   26acc:	2b00      	cmp	r3, #0
   26ace:	db34      	blt.n	26b3a <_svfiprintf_r+0x18a>
   26ad0:	9307      	str	r3, [sp, #28]
   26ad2:	4e35      	ldr	r6, [pc, #212]	; (26ba8 <_svfiprintf_r+0x1f8>)
   26ad4:	7821      	ldrb	r1, [r4, #0]
   26ad6:	2203      	movs	r2, #3
   26ad8:	0030      	movs	r0, r6
   26ada:	f000 fab9 	bl	27050 <memchr>
   26ade:	2800      	cmp	r0, #0
   26ae0:	d006      	beq.n	26af0 <_svfiprintf_r+0x140>
   26ae2:	2340      	movs	r3, #64	; 0x40
   26ae4:	1b80      	subs	r0, r0, r6
   26ae6:	4083      	lsls	r3, r0
   26ae8:	682a      	ldr	r2, [r5, #0]
   26aea:	3401      	adds	r4, #1
   26aec:	4313      	orrs	r3, r2
   26aee:	602b      	str	r3, [r5, #0]
   26af0:	7821      	ldrb	r1, [r4, #0]
   26af2:	2206      	movs	r2, #6
   26af4:	482d      	ldr	r0, [pc, #180]	; (26bac <_svfiprintf_r+0x1fc>)
   26af6:	1c66      	adds	r6, r4, #1
   26af8:	7629      	strb	r1, [r5, #24]
   26afa:	f000 faa9 	bl	27050 <memchr>
   26afe:	2800      	cmp	r0, #0
   26b00:	d046      	beq.n	26b90 <_svfiprintf_r+0x1e0>
   26b02:	4b2b      	ldr	r3, [pc, #172]	; (26bb0 <_svfiprintf_r+0x200>)
   26b04:	2b00      	cmp	r3, #0
   26b06:	d12f      	bne.n	26b68 <_svfiprintf_r+0x1b8>
   26b08:	6829      	ldr	r1, [r5, #0]
   26b0a:	9b05      	ldr	r3, [sp, #20]
   26b0c:	2207      	movs	r2, #7
   26b0e:	05c9      	lsls	r1, r1, #23
   26b10:	d528      	bpl.n	26b64 <_svfiprintf_r+0x1b4>
   26b12:	189b      	adds	r3, r3, r2
   26b14:	4393      	bics	r3, r2
   26b16:	3308      	adds	r3, #8
   26b18:	9305      	str	r3, [sp, #20]
   26b1a:	696b      	ldr	r3, [r5, #20]
   26b1c:	9a03      	ldr	r2, [sp, #12]
   26b1e:	189b      	adds	r3, r3, r2
   26b20:	616b      	str	r3, [r5, #20]
   26b22:	e767      	b.n	269f4 <_svfiprintf_r+0x44>
   26b24:	425b      	negs	r3, r3
   26b26:	60eb      	str	r3, [r5, #12]
   26b28:	2302      	movs	r3, #2
   26b2a:	430b      	orrs	r3, r1
   26b2c:	602b      	str	r3, [r5, #0]
   26b2e:	e7c0      	b.n	26ab2 <_svfiprintf_r+0x102>
   26b30:	434b      	muls	r3, r1
   26b32:	3401      	adds	r4, #1
   26b34:	189b      	adds	r3, r3, r2
   26b36:	2001      	movs	r0, #1
   26b38:	e7a0      	b.n	26a7c <_svfiprintf_r+0xcc>
   26b3a:	2301      	movs	r3, #1
   26b3c:	425b      	negs	r3, r3
   26b3e:	e7c7      	b.n	26ad0 <_svfiprintf_r+0x120>
   26b40:	2300      	movs	r3, #0
   26b42:	0014      	movs	r4, r2
   26b44:	200a      	movs	r0, #10
   26b46:	001a      	movs	r2, r3
   26b48:	606b      	str	r3, [r5, #4]
   26b4a:	7821      	ldrb	r1, [r4, #0]
   26b4c:	3930      	subs	r1, #48	; 0x30
   26b4e:	2909      	cmp	r1, #9
   26b50:	d903      	bls.n	26b5a <_svfiprintf_r+0x1aa>
   26b52:	2b00      	cmp	r3, #0
   26b54:	d0bd      	beq.n	26ad2 <_svfiprintf_r+0x122>
   26b56:	9207      	str	r2, [sp, #28]
   26b58:	e7bb      	b.n	26ad2 <_svfiprintf_r+0x122>
   26b5a:	4342      	muls	r2, r0
   26b5c:	3401      	adds	r4, #1
   26b5e:	1852      	adds	r2, r2, r1
   26b60:	2301      	movs	r3, #1
   26b62:	e7f2      	b.n	26b4a <_svfiprintf_r+0x19a>
   26b64:	3307      	adds	r3, #7
   26b66:	e7d5      	b.n	26b14 <_svfiprintf_r+0x164>
   26b68:	ab05      	add	r3, sp, #20
   26b6a:	9300      	str	r3, [sp, #0]
   26b6c:	003a      	movs	r2, r7
   26b6e:	4b11      	ldr	r3, [pc, #68]	; (26bb4 <_svfiprintf_r+0x204>)
   26b70:	0029      	movs	r1, r5
   26b72:	9802      	ldr	r0, [sp, #8]
   26b74:	e000      	b.n	26b78 <_svfiprintf_r+0x1c8>
   26b76:	bf00      	nop
   26b78:	9003      	str	r0, [sp, #12]
   26b7a:	9b03      	ldr	r3, [sp, #12]
   26b7c:	3301      	adds	r3, #1
   26b7e:	d1cc      	bne.n	26b1a <_svfiprintf_r+0x16a>
   26b80:	89bb      	ldrh	r3, [r7, #12]
   26b82:	980b      	ldr	r0, [sp, #44]	; 0x2c
   26b84:	065b      	lsls	r3, r3, #25
   26b86:	d400      	bmi.n	26b8a <_svfiprintf_r+0x1da>
   26b88:	e729      	b.n	269de <_svfiprintf_r+0x2e>
   26b8a:	2001      	movs	r0, #1
   26b8c:	4240      	negs	r0, r0
   26b8e:	e726      	b.n	269de <_svfiprintf_r+0x2e>
   26b90:	ab05      	add	r3, sp, #20
   26b92:	9300      	str	r3, [sp, #0]
   26b94:	003a      	movs	r2, r7
   26b96:	4b07      	ldr	r3, [pc, #28]	; (26bb4 <_svfiprintf_r+0x204>)
   26b98:	0029      	movs	r1, r5
   26b9a:	9802      	ldr	r0, [sp, #8]
   26b9c:	f000 f87a 	bl	26c94 <_printf_i>
   26ba0:	e7ea      	b.n	26b78 <_svfiprintf_r+0x1c8>
   26ba2:	46c0      	nop			; (mov r8, r8)
   26ba4:	0002bc1a 	.word	0x0002bc1a
   26ba8:	0002bc20 	.word	0x0002bc20
   26bac:	0002bc24 	.word	0x0002bc24
   26bb0:	00000000 	.word	0x00000000
   26bb4:	000268ed 	.word	0x000268ed

00026bb8 <_printf_common>:
   26bb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   26bba:	0015      	movs	r5, r2
   26bbc:	9301      	str	r3, [sp, #4]
   26bbe:	688a      	ldr	r2, [r1, #8]
   26bc0:	690b      	ldr	r3, [r1, #16]
   26bc2:	9000      	str	r0, [sp, #0]
   26bc4:	000c      	movs	r4, r1
   26bc6:	4293      	cmp	r3, r2
   26bc8:	da00      	bge.n	26bcc <_printf_common+0x14>
   26bca:	0013      	movs	r3, r2
   26bcc:	0022      	movs	r2, r4
   26bce:	602b      	str	r3, [r5, #0]
   26bd0:	3243      	adds	r2, #67	; 0x43
   26bd2:	7812      	ldrb	r2, [r2, #0]
   26bd4:	2a00      	cmp	r2, #0
   26bd6:	d001      	beq.n	26bdc <_printf_common+0x24>
   26bd8:	3301      	adds	r3, #1
   26bda:	602b      	str	r3, [r5, #0]
   26bdc:	6823      	ldr	r3, [r4, #0]
   26bde:	069b      	lsls	r3, r3, #26
   26be0:	d502      	bpl.n	26be8 <_printf_common+0x30>
   26be2:	682b      	ldr	r3, [r5, #0]
   26be4:	3302      	adds	r3, #2
   26be6:	602b      	str	r3, [r5, #0]
   26be8:	2706      	movs	r7, #6
   26bea:	6823      	ldr	r3, [r4, #0]
   26bec:	401f      	ands	r7, r3
   26bee:	d027      	beq.n	26c40 <_printf_common+0x88>
   26bf0:	0023      	movs	r3, r4
   26bf2:	3343      	adds	r3, #67	; 0x43
   26bf4:	781b      	ldrb	r3, [r3, #0]
   26bf6:	1e5a      	subs	r2, r3, #1
   26bf8:	4193      	sbcs	r3, r2
   26bfa:	6822      	ldr	r2, [r4, #0]
   26bfc:	0692      	lsls	r2, r2, #26
   26bfe:	d430      	bmi.n	26c62 <_printf_common+0xaa>
   26c00:	0022      	movs	r2, r4
   26c02:	9901      	ldr	r1, [sp, #4]
   26c04:	3243      	adds	r2, #67	; 0x43
   26c06:	9800      	ldr	r0, [sp, #0]
   26c08:	9e08      	ldr	r6, [sp, #32]
   26c0a:	47b0      	blx	r6
   26c0c:	1c43      	adds	r3, r0, #1
   26c0e:	d025      	beq.n	26c5c <_printf_common+0xa4>
   26c10:	2306      	movs	r3, #6
   26c12:	6820      	ldr	r0, [r4, #0]
   26c14:	682a      	ldr	r2, [r5, #0]
   26c16:	68e1      	ldr	r1, [r4, #12]
   26c18:	4003      	ands	r3, r0
   26c1a:	2500      	movs	r5, #0
   26c1c:	2b04      	cmp	r3, #4
   26c1e:	d103      	bne.n	26c28 <_printf_common+0x70>
   26c20:	1a8d      	subs	r5, r1, r2
   26c22:	43eb      	mvns	r3, r5
   26c24:	17db      	asrs	r3, r3, #31
   26c26:	401d      	ands	r5, r3
   26c28:	68a3      	ldr	r3, [r4, #8]
   26c2a:	6922      	ldr	r2, [r4, #16]
   26c2c:	4293      	cmp	r3, r2
   26c2e:	dd01      	ble.n	26c34 <_printf_common+0x7c>
   26c30:	1a9b      	subs	r3, r3, r2
   26c32:	18ed      	adds	r5, r5, r3
   26c34:	2700      	movs	r7, #0
   26c36:	42bd      	cmp	r5, r7
   26c38:	d120      	bne.n	26c7c <_printf_common+0xc4>
   26c3a:	2000      	movs	r0, #0
   26c3c:	e010      	b.n	26c60 <_printf_common+0xa8>
   26c3e:	3701      	adds	r7, #1
   26c40:	68e3      	ldr	r3, [r4, #12]
   26c42:	682a      	ldr	r2, [r5, #0]
   26c44:	1a9b      	subs	r3, r3, r2
   26c46:	429f      	cmp	r7, r3
   26c48:	dad2      	bge.n	26bf0 <_printf_common+0x38>
   26c4a:	0022      	movs	r2, r4
   26c4c:	2301      	movs	r3, #1
   26c4e:	3219      	adds	r2, #25
   26c50:	9901      	ldr	r1, [sp, #4]
   26c52:	9800      	ldr	r0, [sp, #0]
   26c54:	9e08      	ldr	r6, [sp, #32]
   26c56:	47b0      	blx	r6
   26c58:	1c43      	adds	r3, r0, #1
   26c5a:	d1f0      	bne.n	26c3e <_printf_common+0x86>
   26c5c:	2001      	movs	r0, #1
   26c5e:	4240      	negs	r0, r0
   26c60:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   26c62:	2030      	movs	r0, #48	; 0x30
   26c64:	18e1      	adds	r1, r4, r3
   26c66:	3143      	adds	r1, #67	; 0x43
   26c68:	7008      	strb	r0, [r1, #0]
   26c6a:	0021      	movs	r1, r4
   26c6c:	1c5a      	adds	r2, r3, #1
   26c6e:	3145      	adds	r1, #69	; 0x45
   26c70:	7809      	ldrb	r1, [r1, #0]
   26c72:	18a2      	adds	r2, r4, r2
   26c74:	3243      	adds	r2, #67	; 0x43
   26c76:	3302      	adds	r3, #2
   26c78:	7011      	strb	r1, [r2, #0]
   26c7a:	e7c1      	b.n	26c00 <_printf_common+0x48>
   26c7c:	0022      	movs	r2, r4
   26c7e:	2301      	movs	r3, #1
   26c80:	321a      	adds	r2, #26
   26c82:	9901      	ldr	r1, [sp, #4]
   26c84:	9800      	ldr	r0, [sp, #0]
   26c86:	9e08      	ldr	r6, [sp, #32]
   26c88:	47b0      	blx	r6
   26c8a:	1c43      	adds	r3, r0, #1
   26c8c:	d0e6      	beq.n	26c5c <_printf_common+0xa4>
   26c8e:	3701      	adds	r7, #1
   26c90:	e7d1      	b.n	26c36 <_printf_common+0x7e>
	...

00026c94 <_printf_i>:
   26c94:	b5f0      	push	{r4, r5, r6, r7, lr}
   26c96:	b08b      	sub	sp, #44	; 0x2c
   26c98:	9206      	str	r2, [sp, #24]
   26c9a:	000a      	movs	r2, r1
   26c9c:	3243      	adds	r2, #67	; 0x43
   26c9e:	9307      	str	r3, [sp, #28]
   26ca0:	9005      	str	r0, [sp, #20]
   26ca2:	9204      	str	r2, [sp, #16]
   26ca4:	7e0a      	ldrb	r2, [r1, #24]
   26ca6:	000c      	movs	r4, r1
   26ca8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   26caa:	2a6e      	cmp	r2, #110	; 0x6e
   26cac:	d100      	bne.n	26cb0 <_printf_i+0x1c>
   26cae:	e08f      	b.n	26dd0 <_printf_i+0x13c>
   26cb0:	d817      	bhi.n	26ce2 <_printf_i+0x4e>
   26cb2:	2a63      	cmp	r2, #99	; 0x63
   26cb4:	d02c      	beq.n	26d10 <_printf_i+0x7c>
   26cb6:	d808      	bhi.n	26cca <_printf_i+0x36>
   26cb8:	2a00      	cmp	r2, #0
   26cba:	d100      	bne.n	26cbe <_printf_i+0x2a>
   26cbc:	e099      	b.n	26df2 <_printf_i+0x15e>
   26cbe:	2a58      	cmp	r2, #88	; 0x58
   26cc0:	d054      	beq.n	26d6c <_printf_i+0xd8>
   26cc2:	0026      	movs	r6, r4
   26cc4:	3642      	adds	r6, #66	; 0x42
   26cc6:	7032      	strb	r2, [r6, #0]
   26cc8:	e029      	b.n	26d1e <_printf_i+0x8a>
   26cca:	2a64      	cmp	r2, #100	; 0x64
   26ccc:	d001      	beq.n	26cd2 <_printf_i+0x3e>
   26cce:	2a69      	cmp	r2, #105	; 0x69
   26cd0:	d1f7      	bne.n	26cc2 <_printf_i+0x2e>
   26cd2:	6821      	ldr	r1, [r4, #0]
   26cd4:	681a      	ldr	r2, [r3, #0]
   26cd6:	0608      	lsls	r0, r1, #24
   26cd8:	d523      	bpl.n	26d22 <_printf_i+0x8e>
   26cda:	1d11      	adds	r1, r2, #4
   26cdc:	6019      	str	r1, [r3, #0]
   26cde:	6815      	ldr	r5, [r2, #0]
   26ce0:	e025      	b.n	26d2e <_printf_i+0x9a>
   26ce2:	2a73      	cmp	r2, #115	; 0x73
   26ce4:	d100      	bne.n	26ce8 <_printf_i+0x54>
   26ce6:	e088      	b.n	26dfa <_printf_i+0x166>
   26ce8:	d808      	bhi.n	26cfc <_printf_i+0x68>
   26cea:	2a6f      	cmp	r2, #111	; 0x6f
   26cec:	d029      	beq.n	26d42 <_printf_i+0xae>
   26cee:	2a70      	cmp	r2, #112	; 0x70
   26cf0:	d1e7      	bne.n	26cc2 <_printf_i+0x2e>
   26cf2:	2220      	movs	r2, #32
   26cf4:	6809      	ldr	r1, [r1, #0]
   26cf6:	430a      	orrs	r2, r1
   26cf8:	6022      	str	r2, [r4, #0]
   26cfa:	e003      	b.n	26d04 <_printf_i+0x70>
   26cfc:	2a75      	cmp	r2, #117	; 0x75
   26cfe:	d020      	beq.n	26d42 <_printf_i+0xae>
   26d00:	2a78      	cmp	r2, #120	; 0x78
   26d02:	d1de      	bne.n	26cc2 <_printf_i+0x2e>
   26d04:	0022      	movs	r2, r4
   26d06:	2178      	movs	r1, #120	; 0x78
   26d08:	3245      	adds	r2, #69	; 0x45
   26d0a:	7011      	strb	r1, [r2, #0]
   26d0c:	4a6c      	ldr	r2, [pc, #432]	; (26ec0 <_printf_i+0x22c>)
   26d0e:	e030      	b.n	26d72 <_printf_i+0xde>
   26d10:	000e      	movs	r6, r1
   26d12:	681a      	ldr	r2, [r3, #0]
   26d14:	3642      	adds	r6, #66	; 0x42
   26d16:	1d11      	adds	r1, r2, #4
   26d18:	6019      	str	r1, [r3, #0]
   26d1a:	6813      	ldr	r3, [r2, #0]
   26d1c:	7033      	strb	r3, [r6, #0]
   26d1e:	2301      	movs	r3, #1
   26d20:	e079      	b.n	26e16 <_printf_i+0x182>
   26d22:	0649      	lsls	r1, r1, #25
   26d24:	d5d9      	bpl.n	26cda <_printf_i+0x46>
   26d26:	1d11      	adds	r1, r2, #4
   26d28:	6019      	str	r1, [r3, #0]
   26d2a:	2300      	movs	r3, #0
   26d2c:	5ed5      	ldrsh	r5, [r2, r3]
   26d2e:	2d00      	cmp	r5, #0
   26d30:	da03      	bge.n	26d3a <_printf_i+0xa6>
   26d32:	232d      	movs	r3, #45	; 0x2d
   26d34:	9a04      	ldr	r2, [sp, #16]
   26d36:	426d      	negs	r5, r5
   26d38:	7013      	strb	r3, [r2, #0]
   26d3a:	4b62      	ldr	r3, [pc, #392]	; (26ec4 <_printf_i+0x230>)
   26d3c:	270a      	movs	r7, #10
   26d3e:	9303      	str	r3, [sp, #12]
   26d40:	e02f      	b.n	26da2 <_printf_i+0x10e>
   26d42:	6820      	ldr	r0, [r4, #0]
   26d44:	6819      	ldr	r1, [r3, #0]
   26d46:	0605      	lsls	r5, r0, #24
   26d48:	d503      	bpl.n	26d52 <_printf_i+0xbe>
   26d4a:	1d08      	adds	r0, r1, #4
   26d4c:	6018      	str	r0, [r3, #0]
   26d4e:	680d      	ldr	r5, [r1, #0]
   26d50:	e005      	b.n	26d5e <_printf_i+0xca>
   26d52:	0640      	lsls	r0, r0, #25
   26d54:	d5f9      	bpl.n	26d4a <_printf_i+0xb6>
   26d56:	680d      	ldr	r5, [r1, #0]
   26d58:	1d08      	adds	r0, r1, #4
   26d5a:	6018      	str	r0, [r3, #0]
   26d5c:	b2ad      	uxth	r5, r5
   26d5e:	4b59      	ldr	r3, [pc, #356]	; (26ec4 <_printf_i+0x230>)
   26d60:	2708      	movs	r7, #8
   26d62:	9303      	str	r3, [sp, #12]
   26d64:	2a6f      	cmp	r2, #111	; 0x6f
   26d66:	d018      	beq.n	26d9a <_printf_i+0x106>
   26d68:	270a      	movs	r7, #10
   26d6a:	e016      	b.n	26d9a <_printf_i+0x106>
   26d6c:	3145      	adds	r1, #69	; 0x45
   26d6e:	700a      	strb	r2, [r1, #0]
   26d70:	4a54      	ldr	r2, [pc, #336]	; (26ec4 <_printf_i+0x230>)
   26d72:	9203      	str	r2, [sp, #12]
   26d74:	681a      	ldr	r2, [r3, #0]
   26d76:	6821      	ldr	r1, [r4, #0]
   26d78:	1d10      	adds	r0, r2, #4
   26d7a:	6018      	str	r0, [r3, #0]
   26d7c:	6815      	ldr	r5, [r2, #0]
   26d7e:	0608      	lsls	r0, r1, #24
   26d80:	d522      	bpl.n	26dc8 <_printf_i+0x134>
   26d82:	07cb      	lsls	r3, r1, #31
   26d84:	d502      	bpl.n	26d8c <_printf_i+0xf8>
   26d86:	2320      	movs	r3, #32
   26d88:	4319      	orrs	r1, r3
   26d8a:	6021      	str	r1, [r4, #0]
   26d8c:	2710      	movs	r7, #16
   26d8e:	2d00      	cmp	r5, #0
   26d90:	d103      	bne.n	26d9a <_printf_i+0x106>
   26d92:	2320      	movs	r3, #32
   26d94:	6822      	ldr	r2, [r4, #0]
   26d96:	439a      	bics	r2, r3
   26d98:	6022      	str	r2, [r4, #0]
   26d9a:	0023      	movs	r3, r4
   26d9c:	2200      	movs	r2, #0
   26d9e:	3343      	adds	r3, #67	; 0x43
   26da0:	701a      	strb	r2, [r3, #0]
   26da2:	6863      	ldr	r3, [r4, #4]
   26da4:	60a3      	str	r3, [r4, #8]
   26da6:	2b00      	cmp	r3, #0
   26da8:	db5c      	blt.n	26e64 <_printf_i+0x1d0>
   26daa:	2204      	movs	r2, #4
   26dac:	6821      	ldr	r1, [r4, #0]
   26dae:	4391      	bics	r1, r2
   26db0:	6021      	str	r1, [r4, #0]
   26db2:	2d00      	cmp	r5, #0
   26db4:	d158      	bne.n	26e68 <_printf_i+0x1d4>
   26db6:	9e04      	ldr	r6, [sp, #16]
   26db8:	2b00      	cmp	r3, #0
   26dba:	d064      	beq.n	26e86 <_printf_i+0x1f2>
   26dbc:	0026      	movs	r6, r4
   26dbe:	9b03      	ldr	r3, [sp, #12]
   26dc0:	3642      	adds	r6, #66	; 0x42
   26dc2:	781b      	ldrb	r3, [r3, #0]
   26dc4:	7033      	strb	r3, [r6, #0]
   26dc6:	e05e      	b.n	26e86 <_printf_i+0x1f2>
   26dc8:	0648      	lsls	r0, r1, #25
   26dca:	d5da      	bpl.n	26d82 <_printf_i+0xee>
   26dcc:	b2ad      	uxth	r5, r5
   26dce:	e7d8      	b.n	26d82 <_printf_i+0xee>
   26dd0:	6809      	ldr	r1, [r1, #0]
   26dd2:	681a      	ldr	r2, [r3, #0]
   26dd4:	0608      	lsls	r0, r1, #24
   26dd6:	d505      	bpl.n	26de4 <_printf_i+0x150>
   26dd8:	1d11      	adds	r1, r2, #4
   26dda:	6019      	str	r1, [r3, #0]
   26ddc:	6813      	ldr	r3, [r2, #0]
   26dde:	6962      	ldr	r2, [r4, #20]
   26de0:	601a      	str	r2, [r3, #0]
   26de2:	e006      	b.n	26df2 <_printf_i+0x15e>
   26de4:	0649      	lsls	r1, r1, #25
   26de6:	d5f7      	bpl.n	26dd8 <_printf_i+0x144>
   26de8:	1d11      	adds	r1, r2, #4
   26dea:	6019      	str	r1, [r3, #0]
   26dec:	6813      	ldr	r3, [r2, #0]
   26dee:	8aa2      	ldrh	r2, [r4, #20]
   26df0:	801a      	strh	r2, [r3, #0]
   26df2:	2300      	movs	r3, #0
   26df4:	9e04      	ldr	r6, [sp, #16]
   26df6:	6123      	str	r3, [r4, #16]
   26df8:	e054      	b.n	26ea4 <_printf_i+0x210>
   26dfa:	681a      	ldr	r2, [r3, #0]
   26dfc:	1d11      	adds	r1, r2, #4
   26dfe:	6019      	str	r1, [r3, #0]
   26e00:	6816      	ldr	r6, [r2, #0]
   26e02:	2100      	movs	r1, #0
   26e04:	6862      	ldr	r2, [r4, #4]
   26e06:	0030      	movs	r0, r6
   26e08:	f000 f922 	bl	27050 <memchr>
   26e0c:	2800      	cmp	r0, #0
   26e0e:	d001      	beq.n	26e14 <_printf_i+0x180>
   26e10:	1b80      	subs	r0, r0, r6
   26e12:	6060      	str	r0, [r4, #4]
   26e14:	6863      	ldr	r3, [r4, #4]
   26e16:	6123      	str	r3, [r4, #16]
   26e18:	2300      	movs	r3, #0
   26e1a:	9a04      	ldr	r2, [sp, #16]
   26e1c:	7013      	strb	r3, [r2, #0]
   26e1e:	e041      	b.n	26ea4 <_printf_i+0x210>
   26e20:	6923      	ldr	r3, [r4, #16]
   26e22:	0032      	movs	r2, r6
   26e24:	9906      	ldr	r1, [sp, #24]
   26e26:	9805      	ldr	r0, [sp, #20]
   26e28:	9d07      	ldr	r5, [sp, #28]
   26e2a:	47a8      	blx	r5
   26e2c:	1c43      	adds	r3, r0, #1
   26e2e:	d043      	beq.n	26eb8 <_printf_i+0x224>
   26e30:	6823      	ldr	r3, [r4, #0]
   26e32:	2500      	movs	r5, #0
   26e34:	079b      	lsls	r3, r3, #30
   26e36:	d40f      	bmi.n	26e58 <_printf_i+0x1c4>
   26e38:	9b09      	ldr	r3, [sp, #36]	; 0x24
   26e3a:	68e0      	ldr	r0, [r4, #12]
   26e3c:	4298      	cmp	r0, r3
   26e3e:	da3d      	bge.n	26ebc <_printf_i+0x228>
   26e40:	0018      	movs	r0, r3
   26e42:	e03b      	b.n	26ebc <_printf_i+0x228>
   26e44:	0022      	movs	r2, r4
   26e46:	2301      	movs	r3, #1
   26e48:	3219      	adds	r2, #25
   26e4a:	9906      	ldr	r1, [sp, #24]
   26e4c:	9805      	ldr	r0, [sp, #20]
   26e4e:	9e07      	ldr	r6, [sp, #28]
   26e50:	47b0      	blx	r6
   26e52:	1c43      	adds	r3, r0, #1
   26e54:	d030      	beq.n	26eb8 <_printf_i+0x224>
   26e56:	3501      	adds	r5, #1
   26e58:	68e3      	ldr	r3, [r4, #12]
   26e5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   26e5c:	1a9b      	subs	r3, r3, r2
   26e5e:	429d      	cmp	r5, r3
   26e60:	dbf0      	blt.n	26e44 <_printf_i+0x1b0>
   26e62:	e7e9      	b.n	26e38 <_printf_i+0x1a4>
   26e64:	2d00      	cmp	r5, #0
   26e66:	d0a9      	beq.n	26dbc <_printf_i+0x128>
   26e68:	9e04      	ldr	r6, [sp, #16]
   26e6a:	0028      	movs	r0, r5
   26e6c:	0039      	movs	r1, r7
   26e6e:	f7fd f977 	bl	24160 <__aeabi_uidivmod>
   26e72:	9b03      	ldr	r3, [sp, #12]
   26e74:	3e01      	subs	r6, #1
   26e76:	5c5b      	ldrb	r3, [r3, r1]
   26e78:	0028      	movs	r0, r5
   26e7a:	7033      	strb	r3, [r6, #0]
   26e7c:	0039      	movs	r1, r7
   26e7e:	f7fd f8e9 	bl	24054 <__udivsi3>
   26e82:	1e05      	subs	r5, r0, #0
   26e84:	d1f1      	bne.n	26e6a <_printf_i+0x1d6>
   26e86:	2f08      	cmp	r7, #8
   26e88:	d109      	bne.n	26e9e <_printf_i+0x20a>
   26e8a:	6823      	ldr	r3, [r4, #0]
   26e8c:	07db      	lsls	r3, r3, #31
   26e8e:	d506      	bpl.n	26e9e <_printf_i+0x20a>
   26e90:	6863      	ldr	r3, [r4, #4]
   26e92:	6922      	ldr	r2, [r4, #16]
   26e94:	4293      	cmp	r3, r2
   26e96:	dc02      	bgt.n	26e9e <_printf_i+0x20a>
   26e98:	2330      	movs	r3, #48	; 0x30
   26e9a:	3e01      	subs	r6, #1
   26e9c:	7033      	strb	r3, [r6, #0]
   26e9e:	9b04      	ldr	r3, [sp, #16]
   26ea0:	1b9b      	subs	r3, r3, r6
   26ea2:	6123      	str	r3, [r4, #16]
   26ea4:	9b07      	ldr	r3, [sp, #28]
   26ea6:	aa09      	add	r2, sp, #36	; 0x24
   26ea8:	9300      	str	r3, [sp, #0]
   26eaa:	0021      	movs	r1, r4
   26eac:	9b06      	ldr	r3, [sp, #24]
   26eae:	9805      	ldr	r0, [sp, #20]
   26eb0:	f7ff fe82 	bl	26bb8 <_printf_common>
   26eb4:	1c43      	adds	r3, r0, #1
   26eb6:	d1b3      	bne.n	26e20 <_printf_i+0x18c>
   26eb8:	2001      	movs	r0, #1
   26eba:	4240      	negs	r0, r0
   26ebc:	b00b      	add	sp, #44	; 0x2c
   26ebe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26ec0:	0002bc3c 	.word	0x0002bc3c
   26ec4:	0002bc2b 	.word	0x0002bc2b

00026ec8 <__sread>:
   26ec8:	b570      	push	{r4, r5, r6, lr}
   26eca:	000c      	movs	r4, r1
   26ecc:	250e      	movs	r5, #14
   26ece:	5f49      	ldrsh	r1, [r1, r5]
   26ed0:	f000 f8f0 	bl	270b4 <_read_r>
   26ed4:	2800      	cmp	r0, #0
   26ed6:	db03      	blt.n	26ee0 <__sread+0x18>
   26ed8:	6d63      	ldr	r3, [r4, #84]	; 0x54
   26eda:	181b      	adds	r3, r3, r0
   26edc:	6563      	str	r3, [r4, #84]	; 0x54
   26ede:	bd70      	pop	{r4, r5, r6, pc}
   26ee0:	89a3      	ldrh	r3, [r4, #12]
   26ee2:	4a02      	ldr	r2, [pc, #8]	; (26eec <__sread+0x24>)
   26ee4:	4013      	ands	r3, r2
   26ee6:	81a3      	strh	r3, [r4, #12]
   26ee8:	e7f9      	b.n	26ede <__sread+0x16>
   26eea:	46c0      	nop			; (mov r8, r8)
   26eec:	ffffefff 	.word	0xffffefff

00026ef0 <__swrite>:
   26ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26ef2:	001f      	movs	r7, r3
   26ef4:	898b      	ldrh	r3, [r1, #12]
   26ef6:	0005      	movs	r5, r0
   26ef8:	000c      	movs	r4, r1
   26efa:	0016      	movs	r6, r2
   26efc:	05db      	lsls	r3, r3, #23
   26efe:	d505      	bpl.n	26f0c <__swrite+0x1c>
   26f00:	230e      	movs	r3, #14
   26f02:	5ec9      	ldrsh	r1, [r1, r3]
   26f04:	2200      	movs	r2, #0
   26f06:	2302      	movs	r3, #2
   26f08:	f000 f88e 	bl	27028 <_lseek_r>
   26f0c:	89a3      	ldrh	r3, [r4, #12]
   26f0e:	4a05      	ldr	r2, [pc, #20]	; (26f24 <__swrite+0x34>)
   26f10:	0028      	movs	r0, r5
   26f12:	4013      	ands	r3, r2
   26f14:	81a3      	strh	r3, [r4, #12]
   26f16:	0032      	movs	r2, r6
   26f18:	230e      	movs	r3, #14
   26f1a:	5ee1      	ldrsh	r1, [r4, r3]
   26f1c:	003b      	movs	r3, r7
   26f1e:	f000 f839 	bl	26f94 <_write_r>
   26f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26f24:	ffffefff 	.word	0xffffefff

00026f28 <__sseek>:
   26f28:	b570      	push	{r4, r5, r6, lr}
   26f2a:	000c      	movs	r4, r1
   26f2c:	250e      	movs	r5, #14
   26f2e:	5f49      	ldrsh	r1, [r1, r5]
   26f30:	f000 f87a 	bl	27028 <_lseek_r>
   26f34:	89a3      	ldrh	r3, [r4, #12]
   26f36:	1c42      	adds	r2, r0, #1
   26f38:	d103      	bne.n	26f42 <__sseek+0x1a>
   26f3a:	4a05      	ldr	r2, [pc, #20]	; (26f50 <__sseek+0x28>)
   26f3c:	4013      	ands	r3, r2
   26f3e:	81a3      	strh	r3, [r4, #12]
   26f40:	bd70      	pop	{r4, r5, r6, pc}
   26f42:	2280      	movs	r2, #128	; 0x80
   26f44:	0152      	lsls	r2, r2, #5
   26f46:	4313      	orrs	r3, r2
   26f48:	81a3      	strh	r3, [r4, #12]
   26f4a:	6560      	str	r0, [r4, #84]	; 0x54
   26f4c:	e7f8      	b.n	26f40 <__sseek+0x18>
   26f4e:	46c0      	nop			; (mov r8, r8)
   26f50:	ffffefff 	.word	0xffffefff

00026f54 <__sclose>:
   26f54:	b510      	push	{r4, lr}
   26f56:	230e      	movs	r3, #14
   26f58:	5ec9      	ldrsh	r1, [r1, r3]
   26f5a:	f000 f82f 	bl	26fbc <_close_r>
   26f5e:	bd10      	pop	{r4, pc}

00026f60 <strchr>:
   26f60:	b2c9      	uxtb	r1, r1
   26f62:	7803      	ldrb	r3, [r0, #0]
   26f64:	2b00      	cmp	r3, #0
   26f66:	d004      	beq.n	26f72 <strchr+0x12>
   26f68:	4299      	cmp	r1, r3
   26f6a:	d100      	bne.n	26f6e <strchr+0xe>
   26f6c:	4770      	bx	lr
   26f6e:	3001      	adds	r0, #1
   26f70:	e7f7      	b.n	26f62 <strchr+0x2>
   26f72:	424b      	negs	r3, r1
   26f74:	4159      	adcs	r1, r3
   26f76:	4249      	negs	r1, r1
   26f78:	4008      	ands	r0, r1
   26f7a:	e7f7      	b.n	26f6c <strchr+0xc>

00026f7c <__ascii_wctomb>:
   26f7c:	1e0b      	subs	r3, r1, #0
   26f7e:	d004      	beq.n	26f8a <__ascii_wctomb+0xe>
   26f80:	2aff      	cmp	r2, #255	; 0xff
   26f82:	d904      	bls.n	26f8e <__ascii_wctomb+0x12>
   26f84:	238a      	movs	r3, #138	; 0x8a
   26f86:	6003      	str	r3, [r0, #0]
   26f88:	3b8b      	subs	r3, #139	; 0x8b
   26f8a:	0018      	movs	r0, r3
   26f8c:	4770      	bx	lr
   26f8e:	700a      	strb	r2, [r1, #0]
   26f90:	2301      	movs	r3, #1
   26f92:	e7fa      	b.n	26f8a <__ascii_wctomb+0xe>

00026f94 <_write_r>:
   26f94:	b570      	push	{r4, r5, r6, lr}
   26f96:	0005      	movs	r5, r0
   26f98:	0008      	movs	r0, r1
   26f9a:	0011      	movs	r1, r2
   26f9c:	2200      	movs	r2, #0
   26f9e:	4c06      	ldr	r4, [pc, #24]	; (26fb8 <_write_r+0x24>)
   26fa0:	6022      	str	r2, [r4, #0]
   26fa2:	001a      	movs	r2, r3
   26fa4:	f7f8 fd90 	bl	1fac8 <_write>
   26fa8:	1c43      	adds	r3, r0, #1
   26faa:	d103      	bne.n	26fb4 <_write_r+0x20>
   26fac:	6823      	ldr	r3, [r4, #0]
   26fae:	2b00      	cmp	r3, #0
   26fb0:	d000      	beq.n	26fb4 <_write_r+0x20>
   26fb2:	602b      	str	r3, [r5, #0]
   26fb4:	bd70      	pop	{r4, r5, r6, pc}
   26fb6:	46c0      	nop			; (mov r8, r8)
   26fb8:	20005590 	.word	0x20005590

00026fbc <_close_r>:
   26fbc:	2300      	movs	r3, #0
   26fbe:	b570      	push	{r4, r5, r6, lr}
   26fc0:	4c06      	ldr	r4, [pc, #24]	; (26fdc <_close_r+0x20>)
   26fc2:	0005      	movs	r5, r0
   26fc4:	0008      	movs	r0, r1
   26fc6:	6023      	str	r3, [r4, #0]
   26fc8:	f7f8 fdb8 	bl	1fb3c <_close>
   26fcc:	1c43      	adds	r3, r0, #1
   26fce:	d103      	bne.n	26fd8 <_close_r+0x1c>
   26fd0:	6823      	ldr	r3, [r4, #0]
   26fd2:	2b00      	cmp	r3, #0
   26fd4:	d000      	beq.n	26fd8 <_close_r+0x1c>
   26fd6:	602b      	str	r3, [r5, #0]
   26fd8:	bd70      	pop	{r4, r5, r6, pc}
   26fda:	46c0      	nop			; (mov r8, r8)
   26fdc:	20005590 	.word	0x20005590

00026fe0 <_fstat_r>:
   26fe0:	2300      	movs	r3, #0
   26fe2:	b570      	push	{r4, r5, r6, lr}
   26fe4:	4c06      	ldr	r4, [pc, #24]	; (27000 <_fstat_r+0x20>)
   26fe6:	0005      	movs	r5, r0
   26fe8:	0008      	movs	r0, r1
   26fea:	0011      	movs	r1, r2
   26fec:	6023      	str	r3, [r4, #0]
   26fee:	f7f8 fda8 	bl	1fb42 <_fstat>
   26ff2:	1c43      	adds	r3, r0, #1
   26ff4:	d103      	bne.n	26ffe <_fstat_r+0x1e>
   26ff6:	6823      	ldr	r3, [r4, #0]
   26ff8:	2b00      	cmp	r3, #0
   26ffa:	d000      	beq.n	26ffe <_fstat_r+0x1e>
   26ffc:	602b      	str	r3, [r5, #0]
   26ffe:	bd70      	pop	{r4, r5, r6, pc}
   27000:	20005590 	.word	0x20005590

00027004 <_isatty_r>:
   27004:	2300      	movs	r3, #0
   27006:	b570      	push	{r4, r5, r6, lr}
   27008:	4c06      	ldr	r4, [pc, #24]	; (27024 <_isatty_r+0x20>)
   2700a:	0005      	movs	r5, r0
   2700c:	0008      	movs	r0, r1
   2700e:	6023      	str	r3, [r4, #0]
   27010:	f7f8 fd9c 	bl	1fb4c <_isatty>
   27014:	1c43      	adds	r3, r0, #1
   27016:	d103      	bne.n	27020 <_isatty_r+0x1c>
   27018:	6823      	ldr	r3, [r4, #0]
   2701a:	2b00      	cmp	r3, #0
   2701c:	d000      	beq.n	27020 <_isatty_r+0x1c>
   2701e:	602b      	str	r3, [r5, #0]
   27020:	bd70      	pop	{r4, r5, r6, pc}
   27022:	46c0      	nop			; (mov r8, r8)
   27024:	20005590 	.word	0x20005590

00027028 <_lseek_r>:
   27028:	b570      	push	{r4, r5, r6, lr}
   2702a:	0005      	movs	r5, r0
   2702c:	0008      	movs	r0, r1
   2702e:	0011      	movs	r1, r2
   27030:	2200      	movs	r2, #0
   27032:	4c06      	ldr	r4, [pc, #24]	; (2704c <_lseek_r+0x24>)
   27034:	6022      	str	r2, [r4, #0]
   27036:	001a      	movs	r2, r3
   27038:	f7f8 fd8a 	bl	1fb50 <_lseek>
   2703c:	1c43      	adds	r3, r0, #1
   2703e:	d103      	bne.n	27048 <_lseek_r+0x20>
   27040:	6823      	ldr	r3, [r4, #0]
   27042:	2b00      	cmp	r3, #0
   27044:	d000      	beq.n	27048 <_lseek_r+0x20>
   27046:	602b      	str	r3, [r5, #0]
   27048:	bd70      	pop	{r4, r5, r6, pc}
   2704a:	46c0      	nop			; (mov r8, r8)
   2704c:	20005590 	.word	0x20005590

00027050 <memchr>:
   27050:	b2c9      	uxtb	r1, r1
   27052:	1882      	adds	r2, r0, r2
   27054:	4290      	cmp	r0, r2
   27056:	d101      	bne.n	2705c <memchr+0xc>
   27058:	2000      	movs	r0, #0
   2705a:	4770      	bx	lr
   2705c:	7803      	ldrb	r3, [r0, #0]
   2705e:	428b      	cmp	r3, r1
   27060:	d0fb      	beq.n	2705a <memchr+0xa>
   27062:	3001      	adds	r0, #1
   27064:	e7f6      	b.n	27054 <memchr+0x4>

00027066 <_realloc_r>:
   27066:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27068:	0007      	movs	r7, r0
   2706a:	000d      	movs	r5, r1
   2706c:	0016      	movs	r6, r2
   2706e:	2900      	cmp	r1, #0
   27070:	d105      	bne.n	2707e <_realloc_r+0x18>
   27072:	0011      	movs	r1, r2
   27074:	f7fe fe9e 	bl	25db4 <_malloc_r>
   27078:	0004      	movs	r4, r0
   2707a:	0020      	movs	r0, r4
   2707c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2707e:	2a00      	cmp	r2, #0
   27080:	d103      	bne.n	2708a <_realloc_r+0x24>
   27082:	f7fe fe4d 	bl	25d20 <_free_r>
   27086:	0034      	movs	r4, r6
   27088:	e7f7      	b.n	2707a <_realloc_r+0x14>
   2708a:	f000 f827 	bl	270dc <_malloc_usable_size_r>
   2708e:	002c      	movs	r4, r5
   27090:	4286      	cmp	r6, r0
   27092:	d9f2      	bls.n	2707a <_realloc_r+0x14>
   27094:	0031      	movs	r1, r6
   27096:	0038      	movs	r0, r7
   27098:	f7fe fe8c 	bl	25db4 <_malloc_r>
   2709c:	1e04      	subs	r4, r0, #0
   2709e:	d0ec      	beq.n	2707a <_realloc_r+0x14>
   270a0:	0029      	movs	r1, r5
   270a2:	0032      	movs	r2, r6
   270a4:	f7fe fe18 	bl	25cd8 <memcpy>
   270a8:	0029      	movs	r1, r5
   270aa:	0038      	movs	r0, r7
   270ac:	f7fe fe38 	bl	25d20 <_free_r>
   270b0:	e7e3      	b.n	2707a <_realloc_r+0x14>
	...

000270b4 <_read_r>:
   270b4:	b570      	push	{r4, r5, r6, lr}
   270b6:	0005      	movs	r5, r0
   270b8:	0008      	movs	r0, r1
   270ba:	0011      	movs	r1, r2
   270bc:	2200      	movs	r2, #0
   270be:	4c06      	ldr	r4, [pc, #24]	; (270d8 <_read_r+0x24>)
   270c0:	6022      	str	r2, [r4, #0]
   270c2:	001a      	movs	r2, r3
   270c4:	f7f8 fcde 	bl	1fa84 <_read>
   270c8:	1c43      	adds	r3, r0, #1
   270ca:	d103      	bne.n	270d4 <_read_r+0x20>
   270cc:	6823      	ldr	r3, [r4, #0]
   270ce:	2b00      	cmp	r3, #0
   270d0:	d000      	beq.n	270d4 <_read_r+0x20>
   270d2:	602b      	str	r3, [r5, #0]
   270d4:	bd70      	pop	{r4, r5, r6, pc}
   270d6:	46c0      	nop			; (mov r8, r8)
   270d8:	20005590 	.word	0x20005590

000270dc <_malloc_usable_size_r>:
   270dc:	1f0b      	subs	r3, r1, #4
   270de:	681b      	ldr	r3, [r3, #0]
   270e0:	1f18      	subs	r0, r3, #4
   270e2:	2b00      	cmp	r3, #0
   270e4:	da01      	bge.n	270ea <_malloc_usable_size_r+0xe>
   270e6:	580b      	ldr	r3, [r1, r0]
   270e8:	18c0      	adds	r0, r0, r3
   270ea:	4770      	bx	lr
   270ec:	00082008 	.word	0x00082008
   270f0:	74747542 	.word	0x74747542
   270f4:	23206e6f 	.word	0x23206e6f
   270f8:	69206425 	.word	0x69206425
   270fc:	65722073 	.word	0x65722073
   27100:	7361656c 	.word	0x7361656c
   27104:	0a0d6465 	.word	0x0a0d6465
   27108:	00000000 	.word	0x00000000
   2710c:	74747542 	.word	0x74747542
   27110:	23206e6f 	.word	0x23206e6f
   27114:	69206425 	.word	0x69206425
   27118:	72702073 	.word	0x72702073
   2711c:	65737365 	.word	0x65737365
   27120:	000a0d64 	.word	0x000a0d64
   27124:	64757453 	.word	0x64757453
   27128:	73746e65 	.word	0x73746e65
   2712c:	206f7420 	.word	0x206f7420
   27130:	6c6c6966 	.word	0x6c6c6966
   27134:	74756f20 	.word	0x74756f20
   27138:	00000021 	.word	0x00000021
   2713c:	00736c63 	.word	0x00736c63
   27140:	3a736c63 	.word	0x3a736c63
   27144:	656c4320 	.word	0x656c4320
   27148:	20737261 	.word	0x20737261
   2714c:	20656874 	.word	0x20656874
   27150:	6d726574 	.word	0x6d726574
   27154:	6c616e69 	.word	0x6c616e69
   27158:	72637320 	.word	0x72637320
   2715c:	0d6e6565 	.word	0x0d6e6565
   27160:	0000000a 	.word	0x0000000a
   27164:	62746567 	.word	0x62746567
   27168:	6f747475 	.word	0x6f747475
   2716c:	0000006e 	.word	0x0000006e
   27170:	62746567 	.word	0x62746567
   27174:	6f747475 	.word	0x6f747475
   27178:	50203a6e 	.word	0x50203a6e
   2717c:	65636f72 	.word	0x65636f72
   27180:	73657373 	.word	0x73657373
   27184:	646e6120 	.word	0x646e6120
   27188:	69727020 	.word	0x69727020
   2718c:	2073746e 	.word	0x2073746e
   27190:	20656874 	.word	0x20656874
   27194:	4f464946 	.word	0x4f464946
   27198:	74756220 	.word	0x74756220
   2719c:	206e6f74 	.word	0x206e6f74
   271a0:	66667562 	.word	0x66667562
   271a4:	66207265 	.word	0x66207265
   271a8:	206d6f72 	.word	0x206d6f72
   271ac:	20656874 	.word	0x20656874
   271b0:	73656573 	.word	0x73656573
   271b4:	0d2e7761 	.word	0x0d2e7761
   271b8:	0000000a 	.word	0x0000000a
   271bc:	0064656c 	.word	0x0064656c
   271c0:	2064656c 	.word	0x2064656c
   271c4:	79656b5b 	.word	0x79656b5b
   271c8:	5d6d756e 	.word	0x5d6d756e
   271cc:	5b5d525b 	.word	0x5b5d525b
   271d0:	425b5d47 	.word	0x425b5d47
   271d4:	53203a5d 	.word	0x53203a5d
   271d8:	20737465 	.word	0x20737465
   271dc:	20656874 	.word	0x20656874
   271e0:	65766967 	.word	0x65766967
   271e4:	454c206e 	.word	0x454c206e
   271e8:	6f742044 	.word	0x6f742044
   271ec:	65687420 	.word	0x65687420
   271f0:	76696720 	.word	0x76696720
   271f4:	52206e65 	.word	0x52206e65
   271f8:	422c472c 	.word	0x422c472c
   271fc:	6c617620 	.word	0x6c617620
   27200:	2e736575 	.word	0x2e736575
   27204:	00000a0d 	.word	0x00000a0d
   27208:	65736572 	.word	0x65736572
   2720c:	00000074 	.word	0x00000074
   27210:	65736572 	.word	0x65736572
   27214:	52203a74 	.word	0x52203a74
   27218:	74657365 	.word	0x74657365
   2721c:	68742073 	.word	0x68742073
   27220:	65642065 	.word	0x65642065
   27224:	65636976 	.word	0x65636976
   27228:	00000a0d 	.word	0x00000a0d
   2722c:	00007766 	.word	0x00007766
   27230:	203a7766 	.word	0x203a7766
   27234:	6e776f44 	.word	0x6e776f44
   27238:	64616f6c 	.word	0x64616f6c
   2723c:	66206120 	.word	0x66206120
   27240:	20656c69 	.word	0x20656c69
   27244:	20646e61 	.word	0x20646e61
   27248:	66726570 	.word	0x66726570
   2724c:	206d726f 	.word	0x206d726f
   27250:	46206e61 	.word	0x46206e61
   27254:	70752057 	.word	0x70752057
   27258:	65746164 	.word	0x65746164
   2725c:	00000a0d 	.word	0x00000a0d
   27260:	65657246 	.word	0x65657246
   27264:	534f5452 	.word	0x534f5452
   27268:	494c4320 	.word	0x494c4320
   2726c:	540a0d2e 	.word	0x540a0d2e
   27270:	20657079 	.word	0x20657079
   27274:	706c6548 	.word	0x706c6548
   27278:	206f7420 	.word	0x206f7420
   2727c:	77656976 	.word	0x77656976
   27280:	6c206120 	.word	0x6c206120
   27284:	20747369 	.word	0x20747369
   27288:	7220666f 	.word	0x7220666f
   2728c:	73696765 	.word	0x73696765
   27290:	65726574 	.word	0x65726574
   27294:	6f632064 	.word	0x6f632064
   27298:	6e616d6d 	.word	0x6e616d6d
   2729c:	0d2e7364 	.word	0x0d2e7364
   272a0:	0000000a 	.word	0x0000000a
   272a4:	0000616f 	.word	0x0000616f
   272a8:	325b6325 	.word	0x325b6325
   272ac:	003e0d4b 	.word	0x003e0d4b

000272b0 <xClearScreen>:
   272b0:	0002713c 00027140 00012d59 00000000     <q..@q..Y-......
   272c0:	325b6325 0000004a                       %c[2J...

000272c8 <xNeotrellisProcessButtonCommand>:
   272c8:	00027164 00027170 00012da9 00000000     dq..pq...-......

000272d8 <xNeotrellisTurnLEDCommand>:
   272d8:	000271bc 000271c0 00012d85 00000004     .q...q...-......

000272e8 <xOTAUCommand>:
   272e8:	0002722c 00027230 00012d99 00000000     ,r..0r...-......

000272f8 <xResetCommand>:
   272f8:	00027208 00027210 00012d41 00000000     .r...r..A-......
   27308:	35455345 2d203631 6e6f4320 6c6f7274     ESE516 - Control
   27318:	696e4920 6f432074 0a0d6564 00000000      Init Code......
   27328:	4f525245 6e492052 61697469 697a696c     ERROR Initializi
   27338:	4320676e 72746e6f 44206c6f 20617461     ng Control Data 
   27348:	75657571 0d217365 0000000a 746e6f43     queues!.....Cont
   27358:	206c6f72 65726854 203a6461 736e6f43     rol Thread: Cons
   27368:	64656d75 6d616720 61702065 74656b63     umed game packet
   27378:	000a0d21 746e6f43 206c6f72 65726854     !...Control Thre
   27388:	203a6461 6c756f43 6f6e2064 65732074     ad: Could not se
   27398:	6720646e 20656d61 6b636170 0d217465     nd game packet!.
   273a8:	0000000a 54204955 206b7361 72617453     ....UI Task Star
   273b8:	21646574 00000000 00013b6c 00013b76     ted!....l;..v;..
   273c8:	00013b86 00013bc2 00013bd8 6167227b     .;...;...;..{"ga
   273d8:	3a22656d 0000005b 61470a0d 6d20656d     me":[.....Game m
   273e8:	61737365 72206567 69656365 21646576     essage received!
   273f8:	00000a0d 732a2e25 00000000 61500a0d     ....%.*s......Pa
   27408:	64657372 6d6f4320 646e616d 0000203a     rsed Command: ..
   27418:	002c6425 65530a0d 7020746e 2079616c     %d,...Sent play 
   27428:	63206f74 72746e6f 0d216c6f 0000000a     to control!.....
   27438:	61470a0d 6d20656d 61737365 72206567     ..Game message r
   27448:	69656365 20646576 20747562 20746f6e     eceived but not 
   27458:	65646e75 6f747372 0d21646f 0000000a     understood!.....
   27468:	25200a0d 00732a2e 74617473 003a7375     .. %.*s.status:.
   27478:	54530a0d 53555441 63655220 65766965     ..STATUS Receive
   27488:	0a0d6425 00000000 65530a0d 7320746e     %d........Sent s
   27498:	75746174 6f742073 6e6f6320 6c6f7274     tatus to control
   274a8:	000a0d21 5454514d 696e6920 6c616974     !...MQTT initial
   274b8:	74617a69 206e6f69 6c696166 202e6465     ization failed. 
   274c8:	6f727245 6f632072 69206564 25282073     Error code is (%
   274d8:	0a0d2964 00000000 5454514d 67657220     d)......MQTT reg
   274e8:	65747369 61632072 61626c6c 66206b63     ister callback f
   274f8:	656c6961 45202e64 726f7272 646f6320     ailed. Error cod
   27508:	73692065 64252820 000a0d29 70747468     e is (%d)...http
   27518:	696c635f 5f746e65 6c6c6163 6b636162     _client_callback
   27528:	5448203a 63205054 6e65696c 6f732074     : HTTP client so
   27538:	74656b63 6e6f6320 7463656e 0d2e6465     cket connected..
   27548:	0000000a 70747468 696c635f 5f746e65     ....http_client_
   27558:	6c6c6163 6b636162 6572203a 73657571     callback: reques
   27568:	6f632074 656c706d 2e646574 00000a0d     t completed.....
   27578:	70747468 696c635f 5f746e65 6c6c6163     http_client_call
   27588:	6b636162 6572203a 76696563 72206465     back: received r
   27598:	6f707365 2065736e 64207525 20617461     esponse %u data 
   275a8:	657a6973 0d752520 0000000a 70747468     size %u.....http
   275b8:	696c635f 5f746e65 6c6c6163 6b636162     _client_callback
   275c8:	6964203a 6e6f6373 7463656e 206e6f69     : disconnection 
   275d8:	73616572 253a6e6f 000a0d64              reason:%d...

000275e4 <main_mqtt_broker>:
   275e4:	6b6f7262 682e7265 6d657669 6f632e71     broker.hivemq.co
   275f4:	0000006d 6f430a0d 63656e6e 676e6974     m.....Connecting
   27604:	206f7420 6b6f7242 2e2e7265 0000002e      to Broker......
   27614:	35455345 6f563631 6f6f646f 6967616d     ESE516Voodoomagi
   27624:	00003263 646f6f76 616d6f6f 32636967     c2..voodoomagic2
   27634:	00000000 5454514d 72452020 20726f72     ....MQTT  Error 
   27644:	4f4e202d 6f432054 63656e6e 20646574     - NOT Connected 
   27654:	62206f74 656b6f72 000a0d72 5454514d     to broker...MQTT
   27664:	6e6f4320 7463656e 74206465 7262206f      Connected to br
   27674:	72656b6f 00000a0d 6e6e6f43 20746365     oker....Connect 
   27684:	6c696166 206f7420 76726573 25287265     fail to server(%
   27694:	20212973 72746572 74692079 74756120     s)! retry it aut
   276a4:	74616d6f 6c616369 0d2e796c 0000000a     omatically......
   276b4:	475f3150 5f454d41 646f6f56 614d6f6f     P1_GAME_VoodooMa
   276c4:	5f636967 00003054 535f3150 73757461     gic_T0..P1_Satus
   276d4:	6f6f565f 4d6f6f64 63696761 0030545f     _VoodooMagic_T0.
   276e4:	5454514d 6e6f4320 7463656e 0a0d6465     MQTT Connected..
   276f4:	00000000 5454514d 6f726220 2072656b     ....MQTT broker 
   27704:	6c636564 20656e69 72756f79 63636120     decline your acc
   27714:	21737365 72726520 6320726f 2065646f     ess! error code 
   27724:	0a0d6425 00000000 5454514d 73696420     %d......MQTT dis
   27734:	6e6e6f63 65746365 000a0d64 6f736572     connected...reso
   27744:	5f65766c 203a6263 49207325 64612050     lve_cb: %s IP ad
   27754:	73657264 73692073 2e642520 252e6425     dress is %d.%d.%
   27764:	64252e64 0a0d0a0d 00000000 72617473     d.%d........star
   27774:	6f645f74 6f6c6e77 203a6461 20434d4d     t_download: MMC 
   27784:	726f7473 20656761 20746f6e 64616572     storage not read
   27794:	0a0d2e79 00000000 72617473 6f645f74     y.......start_do
   277a4:	6f6c6e77 203a6461 462d6957 73692069     wnload: Wi-Fi is
   277b4:	746f6e20 6e6f6320 7463656e 0d2e6465      not connected..
   277c4:	0000000a 72617473 6f645f74 6f6c6e77     ....start_downlo
   277d4:	203a6461 75716572 20747365 73207369     ad: request is s
   277e4:	20746e65 65726c61 2e796461 00000a0d     ent already.....
   277f4:	72617473 6f645f74 6f6c6e77 203a6461     start_download: 
   27804:	6e6e7572 20676e69 6e776f64 64616f6c     running download
   27814:	726c6120 79646165 000a0d2e 72617473      already....star
   27824:	6f645f74 6f6c6e77 203a6461 646e6573     t_download: send
   27834:	20676e69 50545448 71657220 74736575     ing HTTP request
   27844:	0d2e2e2e 0000000a 70747468 2f2f3a73     ........https://
   27854:	2e777777 73616573 6570752e 652e6e6e     www.seas.upenn.e
   27864:	7e2f7564 696a7577 492f687a 622e546f     du/~wujizh/IoT.b
   27874:	00006e69 726f7473 69665f65 705f656c     in..store_file_p
   27884:	656b6361 65203a74 7974706d 74616420     acket: empty dat
   27894:	0a0d2e61 00000000 64333025 00000000     a.......%03d....
   278a4:	726f7473 69665f65 705f656c 656b6361     store_file_packe
   278b4:	63203a74 74616572 20676e69 656c6966     t: creating file
   278c4:	73255b20 000a0d5d 726f7473 69665f65      [%s]...store_fi
   278d4:	705f656c 656b6361 66203a74 20656c69     le_packet: file 
   278e4:	656d616e 20736920 61766e69 2e64696c     name is invalid.
   278f4:	776f4420 616f6c6e 61632064 6c65636e      Download cancel
   27904:	0d2e6465 0000000a 726f7473 69665f65     ed......store_fi
   27914:	705f656c 656b6361 66203a74 20656c69     le_packet: file 
   27924:	61657263 6e6f6974 72726520 2021726f     creation error! 
   27934:	3a746572 0a0d6425 00000000 726f7473     ret:%d......stor
   27944:	69665f65 705f656c 656b6361 66203a74     e_file_packet: f
   27954:	20656c69 74697277 72652065 2c726f72     ile write error,
   27964:	776f6420 616f6c6e 61632064 6c65636e      download cancel
   27974:	0d2e6465 0000000a 726f7473 69665f65     ed......store_fi
   27984:	705f656c 656b6361 72203a74 69656365     le_packet: recei
   27994:	5b646576 5d756c25 6966202c 7320656c     ved[%lu], file s
   279a4:	5b657a69 5d756c25 00000a0d 726f7473     ize[%lu]....stor
   279b4:	69665f65 705f656c 656b6361 66203a74     e_file_packet: f
   279c4:	20656c69 6e776f64 64616f6c 73206465     ile downloaded s
   279d4:	65636375 75667373 2e796c6c 00000a0d     uccessfully.....
   279e4:	4f525245 6e492052 61697469 697a696c     ERROR Initializi
   279f4:	5720676e 20696669 61746144 65757120     ng Wifi Data que
   27a04:	21736575 00000a0d 35455345 2d203631     ues!....ESE516 -
   27a14:	66695720 6e492069 43207469 0d65646f      Wifi Init Code.
   27a24:	0000000a 666e6f63 72756769 74685f65     ....configure_ht
   27a34:	635f7074 6e65696c 48203a74 20505454     tp_client: HTTP 
   27a44:	65696c63 6920746e 6974696e 7a696c61     client initializ
   27a54:	6f697461 6166206e 64656c69 72282021     ation failed! (r
   27a64:	25207365 0a0d2964 00000000 6e69616d     es %d)......main
   27a74:	326d203a 69775f6d 695f6966 2074696e     : m2m_wifi_init 
   27a84:	6c6c6163 72726520 2021726f 73657228     call error! (res
   27a94:	29642520 00000a0d 6e69616d 6f63203a      %d)....main: co
   27aa4:	63656e6e 676e6974 206f7420 69466957     nnecting to WiFi
   27ab4:	20504120 2e2e7325 000a0d2e 6e6e6f43      AP %s......Conn
   27ac4:	65746365 6f742064 54514d20 72422054     ected to MQTT Br
   27ad4:	72656b6f 000a0d21 00006425 00007d5d     oker!...%d..]}..
   27ae4:	475f3250 5f454d41 646f6f56 614d6f6f     P2_GAME_VoodooMa
   27af4:	5f636967 00003054 4941465b 72205d4c     gic_T0..[FAIL] r
   27b04:	25207365 000a0d64 61647055 742e6574     es %d...Update.t
   27b14:	61207478 64656464 000a0d21 70553a30     xt added!...0:Up
   27b24:	65746164 7478742e 00000000 69666977     date.txt....wifi
   27b34:	3a62635f 4d324d20 4649575f 4f435f49     _cb: M2M_WIFI_CO
   27b44:	43454e4e 0d444554 0000000a 69666977     NNECTED.....wifi
   27b54:	3a62635f 4d324d20 4649575f 49445f49     _cb: M2M_WIFI_DI
   27b64:	4e4f4353 5443454e 0a0d4445 00000000     SCONNECTED......
   27b74:	396a777a 32303137 72655630 6e6f7a69     zwj971020Verizon
   27b84:	00000000 6e6e654b 646e4179 6172694b     ....KennyAndKira
   27b94:	00000000 69666977 3a62635f 20504920     ....wifi_cb: IP 
   27ba4:	72646461 20737365 25207369 75252e75     address is %u.%u
   27bb4:	2e75252e 0a0d7525 00000000 6f727245     .%u.%u......Erro
   27bc4:	6f632072 63656e6e 676e6974 206f7420     r connecting to 
   27bd4:	5454514d 6f724220 2172656b 00000a0d     MQTT Broker!....
   27be4:	6f727245 6e692072 61697469 697a696c     Error initializi
   27bf4:	4f20676e 2144454c 00000a0d 44454c4f     ng OLED!....OLED
   27c04:	72755420 2064656e 2166666f 00000a0d      Turned off!....
   27c14:	6f727245 6e692072 61697469 697a696c     Error initializi
   27c24:	4f20676e 2044454c 636f6c63 0a0d216b     ng OLED clock!..
   27c34:	00000000 44454c4f 6f6c6320 73206b63     ....OLED clock s
   27c44:	0d217465 0000000a                       et!.....

00027c4c <Turns>:
   27c4c:	20000000 00000080 00004040 00000000     ... ....@@......
	...
   27c90:	02640601 00000001 8140422c 00286402     ..d.....,B@..d(.
   27ca0:	c0405300 00164000 004a0000 00000102     .S@..@....J.....
	...
   27d0c:	08000000 0ca8b404 00000804 00000040     ............@...
   27d1c:	0000a000 4000a000 80400000 80604040     .......@..@.@@`.
   27d2c:	00000080 00000000 00000000 00000000     ................
	...
   27d50:	00090b00 00000000 0808100a 00000a00     ................
   27d60:	00001a00 0d080000 04000000 00000016     ................
	...

00027dcc <WAIT>:
   27dcc:	20000000 00000080 00e03080 e0000000     ... .....0......
   27ddc:	00000010 40303080 00000000 00009000     .....00@........
   27dec:	00301020 00301010 00000000 00000000      .0...0.........
	...
   27e10:	50003405 17000002 00080040 0e700000     .4.P....@.....p.
   27e20:	0904000d 00002802 00002e00 1d000000     .....(..........
	...

00027f4c <font5x7>:
   27f4c:	ff000805 00004b0c 3e000000 3e5b4f5b     .....K.....>[O[>
   27f5c:	6b4f6b3e 7c3e1c3e 3c181c3e 1c183c7e     >kOk>.>|>..<~<..
   27f6c:	1c577d57 5e7f5e1c 3c18001c e7ff0018     W}W..^.^...<....
   27f7c:	00ffe7c3 00182418 e7dbe7ff 3a4830ff     .....$.......0H:
   27f8c:	29260e06 40262979 0705057f 25057f40     ..&)y)&@....@..%
   27f9c:	e73c5a3f 3e7f5a3c 08081c1c 7f3e1c1c     ?Z<.<Z.>......>.
   27fac:	227f2214 005f5f14 09065f5f 007f017f     .".".__.__......
   27fbc:	6a958966 60606060 ffa29460 040894a2     f..j`````.......
   27fcc:	1008047e 10207e20 1c2a0808 2a1c0808     ~... ~ ...*....*
   27fdc:	101e0808 0c101010 0c1e0c1e 383e3830     ............08>8
   27fec:	3e0e0630 0000060e 00000000 00005f00     0..>........._..
   27ffc:	07000700 147f1400 2a24147f 23122a7f     ..........$*.*.#
   2800c:	62640813 20564936 07080050 1c000003     ..db6IV P.......
   2801c:	00004122 001c2241 1c7f1c2a 3e08082a     "A..A"..*...*..>
   2802c:	80000808 08003070 08080808 60600000     ....p0........``
   2803c:	08102000 513e0204 003e4549 00407f42     . ....>QIE>.B.@.
   2804c:	49494972 49412146 1418334d 27107f12     rIIIF!AIM3.....'
   2805c:	39454545 49494a3c 11214131 49360709     EEE9<JII1A!...6I
   2806c:	46364949 1e294949 00140000 34400000     II6FII).......@4
   2807c:	08000000 14412214 14141414 14224100     ....."A......A".
   2808c:	59010208 413e0609 7c4e595d 7c121112     ...Y..>A]YN|...|
   2809c:	4949497f 41413e36 417f2241 7f3e4141     .III6>AAA".AAA>.
   280ac:	41494949 0909097f 41413e01 087f7351     IIIA.....>AAQs..
   280bc:	007f0808 00417f41 3f414020 14087f01     ....A.A. @A?....
   280cc:	407f4122 7f404040 7f021c02 1008047f     "A.@@@@.........
   280dc:	41413e7f 097f3e41 3e060909 5e215141     .>AAA>.....>AQ!^
   280ec:	2919097f 49492646 01033249 3f03017f     ...)F&III2.....?
   280fc:	3f404040 2040201f 38403f1f 14633f40     @@@?. @ .?@8@?c.
   2810c:	03631408 03047804 4d495961 417f0043     ..c..x..aYIMC..A
   2811c:	04024141 00201008 7f414141 02010204     AA.... .AAA.....
   2812c:	40404004 03004040 20000807 40785454     .@@@@@..... TTx@
   2813c:	4444287f 44443838 44382844 387f2844     .(DD88DDD(8DD(.8
   2814c:	18545454 097e0800 a4a41802 087f789c     TTT...~......x..
   2815c:	00780404 00407d44 3d404020 28107f00     ..x.D}@. @@=...(
   2816c:	41000044 7c00407f 78047804 0404087c     D..A.@.|.x.x|...
   2817c:	44443878 18fc3844 18182424 fc182424     x8DDD8..$$..$$..
   2818c:	0404087c 54544808 04042454 3c24443f     |....HTTT$..?D$<
   2819c:	7c204040 2040201c 30403c1c 28443c40     @@ |. @ .<@0@<D(
   281ac:	4c442810 7c909090 4c546444 36080044     .(DL...|DdTLD..6
   281bc:	00000041 00000077 00083641 04020102     A...w...A6......
   281cc:	23263c02 a11e3c26 3a1261a1 7a204040     .<&#&<...a.:@@ z
   281dc:	55545438 55552159 54214179 21417854     8TTUY!UUyA!TTxA!
   281ec:	40785455 79555420 521e0c40 55391272     UTx@ TUy@..Rr.9U
   281fc:	39595555 59545454 54545539 45000058     UUY9TTTY9UTTX..E
   2820c:	0200417c 00427d45 407c4501 292429f0     |A..E}B..E|@.)$)
   2821c:	2528f0f0 547cf028 20004555 547c5454     ..(%(.|TUE. TT|T
   2822c:	7f090a7c 49493249 48323249 32324848     |...I2III22HHH22
   2823c:	3048484a 2141413a 40423a7a 9d007820     JHH0:AA!z:B@ x..
   2824c:	397da0a0 39444444 4040403d ff243c3d     ..}9DDD9=@@@=<$.
   2825c:	7e482424 2b664349 2b2ffc2f f62909ff     $$H~ICf+/./+..).
   2826c:	7e88c020 54200309 00417954 417d4400      ..~.. TTyA..D}A
   2827c:	4a484830 40403832 7a007a22 7d720a0a     0HHJ28@@"z.z..r}
   2828c:	7d31190d 2f292926 29292628 48302629     ..1}&))/(&)))&0H
   2829c:	3820404d 08080808 08080808 c8102f38     M@ 8........8/..
   282ac:	102fbaac 00fa3428 00007b00 142a1408     ../.(4...{....*.
   282bc:	2a142222 00aa0814 aaaa0055 aa55aa55     "".*....U...U.U.
   282cc:	ff000000 10101000 141400ff 1000ff14     ................
   282dc:	ff00ff10 10f01010 141414f0 141400fc     ................
   282ec:	00ff00f7 ff00ff00 04f41414 171414fc     ................
   282fc:	10101f10 141f101f 001f1414 f0101010     ................
   2830c:	00000000 1010101f 10101f10 10f01010     ................
   2831c:	ff000000 10101010 10101010 0010ff10     ................
   2832c:	14ff0000 00ff0000 1f0000ff 00001710     ................
   2833c:	14f404fc 17101714 04f41414 ff0000f4     ................
   2834c:	1414f700 14141414 f700f714 17141414     ................
   2835c:	1f101014 14141f10 1014f414 f010f010     ................
   2836c:	101f0000 0000001f 0000141f 0014fc00     ................
   2837c:	f010f000 10ff1010 141414ff 101014ff     ................
   2838c:	00001f10 10f00000 ffffffff f0f0f0ff     ................
   2839c:	fffff0f0 000000ff ffff0000 0f0f0f0f     ................
   283ac:	4444380f 2a7c4438 7e143e2a 06060202     .8DD8D|**>.~....
   283bc:	7e027e02 49556302 44386341 40043c44     .~.~.cUIAc8DD<.@
   283cc:	201e207e 027e0206 e7a59902 2a1c99a5     ~ . ..~........*
   283dc:	4c1c2a49 4c720172 4d4d4a30 78483030     I*.Lr.rL0JMM00Hx
   283ec:	62bc3048 3e3d465a 00494949 0101017e     H0.bZF=>III.~...
   283fc:	2a2a2a7e 44442a2a 4044445f 40444a51     ~*****DD_DD@QJD@
   2840c:	514a4440 ff000040 80e00301 080000ff     @DJQ@...........
   2841c:	086b6b08 24361236 090f0636 0000060f     .kk.6.6$6.......
   2842c:	00001818 00101000 01ff4030 011f0001     ........0@......
   2843c:	19001e01 0012171d 3c3c3c3c 00000000     ........<<<<....
   2844c:	00000000                                ....

00028450 <font8x16>:
   28450:	60201008 00003802 00000000 00000000     .. `.8..........
   28460:	0000fe00 00000000 000e000e d0000000     ................
   28470:	bed090be 1c000090 80c2ff62 120c0000     ........b.......
   28480:	88b04c92 7c800006 c01cb262 00000000     .L.....|b.......
   28490:	00000e0e e0000000 02020418 02000000     ................
   284a0:	e0180402 24000000 24187e18 80800000     .......$.~.$....
   284b0:	8080f080 00000080 00000000 80000000     ................
   284c0:	00808080 00000000 00000000 00000000     ................
   284d0:	06186080 04f80000 f80c32c2 04000000     .`.......2......
   284e0:	0000fe04 02000000 1c224282 02000000     .........B".....
   284f0:	dc222222 a0c00000 80fe8498 1e000080     """.............
   28500:	c2221212 44f80000 c0222222 02000000     .."....D""".....
   28510:	0a32c202 8c000006 8c522252 423c0000     ..2.....R"R...<B
   28520:	f8264242 00000000 00003030 00000000     BB&.....00......
   28530:	00003030 80800000 20204040 40400010     00......@@  ..@@
   28540:	40404040 20100000 80404020 02000080     @@@@...  @@.....
   28550:	1c224282 00000000 00000000 00000000     .B".............
   28560:	00000500 00000000 00000000 07000000     ................
   28570:	00070000 04000000 03040f04 02040000     ................
   28580:	04040301 04030003 03050404 00000004     ................
   28590:	00000000 03000000 10100806 10000000     ................
   285a0:	03060810 00000000 00000000 00000000     ................
   285b0:	00000700 00000000 00000e16 00000000     ................
	...
   285c8:	00000606 02040000 00000001 03010000     ................
   285d8:	01020404 04000000 04040704 07000000     ................
   285e8:	04040404 04000000 03040404 00000000     ................
   285f8:	00070000 04000000 03040404 02010000     ................
   28608:	03040404 00000000 00000007 03000000     ................
   28618:	03040404 04000000 01020404 00000000     ................
   28628:	00000606 00000000 00000e16 00000000     ................
   28638:	02020101 01010004 01010101 02040000     ................
   28648:	00010102 00000000 00000005 04f80000     ................
   28658:	84fa8a72 c0000078 c0380638 fe000000     r...x...8.8.....
   28668:	dc222222 04f80000 02020202 02fe0000     """.............
   28678:	f8040202 fe000000 22222222 fe000000     ........""""....
   28688:	22222222 04f80000 e2220202 20fe0000     """"......".... 
   28698:	fe202020 02000000 0202fe02 00000000        .............
   286a8:	fe020200 40fe0000 020408b0 fe000000     .......@........
   286b8:	00000000 0cfe0000 0c708070 0cfe00fe     ........p.p.....
   286c8:	fe00c030 04f80000 f8040202 42fe0000     0..............B
   286d8:	1c224242 04f80000 f8040202 fe000000     BB".............
   286e8:	1ca24242 1c000000 80424222 02020000     BB......"BB.....
   286f8:	0202fe02 00fe0002 fe000000 38060000     ...............8
   28708:	38c000c0 c03e0006 c0f00ef0 0600003e     ...8..>.....>...
   28718:	06986098 06000000 0618e018 02020000     .`..............
   28728:	060a32c2 00000000 020202fe 06000002     .2..............
   28738:	00806018 02020000 00fe0202 30400000     .`............@0
   28748:	40300c0c 00000000 00000000 02010000     ..0@............
   28758:	00040404 01060000 01010101 07000006     ................
   28768:	03040404 02010000 04040404 04070000     ................
   28778:	01020404 07000000 04040404 07000000     ................
   28788:	00000000 02010000 07040404 00070000     ................
   28798:	07000000 04000000 04040704 04000000     ................
   287a8:	03040404 00070000 04020100 07000000     ................
   287b8:	04040404 00070000 00000100 00070007     ................
   287c8:	07030000 02010000 01020404 00070000     ................
   287d8:	00000000 02010000 11120c04 07000010     ................
   287e8:	06010000 04000000 03040404 00000000     ................
   287f8:	00000700 04030000 03040404 00000000     ................
   28808:	00010601 07000000 07000000 06000000     ................
   28818:	06010001 00000000 00000700 05060000     ................
   28828:	04040404 00000000 1010101f 00000010     ................
   28838:	02010000 10100004 001f1010 00000000     ................
   28848:	00000000 08080000 08080808 00000000     ................
   28858:	00000402 e0000000 f0101010 fe000000     ................
   28868:	e0101020 e0000000 10101010 e0000000      ...............
   28878:	fe101010 e0000000 e0909090 20000000     ............... 
   28888:	222222fc e0000002 f0101010 fe000000     ."""............
   28898:	e0101020 10100000 000000f2 10000000      ...............
   288a8:	00f21010 fe000000 10204080 02000000     .........@ .....
   288b8:	0000fe02 20f00000 1020f010 f00000f0     ....... .. .....
   288c8:	e0101020 e0000000 e0101010 f0000000      ...............
   288d8:	e0101020 e0000000 f0101010 f0000000      ...............
   288e8:	70101020 60000000 20909090 20000000      ..p...`... ... 
   288f8:	2020fc20 f0000020 f0000000 70000000      .   ..........p
   28908:	70800080 00f00000 00c030c0 300000f0     ...p.....0.....0
   28918:	0030c0c0 30000000 708000c0 10000000     ..0....0...p....
   28928:	30509010 80000000 02027e80 00000000     ..P0.....~......
   28938:	0000fe00 02000000 80807e02 80000000     .........~......
   28948:	00000080 00000080 00000000 00000000     ................
   28958:	00000000 03000000 07020404 07000000     ................
   28968:	03040404 03000000 04040404 03000000     ................
   28978:	07020404 03000000 04040404 00000000     ................
   28988:	00000007 33000000 1f222424 07000000     .......3$$".....
   28998:	07000000 00000000 00040407 20200000     ..............  
   289a8:	001f2020 07000000 04020100 00000000       ..............
   289b8:	04040700 00070000 00000700 07000007     ................
   289c8:	07000000 03000000 03040404 3f000000     ...............?
   289d8:	03040404 03000000 3f020404 07000000     ...........?....
   289e8:	00000000 02000000 03040404 00000000     ................
   289f8:	04040300 03000004 07020404 00000000     ................
   28a08:	00030403 06010000 06010001 06000001     ................
   28a18:	00060101 20200000 00030e31 06000000     ......  1.......
   28a28:	04040405 00000000 10101f00 00000000     ................
   28a38:	00000700 10000000 00001f10 00010000     ................
   28a48:	01010100 00000000 00000000 00000000     ................

00028a58 <fontlargenumber>:
   28a58:	0b30300c c0002001 3e3e7cf8 00c0f8fc     .00.. ...|>>....
   28a68:	00000000 fe78e080 000000fe f0000000     ......x.........
   28a78:	3e3e3c7c 00e0fcfe 7c000000 fe3e3e3e     |<>>.......|>>>.
   28a88:	0000c0f8 00000000 f8000000 0000fefe     ................
   28a98:	fe000000 3e3e3efe 00003e3e 00000000     .....>>>>>......
   28aa8:	3efcf080 00fc3e3e 3e000000 3e3e3e3e     ...>>>.....>>>>>
   28ab8:	fefe3e3e 00000000 3efef8c0 00e0fc7e     >>.........>~...
   28ac8:	00000000 3e7efce0 00c0f8fe 00000000     ......~>........
   28ad8:	e0c00000 000000c0 fff00000 0000000f     ................
   28ae8:	f0fffff9 00000000 ff000307 000000ff     ................
   28af8:	01000000 00000000 00ffff00 00000000     ................
   28b08:	00000000 0000ffff 00000000 1fffe000     ................
   28b18:	0000ffff ff000000 000000ff 00000000     ................
   28b28:	e0000000 00003fff 00000000 00000000     .....?..........
   28b38:	00000000 037ffcc0 00000000 0000ffff     ................
   28b48:	00ffff00 fe000000 000003ff f0ffff00     ................
   28b58:	00000000 7f3f0000 0000003f ffff0000     ......?.?.......
   28b68:	ffe00000 ffff001f 00000000 ff000000     ................
   28b78:	000000ff 00000000 e0000000 00011ffe     ................
   28b88:	00000000 fffcf8f8 000000c7 c0000000     ................
   28b98:	00033ffe 0000ffff 3f000000 fc7e3e3f     .?.........??>~.
   28ba8:	0000e0f8 ff000000 7cf080ff 00f0f87c     ...........||...
   28bb8:	00000000 f8800000 000007ff 00000000     ................
   28bc8:	f8ff9f01 00011ffe ff000000 0000c0ff     ................
   28bd8:	ffffff80 00000000 00000000 00000000     ................
   28be8:	ffff0000 037ffcc0 ffff0000 00000000     ................
   28bf8:	ff000000 000000ff 00000000 0ffee000     ................
   28c08:	00000001 00000000 01000000 00f8ff0f     ................
   28c18:	fff80000 e0e0e0e7 e0e0ffff 000000e0     ................
   28c28:	00000000 00feff07 ff000000 0003ffff     ................
   28c38:	ffff0100 00000000 0ffff000 00000000     ................
   28c48:	c0000000 03033ffc c0fcff1f 00000000     .....?..........
   28c58:	3e3e1f0f ffff010f 00000000 80000000     ..>>............
   28c68:	00000000 ff070000 000007ff 07fffc00     ................
   28c78:	00000000 ff000000 000000ff e0000000     ................
   28c88:	00000ffe 00000000 00000000 00000000     ................
   28c98:	007fffc0 03030000 03030303 0303ffff     ................
   28ca8:	00000003 00000000 007fffc0 0f000000     ................
   28cb8:	0080ffff 7fff8000 00000000 0003fffe     ................
   28cc8:	00000000 ff000000 000080ff ffff8000     ................
	...
   28ce0:	07fffc80 00000000 ffff0000 000000ff     ................
   28cf0:	03000000 7c7c3f1f 00031f3f 00000000     .....?||?.......
   28d00:	7f7c7c7c 7c7c7c7f 7f000000 7c7c7c7f     |||..|||.....|||
   28d10:	007c7c7c 3f000000 7e7c7c7e 0000071f     |||....?~||~....
	...
   28d28:	00007f7f 1f000000 3e7c7c3e 0000071f     ........>||>....
   28d38:	00000000 7c7f1f03 00073f7c 00000000     .......||?......
   28d48:	00007f7f 00000000 01000000 7c7e3f1f     .............?~|
   28d58:	011f3f7e 00000000 7e7c7c3e 00010f3f     ~?......>||~?...
   28d68:	00000000 01000000 00000000 00000000     ................

00028d78 <loser>:
   28d78:	c0000000 00000080 00000000 000000c0     ................
   28d88:	00000000 0000c000 00000000 80000000     ................
   28d98:	80800080 00008000 00000000 80408000     ..............@.
   28da8:	00000080 00c08000 8040c000 00000000     ..........@.....
   28db8:	86000000 0000003b 39000000 000000e6     ....;......9....
   28dc8:	00000000 0000ff00 00000000 01b23c00     .............<..
   28dd8:	00000000 d2f00000 05000000 20180805     ............... 
   28de8:	00008060 10edab00 00180008 00000000     `...............
   28df8:	00000000 04000100 00020004 00000000     ................
   28e08:	00000000 00060600 00040202 03010000     ................
   28e18:	04060200 00010200 00000000 00000202     ................
   28e28:	00000102 04040200 02000406 00000000     ................
	...

00028ef8 <sevensegment>:
   28ef8:	0d2e100a 00001e01 00000000 00000000     ................
	...
   28f10:	fc780000 03030302 78fc0203 00000000     ..x........x....
   28f20:	00000000 00007eff 83838302 78fc0283     .....~.........x
   28f30:	83020000 02838383 ff7e78fc 80808000     .........x~.....
   28f40:	7eff0080 8302fc78 02838383 fc780000     ...~x.........x.
   28f50:	83838302 00000283 03030200 02030303     ................
   28f60:	fc7878fc 83838302 78fc0283 8302fc78     .xx........xx...
   28f70:	02838383 000078fc 3c180000 0000183c     .....x.....<<...
   28f80:	60000000 0060f0f0 00000000 00000000     ...`..`.........
   28f90:	00000000 c0403f1e 40c0c0c0 00001e3f     .....?@....@?...
   28fa0:	00000000 7eff0000 c1413e1c 41c1c1c1     .......~.>A....A
   28fb0:	00000000 c1c1c141 1c3e41c1 01010000     ....A....A>.....
   28fc0:	01010101 00007eff c1c1c141 1c3e41c1     .....~..A....A>.
   28fd0:	c1413e1c 41c1c1c1 00001c3e 00000000     .>A....A>.......
   28fe0:	7eff0000 c1413e1c 41c1c1c1 00001c3e     ...~.>A....A>...
   28ff0:	c1c1c141 1c3e41c1 00000000 183c3c18     A....A>......<<.
   29000:	00000000                                ....

00029004 <winner>:
   29004:	fe000000 000000fe fe000000 000000fe     ................
   29014:	00000000 00f8fe0e 7ee00000 00c0fe3e     ...........~>...
   29024:	3efc8000 fe000002 000000fe 0efefe00     ...>............
   29034:	0080e038 00fefe00 ff000000 000000ff     8...............
   29044:	07000000 3030181f 1f183030 00000007     ......0000......
   29054:	00000000 3f0f0000 000f3e38 3c1f0100     .......?8>.....<
   29064:	00033f38 3f000000 0000003f 003f3f00     8?.....??....??.
   29074:	1e030000 003f3f38 3b000000 0000003b     ....8??....;;...
	...
   29184:	00001010 0000050e 6f727245 6e692072     ........Error in
   29194:	61697469 697a696c 5320676e 61736565     itializing Seesa
   291a4:	722f2177 00006e2f 6f727245 2f722f72     w!/r/n..Error/r/
   291b4:	0000006e 6e756f46 65532064 77617365     n...Found Seesaw
   291c4:	2f722f21 0000006e 6c756f43 6f6e2064     !/r/n...Could no
   291d4:	72772074 20657469 73656553 70207761     t write Seesaw p
   291e4:	2f216e69 006e2f72 6c756f43 6f6e2064     in!/r/n.Could no
   291f4:	65732074 65732074 77617365 6f654e20     t set seesaw Neo
   29204:	65786970 7073206c 21646565 6e2f722f     pixel speed!/r/n
   29214:	00000000 6c756f43 6f6e2064 65732074     ....Could not se
   29224:	65732074 77617365 6f654e20 65786970     t seesaw Neopixe
   29234:	756e206c 7265626d 20666f20 69766564     l number of devi
   29244:	2f736563 006e2f72 6c756f43 6f6e2064     ces/r/n.Could no
   29254:	6e692074 61697469 657a696c 79654b20     t initialize Key
   29264:	21646170 6e2f722f 00000000 6f727245     pad!/r/n....Erro
   29274:	65722072 6e696461 65532067 77617365     r reading Seesaw
   29284:	756f6320 2173746e 6e2f722f 00000000      counts!/r/n....

00029294 <msgBaseGetHWID>:
   29294:	00000100                                ....

00029298 <msgKeypadEnableInt>:
   29298:	00010210                                ....

0002929c <msgKeypadGetCount>:
   2929c:	00000410                                ....

000292a0 <msgNeopixelBufLength>:
   292a0:	3000030e                                ...0

000292a4 <msgNeopixelPin>:
   292a4:	0003010e                                ....

000292a8 <msgNeopixelSpeed>:
   292a8:	0001020e 6f636e49 63657272 6f632074     ....Incorrect co
   292b8:	6e616d6d 61702064 656d6172 28726574     mmand parameter(
   292c8:	202e2973 746e4520 22207265 706c6568     s).  Enter "help
   292d8:	6f742022 65697620 20612077 7473696c     " to view a list
   292e8:	20666f20 69617661 6c62616c 6f632065      of available co
   292f8:	6e616d6d 0d2e7364 000a0d0a 6d6d6f43     mmands......Comm
   29308:	20646e61 20746f6e 6f636572 73696e67     and not recognis
   29318:	202e6465 746e4520 27207265 706c6568     ed.  Enter 'help
   29328:	6f742027 65697620 20612077 7473696c     ' to view a list
   29338:	20666f20 69617661 6c62616c 6f632065      of available co
   29348:	6e616d6d 0d2e7364 000a0d0a 706c6568     mmands......help
   29358:	00000000 65680a0d 0d3a706c 694c200a     ......help:.. Li
   29368:	20737473 206c6c61 20656874 69676572     sts all the regi
   29378:	72657473 63206465 616d6d6f 0d73646e     stered commands.
   29388:	000a0d0a                                ....

0002938c <xHelpCommand>:
   2938c:	00029354 0002935c 00015235 00000000     T...\...5R......
   2939c:	0001576c 00015764 00015768 00015784     lW..dW..hW...W..
   293ac:	00015760 00015770 00015774 00015778     `W..pW..tW..xW..
   293bc:	0001577c 20746f4e 756f6e65 54206867     |W..Not enough T
   293cc:	204b5341 646e6168 2073656c 6e69202d     ASK handles - in
   293dc:	61657263 54206573 435f4352 4e5f4746     crease TRC_CFG_N
   293ec:	4b534154 206e6920 53637274 7370616e     TASK in trcSnaps
   293fc:	43746f68 69666e6f 00682e67 20746f4e     hotConfig.h.Not 
   2940c:	756f6e65 49206867 68205253 6c646e61     enough ISR handl
   2941c:	2d207365 636e6920 73616572 52542065     es - increase TR
   2942c:	46435f43 494e5f47 69205253 7274206e     C_CFG_NISR in tr
   2943c:	616e5363 6f687370 6e6f4374 2e676966     cSnapshotConfig.
   2944c:	00000068 20746f4e 756f6e65 53206867     h...Not enough S
   2945c:	50414d45 45524f48 6e616820 73656c64     EMAPHORE handles
   2946c:	69202d20 6572636e 20657361 5f435254      - increase TRC_
   2947c:	5f474643 4d45534e 4f485041 69204552     CFG_NSEMAPHORE i
   2948c:	7274206e 616e5363 6f687370 6e6f4374     n trcSnapshotCon
   2949c:	2e676966 00000068 20746f4e 756f6e65     fig.h...Not enou
   294ac:	4d206867 58455455 6e616820 73656c64     gh MUTEX handles
   294bc:	69202d20 6572636e 20657361 5f435254      - increase TRC_
   294cc:	5f474643 54554d4e 69205845 7274206e     CFG_NMUTEX in tr
   294dc:	616e5363 6f687370 6e6f4374 2e676966     cSnapshotConfig.
   294ec:	00000068 20746f4e 756f6e65 51206867     h...Not enough Q
   294fc:	45554555 6e616820 73656c64 69202d20     UEUE handles - i
   2950c:	6572636e 20657361 5f435254 5f474643     ncrease TRC_CFG_
   2951c:	4555514e 69204555 7274206e 616e5363     NQUEUE in trcSna
   2952c:	6f687370 6e6f4374 2e676966 00000068     pshotConfig.h...
   2953c:	20746f4e 756f6e65 54206867 52454d49     Not enough TIMER
   2954c:	6e616820 73656c64 69202d20 6572636e      handles - incre
   2955c:	20657361 5f435254 5f474643 4d49544e     ase TRC_CFG_NTIM
   2956c:	69205245 7274206e 616e5363 6f687370     ER in trcSnapsho
   2957c:	6e6f4374 2e676966 00000068 20746f4e     tConfig.h...Not 
   2958c:	756f6e65 45206867 544e4556 554f5247     enough EVENTGROU
   2959c:	61682050 656c646e 202d2073 72636e69     P handles - incr
   295ac:	65736165 43525420 4746435f 56454e5f     ease TRC_CFG_NEV
   295bc:	47544e45 50554f52 206e6920 53637274     ENTGROUP in trcS
   295cc:	7370616e 43746f68 69666e6f 00682e67     napshotConfig.h.
   295dc:	20746f4e 756f6e65 53206867 41455254     Not enough STREA
   295ec:	4655424d 20524546 646e6168 2073656c     MBUFFER handles 
   295fc:	6e69202d 61657263 54206573 435f4352     - increase TRC_C
   2960c:	4e5f4746 45525453 55424d41 52454646     FG_NSTREAMBUFFER
   2961c:	206e6920 53637274 7370616e 43746f68      in trcSnapshotC
   2962c:	69666e6f 00682e67 20746f4e 756f6e65     onfig.h.Not enou
   2963c:	4d206867 41535345 55424547 52454646     gh MESSAGEBUFFER
   2964c:	6e616820 73656c64 69202d20 6572636e      handles - incre
   2965c:	20657361 5f435254 5f474643 53454d4e     ase TRC_CFG_NMES
   2966c:	45474153 46465542 69205245 7274206e     SAGEBUFFER in tr
   2967c:	616e5363 6f687370 6e6f4374 2e676966     cSnapshotConfig.
   2968c:	00000068 547a7370 65636172 45746547     h...pszTraceGetE
   2969c:	726f7272 646e6148 3a73656c 766e4920     rrorHandles: Inv
   296ac:	64696c61 6a626f20 63746365 7373616c     alid objectclass
   296bc:	00000021 61725476 6e456563 656c6261     !...vTraceEnable
   296cc:	43525428 4154535f 415f5452 54494157     (TRC_START_AWAIT
   296dc:	534f485f 6e202954 6120746f 776f6c6c     _HOST) not allow
   296ec:	69206465 6e53206e 68737061 6d20746f     ed in Snapshot m
   296fc:	0065646f 78656e55 74636570 61206465     ode.Unexpected a
   2970c:	6d756772 20746e65 76206f74 63617254     rgument to vTrac
   2971c:	616e4565 20656c62 616e7328 6f687370     eEnable (snapsho
   2972c:	6f6d2074 00296564 74437a54 00006c72     t mode).TzCtrl..
   2973c:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   2974c:	65684376 61446b63 6f546174 764f6542     vCheckDataToBeOv
   2975c:	72777265 65747469 726f466e 746c754d     erwrittenForMult
   2976c:	746e4569 76457972 73746e65 6f6e203a     iEntryEvents: no
   2977c:	746e4566 73656972 68436f54 206b6365     fEntriesToCheck 
   2978c:	30203d3d 00000000 43415254 53415f45     == 0....TRACE_AS
   2979c:	54524553 7270203a 61725476 65476563     SERT: prvTraceGe
   297ac:	53544474 6e49203a 696c6176 61762064     tDTS: Invalid va
   297bc:	2065756c 20726f66 61726170 616d5f6d     lue for param_ma
   297cc:	53544478 00000000 20646142 61726170     xDTS....Bad para
   297dc:	616d5f6d 53544478 206e6920 54767270     m_maxDTS in prvT
   297ec:	65636172 44746547 00005354 43415254     raceGetDTS..TRAC
   297fc:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   2980c:	65476563 6a624f74 48746365 6c646e61     ceGetObjectHandl
   2981c:	49203a65 6c61766e 76206469 65756c61     e: Invalid value
   2982c:	726f6620 6a626f20 63746365 7373616c      for objectclass
   2983c:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
   2984c:	7270203a 61725476 65476563 72615074     : prvTraceGetPar
   2985c:	203a6d61 61766e49 2064696c 756c6176     am: Invalid valu
   2986c:	6f662065 61702072 5f6d6172 0078616d     e for param_max.
   2987c:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   2988c:	61725476 65476563 69725074 7469726f     vTraceGetPriorit
   2989c:	6f725079 74726570 6f203a79 63656a62     yProperty: objec
   298ac:	616c6374 3e207373 5254203d 5f454341     tclass >= TRACE_
   298bc:	414c434e 53455353 00000000 43415254     NCLASSES....TRAC
   298cc:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   298dc:	65476563 69725074 7469726f 6f725079     ceGetPriorityPro
   298ec:	74726570 49203a79 6c61766e 76206469     perty: Invalid v
   298fc:	65756c61 726f6620 00646920 63617254     alue for id.Trac
   2990c:	65522065 64726f63 44207265 006f6d65     e Recorder Demo.
   2991c:	65747441 2074706d 69206f74 7865646e     Attempt to index
   2992c:	74756f20 65646973 65766520 6220746e      outside event b
   2993c:	65666675 00002172 43415254 53415f45     uffer!..TRACE_AS
   2994c:	54524553 7270203a 61725476 65536563     SERT: prvTraceSe
   2995c:	6a624f74 4e746365 3a656d61 6d616e20     tObjectName: nam
   2996c:	3d3d2065 4c554e20 0000004c 656c6c49     e == NULL...Ille
   2997c:	206c6167 656a626f 63207463 7373616c     gal object class
   2998c:	206e6920 54767270 65636172 4f746553      in prvTraceSetO
   2999c:	63656a62 6d614e74 00000065 656c6c49     bjectName...Ille
   299ac:	206c6167 646e6168 2820656c 69202930     gal handle (0) i
   299bc:	7270206e 61725476 65536563 6a624f74     n prvTraceSetObj
   299cc:	4e746365 2e656d61 00000000 43415254     ectName.....TRAC
   299dc:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   299ec:	65536563 6a624f74 53746365 65746174     ceSetObjectState
   299fc:	626f203a 7463656a 73616c63 3d3e2073     : objectclass >=
   29a0c:	41525420 4e5f4543 53414c43 00534553      TRACE_NCLASSES.
   29a1c:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   29a2c:	61725476 65536563 6a624f74 53746365     vTraceSetObjectS
   29a3c:	65746174 6e49203a 696c6176 61762064     tate: Invalid va
   29a4c:	2065756c 20726f66 00006469 43415254     lue for id..TRAC
   29a5c:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   29a6c:	65536563 69725074 7469726f 6f725079     ceSetPriorityPro
   29a7c:	74726570 6f203a79 63656a62 616c6374     perty: objectcla
   29a8c:	3e207373 5254203d 5f454341 414c434e     ss >= TRACE_NCLA
   29a9c:	53455353 00000000 43415254 53415f45     SSES....TRACE_AS
   29aac:	54524553 7270203a 61725476 65536563     SERT: prvTraceSe
   29abc:	69725074 7469726f 6f725079 74726570     tPriorityPropert
   29acc:	49203a79 6c61766e 76206469 65756c61     y: Invalid value
   29adc:	726f6620 00646920 43415254 53415f45      for id.TRACE_AS
   29aec:	54524553 7270203a 61725476 65536563     SERT: prvTraceSe
   29afc:	73615474 736e496b 636e6174 6e694665     tTaskInstanceFin
   29b0c:	65687369 49203a64 6c61766e 76206469     ished: Invalid v
   29b1c:	65756c61 726f6620 6e616820 00656c64     alue for handle.
   29b2c:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   29b3c:	61725476 74536563 4b65726f 656e7265     vTraceStoreKerne
   29b4c:	6c61436c 65203a6c 65646f63 203d3e20     lCall: ecode >= 
   29b5c:	46467830 00000000 43415254 53415f45     0xFF....TRACE_AS
   29b6c:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
   29b7c:	4b65726f 656e7265 6c61436c 6f203a6c     oreKernelCall: o
   29b8c:	63656a62 616c4374 3e207373 5254203d     bjectClass >= TR
   29b9c:	5f454341 414c434e 53455353 00000000     ACE_NCLASSES....
   29bac:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   29bbc:	61725476 74536563 4b65726f 656e7265     vTraceStoreKerne
   29bcc:	6c61436c 49203a6c 6c61766e 76206469     lCall: Invalid v
   29bdc:	65756c61 726f6620 6a626f20 4e746365     alue for objectN
   29bec:	65626d75 00000072 6f636552 72656472     umber...Recorder
   29bfc:	73756220 202d2079 68676968 69727020      busy - high pri
   29c0c:	7469726f 53492079 73752052 20676e69     ority ISR using 
   29c1c:	63737973 3f6c6c61 29322820 00000000     syscall? (2)....
   29c2c:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   29c3c:	61725476 74536563 4b65726f 656e7265     vTraceStoreKerne
   29c4c:	6c61436c 7469576c 6d754e68 63697265     lCallWithNumeric
   29c5c:	61726150 6c6e4f6d 49203a79 6c61766e     ParamOnly: Inval
   29c6c:	76206469 65756c61 726f6620 74766520     id value for evt
   29c7c:	65646f63 00000000 6f636552 72656472     code....Recorder
   29c8c:	73756220 202d2079 68676968 69727020      busy - high pri
   29c9c:	7469726f 53492079 73752052 20676e69     ority ISR using 
   29cac:	63737973 3f6c6c61 29342820 00000000     syscall? (4)....
   29cbc:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   29ccc:	61725476 74536563 4b65726f 656e7265     vTraceStoreKerne
   29cdc:	6c61436c 7469576c 72615068 203a6d61     lCallWithParam: 
   29cec:	63747665 2065646f 30203d3e 00464678     evtcode >= 0xFF.
   29cfc:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   29d0c:	61725476 74536563 4b65726f 656e7265     vTraceStoreKerne
   29d1c:	6c61436c 7469576c 72615068 203a6d61     lCallWithParam: 
   29d2c:	656a626f 6c437463 20737361 54203d3e     objectClass >= T
   29d3c:	45434152 4c434e5f 45535341 00000053     RACE_NCLASSES...
   29d4c:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   29d5c:	61725476 74536563 4b65726f 656e7265     vTraceStoreKerne
   29d6c:	6c61436c 7469576c 72615068 203a6d61     lCallWithParam: 
   29d7c:	61766e49 2064696c 756c6176 6f662065     Invalid value fo
   29d8c:	626f2072 7463656a 626d754e 00007265     r objectNumber..
   29d9c:	6f636552 72656472 73756220 202d2079     Recorder busy - 
   29dac:	68676968 69727020 7469726f 53492079     high priority IS
   29dbc:	73752052 20676e69 63737973 3f6c6c61     R using syscall?
   29dcc:	29332820 00000000 43415254 53415f45      (3)....TRACE_AS
   29ddc:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
   29dec:	5465726f 526b7361 79646165 6e49203a     oreTaskReady: In
   29dfc:	696c6176 61762064 2065756c 20726f66     valid value for 
   29e0c:	646e6168 0000656c 6f636552 72656472     handle..Recorder
   29e1c:	73756220 202d2079 68676968 69727020      busy - high pri
   29e2c:	7469726f 53492079 73752052 20676e69     ority ISR using 
   29e3c:	63737973 3f6c6c61 29312820 00000000     syscall? (1)....
   29e4c:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   29e5c:	61725476 74536563 5465726f 736b7361     vTraceStoreTasks
   29e6c:	63746977 49203a68 6c61766e 76206469     witch: Invalid v
   29e7c:	65756c61 726f6620 73617420 61685f6b     alue for task_ha
   29e8c:	656c646e 00000000 43415254 53415f45     ndle....TRACE_AS
   29e9c:	54524553 7270203a 61725476 65476563     SERT: prvTraceGe
   29eac:	6a624f74 53746365 65746174 6e49203a     tObjectState: In
   29ebc:	696c6176 61762064 2065756c 20726f66     valid value for 
   29ecc:	00006469 43415254 53415f45 54524553     id..TRACE_ASSERT
   29edc:	6975203a 65646e49 4f664f78 63656a62     : uiIndexOfObjec
   29eec:	49203a74 6c61766e 76206469 65756c61     t: Invalid value
   29efc:	726f6620 6a626f20 63746365 7373616c      for objectclass
   29f0c:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
   29f1c:	6975203a 65646e49 4f664f78 63656a62     : uiIndexOfObjec
   29f2c:	49203a74 6c61766e 76206469 65756c61     t: Invalid value
   29f3c:	726f6620 6a626f20 68746365 6c646e61      for objecthandl
   29f4c:	00000065 43415254 53415f45 54524553     e...TRACE_ASSERT
   29f5c:	6552203a 64726f63 6e207265 6920746f     : Recorder not i
   29f6c:	6974696e 7a696c61 202e6465 20657355     nitialized. Use 
   29f7c:	61725476 6e456563 656c6261 69202928     vTraceEnable() i
   29f8c:	6574736e 00216461 61747328 70757472     nstead!.(startup
   29f9c:	00000029 43415254 53415f45 54524553     )...TRACE_ASSERT
   29fac:	5478203a 65636172 69676552 72657473     : xTraceRegister
   29fbc:	69727453 203a676e 6562616c 3d3d206c     String: label ==
   29fcc:	4c554e20 0000004c 43415254 53415f45      NULL...TRACE_AS
   29fdc:	54524553 6552203a 64726f63 6e207265     SERT: Recorder n
   29fec:	6920746f 6974696e 7a696c61 202c6465     ot initialized, 
   29ffc:	6c6c6163 72547620 45656361 6c62616e     call vTraceEnabl
   2a00c:	20292865 73726966 00002174 454c4449     e() first!..IDLE
   2a01c:	00000000 00018d6c 00018d6c 00018d6c     ....l...l...l...
   2a02c:	00018ce4 00018dae 00018dc8 00018d6c     ............l...
   2a03c:	00018d6c 00018ce4 00018dae 20726d54     l...........Tmr 
   2a04c:	00637653                                Svc.

0002a050 <mmc_trans_multipliers>:
   2a050:	00000000 0000000a 0000000c 0000000d     ................
   2a060:	0000000f 00000014 0000001a 0000001e     ................
   2a070:	00000023 00000028 0000002d 00000034     #...(...-...4...
   2a080:	00000037 0000003c 00000046 00000050     7...<...F...P...

0002a090 <sd_mmc_trans_units>:
   2a090:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

0002a0ac <sd_trans_multipliers>:
   2a0ac:	00000000 0000000a 0000000c 0000000d     ................
   2a0bc:	0000000f 00000014 00000019 0000001e     ................
   2a0cc:	00000023 00000028 0000002d 00000032     #...(...-...2...
   2a0dc:	00000037 0000003c 00000046 00000050     7...<...F...P...

0002a0ec <__FUNCTION__.17101>:
   2a0ec:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
   2a0fc:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   2a10c:	00005d64 61766e69 6564696c 636f6920     d]..invalide ioc
   2a11c:	6320746c 000a646d 0000000d 0001ad6c     lt cmd......l...
   2a12c:	0001ad3c 0001ad34 0001ad4c 0001ad44     <...4...L...D...
   2a13c:	0001ad64 0001ad54 0001ad5c              d...T...\...

0002a148 <__FUNCTION__.17969>:
   2a148:	5f666968 646e6573 00000000              hif_send....

0002a154 <__FUNCTION__.17979>:
   2a154:	5f666968 00727369                       hif_isr.

0002a15c <__FUNCTION__.17988>:
   2a15c:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

0002a16c <__FUNCTION__.18000>:
   2a16c:	5f666968 65636572 00657669              hif_receive.

0002a178 <__FUNCTION__.18016>:
   2a178:	5f666968 69676572 72657473 0062635f     hif_register_cb.
   2a188:	66696828 49572029 485f4946 5f54534f     (hif) WIFI_HOST_
   2a198:	5f564352 4c525443 6220315f 66207375     RCV_CTRL_1 bus f
   2a1a8:	0a6c6961 00000000 66696828 64612029     ail.....(hif) ad
   2a1b8:	73657264 75622073 61662073 000a6c69     dress bus fail..
   2a1c8:	66696828 6f432029 70757272 20646574     (hif) Corrupted 
   2a1d8:	6b636170 53207465 20657a69 7525203d     packet Size = %u
   2a1e8:	204c3c20 7525203d 2047202c 7525203d      <L = %u, G = %u
   2a1f8:	504f202c 25203d20 3e583230 0000000a     , OP = %02X>....
   2a208:	49464957 6c616320 6361626c 7369206b     WIFI callback is
   2a218:	746f6e20 67657220 65747369 0a646572      not registered.
   2a228:	00000000 6b6f6353 63207465 626c6c61     ....Scoket callb
   2a238:	206b6361 6e207369 7220746f 73696765     ack is not regis
   2a248:	65726574 00000a64 2061744f 6c6c6163     tered...Ota call
   2a258:	6b636162 20736920 20746f6e 69676572     back is not regi
   2a268:	72657473 000a6465 70797243 63206f74     stered..Crypto c
   2a278:	626c6c61 206b6361 6e207369 7220746f     allback is not r
   2a288:	73696765 65726574 00000a64 6d676953     egistered...Sigm
   2a298:	61632061 61626c6c 69206b63 6f6e2073     a callback is no
   2a2a8:	65722074 74736967 64657265 0000000a     t registered....
   2a2b8:	66696828 6e692029 696c6176 72672064     (hif) invalid gr
   2a2c8:	2070756f 000a4449 66696828 6f682029     oup ID..(hif) ho
   2a2d8:	61207473 64207070 276e6469 65732074     st app didn't se
   2a2e8:	58522074 6e6f4420 253c2065 253c3e75     t RX Done <%u><%
   2a2f8:	000a3e58 66696828 72572029 20676e6f     X>..(hif) Wrong 
   2a308:	657a6953 0000000a 66696828 61462029     Size....(hif) Fa
   2a318:	2065736c 65746e69 70757272 6c252074     lse interrupt %l
   2a328:	00000078 66696828 61462029 74206c69     x...(hif) Fail t
   2a338:	6552206f 69206461 7265746e 74707572     o Read interrupt
   2a348:	67657220 0000000a 46494828 61462029      reg....(HIF) Fa
   2a358:	74206c69 6168206f 656c646e 746e6920     il to handle int
   2a368:	75727265 25207470 72742064 67412079     errupt %d try Ag
   2a378:	2e6e6961 00000a2e 66696820 6365725f     ain..... hif_rec
   2a388:	65766965 6e49203a 696c6176 72612064     eive: Invalid ar
   2a398:	656d7567 000a746e 20505041 75716552     gument..APP Requ
   2a3a8:	65747365 69532064 6920657a 616c2073     ested Size is la
   2a3b8:	72656772 61687420 6874206e 65722065     rger than the re
   2a3c8:	65766963 75622064 72656666 7a697320     cived buffer siz
   2a3d8:	253c2065 253c3e75 0a3e756c 00000000     e <%u><%lu>.....
   2a3e8:	20505041 75716552 65747365 64412064     APP Requested Ad
   2a3f8:	73657264 65622073 646e6f79 65687420     dress beyond the
   2a408:	63657220 64657669 66756220 20726566      recived buffer 
   2a418:	72646461 20737365 20646e61 676e656c     address and leng
   2a428:	000a6874 20705247 6425203f 0000000a     th..GRp ? %d....
   2a438:	50504128 4e492829 00294f46 776f6c53     (APP)(INFO).Slow
   2a448:	20676e69 6e776f64 0a2e2e2e 00000000     ing down........
   2a458:	46494828 69614629 6f74206c 6b617720     (HIF)Fail to wak
   2a468:	74207075 63206568 0a706968 00000000     up the chip.....

0002a478 <__FUNCTION__.17951>:
   2a478:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

0002a484 <__FUNCTION__.17980>:
   2a484:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

0002a494 <__FUNCTION__.18011>:
   2a494:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
   2a4a4:	0063735f 666e6f43 7463696c 49206465     _sc.Conflicted I
   2a4b4:	20222050 252e7525 75252e75 2075252e     P " %u.%u.%u.%u 
   2a4c4:	000a2022 20514552 20746f4e 69666564     " ..REQ Not defi
   2a4d4:	2064656e 000a6425 2079654b 6e207369     ned %d..Key is n
   2a4e4:	7620746f 64696c61 0000000a 61766e49     ot valid....Inva
   2a4f4:	2064696c 0a79654b 00000000 44495353     lid Key.....SSID
   2a504:	4e454c20 564e4920 44494c41 0000000a      LEN INVALID....
   2a514:	49204843 4c41564e 000a4449 61766e49     CH INVALID..Inva
   2a524:	2064696c 20706557 2079656b 65646e69     lid Wep key inde
   2a534:	64252078 0000000a 61766e49 2064696c     x %d....Invalid 
   2a544:	20706557 2079656b 676e656c 25206874     Wep key length %
   2a554:	00000a64 6f636e49 63657272 53502074     d...Incorrect PS
   2a564:	656b204b 656c2079 6874676e 0000000a     K key length....
   2a574:	65646e75 656e6966 65732064 79742063     undefined sec ty
   2a584:	000a6570 6d726946 65726177 72657620     pe..Firmware ver
   2a594:	3a202020 2e752520 252e7525 76532075        : %u.%u.%u Sv
   2a5a4:	7665726e 0a752520 00000000 6d726946     nrev %u.....Firm
   2a5b4:	65726177 69754220 2520646c 69542073     ware Build %s Ti
   2a5c4:	2520656d 00000a73 6d726946 65726177     me %s...Firmware
   2a5d4:	6e694d20 69726420 20726576 20726576      Min driver ver 
   2a5e4:	7525203a 2e75252e 000a7525 76697244     : %u.%u.%u..Driv
   2a5f4:	76207265 203a7265 252e7525 75252e75     er ver: %u.%u.%u
   2a604:	0000000a 323a3132 34313a38 00000000     ....21:28:14....
   2a614:	2079614d 32203231 00313230 76697244     May 12 2021.Driv
   2a624:	62207265 746c6975 20746120 25097325     er built at %s.%
   2a634:	00000a73 6d73694d 68637461 72694620     s...Mismatch Fir
   2a644:	7277616d 65562065 6f697372 00000a6e     mawre Version...

0002a654 <__FUNCTION__.17808>:
   2a654:	70696863 6b61775f 00000065              chip_wake...

0002a660 <__FUNCTION__.17857>:
   2a660:	70696863 6965645f 0074696e 6c696166     chip_deinit.fail
   2a670:	74206465 6564206f 696e692d 6c616974     ed to de-initial
   2a680:	0a657a69 00000000 20737542 6f727265     ize.....Bus erro
   2a690:	35282072 64252e29 786c2520 0000000a     r (5).%d %lx....
   2a6a0:	6c696146 74206465 6177206f 2070756b     Failed to wakup 
   2a6b0:	20656874 70696863 0000000a 76697244     the chip....Driv
   2a6c0:	65567265 666e4972 30203a6f 38302578     erVerInfo: 0x%08
   2a6d0:	000a786c                                lx..

0002a6d4 <__FUNCTION__.17855>:
   2a6d4:	645f6d6e 695f7672 0074696e              nm_drv_init.

0002a6e0 <__FUNCTION__.17862>:
   2a6e0:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...
   2a6f0:	696d6e5b 6f747320 203a5d70 70696863     [nmi stop]: chip
   2a700:	6965645f 2074696e 6c696166 0000000a     _deinit fail....
   2a710:	696d6e5b 6f747320 203a5d70 20495053     [nmi stop]: SPI 
   2a720:	73616c66 69642068 6c626173 61662065     flash disable fa
   2a730:	000a6c69 696d6e5b 6f747320 203a5d70     il..[nmi stop]: 
   2a740:	6c696166 696e6920 75622074 00000a73     fail init bus...
   2a750:	6c696166 74206465 6e65206f 656c6261     failed to enable
   2a760:	746e6920 75727265 2e737470 00000a2e      interrupts.....
   2a770:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
   2a780:	6e69206c 62207469 000a7375 70696843     l init bus..Chip
   2a790:	20444920 0a786c25 00000000 0001bce8      ID %lx.........
   2a7a0:	0001bce8 0001bd18 0001bc9a 0001bcbe     ................
   2a7b0:	0001bccc 0001bcfe 0001bcfe 0001bd46     ............F...
   2a7c0:	0001bc7e 0001bd7c 0001bd7c 0001bd7c     ~...|...|...|...
   2a7d0:	0001bd7c 0001bcda 0001bf6a 0001bf6a     |.......j...j...
   2a7e0:	0001bfa2 0001bf14 0001bf3a 0001bf4a     ........:...J...
   2a7f0:	0001bf84 0001bf84 0001bfdc 0001bef0     ................
   2a800:	0001c3b0 0001c3b0 0001c3b0 0001c3b0     ................
   2a810:	0001bf5a cac4c9c3                       Z.......

0002a818 <__FUNCTION__.17130>:
   2a818:	5f697073 00646d63                       spi_cmd.

0002a820 <__FUNCTION__.17137>:
   2a820:	5f697073 61746164 7073725f 00000000     spi_data_rsp....

0002a830 <__FUNCTION__.17146>:
   2a830:	5f697073 5f646d63 00707372              spi_cmd_rsp.

0002a83c <__FUNCTION__.17179>:
   2a83c:	5f697073 5f646d63 706d6f63 6574656c     spi_cmd_complete
   2a84c:	00000000                                ....

0002a850 <__FUNCTION__.17225>:
   2a850:	5f697073 61746164 6972775f 00006574     spi_data_write..

0002a860 <__FUNCTION__.17237>:
   2a860:	5f697073 74697277 65725f65 00000067     spi_write_reg...

0002a870 <__FUNCTION__.17248>:
   2a870:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

0002a880 <__FUNCTION__.17260>:
   2a880:	5f697073 64616572 6765725f 00000000     spi_read_reg....

0002a890 <__FUNCTION__.17271>:
   2a890:	735f6d6e 725f6970 00646165              nm_spi_read.

0002a89c <__FUNCTION__.17292>:
   2a89c:	735f6d6e 695f6970 0074696e              nm_spi_init.

0002a8a8 <crc7_syndrome_table>:
   2a8a8:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
   2a8b8:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
   2a8c8:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
   2a8d8:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
   2a8e8:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
   2a8f8:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
   2a908:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
   2a918:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
   2a928:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
   2a938:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
   2a948:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
   2a958:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
   2a968:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
   2a978:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
   2a988:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
   2a998:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
   2a9a8:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   2a9b8:	6e692064 6e726574 72206c61 20646165     d internal read 
   2a9c8:	746f7270 6c6f636f 74697720 52432068     protocol with CR
   2a9d8:	6e6f2043 6572202c 69727974 7720676e     C on, retyring w
   2a9e8:	20687469 20435243 2e66666f 000a2e2e     ith CRC off.....
   2a9f8:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   2aa08:	6e692064 6e726574 72206c61 20646165     d internal read 
   2aa18:	746f7270 6c6f636f 0a2e2e2e 00000000     protocol........
   2aa28:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   2aa38:	6e692064 6e726574 77206c61 65746972     d internal write
   2aa48:	6f727020 6f636f74 6572206c 2e2e2e67      protocol reg...
   2aa58:	0000000a 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   2aa68:	206c6961 20646d63 64616572 69686320     ail cmd read chi
   2aa78:	64692070 0a2e2e2e 00000000 696d6e5b     p id........[nmi
   2aa88:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   2aa98:	72202c64 20646165 636f6c62 2528206b     d, read block (%
   2aaa8:	29783830 0a2e2e2e 00000000 65736552     08x)........Rese
   2aab8:	6e612074 65722064 20797274 25206425     t and retry %d %
   2aac8:	2520786c 00000a64 696d6e5b 69707320     lx %d...[nmi spi
   2aad8:	46203a5d 656c6961 6d632064 77202c64     ]: Failed cmd, w
   2aae8:	65746972 6f6c6220 28206b63 78383025     rite block (%08x
   2aaf8:	2e2e2e29 0000000a 696d6e5b 69707320     ).......[nmi spi
   2ab08:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   2ab18:	6b636f6c 646d6320 69727720 202c6574     lock cmd write, 
   2ab28:	20737562 6f727265 2e2e2e72 0000000a     bus error.......
   2ab38:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   2ab48:	61642064 62206174 6b636f6c 69727720     d data block wri
   2ab58:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
   2ab68:	0000000a 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   2ab78:	656c6961 61642064 62206174 6b636f6c     ailed data block
   2ab88:	63726320 69727720 202c6574 20737562      crc write, bus 
   2ab98:	6f727265 2e2e2e72 0000000a 696d6e5b     error.......[nmi
   2aba8:	69707320 46203a5d 656c6961 75622064      spi]: Failed bu
   2abb8:	72652073 2e726f72 000a2e2e 696d6e5b     s error.....[nmi
   2abc8:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   2abd8:	72206174 6f707365 2065736e 64616572     ta response read
   2abe8:	7825202c 20782520 000a7825 696d6e5b     , %x %x %x..[nmi
   2abf8:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
   2ac08:	206b636f 61746164 69727720 2e2e6574     ock data write..
   2ac18:	00000a2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   2ac28:	656c6961 6d632064 72772064 2c657469     ailed cmd write,
   2ac38:	73756220 72726520 2e2e726f 00000a2e      bus error......
   2ac48:	696d6e5b 69707320 73203a5d 62206970     [nmi spi]: spi b
   2ac58:	65666675 69732072 7420657a 73206f6f     uffer size too s
   2ac68:	6c6c616d 64252820 25282029 000a2964     mall (%d) (%d)..
   2ac78:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   2ac88:	6d632064 65722064 6e6f7073 202c6573     d cmd response, 
   2ac98:	20646d63 32302528 202c2978 70736572     cmd (%02x), resp
   2aca8:	30252820 0a297832 00000000 696d6e5b      (%02x).....[nmi
   2acb8:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   2acc8:	74732064 20657461 70736572 65736e6f     d state response
   2acd8:	61747320 28206574 78323025 00000a29      state (%02x)...
   2ace8:	696d6e5b 69707320 45203a5d 726f7272     [nmi spi]: Error
   2acf8:	6164202c 72206174 20646165 70736572     , data read resp
   2ad08:	65736e6f 30252820 0a297832 00000000     onse (%02x).....
   2ad18:	696d6e5b 69707320 62203a5d 65666675     [nmi spi]: buffe
   2ad28:	766f2072 75727265 6877206e 72206e65     r overrun when r
   2ad38:	69646165 6420676e 2e617461 0000000a     eading data.....
   2ad48:	696d6e5b 69707320 62203a5d 65666675     [nmi spi]: buffe
   2ad58:	766f2072 75727265 6877206e 72206e65     r overrun when r
   2ad68:	69646165 6320676e 0a2e6372 00000000     eading crc......
   2ad78:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   2ad88:	61642064 62206174 6b636f6c 61657220     d data block rea
   2ad98:	62202c64 65207375 726f7272 0a2e2e2e     d, bus error....
   2ada8:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   2adb8:	656c6961 61642064 62206174 6b636f6c     ailed data block
   2adc8:	63726320 61657220 62202c64 65207375      crc read, bus e
   2add8:	726f7272 0a2e2e2e 00000000 696d6e5b     rror........[nmi
   2ade8:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   2adf8:	72206174 6f707365 2065736e 64616572     ta response read
   2ae08:	7562202c 72652073 2e726f72 000a2e2e     , bus error.....
   2ae18:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   2ae28:	6d632064 65722064 6e6f7073 72206573     d cmd response r
   2ae38:	2c646165 73756220 72726520 2e2e726f     ead, bus error..
   2ae48:	00000a2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   2ae58:	656c6961 6d632064 72202c64 20646165     ailed cmd, read 
   2ae68:	20676572 38302528 2e2e2978 00000a2e     reg (%08x)......
   2ae78:	65736552 6e612074 65722064 20797274     Reset and retry 
   2ae88:	25206425 000a786c 696d6e5b 69707320     %d %lx..[nmi spi
   2ae98:	46203a5d 656c6961 6d632064 77202c64     ]: Failed cmd, w
   2aea8:	65746972 67657220 30252820 2e297838     rite reg (%08x).
   2aeb8:	000a2e2e 65736552 6e612074 65722064     ....Reset and re
   2aec8:	20797274 25206425 2520786c 000a786c     try %d %lx %lx..
   2aed8:	52524528 75432952 6e657272 253c2074     (ERRR)Current <%
   2aee8:	000a3e64 6b636f53 206f7420 656c6564     d>..Sock to dele
   2aef8:	3c206574 0a3e6425 00000000 6b636f53     te <%d>.....Sock
   2af08:	25207465 65732064 6f697373 4449206e     et %d session ID
   2af18:	25203d20 000a0d64 42000800 42000c00      = %d......B...B
   2af28:	42001000 42001400 42001800 42001c00     ...B...B...B...B
   2af38:	0001eb7e 0001eb7a 0001eb7a 0001ebe0     ~...z...z.......
   2af48:	0001ebe0 0001eb92 0001eb84 0001eb98     ................
   2af58:	0001ebce 0001ed0c 0001ecec 0001ecec     ................
   2af68:	0001ed78 0001ecfe 0001ed1a 0001ecf0     x...............
   2af78:	0001ed28 0001ed68                       (...h...

0002af80 <_tcc_apbcmasks>:
   2af80:	00000100 00000200 00000400              ............

0002af8c <_tcc_cc_nums>:
   2af8c:	00020204                                ....

0002af90 <_tcc_gclk_ids>:
   2af90:	001b1a1a                                ....

0002af94 <_tcc_maxs>:
   2af94:	00ffffff 00ffffff 0000ffff              ............

0002afa0 <_tcc_ow_nums>:
   2afa0:	00020408                                ....

0002afa4 <_tcc_intflag>:
   2afa4:	00000001 00000002 00000004 00000008     ................
   2afb4:	00001000 00002000 00004000 00008000     ..... ...@......
   2afc4:	00010000 00020000 00040000 00080000     ................

0002afd4 <tcc_interrupt_vectors.12458>:
   2afd4:	0011100f                                ....

0002afd8 <LfnOfs>:
   2afd8:	07050301 12100e09 1c181614 0000001e     ................

0002afe8 <excvt.4558>:
   2afe8:	b6909a80 808fb78e d8d4d3d2 8f8eded7     ................
   2aff8:	e2929290 ebeae399 9d9a9959 9f9e9d9c     ........Y.......
   2b008:	e9e0d6b5 a7a6a5a5 abaaa9a8 afae21ac     .............!..
   2b018:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
   2b028:	c3c2c1c0 c7c7c5c4 cbcac9c8 cfcecdcc     ................
   2b038:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
   2b048:	e3e2e1e0 e7e6e5e5 ebeae9e7 efeeeded     ................
   2b058:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................
   2b068:	3c3a2a22 7f7c3f3e 00000000 3d3b2c2b     "*:<>?|.....+,;=
   2b078:	00005d5b                                []..

0002b07c <Tbl>:
   2b07c:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
   2b08c:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
   2b09c:	00e600c9 00f400c6 00f200f6 00f900fb     ................
   2b0ac:	00d600ff 00f800dc 00d800a3 019200d7     ................
   2b0bc:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
   2b0cc:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
   2b0dc:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
   2b0ec:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
   2b0fc:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
   2b10c:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
   2b11c:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
   2b12c:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
   2b13c:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
   2b14c:	00da00de 00d900db 00dd00fd 00b400af     ................
   2b15c:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
   2b16c:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

0002b17c <tbl_lower.4308>:
   2b17c:	00620061 00640063 00660065 00680067     a.b.c.d.e.f.g.h.
   2b18c:	006a0069 006c006b 006e006d 0070006f     i.j.k.l.m.n.o.p.
   2b19c:	00720071 00740073 00760075 00780077     q.r.s.t.u.v.w.x.
   2b1ac:	007a0079 00a200a1 00a500a3 00af00ac     y.z.............
   2b1bc:	00e100e0 00e300e2 00e500e4 00e700e6     ................
   2b1cc:	00e900e8 00eb00ea 00ed00ec 00ef00ee     ................
   2b1dc:	00f100f0 00f300f2 00f500f4 00f800f6     ................
   2b1ec:	00fa00f9 00fc00fb 00fe00fd 010100ff     ................
   2b1fc:	01050103 01090107 010d010b 0111010f     ................
   2b20c:	01150113 01190117 011d011b 0121011f     ..............!.
   2b21c:	01250123 01290127 012d012b 0131012f     #.%.'.).+.-./.1.
   2b22c:	01350133 013a0137 013e013c 01420140     3.5.7.:.<.>.@.B.
   2b23c:	01460144 014b0148 014f014d 01530151     D.F.H.K.M.O.Q.S.
   2b24c:	01570155 015b0159 015f015d 01630161     U.W.Y.[.]._.a.c.
   2b25c:	01670165 016b0169 016f016d 01730171     e.g.i.k.m.o.q.s.
   2b26c:	01770175 017c017a 0192017e 03b203b1     u.w.z.|.~.......
   2b27c:	03b403b3 03b603b5 03b803b7 03ba03b9     ................
   2b28c:	03bc03bb 03be03bd 03c003bf 03c303c1     ................
   2b29c:	03c503c4 03c703c6 03c903c8 043003ca     ..............0.
   2b2ac:	04320431 04340433 04360435 04380437     1.2.3.4.5.6.7.8.
   2b2bc:	043a0439 043c043b 043e043d 0440043f     9.:.;.<.=.>.?.@.
   2b2cc:	04420441 04440443 04460445 04480447     A.B.C.D.E.F.G.H.
   2b2dc:	044a0449 044c044b 044e044d 0451044f     I.J.K.L.M.N.O.Q.
   2b2ec:	04530452 04550454 04570456 04590458     R.S.T.U.V.W.X.Y.
   2b2fc:	045b045a 045e045c 2170045f 21722171     Z.[.\.^._.p!q!r!
   2b30c:	21742173 21762175 21782177 217a2179     s!t!u!v!w!x!y!z!
   2b31c:	217c217b 217e217d ff41217f ff43ff42     {!|!}!~!.!A.B.C.
   2b32c:	ff45ff44 ff47ff46 ff49ff48 ff4bff4a     D.E.F.G.H.I.J.K.
   2b33c:	ff4dff4c ff4fff4e ff51ff50 ff53ff52     L.M.N.O.P.Q.R.S.
   2b34c:	ff55ff54 ff57ff56 ff59ff58 0000ff5a     T.U.V.W.X.Y.Z...

0002b35c <tbl_upper.4309>:
   2b35c:	00420041 00440043 00460045 00480047     A.B.C.D.E.F.G.H.
   2b36c:	004a0049 004c004b 004e004d 0050004f     I.J.K.L.M.N.O.P.
   2b37c:	00520051 00540053 00560055 00580057     Q.R.S.T.U.V.W.X.
   2b38c:	005a0059 ffe00021 ffe5ffe1 ffe3ffe2     Y.Z.!...........
   2b39c:	00c100c0 00c300c2 00c500c4 00c700c6     ................
   2b3ac:	00c900c8 00cb00ca 00cd00cc 00cf00ce     ................
   2b3bc:	00d100d0 00d300d2 00d500d4 00d800d6     ................
   2b3cc:	00da00d9 00dc00db 00de00dd 01000178     ............x...
   2b3dc:	01040102 01080106 010c010a 0110010e     ................
   2b3ec:	01140112 01180116 011c011a 0120011e     .............. .
   2b3fc:	01240122 01280126 012c012a 0130012e     ".$.&.(.*.,...0.
   2b40c:	01340132 01390136 013d013b 0141013f     2.4.6.9.;.=.?.A.
   2b41c:	01450143 014a0147 014e014c 01520150     C.E.G.J.L.N.P.R.
   2b42c:	01560154 015a0158 015e015c 01620160     T.V.X.Z.\.^.`.b.
   2b43c:	01660164 016a0168 016e016c 01720170     d.f.h.j.l.n.p.r.
   2b44c:	01760174 017b0179 0191017d 03920391     t.v.y.{.}.......
   2b45c:	03940393 03960395 03980397 039a0399     ................
   2b46c:	039c039b 039e039d 03a0039f 03a303a1     ................
   2b47c:	03a503a4 03a703a6 03a903a8 041003aa     ................
   2b48c:	04120411 04140413 04160415 04180417     ................
   2b49c:	041a0419 041c041b 041e041d 0420041f     .............. .
   2b4ac:	04220421 04240423 04260425 04280427     !.".#.$.%.&.'.(.
   2b4bc:	042a0429 042c042b 042e042d 0401042f     ).*.+.,.-.../...
   2b4cc:	04030402 04050404 04070406 04090408     ................
   2b4dc:	040b040a 040e040c 2160040f 21622161     ..........`!a!b!
   2b4ec:	21642163 21662165 21682167 216a2169     c!d!e!f!g!h!i!j!
   2b4fc:	216c216b 216e216d ff21216f ff23ff22     k!l!m!n!o!!.".#.
   2b50c:	ff25ff24 ff27ff26 ff29ff28 ff2bff2a     $.%.&.'.(.).*.+.
   2b51c:	ff2dff2c ff2fff2e ff31ff30 ff33ff32     ,.-.../.0.1.2.3.
   2b52c:	ff35ff34 ff37ff36 ff39ff38 0000ff3a     4.5.6.7.8.9.:...
   2b53c:	4354514d 00000000 00000004 00000000     MQTC............
	...
   2b554:	0001003c 5754514d 00000000 00000000     <...MQTW........
	...
   2b594:	4354514d 00000000 00000004 00000000     MQTC............
	...
   2b5ac:	0001003c 5754514d 00000000 00000000     <...MQTW........
	...
   2b5ec:	5454514d 00000000 7349514d 00007064     MQTT....MQIsdp..
   2b5fc:	00023a82 00023a7c 00023a76 00023a70     .:..|:..v:..p:..
   2b60c:	00023a88 00023a90 00023a88 00023a6a     .:...:...:..j:..
   2b61c:	00023a64 00023a88 00023a5e 00023a5e     d:...:..^:..^:..
   2b62c:	00023a58 00023a52 00023a90 00023afa     X:..R:...:...:..
   2b63c:	00023af4 00023aee 00023ae8 00023b00     .:...:...:...;..
   2b64c:	00023b08 00023b00 00023ae2 00023adc     .;...;...:...:..
   2b65c:	00023b00 00023ad6 00023ad6 00023ad0     .;...:...:...:..
   2b66c:	00023aca 00023b08 00023b74 00023b6e     .:...;..t;..n;..
   2b67c:	00023b68 00023b62 00023b7a 00023b7a     h;..b;..z;..z;..
   2b68c:	00023b7a 00023b5c 00023b56 00023b7a     z;..\;..V;..z;..
   2b69c:	00023b50 00023b50 00023b4a 00023b44     P;..P;..J;..D;..
   2b6ac:	33323130 37363534 62613938 66656463     0123456789abcdef
   2b6bc:	00000d31 6e617254 72656673 636e452d     1...Transfer-Enc
   2b6cc:	6e69646f 00203a67 6e6e6f43 69746365     oding: .Connecti
   2b6dc:	203a6e6f 00000000 50545448 0000002f     on: ....HTTP/...
   2b6ec:	20544547 00000000 54534f50 00000020     GET ....POST ...
   2b6fc:	454c4544 00204554 20545550 00000000     DELETE .PUT ....
   2b70c:	4954504f 20534e4f 00000000 44414548     OPTIONS ....HEAD
   2b71c:	00000020 54544820 2e312f50 000a0d31      ... HTTP/1.1...
   2b72c:	72657355 6567412d 203a746e 00000000     User-Agent: ....
   2b73c:	74736f48 0000203a 6e6e6f43 69746365     Host: ..Connecti
   2b74c:	203a6e6f 7065654b 696c412d 0a0d6576     on: Keep-Alive..
   2b75c:	00000000 65636341 452d7470 646f636e     ....Accept-Encod
   2b76c:	3a676e69 000a0d20 65636341 432d7470     ing: ...Accept-C
   2b77c:	73726168 203a7465 2d667475 000a0d38     harset: utf-8...
   2b78c:	6e617254 72656673 636e452d 6e69646f     Transfer-Encodin
   2b79c:	63203a67 6b6e7568 0a0d6465 00000000     g: chunked......
   2b7ac:	00007525 746e6f43 2d746e65 676e654c     %u..Content-Leng
   2b7bc:	203a6874 00000000 656d7461 2e312f6c     th: ....atmel/1.
   2b7cc:	00322e30 70747468 002f2f3a 70747468     0.2.http://.http
   2b7dc:	2f2f3a73 00000000 42002000 42002400     s://..... .B.$.B
   2b7ec:	42002800 0a0d0a0d 2d2d2d2d 4553452d     .(.B....-----ESE
   2b7fc:	20363135 6e69614d 6f725020 6d617267     516 Main Program
   2b80c:	2d2d2d2d 000a0d2d 0a0d0a0d 74696e49     -----.......Init
   2b81c:	696c6169 4820657a 2e2e2e57 00000a0d     ialize HW.......
   2b82c:	6f727245 6e692072 61697469 697a696c     Error initializi
   2b83c:	4920676e 44204332 65766972 0a0d2172     ng I2C Driver!..
   2b84c:	00000000 74696e49 696c6169 2064657a     ....Initialized 
   2b85c:	20433249 76697244 0d217265 0000000a     I2C Driver!.....
   2b86c:	6f727245 6e692072 61697469 697a696c     Error initializi
   2b87c:	5320676e 61736565 0a0d2177 00000000     ng Seesaw!......
   2b88c:	74696e49 696c6169 2064657a 73656553     Initialized Sees
   2b89c:	0d217761 0000000a 6f727245 6e692072     aw!.....Error in
   2b8ac:	61697469 697a696c 4f20676e 2044454c     itializing OLED 
   2b8bc:	76697244 0d217265 0000000a 74696e49     Driver!.....Init
   2b8cc:	696c6169 2064657a 44454c4f 69724420     ialized OLED Dri
   2b8dc:	21726576 00000a0d 70616548 66656220     ver!....Heap bef
   2b8ec:	2065726f 72617473 676e6974 73617420     ore starting tas
   2b8fc:	203a736b 0a0d6425 00000000 5f494c43     ks: %d......CLI_
   2b90c:	4b534154 00000000 3a525245 494c4320     TASK....ERR: CLI
   2b91c:	73617420 6f63206b 20646c75 20746f6e      task could not 
   2b92c:	69206562 6974696e 7a696c61 0d216465     be initialized!.
   2b93c:	0000000a 70616548 74666120 73207265     ....Heap after s
   2b94c:	74726174 20676e69 3a494c43 0d642520     tarting CLI: %d.
   2b95c:	0000000a 49464957 5341545f 0000004b     ....WIFI_TASK...
   2b96c:	3a525245 46495720 61742049 63206b73     ERR: WIFI task c
   2b97c:	646c756f 746f6e20 20656220 74696e69     ould not be init
   2b98c:	696c6169 2164657a 00000a0d 70616548     ialized!....Heap
   2b99c:	74666120 73207265 74726174 20676e69      after starting 
   2b9ac:	49464957 6425203a 00000a0d 54204955     WIFI: %d....UI T
   2b9bc:	006b7361 3a525245 20495520 6b736174     ask.ERR: UI task
   2b9cc:	756f6320 6e20646c 6220746f 6e692065      could not be in
   2b9dc:	61697469 657a696c 0a0d2164 00000000     itialized!......
   2b9ec:	70616548 74666120 73207265 74726174     Heap after start
   2b9fc:	20676e69 54204955 3a6b7361 0d642520     ing UI Task: %d.
   2ba0c:	0000000a 746e6f43 206c6f72 6b736154     ....Control Task
   2ba1c:	00000000 3a525245 6e6f4320 6c6f7274     ....ERR: Control
   2ba2c:	73617420 6f63206b 20646c75 20746f6e      task could not 
   2ba3c:	69206562 6974696e 7a696c61 0d216465     be initialized!.
   2ba4c:	0000000a 70616548 74666120 73207265     ....Heap after s
   2ba5c:	74726174 20676e69 746e6f43 206c6f72     tarting Control 
   2ba6c:	6b736154 6425203a 00000a0d 6867694c     Task: %d....Ligh
   2ba7c:	61542074 00006b73 3a525245 67694c20     t Task..ERR: Lig
   2ba8c:	74207468 206b7361 6c756f63 6f6e2064     ht task could no
   2ba9c:	65622074 696e6920 6c616974 64657a69     t be initialized
   2baac:	000a0d21 70616548 74666120 73207265     !...Heap after s
   2babc:	74726174 20676e69 6867694c 61542074     tarting Light Ta
   2bacc:	203a6b73 0a0d6425 00000000 6f727245     sk: %d......Erro
   2badc:	6e6f2072 6d656d20 2079726f 6f6c6c61     r on memory allo
   2baec:	69746163 6f206e6f 5246206e 54524545     cation on FREERT
   2bafc:	0d21534f 0000000a 6f727245 6e6f2072     OS!.....Error on
   2bb0c:	61747320 6f206b63 66726576 20776f6c      stack overflow 
   2bb1c:	46206e6f 52454552 21534f54 00000a0d     on FREERTOS!....
   2bb2c:	00024bac 00024b8e 00024b48 00024a66     .K...K..HK..fJ..
   2bb3c:	00024b48 00024b80 00024b48 00024a66     HK...K..HK..fJ..
   2bb4c:	00024b8e 00024b8e 00024b80 00024a66     .K...K...K..fJ..
   2bb5c:	00024a5e 00024a5e 00024a5e 00024dc4     ^J..^J..^J...M..
   2bb6c:	0002520c 000250cc 000250cc 000250c8     .R...P...P...P..
   2bb7c:	000251e4 000251e4 000251d6 000250c8     .Q...Q...Q...P..
   2bb8c:	000251e4 000251d6 000251e4 000250c8     .Q...Q...Q...P..
   2bb9c:	000251ec 000251ec 000251ec 000253f0     .Q...Q...Q...S..

0002bbac <_global_impure_ptr>:
   2bbac:	200000e4                                ... 

0002bbb0 <__sf_fake_stderr>:
	...

0002bbd0 <__sf_fake_stdin>:
	...

0002bbf0 <__sf_fake_stdout>:
	...
   2bc10:	4f500043 00584953 2d23002e 00202b30     C.POSIX...#-0+ .
   2bc20:	004c6c68 45676665 30004746 34333231     hlL.efgEFG.01234
   2bc30:	38373635 43424139 00464544 33323130     56789ABCDEF.0123
   2bc40:	37363534 62613938 66656463 20200000              456789abcdef.

0002bc4d <_ctype_>:
   2bc4d:	20202000 20202020 28282020 20282828     .         ((((( 
   2bc5d:	20202020 20202020 20202020 20202020                     
   2bc6d:	10108820 10101010 10101010 10101010      ...............
   2bc7d:	04040410 04040404 10040404 10101010     ................
   2bc8d:	41411010 41414141 01010101 01010101     ..AAAAAA........
   2bc9d:	01010101 01010101 01010101 10101010     ................
   2bcad:	42421010 42424242 02020202 02020202     ..BBBBBB........
   2bcbd:	02020202 02020202 02020202 10101010     ................
   2bccd:	00000020 00000000 00000000 00000000      ...............
	...

0002bd50 <_init>:
   2bd50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2bd52:	46c0      	nop			; (mov r8, r8)
   2bd54:	bcf8      	pop	{r3, r4, r5, r6, r7}
   2bd56:	bc08      	pop	{r3}
   2bd58:	469e      	mov	lr, r3
   2bd5a:	4770      	bx	lr

0002bd5c <__init_array_start>:
   2bd5c:	000120dd 	.word	0x000120dd

0002bd60 <_fini>:
   2bd60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2bd62:	46c0      	nop			; (mov r8, r8)
   2bd64:	bcf8      	pop	{r3, r4, r5, r6, r7}
   2bd66:	bc08      	pop	{r3}
   2bd68:	469e      	mov	lr, r3
   2bd6a:	4770      	bx	lr

0002bd6c <__fini_array_start>:
   2bd6c:	000120b5 	.word	0x000120b5
